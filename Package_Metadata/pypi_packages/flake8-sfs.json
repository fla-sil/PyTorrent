{"info": {"author": "Peter J. A. Cock", "author_email": "p.j.a.cock@googlemail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Framework :: Flake8", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Software Development :: Quality Assurance"], "description": "flake8-sfs - Python String Formatting Style Plugin\n==================================================\n\n.. image:: https://img.shields.io/pypi/v/flake8-sfs.svg\n   :alt: Released on the Python Package Index (PyPI)\n   :target: https://pypi.org/project/flake8-sfs/\n.. image:: https://img.shields.io/conda/vn/conda-forge/flake8-sfs.svg\n   :alt: Released on Conda\n   :target: https://anaconda.org/conda-forge/flake8-sfs\n.. image:: https://img.shields.io/travis/peterjc/flake8-sfs/master.svg\n   :alt: Testing with TravisCI\n   :target: https://travis-ci.org/peterjc/flake8-sfs/branches\n.. image:: https://img.shields.io/pypi/dm/flake8-sfs.svg\n   :alt: PyPI downloads\n   :target: https://pypistats.org/packages/flake8-sfs\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n   :alt: Code style: black\n   :target: https://github.com/python/black\n\nIntroduction\n------------\n\nThis is an MIT licensed flake8 plugin for enforcing a Python string formatting\npreference. It is available to install from the `Python Package Index (PyPI)\n<https://pypi.org/project/flake8-sfs/>`_.\n\nFor historical reasons, the Python programming language has accumlated multiple\nways to do string formatting. The three main ones are:\n\n* Percent operator (violation codes ``SFS1##``), as in this example:\n\n.. code :: pycon\n\n    >>> name = \"Peter\"\n    >>> price = 1.2\n    >>> print(\"Hello %s, do you have $%0.2f?\" % (name, price))\n    Hello Peter, do you have $1.20?\n\n* Format method (violation codes ``SFS2##``), available since Python 2.6,\n\n.. code :: pycon\n\n    >>> name = \"Peter\"\n    >>> price = 1.2\n    >>> print(\"Hello {}, do you have ${:0.2f}?\".format(name, price))\n    Hello Peter, do you have $1.20?\n\n* f-strings (violation codes ``SFS3##``), available since Python 3.6,\n\n.. code :: pycon\n\n    >>> name = \"Peter\"\n    >>> price = 1.2\n    >>> print(f\"Hello {name}, do you have ${price:0.2f}?\")\n\nWe are spoilt for choice, but quoting the `Zen of Python\n<https://www.python.org/dev/peps/pep-0020/>`_, *There should be one - and\npreferably only one - obvious way to do it*. This flake8 plugin exists to let\nyou define which of these styles your project allows.\n\nBy default this plugin complains about all three styles - we expect you to make\nan explicit choice and configure which codes to ignore. See uses cases below.\n\nFlake8 Validation codes\n-----------------------\n\nEarly versions of flake8 assumed a single character prefix for the validation\ncodes, which became problematic with collisions in the plugin ecosystem. Since\nv3.0, flake8 has supported longer prefixes therefore this plugin uses ``SFS``\nas its prefix (short for String Format Style).\n\nPrefix ``SFS1`` - percent operator:\n\n====== =======================================================================\nCode   Description\n------ -----------------------------------------------------------------------\nSFS101 String literal formatting using percent operator.\nSFS102 Bytes literal formatting using percent operator.\n====== =======================================================================\n\nPrefix ``SFS2`` - format method:\n\n====== =======================================================================\nCode   Description\n------ -----------------------------------------------------------------------\nSFS201 String literal formatting using .format method.\nSFS202 String formatting with str.format('...', ...) directly.\n====== =======================================================================\n\nPrefix ``SFS3`` - f-strings:\n\n====== =======================================================================\nCode   Description\n------ -----------------------------------------------------------------------\nSFS301 String literal formatting using f-string.\n====== =======================================================================\n\nYou can use a partial code like ``SFS1`` in flake8 to ignore all the ``SFS1##``\npercent formatting codes.\n\nUse cases\n=========\n\nIf you accept that f-strings are best, you could run a tool like `flynt\n<https://github.com/ikamensh/flynt>`_ to automatically convert all your code -\nand then use this flake8 plugin to enforce the style by configuring it to\nignore the ``SFS301`` violation.\n\nYou might be maintaining a project which still supports Python 2, where you\nhave a mix of percent and format method string formatting. Here tell flake8 to\nignore the ``SFS1`` and ``SFS2`` prefixes, and complain only about f-strings\nwhich would be a syntax error on Python 2 (i.e. enforce only prefix ``SFS3``).\n\nAlternatively, you might have a large legacy codebase with lots of the percent\nformatting - yet want to move any format methods to f-strings. Here you could\nignore the ``SFS1`` and ``SFS3`` prefixes and enforce only the format method\nchecks (``SFS2`` prefix).\n\nOr you might say the old ways are the best, and configure flake8 to ignore the\npercent formatting but treat either the format method or f-strings as errors\n(by ignoring the ``SFS1`` prefix).\n\nInstallation and usage\n----------------------\n\nPython 3.6 or later is required (as we use need to parse the Python syntax\nwhich may include f-strings), but flake8 and this plugin can still be used on\ncode intended support older versions of Python.\n\nWe recommend installing the plugin using pip, which handles the dependencies::\n\n    $ pip install flake8-sfs\n\nAlternatively, if you are using the Anaconda packaging system, the following\ncommand will install the plugin with its dependencies::\n\n    $ conda install -c conda-forge flake8-sfs\n\nThe new validator should be automatically included when using ``flake8`` which\nmay now report additional validation codes starting with ``SFS`` (as defined\nabove). For example::\n\n    $ flake8 example.py\n\nYou can request only the ``SFS`` codes be shown using::\n\n    $ flake8 --select SFS example.py\n\nYou should add at least some SFS validation codes to your flake8 configuration\nfile's select or ignore list.\n\nConfiguration\n-------------\n\nWe assume you are familiar with `flake8 configuration\n<http://flake8.pycqa.org/en/latest/user/configuration.html>`_.\n\nUnless your code performs no string formatting at all (which would be unusual),\nyou should tell flake8 to ignore at least one of this plugin's violation codes.\nFor example::\n\n    [flake8]\n    extend-ignore =\n        # Ignore f-strings, we like them:\n        SFS301,\n\nNote that flake8 allows splitting comma separated lists over multiple lines,\nand allows including of hash comment lines.\n\n\nVersion History\n---------------\n\n======= ========== ===========================================================\nVersion Released   Changes\n------- ---------- -----------------------------------------------------------\nv0.0.3  2020-01-22 - Updates to documentation and PyPI metadata.\nv0.0.2  2020-01-12 - Codes now have a heirachy (so can ignore whole groups).\n                   - Added ``str.format(\"...\", ...)`` check.\nv0.0.1  2020-01-11 - Initial public release (initial codes later reallocated).\n======= ========== ===========================================================\n\n\nDevelopers\n----------\n\nThis plugin is on GitHub at https://github.com/peterjc/flake8-sfs\n\nTo make a new release once tested locally and on TravisCI::\n\n    $ git tag vX.Y.Z\n    $ python setup.py sdist --formats=gztar\n    $ twine upload dist/flake8-sfs-X.Y.Z.tar.gz\n    $ git push origin master --tags\n\nThe PyPI upload should trigger an automated pull request updating the\n`flake8-sfs conda-forge recipe\n<https://github.com/conda-forge/flake8-sfs-feedstock/blob/master/recipe/meta.yaml>`_.", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/peterjc/flake8-sfs", "keywords": "strings,formatting,style,f-string", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "flake8-sfs", "package_url": "https://pypi.org/project/flake8-sfs/", "platform": "", "project_url": "https://pypi.org/project/flake8-sfs/", "project_urls": {"Homepage": "https://github.com/peterjc/flake8-sfs"}, "release_url": "https://pypi.org/project/flake8-sfs/0.0.3/", "requires_dist": null, "requires_python": "", "summary": "Python String Formatting Style (SFS) plugin for flake8", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"flake8-sfs-python-string-formatting-style-plugin\">\n<h2>flake8-sfs - Python String Formatting Style Plugin</h2>\n<a href=\"https://pypi.org/project/flake8-sfs/\" rel=\"nofollow\"><img alt=\"Released on the Python Package Index (PyPI)\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/79fe01dd6a73c0b4d6d033965628f402b8411871/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f666c616b65382d7366732e737667\"></a>\n<a href=\"https://anaconda.org/conda-forge/flake8-sfs\" rel=\"nofollow\"><img alt=\"Released on Conda\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/70e412df0274a8cf50c0a6fd849bc128af253188/68747470733a2f2f696d672e736869656c64732e696f2f636f6e64612f766e2f636f6e64612d666f7267652f666c616b65382d7366732e737667\"></a>\n<a href=\"https://travis-ci.org/peterjc/flake8-sfs/branches\" rel=\"nofollow\"><img alt=\"Testing with TravisCI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8fc40c0bba2c31a8066d25efa8a119c72da19441/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f70657465726a632f666c616b65382d7366732f6d61737465722e737667\"></a>\n<a href=\"https://pypistats.org/packages/flake8-sfs\" rel=\"nofollow\"><img alt=\"PyPI downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1f5dcb2f4758952d30109d7ed72088afaefd4bc2/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f666c616b65382d7366732e737667\"></a>\n<a href=\"https://github.com/python/black\" rel=\"nofollow\"><img alt=\"Code style: black\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbfdc7754183ecf079bc71ddeabaf88f6cbc5c00/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667\"></a>\n<div id=\"introduction\">\n<h3>Introduction</h3>\n<p>This is an MIT licensed flake8 plugin for enforcing a Python string formatting\npreference. It is available to install from the <a href=\"https://pypi.org/project/flake8-sfs/\" rel=\"nofollow\">Python Package Index (PyPI)</a>.</p>\n<p>For historical reasons, the Python programming language has accumlated multiple\nways to do string formatting. The three main ones are:</p>\n<ul>\n<li>Percent operator (violation codes <tt>SFS1##</tt>), as in this example:</li>\n</ul>\n<pre><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">\"Peter\"</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">price</span> <span class=\"o\">=</span> <span class=\"mf\">1.2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Hello </span><span class=\"si\">%s</span><span class=\"s2\">, do you have $</span><span class=\"si\">%0.2f</span><span class=\"s2\">?\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">price</span><span class=\"p\">))</span>\n<span class=\"go\">Hello Peter, do you have $1.20?</span>\n</pre>\n<ul>\n<li>Format method (violation codes <tt>SFS2##</tt>), available since Python 2.6,</li>\n</ul>\n<pre><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">\"Peter\"</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">price</span> <span class=\"o\">=</span> <span class=\"mf\">1.2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Hello </span><span class=\"si\">{}</span><span class=\"s2\">, do you have $</span><span class=\"si\">{:0.2f}</span><span class=\"s2\">?\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">price</span><span class=\"p\">))</span>\n<span class=\"go\">Hello Peter, do you have $1.20?</span>\n</pre>\n<ul>\n<li>f-strings (violation codes <tt>SFS3##</tt>), available since Python 3.6,</li>\n</ul>\n<pre><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">\"Peter\"</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">price</span> <span class=\"o\">=</span> <span class=\"mf\">1.2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"Hello </span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">, do you have $</span><span class=\"si\">{</span><span class=\"n\">price</span><span class=\"si\">:</span><span class=\"s2\">0.2f</span><span class=\"si\">}</span><span class=\"s2\">?\"</span><span class=\"p\">)</span>\n</pre>\n<p>We are spoilt for choice, but quoting the <a href=\"https://www.python.org/dev/peps/pep-0020/\" rel=\"nofollow\">Zen of Python</a>, <em>There should be one - and\npreferably only one - obvious way to do it</em>. This flake8 plugin exists to let\nyou define which of these styles your project allows.</p>\n<p>By default this plugin complains about all three styles - we expect you to make\nan explicit choice and configure which codes to ignore. See uses cases below.</p>\n</div>\n<div id=\"flake8-validation-codes\">\n<h3>Flake8 Validation codes</h3>\n<p>Early versions of flake8 assumed a single character prefix for the validation\ncodes, which became problematic with collisions in the plugin ecosystem. Since\nv3.0, flake8 has supported longer prefixes therefore this plugin uses <tt>SFS</tt>\nas its prefix (short for String Format Style).</p>\n<p>Prefix <tt>SFS1</tt> - percent operator:</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td>Code</td>\n<td>Description</td>\n</tr>\n<tr><td>SFS101</td>\n<td>String literal formatting using percent operator.</td>\n</tr>\n<tr><td>SFS102</td>\n<td>Bytes literal formatting using percent operator.</td>\n</tr>\n</tbody>\n</table>\n<p>Prefix <tt>SFS2</tt> - format method:</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td>Code</td>\n<td>Description</td>\n</tr>\n<tr><td>SFS201</td>\n<td>String literal formatting using .format method.</td>\n</tr>\n<tr><td>SFS202</td>\n<td>String formatting with str.format(\u2018\u2026\u2019, \u2026) directly.</td>\n</tr>\n</tbody>\n</table>\n<p>Prefix <tt>SFS3</tt> - f-strings:</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td>Code</td>\n<td>Description</td>\n</tr>\n<tr><td>SFS301</td>\n<td>String literal formatting using f-string.</td>\n</tr>\n</tbody>\n</table>\n<p>You can use a partial code like <tt>SFS1</tt> in flake8 to ignore all the <tt>SFS1##</tt>\npercent formatting codes.</p>\n</div>\n</div>\n<div id=\"use-cases\">\n<h2>Use cases</h2>\n<p>If you accept that f-strings are best, you could run a tool like <a href=\"https://github.com/ikamensh/flynt\" rel=\"nofollow\">flynt</a> to automatically convert all your code -\nand then use this flake8 plugin to enforce the style by configuring it to\nignore the <tt>SFS301</tt> violation.</p>\n<p>You might be maintaining a project which still supports Python 2, where you\nhave a mix of percent and format method string formatting. Here tell flake8 to\nignore the <tt>SFS1</tt> and <tt>SFS2</tt> prefixes, and complain only about f-strings\nwhich would be a syntax error on Python 2 (i.e. enforce only prefix <tt>SFS3</tt>).</p>\n<p>Alternatively, you might have a large legacy codebase with lots of the percent\nformatting - yet want to move any format methods to f-strings. Here you could\nignore the <tt>SFS1</tt> and <tt>SFS3</tt> prefixes and enforce only the format method\nchecks (<tt>SFS2</tt> prefix).</p>\n<p>Or you might say the old ways are the best, and configure flake8 to ignore the\npercent formatting but treat either the format method or f-strings as errors\n(by ignoring the <tt>SFS1</tt> prefix).</p>\n<div id=\"installation-and-usage\">\n<h3>Installation and usage</h3>\n<p>Python 3.6 or later is required (as we use need to parse the Python syntax\nwhich may include f-strings), but flake8 and this plugin can still be used on\ncode intended support older versions of Python.</p>\n<p>We recommend installing the plugin using pip, which handles the dependencies:</p>\n<pre>$ pip install flake8-sfs\n</pre>\n<p>Alternatively, if you are using the Anaconda packaging system, the following\ncommand will install the plugin with its dependencies:</p>\n<pre>$ conda install -c conda-forge flake8-sfs\n</pre>\n<p>The new validator should be automatically included when using <tt>flake8</tt> which\nmay now report additional validation codes starting with <tt>SFS</tt> (as defined\nabove). For example:</p>\n<pre>$ flake8 example.py\n</pre>\n<p>You can request only the <tt>SFS</tt> codes be shown using:</p>\n<pre>$ flake8 --select SFS example.py\n</pre>\n<p>You should add at least some SFS validation codes to your flake8 configuration\nfile\u2019s select or ignore list.</p>\n</div>\n<div id=\"configuration\">\n<h3>Configuration</h3>\n<p>We assume you are familiar with <a href=\"http://flake8.pycqa.org/en/latest/user/configuration.html\" rel=\"nofollow\">flake8 configuration</a>.</p>\n<p>Unless your code performs no string formatting at all (which would be unusual),\nyou should tell flake8 to ignore at least one of this plugin\u2019s violation codes.\nFor example:</p>\n<pre>[flake8]\nextend-ignore =\n    # Ignore f-strings, we like them:\n    SFS301,\n</pre>\n<p>Note that flake8 allows splitting comma separated lists over multiple lines,\nand allows including of hash comment lines.</p>\n</div>\n<div id=\"version-history\">\n<h3>Version History</h3>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td>Version</td>\n<td>Released</td>\n<td>Changes</td>\n</tr>\n<tr><td>v0.0.3</td>\n<td>2020-01-22</td>\n<td><ul>\n<li>Updates to documentation and PyPI metadata.</li>\n</ul>\n</td>\n</tr>\n<tr><td>v0.0.2</td>\n<td>2020-01-12</td>\n<td><ul>\n<li>Codes now have a heirachy (so can ignore whole groups).</li>\n<li>Added <tt><span class=\"pre\">str.format(\"...\",</span> <span class=\"pre\">...)</span></tt> check.</li>\n</ul>\n</td>\n</tr>\n<tr><td>v0.0.1</td>\n<td>2020-01-11</td>\n<td><ul>\n<li>Initial public release (initial codes later reallocated).</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"developers\">\n<h3>Developers</h3>\n<p>This plugin is on GitHub at <a href=\"https://github.com/peterjc/flake8-sfs\" rel=\"nofollow\">https://github.com/peterjc/flake8-sfs</a></p>\n<p>To make a new release once tested locally and on TravisCI:</p>\n<pre>$ git tag vX.Y.Z\n$ python setup.py sdist --formats=gztar\n$ twine upload dist/flake8-sfs-X.Y.Z.tar.gz\n$ git push origin master --tags\n</pre>\n<p>The PyPI upload should trigger an automated pull request updating the\n<a href=\"https://github.com/conda-forge/flake8-sfs-feedstock/blob/master/recipe/meta.yaml\" rel=\"nofollow\">flake8-sfs conda-forge recipe</a>.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6499764, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "a95dd91633cd5f340aaf0d8946f6f025", "sha256": "444b839ef76eaaa17c56a362b13f587959836032b57d1f19bacc716d84b78e01"}, "downloads": -1, "filename": "flake8-sfs-0.0.1.tar.gz", "has_sig": false, "md5_digest": "a95dd91633cd5f340aaf0d8946f6f025", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5699, "upload_time": "2020-01-11T23:42:35", "upload_time_iso_8601": "2020-01-11T23:42:35.636708Z", "url": "https://files.pythonhosted.org/packages/ca/2d/b1860b76c0b0d7d83e98688fe5d1b57aaf7907828c6945256c32f499aca4/flake8-sfs-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "98fa68d46d9876df23a7037f732929d4", "sha256": "aeada40b526bf49d443f3f21483705dd8fa958c23809671e2ea8ab8cc1eeb4ab"}, "downloads": -1, "filename": "flake8-sfs-0.0.2.tar.gz", "has_sig": false, "md5_digest": "98fa68d46d9876df23a7037f732929d4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6079, "upload_time": "2020-01-12T11:34:10", "upload_time_iso_8601": "2020-01-12T11:34:10.429476Z", "url": "https://files.pythonhosted.org/packages/77/18/5dfc0e1ab76570a25b18d5f9ba76fb97f459668ec0bfdeb63faf84ad1d34/flake8-sfs-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "dbf1b4d0c46cc6711fad662ddda473dc", "sha256": "43936ce55c18fec8465b9640825dd27da7bb748f1bb899e8954cd9e3cae05a94"}, "downloads": -1, "filename": "flake8-sfs-0.0.3.tar.gz", "has_sig": false, "md5_digest": "dbf1b4d0c46cc6711fad662ddda473dc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6246, "upload_time": "2020-01-22T11:36:22", "upload_time_iso_8601": "2020-01-22T11:36:22.790122Z", "url": "https://files.pythonhosted.org/packages/26/69/3b4c40961230d8e6d13d4da1533da8f2c89d66c4fa058a3ff5700682b685/flake8-sfs-0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "dbf1b4d0c46cc6711fad662ddda473dc", "sha256": "43936ce55c18fec8465b9640825dd27da7bb748f1bb899e8954cd9e3cae05a94"}, "downloads": -1, "filename": "flake8-sfs-0.0.3.tar.gz", "has_sig": false, "md5_digest": "dbf1b4d0c46cc6711fad662ddda473dc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6246, "upload_time": "2020-01-22T11:36:22", "upload_time_iso_8601": "2020-01-22T11:36:22.790122Z", "url": "https://files.pythonhosted.org/packages/26/69/3b4c40961230d8e6d13d4da1533da8f2c89d66c4fa058a3ff5700682b685/flake8-sfs-0.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 01:03:20 2020"}