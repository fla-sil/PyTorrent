{"info": {"author": "R.R. Nederhoed", "author_email": "rr@nederhoed.com", "bugtrack_url": null, "classifiers": [], "description": "python-subledger\n================\n\nPython implementation of the Subledger.com API for double entry accounting\n\nDocumentation and API endpoint: https://api.subledger.com/\n\n### Beware ###\nThis library is experimental and unfinished. Do not rely on it (yet).\n\nFeel free to suggest code changes or features!\n\nThe base for working with Subledger is an Organization. You can get yourself an \nidentity (user) with Subledger. With this identity and an API key, you can \ncreate an Organization. The Organization will house accounting Books and journal \nentries.\n\nImplemented:\n* Organization\n* Book\n* Account\n* JournalEntry\n\nTodo:\n* Switch to v2: https://api.subledger.com/v2/\n* Fix broken tests\n* Implement Category\n* Implement Report\n\nNice to hace:\n* Implement Identity\n* ReportRenderings\n\n## Usage ##\n\n    from subledger import Book, Organization\n    \n    # Authenticate with your Subledger credentials\n    Book.authenticate(api_key, api_secret)\n    \n    # Use your organization to browse the books and accounts\n    org = Organization.from_id('<your org ID>')\n    for book in Book.all(org):\n        print book\n    \n    # Create a new book and archive it immediately\n    book = Book(org, 'USD')\n    book.save()\n    print len(list(Book.all(org))), 'active books'\n    print len(list(Book.all(org, state='archived'))), 'archived books'\n\n    book.archive()\n    print len(list(Book.all(org))), 'active books'\n    print len(list(Book.all(org, state='archived'))), 'archived books'\n    \n\n## Class pattern ##\n\n### SubledgerBase ###\nAll models derive from SubledgerBase\n#### .authenticate(key_id, secret)\nRegister your API key credentials to get access to the Subledger API.\n\n#### .from_id(id_)\nCreate the instance by loading the data from Subledger. \n\n#### .from_dict(dict)\nCreate the instance from the given dict without requests to Subledger. \n\n#### .save()\nWrite the values to Subledger. \n\nIt will not save data recursively. For example;\n    book.save()\nwill **not** save changes made to book.organization\n\n### Organization ###\n#### .from_id(org_id)\n\n### Book ###\n#### .from_id(book_id, org_id)\n#### .organization\nThe Organization object this Book belongs to.\n\n### Account ###\n#### .from_id(account_id, org_id, book_id)\n#### .book\nThe Book object this Account belongs to.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/nederhoed/python-subledger", "keywords": null, "license": "No licence yet, see LICENCE.txt", "maintainer": null, "maintainer_email": null, "name": "python-subledger", "package_url": "https://pypi.org/project/python-subledger/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/python-subledger/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/nederhoed/python-subledger"}, "release_url": "https://pypi.org/project/python-subledger/0.1/", "requires_dist": null, "requires_python": null, "summary": "Python client for the Subledger in-app accounting service.", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            python-subledger<br>================<br><br>Python implementation of the Subledger.com API for double entry accounting<br><br>Documentation and API endpoint: https://api.subledger.com/<br><br>### Beware ###<br>This library is experimental and unfinished. Do not rely on it (yet).<br><br>Feel free to suggest code changes or features!<br><br>The base for working with Subledger is an Organization. You can get yourself an <br>identity (user) with Subledger. With this identity and an API key, you can <br>create an Organization. The Organization will house accounting Books and journal <br>entries.<br><br>Implemented:<br>* Organization<br>* Book<br>* Account<br>* JournalEntry<br><br>Todo:<br>* Switch to v2: https://api.subledger.com/v2/<br>* Fix broken tests<br>* Implement Category<br>* Implement Report<br><br>Nice to hace:<br>* Implement Identity<br>* ReportRenderings<br><br>## Usage ##<br><br>    from subledger import Book, Organization<br>    <br>    # Authenticate with your Subledger credentials<br>    Book.authenticate(api_key, api_secret)<br>    <br>    # Use your organization to browse the books and accounts<br>    org = Organization.from_id('&lt;your org ID&gt;')<br>    for book in Book.all(org):<br>        print book<br>    <br>    # Create a new book and archive it immediately<br>    book = Book(org, 'USD')<br>    book.save()<br>    print len(list(Book.all(org))), 'active books'<br>    print len(list(Book.all(org, state='archived'))), 'archived books'<br><br>    book.archive()<br>    print len(list(Book.all(org))), 'active books'<br>    print len(list(Book.all(org, state='archived'))), 'archived books'<br>    <br><br>## Class pattern ##<br><br>### SubledgerBase ###<br>All models derive from SubledgerBase<br>#### .authenticate(key_id, secret)<br>Register your API key credentials to get access to the Subledger API.<br><br>#### .from_id(id_)<br>Create the instance by loading the data from Subledger. <br><br>#### .from_dict(dict)<br>Create the instance from the given dict without requests to Subledger. <br><br>#### .save()<br>Write the values to Subledger. <br><br>It will not save data recursively. For example;<br>    book.save()<br>will **not** save changes made to book.organization<br><br>### Organization ###<br>#### .from_id(org_id)<br><br>### Book ###<br>#### .from_id(book_id, org_id)<br>#### .organization<br>The Organization object this Book belongs to.<br><br>### Account ###<br>#### .from_id(account_id, org_id, book_id)<br>#### .book<br>The Book object this Account belongs to.\n          </div>"}, "last_serial": 1177138, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "64eb4516698fafc4bb7774f6389c09af", "sha256": "f81b491cf662b1b146eddaf2719d0a4b862fca68ead2430638452ebd693a4540"}, "downloads": -1, "filename": "python-subledger-0.1.zip", "has_sig": false, "md5_digest": "64eb4516698fafc4bb7774f6389c09af", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8261, "upload_time": "2014-08-01T21:14:28", "upload_time_iso_8601": "2014-08-01T21:14:28.056461Z", "url": "https://files.pythonhosted.org/packages/41/53/7adb907cd82d3e572a80f219a09f29baa60f21506d71a900c4067f638ea0/python-subledger-0.1.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "64eb4516698fafc4bb7774f6389c09af", "sha256": "f81b491cf662b1b146eddaf2719d0a4b862fca68ead2430638452ebd693a4540"}, "downloads": -1, "filename": "python-subledger-0.1.zip", "has_sig": false, "md5_digest": "64eb4516698fafc4bb7774f6389c09af", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8261, "upload_time": "2014-08-01T21:14:28", "upload_time_iso_8601": "2014-08-01T21:14:28.056461Z", "url": "https://files.pythonhosted.org/packages/41/53/7adb907cd82d3e572a80f219a09f29baa60f21506d71a900c4067f638ea0/python-subledger-0.1.zip", "yanked": false}], "timestamp": "Fri May  8 03:15:10 2020"}