{"info": {"author": "Guillaume Destuynder", "author_email": "gdestuynder@mozilla.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Simple Bugzilla interface\n=========================\n\nWhy?\n====\nBecause other libraries I found had limited API support (like no attachment support), complex implementation, and don't seem very supported/taking\nPRs :)\n\nFor example most of what can be done with a 1000SLOC lib is done in this one with 100SLOC.\n\nUsage\n=====\n\nYou can and should get an API KEY from Bugzilla with a Bugzilla account to your instance, in the user preferences.\nEverything is basically a DocDict (a dict() you can address like an object i.e. dict['x'] is also dict.x).\nThe contents of the DotDict reflects the exact output of the API, i.e. any JSON the API sends is what you'll find in the\nDotDict. Any data you need to send to the API uses the same names as well.\nSee full doc at http://bugzilla.readthedocs.org/en/latest/api/core/v1/ or/and just look at the output of the examples.\n\nExamples\n--------\n\n.. code:: Python\n\n        import bugzilla\n        \n        b = bugzilla.Bugzilla(url=\"https://bugzilla-dev.allizom.org/rest/\", api_key=\"your api key\")\n        #Just getting a bug\n        bug = b.get_bug(1001)\n        print(bug.id, bug.status)\n        #All attributes - it's just a dot dict.\n        print(bug)\n        \n        #Making a bug\n        bug = bugzilla.DotDict()\n        bug.product = 'My product'\n        bug.component = 'My component'\n        bug.summary = 'A test bug'\n        bug.whiteboard 'my_flag'\n        print(b.post_bug(bug))\n\n        #Adding an attachment\n        attachment = bugzilla.DotDict()\n        attachment.file_name = 'clowns.txt'\n        attachment.summary = 'Test attachement'\n        attachment.data = 'some ASCII content'\n        print(b.post_attachment(1001, attachment))\n\n        #Search for stuff\n        terms = [{'product': 'MyProduct'}, {'product': 'MyOtherProduct'}, {'status': 'NEW'}]\n        print(b.search_bugs(terms))\n        #Or more easily\n        print(b.quick_search('test bug'))\n\n\nTODO\n====\n\n- Currently it does not work without an API key.\n- Currently only support ASCII attachments as string.\n- Some more obscure API methods are not implemented, like classifieds.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/gdestuynder/simple_bugzilla", "keywords": "bugzilla client library", "license": "MPL", "maintainer": null, "maintainer_email": null, "name": "bugzilla", "package_url": "https://pypi.org/project/bugzilla/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/bugzilla/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/gdestuynder/simple_bugzilla"}, "release_url": "https://pypi.org/project/bugzilla/1.0.0/", "requires_dist": null, "requires_python": null, "summary": "A client library for Bugzilla", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"simple-bugzilla-interface\">\n<h2>Simple Bugzilla interface</h2>\n</div>\n<div id=\"why\">\n<h2>Why?</h2>\n<p>Because other libraries I found had limited API support (like no attachment support), complex implementation, and don\u2019t seem very supported/taking\nPRs :)</p>\n<p>For example most of what can be done with a 1000SLOC lib is done in this one with 100SLOC.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>You can and should get an API KEY from Bugzilla with a Bugzilla account to your instance, in the user preferences.\nEverything is basically a DocDict (a dict() you can address like an object i.e. dict[\u2018x\u2019] is also dict.x).\nThe contents of the DotDict reflects the exact output of the API, i.e. any JSON the API sends is what you\u2019ll find in the\nDotDict. Any data you need to send to the API uses the same names as well.\nSee full doc at <a href=\"http://bugzilla.readthedocs.org/en/latest/api/core/v1/\" rel=\"nofollow\">http://bugzilla.readthedocs.org/en/latest/api/core/v1/</a> or/and just look at the output of the examples.</p>\n<div id=\"examples\">\n<h3>Examples</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">bugzilla</span>\n\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">bugzilla</span><span class=\"o\">.</span><span class=\"n\">Bugzilla</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"o\">=</span><span class=\"s2\">\"https://bugzilla-dev.allizom.org/rest/\"</span><span class=\"p\">,</span> <span class=\"n\">api_key</span><span class=\"o\">=</span><span class=\"s2\">\"your api key\"</span><span class=\"p\">)</span>\n<span class=\"c1\">#Just getting a bug</span>\n<span class=\"n\">bug</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">get_bug</span><span class=\"p\">(</span><span class=\"mi\">1001</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">bug</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"n\">bug</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"p\">)</span>\n<span class=\"c1\">#All attributes - it's just a dot dict.</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">bug</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#Making a bug</span>\n<span class=\"n\">bug</span> <span class=\"o\">=</span> <span class=\"n\">bugzilla</span><span class=\"o\">.</span><span class=\"n\">DotDict</span><span class=\"p\">()</span>\n<span class=\"n\">bug</span><span class=\"o\">.</span><span class=\"n\">product</span> <span class=\"o\">=</span> <span class=\"s1\">'My product'</span>\n<span class=\"n\">bug</span><span class=\"o\">.</span><span class=\"n\">component</span> <span class=\"o\">=</span> <span class=\"s1\">'My component'</span>\n<span class=\"n\">bug</span><span class=\"o\">.</span><span class=\"n\">summary</span> <span class=\"o\">=</span> <span class=\"s1\">'A test bug'</span>\n<span class=\"n\">bug</span><span class=\"o\">.</span><span class=\"n\">whiteboard</span> <span class=\"s1\">'my_flag'</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">post_bug</span><span class=\"p\">(</span><span class=\"n\">bug</span><span class=\"p\">))</span>\n\n<span class=\"c1\">#Adding an attachment</span>\n<span class=\"n\">attachment</span> <span class=\"o\">=</span> <span class=\"n\">bugzilla</span><span class=\"o\">.</span><span class=\"n\">DotDict</span><span class=\"p\">()</span>\n<span class=\"n\">attachment</span><span class=\"o\">.</span><span class=\"n\">file_name</span> <span class=\"o\">=</span> <span class=\"s1\">'clowns.txt'</span>\n<span class=\"n\">attachment</span><span class=\"o\">.</span><span class=\"n\">summary</span> <span class=\"o\">=</span> <span class=\"s1\">'Test attachement'</span>\n<span class=\"n\">attachment</span><span class=\"o\">.</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"s1\">'some ASCII content'</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">post_attachment</span><span class=\"p\">(</span><span class=\"mi\">1001</span><span class=\"p\">,</span> <span class=\"n\">attachment</span><span class=\"p\">))</span>\n\n<span class=\"c1\">#Search for stuff</span>\n<span class=\"n\">terms</span> <span class=\"o\">=</span> <span class=\"p\">[{</span><span class=\"s1\">'product'</span><span class=\"p\">:</span> <span class=\"s1\">'MyProduct'</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'product'</span><span class=\"p\">:</span> <span class=\"s1\">'MyOtherProduct'</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'status'</span><span class=\"p\">:</span> <span class=\"s1\">'NEW'</span><span class=\"p\">}]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">search_bugs</span><span class=\"p\">(</span><span class=\"n\">terms</span><span class=\"p\">))</span>\n<span class=\"c1\">#Or more easily</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">quick_search</span><span class=\"p\">(</span><span class=\"s1\">'test bug'</span><span class=\"p\">))</span>\n</pre>\n</div>\n</div>\n<div id=\"todo\">\n<h2>TODO</h2>\n<ul>\n<li>Currently it does not work without an API key.</li>\n<li>Currently only support ASCII attachments as string.</li>\n<li>Some more obscure API methods are not implemented, like classifieds.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 1599809, "releases": {"1.0": [], "1.0\n": [], "1.0.0": [{"comment_text": "", "digests": {"md5": "c48e206e0544692c0543a7eca23e16b2", "sha256": "6e864ddafc4e46c821c1f3735d7c9686522a4eece056be0cadf51221e22dfa11"}, "downloads": -1, "filename": "bugzilla-1.0.0.tar.gz", "has_sig": true, "md5_digest": "c48e206e0544692c0543a7eca23e16b2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8564, "upload_time": "2015-06-20T00:03:49", "upload_time_iso_8601": "2015-06-20T00:03:49.823098Z", "url": "https://files.pythonhosted.org/packages/94/6a/e5d97bef32ccb695d158fb3f726e32f509bbd803257d7c0becfeae60d723/bugzilla-1.0.0.tar.gz", "yanked": false}], "1.0.0\n": []}, "urls": [{"comment_text": "", "digests": {"md5": "c48e206e0544692c0543a7eca23e16b2", "sha256": "6e864ddafc4e46c821c1f3735d7c9686522a4eece056be0cadf51221e22dfa11"}, "downloads": -1, "filename": "bugzilla-1.0.0.tar.gz", "has_sig": true, "md5_digest": "c48e206e0544692c0543a7eca23e16b2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8564, "upload_time": "2015-06-20T00:03:49", "upload_time_iso_8601": "2015-06-20T00:03:49.823098Z", "url": "https://files.pythonhosted.org/packages/94/6a/e5d97bef32ccb695d158fb3f726e32f509bbd803257d7c0becfeae60d723/bugzilla-1.0.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:36:05 2020"}