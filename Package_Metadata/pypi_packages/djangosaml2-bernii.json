{"info": {"author": "Yaco Sistemas", "author_email": "lgs@yaco.es", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Web Environment", "Intended Audience :: Developers", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Internet :: WWW/HTTP", "Topic :: Internet :: WWW/HTTP :: WSGI", "Topic :: Security", "Topic :: Software Development :: Libraries :: Application Frameworks"], "description": ".. contents::\n\n===========\ndjangosaml2\n===========\n\ndjangosaml2 is a Django application that integrates the PySAML2 library\ninto your project. This mean that you can protect your Django based project\nwith a service provider based on PySAML. This way it will talk SAML2 with\nyour Identity Provider allowing you to use this authentication mechanism.\nThis document will guide you through a few simple steps to accomplish\nsuch goal.\n\n\nInstallation\n============\n\nPySAML2 uses xmlsec1_ binary to sign SAML assertions so you need to install\nit either through your operating system package or by compiling the source\ncode. It doesn't matter where the final executable is installed because\nyou will need to set the full path to it in the configuration stage.\n\n.. _xmlsec1: http://www.aleksey.com/xmlsec/\n\nNow you can install the djangosaml2 package using easy_install or pip. This\nwill also install PySAML2 and its dependencies automatically.\n\n\nConfiguration\n=============\n\nThere are three things you need to setup to make djangosaml2 works in your\nDjango project:\n\n1. **settings.py** as you may already know, it is the main Django\n   configuration file.\n2. **urls.py** is the file where you will include djangosaml2 urls.\n3. **pysaml2** specific files such as a attribute map directory and a\n   certificate.\n\n\nChanges in the settings.py file\n-------------------------------\nThe first thing you need to do is add ``djangosaml2`` to the list of\ninstalled apps::\n\n  INSTALLED_APPS = (\n      'django.contrib.auth',\n      'django.contrib.contenttypes',\n      'django.contrib.sessions',\n      'django.contrib.sites',\n      'django.contrib.messages',\n      'django.contrib.admin',\n      'djangosaml2',  # new application\n  )\n\nActually this is not really required since djangosaml2 does not include\nany data model. The only reason we include it is to be able to run\ndjangosaml2 test suite from our project, something you should always\ndo to make sure it is compatible with your Django version and environment.\n\n.. note::\n\n  When you finish the configuation you can run the djangosaml2 test suite\n  as you run any other Django application test suite. Just type\n  ``python manage.py test djangosaml2``\n\nThen you have to add the djangosaml2.backends.Saml2Backend\nauthentication backend to the list of authentications backends.\nBy default only the ModelBackend included in Django is configured.\nA typical configuration would look like this::\n\n  AUTHENTICATION_BACKENDS = (\n      'django.contrib.auth.backends.ModelBackend',\n      'djangosaml2.backends.Saml2Backend',\n  )\n\n.. note::\n\n  Before djangosaml2 0.5.0 this authentication backend was\n  automatically added by djangosaml2. This turned out to be\n  a bad idea since some applications want to use their own\n  custom policies for authorization and the authentication\n  backend is a good place to define that. Starting from\n  djangosaml2 0.5.0 it is now possible to define such\n  backends.\n\nFinally we have to tell Django what is the new login url we want to use::\n\n  LOGIN_URL = '/saml2/login/'\n  SESSION_EXPIRE_AT_BROWSER_CLOSE = True\n\nHere we are telling Django that any view that requires an authenticated\nuser should redirect the user browser to that url if the user has not\nbeen authenticated before. We are also telling that when the user closes\nhis browser, the session should be terminated. This is useful in SAML2\nfederations where the logout protocol is not always available.\n\n.. note::\n\n  The login url starts with ``/saml2/`` as an example but you can change that\n  if you want. Check the section about changes in the ``urls.py``\n  file for more information.\n\nIf you want to allow several authentication mechanisms in your project\nyou should set the LOGIN_URL option to another view and put a link in such\nview to the ``/saml2/login/`` view.\n\n\nChanges in the urls.py file\n---------------------------\n\nThe next thing you need to do is to include ``djangosaml2.urls`` module to your\nmain ``urls.py`` module::\n\n  urlpatterns = patterns(\n      '',\n      #  lots of url definitions here\n\n      (r'^saml2/', include('djangosaml2.urls')),\n\n      #  more url definitions\n  )\n\nAs you can see we are including ``djangosaml2.urls`` under the *saml2*\nprefix. Feel free to use your own prefix but be consistent with what\nyou have put in the ``settings.py`` file in the LOGIN_URL parameter.\n\n\nPySAML2 specific files and configuration\n----------------------------------------\nOnce you have finished configuring your Django project you have to\nstart configuring PySAML. If you use just that library you have to\nput your configuration options in a file and initialize PySAML2 with\nthe path to that file.\n\nIn djangosaml2 you just put the same information in the Django\nsettings.py file under the SAML_CONFIG option.\n\nWe will see a typical configuration for protecting a Django project::\n\n  from os import path\n  import saml2\n  BASEDIR = path.dirname(path.abspath(__file__))\n  SAML_CONFIG = {\n    # full path to the xmlsec1 binary programm\n    'xmlsec_binary': '/usr/bin/xmlsec1',\n\n    # your entity id, usually your subdomain plus the url to the metadata view\n    'entityid': 'http://localhost:8000/saml2/metadata/',\n\n    # directory with attribute mapping\n    'attribute_map_dir': path.join(BASEDIR, 'attribute-maps'),\n\n    # this block states what services we provide\n    'service': {\n        # we are just a lonely SP\n        'sp' : {\n            'name': 'Federated Django sample SP',\n            'endpoints': {\n                # url and binding to the assetion consumer service view\n                # do not change the binding or service name\n                'assertion_consumer_service': [\n                    ('http://localhost:8000/saml2/acs/',\n                     saml2.BINDING_HTTP_POST),\n                    ],\n                # url and binding to the single logout service view\n                # do not change the binding or service name\n                'single_logout_service': [\n                    ('http://localhost:8000/saml2/ls/',\n                     saml2.BINDING_HTTP_REDIRECT),\n                    ],\n                },\n\n             # attributes that this project need to identify a user\n            'required_attributes': ['uid'],\n\n             # attributes that may be useful to have but not required\n            'optional_attributes': ['eduPersonAffiliation'],\n\n            # in this section the list of IdPs we talk to are defined\n            'idp': {\n                # we do not need a WAYF service since there is\n                # only an IdP defined here. This IdP should be\n                # present in our metadata\n\n                # the keys of this dictionary are entity ids\n                'https://localhost/simplesaml/saml2/idp/metadata.php': {\n                    'single_sign_on_service': {\n                        saml2.BINDING_HTTP_REDIRECT: 'https://localhost/simplesaml/saml2/idp/SSOService.php',\n                        },\n                    'single_logout_service': {\n                        saml2.BINDING_HTTP_REDIRECT: 'https://localhost/simplesaml/saml2/idp/SingleLogoutService.php',\n                        },\n                    },\n                },\n            },\n        },\n\n    # where the remote metadata is stored\n    'metadata': {\n        'local': [path.join(BASEDIR, 'remote_metadata.xml')],\n        },\n\n    # set to 1 to output debugging information\n    'debug': 1,\n\n    # certificate\n    'key_file': path.join(BASEDIR, 'mycert.key'),  # private part\n    'cert_file': path.join(BASEDIR, 'mycert.pem'),  # public part\n\n    # own metadata settings\n    'contact_person': [\n        {'given_name': 'Lorenzo',\n         'sur_name': 'Gil',\n         'company': 'Yaco Sistemas',\n         'email_address': 'lgs@yaco.es',\n         'contact_type': 'technical'},\n        {'given_name': 'Angel',\n         'sur_name': 'Fernandez',\n         'company': 'Yaco Sistemas',\n         'email_address': 'angel@yaco.es',\n         'contact_type': 'administrative'},\n        ],\n    # you can set multilanguage information here\n    'organization': {\n        'name': [('Yaco Sistemas', 'es'), ('Yaco Systems', 'en')],\n        'display_name': [('Yaco', 'es'), ('Yaco', 'en')],\n        'url': [('http://www.yaco.es', 'es'), ('http://www.yaco.com', 'en')],\n        },\n    'valid_for': 24,  # how long is our metadata valid\n    }\n\n.. note::\n\n  Please check the `PySAML2 documentation`_ for more information about\n  these and other configuration options.\n\n.. _`PySAML2 documentation`: http://packages.python.org/pysaml2/\n\nThere are several external files and directories you have to create according\nto this configuration.\n\nThe xmlsec1 binary was mentioned in the installation section. Here, in the\nconfiguration part you just need to put the full path to xmlsec1 so PySAML2\ncan call it as it needs.\n\nThe ``attribute_map_dir`` points to a directory with attribute mappings that\nare used to translate user attribute names from several standards. It's usually\nsafe to just copy the default PySAML2 attribute maps that you can find in the\n``tests/attributemaps`` directory of the source distribution.\n\nThe ``metadata`` option is a dictionary where you can define several types of\nmetadata for remote entities. Usually the easiest type is the ``local`` where\nyou just put the name of a local XML file with the contents of the remote\nentities metadata. This XML file should be in the SAML2 metadata format.\n\nThe ``key_file`` and ``cert_file`` options references the two parts of a\nstandard x509 certificate. You need it to sign your metadata an to encrypt\nand decrypt the SAML2 assertions.\n\n.. note::\n\n  Check your openssl documentation to generate a test certificate but don't\n  forget to order a real one when you go into production.\n\n\nCustom and dynamic configuration loading\n........................................\n\nBy default, djangosaml2 reads the pysaml2 configuration options from the\nSAML_CONFIG setting but sometimes you want to read this information from\nanother place, like a file or a database. Sometimes you even want this\nconfiguration to be different depending on the request.\n\nStarting from djangosaml2 0.5.0 you can define your own configuration\nloader which is a callable that accepts a request parameter and returns\na saml2.config.SPConfig object. In order to do so you set the following\nsetting::\n\n  SAML_CONFIG_LOADER = 'python.path.to.your.callable'\n\n\nUser attributes\n---------------\n\nIn the SAML 2.0 authentication process the Identity Provider (IdP) will\nsend a security assertion to the Service Provider (SP) upon a succesfull\nauthentication. This assertion contains attributes about the user that\nwas authenticated. It depends on the IdP configuration what exact\nattributes are sent to each SP it can talk to.\n\nWhen such assertion is received on the Django side it is used to find\na Django user and create a session for it. By default djangosaml2 will\ndo a query on the User model with the 'username' attribute but you can\nchange it to any other attribute of the User model. For example,\nyou can do this look up using the 'email' attribute. In order to do so\nyou should set the following setting::\n\n  SAML_DJANGO_USER_MAIN_ATTRIBUTE = 'email'\n\nPlease, use an unique attribute when setting this option. Otherwise\nthe authentication process will fail because djangosaml2 does not know\nwhich Django user it should pick.\n\nYou can configure djangosaml2 to create such user if it is not already in\nthe Django database or maybe you don't want to allow users that are not\nin your database already. For this purpose there is another option you\ncan set in the settings.py file::\n\n  SAML_CREATE_UNKNOWN_USER = True\n\nThis setting is True by default.\n\nThe other thing you will probably want to configure is the mapping of\nSAML2 user attributes to Django user attributes. By default only the\nUser.username attribute is mapped but you can add more attributes or\nchange that one. In order to do so you need to change the\nSAML_ATTRIBUTE_MAPPING option in your settings.py::\n\n  SAML_ATTRIBUTE_MAPPING = {\n      'uid': ('username', ),\n      'mail': ('email', ),\n      'cn': ('first_name', ),\n      'sn': ('last_name', ),\n  }\n\nwhere the keys of this dictionary are SAML user attributes and the values\nare Django User attributes.\n\nIf you are using Django user profile objects to store extra attributes\nabout your user you can add those attributes to the SAML_ATTRIBUTE_MAPPING\ndictionary. For each (key, value) pair, djangosaml2 will try to store the\nattribute in the User model if there is a matching field in that model.\nOtherwise it will try to do the same with your profile custom model.\n\nLearn more about Django profile models at:\n\nhttps://docs.djangoproject.com/en/dev/topics/auth/#storing-additional-information-about-users\n\n\nSometimes you need to use special logic to update the user object\ndepending on the SAML2 attributes and the mapping described above\nis simply not enough. For these cases djangosaml2 provides a Django\nsignal that you can listen to. In order to do so you can add the\nfollowing code to your app::\n\n  from djangosaml2.signals import pre_user_save\n\n  def custom_update_user(sender=user, attributes=attributes, user_modified=user_modified)\n     ...\n     return True  # I modified the user object\n\n\nYour handler will receive the user object, the list of SAML attributes\nand a flag telling you if the user is already modified and need\nto be saved after your handler is executed. If your handler\nmodifies the user object it should return True. Otherwise it should\nreturn False. This way djangosaml2 will know if it should save\nthe user object so you don't need to do it and no more calls to\nthe save method are issued.\n\n\nIdP setup\n=========\nCongratulations, you have finished configuring the SP side of the federation.\nNow you need to send the entity id and the metadata of this new SP to the\nIdP administrators so they can add it to their list of trusted services.\n\nYou can get this information starting your Django development server and\ngoing to the http://localhost:8000/saml2/metadata url. If you have included\nthe djangosaml2 urls under a different url prefix you need to correct this\nurl.\n\nSimpleSAMLphp issues\n--------------------\nAs of SimpleSAMLphp 1.8.2 there is a problem if you specify attributes in\nthe SP configuration. When the SimpleSAMLphp metadata parser converts the\nXML into its custom php format it puts the following option::\n\n  'attributes.NameFormat' => 'urn:oasis:names:tc:SAML:2.0:attrname-format:uri'\n\nBut it need to be replaced by this one::\n\n  'AttributeNameFormat' => 'urn:oasis:names:tc:SAML:2.0:attrname-format:uri'\n\nOtherwise the Assertions sent from the IdP to the SP will have a wrong\nAttribute Name Format and pysaml2 will be confused.\n\nFurthermore if you have a AttributeLimit filter in your SimpleSAMLphp\nconfiguration  you will need to enable another attribute filter just\nbefore to make sure that the AttributeLimit does not remove the attributes\nfrom the authentication source. The filter you need to add is an AttributeMap\nfilter like this::\n\n  10 => array(\n             'class' => 'core:AttributeMap', 'name2oid'\n        ),\n\nTesting\n=======\n\nOne way to check if everything is working as expected is to enable the\nfollowing url::\n\n  urlpatterns = patterns(\n      '',\n      #  lots of url definitions here\n\n      (r'^saml2/', include('djangosaml2.urls')),\n      (r'^test/', 'djangosaml2.views.echo_attributes'),\n\n      #  more url definitions\n  )\n\n\nNow if you go to the /test/ url you will see your SAML attributes and also\na link to do a global logout.\n\nYou can also run the unit tests with the following command::\n\n  python tests/run_tests.py\n\nIf you have `tox`_ installed you can simply call tox inside the root directory\nand it will run the tests in multiple versions of Python.\n\n.. _`tox`: http://pypi.python.org/pypi/tox\n\nFAQ\n===\n\n**Why can't SAML be implemented as an Django Authentication Backend?**\n\nwell SAML authentication is not that simple as a set of credentials you can\nput on a login form and get a response back. Actually the user password is\nnot given to the service provider at all. This is by design. You have to\ndelegate the task of authentication to the IdP and then get an asynchronous\nresponse from it.\n\nGiven said that, djangosaml2 does use a Django Authentication Backend to\ntransform the SAML assertion about the user into a Django user object.\n\n**Why not put everything in a Django middleware class and make our lifes\neasier?**\n\nYes, that was an option I did evaluate but at the end the current design\nwon. In my opinion putting this logic into a middleware has the advantage\nof making it easier to configure but has a couple of disadvantages: first,\nthe middleware would need to check if the request path is one of the\nSAML endpoints for every request. Second, it would be too magical and in\ncase of a problem, much harder to debug.\n\n**Why not call this package django-saml as many other Django applications?**\n\nFollowing that pattern then I should import the application with\nimport saml but unfortunately that module name is already used in pysaml2.\n\n\nChanges\n=======\n0.11.0 (2014-06-15)\n-------------------\n- Django 1.5 custom user model support. Thanks to Jos van Velzen\n- Django 1.5 compatibility url template tag. Thanks to bula\n- Support Django 1.5 and 1.6. Thanks to David Evans and Justin Quick\n\n0.10.0 (2013-05-05)\n-------------------\n- Check that RelayState is not empty before redirecting into a loop. Thanks\n  to Sam Bull for reporting this issue.\n- In the global logout process, when the session is lost, report an error\n  message to the user and perform a local logout.\n\n0.9.2 (2013-04-19)\n------------------\n- Upgrade to pysaml2-0.4.3.\n\n0.9.1 (2013-01-29)\n------------------\n- Add a method to the authentication backend so it is possible\n  to customize the authorization based on SAML attributes.\n\n0.9.0 (2012-10-30)\n------------------\n- Add a signal for modifying the user just before saving it on\n  the update_user method of the authentication backend.\n\n0.8.1 (2012-10-29)\n------------------\n- Trim the SAML attributes before setting them to the Django objects\n  if they are too long. This fixes a crash with MySQL.\n\n0.8.0 (2012-10-25)\n------------------\n- Allow to use different attributes besides 'username' to look for\n  existing users.\n\n0.7.0 (2012-10-19)\n------------------\n- Add a setting to decide if the user should be redirected to the\n  next view or shown an authorization error when the user tries to\n  login twice.\n\n0.6.1 (2012-09-03)\n------------------\n- Remove Django from our dependencies\n- Restore support for Django 1.3\n\n0.6.0 (2012-08-29)\n------------------\n- Add tox support configured to run the tests with Python 2.6 and 2.7\n- Fix some dependencies and sdist generation. Lorenzo Gil\n- Allow defining a logout redirect url in the settings. Lorenzo Gil\n- Add some logging calls to improve debugging. Lorenzo Gil\n- Add support for custom conf loading function. Sam Bull.\n- Make the tests more robust and easier to run when djangosaml2 is\n  included in a Django project. Sam Bull.\n- Make sure the profile is not None before saving it. Bug reported by\n  Leif Johansson\n\n0.5.0 (2012-05-22)\n------------------\n- Allow defining custom config loaders. They can be dynamic depending on\n  the request.\n- Do not automatically add the authentication backend. This way\n  we allow other people to add their own backends.\n- Support for additional attributes other than the ones that get mapped\n  into the User model. Those attributes get stored in the UserProfile model.\n\n0.4.2 (2012-03-23)\n------------------\n- Fix a crash in the idplist templatetag about using an old pysaml2 function\n- Added a test for the previous crash\n\n0.4.1 (2012-03-19)\n------------------\n- Upgrade pysaml2 dependency to version 0.4.1\n\n0.4.0 (2012-03-18)\n------------------\n- Upgrade pysaml2 dependency to version 0.4.0 (update our tests as a result\n  of this)\n- Add logging calls to make debugging easier\n- Use the Django configured logger in pysaml2\n\n0.3.3 (2012-02-14)\n------------------\n- Freeze the version of pysaml2 since we are not (yet!) compatible with\n  version 0.4.0\n\n0.3.2 (2011-12-13)\n------------------\n- Avoid a crash when reading the SAML attribute that maps to the Django\n  username\n\n0.3.1 (2011-12-01)\n------------------\n- Load the config in the render method of the idplist templatetag to\n  make it more flexible and reentrant.\n\n0.3.0 (2011-11-30)\n------------------\n- Templatetag to get the list of available idps.\n- Allow to map the same SAML attribute into several Django field.\n\n0.2.4 (2011-11-29)\n------------------\n- Fix restructured text bugs that made pypi page looks bad.\n\n0.2.3 (2011-06-14)\n------------------\n- Set a unusable password when the user is created for the first time\n\n0.2.2 (2011-06-07)\n------------------\n- Prevent infinite loop when going to the /saml2/login/ endpoint and the user\n  is already logged in and the settings.LOGIN_REDIRECT_URL is (badly) pointing\n  to /saml2/login.\n\n0.2.1 (2011-05-09)\n------------------\n- If no next parameter is supplied to the login view, use the\n  settings.LOGIN_REDIRECT_URL as default\n\n0.2.0 (2011-04-26)\n------------------\n- Python 2.4 compatible if the elementtree library is installed\n- Allow post processing after the authentication phase by using\n  Django signals.\n\n0.1.1 (2011-04-18)\n------------------\n- Simple view to echo SAML attributes\n- Improve documentation\n- Change default behaviour when a new user is created. Now their attributes\n  are filled this first time\n- Allow to set a next page after the logout\n\n0.1.0 (2011-03-16)\n------------------\n- Emancipation from the pysaml package", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/bernii/djangosaml2", "keywords": "django,pysaml2,saml2,federated authentication,authentication", "license": "Apache 2.0", "maintainer": null, "maintainer_email": null, "name": "djangosaml2-bernii", "package_url": "https://pypi.org/project/djangosaml2-bernii/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/djangosaml2-bernii/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/bernii/djangosaml2"}, "release_url": "https://pypi.org/project/djangosaml2-bernii/0.11.2/", "requires_dist": null, "requires_python": null, "summary": "pysaml2 integration in Django", "version": "0.11.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#djangosaml2\" id=\"id26\" rel=\"nofollow\">djangosaml2</a><ul>\n<li><a href=\"#installation\" id=\"id27\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#configuration\" id=\"id28\" rel=\"nofollow\">Configuration</a><ul>\n<li><a href=\"#changes-in-the-settings-py-file\" id=\"id29\" rel=\"nofollow\">Changes in the settings.py file</a></li>\n<li><a href=\"#changes-in-the-urls-py-file\" id=\"id30\" rel=\"nofollow\">Changes in the urls.py file</a></li>\n<li><a href=\"#pysaml2-specific-files-and-configuration\" id=\"id31\" rel=\"nofollow\">PySAML2 specific files and configuration</a><ul>\n<li><a href=\"#custom-and-dynamic-configuration-loading\" id=\"id32\" rel=\"nofollow\">Custom and dynamic configuration loading</a></li>\n</ul>\n</li>\n<li><a href=\"#user-attributes\" id=\"id33\" rel=\"nofollow\">User attributes</a></li>\n</ul>\n</li>\n<li><a href=\"#idp-setup\" id=\"id34\" rel=\"nofollow\">IdP setup</a><ul>\n<li><a href=\"#simplesamlphp-issues\" id=\"id35\" rel=\"nofollow\">SimpleSAMLphp issues</a></li>\n</ul>\n</li>\n<li><a href=\"#testing\" id=\"id36\" rel=\"nofollow\">Testing</a></li>\n<li><a href=\"#faq\" id=\"id37\" rel=\"nofollow\">FAQ</a></li>\n<li><a href=\"#changes\" id=\"id38\" rel=\"nofollow\">Changes</a><ul>\n<li><a href=\"#id1\" id=\"id39\" rel=\"nofollow\">0.11.0 (2014-06-15)</a></li>\n<li><a href=\"#id2\" id=\"id40\" rel=\"nofollow\">0.10.0 (2013-05-05)</a></li>\n<li><a href=\"#id3\" id=\"id41\" rel=\"nofollow\">0.9.2 (2013-04-19)</a></li>\n<li><a href=\"#id4\" id=\"id42\" rel=\"nofollow\">0.9.1 (2013-01-29)</a></li>\n<li><a href=\"#id5\" id=\"id43\" rel=\"nofollow\">0.9.0 (2012-10-30)</a></li>\n<li><a href=\"#id6\" id=\"id44\" rel=\"nofollow\">0.8.1 (2012-10-29)</a></li>\n<li><a href=\"#id7\" id=\"id45\" rel=\"nofollow\">0.8.0 (2012-10-25)</a></li>\n<li><a href=\"#id8\" id=\"id46\" rel=\"nofollow\">0.7.0 (2012-10-19)</a></li>\n<li><a href=\"#id9\" id=\"id47\" rel=\"nofollow\">0.6.1 (2012-09-03)</a></li>\n<li><a href=\"#id10\" id=\"id48\" rel=\"nofollow\">0.6.0 (2012-08-29)</a></li>\n<li><a href=\"#id11\" id=\"id49\" rel=\"nofollow\">0.5.0 (2012-05-22)</a></li>\n<li><a href=\"#id12\" id=\"id50\" rel=\"nofollow\">0.4.2 (2012-03-23)</a></li>\n<li><a href=\"#id13\" id=\"id51\" rel=\"nofollow\">0.4.1 (2012-03-19)</a></li>\n<li><a href=\"#id14\" id=\"id52\" rel=\"nofollow\">0.4.0 (2012-03-18)</a></li>\n<li><a href=\"#id15\" id=\"id53\" rel=\"nofollow\">0.3.3 (2012-02-14)</a></li>\n<li><a href=\"#id16\" id=\"id54\" rel=\"nofollow\">0.3.2 (2011-12-13)</a></li>\n<li><a href=\"#id17\" id=\"id55\" rel=\"nofollow\">0.3.1 (2011-12-01)</a></li>\n<li><a href=\"#id18\" id=\"id56\" rel=\"nofollow\">0.3.0 (2011-11-30)</a></li>\n<li><a href=\"#id19\" id=\"id57\" rel=\"nofollow\">0.2.4 (2011-11-29)</a></li>\n<li><a href=\"#id20\" id=\"id58\" rel=\"nofollow\">0.2.3 (2011-06-14)</a></li>\n<li><a href=\"#id21\" id=\"id59\" rel=\"nofollow\">0.2.2 (2011-06-07)</a></li>\n<li><a href=\"#id22\" id=\"id60\" rel=\"nofollow\">0.2.1 (2011-05-09)</a></li>\n<li><a href=\"#id23\" id=\"id61\" rel=\"nofollow\">0.2.0 (2011-04-26)</a></li>\n<li><a href=\"#id24\" id=\"id62\" rel=\"nofollow\">0.1.1 (2011-04-18)</a></li>\n<li><a href=\"#id25\" id=\"id63\" rel=\"nofollow\">0.1.0 (2011-03-16)</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"djangosaml2\">\n<h2><a href=\"#id26\" rel=\"nofollow\">djangosaml2</a></h2>\n<p>djangosaml2 is a Django application that integrates the PySAML2 library\ninto your project. This mean that you can protect your Django based project\nwith a service provider based on PySAML. This way it will talk SAML2 with\nyour Identity Provider allowing you to use this authentication mechanism.\nThis document will guide you through a few simple steps to accomplish\nsuch goal.</p>\n<div id=\"installation\">\n<h3><a href=\"#id27\" rel=\"nofollow\">Installation</a></h3>\n<p>PySAML2 uses <a href=\"http://www.aleksey.com/xmlsec/\" rel=\"nofollow\">xmlsec1</a> binary to sign SAML assertions so you need to install\nit either through your operating system package or by compiling the source\ncode. It doesn\u2019t matter where the final executable is installed because\nyou will need to set the full path to it in the configuration stage.</p>\n<p>Now you can install the djangosaml2 package using easy_install or pip. This\nwill also install PySAML2 and its dependencies automatically.</p>\n</div>\n<div id=\"configuration\">\n<h3><a href=\"#id28\" rel=\"nofollow\">Configuration</a></h3>\n<p>There are three things you need to setup to make djangosaml2 works in your\nDjango project:</p>\n<ol>\n<li><strong>settings.py</strong> as you may already know, it is the main Django\nconfiguration file.</li>\n<li><strong>urls.py</strong> is the file where you will include djangosaml2 urls.</li>\n<li><strong>pysaml2</strong> specific files such as a attribute map directory and a\ncertificate.</li>\n</ol>\n<div id=\"changes-in-the-settings-py-file\">\n<h4><a href=\"#id29\" rel=\"nofollow\">Changes in the settings.py file</a></h4>\n<p>The first thing you need to do is add <tt>djangosaml2</tt> to the list of\ninstalled apps:</p>\n<pre>INSTALLED_APPS = (\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.sites',\n    'django.contrib.messages',\n    'django.contrib.admin',\n    'djangosaml2',  # new application\n)\n</pre>\n<p>Actually this is not really required since djangosaml2 does not include\nany data model. The only reason we include it is to be able to run\ndjangosaml2 test suite from our project, something you should always\ndo to make sure it is compatible with your Django version and environment.</p>\n<div>\n<p>Note</p>\n<p>When you finish the configuation you can run the djangosaml2 test suite\nas you run any other Django application test suite. Just type\n<tt>python manage.py test djangosaml2</tt></p>\n</div>\n<p>Then you have to add the djangosaml2.backends.Saml2Backend\nauthentication backend to the list of authentications backends.\nBy default only the ModelBackend included in Django is configured.\nA typical configuration would look like this:</p>\n<pre>AUTHENTICATION_BACKENDS = (\n    'django.contrib.auth.backends.ModelBackend',\n    'djangosaml2.backends.Saml2Backend',\n)\n</pre>\n<div>\n<p>Note</p>\n<p>Before djangosaml2 0.5.0 this authentication backend was\nautomatically added by djangosaml2. This turned out to be\na bad idea since some applications want to use their own\ncustom policies for authorization and the authentication\nbackend is a good place to define that. Starting from\ndjangosaml2 0.5.0 it is now possible to define such\nbackends.</p>\n</div>\n<p>Finally we have to tell Django what is the new login url we want to use:</p>\n<pre>LOGIN_URL = '/saml2/login/'\nSESSION_EXPIRE_AT_BROWSER_CLOSE = True\n</pre>\n<p>Here we are telling Django that any view that requires an authenticated\nuser should redirect the user browser to that url if the user has not\nbeen authenticated before. We are also telling that when the user closes\nhis browser, the session should be terminated. This is useful in SAML2\nfederations where the logout protocol is not always available.</p>\n<div>\n<p>Note</p>\n<p>The login url starts with <tt>/saml2/</tt> as an example but you can change that\nif you want. Check the section about changes in the <tt>urls.py</tt>\nfile for more information.</p>\n</div>\n<p>If you want to allow several authentication mechanisms in your project\nyou should set the LOGIN_URL option to another view and put a link in such\nview to the <tt>/saml2/login/</tt> view.</p>\n</div>\n<div id=\"changes-in-the-urls-py-file\">\n<h4><a href=\"#id30\" rel=\"nofollow\">Changes in the urls.py file</a></h4>\n<p>The next thing you need to do is to include <tt>djangosaml2.urls</tt> module to your\nmain <tt>urls.py</tt> module:</p>\n<pre>urlpatterns = patterns(\n    '',\n    #  lots of url definitions here\n\n    (r'^saml2/', include('djangosaml2.urls')),\n\n    #  more url definitions\n)\n</pre>\n<p>As you can see we are including <tt>djangosaml2.urls</tt> under the <em>saml2</em>\nprefix. Feel free to use your own prefix but be consistent with what\nyou have put in the <tt>settings.py</tt> file in the LOGIN_URL parameter.</p>\n</div>\n<div id=\"pysaml2-specific-files-and-configuration\">\n<h4><a href=\"#id31\" rel=\"nofollow\">PySAML2 specific files and configuration</a></h4>\n<p>Once you have finished configuring your Django project you have to\nstart configuring PySAML. If you use just that library you have to\nput your configuration options in a file and initialize PySAML2 with\nthe path to that file.</p>\n<p>In djangosaml2 you just put the same information in the Django\nsettings.py file under the SAML_CONFIG option.</p>\n<p>We will see a typical configuration for protecting a Django project:</p>\n<pre>from os import path\nimport saml2\nBASEDIR = path.dirname(path.abspath(__file__))\nSAML_CONFIG = {\n  # full path to the xmlsec1 binary programm\n  'xmlsec_binary': '/usr/bin/xmlsec1',\n\n  # your entity id, usually your subdomain plus the url to the metadata view\n  'entityid': 'http://localhost:8000/saml2/metadata/',\n\n  # directory with attribute mapping\n  'attribute_map_dir': path.join(BASEDIR, 'attribute-maps'),\n\n  # this block states what services we provide\n  'service': {\n      # we are just a lonely SP\n      'sp' : {\n          'name': 'Federated Django sample SP',\n          'endpoints': {\n              # url and binding to the assetion consumer service view\n              # do not change the binding or service name\n              'assertion_consumer_service': [\n                  ('http://localhost:8000/saml2/acs/',\n                   saml2.BINDING_HTTP_POST),\n                  ],\n              # url and binding to the single logout service view\n              # do not change the binding or service name\n              'single_logout_service': [\n                  ('http://localhost:8000/saml2/ls/',\n                   saml2.BINDING_HTTP_REDIRECT),\n                  ],\n              },\n\n           # attributes that this project need to identify a user\n          'required_attributes': ['uid'],\n\n           # attributes that may be useful to have but not required\n          'optional_attributes': ['eduPersonAffiliation'],\n\n          # in this section the list of IdPs we talk to are defined\n          'idp': {\n              # we do not need a WAYF service since there is\n              # only an IdP defined here. This IdP should be\n              # present in our metadata\n\n              # the keys of this dictionary are entity ids\n              'https://localhost/simplesaml/saml2/idp/metadata.php': {\n                  'single_sign_on_service': {\n                      saml2.BINDING_HTTP_REDIRECT: 'https://localhost/simplesaml/saml2/idp/SSOService.php',\n                      },\n                  'single_logout_service': {\n                      saml2.BINDING_HTTP_REDIRECT: 'https://localhost/simplesaml/saml2/idp/SingleLogoutService.php',\n                      },\n                  },\n              },\n          },\n      },\n\n  # where the remote metadata is stored\n  'metadata': {\n      'local': [path.join(BASEDIR, 'remote_metadata.xml')],\n      },\n\n  # set to 1 to output debugging information\n  'debug': 1,\n\n  # certificate\n  'key_file': path.join(BASEDIR, 'mycert.key'),  # private part\n  'cert_file': path.join(BASEDIR, 'mycert.pem'),  # public part\n\n  # own metadata settings\n  'contact_person': [\n      {'given_name': 'Lorenzo',\n       'sur_name': 'Gil',\n       'company': 'Yaco Sistemas',\n       'email_address': 'lgs@yaco.es',\n       'contact_type': 'technical'},\n      {'given_name': 'Angel',\n       'sur_name': 'Fernandez',\n       'company': 'Yaco Sistemas',\n       'email_address': 'angel@yaco.es',\n       'contact_type': 'administrative'},\n      ],\n  # you can set multilanguage information here\n  'organization': {\n      'name': [('Yaco Sistemas', 'es'), ('Yaco Systems', 'en')],\n      'display_name': [('Yaco', 'es'), ('Yaco', 'en')],\n      'url': [('http://www.yaco.es', 'es'), ('http://www.yaco.com', 'en')],\n      },\n  'valid_for': 24,  # how long is our metadata valid\n  }\n</pre>\n<div>\n<p>Note</p>\n<p>Please check the <a href=\"http://packages.python.org/pysaml2/\" rel=\"nofollow\">PySAML2 documentation</a> for more information about\nthese and other configuration options.</p>\n</div>\n<p>There are several external files and directories you have to create according\nto this configuration.</p>\n<p>The xmlsec1 binary was mentioned in the installation section. Here, in the\nconfiguration part you just need to put the full path to xmlsec1 so PySAML2\ncan call it as it needs.</p>\n<p>The <tt>attribute_map_dir</tt> points to a directory with attribute mappings that\nare used to translate user attribute names from several standards. It\u2019s usually\nsafe to just copy the default PySAML2 attribute maps that you can find in the\n<tt>tests/attributemaps</tt> directory of the source distribution.</p>\n<p>The <tt>metadata</tt> option is a dictionary where you can define several types of\nmetadata for remote entities. Usually the easiest type is the <tt>local</tt> where\nyou just put the name of a local XML file with the contents of the remote\nentities metadata. This XML file should be in the SAML2 metadata format.</p>\n<p>The <tt>key_file</tt> and <tt>cert_file</tt> options references the two parts of a\nstandard x509 certificate. You need it to sign your metadata an to encrypt\nand decrypt the SAML2 assertions.</p>\n<div>\n<p>Note</p>\n<p>Check your openssl documentation to generate a test certificate but don\u2019t\nforget to order a real one when you go into production.</p>\n</div>\n<div id=\"custom-and-dynamic-configuration-loading\">\n<h5><a href=\"#id32\" rel=\"nofollow\">Custom and dynamic configuration loading</a></h5>\n<p>By default, djangosaml2 reads the pysaml2 configuration options from the\nSAML_CONFIG setting but sometimes you want to read this information from\nanother place, like a file or a database. Sometimes you even want this\nconfiguration to be different depending on the request.</p>\n<p>Starting from djangosaml2 0.5.0 you can define your own configuration\nloader which is a callable that accepts a request parameter and returns\na saml2.config.SPConfig object. In order to do so you set the following\nsetting:</p>\n<pre>SAML_CONFIG_LOADER = 'python.path.to.your.callable'\n</pre>\n</div>\n</div>\n<div id=\"user-attributes\">\n<h4><a href=\"#id33\" rel=\"nofollow\">User attributes</a></h4>\n<p>In the SAML 2.0 authentication process the Identity Provider (IdP) will\nsend a security assertion to the Service Provider (SP) upon a succesfull\nauthentication. This assertion contains attributes about the user that\nwas authenticated. It depends on the IdP configuration what exact\nattributes are sent to each SP it can talk to.</p>\n<p>When such assertion is received on the Django side it is used to find\na Django user and create a session for it. By default djangosaml2 will\ndo a query on the User model with the \u2018username\u2019 attribute but you can\nchange it to any other attribute of the User model. For example,\nyou can do this look up using the \u2018email\u2019 attribute. In order to do so\nyou should set the following setting:</p>\n<pre>SAML_DJANGO_USER_MAIN_ATTRIBUTE = 'email'\n</pre>\n<p>Please, use an unique attribute when setting this option. Otherwise\nthe authentication process will fail because djangosaml2 does not know\nwhich Django user it should pick.</p>\n<p>You can configure djangosaml2 to create such user if it is not already in\nthe Django database or maybe you don\u2019t want to allow users that are not\nin your database already. For this purpose there is another option you\ncan set in the settings.py file:</p>\n<pre>SAML_CREATE_UNKNOWN_USER = True\n</pre>\n<p>This setting is True by default.</p>\n<p>The other thing you will probably want to configure is the mapping of\nSAML2 user attributes to Django user attributes. By default only the\nUser.username attribute is mapped but you can add more attributes or\nchange that one. In order to do so you need to change the\nSAML_ATTRIBUTE_MAPPING option in your settings.py:</p>\n<pre>SAML_ATTRIBUTE_MAPPING = {\n    'uid': ('username', ),\n    'mail': ('email', ),\n    'cn': ('first_name', ),\n    'sn': ('last_name', ),\n}\n</pre>\n<p>where the keys of this dictionary are SAML user attributes and the values\nare Django User attributes.</p>\n<p>If you are using Django user profile objects to store extra attributes\nabout your user you can add those attributes to the SAML_ATTRIBUTE_MAPPING\ndictionary. For each (key, value) pair, djangosaml2 will try to store the\nattribute in the User model if there is a matching field in that model.\nOtherwise it will try to do the same with your profile custom model.</p>\n<p>Learn more about Django profile models at:</p>\n<p><a href=\"https://docs.djangoproject.com/en/dev/topics/auth/#storing-additional-information-about-users\" rel=\"nofollow\">https://docs.djangoproject.com/en/dev/topics/auth/#storing-additional-information-about-users</a></p>\n<p>Sometimes you need to use special logic to update the user object\ndepending on the SAML2 attributes and the mapping described above\nis simply not enough. For these cases djangosaml2 provides a Django\nsignal that you can listen to. In order to do so you can add the\nfollowing code to your app:</p>\n<pre>from djangosaml2.signals import pre_user_save\n\ndef custom_update_user(sender=user, attributes=attributes, user_modified=user_modified)\n   ...\n   return True  # I modified the user object\n</pre>\n<p>Your handler will receive the user object, the list of SAML attributes\nand a flag telling you if the user is already modified and need\nto be saved after your handler is executed. If your handler\nmodifies the user object it should return True. Otherwise it should\nreturn False. This way djangosaml2 will know if it should save\nthe user object so you don\u2019t need to do it and no more calls to\nthe save method are issued.</p>\n</div>\n</div>\n<div id=\"idp-setup\">\n<h3><a href=\"#id34\" rel=\"nofollow\">IdP setup</a></h3>\n<p>Congratulations, you have finished configuring the SP side of the federation.\nNow you need to send the entity id and the metadata of this new SP to the\nIdP administrators so they can add it to their list of trusted services.</p>\n<p>You can get this information starting your Django development server and\ngoing to the <a href=\"http://localhost:8000/saml2/metadata\" rel=\"nofollow\">http://localhost:8000/saml2/metadata</a> url. If you have included\nthe djangosaml2 urls under a different url prefix you need to correct this\nurl.</p>\n<div id=\"simplesamlphp-issues\">\n<h4><a href=\"#id35\" rel=\"nofollow\">SimpleSAMLphp issues</a></h4>\n<p>As of SimpleSAMLphp 1.8.2 there is a problem if you specify attributes in\nthe SP configuration. When the SimpleSAMLphp metadata parser converts the\nXML into its custom php format it puts the following option:</p>\n<pre>'attributes.NameFormat' =&gt; 'urn:oasis:names:tc:SAML:2.0:attrname-format:uri'\n</pre>\n<p>But it need to be replaced by this one:</p>\n<pre>'AttributeNameFormat' =&gt; 'urn:oasis:names:tc:SAML:2.0:attrname-format:uri'\n</pre>\n<p>Otherwise the Assertions sent from the IdP to the SP will have a wrong\nAttribute Name Format and pysaml2 will be confused.</p>\n<p>Furthermore if you have a AttributeLimit filter in your SimpleSAMLphp\nconfiguration  you will need to enable another attribute filter just\nbefore to make sure that the AttributeLimit does not remove the attributes\nfrom the authentication source. The filter you need to add is an AttributeMap\nfilter like this:</p>\n<pre>10 =&gt; array(\n           'class' =&gt; 'core:AttributeMap', 'name2oid'\n      ),\n</pre>\n</div>\n</div>\n<div id=\"testing\">\n<h3><a href=\"#id36\" rel=\"nofollow\">Testing</a></h3>\n<p>One way to check if everything is working as expected is to enable the\nfollowing url:</p>\n<pre>urlpatterns = patterns(\n    '',\n    #  lots of url definitions here\n\n    (r'^saml2/', include('djangosaml2.urls')),\n    (r'^test/', 'djangosaml2.views.echo_attributes'),\n\n    #  more url definitions\n)\n</pre>\n<p>Now if you go to the /test/ url you will see your SAML attributes and also\na link to do a global logout.</p>\n<p>You can also run the unit tests with the following command:</p>\n<pre>python tests/run_tests.py\n</pre>\n<p>If you have <a href=\"http://pypi.python.org/pypi/tox\" rel=\"nofollow\">tox</a> installed you can simply call tox inside the root directory\nand it will run the tests in multiple versions of Python.</p>\n</div>\n<div id=\"faq\">\n<h3><a href=\"#id37\" rel=\"nofollow\">FAQ</a></h3>\n<p><strong>Why can\u2019t SAML be implemented as an Django Authentication Backend?</strong></p>\n<p>well SAML authentication is not that simple as a set of credentials you can\nput on a login form and get a response back. Actually the user password is\nnot given to the service provider at all. This is by design. You have to\ndelegate the task of authentication to the IdP and then get an asynchronous\nresponse from it.</p>\n<p>Given said that, djangosaml2 does use a Django Authentication Backend to\ntransform the SAML assertion about the user into a Django user object.</p>\n<p><strong>Why not put everything in a Django middleware class and make our lifes\neasier?</strong></p>\n<p>Yes, that was an option I did evaluate but at the end the current design\nwon. In my opinion putting this logic into a middleware has the advantage\nof making it easier to configure but has a couple of disadvantages: first,\nthe middleware would need to check if the request path is one of the\nSAML endpoints for every request. Second, it would be too magical and in\ncase of a problem, much harder to debug.</p>\n<p><strong>Why not call this package django-saml as many other Django applications?</strong></p>\n<p>Following that pattern then I should import the application with\nimport saml but unfortunately that module name is already used in pysaml2.</p>\n</div>\n<div id=\"changes\">\n<h3><a href=\"#id38\" rel=\"nofollow\">Changes</a></h3>\n<div id=\"id1\">\n<h4><a href=\"#id39\" rel=\"nofollow\">0.11.0 (2014-06-15)</a></h4>\n<ul>\n<li>Django 1.5 custom user model support. Thanks to Jos van Velzen</li>\n<li>Django 1.5 compatibility url template tag. Thanks to bula</li>\n<li>Support Django 1.5 and 1.6. Thanks to David Evans and Justin Quick</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h4><a href=\"#id40\" rel=\"nofollow\">0.10.0 (2013-05-05)</a></h4>\n<ul>\n<li>Check that RelayState is not empty before redirecting into a loop. Thanks\nto Sam Bull for reporting this issue.</li>\n<li>In the global logout process, when the session is lost, report an error\nmessage to the user and perform a local logout.</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h4><a href=\"#id41\" rel=\"nofollow\">0.9.2 (2013-04-19)</a></h4>\n<ul>\n<li>Upgrade to pysaml2-0.4.3.</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h4><a href=\"#id42\" rel=\"nofollow\">0.9.1 (2013-01-29)</a></h4>\n<ul>\n<li>Add a method to the authentication backend so it is possible\nto customize the authorization based on SAML attributes.</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h4><a href=\"#id43\" rel=\"nofollow\">0.9.0 (2012-10-30)</a></h4>\n<ul>\n<li>Add a signal for modifying the user just before saving it on\nthe update_user method of the authentication backend.</li>\n</ul>\n</div>\n<div id=\"id6\">\n<h4><a href=\"#id44\" rel=\"nofollow\">0.8.1 (2012-10-29)</a></h4>\n<ul>\n<li>Trim the SAML attributes before setting them to the Django objects\nif they are too long. This fixes a crash with MySQL.</li>\n</ul>\n</div>\n<div id=\"id7\">\n<h4><a href=\"#id45\" rel=\"nofollow\">0.8.0 (2012-10-25)</a></h4>\n<ul>\n<li>Allow to use different attributes besides \u2018username\u2019 to look for\nexisting users.</li>\n</ul>\n</div>\n<div id=\"id8\">\n<h4><a href=\"#id46\" rel=\"nofollow\">0.7.0 (2012-10-19)</a></h4>\n<ul>\n<li>Add a setting to decide if the user should be redirected to the\nnext view or shown an authorization error when the user tries to\nlogin twice.</li>\n</ul>\n</div>\n<div id=\"id9\">\n<h4><a href=\"#id47\" rel=\"nofollow\">0.6.1 (2012-09-03)</a></h4>\n<ul>\n<li>Remove Django from our dependencies</li>\n<li>Restore support for Django 1.3</li>\n</ul>\n</div>\n<div id=\"id10\">\n<h4><a href=\"#id48\" rel=\"nofollow\">0.6.0 (2012-08-29)</a></h4>\n<ul>\n<li>Add tox support configured to run the tests with Python 2.6 and 2.7</li>\n<li>Fix some dependencies and sdist generation. Lorenzo Gil</li>\n<li>Allow defining a logout redirect url in the settings. Lorenzo Gil</li>\n<li>Add some logging calls to improve debugging. Lorenzo Gil</li>\n<li>Add support for custom conf loading function. Sam Bull.</li>\n<li>Make the tests more robust and easier to run when djangosaml2 is\nincluded in a Django project. Sam Bull.</li>\n<li>Make sure the profile is not None before saving it. Bug reported by\nLeif Johansson</li>\n</ul>\n</div>\n<div id=\"id11\">\n<h4><a href=\"#id49\" rel=\"nofollow\">0.5.0 (2012-05-22)</a></h4>\n<ul>\n<li>Allow defining custom config loaders. They can be dynamic depending on\nthe request.</li>\n<li>Do not automatically add the authentication backend. This way\nwe allow other people to add their own backends.</li>\n<li>Support for additional attributes other than the ones that get mapped\ninto the User model. Those attributes get stored in the UserProfile model.</li>\n</ul>\n</div>\n<div id=\"id12\">\n<h4><a href=\"#id50\" rel=\"nofollow\">0.4.2 (2012-03-23)</a></h4>\n<ul>\n<li>Fix a crash in the idplist templatetag about using an old pysaml2 function</li>\n<li>Added a test for the previous crash</li>\n</ul>\n</div>\n<div id=\"id13\">\n<h4><a href=\"#id51\" rel=\"nofollow\">0.4.1 (2012-03-19)</a></h4>\n<ul>\n<li>Upgrade pysaml2 dependency to version 0.4.1</li>\n</ul>\n</div>\n<div id=\"id14\">\n<h4><a href=\"#id52\" rel=\"nofollow\">0.4.0 (2012-03-18)</a></h4>\n<ul>\n<li>Upgrade pysaml2 dependency to version 0.4.0 (update our tests as a result\nof this)</li>\n<li>Add logging calls to make debugging easier</li>\n<li>Use the Django configured logger in pysaml2</li>\n</ul>\n</div>\n<div id=\"id15\">\n<h4><a href=\"#id53\" rel=\"nofollow\">0.3.3 (2012-02-14)</a></h4>\n<ul>\n<li>Freeze the version of pysaml2 since we are not (yet!) compatible with\nversion 0.4.0</li>\n</ul>\n</div>\n<div id=\"id16\">\n<h4><a href=\"#id54\" rel=\"nofollow\">0.3.2 (2011-12-13)</a></h4>\n<ul>\n<li>Avoid a crash when reading the SAML attribute that maps to the Django\nusername</li>\n</ul>\n</div>\n<div id=\"id17\">\n<h4><a href=\"#id55\" rel=\"nofollow\">0.3.1 (2011-12-01)</a></h4>\n<ul>\n<li>Load the config in the render method of the idplist templatetag to\nmake it more flexible and reentrant.</li>\n</ul>\n</div>\n<div id=\"id18\">\n<h4><a href=\"#id56\" rel=\"nofollow\">0.3.0 (2011-11-30)</a></h4>\n<ul>\n<li>Templatetag to get the list of available idps.</li>\n<li>Allow to map the same SAML attribute into several Django field.</li>\n</ul>\n</div>\n<div id=\"id19\">\n<h4><a href=\"#id57\" rel=\"nofollow\">0.2.4 (2011-11-29)</a></h4>\n<ul>\n<li>Fix restructured text bugs that made pypi page looks bad.</li>\n</ul>\n</div>\n<div id=\"id20\">\n<h4><a href=\"#id58\" rel=\"nofollow\">0.2.3 (2011-06-14)</a></h4>\n<ul>\n<li>Set a unusable password when the user is created for the first time</li>\n</ul>\n</div>\n<div id=\"id21\">\n<h4><a href=\"#id59\" rel=\"nofollow\">0.2.2 (2011-06-07)</a></h4>\n<ul>\n<li>Prevent infinite loop when going to the /saml2/login/ endpoint and the user\nis already logged in and the settings.LOGIN_REDIRECT_URL is (badly) pointing\nto /saml2/login.</li>\n</ul>\n</div>\n<div id=\"id22\">\n<h4><a href=\"#id60\" rel=\"nofollow\">0.2.1 (2011-05-09)</a></h4>\n<ul>\n<li>If no next parameter is supplied to the login view, use the\nsettings.LOGIN_REDIRECT_URL as default</li>\n</ul>\n</div>\n<div id=\"id23\">\n<h4><a href=\"#id61\" rel=\"nofollow\">0.2.0 (2011-04-26)</a></h4>\n<ul>\n<li>Python 2.4 compatible if the elementtree library is installed</li>\n<li>Allow post processing after the authentication phase by using\nDjango signals.</li>\n</ul>\n</div>\n<div id=\"id24\">\n<h4><a href=\"#id62\" rel=\"nofollow\">0.1.1 (2011-04-18)</a></h4>\n<ul>\n<li>Simple view to echo SAML attributes</li>\n<li>Improve documentation</li>\n<li>Change default behaviour when a new user is created. Now their attributes\nare filled this first time</li>\n<li>Allow to set a next page after the logout</li>\n</ul>\n</div>\n<div id=\"id25\">\n<h4><a href=\"#id63\" rel=\"nofollow\">0.1.0 (2011-03-16)</a></h4>\n<ul>\n<li>Emancipation from the pysaml package</li>\n</ul>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1182942, "releases": {"0.11.1": [{"comment_text": "", "digests": {"md5": "30aa57b1a941395e3589af7897ae4027", "sha256": "03a1a2f0f9eea4b1155b6d3f60a7c534d7266fe9132db17495e54e33623a9ae8"}, "downloads": -1, "filename": "djangosaml2-bernii-0.11.1.tar.gz", "has_sig": false, "md5_digest": "30aa57b1a941395e3589af7897ae4027", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 49060, "upload_time": "2014-08-07T08:50:00", "upload_time_iso_8601": "2014-08-07T08:50:00.116506Z", "url": "https://files.pythonhosted.org/packages/aa/c6/b83075cc9a83906603b50cbc1093899e67474ee1f5feafdc6b28f5f7d436/djangosaml2-bernii-0.11.1.tar.gz", "yanked": false}], "0.11.2": [{"comment_text": "", "digests": {"md5": "8144029820c893244b0d1aff78367f7c", "sha256": "1a5cdcea449ac96a2288b3da8f5b65ad1e98156a14d565a210f2513113605df6"}, "downloads": -1, "filename": "djangosaml2-bernii-0.11.2.tar.gz", "has_sig": false, "md5_digest": "8144029820c893244b0d1aff78367f7c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 49122, "upload_time": "2014-08-07T14:12:52", "upload_time_iso_8601": "2014-08-07T14:12:52.410342Z", "url": "https://files.pythonhosted.org/packages/7f/52/a5015933a83a095b80a81eb9b720b80351d738e942835b6e89fad1f64364/djangosaml2-bernii-0.11.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8144029820c893244b0d1aff78367f7c", "sha256": "1a5cdcea449ac96a2288b3da8f5b65ad1e98156a14d565a210f2513113605df6"}, "downloads": -1, "filename": "djangosaml2-bernii-0.11.2.tar.gz", "has_sig": false, "md5_digest": "8144029820c893244b0d1aff78367f7c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 49122, "upload_time": "2014-08-07T14:12:52", "upload_time_iso_8601": "2014-08-07T14:12:52.410342Z", "url": "https://files.pythonhosted.org/packages/7f/52/a5015933a83a095b80a81eb9b720b80351d738e942835b6e89fad1f64364/djangosaml2-bernii-0.11.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:53:47 2020"}