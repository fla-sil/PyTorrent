{"info": {"author": "Mher Movsisyan", "author_email": "mher.movsisyan@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: Implementation :: CPython", "Topic :: System :: Distributed Computing"], "description": "Celery Flower\n=============\n\n.. image:: https://badge.fury.io/py/flower.png\n        :target: http://badge.fury.io/py/flower\n.. image:: https://travis-ci.org/mher/flower.png?branch=master\n        :target: https://travis-ci.org/mher/flower\n.. image:: https://pypip.in/d/flower/badge.png\n        :target: https://crate.io/packages/flower/\n\nFlower is a web based tool for monitoring and administrating Celery clusters.\n\nFeatures\n--------\n\n- Real-time monitoring using Celery Events\n\n    - Task progress and history\n    - Ability to show task details (arguments, start time, runtime, and more)\n    - Graphs and statistics\n\n- Remote Control\n\n    - View worker status and statistics\n    - Shutdown and restart worker instances\n    - Control worker pool size and autoscale settings\n    - View and modify the queues a worker instance consumes from\n    - View currently running tasks\n    - View scheduled tasks (ETA/countdown)\n    - View reserved and revoked tasks\n    - Apply time and rate limits\n    - Configuration viewer\n    - Revoke or terminate tasks\n\n- Broker monitoring\n\n    - View statistics for all Celery queues\n    - Queue length graphs\n\n- HTTP API\n- Basic Auth and Google OpenID authentication\n\nAPI\n---\n\nFlower API enables to manage the cluster via REST API, call tasks and\nreceive task events in real-time via WebSockets.\n\nFor example you can restart worker's pool by: ::\n\n    $ curl -X POST http://localhost:5555/api/worker/pool/restart/myworker\n\nOr call a task by: ::\n\n    $ curl -X POST -d '{\"args\":[1,2]}' http://localhost:5555/api/task/async-apply/tasks.add\n\nOr terminate executing task by: ::\n\n    $ curl -X POST -d 'terminate=True' http://localhost:5555/api/task/revoke/8a4da87b-e12b-4547-b89a-e92e4d1f8efd\n\nOr receive task completion events in real-time: ::\n\n    var ws = new WebSocket('ws://localhost:5555/api/task/events/task-succeeded/');\n    ws.onmessage = function (event) {\n        console.log(event.data);\n    }\n\nFor more info checkout `API Reference`_ and `examples`_.\n\n.. _API Reference: http://flower.readthedocs.org/en/latest/api.html\n.. _examples: http://nbviewer.ipython.org/urls/raw.github.com/mher/flower/master/docs/api.ipynb\n\nInstallation\n------------\n\nTo install, simply: ::\n\n    $ pip install flower\n\nUsage\n-----\n\nLaunch the server and open http://localhost:5555: ::\n\n    $ flower --port=5555\n\nOr launch from celery: ::\n\n    $ celery flower -A proj --address=127.0.0.1 --port=5555\n\nBroker URL and other configuration options can be passed through the standard Celery options: ::\n\n    $ celery flower -A proj --broker=amqp://guest:guest@localhost:5672//\n\nDocumentation\n-------------\n\nDocumentation is available at `Read the Docs`_ and `IPython Notebook Viewer`_\n\n.. _Read the Docs: http://flower.readthedocs.org\n.. _IPython Notebook Viewer: http://nbviewer.ipython.org/urls/raw.github.com/mher/flower/master/docs/api.ipynb\n\nScreenshots\n-----------\n\n.. image:: https://raw.github.com/mher/flower/master/docs/screenshots/dashboard.png\n   :width: 100%\n\n.. image:: https://raw.github.com/mher/flower/master/docs/screenshots/pool.png\n   :width: 100%\n\n.. image:: https://raw.github.com/mher/flower/master/docs/screenshots/tasks.png\n   :width: 100%\n\n.. image:: https://raw.github.com/mher/flower/master/docs/screenshots/task.png\n   :width: 100%\n\n.. image:: https://raw.github.com/mher/flower/master/docs/screenshots/monitor.png\n   :width: 100%\n\nMore screenshots_\n\n.. _screenshots: https://github.com/mher/flower/tree/master/docs/screenshots\n\nGetting help\n------------\n\nPlease head over to #celery IRC channel on irc.freenode.net or\n`open an issue`_.\n\n.. _open an issue: https://github.com/mher/flower/issues\n\nContributing\n------------\n\nIf you'd like to contribute, simply fork `the repository`_, commit your\nchanges, run the tests (`python -m tests`) and send a pull request.\nMake sure you add yourself to AUTHORS_.\n\n.. _`the repository`: https://github.com/mher/flower\n.. _AUTHORS: https://github.com/mher/flower/blob/master/AUTHORS", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mher/flower", "keywords": null, "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "flower-new", "package_url": "https://pypi.org/project/flower-new/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/flower-new/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/mher/flower"}, "release_url": "https://pypi.org/project/flower-new/0.8.0/", "requires_dist": null, "requires_python": null, "summary": "Celery Flower", "version": "0.8.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"http://badge.fury.io/py/flower\" rel=\"nofollow\"><img alt=\"https://badge.fury.io/py/flower.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4520249931d0793b4b91351ca3425af8f63894bd/68747470733a2f2f62616467652e667572792e696f2f70792f666c6f7765722e706e67\"></a>\n<a href=\"https://travis-ci.org/mher/flower\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/mher/flower.png?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1bea92ed7e6aca6506283cabed35ef9c88f394e8/68747470733a2f2f7472617669732d63692e6f72672f6d6865722f666c6f7765722e706e673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://crate.io/packages/flower/\" rel=\"nofollow\"><img alt=\"https://pypip.in/d/flower/badge.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/623f7d65e74d725ea77fdfe4f2b3237de35cbd32/68747470733a2f2f70797069702e696e2f642f666c6f7765722f62616467652e706e67\"></a>\n<p>Flower is a web based tool for monitoring and administrating Celery clusters.</p>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li><p>Real-time monitoring using Celery Events</p>\n<blockquote>\n<ul>\n<li>Task progress and history</li>\n<li>Ability to show task details (arguments, start time, runtime, and more)</li>\n<li>Graphs and statistics</li>\n</ul>\n</blockquote>\n</li>\n<li><p>Remote Control</p>\n<blockquote>\n<ul>\n<li>View worker status and statistics</li>\n<li>Shutdown and restart worker instances</li>\n<li>Control worker pool size and autoscale settings</li>\n<li>View and modify the queues a worker instance consumes from</li>\n<li>View currently running tasks</li>\n<li>View scheduled tasks (ETA/countdown)</li>\n<li>View reserved and revoked tasks</li>\n<li>Apply time and rate limits</li>\n<li>Configuration viewer</li>\n<li>Revoke or terminate tasks</li>\n</ul>\n</blockquote>\n</li>\n<li><p>Broker monitoring</p>\n<blockquote>\n<ul>\n<li>View statistics for all Celery queues</li>\n<li>Queue length graphs</li>\n</ul>\n</blockquote>\n</li>\n<li><p>HTTP API</p>\n</li>\n<li><p>Basic Auth and Google OpenID authentication</p>\n</li>\n</ul>\n</div>\n<div id=\"api\">\n<h2>API</h2>\n<p>Flower API enables to manage the cluster via REST API, call tasks and\nreceive task events in real-time via WebSockets.</p>\n<p>For example you can restart worker\u2019s pool by:</p>\n<pre>$ curl -X POST http://localhost:5555/api/worker/pool/restart/myworker\n</pre>\n<p>Or call a task by:</p>\n<pre>$ curl -X POST -d '{\"args\":[1,2]}' http://localhost:5555/api/task/async-apply/tasks.add\n</pre>\n<p>Or terminate executing task by:</p>\n<pre>$ curl -X POST -d 'terminate=True' http://localhost:5555/api/task/revoke/8a4da87b-e12b-4547-b89a-e92e4d1f8efd\n</pre>\n<p>Or receive task completion events in real-time:</p>\n<pre>var ws = new WebSocket('ws://localhost:5555/api/task/events/task-succeeded/');\nws.onmessage = function (event) {\n    console.log(event.data);\n}\n</pre>\n<p>For more info checkout <a href=\"http://flower.readthedocs.org/en/latest/api.html\" rel=\"nofollow\">API Reference</a> and <a href=\"http://nbviewer.ipython.org/urls/raw.github.com/mher/flower/master/docs/api.ipynb\" rel=\"nofollow\">examples</a>.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>To install, simply:</p>\n<pre>$ pip install flower\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Launch the server and open <a href=\"http://localhost:5555\" rel=\"nofollow\">http://localhost:5555</a>:</p>\n<pre>$ flower --port=5555\n</pre>\n<p>Or launch from celery:</p>\n<pre>$ celery flower -A proj --address=127.0.0.1 --port=5555\n</pre>\n<p>Broker URL and other configuration options can be passed through the standard Celery options:</p>\n<pre>$ celery flower -A proj --broker=amqp://guest:guest@localhost:5672//\n</pre>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p>Documentation is available at <a href=\"http://flower.readthedocs.org\" rel=\"nofollow\">Read the Docs</a> and <a href=\"http://nbviewer.ipython.org/urls/raw.github.com/mher/flower/master/docs/api.ipynb\" rel=\"nofollow\">IPython Notebook Viewer</a></p>\n</div>\n<div id=\"screenshots\">\n<h2>Screenshots</h2>\n<img alt=\"https://raw.github.com/mher/flower/master/docs/screenshots/dashboard.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/741a758a694b79928ca713392a9ae0de368cd517/68747470733a2f2f7261772e6769746875622e636f6d2f6d6865722f666c6f7765722f6d61737465722f646f63732f73637265656e73686f74732f64617368626f6172642e706e67\" width=\"100%\">\n<img alt=\"https://raw.github.com/mher/flower/master/docs/screenshots/pool.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6194a1e030561df8c97fc9dc06a5efdadaebaefe/68747470733a2f2f7261772e6769746875622e636f6d2f6d6865722f666c6f7765722f6d61737465722f646f63732f73637265656e73686f74732f706f6f6c2e706e67\" width=\"100%\">\n<img alt=\"https://raw.github.com/mher/flower/master/docs/screenshots/tasks.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/804f355fade6bf213b3ea42a3726d3521de08a02/68747470733a2f2f7261772e6769746875622e636f6d2f6d6865722f666c6f7765722f6d61737465722f646f63732f73637265656e73686f74732f7461736b732e706e67\" width=\"100%\">\n<img alt=\"https://raw.github.com/mher/flower/master/docs/screenshots/task.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2dbad199a489bcfc0ea920f7fcef67373a826b6f/68747470733a2f2f7261772e6769746875622e636f6d2f6d6865722f666c6f7765722f6d61737465722f646f63732f73637265656e73686f74732f7461736b2e706e67\" width=\"100%\">\n<img alt=\"https://raw.github.com/mher/flower/master/docs/screenshots/monitor.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fcc74ba91e63f181ffbc642383af6ce3677ddf77/68747470733a2f2f7261772e6769746875622e636f6d2f6d6865722f666c6f7765722f6d61737465722f646f63732f73637265656e73686f74732f6d6f6e69746f722e706e67\" width=\"100%\">\n<p>More <a href=\"https://github.com/mher/flower/tree/master/docs/screenshots\" rel=\"nofollow\">screenshots</a></p>\n</div>\n<div id=\"getting-help\">\n<h2>Getting help</h2>\n<p>Please head over to #celery IRC channel on irc.freenode.net or\n<a href=\"https://github.com/mher/flower/issues\" rel=\"nofollow\">open an issue</a>.</p>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<p>If you\u2019d like to contribute, simply fork <a href=\"https://github.com/mher/flower\" rel=\"nofollow\">the repository</a>, commit your\nchanges, run the tests (<cite>python -m tests</cite>) and send a pull request.\nMake sure you add yourself to <a href=\"https://github.com/mher/flower/blob/master/AUTHORS\" rel=\"nofollow\">AUTHORS</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 1215311, "releases": {"0.8.0": [{"comment_text": "", "digests": {"md5": "1454de9ae90b5553df37c78c1f943fcc", "sha256": "23b1b6b8f20469052528f7b802cfdf1d153b875be8b2ab3015e70a499ebdb28e"}, "downloads": -1, "filename": "flower_new-0.8.0-py2-none-any.whl", "has_sig": false, "md5_digest": "1454de9ae90b5553df37c78c1f943fcc", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 321431, "upload_time": "2014-09-06T18:59:50", "upload_time_iso_8601": "2014-09-06T18:59:50.415552Z", "url": "https://files.pythonhosted.org/packages/61/18/09189008ef9c6bbdee03ac9a70702b6ef68959898591df959f9aff9007e1/flower_new-0.8.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d80d8714bab7758e03a23261dd7ae887", "sha256": "074c5caea64874a342b0a38a17ae7b421c5b485696b5b604ed50d7715da366a6"}, "downloads": -1, "filename": "flower_new-0.8.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d80d8714bab7758e03a23261dd7ae887", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 321435, "upload_time": "2014-09-06T19:00:26", "upload_time_iso_8601": "2014-09-06T19:00:26.883656Z", "url": "https://files.pythonhosted.org/packages/c9/dc/48a1b0a5dc97841599c75894e094f65d1f15a9e7a5646cb1d19d5d444062/flower_new-0.8.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "47c3efe0cc30e20e4331efa93442a662", "sha256": "4fa2dd474559ab862b4b2fc3854272fa664e309fb29005c10c9c73b4427d8b17"}, "downloads": -1, "filename": "flower-new-0.8.0.tar.gz", "has_sig": false, "md5_digest": "47c3efe0cc30e20e4331efa93442a662", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1178247, "upload_time": "2014-09-06T18:59:46", "upload_time_iso_8601": "2014-09-06T18:59:46.719029Z", "url": "https://files.pythonhosted.org/packages/c9/ab/12b5aee846a45d6b8450d3ee7156d719f9a57dc4ec32b4fbe96b6211c48e/flower-new-0.8.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1454de9ae90b5553df37c78c1f943fcc", "sha256": "23b1b6b8f20469052528f7b802cfdf1d153b875be8b2ab3015e70a499ebdb28e"}, "downloads": -1, "filename": "flower_new-0.8.0-py2-none-any.whl", "has_sig": false, "md5_digest": "1454de9ae90b5553df37c78c1f943fcc", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 321431, "upload_time": "2014-09-06T18:59:50", "upload_time_iso_8601": "2014-09-06T18:59:50.415552Z", "url": "https://files.pythonhosted.org/packages/61/18/09189008ef9c6bbdee03ac9a70702b6ef68959898591df959f9aff9007e1/flower_new-0.8.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d80d8714bab7758e03a23261dd7ae887", "sha256": "074c5caea64874a342b0a38a17ae7b421c5b485696b5b604ed50d7715da366a6"}, "downloads": -1, "filename": "flower_new-0.8.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d80d8714bab7758e03a23261dd7ae887", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 321435, "upload_time": "2014-09-06T19:00:26", "upload_time_iso_8601": "2014-09-06T19:00:26.883656Z", "url": "https://files.pythonhosted.org/packages/c9/dc/48a1b0a5dc97841599c75894e094f65d1f15a9e7a5646cb1d19d5d444062/flower_new-0.8.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "47c3efe0cc30e20e4331efa93442a662", "sha256": "4fa2dd474559ab862b4b2fc3854272fa664e309fb29005c10c9c73b4427d8b17"}, "downloads": -1, "filename": "flower-new-0.8.0.tar.gz", "has_sig": false, "md5_digest": "47c3efe0cc30e20e4331efa93442a662", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1178247, "upload_time": "2014-09-06T18:59:46", "upload_time_iso_8601": "2014-09-06T18:59:46.719029Z", "url": "https://files.pythonhosted.org/packages/c9/ab/12b5aee846a45d6b8450d3ee7156d719f9a57dc4ec32b4fbe96b6211c48e/flower-new-0.8.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 01:01:42 2020"}