{"info": {"author": "Koos Zevenhoven", "author_email": "koos.zevenhoven@aalto.fi", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "``views`` -- efficient tools for generators and sequences\n=========================================================\n\nThe ``views`` module provides additions to the existing python comprehensions and generator expressions. (Chained) sequence views can be made using ``seq`` and generators can be chained with ``gen``, as shown in the examples below.\n\nAny feedback or suggestions are very welcome.\n\n- Email: koos.zevenhoven@aalto.fi\n- Twitter: `@k7hoven <https://twitter.com/k7hoven>`_\n\n\nGetting Started\n===============\n\nRequirements\n------------\n\n* Python 3.6+\n\nInstallation\n------------\n\nThe package can be installed with ``pip`` (make sure you have it installed):\n\n.. code-block:: bash\n\n \u00a0  pip3 install git+http://github.com/k7hoven/views\n\nOr if your default python is Python 3:\n\n.. code-block:: bash\n\n \u00a0  pip install git+http://github.com/k7hoven/views\n\n\nBasic Usage\n-----------\n\nBasic introductory examples here, but they should get you started.\n\nSequence view comprehension syntax\n''''''''''''''''''''''''''''''''''\n\nYou can change chain single objects and sequences into one sequence view. Use ``::`` just like you would use ``*`` in tuple (un)packing. The resulting object supports slicing and indexing.\n \nExample:\n\n.. code-block:: python\n\n   >>> from views import seq\n   >>> seq[::range(3), None, ::\"abc\", \"Hi!\"]\n   <sequence view 8: [0, 1, 2, None, 'a', 'b', 'c', 'Hi!'] >\n   >>> seq[::range(100)]\n   <sequence view 100: [0, 1, 2, 3, 4, ..., 96, 97, 98, 99] >\n\n\nGenerator comprehension syntax\n''''''''''''''''''''''''''''''\n\nUse like ``seq``. The resulting object is a generator.\n\nExample:\n\n.. code-block:: python\n\n \u00a0 \u00a0>>> from views import gen\n \u00a0 \u00a0>>> list(gen[::range(3), 3, 4, ::range(5,7), 7])\n    [0, 1, 2, 3, 4, 5, 6, 7]\n\n\nChaining sequences and generators/iterables\n'''''''''''''''''''''''''''''''''''''''''''\n\nYou can chain an arbitrary number of sequences with ``seq.chain(*sequences)`` and of generators with ``gen.chain(*iterables)``. The latter is equivalent to ``itertools.chain(*iterables)``.\n\nExample:\n\n.. code-block:: python\n\n   >>> from views import seq, gen\n   >>> seq.chain([1, 2, 3], [4, 5, 6])\n   <sequence view 6: [1, 2, 3, 4, 5, 6] >\n   >>> list(gen.chain([1, 2, 3], [4, 5, 6]))\n   [1, 2, 3, 4, 5, 6]\n\n\nHave fun!\n\nChangelog\n=========\n\n0.3.0 (2017-10-10)\n------------------\n\n- Add ``seq.chain(*sequences)`` and ``gen.chain(*iterables)``\n- Some speed optimizations, especially to ``seq``.\n\n0.2.0 (2017-09-11)\n------------------\n\n- LengthChangedError is now a subclass of ``RuntimeError``.\n- Minor optimizations to ``seq`` and ``gen``.\n\n0.1.0 (2017-06-06)\n------------------\n\n- First version", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/k7hoven/views", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "views", "package_url": "https://pypi.org/project/views/", "platform": "", "project_url": "https://pypi.org/project/views/", "project_urls": {"Homepage": "https://github.com/k7hoven/views"}, "release_url": "https://pypi.org/project/views/0.3/", "requires_dist": null, "requires_python": "", "summary": "views", "version": "0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"views-efficient-tools-for-generators-and-sequences\">\n<h2><tt>views</tt> \u2013 efficient tools for generators and sequences</h2>\n<p>The <tt>views</tt> module provides additions to the existing python comprehensions and generator expressions. (Chained) sequence views can be made using <tt>seq</tt> and generators can be chained with <tt>gen</tt>, as shown in the examples below.</p>\n<p>Any feedback or suggestions are very welcome.</p>\n<ul>\n<li>Email: <a href=\"mailto:koos.zevenhoven%40aalto.fi\">koos<span>.</span>zevenhoven<span>@</span>aalto<span>.</span>fi</a></li>\n<li>Twitter: <a href=\"https://twitter.com/k7hoven\" rel=\"nofollow\">@k7hoven</a></li>\n</ul>\n</div>\n<div id=\"getting-started\">\n<h2>Getting Started</h2>\n<div id=\"requirements\">\n<h3>Requirements</h3>\n<ul>\n<li>Python 3.6+</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>The package can be installed with <tt>pip</tt> (make sure you have it installed):</p>\n<pre>pip3 install git+http://github.com/k7hoven/views\n</pre>\n<p>Or if your default python is Python 3:</p>\n<pre>pip install git+http://github.com/k7hoven/views\n</pre>\n</div>\n<div id=\"basic-usage\">\n<h3>Basic Usage</h3>\n<p>Basic introductory examples here, but they should get you started.</p>\n<div id=\"sequence-view-comprehension-syntax\">\n<h4>Sequence view comprehension syntax</h4>\n<p>You can change chain single objects and sequences into one sequence view. Use <tt>::</tt> just like you would use <tt>*</tt> in tuple (un)packing. The resulting object supports slicing and indexing.</p>\n<p>Example:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">views</span> <span class=\"kn\">import</span> <span class=\"n\">seq</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">seq</span><span class=\"p\">[::</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"p\">::</span><span class=\"s2\">\"abc\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Hi!\"</span><span class=\"p\">]</span>\n<span class=\"o\">&lt;</span><span class=\"n\">sequence</span> <span class=\"n\">view</span> <span class=\"mi\">8</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">,</span> <span class=\"s1\">'Hi!'</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">seq</span><span class=\"p\">[::</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">)]</span>\n<span class=\"o\">&lt;</span><span class=\"n\">sequence</span> <span class=\"n\">view</span> <span class=\"mi\">100</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"mi\">96</span><span class=\"p\">,</span> <span class=\"mi\">97</span><span class=\"p\">,</span> <span class=\"mi\">98</span><span class=\"p\">,</span> <span class=\"mi\">99</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span>\n</pre>\n</div>\n<div id=\"generator-comprehension-syntax\">\n<h4>Generator comprehension syntax</h4>\n<p>Use like <tt>seq</tt>. The resulting object is a generator.</p>\n<p>Example:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">views</span> <span class=\"kn\">import</span> <span class=\"n\">gen</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">gen</span><span class=\"p\">[::</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"p\">::</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">),</span> <span class=\"mi\">7</span><span class=\"p\">])</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"chaining-sequences-and-generators-iterables\">\n<h4>Chaining sequences and generators/iterables</h4>\n<p>You can chain an arbitrary number of sequences with <tt><span class=\"pre\">seq.chain(*sequences)</span></tt> and of generators with <tt><span class=\"pre\">gen.chain(*iterables)</span></tt>. The latter is equivalent to <tt><span class=\"pre\">itertools.chain(*iterables)</span></tt>.</p>\n<p>Example:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">views</span> <span class=\"kn\">import</span> <span class=\"n\">seq</span><span class=\"p\">,</span> <span class=\"n\">gen</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">seq</span><span class=\"o\">.</span><span class=\"n\">chain</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">])</span>\n<span class=\"o\">&lt;</span><span class=\"n\">sequence</span> <span class=\"n\">view</span> <span class=\"mi\">6</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">gen</span><span class=\"o\">.</span><span class=\"n\">chain</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]))</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]</span>\n</pre>\n<p>Have fun!</p>\n</div>\n</div>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<div id=\"id1\">\n<h3>0.3.0 (2017-10-10)</h3>\n<ul>\n<li>Add <tt><span class=\"pre\">seq.chain(*sequences)</span></tt> and <tt><span class=\"pre\">gen.chain(*iterables)</span></tt></li>\n<li>Some speed optimizations, especially to <tt>seq</tt>.</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>0.2.0 (2017-09-11)</h3>\n<ul>\n<li>LengthChangedError is now a subclass of <tt>RuntimeError</tt>.</li>\n<li>Minor optimizations to <tt>seq</tt> and <tt>gen</tt>.</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>0.1.0 (2017-06-06)</h3>\n<ul>\n<li>First version</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 3241788, "releases": {"0.3": [{"comment_text": "", "digests": {"md5": "f0212f66828a308a0408f9ef325c2eae", "sha256": "17f60ecbc213d5aaa8f5359973ab8840071123547e1897cae2f6e762b62dcd68"}, "downloads": -1, "filename": "views-0.3.tar.gz", "has_sig": false, "md5_digest": "f0212f66828a308a0408f9ef325c2eae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4665, "upload_time": "2017-10-11T11:34:54", "upload_time_iso_8601": "2017-10-11T11:34:54.236741Z", "url": "https://files.pythonhosted.org/packages/1b/d9/5598d590f9467c364704397cbb0ebc9b33481b84e947c2af31cc1dc9fa11/views-0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f0212f66828a308a0408f9ef325c2eae", "sha256": "17f60ecbc213d5aaa8f5359973ab8840071123547e1897cae2f6e762b62dcd68"}, "downloads": -1, "filename": "views-0.3.tar.gz", "has_sig": false, "md5_digest": "f0212f66828a308a0408f9ef325c2eae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4665, "upload_time": "2017-10-11T11:34:54", "upload_time_iso_8601": "2017-10-11T11:34:54.236741Z", "url": "https://files.pythonhosted.org/packages/1b/d9/5598d590f9467c364704397cbb0ebc9b33481b84e947c2af31cc1dc9fa11/views-0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:36:04 2020"}