{"info": {"author": "Giampaolo Eusebi", "author_email": "giampaolo.eusebi@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Education", "Intended Audience :: Science/Research", "License :: OSI Approved", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Education"], "description": "# Float-IEEE754-didactic\n\nEducational python module to parse floats and inspect the\nIEEE 754 representation internals.\n\n## Installation\n\n```bash\npip install floatedu\n```\n\n## Use case\n\nIt might be used to get a glimpse of how the IEEE 754 model works.\nThis means it's useful almost exclusively for educational\npurposes.\n\n## Brief example\n\nCreate 3 floats using the float32 specification and print them\nas native floats:\n```python\nfrom floatedu import Float32\n\nf_1 = Float32(\"0 01111111 00000000000000000000000\")\nf_num = Float32(\"0 10001001 00110100100111010011101\")\nf_inf = Float32(\"0 11111111 00000000000000000000000\")\n\nprint(f_1, f_num, f_inf)\n\n# 1.0 1234.4566650390625 inf\n```\n\nPrint number details as per general formula:\n```python\nprint(repr(f_num))\n\n# {'value': float('1234.4566650390625'),\n#  'kind': 'normal', 'k': 8, 'p': 24, 'bias': 127,\n#  'bits': '0_10001001_00110100100111010011101',\n#  'sign': 1, 'exponent': 137, 'fraction': 0.20552408695220947,\n#  'significand': 1.2055240869522095,\n# }\n```\n\nEverything is accessible as a property:\n```python\nprint(f_num.kind, f_num.sign, f_num.exponent, f_num.fraction)\n\n# normal 1 137 0.20552408695220947\n```\n\n`Float` is a subclass of `list` and can be updated live:\n```python\nprint(f_num.sign_bit)\nprint(f_num.exponent_bits)\nprint(f_num.fraction_bits)\nf_num.sign_bit[0] = 1 #  Make number negative\nprint(f_num)\n\n# [0]\n# [1, 0, 0, 0, 1, 0, 0, 1]\n# [0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1]\n# -1234.4566650390625\n```\n\n## Formats and equations\n\nIEEE 754 defines various types of binary floats.\nThis module implements standard and, in addition, a couple of non-standard\ntypes.\n\n![IEEE 754 bits layouts](https://gitlab.com/geusebi/float-ieee754-didactic/raw/master/doc/img/tb_pk_bits.png \"IEEE 754 bits layouts\")\n\nBits are laid out from left to right following the scheme\n`sign . exponent . fraction`. `p` value includes the implicit bit (not \nactually stored). \n\nFor example the `BFloat16` is stored as:\n\n![BFloat16 bits layout](https://gitlab.com/geusebi/float-ieee754-didactic/raw/master/doc/img/tb_bfloat16_bits.png \"BFloat16 bits layout\")\n\n### Kind\n\nA number could be Zero, Infinity, Not a number, Normal or Subnormal.\nThe first three cases are already values. Normal and Subnormal numbers\nare computed according to an equation.\n\nTo determine how to compute the value is sufficient to test `exp` and `fraction`\nagainst zero (all zeroes) and -1 (all ones, two's complement):\n\n![Float type algorithm](https://gitlab.com/geusebi/float-ieee754-didactic/raw/master/doc/img/eq_float_type.png \"Float type algorithm\")\n\n### Zero and infinity\n\nFor Zero and Infinity the value is trivial. If the leftmost bit is 0 then the \nvalue is positive (+0 or +inf). Otherwise it is negative (-0 or -inf).\n\n### Not a number\n\nIn case of Not a number no extra steps is required if not returning an\nappropriate \"non-value\".\n\n### Normal\nNormal numbers values can be computed by the equation (general formula and \n`float32` formula):\n\n[eq_float_value]: https://gitlab.com/geusebi/float-ieee754-didactic/raw/master/doc/img/eq_float_value.png \"General formula\"\n[eq_float32_value]: https://gitlab.com/geusebi/float-ieee754-didactic/raw/master/doc/img/eq_float32_value.png \"float32 formula\"\n![General formula for floats][eq_float_value] ![Formula for float32][eq_float32_value]\n\nAn another way to think about this formula is to consider the stored\nnumber as a fixed point binary number with sign bit.\n\nIn this case, the integer part would be the exponent and the fractional\npart (plus 1) would be the significand. I.e.\n\n![Float as fixed point binary](https://gitlab.com/geusebi/float-ieee754-didactic/raw/master/doc/img/eq_float_as_fp.png \"Float as fixed point binary\")\n\n## Implementation\n\nEvery implemented float type is available as a class:\n```python\nfrom floatedu import *\n[Float, Float8, Float16, BFloat16, Float64, Float32, Float128, Float256]\n```\n\nThe actual implementation class is `Float` and it couldn't be instantiated\ndirectly.\n\nIt must be subclassed providing `p`, `k`, and `bias` values as class\nproperties (see `floatedu/Float.py`).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/geusebi/float-ieee754-didactic", "keywords": "", "license": "GNU GPL 3.0", "maintainer": "", "maintainer_email": "", "name": "floatedu", "package_url": "https://pypi.org/project/floatedu/", "platform": "", "project_url": "https://pypi.org/project/floatedu/", "project_urls": {"Homepage": "https://gitlab.com/geusebi/float-ieee754-didactic"}, "release_url": "https://pypi.org/project/floatedu/0.0.3/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Educational python module to parse floats and inspect the IEEE754 algorithm's internals.", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Float-IEEE754-didactic</h1>\n<p>Educational python module to parse floats and inspect the\nIEEE 754 representation internals.</p>\n<h2>Installation</h2>\n<pre>pip install floatedu\n</pre>\n<h2>Use case</h2>\n<p>It might be used to get a glimpse of how the IEEE 754 model works.\nThis means it's useful almost exclusively for educational\npurposes.</p>\n<h2>Brief example</h2>\n<p>Create 3 floats using the float32 specification and print them\nas native floats:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">floatedu</span> <span class=\"kn\">import</span> <span class=\"n\">Float32</span>\n\n<span class=\"n\">f_1</span> <span class=\"o\">=</span> <span class=\"n\">Float32</span><span class=\"p\">(</span><span class=\"s2\">\"0 01111111 00000000000000000000000\"</span><span class=\"p\">)</span>\n<span class=\"n\">f_num</span> <span class=\"o\">=</span> <span class=\"n\">Float32</span><span class=\"p\">(</span><span class=\"s2\">\"0 10001001 00110100100111010011101\"</span><span class=\"p\">)</span>\n<span class=\"n\">f_inf</span> <span class=\"o\">=</span> <span class=\"n\">Float32</span><span class=\"p\">(</span><span class=\"s2\">\"0 11111111 00000000000000000000000\"</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">f_1</span><span class=\"p\">,</span> <span class=\"n\">f_num</span><span class=\"p\">,</span> <span class=\"n\">f_inf</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 1.0 1234.4566650390625 inf</span>\n</pre>\n<p>Print number details as per general formula:</p>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">f_num</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># {'value': float('1234.4566650390625'),</span>\n<span class=\"c1\">#  'kind': 'normal', 'k': 8, 'p': 24, 'bias': 127,</span>\n<span class=\"c1\">#  'bits': '0_10001001_00110100100111010011101',</span>\n<span class=\"c1\">#  'sign': 1, 'exponent': 137, 'fraction': 0.20552408695220947,</span>\n<span class=\"c1\">#  'significand': 1.2055240869522095,</span>\n<span class=\"c1\"># }</span>\n</pre>\n<p>Everything is accessible as a property:</p>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">f_num</span><span class=\"o\">.</span><span class=\"n\">kind</span><span class=\"p\">,</span> <span class=\"n\">f_num</span><span class=\"o\">.</span><span class=\"n\">sign</span><span class=\"p\">,</span> <span class=\"n\">f_num</span><span class=\"o\">.</span><span class=\"n\">exponent</span><span class=\"p\">,</span> <span class=\"n\">f_num</span><span class=\"o\">.</span><span class=\"n\">fraction</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># normal 1 137 0.20552408695220947</span>\n</pre>\n<p><code>Float</code> is a subclass of <code>list</code> and can be updated live:</p>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">f_num</span><span class=\"o\">.</span><span class=\"n\">sign_bit</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">f_num</span><span class=\"o\">.</span><span class=\"n\">exponent_bits</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">f_num</span><span class=\"o\">.</span><span class=\"n\">fraction_bits</span><span class=\"p\">)</span>\n<span class=\"n\">f_num</span><span class=\"o\">.</span><span class=\"n\">sign_bit</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"c1\">#  Make number negative</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">f_num</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># [0]</span>\n<span class=\"c1\"># [1, 0, 0, 0, 1, 0, 0, 1]</span>\n<span class=\"c1\"># [0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1]</span>\n<span class=\"c1\"># -1234.4566650390625</span>\n</pre>\n<h2>Formats and equations</h2>\n<p>IEEE 754 defines various types of binary floats.\nThis module implements standard and, in addition, a couple of non-standard\ntypes.</p>\n<p><img alt=\"IEEE 754 bits layouts\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fab840052bf0be31d4931ee020b8db766e36b1b0/68747470733a2f2f6769746c61622e636f6d2f676575736562692f666c6f61742d696565653735342d64696461637469632f7261772f6d61737465722f646f632f696d672f74625f706b5f626974732e706e67\"></p>\n<p>Bits are laid out from left to right following the scheme\n<code>sign . exponent . fraction</code>. <code>p</code> value includes the implicit bit (not\nactually stored).</p>\n<p>For example the <code>BFloat16</code> is stored as:</p>\n<p><img alt=\"BFloat16 bits layout\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/948033b574ccc61b38c51340a461da3117cbcb64/68747470733a2f2f6769746c61622e636f6d2f676575736562692f666c6f61742d696565653735342d64696461637469632f7261772f6d61737465722f646f632f696d672f74625f62666c6f617431365f626974732e706e67\"></p>\n<h3>Kind</h3>\n<p>A number could be Zero, Infinity, Not a number, Normal or Subnormal.\nThe first three cases are already values. Normal and Subnormal numbers\nare computed according to an equation.</p>\n<p>To determine how to compute the value is sufficient to test <code>exp</code> and <code>fraction</code>\nagainst zero (all zeroes) and -1 (all ones, two's complement):</p>\n<p><img alt=\"Float type algorithm\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/30689b852d777e2fdd80a085d449481aa7507cd2/68747470733a2f2f6769746c61622e636f6d2f676575736562692f666c6f61742d696565653735342d64696461637469632f7261772f6d61737465722f646f632f696d672f65715f666c6f61745f747970652e706e67\"></p>\n<h3>Zero and infinity</h3>\n<p>For Zero and Infinity the value is trivial. If the leftmost bit is 0 then the\nvalue is positive (+0 or +inf). Otherwise it is negative (-0 or -inf).</p>\n<h3>Not a number</h3>\n<p>In case of Not a number no extra steps is required if not returning an\nappropriate \"non-value\".</p>\n<h3>Normal</h3>\n<p>Normal numbers values can be computed by the equation (general formula and\n<code>float32</code> formula):</p>\n<p><img alt=\"General formula for floats\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b0b47c8589abc38edc948152ffef5ce75142e293/68747470733a2f2f6769746c61622e636f6d2f676575736562692f666c6f61742d696565653735342d64696461637469632f7261772f6d61737465722f646f632f696d672f65715f666c6f61745f76616c75652e706e67\"> <img alt=\"Formula for float32\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6f8f64edd01b86c1fb8cdb1489dcbf8e640ec9f0/68747470733a2f2f6769746c61622e636f6d2f676575736562692f666c6f61742d696565653735342d64696461637469632f7261772f6d61737465722f646f632f696d672f65715f666c6f617433325f76616c75652e706e67\"></p>\n<p>An another way to think about this formula is to consider the stored\nnumber as a fixed point binary number with sign bit.</p>\n<p>In this case, the integer part would be the exponent and the fractional\npart (plus 1) would be the significand. I.e.</p>\n<p><img alt=\"Float as fixed point binary\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cb22631485efe62f9b7bf514cb74fbbd783b7dd4/68747470733a2f2f6769746c61622e636f6d2f676575736562692f666c6f61742d696565653735342d64696461637469632f7261772f6d61737465722f646f632f696d672f65715f666c6f61745f61735f66702e706e67\"></p>\n<h2>Implementation</h2>\n<p>Every implemented float type is available as a class:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">floatedu</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"p\">[</span><span class=\"n\">Float</span><span class=\"p\">,</span> <span class=\"n\">Float8</span><span class=\"p\">,</span> <span class=\"n\">Float16</span><span class=\"p\">,</span> <span class=\"n\">BFloat16</span><span class=\"p\">,</span> <span class=\"n\">Float64</span><span class=\"p\">,</span> <span class=\"n\">Float32</span><span class=\"p\">,</span> <span class=\"n\">Float128</span><span class=\"p\">,</span> <span class=\"n\">Float256</span><span class=\"p\">]</span>\n</pre>\n<p>The actual implementation class is <code>Float</code> and it couldn't be instantiated\ndirectly.</p>\n<p>It must be subclassed providing <code>p</code>, <code>k</code>, and <code>bias</code> values as class\nproperties (see <code>floatedu/Float.py</code>).</p>\n\n          </div>"}, "last_serial": 6279168, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "9cc96d026240053ede4aaf798c745768", "sha256": "c0a6461277fc802cb96479990d7ac4e7f2757c487b5e7ef4f6663f775b94b5e9"}, "downloads": -1, "filename": "floatedu-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "9cc96d026240053ede4aaf798c745768", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 17602, "upload_time": "2019-12-11T13:15:47", "upload_time_iso_8601": "2019-12-11T13:15:47.365524Z", "url": "https://files.pythonhosted.org/packages/96/b0/85c285028b2dca483e6594de374788cb578ae166b79a164418437e30289e/floatedu-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9bdf76327ceac66ce1e8120744d044de", "sha256": "d5137d1be58dafc2949deb0b579e63a6e75f920c828eb8fdbca47450ebcc47ec"}, "downloads": -1, "filename": "floatedu-0.0.1.tar.gz", "has_sig": false, "md5_digest": "9bdf76327ceac66ce1e8120744d044de", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5408, "upload_time": "2019-12-11T13:15:50", "upload_time_iso_8601": "2019-12-11T13:15:50.402786Z", "url": "https://files.pythonhosted.org/packages/93/93/cdb35a2004a6843e52f69696c326b88807ae4c27188ac2f6c3c9b5004f7f/floatedu-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "a044e38c19d2e3ac8c2735267544c2b3", "sha256": "b1606305da85933b66886c6cc8916ef33d9d9f7468f8eab0e1de36263009026f"}, "downloads": -1, "filename": "floatedu-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "a044e38c19d2e3ac8c2735267544c2b3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 17565, "upload_time": "2019-12-11T13:28:34", "upload_time_iso_8601": "2019-12-11T13:28:34.124264Z", "url": "https://files.pythonhosted.org/packages/eb/11/f2e9ed0452f71ef01a8cc8e4289348db1bafe77368f8db36b51f50643eaf/floatedu-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3302846465e60b7478589d46eeeb4a0d", "sha256": "dbca9b4b01c82f7149142fffcf65ea1e0603ce11ad5105af9ca1514650db5da4"}, "downloads": -1, "filename": "floatedu-0.0.2.tar.gz", "has_sig": false, "md5_digest": "3302846465e60b7478589d46eeeb4a0d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5321, "upload_time": "2019-12-11T13:28:35", "upload_time_iso_8601": "2019-12-11T13:28:35.150789Z", "url": "https://files.pythonhosted.org/packages/3a/d9/7cfc52e15398512e67a01be87b0eed306c12821727260ec6fcb123fbc7b1/floatedu-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "f9c854614153a18580729155500ac15e", "sha256": "19673dd7b5d26ffe8776b34550d606c86ab56e3174693de35f7ae064488c098b"}, "downloads": -1, "filename": "floatedu-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "f9c854614153a18580729155500ac15e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 17590, "upload_time": "2019-12-11T13:46:24", "upload_time_iso_8601": "2019-12-11T13:46:24.683500Z", "url": "https://files.pythonhosted.org/packages/28/1c/3614750ee2028872b0eebfd2f9245130cfd6963e1c86f524b4494f48877e/floatedu-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "31f9703f1440d2b69ac8ccfdf04bf4ba", "sha256": "322647a13e6f97786ea86fac5f0e4c50bf9b90da175d60bf8dc427a301970125"}, "downloads": -1, "filename": "floatedu-0.0.3.tar.gz", "has_sig": false, "md5_digest": "31f9703f1440d2b69ac8ccfdf04bf4ba", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5350, "upload_time": "2019-12-11T13:46:25", "upload_time_iso_8601": "2019-12-11T13:46:25.795218Z", "url": "https://files.pythonhosted.org/packages/cc/47/2de2c69d4f1c70398b81bf84bcf35f651871d549cba2fb88c78ad4e89102/floatedu-0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f9c854614153a18580729155500ac15e", "sha256": "19673dd7b5d26ffe8776b34550d606c86ab56e3174693de35f7ae064488c098b"}, "downloads": -1, "filename": "floatedu-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "f9c854614153a18580729155500ac15e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 17590, "upload_time": "2019-12-11T13:46:24", "upload_time_iso_8601": "2019-12-11T13:46:24.683500Z", "url": "https://files.pythonhosted.org/packages/28/1c/3614750ee2028872b0eebfd2f9245130cfd6963e1c86f524b4494f48877e/floatedu-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "31f9703f1440d2b69ac8ccfdf04bf4ba", "sha256": "322647a13e6f97786ea86fac5f0e4c50bf9b90da175d60bf8dc427a301970125"}, "downloads": -1, "filename": "floatedu-0.0.3.tar.gz", "has_sig": false, "md5_digest": "31f9703f1440d2b69ac8ccfdf04bf4ba", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5350, "upload_time": "2019-12-11T13:46:25", "upload_time_iso_8601": "2019-12-11T13:46:25.795218Z", "url": "https://files.pythonhosted.org/packages/cc/47/2de2c69d4f1c70398b81bf84bcf35f651871d549cba2fb88c78ad4e89102/floatedu-0.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 01:01:47 2020"}