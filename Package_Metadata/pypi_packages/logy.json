{"info": {"author": "Victor Lin", "author_email": "bornstub@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "=============\nWhat is Logy?\n=============\n\nLogy is a central logging system for Python based on Flask.  It can receive \nlogging records from other servers through Internet and store them in database, \nthen display it as web pages.\n\n============\nInstallation\n============\n\nTo install Logy:\n\n::\n\n    pip install logy\n\n==============\nHow to use it?\n==============\n\nBefore you can write some records to Logy, you need to initialize the database.  \nType and run\n\n::\n\n    logy_initdb\n\nBy default, it creates sqlite3 database in current directory. And to run the \nserver, here type\n\n::\n    \n    logy_run\n\nAnd you should see following line in console\n\n::\n\n * Running on http://127.0.0.1:5000/\n\nAnd here you can open the browser to see the index page. But there is no \nrecord in database by now. To write some records to the database, you need to \ninstall logging handler first. To install it, type \n\n::\n\n    pip install ex_loghandlers\n\nWith the extended logging handler, here is a simple python module which \nwrites logging records to Logy. \n\n::\n\n    import logging\n    \n    import ex_loghandlers\n    \n    rootLogger = logging.getLogger('')\n    rootLogger.setLevel(logging.DEBUG)\n    \n    sream_handler = logging.StreamHandler()\n    # set up the http handler which writes records to Logy server\n    http_handler = ex_loghandlers.ExHTTPHandler(host='localhost:5000', \n                                                url='/sink/TEST/myapp', \n                                                method='POST')\n    rootLogger.addHandler(sream_handler)\n    rootLogger.addHandler(http_handler)\n    \n    logger1 = logging.getLogger('myapp.area1')\n    logger2 = logging.getLogger('myapp.area2')\n    \n    logger1.debug('Quick zephyrs blow, vexing daft Jim.')\n    logger1.info('How quickly daft jumping zebras vex.')\n    logger2.warning('Jail zesty vixen who grabbed pay from quack.')\n    logger2.error('The five boxing wizards jump quickly.')\n    \n    try:\n        raise Exception(\"Boom\")\n    except:\n        logger1.fatal(\"Huston, we've got a problem\", exc_info=True) \n        \n    logger1.info('Everything goes fine, now.')\n\nAnd here you can open the url http://127.0.0.1:5000/ and see those logging \nrecords. Here is some details of the parameters for the logging server in \nthe url \"/sink/TEST/myapp\"\n\n * TEST - it is the API key for logging service\n * myapp - it is what name of application you're running now\n\nFor example, you have a server which is running three different application \nproxy01, web01 and mail01, then you can write url like this:\n\n::\n\n  /sink/TEST/proxy01\n  /sink/TEST/web01\n  /sink/TEST/mail01\n\n=============\nConfiguration\n=============\n\nOf course, you won't run logy directly in production environment, you need to \nwrite your own configuration.  You can see the default configuration in \nlogy/default_settings.py, you don't have to modify the configuration file \ndirectly, instead, you can copy it and modify it.  \n\nTo run the server with your own configuration, you can set up an environment \nvariable, for example:\n\n::\n\n    LOGY_SETTINGS=myconfig.py logy_run\n\nAnd here you are, the server is running with your own configuration.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://bitbucket.org/victorlin/logy", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "logy", "package_url": "https://pypi.org/project/logy/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/logy/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://bitbucket.org/victorlin/logy"}, "release_url": "https://pypi.org/project/logy/0.1/", "requires_dist": null, "requires_python": null, "summary": "A flask based web application for central logging", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"what-is-logy\">\n<h2>What is Logy?</h2>\n<p>Logy is a central logging system for Python based on Flask.  It can receive\nlogging records from other servers through Internet and store them in database,\nthen display it as web pages.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>To install Logy:</p>\n<pre>pip install logy\n</pre>\n</div>\n<div id=\"how-to-use-it\">\n<h2>How to use it?</h2>\n<p>Before you can write some records to Logy, you need to initialize the database.\nType and run</p>\n<pre>logy_initdb\n</pre>\n<p>By default, it creates sqlite3 database in current directory. And to run the\nserver, here type</p>\n<pre>logy_run\n</pre>\n<p>And you should see following line in console</p>\n<pre>* Running on http://127.0.0.1:5000/\n</pre>\n<p>And here you can open the browser to see the index page. But there is no\nrecord in database by now. To write some records to the database, you need to\ninstall logging handler first. To install it, type</p>\n<pre>pip install ex_loghandlers\n</pre>\n<p>With the extended logging handler, here is a simple python module which\nwrites logging records to Logy.</p>\n<pre>import logging\n\nimport ex_loghandlers\n\nrootLogger = logging.getLogger('')\nrootLogger.setLevel(logging.DEBUG)\n\nsream_handler = logging.StreamHandler()\n# set up the http handler which writes records to Logy server\nhttp_handler = ex_loghandlers.ExHTTPHandler(host='localhost:5000',\n                                            url='/sink/TEST/myapp',\n                                            method='POST')\nrootLogger.addHandler(sream_handler)\nrootLogger.addHandler(http_handler)\n\nlogger1 = logging.getLogger('myapp.area1')\nlogger2 = logging.getLogger('myapp.area2')\n\nlogger1.debug('Quick zephyrs blow, vexing daft Jim.')\nlogger1.info('How quickly daft jumping zebras vex.')\nlogger2.warning('Jail zesty vixen who grabbed pay from quack.')\nlogger2.error('The five boxing wizards jump quickly.')\n\ntry:\n    raise Exception(\"Boom\")\nexcept:\n    logger1.fatal(\"Huston, we've got a problem\", exc_info=True)\n\nlogger1.info('Everything goes fine, now.')\n</pre>\n<p>And here you can open the url <a href=\"http://127.0.0.1:5000/\" rel=\"nofollow\">http://127.0.0.1:5000/</a> and see those logging\nrecords. Here is some details of the parameters for the logging server in\nthe url \u201c/sink/TEST/myapp\u201d</p>\n<blockquote>\n<ul>\n<li>TEST - it is the API key for logging service</li>\n<li>myapp - it is what name of application you\u2019re running now</li>\n</ul>\n</blockquote>\n<p>For example, you have a server which is running three different application\nproxy01, web01 and mail01, then you can write url like this:</p>\n<pre>/sink/TEST/proxy01\n/sink/TEST/web01\n/sink/TEST/mail01\n</pre>\n</div>\n<div id=\"configuration\">\n<h2>Configuration</h2>\n<p>Of course, you won\u2019t run logy directly in production environment, you need to\nwrite your own configuration.  You can see the default configuration in\nlogy/default_settings.py, you don\u2019t have to modify the configuration file\ndirectly, instead, you can copy it and modify it.</p>\n<p>To run the server with your own configuration, you can set up an environment\nvariable, for example:</p>\n<pre>LOGY_SETTINGS=myconfig.py logy_run\n</pre>\n<p>And here you are, the server is running with your own configuration.</p>\n</div>\n\n          </div>"}, "last_serial": 794343, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "4674067dc7171abc07de34007918e393", "sha256": "3d60551a841b9aa56b14fe67553b7b61d4a63b000a705ead44c6f0baa62442d8"}, "downloads": -1, "filename": "logy-0.1.zip", "has_sig": false, "md5_digest": "4674067dc7171abc07de34007918e393", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13018, "upload_time": "2011-01-01T09:55:52", "upload_time_iso_8601": "2011-01-01T09:55:52.223010Z", "url": "https://files.pythonhosted.org/packages/b9/e5/58667734f4cb82011d690c7f73071412f30a66a683bc17fff9b7fe8cf989/logy-0.1.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4674067dc7171abc07de34007918e393", "sha256": "3d60551a841b9aa56b14fe67553b7b61d4a63b000a705ead44c6f0baa62442d8"}, "downloads": -1, "filename": "logy-0.1.zip", "has_sig": false, "md5_digest": "4674067dc7171abc07de34007918e393", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13018, "upload_time": "2011-01-01T09:55:52", "upload_time_iso_8601": "2011-01-01T09:55:52.223010Z", "url": "https://files.pythonhosted.org/packages/b9/e5/58667734f4cb82011d690c7f73071412f30a66a683bc17fff9b7fe8cf989/logy-0.1.zip", "yanked": false}], "timestamp": "Fri May  8 00:44:02 2020"}