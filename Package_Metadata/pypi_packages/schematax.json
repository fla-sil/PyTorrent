{"info": {"author": "Jack Fletcher", "author_email": "jack.mckayfletcher@plymouth.ac.uk", "bugtrack_url": null, "classifiers": [], "description": "schematax\r\n=========\r\n\r\n|PyPI version| |License| |Supported Python| |Downloads|\r\n\r\nschematax is a simple Python package to do all things related to schemata_.\r\n\r\nA schema is word made using an extra symbol, '*', called the wild card symbol.\r\nFor example the schema over the binary aplhapbet '1*0', represents the set of\r\nstrings. {'100','110'}'.\r\n\r\nSchema have properties. For example, for a schema s, the order of s is the\r\nnumber of symbols in s which are not the wild card symbols (called fixed symbols).\r\nThe defining length of s is the distance between the first and last fixed symbol.  \r\n\r\nGiven a set of words of the same length S, the schematic completion of S\r\nreturns all schema which make subsets of the words in S. \r\nWhats more given the partial ordering over schemata, the schematic completion of S\r\nforms a `Complete Lattice`_.      \r\n\r\n\r\nLinks\r\n-----\r\n\r\n- GitHub: https://github.com/iSTB/python-schemata\r\n- PyPI: http://pypi.python.org/pypi/schematax\r\n- Issue Tracker: https://github.com/iSTB/python-schemata/issues\r\n- Download: http://pypi.python.org/pypi/schematax#downloads\r\n\r\n\r\nInstallation\r\n------------\r\n\r\nThis package runs under Python 2.7, use pip_ to install:\r\n\r\n.. code:: bash\r\n\r\n    $ pip install schematax\r\n\r\nThis will also install the graphviz_ package from PyPI as\r\nrequired dependencies.\r\n\r\n**Important**: Drawing the the schematic lattice uses `Graphviz software`_. Make sure it\r\nis installed and ``dot`` executable is on your systems' path.\r\n\r\n\r\nQuickstart\r\n----------\r\nThe file example.py gives a good overview of how to use the package.\r\n\r\nBasic schema operations:\r\n\r\n.. code-block:: python\r\n\r\n    >>> import schematax\r\n\r\n    >>> s = schematax.schema('10*1') #makes a schema\r\n\r\n    >>> s\r\n    10*1\r\n\r\n    >>> s.get_order()\r\n    3\r\n\r\n    >>> s.get_defining_length()\r\n    3\r\n\r\n    >>> s2 = schematax.schema('1**1') #makes another schema\r\n\r\n    >>> s <= s2 \r\n    True\r\n\r\n    >>> s < s2\r\n    True\r\n\r\n    >>> s == s2\r\n    False\r\n \r\n    >>> schematax.meet(s,s2)\r\n    10*1\r\n\r\n    >>> schematax.join(s,s2)\r\n    1**1\r\n\r\n    >>> s3 = schematax.schema('00*1')\r\n    \r\n    >>> schematax.supremum([s,s2,s3])\r\n    ***1\r\n\r\n    >>> schematax.infimum([s,s2,s3])\r\n    e                               #e stands for the empty schema\r\n\r\nSchematic completion and drawing the schematic lattice:\r\n\r\n.. code-block:: python\r\n    \r\n    >>> import schematax\r\n    \r\n    >>> xs = ['111', '011', '001']\r\n    \r\n    >>> ss = schematax.complete(xs) #performing schematic completion \r\n    \r\n    >>> ss\r\n    [111, 011, 001, *11, **1, 0*1, e] #e stands for the empty schema\r\n\r\n    >>> schematax.draw(ss,'my_lattice') #draws the schematic lattice of ss and saves it as my_lattice.pdf \r\n    \r\n\r\nThe image produced here:\r\n\r\n.. image:: https://github.com/iSTB/python-schemata/blob/master/docs/my_lattice.png?raw=true\r\n    :align: center\r\n\r\n\r\nFurther reading\r\n---------------\r\n\r\n- https://en.wikipedia.org/wiki/Schema_%28genetic_algorithms%29\r\n- https://en.wikipedia.org/wiki/Lattice_%28order%29\r\n\r\nSee also\r\n--------\r\n\r\nThe implementation is based on these Python packages:\r\n\r\n- graphviz_ |--| Simple Python interface for Graphviz\r\n\r\n\r\n\r\n\r\n\r\nLicense\r\n-------\r\n\r\nSchemata is distributed under the `MIT license`_.\r\n\r\n\r\n\r\n.. _Complete Lattice: https://en.wikipedia.org/wiki/Complete_lattice\r\n.. _schemata: https://en.wikipedia.org/wiki/Schema_%28genetic_algorithms%29\r\n\r\n.. _pip: http://pip.readthedocs.org\r\n.. _Graphviz software: http://www.graphviz.org\r\n\r\n\r\n.. _graphviz: http://pypi.python.org/pypi/graphviz\r\n\r\n\r\n.. _MIT license: http://opensource.org/licenses/MIT\r\n\r\n\r\n.. |--| unicode:: U+2013\r\n\r\n\r\n.. |PyPI version| image:: https://img.shields.io/pypi/v/schematax.svg\r\n    :target: https://pypi.python.org/pypi/schematax\r\n    :alt: Latest PyPI Version\r\n.. |License| image:: https://img.shields.io/pypi/l/schematax.svg\r\n    :target: https://pypi.python.org/pypi/concepts\r\n    :alt: License\r\n.. |Supported Python| image:: https://img.shields.io/pypi/pyversions/schematax.svg\r\n    :target: https://pypi.python.org/pypi/schematax\r\n    :alt: Supported Python Versions\r\n.. |Format| image:: https://img.shields.io/pypi/format/schematax.svg\r\n    :target: https://pypi.python.org/pypi/concepts\r\n    :alt: Format\r\n.. |Downloads| image:: https://img.shields.io/pypi/dm/schematax.svg\r\n    :target: https://pypi.python.org/pypi/schematax\r\n    :alt: Downloads", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/iSTB/python-schemata", "keywords": "schemata,schema,genetic algorithms,GAs,complete lattice,meet,join", "license": "LICENSE.txt", "maintainer": "Jack Fletcher", "maintainer_email": "jack.mckayfletcher@plymouth.ac.uk", "name": "schematax", "package_url": "https://pypi.org/project/schematax/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/schematax/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/iSTB/python-schemata"}, "release_url": "https://pypi.org/project/schematax/0.1.6/", "requires_dist": null, "requires_python": null, "summary": "A python package for all things schemata related", "version": "0.1.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://pypi.python.org/pypi/schematax\" rel=\"nofollow\"><img alt=\"Latest PyPI Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/99c28e4ffcbafc41a881eddd01a5244a4f54a67c/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f736368656d617461782e737667\"></a> <a href=\"https://pypi.python.org/pypi/concepts\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/dad2e95eedde2b13bf145cb84dad0c1d8bf3ea51/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f736368656d617461782e737667\"></a> <a href=\"https://pypi.python.org/pypi/schematax\" rel=\"nofollow\"><img alt=\"Supported Python Versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cd7ff122f250018dbb9b6cce73bf4974010f881b/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f736368656d617461782e737667\"></a> <a href=\"https://pypi.python.org/pypi/schematax\" rel=\"nofollow\"><img alt=\"Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1462ea1da5d5848885aa217eaadd663cb5a2588d/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f736368656d617461782e737667\"></a></p>\n<p>schematax is a simple Python package to do all things related to <a href=\"https://en.wikipedia.org/wiki/Schema_%28genetic_algorithms%29\" rel=\"nofollow\">schemata</a>.</p>\n<p>A schema is word made using an extra symbol, \u2018*\u2019, called the wild card symbol.\nFor example the schema over the binary aplhapbet \u20181*0\u2019, represents the set of\nstrings. {\u2018100\u2019,\u2019110\u2019}\u2019.</p>\n<p>Schema have properties. For example, for a schema s, the order of s is the\nnumber of symbols in s which are not the wild card symbols (called fixed symbols).\nThe defining length of s is the distance between the first and last fixed symbol.</p>\n<p>Given a set of words of the same length S, the schematic completion of S\nreturns all schema which make subsets of the words in S.\nWhats more given the partial ordering over schemata, the schematic completion of S\nforms a <a href=\"https://en.wikipedia.org/wiki/Complete_lattice\" rel=\"nofollow\">Complete Lattice</a>.</p>\n<div id=\"links\">\n<h2>Links</h2>\n<ul>\n<li>GitHub: <a href=\"https://github.com/iSTB/python-schemata\" rel=\"nofollow\">https://github.com/iSTB/python-schemata</a></li>\n<li>PyPI: <a href=\"http://pypi.python.org/pypi/schematax\" rel=\"nofollow\">http://pypi.python.org/pypi/schematax</a></li>\n<li>Issue Tracker: <a href=\"https://github.com/iSTB/python-schemata/issues\" rel=\"nofollow\">https://github.com/iSTB/python-schemata/issues</a></li>\n<li>Download: <a href=\"http://pypi.python.org/pypi/schematax#downloads\" rel=\"nofollow\">http://pypi.python.org/pypi/schematax#downloads</a></li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>This package runs under Python 2.7, use <a href=\"http://pip.readthedocs.org\" rel=\"nofollow\">pip</a> to install:</p>\n<pre>$ pip install schematax\n</pre>\n<p>This will also install the <a href=\"http://pypi.python.org/pypi/graphviz\" rel=\"nofollow\">graphviz</a> package from PyPI as\nrequired dependencies.</p>\n<p><strong>Important</strong>: Drawing the the schematic lattice uses <a href=\"http://www.graphviz.org\" rel=\"nofollow\">Graphviz software</a>. Make sure it\nis installed and <tt>dot</tt> executable is on your systems\u2019 path.</p>\n</div>\n<div id=\"quickstart\">\n<h2>Quickstart</h2>\n<p>The file example.py gives a good overview of how to use the package.</p>\n<p>Basic schema operations:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">schematax</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">schematax</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"p\">(</span><span class=\"s1\">'10*1'</span><span class=\"p\">)</span> <span class=\"c1\">#makes a schema</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">s</span>\n<span class=\"mi\">10</span><span class=\"o\">*</span><span class=\"mi\">1</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">get_order</span><span class=\"p\">()</span>\n<span class=\"mi\">3</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">get_defining_length</span><span class=\"p\">()</span>\n<span class=\"mi\">3</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">s2</span> <span class=\"o\">=</span> <span class=\"n\">schematax</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"p\">(</span><span class=\"s1\">'1**1'</span><span class=\"p\">)</span> <span class=\"c1\">#makes another schema</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">s</span> <span class=\"o\">&lt;=</span> <span class=\"n\">s2</span>\n<span class=\"kc\">True</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">s</span> <span class=\"o\">&lt;</span> <span class=\"n\">s2</span>\n<span class=\"kc\">True</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">s</span> <span class=\"o\">==</span> <span class=\"n\">s2</span>\n<span class=\"kc\">False</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">schematax</span><span class=\"o\">.</span><span class=\"n\">meet</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"n\">s2</span><span class=\"p\">)</span>\n<span class=\"mi\">10</span><span class=\"o\">*</span><span class=\"mi\">1</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">schematax</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"n\">s2</span><span class=\"p\">)</span>\n<span class=\"mi\">1</span><span class=\"o\">**</span><span class=\"mi\">1</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">s3</span> <span class=\"o\">=</span> <span class=\"n\">schematax</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"p\">(</span><span class=\"s1\">'00*1'</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">schematax</span><span class=\"o\">.</span><span class=\"n\">supremum</span><span class=\"p\">([</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"n\">s2</span><span class=\"p\">,</span><span class=\"n\">s3</span><span class=\"p\">])</span>\n<span class=\"o\">***</span><span class=\"mi\">1</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">schematax</span><span class=\"o\">.</span><span class=\"n\">infimum</span><span class=\"p\">([</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"n\">s2</span><span class=\"p\">,</span><span class=\"n\">s3</span><span class=\"p\">])</span>\n<span class=\"n\">e</span>                               <span class=\"c1\">#e stands for the empty schema</span>\n</pre>\n<p>Schematic completion and drawing the schematic lattice:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">schematax</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">xs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'111'</span><span class=\"p\">,</span> <span class=\"s1\">'011'</span><span class=\"p\">,</span> <span class=\"s1\">'001'</span><span class=\"p\">]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ss</span> <span class=\"o\">=</span> <span class=\"n\">schematax</span><span class=\"o\">.</span><span class=\"n\">complete</span><span class=\"p\">(</span><span class=\"n\">xs</span><span class=\"p\">)</span> <span class=\"c1\">#performing schematic completion</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ss</span>\n<span class=\"p\">[</span><span class=\"mi\">111</span><span class=\"p\">,</span> <span class=\"mi\">011</span><span class=\"p\">,</span> <span class=\"mi\">001</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"o\">*</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">]</span> <span class=\"c1\">#e stands for the empty schema</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">schematax</span><span class=\"o\">.</span><span class=\"n\">draw</span><span class=\"p\">(</span><span class=\"n\">ss</span><span class=\"p\">,</span><span class=\"s1\">'my_lattice'</span><span class=\"p\">)</span> <span class=\"c1\">#draws the schematic lattice of ss and saves it as my_lattice.pdf</span>\n</pre>\n<p>The image produced here:</p>\n<img alt=\"https://github.com/iSTB/python-schemata/blob/master/docs/my_lattice.png?raw=true\" class=\"align-center\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5fb97166b4ecaca86c18de17608eaa7a0a971fed/68747470733a2f2f6769746875622e636f6d2f695354422f707974686f6e2d736368656d6174612f626c6f622f6d61737465722f646f63732f6d795f6c6174746963652e706e673f7261773d74727565\">\n</div>\n<div id=\"further-reading\">\n<h2>Further reading</h2>\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Schema_%28genetic_algorithms%29\" rel=\"nofollow\">https://en.wikipedia.org/wiki/Schema_%28genetic_algorithms%29</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Lattice_%28order%29\" rel=\"nofollow\">https://en.wikipedia.org/wiki/Lattice_%28order%29</a></li>\n</ul>\n</div>\n<div id=\"see-also\">\n<h2>See also</h2>\n<p>The implementation is based on these Python packages:</p>\n<ul>\n<li><a href=\"http://pypi.python.org/pypi/graphviz\" rel=\"nofollow\">graphviz</a> \u2013 Simple Python interface for Graphviz</li>\n</ul>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>Schemata is distributed under the <a href=\"http://opensource.org/licenses/MIT\" rel=\"nofollow\">MIT license</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 1766219, "releases": {"0.1.6": [{"comment_text": "", "digests": {"md5": "8454554ed4f9c4e4b0e30ea1fbe9c8ba", "sha256": "8aa4653c3188593195ced6df047225e1081c6dc7615758cfc5f4f71ee0b5ffcb"}, "downloads": -1, "filename": "schematax-0.1.6.tar.gz", "has_sig": false, "md5_digest": "8454554ed4f9c4e4b0e30ea1fbe9c8ba", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39460, "upload_time": "2015-10-13T12:37:16", "upload_time_iso_8601": "2015-10-13T12:37:16.721706Z", "url": "https://files.pythonhosted.org/packages/5b/cf/44d39edd9a4ce9a32573812fcb17131840f74208ac3ac6bb5b733e5c990f/schematax-0.1.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8454554ed4f9c4e4b0e30ea1fbe9c8ba", "sha256": "8aa4653c3188593195ced6df047225e1081c6dc7615758cfc5f4f71ee0b5ffcb"}, "downloads": -1, "filename": "schematax-0.1.6.tar.gz", "has_sig": false, "md5_digest": "8454554ed4f9c4e4b0e30ea1fbe9c8ba", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39460, "upload_time": "2015-10-13T12:37:16", "upload_time_iso_8601": "2015-10-13T12:37:16.721706Z", "url": "https://files.pythonhosted.org/packages/5b/cf/44d39edd9a4ce9a32573812fcb17131840f74208ac3ac6bb5b733e5c990f/schematax-0.1.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:48 2020"}