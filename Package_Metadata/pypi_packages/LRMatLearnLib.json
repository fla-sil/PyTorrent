{"info": {"author": "April Sagan", "author_email": "aprilsagan1729@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# LRMatLearnLib\n\n## Using Matrix Completion for Movie Recomendations\n\nStart by loading the MovieLens1M dataset\n\n```python\ndata = np.loadtxt( 'ml-1m/ratings.dat',delimiter='::' )\nX=data[:, [0,1]].astype(int)-1\ny=data[:,2]\n\nn_users=max(X[:,0])+1\nn_movies=max(X[:,1])+1\n\nprint((n_users,n_movies))\n```\n\n    (6040, 3952)\n\n\nSo, we have 6040 users and 3952 movies.  That's a total of about 23 million potential ratings, of which we know 1 million.  We're going to reserve 200,000 of the ratings to test our results.\n\n\n```python\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n```\n\nImport MC.py, fit the data and make predictions\n\n```python\nfrom MC import *\nfrom statistics import mean\n\nmc_model=MC(n_users,n_movies,5)\nmc_model.fit(np.array(X_train).transpose(), y_train)\ny_predict=mc_model.predict((np.array(X_test).transpose()))\n\nprint(\"MAE:\",mean(abs(y_test-y_predict)))\n\nprint(\"Percent of predictions off my less than 1: \",np.sum(abs(y_test-y_predict)<1)/len(y_test))\n```\n\n    MAE: 0.6910439339771605\n    Percent of predictions off my less than 1:  0.7603603243318903\n\n\n## Using Robust Principle Component Analysis for Background Forground Seperation\n\nImport packages, open the video file, and flatten the frames into vectors.  \n\n```python\nimport sys\nsys.path.append('../')\nfrom LRMatLearnLib.datasets.data_loader import *\nfrom LRMatLearnLib.RPCA.algorithms import *\nimport matplotlib.pyplot as plt\nimport matplotlib.animation as animation\n\nv=load_video(\"../datasets/videos/escalator.avi\")\n(n_frames,d1,d2)=v.shape\nv=v.reshape(n_frames, d1*d2)\n\n\n```\nrun altProjNiave, a basic RPCA algorithm.  The first arguement is the matrix to be decomposed, the second is the rank of the low rank matrix, and the third is the number of entries in the sparse matrix.\n\n```python\n(L,S)=altProjNiave(v, 2,100*n_frames)\n```\nReshape the frames back into images and plot them. \n\n```python\nL=L.reshape(n_frames,d1,d2)\nS=S.reshape(n_frames,d1,d2)\nv=v.reshape(n_frames,d1,d2)\nall=np.concatenate((v,L,S), axis=2)\n\nplt.imshow(all[1,:,:])\nplt.show()\n```\n![png](../escalator.png)\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/april1729/LRMatLearnLib", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "LRMatLearnLib", "package_url": "https://pypi.org/project/LRMatLearnLib/", "platform": "", "project_url": "https://pypi.org/project/LRMatLearnLib/", "project_urls": {"Homepage": "https://github.com/april1729/LRMatLearnLib"}, "release_url": "https://pypi.org/project/LRMatLearnLib/0.1/", "requires_dist": null, "requires_python": "", "summary": "Low Rank Matrix Learning Library.  A python library for low rank matrix methods used in machine learning, like Matrix Completion, Robust PCA, and CUR factorizations", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>LRMatLearnLib</h1>\n<h2>Using Matrix Completion for Movie Recomendations</h2>\n<p>Start by loading the MovieLens1M dataset</p>\n<pre><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">loadtxt</span><span class=\"p\">(</span> <span class=\"s1\">'ml-1m/ratings.dat'</span><span class=\"p\">,</span><span class=\"n\">delimiter</span><span class=\"o\">=</span><span class=\"s1\">'::'</span> <span class=\"p\">)</span>\n<span class=\"n\">X</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">[:,</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]]</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"mi\">1</span>\n<span class=\"n\">y</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">[:,</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n\n<span class=\"n\">n_users</span><span class=\"o\">=</span><span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">[:,</span><span class=\"mi\">0</span><span class=\"p\">])</span><span class=\"o\">+</span><span class=\"mi\">1</span>\n<span class=\"n\">n_movies</span><span class=\"o\">=</span><span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">[:,</span><span class=\"mi\">1</span><span class=\"p\">])</span><span class=\"o\">+</span><span class=\"mi\">1</span>\n\n<span class=\"nb\">print</span><span class=\"p\">((</span><span class=\"n\">n_users</span><span class=\"p\">,</span><span class=\"n\">n_movies</span><span class=\"p\">))</span>\n</pre>\n<pre><code>(6040, 3952)\n</code></pre>\n<p>So, we have 6040 users and 3952 movies.  That's a total of about 23 million potential ratings, of which we know 1 million.  We're going to reserve 200,000 of the ratings to test our results.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sklearn.model_selection</span> <span class=\"kn\">import</span> <span class=\"n\">train_test_split</span>\n<span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">train_test_split</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">test_size</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">,</span> <span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">42</span><span class=\"p\">)</span>\n</pre>\n<p>Import MC.py, fit the data and make predictions</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">MC</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">statistics</span> <span class=\"kn\">import</span> <span class=\"n\">mean</span>\n\n<span class=\"n\">mc_model</span><span class=\"o\">=</span><span class=\"n\">MC</span><span class=\"p\">(</span><span class=\"n\">n_users</span><span class=\"p\">,</span><span class=\"n\">n_movies</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"n\">mc_model</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">transpose</span><span class=\"p\">(),</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n<span class=\"n\">y_predict</span><span class=\"o\">=</span><span class=\"n\">mc_model</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">((</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">transpose</span><span class=\"p\">()))</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"MAE:\"</span><span class=\"p\">,</span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">y_test</span><span class=\"o\">-</span><span class=\"n\">y_predict</span><span class=\"p\">)))</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Percent of predictions off my less than 1: \"</span><span class=\"p\">,</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">y_test</span><span class=\"o\">-</span><span class=\"n\">y_predict</span><span class=\"p\">)</span><span class=\"o\">&lt;</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">y_test</span><span class=\"p\">))</span>\n</pre>\n<pre><code>MAE: 0.6910439339771605\nPercent of predictions off my less than 1:  0.7603603243318903\n</code></pre>\n<h2>Using Robust Principle Component Analysis for Background Forground Seperation</h2>\n<p>Import packages, open the video file, and flatten the frames into vectors.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s1\">'../'</span><span class=\"p\">)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">LRMatLearnLib.datasets.data_loader</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">LRMatLearnLib.RPCA.algorithms</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.animation</span> <span class=\"k\">as</span> <span class=\"nn\">animation</span>\n\n<span class=\"n\">v</span><span class=\"o\">=</span><span class=\"n\">load_video</span><span class=\"p\">(</span><span class=\"s2\">\"../datasets/videos/escalator.avi\"</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">n_frames</span><span class=\"p\">,</span><span class=\"n\">d1</span><span class=\"p\">,</span><span class=\"n\">d2</span><span class=\"p\">)</span><span class=\"o\">=</span><span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">shape</span>\n<span class=\"n\">v</span><span class=\"o\">=</span><span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">reshape</span><span class=\"p\">(</span><span class=\"n\">n_frames</span><span class=\"p\">,</span> <span class=\"n\">d1</span><span class=\"o\">*</span><span class=\"n\">d2</span><span class=\"p\">)</span>\n</pre>\n<p>run altProjNiave, a basic RPCA algorithm.  The first arguement is the matrix to be decomposed, the second is the rank of the low rank matrix, and the third is the number of entries in the sparse matrix.</p>\n<pre><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span><span class=\"n\">S</span><span class=\"p\">)</span><span class=\"o\">=</span><span class=\"n\">altProjNiave</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">100</span><span class=\"o\">*</span><span class=\"n\">n_frames</span><span class=\"p\">)</span>\n</pre>\n<p>Reshape the frames back into images and plot them.</p>\n<pre><span class=\"n\">L</span><span class=\"o\">=</span><span class=\"n\">L</span><span class=\"o\">.</span><span class=\"n\">reshape</span><span class=\"p\">(</span><span class=\"n\">n_frames</span><span class=\"p\">,</span><span class=\"n\">d1</span><span class=\"p\">,</span><span class=\"n\">d2</span><span class=\"p\">)</span>\n<span class=\"n\">S</span><span class=\"o\">=</span><span class=\"n\">S</span><span class=\"o\">.</span><span class=\"n\">reshape</span><span class=\"p\">(</span><span class=\"n\">n_frames</span><span class=\"p\">,</span><span class=\"n\">d1</span><span class=\"p\">,</span><span class=\"n\">d2</span><span class=\"p\">)</span>\n<span class=\"n\">v</span><span class=\"o\">=</span><span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">reshape</span><span class=\"p\">(</span><span class=\"n\">n_frames</span><span class=\"p\">,</span><span class=\"n\">d1</span><span class=\"p\">,</span><span class=\"n\">d2</span><span class=\"p\">)</span>\n<span class=\"nb\">all</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">concatenate</span><span class=\"p\">((</span><span class=\"n\">v</span><span class=\"p\">,</span><span class=\"n\">L</span><span class=\"p\">,</span><span class=\"n\">S</span><span class=\"p\">),</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"nb\">all</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,:,:])</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/eb6dc33504c5876a1f994f16a049b2f22895b41d/2e2e2f657363616c61746f722e706e67\"></p>\n\n          </div>"}, "last_serial": 7100384, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "bc759c1fd382123a0924509b615a4934", "sha256": "43dba580d708b336e383cf5d5501530217354db09e2e96c38c56c9d7d23d11ab"}, "downloads": -1, "filename": "LRMatLearnLib-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "bc759c1fd382123a0924509b615a4934", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 2288, "upload_time": "2020-04-25T17:03:06", "upload_time_iso_8601": "2020-04-25T17:03:06.821400Z", "url": "https://files.pythonhosted.org/packages/ad/e1/61af6574300b22698f42594c91c5dc9b583fe36d4973bb919b3eaea49cd6/LRMatLearnLib-0.1-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bc759c1fd382123a0924509b615a4934", "sha256": "43dba580d708b336e383cf5d5501530217354db09e2e96c38c56c9d7d23d11ab"}, "downloads": -1, "filename": "LRMatLearnLib-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "bc759c1fd382123a0924509b615a4934", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 2288, "upload_time": "2020-04-25T17:03:06", "upload_time_iso_8601": "2020-04-25T17:03:06.821400Z", "url": "https://files.pythonhosted.org/packages/ad/e1/61af6574300b22698f42594c91c5dc9b583fe36d4973bb919b3eaea49cd6/LRMatLearnLib-0.1-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:43:32 2020"}