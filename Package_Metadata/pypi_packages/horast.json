{"info": {"author": "Mateusz Bysiek", "author_email": "mateusz.bysiek@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3 :: Only", "Programming Language :: Python :: Implementation :: CPython", "Topic :: Education", "Topic :: Scientific/Engineering", "Topic :: Software Development :: Code Generators", "Topic :: Software Development :: Compilers", "Topic :: Software Development :: Pre-processors", "Topic :: Utilities"], "description": ".. role:: python(code)\n    :language: python\n\n\nhorast\n======\n\nHuman-oriented abstract syntax tree (AST) parser/unparser for Python 3 that doesn't discard comments.\n\n.. image:: https://img.shields.io/pypi/v/horast.svg\n    :target: https://pypi.org/project/horast\n    :alt: package version from PyPI\n\n.. image:: https://travis-ci.org/mbdevpl/horast.svg?branch=master\n    :target: https://travis-ci.org/mbdevpl/horast\n    :alt: build status from Travis CI\n\n.. image:: https://ci.appveyor.com/api/projects/status/github/mbdevpl/horast?svg=true\n    :target: https://ci.appveyor.com/project/mbdevpl/horast\n    :alt: build status from AppVeyor\n\n.. image:: https://api.codacy.com/project/badge/Grade/33195093bb1b448bb9a5368b3507d615\n    :target: https://www.codacy.com/app/mbdevpl/horast\n    :alt: grade from Codacy\n\n.. image:: https://codecov.io/gh/mbdevpl/horast/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/mbdevpl/horast\n    :alt: test coverage from Codecov\n\n.. image:: https://img.shields.io/github/license/mbdevpl/horast.svg\n    :target: https://github.com/mbdevpl/horast/blob/master/NOTICE\n    :alt: license\n\nThis package provides new AST node types (Comment and Directive) which inherit from nodes in typed_ast.ast3 module.\nAdditionally, it provides implementation of parser and unparser for the extended AST allowing\nstraightforward readable code generation.\n\nSimple example of how to use this package:\n\n.. code:: python\n\n    from horast import parse, unparse\n\n    tree = parse(\"\"\"a = 1  # a equals one after this\"\"\")\n    print(unparse(tree))\n    # this will print the code with original comment\n\nMore examples in `examples.ipynb <https://github.com/mbdevpl/horast/blob/v0.4.0/examples.ipynb>`_.\n\n\ntechnical details\n-----------------\n\nParser is based on built-in tokenize module, as well as community packages asttokens and typed_ast.\n\nUnparser is essentially an extension of Unparser class from static_typing package.\n\nNodes provided and handled by horast are listed below.\n\n\nComment\n~~~~~~~\n\nFull line as well as end-of-line comments are parsed/unparsed correctly when they are outside\nof multi-line expressions.\n\nCurrently, handling of comments within multi-line expressions is implemented only partially.\n\n\nBlockComment\n~~~~~~~~~~~~\n\n**Not implemented yet.**\n\nThis node type is intended to store consecutive full-line comments in a\nsingle AST node, therefore simplifying handling of large blocks of comments.\n\n\nDirective\n~~~~~~~~~\n\nSince Python doesn't offer a direct way to convey directives in code,\ncomments beginning with any of the following prefixes will not be classified\nas typical comments, but as directives:\n\n*   if\n*   else\n*   endif\n*   def\n*   undef\n*   ifdef\n*   ifndef\n\nHowever in Python code they still remain as usual comments.\n\nFor example, the comments in the following code will all be classified as directives.\n\n.. code:: python\n\n    #ifdef DEBUG\n    debugging = True\n    #else\n    debugging = False\n    #fi\n\nHowever, when executed as Python, ``debugging`` will always end up ``False``\nbecause directives are preserved as usual comments in Python and therefore\nthey are ignored.\n\nTherefore, the ``Directive`` node is not meant to enable preprocessing of\nPython, at least for now.\n\nNote: the prefix is checked exactly. See the following example:\n\n.. code:: python\n\n    #if something\n    # if some other thing\n\nThe comment in the first line will become ``Directive`` object, while the one\non the second like will become ``Comment`` object.\n\nCurrently, this node is meant to work towards AST compatibility between\nPython and other languages, to aide code generation from Python AST into code\nin other languages -- one such use case is\n`*transpyle* project <https://github.com/mbdevpl/transpyle>`_.\n\n\nPragma\n~~~~~~\n\n``Pragma`` nodes follow the same general rules as ``Directive`` nodes, i.e. they are\nstored in Python code as comments, but a comment will be classified as a pragma\nwhen it's prefixed with a predefined prefix:\n\n*   ``\" pragma:\"``\n\nAdditionally, two subclasses of Pragma are defined in horast, each with its\nown prefix that builds upon the generic pragma prefix:\n\n*   ``OpenMpPragma`` class defines prefix ``\" pragma: omp\"`` and stores OpenMP pragmas.\n*   ``OpenAccPragma`` class defines prefix ``\" pragma: acc\"`` and stores OpenACC pragmas.\n\nA code snippet below contains all 3 pragma types.\n\n.. code:: python\n\n    # pragma: once\n    use_openmp = True\n    use_openacc = True\n    ...\n    a, b = np.ndarray(...)\n    c = np.zeros(...)\n    # pragma: acc parallel copyin(a,b) copyout(c)\n    # pragma: acc loop gang\n    for y in range(ymax): # type: np.int32\n        # pragma: acc loop worker\n        for i in range(imax): # type: np.int32\n            # pragma: acc loop vector reduction(+: c[y][x])\n            for x in range(xmax): # type: np.int32\n                c[y, x] += a[y, i] * b[i, x]\n    # pragma: acc end parallel\n    ...\n    # pragma: omp parallel do\n    for i in range(input_data.size):  # type: int\n        # here we compute spam spam spam\n        heavy_compute(input_data[i])\n    ...\n\nAnd thus, in the example above:\n\n*   all comments starting with ``\" pragma: omp\"`` become ``OpenMpPragma`` objects,\n*   all comments starting with ``\" pragma: acc\"`` become ``OpenAccPragma`` objects,\n*   all other comments starting with ``\" pragma:\"`` become ``Pragma`` objects,\n*   type comments are ignored, and\n*   all other comments become ``Comment`` objects.\n\n\nAdditionally, horast module provides an extensible infrastructure to define\ncustom ``Pragma`` subclasses, enabling user to define their own pragmas for\nexperimentation. The provided OpenMP and OpenACC pragma definitions serve\nas examples of how to use this feature.\n\n\nInclude\n~~~~~~~\n\nSimilarly to how pragmas are handled, if a comment begins with ``\" include:\"``\nprefix, it will be classified as a special kind of include directive.\n\nAgain, this will be preserved as comment in Python code, but it's useful\nfor enhancing syntactic compatibility between Python and other, especially\nstatically compiled languages.\n\n\nrequirements\n------------\n\nCPython 3.5 or later.\n\nPython libraries as specified in `requirements.txt <https://github.com/mbdevpl/horast/blob/v0.4.0/requirements.txt>`_.\n\nBuilding and running tests additionally requires packages listed in `test_requirements.txt <https://github.com/mbdevpl/horast/blob/v0.4.0/test_requirements.txt>`_.\n\n\n", "description_content_type": "text/x-rst; charset=UTF-8", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mbdevpl/horast", "keywords": "abstract syntax tree,ast,comments,directives,parsing,readability,type hints,unparsing", "license": "Apache License 2.0", "maintainer": "Mateusz Bysiek", "maintainer_email": "mateusz.bysiek@gmail.com", "name": "horast", "package_url": "https://pypi.org/project/horast/", "platform": "", "project_url": "https://pypi.org/project/horast/", "project_urls": {"Homepage": "https://github.com/mbdevpl/horast"}, "release_url": "https://pypi.org/project/horast/0.4.0/", "requires_dist": ["asttokens (==1.*,>=1.1.13)", "static-typing (~=0.2.7)", "typed-ast (~=1.4)", "typed-astunparse (==2.*,>=2.1.4)", "version-query (==1.*,>=1.0.5)"], "requires_python": ">=3.5", "summary": "human-oriented ast parser/unparser", "version": "0.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Human-oriented abstract syntax tree (AST) parser/unparser for Python 3 that doesn\u2019t discard comments.</p>\n<a href=\"https://pypi.org/project/horast\" rel=\"nofollow\"><img alt=\"package version from PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2bf2bed7b65e20106b14fa3787ae937704992e65/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f686f726173742e737667\"></a>\n<a href=\"https://travis-ci.org/mbdevpl/horast\" rel=\"nofollow\"><img alt=\"build status from Travis CI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a937e9fca0a05e12737731733f7da4f164f77313/68747470733a2f2f7472617669732d63692e6f72672f6d62646576706c2f686f726173742e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://ci.appveyor.com/project/mbdevpl/horast\" rel=\"nofollow\"><img alt=\"build status from AppVeyor\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/378d908fa0c6e010b8a2975be5935111ee5d8f8a/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f6d62646576706c2f686f726173743f7376673d74727565\"></a>\n<a href=\"https://www.codacy.com/app/mbdevpl/horast\" rel=\"nofollow\"><img alt=\"grade from Codacy\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8a1dd0a9310f91810a5be4741db601c4d23ee294/68747470733a2f2f6170692e636f646163792e636f6d2f70726f6a6563742f62616467652f47726164652f3333313935303933626231623434386262396135333638623335303764363135\"></a>\n<a href=\"https://codecov.io/gh/mbdevpl/horast\" rel=\"nofollow\"><img alt=\"test coverage from Codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b3d0fc4e83d266c27e5a6933eae2af0960fc4f12/68747470733a2f2f636f6465636f762e696f2f67682f6d62646576706c2f686f726173742f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://github.com/mbdevpl/horast/blob/master/NOTICE\" rel=\"nofollow\"><img alt=\"license\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/61bbbe88774d6b8466e0f1bc68196a52e4d8c633/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f6d62646576706c2f686f726173742e737667\"></a>\n<p>This package provides new AST node types (Comment and Directive) which inherit from nodes in typed_ast.ast3 module.\nAdditionally, it provides implementation of parser and unparser for the extended AST allowing\nstraightforward readable code generation.</p>\n<p>Simple example of how to use this package:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">horast</span> <span class=\"kn\">import</span> <span class=\"n\">parse</span><span class=\"p\">,</span> <span class=\"n\">unparse</span>\n\n<span class=\"n\">tree</span> <span class=\"o\">=</span> <span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s2\">\"\"\"a = 1  # a equals one after this\"\"\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">unparse</span><span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"p\">))</span>\n<span class=\"c1\"># this will print the code with original comment</span>\n</pre>\n<p>More examples in <a href=\"https://github.com/mbdevpl/horast/blob/v0.4.0/examples.ipynb\" rel=\"nofollow\">examples.ipynb</a>.</p>\n<div id=\"technical-details\">\n<h2>technical details</h2>\n<p>Parser is based on built-in tokenize module, as well as community packages asttokens and typed_ast.</p>\n<p>Unparser is essentially an extension of Unparser class from static_typing package.</p>\n<p>Nodes provided and handled by horast are listed below.</p>\n<div id=\"comment\">\n<h3>Comment</h3>\n<p>Full line as well as end-of-line comments are parsed/unparsed correctly when they are outside\nof multi-line expressions.</p>\n<p>Currently, handling of comments within multi-line expressions is implemented only partially.</p>\n</div>\n<div id=\"blockcomment\">\n<h3>BlockComment</h3>\n<p><strong>Not implemented yet.</strong></p>\n<p>This node type is intended to store consecutive full-line comments in a\nsingle AST node, therefore simplifying handling of large blocks of comments.</p>\n</div>\n<div id=\"directive\">\n<h3>Directive</h3>\n<p>Since Python doesn\u2019t offer a direct way to convey directives in code,\ncomments beginning with any of the following prefixes will not be classified\nas typical comments, but as directives:</p>\n<ul>\n<li>if</li>\n<li>else</li>\n<li>endif</li>\n<li>def</li>\n<li>undef</li>\n<li>ifdef</li>\n<li>ifndef</li>\n</ul>\n<p>However in Python code they still remain as usual comments.</p>\n<p>For example, the comments in the following code will all be classified as directives.</p>\n<pre><span class=\"c1\">#ifdef DEBUG</span>\n<span class=\"n\">debugging</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n<span class=\"c1\">#else</span>\n<span class=\"n\">debugging</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n<span class=\"c1\">#fi</span>\n</pre>\n<p>However, when executed as Python, <tt>debugging</tt> will always end up <tt>False</tt>\nbecause directives are preserved as usual comments in Python and therefore\nthey are ignored.</p>\n<p>Therefore, the <tt>Directive</tt> node is not meant to enable preprocessing of\nPython, at least for now.</p>\n<p>Note: the prefix is checked exactly. See the following example:</p>\n<pre><span class=\"c1\">#if something</span>\n<span class=\"c1\"># if some other thing</span>\n</pre>\n<p>The comment in the first line will become <tt>Directive</tt> object, while the one\non the second like will become <tt>Comment</tt> object.</p>\n<p>Currently, this node is meant to work towards AST compatibility between\nPython and other languages, to aide code generation from Python AST into code\nin other languages \u2013 one such use case is\n<a href=\"https://github.com/mbdevpl/transpyle\" rel=\"nofollow\">*transpyle* project</a>.</p>\n</div>\n<div id=\"pragma\">\n<h3>Pragma</h3>\n<p><tt>Pragma</tt> nodes follow the same general rules as <tt>Directive</tt> nodes, i.e. they are\nstored in Python code as comments, but a comment will be classified as a pragma\nwhen it\u2019s prefixed with a predefined prefix:</p>\n<ul>\n<li><tt>\" pragma:\"</tt></li>\n</ul>\n<p>Additionally, two subclasses of Pragma are defined in horast, each with its\nown prefix that builds upon the generic pragma prefix:</p>\n<ul>\n<li><tt>OpenMpPragma</tt> class defines prefix <tt>\" pragma: omp\"</tt> and stores OpenMP pragmas.</li>\n<li><tt>OpenAccPragma</tt> class defines prefix <tt>\" pragma: acc\"</tt> and stores OpenACC pragmas.</li>\n</ul>\n<p>A code snippet below contains all 3 pragma types.</p>\n<pre><span class=\"c1\"># pragma: once</span>\n<span class=\"n\">use_openmp</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n<span class=\"n\">use_openacc</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n<span class=\"o\">...</span>\n<span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"c1\"># pragma: acc parallel copyin(a,b) copyout(c)</span>\n<span class=\"c1\"># pragma: acc loop gang</span>\n<span class=\"k\">for</span> <span class=\"n\">y</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">ymax</span><span class=\"p\">):</span> <span class=\"c1\"># type: np.int32</span>\n    <span class=\"c1\"># pragma: acc loop worker</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">imax</span><span class=\"p\">):</span> <span class=\"c1\"># type: np.int32</span>\n        <span class=\"c1\"># pragma: acc loop vector reduction(+: c[y][x])</span>\n        <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">xmax</span><span class=\"p\">):</span> <span class=\"c1\"># type: np.int32</span>\n            <span class=\"n\">c</span><span class=\"p\">[</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">b</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">]</span>\n<span class=\"c1\"># pragma: acc end parallel</span>\n<span class=\"o\">...</span>\n<span class=\"c1\"># pragma: omp parallel do</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">input_data</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">):</span>  <span class=\"c1\"># type: int</span>\n    <span class=\"c1\"># here we compute spam spam spam</span>\n    <span class=\"n\">heavy_compute</span><span class=\"p\">(</span><span class=\"n\">input_data</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span>\n<span class=\"o\">...</span>\n</pre>\n<p>And thus, in the example above:</p>\n<ul>\n<li>all comments starting with <tt>\" pragma: omp\"</tt> become <tt>OpenMpPragma</tt> objects,</li>\n<li>all comments starting with <tt>\" pragma: acc\"</tt> become <tt>OpenAccPragma</tt> objects,</li>\n<li>all other comments starting with <tt>\" pragma:\"</tt> become <tt>Pragma</tt> objects,</li>\n<li>type comments are ignored, and</li>\n<li>all other comments become <tt>Comment</tt> objects.</li>\n</ul>\n<p>Additionally, horast module provides an extensible infrastructure to define\ncustom <tt>Pragma</tt> subclasses, enabling user to define their own pragmas for\nexperimentation. The provided OpenMP and OpenACC pragma definitions serve\nas examples of how to use this feature.</p>\n</div>\n<div id=\"include\">\n<h3>Include</h3>\n<p>Similarly to how pragmas are handled, if a comment begins with <tt>\" include:\"</tt>\nprefix, it will be classified as a special kind of include directive.</p>\n<p>Again, this will be preserved as comment in Python code, but it\u2019s useful\nfor enhancing syntactic compatibility between Python and other, especially\nstatically compiled languages.</p>\n</div>\n</div>\n<div id=\"requirements\">\n<h2>requirements</h2>\n<p>CPython 3.5 or later.</p>\n<p>Python libraries as specified in <a href=\"https://github.com/mbdevpl/horast/blob/v0.4.0/requirements.txt\" rel=\"nofollow\">requirements.txt</a>.</p>\n<p>Building and running tests additionally requires packages listed in <a href=\"https://github.com/mbdevpl/horast/blob/v0.4.0/test_requirements.txt\" rel=\"nofollow\">test_requirements.txt</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 5734837, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "5f3618a019247bfa10c0233d4f0d9827", "sha256": "c7ee247213020bf0a05f7ffcf24fd8b872547f3f9b9b7c3ecce852b6b47d711e"}, "downloads": -1, "filename": "horast-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "5f3618a019247bfa10c0233d4f0d9827", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12893, "upload_time": "2017-08-30T00:33:27", "upload_time_iso_8601": "2017-08-30T00:33:27.248417Z", "url": "https://files.pythonhosted.org/packages/41/9c/b9cbbaed60331afbf424f1c6b1d6b6d5122b677f15038f664df8aff93bde/horast-0.1.0-py3-none-any.whl", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "6c32c6697bcad4a36d56d38e0a905bbc", "sha256": "5b66d9e9f36b72007dd4244646330d0e331fe322e08c1712fcb059c21fb18c6f"}, "downloads": -1, "filename": "horast-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6c32c6697bcad4a36d56d38e0a905bbc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 13429, "upload_time": "2017-10-17T09:35:13", "upload_time_iso_8601": "2017-10-17T09:35:13.206296Z", "url": "https://files.pythonhosted.org/packages/70/5c/3115090622a855886c639010bb47ad875f0e836204c1b067d404511a85cb/horast-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "38c3f226ca2124f8528872b3d8ddcd94", "sha256": "8ec80c441a89a385e08ab8ae8291bcaad5a376a193bb27fbf5c1ed012b882095"}, "downloads": -1, "filename": "horast-0.2.0.tar.gz", "has_sig": false, "md5_digest": "38c3f226ca2124f8528872b3d8ddcd94", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 20877, "upload_time": "2017-10-17T09:35:14", "upload_time_iso_8601": "2017-10-17T09:35:14.988198Z", "url": "https://files.pythonhosted.org/packages/5d/e9/aedc739ac5f52130075594de10809231ebddd16ed42d49d63a25a34da18c/horast-0.2.0.tar.gz", "yanked": false}], "0.2.0.dev1": [{"comment_text": "", "digests": {"md5": "e2832e8d832a731c946b7660a1ec0d23", "sha256": "2f75269867cd1e3487c23d9049e7163df84c45780d068b50e39c1a7b36a21ad3"}, "downloads": -1, "filename": "horast-0.2.0.dev1-py3-none-any.whl", "has_sig": false, "md5_digest": "e2832e8d832a731c946b7660a1ec0d23", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 14695, "upload_time": "2017-09-04T07:30:58", "upload_time_iso_8601": "2017-09-04T07:30:58.186515Z", "url": "https://files.pythonhosted.org/packages/d7/ae/8d943bca8db3e00d789c492a6bbabe169945ac5a26f33662c2beb4b29dd0/horast-0.2.0.dev1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0ba7aecf2f0e966895147f87abc376f2", "sha256": "7f4f9567e34c3ea9364146c8ebf7e5dcc680cd6324adf42b5d7ed5332e29b85b"}, "downloads": -1, "filename": "horast-0.2.0.dev1.tar.gz", "has_sig": false, "md5_digest": "0ba7aecf2f0e966895147f87abc376f2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 20944, "upload_time": "2017-09-04T07:31:16", "upload_time_iso_8601": "2017-09-04T07:31:16.088392Z", "url": "https://files.pythonhosted.org/packages/17/87/72f40b08a4f0f3ebc1af78124ce7fea6e109e13e1eea6a3dd197023dc021/horast-0.2.0.dev1.tar.gz", "yanked": false}], "0.2.0.dev2": [{"comment_text": "", "digests": {"md5": "5cf5ce6147b0bd1c82588fd8f58c28b5", "sha256": "b89dec34716f130564ba1153df7bde5b590c878fa69583118f5f83976c27c61b"}, "downloads": -1, "filename": "horast-0.2.0.dev2-py3-none-any.whl", "has_sig": false, "md5_digest": "5cf5ce6147b0bd1c82588fd8f58c28b5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 14956, "upload_time": "2017-09-15T16:13:42", "upload_time_iso_8601": "2017-09-15T16:13:42.734380Z", "url": "https://files.pythonhosted.org/packages/f6/29/247b3557fead466c6bac7b858501d4bd84ab11716bc321ef742431530416/horast-0.2.0.dev2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6f8ce6b4abb5c7975d8fcfa0411dc7f7", "sha256": "5f6f0d2c0a83e8e164ff34b29d02ac3c3606dea31852ea9a6fb6d059c8316e1f"}, "downloads": -1, "filename": "horast-0.2.0.dev2.tar.gz", "has_sig": false, "md5_digest": "6f8ce6b4abb5c7975d8fcfa0411dc7f7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 21305, "upload_time": "2017-09-15T16:14:03", "upload_time_iso_8601": "2017-09-15T16:14:03.993263Z", "url": "https://files.pythonhosted.org/packages/4f/cb/1861066b62d88e299a4dca2fdfa20d5ab9829dfb1c64c813e38cb1095a5b/horast-0.2.0.dev2.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "25a29573f12736bc766352ae581265a6", "sha256": "9d4c0f6d7d7ecc694ed005041dacb7ffc6ce0bf09d65bf2e3f89f9dc1c17d207"}, "downloads": -1, "filename": "horast-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "25a29573f12736bc766352ae581265a6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 13427, "upload_time": "2017-12-04T07:46:48", "upload_time_iso_8601": "2017-12-04T07:46:48.089455Z", "url": "https://files.pythonhosted.org/packages/f4/d4/ac894df8c4c653c3ffa0af27ae6126d51718d834ec14122c5202583fc1cd/horast-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8f0423c80e193fe99432339705435efa", "sha256": "03fa1d62471091b97b3d99ab2616c3fc37ba0b49bbb553fa7e62eb441ac7c69b"}, "downloads": -1, "filename": "horast-0.2.1.tar.gz", "has_sig": false, "md5_digest": "8f0423c80e193fe99432339705435efa", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 20878, "upload_time": "2017-12-04T07:46:49", "upload_time_iso_8601": "2017-12-04T07:46:49.242847Z", "url": "https://files.pythonhosted.org/packages/2a/17/4d92c39050d8a79843275a8c64188919d94fe28d61b90fc16ee267d7b1fe/horast-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "8deccefafc7d9df7a8fb4e2e96df0383", "sha256": "838b8dede5d2557dffcfec7d5d222d899637f96ebca71b2b2084d7de5fcdd9a3"}, "downloads": -1, "filename": "horast-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "8deccefafc7d9df7a8fb4e2e96df0383", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 13473, "upload_time": "2018-01-30T04:42:48", "upload_time_iso_8601": "2018-01-30T04:42:48.982512Z", "url": "https://files.pythonhosted.org/packages/c7/80/91608828c9d69b5ab0308ad29fc7a709227056ef6169db8461d19fcd1ffe/horast-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bdb1b4d2e36c0c10f5fd678aef60573e", "sha256": "fe24078f2c0e4ad0d3b3e5924b913f239dead3ce54808254e12fd18df34c73f0"}, "downloads": -1, "filename": "horast-0.2.2.tar.gz", "has_sig": false, "md5_digest": "bdb1b4d2e36c0c10f5fd678aef60573e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 19857, "upload_time": "2018-01-30T04:42:50", "upload_time_iso_8601": "2018-01-30T04:42:50.618868Z", "url": "https://files.pythonhosted.org/packages/1f/cf/e84299ff66915ac385b45ec5e4a03444410bc1fbbfb221ed9986259acd03/horast-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "bf42d68cc327f2c1b12c2f65442db32f", "sha256": "92d3b4b93c4ec9046a9b57d5b76403632ccfb9206c82331aca0c3c2a426ef63c"}, "downloads": -1, "filename": "horast-0.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "bf42d68cc327f2c1b12c2f65442db32f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 11455, "upload_time": "2018-05-02T07:05:12", "upload_time_iso_8601": "2018-05-02T07:05:12.399318Z", "url": "https://files.pythonhosted.org/packages/1f/7a/d316a294e99cff16cc75838e0df5cb267a266518dd669053d8aebea984ef/horast-0.2.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5e569bda03b54485fe5900725cb3d778", "sha256": "9fb8eb9f7f45a166b1daf37e7b82f718e907aca683de663f441c96ce68871805"}, "downloads": -1, "filename": "horast-0.2.3.tar.gz", "has_sig": false, "md5_digest": "5e569bda03b54485fe5900725cb3d778", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 22388, "upload_time": "2018-05-02T07:05:13", "upload_time_iso_8601": "2018-05-02T07:05:13.797256Z", "url": "https://files.pythonhosted.org/packages/31/7b/e100dd8324093bf8f4ed152d03ae75f9fc471d2c63b66b413439c95bf2f7/horast-0.2.3.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "f2d77e101bcd2b03ec154d58caa4a3dc", "sha256": "1c8101f6104c4b35ff20b2b708881f3de982816fa9db71d48ebb15d64a051c1e"}, "downloads": -1, "filename": "horast-0.2.4-py3-none-any.whl", "has_sig": false, "md5_digest": "f2d77e101bcd2b03ec154d58caa4a3dc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 16248, "upload_time": "2019-02-11T15:28:25", "upload_time_iso_8601": "2019-02-11T15:28:25.377500Z", "url": "https://files.pythonhosted.org/packages/7d/dc/8c06ad98c2fa30bc638655ec8fd40ee42f9f6592b43f2870ab9bef4694e8/horast-0.2.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fffe947e73528e16c903dd0a7b37b9c0", "sha256": "e3aa0575586b992ea2f7675baf5c3b54393b18b4da7a24909f4ed772a8b3d3d6"}, "downloads": -1, "filename": "horast-0.2.4.tar.gz", "has_sig": false, "md5_digest": "fffe947e73528e16c903dd0a7b37b9c0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 21589, "upload_time": "2019-02-11T15:28:26", "upload_time_iso_8601": "2019-02-11T15:28:26.863239Z", "url": "https://files.pythonhosted.org/packages/f6/41/d8fdc3e8e89e768dc951903b64595311c55b66101ba1a985070cec4ec61c/horast-0.2.4.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "9b00baf56a4437cdd6cba48f1bc2e14c", "sha256": "7314be9e3af52648c4ad3a601238d004da2b4e2a237cf580722740aebab02c4f"}, "downloads": -1, "filename": "horast-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "9b00baf56a4437cdd6cba48f1bc2e14c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 16631, "upload_time": "2019-06-14T13:51:53", "upload_time_iso_8601": "2019-06-14T13:51:53.273497Z", "url": "https://files.pythonhosted.org/packages/cc/2a/1f4fd709d788b003fd7ab039a4b3f555e997ad1adcefab5b8ad59ff97848/horast-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5c2f0570f932e9ec12bb45b56919e5db", "sha256": "0a8532d2cba905181ca1b9af39a8173d34aeec3aca02e2e967fd6949c913f7e5"}, "downloads": -1, "filename": "horast-0.3.0.tar.gz", "has_sig": false, "md5_digest": "5c2f0570f932e9ec12bb45b56919e5db", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 24568, "upload_time": "2019-06-14T13:51:55", "upload_time_iso_8601": "2019-06-14T13:51:55.317107Z", "url": "https://files.pythonhosted.org/packages/dd/77/d456b19569f8f45f0910d0cd1c438ef04143af9c1985941070c67ecf2d6a/horast-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "b3e17bccc9df5db82706a4815325d055", "sha256": "556d1671034e7ce3597ce2d7f36073d0dd9494c894f541dd469ca14cbcb1bcf1"}, "downloads": -1, "filename": "horast-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b3e17bccc9df5db82706a4815325d055", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 16783, "upload_time": "2019-07-25T07:46:14", "upload_time_iso_8601": "2019-07-25T07:46:14.409998Z", "url": "https://files.pythonhosted.org/packages/c8/bf/54bce9d8d743b90b26bcaa24dd140a4c7e0548bf8d3aefa33e71d8b6a77f/horast-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ec14a3954a13fa93762b4e84bbb30d96", "sha256": "ac308cea1feef116263875f6fc51a0cf3eb5306ba250c0ef24e0e97639f9a421"}, "downloads": -1, "filename": "horast-0.3.1.tar.gz", "has_sig": false, "md5_digest": "ec14a3954a13fa93762b4e84bbb30d96", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 23864, "upload_time": "2019-07-25T07:46:16", "upload_time_iso_8601": "2019-07-25T07:46:16.664331Z", "url": "https://files.pythonhosted.org/packages/91/5e/8c008ce77c409c1499b6f2eb66dab47cb1ba1a2c07f34c1f1e9169ac0b8d/horast-0.3.1.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "fa150eccc2fa19bfd51c26ce3f6f2eae", "sha256": "6fce724ca517417e757587b5c29cf240bc9008c3b454e16eae051f4fb9d46e88"}, "downloads": -1, "filename": "horast-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "fa150eccc2fa19bfd51c26ce3f6f2eae", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 19948, "upload_time": "2019-08-27T06:19:16", "upload_time_iso_8601": "2019-08-27T06:19:16.870615Z", "url": "https://files.pythonhosted.org/packages/87/20/6d6c73299737139996244ab1cd5807ff9a2cb5b6eec84c7775b246e12d7c/horast-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "070ee7127db4f07c869c3b8459ec73f8", "sha256": "a5d7b05006f38e627c9a57a56c36c04d97061fc3716bb360f6802da2e2f4285f"}, "downloads": -1, "filename": "horast-0.4.0.tar.gz", "has_sig": false, "md5_digest": "070ee7127db4f07c869c3b8459ec73f8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 29254, "upload_time": "2019-08-27T06:19:19", "upload_time_iso_8601": "2019-08-27T06:19:19.278533Z", "url": "https://files.pythonhosted.org/packages/b4/a2/7fbda8e22d3aa74fe6b04bf82ecea7a64e0b1a461904a4183f35d10c4fed/horast-0.4.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "fa150eccc2fa19bfd51c26ce3f6f2eae", "sha256": "6fce724ca517417e757587b5c29cf240bc9008c3b454e16eae051f4fb9d46e88"}, "downloads": -1, "filename": "horast-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "fa150eccc2fa19bfd51c26ce3f6f2eae", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 19948, "upload_time": "2019-08-27T06:19:16", "upload_time_iso_8601": "2019-08-27T06:19:16.870615Z", "url": "https://files.pythonhosted.org/packages/87/20/6d6c73299737139996244ab1cd5807ff9a2cb5b6eec84c7775b246e12d7c/horast-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "070ee7127db4f07c869c3b8459ec73f8", "sha256": "a5d7b05006f38e627c9a57a56c36c04d97061fc3716bb360f6802da2e2f4285f"}, "downloads": -1, "filename": "horast-0.4.0.tar.gz", "has_sig": false, "md5_digest": "070ee7127db4f07c869c3b8459ec73f8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 29254, "upload_time": "2019-08-27T06:19:19", "upload_time_iso_8601": "2019-08-27T06:19:19.278533Z", "url": "https://files.pythonhosted.org/packages/b4/a2/7fbda8e22d3aa74fe6b04bf82ecea7a64e0b1a461904a4183f35d10c4fed/horast-0.4.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:36 2020"}