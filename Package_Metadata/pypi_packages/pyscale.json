{"info": {"author": "Alexandru Cepoi", "author_email": "alex.cepoi@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "General purpose Python framework for writing highly scalable applications.\n\nAbout\n---------------------------------------------------\nA typical application consists of several modules. Each module has its own\nprocess, stores a pidfile in 'tmp/pids', and has a logfile in 'logs'.\n\nA RPC protocol is implemented on top of zeromq in order to allow for\ninter-module communication. Modules have an auto-adjustable number of workers\nin order to cope with a high number of requests. These rpc requests will block\nuntil that module becomes available.\nRead more about zeromq at http://zguide.zeromq.org/\n\nEach module consists of several gevent greenlets. A basic module will already\ncontain a few greenlets that handle incoming rpc requests. You can spawn\nadditional greenlets for your own needs.\nRead more about gevent at http://www.gevent.org/\n\n\nTasks\n---------------------------------------------------\nYou can manage and debug your modules using built-in tasks. Type 'cake' at a\nbash prompt when inside your project to see available tasks and what they do.\nYou can also define your own taks.\n\nCommands\n---------------------------------------------------\nTo create a new project:\n\n::\n\n  $ pyscale new <name>\n\nTo generate a new module:\n\n::\n\n  $ pyscale generate <name>\n\nTo start, stop, debug, view logs and more check out available cake tasks:\n\n::\n\n  $ cake\n  $ cake start\n  $ cake stop\n  $ cake status\n  $ cake log\n  $ cake console\n\nUsage\n---------------------------------------------------\nTo execute an rpc request on another module:\n\n::\n\n  self.sock('modname').method(*args, **kwargs)\n\nYou can also use properties, and chain requests:\n\n::\n\n  self.sock('modname').prop.method()\n\nYou can also issue requests on all available modules:\n\n::\n\n  self.multisock('*').method()\n\n\nTo spawn another greenlet in a module either use the 'job' decorator or:\n\n::\n\n  self.jobs.spawn(func)\n\nTo debug your application use logs and the console.\n\nRequirements\n---------------------------------------------------\nSystem Dependencies:\n * zeromq\n * atd\n\nPython Dependencies:\n * pyzmq\n * gevent\n * gevent_zeromq\n * cake\n * argparse\n * jinja2\n * nose", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/alexcepoi/pyscale/zipball/master", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/alexcepoi/pyscale", "keywords": null, "license": "GPLv3", "maintainer": null, "maintainer_email": null, "name": "pyscale", "package_url": "https://pypi.org/project/pyscale/", "platform": "linux", "project_url": "https://pypi.org/project/pyscale/", "project_urls": {"Download": "https://github.com/alexcepoi/pyscale/zipball/master", "Homepage": "https://github.com/alexcepoi/pyscale"}, "release_url": "https://pypi.org/project/pyscale/0.1.1/", "requires_dist": null, "requires_python": null, "summary": "General purpose Python framework for writing highly scalable applications", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>General purpose Python framework for writing highly scalable applications.</p>\n<div id=\"about\">\n<h2>About</h2>\n<p>A typical application consists of several modules. Each module has its own\nprocess, stores a pidfile in \u2018tmp/pids\u2019, and has a logfile in \u2018logs\u2019.</p>\n<p>A RPC protocol is implemented on top of zeromq in order to allow for\ninter-module communication. Modules have an auto-adjustable number of workers\nin order to cope with a high number of requests. These rpc requests will block\nuntil that module becomes available.\nRead more about zeromq at <a href=\"http://zguide.zeromq.org/\" rel=\"nofollow\">http://zguide.zeromq.org/</a></p>\n<p>Each module consists of several gevent greenlets. A basic module will already\ncontain a few greenlets that handle incoming rpc requests. You can spawn\nadditional greenlets for your own needs.\nRead more about gevent at <a href=\"http://www.gevent.org/\" rel=\"nofollow\">http://www.gevent.org/</a></p>\n</div>\n<div id=\"tasks\">\n<h2>Tasks</h2>\n<p>You can manage and debug your modules using built-in tasks. Type \u2018cake\u2019 at a\nbash prompt when inside your project to see available tasks and what they do.\nYou can also define your own taks.</p>\n</div>\n<div id=\"commands\">\n<h2>Commands</h2>\n<p>To create a new project:</p>\n<pre>$ pyscale new &lt;name&gt;\n</pre>\n<p>To generate a new module:</p>\n<pre>$ pyscale generate &lt;name&gt;\n</pre>\n<p>To start, stop, debug, view logs and more check out available cake tasks:</p>\n<pre>$ cake\n$ cake start\n$ cake stop\n$ cake status\n$ cake log\n$ cake console\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>To execute an rpc request on another module:</p>\n<pre>self.sock('modname').method(*args, **kwargs)\n</pre>\n<p>You can also use properties, and chain requests:</p>\n<pre>self.sock('modname').prop.method()\n</pre>\n<p>You can also issue requests on all available modules:</p>\n<pre>self.multisock('*').method()\n</pre>\n<p>To spawn another greenlet in a module either use the \u2018job\u2019 decorator or:</p>\n<pre>self.jobs.spawn(func)\n</pre>\n<p>To debug your application use logs and the console.</p>\n</div>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<dl>\n<dt>System Dependencies:</dt>\n<dd><ul>\n<li>zeromq</li>\n<li>atd</li>\n</ul>\n</dd>\n<dt>Python Dependencies:</dt>\n<dd><ul>\n<li>pyzmq</li>\n<li>gevent</li>\n<li>gevent_zeromq</li>\n<li>cake</li>\n<li>argparse</li>\n<li>jinja2</li>\n<li>nose</li>\n</ul>\n</dd>\n</dl>\n</div>\n\n          </div>"}, "last_serial": 797709, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "3e2c35e006b749078ca2a6e2197fa209", "sha256": "0c6c6e326c5015d0043f3dc5ba3da8d08dbb6769e56ca6e9b03eec7f41a19aa5"}, "downloads": -1, "filename": "pyscale-0.1.tar.gz", "has_sig": false, "md5_digest": "3e2c35e006b749078ca2a6e2197fa209", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15816, "upload_time": "2012-02-07T23:27:06", "upload_time_iso_8601": "2012-02-07T23:27:06.194116Z", "url": "https://files.pythonhosted.org/packages/c5/67/99c914ad47b91fa0549877135e51c4d6b2d60aab35f8739a65478c40ab8d/pyscale-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "4fe5a91e64ebfc959702d6366a667c79", "sha256": "4a7cd9ba3b489480795cd61161092c77d1fa13bea4f831b7294d23862d32fa44"}, "downloads": -1, "filename": "pyscale-0.1.1.tar.gz", "has_sig": false, "md5_digest": "4fe5a91e64ebfc959702d6366a667c79", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16337, "upload_time": "2012-02-09T23:39:10", "upload_time_iso_8601": "2012-02-09T23:39:10.254186Z", "url": "https://files.pythonhosted.org/packages/7f/0b/16ff80718621dce276999deec2c39743b78e533d138d82c4bfc64b63c4a6/pyscale-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4fe5a91e64ebfc959702d6366a667c79", "sha256": "4a7cd9ba3b489480795cd61161092c77d1fa13bea4f831b7294d23862d32fa44"}, "downloads": -1, "filename": "pyscale-0.1.1.tar.gz", "has_sig": false, "md5_digest": "4fe5a91e64ebfc959702d6366a667c79", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16337, "upload_time": "2012-02-09T23:39:10", "upload_time_iso_8601": "2012-02-09T23:39:10.254186Z", "url": "https://files.pythonhosted.org/packages/7f/0b/16ff80718621dce276999deec2c39743b78e533d138d82c4bfc64b63c4a6/pyscale-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:19 2020"}