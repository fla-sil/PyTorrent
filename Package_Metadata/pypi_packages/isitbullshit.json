{"info": {"author": "Sergey Arkhipov", "author_email": "serge@aerialsounds.org", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Testing"], "description": "isitbullshit\n============\n\n|Build Status| |Code Coverage| |Static Analysis| |PyPi Package|\n\n``isitbullshit`` is small and funny library which is intended to be used like lightweight schema verification for JSONs\nbut basically it could be used as a schema validator for every generic Python structure: dict, list, tuple etc. It is\nwritten to be pretty much Pythonic in a good sense: easy to use and very clean syntax but powerful enough to clean\nyour needs. But mostly for verification of incoming JSONs. Actually it is really stable and I am using it in several\nproduction projects, this is an excerpt because I really got tired of reinventing the wheel.\n\nYes, this is a wheel reinvention also but probably you will like it. Let me show the code.\n\n\n\nAn example\n----------\n\nOkay, let's say you are doing some backend for the library and you have to process JSONs like this:\n\n.. code-block:: javascript\n\n    {\n        \"model\": \"book_collection\",\n        \"pk\": 318,\n        \"fields\": {\n            \"books\": [\n                {\n                    \"model\": \"book\",\n                    \"pk\": 18,\n                    \"fields\": {\n                        \"title\": \"Jane Eyre\",\n                        \"author\": \"Charlotte Bront\u00eb\",\n                        \"isbn\": {\n                            \"10\": \"0142437204\",\n                            \"13\": \"978-0142437209\"\n                        },\n                        \"rate\": null,\n                        \"language\": \"English\",\n                        \"type\": \"paperback\",\n                        \"tags\": [\n                            \"Penguin Classics\",\n                            \"Classics\",\n                            \"Favorites\"\n                        ],\n                        \"published\": {\n                            \"publisher\": \"Penguin Books\",\n                            \"date\": {\n                                \"day\": 24,\n                                \"month\": 4,\n                                \"year\": 2003\n                            }\n                        }\n                    }\n                },\n                {\n                    \"model\": \"book\",\n                    \"pk\": 18,\n                    \"fields\": {\n                        \"title\": \"The Great Gatsby\",\n                        \"author\": \"F.Scott Fitzgerald\",\n                        \"isbn\": {\n                            \"10\": \"185326041X\",\n                            \"13\": \"978-1853260414\"\n                        },\n                        \"language\": \"English\",\n                        \"type\": \"paperback\",\n                        \"finished\": true,\n                        \"rate\": 4,\n                        \"tags\": [\n                            \"Wordsworth Classics\",\n                            \"Classics\",\n                            \"Favorites\"\n                        ],\n                        \"published\": {\n                            \"publisher\": \"Wordsworth Editions Ltd\",\n                            \"date\": {\n                                \"day\": 1,\n                                \"month\": 5,\n                                \"year\": 1992\n                            }\n                        }\n                    }\n                }\n            ]\n        }\n    }\n\nYou've got an idea, right? Pretty common and rather simple. Let's compose a schema and verify it.\n\n.. code-block:: python\n\n    from json import loads\n    from isitbullshit import isitbullshit, OrSkipped\n\n    def rate_validator(value):\n        if not (1 <= int(value) <= 5):\n            raise ValueError(\n                \"Value {} has to be from 1 till 5\".format(value)\n            )\n\n    data = loads(request)\n    schema = {\n        \"model\": str,\n        \"pk\": int,\n        \"fields\": {\n            \"books\": [\n                {\n                    \"model\": str,\n                    \"pk\": int,\n                    \"fields\": {\n                        \"title\": str,\n                        \"author\": str,\n                        \"isbn\": {\n                            \"10\": str,\n                            \"13\": str\n                        },\n                        \"language\": str,\n                        \"type\": (\"paperback\", \"kindle\"),\n                        \"finished\": OrSkipped(True),\n                        \"rate\": (rate_validator, None),\n                        \"tags\": [str],\n                        \"published\": {\n                            \"publisher\": str,\n                            \"date\": OrSkipped(\n                                {\n                                    \"day\": int,\n                                    \"month\": int,\n                                    \"year\": int\n                                }\n                            )\n                        }\n                    }\n                }\n            ]\n        }\n    }\n\n    if isitbullshit(data, schema):\n        raise Error400(\"Incoming request is not valid\")\n    process(data)\n\nPretty straightforward. Let me explain what is going on here.\n\n\n\nBasic concepts\n--------------\n\nisitbullshit was created to be used with JSONs and actively uses the fact that JSON perfectly matches to Python\ninternal data structures. Basic rule here: if elements are equal then they should be validated without any problems.\n\nSo if you have a code like\n\n.. code-block:: python\n\n    >>> suspicious = {\n    ...     \"foo\": 1,\n    ...     \"bar\": 2\n    ... }\n\nthen\n\n.. code-block:: python\n\n    >>> print isitbullshit(suspicious, suspicious)\n    False\n\nKeep this in mind.\n\nIf elements are equal then no additional validation steps have to be used. Otherwise it tries to match types and do\nsome explicit assertions.\n\nSo there are some rules.\n\n\n\nValue validation\n----------------\n\nValue validation is pretty straighforward: if values are the same or they are equal to each other (operation ``=``)\nthen validation has to be passed. So the rule is: if ``is`` or ``=`` works, then matching is successful.\n\n.. code-block:: python\n\n    >>> print isitbullshit(1, 1)\n    False\n    >>> print isitbullshit(1.0, 1.0)\n    False\n    >>> print isitbullshit(1.0, decimal.Decimal(\"1.0\"))\n    False\n    >>> print isitbullshit(None, None)\n    False\n    >>> obj = object()\n    >>> print isitbullshit(obj, obj)\n    False\n\n\nType validation\n---------------\n\nIf value validation is not passed then type validation is performed. The idea is: ``1`` is ``1``, right? But you will\nbe satisfied if you know that ``1`` is ``int`` as well, right?\n\nSo\n\n.. code-block:: python\n\n    >>> print isitbullshit(1, int)\n    False\n    >>> print isitbullshit(1.0, float)\n    False\n    >>> print isitbullshit(decimal.Decimal(\"1.0\"), decimal.Decimal)\n    False\n    >>> obj = object()\n    >>> print isitbullshit(obj, object)\n    False\n\n\n\nCustom validation\n-----------------\n\nLet's get back to an example. Have you mentioned that we have ``rate_validator`` function there? It is custom validator.\n\nIt works pretty simple: you define custom callable (function, lambda, class, etc) and ``isitbullshit`` gives it your\nvalue. If no exception is raised than we consider the value as successfully validated. So in our example if a ``rate``\nfield is not in (1, 5) interval or not integer then exception will be raised.\n\nCustom validators are used mostly in cases if you have to check a content or do not so shallow verifications.\n\nBut there is only one pitfall you may face with: **custom validators have to be a functions**. Basically, this is an\nobligatory rule and there are several reasons. Let's checkout the code:\n\n.. code-block:: python\n\n    >>> print isitbullshit(1, str)\n\nWhat do you expect to have as result? I guess ``True`` because integer is not an instance of the string type, right?\nBut wait a minute, in Python 2:\n\n.. code-block:: python\n\n    >>> type(str)\n    <type 'type'>\n\nand in Python 3\n\n.. code-block:: python\n\n    >>> type(str)\n    <class 'type'>\n\nSo they are types! They have the same type as, let's say, ``Exception`` or ``object``, right? But validation rules\nhave to be consistent so I am trying to keep absolutely the same behaviour to have it clean and predictable.\n\nWhat is the story? Here is the story:\n\n.. code-block:: python\n\n    >>> print str(1)\n    '1'\n\nSo to avoid such situations when ``isitbullshit(1, str) == False`` it is better to use functions. Functions are the most\nreasonable agreement I see here. So if you want to verify MongoDB's ObjectId's do the following:\n\n.. code-block:: python\n\n    >>> print isitbullshit(1, lambda value: bson.ObjectId(value))\n    True\n    >>> print isitbullshit(\"507c7f79bcf86cd7994f6c0e\", lambda value: bson.ObjectId(value))\n    False\n\nIt brings some clutter but at least you will not hike in the minefield.\n\n\n\nOrSkipped validator\n-------------------\n\nSometimes we live in a real world which sucks. Sometimes we have schemaless data (and it sucks of course) so some\nfields from your requests are missed. Or you do not care. ``isitbullshit`` has 2 different fixes for\nthat: ``OrSkipped`` and ``WHATEVER``.\n\nIf you wrap a part of your validator in ``OrSkipped`` than you mark that it is ok if this field would be absent.\nArgument is a validator of course. And if field is in place, it will be validated as expected.\n\n.. code-block:: python\n\n    >>> schema = {\n    ...     \"foo\": 1,\n    ...     \"bar\": OrSkipped(int),\n    ...     \"baz\": OrSkipped(str)\n    >>> }\n    >>> print isitbullshit({\"foo\": 1, \"bar\": 1}, schema)\n    False\n    >>> print isitbullshit({\"foo\": 1, \"bar\": \"str\"}, schema)\n    True\n    >>> print isitbullshit({\"foo\": 1, \"bar\": 1, \"baz\": 1}, schema)\n    True\n    >>> print isitbullshit({\"foo\": 1, \"bar\": 1, \"baz\": \"str\"}, schema)\n    False\n\nSo if we miss any field, it is ok. Unless it is presented and validator-argument point us to a bullshit.\n\n``OrSkipped`` has to be used only with dictionary field validation. You can put it anywhere but then it has no special\nmeaning, just an object.\n\nBy the way, type validation rule is still here: ``itisbullshit(something, something) == False`` anyway so the following\ncode is valid (and it is reasonable, right?)\n\n.. code-block:: python\n\n    >>> schema = {\n    ...     \"foo\": 1,\n    ...     \"bar\": OrSkipped(int),\n    ...     \"baz\": OrSkipped(str)\n    >>> }\n    >>> isitbullshit(schema, schema)\n    False\n    >>> stripped_schema = dict((k, v) for k, v in schema.iteritems() if k != \"baz\")\n    >>> isitbullshit(stripped_schema, schema)\n    False\n    >>> isitbullshit(schema, stripped_schema)\n    False\n\nGuess why.\n\n\n\nWHATEVER validator\n------------------\n\n``WHATEVER`` is a mark that you do not care what value is. It could be anything, nobody cares.\n\n.. code-block:: python\n\n    >>> schema = {\n    ...     \"foo\": 1,\n    ...     \"bar\": WHATEVER\n    >>> }\n    >>> print isitbullshit({\"foo\": 1, \"bar\": 1}, schema)\n    False\n    >>> print isitbullshit({\"foo\": 1, \"bar\": \"str\"}, schema)\n    False\n    >>> print isitbullshit({\"foo\": 1, \"bar\": object()}, schema)\n    False\n    >>> print isitbullshit({\"foo\": 1, \"bar\": os.path}, schema)\n    False\n    >>> print isitbullshit({\"foo\": 1, \"bar\": [1, 2, 3]}, schema)\n    False\n\nSee? We do not care about a value of a ``bar``.\n\n``WHATEVER`` could be used with any type.\n\n\nDict validation\n---------------\n\nYou've already seen a ``dict`` validation so let me repeat your assumptions: yes, we match values with the same keys.\nBut there is only one pitfall: if suspicious element has more fields than schema, then validation is ok also.\n\nIt has it's own meaning: we can put only those keys and fields we actually care about. Our software later will work\nonly with this subset so why should we care about the rest of rubbish?\n\nSo, an example again:\n\n.. code-block:: python\n\n    >>> schema = {\n    ...     \"foo\": 1,\n    ...     \"bar\": str\n    >>> }\n    >>> print isitbullshit({\"foo\": 1, \"bar\": \"st\"}, schema)\n    False\n    >>> print isitbullshit({\"foo\": 1, \"bar\": \"str\", \"baz\": 1}, schema)\n    False\n    >>> print isitbullshit({\"foo\": 1, \"bar\": \"str\", \"baz\": object()}, schema)\n    False\n\nAs you can see, we did not mention any ``baz`` in an element but validation still passed.\n\n\n\nList validation\n---------------\n\nList validation is pretty simple: we define one validator and it will be matched to any list element.\n\n.. code-block:: python\n\n    >>> print isitbullshit([1, 2, 3], [int])\n    False\n    >>> print isitbullshit([1, 2, 3], [str])\n    True\n    >>> print isitbullshit([1, 2, \"3\"], [int])\n    True\n\nIn the last example, ``\"3\"`` is not an integer so validation fails.\n\nHow could we manage situations when we have heterogeneous elements? We have to use tuples.\n\nAnd please remember that ``isitbullshit(something, something) == False``.\n\n\nTuple validation\n----------------\n\nTuple validation is pretty easy to understand if you consider it as an OR condition. We define several validators\nand and the value has to match at least one of them. So\n\n.. code-block:: python\n\n    >>> print isitbullshit(1, (str, dict))\n    True\n    >>> print isitbullshit(1, (str, int))\n    False\n\n``1`` is not ``str`` but it is ``int``.\n\nNow let's try to fix an example in the previous chapter.\n\n.. code-block:: python\n\n    >>> print isitbullshit([1, 2, \"3\"], [int])\n    True\n    >>> print isitbullshit([1, 2, \"3\"], [(int, str)])\n    False\n\nAnd again, do not forget about a rule of thumb: ``isitbullshit(something, something) == False``.\n\n\n\nraise_for_problem function\n--------------------------\n\nThis package also provides you with another method to validate, ``raise_for_problem`` actually this is a core method\nwhich raises an exception on a problem. ``isitbullshit`` allows you to get an idea what is happening in both Python2 and\nPython3, let's check an example.\n\n.. code-block:: python\n\n    >>> try:\n    ...     raise_for_problem({\"foo\": \"1\", \"bar\": {\"baz\": 2}}, {\"foo\": \"1\", \"bar\": {\"baz\": str}})\n    ... except ItIsBullshitError as err:\n    ...     print err\n    {'foo': '1', 'bar': {'baz': 2}}:\n        {'baz': 2}:\n            2: Scheme mismatch <type 'str'>\n\nQuite clear and nice. If you want just to extract a pure message lines, iterate ``ItIsBullshitError`` and\nyou are good.\n\n\n\nIsItBullshitMixin mixin\n-----------------------\n\n``isitbullshit`` also supplied with ``IsItBullshitMixin`` which is intended to be mixed with ``unittest.TestCase``. It\nallows you to use 2 additional methods:\n\n* ``assertBullshit``\n* ``assertNotBullshit``\n\nGuess what they do.\n\n.. code-block:: python\n\n    from unittest import TestCase\n    from isitbullshit import IsItBullshitMixin\n\n    class BullshitTestCase(IsIsBullshitMixin, TestCase):\n\n        def test_bullshit(self):\n            self.assertBullshit(1, None)\n\n        def test_not_bullshit(self):\n            self.assertNotBullshit(1, int)\n\n\n.. |Build Status| image:: https://travis-ci.org/9seconds/isitbullshit.svg?branch=master\n    :target: https://travis-ci.org/9seconds/isitbullshit\n\n.. |Code Coverage| image:: https://coveralls.io/repos/9seconds/isitbullshit/badge.png?branch=master\n    :target: https://coveralls.io/r/9seconds/isitbullshit?branch=master\n\n.. |Static Analysis| image:: https://landscape.io/github/9seconds/isitbullshit/master/landscape.png\n    :target: https://landscape.io/github/9seconds/isitbullshit/master\n\n.. |PyPi Package| image:: https://badge.fury.io/py/isitbullshit.svg\n    :target: http://badge.fury.io/py/isitbullshit", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/9seconds/isitbullshit/", "keywords": "json validation jsonschema", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "isitbullshit", "package_url": "https://pypi.org/project/isitbullshit/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/isitbullshit/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/9seconds/isitbullshit/"}, "release_url": "https://pypi.org/project/isitbullshit/0.2.1/", "requires_dist": null, "requires_python": null, "summary": "Small library for verifying parsed JSONs if they are bullshit or not", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/9seconds/isitbullshit\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/644ea61db98c846021f0c79cd3a1d76883c2bb79/68747470733a2f2f7472617669732d63692e6f72672f397365636f6e64732f6973697462756c6c736869742e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://coveralls.io/r/9seconds/isitbullshit?branch=master\" rel=\"nofollow\"><img alt=\"Code Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/20ff6253dd716df5f761041551f6564b7e4a0db7/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f397365636f6e64732f6973697462756c6c736869742f62616467652e706e673f6272616e63683d6d6173746572\"></a> <a href=\"https://landscape.io/github/9seconds/isitbullshit/master\" rel=\"nofollow\"><img alt=\"Static Analysis\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c519595b016c996a12af1eeb4ba53706b7a366d0/68747470733a2f2f6c616e6473636170652e696f2f6769746875622f397365636f6e64732f6973697462756c6c736869742f6d61737465722f6c616e6473636170652e706e67\"></a> <a href=\"http://badge.fury.io/py/isitbullshit\" rel=\"nofollow\"><img alt=\"PyPi Package\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/615747f63b7dc1975844df5eb81919cd71e95687/68747470733a2f2f62616467652e667572792e696f2f70792f6973697462756c6c736869742e737667\"></a></p>\n<p><tt>isitbullshit</tt> is small and funny library which is intended to be used like lightweight schema verification for JSONs\nbut basically it could be used as a schema validator for every generic Python structure: dict, list, tuple etc. It is\nwritten to be pretty much Pythonic in a good sense: easy to use and very clean syntax but powerful enough to clean\nyour needs. But mostly for verification of incoming JSONs. Actually it is really stable and I am using it in several\nproduction projects, this is an excerpt because I really got tired of reinventing the wheel.</p>\n<p>Yes, this is a wheel reinvention also but probably you will like it. Let me show the code.</p>\n<div id=\"an-example\">\n<h2>An example</h2>\n<p>Okay, let\u2019s say you are doing some backend for the library and you have to process JSONs like this:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"s2\">\"model\"</span><span class=\"o\">:</span> <span class=\"s2\">\"book_collection\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"pk\"</span><span class=\"o\">:</span> <span class=\"mi\">318</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"fields\"</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"books\"</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n            <span class=\"p\">{</span>\n                <span class=\"s2\">\"model\"</span><span class=\"o\">:</span> <span class=\"s2\">\"book\"</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"pk\"</span><span class=\"o\">:</span> <span class=\"mi\">18</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"fields\"</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n                    <span class=\"s2\">\"title\"</span><span class=\"o\">:</span> <span class=\"s2\">\"Jane Eyre\"</span><span class=\"p\">,</span>\n                    <span class=\"s2\">\"author\"</span><span class=\"o\">:</span> <span class=\"s2\">\"Charlotte Bront\u00eb\"</span><span class=\"p\">,</span>\n                    <span class=\"s2\">\"isbn\"</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n                        <span class=\"s2\">\"10\"</span><span class=\"o\">:</span> <span class=\"s2\">\"0142437204\"</span><span class=\"p\">,</span>\n                        <span class=\"s2\">\"13\"</span><span class=\"o\">:</span> <span class=\"s2\">\"978-0142437209\"</span>\n                    <span class=\"p\">},</span>\n                    <span class=\"s2\">\"rate\"</span><span class=\"o\">:</span> <span class=\"kc\">null</span><span class=\"p\">,</span>\n                    <span class=\"s2\">\"language\"</span><span class=\"o\">:</span> <span class=\"s2\">\"English\"</span><span class=\"p\">,</span>\n                    <span class=\"s2\">\"type\"</span><span class=\"o\">:</span> <span class=\"s2\">\"paperback\"</span><span class=\"p\">,</span>\n                    <span class=\"s2\">\"tags\"</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n                        <span class=\"s2\">\"Penguin Classics\"</span><span class=\"p\">,</span>\n                        <span class=\"s2\">\"Classics\"</span><span class=\"p\">,</span>\n                        <span class=\"s2\">\"Favorites\"</span>\n                    <span class=\"p\">],</span>\n                    <span class=\"s2\">\"published\"</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n                        <span class=\"s2\">\"publisher\"</span><span class=\"o\">:</span> <span class=\"s2\">\"Penguin Books\"</span><span class=\"p\">,</span>\n                        <span class=\"s2\">\"date\"</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n                            <span class=\"s2\">\"day\"</span><span class=\"o\">:</span> <span class=\"mi\">24</span><span class=\"p\">,</span>\n                            <span class=\"s2\">\"month\"</span><span class=\"o\">:</span> <span class=\"mi\">4</span><span class=\"p\">,</span>\n                            <span class=\"s2\">\"year\"</span><span class=\"o\">:</span> <span class=\"mi\">2003</span>\n                        <span class=\"p\">}</span>\n                    <span class=\"p\">}</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">},</span>\n            <span class=\"p\">{</span>\n                <span class=\"s2\">\"model\"</span><span class=\"o\">:</span> <span class=\"s2\">\"book\"</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"pk\"</span><span class=\"o\">:</span> <span class=\"mi\">18</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"fields\"</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n                    <span class=\"s2\">\"title\"</span><span class=\"o\">:</span> <span class=\"s2\">\"The Great Gatsby\"</span><span class=\"p\">,</span>\n                    <span class=\"s2\">\"author\"</span><span class=\"o\">:</span> <span class=\"s2\">\"F.Scott Fitzgerald\"</span><span class=\"p\">,</span>\n                    <span class=\"s2\">\"isbn\"</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n                        <span class=\"s2\">\"10\"</span><span class=\"o\">:</span> <span class=\"s2\">\"185326041X\"</span><span class=\"p\">,</span>\n                        <span class=\"s2\">\"13\"</span><span class=\"o\">:</span> <span class=\"s2\">\"978-1853260414\"</span>\n                    <span class=\"p\">},</span>\n                    <span class=\"s2\">\"language\"</span><span class=\"o\">:</span> <span class=\"s2\">\"English\"</span><span class=\"p\">,</span>\n                    <span class=\"s2\">\"type\"</span><span class=\"o\">:</span> <span class=\"s2\">\"paperback\"</span><span class=\"p\">,</span>\n                    <span class=\"s2\">\"finished\"</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n                    <span class=\"s2\">\"rate\"</span><span class=\"o\">:</span> <span class=\"mi\">4</span><span class=\"p\">,</span>\n                    <span class=\"s2\">\"tags\"</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n                        <span class=\"s2\">\"Wordsworth Classics\"</span><span class=\"p\">,</span>\n                        <span class=\"s2\">\"Classics\"</span><span class=\"p\">,</span>\n                        <span class=\"s2\">\"Favorites\"</span>\n                    <span class=\"p\">],</span>\n                    <span class=\"s2\">\"published\"</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n                        <span class=\"s2\">\"publisher\"</span><span class=\"o\">:</span> <span class=\"s2\">\"Wordsworth Editions Ltd\"</span><span class=\"p\">,</span>\n                        <span class=\"s2\">\"date\"</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n                            <span class=\"s2\">\"day\"</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n                            <span class=\"s2\">\"month\"</span><span class=\"o\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span>\n                            <span class=\"s2\">\"year\"</span><span class=\"o\">:</span> <span class=\"mi\">1992</span>\n                        <span class=\"p\">}</span>\n                    <span class=\"p\">}</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>You\u2019ve got an idea, right? Pretty common and rather simple. Let\u2019s compose a schema and verify it.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">json</span> <span class=\"kn\">import</span> <span class=\"n\">loads</span>\n<span class=\"kn\">from</span> <span class=\"nn\">isitbullshit</span> <span class=\"kn\">import</span> <span class=\"n\">isitbullshit</span><span class=\"p\">,</span> <span class=\"n\">OrSkipped</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">rate_validator</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">&lt;=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">5</span><span class=\"p\">):</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n            <span class=\"s2\">\"Value </span><span class=\"si\">{}</span><span class=\"s2\"> has to be from 1 till 5\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n<span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"model\"</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"pk\"</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"fields\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"books\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"p\">{</span>\n                <span class=\"s2\">\"model\"</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"pk\"</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"fields\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                    <span class=\"s2\">\"title\"</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>\n                    <span class=\"s2\">\"author\"</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>\n                    <span class=\"s2\">\"isbn\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                        <span class=\"s2\">\"10\"</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>\n                        <span class=\"s2\">\"13\"</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n                    <span class=\"p\">},</span>\n                    <span class=\"s2\">\"language\"</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>\n                    <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"s2\">\"paperback\"</span><span class=\"p\">,</span> <span class=\"s2\">\"kindle\"</span><span class=\"p\">),</span>\n                    <span class=\"s2\">\"finished\"</span><span class=\"p\">:</span> <span class=\"n\">OrSkipped</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">),</span>\n                    <span class=\"s2\">\"rate\"</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">rate_validator</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">),</span>\n                    <span class=\"s2\">\"tags\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span>\n                    <span class=\"s2\">\"published\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                        <span class=\"s2\">\"publisher\"</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>\n                        <span class=\"s2\">\"date\"</span><span class=\"p\">:</span> <span class=\"n\">OrSkipped</span><span class=\"p\">(</span>\n                            <span class=\"p\">{</span>\n                                <span class=\"s2\">\"day\"</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span>\n                                <span class=\"s2\">\"month\"</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span>\n                                <span class=\"s2\">\"year\"</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n                            <span class=\"p\">}</span>\n                        <span class=\"p\">)</span>\n                    <span class=\"p\">}</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">if</span> <span class=\"n\">isitbullshit</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">schema</span><span class=\"p\">):</span>\n    <span class=\"k\">raise</span> <span class=\"n\">Error400</span><span class=\"p\">(</span><span class=\"s2\">\"Incoming request is not valid\"</span><span class=\"p\">)</span>\n<span class=\"n\">process</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n</pre>\n<p>Pretty straightforward. Let me explain what is going on here.</p>\n</div>\n<div id=\"basic-concepts\">\n<h2>Basic concepts</h2>\n<p>isitbullshit was created to be used with JSONs and actively uses the fact that JSON perfectly matches to Python\ninternal data structures. Basic rule here: if elements are equal then they should be validated without any problems.</p>\n<p>So if you have a code like</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">suspicious</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n<span class=\"o\">...</span>     <span class=\"s2\">\"foo\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>     <span class=\"s2\">\"bar\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span>\n<span class=\"o\">...</span> <span class=\"p\">}</span>\n</pre>\n<p>then</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span> <span class=\"n\">isitbullshit</span><span class=\"p\">(</span><span class=\"n\">suspicious</span><span class=\"p\">,</span> <span class=\"n\">suspicious</span><span class=\"p\">)</span>\n<span class=\"kc\">False</span>\n</pre>\n<p>Keep this in mind.</p>\n<p>If elements are equal then no additional validation steps have to be used. Otherwise it tries to match types and do\nsome explicit assertions.</p>\n<p>So there are some rules.</p>\n</div>\n<div id=\"value-validation\">\n<h2>Value validation</h2>\n<p>Value validation is pretty straighforward: if values are the same or they are equal to each other (operation <tt>=</tt>)\nthen validation has to be passed. So the rule is: if <tt>is</tt> or <tt>=</tt> works, then matching is successful.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span> <span class=\"n\">isitbullshit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"kc\">False</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span> <span class=\"n\">isitbullshit</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">)</span>\n<span class=\"kc\">False</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span> <span class=\"n\">isitbullshit</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"n\">decimal</span><span class=\"o\">.</span><span class=\"n\">Decimal</span><span class=\"p\">(</span><span class=\"s2\">\"1.0\"</span><span class=\"p\">))</span>\n<span class=\"kc\">False</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span> <span class=\"n\">isitbullshit</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"kc\">False</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"nb\">object</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span> <span class=\"n\">isitbullshit</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">)</span>\n<span class=\"kc\">False</span>\n</pre>\n</div>\n<div id=\"type-validation\">\n<h2>Type validation</h2>\n<p>If value validation is not passed then type validation is performed. The idea is: <tt>1</tt> is <tt>1</tt>, right? But you will\nbe satisfied if you know that <tt>1</tt> is <tt>int</tt> as well, right?</p>\n<p>So</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span> <span class=\"n\">isitbullshit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">)</span>\n<span class=\"kc\">False</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span> <span class=\"n\">isitbullshit</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">)</span>\n<span class=\"kc\">False</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span> <span class=\"n\">isitbullshit</span><span class=\"p\">(</span><span class=\"n\">decimal</span><span class=\"o\">.</span><span class=\"n\">Decimal</span><span class=\"p\">(</span><span class=\"s2\">\"1.0\"</span><span class=\"p\">),</span> <span class=\"n\">decimal</span><span class=\"o\">.</span><span class=\"n\">Decimal</span><span class=\"p\">)</span>\n<span class=\"kc\">False</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"nb\">object</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span> <span class=\"n\">isitbullshit</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"nb\">object</span><span class=\"p\">)</span>\n<span class=\"kc\">False</span>\n</pre>\n</div>\n<div id=\"custom-validation\">\n<h2>Custom validation</h2>\n<p>Let\u2019s get back to an example. Have you mentioned that we have <tt>rate_validator</tt> function there? It is custom validator.</p>\n<p>It works pretty simple: you define custom callable (function, lambda, class, etc) and <tt>isitbullshit</tt> gives it your\nvalue. If no exception is raised than we consider the value as successfully validated. So in our example if a <tt>rate</tt>\nfield is not in (1, 5) interval or not integer then exception will be raised.</p>\n<p>Custom validators are used mostly in cases if you have to check a content or do not so shallow verifications.</p>\n<p>But there is only one pitfall you may face with: <strong>custom validators have to be a functions</strong>. Basically, this is an\nobligatory rule and there are several reasons. Let\u2019s checkout the code:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span> <span class=\"n\">isitbullshit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">)</span>\n</pre>\n<p>What do you expect to have as result? I guess <tt>True</tt> because integer is not an instance of the string type, right?\nBut wait a minute, in Python 2:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"nb\">type</span> <span class=\"s1\">'type'</span><span class=\"o\">&gt;</span>\n</pre>\n<p>and in Python 3</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"k\">class</span> <span class=\"err\">'</span><span class=\"nc\">type</span><span class=\"s1\">'&gt;</span>\n</pre>\n<p>So they are types! They have the same type as, let\u2019s say, <tt>Exception</tt> or <tt>object</tt>, right? But validation rules\nhave to be consistent so I am trying to keep absolutely the same behaviour to have it clean and predictable.</p>\n<p>What is the story? Here is the story:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"s1\">'1'</span>\n</pre>\n<p>So to avoid such situations when <tt>isitbullshit(1, str) == False</tt> it is better to use functions. Functions are the most\nreasonable agreement I see here. So if you want to verify MongoDB\u2019s ObjectId\u2019s do the following:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span> <span class=\"n\">isitbullshit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">bson</span><span class=\"o\">.</span><span class=\"n\">ObjectId</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">))</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span> <span class=\"n\">isitbullshit</span><span class=\"p\">(</span><span class=\"s2\">\"507c7f79bcf86cd7994f6c0e\"</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">bson</span><span class=\"o\">.</span><span class=\"n\">ObjectId</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">))</span>\n<span class=\"kc\">False</span>\n</pre>\n<p>It brings some clutter but at least you will not hike in the minefield.</p>\n</div>\n<div id=\"orskipped-validator\">\n<h2>OrSkipped validator</h2>\n<p>Sometimes we live in a real world which sucks. Sometimes we have schemaless data (and it sucks of course) so some\nfields from your requests are missed. Or you do not care. <tt>isitbullshit</tt> has 2 different fixes for\nthat: <tt>OrSkipped</tt> and <tt>WHATEVER</tt>.</p>\n<p>If you wrap a part of your validator in <tt>OrSkipped</tt> than you mark that it is ok if this field would be absent.\nArgument is a validator of course. And if field is in place, it will be validated as expected.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n<span class=\"o\">...</span>     <span class=\"s2\">\"foo\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>     <span class=\"s2\">\"bar\"</span><span class=\"p\">:</span> <span class=\"n\">OrSkipped</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">),</span>\n<span class=\"o\">...</span>     <span class=\"s2\">\"baz\"</span><span class=\"p\">:</span> <span class=\"n\">OrSkipped</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span> <span class=\"n\">isitbullshit</span><span class=\"p\">({</span><span class=\"s2\">\"foo\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s2\">\"bar\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">},</span> <span class=\"n\">schema</span><span class=\"p\">)</span>\n<span class=\"kc\">False</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span> <span class=\"n\">isitbullshit</span><span class=\"p\">({</span><span class=\"s2\">\"foo\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s2\">\"bar\"</span><span class=\"p\">:</span> <span class=\"s2\">\"str\"</span><span class=\"p\">},</span> <span class=\"n\">schema</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span> <span class=\"n\">isitbullshit</span><span class=\"p\">({</span><span class=\"s2\">\"foo\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s2\">\"bar\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s2\">\"baz\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">},</span> <span class=\"n\">schema</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span> <span class=\"n\">isitbullshit</span><span class=\"p\">({</span><span class=\"s2\">\"foo\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s2\">\"bar\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s2\">\"baz\"</span><span class=\"p\">:</span> <span class=\"s2\">\"str\"</span><span class=\"p\">},</span> <span class=\"n\">schema</span><span class=\"p\">)</span>\n<span class=\"kc\">False</span>\n</pre>\n<p>So if we miss any field, it is ok. Unless it is presented and validator-argument point us to a bullshit.</p>\n<p><tt>OrSkipped</tt> has to be used only with dictionary field validation. You can put it anywhere but then it has no special\nmeaning, just an object.</p>\n<p>By the way, type validation rule is still here: <tt>itisbullshit(something, something) == False</tt> anyway so the following\ncode is valid (and it is reasonable, right?)</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n<span class=\"o\">...</span>     <span class=\"s2\">\"foo\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>     <span class=\"s2\">\"bar\"</span><span class=\"p\">:</span> <span class=\"n\">OrSkipped</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">),</span>\n<span class=\"o\">...</span>     <span class=\"s2\">\"baz\"</span><span class=\"p\">:</span> <span class=\"n\">OrSkipped</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">isitbullshit</span><span class=\"p\">(</span><span class=\"n\">schema</span><span class=\"p\">,</span> <span class=\"n\">schema</span><span class=\"p\">)</span>\n<span class=\"kc\">False</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">stripped_schema</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">((</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">iteritems</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"n\">k</span> <span class=\"o\">!=</span> <span class=\"s2\">\"baz\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">isitbullshit</span><span class=\"p\">(</span><span class=\"n\">stripped_schema</span><span class=\"p\">,</span> <span class=\"n\">schema</span><span class=\"p\">)</span>\n<span class=\"kc\">False</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">isitbullshit</span><span class=\"p\">(</span><span class=\"n\">schema</span><span class=\"p\">,</span> <span class=\"n\">stripped_schema</span><span class=\"p\">)</span>\n<span class=\"kc\">False</span>\n</pre>\n<p>Guess why.</p>\n</div>\n<div id=\"whatever-validator\">\n<h2>WHATEVER validator</h2>\n<p><tt>WHATEVER</tt> is a mark that you do not care what value is. It could be anything, nobody cares.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n<span class=\"o\">...</span>     <span class=\"s2\">\"foo\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>     <span class=\"s2\">\"bar\"</span><span class=\"p\">:</span> <span class=\"n\">WHATEVER</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span> <span class=\"n\">isitbullshit</span><span class=\"p\">({</span><span class=\"s2\">\"foo\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s2\">\"bar\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">},</span> <span class=\"n\">schema</span><span class=\"p\">)</span>\n<span class=\"kc\">False</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span> <span class=\"n\">isitbullshit</span><span class=\"p\">({</span><span class=\"s2\">\"foo\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s2\">\"bar\"</span><span class=\"p\">:</span> <span class=\"s2\">\"str\"</span><span class=\"p\">},</span> <span class=\"n\">schema</span><span class=\"p\">)</span>\n<span class=\"kc\">False</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span> <span class=\"n\">isitbullshit</span><span class=\"p\">({</span><span class=\"s2\">\"foo\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s2\">\"bar\"</span><span class=\"p\">:</span> <span class=\"nb\">object</span><span class=\"p\">()},</span> <span class=\"n\">schema</span><span class=\"p\">)</span>\n<span class=\"kc\">False</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span> <span class=\"n\">isitbullshit</span><span class=\"p\">({</span><span class=\"s2\">\"foo\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s2\">\"bar\"</span><span class=\"p\">:</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">},</span> <span class=\"n\">schema</span><span class=\"p\">)</span>\n<span class=\"kc\">False</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span> <span class=\"n\">isitbullshit</span><span class=\"p\">({</span><span class=\"s2\">\"foo\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s2\">\"bar\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]},</span> <span class=\"n\">schema</span><span class=\"p\">)</span>\n<span class=\"kc\">False</span>\n</pre>\n<p>See? We do not care about a value of a <tt>bar</tt>.</p>\n<p><tt>WHATEVER</tt> could be used with any type.</p>\n</div>\n<div id=\"dict-validation\">\n<h2>Dict validation</h2>\n<p>You\u2019ve already seen a <tt>dict</tt> validation so let me repeat your assumptions: yes, we match values with the same keys.\nBut there is only one pitfall: if suspicious element has more fields than schema, then validation is ok also.</p>\n<p>It has it\u2019s own meaning: we can put only those keys and fields we actually care about. Our software later will work\nonly with this subset so why should we care about the rest of rubbish?</p>\n<p>So, an example again:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n<span class=\"o\">...</span>     <span class=\"s2\">\"foo\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>     <span class=\"s2\">\"bar\"</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span> <span class=\"n\">isitbullshit</span><span class=\"p\">({</span><span class=\"s2\">\"foo\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s2\">\"bar\"</span><span class=\"p\">:</span> <span class=\"s2\">\"st\"</span><span class=\"p\">},</span> <span class=\"n\">schema</span><span class=\"p\">)</span>\n<span class=\"kc\">False</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span> <span class=\"n\">isitbullshit</span><span class=\"p\">({</span><span class=\"s2\">\"foo\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s2\">\"bar\"</span><span class=\"p\">:</span> <span class=\"s2\">\"str\"</span><span class=\"p\">,</span> <span class=\"s2\">\"baz\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">},</span> <span class=\"n\">schema</span><span class=\"p\">)</span>\n<span class=\"kc\">False</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span> <span class=\"n\">isitbullshit</span><span class=\"p\">({</span><span class=\"s2\">\"foo\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s2\">\"bar\"</span><span class=\"p\">:</span> <span class=\"s2\">\"str\"</span><span class=\"p\">,</span> <span class=\"s2\">\"baz\"</span><span class=\"p\">:</span> <span class=\"nb\">object</span><span class=\"p\">()},</span> <span class=\"n\">schema</span><span class=\"p\">)</span>\n<span class=\"kc\">False</span>\n</pre>\n<p>As you can see, we did not mention any <tt>baz</tt> in an element but validation still passed.</p>\n</div>\n<div id=\"list-validation\">\n<h2>List validation</h2>\n<p>List validation is pretty simple: we define one validator and it will be matched to any list element.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span> <span class=\"n\">isitbullshit</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">])</span>\n<span class=\"kc\">False</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span> <span class=\"n\">isitbullshit</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">])</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span> <span class=\"n\">isitbullshit</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s2\">\"3\"</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">])</span>\n<span class=\"kc\">True</span>\n</pre>\n<p>In the last example, <tt>\"3\"</tt> is not an integer so validation fails.</p>\n<p>How could we manage situations when we have heterogeneous elements? We have to use tuples.</p>\n<p>And please remember that <tt>isitbullshit(something, something) == False</tt>.</p>\n</div>\n<div id=\"tuple-validation\">\n<h2>Tuple validation</h2>\n<p>Tuple validation is pretty easy to understand if you consider it as an OR condition. We define several validators\nand and the value has to match at least one of them. So</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span> <span class=\"n\">isitbullshit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">))</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span> <span class=\"n\">isitbullshit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">))</span>\n<span class=\"kc\">False</span>\n</pre>\n<p><tt>1</tt> is not <tt>str</tt> but it is <tt>int</tt>.</p>\n<p>Now let\u2019s try to fix an example in the previous chapter.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span> <span class=\"n\">isitbullshit</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s2\">\"3\"</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">])</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span> <span class=\"n\">isitbullshit</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s2\">\"3\"</span><span class=\"p\">],</span> <span class=\"p\">[(</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">)])</span>\n<span class=\"kc\">False</span>\n</pre>\n<p>And again, do not forget about a rule of thumb: <tt>isitbullshit(something, something) == False</tt>.</p>\n</div>\n<div id=\"raise-for-problem-function\">\n<h2>raise_for_problem function</h2>\n<p>This package also provides you with another method to validate, <tt>raise_for_problem</tt> actually this is a core method\nwhich raises an exception on a problem. <tt>isitbullshit</tt> allows you to get an idea what is happening in both Python2 and\nPython3, let\u2019s check an example.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">try</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"n\">raise_for_problem</span><span class=\"p\">({</span><span class=\"s2\">\"foo\"</span><span class=\"p\">:</span> <span class=\"s2\">\"1\"</span><span class=\"p\">,</span> <span class=\"s2\">\"bar\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"baz\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">}},</span> <span class=\"p\">{</span><span class=\"s2\">\"foo\"</span><span class=\"p\">:</span> <span class=\"s2\">\"1\"</span><span class=\"p\">,</span> <span class=\"s2\">\"bar\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"baz\"</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">}})</span>\n<span class=\"o\">...</span> <span class=\"k\">except</span> <span class=\"n\">ItIsBullshitError</span> <span class=\"k\">as</span> <span class=\"n\">err</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"nb\">print</span> <span class=\"n\">err</span>\n<span class=\"p\">{</span><span class=\"s1\">'foo'</span><span class=\"p\">:</span> <span class=\"s1\">'1'</span><span class=\"p\">,</span> <span class=\"s1\">'bar'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'baz'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">}}:</span>\n    <span class=\"p\">{</span><span class=\"s1\">'baz'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">}:</span>\n        <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"n\">Scheme</span> <span class=\"n\">mismatch</span> <span class=\"o\">&lt;</span><span class=\"nb\">type</span> <span class=\"s1\">'str'</span><span class=\"o\">&gt;</span>\n</pre>\n<p>Quite clear and nice. If you want just to extract a pure message lines, iterate <tt>ItIsBullshitError</tt> and\nyou are good.</p>\n</div>\n<div id=\"isitbullshitmixin-mixin\">\n<h2>IsItBullshitMixin mixin</h2>\n<p><tt>isitbullshit</tt> also supplied with <tt>IsItBullshitMixin</tt> which is intended to be mixed with <tt>unittest.TestCase</tt>. It\nallows you to use 2 additional methods:</p>\n<ul>\n<li><tt>assertBullshit</tt></li>\n<li><tt>assertNotBullshit</tt></li>\n</ul>\n<p>Guess what they do.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">unittest</span> <span class=\"kn\">import</span> <span class=\"n\">TestCase</span>\n<span class=\"kn\">from</span> <span class=\"nn\">isitbullshit</span> <span class=\"kn\">import</span> <span class=\"n\">IsItBullshitMixin</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">BullshitTestCase</span><span class=\"p\">(</span><span class=\"n\">IsIsBullshitMixin</span><span class=\"p\">,</span> <span class=\"n\">TestCase</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">test_bullshit</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertBullshit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">test_not_bullshit</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertNotBullshit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">)</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 1203259, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "0b2bf370223e0f436fc7c15b3232016d", "sha256": "4546dd98f2fe6a9940278d56f077f02b145d436a589ae6202fc382d9b914c6e5"}, "downloads": -1, "filename": "isitbullshit-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0b2bf370223e0f436fc7c15b3232016d", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 13560, "upload_time": "2014-08-21T03:34:04", "upload_time_iso_8601": "2014-08-21T03:34:04.601036Z", "url": "https://files.pythonhosted.org/packages/dc/99/e80489bb36bb32e7fb7142d7373d36e3f31267b5677e794f7a89624c5809/isitbullshit-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ad0dc18e97e39cce98271d6ed485e921", "sha256": "8bd60936091ea430b235dfc43bea9da8ce233ceae42f1607af17078eaabe6e49"}, "downloads": -1, "filename": "isitbullshit-0.2.0.tar.gz", "has_sig": false, "md5_digest": "ad0dc18e97e39cce98271d6ed485e921", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11364, "upload_time": "2014-08-21T03:33:53", "upload_time_iso_8601": "2014-08-21T03:33:53.541868Z", "url": "https://files.pythonhosted.org/packages/8d/22/e907316bcfa3d59f40a6fad91ac9524146789ebca83092352fdddff570b5/isitbullshit-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "c76eb0aa701e71bd0727609fd8e3128a", "sha256": "f4a520de667632fd7a8543777bc9c09eb8555a9a130b02565837b9704f056f59"}, "downloads": -1, "filename": "isitbullshit-0.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c76eb0aa701e71bd0727609fd8e3128a", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 14494, "upload_time": "2014-08-26T18:36:29", "upload_time_iso_8601": "2014-08-26T18:36:29.223085Z", "url": "https://files.pythonhosted.org/packages/62/38/6c8e2e71236ef1d02ce29bce823234cfa0869a6600f98a273543f77aa5e5/isitbullshit-0.2.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "46516f5e3393d990bb0486f93fdb0746", "sha256": "82249591f378801394e34ed7cd79b6e79b12eab9fcde4398b378a23fcf165b8e"}, "downloads": -1, "filename": "isitbullshit-0.2.1.tar.gz", "has_sig": false, "md5_digest": "46516f5e3393d990bb0486f93fdb0746", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13668, "upload_time": "2014-08-26T18:36:25", "upload_time_iso_8601": "2014-08-26T18:36:25.675659Z", "url": "https://files.pythonhosted.org/packages/d0/02/9c893669d4e0ca3247417eb1e70184e20ba0388213f719dfa084cf00f184/isitbullshit-0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c76eb0aa701e71bd0727609fd8e3128a", "sha256": "f4a520de667632fd7a8543777bc9c09eb8555a9a130b02565837b9704f056f59"}, "downloads": -1, "filename": "isitbullshit-0.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c76eb0aa701e71bd0727609fd8e3128a", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 14494, "upload_time": "2014-08-26T18:36:29", "upload_time_iso_8601": "2014-08-26T18:36:29.223085Z", "url": "https://files.pythonhosted.org/packages/62/38/6c8e2e71236ef1d02ce29bce823234cfa0869a6600f98a273543f77aa5e5/isitbullshit-0.2.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "46516f5e3393d990bb0486f93fdb0746", "sha256": "82249591f378801394e34ed7cd79b6e79b12eab9fcde4398b378a23fcf165b8e"}, "downloads": -1, "filename": "isitbullshit-0.2.1.tar.gz", "has_sig": false, "md5_digest": "46516f5e3393d990bb0486f93fdb0746", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13668, "upload_time": "2014-08-26T18:36:25", "upload_time_iso_8601": "2014-08-26T18:36:25.675659Z", "url": "https://files.pythonhosted.org/packages/d0/02/9c893669d4e0ca3247417eb1e70184e20ba0388213f719dfa084cf00f184/isitbullshit-0.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:04 2020"}