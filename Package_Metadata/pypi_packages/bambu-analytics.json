{"info": {"author": "Steadman", "author_email": "mark@steadman.io", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Django"], "description": "Bambu Analytics\n===============\n\nProvides a simple, pluggable system for analytics\n\nAbout Bambu Analytics\n---------------------\n\nBambu Analytics provides a simple system for implementing analytics\ntools like Google Analytics into your Django projects, so you can track\npage views, goals and events.\n\nBy default it supports Google's `Universal\nAnalytics <https://support.google.com/analytics/answer/2790010?hl=en-GB>`_\nprogramme, but you interact with the package within JavaScript via the\n``bambu.analytics`` namespace. This way, you can change analytics\nproviders (or write your own) without changing the code within the rest\nof your site.\n\nThis is massively a work-in-progress.\n\nAbout Bambu Tools 2.0\n---------------------\n\nThis is part of a toolset called Bambu Tools. It's being moved from a\nnamespace of ``bambu`` to its own 'root-level' package, along with all\nthe other tools in the set. If you're upgrading from a version prior to\n2.0, please make sure to update your code to use ``bambu_analytics``\nrather than ``bambu.analytics``.\n\nInstallation\n------------\n\nInstall the package via Pip:\n\n::\n\n    pip install bambu-analytics\n\nAdd it to your ``INSTALLED_APPS`` list:\n\n::\n\n    INSTALLED_APPS = (\n        ...\n        'bambu_analytics'\n    )\n\nNext, install the tracking middleware:\n\n::\n\n    MIDDLEWARE_CLASSES = (\n        ...\n        'bambu_analytics.middleware.AnalyticsMiddleware',\n        ...\n    )\n\nFinally, set your Google Analytics ID:\n\n::\n\n    ANALYTICS_SETTINGS = {\n        'UniversalAnalyticsProvider': {\n            'ID': 'UA-XXXXXXXX-XX'\n        }\n    }\n\nOr, use the shortcut setting:\n\n::\n\n    GOOGLE_ANALYTICS_IDS = ('UA-XXXXXXXX-XX',)\n\n(This is a legacy setting that will be deprecated in a future release)\n\nUsage\n-----\n\nBy default, all page views will be tracked once you include the\n``tracking`` template tag in your base HTML template, like so:\n\n::\n\n    <!DOCTYPE html>\n    <html>\n        ...\n        <body>\n            ...\n            {% load analytics %}{% tracking %}\n        </body>\n    </html>\n\nTracking events are gathered by the middleware, as it allows trackable\nevents to be defined server-side. For example, when you submit an\nenquiry form, you can add an event that will be tracked once the user is\nredirected to the 'thank you' page.\n\nThe workflow\n------------\n\n1. The user requests a URL\n2. The analytics middleware adds a page-view event to its tracking list\n3. The view for that URL is rendered, and the script containing the\n   analytics setup code and the tracked event from step 2 is rendered\n4. The user submits a form on the page\n5. The view for that form calls ``bambu_analytics.track_event``\n6. An HTTP redirect is issued\n7. The middleware reads the redirect and stores the tracking event in a\n   session variable\n8. The user's browser is redirected to a 'thank you' page\n9. When the 'thank you' page is rendered, the tracking event stored in\n   the session variable are read into JavaScript and rendered\n\nAll of this sounds complex, but actually means you can track events more\neasily and in a pluggable, product-agnostic way. It also provides the\noption for server-side analytics events to be tracked.\n\nIn Google Analytics, the practical upshot is that it uses events rather\nthan goals, meaning you don't have to manually define them in your\nAnalytics property.\n\nTracking an event\n-----------------\n\nLet's say you have a contact form. In the view that receives the form\ndata, you want to track the successful submission of form data and then\nredirect the user to a page thanking them for getting in touch.\n\n::\n\n    from bambu_analytics import track_event, events\n\n    def enquiry_form(request):\n        # Handle submission of form data\n\n        track_event(request, events.EVENT,\n            category = u'Enquiry',\n            action = u'Submit'\n        )\n\nHere, ``events.EVENT`` is a constant meaning 'a standard event'.\n\nIf you're using a client-side analytics library (like Google Analytics),\nyou should only track events in this way if you're going to redirect the\nuser back to a page that will load and render the ``tracking`` template\ntag. Otherwise the event will be stored in the user's session cookie,\nbut won't be tracked by your provider.\n\nIf you're using a server-side provider - or you've written one, a:\nplease let me know! but b: - this method should work fine.\n\nTrackable events\n----------------\n\nThere are four types of trackable event within Bambu Analytics, but not\nall of them are setup to work with Google's Universal Analytics just\nyet.\n\n-  ``events.PAGE``: a page view (this is handled automatically by\n   middleware)\n-  ``events.EVENT``: something of note happening on the site, that you\n   want to measure\n-  ``events.TRANSACTION``: a monetary transaction\n-  ``events.TRANSACTION_ITEM``: part of an order (an item in someone's\n   shopping cart)\n\nThe last two haven't been properly hooked up to Google's new system, but\nyou can use the legacy provider (see below).\n\nChanging analytics provider\n---------------------------\n\nBambu Analytics supports the legacy (ua.js) and new (analytics.js)\nscripts as provided by Google. ecommerce is setup to work with the old\nstyle (ua.js), so if you need to track ecommerce events, you should\nchange the provider via your Django settings file:\n\n::\n\n    ANALYTICS_PROVIDER = 'bambu_analytics.providers.google.GoogleAnalyticsProvider'\n\nWriting your own provider\n-------------------------\n\nIt's pretty easy to write your own provider. Start by taking a look at\nthe two classes in ``bambu_analytics.providers.google`` to see how\nthey're hooked up.\n\nEssentially the job of a provider is to take Python objects that refer\nto events and turn them into JavaScript objects and function calls that\nyour analytics library can understand.\n\nEach provider needs to render a string. For client-side analytics tools\nthis should contain HTML with a ``<script>`` tag. The first thing inside\nthat tag should be:\n\n::\n\n    {% include 'analytics/bambu.inc.js' %}\n\nThis exposes the ``bambu.analytics`` namespace. After all the code\nneeded to hook up the analytics tool and track basic events, your\nprovider should bind to the ``track`` event within ``bambu.analytics``\nlike this:\n\n::\n\n    bambu.analytics.on('track',\n        function(e) {\n            // e.event contains the name of the event, which you can compare\n            // against the constants in the bambu.analytics namespace (they're)\n            // the same as the ones within the Python package.\n\n            // e.args contains a dictionary of arguments that you can use to map\n            // the Python-defined keyword args (like 'category' or 'option_value')\n            // to arguments that your specific analytics library understands. See\n            // the templates/analytics/universal.inc.html file for an idea of\n            // how this works.\n        }\n    );\n\nThis way you can write an analytics provider that works on all sites\nthat use Bambu Analytics. Both of them!\n\nWriting a server-side provider\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf you want to track your own events or you have a server-side analytics\ntool that you want to hook into, you'll write a provider that focuses on\nteh back- rather than front-end. You'll still need to render something,\nbut this can be an empty string, or some sort of tracking pixel if\nthat's the route you want to go down.\n\nAJAX and client-side tracking\n-----------------------------\n\nIf you want to track events client-side, or you're running a site that\nuses a lot of AJAX (like `Poddle.fm <http://poddle.fm/>`_), you'll get\nautomatic access to the ``bambu.analytics`` namespace within JavaScript,\nand you can call ``track()`` to handle client-side events or AJAX page\nupdates (ie: via ``window.pushstate``).\n\nHere's an example event used on Poddle.fm when a user clicks the Play\nbutton on an episode of a podcast:\n\n::\n\n    <script>\n        $('a.btn-play').on('click',\n            function() {\n                // Play the audio\n                ...\n\n                // Track the click event\n                bambu.analytics.track(\n                    bambu.analytics.EVENT,\n                    {\n                        category: 'Audio',\n                        action: 'play'\n                    }\n                );\n            }\n        );\n    </script>\n\nTodo\n----\n\n-  Implement ecommerce into the Universal Analytics provider\n\nQuestions or suggestions?\n-------------------------\n\nFind me on Twitter (@iamsteadman) or `visit my blog <http://steadman.io/>`_.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/iamsteadman/bambu-analytics", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "bambu-analytics", "package_url": "https://pypi.org/project/bambu-analytics/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/bambu-analytics/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/iamsteadman/bambu-analytics"}, "release_url": "https://pypi.org/project/bambu-analytics/2.0.1/", "requires_dist": null, "requires_python": null, "summary": "Provides a simple, pluggable system for analytics in Django", "version": "2.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Provides a simple, pluggable system for analytics</p>\n<div id=\"about-bambu-analytics\">\n<h2>About Bambu Analytics</h2>\n<p>Bambu Analytics provides a simple system for implementing analytics\ntools like Google Analytics into your Django projects, so you can track\npage views, goals and events.</p>\n<p>By default it supports Google\u2019s <a href=\"https://support.google.com/analytics/answer/2790010?hl=en-GB\" rel=\"nofollow\">Universal\nAnalytics</a>\nprogramme, but you interact with the package within JavaScript via the\n<tt>bambu.analytics</tt> namespace. This way, you can change analytics\nproviders (or write your own) without changing the code within the rest\nof your site.</p>\n<p>This is massively a work-in-progress.</p>\n</div>\n<div id=\"about-bambu-tools-2-0\">\n<h2>About Bambu Tools 2.0</h2>\n<p>This is part of a toolset called Bambu Tools. It\u2019s being moved from a\nnamespace of <tt>bambu</tt> to its own \u2018root-level\u2019 package, along with all\nthe other tools in the set. If you\u2019re upgrading from a version prior to\n2.0, please make sure to update your code to use <tt>bambu_analytics</tt>\nrather than <tt>bambu.analytics</tt>.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Install the package via Pip:</p>\n<pre>pip install bambu-analytics\n</pre>\n<p>Add it to your <tt>INSTALLED_APPS</tt> list:</p>\n<pre>INSTALLED_APPS = (\n    ...\n    'bambu_analytics'\n)\n</pre>\n<p>Next, install the tracking middleware:</p>\n<pre>MIDDLEWARE_CLASSES = (\n    ...\n    'bambu_analytics.middleware.AnalyticsMiddleware',\n    ...\n)\n</pre>\n<p>Finally, set your Google Analytics ID:</p>\n<pre>ANALYTICS_SETTINGS = {\n    'UniversalAnalyticsProvider': {\n        'ID': 'UA-XXXXXXXX-XX'\n    }\n}\n</pre>\n<p>Or, use the shortcut setting:</p>\n<pre>GOOGLE_ANALYTICS_IDS = ('UA-XXXXXXXX-XX',)\n</pre>\n<p>(This is a legacy setting that will be deprecated in a future release)</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>By default, all page views will be tracked once you include the\n<tt>tracking</tt> template tag in your base HTML template, like so:</p>\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    ...\n    &lt;body&gt;\n        ...\n        {% load analytics %}{% tracking %}\n    &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<p>Tracking events are gathered by the middleware, as it allows trackable\nevents to be defined server-side. For example, when you submit an\nenquiry form, you can add an event that will be tracked once the user is\nredirected to the \u2018thank you\u2019 page.</p>\n</div>\n<div id=\"the-workflow\">\n<h2>The workflow</h2>\n<ol>\n<li>The user requests a URL</li>\n<li>The analytics middleware adds a page-view event to its tracking list</li>\n<li>The view for that URL is rendered, and the script containing the\nanalytics setup code and the tracked event from step 2 is rendered</li>\n<li>The user submits a form on the page</li>\n<li>The view for that form calls <tt>bambu_analytics.track_event</tt></li>\n<li>An HTTP redirect is issued</li>\n<li>The middleware reads the redirect and stores the tracking event in a\nsession variable</li>\n<li>The user\u2019s browser is redirected to a \u2018thank you\u2019 page</li>\n<li>When the \u2018thank you\u2019 page is rendered, the tracking event stored in\nthe session variable are read into JavaScript and rendered</li>\n</ol>\n<p>All of this sounds complex, but actually means you can track events more\neasily and in a pluggable, product-agnostic way. It also provides the\noption for server-side analytics events to be tracked.</p>\n<p>In Google Analytics, the practical upshot is that it uses events rather\nthan goals, meaning you don\u2019t have to manually define them in your\nAnalytics property.</p>\n</div>\n<div id=\"tracking-an-event\">\n<h2>Tracking an event</h2>\n<p>Let\u2019s say you have a contact form. In the view that receives the form\ndata, you want to track the successful submission of form data and then\nredirect the user to a page thanking them for getting in touch.</p>\n<pre>from bambu_analytics import track_event, events\n\ndef enquiry_form(request):\n    # Handle submission of form data\n\n    track_event(request, events.EVENT,\n        category = u'Enquiry',\n        action = u'Submit'\n    )\n</pre>\n<p>Here, <tt>events.EVENT</tt> is a constant meaning \u2018a standard event\u2019.</p>\n<p>If you\u2019re using a client-side analytics library (like Google Analytics),\nyou should only track events in this way if you\u2019re going to redirect the\nuser back to a page that will load and render the <tt>tracking</tt> template\ntag. Otherwise the event will be stored in the user\u2019s session cookie,\nbut won\u2019t be tracked by your provider.</p>\n<p>If you\u2019re using a server-side provider - or you\u2019ve written one, a:\nplease let me know! but b: - this method should work fine.</p>\n</div>\n<div id=\"trackable-events\">\n<h2>Trackable events</h2>\n<p>There are four types of trackable event within Bambu Analytics, but not\nall of them are setup to work with Google\u2019s Universal Analytics just\nyet.</p>\n<ul>\n<li><tt>events.PAGE</tt>: a page view (this is handled automatically by\nmiddleware)</li>\n<li><tt>events.EVENT</tt>: something of note happening on the site, that you\nwant to measure</li>\n<li><tt>events.TRANSACTION</tt>: a monetary transaction</li>\n<li><tt>events.TRANSACTION_ITEM</tt>: part of an order (an item in someone\u2019s\nshopping cart)</li>\n</ul>\n<p>The last two haven\u2019t been properly hooked up to Google\u2019s new system, but\nyou can use the legacy provider (see below).</p>\n</div>\n<div id=\"changing-analytics-provider\">\n<h2>Changing analytics provider</h2>\n<p>Bambu Analytics supports the legacy (ua.js) and new (analytics.js)\nscripts as provided by Google. ecommerce is setup to work with the old\nstyle (ua.js), so if you need to track ecommerce events, you should\nchange the provider via your Django settings file:</p>\n<pre>ANALYTICS_PROVIDER = 'bambu_analytics.providers.google.GoogleAnalyticsProvider'\n</pre>\n</div>\n<div id=\"writing-your-own-provider\">\n<h2>Writing your own provider</h2>\n<p>It\u2019s pretty easy to write your own provider. Start by taking a look at\nthe two classes in <tt>bambu_analytics.providers.google</tt> to see how\nthey\u2019re hooked up.</p>\n<p>Essentially the job of a provider is to take Python objects that refer\nto events and turn them into JavaScript objects and function calls that\nyour analytics library can understand.</p>\n<p>Each provider needs to render a string. For client-side analytics tools\nthis should contain HTML with a <tt>&lt;script&gt;</tt> tag. The first thing inside\nthat tag should be:</p>\n<pre>{% include 'analytics/bambu.inc.js' %}\n</pre>\n<p>This exposes the <tt>bambu.analytics</tt> namespace. After all the code\nneeded to hook up the analytics tool and track basic events, your\nprovider should bind to the <tt>track</tt> event within <tt>bambu.analytics</tt>\nlike this:</p>\n<pre>bambu.analytics.on('track',\n    function(e) {\n        // e.event contains the name of the event, which you can compare\n        // against the constants in the bambu.analytics namespace (they're)\n        // the same as the ones within the Python package.\n\n        // e.args contains a dictionary of arguments that you can use to map\n        // the Python-defined keyword args (like 'category' or 'option_value')\n        // to arguments that your specific analytics library understands. See\n        // the templates/analytics/universal.inc.html file for an idea of\n        // how this works.\n    }\n);\n</pre>\n<p>This way you can write an analytics provider that works on all sites\nthat use Bambu Analytics. Both of them!</p>\n<div id=\"writing-a-server-side-provider\">\n<h3>Writing a server-side provider</h3>\n<p>If you want to track your own events or you have a server-side analytics\ntool that you want to hook into, you\u2019ll write a provider that focuses on\nteh back- rather than front-end. You\u2019ll still need to render something,\nbut this can be an empty string, or some sort of tracking pixel if\nthat\u2019s the route you want to go down.</p>\n</div>\n</div>\n<div id=\"ajax-and-client-side-tracking\">\n<h2>AJAX and client-side tracking</h2>\n<p>If you want to track events client-side, or you\u2019re running a site that\nuses a lot of AJAX (like <a href=\"http://poddle.fm/\" rel=\"nofollow\">Poddle.fm</a>), you\u2019ll get\nautomatic access to the <tt>bambu.analytics</tt> namespace within JavaScript,\nand you can call <tt>track()</tt> to handle client-side events or AJAX page\nupdates (ie: via <tt>window.pushstate</tt>).</p>\n<p>Here\u2019s an example event used on Poddle.fm when a user clicks the Play\nbutton on an episode of a podcast:</p>\n<pre>&lt;script&gt;\n    $('a.btn-play').on('click',\n        function() {\n            // Play the audio\n            ...\n\n            // Track the click event\n            bambu.analytics.track(\n                bambu.analytics.EVENT,\n                {\n                    category: 'Audio',\n                    action: 'play'\n                }\n            );\n        }\n    );\n&lt;/script&gt;\n</pre>\n</div>\n<div id=\"todo\">\n<h2>Todo</h2>\n<ul>\n<li>Implement ecommerce into the Universal Analytics provider</li>\n</ul>\n</div>\n<div id=\"questions-or-suggestions\">\n<h2>Questions or suggestions?</h2>\n<p>Find me on Twitter (@iamsteadman) or <a href=\"http://steadman.io/\" rel=\"nofollow\">visit my blog</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 1140613, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "3def7bfbba2225d3f2a0e4cbfcf90416", "sha256": "b95b049055086976f1375ffa3023934e0ce6aeadffb32eb54d783d5cd4ee7188"}, "downloads": -1, "filename": "bambu-analytics-0.1.tar.gz", "has_sig": false, "md5_digest": "3def7bfbba2225d3f2a0e4cbfcf90416", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3595, "upload_time": "2014-01-28T16:21:38", "upload_time_iso_8601": "2014-01-28T16:21:38.164797Z", "url": "https://files.pythonhosted.org/packages/c9/b8/389412ba1626978f01265e1f1528b532ed4aa504f530cc7071f068fd15c5/bambu-analytics-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "96395ac3b9f1baa0e55f8ba1b9f8ba6a", "sha256": "f25a147e644280ae70193bd7120900fff7fc980b03638106b113dc37266c8cf5"}, "downloads": -1, "filename": "bambu-analytics-0.2.tar.gz", "has_sig": false, "md5_digest": "96395ac3b9f1baa0e55f8ba1b9f8ba6a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5074, "upload_time": "2014-04-21T13:06:32", "upload_time_iso_8601": "2014-04-21T13:06:32.368142Z", "url": "https://files.pythonhosted.org/packages/5b/3e/5f90457638d571215aa0e234c33a158b93b9929d4bd6942956dcaf0c9db7/bambu-analytics-0.2.tar.gz", "yanked": false}], "2.0": [{"comment_text": "", "digests": {"md5": "4b0af316c45051b475823051e8aa4369", "sha256": "8e6e8d1127e831bbac8770670739ffbadc0156b4fc52de6841efb4a167ec0f72"}, "downloads": -1, "filename": "bambu-analytics-2.0.tar.gz", "has_sig": false, "md5_digest": "4b0af316c45051b475823051e8aa4369", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10107, "upload_time": "2014-05-03T16:39:30", "upload_time_iso_8601": "2014-05-03T16:39:30.101937Z", "url": "https://files.pythonhosted.org/packages/f5/4d/55f5c97b235092819d45a708a4978e44f3e2c442b27a67ab125265f459cd/bambu-analytics-2.0.tar.gz", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "515c2215245a457d627b005fd0485bca", "sha256": "2999aff3ed64bc481b5ec236e0e090c14e9eb91273aac62711212604927a59d9"}, "downloads": -1, "filename": "bambu-analytics-2.0.1.tar.gz", "has_sig": false, "md5_digest": "515c2215245a457d627b005fd0485bca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10099, "upload_time": "2014-06-28T10:21:27", "upload_time_iso_8601": "2014-06-28T10:21:27.237403Z", "url": "https://files.pythonhosted.org/packages/5f/ce/7c7cfb832c42ec8b31a94b5ed3d3261f4559b957149f41d0fc42ddfd36c6/bambu-analytics-2.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "515c2215245a457d627b005fd0485bca", "sha256": "2999aff3ed64bc481b5ec236e0e090c14e9eb91273aac62711212604927a59d9"}, "downloads": -1, "filename": "bambu-analytics-2.0.1.tar.gz", "has_sig": false, "md5_digest": "515c2215245a457d627b005fd0485bca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10099, "upload_time": "2014-06-28T10:21:27", "upload_time_iso_8601": "2014-06-28T10:21:27.237403Z", "url": "https://files.pythonhosted.org/packages/5f/ce/7c7cfb832c42ec8b31a94b5ed3d3261f4559b957149f41d0fc42ddfd36c6/bambu-analytics-2.0.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:14:58 2020"}