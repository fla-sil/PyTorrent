{"info": {"author": "Federico Claudi, Philip Shamash", "author_email": "federicoclaudi@protonmail.com", "bugtrack_url": null, "classifiers": [], "description": "# Imgreg2D\nSimple napari based python application to register a 2D image to a template. \n\n\n## Installation\nYou can instal the code directly from Pypi using:\n\n```\npip install imgreg2d\n```\n\nAlternative you can instal directly from the ![github repository](https://github.com/BrancoLab/imgreg2D) with:\n```\npip install git+https://github.com/BrancoLab/imgreg2D.git --upgrade\n```\n\n## USAGE\nTo register an image to a template the user needs to specify the location of a set of points (>3, ideally at least 6) on \nboth the reference and the registering image. These data are then used to compute an affine matrix which is then used to \nwarp the registering image so that it matches the template. \n\nFor an example of how to perfom image registration, check `example.py` or read below:\n\n### Step 0 - import function and get the images\n```\nfrom imgreg2D.register import register\nfrom imgreg2D.points import get_fixed_points\n\nreference = 'media/original.jpg' # <- path to reference image\nregistering = 'media/rotated.jpg' # <- path to registering image\n```\n\nWhen we will call `register` we will have to pass the the reference and registering images. \nThis can be done by passing file paths like in the code above or by passing `np.ndarray` with image data.\n\n\n### Step 1 - define points on reference image\nTo define the location of the points used for registration on the reference image (`fixed_points`) you can use\n`get_fixed_points`. If you already know the location of these points (e.g. because you already used the same\ntemplate image), you can skip this step. \n\n```\npoints = get_fixed_points(reference)\n```\n\nOnce you've clicked on all the points you need, press `q` to close the viewer and proceed to the next step. \n\n### Step 2 - define points on registering image\nNow you will have to click on the corresponding set of points in the registering image so that the \naffine transform can be computed. Remember, the order in which the points are defined is important: the first point\nyou clicked in Step 1 has to correspond to the first point you'll define now. For this reason, you're shown a copy\nof your reference image with the location and sequence of fixed points. Once you've defined all the registering points\nthe editor will close automatically and the analysis will proceed to the next step. \n\nTo start defining the registering points call:\n```\nregister(reference, registering, fixed_points = points)\n```\n\nNote: if you already have a transform matrix (e.g. from a previous run of the registering step), you can skip this step.\nTo skip Step 2 simply call:\n\n```\nwarped_img, warp_mtx = register(reference, registering, warp_mtx = warp_mtx)\n```\n\nNote2: when calling register you can decide if you want to save the warp matrix or not. This could be use to save time\nthe next time you need to register an image. \n\n\n### Step 3 - interactive refinement\nOnce you've defined the location of the registering points, the code will compute the affine transform (`warp_mtx`) and \nregister your image. \nAt this point another napari viewer will open which you can use to refine the accuracy of your transformation using the\nfollowing hotkeys:\n\n```\n############################################################\n##                REFINEMENT HOT KEYS                     ##\n##                                                        ##\n##    TRANSLATIONS                                        ##\n##   ------------------------------------------------     ##\n##      'a' -> negative x translation                     ##\n##      'w' -> positive y translation                     ##\n##                                                        ##\n##      's' -> negative y translation                     ##\n##      'd' -> positive x translation                     ##\n##                                                        ##\n##    SCALING                                            ##\n##   ------------------------------------------------     ##\n##      'r' -> positive x scaling                         ##\n##      'f' -> negative x scaling                         ##\n##                                                        ##\n##      't' -> positive y scaling                         ##\n##      'g' -> negative y scaling                         ##\n##                                                        ##\n##    SHEARS                                              ##\n##   ------------------------------------------------     ##\n##      'z' -> positive x shear                           ##\n##      'x' -> negative x shear                           ##\n##                                                        ##\n##      'c' -> positive y shear                           ##\n##      'v' -> negative y shear                           ##\n##                                                        ##\n############################################################\n```\n\nOnce you're happy with your results, press `y` to complete the analysis (if you're not happy, \npress `n` and you can try again from Step 2).\nAfter Step 3 you'll have your registered image (`warped_img`) and your affine transform matrix (`warp_mtx`), enjoy!\n\n\n\n# Credit and contribution\nThe original code was part of [Common-Coordinates-Behaviour](https://github.com/BrancoLab/Common-Coordinate-Behaviour) (credit: Philip Shamash). The code was adapted to work with Napari.\n\nContributions are welcome! Just send a PR or open an issue as neeeded. \n\n\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/BrancoLab/imgreg2D", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "imgreg2D", "package_url": "https://pypi.org/project/imgreg2D/", "platform": "", "project_url": "https://pypi.org/project/imgreg2D/", "project_urls": {"Homepage": "https://github.com/BrancoLab/imgreg2D"}, "release_url": "https://pypi.org/project/imgreg2D/0.0.0.2/", "requires_dist": ["numpy", "opencv-python (==3.4.1.15)", "configparser", "napari", "affine6p"], "requires_python": "", "summary": "easy 2D image registration in python", "version": "0.0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Imgreg2D</h1>\n<p>Simple napari based python application to register a 2D image to a template.</p>\n<h2>Installation</h2>\n<p>You can instal the code directly from Pypi using:</p>\n<pre><code>pip install imgreg2d\n</code></pre>\n<p>Alternative you can instal directly from the <img alt=\"github repository\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/27d789797b439bb11846febf3ea9b21c36330406/68747470733a2f2f6769746875622e636f6d2f4272616e636f4c61622f696d677265673244\"> with:</p>\n<pre><code>pip install git+https://github.com/BrancoLab/imgreg2D.git --upgrade\n</code></pre>\n<h2>USAGE</h2>\n<p>To register an image to a template the user needs to specify the location of a set of points (&gt;3, ideally at least 6) on\nboth the reference and the registering image. These data are then used to compute an affine matrix which is then used to\nwarp the registering image so that it matches the template.</p>\n<p>For an example of how to perfom image registration, check <code>example.py</code> or read below:</p>\n<h3>Step 0 - import function and get the images</h3>\n<pre><code>from imgreg2D.register import register\nfrom imgreg2D.points import get_fixed_points\n\nreference = 'media/original.jpg' # &lt;- path to reference image\nregistering = 'media/rotated.jpg' # &lt;- path to registering image\n</code></pre>\n<p>When we will call <code>register</code> we will have to pass the the reference and registering images.\nThis can be done by passing file paths like in the code above or by passing <code>np.ndarray</code> with image data.</p>\n<h3>Step 1 - define points on reference image</h3>\n<p>To define the location of the points used for registration on the reference image (<code>fixed_points</code>) you can use\n<code>get_fixed_points</code>. If you already know the location of these points (e.g. because you already used the same\ntemplate image), you can skip this step.</p>\n<pre><code>points = get_fixed_points(reference)\n</code></pre>\n<p>Once you've clicked on all the points you need, press <code>q</code> to close the viewer and proceed to the next step.</p>\n<h3>Step 2 - define points on registering image</h3>\n<p>Now you will have to click on the corresponding set of points in the registering image so that the\naffine transform can be computed. Remember, the order in which the points are defined is important: the first point\nyou clicked in Step 1 has to correspond to the first point you'll define now. For this reason, you're shown a copy\nof your reference image with the location and sequence of fixed points. Once you've defined all the registering points\nthe editor will close automatically and the analysis will proceed to the next step.</p>\n<p>To start defining the registering points call:</p>\n<pre><code>register(reference, registering, fixed_points = points)\n</code></pre>\n<p>Note: if you already have a transform matrix (e.g. from a previous run of the registering step), you can skip this step.\nTo skip Step 2 simply call:</p>\n<pre><code>warped_img, warp_mtx = register(reference, registering, warp_mtx = warp_mtx)\n</code></pre>\n<p>Note2: when calling register you can decide if you want to save the warp matrix or not. This could be use to save time\nthe next time you need to register an image.</p>\n<h3>Step 3 - interactive refinement</h3>\n<p>Once you've defined the location of the registering points, the code will compute the affine transform (<code>warp_mtx</code>) and\nregister your image.\nAt this point another napari viewer will open which you can use to refine the accuracy of your transformation using the\nfollowing hotkeys:</p>\n<pre><code>############################################################\n##                REFINEMENT HOT KEYS                     ##\n##                                                        ##\n##    TRANSLATIONS                                        ##\n##   ------------------------------------------------     ##\n##      'a' -&gt; negative x translation                     ##\n##      'w' -&gt; positive y translation                     ##\n##                                                        ##\n##      's' -&gt; negative y translation                     ##\n##      'd' -&gt; positive x translation                     ##\n##                                                        ##\n##    SCALING                                            ##\n##   ------------------------------------------------     ##\n##      'r' -&gt; positive x scaling                         ##\n##      'f' -&gt; negative x scaling                         ##\n##                                                        ##\n##      't' -&gt; positive y scaling                         ##\n##      'g' -&gt; negative y scaling                         ##\n##                                                        ##\n##    SHEARS                                              ##\n##   ------------------------------------------------     ##\n##      'z' -&gt; positive x shear                           ##\n##      'x' -&gt; negative x shear                           ##\n##                                                        ##\n##      'c' -&gt; positive y shear                           ##\n##      'v' -&gt; negative y shear                           ##\n##                                                        ##\n############################################################\n</code></pre>\n<p>Once you're happy with your results, press <code>y</code> to complete the analysis (if you're not happy,\npress <code>n</code> and you can try again from Step 2).\nAfter Step 3 you'll have your registered image (<code>warped_img</code>) and your affine transform matrix (<code>warp_mtx</code>), enjoy!</p>\n<h1>Credit and contribution</h1>\n<p>The original code was part of <a href=\"https://github.com/BrancoLab/Common-Coordinate-Behaviour\" rel=\"nofollow\">Common-Coordinates-Behaviour</a> (credit: Philip Shamash). The code was adapted to work with Napari.</p>\n<p>Contributions are welcome! Just send a PR or open an issue as neeeded.</p>\n\n          </div>"}, "last_serial": 6955769, "releases": {"0.0.0.1": [{"comment_text": "", "digests": {"md5": "e7551ccf446b7eb4df9103bb09956b9c", "sha256": "ce820acaf597133c1aec7d8197d9b0ef387f910d726da0b90005c97ca8ed9113"}, "downloads": -1, "filename": "imgreg2D-0.0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e7551ccf446b7eb4df9103bb09956b9c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6735, "upload_time": "2020-03-16T11:13:18", "upload_time_iso_8601": "2020-03-16T11:13:18.629937Z", "url": "https://files.pythonhosted.org/packages/f8/62/62775d7da45c812554322af18022d297b8343d51e1fed554b7d7f857a3f0/imgreg2D-0.0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c6c45696c8d52e6c2efcb67c7e009e9b", "sha256": "a9dcc2797c7f6824279e3cd619e93d97af67a540954a1222bd4bd89aa5c424bd"}, "downloads": -1, "filename": "imgreg2D-0.0.0.1.tar.gz", "has_sig": false, "md5_digest": "c6c45696c8d52e6c2efcb67c7e009e9b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4978, "upload_time": "2020-03-16T11:13:20", "upload_time_iso_8601": "2020-03-16T11:13:20.665867Z", "url": "https://files.pythonhosted.org/packages/b4/26/9627253fe99dd23a0ab2ed8b2d77aa801994f0f1d0416a64bdc9eba033e6/imgreg2D-0.0.0.1.tar.gz", "yanked": false}], "0.0.0.2": [{"comment_text": "", "digests": {"md5": "0b31098e8689b4c97ac6e8cce7b0c663", "sha256": "6779f733cfc75aa5f18588010115d7ba595629c3eec96ba72f4b664893bdd9f5"}, "downloads": -1, "filename": "imgreg2D-0.0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "0b31098e8689b4c97ac6e8cce7b0c663", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18693, "upload_time": "2020-04-05T13:33:17", "upload_time_iso_8601": "2020-04-05T13:33:17.646628Z", "url": "https://files.pythonhosted.org/packages/b5/47/680dfec15723234b4a929c1d3623f10bc9353a81ce66b3ab27b2f50db237/imgreg2D-0.0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b04507f5a351df3a17c48193b7c8a167", "sha256": "cd27f06798259d8415bb0f07952dc187b0f98afd5f399c958196cbdaa261aa29"}, "downloads": -1, "filename": "imgreg2D-0.0.0.2.tar.gz", "has_sig": false, "md5_digest": "b04507f5a351df3a17c48193b7c8a167", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7661, "upload_time": "2020-04-05T13:33:19", "upload_time_iso_8601": "2020-04-05T13:33:19.118967Z", "url": "https://files.pythonhosted.org/packages/6d/34/e59f156a9c92eecbabba0bdfc552fe4c6cf94a0c2cdf899e4afef45c1efa/imgreg2D-0.0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0b31098e8689b4c97ac6e8cce7b0c663", "sha256": "6779f733cfc75aa5f18588010115d7ba595629c3eec96ba72f4b664893bdd9f5"}, "downloads": -1, "filename": "imgreg2D-0.0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "0b31098e8689b4c97ac6e8cce7b0c663", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18693, "upload_time": "2020-04-05T13:33:17", "upload_time_iso_8601": "2020-04-05T13:33:17.646628Z", "url": "https://files.pythonhosted.org/packages/b5/47/680dfec15723234b4a929c1d3623f10bc9353a81ce66b3ab27b2f50db237/imgreg2D-0.0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b04507f5a351df3a17c48193b7c8a167", "sha256": "cd27f06798259d8415bb0f07952dc187b0f98afd5f399c958196cbdaa261aa29"}, "downloads": -1, "filename": "imgreg2D-0.0.0.2.tar.gz", "has_sig": false, "md5_digest": "b04507f5a351df3a17c48193b7c8a167", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7661, "upload_time": "2020-04-05T13:33:19", "upload_time_iso_8601": "2020-04-05T13:33:19.118967Z", "url": "https://files.pythonhosted.org/packages/6d/34/e59f156a9c92eecbabba0bdfc552fe4c6cf94a0c2cdf899e4afef45c1efa/imgreg2D-0.0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:56:41 2020"}