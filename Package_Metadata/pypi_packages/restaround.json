{"info": {"author": "Wolfgang Rohdewald", "author_email": "wolfgang@rohdewald.de", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v2 (GPLv2)", "Operating System :: OS Independent", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only", "Topic :: Communications", "Topic :: Internet :: WWW/HTTP"], "description": "What is restaround?\n===================\n\nrestaround is a wrapper around the backup utility restic_ simplifying its use.\n\nThis is done by defining profiles. A profile defines the arguments to be used for restic_.\nProfiles can inherit from others.\n\nQuick start\n===========\n\nBacking up ``/home`` into ``/backup/restic``:\n\n- create directory ``~/.config/restaround/home`` or ``/etc/restaround/home``\n- go into that directory\n- edit new file ``repo``. Content is ``backup/restic``\n- edit new file ``password-file``, put the password into it\n- edit new file ``filedir``. Content is ``/home``\n- ``restaround home init`` will initialize the repository\n- ``restaround home backup`` will backup\n- ``restaround home mount /mnt`` will mount all backups in /mnt\n\n\nSynopsis\n========\n\nUsage: restaround [-h] [-n] [-s] profile command [restic arguments]\n\n  -h, --help      show this help message and exit\n\n  -n, --dry-run   Only show the restic command to be executed\n\n\n========================== ==============================================================================================\nprofile                    Use profile. It is first looked for in ``~/.config/restaround/``, then in ``/etc/restaround/``\n-------------------------- ----------------------------------------------------------------------------------------------\ncommand                    the restic command to be executed\n-------------------------- ----------------------------------------------------------------------------------------------\nrestic arguments           any additional arguments for restic_\n========================== ==============================================================================================\n\n\n\nExamples where `main` is the name of a profile:\n\n::\n\n  restaround main backup --with-atime\n  restaround --dry-run main snapshots\n  restaround main diff --metadata 3a5f latest\n  restaround main mount\n\n\nProfiles\n========\n\nLocation\n--------\n\nEvery profile is defined within its own directory. They are searched first\nin `~/.config/restaround` and then in `/etc/restaround`. If the same profile\nis defined in both places: See Inheriting_.\n\nArguments passed on the command line build another profile to be applied last.\n\nrestic_ can get many arguments in environment variables like ``$RESTIC_PASSWORD_FILE``.\nrestaround just passes them on.\n\n\nDefinition\n----------\nA profile is implemented as a directory with files for flags. Those can be\nsymbolic links, getting flag values from other profiles.\n\nMost files in that directory have the same spelling as the restic_ flag.\nIn restic_, however the positional flags sometimes have names which do not allow\nthis like restic backup: ``FILE/DIR [FILE/DIR] ...``.\nIn that case, say ``restaround help backup`` to see the name restaround wants, in this case ``filedir``.\n\nThe full name can be built as follows:\n\n  `[command] [no] [flag] [value] [value] ...`\n\nwhere the separate parts are joined by underlines. This character is not part\nof any restic_ command or argument. If you need _ in a value, do not use\nthe [value] part. There is an alternative.\n\n- ``command`` is a restic command. The file only applies to that command. If not given, it applies to all commands\n- ``no`` will disable something defined in the inherited profiles\n- ``flag`` is a restic flag like ``with-atime``. Special flags are ``inherit``, ``pre`` and ``post``\n- ``value`` is the value for a flag like in ``repo=value``\n- ``more values`` the flag will be repeated for all values\n\nrestaround knows which restic commands know which flags, it will only\napply the allowed ones to a specific command.\n\nA profile directory might contain files like\n\n::\n\n  backup_pre\n  backup_filedir\n  exclude-file\n  password-file\n  repo\n  no_with-atime\n  inherit_xxx\n\nSome restic_ flags can be repeated like --tag:\ntag can be a file with one or several lines. Each line is extended into --tag linecontent.\n\nThe restic_ flags ``cacert``, ``cachedir``, ``exclude-file``, ``include-file``, ``password-file`` are special:\nThe corresponding file holds the content, so ``exclude-file`` extends to ``--exclude-file=profile/exclude-file``.\nAs you already know, symbolic links are allowed. So ``cacert`` may be a symbolic link to the certification file.\n\nFor flags with just one argument like --repo create profile/repo with one line.\n\nThe alternative form ``flag_value1_value2_value3`` is treated like a file with 3 lines.\nSo ``exclude_a_b_dirc`` would extend into ``--exclude a --exclude b --exclude dirc``\nSuch a file must be empty. Of course this form can only be used if the resulting file name\nis legal for the file system and if no part contains an underline.\n\n``tag`` in restic_ is used as both a command and as an argument, but this should pose no problem.\n\n``tag_tag`` is the \"tag\" flag applied only to command \"tag\"\n``tag_taga``  is the \"tag\" flag applied to all commands as ``--tag taga``\n\nIf you really want to do ``--tag=tag``, you can define a file named ``tag`` (or ``tag_tag``) with\none line \"tag\".\n\n\n\nSpecial commands\n----------------\n\nThose commands are executed by restaround. Otherwise their usage is the same\nregarding inheritance and execution of pre/post scripts.\n\n``cpal`` makes a copy of the repository. All files will be hard linked.\nThe name of the copy will be that of the repository + 'restaround_cpal'\nThis can be useful before doing a critical operation you might want to undo.\n\n``rmcpal`` removes such a copy.\n\nOf course you could simply call ``cp -al`` directly. But using restaround has the\nadvantage that it will execute the pre- and postscripts. If the repository must\nfirst be mounted and the be unmounted, the pre- and postscripts will do that.\nExample: `Automatically mounting and unmounting a USB drive`_\n\n\nInheriting\n----------\n\nThe special flag ``inherit`` can be defined just like a normal flag but\nit will be executed by restaround instead of passing it to restic. So you can use\n\n- ``--inherit=remote``\n- empty file ``backup_inherit_remote``\n- file with content ``inherit``\n\nYou can inherit from any number of other profiles.\nIf there is a profile named ``default``, it is always inherited from.\n\nMost flags can be passed multiple times to restic. For those, restaround will follow\nthe inheritance tree from the top (the ``default`` profile) to the bottom (the profile\npassed to restaround on the command line). Lastly, the arguments passed directly as\ncommand line arguments are appended.\n\nthe most general first (from the default profile), followed by descend\n\n\n\nOrder of execution\n------------------\n\nProfiles are used top-down where top is the ``default`` profile and down is\nthe profile passed on the command line. Command line arguments are applied last.\n\nMultiple ``inherit`` command files in a profile are executed in alphabetical order.\n\nWhen loading a profile, the ``no_`` files are executed last. As as example, you can\ndefine ``pre`` and ``no_pre_cache`` where pre mounts an external USB drive. So for\nthe ``cache`` command, the USB drive will not be mounted.\n\nIf both a general and a command specific flag are defined within a profile, the\ngeneral flag is applied first.\n\n\nPre- and Postscripts\n--------------------\n\nThe special flag ``pre`` defines a script to be executed before the restic_ command.\n\nThe special flag ``post`` defines a script to be executed after the restic_ command. It\ngets the exit code of the restic_ command in the shell variable ``RESTIC_RESULT``.\n\nThose flags can be defined analog to ``cacert``, see above.\n\nJust like with any flag, inheritance means that several ``pre`` or ``post`` scripts might be\ndefined. They are executed in the order as defined for normal flags: ``default``\nprofile first, command line arguments last. As soon as an exit code from a ``pre`` script\nis not 0, restaround aborts with that exit code. This is not true for ``post`` scripts:\nafter the main restic command finishes, all post scripts are always executed.\n\nThe scripts will get some environment variables:\n\n=========================  ==============================================================\nEnvironment variable       meaning\n=========================  ==============================================================\nRESTAROUND_PID             the process id of the calling restaround\nRESTAROUND_PROFILE         the name of the profile restaround was called with\nRESTAROUND_DRY_RUN         1 if --dry-run was given, 0 else\nRESTAROUND_LOGLEVEL        the given --loglevel: error, warning, info, debug\n=========================  ==============================================================\n\nScripts can pass environment variables to the next script. Because there is no\nway known to me how to do that on a non linux system, they do that like this:\n\n``echo \"VARNAME=VALUE\"``\n\nEverything a script writes to stdout must look like that. You must suppress other\noutput to stdout.\n\nPre scripts are executed before the main restic command. They are allowed to\nmodify  the flags in the profile directory, the profile is rescanned after\nevery pre script.\n\nThose scripts also allows setting up chains like backup, check, forget, prune.\nJust be careful not to go into endless loops.\n\n\n\nExamples\n========\n\nDirectory structure\n-------------------\n\n=========================  ==============================================================\nfile name                  meaning\n=========================  ==============================================================\nbackup_tag_taga_tagb       backup --tag taga --tag tagb\nrepo                       --repo REPONAME where REPONAME stands on the first line of ``repo``\nrestore_no_tag             for restore only, removes --tag if it was defined in an inherited profile\n=========================  ==============================================================\n\n\nDefine separate profiles for the source and the repository and then combine them:\n\n=============================== =========================================================\nDirectory                       Files\n=============================== =========================================================\n/etc/restaround/default         exclude-caches mountpoint\n/etc/restaround/local           password-file repo\n/etc/restaround/remote          password-file repo\n/etc/restaround/mydata          exclude-file filedir\n/etc/restaround/mydata_local    inherit_local inherit_mydata\n/etc/restaround/mydata_remote   inherit_remote inherit_mydata\n=============================== =========================================================\n\n\nBackup mydata on a remote repository and list all snapshots on that repository:\n\n::\n\n  restaround mydata_remote backup\n  restaround remote snapshots\n\n\nAutomatically mounting and unmounting a USB drive\n-------------------------------------------------\npre:\n\n::\n\n  #!/bin/bash\n\n  # This is reentrant. A pre or post script might call restaround\n\n  mount | fgrep 'on /backdisk3 ' >/dev/null\n  if test $? -eq 0\n  then\n        echo DISK3_WAS_MOUNTED_BY=0\n  else\n        mount /backdisk3 >/dev/null\n        if test x${DISK3_WAS_MOUNTED_BY} == x\n        then\n                echo DISK3_WAS_MOUNTED_BY=$RESTAROUND_PID\n                # else somebody else may have unmounted\n        fi\n  fi\n\n\npost:\n\n::\n\n  #!/bin/bash\n\n  # only umount if we are called by the restaround instance which mounted\n\n  test $DISK3_WAS_MOUNTED_BY -eq $RESTAROUND_PID && umount /backdisk3\n\n\nShow diff after backup\n----------------------\nThis expects at least two snaphots in the repository. Better would be to\ncheck whether $snap2 really holds exactly 2 values.\n\nbackup_post:\n\n::\n\n  #!/bin/bash\n\n  snap2=$(restaround --loglevel error \"$RESTAROUND_PROFILE\" snapshots --json | jq -r '.[-2:][].id')\n\n  restaround \"$RESTAROUND_PROFILE\" diff $snap2 >&2\n\n\nInstallation\n============\n\nGet it from https://pypi.org/project/restaround/\n\nYou can do\n\npip3 install restaround\n\nIf you want bash command line argument completion, put this into your .bashrc:\n  ``eval \"$(register-python-argcomplete restaround)\"``\n\nor see https://argcomplete.readthedocs.io/en/latest/\nYou may have to install a python package. On Debian, it would be ``python3-argcomplete``.\n\nIf you want to use ``restaround selftest``, please install pytest, see https://docs.pytest.org:\n  ``pip install -U pytest``\n\nFor parallel test execution see the comment in the source: search for run_pytest.\n\n\nTODO\n====\n- maybe lockrepo and unlockrepo: https://forum.restic.net/t/is-it-possible-to-decrypt-restic-files-from-the-command-line/2363/7\n- maybe restaround --ionice, also as profile/ionice_c3\n\n.. _restic: https://restic.net\n\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/wrohdewald/restaround", "keywords": "", "license": "GPLv2", "maintainer": "", "maintainer_email": "", "name": "restaround", "package_url": "https://pypi.org/project/restaround/", "platform": "", "project_url": "https://pypi.org/project/restaround/", "project_urls": {"Homepage": "https://github.com/wrohdewald/restaround"}, "release_url": "https://pypi.org/project/restaround/0.1.3/", "requires_dist": ["pytest"], "requires_python": "", "summary": "A wrapper around restic", "version": "0.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"what-is-restaround\">\n<h2>What is restaround?</h2>\n<p>restaround is a wrapper around the backup utility <a href=\"https://restic.net\" rel=\"nofollow\">restic</a> simplifying its use.</p>\n<p>This is done by defining profiles. A profile defines the arguments to be used for <a href=\"https://restic.net\" rel=\"nofollow\">restic</a>.\nProfiles can inherit from others.</p>\n</div>\n<div id=\"quick-start\">\n<h2>Quick start</h2>\n<p>Backing up <tt>/home</tt> into <tt>/backup/restic</tt>:</p>\n<ul>\n<li>create directory <tt><span class=\"pre\">~/.config/restaround/home</span></tt> or <tt>/etc/restaround/home</tt></li>\n<li>go into that directory</li>\n<li>edit new file <tt>repo</tt>. Content is <tt>backup/restic</tt></li>\n<li>edit new file <tt><span class=\"pre\">password-file</span></tt>, put the password into it</li>\n<li>edit new file <tt>filedir</tt>. Content is <tt>/home</tt></li>\n<li><tt>restaround home init</tt> will initialize the repository</li>\n<li><tt>restaround home backup</tt> will backup</li>\n<li><tt>restaround home mount /mnt</tt> will mount all backups in /mnt</li>\n</ul>\n</div>\n<div id=\"synopsis\">\n<h2>Synopsis</h2>\n<p>Usage: restaround [-h] [-n] [-s] profile command [restic arguments]</p>\n<blockquote>\n<table>\n<col>\n<col>\n<tbody>\n<tr><td>\n<kbd><span class=\"option\">-h</span>, <span class=\"option\">--help</span></kbd></td>\n<td>show this help message and exit</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-n</span>, <span class=\"option\">--dry-run</span></kbd></td>\n<td>Only show the restic command to be executed</td></tr>\n</tbody>\n</table>\n</blockquote>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td>profile</td>\n<td>Use profile. It is first looked for in <tt><span class=\"pre\">~/.config/restaround/</span></tt>, then in <tt>/etc/restaround/</tt></td>\n</tr>\n<tr><td>command</td>\n<td>the restic command to be executed</td>\n</tr>\n<tr><td>restic arguments</td>\n<td>any additional arguments for <a href=\"https://restic.net\" rel=\"nofollow\">restic</a></td>\n</tr>\n</tbody>\n</table>\n<p>Examples where <cite>main</cite> is the name of a profile:</p>\n<pre>restaround main backup --with-atime\nrestaround --dry-run main snapshots\nrestaround main diff --metadata 3a5f latest\nrestaround main mount\n</pre>\n</div>\n<div id=\"profiles\">\n<h2>Profiles</h2>\n<div id=\"location\">\n<h3>Location</h3>\n<p>Every profile is defined within its own directory. They are searched first\nin <cite>~/.config/restaround</cite> and then in <cite>/etc/restaround</cite>. If the same profile\nis defined in both places: See <a href=\"#inheriting\" rel=\"nofollow\">Inheriting</a>.</p>\n<p>Arguments passed on the command line build another profile to be applied last.</p>\n<p><a href=\"https://restic.net\" rel=\"nofollow\">restic</a> can get many arguments in environment variables like <tt>$RESTIC_PASSWORD_FILE</tt>.\nrestaround just passes them on.</p>\n</div>\n<div id=\"definition\">\n<h3>Definition</h3>\n<p>A profile is implemented as a directory with files for flags. Those can be\nsymbolic links, getting flag values from other profiles.</p>\n<p>Most files in that directory have the same spelling as the <a href=\"https://restic.net\" rel=\"nofollow\">restic</a> flag.\nIn <a href=\"https://restic.net\" rel=\"nofollow\">restic</a>, however the positional flags sometimes have names which do not allow\nthis like restic backup: <tt>FILE/DIR [FILE/DIR] ...</tt>.\nIn that case, say <tt>restaround help backup</tt> to see the name restaround wants, in this case <tt>filedir</tt>.</p>\n<p>The full name can be built as follows:</p>\n<blockquote>\n<cite>[command] [no] [flag] [value] [value] \u2026</cite></blockquote>\n<p>where the separate parts are joined by underlines. This character is not part\nof any <a href=\"https://restic.net\" rel=\"nofollow\">restic</a> command or argument. If you need _ in a value, do not use\nthe [value] part. There is an alternative.</p>\n<ul>\n<li><tt>command</tt> is a restic command. The file only applies to that command. If not given, it applies to all commands</li>\n<li><tt>no</tt> will disable something defined in the inherited profiles</li>\n<li><tt>flag</tt> is a restic flag like <tt><span class=\"pre\">with-atime</span></tt>. Special flags are <tt>inherit</tt>, <tt>pre</tt> and <tt>post</tt></li>\n<li><tt>value</tt> is the value for a flag like in <tt>repo=value</tt></li>\n<li><tt>more values</tt> the flag will be repeated for all values</li>\n</ul>\n<p>restaround knows which restic commands know which flags, it will only\napply the allowed ones to a specific command.</p>\n<p>A profile directory might contain files like</p>\n<pre>backup_pre\nbackup_filedir\nexclude-file\npassword-file\nrepo\nno_with-atime\ninherit_xxx\n</pre>\n<p>Some <a href=\"https://restic.net\" rel=\"nofollow\">restic</a> flags can be repeated like \u2013tag:\ntag can be a file with one or several lines. Each line is extended into \u2013tag linecontent.</p>\n<p>The <a href=\"https://restic.net\" rel=\"nofollow\">restic</a> flags <tt>cacert</tt>, <tt>cachedir</tt>, <tt><span class=\"pre\">exclude-file</span></tt>, <tt><span class=\"pre\">include-file</span></tt>, <tt><span class=\"pre\">password-file</span></tt> are special:\nThe corresponding file holds the content, so <tt><span class=\"pre\">exclude-file</span></tt> extends to <tt><span class=\"pre\">--exclude-file=profile/exclude-file</span></tt>.\nAs you already know, symbolic links are allowed. So <tt>cacert</tt> may be a symbolic link to the certification file.</p>\n<p>For flags with just one argument like \u2013repo create profile/repo with one line.</p>\n<p>The alternative form <tt>flag_value1_value2_value3</tt> is treated like a file with 3 lines.\nSo <tt>exclude_a_b_dirc</tt> would extend into <tt><span class=\"pre\">--exclude</span> a <span class=\"pre\">--exclude</span> b <span class=\"pre\">--exclude</span> dirc</tt>\nSuch a file must be empty. Of course this form can only be used if the resulting file name\nis legal for the file system and if no part contains an underline.</p>\n<p><tt>tag</tt> in <a href=\"https://restic.net\" rel=\"nofollow\">restic</a> is used as both a command and as an argument, but this should pose no problem.</p>\n<p><tt>tag_tag</tt> is the \u201ctag\u201d flag applied only to command \u201ctag\u201d\n<tt>tag_taga</tt>  is the \u201ctag\u201d flag applied to all commands as <tt><span class=\"pre\">--tag</span> taga</tt></p>\n<p>If you really want to do <tt><span class=\"pre\">--tag=tag</span></tt>, you can define a file named <tt>tag</tt> (or <tt>tag_tag</tt>) with\none line \u201ctag\u201d.</p>\n</div>\n<div id=\"special-commands\">\n<h3>Special commands</h3>\n<p>Those commands are executed by restaround. Otherwise their usage is the same\nregarding inheritance and execution of pre/post scripts.</p>\n<p><tt>cpal</tt> makes a copy of the repository. All files will be hard linked.\nThe name of the copy will be that of the repository + \u2018restaround_cpal\u2019\nThis can be useful before doing a critical operation you might want to undo.</p>\n<p><tt>rmcpal</tt> removes such a copy.</p>\n<p>Of course you could simply call <tt>cp <span class=\"pre\">-al</span></tt> directly. But using restaround has the\nadvantage that it will execute the pre- and postscripts. If the repository must\nfirst be mounted and the be unmounted, the pre- and postscripts will do that.\nExample: <a href=\"#automatically-mounting-and-unmounting-a-usb-drive\" rel=\"nofollow\">Automatically mounting and unmounting a USB drive</a></p>\n</div>\n<div id=\"inheriting\">\n<h3>Inheriting</h3>\n<p>The special flag <tt>inherit</tt> can be defined just like a normal flag but\nit will be executed by restaround instead of passing it to restic. So you can use</p>\n<ul>\n<li><tt><span class=\"pre\">--inherit=remote</span></tt></li>\n<li>empty file <tt>backup_inherit_remote</tt></li>\n<li>file with content <tt>inherit</tt></li>\n</ul>\n<p>You can inherit from any number of other profiles.\nIf there is a profile named <tt>default</tt>, it is always inherited from.</p>\n<p>Most flags can be passed multiple times to restic. For those, restaround will follow\nthe inheritance tree from the top (the <tt>default</tt> profile) to the bottom (the profile\npassed to restaround on the command line). Lastly, the arguments passed directly as\ncommand line arguments are appended.</p>\n<p>the most general first (from the default profile), followed by descend</p>\n</div>\n<div id=\"order-of-execution\">\n<h3>Order of execution</h3>\n<p>Profiles are used top-down where top is the <tt>default</tt> profile and down is\nthe profile passed on the command line. Command line arguments are applied last.</p>\n<p>Multiple <tt>inherit</tt> command files in a profile are executed in alphabetical order.</p>\n<p>When loading a profile, the <tt>no_</tt> files are executed last. As as example, you can\ndefine <tt>pre</tt> and <tt>no_pre_cache</tt> where pre mounts an external USB drive. So for\nthe <tt>cache</tt> command, the USB drive will not be mounted.</p>\n<p>If both a general and a command specific flag are defined within a profile, the\ngeneral flag is applied first.</p>\n</div>\n<div id=\"pre-and-postscripts\">\n<h3>Pre- and Postscripts</h3>\n<p>The special flag <tt>pre</tt> defines a script to be executed before the <a href=\"https://restic.net\" rel=\"nofollow\">restic</a> command.</p>\n<p>The special flag <tt>post</tt> defines a script to be executed after the <a href=\"https://restic.net\" rel=\"nofollow\">restic</a> command. It\ngets the exit code of the <a href=\"https://restic.net\" rel=\"nofollow\">restic</a> command in the shell variable <tt>RESTIC_RESULT</tt>.</p>\n<p>Those flags can be defined analog to <tt>cacert</tt>, see above.</p>\n<p>Just like with any flag, inheritance means that several <tt>pre</tt> or <tt>post</tt> scripts might be\ndefined. They are executed in the order as defined for normal flags: <tt>default</tt>\nprofile first, command line arguments last. As soon as an exit code from a <tt>pre</tt> script\nis not 0, restaround aborts with that exit code. This is not true for <tt>post</tt> scripts:\nafter the main restic command finishes, all post scripts are always executed.</p>\n<p>The scripts will get some environment variables:</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Environment variable</th>\n<th>meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>RESTAROUND_PID</td>\n<td>the process id of the calling restaround</td>\n</tr>\n<tr><td>RESTAROUND_PROFILE</td>\n<td>the name of the profile restaround was called with</td>\n</tr>\n<tr><td>RESTAROUND_DRY_RUN</td>\n<td>1 if \u2013dry-run was given, 0 else</td>\n</tr>\n<tr><td>RESTAROUND_LOGLEVEL</td>\n<td>the given \u2013loglevel: error, warning, info, debug</td>\n</tr>\n</tbody>\n</table>\n<p>Scripts can pass environment variables to the next script. Because there is no\nway known to me how to do that on a non linux system, they do that like this:</p>\n<p><tt>echo \"VARNAME=VALUE\"</tt></p>\n<p>Everything a script writes to stdout must look like that. You must suppress other\noutput to stdout.</p>\n<p>Pre scripts are executed before the main restic command. They are allowed to\nmodify  the flags in the profile directory, the profile is rescanned after\nevery pre script.</p>\n<p>Those scripts also allows setting up chains like backup, check, forget, prune.\nJust be careful not to go into endless loops.</p>\n</div>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<div id=\"directory-structure\">\n<h3>Directory structure</h3>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>file name</th>\n<th>meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>backup_tag_taga_tagb</td>\n<td>backup \u2013tag taga \u2013tag tagb</td>\n</tr>\n<tr><td>repo</td>\n<td>\u2013repo REPONAME where REPONAME stands on the first line of <tt>repo</tt></td>\n</tr>\n<tr><td>restore_no_tag</td>\n<td>for restore only, removes \u2013tag if it was defined in an inherited profile</td>\n</tr>\n</tbody>\n</table>\n<p>Define separate profiles for the source and the repository and then combine them:</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Directory</th>\n<th>Files</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>/etc/restaround/default</td>\n<td>exclude-caches mountpoint</td>\n</tr>\n<tr><td>/etc/restaround/local</td>\n<td>password-file repo</td>\n</tr>\n<tr><td>/etc/restaround/remote</td>\n<td>password-file repo</td>\n</tr>\n<tr><td>/etc/restaround/mydata</td>\n<td>exclude-file filedir</td>\n</tr>\n<tr><td>/etc/restaround/mydata_local</td>\n<td>inherit_local inherit_mydata</td>\n</tr>\n<tr><td>/etc/restaround/mydata_remote</td>\n<td>inherit_remote inherit_mydata</td>\n</tr>\n</tbody>\n</table>\n<p>Backup mydata on a remote repository and list all snapshots on that repository:</p>\n<pre>restaround mydata_remote backup\nrestaround remote snapshots\n</pre>\n</div>\n<div id=\"automatically-mounting-and-unmounting-a-usb-drive\">\n<h3>Automatically mounting and unmounting a USB drive</h3>\n<p>pre:</p>\n<pre>#!/bin/bash\n\n# This is reentrant. A pre or post script might call restaround\n\nmount | fgrep 'on /backdisk3 ' &gt;/dev/null\nif test $? -eq 0\nthen\n      echo DISK3_WAS_MOUNTED_BY=0\nelse\n      mount /backdisk3 &gt;/dev/null\n      if test x${DISK3_WAS_MOUNTED_BY} == x\n      then\n              echo DISK3_WAS_MOUNTED_BY=$RESTAROUND_PID\n              # else somebody else may have unmounted\n      fi\nfi\n</pre>\n<p>post:</p>\n<pre>#!/bin/bash\n\n# only umount if we are called by the restaround instance which mounted\n\ntest $DISK3_WAS_MOUNTED_BY -eq $RESTAROUND_PID &amp;&amp; umount /backdisk3\n</pre>\n</div>\n<div id=\"show-diff-after-backup\">\n<h3>Show diff after backup</h3>\n<p>This expects at least two snaphots in the repository. Better would be to\ncheck whether $snap2 really holds exactly 2 values.</p>\n<p>backup_post:</p>\n<pre>#!/bin/bash\n\nsnap2=$(restaround --loglevel error \"$RESTAROUND_PROFILE\" snapshots --json | jq -r '.[-2:][].id')\n\nrestaround \"$RESTAROUND_PROFILE\" diff $snap2 &gt;&amp;2\n</pre>\n</div>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Get it from <a href=\"https://pypi.org/project/restaround/\" rel=\"nofollow\">https://pypi.org/project/restaround/</a></p>\n<p>You can do</p>\n<p>pip3 install restaround</p>\n<dl>\n<dt>If you want bash command line argument completion, put this into your .bashrc:</dt>\n<dd><tt>eval <span class=\"pre\">\"$(register-python-argcomplete</span> restaround)\"</tt></dd>\n</dl>\n<p>or see <a href=\"https://argcomplete.readthedocs.io/en/latest/\" rel=\"nofollow\">https://argcomplete.readthedocs.io/en/latest/</a>\nYou may have to install a python package. On Debian, it would be <tt><span class=\"pre\">python3-argcomplete</span></tt>.</p>\n<dl>\n<dt>If you want to use <tt>restaround selftest</tt>, please install pytest, see <a href=\"https://docs.pytest.org\" rel=\"nofollow\">https://docs.pytest.org</a>:</dt>\n<dd><tt>pip install <span class=\"pre\">-U</span> pytest</tt></dd>\n</dl>\n<p>For parallel test execution see the comment in the source: search for run_pytest.</p>\n</div>\n<div id=\"todo\">\n<h2>TODO</h2>\n<ul>\n<li>maybe lockrepo and unlockrepo: <a href=\"https://forum.restic.net/t/is-it-possible-to-decrypt-restic-files-from-the-command-line/2363/7\" rel=\"nofollow\">https://forum.restic.net/t/is-it-possible-to-decrypt-restic-files-from-the-command-line/2363/7</a></li>\n<li>maybe restaround \u2013ionice, also as profile/ionice_c3</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 6354405, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "4ba553bee71c940a367a739f20d9a04f", "sha256": "864c08b7038767771cb952a6737d71744c3d92f7489ed848d9026bdbda88e2ab"}, "downloads": -1, "filename": "restaround-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "4ba553bee71c940a367a739f20d9a04f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 22663, "upload_time": "2019-12-20T18:03:51", "upload_time_iso_8601": "2019-12-20T18:03:51.102376Z", "url": "https://files.pythonhosted.org/packages/d6/75/8799698df3f0da4805b8f90d7606c258724b6db5c3e277f6e3103b29c4d5/restaround-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "444754624f7dbe120b97b24fae76364b", "sha256": "3adb6628ee8dc9870614c039f3852a741109e1cacdfc7e3ef1bba1ddac67f4e0"}, "downloads": -1, "filename": "restaround-0.1.0.tar.gz", "has_sig": false, "md5_digest": "444754624f7dbe120b97b24fae76364b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27899, "upload_time": "2019-12-20T18:03:53", "upload_time_iso_8601": "2019-12-20T18:03:53.878189Z", "url": "https://files.pythonhosted.org/packages/81/b9/d82d823802908902e1e770270de66a03fd74886c6a0283b21fe1a8945030/restaround-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "0a2b93d5768d153bfbe5f60ebedf91a2", "sha256": "9f9b993975dcd17177963fff2af2cba94ba6238554ed63c2115e44627755c958"}, "downloads": -1, "filename": "restaround-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "0a2b93d5768d153bfbe5f60ebedf91a2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 22623, "upload_time": "2019-12-20T18:12:22", "upload_time_iso_8601": "2019-12-20T18:12:22.069254Z", "url": "https://files.pythonhosted.org/packages/e9/28/9bcd66390f3590dc4cf1d22cfbf64c2b857e06429d7a7b2491f28d4d77fb/restaround-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5d751c62bd9fc6f2d681f5af9e35d80a", "sha256": "a2b99c546521e3d81c6bca39043258248842ae7e26b10b4205755804b4fac95e"}, "downloads": -1, "filename": "restaround-0.1.1.tar.gz", "has_sig": false, "md5_digest": "5d751c62bd9fc6f2d681f5af9e35d80a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27844, "upload_time": "2019-12-20T18:12:24", "upload_time_iso_8601": "2019-12-20T18:12:24.338867Z", "url": "https://files.pythonhosted.org/packages/42/71/2a4d6f4a6cf237e9c32ad564cab0e161e3d02037f516fd226266011c849c/restaround-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "a54365092c1feb91c5cca8174e57a211", "sha256": "a132107f50b3c918b2dac7af573a93236effe838864359a5fe53690cc0eb4eb8"}, "downloads": -1, "filename": "restaround-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "a54365092c1feb91c5cca8174e57a211", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 22690, "upload_time": "2019-12-21T23:31:45", "upload_time_iso_8601": "2019-12-21T23:31:45.919390Z", "url": "https://files.pythonhosted.org/packages/19/84/87193e6d08fa4b5a714053e7168cc18d28dddf119a0951fe5ad486601209/restaround-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1dccd0430630e2dc4e2c925927fbf828", "sha256": "ef17ab5f8d2e2cb0381119eb29e84baf540a3f1633675331088bc9835ddffa75"}, "downloads": -1, "filename": "restaround-0.1.2.tar.gz", "has_sig": false, "md5_digest": "1dccd0430630e2dc4e2c925927fbf828", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28151, "upload_time": "2019-12-21T23:31:47", "upload_time_iso_8601": "2019-12-21T23:31:47.977648Z", "url": "https://files.pythonhosted.org/packages/d5/d3/515e98ce86fc26c1088f9ac0b2dcf337e91970f8522265e2c556e03cc9bb/restaround-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "979405c9a935c517507f7172bed29d1d", "sha256": "39c97cd9936a1e821f7a51095ce7d316647e13c8bd9c2f6c8be3e95e42b59e47"}, "downloads": -1, "filename": "restaround-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "979405c9a935c517507f7172bed29d1d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23148, "upload_time": "2019-12-24T08:45:40", "upload_time_iso_8601": "2019-12-24T08:45:40.176455Z", "url": "https://files.pythonhosted.org/packages/0d/4c/1ab3b99bf5316a8f481acfa940f93ea8ae216811b5fb20c122705a70d1a0/restaround-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ed185857aa17b685c4b3c2958c4d6df1", "sha256": "5c5ce2a95e0b56b6d35b78306a9c6af3afe9506480aa0ad7d73ed78d16eb5ce5"}, "downloads": -1, "filename": "restaround-0.1.3.tar.gz", "has_sig": false, "md5_digest": "ed185857aa17b685c4b3c2958c4d6df1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28829, "upload_time": "2019-12-24T08:45:42", "upload_time_iso_8601": "2019-12-24T08:45:42.420439Z", "url": "https://files.pythonhosted.org/packages/e4/fd/e0508e2f1dac1619aa1baf5b77d1361513919649c6e8e2ab99660c2b25de/restaround-0.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "979405c9a935c517507f7172bed29d1d", "sha256": "39c97cd9936a1e821f7a51095ce7d316647e13c8bd9c2f6c8be3e95e42b59e47"}, "downloads": -1, "filename": "restaround-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "979405c9a935c517507f7172bed29d1d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23148, "upload_time": "2019-12-24T08:45:40", "upload_time_iso_8601": "2019-12-24T08:45:40.176455Z", "url": "https://files.pythonhosted.org/packages/0d/4c/1ab3b99bf5316a8f481acfa940f93ea8ae216811b5fb20c122705a70d1a0/restaround-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ed185857aa17b685c4b3c2958c4d6df1", "sha256": "5c5ce2a95e0b56b6d35b78306a9c6af3afe9506480aa0ad7d73ed78d16eb5ce5"}, "downloads": -1, "filename": "restaround-0.1.3.tar.gz", "has_sig": false, "md5_digest": "ed185857aa17b685c4b3c2958c4d6df1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28829, "upload_time": "2019-12-24T08:45:42", "upload_time_iso_8601": "2019-12-24T08:45:42.420439Z", "url": "https://files.pythonhosted.org/packages/e4/fd/e0508e2f1dac1619aa1baf5b77d1361513919649c6e8e2ab99660c2b25de/restaround-0.1.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:03:43 2020"}