{"info": {"author": "Quico Spaen", "author_email": "qspaen@berkeley.edu", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Programming Language :: Python :: 3"], "description": "# Hochbaum's Pseudoflow (HPF) Algorithm for (Linear) Fully Parametric Minimum Cut\nThis package provides a parametric implementation of pseudoflow for minimum cut on directed graphs. In the parametric minimum cut problem, the capacity of source-adjacent arcs is monotone non-decreasing in the parameter `lambda` whereas the capacity of sink-adjacent arcs is monotone non-increasing in `lambda`. This solver requires that the capacities of source and sink adjacent arcs are linear in `lambda`: `capacity = constant + multiplier * lambda`.\n\nThis fully parametric solver finds the optimal minimum cut for all `lambda` values in a given range. The solution for all lambda values is represented with `O(n)` intervals for the parameter lambda. In each interval, the optimal minimum cut remains the same.\n\nA simple parametric minimum cut solver that provides the optimal minimum cut for a given list of arc capacities is available [here](https://riot.ieor.berkeley.edu/Applications/Pseudoflow/parametric.html), and a non-parametric maximum flow version of pseudoflow is available [here](https://riot.ieor.berkeley.edu/Applications/Pseudoflow/maxflow.html).\n\nThe package provides interfaces for Python, C, and Matlab.\n\nThis implementation uses a variant of the fully parametric HPF algorithm as described in:\n>    DS Hochbaum (2008), The Pseudoflow algorithm: A new algorithm for the maximum flow problem. Operations Research, 58(4):992-1009.\n\nThis implementation does not use *free runs* nor does it use warm starts with informatiom from previous runs (see pg.15). This implementation should therefore **not be used** for comparison with the fully parametric HPF algorithm.\n\nThe package provides an option to round capacities that are negative for certain lambda values to zero. This option should **only** be used when each node has a source adjacent arc with capacity `max(0, a * lambda + b)` and a corresponding sink adjacent arc with capacity `max(0, -a * lambda - b)`. Otherwise, the intersection of the cut capacities is wrongly identified.\n\n\n## Instructions for Python\n\nInstall the package with `pip`:\n\n```bash\n    pip install pseudoflow\n```\n\n#### Example\n```python\nimport networkx as nx\nimport pseudoflow\n\nG = nx.DiGraph()\nG.add_edge(0, 1, const=1, mult=5)\nG.add_edge(1, 2, const=9, mult=-3)\n\n\nsource = 0\nsink = 2\nlambda_range = [0., 2.]\n\nbreakpoints, cuts, info = pseudoflow.hpf(\n    G,  # Networkx directed graph.\n    source,  # Node id of the source node.\n    sink,  # Node id of the sink node.\n    const_cap=\"const\",  # Edge attribute with the constant capacity.\n    mult_cap=\"mult\",  # Edge attribute with the lambda multiplier.\n    lambdaRange=lambda_range,  # (lower, upper) bounds for the lambda parameter.\n    roundNegativeCapacity=False  # True if negative arc capacities should be rounded to zero.\n)\n\n# breakpoints: list of upper bounds for the lambda intervals.\n# cuts: A dictionary with for each node a list indicating whether\n#       the node is in the source set of the minimum cut.\nprint(breakpoints)  # Output: [1., 2.]\nprint(cuts)  # Output: {0: [1, 1], 1: [0, 1], 2: [0, 0]}\n```\n\n## Instructions for C\nNavigate to directory `src/pseudoflow/c`, and compile the `hpf` executable with `make`.\n\nTo execute the solver, use:\n```bash\nhpf input-file.txt output-file.txt\n```\n\nThe input file should contain the graph structure and is assumed to have the following format:\n```\n    c <comment lines>\n    p <# nodes> <# arcs> <lower bound> <upper bound> <round if negative>\n    n <source node> s\n    n <sink node> t\n    a <from-node> <to-node> <constant capacity> <lambda multiplier>\n```\nwhere the `a` line is repeated for each arc. The file should satisfy the following conditions:\n- Nodes are labeled `0 .. <# nodes> - 1`.\n- `<lambda multiplier>` is non-negative if `<from-node> == <source node>` and `<to-node> != <sink-node>`.\n- `<lambda multiplier>` is non-positive if `<from-node> != <source node>` and `<to-node> == <sink-node>`.\n- `<lambda multiplier>` is zero if `<from-node> != <source node>` and `<to-node> != <sink-node>`.\n- `<round if negative>` takes value 1 if the any negative capacity arc should be rounded to 0, and value 0 otherwise.\n\nThe solver will generate the following output file:\n```\nt <time (in sec) read data> <time (in sec) initialize> <time (in sec) solve>\ns <# arc scans> <# mergers> <# pushes> <# relabels > <# gap >\np <number of lambda intervals = k>\nl <lambda upperbound interval 1> ... <lambda upperbound interval k>\nn <node-id> <sourceset indicator interval 1 > .. <indicator interval k>\n```\nThe `n` line appears for each node. `<sourceset indicator interval 1 >` indicates whether the node is in the source set of the minimum cut for the first lambda interval.\n\nSee `src/pseudoflow/c/example` for an example.\n\n## Instructions for Matlab\n\nCopy the content of `src/pseudoflow/matlab` to your current directory.\n\nFrom within Matlab, compile the mex extension with:\n```matlab\n    mex hpfMatlab.c\n```\n\nThe solver is accessible via the `hpf` function with the following signature:\n```matlab\n    [cuts, lambdas, stats, times]  = hpf(arcmatrix, num_nodes, source, sink lambda_range, rounding);\n```\n\n#### Inputs:\n* **arcmatrix**: Each row of the matrix has the following structure: `[from_node, to_node, constant capacity, lambda multiplier]`\n* **num_nodes**: Number of nodes in the graph\n* **source_node**: The numeric label of the source node\n* **sink_node**: The numeric label of the sink node\n* **lambda_range**: [lower bound, upper bound] for the lambda parameter.\n* **rounding**: Set to 1 if negative arc capacities should be rounded to zero, and 0 otherwise.\n\n#### Outputs:\n* **cuts**: n x k matrix where `A(i,j)` is 1 if node `i` is in the source set for lambda interval `j`, and 0 otherwise.\n* **lambdas**: 1 x k matrix where `L(j)` is the upper bound of the lambda interval `j`.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/quic0/pseudoflow", "keywords": "minimum cut,network flow,parametric", "license": "Non-commercial license. Not an open-source license.", "maintainer": "", "maintainer_email": "", "name": "pseudoflow", "package_url": "https://pypi.org/project/pseudoflow/", "platform": "", "project_url": "https://pypi.org/project/pseudoflow/", "project_urls": {"Homepage": "https://github.com/quic0/pseudoflow"}, "release_url": "https://pypi.org/project/pseudoflow/2020.5.1/", "requires_dist": null, "requires_python": "", "summary": "Pseudoflow algorithm for the parametric minimum cut problem.", "version": "2020.5.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Hochbaum's Pseudoflow (HPF) Algorithm for (Linear) Fully Parametric Minimum Cut</h1>\n<p>This package provides a parametric implementation of pseudoflow for minimum cut on directed graphs. In the parametric minimum cut problem, the capacity of source-adjacent arcs is monotone non-decreasing in the parameter <code>lambda</code> whereas the capacity of sink-adjacent arcs is monotone non-increasing in <code>lambda</code>. This solver requires that the capacities of source and sink adjacent arcs are linear in <code>lambda</code>: <code>capacity = constant + multiplier * lambda</code>.</p>\n<p>This fully parametric solver finds the optimal minimum cut for all <code>lambda</code> values in a given range. The solution for all lambda values is represented with <code>O(n)</code> intervals for the parameter lambda. In each interval, the optimal minimum cut remains the same.</p>\n<p>A simple parametric minimum cut solver that provides the optimal minimum cut for a given list of arc capacities is available <a href=\"https://riot.ieor.berkeley.edu/Applications/Pseudoflow/parametric.html\" rel=\"nofollow\">here</a>, and a non-parametric maximum flow version of pseudoflow is available <a href=\"https://riot.ieor.berkeley.edu/Applications/Pseudoflow/maxflow.html\" rel=\"nofollow\">here</a>.</p>\n<p>The package provides interfaces for Python, C, and Matlab.</p>\n<p>This implementation uses a variant of the fully parametric HPF algorithm as described in:</p>\n<blockquote>\n<p>DS Hochbaum (2008), The Pseudoflow algorithm: A new algorithm for the maximum flow problem. Operations Research, 58(4):992-1009.</p>\n</blockquote>\n<p>This implementation does not use <em>free runs</em> nor does it use warm starts with informatiom from previous runs (see pg.15). This implementation should therefore <strong>not be used</strong> for comparison with the fully parametric HPF algorithm.</p>\n<p>The package provides an option to round capacities that are negative for certain lambda values to zero. This option should <strong>only</strong> be used when each node has a source adjacent arc with capacity <code>max(0, a * lambda + b)</code> and a corresponding sink adjacent arc with capacity <code>max(0, -a * lambda - b)</code>. Otherwise, the intersection of the cut capacities is wrongly identified.</p>\n<h2>Instructions for Python</h2>\n<p>Install the package with <code>pip</code>:</p>\n<pre>    pip install pseudoflow\n</pre>\n<h4>Example</h4>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">networkx</span> <span class=\"k\">as</span> <span class=\"nn\">nx</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pseudoflow</span>\n\n<span class=\"n\">G</span> <span class=\"o\">=</span> <span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">DiGraph</span><span class=\"p\">()</span>\n<span class=\"n\">G</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">const</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">mult</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"n\">G</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">const</span><span class=\"o\">=</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"n\">mult</span><span class=\"o\">=-</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">sink</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n<span class=\"n\">lambda_range</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">0.</span><span class=\"p\">,</span> <span class=\"mf\">2.</span><span class=\"p\">]</span>\n\n<span class=\"n\">breakpoints</span><span class=\"p\">,</span> <span class=\"n\">cuts</span><span class=\"p\">,</span> <span class=\"n\">info</span> <span class=\"o\">=</span> <span class=\"n\">pseudoflow</span><span class=\"o\">.</span><span class=\"n\">hpf</span><span class=\"p\">(</span>\n    <span class=\"n\">G</span><span class=\"p\">,</span>  <span class=\"c1\"># Networkx directed graph.</span>\n    <span class=\"n\">source</span><span class=\"p\">,</span>  <span class=\"c1\"># Node id of the source node.</span>\n    <span class=\"n\">sink</span><span class=\"p\">,</span>  <span class=\"c1\"># Node id of the sink node.</span>\n    <span class=\"n\">const_cap</span><span class=\"o\">=</span><span class=\"s2\">\"const\"</span><span class=\"p\">,</span>  <span class=\"c1\"># Edge attribute with the constant capacity.</span>\n    <span class=\"n\">mult_cap</span><span class=\"o\">=</span><span class=\"s2\">\"mult\"</span><span class=\"p\">,</span>  <span class=\"c1\"># Edge attribute with the lambda multiplier.</span>\n    <span class=\"n\">lambdaRange</span><span class=\"o\">=</span><span class=\"n\">lambda_range</span><span class=\"p\">,</span>  <span class=\"c1\"># (lower, upper) bounds for the lambda parameter.</span>\n    <span class=\"n\">roundNegativeCapacity</span><span class=\"o\">=</span><span class=\"kc\">False</span>  <span class=\"c1\"># True if negative arc capacities should be rounded to zero.</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># breakpoints: list of upper bounds for the lambda intervals.</span>\n<span class=\"c1\"># cuts: A dictionary with for each node a list indicating whether</span>\n<span class=\"c1\">#       the node is in the source set of the minimum cut.</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">breakpoints</span><span class=\"p\">)</span>  <span class=\"c1\"># Output: [1., 2.]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">cuts</span><span class=\"p\">)</span>  <span class=\"c1\"># Output: {0: [1, 1], 1: [0, 1], 2: [0, 0]}</span>\n</pre>\n<h2>Instructions for C</h2>\n<p>Navigate to directory <code>src/pseudoflow/c</code>, and compile the <code>hpf</code> executable with <code>make</code>.</p>\n<p>To execute the solver, use:</p>\n<pre>hpf input-file.txt output-file.txt\n</pre>\n<p>The input file should contain the graph structure and is assumed to have the following format:</p>\n<pre><code>    c &lt;comment lines&gt;\n    p &lt;# nodes&gt; &lt;# arcs&gt; &lt;lower bound&gt; &lt;upper bound&gt; &lt;round if negative&gt;\n    n &lt;source node&gt; s\n    n &lt;sink node&gt; t\n    a &lt;from-node&gt; &lt;to-node&gt; &lt;constant capacity&gt; &lt;lambda multiplier&gt;\n</code></pre>\n<p>where the <code>a</code> line is repeated for each arc. The file should satisfy the following conditions:</p>\n<ul>\n<li>Nodes are labeled <code>0 .. &lt;# nodes&gt; - 1</code>.</li>\n<li><code>&lt;lambda multiplier&gt;</code> is non-negative if <code>&lt;from-node&gt; == &lt;source node&gt;</code> and <code>&lt;to-node&gt; != &lt;sink-node&gt;</code>.</li>\n<li><code>&lt;lambda multiplier&gt;</code> is non-positive if <code>&lt;from-node&gt; != &lt;source node&gt;</code> and <code>&lt;to-node&gt; == &lt;sink-node&gt;</code>.</li>\n<li><code>&lt;lambda multiplier&gt;</code> is zero if <code>&lt;from-node&gt; != &lt;source node&gt;</code> and <code>&lt;to-node&gt; != &lt;sink-node&gt;</code>.</li>\n<li><code>&lt;round if negative&gt;</code> takes value 1 if the any negative capacity arc should be rounded to 0, and value 0 otherwise.</li>\n</ul>\n<p>The solver will generate the following output file:</p>\n<pre><code>t &lt;time (in sec) read data&gt; &lt;time (in sec) initialize&gt; &lt;time (in sec) solve&gt;\ns &lt;# arc scans&gt; &lt;# mergers&gt; &lt;# pushes&gt; &lt;# relabels &gt; &lt;# gap &gt;\np &lt;number of lambda intervals = k&gt;\nl &lt;lambda upperbound interval 1&gt; ... &lt;lambda upperbound interval k&gt;\nn &lt;node-id&gt; &lt;sourceset indicator interval 1 &gt; .. &lt;indicator interval k&gt;\n</code></pre>\n<p>The <code>n</code> line appears for each node. <code>&lt;sourceset indicator interval 1 &gt;</code> indicates whether the node is in the source set of the minimum cut for the first lambda interval.</p>\n<p>See <code>src/pseudoflow/c/example</code> for an example.</p>\n<h2>Instructions for Matlab</h2>\n<p>Copy the content of <code>src/pseudoflow/matlab</code> to your current directory.</p>\n<p>From within Matlab, compile the mex extension with:</p>\n<pre>    <span class=\"n\">mex</span> <span class=\"s\">hpfMatlab.c</span>\n</pre>\n<p>The solver is accessible via the <code>hpf</code> function with the following signature:</p>\n<pre>    <span class=\"p\">[</span><span class=\"n\">cuts</span><span class=\"p\">,</span> <span class=\"n\">lambdas</span><span class=\"p\">,</span> <span class=\"n\">stats</span><span class=\"p\">,</span> <span class=\"n\">times</span><span class=\"p\">]</span>  <span class=\"p\">=</span> <span class=\"n\">hpf</span><span class=\"p\">(</span><span class=\"n\">arcmatrix</span><span class=\"p\">,</span> <span class=\"n\">num_nodes</span><span class=\"p\">,</span> <span class=\"n\">source</span><span class=\"p\">,</span> <span class=\"n\">sink</span> <span class=\"n\">lambda_range</span><span class=\"p\">,</span> <span class=\"n\">rounding</span><span class=\"p\">);</span>\n</pre>\n<h4>Inputs:</h4>\n<ul>\n<li><strong>arcmatrix</strong>: Each row of the matrix has the following structure: <code>[from_node, to_node, constant capacity, lambda multiplier]</code></li>\n<li><strong>num_nodes</strong>: Number of nodes in the graph</li>\n<li><strong>source_node</strong>: The numeric label of the source node</li>\n<li><strong>sink_node</strong>: The numeric label of the sink node</li>\n<li><strong>lambda_range</strong>: [lower bound, upper bound] for the lambda parameter.</li>\n<li><strong>rounding</strong>: Set to 1 if negative arc capacities should be rounded to zero, and 0 otherwise.</li>\n</ul>\n<h4>Outputs:</h4>\n<ul>\n<li><strong>cuts</strong>: n x k matrix where <code>A(i,j)</code> is 1 if node <code>i</code> is in the source set for lambda interval <code>j</code>, and 0 otherwise.</li>\n<li><strong>lambdas</strong>: 1 x k matrix where <code>L(j)</code> is the upper bound of the lambda interval <code>j</code>.</li>\n</ul>\n\n          </div>"}, "last_serial": 7177422, "releases": {"2019.6.4": [{"comment_text": "", "digests": {"md5": "e4ebf26d96d2fd47fc1d3eecdbba577a", "sha256": "86b2bed6240d4f5d32e2296b3e462f82daf6455359127af9f1e3d7faa796cbf7"}, "downloads": -1, "filename": "pseudoflow-2019.6.4-cp36-cp36m-win_amd64.whl", "has_sig": false, "md5_digest": "e4ebf26d96d2fd47fc1d3eecdbba577a", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 19245, "upload_time": "2019-06-26T21:29:07", "upload_time_iso_8601": "2019-06-26T21:29:07.990091Z", "url": "https://files.pythonhosted.org/packages/db/5b/54571ed00afe13c9767446c92ca5f52fafdea4c6734e01cb58a2a04bfe47/pseudoflow-2019.6.4-cp36-cp36m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f3d6a69df370089122cd45786362fa51", "sha256": "e40cea3163bee096073ea87b08013377788dc3483e203c52dfba2d22990ecd81"}, "downloads": -1, "filename": "pseudoflow-2019.6.4.tar.gz", "has_sig": false, "md5_digest": "f3d6a69df370089122cd45786362fa51", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 69961, "upload_time": "2019-06-26T21:17:44", "upload_time_iso_8601": "2019-06-26T21:17:44.134837Z", "url": "https://files.pythonhosted.org/packages/a5/6b/078b453b1d881befc50601c51f9ac2345076c7542d73cf8bd47320c39b1c/pseudoflow-2019.6.4.tar.gz", "yanked": false}], "2019.6.5": [{"comment_text": "", "digests": {"md5": "0662a039bf40a988637706f8bc62a8fe", "sha256": "45413655aa22b0f17c050f0cb486cc912d8d984d98995e753eecd85a24bbcbe3"}, "downloads": -1, "filename": "pseudoflow-2019.6.5-cp36-cp36m-win_amd64.whl", "has_sig": false, "md5_digest": "0662a039bf40a988637706f8bc62a8fe", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 18491, "upload_time": "2019-06-26T23:57:35", "upload_time_iso_8601": "2019-06-26T23:57:35.067244Z", "url": "https://files.pythonhosted.org/packages/be/00/e0a8b52eb6367ce90073286c516b03a06b4dbd6ad94beddf1bcd601e3132/pseudoflow-2019.6.5-cp36-cp36m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bc6d0bf9f37fcdf20f02eeb04722207f", "sha256": "a78a2b441d9dd22937e42a3705f4fab43ea16ec2db48003eb492ffb37bd072f7"}, "downloads": -1, "filename": "pseudoflow-2019.6.5.tar.gz", "has_sig": false, "md5_digest": "bc6d0bf9f37fcdf20f02eeb04722207f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 70062, "upload_time": "2019-06-26T23:54:50", "upload_time_iso_8601": "2019-06-26T23:54:50.617790Z", "url": "https://files.pythonhosted.org/packages/36/c1/0c9240937a357ed291a557583b7d89a4f4a0c1ba85e2e856d44e7e1491f6/pseudoflow-2019.6.5.tar.gz", "yanked": false}], "2019.6.6": [{"comment_text": "", "digests": {"md5": "828216e2a4d459db8e5799812c4c2b1d", "sha256": "04c2e2860b528501e6d63439901018ceaa6f5838944f5edf4be6e551fdde6b25"}, "downloads": -1, "filename": "pseudoflow-2019.6.6.tar.gz", "has_sig": false, "md5_digest": "828216e2a4d459db8e5799812c4c2b1d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40375, "upload_time": "2019-06-28T00:24:31", "upload_time_iso_8601": "2019-06-28T00:24:31.614449Z", "url": "https://files.pythonhosted.org/packages/81/13/c7ac97f46c02c1f16e332ac4a34dbe8035afe1864b48cba08649c780dff3/pseudoflow-2019.6.6.tar.gz", "yanked": false}], "2019.8.1": [{"comment_text": "", "digests": {"md5": "b97611d6d56e8e029540625cbfbb146e", "sha256": "c8f832960820d1260f9b9da7e8543af71677ef02a3a7696e185fd96a20ea026a"}, "downloads": -1, "filename": "pseudoflow-2019.8.1.tar.gz", "has_sig": false, "md5_digest": "b97611d6d56e8e029540625cbfbb146e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 119150, "upload_time": "2019-08-16T21:18:45", "upload_time_iso_8601": "2019-08-16T21:18:45.541666Z", "url": "https://files.pythonhosted.org/packages/a8/6d/3aa71a242d2b1e8cbb491b880cae29c2cbbc7b65b1fdb49765d1ffd61202/pseudoflow-2019.8.1.tar.gz", "yanked": false}], "2019.8.2": [{"comment_text": "", "digests": {"md5": "9b0dda0c8bcd41056ff52862efba77cd", "sha256": "cfc8d8ed9362e6e737dfc3425758942ebc151d0615a70e666d3e2099698af18c"}, "downloads": -1, "filename": "pseudoflow-2019.8.2-cp36-cp36m-win_amd64.whl", "has_sig": false, "md5_digest": "9b0dda0c8bcd41056ff52862efba77cd", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 19958, "upload_time": "2019-08-16T21:43:43", "upload_time_iso_8601": "2019-08-16T21:43:43.885719Z", "url": "https://files.pythonhosted.org/packages/93/41/3383621b061c6a2ca91620a569f6bec64badb4bfc4c3c12afefe875f163b/pseudoflow-2019.8.2-cp36-cp36m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "15f5120b6f4d62608a042c21deb80967", "sha256": "d71fab445cb120173e9a1aa56daef3ef876cbe221d17b5500c93975dfeb19ab6"}, "downloads": -1, "filename": "pseudoflow-2019.8.2.tar.gz", "has_sig": false, "md5_digest": "15f5120b6f4d62608a042c21deb80967", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 121447, "upload_time": "2019-08-16T21:42:51", "upload_time_iso_8601": "2019-08-16T21:42:51.443787Z", "url": "https://files.pythonhosted.org/packages/28/55/aca2fb702f5c03b6959a1fb362e8b52bb7275a11198a4bbaa46166acaa2f/pseudoflow-2019.8.2.tar.gz", "yanked": false}], "2019.8.3": [{"comment_text": "", "digests": {"md5": "afc38192d765357d83443a3d7cb26318", "sha256": "8ab4b0dcd5ffcfda1a0c9838553372c8a465e4b66c7613cbf9dac8b2866b6c6c"}, "downloads": -1, "filename": "pseudoflow-2019.8.3-cp36-cp36m-win_amd64.whl", "has_sig": false, "md5_digest": "afc38192d765357d83443a3d7cb26318", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 20005, "upload_time": "2019-08-20T22:58:25", "upload_time_iso_8601": "2019-08-20T22:58:25.592755Z", "url": "https://files.pythonhosted.org/packages/8a/29/83606646f04bbf79c38819457a1a70e43aca4f484da5605e50d2fcd36ddc/pseudoflow-2019.8.3-cp36-cp36m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e21c306986712d78bab76ea877e26b17", "sha256": "d8b915e3b106e45823c5dc52e053b2429cefa93d746af8f7cb992af8e98e90c8"}, "downloads": -1, "filename": "pseudoflow-2019.8.3.tar.gz", "has_sig": false, "md5_digest": "e21c306986712d78bab76ea877e26b17", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 159888, "upload_time": "2019-08-20T22:54:42", "upload_time_iso_8601": "2019-08-20T22:54:42.553575Z", "url": "https://files.pythonhosted.org/packages/08/8a/7f63d430d12079cacaa421697439cc6cc049eb9b30d7f754d1cf7a57373b/pseudoflow-2019.8.3.tar.gz", "yanked": false}], "2020.5.1": [{"comment_text": "", "digests": {"md5": "f144e4b0d6d6316c57af9b2e639bbd82", "sha256": "fe9f02ce730e7f287a61efb23cd0aa32f9e9d21d06fcb62220c3a42b12e35fbe"}, "downloads": -1, "filename": "pseudoflow-2020.5.1.tar.gz", "has_sig": false, "md5_digest": "f144e4b0d6d6316c57af9b2e639bbd82", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 72845, "upload_time": "2020-05-06T04:20:47", "upload_time_iso_8601": "2020-05-06T04:20:47.736309Z", "url": "https://files.pythonhosted.org/packages/f9/ea/0b282db3e49c0f10dc3d112ee26733685cafbf956e5888ad4b2f415795c6/pseudoflow-2020.5.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f144e4b0d6d6316c57af9b2e639bbd82", "sha256": "fe9f02ce730e7f287a61efb23cd0aa32f9e9d21d06fcb62220c3a42b12e35fbe"}, "downloads": -1, "filename": "pseudoflow-2020.5.1.tar.gz", "has_sig": false, "md5_digest": "f144e4b0d6d6316c57af9b2e639bbd82", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 72845, "upload_time": "2020-05-06T04:20:47", "upload_time_iso_8601": "2020-05-06T04:20:47.736309Z", "url": "https://files.pythonhosted.org/packages/f9/ea/0b282db3e49c0f10dc3d112ee26733685cafbf956e5888ad4b2f415795c6/pseudoflow-2020.5.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:15:59 2020"}