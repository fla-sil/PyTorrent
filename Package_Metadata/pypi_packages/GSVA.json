{"info": {"author": "Jason L Weirather", "author_email": "jason.weirather@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Science/Research", "License :: OSI Approved :: Apache Software License", "Topic :: Scientific/Engineering :: Bio-Informatics"], "description": "# GSVA / ssGSEA command-line interface and Python module\n\nThe GSVA (gene-set variance analysis) package from R bioconductor provides efficient computation of single-sample gene-set enrichment analysis (ssGSEA). This pakcage provides a python implmented CLI, and Python module with Pandas inputs and outputs, as well as a docker to run this R package.\n\n* Repository is here: https://github.com/jason-weirather/GSVA\n* Autodoc manual is here:  https://jason-weirather.github.io/GSVA/\n\n##### Disclaimer\n\nI am not the creator or author of GSVA.  This is a CLI and python hook created to make their package easy to use from the command line and python. *This is not the offical site for the GSVA bioconductor package*\n\nFind the official R package here\n\nhttps://doi.org/doi:10.18129/B9.bioc.GSVA\n\n##### And if you find this useful, please cite the author's publication\n\nH\u00e4nzelmann S, Castelo R and Guinney J (2013). \u201cGSVA: gene set variation analysis for microarray and RNA-Seq data.\u201d BMC Bioinformatics, 14, pp. 7. doi: 10.1186/1471-2105-14-7, http://www.biomedcentral.com/1471-2105/14/7.\n\n## Quickstart - CLI through docker\n\n### Execute GSVA in docker\n\nJust be careful to let docker know all the volumes you need to mount.  Here we will do everything in our current directory.\n\n1. Start with an expression csv with gene-wise rows and sample-wise columns\n\n```\n$ cat example_expression.csv | cut -f 1-3 -d ',' | head -n 6 \ngene_name,S-1,S-2\nMT-CO1,13.852,12.328\nMT-CO2,13.405999999999999,12.383\nMT-CO3,13.234000000000002,12.109000000000002\nMT-ATP8,13.805,11.789000000000001\nMT-ATP6,13.5,11.703\n```\n\n2. Use any gene sets in **gmt** format where each row follows the convention `name <tab> description <tab> gene1 <tab> gene2 <tab> ... <tab> geneN`\n\n```\ncat c2.cp.v6.0.symbols.gmt | head -n 6 | cut -f 1-5\nKEGG_GLYCOLYSIS_GLUCONEOGENESIS\thttp://www.broadinstitute.org/gsea/msigdb/cards/KEGG_GLYCOLYSIS_GLUCONEOGENESIS\tACSS2\tGCK\tPGK2\nKEGG_CITRATE_CYCLE_TCA_CYCLE\thttp://www.broadinstitute.org/gsea/msigdb/cards/KEGG_CITRATE_CYCLE_TCA_CYCLE\tIDH3B\tDLST\tPCK2\nKEGG_PENTOSE_PHOSPHATE_PATHWAY\thttp://www.broadinstitute.org/gsea/msigdb/cards/KEGG_PENTOSE_PHOSPHATE_PATHWAY\tRPE\tRPIA\tPGM2\nKEGG_PENTOSE_AND_GLUCURONATE_INTERCONVERSIONS\thttp://www.broadinstitute.org/gsea/msigdb/cards/KEGG_PENTOSE_AND_GLUCURONATE_INTERCONVERSIONS\tUGT1A10\tUGT1A8\tRPE\nKEGG_FRUCTOSE_AND_MANNOSE_METABOLISM\thttp://www.broadinstitute.org/gsea/msigdb/cards/KEGG_FRUCTOSE_AND_MANNOSE_METABOLISM\tMPI\tPMM2\tPMM1\nKEGG_GALACTOSE_METABOLISM\thttp://www.broadinstitute.org/gsea/msigdb/cards/KEGG_GALACTOSE_METABOLISM\tGCK\tGALK1\tGLB1\n```\n\n3. Run GSVA\n\n```\n$ docker run -v $(pwd):$(pwd) vacation/gsva:1.0.4 \\\n    GSVA --gmt $(pwd)/c2.cp.v6.0.symbols.gmt \\\n         $(pwd)/example_expression.csv \\\n         --output $(pwd)/example_pathways.csv\n```\n\n##### You're done.  Thats it.  Enjoy, check your output.\n\nRunning outside of docker on your system is just as easy (actually easier) but you need to have the required programs installed (see below). \n\n```\n$ cat example_pathways.csv | cut -f 1-3 -d ',' | head -n 6\nname,S-1,S-2\nBIOCARTA_41BB_PATHWAY,0.0686308398590944,0.257169127694153\nBIOCARTA_ACE2_PATHWAY,0.11082238459933501,-0.22231034473486602\nBIOCARTA_ACH_PATHWAY,0.514192767265737,0.149291024991685\nBIOCARTA_ACTINY_PATHWAY,-0.0144944990305252,0.407870971955071\nBIOCARTA_AGPCR_PATHWAY,0.6224821629523449,-0.0128449355033173\n```\n\n\n### For more advanced options you can list the options\n\n```\n$ docker run vacation/gsva:1.0.4 GSVA -h\nusage: GSVA [-h] [--tsv_in] --gmt GMT [--tsv_out] [--output OUTPUT]\n            [--meta_output META_OUTPUT] [--method {gsva,ssgsea,zscore,plage}]\n            [--kcdf {Gaussian,Poisson,none}] [--abs_ranking] [--min_sz MIN_SZ]\n            [--max_sz MAX_SZ] [--parallel_sz PARALLEL_SZ]\n            [--parallel_type PARALLEL_TYPE] [--mx_diff MX_DIFF] [--tau TAU]\n            [--ssgsea_norm SSGSEA_NORM] [--verbose]\n            [--tempdir TEMPDIR | --specific_tempdir SPECIFIC_TEMPDIR]\n            input\n\nExecute R bioconductors GSVA\n\noptional arguments:\n  -h, --help            show this help message and exit\n\nInput options:\n  input                 Use - for STDIN\n  --tsv_in              Exepct CSV by default, this overrides to tab (default:\n                        False)\n  --gmt GMT             GMT file with pathways (default: None)\n\nOutput options:\n  --tsv_out             Override the default CSV and output TSV (default:\n                        False)\n  --output OUTPUT, -o OUTPUT\n                        Specifiy path to write transformed data (default:\n                        None)\n  --meta_output META_OUTPUT\n                        Speciify path to output additional run information\n                        (default: None)\n\ncommand options:\n  --method {gsva,ssgsea,zscore,plage}\n                        Method to employ in the estimation of gene-set\n                        enrichment scores per sample. By default this is set\n                        to gsva (Hanzelmann et al, 2013) and other options 6\n                        gsva are ssgsea (Barbie et al, 2009), zscore (Lee et\n                        al, 2008) or plage (Tomfohr et al, 2005). The latter\n                        two standardize first expression profiles into\n                        z-scores over the samples and, in the case of zscore,\n                        it combines them together as their sum divided by the\n                        square-root of the size of the gene set, while in the\n                        case of plage they are used to calculate the singular\n                        value decomposition (SVD) over the genes in the gene\n                        set and use the coefficients of the first right-\n                        singular vector as pathway activity profile. (default:\n                        gsva)\n  --kcdf {Gaussian,Poisson,none}\n                        Character string denoting the kernel to use during the\n                        non-parametric estimation of the cumulative\n                        distribution function of expression levels across\n                        samples when method=\"gsva\". By default,\n                        kcdf=\"Gaussian\" which is suitable when input\n                        expression values are continuous, such as microarray\n                        fluorescent units in logarithmic scale, RNA-seq log-\n                        CPMs, log-RPKMs or log-TPMs. When input expression\n                        values are integer counts, such as those derived from\n                        RNA-seq experiments, then this argument should be set\n                        to kcdf=\"Poisson\". This argument supersedes arguments\n                        rnaseq and kernel, which are deprecated and will be\n                        removed in the next release. (default: Gaussian)\n  --abs_ranking         Flag used only when mx_diff=TRUE. When\n                        abs_ranking=FALSE (default) a modified Kuiper\n                        statistic is used to calculate enrichment scores,\n                        taking the magnitude difference between the largest\n                        positive and negative random walk deviations. When\n                        abs.ranking=TRUE the original Kuiper statistic that\n                        sums the largest positive and negative random walk\n                        deviations, is used. In this latter case, gene sets\n                        with genes enriched on either extreme (high or low)\n                        will be regarded as'highly' activated. (default:\n                        False)\n  --min_sz MIN_SZ       Minimum size of the resulting gene sets. (default: 1)\n  --max_sz MAX_SZ       Maximum size of the resulting gene sets. (default:\n                        None)\n  --parallel_sz PARALLEL_SZ\n                        Number of processors to use when doing the\n                        calculations in parallel. This requires to previously\n                        load either the parallel or the snow library. If\n                        parallel is loaded and this argument is left with its\n                        default value (parallel_sz=0) then it will use all\n                        available core processors unless we set this argument\n                        with a smaller number. If snow is loaded then we must\n                        set this argument to a positive integer number that\n                        specifies the number of processors to employ in the\n                        parallel calculation. (default: 0)\n  --parallel_type PARALLEL_TYPE\n                        Type of cluster architecture when using snow.\n                        (default: SOCK)\n  --mx_diff MX_DIFF     Offers two approaches to calculate the enrichment\n                        statistic (ES) from the KS random walk statistic.\n                        mx_diff=FALSE: ES is calculated as the maximum\n                        distance of the random walk from 0. mx_diff=TRUE\n                        (default): ES is calculated as the magnitude\n                        difference between the largest positive and negative\n                        random walk deviations. (default: True)\n  --tau TAU             Exponent defining the weight of the tail in the random\n                        walk performed by both the gsva (Hanzelmann et al.,\n                        2013) and the ssgsea (Barbie et al., 2009) methods. By\n                        default, this tau=1 when method=\"gsva\" and tau=0.25\n                        when method=\"ssgsea\" just as specified by Barbie et\n                        al. (2009) where this parameter is called alpha.\n                        (default: None)\n  --ssgsea_norm SSGSEA_NORM\n                        Logical, set to TRUE (default) with method=\"ssgsea\"\n                        runs the SSGSEA method from Barbie et al. (2009)\n                        normalizing the scores by the absolute difference\n                        between the minimum and the maximum, as described in\n                        their paper. When ssgsea_norm=FALSE this last\n                        normalization step is skipped. (default: True)\n  --verbose             Gives information about each calculation step.\n                        (default: False)\n\nTemporary folder parameters:\n  --tempdir TEMPDIR     The temporary directory is made and destroyed here.\n                        (default: /tmp)\n  --specific_tempdir SPECIFIC_TEMPDIR\n                        This temporary directory will be used, but will remain\n                        after executing. (default: None)\n```\n\n## Installation\n\n#### Method 1: Install on your system\n\n1. Install R https://www.r-project.org/ \n2. Install the R bioconductor packaqge GSEABase and GSVA \n\n```\n$ Rscript -e 'source(\"http://bioconductor.org/biocLite.R\");\\\n              library(BiocInstaller);\\\n              biocLite(pkgs=c(\"GSEABase\",\"GSVA\"),dep=TRUE)'\n```\n\n3. Install this package `$ pip install GSVA`\n\n#### Method 2: Run GSVA via the docker\n\n`$ docker pull vacation/gsva:latest`\n\n## Use GSVA Python CLI in your python code\n\nFirst install GSVA Python CLI on your system as described above. For details on the `gsva(expression_df,genesets_df,...)` function parameters see https://jason-weirather.github.io/GSVA/ \n\n### Workflow example - Go from an expression-based tSNE plot to a pathway-based tSNE plot in a Jupyter notebook\n\nHere we will convert a per-sample per-gene expression matrix to a per-sample per-pathway enrichment matrix. We will plot the values using tSNE.\n\nThese code snipits and outputs are from a Jupyter notebook.\n\n\n```python\nimport pandas as pd\nfrom GSVA import gsva, gmt_to_dataframe\n# Some extras to look at the high dimensional data\nfrom plotnine import *\nfrom sklearn.manifold import TSNE\n```\n\nRead in a Broad reference pathway gmt file.  Notice the \"member\" and \"name\" fields.  If you make your own dataframe to use, these are the required column names.\n\n```python\ngenesets_df = gmt_to_dataframe('c2.cp.v6.0.symbols.gmt')\ngenesets_df.head()\n```\n\n|\t| description\t                                    | member | name                            |\n|---|---------------------------------------------------|--------|---------------------------------|\n| 0\t| http://www.broadinstitute.org/gsea/msigdb/card... | ACSS2  | KEGG_GLYCOLYSIS_GLUCONEOGENESIS |\n| 1\t| http://www.broadinstitute.org/gsea/msigdb/card... | GCK    | KEGG_GLYCOLYSIS_GLUCONEOGENESIS |\n| 2\t| http://www.broadinstitute.org/gsea/msigdb/card... | PGK2   | KEGG_GLYCOLYSIS_GLUCONEOGENESIS |\n| 3\t| http://www.broadinstitute.org/gsea/msigdb/card... | PGK1   | KEGG_GLYCOLYSIS_GLUCONEOGENESIS |\n| 4\t| http://www.broadinstitute.org/gsea/msigdb/card... | PDHB   | KEGG_GLYCOLYSIS_GLUCONEOGENESIS |\n\nThis example has 200 samples\n\n```python\nexpression_df = pd.read_csv('example_expression.csv',index_col=0)\nexpression_df.iloc[0:5,0:5]\n```\n\n| gene_name | S-1    | S-2    | S-3    | S-4    | S-5    |\n|-----------|--------|--------|--------|--------|--------|\n| MT-CO1    | 13.852 | 12.328 | 13.055 | 11.898 | 10.234 |\n| MT-CO2    | 13.406 | 12.383 | 13.281 | 11.578 | 11.156 |\n| MT-CO3    | 13.234 | 12.109 | 13.352 | 11.531 | 10.422 |\n| MT-ATP8   | 13.805 | 11.789 | 13.414 | 11.883 | 11.141 |\n| MT-ATP6   | 13.500 | 11.703 | 13.227 | 11.219 | 10.836 |\n\n```python\nXV = TSNE(n_components=2).\\\n    fit_transform(expression_df.T)\ndf = pd.DataFrame(XV).rename(columns={0:'x',1:'y'})\n(ggplot(df,aes(x='x',y='y'))\n + geom_point(alpha=0.2)\n)\n```\n\n![Gene Expression](https://i.imgur.com/Qbwds5H.png)\n\nThe default command runs without verbose message output. but take notice, that genes that are not part of the `expression_df` are dropped from the analysis, and depending on your choice of GSVA method, genes for which there is not enough expression (i.e. all zero expression) will be dropped.\n\n```python\npathways_df = gsva(expression_df,genesets_df)\npathways_df.iloc[0:5,0:5]\n```\n\n| name                    | S-1       | S-2       | S-3       | S-4      | S-5       |\n|-------------------------|-----------|-----------|-----------|----------|-----------|\n| BIOCARTA_41BB_PATHWAY   | 0.068631  | 0.257169  | -0.146907 | 0.020151 | -0.234537 |\n| BIOCARTA_ACE2_PATHWAY   | 0.110822  | -0.222310 | -0.161572 | 0.370659 | -0.003318 |\n| BIOCARTA_ACH_PATHWAY    | 0.514193  | 0.149291  | 0.226279  | 0.289960 | 0.016071  |\n| BIOCARTA_ACTINY_PATHWAY | -0.014494 | 0.407871  | -0.062163 | 0.055607 | 0.424726  |\n| BIOCARTA_AGPCR_PATHWAY  | 0.622482  | -0.012845 | 0.317349  | 0.286368 | 0.022540  |\n\n```python\nYV = TSNE(n_components=2).\\\n    fit_transform(pathways_df.T)\npf = pd.DataFrame(YV).rename(columns={0:'x',1:'y'})\n(ggplot(pf,aes(x='x',y='y'))\n + geom_point(alpha=0.2)\n)\n```\n\n![Pathway Enrichment](https://i.imgur.com/2pxjoRr.png)\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jason-weirather/GSVA", "keywords": "bioinformatics,R,enrichment,GSVA,ssGSEA,GSEA,bioconductor", "license": "Apache License, Version 2.0", "maintainer": "", "maintainer_email": "", "name": "GSVA", "package_url": "https://pypi.org/project/GSVA/", "platform": "", "project_url": "https://pypi.org/project/GSVA/", "project_urls": {"Homepage": "https://github.com/jason-weirather/GSVA"}, "release_url": "https://pypi.org/project/GSVA/1.0.6/", "requires_dist": ["pandas"], "requires_python": "", "summary": "Python CLI and module for running the GSVA R bioconductor package with Python Pandas inputs and outputs.", "version": "1.0.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            # GSVA / ssGSEA command-line interface and Python module<br><br>The GSVA (gene-set variance analysis) package from R bioconductor provides efficient computation of single-sample gene-set enrichment analysis (ssGSEA). This pakcage provides a python implmented CLI, and Python module with Pandas inputs and outputs, as well as a docker to run this R package.<br><br>* Repository is here: https://github.com/jason-weirather/GSVA<br>* Autodoc manual is here:  https://jason-weirather.github.io/GSVA/<br><br>##### Disclaimer<br><br>I am not the creator or author of GSVA.  This is a CLI and python hook created to make their package easy to use from the command line and python. *This is not the offical site for the GSVA bioconductor package*<br><br>Find the official R package here<br><br>https://doi.org/doi:10.18129/B9.bioc.GSVA<br><br>##### And if you find this useful, please cite the author's publication<br><br>H\u00e4nzelmann S, Castelo R and Guinney J (2013). \u201cGSVA: gene set variation analysis for microarray and RNA-Seq data.\u201d BMC Bioinformatics, 14, pp. 7. doi: 10.1186/1471-2105-14-7, http://www.biomedcentral.com/1471-2105/14/7.<br><br>## Quickstart - CLI through docker<br><br>### Execute GSVA in docker<br><br>Just be careful to let docker know all the volumes you need to mount.  Here we will do everything in our current directory.<br><br>1. Start with an expression csv with gene-wise rows and sample-wise columns<br><br>```<br>$ cat example_expression.csv | cut -f 1-3 -d ',' | head -n 6 <br>gene_name,S-1,S-2<br>MT-CO1,13.852,12.328<br>MT-CO2,13.405999999999999,12.383<br>MT-CO3,13.234000000000002,12.109000000000002<br>MT-ATP8,13.805,11.789000000000001<br>MT-ATP6,13.5,11.703<br>```<br><br>2. Use any gene sets in **gmt** format where each row follows the convention `name &lt;tab&gt; description &lt;tab&gt; gene1 &lt;tab&gt; gene2 &lt;tab&gt; ... &lt;tab&gt; geneN`<br><br>```<br>cat c2.cp.v6.0.symbols.gmt | head -n 6 | cut -f 1-5<br>KEGG_GLYCOLYSIS_GLUCONEOGENESIS\thttp://www.broadinstitute.org/gsea/msigdb/cards/KEGG_GLYCOLYSIS_GLUCONEOGENESIS\tACSS2\tGCK\tPGK2<br>KEGG_CITRATE_CYCLE_TCA_CYCLE\thttp://www.broadinstitute.org/gsea/msigdb/cards/KEGG_CITRATE_CYCLE_TCA_CYCLE\tIDH3B\tDLST\tPCK2<br>KEGG_PENTOSE_PHOSPHATE_PATHWAY\thttp://www.broadinstitute.org/gsea/msigdb/cards/KEGG_PENTOSE_PHOSPHATE_PATHWAY\tRPE\tRPIA\tPGM2<br>KEGG_PENTOSE_AND_GLUCURONATE_INTERCONVERSIONS\thttp://www.broadinstitute.org/gsea/msigdb/cards/KEGG_PENTOSE_AND_GLUCURONATE_INTERCONVERSIONS\tUGT1A10\tUGT1A8\tRPE<br>KEGG_FRUCTOSE_AND_MANNOSE_METABOLISM\thttp://www.broadinstitute.org/gsea/msigdb/cards/KEGG_FRUCTOSE_AND_MANNOSE_METABOLISM\tMPI\tPMM2\tPMM1<br>KEGG_GALACTOSE_METABOLISM\thttp://www.broadinstitute.org/gsea/msigdb/cards/KEGG_GALACTOSE_METABOLISM\tGCK\tGALK1\tGLB1<br>```<br><br>3. Run GSVA<br><br>```<br>$ docker run -v $(pwd):$(pwd) vacation/gsva:1.0.4 \\<br>    GSVA --gmt $(pwd)/c2.cp.v6.0.symbols.gmt \\<br>         $(pwd)/example_expression.csv \\<br>         --output $(pwd)/example_pathways.csv<br>```<br><br>##### You're done.  Thats it.  Enjoy, check your output.<br><br>Running outside of docker on your system is just as easy (actually easier) but you need to have the required programs installed (see below). <br><br>```<br>$ cat example_pathways.csv | cut -f 1-3 -d ',' | head -n 6<br>name,S-1,S-2<br>BIOCARTA_41BB_PATHWAY,0.0686308398590944,0.257169127694153<br>BIOCARTA_ACE2_PATHWAY,0.11082238459933501,-0.22231034473486602<br>BIOCARTA_ACH_PATHWAY,0.514192767265737,0.149291024991685<br>BIOCARTA_ACTINY_PATHWAY,-0.0144944990305252,0.407870971955071<br>BIOCARTA_AGPCR_PATHWAY,0.6224821629523449,-0.0128449355033173<br>```<br><br><br>### For more advanced options you can list the options<br><br>```<br>$ docker run vacation/gsva:1.0.4 GSVA -h<br>usage: GSVA [-h] [--tsv_in] --gmt GMT [--tsv_out] [--output OUTPUT]<br>            [--meta_output META_OUTPUT] [--method {gsva,ssgsea,zscore,plage}]<br>            [--kcdf {Gaussian,Poisson,none}] [--abs_ranking] [--min_sz MIN_SZ]<br>            [--max_sz MAX_SZ] [--parallel_sz PARALLEL_SZ]<br>            [--parallel_type PARALLEL_TYPE] [--mx_diff MX_DIFF] [--tau TAU]<br>            [--ssgsea_norm SSGSEA_NORM] [--verbose]<br>            [--tempdir TEMPDIR | --specific_tempdir SPECIFIC_TEMPDIR]<br>            input<br><br>Execute R bioconductors GSVA<br><br>optional arguments:<br>  -h, --help            show this help message and exit<br><br>Input options:<br>  input                 Use - for STDIN<br>  --tsv_in              Exepct CSV by default, this overrides to tab (default:<br>                        False)<br>  --gmt GMT             GMT file with pathways (default: None)<br><br>Output options:<br>  --tsv_out             Override the default CSV and output TSV (default:<br>                        False)<br>  --output OUTPUT, -o OUTPUT<br>                        Specifiy path to write transformed data (default:<br>                        None)<br>  --meta_output META_OUTPUT<br>                        Speciify path to output additional run information<br>                        (default: None)<br><br>command options:<br>  --method {gsva,ssgsea,zscore,plage}<br>                        Method to employ in the estimation of gene-set<br>                        enrichment scores per sample. By default this is set<br>                        to gsva (Hanzelmann et al, 2013) and other options 6<br>                        gsva are ssgsea (Barbie et al, 2009), zscore (Lee et<br>                        al, 2008) or plage (Tomfohr et al, 2005). The latter<br>                        two standardize first expression profiles into<br>                        z-scores over the samples and, in the case of zscore,<br>                        it combines them together as their sum divided by the<br>                        square-root of the size of the gene set, while in the<br>                        case of plage they are used to calculate the singular<br>                        value decomposition (SVD) over the genes in the gene<br>                        set and use the coefficients of the first right-<br>                        singular vector as pathway activity profile. (default:<br>                        gsva)<br>  --kcdf {Gaussian,Poisson,none}<br>                        Character string denoting the kernel to use during the<br>                        non-parametric estimation of the cumulative<br>                        distribution function of expression levels across<br>                        samples when method=\"gsva\". By default,<br>                        kcdf=\"Gaussian\" which is suitable when input<br>                        expression values are continuous, such as microarray<br>                        fluorescent units in logarithmic scale, RNA-seq log-<br>                        CPMs, log-RPKMs or log-TPMs. When input expression<br>                        values are integer counts, such as those derived from<br>                        RNA-seq experiments, then this argument should be set<br>                        to kcdf=\"Poisson\". This argument supersedes arguments<br>                        rnaseq and kernel, which are deprecated and will be<br>                        removed in the next release. (default: Gaussian)<br>  --abs_ranking         Flag used only when mx_diff=TRUE. When<br>                        abs_ranking=FALSE (default) a modified Kuiper<br>                        statistic is used to calculate enrichment scores,<br>                        taking the magnitude difference between the largest<br>                        positive and negative random walk deviations. When<br>                        abs.ranking=TRUE the original Kuiper statistic that<br>                        sums the largest positive and negative random walk<br>                        deviations, is used. In this latter case, gene sets<br>                        with genes enriched on either extreme (high or low)<br>                        will be regarded as'highly' activated. (default:<br>                        False)<br>  --min_sz MIN_SZ       Minimum size of the resulting gene sets. (default: 1)<br>  --max_sz MAX_SZ       Maximum size of the resulting gene sets. (default:<br>                        None)<br>  --parallel_sz PARALLEL_SZ<br>                        Number of processors to use when doing the<br>                        calculations in parallel. This requires to previously<br>                        load either the parallel or the snow library. If<br>                        parallel is loaded and this argument is left with its<br>                        default value (parallel_sz=0) then it will use all<br>                        available core processors unless we set this argument<br>                        with a smaller number. If snow is loaded then we must<br>                        set this argument to a positive integer number that<br>                        specifies the number of processors to employ in the<br>                        parallel calculation. (default: 0)<br>  --parallel_type PARALLEL_TYPE<br>                        Type of cluster architecture when using snow.<br>                        (default: SOCK)<br>  --mx_diff MX_DIFF     Offers two approaches to calculate the enrichment<br>                        statistic (ES) from the KS random walk statistic.<br>                        mx_diff=FALSE: ES is calculated as the maximum<br>                        distance of the random walk from 0. mx_diff=TRUE<br>                        (default): ES is calculated as the magnitude<br>                        difference between the largest positive and negative<br>                        random walk deviations. (default: True)<br>  --tau TAU             Exponent defining the weight of the tail in the random<br>                        walk performed by both the gsva (Hanzelmann et al.,<br>                        2013) and the ssgsea (Barbie et al., 2009) methods. By<br>                        default, this tau=1 when method=\"gsva\" and tau=0.25<br>                        when method=\"ssgsea\" just as specified by Barbie et<br>                        al. (2009) where this parameter is called alpha.<br>                        (default: None)<br>  --ssgsea_norm SSGSEA_NORM<br>                        Logical, set to TRUE (default) with method=\"ssgsea\"<br>                        runs the SSGSEA method from Barbie et al. (2009)<br>                        normalizing the scores by the absolute difference<br>                        between the minimum and the maximum, as described in<br>                        their paper. When ssgsea_norm=FALSE this last<br>                        normalization step is skipped. (default: True)<br>  --verbose             Gives information about each calculation step.<br>                        (default: False)<br><br>Temporary folder parameters:<br>  --tempdir TEMPDIR     The temporary directory is made and destroyed here.<br>                        (default: /tmp)<br>  --specific_tempdir SPECIFIC_TEMPDIR<br>                        This temporary directory will be used, but will remain<br>                        after executing. (default: None)<br>```<br><br>## Installation<br><br>#### Method 1: Install on your system<br><br>1. Install R https://www.r-project.org/ <br>2. Install the R bioconductor packaqge GSEABase and GSVA <br><br>```<br>$ Rscript -e 'source(\"http://bioconductor.org/biocLite.R\");\\<br>              library(BiocInstaller);\\<br>              biocLite(pkgs=c(\"GSEABase\",\"GSVA\"),dep=TRUE)'<br>```<br><br>3. Install this package `$ pip install GSVA`<br><br>#### Method 2: Run GSVA via the docker<br><br>`$ docker pull vacation/gsva:latest`<br><br>## Use GSVA Python CLI in your python code<br><br>First install GSVA Python CLI on your system as described above. For details on the `gsva(expression_df,genesets_df,...)` function parameters see https://jason-weirather.github.io/GSVA/ <br><br>### Workflow example - Go from an expression-based tSNE plot to a pathway-based tSNE plot in a Jupyter notebook<br><br>Here we will convert a per-sample per-gene expression matrix to a per-sample per-pathway enrichment matrix. We will plot the values using tSNE.<br><br>These code snipits and outputs are from a Jupyter notebook.<br><br><br>```python<br>import pandas as pd<br>from GSVA import gsva, gmt_to_dataframe<br># Some extras to look at the high dimensional data<br>from plotnine import *<br>from sklearn.manifold import TSNE<br>```<br><br>Read in a Broad reference pathway gmt file.  Notice the \"member\" and \"name\" fields.  If you make your own dataframe to use, these are the required column names.<br><br>```python<br>genesets_df = gmt_to_dataframe('c2.cp.v6.0.symbols.gmt')<br>genesets_df.head()<br>```<br><br>|\t| description\t                                    | member | name                            |<br>|---|---------------------------------------------------|--------|---------------------------------|<br>| 0\t| http://www.broadinstitute.org/gsea/msigdb/card... | ACSS2  | KEGG_GLYCOLYSIS_GLUCONEOGENESIS |<br>| 1\t| http://www.broadinstitute.org/gsea/msigdb/card... | GCK    | KEGG_GLYCOLYSIS_GLUCONEOGENESIS |<br>| 2\t| http://www.broadinstitute.org/gsea/msigdb/card... | PGK2   | KEGG_GLYCOLYSIS_GLUCONEOGENESIS |<br>| 3\t| http://www.broadinstitute.org/gsea/msigdb/card... | PGK1   | KEGG_GLYCOLYSIS_GLUCONEOGENESIS |<br>| 4\t| http://www.broadinstitute.org/gsea/msigdb/card... | PDHB   | KEGG_GLYCOLYSIS_GLUCONEOGENESIS |<br><br>This example has 200 samples<br><br>```python<br>expression_df = pd.read_csv('example_expression.csv',index_col=0)<br>expression_df.iloc[0:5,0:5]<br>```<br><br>| gene_name | S-1    | S-2    | S-3    | S-4    | S-5    |<br>|-----------|--------|--------|--------|--------|--------|<br>| MT-CO1    | 13.852 | 12.328 | 13.055 | 11.898 | 10.234 |<br>| MT-CO2    | 13.406 | 12.383 | 13.281 | 11.578 | 11.156 |<br>| MT-CO3    | 13.234 | 12.109 | 13.352 | 11.531 | 10.422 |<br>| MT-ATP8   | 13.805 | 11.789 | 13.414 | 11.883 | 11.141 |<br>| MT-ATP6   | 13.500 | 11.703 | 13.227 | 11.219 | 10.836 |<br><br>```python<br>XV = TSNE(n_components=2).\\<br>    fit_transform(expression_df.T)<br>df = pd.DataFrame(XV).rename(columns={0:'x',1:'y'})<br>(ggplot(df,aes(x='x',y='y'))<br> + geom_point(alpha=0.2)<br>)<br>```<br><br>![Gene Expression](https://i.imgur.com/Qbwds5H.png)<br><br>The default command runs without verbose message output. but take notice, that genes that are not part of the `expression_df` are dropped from the analysis, and depending on your choice of GSVA method, genes for which there is not enough expression (i.e. all zero expression) will be dropped.<br><br>```python<br>pathways_df = gsva(expression_df,genesets_df)<br>pathways_df.iloc[0:5,0:5]<br>```<br><br>| name                    | S-1       | S-2       | S-3       | S-4      | S-5       |<br>|-------------------------|-----------|-----------|-----------|----------|-----------|<br>| BIOCARTA_41BB_PATHWAY   | 0.068631  | 0.257169  | -0.146907 | 0.020151 | -0.234537 |<br>| BIOCARTA_ACE2_PATHWAY   | 0.110822  | -0.222310 | -0.161572 | 0.370659 | -0.003318 |<br>| BIOCARTA_ACH_PATHWAY    | 0.514193  | 0.149291  | 0.226279  | 0.289960 | 0.016071  |<br>| BIOCARTA_ACTINY_PATHWAY | -0.014494 | 0.407871  | -0.062163 | 0.055607 | 0.424726  |<br>| BIOCARTA_AGPCR_PATHWAY  | 0.622482  | -0.012845 | 0.317349  | 0.286368 | 0.022540  |<br><br>```python<br>YV = TSNE(n_components=2).\\<br>    fit_transform(pathways_df.T)<br>pf = pd.DataFrame(YV).rename(columns={0:'x',1:'y'})<br>(ggplot(pf,aes(x='x',y='y'))<br> + geom_point(alpha=0.2)<br>)<br>```<br><br>![Pathway Enrichment](https://i.imgur.com/2pxjoRr.png)<br><br><br>\n          </div>"}, "last_serial": 4040861, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "2a8e0f788a6f9ce3e42924c78fe730f5", "sha256": "2095c4d641e34a46bf183b4138de112b25a30b8d923cf8417989dc2226f31f85"}, "downloads": -1, "filename": "GSVA-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "2a8e0f788a6f9ce3e42924c78fe730f5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8003, "upload_time": "2018-02-05T00:43:04", "upload_time_iso_8601": "2018-02-05T00:43:04.077332Z", "url": "https://files.pythonhosted.org/packages/65/08/a1157d327d3553b35e9776bb6438f08fef17013c7910851cbfde7bb50c0d/GSVA-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "591d6e58c5d0045ed9def44c4cbee80a", "sha256": "c54a7204792b25239905333d44ddd76e70b563db9f00a3ca5bbf47b7788afbf7"}, "downloads": -1, "filename": "GSVA-1.0.0.tar.gz", "has_sig": false, "md5_digest": "591d6e58c5d0045ed9def44c4cbee80a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6045, "upload_time": "2018-02-05T00:43:05", "upload_time_iso_8601": "2018-02-05T00:43:05.612783Z", "url": "https://files.pythonhosted.org/packages/98/e8/524efe79076245d396800ebcc3ba9f004309db18bc77081915f06a195a80/GSVA-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "ce2629c465b9fb26e35d47366d65ffbe", "sha256": "facdb88f21f1c8b559f05447abfb8cd13aba0b88e5868e5f68e13c5817e9a19d"}, "downloads": -1, "filename": "GSVA-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "ce2629c465b9fb26e35d47366d65ffbe", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8079, "upload_time": "2018-02-05T02:03:25", "upload_time_iso_8601": "2018-02-05T02:03:25.300747Z", "url": "https://files.pythonhosted.org/packages/f9/d1/62401b011ecc04fa86ab5abd016f55fc068a9f2e6a87e3473f5dac12a6ca/GSVA-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "37514c299401917e9d75ba6c211627ef", "sha256": "323dcf65df3131e186d586fbf6181d2dad65245ade65644ab7db6c523db25f0e"}, "downloads": -1, "filename": "GSVA-1.0.1.tar.gz", "has_sig": false, "md5_digest": "37514c299401917e9d75ba6c211627ef", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6203, "upload_time": "2018-02-05T02:03:26", "upload_time_iso_8601": "2018-02-05T02:03:26.764023Z", "url": "https://files.pythonhosted.org/packages/ce/c0/b7736c1e72fbb49b8c15ece50fbc6903b18b851891c13040747b982a26cc/GSVA-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "ebae397e83e9802725fb9ff8918b2c03", "sha256": "af617b248437015da3bfbfbf663f1a3ab95075a3b0a20e7d4816c7f5a3668e50"}, "downloads": -1, "filename": "GSVA-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "ebae397e83e9802725fb9ff8918b2c03", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8794, "upload_time": "2018-02-05T02:23:07", "upload_time_iso_8601": "2018-02-05T02:23:07.068804Z", "url": "https://files.pythonhosted.org/packages/29/ac/d001bdffa9cce7eb0c9644780c1a87972fd0d66df71da3530fbc231891c3/GSVA-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c23aa2f89efdf2a40b000ad668936afd", "sha256": "38277a1148c1bbcf684843c0d9a6717d96b9d4ea2ab7f0ee3524c3abeb250386"}, "downloads": -1, "filename": "GSVA-1.0.2.tar.gz", "has_sig": false, "md5_digest": "c23aa2f89efdf2a40b000ad668936afd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6729, "upload_time": "2018-02-05T02:23:08", "upload_time_iso_8601": "2018-02-05T02:23:08.127330Z", "url": "https://files.pythonhosted.org/packages/20/7d/261b8bbbb9b4bcb576463f57db0767c8722e571cc650c8633f418f59e418/GSVA-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "75b1912e6e87c8748a192031d8318c3a", "sha256": "2973694957576b60edd1633ef5c6e906fba3723651172edf7488909354d2232b"}, "downloads": -1, "filename": "GSVA-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "75b1912e6e87c8748a192031d8318c3a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8733, "upload_time": "2018-02-05T13:44:40", "upload_time_iso_8601": "2018-02-05T13:44:40.904931Z", "url": "https://files.pythonhosted.org/packages/81/6f/be4ae3612809a4d75ccce00e20d849d0bed0baf15f27e8d15319d5f48762/GSVA-1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "10d43e1a47e9c03c46f1e2a8ab738001", "sha256": "703d0a9de9509b6f1e98a9cc79e89574da438c31fe5a46c00b08bf54b9b70683"}, "downloads": -1, "filename": "GSVA-1.0.3.tar.gz", "has_sig": false, "md5_digest": "10d43e1a47e9c03c46f1e2a8ab738001", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6685, "upload_time": "2018-02-05T13:44:42", "upload_time_iso_8601": "2018-02-05T13:44:42.306513Z", "url": "https://files.pythonhosted.org/packages/fc/fd/ce585618d72d3162257821a9099b127e33cdce07a503d34bbf26e8dcf884/GSVA-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "f5867000c5ffaf1b26c70e65e30fec6f", "sha256": "a01d2762b0ed8ce9ef869a60e2b0c639987dae38163cc329d89a3c20bc375b47"}, "downloads": -1, "filename": "GSVA-1.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "f5867000c5ffaf1b26c70e65e30fec6f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11497, "upload_time": "2018-02-05T15:00:52", "upload_time_iso_8601": "2018-02-05T15:00:52.987469Z", "url": "https://files.pythonhosted.org/packages/63/fd/17b86dc7fbae675eca81fb02f628be24440882943a6ca3d2f7b6521a6184/GSVA-1.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a22d189fac377ca8b55d6bd61b3dcde9", "sha256": "4bc6251476de734958ddac320969b3bbf74cc14d7f5d439e517122ea93648a49"}, "downloads": -1, "filename": "GSVA-1.0.4.tar.gz", "has_sig": false, "md5_digest": "a22d189fac377ca8b55d6bd61b3dcde9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8257, "upload_time": "2018-02-05T15:00:56", "upload_time_iso_8601": "2018-02-05T15:00:56.299789Z", "url": "https://files.pythonhosted.org/packages/a9/34/2c64b221b3f04ca2869d4645b0042f4d6e56f3daabb7fbc77f2a6af3e675/GSVA-1.0.4.tar.gz", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "d3b7ca426b127b01c101e46316c8a4f8", "sha256": "c697308fdeab2facd94400de2a0f7f75921e28ccec7a15b1926c25786d764e4a"}, "downloads": -1, "filename": "GSVA-1.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "d3b7ca426b127b01c101e46316c8a4f8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18439, "upload_time": "2018-03-06T15:27:36", "upload_time_iso_8601": "2018-03-06T15:27:36.184481Z", "url": "https://files.pythonhosted.org/packages/c3/f9/a2c0e92f463d243a9d88e8bcca56056a4c9f7e9057c2691a1cf2198564b2/GSVA-1.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "07531a0ec113d2e37171ee2b3bdc6fca", "sha256": "7981b4c9382ce65eab74d0bebe87c014f2c3f6ea059d38a58b639a62a771f128"}, "downloads": -1, "filename": "GSVA-1.0.5.tar.gz", "has_sig": false, "md5_digest": "07531a0ec113d2e37171ee2b3bdc6fca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11323, "upload_time": "2018-03-06T15:27:37", "upload_time_iso_8601": "2018-03-06T15:27:37.855099Z", "url": "https://files.pythonhosted.org/packages/90/b5/66127b8616ea0832aea8abffd8a267be8d8f101fb9391b4834eef29db5d6/GSVA-1.0.5.tar.gz", "yanked": false}], "1.0.6": [{"comment_text": "", "digests": {"md5": "788dec166139b75be041b339428854c0", "sha256": "c655593bfcd7b1016fcfbfa9cf681ebbabf1744e856ae11a877ebfba1737e71b"}, "downloads": -1, "filename": "GSVA-1.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "788dec166139b75be041b339428854c0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18445, "upload_time": "2018-07-08T15:22:47", "upload_time_iso_8601": "2018-07-08T15:22:47.241077Z", "url": "https://files.pythonhosted.org/packages/c9/5b/dea37b86c9ac442579f7acdf538d04b077b81cf24da8455f204991e9882c/GSVA-1.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fad6de38a625e1af1d367219c843d998", "sha256": "4131f839fa29a13ef61dd191211361fcb6d53f0b64475a6fde82ec0c25472752"}, "downloads": -1, "filename": "GSVA-1.0.6.tar.gz", "has_sig": false, "md5_digest": "fad6de38a625e1af1d367219c843d998", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12301, "upload_time": "2018-07-08T15:22:48", "upload_time_iso_8601": "2018-07-08T15:22:48.500963Z", "url": "https://files.pythonhosted.org/packages/e5/64/75cbd888bbd1574a16f89a49bdaf66d394c3d088b40929a334179d51770f/GSVA-1.0.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "788dec166139b75be041b339428854c0", "sha256": "c655593bfcd7b1016fcfbfa9cf681ebbabf1744e856ae11a877ebfba1737e71b"}, "downloads": -1, "filename": "GSVA-1.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "788dec166139b75be041b339428854c0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18445, "upload_time": "2018-07-08T15:22:47", "upload_time_iso_8601": "2018-07-08T15:22:47.241077Z", "url": "https://files.pythonhosted.org/packages/c9/5b/dea37b86c9ac442579f7acdf538d04b077b81cf24da8455f204991e9882c/GSVA-1.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fad6de38a625e1af1d367219c843d998", "sha256": "4131f839fa29a13ef61dd191211361fcb6d53f0b64475a6fde82ec0c25472752"}, "downloads": -1, "filename": "GSVA-1.0.6.tar.gz", "has_sig": false, "md5_digest": "fad6de38a625e1af1d367219c843d998", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12301, "upload_time": "2018-07-08T15:22:48", "upload_time_iso_8601": "2018-07-08T15:22:48.500963Z", "url": "https://files.pythonhosted.org/packages/e5/64/75cbd888bbd1574a16f89a49bdaf66d394c3d088b40929a334179d51770f/GSVA-1.0.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:53:35 2020"}