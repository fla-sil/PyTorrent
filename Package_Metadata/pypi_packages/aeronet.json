{"info": {"author": "Pavel Yakubovskiy", "author_email": "qubvel@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy"], "description": "\n# Aeronet\nPython library to work with geospatial raster and vector data.\n\n### Modules\n#### .backend\nKeras losses (tensorflow backend)\n - .losses  \n -- `jaccard_loss`  \n -- `bce_jaccard_loss`  \n -- `cce_jaccard_loss`  \n -- `custom_bce_jaccard_loss`\n - .metrics  \n -- `iou_score`  \n -- `f_score`  \n -- `f1_score`  \n\n #### .criterions\n Metrics to work with spatial data\n - .raster  \n -- `IoU`  \n -- `mIoU`  \n - .vector  \n -- `mAP50`/`mAP5095`/`mAPxx` - instance-wise metric  \n -- `area_iou`  \n\n #### .dataset\n - .raster  \n -- `Band`/`BandCollection`  \n -- `BandSample`/`BandSampleCollection`\n - .vector  \n -- `Feature`/`FeatureCollection`\n - .transforms  \n -- `polygonize`  \n -- `rasterize`\n - .io  \n -- `Predictor`  \n -- `WindowReader`  \n -- `SampleWindowWriter`  \n -- `SampleCollectionWindowWriter`  \n - .visualization  \n -- `add_mask`\n\n\n### Quick start\n\n```python\nimport os\nimport matpoltib.pyplpot as plt \n\nfrom aeronet.dataset import BandCollection\nfrom aeronet.dataset import RandomDataset\n\nfrom aeronet.dataset.utils import parse_directory\nfrom aeronet.dataset.visualization import add_mask\n\n# configuration\nSRC_DIR = '/path/to/elements/'\nchannels = ['RED', 'GRN', 'BLU']\nlabels = ['100']\n\n# directories of dataset elements\ndirs = [os.path.join(SRC_DIR, x) for x in os.listdir(SRC_DIR)]\nprint('Found collections: ', len(dirs), end='\\n\\n')\n\n# parse channels in directories\nband_paths = [parse_direcotry(x, channels + labels) for x in dirs]\nprint('BandCollection 0 paths:\\n', band_paths[0], end='\\n\\n')\n\n# convert to `BandCollection` objects\nband_collections = [BandCollection(fps) for fps in band_paths]\nprint('BandCollection 0 object:\\n', repr(band_collections[0]))\n\n\n# create random dataset sampler\ndataset = RandomDataset(band_collections, \n                        sample_size=(512, 512), \n                        input_channels=channels, \n                        output_labels=labels,\n                        transform=None) # pre-processing function\n\n# get random sample\ngenerated_sample = dataset[0]\nimage = generated_sample['image']\nmask = generated_sample['mask']\n\n#visualize\nmasked_image = add_mask(image, mask)\n\nplt.figure(figsize=(10,10))\nplt.imshow(masked_image)\nplt.show()                    \n\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "aeronet", "package_url": "https://pypi.org/project/aeronet/", "platform": "", "project_url": "https://pypi.org/project/aeronet/", "project_urls": null, "release_url": "https://pypi.org/project/aeronet/0.0.7/", "requires_dist": null, "requires_python": ">=3.6.0", "summary": "Deep learning with remote sensing data.", "version": "0.0.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Aeronet</h1>\n<p>Python library to work with geospatial raster and vector data.</p>\n<h3>Modules</h3>\n<h4>.backend</h4>\n<p>Keras losses (tensorflow backend)</p>\n<ul>\n<li>.losses<br>\n-- <code>jaccard_loss</code><br>\n-- <code>bce_jaccard_loss</code><br>\n-- <code>cce_jaccard_loss</code><br>\n-- <code>custom_bce_jaccard_loss</code></li>\n<li>.metrics<br>\n-- <code>iou_score</code><br>\n-- <code>f_score</code><br>\n-- <code>f1_score</code></li>\n</ul>\n<h4>.criterions</h4>\n<p>Metrics to work with spatial data</p>\n<ul>\n<li>.raster<br>\n-- <code>IoU</code><br>\n-- <code>mIoU</code></li>\n<li>.vector<br>\n-- <code>mAP50</code>/<code>mAP5095</code>/<code>mAPxx</code> - instance-wise metric<br>\n-- <code>area_iou</code></li>\n</ul>\n<h4>.dataset</h4>\n<ul>\n<li>.raster<br>\n-- <code>Band</code>/<code>BandCollection</code><br>\n-- <code>BandSample</code>/<code>BandSampleCollection</code></li>\n<li>.vector<br>\n-- <code>Feature</code>/<code>FeatureCollection</code></li>\n<li>.transforms<br>\n-- <code>polygonize</code><br>\n-- <code>rasterize</code></li>\n<li>.io<br>\n-- <code>Predictor</code><br>\n-- <code>WindowReader</code><br>\n-- <code>SampleWindowWriter</code><br>\n-- <code>SampleCollectionWindowWriter</code></li>\n<li>.visualization<br>\n-- <code>add_mask</code></li>\n</ul>\n<h3>Quick start</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">matpoltib.pyplpot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span> \n\n<span class=\"kn\">from</span> <span class=\"nn\">aeronet.dataset</span> <span class=\"kn\">import</span> <span class=\"n\">BandCollection</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aeronet.dataset</span> <span class=\"kn\">import</span> <span class=\"n\">RandomDataset</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">aeronet.dataset.utils</span> <span class=\"kn\">import</span> <span class=\"n\">parse_directory</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aeronet.dataset.visualization</span> <span class=\"kn\">import</span> <span class=\"n\">add_mask</span>\n\n<span class=\"c1\"># configuration</span>\n<span class=\"n\">SRC_DIR</span> <span class=\"o\">=</span> <span class=\"s1\">'/path/to/elements/'</span>\n<span class=\"n\">channels</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'RED'</span><span class=\"p\">,</span> <span class=\"s1\">'GRN'</span><span class=\"p\">,</span> <span class=\"s1\">'BLU'</span><span class=\"p\">]</span>\n<span class=\"n\">labels</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'100'</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># directories of dataset elements</span>\n<span class=\"n\">dirs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">SRC_DIR</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">listdir</span><span class=\"p\">(</span><span class=\"n\">SRC_DIR</span><span class=\"p\">)]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Found collections: '</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">dirs</span><span class=\"p\">),</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s1\">'</span><span class=\"se\">\\n\\n</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># parse channels in directories</span>\n<span class=\"n\">band_paths</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">parse_direcotry</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">channels</span> <span class=\"o\">+</span> <span class=\"n\">labels</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">dirs</span><span class=\"p\">]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'BandCollection 0 paths:</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"n\">band_paths</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s1\">'</span><span class=\"se\">\\n\\n</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># convert to `BandCollection` objects</span>\n<span class=\"n\">band_collections</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">BandCollection</span><span class=\"p\">(</span><span class=\"n\">fps</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">fps</span> <span class=\"ow\">in</span> <span class=\"n\">band_paths</span><span class=\"p\">]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'BandCollection 0 object:</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">band_collections</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]))</span>\n\n\n<span class=\"c1\"># create random dataset sampler</span>\n<span class=\"n\">dataset</span> <span class=\"o\">=</span> <span class=\"n\">RandomDataset</span><span class=\"p\">(</span><span class=\"n\">band_collections</span><span class=\"p\">,</span> \n                        <span class=\"n\">sample_size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"mi\">512</span><span class=\"p\">),</span> \n                        <span class=\"n\">input_channels</span><span class=\"o\">=</span><span class=\"n\">channels</span><span class=\"p\">,</span> \n                        <span class=\"n\">output_labels</span><span class=\"o\">=</span><span class=\"n\">labels</span><span class=\"p\">,</span>\n                        <span class=\"n\">transform</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span> <span class=\"c1\"># pre-processing function</span>\n\n<span class=\"c1\"># get random sample</span>\n<span class=\"n\">generated_sample</span> <span class=\"o\">=</span> <span class=\"n\">dataset</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">generated_sample</span><span class=\"p\">[</span><span class=\"s1\">'image'</span><span class=\"p\">]</span>\n<span class=\"n\">mask</span> <span class=\"o\">=</span> <span class=\"n\">generated_sample</span><span class=\"p\">[</span><span class=\"s1\">'mask'</span><span class=\"p\">]</span>\n\n<span class=\"c1\">#visualize</span>\n<span class=\"n\">masked_image</span> <span class=\"o\">=</span> <span class=\"n\">add_mask</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">,</span> <span class=\"n\">mask</span><span class=\"p\">)</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">(</span><span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">))</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">masked_image</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>                    \n</pre>\n\n          </div>"}, "last_serial": 6531907, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "10989469b70dfce71191cc0b65ba2a40", "sha256": "b1ad9f6abdbcb55376b84add290218cd2c0958c89c5c6e9a734d22692e89564f"}, "downloads": -1, "filename": "aeronet-0.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "10989469b70dfce71191cc0b65ba2a40", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.0", "size": 20505, "upload_time": "2018-10-18T08:57:21", "upload_time_iso_8601": "2018-10-18T08:57:21.756202Z", "url": "https://files.pythonhosted.org/packages/ae/6f/d14e5689e2df93b4b04aaad8bcd16351fc60f4bc54e704ec7020630ea966/aeronet-0.0.2-py2.py3-none-any.whl", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "a219241ca16b5693bd58d8b8b482d744", "sha256": "ec15f203039c2ba23c263607aa5ab7a4991726d5b20c5dc69799f4fc0191b8ee"}, "downloads": -1, "filename": "aeronet-0.0.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a219241ca16b5693bd58d8b8b482d744", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.0", "size": 25151, "upload_time": "2018-12-12T13:19:48", "upload_time_iso_8601": "2018-12-12T13:19:48.891518Z", "url": "https://files.pythonhosted.org/packages/39/88/5ea80a5b02d0def3d433a2ab258957d5f292d8ffc3913fb14fe846f5f5be/aeronet-0.0.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6a8e2cb94f8ed3d90708eaa86722b6c2", "sha256": "61d9d32b2ddb115323bc946116c382ee4383de2031d549fc91bff91888586e06"}, "downloads": -1, "filename": "aeronet-0.0.3.tar.gz", "has_sig": false, "md5_digest": "6a8e2cb94f8ed3d90708eaa86722b6c2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 17775, "upload_time": "2018-12-12T13:19:50", "upload_time_iso_8601": "2018-12-12T13:19:50.440416Z", "url": "https://files.pythonhosted.org/packages/1b/fa/2faa8e1280a56c2dd585cbc3c32973201a201a6da0e733653511f0e38908/aeronet-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "926c524a2b2e27d453421e7756da90b9", "sha256": "53b0d568d938a6ca8a71bd34447ccc54c4e35cb0962e96bf3ec19241b57434c5"}, "downloads": -1, "filename": "aeronet-0.0.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "926c524a2b2e27d453421e7756da90b9", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.0", "size": 25355, "upload_time": "2019-04-12T10:04:05", "upload_time_iso_8601": "2019-04-12T10:04:05.146280Z", "url": "https://files.pythonhosted.org/packages/33/bb/08970856e9c33c8ecb66d200ff111a65d828e331b795ce15d28eef1e37f9/aeronet-0.0.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f0b311d1c533d0b585c5f50fefe481fa", "sha256": "909cdb68e899dc5163e31151d1670fd44e89b224a8ee9d0767eb1c7c7cc24a29"}, "downloads": -1, "filename": "aeronet-0.0.4.tar.gz", "has_sig": false, "md5_digest": "f0b311d1c533d0b585c5f50fefe481fa", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 18554, "upload_time": "2019-04-12T10:04:06", "upload_time_iso_8601": "2019-04-12T10:04:06.794682Z", "url": "https://files.pythonhosted.org/packages/d9/d3/42554a04963d8e5751ce8a94118b06d1bcd5aeb7722b4aa56ba059128087/aeronet-0.0.4.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "9f3a9c6af80f27e2dbb25b8942e35ddc", "sha256": "9aca8a4a5dfce452f55d3bb01bd6ae1e1e8861f7f3dcb606a805e115970772cf"}, "downloads": -1, "filename": "aeronet-0.0.6-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "9f3a9c6af80f27e2dbb25b8942e35ddc", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.0", "size": 23691, "upload_time": "2019-04-16T16:14:16", "upload_time_iso_8601": "2019-04-16T16:14:16.830655Z", "url": "https://files.pythonhosted.org/packages/d3/cb/18dd7a5259986d591123bae94b894df770e6b79b8ec1b372da0c90875305/aeronet-0.0.6-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4efeeae7759b1f07cbc79a46ad35ed5e", "sha256": "300e98d84db7a441d511b3cb41192bd9a332f536c808218ff6147e643fe77761"}, "downloads": -1, "filename": "aeronet-0.0.6.tar.gz", "has_sig": false, "md5_digest": "4efeeae7759b1f07cbc79a46ad35ed5e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 18589, "upload_time": "2019-04-16T16:14:18", "upload_time_iso_8601": "2019-04-16T16:14:18.448545Z", "url": "https://files.pythonhosted.org/packages/d5/73/596363557a701b2caf4854505e5296d975553431b228e23062d629da2d16/aeronet-0.0.6.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "af695c11ebcc182a7aac009d3050349c", "sha256": "ecf2cdd14c66581903d7a944490167ee64ebe6fcc74d053c7f594c963871e8bb"}, "downloads": -1, "filename": "aeronet-0.0.7-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "af695c11ebcc182a7aac009d3050349c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.0", "size": 24992, "upload_time": "2020-01-28T12:23:51", "upload_time_iso_8601": "2020-01-28T12:23:51.340837Z", "url": "https://files.pythonhosted.org/packages/df/5d/b4bcb01b600983b0d0c6147ea04b2d336483fd2ece3fd2d0386ddd698a56/aeronet-0.0.7-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8f8c4236e9f944b6aab84bcb409497a3", "sha256": "9d57ebebe39452ec9d784aaa7fcd0826812a24f08f80c78aee3f52ba9e4c44c1"}, "downloads": -1, "filename": "aeronet-0.0.7.tar.gz", "has_sig": false, "md5_digest": "8f8c4236e9f944b6aab84bcb409497a3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 19021, "upload_time": "2020-01-28T12:23:52", "upload_time_iso_8601": "2020-01-28T12:23:52.737946Z", "url": "https://files.pythonhosted.org/packages/1d/cc/b4000a6c1be257241f7afdfdec4ae2ef4805e58a24bdfc6b8af4ee2bfcc0/aeronet-0.0.7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "af695c11ebcc182a7aac009d3050349c", "sha256": "ecf2cdd14c66581903d7a944490167ee64ebe6fcc74d053c7f594c963871e8bb"}, "downloads": -1, "filename": "aeronet-0.0.7-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "af695c11ebcc182a7aac009d3050349c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.0", "size": 24992, "upload_time": "2020-01-28T12:23:51", "upload_time_iso_8601": "2020-01-28T12:23:51.340837Z", "url": "https://files.pythonhosted.org/packages/df/5d/b4bcb01b600983b0d0c6147ea04b2d336483fd2ece3fd2d0386ddd698a56/aeronet-0.0.7-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8f8c4236e9f944b6aab84bcb409497a3", "sha256": "9d57ebebe39452ec9d784aaa7fcd0826812a24f08f80c78aee3f52ba9e4c44c1"}, "downloads": -1, "filename": "aeronet-0.0.7.tar.gz", "has_sig": false, "md5_digest": "8f8c4236e9f944b6aab84bcb409497a3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 19021, "upload_time": "2020-01-28T12:23:52", "upload_time_iso_8601": "2020-01-28T12:23:52.737946Z", "url": "https://files.pythonhosted.org/packages/1d/cc/b4000a6c1be257241f7afdfdec4ae2ef4805e58a24bdfc6b8af4ee2bfcc0/aeronet-0.0.7.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:22:55 2020"}