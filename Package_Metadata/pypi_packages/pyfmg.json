{"info": {"author": "p4r4n0y1ng", "author_email": "jhuber@fortinet.com", "bugtrack_url": null, "classifiers": [], "description": "## Synopsis\n\nRepresents the base components of the Fortinet FortiManager JSON-RPC interface. This code is based on the fmg_jsonapi.py code provided in the ftntlib package as provided on the Fortinet Developer Network (FNDN) that was originally written by Ashton Turpin. It has since been modified by JP Forcioli as well as several others within Fortinet. This has now been streamlined and modified to utilize the standard **\\**kwargs** functionality as well as has been modified extensively to be more scalable and provide context management and other aspects.\n\n## Code Example\n\nStandard format for a FortiManager JSON-RPC is utilized.\n\n**Of Importance** is that this package uses context behavior for the FortiManager instance, so the **with** keyword can be utilized. This ensures that the FortiManager instance is logged into upon instantiation and is logged out of once the scope of the **with** statement is completed. For instance, to instantiate a FortiManager instance with the IP address of 10.1.1.1, with the user name admin and a password of <blank>, the user would simply type:\n\n```\nwith FortiManager('10.1.1.1', 'admin', '') as fmg_instance:\n```\n\nThe context manager does not HAVE to be utilized obviously. However, if it is not utilized, the *login* and *logout* functionality is not handled for the caller. It is expected that these methods will be called if the context manager is not utilized. An example would be:\n\n```\nfmg_instance = FortiManager('10.1.1.1', 'admin', '')\nfmg_instance.login()\n*something of importance accomplished here*\nfmg_instance.logout()\n```\n\nContinuing, when a FortiManager instance is instantiated, the following attributes are configured (or can be configured by the user). The list provided lists the defaults.\n\n```\n- debug (default False),\n- use_ssl (default True),\n- verify_ssl (default False),\n- timeout (default 300)\n```\nFor instance, to instantiate a FortiManager instance with the IP address of 10.1.1.1, with the user name admin and a password of <blank>, that uses http instead of https, is in debug mode, and warns after the verification of the SSL certificate upon each request and has a timeout of 100 the user would simply type:\n\n```\nwith FortiManager('10.1.1.1', 'admin', '', debug=True, use_ssl=False, debug=True, disable_request_warnings=False, timeout=100) as fmg_instance:\n```\n\nObviously these same parameters would be used in the standard call if the context manager is not utilized so:\n\n```\nfmg_instance = FortiManager('10.1.1.1', 'admin', '', debug=True, use_ssl=False, debug=True, disable_request_warnings=False, timeout=100)\n```\n\nA solution has been provided to ensure workspace mode can be handled. When a FMG instance is created, either using the **with** statement as shown above or in a standard scenario (also shown above), the instance checks the FMG for status. At login a call is made to check for status and if *workspace-mode* is returned as anything other than a **0** then workspace capabilities are provided. Standard calls to *lock*, *commit*, and *unlock* are required and are passed through to the workspace manager object for ease of use. If a caller is using the context manager, the workspace manager will now ensure an errant exception does not leave an ADOM stranded in a locked state. The workspace manager functionality will **NOT** call an automatic *commit*, it will simply ensure the *unlock_adom* function is called on any locked ADOM and then will logout. This happens in *logout*, thus a caller could lock an ADOM (or multiple ADOMs), do his work, call *commit* on any ADOM he wants to commit, and then simply call *logout* and then the workspace manager will take care of the unlocks. A common example (using an explicit call to *unlock_adom*) to add an address object might be:\n\n```\nfmg_instance.lock_adom(\"root\")\nfmg_instance.add('pm/config/adom/{adom}/obj/firewall/address'.format(adom=\"root\"), allow__routing=0, associated__interface='any', name='add_obj_name', subnet=[\"192.168.1.0\", \"255.255.255.0\"], type=0, comment='API address obj addition')\nfmg_instance.commit_changes(\"root\")\nfmg_instance.unlock_adom(\"root\")\nfmg_instance.logout()\n```\nThe following would perform the same and would also unlock the *root* ADOM on the way out (notice no call to *unlock_adom* is required here):\n\n```\nfmg_instance.lock_adom(\"root\")\nfmg_instance.add('pm/config/adom/{adom}/obj/firewall/address'.format(adom=\"root\"), allow__routing=0, associated__interface='any', name='add_obj_name', subnet=[\"192.168.1.0\", \"255.255.255.0\"], type=0, comment='API address obj addition')\nfmg_instance.commit_changes(\"root\")\nfmg_instance.logout()\n```\n\nWhile this module is meant to be utilized with another caller-written abstraction, there is no reason that this module could not be utilized by itself to make detailed, multi-parameter calls. To that end, a capability has been provided that enables keyword/value arguments to be passed into any of the *get*, *add*, *update* ,*delete* ,*set* ,*replace* ,*clone* ,*execute* , or *move* helper methods. Since there are many keywords in the FortiManager body that require a dash (and since the dash character is not allowed as a keyword argument handled by the **\\**kwargs** pointer), a facility has been added such that a keyword with a double underscore **__** is automatically translated into a dash **-** when the keyword/value pair is put into the body of the call. An example follows (notice the double underscores in the keyword items, these will be translated to dashes when the call is made):\n\n```\nfmg_instance.add('pm/config/adom/{adom}/obj/firewall/address'.format(adom=\"root\"), allow__routing=0, associated__interface='any', name='add_obj_name', subnet=[\"192.168.1.0\", \"255.255.255.0\"], type=0, comment='API address obj addition')\n```\n\nAnother addition to this concept has been added which is when FortiManager requires an attribute with a space between two words. Since this is not allowed, a facility has been added such that a keyword with a triple underscore **___** is automatically translated into a blank space when the keyword/value pair is put into the body of the call. An example follows (notice the triple underscores in the keyword items, these will be translated to spaces when the call is made):\n\n```\nfmg_instance.add('pm/config/adom/{adom}/obj/firewall/address'.format(adom=\"root\"), fake___attribute='any', name='add_obj_name', subnet=[\"192.168.1.0\", \"255.255.255.0\"], type=0, comment='API address obj addition')\n```\n\nThese facilities are helpful, but a more obvious way to make these kind of calls with a little more clarity is shown below in the **Tests** section where a standard dictionary is utilized effectively. In that case, the double underscore translations are not needed and dashes will work perfectly fine (see below). The same holds true for spaces within an attribute when using the free-form method.\n\n## Exceptions\n\nThe module provides the following exceptions for use:\n\n1. FMGBaseException(Exception)\n2. FMGValidSessionException(FMGBaseException)\n3. FMGValueError(ValueError)\n4. FMGResponseNotFormedCorrect(KeyError)\n5. FMGConnectionError(ReqConnError)\n6. FMGConnectTimeout(ReqConnTimeout)\n7. FMGRequestNotFormedCorrect(FMGBaseException)\n\n**FMGBaseException** is the Base exception for the module and can be used to catch all things outside of the ValueError and Keyerror issues.\n\na caller could then write the following and have the equivalent of a standard *except* call with no exception mentioned. This ensures scalability:\n```\ntry:\n    Doing Something Here\nexcept FMGBaseException:\n    Do something with Exception\n```\n\n**FMGValidSessionException** has been added and is raised if any call is attempted without a valid connection being made to a FMG. In the past, other than to check the \\_\\_str()\\_\\_ value of the object after the login return, the code would continue to try to make calls despite having no valid session. Any call attempted now on an invalid session will have this error thrown.\n\n**FMGValueError** is a standard ValueError and is caught in special cases where a connection attempt is made or a call is made with an invalid value. An example of this would be a connection to a FMG instance with a *timeout* value of <= 0.\n\n**FMGResponseNotFormedCorrect** will be raised when response received back from the FMG instance does not have a *result*, *status*, or *code* attribute. FMG responses without these attributes are ill-formed and will raise this error. The only exception to this is the response from a valid *login()* call. This exception is suppressed for this, and a valid response is crafted for login to ensure a stable, standard, and constant response back from the module.\n\n**FMGConnectionError** and **FMGConnectTimeout** are raised when a *requests.exception.ConnectionError* or *requests.exceptions.ConnectTimeout* exception is caught. This ensures calling code does not need to import/depend on the requests module to handle requests connection exceptions. *FMGConnectionError* will most likely be thrown at *login()* and are likely due to an incorrect hostname, or IP Address of the FMG appliance.\n\n**FMGRequestNotFormedCorrect** will be raised when a request for free form capability is issued and the request format is not correct. Specifically a *data* keyword is required to be passed in and the value must be a dictionary. See the ```free_form()``` method explanation below\n\nExceptions are allowed to propogate up to the caller and are only caught in certain cases where they will be needed in case verbose mode is asked for and the caller wants a print out of the exception. After the print is accomplished that same exception will be raised and propogated so it can be either caught and handled by the caller or used as a debug tool.\n\n## Special Keywords\n\nThis section outlines special keywords that will be used within \\*\\*kwargs that will mean something significant to pyFMG. These keywords, when used by the caller will be checked and will provided special circumstances to the pyFMG calls as there are quite a few special reqiurements when dealing with the FortiManager.\n\nThe *data* keyword - utilizing arrays instead of JSON objects in the params section of the request object.\n\nThis case is required when an array of objects is needed vice a JSON object with possibly arrays or other objects inside it. An example of this would be a request that needs to look like the following:\n```\n{\n  \"id\": 1, \n  \"method\": \"add\", \n  \"params\": [\n    {\n      \"data\": [\n        \"membername1\", \n        \"membername2\"\n      ], \n      \"url\": \"pm/config/adom/root/obj/firewall/addrgrp/test_addr_group/member\"\n    }\n  ], \n  \"session\": \"BLAH\"\n}\n```\n\nNotice that the params attribute is holding a data attribute that is an array of items vice the standard JSON object as normally required. To utilize this functionality, the caller will provide a keyword of *data* in the call with the array of information as its value. The call would look like:\n\n```\nfmg_instance.add(\"pm/config/adom/root/obj/firewall/addrgrp/test_addr_group/member\", data=[\"membername1\", \"membername2\"])\n```\n\nAny and all keywords past the data keyword will be disregarded.\n\n## Responses\n\nA standard, response mechanism is provided from this module so calling objects know what to expect back. Unless an exception is thrown, this module will return a 2 object tuple consisting of the code of the response back, followed by the information in the *\"data\"* attribute within the response. If there's no data attribute in the response, the text of the response is provided. Since login does not provide a constant response from a FMG appliance, one is provided by this module to ensure a caller knows what will be returned and in what format. An example response of a login, get call, and then logout process is below:\n\n```\n(0, {'status': {'message': 'OK', 'code': 0}, 'url': 'sys/login/user'})\n(0, [{u'faz.quota': 0, u'foslic_ram': 0, u'foslic_type': 0, u'sn': u'FGVM020000098115', u'mr': 6, u'conf_status': 1, u'os_type': 0, u'node_flags': 0, u'os_ver': 5, ...(truncated)}])\n(0, {u'status': {u'message': u'OK', u'code': 0}, u'url': u'sys/logout'})\n``` \n\nNotice the the login response (the first response above) is NOT unicode. Other than that it matches exactly with other call responses.\n\n## Special Functions\n\nWhen an operation is sent to the FMG that in return kicks off a task on the sytem (i.e. device config installation, policy package push, etc...) the return value is as discussed where a tuple with the return code and the return json value is provided. In this case, the JSON value will have a task identifier attribute and can be used to track that task. This module provides a simple track tasking functionality called ```track_task()``` that takes in a *task_id* integer and then optional values for *sleep_time* (default is 5 seconds) between requests, *retrieval_fail_gate* (default is 10) and a *timeout* (default is 120). This provides a looped response for that task that with the defaults allows for the system to take approx a minute to respond - this value is a very long time, so we are certain that if the system does not respond by then something is wrong. The loop requests information from the system about the task every 5 seconds and give the system over 2 minutes to complete prior to giving a response that the task is taking too long. This function allows the capability of getting a task and then watching the values - as well as pivoting off of the rich data the FMG responds with to include number of lines that were completed, any errors or warnings, completion time and more. The system also adds in an attribute to the response data on the completion cycle named **total_task_time** which is the time it took for the task to complete its actions. A way to call and use this function is as follows:\n\n```\ncode, task_obj = fmg_instance.execute(\"securityconsole/install/package\", flags=[\"preview\"], adom=\"root\", pkg=pp_name)\nif 'task' in task_obj:\n    taskid = task_obj.get('task')\n    fmg_instance.track_task(taskid)\n```\n\nAn execution function outside of the standard *get*, *add*, *update*, *delete*, *set*, *replace*, *clone*, *execute*, or *move* has been added. This function is called ```free_form(method, **kwargs)```. The arguments are the string method that must be called such as *add* or *get*, etc... and a key word argument list. The kw argument must be a dictionary that has the key **data** or a *FMGRequestNotFormedCorrect* exception will be raised. This data keyword must have the exact value you want to send to the FMG. This function is used for when either the FMG Request object is slightly different than standard OR you are trying to call the FMG with multiple operations. For instance, you want to add 3 address objects with one call. In order to do something like this, the ```free_form()``` function is used and called as below where we are requesting all data from policy id's 1, 3, 4, 5, and 7 with one call:\n\n```\nmulti_data = []\nfor pol_id in [1, 3, 4, 5, 7]:\n    multi_data.append({\n            \"url\": f\"/pm/config/adom/root/pkg/default/firewall/policy\",\n            \"fields\": [\"policyid\", \"name\"],\n          })\n\nif len(multi_data) > 0:\n    code, res = fmg_instance.free_form(\"get\", data=multi_data)\n``` \n\n## Logging\n\nA logging functionality has been provided to enable logging to different handlers as required by the caller using the standard python logging facility. The capability to start logging is simply by calling the *getLog* function. This function returns the internal logging reference held by the FortiGate instance. To add or remove a handler use the associated *addHandler()* or *removeHandler()* functions providing a FileHandler or StreamHandler etc... object. The signature for the *getLog()* function is:\n\n```\ndef getLog(self, loggername=\"fortinet\", lvl=logging.INFO)\n``` \n\nOnce a logger is created by calling the *getLog* function, the logger will log the debug information to whatever handler was provided to the *addHandler()* function. If more than one handler is added, more than one log will occur. To stop logging simply use the *resetLog()* function and the Logging object will be set to None. An example of how to log all debug output to a file would be:\n\n```\nfmg.getLog(loggername=\"fmg\")\nfh = logging.FileHandler(\"/location/to/log/fil.log\")\nfh.setLevel(logging.INFO)\nfh.setFormatter(logging.Formatter(\"%(asctime)s - %(name)s: %(message)s \", \"%m/%d/%Y %I:%M:%S %p\"))\nfgt.addHandler(fh)\n```\n\nAn external module can utilize standard logging functionality to provide a subordinate type logging function using the same handlers as provided to the pyFGT module. For instance, to log to the same location as the pyFGT module logs Handler is set, you would simply have to do the following:\n\n```\nfmg_logger = logging.getLogger(\"fmg.drvr\")\n\n# somewhere in the module\nfmg_logger.log(logging.INFO, \"This is a log message)\n```\n\nThe log output in this case would have the fgt.drvr moniker in the format header due to the use of the *%(name)s* format string shown above.\n\n## Motivation\n\nThis package is being established to support Ansible requirements and proper mod_utils utilization, however, it can be utilized for contact with any Fortinet FortiManager appliance or VM asset. \n\n## Installation\n\nInstallation of this package will be via the pip interface\n\n## Tests\n\nUtilizing the library is relatively simple.\n\nAssuming you are within the with context and still using **fmg_instance** as before, to get all managed devices in the **root** adom, the following would be used:\n\n```\nfmg_instance.get(url to get devices for FortiManager version)\n```\n\nTo **add** an address group the following would be used:\n\n```\ndata = {\n            'allow-routing': 1,\n            'associated-interface': 'any',\n            'name': 'test_addr_object',\n            'subnet': ['10.1.1.0', '255.255.255.255'],\n            'type': 0,\n        }\nfmg_instance.add(URL to add address group objects for FortiManager version, **data)\n```\n\nNotice how the **data** dictionary is created and then sent in as **\\**data**. This is because there are dashes in the keys of the dictionary that is required and dashes are not allowed in a keyword argument setup. For instance, let's assume that **allow-routing** and **associated-interface** are not required for this call. In that case, the call could have been:\n\n```\nfmg_instance.add(URL to add address object for FortiManager version, name='test_addr_object', subnet=['10.1.1.0', '255.255.255.255'],type=0)\n```\n\nNotice that all you have to do is send in the data that needs to be sent to the FortiManager appliance in the **\\**kwargs** field - this makes calls extremely simple - send in a URL and the keyword arguments and the rest is taken care of.\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/p4r4n0y1ng/pyfmg", "keywords": "", "license": "Apache 2.0", "maintainer": "", "maintainer_email": "", "name": "pyfmg", "package_url": "https://pypi.org/project/pyfmg/", "platform": "", "project_url": "https://pypi.org/project/pyfmg/", "project_urls": {"Homepage": "https://github.com/p4r4n0y1ng/pyfmg"}, "release_url": "https://pypi.org/project/pyfmg/0.8.5.1/", "requires_dist": ["requests"], "requires_python": "", "summary": "Represents the base components of the Fortinet FortiManager JSON-RPC interface", "version": "0.8.5.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>Synopsis</h2>\n<p>Represents the base components of the Fortinet FortiManager JSON-RPC interface. This code is based on the fmg_jsonapi.py code provided in the ftntlib package as provided on the Fortinet Developer Network (FNDN) that was originally written by Ashton Turpin. It has since been modified by JP Forcioli as well as several others within Fortinet. This has now been streamlined and modified to utilize the standard *<em>*<em>kwargs</em></em> functionality as well as has been modified extensively to be more scalable and provide context management and other aspects.</p>\n<h2>Code Example</h2>\n<p>Standard format for a FortiManager JSON-RPC is utilized.</p>\n<p><strong>Of Importance</strong> is that this package uses context behavior for the FortiManager instance, so the <strong>with</strong> keyword can be utilized. This ensures that the FortiManager instance is logged into upon instantiation and is logged out of once the scope of the <strong>with</strong> statement is completed. For instance, to instantiate a FortiManager instance with the IP address of 10.1.1.1, with the user name admin and a password of &lt;blank&gt;, the user would simply type:</p>\n<pre><code>with FortiManager('10.1.1.1', 'admin', '') as fmg_instance:\n</code></pre>\n<p>The context manager does not HAVE to be utilized obviously. However, if it is not utilized, the <em>login</em> and <em>logout</em> functionality is not handled for the caller. It is expected that these methods will be called if the context manager is not utilized. An example would be:</p>\n<pre><code>fmg_instance = FortiManager('10.1.1.1', 'admin', '')\nfmg_instance.login()\n*something of importance accomplished here*\nfmg_instance.logout()\n</code></pre>\n<p>Continuing, when a FortiManager instance is instantiated, the following attributes are configured (or can be configured by the user). The list provided lists the defaults.</p>\n<pre><code>- debug (default False),\n- use_ssl (default True),\n- verify_ssl (default False),\n- timeout (default 300)\n</code></pre>\n<p>For instance, to instantiate a FortiManager instance with the IP address of 10.1.1.1, with the user name admin and a password of &lt;blank&gt;, that uses http instead of https, is in debug mode, and warns after the verification of the SSL certificate upon each request and has a timeout of 100 the user would simply type:</p>\n<pre><code>with FortiManager('10.1.1.1', 'admin', '', debug=True, use_ssl=False, debug=True, disable_request_warnings=False, timeout=100) as fmg_instance:\n</code></pre>\n<p>Obviously these same parameters would be used in the standard call if the context manager is not utilized so:</p>\n<pre><code>fmg_instance = FortiManager('10.1.1.1', 'admin', '', debug=True, use_ssl=False, debug=True, disable_request_warnings=False, timeout=100)\n</code></pre>\n<p>A solution has been provided to ensure workspace mode can be handled. When a FMG instance is created, either using the <strong>with</strong> statement as shown above or in a standard scenario (also shown above), the instance checks the FMG for status. At login a call is made to check for status and if <em>workspace-mode</em> is returned as anything other than a <strong>0</strong> then workspace capabilities are provided. Standard calls to <em>lock</em>, <em>commit</em>, and <em>unlock</em> are required and are passed through to the workspace manager object for ease of use. If a caller is using the context manager, the workspace manager will now ensure an errant exception does not leave an ADOM stranded in a locked state. The workspace manager functionality will <strong>NOT</strong> call an automatic <em>commit</em>, it will simply ensure the <em>unlock_adom</em> function is called on any locked ADOM and then will logout. This happens in <em>logout</em>, thus a caller could lock an ADOM (or multiple ADOMs), do his work, call <em>commit</em> on any ADOM he wants to commit, and then simply call <em>logout</em> and then the workspace manager will take care of the unlocks. A common example (using an explicit call to <em>unlock_adom</em>) to add an address object might be:</p>\n<pre><code>fmg_instance.lock_adom(\"root\")\nfmg_instance.add('pm/config/adom/{adom}/obj/firewall/address'.format(adom=\"root\"), allow__routing=0, associated__interface='any', name='add_obj_name', subnet=[\"192.168.1.0\", \"255.255.255.0\"], type=0, comment='API address obj addition')\nfmg_instance.commit_changes(\"root\")\nfmg_instance.unlock_adom(\"root\")\nfmg_instance.logout()\n</code></pre>\n<p>The following would perform the same and would also unlock the <em>root</em> ADOM on the way out (notice no call to <em>unlock_adom</em> is required here):</p>\n<pre><code>fmg_instance.lock_adom(\"root\")\nfmg_instance.add('pm/config/adom/{adom}/obj/firewall/address'.format(adom=\"root\"), allow__routing=0, associated__interface='any', name='add_obj_name', subnet=[\"192.168.1.0\", \"255.255.255.0\"], type=0, comment='API address obj addition')\nfmg_instance.commit_changes(\"root\")\nfmg_instance.logout()\n</code></pre>\n<p>While this module is meant to be utilized with another caller-written abstraction, there is no reason that this module could not be utilized by itself to make detailed, multi-parameter calls. To that end, a capability has been provided that enables keyword/value arguments to be passed into any of the <em>get</em>, <em>add</em>, <em>update</em> ,<em>delete</em> ,<em>set</em> ,<em>replace</em> ,<em>clone</em> ,<em>execute</em> , or <em>move</em> helper methods. Since there are many keywords in the FortiManager body that require a dash (and since the dash character is not allowed as a keyword argument handled by the *<em>*<em>kwargs</em></em> pointer), a facility has been added such that a keyword with a double underscore <strong>__</strong> is automatically translated into a dash <strong>-</strong> when the keyword/value pair is put into the body of the call. An example follows (notice the double underscores in the keyword items, these will be translated to dashes when the call is made):</p>\n<pre><code>fmg_instance.add('pm/config/adom/{adom}/obj/firewall/address'.format(adom=\"root\"), allow__routing=0, associated__interface='any', name='add_obj_name', subnet=[\"192.168.1.0\", \"255.255.255.0\"], type=0, comment='API address obj addition')\n</code></pre>\n<p>Another addition to this concept has been added which is when FortiManager requires an attribute with a space between two words. Since this is not allowed, a facility has been added such that a keyword with a triple underscore <strong>___</strong> is automatically translated into a blank space when the keyword/value pair is put into the body of the call. An example follows (notice the triple underscores in the keyword items, these will be translated to spaces when the call is made):</p>\n<pre><code>fmg_instance.add('pm/config/adom/{adom}/obj/firewall/address'.format(adom=\"root\"), fake___attribute='any', name='add_obj_name', subnet=[\"192.168.1.0\", \"255.255.255.0\"], type=0, comment='API address obj addition')\n</code></pre>\n<p>These facilities are helpful, but a more obvious way to make these kind of calls with a little more clarity is shown below in the <strong>Tests</strong> section where a standard dictionary is utilized effectively. In that case, the double underscore translations are not needed and dashes will work perfectly fine (see below). The same holds true for spaces within an attribute when using the free-form method.</p>\n<h2>Exceptions</h2>\n<p>The module provides the following exceptions for use:</p>\n<ol>\n<li>FMGBaseException(Exception)</li>\n<li>FMGValidSessionException(FMGBaseException)</li>\n<li>FMGValueError(ValueError)</li>\n<li>FMGResponseNotFormedCorrect(KeyError)</li>\n<li>FMGConnectionError(ReqConnError)</li>\n<li>FMGConnectTimeout(ReqConnTimeout)</li>\n<li>FMGRequestNotFormedCorrect(FMGBaseException)</li>\n</ol>\n<p><strong>FMGBaseException</strong> is the Base exception for the module and can be used to catch all things outside of the ValueError and Keyerror issues.</p>\n<p>a caller could then write the following and have the equivalent of a standard <em>except</em> call with no exception mentioned. This ensures scalability:</p>\n<pre><code>try:\n    Doing Something Here\nexcept FMGBaseException:\n    Do something with Exception\n</code></pre>\n<p><strong>FMGValidSessionException</strong> has been added and is raised if any call is attempted without a valid connection being made to a FMG. In the past, other than to check the __str()__ value of the object after the login return, the code would continue to try to make calls despite having no valid session. Any call attempted now on an invalid session will have this error thrown.</p>\n<p><strong>FMGValueError</strong> is a standard ValueError and is caught in special cases where a connection attempt is made or a call is made with an invalid value. An example of this would be a connection to a FMG instance with a <em>timeout</em> value of &lt;= 0.</p>\n<p><strong>FMGResponseNotFormedCorrect</strong> will be raised when response received back from the FMG instance does not have a <em>result</em>, <em>status</em>, or <em>code</em> attribute. FMG responses without these attributes are ill-formed and will raise this error. The only exception to this is the response from a valid <em>login()</em> call. This exception is suppressed for this, and a valid response is crafted for login to ensure a stable, standard, and constant response back from the module.</p>\n<p><strong>FMGConnectionError</strong> and <strong>FMGConnectTimeout</strong> are raised when a <em>requests.exception.ConnectionError</em> or <em>requests.exceptions.ConnectTimeout</em> exception is caught. This ensures calling code does not need to import/depend on the requests module to handle requests connection exceptions. <em>FMGConnectionError</em> will most likely be thrown at <em>login()</em> and are likely due to an incorrect hostname, or IP Address of the FMG appliance.</p>\n<p><strong>FMGRequestNotFormedCorrect</strong> will be raised when a request for free form capability is issued and the request format is not correct. Specifically a <em>data</em> keyword is required to be passed in and the value must be a dictionary. See the <code>free_form()</code> method explanation below</p>\n<p>Exceptions are allowed to propogate up to the caller and are only caught in certain cases where they will be needed in case verbose mode is asked for and the caller wants a print out of the exception. After the print is accomplished that same exception will be raised and propogated so it can be either caught and handled by the caller or used as a debug tool.</p>\n<h2>Special Keywords</h2>\n<p>This section outlines special keywords that will be used within **kwargs that will mean something significant to pyFMG. These keywords, when used by the caller will be checked and will provided special circumstances to the pyFMG calls as there are quite a few special reqiurements when dealing with the FortiManager.</p>\n<p>The <em>data</em> keyword - utilizing arrays instead of JSON objects in the params section of the request object.</p>\n<p>This case is required when an array of objects is needed vice a JSON object with possibly arrays or other objects inside it. An example of this would be a request that needs to look like the following:</p>\n<pre><code>{\n  \"id\": 1, \n  \"method\": \"add\", \n  \"params\": [\n    {\n      \"data\": [\n        \"membername1\", \n        \"membername2\"\n      ], \n      \"url\": \"pm/config/adom/root/obj/firewall/addrgrp/test_addr_group/member\"\n    }\n  ], \n  \"session\": \"BLAH\"\n}\n</code></pre>\n<p>Notice that the params attribute is holding a data attribute that is an array of items vice the standard JSON object as normally required. To utilize this functionality, the caller will provide a keyword of <em>data</em> in the call with the array of information as its value. The call would look like:</p>\n<pre><code>fmg_instance.add(\"pm/config/adom/root/obj/firewall/addrgrp/test_addr_group/member\", data=[\"membername1\", \"membername2\"])\n</code></pre>\n<p>Any and all keywords past the data keyword will be disregarded.</p>\n<h2>Responses</h2>\n<p>A standard, response mechanism is provided from this module so calling objects know what to expect back. Unless an exception is thrown, this module will return a 2 object tuple consisting of the code of the response back, followed by the information in the <em>\"data\"</em> attribute within the response. If there's no data attribute in the response, the text of the response is provided. Since login does not provide a constant response from a FMG appliance, one is provided by this module to ensure a caller knows what will be returned and in what format. An example response of a login, get call, and then logout process is below:</p>\n<pre><code>(0, {'status': {'message': 'OK', 'code': 0}, 'url': 'sys/login/user'})\n(0, [{u'faz.quota': 0, u'foslic_ram': 0, u'foslic_type': 0, u'sn': u'FGVM020000098115', u'mr': 6, u'conf_status': 1, u'os_type': 0, u'node_flags': 0, u'os_ver': 5, ...(truncated)}])\n(0, {u'status': {u'message': u'OK', u'code': 0}, u'url': u'sys/logout'})\n</code></pre>\n<p>Notice the the login response (the first response above) is NOT unicode. Other than that it matches exactly with other call responses.</p>\n<h2>Special Functions</h2>\n<p>When an operation is sent to the FMG that in return kicks off a task on the sytem (i.e. device config installation, policy package push, etc...) the return value is as discussed where a tuple with the return code and the return json value is provided. In this case, the JSON value will have a task identifier attribute and can be used to track that task. This module provides a simple track tasking functionality called <code>track_task()</code> that takes in a <em>task_id</em> integer and then optional values for <em>sleep_time</em> (default is 5 seconds) between requests, <em>retrieval_fail_gate</em> (default is 10) and a <em>timeout</em> (default is 120). This provides a looped response for that task that with the defaults allows for the system to take approx a minute to respond - this value is a very long time, so we are certain that if the system does not respond by then something is wrong. The loop requests information from the system about the task every 5 seconds and give the system over 2 minutes to complete prior to giving a response that the task is taking too long. This function allows the capability of getting a task and then watching the values - as well as pivoting off of the rich data the FMG responds with to include number of lines that were completed, any errors or warnings, completion time and more. The system also adds in an attribute to the response data on the completion cycle named <strong>total_task_time</strong> which is the time it took for the task to complete its actions. A way to call and use this function is as follows:</p>\n<pre><code>code, task_obj = fmg_instance.execute(\"securityconsole/install/package\", flags=[\"preview\"], adom=\"root\", pkg=pp_name)\nif 'task' in task_obj:\n    taskid = task_obj.get('task')\n    fmg_instance.track_task(taskid)\n</code></pre>\n<p>An execution function outside of the standard <em>get</em>, <em>add</em>, <em>update</em>, <em>delete</em>, <em>set</em>, <em>replace</em>, <em>clone</em>, <em>execute</em>, or <em>move</em> has been added. This function is called <code>free_form(method, **kwargs)</code>. The arguments are the string method that must be called such as <em>add</em> or <em>get</em>, etc... and a key word argument list. The kw argument must be a dictionary that has the key <strong>data</strong> or a <em>FMGRequestNotFormedCorrect</em> exception will be raised. This data keyword must have the exact value you want to send to the FMG. This function is used for when either the FMG Request object is slightly different than standard OR you are trying to call the FMG with multiple operations. For instance, you want to add 3 address objects with one call. In order to do something like this, the <code>free_form()</code> function is used and called as below where we are requesting all data from policy id's 1, 3, 4, 5, and 7 with one call:</p>\n<pre><code>multi_data = []\nfor pol_id in [1, 3, 4, 5, 7]:\n    multi_data.append({\n            \"url\": f\"/pm/config/adom/root/pkg/default/firewall/policy\",\n            \"fields\": [\"policyid\", \"name\"],\n          })\n\nif len(multi_data) &gt; 0:\n    code, res = fmg_instance.free_form(\"get\", data=multi_data)\n</code></pre>\n<h2>Logging</h2>\n<p>A logging functionality has been provided to enable logging to different handlers as required by the caller using the standard python logging facility. The capability to start logging is simply by calling the <em>getLog</em> function. This function returns the internal logging reference held by the FortiGate instance. To add or remove a handler use the associated <em>addHandler()</em> or <em>removeHandler()</em> functions providing a FileHandler or StreamHandler etc... object. The signature for the <em>getLog()</em> function is:</p>\n<pre><code>def getLog(self, loggername=\"fortinet\", lvl=logging.INFO)\n</code></pre>\n<p>Once a logger is created by calling the <em>getLog</em> function, the logger will log the debug information to whatever handler was provided to the <em>addHandler()</em> function. If more than one handler is added, more than one log will occur. To stop logging simply use the <em>resetLog()</em> function and the Logging object will be set to None. An example of how to log all debug output to a file would be:</p>\n<pre><code>fmg.getLog(loggername=\"fmg\")\nfh = logging.FileHandler(\"/location/to/log/fil.log\")\nfh.setLevel(logging.INFO)\nfh.setFormatter(logging.Formatter(\"%(asctime)s - %(name)s: %(message)s \", \"%m/%d/%Y %I:%M:%S %p\"))\nfgt.addHandler(fh)\n</code></pre>\n<p>An external module can utilize standard logging functionality to provide a subordinate type logging function using the same handlers as provided to the pyFGT module. For instance, to log to the same location as the pyFGT module logs Handler is set, you would simply have to do the following:</p>\n<pre><code>fmg_logger = logging.getLogger(\"fmg.drvr\")\n\n# somewhere in the module\nfmg_logger.log(logging.INFO, \"This is a log message)\n</code></pre>\n<p>The log output in this case would have the fgt.drvr moniker in the format header due to the use of the <em>%(name)s</em> format string shown above.</p>\n<h2>Motivation</h2>\n<p>This package is being established to support Ansible requirements and proper mod_utils utilization, however, it can be utilized for contact with any Fortinet FortiManager appliance or VM asset.</p>\n<h2>Installation</h2>\n<p>Installation of this package will be via the pip interface</p>\n<h2>Tests</h2>\n<p>Utilizing the library is relatively simple.</p>\n<p>Assuming you are within the with context and still using <strong>fmg_instance</strong> as before, to get all managed devices in the <strong>root</strong> adom, the following would be used:</p>\n<pre><code>fmg_instance.get(url to get devices for FortiManager version)\n</code></pre>\n<p>To <strong>add</strong> an address group the following would be used:</p>\n<pre><code>data = {\n            'allow-routing': 1,\n            'associated-interface': 'any',\n            'name': 'test_addr_object',\n            'subnet': ['10.1.1.0', '255.255.255.255'],\n            'type': 0,\n        }\nfmg_instance.add(URL to add address group objects for FortiManager version, **data)\n</code></pre>\n<p>Notice how the <strong>data</strong> dictionary is created and then sent in as *<em>*<em>data</em></em>. This is because there are dashes in the keys of the dictionary that is required and dashes are not allowed in a keyword argument setup. For instance, let's assume that <strong>allow-routing</strong> and <strong>associated-interface</strong> are not required for this call. In that case, the call could have been:</p>\n<pre><code>fmg_instance.add(URL to add address object for FortiManager version, name='test_addr_object', subnet=['10.1.1.0', '255.255.255.255'],type=0)\n</code></pre>\n<p>Notice that all you have to do is send in the data that needs to be sent to the FortiManager appliance in the *<em>*<em>kwargs</em></em> field - this makes calls extremely simple - send in a URL and the keyword arguments and the rest is taken care of.</p>\n\n          </div>"}, "last_serial": 6296528, "releases": {"0.5.0": [{"comment_text": "", "digests": {"md5": "87602952636077e16f05de02408c020d", "sha256": "70f1951e70d252055c653a3ed77d99e6b24133f56fd5d3e5eab75f44ddec61ed"}, "downloads": -1, "filename": "pyfmg-0.5.0-py2-none-any.whl", "has_sig": false, "md5_digest": "87602952636077e16f05de02408c020d", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 3834, "upload_time": "2018-01-04T07:30:35", "upload_time_iso_8601": "2018-01-04T07:30:35.508353Z", "url": "https://files.pythonhosted.org/packages/78/be/65b61d08309306d9e8b81c51c0ee9bc9e152b3ed7d27902f4d9e83f8c66b/pyfmg-0.5.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "896ded979db43c63027c313275545953", "sha256": "7a3404455984d25a65e1560a12e43b2c508ecc0a52dacad23bdf3710fb811545"}, "downloads": -1, "filename": "pyfmg-0.5.0.tar.gz", "has_sig": false, "md5_digest": "896ded979db43c63027c313275545953", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4315, "upload_time": "2018-01-04T07:30:37", "upload_time_iso_8601": "2018-01-04T07:30:37.590848Z", "url": "https://files.pythonhosted.org/packages/42/0f/ddcb1bbb368b676c6b481193e8849bb7b6e26b73df3c94ea1af229e1e91a/pyfmg-0.5.0.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "14e40041eb497606efcf5d73c2ea7cf6", "sha256": "c90cc6ee5537dc1256cc492a4db349db6541c6fe3797d87ce181203784849681"}, "downloads": -1, "filename": "pyfmg-0.6.0-py2-none-any.whl", "has_sig": false, "md5_digest": "14e40041eb497606efcf5d73c2ea7cf6", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 4417, "upload_time": "2018-01-05T05:09:18", "upload_time_iso_8601": "2018-01-05T05:09:18.798588Z", "url": "https://files.pythonhosted.org/packages/51/14/18b61d9754d1a00c4116666eae274912114e2c8cc48c0f2c4082a8ccd171/pyfmg-0.6.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "251990582d6c3a424fe8ae766de13891", "sha256": "a3747bb7f4832cff4967001b1e32934a658310b1da39d1595d785d1f61d3501f"}, "downloads": -1, "filename": "pyfmg-0.6.0.tar.gz", "has_sig": false, "md5_digest": "251990582d6c3a424fe8ae766de13891", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5082, "upload_time": "2018-01-05T05:09:21", "upload_time_iso_8601": "2018-01-05T05:09:21.490800Z", "url": "https://files.pythonhosted.org/packages/20/3a/bb000ce6c4464a0c61ec5366c8ccc07bdeff393725324d402741c0e15e73/pyfmg-0.6.0.tar.gz", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "3a2e9fd83df2925612b2baabe298106c", "sha256": "13aefc4d181b008610e97af4e28fb08b52b36d5892842585363d4165ac60e147"}, "downloads": -1, "filename": "pyfmg-0.6.1-py2-none-any.whl", "has_sig": false, "md5_digest": "3a2e9fd83df2925612b2baabe298106c", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 4420, "upload_time": "2018-01-10T04:43:47", "upload_time_iso_8601": "2018-01-10T04:43:47.818730Z", "url": "https://files.pythonhosted.org/packages/af/7d/f00aa3915c0b4879c7e872c6bc324ffd7ffc5f7a672c0a224e8ffba5672f/pyfmg-0.6.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5e28c7ea7ff7387ecc7921531d484903", "sha256": "90f98c090230d3c229be00f966a3a31e06232a3e4cbb54537ae0746932110116"}, "downloads": -1, "filename": "pyfmg-0.6.1.tar.gz", "has_sig": false, "md5_digest": "5e28c7ea7ff7387ecc7921531d484903", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4517, "upload_time": "2018-01-10T04:43:50", "upload_time_iso_8601": "2018-01-10T04:43:50.080076Z", "url": "https://files.pythonhosted.org/packages/73/89/20c4c53c712e22d5479732835664ce9d106424f5622a05085bd89c9f33ab/pyfmg-0.6.1.tar.gz", "yanked": false}], "0.6.2": [{"comment_text": "", "digests": {"md5": "f22bc89f5cbf4c7d439e7b9965f317a9", "sha256": "5bd777330f14fd9b57a3553c1f38af5f12033ada890aed362208363ac1780437"}, "downloads": -1, "filename": "pyfmg-0.6.2-py2-none-any.whl", "has_sig": false, "md5_digest": "f22bc89f5cbf4c7d439e7b9965f317a9", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 4425, "upload_time": "2018-06-09T22:39:38", "upload_time_iso_8601": "2018-06-09T22:39:38.368416Z", "url": "https://files.pythonhosted.org/packages/c3/8d/a44c679d6ec208504379c1e1fd7b4100e59ca031bff36e90c223c5b72c0a/pyfmg-0.6.2-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "eff5946fa369f28207319f7efa5fdcf5", "sha256": "4790f13192b923fceeb32d4764c78e9fe47b999aed5f1f777fef0b2a9856f4be"}, "downloads": -1, "filename": "pyfmg-0.6.2.tar.gz", "has_sig": false, "md5_digest": "eff5946fa369f28207319f7efa5fdcf5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4520, "upload_time": "2018-06-09T22:39:39", "upload_time_iso_8601": "2018-06-09T22:39:39.499017Z", "url": "https://files.pythonhosted.org/packages/c9/7e/11d206e626625fca6a463e8020aca38e49226af41a2d26695530b65dc9e6/pyfmg-0.6.2.tar.gz", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "612eef58d0167842478394d64c847dd3", "sha256": "183e8ffb6c77ff0ffbe7eef6ada33b111bb710ebd8641eac5a5aa9ac2d87b24d"}, "downloads": -1, "filename": "pyfmg-0.7.0-py2-none-any.whl", "has_sig": false, "md5_digest": "612eef58d0167842478394d64c847dd3", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 4991, "upload_time": "2018-06-20T05:54:50", "upload_time_iso_8601": "2018-06-20T05:54:50.119513Z", "url": "https://files.pythonhosted.org/packages/cd/53/2c252f4b3d2c907153cd59848de0a480c834c09ee82047f4c19cf41dd5a5/pyfmg-0.7.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c91d2f217f562a6216d11b254899f441", "sha256": "b143bf9a84cf7345317a7c5837f735b8956d54cf1a6a987818535fdbb81703e7"}, "downloads": -1, "filename": "pyfmg-0.7.0.tar.gz", "has_sig": false, "md5_digest": "c91d2f217f562a6216d11b254899f441", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6564, "upload_time": "2018-06-20T05:54:51", "upload_time_iso_8601": "2018-06-20T05:54:51.099875Z", "url": "https://files.pythonhosted.org/packages/1c/cb/2239434cea6d00baaaed891900a1f5ee5c61558c88013de29a63bcf9d4a5/pyfmg-0.7.0.tar.gz", "yanked": false}], "0.7.2": [{"comment_text": "", "digests": {"md5": "1adf51a6b6c5ce8a77c1137ce57e4195", "sha256": "2b3aed29575e533efc44d4e594a47a0a6ac7e5bea41b6c6638182c465e970886"}, "downloads": -1, "filename": "pyfmg-0.7.2-py2-none-any.whl", "has_sig": false, "md5_digest": "1adf51a6b6c5ce8a77c1137ce57e4195", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 5585, "upload_time": "2018-06-28T15:34:56", "upload_time_iso_8601": "2018-06-28T15:34:56.545447Z", "url": "https://files.pythonhosted.org/packages/a2/6b/3cab7414214ec11e1a758d3653767468b56357ec7e51f8dc711aedafa9ec/pyfmg-0.7.2-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "daf4bb818318af5cfa78684f040e4442", "sha256": "48fd4a47ee7148db813a115dd29188cf01f774c7a5fc91dd505f23a20e3febc3"}, "downloads": -1, "filename": "pyfmg-0.7.2.tar.gz", "has_sig": false, "md5_digest": "daf4bb818318af5cfa78684f040e4442", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8192, "upload_time": "2018-06-28T15:34:57", "upload_time_iso_8601": "2018-06-28T15:34:57.623324Z", "url": "https://files.pythonhosted.org/packages/88/1a/f37a52b57a35e486f70f892dd9b4ce92c4e201465935d98ee1b2f67136e4/pyfmg-0.7.2.tar.gz", "yanked": false}], "0.7.3": [{"comment_text": "", "digests": {"md5": "b8f8a51e36ea51370b4e276ca3a8a03c", "sha256": "29f1d3dc488175a821fcd963171be6ddeffdfd1ac69ea1d2290fb985c6886480"}, "downloads": -1, "filename": "pyfmg-0.7.3-py2-none-any.whl", "has_sig": false, "md5_digest": "b8f8a51e36ea51370b4e276ca3a8a03c", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 5591, "upload_time": "2018-07-02T21:08:27", "upload_time_iso_8601": "2018-07-02T21:08:27.686250Z", "url": "https://files.pythonhosted.org/packages/19/57/cd0110c4d29f44cb2ce1d43073343ad47174c728b9bd66a3284a757f190a/pyfmg-0.7.3-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dd58af3a7aa8f6b28f70e327dea21593", "sha256": "1a5f3f4c275142aa6b0e5a06b26b5c106071e7715270d797a77721db07764546"}, "downloads": -1, "filename": "pyfmg-0.7.3.tar.gz", "has_sig": false, "md5_digest": "dd58af3a7aa8f6b28f70e327dea21593", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8204, "upload_time": "2018-07-02T21:08:28", "upload_time_iso_8601": "2018-07-02T21:08:28.645302Z", "url": "https://files.pythonhosted.org/packages/27/93/285e86f78915c0d5ca2a0896bef92e9075f269deb539acb98d2adc5e112d/pyfmg-0.7.3.tar.gz", "yanked": false}], "0.7.4": [{"comment_text": "", "digests": {"md5": "a5ad97efc9ff582635da003222431eb6", "sha256": "2551e40d110474d0496ee86fc905d6a6d52f5cc29dcdab4ed433e07754c5a2af"}, "downloads": -1, "filename": "pyfmg-0.7.4-py2-none-any.whl", "has_sig": false, "md5_digest": "a5ad97efc9ff582635da003222431eb6", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 5590, "upload_time": "2018-07-05T17:37:23", "upload_time_iso_8601": "2018-07-05T17:37:23.642612Z", "url": "https://files.pythonhosted.org/packages/33/2f/2b40cafb10d7ef4594c9f94d1284e39abf990377eb011bc5ff8aa69a41c9/pyfmg-0.7.4-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a9b37be26fe064b403797b1f4af40c5e", "sha256": "f78f771f138c8d0da06b6066337dbf7c251ecf0f8eee08b877c5e3f4f7637e6c"}, "downloads": -1, "filename": "pyfmg-0.7.4.tar.gz", "has_sig": false, "md5_digest": "a9b37be26fe064b403797b1f4af40c5e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8204, "upload_time": "2018-07-05T17:37:24", "upload_time_iso_8601": "2018-07-05T17:37:24.705570Z", "url": "https://files.pythonhosted.org/packages/8d/2f/2f46f9fef82ac6a7ca66e72c9f57ba112bbbf86a4b1be294f000d8249613/pyfmg-0.7.4.tar.gz", "yanked": false}], "0.7.5": [{"comment_text": "", "digests": {"md5": "e08ad6f021c5f6e94c988615bfcbddb6", "sha256": "738080bd0fe7a9f368c5eff41d064941c626bd18ff562625592cc39816896b0f"}, "downloads": -1, "filename": "pyfmg-0.7.5-py2-none-any.whl", "has_sig": false, "md5_digest": "e08ad6f021c5f6e94c988615bfcbddb6", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 14746, "upload_time": "2018-09-13T17:18:49", "upload_time_iso_8601": "2018-09-13T17:18:49.878011Z", "url": "https://files.pythonhosted.org/packages/81/ea/65705e07d98c9c68bfbe7172ae778d37b504f31c6b0216a127dc73d3d4c8/pyfmg-0.7.5-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "304a060446ac2a604cb746979f975b88", "sha256": "2e1f5dee8dfccbaa4349f029ec01318ac37bc18b43cfb5c8f2572d6b2fa85986"}, "downloads": -1, "filename": "pyfmg-0.7.5.tar.gz", "has_sig": false, "md5_digest": "304a060446ac2a604cb746979f975b88", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13634, "upload_time": "2018-09-13T17:18:50", "upload_time_iso_8601": "2018-09-13T17:18:50.925324Z", "url": "https://files.pythonhosted.org/packages/d4/e5/dcbc2ff57f94a49df5f0d6046a9de27905131b25bb97c97c220c7e39f599/pyfmg-0.7.5.tar.gz", "yanked": false}], "0.8.0": [{"comment_text": "", "digests": {"md5": "326921cc3129d549ce9adc1c4bbdbb83", "sha256": "9676c87dab173981229789f93f0fe9a358e90659427af43fc877ec783467f3c7"}, "downloads": -1, "filename": "pyfmg-0.8.0-py2-none-any.whl", "has_sig": false, "md5_digest": "326921cc3129d549ce9adc1c4bbdbb83", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 17381, "upload_time": "2018-12-10T16:09:05", "upload_time_iso_8601": "2018-12-10T16:09:05.210764Z", "url": "https://files.pythonhosted.org/packages/cf/95/20cc6133f7e403f69eb7615358795e86963110f1758287d17b3a2dfc6ef3/pyfmg-0.8.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ac5841c903b437b37711bb6a53d6d526", "sha256": "ef4812801b0bd060909fa7eac1fbb19e68c2493adf2ac37b1b27b286db27637c"}, "downloads": -1, "filename": "pyfmg-0.8.0.tar.gz", "has_sig": false, "md5_digest": "ac5841c903b437b37711bb6a53d6d526", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16364, "upload_time": "2018-12-10T16:09:07", "upload_time_iso_8601": "2018-12-10T16:09:07.051851Z", "url": "https://files.pythonhosted.org/packages/2b/56/d4fb3031b97a58834a2a9101e9b930023a30c1ca84006f083f5460521e74/pyfmg-0.8.0.tar.gz", "yanked": false}], "0.8.1": [{"comment_text": "", "digests": {"md5": "527a862c68569c8a4a50e7b49cf48b8b", "sha256": "f3ef4d1cad190ef38a8a9127967be78fb792036daf054475c1f5c3d81877c191"}, "downloads": -1, "filename": "pyfmg-0.8.1-py2-none-any.whl", "has_sig": false, "md5_digest": "527a862c68569c8a4a50e7b49cf48b8b", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 17381, "upload_time": "2018-12-10T16:15:09", "upload_time_iso_8601": "2018-12-10T16:15:09.771771Z", "url": "https://files.pythonhosted.org/packages/e4/02/0a5bc4225b47e06deea81df8200cf9a11ed590c88b4893d02fab2542dde9/pyfmg-0.8.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2f589fdbe60e73947d68db41fbef6410", "sha256": "60602c1a352e045cb1a8f0c6774dd91b10ebfe1218a3fbe0a4fb3c8b9c326ab1"}, "downloads": -1, "filename": "pyfmg-0.8.1.tar.gz", "has_sig": false, "md5_digest": "2f589fdbe60e73947d68db41fbef6410", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16372, "upload_time": "2018-12-10T16:15:11", "upload_time_iso_8601": "2018-12-10T16:15:11.029551Z", "url": "https://files.pythonhosted.org/packages/df/f3/87a310d24e92e4fc80732bcb1726e2f0d77c53054a7aa5add4cc3e507a88/pyfmg-0.8.1.tar.gz", "yanked": false}], "0.8.2": [{"comment_text": "", "digests": {"md5": "4d8b1220199baf1ab8a8087ceea4f464", "sha256": "b22bd29d734cc36dd4cdae300ce6a1ca9eaf4599bd72546be6c148f71212a645"}, "downloads": -1, "filename": "pyfmg-0.8.2-py2-none-any.whl", "has_sig": false, "md5_digest": "4d8b1220199baf1ab8a8087ceea4f464", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 18438, "upload_time": "2019-08-29T23:57:35", "upload_time_iso_8601": "2019-08-29T23:57:35.857826Z", "url": "https://files.pythonhosted.org/packages/6b/c7/b5a712f14599477d7231c8b0ce6b922265e98882d29e313466176e2d7411/pyfmg-0.8.2-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "215e6f7e0a00e4ed51b44ae31b8e1b44", "sha256": "a33aace0e0566d5903a9cce75101b3eff6d070d9f1425a3cb009040320c1f899"}, "downloads": -1, "filename": "pyfmg-0.8.2.tar.gz", "has_sig": false, "md5_digest": "215e6f7e0a00e4ed51b44ae31b8e1b44", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17221, "upload_time": "2019-08-29T23:57:37", "upload_time_iso_8601": "2019-08-29T23:57:37.456746Z", "url": "https://files.pythonhosted.org/packages/6d/f6/25fc148798185a2dfb7b40719bf8a3c9cd03b1387b72c961101c93f5a92c/pyfmg-0.8.2.tar.gz", "yanked": false}], "0.8.3": [{"comment_text": "", "digests": {"md5": "fb31859c5bdfb656fd627f60b2cb8c82", "sha256": "a75ce94774bb556351f70a9ec76770acf5d3081b35bab44747d65e4d17f87994"}, "downloads": -1, "filename": "pyfmg-0.8.3-py2-none-any.whl", "has_sig": false, "md5_digest": "fb31859c5bdfb656fd627f60b2cb8c82", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 18461, "upload_time": "2019-10-14T17:16:26", "upload_time_iso_8601": "2019-10-14T17:16:26.411003Z", "url": "https://files.pythonhosted.org/packages/d0/31/51494935a2f49f864c82828e731f2b64b7b0c766ee8c40772acc1e8c1c85/pyfmg-0.8.3-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a845e3f9c6d0e12384c7133e6e20f154", "sha256": "205a135b469cc3723d1828fbddb5251344fd5cb92e1ec91f16fbb3699787551f"}, "downloads": -1, "filename": "pyfmg-0.8.3.tar.gz", "has_sig": false, "md5_digest": "a845e3f9c6d0e12384c7133e6e20f154", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17255, "upload_time": "2019-10-14T17:16:29", "upload_time_iso_8601": "2019-10-14T17:16:29.399112Z", "url": "https://files.pythonhosted.org/packages/32/c3/b3b65e47353c8305c06756dbd75f80616321eb77cbedca4cf5c556566788/pyfmg-0.8.3.tar.gz", "yanked": false}], "0.8.4": [{"comment_text": "", "digests": {"md5": "ab481debc1956e84491629c565e1446f", "sha256": "821c97516a2ada954a95589578baba3e868cf3bb86ab40da00db72846e9f3682"}, "downloads": -1, "filename": "pyfmg-0.8.4-py2-none-any.whl", "has_sig": false, "md5_digest": "ab481debc1956e84491629c565e1446f", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 18471, "upload_time": "2019-10-21T16:29:23", "upload_time_iso_8601": "2019-10-21T16:29:23.550782Z", "url": "https://files.pythonhosted.org/packages/38/73/f4893e0e253875b59f7fade090e73dfd50f94f476924cba6267bb832f62d/pyfmg-0.8.4-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "37f1fc728c703492784de6bafebc9db5", "sha256": "9a00a386b7d0343deb77f9f85ea62405d123bf8849a1ac3b8bc183e98d215634"}, "downloads": -1, "filename": "pyfmg-0.8.4.tar.gz", "has_sig": false, "md5_digest": "37f1fc728c703492784de6bafebc9db5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17268, "upload_time": "2019-10-21T16:29:25", "upload_time_iso_8601": "2019-10-21T16:29:25.431512Z", "url": "https://files.pythonhosted.org/packages/c4/3f/e337fef08022c0c37155c99f3f81ba785aa70af3e18c7632c2e87bff10f9/pyfmg-0.8.4.tar.gz", "yanked": false}], "0.8.5": [{"comment_text": "", "digests": {"md5": "c98c29c3e3f17ccbe92677ce5d8e5667", "sha256": "cf62eed90f9812c093529e6489ee5dd3ae8682b0c512130239f652e8d07a4f0f"}, "downloads": -1, "filename": "pyfmg-0.8.5-py2-none-any.whl", "has_sig": false, "md5_digest": "c98c29c3e3f17ccbe92677ce5d8e5667", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 19701, "upload_time": "2019-12-13T00:06:42", "upload_time_iso_8601": "2019-12-13T00:06:42.726043Z", "url": "https://files.pythonhosted.org/packages/dc/53/4efea2f05b677c99ea69bf61968daa28e9093019e26470d1117a2b6f7d76/pyfmg-0.8.5-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ea8d1c67d9fdfd842bd6d3f56d917895", "sha256": "0cd41ad14fbdbf54b5da16bd94f64d62a201347b013483521a90063827b9170e"}, "downloads": -1, "filename": "pyfmg-0.8.5.tar.gz", "has_sig": false, "md5_digest": "ea8d1c67d9fdfd842bd6d3f56d917895", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19459, "upload_time": "2019-12-13T00:06:44", "upload_time_iso_8601": "2019-12-13T00:06:44.400030Z", "url": "https://files.pythonhosted.org/packages/55/24/c92162382030b40e626c66e9bf1d5acc5991c543d5862c89717914f90d2e/pyfmg-0.8.5.tar.gz", "yanked": false}], "0.8.5.1": [{"comment_text": "", "digests": {"md5": "916bd1d468852f6c358500ff832a4758", "sha256": "9d9714c6790a57dce7d2425e756a5ba7223db14b7c66c311fd6e6f1522c5b5fe"}, "downloads": -1, "filename": "pyfmg-0.8.5.1-py2-none-any.whl", "has_sig": false, "md5_digest": "916bd1d468852f6c358500ff832a4758", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 19723, "upload_time": "2019-12-14T00:13:16", "upload_time_iso_8601": "2019-12-14T00:13:16.955560Z", "url": "https://files.pythonhosted.org/packages/cd/fa/6534e861c71b1f976a01907c4bf5351c088d36570c32499ac5088ae55e30/pyfmg-0.8.5.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5d24ab2124eb7c0795ee1e1c252d24f1", "sha256": "2f5e820010b9487ec173ebc798aaaf8c325d8b53d64d4e1e58bce3baef0c9e4c"}, "downloads": -1, "filename": "pyfmg-0.8.5.1.tar.gz", "has_sig": false, "md5_digest": "5d24ab2124eb7c0795ee1e1c252d24f1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19456, "upload_time": "2019-12-14T00:13:18", "upload_time_iso_8601": "2019-12-14T00:13:18.598704Z", "url": "https://files.pythonhosted.org/packages/3d/0c/aff5077ccc14e5079e01bb314a71d355f1640f70b24d2c83f4bcd5552410/pyfmg-0.8.5.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "916bd1d468852f6c358500ff832a4758", "sha256": "9d9714c6790a57dce7d2425e756a5ba7223db14b7c66c311fd6e6f1522c5b5fe"}, "downloads": -1, "filename": "pyfmg-0.8.5.1-py2-none-any.whl", "has_sig": false, "md5_digest": "916bd1d468852f6c358500ff832a4758", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 19723, "upload_time": "2019-12-14T00:13:16", "upload_time_iso_8601": "2019-12-14T00:13:16.955560Z", "url": "https://files.pythonhosted.org/packages/cd/fa/6534e861c71b1f976a01907c4bf5351c088d36570c32499ac5088ae55e30/pyfmg-0.8.5.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5d24ab2124eb7c0795ee1e1c252d24f1", "sha256": "2f5e820010b9487ec173ebc798aaaf8c325d8b53d64d4e1e58bce3baef0c9e4c"}, "downloads": -1, "filename": "pyfmg-0.8.5.1.tar.gz", "has_sig": false, "md5_digest": "5d24ab2124eb7c0795ee1e1c252d24f1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19456, "upload_time": "2019-12-14T00:13:18", "upload_time_iso_8601": "2019-12-14T00:13:18.598704Z", "url": "https://files.pythonhosted.org/packages/3d/0c/aff5077ccc14e5079e01bb314a71d355f1640f70b24d2c83f4bcd5552410/pyfmg-0.8.5.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:05:40 2020"}