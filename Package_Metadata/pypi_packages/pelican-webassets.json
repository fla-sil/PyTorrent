{"info": {"author": "Bryan Brattlof", "author_email": "hello@bryanbrattlof.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Framework :: Pelican", "Framework :: Pelican :: Plugins", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Libraries"], "description": "pelican-webassets\n#################\n\nThis plugin allows you to use `webassets\n<https://github.com/miracle2k/webassets>`_ (a popular asset management\napplication for Python web development) to manage your CSS and JavaScript\nassets for your `Pelican <https://github.com/getpelican/pelican/>`_ powered\nstatic website.\n\n:code:`webassets` comes with `many filters\n<https://webassets.readthedocs.io/en/latest/builtin_filters.html>`_ like:\n\n* :code:`cssmin` and :code:`yui_css` to compress your CSS assets\n* :code:`libsass` and :code:`less` to compile CSS assets.\n* :code:`closure_js` and :code:`uglifyjs` for your JS assets\n\nas well as many more useful things like \n\n* `URL Expiry \"cache-busting\" \n  <https://webassets.readthedocs.io/en/latest/expiring.html>`_, allowing you to\n  set your :code:`Expires` headers for your assets long into the future.\n* :code:`spritemapper` to merge multiple images into one and generates CSS\n  positioning for the corresponding slices\n* :code:`datauri` to replace :code:`url()` references to external files with\n  internal `data: URIs <http://en.wikipedia.org/wiki/Data_URI_scheme>`_.\n\nFor a more complete list, check out the `included filters\n<https://webassets.readthedocs.io/en/latest/builtin_filters.html>`_ section in\ntheir documentation.\n\nInstalling\n##########\n\nThe :code:`pelican-webassets` package is ready to be installed via a simple\n:code:`pip` command:\n\n.. code-block::\n\n   $ pip install pelican-webassets\n\nThen add the plugin to your list of :code:`PLUGINS` in your\n:code:`pelicanconf.py` file to include the plugin in your next pelican build.\n\n.. code-block:: python\n\n   PLUGINS = [\n       # ...\n       'pelican_webassets',\n       # ...\n   ]\n\n\nUsing the Plugin\n################\n\nAfter you've installed the package, include one or more :code:`{% assets %}` \ntags into your templates to generate the links to your processed assets.\n\n.. code-block:: jinja\n\n   {% assets filters=\"libsass,cssmin\", output=\"css/style.min.css\", \"css/style.scss\" %}\n     <link rel=\"stylesheet\" href=\"{{ SITEURL }}/{{ ASSET_URL }}\">\n   {% endassets %}\n\nThe example above uses the :code:`libsass` and :code:`cssmin` filters to\ncompile, minify and save :code:`style.scss` to :code:`ASSET_URL` (equals\n:code:`{THEME_STATIC_DIR}/`) and results in a final output path of:\n\n.. code-block:: jinja\n\n   <link href=\"http://{SITEURL}/{THEME_STATIC_DIR}/css/style.min.css?b3a7c807\" rel=\"stylesheet\">\n\nJavaScript\n==========\n\nAnother example using JavaScript, uses :code:`closure_js` to combine, minify\nand compress :code:`js/jQuery.js` and :code:`js/app.js`:\n\n.. code-block:: jinja\n\n   {% assets filters=\"closure_js\", output=\"js/packed.js\", \"js/jQuery.js\", \"js/widgets.js\" %}\n    <script src=\"{{ SITEURL }}/{{ ASSET_URL }}\"></script>\n   {% endassets %}\n\ninto a script element like this:\n\n.. code-block:: jinja\n\n   <script src=\"http://{SITEURL}/{THEME_STATIC_DIR}/js/packed.js?00703b9d\"></script>\n\nOptions\n#######\n\nWEBASSETS_CONFIG\n================\n\nSome filters require extra configuration options to function properly. You can\nuse :code:`WEBASSETS_CONFG` to specify these options in a list of \n:code:`(key, value)` tuples.\n\n.. code-block:: python\n\n   WEBASSETS_CONFIG = [\n     ('closure_compressor_optimization', 'ADVANCED_OPTIMIZATIONS'),\n     ('libsass_style', 'compressed') \n   ]\n\n\nWEBASSETS_BUNDLES\n=================\n\n:code:`WEBASSETS_BUNDLES` is a list of 3 item tuples consisting of\n:code:`(name, args, kwargs)` which will be passed to the environment's `register()\n<https://webassets.readthedocs.io/en/latest/environment.html#registering-bundles>`_\nmethod.\n\n.. code-block:: python\n\n   WEBASSETS_BUNDLES = ((\n        'my_bundle',\n        ('css/style.scss',),\n        {'output': 'css/style.min.css', 'filters': ['libsass', 'cssmin']}\n   ),)\n\nAllowing you to simplify something like this:\n\n.. code-block:: jinja\n\n   {% assets filters=\"libsass,cssmin\", output=\"css/style.min.css\", \"css/style.scss\" %}\n\ninto this:\n\n.. code-block:: jinja\n\n   {% assets 'my_bundle' %}\n\n\nWEBASSETS_DEBUG\n===============\n\nBy default, :code:`webassets` will disable asset packaging if Pelican is in\n:code:`DEBUG` mode. You can change this by overriding the :code:`WEBASSETS_DEBUG`\nvalue.\n\n.. code-block:: python \n\n   # put webassets into DEBUG mode if pelican is \n   WEBASSETS_DEBUG = logger.getEffectiveLevel() <= logging.DEBUG\n\nWEBASSETS_SOURCE_PATH\n=====================\n\nIf your raw assets are in directories other than your :code:`THEME_STATIC_PATHS`,\nyou can supply additional directories to search in with\n:code:`WEBASSETS_SOURCE_PATHS`.\n\n.. code-block:: python\n\n   WEBASSETS_SOURCE_PATHS = [\n      'src/scss',\n      'src/js'\n   ]\n\nWant to Help?\n#############\n\nPlease feel free to help. Issues, pull requests, even `patches via email\n<https://bryanbrattlof.com/connect/>`_, all are warmly welcomed.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/bryanbrattlof/pelican-webassets", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pelican-webassets", "package_url": "https://pypi.org/project/pelican-webassets/", "platform": "", "project_url": "https://pypi.org/project/pelican-webassets/", "project_urls": {"Homepage": "https://gitlab.com/bryanbrattlof/pelican-webassets"}, "release_url": "https://pypi.org/project/pelican-webassets/0.1.0/", "requires_dist": ["webassets"], "requires_python": "", "summary": "A Pelican plugin so you can use webassets", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"pelican-webassets\">\n<h2>pelican-webassets</h2>\n<p>This plugin allows you to use <a href=\"https://github.com/miracle2k/webassets\" rel=\"nofollow\">webassets</a> (a popular asset management\napplication for Python web development) to manage your CSS and JavaScript\nassets for your <a href=\"https://github.com/getpelican/pelican/\" rel=\"nofollow\">Pelican</a> powered\nstatic website.</p>\n<p><code>webassets</code> comes with <a href=\"https://webassets.readthedocs.io/en/latest/builtin_filters.html\" rel=\"nofollow\">many filters</a> like:</p>\n<ul>\n<li><code>cssmin</code> and <code>yui_css</code> to compress your CSS assets</li>\n<li><code>libsass</code> and <code>less</code> to compile CSS assets.</li>\n<li><code>closure_js</code> and <code>uglifyjs</code> for your JS assets</li>\n</ul>\n<p>as well as many more useful things like</p>\n<ul>\n<li><a href=\"https://webassets.readthedocs.io/en/latest/expiring.html\" rel=\"nofollow\">URL Expiry \u201ccache-busting\u201d</a>, allowing you to\nset your <code>Expires</code> headers for your assets long into the future.</li>\n<li><code>spritemapper</code> to merge multiple images into one and generates CSS\npositioning for the corresponding slices</li>\n<li><code>datauri</code> to replace <code>url()</code> references to external files with\ninternal <a href=\"http://en.wikipedia.org/wiki/Data_URI_scheme\" rel=\"nofollow\">data: URIs</a>.</li>\n</ul>\n<p>For a more complete list, check out the <a href=\"https://webassets.readthedocs.io/en/latest/builtin_filters.html\" rel=\"nofollow\">included filters</a> section in\ntheir documentation.</p>\n</div>\n<div id=\"installing\">\n<h2>Installing</h2>\n<p>The <code>pelican-webassets</code> package is ready to be installed via a simple\n<code>pip</code> command:</p>\n<pre>$ pip install pelican-webassets\n</pre>\n<p>Then add the plugin to your list of <code>PLUGINS</code> in your\n<code>pelicanconf.py</code> file to include the plugin in your next pelican build.</p>\n<pre><span class=\"n\">PLUGINS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"s1\">'pelican_webassets'</span><span class=\"p\">,</span>\n    <span class=\"c1\"># ...</span>\n<span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"using-the-plugin\">\n<h2>Using the Plugin</h2>\n<p>After you\u2019ve installed the package, include one or more <code>{% assets %}</code>\ntags into your templates to generate the links to your processed assets.</p>\n<pre><span class=\"cp\">{%</span> <span class=\"k\">assets</span> <span class=\"nv\">filters</span><span class=\"o\">=</span><span class=\"s2\">\"libsass,cssmin\"</span><span class=\"o\">,</span> <span class=\"nv\">output</span><span class=\"o\">=</span><span class=\"s2\">\"css/style.min.css\"</span><span class=\"o\">,</span> <span class=\"s2\">\"css/style.scss\"</span> <span class=\"cp\">%}</span><span class=\"x\">\n  &lt;link rel=\"stylesheet\" href=\"</span><span class=\"cp\">{{</span> <span class=\"nv\">SITEURL</span> <span class=\"cp\">}}</span><span class=\"x\">/</span><span class=\"cp\">{{</span> <span class=\"nv\">ASSET_URL</span> <span class=\"cp\">}}</span><span class=\"x\">\"&gt;\n</span><span class=\"cp\">{%</span> <span class=\"k\">endassets</span> <span class=\"cp\">%}</span>\n</pre>\n<p>The example above uses the <code>libsass</code> and <code>cssmin</code> filters to\ncompile, minify and save <code>style.scss</code> to <code>ASSET_URL</code> (equals\n<code>{THEME_STATIC_DIR}/</code>) and results in a final output path of:</p>\n<pre><span class=\"x\">&lt;link href=\"http://{SITEURL}/{THEME_STATIC_DIR}/css/style.min.css?b3a7c807\" rel=\"stylesheet\"&gt;</span>\n</pre>\n<div id=\"javascript\">\n<h3>JavaScript</h3>\n<p>Another example using JavaScript, uses <code>closure_js</code> to combine, minify\nand compress <code>js/jQuery.js</code> and <code>js/app.js</code>:</p>\n<pre><span class=\"cp\">{%</span> <span class=\"k\">assets</span> <span class=\"nv\">filters</span><span class=\"o\">=</span><span class=\"s2\">\"closure_js\"</span><span class=\"o\">,</span> <span class=\"nv\">output</span><span class=\"o\">=</span><span class=\"s2\">\"js/packed.js\"</span><span class=\"o\">,</span> <span class=\"s2\">\"js/jQuery.js\"</span><span class=\"o\">,</span> <span class=\"s2\">\"js/widgets.js\"</span> <span class=\"cp\">%}</span><span class=\"x\">\n &lt;script src=\"</span><span class=\"cp\">{{</span> <span class=\"nv\">SITEURL</span> <span class=\"cp\">}}</span><span class=\"x\">/</span><span class=\"cp\">{{</span> <span class=\"nv\">ASSET_URL</span> <span class=\"cp\">}}</span><span class=\"x\">\"&gt;&lt;/script&gt;\n</span><span class=\"cp\">{%</span> <span class=\"k\">endassets</span> <span class=\"cp\">%}</span>\n</pre>\n<p>into a script element like this:</p>\n<pre><span class=\"x\">&lt;script src=\"http://{SITEURL}/{THEME_STATIC_DIR}/js/packed.js?00703b9d\"&gt;&lt;/script&gt;</span>\n</pre>\n</div>\n</div>\n<div id=\"options\">\n<h2>Options</h2>\n<div id=\"webassets-config\">\n<h3>WEBASSETS_CONFIG</h3>\n<p>Some filters require extra configuration options to function properly. You can\nuse <code>WEBASSETS_CONFG</code> to specify these options in a list of\n<code>(key, value)</code> tuples.</p>\n<pre><span class=\"n\">WEBASSETS_CONFIG</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n  <span class=\"p\">(</span><span class=\"s1\">'closure_compressor_optimization'</span><span class=\"p\">,</span> <span class=\"s1\">'ADVANCED_OPTIMIZATIONS'</span><span class=\"p\">),</span>\n  <span class=\"p\">(</span><span class=\"s1\">'libsass_style'</span><span class=\"p\">,</span> <span class=\"s1\">'compressed'</span><span class=\"p\">)</span>\n<span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"webassets-bundles\">\n<h3>WEBASSETS_BUNDLES</h3>\n<p><code>WEBASSETS_BUNDLES</code> is a list of 3 item tuples consisting of\n<code>(name, args, kwargs)</code> which will be passed to the environment\u2019s <a href=\"https://webassets.readthedocs.io/en/latest/environment.html#registering-bundles\" rel=\"nofollow\">register()</a>\nmethod.</p>\n<pre><span class=\"n\">WEBASSETS_BUNDLES</span> <span class=\"o\">=</span> <span class=\"p\">((</span>\n     <span class=\"s1\">'my_bundle'</span><span class=\"p\">,</span>\n     <span class=\"p\">(</span><span class=\"s1\">'css/style.scss'</span><span class=\"p\">,),</span>\n     <span class=\"p\">{</span><span class=\"s1\">'output'</span><span class=\"p\">:</span> <span class=\"s1\">'css/style.min.css'</span><span class=\"p\">,</span> <span class=\"s1\">'filters'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'libsass'</span><span class=\"p\">,</span> <span class=\"s1\">'cssmin'</span><span class=\"p\">]}</span>\n<span class=\"p\">),)</span>\n</pre>\n<p>Allowing you to simplify something like this:</p>\n<pre><span class=\"cp\">{%</span> <span class=\"k\">assets</span> <span class=\"nv\">filters</span><span class=\"o\">=</span><span class=\"s2\">\"libsass,cssmin\"</span><span class=\"o\">,</span> <span class=\"nv\">output</span><span class=\"o\">=</span><span class=\"s2\">\"css/style.min.css\"</span><span class=\"o\">,</span> <span class=\"s2\">\"css/style.scss\"</span> <span class=\"cp\">%}</span>\n</pre>\n<p>into this:</p>\n<pre><span class=\"cp\">{%</span> <span class=\"k\">assets</span> <span class=\"s1\">'my_bundle'</span> <span class=\"cp\">%}</span>\n</pre>\n</div>\n<div id=\"webassets-debug\">\n<h3>WEBASSETS_DEBUG</h3>\n<p>By default, <code>webassets</code> will disable asset packaging if Pelican is in\n<code>DEBUG</code> mode. You can change this by overriding the <code>WEBASSETS_DEBUG</code>\nvalue.</p>\n<pre><span class=\"c1\"># put webassets into DEBUG mode if pelican is</span>\n<span class=\"n\">WEBASSETS_DEBUG</span> <span class=\"o\">=</span> <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">getEffectiveLevel</span><span class=\"p\">()</span> <span class=\"o\">&lt;=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span>\n</pre>\n</div>\n<div id=\"webassets-source-path\">\n<h3>WEBASSETS_SOURCE_PATH</h3>\n<p>If your raw assets are in directories other than your <code>THEME_STATIC_PATHS</code>,\nyou can supply additional directories to search in with\n<code>WEBASSETS_SOURCE_PATHS</code>.</p>\n<pre><span class=\"n\">WEBASSETS_SOURCE_PATHS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n   <span class=\"s1\">'src/scss'</span><span class=\"p\">,</span>\n   <span class=\"s1\">'src/js'</span>\n<span class=\"p\">]</span>\n</pre>\n</div>\n</div>\n<div id=\"want-to-help\">\n<h2>Want to Help?</h2>\n<p>Please feel free to help. Issues, pull requests, even <a href=\"https://bryanbrattlof.com/connect/\" rel=\"nofollow\">patches via email</a>, all are warmly welcomed.</p>\n</div>\n\n          </div>"}, "last_serial": 5822232, "releases": {"0.0.0": [{"comment_text": "", "digests": {"md5": "d3c1a06511866ddf134c7fe460ed5fa8", "sha256": "a61773891e437e48b1e14821d93b1b54126a0e29d54ea1f982b0504f37f21f94"}, "downloads": -1, "filename": "pelican_webassets-0.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "d3c1a06511866ddf134c7fe460ed5fa8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4435, "upload_time": "2019-09-12T19:49:51", "upload_time_iso_8601": "2019-09-12T19:49:51.634706Z", "url": "https://files.pythonhosted.org/packages/8d/1f/64768758acbb8641152f7047921465f414e91fe1fdcb591f75d3c313cb60/pelican_webassets-0.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "be6e14eab124ebd494731e445c14681f", "sha256": "0df584d2a52214af10b1aa8815c970675290832aba13dcf19eb1a3c392fd97d2"}, "downloads": -1, "filename": "pelican-webassets-0.0.0.tar.gz", "has_sig": false, "md5_digest": "be6e14eab124ebd494731e445c14681f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4041, "upload_time": "2019-09-12T19:49:54", "upload_time_iso_8601": "2019-09-12T19:49:54.196910Z", "url": "https://files.pythonhosted.org/packages/99/61/5bd7e9c84a845aa54461d489407702218955433f7a4f0aa5c78dfc7359dc/pelican-webassets-0.0.0.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "09481688df7de073a2177f03386a5020", "sha256": "2ae5075df3de8801677aa628e20f1a8de3d585daf02b196b440cf6a94eddf37b"}, "downloads": -1, "filename": "pelican_webassets-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "09481688df7de073a2177f03386a5020", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4435, "upload_time": "2019-09-12T19:56:10", "upload_time_iso_8601": "2019-09-12T19:56:10.228540Z", "url": "https://files.pythonhosted.org/packages/b2/cf/770d4858e9a1818297ace10f0c67b8f9a4f799682fb389206d071e428e67/pelican_webassets-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1efd74f36b0fbada8b1d4d234b715d5c", "sha256": "6c98cd0a38be3fd492e9c15b819d7dc8127c4550cf25e109047de4eda656e42b"}, "downloads": -1, "filename": "pelican-webassets-0.1.0.tar.gz", "has_sig": false, "md5_digest": "1efd74f36b0fbada8b1d4d234b715d5c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4042, "upload_time": "2019-09-12T19:56:11", "upload_time_iso_8601": "2019-09-12T19:56:11.888997Z", "url": "https://files.pythonhosted.org/packages/28/eb/d3c95631e8aff92e3ac3f646ca48aebb884664c5df3e88c45eb53e7e89e5/pelican-webassets-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "09481688df7de073a2177f03386a5020", "sha256": "2ae5075df3de8801677aa628e20f1a8de3d585daf02b196b440cf6a94eddf37b"}, "downloads": -1, "filename": "pelican_webassets-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "09481688df7de073a2177f03386a5020", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4435, "upload_time": "2019-09-12T19:56:10", "upload_time_iso_8601": "2019-09-12T19:56:10.228540Z", "url": "https://files.pythonhosted.org/packages/b2/cf/770d4858e9a1818297ace10f0c67b8f9a4f799682fb389206d071e428e67/pelican_webassets-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1efd74f36b0fbada8b1d4d234b715d5c", "sha256": "6c98cd0a38be3fd492e9c15b819d7dc8127c4550cf25e109047de4eda656e42b"}, "downloads": -1, "filename": "pelican-webassets-0.1.0.tar.gz", "has_sig": false, "md5_digest": "1efd74f36b0fbada8b1d4d234b715d5c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4042, "upload_time": "2019-09-12T19:56:11", "upload_time_iso_8601": "2019-09-12T19:56:11.888997Z", "url": "https://files.pythonhosted.org/packages/28/eb/d3c95631e8aff92e3ac3f646ca48aebb884664c5df3e88c45eb53e7e89e5/pelican-webassets-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:56:37 2020"}