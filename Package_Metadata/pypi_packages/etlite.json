{"info": {"author": "Sergiy Kuzmenko", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: Public Domain", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Software Development :: Interpreters"], "description": "[![Build Status](https://semaphoreci.com/api/v1/shelldweller-39/etlite/branches/master/badge.svg)](https://semaphoreci.com/shelldweller-39/etlite)\n\n# ETlite\n\nExtract/Transform Light - a simple library for reading delimited files.\n\n## Example\n\nGiven CSV file:\n\n```\nArea id,Male,Female,Area\nA12345,34,45,0.25\nA12346,108,99,0.32\n```\n\nDefine a list of transformation:\n\n```python\ntransformations = [\n    # Map existing fields into dictionary.\n    # For nested dictionaries use dot.delimited.keys.\n    # Optional \"via\" parameter takes a callable returning transformed value.\n    { \"from\": \"Area id\", \"to\": \"id\" },\n    { \"from\": \"Male\", \"to\": \"population.male\", \"via\": int },\n    { \"from\": \"Female\", \"to\": \"population.female\", \"via\": int },\n    { \"from\": \"Area\", \"to\": \"area\", \"via\": float },\n\n    # You can also add computed values, not present in the original data source.\n    # Computer values take transformed dictionary as argument\n    # and they do not require \"from\" parameter:\n    {\n        \"to\": \"population.total\",\n        \"via\": lambda x: x['population']['male'] + x['population']['female']\n    },\n    # Note that transformations are executed in the order they were defined.\n    # This transformation uses population.total value computed in the previous step:\n    {\n        \"to\": 'population.density',\n        \"via\": lambda x: round(x['population']['total'] / x['area']),\n    }\n]\n```\n\nRead the file:\n\n```python\nfrom etlite import delim_reader\n\nwith open(\"mydatafile.csv\") as csvfile:\n  reader = delim_reader(csvfile, transformations)\n  data = [row for row in reader]\n```\n\nThis produces a list of dictionaries:\n\n```python\n[\n    {\n        'id': 'A12345',\n        'area': 0.25,\n        'population': {\n            'male': 34,\n            'female': 45,\n            'total': 79,\n            'density': 316\n        }\n    },\n    {\n        'id': 'A12346',\n        'area': 0.32,\n        'population': {\n            'male': 108,\n            'female': 99,\n            'total': 207,\n            'density': 647\n        }\n    }\n]\n```\n\n## `delim_reader` options\n\nETlite is just a thin wrapper on top of Python built-in [CSV module](https://docs.python.org/3/library/csv.html). Thus you can pass to `delim_reader` same options as you would pass to `csv.reader`. For example:\n\n```python\nreader = delim_reader(csvfile, transformations, delimiter=\"\\t\")\n```\n\n## Exception handling\n\nIf desired transtormation cannot be performed, ETLite will raise `TransformationError`. If you do not want to abort data loading, you can pass an error handler to `delim_reader`.\n\nError handler must be a function. It will be passed an instance of `TransformationError`. *Note: `on_error` must be pased as keywod argument.*\n\n```python\nfrom etlite import delim_reader\n\ntransformations = [\n    # ...\n]\n\ndef error_handler(err):\n    # err is an instance of TransformationError\n    print(err) # prints error message\n    print(err.record) # prints raw record, prior to transformation\n\n\nwith open('my-data.csv') as stream:\n    reader = delim_reader(stream, transformations, on_error=error_handler)\n    for row in reader:\n        do_something(row)\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/shelldweller/etlite", "keywords": "", "license": "Public Domain", "maintainer": "", "maintainer_email": "", "name": "etlite", "package_url": "https://pypi.org/project/etlite/", "platform": "any", "project_url": "https://pypi.org/project/etlite/", "project_urls": {"Homepage": "https://github.com/shelldweller/etlite"}, "release_url": "https://pypi.org/project/etlite/0.1.1/", "requires_dist": null, "requires_python": "", "summary": "Extract/Transform Light - a simple library for reading delimited files.", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://semaphoreci.com/shelldweller-39/etlite\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d35781d9cfb560a42d692e494c5066891194ef3c/68747470733a2f2f73656d6170686f726563692e636f6d2f6170692f76312f7368656c6c6477656c6c65722d33392f65746c6974652f6272616e636865732f6d61737465722f62616467652e737667\"></a></p>\n<h1>ETlite</h1>\n<p>Extract/Transform Light - a simple library for reading delimited files.</p>\n<h2>Example</h2>\n<p>Given CSV file:</p>\n<pre><code>Area id,Male,Female,Area\nA12345,34,45,0.25\nA12346,108,99,0.32\n</code></pre>\n<p>Define a list of transformation:</p>\n<pre><span class=\"n\">transformations</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"c1\"># Map existing fields into dictionary.</span>\n    <span class=\"c1\"># For nested dictionaries use dot.delimited.keys.</span>\n    <span class=\"c1\"># Optional \"via\" parameter takes a callable returning transformed value.</span>\n    <span class=\"p\">{</span> <span class=\"s2\">\"from\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Area id\"</span><span class=\"p\">,</span> <span class=\"s2\">\"to\"</span><span class=\"p\">:</span> <span class=\"s2\">\"id\"</span> <span class=\"p\">},</span>\n    <span class=\"p\">{</span> <span class=\"s2\">\"from\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Male\"</span><span class=\"p\">,</span> <span class=\"s2\">\"to\"</span><span class=\"p\">:</span> <span class=\"s2\">\"population.male\"</span><span class=\"p\">,</span> <span class=\"s2\">\"via\"</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"p\">},</span>\n    <span class=\"p\">{</span> <span class=\"s2\">\"from\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Female\"</span><span class=\"p\">,</span> <span class=\"s2\">\"to\"</span><span class=\"p\">:</span> <span class=\"s2\">\"population.female\"</span><span class=\"p\">,</span> <span class=\"s2\">\"via\"</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"p\">},</span>\n    <span class=\"p\">{</span> <span class=\"s2\">\"from\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Area\"</span><span class=\"p\">,</span> <span class=\"s2\">\"to\"</span><span class=\"p\">:</span> <span class=\"s2\">\"area\"</span><span class=\"p\">,</span> <span class=\"s2\">\"via\"</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"p\">},</span>\n\n    <span class=\"c1\"># You can also add computed values, not present in the original data source.</span>\n    <span class=\"c1\"># Computer values take transformed dictionary as argument</span>\n    <span class=\"c1\"># and they do not require \"from\" parameter:</span>\n    <span class=\"p\">{</span>\n        <span class=\"s2\">\"to\"</span><span class=\"p\">:</span> <span class=\"s2\">\"population.total\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"via\"</span><span class=\"p\">:</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s1\">'population'</span><span class=\"p\">][</span><span class=\"s1\">'male'</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s1\">'population'</span><span class=\"p\">][</span><span class=\"s1\">'female'</span><span class=\"p\">]</span>\n    <span class=\"p\">},</span>\n    <span class=\"c1\"># Note that transformations are executed in the order they were defined.</span>\n    <span class=\"c1\"># This transformation uses population.total value computed in the previous step:</span>\n    <span class=\"p\">{</span>\n        <span class=\"s2\">\"to\"</span><span class=\"p\">:</span> <span class=\"s1\">'population.density'</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"via\"</span><span class=\"p\">:</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">round</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s1\">'population'</span><span class=\"p\">][</span><span class=\"s1\">'total'</span><span class=\"p\">]</span> <span class=\"o\">/</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s1\">'area'</span><span class=\"p\">]),</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n</pre>\n<p>Read the file:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">etlite</span> <span class=\"kn\">import</span> <span class=\"n\">delim_reader</span>\n\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"mydatafile.csv\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">csvfile</span><span class=\"p\">:</span>\n  <span class=\"n\">reader</span> <span class=\"o\">=</span> <span class=\"n\">delim_reader</span><span class=\"p\">(</span><span class=\"n\">csvfile</span><span class=\"p\">,</span> <span class=\"n\">transformations</span><span class=\"p\">)</span>\n  <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">row</span> <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">reader</span><span class=\"p\">]</span>\n</pre>\n<p>This produces a list of dictionaries:</p>\n<pre><span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n        <span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'A12345'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'area'</span><span class=\"p\">:</span> <span class=\"mf\">0.25</span><span class=\"p\">,</span>\n        <span class=\"s1\">'population'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'male'</span><span class=\"p\">:</span> <span class=\"mi\">34</span><span class=\"p\">,</span>\n            <span class=\"s1\">'female'</span><span class=\"p\">:</span> <span class=\"mi\">45</span><span class=\"p\">,</span>\n            <span class=\"s1\">'total'</span><span class=\"p\">:</span> <span class=\"mi\">79</span><span class=\"p\">,</span>\n            <span class=\"s1\">'density'</span><span class=\"p\">:</span> <span class=\"mi\">316</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n        <span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'A12346'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'area'</span><span class=\"p\">:</span> <span class=\"mf\">0.32</span><span class=\"p\">,</span>\n        <span class=\"s1\">'population'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'male'</span><span class=\"p\">:</span> <span class=\"mi\">108</span><span class=\"p\">,</span>\n            <span class=\"s1\">'female'</span><span class=\"p\">:</span> <span class=\"mi\">99</span><span class=\"p\">,</span>\n            <span class=\"s1\">'total'</span><span class=\"p\">:</span> <span class=\"mi\">207</span><span class=\"p\">,</span>\n            <span class=\"s1\">'density'</span><span class=\"p\">:</span> <span class=\"mi\">647</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n</pre>\n<h2><code>delim_reader</code> options</h2>\n<p>ETlite is just a thin wrapper on top of Python built-in <a href=\"https://docs.python.org/3/library/csv.html\" rel=\"nofollow\">CSV module</a>. Thus you can pass to <code>delim_reader</code> same options as you would pass to <code>csv.reader</code>. For example:</p>\n<pre><span class=\"n\">reader</span> <span class=\"o\">=</span> <span class=\"n\">delim_reader</span><span class=\"p\">(</span><span class=\"n\">csvfile</span><span class=\"p\">,</span> <span class=\"n\">transformations</span><span class=\"p\">,</span> <span class=\"n\">delimiter</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"se\">\\t</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n</pre>\n<h2>Exception handling</h2>\n<p>If desired transtormation cannot be performed, ETLite will raise <code>TransformationError</code>. If you do not want to abort data loading, you can pass an error handler to <code>delim_reader</code>.</p>\n<p>Error handler must be a function. It will be passed an instance of <code>TransformationError</code>. <em>Note: <code>on_error</code> must be pased as keywod argument.</em></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">etlite</span> <span class=\"kn\">import</span> <span class=\"n\">delim_reader</span>\n\n<span class=\"n\">transformations</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"c1\"># ...</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">error_handler</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">):</span>\n    <span class=\"c1\"># err is an instance of TransformationError</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)</span> <span class=\"c1\"># prints error message</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"o\">.</span><span class=\"n\">record</span><span class=\"p\">)</span> <span class=\"c1\"># prints raw record, prior to transformation</span>\n\n\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'my-data.csv'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">stream</span><span class=\"p\">:</span>\n    <span class=\"n\">reader</span> <span class=\"o\">=</span> <span class=\"n\">delim_reader</span><span class=\"p\">(</span><span class=\"n\">stream</span><span class=\"p\">,</span> <span class=\"n\">transformations</span><span class=\"p\">,</span> <span class=\"n\">on_error</span><span class=\"o\">=</span><span class=\"n\">error_handler</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">reader</span><span class=\"p\">:</span>\n        <span class=\"n\">do_something</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 4398426, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "94faed0dbf38f92e62b17a8be3b94e3c", "sha256": "007cefc7eb58615933a0f92a0dfbae1352eb3bcc94d6c29fc3efed0a5d3c14b8"}, "downloads": -1, "filename": "etlite-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "94faed0dbf38f92e62b17a8be3b94e3c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3601, "upload_time": "2018-10-21T01:41:21", "upload_time_iso_8601": "2018-10-21T01:41:21.717768Z", "url": "https://files.pythonhosted.org/packages/18/e4/096d5f097a4968f6fd263afe1e313c73ca1245031681a78164b995009582/etlite-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c4fc51dc16e4ab5723b29963b0a819b8", "sha256": "c90213acb439d8324cc585bf8247b9cffae33c3d2068a6bc9441558c2aff3a0a"}, "downloads": -1, "filename": "etlite-0.1.1.tar.gz", "has_sig": false, "md5_digest": "c4fc51dc16e4ab5723b29963b0a819b8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3228, "upload_time": "2018-10-21T01:41:23", "upload_time_iso_8601": "2018-10-21T01:41:23.152024Z", "url": "https://files.pythonhosted.org/packages/5c/c7/7c84d8ba557bd89a2606a7ace646eaf6173c353487f9ce33cb378aa7d943/etlite-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "94faed0dbf38f92e62b17a8be3b94e3c", "sha256": "007cefc7eb58615933a0f92a0dfbae1352eb3bcc94d6c29fc3efed0a5d3c14b8"}, "downloads": -1, "filename": "etlite-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "94faed0dbf38f92e62b17a8be3b94e3c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3601, "upload_time": "2018-10-21T01:41:21", "upload_time_iso_8601": "2018-10-21T01:41:21.717768Z", "url": "https://files.pythonhosted.org/packages/18/e4/096d5f097a4968f6fd263afe1e313c73ca1245031681a78164b995009582/etlite-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c4fc51dc16e4ab5723b29963b0a819b8", "sha256": "c90213acb439d8324cc585bf8247b9cffae33c3d2068a6bc9441558c2aff3a0a"}, "downloads": -1, "filename": "etlite-0.1.1.tar.gz", "has_sig": false, "md5_digest": "c4fc51dc16e4ab5723b29963b0a819b8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3228, "upload_time": "2018-10-21T01:41:23", "upload_time_iso_8601": "2018-10-21T01:41:23.152024Z", "url": "https://files.pythonhosted.org/packages/5c/c7/7c84d8ba557bd89a2606a7ace646eaf6173c353487f9ce33cb378aa7d943/etlite-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:25 2020"}