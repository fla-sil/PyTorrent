{"info": {"author": "Nik Langrind", "author_email": "langrind@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# CCJTools\n\nScripts for working with JSON compilation databases fro clang etc. \n\nI need to produce and convert [compilation\ndatabases](https://sarcasm.github.io/notes/dev/compilation-database.html)\nfor different projects and different toolchains. This repo has\nsscripts to help with that.\n\nThere are currently three commands:\n\n* ccj-make      - Produce a JSON format compilation database from a text build log\n* ccj-xform-ap  - Sanitize ArduPilot compilation database and move it to current directory\n* ccj-xform-px4 - Sanitize PX4 compilation database and move it to current directory\n\n`ccj-make` is useful when you've captured make commands in a text file\nand need to produce a compilation database. For each line of text that\nyour make produced, if it looks like a compile command, `ccj-make`\ncreates a single record with three fields: `directory`, `command` and\n`file`.\n\nThe `directory` member is the same for each record. It comes from the\n`-p` command line option, or from $PWD.\n\nThe `command` comes from looking for lines whose first word appears to\nbe a compiler. The `-c` command line option specifies an exact match\nstring if needed. Otherwise, the program guesses.\n\nThe `file` is assumed to be the last word on the line that was\nidentified as a command.\n\nHeuristics are naive, and presumably will evolve to be more\nsophisticated, and also to be governable via user options\n\nAt the end of the run, the compilation database is produced by emitting\nall the records to the file `compile_commands.json`, or a name that you\nprovide via the `-o` command line switch.\n\nAn existing json file can be provided via the `-e` command line\noption. It is used to prepopulate the internal list of records.\n(Should add the ability to preserve existing entries or modify\nthem. Currently it only modifies them.)\n\nThis program is not cautious about overwriting the existing\n`compile_commands.json`.\n\nThe other two programs transform a `compile_commands.json` taken from\na PX4 or ArduPilot build, by making it appear as if the build was\nperformed in the root, minimizing the significance of the\n`build/<config>` directory. This makes tools such as CCLS, Rtags and\nLSP work more smoothly.\n\n## Usage and Examples\n\n### ccj-make\n\nThe ccjtools repo has a file `tests/mcux_build.log` that you can turn\ninto a compilation database by doing:\n\n```\n$ ccj-make mcux_build.log -r gcc\n```\n\n### ccj-xform-px4\n\nFrom the top of a PX4 dir, after it's been built:\n\n```\n$ ccj-xform-px4 -f build/px4_fmu-v5_multicopter/compile_commands.json\n```\n\nwill produce `./compile_commands.json`, which can be used by the\nRtags command for instance:\n\n```\n$ rc --project-root=$PWD -J .\n```\n\n### ccj-xform-ap\n\nSimilarly for an Ardupilot build, from the root of your Ardupilot\nclone after it's been built:\n\n```\n$ ccj-xform-ap -f build/CubeBlack/compile_commands.json\n```\n\n## Author\n\n* **[Nik Langrind](https://github.com/langrind)**\n\n## License\n\nThis project is licensed under the MIT License - see the\n[LICENSE](LICENSE) file for details\n\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/langrind/ccjtools", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "ccjtools", "package_url": "https://pypi.org/project/ccjtools/", "platform": "", "project_url": "https://pypi.org/project/ccjtools/", "project_urls": {"Homepage": "https://github.com/langrind/ccjtools"}, "release_url": "https://pypi.org/project/ccjtools/0.1.0/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Scripts for working with JSON compilation databases for clang etc.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>CCJTools</h1>\n<p>Scripts for working with JSON compilation databases fro clang etc.</p>\n<p>I need to produce and convert <a href=\"https://sarcasm.github.io/notes/dev/compilation-database.html\" rel=\"nofollow\">compilation\ndatabases</a>\nfor different projects and different toolchains. This repo has\nsscripts to help with that.</p>\n<p>There are currently three commands:</p>\n<ul>\n<li>ccj-make      - Produce a JSON format compilation database from a text build log</li>\n<li>ccj-xform-ap  - Sanitize ArduPilot compilation database and move it to current directory</li>\n<li>ccj-xform-px4 - Sanitize PX4 compilation database and move it to current directory</li>\n</ul>\n<p><code>ccj-make</code> is useful when you've captured make commands in a text file\nand need to produce a compilation database. For each line of text that\nyour make produced, if it looks like a compile command, <code>ccj-make</code>\ncreates a single record with three fields: <code>directory</code>, <code>command</code> and\n<code>file</code>.</p>\n<p>The <code>directory</code> member is the same for each record. It comes from the\n<code>-p</code> command line option, or from $PWD.</p>\n<p>The <code>command</code> comes from looking for lines whose first word appears to\nbe a compiler. The <code>-c</code> command line option specifies an exact match\nstring if needed. Otherwise, the program guesses.</p>\n<p>The <code>file</code> is assumed to be the last word on the line that was\nidentified as a command.</p>\n<p>Heuristics are naive, and presumably will evolve to be more\nsophisticated, and also to be governable via user options</p>\n<p>At the end of the run, the compilation database is produced by emitting\nall the records to the file <code>compile_commands.json</code>, or a name that you\nprovide via the <code>-o</code> command line switch.</p>\n<p>An existing json file can be provided via the <code>-e</code> command line\noption. It is used to prepopulate the internal list of records.\n(Should add the ability to preserve existing entries or modify\nthem. Currently it only modifies them.)</p>\n<p>This program is not cautious about overwriting the existing\n<code>compile_commands.json</code>.</p>\n<p>The other two programs transform a <code>compile_commands.json</code> taken from\na PX4 or ArduPilot build, by making it appear as if the build was\nperformed in the root, minimizing the significance of the\n<code>build/&lt;config&gt;</code> directory. This makes tools such as CCLS, Rtags and\nLSP work more smoothly.</p>\n<h2>Usage and Examples</h2>\n<h3>ccj-make</h3>\n<p>The ccjtools repo has a file <code>tests/mcux_build.log</code> that you can turn\ninto a compilation database by doing:</p>\n<pre><code>$ ccj-make mcux_build.log -r gcc\n</code></pre>\n<h3>ccj-xform-px4</h3>\n<p>From the top of a PX4 dir, after it's been built:</p>\n<pre><code>$ ccj-xform-px4 -f build/px4_fmu-v5_multicopter/compile_commands.json\n</code></pre>\n<p>will produce <code>./compile_commands.json</code>, which can be used by the\nRtags command for instance:</p>\n<pre><code>$ rc --project-root=$PWD -J .\n</code></pre>\n<h3>ccj-xform-ap</h3>\n<p>Similarly for an Ardupilot build, from the root of your Ardupilot\nclone after it's been built:</p>\n<pre><code>$ ccj-xform-ap -f build/CubeBlack/compile_commands.json\n</code></pre>\n<h2>Author</h2>\n<ul>\n<li><strong><a href=\"https://github.com/langrind\" rel=\"nofollow\">Nik Langrind</a></strong></li>\n</ul>\n<h2>License</h2>\n<p>This project is licensed under the MIT License - see the\n<a href=\"LICENSE\" rel=\"nofollow\">LICENSE</a> file for details</p>\n\n          </div>"}, "last_serial": 6260367, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "c41e6f20de616bbc42f0ba839d085c7d", "sha256": "90810456a8239241abb9da1db77a152c4edaadf22b9b86cd310f7acd1811b5f4"}, "downloads": -1, "filename": "ccjtools-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "c41e6f20de616bbc42f0ba839d085c7d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 15619, "upload_time": "2019-12-08T03:27:46", "upload_time_iso_8601": "2019-12-08T03:27:46.120198Z", "url": "https://files.pythonhosted.org/packages/c8/7d/f729e4f3b792d62b4fe63e80433f542c8e1feab6ae18d46acf58f9dfbb20/ccjtools-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "882891903efb76e93e76958a999cbb2c", "sha256": "78023baae2e9c270becc7930497de6663e42a1471b52265c64ea794fec727490"}, "downloads": -1, "filename": "ccjtools-0.1.0.tar.gz", "has_sig": false, "md5_digest": "882891903efb76e93e76958a999cbb2c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8941, "upload_time": "2019-12-08T03:27:48", "upload_time_iso_8601": "2019-12-08T03:27:48.341426Z", "url": "https://files.pythonhosted.org/packages/90/89/a140279d062937b74c73b1795f0ed496a6249dec925f5be4cb9049747a7d/ccjtools-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c41e6f20de616bbc42f0ba839d085c7d", "sha256": "90810456a8239241abb9da1db77a152c4edaadf22b9b86cd310f7acd1811b5f4"}, "downloads": -1, "filename": "ccjtools-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "c41e6f20de616bbc42f0ba839d085c7d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 15619, "upload_time": "2019-12-08T03:27:46", "upload_time_iso_8601": "2019-12-08T03:27:46.120198Z", "url": "https://files.pythonhosted.org/packages/c8/7d/f729e4f3b792d62b4fe63e80433f542c8e1feab6ae18d46acf58f9dfbb20/ccjtools-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "882891903efb76e93e76958a999cbb2c", "sha256": "78023baae2e9c270becc7930497de6663e42a1471b52265c64ea794fec727490"}, "downloads": -1, "filename": "ccjtools-0.1.0.tar.gz", "has_sig": false, "md5_digest": "882891903efb76e93e76958a999cbb2c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8941, "upload_time": "2019-12-08T03:27:48", "upload_time_iso_8601": "2019-12-08T03:27:48.341426Z", "url": "https://files.pythonhosted.org/packages/90/89/a140279d062937b74c73b1795f0ed496a6249dec925f5be4cb9049747a7d/ccjtools-0.1.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:35:06 2020"}