{"info": {"author": "Jeremias Kangas", "author_email": "UNKNOWN", "bugtrack_url": null, "classifiers": [], "description": "Introduction\n================\n\n``django-bitcoin`` is a `Django web framework <http://djangoproject.com/>`_\napplication for building Bitcoin web apps.\n\n.. contents ::\n\nFeatures\n============\n\n* Simple Bitcoin wallet management\n\n* Bitcoin payment processing\n\n* Bitcoin market information\n\nInstallation\n============\n\nTo install, just add the app to your settings.py INSTALLED_APPS like::\n\n    INSTALLED_APPS = [\n        ...\n        'django_bitcoin',\n        ...\n    ]\n    ```\n\nAlso you have to run a local bitcoind instance, and specify connection string in settings::\n\n    BITCOIND_CONNECTION_STRING = \"http://bitcoinuser:password@localhost:8332\"\n\nUsage\n=====\n\nTutorial\n---------\n\n`There is a small tutorial about how to use django-bitcoin to create your own instawallet <http://blog.kangasbros.fi/?p=85>`_.\n\nWallet websites, escrow services using the \"Wallet\"-model\n------------------------------------------------------------\n\nYou can use the `Wallet` class to do different bitcoin-moving applications. Typical example would be a marketplace-style site, where there are multiple sellers and buyer. Or job freelance site, where escrow is needed. Or even an exchange could be done with this abstraction (a little extra classes would be needed however).\n\nNote that while you move bitcoins between Wallet-objects, only bitcoin transactions needed are incoming and outgoing transactions.\nTransactions between the system \"Wallet\"-objects don't generate \"real\" bitcoin transactions. Every transaction (except incoming transactions) is logged to `WalletTransaction` object to ease accounting.\n\nThis also means that outgoing bitcoin transactions are \"mixed\"::\n\n\n    from django_bitcoin import Wallet, currency\n\n    class Profile(models.Model):\n        wallet = ForeignKey(Wallet)\n        outgoing_bitcoin_address = CharField()\n\n    class Escrow(models.Model):\n        wallet = ForeignKey(Wallet)\n        buyer_happy = BooleanField(default=False)\n\n    buyer=Profile.objects.create()\n    seller=Profile.objects.create()\n\n    purchase=Escrow.objects.create()\n\n    AMOUNT_USD=\"9.99\"\n\n    m=currency.Money(AMOUNT_USD, \"USD\")\n    btc_amount=currency.exchange(m, \"BTC\")\n\n    print \"Send \"+str(btc_amount)+\" BTC to address \"+buyer.wallet.receiving_address()\n\n    sleep(5000) # wait for transaction\n\n    if p1.wallet.total_balance()>=btc_amount:\n        p1.send_to_wallet(purchase, btc_amount)\n\n        sleep(1000) # wait for product/service delivery\n\n        if purchase.buyer_happy:\n            purchase.wallet.send_to_wallet(seller.wallet)\n            seller.wallet.send_to_address(seller.outgoing_bitcoin_address, seller.wallet.total_balance())\n        else:\n            print \"WHY U NO HAPPY\"\n            #return bitcoins to buyer, 50/50 split or something\n\nTemplatetags\n----------------\n\nTo display transaction history and simple wallet tagline in your views, use the following templatetags::\n\n    {% load currency_conversions %}\n    <!-- display balance tagline, estimate in USD and received/sent -->\n    {% wallet_tagline profile.bitcoin_wallet %}\n    <!-- display list of transactions as a table -->\n    {% wallet_history profile.bitcoin_wallet %}\n\nEasy way to convert currencies from each other: `btc2usd, usd2btc, eur2btc, btc2eur`\n\nAlso currency2btc, btc2currency for any currencies on bitcoincharts.com::\n\n    {% load currency_conversions %}\n    Hi, for the pizza: send me {{bitcoin_amount}}BTC (about {{ bitcoin_amount|btc2usd }}USD).\n\nDisplay QR code of the bitcoin payment using google charts API::\n\n    {% load currency_conversions %}\n    Pay the following payment with your android bitcoin wallet:\n    {% bitcoin_payment_qr wallet.receiving_address bitcoin_amount %}.\n\n    The same but display also description and an estimate in EUR:\n    {% bitcoin_payment_qr wallet.receiving_address bitcoin_amount \"One beer\" \"EUR\" %}.\n\nTransaction notifications\n-----------------------------\n\nTo enable bitcoin transaction notifications, set the following flag in your ``settings.py``::\n\n    BITCOIN_TRANSACTION_SIGNALING = True\n\nAfter that, you need to setup a *cron* job to run each minute, something like the following::\n\n\n    * * * * * (cd $APP_PATH && python manage.py python manage.py CheckTransactions >> $APP_PATH/logs/email_sends.log 2>&1)\n\n\nAfter that you can define your balance_changed and balance_changed_confirmed signals::\n\n    from django_bitcoin.models import balance_changed, balance_changed_confirmed\n    from django.dispatch import receiver\n\n\n    @receiver(balance_changed)\n    def balance_changed_handler(sender, **kwargs):\n        pass\n        # try:\n        # print \"balance changed\", sender.id, kwargs[\"changed\"], sender.total_balance()\n\n\n    @receiver(balance_changed_confirmed)\n    def balance_changed_confirmed_handler(sender, **kwargs):\n        pass\n\nCommunity\n==========\n\nCurrently ``django-bitcoin`` is used at production in\n\n* `localbitcoins.com <http://localbitcoins.com>`_\n\n* `bountychest.com <http://bountychest.com>`_\n\nMore to come!\n\nIf you have a site using django-bitcoin, drop me an email and I will link to it here.\n\nSupport and source code\n=========================\n\n`Issue tracker at Github.com <https://github.com/kangasbros/django-bitcoin>`_.\n\n\n\nChangelog\n===================\n\n0.2 (2013-05-14)\n----------------\n\n- README.rst, change log and release process workflow updates [miohtama]\n\n- Historical prices data handling [Jeremias Kangas]\n\n0.1\n----\n\n- Initial release", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kangasbros/django-bitcoin", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "django-bitcoin", "package_url": "https://pypi.org/project/django-bitcoin/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-bitcoin/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/kangasbros/django-bitcoin"}, "release_url": "https://pypi.org/project/django-bitcoin/0.2/", "requires_dist": null, "requires_python": null, "summary": "Bitcoin application integration for Django web framework", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"introduction\">\n<h2><a href=\"#id3\" rel=\"nofollow\">Introduction</a></h2>\n<p><tt><span class=\"pre\">django-bitcoin</span></tt> is a <a href=\"http://djangoproject.com/\" rel=\"nofollow\">Django web framework</a>\napplication for building Bitcoin web apps.</p>\n<div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#introduction\" id=\"id3\" rel=\"nofollow\">Introduction</a></li>\n<li><a href=\"#features\" id=\"id4\" rel=\"nofollow\">Features</a></li>\n<li><a href=\"#installation\" id=\"id5\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#usage\" id=\"id6\" rel=\"nofollow\">Usage</a><ul>\n<li><a href=\"#tutorial\" id=\"id7\" rel=\"nofollow\">Tutorial</a></li>\n<li><a href=\"#wallet-websites-escrow-services-using-the-wallet-model\" id=\"id8\" rel=\"nofollow\">Wallet websites, escrow services using the \u201cWallet\u201d-model</a></li>\n<li><a href=\"#templatetags\" id=\"id9\" rel=\"nofollow\">Templatetags</a></li>\n<li><a href=\"#transaction-notifications\" id=\"id10\" rel=\"nofollow\">Transaction notifications</a></li>\n</ul>\n</li>\n<li><a href=\"#community\" id=\"id11\" rel=\"nofollow\">Community</a></li>\n<li><a href=\"#support-and-source-code\" id=\"id12\" rel=\"nofollow\">Support and source code</a></li>\n<li><a href=\"#changelog\" id=\"id13\" rel=\"nofollow\">Changelog</a><ul>\n<li><a href=\"#id1\" id=\"id14\" rel=\"nofollow\">0.2 (2013-05-14)</a></li>\n<li><a href=\"#id2\" id=\"id15\" rel=\"nofollow\">0.1</a></li>\n</ul>\n</li>\n</ul>\n</div>\n</div>\n<div id=\"features\">\n<h2><a href=\"#id4\" rel=\"nofollow\">Features</a></h2>\n<ul>\n<li>Simple Bitcoin wallet management</li>\n<li>Bitcoin payment processing</li>\n<li>Bitcoin market information</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2><a href=\"#id5\" rel=\"nofollow\">Installation</a></h2>\n<p>To install, just add the app to your settings.py INSTALLED_APPS like:</p>\n<pre>INSTALLED_APPS = [\n    ...\n    'django_bitcoin',\n    ...\n]\n```\n</pre>\n<p>Also you have to run a local bitcoind instance, and specify connection string in settings:</p>\n<pre>BITCOIND_CONNECTION_STRING = \"http://bitcoinuser:password@localhost:8332\"\n</pre>\n</div>\n<div id=\"usage\">\n<h2><a href=\"#id6\" rel=\"nofollow\">Usage</a></h2>\n<div id=\"tutorial\">\n<h3><a href=\"#id7\" rel=\"nofollow\">Tutorial</a></h3>\n<p><a href=\"http://blog.kangasbros.fi/?p=85\" rel=\"nofollow\">There is a small tutorial about how to use django-bitcoin to create your own instawallet</a>.</p>\n</div>\n<div id=\"wallet-websites-escrow-services-using-the-wallet-model\">\n<h3><a href=\"#id8\" rel=\"nofollow\">Wallet websites, escrow services using the \u201cWallet\u201d-model</a></h3>\n<p>You can use the <cite>Wallet</cite> class to do different bitcoin-moving applications. Typical example would be a marketplace-style site, where there are multiple sellers and buyer. Or job freelance site, where escrow is needed. Or even an exchange could be done with this abstraction (a little extra classes would be needed however).</p>\n<p>Note that while you move bitcoins between Wallet-objects, only bitcoin transactions needed are incoming and outgoing transactions.\nTransactions between the system \u201cWallet\u201d-objects don\u2019t generate \u201creal\u201d bitcoin transactions. Every transaction (except incoming transactions) is logged to <cite>WalletTransaction</cite> object to ease accounting.</p>\n<p>This also means that outgoing bitcoin transactions are \u201cmixed\u201d:</p>\n<pre>from django_bitcoin import Wallet, currency\n\nclass Profile(models.Model):\n    wallet = ForeignKey(Wallet)\n    outgoing_bitcoin_address = CharField()\n\nclass Escrow(models.Model):\n    wallet = ForeignKey(Wallet)\n    buyer_happy = BooleanField(default=False)\n\nbuyer=Profile.objects.create()\nseller=Profile.objects.create()\n\npurchase=Escrow.objects.create()\n\nAMOUNT_USD=\"9.99\"\n\nm=currency.Money(AMOUNT_USD, \"USD\")\nbtc_amount=currency.exchange(m, \"BTC\")\n\nprint \"Send \"+str(btc_amount)+\" BTC to address \"+buyer.wallet.receiving_address()\n\nsleep(5000) # wait for transaction\n\nif p1.wallet.total_balance()&gt;=btc_amount:\n    p1.send_to_wallet(purchase, btc_amount)\n\n    sleep(1000) # wait for product/service delivery\n\n    if purchase.buyer_happy:\n        purchase.wallet.send_to_wallet(seller.wallet)\n        seller.wallet.send_to_address(seller.outgoing_bitcoin_address, seller.wallet.total_balance())\n    else:\n        print \"WHY U NO HAPPY\"\n        #return bitcoins to buyer, 50/50 split or something\n</pre>\n</div>\n<div id=\"templatetags\">\n<h3><a href=\"#id9\" rel=\"nofollow\">Templatetags</a></h3>\n<p>To display transaction history and simple wallet tagline in your views, use the following templatetags:</p>\n<pre>{% load currency_conversions %}\n&lt;!-- display balance tagline, estimate in USD and received/sent --&gt;\n{% wallet_tagline profile.bitcoin_wallet %}\n&lt;!-- display list of transactions as a table --&gt;\n{% wallet_history profile.bitcoin_wallet %}\n</pre>\n<p>Easy way to convert currencies from each other: <cite>btc2usd, usd2btc, eur2btc, btc2eur</cite></p>\n<p>Also currency2btc, btc2currency for any currencies on bitcoincharts.com:</p>\n<pre>{% load currency_conversions %}\nHi, for the pizza: send me {{bitcoin_amount}}BTC (about {{ bitcoin_amount|btc2usd }}USD).\n</pre>\n<p>Display QR code of the bitcoin payment using google charts API:</p>\n<pre>{% load currency_conversions %}\nPay the following payment with your android bitcoin wallet:\n{% bitcoin_payment_qr wallet.receiving_address bitcoin_amount %}.\n\nThe same but display also description and an estimate in EUR:\n{% bitcoin_payment_qr wallet.receiving_address bitcoin_amount \"One beer\" \"EUR\" %}.\n</pre>\n</div>\n<div id=\"transaction-notifications\">\n<h3><a href=\"#id10\" rel=\"nofollow\">Transaction notifications</a></h3>\n<p>To enable bitcoin transaction notifications, set the following flag in your <tt>settings.py</tt>:</p>\n<pre>BITCOIN_TRANSACTION_SIGNALING = True\n</pre>\n<p>After that, you need to setup a <em>cron</em> job to run each minute, something like the following:</p>\n<pre>* * * * * (cd $APP_PATH &amp;&amp; python manage.py python manage.py CheckTransactions &gt;&gt; $APP_PATH/logs/email_sends.log 2&gt;&amp;1)\n</pre>\n<p>After that you can define your balance_changed and balance_changed_confirmed signals:</p>\n<pre>from django_bitcoin.models import balance_changed, balance_changed_confirmed\nfrom django.dispatch import receiver\n\n\n@receiver(balance_changed)\ndef balance_changed_handler(sender, **kwargs):\n    pass\n    # try:\n    # print \"balance changed\", sender.id, kwargs[\"changed\"], sender.total_balance()\n\n\n@receiver(balance_changed_confirmed)\ndef balance_changed_confirmed_handler(sender, **kwargs):\n    pass\n</pre>\n</div>\n</div>\n<div id=\"community\">\n<h2><a href=\"#id11\" rel=\"nofollow\">Community</a></h2>\n<p>Currently <tt><span class=\"pre\">django-bitcoin</span></tt> is used at production in</p>\n<ul>\n<li><a href=\"http://localbitcoins.com\" rel=\"nofollow\">localbitcoins.com</a></li>\n<li><a href=\"http://bountychest.com\" rel=\"nofollow\">bountychest.com</a></li>\n</ul>\n<p>More to come!</p>\n<p>If you have a site using django-bitcoin, drop me an email and I will link to it here.</p>\n</div>\n<div id=\"support-and-source-code\">\n<h2><a href=\"#id12\" rel=\"nofollow\">Support and source code</a></h2>\n<p><a href=\"https://github.com/kangasbros/django-bitcoin\" rel=\"nofollow\">Issue tracker at Github.com</a>.</p>\n</div>\n<div id=\"changelog\">\n<h2><a href=\"#id13\" rel=\"nofollow\">Changelog</a></h2>\n<div id=\"id1\">\n<h3><a href=\"#id14\" rel=\"nofollow\">0.2 (2013-05-14)</a></h3>\n<ul>\n<li>README.rst, change log and release process workflow updates [miohtama]</li>\n<li>Historical prices data handling [Jeremias Kangas]</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3><a href=\"#id15\" rel=\"nofollow\">0.1</a></h3>\n<ul>\n<li>Initial release</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 789183, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "fef010dda54be7420255739609dfff85", "sha256": "24e846d17f04d4fa5c9787ec8bd1d92563c88b826d311f1c5224f1160eeceef4"}, "downloads": -1, "filename": "django-bitcoin-0.1.tar.gz", "has_sig": false, "md5_digest": "fef010dda54be7420255739609dfff85", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12397, "upload_time": "2012-04-10T14:58:47", "upload_time_iso_8601": "2012-04-10T14:58:47.567158Z", "url": "https://files.pythonhosted.org/packages/56/0d/f1730081376419016d56dab04a6cc4ede848ffb291d1394d33cea5aa8010/django-bitcoin-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "22f1f2e69b97abe0b12d94c9cdc6de68", "sha256": "c594557a567edf9a6dd170c30117f0e5dad6044eeeebef5f8fe4d40187f800a1"}, "downloads": -1, "filename": "django-bitcoin-0.2.zip", "has_sig": false, "md5_digest": "22f1f2e69b97abe0b12d94c9cdc6de68", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 63590, "upload_time": "2013-05-14T09:09:00", "upload_time_iso_8601": "2013-05-14T09:09:00.980954Z", "url": "https://files.pythonhosted.org/packages/92/50/05b375d9819fb57c87ba12c1c54dd203c805a3b3336699348ad6d9618835/django-bitcoin-0.2.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "22f1f2e69b97abe0b12d94c9cdc6de68", "sha256": "c594557a567edf9a6dd170c30117f0e5dad6044eeeebef5f8fe4d40187f800a1"}, "downloads": -1, "filename": "django-bitcoin-0.2.zip", "has_sig": false, "md5_digest": "22f1f2e69b97abe0b12d94c9cdc6de68", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 63590, "upload_time": "2013-05-14T09:09:00", "upload_time_iso_8601": "2013-05-14T09:09:00.980954Z", "url": "https://files.pythonhosted.org/packages/92/50/05b375d9819fb57c87ba12c1c54dd203c805a3b3336699348ad6d9618835/django-bitcoin-0.2.zip", "yanked": false}], "timestamp": "Fri May  8 00:37:25 2020"}