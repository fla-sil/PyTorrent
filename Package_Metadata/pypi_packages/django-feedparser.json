{"info": {"author": "David Thenon", "author_email": "dthenon@emencia.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Web Environment", "Framework :: Django", "Framework :: Django :: 1.4", "Framework :: Django :: 1.5", "Framework :: Django :: 1.6", "Framework :: Django :: 1.7", "Framework :: Django :: 1.8", "Framework :: Django :: 1.9", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.4", "Topic :: Internet :: WWW/HTTP", "Topic :: Software Development :: Libraries :: Python Modules"], "description": ".. _six: https://pypi.python.org/pypi/six\n.. _Django: https://www.djangoproject.com/\n.. _feedparser: https://github.com/kurtmckee/feedparser\n.. _requests: http://docs.python-requests.org/\n.. _DjangoCMS: https://www.django-cms.org\n.. _cmsplugin_feedparser: https://github.com/sveetch/cmsplugin-feedparser\n\n=================\ndjango-feedparser\n=================\n\nA `Django`_ app using `feedparser`_ to fetch and parse a feed to render it from a template. \n\nIt is not a Feed agregator since it manage feeds one by one.\n\n* `requests`_ is used to fetch feeds;\n* `feedparser`_ is used to parse feeds;\n* Django cache is used to avoid fetching again the feed each time;\n* Basic feed renderers just parse the feed without modifying anything but you can extend it to implement your post-process formatting;\n* Once the feed has been fetched, it can be displayed through a template. Default template is really basic and you should eventually override it or create another one to fit to your feed structure/format;\n* A `DjangoCMS`_ plugin is available on `cmsplugin_feedparser`_;\n\nLinks\n*****\n\n* Download his `PyPi package <https://pypi.python.org/pypi/django-feedparser>`_;\n* Clone it on his `repository <https://github.com/sveetch/django-feedparser>`_;\n\nRequires\n********\n\n* `six`_;\n* `Django`_ >= 1.4;\n* `requests`_ >= 2.7.0',\n* `feedparser`_ >= 5.1.3',\n\nInstall\n*******\n\nFirst install the package: ::\n\n    pip install django-feedparser\n\nAdd it to your installed Django apps in settings: ::\n\n    INSTALLED_APPS = (\n        ...\n        'django_feedparser',\n        ...\n    )\n\nThen import its settings: ::\n\n    from django_feedparser.settings import *\n\nAnd finally see about `Available settings`_ you can override.\n\nUsage\n*****\n\nRenderers\n---------\n\nThere is actually two basic renderer available:\n\nbasic-xml\n    Just the basic renderer, parsing an XML feed and return result given by `feedparser`.\n    \n    Don't do any special formatting.\nbasic-json\n    Like ``basic-xml`` but for a JSON feed, obviously don't use `feedparser` but \n    the ``json`` builtin from Python and return the loaded object.\n\nFinally, remember than your renderer have to be compatible with the used template and vice-versa.\n\nViews\n-----\n\nThere is a mixin ``django_feedparser.views.FeedFetchMixin`` you can inherit from your views to exploit a feed.\n\nAnd there is a basic view ``django_feedparser.views.FeedView`` that inherits from mixin ``FeedFetchMixin`` to demonstrate its usage. However the basic view is usable as it if it meets your needing, if so you just have to use it directly in your urls like ``django.views.generic.base.TemplateView``: ::\n    \n    from django.conf.urls import *\n\n    from .views import FeedView\n\n    urlpatterns = patterns('',\n        ...\n        url(r'^myfeed/$', FeedView.as_view(feed_url=\"http://localhost/myfeed.xml\"), name=\"myfeed\"),\n        ...\n    )\n\n.. NOTE::\n   Although the app contains an 'urls.py', it's mainly intended for debugging purpose, you should not mount it in your project urls.\n\nTemplate tags\n-------------\n\nMore common way is to use the template tag to include rendered feed in your templates.\n\nBasic sample: ::\n\n    {% load feedparser_tags %}\n    {% feedparser_render 'http://localhost/sample.xml' %}\n\nOr with all accepted arguments: ::\n\n    {% feedparser_render 'http://localhost/sample.xml' renderer='CustomRenderer' template='foo/custom.html' expiration=3600 %}\n\n\nAvailable settings\n******************\n\nFEED_RENDERER_DEFAULT_TEMPLATE\n    Path to the default renderer template.\n    \n    **Default value**: ``'django_feedparser/basic_feed_renderer.html'``\n\nFEED_CACHE_KEY\n    Feed cache key template string.\n    \n    **Default value**: ``'feedparser_feed_{id}_{expire}'``\n\nFEED_TIMEOUT\n    Timeout until feed response, in seconds.\n    \n    **Default value**: ``5``\n\nFEED_BOZO_ACCEPT\n    Wether we accept (``True``) badly formatted xml feed or not (``False``).\n    \n    **Default value**: ``True``\n\nFEED_SAFE_FETCHING\n    Wether fetching a feed throw an exception (False) or not (True).\n    \n    Bad http status, request errors and timeout error are silently catched when safe fetching is enabled.\n    \n    **Default value**: ``False``\n\nFEED_RENDER_ENGINES\n    A Python dictionnary for available renderer engines, where the key is the shortcut \n    engine name and the value is a valid Python path to the renderer class.\n    \n    **Default value**: ::\n    \n        {\n            'basic-xml': 'django_feedparser.renderer.FeedBasicRenderer',\n            'basic-json': 'django_feedparser.renderer.FeedBasicRenderer',\n        }\n\nDEFAULT_FEED_RENDER_ENGINE\n    The default renderer engine name to use when no one is given.\n    \n    **Default value**: ``basic-xml``", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/sveetch/django-feedparser", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "django-feedparser", "package_url": "https://pypi.org/project/django-feedparser/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-feedparser/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/sveetch/django-feedparser"}, "release_url": "https://pypi.org/project/django-feedparser/0.2.1/", "requires_dist": null, "requires_python": null, "summary": "A Django app using 'feedparser' to fetch and parse a feed to render it from a template", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A <a href=\"https://www.djangoproject.com/\" rel=\"nofollow\">Django</a> app using <a href=\"https://github.com/kurtmckee/feedparser\" rel=\"nofollow\">feedparser</a> to fetch and parse a feed to render it from a template.</p>\n<p>It is not a Feed agregator since it manage feeds one by one.</p>\n<ul>\n<li><a href=\"http://docs.python-requests.org/\" rel=\"nofollow\">requests</a> is used to fetch feeds;</li>\n<li><a href=\"https://github.com/kurtmckee/feedparser\" rel=\"nofollow\">feedparser</a> is used to parse feeds;</li>\n<li>Django cache is used to avoid fetching again the feed each time;</li>\n<li>Basic feed renderers just parse the feed without modifying anything but you can extend it to implement your post-process formatting;</li>\n<li>Once the feed has been fetched, it can be displayed through a template. Default template is really basic and you should eventually override it or create another one to fit to your feed structure/format;</li>\n<li>A <a href=\"https://www.django-cms.org\" rel=\"nofollow\">DjangoCMS</a> plugin is available on <a href=\"https://github.com/sveetch/cmsplugin-feedparser\" rel=\"nofollow\">cmsplugin_feedparser</a>;</li>\n</ul>\n<div id=\"links\">\n<h2>Links</h2>\n<ul>\n<li>Download his <a href=\"https://pypi.python.org/pypi/django-feedparser\" rel=\"nofollow\">PyPi package</a>;</li>\n<li>Clone it on his <a href=\"https://github.com/sveetch/django-feedparser\" rel=\"nofollow\">repository</a>;</li>\n</ul>\n</div>\n<div id=\"requires\">\n<h2>Requires</h2>\n<ul>\n<li><a href=\"https://pypi.python.org/pypi/six\" rel=\"nofollow\">six</a>;</li>\n<li><a href=\"https://www.djangoproject.com/\" rel=\"nofollow\">Django</a> &gt;= 1.4;</li>\n<li><a href=\"http://docs.python-requests.org/\" rel=\"nofollow\">requests</a> &gt;= 2.7.0\u2019,</li>\n<li><a href=\"https://github.com/kurtmckee/feedparser\" rel=\"nofollow\">feedparser</a> &gt;= 5.1.3\u2019,</li>\n</ul>\n</div>\n<div id=\"install\">\n<h2>Install</h2>\n<p>First install the package:</p>\n<pre>pip install django-feedparser\n</pre>\n<p>Add it to your installed Django apps in settings:</p>\n<pre>INSTALLED_APPS = (\n    ...\n    'django_feedparser',\n    ...\n)\n</pre>\n<p>Then import its settings:</p>\n<pre>from django_feedparser.settings import *\n</pre>\n<p>And finally see about <a href=\"#available-settings\" rel=\"nofollow\">Available settings</a> you can override.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div id=\"renderers\">\n<h3>Renderers</h3>\n<p>There is actually two basic renderer available:</p>\n<dl>\n<dt>basic-xml</dt>\n<dd><p>Just the basic renderer, parsing an XML feed and return result given by <cite>feedparser</cite>.</p>\n<p>Don\u2019t do any special formatting.</p>\n</dd>\n<dt>basic-json</dt>\n<dd>Like <tt><span class=\"pre\">basic-xml</span></tt> but for a JSON feed, obviously don\u2019t use <cite>feedparser</cite> but\nthe <tt>json</tt> builtin from Python and return the loaded object.</dd>\n</dl>\n<p>Finally, remember than your renderer have to be compatible with the used template and vice-versa.</p>\n</div>\n<div id=\"views\">\n<h3>Views</h3>\n<p>There is a mixin <tt>django_feedparser.views.FeedFetchMixin</tt> you can inherit from your views to exploit a feed.</p>\n<p>And there is a basic view <tt>django_feedparser.views.FeedView</tt> that inherits from mixin <tt>FeedFetchMixin</tt> to demonstrate its usage. However the basic view is usable as it if it meets your needing, if so you just have to use it directly in your urls like <tt>django.views.generic.base.TemplateView</tt>:</p>\n<pre>from django.conf.urls import *\n\nfrom .views import FeedView\n\nurlpatterns = patterns('',\n    ...\n    url(r'^myfeed/$', FeedView.as_view(feed_url=\"http://localhost/myfeed.xml\"), name=\"myfeed\"),\n    ...\n)\n</pre>\n<div>\n<p>Note</p>\n<p>Although the app contains an \u2018urls.py\u2019, it\u2019s mainly intended for debugging purpose, you should not mount it in your project urls.</p>\n</div>\n</div>\n<div id=\"template-tags\">\n<h3>Template tags</h3>\n<p>More common way is to use the template tag to include rendered feed in your templates.</p>\n<p>Basic sample:</p>\n<pre>{% load feedparser_tags %}\n{% feedparser_render 'http://localhost/sample.xml' %}\n</pre>\n<p>Or with all accepted arguments:</p>\n<pre>{% feedparser_render 'http://localhost/sample.xml' renderer='CustomRenderer' template='foo/custom.html' expiration=3600 %}\n</pre>\n</div>\n</div>\n<div id=\"available-settings\">\n<h2>Available settings</h2>\n<dl>\n<dt>FEED_RENDERER_DEFAULT_TEMPLATE</dt>\n<dd><p>Path to the default renderer template.</p>\n<p><strong>Default value</strong>: <tt>'django_feedparser/basic_feed_renderer.html'</tt></p>\n</dd>\n<dt>FEED_CACHE_KEY</dt>\n<dd><p>Feed cache key template string.</p>\n<p><strong>Default value</strong>: <tt>'feedparser_feed_{id}_{expire}'</tt></p>\n</dd>\n<dt>FEED_TIMEOUT</dt>\n<dd><p>Timeout until feed response, in seconds.</p>\n<p><strong>Default value</strong>: <tt>5</tt></p>\n</dd>\n<dt>FEED_BOZO_ACCEPT</dt>\n<dd><p>Wether we accept (<tt>True</tt>) badly formatted xml feed or not (<tt>False</tt>).</p>\n<p><strong>Default value</strong>: <tt>True</tt></p>\n</dd>\n<dt>FEED_SAFE_FETCHING</dt>\n<dd><p>Wether fetching a feed throw an exception (False) or not (True).</p>\n<p>Bad http status, request errors and timeout error are silently catched when safe fetching is enabled.</p>\n<p><strong>Default value</strong>: <tt>False</tt></p>\n</dd>\n<dt>FEED_RENDER_ENGINES</dt>\n<dd><p>A Python dictionnary for available renderer engines, where the key is the shortcut\nengine name and the value is a valid Python path to the renderer class.</p>\n<p><strong>Default value</strong>:</p>\n<pre>{\n    'basic-xml': 'django_feedparser.renderer.FeedBasicRenderer',\n    'basic-json': 'django_feedparser.renderer.FeedBasicRenderer',\n}\n</pre>\n</dd>\n<dt>DEFAULT_FEED_RENDER_ENGINE</dt>\n<dd><p>The default renderer engine name to use when no one is given.</p>\n<p><strong>Default value</strong>: <tt><span class=\"pre\">basic-xml</span></tt></p>\n</dd>\n</dl>\n</div>\n\n          </div>"}, "last_serial": 1972946, "releases": {"0.1.0": [], "0.1.1": [{"comment_text": "", "digests": {"md5": "8b788dd2ec8508fe2d1e1f486516007a", "sha256": "968ff7786ed41f97eb4280b0604fdd6af7180455a702d15002725ab75f099e48"}, "downloads": -1, "filename": "django-feedparser-0.1.1.tar.gz", "has_sig": false, "md5_digest": "8b788dd2ec8508fe2d1e1f486516007a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8226, "upload_time": "2015-12-06T17:59:02", "upload_time_iso_8601": "2015-12-06T17:59:02.885521Z", "url": "https://files.pythonhosted.org/packages/c8/28/fca3d5673063fc65cdcd3698c92e1aef273ba0d60bb33873fe1a69347e6f/django-feedparser-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "6494cd4efda11b1883bd05d6c324f983", "sha256": "cd3d929f4ee3174bf3e4e6d230093a39f1a4a486ea2a376e0d8e1013d36744ed"}, "downloads": -1, "filename": "django-feedparser-0.1.2.tar.gz", "has_sig": false, "md5_digest": "6494cd4efda11b1883bd05d6c324f983", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8664, "upload_time": "2015-12-09T20:23:27", "upload_time_iso_8601": "2015-12-09T20:23:27.610650Z", "url": "https://files.pythonhosted.org/packages/f0/19/5459f1a534f1fdf89285f28533a87adee17fea363c6b00458c37c5d3bdb2/django-feedparser-0.1.2.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "2c02c70cd9fe91dc0cfb982e8a5041a3", "sha256": "67aa32ae635b87d2ea5fdd71ed0ef76a3597bf9f1818107dc2b28f40fdbbd099"}, "downloads": -1, "filename": "django-feedparser-0.2.0.tar.gz", "has_sig": false, "md5_digest": "2c02c70cd9fe91dc0cfb982e8a5041a3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9595, "upload_time": "2015-12-15T18:08:21", "upload_time_iso_8601": "2015-12-15T18:08:21.844548Z", "url": "https://files.pythonhosted.org/packages/6b/84/da119738c570256d2d5450bee85357af7fcd7ee6235da07e1516fb0fec42/django-feedparser-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "6eded1b52e93061f0e2219e9593adcae", "sha256": "83a825b1d91bd5ba26eeee6dc8f37d2e0357ab0c82b0f916daf535ec2faea25e"}, "downloads": -1, "filename": "django-feedparser-0.2.1.tar.gz", "has_sig": false, "md5_digest": "6eded1b52e93061f0e2219e9593adcae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9764, "upload_time": "2016-02-24T00:23:01", "upload_time_iso_8601": "2016-02-24T00:23:01.246507Z", "url": "https://files.pythonhosted.org/packages/fa/30/b58deb46a9614ec46e6ac264e818c803cf08c42123afed2191b4e2912770/django-feedparser-0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6eded1b52e93061f0e2219e9593adcae", "sha256": "83a825b1d91bd5ba26eeee6dc8f37d2e0357ab0c82b0f916daf535ec2faea25e"}, "downloads": -1, "filename": "django-feedparser-0.2.1.tar.gz", "has_sig": false, "md5_digest": "6eded1b52e93061f0e2219e9593adcae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9764, "upload_time": "2016-02-24T00:23:01", "upload_time_iso_8601": "2016-02-24T00:23:01.246507Z", "url": "https://files.pythonhosted.org/packages/fa/30/b58deb46a9614ec46e6ac264e818c803cf08c42123afed2191b4e2912770/django-feedparser-0.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:36:11 2020"}