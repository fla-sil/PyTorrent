{"info": {"author": "Jim Fulton", "author_email": "jim@zope.com", "bugtrack_url": null, "classifiers": [], "description": "=============\nZEO ZooKeeper\n=============\n\nManaging addresses, and especially ports is a drag.  ZooKeeper can be\nused as a service registry.  Servers can register themselves and\nclients can find services there.  The ``zc.zkzeo`` package provides\nsupport for registering ZEO servers and a ZEO client storage that gets\naddresses from ZooKeeper.\n\n.. contents::\n\nRunning ZEO servers\n===================\n\nTo run a ZEO server, and register it with ZooKeeper, first create a\nZEO configuration file::\n\n   <zeo>\n      address 127.0.0.1\n   </zeo>\n\n   <zookeeper>\n      connection zookeeper.example.com:2181\n      path /databases/demo\n   </zookeeper>\n\n   <filestorage>\n      path demo.fs\n   </filestorage>\n\n.. -> server_conf\n\nThe ZEO configuration file has the same options as usual, plus a\n``zookeeper`` section with two options:\n\n``connection``\n   A ZooKeeper connection string.  This is typically a list of\n   *HOST:PORT* pairs separated by commas.\n\n``path``\n   The path at which to register the server.  The path must already\n   exist.  When the server starts, it will register itself by creating\n   a subnode of the path with a name consisting of it's address.\n\n(You can also specify a ZooKeeper session timeout, in milliseconds,\nwith a ``session-timeout`` option.)\n\nWhen specifying the ZEO address, you can leave off the port and the\noperating system will assign it for you.\n\nTo start the server, use the ``zkrunzeo`` script::\n\n  $ bin/zkrunzeo -C FILENAME\n\n.. test\n\n    >>> import zc.zkzeo.runzeo, zc.zk\n    >>> stop = zc.zkzeo.runzeo.test(\n    ...     server_conf)\n    >>> zk = zc.zk.ZooKeeper('zookeeper.example.com:2181')\n    >>> zk.print_tree('/databases/demo')\n    /demo\n      /127.0.0.1:56824\n        pid = 88841\n\n    >>> stop().exception\n    >>> zk.print_tree('/databases/demo')\n    /demo\n\nwhere ``FILENAME`` is the name of the configuration file you created.\n\nIncluding a ``zc.monitor`` monitoring server\n--------------------------------------------\n\nThe `zc.monitor <http://pypi.python.org/pypi/zc.monitor>`_ package\nprovides a simple extensible command server for gathering monitoring\ndata or providing run-time control of servers.  If ``zc.monitor`` is\nin the Python path, ``zc.zkzeo`` can start a monitor server and make it's\naddress available as the ``monitor`` property of of a server's\nephemeral port.  To request this, we use a ``monitor-server`` option in\nthe ``zookeeper`` section::\n\n   <zeo>\n      address 127.0.0.1\n   </zeo>\n\n   <zookeeper>\n      connection zookeeper.example.com:2181\n      path /databases/demo\n      monitor-server 127.0.0.1\n   </zookeeper>\n\n   <filestorage>\n      path demo.fs\n   </filestorage>\n\n.. -> server_conf\n\n    >>> stop = zc.zkzeo.runzeo.test(server_conf)\n\nThe value is the address to listen on.\n\nWith the configuration above, if we started the server and looked at\nthe ZooKeeper tree for '/databases/demo' using the ``zc.zk`` package, we'd\nsee something like the following::\n\n    >>> zk.print_tree('/databases/demo')\n    /demo\n      /127.0.0.1:64211\n        monitor = u'127.0.0.1:11976'\n        pid = 5082\n\n.. verify that we can connect to the monitor:\n\n    >>> [monitor_addr] = zk.get_children('/databases/demo')\n    >>> host, port = monitor_addr.split(':')\n    >>> import socket, time\n    >>> sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    >>> sock.settimeout(.5)\n    >>> sock.connect((host, int(port)))\n    >>> sock.close()\n    >>> _ = stop()\n    >>> import zc.monitor\n    >>> zc.monitor.last_listener.close()\n\nYou can also specify a unix-domain socket name::\n\n   <zeo>\n      address 127.0.0.1\n   </zeo>\n\n   <zookeeper>\n      connection zookeeper.example.com:2181\n      path /databases/demo\n      monitor-server ./monitor.sock\n   </zookeeper>\n\n   <filestorage>\n      path demo.fs\n   </filestorage>\n\n.. -> server_conf\n\n    We need to clear the zc.zk monitor data so we have a clean monitoring\n    test below.  This is an artifact of running multiple servers in one process.\n\n    >>> import zc.zk.monitor\n    >>> del zc.zk.monitor._servers[:]\n\n    >>> stop = zc.zkzeo.runzeo.test(server_conf)\n\nWhen using a unix-domain socket, the monitor address isn't included in\nthe tree:\n\n    >>> zk.print_tree('/databases/demo')\n    /demo\n      /127.0.0.1:64213\n        pid = 5082\n\n.. verify that we can connect to the monitor:\n\n    >>> sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n    >>> sock.settimeout(.5)\n    >>> sock.connect('./monitor.sock')\n\nSome notes on the monitor server:\n\n- A monitor server won't be useful unless you've registered some\n  command plugins.\n\n- ``zc.monitor`` isn't a dependency of ``zc.zkzeoc`` and won't\n  be in the Python path unless you install it.\n\nMonitoring\n----------\n\nThe zkzeo package provides a Nagios plugin.  The plugin takes a\nZooKeeper connection string and path to look up a ZEO server at (using\nthe zc.zk service-registry framework).  For example, to monitor the\nserver defined above::\n\n  zkzeo-nagios zookeeper.example.com:2181 /databases/demo\n\n.. -> src\n\n    >>> import pkg_resources\n    >>> monitor = pkg_resources.load_entry_point(\n    ...     'zc.zkzeo', 'console_scripts', 'zkzeo-nagios')\n    >>> monitor(src.strip().split()[1:])\n    Empty storage u'1'\n    1\n\nThe zkzeo nagios monitor supports the same options as the ZEO nagios\nmonitor, so for example to get full metrics::\n\n  zkzeo-nagios -m -s statusfile zookeeper.example.com:2181 /databases/demo\n\n.. -> src\n\n    >>> monitor(src.strip().split()[1:])\n    Empty storage u'1'|active_txns=0\n    | connections=0\n     waiting=0\n    1\n    >>> monitor(src.strip().split()[1:])\n    Empty storage u'1'|active_txns=0\n    | connections=0\n     waiting=0\n     aborts=0.0\n     commits=0.0\n     conflicts=0.0\n     conflicts_resolved=0.0\n     loads=0.0\n     stores=0.0\n    1\n\nSometimes, there may be multiple servers registered at the same path,\nfor example if servers are replicated.  When monitoring a single\nserver, you need to know which one to check.  If you've a\nmonitor-server for your ZEO process, as we did above, then you can use\nthat to determine which one to use. Just provide the monitor server address::\n\n  zkzeo-nagios -m -M ./monitor.sock zookeeper.example.com:2181 /databases/demo\n\n.. -> src\n\n    >>> monitor(src.strip().split()[1:])\n    Empty storage u'1'|active_txns=0\n    | connections=0\n     waiting=0\n    1\n\nThere's also a helper function useful for other monitors:\n\n    >>> import zc.zkzeo.nagios\n    >>> [zc.zkzeo.nagios.find_server(\n    ...     'zookeeper.example.com:2181',\n    ...     '/databases/demo',\n    ...     None)] == zk.get_children('/databases/demo')\n    True\n    >>> [zc.zkzeo.nagios.find_server(\n    ...     'zookeeper.example.com:2181',\n    ...     '/databases/demo',\n    ...     './monitor.sock')] == zk.get_children('/databases/demo')\n    True\n\nDefining ZEO clients\n====================\n\nYou can define a client in two ways, from Python and using a\nconfiguration file.\n\nDefining ZEO clients with Python\n--------------------------------\n\nFrom Python, use ``zc.zkzeo.client``::\n\n    >>> import zc.zkzeo\n    >>> client = zc.zkzeo.client(\n    ...     'zookeeper.example.com:2181', '/databases/demo',\n    ...     max_disconnect_poll=1)\n\nYou pass a ZooKeeper connection string and a path.  The ``Client``\nconstructor will create a client storage with addresses found as\nsub-nodes of the given path and it will adjust the client-storage\naddresses as nodes are added and removed as children of the path.\n\nYou can pass all other ``ZEO.ClientStorage.ClientStorage`` arguments,\nexcept the address, as additional positional and keyword arguments.\n\nDatabase and connection convenience functions\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou're usually not really interested in getting a storage object.\nWhat you really want is a database object::\n\n    >>> db = zc.zkzeo.DB(\n    ...     'zookeeper.example.com:2181', '/databases/demo',\n    ...     max_disconnect_poll=1)\n\nor often, just a database connection::\n\n    >>> conn = zc.zkzeo.connection(\n    ...     'zookeeper.example.com:2181', '/databases/demo',\n    ...     max_disconnect_poll=1)\n\n.. test\n\n   >>> exconn = conn\n\nDefining ZEO clients in configuration files\n-------------------------------------------\n\nIn configuration files, use a ``zkzeoclient`` storage\nsection::\n\n    %import zc.zkzeo\n\n    <zodb>\n       <zkzeoclient>\n          zookeeper zookeeper.example.com:2181\n          server /databases/demo\n          max-disconnect-poll 1\n       </zkzeoclient>\n    </zodb>\n\n.. -> conf\n\nThe options for ``zkzeoclient`` are the same as for the standard ZODB\n``zeoclient`` section, except:\n\n- There's an extra required ``zookeeper`` option used to provide a\n  ZooKeeper connection string.\n\n- There can be only one ``server`` option and it is used to supply the\n  path in ZooKeeper where addresses may be found.\n\n.. test\n\n  Double check the clients are working by opening a\n  connection and making sure we see changes:\n\n    >>> import ZODB.config\n    >>> db_from_config = ZODB.config.databaseFromString(conf)\n    >>> with db_from_config.transaction() as conn:\n    ...     conn.root.x = 1\n\n    >>> import ZODB\n    >>> db_from_py = ZODB.DB(client)\n    >>> with db_from_py.transaction() as conn:\n    ...     print conn.root()\n    {'x': 1}\n\n    >>> with db.transaction() as conn:\n    ...     print conn.root()\n    {'x': 1}\n\n    >>> import transaction\n    >>> with transaction.manager:\n    ...     print exconn.root()\n    {'x': 1}\n\n  When we stop the storage server, we'll get warnings from zc.zkzeo, the\n  clients will disconnect and will have no addresses:\n\n    >>> import zope.testing.loggingsupport\n    >>> handler = zope.testing.loggingsupport.Handler('zc.zkzeo')\n    >>> handler.install()\n\n    >>> [old_addr] = zk.get_children('/databases/demo')\n\n    >>> stop().exception\n    >>> zc.monitor.last_listener.close()\n\n    >>> from zope.testing.wait import wait\n    >>> wait(lambda : not client.is_connected())\n    >>> wait(lambda : not db_from_config.storage.is_connected())\n    >>> wait(lambda : not db.storage.is_connected())\n    >>> wait(lambda : not exconn.db().storage.is_connected())\n\n    >>> print handler\n    zc.zkzeo WARNING\n      No addresses from <zookeeper.example.com:2181/databases/demo>\n    zc.zkzeo WARNING\n      No addresses from <zookeeper.example.com:2181/databases/demo>\n    zc.zkzeo WARNING\n      No addresses from <zookeeper.example.com:2181/databases/demo>\n    zc.zkzeo WARNING\n      No addresses from <zookeeper.example.com:2181/databases/demo>\n\n    >>> handler.clear()\n\n  Looking at the client manager, we see that the address list is now empty:\n\n    >>> client._rpc_mgr\n    <ConnectionManager for []>\n\n  Let's sleep for a while to make sure we can wake up.  Of course, we\n  won't sleep *that* long, it's a test.\n\n    >>> import time\n    >>> time.sleep(9)\n\n  Now, we'll restart the server and clients will reconnect\n\n    >>> stop = zc.zkzeo.runzeo.test(server_conf)\n\n    >>> [addr] = zk.get_children('/databases/demo')\n    >>> addr != old_addr\n    True\n    >>> print zk.export_tree('/databases/demo', ephemeral=True),\n    /demo\n      /127.0.0.1:56837\n        pid = 88841\n\n    >>> wait(db_from_config.storage.is_connected)\n    >>> with db_from_config.transaction() as conn:\n    ...     conn.root.x = 2\n    >>> wait(db_from_py.storage.is_connected, timeout=22)\n    >>> time.sleep(.1)\n    >>> with db_from_py.transaction() as conn:\n    ...     print conn.root()\n    {'x': 2}\n\n    >>> wait(db.storage.is_connected, timeout=22)\n    >>> time.sleep(.1)\n    >>> with db.transaction() as conn:\n    ...     print conn.root()\n    {'x': 2}\n\n    >>> wait(exconn.db().storage.is_connected, timeout=22)\n    >>> time.sleep(.1)\n    >>> with transaction.manager:\n    ...     print exconn.root()\n    {'x': 2}\n\n    >>> print handler # doctest: +NORMALIZE_WHITESPACE\n    zc.zkzeo WARNING\n      OK: Addresses from <zookeeper.example.com:2181/databases/demo>\n    zc.zkzeo INFO\n      Addresses from <zookeeper.example.com:2181/databases/demo>:\n      ['127.0.0.1:52649']\n    zc.zkzeo WARNING\n      OK: Addresses from <zookeeper.example.com:2181/databases/demo>\n    zc.zkzeo INFO\n      Addresses from <zookeeper.example.com:2181/databases/demo>:\n      ['127.0.0.1:52649']\n    zc.zkzeo WARNING\n      OK: Addresses from <zookeeper.example.com:2181/databases/demo>\n    zc.zkzeo INFO\n      Addresses from <zookeeper.example.com:2181/databases/demo>:\n      ['127.0.0.1:52649']\n    zc.zkzeo WARNING\n      OK: Addresses from <zookeeper.example.com:2181/databases/demo>\n    zc.zkzeo INFO\n      Addresses from <zookeeper.example.com:2181/databases/demo>:\n      ['127.0.0.1:52649']\n\n    >>> zk.close()\n    >>> handler.uninstall()\n    >>> db_from_py.close()\n    >>> db_from_config.close()\n    >>> db.close()\n    >>> exconn.close()\n    >>> stop().exception\n    >>> zc.monitor.last_listener.close()\n\nChange History\n==============\n\n1.0.1 (2015-01-11)\n------------------\n\nFixed packaging problem (of course).\n\n1.0.0 (2015-01-11)\n------------------\n\n- Updated to work with ZEO/ZODB rather than ZODB3.\n\n- Added a Nagios monitoring plugin, the script zkzeo-nagios\n\n0.3.2 (2012-07-10)\n------------------\n\n- Fixed: Didn't work with explicit configuration of port 0, which is\n  recently supported by ZConfig.\n\n0.3.1 (2012-06-26)\n------------------\n\n- Fixed: setting a monitor server on a unix-domain socket didn't work.\n\n0.3.0 (2012-02-07)\n------------------\n\n- Added a static extra to force a dependency on\n  ``zc-zookeeper-static``.\n\n- In test mode, use a shorter asyncore loop timeout to make the server\n  shut down faster.\n\n- Fixed: zc.zkzeo depended on ``zc.zk [static]``, which forced\n  installation of ``zc-zookeeper-static``, which should be optional.\n\n- Fixed: tests didn't pass with a recent change in handling of\n  registration with empty host names in ``zc.zk``.\n\n- Fixed: Packaging: distribute can't install distributions with\n  symlinks, so stopped using symlinks in distribution.\n\n0.2.1 (2011-12-14)\n------------------\n\n- Fixed bug: The ``path`` key on the ``zookeeper``\n  server-configuration section was required, and shouldn't have been.\n\n0.2.0 (2011-12-13)\n------------------\n\n- Register the host name from the ZEO address setting with ZooKeeper.\n  (This is often an empty string, which ``zc.zk`` turns into the\n  fully-quelified domain name.)\n\n- Fixed bug in handling the monitor-server. The actuall address\n  setting was ignored.\n\n0.1.1 (2011-12-12)\n------------------\n\n- Fixed a packaging bug.\n\n0.1.0 (2011-12-11)\n------------------\n\nInitial release.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "UNKNOWN", "keywords": null, "license": "ZPL 2.1", "maintainer": null, "maintainer_email": null, "name": "zc.zkzeo", "package_url": "https://pypi.org/project/zc.zkzeo/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/zc.zkzeo/", "project_urls": {"Download": "UNKNOWN", "Homepage": "UNKNOWN"}, "release_url": "https://pypi.org/project/zc.zkzeo/1.0.1/", "requires_dist": null, "requires_python": null, "summary": "ZEO ZooKeeper", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Managing addresses, and especially ports is a drag.  ZooKeeper can be\nused as a service registry.  Servers can register themselves and\nclients can find services there.  The <tt>zc.zkzeo</tt> package provides\nsupport for registering ZEO servers and a ZEO client storage that gets\naddresses from ZooKeeper.</p>\n<div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#running-zeo-servers\" id=\"id10\" rel=\"nofollow\">Running ZEO servers</a><ul>\n<li><a href=\"#including-a-zc-monitor-monitoring-server\" id=\"id11\" rel=\"nofollow\">Including a <tt>zc.monitor</tt> monitoring server</a></li>\n<li><a href=\"#monitoring\" id=\"id12\" rel=\"nofollow\">Monitoring</a></li>\n</ul>\n</li>\n<li><a href=\"#defining-zeo-clients\" id=\"id13\" rel=\"nofollow\">Defining ZEO clients</a><ul>\n<li><a href=\"#defining-zeo-clients-with-python\" id=\"id14\" rel=\"nofollow\">Defining ZEO clients with Python</a><ul>\n<li><a href=\"#database-and-connection-convenience-functions\" id=\"id15\" rel=\"nofollow\">Database and connection convenience functions</a></li>\n</ul>\n</li>\n<li><a href=\"#defining-zeo-clients-in-configuration-files\" id=\"id16\" rel=\"nofollow\">Defining ZEO clients in configuration files</a></li>\n</ul>\n</li>\n<li><a href=\"#change-history\" id=\"id17\" rel=\"nofollow\">Change History</a><ul>\n<li><a href=\"#id1\" id=\"id18\" rel=\"nofollow\">1.0.1 (2015-01-11)</a></li>\n<li><a href=\"#id2\" id=\"id19\" rel=\"nofollow\">1.0.0 (2015-01-11)</a></li>\n<li><a href=\"#id3\" id=\"id20\" rel=\"nofollow\">0.3.2 (2012-07-10)</a></li>\n<li><a href=\"#id4\" id=\"id21\" rel=\"nofollow\">0.3.1 (2012-06-26)</a></li>\n<li><a href=\"#id5\" id=\"id22\" rel=\"nofollow\">0.3.0 (2012-02-07)</a></li>\n<li><a href=\"#id6\" id=\"id23\" rel=\"nofollow\">0.2.1 (2011-12-14)</a></li>\n<li><a href=\"#id7\" id=\"id24\" rel=\"nofollow\">0.2.0 (2011-12-13)</a></li>\n<li><a href=\"#id8\" id=\"id25\" rel=\"nofollow\">0.1.1 (2011-12-12)</a></li>\n<li><a href=\"#id9\" id=\"id26\" rel=\"nofollow\">0.1.0 (2011-12-11)</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"running-zeo-servers\">\n<h2><a href=\"#id10\" rel=\"nofollow\">Running ZEO servers</a></h2>\n<p>To run a ZEO server, and register it with ZooKeeper, first create a\nZEO configuration file:</p>\n<pre>&lt;zeo&gt;\n   address 127.0.0.1\n&lt;/zeo&gt;\n\n&lt;zookeeper&gt;\n   connection zookeeper.example.com:2181\n   path /databases/demo\n&lt;/zookeeper&gt;\n\n&lt;filestorage&gt;\n   path demo.fs\n&lt;/filestorage&gt;\n</pre>\n<p>The ZEO configuration file has the same options as usual, plus a\n<tt>zookeeper</tt> section with two options:</p>\n<dl>\n<dt><tt>connection</tt></dt>\n<dd>A ZooKeeper connection string.  This is typically a list of\n<em>HOST:PORT</em> pairs separated by commas.</dd>\n<dt><tt>path</tt></dt>\n<dd>The path at which to register the server.  The path must already\nexist.  When the server starts, it will register itself by creating\na subnode of the path with a name consisting of it\u2019s address.</dd>\n</dl>\n<p>(You can also specify a ZooKeeper session timeout, in milliseconds,\nwith a <tt><span class=\"pre\">session-timeout</span></tt> option.)</p>\n<p>When specifying the ZEO address, you can leave off the port and the\noperating system will assign it for you.</p>\n<p>To start the server, use the <tt>zkrunzeo</tt> script:</p>\n<pre>$ bin/zkrunzeo -C FILENAME\n</pre>\n<p>where <tt>FILENAME</tt> is the name of the configuration file you created.</p>\n<div id=\"including-a-zc-monitor-monitoring-server\">\n<h3><a href=\"#id11\" rel=\"nofollow\">Including a <tt>zc.monitor</tt> monitoring server</a></h3>\n<p>The <a href=\"http://pypi.python.org/pypi/zc.monitor\" rel=\"nofollow\">zc.monitor</a> package\nprovides a simple extensible command server for gathering monitoring\ndata or providing run-time control of servers.  If <tt>zc.monitor</tt> is\nin the Python path, <tt>zc.zkzeo</tt> can start a monitor server and make it\u2019s\naddress available as the <tt>monitor</tt> property of of a server\u2019s\nephemeral port.  To request this, we use a <tt><span class=\"pre\">monitor-server</span></tt> option in\nthe <tt>zookeeper</tt> section:</p>\n<pre>&lt;zeo&gt;\n   address 127.0.0.1\n&lt;/zeo&gt;\n\n&lt;zookeeper&gt;\n   connection zookeeper.example.com:2181\n   path /databases/demo\n   monitor-server 127.0.0.1\n&lt;/zookeeper&gt;\n\n&lt;filestorage&gt;\n   path demo.fs\n&lt;/filestorage&gt;\n</pre>\n<p>The value is the address to listen on.</p>\n<p>With the configuration above, if we started the server and looked at\nthe ZooKeeper tree for \u2018/databases/demo\u2019 using the <tt>zc.zk</tt> package, we\u2019d\nsee something like the following:</p>\n<pre>&gt;&gt;&gt; zk.print_tree('/databases/demo')\n/demo\n  /127.0.0.1:64211\n    monitor = u'127.0.0.1:11976'\n    pid = 5082\n</pre>\n<p>You can also specify a unix-domain socket name:</p>\n<pre>&lt;zeo&gt;\n   address 127.0.0.1\n&lt;/zeo&gt;\n\n&lt;zookeeper&gt;\n   connection zookeeper.example.com:2181\n   path /databases/demo\n   monitor-server ./monitor.sock\n&lt;/zookeeper&gt;\n\n&lt;filestorage&gt;\n   path demo.fs\n&lt;/filestorage&gt;\n</pre>\n<p>When using a unix-domain socket, the monitor address isn\u2019t included in\nthe tree:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; zk.print_tree('/databases/demo')\n/demo\n  /127.0.0.1:64213\n    pid = 5082\n</pre>\n</blockquote>\n<p>Some notes on the monitor server:</p>\n<ul>\n<li>A monitor server won\u2019t be useful unless you\u2019ve registered some\ncommand plugins.</li>\n<li><tt>zc.monitor</tt> isn\u2019t a dependency of <tt>zc.zkzeoc</tt> and won\u2019t\nbe in the Python path unless you install it.</li>\n</ul>\n</div>\n<div id=\"monitoring\">\n<h3><a href=\"#id12\" rel=\"nofollow\">Monitoring</a></h3>\n<p>The zkzeo package provides a Nagios plugin.  The plugin takes a\nZooKeeper connection string and path to look up a ZEO server at (using\nthe zc.zk service-registry framework).  For example, to monitor the\nserver defined above:</p>\n<pre>zkzeo-nagios zookeeper.example.com:2181 /databases/demo\n</pre>\n<p>The zkzeo nagios monitor supports the same options as the ZEO nagios\nmonitor, so for example to get full metrics:</p>\n<pre>zkzeo-nagios -m -s statusfile zookeeper.example.com:2181 /databases/demo\n</pre>\n<p>Sometimes, there may be multiple servers registered at the same path,\nfor example if servers are replicated.  When monitoring a single\nserver, you need to know which one to check.  If you\u2019ve a\nmonitor-server for your ZEO process, as we did above, then you can use\nthat to determine which one to use. Just provide the monitor server address:</p>\n<pre>zkzeo-nagios -m -M ./monitor.sock zookeeper.example.com:2181 /databases/demo\n</pre>\n<p>There\u2019s also a helper function useful for other monitors:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; import zc.zkzeo.nagios\n&gt;&gt;&gt; [zc.zkzeo.nagios.find_server(\n...     'zookeeper.example.com:2181',\n...     '/databases/demo',\n...     None)] == zk.get_children('/databases/demo')\nTrue\n&gt;&gt;&gt; [zc.zkzeo.nagios.find_server(\n...     'zookeeper.example.com:2181',\n...     '/databases/demo',\n...     './monitor.sock')] == zk.get_children('/databases/demo')\nTrue\n</pre>\n</blockquote>\n</div>\n</div>\n<div id=\"defining-zeo-clients\">\n<h2><a href=\"#id13\" rel=\"nofollow\">Defining ZEO clients</a></h2>\n<p>You can define a client in two ways, from Python and using a\nconfiguration file.</p>\n<div id=\"defining-zeo-clients-with-python\">\n<h3><a href=\"#id14\" rel=\"nofollow\">Defining ZEO clients with Python</a></h3>\n<p>From Python, use <tt>zc.zkzeo.client</tt>:</p>\n<pre>&gt;&gt;&gt; import zc.zkzeo\n&gt;&gt;&gt; client = zc.zkzeo.client(\n...     'zookeeper.example.com:2181', '/databases/demo',\n...     max_disconnect_poll=1)\n</pre>\n<p>You pass a ZooKeeper connection string and a path.  The <tt>Client</tt>\nconstructor will create a client storage with addresses found as\nsub-nodes of the given path and it will adjust the client-storage\naddresses as nodes are added and removed as children of the path.</p>\n<p>You can pass all other <tt>ZEO.ClientStorage.ClientStorage</tt> arguments,\nexcept the address, as additional positional and keyword arguments.</p>\n<div id=\"database-and-connection-convenience-functions\">\n<h4><a href=\"#id15\" rel=\"nofollow\">Database and connection convenience functions</a></h4>\n<p>You\u2019re usually not really interested in getting a storage object.\nWhat you really want is a database object:</p>\n<pre>&gt;&gt;&gt; db = zc.zkzeo.DB(\n...     'zookeeper.example.com:2181', '/databases/demo',\n...     max_disconnect_poll=1)\n</pre>\n<p>or often, just a database connection:</p>\n<pre>&gt;&gt;&gt; conn = zc.zkzeo.connection(\n...     'zookeeper.example.com:2181', '/databases/demo',\n...     max_disconnect_poll=1)\n</pre>\n</div>\n</div>\n<div id=\"defining-zeo-clients-in-configuration-files\">\n<h3><a href=\"#id16\" rel=\"nofollow\">Defining ZEO clients in configuration files</a></h3>\n<p>In configuration files, use a <tt>zkzeoclient</tt> storage\nsection:</p>\n<pre>%import zc.zkzeo\n\n&lt;zodb&gt;\n   &lt;zkzeoclient&gt;\n      zookeeper zookeeper.example.com:2181\n      server /databases/demo\n      max-disconnect-poll 1\n   &lt;/zkzeoclient&gt;\n&lt;/zodb&gt;\n</pre>\n<p>The options for <tt>zkzeoclient</tt> are the same as for the standard ZODB\n<tt>zeoclient</tt> section, except:</p>\n<ul>\n<li>There\u2019s an extra required <tt>zookeeper</tt> option used to provide a\nZooKeeper connection string.</li>\n<li>There can be only one <tt>server</tt> option and it is used to supply the\npath in ZooKeeper where addresses may be found.</li>\n</ul>\n</div>\n</div>\n<div id=\"change-history\">\n<h2><a href=\"#id17\" rel=\"nofollow\">Change History</a></h2>\n<div id=\"id1\">\n<h3><a href=\"#id18\" rel=\"nofollow\">1.0.1 (2015-01-11)</a></h3>\n<p>Fixed packaging problem (of course).</p>\n</div>\n<div id=\"id2\">\n<h3><a href=\"#id19\" rel=\"nofollow\">1.0.0 (2015-01-11)</a></h3>\n<ul>\n<li>Updated to work with ZEO/ZODB rather than ZODB3.</li>\n<li>Added a Nagios monitoring plugin, the script zkzeo-nagios</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3><a href=\"#id20\" rel=\"nofollow\">0.3.2 (2012-07-10)</a></h3>\n<ul>\n<li>Fixed: Didn\u2019t work with explicit configuration of port 0, which is\nrecently supported by ZConfig.</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3><a href=\"#id21\" rel=\"nofollow\">0.3.1 (2012-06-26)</a></h3>\n<ul>\n<li>Fixed: setting a monitor server on a unix-domain socket didn\u2019t work.</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3><a href=\"#id22\" rel=\"nofollow\">0.3.0 (2012-02-07)</a></h3>\n<ul>\n<li>Added a static extra to force a dependency on\n<tt><span class=\"pre\">zc-zookeeper-static</span></tt>.</li>\n<li>In test mode, use a shorter asyncore loop timeout to make the server\nshut down faster.</li>\n<li>Fixed: zc.zkzeo depended on <tt>zc.zk [static]</tt>, which forced\ninstallation of <tt><span class=\"pre\">zc-zookeeper-static</span></tt>, which should be optional.</li>\n<li>Fixed: tests didn\u2019t pass with a recent change in handling of\nregistration with empty host names in <tt>zc.zk</tt>.</li>\n<li>Fixed: Packaging: distribute can\u2019t install distributions with\nsymlinks, so stopped using symlinks in distribution.</li>\n</ul>\n</div>\n<div id=\"id6\">\n<h3><a href=\"#id23\" rel=\"nofollow\">0.2.1 (2011-12-14)</a></h3>\n<ul>\n<li>Fixed bug: The <tt>path</tt> key on the <tt>zookeeper</tt>\nserver-configuration section was required, and shouldn\u2019t have been.</li>\n</ul>\n</div>\n<div id=\"id7\">\n<h3><a href=\"#id24\" rel=\"nofollow\">0.2.0 (2011-12-13)</a></h3>\n<ul>\n<li>Register the host name from the ZEO address setting with ZooKeeper.\n(This is often an empty string, which <tt>zc.zk</tt> turns into the\nfully-quelified domain name.)</li>\n<li>Fixed bug in handling the monitor-server. The actuall address\nsetting was ignored.</li>\n</ul>\n</div>\n<div id=\"id8\">\n<h3><a href=\"#id25\" rel=\"nofollow\">0.1.1 (2011-12-12)</a></h3>\n<ul>\n<li>Fixed a packaging bug.</li>\n</ul>\n</div>\n<div id=\"id9\">\n<h3><a href=\"#id26\" rel=\"nofollow\">0.1.0 (2011-12-11)</a></h3>\n<p>Initial release.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1378507, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "c405cbefdb4ddf55e52191fd6beb6cab", "sha256": "c2f7ce61df7943ae213e52a87d7be93158ff80b259849e305fceec9f9bcb00ea"}, "downloads": -1, "filename": "zc.zkzeo-0.1.0.tar.gz", "has_sig": false, "md5_digest": "c405cbefdb4ddf55e52191fd6beb6cab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10055, "upload_time": "2011-12-11T20:00:02", "upload_time_iso_8601": "2011-12-11T20:00:02.268247Z", "url": "https://files.pythonhosted.org/packages/8c/2a/1d724e8d9400d685aade1d4395f4b4aacff1e3cdc62c10916ed616c4b105/zc.zkzeo-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "426f0a3900974e40ad1c3f061c29d943", "sha256": "52b30aa40bb9134b538a22bd664c6fdebb8ad11374c09f7b74a5228a83c81bbd"}, "downloads": -1, "filename": "zc.zkzeo-0.1.1.tar.gz", "has_sig": false, "md5_digest": "426f0a3900974e40ad1c3f061c29d943", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10105, "upload_time": "2011-12-12T15:29:54", "upload_time_iso_8601": "2011-12-12T15:29:54.582048Z", "url": "https://files.pythonhosted.org/packages/2e/98/df77618f6bd21b5a95d6bbfddd9dd1c7e1522edefca07509858221876fd4/zc.zkzeo-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "e9fcf104ae0780dd4ceeb7c5d8305d6a", "sha256": "bad9e663844daa9e273eb98e5e94dae79b098267b47e84f5b764a3ecdd405c44"}, "downloads": -1, "filename": "zc.zkzeo-0.2.0.tar.gz", "has_sig": false, "md5_digest": "e9fcf104ae0780dd4ceeb7c5d8305d6a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11304, "upload_time": "2011-12-13T21:27:59", "upload_time_iso_8601": "2011-12-13T21:27:59.881214Z", "url": "https://files.pythonhosted.org/packages/09/40/b375435f1fdcf56991d2d19107a91b74315112e6c25961109f90496f3cac/zc.zkzeo-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "b7472db5317d0450055c5ed4cf422bbd", "sha256": "c38e26e23fc3488f65cc2ba6311cf588ba30efef00a35a707b96e46f66a62a03"}, "downloads": -1, "filename": "zc.zkzeo-0.2.1.tar.gz", "has_sig": false, "md5_digest": "b7472db5317d0450055c5ed4cf422bbd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11472, "upload_time": "2011-12-14T16:56:05", "upload_time_iso_8601": "2011-12-14T16:56:05.656190Z", "url": "https://files.pythonhosted.org/packages/29/34/95c310ad092b2023376c7ef2ef4c3790de74859512f35f3d4a5547bbd2f0/zc.zkzeo-0.2.1.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "adafa2cb63b5f8a35e03c4cadc6e823e", "sha256": "6a089c167137295d15552a708e8743c82169cc8fef08c31d848c6eaf3e27b753"}, "downloads": -1, "filename": "zc.zkzeo-0.3.0.tar.gz", "has_sig": false, "md5_digest": "adafa2cb63b5f8a35e03c4cadc6e823e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12760, "upload_time": "2012-02-07T20:10:34", "upload_time_iso_8601": "2012-02-07T20:10:34.000953Z", "url": "https://files.pythonhosted.org/packages/34/23/8ddff42168cfd283239d0a76034e452c3709656c670138f59d80560c00e5/zc.zkzeo-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "4e0d82ab978c8dbcc796a518ffd79d7e", "sha256": "2d29fef24624e7eafff9dfd1fbb798ca74079c224abad3b2b6e75d2d61504520"}, "downloads": -1, "filename": "zc.zkzeo-0.3.1.tar.gz", "has_sig": false, "md5_digest": "4e0d82ab978c8dbcc796a518ffd79d7e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13645, "upload_time": "2012-06-26T13:53:03", "upload_time_iso_8601": "2012-06-26T13:53:03.809408Z", "url": "https://files.pythonhosted.org/packages/02/5e/0b977bad8420c4f76d0e44972f9ab4a95be73c8515a81cd0e0671a52d116/zc.zkzeo-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "ffc952313473533ada3a6e3ed37dbbc6", "sha256": "3cd205c2707fc8a3a2f063fddeca123f30c72f2043c91b1d36457025e08ef48c"}, "downloads": -1, "filename": "zc.zkzeo-0.3.2.tar.gz", "has_sig": false, "md5_digest": "ffc952313473533ada3a6e3ed37dbbc6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14869, "upload_time": "2012-07-10T22:08:02", "upload_time_iso_8601": "2012-07-10T22:08:02.950830Z", "url": "https://files.pythonhosted.org/packages/db/df/5a8ae15be72ddcf8724c78bdc3e6c23ddcb76ec3cc5331399044b0507951/zc.zkzeo-0.3.2.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "e0cbe770a27355618ed9c9a6ae6e8add", "sha256": "0888c594bc6a4492d5276d3a9ae854c167ac085ac06994485e8c4df79cfe870e"}, "downloads": -1, "filename": "zc.zkzeo-1.0.0.tar.gz", "has_sig": false, "md5_digest": "e0cbe770a27355618ed9c9a6ae6e8add", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15514, "upload_time": "2015-01-11T15:18:19", "upload_time_iso_8601": "2015-01-11T15:18:19.234251Z", "url": "https://files.pythonhosted.org/packages/db/e6/50e056e4e7c12255864782b4919f4f5a8f1e7ad7dd39ae5847d63ca5b4eb/zc.zkzeo-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "2ab587168a68ee37356fb61fc22f360c", "sha256": "22ed28a947125f0862c4cabe5d9dfb8a0bfa8c3f2e1ad2877f4e72e53e2aab55"}, "downloads": -1, "filename": "zc.zkzeo-1.0.1.tar.gz", "has_sig": false, "md5_digest": "2ab587168a68ee37356fb61fc22f360c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15869, "upload_time": "2015-01-11T15:26:28", "upload_time_iso_8601": "2015-01-11T15:26:28.941496Z", "url": "https://files.pythonhosted.org/packages/56/05/2d9c476eb2273c770a9d00c817188b85b1a8a8d0e0286ba37c5027ec7d18/zc.zkzeo-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2ab587168a68ee37356fb61fc22f360c", "sha256": "22ed28a947125f0862c4cabe5d9dfb8a0bfa8c3f2e1ad2877f4e72e53e2aab55"}, "downloads": -1, "filename": "zc.zkzeo-1.0.1.tar.gz", "has_sig": false, "md5_digest": "2ab587168a68ee37356fb61fc22f360c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15869, "upload_time": "2015-01-11T15:26:28", "upload_time_iso_8601": "2015-01-11T15:26:28.941496Z", "url": "https://files.pythonhosted.org/packages/56/05/2d9c476eb2273c770a9d00c817188b85b1a8a8d0e0286ba37c5027ec7d18/zc.zkzeo-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:18:49 2020"}