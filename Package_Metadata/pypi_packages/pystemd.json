{"info": {"author": "Alvaro Leiva", "author_email": "aleivag@fb.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Intended Audience :: System Administrators", "License :: OSI Approved :: GNU Lesser General Public License v2 or later (LGPLv2+)", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Utilities"], "description": "pystemd\n=======\n\n[![Build Status](https://travis-ci.org/facebookincubator/pystemd.svg)](http://travis-ci.org/facebookincubator/pystemd) [![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black)\n\nThis library allows you to talk to systemd over dbus from python, without\nactually thinking that you are talking to systemd over dbus. This allows you to\nprogrammatically start/stop/restart/kill and verify services status from\nsystemd point of view, avoiding executing `subprocess.Popen(['systemctl', ...`\nand then parsing the output to know the result.\n\n\nShow don't tell\n---------------\n\nIn software as in screenwriting, its better to show how things work instead of\ntell. So this is how you would use the library from a interactive shell.  \n\n    In [1]: from pystemd.systemd1 import Unit\n    In [2]: unit = Unit(b'postfix.service')\n    In [3]: unit.load()\n\nNote: you need to call `unit.load()` because by default `Unit` will not load the\nunit information as that would require do some IO. You can auto load the unit by\n`Unit(b'postfix.service', _autoload=True)`\n\nOnce the unit is loaded, you can interact with it, you can do by accessing its\nsystemd's interfaces:\n\n    In [4]: unit.Unit.ActiveState\n    Out[4]: b'active'\n\n    In [5]: unit.Unit.StopWhenUnneeded\n    Out[5]: False\n\n    In [6]: unit.Unit.Stop(b'replace') # require privilege account\n    Out[6]: b'/org/freedesktop/systemd1/job/6601531'\n\n    In [7]: unit.Unit.ActiveState\n    Out[7]: b'inactive'\n\n    In [8]: unit.Unit.SubState\n    Out[8]: b'running'\n\n    In [9]: unit.Unit.Start(b'replace') # require privilege account\n    Out[9]: b'/org/freedesktop/systemd1/job/6601532'\n\n    In [10]: unit.Unit.ActiveState\n    Out[10]: b'active'\n\n    In [11]: unit.Service.GetProcesses()\n    Out[11]:\n    [(b'/system.slice/postfix.service',\n        1754222,\n        b'/usr/libexec/postfix/master -w'),\n     (b'/system.slice/postfix.service', 1754224, b'pickup -l -t fifo -u'),\n     (b'/system.slice/postfix.service', 1754225, b'qmgr -l -t fifo -u')]\n\n    In [12]: unit.Service.MainPID\n    Out[12]: 1754222\n\nThe `systemd1.Unit` class provides shortcuts for the interfaces in the systemd\nnamespace, as you se above, we have  Service (org.freedesktop.systemd1.Service)\nand Unit (org.freedesktop.systemd1.Unit). Others can be found in\n`unit._interfaces` as:\n\n```\nIn [12]: unit._interfaces\nOut[12]:\n{'org.freedesktop.DBus.Introspectable': <org.freedesktop.DBus.Introspectable of /org/freedesktop/systemd1/unit/postfix_2eservice>,\n 'org.freedesktop.DBus.Peer': <org.freedesktop.DBus.Peer of /org/freedesktop/systemd1/unit/postfix_2eservice>,\n 'org.freedesktop.DBus.Properties': <org.freedesktop.DBus.Properties of /org/freedesktop/systemd1/unit/postfix_2eservice>,\n 'org.freedesktop.systemd1.Service': <org.freedesktop.systemd1.Service of /org/freedesktop/systemd1/unit/postfix_2eservice>,\n 'org.freedesktop.systemd1.Unit': <org.freedesktop.systemd1.Unit of /org/freedesktop/systemd1/unit/postfix_2eservice>}\n\n In [13]: unit.Service\n Out[13]: <org.freedesktop.systemd1.Service of /org/freedesktop/systemd1/unit/postfix_2eservice>\n```\n\nEach interface has methods and properties, that can access directly as\n`unit.Service.MainPID`, the list of properties and methods is in `.properties`\nand `.methods` of each interface.\n\nAlongside the `systemd1.Unit`, we also have a `systemd1.Manager`, that allows\nyou to interact with systemd manager.\n\n\n```\nIn [14]: from pystemd.systemd1 import Manager\n\nIn [15]: manager = Manager()\n\nIn [16]: manager.load()\n\nIn [17]: manager.Manager.ListUnitFiles()\nOut[17]:\n...\n(b'/usr/lib/systemd/system/rhel-domainname.service', b'disabled'),\n (b'/usr/lib/systemd/system/fstrim.timer', b'disabled'),\n (b'/usr/lib/systemd/system/getty.target', b'static'),\n (b'/usr/lib/systemd/system/systemd-user-sessions.service', b'static'),\n...\n\nIn [18]: manager.Manager.Architecture\nOut[18]: b'x86-64'\n\nIn [19]: manager.Manager.Virtualization\nOut[19]: b'kvm'\n\n```\n\nExtras:\n-------\nWe also include `pystemd.run`, the spiritual port of systemd-run\nto python. [example of usage](_docs/pystemd.run.md):\n\n```python\n# run this as root\n>>> import pystemd.run, sys\n>>> pystemd.run(\n    [b'/usr/bin/psql', b'postgres'],\n    machine=b'db1',\n    user=b'postgres',\n    wait=True,\n    pty=True,\n    stdin=sys.stdin, stdout=sys.stdout,\n    env={b'PGTZ': b'UTC'}\n)\n```\n\nwill open a postgres interactive prompt in a local nspawn-machine.\n\nYou also get an interface to `sd_notify` in the form of `pystemd.daemon.notify` [docs](_docs/daemon.md).\n\n```python\n# run this as root\n>>> import pystemd.daemon\n>>> pystemd.daemon.notify(False, ready=1, status='Gimme! Gimme! Gimme!')\n```\n\nAnd access to listen file descriptors for socket activation scripts.\n\n```python\n# run this as root\n>>> import pystemd.daemon\n>>> pystemd.daemon.LISTEN_FDS_START\n3\n>>> pystemd.daemon.listen_fds()\n1 # you normally only open 1 socket\n```\n\nAnd access if watchdog is enabled and ping it.\n\n```python\nimport time\nimport pystemd.daemon\n\nwatchdog_usec = pystemd.daemon.watchdog_enabled()\nwatchdog_sec = watchdog_usec/10**6\n\nif not watchdog_usec:\n  print(f'watchdog was not enabled!')\n\nfor i in range(20):\n    pystemd.daemon.notify(False, watchdog=1, status=f'count {i+1}')\n    time.sleep(watchdog_sec*0.5)\n\nprint('sleeping for 30 seconds')\ntime.sleep(watchdog_sec*2)\nprint('you will never reach me in a watchdog env')\n\n```\n\nWe also provide basic journal interaction with `pystemd.journal` [docs](_docs/journal.md)\n\n```python\nimport logging\nimport pystemd.journal\n\npystemd.journal.sendv(\n  f\"PRIORITY={logging.INFO}\",\n  MESSAGE=\"everything is awesome\",\n  SYSLOG_IDENTIFIER=\"tegan\"\n)\n```\n\nwill result in the message (shorten for sake of example).\n\n```json\n\n{\n\n  \"SYSLOG_IDENTIFIER\" : \"tegan\",\n  \"PRIORITY\" : \"20\",\n  \"MESSAGE\" : \"everything is awesome\",\n  ...\n}\n\n```\n\nInstall\n-------\n\nSo you like what you see, the simplest way to install is by:\n\n```bash\n$ pip install pystemd\n```\n\nyou'll need to have:\n\n* Python headers: Just use your distro's package (e.g. python-dev).\n* systemd headers: Chances are you already have this. Normally, it is called\n`libsystemd-dev` or `systemd-devel`. You need to have at least v237.\nPlease note that CentOS 7 ships with version 219. To work around this, please read\n  [this](_docs/centos7.md).\n* systemd library: check if `pkg-config --cflags --libs libsystemd` returns\n`-lsystemd` if not you can install normally install `systemd-libs` or\n`libsystemd` depending on your distribution, version needs to be at least\nv237.\n* gcc: or any compiler that `setup.py` will accept.\n\nif you want to install from source then after you clone this repo you need to\n\n```bash\n$ pip install -r requirements.txt # get six\n$ python3 setup.py install # only python3 supported\n```\n\nbut in addition to previous requirements you'll need:\n\n  * setuptools: Just use your distro's package (e.g. python-setuptools).\n  * Cython: at least version 0.21a1, just pip install it or use the official\n  installation guide from cython homepage to get latest\n   http://cython.readthedocs.io/en/latest/src/quickstart/install.html.\n\n\nLearning more\n-------------\n\nThis project has been covered in a number of conference talks:\n* [Using systemd in high level languages](https://www.youtube.com/watch?v=lBQgMGPxqNo) at [All Systems Go! 2018](https://all-systems-go.io)\n* [systemd: why you should care as a Python developer](https://www.youtube.com/watch?v=ZUX9Fx8Rwzg) at [PyCon 2018](https://us.pycon.org/2018/)\n* [Better security for Python with systemd](https://www.youtube.com/watch?v=o-OqslA5dkw) at [Pyninsula #10](https://www.meetup.com/Pyninsula-Python-Peninsula-Meetup/events/244939632/)\n\nA [Vagrant-based demo](https://github.com/aleivag/pycon2018) was also developed\nfor PyCon 2018.\n\nLicense\n-------\n\npystemd is licensed under LGPL 2.1 or later.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/facebookincubator/pystemd", "keywords": "systemd", "license": "LGPL-2.1+", "maintainer": "", "maintainer_email": "", "name": "pystemd", "package_url": "https://pypi.org/project/pystemd/", "platform": "", "project_url": "https://pypi.org/project/pystemd/", "project_urls": {"Homepage": "https://github.com/facebookincubator/pystemd"}, "release_url": "https://pypi.org/project/pystemd/0.7.0/", "requires_dist": null, "requires_python": "", "summary": "A systemd binding for python", "version": "0.7.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pystemd</h1>\n<p><a href=\"http://travis-ci.org/facebookincubator/pystemd\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4b92a8b905137374d15bf93a94e02f7152e85d4c/68747470733a2f2f7472617669732d63692e6f72672f66616365626f6f6b696e63756261746f722f70797374656d642e737667\"></a> <a href=\"https://github.com/ambv/black\" rel=\"nofollow\"><img alt=\"Code style: black\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbfdc7754183ecf079bc71ddeabaf88f6cbc5c00/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667\"></a></p>\n<p>This library allows you to talk to systemd over dbus from python, without\nactually thinking that you are talking to systemd over dbus. This allows you to\nprogrammatically start/stop/restart/kill and verify services status from\nsystemd point of view, avoiding executing <code>subprocess.Popen(['systemctl', ...</code>\nand then parsing the output to know the result.</p>\n<h2>Show don't tell</h2>\n<p>In software as in screenwriting, its better to show how things work instead of\ntell. So this is how you would use the library from a interactive shell.</p>\n<pre><code>In [1]: from pystemd.systemd1 import Unit\nIn [2]: unit = Unit(b'postfix.service')\nIn [3]: unit.load()\n</code></pre>\n<p>Note: you need to call <code>unit.load()</code> because by default <code>Unit</code> will not load the\nunit information as that would require do some IO. You can auto load the unit by\n<code>Unit(b'postfix.service', _autoload=True)</code></p>\n<p>Once the unit is loaded, you can interact with it, you can do by accessing its\nsystemd's interfaces:</p>\n<pre><code>In [4]: unit.Unit.ActiveState\nOut[4]: b'active'\n\nIn [5]: unit.Unit.StopWhenUnneeded\nOut[5]: False\n\nIn [6]: unit.Unit.Stop(b'replace') # require privilege account\nOut[6]: b'/org/freedesktop/systemd1/job/6601531'\n\nIn [7]: unit.Unit.ActiveState\nOut[7]: b'inactive'\n\nIn [8]: unit.Unit.SubState\nOut[8]: b'running'\n\nIn [9]: unit.Unit.Start(b'replace') # require privilege account\nOut[9]: b'/org/freedesktop/systemd1/job/6601532'\n\nIn [10]: unit.Unit.ActiveState\nOut[10]: b'active'\n\nIn [11]: unit.Service.GetProcesses()\nOut[11]:\n[(b'/system.slice/postfix.service',\n    1754222,\n    b'/usr/libexec/postfix/master -w'),\n (b'/system.slice/postfix.service', 1754224, b'pickup -l -t fifo -u'),\n (b'/system.slice/postfix.service', 1754225, b'qmgr -l -t fifo -u')]\n\nIn [12]: unit.Service.MainPID\nOut[12]: 1754222\n</code></pre>\n<p>The <code>systemd1.Unit</code> class provides shortcuts for the interfaces in the systemd\nnamespace, as you se above, we have  Service (org.freedesktop.systemd1.Service)\nand Unit (org.freedesktop.systemd1.Unit). Others can be found in\n<code>unit._interfaces</code> as:</p>\n<pre><code>In [12]: unit._interfaces\nOut[12]:\n{'org.freedesktop.DBus.Introspectable': &lt;org.freedesktop.DBus.Introspectable of /org/freedesktop/systemd1/unit/postfix_2eservice&gt;,\n 'org.freedesktop.DBus.Peer': &lt;org.freedesktop.DBus.Peer of /org/freedesktop/systemd1/unit/postfix_2eservice&gt;,\n 'org.freedesktop.DBus.Properties': &lt;org.freedesktop.DBus.Properties of /org/freedesktop/systemd1/unit/postfix_2eservice&gt;,\n 'org.freedesktop.systemd1.Service': &lt;org.freedesktop.systemd1.Service of /org/freedesktop/systemd1/unit/postfix_2eservice&gt;,\n 'org.freedesktop.systemd1.Unit': &lt;org.freedesktop.systemd1.Unit of /org/freedesktop/systemd1/unit/postfix_2eservice&gt;}\n\n In [13]: unit.Service\n Out[13]: &lt;org.freedesktop.systemd1.Service of /org/freedesktop/systemd1/unit/postfix_2eservice&gt;\n</code></pre>\n<p>Each interface has methods and properties, that can access directly as\n<code>unit.Service.MainPID</code>, the list of properties and methods is in <code>.properties</code>\nand <code>.methods</code> of each interface.</p>\n<p>Alongside the <code>systemd1.Unit</code>, we also have a <code>systemd1.Manager</code>, that allows\nyou to interact with systemd manager.</p>\n<pre><code>In [14]: from pystemd.systemd1 import Manager\n\nIn [15]: manager = Manager()\n\nIn [16]: manager.load()\n\nIn [17]: manager.Manager.ListUnitFiles()\nOut[17]:\n...\n(b'/usr/lib/systemd/system/rhel-domainname.service', b'disabled'),\n (b'/usr/lib/systemd/system/fstrim.timer', b'disabled'),\n (b'/usr/lib/systemd/system/getty.target', b'static'),\n (b'/usr/lib/systemd/system/systemd-user-sessions.service', b'static'),\n...\n\nIn [18]: manager.Manager.Architecture\nOut[18]: b'x86-64'\n\nIn [19]: manager.Manager.Virtualization\nOut[19]: b'kvm'\n\n</code></pre>\n<h2>Extras:</h2>\n<p>We also include <code>pystemd.run</code>, the spiritual port of systemd-run\nto python. <a href=\"_docs/pystemd.run.md\" rel=\"nofollow\">example of usage</a>:</p>\n<pre><span class=\"c1\"># run this as root</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">pystemd.run</span><span class=\"o\">,</span> <span class=\"nn\">sys</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pystemd</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span>\n    <span class=\"p\">[</span><span class=\"sa\">b</span><span class=\"s1\">'/usr/bin/psql'</span><span class=\"p\">,</span> <span class=\"sa\">b</span><span class=\"s1\">'postgres'</span><span class=\"p\">],</span>\n    <span class=\"n\">machine</span><span class=\"o\">=</span><span class=\"sa\">b</span><span class=\"s1\">'db1'</span><span class=\"p\">,</span>\n    <span class=\"n\">user</span><span class=\"o\">=</span><span class=\"sa\">b</span><span class=\"s1\">'postgres'</span><span class=\"p\">,</span>\n    <span class=\"n\">wait</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"n\">pty</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"n\">stdin</span><span class=\"o\">=</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdin</span><span class=\"p\">,</span> <span class=\"n\">stdout</span><span class=\"o\">=</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"p\">,</span>\n    <span class=\"n\">env</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"sa\">b</span><span class=\"s1\">'PGTZ'</span><span class=\"p\">:</span> <span class=\"sa\">b</span><span class=\"s1\">'UTC'</span><span class=\"p\">}</span>\n<span class=\"p\">)</span>\n</pre>\n<p>will open a postgres interactive prompt in a local nspawn-machine.</p>\n<p>You also get an interface to <code>sd_notify</code> in the form of <code>pystemd.daemon.notify</code> <a href=\"_docs/daemon.md\" rel=\"nofollow\">docs</a>.</p>\n<pre><span class=\"c1\"># run this as root</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">pystemd.daemon</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pystemd</span><span class=\"o\">.</span><span class=\"n\">daemon</span><span class=\"o\">.</span><span class=\"n\">notify</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">ready</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">status</span><span class=\"o\">=</span><span class=\"s1\">'Gimme! Gimme! Gimme!'</span><span class=\"p\">)</span>\n</pre>\n<p>And access to listen file descriptors for socket activation scripts.</p>\n<pre><span class=\"c1\"># run this as root</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">pystemd.daemon</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pystemd</span><span class=\"o\">.</span><span class=\"n\">daemon</span><span class=\"o\">.</span><span class=\"n\">LISTEN_FDS_START</span>\n<span class=\"mi\">3</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pystemd</span><span class=\"o\">.</span><span class=\"n\">daemon</span><span class=\"o\">.</span><span class=\"n\">listen_fds</span><span class=\"p\">()</span>\n<span class=\"mi\">1</span> <span class=\"c1\"># you normally only open 1 socket</span>\n</pre>\n<p>And access if watchdog is enabled and ping it.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pystemd.daemon</span>\n\n<span class=\"n\">watchdog_usec</span> <span class=\"o\">=</span> <span class=\"n\">pystemd</span><span class=\"o\">.</span><span class=\"n\">daemon</span><span class=\"o\">.</span><span class=\"n\">watchdog_enabled</span><span class=\"p\">()</span>\n<span class=\"n\">watchdog_sec</span> <span class=\"o\">=</span> <span class=\"n\">watchdog_usec</span><span class=\"o\">/</span><span class=\"mi\">10</span><span class=\"o\">**</span><span class=\"mi\">6</span>\n\n<span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">watchdog_usec</span><span class=\"p\">:</span>\n  <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'watchdog was not enabled!'</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">):</span>\n    <span class=\"n\">pystemd</span><span class=\"o\">.</span><span class=\"n\">daemon</span><span class=\"o\">.</span><span class=\"n\">notify</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">watchdog</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">status</span><span class=\"o\">=</span><span class=\"sa\">f</span><span class=\"s1\">'count </span><span class=\"si\">{</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"n\">watchdog_sec</span><span class=\"o\">*</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'sleeping for 30 seconds'</span><span class=\"p\">)</span>\n<span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"n\">watchdog_sec</span><span class=\"o\">*</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'you will never reach me in a watchdog env'</span><span class=\"p\">)</span>\n</pre>\n<p>We also provide basic journal interaction with <code>pystemd.journal</code> <a href=\"_docs/journal.md\" rel=\"nofollow\">docs</a></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pystemd.journal</span>\n\n<span class=\"n\">pystemd</span><span class=\"o\">.</span><span class=\"n\">journal</span><span class=\"o\">.</span><span class=\"n\">sendv</span><span class=\"p\">(</span>\n  <span class=\"sa\">f</span><span class=\"s2\">\"PRIORITY=</span><span class=\"si\">{</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">INFO</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">,</span>\n  <span class=\"n\">MESSAGE</span><span class=\"o\">=</span><span class=\"s2\">\"everything is awesome\"</span><span class=\"p\">,</span>\n  <span class=\"n\">SYSLOG_IDENTIFIER</span><span class=\"o\">=</span><span class=\"s2\">\"tegan\"</span>\n<span class=\"p\">)</span>\n</pre>\n<p>will result in the message (shorten for sake of example).</p>\n<pre><span class=\"p\">{</span>\n\n  <span class=\"nt\">\"SYSLOG_IDENTIFIER\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"tegan\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"PRIORITY\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"20\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"MESSAGE\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"everything is awesome\"</span><span class=\"p\">,</span>\n  <span class=\"err\">...</span>\n<span class=\"p\">}</span>\n</pre>\n<h2>Install</h2>\n<p>So you like what you see, the simplest way to install is by:</p>\n<pre>$ pip install pystemd\n</pre>\n<p>you'll need to have:</p>\n<ul>\n<li>Python headers: Just use your distro's package (e.g. python-dev).</li>\n<li>systemd headers: Chances are you already have this. Normally, it is called\n<code>libsystemd-dev</code> or <code>systemd-devel</code>. You need to have at least v237.\nPlease note that CentOS 7 ships with version 219. To work around this, please read\n<a href=\"_docs/centos7.md\" rel=\"nofollow\">this</a>.</li>\n<li>systemd library: check if <code>pkg-config --cflags --libs libsystemd</code> returns\n<code>-lsystemd</code> if not you can install normally install <code>systemd-libs</code> or\n<code>libsystemd</code> depending on your distribution, version needs to be at least\nv237.</li>\n<li>gcc: or any compiler that <code>setup.py</code> will accept.</li>\n</ul>\n<p>if you want to install from source then after you clone this repo you need to</p>\n<pre>$ pip install -r requirements.txt <span class=\"c1\"># get six</span>\n$ python3 setup.py install <span class=\"c1\"># only python3 supported</span>\n</pre>\n<p>but in addition to previous requirements you'll need:</p>\n<ul>\n<li>setuptools: Just use your distro's package (e.g. python-setuptools).</li>\n<li>Cython: at least version 0.21a1, just pip install it or use the official\ninstallation guide from cython homepage to get latest\n<a href=\"http://cython.readthedocs.io/en/latest/src/quickstart/install.html\" rel=\"nofollow\">http://cython.readthedocs.io/en/latest/src/quickstart/install.html</a>.</li>\n</ul>\n<h2>Learning more</h2>\n<p>This project has been covered in a number of conference talks:</p>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=lBQgMGPxqNo\" rel=\"nofollow\">Using systemd in high level languages</a> at <a href=\"https://all-systems-go.io\" rel=\"nofollow\">All Systems Go! 2018</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=ZUX9Fx8Rwzg\" rel=\"nofollow\">systemd: why you should care as a Python developer</a> at <a href=\"https://us.pycon.org/2018/\" rel=\"nofollow\">PyCon 2018</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=o-OqslA5dkw\" rel=\"nofollow\">Better security for Python with systemd</a> at <a href=\"https://www.meetup.com/Pyninsula-Python-Peninsula-Meetup/events/244939632/\" rel=\"nofollow\">Pyninsula #10</a></li>\n</ul>\n<p>A <a href=\"https://github.com/aleivag/pycon2018\" rel=\"nofollow\">Vagrant-based demo</a> was also developed\nfor PyCon 2018.</p>\n<h2>License</h2>\n<p>pystemd is licensed under LGPL 2.1 or later.</p>\n\n          </div>"}, "last_serial": 6260321, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "9bfd01f4fb4831cff95762df64bbb56e", "sha256": "6961fce3bdb4b6bcddcb12b42d81579f5ca2e3f3ffb758685c36577b81bf9f5b"}, "downloads": -1, "filename": "pystemd-0.2.0.tar.gz", "has_sig": false, "md5_digest": "9bfd01f4fb4831cff95762df64bbb56e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 138568, "upload_time": "2018-01-12T01:38:59", "upload_time_iso_8601": "2018-01-12T01:38:59.779131Z", "url": "https://files.pythonhosted.org/packages/44/cd/7a204ed3877e97358ab50942c113d1b4839b088717ccac6a962d97c10ed1/pystemd-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "f0db419fd8d0eda686c52516d0e80368", "sha256": "684664c968eb87b2533f7a7599f3d5ae7ed4f384cbaff24e4bf8eef853432798"}, "downloads": -1, "filename": "pystemd-0.3.0.tar.gz", "has_sig": false, "md5_digest": "f0db419fd8d0eda686c52516d0e80368", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 135524, "upload_time": "2018-02-02T21:41:22", "upload_time_iso_8601": "2018-02-02T21:41:22.238963Z", "url": "https://files.pythonhosted.org/packages/32/d2/d7b2e4f6b6d6051d7331d094034d0451c50bd7d1ffef90b5d52cd9517c44/pystemd-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "3f1547b3c76f8e378db09f4c2bd6e30a", "sha256": "7639e3fcdf6a8f83ef5f10bcb3613880c28e4e451323b221697eafd6b74ec5c2"}, "downloads": -1, "filename": "pystemd-0.4.0.tar.gz", "has_sig": false, "md5_digest": "3f1547b3c76f8e378db09f4c2bd6e30a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 191380, "upload_time": "2018-03-29T17:53:16", "upload_time_iso_8601": "2018-03-29T17:53:16.127572Z", "url": "https://files.pythonhosted.org/packages/d5/60/3ce323314a2a239a38d782801315a708c64516159070cdb528deb458243a/pystemd-0.4.0.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "272f9aec7f1a3fc47c2a04191b0e0b22", "sha256": "251a14d26235df1408cacdf0db24c38725b405795b01b635e3bb88dd61000000"}, "downloads": -1, "filename": "pystemd-0.5.0.tar.gz", "has_sig": false, "md5_digest": "272f9aec7f1a3fc47c2a04191b0e0b22", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 193009, "upload_time": "2018-06-08T23:21:15", "upload_time_iso_8601": "2018-06-08T23:21:15.673741Z", "url": "https://files.pythonhosted.org/packages/1a/3c/71f037abb980a9ec4bfea344bb4aa161109f8121a67a5940f663dd723791/pystemd-0.5.0.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "c5472be419f53f53f5da089ca8c981c0", "sha256": "b1fc072c87e3766711f64caf86fd633dca393e20c8a0a37a5058dd70a21d8a14"}, "downloads": -1, "filename": "pystemd-0.6.0.tar.gz", "has_sig": false, "md5_digest": "c5472be419f53f53f5da089ca8c981c0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 213572, "upload_time": "2019-03-15T02:37:06", "upload_time_iso_8601": "2019-03-15T02:37:06.192162Z", "url": "https://files.pythonhosted.org/packages/aa/b6/b0b87515c933801122f2ad01366692a492c751e3525a4af5e1ecbe59aa17/pystemd-0.6.0.tar.gz", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "f493c3e54457e49fe3c160274b863bac", "sha256": "f5dc49d02995ab96335d9e94f9fe036673d89b8cc9907e7a0ac83c06665f2430"}, "downloads": -1, "filename": "pystemd-0.7.0.tar.gz", "has_sig": false, "md5_digest": "f493c3e54457e49fe3c160274b863bac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 265071, "upload_time": "2019-12-08T02:58:02", "upload_time_iso_8601": "2019-12-08T02:58:02.722878Z", "url": "https://files.pythonhosted.org/packages/c3/1a/6ec2ac628eabdce55f317f7ba560a8f14daebf86187cd6075c50054d528b/pystemd-0.7.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f493c3e54457e49fe3c160274b863bac", "sha256": "f5dc49d02995ab96335d9e94f9fe036673d89b8cc9907e7a0ac83c06665f2430"}, "downloads": -1, "filename": "pystemd-0.7.0.tar.gz", "has_sig": false, "md5_digest": "f493c3e54457e49fe3c160274b863bac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 265071, "upload_time": "2019-12-08T02:58:02", "upload_time_iso_8601": "2019-12-08T02:58:02.722878Z", "url": "https://files.pythonhosted.org/packages/c3/1a/6ec2ac628eabdce55f317f7ba560a8f14daebf86187cd6075c50054d528b/pystemd-0.7.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:59 2020"}