{"info": {"author": "Jeremy McMillan", "author_email": "jeremy mcmillan at gmail com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Intended Audience :: Information Technology", "Intended Audience :: System Administrators"], "description": "Provides parsing, arithmetic and comparison oprations, and formatting of human readable data size strings for logic that depends on comparisons of values given in common units of data allocation. There are other solutions, but they are either not complete, or too heavy or awkward for casual use. A string like \"14GiB\" is really an integer representing a data allocation.\n\nThe basic use case is to be able to parse a string containing a common expression of data size with a numeric value and a unit of data. The resulting object is actually an integer count of bytes, so that it can be used in any arithmetic expression. That integer can be expressed, using Python 3 string formatting, as any other unit of data. This allows, for example, configuration files that support a natural way of expressing and operating on quantities of data.\n\nDataSize supports metric and IEC units in both bits and bytes and nonstandard abbreviated IEC units (for legacy Java -Xmx). There is support for variable word-lengths, but because I thought it would get confusing, converting between two different word lengths is not supported. The word length constructor keyword argument will allow converting counts of weird (actually non-byte) word or symbol bit lengths to bit rates, which can then be explicitly converted to standard 8-bit bytes.\n\nThe really sweet feature that everyone should love is the Python string.format() support!::\n\n    Help on method __format__ in module datasize.DataSize:\n\n    __format__(self, code) unbound datasize.__datasize__.DataSize method\n        formats as a decimal number, but recognizes data units as type format codes.\n        Precision is ignored for integer multiples of the unit specified in the format code.\n        format codes:\n        a    autoformat will choose a unit defaulting to the largest\n              size with a quantity >= 1 (default)\n        A    abbreviated number of bytes (implied IEC units, and implied 'B' bytes suffix omitted)\n        B    bytes      (1)\n        kiB  kibibytes  (1024)\n        kB   kilobytes  (1000)\n        ...\n        GiB  Gibibytes  (1024**3)\n        GB   Gigabytes  (10**9)\n        ...\n        YiB  Yobibytes  (1024**8)\n        YB   Yottabytes (10**24)\n\n>>> from datasize import DataSize\n>>> 'My new {:GB} SSD really only stores {:.2GiB} of data.'.format(DataSize('750GB'),DataSize(DataSize('750GB') * 0.8))\n'My new 750GB SSD really only stores 558.79GiB of data.'", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/aphor/datasize/tarball/0.3", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/aphor/datasize", "keywords": "data,units,parser,formatter", "license": "LGPL3", "maintainer": "", "maintainer_email": "", "name": "datasize", "package_url": "https://pypi.org/project/datasize/", "platform": "pure-python, universal", "project_url": "https://pypi.org/project/datasize/", "project_urls": {"Download": "https://github.com/aphor/datasize/tarball/0.3", "Homepage": "https://github.com/aphor/datasize"}, "release_url": "https://pypi.org/project/datasize/0.3/", "requires_dist": null, "requires_python": null, "summary": "Python integer subclass to handle arithmetic and formatting of integers with data size units", "version": "0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Provides parsing, arithmetic and comparison oprations, and formatting of human readable data size strings for logic that depends on comparisons of values given in common units of data allocation. There are other solutions, but they are either not complete, or too heavy or awkward for casual use. A string like \u201c14GiB\u201d is really an integer representing a data allocation.</p>\n<p>The basic use case is to be able to parse a string containing a common expression of data size with a numeric value and a unit of data. The resulting object is actually an integer count of bytes, so that it can be used in any arithmetic expression. That integer can be expressed, using Python 3 string formatting, as any other unit of data. This allows, for example, configuration files that support a natural way of expressing and operating on quantities of data.</p>\n<p>DataSize supports metric and IEC units in both bits and bytes and nonstandard abbreviated IEC units (for legacy Java -Xmx). There is support for variable word-lengths, but because I thought it would get confusing, converting between two different word lengths is not supported. The word length constructor keyword argument will allow converting counts of weird (actually non-byte) word or symbol bit lengths to bit rates, which can then be explicitly converted to standard 8-bit bytes.</p>\n<p>The really sweet feature that everyone should love is the Python string.format() support!:</p>\n<pre>Help on method __format__ in module datasize.DataSize:\n\n__format__(self, code) unbound datasize.__datasize__.DataSize method\n    formats as a decimal number, but recognizes data units as type format codes.\n    Precision is ignored for integer multiples of the unit specified in the format code.\n    format codes:\n    a    autoformat will choose a unit defaulting to the largest\n          size with a quantity &gt;= 1 (default)\n    A    abbreviated number of bytes (implied IEC units, and implied 'B' bytes suffix omitted)\n    B    bytes      (1)\n    kiB  kibibytes  (1024)\n    kB   kilobytes  (1000)\n    ...\n    GiB  Gibibytes  (1024**3)\n    GB   Gigabytes  (10**9)\n    ...\n    YiB  Yobibytes  (1024**8)\n    YB   Yottabytes (10**24)\n</pre>\n<pre>&gt;&gt;&gt; from datasize import DataSize\n&gt;&gt;&gt; 'My new {:GB} SSD really only stores {:.2GiB} of data.'.format(DataSize('750GB'),DataSize(DataSize('750GB') * 0.8))\n'My new 750GB SSD really only stores 558.79GiB of data.'\n</pre>\n\n          </div>"}, "last_serial": 2488891, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "79ab33ebdb32ecaf1faa98b054ef653b", "sha256": "34f6dbc95080b07c5311950cb319fd2083a4c4b931904facecb52eeb781df516"}, "downloads": -1, "filename": "datasize-0.1.tar.gz", "has_sig": false, "md5_digest": "79ab33ebdb32ecaf1faa98b054ef653b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6356, "upload_time": "2015-06-18T03:01:09", "upload_time_iso_8601": "2015-06-18T03:01:09.268769Z", "url": "https://files.pythonhosted.org/packages/58/62/2cbd3097d1a84fb8e22377e22eb9a3f0e436f70d6603c2ec49d209a03031/datasize-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "built for Darwin-15.4.0", "digests": {"md5": "e37b20f9d2f0ff663ef507813a93fc16", "sha256": "d2a9831ee7b8ee6ca431af9ad44f3db29737d9cd5983442051215181dd9c292e"}, "downloads": -1, "filename": "datasize-0.2.macosx-10.11-x86_64.tar.gz", "has_sig": false, "md5_digest": "e37b20f9d2f0ff663ef507813a93fc16", "packagetype": "bdist_dumb", "python_version": "any", "requires_python": null, "size": 14859, "upload_time": "2016-05-06T03:06:25", "upload_time_iso_8601": "2016-05-06T03:06:25.266151Z", "url": "https://files.pythonhosted.org/packages/fd/05/bcfbba660b2ee7bd79cebc290ca178433a15981c53f5fab8e92ba7109ec8/datasize-0.2.macosx-10.11-x86_64.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "ee4cfca4c9c139a011533456353f22c2", "sha256": "af63fcebaa87f3b1388dd23d9d587c97f940be627872bdcdd27cc8582eb42d50"}, "downloads": -1, "filename": "datasize-0.2.tar.gz", "has_sig": false, "md5_digest": "ee4cfca4c9c139a011533456353f22c2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6578, "upload_time": "2016-05-06T03:06:00", "upload_time_iso_8601": "2016-05-06T03:06:00.428769Z", "url": "https://files.pythonhosted.org/packages/f1/93/bcd5117a0d60b8095bfe01b266e200767420d85c6b31d9dbfd3f1ad5bd59/datasize-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "b6c5fd3410a6f2bb902bf04532d0a96c", "sha256": "b48ae4ed53331795c7e4c7461f011299b4600e03aec64e2fc2245ad1938683d6"}, "downloads": -1, "filename": "datasize-0.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b6c5fd3410a6f2bb902bf04532d0a96c", "packagetype": "bdist_wheel", "python_version": "3.4", "requires_python": null, "size": 8338, "upload_time": "2016-05-06T03:38:49", "upload_time_iso_8601": "2016-05-06T03:38:49.279962Z", "url": "https://files.pythonhosted.org/packages/28/ee/32c83586a674c5f733f26607cfd75c9c92a5b962fccde51f1518dd7ebad9/datasize-0.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "83056740ae448fdf2a690a11d747bd23", "sha256": "ae79d9f31022399410ff7048dd76c9e7969632ffbd676075f0e7bb81147bc7f9"}, "downloads": -1, "filename": "datasize-0.3.tar.gz", "has_sig": false, "md5_digest": "83056740ae448fdf2a690a11d747bd23", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6772, "upload_time": "2016-05-06T03:38:43", "upload_time_iso_8601": "2016-05-06T03:38:43.321440Z", "url": "https://files.pythonhosted.org/packages/4a/c6/5051df3e1e34f1e902c5298195dd561b17903ee02137433473047ae69b52/datasize-0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b6c5fd3410a6f2bb902bf04532d0a96c", "sha256": "b48ae4ed53331795c7e4c7461f011299b4600e03aec64e2fc2245ad1938683d6"}, "downloads": -1, "filename": "datasize-0.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b6c5fd3410a6f2bb902bf04532d0a96c", "packagetype": "bdist_wheel", "python_version": "3.4", "requires_python": null, "size": 8338, "upload_time": "2016-05-06T03:38:49", "upload_time_iso_8601": "2016-05-06T03:38:49.279962Z", "url": "https://files.pythonhosted.org/packages/28/ee/32c83586a674c5f733f26607cfd75c9c92a5b962fccde51f1518dd7ebad9/datasize-0.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "83056740ae448fdf2a690a11d747bd23", "sha256": "ae79d9f31022399410ff7048dd76c9e7969632ffbd676075f0e7bb81147bc7f9"}, "downloads": -1, "filename": "datasize-0.3.tar.gz", "has_sig": false, "md5_digest": "83056740ae448fdf2a690a11d747bd23", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6772, "upload_time": "2016-05-06T03:38:43", "upload_time_iso_8601": "2016-05-06T03:38:43.321440Z", "url": "https://files.pythonhosted.org/packages/4a/c6/5051df3e1e34f1e902c5298195dd561b17903ee02137433473047ae69b52/datasize-0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:40:10 2020"}