{"info": {"author": "Rainer Schuster", "author_email": "rainerschuster79@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Plugins", "Environment :: Web Environment", "Framework :: Flask", "Intended Audience :: Developers", "Natural Language :: English", "Operating System :: MacOS :: MacOS X", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 2.7"], "description": "# Bootstrap\n\nIn order to start developement it is a good idea to first create a virtual environment.\n\n1. Your nix like system normally comes pre installed with easy\\_install. You may also have pip\n   installed. If not do so: \n\tUbuntu:\n\tsudo apt-get install python-pip\n   or an equivalant way of installing it on your machine.\n2. Running bootstrap.sh will create a virtual environment,\n   install the dependencies and set up your local workspace\n   as package resource, so that changes in your source are instantly\n   reflected. You don't have to install your packge over and over again\n\nAfter the bootstrapper created your virtual environment and installed \nall dependencies you are ready to run/develop the app.\n\n# Configuring\n\nThe app has severall configuration files\n\n* `server_setup.py` for gunicorn\n* the environment variable `SLOTTY_CONFIG_FILE` beeing used as `debug.py` for debug settings\n  and defaults to `slotty.config` in production use\n\n# Running\n\nActivate the virtual environment and run the webserver. You can pass in every option gunicorn can handle\n\tsource .slotty/bin/activate && ./start-server.sh\n\nor run the debug server\n\tsource .slotty/bin/activate && ./start-server.sh\n\nWait some seconds and it will start to generate some fictional random race data.\n\n\n# Goals\n\n1. Have Fun!\n2. Use AngularJS, Bootstrap or some other sophisticated technologi\n3. Use socketIO to be backwards compatible to this old browser stuff\n4. Use some decent Document Store. Maybe couchdb or redis or mongodb or something completely differnt. \n   For now json files or a one file key-value store is sufficient\n5. Create a modular and easily extendible Soltcar Racing Web Management System and create some Community to write plugins\n6. Listen to collaborators!\n7. Manage the collaboration!\n8. Did I mention fun?\n\n\n# Resources\n\n[flask](http://flask.pocoo.org/docs/)\n[setuptools - for plugins](http://pythonhosted.org/setuptools/pkg_resources.html?highlight=load_entry_point#entry-points)\n[markdown](http://daringfireball.net/projects/markdown/syntax)\n[gunicron](http://docs.gunicorn.org/en/latest/index.html)\n[gevent](http://www.gevent.org/) [gevent-socketio](https://gevent-socketio.readthedocs.org/en/latest/)\n[gevent-websocket](https://pypi.python.org/pypi/gevent-websocket)\n[pyzmq](http://zeromq.github.io/pyzmq/)\n\n## Investigate\n\n[libwebsocket](http://libwebsockets.org/trac/libwebsockets)\n[flask-classy](http://pythonhosted.org/Flask-Classy/)\n[flask-sqlalchemy](http://pythonhosted.org/Flask-SQLAlchemy/quickstart.html)\n[flask-themes](http://pythonhosted.org/Flask-Themes/)\n[flask-zen](http://pythonhosted.org/Flask-Zen/)\n[flask-babel](http://pythonhosted.org/Flask-Babel/)\n[flask-couchdb](http://pythonhosted.org/Flask-CouchDB/)\n[flask-oauth](http://pythonhosted.org/Flask-OAuth/)\n[flask-openid](http://pythonhosted.org/Flask-OpenID/)\n[flask-debugtoolbar](http://flask-debugtoolbar.readthedocs.org/en/latest/)\n[three.js](http://threejs.org/)\n[shifty](http://jeremyckahn.github.io/shifty/)\n[clara.io](http://clara.io/)\n[shapesmith](http://shapesmith.net)\n[lagoa](http://home.lagoa.com)\n[tridiv](http://tridiv.com)\n[sculpteo](http://www.sculpteo.com/)\n[ipython](http://ipython.org/)\n[ipython intro](http://opentechschool.github.io/python-data-intro/core/notebook.html)\n[labnotebook](https://github.com/cboettig/labnotebook)\n[couchdb notebook manager](https://gist.github.com/zylinqk/4107048)\n[rackspace and openspace notebook manager](https://github.com/rgbkrk/bookstore/blob/master/bookstore/swift.py)\n[remote notebook](http://ipython.org/ipython-doc/rel-1.1.0/interactive/public_server.html)\n[remote notebook 2](http://www.windowsazure.com/en-us/documentation/articles/virtual-machines-python-ipython-notebook/)\n[ipython sql](https://github.com/catherinedevlin/ipython-sql)\n[import notebooks](http://nbviewer.ipython.org/gist/minrk/6011986)", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "UNKNOWN", "keywords": "RMS flask Slotcar slotty", "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "slotty", "package_url": "https://pypi.org/project/slotty/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/slotty/", "project_urls": {"Download": "UNKNOWN", "Homepage": "UNKNOWN"}, "release_url": "https://pypi.org/project/slotty/0.1dev/", "requires_dist": null, "requires_python": null, "summary": "Web Racing Management System", "version": "0.1dev", "yanked": false, "html_description": "<div class=\"project-description\">\n            # Bootstrap<br><br>In order to start developement it is a good idea to first create a virtual environment.<br><br>1. Your nix like system normally comes pre installed with easy\\_install. You may also have pip<br>   installed. If not do so: <br>\tUbuntu:<br>\tsudo apt-get install python-pip<br>   or an equivalant way of installing it on your machine.<br>2. Running bootstrap.sh will create a virtual environment,<br>   install the dependencies and set up your local workspace<br>   as package resource, so that changes in your source are instantly<br>   reflected. You don't have to install your packge over and over again<br><br>After the bootstrapper created your virtual environment and installed <br>all dependencies you are ready to run/develop the app.<br><br># Configuring<br><br>The app has severall configuration files<br><br>* `server_setup.py` for gunicorn<br>* the environment variable `SLOTTY_CONFIG_FILE` beeing used as `debug.py` for debug settings<br>  and defaults to `slotty.config` in production use<br><br># Running<br><br>Activate the virtual environment and run the webserver. You can pass in every option gunicorn can handle<br>\tsource .slotty/bin/activate &amp;&amp; ./start-server.sh<br><br>or run the debug server<br>\tsource .slotty/bin/activate &amp;&amp; ./start-server.sh<br><br>Wait some seconds and it will start to generate some fictional random race data.<br><br><br># Goals<br><br>1. Have Fun!<br>2. Use AngularJS, Bootstrap or some other sophisticated technologi<br>3. Use socketIO to be backwards compatible to this old browser stuff<br>4. Use some decent Document Store. Maybe couchdb or redis or mongodb or something completely differnt. <br>   For now json files or a one file key-value store is sufficient<br>5. Create a modular and easily extendible Soltcar Racing Web Management System and create some Community to write plugins<br>6. Listen to collaborators!<br>7. Manage the collaboration!<br>8. Did I mention fun?<br><br><br># Resources<br><br>[flask](http://flask.pocoo.org/docs/)<br>[setuptools - for plugins](http://pythonhosted.org/setuptools/pkg_resources.html?highlight=load_entry_point#entry-points)<br>[markdown](http://daringfireball.net/projects/markdown/syntax)<br>[gunicron](http://docs.gunicorn.org/en/latest/index.html)<br>[gevent](http://www.gevent.org/) [gevent-socketio](https://gevent-socketio.readthedocs.org/en/latest/)<br>[gevent-websocket](https://pypi.python.org/pypi/gevent-websocket)<br>[pyzmq](http://zeromq.github.io/pyzmq/)<br><br>## Investigate<br><br>[libwebsocket](http://libwebsockets.org/trac/libwebsockets)<br>[flask-classy](http://pythonhosted.org/Flask-Classy/)<br>[flask-sqlalchemy](http://pythonhosted.org/Flask-SQLAlchemy/quickstart.html)<br>[flask-themes](http://pythonhosted.org/Flask-Themes/)<br>[flask-zen](http://pythonhosted.org/Flask-Zen/)<br>[flask-babel](http://pythonhosted.org/Flask-Babel/)<br>[flask-couchdb](http://pythonhosted.org/Flask-CouchDB/)<br>[flask-oauth](http://pythonhosted.org/Flask-OAuth/)<br>[flask-openid](http://pythonhosted.org/Flask-OpenID/)<br>[flask-debugtoolbar](http://flask-debugtoolbar.readthedocs.org/en/latest/)<br>[three.js](http://threejs.org/)<br>[shifty](http://jeremyckahn.github.io/shifty/)<br>[clara.io](http://clara.io/)<br>[shapesmith](http://shapesmith.net)<br>[lagoa](http://home.lagoa.com)<br>[tridiv](http://tridiv.com)<br>[sculpteo](http://www.sculpteo.com/)<br>[ipython](http://ipython.org/)<br>[ipython intro](http://opentechschool.github.io/python-data-intro/core/notebook.html)<br>[labnotebook](https://github.com/cboettig/labnotebook)<br>[couchdb notebook manager](https://gist.github.com/zylinqk/4107048)<br>[rackspace and openspace notebook manager](https://github.com/rgbkrk/bookstore/blob/master/bookstore/swift.py)<br>[remote notebook](http://ipython.org/ipython-doc/rel-1.1.0/interactive/public_server.html)<br>[remote notebook 2](http://www.windowsazure.com/en-us/documentation/articles/virtual-machines-python-ipython-notebook/)<br>[ipython sql](https://github.com/catherinedevlin/ipython-sql)<br>[import notebooks](http://nbviewer.ipython.org/gist/minrk/6011986)\n          </div>"}, "last_serial": 1101505, "releases": {"0.1dev": [{"comment_text": "", "digests": {"md5": "9f699f91802cb558bdd8a6020e46bc95", "sha256": "76154b1cf93a841c5fb47805524a1b1305f0cd8d8979988013323e3d97763770"}, "downloads": -1, "filename": "slotty-0.1dev.tar.gz", "has_sig": false, "md5_digest": "9f699f91802cb558bdd8a6020e46bc95", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 102054, "upload_time": "2014-05-22T21:07:56", "upload_time_iso_8601": "2014-05-22T21:07:56.684228Z", "url": "https://files.pythonhosted.org/packages/98/c6/e72fd62599583d74d65706c853a4899b804c9f61a97d2f8d3435e7cac892/slotty-0.1dev.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9f699f91802cb558bdd8a6020e46bc95", "sha256": "76154b1cf93a841c5fb47805524a1b1305f0cd8d8979988013323e3d97763770"}, "downloads": -1, "filename": "slotty-0.1dev.tar.gz", "has_sig": false, "md5_digest": "9f699f91802cb558bdd8a6020e46bc95", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 102054, "upload_time": "2014-05-22T21:07:56", "upload_time_iso_8601": "2014-05-22T21:07:56.684228Z", "url": "https://files.pythonhosted.org/packages/98/c6/e72fd62599583d74d65706c853a4899b804c9f61a97d2f8d3435e7cac892/slotty-0.1dev.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:08:15 2020"}