{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3"], "description": "[![Test status](https://github.com/nlessmann/rsgt/workflows/Tests/badge.svg)](https://github.com/nlessmann/rsgt/actions)\n[![Code coverage](https://codecov.io/gh/nlessmann/rsgt/branch/master/graph/badge.svg)](https://codecov.io/gh/nlessmann/rsgt)\n[![Documentation status](https://readthedocs.org/projects/rsgt/badge/?version=latest)](https://rsgt.readthedocs.io/en/latest/?badge=latest)\n[![pypi](https://img.shields.io/pypi/v/rsgt)](https://pypi.org/project/rsgt/)\n\n# Random Smooth Grayvalue Transformations\n\nConvolutional neural networks trained for a detection or segmentation task in a specific type of medical gray value images, such as CT or MR images, typically\nfail in other medical gray value images, even if the target structure *looks* similar in both types of images. Random smooth gray value transformations are a\ndata augmentation technique aimed at forcing the network to become gray value invariant. During training, the gray value of the training images or patches are\nrandomly changed, but using a smooth and continous transfer function so that shape and texture information is largely retained.\n\nAPI documentation: http://rsgt.readthedocs.io/\n\n## Installation\n\nTo use data augmentation with random smooth gray value transformations in your own project, simply install the `rsgt` package:\n\n```\npip install rsgt\n```\n\n* Requires Python 2.7+ or 3.5+\n* Numpy is the only other dependency\n\n## Data augmentation\n\nThe expected input is a numpy array with integer values, which is usually the case for medical gray value images, such as CT and MR scans.\n\n```python\nfrom rsgt.augmentation import random_smooth_grayvalue_transform\n\n# Apply gray value transformation to a numpy array\nnew_image = random_smooth_grayvalue_transform(image, dtype='float32')\n```\n\nThe returned numpy array will have a floating point dataype and values in the range [0,1].\n\n### Mini-batches\n\nWhile the function supports input data with any number of dimensions, it does currently not support mini-batches. A mini-batch of 3D images can be treated as a\n4D input array, but all images in the mini-batch will then be subject to the same transformation. This means that a single random look up table will be computed\nand applied to all images in the mini-batch. There is currently no vectorized implementation of the transformation function, so a for loop is at this point the\nonly way to transform images in a mini-batch with different transformation functions:\n\n```python\nfor i in range(minibatch.shape[0]):\n    minibatch[i] = random_smooth_grayvalue_transform(minibatch[i], dtype='float32')\n```\n\n### Examples\n\n<img alt=\"Original CT scan\" src=\"/examples/ct0.png\" width=\"216\"><img alt=\"Transformed CT scan #1\" src=\"/examples/ct1.png\" width=\"216\"><img alt=\"Transformed CT scan #2\" src=\"/examples/ct2.png\" width=\"216\"><img alt=\"Transformed CT scan #3\" src=\"/examples/ct3.png\" width=\"216\">\n\nThe left most image is the original CT slice. The other images show the same slice with random smooth gray value transformations applied. The transformation\nfunction is shown below the transformed image.\n\nThis CT scan is from the [kits19 challenge](https://kits-challenge.org) ([CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/) license).\n\n## Normalization functions\n\nBecause the augmentation function returns values in the range [0,1], it is necessary to either also apply the gray value transformation at inference time, or to\nnormalize input images at inference time to [0,1]. The `rsgt` package comes with helper functions for CT and MR scans:\n\n### CT scans\n\nExpected values of the original image are Hounsfield units ranging from -1000 for air (and below for background outside the image area) to around 3000 for very\ndense structures like metal implants.\n\n```python\nfrom rsgt.normalization import normalize_ct_scan\nnormalized_image = normalize_ct_scan(image, dtype='float32')\n```\n\n### MR scans\n\nBecause values of MR scans are not standardized like those of CT scans, the normalization is based on the 5% and the 95% percentiles of the input values. Values\nbelow and above are clipped.\n\n```python\nfrom rsgt.normalization import normalize_mr_scan\nnormalized_image = normalize_mr_scan(image, dtype='float32')\n```\n\nThis normalization can also be used in combination with the augmentation technique:\n\n```python\nfrom rsgt.augmentation import random_smooth_grayvalue_transform\nfrom rsgt.normalization import normalize_mr_scan\n\nN = 4096  # number of bins\nnormalized_integer_image = (normalize_mr_scan(image, dtype='float32') * N).round().astype(int)\nnew_image = random_smooth_grayvalue_transform(normalized_integer_image, min_max_val=(0, N), dtype='float32')\n```\n\n## Citation\n\nPlease cite our short paper describing random smooth gray value transformations for data augmentation when using this technique in your work:\n\n> N. Lessmann and B. van Ginneken, \"Random smooth gray value transformations for cross modality learning with gray value invariant networks\",\n> [arXiv:2003.06158](https://arxiv.org/abs/2003.06158)\n\n## License\n\nThis package is released under the [MIT license](LICENSE), as found in the LICENSE file, with the exception of the images in the `/examples` directory, which\nare released under a Creative Commons license ([CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/)).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/nlessmann/rsgt", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "rsgt", "package_url": "https://pypi.org/project/rsgt/", "platform": "", "project_url": "https://pypi.org/project/rsgt/", "project_urls": {"Homepage": "https://github.com/nlessmann/rsgt"}, "release_url": "https://pypi.org/project/rsgt/1.1.0/", "requires_dist": ["numpy"], "requires_python": ">=2.7", "summary": "Implementaton of random smooth gray value transformations (rsgt) for training gray value independent neural networks", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://github.com/nlessmann/rsgt/actions\" rel=\"nofollow\"><img alt=\"Test status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/77b367db9881da30a2662fe1a1f94fee8cce7a49/68747470733a2f2f6769746875622e636f6d2f6e6c6573736d616e6e2f727367742f776f726b666c6f77732f54657374732f62616467652e737667\"></a>\n<a href=\"https://codecov.io/gh/nlessmann/rsgt\" rel=\"nofollow\"><img alt=\"Code coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/abc713d1a93acb4b3cb3415defd78be3b6b99a8d/68747470733a2f2f636f6465636f762e696f2f67682f6e6c6573736d616e6e2f727367742f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://rsgt.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cafea34fbd8cddba8d147ff1b26830481463e685/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f727367742f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://pypi.org/project/rsgt/\" rel=\"nofollow\"><img alt=\"pypi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7aabdcb0de153181698ceb5f4572872902ac2988/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f72736774\"></a></p>\n<h1>Random Smooth Grayvalue Transformations</h1>\n<p>Convolutional neural networks trained for a detection or segmentation task in a specific type of medical gray value images, such as CT or MR images, typically\nfail in other medical gray value images, even if the target structure <em>looks</em> similar in both types of images. Random smooth gray value transformations are a\ndata augmentation technique aimed at forcing the network to become gray value invariant. During training, the gray value of the training images or patches are\nrandomly changed, but using a smooth and continous transfer function so that shape and texture information is largely retained.</p>\n<p>API documentation: <a href=\"http://rsgt.readthedocs.io/\" rel=\"nofollow\">http://rsgt.readthedocs.io/</a></p>\n<h2>Installation</h2>\n<p>To use data augmentation with random smooth gray value transformations in your own project, simply install the <code>rsgt</code> package:</p>\n<pre><code>pip install rsgt\n</code></pre>\n<ul>\n<li>Requires Python 2.7+ or 3.5+</li>\n<li>Numpy is the only other dependency</li>\n</ul>\n<h2>Data augmentation</h2>\n<p>The expected input is a numpy array with integer values, which is usually the case for medical gray value images, such as CT and MR scans.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">rsgt.augmentation</span> <span class=\"kn\">import</span> <span class=\"n\">random_smooth_grayvalue_transform</span>\n\n<span class=\"c1\"># Apply gray value transformation to a numpy array</span>\n<span class=\"n\">new_image</span> <span class=\"o\">=</span> <span class=\"n\">random_smooth_grayvalue_transform</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"s1\">'float32'</span><span class=\"p\">)</span>\n</pre>\n<p>The returned numpy array will have a floating point dataype and values in the range [0,1].</p>\n<h3>Mini-batches</h3>\n<p>While the function supports input data with any number of dimensions, it does currently not support mini-batches. A mini-batch of 3D images can be treated as a\n4D input array, but all images in the mini-batch will then be subject to the same transformation. This means that a single random look up table will be computed\nand applied to all images in the mini-batch. There is currently no vectorized implementation of the transformation function, so a for loop is at this point the\nonly way to transform images in a mini-batch with different transformation functions:</p>\n<pre><span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">minibatch</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]):</span>\n    <span class=\"n\">minibatch</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">random_smooth_grayvalue_transform</span><span class=\"p\">(</span><span class=\"n\">minibatch</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"s1\">'float32'</span><span class=\"p\">)</span>\n</pre>\n<h3>Examples</h3>\n<p><img alt=\"Original CT scan\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/122ec723aecd2629790ba8a08bb951c4e8de9b49/2f6578616d706c65732f6374302e706e67\" width=\"216\"><img alt=\"Transformed CT scan #1\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9327f56f78d41739a2055c6ab9ed2a6ddd141b0f/2f6578616d706c65732f6374312e706e67\" width=\"216\"><img alt=\"Transformed CT scan #2\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0940e954f2f370cff1621c65997e639758f1ddad/2f6578616d706c65732f6374322e706e67\" width=\"216\"><img alt=\"Transformed CT scan #3\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/927e372b7c0aacd779512a8f382b4a61405c63f4/2f6578616d706c65732f6374332e706e67\" width=\"216\"></p>\n<p>The left most image is the original CT slice. The other images show the same slice with random smooth gray value transformations applied. The transformation\nfunction is shown below the transformed image.</p>\n<p>This CT scan is from the <a href=\"https://kits-challenge.org\" rel=\"nofollow\">kits19 challenge</a> (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"nofollow\">CC BY-NC-SA 4.0</a> license).</p>\n<h2>Normalization functions</h2>\n<p>Because the augmentation function returns values in the range [0,1], it is necessary to either also apply the gray value transformation at inference time, or to\nnormalize input images at inference time to [0,1]. The <code>rsgt</code> package comes with helper functions for CT and MR scans:</p>\n<h3>CT scans</h3>\n<p>Expected values of the original image are Hounsfield units ranging from -1000 for air (and below for background outside the image area) to around 3000 for very\ndense structures like metal implants.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">rsgt.normalization</span> <span class=\"kn\">import</span> <span class=\"n\">normalize_ct_scan</span>\n<span class=\"n\">normalized_image</span> <span class=\"o\">=</span> <span class=\"n\">normalize_ct_scan</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"s1\">'float32'</span><span class=\"p\">)</span>\n</pre>\n<h3>MR scans</h3>\n<p>Because values of MR scans are not standardized like those of CT scans, the normalization is based on the 5% and the 95% percentiles of the input values. Values\nbelow and above are clipped.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">rsgt.normalization</span> <span class=\"kn\">import</span> <span class=\"n\">normalize_mr_scan</span>\n<span class=\"n\">normalized_image</span> <span class=\"o\">=</span> <span class=\"n\">normalize_mr_scan</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"s1\">'float32'</span><span class=\"p\">)</span>\n</pre>\n<p>This normalization can also be used in combination with the augmentation technique:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">rsgt.augmentation</span> <span class=\"kn\">import</span> <span class=\"n\">random_smooth_grayvalue_transform</span>\n<span class=\"kn\">from</span> <span class=\"nn\">rsgt.normalization</span> <span class=\"kn\">import</span> <span class=\"n\">normalize_mr_scan</span>\n\n<span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"mi\">4096</span>  <span class=\"c1\"># number of bins</span>\n<span class=\"n\">normalized_integer_image</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">normalize_mr_scan</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"s1\">'float32'</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">N</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">round</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n<span class=\"n\">new_image</span> <span class=\"o\">=</span> <span class=\"n\">random_smooth_grayvalue_transform</span><span class=\"p\">(</span><span class=\"n\">normalized_integer_image</span><span class=\"p\">,</span> <span class=\"n\">min_max_val</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">),</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"s1\">'float32'</span><span class=\"p\">)</span>\n</pre>\n<h2>Citation</h2>\n<p>Please cite our short paper describing random smooth gray value transformations for data augmentation when using this technique in your work:</p>\n<blockquote>\n<p>N. Lessmann and B. van Ginneken, \"Random smooth gray value transformations for cross modality learning with gray value invariant networks\",\n<a href=\"https://arxiv.org/abs/2003.06158\" rel=\"nofollow\">arXiv:2003.06158</a></p>\n</blockquote>\n<h2>License</h2>\n<p>This package is released under the <a href=\"LICENSE\" rel=\"nofollow\">MIT license</a>, as found in the LICENSE file, with the exception of the images in the <code>/examples</code> directory, which\nare released under a Creative Commons license (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"nofollow\">CC BY-NC-SA 4.0</a>).</p>\n\n          </div>"}, "last_serial": 6819402, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "40602dd25a844a9271af4546d44481e1", "sha256": "53f9e71e51f83aa193902530d7b0e1a4e963687d31d694729007112d0bbbad74"}, "downloads": -1, "filename": "rsgt-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "40602dd25a844a9271af4546d44481e1", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.6", "size": 4345, "upload_time": "2020-01-16T15:27:47", "upload_time_iso_8601": "2020-01-16T15:27:47.380803Z", "url": "https://files.pythonhosted.org/packages/91/07/7b552718a70b87cc53fd01684e23aa98a0ac4e9bd39b8d1234b32bd41bd6/rsgt-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c27fe88bcd1878b94b2742ccc65ca889", "sha256": "72fc2a645b906427aa5f02b5afb70edca77269b9f9ea9bb8f0d9dbff3d7d4753"}, "downloads": -1, "filename": "rsgt-1.0.0.tar.gz", "has_sig": false, "md5_digest": "c27fe88bcd1878b94b2742ccc65ca889", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.6", "size": 3063, "upload_time": "2020-01-16T15:27:48", "upload_time_iso_8601": "2020-01-16T15:27:48.542172Z", "url": "https://files.pythonhosted.org/packages/7a/bf/b674340dec58ecebd19f3d3935e880e480bd1c133195e6adbbd5397dc3f1/rsgt-1.0.0.tar.gz", "yanked": false}], "1.0a1": [{"comment_text": "", "digests": {"md5": "94bea4e80c47d36ae4a2fb6d0d633bea", "sha256": "6348ce38bd91d9182647b7518262e111e3928e54c912e666fa8bb8f5c2f6a812"}, "downloads": -1, "filename": "rsgt-1.0a1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "94bea4e80c47d36ae4a2fb6d0d633bea", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.6", "size": 3736, "upload_time": "2020-01-16T13:32:13", "upload_time_iso_8601": "2020-01-16T13:32:13.645317Z", "url": "https://files.pythonhosted.org/packages/6a/25/341b71c4e921f486b3c6a6f8a0ca91905904da4a5d9f073bbc92d8a0f4c1/rsgt-1.0a1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b9504c1aba399035bf5edd352335c1d0", "sha256": "2a1bb296f2b588a6c2360cd960fe5299a8c7449e9c9cf9db43c453cad8b34085"}, "downloads": -1, "filename": "rsgt-1.0a1.tar.gz", "has_sig": false, "md5_digest": "b9504c1aba399035bf5edd352335c1d0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.6", "size": 2481, "upload_time": "2020-01-16T13:32:14", "upload_time_iso_8601": "2020-01-16T13:32:14.723755Z", "url": "https://files.pythonhosted.org/packages/a4/28/94afa4a7c99b6db3e64f2af126e49a222728d2c8b61b0348ce187fcf7236/rsgt-1.0a1.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "0b26494342f0ce57274dc8e54f57908a", "sha256": "d9b84af458ef15965e1d5d189217bd5bacc755fc1a7550c51c34893e695d3d79"}, "downloads": -1, "filename": "rsgt-1.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0b26494342f0ce57274dc8e54f57908a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7", "size": 6049, "upload_time": "2020-03-16T08:20:06", "upload_time_iso_8601": "2020-03-16T08:20:06.901744Z", "url": "https://files.pythonhosted.org/packages/0d/69/3792793597f9b667c1aa05769d2912320b5a3bf70b8b94068e1550c8de7c/rsgt-1.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bb058e4113c1994ed9cfce0a492b8500", "sha256": "bfe9c460b6ae127b65991a51f12881193e3e25d38fb2a7c329cb8a2036941739"}, "downloads": -1, "filename": "rsgt-1.1.0.tar.gz", "has_sig": false, "md5_digest": "bb058e4113c1994ed9cfce0a492b8500", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 4983, "upload_time": "2020-03-16T08:20:07", "upload_time_iso_8601": "2020-03-16T08:20:07.855834Z", "url": "https://files.pythonhosted.org/packages/01/d1/256b00952e297223eaa725819734d8b738604c2c48aaca5a75eb4df61210/rsgt-1.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0b26494342f0ce57274dc8e54f57908a", "sha256": "d9b84af458ef15965e1d5d189217bd5bacc755fc1a7550c51c34893e695d3d79"}, "downloads": -1, "filename": "rsgt-1.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0b26494342f0ce57274dc8e54f57908a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7", "size": 6049, "upload_time": "2020-03-16T08:20:06", "upload_time_iso_8601": "2020-03-16T08:20:06.901744Z", "url": "https://files.pythonhosted.org/packages/0d/69/3792793597f9b667c1aa05769d2912320b5a3bf70b8b94068e1550c8de7c/rsgt-1.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bb058e4113c1994ed9cfce0a492b8500", "sha256": "bfe9c460b6ae127b65991a51f12881193e3e25d38fb2a7c329cb8a2036941739"}, "downloads": -1, "filename": "rsgt-1.1.0.tar.gz", "has_sig": false, "md5_digest": "bb058e4113c1994ed9cfce0a492b8500", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 4983, "upload_time": "2020-03-16T08:20:07", "upload_time_iso_8601": "2020-03-16T08:20:07.855834Z", "url": "https://files.pythonhosted.org/packages/01/d1/256b00952e297223eaa725819734d8b738604c2c48aaca5a75eb4df61210/rsgt-1.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:00:41 2020"}