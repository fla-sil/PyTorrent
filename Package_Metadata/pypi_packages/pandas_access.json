{"info": {"author": "John Bjorn Nelson", "author_email": "jbn@abreka.com", "bugtrack_url": null, "classifiers": [], "description": "# What is this?\n\nA tiny, `subprocess`-based tool for reading a \n[MS Access](https://products.office.com/en-us/access) \ndatabase (`.rdb`) as a [Pandas](http://pandas.pydata.org/) \n[DataFrame](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.html). \n\n## Installation\n\nTo read the database, this package (thinly!) wraps \n[MDBTools](http://mdbtools.sourceforge.net/). Since I assume you're already \nusing Pandas, it should be your only installation requirement. \n\nIf you are on `OSX`, install it via [Homebrew](http://brew.sh/):\n\n```sh\n$ brew install mdbtools\n```\nThen, do,\n```sh\n$ pip install pandas_access\n```\n\n## Usage\n\n```python\nimport pandas_access as mdb\n\n# Listing the tables.\nfor tbl in mdb.list_tables(\"my.mdb\"):\n    print(tbl)\n    \n# Read a small table.\ndf = pandas_access.read_table(\"my.mdb\", \"MyTable\")\n\n# Read a huge table.\naccumulator = []\nfor chunk in pandas_access.read_table(\"my.mdb\", \"MyTable\", chunksize=10000):\n    accumulator.append(f(chunk))\n```\n\nIf you need more power than this, see: \n[pyodbc](https://github.com/mkleehammer/pyodbc).\n\n## Testing\n\nI needed this code in a quick pinch -- I had no access to MS Access, and I had\na single `.mdb` file. If someone with Access would like to create a tiny \ndatabase for unit-testing purposes, I'd be much obliged.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jbn/pandas_access", "keywords": null, "license": "License :: OSI Approved :: MIT License", "maintainer": null, "maintainer_email": null, "name": "pandas_access", "package_url": "https://pypi.org/project/pandas_access/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pandas_access/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/jbn/pandas_access"}, "release_url": "https://pypi.org/project/pandas_access/0.0.1/", "requires_dist": null, "requires_python": null, "summary": "A tiny, subprocess-based tool for reading a MS Access database(.rdb) as a Pandas DataFrame.", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            # What is this?<br><br>A tiny, `subprocess`-based tool for reading a <br>[MS Access](https://products.office.com/en-us/access) <br>database (`.rdb`) as a [Pandas](http://pandas.pydata.org/) <br>[DataFrame](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.html). <br><br>## Installation<br><br>To read the database, this package (thinly!) wraps <br>[MDBTools](http://mdbtools.sourceforge.net/). Since I assume you're already <br>using Pandas, it should be your only installation requirement. <br><br>If you are on `OSX`, install it via [Homebrew](http://brew.sh/):<br><br>```sh<br>$ brew install mdbtools<br>```<br>Then, do,<br>```sh<br>$ pip install pandas_access<br>```<br><br>## Usage<br><br>```python<br>import pandas_access as mdb<br><br># Listing the tables.<br>for tbl in mdb.list_tables(\"my.mdb\"):<br>    print(tbl)<br>    <br># Read a small table.<br>df = pandas_access.read_table(\"my.mdb\", \"MyTable\")<br><br># Read a huge table.<br>accumulator = []<br>for chunk in pandas_access.read_table(\"my.mdb\", \"MyTable\", chunksize=10000):<br>    accumulator.append(f(chunk))<br>```<br><br>If you need more power than this, see: <br>[pyodbc](https://github.com/mkleehammer/pyodbc).<br><br>## Testing<br><br>I needed this code in a quick pinch -- I had no access to MS Access, and I had<br>a single `.mdb` file. If someone with Access would like to create a tiny <br>database for unit-testing purposes, I'd be much obliged.\n          </div>"}, "last_serial": 2155688, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "82e333b28e9a4bd4af96763c7ccd882b", "sha256": "7849140375a8f32037735051dbec55dec0570e1975a405f90b5b75fd582e21ed"}, "downloads": -1, "filename": "pandas_access-0.0.1.tar.gz", "has_sig": false, "md5_digest": "82e333b28e9a4bd4af96763c7ccd882b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3211, "upload_time": "2016-06-07T21:02:38", "upload_time_iso_8601": "2016-06-07T21:02:38.242462Z", "url": "https://files.pythonhosted.org/packages/04/5d/019eb5f99b8d5ebee3e1e8f046482fd5b7c35ba2d02b8e8553798d01cfe9/pandas_access-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "82e333b28e9a4bd4af96763c7ccd882b", "sha256": "7849140375a8f32037735051dbec55dec0570e1975a405f90b5b75fd582e21ed"}, "downloads": -1, "filename": "pandas_access-0.0.1.tar.gz", "has_sig": false, "md5_digest": "82e333b28e9a4bd4af96763c7ccd882b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3211, "upload_time": "2016-06-07T21:02:38", "upload_time_iso_8601": "2016-06-07T21:02:38.242462Z", "url": "https://files.pythonhosted.org/packages/04/5d/019eb5f99b8d5ebee3e1e8f046482fd5b7c35ba2d02b8e8553798d01cfe9/pandas_access-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:59:33 2020"}