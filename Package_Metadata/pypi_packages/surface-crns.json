{"info": {"author": "Samuel Clamons", "author_email": "sclamons@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Scientific/Engineering :: Chemistry", "Topic :: Scientific/Engineering :: Mathematics", "Topic :: Scientific/Engineering :: Visualization"], "description": "Simulation of Chemical Reaction Networks (CRNs) on a surface\n============================================================\n\nThis package is a companion to Clamons, Qian, & Winfree 2020 (\"Programming and Simulating Chemical Reaction Networks on a Surface\"). It simulates surface Chemical Reaction Networks (surface CRNs), as defined in Qian & Winfree 2014 ([\"Parallel and Scalable Computation and Spatial Dynamics with DNA-Based Chemical Reaction Networks on a Surface\"](http://www.dna.caltech.edu/Papers/surface_CRNs_DNA20.pdf)). A version frozen at the release of the paper will be made available on a `paper-release` branch, while the `master` branch will be kept up-to-date with any subsequent bug fixes or improvements.\n\nThis package provides:\n\n* A core simulator for simulating surface CRNs on arbitrary graphs.\n* Models and views for square-grid and hex-grid surface CRNs.\n* A manifest-reading system to simplify setting up new surface CRNs.\n* A pygame-powered GUI for visualizing square-grid and hex-grid surface CRNs.\n* A number of [examples](https://github.com/sclamons/surface_crns/tree/master/examples) of surface CRNs, including examples from the paper and examples of programmatic access to the package's underlying functionality.\n\n**If you are using surface_crns on OSX, read the note for you in \"Prerequisites\".**\n\nPrerequisites\n=============\nThe GUI simulator requires pygame and numpy, both of which can be installed with [pip](https://pip.pypa.io/en/stable/).\n\nThis simulator is only tested in Python 3. It will likely not run in Python 2.\n\n**Important note for OSX users**: There is a known problem with Pygame mouse click registration on OSX with certain installations of Python. In Python 3, if you use virtualenv or a Conda installation of Python, Pygame will only register mouse movement when the mouse button is held down. You can fix this by turning off virtualenv or (if you use Conda) by using pythonw instead of python to run your simulations. If, for whatever reason, you cannot do either of these things, make sure to move your mouse *during* each click, ending the click on whatever button you want to press.\n\n**Important note for OSX 10.14 users**: The current public stable version of pygame (1.9.6) does not work in OSX 10.14 in some verisons of Python 3. The development version of pygame does work on OSX 10.14. If you are running OSX 10.14 and you don't get a window when you run ``SurfaceCRNQueueSimulator``, try downloading the pygame repository at https://github.com/pygame/pygame, navigate into the downloaded folder, and run ``python setup.py install``.\n\nInstallation\n============\n\nInstall with the following (probably requires sudo): ``pip install surface_crns``\n\nTo update, run (also with superuser privilege): ``pip install --upgrade --no-deps surface_crns``\n\nIf you are using OSX and you get a mysterious error while installing surface\\_crns\nor pygame, you may need to install several SDL libraries used by pygame.\nInstall them with brew (<https://brew.sh/>) with the command:\n\n`brew install sdl sdl_image sdl_mixer sdl_ttf portmidi`\n\nWhat's a surface CRN?\n=====================\n\nIn brief, a surface CRN is a stochastic chemical reaction network where individual molecules are tethered to fixed positions on a surface such that they can only interact with neighbors; stated another way, a surface CRN is an asynchronous cellular automata with transition rules that resemble those of unimolecular and bimolecular chemical reactions.\n\nA surface CRN consists of a number of sites with states on an arbitrary lattice (we usually use a square grid, but a surface CRN could use any graph as its lattice), along with transition rules of the form ``A -> B`` or ``A + B -> C + D``, with a real-valued reaction rate for each transition rule. States change stochastically according to the transition rules for the surface CRN, with expected time specified by the reaction rate for each reaction.\n\nFor example, a site with state ``A`` can undergo ``A -> B`` to instantaneously switch to state ``B``.\n\nBimolecular reactions (of the form ``A + B -> C + D``) can occur only if *both* of the species before the arrow are present and next to each other on the lattice (note that there is no \"directionality\" inherent to the surface, so an ``A`` next to a ``B`` is equivalent to a ``B`` next to an ``A``). When a bimolecular reaction occurs, the first reactant instantaneously becomes the first product, and the second reactant simultaneously and becomes the second product, so the states ``A B`` would become ``C D`` (or, equivalently, ``B A`` would become ``D C``).\n\nWhat can you do with a surface CRN? Some examples are shown in the paper, and also in [this earlier paper by Qian and Winfree](https://link.springer.com/chapter/10.1007/978-3-319-11295-4_8); See what you can make!\n\nHow do I use the simulator?\n===========================\n\nThe fastest way to start using the simulator is to use our hosted version of the simulator at http://centrosome.caltech.edu/Surface_CRN_Simulator/srv/.\n\nThis package lets you run simulations locally, with more control and a less cumbersome interface. First, install this package as described under \"Installation\". This will install an executable script `SurfaceCRNQueueSimulator`, which you can run directly from the command line with \n\n```\nSurfaceCRNQueueSimulator -m <manifest_file>\n```\n\nwhere ``<manifest_file>`` is the name of a valid manifest file (see below). We have provided a number of example manifests in the ``examples`` folder, and you can get more from [the online simulator](http://www.dna.caltech.edu/Surface_CRN_Simulator/srv/). Please note that some of these manifests use information from other files in the ``examples`` folder. The easiest way to use these examples is to clone this repository and copy the entire ``examples`` folder.\n\nYou can also run the simulator from a Python script. If you are having difficulty running `SurfaceCRNQueueSimulator` directly, this is the next thing you should try. To run a surface CRN specified in a file \"example_manifest.txt\", you would run (in your Python terminal or script)\n\n```python\nfrom surface_crns import SurfaceCRNQueueSimulator\nSurfaceCRNQueueSimulator.simulate_surface_crn(\"example_manifest.txt\")\n```\n\nIf you are one of the users affected by the Pygame mouse click registration bug mentioned in \"Prerequisites\", you can run SurfaceCRNQueueSimulator with pythonw. First, find the full name and location of SurfaceCRNQueueSimulator on your machine by running ``which SurfaceCRNQueueSimulator``. Then run ``pythonw <simulator_name> -m <manifest_file>``, where ``<simulator_name>`` is the output of the ``which`` command you ran. You'll also have to use pythonw to run any script you run that uses `SurfaceCRNQueueSimulator`.\n\nWhat is a \"manifest file\"?\n==========================\n\nA manifest file is a text file that defines a surface CRN. It includes the rules of the surface CRN, an initial condition, a colormap to control how the surface CRN will be displayed, and a number of run options.\n\nHow do I write a manifest file?\n===============================\nYou can find manifest files for several example surface CRNs in [the \"examples\" folder of this repository](https://github.com/sclamons/surface_crns/tree/master/examples). There are also a number of examples available at http://www.dna.caltech.edu/Surface_CRN_Simulator/srv/.\n\nA surface chemical reaction network (sCRN) on a square grid can be specified by a manifest file consisting of four parts:\n\n* Transition rules\n* Initial state\n* Colormap\n* General Settings\n\nAny line in a manifest beginning with a '#' (or anything after a '#'# in the middle of a line) will be treated as a comment and ignored.\n\n## Transition Rules\n\nThe section of a manifest specifying transition rules begins with the line \"!START_TRANSITION_RULES\" and ends with the line \"!END_TRANSITION_RULES\" (no quotation marks). A single transition rule is specified by a line of the form\n\n(RATE) NAME1 -> NAME2\n\nor\n\n(RATE) NAME1 + NAME2 -> NAME3 + NAME4\n\nwhere \"RATE\" is a (nonnegative) number designating the reaction rate of the transition rule, and NAME1, NAME2, NAME3, and NAME4 are alphanumeric species identifiers. Species identifiers may contain letters, numbers, commas, and underscores, but not other punctuation or whitespace. For example, a rule that species X1 and Y1 react to form species X2 and Y2 with rate 10 (in arbitrary units of 1/time) would be specified with:\n\n```\n(10) X1 + Y1 -> X2 + Y2\n```\n\nRates may be placed anywhere in a transition rule statement except inside an identifier or the \"->\" token. For example, the following transition rules are all valid:\n\n```\n(10) X + Y -> A + B\nX + Y ->(10) A + B\nX + Y -> A + B (10)\n```\n\n## Initial state\n\nThe section of a manifest specifying the initial state of the surface begins with the line \"!START_INIT_STATE\" and ends with the line \"!END_INIT_STATE\". An initial state is specified in a comma- or whitespace-separated format, with rows separated by newlines and columns are separated by either whitespace or commas (either is acceptable).\n\nThe contents of each cell in the grid are specified just as species in the transition rule section. The name used in the initial state section must exactly match the name used in the transition rule section, or transition rules will not be applied to that position.\n\n## Colormap\n\nThe colormap section of the manifest begins with the line \"!START_COLORMAP\" and ends with the line \"!END_COLORMAP\". The colormap determines the colors that will be used to represent each species, and can be used to group multiple species to be displayed as one color. The colormap is optional; if no colormap is specified, then colors will be assigned automatically and each species will be labeled with its species name.\n\nA single species' color can be specified with a line of the form\n\nNAME: (R, G, B)\n\nwhere \"NAME\" is the name of the species (of the same format used to specify species names in the transition rules and initial state sections) and \"R\", \"G\", and \"B\" are integers between 0 and 255 (inclusive) specifying the red, green, and blue components of the specified color. For instance, to make species \"X1\" display as black, one would write\n\n```\nX1: (0, 0, 0)\n```\n\nand to make species \"Y1\" display as vibrant red, one would write\n\n```\nY1: (255, 0, 0)\n```\n\nMultiple species can also be grouped to be displayed with the same color and given a single display name using a statement of the form\n\n{CLASS} NAME1, NAME2,...: (R, G, B)\n\nwhere \"CLASS\" is the (optional) name under which the species should be displayed, \"NAME1, NAME2,...\" is a comma-separated list of species names of any length, and \"R\", \"G\", and \"B\" are as above. For instance, to display all of the species X1, X2, X3, and X4 as red and all of the species Y1, Y2, Y3, and Y4 as green, one would write\n\n```\n{X} X1, X2, X3, X4: (255, 0, 0)\n{Y} Y1, Y2, Y3, Y4: (0, 255, 0)\n```\n\n## General Settings\n\nAny line not in a transition rule, initial state, or colormap block is interpreted as a general setting. General settings take the form\n\nSETTING = VALUE\n\nwith the obvious meanings. Useful settings to know are:\n\n* **speedup_factor** *(default `1`)*: A nonnegative real number dictating the speed of simulation playback. Larger numbers mean faster playback, up to the processing limits of pygame and of the simulator.\n* **debug** *(default `False`)*: If `True`, the simulator will spew out debugging info when run. You probably want this set to `False`.\n* **rng_seed** *(default `None`)*: Integer specifying the random number seed used by the simulation. Set this value to a positive integer to make simulations reproducible.\n* **max_duration** *(default `1000000`)*: A nonnegative number specifying the maximum length of simulation in arbitrary time units (the same arbitrary time units specified by transition rule reaction rates).\n* **node_display** *(default `color`)*: Determines whether the state of each position on the grid (node) is overlaid, in text, on that node. Set to \"text\" to overlay text, or \"color\" to only show node color.\n* **pixels_per_node** *(default `5`)*: Determines the size of a node, in pixels.\n* **wrap_grid** *(default `False`)*: Iff True, grid connections wrap top-to-bottom and left-to-right (and vice versa). \n* **geometry** *(default `square`)*: Toggles surface geometry to either a square grid (default, `square`) or a hex grid (`hex`).\n\n## Including Files\n\nIt's often helpful to store parts of a manifest file separately. For example, you may wish to share the same transition rules and/or colormap settings across a number of simulations with separate manifests. \n\nTo do this, put whatever you want to store separately in its own document (here, `some_other_file.txt`), and include it in the manifest with \n\n```\n!INCLUDE some_other_file.txt\n```\n\nThe `!INCLUDE` line will be replaced with the contents of `some_other_text_file.txt`. If you'd like see more examples of the use of the INCLUDE statement, check out the [chapter 3 paper examples](https://github.com/sclamons/surface_crns/tree/master/examples/Paper/3%20-%20Dynamic%20Spatial%20Patterns).\n\nAcknowledgements\n================\n\nThis package uses the pygbutton package by Al Sweigart (https://github.com/asweigart/pygbutton), as well as the random_color function made by adews (https://gist.github.com/adewes/5884820.). Thanks to both authors!\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/sclamons/surface_crns", "keywords": "mathematics surface-chemistry cellular-automata", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "surface-crns", "package_url": "https://pypi.org/project/surface-crns/", "platform": "", "project_url": "https://pypi.org/project/surface-crns/", "project_urls": {"Homepage": "https://github.com/sclamons/surface_crns"}, "release_url": "https://pypi.org/project/surface-crns/1.1/", "requires_dist": ["pygame", "numpy"], "requires_python": "", "summary": "Simulation of chemical reaction networks (CRNs) on a surface", "version": "1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Simulation of Chemical Reaction Networks (CRNs) on a surface</h1>\n<p>This package is a companion to Clamons, Qian, &amp; Winfree 2020 (\"Programming and Simulating Chemical Reaction Networks on a Surface\"). It simulates surface Chemical Reaction Networks (surface CRNs), as defined in Qian &amp; Winfree 2014 (<a href=\"http://www.dna.caltech.edu/Papers/surface_CRNs_DNA20.pdf\" rel=\"nofollow\">\"Parallel and Scalable Computation and Spatial Dynamics with DNA-Based Chemical Reaction Networks on a Surface\"</a>). A version frozen at the release of the paper will be made available on a <code>paper-release</code> branch, while the <code>master</code> branch will be kept up-to-date with any subsequent bug fixes or improvements.</p>\n<p>This package provides:</p>\n<ul>\n<li>A core simulator for simulating surface CRNs on arbitrary graphs.</li>\n<li>Models and views for square-grid and hex-grid surface CRNs.</li>\n<li>A manifest-reading system to simplify setting up new surface CRNs.</li>\n<li>A pygame-powered GUI for visualizing square-grid and hex-grid surface CRNs.</li>\n<li>A number of <a href=\"https://github.com/sclamons/surface_crns/tree/master/examples\" rel=\"nofollow\">examples</a> of surface CRNs, including examples from the paper and examples of programmatic access to the package's underlying functionality.</li>\n</ul>\n<p><strong>If you are using surface_crns on OSX, read the note for you in \"Prerequisites\".</strong></p>\n<h1>Prerequisites</h1>\n<p>The GUI simulator requires pygame and numpy, both of which can be installed with <a href=\"https://pip.pypa.io/en/stable/\" rel=\"nofollow\">pip</a>.</p>\n<p>This simulator is only tested in Python 3. It will likely not run in Python 2.</p>\n<p><strong>Important note for OSX users</strong>: There is a known problem with Pygame mouse click registration on OSX with certain installations of Python. In Python 3, if you use virtualenv or a Conda installation of Python, Pygame will only register mouse movement when the mouse button is held down. You can fix this by turning off virtualenv or (if you use Conda) by using pythonw instead of python to run your simulations. If, for whatever reason, you cannot do either of these things, make sure to move your mouse <em>during</em> each click, ending the click on whatever button you want to press.</p>\n<p><strong>Important note for OSX 10.14 users</strong>: The current public stable version of pygame (1.9.6) does not work in OSX 10.14 in some verisons of Python 3. The development version of pygame does work on OSX 10.14. If you are running OSX 10.14 and you don't get a window when you run <code>SurfaceCRNQueueSimulator</code>, try downloading the pygame repository at <a href=\"https://github.com/pygame/pygame\" rel=\"nofollow\">https://github.com/pygame/pygame</a>, navigate into the downloaded folder, and run <code>python setup.py install</code>.</p>\n<h1>Installation</h1>\n<p>Install with the following (probably requires sudo): <code>pip install surface_crns</code></p>\n<p>To update, run (also with superuser privilege): <code>pip install --upgrade --no-deps surface_crns</code></p>\n<p>If you are using OSX and you get a mysterious error while installing surface_crns\nor pygame, you may need to install several SDL libraries used by pygame.\nInstall them with brew (<a href=\"https://brew.sh/\" rel=\"nofollow\">https://brew.sh/</a>) with the command:</p>\n<p><code>brew install sdl sdl_image sdl_mixer sdl_ttf portmidi</code></p>\n<h1>What's a surface CRN?</h1>\n<p>In brief, a surface CRN is a stochastic chemical reaction network where individual molecules are tethered to fixed positions on a surface such that they can only interact with neighbors; stated another way, a surface CRN is an asynchronous cellular automata with transition rules that resemble those of unimolecular and bimolecular chemical reactions.</p>\n<p>A surface CRN consists of a number of sites with states on an arbitrary lattice (we usually use a square grid, but a surface CRN could use any graph as its lattice), along with transition rules of the form <code>A -&gt; B</code> or <code>A + B -&gt; C + D</code>, with a real-valued reaction rate for each transition rule. States change stochastically according to the transition rules for the surface CRN, with expected time specified by the reaction rate for each reaction.</p>\n<p>For example, a site with state <code>A</code> can undergo <code>A -&gt; B</code> to instantaneously switch to state <code>B</code>.</p>\n<p>Bimolecular reactions (of the form <code>A + B -&gt; C + D</code>) can occur only if <em>both</em> of the species before the arrow are present and next to each other on the lattice (note that there is no \"directionality\" inherent to the surface, so an <code>A</code> next to a <code>B</code> is equivalent to a <code>B</code> next to an <code>A</code>). When a bimolecular reaction occurs, the first reactant instantaneously becomes the first product, and the second reactant simultaneously and becomes the second product, so the states <code>A B</code> would become <code>C D</code> (or, equivalently, <code>B A</code> would become <code>D C</code>).</p>\n<p>What can you do with a surface CRN? Some examples are shown in the paper, and also in <a href=\"https://link.springer.com/chapter/10.1007/978-3-319-11295-4_8\" rel=\"nofollow\">this earlier paper by Qian and Winfree</a>; See what you can make!</p>\n<h1>How do I use the simulator?</h1>\n<p>The fastest way to start using the simulator is to use our hosted version of the simulator at <a href=\"http://centrosome.caltech.edu/Surface_CRN_Simulator/srv/\" rel=\"nofollow\">http://centrosome.caltech.edu/Surface_CRN_Simulator/srv/</a>.</p>\n<p>This package lets you run simulations locally, with more control and a less cumbersome interface. First, install this package as described under \"Installation\". This will install an executable script <code>SurfaceCRNQueueSimulator</code>, which you can run directly from the command line with</p>\n<pre><code>SurfaceCRNQueueSimulator -m &lt;manifest_file&gt;\n</code></pre>\n<p>where <code>&lt;manifest_file&gt;</code> is the name of a valid manifest file (see below). We have provided a number of example manifests in the <code>examples</code> folder, and you can get more from <a href=\"http://www.dna.caltech.edu/Surface_CRN_Simulator/srv/\" rel=\"nofollow\">the online simulator</a>. Please note that some of these manifests use information from other files in the <code>examples</code> folder. The easiest way to use these examples is to clone this repository and copy the entire <code>examples</code> folder.</p>\n<p>You can also run the simulator from a Python script. If you are having difficulty running <code>SurfaceCRNQueueSimulator</code> directly, this is the next thing you should try. To run a surface CRN specified in a file \"example_manifest.txt\", you would run (in your Python terminal or script)</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">surface_crns</span> <span class=\"kn\">import</span> <span class=\"n\">SurfaceCRNQueueSimulator</span>\n<span class=\"n\">SurfaceCRNQueueSimulator</span><span class=\"o\">.</span><span class=\"n\">simulate_surface_crn</span><span class=\"p\">(</span><span class=\"s2\">\"example_manifest.txt\"</span><span class=\"p\">)</span>\n</pre>\n<p>If you are one of the users affected by the Pygame mouse click registration bug mentioned in \"Prerequisites\", you can run SurfaceCRNQueueSimulator with pythonw. First, find the full name and location of SurfaceCRNQueueSimulator on your machine by running <code>which SurfaceCRNQueueSimulator</code>. Then run <code>pythonw &lt;simulator_name&gt; -m &lt;manifest_file&gt;</code>, where <code>&lt;simulator_name&gt;</code> is the output of the <code>which</code> command you ran. You'll also have to use pythonw to run any script you run that uses <code>SurfaceCRNQueueSimulator</code>.</p>\n<h1>What is a \"manifest file\"?</h1>\n<p>A manifest file is a text file that defines a surface CRN. It includes the rules of the surface CRN, an initial condition, a colormap to control how the surface CRN will be displayed, and a number of run options.</p>\n<h1>How do I write a manifest file?</h1>\n<p>You can find manifest files for several example surface CRNs in <a href=\"https://github.com/sclamons/surface_crns/tree/master/examples\" rel=\"nofollow\">the \"examples\" folder of this repository</a>. There are also a number of examples available at <a href=\"http://www.dna.caltech.edu/Surface_CRN_Simulator/srv/\" rel=\"nofollow\">http://www.dna.caltech.edu/Surface_CRN_Simulator/srv/</a>.</p>\n<p>A surface chemical reaction network (sCRN) on a square grid can be specified by a manifest file consisting of four parts:</p>\n<ul>\n<li>Transition rules</li>\n<li>Initial state</li>\n<li>Colormap</li>\n<li>General Settings</li>\n</ul>\n<p>Any line in a manifest beginning with a '#' (or anything after a '#'# in the middle of a line) will be treated as a comment and ignored.</p>\n<h2>Transition Rules</h2>\n<p>The section of a manifest specifying transition rules begins with the line \"!START_TRANSITION_RULES\" and ends with the line \"!END_TRANSITION_RULES\" (no quotation marks). A single transition rule is specified by a line of the form</p>\n<p>(RATE) NAME1 -&gt; NAME2</p>\n<p>or</p>\n<p>(RATE) NAME1 + NAME2 -&gt; NAME3 + NAME4</p>\n<p>where \"RATE\" is a (nonnegative) number designating the reaction rate of the transition rule, and NAME1, NAME2, NAME3, and NAME4 are alphanumeric species identifiers. Species identifiers may contain letters, numbers, commas, and underscores, but not other punctuation or whitespace. For example, a rule that species X1 and Y1 react to form species X2 and Y2 with rate 10 (in arbitrary units of 1/time) would be specified with:</p>\n<pre><code>(10) X1 + Y1 -&gt; X2 + Y2\n</code></pre>\n<p>Rates may be placed anywhere in a transition rule statement except inside an identifier or the \"-&gt;\" token. For example, the following transition rules are all valid:</p>\n<pre><code>(10) X + Y -&gt; A + B\nX + Y -&gt;(10) A + B\nX + Y -&gt; A + B (10)\n</code></pre>\n<h2>Initial state</h2>\n<p>The section of a manifest specifying the initial state of the surface begins with the line \"!START_INIT_STATE\" and ends with the line \"!END_INIT_STATE\". An initial state is specified in a comma- or whitespace-separated format, with rows separated by newlines and columns are separated by either whitespace or commas (either is acceptable).</p>\n<p>The contents of each cell in the grid are specified just as species in the transition rule section. The name used in the initial state section must exactly match the name used in the transition rule section, or transition rules will not be applied to that position.</p>\n<h2>Colormap</h2>\n<p>The colormap section of the manifest begins with the line \"!START_COLORMAP\" and ends with the line \"!END_COLORMAP\". The colormap determines the colors that will be used to represent each species, and can be used to group multiple species to be displayed as one color. The colormap is optional; if no colormap is specified, then colors will be assigned automatically and each species will be labeled with its species name.</p>\n<p>A single species' color can be specified with a line of the form</p>\n<p>NAME: (R, G, B)</p>\n<p>where \"NAME\" is the name of the species (of the same format used to specify species names in the transition rules and initial state sections) and \"R\", \"G\", and \"B\" are integers between 0 and 255 (inclusive) specifying the red, green, and blue components of the specified color. For instance, to make species \"X1\" display as black, one would write</p>\n<pre><code>X1: (0, 0, 0)\n</code></pre>\n<p>and to make species \"Y1\" display as vibrant red, one would write</p>\n<pre><code>Y1: (255, 0, 0)\n</code></pre>\n<p>Multiple species can also be grouped to be displayed with the same color and given a single display name using a statement of the form</p>\n<p>{CLASS} NAME1, NAME2,...: (R, G, B)</p>\n<p>where \"CLASS\" is the (optional) name under which the species should be displayed, \"NAME1, NAME2,...\" is a comma-separated list of species names of any length, and \"R\", \"G\", and \"B\" are as above. For instance, to display all of the species X1, X2, X3, and X4 as red and all of the species Y1, Y2, Y3, and Y4 as green, one would write</p>\n<pre><code>{X} X1, X2, X3, X4: (255, 0, 0)\n{Y} Y1, Y2, Y3, Y4: (0, 255, 0)\n</code></pre>\n<h2>General Settings</h2>\n<p>Any line not in a transition rule, initial state, or colormap block is interpreted as a general setting. General settings take the form</p>\n<p>SETTING = VALUE</p>\n<p>with the obvious meanings. Useful settings to know are:</p>\n<ul>\n<li><strong>speedup_factor</strong> <em>(default <code>1</code>)</em>: A nonnegative real number dictating the speed of simulation playback. Larger numbers mean faster playback, up to the processing limits of pygame and of the simulator.</li>\n<li><strong>debug</strong> <em>(default <code>False</code>)</em>: If <code>True</code>, the simulator will spew out debugging info when run. You probably want this set to <code>False</code>.</li>\n<li><strong>rng_seed</strong> <em>(default <code>None</code>)</em>: Integer specifying the random number seed used by the simulation. Set this value to a positive integer to make simulations reproducible.</li>\n<li><strong>max_duration</strong> <em>(default <code>1000000</code>)</em>: A nonnegative number specifying the maximum length of simulation in arbitrary time units (the same arbitrary time units specified by transition rule reaction rates).</li>\n<li><strong>node_display</strong> <em>(default <code>color</code>)</em>: Determines whether the state of each position on the grid (node) is overlaid, in text, on that node. Set to \"text\" to overlay text, or \"color\" to only show node color.</li>\n<li><strong>pixels_per_node</strong> <em>(default <code>5</code>)</em>: Determines the size of a node, in pixels.</li>\n<li><strong>wrap_grid</strong> <em>(default <code>False</code>)</em>: Iff True, grid connections wrap top-to-bottom and left-to-right (and vice versa).</li>\n<li><strong>geometry</strong> <em>(default <code>square</code>)</em>: Toggles surface geometry to either a square grid (default, <code>square</code>) or a hex grid (<code>hex</code>).</li>\n</ul>\n<h2>Including Files</h2>\n<p>It's often helpful to store parts of a manifest file separately. For example, you may wish to share the same transition rules and/or colormap settings across a number of simulations with separate manifests.</p>\n<p>To do this, put whatever you want to store separately in its own document (here, <code>some_other_file.txt</code>), and include it in the manifest with</p>\n<pre><code>!INCLUDE some_other_file.txt\n</code></pre>\n<p>The <code>!INCLUDE</code> line will be replaced with the contents of <code>some_other_text_file.txt</code>. If you'd like see more examples of the use of the INCLUDE statement, check out the <a href=\"https://github.com/sclamons/surface_crns/tree/master/examples/Paper/3%20-%20Dynamic%20Spatial%20Patterns\" rel=\"nofollow\">chapter 3 paper examples</a>.</p>\n<h1>Acknowledgements</h1>\n<p>This package uses the pygbutton package by Al Sweigart (<a href=\"https://github.com/asweigart/pygbutton\" rel=\"nofollow\">https://github.com/asweigart/pygbutton</a>), as well as the random_color function made by adews (<a href=\"https://gist.github.com/adewes/5884820\" rel=\"nofollow\">https://gist.github.com/adewes/5884820</a>.). Thanks to both authors!</p>\n\n          </div>"}, "last_serial": 7142876, "releases": {"1.1": [{"comment_text": "", "digests": {"md5": "a020fca0bb64afe14b3c6882bef5ffa9", "sha256": "30a4cada378002408cb3761db987e88593d62fcf40aa38785ccb35fff49dd7f6"}, "downloads": -1, "filename": "surface_crns-1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a020fca0bb64afe14b3c6882bef5ffa9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 70565, "upload_time": "2020-05-01T05:55:17", "upload_time_iso_8601": "2020-05-01T05:55:17.024071Z", "url": "https://files.pythonhosted.org/packages/56/9b/23732e7105a406369807d1a922d29068a1d5ae60a31a030e6983f42d1374/surface_crns-1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0430c695120c48e971dcfce11d7706ae", "sha256": "1e90e758692c55676a0d5bdbe64d6b2baf1799f73e93fd4edbcd6bd01e5e09ec"}, "downloads": -1, "filename": "surface_crns-1.1.tar.gz", "has_sig": false, "md5_digest": "0430c695120c48e971dcfce11d7706ae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 52000, "upload_time": "2020-05-01T05:55:19", "upload_time_iso_8601": "2020-05-01T05:55:19.508201Z", "url": "https://files.pythonhosted.org/packages/64/d2/f5cbb813ede64a4d0422a54bdf99e98d1eec2ffb03b12b6141ddbaafe3fe/surface_crns-1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a020fca0bb64afe14b3c6882bef5ffa9", "sha256": "30a4cada378002408cb3761db987e88593d62fcf40aa38785ccb35fff49dd7f6"}, "downloads": -1, "filename": "surface_crns-1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a020fca0bb64afe14b3c6882bef5ffa9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 70565, "upload_time": "2020-05-01T05:55:17", "upload_time_iso_8601": "2020-05-01T05:55:17.024071Z", "url": "https://files.pythonhosted.org/packages/56/9b/23732e7105a406369807d1a922d29068a1d5ae60a31a030e6983f42d1374/surface_crns-1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0430c695120c48e971dcfce11d7706ae", "sha256": "1e90e758692c55676a0d5bdbe64d6b2baf1799f73e93fd4edbcd6bd01e5e09ec"}, "downloads": -1, "filename": "surface_crns-1.1.tar.gz", "has_sig": false, "md5_digest": "0430c695120c48e971dcfce11d7706ae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 52000, "upload_time": "2020-05-01T05:55:19", "upload_time_iso_8601": "2020-05-01T05:55:19.508201Z", "url": "https://files.pythonhosted.org/packages/64/d2/f5cbb813ede64a4d0422a54bdf99e98d1eec2ffb03b12b6141ddbaafe3fe/surface_crns-1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:00:01 2020"}