{"info": {"author": "Brent Barbachem", "author_email": "barbacbd@dukes.jmu.edu", "bugtrack_url": null, "classifiers": [], "description": "# Nautical\n\n## Details\nAuthor: Brent Barbachem\n\nDate: May 18, 2019\n\n## Description\n\nOriginally this project was developed to attempt to get the current data from NOAA for surfing purposes. The project has \nevolved and taken a step in a different direction, and it now focuses on a broad nautical spectrum.\n\nA python based web scraper to grab the surf data from [NOAA](https://www.ndbc.noaa.gov/). The scraper has utilizes kml parsing\nand BeautifulSoup to parse through data found online. NOAA is very kind in the fact that they allow the lookup of Buoy\ndata very easily using the same url with the id of the buoy at the end of the url. We can grab all of the buoy ids, append\nthe id to the url, and get several tables of output from the url. All of the data stored in the tables is updated in 30 minute\nincrements.\n\nNotable data of interest includes:\n1. Preset Wave Data\n2. Present Swell Data\n3. Past Wave Date\n4. Past Swell Data\n\n## Structure\n\n- [error](./error) - The module contains the custom exception used in this package.\n- [io](./io) - The module contains the majority of the code where the user can read all buoy data, parse kml, parse beautiful soup \nhtml output, and grab some of the specific data from the tables that we are looking for.\n- [location](./location) - The module contains a 3D Point class that can be used to store locations as well as determine distance\nto and from other points.\n- [noaa](./noaa) - The module contains classes to store/utilize/manipulate swell and wave data read in from NOAA's website. \nThere are also some extra functions such as getting the sea state based on the current wave height.\n- [tests](./tests) - The module contains the unit tests for the Nautical package.\n\n## How to use this module\n\nStart by getting all of the buoy information (unless you already know the buoy id that you wish to lookup).\n\n```python\nfrom nautical.io import get_buoys_information\n# passing True will mean that you only grab data from locations that contain wave data\nbuoys = get_buoys_information(True)\n```\n\nFind the id of the buoy in the list of buoys that you wish to receive data from:\n\n```python\nfrom nautical.location import Point\n# this example picks a point and we want to find a point close to this one and use its data.\n\np = Point()\np.set_latitude(36.8529)\np.set_longitude(-75.9780)\n\nmin_distance = float(\"inf\")\nname = \"\"\nlat = 0\nlon = 0\n\nfor key, value in buoys.items():\n    dist = p.get_distance(value.lat, value.lon)/1000.0\n\n    if dist < min_distance:\n        name = key\n        min_distance = dist\n        lat = value.lat\n        lon = value.lon\n```\n\nGet the beautiful soup object for this buoy, so that we can move on to parsing through some of the data.\n\n```python\nfrom nautical.io import get_noaa_forecast_url, get_url_source\nurl = get_noaa_forecast_url(name)\nsoup = get_url_source(url)\n```\n\nNow that we have the beautiful soup object we can get some of the data from the tables.\n\n```python\nfrom nautical.io import get_current_data\nattrs = get_current_data(soup, name)\n```\nParse through the data at your own discretion and find what you are looking for\n\n```python\nfrom nautical.noaa import get_sea_state\nwave_height = 0.0\n\nfor attr in attrs:\n    if 'Wave Height' in attr[0]:\n        \n        try:\n            stuff = attr[1].split()\n            wave_height = float(stuff[0])\n        except ValueError:\n            pass\n\n# convert the sea state to meters and get the sea state\nstate = get_sea_state(wave_height / 3.28)\n\nprint(\"Wave Height = {} meters\\nSea State = {}\".format(wave_height, state))\n```\n\nThe output of this sample is:\n```text\nSearching for NOAA Data Near 36.8529, -75.978\nFound Buoy 44064 at 36.998,-76.087: 18.825457352951904 meters from the search location\nWave Height = 1.0 meters\nSea State = 2\n```\n\nIf you wish to get all past and present informmation (over a 24 hour period) about a buoy, there are several\ndifferent ways to go about this:\n\nThe simplest way is to get all of the data at once (that is available):\n\n```python\nbuoy = 44099\ndata = buoy_workup(buoy)\n```\n\nThis example will grab all of the current data about the buoy. However, if you wish to grab specific information\nabout the buoy you can use any of the following:\n\n```python\ncurrent_wave_search = \"Conditions at {} as of\".format(buoy)\ndata.present_wave_data = get_current_data(soup, current_wave_search)\n\ndetailed_search = \"Detailed Wave Summary\"\ndata.present_swell_data = get_current_data(soup, detailed_search)\n\ndata.past_data = get_past_data(soup)\n```\n\n\n\n## Unit Tests\n\nTo run the unit tests utilize the unit test suite provided by the unit test python package. The following python snippet \ndemonstrates a simple way to run all of the unit tests. If the _test_beautiful_soup_ or _test_forecast_url_ tests fail, then\nthere is a good possibility that you are not connected to the internet OR you cannot reach the noaa website.\n\n```python\nfrom nautical.tests import *\n\nsuite = TestNautical.suite()\nunittest.TextTestRunner().run(suite)\n```\n\n## Troubleshooting\n\nIf you are using _python3.5_, _pykml_ will install with references to urllib2. Please edit the files in the \n_pykml_ directory with the following change(s):\n\n```python\nimport urllib as urllib2\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://barbacbd@bitbucket.org/barbacbd/nautical/archive/v_101.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://barbacbd@bitbucket.org/barbacbd/nautical", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "nautical", "package_url": "https://pypi.org/project/nautical/", "platform": "", "project_url": "https://pypi.org/project/nautical/", "project_urls": {"Download": "https://barbacbd@bitbucket.org/barbacbd/nautical/archive/v_101.tar.gz", "Homepage": "https://barbacbd@bitbucket.org/barbacbd/nautical"}, "release_url": "https://pypi.org/project/nautical/1.2.0/", "requires_dist": null, "requires_python": ">=3.6, <4", "summary": "The nautical package is able to lookup NOAA buoy data including swell and wave information.", "version": "1.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Nautical</h1>\n<h2>Details</h2>\n<p>Author: Brent Barbachem</p>\n<p>Date: May 18, 2019</p>\n<h2>Description</h2>\n<p>Originally this project was developed to attempt to get the current data from NOAA for surfing purposes. The project has\nevolved and taken a step in a different direction, and it now focuses on a broad nautical spectrum.</p>\n<p>A python based web scraper to grab the surf data from <a href=\"https://www.ndbc.noaa.gov/\" rel=\"nofollow\">NOAA</a>. The scraper has utilizes kml parsing\nand BeautifulSoup to parse through data found online. NOAA is very kind in the fact that they allow the lookup of Buoy\ndata very easily using the same url with the id of the buoy at the end of the url. We can grab all of the buoy ids, append\nthe id to the url, and get several tables of output from the url. All of the data stored in the tables is updated in 30 minute\nincrements.</p>\n<p>Notable data of interest includes:</p>\n<ol>\n<li>Preset Wave Data</li>\n<li>Present Swell Data</li>\n<li>Past Wave Date</li>\n<li>Past Swell Data</li>\n</ol>\n<h2>Structure</h2>\n<ul>\n<li><a href=\"./error\" rel=\"nofollow\">error</a> - The module contains the custom exception used in this package.</li>\n<li><a href=\"./io\" rel=\"nofollow\">io</a> - The module contains the majority of the code where the user can read all buoy data, parse kml, parse beautiful soup\nhtml output, and grab some of the specific data from the tables that we are looking for.</li>\n<li><a href=\"./location\" rel=\"nofollow\">location</a> - The module contains a 3D Point class that can be used to store locations as well as determine distance\nto and from other points.</li>\n<li><a href=\"./noaa\" rel=\"nofollow\">noaa</a> - The module contains classes to store/utilize/manipulate swell and wave data read in from NOAA's website.\nThere are also some extra functions such as getting the sea state based on the current wave height.</li>\n<li><a href=\"./tests\" rel=\"nofollow\">tests</a> - The module contains the unit tests for the Nautical package.</li>\n</ul>\n<h2>How to use this module</h2>\n<p>Start by getting all of the buoy information (unless you already know the buoy id that you wish to lookup).</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">nautical.io</span> <span class=\"kn\">import</span> <span class=\"n\">get_buoys_information</span>\n<span class=\"c1\"># passing True will mean that you only grab data from locations that contain wave data</span>\n<span class=\"n\">buoys</span> <span class=\"o\">=</span> <span class=\"n\">get_buoys_information</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>Find the id of the buoy in the list of buoys that you wish to receive data from:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">nautical.location</span> <span class=\"kn\">import</span> <span class=\"n\">Point</span>\n<span class=\"c1\"># this example picks a point and we want to find a point close to this one and use its data.</span>\n\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">Point</span><span class=\"p\">()</span>\n<span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">set_latitude</span><span class=\"p\">(</span><span class=\"mf\">36.8529</span><span class=\"p\">)</span>\n<span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">set_longitude</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mf\">75.9780</span><span class=\"p\">)</span>\n\n<span class=\"n\">min_distance</span> <span class=\"o\">=</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"s2\">\"inf\"</span><span class=\"p\">)</span>\n<span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"</span>\n<span class=\"n\">lat</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">lon</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"n\">buoys</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n    <span class=\"n\">dist</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">get_distance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">lat</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">lon</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"mf\">1000.0</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">dist</span> <span class=\"o\">&lt;</span> <span class=\"n\">min_distance</span><span class=\"p\">:</span>\n        <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">key</span>\n        <span class=\"n\">min_distance</span> <span class=\"o\">=</span> <span class=\"n\">dist</span>\n        <span class=\"n\">lat</span> <span class=\"o\">=</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">lat</span>\n        <span class=\"n\">lon</span> <span class=\"o\">=</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">lon</span>\n</pre>\n<p>Get the beautiful soup object for this buoy, so that we can move on to parsing through some of the data.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">nautical.io</span> <span class=\"kn\">import</span> <span class=\"n\">get_noaa_forecast_url</span><span class=\"p\">,</span> <span class=\"n\">get_url_source</span>\n<span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"n\">get_noaa_forecast_url</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n<span class=\"n\">soup</span> <span class=\"o\">=</span> <span class=\"n\">get_url_source</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span>\n</pre>\n<p>Now that we have the beautiful soup object we can get some of the data from the tables.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">nautical.io</span> <span class=\"kn\">import</span> <span class=\"n\">get_current_data</span>\n<span class=\"n\">attrs</span> <span class=\"o\">=</span> <span class=\"n\">get_current_data</span><span class=\"p\">(</span><span class=\"n\">soup</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">)</span>\n</pre>\n<p>Parse through the data at your own discretion and find what you are looking for</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">nautical.noaa</span> <span class=\"kn\">import</span> <span class=\"n\">get_sea_state</span>\n<span class=\"n\">wave_height</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>\n\n<span class=\"k\">for</span> <span class=\"n\">attr</span> <span class=\"ow\">in</span> <span class=\"n\">attrs</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"s1\">'Wave Height'</span> <span class=\"ow\">in</span> <span class=\"n\">attr</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]:</span>\n        \n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">stuff</span> <span class=\"o\">=</span> <span class=\"n\">attr</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">()</span>\n            <span class=\"n\">wave_height</span> <span class=\"o\">=</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">stuff</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n        <span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>\n            <span class=\"k\">pass</span>\n\n<span class=\"c1\"># convert the sea state to meters and get the sea state</span>\n<span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"n\">get_sea_state</span><span class=\"p\">(</span><span class=\"n\">wave_height</span> <span class=\"o\">/</span> <span class=\"mf\">3.28</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Wave Height = </span><span class=\"si\">{}</span><span class=\"s2\"> meters</span><span class=\"se\">\\n</span><span class=\"s2\">Sea State = </span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">wave_height</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"p\">))</span>\n</pre>\n<p>The output of this sample is:</p>\n<pre>Searching for NOAA Data Near 36.8529, -75.978\nFound Buoy 44064 at 36.998,-76.087: 18.825457352951904 meters from the search location\nWave Height = 1.0 meters\nSea State = 2\n</pre>\n<p>If you wish to get all past and present informmation (over a 24 hour period) about a buoy, there are several\ndifferent ways to go about this:</p>\n<p>The simplest way is to get all of the data at once (that is available):</p>\n<pre><span class=\"n\">buoy</span> <span class=\"o\">=</span> <span class=\"mi\">44099</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">buoy_workup</span><span class=\"p\">(</span><span class=\"n\">buoy</span><span class=\"p\">)</span>\n</pre>\n<p>This example will grab all of the current data about the buoy. However, if you wish to grab specific information\nabout the buoy you can use any of the following:</p>\n<pre><span class=\"n\">current_wave_search</span> <span class=\"o\">=</span> <span class=\"s2\">\"Conditions at </span><span class=\"si\">{}</span><span class=\"s2\"> as of\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">buoy</span><span class=\"p\">)</span>\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">present_wave_data</span> <span class=\"o\">=</span> <span class=\"n\">get_current_data</span><span class=\"p\">(</span><span class=\"n\">soup</span><span class=\"p\">,</span> <span class=\"n\">current_wave_search</span><span class=\"p\">)</span>\n\n<span class=\"n\">detailed_search</span> <span class=\"o\">=</span> <span class=\"s2\">\"Detailed Wave Summary\"</span>\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">present_swell_data</span> <span class=\"o\">=</span> <span class=\"n\">get_current_data</span><span class=\"p\">(</span><span class=\"n\">soup</span><span class=\"p\">,</span> <span class=\"n\">detailed_search</span><span class=\"p\">)</span>\n\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">past_data</span> <span class=\"o\">=</span> <span class=\"n\">get_past_data</span><span class=\"p\">(</span><span class=\"n\">soup</span><span class=\"p\">)</span>\n</pre>\n<h2>Unit Tests</h2>\n<p>To run the unit tests utilize the unit test suite provided by the unit test python package. The following python snippet\ndemonstrates a simple way to run all of the unit tests. If the <em>test_beautiful_soup</em> or <em>test_forecast_url</em> tests fail, then\nthere is a good possibility that you are not connected to the internet OR you cannot reach the noaa website.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">nautical.tests</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"n\">suite</span> <span class=\"o\">=</span> <span class=\"n\">TestNautical</span><span class=\"o\">.</span><span class=\"n\">suite</span><span class=\"p\">()</span>\n<span class=\"n\">unittest</span><span class=\"o\">.</span><span class=\"n\">TextTestRunner</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">suite</span><span class=\"p\">)</span>\n</pre>\n<h2>Troubleshooting</h2>\n<p>If you are using <em>python3.5</em>, <em>pykml</em> will install with references to urllib2. Please edit the files in the\n<em>pykml</em> directory with the following change(s):</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">urllib</span> <span class=\"k\">as</span> <span class=\"nn\">urllib2</span>\n</pre>\n\n          </div>"}, "last_serial": 6900081, "releases": {"1.0.2": [{"comment_text": "", "digests": {"md5": "5b85bdbc1f37c71258861b920050ad3b", "sha256": "1ba0ebeec6f2c7ff7cc6a2abfc9fac74ba81319ad45bd6dcb12e4eec4417642f"}, "downloads": -1, "filename": "nautical-1.0.2.tar.gz", "has_sig": false, "md5_digest": "5b85bdbc1f37c71258861b920050ad3b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11686, "upload_time": "2020-01-18T04:04:30", "upload_time_iso_8601": "2020-01-18T04:04:30.934565Z", "url": "https://files.pythonhosted.org/packages/d5/b3/92326825b4913f2a4380b4c3679412c2b91c07e0e88c3043dbf09998c558/nautical-1.0.2.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "15bc9c207bf95e1a34e19dafaba96c20", "sha256": "60312847b2bbb03716440dc48929b8930bd4742b0a9db31ba99ddeda6e35aa03"}, "downloads": -1, "filename": "nautical-1.1.0.tar.gz", "has_sig": false, "md5_digest": "15bc9c207bf95e1a34e19dafaba96c20", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6, <4", "size": 11726, "upload_time": "2020-02-09T03:07:21", "upload_time_iso_8601": "2020-02-09T03:07:21.086778Z", "url": "https://files.pythonhosted.org/packages/b5/5f/642ac3e1d487f6fb2fba08a5c896cc60e5a15b8f37987fecd8e62c78084d/nautical-1.1.0.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "06c9754ad22d1f01e1039e9c8fc56a73", "sha256": "f1b2e544f7fa892e1598a3cd8f3cf7f1362e314dad747ecd0ddaf486605bb81b"}, "downloads": -1, "filename": "nautical-1.2.0.tar.gz", "has_sig": false, "md5_digest": "06c9754ad22d1f01e1039e9c8fc56a73", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6, <4", "size": 11585, "upload_time": "2020-03-28T02:25:18", "upload_time_iso_8601": "2020-03-28T02:25:18.962250Z", "url": "https://files.pythonhosted.org/packages/b8/31/6328769be7c45ec0af20e55c4c0bf6b69fed88c2891607bf43f5f1e70ee3/nautical-1.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "06c9754ad22d1f01e1039e9c8fc56a73", "sha256": "f1b2e544f7fa892e1598a3cd8f3cf7f1362e314dad747ecd0ddaf486605bb81b"}, "downloads": -1, "filename": "nautical-1.2.0.tar.gz", "has_sig": false, "md5_digest": "06c9754ad22d1f01e1039e9c8fc56a73", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6, <4", "size": 11585, "upload_time": "2020-03-28T02:25:18", "upload_time_iso_8601": "2020-03-28T02:25:18.962250Z", "url": "https://files.pythonhosted.org/packages/b8/31/6328769be7c45ec0af20e55c4c0bf6b69fed88c2891607bf43f5f1e70ee3/nautical-1.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:47:14 2020"}