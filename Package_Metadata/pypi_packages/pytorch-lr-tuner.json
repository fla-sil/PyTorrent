{"info": {"author": "Saif Mahmud", "author_email": "saif.dhrubo@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# PyTorch Learning Rate Tuner\n\nPython package to plot loss against varied learning rate for PyTorch neural network models and finding optimal learning rate for specific optimizer.\n\n### Installation:\n\n    pip install pytorch-lr-tuner\n\n### Dependency:\n\n* Python 3.6\n* Numpy\n* Pandas\n* Matplotlib\n* PyTorch\n\n### Example:\n\nThe package includes `LearningRateFinder` class which can be instantiated with pytorch model reference, optimizer, criterion and training set. The `fit()` method searches for optimal learning rate with multiplicative increment and smoothing with exponential weighted average and bias correction and the visualization of this log can be obtained through calling `plot()` method. \n\n    from pytorch_lr_tuner import LearningRateFinder\n\n    ESTIMATOR_CONFIG = {'input_shape': 21, 'output_shape': 1, 'hidden_units': [32, 64, 16]}\n\n    binary_crossentropy = nn.BCELoss()\n\n    lr_finder = LearningRateFinder(estimator=VanillaNet, config=ESTIMATOR_CONFIG, optimizer='sgd', criterion=binary_crossentropy, train_set=train_set, val_set=val_set)\n\n    lr_finder.fit()\n    lr_finder.plot()\n\n### Output:\n\n<img src='loss_vs_lr.png'> <br>\n\nHere, the learning rate with steepest gradient in loss can be inferred as an optimal one for this specific architecture.\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Therap-ML/pytorch-lr-tuner", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pytorch-lr-tuner", "package_url": "https://pypi.org/project/pytorch-lr-tuner/", "platform": "", "project_url": "https://pypi.org/project/pytorch-lr-tuner/", "project_urls": {"Homepage": "https://github.com/Therap-ML/pytorch-lr-tuner"}, "release_url": "https://pypi.org/project/pytorch-lr-tuner/0.0.2/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Optimum learning rate finder for PyTorch Models", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>PyTorch Learning Rate Tuner</h1>\n<p>Python package to plot loss against varied learning rate for PyTorch neural network models and finding optimal learning rate for specific optimizer.</p>\n<h3>Installation:</h3>\n<pre><code>pip install pytorch-lr-tuner\n</code></pre>\n<h3>Dependency:</h3>\n<ul>\n<li>Python 3.6</li>\n<li>Numpy</li>\n<li>Pandas</li>\n<li>Matplotlib</li>\n<li>PyTorch</li>\n</ul>\n<h3>Example:</h3>\n<p>The package includes <code>LearningRateFinder</code> class which can be instantiated with pytorch model reference, optimizer, criterion and training set. The <code>fit()</code> method searches for optimal learning rate with multiplicative increment and smoothing with exponential weighted average and bias correction and the visualization of this log can be obtained through calling <code>plot()</code> method.</p>\n<pre><code>from pytorch_lr_tuner import LearningRateFinder\n\nESTIMATOR_CONFIG = {'input_shape': 21, 'output_shape': 1, 'hidden_units': [32, 64, 16]}\n\nbinary_crossentropy = nn.BCELoss()\n\nlr_finder = LearningRateFinder(estimator=VanillaNet, config=ESTIMATOR_CONFIG, optimizer='sgd', criterion=binary_crossentropy, train_set=train_set, val_set=val_set)\n\nlr_finder.fit()\nlr_finder.plot()\n</code></pre>\n<h3>Output:</h3>\n<p><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a3e6ca5a88a46168b9898ce5f39e5370d7edaf44/6c6f73735f76735f6c722e706e67\"> <br></p>\n<p>Here, the learning rate with steepest gradient in loss can be inferred as an optimal one for this specific architecture.</p>\n\n          </div>"}, "last_serial": 6682922, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "734211a07b72bcb983426c9be4af9c98", "sha256": "3abe124062f3ba807e5a35168472782bf8fef92e40803afc99bdd0db2ab2355c"}, "downloads": -1, "filename": "pytorch_lr_tuner-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "734211a07b72bcb983426c9be4af9c98", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 4885, "upload_time": "2020-02-23T03:39:15", "upload_time_iso_8601": "2020-02-23T03:39:15.769483Z", "url": "https://files.pythonhosted.org/packages/3e/9d/a8ce22f4dca154b125e2833daec4144873f1d0ea6d8e754976a4ca2030f7/pytorch_lr_tuner-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "40261145249f7b1d3f1eff048a0948b5", "sha256": "28ee6f87cbebc50a1f548cf868844071dc523c3f51aae6285abd3206e508f326"}, "downloads": -1, "filename": "pytorch_lr_tuner-0.0.1.tar.gz", "has_sig": false, "md5_digest": "40261145249f7b1d3f1eff048a0948b5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3463, "upload_time": "2020-02-23T03:39:18", "upload_time_iso_8601": "2020-02-23T03:39:18.078974Z", "url": "https://files.pythonhosted.org/packages/c1/e9/f5d1eaffa0e7ab49fdd97ed21b4412691a2bebe6a32f8c6d2a04a6ac8e13/pytorch_lr_tuner-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "994eaa8dcb901123fd7b5078525af474", "sha256": "88f5b2a9de62db880fbb7639b70e92b62e613c2b78c82fd657018a4038eee25e"}, "downloads": -1, "filename": "pytorch_lr_tuner-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "994eaa8dcb901123fd7b5078525af474", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 4881, "upload_time": "2020-02-23T03:48:38", "upload_time_iso_8601": "2020-02-23T03:48:38.187122Z", "url": "https://files.pythonhosted.org/packages/71/ce/2681e7e3247fe362118a9d589f1d9fb13b18abaa358c746b81b72878dd7f/pytorch_lr_tuner-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b6d57b13248bff719b4080d476a40d35", "sha256": "4c93c44f3d7c30751ce6ab137ada059b3397c937cc704217907f066909608843"}, "downloads": -1, "filename": "pytorch_lr_tuner-0.0.2.tar.gz", "has_sig": false, "md5_digest": "b6d57b13248bff719b4080d476a40d35", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3468, "upload_time": "2020-02-23T03:48:39", "upload_time_iso_8601": "2020-02-23T03:48:39.766491Z", "url": "https://files.pythonhosted.org/packages/cc/51/04d5212dd32b8df1f089f6a2994c9ed8ea8b0b3329a2744fd25f899e3b18/pytorch_lr_tuner-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "994eaa8dcb901123fd7b5078525af474", "sha256": "88f5b2a9de62db880fbb7639b70e92b62e613c2b78c82fd657018a4038eee25e"}, "downloads": -1, "filename": "pytorch_lr_tuner-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "994eaa8dcb901123fd7b5078525af474", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 4881, "upload_time": "2020-02-23T03:48:38", "upload_time_iso_8601": "2020-02-23T03:48:38.187122Z", "url": "https://files.pythonhosted.org/packages/71/ce/2681e7e3247fe362118a9d589f1d9fb13b18abaa358c746b81b72878dd7f/pytorch_lr_tuner-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b6d57b13248bff719b4080d476a40d35", "sha256": "4c93c44f3d7c30751ce6ab137ada059b3397c937cc704217907f066909608843"}, "downloads": -1, "filename": "pytorch_lr_tuner-0.0.2.tar.gz", "has_sig": false, "md5_digest": "b6d57b13248bff719b4080d476a40d35", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3468, "upload_time": "2020-02-23T03:48:39", "upload_time_iso_8601": "2020-02-23T03:48:39.766491Z", "url": "https://files.pythonhosted.org/packages/cc/51/04d5212dd32b8df1f089f6a2994c9ed8ea8b0b3329a2744fd25f899e3b18/pytorch_lr_tuner-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:13:50 2020"}