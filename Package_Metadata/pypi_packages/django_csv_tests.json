{"info": {"author": "Enrico Barzetti", "author_email": "enricobarzetti@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "Django CSV Tests\n================\n\nThis allows you to use a spreadsheet to define Django units tests that make requests to the Django testing client.  Inspired by Robot Framework.\n\nInstallation\n------------\n\nTo get the latest stable release from PyPi\n\n.. code-block:: bash\n\n    pip install django_csv_tests\n\nInstall the app\n\n.. code-block:: python\n\n    INSTALLED_APPS = (\n        ...,\n        'django_csv_tests',\n    )\n\nUsage\n-----\n\nCreate a CSV file with the headers \"test name\", \"expect failure\", \"login as\",\n\"url\", \"method\", \"querystring\", \"post body\", \"expect status\",\n\"expect header\".  Then create a test file like:\n\n.. code-block:: python\n\n    import os\n\n    from django.contrib.auth import get_user_model\n    from django.test import TestCase\n\n    from django_csv_tests import generate_tests\n\n\n    class TheTestCase(TestCase):\n        def setUp(self):\n            self.user = get_user_model().objects.create_user(username='john.doe',\n                                                             email='john@doe.com',\n                                                             password='password')\n\n\n    csv_path = os.path.join(os.path.dirname(__file__), 'tests.csv')\n    generate_tests(csv_path, TheTestCase)\n\nYou can define tests as a sequence of requests with associated assertions.  A\ntest is defined with a test name and one or more rows that describe requests to\nmake.  If a row does not have a test name it indicates that the request defined\non that row is part of the last named test.\n\nColumn values\n+++++++++++++\n\ntest name\n~~~~~~~~~\n\nA string used to name the test.\n\nexpect failure\n~~~~~~~~~~~~~~\n\nA boolean used to indicated whether the test is expected to fail.  Any non-zero\nlength string indicates True.  An easy way is enter this in a spreadsheet is as\n\"x\".\n\nlogin as\n~~~~~~~~\n\nA JSON encoded string that provides the username and password of the user to log\nin as.  This is passed as keyword arguments to\ndjango.contrib.auth.authenticate().  Example: {\"username\": \"john.doe\",\n\"password\": \"password\"}.\n\nurl\n~~~\n\nThe URL that the request should be made to.\n\nmethod\n~~~~~~\n\nAn HTTP method.  GET and POST are supported.\n\nquerystring\n~~~~~~~~~~~\n\nA JSON encoded string that contains querystring keys and values.  This becomes\n``request.GET``.\n\npost body\n~~~~~~~~~\n\nA JSON encoded string that contains data to submit in a POST request.  This is\nused only if the method is POST.  This becomes ``request.POST``.\n\nexpect status\n~~~~~~~~~~~~~\n\nThe HTTP status code expected for the response.\n\nexpect header\n~~~~~~~~~~~~~\n\nA JSON encoded string that contains header keys and values expected in the\nresponse.  Example: A redirect response could have the header\n{\"Location\": \"http://testserver/new_location/\"}\n\nTodo\n----\n\n- Implement \"expect context\", \"expect session\", and \"expect\" directives.\n\nRun Tests\n---------\n\n.. code-block:: bash\n\n    ./configure.sh\n    source venv/bin/activate\n    python django_csv_tests/tests/manage.py test", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/enricobarzetti/django_csv_tests", "keywords": "django", "license": "The MIT License", "maintainer": null, "maintainer_email": null, "name": "django_csv_tests", "package_url": "https://pypi.org/project/django_csv_tests/", "platform": "OS Independent", "project_url": "https://pypi.org/project/django_csv_tests/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/enricobarzetti/django_csv_tests"}, "release_url": "https://pypi.org/project/django_csv_tests/0.1.5/", "requires_dist": null, "requires_python": null, "summary": "This allows you to use a spreadsheet to define Django units tests that make requests to the Django testing client.", "version": "0.1.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This allows you to use a spreadsheet to define Django units tests that make requests to the Django testing client.  Inspired by Robot Framework.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>To get the latest stable release from PyPi</p>\n<pre>pip install django_csv_tests\n</pre>\n<p>Install the app</p>\n<pre><span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"o\">...</span><span class=\"p\">,</span>\n    <span class=\"s1\">'django_csv_tests'</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Create a CSV file with the headers \u201ctest name\u201d, \u201cexpect failure\u201d, \u201clogin as\u201d,\n\u201curl\u201d, \u201cmethod\u201d, \u201cquerystring\u201d, \u201cpost body\u201d, \u201cexpect status\u201d,\n\u201cexpect header\u201d.  Then create a test file like:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">django.contrib.auth</span> <span class=\"kn\">import</span> <span class=\"n\">get_user_model</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.test</span> <span class=\"kn\">import</span> <span class=\"n\">TestCase</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">django_csv_tests</span> <span class=\"kn\">import</span> <span class=\"n\">generate_tests</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">TheTestCase</span><span class=\"p\">(</span><span class=\"n\">TestCase</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">setUp</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">get_user_model</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create_user</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"o\">=</span><span class=\"s1\">'john.doe'</span><span class=\"p\">,</span>\n                                                         <span class=\"n\">email</span><span class=\"o\">=</span><span class=\"s1\">'john@doe.com'</span><span class=\"p\">,</span>\n                                                         <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"s1\">'password'</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">csv_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">),</span> <span class=\"s1\">'tests.csv'</span><span class=\"p\">)</span>\n<span class=\"n\">generate_tests</span><span class=\"p\">(</span><span class=\"n\">csv_path</span><span class=\"p\">,</span> <span class=\"n\">TheTestCase</span><span class=\"p\">)</span>\n</pre>\n<p>You can define tests as a sequence of requests with associated assertions.  A\ntest is defined with a test name and one or more rows that describe requests to\nmake.  If a row does not have a test name it indicates that the request defined\non that row is part of the last named test.</p>\n<div id=\"column-values\">\n<h3>Column values</h3>\n<div id=\"test-name\">\n<h4>test name</h4>\n<p>A string used to name the test.</p>\n</div>\n<div id=\"expect-failure\">\n<h4>expect failure</h4>\n<p>A boolean used to indicated whether the test is expected to fail.  Any non-zero\nlength string indicates True.  An easy way is enter this in a spreadsheet is as\n\u201cx\u201d.</p>\n</div>\n<div id=\"login-as\">\n<h4>login as</h4>\n<p>A JSON encoded string that provides the username and password of the user to log\nin as.  This is passed as keyword arguments to\ndjango.contrib.auth.authenticate().  Example: {\u201cusername\u201d: \u201cjohn.doe\u201d,\n\u201cpassword\u201d: \u201cpassword\u201d}.</p>\n</div>\n<div id=\"url\">\n<h4>url</h4>\n<p>The URL that the request should be made to.</p>\n</div>\n<div id=\"method\">\n<h4>method</h4>\n<p>An HTTP method.  GET and POST are supported.</p>\n</div>\n<div id=\"querystring\">\n<h4>querystring</h4>\n<p>A JSON encoded string that contains querystring keys and values.  This becomes\n<tt>request.GET</tt>.</p>\n</div>\n<div id=\"post-body\">\n<h4>post body</h4>\n<p>A JSON encoded string that contains data to submit in a POST request.  This is\nused only if the method is POST.  This becomes <tt>request.POST</tt>.</p>\n</div>\n<div id=\"expect-status\">\n<h4>expect status</h4>\n<p>The HTTP status code expected for the response.</p>\n</div>\n<div id=\"expect-header\">\n<h4>expect header</h4>\n<p>A JSON encoded string that contains header keys and values expected in the\nresponse.  Example: A redirect response could have the header\n{\u201cLocation\u201d: \u201c<a href=\"http://testserver/new_location/\" rel=\"nofollow\">http://testserver/new_location/</a>\u201d}</p>\n</div>\n</div>\n</div>\n<div id=\"todo\">\n<h2>Todo</h2>\n<ul>\n<li>Implement \u201cexpect context\u201d, \u201cexpect session\u201d, and \u201cexpect\u201d directives.</li>\n</ul>\n</div>\n<div id=\"run-tests\">\n<h2>Run Tests</h2>\n<pre>./configure.sh\n<span class=\"nb\">source</span> venv/bin/activate\npython django_csv_tests/tests/manage.py <span class=\"nb\">test</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 1389549, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "47e45f124419793b3d87619655426b89", "sha256": "60e7a63c44e515885c2a7cb4cc7b86595a708d1b96a6378100b6629fb4f34649"}, "downloads": -1, "filename": "django_csv_tests-0.1.0.tar.gz", "has_sig": false, "md5_digest": "47e45f124419793b3d87619655426b89", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3987, "upload_time": "2015-01-03T20:23:44", "upload_time_iso_8601": "2015-01-03T20:23:44.101504Z", "url": "https://files.pythonhosted.org/packages/5d/a6/99d6bdff413663aac347e4b6a382127c8b8b1aaa03c214bb3e9c3e318cdf/django_csv_tests-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "3dc7c3dacc59eccd2b5c42b9bdd0bae9", "sha256": "e5616a6dc5d9c0af24f16b8f0c4eeb5733bea838219f4be2ecd87e1f0b26f81a"}, "downloads": -1, "filename": "django_csv_tests-0.1.1.tar.gz", "has_sig": false, "md5_digest": "3dc7c3dacc59eccd2b5c42b9bdd0bae9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3986, "upload_time": "2015-01-03T20:37:36", "upload_time_iso_8601": "2015-01-03T20:37:36.905712Z", "url": "https://files.pythonhosted.org/packages/f9/38/3282a579cfa227dfc675acb2e2d93c8dfdb6c1065f7c687f43a8dbc47f85/django_csv_tests-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "45387562b9b3c7f123212636d1135366", "sha256": "ac3b7342e753dc41f84e50abcd43727642666ed9fffb6f51ff033ae53778310f"}, "downloads": -1, "filename": "django_csv_tests-0.1.2.tar.gz", "has_sig": false, "md5_digest": "45387562b9b3c7f123212636d1135366", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5073, "upload_time": "2015-01-04T03:58:03", "upload_time_iso_8601": "2015-01-04T03:58:03.108485Z", "url": "https://files.pythonhosted.org/packages/81/e0/690ed8878d076188feeb31b9017303b5d042875e92e62ee2033840d939bb/django_csv_tests-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "9574a12611c87ff2376949477722d6c4", "sha256": "ee8ffb1a835382c6704800db8750a8565770d0b44ea6836546c025c6c1d9faec"}, "downloads": -1, "filename": "django_csv_tests-0.1.3.tar.gz", "has_sig": false, "md5_digest": "9574a12611c87ff2376949477722d6c4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5078, "upload_time": "2015-01-04T04:02:17", "upload_time_iso_8601": "2015-01-04T04:02:17.008304Z", "url": "https://files.pythonhosted.org/packages/1a/7a/048db3da609e2870d39c91ff4fa8a7546e62d782f5512c0c8db389babebc/django_csv_tests-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "a0151325180ef5d67ce6d246343d8fa1", "sha256": "5c1dd1016e0afe9ead78c7aa98fdc66d05a392e362780658b626a57b9eca7693"}, "downloads": -1, "filename": "django_csv_tests-0.1.4.tar.gz", "has_sig": false, "md5_digest": "a0151325180ef5d67ce6d246343d8fa1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5904, "upload_time": "2015-01-20T18:47:41", "upload_time_iso_8601": "2015-01-20T18:47:41.514858Z", "url": "https://files.pythonhosted.org/packages/44/d7/d5cf374f1fe58b747e551edbfdd5045c9cee9477340d7f6b9d9f5d6663db/django_csv_tests-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "af814c9239eade3a1527dceb2789c8d4", "sha256": "144a8220aa6a338d2afdfb141041ed253850d9e5415ff59de484f016f612cd11"}, "downloads": -1, "filename": "django_csv_tests-0.1.5.tar.gz", "has_sig": false, "md5_digest": "af814c9239eade3a1527dceb2789c8d4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6072, "upload_time": "2015-01-20T18:51:28", "upload_time_iso_8601": "2015-01-20T18:51:28.951991Z", "url": "https://files.pythonhosted.org/packages/fe/52/e301fe4153056a96df08c93e48544f61fa10fb685d27d8c6773fe84e86f4/django_csv_tests-0.1.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "af814c9239eade3a1527dceb2789c8d4", "sha256": "144a8220aa6a338d2afdfb141041ed253850d9e5415ff59de484f016f612cd11"}, "downloads": -1, "filename": "django_csv_tests-0.1.5.tar.gz", "has_sig": false, "md5_digest": "af814c9239eade3a1527dceb2789c8d4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6072, "upload_time": "2015-01-20T18:51:28", "upload_time_iso_8601": "2015-01-20T18:51:28.951991Z", "url": "https://files.pythonhosted.org/packages/fe/52/e301fe4153056a96df08c93e48544f61fa10fb685d27d8c6773fe84e86f4/django_csv_tests-0.1.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:36:45 2020"}