{"info": {"author": "Marshall Ward", "author_email": "cubex@marshallward.org", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Utilities"], "description": "=====\ncubex\n=====\n\n``cubex`` is a Python module for analysing CUBE (.cubex) profiles.\n\n\nQuick start guide\n=================\n\n``cubex`` is still a work in progress, but it is currently useable and the\nfollowing instructions should help you get started.\n\nTo create a new ``Cube`` object, open a new file.\n\n.. code:: python\n\n   >> import cubex\n   >> prof = cubex.open('profile.cubex')\n\nUse the ``show_metrics()`` function to list the available metrics.\n\n.. code:: python\n\n   >>> prof.show_metrics()\n   bytes_sent\n   visits\n   time\n   ...\n\nBy default, ``cubex`` does not load all available metrics into memory.  To load\nthe desired metric, say ``time``, use the ``read_data()`` function.\n\n.. code:: python\n\n   >> prof.read_data('time')\n\nThe ``Cube`` stores the call tree in a list, ``prof.calltrees``.  For most\nprograms, this will consist of a single entry.  For profiles containing\nmultiple executables (MPMD), each program's calltree will be an element in the\nlist.\n\nThe call tree can be printed using the ``print_calltree()`` function inside the\nprofile's calltree.\n\n.. code:: python\n\n   >> prof.calltrees[0].print_tree()\n\nThis displays each node of the call tree, indented by depth, and labeled with\nits corresponding region.\n\nAt this point, it helps if the user has some intuitive feel for the call tree\nin the profile.  (And if anyone has feedback on how to improve this, please\nsubmit feedback.)\n\nHaving said that, if one knows the function (or \"region\" in CUBE parlance) of\ninterest, then the data is accessed with the ``region`` property.\n\n.. code:: python\n\n   >> prof.regions[reg].cnodes\n   [<cubex.calltree.CallTree object at 0x7f4437892f90>,\n    <cubex.calltree.CallTree object at 0x7f4437539f10>,\n    ...\n   ]\n\nThis returns a list of each node (actually subtree) in the call tree where this\nfunction was called.\n\nTo distinguish between ``cnodes``, one can inspect its call tree (using\n``print_tree()``) or inspect its parent node.\n\n.. code:: python\n\n   >> cnode = prof.regions[reg].cnodes[0]\n   >> cnode.parent.region.name\n   'function_name_calling_cnode_'\n\nOne can also inspect the node index (``cnode.idx``) although this requires some\nknowledge of the tree itself, which can be checked using the CUBE graphical\nbrowser.\n\nFinally, to get the metric values at the target ``cnode``, access its\n``metrics`` property.\n\n.. code:: python\n\n   >> prof.regions[reg].cnodes[0].metrics['time']\n   (496.59532077590507, 291.106782542039, 496.5975198073004, ...)\n\nThis returns a list of the time measured in each computational unit, such as an\nMPI rank or OpenMP thread.\n\n\nNotes\n-----\n\n* Region names follow C conventions.  Fortran programs will typically convert\n  any function names to lower case and will append a ``_`` to the end of the\n  function name.  For example,  a function named ``GET_LAPLACIAN`` will be\n  stored as ``get_laplacian_``.\n\n  This is the usual convention, but other compilers may deviate from thisj\n  so it's recommended that you inspect the regions before accessing them.\n\n* Currently only Score-P output is supported in the ``main`` branch.  Scalasca\n  output is slightly different and currently does not work as well in\n  ``cubex``.\n\n  We have some internal versions that do work, but are not yet user-friendly\n  and would need a bit of a cleanup before releasing publicly.\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/marshallward/cubex", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "cubex", "package_url": "https://pypi.org/project/cubex/", "platform": "", "project_url": "https://pypi.org/project/cubex/", "project_urls": {"Homepage": "http://github.com/marshallward/cubex"}, "release_url": "https://pypi.org/project/cubex/0.1/", "requires_dist": null, "requires_python": "", "summary": "CUBE .cubex library parser", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><tt>cubex</tt> is a Python module for analysing CUBE (.cubex) profiles.</p>\n<div id=\"quick-start-guide\">\n<h2>Quick start guide</h2>\n<p><tt>cubex</tt> is still a work in progress, but it is currently useable and the\nfollowing instructions should help you get started.</p>\n<p>To create a new <tt>Cube</tt> object, open a new file.</p>\n<pre><span class=\"o\">&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">cubex</span>\n<span class=\"o\">&gt;&gt;</span> <span class=\"n\">prof</span> <span class=\"o\">=</span> <span class=\"n\">cubex</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s1\">'profile.cubex'</span><span class=\"p\">)</span>\n</pre>\n<p>Use the <tt>show_metrics()</tt> function to list the available metrics.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">prof</span><span class=\"o\">.</span><span class=\"n\">show_metrics</span><span class=\"p\">()</span>\n<span class=\"n\">bytes_sent</span>\n<span class=\"n\">visits</span>\n<span class=\"n\">time</span>\n<span class=\"o\">...</span>\n</pre>\n<p>By default, <tt>cubex</tt> does not load all available metrics into memory.  To load\nthe desired metric, say <tt>time</tt>, use the <tt>read_data()</tt> function.</p>\n<pre><span class=\"o\">&gt;&gt;</span> <span class=\"n\">prof</span><span class=\"o\">.</span><span class=\"n\">read_data</span><span class=\"p\">(</span><span class=\"s1\">'time'</span><span class=\"p\">)</span>\n</pre>\n<p>The <tt>Cube</tt> stores the call tree in a list, <tt>prof.calltrees</tt>.  For most\nprograms, this will consist of a single entry.  For profiles containing\nmultiple executables (MPMD), each program\u2019s calltree will be an element in the\nlist.</p>\n<p>The call tree can be printed using the <tt>print_calltree()</tt> function inside the\nprofile\u2019s calltree.</p>\n<pre><span class=\"o\">&gt;&gt;</span> <span class=\"n\">prof</span><span class=\"o\">.</span><span class=\"n\">calltrees</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">print_tree</span><span class=\"p\">()</span>\n</pre>\n<p>This displays each node of the call tree, indented by depth, and labeled with\nits corresponding region.</p>\n<p>At this point, it helps if the user has some intuitive feel for the call tree\nin the profile.  (And if anyone has feedback on how to improve this, please\nsubmit feedback.)</p>\n<p>Having said that, if one knows the function (or \u201cregion\u201d in CUBE parlance) of\ninterest, then the data is accessed with the <tt>region</tt> property.</p>\n<pre><span class=\"o\">&gt;&gt;</span> <span class=\"n\">prof</span><span class=\"o\">.</span><span class=\"n\">regions</span><span class=\"p\">[</span><span class=\"n\">reg</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">cnodes</span>\n<span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">cubex</span><span class=\"o\">.</span><span class=\"n\">calltree</span><span class=\"o\">.</span><span class=\"n\">CallTree</span> <span class=\"nb\">object</span> <span class=\"n\">at</span> <span class=\"mh\">0x7f4437892f90</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n <span class=\"o\">&lt;</span><span class=\"n\">cubex</span><span class=\"o\">.</span><span class=\"n\">calltree</span><span class=\"o\">.</span><span class=\"n\">CallTree</span> <span class=\"nb\">object</span> <span class=\"n\">at</span> <span class=\"mh\">0x7f4437539f10</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n <span class=\"o\">...</span>\n<span class=\"p\">]</span>\n</pre>\n<p>This returns a list of each node (actually subtree) in the call tree where this\nfunction was called.</p>\n<p>To distinguish between <tt>cnodes</tt>, one can inspect its call tree (using\n<tt>print_tree()</tt>) or inspect its parent node.</p>\n<pre><span class=\"o\">&gt;&gt;</span> <span class=\"n\">cnode</span> <span class=\"o\">=</span> <span class=\"n\">prof</span><span class=\"o\">.</span><span class=\"n\">regions</span><span class=\"p\">[</span><span class=\"n\">reg</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">cnodes</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;</span> <span class=\"n\">cnode</span><span class=\"o\">.</span><span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"n\">region</span><span class=\"o\">.</span><span class=\"n\">name</span>\n<span class=\"s1\">'function_name_calling_cnode_'</span>\n</pre>\n<p>One can also inspect the node index (<tt>cnode.idx</tt>) although this requires some\nknowledge of the tree itself, which can be checked using the CUBE graphical\nbrowser.</p>\n<p>Finally, to get the metric values at the target <tt>cnode</tt>, access its\n<tt>metrics</tt> property.</p>\n<pre><span class=\"o\">&gt;&gt;</span> <span class=\"n\">prof</span><span class=\"o\">.</span><span class=\"n\">regions</span><span class=\"p\">[</span><span class=\"n\">reg</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">cnodes</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">metrics</span><span class=\"p\">[</span><span class=\"s1\">'time'</span><span class=\"p\">]</span>\n<span class=\"p\">(</span><span class=\"mf\">496.59532077590507</span><span class=\"p\">,</span> <span class=\"mf\">291.106782542039</span><span class=\"p\">,</span> <span class=\"mf\">496.5975198073004</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">)</span>\n</pre>\n<p>This returns a list of the time measured in each computational unit, such as an\nMPI rank or OpenMP thread.</p>\n<div id=\"notes\">\n<h3>Notes</h3>\n<ul>\n<li><p>Region names follow C conventions.  Fortran programs will typically convert\nany function names to lower case and will append a <tt>_</tt> to the end of the\nfunction name.  For example,  a function named <tt>GET_LAPLACIAN</tt> will be\nstored as <tt>get_laplacian_</tt>.</p>\n<p>This is the usual convention, but other compilers may deviate from thisj\nso it\u2019s recommended that you inspect the regions before accessing them.</p>\n</li>\n<li><p>Currently only Score-P output is supported in the <tt>main</tt> branch.  Scalasca\noutput is slightly different and currently does not work as well in\n<tt>cubex</tt>.</p>\n<p>We have some internal versions that do work, but are not yet user-friendly\nand would need a bit of a cleanup before releasing publicly.</p>\n</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 3046693, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "dbce0292be33b605e5f871ab4dac3b98", "sha256": "a847b3eaca37cbb848247644301c6c9d5cfa22be43f702360838cf84e4c8034e"}, "downloads": -1, "filename": "cubex-0.1.tar.gz", "has_sig": false, "md5_digest": "dbce0292be33b605e5f871ab4dac3b98", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9736, "upload_time": "2017-07-25T07:13:55", "upload_time_iso_8601": "2017-07-25T07:13:55.211806Z", "url": "https://files.pythonhosted.org/packages/a0/20/5d6dc9295a96a9d356ab43f5ddced413d384bb7f5ef865dc8986ce71b5a1/cubex-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "dbce0292be33b605e5f871ab4dac3b98", "sha256": "a847b3eaca37cbb848247644301c6c9d5cfa22be43f702360838cf84e4c8034e"}, "downloads": -1, "filename": "cubex-0.1.tar.gz", "has_sig": false, "md5_digest": "dbce0292be33b605e5f871ab4dac3b98", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9736, "upload_time": "2017-07-25T07:13:55", "upload_time_iso_8601": "2017-07-25T07:13:55.211806Z", "url": "https://files.pythonhosted.org/packages/a0/20/5d6dc9295a96a9d356ab43f5ddced413d384bb7f5ef865dc8986ce71b5a1/cubex-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:41:30 2020"}