{"info": {"author": "Paul Traina", "author_email": "bulk+pypi@pst.org", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Environment :: Web Environment", "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)", "Natural Language :: English", "Operating System :: POSIX", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Topic :: Database :: Front-Ends", "Topic :: Games/Entertainment"], "description": "===========\nIntel Times\n===========\n\nThis is a simple module for managing checkpoint and cycle information\nfor Niantic Labs Ingress game.\n\nIt includes a command-line front end and a flask based daemon for\nresponding to Slack slash commands.\n\nNiantic Labs is not responsible for this program, and neither endorses\nnor supports it.  The author is not associated with Niantic Labs and\nmakes no representations.\n\n\nInstallation\n------------\n\n    pip install inteltime\n\nAfter installing, you will end up with a set of applications (mostly used for\ntesting) and Slack:\n\n- `inteltime` - command line utility for testing\n- `inteltime-flask` - stantalone (for debugging only) flask daemon for Slack\n\nUse\n---\n\nUse the source, or try the `inteltime` test-jig command.  This is mainly an\nAPI, the slack plugin and test-jig are just fun examples.\n\nSlack Use\n---------\n\nThere is rudimentary natural language time/date processing available, and\ntimezone support.  Timezones are separated by commas.\n\nBy default, checkpoint will give you the next checkpoint, and cycle will give\nyou the current cycle.\n\n::\n\n    /checkpoint\n    /checkpoint on today, America/Los_Angeles\n    /checkpoint ,UTC\n    /checkpoint 2016-05-04,Asia/Bejing\n\n    /cycle\n    /cycle next Monday,UTC\n\n\n\nApache with mod_wsgi for Slack\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nConfigure Apache with HTTPS and valid (not self-signed) SSL certificates.\nSlack requires that your certificates are not self-signed.\n\nConfigure Apache to serve WSGI files out of of a particular directory,\nin this example, we're using `/srv/prod/wsgi`\n\n::\n\n    WSGIScriptAlias /inteltime /srv/prod/wsgi/inteltime.wsgi\n    <Directory \"/srv/prod/wsgi\">\n\tRequire all granted\n        SSLOptions +StdEnvVars\n\tOrder allow,deny\n\tAllow from all\n    </Directory>\n\nInstall mod_wsgi and copy the .wsgi file in this module to the directory\nwhere you decided to serve .wsgi files (as above).\n\n::\n\n    sudo pip install mod_wsgi\n    sudo a2enmod mod_wsgi\n    cp inteltime/examples/inteltime.wsgi /srv/prod/wsgi/inteltime.wsgi\n\nRestart apache with the new configuration and modules.\n\n::\n\n    systemctl apache2 restart\n\n\nSlack\n~~~~~\n\nCreate a two slack custom integration slash commands.\n(See https://yourteam.slack.com/apps/manage/custom-integrations)\n\n::\n\n    command: /checkpoint\n    url: https://address.of.your.server/inteltime/checkpoint\n    method: POST\n\n    command: /cycle\n    url: https://address.of.your.server/inteltime/cycle\n    method: POST\n\nWhen someone uses the ``/checkpoint`` slash-command, a HTTPS post will be issued\nto the URL you specified, which, in turn, will cause Apache to execute\nthe shim script, which will, in turn, execute the wsgi module.\n\n\nChangelog\n=========\n\n1.0.4 - Fri May  6 09:54:39 PDT 2016\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n- Checkpoint number was off by one.\n- Add home page url to packaging.\n- Improve documentation.\n- Pylint cleanup.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/pleasantone/intel-times", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "inteltime", "package_url": "https://pypi.org/project/inteltime/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/inteltime/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://gitlab.com/pleasantone/intel-times"}, "release_url": "https://pypi.org/project/inteltime/1.0.5/", "requires_dist": null, "requires_python": null, "summary": "Intel checkpoint and cycle calculator for Niantic Lab's Ingress(tm)", "version": "1.0.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This is a simple module for managing checkpoint and cycle information\nfor Niantic Labs Ingress game.</p>\n<p>It includes a command-line front end and a flask based daemon for\nresponding to Slack slash commands.</p>\n<p>Niantic Labs is not responsible for this program, and neither endorses\nnor supports it.  The author is not associated with Niantic Labs and\nmakes no representations.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<blockquote>\npip install inteltime</blockquote>\n<p>After installing, you will end up with a set of applications (mostly used for\ntesting) and Slack:</p>\n<ul>\n<li><cite>inteltime</cite> - command line utility for testing</li>\n<li><cite>inteltime-flask</cite> - stantalone (for debugging only) flask daemon for Slack</li>\n</ul>\n</div>\n<div id=\"use\">\n<h2>Use</h2>\n<p>Use the source, or try the <cite>inteltime</cite> test-jig command.  This is mainly an\nAPI, the slack plugin and test-jig are just fun examples.</p>\n</div>\n<div id=\"slack-use\">\n<h2>Slack Use</h2>\n<p>There is rudimentary natural language time/date processing available, and\ntimezone support.  Timezones are separated by commas.</p>\n<p>By default, checkpoint will give you the next checkpoint, and cycle will give\nyou the current cycle.</p>\n<pre>/checkpoint\n/checkpoint on today, America/Los_Angeles\n/checkpoint ,UTC\n/checkpoint 2016-05-04,Asia/Bejing\n\n/cycle\n/cycle next Monday,UTC\n</pre>\n<div id=\"apache-with-mod-wsgi-for-slack\">\n<h3>Apache with mod_wsgi for Slack</h3>\n<p>Configure Apache with HTTPS and valid (not self-signed) SSL certificates.\nSlack requires that your certificates are not self-signed.</p>\n<p>Configure Apache to serve WSGI files out of of a particular directory,\nin this example, we\u2019re using <cite>/srv/prod/wsgi</cite></p>\n<pre>WSGIScriptAlias /inteltime /srv/prod/wsgi/inteltime.wsgi\n&lt;Directory \"/srv/prod/wsgi\"&gt;\n    Require all granted\n    SSLOptions +StdEnvVars\n    Order allow,deny\n    Allow from all\n&lt;/Directory&gt;\n</pre>\n<p>Install mod_wsgi and copy the .wsgi file in this module to the directory\nwhere you decided to serve .wsgi files (as above).</p>\n<pre>sudo pip install mod_wsgi\nsudo a2enmod mod_wsgi\ncp inteltime/examples/inteltime.wsgi /srv/prod/wsgi/inteltime.wsgi\n</pre>\n<p>Restart apache with the new configuration and modules.</p>\n<pre>systemctl apache2 restart\n</pre>\n</div>\n<div id=\"slack\">\n<h3>Slack</h3>\n<p>Create a two slack custom integration slash commands.\n(See <a href=\"https://yourteam.slack.com/apps/manage/custom-integrations\" rel=\"nofollow\">https://yourteam.slack.com/apps/manage/custom-integrations</a>)</p>\n<pre>command: /checkpoint\nurl: https://address.of.your.server/inteltime/checkpoint\nmethod: POST\n\ncommand: /cycle\nurl: https://address.of.your.server/inteltime/cycle\nmethod: POST\n</pre>\n<p>When someone uses the <tt>/checkpoint</tt> slash-command, a HTTPS post will be issued\nto the URL you specified, which, in turn, will cause Apache to execute\nthe shim script, which will, in turn, execute the wsgi module.</p>\n<div id=\"changelog\">\n<h4>Changelog</h4>\n</div>\n</div>\n<div id=\"fri-may-6-09-54-39-pdt-2016\">\n<h3>1.0.4 - Fri May  6 09:54:39 PDT 2016</h3>\n<ul>\n<li>Checkpoint number was off by one.</li>\n<li>Add home page url to packaging.</li>\n<li>Improve documentation.</li>\n<li>Pylint cleanup.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2215332, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "0a45083a247429c5db4e418f9ff46df3", "sha256": "1add811e5cc20a578bd8f3dd911ef507bb1746f9f33b1cf11d2181081e6c1eca"}, "downloads": -1, "filename": "inteltime-1.0.0.tar.gz", "has_sig": false, "md5_digest": "0a45083a247429c5db4e418f9ff46df3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18083, "upload_time": "2016-04-30T06:03:47", "upload_time_iso_8601": "2016-04-30T06:03:47.714193Z", "url": "https://files.pythonhosted.org/packages/5b/ea/2072dc9a5501d55dcd319685d1ce1be28a7ac73a5340aa226baed466815a/inteltime-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "ea952effc66ae72c002297542facb2ae", "sha256": "d8fb60689a111104e268f2bc91b9e501154ba6d2361db1c62719b84ca37efb6f"}, "downloads": -1, "filename": "inteltime-1.0.1.tar.gz", "has_sig": false, "md5_digest": "ea952effc66ae72c002297542facb2ae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18074, "upload_time": "2016-05-01T20:49:44", "upload_time_iso_8601": "2016-05-01T20:49:44.776055Z", "url": "https://files.pythonhosted.org/packages/83/bf/1f9a8ec51a825b4b27aaf28be6927af0461536ee13db68077161c8284702/inteltime-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "134628ffe5fac91fd7f2c78bf8fad5f8", "sha256": "f47e64fe98ee26b2e5398d2411cc88a04b8ddd257c1e4b96616c4aef6132a3e2"}, "downloads": -1, "filename": "inteltime-1.0.2.tar.gz", "has_sig": false, "md5_digest": "134628ffe5fac91fd7f2c78bf8fad5f8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18148, "upload_time": "2016-05-02T23:26:39", "upload_time_iso_8601": "2016-05-02T23:26:39.012294Z", "url": "https://files.pythonhosted.org/packages/b4/f0/8f19925b0cec65c3b128eb639bd5b5178ea55e1379a5be839f9169b5d3d0/inteltime-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "b95f8d509f1f52ebfd4775a70212a46d", "sha256": "d82b2c4545acf96d0d860a2a56239ded3304994b44ab9c0d732179be8a1831b0"}, "downloads": -1, "filename": "inteltime-1.0.3.tar.gz", "has_sig": false, "md5_digest": "b95f8d509f1f52ebfd4775a70212a46d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18178, "upload_time": "2016-05-05T18:54:49", "upload_time_iso_8601": "2016-05-05T18:54:49.624172Z", "url": "https://files.pythonhosted.org/packages/ba/a5/6dd955525e57f6536ffa88fb284d09f6027d88883c1a92e4becef81549d5/inteltime-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "25548d1f9066505f571e0c5a2440a080", "sha256": "311ac443e0ed83468cc4bb9ca389870c36c229093640ddb5323a71d0a7dd538b"}, "downloads": -1, "filename": "inteltime-1.0.4.tar.gz", "has_sig": false, "md5_digest": "25548d1f9066505f571e0c5a2440a080", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18901, "upload_time": "2016-05-06T17:19:31", "upload_time_iso_8601": "2016-05-06T17:19:31.109832Z", "url": "https://files.pythonhosted.org/packages/d8/3b/67611b9b1fd3952c1c0789aeef3d75ec768d4fe8c44f94b71849b76f6d33/inteltime-1.0.4.tar.gz", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "0e44bd52429d848ae0ba3a9a62205306", "sha256": "78a2fed8ce818cf969f7196527d1bad7729aa41640042d709540f3a79a795a2f"}, "downloads": -1, "filename": "inteltime-1.0.5.tar.gz", "has_sig": false, "md5_digest": "0e44bd52429d848ae0ba3a9a62205306", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19122, "upload_time": "2016-07-11T21:56:45", "upload_time_iso_8601": "2016-07-11T21:56:45.441842Z", "url": "https://files.pythonhosted.org/packages/8f/11/c6f26501d98fc7c4479147575680f5769e96f8a06ed34cc6772167fe6009/inteltime-1.0.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0e44bd52429d848ae0ba3a9a62205306", "sha256": "78a2fed8ce818cf969f7196527d1bad7729aa41640042d709540f3a79a795a2f"}, "downloads": -1, "filename": "inteltime-1.0.5.tar.gz", "has_sig": false, "md5_digest": "0e44bd52429d848ae0ba3a9a62205306", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19122, "upload_time": "2016-07-11T21:56:45", "upload_time_iso_8601": "2016-07-11T21:56:45.441842Z", "url": "https://files.pythonhosted.org/packages/8f/11/c6f26501d98fc7c4479147575680f5769e96f8a06ed34cc6772167fe6009/inteltime-1.0.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:55:31 2020"}