{"info": {"author": "Anirban Roy Das", "author_email": "anirban.nick@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: Implementation :: CPython"], "description": "rabbitChat\n===========\n\nA Chat-Server/Chat-System based on AMQP protocol(RabbitMQ Message Broker)\n\nDocumentation\n--------------\n\n**Link :** http://rabbitchat.readthedocs.io/en/latest/index.html\n\n\n\n\nDetails\n--------\n\n\n:Author: Anirban Roy Das\n:Email: anirban.nick@gmail.com\n:Copyright(C): 2016, Anirban Roy Das <anirban.nick@gmail.com>\n\nCheck ``rabbitChat/LICENSE`` file for full Copyright notice.\n\n\n\nOverview\n---------\n\nrabbitChat is a very simple Chat Server which can be set up locally to chat in your LAN. It supports both **Public Chat** among all participants connected simultaneously at a particular time and also **Private Chat** betweent those individual participants.\n\nIt uses the `AMQP <https://www.amqp.org/>`_  protocol to implement the real time message passing system. **AMQP** is implemented in many languages and in many softwares, once of such is `RabbitMQ <https://www.rabbitmq.com/>`_ , which is a message broker implementing the `AMQP <https://www.amqp.org/>`_ protocol.\n\nThe connection is created using the `sockjs <https://github.com/sockjs/sockjs-client>`_ protocol. **SockJS** is implemented in many languages, primarily in Javascript to talk to the servers in real time, which tries to create a duplex bi-directional connection between the **Client(browser)** and the **Server**. Ther server should also implement the **sockjs** protocol. Thus using the  `sockjs-tornado <https://github.com/MrJoes/sockjs-tornado>`_ library which exposes the **sockjs** protocol in `Tornado <http://www.tornadoweb.org/>`_ server.\n\nIt first tries to create a `Websocket <https://en.wikipedia.org/wiki/WebSocket>`_ connection, and if it fails then it fallbacks to other transport mechanisms, such as **Ajax**, **long polling**, etc. After the connection is established, the tornado server**(sockjs-tornado)** connects to **rabbitMQ** via AMQP protocol using the **AMQP Python Client Library**, `Pika <https://pypi.python.org/pypi/pika>`_. \n\nThus the connection is *web-browser* to *tornado* to *rabbitMQ* and vice versa.\n\n\n\nTechnical Specs\n----------------\n\n\n:sockjs-client: Advanced Websocket Javascript Client\n:Tornado: Async Python Web Library + Web Server\n:sockjs-tornado: SockJS websocket server implementation for Tornado\n:AMQP: Advance Message Queuing Protocol used in Message Oriented Middleware\n:pika: AMQP Python Client Library\n:RabbitMQ: A Message Broker implementing AMQP\n\n\n\nFeatures\n---------\n\n* Public chat\n* Shows who joined and who left\n* Shows number of people online\n* Shows who is typing and who is not\n* Join/Leave chat room features\n\n\n\n\nInstallation\n------------\n\nPrerequisites\n~~~~~~~~~~~~~\n\n1. python 2.7+\n2. tornado\n3. sockjs-tornado\n4. sockjs-client\n5. pika\n6. rabbitMQ\n\n\nInstall\n~~~~~~~\n::\n\n        $ pip install rabbitChat\n\nIf above dependencies do not get installed by the above command, then use the below steps to install them one by one.\n\n **Step 1 - Install pip**\n\n Follow the below methods for installing pip. One of them may help you to install pip in your system.\n\n * **Method 1 -**  https://pip.pypa.io/en/stable/installing/\n\n * **Method 2 -** http://ask.xmodulo.com/install-pip-linux.html\n\n * **Method 3 -** If you installed python on MAC OS X via ``brew install python``, then **pip** is already installed along with python.\n\n\n **Step 2 - Install tornado**\n ::\n\n         $ pip install tornado\n\n **Step 3 - Install sockjs-tornado**\n ::\n\n         $ pip install sockjs-tornado\n\n\n **Step 4 - Install pika**\n ::\n\n         $ pip install pika\n\n **Step 5 - Install RabbitMQ**\n \n * *For* ``Mac`` *Users*\n \n   1. Brew Install RabbitMQ\n   ::\n\n         $ brew install rabbitmq\n\n   2. Configure RabbitMq, follow this `link <https://www.rabbitmq.com/install-homebrew.html>`_, this `one <https://www.rabbitmq.com/install-standalone-mac.html>`_ and  `this <https://www.rabbitmq.com/configure.html>`_.\n\n * *For* ``Ubuntu/Linux`` *Users*\n\n   1. Enable RabbitMQ application repository\n   ::\n           \n           $ echo \"deb http://www.rabbitmq.com/debian/ testing main\" >> /etc/apt/sources.list\n\n   2. Add the verification key for the package\n   ::\n\n         $ wget -o http://www.rabbitmq.com/rabbitmq-signing-key-public.asc | sudo apt-key add -\n\n   3. Update the sources with our new addition from above\n   :: \n\n         $ apt-get update\n\n  \n   4. And finally, download and install RabbitMQ\n   ::\n\n         $ sudo apt-get install rabbitmq-server\n\n \n\n   5. Configure RabbitMQ, follow this `link <http://www.rabbitmq.com/install-debian.html>`_, this `one <https://www.rabbitmq.com/configure.html>`_  and `this <https://www.digitalocean.com/community/tutorials/how-to-install-and-manage-rabbitmq>`_. \n\n\n\nUsage\n-----\n\nAfter having installed rabbitChat, just the run the following commands to use it:\n\n* **RabbitMQ Server**\n  \n  1. *For* ``Mac`` *Users*\n  ::\n          \n          # start normally\n          $ rabbitmq-server\n           \n          # If you want to run in background\n          $ rabbitmq-server --detached \n\n          # start using brew rervices (doesn't work with tmux)\n          $ brew services rabbitmq start\n\n\n  2. *For* ``Ubuntu/LInux`` *Users*\n  ::\n\n          # start normally\n          $ rabbitmq-server\n\n          # If you want to run in background\n          $ rabbitmq-server --detached\n\n          # To start using service\n          $ service rabbitmq-server start\n\n          # To stop using service\n          $ service rabbitmq-server stop\n          \n          # To restart using service\n          $ service rabbitmq-server restart\n          \n          # To check the status\n          $ service rabbitmq-server status\n\n\n\n* **Start rabbitChat Server**\n  ::\n\n          $ rabbitChat [options]\n\n  - **Options**\n\n    :--port: Port number where the chat server will start\n\n\n  - **Example**\n    ::\n\n          $ rabbitChat --port=9191\n\n  \n* **Stop rabbitChat Server**\n\n\n\n  Click ``Ctrl+C`` to stop the server.\n\n\n\nTodo\n-----\n\n1. Add Private Chat functionality.\n   \n2. Manage Presence Management, sent, delivered acknowledgements.\n\n3. Message Persistence and delivery of messages to offline clinets.\n\n4. Add Blog post regarding this topic.", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/anirbanroydas/rabbitChat", "keywords": "chat server amqp protocol rabbitmq message broker via sockjs websocket tornado with sockjs-tornado and amqp python client library Pika", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "rabbitChat", "package_url": "https://pypi.org/project/rabbitChat/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/rabbitChat/", "project_urls": {"Homepage": "https://github.com/anirbanroydas/rabbitChat"}, "release_url": "https://pypi.org/project/rabbitChat/1.0.0/", "requires_dist": null, "requires_python": "", "summary": "A Chat Server based on AMQP using RabbitMQ message broker implementing AMQP, websocket, sockjs, sockjs-tornado, tornado, and amqp python client library, Pika", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            rabbitChat<br>===========<br><br>A Chat-Server/Chat-System based on AMQP protocol(RabbitMQ Message Broker)<br><br>Documentation<br>--------------<br><br>**Link :** http://rabbitchat.readthedocs.io/en/latest/index.html<br><br><br><br><br>Details<br>--------<br><br><br>:Author: Anirban Roy Das<br>:Email: anirban.nick@gmail.com<br>:Copyright(C): 2016, Anirban Roy Das &lt;anirban.nick@gmail.com&gt;<br><br>Check ``rabbitChat/LICENSE`` file for full Copyright notice.<br><br><br><br>Overview<br>---------<br><br>rabbitChat is a very simple Chat Server which can be set up locally to chat in your LAN. It supports both **Public Chat** among all participants connected simultaneously at a particular time and also **Private Chat** betweent those individual participants.<br><br>It uses the `AMQP &lt;https://www.amqp.org/&gt;`_  protocol to implement the real time message passing system. **AMQP** is implemented in many languages and in many softwares, once of such is `RabbitMQ &lt;https://www.rabbitmq.com/&gt;`_ , which is a message broker implementing the `AMQP &lt;https://www.amqp.org/&gt;`_ protocol.<br><br>The connection is created using the `sockjs &lt;https://github.com/sockjs/sockjs-client&gt;`_ protocol. **SockJS** is implemented in many languages, primarily in Javascript to talk to the servers in real time, which tries to create a duplex bi-directional connection between the **Client(browser)** and the **Server**. Ther server should also implement the **sockjs** protocol. Thus using the  `sockjs-tornado &lt;https://github.com/MrJoes/sockjs-tornado&gt;`_ library which exposes the **sockjs** protocol in `Tornado &lt;http://www.tornadoweb.org/&gt;`_ server.<br><br>It first tries to create a `Websocket &lt;https://en.wikipedia.org/wiki/WebSocket&gt;`_ connection, and if it fails then it fallbacks to other transport mechanisms, such as **Ajax**, **long polling**, etc. After the connection is established, the tornado server**(sockjs-tornado)** connects to **rabbitMQ** via AMQP protocol using the **AMQP Python Client Library**, `Pika &lt;https://pypi.python.org/pypi/pika&gt;`_. <br><br>Thus the connection is *web-browser* to *tornado* to *rabbitMQ* and vice versa.<br><br><br><br>Technical Specs<br>----------------<br><br><br>:sockjs-client: Advanced Websocket Javascript Client<br>:Tornado: Async Python Web Library + Web Server<br>:sockjs-tornado: SockJS websocket server implementation for Tornado<br>:AMQP: Advance Message Queuing Protocol used in Message Oriented Middleware<br>:pika: AMQP Python Client Library<br>:RabbitMQ: A Message Broker implementing AMQP<br><br><br><br>Features<br>---------<br><br>* Public chat<br>* Shows who joined and who left<br>* Shows number of people online<br>* Shows who is typing and who is not<br>* Join/Leave chat room features<br><br><br><br><br>Installation<br>------------<br><br>Prerequisites<br>~~~~~~~~~~~~~<br><br>1. python 2.7+<br>2. tornado<br>3. sockjs-tornado<br>4. sockjs-client<br>5. pika<br>6. rabbitMQ<br><br><br>Install<br>~~~~~~~<br>::<br><br>        $ pip install rabbitChat<br><br>If above dependencies do not get installed by the above command, then use the below steps to install them one by one.<br><br> **Step 1 - Install pip**<br><br> Follow the below methods for installing pip. One of them may help you to install pip in your system.<br><br> * **Method 1 -**  https://pip.pypa.io/en/stable/installing/<br><br> * **Method 2 -** http://ask.xmodulo.com/install-pip-linux.html<br><br> * **Method 3 -** If you installed python on MAC OS X via ``brew install python``, then **pip** is already installed along with python.<br><br><br> **Step 2 - Install tornado**<br> ::<br><br>         $ pip install tornado<br><br> **Step 3 - Install sockjs-tornado**<br> ::<br><br>         $ pip install sockjs-tornado<br><br><br> **Step 4 - Install pika**<br> ::<br><br>         $ pip install pika<br><br> **Step 5 - Install RabbitMQ**<br> <br> * *For* ``Mac`` *Users*<br> <br>   1. Brew Install RabbitMQ<br>   ::<br><br>         $ brew install rabbitmq<br><br>   2. Configure RabbitMq, follow this `link &lt;https://www.rabbitmq.com/install-homebrew.html&gt;`_, this `one &lt;https://www.rabbitmq.com/install-standalone-mac.html&gt;`_ and  `this &lt;https://www.rabbitmq.com/configure.html&gt;`_.<br><br> * *For* ``Ubuntu/Linux`` *Users*<br><br>   1. Enable RabbitMQ application repository<br>   ::<br>           <br>           $ echo \"deb http://www.rabbitmq.com/debian/ testing main\" &gt;&gt; /etc/apt/sources.list<br><br>   2. Add the verification key for the package<br>   ::<br><br>         $ wget -o http://www.rabbitmq.com/rabbitmq-signing-key-public.asc | sudo apt-key add -<br><br>   3. Update the sources with our new addition from above<br>   :: <br><br>         $ apt-get update<br><br>  <br>   4. And finally, download and install RabbitMQ<br>   ::<br><br>         $ sudo apt-get install rabbitmq-server<br><br> <br><br>   5. Configure RabbitMQ, follow this `link &lt;http://www.rabbitmq.com/install-debian.html&gt;`_, this `one &lt;https://www.rabbitmq.com/configure.html&gt;`_  and `this &lt;https://www.digitalocean.com/community/tutorials/how-to-install-and-manage-rabbitmq&gt;`_. <br><br><br><br>Usage<br>-----<br><br>After having installed rabbitChat, just the run the following commands to use it:<br><br>* **RabbitMQ Server**<br>  <br>  1. *For* ``Mac`` *Users*<br>  ::<br>          <br>          # start normally<br>          $ rabbitmq-server<br>           <br>          # If you want to run in background<br>          $ rabbitmq-server --detached <br><br>          # start using brew rervices (doesn't work with tmux)<br>          $ brew services rabbitmq start<br><br><br>  2. *For* ``Ubuntu/LInux`` *Users*<br>  ::<br><br>          # start normally<br>          $ rabbitmq-server<br><br>          # If you want to run in background<br>          $ rabbitmq-server --detached<br><br>          # To start using service<br>          $ service rabbitmq-server start<br><br>          # To stop using service<br>          $ service rabbitmq-server stop<br>          <br>          # To restart using service<br>          $ service rabbitmq-server restart<br>          <br>          # To check the status<br>          $ service rabbitmq-server status<br><br><br><br>* **Start rabbitChat Server**<br>  ::<br><br>          $ rabbitChat [options]<br><br>  - **Options**<br><br>    :--port: Port number where the chat server will start<br><br><br>  - **Example**<br>    ::<br><br>          $ rabbitChat --port=9191<br><br>  <br>* **Stop rabbitChat Server**<br><br><br><br>  Click ``Ctrl+C`` to stop the server.<br><br><br><br>Todo<br>-----<br><br>1. Add Private Chat functionality.<br>   <br>2. Manage Presence Management, sent, delivered acknowledgements.<br><br>3. Message Persistence and delivery of messages to offline clinets.<br><br>4. Add Blog post regarding this topic.\n          </div>"}, "last_serial": 2122692, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "ad015fefd877624e3ede6146af58834b", "sha256": "c05cfe775f9998da2c332fb04d56b3c1d2805caabb5297c7606774c2b43d9da9"}, "downloads": -1, "filename": "rabbitChat-1.0.0-py2-none-any.whl", "has_sig": false, "md5_digest": "ad015fefd877624e3ede6146af58834b", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 35519, "upload_time": "2016-05-18T23:18:46", "upload_time_iso_8601": "2016-05-18T23:18:46.833524Z", "url": "https://files.pythonhosted.org/packages/2f/62/ba89bbfcc0006b4e605f12365b0ae3b7d4541e000cbb34b4b6dad0fffadc/rabbitChat-1.0.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "999d920fb03d9d4b8c5e0ac80d47b626", "sha256": "47d969ff536f1fb752c7ec0e7edaf445452a7f75eed7f28cabecb6de540886ed"}, "downloads": -1, "filename": "rabbitChat-1.0.0.tar.gz", "has_sig": false, "md5_digest": "999d920fb03d9d4b8c5e0ac80d47b626", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1197905, "upload_time": "2016-05-18T23:17:28", "upload_time_iso_8601": "2016-05-18T23:17:28.956278Z", "url": "https://files.pythonhosted.org/packages/d2/e1/14334ae23d1716227615ad68c85010236aaf5dfb2ac524cf1621a5c89d95/rabbitChat-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ad015fefd877624e3ede6146af58834b", "sha256": "c05cfe775f9998da2c332fb04d56b3c1d2805caabb5297c7606774c2b43d9da9"}, "downloads": -1, "filename": "rabbitChat-1.0.0-py2-none-any.whl", "has_sig": false, "md5_digest": "ad015fefd877624e3ede6146af58834b", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 35519, "upload_time": "2016-05-18T23:18:46", "upload_time_iso_8601": "2016-05-18T23:18:46.833524Z", "url": "https://files.pythonhosted.org/packages/2f/62/ba89bbfcc0006b4e605f12365b0ae3b7d4541e000cbb34b4b6dad0fffadc/rabbitChat-1.0.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "999d920fb03d9d4b8c5e0ac80d47b626", "sha256": "47d969ff536f1fb752c7ec0e7edaf445452a7f75eed7f28cabecb6de540886ed"}, "downloads": -1, "filename": "rabbitChat-1.0.0.tar.gz", "has_sig": false, "md5_digest": "999d920fb03d9d4b8c5e0ac80d47b626", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1197905, "upload_time": "2016-05-18T23:17:28", "upload_time_iso_8601": "2016-05-18T23:17:28.956278Z", "url": "https://files.pythonhosted.org/packages/d2/e1/14334ae23d1716227615ad68c85010236aaf5dfb2ac524cf1621a5c89d95/rabbitChat-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:08:09 2020"}