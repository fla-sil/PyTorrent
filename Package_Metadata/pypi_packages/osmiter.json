{"info": {"author": "Miko\u0142aj Kuranowski", "author_email": "mkuranowski@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3 :: Only", "Topic :: Scientific/Engineering :: GIS", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# osmiter\n\nA simple library for parsing OSM data.\nSupports simple OSM XML files as well as OSM GZ, OSM BZ2 and OSM PBF.\n\nPlease be aware that osmiter uses Google's [protobuf](https://pypi.org/project/protobuf/) library,\nwritten in pure Python, which isn't particularly fast.\n\n\n## Example Usage\n\n```python\nimport osmiter\n\nshop_count = 0\n\nfor feature in osmiter.iter_from_osm(\"some_osm_file.osm\"):\n    if feature[\"type\"] == \"node\" and \"shop\" in feature[\"tag\"]:\n        shop_count += 1\n\nprint(f\"this osm file containes {shop_count} shop nodes\")\n```\n\n## What is osmiter generating?\n\nFor each feature (node/way/relation) it yields a dict containing element attributes\n(like `id`, `lat` or `timestamp`) and 2 additional items: key `\"type\"` holding `\"node\"/\"way\"/\"relation\"`\nand key `\"tag\"` holding a dict with feature tags (this dict may be empty).\n\nAdditionally nodes will contain keys `\"lat\"` and `\"lon\"` with node coordinates,\nways will contain key `\"nd\"` with a list of all node_ids references by this way,\nand relations contain a key `\"member\"` with a list of dicts of each member's attributes.\n\nAlmost all attributes are returned as strings with the exception for:\n- `id`, `ref`, `version`, `changeset`, `uid` and `changeset_count` \u2192 int\n- `lat`, `lon` \u2192 float\n- `open` and `visible` \u2192 bool\n- `timestamp` \u2192 [aware](https://docs.python.org/3/library/datetime.html#aware-and-naive-objects) [datetime.datetime](https://docs.python.org/3/library/datetime.html#datetime-objects) item.\n\n\n#### Data validation\nosmiter preforms almost no data validation, so it is possible to recieve ways with no nodes,\nrelations with no members, empty tag values, invalid coordinates, references to non-existing items,\nor duplicate ids\u203b.\n\nHowever, several data assumptions are made:\n1. Each feature has an `id` attribute.  \n   (\u203b) For OSM PBF files, if an object is missing an id `-1` will be assigned, per the osmformat.proto definition.\n   This can result in multiple objects with an id equal to `-1`.\n2. Each node has to have both `lat` and `lon` defined.\n3. Every attribute defined in the table on attribute type conversion has to be convertible to its type.  \n   So, `id == 0x1453`, `changeset_count == AAAAAA`, `ref == 12.433` or `lat == 1.23E+10` will cause an exception;  \n   `timestamp` value has to be either ISO8601-compliant or epoch time represented by an integer.\n4. Boolean atributes are only considered truthy if they're set to `true` (case-insensitive).\n   Values `1`, `on`, `yes`, `\uff34\uff32\uff35\uff25` will all evaluate to False.\n\n#### Minimum requirements for each element\n\nBare-minimum node:\n```\n{\n    \"id\": int,\n    \"type\": \"node\",\n    \"lat\": float,\n    \"lon\": float,\n    \"tag\": Dict[str, str], # May be empty\n}\n```\n\nBare-minimum way:\n```\n{\n    \"id\": int,\n    \"type\": \"way\",\n    \"tag\": Dict[str, str], # May be empty\n    \"nd\": List[int],\n}\n```\n\nBare-minimum relation:\n```\n{\n    \"id\": int,\n    \"type\": \"relation\",\n    \"tag\": Dict[str, str], # May be empty\n    \"member\": List[ dict ]\n}\n```\n\n\n#### Example elements\n\nSee the corresponding [OSM XML examples](https://wiki.openstreetmap.org/wiki/OSM_XML).\n\n```\n{\n    \"type\": \"node\",\n    \"tag\": {}\n    \"id\": 298887269,\n    \"lat\": 54.0901746,\n    \"lon\": 12.2482632,\n    \"user\": \"SvenHRO\",\n    \"uid\": 46882,\n    \"visible\": True,\n    \"version\": 1,\n    \"changeset\": 676636,\n    \"timestamp\": datetime.datetime(2008, 9, 21, 21, 37, 45, tzinfo=datetime.timezone.utc)\n}\n```\n\n```\n{\n    \"type\": \"node\",\n    \"tag\": {\"name\": \"Neu Broderstorf\", \"traffic_sign\": \"city_limit\"},\n    \"id\": 1831881213,\n    \"version\": 1,\n    \"changeset\": 12370172,\n    \"lat\": 54.0900666,\n    \"lon\": 12.2539381,\n    \"user\": \"lafkor\",\n    \"uid\": 75625,\n    \"visible\": True,\n    \"timestamp\": datetime.datetime(2012, 7, 20, 9, 43, 19, tzinfo=datetime.timezone.utc),\n}\n```\n\n```\n{\n    \"type\": \"way\",\n    \"tag\": {\"highway\": \"unclassified\", \"name\": \"Pastower Stra\u00dfe\"},\n    \"id\": 26659127,\n    \"user\": \"Masch\",\n    \"uid\": 55988,\n    \"visible\": True,\n    \"version\": 5,\n    \"changeset\": 4142606,\n    \"timestamp\": datetime.datetime(2010, 3, 16, 11, 47, 8, tzinfo=datetime.timezone.utc),\n    \"nd\": [292403538, 298884289, 261728686]\n}\n```\n\n```\n{\n    \"type\": \"relation\",\n    \"tag\": {\n        \"name\": \"K\u00fcstenbus Linie 123\",\n        \"network\": \"VVW\",\n        \"operator\": \"Regionalverkehr K\u00fcste\",\n        \"ref\": \"123\",\n        \"route\": \"bus\",\n        \"type\": \"route\"\n    },\n    \"id\": 56688,\n    \"user\": \"kmvar\",\n    \"uid\": 56190,\n    \"visible\": True,\n    \"version\": 28,\n    \"changeset\": 6947637,\n    \"timestamp\": datetime.datetime(2011, 1, 12, 14, 23, 49, tzinfo=datetime.timezone.utc),\n    \"member\": [\n        {\"type\": \"node\", \"ref\": 294942404, \"role\": \"\"},\n        {\"type\": \"node\", \"ref\": 364933006, \"role\": \"\"},\n        {\"type\": \"way\", \"ref\": 4579143, \"role\": \"\"},\n        {\"type\": \"node\", \"ref\": 249673494, \"role\": \"\"},\n    ]\n}\n```\n\n\n## License\n\n**osmiter** is provided under the MIT license, included in the `license.md` file.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/MKuranowski/osmiter", "keywords": "osm xml gz pz2 pbf openstreetmap parser", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "osmiter", "package_url": "https://pypi.org/project/osmiter/", "platform": "", "project_url": "https://pypi.org/project/osmiter/", "project_urls": {"Homepage": "https://github.com/MKuranowski/osmiter"}, "release_url": "https://pypi.org/project/osmiter/1.0.4/", "requires_dist": null, "requires_python": "", "summary": "Library for reading OSM XML/GZ/BZ2/PBF files", "version": "1.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>osmiter</h1>\n<p>A simple library for parsing OSM data.\nSupports simple OSM XML files as well as OSM GZ, OSM BZ2 and OSM PBF.</p>\n<p>Please be aware that osmiter uses Google's <a href=\"https://pypi.org/project/protobuf/\" rel=\"nofollow\">protobuf</a> library,\nwritten in pure Python, which isn't particularly fast.</p>\n<h2>Example Usage</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">osmiter</span>\n\n<span class=\"n\">shop_count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"k\">for</span> <span class=\"n\">feature</span> <span class=\"ow\">in</span> <span class=\"n\">osmiter</span><span class=\"o\">.</span><span class=\"n\">iter_from_osm</span><span class=\"p\">(</span><span class=\"s2\">\"some_osm_file.osm\"</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">feature</span><span class=\"p\">[</span><span class=\"s2\">\"type\"</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">\"node\"</span> <span class=\"ow\">and</span> <span class=\"s2\">\"shop\"</span> <span class=\"ow\">in</span> <span class=\"n\">feature</span><span class=\"p\">[</span><span class=\"s2\">\"tag\"</span><span class=\"p\">]:</span>\n        <span class=\"n\">shop_count</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"this osm file containes </span><span class=\"si\">{</span><span class=\"n\">shop_count</span><span class=\"si\">}</span><span class=\"s2\"> shop nodes\"</span><span class=\"p\">)</span>\n</pre>\n<h2>What is osmiter generating?</h2>\n<p>For each feature (node/way/relation) it yields a dict containing element attributes\n(like <code>id</code>, <code>lat</code> or <code>timestamp</code>) and 2 additional items: key <code>\"type\"</code> holding <code>\"node\"/\"way\"/\"relation\"</code>\nand key <code>\"tag\"</code> holding a dict with feature tags (this dict may be empty).</p>\n<p>Additionally nodes will contain keys <code>\"lat\"</code> and <code>\"lon\"</code> with node coordinates,\nways will contain key <code>\"nd\"</code> with a list of all node_ids references by this way,\nand relations contain a key <code>\"member\"</code> with a list of dicts of each member's attributes.</p>\n<p>Almost all attributes are returned as strings with the exception for:</p>\n<ul>\n<li><code>id</code>, <code>ref</code>, <code>version</code>, <code>changeset</code>, <code>uid</code> and <code>changeset_count</code> \u2192 int</li>\n<li><code>lat</code>, <code>lon</code> \u2192 float</li>\n<li><code>open</code> and <code>visible</code> \u2192 bool</li>\n<li><code>timestamp</code> \u2192 <a href=\"https://docs.python.org/3/library/datetime.html#aware-and-naive-objects\" rel=\"nofollow\">aware</a> <a href=\"https://docs.python.org/3/library/datetime.html#datetime-objects\" rel=\"nofollow\">datetime.datetime</a> item.</li>\n</ul>\n<h4>Data validation</h4>\n<p>osmiter preforms almost no data validation, so it is possible to recieve ways with no nodes,\nrelations with no members, empty tag values, invalid coordinates, references to non-existing items,\nor duplicate ids\u203b.</p>\n<p>However, several data assumptions are made:</p>\n<ol>\n<li>Each feature has an <code>id</code> attribute.<br>\n(\u203b) For OSM PBF files, if an object is missing an id <code>-1</code> will be assigned, per the osmformat.proto definition.\nThis can result in multiple objects with an id equal to <code>-1</code>.</li>\n<li>Each node has to have both <code>lat</code> and <code>lon</code> defined.</li>\n<li>Every attribute defined in the table on attribute type conversion has to be convertible to its type.<br>\nSo, <code>id == 0x1453</code>, <code>changeset_count == AAAAAA</code>, <code>ref == 12.433</code> or <code>lat == 1.23E+10</code> will cause an exception;<br>\n<code>timestamp</code> value has to be either ISO8601-compliant or epoch time represented by an integer.</li>\n<li>Boolean atributes are only considered truthy if they're set to <code>true</code> (case-insensitive).\nValues <code>1</code>, <code>on</code>, <code>yes</code>, <code>\uff34\uff32\uff35\uff25</code> will all evaluate to False.</li>\n</ol>\n<h4>Minimum requirements for each element</h4>\n<p>Bare-minimum node:</p>\n<pre><code>{\n    \"id\": int,\n    \"type\": \"node\",\n    \"lat\": float,\n    \"lon\": float,\n    \"tag\": Dict[str, str], # May be empty\n}\n</code></pre>\n<p>Bare-minimum way:</p>\n<pre><code>{\n    \"id\": int,\n    \"type\": \"way\",\n    \"tag\": Dict[str, str], # May be empty\n    \"nd\": List[int],\n}\n</code></pre>\n<p>Bare-minimum relation:</p>\n<pre><code>{\n    \"id\": int,\n    \"type\": \"relation\",\n    \"tag\": Dict[str, str], # May be empty\n    \"member\": List[ dict ]\n}\n</code></pre>\n<h4>Example elements</h4>\n<p>See the corresponding <a href=\"https://wiki.openstreetmap.org/wiki/OSM_XML\" rel=\"nofollow\">OSM XML examples</a>.</p>\n<pre><code>{\n    \"type\": \"node\",\n    \"tag\": {}\n    \"id\": 298887269,\n    \"lat\": 54.0901746,\n    \"lon\": 12.2482632,\n    \"user\": \"SvenHRO\",\n    \"uid\": 46882,\n    \"visible\": True,\n    \"version\": 1,\n    \"changeset\": 676636,\n    \"timestamp\": datetime.datetime(2008, 9, 21, 21, 37, 45, tzinfo=datetime.timezone.utc)\n}\n</code></pre>\n<pre><code>{\n    \"type\": \"node\",\n    \"tag\": {\"name\": \"Neu Broderstorf\", \"traffic_sign\": \"city_limit\"},\n    \"id\": 1831881213,\n    \"version\": 1,\n    \"changeset\": 12370172,\n    \"lat\": 54.0900666,\n    \"lon\": 12.2539381,\n    \"user\": \"lafkor\",\n    \"uid\": 75625,\n    \"visible\": True,\n    \"timestamp\": datetime.datetime(2012, 7, 20, 9, 43, 19, tzinfo=datetime.timezone.utc),\n}\n</code></pre>\n<pre><code>{\n    \"type\": \"way\",\n    \"tag\": {\"highway\": \"unclassified\", \"name\": \"Pastower Stra\u00dfe\"},\n    \"id\": 26659127,\n    \"user\": \"Masch\",\n    \"uid\": 55988,\n    \"visible\": True,\n    \"version\": 5,\n    \"changeset\": 4142606,\n    \"timestamp\": datetime.datetime(2010, 3, 16, 11, 47, 8, tzinfo=datetime.timezone.utc),\n    \"nd\": [292403538, 298884289, 261728686]\n}\n</code></pre>\n<pre><code>{\n    \"type\": \"relation\",\n    \"tag\": {\n        \"name\": \"K\u00fcstenbus Linie 123\",\n        \"network\": \"VVW\",\n        \"operator\": \"Regionalverkehr K\u00fcste\",\n        \"ref\": \"123\",\n        \"route\": \"bus\",\n        \"type\": \"route\"\n    },\n    \"id\": 56688,\n    \"user\": \"kmvar\",\n    \"uid\": 56190,\n    \"visible\": True,\n    \"version\": 28,\n    \"changeset\": 6947637,\n    \"timestamp\": datetime.datetime(2011, 1, 12, 14, 23, 49, tzinfo=datetime.timezone.utc),\n    \"member\": [\n        {\"type\": \"node\", \"ref\": 294942404, \"role\": \"\"},\n        {\"type\": \"node\", \"ref\": 364933006, \"role\": \"\"},\n        {\"type\": \"way\", \"ref\": 4579143, \"role\": \"\"},\n        {\"type\": \"node\", \"ref\": 249673494, \"role\": \"\"},\n    ]\n}\n</code></pre>\n<h2>License</h2>\n<p><strong>osmiter</strong> is provided under the MIT license, included in the <code>license.md</code> file.</p>\n\n          </div>"}, "last_serial": 6648550, "releases": {"1.0.3": [{"comment_text": "", "digests": {"md5": "e3363bf0eabb3b8dc4b544558424e28e", "sha256": "647696d4186f038dcef9ede59b294846015adc9784355b009501e004d67bd0a0"}, "downloads": -1, "filename": "osmiter-1.0.3.tar.gz", "has_sig": false, "md5_digest": "e3363bf0eabb3b8dc4b544558424e28e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14897, "upload_time": "2020-02-14T17:43:00", "upload_time_iso_8601": "2020-02-14T17:43:00.789229Z", "url": "https://files.pythonhosted.org/packages/f5/a6/f4fa3408a104f7b5cdd9b2e23bd9b3e4b2a7899d8c5189b131514cd9631e/osmiter-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "7bfa0a1f585ca8fdfd6743f9a4ed8ee7", "sha256": "34c421be1e3373dea29e854367926e5b46f8a72d1f605b583a21cfcdf2f01235"}, "downloads": -1, "filename": "osmiter-1.0.4.tar.gz", "has_sig": false, "md5_digest": "7bfa0a1f585ca8fdfd6743f9a4ed8ee7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14897, "upload_time": "2020-02-17T19:38:12", "upload_time_iso_8601": "2020-02-17T19:38:12.417171Z", "url": "https://files.pythonhosted.org/packages/32/ff/f3a6516c4aeb0285ed4088e0af72bc3127fece2d4bc82e248b0f3a1768db/osmiter-1.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7bfa0a1f585ca8fdfd6743f9a4ed8ee7", "sha256": "34c421be1e3373dea29e854367926e5b46f8a72d1f605b583a21cfcdf2f01235"}, "downloads": -1, "filename": "osmiter-1.0.4.tar.gz", "has_sig": false, "md5_digest": "7bfa0a1f585ca8fdfd6743f9a4ed8ee7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14897, "upload_time": "2020-02-17T19:38:12", "upload_time_iso_8601": "2020-02-17T19:38:12.417171Z", "url": "https://files.pythonhosted.org/packages/32/ff/f3a6516c4aeb0285ed4088e0af72bc3127fece2d4bc82e248b0f3a1768db/osmiter-1.0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:01:07 2020"}