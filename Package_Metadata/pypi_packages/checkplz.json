{"info": {"author": "Christopher Boyd", "author_email": "", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# CheckPlz\n\nThis package provides for inline checks (i.e. __checkers__) which assure that objects can meet a complicated set of\nassumptions. Special handling of raised exceptions allow the collection of multiple exceptions to these assertions\nbefore interrupting the process. You can think of this as a close relative to unit testing, where you get\nthe benefits of a robust set of checks which can report errors independent of one another, with the convenience\nof single method type checking.\n\nIf exceptions are found, they are re-raised with a complete list of all the exceptions identified during the\ncheck. If no exceptions are found, the checker will return the original value that was passed to it.\n\n# Example\n\n```python\nfrom checkplz import sequence\n# example 1\nx = sequence([1,2,3])\n# example 2\ny = sequence([1,2,5])\n``` \n\nIn the first example, the sequence matches the assumptions of the checker. Because no exceptions are identified,\nthe object provider (`[1,2,3]`) will be assigned to the object `x`. However, in the second, the sequence has a gap\nwhich violates the assumptions of the checker. This will result in an exception being raised before the assignment to\n`y` can occur.\n\nThe utility of these simple assertions can be better shown when they are used in a more complex scenario. For our next\nexample, let's say we're interested in taking a list of lists, and checking each of them individually for proper\nsequencing.\n\n```python\nfrom checkplz import sequence\nlist_of_lists = [\n    [1,2,3],\n    [4,5,6],\n    [7,8,9]\n]\n# example 3\nlol = [sequence(z) for z in list_of_lists]\n# example 4\nmin_lol = [min(sequence(z)) for z in list_of_lists]\n```\n\nHere we use the checker as part of an inline list comprehension, and you can see the utility of such concise syntax.\nIn example #3, we simply assign the object back to a list comprehension, in effect recreating an identical\nobject, using the checker as an opportunity to raise exceptions for anything that violates our assumptions. In\nexample #4, we wrap the checked result in an additional function, allowing us to first check the object before moving on\nwith an additional step that prevents us from performing the check later.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Mikuana/CheckPlz", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "checkplz", "package_url": "https://pypi.org/project/checkplz/", "platform": "", "project_url": "https://pypi.org/project/checkplz/", "project_urls": {"Homepage": "https://github.com/Mikuana/CheckPlz"}, "release_url": "https://pypi.org/project/checkplz/0.0.5/", "requires_dist": null, "requires_python": ">=3.6", "summary": "A python package for checks and assertions of data and objects", "version": "0.0.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>CheckPlz</h1>\n<p>This package provides for inline checks (i.e. <strong>checkers</strong>) which assure that objects can meet a complicated set of\nassumptions. Special handling of raised exceptions allow the collection of multiple exceptions to these assertions\nbefore interrupting the process. You can think of this as a close relative to unit testing, where you get\nthe benefits of a robust set of checks which can report errors independent of one another, with the convenience\nof single method type checking.</p>\n<p>If exceptions are found, they are re-raised with a complete list of all the exceptions identified during the\ncheck. If no exceptions are found, the checker will return the original value that was passed to it.</p>\n<h1>Example</h1>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">checkplz</span> <span class=\"kn\">import</span> <span class=\"n\">sequence</span>\n<span class=\"c1\"># example 1</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">sequence</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"c1\"># example 2</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">sequence</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">])</span>\n</pre>\n<p>In the first example, the sequence matches the assumptions of the checker. Because no exceptions are identified,\nthe object provider (<code>[1,2,3]</code>) will be assigned to the object <code>x</code>. However, in the second, the sequence has a gap\nwhich violates the assumptions of the checker. This will result in an exception being raised before the assignment to\n<code>y</code> can occur.</p>\n<p>The utility of these simple assertions can be better shown when they are used in a more complex scenario. For our next\nexample, let's say we're interested in taking a list of lists, and checking each of them individually for proper\nsequencing.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">checkplz</span> <span class=\"kn\">import</span> <span class=\"n\">sequence</span>\n<span class=\"n\">list_of_lists</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"mi\">9</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n<span class=\"c1\"># example 3</span>\n<span class=\"n\">lol</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">sequence</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">z</span> <span class=\"ow\">in</span> <span class=\"n\">list_of_lists</span><span class=\"p\">]</span>\n<span class=\"c1\"># example 4</span>\n<span class=\"n\">min_lol</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">sequence</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">))</span> <span class=\"k\">for</span> <span class=\"n\">z</span> <span class=\"ow\">in</span> <span class=\"n\">list_of_lists</span><span class=\"p\">]</span>\n</pre>\n<p>Here we use the checker as part of an inline list comprehension, and you can see the utility of such concise syntax.\nIn example #3, we simply assign the object back to a list comprehension, in effect recreating an identical\nobject, using the checker as an opportunity to raise exceptions for anything that violates our assumptions. In\nexample #4, we wrap the checked result in an additional function, allowing us to first check the object before moving on\nwith an additional step that prevents us from performing the check later.</p>\n\n          </div>"}, "last_serial": 6520757, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "87f73f38cf4e7b5ece9d18c7f28b68ab", "sha256": "b69eba9c56c731a295dcdc3b4d4ebd84b234664068f2e79b3250391e7d6f8925"}, "downloads": -1, "filename": "checkplz-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "87f73f38cf4e7b5ece9d18c7f28b68ab", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 3902, "upload_time": "2020-01-20T05:48:10", "upload_time_iso_8601": "2020-01-20T05:48:10.098761Z", "url": "https://files.pythonhosted.org/packages/b2/9d/83eeff8aab262d81cb37b2bc6a194898617a4cb86094416a93abcfbacfa0/checkplz-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "520632bf0c7d13aead7e92d7098cf102", "sha256": "bbf80b8cfbda2c13610a6ae12f76ea84d8d869754001b9e8459b551f9faff2a2"}, "downloads": -1, "filename": "checkplz-0.0.1.tar.gz", "has_sig": false, "md5_digest": "520632bf0c7d13aead7e92d7098cf102", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 2031, "upload_time": "2020-01-20T05:48:12", "upload_time_iso_8601": "2020-01-20T05:48:12.742040Z", "url": "https://files.pythonhosted.org/packages/48/62/9887d38bd15925807e7850e65e3c29c1864d9089d0737da4994c64087878/checkplz-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "ade47d26791a27fb55aafc3bc8beaf07", "sha256": "450e11ce39e4339bd87541b95760beb5852e3a67e85a2878a8363b24c396ae37"}, "downloads": -1, "filename": "checkplz-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "ade47d26791a27fb55aafc3bc8beaf07", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 3904, "upload_time": "2020-01-20T20:01:24", "upload_time_iso_8601": "2020-01-20T20:01:24.071237Z", "url": "https://files.pythonhosted.org/packages/e5/37/d335d7e1015c010c3a804ce3b317e500e3370aef4c9a922df08df391c984/checkplz-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "94294aaf633c11197f19e87b1b9d4d98", "sha256": "3faf8ec86c61e5b22c03435346f6c0f3bd783d15d024784a88c16d22f66e0b94"}, "downloads": -1, "filename": "checkplz-0.0.2.tar.gz", "has_sig": false, "md5_digest": "94294aaf633c11197f19e87b1b9d4d98", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 2276, "upload_time": "2020-01-20T20:01:25", "upload_time_iso_8601": "2020-01-20T20:01:25.030511Z", "url": "https://files.pythonhosted.org/packages/92/bd/47e6d1a13279a8e2d05a80a5b63458df2b5889b291c77a05531999b825bd/checkplz-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "62fb89e87e9a7a900ed6cbd8d198d471", "sha256": "124acf3bd8e739b7ac396c3a85fc7daf3b6ee0863e972eaca2f6dd6aaa9dc9f1"}, "downloads": -1, "filename": "checkplz-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "62fb89e87e9a7a900ed6cbd8d198d471", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6703, "upload_time": "2020-01-21T00:09:42", "upload_time_iso_8601": "2020-01-21T00:09:42.121617Z", "url": "https://files.pythonhosted.org/packages/dd/70/371ae97b4df059bc824856016d4e53f17196f3310b0722c2f1db96bd340a/checkplz-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6a1d484f8fef568bb8a31f51efddcb9d", "sha256": "6b23127a260fab33b58f7dae0602a3a3f27776eef844502e384f5dea84af5be8"}, "downloads": -1, "filename": "checkplz-0.0.3.tar.gz", "has_sig": false, "md5_digest": "6a1d484f8fef568bb8a31f51efddcb9d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4480, "upload_time": "2020-01-21T00:09:43", "upload_time_iso_8601": "2020-01-21T00:09:43.351532Z", "url": "https://files.pythonhosted.org/packages/12/ec/09ef9f82a0a6131f85c0d921e8615ef82898ed81252ad1acd5196087b968/checkplz-0.0.3.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "48f8a86c95a762ab232a0c4b1a06c685", "sha256": "a7daf9e1a4a63331fe327b1e7bf8bd3251415170322647376a9c6008dd07f24d"}, "downloads": -1, "filename": "checkplz-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "48f8a86c95a762ab232a0c4b1a06c685", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6701, "upload_time": "2020-01-26T04:06:44", "upload_time_iso_8601": "2020-01-26T04:06:44.635721Z", "url": "https://files.pythonhosted.org/packages/13/0d/3f4b8ea8c8332ced25010ff844fd063576d7e75347b5ca0f5578c23cdc84/checkplz-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d4af7ccb92718e1fd9e20782ccf34c3c", "sha256": "d00938c1157458a1408a316544d9afeaf3d952e0b5560a23fcc3908a9e6beac3"}, "downloads": -1, "filename": "checkplz-0.0.5.tar.gz", "has_sig": false, "md5_digest": "d4af7ccb92718e1fd9e20782ccf34c3c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4362, "upload_time": "2020-01-26T04:06:45", "upload_time_iso_8601": "2020-01-26T04:06:45.867176Z", "url": "https://files.pythonhosted.org/packages/13/c3/d08556359e3a12f1192e2287bc7cca3d7b3604a6efb5c48ca579300c02f4/checkplz-0.0.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "48f8a86c95a762ab232a0c4b1a06c685", "sha256": "a7daf9e1a4a63331fe327b1e7bf8bd3251415170322647376a9c6008dd07f24d"}, "downloads": -1, "filename": "checkplz-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "48f8a86c95a762ab232a0c4b1a06c685", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6701, "upload_time": "2020-01-26T04:06:44", "upload_time_iso_8601": "2020-01-26T04:06:44.635721Z", "url": "https://files.pythonhosted.org/packages/13/0d/3f4b8ea8c8332ced25010ff844fd063576d7e75347b5ca0f5578c23cdc84/checkplz-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d4af7ccb92718e1fd9e20782ccf34c3c", "sha256": "d00938c1157458a1408a316544d9afeaf3d952e0b5560a23fcc3908a9e6beac3"}, "downloads": -1, "filename": "checkplz-0.0.5.tar.gz", "has_sig": false, "md5_digest": "d4af7ccb92718e1fd9e20782ccf34c3c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4362, "upload_time": "2020-01-26T04:06:45", "upload_time_iso_8601": "2020-01-26T04:06:45.867176Z", "url": "https://files.pythonhosted.org/packages/13/c3/d08556359e3a12f1192e2287bc7cca3d7b3604a6efb5c48ca579300c02f4/checkplz-0.0.5.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:34:19 2020"}