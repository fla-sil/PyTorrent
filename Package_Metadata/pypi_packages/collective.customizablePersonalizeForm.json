{"info": {"author": "Quadra Informatique", "author_email": "plone@quadra-informatique.fr", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Web Environment", "Framework :: Plone", "Framework :: Zope2", "Intended Audience :: End Users/Desktop", "Intended Audience :: Information Technology", "Intended Audience :: Other Audience", "Natural Language :: English", "Natural Language :: French", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.4", "Topic :: Utilities"], "description": ".. contents::\r\n\r\n- Questions and comments to Quadra Informatique <plone@quadra-informatique.fr>\r\n- Report bugs to Quadra Informatique <maintenance.plone@quadra-informatique.fr>\r\n\r\nIntroduction\r\n============\r\n\r\nThis package was created after encountering a problem with the plone.app.users.userdataschema.IUserDataSchemaProvider utilty override.\r\nAs this utility is unnamed, you can override it only once in all packages. We had to add extra fields on our personal-information form from various packages, so this package was created with the idea of managing multiple sources overrides of the personal-information form and properties.\r\n\r\nThis eggs allows to override as many times as you want the personal preferences of your users by adding extra fields by using adapters.\r\nBy adding extra fields, you can specify your own getters & setters if you don't want your field to be manage as a user property.\r\nYou'll also be able to add comptabile widgets for the personal preferences' form fields.\r\n\r\nThe docs directory contains all necessary steps about server configuration\r\nbefore to install this egg. These documents can be distributed separately under\r\nthe specified license in each of them.\r\n\r\nThese package was initiated by Quadra Informatique <plone@quadra-informatique.fr>.\r\n\r\nHow-to\r\n======\r\n\r\nThere are three interfaces you need to know:\r\n\r\ncollective.customizablePersonalizeForm.adapters.interfaces.IExtendedUserDataSchema(Interface):\r\n\r\n    def getSchema(self,):\r\n\r\ncollective.customizablePersonalizeForm.adapters.interfaces.IExtendedUserDataPanel(Interface):\r\n    \r\n    def getProperties(self,):\r\n\r\ncollective.customizablePersonalizeForm.adapters.interfaces.IExtendedUserDataWidgets(Interface):\r\n\r\n    def getWidgets(self,):\r\n\r\nAn adapter providing the IExtendedUserDataSchema allows to add additional fields by returning an Interface through its getSchema method.\r\n\r\nCarefull !\r\nIf you ever add a field on your form, you'll also need to declare a property with the same name as your field, allowing you to get and set your property.\r\nThat's why we use IExtendedUserDataPanel. An adapter providing this interface will return a list of strings through the getProperties method. \r\nThese strings are the names of the fields provided by your custom interface, like 'portrait' or 'fullname'.\r\nBy default the getters and setters of your fields will use Plone's member.getProperty and member.setProperty methods, using the memberdata to store the values. If you ever need to use your own getters and setters, you can return a dict instead of the name of your field, using this format:\r\n\r\n {'name' : 'your_field_name', 'getter': your_own_getter_method, 'setter': your_own_setter_method}\r\n\r\nSimple Override Example\r\n-----------------------\r\n\r\nA simple interface providing our field:\r\n\r\nclass ITestAdditionalDataSchema(Interface):\r\n\r\n    test_field = schema.Bool(\r\n        title=_(u'label_test_field_title', default=u'Test field'),\r\n        description=_(u'label_test_field_description', default=u''),\r\n        required=False,\r\n        )\r\n\r\nA simple adapter that adapts the context and request, returning our interface\r\n\r\nclass TestSchemaAdapter(object):\r\n    adapts(object, IBrowserRequest)\r\n    implements(IExtendedUserDataSchema)\r\n\r\n    def __init__(self, context, request):\r\n        self.context = context\r\n        self.request = request\r\n\r\n    def getSchema(self):\r\n        return ITestAdditionalDataSchema\r\n\r\nNow we create an adapter that will declare a 'test_field' property, we didn't specify a getter and setter so this property will act as a memberdata property (be sure to declare it via memberdata_properties.xml)\r\n\r\nclass TestPropertiesAdapter(object):\r\n    adapts(object, IBrowserRequest)\r\n    implements(IExtendedUserDataPanel)\r\n\r\n    def __init__(self, context, request):\r\n        self.context = context\r\n        self.request = request\r\n\r\n    def getProperties(self):\r\n        return ['test_field']\r\n\r\nLet's susbscribe to the collective.customizablePersonalizeForm's interfaces to provide the personal-information form with our field\r\n\r\n    <adapter factory=\".adapters.TestSchemaAdapter\"\r\n             name=\"test.ExtraField\"/>\r\n\r\n    <adapter factory=\".adapters.TestPropertiesAdapter\"\r\n             name=\"test.ExtraProperties\"/>\r\n\r\nCongratulations, a simple boolean field named 'test_field' should now be displayed in your form.\r\n\r\nCustom Widgets\r\n--------------\r\n\r\nYou may want to use a widget for your field. It can be done through the IExtendedUserDataWidgets interface.\r\nAll you have to do is mapping a field id with a valid custom_widget factory like the following example.\r\n\r\nclass TestWidgetAdapter(object):\r\n    adapts(object, IBrowserRequest)\r\n    implements(IExtendedUserDataWidgets)\r\n\r\n    def __init__(self, context, request):\r\n        self.context = context\r\n        self.request = request\r\n\r\n    def getWidgets(self):\r\n        return [{'field': 'test_field', 'factory' : CheckBoxWidget},\r\n               ]\r\n\r\n    <adapter factory=\".adapters.TestWidgetAdapter\"\r\n             name=\"test.ExtraWidgets\"/>\r\n\r\nYour test_field will now use the widget factory you declared in the getWidgets method. You can also override the default Plone fields widgets using this method if you ever need to.\r\n\r\n\r\nChangelog\r\n=========\r\n\r\n2.0 (2011-09-07)\r\n----------------\r\n\r\n- Now working for Plone 4.x [jstegle]\r\n- Added 3 interfaces for subscription, provider schema, properties and widgets overrides [jstegle]\r\n- Overrides the default personal-information to manage widget customization [jstegle]\r\n- Overrides the default IUserDataSchemaProvider [jstegle]\r\n- Overrides the account-macro view to manage FileUpload fields that handles pictures [jstegle]\r\n- Added isImage constraint on the portrait field, allowing only images to be uploaded [jstegle]\r\n- Added tests and examples [jstegle]\r\n\r\n1.0.1 (2011-05-04)\r\n------------------\r\n\r\n- Added documentation [jstegle]\r\n\r\n1.0 (2011-04-XX)\r\n----------------\r\n\r\n- Added viewletmanager for the personalize_form [jstegle]\r\n- Added adaptor interfaces for validators and actions [jstegle]\r\n- Added self personalize_form, validation and action scripts [jstegle]\r\n- Works for Plone 3.x [jstegle]", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "personalize_form,customization", "license": "GPL", "maintainer": "Quadra Informatique", "maintainer_email": "plone@quadra-informatique.fr", "name": "collective.customizablePersonalizeForm", "package_url": "https://pypi.org/project/collective.customizablePersonalizeForm/", "platform": "all", "project_url": "https://pypi.org/project/collective.customizablePersonalizeForm/", "project_urls": {"Download": "UNKNOWN"}, "release_url": "https://pypi.org/project/collective.customizablePersonalizeForm/2.0/", "requires_dist": null, "requires_python": null, "summary": "Customizable personalize form for Plone", "version": "2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#introduction\" id=\"id3\" rel=\"nofollow\">Introduction</a></li>\n<li><a href=\"#how-to\" id=\"id4\" rel=\"nofollow\">How-to</a><ul>\n<li><a href=\"#simple-override-example\" id=\"id5\" rel=\"nofollow\">Simple Override Example</a></li>\n<li><a href=\"#custom-widgets\" id=\"id6\" rel=\"nofollow\">Custom Widgets</a></li>\n</ul>\n</li>\n<li><a href=\"#changelog\" id=\"id7\" rel=\"nofollow\">Changelog</a><ul>\n<li><a href=\"#id1\" id=\"id8\" rel=\"nofollow\">2.0 (2011-09-07)</a></li>\n<li><a href=\"#id2\" id=\"id9\" rel=\"nofollow\">1.0.1 (2011-05-04)</a></li>\n<li><a href=\"#xx\" id=\"id10\" rel=\"nofollow\">1.0 (2011-04-XX)</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<ul>\n<li>Questions and comments to Quadra Informatique &lt;<a href=\"mailto:plone%40quadra-informatique.fr\">plone<span>@</span>quadra-informatique<span>.</span>fr</a>&gt;</li>\n<li>Report bugs to Quadra Informatique &lt;<a href=\"mailto:maintenance.plone%40quadra-informatique.fr\">maintenance<span>.</span>plone<span>@</span>quadra-informatique<span>.</span>fr</a>&gt;</li>\n</ul>\n<div id=\"introduction\">\n<h2><a href=\"#id3\" rel=\"nofollow\">Introduction</a></h2>\n<p>This package was created after encountering a problem with the plone.app.users.userdataschema.IUserDataSchemaProvider utilty override.\nAs this utility is unnamed, you can override it only once in all packages. We had to add extra fields on our personal-information form from various packages, so this package was created with the idea of managing multiple sources overrides of the personal-information form and properties.</p>\n<p>This eggs allows to override as many times as you want the personal preferences of your users by adding extra fields by using adapters.\nBy adding extra fields, you can specify your own getters &amp; setters if you don\u2019t want your field to be manage as a user property.\nYou\u2019ll also be able to add comptabile widgets for the personal preferences\u2019 form fields.</p>\n<p>The docs directory contains all necessary steps about server configuration\nbefore to install this egg. These documents can be distributed separately under\nthe specified license in each of them.</p>\n<p>These package was initiated by Quadra Informatique &lt;<a href=\"mailto:plone%40quadra-informatique.fr\">plone<span>@</span>quadra-informatique<span>.</span>fr</a>&gt;.</p>\n</div>\n<div id=\"how-to\">\n<h2><a href=\"#id4\" rel=\"nofollow\">How-to</a></h2>\n<p>There are three interfaces you need to know:</p>\n<p>collective.customizablePersonalizeForm.adapters.interfaces.IExtendedUserDataSchema(Interface):</p>\n<blockquote>\ndef getSchema(self,):</blockquote>\n<p>collective.customizablePersonalizeForm.adapters.interfaces.IExtendedUserDataPanel(Interface):</p>\n<blockquote>\ndef getProperties(self,):</blockquote>\n<p>collective.customizablePersonalizeForm.adapters.interfaces.IExtendedUserDataWidgets(Interface):</p>\n<blockquote>\ndef getWidgets(self,):</blockquote>\n<p>An adapter providing the IExtendedUserDataSchema allows to add additional fields by returning an Interface through its getSchema method.</p>\n<p>Carefull !\nIf you ever add a field on your form, you\u2019ll also need to declare a property with the same name as your field, allowing you to get and set your property.\nThat\u2019s why we use IExtendedUserDataPanel. An adapter providing this interface will return a list of strings through the getProperties method.\nThese strings are the names of the fields provided by your custom interface, like \u2018portrait\u2019 or \u2018fullname\u2019.\nBy default the getters and setters of your fields will use Plone\u2019s member.getProperty and member.setProperty methods, using the memberdata to store the values. If you ever need to use your own getters and setters, you can return a dict instead of the name of your field, using this format:</p>\n<blockquote>\n{\u2018name\u2019 : \u2018your_field_name\u2019, \u2018getter\u2019: your_own_getter_method, \u2018setter\u2019: your_own_setter_method}</blockquote>\n<div id=\"simple-override-example\">\n<h3><a href=\"#id5\" rel=\"nofollow\">Simple Override Example</a></h3>\n<p>A simple interface providing our field:</p>\n<p>class ITestAdditionalDataSchema(Interface):</p>\n<blockquote>\n<dl>\n<dt>test_field = schema.Bool(</dt>\n<dd>title=_(u\u2019label_test_field_title\u2019, default=u\u2019Test field\u2019),\ndescription=_(u\u2019label_test_field_description\u2019, default=u\u2019\u2019),\nrequired=False,\n)</dd>\n</dl>\n</blockquote>\n<p>A simple adapter that adapts the context and request, returning our interface</p>\n<dl>\n<dt>class TestSchemaAdapter(object):</dt>\n<dd><p>adapts(object, IBrowserRequest)\nimplements(IExtendedUserDataSchema)</p>\n<dl>\n<dt>def __init__(self, context, request):</dt>\n<dd>self.context = context\nself.request = request</dd>\n<dt>def getSchema(self):</dt>\n<dd>return ITestAdditionalDataSchema</dd>\n</dl>\n</dd>\n</dl>\n<p>Now we create an adapter that will declare a \u2018test_field\u2019 property, we didn\u2019t specify a getter and setter so this property will act as a memberdata property (be sure to declare it via memberdata_properties.xml)</p>\n<dl>\n<dt>class TestPropertiesAdapter(object):</dt>\n<dd><p>adapts(object, IBrowserRequest)\nimplements(IExtendedUserDataPanel)</p>\n<dl>\n<dt>def __init__(self, context, request):</dt>\n<dd>self.context = context\nself.request = request</dd>\n<dt>def getProperties(self):</dt>\n<dd>return [\u2018test_field\u2019]</dd>\n</dl>\n</dd>\n</dl>\n<p>Let\u2019s susbscribe to the collective.customizablePersonalizeForm\u2019s interfaces to provide the personal-information form with our field</p>\n<blockquote>\n<dl>\n<dt>&lt;adapter factory=\u201d.adapters.TestSchemaAdapter\u201d</dt>\n<dd>name=\u201dtest.ExtraField\u201d/&gt;</dd>\n<dt>&lt;adapter factory=\u201d.adapters.TestPropertiesAdapter\u201d</dt>\n<dd>name=\u201dtest.ExtraProperties\u201d/&gt;</dd>\n</dl>\n</blockquote>\n<p>Congratulations, a simple boolean field named \u2018test_field\u2019 should now be displayed in your form.</p>\n</div>\n<div id=\"custom-widgets\">\n<h3><a href=\"#id6\" rel=\"nofollow\">Custom Widgets</a></h3>\n<p>You may want to use a widget for your field. It can be done through the IExtendedUserDataWidgets interface.\nAll you have to do is mapping a field id with a valid custom_widget factory like the following example.</p>\n<dl>\n<dt>class TestWidgetAdapter(object):</dt>\n<dd><p>adapts(object, IBrowserRequest)\nimplements(IExtendedUserDataWidgets)</p>\n<dl>\n<dt>def __init__(self, context, request):</dt>\n<dd>self.context = context\nself.request = request</dd>\n<dt>def getWidgets(self):</dt>\n<dd><dl>\n<dt>return [{\u2018field\u2019: \u2018test_field\u2019, \u2018factory\u2019 <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">CheckBoxWidget},</span></dt>\n<dd>]</dd>\n</dl>\n</dd>\n<dt>&lt;adapter factory=\u201d.adapters.TestWidgetAdapter\u201d</dt>\n<dd>name=\u201dtest.ExtraWidgets\u201d/&gt;</dd>\n</dl>\n</dd>\n</dl>\n<p>Your test_field will now use the widget factory you declared in the getWidgets method. You can also override the default Plone fields widgets using this method if you ever need to.</p>\n</div>\n</div>\n<div id=\"changelog\">\n<h2><a href=\"#id7\" rel=\"nofollow\">Changelog</a></h2>\n<div id=\"id1\">\n<h3><a href=\"#id8\" rel=\"nofollow\">2.0 (2011-09-07)</a></h3>\n<ul>\n<li>Now working for Plone 4.x [jstegle]</li>\n<li>Added 3 interfaces for subscription, provider schema, properties and widgets overrides [jstegle]</li>\n<li>Overrides the default personal-information to manage widget customization [jstegle]</li>\n<li>Overrides the default IUserDataSchemaProvider [jstegle]</li>\n<li>Overrides the account-macro view to manage FileUpload fields that handles pictures [jstegle]</li>\n<li>Added isImage constraint on the portrait field, allowing only images to be uploaded [jstegle]</li>\n<li>Added tests and examples [jstegle]</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3><a href=\"#id9\" rel=\"nofollow\">1.0.1 (2011-05-04)</a></h3>\n<ul>\n<li>Added documentation [jstegle]</li>\n</ul>\n</div>\n<div id=\"xx\">\n<h3><a href=\"#id10\" rel=\"nofollow\">1.0 (2011-04-XX)</a></h3>\n<ul>\n<li>Added viewletmanager for the personalize_form [jstegle]</li>\n<li>Added adaptor interfaces for validators and actions [jstegle]</li>\n<li>Added self personalize_form, validation and action scripts [jstegle]</li>\n<li>Works for Plone 3.x [jstegle]</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 787742, "releases": {"2.0": [{"comment_text": "", "digests": {"md5": "1e27f417fb893fc11fb9b0e167b1b9e3", "sha256": "41d04687afcc79e62cb86f9b8ef2f9a7718e6f6db24db8359316f443e1938703"}, "downloads": -1, "filename": "collective.customizablePersonalizeForm-2.0-py2.6.egg", "has_sig": false, "md5_digest": "1e27f417fb893fc11fb9b0e167b1b9e3", "packagetype": "bdist_egg", "python_version": "2.6", "requires_python": null, "size": 29537, "upload_time": "2011-09-08T10:35:50", "upload_time_iso_8601": "2011-09-08T10:35:50.437929Z", "url": "https://files.pythonhosted.org/packages/fb/d8/4434316e4b494df715e0907233d9c29c988c3076f1c7c4fc3c2ea487d0f0/collective.customizablePersonalizeForm-2.0-py2.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "d3f09ac5d5bea684e2d2b21aaa992787", "sha256": "4f89082e248cbd779073be4b6db05c3dc9810e3c459b1659d2cfcc7e86cdf1cb"}, "downloads": -1, "filename": "collective.customizablePersonalizeForm-2.0.tar.gz", "has_sig": false, "md5_digest": "d3f09ac5d5bea684e2d2b21aaa992787", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13704, "upload_time": "2011-09-08T10:35:49", "upload_time_iso_8601": "2011-09-08T10:35:49.548924Z", "url": "https://files.pythonhosted.org/packages/b0/e8/7e30b637e0e92c5d3d40d814a41a96d195c3a6559efd6ac28b01d2e974da/collective.customizablePersonalizeForm-2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1e27f417fb893fc11fb9b0e167b1b9e3", "sha256": "41d04687afcc79e62cb86f9b8ef2f9a7718e6f6db24db8359316f443e1938703"}, "downloads": -1, "filename": "collective.customizablePersonalizeForm-2.0-py2.6.egg", "has_sig": false, "md5_digest": "1e27f417fb893fc11fb9b0e167b1b9e3", "packagetype": "bdist_egg", "python_version": "2.6", "requires_python": null, "size": 29537, "upload_time": "2011-09-08T10:35:50", "upload_time_iso_8601": "2011-09-08T10:35:50.437929Z", "url": "https://files.pythonhosted.org/packages/fb/d8/4434316e4b494df715e0907233d9c29c988c3076f1c7c4fc3c2ea487d0f0/collective.customizablePersonalizeForm-2.0-py2.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "d3f09ac5d5bea684e2d2b21aaa992787", "sha256": "4f89082e248cbd779073be4b6db05c3dc9810e3c459b1659d2cfcc7e86cdf1cb"}, "downloads": -1, "filename": "collective.customizablePersonalizeForm-2.0.tar.gz", "has_sig": false, "md5_digest": "d3f09ac5d5bea684e2d2b21aaa992787", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13704, "upload_time": "2011-09-08T10:35:49", "upload_time_iso_8601": "2011-09-08T10:35:49.548924Z", "url": "https://files.pythonhosted.org/packages/b0/e8/7e30b637e0e92c5d3d40d814a41a96d195c3a6559efd6ac28b01d2e974da/collective.customizablePersonalizeForm-2.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:17:57 2020"}