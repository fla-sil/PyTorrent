{"info": {"author": "Gus Dunn", "author_email": "w.gus.dunn@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6"], "description": "==============\nTable Enforcer\n==============\n\n\n.. image:: https://img.shields.io/pypi/v/table_enforcer.svg\n        :target: https://pypi.python.org/pypi/table_enforcer\n\n.. image:: https://img.shields.io/travis/xguse/table_enforcer.svg\n        :target: https://travis-ci.org/xguse/table_enforcer\n\n.. image:: https://readthedocs.org/projects/table-enforcer/badge/?version=latest\n        :target: https://table-enforcer.readthedocs.io/en/latest/?badge=latest\n        :alt: Documentation Status\n\n..        .. image:: https://pyup.io/repos/github/xguse/table_enforcer/shield.svg\n        :target: https://pyup.io/repos/github/xguse/table_enforcer/\n        :alt: Updates\n\nDemo Usage\n----------\n\nHave a look at this `Demo Notebook <http://table-enforcer.readthedocs.io/en/latest/_static/Usage_Demo.html>`_\n\nDescription\n-----------\n\nA python package to facilitate the iterative process of developing and using schema-like representations of table data to recode and validate instances of these data stored in pandas DataFrames.\nThis is a `fairly young` attempt to solve a recurrent problem many people have.\nSo far I have looked at multiple solutions, but none really did it for me.\n\nThey either deal primarily with JSON encoded data or they only really solve the validation side of the problem and consider recoding to be a separate issue.\nThey seem to assume that recoding and cleaning has already been done and all we care about is making sure the final product is sane.\n\nTo me, this seems backwards.\n\nI need to load, recode, and validate tables all day, everyday.\nSometimes its simple; I can ``pandas.read_table()`` and all is good.\nBut sometimes I have a 700 column long RedCap data dump that is complicated af, and it `really` helps me to develop my recoding logic through an iterative process.\nFor me it makes sense to couple the recoding process directly with the validation process:\nto write the \"tests\" for each column first, then add recoding logic in steps until the tests pass.\n\nSo `Table Enforcer` is my attempt to apply a sort of \"test driven development\" workflow to data cleaning and validation.\n\n\nBasic Workflow\n--------------\n\n#. For each column that you care about in your source table:\n\n   #. Define a ``Column`` object that represents the ideal state of your data by passing a list of small, independent, reusable validator functions and some descriptive information.\n\n   #. Use this object to validate the column data from your source table.\n\n      * It will probably fail.\n\n   #. Add small, composable, reusable recoding functions to the column object and iterate until your validations pass.\n\n#. Define an ``Enforcer`` object by passing it a list of your column representation objects.\n\n#. This enforcer can be used to recode or validate recoded tables of the same kind as your source table wherever your applications use that type of data.\n\n\n\nPlease take a look and offer thoughts/advice.\n\n* Free software: MIT license\n* Web site: https://github.com/xguse/table_enforcer\n* Documentation: https://table-enforcer.readthedocs.io.\n\n\nFeatures\n--------\n\n* ``Enforcer`` and ``Column`` classes to define what columns should look like in a table.\n* ``CompundColumn`` class that supports complex operations including \"one-to-many\" and \"many-to-one\" recoding logic as sometimes a column tries to do too much and should really be multiple columns as well as the reverse.\n* Growing cadre of built-in validator functions and decorators.\n* Decorators for use in defining parameterized validators like ``between_4_and_60()``.\n\n\n\nCredits\n---------\n\nThis package was created with Cookiecutter_ and the `xguse/cookiecutter-pypackage`_ project template which is based on `audreyr/cookiecutter-pypackage`_.\n\n.. _Cookiecutter: https://github.com/audreyr/cookiecutter\n.. _`audreyr/cookiecutter-pypackage`: https://github.com/audreyr/cookiecutter-pypackage\n.. _`xguse/cookiecutter-pypackage`: https://github.com/xguse/cookiecutter-pypackage\n\n\n*******\nHistory\n*******\n\nv0.4.4 / 2018-02-15\n===================\n\n  * fix recode/validate access to sub-pkgs\n  * ignore .pytest_cache\n\nv0.4.3 / 2018-02-15\n==================\n\n  * Fixed import errors\n  * ignore test_chamber\n\nv0.4.2 / 2018-02-15\n===================\n\n  * Address import errors when not installed editable\n  * update README link to Usage_Demo\n  * ship docs/_static/Usage_Demo.html\n  * Updated Usage_Demo\n  * added to doctrings in main_classes\n\nv0.4.1 / 2018-02-14\n===================\n\n  * added readthedocs.yml\n  * Updated Usage_Demo and README\n\nv0.4.0 / 2018-02-13\n===================\n\n  * Updated tests for CompoundColumn\n  * CompoundColumn absorbs MTO/OTM-subclasses\n  * updated tests/files/demo_table*.csv\n  * updated docs/demo_notebook\n  * OTMColumn.input_columns must be len == 1\n  * amended tests for new OTMColumn\n  * main_classes: rewrite OTMColumn and general reorg\n  * BaseColumn method defs now sets api for subclasses\n  * Enforcer.columns is now simple list\n  * setup.cfg: whitelist varname df\n  * main_classes: restruct base classes + ComplexColumn\n  * main_classes: col takes table\n  * test_column: col takes table\n  * add testing files for MTOColumn\n  * ignore LibreOffice lock files\n  * OTMColumn: improved __doc__\n  * update_dataframe: call sig now has `validate`\n\nv0.3.0 / 2018-02-07\n===================\n\n  * main_classes: OTMColumn is functional\n  * updated testing for OTMColumn\n  * main_classes: replace Munch w/ Box (probationary)\n  * add python-box to reqs (probationary)\n  * conftest: modularize paths\n  * add testing for OTMColumn\n  * test_column: fix typos and style\n  * import all from main_classes\n  * Bump version: 0.1.5 \u2192 0.2.0\n  * changelog(v0.2.0)\n  * Updated Docs version Usage_Demo.ipynb\n\nv0.2.0 / 2018-02-02\n===================\n\n  * Enforcer.recode lets Column.recode do the validation now\n  * Enforcer.validate no longer recodes\n  * Enforcer: make_validations now private\n  * Column: added find_failed_rows()\n  * columns now take series not dataframe\n  * added system-lvl tests based on Usage_Demo.ipynb\n  * Enforcer.recode create new df rather than copy\n  * added RecoderError and focused ValidationError\n  * remove testing for 3.5\n  * dont lint tests\n  * ignore flake8:W292\n  * formatting\n\nv0.1.5 / 2018-02-01\n===================\n\n  * Added tests for imports and more Class behavior\n  * main_classes: calling recode with validate is now prefered\n\nv0.1.4 / 2018-01-26\n===================\n\n  * main_classes.py: removed faulty imports\n\nv0.1.3 / 2018-01-26\n===================\n\n  * corrected Usage_Demo.ipynb\n  * formatting and typing\n  * table_enforcer.py -> main_classes.py\n\nv0.1.2 / 2017-11-17\n===================\n\n  * flake8\n  * set up basic testing\n  * changed travis build settings\n  * updated usage demo and readme\n\nv0.1.1 / 2017-11-16\n===================\n\n  * Added usage notebook link to docs.\n  * reorganized import strategy of Enforcer/Column objs\n  * added more builtin validators/recoders/decorators\n  * updated reqs\n  * initialized travis integration\n  * updated docs\n  * Added usage demo notebook for docs\n  * updated ignore patterns\n  * validators.py: renamed\n\nv0.1.0 / 2017-11-15\n===================\n\n  * first minimally functional package\n  * Enforcer and Column classes defined and operational\n  * small cadre of built-in validator functions and decorators\n  * ignore jupyter stuff\n  * linter setups\n\nv0.0.1 / 2017-11-14\n===================\n\n* First commit\n\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/xguse/table_enforcer", "keywords": "table_enforcer", "license": "MIT license", "maintainer": "", "maintainer_email": "", "name": "table-enforcer", "package_url": "https://pypi.org/project/table-enforcer/", "platform": "", "project_url": "https://pypi.org/project/table-enforcer/", "project_urls": {"Homepage": "https://github.com/xguse/table_enforcer"}, "release_url": "https://pypi.org/project/table-enforcer/0.4.4/", "requires_dist": ["python-box", "munch", "xlrd", "xlwt", "logzero", "numpy", "numexpr", "pandas"], "requires_python": "", "summary": "ORM-like package for defining, loading, and validating table schemas in pandas.", "version": "0.4.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            ==============<br>Table Enforcer<br>==============<br><br><br>.. image:: https://img.shields.io/pypi/v/table_enforcer.svg<br>        :target: https://pypi.python.org/pypi/table_enforcer<br><br>.. image:: https://img.shields.io/travis/xguse/table_enforcer.svg<br>        :target: https://travis-ci.org/xguse/table_enforcer<br><br>.. image:: https://readthedocs.org/projects/table-enforcer/badge/?version=latest<br>        :target: https://table-enforcer.readthedocs.io/en/latest/?badge=latest<br>        :alt: Documentation Status<br><br>..        .. image:: https://pyup.io/repos/github/xguse/table_enforcer/shield.svg<br>        :target: https://pyup.io/repos/github/xguse/table_enforcer/<br>        :alt: Updates<br><br>Demo Usage<br>----------<br><br>Have a look at this `Demo Notebook &lt;http://table-enforcer.readthedocs.io/en/latest/_static/Usage_Demo.html&gt;`_<br><br>Description<br>-----------<br><br>A python package to facilitate the iterative process of developing and using schema-like representations of table data to recode and validate instances of these data stored in pandas DataFrames.<br>This is a `fairly young` attempt to solve a recurrent problem many people have.<br>So far I have looked at multiple solutions, but none really did it for me.<br><br>They either deal primarily with JSON encoded data or they only really solve the validation side of the problem and consider recoding to be a separate issue.<br>They seem to assume that recoding and cleaning has already been done and all we care about is making sure the final product is sane.<br><br>To me, this seems backwards.<br><br>I need to load, recode, and validate tables all day, everyday.<br>Sometimes its simple; I can ``pandas.read_table()`` and all is good.<br>But sometimes I have a 700 column long RedCap data dump that is complicated af, and it `really` helps me to develop my recoding logic through an iterative process.<br>For me it makes sense to couple the recoding process directly with the validation process:<br>to write the \"tests\" for each column first, then add recoding logic in steps until the tests pass.<br><br>So `Table Enforcer` is my attempt to apply a sort of \"test driven development\" workflow to data cleaning and validation.<br><br><br>Basic Workflow<br>--------------<br><br>#. For each column that you care about in your source table:<br><br>   #. Define a ``Column`` object that represents the ideal state of your data by passing a list of small, independent, reusable validator functions and some descriptive information.<br><br>   #. Use this object to validate the column data from your source table.<br><br>      * It will probably fail.<br><br>   #. Add small, composable, reusable recoding functions to the column object and iterate until your validations pass.<br><br>#. Define an ``Enforcer`` object by passing it a list of your column representation objects.<br><br>#. This enforcer can be used to recode or validate recoded tables of the same kind as your source table wherever your applications use that type of data.<br><br><br><br>Please take a look and offer thoughts/advice.<br><br>* Free software: MIT license<br>* Web site: https://github.com/xguse/table_enforcer<br>* Documentation: https://table-enforcer.readthedocs.io.<br><br><br>Features<br>--------<br><br>* ``Enforcer`` and ``Column`` classes to define what columns should look like in a table.<br>* ``CompundColumn`` class that supports complex operations including \"one-to-many\" and \"many-to-one\" recoding logic as sometimes a column tries to do too much and should really be multiple columns as well as the reverse.<br>* Growing cadre of built-in validator functions and decorators.<br>* Decorators for use in defining parameterized validators like ``between_4_and_60()``.<br><br><br><br>Credits<br>---------<br><br>This package was created with Cookiecutter_ and the `xguse/cookiecutter-pypackage`_ project template which is based on `audreyr/cookiecutter-pypackage`_.<br><br>.. _Cookiecutter: https://github.com/audreyr/cookiecutter<br>.. _`audreyr/cookiecutter-pypackage`: https://github.com/audreyr/cookiecutter-pypackage<br>.. _`xguse/cookiecutter-pypackage`: https://github.com/xguse/cookiecutter-pypackage<br><br><br>*******<br>History<br>*******<br><br>v0.4.4 / 2018-02-15<br>===================<br><br>  * fix recode/validate access to sub-pkgs<br>  * ignore .pytest_cache<br><br>v0.4.3 / 2018-02-15<br>==================<br><br>  * Fixed import errors<br>  * ignore test_chamber<br><br>v0.4.2 / 2018-02-15<br>===================<br><br>  * Address import errors when not installed editable<br>  * update README link to Usage_Demo<br>  * ship docs/_static/Usage_Demo.html<br>  * Updated Usage_Demo<br>  * added to doctrings in main_classes<br><br>v0.4.1 / 2018-02-14<br>===================<br><br>  * added readthedocs.yml<br>  * Updated Usage_Demo and README<br><br>v0.4.0 / 2018-02-13<br>===================<br><br>  * Updated tests for CompoundColumn<br>  * CompoundColumn absorbs MTO/OTM-subclasses<br>  * updated tests/files/demo_table*.csv<br>  * updated docs/demo_notebook<br>  * OTMColumn.input_columns must be len == 1<br>  * amended tests for new OTMColumn<br>  * main_classes: rewrite OTMColumn and general reorg<br>  * BaseColumn method defs now sets api for subclasses<br>  * Enforcer.columns is now simple list<br>  * setup.cfg: whitelist varname df<br>  * main_classes: restruct base classes + ComplexColumn<br>  * main_classes: col takes table<br>  * test_column: col takes table<br>  * add testing files for MTOColumn<br>  * ignore LibreOffice lock files<br>  * OTMColumn: improved __doc__<br>  * update_dataframe: call sig now has `validate`<br><br>v0.3.0 / 2018-02-07<br>===================<br><br>  * main_classes: OTMColumn is functional<br>  * updated testing for OTMColumn<br>  * main_classes: replace Munch w/ Box (probationary)<br>  * add python-box to reqs (probationary)<br>  * conftest: modularize paths<br>  * add testing for OTMColumn<br>  * test_column: fix typos and style<br>  * import all from main_classes<br>  * Bump version: 0.1.5 \u2192 0.2.0<br>  * changelog(v0.2.0)<br>  * Updated Docs version Usage_Demo.ipynb<br><br>v0.2.0 / 2018-02-02<br>===================<br><br>  * Enforcer.recode lets Column.recode do the validation now<br>  * Enforcer.validate no longer recodes<br>  * Enforcer: make_validations now private<br>  * Column: added find_failed_rows()<br>  * columns now take series not dataframe<br>  * added system-lvl tests based on Usage_Demo.ipynb<br>  * Enforcer.recode create new df rather than copy<br>  * added RecoderError and focused ValidationError<br>  * remove testing for 3.5<br>  * dont lint tests<br>  * ignore flake8:W292<br>  * formatting<br><br>v0.1.5 / 2018-02-01<br>===================<br><br>  * Added tests for imports and more Class behavior<br>  * main_classes: calling recode with validate is now prefered<br><br>v0.1.4 / 2018-01-26<br>===================<br><br>  * main_classes.py: removed faulty imports<br><br>v0.1.3 / 2018-01-26<br>===================<br><br>  * corrected Usage_Demo.ipynb<br>  * formatting and typing<br>  * table_enforcer.py -&gt; main_classes.py<br><br>v0.1.2 / 2017-11-17<br>===================<br><br>  * flake8<br>  * set up basic testing<br>  * changed travis build settings<br>  * updated usage demo and readme<br><br>v0.1.1 / 2017-11-16<br>===================<br><br>  * Added usage notebook link to docs.<br>  * reorganized import strategy of Enforcer/Column objs<br>  * added more builtin validators/recoders/decorators<br>  * updated reqs<br>  * initialized travis integration<br>  * updated docs<br>  * Added usage demo notebook for docs<br>  * updated ignore patterns<br>  * validators.py: renamed<br><br>v0.1.0 / 2017-11-15<br>===================<br><br>  * first minimally functional package<br>  * Enforcer and Column classes defined and operational<br>  * small cadre of built-in validator functions and decorators<br>  * ignore jupyter stuff<br>  * linter setups<br><br>v0.0.1 / 2017-11-14<br>===================<br><br>* First commit<br><br><br>\n          </div>"}, "last_serial": 3585538, "releases": {"0.1.2": [{"comment_text": "", "digests": {"md5": "3b32f0b59c312fbfc7b669d633b45cfe", "sha256": "76b9ee84af8d900360e61808d699e0701322b318e1ead9f1fee96eef7566868c"}, "downloads": -1, "filename": "table_enforcer-0.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3b32f0b59c312fbfc7b669d633b45cfe", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 8292, "upload_time": "2017-11-17T16:14:13", "upload_time_iso_8601": "2017-11-17T16:14:13.136834Z", "url": "https://files.pythonhosted.org/packages/1b/36/93c82c4d0092d8d44a6bfcdf2abd7d838275736a72b41a222eae9bce3735/table_enforcer-0.1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e9359a59a4324ea873ad9dbc7721b0cf", "sha256": "d7d483ae0c295301c8d2db2723da66ee66ddb25becaedec49727989b6eb7ba48"}, "downloads": -1, "filename": "table_enforcer-0.1.2.tar.gz", "has_sig": false, "md5_digest": "e9359a59a4324ea873ad9dbc7721b0cf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16637, "upload_time": "2017-11-17T16:14:14", "upload_time_iso_8601": "2017-11-17T16:14:14.080854Z", "url": "https://files.pythonhosted.org/packages/e8/24/95c710b7612badd7279eda0f0bfe5dff99bceb23a1be902d58409513cb10/table_enforcer-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "191b700764e0cce9b2250a0fb219ce2a", "sha256": "301819cee13864010755a57ea0be5cadf43363c263302a5cbea3d388d5e2fe63"}, "downloads": -1, "filename": "table_enforcer-0.1.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "191b700764e0cce9b2250a0fb219ce2a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 8394, "upload_time": "2018-01-26T16:58:26", "upload_time_iso_8601": "2018-01-26T16:58:26.820724Z", "url": "https://files.pythonhosted.org/packages/ae/56/b1104c645c69576db8adf3a46919191978b9a8746a83d755c3887cc2c27d/table_enforcer-0.1.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4d4b7facac6397851eaa19f3feb50e19", "sha256": "178878af0a9f85e7c15f00ed21a81ce49e0bd5a6757f64183f98296550dab051"}, "downloads": -1, "filename": "table_enforcer-0.1.3.tar.gz", "has_sig": false, "md5_digest": "4d4b7facac6397851eaa19f3feb50e19", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16740, "upload_time": "2018-01-26T16:58:27", "upload_time_iso_8601": "2018-01-26T16:58:27.978860Z", "url": "https://files.pythonhosted.org/packages/ae/c0/c37df9cc62f718e0eaf5c7da54f85838958f112e0564dce7d698d747569c/table_enforcer-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "be15f476149bb6fe97bd96430aa875ff", "sha256": "dc9012b7c168d52054eada84d47bf943121dd9552b0ba0b3a273067250112eb7"}, "downloads": -1, "filename": "table_enforcer-0.1.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "be15f476149bb6fe97bd96430aa875ff", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 8412, "upload_time": "2018-01-26T17:15:44", "upload_time_iso_8601": "2018-01-26T17:15:44.010271Z", "url": "https://files.pythonhosted.org/packages/e2/94/69631e6026f1117f1dfc75a3ba427f359775c6e9d1ecc2942d8c7f88d935/table_enforcer-0.1.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "055bd732ca6ce7ee9bff2d0a3f23ff89", "sha256": "ba73243bbf596ce835e1b0b0eadd25242be01a0524f7a02deed3c41dafd5d621"}, "downloads": -1, "filename": "table_enforcer-0.1.4.tar.gz", "has_sig": false, "md5_digest": "055bd732ca6ce7ee9bff2d0a3f23ff89", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16768, "upload_time": "2018-01-26T17:15:45", "upload_time_iso_8601": "2018-01-26T17:15:45.765727Z", "url": "https://files.pythonhosted.org/packages/76/45/d3d1cf91d17bca45a13db9f712d5cd68b27f2c60706e5f2c64b956ad6b6c/table_enforcer-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "90a17eae4f1f40380b1317052e188683", "sha256": "2d947511ebbead32afb0535c5addf02d72f308746feb8fc5213ac22bde89b026"}, "downloads": -1, "filename": "table_enforcer-0.1.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "90a17eae4f1f40380b1317052e188683", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 8663, "upload_time": "2018-02-01T22:09:55", "upload_time_iso_8601": "2018-02-01T22:09:55.978333Z", "url": "https://files.pythonhosted.org/packages/13/51/1eeb46801ef24e06c698794098cd9be72697545967af9554c6fccccc06e3/table_enforcer-0.1.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6de680a493531d94152e39662a2174c8", "sha256": "9af9af6cc18de56a50b933aad5a56f2840fdb20fde5f27487ff94e197fe408d2"}, "downloads": -1, "filename": "table_enforcer-0.1.5.tar.gz", "has_sig": false, "md5_digest": "6de680a493531d94152e39662a2174c8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18413, "upload_time": "2018-02-01T22:09:58", "upload_time_iso_8601": "2018-02-01T22:09:58.455782Z", "url": "https://files.pythonhosted.org/packages/05/03/1041e16bf43cebfde3a10084d44f8103f380570d1ac98b6c1373892aa5d0/table_enforcer-0.1.5.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "809d8894181d545c1e6b4e4d28192f95", "sha256": "170648e96091fd267e7339ab4d68da5c2d7219b32a51af214b780adb176fed94"}, "downloads": -1, "filename": "table_enforcer-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "809d8894181d545c1e6b4e4d28192f95", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9288, "upload_time": "2018-02-02T20:11:35", "upload_time_iso_8601": "2018-02-02T20:11:35.487473Z", "url": "https://files.pythonhosted.org/packages/ba/74/5360afb259f6aaa454b569ddd7ec1c12c22a5b1c3f484951af59f07affba/table_enforcer-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bc8e082b5c20aca16ce62c0156fdc859", "sha256": "c902af49a4e1c77557efeb96c077fa583da83c1fdd34af8111480cc6333ba6ac"}, "downloads": -1, "filename": "table_enforcer-0.2.0.tar.gz", "has_sig": false, "md5_digest": "bc8e082b5c20aca16ce62c0156fdc859", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19622, "upload_time": "2018-02-02T20:11:37", "upload_time_iso_8601": "2018-02-02T20:11:37.452219Z", "url": "https://files.pythonhosted.org/packages/fd/2e/befe7ef8f493f30ab1354e33154098b0ccdedeb1ec124a4ba9938f3aca50/table_enforcer-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "7685b733b4d7bcec5da4e7e71daa78d9", "sha256": "5efde7b92afe3a8bd09bd6a0af886534fcc986d1d3772da5bdb93ae3b7101315"}, "downloads": -1, "filename": "table_enforcer-0.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "7685b733b4d7bcec5da4e7e71daa78d9", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 10967, "upload_time": "2018-02-07T21:04:52", "upload_time_iso_8601": "2018-02-07T21:04:52.269262Z", "url": "https://files.pythonhosted.org/packages/ff/89/beb6090811ac7dc728fecfdafeb0f152e2cfb2163fd47c1949a49b0f80b8/table_enforcer-0.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "328a434bbab756b0d5e805b08d4eb8b4", "sha256": "d5b6df9df4cf7cf53d4a8ae0bbb98075b6a401e988f6ca9830ed4a86e124003f"}, "downloads": -1, "filename": "table_enforcer-0.3.0.tar.gz", "has_sig": false, "md5_digest": "328a434bbab756b0d5e805b08d4eb8b4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22920, "upload_time": "2018-02-07T21:04:53", "upload_time_iso_8601": "2018-02-07T21:04:53.763565Z", "url": "https://files.pythonhosted.org/packages/1d/e4/2a7786bd1568afca16020285515ed1fee95a6db104f8a229931df752322b/table_enforcer-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "1b2c4fcf0b6dab9503c943306476e289", "sha256": "f374ad275e3806b414f6673bf5531b2cf02ce23568a05a197db880c7d1948a3a"}, "downloads": -1, "filename": "table_enforcer-0.4.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1b2c4fcf0b6dab9503c943306476e289", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 10986, "upload_time": "2018-02-13T22:26:50", "upload_time_iso_8601": "2018-02-13T22:26:50.974246Z", "url": "https://files.pythonhosted.org/packages/5a/de/5b7321af34186c1d9f8b9ba369a740dbcf3015f5ea1b609bb5374f9881dc/table_enforcer-0.4.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3267a1ad188400553ef1d20f0b05589d", "sha256": "7be5ed44f18eaba9b83e5046dbf56a5506e77d818446f1c6091e541aa4b4f099"}, "downloads": -1, "filename": "table_enforcer-0.4.0.tar.gz", "has_sig": false, "md5_digest": "3267a1ad188400553ef1d20f0b05589d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24463, "upload_time": "2018-02-13T22:26:52", "upload_time_iso_8601": "2018-02-13T22:26:52.418067Z", "url": "https://files.pythonhosted.org/packages/aa/dd/50e7061b53b95592b9cb279c61968932fa6966a3aa8f9a6ee78cafcb3921/table_enforcer-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "b021b6321bc8cff63cf004f2280b7355", "sha256": "e626123bb25e7c19009b204de10bdcd6396548dee2c68bf2d7e931744fa4c624"}, "downloads": -1, "filename": "table_enforcer-0.4.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b021b6321bc8cff63cf004f2280b7355", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 11369, "upload_time": "2018-02-14T18:36:11", "upload_time_iso_8601": "2018-02-14T18:36:11.250254Z", "url": "https://files.pythonhosted.org/packages/a9/09/55b0ba26ebe3a34a7ca560ef926eceb6bc4629779ac26cfe4faeaef323e8/table_enforcer-0.4.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "81cc7544518bee09c887f2af1b2439f4", "sha256": "3d00385f4f820722f397b09d41f4c2531b39489b238a701a04756a05218a9dfb"}, "downloads": -1, "filename": "table_enforcer-0.4.1.tar.gz", "has_sig": false, "md5_digest": "81cc7544518bee09c887f2af1b2439f4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24970, "upload_time": "2018-02-14T18:36:12", "upload_time_iso_8601": "2018-02-14T18:36:12.491779Z", "url": "https://files.pythonhosted.org/packages/fb/02/d5fbc30a8cdeef35f6b0b7a7fc3fa7ec083308ceb1e564223ce978f7f9c3/table_enforcer-0.4.1.tar.gz", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "c12688acad4f18403764e8ac56036f7a", "sha256": "a7dfc23c45fe3447ccb19ee44a4ad35fc56cc3b6e2111b7c9920fb25a6457f42"}, "downloads": -1, "filename": "table_enforcer-0.4.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c12688acad4f18403764e8ac56036f7a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 11661, "upload_time": "2018-02-15T16:30:31", "upload_time_iso_8601": "2018-02-15T16:30:31.580118Z", "url": "https://files.pythonhosted.org/packages/67/50/ccc10b3bd6ac0639dee693a7efe455d43a76edec997ca80c1b4e58cf0064/table_enforcer-0.4.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "890edea5b05e9ab1f754e7772fed1efa", "sha256": "32bcadeddd82f838b43457b1ce421461febfff75bfb9d71c1fec2ef1c1731a23"}, "downloads": -1, "filename": "table_enforcer-0.4.2.tar.gz", "has_sig": false, "md5_digest": "890edea5b05e9ab1f754e7772fed1efa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25292, "upload_time": "2018-02-15T16:30:32", "upload_time_iso_8601": "2018-02-15T16:30:32.403372Z", "url": "https://files.pythonhosted.org/packages/85/a1/395dffbfc1c78f94afc749f423f75bf8a5a49d2d1e9b292998e58d0dd33d/table_enforcer-0.4.2.tar.gz", "yanked": false}], "0.4.3": [{"comment_text": "", "digests": {"md5": "931da252d0770be641f83d8043295ad1", "sha256": "489433a96f74f95f6f8c782a9626350a030991620cbd7f34ede5e7cd4bba4c72"}, "downloads": -1, "filename": "table_enforcer-0.4.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "931da252d0770be641f83d8043295ad1", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 22332, "upload_time": "2018-02-15T20:27:42", "upload_time_iso_8601": "2018-02-15T20:27:42.162593Z", "url": "https://files.pythonhosted.org/packages/b3/84/49beb518fb293d88be063f1d842bc04e1cf73ff19a33c896728080ffc70f/table_enforcer-0.4.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "263f11f29c54f9b7b27872013a978a79", "sha256": "35cd0b5e413cca41d147c0d4e5c1f2ddbf35169836712ffee32d22cff66c4608"}, "downloads": -1, "filename": "table_enforcer-0.4.3.tar.gz", "has_sig": false, "md5_digest": "263f11f29c54f9b7b27872013a978a79", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29888, "upload_time": "2018-02-15T20:27:39", "upload_time_iso_8601": "2018-02-15T20:27:39.981229Z", "url": "https://files.pythonhosted.org/packages/57/7f/aaf0b1814ae951564d06eb9de1abc2a3f62a71cf25807fb0824bd63d1781/table_enforcer-0.4.3.tar.gz", "yanked": false}], "0.4.4": [{"comment_text": "", "digests": {"md5": "6da45de9f92332d2b672511fe59fd597", "sha256": "704fde861c81556b58be7f111a4d342271df1a0e8fe0db09bdc0bde180b84700"}, "downloads": -1, "filename": "table_enforcer-0.4.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6da45de9f92332d2b672511fe59fd597", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 22541, "upload_time": "2018-02-15T20:56:37", "upload_time_iso_8601": "2018-02-15T20:56:37.648919Z", "url": "https://files.pythonhosted.org/packages/33/2d/0a280efb987574b14dcfca02cc9ef1398450ec101127b5dd4c49965cfb5b/table_enforcer-0.4.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "acc02fb8417552138d887528929d4a40", "sha256": "0f9850c82bc41589e8ec7224f0eb0487ec7b1dbbd3d0e623013dd83d6295b8b1"}, "downloads": -1, "filename": "table_enforcer-0.4.4.tar.gz", "has_sig": false, "md5_digest": "acc02fb8417552138d887528929d4a40", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26594, "upload_time": "2018-02-15T20:56:39", "upload_time_iso_8601": "2018-02-15T20:56:39.718669Z", "url": "https://files.pythonhosted.org/packages/4a/af/a23b31e9ccbd934237ccddaaa4b2e59a0c9d6403049ec03e8bbc25bf3133/table_enforcer-0.4.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6da45de9f92332d2b672511fe59fd597", "sha256": "704fde861c81556b58be7f111a4d342271df1a0e8fe0db09bdc0bde180b84700"}, "downloads": -1, "filename": "table_enforcer-0.4.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6da45de9f92332d2b672511fe59fd597", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 22541, "upload_time": "2018-02-15T20:56:37", "upload_time_iso_8601": "2018-02-15T20:56:37.648919Z", "url": "https://files.pythonhosted.org/packages/33/2d/0a280efb987574b14dcfca02cc9ef1398450ec101127b5dd4c49965cfb5b/table_enforcer-0.4.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "acc02fb8417552138d887528929d4a40", "sha256": "0f9850c82bc41589e8ec7224f0eb0487ec7b1dbbd3d0e623013dd83d6295b8b1"}, "downloads": -1, "filename": "table_enforcer-0.4.4.tar.gz", "has_sig": false, "md5_digest": "acc02fb8417552138d887528929d4a40", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26594, "upload_time": "2018-02-15T20:56:39", "upload_time_iso_8601": "2018-02-15T20:56:39.718669Z", "url": "https://files.pythonhosted.org/packages/4a/af/a23b31e9ccbd934237ccddaaa4b2e59a0c9d6403049ec03e8bbc25bf3133/table_enforcer-0.4.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:43 2020"}