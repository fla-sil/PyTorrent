{"info": {"author": "Chris Cox", "author_email": "chrisrycx@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# DataBear\nGeneral purpose data aquistion, processing, and logging platform written in Python.\nDataBear is hardware independent, but is meant to be easily integrated via a custom\nhardware interface provided by the user.\n\n### Goals:\n* Easy to use - intuitive setup and configuration.\n* Versatile\n    * Use on any hardware device that runs Python.\n    * Compatible with most sensor output.\n* Extendible\n    * User can integrate platform with new sensor and methods.\n\n### Some potential usage scenarios:\nHere are some random ideas to give a sense for DataBear capabilities (some capabilities under development).\n* Run DataBear on a Raspberry Pi (https://www.raspberrypi.org/) to read a Modbus temperature sensor.  The sensor could be connected to a USB port on the Pi via an RS485 to USB converter and data could be read every second, averaged, and stored to CSV.\n* Integrate DataBear into an existing Linux based measurement platform, such as the Dyacon MDL-700 (https://dyacon.com). In this case, DataBear is utilized by pyMDL (https://github.com/dyacon/pyMDL) to schedule measurement and storage, while pyMDL specifies hardware configuration.\n\n### Ideal Datalogger Features vs Data Bear 1.2\n| Ideal Feature                                  | Data Bear       |\n| -------------                                  | ---------       |\n| Adjustable sampling rates for all measurements | &#9745;         |\n| Concurrent measurement of all sensors          |                 |\n| Adjustable rates of data storage               | &#9745;         |\n| Store metadata associated with data values     | &#9745;         |\n| Supports polled or continuously streaming sensors    | &#9745;         |\n\n### Installation\n* pip install databear\n\n### Usage\n1. Check to see if a class has been created for your sensor(s) \n in DataBear/sensors. Since this project is new, it is likely you \n will need to create a sensor class or modify an existing one (See \"Sensor Class Interface\").\n2. Create a class for your sensor(s) following the interface defined below.\nUse existing classes as examples or templates. Share your sensor class\nwith the DataBear project so others can use it.\n3. Create a new configuration file following the example shown in config.yaml.\n4. Create a short script to initialize and run DataBear. This script will \nregister your sensor(s) class with DataBear and load the configuration file.\nSee example.py for details. \n\n### Sensor Class Interface (V0.1)\nClass Name: (Format optional but recommended)\n* \\<manufacturer>\\<Model>\tExample - class dyaconWSD2:\n\nInstantiation (Mandatory)\n* Inputs:\n    * \u00e2\u20ac\u02dcname\u00e2\u20ac\u2122 - [string] User configurable sensor name\n    * \u00e2\u20ac\u02dcsettings\u00e2\u20ac\u2122 - [dictionary] A dictionary of settings that are necessary for mandatory methods and attributes. \n* Attributes:\n    * sn - [string] Sensor serial number specified in \u00e2\u20ac\u02dcsettings\u00e2\u20ac\u2122.\n    * frequency - [float] Sensor measurement frequency in seconds specified in \u00e2\u20ac\u02dcsettings\u00e2\u20ac\u2122 dictionary.\n    * maxfrequency - [float] Maximum frequency in seconds that the sensor can   measure. \n    * data - [dictionary] Stores data for each measurement.\n        * Initialize to {\\<key>: [ ] , ...} where \\<key> is the name of each measurement.\n    * Any other sensor specific setting.\n        * For example, some sensors/hardware may require certain settings like 'serial protocol' and 'duplex'.  \n* Errors\n    * A sensorConfigError should be raised if there is a missed setting.\n\nMethods (Mandatory)\n* \u00e2\u20ac\u02dcmeasure( )\u00e2\u20ac\u2122 - Implements coding required to obtain data for each measurement.\n    * No inputs\n    * Data for each measurement is added to the \u00e2\u20ac\u02dcdata\u00e2\u20ac\u2122 attribute.\n    * Data should consist of a tuple of the form (\\<timestamp>,\\<datavalue>)\n        * data[\\<measurement name>] = (\\<timestamp>,\\<datavalue>)\n* 'getdata(name, startdate, enddate)' - Retrieves data from the 'data' dictionary \n                                        for a measurement\n    * Return - [(timestamp,value),(timestamp,value),...]\n\n* \u00e2\u20ac\u02dccleardata(name, startdate, enddate)\u00e2\u20ac\u2122 - Clears data associated with a given\n                                          measurement.\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/chrisrycx/DataBear", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "databear", "package_url": "https://pypi.org/project/databear/", "platform": "", "project_url": "https://pypi.org/project/databear/", "project_urls": {"Homepage": "https://github.com/chrisrycx/DataBear"}, "release_url": "https://pypi.org/project/databear/1.2.0/", "requires_dist": ["pyyaml"], "requires_python": ">=3.6", "summary": "A Python based data logger", "version": "1.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>DataBear</h1>\n<p>General purpose data aquistion, processing, and logging platform written in Python.\nDataBear is hardware independent, but is meant to be easily integrated via a custom\nhardware interface provided by the user.</p>\n<h3>Goals:</h3>\n<ul>\n<li>Easy to use - intuitive setup and configuration.</li>\n<li>Versatile\n<ul>\n<li>Use on any hardware device that runs Python.</li>\n<li>Compatible with most sensor output.</li>\n</ul>\n</li>\n<li>Extendible\n<ul>\n<li>User can integrate platform with new sensor and methods.</li>\n</ul>\n</li>\n</ul>\n<h3>Some potential usage scenarios:</h3>\n<p>Here are some random ideas to give a sense for DataBear capabilities (some capabilities under development).</p>\n<ul>\n<li>Run DataBear on a Raspberry Pi (<a href=\"https://www.raspberrypi.org/\" rel=\"nofollow\">https://www.raspberrypi.org/</a>) to read a Modbus temperature sensor.  The sensor could be connected to a USB port on the Pi via an RS485 to USB converter and data could be read every second, averaged, and stored to CSV.</li>\n<li>Integrate DataBear into an existing Linux based measurement platform, such as the Dyacon MDL-700 (<a href=\"https://dyacon.com\" rel=\"nofollow\">https://dyacon.com</a>). In this case, DataBear is utilized by pyMDL (<a href=\"https://github.com/dyacon/pyMDL\" rel=\"nofollow\">https://github.com/dyacon/pyMDL</a>) to schedule measurement and storage, while pyMDL specifies hardware configuration.</li>\n</ul>\n<h3>Ideal Datalogger Features vs Data Bear 1.2</h3>\n<table>\n<thead>\n<tr>\n<th>Ideal Feature</th>\n<th>Data Bear</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Adjustable sampling rates for all measurements</td>\n<td>\u2611</td>\n</tr>\n<tr>\n<td>Concurrent measurement of all sensors</td>\n<td></td>\n</tr>\n<tr>\n<td>Adjustable rates of data storage</td>\n<td>\u2611</td>\n</tr>\n<tr>\n<td>Store metadata associated with data values</td>\n<td>\u2611</td>\n</tr>\n<tr>\n<td>Supports polled or continuously streaming sensors</td>\n<td>\u2611</td>\n</tr></tbody></table>\n<h3>Installation</h3>\n<ul>\n<li>pip install databear</li>\n</ul>\n<h3>Usage</h3>\n<ol>\n<li>Check to see if a class has been created for your sensor(s)\nin DataBear/sensors. Since this project is new, it is likely you\nwill need to create a sensor class or modify an existing one (See \"Sensor Class Interface\").</li>\n<li>Create a class for your sensor(s) following the interface defined below.\nUse existing classes as examples or templates. Share your sensor class\nwith the DataBear project so others can use it.</li>\n<li>Create a new configuration file following the example shown in config.yaml.</li>\n<li>Create a short script to initialize and run DataBear. This script will\nregister your sensor(s) class with DataBear and load the configuration file.\nSee example.py for details.</li>\n</ol>\n<h3>Sensor Class Interface (V0.1)</h3>\n<p>Class Name: (Format optional but recommended)</p>\n<ul>\n<li>&lt;manufacturer&gt;&lt;Model&gt;\tExample - class dyaconWSD2:</li>\n</ul>\n<p>Instantiation (Mandatory)</p>\n<ul>\n<li>Inputs:\n<ul>\n<li>\u00e2\u20ac\u02dcname\u00e2\u20ac\u2122 - [string] User configurable sensor name</li>\n<li>\u00e2\u20ac\u02dcsettings\u00e2\u20ac\u2122 - [dictionary] A dictionary of settings that are necessary for mandatory methods and attributes.</li>\n</ul>\n</li>\n<li>Attributes:\n<ul>\n<li>sn - [string] Sensor serial number specified in \u00e2\u20ac\u02dcsettings\u00e2\u20ac\u2122.</li>\n<li>frequency - [float] Sensor measurement frequency in seconds specified in \u00e2\u20ac\u02dcsettings\u00e2\u20ac\u2122 dictionary.</li>\n<li>maxfrequency - [float] Maximum frequency in seconds that the sensor can   measure.</li>\n<li>data - [dictionary] Stores data for each measurement.\n<ul>\n<li>Initialize to {&lt;key&gt;: [ ] , ...} where &lt;key&gt; is the name of each measurement.</li>\n</ul>\n</li>\n<li>Any other sensor specific setting.\n<ul>\n<li>For example, some sensors/hardware may require certain settings like 'serial protocol' and 'duplex'.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Errors\n<ul>\n<li>A sensorConfigError should be raised if there is a missed setting.</li>\n</ul>\n</li>\n</ul>\n<p>Methods (Mandatory)</p>\n<ul>\n<li>\n<p>\u00e2\u20ac\u02dcmeasure( )\u00e2\u20ac\u2122 - Implements coding required to obtain data for each measurement.</p>\n<ul>\n<li>No inputs</li>\n<li>Data for each measurement is added to the \u00e2\u20ac\u02dcdata\u00e2\u20ac\u2122 attribute.</li>\n<li>Data should consist of a tuple of the form (&lt;timestamp&gt;,&lt;datavalue&gt;)\n<ul>\n<li>data[&lt;measurement name&gt;] = (&lt;timestamp&gt;,&lt;datavalue&gt;)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>'getdata(name, startdate, enddate)' - Retrieves data from the 'data' dictionary\nfor a measurement</p>\n<ul>\n<li>Return - [(timestamp,value),(timestamp,value),...]</li>\n</ul>\n</li>\n<li>\n<p>\u00e2\u20ac\u02dccleardata(name, startdate, enddate)\u00e2\u20ac\u2122 - Clears data associated with a given\nmeasurement.</p>\n</li>\n</ul>\n\n          </div>"}, "last_serial": 6946641, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "10e73369703e0485e731eb6c345b4a0f", "sha256": "afc3cb21820dddcf1caf4236b8157203da4ade4b96018a0553d46a50ff80c94b"}, "downloads": -1, "filename": "databear-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "10e73369703e0485e731eb6c345b4a0f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6974, "upload_time": "2020-01-07T22:13:02", "upload_time_iso_8601": "2020-01-07T22:13:02.438983Z", "url": "https://files.pythonhosted.org/packages/76/77/b446c4feff7cf2c92efec036c3bb386d2653e326afbf5b2d1b2778463404/databear-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8cf8372669f4b88b99f4f90d94e30f73", "sha256": "c5bb76cb8b0928857831e269c681913080737ec1f0a3ae63ad0ef6381ca21b86"}, "downloads": -1, "filename": "databear-0.1.0.tar.gz", "has_sig": false, "md5_digest": "8cf8372669f4b88b99f4f90d94e30f73", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5072, "upload_time": "2020-01-07T22:13:04", "upload_time_iso_8601": "2020-01-07T22:13:04.675934Z", "url": "https://files.pythonhosted.org/packages/bf/28/f2b56f730de05c19f2f7aea9cbf1731addcdbdb055c7a50c9b1408fc493e/databear-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "713a866fa2357509c12cb274c3dd21ab", "sha256": "3ceec7d9c060fe86592dc17f6e335a8a383fdc6e97b581e797f5c4133bb076f6"}, "downloads": -1, "filename": "databear-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "713a866fa2357509c12cb274c3dd21ab", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8314, "upload_time": "2020-01-23T21:48:33", "upload_time_iso_8601": "2020-01-23T21:48:33.960157Z", "url": "https://files.pythonhosted.org/packages/d1/80/c1a1132200320b6cc6e54d5886097e37091d84af9832d989446c42073a53/databear-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9c1c8b1e5becc4ffebb970b080401286", "sha256": "7a72167d21e65772bc03a7b266fea56e1fe188429e29825e872e0386e37bc2b9"}, "downloads": -1, "filename": "databear-0.2.0.tar.gz", "has_sig": false, "md5_digest": "9c1c8b1e5becc4ffebb970b080401286", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6230, "upload_time": "2020-01-23T21:48:35", "upload_time_iso_8601": "2020-01-23T21:48:35.988559Z", "url": "https://files.pythonhosted.org/packages/b3/aa/37871c18243feef64ff9e3457eb6a51a8a1c4d4c4dd207f08247c50d11c0/databear-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "b73b1266c1a196542430ba23d129a1e5", "sha256": "24851ceae2c391110748214e7cb36874aea2f3824e51c48d4825619d260f0fa5"}, "downloads": -1, "filename": "databear-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b73b1266c1a196542430ba23d129a1e5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8537, "upload_time": "2020-01-28T19:31:39", "upload_time_iso_8601": "2020-01-28T19:31:39.379775Z", "url": "https://files.pythonhosted.org/packages/24/d9/33a5cad71d30a6f2768566ec23802631107140cd8f1c0570e9e25e1de19c/databear-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0334309654baceccdbcf10880651c55e", "sha256": "f0a4d71afa29925a9f8ee60605b7b7c634e2a1968054884f6466f99c74764ab9"}, "downloads": -1, "filename": "databear-0.2.1.tar.gz", "has_sig": false, "md5_digest": "0334309654baceccdbcf10880651c55e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6457, "upload_time": "2020-01-28T19:31:42", "upload_time_iso_8601": "2020-01-28T19:31:42.225413Z", "url": "https://files.pythonhosted.org/packages/01/f9/58f9ea2fb59c7f6541755ea848b377dae8122c26648449823d743667cfb4/databear-0.2.1.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "a1216896ce6068ea05b3bacfc14e4303", "sha256": "48f0c67fa24560bd6a57fbe00b7406c3cf1f1f4683a1f55ab953894a8f283758"}, "downloads": -1, "filename": "databear-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a1216896ce6068ea05b3bacfc14e4303", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 12384, "upload_time": "2020-02-07T20:32:50", "upload_time_iso_8601": "2020-02-07T20:32:50.837139Z", "url": "https://files.pythonhosted.org/packages/0f/6e/4ae817a8d1b12af981d3f91065b911eb33d1b9fe96e415334874e2a08a2b/databear-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e096d72abf65e3e2fcd928ea79d42943", "sha256": "670f4e988497ca3b9aa722ae0e0137a12cef7b818514e297f34a512f27138608"}, "downloads": -1, "filename": "databear-1.0.0.tar.gz", "has_sig": false, "md5_digest": "e096d72abf65e3e2fcd928ea79d42943", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6868, "upload_time": "2020-02-07T20:32:54", "upload_time_iso_8601": "2020-02-07T20:32:54.063196Z", "url": "https://files.pythonhosted.org/packages/42/68/21e5271ec7744b9c9a2005695986b79d27cda4f5d96e8bf80773f587f6c3/databear-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "1c4268e2adbd4c8d280aa784f35b11bb", "sha256": "451a37f8be249d1277d1a45f58cdf619e3df2773a7dcafe880ffd50d8a64e536"}, "downloads": -1, "filename": "databear-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "1c4268e2adbd4c8d280aa784f35b11bb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 18362, "upload_time": "2020-02-21T19:43:49", "upload_time_iso_8601": "2020-02-21T19:43:49.221220Z", "url": "https://files.pythonhosted.org/packages/ba/a3/2ce4d6d2b4acdb59b870a4b44e577e6e5de88f972b9703b6ae1d92b7c380/databear-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "60ba91201cb09670b1d3e938389a73d2", "sha256": "bc5811ab81a6aa8a2c516ee10eb78c728daa66ece2c8ba704e2b66b9d6414044"}, "downloads": -1, "filename": "databear-1.1.0.tar.gz", "has_sig": false, "md5_digest": "60ba91201cb09670b1d3e938389a73d2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8847, "upload_time": "2020-02-21T19:43:52", "upload_time_iso_8601": "2020-02-21T19:43:52.532302Z", "url": "https://files.pythonhosted.org/packages/df/75/12dafbaa92b1c22be79840b9afad089f7505484c7145f1fb40f77a8512b9/databear-1.1.0.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "36836cc2d84d301fd525eef16c209c6f", "sha256": "175051c6e20f5445b9524225867aaf9991e7c05af66ef2ec43131d41c645fabe"}, "downloads": -1, "filename": "databear-1.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "36836cc2d84d301fd525eef16c209c6f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 20199, "upload_time": "2020-04-03T21:25:21", "upload_time_iso_8601": "2020-04-03T21:25:21.720215Z", "url": "https://files.pythonhosted.org/packages/34/c0/fa2c17ff8c74d0631df217a7c98d5812eab707c0f527e6dda8a9556fa58a/databear-1.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b018c97964a00cac221e145c23771c31", "sha256": "8a60253dabb91b10b0b44bc42e66cae7ff645e62dd258facb9267d2ff2fbbc5f"}, "downloads": -1, "filename": "databear-1.2.0.tar.gz", "has_sig": false, "md5_digest": "b018c97964a00cac221e145c23771c31", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12589, "upload_time": "2020-04-03T21:25:22", "upload_time_iso_8601": "2020-04-03T21:25:22.835689Z", "url": "https://files.pythonhosted.org/packages/70/df/84de228b113131693266bc94d574707e545c17aea65fc86f6a1873333bdd/databear-1.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "36836cc2d84d301fd525eef16c209c6f", "sha256": "175051c6e20f5445b9524225867aaf9991e7c05af66ef2ec43131d41c645fabe"}, "downloads": -1, "filename": "databear-1.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "36836cc2d84d301fd525eef16c209c6f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 20199, "upload_time": "2020-04-03T21:25:21", "upload_time_iso_8601": "2020-04-03T21:25:21.720215Z", "url": "https://files.pythonhosted.org/packages/34/c0/fa2c17ff8c74d0631df217a7c98d5812eab707c0f527e6dda8a9556fa58a/databear-1.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b018c97964a00cac221e145c23771c31", "sha256": "8a60253dabb91b10b0b44bc42e66cae7ff645e62dd258facb9267d2ff2fbbc5f"}, "downloads": -1, "filename": "databear-1.2.0.tar.gz", "has_sig": false, "md5_digest": "b018c97964a00cac221e145c23771c31", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12589, "upload_time": "2020-04-03T21:25:22", "upload_time_iso_8601": "2020-04-03T21:25:22.835689Z", "url": "https://files.pythonhosted.org/packages/70/df/84de228b113131693266bc94d574707e545c17aea65fc86f6a1873333bdd/databear-1.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:40:30 2020"}