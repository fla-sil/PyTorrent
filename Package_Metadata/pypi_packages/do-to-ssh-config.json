{"info": {"author": "Alexandros Solanos", "author_email": "solanosalex@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Digital ocean -> ssh config\n\nDepends on https://github.com/koalalorenzo/python-digitalocean which can be installed with `pip3 install -U python-digitalocean`\n\nThis python 3 script will help you keep your ssh config in sync with your digital ocean droplets\n\n```bash\n$ python3 do_to_ssh_config.py production\n\n\u00b7 Reading /home/alex/.config/do_to_ssh_config/production.json\n\u00b7 Parsing /home/alex/.ssh/config\n\u00b7 Fetching droplets from DO\n\u00b7 Writing into your ssh config file\n\n\u2713 Done, 11 droplets synced\n```\n\n## Features\n\n* Supports different ssh keys for each droplet, depending on the DO tags of the droplet\n* Works with different configurations and can write in different sections of your ssh config\n\n## How to\n\n### Step 1: Create the json configuration file\nSave this at `~/.config/do_to_ssh_config/<name>.json`, where `<name>` is how you want to call it, e.g. `production` or `testing` or anything else. For this example I will use `production`.\n\n```json\n{\n    \"token\": \"DIGITAL_OCEAN_READ_ONLY_TOKEN_HERE\",\n    \"keys\": {\n        \"tagToKey\": {\n        },\n        \"default\": {\n            \"key\": \"common\",\n            \"priority\": 0\n        }\n    },\n    \"startMark\": \"# DO production\",\n    \"endMark\": \"# /DO production\",\n    \"hostPrefix\": \"do-prod-\"\n}\n```\n*Note*: This is the simplest possible configuration file that uses the same key for every droplet and the droplet name as `Host`, for more options, read on.\n\n1. Generate a new personal DO API read-only access token [here](https://cloud.digitalocean.com/account/api/tokens)\n2. `hostPrefix` is what prefix to add in the `Host` key in your ssh config for each droplet loaded through this configuration, can be anything you want\n\n### Step 2: Add the 2 marks in your ssh config\nThe above json configuration contains the `startMark` and `endMark`. These should be somewhere inside your ssh configuration and can be whatever you want (start with `#` for ssh config comments, though):\n```ssh\n# DO production\n# /DO production\n```\n\nBetween these 2 marks the script will **delete** everything and add the new entries. Be careful not to add your own hosts between these 2 marks.\n\n<p align=\"center\">\n  <img width=\"460\" height=\"300\" src=\"https://media.giphy.com/media/l0HUldzuCa0S16SkM/giphy.gif\">\n</p>\n\n### Step 3: Run the script\n\n```bash\n$ python3 do_to_ssh_config.py production\n\n\u00b7 Reading /home/alex/.config/do_to_ssh_config/production.json\n\u00b7 Parsing /home/alex/.ssh/config\n\u00b7 Fetching droplets from DO\n\u00b7 Writing into your ssh config file\n\n\u2713 Done, 11 droplets synced\n```\n\nNow your ssh config will look like this:\n```ssh\n# DO production\nHost do-prod-control-center1517024146\n    # control-center1517024146\n    Hostname X.X.X.X\n    IdentityFile ~/.ssh/common\n    User user\nHost do-prod-control-center1517027030\n    # control-center1517027030\n    Hostname X.X.X.X\n    IdentityFile ~/.ssh/common\n    User user\n... 9 more entries\n# /DO production\n```\n\nIf you have autogenerated ugly `Host` names derived from the droplet names, you can make it work with the droplet tags instead; read on.\n\n## I want to use a different ssh key, not `common`!\n\n* Change the `keys.default.key` setting\n\n## I want to use a different ssh key per droplet tag!\n\n* Change the `keys.tagToKey` setting and add in it entries like:\n\n```json\n\"control-center\": {\n    \"key\": \"cc_prv\",\n    \"priority\": 7\n},\n\"consul-server\": {\n    \"key\": \"cs_prv\",\n    \"priority\": 6\n},\n\"postgres-master\": {\n    \"key\": \"common\",\n    \"priority\": 5\n}\n```\n\nThe final config will look like this:\n\n```json\n{\n    \"token\": \"DIGITAL_OCEAN_READ_ONLY_TOKEN_HERE\",\n    \"keys\": {\n        \"tagToKey\": {\n            \"control-center\": {\n                \"key\": \"cc_prv\",\n                \"priority\": 7\n            },\n            \"consul-server\": {\n                \"key\": \"cs_prv\",\n                \"priority\": 6\n            },\n            \"postgres-master\": {\n                \"key\": \"common\",\n                \"priority\": 5\n            }\n        },\n        \"default\": {\n            \"key\": \"common\",\n            \"priority\": 0\n        }\n    },\n    \"startMark\": \"# DO production\",\n    \"endMark\": \"# /DO production\",\n    \"hostPrefix\": \"do-prod-\"\n}\n```\n\n*Important*: A droplet can have more than 1 tag, that's why there's a field called `priority` there. In the above example, if a droplet has both the `control-center` and `consul-server` tags, it will use the key with the higher priority (here `control-center`). If a droplet has no tags or its tags do not appear in `tagToKey`, it will use the default key.\n\nFor the droplets that match a specific tag, now the `Host` in the ssh config will have the name of the tag, not the droplet name:\n\n```ssh\n# DO production\nHost do-prod-control-center\n    # control-center1517024146\n    Hostname X.X.X.X\n    IdentityFile ~/.ssh/cc_prv\n    User user\nHost do-prod-control-center2\n    # control-center1517027030\n    Hostname X.X.X.X\n    IdentityFile ~/.ssh/cc_prv\n    User user\n... more entries\n# /DO production\n```\n\nThis is convenient for large environments where the droplet names are autogenerated\n\n*Note*: The droplet name is still visible as a comment in the first line of each entry\n\n*Note*: As shown in the above example, if 2 or more droplets share the same tag, an ascending number is appended to the `Host` value.\n\nNow you can see everything easily using ssh's tab completion, and connect anywhere:\n```\n$ ssh do-prod- <hit TAB key twice>\n\ndo-prod-control-center   do-prod-mongodb  do-prod-load-balancer    do-prod-nodejs2          do-prod-postgres-slave   do-prod-blog\ndo-prod-control-center2  do-prod-landing-page     do-prod-nodejs           do-prod-postgres-master  do-prod-redis            \n```\n\n## I have production *and* testing and I work in 10 different companies!\n\nSimply create different configuration files under `~/.config/do_to_ssh_config/`, one for each use case of yours, like `production.json` and `testing.json`. It will be useful to have a different `hostPrefix` for each use case.\n\nAlso, add the different markings in your ssh config file, e.g.:\n\n```ssh\n# DO production\n# /DO production\n\n# DO testing\n# /DO testing\n```\n\nNow if you run\n```bash\n$ python3 do_to_ssh_config.py production\n```\nit will go on and read from `production.json` and write in the corresponding marking inside your ssh config. And if you run\n```bash\n$ python3 do_to_ssh_config.py testing\n```\nit will go on and read from `testing.json` and write in the corresponding marking.\n\n\n## Can I safely re-run the script any times I want?\n\nYes, provided that you haven't included any entries of yours between the markings you've specified in the configuration. Everything between the markings is deleted each time the script runs.\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/hytromo/digital-ocean-to-ssh-config", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "do-to-ssh-config", "package_url": "https://pypi.org/project/do-to-ssh-config/", "platform": "", "project_url": "https://pypi.org/project/do-to-ssh-config/", "project_urls": {"Homepage": "https://github.com/hytromo/digital-ocean-to-ssh-config"}, "release_url": "https://pypi.org/project/do-to-ssh-config/0.0.4/", "requires_dist": ["python-digitalocean"], "requires_python": "", "summary": "Combine DO droplets with your ssh configuration", "version": "0.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Digital ocean -&gt; ssh config</h1>\n<p>Depends on <a href=\"https://github.com/koalalorenzo/python-digitalocean\" rel=\"nofollow\">https://github.com/koalalorenzo/python-digitalocean</a> which can be installed with <code>pip3 install -U python-digitalocean</code></p>\n<p>This python 3 script will help you keep your ssh config in sync with your digital ocean droplets</p>\n<pre>$ python3 do_to_ssh_config.py production\n\n\u00b7 Reading /home/alex/.config/do_to_ssh_config/production.json\n\u00b7 Parsing /home/alex/.ssh/config\n\u00b7 Fetching droplets from DO\n\u00b7 Writing into your ssh config file\n\n\u2713 Done, <span class=\"m\">11</span> droplets synced\n</pre>\n<h2>Features</h2>\n<ul>\n<li>Supports different ssh keys for each droplet, depending on the DO tags of the droplet</li>\n<li>Works with different configurations and can write in different sections of your ssh config</li>\n</ul>\n<h2>How to</h2>\n<h3>Step 1: Create the json configuration file</h3>\n<p>Save this at <code>~/.config/do_to_ssh_config/&lt;name&gt;.json</code>, where <code>&lt;name&gt;</code> is how you want to call it, e.g. <code>production</code> or <code>testing</code> or anything else. For this example I will use <code>production</code>.</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"token\"</span><span class=\"p\">:</span> <span class=\"s2\">\"DIGITAL_OCEAN_READ_ONLY_TOKEN_HERE\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"keys\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"tagToKey\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"p\">},</span>\n        <span class=\"nt\">\"default\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"nt\">\"key\"</span><span class=\"p\">:</span> <span class=\"s2\">\"common\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"priority\"</span><span class=\"p\">:</span> <span class=\"mi\">0</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">},</span>\n    <span class=\"nt\">\"startMark\"</span><span class=\"p\">:</span> <span class=\"s2\">\"# DO production\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"endMark\"</span><span class=\"p\">:</span> <span class=\"s2\">\"# /DO production\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"hostPrefix\"</span><span class=\"p\">:</span> <span class=\"s2\">\"do-prod-\"</span>\n<span class=\"p\">}</span>\n</pre>\n<p><em>Note</em>: This is the simplest possible configuration file that uses the same key for every droplet and the droplet name as <code>Host</code>, for more options, read on.</p>\n<ol>\n<li>Generate a new personal DO API read-only access token <a href=\"https://cloud.digitalocean.com/account/api/tokens\" rel=\"nofollow\">here</a></li>\n<li><code>hostPrefix</code> is what prefix to add in the <code>Host</code> key in your ssh config for each droplet loaded through this configuration, can be anything you want</li>\n</ol>\n<h3>Step 2: Add the 2 marks in your ssh config</h3>\n<p>The above json configuration contains the <code>startMark</code> and <code>endMark</code>. These should be somewhere inside your ssh configuration and can be whatever you want (start with <code>#</code> for ssh config comments, though):</p>\n<pre># DO production\n# /DO production\n</pre>\n<p>Between these 2 marks the script will <strong>delete</strong> everything and add the new entries. Be careful not to add your own hosts between these 2 marks.</p>\n<p align=\"center\">\n  <img height=\"300\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3f1871974f6bf5b952cd13bba65c85fe4364b352/68747470733a2f2f6d656469612e67697068792e636f6d2f6d656469612f6c3048556c647a75436130533136536b4d2f67697068792e676966\" width=\"460\">\n</p>\n<h3>Step 3: Run the script</h3>\n<pre>$ python3 do_to_ssh_config.py production\n\n\u00b7 Reading /home/alex/.config/do_to_ssh_config/production.json\n\u00b7 Parsing /home/alex/.ssh/config\n\u00b7 Fetching droplets from DO\n\u00b7 Writing into your ssh config file\n\n\u2713 Done, <span class=\"m\">11</span> droplets synced\n</pre>\n<p>Now your ssh config will look like this:</p>\n<pre># DO production\nHost do-prod-control-center1517024146\n    # control-center1517024146\n    Hostname X.X.X.X\n    IdentityFile ~/.ssh/common\n    User user\nHost do-prod-control-center1517027030\n    # control-center1517027030\n    Hostname X.X.X.X\n    IdentityFile ~/.ssh/common\n    User user\n... 9 more entries\n# /DO production\n</pre>\n<p>If you have autogenerated ugly <code>Host</code> names derived from the droplet names, you can make it work with the droplet tags instead; read on.</p>\n<h2>I want to use a different ssh key, not <code>common</code>!</h2>\n<ul>\n<li>Change the <code>keys.default.key</code> setting</li>\n</ul>\n<h2>I want to use a different ssh key per droplet tag!</h2>\n<ul>\n<li>Change the <code>keys.tagToKey</code> setting and add in it entries like:</li>\n</ul>\n<pre><span class=\"s2\">\"control-center\"</span><span class=\"err\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"key\"</span><span class=\"p\">:</span> <span class=\"s2\">\"cc_prv\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"priority\"</span><span class=\"p\">:</span> <span class=\"mi\">7</span>\n<span class=\"p\">}</span><span class=\"err\">,</span>\n<span class=\"s2\">\"consul-server\"</span><span class=\"err\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"key\"</span><span class=\"p\">:</span> <span class=\"s2\">\"cs_prv\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"priority\"</span><span class=\"p\">:</span> <span class=\"mi\">6</span>\n<span class=\"p\">}</span><span class=\"err\">,</span>\n<span class=\"s2\">\"postgres-master\"</span><span class=\"err\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"key\"</span><span class=\"p\">:</span> <span class=\"s2\">\"common\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"priority\"</span><span class=\"p\">:</span> <span class=\"mi\">5</span>\n<span class=\"p\">}</span>\n</pre>\n<p>The final config will look like this:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"token\"</span><span class=\"p\">:</span> <span class=\"s2\">\"DIGITAL_OCEAN_READ_ONLY_TOKEN_HERE\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"keys\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"tagToKey\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"nt\">\"control-center\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                <span class=\"nt\">\"key\"</span><span class=\"p\">:</span> <span class=\"s2\">\"cc_prv\"</span><span class=\"p\">,</span>\n                <span class=\"nt\">\"priority\"</span><span class=\"p\">:</span> <span class=\"mi\">7</span>\n            <span class=\"p\">},</span>\n            <span class=\"nt\">\"consul-server\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                <span class=\"nt\">\"key\"</span><span class=\"p\">:</span> <span class=\"s2\">\"cs_prv\"</span><span class=\"p\">,</span>\n                <span class=\"nt\">\"priority\"</span><span class=\"p\">:</span> <span class=\"mi\">6</span>\n            <span class=\"p\">},</span>\n            <span class=\"nt\">\"postgres-master\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                <span class=\"nt\">\"key\"</span><span class=\"p\">:</span> <span class=\"s2\">\"common\"</span><span class=\"p\">,</span>\n                <span class=\"nt\">\"priority\"</span><span class=\"p\">:</span> <span class=\"mi\">5</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">},</span>\n        <span class=\"nt\">\"default\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"nt\">\"key\"</span><span class=\"p\">:</span> <span class=\"s2\">\"common\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"priority\"</span><span class=\"p\">:</span> <span class=\"mi\">0</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">},</span>\n    <span class=\"nt\">\"startMark\"</span><span class=\"p\">:</span> <span class=\"s2\">\"# DO production\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"endMark\"</span><span class=\"p\">:</span> <span class=\"s2\">\"# /DO production\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"hostPrefix\"</span><span class=\"p\">:</span> <span class=\"s2\">\"do-prod-\"</span>\n<span class=\"p\">}</span>\n</pre>\n<p><em>Important</em>: A droplet can have more than 1 tag, that's why there's a field called <code>priority</code> there. In the above example, if a droplet has both the <code>control-center</code> and <code>consul-server</code> tags, it will use the key with the higher priority (here <code>control-center</code>). If a droplet has no tags or its tags do not appear in <code>tagToKey</code>, it will use the default key.</p>\n<p>For the droplets that match a specific tag, now the <code>Host</code> in the ssh config will have the name of the tag, not the droplet name:</p>\n<pre># DO production\nHost do-prod-control-center\n    # control-center1517024146\n    Hostname X.X.X.X\n    IdentityFile ~/.ssh/cc_prv\n    User user\nHost do-prod-control-center2\n    # control-center1517027030\n    Hostname X.X.X.X\n    IdentityFile ~/.ssh/cc_prv\n    User user\n... more entries\n# /DO production\n</pre>\n<p>This is convenient for large environments where the droplet names are autogenerated</p>\n<p><em>Note</em>: The droplet name is still visible as a comment in the first line of each entry</p>\n<p><em>Note</em>: As shown in the above example, if 2 or more droplets share the same tag, an ascending number is appended to the <code>Host</code> value.</p>\n<p>Now you can see everything easily using ssh's tab completion, and connect anywhere:</p>\n<pre><code>$ ssh do-prod- &lt;hit TAB key twice&gt;\n\ndo-prod-control-center   do-prod-mongodb  do-prod-load-balancer    do-prod-nodejs2          do-prod-postgres-slave   do-prod-blog\ndo-prod-control-center2  do-prod-landing-page     do-prod-nodejs           do-prod-postgres-master  do-prod-redis            \n</code></pre>\n<h2>I have production <em>and</em> testing and I work in 10 different companies!</h2>\n<p>Simply create different configuration files under <code>~/.config/do_to_ssh_config/</code>, one for each use case of yours, like <code>production.json</code> and <code>testing.json</code>. It will be useful to have a different <code>hostPrefix</code> for each use case.</p>\n<p>Also, add the different markings in your ssh config file, e.g.:</p>\n<pre># DO production\n# /DO production\n\n# DO testing\n# /DO testing\n</pre>\n<p>Now if you run</p>\n<pre>$ python3 do_to_ssh_config.py production\n</pre>\n<p>it will go on and read from <code>production.json</code> and write in the corresponding marking inside your ssh config. And if you run</p>\n<pre>$ python3 do_to_ssh_config.py testing\n</pre>\n<p>it will go on and read from <code>testing.json</code> and write in the corresponding marking.</p>\n<h2>Can I safely re-run the script any times I want?</h2>\n<p>Yes, provided that you haven't included any entries of yours between the markings you've specified in the configuration. Everything between the markings is deleted each time the script runs.</p>\n\n          </div>"}, "last_serial": 4257580, "releases": {"0.0.4": [{"comment_text": "", "digests": {"md5": "e029744952640ef9f46ea0d3cee19a74", "sha256": "0bc87b502e455eb28c4c53c3d2c1d3b6ea2d4d8a871679c1a0b2fe9ce2af029f"}, "downloads": -1, "filename": "do_to_ssh_config-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "e029744952640ef9f46ea0d3cee19a74", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5419, "upload_time": "2018-09-10T12:56:58", "upload_time_iso_8601": "2018-09-10T12:56:58.650544Z", "url": "https://files.pythonhosted.org/packages/0d/0c/577a5c1cb31f2a12e0961c7df09087532c4b914334d40de434c6e0d8b9d7/do_to_ssh_config-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3aa33a94b39fd06f5b406a31f17b4bd1", "sha256": "669dda332a88fd7d87383f64a8997a7c3b9f758b8394157415ae3814408f4c6d"}, "downloads": -1, "filename": "do_to_ssh_config-0.0.4.tar.gz", "has_sig": false, "md5_digest": "3aa33a94b39fd06f5b406a31f17b4bd1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5398, "upload_time": "2018-09-10T12:57:00", "upload_time_iso_8601": "2018-09-10T12:57:00.093951Z", "url": "https://files.pythonhosted.org/packages/d1/19/781e1440c00d97a22e1b4c9e0ce09fed1a8741ba46b6d38cc887fe86c7ed/do_to_ssh_config-0.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e029744952640ef9f46ea0d3cee19a74", "sha256": "0bc87b502e455eb28c4c53c3d2c1d3b6ea2d4d8a871679c1a0b2fe9ce2af029f"}, "downloads": -1, "filename": "do_to_ssh_config-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "e029744952640ef9f46ea0d3cee19a74", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5419, "upload_time": "2018-09-10T12:56:58", "upload_time_iso_8601": "2018-09-10T12:56:58.650544Z", "url": "https://files.pythonhosted.org/packages/0d/0c/577a5c1cb31f2a12e0961c7df09087532c4b914334d40de434c6e0d8b9d7/do_to_ssh_config-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3aa33a94b39fd06f5b406a31f17b4bd1", "sha256": "669dda332a88fd7d87383f64a8997a7c3b9f758b8394157415ae3814408f4c6d"}, "downloads": -1, "filename": "do_to_ssh_config-0.0.4.tar.gz", "has_sig": false, "md5_digest": "3aa33a94b39fd06f5b406a31f17b4bd1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5398, "upload_time": "2018-09-10T12:57:00", "upload_time_iso_8601": "2018-09-10T12:57:00.093951Z", "url": "https://files.pythonhosted.org/packages/d1/19/781e1440c00d97a22e1b4c9e0ce09fed1a8741ba46b6d38cc887fe86c7ed/do_to_ssh_config-0.0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:12 2020"}