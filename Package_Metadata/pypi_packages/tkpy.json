{"info": {"author": "didadadida93", "author_email": "didadadida93@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 1 - Planning", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Utilities"], "description": "---  \n# tkpy\n\n[Travian: Kingdom](https://www.kingdoms.com) (TK) utilities for your need. It provide several object that mostly used on TK such as `Map`, `Villages`, `Notepad`, and `Farmlist`.  \n\n[![Python 3.6](https://img.shields.io/badge/python-3.6+-blue.svg)](https://www.python.org/downloads/release/python-367/) [![Build Status](https://travis-ci.org/didadadida93/tkpy.svg?branch=master)](https://travis-ci.org/didadadida93/tkpy) [![codecov](https://codecov.io/gh/didadadida93/tkpy/branch/master/graph/badge.svg)](https://codecov.io/gh/didadadida93/tkpy)  \n\n---  \n# Installation  \n>It is recommended to use [virtualenv](https://docs.python-guide.org/dev/virtualenvs/).\n\nSince `tkpy` depend on `primordial` package, first install [primordial package](https://github.com/lijok/primordial).  \nAfter that, run `tkpy-init` for create database that will be used for storing `Gameworld` object.\n\n```sh\n(venv)$ pip install git+https://github.com/lijok/primordial.git\n(venv)$ pip install tkpy\n(venv)$ tkpy-init\n```\n\n---  \n# Getting started  \n`tkpy` need `Gameworld` object so it can get data from TK. Use `login` function for retrieve `Gameworld` object.  \n```python\nfrom tkpy import login\n\ndriver = login(email='your@email.com', password='your password', gameworld='com12')\n\n# login as sitter or dual\ndriver = login(\n    email='your@email.com',\n    password='your password',\n    gameworld='dual/sitter gameworld',\n    avatar='avatar name of sitter/dual account'\n)\n\n# once you have `Gameworld` object, you can use another object of tkpy.\n\nfrom tkpy import Map\n\nm = Map(driver)\nm.pull() # pulling map data\n\nm.coordinate(0, 0)\n<Cell({'id': '536887296', 'landscape': '9013', 'owner': '0'})>\n\nunoccupied_oasis_list = [oasis for oasis in m.oasis if oasis['oasis']['oasisStatus'] == '3']\nunoccupied_oasis_list[0]\n<Cell({'id': '535019499', 'landscape': '2755', 'owner': '0', 'oasis': {'bonus': {'1': 0, ...}, ...}...})>\n\n```  \n---  \n# Usage  \n## Map  \n  * `Map` object provide you an easy way to access data from TK map by using `pull` method.\n\n  ```python\n  from tkpy import Map\n\n  m = Map(driver)\n  m.pull()\n  ```\n\n  * Once you pulling map data, you can access every cell by using `coordinate` method.\n\n  ```python\n  m.coordinate(0, 0)\n  <Cell({'id': '536887296', 'landscape': '9013', 'owner': '0'})>\n  ```\n\n  * Since TK provide you player data, and kingdom data when you pulling map data, `Map` object also provide you easy way to access this kind of data.\n\n  ```python\n  m.player('player name')\n  <Player({'name': 'player name', 'country': 'en', 'tribeId': '1', ...})>\n\n  m.kingdom('kingdom name')\n  <Kingdom({'tag': 'kingdom name', 'kingdomId': '9999'})>\n  ```\n\n  * `Map` object have property that act as generator function and yield `Cell` object so you can get all data from every cell.\n\n  ```python\n  cell_list = list(m.cell)\n  ```  \n  > Side note for `Map.cell` property:  \n  > Some `Cell` object have different data. Once with village data while another didn't have village data.  \n  > Finding specific cell through `Map.cell` property may cause `KeyError Exception`. To prevent this use `try except` clause.\n  >\n  > ```python\n  > for cell in m.cell:\n  >     try:\n  >         village = cell['village']\n  >     except KeyError: # this cell didn't have village data\n  >         continue\n  >     ...\n  > ```\n\n  * `Map` object also have property that filter cell data so it only give specific data.\n\n  ```python\n  # make a list of cell that have village data on it\n  villages = list(m.villages)\n\n  # make a list of cell that have oasis data on it\n  oasis = list(m.oasis)\n\n  # make a list of cell that have 15c and 9c but didn't have village data on it (unsettled croppers)\n  croppers = [tile for tile in m.tiles if tile['resType'] == '3339' or tile['resType'] == '11115']\n\n  # make a list of cell that have village data on it and have population lower than 100\n  village_list = [village for village in m.villages if int(village['village']['population']) < 100]\n  ```\n\n  * There is a property for generate player and kingdom data too\n\n  ```python\n  # make a list of inactive player\n  inactive_list = [player for player in m.players if player.is_active is False]\n\n  # make a list of kingdoms data\n  kingdoms = list(m.kingdoms)\n  ```  \n---\n## Villages\n  `Villages` object provide you an easy way to access every village that you have in game by using village name.  \n  But first `Villages` object need to pull data from TK.\n\n  ```python\n  from tkpy import Villages\n\n  villages = Villages(driver)\n  villages.pull()\n\n  villages['my first village']\n  <Village({'villageId': '537313245', 'playerId': '001', 'name': 'my first village',...})>\n\n  # with `Village` object you can do several think, such as:\n  # attack village at coordinate (0, 0)\n  villages['my first village'].attack(0, 0, units={'1':-1, '11': 1})\n\n  # defend another village at (0, 0)\n  villages['my first village'].defend(0, 0, units={'1': -1, '2': -1, '11': 1})\n\n  # raid another village at (0, 0)\n  villages['my first village'].raid(0, 0, units={'1': 100})\n\n  # siege another village at (0, 0)\n  villages['my first village'].siege(0, 0, units={'1': -1, '6': -1, '7': -1, '11': 1})\n\n  # upgrade building\n  villages['my first village'].upgrade('main building')\n  ```\n  > Side note for `Villages` object:  \n  > As you already know, you can naming your village with same name _(like 'my village' and 'my village')_.  \n  > The problem is `Villages` object can't access this 2 kind of `Village` object with same name,  \n  > in result `Villages` object will randomly return `Village` object that have same name.\n\n---  \n## Farmlist\n  `Farmlist` provide you an easy way to access in game farmlist by using farmlist name.  \n  First `Farmlist` object need to pull data from TK.\n  ```python\n  from tkpy import Farmlist\n\n  farmlist = Farmlist(driver)\n  farmlist.pull()\n\n  # after that you can access `FarmlistEntry` object use name of farmlist\n  farmlist['Startup farm list']\n  <FarmlistEntry({'listId': '1631', 'listName': 'Startup farm list', ...})>\n\n  # you can create a new farmlist use `create_farmlist` method\n  farmlist.create_farmlist(name='new farmlist')\n\n  # now you can access new farmlist use it's name\n  farmlist['new farmlist']\n  <FarmListEntry({'listId': '1632', 'listName': 'new farmlist', ...})>\n\n  # through `FarmlistEntry` object you can add, and toggle village use villageId\n  farmlist['Startup farm list'].add(villageId=537313245)\n  farmlist['Startup farm list'].toggle(villageId=537313245)\n  ```\n  > Side note for `Farmlist` object:  \n  > As you already know, you can naming your farmlist with same name _(like 'farmlist 1', and 'farmlist 1')_.  \n  > The problem is `Farmlist` object can't access this 2 kind of `FarmlistEntry` object with same name,  \n  > in result `Farmlist` object will randomly return `FarmlistEntry` object that have same name.\n\n---  \n## Notepad\n  `Notepad` is an object that when instantiate will create a new notepad in game.  \n  ```python\n  from tkpy import Notepad\n\n  notepad = Notepad(driver) # new notepad will appear in game\n\n  # message method will write your message to notepad\n  notepad.message('this is new message on new notepad')\n\n  # careful, use message method will overwrite message that previously on notepad\n  notepad.message('this message will overwrite with old one.')\n  ```\n---  \n# Document\nFor documentation, visit [tkpy wiki](https://github.com/didadadida93/tkpy/wiki).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/didadadida93/tkpy", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "tkpy", "package_url": "https://pypi.org/project/tkpy/", "platform": "", "project_url": "https://pypi.org/project/tkpy/", "project_urls": {"Homepage": "https://github.com/didadadida93/tkpy"}, "release_url": "https://pypi.org/project/tkpy/0.0.1a1/", "requires_dist": ["requests"], "requires_python": "", "summary": "Travian: Kingdom utilities for your need.", "version": "0.0.1a1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <hr>\n<h1>tkpy</h1>\n<p><a href=\"https://www.kingdoms.com\" rel=\"nofollow\">Travian: Kingdom</a> (TK) utilities for your need. It provide several object that mostly used on TK such as <code>Map</code>, <code>Villages</code>, <code>Notepad</code>, and <code>Farmlist</code>.</p>\n<p><a href=\"https://www.python.org/downloads/release/python-367/\" rel=\"nofollow\"><img alt=\"Python 3.6\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6a042d910c74fbce532a01da853019c164ef42a8/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f707974686f6e2d332e362b2d626c75652e737667\"></a> <a href=\"https://travis-ci.org/didadadida93/tkpy\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/53e1f50fe3910c29fc4dac31f35f26836c6ea7ed/68747470733a2f2f7472617669732d63692e6f72672f6469646164616469646139332f746b70792e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://codecov.io/gh/didadadida93/tkpy\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/81d6aa7105759b360dd8c7829115f553832d48f0/68747470733a2f2f636f6465636f762e696f2f67682f6469646164616469646139332f746b70792f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a></p>\n<hr>\n<h1>Installation</h1>\n<blockquote>\n<p>It is recommended to use <a href=\"https://docs.python-guide.org/dev/virtualenvs/\" rel=\"nofollow\">virtualenv</a>.</p>\n</blockquote>\n<p>Since <code>tkpy</code> depend on <code>primordial</code> package, first install <a href=\"https://github.com/lijok/primordial\" rel=\"nofollow\">primordial package</a>.<br>\nAfter that, run <code>tkpy-init</code> for create database that will be used for storing <code>Gameworld</code> object.</p>\n<pre><span class=\"o\">(</span>venv<span class=\"o\">)</span>$ pip install git+https://github.com/lijok/primordial.git\n<span class=\"o\">(</span>venv<span class=\"o\">)</span>$ pip install tkpy\n<span class=\"o\">(</span>venv<span class=\"o\">)</span>$ tkpy-init\n</pre>\n<hr>\n<h1>Getting started</h1>\n<p><code>tkpy</code> need <code>Gameworld</code> object so it can get data from TK. Use <code>login</code> function for retrieve <code>Gameworld</code> object.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tkpy</span> <span class=\"kn\">import</span> <span class=\"n\">login</span>\n\n<span class=\"n\">driver</span> <span class=\"o\">=</span> <span class=\"n\">login</span><span class=\"p\">(</span><span class=\"n\">email</span><span class=\"o\">=</span><span class=\"s1\">'your@email.com'</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"s1\">'your password'</span><span class=\"p\">,</span> <span class=\"n\">gameworld</span><span class=\"o\">=</span><span class=\"s1\">'com12'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># login as sitter or dual</span>\n<span class=\"n\">driver</span> <span class=\"o\">=</span> <span class=\"n\">login</span><span class=\"p\">(</span>\n    <span class=\"n\">email</span><span class=\"o\">=</span><span class=\"s1\">'your@email.com'</span><span class=\"p\">,</span>\n    <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"s1\">'your password'</span><span class=\"p\">,</span>\n    <span class=\"n\">gameworld</span><span class=\"o\">=</span><span class=\"s1\">'dual/sitter gameworld'</span><span class=\"p\">,</span>\n    <span class=\"n\">avatar</span><span class=\"o\">=</span><span class=\"s1\">'avatar name of sitter/dual account'</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># once you have `Gameworld` object, you can use another object of tkpy.</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">tkpy</span> <span class=\"kn\">import</span> <span class=\"n\">Map</span>\n\n<span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">Map</span><span class=\"p\">(</span><span class=\"n\">driver</span><span class=\"p\">)</span>\n<span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">pull</span><span class=\"p\">()</span> <span class=\"c1\"># pulling map data</span>\n\n<span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">coordinate</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Cell</span><span class=\"p\">({</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'536887296'</span><span class=\"p\">,</span> <span class=\"s1\">'landscape'</span><span class=\"p\">:</span> <span class=\"s1\">'9013'</span><span class=\"p\">,</span> <span class=\"s1\">'owner'</span><span class=\"p\">:</span> <span class=\"s1\">'0'</span><span class=\"p\">})</span><span class=\"o\">&gt;</span>\n\n<span class=\"n\">unoccupied_oasis_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">oasis</span> <span class=\"k\">for</span> <span class=\"n\">oasis</span> <span class=\"ow\">in</span> <span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">oasis</span> <span class=\"k\">if</span> <span class=\"n\">oasis</span><span class=\"p\">[</span><span class=\"s1\">'oasis'</span><span class=\"p\">][</span><span class=\"s1\">'oasisStatus'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">'3'</span><span class=\"p\">]</span>\n<span class=\"n\">unoccupied_oasis_list</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Cell</span><span class=\"p\">({</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'535019499'</span><span class=\"p\">,</span> <span class=\"s1\">'landscape'</span><span class=\"p\">:</span> <span class=\"s1\">'2755'</span><span class=\"p\">,</span> <span class=\"s1\">'owner'</span><span class=\"p\">:</span> <span class=\"s1\">'0'</span><span class=\"p\">,</span> <span class=\"s1\">'oasis'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'bonus'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'1'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">},</span> <span class=\"o\">...</span><span class=\"p\">}</span><span class=\"o\">...</span><span class=\"p\">})</span><span class=\"o\">&gt;</span>\n</pre>\n<hr>\n<h1>Usage</h1>\n<h2>Map</h2>\n<ul>\n<li><code>Map</code> object provide you an easy way to access data from TK map by using <code>pull</code> method.</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tkpy</span> <span class=\"kn\">import</span> <span class=\"n\">Map</span>\n\n<span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">Map</span><span class=\"p\">(</span><span class=\"n\">driver</span><span class=\"p\">)</span>\n<span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">pull</span><span class=\"p\">()</span>\n</pre>\n<ul>\n<li>Once you pulling map data, you can access every cell by using <code>coordinate</code> method.</li>\n</ul>\n<pre><span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">coordinate</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Cell</span><span class=\"p\">({</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'536887296'</span><span class=\"p\">,</span> <span class=\"s1\">'landscape'</span><span class=\"p\">:</span> <span class=\"s1\">'9013'</span><span class=\"p\">,</span> <span class=\"s1\">'owner'</span><span class=\"p\">:</span> <span class=\"s1\">'0'</span><span class=\"p\">})</span><span class=\"o\">&gt;</span>\n</pre>\n<ul>\n<li>Since TK provide you player data, and kingdom data when you pulling map data, <code>Map</code> object also provide you easy way to access this kind of data.</li>\n</ul>\n<pre><span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">player</span><span class=\"p\">(</span><span class=\"s1\">'player name'</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Player</span><span class=\"p\">({</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'player name'</span><span class=\"p\">,</span> <span class=\"s1\">'country'</span><span class=\"p\">:</span> <span class=\"s1\">'en'</span><span class=\"p\">,</span> <span class=\"s1\">'tribeId'</span><span class=\"p\">:</span> <span class=\"s1\">'1'</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">})</span><span class=\"o\">&gt;</span>\n\n<span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">kingdom</span><span class=\"p\">(</span><span class=\"s1\">'kingdom name'</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Kingdom</span><span class=\"p\">({</span><span class=\"s1\">'tag'</span><span class=\"p\">:</span> <span class=\"s1\">'kingdom name'</span><span class=\"p\">,</span> <span class=\"s1\">'kingdomId'</span><span class=\"p\">:</span> <span class=\"s1\">'9999'</span><span class=\"p\">})</span><span class=\"o\">&gt;</span>\n</pre>\n<ul>\n<li><code>Map</code> object have property that act as generator function and yield <code>Cell</code> object so you can get all data from every cell.</li>\n</ul>\n<pre><span class=\"n\">cell_list</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"p\">)</span>\n</pre>\n<blockquote>\n<p>Side note for <code>Map.cell</code> property:<br>\nSome <code>Cell</code> object have different data. Once with village data while another didn't have village data.<br>\nFinding specific cell through <code>Map.cell</code> property may cause <code>KeyError Exception</code>. To prevent this use <code>try except</code> clause.</p>\n<pre><span class=\"k\">for</span> <span class=\"n\">cell</span> <span class=\"ow\">in</span> <span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"p\">:</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">village</span> <span class=\"o\">=</span> <span class=\"n\">cell</span><span class=\"p\">[</span><span class=\"s1\">'village'</span><span class=\"p\">]</span>\n    <span class=\"k\">except</span> <span class=\"ne\">KeyError</span><span class=\"p\">:</span> <span class=\"c1\"># this cell didn't have village data</span>\n        <span class=\"k\">continue</span>\n    <span class=\"o\">...</span>\n</pre>\n</blockquote>\n<ul>\n<li><code>Map</code> object also have property that filter cell data so it only give specific data.</li>\n</ul>\n<pre><span class=\"c1\"># make a list of cell that have village data on it</span>\n<span class=\"n\">villages</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">villages</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># make a list of cell that have oasis data on it</span>\n<span class=\"n\">oasis</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">oasis</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># make a list of cell that have 15c and 9c but didn't have village data on it (unsettled croppers)</span>\n<span class=\"n\">croppers</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">tile</span> <span class=\"k\">for</span> <span class=\"n\">tile</span> <span class=\"ow\">in</span> <span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">tiles</span> <span class=\"k\">if</span> <span class=\"n\">tile</span><span class=\"p\">[</span><span class=\"s1\">'resType'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">'3339'</span> <span class=\"ow\">or</span> <span class=\"n\">tile</span><span class=\"p\">[</span><span class=\"s1\">'resType'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">'11115'</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># make a list of cell that have village data on it and have population lower than 100</span>\n<span class=\"n\">village_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">village</span> <span class=\"k\">for</span> <span class=\"n\">village</span> <span class=\"ow\">in</span> <span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">villages</span> <span class=\"k\">if</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">village</span><span class=\"p\">[</span><span class=\"s1\">'village'</span><span class=\"p\">][</span><span class=\"s1\">'population'</span><span class=\"p\">])</span> <span class=\"o\">&lt;</span> <span class=\"mi\">100</span><span class=\"p\">]</span>\n</pre>\n<ul>\n<li>There is a property for generate player and kingdom data too</li>\n</ul>\n<pre><span class=\"c1\"># make a list of inactive player</span>\n<span class=\"n\">inactive_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">player</span> <span class=\"k\">for</span> <span class=\"n\">player</span> <span class=\"ow\">in</span> <span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">players</span> <span class=\"k\">if</span> <span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">is_active</span> <span class=\"ow\">is</span> <span class=\"kc\">False</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># make a list of kingdoms data</span>\n<span class=\"n\">kingdoms</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">kingdoms</span><span class=\"p\">)</span>\n</pre>\n<hr>\n<h2>Villages</h2>\n<p><code>Villages</code> object provide you an easy way to access every village that you have in game by using village name.<br>\nBut first <code>Villages</code> object need to pull data from TK.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tkpy</span> <span class=\"kn\">import</span> <span class=\"n\">Villages</span>\n\n<span class=\"n\">villages</span> <span class=\"o\">=</span> <span class=\"n\">Villages</span><span class=\"p\">(</span><span class=\"n\">driver</span><span class=\"p\">)</span>\n<span class=\"n\">villages</span><span class=\"o\">.</span><span class=\"n\">pull</span><span class=\"p\">()</span>\n\n<span class=\"n\">villages</span><span class=\"p\">[</span><span class=\"s1\">'my first village'</span><span class=\"p\">]</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Village</span><span class=\"p\">({</span><span class=\"s1\">'villageId'</span><span class=\"p\">:</span> <span class=\"s1\">'537313245'</span><span class=\"p\">,</span> <span class=\"s1\">'playerId'</span><span class=\"p\">:</span> <span class=\"s1\">'001'</span><span class=\"p\">,</span> <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'my first village'</span><span class=\"p\">,</span><span class=\"o\">...</span><span class=\"p\">})</span><span class=\"o\">&gt;</span>\n\n<span class=\"c1\"># with `Village` object you can do several think, such as:</span>\n<span class=\"c1\"># attack village at coordinate (0, 0)</span>\n<span class=\"n\">villages</span><span class=\"p\">[</span><span class=\"s1\">'my first village'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">attack</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">units</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'1'</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'11'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">})</span>\n\n<span class=\"c1\"># defend another village at (0, 0)</span>\n<span class=\"n\">villages</span><span class=\"p\">[</span><span class=\"s1\">'my first village'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">defend</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">units</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'1'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'2'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'11'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">})</span>\n\n<span class=\"c1\"># raid another village at (0, 0)</span>\n<span class=\"n\">villages</span><span class=\"p\">[</span><span class=\"s1\">'my first village'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">raid</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">units</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'1'</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"p\">})</span>\n\n<span class=\"c1\"># siege another village at (0, 0)</span>\n<span class=\"n\">villages</span><span class=\"p\">[</span><span class=\"s1\">'my first village'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">siege</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">units</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'1'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'6'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'7'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'11'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">})</span>\n\n<span class=\"c1\"># upgrade building</span>\n<span class=\"n\">villages</span><span class=\"p\">[</span><span class=\"s1\">'my first village'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">upgrade</span><span class=\"p\">(</span><span class=\"s1\">'main building'</span><span class=\"p\">)</span>\n</pre>\n<blockquote>\n<p>Side note for <code>Villages</code> object:<br>\nAs you already know, you can naming your village with same name <em>(like 'my village' and 'my village')</em>.<br>\nThe problem is <code>Villages</code> object can't access this 2 kind of <code>Village</code> object with same name,<br>\nin result <code>Villages</code> object will randomly return <code>Village</code> object that have same name.</p>\n</blockquote>\n<hr>\n<h2>Farmlist</h2>\n<p><code>Farmlist</code> provide you an easy way to access in game farmlist by using farmlist name.<br>\nFirst <code>Farmlist</code> object need to pull data from TK.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tkpy</span> <span class=\"kn\">import</span> <span class=\"n\">Farmlist</span>\n\n<span class=\"n\">farmlist</span> <span class=\"o\">=</span> <span class=\"n\">Farmlist</span><span class=\"p\">(</span><span class=\"n\">driver</span><span class=\"p\">)</span>\n<span class=\"n\">farmlist</span><span class=\"o\">.</span><span class=\"n\">pull</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># after that you can access `FarmlistEntry` object use name of farmlist</span>\n<span class=\"n\">farmlist</span><span class=\"p\">[</span><span class=\"s1\">'Startup farm list'</span><span class=\"p\">]</span>\n<span class=\"o\">&lt;</span><span class=\"n\">FarmlistEntry</span><span class=\"p\">({</span><span class=\"s1\">'listId'</span><span class=\"p\">:</span> <span class=\"s1\">'1631'</span><span class=\"p\">,</span> <span class=\"s1\">'listName'</span><span class=\"p\">:</span> <span class=\"s1\">'Startup farm list'</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">})</span><span class=\"o\">&gt;</span>\n\n<span class=\"c1\"># you can create a new farmlist use `create_farmlist` method</span>\n<span class=\"n\">farmlist</span><span class=\"o\">.</span><span class=\"n\">create_farmlist</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'new farmlist'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># now you can access new farmlist use it's name</span>\n<span class=\"n\">farmlist</span><span class=\"p\">[</span><span class=\"s1\">'new farmlist'</span><span class=\"p\">]</span>\n<span class=\"o\">&lt;</span><span class=\"n\">FarmListEntry</span><span class=\"p\">({</span><span class=\"s1\">'listId'</span><span class=\"p\">:</span> <span class=\"s1\">'1632'</span><span class=\"p\">,</span> <span class=\"s1\">'listName'</span><span class=\"p\">:</span> <span class=\"s1\">'new farmlist'</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">})</span><span class=\"o\">&gt;</span>\n\n<span class=\"c1\"># through `FarmlistEntry` object you can add, and toggle village use villageId</span>\n<span class=\"n\">farmlist</span><span class=\"p\">[</span><span class=\"s1\">'Startup farm list'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">villageId</span><span class=\"o\">=</span><span class=\"mi\">537313245</span><span class=\"p\">)</span>\n<span class=\"n\">farmlist</span><span class=\"p\">[</span><span class=\"s1\">'Startup farm list'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">toggle</span><span class=\"p\">(</span><span class=\"n\">villageId</span><span class=\"o\">=</span><span class=\"mi\">537313245</span><span class=\"p\">)</span>\n</pre>\n<blockquote>\n<p>Side note for <code>Farmlist</code> object:<br>\nAs you already know, you can naming your farmlist with same name <em>(like 'farmlist 1', and 'farmlist 1')</em>.<br>\nThe problem is <code>Farmlist</code> object can't access this 2 kind of <code>FarmlistEntry</code> object with same name,<br>\nin result <code>Farmlist</code> object will randomly return <code>FarmlistEntry</code> object that have same name.</p>\n</blockquote>\n<hr>\n<h2>Notepad</h2>\n<p><code>Notepad</code> is an object that when instantiate will create a new notepad in game.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tkpy</span> <span class=\"kn\">import</span> <span class=\"n\">Notepad</span>\n\n<span class=\"n\">notepad</span> <span class=\"o\">=</span> <span class=\"n\">Notepad</span><span class=\"p\">(</span><span class=\"n\">driver</span><span class=\"p\">)</span> <span class=\"c1\"># new notepad will appear in game</span>\n\n<span class=\"c1\"># message method will write your message to notepad</span>\n<span class=\"n\">notepad</span><span class=\"o\">.</span><span class=\"n\">message</span><span class=\"p\">(</span><span class=\"s1\">'this is new message on new notepad'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># careful, use message method will overwrite message that previously on notepad</span>\n<span class=\"n\">notepad</span><span class=\"o\">.</span><span class=\"n\">message</span><span class=\"p\">(</span><span class=\"s1\">'this message will overwrite with old one.'</span><span class=\"p\">)</span>\n</pre>\n<hr>\n<h1>Document</h1>\n<p>For documentation, visit <a href=\"https://github.com/didadadida93/tkpy/wiki\" rel=\"nofollow\">tkpy wiki</a>.</p>\n\n          </div>"}, "last_serial": 5660747, "releases": {"0.0.1a1": [{"comment_text": "", "digests": {"md5": "e1b7eee00747660da37bf959aaff369b", "sha256": "06801c445d872cfa8a1655616802e293de0c250489d63cf0b2260d3277c342b8"}, "downloads": -1, "filename": "tkpy-0.0.1a1-py3-none-any.whl", "has_sig": false, "md5_digest": "e1b7eee00747660da37bf959aaff369b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 22735, "upload_time": "2019-08-11T01:54:19", "upload_time_iso_8601": "2019-08-11T01:54:19.657797Z", "url": "https://files.pythonhosted.org/packages/03/19/285951c5c7794da9f14cec78b89a1dd4cd3ad6036e9de31f0adc96b9d00e/tkpy-0.0.1a1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "49115a4b52dc02b8c201852f417a02c2", "sha256": "1ecf30493adcdcd726250660bcbb3f4b0d70b3f71e9c23643454b792350b0ca0"}, "downloads": -1, "filename": "tkpy-0.0.1a1.tar.gz", "has_sig": false, "md5_digest": "49115a4b52dc02b8c201852f417a02c2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21309, "upload_time": "2019-08-11T01:54:30", "upload_time_iso_8601": "2019-08-11T01:54:30.702156Z", "url": "https://files.pythonhosted.org/packages/fa/a0/b8155e7b0b22732fedf6cd76603cd306b230c9534a96c3be052251627074/tkpy-0.0.1a1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e1b7eee00747660da37bf959aaff369b", "sha256": "06801c445d872cfa8a1655616802e293de0c250489d63cf0b2260d3277c342b8"}, "downloads": -1, "filename": "tkpy-0.0.1a1-py3-none-any.whl", "has_sig": false, "md5_digest": "e1b7eee00747660da37bf959aaff369b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 22735, "upload_time": "2019-08-11T01:54:19", "upload_time_iso_8601": "2019-08-11T01:54:19.657797Z", "url": "https://files.pythonhosted.org/packages/03/19/285951c5c7794da9f14cec78b89a1dd4cd3ad6036e9de31f0adc96b9d00e/tkpy-0.0.1a1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "49115a4b52dc02b8c201852f417a02c2", "sha256": "1ecf30493adcdcd726250660bcbb3f4b0d70b3f71e9c23643454b792350b0ca0"}, "downloads": -1, "filename": "tkpy-0.0.1a1.tar.gz", "has_sig": false, "md5_digest": "49115a4b52dc02b8c201852f417a02c2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21309, "upload_time": "2019-08-11T01:54:30", "upload_time_iso_8601": "2019-08-11T01:54:30.702156Z", "url": "https://files.pythonhosted.org/packages/fa/a0/b8155e7b0b22732fedf6cd76603cd306b230c9534a96c3be052251627074/tkpy-0.0.1a1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:52:33 2020"}