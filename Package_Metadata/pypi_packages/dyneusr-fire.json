{"info": {"author": "Caleb Geniesse", "author_email": "geniesse@stanford.edu", "bugtrack_url": null, "classifiers": ["Intended Audience :: Science/Research", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering :: Information Analysis", "Topic :: Scientific/Engineering :: Visualization"], "description": "\n\n<p align=\"center\">\n<a href=\"https://braindynamicslab.github.io/dyneusr/\">\n<img src=\"https://raw.githubusercontent.com/braindynamicslab/dyneusr/master/docs/assets/logo.png\" height=\"250\">\n</a>\n</p>\n\n\n## **DyNeuSR Fire**\n\nA command line interface for [DyNeuSR](https://braindynamicslab.github.io/dyneusr/) based on the [Python Fire](https://github.com/google/python-fire) library. \n\n\n\n## **Usage**\n\n[DyNeuSR Fire](https://braindynamicslab.github.io/dyneusr-fire/) provides a command line interface for [DyNeuSR](https://braindynamicslab.github.io/dyneusr/). It wraps `kmapper` and `dyneusr` into a single pipeline, and uses the [Python Fire](https://github.com/google/python-fire) library to automatically generate a simple command line interface that accepts several important options and allows users to customize this pipeline. For more information about DyNeuSR, check out the [docs](https://braindynamicslab.github.io/dyneusr/).\n\nTo get started, check out the [examples](https://github.com/braindynamicslab/dyneusr-fire/tree/master/examples/), or try running one of the commands below on your own data.\n\n\n### **_Basic Usage_** \n\nYou can run the entire pipeline from the command line:\n```bash\n$ dyneusr-fire load_example --size=500 - run_mapper --projection=PCA(2) --resolution=10 --gain=0.5 - visualize\n```\n\n\n### **_Interactive Mode_** \n\nTo run in interactive mode, you can run the following from the command line:\n```bash\n$ dyneusr-fire init -- --interactive\n```\n\nThis will open an IPython shell.\n```python\nFire is starting a Python REPL with the following objects:\nModules: fire, np, pd\nObjects: Bunch, Cover, DBSCAN, DyNeuGraph, DyNeuSR, HDBSCAN, KMeans, KeplerMapper, MinMaxScaler, PCA, StandardScaler, TSNE, UMAP, check_estimator, component, f, result, self, trace\n\nPython 3.7.2 | packaged by conda-forge | (default, Mar 19 2019, 20:46:22) \nType 'copyright', 'credits' or 'license' for more information\nIPython 7.3.0 -- An enhanced Interactive Python. Type '?' for help.\n\nIn [1]:                                                               \n```\n\nThen, you can step through the pipeline:\n```python\nIn [1]: pipeline = DyNeuSR()\n\nIn [2]: pipeline.load_data(X='trefoil.npy', y='trefoil-target.npy')\n\nIn [3]: pipeline.run_mapper(projection=PCA(2), resolution=10, gain=0.5, clusterer=DBSCAN())\n\nIn [4]: pipeline.visualize()\n\n```\n\nOr, run it all at once:\n```python\nIn [1]: DyNeuSR().load_example().run_mapper(projection=PCA(2), resolution=10, gain=0.5, clusterer=DBSCAN()).visualize()\n```\n\nNote, in the examples above, `load_example` is used for demo purposes only. You can replace `load_example` with `load_data` and load your own data by passing the file names of your data and target labels to the `X` and `y` arguments, respectively.\n\n\n\n\n## **Setup**\n\n### **_Dependencies_**\n\n#### [Python 3.6+](https://www.python.org/)\n\n#### Required Python Packages\n* [fire](https://github.com/google/python-fire)\n* [dyneusr](https://braindynamicslab.github.io/dyneusr)\n* [kmapper](kepler-mapper.scikit-tda.org)\n* [sklearn](https://scikit-learn.org/)\n* [umap-learn](https://github.com/lmcinnes/umap)\n* [hdbscan](https://github.com/scikit-learn-contrib/hdbscan)\n\n\n### **_Install with PIP_**\n\n_To install with pip:_\n```bash\npip install dyneusr-fire\n```\n\n_To install from source:_\n```bash\ngit clone https://github.com/braindynamicslab/dyneusr-fire.git\ncd dyneusr-fire\n\npip install -e .\n```\n\n\n## **Support**\n\nPlease feel free to [report](https://github.com/braindynamicslab/dyneusr-fire/issues/new) any issues, [request](https://github.com/braindynamicslab/dyneusr-fire/issues/new) new features, or [propose](https://github.com/braindynamicslab/dyneusr-fire/compare) improvements. You can also contact Caleb Geniesse at geniesse [at] stanford [dot] edu.\n\n\n\n## **Citation**\n\n> Geniesse, C., Sporns, O., Petri, G., & Saggar, M. (2019). [Generating dynamical neuroimaging spatiotemporal representations (DyNeuSR) using topological data analysis](https://www.mitpressjournals.org/doi/abs/10.1162/netn_a_00093). *Network Neuroscience*. Advance publication. doi:10.1162/netn_a_00093\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://braindynamicslab.github.io/dyneusr-fire", "keywords": "brain dynamics,topology data analysis,neuroimaging,brain networks,mapper,visualization", "license": "BSD-3", "maintainer": "", "maintainer_email": "", "name": "dyneusr-fire", "package_url": "https://pypi.org/project/dyneusr-fire/", "platform": "", "project_url": "https://pypi.org/project/dyneusr-fire/", "project_urls": {"Homepage": "https://braindynamicslab.github.io/dyneusr-fire"}, "release_url": "https://pypi.org/project/dyneusr-fire/0.0.3/", "requires_dist": ["fire", "dyneusr", "kmapper", "sklearn", "umap-learn", "hdbscan"], "requires_python": ">=3.6", "summary": "A command line interface for DyNeuSR", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p align=\"center\">\n<a href=\"https://braindynamicslab.github.io/dyneusr/\" rel=\"nofollow\">\n<img height=\"250\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/60d8723f4a861d0e6caa6a13ad087131f87a67d1/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f627261696e64796e616d6963736c61622f64796e657573722f6d61737465722f646f63732f6173736574732f6c6f676f2e706e67\">\n</a>\n</p>\n<h2><strong>DyNeuSR Fire</strong></h2>\n<p>A command line interface for <a href=\"https://braindynamicslab.github.io/dyneusr/\" rel=\"nofollow\">DyNeuSR</a> based on the <a href=\"https://github.com/google/python-fire\" rel=\"nofollow\">Python Fire</a> library.</p>\n<h2><strong>Usage</strong></h2>\n<p><a href=\"https://braindynamicslab.github.io/dyneusr-fire/\" rel=\"nofollow\">DyNeuSR Fire</a> provides a command line interface for <a href=\"https://braindynamicslab.github.io/dyneusr/\" rel=\"nofollow\">DyNeuSR</a>. It wraps <code>kmapper</code> and <code>dyneusr</code> into a single pipeline, and uses the <a href=\"https://github.com/google/python-fire\" rel=\"nofollow\">Python Fire</a> library to automatically generate a simple command line interface that accepts several important options and allows users to customize this pipeline. For more information about DyNeuSR, check out the <a href=\"https://braindynamicslab.github.io/dyneusr/\" rel=\"nofollow\">docs</a>.</p>\n<p>To get started, check out the <a href=\"https://github.com/braindynamicslab/dyneusr-fire/tree/master/examples/\" rel=\"nofollow\">examples</a>, or try running one of the commands below on your own data.</p>\n<h3><strong><em>Basic Usage</em></strong></h3>\n<p>You can run the entire pipeline from the command line:</p>\n<pre>$ dyneusr-fire load_example --size<span class=\"o\">=</span><span class=\"m\">500</span> - run_mapper --projection<span class=\"o\">=</span>PCA<span class=\"o\">(</span><span class=\"m\">2</span><span class=\"o\">)</span> --resolution<span class=\"o\">=</span><span class=\"m\">10</span> --gain<span class=\"o\">=</span><span class=\"m\">0</span>.5 - visualize\n</pre>\n<h3><strong><em>Interactive Mode</em></strong></h3>\n<p>To run in interactive mode, you can run the following from the command line:</p>\n<pre>$ dyneusr-fire init -- --interactive\n</pre>\n<p>This will open an IPython shell.</p>\n<pre><span class=\"n\">Fire</span> <span class=\"ow\">is</span> <span class=\"n\">starting</span> <span class=\"n\">a</span> <span class=\"n\">Python</span> <span class=\"n\">REPL</span> <span class=\"k\">with</span> <span class=\"n\">the</span> <span class=\"n\">following</span> <span class=\"n\">objects</span><span class=\"p\">:</span>\n<span class=\"n\">Modules</span><span class=\"p\">:</span> <span class=\"n\">fire</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"p\">,</span> <span class=\"n\">pd</span>\n<span class=\"n\">Objects</span><span class=\"p\">:</span> <span class=\"n\">Bunch</span><span class=\"p\">,</span> <span class=\"n\">Cover</span><span class=\"p\">,</span> <span class=\"n\">DBSCAN</span><span class=\"p\">,</span> <span class=\"n\">DyNeuGraph</span><span class=\"p\">,</span> <span class=\"n\">DyNeuSR</span><span class=\"p\">,</span> <span class=\"n\">HDBSCAN</span><span class=\"p\">,</span> <span class=\"n\">KMeans</span><span class=\"p\">,</span> <span class=\"n\">KeplerMapper</span><span class=\"p\">,</span> <span class=\"n\">MinMaxScaler</span><span class=\"p\">,</span> <span class=\"n\">PCA</span><span class=\"p\">,</span> <span class=\"n\">StandardScaler</span><span class=\"p\">,</span> <span class=\"n\">TSNE</span><span class=\"p\">,</span> <span class=\"n\">UMAP</span><span class=\"p\">,</span> <span class=\"n\">check_estimator</span><span class=\"p\">,</span> <span class=\"n\">component</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">trace</span>\n\n<span class=\"n\">Python</span> <span class=\"mf\">3.7</span><span class=\"o\">.</span><span class=\"mi\">2</span> <span class=\"o\">|</span> <span class=\"n\">packaged</span> <span class=\"n\">by</span> <span class=\"n\">conda</span><span class=\"o\">-</span><span class=\"n\">forge</span> <span class=\"o\">|</span> <span class=\"p\">(</span><span class=\"n\">default</span><span class=\"p\">,</span> <span class=\"n\">Mar</span> <span class=\"mi\">19</span> <span class=\"mi\">2019</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">:</span><span class=\"mi\">46</span><span class=\"p\">:</span><span class=\"mi\">22</span><span class=\"p\">)</span> \n<span class=\"n\">Type</span> <span class=\"s1\">'copyright'</span><span class=\"p\">,</span> <span class=\"s1\">'credits'</span> <span class=\"ow\">or</span> <span class=\"s1\">'license'</span> <span class=\"k\">for</span> <span class=\"n\">more</span> <span class=\"n\">information</span>\n<span class=\"n\">IPython</span> <span class=\"mf\">7.3</span><span class=\"o\">.</span><span class=\"mi\">0</span> <span class=\"o\">--</span> <span class=\"n\">An</span> <span class=\"n\">enhanced</span> <span class=\"n\">Interactive</span> <span class=\"n\">Python</span><span class=\"o\">.</span> <span class=\"n\">Type</span> <span class=\"s1\">'?'</span> <span class=\"k\">for</span> <span class=\"n\">help</span><span class=\"o\">.</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span>                                                               \n</pre>\n<p>Then, you can step through the pipeline:</p>\n<pre><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span> <span class=\"n\">pipeline</span> <span class=\"o\">=</span> <span class=\"n\">DyNeuSR</span><span class=\"p\">()</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"n\">pipeline</span><span class=\"o\">.</span><span class=\"n\">load_data</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"o\">=</span><span class=\"s1\">'trefoil.npy'</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"s1\">'trefoil-target.npy'</span><span class=\"p\">)</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]:</span> <span class=\"n\">pipeline</span><span class=\"o\">.</span><span class=\"n\">run_mapper</span><span class=\"p\">(</span><span class=\"n\">projection</span><span class=\"o\">=</span><span class=\"n\">PCA</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">resolution</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">gain</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"n\">clusterer</span><span class=\"o\">=</span><span class=\"n\">DBSCAN</span><span class=\"p\">())</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]:</span> <span class=\"n\">pipeline</span><span class=\"o\">.</span><span class=\"n\">visualize</span><span class=\"p\">()</span>\n</pre>\n<p>Or, run it all at once:</p>\n<pre><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span> <span class=\"n\">DyNeuSR</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">load_example</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">run_mapper</span><span class=\"p\">(</span><span class=\"n\">projection</span><span class=\"o\">=</span><span class=\"n\">PCA</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">resolution</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">gain</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"n\">clusterer</span><span class=\"o\">=</span><span class=\"n\">DBSCAN</span><span class=\"p\">())</span><span class=\"o\">.</span><span class=\"n\">visualize</span><span class=\"p\">()</span>\n</pre>\n<p>Note, in the examples above, <code>load_example</code> is used for demo purposes only. You can replace <code>load_example</code> with <code>load_data</code> and load your own data by passing the file names of your data and target labels to the <code>X</code> and <code>y</code> arguments, respectively.</p>\n<h2><strong>Setup</strong></h2>\n<h3><strong><em>Dependencies</em></strong></h3>\n<h4><a href=\"https://www.python.org/\" rel=\"nofollow\">Python 3.6+</a></h4>\n<h4>Required Python Packages</h4>\n<ul>\n<li><a href=\"https://github.com/google/python-fire\" rel=\"nofollow\">fire</a></li>\n<li><a href=\"https://braindynamicslab.github.io/dyneusr\" rel=\"nofollow\">dyneusr</a></li>\n<li><a href=\"kepler-mapper.scikit-tda.org\" rel=\"nofollow\">kmapper</a></li>\n<li><a href=\"https://scikit-learn.org/\" rel=\"nofollow\">sklearn</a></li>\n<li><a href=\"https://github.com/lmcinnes/umap\" rel=\"nofollow\">umap-learn</a></li>\n<li><a href=\"https://github.com/scikit-learn-contrib/hdbscan\" rel=\"nofollow\">hdbscan</a></li>\n</ul>\n<h3><strong><em>Install with PIP</em></strong></h3>\n<p><em>To install with pip:</em></p>\n<pre>pip install dyneusr-fire\n</pre>\n<p><em>To install from source:</em></p>\n<pre>git clone https://github.com/braindynamicslab/dyneusr-fire.git\n<span class=\"nb\">cd</span> dyneusr-fire\n\npip install -e .\n</pre>\n<h2><strong>Support</strong></h2>\n<p>Please feel free to <a href=\"https://github.com/braindynamicslab/dyneusr-fire/issues/new\" rel=\"nofollow\">report</a> any issues, <a href=\"https://github.com/braindynamicslab/dyneusr-fire/issues/new\" rel=\"nofollow\">request</a> new features, or <a href=\"https://github.com/braindynamicslab/dyneusr-fire/compare\" rel=\"nofollow\">propose</a> improvements. You can also contact Caleb Geniesse at geniesse [at] stanford [dot] edu.</p>\n<h2><strong>Citation</strong></h2>\n<blockquote>\n<p>Geniesse, C., Sporns, O., Petri, G., &amp; Saggar, M. (2019). <a href=\"https://www.mitpressjournals.org/doi/abs/10.1162/netn_a_00093\" rel=\"nofollow\">Generating dynamical neuroimaging spatiotemporal representations (DyNeuSR) using topological data analysis</a>. <em>Network Neuroscience</em>. Advance publication. doi:10.1162/netn_a_00093</p>\n</blockquote>\n\n          </div>"}, "last_serial": 5359887, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "fab351314fa8db9d8ef5f90a4746de4e", "sha256": "6ed884967dedf6cc7543b2784de9d33286bcdd039027f619176149a5ab42157e"}, "downloads": -1, "filename": "dyneusr_fire-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "fab351314fa8db9d8ef5f90a4746de4e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5555, "upload_time": "2019-06-04T21:36:42", "upload_time_iso_8601": "2019-06-04T21:36:42.722396Z", "url": "https://files.pythonhosted.org/packages/b8/27/3b919bae09a3e9ada168684827e7d9453eb8488c07c4ca80741062f87814/dyneusr_fire-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c93f3d4df33bfefbedf5e79db186919f", "sha256": "ae433ab8a7122571ac562ce0d50ef6df6c3f72cf583c6a69fa805d9e3d6d95d5"}, "downloads": -1, "filename": "dyneusr-fire-0.0.1.tar.gz", "has_sig": false, "md5_digest": "c93f3d4df33bfefbedf5e79db186919f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4618, "upload_time": "2019-06-04T21:36:44", "upload_time_iso_8601": "2019-06-04T21:36:44.563434Z", "url": "https://files.pythonhosted.org/packages/bb/c0/be09be27727f30e62d902d6a3d1298b305660f8d69b214b0c7cbf15d0a51/dyneusr-fire-0.0.1.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "5f11deb56f38914f7226baa82fb999cb", "sha256": "c41804cf677f7402199388d69d2da64dac421a3c0889d1542b7689d9ba7a89e0"}, "downloads": -1, "filename": "dyneusr_fire-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "5f11deb56f38914f7226baa82fb999cb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5544, "upload_time": "2019-06-04T22:24:48", "upload_time_iso_8601": "2019-06-04T22:24:48.878955Z", "url": "https://files.pythonhosted.org/packages/88/57/041aa3edb1f170b2ed948981deb0045d88f1aa7056dde2a6ea716fc68b63/dyneusr_fire-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "10c74eb18514caeff67922304fcd7a23", "sha256": "9a86925dde3dd94c00a29bd79bcdb1956c3da5c420abbaff901a00d510dc2406"}, "downloads": -1, "filename": "dyneusr-fire-0.0.3.tar.gz", "has_sig": false, "md5_digest": "10c74eb18514caeff67922304fcd7a23", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4667, "upload_time": "2019-06-04T22:24:51", "upload_time_iso_8601": "2019-06-04T22:24:51.252440Z", "url": "https://files.pythonhosted.org/packages/35/4c/e6e7f3097811b0be6f5f330ce0c14a0c04f4cca5e50b2f140854f7c18ecd/dyneusr-fire-0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5f11deb56f38914f7226baa82fb999cb", "sha256": "c41804cf677f7402199388d69d2da64dac421a3c0889d1542b7689d9ba7a89e0"}, "downloads": -1, "filename": "dyneusr_fire-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "5f11deb56f38914f7226baa82fb999cb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5544, "upload_time": "2019-06-04T22:24:48", "upload_time_iso_8601": "2019-06-04T22:24:48.878955Z", "url": "https://files.pythonhosted.org/packages/88/57/041aa3edb1f170b2ed948981deb0045d88f1aa7056dde2a6ea716fc68b63/dyneusr_fire-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "10c74eb18514caeff67922304fcd7a23", "sha256": "9a86925dde3dd94c00a29bd79bcdb1956c3da5c420abbaff901a00d510dc2406"}, "downloads": -1, "filename": "dyneusr-fire-0.0.3.tar.gz", "has_sig": false, "md5_digest": "10c74eb18514caeff67922304fcd7a23", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4667, "upload_time": "2019-06-04T22:24:51", "upload_time_iso_8601": "2019-06-04T22:24:51.252440Z", "url": "https://files.pythonhosted.org/packages/35/4c/e6e7f3097811b0be6f5f330ce0c14a0c04f4cca5e50b2f140854f7c18ecd/dyneusr-fire-0.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:48:37 2020"}