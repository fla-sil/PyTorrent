{"info": {"author": "Fabio Viola, Francesco Antoniazzi", "author_email": "fabio.viola@unibo.it, francesco.antoniazzi@unibo.it", "bugtrack_url": null, "classifiers": [], "description": "# SEPA-python3-APIs\nClient-side libraries for the SEPA platform (Python3)\n\n## Installation and usage\n\nClone the repository.\n\n```\ncd SEPA-python3-APIs\nsudo python3 setup.py build\nsudo python3 setup.py sdist\nsudo python3 setup.py install\n```\n\nTo use the classes you have to import them in this way:\n```\nfrom sepy.<the class you want to import> import *\n```\n\nFor example, if you want to import the SAPObject (used to handle JSAP files) \nyou have to write:\n```python3\nfrom sepy.SAPObject import *\n```\n\nThis library consists of 5 modules that can be used for different purposes:\n\n- SAPObject: An handler class for SAP files\n- SEPA: A low-level class used to develop a client for SEPA\n- ConnectionHandler: A class for connection handling\n- Exceptions\n- tablaze: A runnable script (also callable as a function, to nicely print SEPA output)\n\nLet's talk about some classes deeply:\n\n## SEPA\n\nThese APIs allow to develop a client for the SEPA platform using a simple interface. \nFirst of all the class SEPA must be initialized. Then the standard methods \nto interact with the broker are available.\n\n### Parameters:\n- sapObject :\n  A SAPObject file Default = None\n- logLevel :\n  A number indicating the desired log level. Default = 40\nThe parameters are optional. If present, they activate query, update, subscribe, \nmethods by SAPObject pick. If absent, only the equivalnt `sparql_*` methods \nare available, giving the host communication information each time.\n\n### Attributes:\n- logger\n- sap:\n  the SAPObject\n- connectionManager :\n  The underlying responsible for network connections\n\n### Creating a SEPA client\n\n```python3\nmySAP = open(path_to_sap,\"r\")\nsap = SAPObject(yaml.load(mySAP))\nsc = SEPA(sapObject=sap)\n```\n\n### Query and Update\n\nThese four methods (`query`, `sparql_query`, `update`, `sparql_update`, \n`query_all`, `clear`) expect either a sap entry or a SPARQL query/update. \nIn addition, it is possible to overwrite the sap communication parameters \nwith sepa. When a new query/update is issued, it may be preferrable to \ncatch the `RegistrationFailedExceptions`, `TokenExpiredException` and \n`TokenRequestFailedException` errors. The query methods return the SEPA answer.\n\n### Subscribe and Unsubscribe\n\nThe `subscribe` and `sparql_subscribe` primitive requires a sap entry or \na SPARQL query, an alias for the subscription, an handler (a lambda expression\nor a method with two parameters, one for added, the other for removed) \nand if needed the overwriting params for communication. \nThe `unsubscribe` primitive only needs to know the ID of the subscription.\n\n## SAPObject\n\nThis package supports Semantic Application Profiles. The package is encoding\nfree, since it expects a dictionary in input. Therefore, for a ysap we have\n```\nmySAP = open(path_to_sap,\"r\")\nsap = SAPObject(yaml.load(mySAP))\n```\nwhile for a jsap we have\n```\nmySAP = open(path_to_sap,\"r\")\nsap = SAPObject(json.load(mySAP))\n```\n\n## Something else?\n\nDocumentation is being written...\n\n## Foreseen changes\nMinors, plus the addition of some utilities.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/arces-wot/SEPA-python3-APIs", "keywords": "", "license": "GPLv3", "maintainer": "", "maintainer_email": "", "name": "sepy", "package_url": "https://pypi.org/project/sepy/", "platform": "", "project_url": "https://pypi.org/project/sepy/", "project_urls": {"Homepage": "https://github.com/arces-wot/SEPA-python3-APIs"}, "release_url": "https://pypi.org/project/sepy/0.3/", "requires_dist": ["websocket-client", "argparse", "prettytable", "pyyaml", "jinja2"], "requires_python": "", "summary": "Client-side libraries for the SEPA platform (Python3)", "version": "0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>SEPA-python3-APIs</h1>\n<p>Client-side libraries for the SEPA platform (Python3)</p>\n<h2>Installation and usage</h2>\n<p>Clone the repository.</p>\n<pre><code>cd SEPA-python3-APIs\nsudo python3 setup.py build\nsudo python3 setup.py sdist\nsudo python3 setup.py install\n</code></pre>\n<p>To use the classes you have to import them in this way:</p>\n<pre><code>from sepy.&lt;the class you want to import&gt; import *\n</code></pre>\n<p>For example, if you want to import the SAPObject (used to handle JSAP files)\nyou have to write:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sepy.SAPObject</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n</pre>\n<p>This library consists of 5 modules that can be used for different purposes:</p>\n<ul>\n<li>SAPObject: An handler class for SAP files</li>\n<li>SEPA: A low-level class used to develop a client for SEPA</li>\n<li>ConnectionHandler: A class for connection handling</li>\n<li>Exceptions</li>\n<li>tablaze: A runnable script (also callable as a function, to nicely print SEPA output)</li>\n</ul>\n<p>Let's talk about some classes deeply:</p>\n<h2>SEPA</h2>\n<p>These APIs allow to develop a client for the SEPA platform using a simple interface.\nFirst of all the class SEPA must be initialized. Then the standard methods\nto interact with the broker are available.</p>\n<h3>Parameters:</h3>\n<ul>\n<li>sapObject :\nA SAPObject file Default = None</li>\n<li>logLevel :\nA number indicating the desired log level. Default = 40\nThe parameters are optional. If present, they activate query, update, subscribe,\nmethods by SAPObject pick. If absent, only the equivalnt <code>sparql_*</code> methods\nare available, giving the host communication information each time.</li>\n</ul>\n<h3>Attributes:</h3>\n<ul>\n<li>logger</li>\n<li>sap:\nthe SAPObject</li>\n<li>connectionManager :\nThe underlying responsible for network connections</li>\n</ul>\n<h3>Creating a SEPA client</h3>\n<pre><span class=\"n\">mySAP</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">path_to_sap</span><span class=\"p\">,</span><span class=\"s2\">\"r\"</span><span class=\"p\">)</span>\n<span class=\"n\">sap</span> <span class=\"o\">=</span> <span class=\"n\">SAPObject</span><span class=\"p\">(</span><span class=\"n\">yaml</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">mySAP</span><span class=\"p\">))</span>\n<span class=\"n\">sc</span> <span class=\"o\">=</span> <span class=\"n\">SEPA</span><span class=\"p\">(</span><span class=\"n\">sapObject</span><span class=\"o\">=</span><span class=\"n\">sap</span><span class=\"p\">)</span>\n</pre>\n<h3>Query and Update</h3>\n<p>These four methods (<code>query</code>, <code>sparql_query</code>, <code>update</code>, <code>sparql_update</code>,\n<code>query_all</code>, <code>clear</code>) expect either a sap entry or a SPARQL query/update.\nIn addition, it is possible to overwrite the sap communication parameters\nwith sepa. When a new query/update is issued, it may be preferrable to\ncatch the <code>RegistrationFailedExceptions</code>, <code>TokenExpiredException</code> and\n<code>TokenRequestFailedException</code> errors. The query methods return the SEPA answer.</p>\n<h3>Subscribe and Unsubscribe</h3>\n<p>The <code>subscribe</code> and <code>sparql_subscribe</code> primitive requires a sap entry or\na SPARQL query, an alias for the subscription, an handler (a lambda expression\nor a method with two parameters, one for added, the other for removed)\nand if needed the overwriting params for communication.\nThe <code>unsubscribe</code> primitive only needs to know the ID of the subscription.</p>\n<h2>SAPObject</h2>\n<p>This package supports Semantic Application Profiles. The package is encoding\nfree, since it expects a dictionary in input. Therefore, for a ysap we have</p>\n<pre><code>mySAP = open(path_to_sap,\"r\")\nsap = SAPObject(yaml.load(mySAP))\n</code></pre>\n<p>while for a jsap we have</p>\n<pre><code>mySAP = open(path_to_sap,\"r\")\nsap = SAPObject(json.load(mySAP))\n</code></pre>\n<h2>Something else?</h2>\n<p>Documentation is being written...</p>\n<h2>Foreseen changes</h2>\n<p>Minors, plus the addition of some utilities.</p>\n\n          </div>"}, "last_serial": 4744112, "releases": {"0.3": [{"comment_text": "", "digests": {"md5": "97b4d69c3123ab2a9549a97ecc82a760", "sha256": "1d45328e5f97dd55d14814649e6e031dde10c1b7d19549bc72935e5d53d87425"}, "downloads": -1, "filename": "sepy-0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "97b4d69c3123ab2a9549a97ecc82a760", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 22141, "upload_time": "2019-01-26T17:49:59", "upload_time_iso_8601": "2019-01-26T17:49:59.674775Z", "url": "https://files.pythonhosted.org/packages/48/94/8432ead21fb95f405f0fd7221be46bd1eebfa929721ba95e2b280184909a/sepy-0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9d6ff88673427e904f0f19666dbe24ec", "sha256": "b470806a2cb4c6acdd9c7db828ef7e9853808ae4a187c414a4b705af3b238df0"}, "downloads": -1, "filename": "sepy-0.3.tar.gz", "has_sig": false, "md5_digest": "9d6ff88673427e904f0f19666dbe24ec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14572, "upload_time": "2019-01-26T17:50:03", "upload_time_iso_8601": "2019-01-26T17:50:03.198990Z", "url": "https://files.pythonhosted.org/packages/0a/8f/bcc0b1296c8c6eb362a4eeb375ce9f7d0fd5ab5cfd6438e50cbd1e58be41/sepy-0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "97b4d69c3123ab2a9549a97ecc82a760", "sha256": "1d45328e5f97dd55d14814649e6e031dde10c1b7d19549bc72935e5d53d87425"}, "downloads": -1, "filename": "sepy-0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "97b4d69c3123ab2a9549a97ecc82a760", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 22141, "upload_time": "2019-01-26T17:49:59", "upload_time_iso_8601": "2019-01-26T17:49:59.674775Z", "url": "https://files.pythonhosted.org/packages/48/94/8432ead21fb95f405f0fd7221be46bd1eebfa929721ba95e2b280184909a/sepy-0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9d6ff88673427e904f0f19666dbe24ec", "sha256": "b470806a2cb4c6acdd9c7db828ef7e9853808ae4a187c414a4b705af3b238df0"}, "downloads": -1, "filename": "sepy-0.3.tar.gz", "has_sig": false, "md5_digest": "9d6ff88673427e904f0f19666dbe24ec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14572, "upload_time": "2019-01-26T17:50:03", "upload_time_iso_8601": "2019-01-26T17:50:03.198990Z", "url": "https://files.pythonhosted.org/packages/0a/8f/bcc0b1296c8c6eb362a4eeb375ce9f7d0fd5ab5cfd6438e50cbd1e58be41/sepy-0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:54:54 2020"}