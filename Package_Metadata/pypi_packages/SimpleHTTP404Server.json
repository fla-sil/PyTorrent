{"info": {"author": "Patrick Cloke", "author_email": "patrick@cloke.us", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.3", "Topic :: Internet :: WWW/HTTP", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "SimpleHTTP404Server: Easy testing of 404.html\n=============================================\n\n*SimpleHTTP404Server* allows easy testing of static HTML providers that allow\n404 response customization via a 404.html page. This includes at least GitHub_\nand FastMail_. It is a simple extension to SimpleHTTPServer_, a built-in Python\nmodule which servers the current directory over HTTP.\n\nIf you server a static site using `GitHub Pages`_ or another static website\nprovider, this module can help you test your 404 page before pushing changes to\na live website.\n\nFirst install the package using pip:\n\n.. code-block:: bash\n\n    pip install SimpleHTTP404Server\n\nBrowse to the directory, and run the following to server it on port 8000.\n\n.. code-block:: bash\n\n    python -m SimpleHTTP404Server\n\nOr, if you'd like to specify a different port:\n\n.. code-block:: bash\n\n    python -m SimpleHTTP404Server 1234\n\nAnd that's it! Now browse to a page that exists, maybe\nhttp://localhost:8000/index.html. And check that your 404.html page is properly\nloaded by checking a few different paths:\n* http://localhost:8000/404.html\n* http://localhost:8000/does-not-exist.html\n* http://localhost:8000/does/not/exist.html\n\n.. _GitHub: https://help.github.com/articles/custom-404-pages/\n.. _FastMail: https://www.fastmail.com/help/files/website.html\n.. _SimpleHTTPServer: https://docs.python.org/2/library/simplehttpserver.html\n.. _GitHub Pages: https://help.github.com/articles/what-are-github-pages/\n\nUsecases\n========\n\nPersonally this is used to test any GitHub Pages sites I use, in particular my\nblog_, which is build on Pelican_. This is done via Fabric_:\n\n.. code-block:: python\n\n    @task\n    def serve():\n        \"\"\"Locally serve the blog.\"\"\"\n        local('cd {deploy_path} && python -m SimpleHTTP404Server {listen_port}'.format(**env))\n\n.. _blog: http://patrick.cloke.us\n.. _Pelican: http://blog.getpelican.com/\n.. _Fabric: http://www.fabfile.org/\n\nFuture\n======\n\nPlease let me know (by filing issues or pull requests) if you find any bugs or\nif you feel there are features missing.\n\r\nv0.2.0: May 13, 2015\n====================\n\n* Switch back to a simple way of getting the 404.html page. The complicated way\n  seems to imply it fixed server 404 pages from non-root directories...but it\n  doesn't, ensure your paths are absolute.\n\nv0.1.2: May 13, 2015\n====================\n\n* Package readme, changelog.\n\nv0.1.1: May 13, 2015\n====================\n\n* Supports packaged version uploaded to pypi.\n\nv0.1.0: Feb. 24, 2015\n=====================\n\n* Initial version, supports loading 404.html page from any subdirectory.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/clokep/SimpleHTTP404Server/", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "SimpleHTTP404Server", "package_url": "https://pypi.org/project/SimpleHTTP404Server/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/SimpleHTTP404Server/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/clokep/SimpleHTTP404Server/"}, "release_url": "https://pypi.org/project/SimpleHTTP404Server/0.2.0/", "requires_dist": null, "requires_python": null, "summary": "A Python SimpleHTTPServer, but serves 404.html if a page is not found.", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"simplehttp404server-easy-testing-of-404-html\">\n<h2>SimpleHTTP404Server: Easy testing of 404.html</h2>\n<p><em>SimpleHTTP404Server</em> allows easy testing of static HTML providers that allow\n404 response customization via a 404.html page. This includes at least <a href=\"https://help.github.com/articles/custom-404-pages/\" rel=\"nofollow\">GitHub</a>\nand <a href=\"https://www.fastmail.com/help/files/website.html\" rel=\"nofollow\">FastMail</a>. It is a simple extension to <a href=\"https://docs.python.org/2/library/simplehttpserver.html\" rel=\"nofollow\">SimpleHTTPServer</a>, a built-in Python\nmodule which servers the current directory over HTTP.</p>\n<p>If you server a static site using <a href=\"https://help.github.com/articles/what-are-github-pages/\" rel=\"nofollow\">GitHub Pages</a> or another static website\nprovider, this module can help you test your 404 page before pushing changes to\na live website.</p>\n<p>First install the package using pip:</p>\n<pre>pip install SimpleHTTP404Server\n</pre>\n<p>Browse to the directory, and run the following to server it on port 8000.</p>\n<pre>python -m SimpleHTTP404Server\n</pre>\n<p>Or, if you\u2019d like to specify a different port:</p>\n<pre>python -m SimpleHTTP404Server <span class=\"m\">1234</span>\n</pre>\n<p>And that\u2019s it! Now browse to a page that exists, maybe\n<a href=\"http://localhost:8000/index.html\" rel=\"nofollow\">http://localhost:8000/index.html</a>. And check that your 404.html page is properly\nloaded by checking a few different paths:\n* <a href=\"http://localhost:8000/404.html\" rel=\"nofollow\">http://localhost:8000/404.html</a>\n* <a href=\"http://localhost:8000/does-not-exist.html\" rel=\"nofollow\">http://localhost:8000/does-not-exist.html</a>\n* <a href=\"http://localhost:8000/does/not/exist.html\" rel=\"nofollow\">http://localhost:8000/does/not/exist.html</a></p>\n</div>\n<div id=\"usecases\">\n<h2>Usecases</h2>\n<p>Personally this is used to test any GitHub Pages sites I use, in particular my\n<a href=\"http://patrick.cloke.us\" rel=\"nofollow\">blog</a>, which is build on <a href=\"http://blog.getpelican.com/\" rel=\"nofollow\">Pelican</a>. This is done via <a href=\"http://www.fabfile.org/\" rel=\"nofollow\">Fabric</a>:</p>\n<pre><span class=\"nd\">@task</span>\n<span class=\"k\">def</span> <span class=\"nf\">serve</span><span class=\"p\">():</span>\n    <span class=\"sd\">\"\"\"Locally serve the blog.\"\"\"</span>\n    <span class=\"n\">local</span><span class=\"p\">(</span><span class=\"s1\">'cd </span><span class=\"si\">{deploy_path}</span><span class=\"s1\"> &amp;&amp; python -m SimpleHTTP404Server </span><span class=\"si\">{listen_port}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">env</span><span class=\"p\">))</span>\n</pre>\n</div>\n<div id=\"future\">\n<h2>Future</h2>\n<p>Please let me know (by filing issues or pull requests) if you find any bugs or\nif you feel there are features missing.</p>\n</div>\n<div id=\"v0-2-0-may-13-2015\">\n<h2>v0.2.0: May 13, 2015</h2>\n<ul>\n<li>Switch back to a simple way of getting the 404.html page. The complicated way\nseems to imply it fixed server 404 pages from non-root directories\u2026but it\ndoesn\u2019t, ensure your paths are absolute.</li>\n</ul>\n</div>\n<div id=\"v0-1-2-may-13-2015\">\n<h2>v0.1.2: May 13, 2015</h2>\n<ul>\n<li>Package readme, changelog.</li>\n</ul>\n</div>\n<div id=\"v0-1-1-may-13-2015\">\n<h2>v0.1.1: May 13, 2015</h2>\n<ul>\n<li>Supports packaged version uploaded to pypi.</li>\n</ul>\n</div>\n<div id=\"v0-1-0-feb-24-2015\">\n<h2>v0.1.0: Feb. 24, 2015</h2>\n<ul>\n<li>Initial version, supports loading 404.html page from any subdirectory.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 1546487, "releases": {"0.1.2": [{"comment_text": "", "digests": {"md5": "46ba1ad29b2e63fe492e4e499772fbba", "sha256": "2186b78d120541683bebbb00e5a443a2c8a49e021ac28401c63f4d27e40df9fd"}, "downloads": -1, "filename": "SimpleHTTP404Server-0.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "46ba1ad29b2e63fe492e4e499772fbba", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 5378, "upload_time": "2015-05-14T02:52:29", "upload_time_iso_8601": "2015-05-14T02:52:29.296707Z", "url": "https://files.pythonhosted.org/packages/d0/d8/6df44af83175c368414c2222c75f4ec4df4eff762d51dc6c367224adb8b9/SimpleHTTP404Server-0.1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5b816fc233f39e2806258c33b1891d1a", "sha256": "7c3577490d818e4a7aa377419e6ba20d09ea6c11770b7899382dd074fe03544d"}, "downloads": -1, "filename": "SimpleHTTP404Server-0.1.2.tar.gz", "has_sig": false, "md5_digest": "5b816fc233f39e2806258c33b1891d1a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4010, "upload_time": "2015-05-14T02:52:25", "upload_time_iso_8601": "2015-05-14T02:52:25.704330Z", "url": "https://files.pythonhosted.org/packages/dc/7e/a9da5f0b5d7fe7fa1454d9939629bc585c248a79c5205dc59d3d2a4b7e37/SimpleHTTP404Server-0.1.2.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "bc799bb8b2caba6e1237f57907f41af1", "sha256": "7c95346bb136e82caa3267606c94125cdd8a4dfb60e6aed0f1aaf8c9138b9304"}, "downloads": -1, "filename": "SimpleHTTP404Server-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "bc799bb8b2caba6e1237f57907f41af1", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 5199, "upload_time": "2015-05-14T03:17:29", "upload_time_iso_8601": "2015-05-14T03:17:29.114444Z", "url": "https://files.pythonhosted.org/packages/d4/d6/a6fce73358fb96019d07953cb339fc4f0cac028b50aef2cb8bf9bbdfc274/SimpleHTTP404Server-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "488ec9d0b14f36f83e74ca2f93b9b048", "sha256": "bda0a2b28d327d49ee7566613c30a1946e4cdf73a39799258e9e22e53cd5567c"}, "downloads": -1, "filename": "SimpleHTTP404Server-0.2.0.tar.gz", "has_sig": false, "md5_digest": "488ec9d0b14f36f83e74ca2f93b9b048", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3764, "upload_time": "2015-05-14T03:17:25", "upload_time_iso_8601": "2015-05-14T03:17:25.366613Z", "url": "https://files.pythonhosted.org/packages/40/c9/3ff03c9112da485642e9da9717ba5d0be57bd4e7372b09f12482ec5eb92b/SimpleHTTP404Server-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bc799bb8b2caba6e1237f57907f41af1", "sha256": "7c95346bb136e82caa3267606c94125cdd8a4dfb60e6aed0f1aaf8c9138b9304"}, "downloads": -1, "filename": "SimpleHTTP404Server-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "bc799bb8b2caba6e1237f57907f41af1", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 5199, "upload_time": "2015-05-14T03:17:29", "upload_time_iso_8601": "2015-05-14T03:17:29.114444Z", "url": "https://files.pythonhosted.org/packages/d4/d6/a6fce73358fb96019d07953cb339fc4f0cac028b50aef2cb8bf9bbdfc274/SimpleHTTP404Server-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "488ec9d0b14f36f83e74ca2f93b9b048", "sha256": "bda0a2b28d327d49ee7566613c30a1946e4cdf73a39799258e9e22e53cd5567c"}, "downloads": -1, "filename": "SimpleHTTP404Server-0.2.0.tar.gz", "has_sig": false, "md5_digest": "488ec9d0b14f36f83e74ca2f93b9b048", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3764, "upload_time": "2015-05-14T03:17:25", "upload_time_iso_8601": "2015-05-14T03:17:25.366613Z", "url": "https://files.pythonhosted.org/packages/40/c9/3ff03c9112da485642e9da9717ba5d0be57bd4e7372b09f12482ec5eb92b/SimpleHTTP404Server-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:10:43 2020"}