{"info": {"author": "Mohammad Abbas", "author_email": "mohammad.abbas86@gmail.com", "bugtrack_url": null, "classifiers": ["Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7"], "description": "# django-dynamic-models-readonly\n\n## Overview\n\nDynamic Django models readonly allow users to define, edit, and populate their own database tables and apply runtime schema changes to the database. `django-dynamic-models` is loosely based on the [runtime dynamic models](https://dynamic-models.readthedocs.io/en/latest/) talk from DjangoCon 2011. The basic concept involves around dynamic class declaration using the built-in `type` function. We use `type` to dynamically declare new Django models at runtime, and it is the goal of this project to provide a simple API to allow developers to get started with runtime dynamic models quickly.\n\nThis package provides abstract models to help Django developers quickly implement dynamic runtime models for their specific use case while the runtime schema changes and Django's model registry are handled automatically. The schema changes are applied in pure Django, *without* the migrations framework, so none of your dynamic models will affect your migrations files at all.\n\n## Installation\n\nInstall `django-dynamic-model-readonly` from PyPi with:\n\n```\npip install django-dynamic-model-readonly\n```\n\nThen, add `'dynamic_models'` and `django.contrib.contenttypes` to `INSTALLED_APPS`.\n> **Note**: \n> \n> Django's Content Types app is currently required, although this dependency may possibly removed in the future.\n\n```python\nINSTALLED_APPS = [\n    ...\n    'dynamic_models',\n    'django.contrib.conttenttypes'\n]\n```\n\n## Usage\n\nTo begin, simply subclass `AbstractModelSchema` and `AbstractFieldSchema` from `dynamic_models.models`. The abstract models will still work if no additional fields are provided. The simplest way to get started with dynamic models would be to add subclasses to your app's `models.py`, and run migrations. Then, new models can be created dynamically by creating instances of model schema and field schema models.\n\n```python\nfrom dynamic_models.models import AbstractModelSchema, AbstractFieldSchema\n\nclass ModelSchema(AbstractModelSchema):\n    pass\n\nclass FieldSchema(AbstractFieldSchema):\n    pass\n```\n\nNow, run the migration commands:\n```\n$ python manage.py makemigrations\n> ... making migrations ...\n\n$ python manage.py migrate\n> ... migrating ...\n```\n\n### Creating dynamic models\n\nCreating a dynamic model is as simple as creating a new instance of your concrete model schema class. `AbstractModelSchema` provides a single field. The `name` field will be used to generate the class name and the name of the database table. Once created, the `as_model` method can be used to retreive the dynamic model class.\n\n>**Note**:\n>\n>The `name` field has `unique=True` by default to help enforce unique table names generated by the `AbstracModelSchema` instance. To use a different table naming scheme, the `db_table` (and probably `model_name`) properties should be overridden. Care should be taken that it is not possible to generate the same `db_table` from different instances of `AbstractModelSchema`. \n\nThe default model_name will be `Car` and the default table_name `myapp_car` where \"myapp\" is the app label. The table name and model name are derived from the `name` value.\n\n```python\ncar_model_schema = ModelSchema.objects.create(name='car')\nCar = car_model_schema.as_model()\nassert issubclass(Car, models.Model)\n\n# The dynamic model can now be used to create Car instances\ninstance = Car.objects.create()\nassert instance.pk is not None\n```\n\n### Adding fields\n\nCreating field schema to add to models is quite similar to creating dynamic models. `AbstractFieldSchema` provides two fields, `name` and `data_type`, and they are responsible for naming the database column and choosing which Django field to add to the dynamic model. Fields are not attached to any dynamic model when they are created, so the same field can be applied to any number of dynamic models. The constraints applied to the field, however, are specific for each model-field pair. Currently supported data types are returned by the `get_data_types` method on subclasses of `AbstractModelSchema`. Currently, supported data types and their corresponding Django field classes are listed below:\n\n> **Note**: The value of `data_type` is not editable while data migrations are not supported.\n\n| Data Type | Django Field |\n|:---------:|:------------:|\n| character | CharField    |\n| text      | TextField    |\n| integer   | IntegerField |\n| float     | FloatField   |\n| boolean   | BooleanField |\n| date      | DateTimeField|\n\n```python\ncar_model_schema = ModelSchema.objects.create(name='car')\ncolor_field_schema = FieldSchema.objects.create(name='color', data_type='character')\n```\nThe color field is still completely independent of the Car model, and it has not been added to any database tables. Like normal CharFields, a max_length must be defined for the character data type. Add a field to a dynamic model with the `add_field` method\n\n```python\ncolor = car_model_schema.add_field(\n    color_field_schema,\n    null=False,\n    unique=False,\n    max_length=16\n)\n```\nField constraints can be added when a field schema is attached to a model schema. Now, the new field can be used as you normally would in Django. Be sure to grab\nthe lastest version of the dynamic model after changing schema or `OutdatedModelError` will be raised on save.\n\n```python\nCar = car_model_schema.as_model()\nred_car = Car.objects.create(color='red')\nassert red_car.color == 'red'\n\n# This will raise an error because the 'color' field is required\nanother_car = Car.objects.create()\n```\n\nChange the schema with 'update_field' to allow null. Null columns cannot currently be changed to not null because a default value will be required to fill the null spaces. This limitation should be removed when default values are implemented.\n\nExisting field schema can be edited or removed with the `update_field` and `remove_field` methods.\n\n```python\ncar_model_schema.update_field(color_field_schema, null=True)\ncar_model_schema.remove_field(color_field_schema)\n```\n\n## Support\n`django-dynamic-models` is tested on Python 3.6+ with Django 2.0+\n\n<hr>\n\n# Reference\n\n## AbstractModelSchema\n\n### Fields\n\n#### `name`\n\nThe value of name deterimines the model name and table name of the dynamic model. It has the `unique` constraint applied by default, but can be removed if a custom naming scheme has been implemented to prevent duplicate table and model names.\n<hr>\n\n### Methods\n\n#### `as_model()`\n\nReturn the dynamic model generated by the model schema instance.\n<hr>\n\n#### `get_fields()`\n\nReturn all `ModelFieldSchema` instances attached to this model.\n<hr>\n\n#### `get_field_for_schema(field_schema)`\n\nReturn the `ModelFieldSchema` instance for this model schema and the provided field schema arugument.\n<hr>\n\n#### `add_field(field_schema, **options)`\n\nAdd a field to this dynamic model by creating a new instance of `ModelFieldSchema`. Takes the field schema instance as the first argument and optionally any constraints applied to this field. Valid constraints are `null`, `unique`, and `max_length` if the field's data type requires.\n<hr>\n\n#### `update_field(field_schema, **options)`\n\nUpdate an existing field with new contraints. Currently, fields cannot be changed from `null=True` to `null=False`.\n\n<hr>\n\n#### `remove_field(field_schema)`\n\nRemove a field from the dynamic model.\n<hr>\n\n#### `is_current_model(model)`\n\nReturns `True` if the provided model is current with the latest schema and `False` if the schema has since changed from when the model was generated. This does not work on unsaved schema instances.\n<hr>\n\n#### `destroy_model()`\n\nPurges the dynamic model from the app registry and the database without deleting the schema instance. There are few use cases for calling this method manually.\n<hr>\n\n\n## AbstractFieldSchema\n\n### Fields\n\n#### `name`\n\nThe name of the field. Used to generate the database column name. Names should not start with an underscore to avoid potentially clashing with private attributes on the generated models.\n<hr>\n\n#### `data_type`\n\nUsed to determine the Django model field to used on the dynamic model. See above for a list of valid data types.\n<hr>\n\n### Methods\n\n#### `get_data_types()`\n\nReturn a list of available data type options.\n<hr>\n\n#### `update_last_modified()`\n\nMarks all related model schema objects as changed, forcing the dynamic model to be redefined the next time `as_model` is called.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/abbas123456/django-dynamic-models-readonly", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "django-dynamic-models-readonly", "package_url": "https://pypi.org/project/django-dynamic-models-readonly/", "platform": "", "project_url": "https://pypi.org/project/django-dynamic-models-readonly/", "project_urls": {"Homepage": "https://github.com/abbas123456/django-dynamic-models-readonly"}, "release_url": "https://pypi.org/project/django-dynamic-models-readonly/0.1.1/", "requires_dist": ["Django (>=2.0)"], "requires_python": "", "summary": "Allow dynamic creation and updates to database schema at runtime.", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>django-dynamic-models-readonly</h1>\n<h2>Overview</h2>\n<p>Dynamic Django models readonly allow users to define, edit, and populate their own database tables and apply runtime schema changes to the database. <code>django-dynamic-models</code> is loosely based on the <a href=\"https://dynamic-models.readthedocs.io/en/latest/\" rel=\"nofollow\">runtime dynamic models</a> talk from DjangoCon 2011. The basic concept involves around dynamic class declaration using the built-in <code>type</code> function. We use <code>type</code> to dynamically declare new Django models at runtime, and it is the goal of this project to provide a simple API to allow developers to get started with runtime dynamic models quickly.</p>\n<p>This package provides abstract models to help Django developers quickly implement dynamic runtime models for their specific use case while the runtime schema changes and Django's model registry are handled automatically. The schema changes are applied in pure Django, <em>without</em> the migrations framework, so none of your dynamic models will affect your migrations files at all.</p>\n<h2>Installation</h2>\n<p>Install <code>django-dynamic-model-readonly</code> from PyPi with:</p>\n<pre><code>pip install django-dynamic-model-readonly\n</code></pre>\n<p>Then, add <code>'dynamic_models'</code> and <code>django.contrib.contenttypes</code> to <code>INSTALLED_APPS</code>.</p>\n<blockquote>\n<p><strong>Note</strong>:</p>\n<p>Django's Content Types app is currently required, although this dependency may possibly removed in the future.</p>\n</blockquote>\n<pre><span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"o\">...</span>\n    <span class=\"s1\">'dynamic_models'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'django.contrib.conttenttypes'</span>\n<span class=\"p\">]</span>\n</pre>\n<h2>Usage</h2>\n<p>To begin, simply subclass <code>AbstractModelSchema</code> and <code>AbstractFieldSchema</code> from <code>dynamic_models.models</code>. The abstract models will still work if no additional fields are provided. The simplest way to get started with dynamic models would be to add subclasses to your app's <code>models.py</code>, and run migrations. Then, new models can be created dynamically by creating instances of model schema and field schema models.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">dynamic_models.models</span> <span class=\"kn\">import</span> <span class=\"n\">AbstractModelSchema</span><span class=\"p\">,</span> <span class=\"n\">AbstractFieldSchema</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">ModelSchema</span><span class=\"p\">(</span><span class=\"n\">AbstractModelSchema</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">FieldSchema</span><span class=\"p\">(</span><span class=\"n\">AbstractFieldSchema</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</pre>\n<p>Now, run the migration commands:</p>\n<pre><code>$ python manage.py makemigrations\n&gt; ... making migrations ...\n\n$ python manage.py migrate\n&gt; ... migrating ...\n</code></pre>\n<h3>Creating dynamic models</h3>\n<p>Creating a dynamic model is as simple as creating a new instance of your concrete model schema class. <code>AbstractModelSchema</code> provides a single field. The <code>name</code> field will be used to generate the class name and the name of the database table. Once created, the <code>as_model</code> method can be used to retreive the dynamic model class.</p>\n<blockquote>\n<p><strong>Note</strong>:</p>\n<p>The <code>name</code> field has <code>unique=True</code> by default to help enforce unique table names generated by the <code>AbstracModelSchema</code> instance. To use a different table naming scheme, the <code>db_table</code> (and probably <code>model_name</code>) properties should be overridden. Care should be taken that it is not possible to generate the same <code>db_table</code> from different instances of <code>AbstractModelSchema</code>.</p>\n</blockquote>\n<p>The default model_name will be <code>Car</code> and the default table_name <code>myapp_car</code> where \"myapp\" is the app label. The table name and model name are derived from the <code>name</code> value.</p>\n<pre><span class=\"n\">car_model_schema</span> <span class=\"o\">=</span> <span class=\"n\">ModelSchema</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'car'</span><span class=\"p\">)</span>\n<span class=\"n\">Car</span> <span class=\"o\">=</span> <span class=\"n\">car_model_schema</span><span class=\"o\">.</span><span class=\"n\">as_model</span><span class=\"p\">()</span>\n<span class=\"k\">assert</span> <span class=\"nb\">issubclass</span><span class=\"p\">(</span><span class=\"n\">Car</span><span class=\"p\">,</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># The dynamic model can now be used to create Car instances</span>\n<span class=\"n\">instance</span> <span class=\"o\">=</span> <span class=\"n\">Car</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">()</span>\n<span class=\"k\">assert</span> <span class=\"n\">instance</span><span class=\"o\">.</span><span class=\"n\">pk</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span>\n</pre>\n<h3>Adding fields</h3>\n<p>Creating field schema to add to models is quite similar to creating dynamic models. <code>AbstractFieldSchema</code> provides two fields, <code>name</code> and <code>data_type</code>, and they are responsible for naming the database column and choosing which Django field to add to the dynamic model. Fields are not attached to any dynamic model when they are created, so the same field can be applied to any number of dynamic models. The constraints applied to the field, however, are specific for each model-field pair. Currently supported data types are returned by the <code>get_data_types</code> method on subclasses of <code>AbstractModelSchema</code>. Currently, supported data types and their corresponding Django field classes are listed below:</p>\n<blockquote>\n<p><strong>Note</strong>: The value of <code>data_type</code> is not editable while data migrations are not supported.</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Data Type</th>\n<th align=\"center\">Django Field</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">character</td>\n<td align=\"center\">CharField</td>\n</tr>\n<tr>\n<td align=\"center\">text</td>\n<td align=\"center\">TextField</td>\n</tr>\n<tr>\n<td align=\"center\">integer</td>\n<td align=\"center\">IntegerField</td>\n</tr>\n<tr>\n<td align=\"center\">float</td>\n<td align=\"center\">FloatField</td>\n</tr>\n<tr>\n<td align=\"center\">boolean</td>\n<td align=\"center\">BooleanField</td>\n</tr>\n<tr>\n<td align=\"center\">date</td>\n<td align=\"center\">DateTimeField</td>\n</tr></tbody></table>\n<pre><span class=\"n\">car_model_schema</span> <span class=\"o\">=</span> <span class=\"n\">ModelSchema</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'car'</span><span class=\"p\">)</span>\n<span class=\"n\">color_field_schema</span> <span class=\"o\">=</span> <span class=\"n\">FieldSchema</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'color'</span><span class=\"p\">,</span> <span class=\"n\">data_type</span><span class=\"o\">=</span><span class=\"s1\">'character'</span><span class=\"p\">)</span>\n</pre>\n<p>The color field is still completely independent of the Car model, and it has not been added to any database tables. Like normal CharFields, a max_length must be defined for the character data type. Add a field to a dynamic model with the <code>add_field</code> method</p>\n<pre><span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"n\">car_model_schema</span><span class=\"o\">.</span><span class=\"n\">add_field</span><span class=\"p\">(</span>\n    <span class=\"n\">color_field_schema</span><span class=\"p\">,</span>\n    <span class=\"n\">null</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"n\">unique</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">16</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Field constraints can be added when a field schema is attached to a model schema. Now, the new field can be used as you normally would in Django. Be sure to grab\nthe lastest version of the dynamic model after changing schema or <code>OutdatedModelError</code> will be raised on save.</p>\n<pre><span class=\"n\">Car</span> <span class=\"o\">=</span> <span class=\"n\">car_model_schema</span><span class=\"o\">.</span><span class=\"n\">as_model</span><span class=\"p\">()</span>\n<span class=\"n\">red_car</span> <span class=\"o\">=</span> <span class=\"n\">Car</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s1\">'red'</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">red_car</span><span class=\"o\">.</span><span class=\"n\">color</span> <span class=\"o\">==</span> <span class=\"s1\">'red'</span>\n\n<span class=\"c1\"># This will raise an error because the 'color' field is required</span>\n<span class=\"n\">another_car</span> <span class=\"o\">=</span> <span class=\"n\">Car</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">()</span>\n</pre>\n<p>Change the schema with 'update_field' to allow null. Null columns cannot currently be changed to not null because a default value will be required to fill the null spaces. This limitation should be removed when default values are implemented.</p>\n<p>Existing field schema can be edited or removed with the <code>update_field</code> and <code>remove_field</code> methods.</p>\n<pre><span class=\"n\">car_model_schema</span><span class=\"o\">.</span><span class=\"n\">update_field</span><span class=\"p\">(</span><span class=\"n\">color_field_schema</span><span class=\"p\">,</span> <span class=\"n\">null</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">car_model_schema</span><span class=\"o\">.</span><span class=\"n\">remove_field</span><span class=\"p\">(</span><span class=\"n\">color_field_schema</span><span class=\"p\">)</span>\n</pre>\n<h2>Support</h2>\n<p><code>django-dynamic-models</code> is tested on Python 3.6+ with Django 2.0+</p>\n<hr>\n<h1>Reference</h1>\n<h2>AbstractModelSchema</h2>\n<h3>Fields</h3>\n<h4><code>name</code></h4>\n<p>The value of name deterimines the model name and table name of the dynamic model. It has the <code>unique</code> constraint applied by default, but can be removed if a custom naming scheme has been implemented to prevent duplicate table and model names.</p>\n<hr>\n<h3>Methods</h3>\n<h4><code>as_model()</code></h4>\n<p>Return the dynamic model generated by the model schema instance.</p>\n<hr>\n<h4><code>get_fields()</code></h4>\n<p>Return all <code>ModelFieldSchema</code> instances attached to this model.</p>\n<hr>\n<h4><code>get_field_for_schema(field_schema)</code></h4>\n<p>Return the <code>ModelFieldSchema</code> instance for this model schema and the provided field schema arugument.</p>\n<hr>\n<h4><code>add_field(field_schema, **options)</code></h4>\n<p>Add a field to this dynamic model by creating a new instance of <code>ModelFieldSchema</code>. Takes the field schema instance as the first argument and optionally any constraints applied to this field. Valid constraints are <code>null</code>, <code>unique</code>, and <code>max_length</code> if the field's data type requires.</p>\n<hr>\n<h4><code>update_field(field_schema, **options)</code></h4>\n<p>Update an existing field with new contraints. Currently, fields cannot be changed from <code>null=True</code> to <code>null=False</code>.</p>\n<hr>\n<h4><code>remove_field(field_schema)</code></h4>\n<p>Remove a field from the dynamic model.</p>\n<hr>\n<h4><code>is_current_model(model)</code></h4>\n<p>Returns <code>True</code> if the provided model is current with the latest schema and <code>False</code> if the schema has since changed from when the model was generated. This does not work on unsaved schema instances.</p>\n<hr>\n<h4><code>destroy_model()</code></h4>\n<p>Purges the dynamic model from the app registry and the database without deleting the schema instance. There are few use cases for calling this method manually.</p>\n<hr>\n<h2>AbstractFieldSchema</h2>\n<h3>Fields</h3>\n<h4><code>name</code></h4>\n<p>The name of the field. Used to generate the database column name. Names should not start with an underscore to avoid potentially clashing with private attributes on the generated models.</p>\n<hr>\n<h4><code>data_type</code></h4>\n<p>Used to determine the Django model field to used on the dynamic model. See above for a list of valid data types.</p>\n<hr>\n<h3>Methods</h3>\n<h4><code>get_data_types()</code></h4>\n<p>Return a list of available data type options.</p>\n<hr>\n<h4><code>update_last_modified()</code></h4>\n<p>Marks all related model schema objects as changed, forcing the dynamic model to be redefined the next time <code>as_model</code> is called.</p>\n\n          </div>"}, "last_serial": 6978897, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "6c0a9b7d76b12d55053bd96448a9fb28", "sha256": "93b6ca4bb378640b3329dc39a07a8a49704816094e575667d835c4e7f37fef1d"}, "downloads": -1, "filename": "django_dynamic_models_readonly-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "6c0a9b7d76b12d55053bd96448a9fb28", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 20582, "upload_time": "2020-04-08T16:09:01", "upload_time_iso_8601": "2020-04-08T16:09:01.414635Z", "url": "https://files.pythonhosted.org/packages/35/77/ebf8d741ab965edf7c66b66c0b0bf670a3f589fde645182a7d7d543b4f96/django_dynamic_models_readonly-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e50cd1b7b4dfc4818f5b0619d5ff25e3", "sha256": "6c8ca722c08582dd6296df0b161e2c325768a1960c3531d27824b5a968fff82d"}, "downloads": -1, "filename": "django-dynamic-models-readonly-0.1.1.tar.gz", "has_sig": false, "md5_digest": "e50cd1b7b4dfc4818f5b0619d5ff25e3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14314, "upload_time": "2020-04-08T16:09:03", "upload_time_iso_8601": "2020-04-08T16:09:03.259206Z", "url": "https://files.pythonhosted.org/packages/1e/67/74b1a959bb05bfb2f807353eb7539e64f4fe129bfe5d1452c9390d249175/django-dynamic-models-readonly-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6c0a9b7d76b12d55053bd96448a9fb28", "sha256": "93b6ca4bb378640b3329dc39a07a8a49704816094e575667d835c4e7f37fef1d"}, "downloads": -1, "filename": "django_dynamic_models_readonly-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "6c0a9b7d76b12d55053bd96448a9fb28", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 20582, "upload_time": "2020-04-08T16:09:01", "upload_time_iso_8601": "2020-04-08T16:09:01.414635Z", "url": "https://files.pythonhosted.org/packages/35/77/ebf8d741ab965edf7c66b66c0b0bf670a3f589fde645182a7d7d543b4f96/django_dynamic_models_readonly-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e50cd1b7b4dfc4818f5b0619d5ff25e3", "sha256": "6c8ca722c08582dd6296df0b161e2c325768a1960c3531d27824b5a968fff82d"}, "downloads": -1, "filename": "django-dynamic-models-readonly-0.1.1.tar.gz", "has_sig": false, "md5_digest": "e50cd1b7b4dfc4818f5b0619d5ff25e3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14314, "upload_time": "2020-04-08T16:09:03", "upload_time_iso_8601": "2020-04-08T16:09:03.259206Z", "url": "https://files.pythonhosted.org/packages/1e/67/74b1a959bb05bfb2f807353eb7539e64f4fe129bfe5d1452c9390d249175/django-dynamic-models-readonly-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:36:29 2020"}