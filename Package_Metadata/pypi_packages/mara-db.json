{"info": {"author": "Mara contributors", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": "# Mara DB\n\n[![Build Status](https://travis-ci.org/mara/mara-db.svg?branch=master)](https://travis-ci.org/mara/mara-db)\n[![PyPI - License](https://img.shields.io/pypi/l/mara-db.svg)](https://github.com/mara/mara-db/blob/master/LICENSE)\n[![PyPI version](https://badge.fury.io/py/mara-db.svg)](https://badge.fury.io/py/mara-db)\n[![Slack Status](https://img.shields.io/badge/slack-join_chat-white.svg?logo=slack&style=social)](https://communityinviter.com/apps/mara-users/public-invite)\n\nMini package for configuring and accessing multiple databases in a single project. Decouples the use of databases and their configuration by using \"aliases\" for databases.\n \nThe file [mara_db/dbs.py](mara_db/dbs.py) contains abstract database configurations for PostgreSQL, Mysql, SQL Server, Oracle and SQLite. The database connections of a project are configured by overwriting the `databases` function in [mara_db/config.py](mara_db/config.py):\n\n```python\nimport mara_db.config\nimport mara_db.dbs\n\n## configure database connections for different aliases\nmara_db.config.databases = lambda: {\n    'mara': mara_db.dbs.PostgreSQLDB(host='localhost', user='root', database='mara'),\n    'dwh': mara_db.dbs.PostgreSQLDB(database='dwh'),\n    'source-1': mara_db.dbs.MysqlDB(host='some-localhost', database='my_app', user='dwh'),\n    'source-2': mara_db.dbs.SQLServerDB(user='dwh_read', password='123abc', database='db1', host='some-sql-server')\n}\n\n## access individual database configurations with `dbs.db`:\nprint(mara_db.dbs.db('mara'))\n# -> <PostgreSQLDB: host=localhost, database=mara>\n```\n\n&nbsp;\n\n\n## Visualization of (PostgreSQL, MySQL, SQL Server) database schemas \n\n[mara_db/views.py](mara_db/views.py) contains a schema visualization for all configured databases using graphviz (currently PostgreSQL, Mysql and SQL Server only). It basically show tables of selected schemas together with the foreign key relations between them. \n\n\n![Schema visualization](https://github.com/mara/mara-db/raw/master/docs/schema-visualization.png)\n\nFor finding missing foreign key constraints, columns that follow a specific naming pattern (configurable via `config.schema_ui_foreign_key_column_regex`, default `*_fk`) and that are not part of foreign key constraints are drawn in pink.    \n\n&nbsp;\n\n\n## Fast batch processing: Accessing databases with shell commands\n\nThe file [mara_db/shell.py](mara_db/shell.py) contains functions that create commands for accessing databases via their command line clients. \n   \nFor example, the `query_command` function creates a shell command that can receive an SQL query from stdin and execute it:\n\n```python\nimport mara_db.shell\n\nprint(mara_db.shell.query_command('source-1'))\n# -> mysql --default-character-set=utf8mb4 --user=dwh --host=some-localhost my_app\n\nprint(mara_db.shell.query_command('dwh', timezone='Europe/Lisbon', echo_queries=False))\n# -> PGTZ=Europe/Lisbon PGOPTIONS=--client-min-messages=warning psql  --no-psqlrc --set ON_ERROR_STOP=on dwh\n```\n\nThe function `copy_to_stdout_command` creates a shell command that receives a query on stdin and writes the result to stdout in tabular form:\n\n```python\nprint(mara_db.shell.copy_to_stdout_command('source-1'))\n# -> mysql --default-character-set=utf8mb4 --user=dwh --host=some-localhost my_app --skip-column-names\n```\n\nSimilarly, `copy_from_stdin_command` creates a client command that receives tabular data from stdin and and writes it to a target table: \n\n```python\nprint(mara_db.shell.copy_from_stdin_command('dwh', target_table='some_table', delimiter_char=';'))\n# -> PGTZ=Europe/Berlin PGOPTIONS=--client-min-messages=warning psql --echo-all --no-psqlrc --set ON_ERROR_STOP=on dwh \\\n#      --command=\"COPY some_table FROM STDIN WITH DELIMITER AS ';'\"\n```\n\nFinally, `copy_command` creates a shell command that receives a sql query from stdin, executes the query in `source_db` and then writes the result of to `target_table` in `target_db`:\n\n```python\nprint(mara_db.shell.copy_command('source-2', 'dwh', target_table='some_table'))\n# -> sed 's/\\\\\\\\$/\\$/g;s/\\$/\\\\\\\\$/g' \\\n#   | sqsh  -U dwh_read -P 123abc -S some-sql-server -D db1 -m csv \\\n#   | PGTZ=Europe/Berlin PGOPTIONS=--client-min-messages=warning psql --echo-all --no-psqlrc --set ON_ERROR_STOP=on dwh \\\n#         --command = \"COPY some_table FROM STDIN WITH CSV HEADER\"\n```\n\n&nbsp;\n\n\nThe following **command line clients** are used to access the various databases:\n\n| Database | Client binary | Comments |  \n| --- | --- | --- |\n| Postgresql / Redshift | `psql` | Included in standard distributions. |\n| MariaDB / Mysql | `mysql` | Included in standard distributions. |\n| SQL Server | `sqsh` | From [https://sourceforge.net/projects/sqsh/](https://sourceforge.net/projects/sqsh/), usually messy to get working. On ubuntu, use [http://ppa.launchpad.net/jasc/sqsh/ubuntu/](http://ppa.launchpad.net/jasc/sqsh/ubuntu/) backport. On Mac, try the homebrew version or install from source. |\n| Oracle | `sqlplus64` | See the [Oracle Instant Client](https://www.oracle.com/technetwork/database/database-technologies/instant-client/overview/index.html) homepage for details. On Mac, follow [these instructions](https://vanwollingen.nl/install-oracle-instant-client-and-sqlplus-using-homebrew-a233ce224bf). Then ` sudo ln -s /usr/local/bin/sqlplus /usr/local/bin/sqlplus64` to make the binary accessible as `sqlplus64`. |\n| SQLite | `sqlite3` | Available in standard distributions. Version >3.20.x required (not the case on Ubuntu 14.04). |\n\n&nbsp;\n\n\n## Make it so! Auto-migration of SQLAlchemy models\n\n[Alembic has a feature](http://alembic.zzzcomputing.com/en/latest/autogenerate.html) that can create a diff between the state of a database and the ORM models of an application. This feature is used in [mara_db/auto_migrate.py](mara_db/auto_migrate.py) to automatically perform all necessary database transformations, without intermediate migration files:\n\n```python\n# define a model / table\nclass MyTable(sqlalchemy.ext.declarative.declarative_base()):\n    __tablename__ = 'my_table'\n    my_table_id = sqlalchemy.Column(sqlalchemy.Integer, primary_key=True)\n    column_1 = sqlalchemy.Column(sqlalchemy.TEXT, nullable=False, index=True)\n\n\ndb = mara_db.dbs.SQLiteDB(file_name='/tmp/test.sqlite')\n\n# create database and table \nmara_db.auto_migration.auto_migrate(engine=mara_db.auto_migration.engine(db), models=[MyTable])\n# ->\n# Created database \"sqlite:////tmp/test.sqlite\"\n#\n# CREATE TABLE my_table (\n#     my_table_id SERIAL NOT NULL,\n#     column_1 TEXT NOT NULL,\n#     PRIMARY KEY (my_table_id)\n# );\n#\n# CREATE INDEX ix_my_table_column_1 ON my_table (column_1);\n```\n\nWhen the model is changed later, then `auto_migrate` creates a diff against the existing database and applies it:\n\n```python    \n# remove index and add another column\nclass MyTable(sqlalchemy.ext.declarative.declarative_base()):\n    __tablename__ = 'my_table'\n    my_table_id = sqlalchemy.Column(sqlalchemy.Integer, primary_key=True)\n    column_1 = sqlalchemy.Column(sqlalchemy.TEXT, nullable=False)\n    column_2 = sqlalchemy.Column(sqlalchemy.Integer)\n\nauto_migrate(engine=engine(db), models=[MyTable])\n# ->\n# ALTER TABLE my_table ADD COLUMN column_2 INTEGER;\n#\n# DROP INDEX ix_my_table_text_column_1;\n```\n\n**Use with care**! The are lot of changes [that alembic auto-generate can not detect](http://alembic.zzzcomputing.com/en/latest/autogenerate.html#what-does-autogenerate-detect-and-what-does-it-not-detect). We recommend testing each aut-migration on a staging system first before deploying to production. Sometimes manual migration scripts will be necessary.\n \n\n\n## Installation\n\n```bash\npip install mara-db\n```\n\nor\n\n```bash\npip install git+https://github.com/mara/mara-db.git\n```\n\n### Optional: Installation of requirements for SQL Server\n\nFor usage with SQL Server, the python module pyodbc and a odbc driver (e.g. Microsoft ODBC Driver 17 for SQL Server) is required which is not included in the general requirement.\n\nTo see how to install pyodbc, take a look into [this install guide](https://github.com/mkleehammer/pyodbc/wiki/Install).\nTo see how to install ODBC 17, take a look into [Installing the Microsoft ODBC Driver for SQL Server on Linux and macOS](https://docs.microsoft.com/en-us/sql/connect/odbc/linux-mac/installing-the-microsoft-odbc-driver-for-sql-server?view=sql-server-ver15).\n\nOn Linux, you most likely will have to deal with an SSL issue, see [this issue](https://github.com/microsoft/msphpsql/issues/1023). A quick, dirty option in a test/development environment could be to [disable the requirement for TLS 1.2](https://github.com/microsoft/msphpsql/issues/1023#issuecomment-523214695).", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mara/mara-db", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "mara-db", "package_url": "https://pypi.org/project/mara-db/", "platform": "", "project_url": "https://pypi.org/project/mara-db/", "project_urls": {"Homepage": "https://github.com/mara/mara-db"}, "release_url": "https://pypi.org/project/mara-db/4.5.0/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Configuration and monitoring of database connections", "version": "4.5.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Mara DB</h1>\n<p><a href=\"https://travis-ci.org/mara/mara-db\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3a8db33189de76aa30fc240c13ce5083b46887f3/68747470733a2f2f7472617669732d63692e6f72672f6d6172612f6d6172612d64622e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://github.com/mara/mara-db/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"PyPI - License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f8aa1633934b46057ffaaea4ba069981afb4ee1c/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f6d6172612d64622e737667\"></a>\n<a href=\"https://badge.fury.io/py/mara-db\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/97e3884dd8415a73acff6713e01fd02c9b48e7b3/68747470733a2f2f62616467652e667572792e696f2f70792f6d6172612d64622e737667\"></a>\n<a href=\"https://communityinviter.com/apps/mara-users/public-invite\" rel=\"nofollow\"><img alt=\"Slack Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8c01bf4f74a7c882bcfcd47e4924618eb70cfcd6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f736c61636b2d6a6f696e5f636861742d77686974652e7376673f6c6f676f3d736c61636b267374796c653d736f6369616c\"></a></p>\n<p>Mini package for configuring and accessing multiple databases in a single project. Decouples the use of databases and their configuration by using \"aliases\" for databases.</p>\n<p>The file <a href=\"mara_db/dbs.py\" rel=\"nofollow\">mara_db/dbs.py</a> contains abstract database configurations for PostgreSQL, Mysql, SQL Server, Oracle and SQLite. The database connections of a project are configured by overwriting the <code>databases</code> function in <a href=\"mara_db/config.py\" rel=\"nofollow\">mara_db/config.py</a>:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">mara_db.config</span>\n<span class=\"kn\">import</span> <span class=\"nn\">mara_db.dbs</span>\n\n<span class=\"c1\">## configure database connections for different aliases</span>\n<span class=\"n\">mara_db</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">databases</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'mara'</span><span class=\"p\">:</span> <span class=\"n\">mara_db</span><span class=\"o\">.</span><span class=\"n\">dbs</span><span class=\"o\">.</span><span class=\"n\">PostgreSQLDB</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s1\">'localhost'</span><span class=\"p\">,</span> <span class=\"n\">user</span><span class=\"o\">=</span><span class=\"s1\">'root'</span><span class=\"p\">,</span> <span class=\"n\">database</span><span class=\"o\">=</span><span class=\"s1\">'mara'</span><span class=\"p\">),</span>\n    <span class=\"s1\">'dwh'</span><span class=\"p\">:</span> <span class=\"n\">mara_db</span><span class=\"o\">.</span><span class=\"n\">dbs</span><span class=\"o\">.</span><span class=\"n\">PostgreSQLDB</span><span class=\"p\">(</span><span class=\"n\">database</span><span class=\"o\">=</span><span class=\"s1\">'dwh'</span><span class=\"p\">),</span>\n    <span class=\"s1\">'source-1'</span><span class=\"p\">:</span> <span class=\"n\">mara_db</span><span class=\"o\">.</span><span class=\"n\">dbs</span><span class=\"o\">.</span><span class=\"n\">MysqlDB</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s1\">'some-localhost'</span><span class=\"p\">,</span> <span class=\"n\">database</span><span class=\"o\">=</span><span class=\"s1\">'my_app'</span><span class=\"p\">,</span> <span class=\"n\">user</span><span class=\"o\">=</span><span class=\"s1\">'dwh'</span><span class=\"p\">),</span>\n    <span class=\"s1\">'source-2'</span><span class=\"p\">:</span> <span class=\"n\">mara_db</span><span class=\"o\">.</span><span class=\"n\">dbs</span><span class=\"o\">.</span><span class=\"n\">SQLServerDB</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">=</span><span class=\"s1\">'dwh_read'</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"s1\">'123abc'</span><span class=\"p\">,</span> <span class=\"n\">database</span><span class=\"o\">=</span><span class=\"s1\">'db1'</span><span class=\"p\">,</span> <span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s1\">'some-sql-server'</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">## access individual database configurations with `dbs.db`:</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">mara_db</span><span class=\"o\">.</span><span class=\"n\">dbs</span><span class=\"o\">.</span><span class=\"n\">db</span><span class=\"p\">(</span><span class=\"s1\">'mara'</span><span class=\"p\">))</span>\n<span class=\"c1\"># -&gt; &lt;PostgreSQLDB: host=localhost, database=mara&gt;</span>\n</pre>\n<p>\u00a0</p>\n<h2>Visualization of (PostgreSQL, MySQL, SQL Server) database schemas</h2>\n<p><a href=\"mara_db/views.py\" rel=\"nofollow\">mara_db/views.py</a> contains a schema visualization for all configured databases using graphviz (currently PostgreSQL, Mysql and SQL Server only). It basically show tables of selected schemas together with the foreign key relations between them.</p>\n<p><img alt=\"Schema visualization\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9318571cd6becf3e4dde25b572d0c4bcdd67bff2/68747470733a2f2f6769746875622e636f6d2f6d6172612f6d6172612d64622f7261772f6d61737465722f646f63732f736368656d612d76697375616c697a6174696f6e2e706e67\"></p>\n<p>For finding missing foreign key constraints, columns that follow a specific naming pattern (configurable via <code>config.schema_ui_foreign_key_column_regex</code>, default <code>*_fk</code>) and that are not part of foreign key constraints are drawn in pink.</p>\n<p>\u00a0</p>\n<h2>Fast batch processing: Accessing databases with shell commands</h2>\n<p>The file <a href=\"mara_db/shell.py\" rel=\"nofollow\">mara_db/shell.py</a> contains functions that create commands for accessing databases via their command line clients.</p>\n<p>For example, the <code>query_command</code> function creates a shell command that can receive an SQL query from stdin and execute it:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">mara_db.shell</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">mara_db</span><span class=\"o\">.</span><span class=\"n\">shell</span><span class=\"o\">.</span><span class=\"n\">query_command</span><span class=\"p\">(</span><span class=\"s1\">'source-1'</span><span class=\"p\">))</span>\n<span class=\"c1\"># -&gt; mysql --default-character-set=utf8mb4 --user=dwh --host=some-localhost my_app</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">mara_db</span><span class=\"o\">.</span><span class=\"n\">shell</span><span class=\"o\">.</span><span class=\"n\">query_command</span><span class=\"p\">(</span><span class=\"s1\">'dwh'</span><span class=\"p\">,</span> <span class=\"n\">timezone</span><span class=\"o\">=</span><span class=\"s1\">'Europe/Lisbon'</span><span class=\"p\">,</span> <span class=\"n\">echo_queries</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">))</span>\n<span class=\"c1\"># -&gt; PGTZ=Europe/Lisbon PGOPTIONS=--client-min-messages=warning psql  --no-psqlrc --set ON_ERROR_STOP=on dwh</span>\n</pre>\n<p>The function <code>copy_to_stdout_command</code> creates a shell command that receives a query on stdin and writes the result to stdout in tabular form:</p>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">mara_db</span><span class=\"o\">.</span><span class=\"n\">shell</span><span class=\"o\">.</span><span class=\"n\">copy_to_stdout_command</span><span class=\"p\">(</span><span class=\"s1\">'source-1'</span><span class=\"p\">))</span>\n<span class=\"c1\"># -&gt; mysql --default-character-set=utf8mb4 --user=dwh --host=some-localhost my_app --skip-column-names</span>\n</pre>\n<p>Similarly, <code>copy_from_stdin_command</code> creates a client command that receives tabular data from stdin and and writes it to a target table:</p>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">mara_db</span><span class=\"o\">.</span><span class=\"n\">shell</span><span class=\"o\">.</span><span class=\"n\">copy_from_stdin_command</span><span class=\"p\">(</span><span class=\"s1\">'dwh'</span><span class=\"p\">,</span> <span class=\"n\">target_table</span><span class=\"o\">=</span><span class=\"s1\">'some_table'</span><span class=\"p\">,</span> <span class=\"n\">delimiter_char</span><span class=\"o\">=</span><span class=\"s1\">';'</span><span class=\"p\">))</span>\n<span class=\"c1\"># -&gt; PGTZ=Europe/Berlin PGOPTIONS=--client-min-messages=warning psql --echo-all --no-psqlrc --set ON_ERROR_STOP=on dwh \\</span>\n<span class=\"c1\">#      --command=\"COPY some_table FROM STDIN WITH DELIMITER AS ';'\"</span>\n</pre>\n<p>Finally, <code>copy_command</code> creates a shell command that receives a sql query from stdin, executes the query in <code>source_db</code> and then writes the result of to <code>target_table</code> in <code>target_db</code>:</p>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">mara_db</span><span class=\"o\">.</span><span class=\"n\">shell</span><span class=\"o\">.</span><span class=\"n\">copy_command</span><span class=\"p\">(</span><span class=\"s1\">'source-2'</span><span class=\"p\">,</span> <span class=\"s1\">'dwh'</span><span class=\"p\">,</span> <span class=\"n\">target_table</span><span class=\"o\">=</span><span class=\"s1\">'some_table'</span><span class=\"p\">))</span>\n<span class=\"c1\"># -&gt; sed 's/\\\\\\\\$/\\$/g;s/\\$/\\\\\\\\$/g' \\</span>\n<span class=\"c1\">#   | sqsh  -U dwh_read -P 123abc -S some-sql-server -D db1 -m csv \\</span>\n<span class=\"c1\">#   | PGTZ=Europe/Berlin PGOPTIONS=--client-min-messages=warning psql --echo-all --no-psqlrc --set ON_ERROR_STOP=on dwh \\</span>\n<span class=\"c1\">#         --command = \"COPY some_table FROM STDIN WITH CSV HEADER\"</span>\n</pre>\n<p>\u00a0</p>\n<p>The following <strong>command line clients</strong> are used to access the various databases:</p>\n<table>\n<thead>\n<tr>\n<th>Database</th>\n<th>Client binary</th>\n<th>Comments</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Postgresql / Redshift</td>\n<td><code>psql</code></td>\n<td>Included in standard distributions.</td>\n</tr>\n<tr>\n<td>MariaDB / Mysql</td>\n<td><code>mysql</code></td>\n<td>Included in standard distributions.</td>\n</tr>\n<tr>\n<td>SQL Server</td>\n<td><code>sqsh</code></td>\n<td>From <a href=\"https://sourceforge.net/projects/sqsh/\" rel=\"nofollow\">https://sourceforge.net/projects/sqsh/</a>, usually messy to get working. On ubuntu, use <a href=\"http://ppa.launchpad.net/jasc/sqsh/ubuntu/\" rel=\"nofollow\">http://ppa.launchpad.net/jasc/sqsh/ubuntu/</a> backport. On Mac, try the homebrew version or install from source.</td>\n</tr>\n<tr>\n<td>Oracle</td>\n<td><code>sqlplus64</code></td>\n<td>See the <a href=\"https://www.oracle.com/technetwork/database/database-technologies/instant-client/overview/index.html\" rel=\"nofollow\">Oracle Instant Client</a> homepage for details. On Mac, follow <a href=\"https://vanwollingen.nl/install-oracle-instant-client-and-sqlplus-using-homebrew-a233ce224bf\" rel=\"nofollow\">these instructions</a>. Then <code>sudo ln -s /usr/local/bin/sqlplus /usr/local/bin/sqlplus64</code> to make the binary accessible as <code>sqlplus64</code>.</td>\n</tr>\n<tr>\n<td>SQLite</td>\n<td><code>sqlite3</code></td>\n<td>Available in standard distributions. Version &gt;3.20.x required (not the case on Ubuntu 14.04).</td>\n</tr></tbody></table>\n<p>\u00a0</p>\n<h2>Make it so! Auto-migration of SQLAlchemy models</h2>\n<p><a href=\"http://alembic.zzzcomputing.com/en/latest/autogenerate.html\" rel=\"nofollow\">Alembic has a feature</a> that can create a diff between the state of a database and the ORM models of an application. This feature is used in <a href=\"mara_db/auto_migrate.py\" rel=\"nofollow\">mara_db/auto_migrate.py</a> to automatically perform all necessary database transformations, without intermediate migration files:</p>\n<pre><span class=\"c1\"># define a model / table</span>\n<span class=\"k\">class</span> <span class=\"nc\">MyTable</span><span class=\"p\">(</span><span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">ext</span><span class=\"o\">.</span><span class=\"n\">declarative</span><span class=\"o\">.</span><span class=\"n\">declarative_base</span><span class=\"p\">()):</span>\n    <span class=\"n\">__tablename__</span> <span class=\"o\">=</span> <span class=\"s1\">'my_table'</span>\n    <span class=\"n\">my_table_id</span> <span class=\"o\">=</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">Integer</span><span class=\"p\">,</span> <span class=\"n\">primary_key</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">column_1</span> <span class=\"o\">=</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">TEXT</span><span class=\"p\">,</span> <span class=\"n\">nullable</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">db</span> <span class=\"o\">=</span> <span class=\"n\">mara_db</span><span class=\"o\">.</span><span class=\"n\">dbs</span><span class=\"o\">.</span><span class=\"n\">SQLiteDB</span><span class=\"p\">(</span><span class=\"n\">file_name</span><span class=\"o\">=</span><span class=\"s1\">'/tmp/test.sqlite'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># create database and table </span>\n<span class=\"n\">mara_db</span><span class=\"o\">.</span><span class=\"n\">auto_migration</span><span class=\"o\">.</span><span class=\"n\">auto_migrate</span><span class=\"p\">(</span><span class=\"n\">engine</span><span class=\"o\">=</span><span class=\"n\">mara_db</span><span class=\"o\">.</span><span class=\"n\">auto_migration</span><span class=\"o\">.</span><span class=\"n\">engine</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">),</span> <span class=\"n\">models</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">MyTable</span><span class=\"p\">])</span>\n<span class=\"c1\"># -&gt;</span>\n<span class=\"c1\"># Created database \"sqlite:////tmp/test.sqlite\"</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\"># CREATE TABLE my_table (</span>\n<span class=\"c1\">#     my_table_id SERIAL NOT NULL,</span>\n<span class=\"c1\">#     column_1 TEXT NOT NULL,</span>\n<span class=\"c1\">#     PRIMARY KEY (my_table_id)</span>\n<span class=\"c1\"># );</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\"># CREATE INDEX ix_my_table_column_1 ON my_table (column_1);</span>\n</pre>\n<p>When the model is changed later, then <code>auto_migrate</code> creates a diff against the existing database and applies it:</p>\n<pre><span class=\"c1\"># remove index and add another column</span>\n<span class=\"k\">class</span> <span class=\"nc\">MyTable</span><span class=\"p\">(</span><span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">ext</span><span class=\"o\">.</span><span class=\"n\">declarative</span><span class=\"o\">.</span><span class=\"n\">declarative_base</span><span class=\"p\">()):</span>\n    <span class=\"n\">__tablename__</span> <span class=\"o\">=</span> <span class=\"s1\">'my_table'</span>\n    <span class=\"n\">my_table_id</span> <span class=\"o\">=</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">Integer</span><span class=\"p\">,</span> <span class=\"n\">primary_key</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">column_1</span> <span class=\"o\">=</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">TEXT</span><span class=\"p\">,</span> <span class=\"n\">nullable</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"n\">column_2</span> <span class=\"o\">=</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">Integer</span><span class=\"p\">)</span>\n\n<span class=\"n\">auto_migrate</span><span class=\"p\">(</span><span class=\"n\">engine</span><span class=\"o\">=</span><span class=\"n\">engine</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">),</span> <span class=\"n\">models</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">MyTable</span><span class=\"p\">])</span>\n<span class=\"c1\"># -&gt;</span>\n<span class=\"c1\"># ALTER TABLE my_table ADD COLUMN column_2 INTEGER;</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\"># DROP INDEX ix_my_table_text_column_1;</span>\n</pre>\n<p><strong>Use with care</strong>! The are lot of changes <a href=\"http://alembic.zzzcomputing.com/en/latest/autogenerate.html#what-does-autogenerate-detect-and-what-does-it-not-detect\" rel=\"nofollow\">that alembic auto-generate can not detect</a>. We recommend testing each aut-migration on a staging system first before deploying to production. Sometimes manual migration scripts will be necessary.</p>\n<h2>Installation</h2>\n<pre>pip install mara-db\n</pre>\n<p>or</p>\n<pre>pip install git+https://github.com/mara/mara-db.git\n</pre>\n<h3>Optional: Installation of requirements for SQL Server</h3>\n<p>For usage with SQL Server, the python module pyodbc and a odbc driver (e.g. Microsoft ODBC Driver 17 for SQL Server) is required which is not included in the general requirement.</p>\n<p>To see how to install pyodbc, take a look into <a href=\"https://github.com/mkleehammer/pyodbc/wiki/Install\" rel=\"nofollow\">this install guide</a>.\nTo see how to install ODBC 17, take a look into <a href=\"https://docs.microsoft.com/en-us/sql/connect/odbc/linux-mac/installing-the-microsoft-odbc-driver-for-sql-server?view=sql-server-ver15\" rel=\"nofollow\">Installing the Microsoft ODBC Driver for SQL Server on Linux and macOS</a>.</p>\n<p>On Linux, you most likely will have to deal with an SSL issue, see <a href=\"https://github.com/microsoft/msphpsql/issues/1023\" rel=\"nofollow\">this issue</a>. A quick, dirty option in a test/development environment could be to <a href=\"https://github.com/microsoft/msphpsql/issues/1023#issuecomment-523214695\" rel=\"nofollow\">disable the requirement for TLS 1.2</a>.</p>\n\n          </div>"}, "last_serial": 7115109, "releases": {"4.2.0": [{"comment_text": "", "digests": {"md5": "69bc1efe1e2365d6be5120a78bcc989d", "sha256": "fb1a930eebb9040d44a77949942f2699f009f04c9197f577f67389432c419ca0"}, "downloads": -1, "filename": "mara-db-4.2.0.tar.gz", "has_sig": false, "md5_digest": "69bc1efe1e2365d6be5120a78bcc989d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 16524, "upload_time": "2019-07-04T14:40:38", "upload_time_iso_8601": "2019-07-04T14:40:38.876574Z", "url": "https://files.pythonhosted.org/packages/d1/73/64564aed8f25afa48169cc9a36fbeaf1b81620a5b2baaadab310368eed06/mara-db-4.2.0.tar.gz", "yanked": false}], "4.2.1": [{"comment_text": "", "digests": {"md5": "0328fbf58f4fca14adff011472de4a6d", "sha256": "bd243680198c405ae3891c838df7f5018995c99c894ebde78a92fce7d74db1a4"}, "downloads": -1, "filename": "mara-db-4.2.1.tar.gz", "has_sig": false, "md5_digest": "0328fbf58f4fca14adff011472de4a6d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 16583, "upload_time": "2019-07-04T16:36:04", "upload_time_iso_8601": "2019-07-04T16:36:04.483009Z", "url": "https://files.pythonhosted.org/packages/d2/ef/bc54ed78dfb3c974b1e8ff715c414d393a1bc48f8fddf9f6ee42f73a77dd/mara-db-4.2.1.tar.gz", "yanked": false}], "4.2.2": [{"comment_text": "", "digests": {"md5": "ae1981444a5b94ace308e0bd6fc984b1", "sha256": "70506d70a881cd93e150aa858e4d83b07527ec3dfac100d991642fe581f4a36a"}, "downloads": -1, "filename": "mara-db-4.2.2.tar.gz", "has_sig": false, "md5_digest": "ae1981444a5b94ace308e0bd6fc984b1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 16584, "upload_time": "2019-07-04T16:39:45", "upload_time_iso_8601": "2019-07-04T16:39:45.134409Z", "url": "https://files.pythonhosted.org/packages/c4/94/b4d419a06c2af3dfb13ab9df95acec91842d1b1133633003dd55936e03c2/mara-db-4.2.2.tar.gz", "yanked": false}], "4.3.0": [{"comment_text": "", "digests": {"md5": "75fa69b53070569b2fa78e90960fb141", "sha256": "18288b62d9b72510ab82770a53d9e60dc5b6c8b8183e0e325b9945c8083dc7f8"}, "downloads": -1, "filename": "mara-db-4.3.0.tar.gz", "has_sig": false, "md5_digest": "75fa69b53070569b2fa78e90960fb141", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 16954, "upload_time": "2019-07-04T19:37:48", "upload_time_iso_8601": "2019-07-04T19:37:48.012199Z", "url": "https://files.pythonhosted.org/packages/fe/34/6da110c97303740a0e2397332924fb868eb6915923fd6e8fd9822944f0f7/mara-db-4.3.0.tar.gz", "yanked": false}], "4.3.1": [{"comment_text": "", "digests": {"md5": "9de2fbe6e26a97a00eecc68df3edfe83", "sha256": "05099b1353119f7c22a87caa5d0008e6a44cdeea96f3a3d5c0e9faf7d8ef42ba"}, "downloads": -1, "filename": "mara-db-4.3.1.tar.gz", "has_sig": false, "md5_digest": "9de2fbe6e26a97a00eecc68df3edfe83", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 16949, "upload_time": "2019-07-05T08:01:53", "upload_time_iso_8601": "2019-07-05T08:01:53.392295Z", "url": "https://files.pythonhosted.org/packages/71/db/99c722829bbf168ef4e7aa8ad5c32a53e11991b8eea2f26a543975c37762/mara-db-4.3.1.tar.gz", "yanked": false}], "4.4.0": [{"comment_text": "", "digests": {"md5": "18bf9dbcfec307cf075a924cef2f759c", "sha256": "a06669ac6b1fb8375f5823c4a2ba51f0fbfa33e634f809c8ef5f10d155bbbb01"}, "downloads": -1, "filename": "mara-db-4.4.0.tar.gz", "has_sig": false, "md5_digest": "18bf9dbcfec307cf075a924cef2f759c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 18301, "upload_time": "2019-11-28T14:21:04", "upload_time_iso_8601": "2019-11-28T14:21:04.550842Z", "url": "https://files.pythonhosted.org/packages/ac/4e/bc3f7794870795293dfa470549b4b3d63f2d725c21187177d5211b5c4c7c/mara-db-4.4.0.tar.gz", "yanked": false}], "4.4.1": [{"comment_text": "", "digests": {"md5": "d214720838753d12875d4aa20e65f92f", "sha256": "c987b1e53a111b8c570d874c4d67d743ac7053947787c844b054aecb313f7443"}, "downloads": -1, "filename": "mara-db-4.4.1.tar.gz", "has_sig": false, "md5_digest": "d214720838753d12875d4aa20e65f92f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 18357, "upload_time": "2020-02-13T09:18:50", "upload_time_iso_8601": "2020-02-13T09:18:50.174785Z", "url": "https://files.pythonhosted.org/packages/36/e2/cd4bdc23a1e68045cf175ea6113e0c5c524168d28b647f63a0acda1c553a/mara-db-4.4.1.tar.gz", "yanked": false}], "4.4.2": [{"comment_text": "", "digests": {"md5": "da056db85021cac38e97a386d6cfb57b", "sha256": "06ea3239acfa368ca5ca990a6b0ae4e6d746ff9bc338b09c2994395d5ae5268d"}, "downloads": -1, "filename": "mara-db-4.4.2.tar.gz", "has_sig": false, "md5_digest": "da056db85021cac38e97a386d6cfb57b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 18386, "upload_time": "2020-03-04T14:20:52", "upload_time_iso_8601": "2020-03-04T14:20:52.147903Z", "url": "https://files.pythonhosted.org/packages/98/00/3069aeb372749b74b1d64f946197dd461b9d7f12401e8da3a6bd0fb1dff4/mara-db-4.4.2.tar.gz", "yanked": false}], "4.4.3": [{"comment_text": "", "digests": {"md5": "a2ee3edba37aba14c2b177eb7d825e8b", "sha256": "11573051004085ad07dacfbd3d5f575b4202836012f34e6f9c8175d7a4528460"}, "downloads": -1, "filename": "mara-db-4.4.3.tar.gz", "has_sig": false, "md5_digest": "a2ee3edba37aba14c2b177eb7d825e8b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 20135, "upload_time": "2020-03-13T15:03:07", "upload_time_iso_8601": "2020-03-13T15:03:07.767803Z", "url": "https://files.pythonhosted.org/packages/aa/6f/55ddc63768906916c7e923a2d829e3aa6b32fd1fa38c93c36f6057a110aa/mara-db-4.4.3.tar.gz", "yanked": false}], "4.5.0": [{"comment_text": "", "digests": {"md5": "839043b9e4c6417f3ccd40ad848d21a9", "sha256": "c299764eba33d2d2fcb931b238e0c1959d6273f509e84f8998d0aa5daf0f8df2"}, "downloads": -1, "filename": "mara-db-4.5.0.tar.gz", "has_sig": false, "md5_digest": "839043b9e4c6417f3ccd40ad848d21a9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 20051, "upload_time": "2020-04-27T20:43:26", "upload_time_iso_8601": "2020-04-27T20:43:26.466196Z", "url": "https://files.pythonhosted.org/packages/0a/e7/27394ea062cd4495f7ba2855ba48b1ff6cf6a10bb044ed9cef19655e0ca3/mara-db-4.5.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "839043b9e4c6417f3ccd40ad848d21a9", "sha256": "c299764eba33d2d2fcb931b238e0c1959d6273f509e84f8998d0aa5daf0f8df2"}, "downloads": -1, "filename": "mara-db-4.5.0.tar.gz", "has_sig": false, "md5_digest": "839043b9e4c6417f3ccd40ad848d21a9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 20051, "upload_time": "2020-04-27T20:43:26", "upload_time_iso_8601": "2020-04-27T20:43:26.466196Z", "url": "https://files.pythonhosted.org/packages/0a/e7/27394ea062cd4495f7ba2855ba48b1ff6cf6a10bb044ed9cef19655e0ca3/mara-db-4.5.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:57:52 2020"}