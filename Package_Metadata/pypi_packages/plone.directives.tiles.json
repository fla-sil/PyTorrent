{"info": {"author": "Martin Aspeli", "author_email": "optilude@gmail.com", "bugtrack_url": null, "classifiers": ["Framework :: Plone", "Framework :: Plone :: 5.0", "Framework :: Plone :: 5.1", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "This package provides declarative configuration (grokkers) for the\n`plone.tiles <http://pypi.python.org/pypi/plone.tiles>`_ package.\n\n.. image:: https://secure.travis-ci.org/plone/plone.directives.tiles.png?branch=master\n    :target: http://travis-ci.org/plone/plone.tiles\n\n.. contents::\n\nUsage\n=====\n\n\nA basic tile is configured like this::\n\n    from five import grok\n    from plone.directives import tiles\n\n    from my.package import MyMessageFactory as _\n    from my.package.interfaces import IMyTileSchema\n\n    class MyTile(tiles.Tile):\n        grok.context(IContext)\n        grok.require('zope2.View')\n\n        grok.name('my.tile')\n        grok.title(_(u\"My title\"))\n        grok.description(_(u\"My description\"))\n\n        tiles.add_permission('mypackage.AddMyTile')\n        tiles.schema(IMyTileSchema)\n\n\nNotes\n=====\n\n* A persistent tile can be configured by deriving from ``PersistentTile``\n  instead of ``Tile``.\n* The ``context()``, ``requires()``, ``name()``, and ``layer()`` directives\n  are used in the same way as they are for a view derived from ``grok.View``.\n* Templates are associated using the same semantics as are used for views. For\n  example, a tile in ``mytiles.py`` defined in the class ``MyTile`` would\n  be associated with a template ``mytiles_templates/mytile.pt`` by default.\n* Unlike a view, the ``name()`` directive is required and should give a dotted\n  name for the tile by convention.\n* Dictionary key access (``__getitem__()``) is defined to work as it does in\n  a tile. In a standard grokked view, it will retrieve a macro from the\n  template. In a tile, it is used as a traversal hook to set the tile id,\n  and subsequently to look up views on the tile. See ``plone.tiles`` for\n  details.\n* Similarly, standard grokked views have a ``url()`` method which can be used\n  to construct a URL, possibly with query string parameters. For grokked\n  tiles, this is replaced by a ``url`` read-only property, which returns the\n  canonical tile URL, as per ``plone.tiles``.\n\n\nChangelog\n=========\n\n1.2 (unreleased)\n----------------\n\n- Use zope.interface decorators.\n  [gforcada]\n\n- Change i18n domain.\n  [thet]\n\n- Cleanup package.\n  [maurits]\n\n1.1 (2012-11-26)\n----------------\n\n- Added icon directive to support plone.tiles >= 1.1.\n  [datakurre]\n\n1.0 (2012-06-23)\n----------------\n\n- Initial release\n  [garbas]", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/plone/plone.directives.tiles", "keywords": "plone tiles deco blocks grok directives", "license": "GPL", "maintainer": "", "maintainer_email": "", "name": "plone.directives.tiles", "package_url": "https://pypi.org/project/plone.directives.tiles/", "platform": "", "project_url": "https://pypi.org/project/plone.directives.tiles/", "project_urls": {"Homepage": "https://github.com/plone/plone.directives.tiles"}, "release_url": "https://pypi.org/project/plone.directives.tiles/1.2/", "requires_dist": null, "requires_python": "", "summary": "Grokkers for plone.tiles", "version": "1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This package provides declarative configuration (grokkers) for the\n<a href=\"http://pypi.python.org/pypi/plone.tiles\" rel=\"nofollow\">plone.tiles</a> package.</p>\n<a href=\"http://travis-ci.org/plone/plone.tiles\" rel=\"nofollow\"><img alt=\"https://secure.travis-ci.org/plone/plone.directives.tiles.png?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fc267cba8e4b2647b3fd8627fc8e218cfc18d6de/68747470733a2f2f7365637572652e7472617669732d63692e6f72672f706c6f6e652f706c6f6e652e646972656374697665732e74696c65732e706e673f6272616e63683d6d6173746572\"></a>\n<div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#usage\" id=\"id3\" rel=\"nofollow\">Usage</a></li>\n<li><a href=\"#notes\" id=\"id4\" rel=\"nofollow\">Notes</a></li>\n<li><a href=\"#changelog\" id=\"id5\" rel=\"nofollow\">Changelog</a><ul>\n<li><a href=\"#unreleased\" id=\"id6\" rel=\"nofollow\">1.2 (unreleased)</a></li>\n<li><a href=\"#id1\" id=\"id7\" rel=\"nofollow\">1.1 (2012-11-26)</a></li>\n<li><a href=\"#id2\" id=\"id8\" rel=\"nofollow\">1.0 (2012-06-23)</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"usage\">\n<h2><a href=\"#id3\" rel=\"nofollow\">Usage</a></h2>\n<p>A basic tile is configured like this:</p>\n<pre>from five import grok\nfrom plone.directives import tiles\n\nfrom my.package import MyMessageFactory as _\nfrom my.package.interfaces import IMyTileSchema\n\nclass MyTile(tiles.Tile):\n    grok.context(IContext)\n    grok.require('zope2.View')\n\n    grok.name('my.tile')\n    grok.title(_(u\"My title\"))\n    grok.description(_(u\"My description\"))\n\n    tiles.add_permission('mypackage.AddMyTile')\n    tiles.schema(IMyTileSchema)\n</pre>\n</div>\n<div id=\"notes\">\n<h2><a href=\"#id4\" rel=\"nofollow\">Notes</a></h2>\n<ul>\n<li>A persistent tile can be configured by deriving from <tt>PersistentTile</tt>\ninstead of <tt>Tile</tt>.</li>\n<li>The <tt>context()</tt>, <tt>requires()</tt>, <tt>name()</tt>, and <tt>layer()</tt> directives\nare used in the same way as they are for a view derived from <tt>grok.View</tt>.</li>\n<li>Templates are associated using the same semantics as are used for views. For\nexample, a tile in <tt>mytiles.py</tt> defined in the class <tt>MyTile</tt> would\nbe associated with a template <tt>mytiles_templates/mytile.pt</tt> by default.</li>\n<li>Unlike a view, the <tt>name()</tt> directive is required and should give a dotted\nname for the tile by convention.</li>\n<li>Dictionary key access (<tt>__getitem__()</tt>) is defined to work as it does in\na tile. In a standard grokked view, it will retrieve a macro from the\ntemplate. In a tile, it is used as a traversal hook to set the tile id,\nand subsequently to look up views on the tile. See <tt>plone.tiles</tt> for\ndetails.</li>\n<li>Similarly, standard grokked views have a <tt>url()</tt> method which can be used\nto construct a URL, possibly with query string parameters. For grokked\ntiles, this is replaced by a <tt>url</tt> read-only property, which returns the\ncanonical tile URL, as per <tt>plone.tiles</tt>.</li>\n</ul>\n</div>\n<div id=\"changelog\">\n<h2><a href=\"#id5\" rel=\"nofollow\">Changelog</a></h2>\n<div id=\"unreleased\">\n<h3><a href=\"#id6\" rel=\"nofollow\">1.2 (unreleased)</a></h3>\n<ul>\n<li>Use zope.interface decorators.\n[gforcada]</li>\n<li>Change i18n domain.\n[thet]</li>\n<li>Cleanup package.\n[maurits]</li>\n</ul>\n</div>\n<div id=\"id1\">\n<h3><a href=\"#id7\" rel=\"nofollow\">1.1 (2012-11-26)</a></h3>\n<ul>\n<li>Added icon directive to support plone.tiles &gt;= 1.1.\n[datakurre]</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3><a href=\"#id8\" rel=\"nofollow\">1.0 (2012-06-23)</a></h3>\n<ul>\n<li>Initial release\n[garbas]</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 3655805, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "b35d91cf2f5ec02aa70531bf2b274d5e", "sha256": "fda6703e18fc92d499e6b57d84b4673809ac9c63b39d016062ca9f4699d6660a"}, "downloads": -1, "filename": "plone.directives.tiles-1.0.tar.gz", "has_sig": false, "md5_digest": "b35d91cf2f5ec02aa70531bf2b274d5e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5838, "upload_time": "2012-06-23T07:49:03", "upload_time_iso_8601": "2012-06-23T07:49:03.687942Z", "url": "https://files.pythonhosted.org/packages/03/e4/94c757d8db14af63ab5ae5e4b7244766d4c3a7cec113e0b7b68e3fb24a37/plone.directives.tiles-1.0.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "4be4d847f863d19887af75cba4ca65ca", "sha256": "4f0d0948656ad8af39a3bd9067116df7fdfe3ace773e9f8fdcd573c0285af2a6"}, "downloads": -1, "filename": "plone.directives.tiles-1.1.tar.gz", "has_sig": false, "md5_digest": "4be4d847f863d19887af75cba4ca65ca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6033, "upload_time": "2012-11-26T18:42:04", "upload_time_iso_8601": "2012-11-26T18:42:04.228554Z", "url": "https://files.pythonhosted.org/packages/2a/d6/b49e1bbd71ad2e59a025cbaf92cf3805943f39d7afec2c7cdcecaa387520/plone.directives.tiles-1.1.tar.gz", "yanked": false}], "1.2": [{"comment_text": "", "digests": {"md5": "78aa9408808be6cea363291974894479", "sha256": "b6423aa5fdad0890d9504817eeb31741079ae1a25086eda098294bfc1d4f256a"}, "downloads": -1, "filename": "plone.directives.tiles-1.2.tar.gz", "has_sig": false, "md5_digest": "78aa9408808be6cea363291974894479", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5779, "upload_time": "2018-03-09T23:25:44", "upload_time_iso_8601": "2018-03-09T23:25:44.473529Z", "url": "https://files.pythonhosted.org/packages/ff/83/f0dc60a3270fb9e8964613757459298459291d795c0059d588cf8bea6f0e/plone.directives.tiles-1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "78aa9408808be6cea363291974894479", "sha256": "b6423aa5fdad0890d9504817eeb31741079ae1a25086eda098294bfc1d4f256a"}, "downloads": -1, "filename": "plone.directives.tiles-1.2.tar.gz", "has_sig": false, "md5_digest": "78aa9408808be6cea363291974894479", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5779, "upload_time": "2018-03-09T23:25:44", "upload_time_iso_8601": "2018-03-09T23:25:44.473529Z", "url": "https://files.pythonhosted.org/packages/ff/83/f0dc60a3270fb9e8964613757459298459291d795c0059d588cf8bea6f0e/plone.directives.tiles-1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:53:00 2020"}