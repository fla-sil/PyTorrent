{"info": {"author": "Alex Puffer", "author_email": "", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# PyVIN\nA Vehicle Identification Number (VIN) decoder for Python.  This leverages the NHTSA API to decode VINs into collections of vehicle data that can be easily explored (https://vpic.nhtsa.dot.gov/api/)\n\n## Basic Usage:\n```\nIn [0]: from pyvin import VIN\n\nIn [1]: vehicle = VIN('JT2AE09W4P0038539')\n\nIn [2]: (vehicle.Make, vehicle.Model, vehicle.ModelYear)\nOut[2]: ('TOYOTA', 'Corolla', '1993')\n\nIn [3]: my_vins = ('JT2AE09W4P0038539', 'KMHD35LH5EU205042')\n\nIn [4]: my_vehicles = VIN(*my_vins)\n\nIn [5]: for veh in my_vehicles:\n   ...:     print(veh.Make, veh.Model, veh.ModelYear)\nTOYOTA Corolla 1993\nHYUNDAI Elantra 2014\n```\n\n## Advanced Usage:\nThe user can also specify how invalid VINs are handled, be it raising an exception or ignoring them:\n```\nIn [6]: import pyvin\nIn [7]: new_car = pyvin.VIN('Foo', error_handling=pyvin.RAISE)\nOut[7]: VINError: Invalid char \"o\"the u\n```\n\nTo simply clean a VIN list, with no decoding involved, the following can be called:\n```\nIn [8]: import pyvin\n\nIn [9]: my_vins = ('JT2AE09W4P0038539', 'Foo')\n\nIn [10]: cleaned_vins = pyvin.clean_vins(my_vins)\n\nIn [11]: cleaned_vins\nOut[11]: ['JT2AE09W4P0038539']\n```\nFor simple validation, no calls to the NHTSA API are used, as there is a formula to validate VINs\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/arpuffer/pyvin", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pyvin", "package_url": "https://pypi.org/project/pyvin/", "platform": "", "project_url": "https://pypi.org/project/pyvin/", "project_urls": {"Homepage": "https://github.com/arpuffer/pyvin"}, "release_url": "https://pypi.org/project/pyvin/0.0.2/", "requires_dist": ["requests"], "requires_python": ">=3.6", "summary": "Python VIN decoder", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>PyVIN</h1>\n<p>A Vehicle Identification Number (VIN) decoder for Python.  This leverages the NHTSA API to decode VINs into collections of vehicle data that can be easily explored (<a href=\"https://vpic.nhtsa.dot.gov/api/\" rel=\"nofollow\">https://vpic.nhtsa.dot.gov/api/</a>)</p>\n<h2>Basic Usage:</h2>\n<pre><code>In [0]: from pyvin import VIN\n\nIn [1]: vehicle = VIN('JT2AE09W4P0038539')\n\nIn [2]: (vehicle.Make, vehicle.Model, vehicle.ModelYear)\nOut[2]: ('TOYOTA', 'Corolla', '1993')\n\nIn [3]: my_vins = ('JT2AE09W4P0038539', 'KMHD35LH5EU205042')\n\nIn [4]: my_vehicles = VIN(*my_vins)\n\nIn [5]: for veh in my_vehicles:\n   ...:     print(veh.Make, veh.Model, veh.ModelYear)\nTOYOTA Corolla 1993\nHYUNDAI Elantra 2014\n</code></pre>\n<h2>Advanced Usage:</h2>\n<p>The user can also specify how invalid VINs are handled, be it raising an exception or ignoring them:</p>\n<pre><code>In [6]: import pyvin\nIn [7]: new_car = pyvin.VIN('Foo', error_handling=pyvin.RAISE)\nOut[7]: VINError: Invalid char \"o\"the u\n</code></pre>\n<p>To simply clean a VIN list, with no decoding involved, the following can be called:</p>\n<pre><code>In [8]: import pyvin\n\nIn [9]: my_vins = ('JT2AE09W4P0038539', 'Foo')\n\nIn [10]: cleaned_vins = pyvin.clean_vins(my_vins)\n\nIn [11]: cleaned_vins\nOut[11]: ['JT2AE09W4P0038539']\n</code></pre>\n<p>For simple validation, no calls to the NHTSA API are used, as there is a formula to validate VINs</p>\n\n          </div>"}, "last_serial": 6470950, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "b39bc8ac3bcb914c41fae516999a6aee", "sha256": "2423cf1fc24dcb2127b2d052f57e042de94663f5de4d051bfb9ca092f6db8232"}, "downloads": -1, "filename": "pyvin-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b39bc8ac3bcb914c41fae516999a6aee", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8742, "upload_time": "2020-01-13T02:38:26", "upload_time_iso_8601": "2020-01-13T02:38:26.502365Z", "url": "https://files.pythonhosted.org/packages/9f/c4/956d34efb27c19ab4b16b0b2fdf3ddececd41973ac600e99bd062597d655/pyvin-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "178057b1bf92ec44ba2db5a56a8f7ef1", "sha256": "358d3ce787f556e9390a0a91b23861490ddd4c7995bd18b0753ee76211f93e5f"}, "downloads": -1, "filename": "pyvin-0.0.1.tar.gz", "has_sig": false, "md5_digest": "178057b1bf92ec44ba2db5a56a8f7ef1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6341, "upload_time": "2020-01-13T02:38:29", "upload_time_iso_8601": "2020-01-13T02:38:29.395257Z", "url": "https://files.pythonhosted.org/packages/e1/97/34f2268fad3f3316022b9d9268cb45172f7f726eb1d09d42bd4bd4ec0187/pyvin-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "7a257005af093bf414044cfc7f6395f2", "sha256": "4f51b23ea11c8f669d992c39430299e2ecca0f8a5c4dd85ca6b9abf1f0c93e3b"}, "downloads": -1, "filename": "pyvin-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "7a257005af093bf414044cfc7f6395f2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8950, "upload_time": "2020-01-17T06:08:44", "upload_time_iso_8601": "2020-01-17T06:08:44.506578Z", "url": "https://files.pythonhosted.org/packages/16/02/aada2872a4a041dbff5ba2d7040c13d2641ea404a534c4703a6bc2bd2ee3/pyvin-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5933ff4edecadd8efcef3b4bcff0ef6a", "sha256": "482ed532acaac1fbc5344663251e9387a3633809be5ec930e1f66654ce79854a"}, "downloads": -1, "filename": "pyvin-0.0.2.tar.gz", "has_sig": false, "md5_digest": "5933ff4edecadd8efcef3b4bcff0ef6a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6575, "upload_time": "2020-01-17T06:08:46", "upload_time_iso_8601": "2020-01-17T06:08:46.357282Z", "url": "https://files.pythonhosted.org/packages/70/22/f5639497ebf948c93ce2f75209cfbe8eb0d18cb7ee26f29e2788eff594e9/pyvin-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7a257005af093bf414044cfc7f6395f2", "sha256": "4f51b23ea11c8f669d992c39430299e2ecca0f8a5c4dd85ca6b9abf1f0c93e3b"}, "downloads": -1, "filename": "pyvin-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "7a257005af093bf414044cfc7f6395f2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8950, "upload_time": "2020-01-17T06:08:44", "upload_time_iso_8601": "2020-01-17T06:08:44.506578Z", "url": "https://files.pythonhosted.org/packages/16/02/aada2872a4a041dbff5ba2d7040c13d2641ea404a534c4703a6bc2bd2ee3/pyvin-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5933ff4edecadd8efcef3b4bcff0ef6a", "sha256": "482ed532acaac1fbc5344663251e9387a3633809be5ec930e1f66654ce79854a"}, "downloads": -1, "filename": "pyvin-0.0.2.tar.gz", "has_sig": false, "md5_digest": "5933ff4edecadd8efcef3b4bcff0ef6a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6575, "upload_time": "2020-01-17T06:08:46", "upload_time_iso_8601": "2020-01-17T06:08:46.357282Z", "url": "https://files.pythonhosted.org/packages/70/22/f5639497ebf948c93ce2f75209cfbe8eb0d18cb7ee26f29e2788eff594e9/pyvin-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:11:58 2020"}