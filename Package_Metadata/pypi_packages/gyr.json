{"info": {"author": "Adam Beckmeyer", "author_email": "adam_git@thebeckmeyers.xyz", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Programming Language :: Python :: 3", "Topic :: Communications :: Chat", "Topic :: Internet :: WWW/HTTP :: WSGI", "Topic :: Software Development :: Libraries :: Application Frameworks"], "description": "<!---\n\nCopyright 2016 Adam Beckmeyer\n\nThis file is part of Gyr.\n\nGyr is free software: you can redistribute it and/or modify it under the terms\nof the GNU General Public License as published by the Free Software Foundation,\neither version 3 of the License, or (at your option) any later version.\n\nGyr is distributed in the hope that it will be useful, but WITHOUT ANY\nWARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\nPARTICULAR PURPOSE.  See the GNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License along with\nGyr. If not, see <http://www.gnu.org/licenses/>.  \n\n--> \n\n# Gyr\n\nCome talk with us about Gyr on matrix at\n[#gyr:matrix.org](https://matrix.to/#/#gyr:matrix.org)!\n\nGyr is a framework for quickly developing [matrix](https://matrix.org)\n[application\nservices](http://matrix.org/docs/spec/application_service/unstable.html) in\npython3. It provides a WSGI application and several other utilities for working\nwith matrix. \n\nGyr is designed to be a fairly thin layer of abstraction over application\nservice api--just enough to make things easy without pushing you so far from the\nspec that you get confused.\n\n# Installation\n\nPlease install gyr with pip (in a virtualenv if you prefer):\n\n```sh\npip install gyr\n```\n\n# Usage\n\nI'll try to show a bunch of functionality here, but see examples directory for\nfurther usage examples.\n\n```python\nfrom gyr import server, matrix_objects\n\napplication = server.Application(\"http://localhost:8008\", \"foobar\")\n\nas_user = matrix_objects.MatrixUser(\"@example_as:example.com\", application.Api)\nroom = as_user.create_room(alias=\"#foo:example.com\", is_public=True)\n\ndef rm_hndlr(room_id):\n    # Gyr will create a user for you if this returns true!\n    return False\n    \ndef user_hndlr(user_id):\n    # Gyr will create the room for you if this returns true!\n    return False\n    \ndef txn_hndlr(events):\n    for event in events:\n    \troom.send_notice(\n\t    \"Received event type {} in room {} from user {}\".format(event.type,\n\t                                                            event.room,\n\t\t\t\t\t\t\t\t    event.user)\n\t)\n    return True\n\t\napplication.add_handlers(room_handler=rm_hndlr, transaction_handler=txn_hndlr,\n                         user_handler=user_hndlr)\n```\n\nSave as example.py. Then from the commandline:\n\n```sh\ngunicorn example:application\n```\n\n# Status\n\nVery alpha! Most of the main functionality I'd envisioned is present, however\nthere's poor to non-existent documentation and no unit tests. Contributions are\nwelcome.\n\n# Projects Using Gyr\n\n* [matrix_relay](https://github.com/non-Jedi/matrix_relay)\n* Open a PR or [ping me on matrix](https://matrix.to/#/@abeckmeyer:matrix.org)\n\twith your project. I'd love to hear about anyone building on gyr!\n\n# Modules\n\n## gyr.server\n\n`server` provides the WSGI application class. An instance of\ngyr.server.Application functions as the WSGI app and will automatically\nparse the request and call any handlers provided to the Application\ninstance.\n\n## gyr.api\n\n`api` provides a helpful wrapper for\n[matrix-python-sdk](https://github.com/matrix-org/matrix-python-sdk)'s\napi, changing the parts of the api that are different for application\nservices until such time as similiar changes are merged upstream. Pull\nrequests for these changes have been submitted, and some changes already\nmerged into master.\n\nFor working with the api, I recommend using the wrappers built around\nspecific objects which are available in gyr.matrix_objects.\n\n## gyr.matrix_objects\n\n`matrix_objects` provides helpful wrapper classes around matrix users,\nevents and rooms. It is not designed to be easily used for the normal\nclient-server api but should provide most necessary functionality for\nthe manipulation of users and rooms that an application service might\nneed to do.\n\nPull requests enriching the functionality of these classes are very\nwelcome.\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/non-Jedi/gyr", "keywords": "matrix chat falcon WSGI application-service", "license": "GPLv3", "maintainer": "", "maintainer_email": "", "name": "gyr", "package_url": "https://pypi.org/project/gyr/", "platform": "", "project_url": "https://pypi.org/project/gyr/", "project_urls": {"Homepage": "https://github.com/non-Jedi/gyr"}, "release_url": "https://pypi.org/project/gyr/0.2.0/", "requires_dist": null, "requires_python": "", "summary": "A python framework for building matrix application services", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            &lt;!---<br><br>Copyright 2016 Adam Beckmeyer<br><br>This file is part of Gyr.<br><br>Gyr is free software: you can redistribute it and/or modify it under the terms<br>of the GNU General Public License as published by the Free Software Foundation,<br>either version 3 of the License, or (at your option) any later version.<br><br>Gyr is distributed in the hope that it will be useful, but WITHOUT ANY<br>WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A<br>PARTICULAR PURPOSE.  See the GNU General Public License for more details.<br><br>You should have received a copy of the GNU General Public License along with<br>Gyr. If not, see &lt;http://www.gnu.org/licenses/&gt;.  <br><br>--&gt; <br><br># Gyr<br><br>Come talk with us about Gyr on matrix at<br>[#gyr:matrix.org](https://matrix.to/#/#gyr:matrix.org)!<br><br>Gyr is a framework for quickly developing [matrix](https://matrix.org)<br>[application<br>services](http://matrix.org/docs/spec/application_service/unstable.html) in<br>python3. It provides a WSGI application and several other utilities for working<br>with matrix. <br><br>Gyr is designed to be a fairly thin layer of abstraction over application<br>service api--just enough to make things easy without pushing you so far from the<br>spec that you get confused.<br><br># Installation<br><br>Please install gyr with pip (in a virtualenv if you prefer):<br><br>```sh<br>pip install gyr<br>```<br><br># Usage<br><br>I'll try to show a bunch of functionality here, but see examples directory for<br>further usage examples.<br><br>```python<br>from gyr import server, matrix_objects<br><br>application = server.Application(\"http://localhost:8008\", \"foobar\")<br><br>as_user = matrix_objects.MatrixUser(\"@example_as:example.com\", application.Api)<br>room = as_user.create_room(alias=\"#foo:example.com\", is_public=True)<br><br>def rm_hndlr(room_id):<br>    # Gyr will create a user for you if this returns true!<br>    return False<br>    <br>def user_hndlr(user_id):<br>    # Gyr will create the room for you if this returns true!<br>    return False<br>    <br>def txn_hndlr(events):<br>    for event in events:<br>    \troom.send_notice(<br>\t    \"Received event type {} in room {} from user {}\".format(event.type,<br>\t                                                            event.room,<br>\t\t\t\t\t\t\t\t    event.user)<br>\t)<br>    return True<br>\t<br>application.add_handlers(room_handler=rm_hndlr, transaction_handler=txn_hndlr,<br>                         user_handler=user_hndlr)<br>```<br><br>Save as example.py. Then from the commandline:<br><br>```sh<br>gunicorn example:application<br>```<br><br># Status<br><br>Very alpha! Most of the main functionality I'd envisioned is present, however<br>there's poor to non-existent documentation and no unit tests. Contributions are<br>welcome.<br><br># Projects Using Gyr<br><br>* [matrix_relay](https://github.com/non-Jedi/matrix_relay)<br>* Open a PR or [ping me on matrix](https://matrix.to/#/@abeckmeyer:matrix.org)<br>\twith your project. I'd love to hear about anyone building on gyr!<br><br># Modules<br><br>## gyr.server<br><br>`server` provides the WSGI application class. An instance of<br>gyr.server.Application functions as the WSGI app and will automatically<br>parse the request and call any handlers provided to the Application<br>instance.<br><br>## gyr.api<br><br>`api` provides a helpful wrapper for<br>[matrix-python-sdk](https://github.com/matrix-org/matrix-python-sdk)'s<br>api, changing the parts of the api that are different for application<br>services until such time as similiar changes are merged upstream. Pull<br>requests for these changes have been submitted, and some changes already<br>merged into master.<br><br>For working with the api, I recommend using the wrappers built around<br>specific objects which are available in gyr.matrix_objects.<br><br>## gyr.matrix_objects<br><br>`matrix_objects` provides helpful wrapper classes around matrix users,<br>events and rooms. It is not designed to be easily used for the normal<br>client-server api but should provide most necessary functionality for<br>the manipulation of users and rooms that an application service might<br>need to do.<br><br>Pull requests enriching the functionality of these classes are very<br>welcome.<br>\n          </div>"}, "last_serial": 2858090, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "bb3ca3a881016272cb55c6db07675d90", "sha256": "6e703f4a64e203b03c94bdce44e5ca13d66a2799d7c3416eacca829f5bd11632"}, "downloads": -1, "filename": "gyr-0.1.0.tar.gz", "has_sig": false, "md5_digest": "bb3ca3a881016272cb55c6db07675d90", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19602, "upload_time": "2017-04-22T01:34:34", "upload_time_iso_8601": "2017-04-22T01:34:34.603506Z", "url": "https://files.pythonhosted.org/packages/37/12/7bea27522c3f998b1d0e24193ea8ab1421d129c1965e034f3fcc969b1882/gyr-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "3f71309342ce4789d957a31d49141fe1", "sha256": "828ca99724ce914dfc44cb2dba163403e2b6a564ee14c22adcd80cfe4aa88e97"}, "downloads": -1, "filename": "gyr-0.2.0.tar.gz", "has_sig": false, "md5_digest": "3f71309342ce4789d957a31d49141fe1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20232, "upload_time": "2017-05-08T01:38:16", "upload_time_iso_8601": "2017-05-08T01:38:16.245249Z", "url": "https://files.pythonhosted.org/packages/73/45/13747e3f9dce173a4283f68033bc9bd61b6bf3c3f6856dfc06ddd8598511/gyr-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3f71309342ce4789d957a31d49141fe1", "sha256": "828ca99724ce914dfc44cb2dba163403e2b6a564ee14c22adcd80cfe4aa88e97"}, "downloads": -1, "filename": "gyr-0.2.0.tar.gz", "has_sig": false, "md5_digest": "3f71309342ce4789d957a31d49141fe1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20232, "upload_time": "2017-05-08T01:38:16", "upload_time_iso_8601": "2017-05-08T01:38:16.245249Z", "url": "https://files.pythonhosted.org/packages/73/45/13747e3f9dce173a4283f68033bc9bd61b6bf3c3f6856dfc06ddd8598511/gyr-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:58 2020"}