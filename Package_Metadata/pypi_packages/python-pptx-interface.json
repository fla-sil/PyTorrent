{"info": {"author": "Nathanael J\u00f6hrmann", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": "python_pptx_interface\n=====================\n.. image:: https://img.shields.io/pypi/v/python_pptx_interface.svg\n    :target: https://pypi.org/project/python_pptx_interface/\n\n.. image:: http://img.shields.io/:license-MIT-blue.svg?style=flat-square\n    :target: http://badges.MIT-license.org\n\n`python-pptx <https://github.com/scanny/python-pptx.git>`_ is a great module to create pptx-files.\nBut it it can be challenging to master the complex syntax. This module tries to present an easier interface\nfor python-pptx to create PowerPoint files. It also adds some still missing features like moving slides,\ncreate links to other slides or remove unused place-holders.\n\nContent\n\n  * `Example <#example>`__: demonstrates usage of some key-features of python-pptx-interface\n  * `class PPTXCreator <#class-pptxcreator>`__: Create pptx-File from template, incluing methods to add text, tables, figures etc.\n  * `class PPTXPosition <#class-pptxposition>`__: Allows positioning as fraction of slide height/width.\n  * `Style sheets <#style-sheets>`__\n     + `class PPTXFontStyle <#class-pptxfontstyle>`__: Helps to set/change/copy fonts.\n     + `class PPTXParagraphStyle <#class-pptxparagraphstyle>`__: Format paragraphs (alignment, indent ...).\n     + `class PPTXTableStyle <#class-pptxtablestyle>`__: Used to layout tables.\n     + `class PPTXFillStyle <#class-pptxfillstyle>`__\n  * `Working with templates <#working-with-templates>`__\n     + `class AbstractTemplate <#class-abstracttemplate>`__: Base class for all custom templates (enforce necessary attributes)\n     + `class TemplateExample <#class-templateexample>`__: Example class to show how to work with custom templates\n  * `utils.py <#utilspy>`__: A collection of useful functions, eg. to generate PDF or PNG from \\*.pptx (needs PowerPoint installed)\n\n\nExample\n-------\n\n.. figure:: https://github.com/natter1/python_pptx_interface/raw/master/docs/images/example01_title_slide.png\n    :width: 500pt\n\n|\n\nThis module comes with a\n`general example <https://github.com/natter1/python_pptx_interface/blob/master/pptx_tools/examples/general_example_01.py>`_,\nthat you could run like\n\n.. code:: python\n\n    from pptx_tools.examples import general_example_01 as example\n\n    example.run(save_dir=my_dir)  # you have to specify the folder where to save the presentation\n\nThis will create an example.pptx, using some of the key-features of python-pptx-interface. Lets have a closer look:\n\n|\n\n.. code:: python\n\n    from pptx_tools.creator import PPTXCreator, PPTXPosition\n    from pptx_tools.style_sheets import font_title, font_default\n    from pptx_tools.templates import TemplateExample\n\n    from pptx.enum.lang import MSO_LANGUAGE_ID\n    from pptx.enum.text import MSO_TEXT_UNDERLINE_TYPE\n\n    try:\n        import matplotlib.pyplot as plt\n        matplotlib_installed = True\n    except ImportError as e:\n        matplotlib_installed = False\n\nFirst we need to import some stuff. **PPTXCreator** is the class used to create a \\*.pptx file.\n**PPTXPosition** allows as to position shapes in more intuitive units of slide width/height.\n**font_title** is a function returning a PPTXFontStyle instance. We will use it to change the formatting of the title shape.\n**TemplateExample** is a class providing access to the example-template.pptx included in python-pptx-interface\nand also setting some texts on the master slides like author, date and website. You could use it as reference\non how to use your own template files by subclassing AbstractTemplate\n(you need at least to specify a path to your template and define a default_layout and a title_layout).\n\n**MSO_LANGUAGE_ID** is used to set the language of text and **MSO_TEXT_UNDERLINE_TYPE** is used to format underlining.\n\nImporting matplotlib is optional - it is used to demonstrate, how to get a matplotlib figure into your presentation.\n\n|\n|\n\n.. code:: python\n\n    def run(save_dir: str):\n        pp = PPTXCreator(TemplateExample())\n\n        PPTXFontStyle.lanaguage_id = MSO_LANGUAGE_ID.ENGLISH_UK\n        PPTXFontStyle.name = \"Roboto\"\n\n        title_slide = pp.add_title_slide(\"Example presentation\")\n        font = font_title()  # returns a PPTXFontStyle instance with bold font and size = 32 Pt\n        font.write_shape(title_slide.shapes.title)  # change font attributes for all paragraphs in shape\n\nNow we create our presentation with **PPTXCreator** using the **TemplateExample**.\nWe also set the default font language and name of all **PPTXFontStyle** instances. This is not necessary,\nas *ENGLISH_UK* and *Roboto* are the defaults anyway. But in principle you could change these settings here,\nto fit your needs. If you create your own template class, you might also set these default parameters there.\nFinally we add a title slide and change the font style of the title using title_font().\n\n|\n|\n\n.. code:: python\n\n        slide2 = pp.add_slide(\"page2\")\n        pp.add_slide(\"page3\")\n        pp.add_slide(\"page4\")\n        content_slide = pp.add_content_slide()  # add slide with hyperlinks to all other slides\n\nNext, we add three slides, and create a content slide with hyperlinks to all other slides. By default,\nit is put to the second position (you could specify the position using the optional slide_index parameter).\n\n.. figure:: https://github.com/natter1/python_pptx_interface/raw/master/docs/images/example01_content_slide.png\n    :width: 500pt\n\n|\n|\n\nLets add some more stuff to the title slide.\n\n.. code:: python\n\n    text = \"This text has three paragraphs. This is the first.\\n\" \\\n           \"Das ist der zweite ...\\n\" \\\n           \"... and the third.\"\n    my_font = font_default()  # font size 14\n    my_font.size = 16\n    text_shape = pp.add_text_box(title_slide, text, PPTXPosition(0.02, 0.24), my_font)\n\n**PPTXCreator.add_text_box()** places a new text shape on a slide with the given text.\nOptionally it accepts a PPTXPosition and a PPTXFont. With PPTXPosition(0.02, 0.24)\nwe position the figure 0.02 slide widths from left and 0.24 slide heights from top.\n\n|\n|\n\n.. code:: python\n\n    my_font.set(size=22, bold=True, language_id=MSO_LANGUAGE_ID.GERMAN)\n    my_font.write_paragraph(text_shape.text_frame.paragraphs[1])\n\n    my_font.set(size=18, bold=False, italic=True, name=\"Vivaldi\",\n                language_id=MSO_LANGUAGE_ID.ENGLISH_UK,\n                underline=MSO_TEXT_UNDERLINE_TYPE.WAVY_DOUBLE_LINE)\n    my_font.write_paragraph(text_shape.text_frame.paragraphs[2])\n\nWe can use my_font to format individual paragraphs in a text_frame with **PPTXFontStyle.write_paragraph()**.\nVia **PPTXFontStyle.set()** easily customize the font before using it.\n\n|\n|\n\n.. code:: python\n\n        table_data = []\n        table_data.append([1, 2])  # rows can have different length\n        table_data.append([4, slide2, 6])  # there is specific type needed for entries (implemented as text=f\"{entry}\")\n        table_data.append([\"\", 8, 9])\n\n        pp.add_table(slide2, table_data)\n\nwe can also easily add a table. First we define all the data we want to put in the table. Here we use a list of lists.\nBut add_table is more flexible and can work with anything, that is an Iterable of Iterable. The outer iterable defines,\nhow many rows the table will have. The longest inner iterable is used to get the number of columns.\n\n|\n|\n\n.. code:: python\n\n        if matplotlib_installed:\n            fig = create_demo_figure()\n            pp.add_matplotlib_figure(fig, title_slide, PPTXPosition(0.3, 0.4))\n            pp.add_matplotlib_figure(fig, title_slide, PPTXPosition(0.3, 0.4, fig.get_figwidth(), -1.0), zoom=0.4)\n            pp.add_matplotlib_figure(fig, title_slide, PPTXPosition(0.3, 0.4, fig.get_figwidth(), 0.0), zoom=0.5)\n            pp.add_matplotlib_figure(fig, title_slide, PPTXPosition(0.3, 0.4, fig.get_figwidth(), 1.5), zoom=0.6)\n\n\nIf matplotlib is installed, we use it to create a demo figure, and add it to the title_slide.\nWith PPTXPosition(0.3, 0.4) we position the figure 0.3 slide widths from left and 0.4 slide heights from top.\nPPTXPosition has two more optional parameters, to further position with inches values (starting from the relative position).\n\n|\n|\n\n.. code:: python\n\n        pp.save(os.path.join(save_dir, \"example.pptx\"))\n\nFinally, we save the example as example.pptx.\n\n|\n|\n\nIf you are on windows an have PowerPoint installed, you could use some additional features.\n\n.. code:: python\n\n    try:  # only on Windows with PowerPoint installed:\n        filename_pptx = os.path.join(save_dir, \"example.pptx\")\n        filename_pdf = os.path.join(save_dir, \"example.pdf\")\n        foldername_png = os.path.join(save_dir, \"example_pngs\")\n\n        # use absolute path, because its not clear where PowerPoint saves PDF/PNG ... otherwise\n        pp.save(filename_pptx, create_pdf=True)  # saves your pptx-file and also creates a PDF file\n        pp.save_as_pdf(filename_pdf, overwrite=True)  # saves presentation as PDF\n        pp.save_as_png(foldername_png, overwrite_folder=True)  # creates folder with PNGs of slides\n    except Exception as e:\n        print(e)\n\n\nclass PPTXCreator\n-----------------\n\nThis class provides an easy interface to create a PowerPoint presentation via python-pptx. It has methods to add slides\nand shapes (tables, textboxes, matplotlib figures) setting format by using layouts and stylesheets. It also has methods\nto move slides around, remove empty placeholders or create hyperlinks.\n\nclass PPTXPosition\n------------------\n\nTo position shapes in a slide, many methods of PPTXCreator except a PPTXPosition parameter. It allows to give a position\nrelative to slide width and high (as a fraction). Additionally ypou can specify the position in inches starting from the\nrelative position. Some stylesheets e.g. PPTXTableStyle can also have an optional PPTXPosition attribute. In that case\nwriting the style to a shape will also set its position.\n\nStylesheets\n-----------\nWhile python-pptx-interface can load a template file with placeholders, the intended use case is more focused on\ncreating and positioning shapes like tables, pictures, textboxes etc. directly in python. Therefore all unused\nplaceholders are removed by default, when creating a new slide. As it can be quite tedious to do all the necessary\nformatting directly using python-pptx, this package provides some style sheet like classes, to define a certain format\nand than \"write\" it to the created shapes. In general python-pptx-interface styles only change parameters, that\nhave been set. E.g. when creating a PPTXFontStyle instance and setting the font size, using this style will only\nchange the font size, but not color, bold ... attributes. Beside setting an attribute or not changing an attribute\nthere is a third case - using the default value as it is defined e.g. in the master slide. For that case, the value\n**_USE_DEFAULT** can be used.\n\n**To be consistent, python-pptx-interface will not change anything if an attribute is set to None.\nThis can differ from the pyrhon-pptx behaviour in some cases, where None means \"use default\".**\n\nclass PPTXFontStyle\n~~~~~~~~~~~~~~~~~~~\n`font-style example <https://github.com/natter1/python_pptx_interface/blob/master/pptx_tools/examples/font_style_example_01.py>`_\n...\n\n\nclass PPTXParagraphStyle\n~~~~~~~~~~~~~~~~~~~~~~~~\n\n...\n\nclass PPTXTableStyle\n~~~~~~~~~~~~~~~~~~~~\n`table-style example <https://github.com/natter1/python_pptx_interface/blob/master/pptx_tools/examples/table_style_example_01.py>`_,\n...\n\nclass PPTXFillStyle\n~~~~~~~~~~~~~~~~~~~\n\n...\n\nWorking with templates\n----------------------\n\n...\n\nclass AbstractTemplate\n~~~~~~~~~~~~~~~~~~~~~~\n\n...\n\nclass TemplateExample\n~~~~~~~~~~~~~~~~~~~~~\n\n...\n\nutils.py\n--------\n\n...\n\n\nRequirements\n------------\n* Python >= 3.6 (f-strings)\n* python-pptx\n\nOptional requirements\n---------------------\n* matplotlib (adding matplotlib figures to presentation)\n* comtypes  (create PDF's or PNG's)\n* PowerPoint (create PDF's or PNG's)\n\nContribution\n------------\nHelp with this project is welcome. You could report bugs or ask for improvements by creating a new issue.\n\nIf you want to contribute code, here are some additional notes:\n\n* This project uses 120 characters per line.\n* Try to avoid abbreviations in names for functions or variables.\n* Use type hints.\n* Use Slide objects instead of IDs or index values as function parameter.\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/natter1/python_pptx_interface.git", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "python-pptx-interface", "package_url": "https://pypi.org/project/python-pptx-interface/", "platform": "", "project_url": "https://pypi.org/project/python-pptx-interface/", "project_urls": {"Homepage": "https://github.com/natter1/python_pptx_interface.git"}, "release_url": "https://pypi.org/project/python-pptx-interface/0.0.10/", "requires_dist": ["python-pptx"], "requires_python": "", "summary": "Easy interface to create pptx-files using python-pptx", "version": "0.0.10", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.org/project/python_pptx_interface/\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/python_pptx_interface.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7eee787062100eb832137b304e4257e8072a816d/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f707974686f6e5f707074785f696e746572666163652e737667\"></a>\n<a href=\"http://badges.MIT-license.org\" rel=\"nofollow\"><img alt=\"http://img.shields.io/:license-MIT-blue.svg?style=flat-square\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/36c8edfb379ce34d9378d442e4d5e7d5c85e2c7e/687474703a2f2f696d672e736869656c64732e696f2f3a6c6963656e73652d4d49542d626c75652e7376673f7374796c653d666c61742d737175617265\"></a>\n<p><a href=\"https://github.com/scanny/python-pptx.git\" rel=\"nofollow\">python-pptx</a> is a great module to create pptx-files.\nBut it it can be challenging to master the complex syntax. This module tries to present an easier interface\nfor python-pptx to create PowerPoint files. It also adds some still missing features like moving slides,\ncreate links to other slides or remove unused place-holders.</p>\n<p>Content</p>\n<blockquote>\n<ul>\n<li><a href=\"#example\" rel=\"nofollow\">Example</a>: demonstrates usage of some key-features of python-pptx-interface</li>\n<li><a href=\"#class-pptxcreator\" rel=\"nofollow\">class PPTXCreator</a>: Create pptx-File from template, incluing methods to add text, tables, figures etc.</li>\n<li><a href=\"#class-pptxposition\" rel=\"nofollow\">class PPTXPosition</a>: Allows positioning as fraction of slide height/width.</li>\n<li><dl>\n<dt><a href=\"#style-sheets\" rel=\"nofollow\">Style sheets</a></dt>\n<dd><ul>\n<li><a href=\"#class-pptxfontstyle\" rel=\"nofollow\">class PPTXFontStyle</a>: Helps to set/change/copy fonts.</li>\n<li><a href=\"#class-pptxparagraphstyle\" rel=\"nofollow\">class PPTXParagraphStyle</a>: Format paragraphs (alignment, indent \u2026).</li>\n<li><a href=\"#class-pptxtablestyle\" rel=\"nofollow\">class PPTXTableStyle</a>: Used to layout tables.</li>\n<li><a href=\"#class-pptxfillstyle\" rel=\"nofollow\">class PPTXFillStyle</a></li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt><a href=\"#working-with-templates\" rel=\"nofollow\">Working with templates</a></dt>\n<dd><ul>\n<li><a href=\"#class-abstracttemplate\" rel=\"nofollow\">class AbstractTemplate</a>: Base class for all custom templates (enforce necessary attributes)</li>\n<li><a href=\"#class-templateexample\" rel=\"nofollow\">class TemplateExample</a>: Example class to show how to work with custom templates</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><a href=\"#utilspy\" rel=\"nofollow\">utils.py</a>: A collection of useful functions, eg. to generate PDF or PNG from *.pptx (needs PowerPoint installed)</li>\n</ul>\n</blockquote>\n<div id=\"example\">\n<h2>Example</h2>\n<div>\n<img alt=\"https://github.com/natter1/python_pptx_interface/raw/master/docs/images/example01_title_slide.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9d2f4f6b26b29bb5495237e6066c7ddc5be9178f/68747470733a2f2f6769746875622e636f6d2f6e6174746572312f707974686f6e5f707074785f696e746572666163652f7261772f6d61737465722f646f63732f696d616765732f6578616d706c6530315f7469746c655f736c6964652e706e67\" width=\"500pt\">\n</div>\n<div>\n<div><br></div>\n</div>\n<p>This module comes with a\n<a href=\"https://github.com/natter1/python_pptx_interface/blob/master/pptx_tools/examples/general_example_01.py\" rel=\"nofollow\">general example</a>,\nthat you could run like</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pptx_tools.examples</span> <span class=\"kn\">import</span> <span class=\"n\">general_example_01</span> <span class=\"k\">as</span> <span class=\"n\">example</span>\n\n<span class=\"n\">example</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">save_dir</span><span class=\"o\">=</span><span class=\"n\">my_dir</span><span class=\"p\">)</span>  <span class=\"c1\"># you have to specify the folder where to save the presentation</span>\n</pre>\n<p>This will create an example.pptx, using some of the key-features of python-pptx-interface. Lets have a closer look:</p>\n<div>\n<div><br></div>\n</div>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pptx_tools.creator</span> <span class=\"kn\">import</span> <span class=\"n\">PPTXCreator</span><span class=\"p\">,</span> <span class=\"n\">PPTXPosition</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pptx_tools.style_sheets</span> <span class=\"kn\">import</span> <span class=\"n\">font_title</span><span class=\"p\">,</span> <span class=\"n\">font_default</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pptx_tools.templates</span> <span class=\"kn\">import</span> <span class=\"n\">TemplateExample</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">pptx.enum.lang</span> <span class=\"kn\">import</span> <span class=\"n\">MSO_LANGUAGE_ID</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pptx.enum.text</span> <span class=\"kn\">import</span> <span class=\"n\">MSO_TEXT_UNDERLINE_TYPE</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n    <span class=\"n\">matplotlib_installed</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n<span class=\"k\">except</span> <span class=\"ne\">ImportError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"n\">matplotlib_installed</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n</pre>\n<p>First we need to import some stuff. <strong>PPTXCreator</strong> is the class used to create a *.pptx file.\n<strong>PPTXPosition</strong> allows as to position shapes in more intuitive units of slide width/height.\n<strong>font_title</strong> is a function returning a PPTXFontStyle instance. We will use it to change the formatting of the title shape.\n<strong>TemplateExample</strong> is a class providing access to the example-template.pptx included in python-pptx-interface\nand also setting some texts on the master slides like author, date and website. You could use it as reference\non how to use your own template files by subclassing AbstractTemplate\n(you need at least to specify a path to your template and define a default_layout and a title_layout).</p>\n<p><strong>MSO_LANGUAGE_ID</strong> is used to set the language of text and <strong>MSO_TEXT_UNDERLINE_TYPE</strong> is used to format underlining.</p>\n<p>Importing matplotlib is optional - it is used to demonstrate, how to get a matplotlib figure into your presentation.</p>\n<div>\n<div><br></div>\n<div><br></div>\n</div>\n<pre><span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"n\">save_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n    <span class=\"n\">pp</span> <span class=\"o\">=</span> <span class=\"n\">PPTXCreator</span><span class=\"p\">(</span><span class=\"n\">TemplateExample</span><span class=\"p\">())</span>\n\n    <span class=\"n\">PPTXFontStyle</span><span class=\"o\">.</span><span class=\"n\">lanaguage_id</span> <span class=\"o\">=</span> <span class=\"n\">MSO_LANGUAGE_ID</span><span class=\"o\">.</span><span class=\"n\">ENGLISH_UK</span>\n    <span class=\"n\">PPTXFontStyle</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">\"Roboto\"</span>\n\n    <span class=\"n\">title_slide</span> <span class=\"o\">=</span> <span class=\"n\">pp</span><span class=\"o\">.</span><span class=\"n\">add_title_slide</span><span class=\"p\">(</span><span class=\"s2\">\"Example presentation\"</span><span class=\"p\">)</span>\n    <span class=\"n\">font</span> <span class=\"o\">=</span> <span class=\"n\">font_title</span><span class=\"p\">()</span>  <span class=\"c1\"># returns a PPTXFontStyle instance with bold font and size = 32 Pt</span>\n    <span class=\"n\">font</span><span class=\"o\">.</span><span class=\"n\">write_shape</span><span class=\"p\">(</span><span class=\"n\">title_slide</span><span class=\"o\">.</span><span class=\"n\">shapes</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">)</span>  <span class=\"c1\"># change font attributes for all paragraphs in shape</span>\n</pre>\n<p>Now we create our presentation with <strong>PPTXCreator</strong> using the <strong>TemplateExample</strong>.\nWe also set the default font language and name of all <strong>PPTXFontStyle</strong> instances. This is not necessary,\nas <em>ENGLISH_UK</em> and <em>Roboto</em> are the defaults anyway. But in principle you could change these settings here,\nto fit your needs. If you create your own template class, you might also set these default parameters there.\nFinally we add a title slide and change the font style of the title using title_font().</p>\n<div>\n<div><br></div>\n<div><br></div>\n</div>\n<pre><span class=\"n\">slide2</span> <span class=\"o\">=</span> <span class=\"n\">pp</span><span class=\"o\">.</span><span class=\"n\">add_slide</span><span class=\"p\">(</span><span class=\"s2\">\"page2\"</span><span class=\"p\">)</span>\n<span class=\"n\">pp</span><span class=\"o\">.</span><span class=\"n\">add_slide</span><span class=\"p\">(</span><span class=\"s2\">\"page3\"</span><span class=\"p\">)</span>\n<span class=\"n\">pp</span><span class=\"o\">.</span><span class=\"n\">add_slide</span><span class=\"p\">(</span><span class=\"s2\">\"page4\"</span><span class=\"p\">)</span>\n<span class=\"n\">content_slide</span> <span class=\"o\">=</span> <span class=\"n\">pp</span><span class=\"o\">.</span><span class=\"n\">add_content_slide</span><span class=\"p\">()</span>  <span class=\"c1\"># add slide with hyperlinks to all other slides</span>\n</pre>\n<p>Next, we add three slides, and create a content slide with hyperlinks to all other slides. By default,\nit is put to the second position (you could specify the position using the optional slide_index parameter).</p>\n<div>\n<img alt=\"https://github.com/natter1/python_pptx_interface/raw/master/docs/images/example01_content_slide.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/30b946446b76007d7427f839440cac91e2636578/68747470733a2f2f6769746875622e636f6d2f6e6174746572312f707974686f6e5f707074785f696e746572666163652f7261772f6d61737465722f646f63732f696d616765732f6578616d706c6530315f636f6e74656e745f736c6964652e706e67\" width=\"500pt\">\n</div>\n<div>\n<div><br></div>\n<div><br></div>\n</div>\n<p>Lets add some more stuff to the title slide.</p>\n<pre><span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s2\">\"This text has three paragraphs. This is the first.</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span> \\\n       <span class=\"s2\">\"Das ist der zweite ...</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span> \\\n       <span class=\"s2\">\"... and the third.\"</span>\n<span class=\"n\">my_font</span> <span class=\"o\">=</span> <span class=\"n\">font_default</span><span class=\"p\">()</span>  <span class=\"c1\"># font size 14</span>\n<span class=\"n\">my_font</span><span class=\"o\">.</span><span class=\"n\">size</span> <span class=\"o\">=</span> <span class=\"mi\">16</span>\n<span class=\"n\">text_shape</span> <span class=\"o\">=</span> <span class=\"n\">pp</span><span class=\"o\">.</span><span class=\"n\">add_text_box</span><span class=\"p\">(</span><span class=\"n\">title_slide</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">PPTXPosition</span><span class=\"p\">(</span><span class=\"mf\">0.02</span><span class=\"p\">,</span> <span class=\"mf\">0.24</span><span class=\"p\">),</span> <span class=\"n\">my_font</span><span class=\"p\">)</span>\n</pre>\n<p><strong>PPTXCreator.add_text_box()</strong> places a new text shape on a slide with the given text.\nOptionally it accepts a PPTXPosition and a PPTXFont. With PPTXPosition(0.02, 0.24)\nwe position the figure 0.02 slide widths from left and 0.24 slide heights from top.</p>\n<div>\n<div><br></div>\n<div><br></div>\n</div>\n<pre><span class=\"n\">my_font</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">22</span><span class=\"p\">,</span> <span class=\"n\">bold</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">language_id</span><span class=\"o\">=</span><span class=\"n\">MSO_LANGUAGE_ID</span><span class=\"o\">.</span><span class=\"n\">GERMAN</span><span class=\"p\">)</span>\n<span class=\"n\">my_font</span><span class=\"o\">.</span><span class=\"n\">write_paragraph</span><span class=\"p\">(</span><span class=\"n\">text_shape</span><span class=\"o\">.</span><span class=\"n\">text_frame</span><span class=\"o\">.</span><span class=\"n\">paragraphs</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n\n<span class=\"n\">my_font</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">18</span><span class=\"p\">,</span> <span class=\"n\">bold</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">italic</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"Vivaldi\"</span><span class=\"p\">,</span>\n            <span class=\"n\">language_id</span><span class=\"o\">=</span><span class=\"n\">MSO_LANGUAGE_ID</span><span class=\"o\">.</span><span class=\"n\">ENGLISH_UK</span><span class=\"p\">,</span>\n            <span class=\"n\">underline</span><span class=\"o\">=</span><span class=\"n\">MSO_TEXT_UNDERLINE_TYPE</span><span class=\"o\">.</span><span class=\"n\">WAVY_DOUBLE_LINE</span><span class=\"p\">)</span>\n<span class=\"n\">my_font</span><span class=\"o\">.</span><span class=\"n\">write_paragraph</span><span class=\"p\">(</span><span class=\"n\">text_shape</span><span class=\"o\">.</span><span class=\"n\">text_frame</span><span class=\"o\">.</span><span class=\"n\">paragraphs</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n</pre>\n<p>We can use my_font to format individual paragraphs in a text_frame with <strong>PPTXFontStyle.write_paragraph()</strong>.\nVia <strong>PPTXFontStyle.set()</strong> easily customize the font before using it.</p>\n<div>\n<div><br></div>\n<div><br></div>\n</div>\n<pre><span class=\"n\">table_data</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"n\">table_data</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">])</span>  <span class=\"c1\"># rows can have different length</span>\n<span class=\"n\">table_data</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">slide2</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">])</span>  <span class=\"c1\"># there is specific type needed for entries (implemented as text=f\"{entry}\")</span>\n<span class=\"n\">table_data</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"s2\">\"\"</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">])</span>\n\n<span class=\"n\">pp</span><span class=\"o\">.</span><span class=\"n\">add_table</span><span class=\"p\">(</span><span class=\"n\">slide2</span><span class=\"p\">,</span> <span class=\"n\">table_data</span><span class=\"p\">)</span>\n</pre>\n<p>we can also easily add a table. First we define all the data we want to put in the table. Here we use a list of lists.\nBut add_table is more flexible and can work with anything, that is an Iterable of Iterable. The outer iterable defines,\nhow many rows the table will have. The longest inner iterable is used to get the number of columns.</p>\n<div>\n<div><br></div>\n<div><br></div>\n</div>\n<pre><span class=\"k\">if</span> <span class=\"n\">matplotlib_installed</span><span class=\"p\">:</span>\n    <span class=\"n\">fig</span> <span class=\"o\">=</span> <span class=\"n\">create_demo_figure</span><span class=\"p\">()</span>\n    <span class=\"n\">pp</span><span class=\"o\">.</span><span class=\"n\">add_matplotlib_figure</span><span class=\"p\">(</span><span class=\"n\">fig</span><span class=\"p\">,</span> <span class=\"n\">title_slide</span><span class=\"p\">,</span> <span class=\"n\">PPTXPosition</span><span class=\"p\">(</span><span class=\"mf\">0.3</span><span class=\"p\">,</span> <span class=\"mf\">0.4</span><span class=\"p\">))</span>\n    <span class=\"n\">pp</span><span class=\"o\">.</span><span class=\"n\">add_matplotlib_figure</span><span class=\"p\">(</span><span class=\"n\">fig</span><span class=\"p\">,</span> <span class=\"n\">title_slide</span><span class=\"p\">,</span> <span class=\"n\">PPTXPosition</span><span class=\"p\">(</span><span class=\"mf\">0.3</span><span class=\"p\">,</span> <span class=\"mf\">0.4</span><span class=\"p\">,</span> <span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">get_figwidth</span><span class=\"p\">(),</span> <span class=\"o\">-</span><span class=\"mf\">1.0</span><span class=\"p\">),</span> <span class=\"n\">zoom</span><span class=\"o\">=</span><span class=\"mf\">0.4</span><span class=\"p\">)</span>\n    <span class=\"n\">pp</span><span class=\"o\">.</span><span class=\"n\">add_matplotlib_figure</span><span class=\"p\">(</span><span class=\"n\">fig</span><span class=\"p\">,</span> <span class=\"n\">title_slide</span><span class=\"p\">,</span> <span class=\"n\">PPTXPosition</span><span class=\"p\">(</span><span class=\"mf\">0.3</span><span class=\"p\">,</span> <span class=\"mf\">0.4</span><span class=\"p\">,</span> <span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">get_figwidth</span><span class=\"p\">(),</span> <span class=\"mf\">0.0</span><span class=\"p\">),</span> <span class=\"n\">zoom</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n    <span class=\"n\">pp</span><span class=\"o\">.</span><span class=\"n\">add_matplotlib_figure</span><span class=\"p\">(</span><span class=\"n\">fig</span><span class=\"p\">,</span> <span class=\"n\">title_slide</span><span class=\"p\">,</span> <span class=\"n\">PPTXPosition</span><span class=\"p\">(</span><span class=\"mf\">0.3</span><span class=\"p\">,</span> <span class=\"mf\">0.4</span><span class=\"p\">,</span> <span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">get_figwidth</span><span class=\"p\">(),</span> <span class=\"mf\">1.5</span><span class=\"p\">),</span> <span class=\"n\">zoom</span><span class=\"o\">=</span><span class=\"mf\">0.6</span><span class=\"p\">)</span>\n</pre>\n<p>If matplotlib is installed, we use it to create a demo figure, and add it to the title_slide.\nWith PPTXPosition(0.3, 0.4) we position the figure 0.3 slide widths from left and 0.4 slide heights from top.\nPPTXPosition has two more optional parameters, to further position with inches values (starting from the relative position).</p>\n<div>\n<div><br></div>\n<div><br></div>\n</div>\n<pre><span class=\"n\">pp</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">save_dir</span><span class=\"p\">,</span> <span class=\"s2\">\"example.pptx\"</span><span class=\"p\">))</span>\n</pre>\n<p>Finally, we save the example as example.pptx.</p>\n<div>\n<div><br></div>\n<div><br></div>\n</div>\n<p>If you are on windows an have PowerPoint installed, you could use some additional features.</p>\n<pre><span class=\"k\">try</span><span class=\"p\">:</span>  <span class=\"c1\"># only on Windows with PowerPoint installed:</span>\n    <span class=\"n\">filename_pptx</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">save_dir</span><span class=\"p\">,</span> <span class=\"s2\">\"example.pptx\"</span><span class=\"p\">)</span>\n    <span class=\"n\">filename_pdf</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">save_dir</span><span class=\"p\">,</span> <span class=\"s2\">\"example.pdf\"</span><span class=\"p\">)</span>\n    <span class=\"n\">foldername_png</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">save_dir</span><span class=\"p\">,</span> <span class=\"s2\">\"example_pngs\"</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># use absolute path, because its not clear where PowerPoint saves PDF/PNG ... otherwise</span>\n    <span class=\"n\">pp</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">filename_pptx</span><span class=\"p\">,</span> <span class=\"n\">create_pdf</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>  <span class=\"c1\"># saves your pptx-file and also creates a PDF file</span>\n    <span class=\"n\">pp</span><span class=\"o\">.</span><span class=\"n\">save_as_pdf</span><span class=\"p\">(</span><span class=\"n\">filename_pdf</span><span class=\"p\">,</span> <span class=\"n\">overwrite</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>  <span class=\"c1\"># saves presentation as PDF</span>\n    <span class=\"n\">pp</span><span class=\"o\">.</span><span class=\"n\">save_as_png</span><span class=\"p\">(</span><span class=\"n\">foldername_png</span><span class=\"p\">,</span> <span class=\"n\">overwrite_folder</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>  <span class=\"c1\"># creates folder with PNGs of slides</span>\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"class-pptxcreator\">\n<h2>class PPTXCreator</h2>\n<p>This class provides an easy interface to create a PowerPoint presentation via python-pptx. It has methods to add slides\nand shapes (tables, textboxes, matplotlib figures) setting format by using layouts and stylesheets. It also has methods\nto move slides around, remove empty placeholders or create hyperlinks.</p>\n</div>\n<div id=\"class-pptxposition\">\n<h2>class PPTXPosition</h2>\n<p>To position shapes in a slide, many methods of PPTXCreator except a PPTXPosition parameter. It allows to give a position\nrelative to slide width and high (as a fraction). Additionally ypou can specify the position in inches starting from the\nrelative position. Some stylesheets e.g. PPTXTableStyle can also have an optional PPTXPosition attribute. In that case\nwriting the style to a shape will also set its position.</p>\n</div>\n<div id=\"stylesheets\">\n<h2>Stylesheets</h2>\n<p>While python-pptx-interface can load a template file with placeholders, the intended use case is more focused on\ncreating and positioning shapes like tables, pictures, textboxes etc. directly in python. Therefore all unused\nplaceholders are removed by default, when creating a new slide. As it can be quite tedious to do all the necessary\nformatting directly using python-pptx, this package provides some style sheet like classes, to define a certain format\nand than \u201cwrite\u201d it to the created shapes. In general python-pptx-interface styles only change parameters, that\nhave been set. E.g. when creating a PPTXFontStyle instance and setting the font size, using this style will only\nchange the font size, but not color, bold \u2026 attributes. Beside setting an attribute or not changing an attribute\nthere is a third case - using the default value as it is defined e.g. in the master slide. For that case, the value\n<strong>_USE_DEFAULT</strong> can be used.</p>\n<p><strong>To be consistent, python-pptx-interface will not change anything if an attribute is set to None.\nThis can differ from the pyrhon-pptx behaviour in some cases, where None means \u201cuse default\u201d.</strong></p>\n<div id=\"class-pptxfontstyle\">\n<h3>class PPTXFontStyle</h3>\n<p><a href=\"https://github.com/natter1/python_pptx_interface/blob/master/pptx_tools/examples/font_style_example_01.py\" rel=\"nofollow\">font-style example</a>\n\u2026</p>\n</div>\n<div id=\"class-pptxparagraphstyle\">\n<h3>class PPTXParagraphStyle</h3>\n<p>\u2026</p>\n</div>\n<div id=\"class-pptxtablestyle\">\n<h3>class PPTXTableStyle</h3>\n<p><a href=\"https://github.com/natter1/python_pptx_interface/blob/master/pptx_tools/examples/table_style_example_01.py\" rel=\"nofollow\">table-style example</a>,\n\u2026</p>\n</div>\n<div id=\"class-pptxfillstyle\">\n<h3>class PPTXFillStyle</h3>\n<p>\u2026</p>\n</div>\n</div>\n<div id=\"working-with-templates\">\n<h2>Working with templates</h2>\n<p>\u2026</p>\n<div id=\"class-abstracttemplate\">\n<h3>class AbstractTemplate</h3>\n<p>\u2026</p>\n</div>\n<div id=\"class-templateexample\">\n<h3>class TemplateExample</h3>\n<p>\u2026</p>\n</div>\n</div>\n<div id=\"utils-py\">\n<h2>utils.py</h2>\n<p>\u2026</p>\n</div>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<ul>\n<li>Python &gt;= 3.6 (f-strings)</li>\n<li>python-pptx</li>\n</ul>\n</div>\n<div id=\"optional-requirements\">\n<h2>Optional requirements</h2>\n<ul>\n<li>matplotlib (adding matplotlib figures to presentation)</li>\n<li>comtypes  (create PDF\u2019s or PNG\u2019s)</li>\n<li>PowerPoint (create PDF\u2019s or PNG\u2019s)</li>\n</ul>\n</div>\n<div id=\"contribution\">\n<h2>Contribution</h2>\n<p>Help with this project is welcome. You could report bugs or ask for improvements by creating a new issue.</p>\n<p>If you want to contribute code, here are some additional notes:</p>\n<ul>\n<li>This project uses 120 characters per line.</li>\n<li>Try to avoid abbreviations in names for functions or variables.</li>\n<li>Use type hints.</li>\n<li>Use Slide objects instead of IDs or index values as function parameter.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 6637850, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "15370344aa3c0dac57833be69dcd3486", "sha256": "6c86518c6904e056272afc7316f841fb9cf3a5e0e121c1a038d33891ab8fa0ce"}, "downloads": -1, "filename": "python_pptx_interface-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "15370344aa3c0dac57833be69dcd3486", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9375, "upload_time": "2020-01-15T15:17:51", "upload_time_iso_8601": "2020-01-15T15:17:51.423932Z", "url": "https://files.pythonhosted.org/packages/68/d7/76d46ded1b61c24eed4de2420b42347423f957cf8a6bb51dccaa4670b8e9/python_pptx_interface-0.0.1-py3-none-any.whl", "yanked": false}], "0.0.10": [{"comment_text": "", "digests": {"md5": "4b3a460f2893f998ff3b576e28067d77", "sha256": "10cd681e8c026b9a33691f43026b822c1414644f8bba4edda5cf3b175666a498"}, "downloads": -1, "filename": "python_pptx_interface-0.0.10-py3-none-any.whl", "has_sig": false, "md5_digest": "4b3a460f2893f998ff3b576e28067d77", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 1885763, "upload_time": "2020-02-15T22:15:57", "upload_time_iso_8601": "2020-02-15T22:15:57.126233Z", "url": "https://files.pythonhosted.org/packages/50/52/39fe2456631c68d1ebfb5cea78ee761e60334cae1288eb091243014f1c50/python_pptx_interface-0.0.10-py3-none-any.whl", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "7157687d3849bf201860f159127fb13b", "sha256": "0dd1d76cac957ed506fe5cf7556d19a8baff3555ba434c7a02e1cff682212539"}, "downloads": -1, "filename": "python_pptx_interface-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "7157687d3849bf201860f159127fb13b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 1868406, "upload_time": "2020-01-15T17:18:45", "upload_time_iso_8601": "2020-01-15T17:18:45.522783Z", "url": "https://files.pythonhosted.org/packages/ac/04/3255286bdcab817641cb362de8d2fcd59f0f7d8250d5993fa03df1a07812/python_pptx_interface-0.0.2-py3-none-any.whl", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "0bc02950413998496f5b19da5939d484", "sha256": "decbd976d0fa6bb91547020281ec638071e798e29fb47f18bf4ed96191fc72a1"}, "downloads": -1, "filename": "python_pptx_interface-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "0bc02950413998496f5b19da5939d484", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 1873959, "upload_time": "2020-01-17T21:17:56", "upload_time_iso_8601": "2020-01-17T21:17:56.767000Z", "url": "https://files.pythonhosted.org/packages/4d/59/b49a9d065cbc0f010a55844990b04ade3616f920ed7ad8c7781e2398ae47/python_pptx_interface-0.0.3-py3-none-any.whl", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "7c169b94ac1c31d87002364354db8c85", "sha256": "7cfcfd2b05dedb4a2c1e2713ada41694fe17a38c17e925a211b043f0756ad13c"}, "downloads": -1, "filename": "python_pptx_interface-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "7c169b94ac1c31d87002364354db8c85", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 1876321, "upload_time": "2020-01-19T00:25:09", "upload_time_iso_8601": "2020-01-19T00:25:09.774250Z", "url": "https://files.pythonhosted.org/packages/82/95/48a44e5b691a9324735bb20cd8939052692b70b0e56a789e5d6bc9b778e8/python_pptx_interface-0.0.4-py3-none-any.whl", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "aeb84271488e8414bebaa1e80ed39b0f", "sha256": "41f1004446d3ba36d3779272028aacd4fd5b1db42837f016b527890e2c41dbfa"}, "downloads": -1, "filename": "python_pptx_interface-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "aeb84271488e8414bebaa1e80ed39b0f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 1876892, "upload_time": "2020-01-19T22:59:18", "upload_time_iso_8601": "2020-01-19T22:59:18.456818Z", "url": "https://files.pythonhosted.org/packages/51/e0/d1ce69370daafd60d21f4184276746425f0789cedc986a262ac1858053b6/python_pptx_interface-0.0.5-py3-none-any.whl", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "33580cba47bf451810761fa10ed26de2", "sha256": "efbadca68b87f7c9030dc109b821c3005ce2481a9633b587c5b01707d4f3ae60"}, "downloads": -1, "filename": "python_pptx_interface-0.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "33580cba47bf451810761fa10ed26de2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 1878823, "upload_time": "2020-01-28T19:55:31", "upload_time_iso_8601": "2020-01-28T19:55:31.625184Z", "url": "https://files.pythonhosted.org/packages/ec/26/c0a115141ac6d358d8d775d500ba543cc76d8dda8ffa5b8d6770f847218d/python_pptx_interface-0.0.6-py3-none-any.whl", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "c3d5d2551c5fcc34d111e4a24392f1b6", "sha256": "7ba060b405837a2a5931ba9ff47c569baa9e7e9519fd731790dcfbd6f8f01577"}, "downloads": -1, "filename": "python_pptx_interface-0.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "c3d5d2551c5fcc34d111e4a24392f1b6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 1880828, "upload_time": "2020-01-29T18:12:22", "upload_time_iso_8601": "2020-01-29T18:12:22.057060Z", "url": "https://files.pythonhosted.org/packages/8c/66/2eec37661e64d828e5e797112ea50b57faafc18a0b1cec70b7abeff6dc35/python_pptx_interface-0.0.7-py3-none-any.whl", "yanked": false}], "0.0.8": [{"comment_text": "", "digests": {"md5": "eba5007ddcb9cf0660b01e6b2f350bca", "sha256": "b771bdd56d9544e9c4644a492fdfbdc210775e689a9bf530dbbc80e1b5e07dbb"}, "downloads": -1, "filename": "python_pptx_interface-0.0.8-py3-none-any.whl", "has_sig": false, "md5_digest": "eba5007ddcb9cf0660b01e6b2f350bca", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 1880830, "upload_time": "2020-02-02T01:40:40", "upload_time_iso_8601": "2020-02-02T01:40:40.268046Z", "url": "https://files.pythonhosted.org/packages/a9/aa/8b0ff7998005f025ff6abe21d09cf57d1e99caa673f83bdab48ec60ed0f4/python_pptx_interface-0.0.8-py3-none-any.whl", "yanked": false}], "0.0.9": [{"comment_text": "", "digests": {"md5": "4259bcbb3fc0e3214da4835cbd4b78e8", "sha256": "6f003aa4e073ee32d856d02f9f6257a22ef495d14d1e535a4df3714cec50038f"}, "downloads": -1, "filename": "python_pptx_interface-0.0.9-py3-none-any.whl", "has_sig": false, "md5_digest": "4259bcbb3fc0e3214da4835cbd4b78e8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 1884966, "upload_time": "2020-02-11T13:23:32", "upload_time_iso_8601": "2020-02-11T13:23:32.457848Z", "url": "https://files.pythonhosted.org/packages/22/41/1fa6d6c72c44d34719abe66280a55c8a204f8b954db2810637d00e6d5fdd/python_pptx_interface-0.0.9-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4b3a460f2893f998ff3b576e28067d77", "sha256": "10cd681e8c026b9a33691f43026b822c1414644f8bba4edda5cf3b175666a498"}, "downloads": -1, "filename": "python_pptx_interface-0.0.10-py3-none-any.whl", "has_sig": false, "md5_digest": "4b3a460f2893f998ff3b576e28067d77", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 1885763, "upload_time": "2020-02-15T22:15:57", "upload_time_iso_8601": "2020-02-15T22:15:57.126233Z", "url": "https://files.pythonhosted.org/packages/50/52/39fe2456631c68d1ebfb5cea78ee761e60334cae1288eb091243014f1c50/python_pptx_interface-0.0.10-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:15:55 2020"}