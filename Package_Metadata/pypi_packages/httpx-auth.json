{"info": {"author": "Colin Bounouar", "author_email": "colin.bounouar.dev@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Build Tools"], "description": "<h2 align=\"center\">Authentication for HTTPX</h2>\n\n<p align=\"center\">\n<a href=\"https://pypi.org/project/httpx-auth/\"><img alt=\"pypi version\" src=\"https://img.shields.io/pypi/v/httpx_auth\"></a>\n<a href=\"https://travis-ci.com/Colin-b/httpx_auth\"><img alt=\"Build status\" src=\"https://api.travis-ci.com/Colin-b/httpx_auth.svg?branch=master\"></a>\n<a href=\"https://travis-ci.com/Colin-b/httpx_auth\"><img alt=\"Coverage\" src=\"https://img.shields.io/badge/coverage-100%25-brightgreen\"></a>\n<a href=\"https://github.com/psf/black\"><img alt=\"Code style: black\" src=\"https://img.shields.io/badge/code%20style-black-000000.svg\"></a>\n<a href=\"https://travis-ci.com/Colin-b/httpx_auth\"><img alt=\"Number of tests\" src=\"https://img.shields.io/badge/tests-236 passed-blue\"></a>\n<a href=\"https://pypi.org/project/httpx-auth/\"><img alt=\"Number of downloads\" src=\"https://img.shields.io/pypi/dm/httpx_auth\"></a>\n</p>\n\n> Version 1.0.0 will be released once httpx is considered as stable (release of 1.0.0).\n>\n> However current state can be considered as stable.\n\nProvides authentication classes to be used with [`httpx`][1] [authentication parameter][2].\n\n<p align=\"center\">\n    <a href=\"https://oauth.net/2/\"><img alt=\"OAuth2\" src=\"https://oauth.net/images/oauth-2-sm.png\"></a>\n    <a href=\"https://www.okta.com\"><img alt=\"Okta\" src=\"https://www.okta.com/sites/all/themes/Okta/images/logos/developer/Dev_Logo-03_Large.png\" height=\"120\"></a>\n    <a href=\"https://azure.microsoft.com/en-us/services/active-directory/\"><img alt=\"Azure Active Directory (AD)\" src=\"https://azurecomcdn.azureedge.net/cvt-cda59ccd0aa5ced6ff5a2052417cf596b92980921e88e667127eaca2232a31ab/images/shared/services/pricing-glyph-lock.svg\" height=\"120\"></a>\n</p>\n<p align=\"center\">Some of the supported authentication</p>\n\n## Available authentication\n\n- [OAuth2](#oauth-2)\n  - [Authorization Code Flow](#authorization-code-flow)\n    - [Okta](#okta-oauth2-authorization-code)\n  - [Authorization Code Flow with PKCE](#authorization-code-flow-with-proof-key-for-code-exchange)\n    - [Okta](#okta-oauth2-proof-key-for-code-exchange)\n  - [Resource Owner Password Credentials flow](#resource-owner-password-credentials-flow)\n  - [Client Credentials Flow](#client-credentials-flow)\n    - [Okta](#okta-oauth2-client-credentials)\n  - [Implicit Flow](#implicit-flow)\n    - [Azure AD (Access Token)](#microsoft---azure-active-directory-oauth2-access-token)\n    - [Azure AD (ID token)](#microsoft---azure-active-directory-openid-connect-id-token)\n    - [Okta (Access Token)](#okta-oauth2-implicit-access-token)\n    - [Okta (ID token)](#okta-openid-connect-implicit-id-token)\n  - [Managing token cache](#managing-token-cache)\n- API key\n  - [In header](#api-key-in-header)\n  - [In query](#api-key-in-query)\n- [Basic](#basic)\n- [Multiple authentication at once](#multiple-authentication-at-once)\n\n## OAuth 2\n\nMost of [OAuth2](https://oauth.net/2/) flows are supported.\n\nIf the one you are looking for is not yet supported, feel free to [ask for its implementation](https://github.com/Colin-b/httpx_auth/issues/new).\n\n### Authorization Code flow\n\nAuthorization Code Grant is implemented following [rfc6749](https://tools.ietf.org/html/rfc6749#section-4.1).\n\nUse `httpx_auth.OAuth2AuthorizationCode` to configure this kind of authentication.\n\n```python\nimport httpx\nfrom httpx_auth import OAuth2AuthorizationCode\n\nwith httpx.Client() as client:\n    client.get('http://www.example.com', auth=OAuth2AuthorizationCode('https://www.authorization.url', 'https://www.token.url'))\n```\n\n#### Parameters\n\n| Name                    | Description                | Mandatory | Default value |\n|:------------------------|:---------------------------|:----------|:--------------|\n| `authorization_url`     | OAuth 2 authorization URL. | Mandatory |               |\n| `token_url`             | OAuth 2 token URL.         | Mandatory |               |\n| `redirect_uri_endpoint` | Custom endpoint that will be used as redirect_uri the following way: http://localhost:<redirect_uri_port>/<redirect_uri_endpoint>. | Optional | ''             |\n| `redirect_uri_port`     | The port on which the server listening for the OAuth 2 code will be started. | Optional | 5000 |\n| `timeout`               | Maximum amount of seconds to wait for a code or a token to be received once requested. | Optional | 60 |\n| `success_display_time`  | In case a code is successfully received, this is the maximum amount of milliseconds the success page will be displayed in your browser. | Optional | 1 |\n| `failure_display_time`  | In case received code is not valid, this is the maximum amount of milliseconds the failure page will be displayed in your browser. | Optional | 5000 |\n| `header_name`           | Name of the header field used to send token. | Optional | Authorization |\n| `header_value`          | Format used to send the token value. \"{token}\" must be present as it will be replaced by the actual token. | Optional | Bearer {token} |\n| `response_type`         | Value of the response_type query parameter if not already provided in authorization URL. | Optional | code |\n| `token_field_name`      | Field name containing the token. | Optional | access_token |\n| `code_field_name`       | Field name containing the code. | Optional | code |\n| `username`              | User name in case basic authentication should be used to retrieve token. | Optional |  |\n| `password`              | User password in case basic authentication should be used to retrieve token. | Optional |  |\n\nAny other parameter will be put as query parameter in the authorization URL and as body parameters in the token URL.        \n\nUsual extra parameters are:\n\n| Name            | Description                                                          |\n|:----------------|:---------------------------------------------------------------------|\n| `client_id`     | Corresponding to your Application ID (in Microsoft Azure app portal) |\n| `client_secret` | If client is not authenticated with the authorization server         |\n| `nonce`         | Refer to [OpenID ID Token specifications][3] for more details        |\n\n#### Common providers\n\nMost of [OAuth2](https://oauth.net/2/) Authorization Code Grant providers are supported.\n\nIf the one you are looking for is not yet supported, feel free to [ask for its implementation](https://github.com/Colin-b/httpx_auth/issues/new).\n\n##### Okta (OAuth2 Authorization Code)\n\n[Okta Authorization Code Grant](https://developer.okta.com/docs/guides/implement-auth-code/overview/) providing access tokens is supported.\n\nUse `httpx_auth.OktaAuthorizationCode` to configure this kind of authentication.\n\n```python\nimport httpx\nfrom httpx_auth import OktaAuthorizationCode\n\n\nokta = OktaAuthorizationCode(instance='testserver.okta-emea.com', client_id='54239d18-c68c-4c47-8bdd-ce71ea1d50cd')\nwith httpx.Client() as client:\n    client.get('http://www.example.com', auth=okta)\n```\n\n###### Parameters\n\n| Name                    | Description                | Mandatory | Default value |\n|:------------------------|:---------------------------|:----------|:--------------|\n| `instance`              | Okta instance (like \"testserver.okta-emea.com\"). | Mandatory |               |\n| `client_id`             | Okta Application Identifier (formatted as an Universal Unique Identifier). | Mandatory |               |\n| `response_type`         | Value of the response_type query parameter if not already provided in authorization URL. | Optional | token |\n| `token_field_name`      | Field name containing the token. | Optional | access_token |\n| `nonce`                 | Refer to [OpenID ID Token specifications][3] for more details. | Optional | Newly generated Universal Unique Identifier. |\n| `scope`                 | Scope parameter sent in query. Can also be a list of scopes. | Optional | openid |\n| `authorization_server`  | Okta authorization server. | Optional | 'default' |\n| `redirect_uri_endpoint` | Custom endpoint that will be used as redirect_uri the following way: http://localhost:<redirect_uri_port>/<redirect_uri_endpoint>. | Optional | ''             |\n| `redirect_uri_port`     | The port on which the server listening for the OAuth 2 token will be started. | Optional | 5000 |\n| `timeout`               | Maximum amount of seconds to wait for a token to be received once requested. | Optional | 60 |\n| `success_display_time`  | In case a token is successfully received, this is the maximum amount of milliseconds the success page will be displayed in your browser. | Optional | 1 |\n| `failure_display_time`  | In case received token is not valid, this is the maximum amount of milliseconds the failure page will be displayed in your browser. | Optional | 5000 |\n| `header_name`           | Name of the header field used to send token. | Optional | Authorization |\n| `header_value`          | Format used to send the token value. \"{token}\" must be present as it will be replaced by the actual token. | Optional | Bearer {token} |\n\nAny other parameter will be put as query parameter in the authorization URL.        \n\nUsual extra parameters are:\n\n| Name            | Description                                                          |\n|:----------------|:---------------------------------------------------------------------|\n| `prompt`        | none to avoid prompting the user if a session is already opened.     |\n\n### Authorization Code Flow with Proof Key for Code Exchange\n\nProof Key for Code Exchange is implemented following [rfc7636](https://tools.ietf.org/html/rfc7636).\n\nUse `httpx_auth.OAuth2AuthorizationCodePKCE` to configure this kind of authentication.\n\n```python\nimport httpx\nfrom httpx_auth import OAuth2AuthorizationCodePKCE\n\nwith httpx.Client() as client:\n    client.get('http://www.example.com', auth=OAuth2AuthorizationCodePKCE('https://www.authorization.url', 'https://www.token.url'))\n```\n\n#### Parameters \n\n| Name                    | Description                | Mandatory | Default value |\n|:------------------------|:---------------------------|:----------|:--------------|\n| `authorization_url`     | OAuth 2 authorization URL. | Mandatory |               |\n| `token_url`             | OAuth 2 token URL.         | Mandatory |               |\n| `redirect_uri_endpoint` | Custom endpoint that will be used as redirect_uri the following way: http://localhost:<redirect_uri_port>/<redirect_uri_endpoint>. | Optional | ''             |\n| `redirect_uri_port`     | The port on which the server listening for the OAuth 2 code will be started. | Optional | 5000 |\n| `timeout`               | Maximum amount of seconds to wait for a code or a token to be received once requested. | Optional | 60 |\n| `success_display_time`  | In case a code is successfully received, this is the maximum amount of milliseconds the success page will be displayed in your browser. | Optional | 1 |\n| `failure_display_time`  | In case received code is not valid, this is the maximum amount of milliseconds the failure page will be displayed in your browser. | Optional | 5000 |\n| `header_name`           | Name of the header field used to send token. | Optional | Authorization |\n| `header_value`          | Format used to send the token value. \"{token}\" must be present as it will be replaced by the actual token. | Optional | Bearer {token} |\n| `response_type`         | Value of the response_type query parameter if not already provided in authorization URL. | Optional | code |\n| `token_field_name`      | Field name containing the token. | Optional | access_token |\n| `code_field_name`       | Field name containing the code. | Optional | code |\n\nAny other parameter will be put as query parameter in the authorization URL and as body parameters in the token URL.        \n\nUsual extra parameters are:\n\n| Name            | Description                                                          |\n|:----------------|:---------------------------------------------------------------------|\n| `client_id`     | Corresponding to your Application ID (in Microsoft Azure app portal) |\n| `client_secret` | If client is not authenticated with the authorization server         |\n| `nonce`         | Refer to [OpenID ID Token specifications][3] for more details        |\n\n#### Common providers\n\nMost of [OAuth2](https://oauth.net/2/) Proof Key for Code Exchange providers are supported.\n\nIf the one you are looking for is not yet supported, feel free to [ask for its implementation](https://github.com/Colin-b/httpx_auth/issues/new).\n\n##### Okta (OAuth2 Proof Key for Code Exchange)\n\n[Okta Proof Key for Code Exchange](https://developer.okta.com/docs/guides/implement-auth-code-pkce/overview/) providing access tokens is supported.\n\nUse `httpx_auth.OktaAuthorizationCodePKCE` to configure this kind of authentication.\n\n```python\nimport httpx\nfrom httpx_auth import OktaAuthorizationCodePKCE\n\n\nokta = OktaAuthorizationCodePKCE(instance='testserver.okta-emea.com', client_id='54239d18-c68c-4c47-8bdd-ce71ea1d50cd')\nwith httpx.Client() as client:\n    client.get('http://www.example.com', auth=okta)\n```\n\n###### Parameters\n\n| Name                    | Description                | Mandatory | Default value |\n|:------------------------|:---------------------------|:----------|:--------------|\n| `instance`              | Okta instance (like \"testserver.okta-emea.com\"). | Mandatory |               |\n| `client_id`             | Okta Application Identifier (formatted as an Universal Unique Identifier). | Mandatory |               |\n| `response_type`         | Value of the response_type query parameter if not already provided in authorization URL. | Optional | code |\n| `token_field_name`      | Field name containing the token. | Optional | access_token |\n| `code_field_name`      | Field name containing the code. | Optional | code |\n| `nonce`                 | Refer to [OpenID ID Token specifications][3] for more details. | Optional | Newly generated Universal Unique Identifier. |\n| `scope`                 | Scope parameter sent in query. Can also be a list of scopes. | Optional | openid |\n| `authorization_server`  | Okta authorization server. | Optional | 'default' |\n| `redirect_uri_endpoint` | Custom endpoint that will be used as redirect_uri the following way: http://localhost:<redirect_uri_port>/<redirect_uri_endpoint>. | Optional | ''             |\n| `redirect_uri_port`     | The port on which the server listening for the OAuth 2 token will be started. | Optional | 5000 |\n| `timeout`               | Maximum amount of seconds to wait for a token to be received once requested. | Optional | 60 |\n| `success_display_time`  | In case a token is successfully received, this is the maximum amount of milliseconds the success page will be displayed in your browser. | Optional | 1 |\n| `failure_display_time`  | In case received token is not valid, this is the maximum amount of milliseconds the failure page will be displayed in your browser. | Optional | 5000 |\n| `header_name`           | Name of the header field used to send token. | Optional | Authorization |\n| `header_value`          | Format used to send the token value. \"{token}\" must be present as it will be replaced by the actual token. | Optional | Bearer {token} |\n\nAny other parameter will be put as query parameter in the authorization URL and as body parameters in the token URL.        \n\nUsual extra parameters are:\n\n| Name            | Description                                                          |\n|:----------------|:---------------------------------------------------------------------|\n| `client_secret`        | If client is not authenticated with the authorization server     |\n| `nonce`        | Refer to http://openid.net/specs/openid-connect-core-1_0.html#IDToken for more details     |\n\n### Resource Owner Password Credentials flow \n\nResource Owner Password Credentials Grant is implemented following [rfc6749](https://tools.ietf.org/html/rfc6749#section-4.3).\n\nUse `httpx_auth.OAuth2ResourceOwnerPasswordCredentials` to configure this kind of authentication.\n\n```python\nimport httpx\nfrom httpx_auth import OAuth2ResourceOwnerPasswordCredentials\n\nwith httpx.Client() as client:\n    client.get('http://www.example.com', auth=OAuth2ResourceOwnerPasswordCredentials('https://www.token.url', 'user name', 'user password'))\n```\n\n#### Parameters\n\n| Name               | Description                                  | Mandatory | Default value |\n|:-------------------|:---------------------------------------------|:----------|:--------------|\n| `token_url`        | OAuth 2 token URL.                           | Mandatory |               |\n| `username`         | Resource owner user name.                    | Mandatory |               |\n| `password`         | Resource owner password.                     | Mandatory |               |\n| `timeout`          | Maximum amount of seconds to wait for a token to be received once requested. | Optional | 60            |\n| `header_name`      | Name of the header field used to send token. | Optional  | Authorization |\n| `header_value`     | Format used to send the token value. \"{token}\" must be present as it will be replaced by the actual token. | Optional | Bearer {token} |\n| `scope`            | Scope parameter sent to token URL as body. Can also be a list of scopes. | Optional |  |\n| `token_field_name` | Field name containing the token.             | Optional  | access_token  |\n\nAny other parameter will be put as body parameter in the token URL.\n\n### Client Credentials flow\n\nClient Credentials Grant is implemented following [rfc6749](https://tools.ietf.org/html/rfc6749#section-4.4).\n\nUse `httpx_auth.OAuth2ClientCredentials` to configure this kind of authentication.\n\n```python\nimport httpx\nfrom httpx_auth import OAuth2ClientCredentials\n\nwith httpx.Client() as client:\n    client.get('http://www.example.com', auth=OAuth2ClientCredentials('https://www.token.url', client_id='id', client_secret='secret'))\n```\n\n#### Parameters\n\n| Name               | Description                                  | Mandatory | Default value |\n|:-------------------|:---------------------------------------------|:----------|:--------------|\n| `token_url`        | OAuth 2 token URL.                           | Mandatory |               |\n| `client_id`         | Resource owner user name.                    | Mandatory |               |\n| `client_secret`         | Resource owner password.                     | Mandatory |               |\n| `timeout`          | Maximum amount of seconds to wait for a token to be received once requested. | Optional | 60            |\n| `header_name`      | Name of the header field used to send token. | Optional  | Authorization |\n| `header_value`     | Format used to send the token value. \"{token}\" must be present as it will be replaced by the actual token. | Optional | Bearer {token} |\n| `scope`            | Scope parameter sent to token URL as body. Can also be a list of scopes. | Optional |  |\n| `token_field_name` | Field name containing the token.             | Optional  | access_token  |\n\nAny other parameter will be put as body parameter in the token URL.\n\n#### Common providers\n\nMost of [OAuth2](https://oauth.net/2/) Client Credentials Grant providers are supported.\n\nIf the one you are looking for is not yet supported, feel free to [ask for its implementation](https://github.com/Colin-b/httpx_auth/issues/new).\n\n##### Okta (OAuth2 Client Credentials)\n\n[Okta Client Credentials Grant](https://developer.okta.com/docs/guides/implement-client-creds/overview/) providing access tokens is supported.\n\nUse `httpx_auth.OktaClientCredentials` to configure this kind of authentication.\n\n```python\nimport httpx\nfrom httpx_auth import OktaClientCredentials\n\n\nokta = OktaClientCredentials(instance='testserver.okta-emea.com', client_id='54239d18-c68c-4c47-8bdd-ce71ea1d50cd', client_secret=\"secret\")\nwith httpx.Client() as client:\n    client.get('http://www.example.com', auth=okta)\n```\n\n###### Parameters\n\n| Name                    | Description                | Mandatory | Default value |\n|:------------------------|:---------------------------|:----------|:--------------|\n| `instance`              | Okta instance (like \"testserver.okta-emea.com\"). | Mandatory |               |\n| `client_id`             | Okta Application Identifier (formatted as an Universal Unique Identifier). | Mandatory |               |\n| `client_secret`         | Resource owner password.                     | Mandatory |               |\n| `authorization_server`  | Okta authorization server. | Optional | 'default' |\n| `timeout`               | Maximum amount of seconds to wait for a token to be received once requested. | Optional | 60 |\n| `header_name`           | Name of the header field used to send token. | Optional | Authorization |\n| `header_value`          | Format used to send the token value. \"{token}\" must be present as it will be replaced by the actual token. | Optional | Bearer {token} |\n| `scope`                 | Scope parameter sent in query. Can also be a list of scopes. | Optional | openid |\n| `token_field_name`      | Field name containing the token. | Optional | access_token |\n\nAny other parameter will be put as query parameter in the token URL.        \n\n### Implicit flow\n\nImplicit Grant is implemented following [rfc6749](https://tools.ietf.org/html/rfc6749#section-4.2).\n\nUse `httpx_auth.OAuth2Implicit` to configure this kind of authentication.\n\n```python\nimport httpx\nfrom httpx_auth import OAuth2Implicit\n\nwith httpx.Client() as client:\n    client.get('http://www.example.com', auth=OAuth2Implicit('https://www.authorization.url'))\n```\n\n#### Parameters\n\n| Name                    | Description                | Mandatory | Default value |\n|:------------------------|:---------------------------|:----------|:--------------|\n| `authorization_url`     | OAuth 2 authorization URL. | Mandatory |               |\n| `response_type`         | Value of the response_type query parameter if not already provided in authorization URL. | Optional | token |\n| `token_field_name`      | Field name containing the token. | Optional | id_token if response_type is id_token, otherwise access_token |\n| `redirect_uri_endpoint` | Custom endpoint that will be used as redirect_uri the following way: http://localhost:<redirect_uri_port>/<redirect_uri_endpoint>. | Optional | ''             |\n| `redirect_uri_port`     | The port on which the server listening for the OAuth 2 token will be started. | Optional | 5000 |\n| `timeout`               | Maximum amount of seconds to wait for a token to be received once requested. | Optional | 60 |\n| `success_display_time`  | In case a token is successfully received, this is the maximum amount of milliseconds the success page will be displayed in your browser. | Optional | 1 |\n| `failure_display_time`  | In case received token is not valid, this is the maximum amount of milliseconds the failure page will be displayed in your browser. | Optional | 5000 |\n| `header_name`           | Name of the header field used to send token. | Optional | Authorization |\n| `header_value`          | Format used to send the token value. \"{token}\" must be present as it will be replaced by the actual token. | Optional | Bearer {token} |\n\nAny other parameter will be put as query parameter in the authorization URL.        \n\nUsual extra parameters are:\n\n| Name            | Description                                                          |\n|:----------------|:---------------------------------------------------------------------|\n| `client_id`     | Corresponding to your Application ID (in Microsoft Azure app portal) |\n| `nonce`         | Refer to [OpenID ID Token specifications][3] for more details        |\n| `prompt`        | none to avoid prompting the user if a session is already opened.     |\n\n#### Common providers\n\nMost of [OAuth2](https://oauth.net/2/) Implicit Grant providers are supported.\n\nIf the one you are looking for is not yet supported, feel free to [ask for its implementation](https://github.com/Colin-b/httpx_auth/issues/new).\n\n##### Microsoft - Azure Active Directory (OAuth2 Access Token)\n\n[Microsoft identity platform access tokens](https://docs.microsoft.com/en-us/azure/active-directory/develop/access-tokens) are supported.\n\nUse `httpx_auth.AzureActiveDirectoryImplicit` to configure this kind of authentication.\n\n```python\nimport httpx\nfrom httpx_auth import AzureActiveDirectoryImplicit\n\n\naad = AzureActiveDirectoryImplicit(tenant_id='45239d18-c68c-4c47-8bdd-ce71ea1d50cd', client_id='54239d18-c68c-4c47-8bdd-ce71ea1d50cd')\nwith httpx.Client() as client:\n    client.get('http://www.example.com', auth=aad)\n```\n\nYou can retrieve Microsoft Azure Active Directory application information thanks to the [application list on Azure portal](https://portal.azure.com/#blade/Microsoft_AAD_IAM/StartboardApplicationsMenuBlade/AllApps/menuId/).\n\n###### Parameters\n\n| Name                    | Description                | Mandatory | Default value |\n|:------------------------|:---------------------------|:----------|:--------------|\n| `tenant_id`             | Microsoft Tenant Identifier (formatted as an Universal Unique Identifier). | Mandatory |               |\n| `client_id`             | Microsoft Application Identifier (formatted as an Universal Unique Identifier). | Mandatory |               |\n| `response_type`         | Value of the response_type query parameter if not already provided in authorization URL. | Optional | token |\n| `token_field_name`      | Field name containing the token. | Optional | access_token |\n| `nonce`                 | Refer to [OpenID ID Token specifications][3] for more details | Optional | Newly generated Universal Unique Identifier. |\n| `redirect_uri_endpoint` | Custom endpoint that will be used as redirect_uri the following way: http://localhost:<redirect_uri_port>/<redirect_uri_endpoint>. | Optional | ''             |\n| `redirect_uri_port`     | The port on which the server listening for the OAuth 2 token will be started. | Optional | 5000 |\n| `timeout`               | Maximum amount of seconds to wait for a token to be received once requested. | Optional | 60 |\n| `success_display_time`  | In case a token is successfully received, this is the maximum amount of milliseconds the success page will be displayed in your browser. | Optional | 1 |\n| `failure_display_time`  | In case received token is not valid, this is the maximum amount of milliseconds the failure page will be displayed in your browser. | Optional | 5000 |\n| `header_name`           | Name of the header field used to send token. | Optional | Authorization |\n| `header_value`          | Format used to send the token value. \"{token}\" must be present as it will be replaced by the actual token. | Optional | Bearer {token} |\n\nAny other parameter will be put as query parameter in the authorization URL.        \n\nUsual extra parameters are:\n\n| Name            | Description                                                          |\n|:----------------|:---------------------------------------------------------------------|\n| `prompt`        | none to avoid prompting the user if a session is already opened.     |\n\n##### Microsoft - Azure Active Directory (OpenID Connect ID token)\n\n[Microsoft identity platform ID tokens](https://docs.microsoft.com/en-us/azure/active-directory/develop/id-tokens) are supported.\n\nUse `httpx_auth.AzureActiveDirectoryImplicitIdToken` to configure this kind of authentication.\n\n```python\nimport httpx\nfrom httpx_auth import AzureActiveDirectoryImplicitIdToken\n\n\naad = AzureActiveDirectoryImplicitIdToken(tenant_id='45239d18-c68c-4c47-8bdd-ce71ea1d50cd', client_id='54239d18-c68c-4c47-8bdd-ce71ea1d50cd')\nwith httpx.Client() as client:\n    client.get('http://www.example.com', auth=aad)\n```\n\nYou can retrieve Microsoft Azure Active Directory application information thanks to the [application list on Azure portal](https://portal.azure.com/#blade/Microsoft_AAD_IAM/StartboardApplicationsMenuBlade/AllApps/menuId/).\n\n###### Parameters\n\n| Name                    | Description                | Mandatory | Default value |\n|:------------------------|:---------------------------|:----------|:--------------|\n| `tenant_id`             | Microsoft Tenant Identifier (formatted as an Universal Unique Identifier). | Mandatory |               |\n| `client_id`             | Microsoft Application Identifier (formatted as an Universal Unique Identifier). | Mandatory |               |\n| `response_type`         | Value of the response_type query parameter if not already provided in authorization URL. | Optional | id_token |\n| `token_field_name`      | Field name containing the token. | Optional | id_token |\n| `nonce`                 | Refer to [OpenID ID Token specifications][3] for more details | Optional | Newly generated Universal Unique Identifier. |\n| `redirect_uri_endpoint` | Custom endpoint that will be used as redirect_uri the following way: http://localhost:<redirect_uri_port>/<redirect_uri_endpoint>. | Optional | ''             |\n| `redirect_uri_port`     | The port on which the server listening for the OAuth 2 token will be started. | Optional | 5000 |\n| `timeout`               | Maximum amount of seconds to wait for a token to be received once requested. | Optional | 60 |\n| `success_display_time`  | In case a token is successfully received, this is the maximum amount of milliseconds the success page will be displayed in your browser. | Optional | 1 |\n| `failure_display_time`  | In case received token is not valid, this is the maximum amount of milliseconds the failure page will be displayed in your browser. | Optional | 5000 |\n| `header_name`           | Name of the header field used to send token. | Optional | Authorization |\n| `header_value`          | Format used to send the token value. \"{token}\" must be present as it will be replaced by the actual token. | Optional | Bearer {token} |\n\nAny other parameter will be put as query parameter in the authorization URL.        \n\nUsual extra parameters are:\n\n| Name            | Description                                                          |\n|:----------------|:---------------------------------------------------------------------|\n| `prompt`        | none to avoid prompting the user if a session is already opened.     |\n\n##### Okta (OAuth2 Implicit Access Token)\n\n[Okta Implicit Grant](https://developer.okta.com/docs/guides/implement-implicit/overview/) providing access tokens is supported.\n\nUse `httpx_auth.OktaImplicit` to configure this kind of authentication.\n\n```python\nimport httpx\nfrom httpx_auth import OktaImplicit\n\n\nokta = OktaImplicit(instance='testserver.okta-emea.com', client_id='54239d18-c68c-4c47-8bdd-ce71ea1d50cd')\nwith httpx.Client() as client:\n    client.get('http://www.example.com', auth=okta)\n```\n\n###### Parameters\n\n| Name                    | Description                | Mandatory | Default value |\n|:------------------------|:---------------------------|:----------|:--------------|\n| `instance`              | Okta instance (like \"testserver.okta-emea.com\"). | Mandatory |               |\n| `client_id`             | Okta Application Identifier (formatted as an Universal Unique Identifier). | Mandatory |               |\n| `response_type`         | Value of the response_type query parameter if not already provided in authorization URL. | Optional | token |\n| `token_field_name`      | Field name containing the token. | Optional | access_token |\n| `nonce`                 | Refer to [OpenID ID Token specifications][3] for more details. | Optional | Newly generated Universal Unique Identifier. |\n| `scope`                 | Scope parameter sent in query. Can also be a list of scopes. | Optional | ['openid', 'profile', 'email'] |\n| `authorization_server`  | Okta authorization server. | Optional | 'default' |\n| `redirect_uri_endpoint` | Custom endpoint that will be used as redirect_uri the following way: http://localhost:<redirect_uri_port>/<redirect_uri_endpoint>. | Optional | ''             |\n| `redirect_uri_port`     | The port on which the server listening for the OAuth 2 token will be started. | Optional | 5000 |\n| `timeout`               | Maximum amount of seconds to wait for a token to be received once requested. | Optional | 60 |\n| `success_display_time`  | In case a token is successfully received, this is the maximum amount of milliseconds the success page will be displayed in your browser. | Optional | 1 |\n| `failure_display_time`  | In case received token is not valid, this is the maximum amount of milliseconds the failure page will be displayed in your browser. | Optional | 5000 |\n| `header_name`           | Name of the header field used to send token. | Optional | Authorization |\n| `header_value`          | Format used to send the token value. \"{token}\" must be present as it will be replaced by the actual token. | Optional | Bearer {token} |\n\nAny other parameter will be put as query parameter in the authorization URL.        \n\nUsual extra parameters are:\n\n| Name            | Description                                                          |\n|:----------------|:---------------------------------------------------------------------|\n| `prompt`        | none to avoid prompting the user if a session is already opened.     |\n\n##### Okta (OpenID Connect Implicit ID token)\n\n[Okta Implicit Grant](https://developer.okta.com/docs/guides/implement-implicit/overview/) providing ID tokens is supported.\n\nUse `httpx_auth.OktaImplicitIdToken` to configure this kind of authentication.\n\n```python\nimport httpx\nfrom httpx_auth import OktaImplicitIdToken\n\n\nokta = OktaImplicitIdToken(instance='testserver.okta-emea.com', client_id='54239d18-c68c-4c47-8bdd-ce71ea1d50cd')\nwith httpx.Client() as client:\n    client.get('http://www.example.com', auth=okta)\n```\n\n###### Parameters\n\n| Name                    | Description                | Mandatory | Default value |\n|:------------------------|:---------------------------|:----------|:--------------|\n| `instance`              | Okta instance (like \"testserver.okta-emea.com\"). | Mandatory |               |\n| `client_id`             | Okta Application Identifier (formatted as an Universal Unique Identifier). | Mandatory |               |\n| `response_type`         | Value of the response_type query parameter if not already provided in authorization URL. | Optional | id_token |\n| `token_field_name`      | Field name containing the token. | Optional | id_token |\n| `nonce`                 | Refer to [OpenID ID Token specifications][3] for more details. | Optional | Newly generated Universal Unique Identifier. |\n| `scope`                 | Scope parameter sent in query. Can also be a list of scopes. | Optional | ['openid', 'profile', 'email'] |\n| `authorization_server`  | Okta authorization server. | Optional | 'default' |\n| `redirect_uri_endpoint` | Custom endpoint that will be used as redirect_uri the following way: http://localhost:<redirect_uri_port>/<redirect_uri_endpoint>. | Optional | ''             |\n| `redirect_uri_port`     | The port on which the server listening for the OAuth 2 token will be started. | Optional | 5000 |\n| `timeout`               | Maximum amount of seconds to wait for a token to be received once requested. | Optional | 60 |\n| `success_display_time`  | In case a token is successfully received, this is the maximum amount of milliseconds the success page will be displayed in your browser. | Optional | 1 |\n| `failure_display_time`  | In case received token is not valid, this is the maximum amount of milliseconds the failure page will be displayed in your browser. | Optional | 5000 |\n| `header_name`           | Name of the header field used to send token. | Optional | Authorization |\n| `header_value`          | Format used to send the token value. \"{token}\" must be present as it will be replaced by the actual token. | Optional | Bearer {token} |\n\nAny other parameter will be put as query parameter in the authorization URL.        \n\nUsual extra parameters are:\n\n| Name            | Description                                                          |\n|:----------------|:---------------------------------------------------------------------|\n| `prompt`        | none to avoid prompting the user if a session is already opened.     |\n\n### Managing token cache\n\nTo avoid asking for a new token every new request, a token cache is used.\n\nDefault cache is in memory but it is also possible to use a physical cache.\n\nYou need to provide the location of your token cache file. It can be a full or relative path.\n\nIf the file already exists it will be used, if the file do not exists it will be created.\n\n```python\nfrom httpx_auth import OAuth2, JsonTokenFileCache\n\nOAuth2.token_cache = JsonTokenFileCache('path/to/my_token_cache.json')\n```\n\n## API key in header\n\nYou can send an API key inside the header of your request using `httpx_auth.HeaderApiKey`.\n\n```python\nimport httpx\nfrom httpx_auth import HeaderApiKey\n\nwith httpx.Client() as client:\n    client.get('http://www.example.com', auth=HeaderApiKey('my_api_key'))\n```\n\n### Parameters\n\n| Name                    | Description                    | Mandatory | Default value |\n|:------------------------|:-------------------------------|:----------|:--------------|\n| `api_key`               | The API key that will be sent. | Mandatory |               |\n| `header_name`           | Name of the header field.      | Optional  | \"X-API-Key\"   |\n\n## API key in query\n\nYou can send an API key inside the query parameters of your request using `httpx_auth.QueryApiKey`.\n\n```python\nimport httpx\nfrom httpx_auth import QueryApiKey\n\nwith httpx.Client() as client:\n    client.get('http://www.example.com', auth=QueryApiKey('my_api_key'))\n```\n\n### Parameters\n\n| Name                    | Description                    | Mandatory | Default value |\n|:------------------------|:-------------------------------|:----------|:--------------|\n| `api_key`               | The API key that will be sent. | Mandatory |               |\n| `query_parameter_name`  | Name of the query parameter.   | Optional  | \"api_key\"     |\n\n## Basic\n\nYou can use basic authentication using `httpx_auth.Basic`.\n\nThe only advantage of using this class instead of `httpx` native support of basic authentication, is to be able to use it in [multiple authentication](#multiple-authentication-at-once).\n\n```python\nimport httpx\nfrom httpx_auth import Basic\n\nwith httpx.Client() as client:\n    client.get('http://www.example.com', auth=Basic('username', 'password'))\n```\n\n### Parameters\n\n| Name                    | Description                    | Mandatory | Default value |\n|:------------------------|:-------------------------------|:----------|:--------------|\n| `username`              | User name.                     | Mandatory |               |\n| `password`              | User password.                 | Mandatory |               |\n\n## Multiple authentication at once\n\nYou can also use a combination of authentication using `+` as in the following sample:\n\n```python\nimport httpx\nfrom httpx_auth import HeaderApiKey, OAuth2Implicit\n\napi_key = HeaderApiKey('my_api_key')\noauth2 = OAuth2Implicit('https://www.example.com')\nwith httpx.Client() as client:\n    client.get('http://www.example.com', auth=api_key + oauth2)\n```\n\n## Available pytest fixtures\n\nTesting the code using httpx_auth authentication classes can be achieved using provided [`pytest`][6] fixtures.\n\n### token_cache_mock\n\n```python\nfrom httpx_auth.testing import token_cache_mock, token_mock\n\ndef test_something(token_cache_mock):\n    # perform code using authentication\n    pass\n```\n\nUse this fixture to mock authentication success for any of the following classes:\n * OAuth2AuthorizationCodePKCE\n * OktaAuthorizationCodePKCE\n * OAuth2Implicit\n * OktaImplicit\n * OktaImplicitIdToken\n * AzureActiveDirectoryImplicit\n * AzureActiveDirectoryImplicitIdToken\n * OAuth2AuthorizationCode\n * OktaAuthorizationCode\n * OAuth2ClientCredentials\n * OktaClientCredentials\n * OAuth2ResourceOwnerPasswordCredentials,\n\nBy default, [`pyjwt`](https://pypi.org/project/PyJWT/) is a required dependency as it is used to generate the token returned by the authentication.\n\nYou can however return your custom token by providing your own `token_mock` fixture as in the following sample:\n\n```python\nimport pytest\n\nfrom httpx_auth.testing import token_cache_mock\n\n\n@pytest.fixture\ndef token_mock() -> str:\n    return \"2YotnFZFEjr1zCsicMWpAA\"\n\n\ndef test_something(token_cache_mock):\n    # perform code using authentication\n    pass\n```\n\n### Advanced testing\n\n#### token_cache\n\nThis [`pytest`][6] fixture will return the token cache and ensure it is reset at the end of the test case.\n\n```python\nfrom httpx_auth.testing import token_cache\n\ndef test_something(token_cache):\n    # perform code using authentication\n    pass\n```\n\n#### browser_mock\n\nThis [`pytest`][6] fixture will allow to mock the behavior of a web browser.\n\nWith this [`pytest`][6] fixture you will be allowed to fine tune your authentication related failures handling.\n\n[`pyjwt`](https://pypi.org/project/PyJWT/) is a required dependency if you use `create_token` helper function.\n\n```python\nimport datetime\n\nfrom httpx_auth.testing import browser_mock, BrowserMock, create_token\n\ndef test_something(browser_mock: BrowserMock):\n    token_expiry = datetime.datetime.utcnow() + datetime.timedelta(hours=1)\n    token = create_token(token_expiry)\n    tab = browser_mock.add_response(\n        opened_url=\"http://url_opened_by_browser?state=1234\",\n        reply_url=f\"http://localhost:5000#access_token={token}&state=1234\",\n    )\n\n    # perform code using authentication\n\n    tab.assert_success(\n        \"You are now authenticated on 1234 You may close this tab.\"\n    )\n```\n\n[1]: https://pypi.python.org/pypi/httpx \"httpx module\"\n[2]: https://www.python-httpx.org/advanced/#customizing-authentication \"authentication parameter on httpx module\"\n[3]: http://openid.net/specs/openid-connect-core-1_0.html#IDToken \"OpenID ID Token specifications\"\n[6]: https://docs.pytest.org/en/latest/ \"pytest module\"\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://pypi.org/project/httpx-auth/", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://colin-b.github.io/httpx_auth/", "keywords": "authentication", "license": "MIT", "maintainer": "Colin Bounouar", "maintainer_email": "colin.bounouar.dev@gmail.com", "name": "httpx-auth", "package_url": "https://pypi.org/project/httpx-auth/", "platform": "Windows", "project_url": "https://pypi.org/project/httpx-auth/", "project_urls": {"Changelog": "https://github.com/Colin-b/httpx_auth/blob/master/CHANGELOG.md", "Download": "https://pypi.org/project/httpx-auth/", "GitHub": "https://github.com/Colin-b/httpx_auth", "Homepage": "https://colin-b.github.io/httpx_auth/", "Issues": "https://github.com/Colin-b/httpx_auth/issues"}, "release_url": "https://pypi.org/project/httpx-auth/0.2.0/", "requires_dist": ["httpx (==0.12.*)", "pyjwt (==1.*) ; extra == 'testing'", "pytest-httpx (==0.2.*) ; extra == 'testing'", "pytest-cov (==2.*) ; extra == 'testing'"], "requires_python": ">=3.6", "summary": "Authentication for HTTPX", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>Authentication for HTTPX</h2>\n<p align=\"center\">\n<a href=\"https://pypi.org/project/httpx-auth/\" rel=\"nofollow\"><img alt=\"pypi version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b25f568a460484ccc0d5a7107e9af7a92c67d10f/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f68747470785f61757468\"></a>\n<a href=\"https://travis-ci.com/Colin-b/httpx_auth\" rel=\"nofollow\"><img alt=\"Build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1472eac6de0e1d3866a9fb30a9dca1a2e9365497/68747470733a2f2f6170692e7472617669732d63692e636f6d2f436f6c696e2d622f68747470785f617574682e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://travis-ci.com/Colin-b/httpx_auth\" rel=\"nofollow\"><img alt=\"Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0280f255d36847e3743058a68bedfb93626e993f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f7665726167652d3130302532352d627269676874677265656e\"></a>\n<a href=\"https://github.com/psf/black\" rel=\"nofollow\"><img alt=\"Code style: black\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbfdc7754183ecf079bc71ddeabaf88f6cbc5c00/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667\"></a>\n<a href=\"https://travis-ci.com/Colin-b/httpx_auth\" rel=\"nofollow\"><img alt=\"Number of tests\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e5b80dcbfef64a714dfbfe0dca936d1a23dc13e0/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f74657374732d323336207061737365642d626c7565\"></a>\n<a href=\"https://pypi.org/project/httpx-auth/\" rel=\"nofollow\"><img alt=\"Number of downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1857ae7aca39232348caf1e7c48e74b4441defd2/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f68747470785f61757468\"></a>\n</p>\n<blockquote>\n<p>Version 1.0.0 will be released once httpx is considered as stable (release of 1.0.0).</p>\n<p>However current state can be considered as stable.</p>\n</blockquote>\n<p>Provides authentication classes to be used with <a href=\"https://pypi.python.org/pypi/httpx\" rel=\"nofollow\" title=\"httpx module\"><code>httpx</code></a> <a href=\"https://www.python-httpx.org/advanced/#customizing-authentication\" rel=\"nofollow\" title=\"authentication parameter on httpx module\">authentication parameter</a>.</p>\n<p align=\"center\">\n    <a href=\"https://oauth.net/2/\" rel=\"nofollow\"><img alt=\"OAuth2\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbbaa6422fda59f34b1cc710137b905c91570a45/68747470733a2f2f6f617574682e6e65742f696d616765732f6f617574682d322d736d2e706e67\"></a>\n    <a href=\"https://www.okta.com\" rel=\"nofollow\"><img alt=\"Okta\" height=\"120\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4a2ada7743973706f6d2847fb71adb84c2850590/68747470733a2f2f7777772e6f6b74612e636f6d2f73697465732f616c6c2f7468656d65732f4f6b74612f696d616765732f6c6f676f732f646576656c6f7065722f4465765f4c6f676f2d30335f4c617267652e706e67\"></a>\n    <a href=\"https://azure.microsoft.com/en-us/services/active-directory/\" rel=\"nofollow\"><img alt=\"Azure Active Directory (AD)\" height=\"120\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3783e75a37568a6ce60f6451feb243e82f718741/68747470733a2f2f617a757265636f6d63646e2e617a757265656467652e6e65742f6376742d636461353963636430616135636564366666356132303532343137636635393662393239383039323165383865363637313237656163613232333261333161622f696d616765732f7368617265642f73657276696365732f70726963696e672d676c7970682d6c6f636b2e737667\"></a>\n</p>\n<p align=\"center\">Some of the supported authentication</p>\n<h2>Available authentication</h2>\n<ul>\n<li><a href=\"#oauth-2\" rel=\"nofollow\">OAuth2</a>\n<ul>\n<li><a href=\"#authorization-code-flow\" rel=\"nofollow\">Authorization Code Flow</a>\n<ul>\n<li><a href=\"#okta-oauth2-authorization-code\" rel=\"nofollow\">Okta</a></li>\n</ul>\n</li>\n<li><a href=\"#authorization-code-flow-with-proof-key-for-code-exchange\" rel=\"nofollow\">Authorization Code Flow with PKCE</a>\n<ul>\n<li><a href=\"#okta-oauth2-proof-key-for-code-exchange\" rel=\"nofollow\">Okta</a></li>\n</ul>\n</li>\n<li><a href=\"#resource-owner-password-credentials-flow\" rel=\"nofollow\">Resource Owner Password Credentials flow</a></li>\n<li><a href=\"#client-credentials-flow\" rel=\"nofollow\">Client Credentials Flow</a>\n<ul>\n<li><a href=\"#okta-oauth2-client-credentials\" rel=\"nofollow\">Okta</a></li>\n</ul>\n</li>\n<li><a href=\"#implicit-flow\" rel=\"nofollow\">Implicit Flow</a>\n<ul>\n<li><a href=\"#microsoft---azure-active-directory-oauth2-access-token\" rel=\"nofollow\">Azure AD (Access Token)</a></li>\n<li><a href=\"#microsoft---azure-active-directory-openid-connect-id-token\" rel=\"nofollow\">Azure AD (ID token)</a></li>\n<li><a href=\"#okta-oauth2-implicit-access-token\" rel=\"nofollow\">Okta (Access Token)</a></li>\n<li><a href=\"#okta-openid-connect-implicit-id-token\" rel=\"nofollow\">Okta (ID token)</a></li>\n</ul>\n</li>\n<li><a href=\"#managing-token-cache\" rel=\"nofollow\">Managing token cache</a></li>\n</ul>\n</li>\n<li>API key\n<ul>\n<li><a href=\"#api-key-in-header\" rel=\"nofollow\">In header</a></li>\n<li><a href=\"#api-key-in-query\" rel=\"nofollow\">In query</a></li>\n</ul>\n</li>\n<li><a href=\"#basic\" rel=\"nofollow\">Basic</a></li>\n<li><a href=\"#multiple-authentication-at-once\" rel=\"nofollow\">Multiple authentication at once</a></li>\n</ul>\n<h2>OAuth 2</h2>\n<p>Most of <a href=\"https://oauth.net/2/\" rel=\"nofollow\">OAuth2</a> flows are supported.</p>\n<p>If the one you are looking for is not yet supported, feel free to <a href=\"https://github.com/Colin-b/httpx_auth/issues/new\" rel=\"nofollow\">ask for its implementation</a>.</p>\n<h3>Authorization Code flow</h3>\n<p>Authorization Code Grant is implemented following <a href=\"https://tools.ietf.org/html/rfc6749#section-4.1\" rel=\"nofollow\">rfc6749</a>.</p>\n<p>Use <code>httpx_auth.OAuth2AuthorizationCode</code> to configure this kind of authentication.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">httpx</span>\n<span class=\"kn\">from</span> <span class=\"nn\">httpx_auth</span> <span class=\"kn\">import</span> <span class=\"n\">OAuth2AuthorizationCode</span>\n\n<span class=\"k\">with</span> <span class=\"n\">httpx</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'http://www.example.com'</span><span class=\"p\">,</span> <span class=\"n\">auth</span><span class=\"o\">=</span><span class=\"n\">OAuth2AuthorizationCode</span><span class=\"p\">(</span><span class=\"s1\">'https://www.authorization.url'</span><span class=\"p\">,</span> <span class=\"s1\">'https://www.token.url'</span><span class=\"p\">))</span>\n</pre>\n<h4>Parameters</h4>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Name</th>\n<th align=\"left\">Description</th>\n<th align=\"left\">Mandatory</th>\n<th align=\"left\">Default value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>authorization_url</code></td>\n<td align=\"left\">OAuth 2 authorization URL.</td>\n<td align=\"left\">Mandatory</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>token_url</code></td>\n<td align=\"left\">OAuth 2 token URL.</td>\n<td align=\"left\">Mandatory</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>redirect_uri_endpoint</code></td>\n<td align=\"left\">Custom endpoint that will be used as redirect_uri the following way: <a href=\"http://localhost\" rel=\"nofollow\">http://localhost</a>:&lt;redirect_uri_port&gt;/&lt;redirect_uri_endpoint&gt;.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">''</td>\n</tr>\n<tr>\n<td align=\"left\"><code>redirect_uri_port</code></td>\n<td align=\"left\">The port on which the server listening for the OAuth 2 code will be started.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">5000</td>\n</tr>\n<tr>\n<td align=\"left\"><code>timeout</code></td>\n<td align=\"left\">Maximum amount of seconds to wait for a code or a token to be received once requested.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">60</td>\n</tr>\n<tr>\n<td align=\"left\"><code>success_display_time</code></td>\n<td align=\"left\">In case a code is successfully received, this is the maximum amount of milliseconds the success page will be displayed in your browser.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">1</td>\n</tr>\n<tr>\n<td align=\"left\"><code>failure_display_time</code></td>\n<td align=\"left\">In case received code is not valid, this is the maximum amount of milliseconds the failure page will be displayed in your browser.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">5000</td>\n</tr>\n<tr>\n<td align=\"left\"><code>header_name</code></td>\n<td align=\"left\">Name of the header field used to send token.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">Authorization</td>\n</tr>\n<tr>\n<td align=\"left\"><code>header_value</code></td>\n<td align=\"left\">Format used to send the token value. \"{token}\" must be present as it will be replaced by the actual token.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">Bearer {token}</td>\n</tr>\n<tr>\n<td align=\"left\"><code>response_type</code></td>\n<td align=\"left\">Value of the response_type query parameter if not already provided in authorization URL.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">code</td>\n</tr>\n<tr>\n<td align=\"left\"><code>token_field_name</code></td>\n<td align=\"left\">Field name containing the token.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">access_token</td>\n</tr>\n<tr>\n<td align=\"left\"><code>code_field_name</code></td>\n<td align=\"left\">Field name containing the code.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">code</td>\n</tr>\n<tr>\n<td align=\"left\"><code>username</code></td>\n<td align=\"left\">User name in case basic authentication should be used to retrieve token.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>password</code></td>\n<td align=\"left\">User password in case basic authentication should be used to retrieve token.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\"></td>\n</tr></tbody></table>\n<p>Any other parameter will be put as query parameter in the authorization URL and as body parameters in the token URL.</p>\n<p>Usual extra parameters are:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Name</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>client_id</code></td>\n<td align=\"left\">Corresponding to your Application ID (in Microsoft Azure app portal)</td>\n</tr>\n<tr>\n<td align=\"left\"><code>client_secret</code></td>\n<td align=\"left\">If client is not authenticated with the authorization server</td>\n</tr>\n<tr>\n<td align=\"left\"><code>nonce</code></td>\n<td align=\"left\">Refer to <a href=\"http://openid.net/specs/openid-connect-core-1_0.html#IDToken\" rel=\"nofollow\" title=\"OpenID ID Token specifications\">OpenID ID Token specifications</a> for more details</td>\n</tr></tbody></table>\n<h4>Common providers</h4>\n<p>Most of <a href=\"https://oauth.net/2/\" rel=\"nofollow\">OAuth2</a> Authorization Code Grant providers are supported.</p>\n<p>If the one you are looking for is not yet supported, feel free to <a href=\"https://github.com/Colin-b/httpx_auth/issues/new\" rel=\"nofollow\">ask for its implementation</a>.</p>\n<h5>Okta (OAuth2 Authorization Code)</h5>\n<p><a href=\"https://developer.okta.com/docs/guides/implement-auth-code/overview/\" rel=\"nofollow\">Okta Authorization Code Grant</a> providing access tokens is supported.</p>\n<p>Use <code>httpx_auth.OktaAuthorizationCode</code> to configure this kind of authentication.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">httpx</span>\n<span class=\"kn\">from</span> <span class=\"nn\">httpx_auth</span> <span class=\"kn\">import</span> <span class=\"n\">OktaAuthorizationCode</span>\n\n\n<span class=\"n\">okta</span> <span class=\"o\">=</span> <span class=\"n\">OktaAuthorizationCode</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"o\">=</span><span class=\"s1\">'testserver.okta-emea.com'</span><span class=\"p\">,</span> <span class=\"n\">client_id</span><span class=\"o\">=</span><span class=\"s1\">'54239d18-c68c-4c47-8bdd-ce71ea1d50cd'</span><span class=\"p\">)</span>\n<span class=\"k\">with</span> <span class=\"n\">httpx</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'http://www.example.com'</span><span class=\"p\">,</span> <span class=\"n\">auth</span><span class=\"o\">=</span><span class=\"n\">okta</span><span class=\"p\">)</span>\n</pre>\n<h6>Parameters</h6>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Name</th>\n<th align=\"left\">Description</th>\n<th align=\"left\">Mandatory</th>\n<th align=\"left\">Default value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>instance</code></td>\n<td align=\"left\">Okta instance (like \"testserver.okta-emea.com\").</td>\n<td align=\"left\">Mandatory</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>client_id</code></td>\n<td align=\"left\">Okta Application Identifier (formatted as an Universal Unique Identifier).</td>\n<td align=\"left\">Mandatory</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>response_type</code></td>\n<td align=\"left\">Value of the response_type query parameter if not already provided in authorization URL.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">token</td>\n</tr>\n<tr>\n<td align=\"left\"><code>token_field_name</code></td>\n<td align=\"left\">Field name containing the token.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">access_token</td>\n</tr>\n<tr>\n<td align=\"left\"><code>nonce</code></td>\n<td align=\"left\">Refer to <a href=\"http://openid.net/specs/openid-connect-core-1_0.html#IDToken\" rel=\"nofollow\" title=\"OpenID ID Token specifications\">OpenID ID Token specifications</a> for more details.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">Newly generated Universal Unique Identifier.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>scope</code></td>\n<td align=\"left\">Scope parameter sent in query. Can also be a list of scopes.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">openid</td>\n</tr>\n<tr>\n<td align=\"left\"><code>authorization_server</code></td>\n<td align=\"left\">Okta authorization server.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">'default'</td>\n</tr>\n<tr>\n<td align=\"left\"><code>redirect_uri_endpoint</code></td>\n<td align=\"left\">Custom endpoint that will be used as redirect_uri the following way: <a href=\"http://localhost\" rel=\"nofollow\">http://localhost</a>:&lt;redirect_uri_port&gt;/&lt;redirect_uri_endpoint&gt;.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">''</td>\n</tr>\n<tr>\n<td align=\"left\"><code>redirect_uri_port</code></td>\n<td align=\"left\">The port on which the server listening for the OAuth 2 token will be started.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">5000</td>\n</tr>\n<tr>\n<td align=\"left\"><code>timeout</code></td>\n<td align=\"left\">Maximum amount of seconds to wait for a token to be received once requested.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">60</td>\n</tr>\n<tr>\n<td align=\"left\"><code>success_display_time</code></td>\n<td align=\"left\">In case a token is successfully received, this is the maximum amount of milliseconds the success page will be displayed in your browser.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">1</td>\n</tr>\n<tr>\n<td align=\"left\"><code>failure_display_time</code></td>\n<td align=\"left\">In case received token is not valid, this is the maximum amount of milliseconds the failure page will be displayed in your browser.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">5000</td>\n</tr>\n<tr>\n<td align=\"left\"><code>header_name</code></td>\n<td align=\"left\">Name of the header field used to send token.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">Authorization</td>\n</tr>\n<tr>\n<td align=\"left\"><code>header_value</code></td>\n<td align=\"left\">Format used to send the token value. \"{token}\" must be present as it will be replaced by the actual token.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">Bearer {token}</td>\n</tr></tbody></table>\n<p>Any other parameter will be put as query parameter in the authorization URL.</p>\n<p>Usual extra parameters are:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Name</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>prompt</code></td>\n<td align=\"left\">none to avoid prompting the user if a session is already opened.</td>\n</tr></tbody></table>\n<h3>Authorization Code Flow with Proof Key for Code Exchange</h3>\n<p>Proof Key for Code Exchange is implemented following <a href=\"https://tools.ietf.org/html/rfc7636\" rel=\"nofollow\">rfc7636</a>.</p>\n<p>Use <code>httpx_auth.OAuth2AuthorizationCodePKCE</code> to configure this kind of authentication.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">httpx</span>\n<span class=\"kn\">from</span> <span class=\"nn\">httpx_auth</span> <span class=\"kn\">import</span> <span class=\"n\">OAuth2AuthorizationCodePKCE</span>\n\n<span class=\"k\">with</span> <span class=\"n\">httpx</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'http://www.example.com'</span><span class=\"p\">,</span> <span class=\"n\">auth</span><span class=\"o\">=</span><span class=\"n\">OAuth2AuthorizationCodePKCE</span><span class=\"p\">(</span><span class=\"s1\">'https://www.authorization.url'</span><span class=\"p\">,</span> <span class=\"s1\">'https://www.token.url'</span><span class=\"p\">))</span>\n</pre>\n<h4>Parameters</h4>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Name</th>\n<th align=\"left\">Description</th>\n<th align=\"left\">Mandatory</th>\n<th align=\"left\">Default value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>authorization_url</code></td>\n<td align=\"left\">OAuth 2 authorization URL.</td>\n<td align=\"left\">Mandatory</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>token_url</code></td>\n<td align=\"left\">OAuth 2 token URL.</td>\n<td align=\"left\">Mandatory</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>redirect_uri_endpoint</code></td>\n<td align=\"left\">Custom endpoint that will be used as redirect_uri the following way: <a href=\"http://localhost\" rel=\"nofollow\">http://localhost</a>:&lt;redirect_uri_port&gt;/&lt;redirect_uri_endpoint&gt;.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">''</td>\n</tr>\n<tr>\n<td align=\"left\"><code>redirect_uri_port</code></td>\n<td align=\"left\">The port on which the server listening for the OAuth 2 code will be started.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">5000</td>\n</tr>\n<tr>\n<td align=\"left\"><code>timeout</code></td>\n<td align=\"left\">Maximum amount of seconds to wait for a code or a token to be received once requested.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">60</td>\n</tr>\n<tr>\n<td align=\"left\"><code>success_display_time</code></td>\n<td align=\"left\">In case a code is successfully received, this is the maximum amount of milliseconds the success page will be displayed in your browser.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">1</td>\n</tr>\n<tr>\n<td align=\"left\"><code>failure_display_time</code></td>\n<td align=\"left\">In case received code is not valid, this is the maximum amount of milliseconds the failure page will be displayed in your browser.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">5000</td>\n</tr>\n<tr>\n<td align=\"left\"><code>header_name</code></td>\n<td align=\"left\">Name of the header field used to send token.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">Authorization</td>\n</tr>\n<tr>\n<td align=\"left\"><code>header_value</code></td>\n<td align=\"left\">Format used to send the token value. \"{token}\" must be present as it will be replaced by the actual token.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">Bearer {token}</td>\n</tr>\n<tr>\n<td align=\"left\"><code>response_type</code></td>\n<td align=\"left\">Value of the response_type query parameter if not already provided in authorization URL.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">code</td>\n</tr>\n<tr>\n<td align=\"left\"><code>token_field_name</code></td>\n<td align=\"left\">Field name containing the token.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">access_token</td>\n</tr>\n<tr>\n<td align=\"left\"><code>code_field_name</code></td>\n<td align=\"left\">Field name containing the code.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">code</td>\n</tr></tbody></table>\n<p>Any other parameter will be put as query parameter in the authorization URL and as body parameters in the token URL.</p>\n<p>Usual extra parameters are:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Name</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>client_id</code></td>\n<td align=\"left\">Corresponding to your Application ID (in Microsoft Azure app portal)</td>\n</tr>\n<tr>\n<td align=\"left\"><code>client_secret</code></td>\n<td align=\"left\">If client is not authenticated with the authorization server</td>\n</tr>\n<tr>\n<td align=\"left\"><code>nonce</code></td>\n<td align=\"left\">Refer to <a href=\"http://openid.net/specs/openid-connect-core-1_0.html#IDToken\" rel=\"nofollow\" title=\"OpenID ID Token specifications\">OpenID ID Token specifications</a> for more details</td>\n</tr></tbody></table>\n<h4>Common providers</h4>\n<p>Most of <a href=\"https://oauth.net/2/\" rel=\"nofollow\">OAuth2</a> Proof Key for Code Exchange providers are supported.</p>\n<p>If the one you are looking for is not yet supported, feel free to <a href=\"https://github.com/Colin-b/httpx_auth/issues/new\" rel=\"nofollow\">ask for its implementation</a>.</p>\n<h5>Okta (OAuth2 Proof Key for Code Exchange)</h5>\n<p><a href=\"https://developer.okta.com/docs/guides/implement-auth-code-pkce/overview/\" rel=\"nofollow\">Okta Proof Key for Code Exchange</a> providing access tokens is supported.</p>\n<p>Use <code>httpx_auth.OktaAuthorizationCodePKCE</code> to configure this kind of authentication.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">httpx</span>\n<span class=\"kn\">from</span> <span class=\"nn\">httpx_auth</span> <span class=\"kn\">import</span> <span class=\"n\">OktaAuthorizationCodePKCE</span>\n\n\n<span class=\"n\">okta</span> <span class=\"o\">=</span> <span class=\"n\">OktaAuthorizationCodePKCE</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"o\">=</span><span class=\"s1\">'testserver.okta-emea.com'</span><span class=\"p\">,</span> <span class=\"n\">client_id</span><span class=\"o\">=</span><span class=\"s1\">'54239d18-c68c-4c47-8bdd-ce71ea1d50cd'</span><span class=\"p\">)</span>\n<span class=\"k\">with</span> <span class=\"n\">httpx</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'http://www.example.com'</span><span class=\"p\">,</span> <span class=\"n\">auth</span><span class=\"o\">=</span><span class=\"n\">okta</span><span class=\"p\">)</span>\n</pre>\n<h6>Parameters</h6>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Name</th>\n<th align=\"left\">Description</th>\n<th align=\"left\">Mandatory</th>\n<th align=\"left\">Default value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>instance</code></td>\n<td align=\"left\">Okta instance (like \"testserver.okta-emea.com\").</td>\n<td align=\"left\">Mandatory</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>client_id</code></td>\n<td align=\"left\">Okta Application Identifier (formatted as an Universal Unique Identifier).</td>\n<td align=\"left\">Mandatory</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>response_type</code></td>\n<td align=\"left\">Value of the response_type query parameter if not already provided in authorization URL.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">code</td>\n</tr>\n<tr>\n<td align=\"left\"><code>token_field_name</code></td>\n<td align=\"left\">Field name containing the token.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">access_token</td>\n</tr>\n<tr>\n<td align=\"left\"><code>code_field_name</code></td>\n<td align=\"left\">Field name containing the code.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">code</td>\n</tr>\n<tr>\n<td align=\"left\"><code>nonce</code></td>\n<td align=\"left\">Refer to <a href=\"http://openid.net/specs/openid-connect-core-1_0.html#IDToken\" rel=\"nofollow\" title=\"OpenID ID Token specifications\">OpenID ID Token specifications</a> for more details.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">Newly generated Universal Unique Identifier.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>scope</code></td>\n<td align=\"left\">Scope parameter sent in query. Can also be a list of scopes.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">openid</td>\n</tr>\n<tr>\n<td align=\"left\"><code>authorization_server</code></td>\n<td align=\"left\">Okta authorization server.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">'default'</td>\n</tr>\n<tr>\n<td align=\"left\"><code>redirect_uri_endpoint</code></td>\n<td align=\"left\">Custom endpoint that will be used as redirect_uri the following way: <a href=\"http://localhost\" rel=\"nofollow\">http://localhost</a>:&lt;redirect_uri_port&gt;/&lt;redirect_uri_endpoint&gt;.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">''</td>\n</tr>\n<tr>\n<td align=\"left\"><code>redirect_uri_port</code></td>\n<td align=\"left\">The port on which the server listening for the OAuth 2 token will be started.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">5000</td>\n</tr>\n<tr>\n<td align=\"left\"><code>timeout</code></td>\n<td align=\"left\">Maximum amount of seconds to wait for a token to be received once requested.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">60</td>\n</tr>\n<tr>\n<td align=\"left\"><code>success_display_time</code></td>\n<td align=\"left\">In case a token is successfully received, this is the maximum amount of milliseconds the success page will be displayed in your browser.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">1</td>\n</tr>\n<tr>\n<td align=\"left\"><code>failure_display_time</code></td>\n<td align=\"left\">In case received token is not valid, this is the maximum amount of milliseconds the failure page will be displayed in your browser.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">5000</td>\n</tr>\n<tr>\n<td align=\"left\"><code>header_name</code></td>\n<td align=\"left\">Name of the header field used to send token.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">Authorization</td>\n</tr>\n<tr>\n<td align=\"left\"><code>header_value</code></td>\n<td align=\"left\">Format used to send the token value. \"{token}\" must be present as it will be replaced by the actual token.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">Bearer {token}</td>\n</tr></tbody></table>\n<p>Any other parameter will be put as query parameter in the authorization URL and as body parameters in the token URL.</p>\n<p>Usual extra parameters are:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Name</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>client_secret</code></td>\n<td align=\"left\">If client is not authenticated with the authorization server</td>\n</tr>\n<tr>\n<td align=\"left\"><code>nonce</code></td>\n<td align=\"left\">Refer to <a href=\"http://openid.net/specs/openid-connect-core-1_0.html#IDToken\" rel=\"nofollow\">http://openid.net/specs/openid-connect-core-1_0.html#IDToken</a> for more details</td>\n</tr></tbody></table>\n<h3>Resource Owner Password Credentials flow</h3>\n<p>Resource Owner Password Credentials Grant is implemented following <a href=\"https://tools.ietf.org/html/rfc6749#section-4.3\" rel=\"nofollow\">rfc6749</a>.</p>\n<p>Use <code>httpx_auth.OAuth2ResourceOwnerPasswordCredentials</code> to configure this kind of authentication.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">httpx</span>\n<span class=\"kn\">from</span> <span class=\"nn\">httpx_auth</span> <span class=\"kn\">import</span> <span class=\"n\">OAuth2ResourceOwnerPasswordCredentials</span>\n\n<span class=\"k\">with</span> <span class=\"n\">httpx</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'http://www.example.com'</span><span class=\"p\">,</span> <span class=\"n\">auth</span><span class=\"o\">=</span><span class=\"n\">OAuth2ResourceOwnerPasswordCredentials</span><span class=\"p\">(</span><span class=\"s1\">'https://www.token.url'</span><span class=\"p\">,</span> <span class=\"s1\">'user name'</span><span class=\"p\">,</span> <span class=\"s1\">'user password'</span><span class=\"p\">))</span>\n</pre>\n<h4>Parameters</h4>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Name</th>\n<th align=\"left\">Description</th>\n<th align=\"left\">Mandatory</th>\n<th align=\"left\">Default value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>token_url</code></td>\n<td align=\"left\">OAuth 2 token URL.</td>\n<td align=\"left\">Mandatory</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>username</code></td>\n<td align=\"left\">Resource owner user name.</td>\n<td align=\"left\">Mandatory</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>password</code></td>\n<td align=\"left\">Resource owner password.</td>\n<td align=\"left\">Mandatory</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>timeout</code></td>\n<td align=\"left\">Maximum amount of seconds to wait for a token to be received once requested.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">60</td>\n</tr>\n<tr>\n<td align=\"left\"><code>header_name</code></td>\n<td align=\"left\">Name of the header field used to send token.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">Authorization</td>\n</tr>\n<tr>\n<td align=\"left\"><code>header_value</code></td>\n<td align=\"left\">Format used to send the token value. \"{token}\" must be present as it will be replaced by the actual token.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">Bearer {token}</td>\n</tr>\n<tr>\n<td align=\"left\"><code>scope</code></td>\n<td align=\"left\">Scope parameter sent to token URL as body. Can also be a list of scopes.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>token_field_name</code></td>\n<td align=\"left\">Field name containing the token.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">access_token</td>\n</tr></tbody></table>\n<p>Any other parameter will be put as body parameter in the token URL.</p>\n<h3>Client Credentials flow</h3>\n<p>Client Credentials Grant is implemented following <a href=\"https://tools.ietf.org/html/rfc6749#section-4.4\" rel=\"nofollow\">rfc6749</a>.</p>\n<p>Use <code>httpx_auth.OAuth2ClientCredentials</code> to configure this kind of authentication.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">httpx</span>\n<span class=\"kn\">from</span> <span class=\"nn\">httpx_auth</span> <span class=\"kn\">import</span> <span class=\"n\">OAuth2ClientCredentials</span>\n\n<span class=\"k\">with</span> <span class=\"n\">httpx</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'http://www.example.com'</span><span class=\"p\">,</span> <span class=\"n\">auth</span><span class=\"o\">=</span><span class=\"n\">OAuth2ClientCredentials</span><span class=\"p\">(</span><span class=\"s1\">'https://www.token.url'</span><span class=\"p\">,</span> <span class=\"n\">client_id</span><span class=\"o\">=</span><span class=\"s1\">'id'</span><span class=\"p\">,</span> <span class=\"n\">client_secret</span><span class=\"o\">=</span><span class=\"s1\">'secret'</span><span class=\"p\">))</span>\n</pre>\n<h4>Parameters</h4>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Name</th>\n<th align=\"left\">Description</th>\n<th align=\"left\">Mandatory</th>\n<th align=\"left\">Default value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>token_url</code></td>\n<td align=\"left\">OAuth 2 token URL.</td>\n<td align=\"left\">Mandatory</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>client_id</code></td>\n<td align=\"left\">Resource owner user name.</td>\n<td align=\"left\">Mandatory</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>client_secret</code></td>\n<td align=\"left\">Resource owner password.</td>\n<td align=\"left\">Mandatory</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>timeout</code></td>\n<td align=\"left\">Maximum amount of seconds to wait for a token to be received once requested.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">60</td>\n</tr>\n<tr>\n<td align=\"left\"><code>header_name</code></td>\n<td align=\"left\">Name of the header field used to send token.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">Authorization</td>\n</tr>\n<tr>\n<td align=\"left\"><code>header_value</code></td>\n<td align=\"left\">Format used to send the token value. \"{token}\" must be present as it will be replaced by the actual token.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">Bearer {token}</td>\n</tr>\n<tr>\n<td align=\"left\"><code>scope</code></td>\n<td align=\"left\">Scope parameter sent to token URL as body. Can also be a list of scopes.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>token_field_name</code></td>\n<td align=\"left\">Field name containing the token.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">access_token</td>\n</tr></tbody></table>\n<p>Any other parameter will be put as body parameter in the token URL.</p>\n<h4>Common providers</h4>\n<p>Most of <a href=\"https://oauth.net/2/\" rel=\"nofollow\">OAuth2</a> Client Credentials Grant providers are supported.</p>\n<p>If the one you are looking for is not yet supported, feel free to <a href=\"https://github.com/Colin-b/httpx_auth/issues/new\" rel=\"nofollow\">ask for its implementation</a>.</p>\n<h5>Okta (OAuth2 Client Credentials)</h5>\n<p><a href=\"https://developer.okta.com/docs/guides/implement-client-creds/overview/\" rel=\"nofollow\">Okta Client Credentials Grant</a> providing access tokens is supported.</p>\n<p>Use <code>httpx_auth.OktaClientCredentials</code> to configure this kind of authentication.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">httpx</span>\n<span class=\"kn\">from</span> <span class=\"nn\">httpx_auth</span> <span class=\"kn\">import</span> <span class=\"n\">OktaClientCredentials</span>\n\n\n<span class=\"n\">okta</span> <span class=\"o\">=</span> <span class=\"n\">OktaClientCredentials</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"o\">=</span><span class=\"s1\">'testserver.okta-emea.com'</span><span class=\"p\">,</span> <span class=\"n\">client_id</span><span class=\"o\">=</span><span class=\"s1\">'54239d18-c68c-4c47-8bdd-ce71ea1d50cd'</span><span class=\"p\">,</span> <span class=\"n\">client_secret</span><span class=\"o\">=</span><span class=\"s2\">\"secret\"</span><span class=\"p\">)</span>\n<span class=\"k\">with</span> <span class=\"n\">httpx</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'http://www.example.com'</span><span class=\"p\">,</span> <span class=\"n\">auth</span><span class=\"o\">=</span><span class=\"n\">okta</span><span class=\"p\">)</span>\n</pre>\n<h6>Parameters</h6>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Name</th>\n<th align=\"left\">Description</th>\n<th align=\"left\">Mandatory</th>\n<th align=\"left\">Default value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>instance</code></td>\n<td align=\"left\">Okta instance (like \"testserver.okta-emea.com\").</td>\n<td align=\"left\">Mandatory</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>client_id</code></td>\n<td align=\"left\">Okta Application Identifier (formatted as an Universal Unique Identifier).</td>\n<td align=\"left\">Mandatory</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>client_secret</code></td>\n<td align=\"left\">Resource owner password.</td>\n<td align=\"left\">Mandatory</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>authorization_server</code></td>\n<td align=\"left\">Okta authorization server.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">'default'</td>\n</tr>\n<tr>\n<td align=\"left\"><code>timeout</code></td>\n<td align=\"left\">Maximum amount of seconds to wait for a token to be received once requested.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">60</td>\n</tr>\n<tr>\n<td align=\"left\"><code>header_name</code></td>\n<td align=\"left\">Name of the header field used to send token.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">Authorization</td>\n</tr>\n<tr>\n<td align=\"left\"><code>header_value</code></td>\n<td align=\"left\">Format used to send the token value. \"{token}\" must be present as it will be replaced by the actual token.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">Bearer {token}</td>\n</tr>\n<tr>\n<td align=\"left\"><code>scope</code></td>\n<td align=\"left\">Scope parameter sent in query. Can also be a list of scopes.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">openid</td>\n</tr>\n<tr>\n<td align=\"left\"><code>token_field_name</code></td>\n<td align=\"left\">Field name containing the token.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">access_token</td>\n</tr></tbody></table>\n<p>Any other parameter will be put as query parameter in the token URL.</p>\n<h3>Implicit flow</h3>\n<p>Implicit Grant is implemented following <a href=\"https://tools.ietf.org/html/rfc6749#section-4.2\" rel=\"nofollow\">rfc6749</a>.</p>\n<p>Use <code>httpx_auth.OAuth2Implicit</code> to configure this kind of authentication.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">httpx</span>\n<span class=\"kn\">from</span> <span class=\"nn\">httpx_auth</span> <span class=\"kn\">import</span> <span class=\"n\">OAuth2Implicit</span>\n\n<span class=\"k\">with</span> <span class=\"n\">httpx</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'http://www.example.com'</span><span class=\"p\">,</span> <span class=\"n\">auth</span><span class=\"o\">=</span><span class=\"n\">OAuth2Implicit</span><span class=\"p\">(</span><span class=\"s1\">'https://www.authorization.url'</span><span class=\"p\">))</span>\n</pre>\n<h4>Parameters</h4>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Name</th>\n<th align=\"left\">Description</th>\n<th align=\"left\">Mandatory</th>\n<th align=\"left\">Default value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>authorization_url</code></td>\n<td align=\"left\">OAuth 2 authorization URL.</td>\n<td align=\"left\">Mandatory</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>response_type</code></td>\n<td align=\"left\">Value of the response_type query parameter if not already provided in authorization URL.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">token</td>\n</tr>\n<tr>\n<td align=\"left\"><code>token_field_name</code></td>\n<td align=\"left\">Field name containing the token.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">id_token if response_type is id_token, otherwise access_token</td>\n</tr>\n<tr>\n<td align=\"left\"><code>redirect_uri_endpoint</code></td>\n<td align=\"left\">Custom endpoint that will be used as redirect_uri the following way: <a href=\"http://localhost\" rel=\"nofollow\">http://localhost</a>:&lt;redirect_uri_port&gt;/&lt;redirect_uri_endpoint&gt;.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">''</td>\n</tr>\n<tr>\n<td align=\"left\"><code>redirect_uri_port</code></td>\n<td align=\"left\">The port on which the server listening for the OAuth 2 token will be started.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">5000</td>\n</tr>\n<tr>\n<td align=\"left\"><code>timeout</code></td>\n<td align=\"left\">Maximum amount of seconds to wait for a token to be received once requested.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">60</td>\n</tr>\n<tr>\n<td align=\"left\"><code>success_display_time</code></td>\n<td align=\"left\">In case a token is successfully received, this is the maximum amount of milliseconds the success page will be displayed in your browser.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">1</td>\n</tr>\n<tr>\n<td align=\"left\"><code>failure_display_time</code></td>\n<td align=\"left\">In case received token is not valid, this is the maximum amount of milliseconds the failure page will be displayed in your browser.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">5000</td>\n</tr>\n<tr>\n<td align=\"left\"><code>header_name</code></td>\n<td align=\"left\">Name of the header field used to send token.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">Authorization</td>\n</tr>\n<tr>\n<td align=\"left\"><code>header_value</code></td>\n<td align=\"left\">Format used to send the token value. \"{token}\" must be present as it will be replaced by the actual token.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">Bearer {token}</td>\n</tr></tbody></table>\n<p>Any other parameter will be put as query parameter in the authorization URL.</p>\n<p>Usual extra parameters are:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Name</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>client_id</code></td>\n<td align=\"left\">Corresponding to your Application ID (in Microsoft Azure app portal)</td>\n</tr>\n<tr>\n<td align=\"left\"><code>nonce</code></td>\n<td align=\"left\">Refer to <a href=\"http://openid.net/specs/openid-connect-core-1_0.html#IDToken\" rel=\"nofollow\" title=\"OpenID ID Token specifications\">OpenID ID Token specifications</a> for more details</td>\n</tr>\n<tr>\n<td align=\"left\"><code>prompt</code></td>\n<td align=\"left\">none to avoid prompting the user if a session is already opened.</td>\n</tr></tbody></table>\n<h4>Common providers</h4>\n<p>Most of <a href=\"https://oauth.net/2/\" rel=\"nofollow\">OAuth2</a> Implicit Grant providers are supported.</p>\n<p>If the one you are looking for is not yet supported, feel free to <a href=\"https://github.com/Colin-b/httpx_auth/issues/new\" rel=\"nofollow\">ask for its implementation</a>.</p>\n<h5>Microsoft - Azure Active Directory (OAuth2 Access Token)</h5>\n<p><a href=\"https://docs.microsoft.com/en-us/azure/active-directory/develop/access-tokens\" rel=\"nofollow\">Microsoft identity platform access tokens</a> are supported.</p>\n<p>Use <code>httpx_auth.AzureActiveDirectoryImplicit</code> to configure this kind of authentication.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">httpx</span>\n<span class=\"kn\">from</span> <span class=\"nn\">httpx_auth</span> <span class=\"kn\">import</span> <span class=\"n\">AzureActiveDirectoryImplicit</span>\n\n\n<span class=\"n\">aad</span> <span class=\"o\">=</span> <span class=\"n\">AzureActiveDirectoryImplicit</span><span class=\"p\">(</span><span class=\"n\">tenant_id</span><span class=\"o\">=</span><span class=\"s1\">'45239d18-c68c-4c47-8bdd-ce71ea1d50cd'</span><span class=\"p\">,</span> <span class=\"n\">client_id</span><span class=\"o\">=</span><span class=\"s1\">'54239d18-c68c-4c47-8bdd-ce71ea1d50cd'</span><span class=\"p\">)</span>\n<span class=\"k\">with</span> <span class=\"n\">httpx</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'http://www.example.com'</span><span class=\"p\">,</span> <span class=\"n\">auth</span><span class=\"o\">=</span><span class=\"n\">aad</span><span class=\"p\">)</span>\n</pre>\n<p>You can retrieve Microsoft Azure Active Directory application information thanks to the <a href=\"https://portal.azure.com/#blade/Microsoft_AAD_IAM/StartboardApplicationsMenuBlade/AllApps/menuId/\" rel=\"nofollow\">application list on Azure portal</a>.</p>\n<h6>Parameters</h6>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Name</th>\n<th align=\"left\">Description</th>\n<th align=\"left\">Mandatory</th>\n<th align=\"left\">Default value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>tenant_id</code></td>\n<td align=\"left\">Microsoft Tenant Identifier (formatted as an Universal Unique Identifier).</td>\n<td align=\"left\">Mandatory</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>client_id</code></td>\n<td align=\"left\">Microsoft Application Identifier (formatted as an Universal Unique Identifier).</td>\n<td align=\"left\">Mandatory</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>response_type</code></td>\n<td align=\"left\">Value of the response_type query parameter if not already provided in authorization URL.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">token</td>\n</tr>\n<tr>\n<td align=\"left\"><code>token_field_name</code></td>\n<td align=\"left\">Field name containing the token.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">access_token</td>\n</tr>\n<tr>\n<td align=\"left\"><code>nonce</code></td>\n<td align=\"left\">Refer to <a href=\"http://openid.net/specs/openid-connect-core-1_0.html#IDToken\" rel=\"nofollow\" title=\"OpenID ID Token specifications\">OpenID ID Token specifications</a> for more details</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">Newly generated Universal Unique Identifier.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>redirect_uri_endpoint</code></td>\n<td align=\"left\">Custom endpoint that will be used as redirect_uri the following way: <a href=\"http://localhost\" rel=\"nofollow\">http://localhost</a>:&lt;redirect_uri_port&gt;/&lt;redirect_uri_endpoint&gt;.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">''</td>\n</tr>\n<tr>\n<td align=\"left\"><code>redirect_uri_port</code></td>\n<td align=\"left\">The port on which the server listening for the OAuth 2 token will be started.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">5000</td>\n</tr>\n<tr>\n<td align=\"left\"><code>timeout</code></td>\n<td align=\"left\">Maximum amount of seconds to wait for a token to be received once requested.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">60</td>\n</tr>\n<tr>\n<td align=\"left\"><code>success_display_time</code></td>\n<td align=\"left\">In case a token is successfully received, this is the maximum amount of milliseconds the success page will be displayed in your browser.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">1</td>\n</tr>\n<tr>\n<td align=\"left\"><code>failure_display_time</code></td>\n<td align=\"left\">In case received token is not valid, this is the maximum amount of milliseconds the failure page will be displayed in your browser.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">5000</td>\n</tr>\n<tr>\n<td align=\"left\"><code>header_name</code></td>\n<td align=\"left\">Name of the header field used to send token.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">Authorization</td>\n</tr>\n<tr>\n<td align=\"left\"><code>header_value</code></td>\n<td align=\"left\">Format used to send the token value. \"{token}\" must be present as it will be replaced by the actual token.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">Bearer {token}</td>\n</tr></tbody></table>\n<p>Any other parameter will be put as query parameter in the authorization URL.</p>\n<p>Usual extra parameters are:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Name</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>prompt</code></td>\n<td align=\"left\">none to avoid prompting the user if a session is already opened.</td>\n</tr></tbody></table>\n<h5>Microsoft - Azure Active Directory (OpenID Connect ID token)</h5>\n<p><a href=\"https://docs.microsoft.com/en-us/azure/active-directory/develop/id-tokens\" rel=\"nofollow\">Microsoft identity platform ID tokens</a> are supported.</p>\n<p>Use <code>httpx_auth.AzureActiveDirectoryImplicitIdToken</code> to configure this kind of authentication.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">httpx</span>\n<span class=\"kn\">from</span> <span class=\"nn\">httpx_auth</span> <span class=\"kn\">import</span> <span class=\"n\">AzureActiveDirectoryImplicitIdToken</span>\n\n\n<span class=\"n\">aad</span> <span class=\"o\">=</span> <span class=\"n\">AzureActiveDirectoryImplicitIdToken</span><span class=\"p\">(</span><span class=\"n\">tenant_id</span><span class=\"o\">=</span><span class=\"s1\">'45239d18-c68c-4c47-8bdd-ce71ea1d50cd'</span><span class=\"p\">,</span> <span class=\"n\">client_id</span><span class=\"o\">=</span><span class=\"s1\">'54239d18-c68c-4c47-8bdd-ce71ea1d50cd'</span><span class=\"p\">)</span>\n<span class=\"k\">with</span> <span class=\"n\">httpx</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'http://www.example.com'</span><span class=\"p\">,</span> <span class=\"n\">auth</span><span class=\"o\">=</span><span class=\"n\">aad</span><span class=\"p\">)</span>\n</pre>\n<p>You can retrieve Microsoft Azure Active Directory application information thanks to the <a href=\"https://portal.azure.com/#blade/Microsoft_AAD_IAM/StartboardApplicationsMenuBlade/AllApps/menuId/\" rel=\"nofollow\">application list on Azure portal</a>.</p>\n<h6>Parameters</h6>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Name</th>\n<th align=\"left\">Description</th>\n<th align=\"left\">Mandatory</th>\n<th align=\"left\">Default value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>tenant_id</code></td>\n<td align=\"left\">Microsoft Tenant Identifier (formatted as an Universal Unique Identifier).</td>\n<td align=\"left\">Mandatory</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>client_id</code></td>\n<td align=\"left\">Microsoft Application Identifier (formatted as an Universal Unique Identifier).</td>\n<td align=\"left\">Mandatory</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>response_type</code></td>\n<td align=\"left\">Value of the response_type query parameter if not already provided in authorization URL.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">id_token</td>\n</tr>\n<tr>\n<td align=\"left\"><code>token_field_name</code></td>\n<td align=\"left\">Field name containing the token.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">id_token</td>\n</tr>\n<tr>\n<td align=\"left\"><code>nonce</code></td>\n<td align=\"left\">Refer to <a href=\"http://openid.net/specs/openid-connect-core-1_0.html#IDToken\" rel=\"nofollow\" title=\"OpenID ID Token specifications\">OpenID ID Token specifications</a> for more details</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">Newly generated Universal Unique Identifier.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>redirect_uri_endpoint</code></td>\n<td align=\"left\">Custom endpoint that will be used as redirect_uri the following way: <a href=\"http://localhost\" rel=\"nofollow\">http://localhost</a>:&lt;redirect_uri_port&gt;/&lt;redirect_uri_endpoint&gt;.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">''</td>\n</tr>\n<tr>\n<td align=\"left\"><code>redirect_uri_port</code></td>\n<td align=\"left\">The port on which the server listening for the OAuth 2 token will be started.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">5000</td>\n</tr>\n<tr>\n<td align=\"left\"><code>timeout</code></td>\n<td align=\"left\">Maximum amount of seconds to wait for a token to be received once requested.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">60</td>\n</tr>\n<tr>\n<td align=\"left\"><code>success_display_time</code></td>\n<td align=\"left\">In case a token is successfully received, this is the maximum amount of milliseconds the success page will be displayed in your browser.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">1</td>\n</tr>\n<tr>\n<td align=\"left\"><code>failure_display_time</code></td>\n<td align=\"left\">In case received token is not valid, this is the maximum amount of milliseconds the failure page will be displayed in your browser.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">5000</td>\n</tr>\n<tr>\n<td align=\"left\"><code>header_name</code></td>\n<td align=\"left\">Name of the header field used to send token.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">Authorization</td>\n</tr>\n<tr>\n<td align=\"left\"><code>header_value</code></td>\n<td align=\"left\">Format used to send the token value. \"{token}\" must be present as it will be replaced by the actual token.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">Bearer {token}</td>\n</tr></tbody></table>\n<p>Any other parameter will be put as query parameter in the authorization URL.</p>\n<p>Usual extra parameters are:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Name</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>prompt</code></td>\n<td align=\"left\">none to avoid prompting the user if a session is already opened.</td>\n</tr></tbody></table>\n<h5>Okta (OAuth2 Implicit Access Token)</h5>\n<p><a href=\"https://developer.okta.com/docs/guides/implement-implicit/overview/\" rel=\"nofollow\">Okta Implicit Grant</a> providing access tokens is supported.</p>\n<p>Use <code>httpx_auth.OktaImplicit</code> to configure this kind of authentication.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">httpx</span>\n<span class=\"kn\">from</span> <span class=\"nn\">httpx_auth</span> <span class=\"kn\">import</span> <span class=\"n\">OktaImplicit</span>\n\n\n<span class=\"n\">okta</span> <span class=\"o\">=</span> <span class=\"n\">OktaImplicit</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"o\">=</span><span class=\"s1\">'testserver.okta-emea.com'</span><span class=\"p\">,</span> <span class=\"n\">client_id</span><span class=\"o\">=</span><span class=\"s1\">'54239d18-c68c-4c47-8bdd-ce71ea1d50cd'</span><span class=\"p\">)</span>\n<span class=\"k\">with</span> <span class=\"n\">httpx</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'http://www.example.com'</span><span class=\"p\">,</span> <span class=\"n\">auth</span><span class=\"o\">=</span><span class=\"n\">okta</span><span class=\"p\">)</span>\n</pre>\n<h6>Parameters</h6>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Name</th>\n<th align=\"left\">Description</th>\n<th align=\"left\">Mandatory</th>\n<th align=\"left\">Default value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>instance</code></td>\n<td align=\"left\">Okta instance (like \"testserver.okta-emea.com\").</td>\n<td align=\"left\">Mandatory</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>client_id</code></td>\n<td align=\"left\">Okta Application Identifier (formatted as an Universal Unique Identifier).</td>\n<td align=\"left\">Mandatory</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>response_type</code></td>\n<td align=\"left\">Value of the response_type query parameter if not already provided in authorization URL.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">token</td>\n</tr>\n<tr>\n<td align=\"left\"><code>token_field_name</code></td>\n<td align=\"left\">Field name containing the token.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">access_token</td>\n</tr>\n<tr>\n<td align=\"left\"><code>nonce</code></td>\n<td align=\"left\">Refer to <a href=\"http://openid.net/specs/openid-connect-core-1_0.html#IDToken\" rel=\"nofollow\" title=\"OpenID ID Token specifications\">OpenID ID Token specifications</a> for more details.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">Newly generated Universal Unique Identifier.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>scope</code></td>\n<td align=\"left\">Scope parameter sent in query. Can also be a list of scopes.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">['openid', 'profile', 'email']</td>\n</tr>\n<tr>\n<td align=\"left\"><code>authorization_server</code></td>\n<td align=\"left\">Okta authorization server.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">'default'</td>\n</tr>\n<tr>\n<td align=\"left\"><code>redirect_uri_endpoint</code></td>\n<td align=\"left\">Custom endpoint that will be used as redirect_uri the following way: <a href=\"http://localhost\" rel=\"nofollow\">http://localhost</a>:&lt;redirect_uri_port&gt;/&lt;redirect_uri_endpoint&gt;.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">''</td>\n</tr>\n<tr>\n<td align=\"left\"><code>redirect_uri_port</code></td>\n<td align=\"left\">The port on which the server listening for the OAuth 2 token will be started.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">5000</td>\n</tr>\n<tr>\n<td align=\"left\"><code>timeout</code></td>\n<td align=\"left\">Maximum amount of seconds to wait for a token to be received once requested.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">60</td>\n</tr>\n<tr>\n<td align=\"left\"><code>success_display_time</code></td>\n<td align=\"left\">In case a token is successfully received, this is the maximum amount of milliseconds the success page will be displayed in your browser.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">1</td>\n</tr>\n<tr>\n<td align=\"left\"><code>failure_display_time</code></td>\n<td align=\"left\">In case received token is not valid, this is the maximum amount of milliseconds the failure page will be displayed in your browser.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">5000</td>\n</tr>\n<tr>\n<td align=\"left\"><code>header_name</code></td>\n<td align=\"left\">Name of the header field used to send token.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">Authorization</td>\n</tr>\n<tr>\n<td align=\"left\"><code>header_value</code></td>\n<td align=\"left\">Format used to send the token value. \"{token}\" must be present as it will be replaced by the actual token.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">Bearer {token}</td>\n</tr></tbody></table>\n<p>Any other parameter will be put as query parameter in the authorization URL.</p>\n<p>Usual extra parameters are:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Name</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>prompt</code></td>\n<td align=\"left\">none to avoid prompting the user if a session is already opened.</td>\n</tr></tbody></table>\n<h5>Okta (OpenID Connect Implicit ID token)</h5>\n<p><a href=\"https://developer.okta.com/docs/guides/implement-implicit/overview/\" rel=\"nofollow\">Okta Implicit Grant</a> providing ID tokens is supported.</p>\n<p>Use <code>httpx_auth.OktaImplicitIdToken</code> to configure this kind of authentication.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">httpx</span>\n<span class=\"kn\">from</span> <span class=\"nn\">httpx_auth</span> <span class=\"kn\">import</span> <span class=\"n\">OktaImplicitIdToken</span>\n\n\n<span class=\"n\">okta</span> <span class=\"o\">=</span> <span class=\"n\">OktaImplicitIdToken</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"o\">=</span><span class=\"s1\">'testserver.okta-emea.com'</span><span class=\"p\">,</span> <span class=\"n\">client_id</span><span class=\"o\">=</span><span class=\"s1\">'54239d18-c68c-4c47-8bdd-ce71ea1d50cd'</span><span class=\"p\">)</span>\n<span class=\"k\">with</span> <span class=\"n\">httpx</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'http://www.example.com'</span><span class=\"p\">,</span> <span class=\"n\">auth</span><span class=\"o\">=</span><span class=\"n\">okta</span><span class=\"p\">)</span>\n</pre>\n<h6>Parameters</h6>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Name</th>\n<th align=\"left\">Description</th>\n<th align=\"left\">Mandatory</th>\n<th align=\"left\">Default value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>instance</code></td>\n<td align=\"left\">Okta instance (like \"testserver.okta-emea.com\").</td>\n<td align=\"left\">Mandatory</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>client_id</code></td>\n<td align=\"left\">Okta Application Identifier (formatted as an Universal Unique Identifier).</td>\n<td align=\"left\">Mandatory</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>response_type</code></td>\n<td align=\"left\">Value of the response_type query parameter if not already provided in authorization URL.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">id_token</td>\n</tr>\n<tr>\n<td align=\"left\"><code>token_field_name</code></td>\n<td align=\"left\">Field name containing the token.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">id_token</td>\n</tr>\n<tr>\n<td align=\"left\"><code>nonce</code></td>\n<td align=\"left\">Refer to <a href=\"http://openid.net/specs/openid-connect-core-1_0.html#IDToken\" rel=\"nofollow\" title=\"OpenID ID Token specifications\">OpenID ID Token specifications</a> for more details.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">Newly generated Universal Unique Identifier.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>scope</code></td>\n<td align=\"left\">Scope parameter sent in query. Can also be a list of scopes.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">['openid', 'profile', 'email']</td>\n</tr>\n<tr>\n<td align=\"left\"><code>authorization_server</code></td>\n<td align=\"left\">Okta authorization server.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">'default'</td>\n</tr>\n<tr>\n<td align=\"left\"><code>redirect_uri_endpoint</code></td>\n<td align=\"left\">Custom endpoint that will be used as redirect_uri the following way: <a href=\"http://localhost\" rel=\"nofollow\">http://localhost</a>:&lt;redirect_uri_port&gt;/&lt;redirect_uri_endpoint&gt;.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">''</td>\n</tr>\n<tr>\n<td align=\"left\"><code>redirect_uri_port</code></td>\n<td align=\"left\">The port on which the server listening for the OAuth 2 token will be started.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">5000</td>\n</tr>\n<tr>\n<td align=\"left\"><code>timeout</code></td>\n<td align=\"left\">Maximum amount of seconds to wait for a token to be received once requested.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">60</td>\n</tr>\n<tr>\n<td align=\"left\"><code>success_display_time</code></td>\n<td align=\"left\">In case a token is successfully received, this is the maximum amount of milliseconds the success page will be displayed in your browser.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">1</td>\n</tr>\n<tr>\n<td align=\"left\"><code>failure_display_time</code></td>\n<td align=\"left\">In case received token is not valid, this is the maximum amount of milliseconds the failure page will be displayed in your browser.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">5000</td>\n</tr>\n<tr>\n<td align=\"left\"><code>header_name</code></td>\n<td align=\"left\">Name of the header field used to send token.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">Authorization</td>\n</tr>\n<tr>\n<td align=\"left\"><code>header_value</code></td>\n<td align=\"left\">Format used to send the token value. \"{token}\" must be present as it will be replaced by the actual token.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">Bearer {token}</td>\n</tr></tbody></table>\n<p>Any other parameter will be put as query parameter in the authorization URL.</p>\n<p>Usual extra parameters are:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Name</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>prompt</code></td>\n<td align=\"left\">none to avoid prompting the user if a session is already opened.</td>\n</tr></tbody></table>\n<h3>Managing token cache</h3>\n<p>To avoid asking for a new token every new request, a token cache is used.</p>\n<p>Default cache is in memory but it is also possible to use a physical cache.</p>\n<p>You need to provide the location of your token cache file. It can be a full or relative path.</p>\n<p>If the file already exists it will be used, if the file do not exists it will be created.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">httpx_auth</span> <span class=\"kn\">import</span> <span class=\"n\">OAuth2</span><span class=\"p\">,</span> <span class=\"n\">JsonTokenFileCache</span>\n\n<span class=\"n\">OAuth2</span><span class=\"o\">.</span><span class=\"n\">token_cache</span> <span class=\"o\">=</span> <span class=\"n\">JsonTokenFileCache</span><span class=\"p\">(</span><span class=\"s1\">'path/to/my_token_cache.json'</span><span class=\"p\">)</span>\n</pre>\n<h2>API key in header</h2>\n<p>You can send an API key inside the header of your request using <code>httpx_auth.HeaderApiKey</code>.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">httpx</span>\n<span class=\"kn\">from</span> <span class=\"nn\">httpx_auth</span> <span class=\"kn\">import</span> <span class=\"n\">HeaderApiKey</span>\n\n<span class=\"k\">with</span> <span class=\"n\">httpx</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'http://www.example.com'</span><span class=\"p\">,</span> <span class=\"n\">auth</span><span class=\"o\">=</span><span class=\"n\">HeaderApiKey</span><span class=\"p\">(</span><span class=\"s1\">'my_api_key'</span><span class=\"p\">))</span>\n</pre>\n<h3>Parameters</h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Name</th>\n<th align=\"left\">Description</th>\n<th align=\"left\">Mandatory</th>\n<th align=\"left\">Default value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>api_key</code></td>\n<td align=\"left\">The API key that will be sent.</td>\n<td align=\"left\">Mandatory</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>header_name</code></td>\n<td align=\"left\">Name of the header field.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">\"X-API-Key\"</td>\n</tr></tbody></table>\n<h2>API key in query</h2>\n<p>You can send an API key inside the query parameters of your request using <code>httpx_auth.QueryApiKey</code>.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">httpx</span>\n<span class=\"kn\">from</span> <span class=\"nn\">httpx_auth</span> <span class=\"kn\">import</span> <span class=\"n\">QueryApiKey</span>\n\n<span class=\"k\">with</span> <span class=\"n\">httpx</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'http://www.example.com'</span><span class=\"p\">,</span> <span class=\"n\">auth</span><span class=\"o\">=</span><span class=\"n\">QueryApiKey</span><span class=\"p\">(</span><span class=\"s1\">'my_api_key'</span><span class=\"p\">))</span>\n</pre>\n<h3>Parameters</h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Name</th>\n<th align=\"left\">Description</th>\n<th align=\"left\">Mandatory</th>\n<th align=\"left\">Default value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>api_key</code></td>\n<td align=\"left\">The API key that will be sent.</td>\n<td align=\"left\">Mandatory</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>query_parameter_name</code></td>\n<td align=\"left\">Name of the query parameter.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">\"api_key\"</td>\n</tr></tbody></table>\n<h2>Basic</h2>\n<p>You can use basic authentication using <code>httpx_auth.Basic</code>.</p>\n<p>The only advantage of using this class instead of <code>httpx</code> native support of basic authentication, is to be able to use it in <a href=\"#multiple-authentication-at-once\" rel=\"nofollow\">multiple authentication</a>.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">httpx</span>\n<span class=\"kn\">from</span> <span class=\"nn\">httpx_auth</span> <span class=\"kn\">import</span> <span class=\"n\">Basic</span>\n\n<span class=\"k\">with</span> <span class=\"n\">httpx</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'http://www.example.com'</span><span class=\"p\">,</span> <span class=\"n\">auth</span><span class=\"o\">=</span><span class=\"n\">Basic</span><span class=\"p\">(</span><span class=\"s1\">'username'</span><span class=\"p\">,</span> <span class=\"s1\">'password'</span><span class=\"p\">))</span>\n</pre>\n<h3>Parameters</h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Name</th>\n<th align=\"left\">Description</th>\n<th align=\"left\">Mandatory</th>\n<th align=\"left\">Default value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>username</code></td>\n<td align=\"left\">User name.</td>\n<td align=\"left\">Mandatory</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>password</code></td>\n<td align=\"left\">User password.</td>\n<td align=\"left\">Mandatory</td>\n<td align=\"left\"></td>\n</tr></tbody></table>\n<h2>Multiple authentication at once</h2>\n<p>You can also use a combination of authentication using <code>+</code> as in the following sample:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">httpx</span>\n<span class=\"kn\">from</span> <span class=\"nn\">httpx_auth</span> <span class=\"kn\">import</span> <span class=\"n\">HeaderApiKey</span><span class=\"p\">,</span> <span class=\"n\">OAuth2Implicit</span>\n\n<span class=\"n\">api_key</span> <span class=\"o\">=</span> <span class=\"n\">HeaderApiKey</span><span class=\"p\">(</span><span class=\"s1\">'my_api_key'</span><span class=\"p\">)</span>\n<span class=\"n\">oauth2</span> <span class=\"o\">=</span> <span class=\"n\">OAuth2Implicit</span><span class=\"p\">(</span><span class=\"s1\">'https://www.example.com'</span><span class=\"p\">)</span>\n<span class=\"k\">with</span> <span class=\"n\">httpx</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'http://www.example.com'</span><span class=\"p\">,</span> <span class=\"n\">auth</span><span class=\"o\">=</span><span class=\"n\">api_key</span> <span class=\"o\">+</span> <span class=\"n\">oauth2</span><span class=\"p\">)</span>\n</pre>\n<h2>Available pytest fixtures</h2>\n<p>Testing the code using httpx_auth authentication classes can be achieved using provided <a href=\"https://docs.pytest.org/en/latest/\" rel=\"nofollow\" title=\"pytest module\"><code>pytest</code></a> fixtures.</p>\n<h3>token_cache_mock</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">httpx_auth.testing</span> <span class=\"kn\">import</span> <span class=\"n\">token_cache_mock</span><span class=\"p\">,</span> <span class=\"n\">token_mock</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">test_something</span><span class=\"p\">(</span><span class=\"n\">token_cache_mock</span><span class=\"p\">):</span>\n    <span class=\"c1\"># perform code using authentication</span>\n    <span class=\"k\">pass</span>\n</pre>\n<p>Use this fixture to mock authentication success for any of the following classes:</p>\n<ul>\n<li>OAuth2AuthorizationCodePKCE</li>\n<li>OktaAuthorizationCodePKCE</li>\n<li>OAuth2Implicit</li>\n<li>OktaImplicit</li>\n<li>OktaImplicitIdToken</li>\n<li>AzureActiveDirectoryImplicit</li>\n<li>AzureActiveDirectoryImplicitIdToken</li>\n<li>OAuth2AuthorizationCode</li>\n<li>OktaAuthorizationCode</li>\n<li>OAuth2ClientCredentials</li>\n<li>OktaClientCredentials</li>\n<li>OAuth2ResourceOwnerPasswordCredentials,</li>\n</ul>\n<p>By default, <a href=\"https://pypi.org/project/PyJWT/\" rel=\"nofollow\"><code>pyjwt</code></a> is a required dependency as it is used to generate the token returned by the authentication.</p>\n<p>You can however return your custom token by providing your own <code>token_mock</code> fixture as in the following sample:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pytest</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">httpx_auth.testing</span> <span class=\"kn\">import</span> <span class=\"n\">token_cache_mock</span>\n\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">fixture</span>\n<span class=\"k\">def</span> <span class=\"nf\">token_mock</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"s2\">\"2YotnFZFEjr1zCsicMWpAA\"</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">test_something</span><span class=\"p\">(</span><span class=\"n\">token_cache_mock</span><span class=\"p\">):</span>\n    <span class=\"c1\"># perform code using authentication</span>\n    <span class=\"k\">pass</span>\n</pre>\n<h3>Advanced testing</h3>\n<h4>token_cache</h4>\n<p>This <a href=\"https://docs.pytest.org/en/latest/\" rel=\"nofollow\" title=\"pytest module\"><code>pytest</code></a> fixture will return the token cache and ensure it is reset at the end of the test case.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">httpx_auth.testing</span> <span class=\"kn\">import</span> <span class=\"n\">token_cache</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">test_something</span><span class=\"p\">(</span><span class=\"n\">token_cache</span><span class=\"p\">):</span>\n    <span class=\"c1\"># perform code using authentication</span>\n    <span class=\"k\">pass</span>\n</pre>\n<h4>browser_mock</h4>\n<p>This <a href=\"https://docs.pytest.org/en/latest/\" rel=\"nofollow\" title=\"pytest module\"><code>pytest</code></a> fixture will allow to mock the behavior of a web browser.</p>\n<p>With this <a href=\"https://docs.pytest.org/en/latest/\" rel=\"nofollow\" title=\"pytest module\"><code>pytest</code></a> fixture you will be allowed to fine tune your authentication related failures handling.</p>\n<p><a href=\"https://pypi.org/project/PyJWT/\" rel=\"nofollow\"><code>pyjwt</code></a> is a required dependency if you use <code>create_token</code> helper function.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">datetime</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">httpx_auth.testing</span> <span class=\"kn\">import</span> <span class=\"n\">browser_mock</span><span class=\"p\">,</span> <span class=\"n\">BrowserMock</span><span class=\"p\">,</span> <span class=\"n\">create_token</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">test_something</span><span class=\"p\">(</span><span class=\"n\">browser_mock</span><span class=\"p\">:</span> <span class=\"n\">BrowserMock</span><span class=\"p\">):</span>\n    <span class=\"n\">token_expiry</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">utcnow</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">hours</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"n\">token</span> <span class=\"o\">=</span> <span class=\"n\">create_token</span><span class=\"p\">(</span><span class=\"n\">token_expiry</span><span class=\"p\">)</span>\n    <span class=\"n\">tab</span> <span class=\"o\">=</span> <span class=\"n\">browser_mock</span><span class=\"o\">.</span><span class=\"n\">add_response</span><span class=\"p\">(</span>\n        <span class=\"n\">opened_url</span><span class=\"o\">=</span><span class=\"s2\">\"http://url_opened_by_browser?state=1234\"</span><span class=\"p\">,</span>\n        <span class=\"n\">reply_url</span><span class=\"o\">=</span><span class=\"sa\">f</span><span class=\"s2\">\"http://localhost:5000#access_token=</span><span class=\"si\">{</span><span class=\"n\">token</span><span class=\"si\">}</span><span class=\"s2\">&amp;state=1234\"</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"c1\"># perform code using authentication</span>\n\n    <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">assert_success</span><span class=\"p\">(</span>\n        <span class=\"s2\">\"You are now authenticated on 1234 You may close this tab.\"</span>\n    <span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 6864692, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "d64381c5c3487fffda7b19737cb92a3c", "sha256": "09cd6401e79ab65f57696930ae0fb9541183c6a4182edb06219a71344f2fad9f"}, "downloads": -1, "filename": "httpx_auth-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "d64381c5c3487fffda7b19737cb92a3c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 3213, "upload_time": "2020-02-04T14:14:58", "upload_time_iso_8601": "2020-02-04T14:14:58.718938Z", "url": "https://files.pythonhosted.org/packages/a6/e3/4ed0810bfb8640986898708a30d458f64df5dd8689c816edff4c68de2a7c/httpx_auth-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "daa4ae303b6cc72096e3266b3e69b884", "sha256": "0be04d71e6bdd0a08322c9232fef7906af4f228887a336c37a46634f3ebf14d6"}, "downloads": -1, "filename": "httpx_auth-0.0.1.tar.gz", "has_sig": false, "md5_digest": "daa4ae303b6cc72096e3266b3e69b884", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 2260, "upload_time": "2020-02-04T14:15:00", "upload_time_iso_8601": "2020-02-04T14:15:00.646017Z", "url": "https://files.pythonhosted.org/packages/0d/5d/0407ef6a36cad4d5853ea9d18b01c039909fc63ae027f89cf352076ea135/httpx_auth-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "6fc7e24860cd30ac0f4c94b92c59fc12", "sha256": "b64814a0cc3facec7c25e3c93f9a66d569b70e0818f8748e71e2e390aaf266b5"}, "downloads": -1, "filename": "httpx_auth-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "6fc7e24860cd30ac0f4c94b92c59fc12", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 22422, "upload_time": "2020-02-10T18:32:15", "upload_time_iso_8601": "2020-02-10T18:32:15.798022Z", "url": "https://files.pythonhosted.org/packages/f7/e3/07934f8a8ed1794971a67c7a82ccd205eae8c1f12a6104677f4fb000db55/httpx_auth-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e6e96a92c364765a1c929b87d4879e06", "sha256": "ff393305537152580c47404e49a57991fd389d0cfae727619b72ef084381b87c"}, "downloads": -1, "filename": "httpx_auth-0.0.2.tar.gz", "has_sig": false, "md5_digest": "e6e96a92c364765a1c929b87d4879e06", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 27489, "upload_time": "2020-02-10T18:32:17", "upload_time_iso_8601": "2020-02-10T18:32:17.262955Z", "url": "https://files.pythonhosted.org/packages/e8/eb/41d0b906c0d0b06a34062e291a02513062317a40664afc9595fc7da37287/httpx_auth-0.0.2.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "43aa42d0650cff222194232e6d381833", "sha256": "e7930c5af938c9802eecd41b366b97bd693be674ac2d0ddead84272e19a48668"}, "downloads": -1, "filename": "httpx_auth-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "43aa42d0650cff222194232e6d381833", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 22483, "upload_time": "2020-03-09T16:06:23", "upload_time_iso_8601": "2020-03-09T16:06:23.243581Z", "url": "https://files.pythonhosted.org/packages/23/11/b7a90f6aa1a674780f0f1e307e919f30999fbb23038b7e140fcc172c0d5d/httpx_auth-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0bc32c02e0269cfccceed94811dee42f", "sha256": "efdbe1d256d88dd4bd8072d1938c073d4e52935854f712c68e6a30568216832f"}, "downloads": -1, "filename": "httpx_auth-0.1.0.tar.gz", "has_sig": false, "md5_digest": "0bc32c02e0269cfccceed94811dee42f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 28071, "upload_time": "2020-03-09T16:06:24", "upload_time_iso_8601": "2020-03-09T16:06:24.762564Z", "url": "https://files.pythonhosted.org/packages/7a/94/c442b9634e09fbdb27473b2315912fa4a9b37ac87709a3c1d08cc6aac47d/httpx_auth-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "a08f4aa928b3116e0baa429254dc7728", "sha256": "1743548110a387def0fba3efefed0b09b30507b5ca46674021b35b86260c5419"}, "downloads": -1, "filename": "httpx_auth-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a08f4aa928b3116e0baa429254dc7728", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 22399, "upload_time": "2020-03-23T10:41:11", "upload_time_iso_8601": "2020-03-23T10:41:11.933872Z", "url": "https://files.pythonhosted.org/packages/e1/f0/57870eefd04dfed0355b3045f2edf2379d323e8d6bd8e9e6a343c190e099/httpx_auth-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "78353933fdf2f35ee06619fe2d0097e8", "sha256": "ee60747a2d79f321f1446409356c30058806edd52b6b45d46695c82575f62ca5"}, "downloads": -1, "filename": "httpx_auth-0.2.0.tar.gz", "has_sig": false, "md5_digest": "78353933fdf2f35ee06619fe2d0097e8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 27992, "upload_time": "2020-03-23T10:41:13", "upload_time_iso_8601": "2020-03-23T10:41:13.374922Z", "url": "https://files.pythonhosted.org/packages/72/ee/ca3d7fe210e5e171324bc4a7cd23bda012529b1b03732fbf68645db65aa7/httpx_auth-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a08f4aa928b3116e0baa429254dc7728", "sha256": "1743548110a387def0fba3efefed0b09b30507b5ca46674021b35b86260c5419"}, "downloads": -1, "filename": "httpx_auth-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a08f4aa928b3116e0baa429254dc7728", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 22399, "upload_time": "2020-03-23T10:41:11", "upload_time_iso_8601": "2020-03-23T10:41:11.933872Z", "url": "https://files.pythonhosted.org/packages/e1/f0/57870eefd04dfed0355b3045f2edf2379d323e8d6bd8e9e6a343c190e099/httpx_auth-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "78353933fdf2f35ee06619fe2d0097e8", "sha256": "ee60747a2d79f321f1446409356c30058806edd52b6b45d46695c82575f62ca5"}, "downloads": -1, "filename": "httpx_auth-0.2.0.tar.gz", "has_sig": false, "md5_digest": "78353933fdf2f35ee06619fe2d0097e8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 27992, "upload_time": "2020-03-23T10:41:13", "upload_time_iso_8601": "2020-03-23T10:41:13.374922Z", "url": "https://files.pythonhosted.org/packages/72/ee/ca3d7fe210e5e171324bc4a7cd23bda012529b1b03732fbf68645db65aa7/httpx_auth-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:01 2020"}