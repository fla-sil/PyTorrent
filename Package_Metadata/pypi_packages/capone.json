{"info": {"author": "Hunter Richards", "author_email": "opensource@counsyl.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Framework :: Django", "Intended Audience :: Developers", "Intended Audience :: Financial and Insurance Industry", "Intended Audience :: Healthcare Industry", "Intended Audience :: Legal Industry", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Topic :: Office/Business :: Financial :: Accounting"], "description": "Capone\n======\n\n*Never let your books land you in the pen.*\n\n|Al Capone's Miami Mugshot|\n\n``Capone`` is a library that provides double-entry bookkeeping (the\nfoundation of all modern accounting) for Django with the ability to link\neach recorded transaction to zero or more other Django models as\nevidence for that transaction.\n\nIntroduction\n------------\n\nIn double-entry bookkeeping (DEB), all recordable events (purchases,\nsales, equipment depreciation, bad debt markdowns, etc.) are tracked as\n\"ledger entries\" or \"transactions\" in \"ledgers\". Each ledger entry is\nmade up of one or more \"credit\" and one or more \"debit\" entries. For the\nsake of this brief example, you can think of credits as increasing the\namount of money recorded in a ledger and a debit decreasing it. With\nthat assumption, the central idea behind double-entry bookkeeping is\nthat the sum of every ledger entry's debits must equal the sum of its\ncredits. ``capone`` implements a double-entry bookkeeping system by\nproviding an API for checking that all created entries satisfy this\ncondition or rolling back the transaction if not.\n\nIn addition to this standard bookkeeping functionality, ``capone`` also\nallows any number of arbitrary objects to be attached, via generic\nforeign keys, to a ledger entry as \"evidence\" for that transaction's\nhaving happened. For instance, a transaction recording a bank deposit\npaying for several medical tests at a time from an insurance company to\nyour medical testing company could be linked to the original ``Order``\nobjects that recorded the test. ``capone`` also provides an API for the\nefficient querying of ledger entries by evidence.\n\nFor more information on the concept of double-entry bookkeeping itself,\nwe recommend the Wikipedia article:\n`https://en.wikipedia.org/wiki/Double-entry_bookkeeping_system <https://en.wikipedia.org/wiki/Double-entry_bookkeeping_system>`__.\n\nLocal Development\n-----------------\n\nSetup:\n~~~~~~\n\nFirst, you must set up your working environment:\n\n::\n\n   make setup\n\nThis will build a local virtualenv and all other requirements for local\ndevelopment.\n\nRunning Commands:\n~~~~~~~~~~~~~~~~~\n\nThe following commands are available for interacting with the app:\n\nTo start a shell instance so that you can interact with the app via the\nORM:\n\n::\n\n   make shell\n\nNote: before any of the following instructions, you may have to run\n``make develop`` to set up a postgres database for this app.\n\nFirst, activate a virtualenv so that your commands have access to the\nenvironment built by ``make setup``:\n\nFrom the repository root, run:\n\n::\n\n   source .venv/bin/activate\n\nThen you should be free to run\n\n::\n\n   ./manage.py makemigrations --settings=capone.tests.settings\n\nor any other ``manage.py`` command, even those in the Makefile.\n\nTo run individual tests, use the following:\n\n::\n\n   ./manage.py test --settings=capone.tests.settings capone.tests\n\nNotice the ``--settings=capone.tests.settings`` argument: because this\nrepository is a django sub-module, it wouldn't make sense for it to come\nwith its own default ``settings.py`` file. Instead, it ships with one\nused to run its tests. To use ``manage.py``, we have to pass an import\npath to the settings file explicitly.\n\nModels\n------\n\nLet's introduce the models provided by ``capone`` and how they relate to\none another.\n\nNote that all objects in this library have ``created_at`` and\n``modified_at`` fields that are ``auto_now_add`` and ``auto_now``,\nrespectively.\n\nAccounting Models\n~~~~~~~~~~~~~~~~~\n\nThe models in this section are those that correspond most to well known\naccounting concepts, i.e. those involved in keeping accounts using the\nprinciples of double-entry bookkeeping. They model ledgers, journal\nentries, credits and debits, and any metadata one wishes to store with\nthese objects.\n\nLedger\n^^^^^^\n\nA ``Ledger`` is the top-most level of organization of information in\ndouble-entry bookkeeping as well as the ``capone`` app. Most ledgers\nhave names familiar to those with any knowledge of accounting, such as\n\"revenue\" or \"accounts receivable\".\n\n``Ledgers`` are synonymous with the accounting concept of an \"account\",\nso you may see references to accounts in this documentation or elsewhere\nin the accounting literature.\n\nAs a data structure, a ``Ledger`` in this library is little more than a\nname, description, and unique number: ``LedgerEntries`` (see below)\npoint to a ``Ledger`` to represent their being \"in\" a ``Ledger``.\n``Transactions`` (see below also) that are \"between\" two ``Ledgers``\nhave a ``LedgerEntry`` pointing to one ``Ledger`` and another\n``LedgerEntry`` pointing to the other ``Ledger``.\n\n``increased_by_debits``\n'''''''''''''''''''''''\n\n``Ledger`` also has the sometimes confusing field\n``increased_by_debits``. All ``Ledgers`` are of one of two types: either\ndebits increase the \"value\" of an account or credits do. By convention,\nasset and expense accounts are of the former type, while liabilities,\nequity, and revenue are of the latter: in short, an increase to an\n\"asset\"-type account is a debit, and an increase to a \"liability\" or\n\"equity\"-type account is a credit.\n\nHere's a handy mnemonic for the two types of accounts: The accounting\nequation says (by definition) that:\n\n::\n\n   assets == liabilities + owner equity\n\nThe terms on the right of the equals sign are increased by debits, and\nterms on the left of the equals sign are decreased by debits. We can\ntherefore use the accounting equation to know whether to use debits or\ncredits to model an increase in a ledger.\n\n**So because debits and credits mean different things in different types\nof accounts, we can have a transaction with an \"equal and opposite\"\ncredit and debit pair of the same currency amount, but that still\nrepresents a net increase in the value of a company: a debit in Accounts\nReceivable and a credit in Revenue increases both accounts while\nsatisfying the accounting equation.**\n\nCurrently, field ``increased_by_debits`` is not used by the code in\n``capone`` but is provided as a convenience to users who might wish to\nincorporate this information into an external report or calculation.\n\nTransaction\n^^^^^^^^^^^\n\nA ``Transaction`` is a record of a discrete financial action,\nrepresented by a collection of debits and credits whose sums equal one\nanother. Practically all models in ``capone`` link to or through\n``Transaction``: in a sense you could say it's the main model provided\nby ``capone``. A ``Transaction`` can sometimes be referred to as a\n\"journal entry\".\n\nThe ``Transaction`` model records debits and credits by linking to\n``LedgerEntries``, which include currency amounts of the proper sign,\nand those ``LedgerEntries`` themselves point to ``Ledger``. In other\nwords, ``Transaction`` and ``Ledger`` are linked in a many-to-many\nfashion by going through ``LedgerEntry`` as a custom through model. The\n\"proper sign\" part is taken care of by the ``credit`` and ``debit``\nconvenience methods (see examples below).\n\n``Transactions`` should never be deleted. Instead, a new ``Transaction``\nwith debits and credits swapped should be created using\n``capone.api.actions.void_transaction`` to negate the effect of the\n``Transaction`` you'd like to remove. The ``voids`` field on the new\n``Transaction`` will automatically be filled in with the old\n``Transaction`` you wish to remove. By this method, you'll never have to\ndelete data from your system as a part of normal operation, which mimics\none of the many benefits of traditional, non-computerized double-entry\nbookkeeping.\n\n``Transaction`` also has the following fields to provide metadata for\neach transaction:\n\n-  ``created_by``: The user who created this ``Transaction``.\n-  ``notes``: A free-form text field for adding to a ``Transaction`` any\n   information not expressed in the numerous metadata fields.\n-  ``posted_timestamp``: The time a ``Transaction`` should be considered\n   valid from. ``capone.api.actions.create_transaction`` automatically\n   deals with filling in this value with the current time. You can\n   change this value to post-date or back-date ``Transactions`` because\n   ``created_at`` will always represent the true object creation time.\n-  ``transaction_id``: A Universally Unique Identifier (UUID) for the\n   ``Transaction``, useful for unambiguously referring to a\n   ``Transaction`` without using primary keys or other database\n   internals.\n-  ``type``: A user-defined type for the ``Transaction`` (see the\n   ``TransactionType`` model below).\n\nTransactionType\n^^^^^^^^^^^^^^^\n\nA ``TransactionType`` is a user-defined, human-readable \"type\" for a\n``Transaction``, useful for sorting, aggregating, or annotating\n``Transactions``. The default ``TransactionType`` is ``MANUAL``, which\nis created automatically by the library, but you can define others, say\nfor bots or certain classes of users.\n\nCurrently, ``TransactionType`` is not used by the code in ``capone`` but\nis provided as a convenience to users who might wish to incorporate this\ninformation into an external report or calculation.\n\nLedgerEntry\n^^^^^^^^^^^\n\n``LedgerEntries`` represent single debit or credit entries in a single\n``Ledger``. ``LedgerEntries`` are grouped together into ``Transactions``\n(see above) with the constraint that the sum of all credit and debit\n``LedgerEntries`` for a given ``Transaction`` must equal zero.\n\n``LedgerEntries`` have a field ``entry_id``, which is a UUID for\nunambiguously referring to a single ``LedgerEntry``.\n\nEvidence Models\n~~~~~~~~~~~~~~~\n\nThe models in this section deal with adding evidence to ``Transactions``\nand searching over that evidence.\n\nTransactionRelatedObject\n^^^^^^^^^^^^^^^^^^^^^^^^\n\nA ``TransactionRelatedObject`` (``TRO``) represents the \"evidence\"\nrelationship that makes the ``capone`` library more useful. A ``TRO``\nlinks a ``Transaction`` to an arbitrary object in the larger app that\nthis library is used in using a generic foreign key. One ``TRO`` links\none ``Transaction`` and one arbitrary object, so we make as many\n``TROs`` as we want pieces of evidence. There are several convenience\nmethods in ``capone.api.queries`` for efficiently querying over\n``Transactions`` based on evidence and evidence objects based on their\n``Transactions`` (see examples below).\n\nLedgerBalance\n^^^^^^^^^^^^^\n\nA ``LedgerBalance`` is similar to a ``TRO`` in that it allows linking\n``ledger`` objects with objects from the wider app that the library is\nused in via generic foreign keys. The purpose of ``LedgerBalance`` is to\ndenormalize for more efficient querying the current sum of debits and\ncredits for an object in a specific Ledger. Therefore, there is only one\n``LedgerBalance`` for each ``(ledger, related_object)`` tuple.\n\nYou should never have to manually create or edit a ``LedgerBalance``:\ndoing so, as well as keeping them up-to-date, is handled by ``capone``\ninternals. For the same reasons, deleting them is not necessary or a\ngood idea.\n\nThe purpose of ``LedgerBalance`` can best be demonstrated by considering\nthe deceptively simple query, \"how many Orders (a non-``capone`` model\nwe presumably created in the app where we include ``capone`` as a\nlibrary) have an Accounts Receivable balance greater than zero?\" One\nwould have to calculate the ledger balance over literally the product of\nall ledgers and all non-``capone`` objects in the database, and then\nfilter them for all those with balances above zero, to answer this\nquestion, which is obviously too expensive. By keeping track of the\nper-``Ledger`` balance for each object used as evidence in a\n``Transaction``, we can much more easily make these queries with\nreasonable overhead.\n\nUsage\n-----\n\nCreating Ledgers\n~~~~~~~~~~~~~~~~\n\nLet's start by creating two common ledger types, \"Accounts Receivable\"\nand \"Revenue\", which usually have transactions between themselves:\n\n::\n\n   >>> from capone.models import Ledger\n   >>> ar = Ledger.objects.create(name='Accounts Receivable', number=1, increased_by_debits=True)\n   <Ledger: Ledger Accounts Receivable>\n   >>> revenue = Ledger.objects.create(name='Revenue', number=2, increased_by_debits=True)\n   <Ledger: Ledger Revenue>\n\nBoth of these accounts are asset accounts, so they're both increased by\ndebits. Please consult the double-entry bookkeeping Wikipedia article or\nthe explanation for ``increased_by_debits`` above for a more in-depth\nexplanation of the \"accounting equation\" and whether debits increase or\ndecrease an account.\n\nAlso, note that the default convention in ``capone`` is to store debits\nas positive numbers and credits as negative numbers. This convention is\ncommon but completely arbitrary. If you want to switch the convention\naround, you can set ``DEBITS_ARE_NEGATIVE`` to ``True`` in your\nsettings.py file. By default, that constant doesn't need to be defined,\nand if it remains undefined, ``capone`` will interpret its value as\n``False``.\n\nFaking Evidence Models\n~~~~~~~~~~~~~~~~~~~~~~\n\nNow let's create a fake Order, so that we have some evidence for these\nledger entries, and a fake User, so we'll have someone to blame for\nthese transactions:\n\n::\n\n   >>> from capone.tests.factories import OrderFactory\n   >>> order = OrderFactory()\n   >>> from capone.tests.factories import UserFactory\n   >>> user = UserFactory()\n\nCreating Transactions\n~~~~~~~~~~~~~~~~~~~~~\n\nWe're now ready to create a simple transaction:\n\n::\n\n   >>> from capone.api.actions import create_transaction\n   >>> from capone.api.actions import credit\n   >>> from capone.api.actions import debit\n   >>> from decimal import Decimal\n   >>> from capone.models import LedgerEntry\n   >>> txn = create_transaction(user, evidence=[order], ledger_entries=[LedgerEntry(amount=debit(Decimal(100)), ledger=ar), LedgerEntry(amount=credit(Decimal(100)), ledger=revenue)])\n   >>> txn.summary()\n   {\n       u'entries': [\n           'LedgerEntry: $100.0000 in Accounts Receivable',\n           'LedgerEntry: $-100.0000 in Revenue',\n       ],\n       u'related_objects': [\n           'TransactionRelatedObject: Order(id=1)',\n       ]\n   }\n\nNote that we use the helper functions ``credit`` and ``debit`` with\npositive numbers to keep the signs consistent in our code. There should\nbe no reason to use negative numbers with ``capone``.\n\nNote also that the value for the credit and debit is the same: $100. If\nwe tried to create a transaction with mismatching amounts, we would get\nan error:\n\n::\n\n   >>> create_transaction(user, evidence=[order], ledger_entries=[LedgerEntry(amount=debit(Decimal(100)), ledger=ar), LedgerEntry(amount=credit(Decimal(101)), ledger=revenue)])\n   ---------------------------------------------------------------------------\n   TransactionBalanceException               Traceback (most recent call last)\n\n   [...]\n\n   TransactionBalanceException: Credits do not equal debits. Mis-match of -1.\n\nSo the consistency required of double-entry bookkeeping is automatically\nkept.\n\nThere are many other options for ``create_transaction``: see below or\nits docstring for details.\n\nLedger Balances\n~~~~~~~~~~~~~~~\n\n``capone`` keeps track of the balance in each ledger for each evidence\nobject in a denormalized and efficient way. Let's use this behavior to\nget the balances of our ledgers as well as the balances in each ledger\nfor our ``order`` object:\n\n::\n\n   >>> from capone.api.queries import get_balances_for_object\n\n   >>> get_balances_for_object(order)\n   defaultdict(<function <lambda> at 0x7fd7ecfa96e0>, {<Ledger: Ledger Accounts Receivable>: Decimal('100.0000'), <Ledger: Ledger Revenue>: Decimal('-100.0000')})\n\n   >>> ar.get_balance()\n   Decimal('100.0000')\n\n   >>> revenue.get_balance()\n   Decimal('-100.0000')\n\nVoiding Transactions\n~~~~~~~~~~~~~~~~~~~~\n\nWe can also void that transaction, which enters a transaction with the\nsame evidence but with all values of the opposite sign:\n\n::\n\n   >>> from capone.api.actions import void_transaction\n   >>> void = void_transaction(txn, user)\n   <Transaction: Transaction 9cd85014-c588-43ff-9532-a6fc2429069e>\n\n   >>> void_transaction(txn, user)\n   ---------------------------------------------------------------------------\n   UnvoidableTransactionException            Traceback (most recent call last)\n\n   [...]\n\n   UnvoidableTransactionException: Cannot void the same Transaction #(e0842107-3a5b-4487-9b86-d1a5d7ab77b4) more than once.\n\n   >>> void.summary()\n   {u'entries': ['LedgerEntry: $-100.0000 in Accounts Receivable',\n     'LedgerEntry: $100.0000 in Revenue'],\n    u'related_objects': ['TransactionRelatedObject: Order(id=1)']}\n\n   >>> txn.voids\n\n   >>> void.voids\n   <Transaction: Transaction e0842107-3a5b-4487-9b86-d1a5d7ab77b4>\n\nNote the new balances for evidence objects and ``Ledgers``:\n\n::\n\n   >>> get_balances_for_object(order)\n   defaultdict(<function <lambda> at 0x7fd7ecfa9758>, {<Ledger: Ledger Accounts Receivable>: Decimal('0.0000'), <Ledger: Ledger Revenue>: Decimal('0.0000')})\n\n   >>> ar.get_balance()\n   Decimal('0.0000')\n\n   >>> revenue.get_balance()\n   Decimal('0.0000')\n\nTransaction Types\n~~~~~~~~~~~~~~~~~\n\nYou can label a ``Transaction`` using a foreign key to the\n``TransactionType`` to, say, distinguish between manually made\n``Transactions`` and those made by a bot, or between ``Transactions``\nthat represent two different types of financial transaction, such as\n\"Reconciliation\" and \"Revenue Recognition\".\n\nBy default, ``Transactions`` are of a special, auto-generated \"manual\"\ntype:\n\n::\n\n   >>> txn.type\n   <TransactionType: Transaction Type Manual>\n\nbut you can create and assign ``TransactionTypes`` when creating\n``Transactions``:\n\n::\n\n   >>> from capone.models import TransactionType\n   >>> new_type = TransactionType.objects.create(name='New type')\n   >>> txn = create_transaction(user, evidence=[order], ledger_entries=[LedgerEntry(amount=debit(Decimal(100)), ledger=ar), LedgerEntry(amount=credit(Decimal(100)), ledger=revenue)], type=new_type)\n   >>> txn.type\n   <TransactionType: Transaction Type New type>\n\nQuerying Transactions\n~~~~~~~~~~~~~~~~~~~~~\n\nGetting Balances\n^^^^^^^^^^^^^^^^\n\n``Transaction`` has a ``summary`` method to summarize the data on the\nmany models that can link to it:\n\n::\n\n   >>> txn.summary()\n   {u'entries': ['LedgerEntry: $100.0000 in Accounts Receivable',\n     'LedgerEntry: $-100.0000 in Revenue'],\n    u'related_objects': ['TransactionRelatedObject: Order(id=1)']}\n\nTo get the balance for a ``Ledger``, use its ``get_balance`` method:\n\n::\n\n   >>> ar.get_balance()\n   Decimal('100.0000')\n\nTo efficiently get the balance of all transactions with a particular\nobject as evidence, use ``get_balances_for_objects``:\n\n::\n\n   >>> get_balances_for_object(order)\n   defaultdict(<function <lambda> at 0x7fd7ecfa9230>, {<Ledger: Ledger Accounts Receivable>: Decimal('100.0000'), <Ledger: Ledger Revenue>: Decimal('-100.0000')})\n\n``Transactions`` are validated before they are created, but if you need\nto do this manually for some reason, use the ``validate_transaction``\nfunction, which has the same prototype as ``create_transaction``:\n\n::\n\n   >>> validate_transaction(user, evidence=[order], ledger_entries=[LedgerEntry(amount=debit(Decimal(100)), ledger=ar), LedgerEntry(amount=credit(Decimal(100)), ledger=revenue)], type=new_type)\n   >>> validate_transaction(user, evidence=[order], ledger_entries=[LedgerEntry(amount=debit(Decimal(100)), ledger=ar), LedgerEntry(amount=credit(Decimal(101)), ledger=revenue)], type=new_type)\n   ---------------------------------------------------------------------------\n   TransactionBalanceException               Traceback (most recent call last)\n   <ipython-input-64-07b6d139bb37> in <module>()\n   ----> 1 validate_transaction(user, evidence=[order], ledger_entries=[LedgerEntry(amount=debit(Decimal(100)), ledger=ar), LedgerEntry(amount=credit(Decimal(101)), ledger=revenue)], type=new_type)\n\n   /home/hunter/capone/capone/api/queries.pyc in validate_transaction(user, evidence, ledger_entries, notes, type, posted_timestamp)\n        67     if total != Decimal(0):\n        68         raise TransactionBalanceException(\n   ---> 69             \"Credits do not equal debits. Mis-match of %s.\" % total)\n        70\n        71     if not ledger_entries:\n\n   TransactionBalanceException: Credits do not equal debits. Mis-match of -1.\n\nQueries\n~~~~~~~\n\nAlong with the query possibilities from the Django ORM, ``capone``\nprovides ``Transaction.filter_by_related_objects`` for finding\n``Transactions`` that are related to certain models as evidence.\n\n::\n\n   >>> Transaction.objects.count()\n   5\n\n   >>> Transaction.objects.filter_by_related_objects([order]).count()\n   5\n\n   >>> order2 = OrderFactory()\n\n   >>> create_transaction(user, evidence=[order2], ledger_entries=[LedgerEntry(amount=debit(Decimal(100)), ledger=ar), LedgerEntry(amount=credit(Decimal(100)), ledger=revenue)])\n   <Transaction: Transaction 68a4adb1-b898-493f-b5f3-4fe7132dd28d>\n\n   >>> Transaction.objects.filter_by_related_objects([order2]).count()\n   1\n\n``filter_by_related_objects`` is defined on a custom ``QuerySet``\nprovided for ``Transaction``, so calls to it can be chained like\nordinary ``QuerySet`` function calls:\n\n::\n\n   >>> create_transaction(user, evidence=[order2], ledger_entries=[LedgerEntry(amount=debit(Decimal(100)), ledger=ar), LedgerEntry(amount=credit(Decimal(100)), ledger=revenue)])\n   <Transaction: Transaction 92049712-4982-4718-bc71-a405b0d762ac>\n\n   >>> Transaction.objects.filter_by_related_objects([order2]).count()\n   2\n\n   >>> Transaction.objects.filter_by_related_objects([order2]).filter(transaction_id='92049712-4982-4718-bc71-a405b0d762ac').count()\n   1\n\n``filter_by_related_objects`` takes an optional ``match_type`` argument,\nwhich is of type ``MatchType(Enum)`` that allows one to filter in\ndifferent ways, namely whether the matching transactions may have \"any\",\n\"all\", \"none\", or \"exactly\" the evidence provided, determined by\n``MatchTypes`` ``ANY``, ``ALL``, ``NONE``, and ``EXACT``, respectively.\n\nAsserting over Transactions\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nFor writing tests, the method\n``assert_transaction_in_ledgers_for_amounts_with_evidence`` is provided\nfor convenience. As its name implies, it allows asserting the existence\nof exactly one ``Transaction`` with the ledger amounts, evidence, and\nother fields on Ledger provided to the method.\n\n::\n\n   >>> create_transaction(user, evidence=[order], ledger_entries=[LedgerEntry(amount=debit(Decimal(100)), ledger=ar), LedgerEntry(amount=credit(Decimal(100)), ledger=revenue)])\n   <Transaction: Transaction b3e73f1d-6b10-4597-b19b-84800839d5b3>\n   >>> with assert_raises(Transaction.DoesNotExist):\n   ...     assert_transaction_in_ledgers_for_amounts_with_evidence(ledger_amount_pairs=[(revenue.name, credit(Decimal(100))), (ar.name, debit(Decimal(100)))], evidence=[])\n   ...\n   >>> assert_transaction_in_ledgers_for_amounts_with_evidence(ledger_amount_pairs=[(revenue.name, credit(Decimal(100))), (ar.name, debit(Decimal(100)))], evidence=[order])\n   >>> with assert_raises(Transaction.DoesNotExist):\n   ...     assert_transaction_in_ledgers_for_amounts_with_evidence(ledger_amount_pairs=[(revenue.name, credit(Decimal(100))), (ar.name, debit(Decimal(100)))], evidence=[order])\n   ...\n   Traceback (most recent call last):\n     File \"<console>\", line 2, in <module>\n       File \"/usr/lib/python2.7/unittest/case.py\", line 116, in __exit__\n           \"{0} not raised\".format(exc_name))\n           AssertionError: DoesNotExist not raised\n\nYou can see\n``capone.tests.test_assert_transaction_in_ledgers_for_amounts_with_evidence``\nfor more examples!\n\nImage Credits\n-------------\n\nImage courtesy\n`Officer <https://commons.wikimedia.org/wiki/User:Officer>`__ on\n`Wikipedia <https://commons.wikimedia.org/wiki/File:Al_Capone_in_Florida.jpg>`__.\nThis work was created by a government unit (including state, county, and\nmunicipal government agencies) of the U.S. state of Florida. It is a\npublic record that was not created by an agency which state law has\nallowed to claim copyright and is therefore in the public domain in the\nUnited States.\n\n.. |Al Capone's Miami Mugshot| image:: Al_Capone_in_Florida.jpg\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/counsyl/capone", "keywords": "", "license": "Copyright Counsyl, Inc.", "maintainer": "", "maintainer_email": "", "name": "capone", "package_url": "https://pypi.org/project/capone/", "platform": "", "project_url": "https://pypi.org/project/capone/", "project_urls": {"Homepage": "https://github.com/counsyl/capone"}, "release_url": "https://pypi.org/project/capone/2.0.2/", "requires_dist": null, "requires_python": "", "summary": "Django app representing a double-entry accounting ledger.", "version": "2.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><em>Never let your books land you in the pen.</em></p>\n<p><img alt=\"Al Capone's Miami Mugshot\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f03d2c5606241d49e49981e5e63b55786cd34144/416c5f4361706f6e655f696e5f466c6f726964612e6a7067\"></p>\n<p><tt>Capone</tt> is a library that provides double-entry bookkeeping (the\nfoundation of all modern accounting) for Django with the ability to link\neach recorded transaction to zero or more other Django models as\nevidence for that transaction.</p>\n<div id=\"introduction\">\n<h2>Introduction</h2>\n<p>In double-entry bookkeeping (DEB), all recordable events (purchases,\nsales, equipment depreciation, bad debt markdowns, etc.) are tracked as\n\u201cledger entries\u201d or \u201ctransactions\u201d in \u201cledgers\u201d. Each ledger entry is\nmade up of one or more \u201ccredit\u201d and one or more \u201cdebit\u201d entries. For the\nsake of this brief example, you can think of credits as increasing the\namount of money recorded in a ledger and a debit decreasing it. With\nthat assumption, the central idea behind double-entry bookkeeping is\nthat the sum of every ledger entry\u2019s debits must equal the sum of its\ncredits. <tt>capone</tt> implements a double-entry bookkeeping system by\nproviding an API for checking that all created entries satisfy this\ncondition or rolling back the transaction if not.</p>\n<p>In addition to this standard bookkeeping functionality, <tt>capone</tt> also\nallows any number of arbitrary objects to be attached, via generic\nforeign keys, to a ledger entry as \u201cevidence\u201d for that transaction\u2019s\nhaving happened. For instance, a transaction recording a bank deposit\npaying for several medical tests at a time from an insurance company to\nyour medical testing company could be linked to the original <tt>Order</tt>\nobjects that recorded the test. <tt>capone</tt> also provides an API for the\nefficient querying of ledger entries by evidence.</p>\n<p>For more information on the concept of double-entry bookkeeping itself,\nwe recommend the Wikipedia article:\n<a href=\"https://en.wikipedia.org/wiki/Double-entry_bookkeeping_system\" rel=\"nofollow\">https://en.wikipedia.org/wiki/Double-entry_bookkeeping_system</a>.</p>\n</div>\n<div id=\"local-development\">\n<h2>Local Development</h2>\n<div id=\"setup\">\n<h3>Setup:</h3>\n<p>First, you must set up your working environment:</p>\n<pre>make setup\n</pre>\n<p>This will build a local virtualenv and all other requirements for local\ndevelopment.</p>\n</div>\n<div id=\"running-commands\">\n<h3>Running Commands:</h3>\n<p>The following commands are available for interacting with the app:</p>\n<p>To start a shell instance so that you can interact with the app via the\nORM:</p>\n<pre>make shell\n</pre>\n<p>Note: before any of the following instructions, you may have to run\n<tt>make develop</tt> to set up a postgres database for this app.</p>\n<p>First, activate a virtualenv so that your commands have access to the\nenvironment built by <tt>make setup</tt>:</p>\n<p>From the repository root, run:</p>\n<pre>source .venv/bin/activate\n</pre>\n<p>Then you should be free to run</p>\n<pre>./manage.py makemigrations --settings=capone.tests.settings\n</pre>\n<p>or any other <tt>manage.py</tt> command, even those in the Makefile.</p>\n<p>To run individual tests, use the following:</p>\n<pre>./manage.py test --settings=capone.tests.settings capone.tests\n</pre>\n<p>Notice the <tt><span class=\"pre\">--settings=capone.tests.settings</span></tt> argument: because this\nrepository is a django sub-module, it wouldn\u2019t make sense for it to come\nwith its own default <tt>settings.py</tt> file. Instead, it ships with one\nused to run its tests. To use <tt>manage.py</tt>, we have to pass an import\npath to the settings file explicitly.</p>\n</div>\n</div>\n<div id=\"models\">\n<h2>Models</h2>\n<p>Let\u2019s introduce the models provided by <tt>capone</tt> and how they relate to\none another.</p>\n<p>Note that all objects in this library have <tt>created_at</tt> and\n<tt>modified_at</tt> fields that are <tt>auto_now_add</tt> and <tt>auto_now</tt>,\nrespectively.</p>\n<div id=\"accounting-models\">\n<h3>Accounting Models</h3>\n<p>The models in this section are those that correspond most to well known\naccounting concepts, i.e. those involved in keeping accounts using the\nprinciples of double-entry bookkeeping. They model ledgers, journal\nentries, credits and debits, and any metadata one wishes to store with\nthese objects.</p>\n<div id=\"ledger\">\n<h4>Ledger</h4>\n<p>A <tt>Ledger</tt> is the top-most level of organization of information in\ndouble-entry bookkeeping as well as the <tt>capone</tt> app. Most ledgers\nhave names familiar to those with any knowledge of accounting, such as\n\u201crevenue\u201d or \u201caccounts receivable\u201d.</p>\n<p><tt>Ledgers</tt> are synonymous with the accounting concept of an \u201caccount\u201d,\nso you may see references to accounts in this documentation or elsewhere\nin the accounting literature.</p>\n<p>As a data structure, a <tt>Ledger</tt> in this library is little more than a\nname, description, and unique number: <tt>LedgerEntries</tt> (see below)\npoint to a <tt>Ledger</tt> to represent their being \u201cin\u201d a <tt>Ledger</tt>.\n<tt>Transactions</tt> (see below also) that are \u201cbetween\u201d two <tt>Ledgers</tt>\nhave a <tt>LedgerEntry</tt> pointing to one <tt>Ledger</tt> and another\n<tt>LedgerEntry</tt> pointing to the other <tt>Ledger</tt>.</p>\n<div id=\"increased-by-debits\">\n<h5><tt>increased_by_debits</tt></h5>\n<p><tt>Ledger</tt> also has the sometimes confusing field\n<tt>increased_by_debits</tt>. All <tt>Ledgers</tt> are of one of two types: either\ndebits increase the \u201cvalue\u201d of an account or credits do. By convention,\nasset and expense accounts are of the former type, while liabilities,\nequity, and revenue are of the latter: in short, an increase to an\n\u201casset\u201d-type account is a debit, and an increase to a \u201cliability\u201d or\n\u201cequity\u201d-type account is a credit.</p>\n<p>Here\u2019s a handy mnemonic for the two types of accounts: The accounting\nequation says (by definition) that:</p>\n<pre>assets == liabilities + owner equity\n</pre>\n<p>The terms on the right of the equals sign are increased by debits, and\nterms on the left of the equals sign are decreased by debits. We can\ntherefore use the accounting equation to know whether to use debits or\ncredits to model an increase in a ledger.</p>\n<p><strong>So because debits and credits mean different things in different types\nof accounts, we can have a transaction with an \u201cequal and opposite\u201d\ncredit and debit pair of the same currency amount, but that still\nrepresents a net increase in the value of a company: a debit in Accounts\nReceivable and a credit in Revenue increases both accounts while\nsatisfying the accounting equation.</strong></p>\n<p>Currently, field <tt>increased_by_debits</tt> is not used by the code in\n<tt>capone</tt> but is provided as a convenience to users who might wish to\nincorporate this information into an external report or calculation.</p>\n</div>\n</div>\n<div id=\"transaction\">\n<h4>Transaction</h4>\n<p>A <tt>Transaction</tt> is a record of a discrete financial action,\nrepresented by a collection of debits and credits whose sums equal one\nanother. Practically all models in <tt>capone</tt> link to or through\n<tt>Transaction</tt>: in a sense you could say it\u2019s the main model provided\nby <tt>capone</tt>. A <tt>Transaction</tt> can sometimes be referred to as a\n\u201cjournal entry\u201d.</p>\n<p>The <tt>Transaction</tt> model records debits and credits by linking to\n<tt>LedgerEntries</tt>, which include currency amounts of the proper sign,\nand those <tt>LedgerEntries</tt> themselves point to <tt>Ledger</tt>. In other\nwords, <tt>Transaction</tt> and <tt>Ledger</tt> are linked in a many-to-many\nfashion by going through <tt>LedgerEntry</tt> as a custom through model. The\n\u201cproper sign\u201d part is taken care of by the <tt>credit</tt> and <tt>debit</tt>\nconvenience methods (see examples below).</p>\n<p><tt>Transactions</tt> should never be deleted. Instead, a new <tt>Transaction</tt>\nwith debits and credits swapped should be created using\n<tt>capone.api.actions.void_transaction</tt> to negate the effect of the\n<tt>Transaction</tt> you\u2019d like to remove. The <tt>voids</tt> field on the new\n<tt>Transaction</tt> will automatically be filled in with the old\n<tt>Transaction</tt> you wish to remove. By this method, you\u2019ll never have to\ndelete data from your system as a part of normal operation, which mimics\none of the many benefits of traditional, non-computerized double-entry\nbookkeeping.</p>\n<p><tt>Transaction</tt> also has the following fields to provide metadata for\neach transaction:</p>\n<ul>\n<li><tt>created_by</tt>: The user who created this <tt>Transaction</tt>.</li>\n<li><tt>notes</tt>: A free-form text field for adding to a <tt>Transaction</tt> any\ninformation not expressed in the numerous metadata fields.</li>\n<li><tt>posted_timestamp</tt>: The time a <tt>Transaction</tt> should be considered\nvalid from. <tt>capone.api.actions.create_transaction</tt> automatically\ndeals with filling in this value with the current time. You can\nchange this value to post-date or back-date <tt>Transactions</tt> because\n<tt>created_at</tt> will always represent the true object creation time.</li>\n<li><tt>transaction_id</tt>: A Universally Unique Identifier (UUID) for the\n<tt>Transaction</tt>, useful for unambiguously referring to a\n<tt>Transaction</tt> without using primary keys or other database\ninternals.</li>\n<li><tt>type</tt>: A user-defined type for the <tt>Transaction</tt> (see the\n<tt>TransactionType</tt> model below).</li>\n</ul>\n</div>\n<div id=\"transactiontype\">\n<h4>TransactionType</h4>\n<p>A <tt>TransactionType</tt> is a user-defined, human-readable \u201ctype\u201d for a\n<tt>Transaction</tt>, useful for sorting, aggregating, or annotating\n<tt>Transactions</tt>. The default <tt>TransactionType</tt> is <tt>MANUAL</tt>, which\nis created automatically by the library, but you can define others, say\nfor bots or certain classes of users.</p>\n<p>Currently, <tt>TransactionType</tt> is not used by the code in <tt>capone</tt> but\nis provided as a convenience to users who might wish to incorporate this\ninformation into an external report or calculation.</p>\n</div>\n<div id=\"ledgerentry\">\n<h4>LedgerEntry</h4>\n<p><tt>LedgerEntries</tt> represent single debit or credit entries in a single\n<tt>Ledger</tt>. <tt>LedgerEntries</tt> are grouped together into <tt>Transactions</tt>\n(see above) with the constraint that the sum of all credit and debit\n<tt>LedgerEntries</tt> for a given <tt>Transaction</tt> must equal zero.</p>\n<p><tt>LedgerEntries</tt> have a field <tt>entry_id</tt>, which is a UUID for\nunambiguously referring to a single <tt>LedgerEntry</tt>.</p>\n</div>\n</div>\n<div id=\"evidence-models\">\n<h3>Evidence Models</h3>\n<p>The models in this section deal with adding evidence to <tt>Transactions</tt>\nand searching over that evidence.</p>\n<div id=\"transactionrelatedobject\">\n<h4>TransactionRelatedObject</h4>\n<p>A <tt>TransactionRelatedObject</tt> (<tt>TRO</tt>) represents the \u201cevidence\u201d\nrelationship that makes the <tt>capone</tt> library more useful. A <tt>TRO</tt>\nlinks a <tt>Transaction</tt> to an arbitrary object in the larger app that\nthis library is used in using a generic foreign key. One <tt>TRO</tt> links\none <tt>Transaction</tt> and one arbitrary object, so we make as many\n<tt>TROs</tt> as we want pieces of evidence. There are several convenience\nmethods in <tt>capone.api.queries</tt> for efficiently querying over\n<tt>Transactions</tt> based on evidence and evidence objects based on their\n<tt>Transactions</tt> (see examples below).</p>\n</div>\n<div id=\"ledgerbalance\">\n<h4>LedgerBalance</h4>\n<p>A <tt>LedgerBalance</tt> is similar to a <tt>TRO</tt> in that it allows linking\n<tt>ledger</tt> objects with objects from the wider app that the library is\nused in via generic foreign keys. The purpose of <tt>LedgerBalance</tt> is to\ndenormalize for more efficient querying the current sum of debits and\ncredits for an object in a specific Ledger. Therefore, there is only one\n<tt>LedgerBalance</tt> for each <tt>(ledger, related_object)</tt> tuple.</p>\n<p>You should never have to manually create or edit a <tt>LedgerBalance</tt>:\ndoing so, as well as keeping them up-to-date, is handled by <tt>capone</tt>\ninternals. For the same reasons, deleting them is not necessary or a\ngood idea.</p>\n<p>The purpose of <tt>LedgerBalance</tt> can best be demonstrated by considering\nthe deceptively simple query, \u201chow many Orders (a non-<tt>capone</tt> model\nwe presumably created in the app where we include <tt>capone</tt> as a\nlibrary) have an Accounts Receivable balance greater than zero?\u201d One\nwould have to calculate the ledger balance over literally the product of\nall ledgers and all non-<tt>capone</tt> objects in the database, and then\nfilter them for all those with balances above zero, to answer this\nquestion, which is obviously too expensive. By keeping track of the\nper-<tt>Ledger</tt> balance for each object used as evidence in a\n<tt>Transaction</tt>, we can much more easily make these queries with\nreasonable overhead.</p>\n</div>\n</div>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div id=\"creating-ledgers\">\n<h3>Creating Ledgers</h3>\n<p>Let\u2019s start by creating two common ledger types, \u201cAccounts Receivable\u201d\nand \u201cRevenue\u201d, which usually have transactions between themselves:</p>\n<pre>&gt;&gt;&gt; from capone.models import Ledger\n&gt;&gt;&gt; ar = Ledger.objects.create(name='Accounts Receivable', number=1, increased_by_debits=True)\n&lt;Ledger: Ledger Accounts Receivable&gt;\n&gt;&gt;&gt; revenue = Ledger.objects.create(name='Revenue', number=2, increased_by_debits=True)\n&lt;Ledger: Ledger Revenue&gt;\n</pre>\n<p>Both of these accounts are asset accounts, so they\u2019re both increased by\ndebits. Please consult the double-entry bookkeeping Wikipedia article or\nthe explanation for <tt>increased_by_debits</tt> above for a more in-depth\nexplanation of the \u201caccounting equation\u201d and whether debits increase or\ndecrease an account.</p>\n<p>Also, note that the default convention in <tt>capone</tt> is to store debits\nas positive numbers and credits as negative numbers. This convention is\ncommon but completely arbitrary. If you want to switch the convention\naround, you can set <tt>DEBITS_ARE_NEGATIVE</tt> to <tt>True</tt> in your\nsettings.py file. By default, that constant doesn\u2019t need to be defined,\nand if it remains undefined, <tt>capone</tt> will interpret its value as\n<tt>False</tt>.</p>\n</div>\n<div id=\"faking-evidence-models\">\n<h3>Faking Evidence Models</h3>\n<p>Now let\u2019s create a fake Order, so that we have some evidence for these\nledger entries, and a fake User, so we\u2019ll have someone to blame for\nthese transactions:</p>\n<pre>&gt;&gt;&gt; from capone.tests.factories import OrderFactory\n&gt;&gt;&gt; order = OrderFactory()\n&gt;&gt;&gt; from capone.tests.factories import UserFactory\n&gt;&gt;&gt; user = UserFactory()\n</pre>\n</div>\n<div id=\"creating-transactions\">\n<h3>Creating Transactions</h3>\n<p>We\u2019re now ready to create a simple transaction:</p>\n<pre>&gt;&gt;&gt; from capone.api.actions import create_transaction\n&gt;&gt;&gt; from capone.api.actions import credit\n&gt;&gt;&gt; from capone.api.actions import debit\n&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from capone.models import LedgerEntry\n&gt;&gt;&gt; txn = create_transaction(user, evidence=[order], ledger_entries=[LedgerEntry(amount=debit(Decimal(100)), ledger=ar), LedgerEntry(amount=credit(Decimal(100)), ledger=revenue)])\n&gt;&gt;&gt; txn.summary()\n{\n    u'entries': [\n        'LedgerEntry: $100.0000 in Accounts Receivable',\n        'LedgerEntry: $-100.0000 in Revenue',\n    ],\n    u'related_objects': [\n        'TransactionRelatedObject: Order(id=1)',\n    ]\n}\n</pre>\n<p>Note that we use the helper functions <tt>credit</tt> and <tt>debit</tt> with\npositive numbers to keep the signs consistent in our code. There should\nbe no reason to use negative numbers with <tt>capone</tt>.</p>\n<p>Note also that the value for the credit and debit is the same: $100. If\nwe tried to create a transaction with mismatching amounts, we would get\nan error:</p>\n<pre>&gt;&gt;&gt; create_transaction(user, evidence=[order], ledger_entries=[LedgerEntry(amount=debit(Decimal(100)), ledger=ar), LedgerEntry(amount=credit(Decimal(101)), ledger=revenue)])\n---------------------------------------------------------------------------\nTransactionBalanceException               Traceback (most recent call last)\n\n[...]\n\nTransactionBalanceException: Credits do not equal debits. Mis-match of -1.\n</pre>\n<p>So the consistency required of double-entry bookkeeping is automatically\nkept.</p>\n<p>There are many other options for <tt>create_transaction</tt>: see below or\nits docstring for details.</p>\n</div>\n<div id=\"ledger-balances\">\n<h3>Ledger Balances</h3>\n<p><tt>capone</tt> keeps track of the balance in each ledger for each evidence\nobject in a denormalized and efficient way. Let\u2019s use this behavior to\nget the balances of our ledgers as well as the balances in each ledger\nfor our <tt>order</tt> object:</p>\n<pre>&gt;&gt;&gt; from capone.api.queries import get_balances_for_object\n\n&gt;&gt;&gt; get_balances_for_object(order)\ndefaultdict(&lt;function &lt;lambda&gt; at 0x7fd7ecfa96e0&gt;, {&lt;Ledger: Ledger Accounts Receivable&gt;: Decimal('100.0000'), &lt;Ledger: Ledger Revenue&gt;: Decimal('-100.0000')})\n\n&gt;&gt;&gt; ar.get_balance()\nDecimal('100.0000')\n\n&gt;&gt;&gt; revenue.get_balance()\nDecimal('-100.0000')\n</pre>\n</div>\n<div id=\"voiding-transactions\">\n<h3>Voiding Transactions</h3>\n<p>We can also void that transaction, which enters a transaction with the\nsame evidence but with all values of the opposite sign:</p>\n<pre>&gt;&gt;&gt; from capone.api.actions import void_transaction\n&gt;&gt;&gt; void = void_transaction(txn, user)\n&lt;Transaction: Transaction 9cd85014-c588-43ff-9532-a6fc2429069e&gt;\n\n&gt;&gt;&gt; void_transaction(txn, user)\n---------------------------------------------------------------------------\nUnvoidableTransactionException            Traceback (most recent call last)\n\n[...]\n\nUnvoidableTransactionException: Cannot void the same Transaction #(e0842107-3a5b-4487-9b86-d1a5d7ab77b4) more than once.\n\n&gt;&gt;&gt; void.summary()\n{u'entries': ['LedgerEntry: $-100.0000 in Accounts Receivable',\n  'LedgerEntry: $100.0000 in Revenue'],\n u'related_objects': ['TransactionRelatedObject: Order(id=1)']}\n\n&gt;&gt;&gt; txn.voids\n\n&gt;&gt;&gt; void.voids\n&lt;Transaction: Transaction e0842107-3a5b-4487-9b86-d1a5d7ab77b4&gt;\n</pre>\n<p>Note the new balances for evidence objects and <tt>Ledgers</tt>:</p>\n<pre>&gt;&gt;&gt; get_balances_for_object(order)\ndefaultdict(&lt;function &lt;lambda&gt; at 0x7fd7ecfa9758&gt;, {&lt;Ledger: Ledger Accounts Receivable&gt;: Decimal('0.0000'), &lt;Ledger: Ledger Revenue&gt;: Decimal('0.0000')})\n\n&gt;&gt;&gt; ar.get_balance()\nDecimal('0.0000')\n\n&gt;&gt;&gt; revenue.get_balance()\nDecimal('0.0000')\n</pre>\n</div>\n<div id=\"transaction-types\">\n<h3>Transaction Types</h3>\n<p>You can label a <tt>Transaction</tt> using a foreign key to the\n<tt>TransactionType</tt> to, say, distinguish between manually made\n<tt>Transactions</tt> and those made by a bot, or between <tt>Transactions</tt>\nthat represent two different types of financial transaction, such as\n\u201cReconciliation\u201d and \u201cRevenue Recognition\u201d.</p>\n<p>By default, <tt>Transactions</tt> are of a special, auto-generated \u201cmanual\u201d\ntype:</p>\n<pre>&gt;&gt;&gt; txn.type\n&lt;TransactionType: Transaction Type Manual&gt;\n</pre>\n<p>but you can create and assign <tt>TransactionTypes</tt> when creating\n<tt>Transactions</tt>:</p>\n<pre>&gt;&gt;&gt; from capone.models import TransactionType\n&gt;&gt;&gt; new_type = TransactionType.objects.create(name='New type')\n&gt;&gt;&gt; txn = create_transaction(user, evidence=[order], ledger_entries=[LedgerEntry(amount=debit(Decimal(100)), ledger=ar), LedgerEntry(amount=credit(Decimal(100)), ledger=revenue)], type=new_type)\n&gt;&gt;&gt; txn.type\n&lt;TransactionType: Transaction Type New type&gt;\n</pre>\n</div>\n<div id=\"querying-transactions\">\n<h3>Querying Transactions</h3>\n<h3 id=\"getting-balances\"><span class=\"section-subtitle\">Getting Balances</span></h3>\n<p><tt>Transaction</tt> has a <tt>summary</tt> method to summarize the data on the\nmany models that can link to it:</p>\n<pre>&gt;&gt;&gt; txn.summary()\n{u'entries': ['LedgerEntry: $100.0000 in Accounts Receivable',\n  'LedgerEntry: $-100.0000 in Revenue'],\n u'related_objects': ['TransactionRelatedObject: Order(id=1)']}\n</pre>\n<p>To get the balance for a <tt>Ledger</tt>, use its <tt>get_balance</tt> method:</p>\n<pre>&gt;&gt;&gt; ar.get_balance()\nDecimal('100.0000')\n</pre>\n<p>To efficiently get the balance of all transactions with a particular\nobject as evidence, use <tt>get_balances_for_objects</tt>:</p>\n<pre>&gt;&gt;&gt; get_balances_for_object(order)\ndefaultdict(&lt;function &lt;lambda&gt; at 0x7fd7ecfa9230&gt;, {&lt;Ledger: Ledger Accounts Receivable&gt;: Decimal('100.0000'), &lt;Ledger: Ledger Revenue&gt;: Decimal('-100.0000')})\n</pre>\n<p><tt>Transactions</tt> are validated before they are created, but if you need\nto do this manually for some reason, use the <tt>validate_transaction</tt>\nfunction, which has the same prototype as <tt>create_transaction</tt>:</p>\n<pre>&gt;&gt;&gt; validate_transaction(user, evidence=[order], ledger_entries=[LedgerEntry(amount=debit(Decimal(100)), ledger=ar), LedgerEntry(amount=credit(Decimal(100)), ledger=revenue)], type=new_type)\n&gt;&gt;&gt; validate_transaction(user, evidence=[order], ledger_entries=[LedgerEntry(amount=debit(Decimal(100)), ledger=ar), LedgerEntry(amount=credit(Decimal(101)), ledger=revenue)], type=new_type)\n---------------------------------------------------------------------------\nTransactionBalanceException               Traceback (most recent call last)\n&lt;ipython-input-64-07b6d139bb37&gt; in &lt;module&gt;()\n----&gt; 1 validate_transaction(user, evidence=[order], ledger_entries=[LedgerEntry(amount=debit(Decimal(100)), ledger=ar), LedgerEntry(amount=credit(Decimal(101)), ledger=revenue)], type=new_type)\n\n/home/hunter/capone/capone/api/queries.pyc in validate_transaction(user, evidence, ledger_entries, notes, type, posted_timestamp)\n     67     if total != Decimal(0):\n     68         raise TransactionBalanceException(\n---&gt; 69             \"Credits do not equal debits. Mis-match of %s.\" % total)\n     70\n     71     if not ledger_entries:\n\nTransactionBalanceException: Credits do not equal debits. Mis-match of -1.\n</pre>\n</div>\n<div id=\"queries\">\n<h3>Queries</h3>\n<p>Along with the query possibilities from the Django ORM, <tt>capone</tt>\nprovides <tt>Transaction.filter_by_related_objects</tt> for finding\n<tt>Transactions</tt> that are related to certain models as evidence.</p>\n<pre>&gt;&gt;&gt; Transaction.objects.count()\n5\n\n&gt;&gt;&gt; Transaction.objects.filter_by_related_objects([order]).count()\n5\n\n&gt;&gt;&gt; order2 = OrderFactory()\n\n&gt;&gt;&gt; create_transaction(user, evidence=[order2], ledger_entries=[LedgerEntry(amount=debit(Decimal(100)), ledger=ar), LedgerEntry(amount=credit(Decimal(100)), ledger=revenue)])\n&lt;Transaction: Transaction 68a4adb1-b898-493f-b5f3-4fe7132dd28d&gt;\n\n&gt;&gt;&gt; Transaction.objects.filter_by_related_objects([order2]).count()\n1\n</pre>\n<p><tt>filter_by_related_objects</tt> is defined on a custom <tt>QuerySet</tt>\nprovided for <tt>Transaction</tt>, so calls to it can be chained like\nordinary <tt>QuerySet</tt> function calls:</p>\n<pre>&gt;&gt;&gt; create_transaction(user, evidence=[order2], ledger_entries=[LedgerEntry(amount=debit(Decimal(100)), ledger=ar), LedgerEntry(amount=credit(Decimal(100)), ledger=revenue)])\n&lt;Transaction: Transaction 92049712-4982-4718-bc71-a405b0d762ac&gt;\n\n&gt;&gt;&gt; Transaction.objects.filter_by_related_objects([order2]).count()\n2\n\n&gt;&gt;&gt; Transaction.objects.filter_by_related_objects([order2]).filter(transaction_id='92049712-4982-4718-bc71-a405b0d762ac').count()\n1\n</pre>\n<p><tt>filter_by_related_objects</tt> takes an optional <tt>match_type</tt> argument,\nwhich is of type <tt>MatchType(Enum)</tt> that allows one to filter in\ndifferent ways, namely whether the matching transactions may have \u201cany\u201d,\n\u201call\u201d, \u201cnone\u201d, or \u201cexactly\u201d the evidence provided, determined by\n<tt>MatchTypes</tt> <tt>ANY</tt>, <tt>ALL</tt>, <tt>NONE</tt>, and <tt>EXACT</tt>, respectively.</p>\n</div>\n<div id=\"asserting-over-transactions\">\n<h3>Asserting over Transactions</h3>\n<p>For writing tests, the method\n<tt>assert_transaction_in_ledgers_for_amounts_with_evidence</tt> is provided\nfor convenience. As its name implies, it allows asserting the existence\nof exactly one <tt>Transaction</tt> with the ledger amounts, evidence, and\nother fields on Ledger provided to the method.</p>\n<pre>&gt;&gt;&gt; create_transaction(user, evidence=[order], ledger_entries=[LedgerEntry(amount=debit(Decimal(100)), ledger=ar), LedgerEntry(amount=credit(Decimal(100)), ledger=revenue)])\n&lt;Transaction: Transaction b3e73f1d-6b10-4597-b19b-84800839d5b3&gt;\n&gt;&gt;&gt; with assert_raises(Transaction.DoesNotExist):\n...     assert_transaction_in_ledgers_for_amounts_with_evidence(ledger_amount_pairs=[(revenue.name, credit(Decimal(100))), (ar.name, debit(Decimal(100)))], evidence=[])\n...\n&gt;&gt;&gt; assert_transaction_in_ledgers_for_amounts_with_evidence(ledger_amount_pairs=[(revenue.name, credit(Decimal(100))), (ar.name, debit(Decimal(100)))], evidence=[order])\n&gt;&gt;&gt; with assert_raises(Transaction.DoesNotExist):\n...     assert_transaction_in_ledgers_for_amounts_with_evidence(ledger_amount_pairs=[(revenue.name, credit(Decimal(100))), (ar.name, debit(Decimal(100)))], evidence=[order])\n...\nTraceback (most recent call last):\n  File \"&lt;console&gt;\", line 2, in &lt;module&gt;\n    File \"/usr/lib/python2.7/unittest/case.py\", line 116, in __exit__\n        \"{0} not raised\".format(exc_name))\n        AssertionError: DoesNotExist not raised\n</pre>\n<p>You can see\n<tt>capone.tests.test_assert_transaction_in_ledgers_for_amounts_with_evidence</tt>\nfor more examples!</p>\n</div>\n</div>\n<div id=\"image-credits\">\n<h2>Image Credits</h2>\n<p>Image courtesy\n<a href=\"https://commons.wikimedia.org/wiki/User:Officer\" rel=\"nofollow\">Officer</a> on\n<a href=\"https://commons.wikimedia.org/wiki/File:Al_Capone_in_Florida.jpg\" rel=\"nofollow\">Wikipedia</a>.\nThis work was created by a government unit (including state, county, and\nmunicipal government agencies) of the U.S. state of Florida. It is a\npublic record that was not created by an agency which state law has\nallowed to claim copyright and is therefore in the public domain in the\nUnited States.</p>\n</div>\n\n          </div>"}, "last_serial": 6962088, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "298b2206c490b51c5f31c7e05af4f7aa", "sha256": "5994017ed015b4067ab08619b6b53dede1f61d7935554a6f81a5678cd31e0ef6"}, "downloads": -1, "filename": "capone-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "298b2206c490b51c5f31c7e05af4f7aa", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 41573, "upload_time": "2017-08-17T20:49:46", "upload_time_iso_8601": "2017-08-17T20:49:46.514402Z", "url": "https://files.pythonhosted.org/packages/7a/2b/febaf72f96e446ca4c376ef584a45b3edbb4dd703f49a7989d77311779a8/capone-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "07a4e6e50bc4bb43fd3451c4095723b9", "sha256": "fbfb068ea3510682ef26eb4fedbbfe2783367a910b3ca7719986713d2fdbca30"}, "downloads": -1, "filename": "capone-1.0.0.tar.gz", "has_sig": false, "md5_digest": "07a4e6e50bc4bb43fd3451c4095723b9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 107461, "upload_time": "2017-08-17T20:49:48", "upload_time_iso_8601": "2017-08-17T20:49:48.685777Z", "url": "https://files.pythonhosted.org/packages/1a/f5/52172ba0cee432faf82668a1e06b337ddfd3d29156fbe46bf19984f6c3c9/capone-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "63aca0e322c9a7fc53d98323ae354afb", "sha256": "ff863cc7a21dcc9b42be41ca7c041b375ba709e8f6b38f5e635e71c8ab6e73e8"}, "downloads": -1, "filename": "capone-1.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "63aca0e322c9a7fc53d98323ae354afb", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 41625, "upload_time": "2017-08-18T17:24:11", "upload_time_iso_8601": "2017-08-18T17:24:11.011275Z", "url": "https://files.pythonhosted.org/packages/be/4a/d06fa4e14663430c352806a65aa3255085ebc965cf17092688797f23521d/capone-1.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5f9da1e93bd314e111eaa1886fd2f774", "sha256": "88a76ec46c4213ceeaa23a339be5fa1e3db201c6acd0e8c2dbd88a17f0035fb5"}, "downloads": -1, "filename": "capone-1.0.1.tar.gz", "has_sig": false, "md5_digest": "5f9da1e93bd314e111eaa1886fd2f774", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 107535, "upload_time": "2017-08-18T17:24:13", "upload_time_iso_8601": "2017-08-18T17:24:13.176706Z", "url": "https://files.pythonhosted.org/packages/92/76/c9082f28ca0180bb70e2a2fbf436e0d476baaa0d8205353169cd56b40f56/capone-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "baaf35969f98cc81be5df688be0ae8c1", "sha256": "622f213560e963042143063d6b85d3a5393aec97942fe3ff213145575ee98f7b"}, "downloads": -1, "filename": "capone-1.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "baaf35969f98cc81be5df688be0ae8c1", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 41630, "upload_time": "2017-10-28T00:02:31", "upload_time_iso_8601": "2017-10-28T00:02:31.674666Z", "url": "https://files.pythonhosted.org/packages/95/8b/d19125986980d5e96dfcb99668d8ba7b471b115922035d9a1cad90473aed/capone-1.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8009816100abb5a4b500772d2423a7e2", "sha256": "7e5ae7d1d9b44623b103c65ee60856d8ff76d33ac2f67a6d5c5e1ac9e7ad79ee"}, "downloads": -1, "filename": "capone-1.0.2.tar.gz", "has_sig": false, "md5_digest": "8009816100abb5a4b500772d2423a7e2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 107533, "upload_time": "2017-10-28T00:02:33", "upload_time_iso_8601": "2017-10-28T00:02:33.455682Z", "url": "https://files.pythonhosted.org/packages/15/18/d08cd5a659ebc374a1d711cea37472ca3137e0a182293754e3ce93cf2cd8/capone-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "8ace8a567d354fce80e1e57c3c89cf7e", "sha256": "9eb308ff18508bab6291e4fc1ea15e7f62d7b1ba866fc0f3e4c38b39d673e1d1"}, "downloads": -1, "filename": "capone-1.0.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8ace8a567d354fce80e1e57c3c89cf7e", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 41630, "upload_time": "2017-10-28T20:30:28", "upload_time_iso_8601": "2017-10-28T20:30:28.157961Z", "url": "https://files.pythonhosted.org/packages/d5/7a/b2f20f0226afe053068a40045be5bb0b6bc91835deb745dec57167854171/capone-1.0.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "98d7014300fe2262d43d7f25058da479", "sha256": "af99f569833f90da2dbe67529a3c341d2c5c4ba1b604f81ce34d39fa10c7c4be"}, "downloads": -1, "filename": "capone-1.0.3.tar.gz", "has_sig": false, "md5_digest": "98d7014300fe2262d43d7f25058da479", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 107541, "upload_time": "2017-10-28T20:30:30", "upload_time_iso_8601": "2017-10-28T20:30:30.566684Z", "url": "https://files.pythonhosted.org/packages/13/99/ff528827bf86e2e535d71c1e13e8db62c0ceee2897faa0f6d067e1e76172/capone-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "9a50394a1a4eb308761e1d45b758785e", "sha256": "01e30613f3caa6e8a8247ab39d264b61965f94abc0184c963b7feadcd8f950fa"}, "downloads": -1, "filename": "capone-1.0.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "9a50394a1a4eb308761e1d45b758785e", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 41627, "upload_time": "2017-11-11T18:12:45", "upload_time_iso_8601": "2017-11-11T18:12:45.769195Z", "url": "https://files.pythonhosted.org/packages/ca/5c/c3992df75ff3109cdf4a01a718133b27348bd4fba2d073532d4805183f21/capone-1.0.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b38f9cc0e290caeb1ac41fdf64ad5772", "sha256": "87602d6b40cada67c692e6cf51bbce2776086d6241da4a14c958db420202e430"}, "downloads": -1, "filename": "capone-1.0.4.tar.gz", "has_sig": false, "md5_digest": "b38f9cc0e290caeb1ac41fdf64ad5772", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 107539, "upload_time": "2017-11-11T18:12:47", "upload_time_iso_8601": "2017-11-11T18:12:47.672236Z", "url": "https://files.pythonhosted.org/packages/13/ae/46e48c7e00283360b7e96dab5fc3149b87addd8cda824ac3218c256faffd/capone-1.0.4.tar.gz", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "9e8183e64c98ffaab6b31c2898f9eeab", "sha256": "b9862f067c5743a5594225e440ef41da2fcd64ead3bed1f35d3700c8abed4592"}, "downloads": -1, "filename": "capone-1.0.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "9e8183e64c98ffaab6b31c2898f9eeab", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 41667, "upload_time": "2018-01-08T20:38:59", "upload_time_iso_8601": "2018-01-08T20:38:59.755469Z", "url": "https://files.pythonhosted.org/packages/c5/30/ab010a0b1fdfe2317eac689fedbab8b438dbea29e657c033aca3fb6680c5/capone-1.0.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "018c49474544c45ad3d8fc691e9fea8e", "sha256": "101583019cf50c50dba17358f1b89a79107d025a85ae917d7abf92fc3f717bce"}, "downloads": -1, "filename": "capone-1.0.5.tar.gz", "has_sig": false, "md5_digest": "018c49474544c45ad3d8fc691e9fea8e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 107171, "upload_time": "2018-01-08T20:39:02", "upload_time_iso_8601": "2018-01-08T20:39:02.121896Z", "url": "https://files.pythonhosted.org/packages/f4/c6/635b9bc0bf1298c152e98a82e9af5e542f3374179111b59ae9dc26094524/capone-1.0.5.tar.gz", "yanked": false}], "1.0.6": [{"comment_text": "", "digests": {"md5": "a1df9d48ac3783ff146427b5935002be", "sha256": "c731978030ee3fd7b299ec4b2e9bd801c3989ba05f77735a8dec4f82a40d4aa7"}, "downloads": -1, "filename": "capone-1.0.6-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a1df9d48ac3783ff146427b5935002be", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 41676, "upload_time": "2018-03-18T00:27:22", "upload_time_iso_8601": "2018-03-18T00:27:22.976419Z", "url": "https://files.pythonhosted.org/packages/b6/eb/9e336b2694a16c1d43166ec3b90f415a7d62ed9a076b9f4491d92ecbeb3c/capone-1.0.6-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "150cfd5b40012a047467ee223d804520", "sha256": "bfe10bbcc3a48045b004a998897dcdf29d3df8a456c1b93ef568b3b2b6f085be"}, "downloads": -1, "filename": "capone-1.0.6.tar.gz", "has_sig": false, "md5_digest": "150cfd5b40012a047467ee223d804520", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 107183, "upload_time": "2018-03-18T00:27:25", "upload_time_iso_8601": "2018-03-18T00:27:25.577559Z", "url": "https://files.pythonhosted.org/packages/b8/27/93a9afabe89a34ad71c2707fdc546ba2bbe99365727370d98047398bcce6/capone-1.0.6.tar.gz", "yanked": false}], "1.0.7": [{"comment_text": "", "digests": {"md5": "458aac6dad81cfdcc1c246810d55304a", "sha256": "b6d93afc4c20d2bc0f857252afc5c3a2b7f365dac3f99eaa1ba50e32c03a363f"}, "downloads": -1, "filename": "capone-1.0.7-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "458aac6dad81cfdcc1c246810d55304a", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 41626, "upload_time": "2018-03-23T06:34:06", "upload_time_iso_8601": "2018-03-23T06:34:06.655629Z", "url": "https://files.pythonhosted.org/packages/7e/1b/53d780d13793880bc87dcd0a6eb69023f85539d6c8fb1ffae5a24f5696da/capone-1.0.7-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "896bc39eef0456ff120fffb51099d967", "sha256": "4cbb16fd0bc34c2db85a112b8171bdc215e69fc5b5232be163f17e394d4e7986"}, "downloads": -1, "filename": "capone-1.0.7.tar.gz", "has_sig": false, "md5_digest": "896bc39eef0456ff120fffb51099d967", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 107154, "upload_time": "2018-03-23T06:34:08", "upload_time_iso_8601": "2018-03-23T06:34:08.828525Z", "url": "https://files.pythonhosted.org/packages/69/76/074a8ce3ed3c035e00997af47a56959f1854087fbb5d529c432336b28214/capone-1.0.7.tar.gz", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "7ae3ac52becf12e625990540ebe9125c", "sha256": "4bf4c20439373edc45493bea3f547474f79550d4d3a6a2063d4cee1ed8a44c8c"}, "downloads": -1, "filename": "capone-2.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "7ae3ac52becf12e625990540ebe9125c", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 33888, "upload_time": "2020-04-03T20:24:14", "upload_time_iso_8601": "2020-04-03T20:24:14.613294Z", "url": "https://files.pythonhosted.org/packages/1e/3e/8cd7a1e64913bd24a90d2a358bb3a0f2bf2c286e9a5e9307e7a8128cfa8b/capone-2.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "79446ab02f816e1d2cc4b9858e6850af", "sha256": "2a81215871f98b9a35dfeaaedde6db0eb8bd2985f7c45df20406ddc00d1e67b1"}, "downloads": -1, "filename": "capone-2.0.1.tar.gz", "has_sig": false, "md5_digest": "79446ab02f816e1d2cc4b9858e6850af", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 110179, "upload_time": "2020-04-03T20:24:16", "upload_time_iso_8601": "2020-04-03T20:24:16.883852Z", "url": "https://files.pythonhosted.org/packages/f7/51/353ae297cf772d17eb465fc3d8ee9ae513b64b9dccfa11cf1b612ff2f2bb/capone-2.0.1.tar.gz", "yanked": false}], "2.0.2": [{"comment_text": "", "digests": {"md5": "db1eb432a43ab2b4d61a0eba23d45d8f", "sha256": "b2f0c7038d556c5522e2d2380d814b9da0bcf7ca8fc1de1e41d4bdc5503469df"}, "downloads": -1, "filename": "capone-2.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "db1eb432a43ab2b4d61a0eba23d45d8f", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 33913, "upload_time": "2020-04-06T14:34:00", "upload_time_iso_8601": "2020-04-06T14:34:00.183004Z", "url": "https://files.pythonhosted.org/packages/66/f1/9581dbd28c1094419918e74af314739064c3131c1acf8532d37b052d9821/capone-2.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "382950288e0e8b5682e66d4a3934e636", "sha256": "af9321a136e53d37e4ddde9c2ef703b4476c1d7bb1a1b33aee6981fa6efc3ad2"}, "downloads": -1, "filename": "capone-2.0.2.tar.gz", "has_sig": false, "md5_digest": "382950288e0e8b5682e66d4a3934e636", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 110564, "upload_time": "2020-04-06T14:34:02", "upload_time_iso_8601": "2020-04-06T14:34:02.135734Z", "url": "https://files.pythonhosted.org/packages/ac/8b/2546db54791ef59a0c465aac61ebb02db20b9ac38146d294be72ee101107/capone-2.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "db1eb432a43ab2b4d61a0eba23d45d8f", "sha256": "b2f0c7038d556c5522e2d2380d814b9da0bcf7ca8fc1de1e41d4bdc5503469df"}, "downloads": -1, "filename": "capone-2.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "db1eb432a43ab2b4d61a0eba23d45d8f", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 33913, "upload_time": "2020-04-06T14:34:00", "upload_time_iso_8601": "2020-04-06T14:34:00.183004Z", "url": "https://files.pythonhosted.org/packages/66/f1/9581dbd28c1094419918e74af314739064c3131c1acf8532d37b052d9821/capone-2.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "382950288e0e8b5682e66d4a3934e636", "sha256": "af9321a136e53d37e4ddde9c2ef703b4476c1d7bb1a1b33aee6981fa6efc3ad2"}, "downloads": -1, "filename": "capone-2.0.2.tar.gz", "has_sig": false, "md5_digest": "382950288e0e8b5682e66d4a3934e636", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 110564, "upload_time": "2020-04-06T14:34:02", "upload_time_iso_8601": "2020-04-06T14:34:02.135734Z", "url": "https://files.pythonhosted.org/packages/ac/8b/2546db54791ef59a0c465aac61ebb02db20b9ac38146d294be72ee101107/capone-2.0.2.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:35:28 2020"}