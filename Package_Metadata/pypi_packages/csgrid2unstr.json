{"info": {"author": "Qiao Chen", "author_email": "benechiao@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Scientific/Engineering", "Topic :: Software Development"], "description": ".. _meshio: https://github.com/nschloe/meshio\n\nCreate & Convert *Cubed-sphere Grids* (CSGrid) to Unstructured Meshes\n=====================================================================\n\n.. image:: https://img.shields.io/pypi/v/csgrid2unstr.svg\n    :target: https://pypi.org/project/csgrid2unstr/\n.. image:: https://img.shields.io/pypi/l/csgrid2unstr.svg\n    :target: https://pypi.org/project/csgrid2unstr/\n\nIntroduction\n------------\n\nThe grid generator is from `here <https://gist.github.com/darothen/8bf53b448790f21f616552b45ee3b22b>`_,\nand I/O is handled by `meshio`_.\n\nThis package was created for education/research purpose. Personally, I use this\nto study the grid convergence for data transferring between CSGrid and\n*spherical centroidal Voronoi tessellations* (SCVT).\n\n\n.. image:: demo.png\n    :scale: 10 %\n    :align: center\n\nInstallation\n------------\n\nYou can easily install this package through pip, i.e.\n\n.. code-block:: console\n\n    $ pip install csgrid2unstr --user\n\nYou can, of course, install it directly from the repository:\n\n.. code-block:: console\n\n    $ git clone https://github.com/chiao45/csgrid2unstr.git\n    $ cd csgrid2unstr && python setup.py install --user\n\nNotice that this package depends on:\n\n1. `numpy <http://www.numpy.org/>`_\n2. `setuptools <https://github.com/pypa/setuptools>`_\n3. `meshio`_\n\nUsage\n-----\n\nAs Executable Binary\n++++++++++++++++++++\n\nOnce you have installed the package, open the terminal and type:\n\n.. code-block:: console\n\n    $ csgrid2unstr -h\n    usage: csgrid2unstr [-h] [-n SIZE] [-o OUTPUT] [-r REFINE]\n                    [-f {vtk,vtu,gmsh,off,exodus,xdmf,dolfin-xml,stl}] [-b]\n                    [-V] [-v]\n\n    write CSGrid to unstr\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -n SIZE, --size SIZE  Number of intervals of a square face\n      -o OUTPUT, --output OUTPUT\n                            Output file name, w/o extension\n      -r REFINE, --refine REFINE\n                            Level of refinements, default is 1\n      -f {vtk,vtu,gmsh,off,exodus,xdmf,dolfin-xml,stl}, --format {vtk,vtu,gmsh,off,exodus,xdmf,dolfin-xml,stl}\n                            Output file format, default is VTK\n      -b, --binary          Use BINARY. Notice that this flag is ignored for\n                            some formats\n      -V, --verbose         Verbose output\n      -v, --version         Check version\n\nIf you got ``command not found: csgrid2unstr``, make sure ``csgrid2unstr`` is\nin your ``$PATH``.\n\nThere are two must-provided parameters, i.e. ``-n`` (``--size``) and ``-o``\n(``--output``). The former is to define the number of intervals of a square\nface, i.e. the number of quadrilaterals of a face is n*n, and the latter is\nto provide the output filename (**without extension**). For instance:\n\n.. code-block:: console\n\n    $ csgrid2unstr -n 20 -o demo\n\nwill construct a CSGrid of 400 quadrilaterals per face, convert the grid into\nan unstructured mesh and store it in ``demo.vtk``.\n\nYou can create a serial of uniform refined grids by adding ``-r``\n(``--refine``) switch, e.g.:\n\n.. code-block:: console\n\n    $ csgrid2unstr -n 10 -r 3 -o demo -f xdmf\n\nwill construct three CSGrids with 100, 400, and 1600 quadrilaterals per face,\nconvert them into three unstructured meshes and store them in ``demo0.xdmf``,\n``demo1.xdmf``, and ``demo2.xdfm``, resp.\n\nAs Module\n+++++++++\n\nUsing ``csgrid2unstr`` as a Python module is also simple.\n\n.. code-block:: python\n\n    from __future__ import print_function\n    from csgrid2unstr.cubed_sphere import CSGrid\n    from csgrid2unstr.unstr import Unstr\n\n    # create a CSGrid of 25 quads per face\n    cs = CSGrid(5)\n\n    # convert it into an unstructured mesh\n    mesh = Unstr(cs)\n\n    # two attributes, points and cells, of np.ndarray\n\n    print('Nodes {}-by-3'.format(len(mesh.points)))\n    print(mesh.points)\n\n    print('Cells {}-by-4'.format(len(mesh.cells)))\n    print(mesh.cells)\n\nLicense\n-------\n\nMIT License\n\nCopyright (c) 2018 Qiao Chen", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/chiao45/csgrid2unstr", "keywords": "Math", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "csgrid2unstr", "package_url": "https://pypi.org/project/csgrid2unstr/", "platform": "", "project_url": "https://pypi.org/project/csgrid2unstr/", "project_urls": {"Homepage": "https://github.com/chiao45/csgrid2unstr"}, "release_url": "https://pypi.org/project/csgrid2unstr/0.0.1/", "requires_dist": null, "requires_python": "", "summary": "Creating and converting cubed-sphere grids to unstructured meshes", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.org/project/csgrid2unstr/\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/csgrid2unstr.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5b72e35406f7a402ebff6310a616ce97cfc5e859/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f63736772696432756e7374722e737667\"></a>\n<a href=\"https://pypi.org/project/csgrid2unstr/\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/l/csgrid2unstr.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d3f6186189477ac05e13752628392273b0d4ed14/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f63736772696432756e7374722e737667\"></a>\n<div id=\"introduction\">\n<h2>Introduction</h2>\n<p>The grid generator is from <a href=\"https://gist.github.com/darothen/8bf53b448790f21f616552b45ee3b22b\" rel=\"nofollow\">here</a>,\nand I/O is handled by <a href=\"https://github.com/nschloe/meshio\" rel=\"nofollow\">meshio</a>.</p>\n<p>This package was created for education/research purpose. Personally, I use this\nto study the grid convergence for data transferring between CSGrid and\n<em>spherical centroidal Voronoi tessellations</em> (SCVT).</p>\n<img alt=\"demo.png\" class=\"align-center\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/76ad4b5d849361a730e9f52c0bde7fd928ce3d1a/64656d6f2e706e67\">\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>You can easily install this package through pip, i.e.</p>\n<pre><span class=\"gp\">$</span> pip install csgrid2unstr --user\n</pre>\n<p>You can, of course, install it directly from the repository:</p>\n<pre><span class=\"gp\">$</span> git clone https://github.com/chiao45/csgrid2unstr.git\n<span class=\"gp\">$</span> <span class=\"nb\">cd</span> csgrid2unstr <span class=\"o\">&amp;&amp;</span> python setup.py install --user\n</pre>\n<p>Notice that this package depends on:</p>\n<ol>\n<li><a href=\"http://www.numpy.org/\" rel=\"nofollow\">numpy</a></li>\n<li><a href=\"https://github.com/pypa/setuptools\" rel=\"nofollow\">setuptools</a></li>\n<li><a href=\"https://github.com/nschloe/meshio\" rel=\"nofollow\">meshio</a></li>\n</ol>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div id=\"as-executable-binary\">\n<h3>As Executable Binary</h3>\n<p>Once you have installed the package, open the terminal and type:</p>\n<pre><span class=\"gp\">$</span> csgrid2unstr -h\n<span class=\"go\">usage: csgrid2unstr [-h] [-n SIZE] [-o OUTPUT] [-r REFINE]\n                [-f {vtk,vtu,gmsh,off,exodus,xdmf,dolfin-xml,stl}] [-b]\n                [-V] [-v]\n\nwrite CSGrid to unstr\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -n SIZE, --size SIZE  Number of intervals of a square face\n  -o OUTPUT, --output OUTPUT\n                        Output file name, w/o extension\n  -r REFINE, --refine REFINE\n                        Level of refinements, default is 1\n  -f {vtk,vtu,gmsh,off,exodus,xdmf,dolfin-xml,stl}, --format {vtk,vtu,gmsh,off,exodus,xdmf,dolfin-xml,stl}\n                        Output file format, default is VTK\n  -b, --binary          Use BINARY. Notice that this flag is ignored for\n                        some formats\n  -V, --verbose         Verbose output\n  -v, --version         Check version</span>\n</pre>\n<p>If you got <tt>command not found: csgrid2unstr</tt>, make sure <tt>csgrid2unstr</tt> is\nin your <tt>$PATH</tt>.</p>\n<p>There are two must-provided parameters, i.e. <tt><span class=\"pre\">-n</span></tt> (<tt><span class=\"pre\">--size</span></tt>) and <tt><span class=\"pre\">-o</span></tt>\n(<tt><span class=\"pre\">--output</span></tt>). The former is to define the number of intervals of a square\nface, i.e. the number of quadrilaterals of a face is n*n, and the latter is\nto provide the output filename (<strong>without extension</strong>). For instance:</p>\n<pre><span class=\"gp\">$</span> csgrid2unstr -n <span class=\"m\">20</span> -o demo\n</pre>\n<p>will construct a CSGrid of 400 quadrilaterals per face, convert the grid into\nan unstructured mesh and store it in <tt>demo.vtk</tt>.</p>\n<p>You can create a serial of uniform refined grids by adding <tt><span class=\"pre\">-r</span></tt>\n(<tt><span class=\"pre\">--refine</span></tt>) switch, e.g.:</p>\n<pre><span class=\"gp\">$</span> csgrid2unstr -n <span class=\"m\">10</span> -r <span class=\"m\">3</span> -o demo -f xdmf\n</pre>\n<p>will construct three CSGrids with 100, 400, and 1600 quadrilaterals per face,\nconvert them into three unstructured meshes and store them in <tt>demo0.xdmf</tt>,\n<tt>demo1.xdmf</tt>, and <tt>demo2.xdfm</tt>, resp.</p>\n</div>\n<div id=\"as-module\">\n<h3>As Module</h3>\n<p>Using <tt>csgrid2unstr</tt> as a Python module is also simple.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"n\">print_function</span>\n<span class=\"kn\">from</span> <span class=\"nn\">csgrid2unstr.cubed_sphere</span> <span class=\"kn\">import</span> <span class=\"n\">CSGrid</span>\n<span class=\"kn\">from</span> <span class=\"nn\">csgrid2unstr.unstr</span> <span class=\"kn\">import</span> <span class=\"n\">Unstr</span>\n\n<span class=\"c1\"># create a CSGrid of 25 quads per face</span>\n<span class=\"n\">cs</span> <span class=\"o\">=</span> <span class=\"n\">CSGrid</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># convert it into an unstructured mesh</span>\n<span class=\"n\">mesh</span> <span class=\"o\">=</span> <span class=\"n\">Unstr</span><span class=\"p\">(</span><span class=\"n\">cs</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># two attributes, points and cells, of np.ndarray</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Nodes </span><span class=\"si\">{}</span><span class=\"s1\">-by-3'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">mesh</span><span class=\"o\">.</span><span class=\"n\">points</span><span class=\"p\">)))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">mesh</span><span class=\"o\">.</span><span class=\"n\">points</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Cells </span><span class=\"si\">{}</span><span class=\"s1\">-by-4'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">mesh</span><span class=\"o\">.</span><span class=\"n\">cells</span><span class=\"p\">)))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">mesh</span><span class=\"o\">.</span><span class=\"n\">cells</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>MIT License</p>\n<p>Copyright (c) 2018 Qiao Chen</p>\n</div>\n\n          </div>"}, "last_serial": 4275770, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "89174c2fc5d9c0a03053143d94c90326", "sha256": "0a839d73c2c9b744edc4c5ebe3b155af5ab0e91881a52bb86d66195aa388ab02"}, "downloads": -1, "filename": "csgrid2unstr-0.0.1.tar.gz", "has_sig": false, "md5_digest": "89174c2fc5d9c0a03053143d94c90326", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9087, "upload_time": "2018-09-16T02:28:12", "upload_time_iso_8601": "2018-09-16T02:28:12.918813Z", "url": "https://files.pythonhosted.org/packages/b2/85/0c0cc1df1d63f42723bff9e1b095721d54b1596f60a0a6e148d483d56998/csgrid2unstr-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "89174c2fc5d9c0a03053143d94c90326", "sha256": "0a839d73c2c9b744edc4c5ebe3b155af5ab0e91881a52bb86d66195aa388ab02"}, "downloads": -1, "filename": "csgrid2unstr-0.0.1.tar.gz", "has_sig": false, "md5_digest": "89174c2fc5d9c0a03053143d94c90326", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9087, "upload_time": "2018-09-16T02:28:12", "upload_time_iso_8601": "2018-09-16T02:28:12.918813Z", "url": "https://files.pythonhosted.org/packages/b2/85/0c0cc1df1d63f42723bff9e1b095721d54b1596f60a0a6e148d483d56998/csgrid2unstr-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:41:50 2020"}