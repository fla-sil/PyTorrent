{"info": {"author": "Ge Yang", "author_email": "yangge1987@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Science/Research", "Programming Language :: Python :: 3"], "description": "Escher (``escher-cli``), a command line utility that runs your script with arguments load from a Yaml file\n==========================================================================================================\n\n\ud83d\udd25 \ud83d\udca5\\ **Now ``Escher`` supports launching workers on AWS!** \ud83c\udf1f \u2728 \u26a1\ufe0f\n\nWhere Am I? (for the developer himself)\n---------------------------------------\n\n1. [ ] **Need to add ``escher init``** so that you have a standard way\n   to setup the scripts for a project.\n\n**For Usage, jump to the next section already :)**\n\nMotivations\n-----------\n\nWhen publishing deep-learning models, there are a lot of boilerplate\nscripts for the training and inference. When there are twenty-plus\nmodels in your work folder it gets increasingly difficult to maintain\ncopies of run scripts that has tight bindings with the particular server\nyou were using.\n\nIt makes sense to use a single deep-learning ``cli`` to minimalize these\ncopy-and-pasted scripts\n\nWhen you work on a lot of deep-learning project, some of them playing\nwith other people's code-block, some of then developing new ones, it really\nmakes sense to standard the structure of project and reduce boiler\nplate. Here with ``escher-cli``, we learn from the best packaging tools\non this planet, Ruby ``gem``, Javascript ``npm``, and rust ``crate``. We\nare particularly inspired by ``create-react-app`` and the good work that\nyou-know-who has offered the ``reactjs`` community, and some of the\nlessons people have learned over-the-years from tools like ``gulp``,\n``bower``, ``webpack`` and numerous others.\n\nYou can think of ``escher-cli`` as the ``create-react-app`` for\ndeep-learning. The reason why you want use this is because it offers a\nboilerplate-free way to **setup new project**, **launch and manage aws,\nazure, google compute engine servers**, **local and remote training**.\nInstead of writing ``Makefiles`` that you have to copy paste in every\nproject, you install ``escher-cli`` globally *or* in your particular\nproject virtual-env.\n\nIn summary, our (**what**) contributions (**you**) are (**get**):\n\n1. A community-driven standard in deep-ML training, development and\n   (later) serving.\n2. cross-platform ``cli`` tools that reduces the cognitive load of\n   running training locally and globally\n3. No copy-and-paste scripts in each project.\n\nIDE Support\n~~~~~~~~~~~\n\nWe will build a cli tool first. If this catches on, I'm sure JetBrains\nwill add integration in PyCharm:) And if you are not using PyCharm, you\nshould :-P\n\nInstall and Usage\n-----------------\n\n**PyPI Page**: https://pypi.python.org/pypi/escher-cli\n\nTodo and Milestones\n-------------------\n\n-  [ ] run locally\n-  [ ] build a worker daemon that ``start``, ``halt``, ``resume``,\n   ``reran`` jobs\n\n   -  [x] finish graphQL schema\n\n-  [ ] build a master controller that\n\n   -  [ ] does worker discovery (worker report on startup)\n   -  [ ] maintains a list of jobs\n\n      -  [ ] new\n      -  [ ] running\n      -  [ ] ran\n\n   -  [ ] finish graphQL schema\n\nDone\n~~~~\n\n-  [x] define job file and schema (.escher.run)\n\nRun Locally\n~~~~~~~~~~~\n\n.. code-block:: bash\n\n    \u2713 pip install escher-cli\n    \u2717 escher init  # this one creates the `.escher` \n    \u2713 escher run  # runs a default script\n    # outputs >> `escher run` <default> script works!\n    \u2713 escher run scripts/load_electron.escher  # escher script that \"looks like\" this.\n\nTo run experiments on Remote Workers\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n-  [ ] add remote worker support\n\n.. code-block:: bash\n\n    \u2713 pip install escher-cli\n    \u2717 escher init --aws-example\n    escherd  # this starts the local daemon\n        \u2717 escher master\n        \u2717 escher worker\n    # now sit back and enjoy the show\n    esher run --worker=gpu-worker scripts/load_electrons.escher\n\nConfiguration for the ``gpu-worker`` sits inside the ``.escher`` file.\nIt specifies the ``aws`` image id, security group etc.\n\nOverview\n--------\n\n``Escher`` is a command line utility for your experiments. It manages\nconcurrent runs, command line arguments and other stuff nicely for you!\n\nThe things it manages include:\n\n-  generating run-specific variables, like ``{time}`` and ``{cwd}`` that\n   you can access as template keys in your string.\n-  maximum numbers of concurrent runs (via python ``multiprocess.Pool``)\n-  environment variables (env) such as ``DISPLAY=:1``. You can also\n   passing a file\n-  **default arguments**\n-  **batch arguments** for multiple experiments\n-  **pre-launch** scripts that is ran only once for each batch\n-  **at-launch** script that is run at the launch time of each\n   experiment\n-  **post-launch** script that is as soon as each experiment launches\n-  **post-run** scripts that happens after each experiment is done.\n\n``Escher`` works with all of your current work flow and it doesn't lock\nyou into a specific way of doing things. You still get to use bash\nscripts or Makefile's.\n\nWhy do we use YAML (with JSON planned as well)? My bash script is just fine!\n----------------------------------------------------------------------------\n\nBecause YAML(and json) are human **and** machine readable whereas bash\narguments are **not**. When is the last time you looked at a bash script\nlooking for hyper-parameters, only to realized that some key parameters\nare missing? With ``Escher`` you won't have this problem. You can save\nall of the past and current runs as nicely readable YAML files(or json,\nHjson Cson if you speak coffee script, whatever).\n\n-  if you are writing a report, you can include these YAML/json/cson\n   files directly into markdown or latex.\n-  To see what you ran last night, you can ``glob`` all of the\n   configurations with ``runs/**/experiment.yml`` and make nice tables\n   in an instant.\n-  To run a full batch of experiments, you can type ``default_args``\n   just ones, and then only repeat the fields that is different between\n   each run.\n\nMost importantly, ``Escher`` wants to establish a standard command line\ntool for machine learning work, and having a standard ``run.config.yml``\nis just the first step!\n\nWhy is ``Escher`` named \"Escher\"?\n---------------------------------\n\nIt used to be called ``Dave``, after my adviser. I thought it would be\nfunny to ``dave --config-file \"load_electrons.yml\"``. Now it is named to\n``Escher`` (as for the module), and ``escher-cli`` as the package name.\n\nThere already exists a package called ``escher`` which is why this\npackage is ``escher-cli``. However I like the ``-cli`` postfix b/c it is\nmore clear.\n\nHow shall I use ``Escher``?\n---------------------------\n\nFirst thing first, you could ``alias`` ``Escher`` with whoever you want\nto call to run your experiments \ud83d\ude00.\n\nAfter aliasing this after your favorite person, you can follow the\nexamples bellow :)\n\nNote that `**batteries are\nincluded** <https://www.facebook.com/episodeyang/videos/10101189402110434/>`__,\nand your mileage will vary.\n\nExample Usage\n-------------\n\nFirst install via ``pip`` (it's that simple!!)\n\n.. code-block:: bash\n\n    pip install dave\n\nSuppose you have the following folder structure\n\n::\n\n    \u251c\u2500\u2500 your_thesis\n    \u2514\u2500\u2500 MAML_tensorflow\n     \u00a0\u00a0 \u251c\u2500\u2500 README.md\n     \u00a0\u00a0 \u251c\u2500\u2500 experiment.yml\n     \u00a0\u00a0 \u251c\u2500\u2500 maml.py\n     \u00a0\u00a0 \u2514\u2500\u2500 models\n     \u00a0\u00a0  \u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n     \u00a0\u00a0  \u00a0\u00a0 \u2514\u2500\u2500 mlp.py\n\nwhere the experiment.yml file looks like this:\n\n.. code-block:: yaml\n\n    %YAML 1.2\n    ---\n    config:\n      max_concurrent: 10\n    env:\n      PYTHONPATH: test_directory\n    run: |\n      {env} python maml_bradly.py {args}\n    default_args:\n      npts: 100\n      num_epochs: 70000\n      num_tasks: 10\n      num_grad_steps: 1\n      num_points_sampled: 10\n      fix_amp: False\n    batch_args: # use good typing convention here\n      - num_tasks: 10\n        num_grad_steps: 1\n        num_points_sampled: 10\n      - num_tasks: 10\n        num_grad_steps: 4\n        num_points_sampled: 20\n    tmp:\n      - last_run: 10\n\nNow under the project root, you can just run\n\n.. code-block:: bash\n\n    dave --config-file \"escher.py\"\n\nand it will automatically run the experiment twice, using the arguments\nin the ``batch_args`` field of the Yaml configuration file. ## To\nDevelop\n\nfirst download from github. Then under project folder, run (you also\nneed to install the packages).\n\n.. code-block:: bash\n\n    make dev test\n\nBucket List\n~~~~~~~~~~~\n\n-  [ ] Allow extensions\n-  [ ] work on windows\n-  [ ] allow env files\n-  [ ] daemon mode\n\nHappy Doing Science!\n--------------------\n\n.. figure:: https://github.com/episodeyang/escher-cli/blob/master/figures/phd092316s.gif?raw=true\n   :alt: one-more-experiment\n\n   one-more-experiment\n\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/episodeyang/escher-cli", "keywords": "escher,escher-cli,experiment,experimentation,script runner,deep learning,machine learning", "license": "", "maintainer": "", "maintainer_email": "", "name": "escher-cli", "package_url": "https://pypi.org/project/escher-cli/", "platform": "", "project_url": "https://pypi.org/project/escher-cli/", "project_urls": {"Homepage": "https://github.com/episodeyang/escher-cli"}, "release_url": "https://pypi.org/project/escher-cli/0.0.3/", "requires_dist": ["Click", "click-default-group", "params-proto", "pathos", "pathlib", "munch", "ruamel.yaml"], "requires_python": "", "summary": "A command line utility that runs your command line scripts from a yaml script", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>\ud83d\udd25 \ud83d\udca5<strong>Now ``Escher`` supports launching workers on AWS!</strong> \ud83c\udf1f \u2728 \u26a1\ufe0f</p>\n<div id=\"where-am-i-for-the-developer-himself\">\n<h2>Where Am I? (for the developer himself)</h2>\n<ol>\n<li>[ ] <strong>Need to add ``escher init``</strong> so that you have a standard way\nto setup the scripts for a project.</li>\n</ol>\n<p><strong>For Usage, jump to the next section already :)</strong></p>\n</div>\n<div id=\"motivations\">\n<h2>Motivations</h2>\n<p>When publishing deep-learning models, there are a lot of boilerplate\nscripts for the training and inference. When there are twenty-plus\nmodels in your work folder it gets increasingly difficult to maintain\ncopies of run scripts that has tight bindings with the particular server\nyou were using.</p>\n<p>It makes sense to use a single deep-learning <tt>cli</tt> to minimalize these\ncopy-and-pasted scripts</p>\n<p>When you work on a lot of deep-learning project, some of them playing\nwith other people\u2019s code-block, some of then developing new ones, it really\nmakes sense to standard the structure of project and reduce boiler\nplate. Here with <tt><span class=\"pre\">escher-cli</span></tt>, we learn from the best packaging tools\non this planet, Ruby <tt>gem</tt>, Javascript <tt>npm</tt>, and rust <tt>crate</tt>. We\nare particularly inspired by <tt><span class=\"pre\">create-react-app</span></tt> and the good work that\nyou-know-who has offered the <tt>reactjs</tt> community, and some of the\nlessons people have learned over-the-years from tools like <tt>gulp</tt>,\n<tt>bower</tt>, <tt>webpack</tt> and numerous others.</p>\n<p>You can think of <tt><span class=\"pre\">escher-cli</span></tt> as the <tt><span class=\"pre\">create-react-app</span></tt> for\ndeep-learning. The reason why you want use this is because it offers a\nboilerplate-free way to <strong>setup new project</strong>, <strong>launch and manage aws,\nazure, google compute engine servers</strong>, <strong>local and remote training</strong>.\nInstead of writing <tt>Makefiles</tt> that you have to copy paste in every\nproject, you install <tt><span class=\"pre\">escher-cli</span></tt> globally <em>or</em> in your particular\nproject virtual-env.</p>\n<p>In summary, our (<strong>what</strong>) contributions (<strong>you</strong>) are (<strong>get</strong>):</p>\n<ol>\n<li>A community-driven standard in deep-ML training, development and\n(later) serving.</li>\n<li>cross-platform <tt>cli</tt> tools that reduces the cognitive load of\nrunning training locally and globally</li>\n<li>No copy-and-paste scripts in each project.</li>\n</ol>\n<div id=\"ide-support\">\n<h3>IDE Support</h3>\n<p>We will build a cli tool first. If this catches on, I\u2019m sure JetBrains\nwill add integration in PyCharm:) And if you are not using PyCharm, you\nshould :-P</p>\n</div>\n</div>\n<div id=\"install-and-usage\">\n<h2>Install and Usage</h2>\n<p><strong>PyPI Page</strong>: <a href=\"https://pypi.python.org/pypi/escher-cli\" rel=\"nofollow\">https://pypi.python.org/pypi/escher-cli</a></p>\n</div>\n<div id=\"todo-and-milestones\">\n<h2>Todo and Milestones</h2>\n<ul>\n<li>[ ] run locally</li>\n<li>[ ] build a worker daemon that <tt>start</tt>, <tt>halt</tt>, <tt>resume</tt>,\n<tt>reran</tt> jobs<ul>\n<li>[x] finish graphQL schema</li>\n</ul>\n</li>\n<li>[ ] build a master controller that<ul>\n<li>[ ] does worker discovery (worker report on startup)</li>\n<li>[ ] maintains a list of jobs<ul>\n<li>[ ] new</li>\n<li>[ ] running</li>\n<li>[ ] ran</li>\n</ul>\n</li>\n<li>[ ] finish graphQL schema</li>\n</ul>\n</li>\n</ul>\n<div id=\"done\">\n<h3>Done</h3>\n<ul>\n<li>[x] define job file and schema (.escher.run)</li>\n</ul>\n</div>\n<div id=\"run-locally\">\n<h3>Run Locally</h3>\n<pre>\u2713 pip install escher-cli\n\u2717 escher init  <span class=\"c1\"># this one creates the `.escher`\n</span>\u2713 escher run  <span class=\"c1\"># runs a default script\n# outputs &gt;&gt; `escher run` &lt;default&gt; script works!\n</span>\u2713 escher run scripts/load_electron.escher  <span class=\"c1\"># escher script that \"looks like\" this.</span>\n</pre>\n</div>\n<div id=\"to-run-experiments-on-remote-workers\">\n<h3>To run experiments on Remote Workers</h3>\n<ul>\n<li>[ ] add remote worker support</li>\n</ul>\n<pre>\u2713 pip install escher-cli\n\u2717 escher init --aws-example\nescherd  <span class=\"c1\"># this starts the local daemon\n</span>    \u2717 escher master\n    \u2717 escher worker\n<span class=\"c1\"># now sit back and enjoy the show\n</span>esher run --worker<span class=\"o\">=</span>gpu-worker scripts/load_electrons.escher\n</pre>\n<p>Configuration for the <tt><span class=\"pre\">gpu-worker</span></tt> sits inside the <tt>.escher</tt> file.\nIt specifies the <tt>aws</tt> image id, security group etc.</p>\n</div>\n</div>\n<div id=\"overview\">\n<h2>Overview</h2>\n<p><tt>Escher</tt> is a command line utility for your experiments. It manages\nconcurrent runs, command line arguments and other stuff nicely for you!</p>\n<p>The things it manages include:</p>\n<ul>\n<li>generating run-specific variables, like <tt>{time}</tt> and <tt>{cwd}</tt> that\nyou can access as template keys in your string.</li>\n<li>maximum numbers of concurrent runs (via python <tt>multiprocess.Pool</tt>)</li>\n<li>environment variables (env) such as <tt><span class=\"pre\">DISPLAY=:1</span></tt>. You can also\npassing a file</li>\n<li><strong>default arguments</strong></li>\n<li><strong>batch arguments</strong> for multiple experiments</li>\n<li><strong>pre-launch</strong> scripts that is ran only once for each batch</li>\n<li><strong>at-launch</strong> script that is run at the launch time of each\nexperiment</li>\n<li><strong>post-launch</strong> script that is as soon as each experiment launches</li>\n<li><strong>post-run</strong> scripts that happens after each experiment is done.</li>\n</ul>\n<p><tt>Escher</tt> works with all of your current work flow and it doesn\u2019t lock\nyou into a specific way of doing things. You still get to use bash\nscripts or Makefile\u2019s.</p>\n</div>\n<div id=\"why-do-we-use-yaml-with-json-planned-as-well-my-bash-script-is-just-fine\">\n<h2>Why do we use YAML (with JSON planned as well)? My bash script is just fine!</h2>\n<p>Because YAML(and json) are human <strong>and</strong> machine readable whereas bash\narguments are <strong>not</strong>. When is the last time you looked at a bash script\nlooking for hyper-parameters, only to realized that some key parameters\nare missing? With <tt>Escher</tt> you won\u2019t have this problem. You can save\nall of the past and current runs as nicely readable YAML files(or json,\nHjson Cson if you speak coffee script, whatever).</p>\n<ul>\n<li>if you are writing a report, you can include these YAML/json/cson\nfiles directly into markdown or latex.</li>\n<li>To see what you ran last night, you can <tt>glob</tt> all of the\nconfigurations with <tt><span class=\"pre\">runs/**/experiment.yml</span></tt> and make nice tables\nin an instant.</li>\n<li>To run a full batch of experiments, you can type <tt>default_args</tt>\njust ones, and then only repeat the fields that is different between\neach run.</li>\n</ul>\n<p>Most importantly, <tt>Escher</tt> wants to establish a standard command line\ntool for machine learning work, and having a standard <tt>run.config.yml</tt>\nis just the first step!</p>\n</div>\n<div id=\"why-is-escher-named-escher\">\n<h2>Why is <tt>Escher</tt> named \u201cEscher\u201d?</h2>\n<p>It used to be called <tt>Dave</tt>, after my adviser. I thought it would be\nfunny to <tt>dave <span class=\"pre\">--config-file</span> \"load_electrons.yml\"</tt>. Now it is named to\n<tt>Escher</tt> (as for the module), and <tt><span class=\"pre\">escher-cli</span></tt> as the package name.</p>\n<p>There already exists a package called <tt>escher</tt> which is why this\npackage is <tt><span class=\"pre\">escher-cli</span></tt>. However I like the <tt><span class=\"pre\">-cli</span></tt> postfix b/c it is\nmore clear.</p>\n</div>\n<div id=\"how-shall-i-use-escher\">\n<h2>How shall I use <tt>Escher</tt>?</h2>\n<p>First thing first, you could <tt>alias</tt> <tt>Escher</tt> with whoever you want\nto call to run your experiments \ud83d\ude00.</p>\n<p>After aliasing this after your favorite person, you can follow the\nexamples bellow :)</p>\n<p>Note that <a href=\"https://www.facebook.com/episodeyang/videos/10101189402110434/\" rel=\"nofollow\">**batteries are\nincluded**</a>,\nand your mileage will vary.</p>\n</div>\n<div id=\"example-usage\">\n<h2>Example Usage</h2>\n<p>First install via <tt>pip</tt> (it\u2019s that simple!!)</p>\n<pre>pip install dave\n</pre>\n<p>Suppose you have the following folder structure</p>\n<pre>\u251c\u2500\u2500 your_thesis\n\u2514\u2500\u2500 MAML_tensorflow\n \u00a0\u00a0 \u251c\u2500\u2500 README.md\n \u00a0\u00a0 \u251c\u2500\u2500 experiment.yml\n \u00a0\u00a0 \u251c\u2500\u2500 maml.py\n \u00a0\u00a0 \u2514\u2500\u2500 models\n \u00a0\u00a0  \u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n \u00a0\u00a0  \u00a0\u00a0 \u2514\u2500\u2500 mlp.py\n</pre>\n<p>where the experiment.yml file looks like this:</p>\n<pre><span class=\"nt\">%YAML</span> <span class=\"m\">1.2</span>\n<span class=\"nn\">---</span>\n<span class=\"nt\">config</span><span class=\"p\">:</span>\n  <span class=\"nt\">max_concurrent</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">10</span>\n<span class=\"nt\">env</span><span class=\"p\">:</span>\n  <span class=\"nt\">PYTHONPATH</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">test_directory</span>\n<span class=\"nt\">run</span><span class=\"p\">:</span> <span class=\"p-Indicator\">|</span>\n  <span class=\"no\">{env} python maml_bradly.py {args}</span>\n<span class=\"nt\">default_args</span><span class=\"p\">:</span>\n  <span class=\"nt\">npts</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">100</span>\n  <span class=\"nt\">num_epochs</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">70000</span>\n  <span class=\"nt\">num_tasks</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">10</span>\n  <span class=\"nt\">num_grad_steps</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">1</span>\n  <span class=\"nt\">num_points_sampled</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">10</span>\n  <span class=\"nt\">fix_amp</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">False</span>\n<span class=\"nt\">batch_args</span><span class=\"p\">:</span> <span class=\"c1\"># use good typing convention here</span>\n  <span class=\"p-Indicator\">-</span> <span class=\"nt\">num_tasks</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">10</span>\n    <span class=\"nt\">num_grad_steps</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">1</span>\n    <span class=\"nt\">num_points_sampled</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">10</span>\n  <span class=\"p-Indicator\">-</span> <span class=\"nt\">num_tasks</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">10</span>\n    <span class=\"nt\">num_grad_steps</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">4</span>\n    <span class=\"nt\">num_points_sampled</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">20</span>\n<span class=\"nt\">tmp</span><span class=\"p\">:</span>\n  <span class=\"p-Indicator\">-</span> <span class=\"nt\">last_run</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">10</span>\n</pre>\n<p>Now under the project root, you can just run</p>\n<pre>dave --config-file <span class=\"s2\">\"escher.py\"</span>\n</pre>\n<p>and it will automatically run the experiment twice, using the arguments\nin the <tt>batch_args</tt> field of the Yaml configuration file. ## To\nDevelop</p>\n<p>first download from github. Then under project folder, run (you also\nneed to install the packages).</p>\n<pre>make dev <span class=\"nb\">test</span>\n</pre>\n<div id=\"bucket-list\">\n<h3>Bucket List</h3>\n<ul>\n<li>[ ] Allow extensions</li>\n<li>[ ] work on windows</li>\n<li>[ ] allow env files</li>\n<li>[ ] daemon mode</li>\n</ul>\n</div>\n</div>\n<div id=\"happy-doing-science\">\n<h2>Happy Doing Science!</h2>\n<div>\n<img alt=\"one-more-experiment\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/62db51270860f27c41a856a505a356ba590be934/68747470733a2f2f6769746875622e636f6d2f657069736f646579616e672f6573636865722d636c692f626c6f622f6d61737465722f666967757265732f706864303932333136732e6769663f7261773d74727565\">\n<p>one-more-experiment</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 3549044, "releases": {"0.0.0": [{"comment_text": "", "digests": {"md5": "7bc337d3baf8c2850c79719712258ee3", "sha256": "0d82efeee636596b1927de5889be6b63ed89f1caf82974a55a290c116f3f1c72"}, "downloads": -1, "filename": "escher_cli-0.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "7bc337d3baf8c2850c79719712258ee3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8066, "upload_time": "2018-01-15T23:16:46", "upload_time_iso_8601": "2018-01-15T23:16:46.384355Z", "url": "https://files.pythonhosted.org/packages/ce/10/6dd4e6c6674af81792508ef396e1db6f10a7483442c7b90c2e64d82b4e7a/escher_cli-0.0.0-py3-none-any.whl", "yanked": false}], "0.0.1": [{"comment_text": "", "digests": {"md5": "a313fbc955896169f5acac20539e65f2", "sha256": "d8d586e825188c8776dc7e4fd6f5955018ca0900fbcf93df99e60a10f8432585"}, "downloads": -1, "filename": "escher_cli-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a313fbc955896169f5acac20539e65f2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10936, "upload_time": "2018-02-03T19:31:05", "upload_time_iso_8601": "2018-02-03T19:31:05.069020Z", "url": "https://files.pythonhosted.org/packages/1f/6c/d6b4807ac50d33ad01af1c3266a5252412e438f150a2a53159b1232069df/escher_cli-0.0.1-py3-none-any.whl", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "8a29e603726952b1ba91536538176fca", "sha256": "916d80f9a417562c9fc8ca7be2ab866ef66811fb7af76344841763d6c5465174"}, "downloads": -1, "filename": "escher_cli-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "8a29e603726952b1ba91536538176fca", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18011, "upload_time": "2018-02-03T19:34:19", "upload_time_iso_8601": "2018-02-03T19:34:19.659169Z", "url": "https://files.pythonhosted.org/packages/08/2c/5ede0eba85a5891fc40f1717a56caae1d8a6b017c4dbeb78537867d59a0e/escher_cli-0.0.2-py3-none-any.whl", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "8ee8bdac77e0d4fc02a438da1e9e8679", "sha256": "9acf908dbdb76f365ac21ce745e4b32326b7c09f35d95bd54412ac2611047453"}, "downloads": -1, "filename": "escher_cli-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "8ee8bdac77e0d4fc02a438da1e9e8679", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 17926, "upload_time": "2018-02-03T19:42:35", "upload_time_iso_8601": "2018-02-03T19:42:35.977950Z", "url": "https://files.pythonhosted.org/packages/45/da/b286277458fecf59b8a19757168b0a2bcf2eef457beccab99fb4d80e4207/escher_cli-0.0.3-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8ee8bdac77e0d4fc02a438da1e9e8679", "sha256": "9acf908dbdb76f365ac21ce745e4b32326b7c09f35d95bd54412ac2611047453"}, "downloads": -1, "filename": "escher_cli-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "8ee8bdac77e0d4fc02a438da1e9e8679", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 17926, "upload_time": "2018-02-03T19:42:35", "upload_time_iso_8601": "2018-02-03T19:42:35.977950Z", "url": "https://files.pythonhosted.org/packages/45/da/b286277458fecf59b8a19757168b0a2bcf2eef457beccab99fb4d80e4207/escher_cli-0.0.3-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:45:42 2020"}