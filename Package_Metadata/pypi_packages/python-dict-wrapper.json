{"info": {"author": "Steve Brettschneider", "author_email": "steve@bluehousefamily.com", "bugtrack_url": null, "classifiers": [], "description": "Python Dict Wrapper\n===================\n\nThis is a simple class that exposes a dictionary\u2019s keys as class\nattributes, making for less typing when accessing dictionary values.\nThis class also enforces that the dictionary\u2019s overall **shape** is\nmaintained.\n\nA common use of this class may be in retrieving and updating model\nobjects from web services (i.e.\u00a0RESTful web services) where the shape of\nthe model object must be kept intact between when it is retrieved and\nwhen it is saved.\n\nFor instance, if used with\n`requests <https://github.com/psf/requests>`__, the output of a\nrequest\u2019s *json()* call can be wrapped and the resulting object will\nbehave in much the same manner as a real model object. The values can be\nmanipulated and later *unwrapped* to be sent back the server using a\nrequests *post()* call.\n\nUsing the python_dict_wrapper is pretty simple. You *wrap()* a\ndictionary (or list). Then you manipulate and/or query it. Finally, you\ncan *unwrap()* to get the dictionary (or list) back.\n\nA trivial example:\n\n::\n\n   import requests\n   from python_dict_wrapper import wrap, unwrap\n\n   actor_dict = requests.get('http://ficticious_actor_database_site.com/actors/c/carell_steve').json()\n\n   # Returns:\n   # {\n   #    \"name\": \"Steve Carell\",\n   #    \"career\": [{\n   #        \"medium\": \"TV\",\n   #        \"title\": \"The Office\"\n   #    }, {\n   #        \"medium\": \"MOVIE\",\n   #        \"title\": \"Bruce Almighty\"\n   #    }]\n   #}\n\n   actor = wrap(actor_dict)\n   actor.career[1].title = \"Despicable Me\"\n   unwrapped_actor = unwrap(actor)\n\n   requests.post('http://ficticious_actor_database_site.com/actors/c/carell_steve', data=unwrapped_actor)\n\nfunction wrap(data, strict=False, key_prefix=None, mutable=True)\n================================================================\n\n*wrap* is a factory function for generating either a DictWrapper or a\nListWrapper. It has one required argument and three optional ones:\n\n-  data - A Python dictionary or a list of dictionaries that needs to be\n   wrapped. If data is a dictionary, this method will return a\n   DictWrapper instance. If it\u2019s a list, the function will return a\n   ListWrapper instance. This argument is required.\n-  strict - An optional boolean that indicates if the wrapper should\n   enforce types when setting attribute values.\n-  key_prefix - A string or list of strings that contains characters\n   that dictionary keys should be prefixed with before they become\n   attributes.\n-  mutable - A boolean indicating whether the DictWapper should be\n   mutable or not.\n\nThis is a convenience function for when you have a data object and don\u2019t\nwant to bother checking if it\u2019s a dictionary or a list.\n\nfunction unwrap(wrapped_item)\n=============================\n\nThe *unwrap* function will return the original item that was wrapped.\n\n::\n\n   >>> from python_dict_wrapper import wrap, unwrap\n   >>> data_dict = {'first_name': 'Steve', 'last_name': 'Carell'}\n   >>> id(data_dict)\n   4497764480\n   >>> wrapped_data_dict = wrap(data_dict)\n   >>> id(wrapped_data_dict)\n   4498248224\n   >>> wrapped_data_dict\n   <python_dict_wrapper.DictWrapper object at 0x10c1dd220>\n   >>> unwrapped_data_dict = unwrap(wrapped_data_dict)\n   >>> unwrapped_data_dict is data_dict\n   True\n   >>> unwrapped_data_dict\n   {'first_name': 'Steve', 'last_name': 'Carell'}\n\nThe *unwrap* function will work on both *DictWrapper* items as well as\n*ListWrapper* items. If the item passed to *unwrap* is not a\n*DictWrapper* or a *ListWrapper*, *unwrap* will just return the item\nuntouched.\n\n*DictWrapper* objects manipulate the original dictionary that they wrap\nso unwrapping is technically unnecessary. That said, unwrap is available\nin the event a reference to the original dictionary is lost or goes out\nof scope.\n\nfunction add_attribute(wrapped_item, attribute_name, attribute_value)\n=====================================================================\n\nThe *add_attribute* function can be used to add an attribute to a\nDictWrapper after it has been instantiated. It can be used if the\noriginal dictionary is no longer available.\n\n::\n\n   >>> from python_dict_wrapper import wrap, add_attribute\n   >>> auth_config = wrap({'username': 'john@doe.com', 'password': 'itza!secret'})\n   >>> add_attribute(auth_config, 'host', 'ldap.doe.com')\n   >>> auth_config.host\n   'ldap.doe.com'\n\nfunction del_attribute(wrapped_item, attribute_name)\n====================================================\n\nConversely, *del_attribute* removes an existing attribute from an\nexisting DictWrapper. The del_attribute will return what the attribute\u2019s\nlast value was before being removed.\n\n::\n\n   >>> from python_dict_wrapper import wrap, del_attribute\n   >>> auth_config = wrap({'username': 'john@doe.com', 'password': 'itza!secret'})\n   >>> del_attribute(auth_config, 'password')\n   'itza!secret'\n   >>> hasattr(auth_config, 'password')\n   False\n\nclass DictWrapper(data, strict=False, key_prefix=None, mutable=True)\n====================================================================\n\nLike the wrap function, each *DictWrapper* instance takes one required\nargument and three optional ones:\n\n-  dict - A Python dictionary that the wrapper will use as it\u2019s source.\n   This argument is required.\n-  strict - An optional boolean that indicates if the wrapper should\n   enforce types when setting attribute values.\n-  key_prefix - A string or list of strings that contains characters\n   that dictionary keys should be prefixed with before they become\n   attributes.\n-  mutable - A boolean indicating whether the DictWapper should be\n   mutable or not.\n\nAttributes\n----------\n\nOnce a *DictWrapper* instance has been created, the keys of it\u2019s source\ndictionary will be exposed as attributes. So for example if a\n*DictWrapper* is instantiated with the following dictionary:\n\n::\n\n   >>> from dict_wrapper import wrap\n   >>> address_dict = {'street': '221B Baker Street', 'city': 'London', 'country': 'UK'}\n   >>> address = wrap(address_dict)\n\nThe keys: *street*, *city*, and \u2018country\u2019 will be exposed as attributes\nof *address*\n\n::\n\n   >>> address.street\n   '221B Baker Street'\n   >>> address.city\n   'London'\n   >>> address.country\n   'UK'\n\nThe attributes are both readable and writeable, so you can update the\nvalues simply by assigning to them:\n\n::\n\n   >>> address.country = \"United Kingdom\"\n   >>> address.country\n   'United Kingdom'\n\nIf the *strict* argument to the constructor was set to *True*, then the\n*DictWrapper* will enforce that that when you assign a new value to an\nattribute, it must be the same Type as the original dictionary value.\n\n::\n\n   >>> address = wrap(address_dict, strict=True)\n   >>> address.street = 221\n   Traceback (most recent call last):\n     File \"<stdin>\", line 1, in <module>\n     File \"dict_wrapper.py\", line 62, in __setattr__\n       raise TypeError(\"Value for %s must be a %s, not %s\" % (\n   TypeError: Value for street must be a str, not int\n\nIf the *key_prefix* argument to the constructor is set to a string or\nlist of strings, attributes in the dictionary are searched without their\nprefixes. This is typically used for dictionaries that have keys that\ncannot be represented in attributes. Here\u2019s an example:\n\n::\n\n   >>> the_dict = {'@timestamp': '2020-04-19 05:00:00', 'author': 'Arthur Conan Doyle'}\n   >>>\n   >>> entry = wrap(the_dict)\n   >>> entry.timestamp\n   Traceback (most recent call last):\n     File \"<stdin>\", line 1, in <module>\n     File \"python_dict_wrapper.py\", line 49, in __getattr__\n       self._check_for_bad_attribute(key)\n     File \"python_dict_wrapper.py\", line 87, in _check_for_bad_attribute\n       raise AttributeError(\"'%s' object has no attribute '%s'\" % (self.__class__.__name__, key))\n   AttributeError: 'DictWrapper' object has no attribute 'timestamp'\n   >>>\n   >>>\n   >>> entry = DictWrapper(the_dict, key_prefix='@')\n   >>> entry.timestamp\n   '2020-04-19 05:00:00'\n\nMethods\n-------\n\n*DictWrapper* instances have two methods: *to_json()* and *to_dict()*.\n\nto_json(pretty=False)\n~~~~~~~~~~~~~~~~~~~~~\n\nConverts the dictionary values to a JSON string. If the *pretty*\nargument is set to *True*, the returned JSON will be multi-lined and\nindented with 4 characters. If it\u2019s false, the returned JSON will a\nsingle-line of text.\n\nto_dict()\n~~~~~~~~~\n\nConverts the *DictWrapper* back to a Python dictionary.\n\nNesting\n-------\n\n*DictWrapper* instances should be able to handle nested dictionaries and\nlists without issue. It automatically wraps any nested dictionaries in\ntheir own *DictWrapper* instances for you.\n\n::\n\n   >>> shelock_dict = {\n   ...     'name': 'Sherlock Holmes',\n   ...     'address': {\n   ...             'street': '221B Baker Street',\n   ...             'city': 'London',\n   ...             'country': 'UK'\n   ...     }\n   ... }\n   >>> sherlock = DictWrapper(sherlock_dict)\n   >>> sherlock.address.country = 'United Kingdom'\n   >>> print(sherlock.to_json(pretty=True))\n   {\n       \"name\": \"Sherlock Holmes\",\n       \"address\": {\n           \"street\": \"221B Baker Street\",\n           \"city\": \"London\",\n           \"country\": \"United Kingdom\"\n       }\n   }\n\nclass ListWrapper(data, strict=False, key_prefix=None, mutable=True)\n====================================================================\n\nThe *ListWrapper* is a \u201clist\u201d version of the *DictWrapper*. It is used\nby the *DictWrapper* when nesting lists within dictionary values. The\n*ListWrapper* is a subclass of a built-in Python list and behaves almost\nexactly like a Python list with one exception. When retrieving items out\nof the list if the item is a dictionary, it will wrap it in a\n*DictWrapper*. If the item in question is a Python list, it will wrap it\nin another ListWrapper.\n\n::\n\n   >>> from python_dict_wrapper import ListWrapper\n   >>> the_list = [\n   ...     'one',\n   ...     [1, 2, 3],\n   ...     {'color': 'blue'}\n   ... ]\n   >>> wrapped_list = ListWrapper(the_list)\n   >>> wrapped_list[0]\n   'one'\n   >>> wrapped_list[1]\n   [1, 2, 3]\n   >>> wrapped_list[1].__class__\n   <class 'python_dict_wrapper.ListWrapper'>\n   >>> wrapped_list[2]\n   <python_dict_wrapper.DictWrapper object at 0x10fcc60a0>\n   >>> wrapped_list[2].color\n   'blue'\n\nMutability\n==========\n\nIf the *DictWrapper* is instantiated with *mutable* set to True\n(default), the *DictWrapper* will be mutable, meaning the attribute can\nbe changed. However, if *mutable* is set to False when the DictWrapper\nis instantiated, it will be immutable. You will not be able to change\nany of the attributes (or nested attributes). Any ListWrappers the\nresult from lists within the underlying dict will also be immutable. You\nwill not be able to add/remove from them.\n\n::\n\n   >>> from python_dict_wrapper import wrap\n   >>> auth_config = wrap({'username': 'john@doe.com', 'password': 'itza!secret'}, mutable=False)\n   >>> auth_config.password\n   'itza!secret'\n   >>> auth_config.password = 'super!secret'\n   Traceback (most recent call last):\n     File \"<stdin>\", line 1, in <module>\n     File \"python_dict_wrapper.py\", line 78, in __setattr__\n       raise AttributeError(\"can't set attribute\")\n   AttributeError: can't set attribute\n\nPerformance\n===========\n\n*DictWrapper* and *ListWrapper* instances lazy evaluate on the original\ndicts/lists that they are given when wrapped. As a result performance of\nthese classes should be roughly the same as their native counterparts.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/brettschneider/python_dict_wrapper", "keywords": "dictionary,wrapper,attributes,enforce", "license": "", "maintainer": "", "maintainer_email": "", "name": "python-dict-wrapper", "package_url": "https://pypi.org/project/python-dict-wrapper/", "platform": "", "project_url": "https://pypi.org/project/python-dict-wrapper/", "project_urls": {"Homepage": "https://github.com/brettschneider/python_dict_wrapper"}, "release_url": "https://pypi.org/project/python-dict-wrapper/0.9/", "requires_dist": null, "requires_python": "", "summary": "Wraps Python dictionary keys as attributes", "version": "0.9", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"python-dict-wrapper\">\n<h2>Python Dict Wrapper</h2>\n<p>This is a simple class that exposes a dictionary\u2019s keys as class\nattributes, making for less typing when accessing dictionary values.\nThis class also enforces that the dictionary\u2019s overall <strong>shape</strong> is\nmaintained.</p>\n<p>A common use of this class may be in retrieving and updating model\nobjects from web services (i.e.\u00a0RESTful web services) where the shape of\nthe model object must be kept intact between when it is retrieved and\nwhen it is saved.</p>\n<p>For instance, if used with\n<a href=\"https://github.com/psf/requests\" rel=\"nofollow\">requests</a>, the output of a\nrequest\u2019s <em>json()</em> call can be wrapped and the resulting object will\nbehave in much the same manner as a real model object. The values can be\nmanipulated and later <em>unwrapped</em> to be sent back the server using a\nrequests <em>post()</em> call.</p>\n<p>Using the python_dict_wrapper is pretty simple. You <em>wrap()</em> a\ndictionary (or list). Then you manipulate and/or query it. Finally, you\ncan <em>unwrap()</em> to get the dictionary (or list) back.</p>\n<p>A trivial example:</p>\n<pre>import requests\nfrom python_dict_wrapper import wrap, unwrap\n\nactor_dict = requests.get('http://ficticious_actor_database_site.com/actors/c/carell_steve').json()\n\n# Returns:\n# {\n#    \"name\": \"Steve Carell\",\n#    \"career\": [{\n#        \"medium\": \"TV\",\n#        \"title\": \"The Office\"\n#    }, {\n#        \"medium\": \"MOVIE\",\n#        \"title\": \"Bruce Almighty\"\n#    }]\n#}\n\nactor = wrap(actor_dict)\nactor.career[1].title = \"Despicable Me\"\nunwrapped_actor = unwrap(actor)\n\nrequests.post('http://ficticious_actor_database_site.com/actors/c/carell_steve', data=unwrapped_actor)\n</pre>\n</div>\n<div id=\"function-wrap-data-strict-false-key-prefix-none-mutable-true\">\n<h2>function wrap(data, strict=False, key_prefix=None, mutable=True)</h2>\n<p><em>wrap</em> is a factory function for generating either a DictWrapper or a\nListWrapper. It has one required argument and three optional ones:</p>\n<ul>\n<li>data - A Python dictionary or a list of dictionaries that needs to be\nwrapped. If data is a dictionary, this method will return a\nDictWrapper instance. If it\u2019s a list, the function will return a\nListWrapper instance. This argument is required.</li>\n<li>strict - An optional boolean that indicates if the wrapper should\nenforce types when setting attribute values.</li>\n<li>key_prefix - A string or list of strings that contains characters\nthat dictionary keys should be prefixed with before they become\nattributes.</li>\n<li>mutable - A boolean indicating whether the DictWapper should be\nmutable or not.</li>\n</ul>\n<p>This is a convenience function for when you have a data object and don\u2019t\nwant to bother checking if it\u2019s a dictionary or a list.</p>\n</div>\n<div id=\"function-unwrap-wrapped-item\">\n<h2>function unwrap(wrapped_item)</h2>\n<p>The <em>unwrap</em> function will return the original item that was wrapped.</p>\n<pre>&gt;&gt;&gt; from python_dict_wrapper import wrap, unwrap\n&gt;&gt;&gt; data_dict = {'first_name': 'Steve', 'last_name': 'Carell'}\n&gt;&gt;&gt; id(data_dict)\n4497764480\n&gt;&gt;&gt; wrapped_data_dict = wrap(data_dict)\n&gt;&gt;&gt; id(wrapped_data_dict)\n4498248224\n&gt;&gt;&gt; wrapped_data_dict\n&lt;python_dict_wrapper.DictWrapper object at 0x10c1dd220&gt;\n&gt;&gt;&gt; unwrapped_data_dict = unwrap(wrapped_data_dict)\n&gt;&gt;&gt; unwrapped_data_dict is data_dict\nTrue\n&gt;&gt;&gt; unwrapped_data_dict\n{'first_name': 'Steve', 'last_name': 'Carell'}\n</pre>\n<p>The <em>unwrap</em> function will work on both <em>DictWrapper</em> items as well as\n<em>ListWrapper</em> items. If the item passed to <em>unwrap</em> is not a\n<em>DictWrapper</em> or a <em>ListWrapper</em>, <em>unwrap</em> will just return the item\nuntouched.</p>\n<p><em>DictWrapper</em> objects manipulate the original dictionary that they wrap\nso unwrapping is technically unnecessary. That said, unwrap is available\nin the event a reference to the original dictionary is lost or goes out\nof scope.</p>\n</div>\n<div id=\"function-add-attribute-wrapped-item-attribute-name-attribute-value\">\n<h2>function add_attribute(wrapped_item, attribute_name, attribute_value)</h2>\n<p>The <em>add_attribute</em> function can be used to add an attribute to a\nDictWrapper after it has been instantiated. It can be used if the\noriginal dictionary is no longer available.</p>\n<pre>&gt;&gt;&gt; from python_dict_wrapper import wrap, add_attribute\n&gt;&gt;&gt; auth_config = wrap({'username': 'john@doe.com', 'password': 'itza!secret'})\n&gt;&gt;&gt; add_attribute(auth_config, 'host', 'ldap.doe.com')\n&gt;&gt;&gt; auth_config.host\n'ldap.doe.com'\n</pre>\n</div>\n<div id=\"function-del-attribute-wrapped-item-attribute-name\">\n<h2>function del_attribute(wrapped_item, attribute_name)</h2>\n<p>Conversely, <em>del_attribute</em> removes an existing attribute from an\nexisting DictWrapper. The del_attribute will return what the attribute\u2019s\nlast value was before being removed.</p>\n<pre>&gt;&gt;&gt; from python_dict_wrapper import wrap, del_attribute\n&gt;&gt;&gt; auth_config = wrap({'username': 'john@doe.com', 'password': 'itza!secret'})\n&gt;&gt;&gt; del_attribute(auth_config, 'password')\n'itza!secret'\n&gt;&gt;&gt; hasattr(auth_config, 'password')\nFalse\n</pre>\n</div>\n<div id=\"class-dictwrapper-data-strict-false-key-prefix-none-mutable-true\">\n<h2>class DictWrapper(data, strict=False, key_prefix=None, mutable=True)</h2>\n<p>Like the wrap function, each <em>DictWrapper</em> instance takes one required\nargument and three optional ones:</p>\n<ul>\n<li>dict - A Python dictionary that the wrapper will use as it\u2019s source.\nThis argument is required.</li>\n<li>strict - An optional boolean that indicates if the wrapper should\nenforce types when setting attribute values.</li>\n<li>key_prefix - A string or list of strings that contains characters\nthat dictionary keys should be prefixed with before they become\nattributes.</li>\n<li>mutable - A boolean indicating whether the DictWapper should be\nmutable or not.</li>\n</ul>\n<div id=\"attributes\">\n<h3>Attributes</h3>\n<p>Once a <em>DictWrapper</em> instance has been created, the keys of it\u2019s source\ndictionary will be exposed as attributes. So for example if a\n<em>DictWrapper</em> is instantiated with the following dictionary:</p>\n<pre>&gt;&gt;&gt; from dict_wrapper import wrap\n&gt;&gt;&gt; address_dict = {'street': '221B Baker Street', 'city': 'London', 'country': 'UK'}\n&gt;&gt;&gt; address = wrap(address_dict)\n</pre>\n<p>The keys: <em>street</em>, <em>city</em>, and \u2018country\u2019 will be exposed as attributes\nof <em>address</em></p>\n<pre>&gt;&gt;&gt; address.street\n'221B Baker Street'\n&gt;&gt;&gt; address.city\n'London'\n&gt;&gt;&gt; address.country\n'UK'\n</pre>\n<p>The attributes are both readable and writeable, so you can update the\nvalues simply by assigning to them:</p>\n<pre>&gt;&gt;&gt; address.country = \"United Kingdom\"\n&gt;&gt;&gt; address.country\n'United Kingdom'\n</pre>\n<p>If the <em>strict</em> argument to the constructor was set to <em>True</em>, then the\n<em>DictWrapper</em> will enforce that that when you assign a new value to an\nattribute, it must be the same Type as the original dictionary value.</p>\n<pre>&gt;&gt;&gt; address = wrap(address_dict, strict=True)\n&gt;&gt;&gt; address.street = 221\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"dict_wrapper.py\", line 62, in __setattr__\n    raise TypeError(\"Value for %s must be a %s, not %s\" % (\nTypeError: Value for street must be a str, not int\n</pre>\n<p>If the <em>key_prefix</em> argument to the constructor is set to a string or\nlist of strings, attributes in the dictionary are searched without their\nprefixes. This is typically used for dictionaries that have keys that\ncannot be represented in attributes. Here\u2019s an example:</p>\n<pre>&gt;&gt;&gt; the_dict = {'@timestamp': '2020-04-19 05:00:00', 'author': 'Arthur Conan Doyle'}\n&gt;&gt;&gt;\n&gt;&gt;&gt; entry = wrap(the_dict)\n&gt;&gt;&gt; entry.timestamp\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"python_dict_wrapper.py\", line 49, in __getattr__\n    self._check_for_bad_attribute(key)\n  File \"python_dict_wrapper.py\", line 87, in _check_for_bad_attribute\n    raise AttributeError(\"'%s' object has no attribute '%s'\" % (self.__class__.__name__, key))\nAttributeError: 'DictWrapper' object has no attribute 'timestamp'\n&gt;&gt;&gt;\n&gt;&gt;&gt;\n&gt;&gt;&gt; entry = DictWrapper(the_dict, key_prefix='@')\n&gt;&gt;&gt; entry.timestamp\n'2020-04-19 05:00:00'\n</pre>\n</div>\n<div id=\"methods\">\n<h3>Methods</h3>\n<p><em>DictWrapper</em> instances have two methods: <em>to_json()</em> and <em>to_dict()</em>.</p>\n<div id=\"to-json-pretty-false\">\n<h4>to_json(pretty=False)</h4>\n<p>Converts the dictionary values to a JSON string. If the <em>pretty</em>\nargument is set to <em>True</em>, the returned JSON will be multi-lined and\nindented with 4 characters. If it\u2019s false, the returned JSON will a\nsingle-line of text.</p>\n</div>\n<div id=\"to-dict\">\n<h4>to_dict()</h4>\n<p>Converts the <em>DictWrapper</em> back to a Python dictionary.</p>\n</div>\n</div>\n<div id=\"nesting\">\n<h3>Nesting</h3>\n<p><em>DictWrapper</em> instances should be able to handle nested dictionaries and\nlists without issue. It automatically wraps any nested dictionaries in\ntheir own <em>DictWrapper</em> instances for you.</p>\n<pre>&gt;&gt;&gt; shelock_dict = {\n...     'name': 'Sherlock Holmes',\n...     'address': {\n...             'street': '221B Baker Street',\n...             'city': 'London',\n...             'country': 'UK'\n...     }\n... }\n&gt;&gt;&gt; sherlock = DictWrapper(sherlock_dict)\n&gt;&gt;&gt; sherlock.address.country = 'United Kingdom'\n&gt;&gt;&gt; print(sherlock.to_json(pretty=True))\n{\n    \"name\": \"Sherlock Holmes\",\n    \"address\": {\n        \"street\": \"221B Baker Street\",\n        \"city\": \"London\",\n        \"country\": \"United Kingdom\"\n    }\n}\n</pre>\n</div>\n</div>\n<div id=\"class-listwrapper-data-strict-false-key-prefix-none-mutable-true\">\n<h2>class ListWrapper(data, strict=False, key_prefix=None, mutable=True)</h2>\n<p>The <em>ListWrapper</em> is a \u201clist\u201d version of the <em>DictWrapper</em>. It is used\nby the <em>DictWrapper</em> when nesting lists within dictionary values. The\n<em>ListWrapper</em> is a subclass of a built-in Python list and behaves almost\nexactly like a Python list with one exception. When retrieving items out\nof the list if the item is a dictionary, it will wrap it in a\n<em>DictWrapper</em>. If the item in question is a Python list, it will wrap it\nin another ListWrapper.</p>\n<pre>&gt;&gt;&gt; from python_dict_wrapper import ListWrapper\n&gt;&gt;&gt; the_list = [\n...     'one',\n...     [1, 2, 3],\n...     {'color': 'blue'}\n... ]\n&gt;&gt;&gt; wrapped_list = ListWrapper(the_list)\n&gt;&gt;&gt; wrapped_list[0]\n'one'\n&gt;&gt;&gt; wrapped_list[1]\n[1, 2, 3]\n&gt;&gt;&gt; wrapped_list[1].__class__\n&lt;class 'python_dict_wrapper.ListWrapper'&gt;\n&gt;&gt;&gt; wrapped_list[2]\n&lt;python_dict_wrapper.DictWrapper object at 0x10fcc60a0&gt;\n&gt;&gt;&gt; wrapped_list[2].color\n'blue'\n</pre>\n</div>\n<div id=\"mutability\">\n<h2>Mutability</h2>\n<p>If the <em>DictWrapper</em> is instantiated with <em>mutable</em> set to True\n(default), the <em>DictWrapper</em> will be mutable, meaning the attribute can\nbe changed. However, if <em>mutable</em> is set to False when the DictWrapper\nis instantiated, it will be immutable. You will not be able to change\nany of the attributes (or nested attributes). Any ListWrappers the\nresult from lists within the underlying dict will also be immutable. You\nwill not be able to add/remove from them.</p>\n<pre>&gt;&gt;&gt; from python_dict_wrapper import wrap\n&gt;&gt;&gt; auth_config = wrap({'username': 'john@doe.com', 'password': 'itza!secret'}, mutable=False)\n&gt;&gt;&gt; auth_config.password\n'itza!secret'\n&gt;&gt;&gt; auth_config.password = 'super!secret'\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"python_dict_wrapper.py\", line 78, in __setattr__\n    raise AttributeError(\"can't set attribute\")\nAttributeError: can't set attribute\n</pre>\n</div>\n<div id=\"performance\">\n<h2>Performance</h2>\n<p><em>DictWrapper</em> and <em>ListWrapper</em> instances lazy evaluate on the original\ndicts/lists that they are given when wrapped. As a result performance of\nthese classes should be roughly the same as their native counterparts.</p>\n</div>\n\n          </div>"}, "last_serial": 7149508, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "e7a647a71e2649d2e9a2475c9f030e37", "sha256": "28e513e3986db5f8e97a8b96ce81a6f1858c076dd4ec139c04c2fdbb0c9d9b0d"}, "downloads": -1, "filename": "python_dict_wrapper-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e7a647a71e2649d2e9a2475c9f030e37", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 2080, "upload_time": "2020-04-19T22:33:40", "upload_time_iso_8601": "2020-04-19T22:33:40.065807Z", "url": "https://files.pythonhosted.org/packages/b0/b4/4f741ba277baa788302e4ee197f9b0312edd8b76ed1b09007c3d8bb480cb/python_dict_wrapper-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "65163590812654c27b50c690eff5d1ef", "sha256": "9af880d07d273596cecbc48c9e75a9e209bd90677a0121fa06eeda11be459a22"}, "downloads": -1, "filename": "python-dict-wrapper-0.1.tar.gz", "has_sig": false, "md5_digest": "65163590812654c27b50c690eff5d1ef", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2589, "upload_time": "2020-04-19T22:33:42", "upload_time_iso_8601": "2020-04-19T22:33:42.371271Z", "url": "https://files.pythonhosted.org/packages/54/a3/57258d2afafdd4522c31d63e7b61b5495cd5d64e66f949035872cbc57166/python-dict-wrapper-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "7852cd0291117c1dbd90feea86585861", "sha256": "377267f2b11c3125b33b60a473e9befe149e8a421a6c994b967fc780cf1e103f"}, "downloads": -1, "filename": "python_dict_wrapper-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "7852cd0291117c1dbd90feea86585861", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3604, "upload_time": "2020-04-19T22:43:08", "upload_time_iso_8601": "2020-04-19T22:43:08.537338Z", "url": "https://files.pythonhosted.org/packages/33/02/d757082ef1b39b5dcebcdfe954850ddd759a422626ff30608e75e0fb99e1/python_dict_wrapper-0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e2db49b0bbdb96a214b9d06c6633d62c", "sha256": "817dce82a4d3a149bde287e60656ef15b41013c7152e2b6cbf6a63ffeb3d87d4"}, "downloads": -1, "filename": "python-dict-wrapper-0.2.tar.gz", "has_sig": false, "md5_digest": "e2db49b0bbdb96a214b9d06c6633d62c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3716, "upload_time": "2020-04-19T22:43:09", "upload_time_iso_8601": "2020-04-19T22:43:09.782724Z", "url": "https://files.pythonhosted.org/packages/3e/a3/2c877458e14cf30f19dc3e4c7790411c07d14de3b1c480936b4d33002fb0/python-dict-wrapper-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "8a069e3ae41a9f979c819d5c61403f83", "sha256": "c9b4ab6d6c0d8f6305918493bd7ef8b85d869330606a4fa125873b3efc2d4066"}, "downloads": -1, "filename": "python_dict_wrapper-0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "8a069e3ae41a9f979c819d5c61403f83", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5017, "upload_time": "2020-04-19T22:46:59", "upload_time_iso_8601": "2020-04-19T22:46:59.933916Z", "url": "https://files.pythonhosted.org/packages/b7/40/dead91feb0d617aece0258844c4708cd2b070105d308dfac0d773c1c4ccf/python_dict_wrapper-0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "177bbf07f64797a9a2efa273f48c1c23", "sha256": "454de72055a56e5de9f41f8f1ff8f1e7491f7d946008fa387f8ed72a701c1b6b"}, "downloads": -1, "filename": "python-dict-wrapper-0.3.tar.gz", "has_sig": false, "md5_digest": "177bbf07f64797a9a2efa273f48c1c23", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4213, "upload_time": "2020-04-19T22:47:01", "upload_time_iso_8601": "2020-04-19T22:47:01.486943Z", "url": "https://files.pythonhosted.org/packages/c7/57/eb009da78369b1e41093f0d04186aad89bfab1547ef4dae213ff8e0c6eab/python-dict-wrapper-0.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "c523c0766d67eadb6001b5c588abd2b9", "sha256": "d93258e1f5362ab1a4790f8510dd2abba48f658682ac8f5f64a7d0680f6a66ef"}, "downloads": -1, "filename": "python_dict_wrapper-0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "c523c0766d67eadb6001b5c588abd2b9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5499, "upload_time": "2020-04-19T23:11:27", "upload_time_iso_8601": "2020-04-19T23:11:27.143739Z", "url": "https://files.pythonhosted.org/packages/99/e8/335ebfb312123be6055c939796b5c7b5d2672dc5e03f6cc8239c4217d884/python_dict_wrapper-0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5a299c02c74cde2a20e0585cd19ba58f", "sha256": "f0470e1fe67e3a84d2d69687a5551d3badf3b00d4dce95b2cec7527149bca0dc"}, "downloads": -1, "filename": "python-dict-wrapper-0.4.tar.gz", "has_sig": false, "md5_digest": "5a299c02c74cde2a20e0585cd19ba58f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4718, "upload_time": "2020-04-19T23:11:28", "upload_time_iso_8601": "2020-04-19T23:11:28.506622Z", "url": "https://files.pythonhosted.org/packages/72/7d/277d93bdd3cef2c626a1d8b9e0019cc787bc76f0c3e57d5df69617a3e3a5/python-dict-wrapper-0.4.tar.gz", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "42cfde738e883ca95d0b67fde212a9e3", "sha256": "b8aac330313ad9477394c3227b44254d198d3802aa5d74f5d2c468932cabbab3"}, "downloads": -1, "filename": "python_dict_wrapper-0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "42cfde738e883ca95d0b67fde212a9e3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5528, "upload_time": "2020-04-19T23:23:33", "upload_time_iso_8601": "2020-04-19T23:23:33.322154Z", "url": "https://files.pythonhosted.org/packages/0b/d4/595f6bfadcec85dbbdfd48a74babdce5d9ba8ba1a04afdc0aba08c4957e6/python_dict_wrapper-0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "16f5a4d4cfb0707bb11c634376ebc1f5", "sha256": "d3a24aec59a6bd77e9908ee24ce0b226e95c937d7b81160233e8d73bf2aebfc1"}, "downloads": -1, "filename": "python-dict-wrapper-0.5.tar.gz", "has_sig": false, "md5_digest": "16f5a4d4cfb0707bb11c634376ebc1f5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4733, "upload_time": "2020-04-19T23:23:34", "upload_time_iso_8601": "2020-04-19T23:23:34.668504Z", "url": "https://files.pythonhosted.org/packages/4e/ca/c59b8d13bd4bf8a7e90f8f731e81b45abaede41d87dbf191eae54a60a16e/python-dict-wrapper-0.5.tar.gz", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "2202f1846ce8961a9d07319bf92d10f7", "sha256": "48f5ac65743ee88fefe471aa1daa437f0252d1c34e2fbc205b2ef008b4805dd5"}, "downloads": -1, "filename": "python_dict_wrapper-0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "2202f1846ce8961a9d07319bf92d10f7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6129, "upload_time": "2020-04-20T02:29:49", "upload_time_iso_8601": "2020-04-20T02:29:49.731790Z", "url": "https://files.pythonhosted.org/packages/03/8e/319b831fd1d22072fa668fa1f999584e25f7d6120af8d174adee9caa25e3/python_dict_wrapper-0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c6e78406f1764b0c83c8bb387d5b8498", "sha256": "c70b5fe7f51937f6e1f97c95b318e0a9f8823e42b19d6e83efe51c3c3ed272ec"}, "downloads": -1, "filename": "python-dict-wrapper-0.6.tar.gz", "has_sig": false, "md5_digest": "c6e78406f1764b0c83c8bb387d5b8498", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5514, "upload_time": "2020-04-20T02:29:50", "upload_time_iso_8601": "2020-04-20T02:29:50.772233Z", "url": "https://files.pythonhosted.org/packages/f9/9f/4b6196d0c313189f78fe854365d95389bfc573479ad2a5b070639be51e09/python-dict-wrapper-0.6.tar.gz", "yanked": false}], "0.7": [{"comment_text": "", "digests": {"md5": "8f981381be8d65ed1691ed6291a91884", "sha256": "77dacd180b99e08963548b494643ba1e6e345efd0e8316dbc151fc4640498c2c"}, "downloads": -1, "filename": "python_dict_wrapper-0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "8f981381be8d65ed1691ed6291a91884", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6880, "upload_time": "2020-04-22T14:03:21", "upload_time_iso_8601": "2020-04-22T14:03:21.118723Z", "url": "https://files.pythonhosted.org/packages/9d/62/b641a02e5ebade0a706a1486929457c1f0e3aa51e99f373bdbd6bab155cf/python_dict_wrapper-0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "48418e93d7b89a8e715452a0eeaf5eac", "sha256": "74b74f6d0d524006d68aefc11d5353c110db484fc22d3111fdb7f6a65c383ebe"}, "downloads": -1, "filename": "python-dict-wrapper-0.7.tar.gz", "has_sig": false, "md5_digest": "48418e93d7b89a8e715452a0eeaf5eac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6416, "upload_time": "2020-04-22T14:03:22", "upload_time_iso_8601": "2020-04-22T14:03:22.723479Z", "url": "https://files.pythonhosted.org/packages/24/d3/646dcc22d18b886ee3b8f961f5dace0b833403f39e528e0b246968580183/python-dict-wrapper-0.7.tar.gz", "yanked": false}], "0.8": [{"comment_text": "", "digests": {"md5": "b7e291dfaddddeba6423e35427396795", "sha256": "a860742850c34d73bdd282794535daca59fed598a71c3164012be44457aeb3da"}, "downloads": -1, "filename": "python_dict_wrapper-0.8-py3-none-any.whl", "has_sig": false, "md5_digest": "b7e291dfaddddeba6423e35427396795", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6986, "upload_time": "2020-04-26T01:16:05", "upload_time_iso_8601": "2020-04-26T01:16:05.146519Z", "url": "https://files.pythonhosted.org/packages/4f/33/f099f3a600d3cf3d0d328e788424fbb850384d09753ac3168d3f733678ab/python_dict_wrapper-0.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4e885d381d2850cd9926bd8ab349b820", "sha256": "4e0652851f9805612e87689c00ee201911671a91f977233fce6d247462cb7100"}, "downloads": -1, "filename": "python-dict-wrapper-0.8.tar.gz", "has_sig": false, "md5_digest": "4e885d381d2850cd9926bd8ab349b820", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6514, "upload_time": "2020-04-26T01:16:06", "upload_time_iso_8601": "2020-04-26T01:16:06.588076Z", "url": "https://files.pythonhosted.org/packages/2f/72/556447de2875bfb3eda8fa9e31a6fd3ebd424796c106cae1a56613b2a87c/python-dict-wrapper-0.8.tar.gz", "yanked": false}], "0.9": [{"comment_text": "", "digests": {"md5": "fbe36acbd364d59d9b40acc6000f70ea", "sha256": "88d6b3ab4d2c0fd1acc9da0fe446cb0b58e93405d053e7ce48cf8a8da6703f10"}, "downloads": -1, "filename": "python_dict_wrapper-0.9-py3-none-any.whl", "has_sig": false, "md5_digest": "fbe36acbd364d59d9b40acc6000f70ea", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7750, "upload_time": "2020-05-02T03:03:21", "upload_time_iso_8601": "2020-05-02T03:03:21.842236Z", "url": "https://files.pythonhosted.org/packages/1f/5b/db74ee244e7371a229c5800604d042984c8a428445e5570c42fb0c124b73/python_dict_wrapper-0.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "04e3b2a51b39878e7e2358c414efb21e", "sha256": "c9057866c21cbdb204729a5bfea86eef6bc5e2010a36c93aa3272593bc50cf0b"}, "downloads": -1, "filename": "python-dict-wrapper-0.9.tar.gz", "has_sig": false, "md5_digest": "04e3b2a51b39878e7e2358c414efb21e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7487, "upload_time": "2020-05-02T03:03:23", "upload_time_iso_8601": "2020-05-02T03:03:23.176815Z", "url": "https://files.pythonhosted.org/packages/5b/82/a9e99fb06116917a42f2ed24e5acbaa0373a71d9f9a2a7fef4856aecf33c/python-dict-wrapper-0.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "fbe36acbd364d59d9b40acc6000f70ea", "sha256": "88d6b3ab4d2c0fd1acc9da0fe446cb0b58e93405d053e7ce48cf8a8da6703f10"}, "downloads": -1, "filename": "python_dict_wrapper-0.9-py3-none-any.whl", "has_sig": false, "md5_digest": "fbe36acbd364d59d9b40acc6000f70ea", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7750, "upload_time": "2020-05-02T03:03:21", "upload_time_iso_8601": "2020-05-02T03:03:21.842236Z", "url": "https://files.pythonhosted.org/packages/1f/5b/db74ee244e7371a229c5800604d042984c8a428445e5570c42fb0c124b73/python_dict_wrapper-0.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "04e3b2a51b39878e7e2358c414efb21e", "sha256": "c9057866c21cbdb204729a5bfea86eef6bc5e2010a36c93aa3272593bc50cf0b"}, "downloads": -1, "filename": "python-dict-wrapper-0.9.tar.gz", "has_sig": false, "md5_digest": "04e3b2a51b39878e7e2358c414efb21e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7487, "upload_time": "2020-05-02T03:03:23", "upload_time_iso_8601": "2020-05-02T03:03:23.176815Z", "url": "https://files.pythonhosted.org/packages/5b/82/a9e99fb06116917a42f2ed24e5acbaa0373a71d9f9a2a7fef4856aecf33c/python-dict-wrapper-0.9.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:18:00 2020"}