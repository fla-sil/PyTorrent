{"info": {"author": "Maarten ter Huurne", "author_email": "maarten@boxingbeetle.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Internet :: WWW/HTTP", "Topic :: Software Development :: Testing"], "description": "APE - Automated Page Exerciser\n==============================\n\n*Smarter-than-monkey testing for web apps*\n\n<https://boxingbeetle.com/tools/ape/>\n\nTesting Without Test Scripts\n----------------------------\n\nThe only thing APE needs to know about a web app or site is its URL. From that starting point, it automatically finds links to other pages and subjects all of them to a series of checks. So it takes very little effort to check your web app or site with APE.\n\nOf course, since APE knows next to nothing about your specific web app, there are limits to what it can check. For example, it can submit a form and check whether the server returns an error or an OK result and whether the resulting page is valid HTML, but it cannot check whether the content matches the submitted form values. Therefore, APE is not a replacement for scripted test tools like [Selenium](https://docs.seleniumhq.org/).\n\nYou may be surprised by how many problems can be uncovered just following random links and checking the result. Give APE a try!\n\nCan APE Test My Web App/Site?\n-----------------------------\n\nAPE can be used if:\n\n- you have a static web site, for example one written by hand or generated by a static content management system like [Lektor](https://www.getlektor.com/) or [Jekyll](https://jekyllrb.com/)\n- you have a dynamic web application in which URLs are meaningful and the main content is in HTML\n\nAPE cannot be used if:\n\n- your server relies on session state instead of HTTP GET requests to determine what to render\n- your web app generates all HTML in client-side JavaScript instead of serving it over HTTP\n\nSo roughly, APE will work if your app supports deep-linking and JavaScript is used for optional enhancements, while APE will not work if you have built a single-page application.\n\nInstallation\n------------\n\nAPE requires Python 3.5 or higher.\n\nYou can use the package tool \"pip\" that comes with Python to install APE:\n\n    $ pip install apetest\n\nNow you should be able to run the `apetest` command:\n\n    $ apetest --version\n    APE 0.1.0\n\nAPE uses the [Nu Html Checker (v.Nu)](<https://validator.github.io/>) to check HTML. The checker itself is installed by pip, but you also need a Java runtime on your machine to run it, such as [OpenJDK](https://openjdk.java.net/install/index.html). You only need the runtime (JRE) and not the full development kit (JDK).\n\nYou can use APE without the HTML checker, but it is much more useful with the checker enabled.\n\nUsage\n-----\n\nTo check the HTML of a static web site in a local directory:\n\n    $ apetest --check launch website/ report.html\n\nTo do a quick sanity check (no HTML check) of a web application in development:\n\n    $ apetest localhost:8080 report.html\n\nTo see all command line options:\n\n    $ apetest --help\n\nHow Mature Is APE?\n------------------\n\nIt is mature enough that I'm using it in production to test our company web site and the web application SoftFab that we'll be releasing soon. However, at the time of writing I am the only user, so I fully expect that once other people start using it, they will run into bugs and limitations that I haven't. If that happens to you, please let me know (see next section).\n\nThe code was modernized over the last few months and should be in reasonable shape. It is fully documented and free of issues PyLint can detect. It is missing unit tests for most of its functionality though, so I'm relying on system tests at the moment, which can easily miss corner cases.\n\nFeedback\n--------\n\nYou can report bugs and make feature requests in [APE's issue tracker at GitHub](https://github.com/boxingbeetle/apetest/issues).\n\nIf you are interested in sponsoring a new feature, [contact us at Boxing Beetle](https://boxingbeetle.com/contact/).\n\nWriting a Plugin\n----------------\n\nAPE can be extended using plugins. Plugins are Python modules placed into the `apetest.plugin` package; read the API documentation of `apetest.plugin` to learn about the plugin interface.\n\nThe plugin interface was designed to have just enough features to be able to convert pre-existing optional functionality to plugins. The intention is to grow and improve it over time. So if you need additional callbacks or information passed, feel free to request a change in the plugin interface, or prototype one yourself (see next section).\n\nContributing\n------------\n\nIf you want to modify APE, start by cloning the Git repository:\n\n    $ git clone https://github.com/boxingbeetle/apetest.git\n\nMake sure the `python` command starts Python version 3.5 or later. If this is not the default on your system, you can use for example [pyenv](https://github.com/pyenv/pyenv) or [virtualenv](https://virtualenv.pypa.io/) to set up an environment with the right Python version.\n\nAPE uses the [Poetry build system](https://poetry.eustace.io/) for managing its development environment. Using the [recommended installation procedure](https://github.com/sdispater/poetry#installation) instead of pip helps separate Poetry's dependencies from those of the software it manages, like APE.\n\nStart a shell in the virtual environment managed by Poetry:\n\n    $ poetry shell\n\nInstall APE and its runtime and development dependencies:\n\n    $ poetry install\n\nNow you should have an `apetest` command available in the Poetry shell that runs APE directly from the source tree. This means that any code you edit is immediately active, for easy testing.\n\nOne of the tools Poetry will install for you is [Invoke](https://www.pyinvoke.org/), which can be used to perform a few useful developer tasks. You can see the full list of tasks by running:\n\n    $ inv --list\n\nThe task you will probably want to run first is `docs`, which generates the documentation files:\n\n    $ inv docs\n\nNow you can read the API documentation in `docs/api/`. The documentation of the top-level module gives a quick overview of the code.\n\nBefore submitting a pull request, please run `inv test` to run all tests. There should be no failing tests and zero warnings from PyLint. If PyLint detects any false positives, please add a `pylint: disable=<id>` comment to suppress them.\n\nNote that APE may find invalid HTML in the API docs, but as long as APE doesn't crash and produces a readable report, that counts as the test passing as far as APE is concerned.\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://boxingbeetle.com/tools/ape/", "keywords": "webapp,website,test,check,html", "license": "BSD-3-Clause", "maintainer": "Maarten ter Huurne", "maintainer_email": "maarten@boxingbeetle.com", "name": "apetest", "package_url": "https://pypi.org/project/apetest/", "platform": "", "project_url": "https://pypi.org/project/apetest/", "project_urls": {"Documentation": "https://apedocs.boxingbeetle.com/", "Homepage": "https://boxingbeetle.com/tools/ape/", "Repository": "https://github.com/boxingbeetle/apetest"}, "release_url": "https://pypi.org/project/apetest/0.1.1/", "requires_dist": ["html5validator (>=0.3.1,<0.4.0)", "lxml (>=4.0,<5.0)"], "requires_python": ">=3.5,<4.0", "summary": "Smarter-than-monkey testing for web apps", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>APE - Automated Page Exerciser</h1>\n<p><em>Smarter-than-monkey testing for web apps</em></p>\n<p><a href=\"https://boxingbeetle.com/tools/ape/\" rel=\"nofollow\">https://boxingbeetle.com/tools/ape/</a></p>\n<h2>Testing Without Test Scripts</h2>\n<p>The only thing APE needs to know about a web app or site is its URL. From that starting point, it automatically finds links to other pages and subjects all of them to a series of checks. So it takes very little effort to check your web app or site with APE.</p>\n<p>Of course, since APE knows next to nothing about your specific web app, there are limits to what it can check. For example, it can submit a form and check whether the server returns an error or an OK result and whether the resulting page is valid HTML, but it cannot check whether the content matches the submitted form values. Therefore, APE is not a replacement for scripted test tools like <a href=\"https://docs.seleniumhq.org/\" rel=\"nofollow\">Selenium</a>.</p>\n<p>You may be surprised by how many problems can be uncovered just following random links and checking the result. Give APE a try!</p>\n<h2>Can APE Test My Web App/Site?</h2>\n<p>APE can be used if:</p>\n<ul>\n<li>you have a static web site, for example one written by hand or generated by a static content management system like <a href=\"https://www.getlektor.com/\" rel=\"nofollow\">Lektor</a> or <a href=\"https://jekyllrb.com/\" rel=\"nofollow\">Jekyll</a></li>\n<li>you have a dynamic web application in which URLs are meaningful and the main content is in HTML</li>\n</ul>\n<p>APE cannot be used if:</p>\n<ul>\n<li>your server relies on session state instead of HTTP GET requests to determine what to render</li>\n<li>your web app generates all HTML in client-side JavaScript instead of serving it over HTTP</li>\n</ul>\n<p>So roughly, APE will work if your app supports deep-linking and JavaScript is used for optional enhancements, while APE will not work if you have built a single-page application.</p>\n<h2>Installation</h2>\n<p>APE requires Python 3.5 or higher.</p>\n<p>You can use the package tool \"pip\" that comes with Python to install APE:</p>\n<pre><code>$ pip install apetest\n</code></pre>\n<p>Now you should be able to run the <code>apetest</code> command:</p>\n<pre><code>$ apetest --version\nAPE 0.1.0\n</code></pre>\n<p>APE uses the <a href=\"https://validator.github.io/\" rel=\"nofollow\">Nu Html Checker (v.Nu)</a> to check HTML. The checker itself is installed by pip, but you also need a Java runtime on your machine to run it, such as <a href=\"https://openjdk.java.net/install/index.html\" rel=\"nofollow\">OpenJDK</a>. You only need the runtime (JRE) and not the full development kit (JDK).</p>\n<p>You can use APE without the HTML checker, but it is much more useful with the checker enabled.</p>\n<h2>Usage</h2>\n<p>To check the HTML of a static web site in a local directory:</p>\n<pre><code>$ apetest --check launch website/ report.html\n</code></pre>\n<p>To do a quick sanity check (no HTML check) of a web application in development:</p>\n<pre><code>$ apetest localhost:8080 report.html\n</code></pre>\n<p>To see all command line options:</p>\n<pre><code>$ apetest --help\n</code></pre>\n<h2>How Mature Is APE?</h2>\n<p>It is mature enough that I'm using it in production to test our company web site and the web application SoftFab that we'll be releasing soon. However, at the time of writing I am the only user, so I fully expect that once other people start using it, they will run into bugs and limitations that I haven't. If that happens to you, please let me know (see next section).</p>\n<p>The code was modernized over the last few months and should be in reasonable shape. It is fully documented and free of issues PyLint can detect. It is missing unit tests for most of its functionality though, so I'm relying on system tests at the moment, which can easily miss corner cases.</p>\n<h2>Feedback</h2>\n<p>You can report bugs and make feature requests in <a href=\"https://github.com/boxingbeetle/apetest/issues\" rel=\"nofollow\">APE's issue tracker at GitHub</a>.</p>\n<p>If you are interested in sponsoring a new feature, <a href=\"https://boxingbeetle.com/contact/\" rel=\"nofollow\">contact us at Boxing Beetle</a>.</p>\n<h2>Writing a Plugin</h2>\n<p>APE can be extended using plugins. Plugins are Python modules placed into the <code>apetest.plugin</code> package; read the API documentation of <code>apetest.plugin</code> to learn about the plugin interface.</p>\n<p>The plugin interface was designed to have just enough features to be able to convert pre-existing optional functionality to plugins. The intention is to grow and improve it over time. So if you need additional callbacks or information passed, feel free to request a change in the plugin interface, or prototype one yourself (see next section).</p>\n<h2>Contributing</h2>\n<p>If you want to modify APE, start by cloning the Git repository:</p>\n<pre><code>$ git clone https://github.com/boxingbeetle/apetest.git\n</code></pre>\n<p>Make sure the <code>python</code> command starts Python version 3.5 or later. If this is not the default on your system, you can use for example <a href=\"https://github.com/pyenv/pyenv\" rel=\"nofollow\">pyenv</a> or <a href=\"https://virtualenv.pypa.io/\" rel=\"nofollow\">virtualenv</a> to set up an environment with the right Python version.</p>\n<p>APE uses the <a href=\"https://poetry.eustace.io/\" rel=\"nofollow\">Poetry build system</a> for managing its development environment. Using the <a href=\"https://github.com/sdispater/poetry#installation\" rel=\"nofollow\">recommended installation procedure</a> instead of pip helps separate Poetry's dependencies from those of the software it manages, like APE.</p>\n<p>Start a shell in the virtual environment managed by Poetry:</p>\n<pre><code>$ poetry shell\n</code></pre>\n<p>Install APE and its runtime and development dependencies:</p>\n<pre><code>$ poetry install\n</code></pre>\n<p>Now you should have an <code>apetest</code> command available in the Poetry shell that runs APE directly from the source tree. This means that any code you edit is immediately active, for easy testing.</p>\n<p>One of the tools Poetry will install for you is <a href=\"https://www.pyinvoke.org/\" rel=\"nofollow\">Invoke</a>, which can be used to perform a few useful developer tasks. You can see the full list of tasks by running:</p>\n<pre><code>$ inv --list\n</code></pre>\n<p>The task you will probably want to run first is <code>docs</code>, which generates the documentation files:</p>\n<pre><code>$ inv docs\n</code></pre>\n<p>Now you can read the API documentation in <code>docs/api/</code>. The documentation of the top-level module gives a quick overview of the code.</p>\n<p>Before submitting a pull request, please run <code>inv test</code> to run all tests. There should be no failing tests and zero warnings from PyLint. If PyLint detects any false positives, please add a <code>pylint: disable=&lt;id&gt;</code> comment to suppress them.</p>\n<p>Note that APE may find invalid HTML in the API docs, but as long as APE doesn't crash and produces a readable report, that counts as the test passing as far as APE is concerned.</p>\n\n          </div>"}, "last_serial": 4997079, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "048618172de863e95d6ed786f4bb4520", "sha256": "642d88d71a4d0bc05a3f122c4c6f0a8c459c9b9ca20482418661c5ea70ca9309"}, "downloads": -1, "filename": "apetest-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "048618172de863e95d6ed786f4bb4520", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5,<4.0", "size": 130240, "upload_time": "2019-02-02T14:07:51", "upload_time_iso_8601": "2019-02-02T14:07:51.928132Z", "url": "https://files.pythonhosted.org/packages/73/5a/8fe763d9ef23a4cc20d2136f1526719e776994908b875159b285db34a91e/apetest-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3aba4f67a397bb78792e339cd1f30b6c", "sha256": "0124a6158d66c0177b674a7a06a4897a9b62390743020f7da8d6b09087fed250"}, "downloads": -1, "filename": "apetest-0.1.0.tar.gz", "has_sig": false, "md5_digest": "3aba4f67a397bb78792e339cd1f30b6c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5,<4.0", "size": 41795, "upload_time": "2019-02-02T14:07:54", "upload_time_iso_8601": "2019-02-02T14:07:54.811164Z", "url": "https://files.pythonhosted.org/packages/dd/bc/07edefd9defe35e77c0cb45a792a1a7fe9a4d79d2464f0e29fadd6818ea3/apetest-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "181364798bde3b7db1c78d5f557246e8", "sha256": "aeb1341ccfb19d60dd30f7218a258d9e4cce5b2a25a8ea5d2b7aeb82108e3fdc"}, "downloads": -1, "filename": "apetest-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "181364798bde3b7db1c78d5f557246e8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5,<4.0", "size": 130753, "upload_time": "2019-03-28T10:34:21", "upload_time_iso_8601": "2019-03-28T10:34:21.339118Z", "url": "https://files.pythonhosted.org/packages/54/5d/1fbea3c856424d3b70faf9e57d4ac96b98fad19255e9a5813dde57d06670/apetest-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "72a2882d297a748517bffa53232be8fe", "sha256": "0f1a4dfae922e4b15455e95833874d413f3f22b9dfeb7f7adc0f64048f498cc9"}, "downloads": -1, "filename": "apetest-0.1.1.tar.gz", "has_sig": false, "md5_digest": "72a2882d297a748517bffa53232be8fe", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5,<4.0", "size": 42461, "upload_time": "2019-03-28T10:34:23", "upload_time_iso_8601": "2019-03-28T10:34:23.154958Z", "url": "https://files.pythonhosted.org/packages/b4/7d/db79f39f3aade186914944e7610ffd4718f9594dd7333bd0f4323eddd0c8/apetest-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "181364798bde3b7db1c78d5f557246e8", "sha256": "aeb1341ccfb19d60dd30f7218a258d9e4cce5b2a25a8ea5d2b7aeb82108e3fdc"}, "downloads": -1, "filename": "apetest-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "181364798bde3b7db1c78d5f557246e8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5,<4.0", "size": 130753, "upload_time": "2019-03-28T10:34:21", "upload_time_iso_8601": "2019-03-28T10:34:21.339118Z", "url": "https://files.pythonhosted.org/packages/54/5d/1fbea3c856424d3b70faf9e57d4ac96b98fad19255e9a5813dde57d06670/apetest-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "72a2882d297a748517bffa53232be8fe", "sha256": "0f1a4dfae922e4b15455e95833874d413f3f22b9dfeb7f7adc0f64048f498cc9"}, "downloads": -1, "filename": "apetest-0.1.1.tar.gz", "has_sig": false, "md5_digest": "72a2882d297a748517bffa53232be8fe", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5,<4.0", "size": 42461, "upload_time": "2019-03-28T10:34:23", "upload_time_iso_8601": "2019-03-28T10:34:23.154958Z", "url": "https://files.pythonhosted.org/packages/b4/7d/db79f39f3aade186914944e7610ffd4718f9594dd7333bd0f4323eddd0c8/apetest-0.1.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:17:51 2020"}