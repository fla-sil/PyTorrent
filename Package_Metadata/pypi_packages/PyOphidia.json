{"info": {"author": "Ophidia Developers", "author_email": "ophidia-info@cmcc.it", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Topic :: Scientific/Engineering", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "PyOphidia: Python bindings for Ophidia\n======================================\n\n*PyOphidia* is a GPLv3_-licensed Python package for interacting with the Ophidia_ framework.\n\nIt is an alternative to Oph_Term, the Ophidia no-GUI interpreter component, and a convenient way to submit SOAP HTTPS requests to an Ophidia server or to develop your own application using Python. \n\nIt runs on Python 2.7, 3.3, 3.4, 3.5 and 3.6 has no Python dependencies and is pure-Python code. It requires a running Ophidia instance for client-server interactions. The latest PyOphidia version (v1.8) is compatible with Ophidia v1.5.\n\nIt provides 2 main modules:\n\n- client.py: generic *low level* class to submit any type of requests (simple tasks and workflows), using SSL and SOAP with the client ophsubmit.py;\n- cube.py: *high level* cube-oriented class to interact directly with cubes, with several methods wrapping the operators.\n\nInstallation\n------------\nTo install *PyOphidia* package run the following command:\n\n.. code-block:: bash \n\n   pip install pyophidia\n\nInstall with conda\n------------------\n\nTo install *PyOphidia* with conda run the following command:\n\n.. code-block:: bash \n\n   conda install -c conda-forge pyophidia \n\nInstallation from sources\n-------------------------\nTo install the latest developement version run the following commands:\n\n.. code-block:: bash \n\n   git clone https://github.com/OphidiaBigData/PyOphidia\n   cd PyOphidia\n   python setup.py install\n\n\nExamples\n--------\n\nImport PyOphidia\n^^^^^^^^^^^^^^^^\nImport *client* module from *PyOphidia* package:\n\n.. code-block:: python\n\n   from PyOphidia import client\n\nInstantiate a client\n^^^^^^^^^^^^^^^^^^^^\nCreate a new *Client()* using the login parameters *username*, *password*, *host* and *port*.\nIt will also try to resume the last session the user was connected to, as well as the last working directory and the last produced cube.\n\n.. code-block:: python\n\n   ophclient = client.Client(username=\"oph-user\",password=\"oph-passwd\",server=\"127.0.0.1\",port=\"11732\")\n\nIn case of authentication token is used:\n\n.. code-block:: python\n\n   ophclient = client.Client(token=\"token\",server=\"127.0.0.1\",port=\"11732\")\n\n\nIf *OPH_USER*, *OPH_PASSWD* (or *OPH_TOKEN*), *OPH_SERVER_HOST* and *OPH_SERVER_PORT* variables have been set in the environment (see the documentation_ for more details), a client can be also created reading directly the values from the environment without the need to specify any parameter. \n\n.. code-block:: python\n\n   ophclient = client.Client(read_env=True)\n\n\nClient attributes\n^^^^^^^^^^^^^^^^^\n- *username*: Ophidia username\n- *password*: Ophidia password\n- *server*: Ophidia server address\n- *port*: Ophidia server port (default is 11732)\n- *session*: ID of the current session\n- *base_src_path*: Server-side instance base source path\n- *cwd*: Current Working Directory\n- *cdd*: Current Data Directory\n- *cube*: Last produced cube PID\n- *host_partition*: Name of host partition being used\n- *exec_mode*: Execution mode, 'sync' for synchronous mode (default), 'async' for asynchronous mode\n- *ncores*: Number of cores for each operation (default is 1)\n- *last_request*: Last submitted query\n- *last_response*: Last response received from the server (JSON string)\n- *last_jobid*: Job ID associated to the last request\n- *last_return_value*: Last return value associated to response\n- *last_error*: Last error value associated to response\n- *last_exec_time*: Last execution time value associated to response\n\nClient methods\n^^^^^^^^^^^^^^\n- *submit(query, display) -> self*: Submit a query like 'operator=myoperator;param1=value1;' or 'myoperator param1=value1;' to the Ophidia server according to all login parameters of the Client and its state.\n- *get_progress(id) -> dict* : Get progress of a workflow, either by specifying the id or from the last submitted one.\n- *deserialize_response() -> dict*: Return the last_response JSON string attribute as a Python dictionary.\n- *get_base_path(display) -> self* : Get base path for data from the Ophidia server.\n- *resume_session(display) -> self*: Resume the last session the user was connected to.\n- *resume_cwd(display) -> self*: Resume the last cwd (current working directory) the user was located into.\n- *resume_cdd(display) -> self*: Resume the last cdd (current working data directory) the user was located into.\n- *resume_cube(display) -> self*: Resume the last cube produced by the user.\n- *wsubmit(workflow, \\*params) -> self*: Submit an entire workflow passing a JSON string or the path of a JSON file and an optional series of parameters that will replace $1, $2 etc. in the workflow. The workflow will be validated against the Ophidia Workflow JSON Schema.\n- *wisvalid(workflow) -> bool*: Return True if the workflow (a JSON string or a Python dict) is valid against the Ophidia Workflow JSON Schema or False and the related validation/error message.\n- *pretty_print(response, response_i) -> self*: Prints the last_response JSON string attribute as a formatted response.\n\n*To display the command output set \"display=True\"* \n\nSubmit a request\n^^^^^^^^^^^^^^^^\nExecute the request *oph_list level=2*:\n\n.. code-block:: python\n\n   ophclient.submit(\"oph_list level=2\", display=True)\n\nSet a Client for the Cube class\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nInstantiate a new Client common to all Cube instances:\n\n.. code-block:: python\n\n   from PyOphidia import cube\n   cube.Cube.setclient(username=\"oph-user\",password=\"oph-passwd\",server=\"127.0.0.1\",port=\"11732\")\n\nCube attributes\n^^^^^^^^^^^^^^^\nInstance attributes:\n\n- *pid*: Cube PID\n- *creation_date*: Creation date of the cube\n- *measure*: Name of the variable imported into the cube\n- *measure_type*: Measure data type\n- *level*: Number of operations between the original imported cube and the actual cube\n- *nfragments*: Total number of fragments\n- *source_file*: Parent of the actual cube\n- *hostxcube*: Number of hosts on which the cube is stored\n- *fragxdb*: Number of fragments for each database\n- *rowsxfrag*: Number of rows for each fragment\n- *elementsxrow*: Number of elements for each row\n- *compressed*: If the cube is compressed or not\n- *size*: Size of the cube\n- *nelements*: Total number of elements\n- *dim_info*: List of dict with information on each cube dimension\n\nClass attributes:\n\n- *client*: instance of class Client through which it is possible to submit all requests\n\nCreate a new container\n^^^^^^^^^^^^^^^^^^^^^^\nCreate a new container to contain our cubes called *test*, with 3 *double* dimensions (*lat*, *lon* and *time*):\n\n.. code-block:: python\n\n   cube.Cube.createcontainer(container='test',dim='lat|lon|time',dim_type='double|double|double',hierarchy='oph_base|oph_base|oph_time')\n\nImport a new cube\n^^^^^^^^^^^^^^^^^\nImport the variable *T2M* from the NetCDF file */path/to/file.nc* into a new cube inside the *test* container. Use *lat* and *lon* as explicit dimensions and *time* as implicit dimension expressed in days:\n\n.. code-block:: python\n\n   mycube = cube.Cube(container='test',exp_dim='lat|lon',imp_dim='time',measure='T2M',src_path='/path/to/file.nc',exp_concept_level='c|c',imp_concept_level='d')\n\nCreate a Cube object from an existing cube identifier\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nInstantiate a new Cube using the PID of an existing cube:\n\n.. code-block:: python\n\n   mycube2 = cube.Cube(pid='http://127.0.0.1/1/2')\n\nShow a Cube structure and info\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nTo shows metadata information about a data cube, its size and the dimensions related to it:\n\n.. code-block:: python\n\n   mycube2.info()\n\n*For the operators such as \"cubeschema\", \"cubesize\", \"cubeelements\", \"explore\", \"hierarchy\", \"info\", \"list\", \"loggingbk\", \"operators\", \"search\", \"showgrid\", \"man\", \"metadata\", \"primitives\", \"provenance\", \"search\", \"showgrid\", \"tasks\" and other operators that provide verbose output, the display parameter by default is \"True\". For the rest of operators, to display the result, \"dispay=True\" should be set.*\n\nSubset a Cube\n^^^^^^^^^^^^^\nTo perform a subsetting operation along dimensions of a data cube (dimension values are used as input filters):\n\n.. code-block:: python\n\n   mycube3 = mycube2.subset(subset_dims='lat|lon',subset_filter='1:10|20:30',subset_type='coord')\n\nExplore Cube\n^^^^^^^^^^^^\nTo explore a data cube filtering the data along its dimensions:\n\n.. code-block:: python\n\n   mycube2.explore(subset_dims='lat|lon',subset_filter='1:10|20:30',subset_type='coord')\n\nExport to NetCDF file\n^^^^^^^^^^^^^^^^^^^^^\nTo export data into a single NetCDF file:\n\n.. code-block:: python\n\n   mycube3.exportnc2(output_path='/home/user')\n\nExport to Python array\n^^^^^^^^^^^^^^^^^^^^^^\nTo exports data in a python-friendly format:\n\n.. code-block:: python\n\n   data = mycube3.export_array(show_time='yes')\n\n\n.. _GPLv3: http://www.gnu.org/licenses/gpl-3.0.txt\n.. _Ophidia: http://ophidia.cmcc.it\n.. _documentation: http://ophidia.cmcc.it/documentation/users/terminal/term_advanced.html#oph-terminal-environment\n\n\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://ophidia.cmcc.it", "keywords": "", "license": "GPLv3+", "maintainer": "", "maintainer_email": "", "name": "PyOphidia", "package_url": "https://pypi.org/project/PyOphidia/", "platform": "", "project_url": "https://pypi.org/project/PyOphidia/", "project_urls": {"Homepage": "http://ophidia.cmcc.it"}, "release_url": "https://pypi.org/project/PyOphidia/1.8.1/", "requires_dist": null, "requires_python": "", "summary": "Python bindings for the Ophidia Data Analytics Platform", "version": "1.8.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><em>PyOphidia</em> is a <a href=\"http://www.gnu.org/licenses/gpl-3.0.txt\" rel=\"nofollow\">GPLv3</a>-licensed Python package for interacting with the <a href=\"http://ophidia.cmcc.it\" rel=\"nofollow\">Ophidia</a> framework.</p>\n<p>It is an alternative to Oph_Term, the Ophidia no-GUI interpreter component, and a convenient way to submit SOAP HTTPS requests to an Ophidia server or to develop your own application using Python.</p>\n<p>It runs on Python 2.7, 3.3, 3.4, 3.5 and 3.6 has no Python dependencies and is pure-Python code. It requires a running Ophidia instance for client-server interactions. The latest PyOphidia version (v1.8) is compatible with Ophidia v1.5.</p>\n<p>It provides 2 main modules:</p>\n<ul>\n<li>client.py: generic <em>low level</em> class to submit any type of requests (simple tasks and workflows), using SSL and SOAP with the client ophsubmit.py;</li>\n<li>cube.py: <em>high level</em> cube-oriented class to interact directly with cubes, with several methods wrapping the operators.</li>\n</ul>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>To install <em>PyOphidia</em> package run the following command:</p>\n<pre>pip install pyophidia\n</pre>\n</div>\n<div id=\"install-with-conda\">\n<h2>Install with conda</h2>\n<p>To install <em>PyOphidia</em> with conda run the following command:</p>\n<pre>conda install -c conda-forge pyophidia\n</pre>\n</div>\n<div id=\"installation-from-sources\">\n<h2>Installation from sources</h2>\n<p>To install the latest developement version run the following commands:</p>\n<pre>git clone https://github.com/OphidiaBigData/PyOphidia\n<span class=\"nb\">cd</span> PyOphidia\npython setup.py install\n</pre>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<div id=\"import-pyophidia\">\n<h3>Import PyOphidia</h3>\n<p>Import <em>client</em> module from <em>PyOphidia</em> package:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">PyOphidia</span> <span class=\"kn\">import</span> <span class=\"n\">client</span>\n</pre>\n</div>\n<div id=\"instantiate-a-client\">\n<h3>Instantiate a client</h3>\n<p>Create a new <em>Client()</em> using the login parameters <em>username</em>, <em>password</em>, <em>host</em> and <em>port</em>.\nIt will also try to resume the last session the user was connected to, as well as the last working directory and the last produced cube.</p>\n<pre><span class=\"n\">ophclient</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"o\">=</span><span class=\"s2\">\"oph-user\"</span><span class=\"p\">,</span><span class=\"n\">password</span><span class=\"o\">=</span><span class=\"s2\">\"oph-passwd\"</span><span class=\"p\">,</span><span class=\"n\">server</span><span class=\"o\">=</span><span class=\"s2\">\"127.0.0.1\"</span><span class=\"p\">,</span><span class=\"n\">port</span><span class=\"o\">=</span><span class=\"s2\">\"11732\"</span><span class=\"p\">)</span>\n</pre>\n<p>In case of authentication token is used:</p>\n<pre><span class=\"n\">ophclient</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"n\">token</span><span class=\"o\">=</span><span class=\"s2\">\"token\"</span><span class=\"p\">,</span><span class=\"n\">server</span><span class=\"o\">=</span><span class=\"s2\">\"127.0.0.1\"</span><span class=\"p\">,</span><span class=\"n\">port</span><span class=\"o\">=</span><span class=\"s2\">\"11732\"</span><span class=\"p\">)</span>\n</pre>\n<p>If <em>OPH_USER</em>, <em>OPH_PASSWD</em> (or <em>OPH_TOKEN</em>), <em>OPH_SERVER_HOST</em> and <em>OPH_SERVER_PORT</em> variables have been set in the environment (see the <a href=\"http://ophidia.cmcc.it/documentation/users/terminal/term_advanced.html#oph-terminal-environment\" rel=\"nofollow\">documentation</a> for more details), a client can be also created reading directly the values from the environment without the need to specify any parameter.</p>\n<pre><span class=\"n\">ophclient</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"n\">read_env</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"client-attributes\">\n<h3>Client attributes</h3>\n<ul>\n<li><em>username</em>: Ophidia username</li>\n<li><em>password</em>: Ophidia password</li>\n<li><em>server</em>: Ophidia server address</li>\n<li><em>port</em>: Ophidia server port (default is 11732)</li>\n<li><em>session</em>: ID of the current session</li>\n<li><em>base_src_path</em>: Server-side instance base source path</li>\n<li><em>cwd</em>: Current Working Directory</li>\n<li><em>cdd</em>: Current Data Directory</li>\n<li><em>cube</em>: Last produced cube PID</li>\n<li><em>host_partition</em>: Name of host partition being used</li>\n<li><em>exec_mode</em>: Execution mode, \u2018sync\u2019 for synchronous mode (default), \u2018async\u2019 for asynchronous mode</li>\n<li><em>ncores</em>: Number of cores for each operation (default is 1)</li>\n<li><em>last_request</em>: Last submitted query</li>\n<li><em>last_response</em>: Last response received from the server (JSON string)</li>\n<li><em>last_jobid</em>: Job ID associated to the last request</li>\n<li><em>last_return_value</em>: Last return value associated to response</li>\n<li><em>last_error</em>: Last error value associated to response</li>\n<li><em>last_exec_time</em>: Last execution time value associated to response</li>\n</ul>\n</div>\n<div id=\"client-methods\">\n<h3>Client methods</h3>\n<ul>\n<li><em>submit(query, display) -&gt; self</em>: Submit a query like \u2018operator=myoperator;param1=value1;\u2019 or \u2018myoperator param1=value1;\u2019 to the Ophidia server according to all login parameters of the Client and its state.</li>\n<li><em>get_progress(id) -&gt; dict</em> : Get progress of a workflow, either by specifying the id or from the last submitted one.</li>\n<li><em>deserialize_response() -&gt; dict</em>: Return the last_response JSON string attribute as a Python dictionary.</li>\n<li><em>get_base_path(display) -&gt; self</em> : Get base path for data from the Ophidia server.</li>\n<li><em>resume_session(display) -&gt; self</em>: Resume the last session the user was connected to.</li>\n<li><em>resume_cwd(display) -&gt; self</em>: Resume the last cwd (current working directory) the user was located into.</li>\n<li><em>resume_cdd(display) -&gt; self</em>: Resume the last cdd (current working data directory) the user was located into.</li>\n<li><em>resume_cube(display) -&gt; self</em>: Resume the last cube produced by the user.</li>\n<li><em>wsubmit(workflow, *params) -&gt; self</em>: Submit an entire workflow passing a JSON string or the path of a JSON file and an optional series of parameters that will replace $1, $2 etc. in the workflow. The workflow will be validated against the Ophidia Workflow JSON Schema.</li>\n<li><em>wisvalid(workflow) -&gt; bool</em>: Return True if the workflow (a JSON string or a Python dict) is valid against the Ophidia Workflow JSON Schema or False and the related validation/error message.</li>\n<li><em>pretty_print(response, response_i) -&gt; self</em>: Prints the last_response JSON string attribute as a formatted response.</li>\n</ul>\n<p><em>To display the command output set \u201cdisplay=True\u201d</em></p>\n</div>\n<div id=\"submit-a-request\">\n<h3>Submit a request</h3>\n<p>Execute the request <em>oph_list level=2</em>:</p>\n<pre><span class=\"n\">ophclient</span><span class=\"o\">.</span><span class=\"n\">submit</span><span class=\"p\">(</span><span class=\"s2\">\"oph_list level=2\"</span><span class=\"p\">,</span> <span class=\"n\">display</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"set-a-client-for-the-cube-class\">\n<h3>Set a Client for the Cube class</h3>\n<p>Instantiate a new Client common to all Cube instances:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">PyOphidia</span> <span class=\"kn\">import</span> <span class=\"n\">cube</span>\n<span class=\"n\">cube</span><span class=\"o\">.</span><span class=\"n\">Cube</span><span class=\"o\">.</span><span class=\"n\">setclient</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"o\">=</span><span class=\"s2\">\"oph-user\"</span><span class=\"p\">,</span><span class=\"n\">password</span><span class=\"o\">=</span><span class=\"s2\">\"oph-passwd\"</span><span class=\"p\">,</span><span class=\"n\">server</span><span class=\"o\">=</span><span class=\"s2\">\"127.0.0.1\"</span><span class=\"p\">,</span><span class=\"n\">port</span><span class=\"o\">=</span><span class=\"s2\">\"11732\"</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"cube-attributes\">\n<h3>Cube attributes</h3>\n<p>Instance attributes:</p>\n<ul>\n<li><em>pid</em>: Cube PID</li>\n<li><em>creation_date</em>: Creation date of the cube</li>\n<li><em>measure</em>: Name of the variable imported into the cube</li>\n<li><em>measure_type</em>: Measure data type</li>\n<li><em>level</em>: Number of operations between the original imported cube and the actual cube</li>\n<li><em>nfragments</em>: Total number of fragments</li>\n<li><em>source_file</em>: Parent of the actual cube</li>\n<li><em>hostxcube</em>: Number of hosts on which the cube is stored</li>\n<li><em>fragxdb</em>: Number of fragments for each database</li>\n<li><em>rowsxfrag</em>: Number of rows for each fragment</li>\n<li><em>elementsxrow</em>: Number of elements for each row</li>\n<li><em>compressed</em>: If the cube is compressed or not</li>\n<li><em>size</em>: Size of the cube</li>\n<li><em>nelements</em>: Total number of elements</li>\n<li><em>dim_info</em>: List of dict with information on each cube dimension</li>\n</ul>\n<p>Class attributes:</p>\n<ul>\n<li><em>client</em>: instance of class Client through which it is possible to submit all requests</li>\n</ul>\n</div>\n<div id=\"create-a-new-container\">\n<h3>Create a new container</h3>\n<p>Create a new container to contain our cubes called <em>test</em>, with 3 <em>double</em> dimensions (<em>lat</em>, <em>lon</em> and <em>time</em>):</p>\n<pre><span class=\"n\">cube</span><span class=\"o\">.</span><span class=\"n\">Cube</span><span class=\"o\">.</span><span class=\"n\">createcontainer</span><span class=\"p\">(</span><span class=\"n\">container</span><span class=\"o\">=</span><span class=\"s1\">'test'</span><span class=\"p\">,</span><span class=\"n\">dim</span><span class=\"o\">=</span><span class=\"s1\">'lat|lon|time'</span><span class=\"p\">,</span><span class=\"n\">dim_type</span><span class=\"o\">=</span><span class=\"s1\">'double|double|double'</span><span class=\"p\">,</span><span class=\"n\">hierarchy</span><span class=\"o\">=</span><span class=\"s1\">'oph_base|oph_base|oph_time'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"import-a-new-cube\">\n<h3>Import a new cube</h3>\n<p>Import the variable <em>T2M</em> from the NetCDF file <em>/path/to/file.nc</em> into a new cube inside the <em>test</em> container. Use <em>lat</em> and <em>lon</em> as explicit dimensions and <em>time</em> as implicit dimension expressed in days:</p>\n<pre><span class=\"n\">mycube</span> <span class=\"o\">=</span> <span class=\"n\">cube</span><span class=\"o\">.</span><span class=\"n\">Cube</span><span class=\"p\">(</span><span class=\"n\">container</span><span class=\"o\">=</span><span class=\"s1\">'test'</span><span class=\"p\">,</span><span class=\"n\">exp_dim</span><span class=\"o\">=</span><span class=\"s1\">'lat|lon'</span><span class=\"p\">,</span><span class=\"n\">imp_dim</span><span class=\"o\">=</span><span class=\"s1\">'time'</span><span class=\"p\">,</span><span class=\"n\">measure</span><span class=\"o\">=</span><span class=\"s1\">'T2M'</span><span class=\"p\">,</span><span class=\"n\">src_path</span><span class=\"o\">=</span><span class=\"s1\">'/path/to/file.nc'</span><span class=\"p\">,</span><span class=\"n\">exp_concept_level</span><span class=\"o\">=</span><span class=\"s1\">'c|c'</span><span class=\"p\">,</span><span class=\"n\">imp_concept_level</span><span class=\"o\">=</span><span class=\"s1\">'d'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"create-a-cube-object-from-an-existing-cube-identifier\">\n<h3>Create a Cube object from an existing cube identifier</h3>\n<p>Instantiate a new Cube using the PID of an existing cube:</p>\n<pre><span class=\"n\">mycube2</span> <span class=\"o\">=</span> <span class=\"n\">cube</span><span class=\"o\">.</span><span class=\"n\">Cube</span><span class=\"p\">(</span><span class=\"n\">pid</span><span class=\"o\">=</span><span class=\"s1\">'http://127.0.0.1/1/2'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"show-a-cube-structure-and-info\">\n<h3>Show a Cube structure and info</h3>\n<p>To shows metadata information about a data cube, its size and the dimensions related to it:</p>\n<pre><span class=\"n\">mycube2</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">()</span>\n</pre>\n<p><em>For the operators such as \u201ccubeschema\u201d, \u201ccubesize\u201d, \u201ccubeelements\u201d, \u201cexplore\u201d, \u201chierarchy\u201d, \u201cinfo\u201d, \u201clist\u201d, \u201cloggingbk\u201d, \u201coperators\u201d, \u201csearch\u201d, \u201cshowgrid\u201d, \u201cman\u201d, \u201cmetadata\u201d, \u201cprimitives\u201d, \u201cprovenance\u201d, \u201csearch\u201d, \u201cshowgrid\u201d, \u201ctasks\u201d and other operators that provide verbose output, the display parameter by default is \u201cTrue\u201d. For the rest of operators, to display the result, \u201cdispay=True\u201d should be set.</em></p>\n</div>\n<div id=\"subset-a-cube\">\n<h3>Subset a Cube</h3>\n<p>To perform a subsetting operation along dimensions of a data cube (dimension values are used as input filters):</p>\n<pre><span class=\"n\">mycube3</span> <span class=\"o\">=</span> <span class=\"n\">mycube2</span><span class=\"o\">.</span><span class=\"n\">subset</span><span class=\"p\">(</span><span class=\"n\">subset_dims</span><span class=\"o\">=</span><span class=\"s1\">'lat|lon'</span><span class=\"p\">,</span><span class=\"n\">subset_filter</span><span class=\"o\">=</span><span class=\"s1\">'1:10|20:30'</span><span class=\"p\">,</span><span class=\"n\">subset_type</span><span class=\"o\">=</span><span class=\"s1\">'coord'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"explore-cube\">\n<h3>Explore Cube</h3>\n<p>To explore a data cube filtering the data along its dimensions:</p>\n<pre><span class=\"n\">mycube2</span><span class=\"o\">.</span><span class=\"n\">explore</span><span class=\"p\">(</span><span class=\"n\">subset_dims</span><span class=\"o\">=</span><span class=\"s1\">'lat|lon'</span><span class=\"p\">,</span><span class=\"n\">subset_filter</span><span class=\"o\">=</span><span class=\"s1\">'1:10|20:30'</span><span class=\"p\">,</span><span class=\"n\">subset_type</span><span class=\"o\">=</span><span class=\"s1\">'coord'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"export-to-netcdf-file\">\n<h3>Export to NetCDF file</h3>\n<p>To export data into a single NetCDF file:</p>\n<pre><span class=\"n\">mycube3</span><span class=\"o\">.</span><span class=\"n\">exportnc2</span><span class=\"p\">(</span><span class=\"n\">output_path</span><span class=\"o\">=</span><span class=\"s1\">'/home/user'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"export-to-python-array\">\n<h3>Export to Python array</h3>\n<p>To exports data in a python-friendly format:</p>\n<pre><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">mycube3</span><span class=\"o\">.</span><span class=\"n\">export_array</span><span class=\"p\">(</span><span class=\"n\">show_time</span><span class=\"o\">=</span><span class=\"s1\">'yes'</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 5150187, "releases": {"1.2.1": [{"comment_text": "", "digests": {"md5": "ad40a3cdcfccab78aed668cbe135b1d3", "sha256": "2a7fe1129d7c968ae61d2fab0ee5ab18c38aff38afa894e91d925c0ecba25048"}, "downloads": -1, "filename": "PyOphidia-1.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ad40a3cdcfccab78aed668cbe135b1d3", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 22986, "upload_time": "2015-08-25T12:24:53", "upload_time_iso_8601": "2015-08-25T12:24:53.370214Z", "url": "https://files.pythonhosted.org/packages/32/8d/3e9b6184192e9bdbb3764401f958aedc7bad0770b46ead0c2d05c6167d28/PyOphidia-1.2.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "02b7afa6c17b406e53441c8a86a74e87", "sha256": "2cb91d0df2fd3ed8d701a460bea8b6dac85e7d49759a1c6c4715538e4a223a10"}, "downloads": -1, "filename": "PyOphidia-1.2.1.tar.gz", "has_sig": false, "md5_digest": "02b7afa6c17b406e53441c8a86a74e87", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32932, "upload_time": "2015-08-25T12:24:39", "upload_time_iso_8601": "2015-08-25T12:24:39.685673Z", "url": "https://files.pythonhosted.org/packages/9a/9f/84c2d2b49172a27895255b35ef6c770fa80bb58e8e89d7248b46d8d574da/PyOphidia-1.2.1.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "07ef6a7b37cdc3b30a67d5e0da85d116", "sha256": "acb0f86adfbca2c506faa07b3cf6a13224decc48c96f2a82c5ffecd632bbe332"}, "downloads": -1, "filename": "PyOphidia-1.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "07ef6a7b37cdc3b30a67d5e0da85d116", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 36019, "upload_time": "2017-06-08T15:00:06", "upload_time_iso_8601": "2017-06-08T15:00:06.543529Z", "url": "https://files.pythonhosted.org/packages/c6/19/bd1f9fc0563aba95e62c77d03d7dbe8c245a15e74ab9a08f62a121599297/PyOphidia-1.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "76ab65055d2261ab84ef36ef498e1560", "sha256": "ee733266b155d430dddbb00ccbbea4196eec57396e12be37d63d00c860c1acf0"}, "downloads": -1, "filename": "PyOphidia-1.3.0.tar.gz", "has_sig": false, "md5_digest": "76ab65055d2261ab84ef36ef498e1560", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47430, "upload_time": "2017-06-08T14:59:49", "upload_time_iso_8601": "2017-06-08T14:59:49.008266Z", "url": "https://files.pythonhosted.org/packages/c1/0e/7a9ba9db846ad1b2a3598780a54c9a6443cc36139502f06e099f4f0fc224/PyOphidia-1.3.0.tar.gz", "yanked": false}], "1.4.0": [{"comment_text": "", "digests": {"md5": "9077b11cd702ba17da4bfad5733a67c7", "sha256": "492d79778296de41a39e638b93de52598d5e1f74dcd6b819399b5d10f9aa5e7e"}, "downloads": -1, "filename": "PyOphidia-1.4.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "9077b11cd702ba17da4bfad5733a67c7", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 37435, "upload_time": "2017-08-23T14:35:58", "upload_time_iso_8601": "2017-08-23T14:35:58.922910Z", "url": "https://files.pythonhosted.org/packages/0c/21/31cc5dcc7ea72f6c626e6e95372b8f4026013ecb79b49289d4afa392239f/PyOphidia-1.4.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2929fbfb0179dea0affdefecd758012a", "sha256": "66e92eec56b4544e8c42ac7508ae129f6dbe5654bda428992a15601658aeafbe"}, "downloads": -1, "filename": "PyOphidia-1.4.0.tar.gz", "has_sig": false, "md5_digest": "2929fbfb0179dea0affdefecd758012a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 48981, "upload_time": "2017-08-23T14:36:03", "upload_time_iso_8601": "2017-08-23T14:36:03.068719Z", "url": "https://files.pythonhosted.org/packages/1f/62/94de46a322cb62a40f599796e925ef097a32b42c18660711ca54436a65f1/PyOphidia-1.4.0.tar.gz", "yanked": false}], "1.5.0": [{"comment_text": "", "digests": {"md5": "9b05aad570d34fa3c13dd26bd796a874", "sha256": "802a9227e299a1292e771e0b344079754ba2a1093fd190514d8a429c6ccf4a64"}, "downloads": -1, "filename": "PyOphidia-1.5.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "9b05aad570d34fa3c13dd26bd796a874", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 38583, "upload_time": "2018-02-16T17:06:49", "upload_time_iso_8601": "2018-02-16T17:06:49.424682Z", "url": "https://files.pythonhosted.org/packages/81/81/06429df11c77b672fa065e21377d5c64b7dd73364b545aacf67c5c157fe3/PyOphidia-1.5.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "966342c543060bbeb74fa2362b37b0bf", "sha256": "dac558c3b4426234c2c90a3bcb465ad8a5a5b886193201e355236ca60ee82284"}, "downloads": -1, "filename": "PyOphidia-1.5.0.tar.gz", "has_sig": false, "md5_digest": "966342c543060bbeb74fa2362b37b0bf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 50330, "upload_time": "2018-02-16T17:06:51", "upload_time_iso_8601": "2018-02-16T17:06:51.658250Z", "url": "https://files.pythonhosted.org/packages/69/bc/ffb8a74c206075f416dfb991308a71b0bb839420ae5ede6eb74e87d4b7d9/PyOphidia-1.5.0.tar.gz", "yanked": false}], "1.6.0": [{"comment_text": "", "digests": {"md5": "b63d46409be6769b0a36a046f1515385", "sha256": "d21cf5226bde8c4c098deb5ce57461bdb09b362c314af91621b6d7bca0847c6c"}, "downloads": -1, "filename": "PyOphidia-1.6.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b63d46409be6769b0a36a046f1515385", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 41110, "upload_time": "2018-06-19T09:35:38", "upload_time_iso_8601": "2018-06-19T09:35:38.539384Z", "url": "https://files.pythonhosted.org/packages/62/ea/096e58ce61c0765eaabbbe351578d1292de6d80a1fcde77f40421749ff1e/PyOphidia-1.6.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d4f147c3f5a1623c23f904171a58df9e", "sha256": "aa3c9c218f8357b4ecd278f7e8fbd52e2dc2a789b883cf6f0baa4548e359cef9"}, "downloads": -1, "filename": "PyOphidia-1.6.0.tar.gz", "has_sig": false, "md5_digest": "d4f147c3f5a1623c23f904171a58df9e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 53191, "upload_time": "2018-06-19T09:35:39", "upload_time_iso_8601": "2018-06-19T09:35:39.987244Z", "url": "https://files.pythonhosted.org/packages/1a/15/0296470d3859e34a4fe42e054bae47713a52b0e4e507302e0f147606f845/PyOphidia-1.6.0.tar.gz", "yanked": false}], "1.7.0": [{"comment_text": "", "digests": {"md5": "520b6702ec16057581b3a9b449093879", "sha256": "ccd4969d1e6dd6cff13ba85de45f9b50e9553f2bbe9832ab1c65a5cb77e1c0f1"}, "downloads": -1, "filename": "PyOphidia-1.7.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "520b6702ec16057581b3a9b449093879", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 42057, "upload_time": "2018-07-31T09:50:16", "upload_time_iso_8601": "2018-07-31T09:50:16.369748Z", "url": "https://files.pythonhosted.org/packages/3a/ac/350ea164af001ae6670d451d411379fc96c76a692b768dc7701a66f387e2/PyOphidia-1.7.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c23aba045833a283219fa999ad8f9961", "sha256": "07adfb02f413d719ab71514d041f92b58b1807fe1bd29efa77b1915f6f4e8fdd"}, "downloads": -1, "filename": "PyOphidia-1.7.0.tar.gz", "has_sig": false, "md5_digest": "c23aba045833a283219fa999ad8f9961", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 54260, "upload_time": "2018-07-31T09:50:17", "upload_time_iso_8601": "2018-07-31T09:50:17.817816Z", "url": "https://files.pythonhosted.org/packages/06/20/816f3dcbfca65025159f3d08084cb94944c9bcadf039f8c816acc769bd17/PyOphidia-1.7.0.tar.gz", "yanked": false}], "1.8.0": [{"comment_text": "", "digests": {"md5": "371e2e88593b8420a3941c15b9f009fa", "sha256": "490d8dd415096a4cfed2d2edde3389a83f590b7b0bb96f7e04d949f66ed52cd8"}, "downloads": -1, "filename": "PyOphidia-1.8.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "371e2e88593b8420a3941c15b9f009fa", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 42159, "upload_time": "2019-01-24T14:33:30", "upload_time_iso_8601": "2019-01-24T14:33:30.371148Z", "url": "https://files.pythonhosted.org/packages/25/47/e86b6053f35d6eb23ed1da3cf7d05d6155f0bc7f7f74b052d10cb37cdf66/PyOphidia-1.8.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bf25313bf1f2c39fb4bf52956d428bef", "sha256": "b7e6641876481441f11e3a6c915b4e99707d3094af2375f1a72affa8b26daeea"}, "downloads": -1, "filename": "PyOphidia-1.8.0.tar.gz", "has_sig": false, "md5_digest": "bf25313bf1f2c39fb4bf52956d428bef", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 54434, "upload_time": "2019-01-24T14:33:32", "upload_time_iso_8601": "2019-01-24T14:33:32.586867Z", "url": "https://files.pythonhosted.org/packages/bb/68/2fd9212a7f51aa89240317fdb9f830ff5aede14f33c1ea78dab3e4db7431/PyOphidia-1.8.0.tar.gz", "yanked": false}], "1.8.1": [{"comment_text": "", "digests": {"md5": "36c24a39ab8bc764c552bf293a82bdae", "sha256": "a2d86fa6afd8295a83a7757bf87a0fff2f26dc653d2727bd2f03f7a0a807c376"}, "downloads": -1, "filename": "PyOphidia-1.8.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "36c24a39ab8bc764c552bf293a82bdae", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 42250, "upload_time": "2019-04-16T13:50:37", "upload_time_iso_8601": "2019-04-16T13:50:37.726594Z", "url": "https://files.pythonhosted.org/packages/ab/00/deba0857e9f479d0533946a0322ec1ebbc65b955858b97359008f077e2f8/PyOphidia-1.8.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a26c0722edaa69edd8ca10b1c04614f4", "sha256": "c65e718c0eb761ba63423787fc9f8a12a2c9be53823bd3c32ba9f8a0b76865fb"}, "downloads": -1, "filename": "PyOphidia-1.8.1.tar.gz", "has_sig": false, "md5_digest": "a26c0722edaa69edd8ca10b1c04614f4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 54609, "upload_time": "2019-04-16T13:50:39", "upload_time_iso_8601": "2019-04-16T13:50:39.688265Z", "url": "https://files.pythonhosted.org/packages/0b/e2/a869bbd11c5931439a038705daf20246b957b1065a86183b3b840dc33702/PyOphidia-1.8.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "36c24a39ab8bc764c552bf293a82bdae", "sha256": "a2d86fa6afd8295a83a7757bf87a0fff2f26dc653d2727bd2f03f7a0a807c376"}, "downloads": -1, "filename": "PyOphidia-1.8.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "36c24a39ab8bc764c552bf293a82bdae", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 42250, "upload_time": "2019-04-16T13:50:37", "upload_time_iso_8601": "2019-04-16T13:50:37.726594Z", "url": "https://files.pythonhosted.org/packages/ab/00/deba0857e9f479d0533946a0322ec1ebbc65b955858b97359008f077e2f8/PyOphidia-1.8.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a26c0722edaa69edd8ca10b1c04614f4", "sha256": "c65e718c0eb761ba63423787fc9f8a12a2c9be53823bd3c32ba9f8a0b76865fb"}, "downloads": -1, "filename": "PyOphidia-1.8.1.tar.gz", "has_sig": false, "md5_digest": "a26c0722edaa69edd8ca10b1c04614f4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 54609, "upload_time": "2019-04-16T13:50:39", "upload_time_iso_8601": "2019-04-16T13:50:39.688265Z", "url": "https://files.pythonhosted.org/packages/0b/e2/a869bbd11c5931439a038705daf20246b957b1065a86183b3b840dc33702/PyOphidia-1.8.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:00:08 2020"}