{"info": {"author": "Daniil Bondarev", "author_email": "xonatius@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "MongoMonkey\r\n============\r\n\r\nMongoMonkey is a simple ODM for mongo.\r\nThe key idea was to use standard pymongo api, without overriding it.\r\n\r\nExample of usage:\r\n-------------\r\n\r\n```python\r\nfrom pymongo import Connection\r\nfrom mongomonkey import Model, Field, list_of\r\n\r\nclass Book(Model):\r\n    title = Field(unicode)\r\n    page_count = Field(int)\r\n\r\nclass Author(Model):\r\n    name = Field(unicode)\r\n    books = Field(list_of(Book))\r\n\r\nconnection = Connection()\r\ndb = connection.test_database\r\ncollection = db.test_collection\r\n\r\nbook1 = Book(title=u\"Alice's Adventures in Wonderland\", page_count=191)\r\nauthor = Author(name=u\"Lewis Carroll\")\r\n# Accessing by field attribute\r\nauthor.books = [book1]\r\n# Accessing like dict item\r\nauthor['books'].append({u\"title\": u\"A Tangled Tale\", u\"page_count\": 152})\r\n\r\n# Saving object\r\ncollection.save(author) # By default pymongo would attach '_id' to this document.\r\n\r\n# Retrieving object\r\nauthor = collection.find_one(as_class=Author)\r\n```\r\n\r\nRecursive embedding:\r\n-------------\r\n\r\n```python\r\nfrom mongomonkey import Model, Field, list_of\r\n\r\nclass Node(Model):\r\n    title = Field(unicode)\r\n    # You can use 'self' to point on currently creating Model\r\n    child1 = Field('self')\r\n    # Also you can use a name of a model to point on it\r\n    child2 = Field('Node')\r\n\r\n# Printing instance of Node\r\nprint Node(title=u\"root\", child1=Node(title=u\"Child1\"), child2=Node(title=u\"Child2\"))\r\n```\r\n\r\nDeveloping and Contributing\r\n-------------\r\n\r\nIf you have any question, ideas or improvements feel free to fork or add an issue\r\non github http://github.com/xonatius/mongo-monkey", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/xonatius/mongo-monkey", "keywords": "mongo mongodb pymongo odm orm", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "mongomonkey", "package_url": "https://pypi.org/project/mongomonkey/", "platform": "any", "project_url": "https://pypi.org/project/mongomonkey/", "project_urls": {"Homepage": "http://github.com/xonatius/mongo-monkey"}, "release_url": "https://pypi.org/project/mongomonkey/0.1/", "requires_dist": null, "requires_python": null, "summary": "A MongoDB object-document mapping layer for Python", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            MongoMonkey\n<br>============\n<br>\n<br>MongoMonkey is a simple ODM for mongo.\n<br>The key idea was to use standard pymongo api, without overriding it.\n<br>\n<br>Example of usage:\n<br>-------------\n<br>\n<br>```python\n<br>from pymongo import Connection\n<br>from mongomonkey import Model, Field, list_of\n<br>\n<br>class Book(Model):\n<br>    title = Field(unicode)\n<br>    page_count = Field(int)\n<br>\n<br>class Author(Model):\n<br>    name = Field(unicode)\n<br>    books = Field(list_of(Book))\n<br>\n<br>connection = Connection()\n<br>db = connection.test_database\n<br>collection = db.test_collection\n<br>\n<br>book1 = Book(title=u\"Alice's Adventures in Wonderland\", page_count=191)\n<br>author = Author(name=u\"Lewis Carroll\")\n<br># Accessing by field attribute\n<br>author.books = [book1]\n<br># Accessing like dict item\n<br>author['books'].append({u\"title\": u\"A Tangled Tale\", u\"page_count\": 152})\n<br>\n<br># Saving object\n<br>collection.save(author) # By default pymongo would attach '_id' to this document.\n<br>\n<br># Retrieving object\n<br>author = collection.find_one(as_class=Author)\n<br>```\n<br>\n<br>Recursive embedding:\n<br>-------------\n<br>\n<br>```python\n<br>from mongomonkey import Model, Field, list_of\n<br>\n<br>class Node(Model):\n<br>    title = Field(unicode)\n<br>    # You can use 'self' to point on currently creating Model\n<br>    child1 = Field('self')\n<br>    # Also you can use a name of a model to point on it\n<br>    child2 = Field('Node')\n<br>\n<br># Printing instance of Node\n<br>print Node(title=u\"root\", child1=Node(title=u\"Child1\"), child2=Node(title=u\"Child2\"))\n<br>```\n<br>\n<br>Developing and Contributing\n<br>-------------\n<br>\n<br>If you have any question, ideas or improvements feel free to fork or add an issue\n<br>on github http://github.com/xonatius/mongo-monkey\n          </div>"}, "last_serial": 794953, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "e8b5b5dd82d610d7b278feb2b40e7c28", "sha256": "b4364541abee5a6d21a0c415bec5f3faf31acd3d9edf207b12c54975a8ffb9a5"}, "downloads": -1, "filename": "mongomonkey-0.1.tar.gz", "has_sig": true, "md5_digest": "e8b5b5dd82d610d7b278feb2b40e7c28", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6502, "upload_time": "2012-12-23T21:08:32", "upload_time_iso_8601": "2012-12-23T21:08:32.666958Z", "url": "https://files.pythonhosted.org/packages/13/9e/53a4fad7eb517259bc43638df17a11afa77a5b2a56e85d7399ec47712a42/mongomonkey-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e8b5b5dd82d610d7b278feb2b40e7c28", "sha256": "b4364541abee5a6d21a0c415bec5f3faf31acd3d9edf207b12c54975a8ffb9a5"}, "downloads": -1, "filename": "mongomonkey-0.1.tar.gz", "has_sig": true, "md5_digest": "e8b5b5dd82d610d7b278feb2b40e7c28", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6502, "upload_time": "2012-12-23T21:08:32", "upload_time_iso_8601": "2012-12-23T21:08:32.666958Z", "url": "https://files.pythonhosted.org/packages/13/9e/53a4fad7eb517259bc43638df17a11afa77a5b2a56e85d7399ec47712a42/mongomonkey-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:16 2020"}