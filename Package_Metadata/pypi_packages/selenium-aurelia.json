{"info": {"author": "Julien Enselme", "author_email": "julien.enselme@centrale-marseille.fr", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Topic :: Internet :: WWW/HTTP :: Browsers", "Topic :: Software Development :: Testing", "Topic :: Utilities"], "description": "Wrapper around selenium drivers to ease testing of `Aurelia <http://aurelia.io/>`__ based applications.\n\nInspired by `the aurelia plugin for protractor <https://github.com/aurelia/tools/blob/master/plugins/protractor.js>`__.\n\n\nAPI\n===\n\nThe ``AureliaDriver`` class takes one positionnal parameter: a selenium webdriver. The full list of drivers is available `here <http://selenium-python.readthedocs.io/api.htm>`__.\n\nOptions of AureliaDriver\n------------------------\n\nThe ``AureliaDriver`` class takes the following keyword arguments:\n\n- ``script_timeout`` (*default:*: 10): the timeout for `execute_async_script <http://selenium-python.readthedocs.io/api.html#selenium.webdriver.remote.webdriver.WebDriver.execute_async_script>`__. This is used internally to wait for the application to be loaded or to complete navigation.\n- ``default_wait_time`` (*default:* 2): the time to wait by default in seconds. This is used by ``AureliaDriver.wait`` if no time is supplied and to wait for the in ``AureliaDriver.load_url`` to wait for Aurelia to complete the initialization of the page.\n- ``wait_on_navigation`` wait for ``default_wait_time`` after each navigation before continuing the script.\n- ``started_condition`` (*default:* None): it is possible that your app will be loaded before the AureliaDriver has the time to register the proper callback in the browser. In this case, ``load_url`` will fail because of a time out. To prevent this, you can specify a custom condition you know is fulfilled when Aurelia is started on your application. For instance, if your application has a spinner with the splash class, you can use: ``document.querySelector(\"[aurelia-app]\").children[0].getAttribute('class') === 'splash'``.\n\nload_url\n--------\n\nLoad the given url and wait for Aurelia to be full initiazed.\n\n- parameters:\n\n  - ``url``: the url to open.\n\nwait\n----\n\nSleep for the specified amount of time. If no argument is provided or if seconds is lower or equal than 0, ``AureliaDriver.default_wait_time`` will be used.\n\n- keyword arguments:\n\n  - ``seconds`` (*default:* 0): number of seconds for which to sleep.\n\nnavigate\n--------\n\nContext manager in which you can to your navigation operation to ensure the app navigated to the new URL and was updated before continuing your tests. Use like this:\n\n.. code:: python\n\n    with driver.navigate():\n        link.click()\n\n    assert no_new_page\n\n- keyword arguments:\n\n  - ``wait`` (*default:* 0): time to wait after navigation before continuing. There are several cases to consider:\n  \n    #. If ``wait`` is greater than 0, the driver will wait for the specified time.\n    #. If ``self.wait_on_navigation`` is ``True`` and ``wait`` is lower or equal than 0, the driver will wait for ``self.default_wait_time``.\n    #. If ``self.wait_on_navigation`` is ``False`` and wait is lower or equal than 0, the driver will not wait.\n\nfind_element_by_binding\n-----------------------\n\nReturn the first element matching the specified binding.\n\n- parameters:\n\n  - ``attr``: the name of the attribute used in the binding. For instance, in ``src.bind=\"heroSrc\"`` it is ``src``.\n  - ``value``: the value for which to look for. For instance, in ``src.bind=\"heroSrc\"``, it is ``heroSrc``.\n\n- keyword arguments:\n\n  - bind_type (*default:* 'bind'): the type of binding to use. Possible values are: ``bind``, ``one-way``, ``two-way``.\n\nfind_elements_by_binding\n------------------------\n\nReturn the list of all the elements matching the specified binding. See `find_element_by_binding` for details.\n\n\nFull Example\n============\n\nYou can have a look at the example script `in selenium_aurelia/test/example.py <https://framagit.org/Jenselme/selenium-aurelia/blob/master/selenium_aurelia/test/example.py>`__.\n\n\nIssues\n======\n\nYou can report issues on `the issues tracker <https://framagit.org/Jenselme/selenium-aurelia/issues>`__.\n\n\nChangelog\n=========\n\nv0.1.1\n------\n\n- Add option to wait after navigation (``wait_on_navigation`` in constructor and ``wait`` in the ``navigate`` method).\n\nv0.1.0\n------\n\nInitial release.", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://framagit.org/Jenselme/selenium-aurelia", "keywords": "selenium aurelia", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "selenium-aurelia", "package_url": "https://pypi.org/project/selenium-aurelia/", "platform": "", "project_url": "https://pypi.org/project/selenium-aurelia/", "project_urls": {"Homepage": "https://framagit.org/Jenselme/selenium-aurelia"}, "release_url": "https://pypi.org/project/selenium-aurelia/0.1.1/", "requires_dist": null, "requires_python": "", "summary": "Wrapper around selenium driver to ease testing of Aurelia based applications.", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Wrapper around selenium drivers to ease testing of <a href=\"http://aurelia.io/\" rel=\"nofollow\">Aurelia</a> based applications.</p>\n<p>Inspired by <a href=\"https://github.com/aurelia/tools/blob/master/plugins/protractor.js\" rel=\"nofollow\">the aurelia plugin for protractor</a>.</p>\n<div id=\"api\">\n<h2>API</h2>\n<p>The <tt>AureliaDriver</tt> class takes one positionnal parameter: a selenium webdriver. The full list of drivers is available <a href=\"http://selenium-python.readthedocs.io/api.htm\" rel=\"nofollow\">here</a>.</p>\n<div id=\"options-of-aureliadriver\">\n<h3>Options of AureliaDriver</h3>\n<p>The <tt>AureliaDriver</tt> class takes the following keyword arguments:</p>\n<ul>\n<li><tt>script_timeout</tt> (<em>default:</em>: 10): the timeout for <a href=\"http://selenium-python.readthedocs.io/api.html#selenium.webdriver.remote.webdriver.WebDriver.execute_async_script\" rel=\"nofollow\">execute_async_script</a>. This is used internally to wait for the application to be loaded or to complete navigation.</li>\n<li><tt>default_wait_time</tt> (<em>default:</em> 2): the time to wait by default in seconds. This is used by <tt>AureliaDriver.wait</tt> if no time is supplied and to wait for the in <tt>AureliaDriver.load_url</tt> to wait for Aurelia to complete the initialization of the page.</li>\n<li><tt>wait_on_navigation</tt> wait for <tt>default_wait_time</tt> after each navigation before continuing the script.</li>\n<li><tt>started_condition</tt> (<em>default:</em> None): it is possible that your app will be loaded before the AureliaDriver has the time to register the proper callback in the browser. In this case, <tt>load_url</tt> will fail because of a time out. To prevent this, you can specify a custom condition you know is fulfilled when Aurelia is started on your application. For instance, if your application has a spinner with the splash class, you can use: <tt><span class=\"pre\">document.querySelector(\"[aurelia-app]\").children[0].getAttribute('class')</span> === 'splash'</tt>.</li>\n</ul>\n</div>\n<div id=\"load-url\">\n<h3>load_url</h3>\n<p>Load the given url and wait for Aurelia to be full initiazed.</p>\n<ul>\n<li>parameters:<ul>\n<li><tt>url</tt>: the url to open.</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"wait\">\n<h3>wait</h3>\n<p>Sleep for the specified amount of time. If no argument is provided or if seconds is lower or equal than 0, <tt>AureliaDriver.default_wait_time</tt> will be used.</p>\n<ul>\n<li>keyword arguments:<ul>\n<li><tt>seconds</tt> (<em>default:</em> 0): number of seconds for which to sleep.</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"navigate\">\n<h3>navigate</h3>\n<p>Context manager in which you can to your navigation operation to ensure the app navigated to the new URL and was updated before continuing your tests. Use like this:</p>\n<pre><span class=\"k\">with</span> <span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">navigate</span><span class=\"p\">():</span>\n    <span class=\"n\">link</span><span class=\"o\">.</span><span class=\"n\">click</span><span class=\"p\">()</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">no_new_page</span>\n</pre>\n<ul>\n<li>keyword arguments:<ul>\n<li><tt>wait</tt> (<em>default:</em> 0): time to wait after navigation before continuing. There are several cases to consider:<ol>\n<li>If <tt>wait</tt> is greater than 0, the driver will wait for the specified time.</li>\n<li>If <tt>self.wait_on_navigation</tt> is <tt>True</tt> and <tt>wait</tt> is lower or equal than 0, the driver will wait for <tt>self.default_wait_time</tt>.</li>\n<li>If <tt>self.wait_on_navigation</tt> is <tt>False</tt> and wait is lower or equal than 0, the driver will not wait.</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"find-element-by-binding\">\n<h3>find_element_by_binding</h3>\n<p>Return the first element matching the specified binding.</p>\n<ul>\n<li>parameters:<ul>\n<li><tt>attr</tt>: the name of the attribute used in the binding. For instance, in <tt><span class=\"pre\">src.bind=\"heroSrc\"</span></tt> it is <tt>src</tt>.</li>\n<li><tt>value</tt>: the value for which to look for. For instance, in <tt><span class=\"pre\">src.bind=\"heroSrc\"</span></tt>, it is <tt>heroSrc</tt>.</li>\n</ul>\n</li>\n<li>keyword arguments:<ul>\n<li>bind_type (<em>default:</em> \u2018bind\u2019): the type of binding to use. Possible values are: <tt>bind</tt>, <tt><span class=\"pre\">one-way</span></tt>, <tt><span class=\"pre\">two-way</span></tt>.</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"find-elements-by-binding\">\n<h3>find_elements_by_binding</h3>\n<p>Return the list of all the elements matching the specified binding. See <cite>find_element_by_binding</cite> for details.</p>\n</div>\n</div>\n<div id=\"full-example\">\n<h2>Full Example</h2>\n<p>You can have a look at the example script <a href=\"https://framagit.org/Jenselme/selenium-aurelia/blob/master/selenium_aurelia/test/example.py\" rel=\"nofollow\">in selenium_aurelia/test/example.py</a>.</p>\n</div>\n<div id=\"issues\">\n<h2>Issues</h2>\n<p>You can report issues on <a href=\"https://framagit.org/Jenselme/selenium-aurelia/issues\" rel=\"nofollow\">the issues tracker</a>.</p>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<div id=\"v0-1-1\">\n<h3>v0.1.1</h3>\n<ul>\n<li>Add option to wait after navigation (<tt>wait_on_navigation</tt> in constructor and <tt>wait</tt> in the <tt>navigate</tt> method).</li>\n</ul>\n</div>\n<div id=\"v0-1-0\">\n<h3>v0.1.0</h3>\n<p>Initial release.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2909474, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "42295990157121c91553a31fa557f11d", "sha256": "7501f48588c260f784e2bf7acfbf369ee3aa54aae43acb0379bc3f1f695b9596"}, "downloads": -1, "filename": "selenium_aurelia-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "42295990157121c91553a31fa557f11d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8569, "upload_time": "2016-10-11T15:54:00", "upload_time_iso_8601": "2016-10-11T15:54:00.624953Z", "url": "https://files.pythonhosted.org/packages/6c/af/c678f92c55d0aaa25aee3fe5abf7eed0e19f5fe9fa1d9d5a5415c4cb577f/selenium_aurelia-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "91e4d8e4595b33f2f98b78bf16773d2b", "sha256": "3743e56e9b3a0c3885a1d99eedc6ea11c864466fb31c5902047c6f164b2b142b"}, "downloads": -1, "filename": "selenium-aurelia-0.1.0.tar.gz", "has_sig": false, "md5_digest": "91e4d8e4595b33f2f98b78bf16773d2b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6243, "upload_time": "2016-10-11T15:54:03", "upload_time_iso_8601": "2016-10-11T15:54:03.071281Z", "url": "https://files.pythonhosted.org/packages/a5/3c/2efb7ba5bc7ae39e264bcb86baf90e6b320fd85e600393ac78880afdca57/selenium-aurelia-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "123d3dfe121babb2484671b64a336683", "sha256": "673d7b6da34f823c392d48f2c3365724b13af9ceeb66fb6a94326e298be0cb09"}, "downloads": -1, "filename": "selenium-aurelia-0.1.1.tar.gz", "has_sig": false, "md5_digest": "123d3dfe121babb2484671b64a336683", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6625, "upload_time": "2017-05-30T13:34:33", "upload_time_iso_8601": "2017-05-30T13:34:33.817357Z", "url": "https://files.pythonhosted.org/packages/45/95/795f2dcc3259a1941a8c7cd2f3b2d789bbc8b1e9e2b25e03e3488f118fc7/selenium-aurelia-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "123d3dfe121babb2484671b64a336683", "sha256": "673d7b6da34f823c392d48f2c3365724b13af9ceeb66fb6a94326e298be0cb09"}, "downloads": -1, "filename": "selenium-aurelia-0.1.1.tar.gz", "has_sig": false, "md5_digest": "123d3dfe121babb2484671b64a336683", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6625, "upload_time": "2017-05-30T13:34:33", "upload_time_iso_8601": "2017-05-30T13:34:33.817357Z", "url": "https://files.pythonhosted.org/packages/45/95/795f2dcc3259a1941a8c7cd2f3b2d789bbc8b1e9e2b25e03e3488f118fc7/selenium-aurelia-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:30 2020"}