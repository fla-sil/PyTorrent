{"info": {"author": "KudaGo Team", "author_email": "it@kudago", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: Unix", "Programming Language :: Python", "Topic :: Software Development :: Testing"], "description": "What is Cynic3?\n-----------------\n\n.. image:: https://img.shields.io/pypi/v/cynic3.svg?style=flat-square\n    :target: https://pypi.python.org/pypi/cynic3\n\n\n.. image:: https://img.shields.io/pypi/dm/cynic3.svg?style=flat-square\n        :target: https://pypi.python.org/pypi/cynic3\n\n\nThese days almost any application has several integration points\nlike database, payment gateway, or some Web service that it consumes\nover HTTP.\n\nAll communication with the remote systems happens over the network and\nboth networks and those systems often go wonky.\n\nIf we do not test the behavior of **our** system when the remote end\noperates out of spec and goes haywire the only place for testing\nbecomes in production which is, as we all know, for some systems is\nless than acceptable.\n\nBecause the calls to the remote systems use network, the socket\nconnection can have different failure scenarios, for example:\n\n- The remote end resets the connection by sending a TCP RST packet\n\n- The connection may be established, but the response is never sent\n  back and the connection is not closed (If you don't use socket\n  timeouts in your app you may be in trouble at some point).\n\n- The remote end can send garbage data as the response\n\n- The service can send HTML over HTTP instead of the expected JSON\n  response\n\n- The HTTP service can send one byte of the response data every 30\n  seconds\n\n- The remote HTTP service sends only headers and no body\n\n- The service can send megabytes of data instead of expected kilobytes\n\n- Etc.\n\nIt would be good to be able to test the behavior of our application\nwhen some of those conditions happen.\n\n**cynic3** tries to help with that testing. Basically it's a test\nharness (test double) that can be used to simulate crafty and devious\nremote systems right from your command line.\n\ncynic3 will try hard to cause injury to your system.\n\n*Its goal is to make your system under test cynical.*\n\nRead the formatted docs at `http://cynic.readthedocs.org <http://cynic.readthedocs.org>`_\n\n**WATCH SCREENCAST** -  `https://vimeo.com/43375697 <https://vimeo.com/43375697>`_\n\nInstallation\n------------\n\n::\n\n    $ [sudo] pip3 install cynic3\n\nOr the bleeding edge version from the git master branch:\n\n::\n\n    $ [sudo] pip3 install git+https://github.com/kudago/cynic3.git#egg=cynic3\n\n\nQuick intro\n-----------\n\nStart Cynic which in turn will start multiple services on different\nports:\n\n::\n\n    $ cynic\n    INFO     [2012-06-03 23:44:35,603] server: Starting 'HTTPHtmlResponse'   on port 2000\n    INFO     [2012-06-03 23:44:35,603] server: Starting 'HTTPJsonResponse'   on port 2001\n    INFO     [2012-06-03 23:44:35,604] server: Starting 'HTTPNoBodyResponse' on port 2002\n    INFO     [2012-06-03 23:44:35,604] server: Starting 'HTTPSlowResponse'   on port 2003\n    INFO     [2012-06-03 23:44:35,604] server: Starting 'RSTResponse'        on port 2020\n    INFO     [2012-06-03 23:44:35,604] server: Starting 'RandomDataResponse' on port 2021\n    INFO     [2012-06-03 23:44:35,604] server: Starting 'NoResponse'         on port 2022\n    INFO     [2012-06-03 23:44:35,604] server: Starting 'LogRecordHandler'   on port /tmp/_cynic.sock\n\n\nTest different services\n=======================\n\n1. Connect to the service on port 2020 and get a TCP RST packet\n   right away which causes 'Connection reset by peer' message on the\n   command line\n\n  ::\n\n      $ curl http://localhost:2020\n      curl: (56) Recv failure: Connection reset by peer\n\n2. Connect to the service on port 2021 and get back 7 bytes of random data\n\n  ::\n\n      $ telnet localhost 2021\n      Trying 127.0.0.1...\n      Connected to localhost.\n      Escape character is '^]'.\n      #6\n      Connection closed by foreign host.\n\n3. Connect to the service on port 2001 to get the HTTP JSON response\n\n  ::\n\n      $ curl http://localhost:2001\n      {\"message\": \"Hello, World!\"}\n\n\nSo you got the basic idea. Point your application's integration points to the\nCynic's services and see how your app reacts.\n\n\nLet's check out Cynic's help options\n------------------------------------\n\n::\n\n    $ cynic -h\n    Usage: cynic [options]\n\n    Test harness to make your system under test cynical\n\n    Options:\n      -h, --help            show this help message and exit\n      -c CONFIG_PATH, --config=CONFIG_PATH\n                            Path to an INI configuration file. If no configuration\n                            file is provided then default configuration is\n                            applied. To see the default configuration use -d\n                            option described below.\n      -d, --dump            Dump default configuration to STDOUT\n\n\nAs you can see if we start **Cynic** without **-c** option the default\nconfiguration is used and **-d** is used to dump that configuration to\nthe standard out.\n\nLet's see what's included in the default configuration\n\n\nDefault configuration\n---------------------\n\n::\n\n    $ cynic -d\n\n    ############################################################\n    # HTTP protocol specific                                   #\n    ############################################################\n\n    [handler:httphtml]\n    # sends simple 'hello world!' HTML page over HTTP as a response\n    # and terminates\n    class = cynic.handlers.httphtml.HTTPHtmlResponse\n    #args = ('/tmp/test.html', )\n    host = 0.0.0.0\n    port = 2000\n\n    [handler:httpjson]\n    # sends simple 'hello world!' JSON over HTTP as a response\n    # and terminates\n    class = cynic.handlers.httpjson.HTTPJsonResponse\n    #args = ('/tmp/test.json', )\n    host = 0.0.0.0\n    port = 2001\n\n    [handler:httpnone]\n    # sends headers, but not the response body and terminates\n    class = cynic.handlers.httpnone.HTTPNoBodyResponse\n    host = 0.0.0.0\n    port = 2002\n\n    [handler:httpslow]\n    # sends one byte of the response every 30 seconds.\n    # when the data to be sent is exhausted - terminates\n    class = cynic.handlers.httpslow.HTTPSlowResponse\n    #args = ('/tmp/test.json', 'application/json', 1)\n    host = 0.0.0.0\n    port = 2003\n\n\n    ############################################################\n    # Any TCP socket protocol                                  #\n    ############################################################\n\n    [handler:reset]\n    # accepts a connection, sends an RST packet right away\n    # and terminates\n    class = cynic.handlers.reset.RSTResponse\n    host = 0.0.0.0\n    port = 2020\n\n    [handler:random]\n    # accepts a connection, sends 7 bytes from the /dev/urandom device\n    # and terminates\n    class = cynic.handlers.rnd.RandomDataResponse\n    host = 0.0.0.0\n    port = 2021\n\n    [handler:noresp]\n    # accepts a connection, but doesn't send any response back.\n    # sleeps for 24 hours and exits\n    class = cynic.handlers.noresp.NoResponse\n    host = 0.0.0.0\n    port = 2022\n\n    ############################################################\n    # System handlers used internally by the Cynic server      #\n    ############################################################\n\n    [handler:unixlog]\n    # a logging server that accepts connections over Unix socket\n    # from multiple local processes to output passed log records\n    class = cynic.handlers.log.LogRecordHandler\n    host = /tmp/_cynic.sock\n    port = 0\n    family = unix\n\n\nThere are basically two types of handlers:\n\n1. The ones that deal with any TCP socket protocol\n2. HTTP specific handlers\n\n\nLet's have a closer look at some of them.\n\ncynic.handlers.httpslow.HTTPSlowResponse\n========================================\n\nThis handler sends one byte of the HTTP response every 30 seconds.\nThe config part is as follows\n\n::\n\n    [handler:httpslow]\n    # sends one byte of the response every 30 seconds.\n    # when the data to be sent is exhausted - terminates\n    class = cynic.handlers.httpslow.HTTPSlowResponse\n    #args = ('/tmp/test.json', 'application/json', 1)\n    host = 0.0.0.0\n    port = 2003\n\nwhere\n\n*class* - a fully qualified dotted Python name of the handler class\n\n*args* - a tuple of Python values to pass as positional arguments to the handler's constructor.\n\n       **First argument** specifies absolute path to a file to read\n       the data from instead of using a default data sting 'Hello, world!'\n\n       **Second argument** specifies the value of HTTP's Content-Type\n       response header\n\n       **Third argument** specifies time interval in seconds, default\n       is 30, after which additional byte is sent to the client\n\n*host* - an IP address to bind the service to (For Unix socket it's a file path)\n\n*port* - port to listen on (not applicable for Unix sockets)\n\n\nEven with this service alone you can be creative and come up with\nseveral test scenarios that will make the life of your system under\ntest quite unbearable:\n\n1. Specify file in the *args* that contains megabytes of data and see how\n   your system handles such a large response\n\n2. You can change file path and content type arguments to send HTML,\n   JSON, XML, Plain text, etc\n\n3. You can send HTML data but set Content-Type header value to\n   *application/json*\n\n4. You can change time interval to test your socket read timeout\n   expiration or lack thereof.\n\n5. You can have all above as separate services on different ports.\n   Just add *[handler:httpslow1]*, *[handler:httpslow2]*, etc. sections to\n   the INI file and tweak the *args*.\n\n\nExtending Cynic with custom handlers\n------------------------------------\n\nIt's very easy to add your own handler to the Cynic.\n\n1. To add a new TCP handler inherit from *cynic.handlers.base.BaseHandler*\n   and implement the *handle* method which directly interacts with a\n   TCP socket.\n\n2. To add a new HTTP handler inherit from\n   *cynic.handlers.base.BaseHTTPHandler* and implement your custom\n   do_GET, do_POST, do_PUT, etc methods.\n   For more information about the handler see `BaseHTTPRequestHandler <http://docs.python.org/library/basehttpserver.html#BaseHTTPServer.BaseHTTPRequestHandler>`_\n\n3. Add a section *[handler:my_new_name]* to the INI configuration file with corresponding\n   configuration parameters.\n\n**XXX: Full example?**\n\nAcknowledgments\n---------------\n\n- Many ideas are taken from `Release It! <http://pragprog.com/book/mnee/release-it>`_\n\n\nLicense\n-------\n\nCopyright (c) 2017 Ruslan Spivak, Maxim Muzafarov, Murad Byashimov\n\nPublished under The MIT License, see LICENSE\n\n\nChange History\n==============\n\n3.0 (2017-01-20)\n----------------\n\n- Py3 version\n\n1.0 (2012-06-04)\n----------------\n- Public release", "description_content_type": null, "docs_url": null, "download_url": null, "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kudago/cynic3", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "cynic3", "package_url": "https://pypi.org/project/cynic3/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/cynic3/", "project_urls": {"Homepage": "https://github.com/kudago/cynic3"}, "release_url": "https://pypi.org/project/cynic3/3.0/", "requires_dist": null, "requires_python": null, "summary": "Test harness to make your system under test cynical", "version": "3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"what-is-cynic3\">\n<h2>What is Cynic3?</h2>\n<a href=\"https://pypi.python.org/pypi/cynic3\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/cynic3.svg?style=flat-square\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/49c086d51119496cbc65b2181e7be5bb11807448/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f63796e6963332e7376673f7374796c653d666c61742d737175617265\"></a>\n<a href=\"https://pypi.python.org/pypi/cynic3\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/dm/cynic3.svg?style=flat-square\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c1e5519fb942b61c361295b5cf9478491d009b5b/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f63796e6963332e7376673f7374796c653d666c61742d737175617265\"></a>\n<p>These days almost any application has several integration points\nlike database, payment gateway, or some Web service that it consumes\nover HTTP.</p>\n<p>All communication with the remote systems happens over the network and\nboth networks and those systems often go wonky.</p>\n<p>If we do not test the behavior of <strong>our</strong> system when the remote end\noperates out of spec and goes haywire the only place for testing\nbecomes in production which is, as we all know, for some systems is\nless than acceptable.</p>\n<p>Because the calls to the remote systems use network, the socket\nconnection can have different failure scenarios, for example:</p>\n<ul>\n<li>The remote end resets the connection by sending a TCP RST packet</li>\n<li>The connection may be established, but the response is never sent\nback and the connection is not closed (If you don\u2019t use socket\ntimeouts in your app you may be in trouble at some point).</li>\n<li>The remote end can send garbage data as the response</li>\n<li>The service can send HTML over HTTP instead of the expected JSON\nresponse</li>\n<li>The HTTP service can send one byte of the response data every 30\nseconds</li>\n<li>The remote HTTP service sends only headers and no body</li>\n<li>The service can send megabytes of data instead of expected kilobytes</li>\n<li>Etc.</li>\n</ul>\n<p>It would be good to be able to test the behavior of our application\nwhen some of those conditions happen.</p>\n<p><strong>cynic3</strong> tries to help with that testing. Basically it\u2019s a test\nharness (test double) that can be used to simulate crafty and devious\nremote systems right from your command line.</p>\n<p>cynic3 will try hard to cause injury to your system.</p>\n<p><em>Its goal is to make your system under test cynical.</em></p>\n<p>Read the formatted docs at <a href=\"http://cynic.readthedocs.org\" rel=\"nofollow\">http://cynic.readthedocs.org</a></p>\n<p><strong>WATCH SCREENCAST</strong> -  <a href=\"https://vimeo.com/43375697\" rel=\"nofollow\">https://vimeo.com/43375697</a></p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>$ [sudo] pip3 install cynic3\n</pre>\n<p>Or the bleeding edge version from the git master branch:</p>\n<pre>$ [sudo] pip3 install git+https://github.com/kudago/cynic3.git#egg=cynic3\n</pre>\n</div>\n<div id=\"quick-intro\">\n<h2>Quick intro</h2>\n<p>Start Cynic which in turn will start multiple services on different\nports:</p>\n<pre>$ cynic\nINFO     [2012-06-03 23:44:35,603] server: Starting 'HTTPHtmlResponse'   on port 2000\nINFO     [2012-06-03 23:44:35,603] server: Starting 'HTTPJsonResponse'   on port 2001\nINFO     [2012-06-03 23:44:35,604] server: Starting 'HTTPNoBodyResponse' on port 2002\nINFO     [2012-06-03 23:44:35,604] server: Starting 'HTTPSlowResponse'   on port 2003\nINFO     [2012-06-03 23:44:35,604] server: Starting 'RSTResponse'        on port 2020\nINFO     [2012-06-03 23:44:35,604] server: Starting 'RandomDataResponse' on port 2021\nINFO     [2012-06-03 23:44:35,604] server: Starting 'NoResponse'         on port 2022\nINFO     [2012-06-03 23:44:35,604] server: Starting 'LogRecordHandler'   on port /tmp/_cynic.sock\n</pre>\n<div id=\"test-different-services\">\n<h3>Test different services</h3>\n<ol>\n<li>Connect to the service on port 2020 and get a TCP RST packet\nright away which causes \u2018Connection reset by peer\u2019 message on the\ncommand line</li>\n</ol>\n<blockquote>\n<pre>$ curl http://localhost:2020\ncurl: (56) Recv failure: Connection reset by peer\n</pre>\n</blockquote>\n<ol>\n<li>Connect to the service on port 2021 and get back 7 bytes of random data</li>\n</ol>\n<blockquote>\n<pre>$ telnet localhost 2021\nTrying 127.0.0.1...\nConnected to localhost.\nEscape character is '^]'.\n#6\nConnection closed by foreign host.\n</pre>\n</blockquote>\n<ol>\n<li>Connect to the service on port 2001 to get the HTTP JSON response</li>\n</ol>\n<blockquote>\n<pre>$ curl http://localhost:2001\n{\"message\": \"Hello, World!\"}\n</pre>\n</blockquote>\n<p>So you got the basic idea. Point your application\u2019s integration points to the\nCynic\u2019s services and see how your app reacts.</p>\n</div>\n</div>\n<div id=\"let-s-check-out-cynic-s-help-options\">\n<h2>Let\u2019s check out Cynic\u2019s help options</h2>\n<pre>$ cynic -h\nUsage: cynic [options]\n\nTest harness to make your system under test cynical\n\nOptions:\n  -h, --help            show this help message and exit\n  -c CONFIG_PATH, --config=CONFIG_PATH\n                        Path to an INI configuration file. If no configuration\n                        file is provided then default configuration is\n                        applied. To see the default configuration use -d\n                        option described below.\n  -d, --dump            Dump default configuration to STDOUT\n</pre>\n<p>As you can see if we start <strong>Cynic</strong> without <strong>-c</strong> option the default\nconfiguration is used and <strong>-d</strong> is used to dump that configuration to\nthe standard out.</p>\n<p>Let\u2019s see what\u2019s included in the default configuration</p>\n</div>\n<div id=\"default-configuration\">\n<h2>Default configuration</h2>\n<pre>$ cynic -d\n\n############################################################\n# HTTP protocol specific                                   #\n############################################################\n\n[handler:httphtml]\n# sends simple 'hello world!' HTML page over HTTP as a response\n# and terminates\nclass = cynic.handlers.httphtml.HTTPHtmlResponse\n#args = ('/tmp/test.html', )\nhost = 0.0.0.0\nport = 2000\n\n[handler:httpjson]\n# sends simple 'hello world!' JSON over HTTP as a response\n# and terminates\nclass = cynic.handlers.httpjson.HTTPJsonResponse\n#args = ('/tmp/test.json', )\nhost = 0.0.0.0\nport = 2001\n\n[handler:httpnone]\n# sends headers, but not the response body and terminates\nclass = cynic.handlers.httpnone.HTTPNoBodyResponse\nhost = 0.0.0.0\nport = 2002\n\n[handler:httpslow]\n# sends one byte of the response every 30 seconds.\n# when the data to be sent is exhausted - terminates\nclass = cynic.handlers.httpslow.HTTPSlowResponse\n#args = ('/tmp/test.json', 'application/json', 1)\nhost = 0.0.0.0\nport = 2003\n\n\n############################################################\n# Any TCP socket protocol                                  #\n############################################################\n\n[handler:reset]\n# accepts a connection, sends an RST packet right away\n# and terminates\nclass = cynic.handlers.reset.RSTResponse\nhost = 0.0.0.0\nport = 2020\n\n[handler:random]\n# accepts a connection, sends 7 bytes from the /dev/urandom device\n# and terminates\nclass = cynic.handlers.rnd.RandomDataResponse\nhost = 0.0.0.0\nport = 2021\n\n[handler:noresp]\n# accepts a connection, but doesn't send any response back.\n# sleeps for 24 hours and exits\nclass = cynic.handlers.noresp.NoResponse\nhost = 0.0.0.0\nport = 2022\n\n############################################################\n# System handlers used internally by the Cynic server      #\n############################################################\n\n[handler:unixlog]\n# a logging server that accepts connections over Unix socket\n# from multiple local processes to output passed log records\nclass = cynic.handlers.log.LogRecordHandler\nhost = /tmp/_cynic.sock\nport = 0\nfamily = unix\n</pre>\n<p>There are basically two types of handlers:</p>\n<ol>\n<li>The ones that deal with any TCP socket protocol</li>\n<li>HTTP specific handlers</li>\n</ol>\n<p>Let\u2019s have a closer look at some of them.</p>\n<div id=\"cynic-handlers-httpslow-httpslowresponse\">\n<h3>cynic.handlers.httpslow.HTTPSlowResponse</h3>\n<p>This handler sends one byte of the HTTP response every 30 seconds.\nThe config part is as follows</p>\n<pre>[handler:httpslow]\n# sends one byte of the response every 30 seconds.\n# when the data to be sent is exhausted - terminates\nclass = cynic.handlers.httpslow.HTTPSlowResponse\n#args = ('/tmp/test.json', 'application/json', 1)\nhost = 0.0.0.0\nport = 2003\n</pre>\n<p>where</p>\n<p><em>class</em> - a fully qualified dotted Python name of the handler class</p>\n<p><em>args</em> - a tuple of Python values to pass as positional arguments to the handler\u2019s constructor.</p>\n<blockquote>\n<p><strong>First argument</strong> specifies absolute path to a file to read\nthe data from instead of using a default data sting \u2018Hello, world!\u2019</p>\n<p><strong>Second argument</strong> specifies the value of HTTP\u2019s Content-Type\nresponse header</p>\n<p><strong>Third argument</strong> specifies time interval in seconds, default\nis 30, after which additional byte is sent to the client</p>\n</blockquote>\n<p><em>host</em> - an IP address to bind the service to (For Unix socket it\u2019s a file path)</p>\n<p><em>port</em> - port to listen on (not applicable for Unix sockets)</p>\n<p>Even with this service alone you can be creative and come up with\nseveral test scenarios that will make the life of your system under\ntest quite unbearable:</p>\n<ol>\n<li>Specify file in the <em>args</em> that contains megabytes of data and see how\nyour system handles such a large response</li>\n<li>You can change file path and content type arguments to send HTML,\nJSON, XML, Plain text, etc</li>\n<li>You can send HTML data but set Content-Type header value to\n<em>application/json</em></li>\n<li>You can change time interval to test your socket read timeout\nexpiration or lack thereof.</li>\n<li>You can have all above as separate services on different ports.\nJust add <em>[handler:httpslow1]</em>, <em>[handler:httpslow2]</em>, etc. sections to\nthe INI file and tweak the <em>args</em>.</li>\n</ol>\n</div>\n</div>\n<div id=\"extending-cynic-with-custom-handlers\">\n<h2>Extending Cynic with custom handlers</h2>\n<p>It\u2019s very easy to add your own handler to the Cynic.</p>\n<ol>\n<li>To add a new TCP handler inherit from <em>cynic.handlers.base.BaseHandler</em>\nand implement the <em>handle</em> method which directly interacts with a\nTCP socket.</li>\n<li>To add a new HTTP handler inherit from\n<em>cynic.handlers.base.BaseHTTPHandler</em> and implement your custom\ndo_GET, do_POST, do_PUT, etc methods.\nFor more information about the handler see <a href=\"http://docs.python.org/library/basehttpserver.html#BaseHTTPServer.BaseHTTPRequestHandler\" rel=\"nofollow\">BaseHTTPRequestHandler</a></li>\n<li>Add a section <em>[handler:my_new_name]</em> to the INI configuration file with corresponding\nconfiguration parameters.</li>\n</ol>\n<p><strong>XXX: Full example?</strong></p>\n</div>\n<div id=\"acknowledgments\">\n<h2>Acknowledgments</h2>\n<ul>\n<li>Many ideas are taken from <a href=\"http://pragprog.com/book/mnee/release-it\" rel=\"nofollow\">Release It!</a></li>\n</ul>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>Copyright (c) 2017 Ruslan Spivak, Maxim Muzafarov, Murad Byashimov</p>\n<p>Published under The MIT License, see LICENSE</p>\n<div id=\"change-history\">\n<h3>Change History</h3>\n</div>\n</div>\n<div id=\"id1\">\n<h2>3.0 (2017-01-20)</h2>\n<ul>\n<li>Py3 version</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h2>1.0 (2012-06-04)</h2>\n<ul>\n<li>Public release</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 2599778, "releases": {"3.0": [{"comment_text": "", "digests": {"md5": "e517af8a2c07c5ff8ccbe9ef78eb47ad", "sha256": "907f9a98ff624b14b24a98452bab0756e2b0a4a514044d34edc7e04859149f3c"}, "downloads": -1, "filename": "cynic3-3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "e517af8a2c07c5ff8ccbe9ef78eb47ad", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 25257, "upload_time": "2017-01-20T08:11:12", "upload_time_iso_8601": "2017-01-20T08:11:12.356351Z", "url": "https://files.pythonhosted.org/packages/ad/db/da8e6f7e0e6d86f21c9e026f1f421e6e9f128fcb83c75ce74da85e60f3ab/cynic3-3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "742e98358a0443156b1d0087bc491445", "sha256": "1d297399bcbb23c86c5c9cd5e94a739a92d71f65897f42dcb5c28c3aebc36d97"}, "downloads": -1, "filename": "cynic3-3.0.tar.gz", "has_sig": false, "md5_digest": "742e98358a0443156b1d0087bc491445", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12294, "upload_time": "2017-01-20T08:11:13", "upload_time_iso_8601": "2017-01-20T08:11:13.887700Z", "url": "https://files.pythonhosted.org/packages/5f/93/feea200ac61ea16943b81e2c394c5f717d75e038c3dafbede126b32996f0/cynic3-3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e517af8a2c07c5ff8ccbe9ef78eb47ad", "sha256": "907f9a98ff624b14b24a98452bab0756e2b0a4a514044d34edc7e04859149f3c"}, "downloads": -1, "filename": "cynic3-3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "e517af8a2c07c5ff8ccbe9ef78eb47ad", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 25257, "upload_time": "2017-01-20T08:11:12", "upload_time_iso_8601": "2017-01-20T08:11:12.356351Z", "url": "https://files.pythonhosted.org/packages/ad/db/da8e6f7e0e6d86f21c9e026f1f421e6e9f128fcb83c75ce74da85e60f3ab/cynic3-3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "742e98358a0443156b1d0087bc491445", "sha256": "1d297399bcbb23c86c5c9cd5e94a739a92d71f65897f42dcb5c28c3aebc36d97"}, "downloads": -1, "filename": "cynic3-3.0.tar.gz", "has_sig": false, "md5_digest": "742e98358a0443156b1d0087bc491445", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12294, "upload_time": "2017-01-20T08:11:13", "upload_time_iso_8601": "2017-01-20T08:11:13.887700Z", "url": "https://files.pythonhosted.org/packages/5f/93/feea200ac61ea16943b81e2c394c5f717d75e038c3dafbede126b32996f0/cynic3-3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:41:04 2020"}