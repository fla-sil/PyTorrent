{"info": {"author": "Pedro Miguel Cuadros de Avila", "author_email": "pemcda@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Operating System :: Unix", "Programming Language :: Python", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Utilities"], "description": "========\nOverview\n========\n\n\n\nAn example package. Geo Distributed LRU (Least Recently Used) cache with expiration time\n\n* Free software: BSD 3-Clause License\n\nInstallation\n============\n\n::\n\n    pip install distributed-lru-cache\n\nYou can also install the in-development version with::\n\n    pip install https://github.com/pcu4dros/pedro_cuadros_test/python-distributed-lru-cache/archive/master.zip\n\n\nDocumentation\n=============\n\n=======\nProject\n=======\n\nWe want to optimize every bits of software we write. Your goal is to write a new library that can\nbe integrated to our stack. Dealing with network issues everyday, latency is our biggest problem.\nThus, your challenge is to write a new Geo Distributed LRU (Least Recently Used) cache with\ntime expiration. This library will be used extensively by many of our services so it needs to meet\nthe following criteria::\n\n  1 - Simplicity. Integration needs to be dead simple.\n      [covered, this is an standard library]\n  2 - Resilient to network failures or crashes.\n      [covered, using redis]\n  3 - Near real time replication of data across Geolocation. Writes need to be in real time.\n      [covered, using redis, replication of the data occurs in near real time and writes on redis are considered in real time]\n  4 - Data consistency across regions\n      [covered, using redis, the data is always consistent through the database]\n  5 - Locality of reference, data should almost always be available from the closest region\n      [partially covered, an additional iteration is needed in order to indicate on which region/instance/etc the data will be obtained]\n  6 - Flexible Schema\n      [is a flexible schema, keys are stored in strings and values to, but the data could be parsed from an specific structure or model]\n  7 - Cache can expire\n      [partially covered, the expiration functionality is rusty and need to be more flexible and robust]\n\n\n=================\nHow does it work?\n=================\n\nThis Distributed LRU Cache:\n\nAn LRU cache is an efficient cache data structure that can be used to figure out what we should evict when the cache is full. The goal is to always have the least-recently used item accessible in O(1) time.\n\n========================\nLRU Cache Implementation\n========================\n\nTo create the LRU logic were necessary to use the following collections, data structures and tools:\n\nDeque\n=============\n\nA double-ended queue, or deque, supports adding and removing elements from either end.\n\ncollections.deque::\n    Returns a new deque object initialized left-to-right (using append()) with data from iterable. If iterable is not specified, the new deque    is empty.\n\nDeques are a generalization of stacks and queues (the name is pronounced \u201cdeck\u201d and is short for \u201cdouble-ended queue\u201d). Deques support thread-safe, memory efficient appends and pops from either side of the deque with approximately the same O(1) performance in either direction.\n\nDictionary\n=============\n\nA dictionary is used to map or associate things you want to store the keys you need to get them. A dictionary in Python is just like a dictionary in the real world. Python Dictionary are defined into two elements Keys and Values.\n\n    Keys will be a single element\n    Values can be a list or list within a list, numbers, etc.\n\nRedis\n=============\n\nRedis is an open source (BSD licensed), in-memory data structure store, used as a database, cache and message broker. It supports data structures such as strings, hashes, lists, sets, sorted sets with range queries, bitmaps, hyperloglogs, geospatial indexes with radius queries and streams.\n\nThis library use HASHes\n=======================\n\nRedis HASHes store a mapping of keys to values. The values that can be stored in HASHes are the same as what can be stored as normal STRINGs: strings themselves.\n\nNote: This in order to maintain the data backed on a in-memory database and speed up the writes and replications.\n\nLife cycle of the methods\n=========================\nlife-cycle of a PUT::\n\n    The item is created/updated on the queue using a dictionary\n    LRU cache is updated (item is bumped up if it already exists)\n    Validates the capacity of the cache and remove the Last Recently Used key if no more space is found using the popleft() command\n    Validates if the key is in the cache instance and remove that key in order to create it again:\n       - Create the key again on the local instance and redis\n    If a ttl(Time to live) was given, the item will expire in that amount of time\n\n\nlife-cycle of a GET::\n\n    LRU cache is checked for item, if it exists item is returned (item is bumped up) and the queue using the following steps:\n    - Remove the item from the queue\n    - Remove the key from redis hash\n    - Append the node again on the queue\n    - Create the key on redis hash again\n    - Obtain the value from the node/key and the value is returned\n\n\n=====\nUsage\n=====\n\nTo use Distributed LRU Cache in a project::\n\n\n\tfrom distributed_lru_cache.cache import LRUCache\n\n        lru = LRUCache(capacity=2, cache_name='lrucache', redis_host='localhost', redis_port=6379, redis_db=0, ttl=5)\n\n        lru.put('10', '1')\n        lru.put('20', '1', ttl=1)\n        lru.get('10')\n\n\n\nWhere::\n\n   capacity: The capacity of the cache instance (128 by default)\n   cache_name: The name of the cache instance to create ('lrucache' by default)\n   redis_host: The host name of redis server ('localhost' by default)\n   redis_port: The port of redis server (6379 by default)\n   redis_db: The database to use on redis (0 by default)\n   ttl: time to live, the expiration time (0 by default = No expiration)\n\n\nmethods::\n\n   put: To create a cache item into the cache instance could have an extra argument (ttl) to expire this specific item\n   get: The obtain a cache item altering the order of the items\n   peek: The obtain a cache item without altering the order of the items\n   set_redis_conn: To instantiate a specific redis connection after the item creation\n   clear_cache_instance: To clear the entire cache instance\n\n\nDevelopment\n===========\n\nTo run the all tests run::\n\n    tox\n\nNote, to combine the coverage data from all the tox environments run:\n\n.. list-table::\n    :widths: 10 90\n    :stub-columns: 1\n\n    - - Windows\n      - ::\n\n            set PYTEST_ADDOPTS=--cov-append\n            tox\n\n    - - Other\n      - ::\n\n            PYTEST_ADDOPTS=--cov-append tox\n\n\nChangelog\n=========\n\n0.0.1 (time expiration.)\n------------------------\n\n* First release on PyPI.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/pcu4dros/pedro_cuadros_test/python-distributed-lru-cache", "keywords": "", "license": "BSD-3-Clause", "maintainer": "", "maintainer_email": "", "name": "distributed-lru-cache", "package_url": "https://pypi.org/project/distributed-lru-cache/", "platform": "", "project_url": "https://pypi.org/project/distributed-lru-cache/", "project_urls": {"Changelog": "https://python-distributed-lru-cache.readthedocs.io/en/latest/changelog.html", "Documentation": "https://python-distributed-lru-cache.readthedocs.io/", "Homepage": "https://github.com/pcu4dros/pedro_cuadros_test/python-distributed-lru-cache", "Issue Tracker": "https://github.com/pcu4dros/pedro_cuadros_test/python-distributed-lru-cache/issues"}, "release_url": "https://pypi.org/project/distributed-lru-cache/0.0.2/", "requires_dist": ["redis", "fakeredis"], "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "summary": "An example package. Geo Distributed LRU (Least Recently Used) cache with", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"overview\">\n<h2>Overview</h2>\n<p>An example package. Geo Distributed LRU (Least Recently Used) cache with expiration time</p>\n<ul>\n<li>Free software: BSD 3-Clause License</li>\n</ul>\n<div id=\"installation\">\n<h3>Installation</h3>\n<pre>pip install distributed-lru-cache\n</pre>\n<p>You can also install the in-development version with:</p>\n<pre>pip install https://github.com/pcu4dros/pedro_cuadros_test/python-distributed-lru-cache/archive/master.zip\n</pre>\n</div>\n<div id=\"documentation\">\n<h3>Documentation</h3>\n</div>\n</div>\n<div id=\"project\">\n<h2>Project</h2>\n<p>We want to optimize every bits of software we write. Your goal is to write a new library that can\nbe integrated to our stack. Dealing with network issues everyday, latency is our biggest problem.\nThus, your challenge is to write a new Geo Distributed LRU (Least Recently Used) cache with\ntime expiration. This library will be used extensively by many of our services so it needs to meet\nthe following criteria:</p>\n<pre>1 - Simplicity. Integration needs to be dead simple.\n    [covered, this is an standard library]\n2 - Resilient to network failures or crashes.\n    [covered, using redis]\n3 - Near real time replication of data across Geolocation. Writes need to be in real time.\n    [covered, using redis, replication of the data occurs in near real time and writes on redis are considered in real time]\n4 - Data consistency across regions\n    [covered, using redis, the data is always consistent through the database]\n5 - Locality of reference, data should almost always be available from the closest region\n    [partially covered, an additional iteration is needed in order to indicate on which region/instance/etc the data will be obtained]\n6 - Flexible Schema\n    [is a flexible schema, keys are stored in strings and values to, but the data could be parsed from an specific structure or model]\n7 - Cache can expire\n    [partially covered, the expiration functionality is rusty and need to be more flexible and robust]\n</pre>\n</div>\n<div id=\"how-does-it-work\">\n<h2>How does it work?</h2>\n<p>This Distributed LRU Cache:</p>\n<p>An LRU cache is an efficient cache data structure that can be used to figure out what we should evict when the cache is full. The goal is to always have the least-recently used item accessible in O(1) time.</p>\n</div>\n<div id=\"lru-cache-implementation\">\n<h2>LRU Cache Implementation</h2>\n<p>To create the LRU logic were necessary to use the following collections, data structures and tools:</p>\n<div id=\"deque\">\n<h3>Deque</h3>\n<p>A double-ended queue, or deque, supports adding and removing elements from either end.</p>\n<dl>\n<dt>collections.deque::</dt>\n<dd>Returns a new deque object initialized left-to-right (using append()) with data from iterable. If iterable is not specified, the new deque    is empty.</dd>\n</dl>\n<p>Deques are a generalization of stacks and queues (the name is pronounced \u201cdeck\u201d and is short for \u201cdouble-ended queue\u201d). Deques support thread-safe, memory efficient appends and pops from either side of the deque with approximately the same O(1) performance in either direction.</p>\n</div>\n<div id=\"dictionary\">\n<h3>Dictionary</h3>\n<p>A dictionary is used to map or associate things you want to store the keys you need to get them. A dictionary in Python is just like a dictionary in the real world. Python Dictionary are defined into two elements Keys and Values.</p>\n<blockquote>\nKeys will be a single element\nValues can be a list or list within a list, numbers, etc.</blockquote>\n</div>\n<div id=\"redis\">\n<h3>Redis</h3>\n<p>Redis is an open source (BSD licensed), in-memory data structure store, used as a database, cache and message broker. It supports data structures such as strings, hashes, lists, sets, sorted sets with range queries, bitmaps, hyperloglogs, geospatial indexes with radius queries and streams.</p>\n</div>\n<div id=\"this-library-use-hashes\">\n<h3>This library use HASHes</h3>\n<p>Redis HASHes store a mapping of keys to values. The values that can be stored in HASHes are the same as what can be stored as normal STRINGs: strings themselves.</p>\n<p>Note: This in order to maintain the data backed on a in-memory database and speed up the writes and replications.</p>\n</div>\n<div id=\"life-cycle-of-the-methods\">\n<h3>Life cycle of the methods</h3>\n<p>life-cycle of a PUT:</p>\n<pre>The item is created/updated on the queue using a dictionary\nLRU cache is updated (item is bumped up if it already exists)\nValidates the capacity of the cache and remove the Last Recently Used key if no more space is found using the popleft() command\nValidates if the key is in the cache instance and remove that key in order to create it again:\n   - Create the key again on the local instance and redis\nIf a ttl(Time to live) was given, the item will expire in that amount of time\n</pre>\n<p>life-cycle of a GET:</p>\n<pre>LRU cache is checked for item, if it exists item is returned (item is bumped up) and the queue using the following steps:\n- Remove the item from the queue\n- Remove the key from redis hash\n- Append the node again on the queue\n- Create the key on redis hash again\n- Obtain the value from the node/key and the value is returned\n</pre>\n</div>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>To use Distributed LRU Cache in a project:</p>\n<pre>from distributed_lru_cache.cache import LRUCache\n\nlru = LRUCache(capacity=2, cache_name='lrucache', redis_host='localhost', redis_port=6379, redis_db=0, ttl=5)\n\nlru.put('10', '1')\nlru.put('20', '1', ttl=1)\nlru.get('10')\n</pre>\n<p>Where:</p>\n<pre>capacity: The capacity of the cache instance (128 by default)\ncache_name: The name of the cache instance to create ('lrucache' by default)\nredis_host: The host name of redis server ('localhost' by default)\nredis_port: The port of redis server (6379 by default)\nredis_db: The database to use on redis (0 by default)\nttl: time to live, the expiration time (0 by default = No expiration)\n</pre>\n<p>methods:</p>\n<pre>put: To create a cache item into the cache instance could have an extra argument (ttl) to expire this specific item\nget: The obtain a cache item altering the order of the items\npeek: The obtain a cache item without altering the order of the items\nset_redis_conn: To instantiate a specific redis connection after the item creation\nclear_cache_instance: To clear the entire cache instance\n</pre>\n<div id=\"development\">\n<h3>Development</h3>\n<p>To run the all tests run:</p>\n<pre>tox\n</pre>\n<p>Note, to combine the coverage data from all the tox environments run:</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><th>Windows</th>\n<td><pre>\nset PYTEST_ADDOPTS=--cov-append\ntox\n</pre>\n</td>\n</tr>\n<tr><th>Other</th>\n<td><pre>\nPYTEST_ADDOPTS=--cov-append tox\n</pre>\n</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"changelog\">\n<h3>Changelog</h3>\n<h3 id=\"time-expiration\"><span class=\"section-subtitle\">0.0.1 (time expiration.)</span></h3>\n<ul>\n<li>First release on PyPI.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6545870, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "9ccd836fdee308d87f9daeb928d8ddee", "sha256": "27068971121f8c5b0ae5d79876d6c180b6719fa230626e0b4a22e23bbf9ccbb1"}, "downloads": -1, "filename": "distributed_lru_cache-0.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "9ccd836fdee308d87f9daeb928d8ddee", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 10521, "upload_time": "2020-01-30T20:31:27", "upload_time_iso_8601": "2020-01-30T20:31:27.598162Z", "url": "https://files.pythonhosted.org/packages/cd/86/00ab31bada4396a15de05d4a371a786b9500fd67c420dd9caf93afaad45e/distributed_lru_cache-0.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f52737b4cf852f66c539b0be33dbbcd0", "sha256": "d6104448c9ca419780f29c5ebe566ea57f69641fb5515d37fc9b20bbc6473652"}, "downloads": -1, "filename": "distributed-lru-cache-0.0.1.tar.gz", "has_sig": false, "md5_digest": "f52737b4cf852f66c539b0be33dbbcd0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 13409, "upload_time": "2020-01-30T20:31:30", "upload_time_iso_8601": "2020-01-30T20:31:30.087655Z", "url": "https://files.pythonhosted.org/packages/b8/6a/bf92a0385d32ef6f404fd7e7e630c24e9a6d2e622500cc4984cc77769b8f/distributed-lru-cache-0.0.1.tar.gz", "yanked": false}], "0.0.1b0": [{"comment_text": "", "digests": {"md5": "81ad2607856ca6819dc724974546df2e", "sha256": "5c9e18e6efb09b937c148e18a33a3a5f43c1f53c515a5346461ad9b6a8b99e8b"}, "downloads": -1, "filename": "distributed_lru_cache-0.0.1b0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "81ad2607856ca6819dc724974546df2e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 10566, "upload_time": "2020-01-30T21:37:41", "upload_time_iso_8601": "2020-01-30T21:37:41.231312Z", "url": "https://files.pythonhosted.org/packages/23/4e/303f765af8d094a81340bd354fc1f35f513c4641dbfdf11a73133ce37cca/distributed_lru_cache-0.0.1b0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "534199d1a0b0fa848621d4ff5f7b4163", "sha256": "ae459e1696115f19eca7c79284872df82d5fe5bdee0ef1f561fc90704dec115b"}, "downloads": -1, "filename": "distributed-lru-cache-0.0.1b0.tar.gz", "has_sig": false, "md5_digest": "534199d1a0b0fa848621d4ff5f7b4163", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 13374, "upload_time": "2020-01-30T21:37:42", "upload_time_iso_8601": "2020-01-30T21:37:42.574396Z", "url": "https://files.pythonhosted.org/packages/5f/c2/762967b48a6729d31f83816e3e5f940810c4fde49e10e6d25fcf88e69978/distributed-lru-cache-0.0.1b0.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "49066bacd5f9410d3f79064ce597473f", "sha256": "97de33ae7d1334373f2cb75e1748d72ac257ab1a86af70f88a583908cde5f906"}, "downloads": -1, "filename": "distributed_lru_cache-0.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "49066bacd5f9410d3f79064ce597473f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 10532, "upload_time": "2020-01-30T21:42:17", "upload_time_iso_8601": "2020-01-30T21:42:17.361371Z", "url": "https://files.pythonhosted.org/packages/ea/d2/c5faafbb51c01de91f4c3cd3e49d8416c8fb5aea5eaa412a1854a78879c9/distributed_lru_cache-0.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "699b69af9d831c6000ad8701d57a6b07", "sha256": "f621d50a5c49590dfa28433971a8ddebf92d9d24a29e4dd3499dbbbc20285267"}, "downloads": -1, "filename": "distributed-lru-cache-0.0.2.tar.gz", "has_sig": false, "md5_digest": "699b69af9d831c6000ad8701d57a6b07", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 13377, "upload_time": "2020-01-30T21:42:19", "upload_time_iso_8601": "2020-01-30T21:42:19.180317Z", "url": "https://files.pythonhosted.org/packages/90/e4/c723e88d5d1515cdb802d7632b75e5ad5888af164f16aed12ae1b172316b/distributed-lru-cache-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "49066bacd5f9410d3f79064ce597473f", "sha256": "97de33ae7d1334373f2cb75e1748d72ac257ab1a86af70f88a583908cde5f906"}, "downloads": -1, "filename": "distributed_lru_cache-0.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "49066bacd5f9410d3f79064ce597473f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 10532, "upload_time": "2020-01-30T21:42:17", "upload_time_iso_8601": "2020-01-30T21:42:17.361371Z", "url": "https://files.pythonhosted.org/packages/ea/d2/c5faafbb51c01de91f4c3cd3e49d8416c8fb5aea5eaa412a1854a78879c9/distributed_lru_cache-0.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "699b69af9d831c6000ad8701d57a6b07", "sha256": "f621d50a5c49590dfa28433971a8ddebf92d9d24a29e4dd3499dbbbc20285267"}, "downloads": -1, "filename": "distributed-lru-cache-0.0.2.tar.gz", "has_sig": false, "md5_digest": "699b69af9d831c6000ad8701d57a6b07", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 13377, "upload_time": "2020-01-30T21:42:19", "upload_time_iso_8601": "2020-01-30T21:42:19.180317Z", "url": "https://files.pythonhosted.org/packages/90/e4/c723e88d5d1515cdb802d7632b75e5ad5888af164f16aed12ae1b172316b/distributed-lru-cache-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:38:03 2020"}