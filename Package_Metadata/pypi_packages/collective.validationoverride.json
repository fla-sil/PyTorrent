{"info": {"author": "Ross Patterson", "author_email": "me@rpatterson.net", "bugtrack_url": null, "classifiers": ["Programming Language :: Python", "Topic :: Software Development :: Libraries :: Python Modules"], "description": ".. -*-doctest-*-\n\n=============================\ncollective.validationoverride\n=============================\n\nFor some sites, it may be useful to allow certain users, such as site\nadministrators, to edit content without satisfying field validators.\nFor example, a site with a content type for capturing member contact\ninformation would use required fields for most of the contact\ninformation fields.  On rare occasions, however, the contact\ninformation object may be required for some purposes, such as general\nlisting, but the full contact information may not be available, such\nas wen a member is away.\n\nThe collective.validationoverride package provides patches the\nArchetypes field validator method such that when field validation\nfailures are logged but validation status is still successful.\nSpecifically, a permission is checked and if the current user has that\npermission in the context of the object, the validation error is\nlogged and then removed from the list of validation errors allowing\nfor a successful validation status.\n\nThe permission to check is taken from the\n'validation_override_permission' field attribute defaulting to the\n\"Override validation\" permission.  As such, field validation may be\noverridden without modifying the content types by assigning the\n\"Override validation\" permission to the appropriate roles in the\ndesired contexts.  By default, the \"Manager\" role has this permission.\n\nExamples\n--------\n\nBefore installing collective.validationoverride, field validation must\nbe satisfied.\n\nCapture logging output.\n\n    >>> from zope.testing.loggingsupport import InstalledHandler\n    >>> log_handler = InstalledHandler('collective.validationoverride')\n\nOpen a browser and log in as a user with the \"Manager\" role.\n\n    >>> from Products.Five.testbrowser import Browser\n    >>> from Products.PloneTestCase import ptc\n    >>> owner_browser = Browser()\n    >>> owner_browser.handleErrors = False\n    >>> owner_browser.open(portal.absolute_url())\n    >>> owner_browser.getLink('Log in').click()\n    >>> owner_browser.getControl(\n    ...     'Login Name').value = ptc.portal_owner\n    >>> owner_browser.getControl(\n    ...     'Password').value = ptc.default_password\n    >>> owner_browser.getControl('Log in').click()\n\nAdd an event and try to save it without valid field values.\nThe validation fails and reports the required fields.\n\n    >>> owner_browser.getLink(url='Event').click()\n    >>> owner_browser.getControl('Event URL').value = 'foo'\n    >>> owner_browser.getControl('Contact E-mail').value = 'bar'\n    >>> owner_browser.getControl('Save').click()\n    >>> print owner_browser.contents\n    <...\n                <dd>Please correct the indicated errors.</dd>...\n              <div class=\"fieldErrorBox\">Title is required, please correct.</div>...\n              <div class=\"fieldErrorBox\">Validation failed(isURL): 'foo' is not a valid url.</div>...\n              <div class=\"fieldErrorBox\">Validation failed(isEmail): 'bar' is not a valid email address.</div>...\n\nNo validation errors have been logged.\n\n    >>> for record in log_handler.records:\n    ...     print record.getMessage()\n\nAfter installing collective.validationoverride, field validation\nfailures will be omitted for users with the \"Manger\" role but not for\nnormal users since the \"Override validation\" permission is only given\nto users with the \"Manager\" role.\n\nInstall the collective.validationoverride package.\n\n    >>> portal.portal_quickinstaller.installProduct(\n    ...     'collective.validationoverride')\n    ''\n\nNow a user with the \"Manager\" role can successfully add an event with\ninvalid field values.\n\n    >>> owner_browser.open(portal.absolute_url())\n    >>> owner_browser.getLink(url='Event').click()\n    >>> owner_browser.getControl('Event URL').value = 'foo'\n    >>> owner_browser.getControl('Contact E-mail').value = 'bar'\n    >>> owner_browser.getControl('Save').click()\n    >>> print owner_browser.contents\n    <...\n                <dd>Changes saved.</dd>...\n                            <a href=\"&#0109;ailto&#0058;bar\" class=\"email fn\">bar</a>...\n                <a class=\"url\" href=\"foo\"...\n\nAll omitted validation errors have been logged.\n\n    >>> for record in log_handler.records:\n    ...     print record.getMessage()\n    Overriding the validation result u'Title is required, please correct.' on <ATEvent at /plone/portal_factory/Event/event... used for /plone>:\n    {'title': u'Title is required, please correct.'}\n    Overriding the validation result u\"Validation failed(isURL): 'foo' is not a valid url.\" on <ATEvent at /plone/portal_factory/Event/event... used for /plone>:\n    {}\n    Overriding the validation result u\"Validation failed(isEmail): 'bar' is not a valid email address.\" on <ATEvent at /plone/portal_factory/Event/event... used for /plone>:\n    {}...\n    >>> log_handler.clear()\n\nOpen a browser and log in as a normal user.\n\n    >>> browser = Browser()\n    >>> browser.handleErrors = False\n    >>> browser.open(portal.absolute_url())\n    >>> browser.getLink('Log in').click()\n    >>> browser.getControl('Login Name').value = ptc.default_user\n    >>> browser.getControl(\n    ...     'Password').value = ptc.default_password\n    >>> browser.getControl('Log in').click()\n\nThe normal use still cannot add an event with invalid field values.\n\n    >>> browser.open(self.folder.absolute_url())\n    >>> browser.getLink(url='Event').click()\n    >>> browser.getControl('Event URL').value = 'foo'\n    >>> browser.getControl('Contact E-mail').value = 'bar'\n    >>> browser.getControl('Save').click()\n    >>> print browser.contents\n    <...\n                <dd>Please correct the indicated errors.</dd>...\n              <div class=\"fieldErrorBox\">Title is required, please correct.</div>...\n              <div class=\"fieldErrorBox\">Validation failed(isURL): 'foo' is not a valid url.</div>...\n              <div class=\"fieldErrorBox\">Validation failed(isEmail): 'bar' is not a valid email address.</div>...\n\nNo validation errors have been logged.\n\n    >>> for record in log_handler.records:\n    ...     print record.getMessage()\n\nSet the 'validation_override_permission' field attribute to a\npermission the normal user has.\n\n    >>> from Products.ATContentTypes.content import event\n    >>> schema = event.ATEvent.schema\n    >>> schema['title'].validation_override_permission = (\n    ...     \"Modify portal content\")\n    >>> schema['eventUrl'].validation_override_permission = (\n    ...     \"Modify portal content\")\n    >>> schema['contactEmail'].validation_override_permission = (\n    ...     \"Modify portal content\")\n\nNow the user can successfully add an event with invalid field values.\n\n    >>> browser.open(self.folder.absolute_url())\n    >>> browser.getLink(url='Event').click()\n    >>> browser.getControl('Event URL').value = 'foo'\n    >>> browser.getControl('Contact E-mail').value = 'bar'\n    >>> browser.getControl('Save').click()\n    >>> print browser.contents\n    <...\n                <dd>Changes saved.</dd>...\n                            <a href=\"&#0109;ailto&#0058;bar\" class=\"email fn\">bar</a>...\n                <a class=\"url\" href=\"foo\"...\n\nAll omitted validation errors have been logged.\n\n    >>> for record in log_handler.records:\n    ...     print record.getMessage()\n    Overriding the validation result u'Title is required, please correct.' on <ATEvent at /plone/Members/test_user_1_/portal_factory/Event/event... used for /plone/Members/test_user_1_>:\n    {'title': u'Title is required, please correct.'}\n    Overriding the validation result u\"Validation failed(isURL): 'foo' is not a valid url.\" on <ATEvent at /plone/Members/test_user_1_/portal_factory/Event/event... used for /plone/Members/test_user_1_>:\n    {}\n    Overriding the validation result u\"Validation failed(isEmail): 'bar' is not a valid email address.\" on <ATEvent at /plone/Members/test_user_1_/portal_factory/Event/event... used for /plone/Members/test_user_1_>:\n    {}...\n    >>> log_handler.clear()\n    \nChangelog\n=========\n\n0.1 - 2009-11-12\n----------------\n\n* Initial release\n\n\nTODO\n====", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pypi.python.org/pypi/collective.validationoverride", "keywords": "", "license": "GPL", "maintainer": null, "maintainer_email": null, "name": "collective.validationoverride", "package_url": "https://pypi.org/project/collective.validationoverride/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/collective.validationoverride/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://pypi.python.org/pypi/collective.validationoverride"}, "release_url": "https://pypi.org/project/collective.validationoverride/0.1/", "requires_dist": null, "requires_python": null, "summary": "Allow AT field validatiuon to fail for users who have an override permission", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>For some sites, it may be useful to allow certain users, such as site\nadministrators, to edit content without satisfying field validators.\nFor example, a site with a content type for capturing member contact\ninformation would use required fields for most of the contact\ninformation fields.  On rare occasions, however, the contact\ninformation object may be required for some purposes, such as general\nlisting, but the full contact information may not be available, such\nas wen a member is away.</p>\n<p>The collective.validationoverride package provides patches the\nArchetypes field validator method such that when field validation\nfailures are logged but validation status is still successful.\nSpecifically, a permission is checked and if the current user has that\npermission in the context of the object, the validation error is\nlogged and then removed from the list of validation errors allowing\nfor a successful validation status.</p>\n<p>The permission to check is taken from the\n\u2018validation_override_permission\u2019 field attribute defaulting to the\n\u201cOverride validation\u201d permission.  As such, field validation may be\noverridden without modifying the content types by assigning the\n\u201cOverride validation\u201d permission to the appropriate roles in the\ndesired contexts.  By default, the \u201cManager\u201d role has this permission.</p>\n<div id=\"examples\">\n<h2>Examples</h2>\n<p>Before installing collective.validationoverride, field validation must\nbe satisfied.</p>\n<p>Capture logging output.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from zope.testing.loggingsupport import InstalledHandler\n&gt;&gt;&gt; log_handler = InstalledHandler('collective.validationoverride')\n</pre>\n</blockquote>\n<p>Open a browser and log in as a user with the \u201cManager\u201d role.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from Products.Five.testbrowser import Browser\n&gt;&gt;&gt; from Products.PloneTestCase import ptc\n&gt;&gt;&gt; owner_browser = Browser()\n&gt;&gt;&gt; owner_browser.handleErrors = False\n&gt;&gt;&gt; owner_browser.open(portal.absolute_url())\n&gt;&gt;&gt; owner_browser.getLink('Log in').click()\n&gt;&gt;&gt; owner_browser.getControl(\n...     'Login Name').value = ptc.portal_owner\n&gt;&gt;&gt; owner_browser.getControl(\n...     'Password').value = ptc.default_password\n&gt;&gt;&gt; owner_browser.getControl('Log in').click()\n</pre>\n</blockquote>\n<p>Add an event and try to save it without valid field values.\nThe validation fails and reports the required fields.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; owner_browser.getLink(url='Event').click()\n&gt;&gt;&gt; owner_browser.getControl('Event URL').value = 'foo'\n&gt;&gt;&gt; owner_browser.getControl('Contact E-mail').value = 'bar'\n&gt;&gt;&gt; owner_browser.getControl('Save').click()\n&gt;&gt;&gt; print owner_browser.contents\n&lt;...\n            &lt;dd&gt;Please correct the indicated errors.&lt;/dd&gt;...\n          &lt;div class=\"fieldErrorBox\"&gt;Title is required, please correct.&lt;/div&gt;...\n          &lt;div class=\"fieldErrorBox\"&gt;Validation failed(isURL): 'foo' is not a valid url.&lt;/div&gt;...\n          &lt;div class=\"fieldErrorBox\"&gt;Validation failed(isEmail): 'bar' is not a valid email address.&lt;/div&gt;...\n</pre>\n</blockquote>\n<p>No validation errors have been logged.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; for record in log_handler.records:\n...     print record.getMessage()\n</pre>\n</blockquote>\n<p>After installing collective.validationoverride, field validation\nfailures will be omitted for users with the \u201cManger\u201d role but not for\nnormal users since the \u201cOverride validation\u201d permission is only given\nto users with the \u201cManager\u201d role.</p>\n<p>Install the collective.validationoverride package.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; portal.portal_quickinstaller.installProduct(\n...     'collective.validationoverride')\n''\n</pre>\n</blockquote>\n<p>Now a user with the \u201cManager\u201d role can successfully add an event with\ninvalid field values.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; owner_browser.open(portal.absolute_url())\n&gt;&gt;&gt; owner_browser.getLink(url='Event').click()\n&gt;&gt;&gt; owner_browser.getControl('Event URL').value = 'foo'\n&gt;&gt;&gt; owner_browser.getControl('Contact E-mail').value = 'bar'\n&gt;&gt;&gt; owner_browser.getControl('Save').click()\n&gt;&gt;&gt; print owner_browser.contents\n&lt;...\n            &lt;dd&gt;Changes saved.&lt;/dd&gt;...\n                        &lt;a href=\"&amp;#0109;ailto&amp;#0058;bar\" class=\"email fn\"&gt;bar&lt;/a&gt;...\n            &lt;a class=\"url\" href=\"foo\"...\n</pre>\n</blockquote>\n<p>All omitted validation errors have been logged.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; for record in log_handler.records:\n...     print record.getMessage()\nOverriding the validation result u'Title is required, please correct.' on &lt;ATEvent at /plone/portal_factory/Event/event... used for /plone&gt;:\n{'title': u'Title is required, please correct.'}\nOverriding the validation result u\"Validation failed(isURL): 'foo' is not a valid url.\" on &lt;ATEvent at /plone/portal_factory/Event/event... used for /plone&gt;:\n{}\nOverriding the validation result u\"Validation failed(isEmail): 'bar' is not a valid email address.\" on &lt;ATEvent at /plone/portal_factory/Event/event... used for /plone&gt;:\n{}...\n&gt;&gt;&gt; log_handler.clear()\n</pre>\n</blockquote>\n<p>Open a browser and log in as a normal user.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; browser = Browser()\n&gt;&gt;&gt; browser.handleErrors = False\n&gt;&gt;&gt; browser.open(portal.absolute_url())\n&gt;&gt;&gt; browser.getLink('Log in').click()\n&gt;&gt;&gt; browser.getControl('Login Name').value = ptc.default_user\n&gt;&gt;&gt; browser.getControl(\n...     'Password').value = ptc.default_password\n&gt;&gt;&gt; browser.getControl('Log in').click()\n</pre>\n</blockquote>\n<p>The normal use still cannot add an event with invalid field values.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; browser.open(self.folder.absolute_url())\n&gt;&gt;&gt; browser.getLink(url='Event').click()\n&gt;&gt;&gt; browser.getControl('Event URL').value = 'foo'\n&gt;&gt;&gt; browser.getControl('Contact E-mail').value = 'bar'\n&gt;&gt;&gt; browser.getControl('Save').click()\n&gt;&gt;&gt; print browser.contents\n&lt;...\n            &lt;dd&gt;Please correct the indicated errors.&lt;/dd&gt;...\n          &lt;div class=\"fieldErrorBox\"&gt;Title is required, please correct.&lt;/div&gt;...\n          &lt;div class=\"fieldErrorBox\"&gt;Validation failed(isURL): 'foo' is not a valid url.&lt;/div&gt;...\n          &lt;div class=\"fieldErrorBox\"&gt;Validation failed(isEmail): 'bar' is not a valid email address.&lt;/div&gt;...\n</pre>\n</blockquote>\n<p>No validation errors have been logged.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; for record in log_handler.records:\n...     print record.getMessage()\n</pre>\n</blockquote>\n<p>Set the \u2018validation_override_permission\u2019 field attribute to a\npermission the normal user has.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from Products.ATContentTypes.content import event\n&gt;&gt;&gt; schema = event.ATEvent.schema\n&gt;&gt;&gt; schema['title'].validation_override_permission = (\n...     \"Modify portal content\")\n&gt;&gt;&gt; schema['eventUrl'].validation_override_permission = (\n...     \"Modify portal content\")\n&gt;&gt;&gt; schema['contactEmail'].validation_override_permission = (\n...     \"Modify portal content\")\n</pre>\n</blockquote>\n<p>Now the user can successfully add an event with invalid field values.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; browser.open(self.folder.absolute_url())\n&gt;&gt;&gt; browser.getLink(url='Event').click()\n&gt;&gt;&gt; browser.getControl('Event URL').value = 'foo'\n&gt;&gt;&gt; browser.getControl('Contact E-mail').value = 'bar'\n&gt;&gt;&gt; browser.getControl('Save').click()\n&gt;&gt;&gt; print browser.contents\n&lt;...\n            &lt;dd&gt;Changes saved.&lt;/dd&gt;...\n                        &lt;a href=\"&amp;#0109;ailto&amp;#0058;bar\" class=\"email fn\"&gt;bar&lt;/a&gt;...\n            &lt;a class=\"url\" href=\"foo\"...\n</pre>\n</blockquote>\n<p>All omitted validation errors have been logged.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; for record in log_handler.records:\n...     print record.getMessage()\nOverriding the validation result u'Title is required, please correct.' on &lt;ATEvent at /plone/Members/test_user_1_/portal_factory/Event/event... used for /plone/Members/test_user_1_&gt;:\n{'title': u'Title is required, please correct.'}\nOverriding the validation result u\"Validation failed(isURL): 'foo' is not a valid url.\" on &lt;ATEvent at /plone/Members/test_user_1_/portal_factory/Event/event... used for /plone/Members/test_user_1_&gt;:\n{}\nOverriding the validation result u\"Validation failed(isEmail): 'bar' is not a valid email address.\" on &lt;ATEvent at /plone/Members/test_user_1_/portal_factory/Event/event... used for /plone/Members/test_user_1_&gt;:\n{}...\n&gt;&gt;&gt; log_handler.clear()\n</pre>\n</blockquote>\n<div id=\"changelog\">\n<h3>Changelog</h3>\n</div>\n</div>\n<div id=\"id1\">\n<h2>0.1 - 2009-11-12</h2>\n<ul>\n<li>Initial release</li>\n</ul>\n<div id=\"todo\">\n<h3>TODO</h3>\n</div>\n</div>\n\n          </div>"}, "last_serial": 845335, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "28edb9891fe4e6e234aa8c8204980976", "sha256": "e9c447f0ca0c8c93fafd59e672d2af5de0159bb87f3ac528493dcb0209a330b2"}, "downloads": -1, "filename": "collective.validationoverride-0.1.tar.gz", "has_sig": false, "md5_digest": "28edb9891fe4e6e234aa8c8204980976", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6329, "upload_time": "2009-11-12T23:47:41", "upload_time_iso_8601": "2009-11-12T23:47:41.033014Z", "url": "https://files.pythonhosted.org/packages/84/f6/b6bfe01a0523de5c0d7fd9c00beab7f8f8a70ed74a2a57af92277886626d/collective.validationoverride-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "28edb9891fe4e6e234aa8c8204980976", "sha256": "e9c447f0ca0c8c93fafd59e672d2af5de0159bb87f3ac528493dcb0209a330b2"}, "downloads": -1, "filename": "collective.validationoverride-0.1.tar.gz", "has_sig": false, "md5_digest": "28edb9891fe4e6e234aa8c8204980976", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6329, "upload_time": "2009-11-12T23:47:41", "upload_time_iso_8601": "2009-11-12T23:47:41.033014Z", "url": "https://files.pythonhosted.org/packages/84/f6/b6bfe01a0523de5c0d7fd9c00beab7f8f8a70ed74a2a57af92277886626d/collective.validationoverride-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:44 2020"}