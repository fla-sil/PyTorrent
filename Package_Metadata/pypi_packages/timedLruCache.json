{"info": {"author": "Samuel James", "author_email": "samuelvarejames@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3"], "description": "timed-lru-cache\n===============\n\nA time constraint LRUCache Implementation\n\nInstallation\n~~~~~~~~~~~~\n\n``pip install timedLruCache``\n\nSummary\n~~~~~~~\n\nThe timed LRUCache is a dict-like container that is also size limited.\nIt uses the prune method when instantiated with time to remove time\nexpired objects.\n\nExample\n~~~~~~~\n\nSimple LRUCache\n^^^^^^^^^^^^^^^\n\n.. code:: python\n\n   from lrucache.lru_cache import LRUCache\n\n   lru = LRUCache(maxSize=4)\n   lru.insert_key_value(\"a\", 99)\n\n   lru.insert_key_value(\"b\", 202)\n   lru[\"c\"] = 203\n   lru[\"d\"] = 204\n   lru[\"e\"] = 205\n\n   lru.get_value(\"a\")\n   lru.get(\"a\", None)\n\n   print(lru)\n   print(lru.values())\n\n   # LRUCache(timeout=None, size=4, data={'b': 202, 'c': 203, 'd': 204, 'e': 205})\n   # [202, 203, 204, 205]\n\n   # insert into lrucache\n   lru.insert_key_value(\"j\", 302)\n   # or\n   lru[\"k\"] = 403\n\n   # retrieve from the lrucache\n   lru.get_value(\"z\")\n   # or\n   lru.get(\"z\", None)\n\n   # delete from the lrucache\n   lru.delete_key(\"z\")\n   # or\n   lru.pop(\"z\", None)\n\nTest memoization: Sample use with the decorator\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n   from lrucache.lru_cache import LRUCache\n   from lrucache.memoize_decorator import memoized_cache\n\n   @memoized_cache(cache=LRUCache(maxSize=5))\n   def get_random(max_value):\n       import random\n       return random.random() * max_value\n\n   print(get_random(1)) # 0.6869437097681024\n   print(get_random(1)) # 0.6869437097681024\n   print(get_random(3)) # 1.2792457326076399\n   print(get_random(4)) # 1.9216226691107239\n   print(get_random(5)) # 3.442601057826532\n   print(get_random(5)) # 3.442601057826532\n   print(get_random(7)) # 0.6831533160972438\n   print(get_random(8)) # 7.40200570325546\n   print(get_random(1)) # 0.37636284785825047\n\n\n   print(get_random.misses)\n   # => 7\n   print(get_random.hits)\n   # => 2\n\n   # cache info\n   get_random.cache_info()\n   # => memoized_cache(hits=2, misses=7, maxsize=5, currsize=5)\n\n   # check the cache stored key, value, items pairs\n   print(get_random.cache.keys())\n   # => dict_keys([-5205072475343462643, 8575776084210548143, -2238842041537299568, -8811688270097994377, 2613783748954017437])\n\n   print(get_random.cache.values())\n   # => [1.9216226691107239, 3.442601057826532, 0.6831533160972438, 7.40200570325546, 0.37636284785825047]\n\n   print(get_random.cache.items())\n   # => [\n   #     (-5205072475343462643, 1.9216226691107239), (8575776084210548143, 3.442601057826532), \n   #     (-2238842041537299568, 0.6831533160972438), (-8811688270097994377, 7.40200570325546), \n   #     (2613783748954017437, 0.37636284785825047)\n   # ]\n\n\n   # Simple report on performance\n   # check report before get_random.reset() \n   report = f'Hit %: {(float(get_random.hits) / (get_random.hits + get_random.misses))}'\n   print(report)\n   # => Hit %: 0.2222222222222222\n\n   # reset hits and misses count to zero.\n   get_random.reset()\n\nTest time constraint\n^^^^^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n   from time import sleep\n   from lrucache.lru_cache import LRUCache\n\n   timed_lru = LRUCache(maxSize=4, timeout=10)\n\n   timed_lru[\"a\"] = 202\n   timed_lru[\"b\"] = 203\n   timed_lru[\"c\"] = 204\n   timed_lru[\"d\"] = 205\n   timed_lru[\"e\"] = 206\n\n   # cache size remains 4, after inserting 5 items into cache.\n   print(timed_lru) # LRUCache(timeout=10, size=4, data={'b': 203, 'c': 204, 'd': 205, 'e': 206})\n\n   sleep(60)\n   # cache should be empty after 60s as it clears its entry after 10s (timeout)\n   timed_lru[\"d\"] = 203\n   timed_lru[\"e\"] = 204\n   timed_lru[\"f\"] = 205\n   timed_lru[\"g\"] = 206\n   timed_lru[\"h\"] = 207\n\n   # cache now has new entries\n   print(timed_lru) # LRUCache(timeout=10, size=4, data={'e': 204, 'f': 205, 'g': 206, 'h': 207})\n\n   sleep(30)\n   # cache entry expires after 10s and as a result we have nothing in the cache (data = {}).\n   print(timed_lru) # LRUCache(timeout=10, size=4, data={})\n   timed_lru.stop_timer()\n\nSample Usage with the decorator (maxSize and timeout)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n   @memoized_cache(cache=LRUCache(maxSize=5, timeout=5))\n   def get_random(max_value):\n       import random\n       return random.random() * max_value\n\n   get_random(1)\n   get_random(1)\n   get_random(3)\n   get_random(4)\n   get_random(5)\n   get_random(5)\n   get_random(7)\n   get_random(8)\n   get_random(1)\n\n   get_random.cache_info() # memoized_cache(hits=2, misses=7, maxsize=5, currsize=5)\n\n   print(get_random.cache.values())\n   # => [2.108203625973244, 0.2784180276772963, 3.9932738384806856, 1.2462533799577011, 0.8501249397423805]\n\n   print(get_random.cache.items()) # [(7793041093296417556, 2.108203625973244), (-5573334794002472495, 0.2784180276772963), (6169942939433972205, 3.9932738384806856), (-179359314705978364, 1.2462533799577011), (2135404498036021478, 0.8501249397423805)]\n\n   print(get_random.cache.keys())\n   # dict_keys([7793041093296417556, -5573334794002472495, 6169942939433972205, -179359314705978364, 2135404498036021478])\n\n   print(get_random.cache.values())\n   # [2.108203625973244, 0.2784180276772963, 3.9932738384806856, 1.2462533799577011, 0.8501249397423805]\n\n   sleep(20)\n   get_random.cache_info() # memoized_cache(hits=2, misses=7, maxsize=5, currsize=0)\n\n   # stop the timer\n   get_random.cache.stop_timer()", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/andela-sjames/timed-lru-cache", "keywords": "timed lru cache implementation", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "timedLruCache", "package_url": "https://pypi.org/project/timedLruCache/", "platform": "", "project_url": "https://pypi.org/project/timedLruCache/", "project_urls": {"Homepage": "https://github.com/andela-sjames/timed-lru-cache"}, "release_url": "https://pypi.org/project/timedLruCache/1.0.1/", "requires_dist": null, "requires_python": "", "summary": "A time constraint LRUCache Implementation", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A time constraint LRUCache Implementation</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p><tt>pip install timedLruCache</tt></p>\n</div>\n<div id=\"summary\">\n<h2>Summary</h2>\n<p>The timed LRUCache is a dict-like container that is also size limited.\nIt uses the prune method when instantiated with time to remove time\nexpired objects.</p>\n</div>\n<div id=\"example\">\n<h2>Example</h2>\n<div id=\"simple-lrucache\">\n<h3>Simple LRUCache</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">lrucache.lru_cache</span> <span class=\"kn\">import</span> <span class=\"n\">LRUCache</span>\n\n<span class=\"n\">lru</span> <span class=\"o\">=</span> <span class=\"n\">LRUCache</span><span class=\"p\">(</span><span class=\"n\">maxSize</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"n\">lru</span><span class=\"o\">.</span><span class=\"n\">insert_key_value</span><span class=\"p\">(</span><span class=\"s2\">\"a\"</span><span class=\"p\">,</span> <span class=\"mi\">99</span><span class=\"p\">)</span>\n\n<span class=\"n\">lru</span><span class=\"o\">.</span><span class=\"n\">insert_key_value</span><span class=\"p\">(</span><span class=\"s2\">\"b\"</span><span class=\"p\">,</span> <span class=\"mi\">202</span><span class=\"p\">)</span>\n<span class=\"n\">lru</span><span class=\"p\">[</span><span class=\"s2\">\"c\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">203</span>\n<span class=\"n\">lru</span><span class=\"p\">[</span><span class=\"s2\">\"d\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">204</span>\n<span class=\"n\">lru</span><span class=\"p\">[</span><span class=\"s2\">\"e\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">205</span>\n\n<span class=\"n\">lru</span><span class=\"o\">.</span><span class=\"n\">get_value</span><span class=\"p\">(</span><span class=\"s2\">\"a\"</span><span class=\"p\">)</span>\n<span class=\"n\">lru</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"a\"</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">lru</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">lru</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">())</span>\n\n<span class=\"c1\"># LRUCache(timeout=None, size=4, data={'b': 202, 'c': 203, 'd': 204, 'e': 205})</span>\n<span class=\"c1\"># [202, 203, 204, 205]</span>\n\n<span class=\"c1\"># insert into lrucache</span>\n<span class=\"n\">lru</span><span class=\"o\">.</span><span class=\"n\">insert_key_value</span><span class=\"p\">(</span><span class=\"s2\">\"j\"</span><span class=\"p\">,</span> <span class=\"mi\">302</span><span class=\"p\">)</span>\n<span class=\"c1\"># or</span>\n<span class=\"n\">lru</span><span class=\"p\">[</span><span class=\"s2\">\"k\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">403</span>\n\n<span class=\"c1\"># retrieve from the lrucache</span>\n<span class=\"n\">lru</span><span class=\"o\">.</span><span class=\"n\">get_value</span><span class=\"p\">(</span><span class=\"s2\">\"z\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># or</span>\n<span class=\"n\">lru</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"z\"</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># delete from the lrucache</span>\n<span class=\"n\">lru</span><span class=\"o\">.</span><span class=\"n\">delete_key</span><span class=\"p\">(</span><span class=\"s2\">\"z\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># or</span>\n<span class=\"n\">lru</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">\"z\"</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"test-memoization-sample-use-with-the-decorator\">\n<h3>Test memoization: Sample use with the decorator</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">lrucache.lru_cache</span> <span class=\"kn\">import</span> <span class=\"n\">LRUCache</span>\n<span class=\"kn\">from</span> <span class=\"nn\">lrucache.memoize_decorator</span> <span class=\"kn\">import</span> <span class=\"n\">memoized_cache</span>\n\n<span class=\"nd\">@memoized_cache</span><span class=\"p\">(</span><span class=\"n\">cache</span><span class=\"o\">=</span><span class=\"n\">LRUCache</span><span class=\"p\">(</span><span class=\"n\">maxSize</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">))</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_random</span><span class=\"p\">(</span><span class=\"n\">max_value</span><span class=\"p\">):</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">random</span>\n    <span class=\"k\">return</span> <span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">()</span> <span class=\"o\">*</span> <span class=\"n\">max_value</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">get_random</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">))</span> <span class=\"c1\"># 0.6869437097681024</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">get_random</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">))</span> <span class=\"c1\"># 0.6869437097681024</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">get_random</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">))</span> <span class=\"c1\"># 1.2792457326076399</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">get_random</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">))</span> <span class=\"c1\"># 1.9216226691107239</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">get_random</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">))</span> <span class=\"c1\"># 3.442601057826532</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">get_random</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">))</span> <span class=\"c1\"># 3.442601057826532</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">get_random</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">))</span> <span class=\"c1\"># 0.6831533160972438</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">get_random</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">))</span> <span class=\"c1\"># 7.40200570325546</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">get_random</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">))</span> <span class=\"c1\"># 0.37636284785825047</span>\n\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">get_random</span><span class=\"o\">.</span><span class=\"n\">misses</span><span class=\"p\">)</span>\n<span class=\"c1\"># =&gt; 7</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">get_random</span><span class=\"o\">.</span><span class=\"n\">hits</span><span class=\"p\">)</span>\n<span class=\"c1\"># =&gt; 2</span>\n\n<span class=\"c1\"># cache info</span>\n<span class=\"n\">get_random</span><span class=\"o\">.</span><span class=\"n\">cache_info</span><span class=\"p\">()</span>\n<span class=\"c1\"># =&gt; memoized_cache(hits=2, misses=7, maxsize=5, currsize=5)</span>\n\n<span class=\"c1\"># check the cache stored key, value, items pairs</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">get_random</span><span class=\"o\">.</span><span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())</span>\n<span class=\"c1\"># =&gt; dict_keys([-5205072475343462643, 8575776084210548143, -2238842041537299568, -8811688270097994377, 2613783748954017437])</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">get_random</span><span class=\"o\">.</span><span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">())</span>\n<span class=\"c1\"># =&gt; [1.9216226691107239, 3.442601057826532, 0.6831533160972438, 7.40200570325546, 0.37636284785825047]</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">get_random</span><span class=\"o\">.</span><span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">())</span>\n<span class=\"c1\"># =&gt; [</span>\n<span class=\"c1\">#     (-5205072475343462643, 1.9216226691107239), (8575776084210548143, 3.442601057826532),</span>\n<span class=\"c1\">#     (-2238842041537299568, 0.6831533160972438), (-8811688270097994377, 7.40200570325546),</span>\n<span class=\"c1\">#     (2613783748954017437, 0.37636284785825047)</span>\n<span class=\"c1\"># ]</span>\n\n\n<span class=\"c1\"># Simple report on performance</span>\n<span class=\"c1\"># check report before get_random.reset()</span>\n<span class=\"n\">report</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s1\">'Hit %: </span><span class=\"si\">{</span><span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">get_random</span><span class=\"o\">.</span><span class=\"n\">hits</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"n\">get_random</span><span class=\"o\">.</span><span class=\"n\">hits</span> <span class=\"o\">+</span> <span class=\"n\">get_random</span><span class=\"o\">.</span><span class=\"n\">misses</span><span class=\"p\">))</span><span class=\"si\">}</span><span class=\"s1\">'</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">report</span><span class=\"p\">)</span>\n<span class=\"c1\"># =&gt; Hit %: 0.2222222222222222</span>\n\n<span class=\"c1\"># reset hits and misses count to zero.</span>\n<span class=\"n\">get_random</span><span class=\"o\">.</span><span class=\"n\">reset</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"test-time-constraint\">\n<h3>Test time constraint</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"kn\">import</span> <span class=\"n\">sleep</span>\n<span class=\"kn\">from</span> <span class=\"nn\">lrucache.lru_cache</span> <span class=\"kn\">import</span> <span class=\"n\">LRUCache</span>\n\n<span class=\"n\">timed_lru</span> <span class=\"o\">=</span> <span class=\"n\">LRUCache</span><span class=\"p\">(</span><span class=\"n\">maxSize</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n\n<span class=\"n\">timed_lru</span><span class=\"p\">[</span><span class=\"s2\">\"a\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">202</span>\n<span class=\"n\">timed_lru</span><span class=\"p\">[</span><span class=\"s2\">\"b\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">203</span>\n<span class=\"n\">timed_lru</span><span class=\"p\">[</span><span class=\"s2\">\"c\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">204</span>\n<span class=\"n\">timed_lru</span><span class=\"p\">[</span><span class=\"s2\">\"d\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">205</span>\n<span class=\"n\">timed_lru</span><span class=\"p\">[</span><span class=\"s2\">\"e\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">206</span>\n\n<span class=\"c1\"># cache size remains 4, after inserting 5 items into cache.</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">timed_lru</span><span class=\"p\">)</span> <span class=\"c1\"># LRUCache(timeout=10, size=4, data={'b': 203, 'c': 204, 'd': 205, 'e': 206})</span>\n\n<span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">60</span><span class=\"p\">)</span>\n<span class=\"c1\"># cache should be empty after 60s as it clears its entry after 10s (timeout)</span>\n<span class=\"n\">timed_lru</span><span class=\"p\">[</span><span class=\"s2\">\"d\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">203</span>\n<span class=\"n\">timed_lru</span><span class=\"p\">[</span><span class=\"s2\">\"e\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">204</span>\n<span class=\"n\">timed_lru</span><span class=\"p\">[</span><span class=\"s2\">\"f\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">205</span>\n<span class=\"n\">timed_lru</span><span class=\"p\">[</span><span class=\"s2\">\"g\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">206</span>\n<span class=\"n\">timed_lru</span><span class=\"p\">[</span><span class=\"s2\">\"h\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">207</span>\n\n<span class=\"c1\"># cache now has new entries</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">timed_lru</span><span class=\"p\">)</span> <span class=\"c1\"># LRUCache(timeout=10, size=4, data={'e': 204, 'f': 205, 'g': 206, 'h': 207})</span>\n\n<span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n<span class=\"c1\"># cache entry expires after 10s and as a result we have nothing in the cache (data = {}).</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">timed_lru</span><span class=\"p\">)</span> <span class=\"c1\"># LRUCache(timeout=10, size=4, data={})</span>\n<span class=\"n\">timed_lru</span><span class=\"o\">.</span><span class=\"n\">stop_timer</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"sample-usage-with-the-decorator-maxsize-and-timeout\">\n<h3>Sample Usage with the decorator (maxSize and timeout)</h3>\n<pre><span class=\"nd\">@memoized_cache</span><span class=\"p\">(</span><span class=\"n\">cache</span><span class=\"o\">=</span><span class=\"n\">LRUCache</span><span class=\"p\">(</span><span class=\"n\">maxSize</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">))</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_random</span><span class=\"p\">(</span><span class=\"n\">max_value</span><span class=\"p\">):</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">random</span>\n    <span class=\"k\">return</span> <span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">()</span> <span class=\"o\">*</span> <span class=\"n\">max_value</span>\n\n<span class=\"n\">get_random</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">get_random</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">get_random</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">get_random</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"n\">get_random</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"n\">get_random</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"n\">get_random</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">)</span>\n<span class=\"n\">get_random</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">)</span>\n<span class=\"n\">get_random</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"n\">get_random</span><span class=\"o\">.</span><span class=\"n\">cache_info</span><span class=\"p\">()</span> <span class=\"c1\"># memoized_cache(hits=2, misses=7, maxsize=5, currsize=5)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">get_random</span><span class=\"o\">.</span><span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">())</span>\n<span class=\"c1\"># =&gt; [2.108203625973244, 0.2784180276772963, 3.9932738384806856, 1.2462533799577011, 0.8501249397423805]</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">get_random</span><span class=\"o\">.</span><span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">())</span> <span class=\"c1\"># [(7793041093296417556, 2.108203625973244), (-5573334794002472495, 0.2784180276772963), (6169942939433972205, 3.9932738384806856), (-179359314705978364, 1.2462533799577011), (2135404498036021478, 0.8501249397423805)]</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">get_random</span><span class=\"o\">.</span><span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())</span>\n<span class=\"c1\"># dict_keys([7793041093296417556, -5573334794002472495, 6169942939433972205, -179359314705978364, 2135404498036021478])</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">get_random</span><span class=\"o\">.</span><span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">())</span>\n<span class=\"c1\"># [2.108203625973244, 0.2784180276772963, 3.9932738384806856, 1.2462533799577011, 0.8501249397423805]</span>\n\n<span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">)</span>\n<span class=\"n\">get_random</span><span class=\"o\">.</span><span class=\"n\">cache_info</span><span class=\"p\">()</span> <span class=\"c1\"># memoized_cache(hits=2, misses=7, maxsize=5, currsize=0)</span>\n\n<span class=\"c1\"># stop the timer</span>\n<span class=\"n\">get_random</span><span class=\"o\">.</span><span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">stop_timer</span><span class=\"p\">()</span>\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 5317239, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "93c0deba1e58490aeae006a7798605ba", "sha256": "ed1fb8087d8ea4b9292c426a347be6bde04fe6cf79530cca2dc77f41f384a50b"}, "downloads": -1, "filename": "timedLruCache-1.0.0.tar.gz", "has_sig": false, "md5_digest": "93c0deba1e58490aeae006a7798605ba", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6261, "upload_time": "2019-05-25T10:15:57", "upload_time_iso_8601": "2019-05-25T10:15:57.445873Z", "url": "https://files.pythonhosted.org/packages/67/82/8806dce391a57a16c196d5354e54932403e7773ce91f339682f32be0da43/timedLruCache-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "c7c6e2dce755fcd42eed30a048e78057", "sha256": "64819a807d24dd1b598e77c95db22d4b8ccae694621e6a0a3f1f89cb51e25c37"}, "downloads": -1, "filename": "timedLruCache-1.0.1.tar.gz", "has_sig": false, "md5_digest": "c7c6e2dce755fcd42eed30a048e78057", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6269, "upload_time": "2019-05-25T20:15:26", "upload_time_iso_8601": "2019-05-25T20:15:26.230978Z", "url": "https://files.pythonhosted.org/packages/fe/ca/9f8458c74aab252d3fc3da7d3212b3fddc6145f1978632b5c4ab0ae4f5e1/timedLruCache-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c7c6e2dce755fcd42eed30a048e78057", "sha256": "64819a807d24dd1b598e77c95db22d4b8ccae694621e6a0a3f1f89cb51e25c37"}, "downloads": -1, "filename": "timedLruCache-1.0.1.tar.gz", "has_sig": false, "md5_digest": "c7c6e2dce755fcd42eed30a048e78057", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6269, "upload_time": "2019-05-25T20:15:26", "upload_time_iso_8601": "2019-05-25T20:15:26.230978Z", "url": "https://files.pythonhosted.org/packages/fe/ca/9f8458c74aab252d3fc3da7d3212b3fddc6145f1978632b5c4ab0ae4f5e1/timedLruCache-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:53:34 2020"}