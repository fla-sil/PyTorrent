{"info": {"author": "Da_Blitz", "author_email": "code@pocketnix.org", "bugtrack_url": null, "classifiers": [], "description": "Dyno\n=====\nIntro\n------\nDyno is a set of libraries for implementing fault tolerant service orientated \narchitectures based off the `Hystrix`_ library for Java from Netflix. \nInspiration has also been taken from the `Spring Python Project`_ for the JVM \nand Googles `Guice`_ project for dependency injection\n\nThe library itself is split into separate modules with no dependencies between \nany of the modules and is intended to be used in a 'mix and match' fashion, \nusing only what you need\n\nModule List\n------------\naspect.py\n  iterativly enhance a function call by passing the arguments and the return \n  value through a series of filter functions\n  \n  this is basically syntactic sugar as it could be done with decorators but has \n  seen use as a separate module in a web framework called `xing`_ to handle \n  things like automatic templating, ETAG generation and if-modified handling\n  \nbreaker.py\n  breaker allows you to install re-settable fuses or breakers in your \n  application that can be triggered to shut of requests to that function. this \n  could be used to short circuit requests to a cpu expensive function in high \n  load situations or to enable and disable features (eg in an A/B testing \n  situation or having features disabled in production until they are tested)\n  \ncache.py\n  Cache allows you to ache objects and retire them probalistically to avoid \n  dog piling of requests. instead on each request there is an (increasing) \n  chance that the function will be recalculated and the cache updated, avoiding \n  a situation where the cache expires and multiple threads end up recalculating \n  the same value\n  \nharness.py\n  harness allows you to 'pull out' any exceptions that occur and log them \n  without affecting the exception so that components Further up the call chain \n  can still intercept them.\n  \n  this can be handy if you are trying to locate a transient failure or look at \n  how often a component such as the cache or a socket connection 'errors out'\n  \ninjection.py\n  A dependency injection framework that is used for slightly different purposes \n  than a traditional dependency injection library. the goal of this library is \n  to move the construction of objects from inside the function body to the \n  function definition instead. in addition it is designed to handle the case \n  where the object construction fails by either providing a fallback value \n  such as None, or by error'ing out and raising an exception\n  \n  this makes the function more declarative and helps to enable easier testing by \n  reducing the need for mocking. in addition it can be used to declare multiple \n  'expensive' objects as dependencies (such as an open connection to a server \n  on the other side of the planet) and execute the 'construction' of all these \n  dependencies in parallel when combined with a worker pool (TODO: make a lib \n  for this)\n  \nmetrics.py\n  Provides a Metrics object that allow the recording of statistics such as the \n  latency, amount of requests in flight and the rate of exceptions for function \n  calls. modeled closely after the Hystrix equivalent and management front end\n  \nregistry.py\n  A registry for providing runtime resolution of services. this allows you to \n  put off determining 'what' until the moment you need it by not naming the \n  exact class of what you need but instead choosing a tag in the registry and \n  asking for the object it represents when you need it. this provides a unified \n  way to have your code reference something and have other (setup?) code fill in \n  these references for you (eg from a config file)\n  \n  can also be used to change the object at runtime\n  \n  this is mainly useful in situations with the dependency code above as you can \n  simply register the dependency in the registry and swap in the provider of \n  that dependency as part of your programs start up/initialization\n  \n  while it is possible to just add values to objects to modules or even class \n  definitions, using a registry allows you to not have to keep track of who \n  actually uses the registered value and having to update them all manually. in \n  the case of adding an object to a module, having a registry allows you to \n  have 'instances' of the registry which may be helpful in vhosting type \n  situations (no global registry object)\n  \nretry.py\n  This module provides a retry object which will attempt to execute the \n  supplied function multiple times BEFORE raising an exception. the exception \n  that ends up getting raised will be a Union of all the exceptions raised for \n  use with try/except blocks as well as being a instance of CompoundExeption \n  for code that is specifically written to handle multiple exceptions in a \n  single 'raise'\n  \n  this is mainly for dependency injection of things such as socket connections \n  where you may want to try and connect to the other end multiple times before \n  failing but can also be used as a decorator on an inline declared function \n  (as a pseudo anonymous function) to have that code attempted multiple times \n  (eg a database transaction) see the documentation in /docs for an example or \n  the comments in the module\n  \nservice.py\n  An attempt to pull together the Worker Pool logic described above and mix it \n  with the Metrics, Breaker and retry code in one convenient object to be used as \n  a decorator so that a dependency to a 'service' can be written as a function \n  that makes a single attempt to resolve or construct that dependency and have \n  the logic behind retrying/aborting/logging provided by the dyno library\n  \ntiming.py\n  provides a timing object that collects info on 'events' and 'intervals' and \n  can print them out for providing diagnosis information and insight as to \n  the run-time of code\n  \n  supports explicit marking of events and intervals via a start/stop mechanism \n  or with an 'with' statement\n  \n  Passing the timing object up and down the functions on a per request basis is \n  left as an exercise to the reader\n  \nutils.py\n  Various bits and ends that currently don't belong elsewhere, currently only \n  holds functions for stats generation\n\nStatus\n-------\nThis project is in its early stages and not yet in production, API changes may \nbe significant and are not guaranteed to be stable until a `v1.0`_ release. use \nat your own risk however please feel free to steal the ideas in this project\n\nNotes\n-----\n- The docstrings may be slightly wacky and have copious spelling mistakes as \n  this project was mainly written in one go while very ver tiered\n- I may have no idea what i am talking about, see above note about docstring \n  and feel free to ignore the docstring or send me a correction\n- Its not the Volts that kills you but the Amperage (or the mili-Amperage)\n  \nContact Info\n-------------\n- `Project Home page`_\n- `Chatroom (Jabber/XMPP)`_\n- `Jabber/XMPP`_\n- `Email`_\n\n.. _Hystrix: https://github.com/Netflix/Hystrix/\n.. _Spring Python Project: http://springsource.org/\n.. _Guice: http://code.google.com/p/google-guice/\n.. _xing: http://code.pocketnix.org/xing/\n.. _v1.0: http://code.pocketnix.org/dyno/tags \n\n.. _Project Home page: http://code.pocketnix.org/dyno\n.. _Chatroom (Jabber/XMPP): xmpp:code@conference.pocketnix.org\n.. _Jabber/XMPP: xmpp:dablitz@pocketnix.org\n.. _Email: mailto:code@pocketnix.org", "description_content_type": null, "docs_url": null, "download_url": "http://blitz.works/dyno/archive/tip.tar.bz2", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://blitz.works/dyno", "keywords": "DI dependency injection framework hystrix guice", "license": "MIT BSD", "maintainer": null, "maintainer_email": null, "name": "dyno", "package_url": "https://pypi.org/project/dyno/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/dyno/", "project_urls": {"Download": "http://blitz.works/dyno/archive/tip.tar.bz2", "Homepage": "http://blitz.works/dyno"}, "release_url": "https://pypi.org/project/dyno/0.2/", "requires_dist": null, "requires_python": null, "summary": "Dependency injection framework based of Netflix's Hystrix", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"intro\">\n<h2>Intro</h2>\n<p>Dyno is a set of libraries for implementing fault tolerant service orientated\narchitectures based off the <a href=\"https://github.com/Netflix/Hystrix/\" rel=\"nofollow\">Hystrix</a> library for Java from Netflix.\nInspiration has also been taken from the <a href=\"http://springsource.org/\" rel=\"nofollow\">Spring Python Project</a> for the JVM\nand Googles <a href=\"http://code.google.com/p/google-guice/\" rel=\"nofollow\">Guice</a> project for dependency injection</p>\n<p>The library itself is split into separate modules with no dependencies between\nany of the modules and is intended to be used in a \u2018mix and match\u2019 fashion,\nusing only what you need</p>\n</div>\n<div id=\"module-list\">\n<h2>Module List</h2>\n<dl>\n<dt>aspect.py</dt>\n<dd><p>iterativly enhance a function call by passing the arguments and the return\nvalue through a series of filter functions</p>\n<p>this is basically syntactic sugar as it could be done with decorators but has\nseen use as a separate module in a web framework called <a href=\"http://code.pocketnix.org/xing/\" rel=\"nofollow\">xing</a> to handle\nthings like automatic templating, ETAG generation and if-modified handling</p>\n</dd>\n<dt>breaker.py</dt>\n<dd>breaker allows you to install re-settable fuses or breakers in your\napplication that can be triggered to shut of requests to that function. this\ncould be used to short circuit requests to a cpu expensive function in high\nload situations or to enable and disable features (eg in an A/B testing\nsituation or having features disabled in production until they are tested)</dd>\n<dt>cache.py</dt>\n<dd>Cache allows you to ache objects and retire them probalistically to avoid\ndog piling of requests. instead on each request there is an (increasing)\nchance that the function will be recalculated and the cache updated, avoiding\na situation where the cache expires and multiple threads end up recalculating\nthe same value</dd>\n<dt>harness.py</dt>\n<dd><p>harness allows you to \u2018pull out\u2019 any exceptions that occur and log them\nwithout affecting the exception so that components Further up the call chain\ncan still intercept them.</p>\n<p>this can be handy if you are trying to locate a transient failure or look at\nhow often a component such as the cache or a socket connection \u2018errors out\u2019</p>\n</dd>\n<dt>injection.py</dt>\n<dd><p>A dependency injection framework that is used for slightly different purposes\nthan a traditional dependency injection library. the goal of this library is\nto move the construction of objects from inside the function body to the\nfunction definition instead. in addition it is designed to handle the case\nwhere the object construction fails by either providing a fallback value\nsuch as None, or by error\u2019ing out and raising an exception</p>\n<p>this makes the function more declarative and helps to enable easier testing by\nreducing the need for mocking. in addition it can be used to declare multiple\n\u2018expensive\u2019 objects as dependencies (such as an open connection to a server\non the other side of the planet) and execute the \u2018construction\u2019 of all these\ndependencies in parallel when combined with a worker pool (TODO: make a lib\nfor this)</p>\n</dd>\n<dt>metrics.py</dt>\n<dd>Provides a Metrics object that allow the recording of statistics such as the\nlatency, amount of requests in flight and the rate of exceptions for function\ncalls. modeled closely after the Hystrix equivalent and management front end</dd>\n<dt>registry.py</dt>\n<dd><p>A registry for providing runtime resolution of services. this allows you to\nput off determining \u2018what\u2019 until the moment you need it by not naming the\nexact class of what you need but instead choosing a tag in the registry and\nasking for the object it represents when you need it. this provides a unified\nway to have your code reference something and have other (setup?) code fill in\nthese references for you (eg from a config file)</p>\n<p>can also be used to change the object at runtime</p>\n<p>this is mainly useful in situations with the dependency code above as you can\nsimply register the dependency in the registry and swap in the provider of\nthat dependency as part of your programs start up/initialization</p>\n<p>while it is possible to just add values to objects to modules or even class\ndefinitions, using a registry allows you to not have to keep track of who\nactually uses the registered value and having to update them all manually. in\nthe case of adding an object to a module, having a registry allows you to\nhave \u2018instances\u2019 of the registry which may be helpful in vhosting type\nsituations (no global registry object)</p>\n</dd>\n<dt>retry.py</dt>\n<dd><p>This module provides a retry object which will attempt to execute the\nsupplied function multiple times BEFORE raising an exception. the exception\nthat ends up getting raised will be a Union of all the exceptions raised for\nuse with try/except blocks as well as being a instance of CompoundExeption\nfor code that is specifically written to handle multiple exceptions in a\nsingle \u2018raise\u2019</p>\n<p>this is mainly for dependency injection of things such as socket connections\nwhere you may want to try and connect to the other end multiple times before\nfailing but can also be used as a decorator on an inline declared function\n(as a pseudo anonymous function) to have that code attempted multiple times\n(eg a database transaction) see the documentation in /docs for an example or\nthe comments in the module</p>\n</dd>\n<dt>service.py</dt>\n<dd>An attempt to pull together the Worker Pool logic described above and mix it\nwith the Metrics, Breaker and retry code in one convenient object to be used as\na decorator so that a dependency to a \u2018service\u2019 can be written as a function\nthat makes a single attempt to resolve or construct that dependency and have\nthe logic behind retrying/aborting/logging provided by the dyno library</dd>\n<dt>timing.py</dt>\n<dd><p>provides a timing object that collects info on \u2018events\u2019 and \u2018intervals\u2019 and\ncan print them out for providing diagnosis information and insight as to\nthe run-time of code</p>\n<p>supports explicit marking of events and intervals via a start/stop mechanism\nor with an \u2018with\u2019 statement</p>\n<p>Passing the timing object up and down the functions on a per request basis is\nleft as an exercise to the reader</p>\n</dd>\n<dt>utils.py</dt>\n<dd>Various bits and ends that currently don\u2019t belong elsewhere, currently only\nholds functions for stats generation</dd>\n</dl>\n</div>\n<div id=\"status\">\n<h2>Status</h2>\n<p>This project is in its early stages and not yet in production, API changes may\nbe significant and are not guaranteed to be stable until a <a href=\"http://code.pocketnix.org/dyno/tags\" rel=\"nofollow\">v1.0</a> release. use\nat your own risk however please feel free to steal the ideas in this project</p>\n</div>\n<div id=\"notes\">\n<h2>Notes</h2>\n<ul>\n<li>The docstrings may be slightly wacky and have copious spelling mistakes as\nthis project was mainly written in one go while very ver tiered</li>\n<li>I may have no idea what i am talking about, see above note about docstring\nand feel free to ignore the docstring or send me a correction</li>\n<li>Its not the Volts that kills you but the Amperage (or the mili-Amperage)</li>\n</ul>\n</div>\n<div id=\"contact-info\">\n<h2>Contact Info</h2>\n<ul>\n<li><a href=\"http://code.pocketnix.org/dyno\" rel=\"nofollow\">Project Home page</a></li>\n<li><a>Chatroom (Jabber/XMPP)</a></li>\n<li><a>Jabber/XMPP</a></li>\n<li><a href=\"mailto:code%40pocketnix.org\">Email</a></li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 1111240, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "3017ff655e6bc3806c8d9d3f40f7eeb6", "sha256": "5b159667841c92a825ca2323e09fbad2084d192d0424da6c7d98fdcfe73c03f2"}, "downloads": -1, "filename": "dyno-0.1.tar.gz", "has_sig": false, "md5_digest": "3017ff655e6bc3806c8d9d3f40f7eeb6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17077, "upload_time": "2013-03-23T15:05:29", "upload_time_iso_8601": "2013-03-23T15:05:29.806275Z", "url": "https://files.pythonhosted.org/packages/38/83/af8175eff8746e97687967374c7c0d75bb7ec37bf3954083ee40d9f433f3/dyno-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "05432bd646a045034a5a57a46840b055", "sha256": "181368b3cd798c807c02e160b1beaa76fc1193f9a6bce5e370c68bbae66057b1"}, "downloads": -1, "filename": "dyno-0.2.tar.gz", "has_sig": false, "md5_digest": "05432bd646a045034a5a57a46840b055", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17051, "upload_time": "2013-03-23T15:11:50", "upload_time_iso_8601": "2013-03-23T15:11:50.724742Z", "url": "https://files.pythonhosted.org/packages/ab/99/3fda3101aefc382eb0c995129a17d1c2df62f4e09b7d00bdf33119f15168/dyno-0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "05432bd646a045034a5a57a46840b055", "sha256": "181368b3cd798c807c02e160b1beaa76fc1193f9a6bce5e370c68bbae66057b1"}, "downloads": -1, "filename": "dyno-0.2.tar.gz", "has_sig": false, "md5_digest": "05432bd646a045034a5a57a46840b055", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17051, "upload_time": "2013-03-23T15:11:50", "upload_time_iso_8601": "2013-03-23T15:11:50.724742Z", "url": "https://files.pythonhosted.org/packages/ab/99/3fda3101aefc382eb0c995129a17d1c2df62f4e09b7d00bdf33119f15168/dyno-0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:48:37 2020"}