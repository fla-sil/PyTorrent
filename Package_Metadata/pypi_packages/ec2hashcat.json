{"info": {"author": "Will Boyce", "author_email": "me@willboyce.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "License :: OSI Approved :: Apache Software License", "Operating System :: MacOS :: MacOS X", "Operating System :: POSIX", "Programming Language :: Python :: 2.7", "Topic :: Security"], "description": "ec2hashcat\n==========\n\nPassword Cracking in the Cloud\n\n``ec2hashcat`` is a utility to automate the process of password cracking on the AWS Cloud using GPU Instances.\n\n\nInstallation\n------------\n\n::\n\n    % pip install ec2hashcat\n\nThats it!\n\n\nConfiguration\n--------------\n\nAll arguments beginning with ``--`` can be specified in ``~/.ec2hashcat.yml`` and ``$PWD/ec2hashcat.yml``\n\n.. code:: yaml\n\n    aws-key: AWS_KEY\n    aws-secret: AWS_SECRET\n    aws-region: AWS_REGION\n\n    ec2-key-name: EC2_KEY_NAME\n    ec2-key-file: EC2_KEY_FILE\n\n    s3-bucket: S3_BUCKET_NAME\n\n\nUsage\n-----\n\nFor more information, check the online help::\n\n    % ec2hashcat --help\n    % ec2hashcat <command> --help\n\nExample\n~~~~~~~\n\nA working example using the provided sample files::\n\n    % ec2hashcat crack -b examples/batch.ec2\n    % ec2hashcat list sessions\n    % ec2hashcat list files\n    % ec2hashcat cat wordlists hashlist.dic\n    % ec2hashcat get wordlists hashlist.dic\n    % ec2hashcat delete dumps hashlist.dmp\n\nCracking\n~~~~~~~~\n\nHandles the uploading/downloading of files to/from S3/EC2, starting/stopping of instances and running ``cudaHashcat``.\n\nBasic usage is very similar to the ``hashcat`` family of programs::\n\n    % ec2hashcat crack -a3 -m0 <hashlist> <mask>\n    % ec2hashcat crack -a0 -m0 <hashlist> <wordlist>\n    % ec2hashcat crack -a0 -m0 -r <rulesfile> <hashlist> <wordlist>\n\nAny arguments not directly handled by ``ec2hashcat`` can be passed to ``cudaHashcat`` using the ``--hashcat-args`` argument::\n\n    % ec2hashcat crack -a3 -m0 --hashcat-args='--increment' <hashlist> <mask>\n\n``ec2hashcat`` will attempt to detect any filenames passed via ``--hashcat-args`` and handle them appropriatly.\n\nWhen using the ``--rules`` argument, ``ec2hashcat`` will store any custom rules in S3 and exposes access to the builtin rules using the ``builtin:`` keyword::\n\n    % ec2hashcat crack -a0 -m0 -r builtin:<rulesfile> <hashlist> <wordlist>\n\nBy default ``crack`` will write an updated ``hashlist``, ``dump``, and ``wordlist`` to S3, you can use the ``--no-write-hashlists``, ``--no-write-dumps``, and ``--no-write-wordlists`` arguments respectively.\n\nOnce the main ``crack`` task has completed and any files updated, the machine will be shut down. To keep the instance alive, use the ``--no-shutdown`` argument. Additionally, to drop into a shell once the task has completed, used the ``--shell`` argument. Note that dropping into a shell will block the shutdown until the shell is exited.\n\n``crack`` can also operate in a batch mode, combining multiple attacks into a single session. The batchfile is specified using the ``--batchfile`` argument, and follows the same rules as script name in ``runscript``::\n\n    % ec2hashcat crack -b+\n    batch> crack -a3 -m0 <hashlist> <mask>\n    batch> crack -a0 -m0 <hashlist> <wordlist>\n\n    % cat <<EOF | ec2hashcat -b-\n    crack -a3 -m0 <hashlist> <mask>\n    crack -a0 -m0 <hashlist> <wordlist>\n\n    % cat batch.ec2\n    #!/usr/bin/env ec2hashcat -b\n    crack -a3 -m0 <hashlist> <mask>\n    crack -a0 -m0 <hashlist> <wordlist>\n    % ec2hashcat crack -b ./batch.ec2\n    % ./batch.ec2\n\nFor more information on hashcat usage, see `the hashcat wiki`_.\n\n.. _the hashcat wiki: http://hashcat.net/wiki/\n\nRunning Scripts\n~~~~~~~~~~~~~~~\n\nArbitrary scripts can be run against new or running sessions by following similar syntax to ``crack``. Scripts are executed inside a screen named after the local filename.\n\nRun a script on a new instance::\n\n    % ec2hashcat runscript <script>\n\nIf the provided ``script`` is ``-`` the script contents will be read from ``STDIN`` and if ``script`` is ``+`` the contents will be promted for.\n\nRun a script on an existing instance (as with ``crack``, the ``--use-instance`` flag implies ``--no-shutdown``)::\n\n    % ec2hashcat runscript -i <session-name> <script>\n\nThe ``--no-attach``, ``--shell``, and ``--no-shutdown`` arguments can be used as with the ``crack`` command.\n\nSpot Prices\n~~~~~~~~~~~\n\nBy default, ``ec2hashcat`` will place a bid at the average price in your selected region.\n\nTo check the spot current instance prices::\n\n    % ec2hashcat list prices\n\nFile Handling\n~~~~~~~~~~~~~\n\n``ec2hashcat`` stores all files in S3 and offers ``delete``, ``get``, ``list``, and ``put`` commands for manipulating them.\nThere are 4 types of file: ``dumps``, ``hashlists``, ``rules``, and ``wordlists``.\n\nShow all files::\n\n    % ec2hashcat list files\n\nShow all files of a specific type::\n\n    % ec2hashcat list <type>\n\nDownload a specific file::\n\n    % ec2hashcat get <type> <name>\n\nDownload all wordlists; this will download all wordlists into the current directory::\n\n    % ec2hashcat get wordlists\n\nDownload all wordlists and merge into a single wordlist with a specified filename::\n\n    % ec2hashcat get wordlists --merge --outfile=master.lst\n\nCat a file::\n\n    % ec2hashcat cat <type> <name>\n\nDelete all files of a specified type (prompting for each file)::\n\n    % ec2hashcat delete <type>\n\nDelete all files of a specified type without prompting::\n\n    % ec2hashcat delete -f <type>\n\nDelete the specified files without prompting::\n\n    % ec2hashcat delete <type> <file> <file> ...\n\nDelete the specified files (prompting for each file)::\n\n    % ec2hashcat delete -i <type> <file> <file> ...\n\nSession Handling\n~~~~~~~~~~~~~~~~\n\nThe session name can be specified by using the ``-s`` or ``--session-name`` argument to the ``crack`` and ``runscript`` commands.\n\nList all active sessions::\n\n    % ec2hashcat list sessions\n\nAttaching to a running ``crack`` session::\n\n    % ec2hashcat crack ... <hashlist>\n    % ec2hashcat attach <hashlist>\n\nAttaching to a running ``runscript`` session::\n\n    % ec2hashcat runscript ... <script>\n    % ec2hashcat attach -n <script> <script>\n\nSessions can be attached via the session name or the instance ID::\n\n    % ec2hashcat attach <instance-id>\n    % ec2hashcat attach <session-name>\n\nAlternatively, a shell can be opened on the instance using the same syntax as ``attach``::\n\n    % ec2hashcat shell <instance-id>\n    % ec2hashcat shell <session-name>\n\nTerminating an instance, giving it a chance to commit work to S3::\n\n    % ec2hashcat stop <instance-id>\n    % ec2hashcat stop <session-name>\n\nThe ``--force`` flag can be used to initiate immediate termination::\n\n    % ec2hashcat stop -f <instance-id>\n    % ec2hashcat stop -f <session-name>\n\nSecurity Groups\n~~~~~~~~~~~~~~~\n\nManages inbound rules on port 22 for the specified Security Group\n\nView the current allowed masks::\n\n    % ec2hashcat secgrp show\n\nAdd the current external IP address::\n\n    % ec2hashcat secgrp add\n\nAdd a specified mask::\n\n    % ec2hashcat secgrp add <mask>\n\nDelete a specified mask::\n\n    % ec2hashcat secgrp del <mask>\n\nDelete all masks::\n\n    % ec2hashcat secgrp del -a\n\n\nBenchmarks\n----------\n\nBenchmarks for the g2.8xlarge instance type, which is generally available for around $0.50/h, are available here_.\n\n.. _here: https://github.com/wrboyce/ec2hashcat/blob/master/benchmarks.txt\n\n\nKnown Issues\n------------\n\n- spaces in filenames were an afterthought, for now assume the world will end if you have spaces\n- the required AMI is only available in us-east-1 and eu-west-1, if you need another region `open an issue`_.\n\n.. _open an issue: https://github.com/wrboyce/ec2hashcat/issues/new", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://www.github.com/wrboyce/ec2hashcat", "keywords": null, "license": "License :: OSI Approved :: Apache Software License", "maintainer": null, "maintainer_email": null, "name": "ec2hashcat", "package_url": "https://pypi.org/project/ec2hashcat/", "platform": "Operating System :: MacOS :: MacOS X,Operating System :: POSIX", "project_url": "https://pypi.org/project/ec2hashcat/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://www.github.com/wrboyce/ec2hashcat"}, "release_url": "https://pypi.org/project/ec2hashcat/1.0.2/", "requires_dist": null, "requires_python": null, "summary": "Password Cracking in the Cloud", "version": "1.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Password Cracking in the Cloud</p>\n<p><tt>ec2hashcat</tt> is a utility to automate the process of password cracking on the AWS Cloud using GPU Instances.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>% pip install ec2hashcat\n</pre>\n<p>Thats it!</p>\n</div>\n<div id=\"configuration\">\n<h2>Configuration</h2>\n<p>All arguments beginning with <tt><span class=\"pre\">--</span></tt> can be specified in <tt><span class=\"pre\">~/.ec2hashcat.yml</span></tt> and <tt>$PWD/ec2hashcat.yml</tt></p>\n<pre><span class=\"nt\">aws-key</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">AWS_KEY</span>\n<span class=\"nt\">aws-secret</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">AWS_SECRET</span>\n<span class=\"nt\">aws-region</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">AWS_REGION</span>\n\n<span class=\"nt\">ec2-key-name</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">EC2_KEY_NAME</span>\n<span class=\"nt\">ec2-key-file</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">EC2_KEY_FILE</span>\n\n<span class=\"nt\">s3-bucket</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">S3_BUCKET_NAME</span>\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>For more information, check the online help:</p>\n<pre>% ec2hashcat --help\n% ec2hashcat &lt;command&gt; --help\n</pre>\n<div id=\"example\">\n<h3>Example</h3>\n<p>A working example using the provided sample files:</p>\n<pre>% ec2hashcat crack -b examples/batch.ec2\n% ec2hashcat list sessions\n% ec2hashcat list files\n% ec2hashcat cat wordlists hashlist.dic\n% ec2hashcat get wordlists hashlist.dic\n% ec2hashcat delete dumps hashlist.dmp\n</pre>\n</div>\n<div id=\"cracking\">\n<h3>Cracking</h3>\n<p>Handles the uploading/downloading of files to/from S3/EC2, starting/stopping of instances and running <tt>cudaHashcat</tt>.</p>\n<p>Basic usage is very similar to the <tt>hashcat</tt> family of programs:</p>\n<pre>% ec2hashcat crack -a3 -m0 &lt;hashlist&gt; &lt;mask&gt;\n% ec2hashcat crack -a0 -m0 &lt;hashlist&gt; &lt;wordlist&gt;\n% ec2hashcat crack -a0 -m0 -r &lt;rulesfile&gt; &lt;hashlist&gt; &lt;wordlist&gt;\n</pre>\n<p>Any arguments not directly handled by <tt>ec2hashcat</tt> can be passed to <tt>cudaHashcat</tt> using the <tt><span class=\"pre\">--hashcat-args</span></tt> argument:</p>\n<pre>% ec2hashcat crack -a3 -m0 --hashcat-args='--increment' &lt;hashlist&gt; &lt;mask&gt;\n</pre>\n<p><tt>ec2hashcat</tt> will attempt to detect any filenames passed via <tt><span class=\"pre\">--hashcat-args</span></tt> and handle them appropriatly.</p>\n<p>When using the <tt><span class=\"pre\">--rules</span></tt> argument, <tt>ec2hashcat</tt> will store any custom rules in S3 and exposes access to the builtin rules using the <tt>builtin:</tt> keyword:</p>\n<pre>% ec2hashcat crack -a0 -m0 -r builtin:&lt;rulesfile&gt; &lt;hashlist&gt; &lt;wordlist&gt;\n</pre>\n<p>By default <tt>crack</tt> will write an updated <tt>hashlist</tt>, <tt>dump</tt>, and <tt>wordlist</tt> to S3, you can use the <tt><span class=\"pre\">--no-write-hashlists</span></tt>, <tt><span class=\"pre\">--no-write-dumps</span></tt>, and <tt><span class=\"pre\">--no-write-wordlists</span></tt> arguments respectively.</p>\n<p>Once the main <tt>crack</tt> task has completed and any files updated, the machine will be shut down. To keep the instance alive, use the <tt><span class=\"pre\">--no-shutdown</span></tt> argument. Additionally, to drop into a shell once the task has completed, used the <tt><span class=\"pre\">--shell</span></tt> argument. Note that dropping into a shell will block the shutdown until the shell is exited.</p>\n<p><tt>crack</tt> can also operate in a batch mode, combining multiple attacks into a single session. The batchfile is specified using the <tt><span class=\"pre\">--batchfile</span></tt> argument, and follows the same rules as script name in <tt>runscript</tt>:</p>\n<pre>% ec2hashcat crack -b+\nbatch&gt; crack -a3 -m0 &lt;hashlist&gt; &lt;mask&gt;\nbatch&gt; crack -a0 -m0 &lt;hashlist&gt; &lt;wordlist&gt;\n\n% cat &lt;&lt;EOF | ec2hashcat -b-\ncrack -a3 -m0 &lt;hashlist&gt; &lt;mask&gt;\ncrack -a0 -m0 &lt;hashlist&gt; &lt;wordlist&gt;\n\n% cat batch.ec2\n#!/usr/bin/env ec2hashcat -b\ncrack -a3 -m0 &lt;hashlist&gt; &lt;mask&gt;\ncrack -a0 -m0 &lt;hashlist&gt; &lt;wordlist&gt;\n% ec2hashcat crack -b ./batch.ec2\n% ./batch.ec2\n</pre>\n<p>For more information on hashcat usage, see <a href=\"http://hashcat.net/wiki/\" rel=\"nofollow\">the hashcat wiki</a>.</p>\n</div>\n<div id=\"running-scripts\">\n<h3>Running Scripts</h3>\n<p>Arbitrary scripts can be run against new or running sessions by following similar syntax to <tt>crack</tt>. Scripts are executed inside a screen named after the local filename.</p>\n<p>Run a script on a new instance:</p>\n<pre>% ec2hashcat runscript &lt;script&gt;\n</pre>\n<p>If the provided <tt>script</tt> is <tt>-</tt> the script contents will be read from <tt>STDIN</tt> and if <tt>script</tt> is <tt>+</tt> the contents will be promted for.</p>\n<p>Run a script on an existing instance (as with <tt>crack</tt>, the <tt><span class=\"pre\">--use-instance</span></tt> flag implies <tt><span class=\"pre\">--no-shutdown</span></tt>):</p>\n<pre>% ec2hashcat runscript -i &lt;session-name&gt; &lt;script&gt;\n</pre>\n<p>The <tt><span class=\"pre\">--no-attach</span></tt>, <tt><span class=\"pre\">--shell</span></tt>, and <tt><span class=\"pre\">--no-shutdown</span></tt> arguments can be used as with the <tt>crack</tt> command.</p>\n</div>\n<div id=\"spot-prices\">\n<h3>Spot Prices</h3>\n<p>By default, <tt>ec2hashcat</tt> will place a bid at the average price in your selected region.</p>\n<p>To check the spot current instance prices:</p>\n<pre>% ec2hashcat list prices\n</pre>\n</div>\n<div id=\"file-handling\">\n<h3>File Handling</h3>\n<p><tt>ec2hashcat</tt> stores all files in S3 and offers <tt>delete</tt>, <tt>get</tt>, <tt>list</tt>, and <tt>put</tt> commands for manipulating them.\nThere are 4 types of file: <tt>dumps</tt>, <tt>hashlists</tt>, <tt>rules</tt>, and <tt>wordlists</tt>.</p>\n<p>Show all files:</p>\n<pre>% ec2hashcat list files\n</pre>\n<p>Show all files of a specific type:</p>\n<pre>% ec2hashcat list &lt;type&gt;\n</pre>\n<p>Download a specific file:</p>\n<pre>% ec2hashcat get &lt;type&gt; &lt;name&gt;\n</pre>\n<p>Download all wordlists; this will download all wordlists into the current directory:</p>\n<pre>% ec2hashcat get wordlists\n</pre>\n<p>Download all wordlists and merge into a single wordlist with a specified filename:</p>\n<pre>% ec2hashcat get wordlists --merge --outfile=master.lst\n</pre>\n<p>Cat a file:</p>\n<pre>% ec2hashcat cat &lt;type&gt; &lt;name&gt;\n</pre>\n<p>Delete all files of a specified type (prompting for each file):</p>\n<pre>% ec2hashcat delete &lt;type&gt;\n</pre>\n<p>Delete all files of a specified type without prompting:</p>\n<pre>% ec2hashcat delete -f &lt;type&gt;\n</pre>\n<p>Delete the specified files without prompting:</p>\n<pre>% ec2hashcat delete &lt;type&gt; &lt;file&gt; &lt;file&gt; ...\n</pre>\n<p>Delete the specified files (prompting for each file):</p>\n<pre>% ec2hashcat delete -i &lt;type&gt; &lt;file&gt; &lt;file&gt; ...\n</pre>\n</div>\n<div id=\"session-handling\">\n<h3>Session Handling</h3>\n<p>The session name can be specified by using the <tt><span class=\"pre\">-s</span></tt> or <tt><span class=\"pre\">--session-name</span></tt> argument to the <tt>crack</tt> and <tt>runscript</tt> commands.</p>\n<p>List all active sessions:</p>\n<pre>% ec2hashcat list sessions\n</pre>\n<p>Attaching to a running <tt>crack</tt> session:</p>\n<pre>% ec2hashcat crack ... &lt;hashlist&gt;\n% ec2hashcat attach &lt;hashlist&gt;\n</pre>\n<p>Attaching to a running <tt>runscript</tt> session:</p>\n<pre>% ec2hashcat runscript ... &lt;script&gt;\n% ec2hashcat attach -n &lt;script&gt; &lt;script&gt;\n</pre>\n<p>Sessions can be attached via the session name or the instance ID:</p>\n<pre>% ec2hashcat attach &lt;instance-id&gt;\n% ec2hashcat attach &lt;session-name&gt;\n</pre>\n<p>Alternatively, a shell can be opened on the instance using the same syntax as <tt>attach</tt>:</p>\n<pre>% ec2hashcat shell &lt;instance-id&gt;\n% ec2hashcat shell &lt;session-name&gt;\n</pre>\n<p>Terminating an instance, giving it a chance to commit work to S3:</p>\n<pre>% ec2hashcat stop &lt;instance-id&gt;\n% ec2hashcat stop &lt;session-name&gt;\n</pre>\n<p>The <tt><span class=\"pre\">--force</span></tt> flag can be used to initiate immediate termination:</p>\n<pre>% ec2hashcat stop -f &lt;instance-id&gt;\n% ec2hashcat stop -f &lt;session-name&gt;\n</pre>\n</div>\n<div id=\"security-groups\">\n<h3>Security Groups</h3>\n<p>Manages inbound rules on port 22 for the specified Security Group</p>\n<p>View the current allowed masks:</p>\n<pre>% ec2hashcat secgrp show\n</pre>\n<p>Add the current external IP address:</p>\n<pre>% ec2hashcat secgrp add\n</pre>\n<p>Add a specified mask:</p>\n<pre>% ec2hashcat secgrp add &lt;mask&gt;\n</pre>\n<p>Delete a specified mask:</p>\n<pre>% ec2hashcat secgrp del &lt;mask&gt;\n</pre>\n<p>Delete all masks:</p>\n<pre>% ec2hashcat secgrp del -a\n</pre>\n</div>\n</div>\n<div id=\"benchmarks\">\n<h2>Benchmarks</h2>\n<p>Benchmarks for the g2.8xlarge instance type, which is generally available for around $0.50/h, are available <a href=\"https://github.com/wrboyce/ec2hashcat/blob/master/benchmarks.txt\" rel=\"nofollow\">here</a>.</p>\n</div>\n<div id=\"known-issues\">\n<h2>Known Issues</h2>\n<ul>\n<li>spaces in filenames were an afterthought, for now assume the world will end if you have spaces</li>\n<li>the required AMI is only available in us-east-1 and eu-west-1, if you need another region <a href=\"https://github.com/wrboyce/ec2hashcat/issues/new\" rel=\"nofollow\">open an issue</a>.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 1738587, "releases": {"1.0.1": [{"comment_text": "", "digests": {"md5": "1b8189e47ede2751891fa6e7d2be68b2", "sha256": "a2218641440967cf1026e1366b9afa6ebd44111e9eb28099cb645943d61e5020"}, "downloads": -1, "filename": "ec2hashcat-1.0.1.tar.bz2", "has_sig": true, "md5_digest": "1b8189e47ede2751891fa6e7d2be68b2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21436, "upload_time": "2015-09-25T02:02:06", "upload_time_iso_8601": "2015-09-25T02:02:06.304147Z", "url": "https://files.pythonhosted.org/packages/ea/f5/677498ed64b3eea553929b07eee5956ce558ed0609112660621c9c13a769/ec2hashcat-1.0.1.tar.bz2", "yanked": false}, {"comment_text": "", "digests": {"md5": "2692886589ccb36e97a4b8796f3c6bc6", "sha256": "0db3f7bff1170ffa1b0df305744b0ba56508df20afa1d63da01cf66daa637910"}, "downloads": -1, "filename": "ec2hashcat-1.0.1.tar.gz", "has_sig": true, "md5_digest": "2692886589ccb36e97a4b8796f3c6bc6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23033, "upload_time": "2015-09-25T02:01:47", "upload_time_iso_8601": "2015-09-25T02:01:47.574111Z", "url": "https://files.pythonhosted.org/packages/8d/d7/c172473d26987c37c2dbf0a44fde2bd85894411558744c2a0f1ad4eed34d/ec2hashcat-1.0.1.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "51ff1bab0f0239ba127981d02d58e07a", "sha256": "c189e704e06542b419d5e2c1b89176596aade524422d8616a266ee423c2af463"}, "downloads": -1, "filename": "ec2hashcat-1.0.1.zip", "has_sig": true, "md5_digest": "51ff1bab0f0239ba127981d02d58e07a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35389, "upload_time": "2015-09-25T02:01:57", "upload_time_iso_8601": "2015-09-25T02:01:57.012573Z", "url": "https://files.pythonhosted.org/packages/81/5b/923ab12e181e7cd356f78f9bb0b1737c5831faa8b5218dca2febec7adefc/ec2hashcat-1.0.1.zip", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "5fcd00efca02893d0c80d126ce3fbf2a", "sha256": "f68d4d32c34594a1a9ea0c0d4e6d484f07fb2fa8fa1e8a75255f57384be58736"}, "downloads": -1, "filename": "ec2hashcat-1.0.2.tar.bz2", "has_sig": true, "md5_digest": "5fcd00efca02893d0c80d126ce3fbf2a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21597, "upload_time": "2015-09-25T15:43:35", "upload_time_iso_8601": "2015-09-25T15:43:35.379537Z", "url": "https://files.pythonhosted.org/packages/aa/fe/56a76cc5374701dc2ef53f4f1c503fef9d505741eb41e82885e6195dcd4f/ec2hashcat-1.0.2.tar.bz2", "yanked": false}, {"comment_text": "", "digests": {"md5": "b07e8d1a181fbd2b7d5f5bbc5d2af569", "sha256": "7944cd4532dec1053eb9240ad9f08ccb17a40c4ea522db507236f73b5bb16631"}, "downloads": -1, "filename": "ec2hashcat-1.0.2.tar.gz", "has_sig": true, "md5_digest": "b07e8d1a181fbd2b7d5f5bbc5d2af569", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23171, "upload_time": "2015-09-25T15:43:16", "upload_time_iso_8601": "2015-09-25T15:43:16.928507Z", "url": "https://files.pythonhosted.org/packages/23/30/2c1af000e455202576efcec28f0f1f9bc6f563b26ea242c68250845de0b7/ec2hashcat-1.0.2.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "bea9c6475c58de0b9ff4d35d05108e38", "sha256": "6e5e9f77fa0b25b1bd95bcb9e1eea1af59e5b90a568a8a39b47d6a06f1452165"}, "downloads": -1, "filename": "ec2hashcat-1.0.2.zip", "has_sig": true, "md5_digest": "bea9c6475c58de0b9ff4d35d05108e38", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35685, "upload_time": "2015-09-25T15:43:27", "upload_time_iso_8601": "2015-09-25T15:43:27.650501Z", "url": "https://files.pythonhosted.org/packages/64/e8/5e0101e7f0e4e1891d2adcfdc6af5acf827e1d24a6baf0726e06162c54a2/ec2hashcat-1.0.2.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5fcd00efca02893d0c80d126ce3fbf2a", "sha256": "f68d4d32c34594a1a9ea0c0d4e6d484f07fb2fa8fa1e8a75255f57384be58736"}, "downloads": -1, "filename": "ec2hashcat-1.0.2.tar.bz2", "has_sig": true, "md5_digest": "5fcd00efca02893d0c80d126ce3fbf2a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21597, "upload_time": "2015-09-25T15:43:35", "upload_time_iso_8601": "2015-09-25T15:43:35.379537Z", "url": "https://files.pythonhosted.org/packages/aa/fe/56a76cc5374701dc2ef53f4f1c503fef9d505741eb41e82885e6195dcd4f/ec2hashcat-1.0.2.tar.bz2", "yanked": false}, {"comment_text": "", "digests": {"md5": "b07e8d1a181fbd2b7d5f5bbc5d2af569", "sha256": "7944cd4532dec1053eb9240ad9f08ccb17a40c4ea522db507236f73b5bb16631"}, "downloads": -1, "filename": "ec2hashcat-1.0.2.tar.gz", "has_sig": true, "md5_digest": "b07e8d1a181fbd2b7d5f5bbc5d2af569", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23171, "upload_time": "2015-09-25T15:43:16", "upload_time_iso_8601": "2015-09-25T15:43:16.928507Z", "url": "https://files.pythonhosted.org/packages/23/30/2c1af000e455202576efcec28f0f1f9bc6f563b26ea242c68250845de0b7/ec2hashcat-1.0.2.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "bea9c6475c58de0b9ff4d35d05108e38", "sha256": "6e5e9f77fa0b25b1bd95bcb9e1eea1af59e5b90a568a8a39b47d6a06f1452165"}, "downloads": -1, "filename": "ec2hashcat-1.0.2.zip", "has_sig": true, "md5_digest": "bea9c6475c58de0b9ff4d35d05108e38", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35685, "upload_time": "2015-09-25T15:43:27", "upload_time_iso_8601": "2015-09-25T15:43:27.650501Z", "url": "https://files.pythonhosted.org/packages/64/e8/5e0101e7f0e4e1891d2adcfdc6af5acf827e1d24a6baf0726e06162c54a2/ec2hashcat-1.0.2.zip", "yanked": false}], "timestamp": "Fri May  8 00:48:06 2020"}