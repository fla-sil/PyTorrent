{"info": {"author": "Trent Hauck", "author_email": "trent@trenthauck.com", "bugtrack_url": null, "classifiers": [], "description": "==============\nProjectManager\n==============\n\nProvides utilities and functions for managing data projects in python.  Requires\nuse of IPython and Pandas.\n\nA quick workflow example::\n    \n    import projectmanager as pm\n\n    pm.create_project(\"MyProject\")\n\n    #now if we have some some scripts to use and some data in the data folder we\n    #can load the project\n\n    pm.load_project()\n\nIntroduction\n============\n\nProjectManager's goal is to facilitate quickly loading data into the IPython\nenvironment, help to automate data munging that would need to be done at the\nstart of a session, load helper functions in, and give you a nice directory.\n\nWhat Happens When You Call create_project(\"MyProject\")\n---------------------------------------------------------\n\n``create_project(project_name = \"MyProject\", config = {})``\n\n``project_name``: This is a string that is the name of your project.\n\n``config``: This is a dict that takes configuration options.\n\nCurrent Config Options:\n  ``full_structure`` A boolean that if true creates a full folder structure.  If\n  True the folder structure outline below.  Defaults to True.\n  \n  ``packages`` A list of strings of python packages to load when\n  ``load_project()`` is called.  Defaults to empty.\n\n  ``logging`` A boolean to dictate if logging is started when\n  ``load_project()`` is called.  Defaults to False.\n\n  ``git`` A boolean to dictate if a git repo is init'd.  Defaults to False.\n\nThose options are saved into a json file called .config.json at the root of the\nproject directory.\n\nWhat Happens When You Call load_project()\n-----------------------------------------\n\n``load_project()``\n\n1.  The config is loaded into a dictionary.\n2.  Data is the ``data`` directory is loaded into the environment.  This is done\n    recursively so you can have subdirectories.  If you do, the parent folder of\n    the data file will be prepended to data file, ``folder_file``.  The plan is\n    to make the prepending optional.\n3.  Files in the ``munge`` directory are run.  This folder is where you would\n    put files necessary for preprocessing the data.\n4.  Files in the ``lib`` directory are imported.  This folder is where you would\n    put files that you would like to load as a module.\n5.  Packages specified in the config are loaded into the environment.\n6.  Logging starts\n\nFolder Structure\n----------------\nThe full structure is as follows::\n    \n    data/        : data  \n    doc/         : documentation  \n    diagnostics/ : automatically check for data issues  \n    graphs/      : graph domicile  \n    lib/         : utility functions  \n    munge/       : preprocessing scripts  \n    profiling/   : benchmark performance  \n    reports/     : reports you'll produce  \n    tests/       : tests\n    \n\nContributing\n============\nBecause this project is in such an early state I would love for anybody and\neverybody to help contribute.  I think this could be very valuable for those\nworking with python for data projets.\n\nThanks\n======\nThis project is a bit of a rip-off or port (however nice you're feeling) of\n`Project Template <http://www.projecttemplate.net>`_, which if\nyou're using R I would highly recommend.  It's fantastic.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pypi.python.org/pypi/ProjectManager/", "keywords": null, "license": "LICENSE.txt", "maintainer": null, "maintainer_email": null, "name": "ProjectManager", "package_url": "https://pypi.org/project/ProjectManager/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/ProjectManager/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://pypi.python.org/pypi/ProjectManager/"}, "release_url": "https://pypi.org/project/ProjectManager/0.1.0/", "requires_dist": null, "requires_python": null, "summary": "Project management for data analysis projects.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Provides utilities and functions for managing data projects in python.  Requires\nuse of IPython and Pandas.</p>\n<p>A quick workflow example:</p>\n<pre>import projectmanager as pm\n\npm.create_project(\"MyProject\")\n\n#now if we have some some scripts to use and some data in the data folder we\n#can load the project\n\npm.load_project()\n</pre>\n<div id=\"introduction\">\n<h2>Introduction</h2>\n<p>ProjectManager\u2019s goal is to facilitate quickly loading data into the IPython\nenvironment, help to automate data munging that would need to be done at the\nstart of a session, load helper functions in, and give you a nice directory.</p>\n<div id=\"what-happens-when-you-call-create-project-myproject\">\n<h3>What Happens When You Call create_project(\u201cMyProject\u201d)</h3>\n<p><tt>create_project(project_name = \"MyProject\", config = {})</tt></p>\n<p><tt>project_name</tt>: This is a string that is the name of your project.</p>\n<p><tt>config</tt>: This is a dict that takes configuration options.</p>\n<dl>\n<dt>Current Config Options:</dt>\n<dd><p><tt>full_structure</tt> A boolean that if true creates a full folder structure.  If\nTrue the folder structure outline below.  Defaults to True.</p>\n<p><tt>packages</tt> A list of strings of python packages to load when\n<tt>load_project()</tt> is called.  Defaults to empty.</p>\n<p><tt>logging</tt> A boolean to dictate if logging is started when\n<tt>load_project()</tt> is called.  Defaults to False.</p>\n<p><tt>git</tt> A boolean to dictate if a git repo is init\u2019d.  Defaults to False.</p>\n</dd>\n</dl>\n<p>Those options are saved into a json file called .config.json at the root of the\nproject directory.</p>\n</div>\n<div id=\"what-happens-when-you-call-load-project\">\n<h3>What Happens When You Call load_project()</h3>\n<p><tt>load_project()</tt></p>\n<ol>\n<li>The config is loaded into a dictionary.</li>\n<li>Data is the <tt>data</tt> directory is loaded into the environment.  This is done\nrecursively so you can have subdirectories.  If you do, the parent folder of\nthe data file will be prepended to data file, <tt>folder_file</tt>.  The plan is\nto make the prepending optional.</li>\n<li>Files in the <tt>munge</tt> directory are run.  This folder is where you would\nput files necessary for preprocessing the data.</li>\n<li>Files in the <tt>lib</tt> directory are imported.  This folder is where you would\nput files that you would like to load as a module.</li>\n<li>Packages specified in the config are loaded into the environment.</li>\n<li>Logging starts</li>\n</ol>\n</div>\n<div id=\"folder-structure\">\n<h3>Folder Structure</h3>\n<p>The full structure is as follows:</p>\n<pre>data/        : data\ndoc/         : documentation\ndiagnostics/ : automatically check for data issues\ngraphs/      : graph domicile\nlib/         : utility functions\nmunge/       : preprocessing scripts\nprofiling/   : benchmark performance\nreports/     : reports you'll produce\ntests/       : tests\n</pre>\n</div>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<p>Because this project is in such an early state I would love for anybody and\neverybody to help contribute.  I think this could be very valuable for those\nworking with python for data projets.</p>\n</div>\n<div id=\"thanks\">\n<h2>Thanks</h2>\n<p>This project is a bit of a rip-off or port (however nice you\u2019re feeling) of\n<a href=\"http://www.projecttemplate.net\" rel=\"nofollow\">Project Template</a>, which if\nyou\u2019re using R I would highly recommend.  It\u2019s fantastic.</p>\n</div>\n\n          </div>"}, "last_serial": 785204, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "94bb7a1ad6de57122603f0015b5bf45b", "sha256": "db1470a8b9f4d5fa47dc3bbc63e8ba817cef2daa2bbcec5b24d96e4a84c27eb0"}, "downloads": -1, "filename": "ProjectManager-0.1.0.tar.gz", "has_sig": false, "md5_digest": "94bb7a1ad6de57122603f0015b5bf45b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4113, "upload_time": "2012-06-10T03:09:16", "upload_time_iso_8601": "2012-06-10T03:09:16.671293Z", "url": "https://files.pythonhosted.org/packages/e1/ec/742b3726968f31650d506acddf34252106434b7e820e7ac894c69865c6df/ProjectManager-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "94bb7a1ad6de57122603f0015b5bf45b", "sha256": "db1470a8b9f4d5fa47dc3bbc63e8ba817cef2daa2bbcec5b24d96e4a84c27eb0"}, "downloads": -1, "filename": "ProjectManager-0.1.0.tar.gz", "has_sig": false, "md5_digest": "94bb7a1ad6de57122603f0015b5bf45b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4113, "upload_time": "2012-06-10T03:09:16", "upload_time_iso_8601": "2012-06-10T03:09:16.671293Z", "url": "https://files.pythonhosted.org/packages/e1/ec/742b3726968f31650d506acddf34252106434b7e820e7ac894c69865c6df/ProjectManager-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:17:18 2020"}