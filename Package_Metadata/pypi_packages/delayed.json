{"info": {"author": "keakon", "author_email": "keakon@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: MacOS :: MacOS X", "Operating System :: POSIX", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy"], "description": "# delayed\n[![Build status](https://travis-ci.org/yizhisec/delayed.svg?branch=master)](https://secure.travis-ci.org/yizhisec/delayed)\n[![Coverage](https://codecov.io/gh/yizhisec/delayed/branch/master/graph/badge.svg)](https://codecov.io/gh/yizhisec/delayed)\n\nDelayed is a simple but robust task queue inspired by [rq](https://python-rq.org/).\n\n## Features\n\n* Robust: all the enqueued tasks will run exactly once, even if the worker got killed at any time.\n* Clean: finished tasks (including failed) won't take the space of your Redis.\n* Distributed: workers as more as needed can run in the same time without further config.\n\n## Requirements\n\n1. Python 2.7 or later, tested on Python 2.7, 3.3 - 3.8, PyPy and PyPy3.\n2. UNIX-like systems (with os.fork() implemented, pipe capacity at least 65536 bytes), tested on Ubuntu and macOS.\n3. Redis 2.6.0 or later.\n4. Keep syncing time among all the machines of each task queue.\n\n## Getting started\n\n1. Run a redis server:\n\n    ```bash\n    $ redis-server\n    ```\n\n2. Install delayed:\n\n    ```bash\n    $ pip install delayed\n    ```\n\n3. Create a task queue:\n\n    ```python\n    import redis\n    from delayed.queue import Queue\n\n    conn = redis.Redis()\n    queue = Queue(name='default', conn=conn)\n    ```\n\n4. Three ways to enqueue a task:\n\n    * Define a task function and enqueue it:\n\n        ```python\n        from delayed.delay import delayed\n\n        delayed = delayed(queue)\n\n        @delayed()\n        def delayed_add(a, b):\n            return a + b\n\n        delayed_add.delay(1, 2)  # enqueue delayed_add\n        delayed_add.delay(1, b=2)  # same as above\n        delayed_add(1, 2)  # call it immediately\n        ```\n\n    * Directly enqueue a function:\n\n        ```python\n        from delayed.delay import delay\n\n        delay = delay(queue)\n\n        def add(a, b):\n            return a + b\n\n        delay(add)(1, 2)\n        delay(add)(1, b=2)  # same as above\n        ```\n    * Enqueue a predefined task function without importing it:\n\n        ```python\n        from delayed.task import Task\n\n        task = Task(id=None, module_name='test', func_name='add', args=(1, 2))\n        queue.enqueue(task)\n        ```\n\n5. Run a task worker (or more) in a separated process:\n\n    ```python\n    import redis\n    from delayed.queue import Queue\n    from delayed.worker import ForkedWorker\n\n    conn = redis.Redis()\n    queue = Queue(name='default', conn=conn)\n    worker = ForkedWorker(queue=queue)\n    worker.run()\n    ```\n\n6. Run a task sweeper in a separated process to recovery lost tasks (mainly due to the worker got killed):\n\n    ```python\n    import redis\n    from delayed.queue import Queue\n    from delayed.sweeper import Sweeper\n\n    conn = redis.Redis()\n    queue = Queue(name='default', conn=conn)\n    sweeper = Sweeper(queue=queue)\n    sweeper.run()\n    ```\n\n## QA\n\n1. **Q: What's the limitation on a task function?**  \nA: A task function should be defined in module level (except the `__main__` module). Its `args` and `kwargs` should be picklable.\n\n2. **Q: What's the `name` param of a queue?**  \nA: It's the key used to store the tasks of the queue. A queue with name \"default\" will use those keys:\n    * default: list, enqueued tasks.\n    * default_id: str, the next task id.\n    * default_noti: list, the same length as enqueued tasks.\n    * default_enqueued: sorted set, enqueued tasks with their timeouts.\n    * default_dequeued: sorted set, dequeued tasks with their dequeued timestamps.\n\n3. **Q: Why the worker is slow?**  \nA: The `ForkedWorker` forks a new process for each new task. So all the tasks are isolated and you won't leak memory.  \nTo reduce the overhead of forking processes and importing modules, if your task function code won't be changed in the worker's lifetime, you can switch to `PreforkedWorker`:\n\n    ```python\n    import redis\n    from delayed.queue import Queue\n    from delayed.worker import PreforkedWorker\n\n    conn = redis.Redis()\n    queue = Queue(name='default', conn=conn)\n    worker = PreforkedWorker(queue=queue)\n    worker.run()\n    ```\n\n4. **Q: How does a `ForkedWorker` run?**  \nA: It runs such a loop:\n    1. It dequeues a task from the queue periodically.\n    2. It forks a child process to run the task.\n    3. It kills the child process if the child runs out of time.\n    4. When the child process exits, it releases the task.\n\n5. **Q: How does a `PreforkedWorker` run?**  \nA: It runs such a loop:\n    1. It dequeues a task from the queue periodically.\n    2. If it has no child process, it forks a new one.\n    3. It sends the task through a pipe to the child.\n    4. It kills the child process if the child runs out of time.\n    5. When the child process exits or it received result from the pipe, it releases the task.\n\n6. **Q: How does the child process of a worker run?**  \nA: The child of a `ForkedWorker` just runs the task, unmarks the task as dequeued, then exits.\nThe child of a `PreforkedWorker` runs such a loop:\n    1. It tries to receive a task from the pipe.\n    2. If the pipe has been closed, it exits.\n    3. It runs the task.\n    4. It sends the task result to the pipe.\n    5. It releases the task.\n\n7. **Q: What's lost tasks?**  \nA: There are 2 situations a task might get lost:\n    * a worker popped a task notification, then got killed before dequeueing the task.\n    * a worker dequeued a task, then both the monitor and its child process got killed before they releasing the task.\n\n8. **Q: How to recovery lost tasks?**  \nA: Run a sweeper. It dose two things:\n    * it keeps the task notification length the same as the task queue.\n    * it moves the timeout dequeued tasks back to the task queue.\n\n9. **Q: How to set the timeout of tasks?**  \nA: You can set `default_timeout` of a queue or `timeout` of a task:\n\n    ```python\n    from delayed.delay import delay_in_time\n\n    queue = Queue('default', conn, default_timeout=60)\n\n    delayed_add.timeout(10)(1, 2)\n\n    delay_in_time = delay_in_time(queue)\n    delay_in_time(add, timeout=10)(1, 2)\n    ```\n\n10. **Q: How to enqueue a task in front of a queue?**  \nA: You can set `prior` of the task to `True`:\n\n    ```python\n    task = Task(id=None, module_name='test', func_name='add', args=(1, 2), prior=True)\n    queue.enqueue(task)\n    ```\n\n11. **Q: How to handle the finished tasks?**  \nA: Set the `success_handler` and `error_handler` of the worker. The handlers would be called in a forked process, except the forked process got killed or the monitor process raised an exception.\n\n    ```python\n    def success_handler(task):\n        logging.info('task %d finished', task.id)\n\n    def error_handler(task, kill_signal, exc_info):\n        if kill_signal:\n            logging.error('task %d got killed by signal %d', task.id, kill_signal)\n        else:\n            logging.exception('task %d failed', exc_info=exc_info)\n\n    worker = PreforkedWorker(Queue, success_handler=success_handler, error_handler=error_handler)\n    ```\n\n12. **Q: Why does sometimes both `success_handler` and `error_handler` be called for a single task?**  \nA: When the child process got killed after the `success_handler` be called, or the monitor process got killed but the child process still finished the task, both handlers would be called. You can consider it as successful.\n\n13. **Q: How to turn on the debug logs?**  \nA: Add a `logging.DEBUG` level handler to `delayed.logger.logger`. The simplest way is to call `delayed.logger.setup_logger()`:\n    ```python\n    from delayed.logger import setup_logger\n\n    setup_logger()\n    ```\n\n14. **Q: Can I enqueue and dequeue tasks in different Python versions?**  \nA: `delayed` uses the `pickle` module to serialize and deserialize tasks.\nIf `pickle.HIGHEST_PROTOCOL` is equal among all your Python runtimes, you can use it without any configurations.\nOtherwise you have to choose the lowest `pickle.HIGHEST_PROTOCOL` of all your Python runtime as the pickle protocol.\neg: If you want to enqueue a task in Python 3.7 and dequeue it in Python 2.7. Their `pickle.HIGHEST_PROTOCOL` are `4` and `2`, so you need to set the version to `2`:\n    ```python\n    from delayed.task import set_pickle_protocol_version\n\n    set_pickle_protocol_version(2)\n    ```\n\n15. **Q: Why not use JSON or MessagePack to serialize tasks?**  \nA: These serializations may confuse some types (eg: `bytes` / `str`, `list` / `tuple`).\n\n16. **Q: What will happen if I changed the pipe capacity?**  \nA: `delayed` assumes the pipe capacity is 65536 bytes (the default value on Linux and macOS).\nTo reduce syscalls, it won't check whether the pipe is writable if the length of data to be written is less than 65536.\nIf your system has a lower pipe capacity, the `PreforkedWorker` may not working well for some large task.\nTo fix it, you can set a lower value to `delayed.constants.BUF_SIZE`:\n    ```python\n    import delayed.constants\n\n    delayed.constants.BUF_SIZE = 1024\n    ```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/yizhisec/delayed", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "delayed", "package_url": "https://pypi.org/project/delayed/", "platform": "", "project_url": "https://pypi.org/project/delayed/", "project_urls": {"Homepage": "https://github.com/yizhisec/delayed"}, "release_url": "https://pypi.org/project/delayed/0.7.0b1/", "requires_dist": ["hiredis", "redis"], "requires_python": ">=2.7", "summary": "a simple but robust task queue", "version": "0.7.0b1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>delayed</h1>\n<p><a href=\"https://secure.travis-ci.org/yizhisec/delayed\" rel=\"nofollow\"><img alt=\"Build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bdc84737f3afd9a0ab7b8b019a9adc9b0e832213/68747470733a2f2f7472617669732d63692e6f72672f79697a68697365632f64656c617965642e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/yizhisec/delayed\" rel=\"nofollow\"><img alt=\"Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/07139d51263adafc04bc3e88b78905c68fccdfa5/68747470733a2f2f636f6465636f762e696f2f67682f79697a68697365632f64656c617965642f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a></p>\n<p>Delayed is a simple but robust task queue inspired by <a href=\"https://python-rq.org/\" rel=\"nofollow\">rq</a>.</p>\n<h2>Features</h2>\n<ul>\n<li>Robust: all the enqueued tasks will run exactly once, even if the worker got killed at any time.</li>\n<li>Clean: finished tasks (including failed) won't take the space of your Redis.</li>\n<li>Distributed: workers as more as needed can run in the same time without further config.</li>\n</ul>\n<h2>Requirements</h2>\n<ol>\n<li>Python 2.7 or later, tested on Python 2.7, 3.3 - 3.8, PyPy and PyPy3.</li>\n<li>UNIX-like systems (with os.fork() implemented, pipe capacity at least 65536 bytes), tested on Ubuntu and macOS.</li>\n<li>Redis 2.6.0 or later.</li>\n<li>Keep syncing time among all the machines of each task queue.</li>\n</ol>\n<h2>Getting started</h2>\n<ol>\n<li>\n<p>Run a redis server:</p>\n<pre>$ redis-server\n</pre>\n</li>\n<li>\n<p>Install delayed:</p>\n<pre>$ pip install delayed\n</pre>\n</li>\n<li>\n<p>Create a task queue:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">redis</span>\n<span class=\"kn\">from</span> <span class=\"nn\">delayed.queue</span> <span class=\"kn\">import</span> <span class=\"n\">Queue</span>\n\n<span class=\"n\">conn</span> <span class=\"o\">=</span> <span class=\"n\">redis</span><span class=\"o\">.</span><span class=\"n\">Redis</span><span class=\"p\">()</span>\n<span class=\"n\">queue</span> <span class=\"o\">=</span> <span class=\"n\">Queue</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'default'</span><span class=\"p\">,</span> <span class=\"n\">conn</span><span class=\"o\">=</span><span class=\"n\">conn</span><span class=\"p\">)</span>\n</pre>\n</li>\n<li>\n<p>Three ways to enqueue a task:</p>\n<ul>\n<li>\n<p>Define a task function and enqueue it:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">delayed.delay</span> <span class=\"kn\">import</span> <span class=\"n\">delayed</span>\n\n<span class=\"n\">delayed</span> <span class=\"o\">=</span> <span class=\"n\">delayed</span><span class=\"p\">(</span><span class=\"n\">queue</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@delayed</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">delayed_add</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span>\n\n<span class=\"n\">delayed_add</span><span class=\"o\">.</span><span class=\"n\">delay</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>  <span class=\"c1\"># enqueue delayed_add</span>\n<span class=\"n\">delayed_add</span><span class=\"o\">.</span><span class=\"n\">delay</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>  <span class=\"c1\"># same as above</span>\n<span class=\"n\">delayed_add</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>  <span class=\"c1\"># call it immediately</span>\n</pre>\n</li>\n<li>\n<p>Directly enqueue a function:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">delayed.delay</span> <span class=\"kn\">import</span> <span class=\"n\">delay</span>\n\n<span class=\"n\">delay</span> <span class=\"o\">=</span> <span class=\"n\">delay</span><span class=\"p\">(</span><span class=\"n\">queue</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span>\n\n<span class=\"n\">delay</span><span class=\"p\">(</span><span class=\"n\">add</span><span class=\"p\">)(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">delay</span><span class=\"p\">(</span><span class=\"n\">add</span><span class=\"p\">)(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>  <span class=\"c1\"># same as above</span>\n</pre>\n</li>\n<li>\n<p>Enqueue a predefined task function without importing it:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">delayed.task</span> <span class=\"kn\">import</span> <span class=\"n\">Task</span>\n\n<span class=\"n\">task</span> <span class=\"o\">=</span> <span class=\"n\">Task</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">module_name</span><span class=\"o\">=</span><span class=\"s1\">'test'</span><span class=\"p\">,</span> <span class=\"n\">func_name</span><span class=\"o\">=</span><span class=\"s1\">'add'</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">enqueue</span><span class=\"p\">(</span><span class=\"n\">task</span><span class=\"p\">)</span>\n</pre>\n</li>\n</ul>\n</li>\n<li>\n<p>Run a task worker (or more) in a separated process:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">redis</span>\n<span class=\"kn\">from</span> <span class=\"nn\">delayed.queue</span> <span class=\"kn\">import</span> <span class=\"n\">Queue</span>\n<span class=\"kn\">from</span> <span class=\"nn\">delayed.worker</span> <span class=\"kn\">import</span> <span class=\"n\">ForkedWorker</span>\n\n<span class=\"n\">conn</span> <span class=\"o\">=</span> <span class=\"n\">redis</span><span class=\"o\">.</span><span class=\"n\">Redis</span><span class=\"p\">()</span>\n<span class=\"n\">queue</span> <span class=\"o\">=</span> <span class=\"n\">Queue</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'default'</span><span class=\"p\">,</span> <span class=\"n\">conn</span><span class=\"o\">=</span><span class=\"n\">conn</span><span class=\"p\">)</span>\n<span class=\"n\">worker</span> <span class=\"o\">=</span> <span class=\"n\">ForkedWorker</span><span class=\"p\">(</span><span class=\"n\">queue</span><span class=\"o\">=</span><span class=\"n\">queue</span><span class=\"p\">)</span>\n<span class=\"n\">worker</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n</li>\n<li>\n<p>Run a task sweeper in a separated process to recovery lost tasks (mainly due to the worker got killed):</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">redis</span>\n<span class=\"kn\">from</span> <span class=\"nn\">delayed.queue</span> <span class=\"kn\">import</span> <span class=\"n\">Queue</span>\n<span class=\"kn\">from</span> <span class=\"nn\">delayed.sweeper</span> <span class=\"kn\">import</span> <span class=\"n\">Sweeper</span>\n\n<span class=\"n\">conn</span> <span class=\"o\">=</span> <span class=\"n\">redis</span><span class=\"o\">.</span><span class=\"n\">Redis</span><span class=\"p\">()</span>\n<span class=\"n\">queue</span> <span class=\"o\">=</span> <span class=\"n\">Queue</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'default'</span><span class=\"p\">,</span> <span class=\"n\">conn</span><span class=\"o\">=</span><span class=\"n\">conn</span><span class=\"p\">)</span>\n<span class=\"n\">sweeper</span> <span class=\"o\">=</span> <span class=\"n\">Sweeper</span><span class=\"p\">(</span><span class=\"n\">queue</span><span class=\"o\">=</span><span class=\"n\">queue</span><span class=\"p\">)</span>\n<span class=\"n\">sweeper</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n</li>\n</ol>\n<h2>QA</h2>\n<ol>\n<li>\n<p><strong>Q: What's the limitation on a task function?</strong><br>\nA: A task function should be defined in module level (except the <code>__main__</code> module). Its <code>args</code> and <code>kwargs</code> should be picklable.</p>\n</li>\n<li>\n<p><strong>Q: What's the <code>name</code> param of a queue?</strong><br>\nA: It's the key used to store the tasks of the queue. A queue with name \"default\" will use those keys:</p>\n<ul>\n<li>default: list, enqueued tasks.</li>\n<li>default_id: str, the next task id.</li>\n<li>default_noti: list, the same length as enqueued tasks.</li>\n<li>default_enqueued: sorted set, enqueued tasks with their timeouts.</li>\n<li>default_dequeued: sorted set, dequeued tasks with their dequeued timestamps.</li>\n</ul>\n</li>\n<li>\n<p><strong>Q: Why the worker is slow?</strong><br>\nA: The <code>ForkedWorker</code> forks a new process for each new task. So all the tasks are isolated and you won't leak memory.<br>\nTo reduce the overhead of forking processes and importing modules, if your task function code won't be changed in the worker's lifetime, you can switch to <code>PreforkedWorker</code>:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">redis</span>\n<span class=\"kn\">from</span> <span class=\"nn\">delayed.queue</span> <span class=\"kn\">import</span> <span class=\"n\">Queue</span>\n<span class=\"kn\">from</span> <span class=\"nn\">delayed.worker</span> <span class=\"kn\">import</span> <span class=\"n\">PreforkedWorker</span>\n\n<span class=\"n\">conn</span> <span class=\"o\">=</span> <span class=\"n\">redis</span><span class=\"o\">.</span><span class=\"n\">Redis</span><span class=\"p\">()</span>\n<span class=\"n\">queue</span> <span class=\"o\">=</span> <span class=\"n\">Queue</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'default'</span><span class=\"p\">,</span> <span class=\"n\">conn</span><span class=\"o\">=</span><span class=\"n\">conn</span><span class=\"p\">)</span>\n<span class=\"n\">worker</span> <span class=\"o\">=</span> <span class=\"n\">PreforkedWorker</span><span class=\"p\">(</span><span class=\"n\">queue</span><span class=\"o\">=</span><span class=\"n\">queue</span><span class=\"p\">)</span>\n<span class=\"n\">worker</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n</li>\n<li>\n<p><strong>Q: How does a <code>ForkedWorker</code> run?</strong><br>\nA: It runs such a loop:</p>\n<ol>\n<li>It dequeues a task from the queue periodically.</li>\n<li>It forks a child process to run the task.</li>\n<li>It kills the child process if the child runs out of time.</li>\n<li>When the child process exits, it releases the task.</li>\n</ol>\n</li>\n<li>\n<p><strong>Q: How does a <code>PreforkedWorker</code> run?</strong><br>\nA: It runs such a loop:</p>\n<ol>\n<li>It dequeues a task from the queue periodically.</li>\n<li>If it has no child process, it forks a new one.</li>\n<li>It sends the task through a pipe to the child.</li>\n<li>It kills the child process if the child runs out of time.</li>\n<li>When the child process exits or it received result from the pipe, it releases the task.</li>\n</ol>\n</li>\n<li>\n<p><strong>Q: How does the child process of a worker run?</strong><br>\nA: The child of a <code>ForkedWorker</code> just runs the task, unmarks the task as dequeued, then exits.\nThe child of a <code>PreforkedWorker</code> runs such a loop:</p>\n<ol>\n<li>It tries to receive a task from the pipe.</li>\n<li>If the pipe has been closed, it exits.</li>\n<li>It runs the task.</li>\n<li>It sends the task result to the pipe.</li>\n<li>It releases the task.</li>\n</ol>\n</li>\n<li>\n<p><strong>Q: What's lost tasks?</strong><br>\nA: There are 2 situations a task might get lost:</p>\n<ul>\n<li>a worker popped a task notification, then got killed before dequeueing the task.</li>\n<li>a worker dequeued a task, then both the monitor and its child process got killed before they releasing the task.</li>\n</ul>\n</li>\n<li>\n<p><strong>Q: How to recovery lost tasks?</strong><br>\nA: Run a sweeper. It dose two things:</p>\n<ul>\n<li>it keeps the task notification length the same as the task queue.</li>\n<li>it moves the timeout dequeued tasks back to the task queue.</li>\n</ul>\n</li>\n<li>\n<p><strong>Q: How to set the timeout of tasks?</strong><br>\nA: You can set <code>default_timeout</code> of a queue or <code>timeout</code> of a task:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">delayed.delay</span> <span class=\"kn\">import</span> <span class=\"n\">delay_in_time</span>\n\n<span class=\"n\">queue</span> <span class=\"o\">=</span> <span class=\"n\">Queue</span><span class=\"p\">(</span><span class=\"s1\">'default'</span><span class=\"p\">,</span> <span class=\"n\">conn</span><span class=\"p\">,</span> <span class=\"n\">default_timeout</span><span class=\"o\">=</span><span class=\"mi\">60</span><span class=\"p\">)</span>\n\n<span class=\"n\">delayed_add</span><span class=\"o\">.</span><span class=\"n\">timeout</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"n\">delay_in_time</span> <span class=\"o\">=</span> <span class=\"n\">delay_in_time</span><span class=\"p\">(</span><span class=\"n\">queue</span><span class=\"p\">)</span>\n<span class=\"n\">delay_in_time</span><span class=\"p\">(</span><span class=\"n\">add</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n</pre>\n</li>\n<li>\n<p><strong>Q: How to enqueue a task in front of a queue?</strong><br>\nA: You can set <code>prior</code> of the task to <code>True</code>:</p>\n<pre><span class=\"n\">task</span> <span class=\"o\">=</span> <span class=\"n\">Task</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">module_name</span><span class=\"o\">=</span><span class=\"s1\">'test'</span><span class=\"p\">,</span> <span class=\"n\">func_name</span><span class=\"o\">=</span><span class=\"s1\">'add'</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">prior</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">enqueue</span><span class=\"p\">(</span><span class=\"n\">task</span><span class=\"p\">)</span>\n</pre>\n</li>\n<li>\n<p><strong>Q: How to handle the finished tasks?</strong><br>\nA: Set the <code>success_handler</code> and <code>error_handler</code> of the worker. The handlers would be called in a forked process, except the forked process got killed or the monitor process raised an exception.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">success_handler</span><span class=\"p\">(</span><span class=\"n\">task</span><span class=\"p\">):</span>\n    <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s1\">'task </span><span class=\"si\">%d</span><span class=\"s1\"> finished'</span><span class=\"p\">,</span> <span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">error_handler</span><span class=\"p\">(</span><span class=\"n\">task</span><span class=\"p\">,</span> <span class=\"n\">kill_signal</span><span class=\"p\">,</span> <span class=\"n\">exc_info</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">kill_signal</span><span class=\"p\">:</span>\n        <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s1\">'task </span><span class=\"si\">%d</span><span class=\"s1\"> got killed by signal </span><span class=\"si\">%d</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"n\">kill_signal</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">exception</span><span class=\"p\">(</span><span class=\"s1\">'task </span><span class=\"si\">%d</span><span class=\"s1\"> failed'</span><span class=\"p\">,</span> <span class=\"n\">exc_info</span><span class=\"o\">=</span><span class=\"n\">exc_info</span><span class=\"p\">)</span>\n\n<span class=\"n\">worker</span> <span class=\"o\">=</span> <span class=\"n\">PreforkedWorker</span><span class=\"p\">(</span><span class=\"n\">Queue</span><span class=\"p\">,</span> <span class=\"n\">success_handler</span><span class=\"o\">=</span><span class=\"n\">success_handler</span><span class=\"p\">,</span> <span class=\"n\">error_handler</span><span class=\"o\">=</span><span class=\"n\">error_handler</span><span class=\"p\">)</span>\n</pre>\n</li>\n<li>\n<p><strong>Q: Why does sometimes both <code>success_handler</code> and <code>error_handler</code> be called for a single task?</strong><br>\nA: When the child process got killed after the <code>success_handler</code> be called, or the monitor process got killed but the child process still finished the task, both handlers would be called. You can consider it as successful.</p>\n</li>\n<li>\n<p><strong>Q: How to turn on the debug logs?</strong><br>\nA: Add a <code>logging.DEBUG</code> level handler to <code>delayed.logger.logger</code>. The simplest way is to call <code>delayed.logger.setup_logger()</code>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">delayed.logger</span> <span class=\"kn\">import</span> <span class=\"n\">setup_logger</span>\n\n<span class=\"n\">setup_logger</span><span class=\"p\">()</span>\n</pre>\n</li>\n<li>\n<p><strong>Q: Can I enqueue and dequeue tasks in different Python versions?</strong><br>\nA: <code>delayed</code> uses the <code>pickle</code> module to serialize and deserialize tasks.\nIf <code>pickle.HIGHEST_PROTOCOL</code> is equal among all your Python runtimes, you can use it without any configurations.\nOtherwise you have to choose the lowest <code>pickle.HIGHEST_PROTOCOL</code> of all your Python runtime as the pickle protocol.\neg: If you want to enqueue a task in Python 3.7 and dequeue it in Python 2.7. Their <code>pickle.HIGHEST_PROTOCOL</code> are <code>4</code> and <code>2</code>, so you need to set the version to <code>2</code>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">delayed.task</span> <span class=\"kn\">import</span> <span class=\"n\">set_pickle_protocol_version</span>\n\n<span class=\"n\">set_pickle_protocol_version</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n</pre>\n</li>\n<li>\n<p><strong>Q: Why not use JSON or MessagePack to serialize tasks?</strong><br>\nA: These serializations may confuse some types (eg: <code>bytes</code> / <code>str</code>, <code>list</code> / <code>tuple</code>).</p>\n</li>\n<li>\n<p><strong>Q: What will happen if I changed the pipe capacity?</strong><br>\nA: <code>delayed</code> assumes the pipe capacity is 65536 bytes (the default value on Linux and macOS).\nTo reduce syscalls, it won't check whether the pipe is writable if the length of data to be written is less than 65536.\nIf your system has a lower pipe capacity, the <code>PreforkedWorker</code> may not working well for some large task.\nTo fix it, you can set a lower value to <code>delayed.constants.BUF_SIZE</code>:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">delayed.constants</span>\n\n<span class=\"n\">delayed</span><span class=\"o\">.</span><span class=\"n\">constants</span><span class=\"o\">.</span><span class=\"n\">BUF_SIZE</span> <span class=\"o\">=</span> <span class=\"mi\">1024</span>\n</pre>\n</li>\n</ol>\n\n          </div>"}, "last_serial": 6580906, "releases": {"0.1.0b1": [{"comment_text": "", "digests": {"md5": "bd3e2f24eb2e29c79eff7eb1de0fc99b", "sha256": "268ed9839f808ff6905fafad2c79cbfe781b60df3722cf45a1bb9c4717019ecf"}, "downloads": -1, "filename": "delayed-0.1.0b1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "bd3e2f24eb2e29c79eff7eb1de0fc99b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7", "size": 10537, "upload_time": "2019-05-28T06:38:51", "upload_time_iso_8601": "2019-05-28T06:38:51.883414Z", "url": "https://files.pythonhosted.org/packages/5f/ac/03087f7838ffc6fad6912f8cc5bd215dff2de5b40829ecbd079f0af568bf/delayed-0.1.0b1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4bc5a6b2b26221342d6a2accf2468024", "sha256": "546376d9b94a85bd163122e3b24dcaf94221b991035545c82426fefb0ad521b2"}, "downloads": -1, "filename": "delayed-0.1.0b1.tar.gz", "has_sig": false, "md5_digest": "4bc5a6b2b26221342d6a2accf2468024", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 10619, "upload_time": "2019-05-28T06:38:54", "upload_time_iso_8601": "2019-05-28T06:38:54.236094Z", "url": "https://files.pythonhosted.org/packages/d9/82/c9e9cd30f04414ed03c669c1c8c6bd35a4295ba0967bcff0069f74376f06/delayed-0.1.0b1.tar.gz", "yanked": false}], "0.1.0b2": [{"comment_text": "", "digests": {"md5": "258024e0e5281845aa14d053477b5a3f", "sha256": "452d258fe6d40413de4c719303e8e9451b8372e33fda8b7535e41b1d9c806e43"}, "downloads": -1, "filename": "delayed-0.1.0b2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "258024e0e5281845aa14d053477b5a3f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7", "size": 10701, "upload_time": "2019-06-03T10:36:13", "upload_time_iso_8601": "2019-06-03T10:36:13.810294Z", "url": "https://files.pythonhosted.org/packages/91/a0/b74123de47b2deec93aa22656e294cef9ca53ca1efbdc4c21c3eb647d012/delayed-0.1.0b2-py2.py3-none-any.whl", "yanked": false}], "0.2.0b1": [{"comment_text": "", "digests": {"md5": "2a1c609796ee1110c0cd5dd4a6565f17", "sha256": "243e4e609450fe3c2cd6e1874173611b4327e17f07f9fda2b5ed358090769e92"}, "downloads": -1, "filename": "delayed-0.2.0b1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2a1c609796ee1110c0cd5dd4a6565f17", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7", "size": 10738, "upload_time": "2019-06-03T11:16:56", "upload_time_iso_8601": "2019-06-03T11:16:56.913706Z", "url": "https://files.pythonhosted.org/packages/e7/94/76ff5c4f4d8a719e80c8e92430496c543aaeb5340d7ff3dc7a241197400b/delayed-0.2.0b1-py2.py3-none-any.whl", "yanked": false}], "0.3.0b2": [{"comment_text": "", "digests": {"md5": "f3d10f399d0fbcd3d4fdf40d3b532e9d", "sha256": "c374a54d0da3e369302b8f352703bc3df29fb5b657d3c75f97709b03d092ab62"}, "downloads": -1, "filename": "delayed-0.3.0b2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f3d10f399d0fbcd3d4fdf40d3b532e9d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7", "size": 12513, "upload_time": "2019-07-04T01:35:48", "upload_time_iso_8601": "2019-07-04T01:35:48.578165Z", "url": "https://files.pythonhosted.org/packages/82/f6/938d4a5e10c5ed498304912f220637ecdbd4caa845b8049851024ad7c15a/delayed-0.3.0b2-py2.py3-none-any.whl", "yanked": false}], "0.3.1b1": [{"comment_text": "", "digests": {"md5": "b2c7529a450c91e21a31dc05996f6e4c", "sha256": "62a633273d4aa6db8e8ce2802bb3c908c7379376dd77ea32cfea7282a0d346a1"}, "downloads": -1, "filename": "delayed-0.3.1b1.tar.gz", "has_sig": false, "md5_digest": "b2c7529a450c91e21a31dc05996f6e4c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 13232, "upload_time": "2019-08-01T10:03:40", "upload_time_iso_8601": "2019-08-01T10:03:40.868648Z", "url": "https://files.pythonhosted.org/packages/85/ce/ac969843cfdaaecc80235233915b77ba32ea3b7257b9192c86daa74c07e1/delayed-0.3.1b1.tar.gz", "yanked": false}], "0.3.1b2": [{"comment_text": "", "digests": {"md5": "b6a1602e00b9d1594b361bc2e5f26a8f", "sha256": "f9a0d37d781706e42c893968eca77a23490c4a9a44f11f520485ce6e6a51fcb7"}, "downloads": -1, "filename": "delayed-0.3.1b2.tar.gz", "has_sig": false, "md5_digest": "b6a1602e00b9d1594b361bc2e5f26a8f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 13280, "upload_time": "2019-08-02T07:00:25", "upload_time_iso_8601": "2019-08-02T07:00:25.080184Z", "url": "https://files.pythonhosted.org/packages/20/45/01b9bd48eecef8f62cb7a844ac5d34a89a4b6bb5c72d03362db432779d24/delayed-0.3.1b2.tar.gz", "yanked": false}], "0.4.0b1": [{"comment_text": "", "digests": {"md5": "c14d0fc309d6aa7a5c35082ae57446b4", "sha256": "72ea2f1cb083f8c252c586fe99c469142320e36c32cf3d2fa523a3f5dd7c2c0c"}, "downloads": -1, "filename": "delayed-0.4.0b1.tar.gz", "has_sig": false, "md5_digest": "c14d0fc309d6aa7a5c35082ae57446b4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 13417, "upload_time": "2019-08-05T05:55:15", "upload_time_iso_8601": "2019-08-05T05:55:15.086242Z", "url": "https://files.pythonhosted.org/packages/59/f4/ded62e7723b26d62175ddadc0d8f7bbf1a64e14c3ddafcf8712f60212a43/delayed-0.4.0b1.tar.gz", "yanked": false}], "0.5.0b1": [{"comment_text": "", "digests": {"md5": "24ee640326653ff30012cca8286f0e57", "sha256": "3cba84e20a9ca279cf2bd817f835fbcf2e09bc10b7a441e8f902a9919b9d0df8"}, "downloads": -1, "filename": "delayed-0.5.0b1.tar.gz", "has_sig": false, "md5_digest": "24ee640326653ff30012cca8286f0e57", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 14551, "upload_time": "2019-08-06T15:57:32", "upload_time_iso_8601": "2019-08-06T15:57:32.159323Z", "url": "https://files.pythonhosted.org/packages/fc/76/ce7de4fe3261c5f7c423afe7a74c93bb4c1bf48169cc7d555e7ec4aa0a99/delayed-0.5.0b1.tar.gz", "yanked": false}], "0.5.0b2": [{"comment_text": "", "digests": {"md5": "2d93645d8a1b45ed4d9cf6fd23752282", "sha256": "fcbe3ff6258904d0c192429ddcf531ca52574bf0938237214f9ed7825e8ed00a"}, "downloads": -1, "filename": "delayed-0.5.0b2.tar.gz", "has_sig": false, "md5_digest": "2d93645d8a1b45ed4d9cf6fd23752282", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 14695, "upload_time": "2019-08-07T04:37:18", "upload_time_iso_8601": "2019-08-07T04:37:18.834045Z", "url": "https://files.pythonhosted.org/packages/07/95/87fbf4703f0d832d437f8ae8b48a054abd3ee1edbf5f7dfd9fb9caae982c/delayed-0.5.0b2.tar.gz", "yanked": false}], "0.5.1b2": [{"comment_text": "", "digests": {"md5": "b7b232c8274ef9053b226776fe454f8f", "sha256": "4c13891acfa613cf9c93e7ead880673dd980ad7491e03a2289f9c0621a970b14"}, "downloads": -1, "filename": "delayed-0.5.1b2.tar.gz", "has_sig": false, "md5_digest": "b7b232c8274ef9053b226776fe454f8f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 15749, "upload_time": "2019-08-07T09:08:48", "upload_time_iso_8601": "2019-08-07T09:08:48.630318Z", "url": "https://files.pythonhosted.org/packages/cb/90/89357037957c1d95bf1ef5b09a312e79c95411ca1dddc252d063829e32f1/delayed-0.5.1b2.tar.gz", "yanked": false}], "0.5.1b3": [{"comment_text": "", "digests": {"md5": "090fe5b31d9b64d794ae19bab38476cb", "sha256": "a39ac64e33f2a058b12f6f1a18edfc5b4d3ead8051ba86afd08dcf3ea30d86a3"}, "downloads": -1, "filename": "delayed-0.5.1b3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "090fe5b31d9b64d794ae19bab38476cb", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7", "size": 15777, "upload_time": "2019-12-24T10:27:02", "upload_time_iso_8601": "2019-12-24T10:27:02.608814Z", "url": "https://files.pythonhosted.org/packages/ea/d9/1251bd2db63aebd1bc6596f1c131ad61cc98fa173a56b22449075bd39d03/delayed-0.5.1b3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "13f93eaff5193fb481cc194db845617c", "sha256": "b19f69984b505b0be8447abc512f9920f3096c0210fbc05c851b764e29f231a4"}, "downloads": -1, "filename": "delayed-0.5.1b3.tar.gz", "has_sig": false, "md5_digest": "13f93eaff5193fb481cc194db845617c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 15731, "upload_time": "2019-12-24T02:34:25", "upload_time_iso_8601": "2019-12-24T02:34:25.095059Z", "url": "https://files.pythonhosted.org/packages/76/ea/638cadca0dc6abcd934b1811f9b9d428ea919fa28f15fd750a47a559e1d1/delayed-0.5.1b3.tar.gz", "yanked": false}], "0.6.0b1": [{"comment_text": "", "digests": {"md5": "9b6baedaeeca153d583b3d39247a394e", "sha256": "0d48775990dc897e97226ed430f9ce7892aed1a13188808111695a05498655c9"}, "downloads": -1, "filename": "delayed-0.6.0b1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "9b6baedaeeca153d583b3d39247a394e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7", "size": 16051, "upload_time": "2019-12-26T03:22:48", "upload_time_iso_8601": "2019-12-26T03:22:48.465863Z", "url": "https://files.pythonhosted.org/packages/69/8e/f07bcc8428f938a4541873e9b9b84bb4315ca6a6e6f5da6663344b70a060/delayed-0.6.0b1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0548e7705b69f8e2246326f8f953b0da", "sha256": "f9306b6911a35100a395c32c3092c2fda12ad5ace86db0f07a18e70314571598"}, "downloads": -1, "filename": "delayed-0.6.0b1.tar.gz", "has_sig": false, "md5_digest": "0548e7705b69f8e2246326f8f953b0da", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 16106, "upload_time": "2019-12-26T03:22:56", "upload_time_iso_8601": "2019-12-26T03:22:56.492190Z", "url": "https://files.pythonhosted.org/packages/74/8b/ff2c951b905f5e57ad5749bc0ad307a8d826b75c3f8137e623620dd4f514/delayed-0.6.0b1.tar.gz", "yanked": false}], "0.7.0b1": [{"comment_text": "", "digests": {"md5": "23f626598d07a1ba9f1bfb6b8010f078", "sha256": "b4df527ec00c2231a213cfc2727a301bb016131af9b5b659d8563fd4fce6535f"}, "downloads": -1, "filename": "delayed-0.7.0b1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "23f626598d07a1ba9f1bfb6b8010f078", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7", "size": 16472, "upload_time": "2020-02-06T09:09:19", "upload_time_iso_8601": "2020-02-06T09:09:19.268828Z", "url": "https://files.pythonhosted.org/packages/2a/dd/383886aba30c71f0b9ce62b16d91bc859a1f04c3056c77e2cb03f0e03436/delayed-0.7.0b1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c19943addfba61546775d36c3c94fd92", "sha256": "88ee810d97dc71869a08ce2e320d1545e355aca0d1a11cb2facd3d542ac58392"}, "downloads": -1, "filename": "delayed-0.7.0b1.tar.gz", "has_sig": false, "md5_digest": "c19943addfba61546775d36c3c94fd92", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 16573, "upload_time": "2020-02-06T09:09:27", "upload_time_iso_8601": "2020-02-06T09:09:27.911424Z", "url": "https://files.pythonhosted.org/packages/7e/55/8afec48e8d445afcef7ea44a8f16096f02665ae6e5caa0c3cbab6d46f687/delayed-0.7.0b1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "23f626598d07a1ba9f1bfb6b8010f078", "sha256": "b4df527ec00c2231a213cfc2727a301bb016131af9b5b659d8563fd4fce6535f"}, "downloads": -1, "filename": "delayed-0.7.0b1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "23f626598d07a1ba9f1bfb6b8010f078", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7", "size": 16472, "upload_time": "2020-02-06T09:09:19", "upload_time_iso_8601": "2020-02-06T09:09:19.268828Z", "url": "https://files.pythonhosted.org/packages/2a/dd/383886aba30c71f0b9ce62b16d91bc859a1f04c3056c77e2cb03f0e03436/delayed-0.7.0b1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c19943addfba61546775d36c3c94fd92", "sha256": "88ee810d97dc71869a08ce2e320d1545e355aca0d1a11cb2facd3d542ac58392"}, "downloads": -1, "filename": "delayed-0.7.0b1.tar.gz", "has_sig": false, "md5_digest": "c19943addfba61546775d36c3c94fd92", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 16573, "upload_time": "2020-02-06T09:09:27", "upload_time_iso_8601": "2020-02-06T09:09:27.911424Z", "url": "https://files.pythonhosted.org/packages/7e/55/8afec48e8d445afcef7ea44a8f16096f02665ae6e5caa0c3cbab6d46f687/delayed-0.7.0b1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:39:13 2020"}