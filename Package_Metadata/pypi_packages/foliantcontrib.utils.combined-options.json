{"info": {"author": "Daniil Minukhin", "author_email": "ddddsa@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Documentation", "Topic :: Utilities"], "description": "[![](https://img.shields.io/pypi/v/foliantcontrib.utils.combined_options.svg)](https://pypi.org/project/foliantcontrib.utils.combined-options/) [![](https://img.shields.io/github/v/tag/foliant-docs/foliantcontrib.utils.combined_options.svg?label=GitHub)](https://github.com/foliant-docs/foliantcontrib.utils.combined_options)\n\n# Overview\n\ncombined_options is a module which helps you cope with the options from foliant.yml and tag options.\n\nModule has two classes:\n- **Options** which extends functionality of an options dictionary,\n- **CombinedOptions** which allows to combine config and tag options into one dictionary-like object.\n\n# Usage\n\nTo use functions and classes from this module, install it with command\n\n```bash\npip3 install foliantcontrib.utils.combinedoptions\n```\n\nThen in your preprocessor module import the Options or CombinedOptions class and wrap your options dictionaries in them:\n\n```python\nfrom foliant.preprocessors.utils.combined_options import CombinedOptions\n\n...\n\noptions = CombinedOptions({'main': main_options,\n                           'tag': tag_options},\n                          priority='tag')\nif 'caption' in options:\n    self._caption = options['caption']\n```\n\nOptions and CombinedOptions act like a dictionary. For detailed description of the functions, please refer to the rest of the documentation.\n\n## Options class\n\nOptions class wraps around the options dictionary, for example from your foliant.yaml file, and gives it some extra functionality.\n\n**Init parameters**\n\n- `options` (dict, required) \u2014 the pure dictionary with options.\n- `defaults` (dict, optional) \u2014 dictionary with default values, usually declared at the top of the preprocessor class.\n- `convertors` (dict, optional) \u2014 dictionary with key = option name, value = convertor function which will be applied to the value of an option with such name before storing in class.\n- `validators` (dict, optional) \u2014 dictionary with key = option name, value = validator function which will be applied to the value of this option. Function should check for validity and raise ValidationError if the check fails.\n- `required` (list, optional) \u2014 a list of required parameters or a list of combinations of required parameters.\n\nLet's say you have such options in your config:\n\n```yaml\npreprocessors:\n    - MyAwesomePreprocessor:\n        config: config.xml\n        articles:\n            - a1\n            - a2\n            - a3\n        store_log: true\n```\n\nFoliant will parse this config into a dictionary which will look like this:\n\n```python\n>>> config_options = {'config': 'config.xml', 'articles': ['a1','a2','a3'], 'store_log': True}\n\n```\n\nLet's say you have a `defaults` dictionary in your preprocessor source code looking like this:\n\n```python\n>>> defaults = {'config': 'config.xml', 'articles': []}\n\n```\n\nLet's import the `Options` class to look at some of its functions:\n\n```python\n>>> from foliant.preprocessors.utils.combined_options import Options\n\n```\n\nTo use the class we need to supply our options dictionary and the dictionary with default values to the class constructor:\n\n```python\n>>> options = Options(config_options, defaults)\n\n```\n\n> Note that supplying the dictionary with defaults is not required, it is needed only for the work of `is_default` class method\n\nThe resulting object acts just like a dictionary:\n\n```python\n>>> options['config']\n'config.xml'\n>>> 'articles' in options\nTrue\n>>> options.get('missing', 'value')\n'value'\n\n```\n\nBut now, since we've given it a dictionary with default values, we can check if the value set in options differs from its default:\n\n```python\n>>> options.is_default('config')\nTrue\n>>> options.is_default('articles')\nFalse\n>>> options.is_default('store_log')\nFalse\n\n```\n\nAnother function of this class is that it can validate option values and convert them.\n\nValidators and convertors are functions which you'll have to create yourself. A few of them are already available in the module though, check the source code.\n\n**Validators**\n\nValidator is a function that takes option value as parameter and raises `ValidationError` it the value is wrong in some way.\n\nFor example, if you want to be sure that type the option user supplied is a string you can write a validator like this:\n\n```python\n>>> from foliant.preprocessors.utils.combined_options import ValidationError\n>>> def validate_is_str(option):\n...     if type(option) is not str:\n...         raise ValidationError('Value should be string!')\n\n```\n\nTo add validator to your options object, supply it in the constructor:\n\n```python\n>>> config_options = {'check': 123}\n>>> options = Options (config_options, validators={'check': validate_is_str})\nTraceback (most recent call last):\n  ...\nfoliant.preprocessors.utils.combined_options.ValidationError: Error in option \"check\": Value should be string!\n\n```\n\nYou see, it even didn't allow us to create an options object because the value of the parameter is wrong. You should handle this error on your own.\n\n**Convertors**\n\nSometimes you have to convert the value of the option that user provided before using it. Convertors are functions that are applied to certain options and replace their value in the Options object with the converted result of this function.\n\nFor example, if we need a comma-separated string has to be converted into a list, we can write this kind of convertor:\n\n```python\n>>> def convert_to_list(option):\n...     if type(option) is str:\n...         return option.split(',')\n...     else:\n...         return option\n\n```\n\nSo now let's attach our convertor to an option object:\n\n```python\n>>> config_options = {'names': 'Sam,Ben,Dan'}\n>>> options = Options(config_options, convertors={'names': convert_to_list})\n>>> options['names']\n['Sam', 'Ben', 'Dan']\n\n```\n\n**Required options**\n\nOptions class may check if all of the required options are defined. To use this feature supply a list of required param names in the `required` key:\n\n```python\n>>> config_options = {'title': 'My article', 'id': 335}\n>>> options = Options(config_options, required=['title', 'space'])\nTraceback (most recent call last):\n  ...\nfoliant.preprocessors.utils.combined_options.RequiredParamsMissingError: Not all required params are supplied: ['title', 'space']\n\n```\n\nWe've forgot to define the required parameter `space` and Options object alerted us right away.\n\nThere are situations when you have not just required parameters but combination of required parameters. For example you can define the page you are editing by id, or by title and space. Both ways are possible, but one of them has to be satisfied.\n\nIn this case you can supply a list with all possible combination in the `required` key like this:\n\n```python\n>>> config_options = {'title': 'My article', 'id': 335}\n>>> options = Options(config_options, required=[['title', 'space'], ['id']])\n\n```\n\n## CombinedOptions class\n\nCombinedOptions is designed to merge several options dictionaries into one object. It is a common task when you have some global options set in foliant.yml but they can be overriden by tag options in Markdown source. The result is a dictionary-like CombinedOptions object which has all options from config and from the tag.\n\nWhen options overlap, the priority would be given to the option from the dictionary, which defined it first. If you want to override this behavior (or make things more verbose) you can utilize the `priority` parameter.\n\nCombinedOptions is inherited from Options class and repeats all its functionality.\n\n**Init parameters**\n\n- `options` (dict, required) \u2014 dictionary where key = priority, value = option dictionary.\n- `priority` (str) \u2014 initial priority (if not set = first key from options dict).\n\nRemaining parameters are the same as in Options class:\n\n- `defaults` (dict, optional) \u2014 dictionary with default values, usually declared at the top of the preprocessor class.\n- `convertors` (dict, optional) \u2014 dictionary with key = option name, value = convertor function which will be applied to the value of this option before storing in class.\n- `validators` (dict, optional) \u2014 dictionary with key = option name, value = validator function which will be applied to the value of this option. Function should check for validity and raise ValidationError if the check fails.\n\nTo illustrate CombinedOptions' handiness let's assume that you have two option dictionaries, one came from foliant.yml and the other one \u2014 from the tag you are currently processing:\n\n```python\n>>> config_options = {'config': 'config.xml', 'dpi': 300}\n>>> tag_options = {'dpi': 500, 'caption': 'Main screen'}\n\n```\n\nLet's combine these two options in one object. To do this we will have to pack them into a single dictionary under arbitrary keys (keys are explained later):\n\n```python\n>>> from foliant.preprocessors.utils.combined_options import CombinedOptions\n>>> options = CombinedOptions({'tag': tag_options, 'config': config_options})\n\n```\n\nAs you have noticed, we have parameter `'dpi'` defined in both option dictionaries. Let's look at the values we will be getting:\n\n```python\n>>> options['config']  # we have option from config_options\n'config.xml'\n>>> options['caption']  # we also have an option from tag_options\n'Main screen'\n>>> options['dpi']  # when we ask option which occurs in both, we get one from tag_options\n500\n\n```\n\nIn the CombinedOptions object we have options from both `config` and `tag` dictionaries. The conflicting options (like `dpi` in our example) are picked from the first dictionary defined. (If you are using Python 3.5 and older, supply options in `OrderedDict`)\n\nIf you wish to change the priority of the dictionaries (or make it more verbose), use the `priority` parameter, which may be a single string, o list of strings in priority order:\n\n```python\n>>> options = CombinedOptions({'tag': tag_options, 'config': config_options}, priority='config')\n>>> options['dpi']  # now we should get the value from 'config' dictionary\n300\n\n```\n\n\nYou can also change the priority on fly. To do this just give a new value to the `priority` attribute:\n\n```python\n>>> options.priority = 'tag'\n>>> options['dpi']\n500\n\n```\n\n# Predefined convertors and validators\n\nThere are some convertors and validators already predefined in combined_options module.\n\n**Validators**\n\n`validate_in` \u2014 factory that returns a validator which checks if specified value is in the list.\n\nTo use this validator, first get one from the factory, supplying the list of correct values for option:\n\n```python\n>>> from foliant.preprocessors.utils.combined_options import validate_in\n>>> correct = ['spam', 'eggs', 'bacon']\n>>> validator = validate_in(correct)\n>>> options = Options({'dish': 'chicken'}, validators={'dish': validator})\nTraceback (most recent call last):\n  ...\nfoliant.preprocessors.utils.combined_options.ValidationError: Error in option \"dish\": Unsupported option value chicken. Should be one of: spam, eggs, bacon\n\n```\n\n***\n\n`val_type` \u2014 factory that returns validator, which checks if specified value is of correct type.\n\n```python\n>>> from foliant.preprocessors.utils.combined_options import val_type\n>>> validator = val_type(str)\n>>> options = Options({'name': 998}, validators={'name': validator})\nTraceback (most recent call last):\n  ...\nfoliant.preprocessors.utils.combined_options.ValidationError: Error in option \"name\": Unsupported option value 998. Must be of type <class 'str'>\n\n```\n\nYou can also specify a list of supported types:\n\n```python\n>>> correct = [str, int, None]\n>>> validator = val_type(correct)\n>>> options = Options({'name': None}, validators={'name': validator})\n>>> options = Options({'name': ['Bob', 'Alice']}, validators={'name': validator})\nTraceback (most recent call last):\n  ...\nfoliant.preprocessors.utils.combined_options.ValidationError: Error in option \"name\": Unsupported option value ['Bob', 'Alice']. Must be of type <class 'str'>, <class 'int'>, None\n\n```\n\n***\n\n`validate_exists` \u2014 checks if specified path exists in file system.\n\n```python\n>>> from foliant.preprocessors.utils.combined_options import validate_exists\n>>> options = Options({'fp': '/'}, validators={'fp': validate_exists})\n>>> options = Options({'fp': '/wrong'}, validators={'fp': validate_exists})\nTraceback (most recent call last):\n  ...\nfoliant.preprocessors.utils.combined_options.ValidationError: Error in option \"fp\": Path /wrong does not exist.\n\n```\n\n**Convertors**\n\n`yaml_to_dict_convertor` \u2014 converts yaml-string to python dict. If value is a dict already \u2014 just returns it. **DEPRECATED:** since Foliant 1.0.9 all tag option values are treated as YAML.\n\n***\n\n`boolean_convertor` \u2014 converts strings and integers into Boolean according to the table\n\nvalue | result\n----- | ------\n`1` | `True`\n`0` | `False`\n`'1'` | `True`\n`'0'` | `False`\n`'y'` | `True`\n`'n'` | `False`\n`'yes'` | `True`\n`'no'` | `False`\n`'true'` | `True`\n`'false'` | `False`\n`<other>` | `True`\n\n***\n\n`rel_path_convertor` \u2014  Convertor factory which makes path, supplied in option value, relative to parent_path, set during the convertor initialization. Returns `PosixPath` object.\n\n```python\n>>> from foliant.preprocessors.utils.combined_options import rel_path_convertor\n>>> my_conv = rel_path_convertor('/usr/src/app')\n>>> options = Options({'index': 'src/index.md'}, convertors={'index': my_conv})\n>>> options['index']\nPosixPath('/usr/src/app/src/index.md')\n\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/foliant-docs/foliantcontrib.utils.combined_options", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "foliantcontrib.utils.combined-options", "package_url": "https://pypi.org/project/foliantcontrib.utils.combined-options/", "platform": "any", "project_url": "https://pypi.org/project/foliantcontrib.utils.combined-options/", "project_urls": {"Homepage": "https://github.com/foliant-docs/foliantcontrib.utils.combined_options"}, "release_url": "https://pypi.org/project/foliantcontrib.utils.combined-options/1.0.10/", "requires_dist": ["foliant (>=1.0.8)", "PyYAML"], "requires_python": "", "summary": "", "version": "1.0.10", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://pypi.org/project/foliantcontrib.utils.combined-options/\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ef41dde04aa8cef0a3c26d0156d968125c849388/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f666f6c69616e74636f6e747269622e7574696c732e636f6d62696e65645f6f7074696f6e732e737667\"></a> <a href=\"https://github.com/foliant-docs/foliantcontrib.utils.combined_options\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/646e9cfe380f786f9986ac05ff52b26f1142b415/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f762f7461672f666f6c69616e742d646f63732f666f6c69616e74636f6e747269622e7574696c732e636f6d62696e65645f6f7074696f6e732e7376673f6c6162656c3d476974487562\"></a></p>\n<h1>Overview</h1>\n<p>combined_options is a module which helps you cope with the options from foliant.yml and tag options.</p>\n<p>Module has two classes:</p>\n<ul>\n<li><strong>Options</strong> which extends functionality of an options dictionary,</li>\n<li><strong>CombinedOptions</strong> which allows to combine config and tag options into one dictionary-like object.</li>\n</ul>\n<h1>Usage</h1>\n<p>To use functions and classes from this module, install it with command</p>\n<pre>pip3 install foliantcontrib.utils.combinedoptions\n</pre>\n<p>Then in your preprocessor module import the Options or CombinedOptions class and wrap your options dictionaries in them:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">foliant.preprocessors.utils.combined_options</span> <span class=\"kn\">import</span> <span class=\"n\">CombinedOptions</span>\n\n<span class=\"o\">...</span>\n\n<span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"n\">CombinedOptions</span><span class=\"p\">({</span><span class=\"s1\">'main'</span><span class=\"p\">:</span> <span class=\"n\">main_options</span><span class=\"p\">,</span>\n                           <span class=\"s1\">'tag'</span><span class=\"p\">:</span> <span class=\"n\">tag_options</span><span class=\"p\">},</span>\n                          <span class=\"n\">priority</span><span class=\"o\">=</span><span class=\"s1\">'tag'</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"s1\">'caption'</span> <span class=\"ow\">in</span> <span class=\"n\">options</span><span class=\"p\">:</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_caption</span> <span class=\"o\">=</span> <span class=\"n\">options</span><span class=\"p\">[</span><span class=\"s1\">'caption'</span><span class=\"p\">]</span>\n</pre>\n<p>Options and CombinedOptions act like a dictionary. For detailed description of the functions, please refer to the rest of the documentation.</p>\n<h2>Options class</h2>\n<p>Options class wraps around the options dictionary, for example from your foliant.yaml file, and gives it some extra functionality.</p>\n<p><strong>Init parameters</strong></p>\n<ul>\n<li><code>options</code> (dict, required) \u2014 the pure dictionary with options.</li>\n<li><code>defaults</code> (dict, optional) \u2014 dictionary with default values, usually declared at the top of the preprocessor class.</li>\n<li><code>convertors</code> (dict, optional) \u2014 dictionary with key = option name, value = convertor function which will be applied to the value of an option with such name before storing in class.</li>\n<li><code>validators</code> (dict, optional) \u2014 dictionary with key = option name, value = validator function which will be applied to the value of this option. Function should check for validity and raise ValidationError if the check fails.</li>\n<li><code>required</code> (list, optional) \u2014 a list of required parameters or a list of combinations of required parameters.</li>\n</ul>\n<p>Let's say you have such options in your config:</p>\n<pre><span class=\"nt\">preprocessors</span><span class=\"p\">:</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"nt\">MyAwesomePreprocessor</span><span class=\"p\">:</span>\n        <span class=\"nt\">config</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">config.xml</span>\n        <span class=\"nt\">articles</span><span class=\"p\">:</span>\n            <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">a1</span>\n            <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">a2</span>\n            <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">a3</span>\n        <span class=\"nt\">store_log</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">true</span>\n</pre>\n<p>Foliant will parse this config into a dictionary which will look like this:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">config_options</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'config'</span><span class=\"p\">:</span> <span class=\"s1\">'config.xml'</span><span class=\"p\">,</span> <span class=\"s1\">'articles'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'a1'</span><span class=\"p\">,</span><span class=\"s1\">'a2'</span><span class=\"p\">,</span><span class=\"s1\">'a3'</span><span class=\"p\">],</span> <span class=\"s1\">'store_log'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">}</span>\n</pre>\n<p>Let's say you have a <code>defaults</code> dictionary in your preprocessor source code looking like this:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">defaults</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'config'</span><span class=\"p\">:</span> <span class=\"s1\">'config.xml'</span><span class=\"p\">,</span> <span class=\"s1\">'articles'</span><span class=\"p\">:</span> <span class=\"p\">[]}</span>\n</pre>\n<p>Let's import the <code>Options</code> class to look at some of its functions:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">foliant.preprocessors.utils.combined_options</span> <span class=\"kn\">import</span> <span class=\"n\">Options</span>\n</pre>\n<p>To use the class we need to supply our options dictionary and the dictionary with default values to the class constructor:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"n\">Options</span><span class=\"p\">(</span><span class=\"n\">config_options</span><span class=\"p\">,</span> <span class=\"n\">defaults</span><span class=\"p\">)</span>\n</pre>\n<blockquote>\n<p>Note that supplying the dictionary with defaults is not required, it is needed only for the work of <code>is_default</code> class method</p>\n</blockquote>\n<p>The resulting object acts just like a dictionary:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">options</span><span class=\"p\">[</span><span class=\"s1\">'config'</span><span class=\"p\">]</span>\n<span class=\"s1\">'config.xml'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"s1\">'articles'</span> <span class=\"ow\">in</span> <span class=\"n\">options</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'missing'</span><span class=\"p\">,</span> <span class=\"s1\">'value'</span><span class=\"p\">)</span>\n<span class=\"s1\">'value'</span>\n</pre>\n<p>But now, since we've given it a dictionary with default values, we can check if the value set in options differs from its default:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">is_default</span><span class=\"p\">(</span><span class=\"s1\">'config'</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">is_default</span><span class=\"p\">(</span><span class=\"s1\">'articles'</span><span class=\"p\">)</span>\n<span class=\"kc\">False</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">is_default</span><span class=\"p\">(</span><span class=\"s1\">'store_log'</span><span class=\"p\">)</span>\n<span class=\"kc\">False</span>\n</pre>\n<p>Another function of this class is that it can validate option values and convert them.</p>\n<p>Validators and convertors are functions which you'll have to create yourself. A few of them are already available in the module though, check the source code.</p>\n<p><strong>Validators</strong></p>\n<p>Validator is a function that takes option value as parameter and raises <code>ValidationError</code> it the value is wrong in some way.</p>\n<p>For example, if you want to be sure that type the option user supplied is a string you can write a validator like this:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">foliant.preprocessors.utils.combined_options</span> <span class=\"kn\">import</span> <span class=\"n\">ValidationError</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">validate_is_str</span><span class=\"p\">(</span><span class=\"n\">option</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">if</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">option</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>         <span class=\"k\">raise</span> <span class=\"n\">ValidationError</span><span class=\"p\">(</span><span class=\"s1\">'Value should be string!'</span><span class=\"p\">)</span>\n</pre>\n<p>To add validator to your options object, supply it in the constructor:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">config_options</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'check'</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"n\">Options</span> <span class=\"p\">(</span><span class=\"n\">config_options</span><span class=\"p\">,</span> <span class=\"n\">validators</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'check'</span><span class=\"p\">:</span> <span class=\"n\">validate_is_str</span><span class=\"p\">})</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n  <span class=\"o\">...</span>\n<span class=\"n\">foliant</span><span class=\"o\">.</span><span class=\"n\">preprocessors</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">combined_options</span><span class=\"o\">.</span><span class=\"n\">ValidationError</span><span class=\"p\">:</span> <span class=\"n\">Error</span> <span class=\"ow\">in</span> <span class=\"n\">option</span> <span class=\"s2\">\"check\"</span><span class=\"p\">:</span> <span class=\"n\">Value</span> <span class=\"n\">should</span> <span class=\"n\">be</span> <span class=\"n\">string</span><span class=\"err\">!</span>\n</pre>\n<p>You see, it even didn't allow us to create an options object because the value of the parameter is wrong. You should handle this error on your own.</p>\n<p><strong>Convertors</strong></p>\n<p>Sometimes you have to convert the value of the option that user provided before using it. Convertors are functions that are applied to certain options and replace their value in the Options object with the converted result of this function.</p>\n<p>For example, if we need a comma-separated string has to be converted into a list, we can write this kind of convertor:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">convert_to_list</span><span class=\"p\">(</span><span class=\"n\">option</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">if</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">option</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>         <span class=\"k\">return</span> <span class=\"n\">option</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">','</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>     <span class=\"k\">else</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>         <span class=\"k\">return</span> <span class=\"n\">option</span>\n</pre>\n<p>So now let's attach our convertor to an option object:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">config_options</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'names'</span><span class=\"p\">:</span> <span class=\"s1\">'Sam,Ben,Dan'</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"n\">Options</span><span class=\"p\">(</span><span class=\"n\">config_options</span><span class=\"p\">,</span> <span class=\"n\">convertors</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'names'</span><span class=\"p\">:</span> <span class=\"n\">convert_to_list</span><span class=\"p\">})</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">options</span><span class=\"p\">[</span><span class=\"s1\">'names'</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"s1\">'Sam'</span><span class=\"p\">,</span> <span class=\"s1\">'Ben'</span><span class=\"p\">,</span> <span class=\"s1\">'Dan'</span><span class=\"p\">]</span>\n</pre>\n<p><strong>Required options</strong></p>\n<p>Options class may check if all of the required options are defined. To use this feature supply a list of required param names in the <code>required</code> key:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">config_options</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"s1\">'My article'</span><span class=\"p\">,</span> <span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"mi\">335</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"n\">Options</span><span class=\"p\">(</span><span class=\"n\">config_options</span><span class=\"p\">,</span> <span class=\"n\">required</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'title'</span><span class=\"p\">,</span> <span class=\"s1\">'space'</span><span class=\"p\">])</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n  <span class=\"o\">...</span>\n<span class=\"n\">foliant</span><span class=\"o\">.</span><span class=\"n\">preprocessors</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">combined_options</span><span class=\"o\">.</span><span class=\"n\">RequiredParamsMissingError</span><span class=\"p\">:</span> <span class=\"n\">Not</span> <span class=\"nb\">all</span> <span class=\"n\">required</span> <span class=\"n\">params</span> <span class=\"n\">are</span> <span class=\"n\">supplied</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'title'</span><span class=\"p\">,</span> <span class=\"s1\">'space'</span><span class=\"p\">]</span>\n</pre>\n<p>We've forgot to define the required parameter <code>space</code> and Options object alerted us right away.</p>\n<p>There are situations when you have not just required parameters but combination of required parameters. For example you can define the page you are editing by id, or by title and space. Both ways are possible, but one of them has to be satisfied.</p>\n<p>In this case you can supply a list with all possible combination in the <code>required</code> key like this:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">config_options</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"s1\">'My article'</span><span class=\"p\">,</span> <span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"mi\">335</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"n\">Options</span><span class=\"p\">(</span><span class=\"n\">config_options</span><span class=\"p\">,</span> <span class=\"n\">required</span><span class=\"o\">=</span><span class=\"p\">[[</span><span class=\"s1\">'title'</span><span class=\"p\">,</span> <span class=\"s1\">'space'</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s1\">'id'</span><span class=\"p\">]])</span>\n</pre>\n<h2>CombinedOptions class</h2>\n<p>CombinedOptions is designed to merge several options dictionaries into one object. It is a common task when you have some global options set in foliant.yml but they can be overriden by tag options in Markdown source. The result is a dictionary-like CombinedOptions object which has all options from config and from the tag.</p>\n<p>When options overlap, the priority would be given to the option from the dictionary, which defined it first. If you want to override this behavior (or make things more verbose) you can utilize the <code>priority</code> parameter.</p>\n<p>CombinedOptions is inherited from Options class and repeats all its functionality.</p>\n<p><strong>Init parameters</strong></p>\n<ul>\n<li><code>options</code> (dict, required) \u2014 dictionary where key = priority, value = option dictionary.</li>\n<li><code>priority</code> (str) \u2014 initial priority (if not set = first key from options dict).</li>\n</ul>\n<p>Remaining parameters are the same as in Options class:</p>\n<ul>\n<li><code>defaults</code> (dict, optional) \u2014 dictionary with default values, usually declared at the top of the preprocessor class.</li>\n<li><code>convertors</code> (dict, optional) \u2014 dictionary with key = option name, value = convertor function which will be applied to the value of this option before storing in class.</li>\n<li><code>validators</code> (dict, optional) \u2014 dictionary with key = option name, value = validator function which will be applied to the value of this option. Function should check for validity and raise ValidationError if the check fails.</li>\n</ul>\n<p>To illustrate CombinedOptions' handiness let's assume that you have two option dictionaries, one came from foliant.yml and the other one \u2014 from the tag you are currently processing:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">config_options</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'config'</span><span class=\"p\">:</span> <span class=\"s1\">'config.xml'</span><span class=\"p\">,</span> <span class=\"s1\">'dpi'</span><span class=\"p\">:</span> <span class=\"mi\">300</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tag_options</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'dpi'</span><span class=\"p\">:</span> <span class=\"mi\">500</span><span class=\"p\">,</span> <span class=\"s1\">'caption'</span><span class=\"p\">:</span> <span class=\"s1\">'Main screen'</span><span class=\"p\">}</span>\n</pre>\n<p>Let's combine these two options in one object. To do this we will have to pack them into a single dictionary under arbitrary keys (keys are explained later):</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">foliant.preprocessors.utils.combined_options</span> <span class=\"kn\">import</span> <span class=\"n\">CombinedOptions</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"n\">CombinedOptions</span><span class=\"p\">({</span><span class=\"s1\">'tag'</span><span class=\"p\">:</span> <span class=\"n\">tag_options</span><span class=\"p\">,</span> <span class=\"s1\">'config'</span><span class=\"p\">:</span> <span class=\"n\">config_options</span><span class=\"p\">})</span>\n</pre>\n<p>As you have noticed, we have parameter <code>'dpi'</code> defined in both option dictionaries. Let's look at the values we will be getting:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">options</span><span class=\"p\">[</span><span class=\"s1\">'config'</span><span class=\"p\">]</span>  <span class=\"c1\"># we have option from config_options</span>\n<span class=\"s1\">'config.xml'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">options</span><span class=\"p\">[</span><span class=\"s1\">'caption'</span><span class=\"p\">]</span>  <span class=\"c1\"># we also have an option from tag_options</span>\n<span class=\"s1\">'Main screen'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">options</span><span class=\"p\">[</span><span class=\"s1\">'dpi'</span><span class=\"p\">]</span>  <span class=\"c1\"># when we ask option which occurs in both, we get one from tag_options</span>\n<span class=\"mi\">500</span>\n</pre>\n<p>In the CombinedOptions object we have options from both <code>config</code> and <code>tag</code> dictionaries. The conflicting options (like <code>dpi</code> in our example) are picked from the first dictionary defined. (If you are using Python 3.5 and older, supply options in <code>OrderedDict</code>)</p>\n<p>If you wish to change the priority of the dictionaries (or make it more verbose), use the <code>priority</code> parameter, which may be a single string, o list of strings in priority order:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"n\">CombinedOptions</span><span class=\"p\">({</span><span class=\"s1\">'tag'</span><span class=\"p\">:</span> <span class=\"n\">tag_options</span><span class=\"p\">,</span> <span class=\"s1\">'config'</span><span class=\"p\">:</span> <span class=\"n\">config_options</span><span class=\"p\">},</span> <span class=\"n\">priority</span><span class=\"o\">=</span><span class=\"s1\">'config'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">options</span><span class=\"p\">[</span><span class=\"s1\">'dpi'</span><span class=\"p\">]</span>  <span class=\"c1\"># now we should get the value from 'config' dictionary</span>\n<span class=\"mi\">300</span>\n</pre>\n<p>You can also change the priority on fly. To do this just give a new value to the <code>priority</code> attribute:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">priority</span> <span class=\"o\">=</span> <span class=\"s1\">'tag'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">options</span><span class=\"p\">[</span><span class=\"s1\">'dpi'</span><span class=\"p\">]</span>\n<span class=\"mi\">500</span>\n</pre>\n<h1>Predefined convertors and validators</h1>\n<p>There are some convertors and validators already predefined in combined_options module.</p>\n<p><strong>Validators</strong></p>\n<p><code>validate_in</code> \u2014 factory that returns a validator which checks if specified value is in the list.</p>\n<p>To use this validator, first get one from the factory, supplying the list of correct values for option:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">foliant.preprocessors.utils.combined_options</span> <span class=\"kn\">import</span> <span class=\"n\">validate_in</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">correct</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'spam'</span><span class=\"p\">,</span> <span class=\"s1\">'eggs'</span><span class=\"p\">,</span> <span class=\"s1\">'bacon'</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">validator</span> <span class=\"o\">=</span> <span class=\"n\">validate_in</span><span class=\"p\">(</span><span class=\"n\">correct</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"n\">Options</span><span class=\"p\">({</span><span class=\"s1\">'dish'</span><span class=\"p\">:</span> <span class=\"s1\">'chicken'</span><span class=\"p\">},</span> <span class=\"n\">validators</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'dish'</span><span class=\"p\">:</span> <span class=\"n\">validator</span><span class=\"p\">})</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n  <span class=\"o\">...</span>\n<span class=\"n\">foliant</span><span class=\"o\">.</span><span class=\"n\">preprocessors</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">combined_options</span><span class=\"o\">.</span><span class=\"n\">ValidationError</span><span class=\"p\">:</span> <span class=\"n\">Error</span> <span class=\"ow\">in</span> <span class=\"n\">option</span> <span class=\"s2\">\"dish\"</span><span class=\"p\">:</span> <span class=\"n\">Unsupported</span> <span class=\"n\">option</span> <span class=\"n\">value</span> <span class=\"n\">chicken</span><span class=\"o\">.</span> <span class=\"n\">Should</span> <span class=\"n\">be</span> <span class=\"n\">one</span> <span class=\"n\">of</span><span class=\"p\">:</span> <span class=\"n\">spam</span><span class=\"p\">,</span> <span class=\"n\">eggs</span><span class=\"p\">,</span> <span class=\"n\">bacon</span>\n</pre>\n<hr>\n<p><code>val_type</code> \u2014 factory that returns validator, which checks if specified value is of correct type.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">foliant.preprocessors.utils.combined_options</span> <span class=\"kn\">import</span> <span class=\"n\">val_type</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">validator</span> <span class=\"o\">=</span> <span class=\"n\">val_type</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"n\">Options</span><span class=\"p\">({</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"mi\">998</span><span class=\"p\">},</span> <span class=\"n\">validators</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"n\">validator</span><span class=\"p\">})</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n  <span class=\"o\">...</span>\n<span class=\"n\">foliant</span><span class=\"o\">.</span><span class=\"n\">preprocessors</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">combined_options</span><span class=\"o\">.</span><span class=\"n\">ValidationError</span><span class=\"p\">:</span> <span class=\"n\">Error</span> <span class=\"ow\">in</span> <span class=\"n\">option</span> <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"n\">Unsupported</span> <span class=\"n\">option</span> <span class=\"n\">value</span> <span class=\"mf\">998.</span> <span class=\"n\">Must</span> <span class=\"n\">be</span> <span class=\"n\">of</span> <span class=\"nb\">type</span> <span class=\"o\">&lt;</span><span class=\"k\">class</span> <span class=\"err\">'</span><span class=\"nc\">str</span><span class=\"s1\">'&gt;</span>\n</pre>\n<p>You can also specify a list of supported types:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">correct</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">validator</span> <span class=\"o\">=</span> <span class=\"n\">val_type</span><span class=\"p\">(</span><span class=\"n\">correct</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"n\">Options</span><span class=\"p\">({</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">},</span> <span class=\"n\">validators</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"n\">validator</span><span class=\"p\">})</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"n\">Options</span><span class=\"p\">({</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'Bob'</span><span class=\"p\">,</span> <span class=\"s1\">'Alice'</span><span class=\"p\">]},</span> <span class=\"n\">validators</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"n\">validator</span><span class=\"p\">})</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n  <span class=\"o\">...</span>\n<span class=\"n\">foliant</span><span class=\"o\">.</span><span class=\"n\">preprocessors</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">combined_options</span><span class=\"o\">.</span><span class=\"n\">ValidationError</span><span class=\"p\">:</span> <span class=\"n\">Error</span> <span class=\"ow\">in</span> <span class=\"n\">option</span> <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"n\">Unsupported</span> <span class=\"n\">option</span> <span class=\"n\">value</span> <span class=\"p\">[</span><span class=\"s1\">'Bob'</span><span class=\"p\">,</span> <span class=\"s1\">'Alice'</span><span class=\"p\">]</span><span class=\"o\">.</span> <span class=\"n\">Must</span> <span class=\"n\">be</span> <span class=\"n\">of</span> <span class=\"nb\">type</span> <span class=\"o\">&lt;</span><span class=\"k\">class</span> <span class=\"err\">'</span><span class=\"nc\">str</span><span class=\"s1\">'&gt;, &lt;class '</span><span class=\"nb\">int</span><span class=\"s1\">'&gt;, None</span>\n</pre>\n<hr>\n<p><code>validate_exists</code> \u2014 checks if specified path exists in file system.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">foliant.preprocessors.utils.combined_options</span> <span class=\"kn\">import</span> <span class=\"n\">validate_exists</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"n\">Options</span><span class=\"p\">({</span><span class=\"s1\">'fp'</span><span class=\"p\">:</span> <span class=\"s1\">'/'</span><span class=\"p\">},</span> <span class=\"n\">validators</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'fp'</span><span class=\"p\">:</span> <span class=\"n\">validate_exists</span><span class=\"p\">})</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"n\">Options</span><span class=\"p\">({</span><span class=\"s1\">'fp'</span><span class=\"p\">:</span> <span class=\"s1\">'/wrong'</span><span class=\"p\">},</span> <span class=\"n\">validators</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'fp'</span><span class=\"p\">:</span> <span class=\"n\">validate_exists</span><span class=\"p\">})</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n  <span class=\"o\">...</span>\n<span class=\"n\">foliant</span><span class=\"o\">.</span><span class=\"n\">preprocessors</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">combined_options</span><span class=\"o\">.</span><span class=\"n\">ValidationError</span><span class=\"p\">:</span> <span class=\"n\">Error</span> <span class=\"ow\">in</span> <span class=\"n\">option</span> <span class=\"s2\">\"fp\"</span><span class=\"p\">:</span> <span class=\"n\">Path</span> <span class=\"o\">/</span><span class=\"n\">wrong</span> <span class=\"n\">does</span> <span class=\"ow\">not</span> <span class=\"n\">exist</span><span class=\"o\">.</span>\n</pre>\n<p><strong>Convertors</strong></p>\n<p><code>yaml_to_dict_convertor</code> \u2014 converts yaml-string to python dict. If value is a dict already \u2014 just returns it. <strong>DEPRECATED:</strong> since Foliant 1.0.9 all tag option values are treated as YAML.</p>\n<hr>\n<p><code>boolean_convertor</code> \u2014 converts strings and integers into Boolean according to the table</p>\n<table>\n<thead>\n<tr>\n<th>value</th>\n<th>result</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>1</code></td>\n<td><code>True</code></td>\n</tr>\n<tr>\n<td><code>0</code></td>\n<td><code>False</code></td>\n</tr>\n<tr>\n<td><code>'1'</code></td>\n<td><code>True</code></td>\n</tr>\n<tr>\n<td><code>'0'</code></td>\n<td><code>False</code></td>\n</tr>\n<tr>\n<td><code>'y'</code></td>\n<td><code>True</code></td>\n</tr>\n<tr>\n<td><code>'n'</code></td>\n<td><code>False</code></td>\n</tr>\n<tr>\n<td><code>'yes'</code></td>\n<td><code>True</code></td>\n</tr>\n<tr>\n<td><code>'no'</code></td>\n<td><code>False</code></td>\n</tr>\n<tr>\n<td><code>'true'</code></td>\n<td><code>True</code></td>\n</tr>\n<tr>\n<td><code>'false'</code></td>\n<td><code>False</code></td>\n</tr>\n<tr>\n<td><code>&lt;other&gt;</code></td>\n<td><code>True</code></td>\n</tr></tbody></table>\n<hr>\n<p><code>rel_path_convertor</code> \u2014  Convertor factory which makes path, supplied in option value, relative to parent_path, set during the convertor initialization. Returns <code>PosixPath</code> object.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">foliant.preprocessors.utils.combined_options</span> <span class=\"kn\">import</span> <span class=\"n\">rel_path_convertor</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">my_conv</span> <span class=\"o\">=</span> <span class=\"n\">rel_path_convertor</span><span class=\"p\">(</span><span class=\"s1\">'/usr/src/app'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"n\">Options</span><span class=\"p\">({</span><span class=\"s1\">'index'</span><span class=\"p\">:</span> <span class=\"s1\">'src/index.md'</span><span class=\"p\">},</span> <span class=\"n\">convertors</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'index'</span><span class=\"p\">:</span> <span class=\"n\">my_conv</span><span class=\"p\">})</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">options</span><span class=\"p\">[</span><span class=\"s1\">'index'</span><span class=\"p\">]</span>\n<span class=\"n\">PosixPath</span><span class=\"p\">(</span><span class=\"s1\">'/usr/src/app/src/index.md'</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 6864175, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "f1b92d76f88d3d7541d3fe27ccee7e84", "sha256": "af262a20cc02d6bb5e0d1a3bcd70c55c9767c11360e738dccda1df2382875cf5"}, "downloads": -1, "filename": "foliantcontrib.utils.combined_options-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f1b92d76f88d3d7541d3fe27ccee7e84", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6995, "upload_time": "2019-02-14T11:00:22", "upload_time_iso_8601": "2019-02-14T11:00:22.228541Z", "url": "https://files.pythonhosted.org/packages/72/f6/b8c0df9683f2199066e942b35b452c3a1d04d70cb986a84263c2f987d6e1/foliantcontrib.utils.combined_options-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fab83115262cc292aacf9220999f1078", "sha256": "9984c35f415ad59e51caa162d748c386ff95620d311cc03f05d591848bfff10f"}, "downloads": -1, "filename": "foliantcontrib.utils.combined_options-1.0.0.tar.gz", "has_sig": false, "md5_digest": "fab83115262cc292aacf9220999f1078", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6068, "upload_time": "2019-02-14T11:00:24", "upload_time_iso_8601": "2019-02-14T11:00:24.475409Z", "url": "https://files.pythonhosted.org/packages/aa/7e/0ee08f34dbac2263453b20b83d93841f2a77d969f44db3f05bc9f5e166ad/foliantcontrib.utils.combined_options-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "b60308aa34c543eccfda39cabbec46a2", "sha256": "f89a52ff98928fbd0ff5b52b5490333dcda3ae0fb6a24b7e82b326a3ff819a60"}, "downloads": -1, "filename": "foliantcontrib.utils.combined_options-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b60308aa34c543eccfda39cabbec46a2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7163, "upload_time": "2019-03-21T13:51:36", "upload_time_iso_8601": "2019-03-21T13:51:36.943925Z", "url": "https://files.pythonhosted.org/packages/e3/ee/7780aa8cf0506a5a73e2f8eda69aadea6559065a8d87c02126d91a253b6b/foliantcontrib.utils.combined_options-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fc0bc2033301a7e046726513b3486dd2", "sha256": "da6e6d2c45849411974889199cfd43e5f51e2f19eefb4621d8ee9f0d9bb77a8a"}, "downloads": -1, "filename": "foliantcontrib.utils.combined_options-1.0.1.tar.gz", "has_sig": false, "md5_digest": "fc0bc2033301a7e046726513b3486dd2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6238, "upload_time": "2019-03-21T13:51:38", "upload_time_iso_8601": "2019-03-21T13:51:38.212163Z", "url": "https://files.pythonhosted.org/packages/6b/05/2d8fe41335223035013022b59445fc771cb4e5c011726d59d73a87893129/foliantcontrib.utils.combined_options-1.0.1.tar.gz", "yanked": false}], "1.0.10": [{"comment_text": "", "digests": {"md5": "3dabebe2a14598f0849789eb0d01aaa1", "sha256": "33e07427297df8c3bef5d973abfe6c261ce2bb8826bb3ac3b5e89db5e3ea087d"}, "downloads": -1, "filename": "foliantcontrib.utils.combined_options-1.0.10-py3-none-any.whl", "has_sig": false, "md5_digest": "3dabebe2a14598f0849789eb0d01aaa1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9418, "upload_time": "2020-03-23T08:50:50", "upload_time_iso_8601": "2020-03-23T08:50:50.475009Z", "url": "https://files.pythonhosted.org/packages/d9/20/a239b47a7964a0e439c4f2d4d2e1dfc0b7964af0e3fa253bcd96a72865c5/foliantcontrib.utils.combined_options-1.0.10-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "922b735e162990e06aad98a656eb08fa", "sha256": "0e71cbcfad99229acf2d3502a74b99f4758bf7e5d4bdcc2d43a61932d25b7bd1"}, "downloads": -1, "filename": "foliantcontrib.utils.combined_options-1.0.10.tar.gz", "has_sig": false, "md5_digest": "922b735e162990e06aad98a656eb08fa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9827, "upload_time": "2020-03-23T08:50:52", "upload_time_iso_8601": "2020-03-23T08:50:52.033152Z", "url": "https://files.pythonhosted.org/packages/ee/fe/88336054b40239dbefa161bb95244ce71dd91436edaba2e324cee6a1f03a/foliantcontrib.utils.combined_options-1.0.10.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "d1101aace0fb48941f387d7f4bc448b4", "sha256": "5a766c49272aee2e9036a84fc41082cef927e6c6d910e6cdf38a64e76ece9551"}, "downloads": -1, "filename": "foliantcontrib.utils.combined_options-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "d1101aace0fb48941f387d7f4bc448b4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7520, "upload_time": "2019-03-27T13:13:39", "upload_time_iso_8601": "2019-03-27T13:13:39.738689Z", "url": "https://files.pythonhosted.org/packages/9f/94/8e2ece2a1a88e69b8ccb31ec89a5e81ef2522481728578e1e3abccb6ec08/foliantcontrib.utils.combined_options-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "24b5ffb559960969fc50b029bd67c864", "sha256": "980ad26840925104bd737a691d1d0104618d5d12212cc672ced875098c18b558"}, "downloads": -1, "filename": "foliantcontrib.utils.combined_options-1.0.2.tar.gz", "has_sig": false, "md5_digest": "24b5ffb559960969fc50b029bd67c864", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7407, "upload_time": "2019-03-27T13:13:41", "upload_time_iso_8601": "2019-03-27T13:13:41.637746Z", "url": "https://files.pythonhosted.org/packages/c8/8c/a10b234a4bb51bbb8b3c2da32dd58ac1fd657c2f8158c4cfc2210feaf203/foliantcontrib.utils.combined_options-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "bfcd980cc48e0012b98e6da0f799e1ff", "sha256": "afa131edfccbbf43b1845b011bdd6d36339577e901b73bfc8d2fe56bfc1a6473"}, "downloads": -1, "filename": "foliantcontrib.utils.combined_options-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "bfcd980cc48e0012b98e6da0f799e1ff", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7537, "upload_time": "2019-05-15T05:52:09", "upload_time_iso_8601": "2019-05-15T05:52:09.775984Z", "url": "https://files.pythonhosted.org/packages/51/11/ee12b859927d94b726cc687cf1468d6e8344f606204b451b4c3601f7ecea/foliantcontrib.utils.combined_options-1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7e787ec5e5688e75881a69cef2fa00c8", "sha256": "f273411e5ac98d6211ed4a67ef9c25089e51a096b4b63c8b9ae4f274e7102d33"}, "downloads": -1, "filename": "foliantcontrib.utils.combined_options-1.0.3.tar.gz", "has_sig": false, "md5_digest": "7e787ec5e5688e75881a69cef2fa00c8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7423, "upload_time": "2019-05-15T05:52:11", "upload_time_iso_8601": "2019-05-15T05:52:11.282808Z", "url": "https://files.pythonhosted.org/packages/de/a0/9aaf94ac142492e084fd4675ec7c61d01d374c98e9d105d457a25c5ebf59/foliantcontrib.utils.combined_options-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "9f4043b56da60e8ef39ede6cd467e612", "sha256": "3a6bd30112478d8e41267e994f85c811ded6f104425103d856bceceb7f3bec50"}, "downloads": -1, "filename": "foliantcontrib.utils.combined_options-1.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "9f4043b56da60e8ef39ede6cd467e612", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7590, "upload_time": "2019-05-20T09:20:43", "upload_time_iso_8601": "2019-05-20T09:20:43.285308Z", "url": "https://files.pythonhosted.org/packages/49/12/3f06f39a8b7360cd6a604da2e21d27de1c1cc4ef37d660419fe670c185b5/foliantcontrib.utils.combined_options-1.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "daee9a97cf3955ff21b60ab59bf6e4f4", "sha256": "908dbe6bfd047161c3f79d23e1ff472b01e9010bf6151f812a34dfb9978e6ddb"}, "downloads": -1, "filename": "foliantcontrib.utils.combined_options-1.0.4.tar.gz", "has_sig": false, "md5_digest": "daee9a97cf3955ff21b60ab59bf6e4f4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7511, "upload_time": "2019-05-20T09:20:45", "upload_time_iso_8601": "2019-05-20T09:20:45.754788Z", "url": "https://files.pythonhosted.org/packages/87/a5/38ab559f9bd21747d446d64448fc52fcb6ba5771856333bb710cdca8f01f/foliantcontrib.utils.combined_options-1.0.4.tar.gz", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "ffd10219f3d9a3f714f57e9b33b2ce29", "sha256": "5c7be0d222a67369da382e378987b4e1428863cceb610b27ce7fcd8b743c16dd"}, "downloads": -1, "filename": "foliantcontrib.utils.combined_options-1.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "ffd10219f3d9a3f714f57e9b33b2ce29", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7601, "upload_time": "2019-06-14T13:24:26", "upload_time_iso_8601": "2019-06-14T13:24:26.267502Z", "url": "https://files.pythonhosted.org/packages/17/4c/86d1d8eae88a08d9cb5ad550b7b983d6d22da3b0cb559ddeb4ccaaf42f45/foliantcontrib.utils.combined_options-1.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3e89623848d2fcca32b3b522ecfb2477", "sha256": "0975f1cf270ce725d7a3b8fb64565396bb8206049cd44bd25f492d1d7daa8464"}, "downloads": -1, "filename": "foliantcontrib.utils.combined_options-1.0.5.tar.gz", "has_sig": false, "md5_digest": "3e89623848d2fcca32b3b522ecfb2477", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7517, "upload_time": "2019-06-14T13:24:27", "upload_time_iso_8601": "2019-06-14T13:24:27.769046Z", "url": "https://files.pythonhosted.org/packages/55/2c/8ed9ed351e1fa47fa444ba0d316e3beb13f60baa78343e64f10119a0e1ac/foliantcontrib.utils.combined_options-1.0.5.tar.gz", "yanked": false}], "1.0.6": [{"comment_text": "", "digests": {"md5": "7d7b748f8de88f5519471e3e4f7767be", "sha256": "e046c54f39551f8f17a26ecb8d6d48a090a3cdd9159d3b336397803b4e3777ed"}, "downloads": -1, "filename": "foliantcontrib.utils.combined_options-1.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "7d7b748f8de88f5519471e3e4f7767be", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8456, "upload_time": "2019-08-16T12:21:49", "upload_time_iso_8601": "2019-08-16T12:21:49.710734Z", "url": "https://files.pythonhosted.org/packages/73/f1/1854650191be10706666ae5afe2bffa1333f2ff086fc284cc3e4c0e60266/foliantcontrib.utils.combined_options-1.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "080d5bb56e5a5f60df7fbc81bc6b9a59", "sha256": "6211b3d313f24bc20ba7fad6d9dff4b7495d6106a88d0b5e5a776957d19bf199"}, "downloads": -1, "filename": "foliantcontrib.utils.combined_options-1.0.6.tar.gz", "has_sig": false, "md5_digest": "080d5bb56e5a5f60df7fbc81bc6b9a59", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8525, "upload_time": "2019-08-16T12:21:51", "upload_time_iso_8601": "2019-08-16T12:21:51.153048Z", "url": "https://files.pythonhosted.org/packages/8f/7f/74c6f8064da7b688bf9f39d593cf068c1c66a06961fd98df411f770e590e/foliantcontrib.utils.combined_options-1.0.6.tar.gz", "yanked": false}], "1.0.7": [{"comment_text": "", "digests": {"md5": "946de0e27a3c594cca301962df550415", "sha256": "214395a9c7a8b3d4ff1bb0d8c8b98eadfefa15e3d736e5ebef32778040b9f50a"}, "downloads": -1, "filename": "foliantcontrib.utils.combined_options-1.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "946de0e27a3c594cca301962df550415", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8624, "upload_time": "2019-08-26T13:28:22", "upload_time_iso_8601": "2019-08-26T13:28:22.249188Z", "url": "https://files.pythonhosted.org/packages/3c/81/cb19f8ab3058cd21dcfd80a5e728149515a3a6dfee079a3a946124b97929/foliantcontrib.utils.combined_options-1.0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "88a375f43933f5cd459258d654a5c198", "sha256": "c167dc81a020c74226d188df09b6ad0fecb0f9b44794da4526851a05a431cf57"}, "downloads": -1, "filename": "foliantcontrib.utils.combined_options-1.0.7.tar.gz", "has_sig": false, "md5_digest": "88a375f43933f5cd459258d654a5c198", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8682, "upload_time": "2019-08-26T13:28:24", "upload_time_iso_8601": "2019-08-26T13:28:24.249948Z", "url": "https://files.pythonhosted.org/packages/fe/df/304866f99191858f3adad5f34851f38ee036cdb459e47bd9a23536bc96ba/foliantcontrib.utils.combined_options-1.0.7.tar.gz", "yanked": false}], "1.0.8": [{"comment_text": "", "digests": {"md5": "08a1b5498bb04ed3851264dabc8a84c1", "sha256": "b573b22b6a33f74e5cd24f9c9d2ce36745e59a687498dcf1ca8c77b2f716f712"}, "downloads": -1, "filename": "foliantcontrib.utils.combined_options-1.0.8-py3-none-any.whl", "has_sig": false, "md5_digest": "08a1b5498bb04ed3851264dabc8a84c1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8622, "upload_time": "2019-10-02T07:11:27", "upload_time_iso_8601": "2019-10-02T07:11:27.729693Z", "url": "https://files.pythonhosted.org/packages/f9/a9/91759a8f4794c47d0a43f994e9cf141e50f8aa2c6b51e5b05f5121c90793/foliantcontrib.utils.combined_options-1.0.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "25ec3af2e5029fddfe5004caa63f1630", "sha256": "21a5d9f479bf517002086b4cc74013adce03ddd3782afa934b5864e9ece26017"}, "downloads": -1, "filename": "foliantcontrib.utils.combined_options-1.0.8.tar.gz", "has_sig": false, "md5_digest": "25ec3af2e5029fddfe5004caa63f1630", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8676, "upload_time": "2019-10-02T07:11:31", "upload_time_iso_8601": "2019-10-02T07:11:31.142920Z", "url": "https://files.pythonhosted.org/packages/61/63/9aaec1ebddf5d771cbec5011a60a869fd0ae9dab61278e4f83cc14d873d1/foliantcontrib.utils.combined_options-1.0.8.tar.gz", "yanked": false}], "1.0.9": [{"comment_text": "", "digests": {"md5": "c385f85f1478cb793abb67fb278d34ac", "sha256": "70d32f2e90c31cc81af9d00f1ac45374cd0009733ce24d3caecfc70953f80851"}, "downloads": -1, "filename": "foliantcontrib.utils.combined_options-1.0.9-py3-none-any.whl", "has_sig": false, "md5_digest": "c385f85f1478cb793abb67fb278d34ac", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9083, "upload_time": "2020-02-07T06:43:10", "upload_time_iso_8601": "2020-02-07T06:43:10.856961Z", "url": "https://files.pythonhosted.org/packages/16/5a/a2eaf51ae4a6f1ff9045906b6ba0633325419a31261adb558079aeb6b54f/foliantcontrib.utils.combined_options-1.0.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "91e93009532b751f6c1376e73d1643de", "sha256": "2b5654fbb4fc448001c422bd64c0e700501367c416209f08100a5282b3f1182a"}, "downloads": -1, "filename": "foliantcontrib.utils.combined_options-1.0.9.tar.gz", "has_sig": false, "md5_digest": "91e93009532b751f6c1376e73d1643de", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9467, "upload_time": "2020-02-07T06:43:12", "upload_time_iso_8601": "2020-02-07T06:43:12.798776Z", "url": "https://files.pythonhosted.org/packages/5e/b3/3e1b85cb14c872ebb2759af2b2298dd666aea019bcf866388efa22c13a46/foliantcontrib.utils.combined_options-1.0.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3dabebe2a14598f0849789eb0d01aaa1", "sha256": "33e07427297df8c3bef5d973abfe6c261ce2bb8826bb3ac3b5e89db5e3ea087d"}, "downloads": -1, "filename": "foliantcontrib.utils.combined_options-1.0.10-py3-none-any.whl", "has_sig": false, "md5_digest": "3dabebe2a14598f0849789eb0d01aaa1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9418, "upload_time": "2020-03-23T08:50:50", "upload_time_iso_8601": "2020-03-23T08:50:50.475009Z", "url": "https://files.pythonhosted.org/packages/d9/20/a239b47a7964a0e439c4f2d4d2e1dfc0b7964af0e3fa253bcd96a72865c5/foliantcontrib.utils.combined_options-1.0.10-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "922b735e162990e06aad98a656eb08fa", "sha256": "0e71cbcfad99229acf2d3502a74b99f4758bf7e5d4bdcc2d43a61932d25b7bd1"}, "downloads": -1, "filename": "foliantcontrib.utils.combined_options-1.0.10.tar.gz", "has_sig": false, "md5_digest": "922b735e162990e06aad98a656eb08fa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9827, "upload_time": "2020-03-23T08:50:52", "upload_time_iso_8601": "2020-03-23T08:50:52.033152Z", "url": "https://files.pythonhosted.org/packages/ee/fe/88336054b40239dbefa161bb95244ce71dd91436edaba2e324cee6a1f03a/foliantcontrib.utils.combined_options-1.0.10.tar.gz", "yanked": false}], "timestamp": "Fri May  8 01:01:06 2020"}