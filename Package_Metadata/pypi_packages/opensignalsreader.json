{"info": {"author": "Pedro Gomes", "author_email": "pgomes92@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Intended Audience :: Education", "Intended Audience :: Science/Research", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3"], "description": "# opensignalsreader\nPython package to read [OpenSignals (r)evolution](http://bitalino.com/en/software) files and automatic sensor data conversion for [BITalino (r)evolution](http://bitalino.com) sensor data.\n\n**Important:** \nThis repository does not contain any code written by PLUX and/or the BITalino team. Use the [issue board of the opensignalsreader repository](https://github.com/PGomes92/opensignalsreader/issues) in case you experience any issues using opensignalsreader or if you need any support, instead of contacting PLUX.\n\n\n## Installation\nThis package can be installed using the ```pip``` tool:\n```python\npip install opensignalsreader\n```\n\n### Examples & How to Use this Package\nThis package comes with the OpenSignalsReader class which facilitates the import of sensor signals acquired using the _OpenSignals (r)evolution_ software. Additionally, it does also read and save the most important acquisition metadata.\n\nThe examples below demonstrate how to use this class to load OpenSignals files, access signals, access metadata, and how to plot the imported sensor data.\n\n#### Reading OpenSignals Files\nImport OpenSignalsReader class and read OpenSignals file ('SampleECG.txt').\n```python\n# Import OpenSignalsReader\nfrom opensignalsreader import OpenSignalsReader\n\n# Read OpenSignals file\nacq = OpenSignalsReader('SampleECG.txt')\n```\n\nNote, when using the `OpenSignalsReader` class in scripts (or other formats), use absolute file paths to ensure that the file will be found and used.\n\n#### Accessing Sensor Data\nObjects of the `OpenSignalsReader` class store raw digital sensor values and additionally their conversion into the sensor's original physical units (e.g. ECG -> mV). Use the `OpenSignalsReader.raw()` and the `OpenSignalsReader.signal()` methods to access the signals.\n\nAccessing individual sensor data (this method returns data in a NumPy array):\n```python\n# Access single sensor signal using the sensor's channel number\nacq.raw(2)\nacq.signal(2)\n\n# Access single sensor signal using the sensor's label\nacq.raw('ECG')\nacq.signal('ECG')\n```\n\nAccessing multiple sensor data (this method returns data in a dictionary with the sensor labels as keys):\n```python\n# Access multiple sensor signals using the channel numbers (here: channel 1 & 2)\nacq.raw([1,2])\nacq.signal([1,2])\n\n# Access multiple sensor signals using the sensor labels (here: channel 1 & 2)\nacq.raw(['ECG', 'EEG'])\nacq.signal(['ECG', 'EEG'])\n```\n\n#### Plotting Sensor Data\nThe OpenSignalsReader class comes with plotting features as shown below.\n\nRead OpenSignals file and plot all signals.\n```python\n# Read OpenSignals file and plot all signals\nacq = OpenSignalsReader('SampleECG.txt', show=True)\n\n# Read OpenSignals file and plot all raw signals.\nacq = OpenSignalsReader('SampleECG.txt', show=True, raw=True)\n```\nPlotting a single channel ECG signal results in the plot below.\n\n![Image](SampleECG.png)\n\nAlternatively, select the individual signals you want to plot using the `OpenSignalsReader.plot()` and the signal sensor label or channel number.\n\n```python\n# Plot ECG signal using the channel number\nacq.plot('ECG')\n\n# Plot ECG signal using the sensor label\nacq.plot(2)\n\n# Plotting multiple signals using the channel number\nacq.plot(['ECG', 'EMG'])\n\n# Plotting multiple signals using the sensor label\nacq.plot([1, 2])\n```\n\nTo plot the raw signals set the `raw` parameter to `True`.\n\n```python\n# Plot raw ECG data\nacq.plot('ECG', raw=True)\n```\n\n### BITalino (r)evolution Transfer Functions\nThis package includes the _bitalino_tf_ module which contains all available transfer functions of the current BITalino (r)evolution sensors. It is used by the _OpenSignalsReader_ class to convert raw signal samples imported from OpenSignals files into their original units.\n\nThis package can also be useful if you want to convert sensor signals within your own software when not importing signals from the OpenSignals files.\n\nBITalino sample series can be converted into their original units using the sensor's transfer function. See below how to use the functions of this module on the example of the ECG sensor.\n```python\nimport numpy as np\nimport opensignalsreader.bitalino_tf as bit\nsignal = np.loadtxt('SampleECG.txt', 'r')[:, -1]\n\n# Convert signal to mV (10-bit resolution as default resolution)\necg_signal = bit.ecg(signal)\n\n# Convert signal acquired with 6-bit sampling resolution\necg_signal = bit.ecg(signal, 6)\n```\n\nList of currently supported sensors (& datasheets):\n- [Electrocardiography (ECG)](http://bitalino.com/datasheets/REVOLUTION_ECG_Sensor_Datasheet.pdf)\n- [Electroencephalography (EEG)](http://bitalino.com/datasheets/REVOLUTION_EEG_Sensor_Datasheet.pdf)\n- [Electromyography (EMG)](http://bitalino.com/datasheets/REVOLUTION_EMG_Sensor_Datasheet.pdf)\n- [Electrodermal Activity (EDA)](http://bitalino.com/datasheets/REVOLUTION_EDA_Sensor_Datasheet.pdf)\n- [Accelerometer (ACC)](http://bitalino.com/datasheets/REVOLUTION_ACC_Sensor_Datasheet.pdf)\n- [Temperature (TEMP)](http://bitalino.com/datasheets/REVOLUTION_TMP_Sensor_Datasheet.pdf)\n- [High Definition Temperature (NTC)](http://bitalino.com/datasheets/NTC_Sensor_Datasheet.pdf)\n- [Light (LUX)](http://bitalino.com/datasheets/REVOLUTION_LUX_Sensor_Datasheet.pdf)\n- SpO2 Reader (OSL)\n- Glucose Meter Reader (GMR)\n- Blood Pressure Reader (BPR)\n- [Electrogastropraphy (EGG)](http://bitalino.com/datasheets/REVOLUTION_EGG_Sensor_Datasheet.pdf)\n- [Electrooculography (EOG)](http://bitalino.com/datasheets/REVOLUTION_EOG_Sensor_Datasheet.pdf)\n\n### Useful Links\nDetailed documentation about BITalino (r)evolution sensors can be found here:\n\nhttp://bitalino.com/en/learn/documentation\n\nBITalino (r)evolution sample files can be found here:\n\nhttps://github.com/BITalinoWorld/revolution-sample-data\n\nDownload the OpenSignals (r)evolution software from the BITalino website:\n\nhttp://bitalino.com/en/software\n\n### Important Notes\n- Please **do not sent support e-mails for the use of this package to PLUX**. This package is not part of any of PLUX's solutions, but an independent open-source package to facilitate the data import stored in OpenSignals files. Use the [issue board of this repository](https://github.com/PGomes92/opensignalsreader/issues) in case you find any issues with this package or if you need any support.\n- OpenSignals (r)evolution files in .H5 or .EDF format are not supported (yet)\n- No multi-device acquisition functions supported (yet, currently limited to a single device only) \n- Number of plotted signals is currently limited to 6 signals only\n\n### Dependencies\n- [matplotlib](https://matplotlib.org)\n- [numpy](http://www.numpy.org)\n\n### Context of this Work\nThis package is part of the master thesis \"Development of an Open-Source Python Toolbox for Heart Rate Variability (HRV)\" at the University of Applied Sciences Hamburg, Germany and PLUX wireless biosignals, S.A.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/PGomes92/opensignalsreader", "keywords": "opensignals,opensignalsreader,physiological signals,BITalino,biosignalsplux", "license": "", "maintainer": "", "maintainer_email": "", "name": "opensignalsreader", "package_url": "https://pypi.org/project/opensignalsreader/", "platform": "", "project_url": "https://pypi.org/project/opensignalsreader/", "project_urls": {"Homepage": "https://github.com/PGomes92/opensignalsreader"}, "release_url": "https://pypi.org/project/opensignalsreader/0.2.2/", "requires_dist": ["numpy", "matplotlib"], "requires_python": "", "summary": "Python package to read OpenSignals (r)evolution files.", "version": "0.2.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>opensignalsreader</h1>\n<p>Python package to read <a href=\"http://bitalino.com/en/software\" rel=\"nofollow\">OpenSignals (r)evolution</a> files and automatic sensor data conversion for <a href=\"http://bitalino.com\" rel=\"nofollow\">BITalino (r)evolution</a> sensor data.</p>\n<p><strong>Important:</strong>\nThis repository does not contain any code written by PLUX and/or the BITalino team. Use the <a href=\"https://github.com/PGomes92/opensignalsreader/issues\" rel=\"nofollow\">issue board of the opensignalsreader repository</a> in case you experience any issues using opensignalsreader or if you need any support, instead of contacting PLUX.</p>\n<h2>Installation</h2>\n<p>This package can be installed using the <code>pip</code> tool:</p>\n<pre><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">opensignalsreader</span>\n</pre>\n<h3>Examples &amp; How to Use this Package</h3>\n<p>This package comes with the OpenSignalsReader class which facilitates the import of sensor signals acquired using the <em>OpenSignals (r)evolution</em> software. Additionally, it does also read and save the most important acquisition metadata.</p>\n<p>The examples below demonstrate how to use this class to load OpenSignals files, access signals, access metadata, and how to plot the imported sensor data.</p>\n<h4>Reading OpenSignals Files</h4>\n<p>Import OpenSignalsReader class and read OpenSignals file ('SampleECG.txt').</p>\n<pre><span class=\"c1\"># Import OpenSignalsReader</span>\n<span class=\"kn\">from</span> <span class=\"nn\">opensignalsreader</span> <span class=\"kn\">import</span> <span class=\"n\">OpenSignalsReader</span>\n\n<span class=\"c1\"># Read OpenSignals file</span>\n<span class=\"n\">acq</span> <span class=\"o\">=</span> <span class=\"n\">OpenSignalsReader</span><span class=\"p\">(</span><span class=\"s1\">'SampleECG.txt'</span><span class=\"p\">)</span>\n</pre>\n<p>Note, when using the <code>OpenSignalsReader</code> class in scripts (or other formats), use absolute file paths to ensure that the file will be found and used.</p>\n<h4>Accessing Sensor Data</h4>\n<p>Objects of the <code>OpenSignalsReader</code> class store raw digital sensor values and additionally their conversion into the sensor's original physical units (e.g. ECG -&gt; mV). Use the <code>OpenSignalsReader.raw()</code> and the <code>OpenSignalsReader.signal()</code> methods to access the signals.</p>\n<p>Accessing individual sensor data (this method returns data in a NumPy array):</p>\n<pre><span class=\"c1\"># Access single sensor signal using the sensor's channel number</span>\n<span class=\"n\">acq</span><span class=\"o\">.</span><span class=\"n\">raw</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">acq</span><span class=\"o\">.</span><span class=\"n\">signal</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Access single sensor signal using the sensor's label</span>\n<span class=\"n\">acq</span><span class=\"o\">.</span><span class=\"n\">raw</span><span class=\"p\">(</span><span class=\"s1\">'ECG'</span><span class=\"p\">)</span>\n<span class=\"n\">acq</span><span class=\"o\">.</span><span class=\"n\">signal</span><span class=\"p\">(</span><span class=\"s1\">'ECG'</span><span class=\"p\">)</span>\n</pre>\n<p>Accessing multiple sensor data (this method returns data in a dictionary with the sensor labels as keys):</p>\n<pre><span class=\"c1\"># Access multiple sensor signals using the channel numbers (here: channel 1 &amp; 2)</span>\n<span class=\"n\">acq</span><span class=\"o\">.</span><span class=\"n\">raw</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"n\">acq</span><span class=\"o\">.</span><span class=\"n\">signal</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># Access multiple sensor signals using the sensor labels (here: channel 1 &amp; 2)</span>\n<span class=\"n\">acq</span><span class=\"o\">.</span><span class=\"n\">raw</span><span class=\"p\">([</span><span class=\"s1\">'ECG'</span><span class=\"p\">,</span> <span class=\"s1\">'EEG'</span><span class=\"p\">])</span>\n<span class=\"n\">acq</span><span class=\"o\">.</span><span class=\"n\">signal</span><span class=\"p\">([</span><span class=\"s1\">'ECG'</span><span class=\"p\">,</span> <span class=\"s1\">'EEG'</span><span class=\"p\">])</span>\n</pre>\n<h4>Plotting Sensor Data</h4>\n<p>The OpenSignalsReader class comes with plotting features as shown below.</p>\n<p>Read OpenSignals file and plot all signals.</p>\n<pre><span class=\"c1\"># Read OpenSignals file and plot all signals</span>\n<span class=\"n\">acq</span> <span class=\"o\">=</span> <span class=\"n\">OpenSignalsReader</span><span class=\"p\">(</span><span class=\"s1\">'SampleECG.txt'</span><span class=\"p\">,</span> <span class=\"n\">show</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Read OpenSignals file and plot all raw signals.</span>\n<span class=\"n\">acq</span> <span class=\"o\">=</span> <span class=\"n\">OpenSignalsReader</span><span class=\"p\">(</span><span class=\"s1\">'SampleECG.txt'</span><span class=\"p\">,</span> <span class=\"n\">show</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">raw</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>Plotting a single channel ECG signal results in the plot below.</p>\n<p><img alt=\"Image\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cf66ada0b8e86529f04400ea77fc0c9b81505527/53616d706c654543472e706e67\"></p>\n<p>Alternatively, select the individual signals you want to plot using the <code>OpenSignalsReader.plot()</code> and the signal sensor label or channel number.</p>\n<pre><span class=\"c1\"># Plot ECG signal using the channel number</span>\n<span class=\"n\">acq</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"s1\">'ECG'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Plot ECG signal using the sensor label</span>\n<span class=\"n\">acq</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Plotting multiple signals using the channel number</span>\n<span class=\"n\">acq</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">([</span><span class=\"s1\">'ECG'</span><span class=\"p\">,</span> <span class=\"s1\">'EMG'</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># Plotting multiple signals using the sensor label</span>\n<span class=\"n\">acq</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">])</span>\n</pre>\n<p>To plot the raw signals set the <code>raw</code> parameter to <code>True</code>.</p>\n<pre><span class=\"c1\"># Plot raw ECG data</span>\n<span class=\"n\">acq</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"s1\">'ECG'</span><span class=\"p\">,</span> <span class=\"n\">raw</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<h3>BITalino (r)evolution Transfer Functions</h3>\n<p>This package includes the <em>bitalino_tf</em> module which contains all available transfer functions of the current BITalino (r)evolution sensors. It is used by the <em>OpenSignalsReader</em> class to convert raw signal samples imported from OpenSignals files into their original units.</p>\n<p>This package can also be useful if you want to convert sensor signals within your own software when not importing signals from the OpenSignals files.</p>\n<p>BITalino sample series can be converted into their original units using the sensor's transfer function. See below how to use the functions of this module on the example of the ECG sensor.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">opensignalsreader.bitalino_tf</span> <span class=\"k\">as</span> <span class=\"nn\">bit</span>\n<span class=\"n\">signal</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">loadtxt</span><span class=\"p\">(</span><span class=\"s1\">'SampleECG.txt'</span><span class=\"p\">,</span> <span class=\"s1\">'r'</span><span class=\"p\">)[:,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># Convert signal to mV (10-bit resolution as default resolution)</span>\n<span class=\"n\">ecg_signal</span> <span class=\"o\">=</span> <span class=\"n\">bit</span><span class=\"o\">.</span><span class=\"n\">ecg</span><span class=\"p\">(</span><span class=\"n\">signal</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Convert signal acquired with 6-bit sampling resolution</span>\n<span class=\"n\">ecg_signal</span> <span class=\"o\">=</span> <span class=\"n\">bit</span><span class=\"o\">.</span><span class=\"n\">ecg</span><span class=\"p\">(</span><span class=\"n\">signal</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">)</span>\n</pre>\n<p>List of currently supported sensors (&amp; datasheets):</p>\n<ul>\n<li><a href=\"http://bitalino.com/datasheets/REVOLUTION_ECG_Sensor_Datasheet.pdf\" rel=\"nofollow\">Electrocardiography (ECG)</a></li>\n<li><a href=\"http://bitalino.com/datasheets/REVOLUTION_EEG_Sensor_Datasheet.pdf\" rel=\"nofollow\">Electroencephalography (EEG)</a></li>\n<li><a href=\"http://bitalino.com/datasheets/REVOLUTION_EMG_Sensor_Datasheet.pdf\" rel=\"nofollow\">Electromyography (EMG)</a></li>\n<li><a href=\"http://bitalino.com/datasheets/REVOLUTION_EDA_Sensor_Datasheet.pdf\" rel=\"nofollow\">Electrodermal Activity (EDA)</a></li>\n<li><a href=\"http://bitalino.com/datasheets/REVOLUTION_ACC_Sensor_Datasheet.pdf\" rel=\"nofollow\">Accelerometer (ACC)</a></li>\n<li><a href=\"http://bitalino.com/datasheets/REVOLUTION_TMP_Sensor_Datasheet.pdf\" rel=\"nofollow\">Temperature (TEMP)</a></li>\n<li><a href=\"http://bitalino.com/datasheets/NTC_Sensor_Datasheet.pdf\" rel=\"nofollow\">High Definition Temperature (NTC)</a></li>\n<li><a href=\"http://bitalino.com/datasheets/REVOLUTION_LUX_Sensor_Datasheet.pdf\" rel=\"nofollow\">Light (LUX)</a></li>\n<li>SpO2 Reader (OSL)</li>\n<li>Glucose Meter Reader (GMR)</li>\n<li>Blood Pressure Reader (BPR)</li>\n<li><a href=\"http://bitalino.com/datasheets/REVOLUTION_EGG_Sensor_Datasheet.pdf\" rel=\"nofollow\">Electrogastropraphy (EGG)</a></li>\n<li><a href=\"http://bitalino.com/datasheets/REVOLUTION_EOG_Sensor_Datasheet.pdf\" rel=\"nofollow\">Electrooculography (EOG)</a></li>\n</ul>\n<h3>Useful Links</h3>\n<p>Detailed documentation about BITalino (r)evolution sensors can be found here:</p>\n<p><a href=\"http://bitalino.com/en/learn/documentation\" rel=\"nofollow\">http://bitalino.com/en/learn/documentation</a></p>\n<p>BITalino (r)evolution sample files can be found here:</p>\n<p><a href=\"https://github.com/BITalinoWorld/revolution-sample-data\" rel=\"nofollow\">https://github.com/BITalinoWorld/revolution-sample-data</a></p>\n<p>Download the OpenSignals (r)evolution software from the BITalino website:</p>\n<p><a href=\"http://bitalino.com/en/software\" rel=\"nofollow\">http://bitalino.com/en/software</a></p>\n<h3>Important Notes</h3>\n<ul>\n<li>Please <strong>do not sent support e-mails for the use of this package to PLUX</strong>. This package is not part of any of PLUX's solutions, but an independent open-source package to facilitate the data import stored in OpenSignals files. Use the <a href=\"https://github.com/PGomes92/opensignalsreader/issues\" rel=\"nofollow\">issue board of this repository</a> in case you find any issues with this package or if you need any support.</li>\n<li>OpenSignals (r)evolution files in .H5 or .EDF format are not supported (yet)</li>\n<li>No multi-device acquisition functions supported (yet, currently limited to a single device only)</li>\n<li>Number of plotted signals is currently limited to 6 signals only</li>\n</ul>\n<h3>Dependencies</h3>\n<ul>\n<li><a href=\"https://matplotlib.org\" rel=\"nofollow\">matplotlib</a></li>\n<li><a href=\"http://www.numpy.org\" rel=\"nofollow\">numpy</a></li>\n</ul>\n<h3>Context of this Work</h3>\n<p>This package is part of the master thesis \"Development of an Open-Source Python Toolbox for Heart Rate Variability (HRV)\" at the University of Applied Sciences Hamburg, Germany and PLUX wireless biosignals, S.A.</p>\n\n          </div>"}, "last_serial": 5368261, "releases": {"0.2.1": [{"comment_text": "", "digests": {"md5": "cf352d57aebe394b4a857e5c12f5f7ea", "sha256": "4f9a77a6814fa71ab0d3e3dfec97ba8f11b72628c8334f104a3c72e8f808beb4"}, "downloads": -1, "filename": "opensignalsreader-0.2.1-py2-none-any.whl", "has_sig": false, "md5_digest": "cf352d57aebe394b4a857e5c12f5f7ea", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 14428, "upload_time": "2018-10-13T19:14:36", "upload_time_iso_8601": "2018-10-13T19:14:36.281456Z", "url": "https://files.pythonhosted.org/packages/07/d1/6eec47cd01b785deafbde5193748f2afed2247fedc3bb2fdbadac6fb37e8/opensignalsreader-0.2.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "82d09ebc8ae366d01f3bbcd714fca789", "sha256": "f1badc7839afab565b2e7d4c820d32e910ae9dddf8eb2c494a7e1fa72ead2b64"}, "downloads": -1, "filename": "opensignalsreader-0.2.1.tar.gz", "has_sig": false, "md5_digest": "82d09ebc8ae366d01f3bbcd714fca789", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14430, "upload_time": "2018-10-13T19:14:38", "upload_time_iso_8601": "2018-10-13T19:14:38.039783Z", "url": "https://files.pythonhosted.org/packages/de/2a/6cf0b7b2a927bfbd1c5c57f398f927a613103cb2142c8b3b24051cf68a0c/opensignalsreader-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "c6bb72c381fc4eb9749ca5234683b7b2", "sha256": "105d973947488d298508b18bf954996703cdcf399002d359743538a7d2444721"}, "downloads": -1, "filename": "opensignalsreader-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "c6bb72c381fc4eb9749ca5234683b7b2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 55850, "upload_time": "2019-06-06T17:20:54", "upload_time_iso_8601": "2019-06-06T17:20:54.076454Z", "url": "https://files.pythonhosted.org/packages/2b/02/351a98db5d9f259ec83108b2acc8aceeed6a85999cd74cb444e52f74ad4f/opensignalsreader-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2bc6ea635f4a2e44fb0431d40279bd03", "sha256": "37fe2fd789fc0d2d908bb873839690b70239ee3e1e422077fa59a7614420f603"}, "downloads": -1, "filename": "opensignalsreader-0.2.2.tar.gz", "has_sig": false, "md5_digest": "2bc6ea635f4a2e44fb0431d40279bd03", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12996, "upload_time": "2019-06-06T17:20:55", "upload_time_iso_8601": "2019-06-06T17:20:55.714994Z", "url": "https://files.pythonhosted.org/packages/ee/83/b8910447eec6ba611fa7cc99a17a5f43e4fec0da8f1a7a0df6beebf3597c/opensignalsreader-0.2.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c6bb72c381fc4eb9749ca5234683b7b2", "sha256": "105d973947488d298508b18bf954996703cdcf399002d359743538a7d2444721"}, "downloads": -1, "filename": "opensignalsreader-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "c6bb72c381fc4eb9749ca5234683b7b2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 55850, "upload_time": "2019-06-06T17:20:54", "upload_time_iso_8601": "2019-06-06T17:20:54.076454Z", "url": "https://files.pythonhosted.org/packages/2b/02/351a98db5d9f259ec83108b2acc8aceeed6a85999cd74cb444e52f74ad4f/opensignalsreader-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2bc6ea635f4a2e44fb0431d40279bd03", "sha256": "37fe2fd789fc0d2d908bb873839690b70239ee3e1e422077fa59a7614420f603"}, "downloads": -1, "filename": "opensignalsreader-0.2.2.tar.gz", "has_sig": false, "md5_digest": "2bc6ea635f4a2e44fb0431d40279bd03", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12996, "upload_time": "2019-06-06T17:20:55", "upload_time_iso_8601": "2019-06-06T17:20:55.714994Z", "url": "https://files.pythonhosted.org/packages/ee/83/b8910447eec6ba611fa7cc99a17a5f43e4fec0da8f1a7a0df6beebf3597c/opensignalsreader-0.2.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:02:33 2020"}