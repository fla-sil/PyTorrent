{"info": {"author": "Alberto Berti", "author_email": "alberto@metapensiero.it", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development :: Code Generators"], "description": ".. -*- coding: utf-8 -*-\n\n=============================\n MacroPy3 1.1.0b2\n=============================\n\n.. image:: https://travis-ci.org/azazel75/macropy.svg?branch=master\n  :target: https://travis-ci.org/azazel75/macropy\n\n**MacroPy** is an implementation of `Syntactic Macros\n<http://tinyurl.com/cmlls8v>`_ in the `Python Programming Language\n<http://python.org/>`_. MacroPy provides a mechanism for user-defined\nfunctions (macros) to perform transformations on the `abstract syntax\ntree <http://en.wikipedia.org/wiki/Abstract_syntax_tree>`_ (AST) of a\nPython program at *import time*. This is an easy way to enhance the\nsemantics of a Python program in ways which are otherwise impossible,\nfor example providing an extremely concise way of declaring classes.\n\nPython like you've never seen before\n====================================\n\nMacroPy allows you to create constructs which are impossible to have\nin normal python code, such as:\n\nTracing\n-------\n\n.. code:: python\n\n    with trace:\n        sum([x + 5 for x in range(3)])\n\n    # sum([x + 5 for x in range(3)])\n    # range(3) -> [0, 1, 2]\n    # x + 5 -> 5\n    # x + 5 -> 6\n    # x + 5 -> 7\n    # [x + 5 for x in range(3)] -> [5, 6, 7]\n    # sum([x + 5 for x in range(3)]) -> 18\n\nQuick Lambdas\n-------------\n\n.. code:: python\n\n    print(list(map(f[_[0]], ['omg', 'wtf', 'bbq'])))\n    # ['o', 'w', 'b']\n\n    print(list(reduce(f[_ + _], ['omg', 'wtf', 'bbq'])))\n    # 'omgwtfbbq\n\nCase Classes\n------------\n\n.. code:: python\n\n    @case\n    class Point(x, y): pass\n\n    p = Point(1, 2)\n\n    print str(p)    #Point(1, 2)\n    print p.x       #1\n    print p.y       #2\n    print Point(1, 2) == Point(1, 2) # True\n\nand more! See the docs at\n`<http://macropy3.readthedocs.io/en/latest/>`_.\n\nRequirements\n============\n\nMacroPy3 is tested to run on `CPython 3.4\n<http://en.wikipedia.org/wiki/CPython>`_ or newer and `PyPy\n<http://pypy.org/>`_ 3.5. I has no current support for `Jython\n<http://www.jython.org/>`_. MacroPy3 is also available on `PyPI\n<https://pypi.python.org/pypi/macropy3>`_.\n\nInstallation\n============\n\nJust execute a:\n\n.. code:: console\n\n   $ pip install macropy3\n\nif you want to use macros that require external libraries in order to\nwork, you can automatically install those dependencies by installing\none of the ``pinq`` or ``pyxl`` extras like this:\n\n.. code:: console\n\n   $ pip install macropy3[pinq,pyxl]\n\n\nthen have a look at the docs at `<http://macropy3.readthedocs.io/en/latest/>`_.\n\nHow to contribute\n=================\n\nWe're open to contributions, so send us your\nideas/questions/issues/pull-requests and we'll do our best to\naccommodate you! You can ask questions on the `Google Group\n<https://groups.google.com/forum/#!forum/macropy>`_  and on the\n`Gitter channel <https://gitter.im/lihaoyi/macropy>`_ or file bugs on\nthee `issues`__ page.\n\n__ https://github.com/lihaoyi/macropy/issues\n\nCredits\n=======\n\nMacroPy was initially created as a final project for the `MIT\n<http://web.mit.edu/>`_ class `6.945: Adventures in Advanced Symbolic\nProgramming <http://groups.csail.mit.edu/mac/users/gjs/6.945/>`_,\ntaught by `Gerald Jay Sussman\n<http://groups.csail.mit.edu/mac/users/gjs/>`_ and `Pavel Panchekha\n<http://pavpanchekha.com/>`_. Inspiration was taken from project such\nas `Scala Macros <http://scalamacros.org/>`_, `Karnickel\n<https://pypi.python.org/pypi/karnickel>`_ and `Pyxl\n<https://github.com/dropbox/pyxl>`_.\n\nThe MIT License (MIT)\n\nCopyright (c) 2013-2018, `Li Haoyi <https://github.com/lihaoyi>`_, `Justin\nHolmgren <https://github.com/jnhnum1>`_, `Alberto Berti\n<https://github.com/azazel75>`_ and all the other contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n\nChangelog\n=========\n\n1.1.0 (unreleased)\n------------------\n\n1.1.0b2 (2018-05-12)\n--------------------\n\n- Fix readme.\n\n1.1.0b1 (2018-05-12)\n--------------------\n\n- Fix and re-enable the ``SaveExporter()`` class.\n\n- Fix some issues with pattern matching module requiring non obvious\n  imports from user's side.\n\n- Fix pattern matching macro need to import ``_matching`` symbol\n\n- Add an ``OptionalMatcher`` to pattern matching macro to support\n  exclusive or conditions.\n\n- Refactor documentation using sphinx.\n\n- Refactor the macro expansion core code. Now the macro expansion\n  order is from inside-out. This allows to use macros inside other\n  macro's body.\n\n- Added support for Python 3.4.\n\n- Added ``SELECT * FROM country`` emulation in `pinq` macro.\n\n- Update the examples.\n\n- Update tco and pyxl macros.\n\n- Prevent the import hooks from raising errors.\n\n\n1.0.4.dev2 (2017-09-08)\n-----------------------\n\n- Add MANIFEST.in;\n\n1.0.4.dev1 (2017-09-08)\n-----------------------\n\n- Updated the import machinery and macro detection to be compatible\n  with Python 3.5+.\n\n- Removed support for Python 2, supporting it would require a way to\n  manage differences at the ast level, but i don't use Python2 anymore.\n\n- Added support for Python 3.5+ in the form of new call arguments form\n  and new ``AsyncFunctionDef``.\n\n- Basic scope analysis now available in the form of the ``@Scoped``\n  decorator, to be used in conjunction with ``@Walker``.\n\n1.0.3\n-----\n\n- Error messages are now raised at run-time rather than at import\n  time, with other improvements (double stack traces, catchability).\n\n- ``@enum`` macro now has much better error messages\n\n- Improved error messages for mis-use of stub functions outside their\n  related macro (e.g. the ``u``, ``name``, ``ast`` stubs for the ``q``/``hq``\n  macros)\n\n- Improved error messages for invalid case class signatures\n\n- Hygienic Quasiquotes now allow lexical capture of module objects\n\n1.0.2\n-----\n\n- Removed unit test from PyPI distribution\n\n1.0.1\n-----\n- Fixed a bug in ``ast_ctx_fixer``\n- ``gen_sym()`` is now ``gen_sym(name=\"sym\")``, allowing you to override the base name\n- Implemented ``macropy.case_classes.enum`` macro\n- Implemented ``macropy.quick_lambda.lazy`` and ``macropy.quick_lambda.interned`` macros\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/lihaoyi/macropy", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "macropy3", "package_url": "https://pypi.org/project/macropy3/", "platform": "", "project_url": "https://pypi.org/project/macropy3/", "project_urls": {"Homepage": "https://github.com/lihaoyi/macropy"}, "release_url": "https://pypi.org/project/macropy3/1.1.0b2/", "requires_dist": null, "requires_python": "", "summary": "Macros for Python: Quasiquotes, Case Classes, LINQ and more!", "version": "1.1.0b2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/azazel75/macropy\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/azazel75/macropy.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b9d6191a896eeca922e3312e1ce122af79034e69/68747470733a2f2f7472617669732d63692e6f72672f617a617a656c37352f6d6163726f70792e7376673f6272616e63683d6d6173746572\"></a>\n<p><strong>MacroPy</strong> is an implementation of <a href=\"http://tinyurl.com/cmlls8v\" rel=\"nofollow\">Syntactic Macros</a> in the <a href=\"http://python.org/\" rel=\"nofollow\">Python Programming Language</a>. MacroPy provides a mechanism for user-defined\nfunctions (macros) to perform transformations on the <a href=\"http://en.wikipedia.org/wiki/Abstract_syntax_tree\" rel=\"nofollow\">abstract syntax\ntree</a> (AST) of a\nPython program at <em>import time</em>. This is an easy way to enhance the\nsemantics of a Python program in ways which are otherwise impossible,\nfor example providing an extremely concise way of declaring classes.</p>\n<div id=\"python-like-you-ve-never-seen-before\">\n<h2>Python like you\u2019ve never seen before</h2>\n<p>MacroPy allows you to create constructs which are impossible to have\nin normal python code, such as:</p>\n<div id=\"tracing\">\n<h3>Tracing</h3>\n<pre><span class=\"k\">with</span> <span class=\"n\">trace</span><span class=\"p\">:</span>\n    <span class=\"nb\">sum</span><span class=\"p\">([</span><span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">5</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)])</span>\n\n<span class=\"c1\"># sum([x + 5 for x in range(3)])</span>\n<span class=\"c1\"># range(3) -&gt; [0, 1, 2]</span>\n<span class=\"c1\"># x + 5 -&gt; 5</span>\n<span class=\"c1\"># x + 5 -&gt; 6</span>\n<span class=\"c1\"># x + 5 -&gt; 7</span>\n<span class=\"c1\"># [x + 5 for x in range(3)] -&gt; [5, 6, 7]</span>\n<span class=\"c1\"># sum([x + 5 for x in range(3)]) -&gt; 18</span>\n</pre>\n</div>\n<div id=\"quick-lambdas\">\n<h3>Quick Lambdas</h3>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">_</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]],</span> <span class=\"p\">[</span><span class=\"s1\">'omg'</span><span class=\"p\">,</span> <span class=\"s1\">'wtf'</span><span class=\"p\">,</span> <span class=\"s1\">'bbq'</span><span class=\"p\">])))</span>\n<span class=\"c1\"># ['o', 'w', 'b']</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">reduce</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">_</span> <span class=\"o\">+</span> <span class=\"n\">_</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s1\">'omg'</span><span class=\"p\">,</span> <span class=\"s1\">'wtf'</span><span class=\"p\">,</span> <span class=\"s1\">'bbq'</span><span class=\"p\">])))</span>\n<span class=\"c1\"># 'omgwtfbbq</span>\n</pre>\n</div>\n<div id=\"case-classes\">\n<h3>Case Classes</h3>\n<pre><span class=\"nd\">@case</span>\n<span class=\"k\">class</span> <span class=\"nc\">Point</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span> <span class=\"k\">pass</span>\n\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">Point</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span>    <span class=\"c1\">#Point(1, 2)</span>\n<span class=\"nb\">print</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">x</span>       <span class=\"c1\">#1</span>\n<span class=\"nb\">print</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">y</span>       <span class=\"c1\">#2</span>\n<span class=\"nb\">print</span> <span class=\"n\">Point</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">Point</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"c1\"># True</span>\n</pre>\n<p>and more! See the docs at\n<a href=\"http://macropy3.readthedocs.io/en/latest/\" rel=\"nofollow\">http://macropy3.readthedocs.io/en/latest/</a>.</p>\n</div>\n</div>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<p>MacroPy3 is tested to run on <a href=\"http://en.wikipedia.org/wiki/CPython\" rel=\"nofollow\">CPython 3.4</a> or newer and <a href=\"http://pypy.org/\" rel=\"nofollow\">PyPy</a> 3.5. I has no current support for <a href=\"http://www.jython.org/\" rel=\"nofollow\">Jython</a>. MacroPy3 is also available on <a href=\"https://pypi.python.org/pypi/macropy3\" rel=\"nofollow\">PyPI</a>.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Just execute a:</p>\n<pre><span class=\"gp\">$</span> pip install macropy3\n</pre>\n<p>if you want to use macros that require external libraries in order to\nwork, you can automatically install those dependencies by installing\none of the <tt>pinq</tt> or <tt>pyxl</tt> extras like this:</p>\n<pre><span class=\"gp\">$</span> pip install macropy3<span class=\"o\">[</span>pinq,pyxl<span class=\"o\">]</span>\n</pre>\n<p>then have a look at the docs at <a href=\"http://macropy3.readthedocs.io/en/latest/\" rel=\"nofollow\">http://macropy3.readthedocs.io/en/latest/</a>.</p>\n</div>\n<div id=\"how-to-contribute\">\n<h2>How to contribute</h2>\n<p>We\u2019re open to contributions, so send us your\nideas/questions/issues/pull-requests and we\u2019ll do our best to\naccommodate you! You can ask questions on the <a href=\"https://groups.google.com/forum/#!forum/macropy\" rel=\"nofollow\">Google Group</a>  and on the\n<a href=\"https://gitter.im/lihaoyi/macropy\" rel=\"nofollow\">Gitter channel</a> or file bugs on\nthee <a href=\"https://github.com/lihaoyi/macropy/issues\" rel=\"nofollow\">issues</a> page.</p>\n</div>\n<div id=\"credits\">\n<h2>Credits</h2>\n<p>MacroPy was initially created as a final project for the <a href=\"http://web.mit.edu/\" rel=\"nofollow\">MIT</a> class <a href=\"http://groups.csail.mit.edu/mac/users/gjs/6.945/\" rel=\"nofollow\">6.945: Adventures in Advanced Symbolic\nProgramming</a>,\ntaught by <a href=\"http://groups.csail.mit.edu/mac/users/gjs/\" rel=\"nofollow\">Gerald Jay Sussman</a> and <a href=\"http://pavpanchekha.com/\" rel=\"nofollow\">Pavel Panchekha</a>. Inspiration was taken from project such\nas <a href=\"http://scalamacros.org/\" rel=\"nofollow\">Scala Macros</a>, <a href=\"https://pypi.python.org/pypi/karnickel\" rel=\"nofollow\">Karnickel</a> and <a href=\"https://github.com/dropbox/pyxl\" rel=\"nofollow\">Pyxl</a>.</p>\n<p>The MIT License (MIT)</p>\n<p>Copyright (c) 2013-2018, <a href=\"https://github.com/lihaoyi\" rel=\"nofollow\">Li Haoyi</a>, <a href=\"https://github.com/jnhnum1\" rel=\"nofollow\">Justin\nHolmgren</a>, <a href=\"https://github.com/azazel75\" rel=\"nofollow\">Alberto Berti</a> and all the other contributors</p>\n<p>Permission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \u201cSoftware\u201d), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:</p>\n<p>The above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.</p>\n<p>THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.</p>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<div id=\"unreleased\">\n<h3>1.1.0 (unreleased)</h3>\n</div>\n<div id=\"b2-2018-05-12\">\n<h3>1.1.0b2 (2018-05-12)</h3>\n<ul>\n<li>Fix readme.</li>\n</ul>\n</div>\n<div id=\"b1-2018-05-12\">\n<h3>1.1.0b1 (2018-05-12)</h3>\n<ul>\n<li>Fix and re-enable the <tt>SaveExporter()</tt> class.</li>\n<li>Fix some issues with pattern matching module requiring non obvious\nimports from user\u2019s side.</li>\n<li>Fix pattern matching macro need to import <tt>_matching</tt> symbol</li>\n<li>Add an <tt>OptionalMatcher</tt> to pattern matching macro to support\nexclusive or conditions.</li>\n<li>Refactor documentation using sphinx.</li>\n<li>Refactor the macro expansion core code. Now the macro expansion\norder is from inside-out. This allows to use macros inside other\nmacro\u2019s body.</li>\n<li>Added support for Python 3.4.</li>\n<li>Added <tt>SELECT * FROM country</tt> emulation in <cite>pinq</cite> macro.</li>\n<li>Update the examples.</li>\n<li>Update tco and pyxl macros.</li>\n<li>Prevent the import hooks from raising errors.</li>\n</ul>\n</div>\n<div id=\"dev2-2017-09-08\">\n<h3>1.0.4.dev2 (2017-09-08)</h3>\n<ul>\n<li>Add MANIFEST.in;</li>\n</ul>\n</div>\n<div id=\"dev1-2017-09-08\">\n<h3>1.0.4.dev1 (2017-09-08)</h3>\n<ul>\n<li>Updated the import machinery and macro detection to be compatible\nwith Python 3.5+.</li>\n<li>Removed support for Python 2, supporting it would require a way to\nmanage differences at the ast level, but i don\u2019t use Python2 anymore.</li>\n<li>Added support for Python 3.5+ in the form of new call arguments form\nand new <tt>AsyncFunctionDef</tt>.</li>\n<li>Basic scope analysis now available in the form of the <tt>@Scoped</tt>\ndecorator, to be used in conjunction with <tt>@Walker</tt>.</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>1.0.3</h3>\n<ul>\n<li>Error messages are now raised at run-time rather than at import\ntime, with other improvements (double stack traces, catchability).</li>\n<li><tt>@enum</tt> macro now has much better error messages</li>\n<li>Improved error messages for mis-use of stub functions outside their\nrelated macro (e.g. the <tt>u</tt>, <tt>name</tt>, <tt>ast</tt> stubs for the <tt>q</tt>/<tt>hq</tt>\nmacros)</li>\n<li>Improved error messages for invalid case class signatures</li>\n<li>Hygienic Quasiquotes now allow lexical capture of module objects</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3>1.0.2</h3>\n<ul>\n<li>Removed unit test from PyPI distribution</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3>1.0.1</h3>\n<ul>\n<li>Fixed a bug in <tt>ast_ctx_fixer</tt></li>\n<li><tt>gen_sym()</tt> is now <tt><span class=\"pre\">gen_sym(name=\"sym\")</span></tt>, allowing you to override the base name</li>\n<li>Implemented <tt>macropy.case_classes.enum</tt> macro</li>\n<li>Implemented <tt>macropy.quick_lambda.lazy</tt> and <tt>macropy.quick_lambda.interned</tt> macros</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 3855747, "releases": {"1.0.4.dev1": [{"comment_text": "", "digests": {"md5": "18221265c9b74e6761e833e0425bf1bd", "sha256": "33ddbd9165376ddafea0b5976af9bcf62e390d42f285ae87a583614b96e1786b"}, "downloads": -1, "filename": "macropy3-1.0.4.dev1.tar.gz", "has_sig": false, "md5_digest": "18221265c9b74e6761e833e0425bf1bd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33971, "upload_time": "2017-09-08T16:43:32", "upload_time_iso_8601": "2017-09-08T16:43:32.046320Z", "url": "https://files.pythonhosted.org/packages/44/01/303085c9d00687694e9bc3760093794a88f4784c05217b2eb82b2a0a0f76/macropy3-1.0.4.dev1.tar.gz", "yanked": false}], "1.0.4.dev2": [{"comment_text": "", "digests": {"md5": "ad46a5cfcee05fb071ab23c0d24498e7", "sha256": "5f6049bb8b9d1ac7b2a4344da717dab5333fca46f4fa33a1590c223d89f4adde"}, "downloads": -1, "filename": "macropy3-1.0.4.dev2.tar.gz", "has_sig": false, "md5_digest": "ad46a5cfcee05fb071ab23c0d24498e7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 86748, "upload_time": "2017-09-08T17:32:53", "upload_time_iso_8601": "2017-09-08T17:32:53.015863Z", "url": "https://files.pythonhosted.org/packages/c3/c6/0b8acef4cefc70cd6070a116b3cbaad806e432f7dc4c57ab8e0c5c2f73d3/macropy3-1.0.4.dev2.tar.gz", "yanked": false}], "1.1.0b1": [{"comment_text": "", "digests": {"md5": "eef099923c62ec9e36ea7e8d7686384f", "sha256": "36a143130fc8a2dd9186f9142dc36eecde68c8062143e14a46b36e2c62cc8b35"}, "downloads": -1, "filename": "macropy3-1.1.0b1.tar.gz", "has_sig": false, "md5_digest": "eef099923c62ec9e36ea7e8d7686384f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44335, "upload_time": "2018-05-11T23:00:00", "upload_time_iso_8601": "2018-05-11T23:00:00.373734Z", "url": "https://files.pythonhosted.org/packages/df/53/32f8b71b09c479296ccb858b76443c3b24b20b5cfaa8ce0bd289cdb2e631/macropy3-1.1.0b1.tar.gz", "yanked": false}], "1.1.0b2": [{"comment_text": "", "digests": {"md5": "2e0a2d25f9b2ba6e04d51e3b6d11bd67", "sha256": "7a8eae9886ea4a5df4fcf4f71f53165b82becfc7fc87d9c1c8cd2196f22d9408"}, "downloads": -1, "filename": "macropy3-1.1.0b2.tar.gz", "has_sig": false, "md5_digest": "2e0a2d25f9b2ba6e04d51e3b6d11bd67", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44304, "upload_time": "2018-05-11T23:17:05", "upload_time_iso_8601": "2018-05-11T23:17:05.055709Z", "url": "https://files.pythonhosted.org/packages/8c/b7/a61f9d9bd7de80ca51ef362db5bb6434ea21484c907d2a5f396d97b0274c/macropy3-1.1.0b2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2e0a2d25f9b2ba6e04d51e3b6d11bd67", "sha256": "7a8eae9886ea4a5df4fcf4f71f53165b82becfc7fc87d9c1c8cd2196f22d9408"}, "downloads": -1, "filename": "macropy3-1.1.0b2.tar.gz", "has_sig": false, "md5_digest": "2e0a2d25f9b2ba6e04d51e3b6d11bd67", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44304, "upload_time": "2018-05-11T23:17:05", "upload_time_iso_8601": "2018-05-11T23:17:05.055709Z", "url": "https://files.pythonhosted.org/packages/8c/b7/a61f9d9bd7de80ca51ef362db5bb6434ea21484c907d2a5f396d97b0274c/macropy3-1.1.0b2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:42:17 2020"}