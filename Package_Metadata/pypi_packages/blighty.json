{"info": {"author": "Gabriele N. Tornetta", "author_email": "phoenix1987@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Build Tools"], "description": "<h1 align=\"center\">\n  <br>\n  <img src=\"art/logo.svg\" width=\"480px\" alt=\"Austin\">\n  <br>\n</h1>\n\n<h3 align=\"center\">Desktop Widget Manager</h3>\n<p align=\"center\">Think of Conky, but with Python instead of Lua.</p>\n\n<p align=\"center\">\n  <a href=\"https://travis-ci.org/P403n1x87/blighty\">\n    <img src=\"https://travis-ci.org/P403n1x87/blighty.svg?branch=master\"\n         alt=\"Travis CI Build Status\">\n  </a>\n  <a href=\"https://blighty.readthedocs.io/en/latest/?badge=latest\">\n    <img src=\"https://readthedocs.org/projects/blighty/badge/?version=latest\"\n         alt=\"Documentation Status\">\n  </a>\n  <a href=\"https://badge.fury.io/py/blighty\">\n    <img src=\"https://badge.fury.io/py/blighty.svg\" alt=\"PyPI version\" height=\"18\">\n  </a>\n  <a href=\"http://pepy.tech/project/blighty\">\n    <img src=\"http://pepy.tech/badge/blighty\"\n         alt=\"PyPI Downloads\">\n  </a>\n  <img src=\"https://img.shields.io/badge/version-3.0.0%20(canaletto)-blue.svg\"\n       alt=\"Version 3.0.0\">\n  <a href=\"https://github.com/P403n1x87/blighty/blob/master/LICENSE.md\">\n    <img src=\"https://img.shields.io/badge/license-GPLv3-ff69b4.svg\"\n         alt=\"source{d} design document\">\n  </a>\n</p>\n\n<p align=\"center\">\n  <img src=\"https://upload.wikimedia.org/wikipedia/commons/3/3a/Tux_Mono.svg\" height=\"24px\" />\n  &nbsp;&nbsp;&nbsp;&nbsp;\n  <!-- <img src=\"https://upload.wikimedia.org/wikipedia/commons/f/fa/Apple_logo_black.svg\" height=\"24px\" />\n  &nbsp;&nbsp;&nbsp;&nbsp;\n  <img src=\"https://upload.wikimedia.org/wikipedia/commons/2/2b/Windows_logo_2012-Black.svg\" height=\"24px\" /> -->\n</p>\n\n<p align=\"center\">\n  <a href=\"#synopsis\"><b>Synopsis</b></a>&nbsp;&bull;\n  <a href=\"#requirements\"><b>Requirements</b></a>&nbsp;&bull;\n  <a href=\"#installation\"><b>Installation</b></a>&nbsp;&bull;\n  <a href=\"#usage\"><b>Usage</b></a>\n</p>\n\n\n## Synopsis\n\nThe **Blighty** project is inspired by Conky. In essence, it is a collection of\nobjects that allow you to quickly create a transparent window that you can draw\non with cairo. But instead of coding your widgets in Lua, that perhaps end up\ncalling Python as external tools, you can now code them natively in Python.\n\nPerformance won't be as great as Conky, with probably more resource being used\nfor the same end result, but native Python support opens up for a lot more\ncustomisation possibilities in a snap of your fingers.\n\nThere won't be much you can do with minimal effort out of the box while the\nproject is in its infancy. If you like the idea, you are more than welcome to\ncontribute to this project!\n\n## Requirements\n\n- X11\n- Xinerama\n- cairo\n- python3\n- python3-gi (only for GTK Windows)\n- gir1.2-gtk-3.0 (only for GTK Windows)\n- gir1.2-glib-2.0 (only for GTK Windows)\n\n\n## Installation\n\nCurrently, Blighty needs to be built from its source code. The following\ninstallation instructions have been tested on Ubuntu 18.04. If you are using a\ndifferent distribution, make sure that you install all the listed dependencies\nfrom your package repository.\n\nTo install the required dependencies, use the following command\n\n~~~\nsudo apt install xorg libxinerama-dev libcairo2-dev python3-gi gir1.2-gtk-3.0 gir1.2-glib-2.0\n~~~\n\nTo install Blighty from PyPI, use the command\n\n~~~\nsudo -H python3 -m pip install blighty --upgrade\n~~~\n\nShould you encounter any problems installing Blighty from PyPI, then install it\ndirectly from GitHub with the following command.\n\n~~~\nsudo -H python3 -m pip install git+https://github.com/P403n1x87/blighty.git --upgrade\n~~~\n\n\n## Usage\n\nThe official documentation is hosted on\n[ReadTheDocs.io](https://blighty.readthedocs.io/en/latest/). Refer to the code\nin the `examples` folder for some simple examples.\n\nThis package makes it easy to create transparent windows that you can draw on\nwith `cairo`. It takes all the boilerplate code away from you so that you can\njust focus on the artwork, pretty much as with Conky.\n\n### X11 Canvases\n\nThis is the closest to Conky that you can get for the moment, and the\nrecommended way of using Blighty. Use the following approach to create a window\nwith the Xlib directly.\n\n~~~ python\nfrom blighty import CanvasGravity\nfrom blighty.x11 import Canvas, start_event_loop\n\nclass MyCanvas(Canvas):\n  def on_draw(self, context):\n    # context is an instance of a cairo context.\n    # Refer to the Pycairo documentation.\n\nif __name__ == \"__main__\":\n  x, y, width, height = 10, 10, 200, 200\n\n  # Instantiate the canvas\n  canvas = MyCanvas(10, 10, width = 200, height = 200, gravity = CanvasGravity.SOUTH_EAST)\n\n  # Map it on screen\n  canvas.show()\n\n  # Start the event loop\n  start_event_loop()\n~~~\n\nThe module implements a basic event loop so that the user interactions with the\ncanvas can be handled. You can capture key and button presses by implementing\nthe `on_key_pressed(self, keysym, state)` and `on_button_pressed(self, button,\nstate, x, y)` method in your subclass of `Canvas`.\n\n### GTK Canvases\n\nTo create GTK-based canvases you can use the `blighty.gtk.Canvas` class, which\nis just a subclass of `Gtk.Window`.\n\n~~~ python\nfrom time import sleep\nimport blighty.gtk as b\n\n\nclass MyCanvas(b.Canvas):\n    def on_draw(self, widget, cr):\n        # Similar to the X11 case. However, note how\n        # you have access to the whole GTK window\n        # via the `widget` parameter. In principle you\n        # can exploit it to add extra child widgets.\n        # Use wisely.\n\nif __name__ == \"__main__\":\n    canvas = MyCanvas(0, 0, width=320, height=240)\n    canvas.show_all()\n    b.start_event_loop()\n~~~\n\n### Animations\n\nAnimations can be controlled via the `Canvas.interval` attribute. This is the\ntime in milliseconds that elapses between consecutive redraws of the Canvas.\n\n### Brushes\n\n_Since version 1.1.0_.\n\nConsider the following simple example of a clock widget.\n\n~~~ python\nfrom blighty import CanvasGravity\nfrom blighty.x11 import Canvas, start_event_loop\n\nimport datetime\n\nfrom math import pi as PI\n\n\nclass Clock(Canvas):\n    def on_button_pressed(self, button, state, x, y):\n        self.dispose()\n\n    def hand(self, ctx, angle, length, thickness):\n        ctx.save()\n        ctx.set_source_rgba(1, 1, 1, 1)\n        ctx.set_line_width(thickness)\n        ctx.rotate(angle)\n        ctx.move_to(0, length * .2)\n        ctx.line_to(0, -length)\n        ctx.stroke()\n        ctx.restore()\n\n    def on_draw(self, ctx):\n        now = datetime.datetime.now()\n\n        ctx.translate(self.width >> 1, self.height >> 1)\n\n        self.hand(ctx,\n            angle = now.second / 30 * PI,\n            length = (self.height >> 1) * .9,\n            thickness = 1\n        )\n\n        mins = now.minute + now.second / 60\n        self.hand(ctx,\n            angle = mins / 30 * PI,\n            length = (self.height >> 1) * .8,\n            thickness = 3\n        )\n\n        hours = (now.hour % 12) + mins / 60\n        self.hand(ctx,\n            angle = hours / 6 * PI,\n            length = (self.height >> 1) * .5,\n            thickness = 6\n        )\n~~~\n\nIt is clear that the `hand` method would be more appropriate for the instance of\nthe cairo Context `ctx`. The coding would be simpler if we could call it as\n`ctx.hand`. _Brushes_ allow you to re-bind methods from the `Canvas` subclass to\nthe cairo context. Import the `brush` decorator from `blighty` with\n\n~~~ python\nfrom blighty import brush\n~~~\n\nand the use it to decorate the `hand` method. The `self` argument is no longer\nnecessary, since it will be replaced by the cairo context instance. So the above\ncode becomes\n\n~~~ python\nfrom blighty import CanvasGravity, brush\nfrom blighty.x11 import Canvas, start_event_loop\n\nimport datetime\n\nfrom math import pi as PI\n\n\nclass Clock(Canvas):\n    def on_button_pressed(self, button, state, x, y):\n        self.dispose()\n\n    @brush\n    def hand(ctx, angle, length, thickness):\n        ctx.save()\n        ctx.set_source_rgba(1, 1, 1, 1)\n        ctx.set_line_width(thickness)\n        ctx.rotate(angle)\n        ctx.move_to(0, length * .2)\n        ctx.line_to(0, -length)\n        ctx.stroke()\n        ctx.restore()\n\n    def on_draw(self, ctx):\n        now = datetime.datetime.now()\n\n        ctx.translate(self.width >> 1, self.height >> 1)\n\n        ctx.hand(\n            angle = now.second / 30 * PI,\n            length = (self.height >> 1) * .9,\n            thickness = 1\n        )\n\n        mins = now.minute + now.second / 60\n        ctx.hand(\n            angle = mins / 30 * PI,\n            length = (self.height >> 1) * .8,\n            thickness = 3\n        )\n\n        hours = (now.hour % 12) + mins / 60\n        ctx.hand(\n            angle = hours / 6 * PI,\n            length = (self.height >> 1) * .5,\n            thickness = 6\n        )\n~~~\n\nBy default, methods of subclasses of `Canvas` that begin with `draw_` are\nre-bound to the cairo context in the `on_draw` method. So the same as the above\ncode could be achieved without the use of the `brush` decorator with\n\n~~~ python\nfrom blighty import CanvasGravity\nfrom blighty.x11 import Canvas, start_event_loop\n\nimport datetime\n\nfrom math import pi as PI\n\n\nclass Clock(Canvas):\n    def on_button_pressed(self, button, state, x, y):\n        self.dispose()\n\n    def draw_hand(ctx, angle, length, thickness):\n        ctx.save()\n        ctx.set_source_rgba(1, 1, 1, 1)\n        ctx.set_line_width(thickness)\n        ctx.rotate(angle)\n        ctx.move_to(0, length * .2)\n        ctx.line_to(0, -length)\n        ctx.stroke()\n        ctx.restore()\n\n    def on_draw(self, ctx):\n        now = datetime.datetime.now()\n\n        ctx.translate(self.width >> 1, self.height >> 1)\n\n        ctx.draw_hand(\n            angle = now.second / 30 * PI,\n            length = (self.height >> 1) * .9,\n            thickness = 1\n        )\n\n        mins = now.minute + now.second / 60\n        ctx.draw_hand(\n            angle = mins / 30 * PI,\n            length = (self.height >> 1) * .8,\n            thickness = 3\n        )\n\n        hours = (now.hour % 12) + mins / 60\n        ctx.draw_hand(\n            angle = hours / 6 * PI,\n            length = (self.height >> 1) * .5,\n            thickness = 6\n        )\n~~~\n\n_Brushes_ are implemented via the class `ExtendedContext`, which is just a\nwrapper around `cairo.Context`. The argument passed to the `on_draw` callback is\nhence an instance of this class. For convenience, it exposes the containing\ncanvas instance via the `canvas` attribute so that it doesn't need to be passed\nto the brush method when you need to access some of the canvas attributes (e.g.\nits size) or methods.\n\n\n## Conky-like Graphs\n\n_Since version 3.0.0_\n\nIf you really can't do without the Conky look, Blighty offers you Conky-like graphs out of the box.\n\n<p align=\"center\"><img src=\"art/legacy-graph.gif\"/></p>\n\nAll you have to do is create an instance of `blighty.legacy.Graph` by specifying the position and the size of the graph. Optionally, you can also pass a `scale` argument, which by default is set to `100` and defines the _y_ scale of the graph. If you want the graph to auto-scale, use `scale=None`. You push values to the graph with the `push_value` method and draw it on a canvas with the `draw` method, which requires a Cairo context as argument.\n\n\n## License\n\nGPLv3.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/P403n1x87/blighty", "keywords": "desklet widget infotainment", "license": "", "maintainer": "", "maintainer_email": "", "name": "blighty", "package_url": "https://pypi.org/project/blighty/", "platform": "", "project_url": "https://pypi.org/project/blighty/", "project_urls": {"Bug Reports": "https://github.com/P403n1x87/blighty/issues", "Homepage": "https://github.com/P403n1x87/blighty", "Source": "https://github.com/P403n1x87/blighty"}, "release_url": "https://pypi.org/project/blighty/3.0.0/", "requires_dist": null, "requires_python": "", "summary": "Desktop Widget Manager. Think of conky, but with Python instead of Lua.", "version": "3.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>\n  <br>\n  <img alt=\"Austin\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/460c8c556620aafec572140598abd02578181538/6172742f6c6f676f2e737667\" width=\"480px\">\n  <br>\n</h1>\n<h3>Desktop Widget Manager</h3>\n<p align=\"center\">Think of Conky, but with Python instead of Lua.</p>\n<p align=\"center\">\n  <a href=\"https://travis-ci.org/P403n1x87/blighty\" rel=\"nofollow\">\n    <img alt=\"Travis CI Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b5e39729677571d2304012bfa7c3697ad5a9bb1f/68747470733a2f2f7472617669732d63692e6f72672f503430336e317838372f626c69676874792e7376673f6272616e63683d6d6173746572\">\n  </a>\n  <a href=\"https://blighty.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\">\n    <img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/32ff027ec9da68fb5d9c1cc970514615e3bb29a2/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f626c69676874792f62616467652f3f76657273696f6e3d6c6174657374\">\n  </a>\n  <a href=\"https://badge.fury.io/py/blighty\" rel=\"nofollow\">\n    <img alt=\"PyPI version\" height=\"18\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8eaec4a5acca2bf69860d8002d758bcbca8aff30/68747470733a2f2f62616467652e667572792e696f2f70792f626c69676874792e737667\">\n  </a>\n  <a href=\"http://pepy.tech/project/blighty\" rel=\"nofollow\">\n    <img alt=\"PyPI Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8e7cebb8e3f73a7cce0f10b2af962812d823585c/687474703a2f2f706570792e746563682f62616467652f626c6967687479\">\n  </a>\n  <img alt=\"Version 3.0.0\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4faaa429a935d3f83fc1e001e547fdb27894f274/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f76657273696f6e2d332e302e302532302863616e616c6574746f292d626c75652e737667\">\n  <a href=\"https://github.com/P403n1x87/blighty/blob/master/LICENSE.md\" rel=\"nofollow\">\n    <img alt=\"source{d} design document\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/34e56080c8ee84eb14ef1b7c6bdcc749360aaee5/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d47504c76332d6666363962342e737667\">\n  </a>\n</p>\n<p align=\"center\">\n  <img height=\"24px\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8823cf61ecaf271527e9cec25d2780f9b1939470/68747470733a2f2f75706c6f61642e77696b696d656469612e6f72672f77696b6970656469612f636f6d6d6f6e732f332f33612f5475785f4d6f6e6f2e737667\">\n  \u00a0\u00a0\u00a0\u00a0\n  \n</p>\n<p align=\"center\">\n  <a href=\"#synopsis\" rel=\"nofollow\"><b>Synopsis</b></a>\u00a0\u2022\n  <a href=\"#requirements\" rel=\"nofollow\"><b>Requirements</b></a>\u00a0\u2022\n  <a href=\"#installation\" rel=\"nofollow\"><b>Installation</b></a>\u00a0\u2022\n  <a href=\"#usage\" rel=\"nofollow\"><b>Usage</b></a>\n</p>\n<h2>Synopsis</h2>\n<p>The <strong>Blighty</strong> project is inspired by Conky. In essence, it is a collection of\nobjects that allow you to quickly create a transparent window that you can draw\non with cairo. But instead of coding your widgets in Lua, that perhaps end up\ncalling Python as external tools, you can now code them natively in Python.</p>\n<p>Performance won't be as great as Conky, with probably more resource being used\nfor the same end result, but native Python support opens up for a lot more\ncustomisation possibilities in a snap of your fingers.</p>\n<p>There won't be much you can do with minimal effort out of the box while the\nproject is in its infancy. If you like the idea, you are more than welcome to\ncontribute to this project!</p>\n<h2>Requirements</h2>\n<ul>\n<li>X11</li>\n<li>Xinerama</li>\n<li>cairo</li>\n<li>python3</li>\n<li>python3-gi (only for GTK Windows)</li>\n<li>gir1.2-gtk-3.0 (only for GTK Windows)</li>\n<li>gir1.2-glib-2.0 (only for GTK Windows)</li>\n</ul>\n<h2>Installation</h2>\n<p>Currently, Blighty needs to be built from its source code. The following\ninstallation instructions have been tested on Ubuntu 18.04. If you are using a\ndifferent distribution, make sure that you install all the listed dependencies\nfrom your package repository.</p>\n<p>To install the required dependencies, use the following command</p>\n<pre><code>sudo apt install xorg libxinerama-dev libcairo2-dev python3-gi gir1.2-gtk-3.0 gir1.2-glib-2.0\n</code></pre>\n<p>To install Blighty from PyPI, use the command</p>\n<pre><code>sudo -H python3 -m pip install blighty --upgrade\n</code></pre>\n<p>Should you encounter any problems installing Blighty from PyPI, then install it\ndirectly from GitHub with the following command.</p>\n<pre><code>sudo -H python3 -m pip install git+https://github.com/P403n1x87/blighty.git --upgrade\n</code></pre>\n<h2>Usage</h2>\n<p>The official documentation is hosted on\n<a href=\"https://blighty.readthedocs.io/en/latest/\" rel=\"nofollow\">ReadTheDocs.io</a>. Refer to the code\nin the <code>examples</code> folder for some simple examples.</p>\n<p>This package makes it easy to create transparent windows that you can draw on\nwith <code>cairo</code>. It takes all the boilerplate code away from you so that you can\njust focus on the artwork, pretty much as with Conky.</p>\n<h3>X11 Canvases</h3>\n<p>This is the closest to Conky that you can get for the moment, and the\nrecommended way of using Blighty. Use the following approach to create a window\nwith the Xlib directly.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">blighty</span> <span class=\"kn\">import</span> <span class=\"n\">CanvasGravity</span>\n<span class=\"kn\">from</span> <span class=\"nn\">blighty.x11</span> <span class=\"kn\">import</span> <span class=\"n\">Canvas</span><span class=\"p\">,</span> <span class=\"n\">start_event_loop</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyCanvas</span><span class=\"p\">(</span><span class=\"n\">Canvas</span><span class=\"p\">):</span>\n  <span class=\"k\">def</span> <span class=\"nf\">on_draw</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"c1\"># context is an instance of a cairo context.</span>\n    <span class=\"c1\"># Refer to the Pycairo documentation.</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n  <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">width</span><span class=\"p\">,</span> <span class=\"n\">height</span> <span class=\"o\">=</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">200</span>\n\n  <span class=\"c1\"># Instantiate the canvas</span>\n  <span class=\"n\">canvas</span> <span class=\"o\">=</span> <span class=\"n\">MyCanvas</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">width</span> <span class=\"o\">=</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"n\">height</span> <span class=\"o\">=</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"n\">gravity</span> <span class=\"o\">=</span> <span class=\"n\">CanvasGravity</span><span class=\"o\">.</span><span class=\"n\">SOUTH_EAST</span><span class=\"p\">)</span>\n\n  <span class=\"c1\"># Map it on screen</span>\n  <span class=\"n\">canvas</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n\n  <span class=\"c1\"># Start the event loop</span>\n  <span class=\"n\">start_event_loop</span><span class=\"p\">()</span>\n</pre>\n<p>The module implements a basic event loop so that the user interactions with the\ncanvas can be handled. You can capture key and button presses by implementing\nthe <code>on_key_pressed(self, keysym, state)</code> and <code>on_button_pressed(self, button, state, x, y)</code> method in your subclass of <code>Canvas</code>.</p>\n<h3>GTK Canvases</h3>\n<p>To create GTK-based canvases you can use the <code>blighty.gtk.Canvas</code> class, which\nis just a subclass of <code>Gtk.Window</code>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"kn\">import</span> <span class=\"n\">sleep</span>\n<span class=\"kn\">import</span> <span class=\"nn\">blighty.gtk</span> <span class=\"k\">as</span> <span class=\"nn\">b</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MyCanvas</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">Canvas</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">on_draw</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">widget</span><span class=\"p\">,</span> <span class=\"n\">cr</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Similar to the X11 case. However, note how</span>\n        <span class=\"c1\"># you have access to the whole GTK window</span>\n        <span class=\"c1\"># via the `widget` parameter. In principle you</span>\n        <span class=\"c1\"># can exploit it to add extra child widgets.</span>\n        <span class=\"c1\"># Use wisely.</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">canvas</span> <span class=\"o\">=</span> <span class=\"n\">MyCanvas</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mi\">320</span><span class=\"p\">,</span> <span class=\"n\">height</span><span class=\"o\">=</span><span class=\"mi\">240</span><span class=\"p\">)</span>\n    <span class=\"n\">canvas</span><span class=\"o\">.</span><span class=\"n\">show_all</span><span class=\"p\">()</span>\n    <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">start_event_loop</span><span class=\"p\">()</span>\n</pre>\n<h3>Animations</h3>\n<p>Animations can be controlled via the <code>Canvas.interval</code> attribute. This is the\ntime in milliseconds that elapses between consecutive redraws of the Canvas.</p>\n<h3>Brushes</h3>\n<p><em>Since version 1.1.0</em>.</p>\n<p>Consider the following simple example of a clock widget.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">blighty</span> <span class=\"kn\">import</span> <span class=\"n\">CanvasGravity</span>\n<span class=\"kn\">from</span> <span class=\"nn\">blighty.x11</span> <span class=\"kn\">import</span> <span class=\"n\">Canvas</span><span class=\"p\">,</span> <span class=\"n\">start_event_loop</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">datetime</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">math</span> <span class=\"kn\">import</span> <span class=\"n\">pi</span> <span class=\"k\">as</span> <span class=\"n\">PI</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Clock</span><span class=\"p\">(</span><span class=\"n\">Canvas</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">on_button_pressed</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">button</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dispose</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">hand</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">ctx</span><span class=\"p\">,</span> <span class=\"n\">angle</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"p\">,</span> <span class=\"n\">thickness</span><span class=\"p\">):</span>\n        <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n        <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">set_source_rgba</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">set_line_width</span><span class=\"p\">(</span><span class=\"n\">thickness</span><span class=\"p\">)</span>\n        <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">rotate</span><span class=\"p\">(</span><span class=\"n\">angle</span><span class=\"p\">)</span>\n        <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">move_to</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">length</span> <span class=\"o\">*</span> <span class=\"o\">.</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n        <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">line_to</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"n\">length</span><span class=\"p\">)</span>\n        <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">stroke</span><span class=\"p\">()</span>\n        <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">restore</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">on_draw</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">ctx</span><span class=\"p\">):</span>\n        <span class=\"n\">now</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()</span>\n\n        <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">translate</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">width</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">height</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">hand</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">,</span>\n            <span class=\"n\">angle</span> <span class=\"o\">=</span> <span class=\"n\">now</span><span class=\"o\">.</span><span class=\"n\">second</span> <span class=\"o\">/</span> <span class=\"mi\">30</span> <span class=\"o\">*</span> <span class=\"n\">PI</span><span class=\"p\">,</span>\n            <span class=\"n\">length</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">height</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"o\">.</span><span class=\"mi\">9</span><span class=\"p\">,</span>\n            <span class=\"n\">thickness</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"n\">mins</span> <span class=\"o\">=</span> <span class=\"n\">now</span><span class=\"o\">.</span><span class=\"n\">minute</span> <span class=\"o\">+</span> <span class=\"n\">now</span><span class=\"o\">.</span><span class=\"n\">second</span> <span class=\"o\">/</span> <span class=\"mi\">60</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">hand</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">,</span>\n            <span class=\"n\">angle</span> <span class=\"o\">=</span> <span class=\"n\">mins</span> <span class=\"o\">/</span> <span class=\"mi\">30</span> <span class=\"o\">*</span> <span class=\"n\">PI</span><span class=\"p\">,</span>\n            <span class=\"n\">length</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">height</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"o\">.</span><span class=\"mi\">8</span><span class=\"p\">,</span>\n            <span class=\"n\">thickness</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"n\">hours</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">now</span><span class=\"o\">.</span><span class=\"n\">hour</span> <span class=\"o\">%</span> <span class=\"mi\">12</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">mins</span> <span class=\"o\">/</span> <span class=\"mi\">60</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">hand</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">,</span>\n            <span class=\"n\">angle</span> <span class=\"o\">=</span> <span class=\"n\">hours</span> <span class=\"o\">/</span> <span class=\"mi\">6</span> <span class=\"o\">*</span> <span class=\"n\">PI</span><span class=\"p\">,</span>\n            <span class=\"n\">length</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">height</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"o\">.</span><span class=\"mi\">5</span><span class=\"p\">,</span>\n            <span class=\"n\">thickness</span> <span class=\"o\">=</span> <span class=\"mi\">6</span>\n        <span class=\"p\">)</span>\n</pre>\n<p>It is clear that the <code>hand</code> method would be more appropriate for the instance of\nthe cairo Context <code>ctx</code>. The coding would be simpler if we could call it as\n<code>ctx.hand</code>. <em>Brushes</em> allow you to re-bind methods from the <code>Canvas</code> subclass to\nthe cairo context. Import the <code>brush</code> decorator from <code>blighty</code> with</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">blighty</span> <span class=\"kn\">import</span> <span class=\"n\">brush</span>\n</pre>\n<p>and the use it to decorate the <code>hand</code> method. The <code>self</code> argument is no longer\nnecessary, since it will be replaced by the cairo context instance. So the above\ncode becomes</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">blighty</span> <span class=\"kn\">import</span> <span class=\"n\">CanvasGravity</span><span class=\"p\">,</span> <span class=\"n\">brush</span>\n<span class=\"kn\">from</span> <span class=\"nn\">blighty.x11</span> <span class=\"kn\">import</span> <span class=\"n\">Canvas</span><span class=\"p\">,</span> <span class=\"n\">start_event_loop</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">datetime</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">math</span> <span class=\"kn\">import</span> <span class=\"n\">pi</span> <span class=\"k\">as</span> <span class=\"n\">PI</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Clock</span><span class=\"p\">(</span><span class=\"n\">Canvas</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">on_button_pressed</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">button</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dispose</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@brush</span>\n    <span class=\"k\">def</span> <span class=\"nf\">hand</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">,</span> <span class=\"n\">angle</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"p\">,</span> <span class=\"n\">thickness</span><span class=\"p\">):</span>\n        <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n        <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">set_source_rgba</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">set_line_width</span><span class=\"p\">(</span><span class=\"n\">thickness</span><span class=\"p\">)</span>\n        <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">rotate</span><span class=\"p\">(</span><span class=\"n\">angle</span><span class=\"p\">)</span>\n        <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">move_to</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">length</span> <span class=\"o\">*</span> <span class=\"o\">.</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n        <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">line_to</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"n\">length</span><span class=\"p\">)</span>\n        <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">stroke</span><span class=\"p\">()</span>\n        <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">restore</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">on_draw</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">ctx</span><span class=\"p\">):</span>\n        <span class=\"n\">now</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()</span>\n\n        <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">translate</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">width</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">height</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n        <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">hand</span><span class=\"p\">(</span>\n            <span class=\"n\">angle</span> <span class=\"o\">=</span> <span class=\"n\">now</span><span class=\"o\">.</span><span class=\"n\">second</span> <span class=\"o\">/</span> <span class=\"mi\">30</span> <span class=\"o\">*</span> <span class=\"n\">PI</span><span class=\"p\">,</span>\n            <span class=\"n\">length</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">height</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"o\">.</span><span class=\"mi\">9</span><span class=\"p\">,</span>\n            <span class=\"n\">thickness</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"n\">mins</span> <span class=\"o\">=</span> <span class=\"n\">now</span><span class=\"o\">.</span><span class=\"n\">minute</span> <span class=\"o\">+</span> <span class=\"n\">now</span><span class=\"o\">.</span><span class=\"n\">second</span> <span class=\"o\">/</span> <span class=\"mi\">60</span>\n        <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">hand</span><span class=\"p\">(</span>\n            <span class=\"n\">angle</span> <span class=\"o\">=</span> <span class=\"n\">mins</span> <span class=\"o\">/</span> <span class=\"mi\">30</span> <span class=\"o\">*</span> <span class=\"n\">PI</span><span class=\"p\">,</span>\n            <span class=\"n\">length</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">height</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"o\">.</span><span class=\"mi\">8</span><span class=\"p\">,</span>\n            <span class=\"n\">thickness</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"n\">hours</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">now</span><span class=\"o\">.</span><span class=\"n\">hour</span> <span class=\"o\">%</span> <span class=\"mi\">12</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">mins</span> <span class=\"o\">/</span> <span class=\"mi\">60</span>\n        <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">hand</span><span class=\"p\">(</span>\n            <span class=\"n\">angle</span> <span class=\"o\">=</span> <span class=\"n\">hours</span> <span class=\"o\">/</span> <span class=\"mi\">6</span> <span class=\"o\">*</span> <span class=\"n\">PI</span><span class=\"p\">,</span>\n            <span class=\"n\">length</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">height</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"o\">.</span><span class=\"mi\">5</span><span class=\"p\">,</span>\n            <span class=\"n\">thickness</span> <span class=\"o\">=</span> <span class=\"mi\">6</span>\n        <span class=\"p\">)</span>\n</pre>\n<p>By default, methods of subclasses of <code>Canvas</code> that begin with <code>draw_</code> are\nre-bound to the cairo context in the <code>on_draw</code> method. So the same as the above\ncode could be achieved without the use of the <code>brush</code> decorator with</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">blighty</span> <span class=\"kn\">import</span> <span class=\"n\">CanvasGravity</span>\n<span class=\"kn\">from</span> <span class=\"nn\">blighty.x11</span> <span class=\"kn\">import</span> <span class=\"n\">Canvas</span><span class=\"p\">,</span> <span class=\"n\">start_event_loop</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">datetime</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">math</span> <span class=\"kn\">import</span> <span class=\"n\">pi</span> <span class=\"k\">as</span> <span class=\"n\">PI</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Clock</span><span class=\"p\">(</span><span class=\"n\">Canvas</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">on_button_pressed</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">button</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dispose</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">draw_hand</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">,</span> <span class=\"n\">angle</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"p\">,</span> <span class=\"n\">thickness</span><span class=\"p\">):</span>\n        <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n        <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">set_source_rgba</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">set_line_width</span><span class=\"p\">(</span><span class=\"n\">thickness</span><span class=\"p\">)</span>\n        <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">rotate</span><span class=\"p\">(</span><span class=\"n\">angle</span><span class=\"p\">)</span>\n        <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">move_to</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">length</span> <span class=\"o\">*</span> <span class=\"o\">.</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n        <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">line_to</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"n\">length</span><span class=\"p\">)</span>\n        <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">stroke</span><span class=\"p\">()</span>\n        <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">restore</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">on_draw</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">ctx</span><span class=\"p\">):</span>\n        <span class=\"n\">now</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()</span>\n\n        <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">translate</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">width</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">height</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n        <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">draw_hand</span><span class=\"p\">(</span>\n            <span class=\"n\">angle</span> <span class=\"o\">=</span> <span class=\"n\">now</span><span class=\"o\">.</span><span class=\"n\">second</span> <span class=\"o\">/</span> <span class=\"mi\">30</span> <span class=\"o\">*</span> <span class=\"n\">PI</span><span class=\"p\">,</span>\n            <span class=\"n\">length</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">height</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"o\">.</span><span class=\"mi\">9</span><span class=\"p\">,</span>\n            <span class=\"n\">thickness</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"n\">mins</span> <span class=\"o\">=</span> <span class=\"n\">now</span><span class=\"o\">.</span><span class=\"n\">minute</span> <span class=\"o\">+</span> <span class=\"n\">now</span><span class=\"o\">.</span><span class=\"n\">second</span> <span class=\"o\">/</span> <span class=\"mi\">60</span>\n        <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">draw_hand</span><span class=\"p\">(</span>\n            <span class=\"n\">angle</span> <span class=\"o\">=</span> <span class=\"n\">mins</span> <span class=\"o\">/</span> <span class=\"mi\">30</span> <span class=\"o\">*</span> <span class=\"n\">PI</span><span class=\"p\">,</span>\n            <span class=\"n\">length</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">height</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"o\">.</span><span class=\"mi\">8</span><span class=\"p\">,</span>\n            <span class=\"n\">thickness</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"n\">hours</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">now</span><span class=\"o\">.</span><span class=\"n\">hour</span> <span class=\"o\">%</span> <span class=\"mi\">12</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">mins</span> <span class=\"o\">/</span> <span class=\"mi\">60</span>\n        <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">draw_hand</span><span class=\"p\">(</span>\n            <span class=\"n\">angle</span> <span class=\"o\">=</span> <span class=\"n\">hours</span> <span class=\"o\">/</span> <span class=\"mi\">6</span> <span class=\"o\">*</span> <span class=\"n\">PI</span><span class=\"p\">,</span>\n            <span class=\"n\">length</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">height</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"o\">.</span><span class=\"mi\">5</span><span class=\"p\">,</span>\n            <span class=\"n\">thickness</span> <span class=\"o\">=</span> <span class=\"mi\">6</span>\n        <span class=\"p\">)</span>\n</pre>\n<p><em>Brushes</em> are implemented via the class <code>ExtendedContext</code>, which is just a\nwrapper around <code>cairo.Context</code>. The argument passed to the <code>on_draw</code> callback is\nhence an instance of this class. For convenience, it exposes the containing\ncanvas instance via the <code>canvas</code> attribute so that it doesn't need to be passed\nto the brush method when you need to access some of the canvas attributes (e.g.\nits size) or methods.</p>\n<h2>Conky-like Graphs</h2>\n<p><em>Since version 3.0.0</em></p>\n<p>If you really can't do without the Conky look, Blighty offers you Conky-like graphs out of the box.</p>\n<p align=\"center\"><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/94f6f4a2fad32d64b7eb666c453d8e837a985af4/6172742f6c65676163792d67726170682e676966\"></p>\n<p>All you have to do is create an instance of <code>blighty.legacy.Graph</code> by specifying the position and the size of the graph. Optionally, you can also pass a <code>scale</code> argument, which by default is set to <code>100</code> and defines the <em>y</em> scale of the graph. If you want the graph to auto-scale, use <code>scale=None</code>. You push values to the graph with the <code>push_value</code> method and draw it on a canvas with the <code>draw</code> method, which requires a Cairo context as argument.</p>\n<h2>License</h2>\n<p>GPLv3.</p>\n\n          </div>"}, "last_serial": 4518692, "releases": {"2.1.0": [{"comment_text": "", "digests": {"md5": "6c2244a95d3a723ff388af6bf2072375", "sha256": "a5503779094b3932422cf5b0a585c2cf06b0c42f5573590b5185c1bd3d7e4d71"}, "downloads": -1, "filename": "blighty-2.1.0.tar.gz", "has_sig": false, "md5_digest": "6c2244a95d3a723ff388af6bf2072375", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25131, "upload_time": "2018-07-13T22:43:28", "upload_time_iso_8601": "2018-07-13T22:43:28.880568Z", "url": "https://files.pythonhosted.org/packages/d8/6c/2f7afb3a7534747e895b193343a472097bf143658d7b1d22b5d89d1853c8/blighty-2.1.0.tar.gz", "yanked": false}], "2.1.1": [{"comment_text": "", "digests": {"md5": "c894a6895c1abd31342bb679e6405f5d", "sha256": "73b88f1501c6d8c5026f0dbdcd232e6e7a39ed13739f40556749460fbb75b56c"}, "downloads": -1, "filename": "blighty-2.1.1.tar.gz", "has_sig": false, "md5_digest": "c894a6895c1abd31342bb679e6405f5d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21262, "upload_time": "2018-07-20T19:22:12", "upload_time_iso_8601": "2018-07-20T19:22:12.078498Z", "url": "https://files.pythonhosted.org/packages/b6/c1/56533a6a601fd7cfe9ae69973c01ae93d9effaab86a0bb92191a4455a062/blighty-2.1.1.tar.gz", "yanked": false}], "2.1.2": [{"comment_text": "", "digests": {"md5": "2567eca9fc0049b98962f440a242256f", "sha256": "d84dbe6e1eaf2980a19b5a4767bf43bd3c6ae584f31b3f42b6af52eb581f4f58"}, "downloads": -1, "filename": "blighty-2.1.2.tar.gz", "has_sig": false, "md5_digest": "2567eca9fc0049b98962f440a242256f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25211, "upload_time": "2018-07-27T21:45:20", "upload_time_iso_8601": "2018-07-27T21:45:20.811820Z", "url": "https://files.pythonhosted.org/packages/e3/ec/d41f3c8699e0cfe49d03ee6f631e432b566fcd856873cbd83b2f3d1e574c/blighty-2.1.2.tar.gz", "yanked": false}], "3.0.0": [{"comment_text": "", "digests": {"md5": "6dcea5c42baa74664f59b43d8af6ab77", "sha256": "a33ee937bc0df60984f2e9a662927d323d59c61de5f93a6dc2ccf48c43df3293"}, "downloads": -1, "filename": "blighty-3.0.0.tar.gz", "has_sig": false, "md5_digest": "6dcea5c42baa74664f59b43d8af6ab77", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27830, "upload_time": "2018-11-22T23:32:04", "upload_time_iso_8601": "2018-11-22T23:32:04.464472Z", "url": "https://files.pythonhosted.org/packages/43/90/aac31a51f7a4d6fd574a747c566ceeab6364015e71eadccab1fb37498c8e/blighty-3.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6dcea5c42baa74664f59b43d8af6ab77", "sha256": "a33ee937bc0df60984f2e9a662927d323d59c61de5f93a6dc2ccf48c43df3293"}, "downloads": -1, "filename": "blighty-3.0.0.tar.gz", "has_sig": false, "md5_digest": "6dcea5c42baa74664f59b43d8af6ab77", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27830, "upload_time": "2018-11-22T23:32:04", "upload_time_iso_8601": "2018-11-22T23:32:04.464472Z", "url": "https://files.pythonhosted.org/packages/43/90/aac31a51f7a4d6fd574a747c566ceeab6364015e71eadccab1fb37498c8e/blighty-3.0.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:37:06 2020"}