{"info": {"author": "Nathan Hagen", "author_email": "nhagen@optics.arizona.edu", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.4", "Topic :: Scientific/Engineering"], "description": "jcamp\n=====\n\nA set of Python utilities for reading JCAMP-DX files.\n\nThe ``JCAMP_reader()`` function takes a filename as input, and returns a dictionary containing the data found in the file. Specifically, the keys contained in the dictionary are: (1) the field names found in the file's header, with values being int- or float-type if the corresponding field is a numerical type, or a string-type otherwise. (2) two arrays ``x`` and ``y``, giving the scaled values of the data points (scaled according to the ``xfactor`` and ``yfactor`` fields in the header, if they exist. The units of ``x`` and ``y`` are whatever are indicated in the header fields ``xunits`` and ``yunits``, if these exist.\n\nThe ``JCAMP_calc_xsec()`` function is intended to takes as input the result of the ``JCAMP_reader()`` function and to convert the ``x`` data to wavelength in microns, and the ``y`` data to cross-section in units of m^2 for gas concentration of 1ppm at standard atmospheric pressure and temperature, across a path length of 1 meter. The ``JCAMP_calc_xsec()`` function takes as input the data dictionary ``jcamp_dict``, and manipulates that dictionary directly without having a separate return value. Changes to the dictionary may including adding the fields::\n\n    wavelengths: the array of wavelength values (in microns) for each data point\n    wavenumbers: the array of wavenumber values (in cm^-1) for each data point\n    xsec: the array of cross-section values (in units of m^2 at 1ppm.m)\n\nand modifying the fields::\n\n    xunits: micron\n    yunits: m^2 at 1ppm.m\n\nThe optional arguments ``wavemin``, ``wavemax`` are used if the user wishes to truncate the data to only a desired spectral range. For example, setting ``wavemin=8.0`` and ``wavemax=12.0`` means that the returned data arrays will only contain data corresponding to those wavlengths. If the ``skip_nonquant`` optional input argument is used, then any input spectrum that does not have the complete ``path_length`` and ``partial_pressure`` fields in its dictionary will be passed without modification. (That is, no conversion to quantitative cross-section will be attempted.) If this option is set to True, then if the code finds missing data, it will attempt to generate a quantitative cross-section by guessing the missing values. Based upon NIST's infrared database, typical values for guessing here are ``partial_pressure = 150.0 mmHg`` and ``path length = 0.1 m``.\n\nYou can view a notebook demo in the doc folder to see how you can produce a series of plots showing spectra.\n\njcamp files\n-----------\n\nThe repository comes with four folders containing JCAMP-format files: ``infrared_spectra/``, ``mass_spectra/``, ``raman_spectra/``, and ``uvvis_spectra``. These were downloaded from freely-available internet databases, and can be used as example format files.", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/nzhagen/jcamp", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/nzhagen/jcamp", "keywords": "jcamp,jcamp-dx,spectra", "license": "", "maintainer": "", "maintainer_email": "", "name": "jcamp", "package_url": "https://pypi.org/project/jcamp/", "platform": "", "project_url": "https://pypi.org/project/jcamp/", "project_urls": {"Download": "https://github.com/nzhagen/jcamp", "Homepage": "https://github.com/nzhagen/jcamp"}, "release_url": "https://pypi.org/project/jcamp/1.2.1/", "requires_dist": null, "requires_python": "", "summary": "JCAMP-DX file reader", "version": "1.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A set of Python utilities for reading JCAMP-DX files.</p>\n<p>The <tt>JCAMP_reader()</tt> function takes a filename as input, and returns a dictionary containing the data found in the file. Specifically, the keys contained in the dictionary are: (1) the field names found in the file\u2019s header, with values being int- or float-type if the corresponding field is a numerical type, or a string-type otherwise. (2) two arrays <tt>x</tt> and <tt>y</tt>, giving the scaled values of the data points (scaled according to the <tt>xfactor</tt> and <tt>yfactor</tt> fields in the header, if they exist. The units of <tt>x</tt> and <tt>y</tt> are whatever are indicated in the header fields <tt>xunits</tt> and <tt>yunits</tt>, if these exist.</p>\n<p>The <tt>JCAMP_calc_xsec()</tt> function is intended to takes as input the result of the <tt>JCAMP_reader()</tt> function and to convert the <tt>x</tt> data to wavelength in microns, and the <tt>y</tt> data to cross-section in units of m^2 for gas concentration of 1ppm at standard atmospheric pressure and temperature, across a path length of 1 meter. The <tt>JCAMP_calc_xsec()</tt> function takes as input the data dictionary <tt>jcamp_dict</tt>, and manipulates that dictionary directly without having a separate return value. Changes to the dictionary may including adding the fields:</p>\n<pre>wavelengths: the array of wavelength values (in microns) for each data point\nwavenumbers: the array of wavenumber values (in cm^-1) for each data point\nxsec: the array of cross-section values (in units of m^2 at 1ppm.m)\n</pre>\n<p>and modifying the fields:</p>\n<pre>xunits: micron\nyunits: m^2 at 1ppm.m\n</pre>\n<p>The optional arguments <tt>wavemin</tt>, <tt>wavemax</tt> are used if the user wishes to truncate the data to only a desired spectral range. For example, setting <tt>wavemin=8.0</tt> and <tt>wavemax=12.0</tt> means that the returned data arrays will only contain data corresponding to those wavlengths. If the <tt>skip_nonquant</tt> optional input argument is used, then any input spectrum that does not have the complete <tt>path_length</tt> and <tt>partial_pressure</tt> fields in its dictionary will be passed without modification. (That is, no conversion to quantitative cross-section will be attempted.) If this option is set to True, then if the code finds missing data, it will attempt to generate a quantitative cross-section by guessing the missing values. Based upon NIST\u2019s infrared database, typical values for guessing here are <tt>partial_pressure = 150.0 mmHg</tt> and <tt>path length = 0.1 m</tt>.</p>\n<p>You can view a notebook demo in the doc folder to see how you can produce a series of plots showing spectra.</p>\n<div id=\"jcamp-files\">\n<h2>jcamp files</h2>\n<p>The repository comes with four folders containing JCAMP-format files: <tt>infrared_spectra/</tt>, <tt>mass_spectra/</tt>, <tt>raman_spectra/</tt>, and <tt>uvvis_spectra</tt>. These were downloaded from freely-available internet databases, and can be used as example format files.</p>\n</div>\n\n          </div>"}, "last_serial": 2996440, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "128d96ff2465614be19886bda0f7ad5e", "sha256": "e99723912e8b0a0b88528dbe1b315511402021ee5d85dd7d7e521d67561d7032"}, "downloads": -1, "filename": "jcamp-1.0.tar.gz", "has_sig": false, "md5_digest": "128d96ff2465614be19886bda0f7ad5e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2226252, "upload_time": "2013-12-11T13:41:34", "upload_time_iso_8601": "2013-12-11T13:41:34.163192Z", "url": "https://files.pythonhosted.org/packages/8b/99/c409bf0b376be6bd7147cc0e93167a0dd673376837bbf70d1124d7bd1b5f/jcamp-1.0.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "368f30b79e6ae22c736c24375d5631f1", "sha256": "0f5160c6a22261d9e1aa3eba1905e82f2fe4bb3f66b4376c9c56cf70978f82a8"}, "downloads": -1, "filename": "jcamp-1.1.tar.gz", "has_sig": false, "md5_digest": "368f30b79e6ae22c736c24375d5631f1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7644, "upload_time": "2017-06-26T11:00:50", "upload_time_iso_8601": "2017-06-26T11:00:50.865502Z", "url": "https://files.pythonhosted.org/packages/38/b2/886e158870b3a13578f686e69816f5de493d54d73a551cb77b003220bc67/jcamp-1.1.tar.gz", "yanked": false}], "1.2": [{"comment_text": "", "digests": {"md5": "72b44e4cee0781e5b49e700223a7ffbb", "sha256": "5617761789896fe75b7596ebc9468f81918daa1df4fe19f89b63bed2a7bcb967"}, "downloads": -1, "filename": "jcamp-1.2.tar.gz", "has_sig": false, "md5_digest": "72b44e4cee0781e5b49e700223a7ffbb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8244, "upload_time": "2017-07-01T03:27:14", "upload_time_iso_8601": "2017-07-01T03:27:14.105754Z", "url": "https://files.pythonhosted.org/packages/ee/e9/9ae4dd2a14714cabe6103be23ddb53e7b3457d11b9818d2e0461261ae68a/jcamp-1.2.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "1244e525e8926995c195a109c56ed738", "sha256": "df22a60d8d79994f7740d27ad62f3a12f64a945935bc7a9d05bc89a5989fd54c"}, "downloads": -1, "filename": "jcamp-1.2.1.tar.gz", "has_sig": false, "md5_digest": "1244e525e8926995c195a109c56ed738", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8275, "upload_time": "2017-07-03T11:08:32", "upload_time_iso_8601": "2017-07-03T11:08:32.865971Z", "url": "https://files.pythonhosted.org/packages/fc/4a/3070fd39178b7d9b50c7b1fab6a06ea88d61270fd732dd9d9bd0f29f91c5/jcamp-1.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1244e525e8926995c195a109c56ed738", "sha256": "df22a60d8d79994f7740d27ad62f3a12f64a945935bc7a9d05bc89a5989fd54c"}, "downloads": -1, "filename": "jcamp-1.2.1.tar.gz", "has_sig": false, "md5_digest": "1244e525e8926995c195a109c56ed738", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8275, "upload_time": "2017-07-03T11:08:32", "upload_time_iso_8601": "2017-07-03T11:08:32.865971Z", "url": "https://files.pythonhosted.org/packages/fc/4a/3070fd39178b7d9b50c7b1fab6a06ea88d61270fd732dd9d9bd0f29f91c5/jcamp-1.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:59 2020"}