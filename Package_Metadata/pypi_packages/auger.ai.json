{"info": {"author": "Deep Learn, Inc.", "author_email": "augerai@dplrn.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Intended Audience :: System Administrators", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3 :: Only", "Topic :: Software Development :: Build Tools"], "description": "# Install\n```\npip install auger.ai\n```\n\n# Auger.ai\nAuger Cloud python and command line interface\n\n\n# CLI commands\n\n- auth - allows to login into Auger Cloud\n  - login\n  - logout\n  - whoami\n\n- new - creates local folder for your Project and puts there auger.yaml;\nauger.yaml provides local context for the Project and keeps settings for Experiment(s)\n\n- project\n  - list - list all Projects for your Organization.\n  - select - selects existing Project and stores it's name in auger.yaml;\n  all further operations with DataSet(s), Experiment(s), and Model(s) will be\n  performed in context of this Project.  \n  - create - creates Project on Auger Cloud; Project name will be stored in auger.yaml;\n  all further operations with DataSet(s), Experiment(s), and Model(s) will be\n  performed in context of this Project.  \n  - delete - deletes Project on Auger Cloud and clears Project name from auger.yaml\n  - start - starts Project cluster.\n  - stop - stops Project cluster.\n\n- dataset\n  - list - list all DataSets(s) for the Project.\n  - select - selects existing DataSet and stores it's name in auger.yaml;\n  all further operations with Experiments and Models will be performed using this DataSet.\n  - create - creates new DataSet on Auger Cloud from the local or remote data file;\n  name of the DataSet will be stored in auger.yaml;\n  all further operations with Experiments and Models will be performed using this DataSet.\n  - download - Downloads source data form Data Set on the Auger Cloud.\n  If Data Set name is not specified on command line, auger.yaml/dataset will be used instead.\n  - delete - deletes DataSet on Auger Cloud and clears DataSet name from auger.yaml\n\n- experiment\n  - list - list all Experiment(s) for the DataSet\n  - start - starts Experiment with selected DataSet; Experiment settings configured in auger.yaml\n  - stop - stops running experiment.\n  - leaderboard - shows leaderboard of the currently running or the last completed experiment.\n  - history - shows history (leaderboards and settings) of the previous experiment runs.\n\n- model\n  - list - lists all deployed models on Auger Cloud; auger.ai don't keep track of locally deployed models.\n  - deploy - deploys selected model locally or on Auger Cloud.\n  - predict - predicts using deployed model.\n\n\n# Auger.ai API\n## Base Classes\n### auger.api.Context\nContext provides environment to run Auger Experiments and Models:\n- loads Auger Credentials and initializes Auger REST API to communicate\nwith remote Auger Cloud;\n- loads Auger settings from auger.yaml and provides access to these settings\nto Auger classes and business objects;\n- provides logging interface to all Auger classes and business objects.\n\nCredentials could be acquired using Auger CLI auth command or loaded from Auger website.\nCredentials lookup and loading order:\n- form environment variable AUGER_CREDENTIALS set with content of\n  the credentials json;\n- from auger.json file, path to folder with credentials set with\n  environment variable AUGER_CREDENTIALS_PATH;\n- from auger.json file, path to folder with credentials set with\n  path_to_credentials key in auger.yaml\n- if none above, form $HOME/.augerai/auger.json\n\n### auger.api.Project\nProject provides interface to Auger Project.\n\n- **Project(context, project_name)** - constructs Project instance.\n  - context - instance of auger.api.Context.\n  - project_name - name of the existing or new Project, optional.\n\n- **list()** - lists all Projects in your Organization. Returns iterator where\n  each item is dictionary with Project properties. Throws exception if can't\n    validate credentials or network connection error.\n\n  Example:\n  ```\n  ctx = Context()\n  for project in iter(Project(ctx).list()):\n    ctx.log(project.get('name'))\n  ```\n\n- **create()** - creates Project on Auger Cloud. Throws exception if can't\n  validate credentials, Project with such name already exists, or network\n  connection error.\n\n  Example:\n  ```\n  ctx = Context()\n  project = Project(ctx, new_project_name).create()\n  ```\n\n- **delete()** - deletes Project on Auger Cloud. Throws exception if can't\n  validate credentials, Project with such name doesn't exist, or network\n  connection error.\n\n  Example:\n  ```\n  ctx = Context()\n  Project(ctx, existing_project_name).delete()\n  ```\n\n- **start()** - starts Project cluster. DataSet processing, Experiment runs\n  and Model deploy and predict need cluster to perform operations and will\n  start cluster automatically. It is possible, but not necessary, to start\n  cluster beforehand. Throws exception if can't validate credentials or\n  network connection error.\n\n  Project cluster configuration defined in auger.yaml:\n  ```\n  cluster:\n    # Cluster node type: standard|high_memory\n    type: high_memory\n    # Minimal number of cluster nodes\n    min_nodes: 2\n    # Maximum number of cluster nodes\n    max_nodes: 4\n    # Cluster software stack version - optional\n    stack_version: experimental\n  ```\n\n  Example:\n  ```\n  ctx = Context()\n  Project(ctx, project_name).start()\n  ```\n\n- **stop()** - stops Project cluster. DataSet processing, Experiment runs\n  and Model deploy and predict need cluster to perform operations and will\n  start cluster automatically. Cluster will stop automatically after some\n  inactivity period. To stop it explicitly, use Project stop() method.\n  Throws exception if can't validate credentials, such project doesn't exist,\n  or network connection error.\n\n  Example:\n  ```\n  ctx = Context()\n  Project(ctx, project_name).stop()\n  ```\n\n- **properties()** - returns dictionary with Project properties. Throws exception\n  if can't validate credentials, such Project doesn't exist, or network connection\n  error.\n\n  Example:\n  ```\n  ctx = Context()\n  properties = Project(ctx, project_name).properties()\n  ```\n\n### auger.api.DataSet\nDataSet for training on Auger Cloud.\n\n- **DataSet(context, project, dataset_name)** - constructs DataSet instance.\n  - context - instance of auger.api.Context.\n  - project - instance of auger.api.Project pointing to existing remote project.\n  - dataset_name - name of the existing or new DataSet, optional.\n\n- **list()** - lists all DataSets(s) for the Project. Returns iterator where\n  each item is dictionary with DataSet properties. Throws exception if can't\n  validate credentials, parent project doesn't exist, or network connection error.\n\n\n  Example:\n  ```\n  ctx = Context()\n  project = Project(ctx, project_name)\n  for dataset in iter(DataSet(ctx, project).list()):\n    ctx.log(dataset.get('name'))\n  ```\n\n- **create(source)** - creates new DataSet on Auger Cloud from the local or\n  remote data file. If `dataset_name` is not set, name will be selected\n  automatically. Throws exception if can't validate credentials, parent project\n  doesn't exist, DataSet with specified name already exists, or network\n  connection error.\n\n  - source - path to local or link to remote .csv or .arff file\n\n  If Project cluster is not running, it will be started automatically to\n  parse and preprocess DataSet.\n\n  Example:\n  ```\n  ctx = Context()\n  project = Project(ctx, project_name)\n  dataset = DataSet(ctx, project).create('../iris.csv')\n  ctx.log('Created dataset %s' % dataset.name)\n  ```\n\n- **delete()** - deletes DataSet on Auger Cloud. Throws exception if can't\n  validate credentials, parent project doesn't exist, DataSet with specified\n  name doesn't exist, or network connection error.       \n\n  Example:\n  ```\n  ctx = Context()\n  project = Project(ctx, project_name)\n  DataSet(ctx, project, dataset_name).delete()\n  ctx.log('Deleted dataset %s' % dataset_name)\n  ```\n\n- **properties()** - returns dictionary with DataSet properties. Throws exception\n  if can't validate credentials, such DataSet doesn't exist, or network connection\n  error.\n\n  Example:\n  ```\n  ctx = Context()\n  project = Project(ctx, project_name)\n  properties = DataSet(ctx, project, dataset_name).properties()\n  ```\n\n### auger.api.Experiment\nExperiment searches for the best Model(s) for a given DataSet.\n\n- **Experiment(context, dataset, experiment_name)** - constructs Experiment instance.\n  - context - instance of auger.api.Context.\n  - dataset - instance of auger.api.DataSet pointing to existing remote DataSet\n    which will be used to search for the best Model.\n  - experiment_name - name of the existing or new Experiment, optional.\n\n- **list()** - list all Experiment(s) for the DataSet. Returns iterator where\n  each item is dictionary with Experiment properties. Throws exception if can't\n  validate credentials, parent DataSet doesn't exist, or network connection error.\n\n  Example:\n  ```\n  ctx = Context()\n  project = Project(ctx, project_name)\n  dataset = DataSet(ctx, project, dataset_name)\n  for exp in iter(Experiment(ctx, dataset).list()):\n    ctx.log(exp.get('name'))\n  ```\n\n- **start()** - starts Experiment with selected DataSet; Experiment settings\n  configured in auger.yaml. If `experiment_name` is not set in constructor,\n  unique name for the Experiment will be created automatically. Throws exception\n  if can't validate credentials, parent DataSet doesn't exist, experiment with\n  such name already exists, or network connection error.\n\n  If Project cluster is not running, it will be started automatically to process\n  search for the best Model.\n\n  Example:\n  ```\n  ctx = Context()\n  project = Project(ctx, project_name)\n  dataset = DataSet(ctx, project, dataset_name)\n  experiment_name, session_id = Experiment(ctx, dataset).start()\n  ```\n\n  Example of the Experiment settings in auget.yaml:\n  ```\n  # List of columns to be excluded from the training data\n  exclude:\n\n  experiment:\n    # Time series feature. If Data Source contains more then one DATETIME feature\n    # you will have to explicitly specify feature to use as time series\n    time_series:\n    # List of columns which should be used as label encoded features\n    label_encoded: []\n    # Number of folds used for k-folds validation of individual trial\n    cross_validation_folds: 5\n    # Maximum time to run experiment in minutes\n    max_total_time: 60\n    # Maximum time to run individual trial in minutes\n    max_eval_time: 1\n    # Maximum trials to run to complete experiment\n    max_n_trials: 10\n    # Try to improve model performance by creating ensembles from the trial models\n    use_ensemble: true\n    ### Metric used to build Model\n    # Score used to optimize ML model.\n    # Supported scores for classification: accuracy, f1_macro, f1_micro, f1_weighted, neg_log_loss, precision_macro, precision_micro, precision_weighted, recall_macro, recall_micro, recall_weighted\n    # Supported scores for binary classification: accuracy, average_precision, f1, f1_macro, f1_micro, f1_weighted, neg_log_loss, precision, precision_macro, precision_micro, precision_weighted, recall, recall_macro, recall_micro, recall_weighted, roc_auc, cohen_kappa_score, matthews_corrcoef\n    # Supported scores for regression and time series: explained_variance, neg_median_absolute_error, neg_mean_absolute_error, neg_mean_squared_error, neg_mean_squared_log_error, r2, neg_rmsle, neg_mase, mda, neg_rmse\n    metric: f1_macro\n  ```\n\n- **stop()** - stops running Experiment. Returns True is Experiment was running\n  and stopped now, False is Experiment wasn't running and stop command was ignored.\n  Throws exception if can't validate credentials, parent DataSet doesn't exist,\n  Experiment with such name doesn't exist, or network connection error.\n\n  Example:\n  ```\n  ctx = Context()\n  project = Project(ctx, project_name)\n  dataset = DataSet(ctx, project, dataset_name)\n  if Experiment(self.ctx, dataset, experiment_name).stop():\n      ctx.log('Search is stopped...')\n  else:\n      ctx.log('Search is not running. Stop is ignored.')\n  ```\n\n- **leaderboard(run_id)** - leaderboard of the currently running or\n  previously completed experiment(s). If `run_id` is not specified, method\n  returns currently running or last completed experiment leaderboard; otherwise\n  returns leaderboard for the run with specified id. Returns None if leaderboard\n  wasn't found.\n\n  In addition, returns status of the Experiment run:  \n  - preprocess - Search is preprocessing data for traing;\n  - started - Search is in progress;\n  - completed - Search is completed;\n  - interrupted - Search was interrupted.\n\n  Throws exception if can't validate credentials, parent DataSet doesn't exist,\n  Experiment with such name doesn't exist, or network connection error.\n\n  Example:\n  ```\n  ctx = Context()\n  project = Project(ctx, project_name)\n  dataset = DataSet(ctx, project, dataset_name)\n  # latest experiment leaderboard and latest experiment status\n  leaderboard, status = Experiment(ctx, dataset, experiment_name).leaderboard()\n  ```\n\n- **history()** - history (leaderboards and settings) of the previous\n  experiment runs. Returns iterator where each item is dictionary with properties\n  of the previous Experiment runs.\n  Throws exception if can't validate credentials, parent DataSet doesn't exist,\n  Experiment with such name doesn't exist, or network connection error.\n\n  Example:\n  ```\n  ctx = Context()\n  project = Project(ctx, project_name)\n  dataset = DataSet(ctx, project, dataset_name)\n  for run in iter(Experiment(self.ctx, dataset, experiment_name).history()):\n      ctx.log(\"run id: {}, start tiem: {}, status: {}\".format(\n        run.get('id'),\n        run.get('model_settings').get('start_time'),\n        run.get('status')))\n  ```\n\n- **properties()** - returns dictionary with Experiment properties. Throws exception\n  if can't validate credentials, such Experiment doesn't exist, or network connection\n  error.\n\n  Example:\n  ```\n  ctx = Context()\n  project = Project(ctx, project_name)\n  dataset = DataSet(ctx, project, dataset_name)\n  properties = Experiment(self.ctx, dataset, experiment_name).properties()\n  ```\n\n- **delete()** - deletes Experiment. Throws exception if can't validate\n  credentials, such Experiment doesn't exist, or network connection error.\n\n  Example:\n  ```\n  ctx = Context()\n  project = Project(ctx, project_name)\n  dataset = DataSet(ctx, project, dataset_name)\n  Experiment(self.ctx, dataset, experiment_name).delete()\n  ```\n\n### auger.api.Model\nDeploys or predicts using one of the Models from the Project Experiment(s)\nleaderboards.\n\n- **Model(context, project)** - constructs Model instance.\n  - context - instance of auger.api.Context.\n  - project - instance of auger.api.Project pointing to existing remote Project.\n\n- **list()** - lists all deployed models for a Project; auger.ai don't keep\n  track of locally deployed models. Returns iterator where each item is\n  dictionary with deployed Model properties. Throws exception if can't\n  validate credentials or network connection error.\n\n- **deploy(model_id, locally)** - deploys selected model locally or on\n  Auger Cloud. Returns deployed model id.\n  - model_id - id of the model from the any Experiment leaderboard\n  - locally - deploys model locally if True, on Auger Cloud if False; optional,\n    default is False.\n\n  Throws exception if can't validate credentials, project of model doesn't exist,\n  or network connection error.\n\n  Example:\n  ```\n  ctx = Context()\n  project = Project(ctx, project_name)\n  # deploys model locally\n  Model(ctx, project).deploy(model_id, True)\n  ```\n\n- **predict(filename, model_id, threshold, locally)** - predicts using deployed\n  model. Predictions stored next to the file with data to be\n  predicted on; file name will be appended with suffix `_predicted`.\n  - filename - file with data to be predicted\n  - model_id - id of the deployed model\n  - threshold - prediction threshold\n  - locally - if True predict using locally deployed model, predict using model\n    deployed on Auger Cloud\n\n  Throws exception if can't validate credentials, project of model doesn't exist,\n  or network connection error.\n\n  Example:\n  ```\n  ctx = Context()\n  project = Project(ctx, project_name)\n  # predict on the locally deployed model\n  Model(ctx, project).predict('../irises.csv', model_id, None, True)\n  # result will be stored in ../irises_predicted.csv\n  ```\n\n## Development Setup\n\nWe strongly recommend to install Python virtual environment:\n\n```\n$ pip install virtualenv virtualenvwrapper\n```\n\nClone Auger Cloud repo:\n\n```\n$ git clone https://github.com/deeplearninc/auger-ai\n```\n\nSetup dependencies and Auger command line:\n\n```\n$ pip install -e .[all]\n```\n\nRunning tests and getting test coverage:\n\n```\n$ pytest --cov='auger' --cov-report html tests/\n```\n\n#\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/deeplearninc/auger-ai", "keywords": "augerai auger ai machine learning automl deeplearn api sdk", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "auger.ai", "package_url": "https://pypi.org/project/auger.ai/", "platform": "any", "project_url": "https://pypi.org/project/auger.ai/", "project_urls": {"Homepage": "https://github.com/deeplearninc/auger-ai"}, "release_url": "https://pypi.org/project/auger.ai/0.2.5/", "requires_dist": ["click", "requests", "shortuuid", "auger-hub-api-client (==0.6.8)", "ruamel.yaml", "pandas (>=0.23.4)", "setuptools (>=40.1.0)", "s3fs", "boto3", "smart-open (==1.9.0)", "pytest ; extra == 'all'", "pytest-cov ; extra == 'all'", "pytest-xdist ; extra == 'all'", "flake8 ; extra == 'all'", "mock ; extra == 'all'", "pytest ; extra == 'testing'", "pytest-cov ; extra == 'testing'", "pytest-xdist ; extra == 'testing'", "flake8 ; extra == 'testing'", "mock ; extra == 'testing'"], "requires_python": ">=3", "summary": "Auger python and command line interface package", "version": "0.2.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Install</h1>\n<pre><code>pip install auger.ai\n</code></pre>\n<h1>Auger.ai</h1>\n<p>Auger Cloud python and command line interface</p>\n<h1>CLI commands</h1>\n<ul>\n<li>\n<p>auth - allows to login into Auger Cloud</p>\n<ul>\n<li>login</li>\n<li>logout</li>\n<li>whoami</li>\n</ul>\n</li>\n<li>\n<p>new - creates local folder for your Project and puts there auger.yaml;\nauger.yaml provides local context for the Project and keeps settings for Experiment(s)</p>\n</li>\n<li>\n<p>project</p>\n<ul>\n<li>list - list all Projects for your Organization.</li>\n<li>select - selects existing Project and stores it's name in auger.yaml;\nall further operations with DataSet(s), Experiment(s), and Model(s) will be\nperformed in context of this Project.</li>\n<li>create - creates Project on Auger Cloud; Project name will be stored in auger.yaml;\nall further operations with DataSet(s), Experiment(s), and Model(s) will be\nperformed in context of this Project.</li>\n<li>delete - deletes Project on Auger Cloud and clears Project name from auger.yaml</li>\n<li>start - starts Project cluster.</li>\n<li>stop - stops Project cluster.</li>\n</ul>\n</li>\n<li>\n<p>dataset</p>\n<ul>\n<li>list - list all DataSets(s) for the Project.</li>\n<li>select - selects existing DataSet and stores it's name in auger.yaml;\nall further operations with Experiments and Models will be performed using this DataSet.</li>\n<li>create - creates new DataSet on Auger Cloud from the local or remote data file;\nname of the DataSet will be stored in auger.yaml;\nall further operations with Experiments and Models will be performed using this DataSet.</li>\n<li>download - Downloads source data form Data Set on the Auger Cloud.\nIf Data Set name is not specified on command line, auger.yaml/dataset will be used instead.</li>\n<li>delete - deletes DataSet on Auger Cloud and clears DataSet name from auger.yaml</li>\n</ul>\n</li>\n<li>\n<p>experiment</p>\n<ul>\n<li>list - list all Experiment(s) for the DataSet</li>\n<li>start - starts Experiment with selected DataSet; Experiment settings configured in auger.yaml</li>\n<li>stop - stops running experiment.</li>\n<li>leaderboard - shows leaderboard of the currently running or the last completed experiment.</li>\n<li>history - shows history (leaderboards and settings) of the previous experiment runs.</li>\n</ul>\n</li>\n<li>\n<p>model</p>\n<ul>\n<li>list - lists all deployed models on Auger Cloud; auger.ai don't keep track of locally deployed models.</li>\n<li>deploy - deploys selected model locally or on Auger Cloud.</li>\n<li>predict - predicts using deployed model.</li>\n</ul>\n</li>\n</ul>\n<h1>Auger.ai API</h1>\n<h2>Base Classes</h2>\n<h3>auger.api.Context</h3>\n<p>Context provides environment to run Auger Experiments and Models:</p>\n<ul>\n<li>loads Auger Credentials and initializes Auger REST API to communicate\nwith remote Auger Cloud;</li>\n<li>loads Auger settings from auger.yaml and provides access to these settings\nto Auger classes and business objects;</li>\n<li>provides logging interface to all Auger classes and business objects.</li>\n</ul>\n<p>Credentials could be acquired using Auger CLI auth command or loaded from Auger website.\nCredentials lookup and loading order:</p>\n<ul>\n<li>form environment variable AUGER_CREDENTIALS set with content of\nthe credentials json;</li>\n<li>from auger.json file, path to folder with credentials set with\nenvironment variable AUGER_CREDENTIALS_PATH;</li>\n<li>from auger.json file, path to folder with credentials set with\npath_to_credentials key in auger.yaml</li>\n<li>if none above, form $HOME/.augerai/auger.json</li>\n</ul>\n<h3>auger.api.Project</h3>\n<p>Project provides interface to Auger Project.</p>\n<ul>\n<li>\n<p><strong>Project(context, project_name)</strong> - constructs Project instance.</p>\n<ul>\n<li>context - instance of auger.api.Context.</li>\n<li>project_name - name of the existing or new Project, optional.</li>\n</ul>\n</li>\n<li>\n<p><strong>list()</strong> - lists all Projects in your Organization. Returns iterator where\neach item is dictionary with Project properties. Throws exception if can't\nvalidate credentials or network connection error.</p>\n<p>Example:</p>\n<pre><code>ctx = Context()\nfor project in iter(Project(ctx).list()):\n  ctx.log(project.get('name'))\n</code></pre>\n</li>\n<li>\n<p><strong>create()</strong> - creates Project on Auger Cloud. Throws exception if can't\nvalidate credentials, Project with such name already exists, or network\nconnection error.</p>\n<p>Example:</p>\n<pre><code>ctx = Context()\nproject = Project(ctx, new_project_name).create()\n</code></pre>\n</li>\n<li>\n<p><strong>delete()</strong> - deletes Project on Auger Cloud. Throws exception if can't\nvalidate credentials, Project with such name doesn't exist, or network\nconnection error.</p>\n<p>Example:</p>\n<pre><code>ctx = Context()\nProject(ctx, existing_project_name).delete()\n</code></pre>\n</li>\n<li>\n<p><strong>start()</strong> - starts Project cluster. DataSet processing, Experiment runs\nand Model deploy and predict need cluster to perform operations and will\nstart cluster automatically. It is possible, but not necessary, to start\ncluster beforehand. Throws exception if can't validate credentials or\nnetwork connection error.</p>\n<p>Project cluster configuration defined in auger.yaml:</p>\n<pre><code>cluster:\n  # Cluster node type: standard|high_memory\n  type: high_memory\n  # Minimal number of cluster nodes\n  min_nodes: 2\n  # Maximum number of cluster nodes\n  max_nodes: 4\n  # Cluster software stack version - optional\n  stack_version: experimental\n</code></pre>\n<p>Example:</p>\n<pre><code>ctx = Context()\nProject(ctx, project_name).start()\n</code></pre>\n</li>\n<li>\n<p><strong>stop()</strong> - stops Project cluster. DataSet processing, Experiment runs\nand Model deploy and predict need cluster to perform operations and will\nstart cluster automatically. Cluster will stop automatically after some\ninactivity period. To stop it explicitly, use Project stop() method.\nThrows exception if can't validate credentials, such project doesn't exist,\nor network connection error.</p>\n<p>Example:</p>\n<pre><code>ctx = Context()\nProject(ctx, project_name).stop()\n</code></pre>\n</li>\n<li>\n<p><strong>properties()</strong> - returns dictionary with Project properties. Throws exception\nif can't validate credentials, such Project doesn't exist, or network connection\nerror.</p>\n<p>Example:</p>\n<pre><code>ctx = Context()\nproperties = Project(ctx, project_name).properties()\n</code></pre>\n</li>\n</ul>\n<h3>auger.api.DataSet</h3>\n<p>DataSet for training on Auger Cloud.</p>\n<ul>\n<li>\n<p><strong>DataSet(context, project, dataset_name)</strong> - constructs DataSet instance.</p>\n<ul>\n<li>context - instance of auger.api.Context.</li>\n<li>project - instance of auger.api.Project pointing to existing remote project.</li>\n<li>dataset_name - name of the existing or new DataSet, optional.</li>\n</ul>\n</li>\n<li>\n<p><strong>list()</strong> - lists all DataSets(s) for the Project. Returns iterator where\neach item is dictionary with DataSet properties. Throws exception if can't\nvalidate credentials, parent project doesn't exist, or network connection error.</p>\n<p>Example:</p>\n<pre><code>ctx = Context()\nproject = Project(ctx, project_name)\nfor dataset in iter(DataSet(ctx, project).list()):\n  ctx.log(dataset.get('name'))\n</code></pre>\n</li>\n<li>\n<p><strong>create(source)</strong> - creates new DataSet on Auger Cloud from the local or\nremote data file. If <code>dataset_name</code> is not set, name will be selected\nautomatically. Throws exception if can't validate credentials, parent project\ndoesn't exist, DataSet with specified name already exists, or network\nconnection error.</p>\n<ul>\n<li>source - path to local or link to remote .csv or .arff file</li>\n</ul>\n<p>If Project cluster is not running, it will be started automatically to\nparse and preprocess DataSet.</p>\n<p>Example:</p>\n<pre><code>ctx = Context()\nproject = Project(ctx, project_name)\ndataset = DataSet(ctx, project).create('../iris.csv')\nctx.log('Created dataset %s' % dataset.name)\n</code></pre>\n</li>\n<li>\n<p><strong>delete()</strong> - deletes DataSet on Auger Cloud. Throws exception if can't\nvalidate credentials, parent project doesn't exist, DataSet with specified\nname doesn't exist, or network connection error.</p>\n<p>Example:</p>\n<pre><code>ctx = Context()\nproject = Project(ctx, project_name)\nDataSet(ctx, project, dataset_name).delete()\nctx.log('Deleted dataset %s' % dataset_name)\n</code></pre>\n</li>\n<li>\n<p><strong>properties()</strong> - returns dictionary with DataSet properties. Throws exception\nif can't validate credentials, such DataSet doesn't exist, or network connection\nerror.</p>\n<p>Example:</p>\n<pre><code>ctx = Context()\nproject = Project(ctx, project_name)\nproperties = DataSet(ctx, project, dataset_name).properties()\n</code></pre>\n</li>\n</ul>\n<h3>auger.api.Experiment</h3>\n<p>Experiment searches for the best Model(s) for a given DataSet.</p>\n<ul>\n<li>\n<p><strong>Experiment(context, dataset, experiment_name)</strong> - constructs Experiment instance.</p>\n<ul>\n<li>context - instance of auger.api.Context.</li>\n<li>dataset - instance of auger.api.DataSet pointing to existing remote DataSet\nwhich will be used to search for the best Model.</li>\n<li>experiment_name - name of the existing or new Experiment, optional.</li>\n</ul>\n</li>\n<li>\n<p><strong>list()</strong> - list all Experiment(s) for the DataSet. Returns iterator where\neach item is dictionary with Experiment properties. Throws exception if can't\nvalidate credentials, parent DataSet doesn't exist, or network connection error.</p>\n<p>Example:</p>\n<pre><code>ctx = Context()\nproject = Project(ctx, project_name)\ndataset = DataSet(ctx, project, dataset_name)\nfor exp in iter(Experiment(ctx, dataset).list()):\n  ctx.log(exp.get('name'))\n</code></pre>\n</li>\n<li>\n<p><strong>start()</strong> - starts Experiment with selected DataSet; Experiment settings\nconfigured in auger.yaml. If <code>experiment_name</code> is not set in constructor,\nunique name for the Experiment will be created automatically. Throws exception\nif can't validate credentials, parent DataSet doesn't exist, experiment with\nsuch name already exists, or network connection error.</p>\n<p>If Project cluster is not running, it will be started automatically to process\nsearch for the best Model.</p>\n<p>Example:</p>\n<pre><code>ctx = Context()\nproject = Project(ctx, project_name)\ndataset = DataSet(ctx, project, dataset_name)\nexperiment_name, session_id = Experiment(ctx, dataset).start()\n</code></pre>\n<p>Example of the Experiment settings in auget.yaml:</p>\n<pre><code># List of columns to be excluded from the training data\nexclude:\n\nexperiment:\n  # Time series feature. If Data Source contains more then one DATETIME feature\n  # you will have to explicitly specify feature to use as time series\n  time_series:\n  # List of columns which should be used as label encoded features\n  label_encoded: []\n  # Number of folds used for k-folds validation of individual trial\n  cross_validation_folds: 5\n  # Maximum time to run experiment in minutes\n  max_total_time: 60\n  # Maximum time to run individual trial in minutes\n  max_eval_time: 1\n  # Maximum trials to run to complete experiment\n  max_n_trials: 10\n  # Try to improve model performance by creating ensembles from the trial models\n  use_ensemble: true\n  ### Metric used to build Model\n  # Score used to optimize ML model.\n  # Supported scores for classification: accuracy, f1_macro, f1_micro, f1_weighted, neg_log_loss, precision_macro, precision_micro, precision_weighted, recall_macro, recall_micro, recall_weighted\n  # Supported scores for binary classification: accuracy, average_precision, f1, f1_macro, f1_micro, f1_weighted, neg_log_loss, precision, precision_macro, precision_micro, precision_weighted, recall, recall_macro, recall_micro, recall_weighted, roc_auc, cohen_kappa_score, matthews_corrcoef\n  # Supported scores for regression and time series: explained_variance, neg_median_absolute_error, neg_mean_absolute_error, neg_mean_squared_error, neg_mean_squared_log_error, r2, neg_rmsle, neg_mase, mda, neg_rmse\n  metric: f1_macro\n</code></pre>\n</li>\n<li>\n<p><strong>stop()</strong> - stops running Experiment. Returns True is Experiment was running\nand stopped now, False is Experiment wasn't running and stop command was ignored.\nThrows exception if can't validate credentials, parent DataSet doesn't exist,\nExperiment with such name doesn't exist, or network connection error.</p>\n<p>Example:</p>\n<pre><code>ctx = Context()\nproject = Project(ctx, project_name)\ndataset = DataSet(ctx, project, dataset_name)\nif Experiment(self.ctx, dataset, experiment_name).stop():\n    ctx.log('Search is stopped...')\nelse:\n    ctx.log('Search is not running. Stop is ignored.')\n</code></pre>\n</li>\n<li>\n<p><strong>leaderboard(run_id)</strong> - leaderboard of the currently running or\npreviously completed experiment(s). If <code>run_id</code> is not specified, method\nreturns currently running or last completed experiment leaderboard; otherwise\nreturns leaderboard for the run with specified id. Returns None if leaderboard\nwasn't found.</p>\n<p>In addition, returns status of the Experiment run:</p>\n<ul>\n<li>preprocess - Search is preprocessing data for traing;</li>\n<li>started - Search is in progress;</li>\n<li>completed - Search is completed;</li>\n<li>interrupted - Search was interrupted.</li>\n</ul>\n<p>Throws exception if can't validate credentials, parent DataSet doesn't exist,\nExperiment with such name doesn't exist, or network connection error.</p>\n<p>Example:</p>\n<pre><code>ctx = Context()\nproject = Project(ctx, project_name)\ndataset = DataSet(ctx, project, dataset_name)\n# latest experiment leaderboard and latest experiment status\nleaderboard, status = Experiment(ctx, dataset, experiment_name).leaderboard()\n</code></pre>\n</li>\n<li>\n<p><strong>history()</strong> - history (leaderboards and settings) of the previous\nexperiment runs. Returns iterator where each item is dictionary with properties\nof the previous Experiment runs.\nThrows exception if can't validate credentials, parent DataSet doesn't exist,\nExperiment with such name doesn't exist, or network connection error.</p>\n<p>Example:</p>\n<pre><code>ctx = Context()\nproject = Project(ctx, project_name)\ndataset = DataSet(ctx, project, dataset_name)\nfor run in iter(Experiment(self.ctx, dataset, experiment_name).history()):\n    ctx.log(\"run id: {}, start tiem: {}, status: {}\".format(\n      run.get('id'),\n      run.get('model_settings').get('start_time'),\n      run.get('status')))\n</code></pre>\n</li>\n<li>\n<p><strong>properties()</strong> - returns dictionary with Experiment properties. Throws exception\nif can't validate credentials, such Experiment doesn't exist, or network connection\nerror.</p>\n<p>Example:</p>\n<pre><code>ctx = Context()\nproject = Project(ctx, project_name)\ndataset = DataSet(ctx, project, dataset_name)\nproperties = Experiment(self.ctx, dataset, experiment_name).properties()\n</code></pre>\n</li>\n<li>\n<p><strong>delete()</strong> - deletes Experiment. Throws exception if can't validate\ncredentials, such Experiment doesn't exist, or network connection error.</p>\n<p>Example:</p>\n<pre><code>ctx = Context()\nproject = Project(ctx, project_name)\ndataset = DataSet(ctx, project, dataset_name)\nExperiment(self.ctx, dataset, experiment_name).delete()\n</code></pre>\n</li>\n</ul>\n<h3>auger.api.Model</h3>\n<p>Deploys or predicts using one of the Models from the Project Experiment(s)\nleaderboards.</p>\n<ul>\n<li>\n<p><strong>Model(context, project)</strong> - constructs Model instance.</p>\n<ul>\n<li>context - instance of auger.api.Context.</li>\n<li>project - instance of auger.api.Project pointing to existing remote Project.</li>\n</ul>\n</li>\n<li>\n<p><strong>list()</strong> - lists all deployed models for a Project; auger.ai don't keep\ntrack of locally deployed models. Returns iterator where each item is\ndictionary with deployed Model properties. Throws exception if can't\nvalidate credentials or network connection error.</p>\n</li>\n<li>\n<p><strong>deploy(model_id, locally)</strong> - deploys selected model locally or on\nAuger Cloud. Returns deployed model id.</p>\n<ul>\n<li>model_id - id of the model from the any Experiment leaderboard</li>\n<li>locally - deploys model locally if True, on Auger Cloud if False; optional,\ndefault is False.</li>\n</ul>\n<p>Throws exception if can't validate credentials, project of model doesn't exist,\nor network connection error.</p>\n<p>Example:</p>\n<pre><code>ctx = Context()\nproject = Project(ctx, project_name)\n# deploys model locally\nModel(ctx, project).deploy(model_id, True)\n</code></pre>\n</li>\n<li>\n<p><strong>predict(filename, model_id, threshold, locally)</strong> - predicts using deployed\nmodel. Predictions stored next to the file with data to be\npredicted on; file name will be appended with suffix <code>_predicted</code>.</p>\n<ul>\n<li>filename - file with data to be predicted</li>\n<li>model_id - id of the deployed model</li>\n<li>threshold - prediction threshold</li>\n<li>locally - if True predict using locally deployed model, predict using model\ndeployed on Auger Cloud</li>\n</ul>\n<p>Throws exception if can't validate credentials, project of model doesn't exist,\nor network connection error.</p>\n<p>Example:</p>\n<pre><code>ctx = Context()\nproject = Project(ctx, project_name)\n# predict on the locally deployed model\nModel(ctx, project).predict('../irises.csv', model_id, None, True)\n# result will be stored in ../irises_predicted.csv\n</code></pre>\n</li>\n</ul>\n<h2>Development Setup</h2>\n<p>We strongly recommend to install Python virtual environment:</p>\n<pre><code>$ pip install virtualenv virtualenvwrapper\n</code></pre>\n<p>Clone Auger Cloud repo:</p>\n<pre><code>$ git clone https://github.com/deeplearninc/auger-ai\n</code></pre>\n<p>Setup dependencies and Auger command line:</p>\n<pre><code>$ pip install -e .[all]\n</code></pre>\n<p>Running tests and getting test coverage:</p>\n<pre><code>$ pytest --cov='auger' --cov-report html tests/\n</code></pre>\n<h1></h1>\n\n          </div>"}, "last_serial": 6984433, "releases": {"0.1.10": [{"comment_text": "", "digests": {"md5": "2ec92645a20ebbfc17fa07c7729e626e", "sha256": "52636d88f451ef4a525ac70a7dc6a9e8d0babf0898ed7a6d8c8be9015f423737"}, "downloads": -1, "filename": "auger.ai-0.1.10-py3-none-any.whl", "has_sig": false, "md5_digest": "2ec92645a20ebbfc17fa07c7729e626e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 40951, "upload_time": "2019-07-09T21:16:09", "upload_time_iso_8601": "2019-07-09T21:16:09.112906Z", "url": "https://files.pythonhosted.org/packages/63/fb/10ea9869938ec8021168f8556e40b32355a9affa32a40163d6d86a8dde16/auger.ai-0.1.10-py3-none-any.whl", "yanked": false}], "0.1.14": [{"comment_text": "", "digests": {"md5": "b59b8bb74a48acc0b8d3d1402405d687", "sha256": "b81844e4e9207bf97a3959797962b2afb0cdffe3090fa3ad6f9dbd5edaea6c1a"}, "downloads": -1, "filename": "auger.ai-0.1.14-py3-none-any.whl", "has_sig": false, "md5_digest": "b59b8bb74a48acc0b8d3d1402405d687", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 41147, "upload_time": "2019-07-19T13:48:50", "upload_time_iso_8601": "2019-07-19T13:48:50.630577Z", "url": "https://files.pythonhosted.org/packages/9b/c0/81d5ae1a730948c51a2de7e521b03ff01aac838db28bd9311ab2de820110/auger.ai-0.1.14-py3-none-any.whl", "yanked": false}], "0.1.15": [{"comment_text": "", "digests": {"md5": "dfb19870f85c9551dad5f8f704166408", "sha256": "dab3f2a9ff879033a3bc39938885004ab25abb7053fc67d3de623a37feffb777"}, "downloads": -1, "filename": "auger.ai-0.1.15-py3-none-any.whl", "has_sig": false, "md5_digest": "dfb19870f85c9551dad5f8f704166408", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 41195, "upload_time": "2019-09-06T00:04:03", "upload_time_iso_8601": "2019-09-06T00:04:03.655995Z", "url": "https://files.pythonhosted.org/packages/55/28/7f571e9873c536dbb821ec6fa8bc5fbb9c0773c5fea714fbaf655b06055b/auger.ai-0.1.15-py3-none-any.whl", "yanked": false}], "0.1.16": [{"comment_text": "", "digests": {"md5": "b39ae6aa1628b39b38b49f4ebe449b7f", "sha256": "5d03cc213995d977b8f50fda5f86d4fe48dd5f8fe6bbb4bc27def84ba87a2f9f"}, "downloads": -1, "filename": "auger.ai-0.1.16-py3-none-any.whl", "has_sig": false, "md5_digest": "b39ae6aa1628b39b38b49f4ebe449b7f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 41204, "upload_time": "2019-09-06T02:25:52", "upload_time_iso_8601": "2019-09-06T02:25:52.675773Z", "url": "https://files.pythonhosted.org/packages/09/0a/cc83b879c084e0bc3d548f9498f74c0bb3debd37a13059d6f2cc71362456/auger.ai-0.1.16-py3-none-any.whl", "yanked": false}], "0.1.17": [{"comment_text": "", "digests": {"md5": "35c9bcae8316a8bbcef047e9134bb26d", "sha256": "27afef9fa646d5733a3a74b71b9727c46236490b5dafdb65d0628a6b81d60cc4"}, "downloads": -1, "filename": "auger.ai-0.1.17-py3-none-any.whl", "has_sig": false, "md5_digest": "35c9bcae8316a8bbcef047e9134bb26d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 41413, "upload_time": "2019-09-09T18:00:42", "upload_time_iso_8601": "2019-09-09T18:00:42.487351Z", "url": "https://files.pythonhosted.org/packages/b9/06/5a8c849b681885e426cd52eecd3a967c0decc04ef71de906d0c420751096/auger.ai-0.1.17-py3-none-any.whl", "yanked": false}], "0.1.18": [{"comment_text": "", "digests": {"md5": "97d95e1da46000dd9db3969b62146534", "sha256": "e29e1828d072fa7359b93ec8c869c14c0db10b191beac630c8521db3f39e3142"}, "downloads": -1, "filename": "auger.ai-0.1.18-py3-none-any.whl", "has_sig": false, "md5_digest": "97d95e1da46000dd9db3969b62146534", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 41423, "upload_time": "2019-10-17T09:05:09", "upload_time_iso_8601": "2019-10-17T09:05:09.616689Z", "url": "https://files.pythonhosted.org/packages/c5/40/1b8d7e3d8e4127d6fa985fb3be5024238280e089765ae8874c1086cc72e1/auger.ai-0.1.18-py3-none-any.whl", "yanked": false}], "0.1.19": [{"comment_text": "", "digests": {"md5": "a20a972b1a0dfdd2780edb5e762b1f37", "sha256": "23614f37d2747a25441f495b76a6f3303d7f6efceb54f33e93adfac9719a7b70"}, "downloads": -1, "filename": "auger.ai-0.1.19-py3-none-any.whl", "has_sig": false, "md5_digest": "a20a972b1a0dfdd2780edb5e762b1f37", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 41470, "upload_time": "2019-10-22T08:57:57", "upload_time_iso_8601": "2019-10-22T08:57:57.707103Z", "url": "https://files.pythonhosted.org/packages/c5/bb/222af9b4968c7d247b5770ce4d77ccc7b8c8027fc5dc5470182c8cdfbfae/auger.ai-0.1.19-py3-none-any.whl", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "753006bcd9a9e0b1105542228a312979", "sha256": "5141c4a06e7bf1987b1bd57bad34fcfef2497b17788a80b7d443149712413e84"}, "downloads": -1, "filename": "auger.ai-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "753006bcd9a9e0b1105542228a312979", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 10993, "upload_time": "2019-07-08T15:35:49", "upload_time_iso_8601": "2019-07-08T15:35:49.231481Z", "url": "https://files.pythonhosted.org/packages/56/83/55766e78d08c603941f5458ff111e8dd5eb3c430f4b96d145e5d4088195e/auger.ai-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a4edc4ea39c55691084843f2a597565d", "sha256": "5b477ed1937a557182decb9b239939d06e71885cde678da4695d8d3cef924b9e"}, "downloads": -1, "filename": "auger.ai-0.1.2.tar.gz", "has_sig": false, "md5_digest": "a4edc4ea39c55691084843f2a597565d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 12210, "upload_time": "2019-07-08T15:35:51", "upload_time_iso_8601": "2019-07-08T15:35:51.648897Z", "url": "https://files.pythonhosted.org/packages/73/a7/f2e9cdcdab7663b956a3610033debdcc3519179fb199759bbbbd3af43653/auger.ai-0.1.2.tar.gz", "yanked": false}], "0.1.20": [{"comment_text": "", "digests": {"md5": "5053a88b51e89bb4f17a5b3e6e4c7792", "sha256": "d4ce0bdf11ab1eb79405e0f6c4186d1034d2ec243d07098b2663aff1a05f0ff3"}, "downloads": -1, "filename": "auger.ai-0.1.20-py3-none-any.whl", "has_sig": false, "md5_digest": "5053a88b51e89bb4f17a5b3e6e4c7792", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 41556, "upload_time": "2020-02-22T09:14:30", "upload_time_iso_8601": "2020-02-22T09:14:30.343290Z", "url": "https://files.pythonhosted.org/packages/ad/07/613dc1e68920f5d946d6ba7d448cfe49fa16f7096269584ddd53d54661e7/auger.ai-0.1.20-py3-none-any.whl", "yanked": false}], "0.1.21": [{"comment_text": "", "digests": {"md5": "89ca87643c979c3eeca3ec824ce4f0d9", "sha256": "af983eb2eaec08969b975b5f211904e45d96f2a1862e2a26d0123857bef26b96"}, "downloads": -1, "filename": "auger.ai-0.1.21-py3-none-any.whl", "has_sig": false, "md5_digest": "89ca87643c979c3eeca3ec824ce4f0d9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 41603, "upload_time": "2020-02-24T23:54:25", "upload_time_iso_8601": "2020-02-24T23:54:25.053151Z", "url": "https://files.pythonhosted.org/packages/b8/94/fd776c751f7f2fb38905701223a28adc37bc620871449f5bf107b02aaa61/auger.ai-0.1.21-py3-none-any.whl", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "f8bdc36b557a2d8dfb49404802e0ed52", "sha256": "1d4d2bdad078e2d4a3684482d82bc09bda728043753f15d3375f32fc2d4b8976"}, "downloads": -1, "filename": "auger.ai-0.1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "f8bdc36b557a2d8dfb49404802e0ed52", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 10991, "upload_time": "2019-07-08T16:03:30", "upload_time_iso_8601": "2019-07-08T16:03:30.293932Z", "url": "https://files.pythonhosted.org/packages/f1/53/be98613418b3618f588f836f54bd39a72f0613d956d4fbc84fed05e9176a/auger.ai-0.1.5-py3-none-any.whl", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "f1ccda9ed6c7e47e9fb380708f3fd8cc", "sha256": "b24fef8442a0243b481012c32b0cbaacc3864d14939e6a55c4a76f94dd8a0385"}, "downloads": -1, "filename": "auger.ai-0.1.6-py3-none-any.whl", "has_sig": false, "md5_digest": "f1ccda9ed6c7e47e9fb380708f3fd8cc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 10996, "upload_time": "2019-07-08T16:08:37", "upload_time_iso_8601": "2019-07-08T16:08:37.884541Z", "url": "https://files.pythonhosted.org/packages/fc/72/c670eb865a2615f6eeacfd75a7362983b7dd980e680e21066768f216ca5f/auger.ai-0.1.6-py3-none-any.whl", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "c3024b045f524d227dc2b0554002bd5a", "sha256": "56853f5708bb3f5f3f1e854d2e55277db81a11ccd883dcc2c2b206d25e0167ab"}, "downloads": -1, "filename": "auger.ai-0.1.7-py3-none-any.whl", "has_sig": false, "md5_digest": "c3024b045f524d227dc2b0554002bd5a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 10996, "upload_time": "2019-07-09T10:12:13", "upload_time_iso_8601": "2019-07-09T10:12:13.742784Z", "url": "https://files.pythonhosted.org/packages/99/f2/6b1e0fdcae2dd2608a90933965a6f7ebd2e8a23bbdb727a62d605c540e6a/auger.ai-0.1.7-py3-none-any.whl", "yanked": false}], "0.1.8": [{"comment_text": "", "digests": {"md5": "30a41179f84d92a62f5994e28b5450c7", "sha256": "6b925077b0a7e547701fd3ebb9f5b6d8713e10cd331a4d7773141b9b0a9f6c80"}, "downloads": -1, "filename": "auger.ai-0.1.8-py3-none-any.whl", "has_sig": false, "md5_digest": "30a41179f84d92a62f5994e28b5450c7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 10995, "upload_time": "2019-07-09T14:24:06", "upload_time_iso_8601": "2019-07-09T14:24:06.623574Z", "url": "https://files.pythonhosted.org/packages/02/34/560b68b27a03d83b253dbf3dc8f918220789b7a44b932e34928b627d9617/auger.ai-0.1.8-py3-none-any.whl", "yanked": false}], "0.1.9": [{"comment_text": "", "digests": {"md5": "81def261009e1102d777aa852f618c96", "sha256": "e9cff041f57d745139a68ed74f2d7d5c59a1803eed1c2296b735b46864a624ba"}, "downloads": -1, "filename": "auger.ai-0.1.9-py3-none-any.whl", "has_sig": false, "md5_digest": "81def261009e1102d777aa852f618c96", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 50938, "upload_time": "2019-07-09T15:58:42", "upload_time_iso_8601": "2019-07-09T15:58:42.515987Z", "url": "https://files.pythonhosted.org/packages/bb/07/3741bd9c1ee0af8a07b151b2c48df893109f14ec09bdb98856b407aa2825/auger.ai-0.1.9-py3-none-any.whl", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "e6ac5ca1d73dfe94008443ddbb841ad9", "sha256": "8fd38e76a41c50bc7e0df97713ca53eacd236d19af06c51a460ab5ec9682d5be"}, "downloads": -1, "filename": "auger.ai-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "e6ac5ca1d73dfe94008443ddbb841ad9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 43011, "upload_time": "2020-03-06T01:32:17", "upload_time_iso_8601": "2020-03-06T01:32:17.517793Z", "url": "https://files.pythonhosted.org/packages/97/46/93d7e9b26f139fe44268da9afa2b97d4b8e14fab212d946263ca78ac57a7/auger.ai-0.2.0-py3-none-any.whl", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "f71b03fafd68eef1914051007c5a6539", "sha256": "943e3b94def6204350932cab38d5e62aeb3bac37c8cd130bcba09d4067dc82f0"}, "downloads": -1, "filename": "auger.ai-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "f71b03fafd68eef1914051007c5a6539", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 44772, "upload_time": "2020-03-06T04:29:56", "upload_time_iso_8601": "2020-03-06T04:29:56.770280Z", "url": "https://files.pythonhosted.org/packages/70/31/01cc4e68a997b2a377116ca4cb231aad08c76b4ccc0228ee9c3cf9573be0/auger.ai-0.2.1-py3-none-any.whl", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "b1b3ddf37e2911da63e2b31ba52b09d2", "sha256": "f98f807463ee8848fe8a2e9969a97790773aca0df25df59e0f55a98071fda44c"}, "downloads": -1, "filename": "auger.ai-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "b1b3ddf37e2911da63e2b31ba52b09d2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 53032, "upload_time": "2020-03-11T16:29:23", "upload_time_iso_8601": "2020-03-11T16:29:23.626789Z", "url": "https://files.pythonhosted.org/packages/a1/2c/1be2180ef2ede85098fdf6a26bf65f0ed38f3aa50cd3e6a512b8b033c7e5/auger.ai-0.2.2-py3-none-any.whl", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "670c6351e1c0e2b89b282fb1388fa2e0", "sha256": "9bac9b52ac8f823b675357ef6e106e1042d8b47a41e4812f3c08e259e4584b0c"}, "downloads": -1, "filename": "auger.ai-0.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "670c6351e1c0e2b89b282fb1388fa2e0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 53034, "upload_time": "2020-03-22T21:52:54", "upload_time_iso_8601": "2020-03-22T21:52:54.006638Z", "url": "https://files.pythonhosted.org/packages/e2/45/bfc8bd72863fb734fa6667fa91355eef3a0e2fad942d36b17189686b081f/auger.ai-0.2.3-py3-none-any.whl", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "3c04687885c8c579492fddfc63b6f6e8", "sha256": "f72de6e5c00c596a5dd11c954c3e6cae8f2414a0a7efa9416ef98fb44ba476ef"}, "downloads": -1, "filename": "auger.ai-0.2.5-py3-none-any.whl", "has_sig": false, "md5_digest": "3c04687885c8c579492fddfc63b6f6e8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 53123, "upload_time": "2020-04-09T09:04:16", "upload_time_iso_8601": "2020-04-09T09:04:16.118378Z", "url": "https://files.pythonhosted.org/packages/18/7c/c5f307e9dd1389d6be53562f22b0101b69898c6e2cd09c110bd48ee1d58c/auger.ai-0.2.5-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3c04687885c8c579492fddfc63b6f6e8", "sha256": "f72de6e5c00c596a5dd11c954c3e6cae8f2414a0a7efa9416ef98fb44ba476ef"}, "downloads": -1, "filename": "auger.ai-0.2.5-py3-none-any.whl", "has_sig": false, "md5_digest": "3c04687885c8c579492fddfc63b6f6e8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 53123, "upload_time": "2020-04-09T09:04:16", "upload_time_iso_8601": "2020-04-09T09:04:16.118378Z", "url": "https://files.pythonhosted.org/packages/18/7c/c5f307e9dd1389d6be53562f22b0101b69898c6e2cd09c110bd48ee1d58c/auger.ai-0.2.5-py3-none-any.whl", "yanked": false}], "timestamp": "Thu May  7 18:16:26 2020"}