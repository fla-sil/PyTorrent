{"info": {"author": "Stephan Richter and the Zope Community", "author_email": "zope-dev@zope.org", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Framework :: Buildout", "Intended Audience :: Developers", "License :: OSI Approved :: Zope Public License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python"], "description": "A set of tools for managing multi-package software deployments with buildout.\n\n\n==========\nkeas.build\n==========\n\nManage large multi-package projects with ease\n=============================================\n\n``keas.build`` is a command line tool for quickly creating new\neggs and buildout configurations for an application that has multiple\ninterdependant packages.  As an example, consider a web application\nthat helps you manage your twitter followers, called Twollo (short\nfor twitter followers), you may have several different python packages\nwhich handle different aspects of your application:\n\n- ``twollo.integration`` - a package for managing integration with\n  twitter\n\n- ``twollo.web`` - a web front end for the ``twollo.integration``\n  package\n\n- ``twollo.rest`` - a rest API for working with\n  ``twollo.integration``\n\n- ``twollo.utils`` - a package filled with random utilities and\n  stuff.\n\nUsing ``keas.build`` you will be able to manage the lifecycle of these\npython packages and any number of deployment configurations\ncoherently.  Specifically, ``keas.build`` will:\n\n- Allow you to define a Project, which is a collection of\n  interdependent eggs that generally get released together.\n\n- Automatically create new egg releases of each package when necessary.\n\n- Upload new eggs to a private egg repository.\n\n- Generate versioned buildout configuration files that combine the\n  eggs properly.\n\n- Upload the buildout configuration files to a private configuration server.\n\n- Upload dependent buildout configuration files to a private configuration\n  server (by checking the extends= chain)\n\nInstallation\n============\n\nInstalling a released version of keas.build\n-------------------------------------------\n\nYou can use ``easy_install`` to get the latest release::\n\n  $ easy_install keas.build\n\nInstalling a developer version of keas.build\n--------------------------------------------\n\nCheckout the code::\n\n  $ svn checkout svn://svn.zope.org/repos/main/keas.build/trunk keas.build\n  $ cd keas.build\n\nRun the bootstrap script and buildout::\n\n  $ python bootstrap.py\n  $ ./bin/buildout\n\nRunning the ``build-package`` script\n------------------------------------\n\nOnce installation is complete, you should be able to run the\n``build-package`` script. (Found in *./bin/build-package* with developer\ninstallations)::\n\n  $ build-package\n  Usage: build-package [options]\n\n  Options:\n    -h, --help            show this help message and exit\n    -c FILE, --config-file=FILE\n                          The file containing the configuration of the project.\n    -q, --quiet           When specified, no messages are displayed.\n    -v, --verbose         When specified, debug information is created.\n    -d, --use-defaults    When specified, no user input is required and the defaults are used.\n    -o, --offline-mode    When set, no server commands are executed.\n    -n, --next-version    When set, the system guesses the next version to generate.\n    -b BRANCH, --use-branch=BRANCH\n                          When specified, this branch will be always used.\n    -i BRANCHES --independent-branches=BRANCH1 BRANCH2,\n                          When specified, the system guesses the next version from all this branches.\n    --no-upload           When set, the generated configuration files are not uploaded.\n    --no-branch-update    When set, the branch is not updated with a new version after a release is created.\n\nGetting Started\n===============\n\nAssumptions\n-----------\n\nFirst we need to start with some assumptions that keas.build has about\nthe way packages are laid out. When developing multiple packages in\ntandem, it often makes sense to have your subversion repository laid\nout like so::\n\n  SVNROOT/packages/\n      branches/\n          Twollo-0.x/\n              ...\n          Twollo-1.x/\n              twollo.integration/\n              twollo.rest/\n              twollo.utils/\n              twollo.web/\n      tags/\n          twollo.integration-1.2/\n          twollo.integration-1.3/\n          twollo.web-1.7/\n          twollo.web-1.8/\n          twollo.web-1.9/\n          ...\n      trunk/\n          twollo.integration/\n          twollo.rest/\n          twollo.utils/\n          twollo.web/\n\nThe important thing to note is that each package does *not* have its\nown branches/ tags/ trunk/ directories, but rather there is just one\nset of the entire \"project.\"\n\nDefining a Project configuration file\n--------------------------------------\n\nBefore you can really do anything with the ``build-package`` script,\nyou have to define a configuration file. Project configuration files\nuse the INI [#ini]_ file format.  Every project configuration file\nmust have a ``[build]`` section.  The project configuration file for\nthe Twollo would look something like this::\n\n\n  # Twollo.cfg\n\n  [build]\n  name = Twollo  #this has nothing to do with the twollo package namespace\n  version = +\n  template = Twollo-Release-Template.cfg\n  package-index = https://build.twollo.com/eggs/\n  package-index-username = someuser\n  package-index-password = somepass\n  buildout-server = https://build.twollo.com/buildouts/\n  buildout-server-username = someuser\n  buildout-server-password = somepass\n  svn-repos = https://svn.twollo.com/svn/packages/\n  svn-repos-username = somesvnuser\n  svn-repos-password = somepass\n  packages = twollo.integration\n             twollo.web\n             twollo.rest\n             twollo.utils\n\nLet's go over each of the settings in the ``build`` section of\n*Twollo.cfg*.\n\n- **name** - This is the name of the project. It can be anything you\n  want and has nothing to do with the packages that make up the\n  project.  The name will be part of the generation buildout\n  configuration files.\n\n- **version** - This is the version to use when making a new release\n  of the Project.  The version number becomes part of the filename for\n  the generated buildout configuration files.\n\n  - Using **+** as the version will simply increment the version\n    number of the project from the versions that have already been\n    released.\n\n- **template** - This is a base buildout configuration file to use for\n  all deployments.  When a new Project release is created, the\n  ``[versions]`` section will automatically be updated with the\n  correct versions of each of the ``twollow.*`` packages.  More on\n  this later.\n\n- **tag-layout** - Choose from ``flat`` or ``subfolder``\n\n  - **flat** Tags will be created in svn as /tags/package-version\n    This is the default setting.\n\n  - **subfolder** Tags will be created in svn as /tags/package/version\n\n- **upload-type** - Choose from ``internal`` or ``setup.py``\n\n  - **internal** Upload packages to a WebDAV enabled web server using the\n    below credetials. This is the default setting.\n    (actually does a ``python setup.py sdist`` and uploads the result)\n\n  - **setup.py** Executes ``python setup.py sdist register upload``,\n    does nothing else as this command should take care of the upload.\n\n- **package-index** - The url to a WebDAV [#webdav]_ enabled web\n  server where generated eggs for each of the ``twollow.*`` packages\n  should be uploaded. Used for upload only if ``upload-type`` is ``internal``.\n  Also used to check/get existing versions of packages.\n\n- **package-index-username** - The username for accessing the WebDAV\n  server\n\n- **package-index-password** - The password for accessing the WebDAV\n  server\n\n- **buildout-upload-type** - Choose from ``webdav``, ``local`` or ``mypypi``\n\n  - **webdav** Upload generated buildout files to the url specified by\n    ``buildout-server`` with the WebDAV protocol.\n\n  - **local** Just generate buildout files, don't upload them.\n    If ``buildout-server`` is given buildout files will be copied to that\n    folder.\n\n  - **mypypi** Upload generated buildout files to the url specified by\n    ``buildout-server``. The url should point to the mypypi upload page.\n    (Something like http://yourhost/++projects++/)\n\n- **buildout-server** - The url to a WebDAV enabled web\n  server where generated buildout files should be uploaded.\n  If ``buildout-upload-type`` is ``local`` this is a path on the local\n  filesystem. Buildout files wil be copied to this folder.\n  If not given, the process stops after releasing the packages.\n\n- **buildout-server-username** - The username for accessing the WebDAV\n  server\n\n- **buildout-server-password** - The password for accessing the WebDAV\n  server\n\n- **svn-repos** - The url for the subversion repository where all the\n  source code lives, including release tags.\n\n- **svn-repos-username** - The username for the url repository.\n  Use the command line option ``--force-svnauth`` to force all svn operations\n  to use this credential.\n  Otherwise cached authentication will be used.\n\n- **svn-repos-password** - The password for the url repository.\n\n- **hash-config-files** - Add hashes based on file content to dependent config\n  filenames.\n\n- **packages** - a list of packages that are part of the project.\n  These are the packages that live in the svn repository and that\n  should be released in conjunction with each other.\n\nDefining a Release Template\n---------------------------\n\nAs we saw in the previous section, *Twollo.cfg* refers to a file\ncalled *Twollo-Release-Template.cfg*.  This is just a base buildout\nconfiguration.  Additional to this, we can also define different configuration\ndata as define in stage and production section. Such sections can get used in\na product deployment as additional (shared) variables.  For the Twollo project,\nit might look like this::\n\n  # Twollo-Release-Template.cfg\n\n  [buildout]\n  extends = http://download.zope.org/zope3.4/3.4.0/versions.cfg\n  parts = test\n  find-links = https://build.twollo.com/eggs/\n\n  [test]\n  recipe = zc.recipe.testrunner\n  eggs = twollo.web\n         twollo.integration\n         twollo.utils\n         twollo.rest\n\n  [twollo-app]\n  recipe = zc.zope3recipes:app\n  servers = zserver\n  site.zcml = <include package=\"twollo.web\" file=\"app.zcml\" />\n  eggs = twollo.web\n\n  [zope3]\n  location =\n\n  [stage]\n  memcached = 127.0.0.1:11211\n\n  [production]\n  memcached = 10.0.0.1:11211\n\n\nWhen a new release of the Twollo project is made, a ``[versions]``\nsection will be added to this configuration file with all the\ncorrect ``twollow.*`` versions pinned down.\n\nDefining Multiple Deployment Configurations\n-------------------------------------------\n\nEach time you release a Project, you may want to generate different\nbuildout configuration files for all the different deployment\nenvironments you might have.  For example, you may have three\ndifferent environments: Development, QA, and Production. These are\ncalled variants.  Each environment may need to have the application\nrun on different ports, at different log levels, or have other small\ndifferences.\n\nWe can easily generate additional configuration variants by adding\naddtional sections to the *Twollo.cfg* file::\n\n  # Twollo.cfg\n\n  [Development]\n  template = Twollo-Instance-Template.cfg\n  vars = stage\n  port = 9080\n  logdir = /opt/twollo/dev/logs\n  install-dir = /opt/twollo/dev\n  loglevel = debug\n  cache-size = 1000\n\n  [QA]\n  template = Twollo-Instance-Template.cfg\n  vars = stage\n  port = 9082\n  logdir = /opt/twollo/qa/logs\n  install-dir = /opt/twollo/qa\n  loglevel = info\n  cache-size = 1000\n\n  [Production]\n  template = Twollo-Instance-Template.cfg\n  vars = production\n  port = 8080\n  logdir = /var/log/twollo\n  install-dir = /opt/twollo/\n  loglevel = warn\n  cache-size = 200000\n\nWe can then have a single *Twollo-Instance-Template.cfg* file that\nuses python's built in string templating to access the variables we\nset in *Twollo.cfg*.  For the Twollo project, it might look like this::\n\n  # Twollo-Instance-Template.cfg\n\n  [buildout]\n  parts += twollo\n  directory = %(install-dir)s\n\n  [database]\n  recipe = zc.recipe.filestorage\n\n  [twollo]\n  recipe = zc.zope3recipes:instance\n  application = twollo-app\n  zope.conf =\n\n    <product-config memcached>\n      memcached %(memcached)s\n    </product-config>\n\n    <zodb>\n      cache-size %(cache-size)s\n      <filestorage>\n        path ${database:path}\n      </filestorage>\n    </zodb>\n\n    <server>\n      type WSGI-HTTP\n      address %(port)s\n    </server>\n\n    <eventlog>\n      level %(loglevel)s\n      <logfile>\n        formatter zope.exceptions.log.Formatter\n        path %(logdir)s/twollo.log\n      </logfile>\n    </eventlog>\n\n    <accesslog>\n      <logfile>\n        level info\n        path %(logdir)s/twollo-access.log\n      </logfile>\n    </accesslog>\n\nAs you can see, the Twollo.cfg uses additional vars (stage, production) which\nmakes it very simple to define a lagrge amount of shared attributes in a\nrelease template and use them in the instance template. Note, a side effect\nfrom the python config parser is, that you will inherit arguments define in a\nduplicated section define in an template loaded via (buildout) extends.\n\n\nReleasing a Project\n-------------------\n\nOnce you have created all the necessary configuration files, you can\nmake your first project release.  This is where the ``build-package``\nscript comes in to play.  The first time you run the ``build-package``\nscript, the only option you need to pass in will be the configuration\nfile.\n\nThe ``build-package`` script will prompt you for version information\nabout each of the packages it will be releasing as part of the\nTwollo.cfg project.  Your first interaction with the script might look\nlike this::\n\n  $ build-package -c Twollo.cfg --quiet\n  Version for `twollo.integration` : 1.0.0\n  The release twollo.integration-1.0.0 does not exist.\n  Do you want to create it? yes/no [yes]: yes\n  Version for `twollo.rest` : 1.0.0\n  The release twollo.rest-1.0.0 does not exist.\n  Do you want to create it? yes/no [yes]: yes\n  Version for `twollo.utils` : 1.0.0\n  The release twollo.utils-1.0.0 does not exist.\n  Do you want to create it? yes/no [yes]: yes\n  Version for `twollo.web` : 1.0.0\n  The release twollo.web-1.0.0 does not exist.\n  Do you want to create it? yes/no [yes]: yes\n\nThe next time you make a release, you can set the ``-n`` flag for\n``build-package`` to automatically guess the next version that should\nbe released.  It does this by first looking for all the release tags\nof a given package and finding the last changed revision for the trunk\nof a given package.  If any code for the given package was changed\nsince the last time it was released, it will bump the most minor\nversion number automatically.  If no change has occured, it will\nchoose the latest existing release.\n\nYou can also use the ``-d`` flag to make ``build-package`` not prompt\nyou before creating a new release.\n\nIf you need to make a new release from a particular branch, you can\nuse the ``-b`` option.  For example, if bug fixes have been made to the\nTwollo-1.x branch, we can create a new release using code from this\nbranch like this::\n\n  $ build-package -c Twollo.cfg -nb Twollo-1.x\n\nWhen the new package versions are calculated, they will be versioned\nalong the 1.x line, even if you have since created 2.x releases, by\nanalyzing the name of the branch.\n\nCaveat when using ``-n`` and ``-d`` on a branch with a branchname ending\nwith the version number is that you'll need to have the package versions\nmatching the branch version.\nE.g. having a branch: ``branches/twollo-1.9`` will suppose packages like\n``twollow.web-1.9.x`` and ``twollow.utils-1.9.x`` and so on.\nYou should be aware of this also when releasing packages from the trunk.\nMost probably you'll drive development on the trunk and branch out for a\nstable. In this case package versions on the branch should be kept inline.\n\nInstalling a Released Project\n-----------------------------\n\n``keas.build`` also comes with a very simple installation script that\ncan be used to quickly install any variant of the released project::\n\n  $ install --help\n  Usage: install [options]\n\n  Options:\n    -h, --help            show this help message and exit\n    -u URL, --url=URL     The base URL at which the releases can be found.\n    -p PROJECT, --project=PROJECT\n                          The name of the project to be installed.\n    -V VARIANT, --variant=VARIANT\n                          The variant of the project to be installed.\n    -v VERSION, --version=VERSION\n                          The version of the project to be installed.\n    -l, --latest          When specified, the latest version will be chosen.\n    --username=USER       The username needed to access the site.\n    --password=PASSWORD   The password needed to access the site.\n    -b PATH, --buildout-path=PATH\n                          The path to the buildout executable.\n    --quiet               When specified, no messages are displayed.\n    --verbose             When specified, debug information is created.\n\nFor example, to install the latest QA version of the ``Twollo`` project,\nyou would run:\n\n  $ install -u https://build.twollo.com/buildouts/ -p Twollo -V QA --latest\n\nCreating Helper Scripts\n-----------------------\n\nSometimes it can be a pain to remember what all the command line\noptions are that you need to pass for building your project.\nFortunately, it is really easy to create helper scripts that just set\nsome defaults for you.\n\nFor example, to create a build-twollo script, you would add the\nfollowing to a buildout configuration file::\n\n  [build-twollo]\n  recipe = zc.recipe.egg\n  eggs = keas.build\n  scripts = build=build-twollo\n  initialization =\n      sys.argv[1:1] = ['-c', 'Twollo.cfg']\n\nAs another example, you could create an install-twollo-dev script that\nautomatically installs the latest development release::\n\n  [install-twollo-dev]\n  recipe = zc.recipe.egg\n  eggs = keas.build\n  scripts = install=install-twollo-dev\n  initialization =\n      sys.argv[1:1] = ['-u', 'http://build.twollo.com/buildouts/',\n                       ' --username', 'someuser', '--password', 'somepass',\n                       '-p', 'Twollo', '-V', 'Development', '--latest']\n\nThe possibilities are endless!\n\nFootnotes\n=========\n\n.. [#ini] See http://en.wikipedia.org/wiki/INI_file\n.. [#webdav] See http://en.wikipedia.org/wiki/WebDAV\n\n\nCHANGES\n=======\n\n0.4.1 (2013-11-28)\n------------------\n\n- bugfix: prevent generating bad buildout option key/value seperators. Generate\n  `+=` instead of `+ =` used for e.g. buildout parts options. Otherwise it\n  fails since buildout 2.0\n\n\n0.4.0 (2013-11-24)\n------------------\n\n- feature: implemented a new argument `vars` in deployment template section. The\n  new `vars` argument can get used for define a release template section. If \n  defined, the build process will apply all arguments from this section as they\n  would be a a part of the project section. This allows to inherit a large\n  amount of arguments in a project definition instead of define them in\n  each project. This is usefull if you have a stage and many production variants\n  and the instance uses config data like a database setup and you need to\n  share them. For such a usecase you can simply define a stage and production\n  section and define all shared arguments and use the right `vars` section in\n  your product deployment setup. See the memcached sample in index.txt\n\n  Note, this new product deployment template `vars` argument could be a problem\n  for your existing setup if you use a vars argument with a value similar then\n  a section name defined in your section template.\n\n\n0.3.1 (2013-09-25)\n------------------\n\n- Improvement: added `default-package-version` command line option\n  to avoid interactive questions on new packages\n\n\n0.3.0 (2012-12-27)\n------------------\n\n- feature: added -i --independent-branches option. This option will force\n  to check if the last release was made from the same branch we are\n  releasing from. This is required if you develop a new software generation\n  in a branch which is independent from the trunk. Previous version of\n  keas.build where only able to handle branch releases as bug fix releases\n  and didn't make sure that we don't mix trunk and branch releases. Now with\n  the -i option we force that all released packages will be made or reused\n  based on the current trunk or branch (-b trunk,branch)\n\n- added more logging infos for find or skip next version which makes is simpler\n  to see what's going on\n\n\n0.2.2 (2011-08-29)\n------------------\n\n- Improvement: add `current-datetime`, `current-date`, `current-time` variables\n\n\n0.2.1 (2011-04-07)\n------------------\n\n- Fix RawConfigParser usage, it destroys options values by making them\n  all lowercase.\n\n\n0.2.0 (2011-04-06)\n------------------\n\n- Bump versions to ZTK 1.1\n\n- Improvement: add SVN repo infos to the project config file.\n  Yah, I know this can be checked anytime, but adding this saves a lot of time.\n\n- Improvement: add option ``hash-config-files``\n\n\n0.1.8 (2010-05-11)\n------------------\n\n- Fix: Do NOT ``register`` with ``python setup.py``\n\n- Fix: bump setuptools and zc.buildout versions\n\n- Fix: 0.1.7 tar.gz was broken\n\n0.1.7 (2010-04-26)\n------------------\n\n- BUGFIX: the dependent config file gathering killed the version pins\n  in the master config file\n\n- Improvement: PYPI-like simple index support when checking package versions\n\n- Improvement: Check dependent configs, upload all to the server.\n\n- Improvement: Add ``--force-version`` option.\n\n- Improvement: Add version to svn log comment. That makes life easier (at least\n  with TortoiseSVN)\n\n- Improvement: Add ``--force-svnauth`` option.\n\n- Improvement: Add ``--directory`` option to ``install``.\n\n0.1.6 (2009-11-2)\n------------------\n\n- Improvement: When determining released versions of a branch, support\n  branch names ending with .x, as in MyProject-0.3.x\n\n0.1.5 (2009-10-16)\n------------------\n\n- Improvement: add username and password on install to the URL that buildout\n  gets for the .cfg file\n  Let's hope that buildout does not leave that password around.\n\n- Improvement(?) or fix: remove twisted dependency that was used in deploy\n  for SSH\n\n- Improvement: removed dependency on lxml.  Now we just use pythons\n  built-in xml library.\n\n- Improvement: added ``buildout-upload-type`` option.\n  See doc for further info\n\n- Bug Fix: multiline template option values crashed on parsing\n\n- Bug Fix: re did not like non-text parameters coming from BeautifulSoup\n\n- Improvement: added the ``--timeout`` option to install\n\n- Improvement: added mypypi buildout file upload support\n\n- Bug Fix: revert to checkout of the complete source tree\n\n0.1.4 (2009-10-01)\n------------------\n\n- Bug Fix: installer script would crash when -u option was missing a\n  trailing /\n\n- Bug Fix: installer script would crash when no variants were found.\n\n- Improvement: Building a package will no longer checkout the entire\n  branch just to update the setup.py file with the new version\n  number.  Instead only the top level directory is checked out.\n\n- Bug Fix: project build script would crash when variant\n  configuration was missing information required by its template. Now\n  a helpful error message is printed and no files will be uploaded\n  until all have been created successfully.\n\n- Bug Fix: Typing Ctrl+c on the command line no longer causes a\n  KeyboardInterrupt traceback to be spit out.\n\n- Bug Fix: when running the installer, if the buildout command prompts\n  the user for input, the installer will no longer eat up the prompt.\n\n0.1.3 (2009-09-30)\n------------------\n\n- Initial public release.\n\n0.1.1 (internal)\n----------------\n\n- Bug Fix: If a project variant is specified for which no release have\n  been made, the build script now exits nicely with a human readable\n  error message.\n\n0.1.0 (internal)\n----------------\n\n- Initial release.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pypi.python.org/pypi/keas.build", "keywords": "zope3 release build", "license": "ZPL 2.1", "maintainer": null, "maintainer_email": null, "name": "keas.build", "package_url": "https://pypi.org/project/keas.build/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/keas.build/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://pypi.python.org/pypi/keas.build"}, "release_url": "https://pypi.org/project/keas.build/0.4.1/", "requires_dist": null, "requires_python": null, "summary": "A Build System", "version": "0.4.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A set of tools for managing multi-package software deployments with buildout.</p>\n<div id=\"keas-build\">\n<h2>keas.build</h2>\n<div id=\"manage-large-multi-package-projects-with-ease\">\n<h3>Manage large multi-package projects with ease</h3>\n<p><tt>keas.build</tt> is a command line tool for quickly creating new\neggs and buildout configurations for an application that has multiple\ninterdependant packages.  As an example, consider a web application\nthat helps you manage your twitter followers, called Twollo (short\nfor twitter followers), you may have several different python packages\nwhich handle different aspects of your application:</p>\n<ul>\n<li><tt>twollo.integration</tt> - a package for managing integration with\ntwitter</li>\n<li><tt>twollo.web</tt> - a web front end for the <tt>twollo.integration</tt>\npackage</li>\n<li><tt>twollo.rest</tt> - a rest API for working with\n<tt>twollo.integration</tt></li>\n<li><tt>twollo.utils</tt> - a package filled with random utilities and\nstuff.</li>\n</ul>\n<p>Using <tt>keas.build</tt> you will be able to manage the lifecycle of these\npython packages and any number of deployment configurations\ncoherently.  Specifically, <tt>keas.build</tt> will:</p>\n<ul>\n<li>Allow you to define a Project, which is a collection of\ninterdependent eggs that generally get released together.</li>\n<li>Automatically create new egg releases of each package when necessary.</li>\n<li>Upload new eggs to a private egg repository.</li>\n<li>Generate versioned buildout configuration files that combine the\neggs properly.</li>\n<li>Upload the buildout configuration files to a private configuration server.</li>\n<li>Upload dependent buildout configuration files to a private configuration\nserver (by checking the extends= chain)</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h3>Installation</h3>\n<div id=\"installing-a-released-version-of-keas-build\">\n<h4>Installing a released version of keas.build</h4>\n<p>You can use <tt>easy_install</tt> to get the latest release:</p>\n<pre>$ easy_install keas.build\n</pre>\n</div>\n<div id=\"installing-a-developer-version-of-keas-build\">\n<h4>Installing a developer version of keas.build</h4>\n<p>Checkout the code:</p>\n<pre>$ svn checkout svn://svn.zope.org/repos/main/keas.build/trunk keas.build\n$ cd keas.build\n</pre>\n<p>Run the bootstrap script and buildout:</p>\n<pre>$ python bootstrap.py\n$ ./bin/buildout\n</pre>\n</div>\n<div id=\"running-the-build-package-script\">\n<h4>Running the <tt><span class=\"pre\">build-package</span></tt> script</h4>\n<p>Once installation is complete, you should be able to run the\n<tt><span class=\"pre\">build-package</span></tt> script. (Found in <em>./bin/build-package</em> with developer\ninstallations):</p>\n<pre>$ build-package\nUsage: build-package [options]\n\nOptions:\n  -h, --help            show this help message and exit\n  -c FILE, --config-file=FILE\n                        The file containing the configuration of the project.\n  -q, --quiet           When specified, no messages are displayed.\n  -v, --verbose         When specified, debug information is created.\n  -d, --use-defaults    When specified, no user input is required and the defaults are used.\n  -o, --offline-mode    When set, no server commands are executed.\n  -n, --next-version    When set, the system guesses the next version to generate.\n  -b BRANCH, --use-branch=BRANCH\n                        When specified, this branch will be always used.\n  -i BRANCHES --independent-branches=BRANCH1 BRANCH2,\n                        When specified, the system guesses the next version from all this branches.\n  --no-upload           When set, the generated configuration files are not uploaded.\n  --no-branch-update    When set, the branch is not updated with a new version after a release is created.\n</pre>\n</div>\n</div>\n<div id=\"getting-started\">\n<h3>Getting Started</h3>\n<div id=\"assumptions\">\n<h4>Assumptions</h4>\n<p>First we need to start with some assumptions that keas.build has about\nthe way packages are laid out. When developing multiple packages in\ntandem, it often makes sense to have your subversion repository laid\nout like so:</p>\n<pre>SVNROOT/packages/\n    branches/\n        Twollo-0.x/\n            ...\n        Twollo-1.x/\n            twollo.integration/\n            twollo.rest/\n            twollo.utils/\n            twollo.web/\n    tags/\n        twollo.integration-1.2/\n        twollo.integration-1.3/\n        twollo.web-1.7/\n        twollo.web-1.8/\n        twollo.web-1.9/\n        ...\n    trunk/\n        twollo.integration/\n        twollo.rest/\n        twollo.utils/\n        twollo.web/\n</pre>\n<p>The important thing to note is that each package does <em>not</em> have its\nown branches/ tags/ trunk/ directories, but rather there is just one\nset of the entire \u201cproject.\u201d</p>\n</div>\n<div id=\"defining-a-project-configuration-file\">\n<h4>Defining a Project configuration file</h4>\n<p>Before you can really do anything with the <tt><span class=\"pre\">build-package</span></tt> script,\nyou have to define a configuration file. Project configuration files\nuse the INI <a href=\"#ini\" id=\"id1\" rel=\"nofollow\">[1]</a> file format.  Every project configuration file\nmust have a <tt>[build]</tt> section.  The project configuration file for\nthe Twollo would look something like this:</p>\n<pre># Twollo.cfg\n\n[build]\nname = Twollo  #this has nothing to do with the twollo package namespace\nversion = +\ntemplate = Twollo-Release-Template.cfg\npackage-index = https://build.twollo.com/eggs/\npackage-index-username = someuser\npackage-index-password = somepass\nbuildout-server = https://build.twollo.com/buildouts/\nbuildout-server-username = someuser\nbuildout-server-password = somepass\nsvn-repos = https://svn.twollo.com/svn/packages/\nsvn-repos-username = somesvnuser\nsvn-repos-password = somepass\npackages = twollo.integration\n           twollo.web\n           twollo.rest\n           twollo.utils\n</pre>\n<p>Let\u2019s go over each of the settings in the <tt>build</tt> section of\n<em>Twollo.cfg</em>.</p>\n<ul>\n<li><strong>name</strong> - This is the name of the project. It can be anything you\nwant and has nothing to do with the packages that make up the\nproject.  The name will be part of the generation buildout\nconfiguration files.</li>\n<li><strong>version</strong> - This is the version to use when making a new release\nof the Project.  The version number becomes part of the filename for\nthe generated buildout configuration files.<ul>\n<li>Using <strong>+</strong> as the version will simply increment the version\nnumber of the project from the versions that have already been\nreleased.</li>\n</ul>\n</li>\n<li><strong>template</strong> - This is a base buildout configuration file to use for\nall deployments.  When a new Project release is created, the\n<tt>[versions]</tt> section will automatically be updated with the\ncorrect versions of each of the <tt>twollow.*</tt> packages.  More on\nthis later.</li>\n<li><strong>tag-layout</strong> - Choose from <tt>flat</tt> or <tt>subfolder</tt><ul>\n<li><strong>flat</strong> Tags will be created in svn as /tags/package-version\nThis is the default setting.</li>\n<li><strong>subfolder</strong> Tags will be created in svn as /tags/package/version</li>\n</ul>\n</li>\n<li><strong>upload-type</strong> - Choose from <tt>internal</tt> or <tt>setup.py</tt><ul>\n<li><strong>internal</strong> Upload packages to a WebDAV enabled web server using the\nbelow credetials. This is the default setting.\n(actually does a <tt>python setup.py sdist</tt> and uploads the result)</li>\n<li><strong>setup.py</strong> Executes <tt>python setup.py sdist register upload</tt>,\ndoes nothing else as this command should take care of the upload.</li>\n</ul>\n</li>\n<li><strong>package-index</strong> - The url to a WebDAV <a href=\"#webdav\" id=\"id2\" rel=\"nofollow\">[2]</a> enabled web\nserver where generated eggs for each of the <tt>twollow.*</tt> packages\nshould be uploaded. Used for upload only if <tt><span class=\"pre\">upload-type</span></tt> is <tt>internal</tt>.\nAlso used to check/get existing versions of packages.</li>\n<li><strong>package-index-username</strong> - The username for accessing the WebDAV\nserver</li>\n<li><strong>package-index-password</strong> - The password for accessing the WebDAV\nserver</li>\n<li><strong>buildout-upload-type</strong> - Choose from <tt>webdav</tt>, <tt>local</tt> or <tt>mypypi</tt><ul>\n<li><strong>webdav</strong> Upload generated buildout files to the url specified by\n<tt><span class=\"pre\">buildout-server</span></tt> with the WebDAV protocol.</li>\n<li><strong>local</strong> Just generate buildout files, don\u2019t upload them.\nIf <tt><span class=\"pre\">buildout-server</span></tt> is given buildout files will be copied to that\nfolder.</li>\n<li><strong>mypypi</strong> Upload generated buildout files to the url specified by\n<tt><span class=\"pre\">buildout-server</span></tt>. The url should point to the mypypi upload page.\n(Something like <a href=\"http://yourhost/++projects++/\" rel=\"nofollow\">http://yourhost/++projects++/</a>)</li>\n</ul>\n</li>\n<li><strong>buildout-server</strong> - The url to a WebDAV enabled web\nserver where generated buildout files should be uploaded.\nIf <tt><span class=\"pre\">buildout-upload-type</span></tt> is <tt>local</tt> this is a path on the local\nfilesystem. Buildout files wil be copied to this folder.\nIf not given, the process stops after releasing the packages.</li>\n<li><strong>buildout-server-username</strong> - The username for accessing the WebDAV\nserver</li>\n<li><strong>buildout-server-password</strong> - The password for accessing the WebDAV\nserver</li>\n<li><strong>svn-repos</strong> - The url for the subversion repository where all the\nsource code lives, including release tags.</li>\n<li><strong>svn-repos-username</strong> - The username for the url repository.\nUse the command line option <tt><span class=\"pre\">--force-svnauth</span></tt> to force all svn operations\nto use this credential.\nOtherwise cached authentication will be used.</li>\n<li><strong>svn-repos-password</strong> - The password for the url repository.</li>\n<li><strong>hash-config-files</strong> - Add hashes based on file content to dependent config\nfilenames.</li>\n<li><strong>packages</strong> - a list of packages that are part of the project.\nThese are the packages that live in the svn repository and that\nshould be released in conjunction with each other.</li>\n</ul>\n</div>\n<div id=\"defining-a-release-template\">\n<h4>Defining a Release Template</h4>\n<p>As we saw in the previous section, <em>Twollo.cfg</em> refers to a file\ncalled <em>Twollo-Release-Template.cfg</em>.  This is just a base buildout\nconfiguration.  Additional to this, we can also define different configuration\ndata as define in stage and production section. Such sections can get used in\na product deployment as additional (shared) variables.  For the Twollo project,\nit might look like this:</p>\n<pre># Twollo-Release-Template.cfg\n\n[buildout]\nextends = http://download.zope.org/zope3.4/3.4.0/versions.cfg\nparts = test\nfind-links = https://build.twollo.com/eggs/\n\n[test]\nrecipe = zc.recipe.testrunner\neggs = twollo.web\n       twollo.integration\n       twollo.utils\n       twollo.rest\n\n[twollo-app]\nrecipe = zc.zope3recipes:app\nservers = zserver\nsite.zcml = &lt;include package=\"twollo.web\" file=\"app.zcml\" /&gt;\neggs = twollo.web\n\n[zope3]\nlocation =\n\n[stage]\nmemcached = 127.0.0.1:11211\n\n[production]\nmemcached = 10.0.0.1:11211\n</pre>\n<p>When a new release of the Twollo project is made, a <tt>[versions]</tt>\nsection will be added to this configuration file with all the\ncorrect <tt>twollow.*</tt> versions pinned down.</p>\n</div>\n<div id=\"defining-multiple-deployment-configurations\">\n<h4>Defining Multiple Deployment Configurations</h4>\n<p>Each time you release a Project, you may want to generate different\nbuildout configuration files for all the different deployment\nenvironments you might have.  For example, you may have three\ndifferent environments: Development, QA, and Production. These are\ncalled variants.  Each environment may need to have the application\nrun on different ports, at different log levels, or have other small\ndifferences.</p>\n<p>We can easily generate additional configuration variants by adding\naddtional sections to the <em>Twollo.cfg</em> file:</p>\n<pre># Twollo.cfg\n\n[Development]\ntemplate = Twollo-Instance-Template.cfg\nvars = stage\nport = 9080\nlogdir = /opt/twollo/dev/logs\ninstall-dir = /opt/twollo/dev\nloglevel = debug\ncache-size = 1000\n\n[QA]\ntemplate = Twollo-Instance-Template.cfg\nvars = stage\nport = 9082\nlogdir = /opt/twollo/qa/logs\ninstall-dir = /opt/twollo/qa\nloglevel = info\ncache-size = 1000\n\n[Production]\ntemplate = Twollo-Instance-Template.cfg\nvars = production\nport = 8080\nlogdir = /var/log/twollo\ninstall-dir = /opt/twollo/\nloglevel = warn\ncache-size = 200000\n</pre>\n<p>We can then have a single <em>Twollo-Instance-Template.cfg</em> file that\nuses python\u2019s built in string templating to access the variables we\nset in <em>Twollo.cfg</em>.  For the Twollo project, it might look like this:</p>\n<pre># Twollo-Instance-Template.cfg\n\n[buildout]\nparts += twollo\ndirectory = %(install-dir)s\n\n[database]\nrecipe = zc.recipe.filestorage\n\n[twollo]\nrecipe = zc.zope3recipes:instance\napplication = twollo-app\nzope.conf =\n\n  &lt;product-config memcached&gt;\n    memcached %(memcached)s\n  &lt;/product-config&gt;\n\n  &lt;zodb&gt;\n    cache-size %(cache-size)s\n    &lt;filestorage&gt;\n      path ${database:path}\n    &lt;/filestorage&gt;\n  &lt;/zodb&gt;\n\n  &lt;server&gt;\n    type WSGI-HTTP\n    address %(port)s\n  &lt;/server&gt;\n\n  &lt;eventlog&gt;\n    level %(loglevel)s\n    &lt;logfile&gt;\n      formatter zope.exceptions.log.Formatter\n      path %(logdir)s/twollo.log\n    &lt;/logfile&gt;\n  &lt;/eventlog&gt;\n\n  &lt;accesslog&gt;\n    &lt;logfile&gt;\n      level info\n      path %(logdir)s/twollo-access.log\n    &lt;/logfile&gt;\n  &lt;/accesslog&gt;\n</pre>\n<p>As you can see, the Twollo.cfg uses additional vars (stage, production) which\nmakes it very simple to define a lagrge amount of shared attributes in a\nrelease template and use them in the instance template. Note, a side effect\nfrom the python config parser is, that you will inherit arguments define in a\nduplicated section define in an template loaded via (buildout) extends.</p>\n</div>\n<div id=\"releasing-a-project\">\n<h4>Releasing a Project</h4>\n<p>Once you have created all the necessary configuration files, you can\nmake your first project release.  This is where the <tt><span class=\"pre\">build-package</span></tt>\nscript comes in to play.  The first time you run the <tt><span class=\"pre\">build-package</span></tt>\nscript, the only option you need to pass in will be the configuration\nfile.</p>\n<p>The <tt><span class=\"pre\">build-package</span></tt> script will prompt you for version information\nabout each of the packages it will be releasing as part of the\nTwollo.cfg project.  Your first interaction with the script might look\nlike this:</p>\n<pre>$ build-package -c Twollo.cfg --quiet\nVersion for `twollo.integration` : 1.0.0\nThe release twollo.integration-1.0.0 does not exist.\nDo you want to create it? yes/no [yes]: yes\nVersion for `twollo.rest` : 1.0.0\nThe release twollo.rest-1.0.0 does not exist.\nDo you want to create it? yes/no [yes]: yes\nVersion for `twollo.utils` : 1.0.0\nThe release twollo.utils-1.0.0 does not exist.\nDo you want to create it? yes/no [yes]: yes\nVersion for `twollo.web` : 1.0.0\nThe release twollo.web-1.0.0 does not exist.\nDo you want to create it? yes/no [yes]: yes\n</pre>\n<p>The next time you make a release, you can set the <tt><span class=\"pre\">-n</span></tt> flag for\n<tt><span class=\"pre\">build-package</span></tt> to automatically guess the next version that should\nbe released.  It does this by first looking for all the release tags\nof a given package and finding the last changed revision for the trunk\nof a given package.  If any code for the given package was changed\nsince the last time it was released, it will bump the most minor\nversion number automatically.  If no change has occured, it will\nchoose the latest existing release.</p>\n<p>You can also use the <tt><span class=\"pre\">-d</span></tt> flag to make <tt><span class=\"pre\">build-package</span></tt> not prompt\nyou before creating a new release.</p>\n<p>If you need to make a new release from a particular branch, you can\nuse the <tt><span class=\"pre\">-b</span></tt> option.  For example, if bug fixes have been made to the\nTwollo-1.x branch, we can create a new release using code from this\nbranch like this:</p>\n<pre>$ build-package -c Twollo.cfg -nb Twollo-1.x\n</pre>\n<p>When the new package versions are calculated, they will be versioned\nalong the 1.x line, even if you have since created 2.x releases, by\nanalyzing the name of the branch.</p>\n<p>Caveat when using <tt><span class=\"pre\">-n</span></tt> and <tt><span class=\"pre\">-d</span></tt> on a branch with a branchname ending\nwith the version number is that you\u2019ll need to have the package versions\nmatching the branch version.\nE.g. having a branch: <tt><span class=\"pre\">branches/twollo-1.9</span></tt> will suppose packages like\n<tt><span class=\"pre\">twollow.web-1.9.x</span></tt> and <tt><span class=\"pre\">twollow.utils-1.9.x</span></tt> and so on.\nYou should be aware of this also when releasing packages from the trunk.\nMost probably you\u2019ll drive development on the trunk and branch out for a\nstable. In this case package versions on the branch should be kept inline.</p>\n</div>\n<div id=\"installing-a-released-project\">\n<h4>Installing a Released Project</h4>\n<p><tt>keas.build</tt> also comes with a very simple installation script that\ncan be used to quickly install any variant of the released project:</p>\n<pre>$ install --help\nUsage: install [options]\n\nOptions:\n  -h, --help            show this help message and exit\n  -u URL, --url=URL     The base URL at which the releases can be found.\n  -p PROJECT, --project=PROJECT\n                        The name of the project to be installed.\n  -V VARIANT, --variant=VARIANT\n                        The variant of the project to be installed.\n  -v VERSION, --version=VERSION\n                        The version of the project to be installed.\n  -l, --latest          When specified, the latest version will be chosen.\n  --username=USER       The username needed to access the site.\n  --password=PASSWORD   The password needed to access the site.\n  -b PATH, --buildout-path=PATH\n                        The path to the buildout executable.\n  --quiet               When specified, no messages are displayed.\n  --verbose             When specified, debug information is created.\n</pre>\n<p>For example, to install the latest QA version of the <tt>Twollo</tt> project,\nyou would run:</p>\n<blockquote>\n$ install -u <a href=\"https://build.twollo.com/buildouts/\" rel=\"nofollow\">https://build.twollo.com/buildouts/</a> -p Twollo -V QA \u2013latest</blockquote>\n</div>\n<div id=\"creating-helper-scripts\">\n<h4>Creating Helper Scripts</h4>\n<p>Sometimes it can be a pain to remember what all the command line\noptions are that you need to pass for building your project.\nFortunately, it is really easy to create helper scripts that just set\nsome defaults for you.</p>\n<p>For example, to create a build-twollo script, you would add the\nfollowing to a buildout configuration file:</p>\n<pre>[build-twollo]\nrecipe = zc.recipe.egg\neggs = keas.build\nscripts = build=build-twollo\ninitialization =\n    sys.argv[1:1] = ['-c', 'Twollo.cfg']\n</pre>\n<p>As another example, you could create an install-twollo-dev script that\nautomatically installs the latest development release:</p>\n<pre>[install-twollo-dev]\nrecipe = zc.recipe.egg\neggs = keas.build\nscripts = install=install-twollo-dev\ninitialization =\n    sys.argv[1:1] = ['-u', 'http://build.twollo.com/buildouts/',\n                     ' --username', 'someuser', '--password', 'somepass',\n                     '-p', 'Twollo', '-V', 'Development', '--latest']\n</pre>\n<p>The possibilities are endless!</p>\n</div>\n</div>\n<div id=\"footnotes\">\n<h3>Footnotes</h3>\n<table id=\"ini\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id1\" rel=\"nofollow\">[1]</a></td><td>See <a href=\"http://en.wikipedia.org/wiki/INI_file\" rel=\"nofollow\">http://en.wikipedia.org/wiki/INI_file</a></td></tr>\n</tbody>\n</table>\n<table id=\"webdav\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id2\" rel=\"nofollow\">[2]</a></td><td>See <a href=\"http://en.wikipedia.org/wiki/WebDAV\" rel=\"nofollow\">http://en.wikipedia.org/wiki/WebDAV</a></td></tr>\n</tbody>\n</table>\n</div>\n<div id=\"changes\">\n<h3>CHANGES</h3>\n<div id=\"id3\">\n<h4>0.4.1 (2013-11-28)</h4>\n<ul>\n<li>bugfix: prevent generating bad buildout option key/value seperators. Generate\n<cite>+=</cite> instead of <cite>+ =</cite> used for e.g. buildout parts options. Otherwise it\nfails since buildout 2.0</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h4>0.4.0 (2013-11-24)</h4>\n<ul>\n<li><p>feature: implemented a new argument <cite>vars</cite> in deployment template section. The\nnew <cite>vars</cite> argument can get used for define a release template section. If\ndefined, the build process will apply all arguments from this section as they\nwould be a a part of the project section. This allows to inherit a large\namount of arguments in a project definition instead of define them in\neach project. This is usefull if you have a stage and many production variants\nand the instance uses config data like a database setup and you need to\nshare them. For such a usecase you can simply define a stage and production\nsection and define all shared arguments and use the right <cite>vars</cite> section in\nyour product deployment setup. See the memcached sample in index.txt</p>\n<p>Note, this new product deployment template <cite>vars</cite> argument could be a problem\nfor your existing setup if you use a vars argument with a value similar then\na section name defined in your section template.</p>\n</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h4>0.3.1 (2013-09-25)</h4>\n<ul>\n<li>Improvement: added <cite>default-package-version</cite> command line option\nto avoid interactive questions on new packages</li>\n</ul>\n</div>\n<div id=\"id6\">\n<h4>0.3.0 (2012-12-27)</h4>\n<ul>\n<li>feature: added -i \u2013independent-branches option. This option will force\nto check if the last release was made from the same branch we are\nreleasing from. This is required if you develop a new software generation\nin a branch which is independent from the trunk. Previous version of\nkeas.build where only able to handle branch releases as bug fix releases\nand didn\u2019t make sure that we don\u2019t mix trunk and branch releases. Now with\nthe -i option we force that all released packages will be made or reused\nbased on the current trunk or branch (-b trunk,branch)</li>\n<li>added more logging infos for find or skip next version which makes is simpler\nto see what\u2019s going on</li>\n</ul>\n</div>\n<div id=\"id7\">\n<h4>0.2.2 (2011-08-29)</h4>\n<ul>\n<li>Improvement: add <cite>current-datetime</cite>, <cite>current-date</cite>, <cite>current-time</cite> variables</li>\n</ul>\n</div>\n<div id=\"id8\">\n<h4>0.2.1 (2011-04-07)</h4>\n<ul>\n<li>Fix RawConfigParser usage, it destroys options values by making them\nall lowercase.</li>\n</ul>\n</div>\n<div id=\"id9\">\n<h4>0.2.0 (2011-04-06)</h4>\n<ul>\n<li>Bump versions to ZTK 1.1</li>\n<li>Improvement: add SVN repo infos to the project config file.\nYah, I know this can be checked anytime, but adding this saves a lot of time.</li>\n<li>Improvement: add option <tt><span class=\"pre\">hash-config-files</span></tt></li>\n</ul>\n</div>\n<div id=\"id10\">\n<h4>0.1.8 (2010-05-11)</h4>\n<ul>\n<li>Fix: Do NOT <tt>register</tt> with <tt>python setup.py</tt></li>\n<li>Fix: bump setuptools and zc.buildout versions</li>\n<li>Fix: 0.1.7 tar.gz was broken</li>\n</ul>\n</div>\n<div id=\"id11\">\n<h4>0.1.7 (2010-04-26)</h4>\n<ul>\n<li>BUGFIX: the dependent config file gathering killed the version pins\nin the master config file</li>\n<li>Improvement: PYPI-like simple index support when checking package versions</li>\n<li>Improvement: Check dependent configs, upload all to the server.</li>\n<li>Improvement: Add <tt><span class=\"pre\">--force-version</span></tt> option.</li>\n<li>Improvement: Add version to svn log comment. That makes life easier (at least\nwith TortoiseSVN)</li>\n<li>Improvement: Add <tt><span class=\"pre\">--force-svnauth</span></tt> option.</li>\n<li>Improvement: Add <tt><span class=\"pre\">--directory</span></tt> option to <tt>install</tt>.</li>\n</ul>\n</div>\n<div id=\"id12\">\n<h4>0.1.6 (2009-11-2)</h4>\n<ul>\n<li>Improvement: When determining released versions of a branch, support\nbranch names ending with .x, as in MyProject-0.3.x</li>\n</ul>\n</div>\n<div id=\"id13\">\n<h4>0.1.5 (2009-10-16)</h4>\n<ul>\n<li>Improvement: add username and password on install to the URL that buildout\ngets for the .cfg file\nLet\u2019s hope that buildout does not leave that password around.</li>\n<li>Improvement(?) or fix: remove twisted dependency that was used in deploy\nfor SSH</li>\n<li>Improvement: removed dependency on lxml.  Now we just use pythons\nbuilt-in xml library.</li>\n<li>Improvement: added <tt><span class=\"pre\">buildout-upload-type</span></tt> option.\nSee doc for further info</li>\n<li>Bug Fix: multiline template option values crashed on parsing</li>\n<li>Bug Fix: re did not like non-text parameters coming from BeautifulSoup</li>\n<li>Improvement: added the <tt><span class=\"pre\">--timeout</span></tt> option to install</li>\n<li>Improvement: added mypypi buildout file upload support</li>\n<li>Bug Fix: revert to checkout of the complete source tree</li>\n</ul>\n</div>\n<div id=\"id14\">\n<h4>0.1.4 (2009-10-01)</h4>\n<ul>\n<li>Bug Fix: installer script would crash when -u option was missing a\ntrailing /</li>\n<li>Bug Fix: installer script would crash when no variants were found.</li>\n<li>Improvement: Building a package will no longer checkout the entire\nbranch just to update the setup.py file with the new version\nnumber.  Instead only the top level directory is checked out.</li>\n<li>Bug Fix: project build script would crash when variant\nconfiguration was missing information required by its template. Now\na helpful error message is printed and no files will be uploaded\nuntil all have been created successfully.</li>\n<li>Bug Fix: Typing Ctrl+c on the command line no longer causes a\nKeyboardInterrupt traceback to be spit out.</li>\n<li>Bug Fix: when running the installer, if the buildout command prompts\nthe user for input, the installer will no longer eat up the prompt.</li>\n</ul>\n</div>\n<div id=\"id15\">\n<h4>0.1.3 (2009-09-30)</h4>\n<ul>\n<li>Initial public release.</li>\n</ul>\n</div>\n<div id=\"internal\">\n<h4>0.1.1 (internal)</h4>\n<ul>\n<li>Bug Fix: If a project variant is specified for which no release have\nbeen made, the build script now exits nicely with a human readable\nerror message.</li>\n</ul>\n</div>\n<div id=\"id16\">\n<h4>0.1.0 (internal)</h4>\n<ul>\n<li>Initial release.</li>\n</ul>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 931383, "releases": {"0.1.3": [{"comment_text": "", "digests": {"md5": "b160bf2e847a88dcfc01defafd8e2d59", "sha256": "151431441c0a195e3bcab5fa8225ee13fbfd530fa94d042b152848e096b9edce"}, "downloads": -1, "filename": "keas.build-0.1.3.tar.gz", "has_sig": false, "md5_digest": "b160bf2e847a88dcfc01defafd8e2d59", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27849, "upload_time": "2009-09-30T21:29:03", "upload_time_iso_8601": "2009-09-30T21:29:03.680512Z", "url": "https://files.pythonhosted.org/packages/76/d6/c02d193858c4df3534dbde8ff98b6087d061dffaf60e0a1dc15c1563b54d/keas.build-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "fa70e98cad09acf4d85431b44e3c6873", "sha256": "e200c41cd3cb27a99f88679e2fa6ba278d87281e060695c2b3941bec99df8b46"}, "downloads": -1, "filename": "keas.build-0.1.4.tar.gz", "has_sig": false, "md5_digest": "fa70e98cad09acf4d85431b44e3c6873", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28987, "upload_time": "2009-10-02T07:38:37", "upload_time_iso_8601": "2009-10-02T07:38:37.445378Z", "url": "https://files.pythonhosted.org/packages/16/02/df1379c7c9b7f1ecf256263129d6aab938e1d12eaf561cee004cb7d83deb/keas.build-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "0b60fc8df18f075e03858da490a19333", "sha256": "c21ef4b1e62cbda1953491fb4115a7b84578e2bf393f1bb9c918c10efc8beb6c"}, "downloads": -1, "filename": "keas.build-0.1.5.tar.gz", "has_sig": false, "md5_digest": "0b60fc8df18f075e03858da490a19333", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25633, "upload_time": "2009-10-16T21:51:08", "upload_time_iso_8601": "2009-10-16T21:51:08.739388Z", "url": "https://files.pythonhosted.org/packages/f8/bc/6669f3e5ff84907655e5dc741d1a2ecea4639092743040287c17b53f1251/keas.build-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "0824c78ddfabb0e76f6c47e2c5324fb1", "sha256": "29a4d4bc006bf9e36d28c74fbadcc34e087d16bd75e67f9d7fcab5a2da6d882d"}, "downloads": -1, "filename": "keas.build-0.1.6.tar.gz", "has_sig": false, "md5_digest": "0824c78ddfabb0e76f6c47e2c5324fb1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30929, "upload_time": "2009-11-02T23:26:01", "upload_time_iso_8601": "2009-11-02T23:26:01.163010Z", "url": "https://files.pythonhosted.org/packages/63/5e/1bd405712b9f843a6845c14dbaed8f496b27de0138446398dd67bda2daac/keas.build-0.1.6.tar.gz", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "3a7122c61c707bdae01a361add94d9f9", "sha256": "ae827b2fa62a3ed16ec14ee584568b3ddc9bdcd3aaff13c47534ae3b7c1caf0b"}, "downloads": -1, "filename": "keas.build-0.1.7.tar.gz", "has_sig": false, "md5_digest": "3a7122c61c707bdae01a361add94d9f9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19971, "upload_time": "2010-04-26T13:37:17", "upload_time_iso_8601": "2010-04-26T13:37:17.315154Z", "url": "https://files.pythonhosted.org/packages/1b/b0/fa7122d15e880f50c6eca7003351e02bc8309fbeb04d83830604382436b7/keas.build-0.1.7.tar.gz", "yanked": false}], "0.1.8": [{"comment_text": "", "digests": {"md5": "4b78b613d173682ccf1e83186140bd5f", "sha256": "950724831e92be2438af27aacda3678a785d17457b1a32c300fc8a6019d2a1ad"}, "downloads": -1, "filename": "keas.build-0.1.8.tar.gz", "has_sig": false, "md5_digest": "4b78b613d173682ccf1e83186140bd5f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33560, "upload_time": "2010-05-11T13:52:46", "upload_time_iso_8601": "2010-05-11T13:52:46.817089Z", "url": "https://files.pythonhosted.org/packages/e0/1b/551a2c22c912ca66b79880253c5d38c36757ff4a5c8cb18c2c4fd6ea45b7/keas.build-0.1.8.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "2b641f4b68cc0c54897ef0f55526cb77", "sha256": "5f216700e0f3787e087cef11520705ab537063f0855feea35ed9d9b40ff27858"}, "downloads": -1, "filename": "keas.build-0.2.0.tar.gz", "has_sig": false, "md5_digest": "2b641f4b68cc0c54897ef0f55526cb77", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35032, "upload_time": "2011-04-06T14:34:09", "upload_time_iso_8601": "2011-04-06T14:34:09.717373Z", "url": "https://files.pythonhosted.org/packages/5a/61/947dc9be309fc7ead7e36107f0ce544cf0e82651f07c9ccd3659d3295e9c/keas.build-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "c2c6a45925bbfdaceaf2cb3ed0df954f", "sha256": "619346f2c12ed22a2f873a47451139944209b81f63bda9353d09652462f55cd0"}, "downloads": -1, "filename": "keas.build-0.2.1.tar.gz", "has_sig": false, "md5_digest": "c2c6a45925bbfdaceaf2cb3ed0df954f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36037, "upload_time": "2011-04-07T09:08:58", "upload_time_iso_8601": "2011-04-07T09:08:58.126808Z", "url": "https://files.pythonhosted.org/packages/d7/6d/6f5f83c776ff74c0640f9e59c3ce2a2296f7986ff8e7e4603963af598ae1/keas.build-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "dee8026a24015c40096444fdce78dd2d", "sha256": "63474b628a62ea852622e54780b47e4968fcb6a9fc530723e731ddb5d69ca553"}, "downloads": -1, "filename": "keas.build-0.2.2.tar.gz", "has_sig": false, "md5_digest": "dee8026a24015c40096444fdce78dd2d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36218, "upload_time": "2011-08-29T16:19:49", "upload_time_iso_8601": "2011-08-29T16:19:49.431266Z", "url": "https://files.pythonhosted.org/packages/34/f5/317824d4f3a36981f386f9a572ad52e2929384cb4d0d5968f6d0574f7fc4/keas.build-0.2.2.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "215edaa5b48f991e14c20224f8dfa2e5", "sha256": "491a28b044457b01a159ae2d4f2d561654f799d3830a35c4be3378ba8d975fba"}, "downloads": -1, "filename": "keas.build-0.3.0.zip", "has_sig": false, "md5_digest": "215edaa5b48f991e14c20224f8dfa2e5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 48780, "upload_time": "2012-12-27T00:19:32", "upload_time_iso_8601": "2012-12-27T00:19:32.818146Z", "url": "https://files.pythonhosted.org/packages/8a/46/465be4f6cb1a5f4598dae89de04f548f29c7c9df644c378e2c4282354367/keas.build-0.3.0.zip", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "ecfa6e4fbaaa77bbac468e84669992e5", "sha256": "8fc420ba485c2db134b44ad8930765e2d3df63ebdfb56a13f8a33272f04907ca"}, "downloads": -1, "filename": "keas.build-0.3.1.zip", "has_sig": false, "md5_digest": "ecfa6e4fbaaa77bbac468e84669992e5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 53219, "upload_time": "2013-09-25T07:18:54", "upload_time_iso_8601": "2013-09-25T07:18:54.860338Z", "url": "https://files.pythonhosted.org/packages/94/18/5992ac73658fcba1260c03c04488e0453a96135db7bd38968b38586b8b06/keas.build-0.3.1.zip", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "ef41283e60691b3d0f576484406b3338", "sha256": "918b73b26a5a0a62c24fe9dbcec0374e9cfab7035d59fd91aa9e4a9680b84ceb"}, "downloads": -1, "filename": "keas.build-0.4.0.zip", "has_sig": false, "md5_digest": "ef41283e60691b3d0f576484406b3338", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 55987, "upload_time": "2013-11-24T18:09:27", "upload_time_iso_8601": "2013-11-24T18:09:27.968586Z", "url": "https://files.pythonhosted.org/packages/d8/e5/f917792294b60b079a6faa42a9cff503d58771748e7b2bd75a5fb9fc9884/keas.build-0.4.0.zip", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "b662184c22bca7c1a49d5af9950276d3", "sha256": "04f36c8de898f5df25f33a1c2731788642c8b0d0b1ae18b2318b41f8c6cec53d"}, "downloads": -1, "filename": "keas.build-0.4.1.zip", "has_sig": false, "md5_digest": "b662184c22bca7c1a49d5af9950276d3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 56692, "upload_time": "2013-11-28T19:26:40", "upload_time_iso_8601": "2013-11-28T19:26:40.235181Z", "url": "https://files.pythonhosted.org/packages/e3/71/012958cbc679092ad3723cc04a8662ba0981301e96dff185cad1403013d9/keas.build-0.4.1.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b662184c22bca7c1a49d5af9950276d3", "sha256": "04f36c8de898f5df25f33a1c2731788642c8b0d0b1ae18b2318b41f8c6cec53d"}, "downloads": -1, "filename": "keas.build-0.4.1.zip", "has_sig": false, "md5_digest": "b662184c22bca7c1a49d5af9950276d3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 56692, "upload_time": "2013-11-28T19:26:40", "upload_time_iso_8601": "2013-11-28T19:26:40.235181Z", "url": "https://files.pythonhosted.org/packages/e3/71/012958cbc679092ad3723cc04a8662ba0981301e96dff185cad1403013d9/keas.build-0.4.1.zip", "yanked": false}], "timestamp": "Fri May  8 00:50:24 2020"}