{"info": {"author": "Shiimizu", "author_email": "shiimizu@protonmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: MacOS", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Operating System :: Unix", "Topic :: Software Development :: Code Generators", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# py-chan-api\n\n### Objective:\n- **Unification:** Have one library to use for multiple imageboards. Convert them to 4chan compliant API specifications.\n- **Wrapper:** Parse the JSON to programming-language-specific data structures (in this case, to Python).\n\n### API Documentation\n#### 4chan\n* [Official](https://github.com/4chan/4chan-API)\n* [Alternate](https://github.com/catamphetamine/imageboard/blob/master/docs/engines/4chan.md)\n\n#### FFuuka based Imageboards\n* [Official (Github)](https://github.com/FoolCode/FoolFuuka-docs/blob/master/code_guide/documentation/api.rst)\n* [Official (Website)](https://4plebs.tech/foolfuuka)\n* [Readthedocs](https://foolfuuka.readthedocs.io/en/latest/code_guide/documentation/api.html)\n\n---\n\n|   Feature                     |                        Source                             |\n|-------------------------------|-----------------------------------------------------------|\n|   \u2714\ufe0f Single thread             |`a.4cdn.org/{board}/thread/{threadnumber}.json`            |\n|   \u2714\ufe0f Thread index                |`a.4cdn.org/{board}/{pagenumber}.json` (threads @ pg #)    |\n|   \u2714\ufe0f Board list                  |`a.4cdn.org/boards.json`                                   |\n|   \u2714\ufe0f Board catalog             |`a.4cdn.org/{board}/catalog.json`                          |\n|   \u2714\ufe0f Thread list                 |`a.4cdn.org/{board}/threads.json`                          |\n|  \u2714\ufe0f Archived threads            |`a.4cdn.org/{board}/archive.json`                          |\n|  \ud83d\udea7 HTTPS                       |On by default in `urllib3`                                 |\n|  \ud83d\udea7 Rate limiting               |`x` requests allowed in `n` seconds                        |\n|  \ud83d\udea7 `If-Modified-Since`         |`req.headers['last-modified']`                             |\n|  \ud83d\udea7 In-place thread updating |`req.headers['last-modified']; difflib`                    |\n\n### Extra Support\n|**Extra Imageboards** | Compatibility |\n|-------------------------------|----------|\n|\u2714\ufe0f [FFuuka](https://archive.4plebs.org/_/articles/credits/#archives)|  `Thread`, `Post` |\n|\u2754 [warosu](https://warosu.org)|\n|\u2754 [yuki.la](https://yuki.la) |\n\n---\n\n### Installation\n```console\n$ pip install py-chan-api             # NOTE: Only Python 3.7+\n\n# Or with virtualenv\n$ pip install virtualenv              # Install virtualenv if you haven't already\n$ virtualenv venv                     # Create a virtualenv\n$ source venv/bin/activate            # Activate it\n$ pip install py-chan-api             # Install py-chan-api\n```\n\n### Usage\n\n```python\nimport pychan\n\n# pychan infers what type of object you're giving it. See the above table.\n# Whether its a string pointing to a file/dict/dict in string format.\n\nthreadIndex     = pychan.FourChan(\"thread_index.json\")\nboard           = pychan.FourChan(\"boards.json\")\nthread          = pychan.FourChan(\"thread.json\")\nthreadList      = pychan.FourChan(\"thread_list.json\")\narchivedThread  = pychan.FourChan(\"archived_threads.json\")\npost            = thread.posts[0]\n\nprint(thread.posts[0].com)              # Get the first post and its comment\n\nprint(post)                             # If you're unsure of what fields to call\n                                        # just print the object itself to see a list of key/values\n\n# Or see the type of the unknown object\nprint(type(pychan.FourChan(\"unknown.json\")))\n\nprint(thread.posts[0])\nprint(threadIndex.threads[0].posts[1])\nprint(board.trollflags.AC)\nprint(board.boards[0].title)\nprint(catalog.page[0].threads[0])\nprint(threadList.page[0].threads[0])\nprint(archivedThread[-1])\n\n# To get individual key value/pairs\njdb = thread.posts[0].json              # Convert the Post object to a dictionary\nfor k,v in jdb.items():                 # Iterate through the key/value pairs\n    print(k, v)\n```\n\n### Converting\n\n```python\nimport pychan\nfuukaThread = pychan.Fuuka(\"desu_thread.json\")    # Specify the imageboard implementation\n\n# Parallelism (multiprocessing) is turned on automatically if you supply more\n# than one key/value pairs in a dictionary.\n# You can override this behaviour by specifying the parallel field\n# By using a dictionary, you can also output it to a file.\nfthread1 = pychan.Fuuka({\"desu_thread.json\" : \"out1.json\"}, parallel = True)\n\n# Which then you could read it as a normal 4chan json\nfthread = pychan.FourChan(\"out1.json\")\n\n# We can also just use the outputed value from before\nprint(fthread1.posts[1])      # Note: fthread1 is the same as fthread and fuukaThread\n```\n\n### Tests\nTests are done with [`pytest`](https://pytest.org/en/latest/).\n```console\n$ pip install -U pytest pytest-xdist\n$ pytest tests.py -v\n```\n\n### Support\nPull requests are welcome.\nFeel free to ping shiimizu @ [this](https://matrix.to/#/#bibanon-chat:matrix.org) Matrix server.\n\n\n### \u26a0\ufe0f Archiving (polling)\n- Archiving capabilities are beyond the scope of this project.\n- Please see:\n  - [`eve`](https://github.com/bibanon/eve)\n  - [`hayden`](https://github.com/bbepis/Hayden)\n  - [`basc-archiver`](https://github.com/bibanon/BASC-Archiver)\n  - [`go-4chan-api`](https://github.com/moshee/go-4chan-api)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/shiimizu/py-chan-api", "keywords": "4chan api imageboard wrapper", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "py-chan-api", "package_url": "https://pypi.org/project/py-chan-api/", "platform": "", "project_url": "https://pypi.org/project/py-chan-api/", "project_urls": {"Bug Reports": "https://github.com/shiimizu/py-chan-api/issues", "Homepage": "https://github.com/shiimizu/py-chan-api", "Source": "https://github.com/shiimizu/py-chan-api"}, "release_url": "https://pypi.org/project/py-chan-api/0.1.3/", "requires_dist": null, "requires_python": ">=3.0, <4", "summary": "A Python wrapper for the 4chan API and other imageboards", "version": "0.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>py-chan-api</h1>\n<h3>Objective:</h3>\n<ul>\n<li><strong>Unification:</strong> Have one library to use for multiple imageboards. Convert them to 4chan compliant API specifications.</li>\n<li><strong>Wrapper:</strong> Parse the JSON to programming-language-specific data structures (in this case, to Python).</li>\n</ul>\n<h3>API Documentation</h3>\n<h4>4chan</h4>\n<ul>\n<li><a href=\"https://github.com/4chan/4chan-API\" rel=\"nofollow\">Official</a></li>\n<li><a href=\"https://github.com/catamphetamine/imageboard/blob/master/docs/engines/4chan.md\" rel=\"nofollow\">Alternate</a></li>\n</ul>\n<h4>FFuuka based Imageboards</h4>\n<ul>\n<li><a href=\"https://github.com/FoolCode/FoolFuuka-docs/blob/master/code_guide/documentation/api.rst\" rel=\"nofollow\">Official (Github)</a></li>\n<li><a href=\"https://4plebs.tech/foolfuuka\" rel=\"nofollow\">Official (Website)</a></li>\n<li><a href=\"https://foolfuuka.readthedocs.io/en/latest/code_guide/documentation/api.html\" rel=\"nofollow\">Readthedocs</a></li>\n</ul>\n<hr>\n<table>\n<thead>\n<tr>\n<th>Feature</th>\n<th>Source</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\u2714\ufe0f Single thread</td>\n<td><code>a.4cdn.org/{board}/thread/{threadnumber}.json</code></td>\n</tr>\n<tr>\n<td>\u2714\ufe0f Thread index</td>\n<td><code>a.4cdn.org/{board}/{pagenumber}.json</code> (threads @ pg #)</td>\n</tr>\n<tr>\n<td>\u2714\ufe0f Board list</td>\n<td><code>a.4cdn.org/boards.json</code></td>\n</tr>\n<tr>\n<td>\u2714\ufe0f Board catalog</td>\n<td><code>a.4cdn.org/{board}/catalog.json</code></td>\n</tr>\n<tr>\n<td>\u2714\ufe0f Thread list</td>\n<td><code>a.4cdn.org/{board}/threads.json</code></td>\n</tr>\n<tr>\n<td>\u2714\ufe0f Archived threads</td>\n<td><code>a.4cdn.org/{board}/archive.json</code></td>\n</tr>\n<tr>\n<td>\ud83d\udea7 HTTPS</td>\n<td>On by default in <code>urllib3</code></td>\n</tr>\n<tr>\n<td>\ud83d\udea7 Rate limiting</td>\n<td><code>x</code> requests allowed in <code>n</code> seconds</td>\n</tr>\n<tr>\n<td>\ud83d\udea7 <code>If-Modified-Since</code></td>\n<td><code>req.headers['last-modified']</code></td>\n</tr>\n<tr>\n<td>\ud83d\udea7 In-place thread updating</td>\n<td><code>req.headers['last-modified']; difflib</code></td>\n</tr></tbody></table>\n<h3>Extra Support</h3>\n<table>\n<thead>\n<tr>\n<th><strong>Extra Imageboards</strong></th>\n<th>Compatibility</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\u2714\ufe0f <a href=\"https://archive.4plebs.org/_/articles/credits/#archives\" rel=\"nofollow\">FFuuka</a></td>\n<td><code>Thread</code>, <code>Post</code></td>\n</tr>\n<tr>\n<td>\u2754 <a href=\"https://warosu.org\" rel=\"nofollow\">warosu</a></td>\n<td></td>\n</tr>\n<tr>\n<td>\u2754 <a href=\"https://yuki.la\" rel=\"nofollow\">yuki.la</a></td>\n<td></td>\n</tr></tbody></table>\n<hr>\n<h3>Installation</h3>\n<pre><span class=\"gp\">$</span> pip install py-chan-api             <span class=\"c1\"># NOTE: Only Python 3.7+</span>\n\n<span class=\"gp\">#</span> Or with virtualenv\n<span class=\"gp\">$</span> pip install virtualenv              <span class=\"c1\"># Install virtualenv if you haven't already</span>\n<span class=\"gp\">$</span> virtualenv venv                     <span class=\"c1\"># Create a virtualenv</span>\n<span class=\"gp\">$</span> <span class=\"nb\">source</span> venv/bin/activate            <span class=\"c1\"># Activate it</span>\n<span class=\"gp\">$</span> pip install py-chan-api             <span class=\"c1\"># Install py-chan-api</span>\n</pre>\n<h3>Usage</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pychan</span>\n\n<span class=\"c1\"># pychan infers what type of object you're giving it. See the above table.</span>\n<span class=\"c1\"># Whether its a string pointing to a file/dict/dict in string format.</span>\n\n<span class=\"n\">threadIndex</span>     <span class=\"o\">=</span> <span class=\"n\">pychan</span><span class=\"o\">.</span><span class=\"n\">FourChan</span><span class=\"p\">(</span><span class=\"s2\">\"thread_index.json\"</span><span class=\"p\">)</span>\n<span class=\"n\">board</span>           <span class=\"o\">=</span> <span class=\"n\">pychan</span><span class=\"o\">.</span><span class=\"n\">FourChan</span><span class=\"p\">(</span><span class=\"s2\">\"boards.json\"</span><span class=\"p\">)</span>\n<span class=\"n\">thread</span>          <span class=\"o\">=</span> <span class=\"n\">pychan</span><span class=\"o\">.</span><span class=\"n\">FourChan</span><span class=\"p\">(</span><span class=\"s2\">\"thread.json\"</span><span class=\"p\">)</span>\n<span class=\"n\">threadList</span>      <span class=\"o\">=</span> <span class=\"n\">pychan</span><span class=\"o\">.</span><span class=\"n\">FourChan</span><span class=\"p\">(</span><span class=\"s2\">\"thread_list.json\"</span><span class=\"p\">)</span>\n<span class=\"n\">archivedThread</span>  <span class=\"o\">=</span> <span class=\"n\">pychan</span><span class=\"o\">.</span><span class=\"n\">FourChan</span><span class=\"p\">(</span><span class=\"s2\">\"archived_threads.json\"</span><span class=\"p\">)</span>\n<span class=\"n\">post</span>            <span class=\"o\">=</span> <span class=\"n\">thread</span><span class=\"o\">.</span><span class=\"n\">posts</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">thread</span><span class=\"o\">.</span><span class=\"n\">posts</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">com</span><span class=\"p\">)</span>              <span class=\"c1\"># Get the first post and its comment</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">post</span><span class=\"p\">)</span>                             <span class=\"c1\"># If you're unsure of what fields to call</span>\n                                        <span class=\"c1\"># just print the object itself to see a list of key/values</span>\n\n<span class=\"c1\"># Or see the type of the unknown object</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">pychan</span><span class=\"o\">.</span><span class=\"n\">FourChan</span><span class=\"p\">(</span><span class=\"s2\">\"unknown.json\"</span><span class=\"p\">)))</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">thread</span><span class=\"o\">.</span><span class=\"n\">posts</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">threadIndex</span><span class=\"o\">.</span><span class=\"n\">threads</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">posts</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"o\">.</span><span class=\"n\">trollflags</span><span class=\"o\">.</span><span class=\"n\">AC</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"o\">.</span><span class=\"n\">boards</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">catalog</span><span class=\"o\">.</span><span class=\"n\">page</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">threads</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">threadList</span><span class=\"o\">.</span><span class=\"n\">page</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">threads</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">archivedThread</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># To get individual key value/pairs</span>\n<span class=\"n\">jdb</span> <span class=\"o\">=</span> <span class=\"n\">thread</span><span class=\"o\">.</span><span class=\"n\">posts</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">json</span>              <span class=\"c1\"># Convert the Post object to a dictionary</span>\n<span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span><span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">jdb</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>                 <span class=\"c1\"># Iterate through the key/value pairs</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n</pre>\n<h3>Converting</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pychan</span>\n<span class=\"n\">fuukaThread</span> <span class=\"o\">=</span> <span class=\"n\">pychan</span><span class=\"o\">.</span><span class=\"n\">Fuuka</span><span class=\"p\">(</span><span class=\"s2\">\"desu_thread.json\"</span><span class=\"p\">)</span>    <span class=\"c1\"># Specify the imageboard implementation</span>\n\n<span class=\"c1\"># Parallelism (multiprocessing) is turned on automatically if you supply more</span>\n<span class=\"c1\"># than one key/value pairs in a dictionary.</span>\n<span class=\"c1\"># You can override this behaviour by specifying the parallel field</span>\n<span class=\"c1\"># By using a dictionary, you can also output it to a file.</span>\n<span class=\"n\">fthread1</span> <span class=\"o\">=</span> <span class=\"n\">pychan</span><span class=\"o\">.</span><span class=\"n\">Fuuka</span><span class=\"p\">({</span><span class=\"s2\">\"desu_thread.json\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"out1.json\"</span><span class=\"p\">},</span> <span class=\"n\">parallel</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Which then you could read it as a normal 4chan json</span>\n<span class=\"n\">fthread</span> <span class=\"o\">=</span> <span class=\"n\">pychan</span><span class=\"o\">.</span><span class=\"n\">FourChan</span><span class=\"p\">(</span><span class=\"s2\">\"out1.json\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># We can also just use the outputed value from before</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">fthread1</span><span class=\"o\">.</span><span class=\"n\">posts</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>      <span class=\"c1\"># Note: fthread1 is the same as fthread and fuukaThread</span>\n</pre>\n<h3>Tests</h3>\n<p>Tests are done with <a href=\"https://pytest.org/en/latest/\" rel=\"nofollow\"><code>pytest</code></a>.</p>\n<pre><span class=\"gp\">$</span> pip install -U pytest pytest-xdist\n<span class=\"gp\">$</span> pytest tests.py -v\n</pre>\n<h3>Support</h3>\n<p>Pull requests are welcome.\nFeel free to ping shiimizu @ <a href=\"https://matrix.to/#/#bibanon-chat:matrix.org\" rel=\"nofollow\">this</a> Matrix server.</p>\n<h3>\u26a0\ufe0f Archiving (polling)</h3>\n<ul>\n<li>Archiving capabilities are beyond the scope of this project.</li>\n<li>Please see:\n<ul>\n<li><a href=\"https://github.com/bibanon/eve\" rel=\"nofollow\"><code>eve</code></a></li>\n<li><a href=\"https://github.com/bbepis/Hayden\" rel=\"nofollow\"><code>hayden</code></a></li>\n<li><a href=\"https://github.com/bibanon/BASC-Archiver\" rel=\"nofollow\"><code>basc-archiver</code></a></li>\n<li><a href=\"https://github.com/moshee/go-4chan-api\" rel=\"nofollow\"><code>go-4chan-api</code></a></li>\n</ul>\n</li>\n</ul>\n\n          </div>"}, "last_serial": 6173349, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "47f920d3da5011fcf27044555fc94435", "sha256": "295c71663e92dc153d96ff8211ce2d07bb0eb3c8448f27e2e70d3387a9fa0803"}, "downloads": -1, "filename": "py_chan_api-0.1.1-py3.7.egg", "has_sig": false, "md5_digest": "47f920d3da5011fcf27044555fc94435", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": ">=3.7, <4", "size": 14037, "upload_time": "2019-08-29T16:50:33", "upload_time_iso_8601": "2019-08-29T16:50:33.317350Z", "url": "https://files.pythonhosted.org/packages/5b/a5/4bdc02007c69ec871bbb4e2c37ae160534cf300f71a290c06a96d49dd8e4/py_chan_api-0.1.1-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "c25da8d912dead9dbeeee02d5fbc2f92", "sha256": "e25053a11cfdacd71ece3bdc6a6a1efc23680032762ffd1bc4727e822596e531"}, "downloads": -1, "filename": "py-chan-api-0.1.1.tar.gz", "has_sig": false, "md5_digest": "c25da8d912dead9dbeeee02d5fbc2f92", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7, <4", "size": 7314, "upload_time": "2019-08-29T07:21:59", "upload_time_iso_8601": "2019-08-29T07:21:59.976237Z", "url": "https://files.pythonhosted.org/packages/f9/62/24796b95a7776f12a736fbb236db61c212956ed7886027afb024d5fffde9/py-chan-api-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "665887b47206ec6f0dada4f8dd1dcc6a", "sha256": "fcde23d049f6decd3481b7d58df80437eab5b746afe18cd7be0362bf2ace9e6e"}, "downloads": -1, "filename": "py_chan_api-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "665887b47206ec6f0dada4f8dd1dcc6a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7, <4", "size": 8651, "upload_time": "2019-10-06T03:15:54", "upload_time_iso_8601": "2019-10-06T03:15:54.257151Z", "url": "https://files.pythonhosted.org/packages/d4/6f/879ab85b693692ee249184fd482f744c0ade7c91e750287b59daca6d902a/py_chan_api-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7eb517ca9c5f0d26a7ae7e5776b47a23", "sha256": "e8d48c10068635082460e2bbd97408b836bd3010806c1b76ed995cc0285d6747"}, "downloads": -1, "filename": "py-chan-api-0.1.2.tar.gz", "has_sig": false, "md5_digest": "7eb517ca9c5f0d26a7ae7e5776b47a23", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7, <4", "size": 7711, "upload_time": "2019-10-06T02:46:41", "upload_time_iso_8601": "2019-10-06T02:46:41.686943Z", "url": "https://files.pythonhosted.org/packages/f5/ca/64c71a046b730924fd3f957d07bba6c1fbf75f87f0fd8263a8ea70a9cc8d/py-chan-api-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "45e719fcfeb621bc20395fdf135f6aa7", "sha256": "1ca1ebf4d36c257fe85a96b128429a3ae2c11f14637f1e0cff5724770dc1d40b"}, "downloads": -1, "filename": "py_chan_api-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "45e719fcfeb621bc20395fdf135f6aa7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.0, <4", "size": 8445, "upload_time": "2019-11-21T06:37:27", "upload_time_iso_8601": "2019-11-21T06:37:27.750493Z", "url": "https://files.pythonhosted.org/packages/56/44/1772e1863d48df843e5032ce3bc4d282179ac203dd9087f6d029bb25a54f/py_chan_api-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "854e70aae4a1086c5446093ce699281b", "sha256": "4890aad0da59fda86f1ba7984e53d6fb19320c2de88d20884206327cdd95a76b"}, "downloads": -1, "filename": "py-chan-api-0.1.3.tar.gz", "has_sig": false, "md5_digest": "854e70aae4a1086c5446093ce699281b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0, <4", "size": 7544, "upload_time": "2019-11-21T06:37:29", "upload_time_iso_8601": "2019-11-21T06:37:29.344459Z", "url": "https://files.pythonhosted.org/packages/6f/ee/f9025ce725df06fcce3daa0853b02c0f7661e94a8235e21b333830f33e22/py-chan-api-0.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "45e719fcfeb621bc20395fdf135f6aa7", "sha256": "1ca1ebf4d36c257fe85a96b128429a3ae2c11f14637f1e0cff5724770dc1d40b"}, "downloads": -1, "filename": "py_chan_api-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "45e719fcfeb621bc20395fdf135f6aa7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.0, <4", "size": 8445, "upload_time": "2019-11-21T06:37:27", "upload_time_iso_8601": "2019-11-21T06:37:27.750493Z", "url": "https://files.pythonhosted.org/packages/56/44/1772e1863d48df843e5032ce3bc4d282179ac203dd9087f6d029bb25a54f/py_chan_api-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "854e70aae4a1086c5446093ce699281b", "sha256": "4890aad0da59fda86f1ba7984e53d6fb19320c2de88d20884206327cdd95a76b"}, "downloads": -1, "filename": "py-chan-api-0.1.3.tar.gz", "has_sig": false, "md5_digest": "854e70aae4a1086c5446093ce699281b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0, <4", "size": 7544, "upload_time": "2019-11-21T06:37:29", "upload_time_iso_8601": "2019-11-21T06:37:29.344459Z", "url": "https://files.pythonhosted.org/packages/6f/ee/f9025ce725df06fcce3daa0853b02c0f7661e94a8235e21b333830f33e22/py-chan-api-0.1.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:08:35 2020"}