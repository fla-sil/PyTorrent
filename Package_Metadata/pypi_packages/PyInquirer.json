{"info": {"author": "Oyetoke Toby", "author_email": "oyetoketoby80@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 1 - Planning", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Libraries :: Application Frameworks", "Topic :: Software Development :: User Interfaces"], "description": "PythonInquirer\n==============\n\nA collection of common interactive command line user interfaces. It is\noriginally called `whaaaaaat <https://github.com/finklabs/whaaaaat>`__\ncreated by **finklabs**, but due to bad naming and in need of fixes, I\ndecided to rename and apply some necessary fixes on it. The reason is\nbecause I needed it for a tool that can be install through PyPI. I need\nto rewrite it for my own need. But don't worry any new fix on the main\nRepo, will be added to it if needed. Lastly, I am currently working on\nthe author's TODO.\n\nPyInquirer 1.0.3 Bugfix Update\n-----------------\n\n`PyInquirer 1.0.3 <https://github.com/CITGuru/PyInquirer/releases/tag/1.0.3>`\n\n\nTable of Contents\n-----------------\n\n1. `Documentation <#documentation>`__\n\n   1. `Installation <#installation>`__\n   2. `Examples <#examples>`__\n   3. `Quickstart <#quickstart>`__\n   4. `Question Types <#types>`__\n   5. `Question Properties <#properties>`__\n   6. `User Interfaces and Styles <#styles>`__\n\n2. `Windows Platform <#windows>`__\n3. `Support <#support>`__\n4. `Contribution <#contribution>`__\n5. `Acknowledgments <#acknowledgements>`__\n6. `License <#license>`__\n\nGoal and Philosophy\n-------------------\n\n**PyInquirer** strives to be an easily embeddable and beautiful\ncommand line interface for `Python <https://python.org/>`__.\n**PyInquirer** wants to make it easy for existing Inquirer.js users\nto write immersive command line applications in Python. We are convinced\nthat its feature-set is the most complete for building immersive CLI\napplications. We also hope that **PyInquirer** proves itself useful\nto Python users.\n\n**PyInquirer** should ease the process of - providing *error\nfeedback* - *asking questions* - *parsing* input - *validating* answers\n- managing *hierarchical prompts*\n\n**Note:** **PyInquirer** provides the user interface and the inquiry\nsession flow. >\n\nDocumentation\n-------------\n\nInstallation\n~~~~~~~~~~~~\n\nLike most Python packages PyInquirer is available on `PyPi <TODO>`__.\nSimply use pip to install the PyInquirer package\n\n.. code:: shell\n\n    pip install PyInquirer\n\nIn case you encounter any prompt\\_toolkit error, that means you've the\nwrong prompt\\_toolkit version.\n\nYou can correct that by doing\n\n.. code:: shell\n\n    pip install prompt_toolkit==1.0.14\n\nor download the wheel file from here:\n\n.. code:: shell\n\n    https://pypi.org/project/prompt_toolkit/1.0.14/#files\n\nQuickstart\n~~~~~~~~~~\n\nLike Inquirer.js, using inquirer is structured into two simple steps:\n\n-  you define a **list of questions** and hand them to **prompt**\n-  promt returns a **list of answers**\n\n.. code:: python\n\n    from __future__ import print_function, unicode_literals\n    from PyInquirer import prompt, print_json\n\n    questions = [\n        {\n            'type': 'input',\n            'name': 'first_name',\n            'message': 'What\\'s your first name',\n        }\n    ]\n\n    answers = prompt(questions)\n    print_json(answers)  # use the answers as input for your app\n\nA good starting point from here is probably the examples section.\n\nExamples\n~~~~~~~~\n\nMost of the examples intend to demonstrate a single question type or\nfeature:\n\n-  `editor.py <./examples/editor.py>`_\n-  `expand.py <./examples/expand.py>`_\n-  `list.py <./examples/list.py>`_\n-  `password.py <./examples/password.py>`_\n-  `when.py <./examples/when.py>`_\n-  `checkbox.py <./examples/checkbox.py>`_\n-  `confirm.py <./examples/confirm.py>`_\n-  `hierarchical.py <./examples/hierarchical.py>`_\n-  `pizza.py <./examples/pizza.py>`_ - demonstrate using different question types \n-  `editor.py <./examples/editor.py>`_\n-  `input.py  <./examples/input.py>`_\n-  `rawlist.py <./examples/rawlist.py>`_\n\nIf you want to launch examples with the code from repository instead of\ninstalling a package you need to execute ``pip install -e .`` within project\ndirectory.\n\nQuestion Types\n~~~~~~~~~~~~~~\n\n``questions`` is a list of questions. Each question has a type.\n\nList - ``{type: 'list'}``\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\nTake ``type``, ``name``, ``message``, ``choices``\\ [, ``default``,\n``filter``] properties. (Note that default must be the choice ``index``\nin the array or a choice ``value``)\n\n|List prompt| s ---\n\nRaw List - ``{type: 'rawlist'}``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nTake ``type``, ``name``, ``message``, ``choices``\\ [, ``default``,\n``filter``] properties. (Note that default must the choice ``index`` in\nthe array)\n\n.. figure:: https://raw.githubusercontent.com/citguru/PyInquirer/master/docs/images/raw-list.png\n   :alt: Raw list prompt\n\n   Raw list prompt\n\n--------------\n\nExpand - ``{type: 'expand'}``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nTake ``type``, ``name``, ``message``, ``choices``\\ [, ``default``]\nproperties. (Note that default must be the choice ``index`` in the\narray. If ``default`` key not provided, then ``help`` will be used as\ndefault choice)\n\nNote that the ``choices`` object will take an extra parameter called\n``key`` for the ``expand`` prompt. This parameter must be a single\n(lowercased) character. The ``h`` option is added by the prompt and\nshouldn't be defined by the user.\n\nSee ``examples/expand.py`` for a running example.\n\n|Expand prompt closed| |Expand prompt expanded|\n\n--------------\n\nCheckbox - ``{type: 'checkbox'}``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nTake ``type``, ``name``, ``message``, ``choices``\\ [, ``filter``,\n``validate``, ``default``] properties. ``default`` is expected to be an\nArray of the checked choices value.\n\nChoices marked as ``{checked: true}`` will be checked by default.\n\nChoices whose property ``disabled`` is truthy will be unselectable. If\n``disabled`` is a string, then the string will be outputted next to the\ndisabled choice, otherwise it'll default to ``\"Disabled\"``. The\n``disabled`` property can also be a synchronous function receiving the\ncurrent answers as argument and returning a boolean or a string.\n\n.. figure:: https://raw.githubusercontent.com/citguru/PyInquirer/master/docs/images/checkbox-prompt.png\n   :alt: Checkbox prompt\n\n   Checkbox prompt\n\n--------------\n\nConfirm - ``{type: 'confirm'}``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nTake ``type``, ``name``, ``message``\\ [, ``default``] properties.\n``default`` is expected to be a boolean if used.\n\n.. figure:: https://raw.githubusercontent.com/citguru/PyInquirer/master/docs/images/confirm-prompt.png\n   :alt: Confirm prompt\n\n   Confirm prompt\n\n--------------\n\nInput - ``{type: 'input'}``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nTake ``type``, ``name``, ``message``\\ [, ``default``, ``filter``,\n``validate``] properties.\n\n.. figure:: https://raw.githubusercontent.com/citguru/PyInquirer/master/docs/images/input-prompt.png\n   :alt: Input prompt\n\n   Input prompt\n\n--------------\n\nPassword - ``{type: 'password'}``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nTake ``type``, ``name``, ``message``\\ [, ``default``, ``filter``,\n``validate``] properties.\n\n.. figure:: https://raw.githubusercontent.com/citguru/PyInquirer/master/docs/images/password-prompt.png\n   :alt: Password prompt\n\n   Password prompt\n\n--------------\n\nEditor - ``{type: 'editor'}``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nTake ``type``, ``name``, ``message``\\ [, ``default``, ``filter``,\n``validate``, ``eargs``] properties\n\n### Editor Arguments - ``eargs``\n\nOpens an empty or edits the default text in the defined editor.  If an editor is given\n(should be the full path to the executable but the regular operating\nsystem search path is used for finding the executable) it overrides\nthe detected editor.  Optionally, some environment variables can be\nused.  If the editor is closed without changes, ``None`` is returned.  In\ncase a file is edited directly the return value is always ``None`` and\n``save`` and ``ext`` are ignored.\n\nTakes:\n\n-  editor: accepts ``default`` to get the default platform editor. But \n   you can also provide the path to an editor e.g ``vi``.\n-  ext: the extension to tell the editor about. This defaults to `.txt` \n   but changing this might change syntax highlighting e.g \".py\"\n-  save: accepts ``True`` or ``False`` to determine to save a file.\n-  filename: accepts the path of a file you'd like to edit.\n-  env: accepts any given environment variables to pass to the editor\n\nLaunches an instance of the users preferred editor on a temporary file.\nOnce the user exits their editor, the contents of the temporary file are\nread in as the result. The editor to use is determined by reading the\n:math:``VISUAL or ``\\ EDITOR environment variables. If neither of those\nare present, notepad (on Windows) or vim (Linux or Mac) is used.\n\nQuestion Properties\n~~~~~~~~~~~~~~~~~~~\n\nA question is a dictionary containing question related values:\n\n-  ``type``: (String) Type of the prompt. Defaults: input - Possible values:\n   input, confirm, list, rawlist, expand, checkbox, password, editor\n-  ``name``: (String) The name to use when storing the answer in the answers\n   hash. If the name contains periods, it will define a path in the\n   answers hash.\n-  ``message``: (String\\|Function) The question to print. If defined as a\n   function, the first parameter will be the current inquirer session\n   answers.\n-  ``default``: (String\\|Number\\|Array\\|Function) Default value(s) to use if\n   nothing is entered, or a function that returns the default value(s).\n   If defined as a function, the first parameter will be the current\n   inquirer session answers.\n-  ``choices``: (Array\\|Function) Choices array or a function returning a\n   choices array. If defined as a function, the first parameter will be\n   the current inquirer session answers. Array values can be simple\n   strings, or objects containing a name (to display in list), a value\n   (to save in the answers hash) and a short (to display after\n   selection) properties. The choices array can also contain a\n   Separator.\n-  ``validate``: (Function) Receive the user input and should return true if\n   the value is valid, and an error message (String) otherwise. If false\n   is returned, a default error message is provided.\n-  ``filter``: (Function) Receive the user input and return the filtered\n   value to be used inside the program. The value returned will be added\n   to the Answers hash.\n-  ``when``: (Function, Boolean) Receive the current user answers hash and\n   should return true or false depending on whether or not this question\n   should be asked. The value can also be a simple boolean.\n-  ``pageSize``: (Number) Change the number of lines that will be rendered\n   when using list, rawList, expand or checkbox.\n\nUser Interfaces and Styles\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTODO\n\nWindows Platform\n----------------\n\n**``PyInquirer``** is build on prompt\\_toolkit which is cross platform,\nand everything that you build on top should run fine on both Unix and\nWindows systems. On Windows, it uses a different event loop\n(WaitForMultipleObjects instead of select), and another input and output\nsystem. (Win32 APIs instead of pseudo-terminals and VT100.)\n\nIt's worth noting that the implementation is a \"best effort of what is\npossible\". Both Unix and Windows terminals have their limitations. But\nin general, the Unix experience will still be a little better.\n\nFor Windows, it's recommended to use either cmder or conemu.\n\nSupport\n-------\n\nMost of the questions are probably related to using a question type or\nfeature. Please lookup and study the appropriate examples.\n\nIssue on Github TODO link\n\nFor many issues like for example common Python programming issues\nstackoverflow might be a good place to search for an answer. TODO link\n\nContribution\n------------\n\n.. code:: shell\n\n    $ git clone git@github.com:CITGuru/PyInquirer.git\n    $ cd PyInquirer\n    $ python -m venv venv\n    $ source venv/bin/activate\n    $ pip install --upgrade pip\n    $ pip install -r requirements.txt\n    $ pip install -r requirements_dev.txt\n\nWith an environment ready you can add new feature and check everything works\njust fine\n\n.. code:: shell\n\n    $ pytest -sv tests/\n\nThat's it, now you can fork a project and submit PR with your change!\n\nLicense\n-------\n\nSince I am not the owner, it all goes to Finklab\n\nCopyright (c) 2016-2017 Mark Fink (twitter: @markfink)\n\nCopyright (c) 2018 Oyetoke Toby (twitter: @oyetokeT)\n\nLicensed under the MIT license.\n\n.. |List prompt| image:: https://raw.githubusercontent.com/citguru/PyInquirer/master/docs/images/input-prompt.png\n.. |Expand prompt closed| image:: https://raw.githubusercontent.com/citguru/PyInquirer/master/docs/images/expand-prompt-1.png\n.. |Expand prompt expanded| image:: https://raw.githubusercontent.com/citguru/PyInquirer/master/docs/images/expand-prompt-2.png", "description_content_type": "", "docs_url": null, "download_url": "https://github.com/CITGuru/PyInquirer/archive/1.0.3.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/CITGuru/PyInquirer/", "keywords": "click,prompt-toolkit,cli,command-line,commandline,command-line-interface,python-inquiry,inquirer", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "PyInquirer", "package_url": "https://pypi.org/project/PyInquirer/", "platform": "", "project_url": "https://pypi.org/project/PyInquirer/", "project_urls": {"Download": "https://github.com/CITGuru/PyInquirer/archive/1.0.3.tar.gz", "Homepage": "https://github.com/CITGuru/PyInquirer/"}, "release_url": "https://pypi.org/project/PyInquirer/1.0.3/", "requires_dist": null, "requires_python": "", "summary": "A Python module for collection of common interactive command line user interfaces, based on Inquirer.js", "version": "1.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            PythonInquirer<br>==============<br><br>A collection of common interactive command line user interfaces. It is<br>originally called `whaaaaaat &lt;https://github.com/finklabs/whaaaaat&gt;`__<br>created by **finklabs**, but due to bad naming and in need of fixes, I<br>decided to rename and apply some necessary fixes on it. The reason is<br>because I needed it for a tool that can be install through PyPI. I need<br>to rewrite it for my own need. But don't worry any new fix on the main<br>Repo, will be added to it if needed. Lastly, I am currently working on<br>the author's TODO.<br><br>PyInquirer 1.0.3 Bugfix Update<br>-----------------<br><br>`PyInquirer 1.0.3 &lt;https://github.com/CITGuru/PyInquirer/releases/tag/1.0.3&gt;`<br><br><br>Table of Contents<br>-----------------<br><br>1. `Documentation &lt;#documentation&gt;`__<br><br>   1. `Installation &lt;#installation&gt;`__<br>   2. `Examples &lt;#examples&gt;`__<br>   3. `Quickstart &lt;#quickstart&gt;`__<br>   4. `Question Types &lt;#types&gt;`__<br>   5. `Question Properties &lt;#properties&gt;`__<br>   6. `User Interfaces and Styles &lt;#styles&gt;`__<br><br>2. `Windows Platform &lt;#windows&gt;`__<br>3. `Support &lt;#support&gt;`__<br>4. `Contribution &lt;#contribution&gt;`__<br>5. `Acknowledgments &lt;#acknowledgements&gt;`__<br>6. `License &lt;#license&gt;`__<br><br>Goal and Philosophy<br>-------------------<br><br>**PyInquirer** strives to be an easily embeddable and beautiful<br>command line interface for `Python &lt;https://python.org/&gt;`__.<br>**PyInquirer** wants to make it easy for existing Inquirer.js users<br>to write immersive command line applications in Python. We are convinced<br>that its feature-set is the most complete for building immersive CLI<br>applications. We also hope that **PyInquirer** proves itself useful<br>to Python users.<br><br>**PyInquirer** should ease the process of - providing *error<br>feedback* - *asking questions* - *parsing* input - *validating* answers<br>- managing *hierarchical prompts*<br><br>**Note:** **PyInquirer** provides the user interface and the inquiry<br>session flow. &gt;<br><br>Documentation<br>-------------<br><br>Installation<br>~~~~~~~~~~~~<br><br>Like most Python packages PyInquirer is available on `PyPi &lt;TODO&gt;`__.<br>Simply use pip to install the PyInquirer package<br><br>.. code:: shell<br><br>    pip install PyInquirer<br><br>In case you encounter any prompt\\_toolkit error, that means you've the<br>wrong prompt\\_toolkit version.<br><br>You can correct that by doing<br><br>.. code:: shell<br><br>    pip install prompt_toolkit==1.0.14<br><br>or download the wheel file from here:<br><br>.. code:: shell<br><br>    https://pypi.org/project/prompt_toolkit/1.0.14/#files<br><br>Quickstart<br>~~~~~~~~~~<br><br>Like Inquirer.js, using inquirer is structured into two simple steps:<br><br>-  you define a **list of questions** and hand them to **prompt**<br>-  promt returns a **list of answers**<br><br>.. code:: python<br><br>    from __future__ import print_function, unicode_literals<br>    from PyInquirer import prompt, print_json<br><br>    questions = [<br>        {<br>            'type': 'input',<br>            'name': 'first_name',<br>            'message': 'What\\'s your first name',<br>        }<br>    ]<br><br>    answers = prompt(questions)<br>    print_json(answers)  # use the answers as input for your app<br><br>A good starting point from here is probably the examples section.<br><br>Examples<br>~~~~~~~~<br><br>Most of the examples intend to demonstrate a single question type or<br>feature:<br><br>-  `editor.py &lt;./examples/editor.py&gt;`_<br>-  `expand.py &lt;./examples/expand.py&gt;`_<br>-  `list.py &lt;./examples/list.py&gt;`_<br>-  `password.py &lt;./examples/password.py&gt;`_<br>-  `when.py &lt;./examples/when.py&gt;`_<br>-  `checkbox.py &lt;./examples/checkbox.py&gt;`_<br>-  `confirm.py &lt;./examples/confirm.py&gt;`_<br>-  `hierarchical.py &lt;./examples/hierarchical.py&gt;`_<br>-  `pizza.py &lt;./examples/pizza.py&gt;`_ - demonstrate using different question types <br>-  `editor.py &lt;./examples/editor.py&gt;`_<br>-  `input.py  &lt;./examples/input.py&gt;`_<br>-  `rawlist.py &lt;./examples/rawlist.py&gt;`_<br><br>If you want to launch examples with the code from repository instead of<br>installing a package you need to execute ``pip install -e .`` within project<br>directory.<br><br>Question Types<br>~~~~~~~~~~~~~~<br><br>``questions`` is a list of questions. Each question has a type.<br><br>List - ``{type: 'list'}``<br>^^^^^^^^^^^^^^^^^^^^^^^^^<br><br>Take ``type``, ``name``, ``message``, ``choices``\\ [, ``default``,<br>``filter``] properties. (Note that default must be the choice ``index``<br>in the array or a choice ``value``)<br><br>|List prompt| s ---<br><br>Raw List - ``{type: 'rawlist'}``<br>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<br><br>Take ``type``, ``name``, ``message``, ``choices``\\ [, ``default``,<br>``filter``] properties. (Note that default must the choice ``index`` in<br>the array)<br><br>.. figure:: https://raw.githubusercontent.com/citguru/PyInquirer/master/docs/images/raw-list.png<br>   :alt: Raw list prompt<br><br>   Raw list prompt<br><br>--------------<br><br>Expand - ``{type: 'expand'}``<br>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<br><br>Take ``type``, ``name``, ``message``, ``choices``\\ [, ``default``]<br>properties. (Note that default must be the choice ``index`` in the<br>array. If ``default`` key not provided, then ``help`` will be used as<br>default choice)<br><br>Note that the ``choices`` object will take an extra parameter called<br>``key`` for the ``expand`` prompt. This parameter must be a single<br>(lowercased) character. The ``h`` option is added by the prompt and<br>shouldn't be defined by the user.<br><br>See ``examples/expand.py`` for a running example.<br><br>|Expand prompt closed| |Expand prompt expanded|<br><br>--------------<br><br>Checkbox - ``{type: 'checkbox'}``<br>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<br><br>Take ``type``, ``name``, ``message``, ``choices``\\ [, ``filter``,<br>``validate``, ``default``] properties. ``default`` is expected to be an<br>Array of the checked choices value.<br><br>Choices marked as ``{checked: true}`` will be checked by default.<br><br>Choices whose property ``disabled`` is truthy will be unselectable. If<br>``disabled`` is a string, then the string will be outputted next to the<br>disabled choice, otherwise it'll default to ``\"Disabled\"``. The<br>``disabled`` property can also be a synchronous function receiving the<br>current answers as argument and returning a boolean or a string.<br><br>.. figure:: https://raw.githubusercontent.com/citguru/PyInquirer/master/docs/images/checkbox-prompt.png<br>   :alt: Checkbox prompt<br><br>   Checkbox prompt<br><br>--------------<br><br>Confirm - ``{type: 'confirm'}``<br>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<br><br>Take ``type``, ``name``, ``message``\\ [, ``default``] properties.<br>``default`` is expected to be a boolean if used.<br><br>.. figure:: https://raw.githubusercontent.com/citguru/PyInquirer/master/docs/images/confirm-prompt.png<br>   :alt: Confirm prompt<br><br>   Confirm prompt<br><br>--------------<br><br>Input - ``{type: 'input'}``<br>^^^^^^^^^^^^^^^^^^^^^^^^^^^<br><br>Take ``type``, ``name``, ``message``\\ [, ``default``, ``filter``,<br>``validate``] properties.<br><br>.. figure:: https://raw.githubusercontent.com/citguru/PyInquirer/master/docs/images/input-prompt.png<br>   :alt: Input prompt<br><br>   Input prompt<br><br>--------------<br><br>Password - ``{type: 'password'}``<br>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<br><br>Take ``type``, ``name``, ``message``\\ [, ``default``, ``filter``,<br>``validate``] properties.<br><br>.. figure:: https://raw.githubusercontent.com/citguru/PyInquirer/master/docs/images/password-prompt.png<br>   :alt: Password prompt<br><br>   Password prompt<br><br>--------------<br><br>Editor - ``{type: 'editor'}``<br>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<br><br>Take ``type``, ``name``, ``message``\\ [, ``default``, ``filter``,<br>``validate``, ``eargs``] properties<br><br>### Editor Arguments - ``eargs``<br><br>Opens an empty or edits the default text in the defined editor.  If an editor is given<br>(should be the full path to the executable but the regular operating<br>system search path is used for finding the executable) it overrides<br>the detected editor.  Optionally, some environment variables can be<br>used.  If the editor is closed without changes, ``None`` is returned.  In<br>case a file is edited directly the return value is always ``None`` and<br>``save`` and ``ext`` are ignored.<br><br>Takes:<br><br>-  editor: accepts ``default`` to get the default platform editor. But <br>   you can also provide the path to an editor e.g ``vi``.<br>-  ext: the extension to tell the editor about. This defaults to `.txt` <br>   but changing this might change syntax highlighting e.g \".py\"<br>-  save: accepts ``True`` or ``False`` to determine to save a file.<br>-  filename: accepts the path of a file you'd like to edit.<br>-  env: accepts any given environment variables to pass to the editor<br><br>Launches an instance of the users preferred editor on a temporary file.<br>Once the user exits their editor, the contents of the temporary file are<br>read in as the result. The editor to use is determined by reading the<br>:math:``VISUAL or ``\\ EDITOR environment variables. If neither of those<br>are present, notepad (on Windows) or vim (Linux or Mac) is used.<br><br>Question Properties<br>~~~~~~~~~~~~~~~~~~~<br><br>A question is a dictionary containing question related values:<br><br>-  ``type``: (String) Type of the prompt. Defaults: input - Possible values:<br>   input, confirm, list, rawlist, expand, checkbox, password, editor<br>-  ``name``: (String) The name to use when storing the answer in the answers<br>   hash. If the name contains periods, it will define a path in the<br>   answers hash.<br>-  ``message``: (String\\|Function) The question to print. If defined as a<br>   function, the first parameter will be the current inquirer session<br>   answers.<br>-  ``default``: (String\\|Number\\|Array\\|Function) Default value(s) to use if<br>   nothing is entered, or a function that returns the default value(s).<br>   If defined as a function, the first parameter will be the current<br>   inquirer session answers.<br>-  ``choices``: (Array\\|Function) Choices array or a function returning a<br>   choices array. If defined as a function, the first parameter will be<br>   the current inquirer session answers. Array values can be simple<br>   strings, or objects containing a name (to display in list), a value<br>   (to save in the answers hash) and a short (to display after<br>   selection) properties. The choices array can also contain a<br>   Separator.<br>-  ``validate``: (Function) Receive the user input and should return true if<br>   the value is valid, and an error message (String) otherwise. If false<br>   is returned, a default error message is provided.<br>-  ``filter``: (Function) Receive the user input and return the filtered<br>   value to be used inside the program. The value returned will be added<br>   to the Answers hash.<br>-  ``when``: (Function, Boolean) Receive the current user answers hash and<br>   should return true or false depending on whether or not this question<br>   should be asked. The value can also be a simple boolean.<br>-  ``pageSize``: (Number) Change the number of lines that will be rendered<br>   when using list, rawList, expand or checkbox.<br><br>User Interfaces and Styles<br>~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>TODO<br><br>Windows Platform<br>----------------<br><br>**``PyInquirer``** is build on prompt\\_toolkit which is cross platform,<br>and everything that you build on top should run fine on both Unix and<br>Windows systems. On Windows, it uses a different event loop<br>(WaitForMultipleObjects instead of select), and another input and output<br>system. (Win32 APIs instead of pseudo-terminals and VT100.)<br><br>It's worth noting that the implementation is a \"best effort of what is<br>possible\". Both Unix and Windows terminals have their limitations. But<br>in general, the Unix experience will still be a little better.<br><br>For Windows, it's recommended to use either cmder or conemu.<br><br>Support<br>-------<br><br>Most of the questions are probably related to using a question type or<br>feature. Please lookup and study the appropriate examples.<br><br>Issue on Github TODO link<br><br>For many issues like for example common Python programming issues<br>stackoverflow might be a good place to search for an answer. TODO link<br><br>Contribution<br>------------<br><br>.. code:: shell<br><br>    $ git clone git@github.com:CITGuru/PyInquirer.git<br>    $ cd PyInquirer<br>    $ python -m venv venv<br>    $ source venv/bin/activate<br>    $ pip install --upgrade pip<br>    $ pip install -r requirements.txt<br>    $ pip install -r requirements_dev.txt<br><br>With an environment ready you can add new feature and check everything works<br>just fine<br><br>.. code:: shell<br><br>    $ pytest -sv tests/<br><br>That's it, now you can fork a project and submit PR with your change!<br><br>License<br>-------<br><br>Since I am not the owner, it all goes to Finklab<br><br>Copyright (c) 2016-2017 Mark Fink (twitter: @markfink)<br><br>Copyright (c) 2018 Oyetoke Toby (twitter: @oyetokeT)<br><br>Licensed under the MIT license.<br><br>.. |List prompt| image:: https://raw.githubusercontent.com/citguru/PyInquirer/master/docs/images/input-prompt.png<br>.. |Expand prompt closed| image:: https://raw.githubusercontent.com/citguru/PyInquirer/master/docs/images/expand-prompt-1.png<br>.. |Expand prompt expanded| image:: https://raw.githubusercontent.com/citguru/PyInquirer/master/docs/images/expand-prompt-2.png\n          </div>"}, "last_serial": 4518126, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "401dabaa892423d15ca8c17cf2852b7f", "sha256": "762fa721535d89e1f82f42f617a002c8f6da3f723b094d253591cd74a28f0052"}, "downloads": -1, "filename": "PyInquirer-1.0.0-py2-none-any.whl", "has_sig": false, "md5_digest": "401dabaa892423d15ca8c17cf2852b7f", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 20541, "upload_time": "2018-06-14T03:16:25", "upload_time_iso_8601": "2018-06-14T03:16:25.182720Z", "url": "https://files.pythonhosted.org/packages/04/04/769aa552a81e3d5d35ff0f7e727776b074e2530aaac7ef001674aaf54322/PyInquirer-1.0.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d7a4eac752c0cedf62249227acc27815", "sha256": "55ee8198264d7f4eb61e677cd8932fa61f90746db8c9414977a6818a091b9d22"}, "downloads": -1, "filename": "PyInquirer-1.0.0.tar.gz", "has_sig": false, "md5_digest": "d7a4eac752c0cedf62249227acc27815", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17075, "upload_time": "2018-06-14T03:16:27", "upload_time_iso_8601": "2018-06-14T03:16:27.024584Z", "url": "https://files.pythonhosted.org/packages/e8/7b/d48bdf04e6cfd937b72d7f4eb83f8dae722a1fea69661d4893ef7c4596e0/PyInquirer-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "1f88979ee000f5d4afba836a974ec344", "sha256": "7fa971cee4dfac6bc21de6e3ae31a85fd764e2887c06d0f0d01eb4410bee590f"}, "downloads": -1, "filename": "PyInquirer-1.0.1-py2-none-any.whl", "has_sig": false, "md5_digest": "1f88979ee000f5d4afba836a974ec344", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 20537, "upload_time": "2018-06-14T03:23:43", "upload_time_iso_8601": "2018-06-14T03:23:43.585595Z", "url": "https://files.pythonhosted.org/packages/8d/62/86eebe24f9ce9528c23af8ff019087df9a3613c1d274923c5af6b9edaabf/PyInquirer-1.0.1-py2-none-any.whl", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "bce32aab7480ed639d88a9033e1e6ba2", "sha256": "2723a2569b02b74d99c04ce830f2f3b3becad416ef8a7bf33b430afce4861270"}, "downloads": -1, "filename": "PyInquirer-1.0.2-py2.7.egg", "has_sig": false, "md5_digest": "bce32aab7480ed639d88a9033e1e6ba2", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 67765, "upload_time": "2018-11-22T19:22:12", "upload_time_iso_8601": "2018-11-22T19:22:12.260702Z", "url": "https://files.pythonhosted.org/packages/c3/5a/72ba80e5fa8f697babf175d26c911cbc8277cd1f0e6a3043d8192b89b8f6/PyInquirer-1.0.2-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "25812d78e77d468bacd8c0ebaaae10e5", "sha256": "3b25f84ecf147c06fd9606a43fd5c2aa6b0131f82df6cf4a015397f0366bd17f"}, "downloads": -1, "filename": "PyInquirer-1.0.2-py2-none-any.whl", "has_sig": false, "md5_digest": "25812d78e77d468bacd8c0ebaaae10e5", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 25536, "upload_time": "2018-07-20T11:35:11", "upload_time_iso_8601": "2018-07-20T11:35:11.582683Z", "url": "https://files.pythonhosted.org/packages/8a/21/81336b1fdac2040bd8d19ec0be5f8a272cac7dca41c26bff4976334db961/PyInquirer-1.0.2-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5306cd57fd607643f3666c974a9f4fa2", "sha256": "24297de0dea639d8427447753d9e4c7e584e0fdb048bf61703de9ff1f28394b2"}, "downloads": -1, "filename": "PyInquirer-1.0.2.tar.gz", "has_sig": false, "md5_digest": "5306cd57fd607643f3666c974a9f4fa2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16778, "upload_time": "2018-07-20T11:35:13", "upload_time_iso_8601": "2018-07-20T11:35:13.360169Z", "url": "https://files.pythonhosted.org/packages/a1/d6/96bbc6eed40ef0b8b2dbe0da29a60130baff741091326760fb9f286a7929/PyInquirer-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "cda6c0524edb68fbda9850a98e4db2df", "sha256": "c9a92d68d7727fbd886a7908c08fd9e9773e5dc211bf5cbf836ba90d366dee51"}, "downloads": -1, "filename": "PyInquirer-1.0.3.tar.gz", "has_sig": false, "md5_digest": "cda6c0524edb68fbda9850a98e4db2df", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27980, "upload_time": "2018-11-22T19:22:15", "upload_time_iso_8601": "2018-11-22T19:22:15.215456Z", "url": "https://files.pythonhosted.org/packages/fb/4c/434b7c454010a284b49d6f1d446fe8dc5960415613d8c0225b9e2efb6724/PyInquirer-1.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "cda6c0524edb68fbda9850a98e4db2df", "sha256": "c9a92d68d7727fbd886a7908c08fd9e9773e5dc211bf5cbf836ba90d366dee51"}, "downloads": -1, "filename": "PyInquirer-1.0.3.tar.gz", "has_sig": false, "md5_digest": "cda6c0524edb68fbda9850a98e4db2df", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27980, "upload_time": "2018-11-22T19:22:15", "upload_time_iso_8601": "2018-11-22T19:22:15.215456Z", "url": "https://files.pythonhosted.org/packages/fb/4c/434b7c454010a284b49d6f1d446fe8dc5960415613d8c0225b9e2efb6724/PyInquirer-1.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:04:00 2020"}