{"info": {"author": "LinOnetwo", "author_email": "linonetwo012@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Intended Audience :: Information Technology", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Text Processing", "Topic :: Text Processing :: Filters", "Topic :: Text Processing :: Linguistic", "Typing :: Typed"], "description": "# Automata Tools\n\nTools to build automata from your custom rule.\n\nThis package provides a set of handy tools to programmatically build automata, so you can build NFA\u3001DFA\u3001MinimizedDFA\u3001WFA from any custom rules.\n\n## Usage\n\n### Install\n\n```shell\nconda install -c conda-forge automata-tools # not available yet\n# or\npip install automata-tools\n```\n\n### Import\n\nSee example in [examples/NFAfromCustomRule.py](examples/NFAfromCustomRule.py)\n\n```python\nfrom typing import List\nfrom automata_tools import BuildAutomata, Automata\n\nautomata: List[Automata] = []\n```\n\n### BuildAutomata\n\n#### characterStruct\n\nBuild simple `(0)-[a]->(1)` automata\n\n```python\nautomata.append(BuildAutomata.characterStruct(char))\n```\n\n#### unionStruct\n\nBuild automata that is an \"or\" of two sub-automata `(1)<-[a]-(0)-[b]->(1)`\n\n```python\n# to match \"a|b\"\na = automata.pop()\nb = automata.pop()\nif operator == \"|\":\n    automata.append(BuildAutomata.unionStruct(b, a))\n```\n\n#### concatenationStruct\n\nBuild automata that is an \"and\" of two sub-automata `(0)-[a]->(1)-[b]->(2)`\n\n```python\n# to match \"ab\"\na = automata.pop()\nb = automata.pop()\nautomata.append(BuildAutomata.concatenationStruct(b, a))\n```\n\n#### starStruct\n\nBuild automata that looks like the \"Kleene closure\"\n\n```python\n# to match \"a*\"\nif operator == \"*\":\n    a = automata.pop()\n    automata.append(BuildAutomata.starStruct(a))\n```\n\n#### skipStruct\n\nBuild automata that looks like the \"Kleene closure\" but without the loop back `(1)<-[\u03b5]-(2)`, so it only match the token once at most.\n\n```python\n# to match \"a*\"\nif operator == \"?\":\n    a = automata.pop()\n    automata.append(BuildAutomata.skipStruct(a))\n```\n\n#### repeatRangeStruct\n\nBuild automata that will match the same token for several times `(0)-[a]->(1)-[a]->(2)-[a]->(3)`\n\n```python\n# to match \"a{3}\"\nrepeatedAutomata = BuildAutomata.repeatStruct(automata, 3)\n```\n\n#### repeatStruct\n\nBuild automata that will match the same token for n to m times\n\n`(0)-[a]->(1)-[a]->(4), (0)-[a]->(2)-[a]->(3)-[a]->(4)`\n\n```python\n# to match \"a{2,3}\"\nrepeatedAutomata = BuildAutomata.repeatRangeStruct(automata, 2, 3)\n```\n\n### Automata\n\nSee example in [features/steps/customRule.py](features/steps/customRule.py)\n\n```python\nfrom automata_tools import DFAFromNFA, Automata\n\nfrom your_implementation import NFAFromRegex, executor\n\nnfa: Automata = NFAFromRegex().buildNFA(rule)\nminDFA: Automata = DFAFromNFA(nfa).getMinimizedDFA()\nminDFA.setExecuter(executor)\n\nprint(minDFA.execute(someText))\n```\n\nwhere `executor` is a function like the one in [examples/NFAfromCustomRule.py](examples/NFAfromCustomRule.py):\n\n```python\ndef executor(tokens, startState, finalStates, transitions):\n    return True\n```\n\n#### setExecuter\n\nSet an executor to the automata that can freely use state and transition of the automata, and return a boolean value.\n\n```python\nfrom automata_tools import IAutomataExecutor\n\ndefaultExecuter: IAutomataExecutor = lambda tokens, startState, finalStates, transitions: True\nminDFA.setExecuter(defaultExecuter)\n```\n\n#### setTokenizer\n\nSet an tokenizer to the automata that can transform string to list of string token, which will be used by the executer.\n\n```python\nminDFA.setExecuter(lambda input: input.split(' ')[::-1])\n```\n\n### NFAtoDFA\n\nMake automata state transitions not so ambiguous\n\n```python\nnfa = NFAFromRegex().buildNFA(rule)\ndfa = NFAtoDFA(nfa)\n```\n\n### DFAtoMinimizedDFA\n\nAllow you minify Automata state\n\n```python\nnfa = NFAFromRegex().buildNFA(rule)\nminDFA = DFAtoMinimizedDFA(NFAtoDFA(nfa))\n```\n\n### Weighted Finite Automata\n\nWFA, it can execute automata use matrix multiplication, so it can be very fast compare to brute force execution, especially when state space is large.\n\n```python\nfrom automata_tools import WFA, get_word_to_index\n\n_, wordToIndex = get_word_to_index([ruleParser(context.rule), tokenizer(text)])\nwfa = WFA(minDFA, wordToIndex, dfa_to_tensor)\nwfa.execute(text)\n```\n\n#### get_word_to_index\n\nGiven `[['token', 'another'], ['token_in_rule']]`, return something like\n\n```python\n{'token': 0, 'another': 1, ...}\n```\n\nSo we can translate automata state to a matrix.\n\n#### WFA\n\nGiven an automata, a word index like `{'token': 0, 'another': 1, ...}`, and a function that transform automata to tensor (see example at [customRuleDFAToTensor](examples/customRuleDFAToTensor.py)), return a WFA instance.\n\n## Development\n\n### Environment\n\nCreate environment from the text file:\n\n```shell\nconda env create --file automataTools-env.txt\nconda activate automataTools\n```\n\nSave env file: `conda list --explicit > automataTools-env.txt`\n\n### Python Path\n\nCreate a `.env` file with content `PYTHONPATH=automataTools`\n\n### Publish\n\nTo pypi\n\n```shell\nrm -rf ./dist && rm -rf ./build && rm -rf ./automata_tools.egg-info && python3 setup.py sdist bdist_wheel && twine upload dist/*\n```\n\nTo Conda\n\n```shell\n# I'm learning how to do...\n```\n\n## Resources\n\n[Automata Theory Course Slides](http://www.cs.may.ie/staff/jpower/Courses/Previous/parsing/node5.html)\n\nProbably the original reference [source](https://github.com/sdht0/automata-from-regex)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/linonetwo/automata-tools", "keywords": "regex automata nlp regular expression state machine NFA DFA", "license": "", "maintainer": "", "maintainer_email": "", "name": "automata-tools", "package_url": "https://pypi.org/project/automata-tools/", "platform": "", "project_url": "https://pypi.org/project/automata-tools/", "project_urls": {"Bug Reports": "https://github.com/linonetwo/automata-tools/issues", "Homepage": "https://github.com/linonetwo/automata-tools", "Source": "https://github.com/linonetwo/automata-tools/"}, "release_url": "https://pypi.org/project/automata-tools/2.0.1/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Tools to build automata from your custom rule", "version": "2.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Automata Tools</h1>\n<p>Tools to build automata from your custom rule.</p>\n<p>This package provides a set of handy tools to programmatically build automata, so you can build NFA\u3001DFA\u3001MinimizedDFA\u3001WFA from any custom rules.</p>\n<h2>Usage</h2>\n<h3>Install</h3>\n<pre>conda install -c conda-forge automata-tools <span class=\"c1\"># not available yet</span>\n<span class=\"c1\"># or</span>\npip install automata-tools\n</pre>\n<h3>Import</h3>\n<p>See example in <a href=\"examples/NFAfromCustomRule.py\" rel=\"nofollow\">examples/NFAfromCustomRule.py</a></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">List</span>\n<span class=\"kn\">from</span> <span class=\"nn\">automata_tools</span> <span class=\"kn\">import</span> <span class=\"n\">BuildAutomata</span><span class=\"p\">,</span> <span class=\"n\">Automata</span>\n\n<span class=\"n\">automata</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Automata</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n</pre>\n<h3>BuildAutomata</h3>\n<h4>characterStruct</h4>\n<p>Build simple <code>(0)-[a]-&gt;(1)</code> automata</p>\n<pre><span class=\"n\">automata</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">BuildAutomata</span><span class=\"o\">.</span><span class=\"n\">characterStruct</span><span class=\"p\">(</span><span class=\"n\">char</span><span class=\"p\">))</span>\n</pre>\n<h4>unionStruct</h4>\n<p>Build automata that is an \"or\" of two sub-automata <code>(1)&lt;-[a]-(0)-[b]-&gt;(1)</code></p>\n<pre><span class=\"c1\"># to match \"a|b\"</span>\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">automata</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span>\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">automata</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span>\n<span class=\"k\">if</span> <span class=\"n\">operator</span> <span class=\"o\">==</span> <span class=\"s2\">\"|\"</span><span class=\"p\">:</span>\n    <span class=\"n\">automata</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">BuildAutomata</span><span class=\"o\">.</span><span class=\"n\">unionStruct</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">))</span>\n</pre>\n<h4>concatenationStruct</h4>\n<p>Build automata that is an \"and\" of two sub-automata <code>(0)-[a]-&gt;(1)-[b]-&gt;(2)</code></p>\n<pre><span class=\"c1\"># to match \"ab\"</span>\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">automata</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span>\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">automata</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span>\n<span class=\"n\">automata</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">BuildAutomata</span><span class=\"o\">.</span><span class=\"n\">concatenationStruct</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">))</span>\n</pre>\n<h4>starStruct</h4>\n<p>Build automata that looks like the \"Kleene closure\"</p>\n<pre><span class=\"c1\"># to match \"a*\"</span>\n<span class=\"k\">if</span> <span class=\"n\">operator</span> <span class=\"o\">==</span> <span class=\"s2\">\"*\"</span><span class=\"p\">:</span>\n    <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">automata</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span>\n    <span class=\"n\">automata</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">BuildAutomata</span><span class=\"o\">.</span><span class=\"n\">starStruct</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">))</span>\n</pre>\n<h4>skipStruct</h4>\n<p>Build automata that looks like the \"Kleene closure\" but without the loop back <code>(1)&lt;-[\u03b5]-(2)</code>, so it only match the token once at most.</p>\n<pre><span class=\"c1\"># to match \"a*\"</span>\n<span class=\"k\">if</span> <span class=\"n\">operator</span> <span class=\"o\">==</span> <span class=\"s2\">\"?\"</span><span class=\"p\">:</span>\n    <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">automata</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span>\n    <span class=\"n\">automata</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">BuildAutomata</span><span class=\"o\">.</span><span class=\"n\">skipStruct</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">))</span>\n</pre>\n<h4>repeatRangeStruct</h4>\n<p>Build automata that will match the same token for several times <code>(0)-[a]-&gt;(1)-[a]-&gt;(2)-[a]-&gt;(3)</code></p>\n<pre><span class=\"c1\"># to match \"a{3}\"</span>\n<span class=\"n\">repeatedAutomata</span> <span class=\"o\">=</span> <span class=\"n\">BuildAutomata</span><span class=\"o\">.</span><span class=\"n\">repeatStruct</span><span class=\"p\">(</span><span class=\"n\">automata</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n</pre>\n<h4>repeatStruct</h4>\n<p>Build automata that will match the same token for n to m times</p>\n<p><code>(0)-[a]-&gt;(1)-[a]-&gt;(4), (0)-[a]-&gt;(2)-[a]-&gt;(3)-[a]-&gt;(4)</code></p>\n<pre><span class=\"c1\"># to match \"a{2,3}\"</span>\n<span class=\"n\">repeatedAutomata</span> <span class=\"o\">=</span> <span class=\"n\">BuildAutomata</span><span class=\"o\">.</span><span class=\"n\">repeatRangeStruct</span><span class=\"p\">(</span><span class=\"n\">automata</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n</pre>\n<h3>Automata</h3>\n<p>See example in <a href=\"features/steps/customRule.py\" rel=\"nofollow\">features/steps/customRule.py</a></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">automata_tools</span> <span class=\"kn\">import</span> <span class=\"n\">DFAFromNFA</span><span class=\"p\">,</span> <span class=\"n\">Automata</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">your_implementation</span> <span class=\"kn\">import</span> <span class=\"n\">NFAFromRegex</span><span class=\"p\">,</span> <span class=\"n\">executor</span>\n\n<span class=\"n\">nfa</span><span class=\"p\">:</span> <span class=\"n\">Automata</span> <span class=\"o\">=</span> <span class=\"n\">NFAFromRegex</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">buildNFA</span><span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"p\">)</span>\n<span class=\"n\">minDFA</span><span class=\"p\">:</span> <span class=\"n\">Automata</span> <span class=\"o\">=</span> <span class=\"n\">DFAFromNFA</span><span class=\"p\">(</span><span class=\"n\">nfa</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">getMinimizedDFA</span><span class=\"p\">()</span>\n<span class=\"n\">minDFA</span><span class=\"o\">.</span><span class=\"n\">setExecuter</span><span class=\"p\">(</span><span class=\"n\">executor</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">minDFA</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"n\">someText</span><span class=\"p\">))</span>\n</pre>\n<p>where <code>executor</code> is a function like the one in <a href=\"examples/NFAfromCustomRule.py\" rel=\"nofollow\">examples/NFAfromCustomRule.py</a>:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">executor</span><span class=\"p\">(</span><span class=\"n\">tokens</span><span class=\"p\">,</span> <span class=\"n\">startState</span><span class=\"p\">,</span> <span class=\"n\">finalStates</span><span class=\"p\">,</span> <span class=\"n\">transitions</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"kc\">True</span>\n</pre>\n<h4>setExecuter</h4>\n<p>Set an executor to the automata that can freely use state and transition of the automata, and return a boolean value.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">automata_tools</span> <span class=\"kn\">import</span> <span class=\"n\">IAutomataExecutor</span>\n\n<span class=\"n\">defaultExecuter</span><span class=\"p\">:</span> <span class=\"n\">IAutomataExecutor</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">tokens</span><span class=\"p\">,</span> <span class=\"n\">startState</span><span class=\"p\">,</span> <span class=\"n\">finalStates</span><span class=\"p\">,</span> <span class=\"n\">transitions</span><span class=\"p\">:</span> <span class=\"kc\">True</span>\n<span class=\"n\">minDFA</span><span class=\"o\">.</span><span class=\"n\">setExecuter</span><span class=\"p\">(</span><span class=\"n\">defaultExecuter</span><span class=\"p\">)</span>\n</pre>\n<h4>setTokenizer</h4>\n<p>Set an tokenizer to the automata that can transform string to list of string token, which will be used by the executer.</p>\n<pre><span class=\"n\">minDFA</span><span class=\"o\">.</span><span class=\"n\">setExecuter</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"nb\">input</span><span class=\"p\">:</span> <span class=\"nb\">input</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">' '</span><span class=\"p\">)[::</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n</pre>\n<h3>NFAtoDFA</h3>\n<p>Make automata state transitions not so ambiguous</p>\n<pre><span class=\"n\">nfa</span> <span class=\"o\">=</span> <span class=\"n\">NFAFromRegex</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">buildNFA</span><span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"p\">)</span>\n<span class=\"n\">dfa</span> <span class=\"o\">=</span> <span class=\"n\">NFAtoDFA</span><span class=\"p\">(</span><span class=\"n\">nfa</span><span class=\"p\">)</span>\n</pre>\n<h3>DFAtoMinimizedDFA</h3>\n<p>Allow you minify Automata state</p>\n<pre><span class=\"n\">nfa</span> <span class=\"o\">=</span> <span class=\"n\">NFAFromRegex</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">buildNFA</span><span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"p\">)</span>\n<span class=\"n\">minDFA</span> <span class=\"o\">=</span> <span class=\"n\">DFAtoMinimizedDFA</span><span class=\"p\">(</span><span class=\"n\">NFAtoDFA</span><span class=\"p\">(</span><span class=\"n\">nfa</span><span class=\"p\">))</span>\n</pre>\n<h3>Weighted Finite Automata</h3>\n<p>WFA, it can execute automata use matrix multiplication, so it can be very fast compare to brute force execution, especially when state space is large.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">automata_tools</span> <span class=\"kn\">import</span> <span class=\"n\">WFA</span><span class=\"p\">,</span> <span class=\"n\">get_word_to_index</span>\n\n<span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">wordToIndex</span> <span class=\"o\">=</span> <span class=\"n\">get_word_to_index</span><span class=\"p\">([</span><span class=\"n\">ruleParser</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">rule</span><span class=\"p\">),</span> <span class=\"n\">tokenizer</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">)])</span>\n<span class=\"n\">wfa</span> <span class=\"o\">=</span> <span class=\"n\">WFA</span><span class=\"p\">(</span><span class=\"n\">minDFA</span><span class=\"p\">,</span> <span class=\"n\">wordToIndex</span><span class=\"p\">,</span> <span class=\"n\">dfa_to_tensor</span><span class=\"p\">)</span>\n<span class=\"n\">wfa</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">)</span>\n</pre>\n<h4>get_word_to_index</h4>\n<p>Given <code>[['token', 'another'], ['token_in_rule']]</code>, return something like</p>\n<pre><span class=\"p\">{</span><span class=\"s1\">'token'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">'another'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">}</span>\n</pre>\n<p>So we can translate automata state to a matrix.</p>\n<h4>WFA</h4>\n<p>Given an automata, a word index like <code>{'token': 0, 'another': 1, ...}</code>, and a function that transform automata to tensor (see example at <a href=\"examples/customRuleDFAToTensor.py\" rel=\"nofollow\">customRuleDFAToTensor</a>), return a WFA instance.</p>\n<h2>Development</h2>\n<h3>Environment</h3>\n<p>Create environment from the text file:</p>\n<pre>conda env create --file automataTools-env.txt\nconda activate automataTools\n</pre>\n<p>Save env file: <code>conda list --explicit &gt; automataTools-env.txt</code></p>\n<h3>Python Path</h3>\n<p>Create a <code>.env</code> file with content <code>PYTHONPATH=automataTools</code></p>\n<h3>Publish</h3>\n<p>To pypi</p>\n<pre>rm -rf ./dist <span class=\"o\">&amp;&amp;</span> rm -rf ./build <span class=\"o\">&amp;&amp;</span> rm -rf ./automata_tools.egg-info <span class=\"o\">&amp;&amp;</span> python3 setup.py sdist bdist_wheel <span class=\"o\">&amp;&amp;</span> twine upload dist/*\n</pre>\n<p>To Conda</p>\n<pre><span class=\"c1\"># I'm learning how to do...</span>\n</pre>\n<h2>Resources</h2>\n<p><a href=\"http://www.cs.may.ie/staff/jpower/Courses/Previous/parsing/node5.html\" rel=\"nofollow\">Automata Theory Course Slides</a></p>\n<p>Probably the original reference <a href=\"https://github.com/sdht0/automata-from-regex\" rel=\"nofollow\">source</a></p>\n\n          </div>"}, "last_serial": 6810759, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "68c7e2bf36eee813cf52c750682bac6c", "sha256": "a03751b0278317d68a9722f4611e453f5511bf0abc7f1b8caaadf3455c5f27f4"}, "downloads": -1, "filename": "automata_tools-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "68c7e2bf36eee813cf52c750682bac6c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 2516, "upload_time": "2020-03-01T02:15:49", "upload_time_iso_8601": "2020-03-01T02:15:49.109140Z", "url": "https://files.pythonhosted.org/packages/a2/ba/b17c18740a5d2db1689087fdc8a3b3684ce2ae5c9d40a8fec1f03b6a04a9/automata_tools-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2c49742c941e67c2fdd8cd285ac26c08", "sha256": "38d21068c55440af523b0e79044f177a98caa752507e3c88509b009a844596a4"}, "downloads": -1, "filename": "automata-tools-1.0.0.tar.gz", "has_sig": false, "md5_digest": "2c49742c941e67c2fdd8cd285ac26c08", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 4455, "upload_time": "2020-03-01T02:15:51", "upload_time_iso_8601": "2020-03-01T02:15:51.442859Z", "url": "https://files.pythonhosted.org/packages/d8/51/380d9c9ec6c5b9afed38570300e34ce9d4169571bb225a0313fd769c1ea0/automata-tools-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "e61a0cfb986e1a4014e5192801177571", "sha256": "4f211fcfabf4c6e7cfc9ceae04e1d295f2a53575b012f0e3a09122672ec827fe"}, "downloads": -1, "filename": "automata_tools-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e61a0cfb986e1a4014e5192801177571", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 3594, "upload_time": "2020-03-01T03:59:12", "upload_time_iso_8601": "2020-03-01T03:59:12.480115Z", "url": "https://files.pythonhosted.org/packages/65/44/0d39fc3c78969d7447aa4f81b49c9a4bef45abd19117b534c81e541cf587/automata_tools-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8e2bae1f382a87eb533cb81c430f44fc", "sha256": "46f0170ded9a8992e3fe709210e124c1b6f8bab37563e510a4c94f3ce007207e"}, "downloads": -1, "filename": "automata-tools-1.0.1.tar.gz", "has_sig": false, "md5_digest": "8e2bae1f382a87eb533cb81c430f44fc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5864, "upload_time": "2020-03-01T03:59:14", "upload_time_iso_8601": "2020-03-01T03:59:14.435908Z", "url": "https://files.pythonhosted.org/packages/83/74/029936c7f8bb0a318345ae5e71a0557bd920ac53bc11bfa552af86b54bef/automata-tools-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "4b241d3c81bf6d098384a11d8c5aa66a", "sha256": "c4904a347a5aa3a52ded417468e9f7f0d6d87c3255ff2c1ebdedcfb081386676"}, "downloads": -1, "filename": "automata_tools-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "4b241d3c81bf6d098384a11d8c5aa66a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 10181, "upload_time": "2020-03-01T04:16:45", "upload_time_iso_8601": "2020-03-01T04:16:45.382714Z", "url": "https://files.pythonhosted.org/packages/07/75/997c9c5a9be1adb0fb024410ef8cead8acc8708b089879e630f808b2452f/automata_tools-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "83696c865346629218822c5bf442adf9", "sha256": "a0c15761d6523f628262826b5f1e0c06d4077397f190052233eccf51a250714b"}, "downloads": -1, "filename": "automata-tools-1.0.2.tar.gz", "has_sig": false, "md5_digest": "83696c865346629218822c5bf442adf9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12589, "upload_time": "2020-03-01T04:16:47", "upload_time_iso_8601": "2020-03-01T04:16:47.098784Z", "url": "https://files.pythonhosted.org/packages/85/fe/558f2ff0dde862ec53ef20594e0fa0ed72d0895a8f6ef69ce29d49e2a90c/automata-tools-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "ddf48382393ae7163a105c9f07284073", "sha256": "819f425c4a56f9c7512b324795ae109af1e4f00da721b9ea30b71b36818a52cb"}, "downloads": -1, "filename": "automata_tools-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "ddf48382393ae7163a105c9f07284073", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 3631, "upload_time": "2020-03-01T04:46:33", "upload_time_iso_8601": "2020-03-01T04:46:33.265986Z", "url": "https://files.pythonhosted.org/packages/7e/0f/469762eef74a02984e1e4c7c4119e3b2c49e4d381eea9032e539cd5d5a26/automata_tools-1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5c8b0a771e9ec1eb07fcbc0f224d8096", "sha256": "1bc60a5699a0dc1592bd901b892a936e0d4e7d096cca56f65e12bad53a8f331b"}, "downloads": -1, "filename": "automata-tools-1.0.3.tar.gz", "has_sig": false, "md5_digest": "5c8b0a771e9ec1eb07fcbc0f224d8096", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5915, "upload_time": "2020-03-01T04:46:34", "upload_time_iso_8601": "2020-03-01T04:46:34.959380Z", "url": "https://files.pythonhosted.org/packages/22/24/03ce5ef1179e41a3045d65b2f2cbc9c85c7e0e7539ad33fee91d27307228/automata-tools-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "72cd9f207b9347e27cbfca3f2b525957", "sha256": "ef2a391320bbefe435be19a82e7f7d293e6766dbb8f708a4aaf592d9f2283655"}, "downloads": -1, "filename": "automata_tools-1.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "72cd9f207b9347e27cbfca3f2b525957", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 3632, "upload_time": "2020-03-01T04:50:52", "upload_time_iso_8601": "2020-03-01T04:50:52.450542Z", "url": "https://files.pythonhosted.org/packages/f3/62/d680272de143b91ca3876380c518e8e35ca306f7da5a4adc7343bf36760c/automata_tools-1.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f7c43484069421cd37d3111a3db209da", "sha256": "81792269733eba87cf08cae5fe996b555cc1dd692712606069c9d460d7007fd2"}, "downloads": -1, "filename": "automata-tools-1.0.4.tar.gz", "has_sig": false, "md5_digest": "f7c43484069421cd37d3111a3db209da", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5905, "upload_time": "2020-03-01T04:50:53", "upload_time_iso_8601": "2020-03-01T04:50:53.964026Z", "url": "https://files.pythonhosted.org/packages/4f/24/39ab8413c8d65fe952746d343bbd204b3f8d84803c5cbbf51ceafadaea65/automata-tools-1.0.4.tar.gz", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "1a4c320275a000bd0ff99cfa7e794648", "sha256": "f10aad3e9cf6e0f3b5c90fad0863da74c6b7c217f77d11f40989aa750798b45c"}, "downloads": -1, "filename": "automata_tools-1.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "1a4c320275a000bd0ff99cfa7e794648", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 3630, "upload_time": "2020-03-01T05:02:11", "upload_time_iso_8601": "2020-03-01T05:02:11.979764Z", "url": "https://files.pythonhosted.org/packages/35/bb/6c785ec7f5b72d7d70d7929398ac66deed741098c499119a3d0ac215e5ef/automata_tools-1.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e6a252c2b5af5f126d53b41b91cae724", "sha256": "5c253bad1aa6f11783dc1f9e686ab3b10254dccd783eb145078aeb4cfb766315"}, "downloads": -1, "filename": "automata-tools-1.0.5.tar.gz", "has_sig": false, "md5_digest": "e6a252c2b5af5f126d53b41b91cae724", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5883, "upload_time": "2020-03-01T05:02:13", "upload_time_iso_8601": "2020-03-01T05:02:13.677350Z", "url": "https://files.pythonhosted.org/packages/1b/45/5d1ebba88608fe33ce9273546940d0e1a7221c9ce488494d4c751532f50d/automata-tools-1.0.5.tar.gz", "yanked": false}], "1.0.6": [{"comment_text": "", "digests": {"md5": "6f146d837671a4cff2b62b0784055202", "sha256": "f4b8444ff3e59295c17c174dc8b72ab0b5c74b536166fca80853a0985fad5ae8"}, "downloads": -1, "filename": "automata_tools-1.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "6f146d837671a4cff2b62b0784055202", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 10532, "upload_time": "2020-03-01T05:15:30", "upload_time_iso_8601": "2020-03-01T05:15:30.361882Z", "url": "https://files.pythonhosted.org/packages/b3/c4/68ecd72fd38db49f522287e09d3e6d04a60145b15b34367b46f53205367c/automata_tools-1.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2d5584026db6fe20ea259a7b4ab74899", "sha256": "d6f65e2a14a332a1ff1e9f54aa4eea4268290cef76b3e5b7118c1f1af9989210"}, "downloads": -1, "filename": "automata-tools-1.0.6.tar.gz", "has_sig": false, "md5_digest": "2d5584026db6fe20ea259a7b4ab74899", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 11292, "upload_time": "2020-03-01T05:15:34", "upload_time_iso_8601": "2020-03-01T05:15:34.064943Z", "url": "https://files.pythonhosted.org/packages/45/44/7a10781224dd66d186c371db2b549fd65de442d76dea953699a0a916121c/automata-tools-1.0.6.tar.gz", "yanked": false}], "1.0.7": [{"comment_text": "", "digests": {"md5": "bcc773221f50ceeb37d865e7e292ee4d", "sha256": "5d5b6aebb380f78acb9b6332c62d38fea8f84c6129657239a1fc6f9fe54ad011"}, "downloads": -1, "filename": "automata_tools-1.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "bcc773221f50ceeb37d865e7e292ee4d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 17059, "upload_time": "2020-03-01T05:22:58", "upload_time_iso_8601": "2020-03-01T05:22:58.482965Z", "url": "https://files.pythonhosted.org/packages/3e/d9/b6df7cc2d251f3471390c1525e49b10fe82fd7492e18f390608e8af0c685/automata_tools-1.0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "95ce2380f9704e100ef9ab8f9a4c24eb", "sha256": "96e1ad15f1b6af283f0935e6958f03f910268d6ac1e1b4b108ac779877d034a4"}, "downloads": -1, "filename": "automata-tools-1.0.7.tar.gz", "has_sig": false, "md5_digest": "95ce2380f9704e100ef9ab8f9a4c24eb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 16396, "upload_time": "2020-03-01T05:23:02", "upload_time_iso_8601": "2020-03-01T05:23:02.987930Z", "url": "https://files.pythonhosted.org/packages/ab/b9/80724ccf7b45dd7bf0b14019274d2f1fb6d7b84ddca0b6c6cd8b42ccb9cc/automata-tools-1.0.7.tar.gz", "yanked": false}], "1.0.8": [{"comment_text": "", "digests": {"md5": "0e6d28441caf46c612e8f9db46ed2bad", "sha256": "6aba08b08030167f596c95a17eba29766ee33a8c38efe34c594557195046b418"}, "downloads": -1, "filename": "automata_tools-1.0.8-py3-none-any.whl", "has_sig": false, "md5_digest": "0e6d28441caf46c612e8f9db46ed2bad", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 17080, "upload_time": "2020-03-09T07:50:01", "upload_time_iso_8601": "2020-03-09T07:50:01.723702Z", "url": "https://files.pythonhosted.org/packages/5e/2e/3b4505b6e8bca2d925ae333bc15c65c98beb8c55af8faf45a28313dc1fed/automata_tools-1.0.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c8c209f6f6c494071aa278c004c5f931", "sha256": "8875ffb23ee8a12bded96067a7b2550aa118b85800d035a759f7828d2415adec"}, "downloads": -1, "filename": "automata-tools-1.0.8.tar.gz", "has_sig": false, "md5_digest": "c8c209f6f6c494071aa278c004c5f931", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 17404, "upload_time": "2020-03-09T07:50:03", "upload_time_iso_8601": "2020-03-09T07:50:03.758399Z", "url": "https://files.pythonhosted.org/packages/ee/cd/33e6eb3147fc595af19a05fbaae02fd1b15bc68af2ae783dc5f7ed95676d/automata-tools-1.0.8.tar.gz", "yanked": false}], "1.0.9": [{"comment_text": "", "digests": {"md5": "96f2d4ee0ae4da6052c6285b21f048ad", "sha256": "fb8e3774475866f88ba79aabc3139e839b76a458a2571366f659d54c56870cb4"}, "downloads": -1, "filename": "automata_tools-1.0.9-py3-none-any.whl", "has_sig": false, "md5_digest": "96f2d4ee0ae4da6052c6285b21f048ad", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 18529, "upload_time": "2020-03-13T09:09:29", "upload_time_iso_8601": "2020-03-13T09:09:29.397346Z", "url": "https://files.pythonhosted.org/packages/b4/68/0ae2f9accfd33a2e1ade03f1c38b50d54f25d9d8ce024febe4ec2a24bddd/automata_tools-1.0.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0f5c79f5db1810c21f60e8f55489b5a8", "sha256": "d436ddf26aa96d3953b5d14bba3329b8111c0439feba0cb849cd08b96470933a"}, "downloads": -1, "filename": "automata-tools-1.0.9.tar.gz", "has_sig": false, "md5_digest": "0f5c79f5db1810c21f60e8f55489b5a8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 18674, "upload_time": "2020-03-13T09:09:31", "upload_time_iso_8601": "2020-03-13T09:09:31.012609Z", "url": "https://files.pythonhosted.org/packages/2c/91/4b58c1895615cf917f97311f55b7d194083e49f61f8404ff98d9453052b7/automata-tools-1.0.9.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "52914da8166dcf2520e1ba993101c8fd", "sha256": "42c359b63a69456967642b2867c2c6a28245f474ffd9814fac857a44bc6d0356"}, "downloads": -1, "filename": "automata_tools-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "52914da8166dcf2520e1ba993101c8fd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 11671, "upload_time": "2020-03-13T09:15:25", "upload_time_iso_8601": "2020-03-13T09:15:25.629232Z", "url": "https://files.pythonhosted.org/packages/94/d2/c711c0d68abd48979041895e45375c650444fc0f82ff21dfb60dbe100e69/automata_tools-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e9945aa739170715a977f4cf1971c9c8", "sha256": "205de3f91a5135a8accd2efb798202d1301a355d8ba3d8304765828a73b879c0"}, "downloads": -1, "filename": "automata-tools-1.1.0.tar.gz", "has_sig": false, "md5_digest": "e9945aa739170715a977f4cf1971c9c8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12299, "upload_time": "2020-03-13T09:15:28", "upload_time_iso_8601": "2020-03-13T09:15:28.082784Z", "url": "https://files.pythonhosted.org/packages/79/f8/357105800571aea1939772f96fb8628706e0b74202b9cf7bc473b45ded4d/automata-tools-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "7aa003051100ce4abc2942ea8b59588f", "sha256": "245a360cee5167aaa62add099c33f3bc4e7cc1eafdaf0b099c7b4fef26d5d324"}, "downloads": -1, "filename": "automata_tools-1.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "7aa003051100ce4abc2942ea8b59588f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 11672, "upload_time": "2020-03-13T09:16:48", "upload_time_iso_8601": "2020-03-13T09:16:48.368872Z", "url": "https://files.pythonhosted.org/packages/88/5b/bd8e67ab56e739be9e92146131a22120efbe2a00cb8d35d9cd2b754ef696/automata_tools-1.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5460d9b017445755eb0df6a8b5f42ab6", "sha256": "14cbc8212a5d527d1cc7b6dfe485269d730f1444f619a68976544d601c440b12"}, "downloads": -1, "filename": "automata-tools-1.1.1.tar.gz", "has_sig": false, "md5_digest": "5460d9b017445755eb0df6a8b5f42ab6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12304, "upload_time": "2020-03-13T09:16:50", "upload_time_iso_8601": "2020-03-13T09:16:50.314785Z", "url": "https://files.pythonhosted.org/packages/bc/25/4b6ecf51a5b4c657b3258a1f8f6f51cda14335deebeb48366e5c7bdeb116/automata-tools-1.1.1.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "de8f68274e160916e116069f1e781e6c", "sha256": "3c732bc9fc776ffa7988c0a01aa3141d6b40af15da3cd44d6506f6ebc25fe680"}, "downloads": -1, "filename": "automata_tools-2.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "de8f68274e160916e116069f1e781e6c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 12327, "upload_time": "2020-03-13T16:16:17", "upload_time_iso_8601": "2020-03-13T16:16:17.407342Z", "url": "https://files.pythonhosted.org/packages/23/d6/c7246c39f53753f9e667291d267925c12384dfef89750778e20027d286df/automata_tools-2.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ece636adb13a2d838b0d0fbda2ea897c", "sha256": "7974844b3776f0b04700f918cfc31caf7e015c5740d556d4dfa5aea2ac350c38"}, "downloads": -1, "filename": "automata-tools-2.0.0.tar.gz", "has_sig": false, "md5_digest": "ece636adb13a2d838b0d0fbda2ea897c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12777, "upload_time": "2020-03-13T16:16:22", "upload_time_iso_8601": "2020-03-13T16:16:22.011157Z", "url": "https://files.pythonhosted.org/packages/bd/b2/b73d73c801a0c2809e139e2158879e714da3f866d40b748971e192790a01/automata-tools-2.0.0.tar.gz", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "d66eb4b99babc4db829787da996e0253", "sha256": "0b055cd1b29fd97a472fcd4782b6f5cfa1fe2bb5653969ab3dbf35a0d33b2117"}, "downloads": -1, "filename": "automata_tools-2.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "d66eb4b99babc4db829787da996e0253", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 12333, "upload_time": "2020-03-14T08:58:57", "upload_time_iso_8601": "2020-03-14T08:58:57.414148Z", "url": "https://files.pythonhosted.org/packages/e2/96/13e3e6a7f6219382f69280bf2099a384d329ac980e62425be9128815f660/automata_tools-2.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8bcf455a3290af3a28962ff79ee336e1", "sha256": "1a7c7e64ecc5f82f5f928e71093d5c05d569cd89e9f118babebeebf22518126f"}, "downloads": -1, "filename": "automata-tools-2.0.1.tar.gz", "has_sig": false, "md5_digest": "8bcf455a3290af3a28962ff79ee336e1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12778, "upload_time": "2020-03-14T08:58:59", "upload_time_iso_8601": "2020-03-14T08:58:59.356553Z", "url": "https://files.pythonhosted.org/packages/0e/ad/7c21625d06489ad561e74d37c322532e9a842977de7d053ba19443af114c/automata-tools-2.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d66eb4b99babc4db829787da996e0253", "sha256": "0b055cd1b29fd97a472fcd4782b6f5cfa1fe2bb5653969ab3dbf35a0d33b2117"}, "downloads": -1, "filename": "automata_tools-2.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "d66eb4b99babc4db829787da996e0253", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 12333, "upload_time": "2020-03-14T08:58:57", "upload_time_iso_8601": "2020-03-14T08:58:57.414148Z", "url": "https://files.pythonhosted.org/packages/e2/96/13e3e6a7f6219382f69280bf2099a384d329ac980e62425be9128815f660/automata_tools-2.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8bcf455a3290af3a28962ff79ee336e1", "sha256": "1a7c7e64ecc5f82f5f928e71093d5c05d569cd89e9f118babebeebf22518126f"}, "downloads": -1, "filename": "automata-tools-2.0.1.tar.gz", "has_sig": false, "md5_digest": "8bcf455a3290af3a28962ff79ee336e1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12778, "upload_time": "2020-03-14T08:58:59", "upload_time_iso_8601": "2020-03-14T08:58:59.356553Z", "url": "https://files.pythonhosted.org/packages/0e/ad/7c21625d06489ad561e74d37c322532e9a842977de7d053ba19443af114c/automata-tools-2.0.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:16:14 2020"}