{"info": {"author": "Jeff M", "author_email": "quicksh0t12@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Framework :: AsyncIO", "Framework :: Flask", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Libraries :: Java Libraries"], "description": "[![Build Status](https://travis-ci.org/amenezes/config-client.svg?branch=master)](https://travis-ci.org/amenezes/config-client)\n[![Maintainability](https://api.codeclimate.com/v1/badges/7b8b70e0c20c6809df54/maintainability)](https://codeclimate.com/github/amenezes/config-client/maintainability)\n[![codecov](https://codecov.io/gh/amenezes/config-client/branch/master/graph/badge.svg)](https://codecov.io/gh/amenezes/config-client)\n[![PyPI version](https://badge.fury.io/py/config-client.svg)](https://badge.fury.io/py/config-client)\n\n# config-client\n\nconfig-client package for [spring cloud config](https://spring.io/projects/spring-cloud-config).\n\n## Installing\n\nInstall and update using pip:\n\n````bash\npip install -U config-client\n````\n\n## Dependencies\n\n- [attrs](http://attrs.org)\n- [glom](https://glom.readthedocs.io/en/latest/index.html)\n- [requests](https://2.python-requests.org/en/master/)\n\n## Setup\n\nThe default URL pattern is:\n - *`CONFIGSERVER_ADDRESS`*/*`BRANCH`*/*`APP_NAME`*-*`PROFILE`*.json\n\n````ini\n# expected environment variables:\n#\nCONFIGSERVER_ADDRESS=http://localhost:8888\nBRANCH=master\nPROFILE=development\nAPP_NAME=myapp\n````\n\nwill result in:\n\n````txt\nhttp://localhost:8888/master/myapp-development.json\n````\n\nThe url pattern can be customize on constructor with parameter `url`.\n\n```python\nfrom config import spring\n\nc = spring.ConfigClient(\n        app_name='myapp',\n        url=\"{address}/{branch}/{profile}-{app_name}.json\"\n    )\nc.url\n# output: 'http://localhost:8888/master/development-myapp.json'\n```\n\n### Default values\n\nif no value was adjusted for the environment variables below, the default value will be assumed, as:\n\n````ini\nCONFIGSERVER_ADDRESS=http://localhost:8888\nBRANCH=master\nPROFILE=development\nAPP_NAME=\n````\n\n### Supported response format\n\n- JSON\n\nJust add the `.json` extension to the end of the URL parameter. For example:\n\n````python\nc = ConfigClient(\n    app_name='foo',\n    profile='development',\n    address='http://localhost:8000',\n    branch='master',\n    url='{address}/{branch}/{app_name}-{profile}.json' # <\n)\n````\n\nIt will result in URL: `http://localhost:8000/master/foo-development.json` .\n\n**Notice**\n`.yaml` it's not supported, all extensions will be converted to `.json` internally.\n\n## Usage Example\n\n### using standard client\n\n````python\nfrom config.spring import ConfigClient\n\nconfig_client = ConfigClient(app_name='my_app')\nconfig_client.get_config()\n\n# option 1: dict like with direct access\nconfig_client.config['spring']['cloud']['consul']['host']\n\n# option 2: dict like using get\nconfig_client.config.get('spring').get('cloud').get('consul').get('port')\n\n# option 3: using get_attribute method\nconfig_client.get_attribute('spring.cloud.consul.port')\n````\n\n### standard client with @decorator\n\nFor use cases where environment variables are set.\n\n````python\nfrom config import spring\n\n@spring.config_client()\ndef my_test(config_client=None):\n    config_client.config['spring']['cloud']['consul']['host']\n    config_client.config.get('spring').get('cloud').get('consul').get('port')\n    config_client.get_attribute('spring.cloud.consul.port')\n````\n\nFor use cases where environment variables are not set can you use decorator parameters, as example below:\n\n````python\nfrom config import spring\n\n@spring.config_client(app_name='myapp', branch=\"dev\")\ndef my_test(config_client=None):\n    config_client.config['spring']['cloud']['consul']['host']\n    config_client.config.get('spring').get('cloud').get('consul').get('port')\n    config_client.get_attribute('spring.cloud.consul.port')\n````\n\nIntegration with Flask.\n\n````python\nfrom config.spring import ConfigClient\nfrom flask import Flask\n\n\nconfig_client = ConfigClient(app_name=\"myapp\")\nconfig_client.get_config()\napp = Flask(__name__)\napp.run(host='0.0.0.0',\n        port=config_client.config.get('app').get('port')\n````\n\n### using asyncio\n\nclient using asyncio\n\n````python\nimport asyncio\nfrom config.spring import ConfigClient\n\n\nloop = asyncio.get_event_loop()\nconfig_client = ConfigClient(app_name='myapp')\nconfig_client.get_config()\n\nasync def service_discovery():\n    await discovery_client.register(\n        config_client.config['app']['name'],\n        config_client.config.get('app').get('port')\n    )\n\ndiscovery_client = Consul(\n    config_client.config.get('spring').get('cloud').get('consul').get('host'),\n    config_client.get_attribute('spring.cloud.consul.port'],\n    loop\n)\nloop.run_until_complete(service_discovery)\n````\n\n### create singleton instance\n\nAssuming default values.\n\n```python\nfrom config.spring import create_config_client\n\n\nc = create_config_client()\nd = create_config_client()\n\nprint(id(c))\nprint(id(d))\n\n```\n\nWith custom values.\n\n```python\nfrom config.spring import create_config_client\n\n\nc = create_config_client(address='http://localhost:8888/configuration', app_name='autosprocessuais-pecas-txtos', branch=\"ft-sdintegracoes-591\")\nd = create_config_client(address='http://localhost:8888/configuration', app_name='autosprocessuais-pecas-txtos', branch=\"ft-sdintegracoes-591\")\n\nprint(id(c))\nprint(id(d))\n\n```\n\n### [cloudfoundry](https://docs.pivotal.io/spring-cloud-services/1-5/common/config-server/index.html) integration\n\n#### Default usage\n\n````python\nfrom config.cf import CF\n\ncf = CF()\ncf.get_config()\n````\n\nIt's necessary bind Config Server with the application first.\n\nA example application it's available on:\n- https://github.com/amenezes/simpleweb\n\n#### Custom usage\n\n````python\nfrom config.cf import CF\nfrom config.spring import ConfigClient\n\ncf = CF(client=ConfigClient(app_name='simpleweb000', url=\"{address}/{branch}/{app_name}.json\"))\ncf.get_config()\n````\n\n## Development\n\n### Running Tests\n\nInstall development dependencies.\n```bash\npip install -r requirements-dev.txt\n```\n\nTo execute tests just run:\n```bash\npython -m pytest -v --cov-report term --cov=config tests\n```\n\n## Links\n\n- License: [Apache License](https://choosealicense.com/licenses/apache-2.0/)\n- Code: https://github.com/amenezes/config-client\n- Issue tracker: https://github.com/amenezes/config-client/issues\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/thedonutz/config-client", "keywords": "", "license": "Apache-2.0", "maintainer": "", "maintainer_email": "", "name": "config-client3", "package_url": "https://pypi.org/project/config-client3/", "platform": "", "project_url": "https://pypi.org/project/config-client3/", "project_urls": {"Code": "https://github.com/thedonutz/config-client", "Documentation": "https://github.com/thedonutz/config-client", "Homepage": "https://github.com/thedonutz/config-client", "Issue tracker": "https://github.com/thedonutz/config-client/issues"}, "release_url": "https://pypi.org/project/config-client3/2.0.0/", "requires_dist": ["attrs (>=19.1.0)", "glom (>=19.2.0)", "requests (>=2.22.0)"], "requires_python": ">=3.6.0", "summary": "config service client for pcf config-server3", "version": "2.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/amenezes/config-client\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8c45bc75ed67f72ffe71a47432816aec01be838b/68747470733a2f2f7472617669732d63692e6f72672f616d656e657a65732f636f6e6669672d636c69656e742e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codeclimate.com/github/amenezes/config-client/maintainability\" rel=\"nofollow\"><img alt=\"Maintainability\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4f89dd19cd75c26f113623cb86cc78646e31aadd/68747470733a2f2f6170692e636f6465636c696d6174652e636f6d2f76312f6261646765732f37623862373065306332306336383039646635342f6d61696e7461696e6162696c697479\"></a>\n<a href=\"https://codecov.io/gh/amenezes/config-client\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fd78c11ad93fb40222645517b5e0d94e0e1ea7e8/68747470733a2f2f636f6465636f762e696f2f67682f616d656e657a65732f636f6e6669672d636c69656e742f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://badge.fury.io/py/config-client\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/af4e19767f6df1c1f705d6f04d8576909afb219f/68747470733a2f2f62616467652e667572792e696f2f70792f636f6e6669672d636c69656e742e737667\"></a></p>\n<h1>config-client</h1>\n<p>config-client package for <a href=\"https://spring.io/projects/spring-cloud-config\" rel=\"nofollow\">spring cloud config</a>.</p>\n<h2>Installing</h2>\n<p>Install and update using pip:</p>\n<pre>pip install -U config-client\n</pre>\n<h2>Dependencies</h2>\n<ul>\n<li><a href=\"http://attrs.org\" rel=\"nofollow\">attrs</a></li>\n<li><a href=\"https://glom.readthedocs.io/en/latest/index.html\" rel=\"nofollow\">glom</a></li>\n<li><a href=\"https://2.python-requests.org/en/master/\" rel=\"nofollow\">requests</a></li>\n</ul>\n<h2>Setup</h2>\n<p>The default URL pattern is:</p>\n<ul>\n<li><em><code>CONFIGSERVER_ADDRESS</code></em>/<em><code>BRANCH</code></em>/<em><code>APP_NAME</code></em>-<em><code>PROFILE</code></em>.json</li>\n</ul>\n<pre><span class=\"c1\"># expected environment variables:</span>\n<span class=\"c1\">#</span>\n<span class=\"na\">CONFIGSERVER_ADDRESS</span><span class=\"o\">=</span><span class=\"s\">http://localhost:8888</span>\n<span class=\"na\">BRANCH</span><span class=\"o\">=</span><span class=\"s\">master</span>\n<span class=\"na\">PROFILE</span><span class=\"o\">=</span><span class=\"s\">development</span>\n<span class=\"na\">APP_NAME</span><span class=\"o\">=</span><span class=\"s\">myapp</span>\n</pre>\n<p>will result in:</p>\n<pre>http://localhost:8888/master/myapp-development.json\n</pre>\n<p>The url pattern can be customize on constructor with parameter <code>url</code>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">config</span> <span class=\"kn\">import</span> <span class=\"n\">spring</span>\n\n<span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">spring</span><span class=\"o\">.</span><span class=\"n\">ConfigClient</span><span class=\"p\">(</span>\n        <span class=\"n\">app_name</span><span class=\"o\">=</span><span class=\"s1\">'myapp'</span><span class=\"p\">,</span>\n        <span class=\"n\">url</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"si\">{address}</span><span class=\"s2\">/</span><span class=\"si\">{branch}</span><span class=\"s2\">/</span><span class=\"si\">{profile}</span><span class=\"s2\">-</span><span class=\"si\">{app_name}</span><span class=\"s2\">.json\"</span>\n    <span class=\"p\">)</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">url</span>\n<span class=\"c1\"># output: 'http://localhost:8888/master/development-myapp.json'</span>\n</pre>\n<h3>Default values</h3>\n<p>if no value was adjusted for the environment variables below, the default value will be assumed, as:</p>\n<pre><span class=\"na\">CONFIGSERVER_ADDRESS</span><span class=\"o\">=</span><span class=\"s\">http://localhost:8888</span>\n<span class=\"na\">BRANCH</span><span class=\"o\">=</span><span class=\"s\">master</span>\n<span class=\"na\">PROFILE</span><span class=\"o\">=</span><span class=\"s\">development</span>\n<span class=\"na\">APP_NAME</span><span class=\"o\">=</span>\n</pre>\n<h3>Supported response format</h3>\n<ul>\n<li>JSON</li>\n</ul>\n<p>Just add the <code>.json</code> extension to the end of the URL parameter. For example:</p>\n<pre><span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">ConfigClient</span><span class=\"p\">(</span>\n    <span class=\"n\">app_name</span><span class=\"o\">=</span><span class=\"s1\">'foo'</span><span class=\"p\">,</span>\n    <span class=\"n\">profile</span><span class=\"o\">=</span><span class=\"s1\">'development'</span><span class=\"p\">,</span>\n    <span class=\"n\">address</span><span class=\"o\">=</span><span class=\"s1\">'http://localhost:8000'</span><span class=\"p\">,</span>\n    <span class=\"n\">branch</span><span class=\"o\">=</span><span class=\"s1\">'master'</span><span class=\"p\">,</span>\n    <span class=\"n\">url</span><span class=\"o\">=</span><span class=\"s1\">'</span><span class=\"si\">{address}</span><span class=\"s1\">/</span><span class=\"si\">{branch}</span><span class=\"s1\">/</span><span class=\"si\">{app_name}</span><span class=\"s1\">-</span><span class=\"si\">{profile}</span><span class=\"s1\">.json'</span> <span class=\"c1\"># &lt;</span>\n<span class=\"p\">)</span>\n</pre>\n<p>It will result in URL: <code>http://localhost:8000/master/foo-development.json</code> .</p>\n<p><strong>Notice</strong>\n<code>.yaml</code> it's not supported, all extensions will be converted to <code>.json</code> internally.</p>\n<h2>Usage Example</h2>\n<h3>using standard client</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">config.spring</span> <span class=\"kn\">import</span> <span class=\"n\">ConfigClient</span>\n\n<span class=\"n\">config_client</span> <span class=\"o\">=</span> <span class=\"n\">ConfigClient</span><span class=\"p\">(</span><span class=\"n\">app_name</span><span class=\"o\">=</span><span class=\"s1\">'my_app'</span><span class=\"p\">)</span>\n<span class=\"n\">config_client</span><span class=\"o\">.</span><span class=\"n\">get_config</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># option 1: dict like with direct access</span>\n<span class=\"n\">config_client</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s1\">'spring'</span><span class=\"p\">][</span><span class=\"s1\">'cloud'</span><span class=\"p\">][</span><span class=\"s1\">'consul'</span><span class=\"p\">][</span><span class=\"s1\">'host'</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># option 2: dict like using get</span>\n<span class=\"n\">config_client</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'spring'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'cloud'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'consul'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'port'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># option 3: using get_attribute method</span>\n<span class=\"n\">config_client</span><span class=\"o\">.</span><span class=\"n\">get_attribute</span><span class=\"p\">(</span><span class=\"s1\">'spring.cloud.consul.port'</span><span class=\"p\">)</span>\n</pre>\n<h3>standard client with @decorator</h3>\n<p>For use cases where environment variables are set.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">config</span> <span class=\"kn\">import</span> <span class=\"n\">spring</span>\n\n<span class=\"nd\">@spring</span><span class=\"o\">.</span><span class=\"n\">config_client</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">my_test</span><span class=\"p\">(</span><span class=\"n\">config_client</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"n\">config_client</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s1\">'spring'</span><span class=\"p\">][</span><span class=\"s1\">'cloud'</span><span class=\"p\">][</span><span class=\"s1\">'consul'</span><span class=\"p\">][</span><span class=\"s1\">'host'</span><span class=\"p\">]</span>\n    <span class=\"n\">config_client</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'spring'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'cloud'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'consul'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'port'</span><span class=\"p\">)</span>\n    <span class=\"n\">config_client</span><span class=\"o\">.</span><span class=\"n\">get_attribute</span><span class=\"p\">(</span><span class=\"s1\">'spring.cloud.consul.port'</span><span class=\"p\">)</span>\n</pre>\n<p>For use cases where environment variables are not set can you use decorator parameters, as example below:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">config</span> <span class=\"kn\">import</span> <span class=\"n\">spring</span>\n\n<span class=\"nd\">@spring</span><span class=\"o\">.</span><span class=\"n\">config_client</span><span class=\"p\">(</span><span class=\"n\">app_name</span><span class=\"o\">=</span><span class=\"s1\">'myapp'</span><span class=\"p\">,</span> <span class=\"n\">branch</span><span class=\"o\">=</span><span class=\"s2\">\"dev\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">my_test</span><span class=\"p\">(</span><span class=\"n\">config_client</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"n\">config_client</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s1\">'spring'</span><span class=\"p\">][</span><span class=\"s1\">'cloud'</span><span class=\"p\">][</span><span class=\"s1\">'consul'</span><span class=\"p\">][</span><span class=\"s1\">'host'</span><span class=\"p\">]</span>\n    <span class=\"n\">config_client</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'spring'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'cloud'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'consul'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'port'</span><span class=\"p\">)</span>\n    <span class=\"n\">config_client</span><span class=\"o\">.</span><span class=\"n\">get_attribute</span><span class=\"p\">(</span><span class=\"s1\">'spring.cloud.consul.port'</span><span class=\"p\">)</span>\n</pre>\n<p>Integration with Flask.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">config.spring</span> <span class=\"kn\">import</span> <span class=\"n\">ConfigClient</span>\n<span class=\"kn\">from</span> <span class=\"nn\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">Flask</span>\n\n\n<span class=\"n\">config_client</span> <span class=\"o\">=</span> <span class=\"n\">ConfigClient</span><span class=\"p\">(</span><span class=\"n\">app_name</span><span class=\"o\">=</span><span class=\"s2\">\"myapp\"</span><span class=\"p\">)</span>\n<span class=\"n\">config_client</span><span class=\"o\">.</span><span class=\"n\">get_config</span><span class=\"p\">()</span>\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Flask</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s1\">'0.0.0.0'</span><span class=\"p\">,</span>\n        <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"n\">config_client</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'app'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'port'</span><span class=\"p\">)</span>\n</pre>\n<h3>using asyncio</h3>\n<p>client using asyncio</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"nn\">config.spring</span> <span class=\"kn\">import</span> <span class=\"n\">ConfigClient</span>\n\n\n<span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span>\n<span class=\"n\">config_client</span> <span class=\"o\">=</span> <span class=\"n\">ConfigClient</span><span class=\"p\">(</span><span class=\"n\">app_name</span><span class=\"o\">=</span><span class=\"s1\">'myapp'</span><span class=\"p\">)</span>\n<span class=\"n\">config_client</span><span class=\"o\">.</span><span class=\"n\">get_config</span><span class=\"p\">()</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">service_discovery</span><span class=\"p\">():</span>\n    <span class=\"k\">await</span> <span class=\"n\">discovery_client</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span>\n        <span class=\"n\">config_client</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s1\">'app'</span><span class=\"p\">][</span><span class=\"s1\">'name'</span><span class=\"p\">],</span>\n        <span class=\"n\">config_client</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'app'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'port'</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n\n<span class=\"n\">discovery_client</span> <span class=\"o\">=</span> <span class=\"n\">Consul</span><span class=\"p\">(</span>\n    <span class=\"n\">config_client</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'spring'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'cloud'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'consul'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'host'</span><span class=\"p\">),</span>\n    <span class=\"n\">config_client</span><span class=\"o\">.</span><span class=\"n\">get_attribute</span><span class=\"p\">(</span><span class=\"s1\">'spring.cloud.consul.port'</span><span class=\"p\">],</span>\n    <span class=\"n\">loop</span>\n<span class=\"p\">)</span>\n<span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">service_discovery</span><span class=\"p\">)</span>\n</pre>\n<h3>create singleton instance</h3>\n<p>Assuming default values.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">config.spring</span> <span class=\"kn\">import</span> <span class=\"n\">create_config_client</span>\n\n\n<span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">create_config_client</span><span class=\"p\">()</span>\n<span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">create_config_client</span><span class=\"p\">()</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">))</span>\n</pre>\n<p>With custom values.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">config.spring</span> <span class=\"kn\">import</span> <span class=\"n\">create_config_client</span>\n\n\n<span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">create_config_client</span><span class=\"p\">(</span><span class=\"n\">address</span><span class=\"o\">=</span><span class=\"s1\">'http://localhost:8888/configuration'</span><span class=\"p\">,</span> <span class=\"n\">app_name</span><span class=\"o\">=</span><span class=\"s1\">'autosprocessuais-pecas-txtos'</span><span class=\"p\">,</span> <span class=\"n\">branch</span><span class=\"o\">=</span><span class=\"s2\">\"ft-sdintegracoes-591\"</span><span class=\"p\">)</span>\n<span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">create_config_client</span><span class=\"p\">(</span><span class=\"n\">address</span><span class=\"o\">=</span><span class=\"s1\">'http://localhost:8888/configuration'</span><span class=\"p\">,</span> <span class=\"n\">app_name</span><span class=\"o\">=</span><span class=\"s1\">'autosprocessuais-pecas-txtos'</span><span class=\"p\">,</span> <span class=\"n\">branch</span><span class=\"o\">=</span><span class=\"s2\">\"ft-sdintegracoes-591\"</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">))</span>\n</pre>\n<h3><a href=\"https://docs.pivotal.io/spring-cloud-services/1-5/common/config-server/index.html\" rel=\"nofollow\">cloudfoundry</a> integration</h3>\n<h4>Default usage</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">config.cf</span> <span class=\"kn\">import</span> <span class=\"n\">CF</span>\n\n<span class=\"n\">cf</span> <span class=\"o\">=</span> <span class=\"n\">CF</span><span class=\"p\">()</span>\n<span class=\"n\">cf</span><span class=\"o\">.</span><span class=\"n\">get_config</span><span class=\"p\">()</span>\n</pre>\n<p>It's necessary bind Config Server with the application first.</p>\n<p>A example application it's available on:</p>\n<ul>\n<li><a href=\"https://github.com/amenezes/simpleweb\" rel=\"nofollow\">https://github.com/amenezes/simpleweb</a></li>\n</ul>\n<h4>Custom usage</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">config.cf</span> <span class=\"kn\">import</span> <span class=\"n\">CF</span>\n<span class=\"kn\">from</span> <span class=\"nn\">config.spring</span> <span class=\"kn\">import</span> <span class=\"n\">ConfigClient</span>\n\n<span class=\"n\">cf</span> <span class=\"o\">=</span> <span class=\"n\">CF</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"o\">=</span><span class=\"n\">ConfigClient</span><span class=\"p\">(</span><span class=\"n\">app_name</span><span class=\"o\">=</span><span class=\"s1\">'simpleweb000'</span><span class=\"p\">,</span> <span class=\"n\">url</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"si\">{address}</span><span class=\"s2\">/</span><span class=\"si\">{branch}</span><span class=\"s2\">/</span><span class=\"si\">{app_name}</span><span class=\"s2\">.json\"</span><span class=\"p\">))</span>\n<span class=\"n\">cf</span><span class=\"o\">.</span><span class=\"n\">get_config</span><span class=\"p\">()</span>\n</pre>\n<h2>Development</h2>\n<h3>Running Tests</h3>\n<p>Install development dependencies.</p>\n<pre>pip install -r requirements-dev.txt\n</pre>\n<p>To execute tests just run:</p>\n<pre>python -m pytest -v --cov-report term --cov<span class=\"o\">=</span>config tests\n</pre>\n<h2>Links</h2>\n<ul>\n<li>License: <a href=\"https://choosealicense.com/licenses/apache-2.0/\" rel=\"nofollow\">Apache License</a></li>\n<li>Code: <a href=\"https://github.com/amenezes/config-client\" rel=\"nofollow\">https://github.com/amenezes/config-client</a></li>\n<li>Issue tracker: <a href=\"https://github.com/amenezes/config-client/issues\" rel=\"nofollow\">https://github.com/amenezes/config-client/issues</a></li>\n</ul>\n\n          </div>"}, "last_serial": 6655231, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "4b3173e1a3db6dcbde44560c1f3e86a3", "sha256": "2d217f1f1f716c882c0d3fdefb1720c51e94be6ae583cb1242d23abe1a5b3f44"}, "downloads": -1, "filename": "config_client3-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "4b3173e1a3db6dcbde44560c1f3e86a3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 12338, "upload_time": "2020-02-18T17:57:52", "upload_time_iso_8601": "2020-02-18T17:57:52.444279Z", "url": "https://files.pythonhosted.org/packages/f8/4b/f2024af9560b5c045ec3e52030e1676534c9f9702311d3d1b5405298cfb0/config_client3-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "09c0ce7258dd7b4580b3f8ad78650584", "sha256": "30715ce8ed4975c720c04a015b42b2d67d25ca12a1494b06327eab102e822676"}, "downloads": -1, "filename": "config-client3-1.0.0.tar.gz", "has_sig": false, "md5_digest": "09c0ce7258dd7b4580b3f8ad78650584", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 9106, "upload_time": "2020-02-18T17:57:54", "upload_time_iso_8601": "2020-02-18T17:57:54.948412Z", "url": "https://files.pythonhosted.org/packages/c3/91/924a143e0e25df2ed352f8273c0324069c7437dc9d4ddd209d734c81f11a/config-client3-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "56700db6304c4bbfa7c9d305f0a06d75", "sha256": "4154d02b15919670cd765f1003ce7d406c0d1a75c458e994d7f88eed9d25cdc7"}, "downloads": -1, "filename": "config_client3-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "56700db6304c4bbfa7c9d305f0a06d75", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 12343, "upload_time": "2020-02-18T18:01:35", "upload_time_iso_8601": "2020-02-18T18:01:35.488670Z", "url": "https://files.pythonhosted.org/packages/60/7f/479e2e58beb2d1a19b09d93bcedb8f04c82b6b0260afd943c62cae962485/config_client3-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3070a019330fa66cad07bf34f3a67d5a", "sha256": "c187b6d08b822338953a746068dc9a34af08d298f31f87860ae3cb32ab04b982"}, "downloads": -1, "filename": "config-client3-1.0.1.tar.gz", "has_sig": false, "md5_digest": "3070a019330fa66cad07bf34f3a67d5a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 9115, "upload_time": "2020-02-18T18:01:36", "upload_time_iso_8601": "2020-02-18T18:01:36.647067Z", "url": "https://files.pythonhosted.org/packages/1d/2a/a0f7b0780010f3a61d3ae5913f31de3d45e7b77ba81da5ff2bac0da363f1/config-client3-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "ee8bf1033c2c1b342bc8408f54944fb9", "sha256": "807c641bc7df8c6854e0bb5f83923ed762f7a32c6eb9e0c0025368e4063d8887"}, "downloads": -1, "filename": "config_client3-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "ee8bf1033c2c1b342bc8408f54944fb9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 12363, "upload_time": "2020-02-18T18:22:16", "upload_time_iso_8601": "2020-02-18T18:22:16.980090Z", "url": "https://files.pythonhosted.org/packages/fa/4d/236cf3d6042499311733ff0d0c3624a441575ec40c53b6e781354331dd87/config_client3-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "61d368d73b39c02a3238794535363565", "sha256": "632ed6ecb0889d443f890b6a2ab5a816e3123853751efd53f1a5282e4d6389db"}, "downloads": -1, "filename": "config-client3-1.0.2.tar.gz", "has_sig": false, "md5_digest": "61d368d73b39c02a3238794535363565", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 9117, "upload_time": "2020-02-18T18:22:18", "upload_time_iso_8601": "2020-02-18T18:22:18.583809Z", "url": "https://files.pythonhosted.org/packages/17/9a/8d7a536025748e0c4a479a77617a6eb57aa01ff4d21ea4a6a6e5b9329cae/config-client3-1.0.2.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "cd423a8ba1f1db1666fab9ccbd9f1291", "sha256": "55ede01ec0caa41c90659449f380655096fe4c8b865f01841bd8863356abc37a"}, "downloads": -1, "filename": "config_client3-2.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "cd423a8ba1f1db1666fab9ccbd9f1291", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 12362, "upload_time": "2020-02-18T18:42:53", "upload_time_iso_8601": "2020-02-18T18:42:53.275634Z", "url": "https://files.pythonhosted.org/packages/47/ec/4f794a85bbe936e8f8b71767286ad1ea672ae91e4208f6678122809c0cca/config_client3-2.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d3307b73cb28790b914f5fef7f299491", "sha256": "3bcebd4636e88e97a13bdc8d7ab3f848b9a267e2181112f3e24fd685c618c76d"}, "downloads": -1, "filename": "config-client3-2.0.0.tar.gz", "has_sig": false, "md5_digest": "d3307b73cb28790b914f5fef7f299491", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 8748, "upload_time": "2020-02-18T18:42:54", "upload_time_iso_8601": "2020-02-18T18:42:54.506365Z", "url": "https://files.pythonhosted.org/packages/51/fe/ecf7c865723afc7d336b44d5e27e17268c1e90bcfaf8b36a42a9463fed81/config-client3-2.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "cd423a8ba1f1db1666fab9ccbd9f1291", "sha256": "55ede01ec0caa41c90659449f380655096fe4c8b865f01841bd8863356abc37a"}, "downloads": -1, "filename": "config_client3-2.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "cd423a8ba1f1db1666fab9ccbd9f1291", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 12362, "upload_time": "2020-02-18T18:42:53", "upload_time_iso_8601": "2020-02-18T18:42:53.275634Z", "url": "https://files.pythonhosted.org/packages/47/ec/4f794a85bbe936e8f8b71767286ad1ea672ae91e4208f6678122809c0cca/config_client3-2.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d3307b73cb28790b914f5fef7f299491", "sha256": "3bcebd4636e88e97a13bdc8d7ab3f848b9a267e2181112f3e24fd685c618c76d"}, "downloads": -1, "filename": "config-client3-2.0.0.tar.gz", "has_sig": false, "md5_digest": "d3307b73cb28790b914f5fef7f299491", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 8748, "upload_time": "2020-02-18T18:42:54", "upload_time_iso_8601": "2020-02-18T18:42:54.506365Z", "url": "https://files.pythonhosted.org/packages/51/fe/ecf7c865723afc7d336b44d5e27e17268c1e90bcfaf8b36a42a9463fed81/config-client3-2.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:58 2020"}