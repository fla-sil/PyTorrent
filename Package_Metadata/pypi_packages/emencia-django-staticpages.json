{"info": {"author": "David Thenon", "author_email": "dthenon@emencia.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Internet :: WWW/HTTP", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Introduction\n============\n\nThis is a simple Django app to publish some pages directly from templates. \n\nYes, this is simply to use a ``django.views.generic.TemplateView`` but this app will help to manage many pages and with Django sitemaps support.\n\nInstall\n=======\n\nAdd it to your installed apps in the settings : ::\n\n    INSTALLED_APPS = (\n        ...\n        'staticpages',\n        ...\n    )\n\nUsage\n=====\n\nAll static page entries must defines three arguments :\n\n* The regex pattern to match for the URL;\n* The template path to use;\n* The url name, that must be unique;\n\nThe raw way\n-----------\n\nIn the settings : ::\n\n    STATICPAGES = [\n        ...\n        (r'foo/$', \"foo/index.html\", 'foo-index'),\n        (r'foo/part1/$', \"foo/part1.html\", 'foo-part1'),\n        (r'foo/part2/$', \"foo/part2.html\", 'foo-part2'),\n        ...\n    ]\n\nThen in your ``urls.py`` : ::\n\n    url(r'^staticpages/', include('staticpages.urls.include')),\n\nIf you want to publish them in your ``sitemap.xml`` with Django sitemaps, you will have to do something like this in your ``urls.py`` : ::\n\n    from staticpages.sitemaps import StaticPageSitemapBase, StaticPageEntryTemplate\n\n    class MypagesSitemap(StaticPageSitemapBase):\n        page_entries = [\n            StaticPageEntryTemplate(url_name='mypage-foo', template_name='foo.html'),\n        ]\n\n    # Enabled sitemaps\n    sitemaps = {\n        # For Prototypes\n        'mypages': MypagesSitemap,\n    }\n\n    urlpatterns += patterns('django.contrib.sitemaps.views',\n        url(r'^sitemap\\.xml$', 'sitemap', {'sitemaps': sitemaps}),\n    )\n\nThe semi-auto way\n-----------------\n\nThis method enables you to mount different static pages maps for your needs, opposite to the raw way you can use any setting name to store your page map. This is useful if you need to multiple separated page maps.\n\nIn the settings : ::\n\n    FOO_STATICPAGES = (\n        (r'foo/$', \"foo/index.html\", 'foo-index'),\n        (r'foo/part1/$', \"foo/part1.html\", 'foo-part1'),\n        (r'foo/part2/$', \"foo/part2.html\", 'foo-part2'),\n    )\n\n    BAR_STATICPAGES = (\n        (r'bar/$', \"bar/index.html\", 'bar-index'),\n        (r'bar/part1/$', \"bar/part1.html\", 'bar-part1'),\n        (r'bar/part2/$', \"bar/part2.html\", 'bar-part2'),\n    )\n\nThen in your ``urls.py`` : ::\n\n    from django.conf import settings\n    from staticpages.urls import loaders\n\n    urlpatterns = patterns('', *loaders.mount_staticpages(*settings.FOO_STATICPAGES)) + urlpatterns\n    if settings.DEBUG:\n        urlpatterns = patterns('', *loaders.mount_staticpages(*settings.BAR_STATICPAGES)) + urlpatterns\n\nNote the usage of ``settings.DEBUG``, this is an example of the usage you can do of multiple separated page maps, the *bar* pages will not be published in production environnment but the *foo* pages will be.\n    \nAlso for the ``sitemap.xml`` with Django sitemaps, you will have to do something like this in your ``urls.py`` : ::\n\n    from django.conf import settings\n    from staticpages.sitemaps import StaticPageSitemapAuto\n\n    class FooSitemap(StaticPageSitemapAuto):\n        pages_map = settings.FOO_STATICPAGES\n\n    class BarSitemap(StaticPageSitemapAuto):\n        pages_map = settings.BAR_STATICPAGES\n\n\n    # Enabled sitemaps\n    sitemaps = {\n        'foo': FooSitemap,\n        'bar': BarSitemap,\n    }\n\n    urlpatterns += patterns('django.contrib.sitemaps.views',\n        url(r'^sitemap\\.xml$', 'sitemap', {'sitemaps': sitemaps}),\n    ) + urlpatterns\n\nStatic page view\n----------------\n\nAlso note that each page will use the view ``staticpages.views.StaticPageView``. This is just a inherit from ``django.views.generic.TemplateView`` that will contains a variable ``page_map``. This variable contains the used pages map. You can use it in your templates like so : ::\n\n    <ul>{% for url_pattern,template_name,url_name in page_map %}\n        <li><a href=\"{% url url_name %}\">{{ template_name }}</a></li>\n    {% endfor %}</ul>\n\nThis will list all available static pages in the pages map, useful to have an automatic browsable index of them.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pypi.python.org/pypi/emencia-django-staticpages", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "emencia-django-staticpages", "package_url": "https://pypi.org/project/emencia-django-staticpages/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/emencia-django-staticpages/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://pypi.python.org/pypi/emencia-django-staticpages"}, "release_url": "https://pypi.org/project/emencia-django-staticpages/0.4/", "requires_dist": null, "requires_python": null, "summary": "This is a simple Django app to publish some pages directly from templates", "version": "0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"introduction\">\n<h2>Introduction</h2>\n<p>This is a simple Django app to publish some pages directly from templates.</p>\n<p>Yes, this is simply to use a <tt>django.views.generic.TemplateView</tt> but this app will help to manage many pages and with Django sitemaps support.</p>\n</div>\n<div id=\"install\">\n<h2>Install</h2>\n<p>Add it to your installed apps in the settings :</p>\n<pre>INSTALLED_APPS = (\n    ...\n    'staticpages',\n    ...\n)\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>All static page entries must defines three arguments :</p>\n<ul>\n<li>The regex pattern to match for the URL;</li>\n<li>The template path to use;</li>\n<li>The url name, that must be unique;</li>\n</ul>\n<div id=\"the-raw-way\">\n<h3>The raw way</h3>\n<p>In the settings :</p>\n<pre>STATICPAGES = [\n    ...\n    (r'foo/$', \"foo/index.html\", 'foo-index'),\n    (r'foo/part1/$', \"foo/part1.html\", 'foo-part1'),\n    (r'foo/part2/$', \"foo/part2.html\", 'foo-part2'),\n    ...\n]\n</pre>\n<p>Then in your <tt>urls.py</tt> :</p>\n<pre>url(r'^staticpages/', include('staticpages.urls.include')),\n</pre>\n<p>If you want to publish them in your <tt>sitemap.xml</tt> with Django sitemaps, you will have to do something like this in your <tt>urls.py</tt> :</p>\n<pre>from staticpages.sitemaps import StaticPageSitemapBase, StaticPageEntryTemplate\n\nclass MypagesSitemap(StaticPageSitemapBase):\n    page_entries = [\n        StaticPageEntryTemplate(url_name='mypage-foo', template_name='foo.html'),\n    ]\n\n# Enabled sitemaps\nsitemaps = {\n    # For Prototypes\n    'mypages': MypagesSitemap,\n}\n\nurlpatterns += patterns('django.contrib.sitemaps.views',\n    url(r'^sitemap\\.xml$', 'sitemap', {'sitemaps': sitemaps}),\n)\n</pre>\n</div>\n<div id=\"the-semi-auto-way\">\n<h3>The semi-auto way</h3>\n<p>This method enables you to mount different static pages maps for your needs, opposite to the raw way you can use any setting name to store your page map. This is useful if you need to multiple separated page maps.</p>\n<p>In the settings :</p>\n<pre>FOO_STATICPAGES = (\n    (r'foo/$', \"foo/index.html\", 'foo-index'),\n    (r'foo/part1/$', \"foo/part1.html\", 'foo-part1'),\n    (r'foo/part2/$', \"foo/part2.html\", 'foo-part2'),\n)\n\nBAR_STATICPAGES = (\n    (r'bar/$', \"bar/index.html\", 'bar-index'),\n    (r'bar/part1/$', \"bar/part1.html\", 'bar-part1'),\n    (r'bar/part2/$', \"bar/part2.html\", 'bar-part2'),\n)\n</pre>\n<p>Then in your <tt>urls.py</tt> :</p>\n<pre>from django.conf import settings\nfrom staticpages.urls import loaders\n\nurlpatterns = patterns('', *loaders.mount_staticpages(*settings.FOO_STATICPAGES)) + urlpatterns\nif settings.DEBUG:\n    urlpatterns = patterns('', *loaders.mount_staticpages(*settings.BAR_STATICPAGES)) + urlpatterns\n</pre>\n<p>Note the usage of <tt>settings.DEBUG</tt>, this is an example of the usage you can do of multiple separated page maps, the <em>bar</em> pages will not be published in production environnment but the <em>foo</em> pages will be.</p>\n<p>Also for the <tt>sitemap.xml</tt> with Django sitemaps, you will have to do something like this in your <tt>urls.py</tt> :</p>\n<pre>from django.conf import settings\nfrom staticpages.sitemaps import StaticPageSitemapAuto\n\nclass FooSitemap(StaticPageSitemapAuto):\n    pages_map = settings.FOO_STATICPAGES\n\nclass BarSitemap(StaticPageSitemapAuto):\n    pages_map = settings.BAR_STATICPAGES\n\n\n# Enabled sitemaps\nsitemaps = {\n    'foo': FooSitemap,\n    'bar': BarSitemap,\n}\n\nurlpatterns += patterns('django.contrib.sitemaps.views',\n    url(r'^sitemap\\.xml$', 'sitemap', {'sitemaps': sitemaps}),\n) + urlpatterns\n</pre>\n</div>\n<div id=\"static-page-view\">\n<h3>Static page view</h3>\n<p>Also note that each page will use the view <tt>staticpages.views.StaticPageView</tt>. This is just a inherit from <tt>django.views.generic.TemplateView</tt> that will contains a variable <tt>page_map</tt>. This variable contains the used pages map. You can use it in your templates like so :</p>\n<pre>&lt;ul&gt;{% for url_pattern,template_name,url_name in page_map %}\n    &lt;li&gt;&lt;a href=\"{% url url_name %}\"&gt;{{ template_name }}&lt;/a&gt;&lt;/li&gt;\n{% endfor %}&lt;/ul&gt;\n</pre>\n<p>This will list all available static pages in the pages map, useful to have an automatic browsable index of them.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1243912, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "be6ca51820fe5491f20899948c92200e", "sha256": "4de4a6bc18525975358d24bdfe991f2b28ba48ec46b1e96c77882e83090f06e6"}, "downloads": -1, "filename": "emencia-django-staticpages-0.1.tar.gz", "has_sig": false, "md5_digest": "be6ca51820fe5491f20899948c92200e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3689, "upload_time": "2014-07-10T00:26:32", "upload_time_iso_8601": "2014-07-10T00:26:32.471790Z", "url": "https://files.pythonhosted.org/packages/c0/f1/ef02ad28fd25d81a4fbe1a0d4895983845cf89dc9cb83b43c636dd27db0b/emencia-django-staticpages-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "ab73f7c8147ffd3721b7012d7243e2bc", "sha256": "616529511bed3feef44224c4e423e58c23db0920f7c59c6ed41796c19701df42"}, "downloads": -1, "filename": "emencia-django-staticpages-0.2.tar.gz", "has_sig": false, "md5_digest": "ab73f7c8147ffd3721b7012d7243e2bc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4407, "upload_time": "2014-07-11T01:17:22", "upload_time_iso_8601": "2014-07-11T01:17:22.196537Z", "url": "https://files.pythonhosted.org/packages/a0/ec/648d4d40e06e448209b8c5e7358e94d92aa733a0be61389bab8b3d7fe9f1/emencia-django-staticpages-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "4230226a5b690c1e8c62a014978ac3bc", "sha256": "f2f3764d7829df1c7fa1678c0715cb137ae78860a94c1de0b306bed2379909f9"}, "downloads": -1, "filename": "emencia-django-staticpages-0.3.tar.gz", "has_sig": false, "md5_digest": "4230226a5b690c1e8c62a014978ac3bc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4582, "upload_time": "2014-07-11T01:51:31", "upload_time_iso_8601": "2014-07-11T01:51:31.367728Z", "url": "https://files.pythonhosted.org/packages/36/af/20be0001c8abd6553776deeefb6474168fc6ee30283206c53316e29fb621/emencia-django-staticpages-0.3.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "eeef6628dfa201c3bb08e46260eef869", "sha256": "facbf96490fe422309631754cb00e977ecce7f61c4ceb76a1cff1e128422a0c4"}, "downloads": -1, "filename": "emencia-django-staticpages-0.3.1.tar.gz", "has_sig": false, "md5_digest": "eeef6628dfa201c3bb08e46260eef869", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4968, "upload_time": "2014-07-12T01:10:37", "upload_time_iso_8601": "2014-07-12T01:10:37.379136Z", "url": "https://files.pythonhosted.org/packages/f4/72/a6abe4832a849e95cd4d2c9f8c9b52b9f191e1a395ff5898b24048017f11/emencia-django-staticpages-0.3.1.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "8aa5614ab216f084e315751e1a0d419f", "sha256": "987b56c5e29494cc939908e0ee5b2505e0c9f8a20213956b506667be05609b53"}, "downloads": -1, "filename": "emencia-django-staticpages-0.4.tar.gz", "has_sig": false, "md5_digest": "8aa5614ab216f084e315751e1a0d419f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4942, "upload_time": "2014-10-01T03:06:06", "upload_time_iso_8601": "2014-10-01T03:06:06.534041Z", "url": "https://files.pythonhosted.org/packages/c6/b9/8a27e5a0a08a8b460d0a84307d07a7f33b2ac2b8fbf82b8b4cffb4d38aeb/emencia-django-staticpages-0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8aa5614ab216f084e315751e1a0d419f", "sha256": "987b56c5e29494cc939908e0ee5b2505e0c9f8a20213956b506667be05609b53"}, "downloads": -1, "filename": "emencia-django-staticpages-0.4.tar.gz", "has_sig": false, "md5_digest": "8aa5614ab216f084e315751e1a0d419f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4942, "upload_time": "2014-10-01T03:06:06", "upload_time_iso_8601": "2014-10-01T03:06:06.534041Z", "url": "https://files.pythonhosted.org/packages/c6/b9/8a27e5a0a08a8b460d0a84307d07a7f33b2ac2b8fbf82b8b4cffb4d38aeb/emencia-django-staticpages-0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:46:37 2020"}