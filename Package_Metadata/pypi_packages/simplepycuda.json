{"info": {"author": "Igor Machado and Rodolfo Araujo", "author_email": "igor.machado@ime.uerj.br", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2"], "description": "The library cudapp is the basis of SimplePyCuda, a simple wrapper for CUDA functions in Python.\nThe idea is to workaround the issues regarding Context in old CUDA versions, that persist on PyCuda.\n\nUsage:\n\n\"make [all]\" will build the lib cudapp.so\n\n\"make run\" will execute \"testSimplePyCuda.py\", using library \"simplepycuda.py\".\n\n==========================\n\nIn Python:\n\n```python\nimport ctypes\nimport numpy\nfrom simplepycuda import SimplePyCuda, SimpleSourceModule, grid, block\n\ndef classicExample(cuda):\n\ta = numpy.random.randn(4,4)\n\ta = a.astype(numpy.float32)\n\tprint a\n\ta_gpu = cuda.mem_alloc(a.nbytes)\n\tcuda.memcpy_htod(a_gpu, a)\n\tmod = SimpleSourceModule(\"\"\"\n          #include<stdio.h>\n          __global__ void doublify ( float* a )\n\t  {\n\t    int idx = threadIdx.x + threadIdx.y*4;\n\t    a[idx] *= 2;\n            //printf(\"oi=%d\\\\n\",idx);\n\t  }\n\t\"\"\")\n\tfunc = mod.get_function(\"doublify\")\n\t# TODO: this next line will be made automatically in get_function method... just need a few more time :)\n\tfunc.argtypes = [ctypes.c_void_p, grid, block, ctypes.c_ulong, ctypes.c_ulong]\n\tfunc(a_gpu, grid(1,1), block(4,4,1), 0, 0)\n\tcuda.memcpy_dtoh(a, a_gpu)\n\tcuda.deviceSynchronize()\n\tprint a\n\tcuda.free(a_gpu) # this is not necessary in PyCUDA\n\tprint \"Finished\"\n\ndef main():\n\tcuda = SimplePyCuda()\n\n\tclassicExample(cuda)\t\n\treturn 0\n```\n\n[MIT License](LICENSE) - Igor Machado Coelho and Rodolfo Pereira Araujo (2017)", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/igormcoelho/simple-pycuda", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "simplepycuda", "package_url": "https://pypi.org/project/simplepycuda/", "platform": "", "project_url": "https://pypi.org/project/simplepycuda/", "project_urls": {"Homepage": "https://github.com/igormcoelho/simple-pycuda"}, "release_url": "https://pypi.org/project/simplepycuda/0.0.1/", "requires_dist": null, "requires_python": "", "summary": "A simple wrapper for CUDA functions in Python.", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>The library cudapp is the basis of SimplePyCuda, a simple wrapper for CUDA functions in Python.\nThe idea is to workaround the issues regarding Context in old CUDA versions, that persist on PyCuda.</p>\n<p>Usage:</p>\n<p>\"make [all]\" will build the lib cudapp.so</p>\n<p>\"make run\" will execute \"testSimplePyCuda.py\", using library \"simplepycuda.py\".</p>\n<p>==========================</p>\n<p>In Python:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">ctypes</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span>\n<span class=\"kn\">from</span> <span class=\"nn\">simplepycuda</span> <span class=\"kn\">import</span> <span class=\"n\">SimplePyCuda</span><span class=\"p\">,</span> <span class=\"n\">SimpleSourceModule</span><span class=\"p\">,</span> <span class=\"n\">grid</span><span class=\"p\">,</span> <span class=\"n\">block</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">classicExample</span><span class=\"p\">(</span><span class=\"n\">cuda</span><span class=\"p\">):</span>\n\t<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n\t<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float32</span><span class=\"p\">)</span>\n\t<span class=\"nb\">print</span> <span class=\"n\">a</span>\n\t<span class=\"n\">a_gpu</span> <span class=\"o\">=</span> <span class=\"n\">cuda</span><span class=\"o\">.</span><span class=\"n\">mem_alloc</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">nbytes</span><span class=\"p\">)</span>\n\t<span class=\"n\">cuda</span><span class=\"o\">.</span><span class=\"n\">memcpy_htod</span><span class=\"p\">(</span><span class=\"n\">a_gpu</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">)</span>\n\t<span class=\"n\">mod</span> <span class=\"o\">=</span> <span class=\"n\">SimpleSourceModule</span><span class=\"p\">(</span><span class=\"s2\">\"\"\"</span>\n<span class=\"s2\">          #include&lt;stdio.h&gt;</span>\n<span class=\"s2\">          __global__ void doublify ( float* a )</span>\n<span class=\"s2\">\t  {</span>\n<span class=\"s2\">\t    int idx = threadIdx.x + threadIdx.y*4;</span>\n<span class=\"s2\">\t    a[idx] *= 2;</span>\n<span class=\"s2\">            //printf(\"oi=</span><span class=\"si\">%d</span><span class=\"se\">\\\\</span><span class=\"s2\">n\",idx);</span>\n<span class=\"s2\">\t  }</span>\n<span class=\"s2\">\t\"\"\"</span><span class=\"p\">)</span>\n\t<span class=\"n\">func</span> <span class=\"o\">=</span> <span class=\"n\">mod</span><span class=\"o\">.</span><span class=\"n\">get_function</span><span class=\"p\">(</span><span class=\"s2\">\"doublify\"</span><span class=\"p\">)</span>\n\t<span class=\"c1\"># TODO: this next line will be made automatically in get_function method... just need a few more time :)</span>\n\t<span class=\"n\">func</span><span class=\"o\">.</span><span class=\"n\">argtypes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">ctypes</span><span class=\"o\">.</span><span class=\"n\">c_void_p</span><span class=\"p\">,</span> <span class=\"n\">grid</span><span class=\"p\">,</span> <span class=\"n\">block</span><span class=\"p\">,</span> <span class=\"n\">ctypes</span><span class=\"o\">.</span><span class=\"n\">c_ulong</span><span class=\"p\">,</span> <span class=\"n\">ctypes</span><span class=\"o\">.</span><span class=\"n\">c_ulong</span><span class=\"p\">]</span>\n\t<span class=\"n\">func</span><span class=\"p\">(</span><span class=\"n\">a_gpu</span><span class=\"p\">,</span> <span class=\"n\">grid</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">block</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\t<span class=\"n\">cuda</span><span class=\"o\">.</span><span class=\"n\">memcpy_dtoh</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">a_gpu</span><span class=\"p\">)</span>\n\t<span class=\"n\">cuda</span><span class=\"o\">.</span><span class=\"n\">deviceSynchronize</span><span class=\"p\">()</span>\n\t<span class=\"nb\">print</span> <span class=\"n\">a</span>\n\t<span class=\"n\">cuda</span><span class=\"o\">.</span><span class=\"n\">free</span><span class=\"p\">(</span><span class=\"n\">a_gpu</span><span class=\"p\">)</span> <span class=\"c1\"># this is not necessary in PyCUDA</span>\n\t<span class=\"nb\">print</span> <span class=\"s2\">\"Finished\"</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n\t<span class=\"n\">cuda</span> <span class=\"o\">=</span> <span class=\"n\">SimplePyCuda</span><span class=\"p\">()</span>\n\n\t<span class=\"n\">classicExample</span><span class=\"p\">(</span><span class=\"n\">cuda</span><span class=\"p\">)</span>\t\n\t<span class=\"k\">return</span> <span class=\"mi\">0</span>\n</pre>\n<p><a href=\"LICENSE\" rel=\"nofollow\">MIT License</a> - Igor Machado Coelho and Rodolfo Pereira Araujo (2017)</p>\n\n          </div>"}, "last_serial": 4198124, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "3a909c3c03914c9b31148a7b8311a468", "sha256": "6c686507fecc9d4aee50001a3f915fef711c0f2fbc7315eb22c76ca01c4bd339"}, "downloads": -1, "filename": "simplepycuda-0.0.1.tar.gz", "has_sig": false, "md5_digest": "3a909c3c03914c9b31148a7b8311a468", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8255, "upload_time": "2018-08-23T00:23:30", "upload_time_iso_8601": "2018-08-23T00:23:30.850797Z", "url": "https://files.pythonhosted.org/packages/1e/ae/c7adf1c9a65f6aa7d99bbb22c59cc736ef2ec3bd0eb0a3629783cb21dc53/simplepycuda-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3a909c3c03914c9b31148a7b8311a468", "sha256": "6c686507fecc9d4aee50001a3f915fef711c0f2fbc7315eb22c76ca01c4bd339"}, "downloads": -1, "filename": "simplepycuda-0.0.1.tar.gz", "has_sig": false, "md5_digest": "3a909c3c03914c9b31148a7b8311a468", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8255, "upload_time": "2018-08-23T00:23:30", "upload_time_iso_8601": "2018-08-23T00:23:30.850797Z", "url": "https://files.pythonhosted.org/packages/1e/ae/c7adf1c9a65f6aa7d99bbb22c59cc736ef2ec3bd0eb0a3629783cb21dc53/simplepycuda-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:10:20 2020"}