{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": ["Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: Implementation :: PyPy"], "description": "Object Watchdog\n===============\n\nThis library allow to monitor changes in a Python object and, when some attribute changes, then launch callbacks.\n\nInstall\n=======\n\n.. code-block:: console\n\n    $ pip install object-watchdog\n\nCallbacks types\n===============\n\nThere're 3 types of callbacks:\n\n- Async callbacks: launch coroutines as callbacks\n- Callbacks: launch functions as callbacks\n- Cache callbacks: Launch methods of class to update caches\n\nGlobal vs local callbacks\n=========================\n\n- Local callbacks are called only for these classes that have set the callbacks\n- Global callbacks are called for all classes that uses the Object Watchdog\n\nHow to usage\n============\n\nObject Watchdog should be used as metaclass:\n\n.. code-block:: python\n\n    from object_watchdog import ObjectWatchdog\n\n    class User(metaclass=ObjectWatchdog):\n        ...\n\nDefining local callbacks\n========================\n\nCallbacks could be defined in running time and in definition.\n\nDefinition mode\n---------------\n\nAt the classes you can put callbacks when any attribute changes, you can define these types of callbacks in these properties:\n\n- `__async_callbacks__`\n- `__callbacks__`\n- `__cache_callbacks__`\n\nExample:\n\n.. code-block:: python\n\n    async def async_callback(instance, klass_name, key, value):\n        print(f\"[!] New change local callback in key '{key}'. New value '{value}'\")\n\n\n    async def async_callback2(instance, klass_name, key, value):\n        print(f\"[0] New change local callback in key '{key}'. New value '{value}'\")\n\n\n    def callback(instance, klass_name, key, value):\n        print(f\"[!] Sync New change local callback in key '{key}'. New value '{value}'\")\n\n\n    class User(metaclass=ObjectWatchdog):\n        __async_callbacks__ = [async_callback, async_callback2]\n        __callbacks__ = [callback]\n        __cache_callbacks__ = [\"__build_hash__\"]\n\n        ...\n\nRunning time\n------------\n\nIf you need to add some callback in run time, Metaclass add these methods:\n\n- `add_callback`\n- `add_async_callback`\n- `add_cache_callback`\n\n.. code-block:: python\n\n    import asyncio\n\n    from typing import Dict\n    from dataclasses import dataclass, field\n\n    from object_watchdog import ObjectWatchdog\n\n\n    @dataclass\n    class User(metaclass=ObjectWatchdog):\n        user: str\n        password: str\n\n        @property\n        def hash(self):\n            if not self.__cached_hash:\n                self.__build_hash__()\n            return self.__cached_hash\n\n        def __build_hash__(self, key: str = None):\n            if key and key != \"user\" and key != \"password\":\n                return\n\n            h = hashlib.sha512()\n            h.update(\n                f\"{self.user}#{self.password}\".encode(\"UTF-8\")\n            )\n\n            self.__cached_hash = h.hexdigest()\n\n    async def coro_callback(instance, klass_name, key, value):\n        print(f\"[!] New change in key '{key}'. New value '{value}'\")\n\n\n    async def main():\n\n        u = User(user=\"john\", password=\"password\")\n        u.add_async_callback(coro_callback)\n        u.add_cache_callback(\"__build_hash__\")\n\n        print(\"[*] Modifying property 'value'\")\n        u.password = \"new password!\"\n\n\n    def main():\n        asyncio.run(coro_main())\n\n\n    main()\n\n\nDefining global callbacks\n=========================\n\nGlobal callback applies to all classes (or dataclasses) that uses ObjectWatchdog as a metaclass.\n\nIf you want to call any function / coroutine when some class have been modified, you also can use this method. ObjectWatchdog metaclass has these methods:\n\n- `add_global_callback`\n- `add_global_async_callback`\n- `add_global_cache_callback`\n\n.. code-block:: python\n\n    import asyncio\n\n    from typing import Dict\n    from dataclasses import dataclass, field\n\n    from object_watchdog import ObjectWatchdog\n\n\n    @dataclass\n    class MyClass(metaclass=ObjectWatchdog):\n        value: str\n        my_dict: Dict = field(default_factory=dict)\n\n\n    @dataclass\n    class MyClass2(metaclass=ObjectWatchdog):\n        value: str\n        my_dict: Dict = field(default_factory=dict)\n\n\n    async def coro_local_callback(instance, klass_name, key, value):\n        print(f\"[!] New change local callback in key '{key}'. New value '{value}'\")\n\n\n    async def coro_global_callback(instance, klass_name, key, value):\n        print(f\"[!] New change global callback in instance '{repr(instance)}' key '{key}'. New value '{value}'\")\n\n\n    async def coro_main():\n\n        ObjectWatchdog.add_global_callback(coro_global_callback)\n\n        u1 = MyClass(value=\"class 1\", my_dict={\"k\": \"v\"})\n        u2 = MyClass2(value=\"class 2\", my_dict={\"k\": \"v\"})\n\n        print(\"[*] Modifying property 'value'\")\n        u1.value = \"new value!\"\n        u2.value = \"new value!\"\n\n\n    def main():\n        asyncio.run(coro_main())\n\n\n    main()\n\nTODO\n====\n\n\nChangelog\n=========\n\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/cr0hn/object-watchdog", "keywords": "monitor,watchdog,metaclass", "license": "License :: OSI Approved :: BSD License", "maintainer": "", "maintainer_email": "", "name": "object-watchdog", "package_url": "https://pypi.org/project/object-watchdog/", "platform": "", "project_url": "https://pypi.org/project/object-watchdog/", "project_urls": {"Homepage": "https://github.com/cr0hn/object-watchdog"}, "release_url": "https://pypi.org/project/object-watchdog/0.0.1/", "requires_dist": null, "requires_python": "", "summary": "Watch Python object for changes in runtime and launch callbacks", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"object-watchdog\">\n<h2>Object Watchdog</h2>\n<p>This library allow to monitor changes in a Python object and, when some attribute changes, then launch callbacks.</p>\n</div>\n<div id=\"install\">\n<h2>Install</h2>\n<pre><span class=\"gp\">$</span> pip install object-watchdog\n</pre>\n</div>\n<div id=\"callbacks-types\">\n<h2>Callbacks types</h2>\n<p>There\u2019re 3 types of callbacks:</p>\n<ul>\n<li>Async callbacks: launch coroutines as callbacks</li>\n<li>Callbacks: launch functions as callbacks</li>\n<li>Cache callbacks: Launch methods of class to update caches</li>\n</ul>\n</div>\n<div id=\"global-vs-local-callbacks\">\n<h2>Global vs local callbacks</h2>\n<ul>\n<li>Local callbacks are called only for these classes that have set the callbacks</li>\n<li>Global callbacks are called for all classes that uses the Object Watchdog</li>\n</ul>\n</div>\n<div id=\"how-to-usage\">\n<h2>How to usage</h2>\n<p>Object Watchdog should be used as metaclass:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">object_watchdog</span> <span class=\"kn\">import</span> <span class=\"n\">ObjectWatchdog</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">(</span><span class=\"n\">metaclass</span><span class=\"o\">=</span><span class=\"n\">ObjectWatchdog</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n</pre>\n</div>\n<div id=\"defining-local-callbacks\">\n<h2>Defining local callbacks</h2>\n<p>Callbacks could be defined in running time and in definition.</p>\n<div id=\"definition-mode\">\n<h3>Definition mode</h3>\n<p>At the classes you can put callbacks when any attribute changes, you can define these types of callbacks in these properties:</p>\n<ul>\n<li><cite>__async_callbacks__</cite></li>\n<li><cite>__callbacks__</cite></li>\n<li><cite>__cache_callbacks__</cite></li>\n</ul>\n<p>Example:</p>\n<pre><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">async_callback</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"p\">,</span> <span class=\"n\">klass_name</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"[!] New change local callback in key '</span><span class=\"si\">{</span><span class=\"n\">key</span><span class=\"si\">}</span><span class=\"s2\">'. New value '</span><span class=\"si\">{</span><span class=\"n\">value</span><span class=\"si\">}</span><span class=\"s2\">'\"</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">async_callback2</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"p\">,</span> <span class=\"n\">klass_name</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"[0] New change local callback in key '</span><span class=\"si\">{</span><span class=\"n\">key</span><span class=\"si\">}</span><span class=\"s2\">'. New value '</span><span class=\"si\">{</span><span class=\"n\">value</span><span class=\"si\">}</span><span class=\"s2\">'\"</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">callback</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"p\">,</span> <span class=\"n\">klass_name</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"[!] Sync New change local callback in key '</span><span class=\"si\">{</span><span class=\"n\">key</span><span class=\"si\">}</span><span class=\"s2\">'. New value '</span><span class=\"si\">{</span><span class=\"n\">value</span><span class=\"si\">}</span><span class=\"s2\">'\"</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">(</span><span class=\"n\">metaclass</span><span class=\"o\">=</span><span class=\"n\">ObjectWatchdog</span><span class=\"p\">):</span>\n    <span class=\"n\">__async_callbacks__</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">async_callback</span><span class=\"p\">,</span> <span class=\"n\">async_callback2</span><span class=\"p\">]</span>\n    <span class=\"n\">__callbacks__</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">callback</span><span class=\"p\">]</span>\n    <span class=\"n\">__cache_callbacks__</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"__build_hash__\"</span><span class=\"p\">]</span>\n\n    <span class=\"o\">...</span>\n</pre>\n</div>\n<div id=\"running-time\">\n<h3>Running time</h3>\n<p>If you need to add some callback in run time, Metaclass add these methods:</p>\n<ul>\n<li><cite>add_callback</cite></li>\n<li><cite>add_async_callback</cite></li>\n<li><cite>add_cache_callback</cite></li>\n</ul>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Dict</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dataclasses</span> <span class=\"kn\">import</span> <span class=\"n\">dataclass</span><span class=\"p\">,</span> <span class=\"n\">field</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">object_watchdog</span> <span class=\"kn\">import</span> <span class=\"n\">ObjectWatchdog</span>\n\n\n<span class=\"nd\">@dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">(</span><span class=\"n\">metaclass</span><span class=\"o\">=</span><span class=\"n\">ObjectWatchdog</span><span class=\"p\">):</span>\n    <span class=\"n\">user</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">password</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">hash</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__cached_hash</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__build_hash__</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__cached_hash</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__build_hash__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">key</span> <span class=\"ow\">and</span> <span class=\"n\">key</span> <span class=\"o\">!=</span> <span class=\"s2\">\"user\"</span> <span class=\"ow\">and</span> <span class=\"n\">key</span> <span class=\"o\">!=</span> <span class=\"s2\">\"password\"</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span>\n\n        <span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"n\">hashlib</span><span class=\"o\">.</span><span class=\"n\">sha512</span><span class=\"p\">()</span>\n        <span class=\"n\">h</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span>\n            <span class=\"sa\">f</span><span class=\"s2\">\"</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"si\">}</span><span class=\"s2\">#</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">password</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"s2\">\"UTF-8\"</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__cached_hash</span> <span class=\"o\">=</span> <span class=\"n\">h</span><span class=\"o\">.</span><span class=\"n\">hexdigest</span><span class=\"p\">()</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">coro_callback</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"p\">,</span> <span class=\"n\">klass_name</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"[!] New change in key '</span><span class=\"si\">{</span><span class=\"n\">key</span><span class=\"si\">}</span><span class=\"s2\">'. New value '</span><span class=\"si\">{</span><span class=\"n\">value</span><span class=\"si\">}</span><span class=\"s2\">'\"</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n\n    <span class=\"n\">u</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">=</span><span class=\"s2\">\"john\"</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"s2\">\"password\"</span><span class=\"p\">)</span>\n    <span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">add_async_callback</span><span class=\"p\">(</span><span class=\"n\">coro_callback</span><span class=\"p\">)</span>\n    <span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">add_cache_callback</span><span class=\"p\">(</span><span class=\"s2\">\"__build_hash__\"</span><span class=\"p\">)</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"[*] Modifying property 'value'\"</span><span class=\"p\">)</span>\n    <span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">password</span> <span class=\"o\">=</span> <span class=\"s2\">\"new password!\"</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">coro_main</span><span class=\"p\">())</span>\n\n\n<span class=\"n\">main</span><span class=\"p\">()</span>\n</pre>\n</div>\n</div>\n<div id=\"defining-global-callbacks\">\n<h2>Defining global callbacks</h2>\n<p>Global callback applies to all classes (or dataclasses) that uses ObjectWatchdog as a metaclass.</p>\n<p>If you want to call any function / coroutine when some class have been modified, you also can use this method. ObjectWatchdog metaclass has these methods:</p>\n<ul>\n<li><cite>add_global_callback</cite></li>\n<li><cite>add_global_async_callback</cite></li>\n<li><cite>add_global_cache_callback</cite></li>\n</ul>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Dict</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dataclasses</span> <span class=\"kn\">import</span> <span class=\"n\">dataclass</span><span class=\"p\">,</span> <span class=\"n\">field</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">object_watchdog</span> <span class=\"kn\">import</span> <span class=\"n\">ObjectWatchdog</span>\n\n\n<span class=\"nd\">@dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">MyClass</span><span class=\"p\">(</span><span class=\"n\">metaclass</span><span class=\"o\">=</span><span class=\"n\">ObjectWatchdog</span><span class=\"p\">):</span>\n    <span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">my_dict</span><span class=\"p\">:</span> <span class=\"n\">Dict</span> <span class=\"o\">=</span> <span class=\"n\">field</span><span class=\"p\">(</span><span class=\"n\">default_factory</span><span class=\"o\">=</span><span class=\"nb\">dict</span><span class=\"p\">)</span>\n\n\n<span class=\"nd\">@dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">MyClass2</span><span class=\"p\">(</span><span class=\"n\">metaclass</span><span class=\"o\">=</span><span class=\"n\">ObjectWatchdog</span><span class=\"p\">):</span>\n    <span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">my_dict</span><span class=\"p\">:</span> <span class=\"n\">Dict</span> <span class=\"o\">=</span> <span class=\"n\">field</span><span class=\"p\">(</span><span class=\"n\">default_factory</span><span class=\"o\">=</span><span class=\"nb\">dict</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">coro_local_callback</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"p\">,</span> <span class=\"n\">klass_name</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"[!] New change local callback in key '</span><span class=\"si\">{</span><span class=\"n\">key</span><span class=\"si\">}</span><span class=\"s2\">'. New value '</span><span class=\"si\">{</span><span class=\"n\">value</span><span class=\"si\">}</span><span class=\"s2\">'\"</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">coro_global_callback</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"p\">,</span> <span class=\"n\">klass_name</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"[!] New change global callback in instance '</span><span class=\"si\">{</span><span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s2\">' key '</span><span class=\"si\">{</span><span class=\"n\">key</span><span class=\"si\">}</span><span class=\"s2\">'. New value '</span><span class=\"si\">{</span><span class=\"n\">value</span><span class=\"si\">}</span><span class=\"s2\">'\"</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">coro_main</span><span class=\"p\">():</span>\n\n    <span class=\"n\">ObjectWatchdog</span><span class=\"o\">.</span><span class=\"n\">add_global_callback</span><span class=\"p\">(</span><span class=\"n\">coro_global_callback</span><span class=\"p\">)</span>\n\n    <span class=\"n\">u1</span> <span class=\"o\">=</span> <span class=\"n\">MyClass</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">=</span><span class=\"s2\">\"class 1\"</span><span class=\"p\">,</span> <span class=\"n\">my_dict</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"k\"</span><span class=\"p\">:</span> <span class=\"s2\">\"v\"</span><span class=\"p\">})</span>\n    <span class=\"n\">u2</span> <span class=\"o\">=</span> <span class=\"n\">MyClass2</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">=</span><span class=\"s2\">\"class 2\"</span><span class=\"p\">,</span> <span class=\"n\">my_dict</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"k\"</span><span class=\"p\">:</span> <span class=\"s2\">\"v\"</span><span class=\"p\">})</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"[*] Modifying property 'value'\"</span><span class=\"p\">)</span>\n    <span class=\"n\">u1</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"s2\">\"new value!\"</span>\n    <span class=\"n\">u2</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"s2\">\"new value!\"</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">coro_main</span><span class=\"p\">())</span>\n\n\n<span class=\"n\">main</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"todo\">\n<h2>TODO</h2>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n</div>\n\n          </div>"}, "last_serial": 7161964, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "2370cf66f50b7959a69bf3e29191e862", "sha256": "c3328ad51bb8325f3b94b1e6ab898f1c82d02edf1b32c0edfee96b8c50aa2145"}, "downloads": -1, "filename": "object_watchdog-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "2370cf66f50b7959a69bf3e29191e862", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5307, "upload_time": "2020-05-04T07:40:16", "upload_time_iso_8601": "2020-05-04T07:40:16.707205Z", "url": "https://files.pythonhosted.org/packages/e1/9a/6b2fb89b86e0f5763d2ae8090d87419063d0c734573904b73383e0bf6b0e/object_watchdog-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6bead1e125188c6b16889c13be5eb1f6", "sha256": "43c9fb0966135ff7b57b029612762258433c0435737549a8dfe73ba20f1a735d"}, "downloads": -1, "filename": "object-watchdog-0.0.1.tar.gz", "has_sig": false, "md5_digest": "6bead1e125188c6b16889c13be5eb1f6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5712, "upload_time": "2020-05-04T07:40:19", "upload_time_iso_8601": "2020-05-04T07:40:19.522972Z", "url": "https://files.pythonhosted.org/packages/e6/ca/d80707193325e92d55dd0ebd8c9df175a006c6bd0957e0eee39a69f43c02/object-watchdog-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2370cf66f50b7959a69bf3e29191e862", "sha256": "c3328ad51bb8325f3b94b1e6ab898f1c82d02edf1b32c0edfee96b8c50aa2145"}, "downloads": -1, "filename": "object_watchdog-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "2370cf66f50b7959a69bf3e29191e862", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5307, "upload_time": "2020-05-04T07:40:16", "upload_time_iso_8601": "2020-05-04T07:40:16.707205Z", "url": "https://files.pythonhosted.org/packages/e1/9a/6b2fb89b86e0f5763d2ae8090d87419063d0c734573904b73383e0bf6b0e/object_watchdog-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6bead1e125188c6b16889c13be5eb1f6", "sha256": "43c9fb0966135ff7b57b029612762258433c0435737549a8dfe73ba20f1a735d"}, "downloads": -1, "filename": "object-watchdog-0.0.1.tar.gz", "has_sig": false, "md5_digest": "6bead1e125188c6b16889c13be5eb1f6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5712, "upload_time": "2020-05-04T07:40:19", "upload_time_iso_8601": "2020-05-04T07:40:19.522972Z", "url": "https://files.pythonhosted.org/packages/e6/ca/d80707193325e92d55dd0ebd8c9df175a006c6bd0957e0eee39a69f43c02/object-watchdog-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:48 2020"}