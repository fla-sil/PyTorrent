{"info": {"author": "Matt Williams", "author_email": "matt@milliams.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "******\nMebula\n******\n\nMebula is a framework which you can use in your testing code to mock your calls to cloud providers' APIs.\nAt the moment, Oracle's OCI, Google Cloud and Microsoft Azure are supported.\n\nInstallation\n============\n\n- For Microsoft Azure, install the ``mebula[azure]`` package.\n- For Google Cloud, install the ``mebula[google]`` package.\n- For Oracle's OCI, install the ``mebula[oracle]`` package.\n\nUsage\n=====\n\nAzure\n-----\n\nYou can use the ``mock_azure`` context manager and then use the Azure functions as normal:\n\n.. code:: python\n\n    from azure.common.client_factory import get_client_from_json_dict\n    from azure.mgmt.compute import ComputeManagementClient\n\n    from mebula.azure import mock_azure\n\n\n    def test_azure():\n        with mock_azure():\n            config_dict = {\n                \"clientId\": \"ad735158-65ca-11e7-ba4d-ecb1d756380e\",\n                \"clientSecret\": \"b70bb224-65ca-11e7-810c-ecb1d756380e\",\n                \"subscriptionId\": \"bfc42d3a-65ca-11e7-95cf-ecb1d756380e\",\n                \"tenantId\": \"c81da1d8-65ca-11e7-b1d1-ecb1d756380e\",\n                \"activeDirectoryEndpointUrl\": \"https://login.microsoftonline.com\",\n                \"resourceManagerEndpointUrl\": \"https://management.azure.com/\",\n                \"activeDirectoryGraphResourceId\": \"https://graph.windows.net/\",\n                \"sqlManagementEndpointUrl\": \"https://management.core.windows.net:8443/\",\n                \"galleryEndpointUrl\": \"https://gallery.azure.com/\",\n                \"managementEndpointUrl\": \"https://management.core.windows.net/\",\n            }\n            client = get_client_from_json_dict(ComputeManagementClient, config_dict)\n\n            assert list(client.virtual_machines.list(\"group\")) == []\n\nGoogle\n------\n\nYou can use the ``mock_google`` context manager and then use the Google API functions as normal:\n\n.. code:: python\n\n    import googleapiclient.discovery\n\n    from mebula import mock_google\n\n\n    def test_google(client):\n        with mock_google():\n            client = googleapiclient.discovery.build(\"compute\", \"v1\")\n\n            assert client.instances().list(project=\"foo\", zone=\"bar\").execute() == {}\n\nOracle\n------\n\nYou can use the ``mock_oracle`` context manager and then use the Oracle ``oci`` functions as normal:\n\n.. code:: python\n\n    import oci\n\n    from mebula.oracle import mock_oracle\n\n\n    def test_oracle():\n        with mock_oracle():\n            compute = oci.core.ComputeClient(config={})\n\n            assert compute.list_instances(\"foo\").data == []\n\nCoverage\n========\n\nCoverage is very minimal at the moment. Only launching and listing instances is supported.\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/milliams/mebula", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "mebula", "package_url": "https://pypi.org/project/mebula/", "platform": "", "project_url": "https://pypi.org/project/mebula/", "project_urls": {"Homepage": "https://github.com/milliams/mebula", "Repository": "https://github.com/milliams/mebula"}, "release_url": "https://pypi.org/project/mebula/0.2.2/", "requires_dist": ["oci (>=2.10.0,<3.0.0); extra == \"oracle\"", "google-api-python-client (>=1.7.11,<2.0.0); extra == \"google\"", "azure (>=4.0.0,<5.0.0); extra == \"azure\"", "lark-parser (>=0.8.1,<0.9.0); extra == \"google\""], "requires_python": ">=3.6,<4.0", "summary": "", "version": "0.2.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Mebula is a framework which you can use in your testing code to mock your calls to cloud providers\u2019 APIs.\nAt the moment, Oracle\u2019s OCI, Google Cloud and Microsoft Azure are supported.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<ul>\n<li>For Microsoft Azure, install the <tt>mebula[azure]</tt> package.</li>\n<li>For Google Cloud, install the <tt>mebula[google]</tt> package.</li>\n<li>For Oracle\u2019s OCI, install the <tt>mebula[oracle]</tt> package.</li>\n</ul>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div id=\"azure\">\n<h3>Azure</h3>\n<p>You can use the <tt>mock_azure</tt> context manager and then use the Azure functions as normal:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">azure.common.client_factory</span> <span class=\"kn\">import</span> <span class=\"n\">get_client_from_json_dict</span>\n<span class=\"kn\">from</span> <span class=\"nn\">azure.mgmt.compute</span> <span class=\"kn\">import</span> <span class=\"n\">ComputeManagementClient</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">mebula.azure</span> <span class=\"kn\">import</span> <span class=\"n\">mock_azure</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">test_azure</span><span class=\"p\">():</span>\n    <span class=\"k\">with</span> <span class=\"n\">mock_azure</span><span class=\"p\">():</span>\n        <span class=\"n\">config_dict</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s2\">\"clientId\"</span><span class=\"p\">:</span> <span class=\"s2\">\"ad735158-65ca-11e7-ba4d-ecb1d756380e\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"clientSecret\"</span><span class=\"p\">:</span> <span class=\"s2\">\"b70bb224-65ca-11e7-810c-ecb1d756380e\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"subscriptionId\"</span><span class=\"p\">:</span> <span class=\"s2\">\"bfc42d3a-65ca-11e7-95cf-ecb1d756380e\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"tenantId\"</span><span class=\"p\">:</span> <span class=\"s2\">\"c81da1d8-65ca-11e7-b1d1-ecb1d756380e\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"activeDirectoryEndpointUrl\"</span><span class=\"p\">:</span> <span class=\"s2\">\"https://login.microsoftonline.com\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"resourceManagerEndpointUrl\"</span><span class=\"p\">:</span> <span class=\"s2\">\"https://management.azure.com/\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"activeDirectoryGraphResourceId\"</span><span class=\"p\">:</span> <span class=\"s2\">\"https://graph.windows.net/\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"sqlManagementEndpointUrl\"</span><span class=\"p\">:</span> <span class=\"s2\">\"https://management.core.windows.net:8443/\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"galleryEndpointUrl\"</span><span class=\"p\">:</span> <span class=\"s2\">\"https://gallery.azure.com/\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"managementEndpointUrl\"</span><span class=\"p\">:</span> <span class=\"s2\">\"https://management.core.windows.net/\"</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">get_client_from_json_dict</span><span class=\"p\">(</span><span class=\"n\">ComputeManagementClient</span><span class=\"p\">,</span> <span class=\"n\">config_dict</span><span class=\"p\">)</span>\n\n        <span class=\"k\">assert</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">virtual_machines</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"p\">(</span><span class=\"s2\">\"group\"</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"p\">[]</span>\n</pre>\n</div>\n<div id=\"google\">\n<h3>Google</h3>\n<p>You can use the <tt>mock_google</tt> context manager and then use the Google API functions as normal:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">googleapiclient.discovery</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">mebula</span> <span class=\"kn\">import</span> <span class=\"n\">mock_google</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">test_google</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">):</span>\n    <span class=\"k\">with</span> <span class=\"n\">mock_google</span><span class=\"p\">():</span>\n        <span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">googleapiclient</span><span class=\"o\">.</span><span class=\"n\">discovery</span><span class=\"o\">.</span><span class=\"n\">build</span><span class=\"p\">(</span><span class=\"s2\">\"compute\"</span><span class=\"p\">,</span> <span class=\"s2\">\"v1\"</span><span class=\"p\">)</span>\n\n        <span class=\"k\">assert</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">instances</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"p\">(</span><span class=\"n\">project</span><span class=\"o\">=</span><span class=\"s2\">\"foo\"</span><span class=\"p\">,</span> <span class=\"n\">zone</span><span class=\"o\">=</span><span class=\"s2\">\"bar\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"p\">{}</span>\n</pre>\n</div>\n<div id=\"oracle\">\n<h3>Oracle</h3>\n<p>You can use the <tt>mock_oracle</tt> context manager and then use the Oracle <tt>oci</tt> functions as normal:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">oci</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">mebula.oracle</span> <span class=\"kn\">import</span> <span class=\"n\">mock_oracle</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">test_oracle</span><span class=\"p\">():</span>\n    <span class=\"k\">with</span> <span class=\"n\">mock_oracle</span><span class=\"p\">():</span>\n        <span class=\"n\">compute</span> <span class=\"o\">=</span> <span class=\"n\">oci</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">ComputeClient</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"o\">=</span><span class=\"p\">{})</span>\n\n        <span class=\"k\">assert</span> <span class=\"n\">compute</span><span class=\"o\">.</span><span class=\"n\">list_instances</span><span class=\"p\">(</span><span class=\"s2\">\"foo\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">data</span> <span class=\"o\">==</span> <span class=\"p\">[]</span>\n</pre>\n</div>\n</div>\n<div id=\"coverage\">\n<h2>Coverage</h2>\n<p>Coverage is very minimal at the moment. Only launching and listing instances is supported.</p>\n</div>\n\n          </div>"}, "last_serial": 6507112, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "9413889bb55170e747548f36c5dde801", "sha256": "9f2ab40dbe5b3df09731c50ebfc15cd7826e494797422453335673f7810e03bc"}, "downloads": -1, "filename": "mebula-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "9413889bb55170e747548f36c5dde801", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 4284, "upload_time": "2020-01-16T17:00:18", "upload_time_iso_8601": "2020-01-16T17:00:18.054787Z", "url": "https://files.pythonhosted.org/packages/c8/65/b2f07a7d173ab0ccdb28036ea8e1fe719c190bc79d092307981276973000/mebula-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "eb70b5a0b5596204841a5f396728aeee", "sha256": "cfe7df20753cd5a756e69eef9a67c1218a18d384816e710f070c9a5a19e94df6"}, "downloads": -1, "filename": "mebula-0.1.0.tar.gz", "has_sig": false, "md5_digest": "eb70b5a0b5596204841a5f396728aeee", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 4082, "upload_time": "2020-01-16T17:00:19", "upload_time_iso_8601": "2020-01-16T17:00:19.730182Z", "url": "https://files.pythonhosted.org/packages/75/56/8d02f3761c2f153cc949418e791dc0f6bb6499d78a11d77c65c58b20b857/mebula-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "c2628960336f0f89aa462e4538f2a25f", "sha256": "88468e2e12e7b5be450e13bad3120180e81a160ba768be100e66c8905ef3e30c"}, "downloads": -1, "filename": "mebula-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c2628960336f0f89aa462e4538f2a25f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 4736, "upload_time": "2020-01-16T17:05:16", "upload_time_iso_8601": "2020-01-16T17:05:16.042778Z", "url": "https://files.pythonhosted.org/packages/5c/16/dc18bcb8d5573068d71cb87daba807a05cfe5d45994480e8d1d4acc50385/mebula-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e3a45e45f74eaf92d4bf6945554ab0e1", "sha256": "ab99949ec76ce1567434881061af8ce26065c2501e3fd5d47c9b0836185deeac"}, "downloads": -1, "filename": "mebula-0.1.1.tar.gz", "has_sig": false, "md5_digest": "e3a45e45f74eaf92d4bf6945554ab0e1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 4669, "upload_time": "2020-01-16T17:05:17", "upload_time_iso_8601": "2020-01-16T17:05:17.248569Z", "url": "https://files.pythonhosted.org/packages/1a/37/01b10d7a85f8d6b93e4646653c26c296806333e784004c944b1127790da4/mebula-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "3681822963fa20872972cddce8ecd6d4", "sha256": "71f09e3120ab89cf6d5201e36d014a6e316c25ebcaccbec66871a185c86bfe4d"}, "downloads": -1, "filename": "mebula-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "3681822963fa20872972cddce8ecd6d4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 4887, "upload_time": "2020-01-16T17:27:11", "upload_time_iso_8601": "2020-01-16T17:27:11.027051Z", "url": "https://files.pythonhosted.org/packages/e6/e3/93ae6044089f31c79736b3dcdc767bcdcd1325b35db931c799dab5fd46db/mebula-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7d75a93b1b4f1d91989162b515855be7", "sha256": "e99f9a161bb64301aeee489fb1d460723eeca5ee1e48e4044c80fe27414ec7b7"}, "downloads": -1, "filename": "mebula-0.1.2.tar.gz", "has_sig": false, "md5_digest": "7d75a93b1b4f1d91989162b515855be7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 4695, "upload_time": "2020-01-16T17:27:11", "upload_time_iso_8601": "2020-01-16T17:27:11.978792Z", "url": "https://files.pythonhosted.org/packages/b2/dd/b9184a5ab858514f387d1bc3ab2a8a730edb1aa83293b5f9ab6145f1d396/mebula-0.1.2.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "fae3dbe79657d04f1f41fc3bb310965b", "sha256": "28924bdd7496e518f81e0e56a4a89cfa6eb85f3293212682858b980708b2b754"}, "downloads": -1, "filename": "mebula-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "fae3dbe79657d04f1f41fc3bb310965b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 8781, "upload_time": "2020-01-23T14:50:00", "upload_time_iso_8601": "2020-01-23T14:50:00.317583Z", "url": "https://files.pythonhosted.org/packages/30/e4/737842295a6a5a236aa98b89f0dcafc36f6a1311bac3c400306e26b4cfd8/mebula-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0c6b8d4418842cd1fd1ee868da8b7734", "sha256": "8fd7031807969937ac11edd9a1f33b94754a43c4f2963c02e4fff4c9155c3cde"}, "downloads": -1, "filename": "mebula-0.2.0.tar.gz", "has_sig": false, "md5_digest": "0c6b8d4418842cd1fd1ee868da8b7734", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 7853, "upload_time": "2020-01-23T14:50:01", "upload_time_iso_8601": "2020-01-23T14:50:01.555166Z", "url": "https://files.pythonhosted.org/packages/64/fb/df5f74d614f3797fdf5f1c84e039acdf9e833fb6f06b4d58a2c841054b3b/mebula-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "78d3521be1165c3ab198018f6d9b68d7", "sha256": "69ef6157d58c157a4d9f2cff4d0a18b9b2787447f14580ed1bc1e9466ac82b8f"}, "downloads": -1, "filename": "mebula-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "78d3521be1165c3ab198018f6d9b68d7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 8795, "upload_time": "2020-01-23T14:59:45", "upload_time_iso_8601": "2020-01-23T14:59:45.598374Z", "url": "https://files.pythonhosted.org/packages/92/86/2e34f17e67e34f55989e2dd4e97f5c1e30fda90261604f6d0ecaa62c98cf/mebula-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4e71c7830c9ff79c8c7bc74baa68b734", "sha256": "376050341d8b7cc684496844a65637c2bffdab05754d8c80352ad53c1243ebdd"}, "downloads": -1, "filename": "mebula-0.2.1.tar.gz", "has_sig": false, "md5_digest": "4e71c7830c9ff79c8c7bc74baa68b734", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 7867, "upload_time": "2020-01-23T14:59:47", "upload_time_iso_8601": "2020-01-23T14:59:47.079181Z", "url": "https://files.pythonhosted.org/packages/49/8f/ec0d41e84b7fb3ba3acc2d6d8e6952c47474af8d4c1e881b6bf20446f9da/mebula-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "fb666b7b43712139adee7b7ebd7e5ec9", "sha256": "debeadfb9eef08028a4c6b1fe50d5df4ade7906f0635230facab04f5ce4ac3f3"}, "downloads": -1, "filename": "mebula-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "fb666b7b43712139adee7b7ebd7e5ec9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 9245, "upload_time": "2020-01-23T15:17:34", "upload_time_iso_8601": "2020-01-23T15:17:34.589787Z", "url": "https://files.pythonhosted.org/packages/1c/62/fbabfb547cb8b0081e1e0318613f22f1dcc0b987f49ae24b996ed1e7b452/mebula-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "15fb75da2792cc0643e7d301cd14f1d3", "sha256": "b0a60e48ad766216a94f9f51c3d5dc5b4b44de7fe4114159be1fd0bb17451919"}, "downloads": -1, "filename": "mebula-0.2.2.tar.gz", "has_sig": false, "md5_digest": "15fb75da2792cc0643e7d301cd14f1d3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 8784, "upload_time": "2020-01-23T15:17:35", "upload_time_iso_8601": "2020-01-23T15:17:35.674003Z", "url": "https://files.pythonhosted.org/packages/b3/38/07e0b8de39a0cce978020c686e1ea0367da981a8a46e29c8dcb6cfda5639/mebula-0.2.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "fb666b7b43712139adee7b7ebd7e5ec9", "sha256": "debeadfb9eef08028a4c6b1fe50d5df4ade7906f0635230facab04f5ce4ac3f3"}, "downloads": -1, "filename": "mebula-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "fb666b7b43712139adee7b7ebd7e5ec9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 9245, "upload_time": "2020-01-23T15:17:34", "upload_time_iso_8601": "2020-01-23T15:17:34.589787Z", "url": "https://files.pythonhosted.org/packages/1c/62/fbabfb547cb8b0081e1e0318613f22f1dcc0b987f49ae24b996ed1e7b452/mebula-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "15fb75da2792cc0643e7d301cd14f1d3", "sha256": "b0a60e48ad766216a94f9f51c3d5dc5b4b44de7fe4114159be1fd0bb17451919"}, "downloads": -1, "filename": "mebula-0.2.2.tar.gz", "has_sig": false, "md5_digest": "15fb75da2792cc0643e7d301cd14f1d3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 8784, "upload_time": "2020-01-23T15:17:35", "upload_time_iso_8601": "2020-01-23T15:17:35.674003Z", "url": "https://files.pythonhosted.org/packages/b3/38/07e0b8de39a0cce978020c686e1ea0367da981a8a46e29c8dcb6cfda5639/mebula-0.2.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:56:41 2020"}