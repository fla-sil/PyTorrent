{"info": {"author": "Quinn Freedman", "author_email": "quinnfreedman@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# QueryTree\n\nQueryTree is a python data structure that lets you quickly access deeply nested data and load/save it in any major format.\n\nWith QueryTree, you don't have to check for the esistance of (or create) any intermediate nodes.\n\n```python\njson_str = \"\"\"\n{\n    \"foo\": {\n        \"bar\": [\n            {\n                \"baz\": {\n                    \"n\": 1\n                }\n            },\n            {\n                \"baz\": {\n                    \"n\": 1\n                },\n                \"buz\": {\n                    \"k\": 2\n                }\n            }\n        ]\n    }\n}\n\"\"\"\n\ntree = Tree.parse_json(json_str)\nprint(tree['foo.bar.0.baz.n'])  # 1\nprint(tree['foo.bar.1.buz.k'])  # 2\n\n# accessing nonexistant locations isn't a problem\nprint(tree['foo.bar.0.buz.k'])  # None\nprint(tree['something.else'])   # None\n\n# assign values\ntree['foo.bar.0.baz.n'] = 99\ntree['foo.foo'] = {\"myvalue\": \"a value\"}\n\n# save as any format\nprint(tree.to_yaml())\n```\nOutputs:\n```yaml\nfoo:\n  bar:\n  - baz:\n      n: 99\n  - baz:\n      n: 1\n    buz:\n      k: 2\n  foo:\n    myvalue: a value\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/QuinnFreedman/QueryTree", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "querytree", "package_url": "https://pypi.org/project/querytree/", "platform": "", "project_url": "https://pypi.org/project/querytree/", "project_urls": {"Homepage": "https://github.com/QuinnFreedman/QueryTree"}, "release_url": "https://pypi.org/project/querytree/0.1.1/", "requires_dist": null, "requires_python": ">=3.6", "summary": "A data structure for quickly dealing with nested data in different formats", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>QueryTree</h1>\n<p>QueryTree is a python data structure that lets you quickly access deeply nested data and load/save it in any major format.</p>\n<p>With QueryTree, you don't have to check for the esistance of (or create) any intermediate nodes.</p>\n<pre><span class=\"n\">json_str</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"\"</span>\n<span class=\"s2\">{</span>\n<span class=\"s2\">    \"foo\": {</span>\n<span class=\"s2\">        \"bar\": [</span>\n<span class=\"s2\">            {</span>\n<span class=\"s2\">                \"baz\": {</span>\n<span class=\"s2\">                    \"n\": 1</span>\n<span class=\"s2\">                }</span>\n<span class=\"s2\">            },</span>\n<span class=\"s2\">            {</span>\n<span class=\"s2\">                \"baz\": {</span>\n<span class=\"s2\">                    \"n\": 1</span>\n<span class=\"s2\">                },</span>\n<span class=\"s2\">                \"buz\": {</span>\n<span class=\"s2\">                    \"k\": 2</span>\n<span class=\"s2\">                }</span>\n<span class=\"s2\">            }</span>\n<span class=\"s2\">        ]</span>\n<span class=\"s2\">    }</span>\n<span class=\"s2\">}</span>\n<span class=\"s2\">\"\"\"</span>\n\n<span class=\"n\">tree</span> <span class=\"o\">=</span> <span class=\"n\">Tree</span><span class=\"o\">.</span><span class=\"n\">parse_json</span><span class=\"p\">(</span><span class=\"n\">json_str</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"p\">[</span><span class=\"s1\">'foo.bar.0.baz.n'</span><span class=\"p\">])</span>  <span class=\"c1\"># 1</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"p\">[</span><span class=\"s1\">'foo.bar.1.buz.k'</span><span class=\"p\">])</span>  <span class=\"c1\"># 2</span>\n\n<span class=\"c1\"># accessing nonexistant locations isn't a problem</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"p\">[</span><span class=\"s1\">'foo.bar.0.buz.k'</span><span class=\"p\">])</span>  <span class=\"c1\"># None</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"p\">[</span><span class=\"s1\">'something.else'</span><span class=\"p\">])</span>   <span class=\"c1\"># None</span>\n\n<span class=\"c1\"># assign values</span>\n<span class=\"n\">tree</span><span class=\"p\">[</span><span class=\"s1\">'foo.bar.0.baz.n'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">99</span>\n<span class=\"n\">tree</span><span class=\"p\">[</span><span class=\"s1\">'foo.foo'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"myvalue\"</span><span class=\"p\">:</span> <span class=\"s2\">\"a value\"</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># save as any format</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"o\">.</span><span class=\"n\">to_yaml</span><span class=\"p\">())</span>\n</pre>\n<p>Outputs:</p>\n<pre><span class=\"nt\">foo</span><span class=\"p\">:</span>\n  <span class=\"nt\">bar</span><span class=\"p\">:</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"nt\">baz</span><span class=\"p\">:</span>\n      <span class=\"nt\">n</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">99</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"nt\">baz</span><span class=\"p\">:</span>\n      <span class=\"nt\">n</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">1</span>\n    <span class=\"nt\">buz</span><span class=\"p\">:</span>\n      <span class=\"nt\">k</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">2</span>\n  <span class=\"nt\">foo</span><span class=\"p\">:</span>\n    <span class=\"nt\">myvalue</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">a value</span>\n</pre>\n\n          </div>"}, "last_serial": 6611521, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "b82cc3378e5b8e281e94cf07bbe6f3e2", "sha256": "3b298e8598d41579dae92c2528e61952cfa8afe5307b11f3386d15e416aa2483"}, "downloads": -1, "filename": "querytree-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b82cc3378e5b8e281e94cf07bbe6f3e2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 2429, "upload_time": "2019-06-23T03:43:55", "upload_time_iso_8601": "2019-06-23T03:43:55.454780Z", "url": "https://files.pythonhosted.org/packages/14/90/f966e0f454a224adc435ff48196c8292bdb31a1fd9196571cbc9c1c689e5/querytree-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9f18d0af1ff9442f0e4dc1fd04bc4718", "sha256": "a5a116f59450f1f38c9b9c4866719117968fc343588d9bffe286906a9adbfecd"}, "downloads": -1, "filename": "querytree-0.1.0.tar.gz", "has_sig": false, "md5_digest": "9f18d0af1ff9442f0e4dc1fd04bc4718", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1564, "upload_time": "2019-06-23T03:43:57", "upload_time_iso_8601": "2019-06-23T03:43:57.847084Z", "url": "https://files.pythonhosted.org/packages/13/f6/4eb6f4021d6f9ef74a30953709a388e785aa00cc8b6ad8375e2387c40cd4/querytree-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "e047687497eff07ff8b8fcc25c1d85fc", "sha256": "d235197b46389773c67e40e9e7b3dbf66014048b5bf71d30acf39cc6d34dacb4"}, "downloads": -1, "filename": "querytree-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e047687497eff07ff8b8fcc25c1d85fc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8898, "upload_time": "2020-02-11T19:09:53", "upload_time_iso_8601": "2020-02-11T19:09:53.890010Z", "url": "https://files.pythonhosted.org/packages/12/fd/6e104e9d78f09f5c594c82a6b3f29467e63605a6cb5eb2d8b5487b59d1fa/querytree-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "10caca05eb45ef0a41fd3145e45efb23", "sha256": "6febd1c83a896a2422aff9d9e1be3bdde82cfa12b96d56e31da16ae86d21bdad"}, "downloads": -1, "filename": "querytree-0.1.1.tar.gz", "has_sig": false, "md5_digest": "10caca05eb45ef0a41fd3145e45efb23", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8468, "upload_time": "2020-02-11T19:09:55", "upload_time_iso_8601": "2020-02-11T19:09:55.487621Z", "url": "https://files.pythonhosted.org/packages/42/ae/a0f1095154c34ed603cca7ac6b2e0c246bd6188fb35660d3be7418f4fa79/querytree-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e047687497eff07ff8b8fcc25c1d85fc", "sha256": "d235197b46389773c67e40e9e7b3dbf66014048b5bf71d30acf39cc6d34dacb4"}, "downloads": -1, "filename": "querytree-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e047687497eff07ff8b8fcc25c1d85fc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8898, "upload_time": "2020-02-11T19:09:53", "upload_time_iso_8601": "2020-02-11T19:09:53.890010Z", "url": "https://files.pythonhosted.org/packages/12/fd/6e104e9d78f09f5c594c82a6b3f29467e63605a6cb5eb2d8b5487b59d1fa/querytree-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "10caca05eb45ef0a41fd3145e45efb23", "sha256": "6febd1c83a896a2422aff9d9e1be3bdde82cfa12b96d56e31da16ae86d21bdad"}, "downloads": -1, "filename": "querytree-0.1.1.tar.gz", "has_sig": false, "md5_digest": "10caca05eb45ef0a41fd3145e45efb23", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8468, "upload_time": "2020-02-11T19:09:55", "upload_time_iso_8601": "2020-02-11T19:09:55.487621Z", "url": "https://files.pythonhosted.org/packages/42/ae/a0f1095154c34ed603cca7ac6b2e0c246bd6188fb35660d3be7418f4fa79/querytree-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:08:36 2020"}