{"info": {"author": "Dave Foster", "author_email": "dave@axiomdatascience.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: Apache Software License", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX :: Linux", "Programming Language :: Python", "Topic :: Scientific/Engineering"], "description": "# IOOS Compliance Checker\n\n[![Build Status](https://travis-ci.org/ioos/compliance-checker.svg)](https://travis-ci.org/ioos/compliance-checker)\n[![Build status](https://ci.appveyor.com/api/projects/status/lcc9co38pi6o45ho/branch/master?svg=true)](https://ci.appveyor.com/project/ocefpaf/compliance-checker/branch/master)\n\nThe IOOS Compliance Checker is a python based tool for data providers to check\nfor completeness and community standard compliance of local or remote\n[netCDF](https://en.wikipedia.org/wiki/NetCDF) files against\n[CF](http://cfconventions.org/Data/cf-conventions/cf-conventions-1.7/cf-conventions.html) and\n[ACDD](http://wiki.esipfed.org/index.php/Attribute_Convention_for_Data_Discovery_1-3)\nfile standards. The python module can be used as a command-line tool or as a\nlibrary that can be integrated into other software.\n\n## Python 2.7 Deprecation Notice\nAs of release 4.3.0, the __Compliance Checker no longer officially supports Python 2.7__.\n\nA [web-based version](https://data.ioos.us/compliance/index.html) of the Compliance\nChecker was developed to enable a broader audience and improve accessibility for the\nchecker. With the web version, providers can simply provide a link or upload their\ndatasets and get the full suite of capabilities that Compliance Checker offers.\n\n\nIt currently supports the following sources and standards:\n\n| Standard                                                                                                                            | Source                                                            | .nc/OPeNDAP/.cdl | SOS                             |\n| ----------------------------------------------------------------------------------------------------                                | -----------                                                       | ------           | ------------------------------- |\n| [ACDD (1.1, 1.3)](http://wiki.esipfed.org/index.php/Attribute_Convention_for_Data_Discovery_1-3)                                    | Built-in                                                          | X                | -                               |\n| [CF (1.7)](http://cfconventions.org/Data/cf-conventions/cf-conventions-1.7/cf-conventions.html)                                     | Built-in                                                          | X                | -                               |\n| [CF (1.6)](http://cfconventions.org/cf-conventions/v1.6.0/cf-conventions.html)                                                      | Built-in                                                          | X                | -                               |\n| IOOS SOS                                                                                                                            | Built-in                                                          | -                | GetCapabilities, DescribeSensor |\n| [IOOS (1.1)](https://ioos.github.io/ioos-metadata/ioos-metadata-profile-v1-1.html#ioos-netcdf-metadata-profile-attributes) | Built-in                                                          | X                | -                               |\n| [Glider DAC](https://github.com/ioos/ioosngdac/wiki/NGDAC-NetCDF-File-Format-Version-2)                                             | [ioos/cc-plugin-glider](https://github.com/ioos/cc-plugin-glider) | X                | -                               |\n| [NCEI (1.1, 2.0)](https://www.nodc.noaa.gov/data/formats/netcdf/v2.0/)                                                              | [ioos/cc-plugin-ncei](https://github.com/ioos/cc-plugin-ncei)     | X                | -                               |\n\n\n## Advice to data providers\n\nWhile the command-line version of this tool can be run in a loop, it is not necessary to check\nevery file if they are all created the same way. In short, this tool is not meant for\nidentifying bugs in your data processing stream. It is, however, intended to help you identify\nyour process procedure compliance to the standards.  If you change your processing procedure\nfor any reason it would be worth your while to run one file through the Compliance Checker to\ninsure you procedure change does not impact your file\u2019s compliance.\n\nIf you feel you will need to run a batch of files through the Compliance Checker, please contact\nthe IOOS Program Office Operations Division for assistance.\n\n\n# [The Compliance Checker Web Tool](https://data.ioos.us/compliance/)\n\nThe IOOS Compliance Checker front end companion.\n\n[https://data.ioos.us/compliance/](https://data.ioos.us/compliance/)\n\nSource Code is available on GitHub:\n\n[https://github.com/ioos/compliance-checker-web](https://github.com/ioos/compliance-checker-web)\n\n## Usage\nSelect the test you want to run from the dropdown menu. Then, either upload your dataset or provide a url to a\nremote dataset (OPeNDAP) and click 'Submit'.\n\nThe output of the Compliance Checker will give you a comprehensive list of issues and the actions needed to correct them.\nYou may download the Compliance Checker report as a text file by clicking the 'Download Report' button\n\n![Compliance-Checker-Web](https://user-images.githubusercontent.com/5702672/30527267-b4bb136c-9bf4-11e7-8345-dd9b8e2e859f.png)\n\n## API\n\nIn addition to a web-based front-end for the IOOS Compliance Checker project, an API is provided for\nusers interested in batch processing files hosted via OPeNDAP. Details on how to use the API are\navailable on the Compliance Checker Web [wiki page](https://github.com/ioos/compliance-checker-web/wiki/API).\n\nHere are a couple examples:\n\n**HTML Output**\n\nhttps://data.ioos.us/compliance/api/run?report_format=html&test=acdd&url=http://sos.maracoos.org/stable/dodsC/hrecos/stationHRMARPH-agg.ncml\n\n**JSON Output**\n\nhttps://data.ioos.us/compliance/api/run?report_format=json&test=acdd&url=http://sos.maracoos.org/stable/dodsC/hrecos/stationHRMARPH-agg.ncml\n\n\n# The Compliance Checker Command Line Tool\n\n\n## Concepts & Terminology\n\nEach compliance standard is executed by a Check Suite,\nwhich functions similar to a Python standard Unit Test.\nA Check Suite runs checks against a dataset based on a metadata standard,\nreturning a list of Results which are then aggregated into a summary.\n\nEach Result has a (# passed / # total) score, a weight (HIGH/MEDIUM/LOW),\na computer-readable name, an optional list of human-readable messages,\nand optionally a list of child Results.\n\nA single score is then calculated by aggregating on the names,\nthen multiplying the score by the weight and summing them together.\n\nThe computer-readable name field controls how Results are aggregated together - in order to prevent the overall score for a Check Suite varying on the number of variables,\nit is possible to *group* Results together via the name property.\nGrouped results will only add up to a single top-level entry.\n\nSee the [Development](//github.com/ioos/compliance-checker/wiki/Development) wiki page for more details on implementation.\n\n## Installation\n\nCheck out the [Installation wiki](https://github.com/ioos/compliance-checker/wiki/Installation) for instructions on how to install.\n\n## Command Line Usage\n\nThe compliance-checker can work against local files (`.nc` files, `.cdl`\nmetadata files, .xml files of SOS GetCapabilities/DescribeSensor requests)\nor against remote URLs (OPeNDAP data URLs, SOS GetCapabilities/DescribeSensor URLs).\n\nIf you are aiming to check a netCDF-dump, also known as a CDL file, the file\nmust be named to end with a `.cdl` for the check-suite to be able to correctly\nparse it's contents.\n\n> **WARNING** The CF/ACDD checks **will access data**, so if using a remote OPeNDAP URL, please be sure the size is reasonable!\n\n```\nusage: cchecker.py [-h] [--test TEST] [--criteria [{lenient,normal,strict}]]\n                   [--verbose] [--describe-checks] [--skip-checks SKIP_CHECKS]\n                   [-f {text,html,json,json_new}] [-o OUTPUT] [-O OPTION] [-V]\n                   [-l] [-d DOWNLOAD_STANDARD_NAMES]\n                   [dataset_location [dataset_location ...]]\n\npositional arguments:\n  dataset_location      Defines the location of the dataset to be checked.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --test TEST, -t TEST, --test= TEST, -t= TEST\n                        Select the Checks you want to perform. Defaults to\n                        'acdd' if unspecified. Versions of standards can be\n                        specified via `-t <test_standard>:<version>`. If\n                        `<version>` is omitted, or is \"latest\", the latest\n                        version of the test standard is used.\n  --criteria [{lenient,normal,strict}], -c [{lenient,normal,strict}]\n                        Define the criteria for the checks. Either Strict,\n                        Normal, or Lenient. Defaults to Normal.\n  --verbose, -v         Increase output. May be specified up to three times.\n  --describe-checks, -D\n                        Describes checks for checkers specified using `-t`. If\n                        `-t` is not specified, lists checks from all available\n                        checkers.\n  --skip-checks SKIP_CHECKS, -s SKIP_CHECKS\n                        Specifies tests to skip. Can take the form of either\n                        `<check_name>` or `<check_name>:<skip_level>`. The\n                        first form skips any checks matching the name. In the\n                        second form <skip_level> may be specified as \"A\", \"M\",\n                        or \"L\". \"A\" skips all checks and is equivalent to\n                        calling the first form. \"M\" will only show high\n                        priority output from the given check and will skip\n                        medium and low. \"L\" will show both high and medium\n                        priority issues, while skipping low priority issues.\n  -f {text,html,json,json_new}, --format {text,html,json,json_new}\n                        Output format(s). Options are 'text', 'html', 'json',\n                        'json_new'. The difference between the 'json' and the\n                        'json_new' formats is that the 'json' format has the\n                        check as the top level key, whereas the 'json_new'\n                        format has the dataset name(s) as the main key in the\n                        output follow by any checks as subkeys. Also, 'json'\n                        format can be only be run against one input file,\n                        whereas 'json_new' can be run against multiple files.\n  -o OUTPUT, --output OUTPUT\n                        Output filename(s). If '-' is supplied, output to\n                        stdout. Can either be one or many files. If one file\n                        is supplied, but the checker is run against many\n                        files, all the output from the checks goes to that\n                        file (does not presently work with 'json' format). If\n                        more than one output file is supplied, the number of\n                        input datasets supplied must match the number of\n                        output files.\n  -O OPTION, --option OPTION\n                        Additional options to be passed to the checkers.\n                        Multiple options can be specified via multiple\n                        invocations of this switch. Options should be prefixed\n                        with a the checker name followed by the option, e.g.\n                        '<checker>:<option_name>' Available options:\n                        'cf:enable_appendix_a_checks' - Allow check results\n                        against CF Appendix A for attribute location and data\n                        types.\n\n  -V, --version         Display the IOOS Compliance Checker version\n                        information.\n  -l, --list-tests      List the available tests\n  -d DOWNLOAD_STANDARD_NAMES, --download-standard-names DOWNLOAD_STANDARD_NAMES\n                        Specify a version of the cf standard name table to\n                        download as packaged version\n```\n\n## Examples\n\n### Check a local file against CF 1.6\n```\n$ compliance-checker --test=cf:1.6 compliance_checker/tests/data/examples/hycom_global.nc\n\n\n--------------------------------------------------------------------------------\n                         IOOS Compliance Checker Report\n                                  cf:1.6 check\n--------------------------------------------------------------------------------\n                               Corrective Actions\nhycom_global.nc has 9 potential issues\n\n\n                                     Errors\n--------------------------------------------------------------------------------\nName                                      Reasoning\n\u00a73.2 Either long_name or standard_name    Attribute long_name or/and standard_name\nis highly recommended for variable time:  is highly recommended for variable time\n\u00a74.3.1 depth is a valid vertical          vertical coordinates not defining\ncoordinate:                               pressure must include a positive\n                                          attribute that is either 'up' or 'down'\n\n\n                                    Warnings\n--------------------------------------------------------------------------------\nName                                   Reasoning\n\u00a72.6.1 Global Attribute Conventions    Conventions global attribute does not\nincludes CF-1.6:                       contain \"CF-1.6\". The CF Checker only\n                                       supports CF-1.6 at this time.\n\u00a72.6.2 Recommended Attributes:         institution should be defined source\n                                       should be defined references should be\n                                       defined\n\u00a72.6.2 Recommended Global Attributes:  global attribute history should exist\n                                       and be a non-empty string\n\u00a78.1 Packed Data defined by water_u    Attributes add_offset and scale_factor\ncontains valid packing:                are not of type float or double.\n\u00a78.1 Packed Data defined by water_v    Attributes add_offset and scale_factor\ncontains valid packing:                are not of type float or double.\n```\n\n### Check a remote file against ACDD 1.3\n\nThe remote dataset url is taken from the Data URL section of an OPeNDAP endpoint.\n\n```shell\n$ compliance-checker --test=acdd:1.3 \"http://sos.maracoos.org/stable/dodsC/hrecos/stationHRMARPH-agg.ncml\"\n```\n\n### Write results to text file\n\n```shell\n$ compliance-checker --test=acdd:1.3 --format=text --output=/tmp/report.txt compliance_checker/tests/data/examples/hycom_global.nc\n```\n\n### Write results to JSON file\n\n```shell\n$ compliance-checker --test=acdd:1.3 --format=json --output=/tmp/report.json compliance_checker/tests/data/examples/hycom_global.nc\n```\n\n### Write results to HTML file\n\n```shell\n$ compliance-checker --test=acdd:1.3 --format=html --output=/tmp/report.html compliance_checker/tests/data/examples/hycom_global.nc\n```\n\n### Output text from multiple input files to one output file\n\n```\n$ compliance-checker --test=cf:1.6 --format text --output=/tmp/combined_output.txt compliance_checker/tests/data/examples/hycom_global.nc compliance_checker/tests/data/examples/ww3.nc\n```\n\n### Output html and text files from multiple input files (part 1)\nIn this case you'll get 2 files ```/tmp/combined_output.txt``` and ```/tmp/combined_output.html``` that contain cf check results for both input files because you only specified 1 output filename.\n```\n$ compliance-checker --test=cf:1.6 --format text --format html --output=/tmp/combined_output.txt compliance_checker/tests/data/examples/hycom_global.nc compliance_checker/tests/data/examples/ww3.nc\n```\n\n### Output html and text files from multiple input files (part 2)\nIn this case you'll get 4 files ```/tmp/hycom.txt```, ```/tmp/hycom.html```, ```/tmp/ww3.txt```, and ```/tmp/ww3.html``` that contain cf check results because you specified as many output filenames as input filenames.\n```\n$ compliance-checker --test=cf:1.6 --format text --format html --output=/tmp/hycom.txt --output=/tmp/ww3.txt compliance_checker/tests/data/examples/hycom_global.nc compliance_checker/tests/data/examples/ww3.nc\n```\n\n### Download a particular CF standard names table for use in the test\n\n**Note**\nDuring the CF test, if a file has a particular version of the cf standard name table specified in the global attributes\n(i.e. ```:standard_name_vocabulary = \"CF Standard Name Table v30\" ;```) that doesn't match the packaged version, it will\ntry to download the specified version. If it fails, it will fall back to packaged version.\n\n```\n$ compliance-checker -d 35\n\nDownloading cf-standard-names table version 35 from: http://cfconventions.org/Data/cf-standard-names/35/src/cf-standard-name-table.xml\n```\n\nAlternatively, you can specify an absolute path to a standard name table you may have locally in an environment variable named CF_STANDARD_NAME_TABLE and the compliance checker will use that version instead.\n\n\n## Python Usage\n\nIf you are interested in incorporating the IOOS Compliance Checker into your own python projects, check out the following python code example:\n```python\nfrom compliance_checker.runner import ComplianceChecker, CheckSuite\n\n# Load all available checker classes\ncheck_suite = CheckSuite()\ncheck_suite.load_all_available_checkers()\n\n# Run cf and adcc checks\npath = '/path/or/url/to/your/dataset'\nchecker_names = ['cf', 'acdd']\nverbose = 0\ncriteria = 'normal'\noutput_filename = '/output/report.json'\noutput_format = 'json'\n\"\"\"\nInputs to ComplianceChecker.run_checker\n\npath            Dataset location (url or file)\nchecker_names   List of string names to run, should match keys of checkers dict (empty list means run all)\nverbose         Verbosity of the output (0, 1, 2)\ncriteria        Determines failure (lenient, normal, strict)\noutput_filename Path to the file for output\noutput_format   Format of the output\n\n@returns                If the tests failed (based on the criteria)\n\"\"\"\nreturn_value, errors = ComplianceChecker.run_checker(path,\n                                                     checker_names,\n                                                     verbose,\n                                                     criteria,\n                                                     output_filename=output_filename,\n                                                     output_format=output_format)\n\n# Open the JSON output and get the compliance scores\nwith open(output_filename, 'r') as fp:\n    cc_data = json.load(fp)\n    scored = cc_data[cc_test[0]]['scored_points']\n    possible = cc_data[cc_test[0]]['possible_points']\n    log.debug('CC Scored {} out of {} possible points'.format(scored, possible))\n```\n\n## Compliance Checker Plug-Ins\n\nSeparate Plug-ins have been developed to complement the master Compliance Checker tool with\nspecifications for preparing data to be submitted to different data assembly centers.\nThe version numbering of these plug-ins are not necessarily link to the version of the\nmaster Compliance Checker, but they are all designed to run with the master Compliance Checker tool.\n\n### Current Plug-in Releases:\n\n- [GliderDAC](https://github.com/ioos/cc-plugin-glider/releases)\n\nThis is a checker for [GliderDAC](https://github.com/ioos/ioosngdac/wiki/NGDAC-NetCDF-File-Format-Version-2) files\n\n- [NCEI](https://github.com/ioos/cc-plugin-ncei/releases) - [link](https://github.com/ioos/cc-plugin-ncei)\n\nThis is a checker for NCEI netCDF Templates [v1.1](https://www.nodc.noaa.gov/data/formats/netcdf/v1.1/) and [v2.0](https://www.nodc.noaa.gov/data/formats/netcdf/v2.0/) files.\n\nThese plug-ins must be installed separately but work on top of the base compliance checker software.\n\n```\npip install cc-plugin-ncei\n```\n\nCheck to see if it installed correctly, list the tests:\n\n```\ncompliance-checker -l\n```\n\nYou should see\n\n```\n IOOS compliance checker available checker suites (code version):\n - ncei-grid (2.1.0)\n - ncei-grid:1.1 (2.1.0)\n - ncei-grid:2.0 (2.3.0)\n - ncei-grid:latest (2.1.0)\n - ncei-point (2.3.0)\n - ncei-point:1.1 (2.1.0)\n - ncei-point:2.0 (2.3.0)\n etc ....\n```\n\nOnce installing the plug-in the usage is similar to the built in checkers.\n\n### Examples of how to use the Plug-Ins\n\n1. Run the NCEI Point check on a THREDDS endpoint\n\n```python\ncompliance-checker -t ncei-point -v \"https://data.nodc.noaa.gov/thredds/dodsC/testdata/mbiddle/GOLD_STANDARD_NETCDF/1.1/NODC_point_template_v1.1_2016-06-15_133710.844375.nc\"\n```\n\n2. Run NCEI Trajectory Profile Orthogonal Check on local dataset\n\n```python\ncompliance-checker -t ncei-trajectory-profile-orthogonal -v ~/data/sample-trajectory-profile.nc\n\n```\n\n3. Outputting JSON from a gridded file check\n```\ncompliance-checker -t ncei-grid -f json -o ~/Documents/sample_grid_report.json ~/Documents/sample_grid_report.nc\n```\n\n\n## Contributors\n\n- [Dave Foster](https://github.com/daf) &lt;dave@axiomdatascience.com&gt;\n- [Dan Maher](https://github.com/danieljmaher) &lt;daniel.maher@gdit.com&gt;\n- [Luke Campbell](https://github.com/lukecampbell) &lt;luke.campbell@gdit.com&gt;\n- [Kyle Wilcox](https://github.com/kwilcox) &lt;kyle@axiomdatascience.com&gt;\n- [Ben Adams](https://github.com/benjwadams) &lt;ben.adams@rpsgroup.com&gt;\n- [Bob Fratantonio](https://github.com/bobfrat) &lt;robert.fratantonio@rpsgroup.com&gt;\n- [Dalton Kell](https://github.com/daltonkell) &lt;dalton.kell@rpsgroup.com&gt;\n\nAnd many more testers!\n\nPortions of the CF checker are based on Michael Decker's work, http://repositories.iek.fz-juelich.de/hg/CFchecker/\n\n## Disclaimer\n\nThe objective of the IOOS Compliance Checker is to check your file against our interpretation of select dataset metadata standards to use as a guideline in generating compliant files. The compliance checker should not be considered the authoritative source on whether your file is 100% \"compliant\". Instead, we recommend that users use the results as a guide to work towards compliance.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ioos/compliance-checker", "keywords": "", "license": "Apache License 2.0", "maintainer": "", "maintainer_email": "", "name": "compliance-checker", "package_url": "https://pypi.org/project/compliance-checker/", "platform": "", "project_url": "https://pypi.org/project/compliance-checker/", "project_urls": {"Homepage": "https://github.com/ioos/compliance-checker"}, "release_url": "https://pypi.org/project/compliance-checker/4.3.2/", "requires_dist": null, "requires_python": "", "summary": "Checks Datasets and SOS endpoints for standards compliance", "version": "4.3.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>IOOS Compliance Checker</h1>\n<p><a href=\"https://travis-ci.org/ioos/compliance-checker\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fd05e27eba3d3aa6fabfc5fde69f43caad1ba41e/68747470733a2f2f7472617669732d63692e6f72672f696f6f732f636f6d706c69616e63652d636865636b65722e737667\"></a>\n<a href=\"https://ci.appveyor.com/project/ocefpaf/compliance-checker/branch/master\" rel=\"nofollow\"><img alt=\"Build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a208ab13cba123cc71bcc895164013d6334b479f/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6c636339636f33387069366f3435686f2f6272616e63682f6d61737465723f7376673d74727565\"></a></p>\n<p>The IOOS Compliance Checker is a python based tool for data providers to check\nfor completeness and community standard compliance of local or remote\n<a href=\"https://en.wikipedia.org/wiki/NetCDF\" rel=\"nofollow\">netCDF</a> files against\n<a href=\"http://cfconventions.org/Data/cf-conventions/cf-conventions-1.7/cf-conventions.html\" rel=\"nofollow\">CF</a> and\n<a href=\"http://wiki.esipfed.org/index.php/Attribute_Convention_for_Data_Discovery_1-3\" rel=\"nofollow\">ACDD</a>\nfile standards. The python module can be used as a command-line tool or as a\nlibrary that can be integrated into other software.</p>\n<h2>Python 2.7 Deprecation Notice</h2>\n<p>As of release 4.3.0, the <strong>Compliance Checker no longer officially supports Python 2.7</strong>.</p>\n<p>A <a href=\"https://data.ioos.us/compliance/index.html\" rel=\"nofollow\">web-based version</a> of the Compliance\nChecker was developed to enable a broader audience and improve accessibility for the\nchecker. With the web version, providers can simply provide a link or upload their\ndatasets and get the full suite of capabilities that Compliance Checker offers.</p>\n<p>It currently supports the following sources and standards:</p>\n<table>\n<thead>\n<tr>\n<th>Standard</th>\n<th>Source</th>\n<th>.nc/OPeNDAP/.cdl</th>\n<th>SOS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://wiki.esipfed.org/index.php/Attribute_Convention_for_Data_Discovery_1-3\" rel=\"nofollow\">ACDD (1.1, 1.3)</a></td>\n<td>Built-in</td>\n<td>X</td>\n<td>-</td>\n</tr>\n<tr>\n<td><a href=\"http://cfconventions.org/Data/cf-conventions/cf-conventions-1.7/cf-conventions.html\" rel=\"nofollow\">CF (1.7)</a></td>\n<td>Built-in</td>\n<td>X</td>\n<td>-</td>\n</tr>\n<tr>\n<td><a href=\"http://cfconventions.org/cf-conventions/v1.6.0/cf-conventions.html\" rel=\"nofollow\">CF (1.6)</a></td>\n<td>Built-in</td>\n<td>X</td>\n<td>-</td>\n</tr>\n<tr>\n<td>IOOS SOS</td>\n<td>Built-in</td>\n<td>-</td>\n<td>GetCapabilities, DescribeSensor</td>\n</tr>\n<tr>\n<td><a href=\"https://ioos.github.io/ioos-metadata/ioos-metadata-profile-v1-1.html#ioos-netcdf-metadata-profile-attributes\" rel=\"nofollow\">IOOS (1.1)</a></td>\n<td>Built-in</td>\n<td>X</td>\n<td>-</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/ioos/ioosngdac/wiki/NGDAC-NetCDF-File-Format-Version-2\" rel=\"nofollow\">Glider DAC</a></td>\n<td><a href=\"https://github.com/ioos/cc-plugin-glider\" rel=\"nofollow\">ioos/cc-plugin-glider</a></td>\n<td>X</td>\n<td>-</td>\n</tr>\n<tr>\n<td><a href=\"https://www.nodc.noaa.gov/data/formats/netcdf/v2.0/\" rel=\"nofollow\">NCEI (1.1, 2.0)</a></td>\n<td><a href=\"https://github.com/ioos/cc-plugin-ncei\" rel=\"nofollow\">ioos/cc-plugin-ncei</a></td>\n<td>X</td>\n<td>-</td>\n</tr></tbody></table>\n<h2>Advice to data providers</h2>\n<p>While the command-line version of this tool can be run in a loop, it is not necessary to check\nevery file if they are all created the same way. In short, this tool is not meant for\nidentifying bugs in your data processing stream. It is, however, intended to help you identify\nyour process procedure compliance to the standards.  If you change your processing procedure\nfor any reason it would be worth your while to run one file through the Compliance Checker to\ninsure you procedure change does not impact your file\u2019s compliance.</p>\n<p>If you feel you will need to run a batch of files through the Compliance Checker, please contact\nthe IOOS Program Office Operations Division for assistance.</p>\n<h1><a href=\"https://data.ioos.us/compliance/\" rel=\"nofollow\">The Compliance Checker Web Tool</a></h1>\n<p>The IOOS Compliance Checker front end companion.</p>\n<p><a href=\"https://data.ioos.us/compliance/\" rel=\"nofollow\">https://data.ioos.us/compliance/</a></p>\n<p>Source Code is available on GitHub:</p>\n<p><a href=\"https://github.com/ioos/compliance-checker-web\" rel=\"nofollow\">https://github.com/ioos/compliance-checker-web</a></p>\n<h2>Usage</h2>\n<p>Select the test you want to run from the dropdown menu. Then, either upload your dataset or provide a url to a\nremote dataset (OPeNDAP) and click 'Submit'.</p>\n<p>The output of the Compliance Checker will give you a comprehensive list of issues and the actions needed to correct them.\nYou may download the Compliance Checker report as a text file by clicking the 'Download Report' button</p>\n<p><img alt=\"Compliance-Checker-Web\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d935478b3a2a3531d4081d179ce5282ea8018e11/68747470733a2f2f757365722d696d616765732e67697468756275736572636f6e74656e742e636f6d2f353730323637322f33303532373236372d62346262313336632d396266342d313165372d383334352d6464396238653265383539662e706e67\"></p>\n<h2>API</h2>\n<p>In addition to a web-based front-end for the IOOS Compliance Checker project, an API is provided for\nusers interested in batch processing files hosted via OPeNDAP. Details on how to use the API are\navailable on the Compliance Checker Web <a href=\"https://github.com/ioos/compliance-checker-web/wiki/API\" rel=\"nofollow\">wiki page</a>.</p>\n<p>Here are a couple examples:</p>\n<p><strong>HTML Output</strong></p>\n<p><a href=\"https://data.ioos.us/compliance/api/run?report_format=html&amp;test=acdd&amp;url=http://sos.maracoos.org/stable/dodsC/hrecos/stationHRMARPH-agg.ncml\" rel=\"nofollow\">https://data.ioos.us/compliance/api/run?report_format=html&amp;test=acdd&amp;url=http://sos.maracoos.org/stable/dodsC/hrecos/stationHRMARPH-agg.ncml</a></p>\n<p><strong>JSON Output</strong></p>\n<p><a href=\"https://data.ioos.us/compliance/api/run?report_format=json&amp;test=acdd&amp;url=http://sos.maracoos.org/stable/dodsC/hrecos/stationHRMARPH-agg.ncml\" rel=\"nofollow\">https://data.ioos.us/compliance/api/run?report_format=json&amp;test=acdd&amp;url=http://sos.maracoos.org/stable/dodsC/hrecos/stationHRMARPH-agg.ncml</a></p>\n<h1>The Compliance Checker Command Line Tool</h1>\n<h2>Concepts &amp; Terminology</h2>\n<p>Each compliance standard is executed by a Check Suite,\nwhich functions similar to a Python standard Unit Test.\nA Check Suite runs checks against a dataset based on a metadata standard,\nreturning a list of Results which are then aggregated into a summary.</p>\n<p>Each Result has a (# passed / # total) score, a weight (HIGH/MEDIUM/LOW),\na computer-readable name, an optional list of human-readable messages,\nand optionally a list of child Results.</p>\n<p>A single score is then calculated by aggregating on the names,\nthen multiplying the score by the weight and summing them together.</p>\n<p>The computer-readable name field controls how Results are aggregated together - in order to prevent the overall score for a Check Suite varying on the number of variables,\nit is possible to <em>group</em> Results together via the name property.\nGrouped results will only add up to a single top-level entry.</p>\n<p>See the <a href=\"//github.com/ioos/compliance-checker/wiki/Development\" rel=\"nofollow\">Development</a> wiki page for more details on implementation.</p>\n<h2>Installation</h2>\n<p>Check out the <a href=\"https://github.com/ioos/compliance-checker/wiki/Installation\" rel=\"nofollow\">Installation wiki</a> for instructions on how to install.</p>\n<h2>Command Line Usage</h2>\n<p>The compliance-checker can work against local files (<code>.nc</code> files, <code>.cdl</code>\nmetadata files, .xml files of SOS GetCapabilities/DescribeSensor requests)\nor against remote URLs (OPeNDAP data URLs, SOS GetCapabilities/DescribeSensor URLs).</p>\n<p>If you are aiming to check a netCDF-dump, also known as a CDL file, the file\nmust be named to end with a <code>.cdl</code> for the check-suite to be able to correctly\nparse it's contents.</p>\n<blockquote>\n<p><strong>WARNING</strong> The CF/ACDD checks <strong>will access data</strong>, so if using a remote OPeNDAP URL, please be sure the size is reasonable!</p>\n</blockquote>\n<pre><code>usage: cchecker.py [-h] [--test TEST] [--criteria [{lenient,normal,strict}]]\n                   [--verbose] [--describe-checks] [--skip-checks SKIP_CHECKS]\n                   [-f {text,html,json,json_new}] [-o OUTPUT] [-O OPTION] [-V]\n                   [-l] [-d DOWNLOAD_STANDARD_NAMES]\n                   [dataset_location [dataset_location ...]]\n\npositional arguments:\n  dataset_location      Defines the location of the dataset to be checked.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --test TEST, -t TEST, --test= TEST, -t= TEST\n                        Select the Checks you want to perform. Defaults to\n                        'acdd' if unspecified. Versions of standards can be\n                        specified via `-t &lt;test_standard&gt;:&lt;version&gt;`. If\n                        `&lt;version&gt;` is omitted, or is \"latest\", the latest\n                        version of the test standard is used.\n  --criteria [{lenient,normal,strict}], -c [{lenient,normal,strict}]\n                        Define the criteria for the checks. Either Strict,\n                        Normal, or Lenient. Defaults to Normal.\n  --verbose, -v         Increase output. May be specified up to three times.\n  --describe-checks, -D\n                        Describes checks for checkers specified using `-t`. If\n                        `-t` is not specified, lists checks from all available\n                        checkers.\n  --skip-checks SKIP_CHECKS, -s SKIP_CHECKS\n                        Specifies tests to skip. Can take the form of either\n                        `&lt;check_name&gt;` or `&lt;check_name&gt;:&lt;skip_level&gt;`. The\n                        first form skips any checks matching the name. In the\n                        second form &lt;skip_level&gt; may be specified as \"A\", \"M\",\n                        or \"L\". \"A\" skips all checks and is equivalent to\n                        calling the first form. \"M\" will only show high\n                        priority output from the given check and will skip\n                        medium and low. \"L\" will show both high and medium\n                        priority issues, while skipping low priority issues.\n  -f {text,html,json,json_new}, --format {text,html,json,json_new}\n                        Output format(s). Options are 'text', 'html', 'json',\n                        'json_new'. The difference between the 'json' and the\n                        'json_new' formats is that the 'json' format has the\n                        check as the top level key, whereas the 'json_new'\n                        format has the dataset name(s) as the main key in the\n                        output follow by any checks as subkeys. Also, 'json'\n                        format can be only be run against one input file,\n                        whereas 'json_new' can be run against multiple files.\n  -o OUTPUT, --output OUTPUT\n                        Output filename(s). If '-' is supplied, output to\n                        stdout. Can either be one or many files. If one file\n                        is supplied, but the checker is run against many\n                        files, all the output from the checks goes to that\n                        file (does not presently work with 'json' format). If\n                        more than one output file is supplied, the number of\n                        input datasets supplied must match the number of\n                        output files.\n  -O OPTION, --option OPTION\n                        Additional options to be passed to the checkers.\n                        Multiple options can be specified via multiple\n                        invocations of this switch. Options should be prefixed\n                        with a the checker name followed by the option, e.g.\n                        '&lt;checker&gt;:&lt;option_name&gt;' Available options:\n                        'cf:enable_appendix_a_checks' - Allow check results\n                        against CF Appendix A for attribute location and data\n                        types.\n\n  -V, --version         Display the IOOS Compliance Checker version\n                        information.\n  -l, --list-tests      List the available tests\n  -d DOWNLOAD_STANDARD_NAMES, --download-standard-names DOWNLOAD_STANDARD_NAMES\n                        Specify a version of the cf standard name table to\n                        download as packaged version\n</code></pre>\n<h2>Examples</h2>\n<h3>Check a local file against CF 1.6</h3>\n<pre><code>$ compliance-checker --test=cf:1.6 compliance_checker/tests/data/examples/hycom_global.nc\n\n\n--------------------------------------------------------------------------------\n                         IOOS Compliance Checker Report\n                                  cf:1.6 check\n--------------------------------------------------------------------------------\n                               Corrective Actions\nhycom_global.nc has 9 potential issues\n\n\n                                     Errors\n--------------------------------------------------------------------------------\nName                                      Reasoning\n\u00a73.2 Either long_name or standard_name    Attribute long_name or/and standard_name\nis highly recommended for variable time:  is highly recommended for variable time\n\u00a74.3.1 depth is a valid vertical          vertical coordinates not defining\ncoordinate:                               pressure must include a positive\n                                          attribute that is either 'up' or 'down'\n\n\n                                    Warnings\n--------------------------------------------------------------------------------\nName                                   Reasoning\n\u00a72.6.1 Global Attribute Conventions    Conventions global attribute does not\nincludes CF-1.6:                       contain \"CF-1.6\". The CF Checker only\n                                       supports CF-1.6 at this time.\n\u00a72.6.2 Recommended Attributes:         institution should be defined source\n                                       should be defined references should be\n                                       defined\n\u00a72.6.2 Recommended Global Attributes:  global attribute history should exist\n                                       and be a non-empty string\n\u00a78.1 Packed Data defined by water_u    Attributes add_offset and scale_factor\ncontains valid packing:                are not of type float or double.\n\u00a78.1 Packed Data defined by water_v    Attributes add_offset and scale_factor\ncontains valid packing:                are not of type float or double.\n</code></pre>\n<h3>Check a remote file against ACDD 1.3</h3>\n<p>The remote dataset url is taken from the Data URL section of an OPeNDAP endpoint.</p>\n<pre>$ compliance-checker --test<span class=\"o\">=</span>acdd:1.3 <span class=\"s2\">\"http://sos.maracoos.org/stable/dodsC/hrecos/stationHRMARPH-agg.ncml\"</span>\n</pre>\n<h3>Write results to text file</h3>\n<pre>$ compliance-checker --test<span class=\"o\">=</span>acdd:1.3 --format<span class=\"o\">=</span>text --output<span class=\"o\">=</span>/tmp/report.txt compliance_checker/tests/data/examples/hycom_global.nc\n</pre>\n<h3>Write results to JSON file</h3>\n<pre>$ compliance-checker --test<span class=\"o\">=</span>acdd:1.3 --format<span class=\"o\">=</span>json --output<span class=\"o\">=</span>/tmp/report.json compliance_checker/tests/data/examples/hycom_global.nc\n</pre>\n<h3>Write results to HTML file</h3>\n<pre>$ compliance-checker --test<span class=\"o\">=</span>acdd:1.3 --format<span class=\"o\">=</span>html --output<span class=\"o\">=</span>/tmp/report.html compliance_checker/tests/data/examples/hycom_global.nc\n</pre>\n<h3>Output text from multiple input files to one output file</h3>\n<pre><code>$ compliance-checker --test=cf:1.6 --format text --output=/tmp/combined_output.txt compliance_checker/tests/data/examples/hycom_global.nc compliance_checker/tests/data/examples/ww3.nc\n</code></pre>\n<h3>Output html and text files from multiple input files (part 1)</h3>\n<p>In this case you'll get 2 files <code>/tmp/combined_output.txt</code> and <code>/tmp/combined_output.html</code> that contain cf check results for both input files because you only specified 1 output filename.</p>\n<pre><code>$ compliance-checker --test=cf:1.6 --format text --format html --output=/tmp/combined_output.txt compliance_checker/tests/data/examples/hycom_global.nc compliance_checker/tests/data/examples/ww3.nc\n</code></pre>\n<h3>Output html and text files from multiple input files (part 2)</h3>\n<p>In this case you'll get 4 files <code>/tmp/hycom.txt</code>, <code>/tmp/hycom.html</code>, <code>/tmp/ww3.txt</code>, and <code>/tmp/ww3.html</code> that contain cf check results because you specified as many output filenames as input filenames.</p>\n<pre><code>$ compliance-checker --test=cf:1.6 --format text --format html --output=/tmp/hycom.txt --output=/tmp/ww3.txt compliance_checker/tests/data/examples/hycom_global.nc compliance_checker/tests/data/examples/ww3.nc\n</code></pre>\n<h3>Download a particular CF standard names table for use in the test</h3>\n<p><strong>Note</strong>\nDuring the CF test, if a file has a particular version of the cf standard name table specified in the global attributes\n(i.e. <code>:standard_name_vocabulary = \"CF Standard Name Table v30\" ;</code>) that doesn't match the packaged version, it will\ntry to download the specified version. If it fails, it will fall back to packaged version.</p>\n<pre><code>$ compliance-checker -d 35\n\nDownloading cf-standard-names table version 35 from: http://cfconventions.org/Data/cf-standard-names/35/src/cf-standard-name-table.xml\n</code></pre>\n<p>Alternatively, you can specify an absolute path to a standard name table you may have locally in an environment variable named CF_STANDARD_NAME_TABLE and the compliance checker will use that version instead.</p>\n<h2>Python Usage</h2>\n<p>If you are interested in incorporating the IOOS Compliance Checker into your own python projects, check out the following python code example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">compliance_checker.runner</span> <span class=\"kn\">import</span> <span class=\"n\">ComplianceChecker</span><span class=\"p\">,</span> <span class=\"n\">CheckSuite</span>\n\n<span class=\"c1\"># Load all available checker classes</span>\n<span class=\"n\">check_suite</span> <span class=\"o\">=</span> <span class=\"n\">CheckSuite</span><span class=\"p\">()</span>\n<span class=\"n\">check_suite</span><span class=\"o\">.</span><span class=\"n\">load_all_available_checkers</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Run cf and adcc checks</span>\n<span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"s1\">'/path/or/url/to/your/dataset'</span>\n<span class=\"n\">checker_names</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'cf'</span><span class=\"p\">,</span> <span class=\"s1\">'acdd'</span><span class=\"p\">]</span>\n<span class=\"n\">verbose</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">criteria</span> <span class=\"o\">=</span> <span class=\"s1\">'normal'</span>\n<span class=\"n\">output_filename</span> <span class=\"o\">=</span> <span class=\"s1\">'/output/report.json'</span>\n<span class=\"n\">output_format</span> <span class=\"o\">=</span> <span class=\"s1\">'json'</span>\n<span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">Inputs to ComplianceChecker.run_checker</span>\n\n<span class=\"sd\">path            Dataset location (url or file)</span>\n<span class=\"sd\">checker_names   List of string names to run, should match keys of checkers dict (empty list means run all)</span>\n<span class=\"sd\">verbose         Verbosity of the output (0, 1, 2)</span>\n<span class=\"sd\">criteria        Determines failure (lenient, normal, strict)</span>\n<span class=\"sd\">output_filename Path to the file for output</span>\n<span class=\"sd\">output_format   Format of the output</span>\n\n<span class=\"sd\">@returns                If the tests failed (based on the criteria)</span>\n<span class=\"sd\">\"\"\"</span>\n<span class=\"n\">return_value</span><span class=\"p\">,</span> <span class=\"n\">errors</span> <span class=\"o\">=</span> <span class=\"n\">ComplianceChecker</span><span class=\"o\">.</span><span class=\"n\">run_checker</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span>\n                                                     <span class=\"n\">checker_names</span><span class=\"p\">,</span>\n                                                     <span class=\"n\">verbose</span><span class=\"p\">,</span>\n                                                     <span class=\"n\">criteria</span><span class=\"p\">,</span>\n                                                     <span class=\"n\">output_filename</span><span class=\"o\">=</span><span class=\"n\">output_filename</span><span class=\"p\">,</span>\n                                                     <span class=\"n\">output_format</span><span class=\"o\">=</span><span class=\"n\">output_format</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Open the JSON output and get the compliance scores</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">output_filename</span><span class=\"p\">,</span> <span class=\"s1\">'r'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fp</span><span class=\"p\">:</span>\n    <span class=\"n\">cc_data</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">fp</span><span class=\"p\">)</span>\n    <span class=\"n\">scored</span> <span class=\"o\">=</span> <span class=\"n\">cc_data</span><span class=\"p\">[</span><span class=\"n\">cc_test</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]][</span><span class=\"s1\">'scored_points'</span><span class=\"p\">]</span>\n    <span class=\"n\">possible</span> <span class=\"o\">=</span> <span class=\"n\">cc_data</span><span class=\"p\">[</span><span class=\"n\">cc_test</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]][</span><span class=\"s1\">'possible_points'</span><span class=\"p\">]</span>\n    <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"s1\">'CC Scored </span><span class=\"si\">{}</span><span class=\"s1\"> out of </span><span class=\"si\">{}</span><span class=\"s1\"> possible points'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">scored</span><span class=\"p\">,</span> <span class=\"n\">possible</span><span class=\"p\">))</span>\n</pre>\n<h2>Compliance Checker Plug-Ins</h2>\n<p>Separate Plug-ins have been developed to complement the master Compliance Checker tool with\nspecifications for preparing data to be submitted to different data assembly centers.\nThe version numbering of these plug-ins are not necessarily link to the version of the\nmaster Compliance Checker, but they are all designed to run with the master Compliance Checker tool.</p>\n<h3>Current Plug-in Releases:</h3>\n<ul>\n<li><a href=\"https://github.com/ioos/cc-plugin-glider/releases\" rel=\"nofollow\">GliderDAC</a></li>\n</ul>\n<p>This is a checker for <a href=\"https://github.com/ioos/ioosngdac/wiki/NGDAC-NetCDF-File-Format-Version-2\" rel=\"nofollow\">GliderDAC</a> files</p>\n<ul>\n<li><a href=\"https://github.com/ioos/cc-plugin-ncei/releases\" rel=\"nofollow\">NCEI</a> - <a href=\"https://github.com/ioos/cc-plugin-ncei\" rel=\"nofollow\">link</a></li>\n</ul>\n<p>This is a checker for NCEI netCDF Templates <a href=\"https://www.nodc.noaa.gov/data/formats/netcdf/v1.1/\" rel=\"nofollow\">v1.1</a> and <a href=\"https://www.nodc.noaa.gov/data/formats/netcdf/v2.0/\" rel=\"nofollow\">v2.0</a> files.</p>\n<p>These plug-ins must be installed separately but work on top of the base compliance checker software.</p>\n<pre><code>pip install cc-plugin-ncei\n</code></pre>\n<p>Check to see if it installed correctly, list the tests:</p>\n<pre><code>compliance-checker -l\n</code></pre>\n<p>You should see</p>\n<pre><code> IOOS compliance checker available checker suites (code version):\n - ncei-grid (2.1.0)\n - ncei-grid:1.1 (2.1.0)\n - ncei-grid:2.0 (2.3.0)\n - ncei-grid:latest (2.1.0)\n - ncei-point (2.3.0)\n - ncei-point:1.1 (2.1.0)\n - ncei-point:2.0 (2.3.0)\n etc ....\n</code></pre>\n<p>Once installing the plug-in the usage is similar to the built in checkers.</p>\n<h3>Examples of how to use the Plug-Ins</h3>\n<ol>\n<li>Run the NCEI Point check on a THREDDS endpoint</li>\n</ol>\n<pre><span class=\"n\">compliance</span><span class=\"o\">-</span><span class=\"n\">checker</span> <span class=\"o\">-</span><span class=\"n\">t</span> <span class=\"n\">ncei</span><span class=\"o\">-</span><span class=\"n\">point</span> <span class=\"o\">-</span><span class=\"n\">v</span> <span class=\"s2\">\"https://data.nodc.noaa.gov/thredds/dodsC/testdata/mbiddle/GOLD_STANDARD_NETCDF/1.1/NODC_point_template_v1.1_2016-06-15_133710.844375.nc\"</span>\n</pre>\n<ol>\n<li>Run NCEI Trajectory Profile Orthogonal Check on local dataset</li>\n</ol>\n<pre><span class=\"n\">compliance</span><span class=\"o\">-</span><span class=\"n\">checker</span> <span class=\"o\">-</span><span class=\"n\">t</span> <span class=\"n\">ncei</span><span class=\"o\">-</span><span class=\"n\">trajectory</span><span class=\"o\">-</span><span class=\"n\">profile</span><span class=\"o\">-</span><span class=\"n\">orthogonal</span> <span class=\"o\">-</span><span class=\"n\">v</span> <span class=\"o\">~/</span><span class=\"n\">data</span><span class=\"o\">/</span><span class=\"n\">sample</span><span class=\"o\">-</span><span class=\"n\">trajectory</span><span class=\"o\">-</span><span class=\"n\">profile</span><span class=\"o\">.</span><span class=\"n\">nc</span>\n</pre>\n<ol>\n<li>Outputting JSON from a gridded file check</li>\n</ol>\n<pre><code>compliance-checker -t ncei-grid -f json -o ~/Documents/sample_grid_report.json ~/Documents/sample_grid_report.nc\n</code></pre>\n<h2>Contributors</h2>\n<ul>\n<li><a href=\"https://github.com/daf\" rel=\"nofollow\">Dave Foster</a> &lt;<a href=\"mailto:dave@axiomdatascience.com\">dave@axiomdatascience.com</a>&gt;</li>\n<li><a href=\"https://github.com/danieljmaher\" rel=\"nofollow\">Dan Maher</a> &lt;<a href=\"mailto:daniel.maher@gdit.com\">daniel.maher@gdit.com</a>&gt;</li>\n<li><a href=\"https://github.com/lukecampbell\" rel=\"nofollow\">Luke Campbell</a> &lt;<a href=\"mailto:luke.campbell@gdit.com\">luke.campbell@gdit.com</a>&gt;</li>\n<li><a href=\"https://github.com/kwilcox\" rel=\"nofollow\">Kyle Wilcox</a> &lt;<a href=\"mailto:kyle@axiomdatascience.com\">kyle@axiomdatascience.com</a>&gt;</li>\n<li><a href=\"https://github.com/benjwadams\" rel=\"nofollow\">Ben Adams</a> &lt;<a href=\"mailto:ben.adams@rpsgroup.com\">ben.adams@rpsgroup.com</a>&gt;</li>\n<li><a href=\"https://github.com/bobfrat\" rel=\"nofollow\">Bob Fratantonio</a> &lt;<a href=\"mailto:robert.fratantonio@rpsgroup.com\">robert.fratantonio@rpsgroup.com</a>&gt;</li>\n<li><a href=\"https://github.com/daltonkell\" rel=\"nofollow\">Dalton Kell</a> &lt;<a href=\"mailto:dalton.kell@rpsgroup.com\">dalton.kell@rpsgroup.com</a>&gt;</li>\n</ul>\n<p>And many more testers!</p>\n<p>Portions of the CF checker are based on Michael Decker's work, <a href=\"http://repositories.iek.fz-juelich.de/hg/CFchecker/\" rel=\"nofollow\">http://repositories.iek.fz-juelich.de/hg/CFchecker/</a></p>\n<h2>Disclaimer</h2>\n<p>The objective of the IOOS Compliance Checker is to check your file against our interpretation of select dataset metadata standards to use as a guideline in generating compliant files. The compliance checker should not be considered the authoritative source on whether your file is 100% \"compliant\". Instead, we recommend that users use the results as a guide to work towards compliance.</p>\n\n          </div>"}, "last_serial": 6424959, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "b74d6fe027170fb4408eae27ee59adf1", "sha256": "fa01a50e14321249b2e3779a354bba062997bdbbe22d032e0d6f442e6b0ac3f0"}, "downloads": -1, "filename": "compliance-checker-0.1.tar.gz", "has_sig": false, "md5_digest": "b74d6fe027170fb4408eae27ee59adf1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 190617, "upload_time": "2014-04-08T02:30:23", "upload_time_iso_8601": "2014-04-08T02:30:23.196786Z", "url": "https://files.pythonhosted.org/packages/cb/94/3369208e0fc52c42dc987e3e37443530093dbdfbdaa27a701432cd31abba/compliance-checker-0.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "73ce1226f55df673e0949715afd5ce8f", "sha256": "3028788ce000907c8dcdc10c1172652c5ae9c60f9767ab1ef541be7c7462eff6"}, "downloads": -1, "filename": "compliance-checker-0.2.0.tar.gz", "has_sig": false, "md5_digest": "73ce1226f55df673e0949715afd5ce8f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 190803, "upload_time": "2014-04-09T14:59:14", "upload_time_iso_8601": "2014-04-09T14:59:14.721541Z", "url": "https://files.pythonhosted.org/packages/e1/e6/4569be3ed357b33502a126334f36e1fa55191384d32aff0d35cddd2003c3/compliance-checker-0.2.0.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "2f90064f9264cab60fee319a45ac652f", "sha256": "67f08e0d93136ae129154fe1ed736806066a00feb025aaa78469279e60819c82"}, "downloads": -1, "filename": "compliance-checker-1.0.0.tar.gz", "has_sig": false, "md5_digest": "2f90064f9264cab60fee319a45ac652f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 723434, "upload_time": "2014-07-18T18:30:43", "upload_time_iso_8601": "2014-07-18T18:30:43.123035Z", "url": "https://files.pythonhosted.org/packages/bf/6e/d6c0426014ec585825075e032298f16139c01c0540e9f6cd374e83b73ffd/compliance-checker-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "2a9201969d743370a72f878d1157da36", "sha256": "f73a4aacf0ddf38a7f140650ec7500dfe25b203cff675a844c65182929707447"}, "downloads": -1, "filename": "compliance-checker-1.1.0.tar.gz", "has_sig": false, "md5_digest": "2a9201969d743370a72f878d1157da36", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 540158, "upload_time": "2015-05-22T17:40:27", "upload_time_iso_8601": "2015-05-22T17:40:27.325981Z", "url": "https://files.pythonhosted.org/packages/67/3e/1f2aaec413bdc49d4422d5ffa067694f0148312f41910ff157fb1a253912/compliance-checker-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "b5484196481213393a91cc1c0bc91321", "sha256": "af9d292179e5ccc3b317218e1c6eecdbb5082e48147d8f4ab980ff51aabecca1"}, "downloads": -1, "filename": "compliance-checker-1.1.1.tar.gz", "has_sig": false, "md5_digest": "b5484196481213393a91cc1c0bc91321", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 545694, "upload_time": "2015-05-29T16:01:30", "upload_time_iso_8601": "2015-05-29T16:01:30.490901Z", "url": "https://files.pythonhosted.org/packages/73/09/3a1ec4b8b8fe2c3bb3b0fdf79799aeda677b352c24bd233e1aea2ab21d59/compliance-checker-1.1.1.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "783cfa85acc6870dc3adf75b60418b72", "sha256": "9589864266be9ccd051389bfdfc84b056809ffd9036ddbb91e5372b88df0fd0a"}, "downloads": -1, "filename": "compliance-checker-2.0.0.tar.gz", "has_sig": false, "md5_digest": "783cfa85acc6870dc3adf75b60418b72", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 594434, "upload_time": "2015-11-03T19:04:28", "upload_time_iso_8601": "2015-11-03T19:04:28.239284Z", "url": "https://files.pythonhosted.org/packages/f6/c2/c7a04cf544c5b5b9b75a07e400614629fd297e3897663139ccc8b7509eea/compliance-checker-2.0.0.tar.gz", "yanked": false}], "2.1.0": [{"comment_text": "", "digests": {"md5": "e183eda66050c30f107efbc674538ae0", "sha256": "b18f2c475d4bf3601de469f9b08bcb3cfb18abe3b51742f45ec40a421d859f15"}, "downloads": -1, "filename": "compliance-checker-2.1.0.tar.gz", "has_sig": false, "md5_digest": "e183eda66050c30f107efbc674538ae0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 580940, "upload_time": "2016-02-29T13:41:29", "upload_time_iso_8601": "2016-02-29T13:41:29.771865Z", "url": "https://files.pythonhosted.org/packages/9f/f1/5623dd5093ad5081001444d3a42329de564e9aef6e3218f85ebd84588911/compliance-checker-2.1.0.tar.gz", "yanked": false}], "2.2.0": [{"comment_text": "", "digests": {"md5": "753480e82f9ef50af57eada937bda8ef", "sha256": "69d00942edcc8dc0a7b2e3ceede05f030a62fe22b925626a23527d50bc71d96e"}, "downloads": -1, "filename": "compliance-checker-2.2.0.tar.gz", "has_sig": false, "md5_digest": "753480e82f9ef50af57eada937bda8ef", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 589740, "upload_time": "2016-05-03T16:54:15", "upload_time_iso_8601": "2016-05-03T16:54:15.845142Z", "url": "https://files.pythonhosted.org/packages/1c/53/d2d7306b3b8fa953f39b88be29fae293a02f4492850de7819a317282e87d/compliance-checker-2.2.0.tar.gz", "yanked": false}], "2.2.1": [{"comment_text": "", "digests": {"md5": "2218fee6cb98e02a1c5477a77325cf36", "sha256": "798fdfcbfcaf2f20c602bd90e954d3990efb5954dee7f4b519b6b2945057c137"}, "downloads": -1, "filename": "compliance-checker-2.2.1.tar.gz", "has_sig": false, "md5_digest": "2218fee6cb98e02a1c5477a77325cf36", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 608816, "upload_time": "2016-09-15T13:39:14", "upload_time_iso_8601": "2016-09-15T13:39:14.425147Z", "url": "https://files.pythonhosted.org/packages/1b/8a/9f9397c55a94b859daf978f52825572eea4d2bb013028206ad3cbaaab359/compliance-checker-2.2.1.tar.gz", "yanked": false}], "2.3.0": [{"comment_text": "", "digests": {"md5": "7695227b44dcbbf146c9b6362e7d7e0b", "sha256": "2b059aa7b7f3b1b9fcdcd26f832b882f4d0f5d5cc2ab64b980c2f749f35b169e"}, "downloads": -1, "filename": "compliance-checker-2.3.0.tar.gz", "has_sig": false, "md5_digest": "7695227b44dcbbf146c9b6362e7d7e0b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 311119, "upload_time": "2016-10-03T18:59:34", "upload_time_iso_8601": "2016-10-03T18:59:34.624378Z", "url": "https://files.pythonhosted.org/packages/41/ed/33f7857392cde9c2ad061b7d913473eadfac3c15f859d06a81f565371371/compliance-checker-2.3.0.tar.gz", "yanked": false}], "2.3.1": [{"comment_text": "", "digests": {"md5": "ede877d4b2e5fd0d32723e40eb538977", "sha256": "4d1f7876124565d99c905d5c998759dd197a9f970d76938ded1cde20eff51919"}, "downloads": -1, "filename": "compliance-checker-2.3.1.tar.gz", "has_sig": false, "md5_digest": "ede877d4b2e5fd0d32723e40eb538977", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1011363, "upload_time": "2016-11-03T15:16:30", "upload_time_iso_8601": "2016-11-03T15:16:30.988183Z", "url": "https://files.pythonhosted.org/packages/f7/a5/f1599e657fc936cc0ea1ef39fe166b547a2f8ab58ae3ab477ab372540c6e/compliance-checker-2.3.1.tar.gz", "yanked": false}], "3.0.0": [{"comment_text": "", "digests": {"md5": "3b812ee094fe4c36016d60054797fd3a", "sha256": "5100fee83cd9b743b1bf28473df193020b3ab44b1104d5ca84dc93677f533813"}, "downloads": -1, "filename": "compliance-checker-3.0.0.tar.gz", "has_sig": false, "md5_digest": "3b812ee094fe4c36016d60054797fd3a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 428191, "upload_time": "2016-11-14T13:24:52", "upload_time_iso_8601": "2016-11-14T13:24:52.735632Z", "url": "https://files.pythonhosted.org/packages/55/b6/ba2a5c5dbe7604a37413c70f53b705c7d4dc29c6cb29fd0851cf113c0906/compliance-checker-3.0.0.tar.gz", "yanked": false}], "3.0.0rc1": [{"comment_text": "", "digests": {"md5": "4e6cb8d568b9479654cad600b5dd7998", "sha256": "f8196da2d1b8cfda016fbca3fecfee03f3b1fa42e0aee2ff95fe3fbad42c58ba"}, "downloads": -1, "filename": "compliance-checker-3.0.0rc1.tar.gz", "has_sig": false, "md5_digest": "4e6cb8d568b9479654cad600b5dd7998", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 423891, "upload_time": "2016-11-01T14:39:37", "upload_time_iso_8601": "2016-11-01T14:39:37.433365Z", "url": "https://files.pythonhosted.org/packages/d4/5e/437f8c24cdeb82a6d6f5d4fec0e48b7828bf956212da7b84a113ced45d18/compliance-checker-3.0.0rc1.tar.gz", "yanked": false}], "3.0.1": [{"comment_text": "", "digests": {"md5": "43bdae03bd6155298955127bc8bf59c7", "sha256": "35878022c98782364e38656ae29452ee10544915ca30b023e3ce0708b025f568"}, "downloads": -1, "filename": "compliance-checker-3.0.1.tar.gz", "has_sig": false, "md5_digest": "43bdae03bd6155298955127bc8bf59c7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 427943, "upload_time": "2017-02-02T20:05:16", "upload_time_iso_8601": "2017-02-02T20:05:16.215489Z", "url": "https://files.pythonhosted.org/packages/21/c4/70c4c90da4a942871686274407e67e310b9a126122b33cb0c83186b315bd/compliance-checker-3.0.1.tar.gz", "yanked": false}], "3.0.2": [{"comment_text": "", "digests": {"md5": "959b0e128b763c18f25a5689cecd94d6", "sha256": "36a811bed7515568747cab2bc43e9450a7113f476593a96954097dbc0afae5ad"}, "downloads": -1, "filename": "compliance-checker-3.0.2.tar.gz", "has_sig": false, "md5_digest": "959b0e128b763c18f25a5689cecd94d6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 427977, "upload_time": "2017-04-11T13:50:19", "upload_time_iso_8601": "2017-04-11T13:50:19.548853Z", "url": "https://files.pythonhosted.org/packages/c9/2d/3168902b3b11b533d75bb74e8931005dd723d5059b374785a6f8c84f484c/compliance-checker-3.0.2.tar.gz", "yanked": false}], "3.0.3": [{"comment_text": "", "digests": {"md5": "d2a649873cebbfea7268e2304a508a23", "sha256": "e91b445673bb84f505f18ebb6f31367fae6dc5c9c465a05041469fceab59431e"}, "downloads": -1, "filename": "compliance-checker-3.0.3.tar.gz", "has_sig": false, "md5_digest": "d2a649873cebbfea7268e2304a508a23", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 429001, "upload_time": "2017-04-26T14:47:02", "upload_time_iso_8601": "2017-04-26T14:47:02.348207Z", "url": "https://files.pythonhosted.org/packages/04/5b/b6ef7a27efa9bd221492635c216f4e712f22e56ebfcc90955b872e28e607/compliance-checker-3.0.3.tar.gz", "yanked": false}], "3.0.4": [{"comment_text": "", "digests": {"md5": "ea2613bf755227c3304ef78a40f3d519", "sha256": "1f5cba3ac6249a9c08d82697901833f3b9273affe0813d91c05ce05739502f78"}, "downloads": -1, "filename": "compliance-checker-3.0.4.tar.gz", "has_sig": false, "md5_digest": "ea2613bf755227c3304ef78a40f3d519", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 454295, "upload_time": "2017-05-23T14:44:47", "upload_time_iso_8601": "2017-05-23T14:44:47.870195Z", "url": "https://files.pythonhosted.org/packages/75/f6/a1e6471bfdb39df9d7fd2961ba5bee8302a203b3c864a35431f3e2249983/compliance-checker-3.0.4.tar.gz", "yanked": false}], "3.1.1": [{"comment_text": "", "digests": {"md5": "66a3a0177a89b3d6cf79a85c9dccedf3", "sha256": "1dc589ea677cbc17b98a6bd3fbe43b2f5ec827b6af8873709121ec76199fc36d"}, "downloads": -1, "filename": "compliance_checker-3.1.1-py2.7.egg", "has_sig": false, "md5_digest": "66a3a0177a89b3d6cf79a85c9dccedf3", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 645729, "upload_time": "2017-10-13T21:59:29", "upload_time_iso_8601": "2017-10-13T21:59:29.872275Z", "url": "https://files.pythonhosted.org/packages/1d/62/ee49c669883cd84e1b1f1b2cb93b58ef60a873a49d2ccb857af6d1c0278a/compliance_checker-3.1.1-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "52541dbd99015bafd4b06b05513711bf", "sha256": "d4aae3d3e58e7e0fead1249579fd0dc063e5c2f7605d8455fecd9d1b4cf1effa"}, "downloads": -1, "filename": "compliance-checker-3.1.1.tar.gz", "has_sig": false, "md5_digest": "52541dbd99015bafd4b06b05513711bf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 452077, "upload_time": "2017-10-13T21:59:28", "upload_time_iso_8601": "2017-10-13T21:59:28.408550Z", "url": "https://files.pythonhosted.org/packages/ff/f2/98eb0bd94c81bdbcd5831011f74421c342a87dd680ca7cb8d4e606f4c0e5/compliance-checker-3.1.1.tar.gz", "yanked": false}], "4.0.0": [{"comment_text": "", "digests": {"md5": "e92976b788c9deb81cddb49ad6a89a88", "sha256": "040a033025baeff41385b29dc504db0463ea531604c5c53a7afa9d88358cb8c1"}, "downloads": -1, "filename": "compliance-checker-4.0.0.tar.gz", "has_sig": false, "md5_digest": "e92976b788c9deb81cddb49ad6a89a88", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 503563, "upload_time": "2018-04-13T19:46:38", "upload_time_iso_8601": "2018-04-13T19:46:38.066376Z", "url": "https://files.pythonhosted.org/packages/96/59/8cdbb31cec514ec31ee2c4c0d65a5b7599c3b3c8b3d11d0b497bab2b63e5/compliance-checker-4.0.0.tar.gz", "yanked": false}], "4.0.1": [{"comment_text": "", "digests": {"md5": "5720b36d33045d040d78c03fd1bb2cc2", "sha256": "d9955d82a0b8b269b1ad280d8db3fc85a4e29a27a089deeea5eba27691df4f68"}, "downloads": -1, "filename": "compliance_checker-4.0.1-py2-none-any.whl", "has_sig": false, "md5_digest": "5720b36d33045d040d78c03fd1bb2cc2", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 567922, "upload_time": "2018-05-18T20:18:33", "upload_time_iso_8601": "2018-05-18T20:18:33.135231Z", "url": "https://files.pythonhosted.org/packages/de/64/fed02e77aab359f70bb0a4a0502bc1e8368fed39d63794fd18d05827db7d/compliance_checker-4.0.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "23f62111777aacdea497db2d0c310a06", "sha256": "caf1a4a9b78caa153b09c763ef47de4bc2399768815f44ed4ed73c89ccff96f4"}, "downloads": -1, "filename": "compliance-checker-4.0.1.tar.gz", "has_sig": false, "md5_digest": "23f62111777aacdea497db2d0c310a06", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 519223, "upload_time": "2018-05-18T20:18:35", "upload_time_iso_8601": "2018-05-18T20:18:35.020706Z", "url": "https://files.pythonhosted.org/packages/0a/ec/781418c270f6409dd6e806a3ca7310bdada2b6b8d6327198918cfd317848/compliance-checker-4.0.1.tar.gz", "yanked": false}], "4.1.0": [{"comment_text": "", "digests": {"md5": "ca1bfe8e95dd251c9ecb981fa2de704e", "sha256": "30e748309a7452b779558a1cc300295ae55b5754d91db3c988f9cac54b67a093"}, "downloads": -1, "filename": "compliance_checker-4.1.0-py2-none-any.whl", "has_sig": false, "md5_digest": "ca1bfe8e95dd251c9ecb981fa2de704e", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 570822, "upload_time": "2018-08-29T20:45:49", "upload_time_iso_8601": "2018-08-29T20:45:49.168243Z", "url": "https://files.pythonhosted.org/packages/0e/2d/0af07177bbdaeb6e8684bc19509b3287b54304babed8fc296cd61a3f72cc/compliance_checker-4.1.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "25be81fb3ad5ec2003ec44daba28d381", "sha256": "6382c11c238cbc83d0620376eb2e326bccd3fb0234bf4d5858fb2e65fac14d08"}, "downloads": -1, "filename": "compliance-checker-4.1.0.tar.gz", "has_sig": false, "md5_digest": "25be81fb3ad5ec2003ec44daba28d381", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 522273, "upload_time": "2018-08-29T20:45:50", "upload_time_iso_8601": "2018-08-29T20:45:50.982479Z", "url": "https://files.pythonhosted.org/packages/e0/60/4ab3ea40cf52ed3156b9371dabb1aaa4d35acae2de40fd7a86edef44962b/compliance-checker-4.1.0.tar.gz", "yanked": false}], "4.1.1": [{"comment_text": "", "digests": {"md5": "dc257797df13ae5add5d777d71fc03cb", "sha256": "eef6087a6cecc22a60810414eb9b56dcede93b350a1dbf4de5888f0eed332e1b"}, "downloads": -1, "filename": "compliance_checker-4.1.1-py2.7.egg", "has_sig": false, "md5_digest": "dc257797df13ae5add5d777d71fc03cb", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 691814, "upload_time": "2018-08-30T20:28:58", "upload_time_iso_8601": "2018-08-30T20:28:58.166804Z", "url": "https://files.pythonhosted.org/packages/d7/81/d7603aae40eab62bc0dee5b2dc58d7eb2f4b914ae0dc85bc3958dbfd94c4/compliance_checker-4.1.1-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "4fa933abaebdbc5ae867283c4520d847", "sha256": "53d5aa26a4195bd902e0f44a92d64c06341fdf0f2f9c0d6bdb9b7bbc49034330"}, "downloads": -1, "filename": "compliance_checker-4.1.1-py2-none-any.whl", "has_sig": false, "md5_digest": "4fa933abaebdbc5ae867283c4520d847", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 563350, "upload_time": "2018-08-30T20:28:54", "upload_time_iso_8601": "2018-08-30T20:28:54.667747Z", "url": "https://files.pythonhosted.org/packages/db/fc/da981db2f3c5af23779c0226b7e546cf7e601680d45a18088cc4b4a55991/compliance_checker-4.1.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "95851f153e081e79a4fbeebfa98792ec", "sha256": "c1c2936f8f9066a48f11dc5859ebadb1c8074c993910c7decb407690d701e416"}, "downloads": -1, "filename": "compliance-checker-4.1.1.tar.gz", "has_sig": false, "md5_digest": "95851f153e081e79a4fbeebfa98792ec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 521970, "upload_time": "2018-08-30T20:28:56", "upload_time_iso_8601": "2018-08-30T20:28:56.572468Z", "url": "https://files.pythonhosted.org/packages/10/76/22ef5075321961010293ad89c2ff1f2fb4e796a25bbb887dda1804690a39/compliance-checker-4.1.1.tar.gz", "yanked": false}], "4.2.0": [{"comment_text": "", "digests": {"md5": "e5e5e1eca1d9b8c7f482f9874d6e73d8", "sha256": "e38fbf2a6d56166c075e68fce5fbaeb53924d111833f976e5d8f46c5d3e4c5af"}, "downloads": -1, "filename": "compliance-checker-4.2.0.tar.gz", "has_sig": false, "md5_digest": "e5e5e1eca1d9b8c7f482f9874d6e73d8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 525592, "upload_time": "2019-02-06T22:00:48", "upload_time_iso_8601": "2019-02-06T22:00:48.894055Z", "url": "https://files.pythonhosted.org/packages/84/8f/05ac5432c80ecb1fb46e2c66428e9db22d8654e573d560e4db88d9bc9890/compliance-checker-4.2.0.tar.gz", "yanked": false}], "4.2.1": [{"comment_text": "", "digests": {"md5": "f10f1ac418c82930207f4c576bcdfbbb", "sha256": "1cd36cd46fed5bd882d8ddee1a7bcf4cb941d223484a8cbe02e45a7dd3f41ce9"}, "downloads": -1, "filename": "compliance-checker-4.2.1.tar.gz", "has_sig": false, "md5_digest": "f10f1ac418c82930207f4c576bcdfbbb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 526059, "upload_time": "2019-02-18T22:00:34", "upload_time_iso_8601": "2019-02-18T22:00:34.982322Z", "url": "https://files.pythonhosted.org/packages/e4/35/309bde5661ef0372ebd7d3c7aa54eb7364967ce7b906ab64dda9656dc3a4/compliance-checker-4.2.1.tar.gz", "yanked": false}], "4.2.2": [{"comment_text": "", "digests": {"md5": "76919c64244a9c967a10ecf0ed73d21f", "sha256": "5ed577d5a5a3edb74ad7e852b2f0ed737b32baffcae4b897251ccb0132a00b81"}, "downloads": -1, "filename": "compliance-checker-4.2.2.tar.gz", "has_sig": false, "md5_digest": "76919c64244a9c967a10ecf0ed73d21f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 526106, "upload_time": "2019-02-27T15:58:39", "upload_time_iso_8601": "2019-02-27T15:58:39.094694Z", "url": "https://files.pythonhosted.org/packages/1f/2b/7e99ecaf31ebefa94ec4cd5332fa632b081b2af46a6f164df37c602cf997/compliance-checker-4.2.2.tar.gz", "yanked": false}], "4.3.1": [{"comment_text": "", "digests": {"md5": "7392599f21222ad299bb89e9795f129b", "sha256": "478800599c4b4e53042e0d50a4cc4dee5c4c454a73adf3689ed42d7f8002e377"}, "downloads": -1, "filename": "compliance-checker-4.3.1.tar.gz", "has_sig": false, "md5_digest": "7392599f21222ad299bb89e9795f129b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 552038, "upload_time": "2019-12-02T23:23:28", "upload_time_iso_8601": "2019-12-02T23:23:28.505471Z", "url": "https://files.pythonhosted.org/packages/05/88/f5ecb646f0df846d0373f6c05ad56a7ff2d7e79b999f0f0b2953205396fa/compliance-checker-4.3.1.tar.gz", "yanked": false}], "4.3.2": [{"comment_text": "", "digests": {"md5": "8fb6a49e596f2ae6b93558c8f401e273", "sha256": "0c934985be4eed1f5c627b15595133f3f533fb45fff77eaee747a6a2ed6f7844"}, "downloads": -1, "filename": "compliance-checker-4.3.2.tar.gz", "has_sig": false, "md5_digest": "8fb6a49e596f2ae6b93558c8f401e273", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 554478, "upload_time": "2020-01-09T22:04:31", "upload_time_iso_8601": "2020-01-09T22:04:31.288929Z", "url": "https://files.pythonhosted.org/packages/83/b9/23eec6da26ea9e657f4d0f264904220d07b162e6ed9c7b48faaf16fc2156/compliance-checker-4.3.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8fb6a49e596f2ae6b93558c8f401e273", "sha256": "0c934985be4eed1f5c627b15595133f3f533fb45fff77eaee747a6a2ed6f7844"}, "downloads": -1, "filename": "compliance-checker-4.3.2.tar.gz", "has_sig": false, "md5_digest": "8fb6a49e596f2ae6b93558c8f401e273", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 554478, "upload_time": "2020-01-09T22:04:31", "upload_time_iso_8601": "2020-01-09T22:04:31.288929Z", "url": "https://files.pythonhosted.org/packages/83/b9/23eec6da26ea9e657f4d0f264904220d07b162e6ed9c7b48faaf16fc2156/compliance-checker-4.3.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:13 2020"}