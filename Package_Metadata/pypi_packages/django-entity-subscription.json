{"info": {"author": "Erik Swanson", "author_email": "opensource@ambition.com", "bugtrack_url": null, "classifiers": ["Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python"], "description": "Django Entity Subscription\n==================================================\n\nDjango Entity Subscription uses the power of the `Django-Entity`_\nframework to make managing subscriptions easy and powerful, for you\nand your users.\n\n.. _`Django-Entity`: https://github.com/ambitioninc/django-entity\n\n\nOverview\n--------------------------------------------------\n\nThis django app, includes four models:\n\n- ``Subscription``\n- ``Unsubscribe``\n- ``Medium``\n- ``Source``\n\nall available from within the package ``entity_subscription.models``.\n\nBy creating objects in these models, you and the users of your\napplication can have fine grained control over how users are notified\nand about what they are notified. The ``entity_subscription`` app is\nagnostic about how users are actually notified about the subscriptions\nthat are set up, but is designed to be a dependency of whatever\nnotification system is put in place. It is assumed that the consumer\nof this library already has some idea of what notifications are going\nto be sent, and what delivery methods are going to be used to send the\nnotifications.\n\nOnce subscription information is stored in those models, the\n``entity_subscription`` app also provides some methods to make it\neasier to reason about and act on the stored subscriptions.\n\n- ``Subscription.objects.mediums_subscribed``\n- ``Subscription.objects.is_subscribed``\n\nSources and Mediums\n--------------------------------------------------\n\nThe ``entity_subscription`` app creates a strong boundary between the\n\"source\" of notifications from within an application and the \"medium\"\nused to deliver the notification to the users of the application.\n\n\nSources\n``````````````````````````````````````````````````\nFrom a user of your application's perspective a \"source\" is a category\nof notifications that they can subscribe to, or unsubscribe from. It\ncould be something like \"New Products\" or \"Important Site\nChanges\".\n\nFor any given source, users may want to receive notifications over\ndifferent mediums (like \"Email\", \"In-site\", \"text-message\"). By\ndividing notifications into different sources, users can choose to\nreceive that type of notification over whatever medium they prefer.\n\nTo achieve this within an application a \"source\" of notifications is\nan object that describes where in the app a notification came\nfrom. Pieces of code that originate events which lead to notifications\nwill want to own a ``Source`` object, or at least know the name of one,\nso that they can clearly communicate the ``source`` of the\nnotifications they are originating.\n\nThe actual source objects in the database are fairly simple, and are\ncreated through the standard ``objects.create`` interface. They have a\nunique identifier, a user friendly display name, and a longer form\ndescription.\n\n.. code:: Python\n\n    from entity_subscription.models import Source\n\n    Source.objects.create(\n        name='new_products',\n        display_name='New Products',\n        description='Tells you whenever a new item is available in the store.'\n    )\n\n\nMediums\n``````````````````````````````````````````````````\n\nFrom a user of your application's perspective a \"medium\" is a way in\nwhich they can be notified. Your site may support a variety of\ndifferent mediums for notifying your users of different\nhappenings. Examples could include Email, Text Messages, a News-Feed,\nor a In-site Notification center.\n\nUsers will likely want to receive notifications through some\ncombination of the available mediums, but only for certain categories\nof notifications. They may want some notifications that they view as\nsomewhat important to go to their email, notifications that are very\nimportant to go to email and text-message, and all the rest to go to\nan in-site notification center. By distinguishing between mediums in a\nsubscription library, users can decide how each \"source\" of\nnotifications is delivered to them.\n\nThe pieces of the application that handle actually sending\nnotifications will want to own a ``Medium`` object that describes\nthem, or at least know the unique name of one. This enables the code\nsending notifications to handle subscriptions appropriately.\n\nAs with sources, The actual medium objects in the database are fairly\nsimple, and are created through the standard ``objects.create``\ninterface. They have a unique identifier, a user friendly display\nname, and a longer form description.\n\n.. code:: Python\n\n    from entity_subscription.models import Medium\n\n    Medium.objects.create(\n        name='in_site',\n        display_name='In Site',\n        description='Notifications available in the Accounts/Notifications tab.'\n    )\n\n\nSource and Medium Considerations\n``````````````````````````````````````````````````\n\nBoth ``Source`` and ``Medium`` objects can be effectively used as\nstatic records that are setup as initial data for an application, or\nas dynamic records that change as the various sources and mediums for\nnotification change. It is important to consider, however, that\nexcessively dynamic sources and mediums will make it difficult for\nindividual entities to control their subscriptions.\n\n\nSubscriptions and Unsubscribing\n--------------------------------------------------\n\nEntities and groups of entities can be subscribed to\nnotifications. Once subscribed, individuals, mirrored as entities, can\nchoose to unsubscribe from notifications for a given source and\nmedium.\n\n\nSubscriptions\n``````````````````````````````````````````````````\n\nSubscriptions will most often be created by the application, for an\nentire group of entities. In this case, all the entities will receive\nthe notification, unless they later opt out. Subscriptions can also be\ncreated for an individual entity to receive a certain type of\nnotification, as an opt-in subscription.\n\nThis library includes the table ``Subscription``, available from\n``entity_subscription.models.Subscription``. Creating a\n``Subscription`` object is straightforward, assuming the relevant\n``Source`` and ``Medium`` objects have been created (See \"Sources and\nMediums\" above), and the entities to be subscribed and their group are\nappropriately mirrored. From there, we can use the standard\n``objects.create`` interface.\n\nGiven the sources and mediums created above, and a relationship\nbetween ``MyUser`` and ``MyGroup`` in a given application, the\nfollowing is a subscription for all the users in a particular group:\n\n.. code:: Python\n\n    from my_app.models import MyUser\n    from my_app.models import MyGroup\n\n    from entity.models import Entity, EntityKind\n    from entity_subscription.models import Subscription, Source, Medium\n\n    super_entity = MyGroup.objects.get(name='product_group')\n    Subscription.objects.create(\n        medium = Medium.objects.get(name='in_site'),\n        source = Source.objects.get(name='new_products'),\n        entity = Entity.objects.get_for_obj(super_entity),\n        subentity_kind = EntityKind.objects.get(name='myuser')\n    )\n\nEach ``Subscription`` object stored in the database only subscribes\nthe group of entities to a single combination of a ``Source`` and\n``Medium``. To create subscriptions for delivering notifications from\nthe same source over different mediums, a new ``Subscription`` object\nmust be created for each source/medium combination.  This allows the\napplication developer and the users to have detailed control over what\nthe users are notified about, and how those notifications are\ndelivered.\n\n\nUnsubscribing\n``````````````````````````````````````````````````\n\nIndividual users of your application may wish to remove themselves\nfrom receiving certain types of notifications.\n\nTo unsubscribe an individual from from receiving notifications of a\ngiven source/medium combination is as simple as creating an\n``Unsubscribe`` object. Assuming that \"Robert\" was subscribed to New\nProduct notifications in the subscription object above, unsubscribing\nhim from these notifications looks like:\n\n.. code:: Python\n\n    from my_app.models import MyUser\n\n    from entity.models import Entity\n    from entity_subscription.models import Unsubscribe, Source, Medium\n\n    Robert = MyUser.objects.get(name='Robert')\n\n    Unsubscribe.objects.create(\n        entity = Entity.objects.get_for_obj(Robert)\n        medium = Medium.objects.get(name='in_site')\n        sorce = Source.objects.get(name='new_products')\n    )\n\nWith this object created, the rest of the group will receive these\nnotifications still, however \"Robert\" will no longer see them.\n\nSubscriptions and Unsubscribing Considerations\n``````````````````````````````````````````````````\n\nSeparating subscriptions and unsubscriptions into separate tables\nallows for groups of entities to be subscribed with a single object in\nthe ``Subscription`` table. This is useful for subscribing large\ngroups of users to a notification by default.\n\nIf a given notification may only have a few users interested in\nreceiving, it may make more sense for it to be an opt-in notification,\nwhere a Subscription object is made for each single entity that wishes\nto opt in (that is, a ``Subscription`` object with a\n``subentity_kind=None``). This may make more sense then subscribing\nlarge groups to this notification and having most of them unsubscribe.\n\n\nChecking Subscriptions\n--------------------------------------------------\n\nOnce your sites subscriptions are stored as shown above, you will want\nto use those subscriptions to decide to deliver (or not deliver)\nnotifications. The ``entity_subscription`` app provides a couple\nmethods to make it easier to find who is subscribed to what.\n\nThe ``SubscriptionManager``\n  The following methods are available from the manager of the\n  ``Subscription`` model.\n\n  ``mediums_subscribed(source, entity, subentity_kind=None)``\n    Return a queryset of all the mediums the given ``entity`` is\n    subscribed to, for the given ``source``.\n\n    If the optional ``subentity_kind`` parameter is given, return\n    *every* medium that any of the given ``entity``'s sub-entities, of\n    the given ``EntityKind``, is subscribed to.\n\n  ``is_subscribed(source, medium, entity, subentity_kind=None)``\n    Return a Boolean, indicating if the entity is subscribed to the\n    given ``source`` on the given ``medium``.\n\n    If the optional ``subentity_kind`` parameter is not ``None``,\n    return ``True`` if *any* of the ``entity``'s sub-entities, of the\n    given type, are subscribed to the given ``source`` on the given\n    ``medium``.\n\nIn the common case, checking for subscriptions involves looking at the\nmediums a single entity is subscribed to. In this case both\n``mediums_subscribed`` and ``is_subscribed`` should behave exactly as\nexpected. Their exact behavior is described in more detail below, in\nthe section \"Checking if an individual entity is subscribed\".\n\nThe implications of including a ``subentity_kind`` argument are\nsomewhat more subtle. These implications are described in more detail\nbelow, in the section \"Checking if anyone in a group is subscribed\".\n\n\nChecking if an individual entity is subscribed\n``````````````````````````````````````````````````\n\nBefore sending notifications to users, your application wants to make\nsure that it's sending those notifications to users who have been\nincluded through a subscription, and not excluded themselves by\nunsubscribing.\n\nTo check the subscription status of a single entity, simply call\n``mediums_subscribed`` if you want a list of all the mediums an entity\nis subscribed to, for a given source, or call ``is_subscribed`` if you\nwant to check if that entity is subscribed to a particular medium for\na given source. When checking the subscription status of a single\nentity, the ``subentity_kind`` argument should be left as ``None``.\n\nWhen ``mediums_subscribed`` or ``is_subscribed`` are called without a\n``subentity_kind`` argument, the behavior of these methods is\nstraightforward. They will return a medium, or return true for that\nmedium, only if:\n\n1. The entity is part of a individual subscription, or is part of a\ngroup subscription for the given source.\n\n2. The entity is not unsubscribed from that source and medium.\n\nOnce you have checked that an individual entity is subscribed to a\ngiven source/medium combination, you can be confident in delivering\nthat notification.\n\n\nChecking if anyone in a group is subscribed\n``````````````````````````````````````````````````\n\nIn some cases, your application may have an event that applies to a\ngroup of individuals, and you may wish to check if any of those\nindividuals are subscribed to receive notifications for that\nevent.\n\nBoth ``mediums_subscribed`` and ``is_subscribed`` can also take an\noptional parameter ``subentity_kind`` which will change their\nbehavior fairly significantly. In this case, the provided argument,\n``entity``, is assumed to be a super-entity, and these functions\nreturn values based on what *any* of the sub entities are subscribed\nto.\n\nSo, passing in a super-entity, and subentity-type to either\n``mediums_subscribed`` or ``is_subscribed`` can provide a useful start\nfor delivering notifications.\n\nNote that this is only an *approximation* of what individuals in the\ngroup are subscribed to. Before actually delivering a notification\nto any subentity, the application must check that each user is\nactually subscribed to receive that notification.\n\n\nFiltering entities based on subscriptions\n``````````````````````````````````````````````````\n\nGiven some number of entities, that may or may not be subscribed to\nnotifications from a given source and medium, it could be complicated\nto determine all the possible entity relationships, and the relevant\nsubscriptions and unsubscriptions to check exactly which of those\nentities should be notified. The entity-subscription framework\nprovides a method, ``Subscription.objects.filter_not_subscribed`` that\nwill take the list of entities and return only those that should\ndefinitely recieve the notification.\n\n.. code:: Python\n\n   entities = [entity_1, entity_2, entity_3]\n   subscribed_entities = Subscription.objects.filter_not_subscribed(source, medium, entities)\n\nThis method returns a queryset of entities to be notified. It takes\ninto account all possible group subscriptions the entities may belong\nto, as well as removing entities that are unsubscribed from these\nnotifications.\n\nIt does, require, however, that all the entities provided are of the\nsame ``entity_kind``.\n\n\nRelease notes\n``````````````````````````````````````````````````\n\n* 0.4.0\n\n    * Migrated Django Entity Subscription to use the ``EntityKind`` model for specifying\n        different kinds of entities. This was a new addition in Django Entity 1.5. Schema migrations\n        are provided that remove the ``subentity_type`` ``ContentType`` variable from the ``Subscription``\n        model and add the ``subentity_kind`` ``EntityKind`` variable. Note that it is up to the\n        user to write the appropriate data migration for converting entity types to entity kinds.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ambitioninc/django-entity-subscription", "keywords": "", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "django-entity-subscription", "package_url": "https://pypi.org/project/django-entity-subscription/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-entity-subscription/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/ambitioninc/django-entity-subscription"}, "release_url": "https://pypi.org/project/django-entity-subscription/0.4.1/", "requires_dist": null, "requires_python": null, "summary": "Make subscription management easy and entity-based.", "version": "0.4.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Django Entity Subscription uses the power of the <a href=\"https://github.com/ambitioninc/django-entity\" rel=\"nofollow\">Django-Entity</a>\nframework to make managing subscriptions easy and powerful, for you\nand your users.</p>\n<div id=\"overview\">\n<h2>Overview</h2>\n<p>This django app, includes four models:</p>\n<ul>\n<li><tt>Subscription</tt></li>\n<li><tt>Unsubscribe</tt></li>\n<li><tt>Medium</tt></li>\n<li><tt>Source</tt></li>\n</ul>\n<p>all available from within the package <tt>entity_subscription.models</tt>.</p>\n<p>By creating objects in these models, you and the users of your\napplication can have fine grained control over how users are notified\nand about what they are notified. The <tt>entity_subscription</tt> app is\nagnostic about how users are actually notified about the subscriptions\nthat are set up, but is designed to be a dependency of whatever\nnotification system is put in place. It is assumed that the consumer\nof this library already has some idea of what notifications are going\nto be sent, and what delivery methods are going to be used to send the\nnotifications.</p>\n<p>Once subscription information is stored in those models, the\n<tt>entity_subscription</tt> app also provides some methods to make it\neasier to reason about and act on the stored subscriptions.</p>\n<ul>\n<li><tt>Subscription.objects.mediums_subscribed</tt></li>\n<li><tt>Subscription.objects.is_subscribed</tt></li>\n</ul>\n</div>\n<div id=\"sources-and-mediums\">\n<h2>Sources and Mediums</h2>\n<p>The <tt>entity_subscription</tt> app creates a strong boundary between the\n\u201csource\u201d of notifications from within an application and the \u201cmedium\u201d\nused to deliver the notification to the users of the application.</p>\n<div id=\"sources\">\n<h3>Sources</h3>\n<p>From a user of your application\u2019s perspective a \u201csource\u201d is a category\nof notifications that they can subscribe to, or unsubscribe from. It\ncould be something like \u201cNew Products\u201d or \u201cImportant Site\nChanges\u201d.</p>\n<p>For any given source, users may want to receive notifications over\ndifferent mediums (like \u201cEmail\u201d, \u201cIn-site\u201d, \u201ctext-message\u201d). By\ndividing notifications into different sources, users can choose to\nreceive that type of notification over whatever medium they prefer.</p>\n<p>To achieve this within an application a \u201csource\u201d of notifications is\nan object that describes where in the app a notification came\nfrom. Pieces of code that originate events which lead to notifications\nwill want to own a <tt>Source</tt> object, or at least know the name of one,\nso that they can clearly communicate the <tt>source</tt> of the\nnotifications they are originating.</p>\n<p>The actual source objects in the database are fairly simple, and are\ncreated through the standard <tt>objects.create</tt> interface. They have a\nunique identifier, a user friendly display name, and a longer form\ndescription.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">entity_subscription.models</span> <span class=\"kn\">import</span> <span class=\"n\">Source</span>\n\n<span class=\"n\">Source</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'new_products'</span><span class=\"p\">,</span>\n    <span class=\"n\">display_name</span><span class=\"o\">=</span><span class=\"s1\">'New Products'</span><span class=\"p\">,</span>\n    <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s1\">'Tells you whenever a new item is available in the store.'</span>\n<span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"mediums\">\n<h3>Mediums</h3>\n<p>From a user of your application\u2019s perspective a \u201cmedium\u201d is a way in\nwhich they can be notified. Your site may support a variety of\ndifferent mediums for notifying your users of different\nhappenings. Examples could include Email, Text Messages, a News-Feed,\nor a In-site Notification center.</p>\n<p>Users will likely want to receive notifications through some\ncombination of the available mediums, but only for certain categories\nof notifications. They may want some notifications that they view as\nsomewhat important to go to their email, notifications that are very\nimportant to go to email and text-message, and all the rest to go to\nan in-site notification center. By distinguishing between mediums in a\nsubscription library, users can decide how each \u201csource\u201d of\nnotifications is delivered to them.</p>\n<p>The pieces of the application that handle actually sending\nnotifications will want to own a <tt>Medium</tt> object that describes\nthem, or at least know the unique name of one. This enables the code\nsending notifications to handle subscriptions appropriately.</p>\n<p>As with sources, The actual medium objects in the database are fairly\nsimple, and are created through the standard <tt>objects.create</tt>\ninterface. They have a unique identifier, a user friendly display\nname, and a longer form description.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">entity_subscription.models</span> <span class=\"kn\">import</span> <span class=\"n\">Medium</span>\n\n<span class=\"n\">Medium</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'in_site'</span><span class=\"p\">,</span>\n    <span class=\"n\">display_name</span><span class=\"o\">=</span><span class=\"s1\">'In Site'</span><span class=\"p\">,</span>\n    <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s1\">'Notifications available in the Accounts/Notifications tab.'</span>\n<span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"source-and-medium-considerations\">\n<h3>Source and Medium Considerations</h3>\n<p>Both <tt>Source</tt> and <tt>Medium</tt> objects can be effectively used as\nstatic records that are setup as initial data for an application, or\nas dynamic records that change as the various sources and mediums for\nnotification change. It is important to consider, however, that\nexcessively dynamic sources and mediums will make it difficult for\nindividual entities to control their subscriptions.</p>\n</div>\n</div>\n<div id=\"subscriptions-and-unsubscribing\">\n<h2>Subscriptions and Unsubscribing</h2>\n<p>Entities and groups of entities can be subscribed to\nnotifications. Once subscribed, individuals, mirrored as entities, can\nchoose to unsubscribe from notifications for a given source and\nmedium.</p>\n<div id=\"subscriptions\">\n<h3>Subscriptions</h3>\n<p>Subscriptions will most often be created by the application, for an\nentire group of entities. In this case, all the entities will receive\nthe notification, unless they later opt out. Subscriptions can also be\ncreated for an individual entity to receive a certain type of\nnotification, as an opt-in subscription.</p>\n<p>This library includes the table <tt>Subscription</tt>, available from\n<tt>entity_subscription.models.Subscription</tt>. Creating a\n<tt>Subscription</tt> object is straightforward, assuming the relevant\n<tt>Source</tt> and <tt>Medium</tt> objects have been created (See \u201cSources and\nMediums\u201d above), and the entities to be subscribed and their group are\nappropriately mirrored. From there, we can use the standard\n<tt>objects.create</tt> interface.</p>\n<p>Given the sources and mediums created above, and a relationship\nbetween <tt>MyUser</tt> and <tt>MyGroup</tt> in a given application, the\nfollowing is a subscription for all the users in a particular group:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">my_app.models</span> <span class=\"kn\">import</span> <span class=\"n\">MyUser</span>\n<span class=\"kn\">from</span> <span class=\"nn\">my_app.models</span> <span class=\"kn\">import</span> <span class=\"n\">MyGroup</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">entity.models</span> <span class=\"kn\">import</span> <span class=\"n\">Entity</span><span class=\"p\">,</span> <span class=\"n\">EntityKind</span>\n<span class=\"kn\">from</span> <span class=\"nn\">entity_subscription.models</span> <span class=\"kn\">import</span> <span class=\"n\">Subscription</span><span class=\"p\">,</span> <span class=\"n\">Source</span><span class=\"p\">,</span> <span class=\"n\">Medium</span>\n\n<span class=\"n\">super_entity</span> <span class=\"o\">=</span> <span class=\"n\">MyGroup</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'product_group'</span><span class=\"p\">)</span>\n<span class=\"n\">Subscription</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span>\n    <span class=\"n\">medium</span> <span class=\"o\">=</span> <span class=\"n\">Medium</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'in_site'</span><span class=\"p\">),</span>\n    <span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"n\">Source</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'new_products'</span><span class=\"p\">),</span>\n    <span class=\"n\">entity</span> <span class=\"o\">=</span> <span class=\"n\">Entity</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get_for_obj</span><span class=\"p\">(</span><span class=\"n\">super_entity</span><span class=\"p\">),</span>\n    <span class=\"n\">subentity_kind</span> <span class=\"o\">=</span> <span class=\"n\">EntityKind</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'myuser'</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Each <tt>Subscription</tt> object stored in the database only subscribes\nthe group of entities to a single combination of a <tt>Source</tt> and\n<tt>Medium</tt>. To create subscriptions for delivering notifications from\nthe same source over different mediums, a new <tt>Subscription</tt> object\nmust be created for each source/medium combination.  This allows the\napplication developer and the users to have detailed control over what\nthe users are notified about, and how those notifications are\ndelivered.</p>\n</div>\n<div id=\"unsubscribing\">\n<h3>Unsubscribing</h3>\n<p>Individual users of your application may wish to remove themselves\nfrom receiving certain types of notifications.</p>\n<p>To unsubscribe an individual from from receiving notifications of a\ngiven source/medium combination is as simple as creating an\n<tt>Unsubscribe</tt> object. Assuming that \u201cRobert\u201d was subscribed to New\nProduct notifications in the subscription object above, unsubscribing\nhim from these notifications looks like:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">my_app.models</span> <span class=\"kn\">import</span> <span class=\"n\">MyUser</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">entity.models</span> <span class=\"kn\">import</span> <span class=\"n\">Entity</span>\n<span class=\"kn\">from</span> <span class=\"nn\">entity_subscription.models</span> <span class=\"kn\">import</span> <span class=\"n\">Unsubscribe</span><span class=\"p\">,</span> <span class=\"n\">Source</span><span class=\"p\">,</span> <span class=\"n\">Medium</span>\n\n<span class=\"n\">Robert</span> <span class=\"o\">=</span> <span class=\"n\">MyUser</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'Robert'</span><span class=\"p\">)</span>\n\n<span class=\"n\">Unsubscribe</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span>\n    <span class=\"n\">entity</span> <span class=\"o\">=</span> <span class=\"n\">Entity</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get_for_obj</span><span class=\"p\">(</span><span class=\"n\">Robert</span><span class=\"p\">)</span>\n    <span class=\"n\">medium</span> <span class=\"o\">=</span> <span class=\"n\">Medium</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'in_site'</span><span class=\"p\">)</span>\n    <span class=\"n\">sorce</span> <span class=\"o\">=</span> <span class=\"n\">Source</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'new_products'</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</pre>\n<p>With this object created, the rest of the group will receive these\nnotifications still, however \u201cRobert\u201d will no longer see them.</p>\n</div>\n<div id=\"subscriptions-and-unsubscribing-considerations\">\n<h3>Subscriptions and Unsubscribing Considerations</h3>\n<p>Separating subscriptions and unsubscriptions into separate tables\nallows for groups of entities to be subscribed with a single object in\nthe <tt>Subscription</tt> table. This is useful for subscribing large\ngroups of users to a notification by default.</p>\n<p>If a given notification may only have a few users interested in\nreceiving, it may make more sense for it to be an opt-in notification,\nwhere a Subscription object is made for each single entity that wishes\nto opt in (that is, a <tt>Subscription</tt> object with a\n<tt>subentity_kind=None</tt>). This may make more sense then subscribing\nlarge groups to this notification and having most of them unsubscribe.</p>\n</div>\n</div>\n<div id=\"checking-subscriptions\">\n<h2>Checking Subscriptions</h2>\n<p>Once your sites subscriptions are stored as shown above, you will want\nto use those subscriptions to decide to deliver (or not deliver)\nnotifications. The <tt>entity_subscription</tt> app provides a couple\nmethods to make it easier to find who is subscribed to what.</p>\n<dl>\n<dt>The <tt>SubscriptionManager</tt></dt>\n<dd><p>The following methods are available from the manager of the\n<tt>Subscription</tt> model.</p>\n<dl>\n<dt><tt>mediums_subscribed(source, entity, subentity_kind=None)</tt></dt>\n<dd><p>Return a queryset of all the mediums the given <tt>entity</tt> is\nsubscribed to, for the given <tt>source</tt>.</p>\n<p>If the optional <tt>subentity_kind</tt> parameter is given, return\n<em>every</em> medium that any of the given <tt>entity</tt>\u2019s sub-entities, of\nthe given <tt>EntityKind</tt>, is subscribed to.</p>\n</dd>\n<dt><tt>is_subscribed(source, medium, entity, subentity_kind=None)</tt></dt>\n<dd><p>Return a Boolean, indicating if the entity is subscribed to the\ngiven <tt>source</tt> on the given <tt>medium</tt>.</p>\n<p>If the optional <tt>subentity_kind</tt> parameter is not <tt>None</tt>,\nreturn <tt>True</tt> if <em>any</em> of the <tt>entity</tt>\u2019s sub-entities, of the\ngiven type, are subscribed to the given <tt>source</tt> on the given\n<tt>medium</tt>.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p>In the common case, checking for subscriptions involves looking at the\nmediums a single entity is subscribed to. In this case both\n<tt>mediums_subscribed</tt> and <tt>is_subscribed</tt> should behave exactly as\nexpected. Their exact behavior is described in more detail below, in\nthe section \u201cChecking if an individual entity is subscribed\u201d.</p>\n<p>The implications of including a <tt>subentity_kind</tt> argument are\nsomewhat more subtle. These implications are described in more detail\nbelow, in the section \u201cChecking if anyone in a group is subscribed\u201d.</p>\n<div id=\"checking-if-an-individual-entity-is-subscribed\">\n<h3>Checking if an individual entity is subscribed</h3>\n<p>Before sending notifications to users, your application wants to make\nsure that it\u2019s sending those notifications to users who have been\nincluded through a subscription, and not excluded themselves by\nunsubscribing.</p>\n<p>To check the subscription status of a single entity, simply call\n<tt>mediums_subscribed</tt> if you want a list of all the mediums an entity\nis subscribed to, for a given source, or call <tt>is_subscribed</tt> if you\nwant to check if that entity is subscribed to a particular medium for\na given source. When checking the subscription status of a single\nentity, the <tt>subentity_kind</tt> argument should be left as <tt>None</tt>.</p>\n<p>When <tt>mediums_subscribed</tt> or <tt>is_subscribed</tt> are called without a\n<tt>subentity_kind</tt> argument, the behavior of these methods is\nstraightforward. They will return a medium, or return true for that\nmedium, only if:</p>\n<p>1. The entity is part of a individual subscription, or is part of a\ngroup subscription for the given source.</p>\n<ol>\n<li>The entity is not unsubscribed from that source and medium.</li>\n</ol>\n<p>Once you have checked that an individual entity is subscribed to a\ngiven source/medium combination, you can be confident in delivering\nthat notification.</p>\n</div>\n<div id=\"checking-if-anyone-in-a-group-is-subscribed\">\n<h3>Checking if anyone in a group is subscribed</h3>\n<p>In some cases, your application may have an event that applies to a\ngroup of individuals, and you may wish to check if any of those\nindividuals are subscribed to receive notifications for that\nevent.</p>\n<p>Both <tt>mediums_subscribed</tt> and <tt>is_subscribed</tt> can also take an\noptional parameter <tt>subentity_kind</tt> which will change their\nbehavior fairly significantly. In this case, the provided argument,\n<tt>entity</tt>, is assumed to be a super-entity, and these functions\nreturn values based on what <em>any</em> of the sub entities are subscribed\nto.</p>\n<p>So, passing in a super-entity, and subentity-type to either\n<tt>mediums_subscribed</tt> or <tt>is_subscribed</tt> can provide a useful start\nfor delivering notifications.</p>\n<p>Note that this is only an <em>approximation</em> of what individuals in the\ngroup are subscribed to. Before actually delivering a notification\nto any subentity, the application must check that each user is\nactually subscribed to receive that notification.</p>\n</div>\n<div id=\"filtering-entities-based-on-subscriptions\">\n<h3>Filtering entities based on subscriptions</h3>\n<p>Given some number of entities, that may or may not be subscribed to\nnotifications from a given source and medium, it could be complicated\nto determine all the possible entity relationships, and the relevant\nsubscriptions and unsubscriptions to check exactly which of those\nentities should be notified. The entity-subscription framework\nprovides a method, <tt>Subscription.objects.filter_not_subscribed</tt> that\nwill take the list of entities and return only those that should\ndefinitely recieve the notification.</p>\n<pre><span class=\"n\">entities</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">entity_1</span><span class=\"p\">,</span> <span class=\"n\">entity_2</span><span class=\"p\">,</span> <span class=\"n\">entity_3</span><span class=\"p\">]</span>\n<span class=\"n\">subscribed_entities</span> <span class=\"o\">=</span> <span class=\"n\">Subscription</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter_not_subscribed</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"p\">,</span> <span class=\"n\">medium</span><span class=\"p\">,</span> <span class=\"n\">entities</span><span class=\"p\">)</span>\n</pre>\n<p>This method returns a queryset of entities to be notified. It takes\ninto account all possible group subscriptions the entities may belong\nto, as well as removing entities that are unsubscribed from these\nnotifications.</p>\n<p>It does, require, however, that all the entities provided are of the\nsame <tt>entity_kind</tt>.</p>\n</div>\n<div id=\"release-notes\">\n<h3>Release notes</h3>\n<ul>\n<li><p>0.4.0</p>\n<blockquote>\n<ul>\n<li><dl>\n<dt>Migrated Django Entity Subscription to use the <tt>EntityKind</tt> model for specifying</dt>\n<dd>different kinds of entities. This was a new addition in Django Entity 1.5. Schema migrations\nare provided that remove the <tt>subentity_type</tt> <tt>ContentType</tt> variable from the <tt>Subscription</tt>\nmodel and add the <tt>subentity_kind</tt> <tt>EntityKind</tt> variable. Note that it is up to the\nuser to write the appropriate data migration for converting entity types to entity kinds.</dd>\n</dl>\n</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1242637, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "b1a4c7fbb452e51b02d50bc072549107", "sha256": "f1631d908a96d0d63ce02591b5694a389154c9f69f18ed90fe55c62133403ae9"}, "downloads": -1, "filename": "django-entity-subscription-0.1.tar.gz", "has_sig": false, "md5_digest": "b1a4c7fbb452e51b02d50bc072549107", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14780, "upload_time": "2014-06-12T17:42:51", "upload_time_iso_8601": "2014-06-12T17:42:51.792267Z", "url": "https://files.pythonhosted.org/packages/ea/8f/29b2764d591b2113fbf795d008082910c745efd485a0336bee76373bac97/django-entity-subscription-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "8913e4e21d9e4bf8cb5642f8ceff55b0", "sha256": "cf60e15968fbca6c33c196a121cafdf8d56cb090e4e673547cae81a54c0a24fc"}, "downloads": -1, "filename": "django-entity-subscription-0.1.1.tar.gz", "has_sig": false, "md5_digest": "8913e4e21d9e4bf8cb5642f8ceff55b0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15695, "upload_time": "2014-06-18T15:29:09", "upload_time_iso_8601": "2014-06-18T15:29:09.290792Z", "url": "https://files.pythonhosted.org/packages/07/51/980d83f8611725fcd4e7b2849e37e2fac4fcc9ef83ed42b76bcd7722ad49/django-entity-subscription-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "0dd9493a773e752793445512fc6ceb68", "sha256": "4926664943a2e1bbbddbeac2326cac943c2d4e008635c0845e59288c085258ff"}, "downloads": -1, "filename": "django-entity-subscription-0.1.2.tar.gz", "has_sig": false, "md5_digest": "0dd9493a773e752793445512fc6ceb68", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15742, "upload_time": "2014-06-24T15:14:13", "upload_time_iso_8601": "2014-06-24T15:14:13.837244Z", "url": "https://files.pythonhosted.org/packages/1f/ca/57792f270015716b203b50f15d70922e3e722954463a413f06ba23de1d3a/django-entity-subscription-0.1.2.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "e979c779d92b3f18e1a253e799c3eefb", "sha256": "5eea273623b30fbf360d50f7f557a9ee8d608aa7e7eb4e4509cca8404ba87e43"}, "downloads": -1, "filename": "django-entity-subscription-0.2.0.tar.gz", "has_sig": false, "md5_digest": "e979c779d92b3f18e1a253e799c3eefb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17052, "upload_time": "2014-07-03T14:14:57", "upload_time_iso_8601": "2014-07-03T14:14:57.380353Z", "url": "https://files.pythonhosted.org/packages/ab/d9/ced1a0639fe546d851fb8936c2d276b4c13170200774317f0d1abcbd8191/django-entity-subscription-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "9332a45d06a67488b77c6ff7f0b1a25a", "sha256": "f18baa91f38d31235a5f93ec06bed2d5b51cd15cd5eab00311cd8089528d20bd"}, "downloads": -1, "filename": "django-entity-subscription-0.2.1.tar.gz", "has_sig": false, "md5_digest": "9332a45d06a67488b77c6ff7f0b1a25a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17147, "upload_time": "2014-07-09T19:47:23", "upload_time_iso_8601": "2014-07-09T19:47:23.269012Z", "url": "https://files.pythonhosted.org/packages/69/c4/0f4cdfcc640d676b3e13f0cb58d428af8ea485921fcc773786be375c1c95/django-entity-subscription-0.2.1.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "6207f104a7f327a5c115d9d9b2bba6fc", "sha256": "61f034932bf541af0c342ec4e39b2d5a326d20ca1c838151c1b5d8b906760c20"}, "downloads": -1, "filename": "django-entity-subscription-0.3.0.tar.gz", "has_sig": false, "md5_digest": "6207f104a7f327a5c115d9d9b2bba6fc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17783, "upload_time": "2014-07-15T19:52:14", "upload_time_iso_8601": "2014-07-15T19:52:14.987547Z", "url": "https://files.pythonhosted.org/packages/a3/bf/98d9092e98e3cf4220cccfea7ab2accdba7b293a39e4313f3088c2b665e1/django-entity-subscription-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "1c7450947a53fe9a5c055e1950868359", "sha256": "c912b3ed947cc765294365d572485bcb5746f4f41bdf10db031f7040666a1f33"}, "downloads": -1, "filename": "django-entity-subscription-0.4.0.tar.gz", "has_sig": false, "md5_digest": "1c7450947a53fe9a5c055e1950868359", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18849, "upload_time": "2014-09-29T19:38:49", "upload_time_iso_8601": "2014-09-29T19:38:49.921916Z", "url": "https://files.pythonhosted.org/packages/20/ed/cb03950295b4af2346fc7c044d73adfd8d8d7076cea0fa5d3584cda47ccd/django-entity-subscription-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "bff4ea96b7d842fb82ca0bf9b561ba4a", "sha256": "ee4b3a1a824c1cb0ef8e63b9fe03d7f9d7f62c8a11238733a30f8db5531d055c"}, "downloads": -1, "filename": "django-entity-subscription-0.4.1.tar.gz", "has_sig": false, "md5_digest": "bff4ea96b7d842fb82ca0bf9b561ba4a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18802, "upload_time": "2014-09-30T02:54:19", "upload_time_iso_8601": "2014-09-30T02:54:19.143525Z", "url": "https://files.pythonhosted.org/packages/b3/36/3ee39a9177bbb3e2fb534b218d71ffe90719db3ed10ce9839cc04fcb5ae4/django-entity-subscription-0.4.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bff4ea96b7d842fb82ca0bf9b561ba4a", "sha256": "ee4b3a1a824c1cb0ef8e63b9fe03d7f9d7f62c8a11238733a30f8db5531d055c"}, "downloads": -1, "filename": "django-entity-subscription-0.4.1.tar.gz", "has_sig": false, "md5_digest": "bff4ea96b7d842fb82ca0bf9b561ba4a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18802, "upload_time": "2014-09-30T02:54:19", "upload_time_iso_8601": "2014-09-30T02:54:19.143525Z", "url": "https://files.pythonhosted.org/packages/b3/36/3ee39a9177bbb3e2fb534b218d71ffe90719db3ed10ce9839cc04fcb5ae4/django-entity-subscription-0.4.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:36:21 2020"}