{"info": {"author": "Lawrence Berkeley National Laboratory", "author_email": "rfgunion@lbl.gov", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Science/Research", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Scientific/Engineering"], "description": "dmtoqt: EDM to Qt Parser\n########################\n\nThis documentation resides at https://controls.als.lbl.gov/alscg/dmtoqt/latest.\n\nOverview\n===========\ndmtoqt takes EDM files (*.edl) as input, and writes Qt Designer UI files (*.ui).  It takes advantage\nof EPICS-aware Qt widget frameworks to mimic the intent and appearance of the original EDM user interfaces\nas closely as possible.\n\nSynpopsis\n==========\n\nInvoke dmtoqt like::\n\n\tpython dmtoqt.py --help\n\tusage: dmtoqt.py [-h] [-v | -q] [-p PATH] [-c COLORS]\n\t\t\t\t\t   [-f FRAMEWORK [FRAMEWORK ...]]\n\t\t\t\t\t   file [file ...]\n\tConvert EDM files to epicsqt-aware Qt ui files (for more details, please visit\n\thttps://controls.als.lbl.gov/alscg/dmtoqt)\n\tpositional arguments:\n\t\tfile File(s) to convert. Glob-style wildcards may be used.\n\t\t\t If no extension is provided, .edl will be added.\n\t\t\t Output goes to {file}.ui\n\toptional arguments:\n\t\t-h, --helpshow this help message and exit\n\t\t-v, --verbose Turn on verbose output\n\t\t-q, --quiet Be vewwy quiet\n\t\t-p PATH, --path PATHPath in which to look for input files and write output\n\t\t\tfiles\n\t\t-c COLORS, --colors COLORS\n\t\t\tPath to colors.list file. If not provided, will look\n\t\t\tin $EDMOBJECTS, $EDMPVOBJECTS, /etc/edm/edmobjects\n\t\t-f FRAMEWORK [FRAMEWORK ...], --framework FRAMEWORK [FRAMEWORK ...]\n\t\t\tUse framework \"EpicsQt\" and/or \"caQtDM\". If only one\n\t\t\targument is provided, only that framework will be\n\t\t\tused; if both are specified the best match for each\n\t\t\twidget will be chosen. Default is to use EpicsQt only\n\nRunning dmtoqt\n==============\n\nNormally, the only arguments required are the filename(s) of EDM files to be converted.\nThese may be glob-style wildcards, in which case all matching files will be read.\n\nExamples:\n\nOne or more input files::\n\n\tpython dmtoqt.py linac.edl booster.edl\n\nReads linac.edl and booster.edl from the current working directory, and produces\nlinac.ui and booster.ui in the same directory.  EpicsQt widgets will be produced.\n\nSpecifying a path::\n\n\tpython dmtoqt.py -p /usr/local/epics opi/*.edl\n\nReads all .edl files in /usr/local/epics/opi, and writes .ui files in the same\ndirectory.  The filenames will match the input filenames; that is, if a file\n/usr/local/epics/opi/linac.edl exists, /usr/local/epics/opi/linac.ui will be written.\n\nForcing use of caQtDM Widgets::\n\n\tpython dmtoqt.py -f caQtDM linac.edl\n\nReads linac.edl from the current directory, and writes linac.ui.  Only caQtDM\nwidgets will be used.  (CAUTION: caQtDM is not fully supported as of this writing)\n\n\nUsing multiple frameworks::\n\n\tpython dmtoqt.py -f caQtDM EpicsQt linac.edl\n\nReads linac.edl from the current directory, and writes linac.ui.  Widgets will\nbe EpicsQt or caQtDM, depending on which framework is most suitable for the input EDM widget.\n(CAUTION: Since caQtDM is not fully supported, this may not always provide optimal results.)\n\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/alscg/dmtoqt", "keywords": "EPICS edm qt epicsqt caqtdm development", "license": "EPICS Open License", "maintainer": "", "maintainer_email": "", "name": "dmtoqt", "package_url": "https://pypi.org/project/dmtoqt/", "platform": "", "project_url": "https://pypi.org/project/dmtoqt/", "project_urls": {"Homepage": "https://bitbucket.org/alscg/dmtoqt"}, "release_url": "https://pypi.org/project/dmtoqt/1.0.0/", "requires_dist": null, "requires_python": ">=2.7", "summary": "A tool for converting EDM displays to QT", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This documentation resides at <a href=\"https://controls.als.lbl.gov/alscg/dmtoqt/latest\" rel=\"nofollow\">https://controls.als.lbl.gov/alscg/dmtoqt/latest</a>.</p>\n<div id=\"overview\">\n<h2>Overview</h2>\n<p>dmtoqt takes EDM files (<em>.edl) as input, and writes Qt Designer UI files (</em>.ui).  It takes advantage\nof EPICS-aware Qt widget frameworks to mimic the intent and appearance of the original EDM user interfaces\nas closely as possible.</p>\n</div>\n<div id=\"synpopsis\">\n<h2>Synpopsis</h2>\n<p>Invoke dmtoqt like:</p>\n<pre>python dmtoqt.py --help\nusage: dmtoqt.py [-h] [-v | -q] [-p PATH] [-c COLORS]\n                                   [-f FRAMEWORK [FRAMEWORK ...]]\n                                   file [file ...]\nConvert EDM files to epicsqt-aware Qt ui files (for more details, please visit\nhttps://controls.als.lbl.gov/alscg/dmtoqt)\npositional arguments:\n        file File(s) to convert. Glob-style wildcards may be used.\n                 If no extension is provided, .edl will be added.\n                 Output goes to {file}.ui\noptional arguments:\n        -h, --helpshow this help message and exit\n        -v, --verbose Turn on verbose output\n        -q, --quiet Be vewwy quiet\n        -p PATH, --path PATHPath in which to look for input files and write output\n                files\n        -c COLORS, --colors COLORS\n                Path to colors.list file. If not provided, will look\n                in $EDMOBJECTS, $EDMPVOBJECTS, /etc/edm/edmobjects\n        -f FRAMEWORK [FRAMEWORK ...], --framework FRAMEWORK [FRAMEWORK ...]\n                Use framework \"EpicsQt\" and/or \"caQtDM\". If only one\n                argument is provided, only that framework will be\n                used; if both are specified the best match for each\n                widget will be chosen. Default is to use EpicsQt only\n</pre>\n</div>\n<div id=\"running-dmtoqt\">\n<h2>Running dmtoqt</h2>\n<p>Normally, the only arguments required are the filename(s) of EDM files to be converted.\nThese may be glob-style wildcards, in which case all matching files will be read.</p>\n<p>Examples:</p>\n<p>One or more input files:</p>\n<pre>python dmtoqt.py linac.edl booster.edl\n</pre>\n<p>Reads linac.edl and booster.edl from the current working directory, and produces\nlinac.ui and booster.ui in the same directory.  EpicsQt widgets will be produced.</p>\n<p>Specifying a path:</p>\n<pre>python dmtoqt.py -p /usr/local/epics opi/*.edl\n</pre>\n<p>Reads all .edl files in /usr/local/epics/opi, and writes .ui files in the same\ndirectory.  The filenames will match the input filenames; that is, if a file\n/usr/local/epics/opi/linac.edl exists, /usr/local/epics/opi/linac.ui will be written.</p>\n<p>Forcing use of caQtDM Widgets:</p>\n<pre>python dmtoqt.py -f caQtDM linac.edl\n</pre>\n<p>Reads linac.edl from the current directory, and writes linac.ui.  Only caQtDM\nwidgets will be used.  (CAUTION: caQtDM is not fully supported as of this writing)</p>\n<p>Using multiple frameworks:</p>\n<pre>python dmtoqt.py -f caQtDM EpicsQt linac.edl\n</pre>\n<p>Reads linac.edl from the current directory, and writes linac.ui.  Widgets will\nbe EpicsQt or caQtDM, depending on which framework is most suitable for the input EDM widget.\n(CAUTION: Since caQtDM is not fully supported, this may not always provide optimal results.)</p>\n</div>\n\n          </div>"}, "last_serial": 3378687, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "51f28a13c27f0f8f1363e9a1a10ecb20", "sha256": "a3b152f194a03842380e768ab2c3f505e780084b71632c6076bfec2988f1a395"}, "downloads": -1, "filename": "dmtoqt-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "51f28a13c27f0f8f1363e9a1a10ecb20", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7", "size": 16877, "upload_time": "2017-11-30T21:55:13", "upload_time_iso_8601": "2017-11-30T21:55:13.542755Z", "url": "https://files.pythonhosted.org/packages/5e/59/72bd6b988ac8dff4deff6357ee569863ecd160515350383ef0ec8f1096b4/dmtoqt-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "13e40ea2d9b9803d854b8e1014cb135e", "sha256": "9cbc5e85cbe579e5f0c9bea5324c0d5cd6dce2133197880538a257d139f2b8f5"}, "downloads": -1, "filename": "dmtoqt-1.0.0.tar.gz", "has_sig": false, "md5_digest": "13e40ea2d9b9803d854b8e1014cb135e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 78713, "upload_time": "2017-11-30T21:55:14", "upload_time_iso_8601": "2017-11-30T21:55:14.886123Z", "url": "https://files.pythonhosted.org/packages/9a/59/2e9c22932bf15b4b13155f0f78f5c1860b16693ac9b3a787c50f01d5bd26/dmtoqt-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "51f28a13c27f0f8f1363e9a1a10ecb20", "sha256": "a3b152f194a03842380e768ab2c3f505e780084b71632c6076bfec2988f1a395"}, "downloads": -1, "filename": "dmtoqt-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "51f28a13c27f0f8f1363e9a1a10ecb20", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7", "size": 16877, "upload_time": "2017-11-30T21:55:13", "upload_time_iso_8601": "2017-11-30T21:55:13.542755Z", "url": "https://files.pythonhosted.org/packages/5e/59/72bd6b988ac8dff4deff6357ee569863ecd160515350383ef0ec8f1096b4/dmtoqt-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "13e40ea2d9b9803d854b8e1014cb135e", "sha256": "9cbc5e85cbe579e5f0c9bea5324c0d5cd6dce2133197880538a257d139f2b8f5"}, "downloads": -1, "filename": "dmtoqt-1.0.0.tar.gz", "has_sig": false, "md5_digest": "13e40ea2d9b9803d854b8e1014cb135e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 78713, "upload_time": "2017-11-30T21:55:14", "upload_time_iso_8601": "2017-11-30T21:55:14.886123Z", "url": "https://files.pythonhosted.org/packages/9a/59/2e9c22932bf15b4b13155f0f78f5c1860b16693ac9b3a787c50f01d5bd26/dmtoqt-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:11 2020"}