{"info": {"author": "Scott Kitterman", "author_email": "scott@kitterman.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: No Input/Output (Daemon)", "Intended Audience :: System Administrators", "License :: OSI Approved :: GNU General Public License (GPL)", "Natural Language :: English", "Operating System :: POSIX", "Programming Language :: Python :: 3 :: Only", "Topic :: Communications :: Email :: Filters", "Topic :: Communications :: Email :: Mail Transport Agents", "Topic :: Security"], "description": "# OVERVIEW\n\nThis is a DKIM signing and verification milter.  It has been tested with both\nPostfix and Sendmail.\n\nThe configuration file is designed to be compatible with OpenDKIM, but only\na subset of OpenDKIM options are supported.  If an unsupported option is\nspecified, an error will be raised.\n\n\n# INSTALLATION\n\nThis package includes a default configuration file and man pages.  For those\nto be installed when installing using setup.py, the following incantation is\nrequired because setuptools developers decided not being able to do this by\ndefault is a feature:\n\n[sudo] python3 setup.py install --single-version-externally-managed --record=/dev/null\n\nFor users of Debian Stable (Debian 9, Codename Squeeze), all dependencies are\navailable in either the main or backports repositories:\n\n[sudo] apt install python3-milter python3-nacl python3-dnspython\n[sudo] apt install -t stretch-backports python3-authres python3-dkim\n\nIt is also available in the Debian package archive:\n\n[sudo] apt install dkimpy-milter [Debian 10 or later]\n[sudo] apt install -t stretch-backports dkimpy-milter [Debian 9]\n\nWhen installing using the Debian package, all dependencies are automatically\ninstalled.\n\nThe preferred method of installation is from PyPi using pip (if distribution\npackages are not available):\n\n[sudo] pip install dkimpy_milter\n\nUsing pip will cause required packages to be installed via easy_install if they\nhave not been previously installed.  Because pymilter and PyNaCl are compiled\nPython extensions, the system will need appropriate development packages and\nan C compiler.  Alternately, install these dependencies from distribution/OS\npackages and then pip install dkimpy_milter.\n\nThe milter will work with either py3dns (DNS) or dnspython (dns), preferring\ndnspython if both are available.  The dkimpy DKIM module also works with\neither.\n\n## NON-STANDARD INSTALLATION PATHS\n\nThe package includes a custom setup command called expand.  It allows various\nfile locations in init scripts, man pages, and config files to be over-ridden\nat install time.\n\nexpand: Expand @@ variables in input files, simlar to make macros.\nuser_options:\n --sysconfigdir=, e: Specify system configuration directory.\n --sbindir=, s: Specify system binary directory [not used].\n --bindir=, b: Specify binary directory.\n --rundir=,r: Specify run state directory.\n\nAs an example, to change the run directory to /var/run, one would do:\n\npython3 setup.py expand --rundir=/var/run\n[sudo] python3 setup.py install --single-version-externally-managed \\\n                                --record=/dev/null\n\nor in a single step (the order matters):\n\n[sudo] python3 setup.py expand --rundir=/var/run install \\\n                               --single-version-externally-managed \\\n                               --record=/dev/null\n\n# SETUP\n\n## SIGNING KEYS\n\nIn order to create DKIM signatures, a private key must be available.  Signing\nkeys should be protected (owned by root:root with permissions 600 in a\ndirectory that is not world readable).  Different keys are required for RSA\nand (if used) Ed25519.\n\n### RSA\n\nBoth public and private keys for RSA have standard formats and there are many\ntools available to create them.  Keys must (RFC 8302) have a minimum size of\n1024 bits and should have a size of at least 2048 bits.  The dknewkey script\nthat is provided with dkimpy is one such tool:\n\ndknewkey exampleprivkey\n\nwill produce both the private key file (.key suffix) and a file with the DKIM\npublic key record to be published DNS (.dns suffix).  RSA is the default key\ntype.  2048 bits is the default key size.\n\n### ED25519\n\nThere is no standardized non-binary representation for Ed25519 private keys,\nso in order to generate Ed25519 keys for dkimpy-milter, dkimpy specific tools\nmust be used to be compatible.  The same dknewkey script support Ed25519:\n\ndknewkey --ktype ed25519 anothernewkey\n\nwill provide both the private key file (.key suffix) and a file with the DKIM\npublic key record to be published DNS (.dns suffix).  Ed25519 keys do not have\nvariable bit lengths.\n\n### COMPLEX SIGNING CONFIGURATIONS\n\nThe KeyTable, KeyTableEd25519, and SigningTable are used to define signing\ninstructions to the filter where use of Domain, Selector and KeyFile together\nare insufficient.\n\nFirst, select the type of database you will use for each.  They need not\nbe the same.  The \"DATA SETS\" portion of the dkimpy-milter(8) man page\ndescribes the possibilities and how they are formatted.  Then, construct those\ndatabases.\n\nLet's suppose you want to sign for two domains, example.com and example.net.\nWithin example.com, you want to sign for user \"president\" differently than\neveryone else.  Let's say further that you want to use a flat text file.\n\nYou've generated private key files for each of these and stored them\nin the directory /usr/local/etc/dkim/keys as files \"president\", \"excom\" and\n\"exnet\", with the obvious intents.  You want to use selectors \"foo\", \"bar\"\nand \"baz\" for those, respectively.  The signing domains match the senders\n(i.e. the signatures for example.com's stuff will be held by example.com,\nand example.net likewise).\n\nFirst, write the KeyTable.  This is a list of the keys you intend to use,\nand you just assign arbitrary names to them.  So as a flat file, the KeyTable\nfor the above might look like this:\n\n\tpreskey\texample.com:foo:/usr/local/etc/dkim/keys/president\n\tcomkey\texample.com:bar:/usr/local/etc/dkim/keys/excom\n\tnetkey\texample.net:baz:/usr/local/etc/dkim/keys/exnet\n\nIf also signing with ed25519, specify a KeyTableEd25519 pointing to the keys\nneeded for ed25519.  Both KeyTable and KeyTableEd25519 are evaluated if there\nis a SigningTable (see below).\n\nPer the documentation, multi-field data sets that are made of flat files have\nthe fields separated by colons, but the key and value(s) are separated by\nwhitespace.\n\nSo now we've named each key file, and specified with which selector and domain\neach will be used, and then given each of those groupings a name.  This\nis your KeyTable.  Let's say you put it in /usr/local/etc/dkim/keytable.\n\nNext, write the SigningTable.  This maps senders (by default, taken from the\nFrom: header field of a message passing through the filter) to which keys\nwill be used to sign their mail.  Wildcards are allowed.  So to do what was\ndescribed above, we write it as follows:\n\n\tpresident@example.com\tpreskey\n\t*@example.com\t\tcomkey\n\t*@example.net\t\tnetkey\n\nSince we want to use wildcards, we can't actually use a regular flat file.\nWildcards require a regular expression file, or \"refile\".  The above is\nvalid format for one of those.  Let's say you put this in\n/usr/local/etc/dkim/signingtable.\n\nFinally, tell the filter that it should use these files by adding this to\nyour configuration file:\n\n\tKeyTable\t/usr/local/etc/dkim/keytable\n\tSigningTable\trefile:/usr/local/etc/dkim/signingtable\n\nYou could put \"file:\" in front of the filename for the KeyTable just to be\nprecise, but \"file:\" is assumed if the value starts with a \"/\".\n\nNote: Unlike opendkim, dkimpy-milter will check for \"\\*\" in the signing table\nregardless of if refile is specified or not.  Use of refile is supported for\ncompatibility with configurations initially developed for use with opendkim.\n\n## MTA INTEGRATION\n\nBoth a systemd unit file and a sysv init file are provided.  Both make\nassumptions about defaults being used, e.g. if a non-standard pidfile name is\nused, they will need to be updated.  The sysv init file uses start-stop-deamon\nfrom Debian.  It is not portable to systems without that available.\n\nThe dkimpy-milter drops priviledges after setup to the user/group specified in\nUserID.  During initial setup, this system user needs to be manually created.\nAs an example, using the default dkimpy-user on Debian, the command would be:\n\n[sudo] adduser --system --no-create-home --quiet --disabled-password \\\n               --disabled-login --shell /bin/false --group \\\n               --home /run/dkimpy-milter dkimpy-milter\n\nSince /var/run or /run is sometimes on a tempfs, if the PID file directory is\nmissing, the milter will create it on startup.\n\nTo start dkimpy-milter with systemd for the first time, you will need to take\nthe following steps:\n\n[sudo] systemctl daemon-reload\n[sudo] systemctl enable dkimpy-milter\n[sudo] systemctl start dkimpy-milter\n[sudo] systemctl status dkimpy-milter (to verify it started correctly)\n\nAs with all milters, dkimpy-milter needs to be integrated with your MTA of\nchoice (Sendmail or Postfix).  When integrating with your MTA, the risk of\nsignature invalidation due to content conversion of the message body needs to\nbe considered.  See RFC 6376, Section 5.3 for discussion of this issue.  As a\npractical matter, when signing, configure the milter to follow all others that\nmight modify the message body.  When verifying, configure the milter before\nother processes that might modify the message body.\n\n### SENDMAIL\n\nConfiguration is very similar to opendkim, but needs some adjustment for\ndkimpy-milter. Here's an example configuration line to include in your\nsendmail.mc:\n\nINPUT_MAIL_FILTER(`dkimpy-milter', `S=local:/run/dkimpy-milter/dkimpy-milter.sock')dnl\n\nChanging the sendmail.mc file requires a Make (to compile it into sendmail.cf)\nand a restart of sendmail.  Note that S= needs to match the value of Socket in\nthe dkimpy-milter configuration file.\n\nMilter support should be present by default in most versions of sendmail\nthese days, but if not included in your Sendmail build, see:\nhttp://www.elandsys.com/resources/sendmail/milter.html\n\n#### ISSUES USING SENDMAIL TO SIGN AND VERIFY\n\nWhen using the sendmail MTA in both signing and verifying mode, there are\na few issues of which to be aware that might cause operational problems\nand deserve consideration.\n\n(a) When the MTA will be used for relaying emails, e.g. delivering to other\n    hosts using the aliases mechanism, it is important not to break\n    signatures inserted by the original sender.  This is particularly sensitive\n    particular when the sending domain has published a \"reject\" DMARC policy.\n\n    By default, sendmail quotes to address header fields when there are no\n    quotes and the display part of the address contains a period or an\n    apostrophe.  However, opendkim only sees the raw, unmodified form of\n    the header field, and so the content that gets verified and what gets\n    signed will not be the same, guaranteeing the attached signature is not\n    valid.\n\n    To direct sendmail not to modify the headers, add this to your sendmail.mc:\n\n    \tconf(`confMUST_QUOTE_CHARS', `')\n\n(b) As stated in sendmail's KNOWNBUGS file, sendmail truncates header field\n    values longer than 256 characters, which could mean truncating the domain\n    of a long From: header field value and invalidating the signature.\n    You may wish to consider increasing MAXNAME in sendmail/conf.h to mitigate\n    changing the messages and invalidating their signatures.  This change\n    requires recompiling sendmail.\n\n(c) Similar to (a) above, sendmail may wrap very long single-line recipient\n    fields for presentation purposes; for example:\n\n    To: very long name <a@example.org>,anotherloo...ong name b <b@example.org>\n\n    ...might be rewritten as:\n\n    To: very long name <a@example.org>,\n    \tanotherloo...ong name b <b@example.org>\n\n    This rewrite is also done after opendkim has seen the message, meaning\n    the signature opendkim attaches to the message does not match the\n    content it signed.  There is not a known configuration change to\n    mitigate this mutation.\n\n    The only known mechanism for dealing with this is to have distinct\n    instances of opendkim do the verifying (inbound) and signing (outbound)\n    so that the version that arrives at the signing instance is already\n    in the rewritten form, guaranteeing the input and output are the same\n    and thus the signature matches the payload.\n\n### POSTFIX\n\nIntegration of dkimpy-milter into Postfix is like any milter (See Postfix's\nREADME_FILES/MILTER_README).  Here's an example master.cf excerpt that talks\nto two dkimpy-milter instances, one configured for signing and one configured\nfor verification:\n\nsmtp       inet  n       -       -       -      -       smtpd\n    ...\n    -o smtpd_milters=inet:localhost:8892\n    ...\n\nsubmission inet  n       -       -       -      -       smtpd\n    ...\n    -o smtpd_milters=inet:localhost:8891\n    ...\n\nThese need to match the Socket value for each dkimpy-milter instance.\n\nCare is required to segregate outbound mail to be signed and inbound mail to\nbe verified.  The above example uses two instances of dkimpy-milter to do\nthis.  There are many possible ways.  Here is another example using milter\nmacros to keep the mail streams segregated:\n\nPostfix master.cf:\n\nsmtp       inet  n       -       -       -       -       smtpd\n    ...\n    -o smtpd_milters=inet:localhost:8891\n    -o milter_macro_daemon_name=VERIFYING\n    ...\n\nsubmission inet n       -       -       -       -       smtpd\n    -o syslog_name=postfix/submission\n    -o smtpd_tls_security_level=encrypt\n    -o smtpd_sasl_auth_enable=yes\n    ...\n    -o milter_macro_daemon_name=ORIGINATING\n    -o smtpd_milters=inet:localhost:8891\n    ...\n\nDkimpy-milter.conf:\n\n...\nMode\t\t\tsv\nMacroList\t\tdameon_name|ORIGINATING\nMacroListVerify\t\tdaemon_name|VERIFYING\n...\n\n\n# NOTES\n\nThe python DKIM library, dkimpy, requires the entire message being signed or\nverified to be in memory, so dkimpy-milter does not write messages out to a\ntemp file.  This may impact performance on low-memory systems.\n\nDKIM with Ed25519 signatures are described in RFC 8463.  Version 1.0.0 and\nlater support Ed25519 signing and verification.  RFC 8301 removed rsa-sha1\nfrom DKIM.  dkimpy-milter does not sign with rsa-sha1, but still considers\nrsa-sha1 signatures as valid for verification because they are still in\ncommon use and are not known to be cryptographically broken.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://pypi.python.org/pypi/dkimpy-milter", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://launchpad.net/dkimpy-milter", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "dkimpy-milter", "package_url": "https://pypi.org/project/dkimpy-milter/", "platform": "", "project_url": "https://pypi.org/project/dkimpy-milter/", "project_urls": {"Download": "https://pypi.python.org/pypi/dkimpy-milter", "Homepage": "https://launchpad.net/dkimpy-milter"}, "release_url": "https://pypi.org/project/dkimpy-milter/1.2.1/", "requires_dist": null, "requires_python": "", "summary": "Domain Keys Identified Mail (DKIM) signing/verifying milter for Postfix/Sendmail.", "version": "1.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>OVERVIEW</h1>\n<p>This is a DKIM signing and verification milter.  It has been tested with both\nPostfix and Sendmail.</p>\n<p>The configuration file is designed to be compatible with OpenDKIM, but only\na subset of OpenDKIM options are supported.  If an unsupported option is\nspecified, an error will be raised.</p>\n<h1>INSTALLATION</h1>\n<p>This package includes a default configuration file and man pages.  For those\nto be installed when installing using setup.py, the following incantation is\nrequired because setuptools developers decided not being able to do this by\ndefault is a feature:</p>\n<p>[sudo] python3 setup.py install --single-version-externally-managed --record=/dev/null</p>\n<p>For users of Debian Stable (Debian 9, Codename Squeeze), all dependencies are\navailable in either the main or backports repositories:</p>\n<p>[sudo] apt install python3-milter python3-nacl python3-dnspython\n[sudo] apt install -t stretch-backports python3-authres python3-dkim</p>\n<p>It is also available in the Debian package archive:</p>\n<p>[sudo] apt install dkimpy-milter [Debian 10 or later]\n[sudo] apt install -t stretch-backports dkimpy-milter [Debian 9]</p>\n<p>When installing using the Debian package, all dependencies are automatically\ninstalled.</p>\n<p>The preferred method of installation is from PyPi using pip (if distribution\npackages are not available):</p>\n<p>[sudo] pip install dkimpy_milter</p>\n<p>Using pip will cause required packages to be installed via easy_install if they\nhave not been previously installed.  Because pymilter and PyNaCl are compiled\nPython extensions, the system will need appropriate development packages and\nan C compiler.  Alternately, install these dependencies from distribution/OS\npackages and then pip install dkimpy_milter.</p>\n<p>The milter will work with either py3dns (DNS) or dnspython (dns), preferring\ndnspython if both are available.  The dkimpy DKIM module also works with\neither.</p>\n<h2>NON-STANDARD INSTALLATION PATHS</h2>\n<p>The package includes a custom setup command called expand.  It allows various\nfile locations in init scripts, man pages, and config files to be over-ridden\nat install time.</p>\n<p>expand: Expand @@ variables in input files, simlar to make macros.\nuser_options:\n--sysconfigdir=, e: Specify system configuration directory.\n--sbindir=, s: Specify system binary directory [not used].\n--bindir=, b: Specify binary directory.\n--rundir=,r: Specify run state directory.</p>\n<p>As an example, to change the run directory to /var/run, one would do:</p>\n<p>python3 setup.py expand --rundir=/var/run\n[sudo] python3 setup.py install --single-version-externally-managed <br>\n--record=/dev/null</p>\n<p>or in a single step (the order matters):</p>\n<p>[sudo] python3 setup.py expand --rundir=/var/run install <br>\n--single-version-externally-managed <br>\n--record=/dev/null</p>\n<h1>SETUP</h1>\n<h2>SIGNING KEYS</h2>\n<p>In order to create DKIM signatures, a private key must be available.  Signing\nkeys should be protected (owned by root:root with permissions 600 in a\ndirectory that is not world readable).  Different keys are required for RSA\nand (if used) Ed25519.</p>\n<h3>RSA</h3>\n<p>Both public and private keys for RSA have standard formats and there are many\ntools available to create them.  Keys must (RFC 8302) have a minimum size of\n1024 bits and should have a size of at least 2048 bits.  The dknewkey script\nthat is provided with dkimpy is one such tool:</p>\n<p>dknewkey exampleprivkey</p>\n<p>will produce both the private key file (.key suffix) and a file with the DKIM\npublic key record to be published DNS (.dns suffix).  RSA is the default key\ntype.  2048 bits is the default key size.</p>\n<h3>ED25519</h3>\n<p>There is no standardized non-binary representation for Ed25519 private keys,\nso in order to generate Ed25519 keys for dkimpy-milter, dkimpy specific tools\nmust be used to be compatible.  The same dknewkey script support Ed25519:</p>\n<p>dknewkey --ktype ed25519 anothernewkey</p>\n<p>will provide both the private key file (.key suffix) and a file with the DKIM\npublic key record to be published DNS (.dns suffix).  Ed25519 keys do not have\nvariable bit lengths.</p>\n<h3>COMPLEX SIGNING CONFIGURATIONS</h3>\n<p>The KeyTable, KeyTableEd25519, and SigningTable are used to define signing\ninstructions to the filter where use of Domain, Selector and KeyFile together\nare insufficient.</p>\n<p>First, select the type of database you will use for each.  They need not\nbe the same.  The \"DATA SETS\" portion of the dkimpy-milter(8) man page\ndescribes the possibilities and how they are formatted.  Then, construct those\ndatabases.</p>\n<p>Let's suppose you want to sign for two domains, example.com and example.net.\nWithin example.com, you want to sign for user \"president\" differently than\neveryone else.  Let's say further that you want to use a flat text file.</p>\n<p>You've generated private key files for each of these and stored them\nin the directory /usr/local/etc/dkim/keys as files \"president\", \"excom\" and\n\"exnet\", with the obvious intents.  You want to use selectors \"foo\", \"bar\"\nand \"baz\" for those, respectively.  The signing domains match the senders\n(i.e. the signatures for example.com's stuff will be held by example.com,\nand example.net likewise).</p>\n<p>First, write the KeyTable.  This is a list of the keys you intend to use,\nand you just assign arbitrary names to them.  So as a flat file, the KeyTable\nfor the above might look like this:</p>\n<pre><code>preskey\texample.com:foo:/usr/local/etc/dkim/keys/president\ncomkey\texample.com:bar:/usr/local/etc/dkim/keys/excom\nnetkey\texample.net:baz:/usr/local/etc/dkim/keys/exnet\n</code></pre>\n<p>If also signing with ed25519, specify a KeyTableEd25519 pointing to the keys\nneeded for ed25519.  Both KeyTable and KeyTableEd25519 are evaluated if there\nis a SigningTable (see below).</p>\n<p>Per the documentation, multi-field data sets that are made of flat files have\nthe fields separated by colons, but the key and value(s) are separated by\nwhitespace.</p>\n<p>So now we've named each key file, and specified with which selector and domain\neach will be used, and then given each of those groupings a name.  This\nis your KeyTable.  Let's say you put it in /usr/local/etc/dkim/keytable.</p>\n<p>Next, write the SigningTable.  This maps senders (by default, taken from the\nFrom: header field of a message passing through the filter) to which keys\nwill be used to sign their mail.  Wildcards are allowed.  So to do what was\ndescribed above, we write it as follows:</p>\n<pre><code>president@example.com\tpreskey\n*@example.com\t\tcomkey\n*@example.net\t\tnetkey\n</code></pre>\n<p>Since we want to use wildcards, we can't actually use a regular flat file.\nWildcards require a regular expression file, or \"refile\".  The above is\nvalid format for one of those.  Let's say you put this in\n/usr/local/etc/dkim/signingtable.</p>\n<p>Finally, tell the filter that it should use these files by adding this to\nyour configuration file:</p>\n<pre><code>KeyTable\t/usr/local/etc/dkim/keytable\nSigningTable\trefile:/usr/local/etc/dkim/signingtable\n</code></pre>\n<p>You could put \"file:\" in front of the filename for the KeyTable just to be\nprecise, but \"file:\" is assumed if the value starts with a \"/\".</p>\n<p>Note: Unlike opendkim, dkimpy-milter will check for \"*\" in the signing table\nregardless of if refile is specified or not.  Use of refile is supported for\ncompatibility with configurations initially developed for use with opendkim.</p>\n<h2>MTA INTEGRATION</h2>\n<p>Both a systemd unit file and a sysv init file are provided.  Both make\nassumptions about defaults being used, e.g. if a non-standard pidfile name is\nused, they will need to be updated.  The sysv init file uses start-stop-deamon\nfrom Debian.  It is not portable to systems without that available.</p>\n<p>The dkimpy-milter drops priviledges after setup to the user/group specified in\nUserID.  During initial setup, this system user needs to be manually created.\nAs an example, using the default dkimpy-user on Debian, the command would be:</p>\n<p>[sudo] adduser --system --no-create-home --quiet --disabled-password <br>\n--disabled-login --shell /bin/false --group <br>\n--home /run/dkimpy-milter dkimpy-milter</p>\n<p>Since /var/run or /run is sometimes on a tempfs, if the PID file directory is\nmissing, the milter will create it on startup.</p>\n<p>To start dkimpy-milter with systemd for the first time, you will need to take\nthe following steps:</p>\n<p>[sudo] systemctl daemon-reload\n[sudo] systemctl enable dkimpy-milter\n[sudo] systemctl start dkimpy-milter\n[sudo] systemctl status dkimpy-milter (to verify it started correctly)</p>\n<p>As with all milters, dkimpy-milter needs to be integrated with your MTA of\nchoice (Sendmail or Postfix).  When integrating with your MTA, the risk of\nsignature invalidation due to content conversion of the message body needs to\nbe considered.  See RFC 6376, Section 5.3 for discussion of this issue.  As a\npractical matter, when signing, configure the milter to follow all others that\nmight modify the message body.  When verifying, configure the milter before\nother processes that might modify the message body.</p>\n<h3>SENDMAIL</h3>\n<p>Configuration is very similar to opendkim, but needs some adjustment for\ndkimpy-milter. Here's an example configuration line to include in your\nsendmail.mc:</p>\n<p>INPUT_MAIL_FILTER(<code>dkimpy-milter',</code>S=local:/run/dkimpy-milter/dkimpy-milter.sock')dnl</p>\n<p>Changing the sendmail.mc file requires a Make (to compile it into sendmail.cf)\nand a restart of sendmail.  Note that S= needs to match the value of Socket in\nthe dkimpy-milter configuration file.</p>\n<p>Milter support should be present by default in most versions of sendmail\nthese days, but if not included in your Sendmail build, see:\n<a href=\"http://www.elandsys.com/resources/sendmail/milter.html\" rel=\"nofollow\">http://www.elandsys.com/resources/sendmail/milter.html</a></p>\n<h4>ISSUES USING SENDMAIL TO SIGN AND VERIFY</h4>\n<p>When using the sendmail MTA in both signing and verifying mode, there are\na few issues of which to be aware that might cause operational problems\nand deserve consideration.</p>\n<p>(a) When the MTA will be used for relaying emails, e.g. delivering to other\nhosts using the aliases mechanism, it is important not to break\nsignatures inserted by the original sender.  This is particularly sensitive\nparticular when the sending domain has published a \"reject\" DMARC policy.</p>\n<pre><code>By default, sendmail quotes to address header fields when there are no\nquotes and the display part of the address contains a period or an\napostrophe.  However, opendkim only sees the raw, unmodified form of\nthe header field, and so the content that gets verified and what gets\nsigned will not be the same, guaranteeing the attached signature is not\nvalid.\n\nTo direct sendmail not to modify the headers, add this to your sendmail.mc:\n\n\tconf(`confMUST_QUOTE_CHARS', `')\n</code></pre>\n<p>(b) As stated in sendmail's KNOWNBUGS file, sendmail truncates header field\nvalues longer than 256 characters, which could mean truncating the domain\nof a long From: header field value and invalidating the signature.\nYou may wish to consider increasing MAXNAME in sendmail/conf.h to mitigate\nchanging the messages and invalidating their signatures.  This change\nrequires recompiling sendmail.</p>\n<p>(c) Similar to (a) above, sendmail may wrap very long single-line recipient\nfields for presentation purposes; for example:</p>\n<pre><code>To: very long name &lt;a@example.org&gt;,anotherloo...ong name b &lt;b@example.org&gt;\n\n...might be rewritten as:\n\nTo: very long name &lt;a@example.org&gt;,\n\tanotherloo...ong name b &lt;b@example.org&gt;\n\nThis rewrite is also done after opendkim has seen the message, meaning\nthe signature opendkim attaches to the message does not match the\ncontent it signed.  There is not a known configuration change to\nmitigate this mutation.\n\nThe only known mechanism for dealing with this is to have distinct\ninstances of opendkim do the verifying (inbound) and signing (outbound)\nso that the version that arrives at the signing instance is already\nin the rewritten form, guaranteeing the input and output are the same\nand thus the signature matches the payload.\n</code></pre>\n<h3>POSTFIX</h3>\n<p>Integration of dkimpy-milter into Postfix is like any milter (See Postfix's\nREADME_FILES/MILTER_README).  Here's an example master.cf excerpt that talks\nto two dkimpy-milter instances, one configured for signing and one configured\nfor verification:</p>\n<p>smtp       inet  n       -       -       -      -       smtpd\n...\n-o smtpd_milters=inet:localhost:8892\n...</p>\n<p>submission inet  n       -       -       -      -       smtpd\n...\n-o smtpd_milters=inet:localhost:8891\n...</p>\n<p>These need to match the Socket value for each dkimpy-milter instance.</p>\n<p>Care is required to segregate outbound mail to be signed and inbound mail to\nbe verified.  The above example uses two instances of dkimpy-milter to do\nthis.  There are many possible ways.  Here is another example using milter\nmacros to keep the mail streams segregated:</p>\n<p>Postfix master.cf:</p>\n<p>smtp       inet  n       -       -       -       -       smtpd\n...\n-o smtpd_milters=inet:localhost:8891\n-o milter_macro_daemon_name=VERIFYING\n...</p>\n<p>submission inet n       -       -       -       -       smtpd\n-o syslog_name=postfix/submission\n-o smtpd_tls_security_level=encrypt\n-o smtpd_sasl_auth_enable=yes\n...\n-o milter_macro_daemon_name=ORIGINATING\n-o smtpd_milters=inet:localhost:8891\n...</p>\n<p>Dkimpy-milter.conf:</p>\n<p>...\nMode\t\t\tsv\nMacroList\t\tdameon_name|ORIGINATING\nMacroListVerify\t\tdaemon_name|VERIFYING\n...</p>\n<h1>NOTES</h1>\n<p>The python DKIM library, dkimpy, requires the entire message being signed or\nverified to be in memory, so dkimpy-milter does not write messages out to a\ntemp file.  This may impact performance on low-memory systems.</p>\n<p>DKIM with Ed25519 signatures are described in RFC 8463.  Version 1.0.0 and\nlater support Ed25519 signing and verification.  RFC 8301 removed rsa-sha1\nfrom DKIM.  dkimpy-milter does not sign with rsa-sha1, but still considers\nrsa-sha1 signatures as valid for verification because they are still in\ncommon use and are not known to be cryptographically broken.</p>\n\n          </div>"}, "last_serial": 6395714, "releases": {"0.9.1": [{"comment_text": "", "digests": {"md5": "8683638089d73d1986965dd945381b78", "sha256": "bd2606c35d6cde5bf9103c87ac9b2f6b87c251b49c1777eec3fb66fedbc5f93a"}, "downloads": -1, "filename": "dkimpy-milter-0.9.1.tar.gz", "has_sig": true, "md5_digest": "8683638089d73d1986965dd945381b78", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23124, "upload_time": "2018-02-17T10:19:18", "upload_time_iso_8601": "2018-02-17T10:19:18.069682Z", "url": "https://files.pythonhosted.org/packages/3f/34/3c947cbcad58cf541d9709f9f053f45b5d3b198fdaccfbb02dfadcddd2dd/dkimpy-milter-0.9.1.tar.gz", "yanked": false}], "0.9.2": [{"comment_text": "", "digests": {"md5": "d88c724788f08a18574ae9bc5f2eba6c", "sha256": "414ec715ae4069c3eea749983c0a82aacdc4cf1cf85127afd729844476671e9e"}, "downloads": -1, "filename": "dkimpy-milter-0.9.2.tar.gz", "has_sig": true, "md5_digest": "d88c724788f08a18574ae9bc5f2eba6c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28196, "upload_time": "2018-02-19T22:20:13", "upload_time_iso_8601": "2018-02-19T22:20:13.964312Z", "url": "https://files.pythonhosted.org/packages/02/ad/0dfb698ed629e1bfb8d4ab72a58013b918d450e1dcca67558d1712cc1a14/dkimpy-milter-0.9.2.tar.gz", "yanked": false}], "0.9.3": [{"comment_text": "", "digests": {"md5": "88c856942b75302b15dbd8efd47b1505", "sha256": "ac631d0a5d9cd6a577db1ced42fbf7f2480eb3f9d00363352c7c084d24341bd0"}, "downloads": -1, "filename": "dkimpy-milter-0.9.3.tar.gz", "has_sig": true, "md5_digest": "88c856942b75302b15dbd8efd47b1505", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28992, "upload_time": "2018-03-02T21:23:18", "upload_time_iso_8601": "2018-03-02T21:23:18.642714Z", "url": "https://files.pythonhosted.org/packages/a0/12/5510ae78835e00638defcdcb33f843cdb0edebd757c42458f715e5756cf3/dkimpy-milter-0.9.3.tar.gz", "yanked": false}], "0.9.4": [{"comment_text": "", "digests": {"md5": "571d585b488089594f198c25a7d07029", "sha256": "b1c2aeba1d6f4629da4e61317be17acf6193e123a64cf0a58e6bf95e29d4a89e"}, "downloads": -1, "filename": "dkimpy-milter-0.9.4.tar.gz", "has_sig": true, "md5_digest": "571d585b488089594f198c25a7d07029", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34165, "upload_time": "2018-03-09T22:18:19", "upload_time_iso_8601": "2018-03-09T22:18:19.396411Z", "url": "https://files.pythonhosted.org/packages/4c/52/9627087d107bda5aeeba7b678421f7f8461a169df36a937487e263c6a076/dkimpy-milter-0.9.4.tar.gz", "yanked": false}], "0.9.5": [{"comment_text": "", "digests": {"md5": "52dafa79b80cd604b29fe12042af5997", "sha256": "1e06462007a1a293aa3d7b18d8d258a6f182effd2a68c0d3d3ea983752faa196"}, "downloads": -1, "filename": "dkimpy-milter-0.9.5.tar.gz", "has_sig": true, "md5_digest": "52dafa79b80cd604b29fe12042af5997", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35221, "upload_time": "2018-03-11T00:10:19", "upload_time_iso_8601": "2018-03-11T00:10:19.790014Z", "url": "https://files.pythonhosted.org/packages/d9/0d/7681e93b23abb469cdbcd8f5d8256ca0bcf19f685996b62cc77e06cdfdbc/dkimpy-milter-0.9.5.tar.gz", "yanked": false}], "0.9.5.1": [{"comment_text": "", "digests": {"md5": "acc8e66900e31103446d9b63afd48b58", "sha256": "f90bb652c40d279144df8b31c556756d49ea231c7b5f4867ec8343a9bccebf42"}, "downloads": -1, "filename": "dkimpy-milter-0.9.5.1.tar.gz", "has_sig": true, "md5_digest": "acc8e66900e31103446d9b63afd48b58", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35255, "upload_time": "2018-03-11T01:14:23", "upload_time_iso_8601": "2018-03-11T01:14:23.218242Z", "url": "https://files.pythonhosted.org/packages/15/c7/5503b6a822cbfb346a403ce22c7603bd9f53f2a5c6cae7840e2101014723/dkimpy-milter-0.9.5.1.tar.gz", "yanked": false}], "0.9.6": [{"comment_text": "", "digests": {"md5": "b2e6f01476a2f45c747efad7c01305bb", "sha256": "8646ef175992ec5d3aac6390a8f07ed206bbefc81a2519cba51386135990b5ee"}, "downloads": -1, "filename": "dkimpy-milter-0.9.6.tar.gz", "has_sig": true, "md5_digest": "b2e6f01476a2f45c747efad7c01305bb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35528, "upload_time": "2018-03-13T23:23:10", "upload_time_iso_8601": "2018-03-13T23:23:10.371435Z", "url": "https://files.pythonhosted.org/packages/e2/90/bfcfde7159314698460fd381ab370efef5ad40dfc549846d86678d30b3dc/dkimpy-milter-0.9.6.tar.gz", "yanked": false}], "0.9.7": [{"comment_text": "", "digests": {"md5": "7caf3cfef4df46d40f4cdd18c00224a4", "sha256": "5580040f1dbc6152355449faec9b3b51b3160b2b1e1cf557f149a03f06747cd0"}, "downloads": -1, "filename": "dkimpy-milter-0.9.7.tar.gz", "has_sig": true, "md5_digest": "7caf3cfef4df46d40f4cdd18c00224a4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35650, "upload_time": "2018-03-19T05:11:50", "upload_time_iso_8601": "2018-03-19T05:11:50.712054Z", "url": "https://files.pythonhosted.org/packages/b8/b5/82b338f9f9ab27ed34c9fc3136aeb5cc3ffc36766678d3e19a84fd8ebccc/dkimpy-milter-0.9.7.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "86749c26ec6702b769db536568cde40e", "sha256": "065a34ea079a92f68849aad44bc1c728c8ddb2ddcb57d13fd34148d990b7fa07"}, "downloads": -1, "filename": "dkimpy-milter-1.0.0.tar.gz", "has_sig": true, "md5_digest": "86749c26ec6702b769db536568cde40e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35808, "upload_time": "2018-05-11T22:53:20", "upload_time_iso_8601": "2018-05-11T22:53:20.416919Z", "url": "https://files.pythonhosted.org/packages/61/a9/35b11d1f73dff5dfeb973e82c8a8b7f799921bff2030322b00b4f5309204/dkimpy-milter-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "e81df07925075fa31b95998fd3dcef63", "sha256": "9d1e925056286791fd0150d049512943286903b2e068be5c4f311d91fcb583eb"}, "downloads": -1, "filename": "dkimpy-milter-1.0.1.tar.gz", "has_sig": true, "md5_digest": "e81df07925075fa31b95998fd3dcef63", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37250, "upload_time": "2019-02-11T20:20:55", "upload_time_iso_8601": "2019-02-11T20:20:55.561555Z", "url": "https://files.pythonhosted.org/packages/57/3c/9d18aa17cb2d633c54d9ad4bf403ec92c21385b38ccfbe862dc37d6987d3/dkimpy-milter-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "36bc7db90473f9bf84b4adaee72c60ad", "sha256": "705442ac8990620f99f13c7a32d69a53ee85fab05442422142e6494ada851ea2"}, "downloads": -1, "filename": "dkimpy-milter-1.0.2.tar.gz", "has_sig": true, "md5_digest": "36bc7db90473f9bf84b4adaee72c60ad", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37496, "upload_time": "2019-10-07T04:18:32", "upload_time_iso_8601": "2019-10-07T04:18:32.998825Z", "url": "https://files.pythonhosted.org/packages/16/c6/077a93aeac510003e0bdf977896b9e79b750dbf995441fe5daa3cfdf9546/dkimpy-milter-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "6a0ea9936d738ad8897888c5a6d75a36", "sha256": "009e44f6c7f979cca6f6e2062980fa98690e3a231b42bcbc964d2b567d00df34"}, "downloads": -1, "filename": "dkimpy-milter-1.0.3.tar.gz", "has_sig": true, "md5_digest": "6a0ea9936d738ad8897888c5a6d75a36", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37527, "upload_time": "2019-11-23T01:44:41", "upload_time_iso_8601": "2019-11-23T01:44:41.473694Z", "url": "https://files.pythonhosted.org/packages/43/90/3fb1cc8b22fbd08ce261c1f8dc99edd373b459cfd3c5ca7f52ce4912d144/dkimpy-milter-1.0.3.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "c415678721039f5d54dbd31b47a70ffd", "sha256": "eadb8d109b18344a1e500079ab99ae86777f2be689ae666d6bced1ad5d42df8c"}, "downloads": -1, "filename": "dkimpy-milter-1.1.0.tar.gz", "has_sig": true, "md5_digest": "c415678721039f5d54dbd31b47a70ffd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39231, "upload_time": "2019-04-13T03:03:17", "upload_time_iso_8601": "2019-04-13T03:03:17.470511Z", "url": "https://files.pythonhosted.org/packages/a5/65/09920c6619230b9bf7cab3410aa19a9424a909153cac610adb22b3372551/dkimpy-milter-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "2a5491d6129d7bcb234dc8f8bab037a8", "sha256": "f388c4ff76d4cc9f99c83441218e592c4a3d7ffeefcb6af8df988309df7a2fbe"}, "downloads": -1, "filename": "dkimpy-milter-1.1.1.tar.gz", "has_sig": true, "md5_digest": "2a5491d6129d7bcb234dc8f8bab037a8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39821, "upload_time": "2019-09-06T04:59:03", "upload_time_iso_8601": "2019-09-06T04:59:03.241793Z", "url": "https://files.pythonhosted.org/packages/4b/76/d0b06330ac93539c94a5db54f51ff889557997a729b326a0fa3bf753e41c/dkimpy-milter-1.1.1.tar.gz", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "3865899ef166c4fb84c4265bd9955d8e", "sha256": "7741b156a93714d5e78ce60333f33f974ea4e84ec1faeb2ad75c1e098abe45a8"}, "downloads": -1, "filename": "dkimpy-milter-1.1.2.tar.gz", "has_sig": true, "md5_digest": "3865899ef166c4fb84c4265bd9955d8e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40032, "upload_time": "2019-09-23T17:41:50", "upload_time_iso_8601": "2019-09-23T17:41:50.902586Z", "url": "https://files.pythonhosted.org/packages/89/85/552152febb688d158569fcf3873921e392e9acc3981ea8718e8da02fbdb3/dkimpy-milter-1.1.2.tar.gz", "yanked": false}], "1.1.3": [{"comment_text": "", "digests": {"md5": "2fd37b17c514e8ffad22c010a6b15ecb", "sha256": "9845fcd65f56da112b7f7a85f314b067428f8807bf4f3a5c2b6d87800027c7fa"}, "downloads": -1, "filename": "dkimpy-milter-1.1.3.tar.gz", "has_sig": true, "md5_digest": "2fd37b17c514e8ffad22c010a6b15ecb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40127, "upload_time": "2019-10-06T04:23:30", "upload_time_iso_8601": "2019-10-06T04:23:30.515926Z", "url": "https://files.pythonhosted.org/packages/d4/c6/7a117f6d56f2cb40cb3c005c258ee2c3148e80aa3096b14e39ce4806fe16/dkimpy-milter-1.1.3.tar.gz", "yanked": false}], "1.1.4": [{"comment_text": "", "digests": {"md5": "ff4bd1aaaba8f8932c5455377c109058", "sha256": "fc139037bedcec1cb8a3d665a5e9e327abaf8d81bd6f4c353bbab4ac13d8514f"}, "downloads": -1, "filename": "dkimpy-milter-1.1.4.tar.gz", "has_sig": true, "md5_digest": "ff4bd1aaaba8f8932c5455377c109058", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40035, "upload_time": "2019-11-23T01:03:14", "upload_time_iso_8601": "2019-11-23T01:03:14.135565Z", "url": "https://files.pythonhosted.org/packages/f1/d7/624b2a4ddfdf2eca390c3d5bf005a37417e58e9eb21e91333b37ac1bb77c/dkimpy-milter-1.1.4.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "5f9e028426591f34195e6274dd6a1d23", "sha256": "13504395e38732ed674f8b7618cb4259985f27433740ebe94906725d13449422"}, "downloads": -1, "filename": "dkimpy-milter-1.2.0.tar.gz", "has_sig": true, "md5_digest": "5f9e028426591f34195e6274dd6a1d23", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 52405, "upload_time": "2020-01-03T23:17:52", "upload_time_iso_8601": "2020-01-03T23:17:52.517910Z", "url": "https://files.pythonhosted.org/packages/31/c5/8a299847a7154695cbdf3bf870fb2bb09cb5e42f190a5ee3c4acd307a19f/dkimpy-milter-1.2.0.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "cdfded070f86de4bac93d17860db8836", "sha256": "6e4f417446b4e966a8fa93444231823ae5ccac904c3ec0442af8926418ddf5ad"}, "downloads": -1, "filename": "dkimpy-milter-1.2.1.tar.gz", "has_sig": true, "md5_digest": "cdfded070f86de4bac93d17860db8836", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 52521, "upload_time": "2020-01-04T19:46:40", "upload_time_iso_8601": "2020-01-04T19:46:40.630524Z", "url": "https://files.pythonhosted.org/packages/ce/0e/2dac0bb3371a8dc7da7dc33c116fc0fa2618348638dc40d81e54f1f4fd20/dkimpy-milter-1.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "cdfded070f86de4bac93d17860db8836", "sha256": "6e4f417446b4e966a8fa93444231823ae5ccac904c3ec0442af8926418ddf5ad"}, "downloads": -1, "filename": "dkimpy-milter-1.2.1.tar.gz", "has_sig": true, "md5_digest": "cdfded070f86de4bac93d17860db8836", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 52521, "upload_time": "2020-01-04T19:46:40", "upload_time_iso_8601": "2020-01-04T19:46:40.630524Z", "url": "https://files.pythonhosted.org/packages/ce/0e/2dac0bb3371a8dc7da7dc33c116fc0fa2618348638dc40d81e54f1f4fd20/dkimpy-milter-1.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:22 2020"}