{"info": {"author": "Per Kraulis", "author_email": "per.kraulis@scilifelab.se", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6", "Topic :: Database :: Front-Ends"], "description": "# CouchDB2\n\nCouchDB v2.x Python 3 interface in a single module.\nAlso a command line tool; [see below](#command-line-tool).\n\nMost, but not all, features of this module work with CouchDB version < 2.0.\n\n## Installation\n\n```\n$ pip install couchdb2\n```\n\nThis module relies on `requests`: http://docs.python-requests.org/en/master/\n\n## News\n\n- 1.9.2\n  - Added retrieve of conflicts; thanks to https://github.com/seb4itik\n- 1.9.1\n  - Added `ca_file` parameter for HTTPS; thanks to https://github.com/seb4itik\n- 1.9.0\n  - Changed `put_attachment` and `delete_attachment` to update the input\n    `doc` by the new `_rev` value.\n- 1.8.5\n  - Added `ids()`: Return an iterator over all document identifiers.\n- 1.8.4\n  - Added `get_bulk(ids)`: Get several documents in one operation.\n\n## Example code\n\n```python\nimport couchdb2\n\nserver = couchdb2.Server()   # Arguments required according to local setup\ndb = server.create('test')\n\ndoc1 = {'_id': 'myid', 'name': 'mydoc', 'level': 4}\ndb.put(doc1)\ndoc = db['myid']\nassert doc == doc1\n\ndoc2 = {'name': 'another', 'level': 0}\ndb.put(doc2)\nprint(doc2)\n# {'_id': '66b5...', '_rev': '1-f3ac...', 'name': 'another', 'level': 0}\n\ndb.put_design('mydesign', \n              {\"views\":\n               {\"name\": {\"map\": \"function (doc) {emit(doc.name, null);}\"}\n               }\n              })\nresult = db.view('mydesign', 'name', key='another', include_docs=True)\nassert len(result) == 1\nprint(result[0].doc)         # Same printout as above, using OrderedDict\n\ndb.destroy()\n```\n\n## Server\n```python\nserver = Server(href='http://localhost:5984/', username=None, password=None,\n                use_session=True, ca_file=None)\n```\nConnection to the CouchDB server.\n\nIf `use_session` is true, then an authenticated session is used\ntransparently. Otherwise, username and password is sent with each request.\n\n`ca_file` can point to a file or a directory containing CAs if\nyou need to access databases in HTTPS.\n\n### version\n```python\nserver.version\n```\nProperty attribute providing the version of the CouchDB server software.\n\n### user_context\n```python\nserver.user_context\n```\nProperty attribute providing the user context of the connection.\n\n### \\_\\_str\\_\\_\n```python\nstr(server)\n```\nReturn a simple string representation of the server interface.\n\n### \\_\\_len\\_\\_\n```python\nlen(server)\n```\nReturn the number of user-defined databases.\n\n### \\_\\_iter\\_\\_\n```python\nfor db in server: ...\n```\nReturn an iterator over all user-defined databases on the server.\n\n### \\_\\_getitem\\_\\_\n```python\ndb = server[name]\n```\nGet the named database.\n\n### \\_\\_contains\\_\\_\n```python\nif name in server: ...\n```\nDoes the named database exist?\n\n### \\_\\_call\\_\\_\n```python\ndata = server()\n```\nReturn meta information about the server.\n\n### up\n```python\nif server.up(): ...\n```\nIs the server up and running, ready to respond to requests?\n\nCouchDB version >= 2.0.\n\n### get\n```python\ndb = server.get(name, check=True)\n```\nGet the named database. If `check` is true, then raise NotFoundError\nif the the database does not exist.\n\n### create\n```python\ndb = server.create(name)\n```\nCreate the named database.\n\n### get_config\n```python\ndata = server.get_config(nodename='_local')\n```\nGet the named node's configuration.\n\n### get_active_tasks\n```python\ndata = server.get_active_tasks()\n```\nReturn a list of running tasks.\n\n### get_cluster_setup\n```python\ndata = server.get_cluster_setup(config)\n```\nReturn the status of the node or cluster.\n\nCouchDB version >= 2.0.\n\n### set_cluster_setup\n```python\nserver.cluster_setup(doc)\n```\nConfigure a node as a single node, as part of a cluster, or finalize a cluster.\n\nCouchDB version >= 2.0.\n\n### get_membership\n```python\ndata = server.get_membership()\n```\nReturn data about the nodes that are part of the cluster.\n\nCouchDB version >= 2.0.\n\n### set_replicate\n```python\ndata = server.set_replicate(doc)\n```\nRequest, configure, or stop, a replication operation.\n\n### get_scheduler_jobs\n```python\ndata = server.get_scheduler_jobs(limit=None, skip=None)\n```\nGet a list of replication jobs.\n\nCouchDB version >= 2.0.\n\n### get_scheduler_docs\n```python\ndata = server.get_scheduler_docs(limit=None, skip=None,\n                                 replicator_db=None, docid=None)\n```\nGet information about replication document(s).\n\nCouchDB version >= 2.0.\n\n### get_node_stats\n```python\ndata = server.get_node_stats(nodename='_local')\n```\nReturn statistics for the running server.\n\nCouchDB version >= 2.0.\n\n### get_node_system\n```python\ndata = server.get_node_system(nodename='_local')\n```\nReturn various system-level statistics for the running server.\n\nCouchDB version >= 2.0.\n\n## Database\n```python\ndb = Database(server, name, check=True)\n```\nInterface to a named CouchDB database.\n\nIf `check` is true, then raise NotFoundError if the the database does not exist.\n\n### \\_\\_str\\_\\_\n```python\nstr(db)\n```\nReturn the name of the CouchDB database.\n\n### \\_\\_len\\_\\_\n```python\nlen(db)\n```\nReturn the number of documents in the database.\n\n### \\_\\_contains\\_\\_\n```python\nif id in db: ...\n```\nDoes a document with the given id exist in the database?\n\n### \\_\\_iter\\_\\_\n```python\nfor doc in db: ...\n```\nReturn an iterator over all documents in the database.\n\n### \\_\\_getitem\\_\\_\n```python\ndoc = db[id]\n```\nReturn the document with the given id.\n\n### exists\n```python\nif db.exists(): ...\n```\nDoes the database exist?\n\n### check\n```python\ndb.check()\n```\nRaises NotFoundError if the database does not exist.\n\n### create\n```python\ndb.create()\n```\nCreate the database.\n\n### destroy\n```python\ndb.destroy()\n```\nDelete the database and all its contents.\n\n### get_info\n```python\ndata = db.get_info()\n```\nReturn a dictionary with information about the database.\n\n### get_security\n```python\ndata = db.get_security()\n```\nReturn a dictionary with security information for the database.\n\n### set_security\n```python\ndb.set_security(doc)\n```\nSet the security information for the database.\n\n### compact\n```python\ndb.compact(finish=False, callback=None)\n```\nCompact the CouchDB database by rewriting the disk database file\nand removing old revisions of documents.\n\nIf `finish` is True, then return only when compaction is done.\nIn addition, if defined, the function `callback(seconds)` is called\nevery second until compaction is done.\n\n### compact_design\n```python\ndb.compact_design(designname)\n```\nCompact the view indexes associated with the named design document.\n\n### view_cleanup\n```python\ndb.view_cleanup()\n```\nRemove unnecessary view index files due to changed views in\ndesign documents of the database.\n\n### get\n```python\ndoc = db.get(id, rev=None, revs_info=False, default=None, conflicts=False)\n```\nReturn the document with the given id, or the `default` value if not found.\n\nIf conflicts is True, includes information about conflicts in document\n(in `_conflicts` attribute).\n\n### get_bulk\n```python\ndoc = db.get_bulk(ids)\n```\nGet several documents in one operation, given a list of document `ids`,\neach of which is a string (the document id), or a tuple of the\ndocument id and revision.\n\nReturns a list of documents. If no document is found for a specified\nid or (id, rev), `None` is returned in that slot of the list.\n\n### ids\n```python\nfor id in db.ids(): ...\n```\nReturn an iterator over all document identifiers.\n\n### put\n```python\ndb.put(doc)\n```\nInsert or update the document.\n\nIf the document is already in the database, the `_rev` item must\nbe present in the document; its value will be updated.\n\nIf the document does not contain an item `_id`, one will be added\nhaving a UUID4 value. The `_rev` item will also be added.\n\n### update\n```python\ndb.update(docs)\n```\nPerform a bulk update or insertion of the given documents using a\nsingle HTTP request.\n\nThe return value of this method is a list containing a tuple for every\nelement in the `docs` sequence. Each tuple is of the form\n`(success, docid, rev_or_exc)`, where `success` is a boolean\nindicating whether the update succeeded, `docid` is the ID of the\ndocument, and `rev_or_exc` is either the new document revision, or\nan exception instance (e.g. `ResourceConflict`) if the update failed.\n\nIf an object in the documents list is not a dictionary, this method\nlooks for an `items()` method that can be used to convert the object\nto a dictionary. Effectively this means you can also use this method\nwith `mapping.Document` objects.\n\n`docs` : a sequence of dictionaries or `Document` objects, or\nobjects providing a `items()` method that can be used to convert\nthem to a dictionary.\n\nReturns an iterable (list) over the resulting documents.\n\n### delete\n```python\ndb.delete(doc)\n```\nDelete the document.\n\n### purge\n```python\ndb.purge(docs)\n```\nPerform purging (complete removing) of the given documents.\n\nUses a single HTTP request to purge all given documents. Purged\ndocuments do not leave any meta-data in the storage and are not\nreplicated.\n\n### get_designs\n```python\ndata = db.get_designs()\n```\nReturn the design documents for the database.\n\nCouchDB version >= 2.2.\n\n### get_design\n```python\ndata = db.get_design(designname)\n```\nGet the named design document.\n\n### put_design\n```python\ndb.put_design(designname, doc, rebuild=True)\n```\nInsert or update the design document under the given name.\n\nIf the existing design document is identical, no action is taken and\nFalse is returned, else the document is updated and True is returned.\n\nIf `rebuild` is True, force view indexes to be rebuilt after update. \nThis may take some time.\n\nExample of doc:\n```\n  {\"views\":\n    {\"name\":\n      {\"map\": \"function (doc) {emit(doc.name, null);}\"},\n     \"name_sum\":\n      {\"map\": \"function (doc) {emit(doc.name, 1);}\",\n       \"reduce\": \"_sum\"},\n     \"name_count\":\n      {\"map\": \"function (doc) {emit(doc.name, null);}\",\n       \"reduce\": \"_count\"}\n  }}\n```\n\nMore info: http://docs.couchdb.org/en/latest/api/ddoc/common.html\n\n### view\n```python\nresult = db.view(designname, viewname, key=None, keys=None,\n                 startkey=None, endkey=None, skip=None, limit=None,\n                 sorted=True, descending=False,\n                 group=False, group_level=None, reduce=None,\n                 include_docs=False)\n```\nReturn a [ViewResult](#viewresult) object, containing\n[Row](#row) objects in the attribute `rows` (a list).\n\nIf `include_docs` is True, then `reduce` is forced to False.\n\n### get_indexes\n```python\ndata = db.get_indexes()\n```\nReturn a list of all indexes in the database.\n\nCouchDB version >= 2.0.\n\n### put_index\n```python\ndb.put_index(fields, ddoc=None, name=None, selector=None)\n```\nStore a Mango index specification. CouchDB v2.x only.\n\n- `fields` is a list of fields to index.\n- `ddoc` is the design document name. Generated if none given.\n- `name` is the name of the index. Generated if none given.\n- `selector` is a partial filter selector, which may be omitted.\n\nReturns a dictionary with items `id` (design document name; sic!),\n`name` (index name) and `result` (`created` or `exists`).\n\nCouchDB version >= 2.0.\n\n### find\n```python\ndata = db.find(selector, use_index=None, limit=None, skip=None, sort=None,\n               fields=None, bookmark=None, update=None, conflicts=None)\n```\nSelect documents according to the Mango index selector.\n\nReturns a dictionary with items `docs`, `warning`, `execution_stats`\nand `bookmark`.\n\nIf conflicts is True, includes information about conflicts in documents\n(in `_conflicts` attribute).\n\nCouchDB version >= 2.0.\n\n### explain\n```python\ndata = db.explain(selector, use_index=None, limit=None, skip=None, sort=None,\n                  fields=None, bookmark=None, update=None)\n```\nReturn info on which index is being used by the query.\n\nCouchDB version >= 2.0.\n\n### get_attachment\n```python\nfileobj = db.get_attachment(doc, filename)\n```\nReturn a file-like object containing the content of the attachment.\n\n### put_attachment\n```python\nrev = db.put_attachment(doc, content, filename=None, content_type=None)\n```\n`content` is a string or a file-like object.\nReturn the new revision of the document.\n\n**Note**: Since version 1.9.0, the `_rev` item in the input `doc`\n**is** updated.\n\nIf `filename` is not provided, then an attempt is made to get it from\nthe `content` object.\n\n### delete_attachment\n```python\nrev = db.delete_attachment(doc, filename)\n```\nDelete the attachment. Return the new revision of the document.\n\n**Note**: Since version 1.9.0, the `_rev` item in the input `doc`\n**is** updated.\n\n### dump\n```python\n(ndocs, nfiles) = db.dump(filepath, callback=None)\n```\nDump the entire database to a tar file.\n\nIf defined, the function `callback(ndocs, nfiles)` is called \nevery 100 documents.\n\nIf the filepath ends with `.gz`, then the tar file is gzip compressed.\nThe `_rev` item of each document is kept.\n\nA tuple `(ndocs, nfiles)` is returned.\n\n### undump\n```python\n(ndocs, nfiles) = db.undump(filepath, callback=None)\n```\nLoad the tar file, which must have been produced by `dump`.\n\nIf defined, the function `callback(ndocs, nfiles)` is called \nevery 100 documents.\n\nNOTE: The documents are just added to the database, ignoring any\n`_rev` items.\n\nA tuple `(ndocs, nfiles)` is returned.\n\n## CouchDB2Exception\n```python\nCouchDB2Exception()\n```\nBase CouchDB2 exception.\n## NotFoundError\n```python\nNotFoundError()\n```\nNo such entity exists.\n## BadRequestError\n```python\nBadRequestError()\n```\nInvalid request; bad name, body or headers.\n## CreationError\n```python\nCreationError()\n```\nCould not create the entity; it exists already.\n## RevisionError\n```python\nRevisionError()\n```\nWrong or missing `_rev` item in the document to save.\n## AuthorizationError\n```python\nAuthorizationError()\n```\nCurrent user not authorized to perform the operation.\n## ContentTypeError\n```python\nContentTypeError()\n```\nBad `Content-Type` value in the request.\n## ServerError\n```python\nServerError()\n```\nInternal server error.\n## ViewResult\n\nObject returned as result from `db.view()`.\n\n```python\nViewResult(rows, offset, total_rows)\n```\nAttributes:\n\n- `rows`: the list of `Row` objects.\n- `offset`: the offset used for the set of rows.\n- `total_rows`: the total number of rows selected.\n\n### \\_\\_len\\_\\_\n```python\nlen(viewresult)\n```\nReturn the number of rows in the view result.\n\n### \\_\\_iter\\_\\_\n```python\nfor row in viewresult: ...\n```\nReturn an iterator over all rows in the view result.\n\n### \\_\\_getitem\\_\\_\n```python\nrow = viewresult[i]\n```\nReturn the indexed view result row.\n\n### json\n```python\ndata = viewresult.json()\n```\nReturn view result data in a JSON-like representation.\n\n## Row\n\nNamed-tuple object returned in ViewResult list attribute `rows`.\n\n```python\nRow(id, key, value, doc)\n```\n\n- `id`: the identifier of the document, if any.\n- `key`: the key for the index row.\n- `value`: the value for the index row.\n- `doc`: the document, if any.\n\n### id\nAlias for field number 0\n### key\nAlias for field number 1\n### value\nAlias for field number 2\n### doc\nAlias for field number 3\n\n## Utility functions\n\n### read_settings\n```python\nread_settings(filepath, settings=None)\n```\nRead the settings lookup from a JSON format file.\nIf `settings` is given, then return an updated copy of it,\nelse copy the default settings, update, and return.\n\n## Command line tool\n\nThe module is also a command line tool for interacting with the CouchDB server.\nInstalling it using `pip` will set up the command `couchdb2`.\n\nSettings for the command line tool are updated from the following sources,\nin the order given and if existing:\n\n1) Default values are\n   ```\n   {\n     \"SERVER\": \"http://localhost:5984\",\n     \"DATABASE\": null,\n     \"USERNAME\": null,\n     \"PASSWORD\": null\n   }\n   ```\n2) Read from the JSON file `~/.couchdb2` (in your home directory).\n3) Read from the JSON file `settings.json` (in the current working directory).\n4) Read from the JSON file given by command line option `--settings FILEPATH`.\n\n### Options\n\nTo print available command options:\n\n```\n$ couchdb2 -h\nusage: couchdb2 [options]\n\nCouchDB v2.x command line tool, leveraging Python module CouchDB2.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --settings FILEPATH   settings file in JSON format\n  -S SERVER, --server SERVER\n                        CouchDB server URL, including port number\n  -d DATABASE, --database DATABASE\n                        database to operate on\n  -u USERNAME, --username USERNAME\n                        CouchDB user account name\n  -p PASSWORD, --password PASSWORD\n                        CouchDB user account password\n  -q, --password_question\n                        ask for the password by interactive input\n  --ca_file FILEORDIRPATH\n                        file or directory containing CAs\n  -o FILEPATH, --output FILEPATH\n                        write output to the given file (JSON format)\n  --indent INT          indentation level for JSON format output file\n  -y, --yes             do not ask for confirmation (delete, destroy)\n  -v, --verbose         print more information\n  -s, --silent          print no information\n\nserver operations:\n  -V, --version         output CouchDB server version\n  --list                output a list of the databases on the server\n\ndatabase operations:\n  --create              create the database\n  --destroy             delete the database and all its contents\n  --compact             compact the database; may take some time\n  --compact_design DDOC\n                        compact the view indexes for the named design doc\n  --view_cleanup        remove view index files no longer required\n  --info                output information about the database\n  --security            output security information for the database\n  --set_security FILEPATH\n                        set security information for the database from the\n                        JSON file\n  --list_designs        list design documents for the database\n  --design DDOC         output the named design document\n  --put_design DDOC FILEPATH\n                        store the named design document from the file\n  --delete_design DDOC  delete the named design document\n  --dump FILEPATH       create a dump file of the database\n  --undump FILEPATH     load a dump file into the database\n\ndocument operations:\n  -G DOCID, --get DOCID\n                        output the document with the given identifier\n  -P FILEPATH, --put FILEPATH\n                        store the document; arg is literal doc or filepath\n  --delete DOCID        delete the document with the given identifier\n\nattachments to document:\n  --attach DOCID FILEPATH\n                        attach the specified file to the given document\n  --detach DOCID FILENAME\n                        remove the attached file from the given document\n  --get_attach DOCID FILENAME\n                        get the attached file from the given document; write\n                        to same filepath or that given by '-o'\n\nquery a design view, returning rows:\n  --view SPEC           design view '{design}/{view}' to query\n  --key KEY             key value selecting view rows\n  --startkey KEY        start key value selecting range of view rows\n  --endkey KEY          end key value selecting range of view rows\n  --startkey_docid DOCID\n                        return rows starting with the specified document\n  --endkey_docid DOCID  stop returning rows when specified document reached\n  --group               group the results using the 'reduce' function\n  --group_level INT     specify the group level to use\n  --noreduce            do not use the 'reduce' function of the view\n  --limit INT           limit the number of returned rows\n  --skip INT            skip this number of rows before returning result\n  --descending          sort rows in descending order (swap start/end keys!)\n  --include_docs        include documents in result\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/pekrau/CouchDB2", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "CouchDB2", "package_url": "https://pypi.org/project/CouchDB2/", "platform": "", "project_url": "https://pypi.org/project/CouchDB2/", "project_urls": {"Homepage": "https://github.com/pekrau/CouchDB2"}, "release_url": "https://pypi.org/project/CouchDB2/1.9.2/", "requires_dist": ["requests (>=2)"], "requires_python": "", "summary": "CouchDB v2.x Python 3 interface in a single module. Also a command line tool.", "version": "1.9.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>CouchDB2</h1>\n<p>CouchDB v2.x Python 3 interface in a single module.\nAlso a command line tool; <a href=\"#command-line-tool\" rel=\"nofollow\">see below</a>.</p>\n<p>Most, but not all, features of this module work with CouchDB version &lt; 2.0.</p>\n<h2>Installation</h2>\n<pre><code>$ pip install couchdb2\n</code></pre>\n<p>This module relies on <code>requests</code>: <a href=\"http://docs.python-requests.org/en/master/\" rel=\"nofollow\">http://docs.python-requests.org/en/master/</a></p>\n<h2>News</h2>\n<ul>\n<li>1.9.2\n<ul>\n<li>Added retrieve of conflicts; thanks to <a href=\"https://github.com/seb4itik\" rel=\"nofollow\">https://github.com/seb4itik</a></li>\n</ul>\n</li>\n<li>1.9.1\n<ul>\n<li>Added <code>ca_file</code> parameter for HTTPS; thanks to <a href=\"https://github.com/seb4itik\" rel=\"nofollow\">https://github.com/seb4itik</a></li>\n</ul>\n</li>\n<li>1.9.0\n<ul>\n<li>Changed <code>put_attachment</code> and <code>delete_attachment</code> to update the input\n<code>doc</code> by the new <code>_rev</code> value.</li>\n</ul>\n</li>\n<li>1.8.5\n<ul>\n<li>Added <code>ids()</code>: Return an iterator over all document identifiers.</li>\n</ul>\n</li>\n<li>1.8.4\n<ul>\n<li>Added <code>get_bulk(ids)</code>: Get several documents in one operation.</li>\n</ul>\n</li>\n</ul>\n<h2>Example code</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">couchdb2</span>\n\n<span class=\"n\">server</span> <span class=\"o\">=</span> <span class=\"n\">couchdb2</span><span class=\"o\">.</span><span class=\"n\">Server</span><span class=\"p\">()</span>   <span class=\"c1\"># Arguments required according to local setup</span>\n<span class=\"n\">db</span> <span class=\"o\">=</span> <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"s1\">'test'</span><span class=\"p\">)</span>\n\n<span class=\"n\">doc1</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'_id'</span><span class=\"p\">:</span> <span class=\"s1\">'myid'</span><span class=\"p\">,</span> <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'mydoc'</span><span class=\"p\">,</span> <span class=\"s1\">'level'</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">}</span>\n<span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"n\">doc1</span><span class=\"p\">)</span>\n<span class=\"n\">doc</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"p\">[</span><span class=\"s1\">'myid'</span><span class=\"p\">]</span>\n<span class=\"k\">assert</span> <span class=\"n\">doc</span> <span class=\"o\">==</span> <span class=\"n\">doc1</span>\n\n<span class=\"n\">doc2</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'another'</span><span class=\"p\">,</span> <span class=\"s1\">'level'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">}</span>\n<span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"n\">doc2</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">doc2</span><span class=\"p\">)</span>\n<span class=\"c1\"># {'_id': '66b5...', '_rev': '1-f3ac...', 'name': 'another', 'level': 0}</span>\n\n<span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">put_design</span><span class=\"p\">(</span><span class=\"s1\">'mydesign'</span><span class=\"p\">,</span> \n              <span class=\"p\">{</span><span class=\"s2\">\"views\"</span><span class=\"p\">:</span>\n               <span class=\"p\">{</span><span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"map\"</span><span class=\"p\">:</span> <span class=\"s2\">\"function (doc) {emit(doc.name, null);}\"</span><span class=\"p\">}</span>\n               <span class=\"p\">}</span>\n              <span class=\"p\">})</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"p\">(</span><span class=\"s1\">'mydesign'</span><span class=\"p\">,</span> <span class=\"s1\">'name'</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s1\">'another'</span><span class=\"p\">,</span> <span class=\"n\">include_docs</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">doc</span><span class=\"p\">)</span>         <span class=\"c1\"># Same printout as above, using OrderedDict</span>\n\n<span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">destroy</span><span class=\"p\">()</span>\n</pre>\n<h2>Server</h2>\n<pre><span class=\"n\">server</span> <span class=\"o\">=</span> <span class=\"n\">Server</span><span class=\"p\">(</span><span class=\"n\">href</span><span class=\"o\">=</span><span class=\"s1\">'http://localhost:5984/'</span><span class=\"p\">,</span> <span class=\"n\">username</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                <span class=\"n\">use_session</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">ca_file</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</pre>\n<p>Connection to the CouchDB server.</p>\n<p>If <code>use_session</code> is true, then an authenticated session is used\ntransparently. Otherwise, username and password is sent with each request.</p>\n<p><code>ca_file</code> can point to a file or a directory containing CAs if\nyou need to access databases in HTTPS.</p>\n<h3>version</h3>\n<pre><span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">version</span>\n</pre>\n<p>Property attribute providing the version of the CouchDB server software.</p>\n<h3>user_context</h3>\n<pre><span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">user_context</span>\n</pre>\n<p>Property attribute providing the user context of the connection.</p>\n<h3>__str__</h3>\n<pre><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">server</span><span class=\"p\">)</span>\n</pre>\n<p>Return a simple string representation of the server interface.</p>\n<h3>__len__</h3>\n<pre><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">server</span><span class=\"p\">)</span>\n</pre>\n<p>Return the number of user-defined databases.</p>\n<h3>__iter__</h3>\n<pre><span class=\"k\">for</span> <span class=\"n\">db</span> <span class=\"ow\">in</span> <span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"o\">...</span>\n</pre>\n<p>Return an iterator over all user-defined databases on the server.</p>\n<h3>__getitem__</h3>\n<pre><span class=\"n\">db</span> <span class=\"o\">=</span> <span class=\"n\">server</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span>\n</pre>\n<p>Get the named database.</p>\n<h3>__contains__</h3>\n<pre><span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"o\">...</span>\n</pre>\n<p>Does the named database exist?</p>\n<h3>__call__</h3>\n<pre><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">server</span><span class=\"p\">()</span>\n</pre>\n<p>Return meta information about the server.</p>\n<h3>up</h3>\n<pre><span class=\"k\">if</span> <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">up</span><span class=\"p\">():</span> <span class=\"o\">...</span>\n</pre>\n<p>Is the server up and running, ready to respond to requests?</p>\n<p>CouchDB version &gt;= 2.0.</p>\n<h3>get</h3>\n<pre><span class=\"n\">db</span> <span class=\"o\">=</span> <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">check</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>Get the named database. If <code>check</code> is true, then raise NotFoundError\nif the the database does not exist.</p>\n<h3>create</h3>\n<pre><span class=\"n\">db</span> <span class=\"o\">=</span> <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n</pre>\n<p>Create the named database.</p>\n<h3>get_config</h3>\n<pre><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">get_config</span><span class=\"p\">(</span><span class=\"n\">nodename</span><span class=\"o\">=</span><span class=\"s1\">'_local'</span><span class=\"p\">)</span>\n</pre>\n<p>Get the named node's configuration.</p>\n<h3>get_active_tasks</h3>\n<pre><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">get_active_tasks</span><span class=\"p\">()</span>\n</pre>\n<p>Return a list of running tasks.</p>\n<h3>get_cluster_setup</h3>\n<pre><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">get_cluster_setup</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">)</span>\n</pre>\n<p>Return the status of the node or cluster.</p>\n<p>CouchDB version &gt;= 2.0.</p>\n<h3>set_cluster_setup</h3>\n<pre><span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">cluster_setup</span><span class=\"p\">(</span><span class=\"n\">doc</span><span class=\"p\">)</span>\n</pre>\n<p>Configure a node as a single node, as part of a cluster, or finalize a cluster.</p>\n<p>CouchDB version &gt;= 2.0.</p>\n<h3>get_membership</h3>\n<pre><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">get_membership</span><span class=\"p\">()</span>\n</pre>\n<p>Return data about the nodes that are part of the cluster.</p>\n<p>CouchDB version &gt;= 2.0.</p>\n<h3>set_replicate</h3>\n<pre><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">set_replicate</span><span class=\"p\">(</span><span class=\"n\">doc</span><span class=\"p\">)</span>\n</pre>\n<p>Request, configure, or stop, a replication operation.</p>\n<h3>get_scheduler_jobs</h3>\n<pre><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">get_scheduler_jobs</span><span class=\"p\">(</span><span class=\"n\">limit</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">skip</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</pre>\n<p>Get a list of replication jobs.</p>\n<p>CouchDB version &gt;= 2.0.</p>\n<h3>get_scheduler_docs</h3>\n<pre><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">get_scheduler_docs</span><span class=\"p\">(</span><span class=\"n\">limit</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">skip</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                                 <span class=\"n\">replicator_db</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">docid</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</pre>\n<p>Get information about replication document(s).</p>\n<p>CouchDB version &gt;= 2.0.</p>\n<h3>get_node_stats</h3>\n<pre><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">get_node_stats</span><span class=\"p\">(</span><span class=\"n\">nodename</span><span class=\"o\">=</span><span class=\"s1\">'_local'</span><span class=\"p\">)</span>\n</pre>\n<p>Return statistics for the running server.</p>\n<p>CouchDB version &gt;= 2.0.</p>\n<h3>get_node_system</h3>\n<pre><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">get_node_system</span><span class=\"p\">(</span><span class=\"n\">nodename</span><span class=\"o\">=</span><span class=\"s1\">'_local'</span><span class=\"p\">)</span>\n</pre>\n<p>Return various system-level statistics for the running server.</p>\n<p>CouchDB version &gt;= 2.0.</p>\n<h2>Database</h2>\n<pre><span class=\"n\">db</span> <span class=\"o\">=</span> <span class=\"n\">Database</span><span class=\"p\">(</span><span class=\"n\">server</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">check</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>Interface to a named CouchDB database.</p>\n<p>If <code>check</code> is true, then raise NotFoundError if the the database does not exist.</p>\n<h3>__str__</h3>\n<pre><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">)</span>\n</pre>\n<p>Return the name of the CouchDB database.</p>\n<h3>__len__</h3>\n<pre><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">)</span>\n</pre>\n<p>Return the number of documents in the database.</p>\n<h3>__contains__</h3>\n<pre><span class=\"k\">if</span> <span class=\"nb\">id</span> <span class=\"ow\">in</span> <span class=\"n\">db</span><span class=\"p\">:</span> <span class=\"o\">...</span>\n</pre>\n<p>Does a document with the given id exist in the database?</p>\n<h3>__iter__</h3>\n<pre><span class=\"k\">for</span> <span class=\"n\">doc</span> <span class=\"ow\">in</span> <span class=\"n\">db</span><span class=\"p\">:</span> <span class=\"o\">...</span>\n</pre>\n<p>Return an iterator over all documents in the database.</p>\n<h3>__getitem__</h3>\n<pre><span class=\"n\">doc</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"p\">[</span><span class=\"nb\">id</span><span class=\"p\">]</span>\n</pre>\n<p>Return the document with the given id.</p>\n<h3>exists</h3>\n<pre><span class=\"k\">if</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">():</span> <span class=\"o\">...</span>\n</pre>\n<p>Does the database exist?</p>\n<h3>check</h3>\n<pre><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">check</span><span class=\"p\">()</span>\n</pre>\n<p>Raises NotFoundError if the database does not exist.</p>\n<h3>create</h3>\n<pre><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">()</span>\n</pre>\n<p>Create the database.</p>\n<h3>destroy</h3>\n<pre><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">destroy</span><span class=\"p\">()</span>\n</pre>\n<p>Delete the database and all its contents.</p>\n<h3>get_info</h3>\n<pre><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">get_info</span><span class=\"p\">()</span>\n</pre>\n<p>Return a dictionary with information about the database.</p>\n<h3>get_security</h3>\n<pre><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">get_security</span><span class=\"p\">()</span>\n</pre>\n<p>Return a dictionary with security information for the database.</p>\n<h3>set_security</h3>\n<pre><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">set_security</span><span class=\"p\">(</span><span class=\"n\">doc</span><span class=\"p\">)</span>\n</pre>\n<p>Set the security information for the database.</p>\n<h3>compact</h3>\n<pre><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">compact</span><span class=\"p\">(</span><span class=\"n\">finish</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">callback</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</pre>\n<p>Compact the CouchDB database by rewriting the disk database file\nand removing old revisions of documents.</p>\n<p>If <code>finish</code> is True, then return only when compaction is done.\nIn addition, if defined, the function <code>callback(seconds)</code> is called\nevery second until compaction is done.</p>\n<h3>compact_design</h3>\n<pre><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">compact_design</span><span class=\"p\">(</span><span class=\"n\">designname</span><span class=\"p\">)</span>\n</pre>\n<p>Compact the view indexes associated with the named design document.</p>\n<h3>view_cleanup</h3>\n<pre><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">view_cleanup</span><span class=\"p\">()</span>\n</pre>\n<p>Remove unnecessary view index files due to changed views in\ndesign documents of the database.</p>\n<h3>get</h3>\n<pre><span class=\"n\">doc</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"p\">,</span> <span class=\"n\">rev</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">revs_info</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">conflicts</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n<p>Return the document with the given id, or the <code>default</code> value if not found.</p>\n<p>If conflicts is True, includes information about conflicts in document\n(in <code>_conflicts</code> attribute).</p>\n<h3>get_bulk</h3>\n<pre><span class=\"n\">doc</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">get_bulk</span><span class=\"p\">(</span><span class=\"n\">ids</span><span class=\"p\">)</span>\n</pre>\n<p>Get several documents in one operation, given a list of document <code>ids</code>,\neach of which is a string (the document id), or a tuple of the\ndocument id and revision.</p>\n<p>Returns a list of documents. If no document is found for a specified\nid or (id, rev), <code>None</code> is returned in that slot of the list.</p>\n<h3>ids</h3>\n<pre><span class=\"k\">for</span> <span class=\"nb\">id</span> <span class=\"ow\">in</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">ids</span><span class=\"p\">():</span> <span class=\"o\">...</span>\n</pre>\n<p>Return an iterator over all document identifiers.</p>\n<h3>put</h3>\n<pre><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"n\">doc</span><span class=\"p\">)</span>\n</pre>\n<p>Insert or update the document.</p>\n<p>If the document is already in the database, the <code>_rev</code> item must\nbe present in the document; its value will be updated.</p>\n<p>If the document does not contain an item <code>_id</code>, one will be added\nhaving a UUID4 value. The <code>_rev</code> item will also be added.</p>\n<h3>update</h3>\n<pre><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">docs</span><span class=\"p\">)</span>\n</pre>\n<p>Perform a bulk update or insertion of the given documents using a\nsingle HTTP request.</p>\n<p>The return value of this method is a list containing a tuple for every\nelement in the <code>docs</code> sequence. Each tuple is of the form\n<code>(success, docid, rev_or_exc)</code>, where <code>success</code> is a boolean\nindicating whether the update succeeded, <code>docid</code> is the ID of the\ndocument, and <code>rev_or_exc</code> is either the new document revision, or\nan exception instance (e.g. <code>ResourceConflict</code>) if the update failed.</p>\n<p>If an object in the documents list is not a dictionary, this method\nlooks for an <code>items()</code> method that can be used to convert the object\nto a dictionary. Effectively this means you can also use this method\nwith <code>mapping.Document</code> objects.</p>\n<p><code>docs</code> : a sequence of dictionaries or <code>Document</code> objects, or\nobjects providing a <code>items()</code> method that can be used to convert\nthem to a dictionary.</p>\n<p>Returns an iterable (list) over the resulting documents.</p>\n<h3>delete</h3>\n<pre><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">doc</span><span class=\"p\">)</span>\n</pre>\n<p>Delete the document.</p>\n<h3>purge</h3>\n<pre><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">purge</span><span class=\"p\">(</span><span class=\"n\">docs</span><span class=\"p\">)</span>\n</pre>\n<p>Perform purging (complete removing) of the given documents.</p>\n<p>Uses a single HTTP request to purge all given documents. Purged\ndocuments do not leave any meta-data in the storage and are not\nreplicated.</p>\n<h3>get_designs</h3>\n<pre><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">get_designs</span><span class=\"p\">()</span>\n</pre>\n<p>Return the design documents for the database.</p>\n<p>CouchDB version &gt;= 2.2.</p>\n<h3>get_design</h3>\n<pre><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">get_design</span><span class=\"p\">(</span><span class=\"n\">designname</span><span class=\"p\">)</span>\n</pre>\n<p>Get the named design document.</p>\n<h3>put_design</h3>\n<pre><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">put_design</span><span class=\"p\">(</span><span class=\"n\">designname</span><span class=\"p\">,</span> <span class=\"n\">doc</span><span class=\"p\">,</span> <span class=\"n\">rebuild</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>Insert or update the design document under the given name.</p>\n<p>If the existing design document is identical, no action is taken and\nFalse is returned, else the document is updated and True is returned.</p>\n<p>If <code>rebuild</code> is True, force view indexes to be rebuilt after update.\nThis may take some time.</p>\n<p>Example of doc:</p>\n<pre><code>  {\"views\":\n    {\"name\":\n      {\"map\": \"function (doc) {emit(doc.name, null);}\"},\n     \"name_sum\":\n      {\"map\": \"function (doc) {emit(doc.name, 1);}\",\n       \"reduce\": \"_sum\"},\n     \"name_count\":\n      {\"map\": \"function (doc) {emit(doc.name, null);}\",\n       \"reduce\": \"_count\"}\n  }}\n</code></pre>\n<p>More info: <a href=\"http://docs.couchdb.org/en/latest/api/ddoc/common.html\" rel=\"nofollow\">http://docs.couchdb.org/en/latest/api/ddoc/common.html</a></p>\n<h3>view</h3>\n<pre><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"p\">(</span><span class=\"n\">designname</span><span class=\"p\">,</span> <span class=\"n\">viewname</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">keys</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                 <span class=\"n\">startkey</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">endkey</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">skip</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">limit</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                 <span class=\"nb\">sorted</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">descending</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                 <span class=\"n\">group</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">group_level</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">reduce</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                 <span class=\"n\">include_docs</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n<p>Return a <a href=\"#viewresult\" rel=\"nofollow\">ViewResult</a> object, containing\n<a href=\"#row\" rel=\"nofollow\">Row</a> objects in the attribute <code>rows</code> (a list).</p>\n<p>If <code>include_docs</code> is True, then <code>reduce</code> is forced to False.</p>\n<h3>get_indexes</h3>\n<pre><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">get_indexes</span><span class=\"p\">()</span>\n</pre>\n<p>Return a list of all indexes in the database.</p>\n<p>CouchDB version &gt;= 2.0.</p>\n<h3>put_index</h3>\n<pre><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">put_index</span><span class=\"p\">(</span><span class=\"n\">fields</span><span class=\"p\">,</span> <span class=\"n\">ddoc</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">selector</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</pre>\n<p>Store a Mango index specification. CouchDB v2.x only.</p>\n<ul>\n<li><code>fields</code> is a list of fields to index.</li>\n<li><code>ddoc</code> is the design document name. Generated if none given.</li>\n<li><code>name</code> is the name of the index. Generated if none given.</li>\n<li><code>selector</code> is a partial filter selector, which may be omitted.</li>\n</ul>\n<p>Returns a dictionary with items <code>id</code> (design document name; sic!),\n<code>name</code> (index name) and <code>result</code> (<code>created</code> or <code>exists</code>).</p>\n<p>CouchDB version &gt;= 2.0.</p>\n<h3>find</h3>\n<pre><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"n\">selector</span><span class=\"p\">,</span> <span class=\"n\">use_index</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">limit</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">skip</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">sort</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n               <span class=\"n\">fields</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">bookmark</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">update</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">conflicts</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</pre>\n<p>Select documents according to the Mango index selector.</p>\n<p>Returns a dictionary with items <code>docs</code>, <code>warning</code>, <code>execution_stats</code>\nand <code>bookmark</code>.</p>\n<p>If conflicts is True, includes information about conflicts in documents\n(in <code>_conflicts</code> attribute).</p>\n<p>CouchDB version &gt;= 2.0.</p>\n<h3>explain</h3>\n<pre><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">explain</span><span class=\"p\">(</span><span class=\"n\">selector</span><span class=\"p\">,</span> <span class=\"n\">use_index</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">limit</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">skip</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">sort</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                  <span class=\"n\">fields</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">bookmark</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">update</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</pre>\n<p>Return info on which index is being used by the query.</p>\n<p>CouchDB version &gt;= 2.0.</p>\n<h3>get_attachment</h3>\n<pre><span class=\"n\">fileobj</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">get_attachment</span><span class=\"p\">(</span><span class=\"n\">doc</span><span class=\"p\">,</span> <span class=\"n\">filename</span><span class=\"p\">)</span>\n</pre>\n<p>Return a file-like object containing the content of the attachment.</p>\n<h3>put_attachment</h3>\n<pre><span class=\"n\">rev</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">put_attachment</span><span class=\"p\">(</span><span class=\"n\">doc</span><span class=\"p\">,</span> <span class=\"n\">content</span><span class=\"p\">,</span> <span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">content_type</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</pre>\n<p><code>content</code> is a string or a file-like object.\nReturn the new revision of the document.</p>\n<p><strong>Note</strong>: Since version 1.9.0, the <code>_rev</code> item in the input <code>doc</code>\n<strong>is</strong> updated.</p>\n<p>If <code>filename</code> is not provided, then an attempt is made to get it from\nthe <code>content</code> object.</p>\n<h3>delete_attachment</h3>\n<pre><span class=\"n\">rev</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">delete_attachment</span><span class=\"p\">(</span><span class=\"n\">doc</span><span class=\"p\">,</span> <span class=\"n\">filename</span><span class=\"p\">)</span>\n</pre>\n<p>Delete the attachment. Return the new revision of the document.</p>\n<p><strong>Note</strong>: Since version 1.9.0, the <code>_rev</code> item in the input <code>doc</code>\n<strong>is</strong> updated.</p>\n<h3>dump</h3>\n<pre><span class=\"p\">(</span><span class=\"n\">ndocs</span><span class=\"p\">,</span> <span class=\"n\">nfiles</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">(</span><span class=\"n\">filepath</span><span class=\"p\">,</span> <span class=\"n\">callback</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</pre>\n<p>Dump the entire database to a tar file.</p>\n<p>If defined, the function <code>callback(ndocs, nfiles)</code> is called\nevery 100 documents.</p>\n<p>If the filepath ends with <code>.gz</code>, then the tar file is gzip compressed.\nThe <code>_rev</code> item of each document is kept.</p>\n<p>A tuple <code>(ndocs, nfiles)</code> is returned.</p>\n<h3>undump</h3>\n<pre><span class=\"p\">(</span><span class=\"n\">ndocs</span><span class=\"p\">,</span> <span class=\"n\">nfiles</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">undump</span><span class=\"p\">(</span><span class=\"n\">filepath</span><span class=\"p\">,</span> <span class=\"n\">callback</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</pre>\n<p>Load the tar file, which must have been produced by <code>dump</code>.</p>\n<p>If defined, the function <code>callback(ndocs, nfiles)</code> is called\nevery 100 documents.</p>\n<p>NOTE: The documents are just added to the database, ignoring any\n<code>_rev</code> items.</p>\n<p>A tuple <code>(ndocs, nfiles)</code> is returned.</p>\n<h2>CouchDB2Exception</h2>\n<pre><span class=\"n\">CouchDB2Exception</span><span class=\"p\">()</span>\n</pre>\n<p>Base CouchDB2 exception.</p>\n<h2>NotFoundError</h2>\n<pre><span class=\"n\">NotFoundError</span><span class=\"p\">()</span>\n</pre>\n<p>No such entity exists.</p>\n<h2>BadRequestError</h2>\n<pre><span class=\"n\">BadRequestError</span><span class=\"p\">()</span>\n</pre>\n<p>Invalid request; bad name, body or headers.</p>\n<h2>CreationError</h2>\n<pre><span class=\"n\">CreationError</span><span class=\"p\">()</span>\n</pre>\n<p>Could not create the entity; it exists already.</p>\n<h2>RevisionError</h2>\n<pre><span class=\"n\">RevisionError</span><span class=\"p\">()</span>\n</pre>\n<p>Wrong or missing <code>_rev</code> item in the document to save.</p>\n<h2>AuthorizationError</h2>\n<pre><span class=\"n\">AuthorizationError</span><span class=\"p\">()</span>\n</pre>\n<p>Current user not authorized to perform the operation.</p>\n<h2>ContentTypeError</h2>\n<pre><span class=\"n\">ContentTypeError</span><span class=\"p\">()</span>\n</pre>\n<p>Bad <code>Content-Type</code> value in the request.</p>\n<h2>ServerError</h2>\n<pre><span class=\"n\">ServerError</span><span class=\"p\">()</span>\n</pre>\n<p>Internal server error.</p>\n<h2>ViewResult</h2>\n<p>Object returned as result from <code>db.view()</code>.</p>\n<pre><span class=\"n\">ViewResult</span><span class=\"p\">(</span><span class=\"n\">rows</span><span class=\"p\">,</span> <span class=\"n\">offset</span><span class=\"p\">,</span> <span class=\"n\">total_rows</span><span class=\"p\">)</span>\n</pre>\n<p>Attributes:</p>\n<ul>\n<li><code>rows</code>: the list of <code>Row</code> objects.</li>\n<li><code>offset</code>: the offset used for the set of rows.</li>\n<li><code>total_rows</code>: the total number of rows selected.</li>\n</ul>\n<h3>__len__</h3>\n<pre><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">viewresult</span><span class=\"p\">)</span>\n</pre>\n<p>Return the number of rows in the view result.</p>\n<h3>__iter__</h3>\n<pre><span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">viewresult</span><span class=\"p\">:</span> <span class=\"o\">...</span>\n</pre>\n<p>Return an iterator over all rows in the view result.</p>\n<h3>__getitem__</h3>\n<pre><span class=\"n\">row</span> <span class=\"o\">=</span> <span class=\"n\">viewresult</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n</pre>\n<p>Return the indexed view result row.</p>\n<h3>json</h3>\n<pre><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">viewresult</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">()</span>\n</pre>\n<p>Return view result data in a JSON-like representation.</p>\n<h2>Row</h2>\n<p>Named-tuple object returned in ViewResult list attribute <code>rows</code>.</p>\n<pre><span class=\"n\">Row</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">doc</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li><code>id</code>: the identifier of the document, if any.</li>\n<li><code>key</code>: the key for the index row.</li>\n<li><code>value</code>: the value for the index row.</li>\n<li><code>doc</code>: the document, if any.</li>\n</ul>\n<h3>id</h3>\n<p>Alias for field number 0</p>\n<h3>key</h3>\n<p>Alias for field number 1</p>\n<h3>value</h3>\n<p>Alias for field number 2</p>\n<h3>doc</h3>\n<p>Alias for field number 3</p>\n<h2>Utility functions</h2>\n<h3>read_settings</h3>\n<pre><span class=\"n\">read_settings</span><span class=\"p\">(</span><span class=\"n\">filepath</span><span class=\"p\">,</span> <span class=\"n\">settings</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</pre>\n<p>Read the settings lookup from a JSON format file.\nIf <code>settings</code> is given, then return an updated copy of it,\nelse copy the default settings, update, and return.</p>\n<h2>Command line tool</h2>\n<p>The module is also a command line tool for interacting with the CouchDB server.\nInstalling it using <code>pip</code> will set up the command <code>couchdb2</code>.</p>\n<p>Settings for the command line tool are updated from the following sources,\nin the order given and if existing:</p>\n<ol>\n<li>Default values are\n<pre><code>{\n  \"SERVER\": \"http://localhost:5984\",\n  \"DATABASE\": null,\n  \"USERNAME\": null,\n  \"PASSWORD\": null\n}\n</code></pre>\n</li>\n<li>Read from the JSON file <code>~/.couchdb2</code> (in your home directory).</li>\n<li>Read from the JSON file <code>settings.json</code> (in the current working directory).</li>\n<li>Read from the JSON file given by command line option <code>--settings FILEPATH</code>.</li>\n</ol>\n<h3>Options</h3>\n<p>To print available command options:</p>\n<pre><code>$ couchdb2 -h\nusage: couchdb2 [options]\n\nCouchDB v2.x command line tool, leveraging Python module CouchDB2.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --settings FILEPATH   settings file in JSON format\n  -S SERVER, --server SERVER\n                        CouchDB server URL, including port number\n  -d DATABASE, --database DATABASE\n                        database to operate on\n  -u USERNAME, --username USERNAME\n                        CouchDB user account name\n  -p PASSWORD, --password PASSWORD\n                        CouchDB user account password\n  -q, --password_question\n                        ask for the password by interactive input\n  --ca_file FILEORDIRPATH\n                        file or directory containing CAs\n  -o FILEPATH, --output FILEPATH\n                        write output to the given file (JSON format)\n  --indent INT          indentation level for JSON format output file\n  -y, --yes             do not ask for confirmation (delete, destroy)\n  -v, --verbose         print more information\n  -s, --silent          print no information\n\nserver operations:\n  -V, --version         output CouchDB server version\n  --list                output a list of the databases on the server\n\ndatabase operations:\n  --create              create the database\n  --destroy             delete the database and all its contents\n  --compact             compact the database; may take some time\n  --compact_design DDOC\n                        compact the view indexes for the named design doc\n  --view_cleanup        remove view index files no longer required\n  --info                output information about the database\n  --security            output security information for the database\n  --set_security FILEPATH\n                        set security information for the database from the\n                        JSON file\n  --list_designs        list design documents for the database\n  --design DDOC         output the named design document\n  --put_design DDOC FILEPATH\n                        store the named design document from the file\n  --delete_design DDOC  delete the named design document\n  --dump FILEPATH       create a dump file of the database\n  --undump FILEPATH     load a dump file into the database\n\ndocument operations:\n  -G DOCID, --get DOCID\n                        output the document with the given identifier\n  -P FILEPATH, --put FILEPATH\n                        store the document; arg is literal doc or filepath\n  --delete DOCID        delete the document with the given identifier\n\nattachments to document:\n  --attach DOCID FILEPATH\n                        attach the specified file to the given document\n  --detach DOCID FILENAME\n                        remove the attached file from the given document\n  --get_attach DOCID FILENAME\n                        get the attached file from the given document; write\n                        to same filepath or that given by '-o'\n\nquery a design view, returning rows:\n  --view SPEC           design view '{design}/{view}' to query\n  --key KEY             key value selecting view rows\n  --startkey KEY        start key value selecting range of view rows\n  --endkey KEY          end key value selecting range of view rows\n  --startkey_docid DOCID\n                        return rows starting with the specified document\n  --endkey_docid DOCID  stop returning rows when specified document reached\n  --group               group the results using the 'reduce' function\n  --group_level INT     specify the group level to use\n  --noreduce            do not use the 'reduce' function of the view\n  --limit INT           limit the number of returned rows\n  --skip INT            skip this number of rows before returning result\n  --descending          sort rows in descending order (swap start/end keys!)\n  --include_docs        include documents in result\n</code></pre>\n\n          </div>"}, "last_serial": 6926401, "releases": {"1.6.10": [{"comment_text": "", "digests": {"md5": "3732dcad98c385261ff2cd55c7f99857", "sha256": "7f7ec022c5f8a1c1857c293ce6d75936c3d36c5decaa7698096239c42dd60b43"}, "downloads": -1, "filename": "CouchDB2-1.6.10-py3-none-any.whl", "has_sig": false, "md5_digest": "3732dcad98c385261ff2cd55c7f99857", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16721, "upload_time": "2019-01-14T13:35:01", "upload_time_iso_8601": "2019-01-14T13:35:01.292343Z", "url": "https://files.pythonhosted.org/packages/3c/5e/cba502537076602c333bf123f9adb43b9d81c147521a712ccf6af0ccb8b4/CouchDB2-1.6.10-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "689938376185a87d6368c493cce6d7b8", "sha256": "169a77ef30d1bf6b8fd7dab1ed07c982b82625ac03793d57a2148acc9b449db9"}, "downloads": -1, "filename": "CouchDB2-1.6.10.tar.gz", "has_sig": false, "md5_digest": "689938376185a87d6368c493cce6d7b8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17058, "upload_time": "2019-01-14T13:35:04", "upload_time_iso_8601": "2019-01-14T13:35:04.648681Z", "url": "https://files.pythonhosted.org/packages/c4/ac/f64d4d18033bf5c5135ef7bdb9042106fc7101f9a515fedde846b187514c/CouchDB2-1.6.10.tar.gz", "yanked": false}], "1.7.2": [{"comment_text": "", "digests": {"md5": "7caa10c7fe52bb02d343d5ee26222211", "sha256": "eba1caa0797ef8c9600332cc3f1306b1c2371c754c7f6c0047f3bcb14e64a212"}, "downloads": -1, "filename": "CouchDB2-1.7.2-py3-none-any.whl", "has_sig": false, "md5_digest": "7caa10c7fe52bb02d343d5ee26222211", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 17980, "upload_time": "2019-01-15T11:44:23", "upload_time_iso_8601": "2019-01-15T11:44:23.598250Z", "url": "https://files.pythonhosted.org/packages/07/93/60968a6d2eaa80e1a23e9c52d19234c9cf9c9ea8cc5c5611e89bd421e7c2/CouchDB2-1.7.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "96b45deeb4a074098527143662a9dcdb", "sha256": "0a29d7daeb5df92910914ea01641b63e5685bede7b119948e296a6c3562da586"}, "downloads": -1, "filename": "CouchDB2-1.7.2.tar.gz", "has_sig": false, "md5_digest": "96b45deeb4a074098527143662a9dcdb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17700, "upload_time": "2019-01-15T11:44:25", "upload_time_iso_8601": "2019-01-15T11:44:25.141225Z", "url": "https://files.pythonhosted.org/packages/6f/36/e4687d38b35a15ca69de2bf3d60391bb56a2efca8d04ee55f35b4282a142/CouchDB2-1.7.2.tar.gz", "yanked": false}], "1.7.4": [{"comment_text": "", "digests": {"md5": "1a02d07e128bee9a6da1a0a7d8261e90", "sha256": "41a0ce98f3ba90b92355ec3e6c138d54905ca973340a8be358b93441374e8e14"}, "downloads": -1, "filename": "CouchDB2-1.7.4-py3-none-any.whl", "has_sig": false, "md5_digest": "1a02d07e128bee9a6da1a0a7d8261e90", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 17196, "upload_time": "2019-01-22T11:46:48", "upload_time_iso_8601": "2019-01-22T11:46:48.840776Z", "url": "https://files.pythonhosted.org/packages/fd/ed/7417b916b0cd7863618dc9e73b80ea51c627c05604fcd372ba6185791c57/CouchDB2-1.7.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9602765c067af0b6903c0453682363df", "sha256": "599b2233efbaf83fcfa6fc11c91d70265d88a04fd8feff38a622c32860e583e4"}, "downloads": -1, "filename": "CouchDB2-1.7.4.tar.gz", "has_sig": false, "md5_digest": "9602765c067af0b6903c0453682363df", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17749, "upload_time": "2019-01-22T11:46:50", "upload_time_iso_8601": "2019-01-22T11:46:50.487167Z", "url": "https://files.pythonhosted.org/packages/f7/d6/e1baac91732d1b5c691b44885cf2fcc38d2ce845afbc5d1d6ec8b86926db/CouchDB2-1.7.4.tar.gz", "yanked": false}], "1.8.0": [{"comment_text": "", "digests": {"md5": "1024375ecdcd6197d1b3b357f4d66076", "sha256": "f66ddc960a1e626e2498daa4fde34683ddebf0634d39a4a02e491083ed2fbca5"}, "downloads": -1, "filename": "CouchDB2-1.8.0-py3-none-any.whl", "has_sig": false, "md5_digest": "1024375ecdcd6197d1b3b357f4d66076", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 19321, "upload_time": "2019-10-23T10:49:46", "upload_time_iso_8601": "2019-10-23T10:49:46.032545Z", "url": "https://files.pythonhosted.org/packages/d2/1b/37c034b8d463f65389f151907319f428355f6b3ca689aa34babd82fc38b1/CouchDB2-1.8.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "41cf03ce3ba39d2e701a526d4d76793a", "sha256": "93d0669b123b329c0e9a753a68a5abae056f6edf9d0939b98f5a70903f2531c6"}, "downloads": -1, "filename": "CouchDB2-1.8.0.tar.gz", "has_sig": false, "md5_digest": "41cf03ce3ba39d2e701a526d4d76793a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19429, "upload_time": "2019-10-23T10:49:48", "upload_time_iso_8601": "2019-10-23T10:49:48.087891Z", "url": "https://files.pythonhosted.org/packages/2e/2b/1bdc6c19f556fef749cafee7dabc3ef06add97ba6e82b58721337f3ce0c2/CouchDB2-1.8.0.tar.gz", "yanked": false}], "1.8.1": [{"comment_text": "", "digests": {"md5": "fb383d43c6ec3f5c7f28f6125b8a2295", "sha256": "a0c94827a27307a442a5890f44383d25a2eb975b76269ab85b9cdc0a027e47fb"}, "downloads": -1, "filename": "CouchDB2-1.8.1-py3-none-any.whl", "has_sig": false, "md5_digest": "fb383d43c6ec3f5c7f28f6125b8a2295", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 19257, "upload_time": "2019-10-23T11:05:03", "upload_time_iso_8601": "2019-10-23T11:05:03.900624Z", "url": "https://files.pythonhosted.org/packages/64/bf/410cbfab5c327aa395c504ce186fc8f49b08f69867f2864ed2e3e9b91feb/CouchDB2-1.8.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "777a4d6af7cc09910231b2f2881aeac6", "sha256": "8e827479d97be6956ce4c4986de3706f2196ff96ba42231925080586d990d2d2"}, "downloads": -1, "filename": "CouchDB2-1.8.1.tar.gz", "has_sig": false, "md5_digest": "777a4d6af7cc09910231b2f2881aeac6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18997, "upload_time": "2019-10-23T11:05:07", "upload_time_iso_8601": "2019-10-23T11:05:07.481631Z", "url": "https://files.pythonhosted.org/packages/f7/26/1859d525c4ac22d55cb50a97641c09202cef31167a624e058baa2b5a1a3c/CouchDB2-1.8.1.tar.gz", "yanked": false}], "1.8.2": [{"comment_text": "", "digests": {"md5": "2d14a92249918f1d4fa74178c87785f9", "sha256": "80cd24a6afb27b60362aa6bc9f81005a1a914839583c75cdbc0c88d5e22cd7d8"}, "downloads": -1, "filename": "CouchDB2-1.8.2-py3-none-any.whl", "has_sig": false, "md5_digest": "2d14a92249918f1d4fa74178c87785f9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 19223, "upload_time": "2019-11-19T16:15:21", "upload_time_iso_8601": "2019-11-19T16:15:21.741702Z", "url": "https://files.pythonhosted.org/packages/5b/a7/556325ecb759e165d6575abd30ba398f775a0274488a35dd4a68b9531951/CouchDB2-1.8.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2b171c3e96593c5405f6bb403c8ee4b2", "sha256": "12f86ced83441f5eafb80be46cff3b4386e9f4985552d9eb6a0c91e7fd0d952b"}, "downloads": -1, "filename": "CouchDB2-1.8.2.tar.gz", "has_sig": false, "md5_digest": "2b171c3e96593c5405f6bb403c8ee4b2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22205, "upload_time": "2019-11-19T16:15:24", "upload_time_iso_8601": "2019-11-19T16:15:24.077463Z", "url": "https://files.pythonhosted.org/packages/01/05/57f7be332e54501c39195d1be0b452e6ff22af2a858649f7329a3c34d5f8/CouchDB2-1.8.2.tar.gz", "yanked": false}], "1.8.3": [{"comment_text": "", "digests": {"md5": "0de52ae7a2dbce94f453774201808412", "sha256": "2e97aa0c894843742749487e0570c6cb4f47453e315e2f763a58e2a541f39ce8"}, "downloads": -1, "filename": "CouchDB2-1.8.3-py3-none-any.whl", "has_sig": false, "md5_digest": "0de52ae7a2dbce94f453774201808412", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 19262, "upload_time": "2020-02-23T15:50:02", "upload_time_iso_8601": "2020-02-23T15:50:02.182103Z", "url": "https://files.pythonhosted.org/packages/0d/62/db7a24e820e85bbdee2200da17a6c086c338685e85fb02528a775b51e82f/CouchDB2-1.8.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "041e6d1a994888e078d2f176e2c0a72f", "sha256": "fe24bf82e9c002dcd84a3b5913e03c7f73e44a790a08d211acd749690f9cd45b"}, "downloads": -1, "filename": "CouchDB2-1.8.3.tar.gz", "has_sig": false, "md5_digest": "041e6d1a994888e078d2f176e2c0a72f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22248, "upload_time": "2020-02-23T15:50:04", "upload_time_iso_8601": "2020-02-23T15:50:04.311947Z", "url": "https://files.pythonhosted.org/packages/c0/ab/0ccdbf3bea39412c4293fedb7e30a77b3d527fa3c4f7a232e84afa0cbc7b/CouchDB2-1.8.3.tar.gz", "yanked": false}], "1.8.4": [{"comment_text": "", "digests": {"md5": "1f8285f80d51a879c6f3ee52d65fb05f", "sha256": "38a6e70d36b2c90a83703e16cca41e584dc27bf1943acf159a8bb980081b3e6d"}, "downloads": -1, "filename": "CouchDB2-1.8.4-py3-none-any.whl", "has_sig": false, "md5_digest": "1f8285f80d51a879c6f3ee52d65fb05f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 19595, "upload_time": "2020-02-25T16:45:34", "upload_time_iso_8601": "2020-02-25T16:45:34.896719Z", "url": "https://files.pythonhosted.org/packages/16/a8/0892b5f4e40dc6232e9ebedcaf886326d402da407e793c6315167f6a33db/CouchDB2-1.8.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b25d77f6142aeeb1deadf3e181019434", "sha256": "eb7e548e31648a6325788cab3033d9eaeb931ee0628cf9da42b1a5cccf554817"}, "downloads": -1, "filename": "CouchDB2-1.8.4.tar.gz", "has_sig": false, "md5_digest": "b25d77f6142aeeb1deadf3e181019434", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22681, "upload_time": "2020-02-25T16:45:38", "upload_time_iso_8601": "2020-02-25T16:45:38.833658Z", "url": "https://files.pythonhosted.org/packages/51/42/5659e454a44e2c0a635f1906681136baa88835b80bcc627924e6a2ee8299/CouchDB2-1.8.4.tar.gz", "yanked": false}], "1.8.5": [{"comment_text": "", "digests": {"md5": "db652969bc93728dcf55ca299175a040", "sha256": "c1f686e03c0b95de42d0da4d795eaf0e7b9e20f7173641117dd14e8c4995d426"}, "downloads": -1, "filename": "CouchDB2-1.8.5-py3-none-any.whl", "has_sig": false, "md5_digest": "db652969bc93728dcf55ca299175a040", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 19690, "upload_time": "2020-02-26T14:16:22", "upload_time_iso_8601": "2020-02-26T14:16:22.355233Z", "url": "https://files.pythonhosted.org/packages/d3/30/be5cbf80fe32130323d1261968b92ea8da3ea70a1dc99572af4c28205d5d/CouchDB2-1.8.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "872da0172919f7453d7c7cf77ba71656", "sha256": "aaaee78f2e51c44f906a99560bc12538cba89a174f98e5db24a00e7ef87906e2"}, "downloads": -1, "filename": "CouchDB2-1.8.5.tar.gz", "has_sig": false, "md5_digest": "872da0172919f7453d7c7cf77ba71656", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22825, "upload_time": "2020-02-26T14:16:24", "upload_time_iso_8601": "2020-02-26T14:16:24.395258Z", "url": "https://files.pythonhosted.org/packages/e4/11/598e038dc2092de3a1d019357393ca1c15626c1fd1a1d9887a07d14076ca/CouchDB2-1.8.5.tar.gz", "yanked": false}], "1.9.0": [{"comment_text": "", "digests": {"md5": "4bad454ae067e42861be392424bb19de", "sha256": "a3fb3b2936d786030bf487323297e6e5fd399ec7452951af4efce4f4a52ca500"}, "downloads": -1, "filename": "CouchDB2-1.9.0-py3-none-any.whl", "has_sig": false, "md5_digest": "4bad454ae067e42861be392424bb19de", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 19854, "upload_time": "2020-03-02T11:18:55", "upload_time_iso_8601": "2020-03-02T11:18:55.902222Z", "url": "https://files.pythonhosted.org/packages/0f/a9/47e11f15dbc6e0bd1a3bb462e458c0a80fc51fcf2e6d82057a8fa8075616/CouchDB2-1.9.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e6cb2633e073f3efb0587b888614b547", "sha256": "dac0e554f832b9fbb23bf050daef1f5a9a4b6af42d42d3fe0a8551a19230e5c1"}, "downloads": -1, "filename": "CouchDB2-1.9.0.tar.gz", "has_sig": false, "md5_digest": "e6cb2633e073f3efb0587b888614b547", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20249, "upload_time": "2020-03-02T11:18:57", "upload_time_iso_8601": "2020-03-02T11:18:57.400884Z", "url": "https://files.pythonhosted.org/packages/4d/5b/e07c40b5aa8a8b8894ec790e635f0300878ac7ebe8d26ff7b45fb08afbe3/CouchDB2-1.9.0.tar.gz", "yanked": false}], "1.9.1": [{"comment_text": "", "digests": {"md5": "07c03756ba34d59653f5978268072148", "sha256": "2fa86f502c38ab2a387b90322c1751507383c98260ab5d7089e92dfd656ec351"}, "downloads": -1, "filename": "CouchDB2-1.9.1-py3-none-any.whl", "has_sig": false, "md5_digest": "07c03756ba34d59653f5978268072148", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 20080, "upload_time": "2020-03-25T14:09:33", "upload_time_iso_8601": "2020-03-25T14:09:33.831252Z", "url": "https://files.pythonhosted.org/packages/f2/e9/6e99b22242367877607ac55a6f2ee9107440c41bc4180299db35946109b6/CouchDB2-1.9.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2a61fa3c2d29d7f9c445199d46ffe910", "sha256": "72484e6a112ed7bcb5747f72d12c0111fb6410ef6606cfbc6240490cea68778b"}, "downloads": -1, "filename": "CouchDB2-1.9.1.tar.gz", "has_sig": false, "md5_digest": "2a61fa3c2d29d7f9c445199d46ffe910", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23349, "upload_time": "2020-03-25T14:09:36", "upload_time_iso_8601": "2020-03-25T14:09:36.082297Z", "url": "https://files.pythonhosted.org/packages/e0/bf/f00c8dedc091d8f751a4b2251407c95d725ff3e58f0e491e618475ce0f86/CouchDB2-1.9.1.tar.gz", "yanked": false}], "1.9.2": [{"comment_text": "", "digests": {"md5": "401eb55de8c75879aba385b4f25d00b4", "sha256": "56624078764e84f0fd5f3598e7e0745eef58b03bac0728fe2e0cbd27bee7c130"}, "downloads": -1, "filename": "CouchDB2-1.9.2-py3-none-any.whl", "has_sig": false, "md5_digest": "401eb55de8c75879aba385b4f25d00b4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 20223, "upload_time": "2020-04-01T09:23:45", "upload_time_iso_8601": "2020-04-01T09:23:45.169278Z", "url": "https://files.pythonhosted.org/packages/5b/6a/38ff0983472f3ce4e3ce36e04bc29e3e8f84bc5d0002c3e0d9dfc6125d3e/CouchDB2-1.9.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ef92c36f3c9cc522edad07bab7611790", "sha256": "532584d1751a0b96f702dfe5e595835d8a70def2de6da15e3ad9e6a8172e0764"}, "downloads": -1, "filename": "CouchDB2-1.9.2.tar.gz", "has_sig": false, "md5_digest": "ef92c36f3c9cc522edad07bab7611790", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23540, "upload_time": "2020-04-01T09:23:47", "upload_time_iso_8601": "2020-04-01T09:23:47.313120Z", "url": "https://files.pythonhosted.org/packages/62/f5/0bb6be76892c0e2036e74f3f077c4529599e086fc523ef0ed55b8880a1c7/CouchDB2-1.9.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "401eb55de8c75879aba385b4f25d00b4", "sha256": "56624078764e84f0fd5f3598e7e0745eef58b03bac0728fe2e0cbd27bee7c130"}, "downloads": -1, "filename": "CouchDB2-1.9.2-py3-none-any.whl", "has_sig": false, "md5_digest": "401eb55de8c75879aba385b4f25d00b4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 20223, "upload_time": "2020-04-01T09:23:45", "upload_time_iso_8601": "2020-04-01T09:23:45.169278Z", "url": "https://files.pythonhosted.org/packages/5b/6a/38ff0983472f3ce4e3ce36e04bc29e3e8f84bc5d0002c3e0d9dfc6125d3e/CouchDB2-1.9.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ef92c36f3c9cc522edad07bab7611790", "sha256": "532584d1751a0b96f702dfe5e595835d8a70def2de6da15e3ad9e6a8172e0764"}, "downloads": -1, "filename": "CouchDB2-1.9.2.tar.gz", "has_sig": false, "md5_digest": "ef92c36f3c9cc522edad07bab7611790", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23540, "upload_time": "2020-04-01T09:23:47", "upload_time_iso_8601": "2020-04-01T09:23:47.313120Z", "url": "https://files.pythonhosted.org/packages/62/f5/0bb6be76892c0e2036e74f3f077c4529599e086fc523ef0ed55b8880a1c7/CouchDB2-1.9.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:42:55 2020"}