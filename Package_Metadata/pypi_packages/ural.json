{"info": {"author": "Guillaume Plique, Jules Farjas, Oubine Perrin, Benjamin Ooghe-Tabanou, Martin Delabre, Pauline Breteau", "author_email": "kropotkinepiotr@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "[![Build Status](https://travis-ci.org/medialab/ural.svg)](https://travis-ci.org/medialab/ural)\n\n# Ural\n\nA helper library full of URL-related heuristics.\n\n## Installation\n\nYou can install `ural` with pip with the following command:\n\n```\npip install ural\n```\n\n## Usage\n\n*Generic functions*\n\n* [ensure_protocol](#ensure_protocol)\n* [get_domain_name](#get_domain_name)\n* [get_hostname](#get_hostname)\n* [get_normalized_hostname](#get_normalized_hostname)\n* [force_protocol](#force_protocol)\n* [infer_redirection](#infer_redirection)\n* [is_shortened_url](#is_shortened_url)\n* [is_url](#is_url)\n* [normalize_url](#normalize_url)\n* [strip_protocol](#strip_protocol)\n* [urls_from_html](#urls_from_html)\n* [urls_from_text](#urls_from_text)\n\n*LRU-related functions* ([What on earth is a LRU?](#lru-explanation))\n\n* [lru.url_to_lru](#lruurl_to_lru)\n* [lru.lru_to_url](#lrulru_to_url)\n* [lru.lru_stems](#lrulru_stems)\n* [lru.normalized_lru_stems](#lrunormalized_lru_stems)\n* [lru.serialize_lru](#lruserialize_lru)\n* [lru.unserialize_lru](#lruunserialize_lru)\n\n*LRU-related classes*\n\n* [LRUTrie](#LRUTrie)\n  * [set](#set)\n  * [set_lru](#set_lru)\n  * [match](#match)\n  * [match_lru](#match_lru)\n\n* [NormalizedLRUTrie](#NormalizedLRUTrie)\n\n*Platform-specific functions*\n\n* [facebook](#facebook)\n  * [is_facebook_url](#is_facebook_url)\n  * [is_facebook_post_url](#is_facebook_post_url)\n  * [is_facebook_link](#is_facebook_link)\n  * [convert_facebook_url_to_mobile](#convert_facebook_url_to_mobile)\n  * [parse_facebook_url](#parse_facebook_url)\n  * [extract_url_from_facebook_link](#extract_url_from_facebook_link)\n* [google](#google)\n  * [is_amp_url](#is_amp_url)\n  * [is_google_link](#is_google_link)\n  * [extract_url_from_google_link](#extract_url_from_google_link)\n* [youtube](#youtube)\n  * [is_youtube_url](#is_youtube_url)\n  * [is_youtube_video_id](#is_youtube_video_id)\n  * [parse_youtube_url](#parse_youtube_url)\n  * [extract_video_id_from_youtube_url](#extract_video_id_from_youtube_url)\n  * [normalize_youtube_url](#normalize_youtube_url)\n\n---\n\n### ensure_protocol\n\nFunction checking if the url has a protocol, and adding the given one if there is none.\n\n```python\nfrom ural import ensure_protocol\n\nensure_protocol('www2.lemonde.fr', protocol='https')\n>>> 'https://www2.lemonde.fr'\n```\n\n*Arguments*\n\n* **url** *string*: URL to format.\n* **protocol** *string*: protocol to use if there is none in **url**. Is 'http' by default.\n\n---\n\n### get_domain_name\n\nFunction returning an url's domain name. This function is of course tld-aware and will return `None` if no valid domain name can be found.\n\n```python\nfrom ural import get_domain_name\n\nget_domain_name('https://facebook.com/path')\n>>> 'facebook.com'\n```\n\n---\n\n### get_hostname\n\nFunction returning the given url's full hostname. It can work on scheme-less urls.\n\n```python\nfrom ural import get_hostname\n\nget_hostname('http://www.facebook.com/path')\n>>> 'www.facebook.com'\n```\n\n---\n\n### get_normalized_hostname\n\nFunction returning the given url's normalized hostname, i.e. without usually irrelevant subdomains etc. Works a lot like [normalize_url](#normalize_url).\n\n```python\nfrom ural import get_normalized_hostname\n\nget_normalized_hostname('http://www.facebook.com/path')\n>>> 'facebook.com'\n\nget_normalized_hostname('http://fr-FR.facebook.com/path', strip_lang_subdomains=True)\n>>> 'facebook.com'\n```\n\n*Arguments*\n\n* **url** *str*: Target url.\n* **infer_redirection** *bool* [`False`]: whether to attempt resolving common redirects by leveraging well-known GET parameters.\n* **normalize_amp** *?bool*: Whether to attempt to normalize Google AMP subdomains.\n* **strip_lang_subdomains** *?bool*: Whether to drop language-specific subdomains.\n\n---\n\n### force_protocol\n\nFunction force-replacing the protocol of the given url.\n\n```python\nfrom ural import force_protocol\n\nforce_protocol('https://www2.lemonde.fr', protocol='ftp')\n>>> 'ftp://www2.lemonde.fr'\n```\n\n*Arguments*\n\n* **url** *string*: URL to format.\n* **protocol** *string*: protocol wanted in the output url. Is `'http'` by default.\n\n---\n\n### infer_redirection\n\nFunction attempting to find obvious clues in the given url that it is in fact a redirection and resolving the redirection automatically without firing any HTTP request. If nothing is found, the given url will be returned as-is.\n\n```python\nfrom ural import infer_redirection\n\ninfer_redirection('https://www.google.com/url?sa=t&source=web&rct=j&url=https%3A%2F%2Fm.youtube.com%2Fwatch%3Fv%3D4iJBsjHMviQ&ved=2ahUKEwiBm-TO3OvkAhUnA2MBHQRPAR4QwqsBMAB6BAgDEAQ&usg=AOvVaw0i7y2_fEy3nwwdIZyo_qug')\n>>> 'https://m.youtube.com/watch?v=4iJBsjHMviQ'\n```\n\n---\n\n### is_shortened_url\n\nFunction returning whether the given url is *probably* a shortened url. It works by matching the given url domain against most prominent shortener domains. So the result could be a false negative.\n\n```python\nfrom ural import is_shortened_url\n\nis_shortened_url('http://lemonde.fr')\n>>> False\n\nis_shortened_url('http://bit.ly/1sNZMwL')\n>>> True\n```\n\n---\n\n### is_url\n\nFunction returning whether the given string is a valid url.\n\n```python\nfrom ural import is_url\n\nis_url('https://www2.lemonde.fr')\n>>> True\n\nis_url('lemonde.fr/economie/article.php', require_protocol=False)\n>>> True\n\nis_url('lemonde.falsetld/whatever.html', tld_aware=True)\n>>> False\n```\n\n*Arguments*\n\n* **string** *string*: string to test.\n* **require_protocol** *bool* [`True`]: whether the argument has to have a protocol to be considered a url.\n* **tld_aware** *bool* [`False`]: whether to check if the url's tld actually exists or not.\n* **allow_spaces_in_path** *bool* [`False`]: whether the allow spaces in URL paths.\n* **only_http_https** *bool* [`True`]: whether to only allow the `http` and `https` protocols.\n\n---\n\n### normalize_url\n\nFunction normalizing the given url by stripping it of usually non-discriminant parts such as irrelevant query items or sub-domains etc.\n\nThis is a very useful utility when attempting to match similar urls written slightly differently when shared on social media etc.\n\n```python\nfrom ural import normalize_url\n\nnormalize_url('https://www2.lemonde.fr/index.php?utm_source=google')\n>>> 'lemonde.fr'\n```\n\n*Arguments*\n\n* **url** *string*: URL to normalize.\n* **infer_redirection** *?bool* [`False`]: whether to attempt resolving common redirects by leveraging well-known GET parameters.\n* **fix_common_mistakes** *?bool* [`True`]: whether to attempt to fix common URL mistakes.\n* **normalize_amp** *?bool* [`True`]: whether to attempt to normalize Google AMP urls.\n* **quoted** *?bool* [`True`]: whether to normalize to a quoted or unquoted version of the url.\n* **sort_query** *?bool* [`True`]: whether to sort query items.\n* **strip_authentication** *?bool* [`True`]: whether to strip authentication.\n* **strip_fragment** *?bool|str* [`'except-routing'`]: whether to strip the url's fragment. If set to `except-routing`, will only strip the fragment if the fragment is not deemed to be js routing (i.e. if it contains a `/`).\n* **strip_index** *?bool* [`True`]: whether to strip trailing index.\n* **strip_irrelevant_subdomains** *?bool* [`True`]: whether to strip irrelevant subdomains such as `www` etc.\n* **strip_lang_query_items** *?bool* [`False`]: whether to strip language query items (ex: `gl=pt_BR`).\n* **strip_lang_subdomains** *?bool* [`False`]: whether to strip language subdomains (ex: `fr-FR.lemonde.fr` to only `lemonde.fr` because `fr-FR` isn't a relevant subdomain, it indicates the language and the country).\n* **strip_protocol** *?bool* [`True`]: whether to strip the url's protocol.\n* **strip_trailing_slash** *?bool* [`True`]: whether to strip trailing slash.\n* **unsplit** *?bool* [`True`]: whether to return a stringified version of the normalized url or directly the `SplitResult` instance worked on by the normalization process.\n\n---\n\n### strip_protocol\n\nFunction removing the protocol from the url.\n\n```python\nfrom ural import strip_protocol\n\nstrip_protocol('https://www2.lemonde.fr/index.php')\n>>> 'www2.lemonde.fr/index.php'\n```\n\n*Arguments*\n\n* **url** *string*: URL to format.\n\n---\n\n### urls_from_html\n\nFunction returning an iterator over the urls present in the links of given HTML text.\n\n```python\nfrom ural import urls_from_html\n\nhtml = \"\"\"<p>Hey! Check this site: <a href=\"https://medialab.sciencespo.fr/\">m\u00e9dialab</a></p>\"\"\"\n\nfor url in urls_from_html(html):\n    print(url)\n>>> 'https://medialab.sciencespo.fr/'\n```\n\n*Arguments*\n\n* **string** *string*: html string.\n\n---\n\n### urls_from_text\n\nFunction returning an iterator over the urls present in the string argument. Extracts only the urls with a protocol.\n\n```python\nfrom ural import urls_from_text\n\ntext = \"Hey! Check this site: https://medialab.sciencespo.fr/, it looks really cool. They're developing many tools on https://github.com/\"\n\nfor url in urls_from_text(text):\n    print(url)\n>>> 'https://medialab.sciencespo.fr/'\n>>> 'https://github.com/'\n```\n\n*Arguments*\n\n* **string** *string*: source string.\n\n---\n\n### lru.url_to_lru\n\nFunction converting the given url to a serialized lru.\n\n```python\nfrom ural.lru import url_to_lru\n\nurl_to_lru('http://www.lemonde.fr:8000/article/1234/index.html?field=value#2')\n>>> 's:http|t:8000|h:fr|h:lemonde|h:www|p:article|p:1234|p:index.html|q:field=value|f:2|'\n```\n\n*Arguments*\n\n* **url** *string*: url to convert.\n* **tld_aware** *?bool*: whether to acknowledge TLDs when converting.\n---\n\n### lru.lru_to_url\n\nFunction converting the given serialized lru or lru stems to a proper url.\n\n```python\nfrom ural.lru import lru_to_url\n\nlru_to_url('s:http|t:8000|h:fr|h:lemonde|h:www|p:article|p:1234|p:index.html|')\n>>> 'http://www.lemonde.fr:8000/article/1234/index.html'\n\nlru_to_url(['s:http', 'h:fr', 'h:lemonde', 'h:www', 'p:article', 'p:1234', 'p:index.html'])\n>>> 'http://www.lemonde.fr:8000/article/1234/index.html'\n```\n\n---\n\n### lru.lru_stems\n\nFunction returning url parts in hierarchical order.\n\n```python\nfrom ural.lru import lru_stems\n\nlru_stems('http://www.lemonde.fr:8000/article/1234/index.html?field=value#2')\n>>> ['s:http', 't:8000', 'h:fr', 'h:lemonde', 'h:www', 'p:article', 'p:1234', 'p:index.html', 'q:field=value', 'f:2']\n```\n\n*Arguments*\n\n* **url** *string*: URL to parse.\n* **tld_aware** *?bool*: whether to acknowledge TLDs when stemming.\n\n---\n\n### lru.normalized_lru_stems\n\nFunction normalizing url and returning its parts in hierarchical order.\n\n```python\nfrom ural.lru import normalized_lru_stems\n\nnormalized_lru_stems('http://www.lemonde.fr:8000/article/1234/index.html?field=value#2')\n>>> ['t:8000', 'h:fr', 'h:lemonde', 'h:www', 'p:article', 'p:1234', 'q:field=value']\n```\n\n*Arguments*\n\nThis function accepts the same arguments as [normalize_url](#normalize_url).\n\n---\n\n### lru.serialize_lru\n\nFunction serializing lru stems to a string.\n\n```python\nfrom ural.lru import serialize_lru\n\nserialize_lru(['s:https', 'h:fr', 'h:lemonde'])\n>>> 's:https|h:fr|h:lemonde|'\n```\n\n---\n\n### lru.unserialize_lru\n\nFunction unserializing stringified lru to a list of stems.\n\n```python\nfrom ural.lru import unserialize_lru\n\nunserialize_lru('s:https|h:fr|h:lemonde|')\n>>> ['s:https', 'h:fr', 'h:lemonde']\n```\n\n---\n\n### LRUTrie\n\nClass implementing a prefix tree (Trie) storing URLs hierarchically by storing them as LRUs along with some arbitrary metadata. It is very useful when needing to match URLs by longest common prefix.\n\nNote that this class directly inherits from the `phylactery` library's [`TrieDict`](https://github.com/Yomguithereal/phylactery/blob/master/phylactery/triedict.py) so you can also use any of its methods.\n\n```python\nfrom ural.lru import LRUTrie\n\ntrie = LRUTrie()\n\n# To respect tlds\ntrie = LRUTrie(tld_aware=True)\n```\n\n#### set\n\nMethod storing a URL in a LRUTrie along with its metadata.\n\n```python\nfrom ural.lru import LRUTrie\n\ntrie = LRUTrie()\ntrie.set('http://www.lemonde.fr', {'type': 'general press'})\n\ntrie.match('http://www.lemonde.fr')\n>>> {'type': 'general press'}\n```\n\n*Arguments*\n\n* **url** *string*: url to store in the LRUTrie.\n* **metadata** *any*: metadata of the url.\n\n#### set_lru\n\nMethod storing a URL already represented as a LRU or LRU stems along with its metadata.\n\n```python\nfrom ural.lru import LRUTrie\n\ntrie = LRUTrie()\n\n# Using stems\ntrie.set_lru(['s:http', 'h:fr', 'h:lemonde', 'h:www'], {'type': 'general press'})\n\n# Using serialized lru\ntrie.set_lru('s:http|h:fr|h:lemonde|h:www|', {'type': 'general_press'})\n```\n\n*Arguments*\n\n* **lru** *string|list*: lru to store in the Trie.\n* **metadata** *any*: metadata to attach to the lru.\n\n#### match\n\nMethod returning the metadata attached to the longest prefix match of your query URL. Will return `None` if no common prefix can be found.\n\n```python\nfrom ural.lru import LRUTrie\n\ntrie = LRUTrie()\ntrie.set('http://www.lemonde.fr', {'media': 'lemonde'})\n\ntrie.match('http://www.lemonde.fr')\n>>> {'media': 'lemonde'}\ntrie.match('http://www.lemonde.fr/politique')\n>>> {'media': 'lemonde'}\n\ntrie.match('http://www.lefigaro.fr')\n>>> None\n```\n\n*Arguments*\n\n* **url** *string*: url to match in the LRUTrie.\n\n#### match_lru\n\nMethod returning the metadata attached to the longest prefix match of your query LRU. Will return `None` if no common prefix can be found.\n\n```python\nfrom ural.lru import LRUTrie\n\ntrie = LRUTrie()\ntrie.set(['s:http', 'h:fr', 'h:lemonde', 'h:www'], {'media': 'lemonde'})\n\ntrie.match(['s:http', 'h:fr', 'h:lemonde', 'h:www'])\n>>> {'media': 'lemonde'}\ntrie.match('s:http|h:fr|h:lemonde|h:www|p:politique|')\n>>> {'media': 'lemonde'}\n\ntrie.match(['s:http', 'h:fr', 'h:lefigaro', 'h:www'])\n>>> None\n```\n\n*Arguments*\n\n* **lru** *string|list*: lru to match in the LRUTrie.\n\n---\n\n### NormalizedLRUTrie\n\nThe `NormalizedLRUTrie` is nearly identical to the standard [`LRUTrie`](#LRUTrie) except that it normalized urls given to it before attempting any operation. It is a good choice if you want to avoid prefix queries issues related to `http` vs `https` or `www` shenanigans, for instance.\n\nTo tweak its normalization, you can give to `NormalizedLRUTrie` the same options you would give to [`normalize_url`](#normalize_url):\n\n```python\nfrom ural.lru import NormalizedLRUTrie\n\ntrie = NormalizedLRUTrie(normalize_amp=False)\n```\n\nNote that there are still some differences between the `LRUTrie` and the `NormalizedLRUTrie`:\n\n1. The `NormalizedLRUTrie` cannot be TLD aware.\n2. The `NormalizedLRUTrie` does not have the `#.set_lru` and `#.match_lru`  methods.\n\n---\n\n### Facebook\n\n#### is_facebook_url\n\nFunction returning whether given url is from Facebook or not.\n\n```python\nfrom ural.facebook import is_facebook_url\n\nis_facebook_url('http://www.facebook.com/post/974583586343')\n>>> True\n\nis_facebook_url('https://fb.me/846748464')\n>>> True\n\nis_facebook_url('https://www.lemonde.fr')\n>>> False\n```\n\n#### is_facebook_post_url\n\nFunction returning whether the given url is a Facebook post or not.\n\n```python\nfrom ural.facebook import is_facebook_post_url\n\nis_facebook_post_url('http://www.facebook.com/post/974583586343')\n>>> True\n\nis_facebook_post_url('http://www.facebook.com')\n>>> False\n\nis_facebook_post_url('https://www.lemonde.fr')\n>>> False\n```\n\n#### is_facebook_link\n\nFunction returning whether the given url is a Facebook redirection link.\n\n```python\nfrom ural.facebook import is_facebook_link\n\nis_facebook_link('https://l.facebook.com/l.php?u=http%3A%2F%2Fwww.chaos-controle.com%2Farchives%2F2013%2F10%2F14%2F28176300.html&amp;h=AT0iUqJpUTMzHAH8HAXwZ11p8P3Z-SrY90wIXZhcjMnxBTHMiau8Fv1hvz00ZezRegqmF86SczyUXx3Gzdt_MdFH-I4CwHIXKKU9L6w522xwOqkOvLAylxojGEwrp341uC-GlVyGE2N7XwTPK9cpP0mQ8PIrWh8Qj2gHIIR08Js0mUr7G8Qe9fx66uYcfnNfTTF1xi0Us8gTo4fOZxAgidGWXsdgtU_OdvQqyEm97oHzKbWfXjkhsrzbtb8ZNMDwCP5099IMcKRD8Hi5H7W3vwh9hd_JlRgm5Z074epD_mGAeoEATE_QUVNTxO0SHO4XNn2Z7LgBamvevu1ENBcuyuSOYA0BsY2cx8mPWJ9t44tQcnmyQhBlYm_YmszDaQx9IfVP26PRqhsTLz-kZzv0DGMiJFU78LVWVPc9QSw2f9mA5JYWr29w12xJJ5XGQ6DhJxDMWRnLdG8Tnd7gZKCaRdqDER1jkO72u75-o4YuV3CLh4j-_4u0fnHSzHdVD8mxr9pNEgu8rvJF1E2H3-XbzA6F2wMQtFCejH8MBakzYtTGNvHSexSiKphE04Ci1Z23nBjCZFsgNXwL3wbIXWfHjh2LCKyihQauYsnvxp6fyioStJSGgyA9GGEswizHa20lucQF0S0F8H9-')\n>>> True\n\nis_facebook_link('https://lemonde.fr')\n>>> False\n```\n\n#### convert_facebook_url_to_mobile\n\nFunction returning the mobile version of the given Facebook url. Will raise an exception if a non-Facebook url is given.\n\n```python\nfrom ural.facebook import convert_facebook_url_to_mobile\n\nconvert_facebook_url_to_mobile('http://www.facebook.com/post/974583586343')\n>>> 'http://m.facebook.com/post/974583586343'\n```\n\n#### parse_facebook_url\n\nFunction parsing the given Facebook url.\n\n```python\nfrom ural.facebook import parse_facebook_url\n\n# Importing related classes if you need to perform tests\nfrom ural.facebook import (\n  FacebookHandle,\n  FacebookUser,\n  FacebookPost\n)\n\nparse_facebook_url('https://www.facebook.com/people/Sophia-Aman/102016783928989')\n>>> FacebookUser(id='102016783928989')\n\nparse_facebook_url('/annelaure.rivolu?rc=p&__tn__=R', allow_relative_urls=True)\n>>> FacebookHandle(handle='annelaure.rivolu')\n\nparse_facebook_url('https://lemonde.fr')\n>>> None\n```\n\n#### extract_url_from_facebook_link\n\nFunction extracting target url from a Facebook redirection link.\n\n```python\nfrom ural.facebook import extract_url_from_facebook_link\n\nextract_url_from_facebook_link('https://l.facebook.com/l.php?u=http%3A%2F%2Fwww.chaos-controle.com%2Farchives%2F2013%2F10%2F14%2F28176300.html&amp;h=AT0iUqJpUTMzHAH8HAXwZ11p8P3Z-SrY90wIXZhcjMnxBTHMiau8Fv1hvz00ZezRegqmF86SczyUXx3Gzdt_MdFH-I4CwHIXKKU9L6w522xwOqkOvLAylxojGEwrp341uC-GlVyGE2N7XwTPK9cpP0mQ8PIrWh8Qj2gHIIR08Js0mUr7G8Qe9fx66uYcfnNfTTF1xi0Us8gTo4fOZxAgidGWXsdgtU_OdvQqyEm97oHzKbWfXjkhsrzbtb8ZNMDwCP5099IMcKRD8Hi5H7W3vwh9hd_JlRgm5Z074epD_mGAeoEATE_QUVNTxO0SHO4XNn2Z7LgBamvevu1ENBcuyuSOYA0BsY2cx8mPWJ9t44tQcnmyQhBlYm_YmszDaQx9IfVP26PRqhsTLz-kZzv0DGMiJFU78LVWVPc9QSw2f9mA5JYWr29w12xJJ5XGQ6DhJxDMWRnLdG8Tnd7gZKCaRdqDER1jkO72u75-o4YuV3CLh4j-_4u0fnHSzHdVD8mxr9pNEgu8rvJF1E2H3-XbzA6F2wMQtFCejH8MBakzYtTGNvHSexSiKphE04Ci1Z23nBjCZFsgNXwL3wbIXWfHjh2LCKyihQauYsnvxp6fyioStJSGgyA9GGEswizHa20lucQF0S0F8H9-')\n>>> 'http://www.chaos-controle.com/archives/2013/10/14/28176300.html'\n\nextract_url_from_facebook_link('http://lemonde.fr')\n>>> None\n```\n\n---\n\n### Google\n\n#### is_amp_url\n\nReturns whether the given url is probably a Google AMP url.\n\n```python\nfrom ural.google import is_amp_url\n\nis_amp_url('http://www.europe1.fr/sante/les-onze-vaccins.amp')\n>>> True\n\nis_amp_url('https://www.lemonde.fr')\n>>> False\n```\n\n#### is_google_link\n\nReturns whether the given url is a Google search link.\n\n```python\nfrom ural.google import is_google_link\n\nis_google_link('https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=4&cad=rja&uact=8&ved=2ahUKEwjp8Lih_LnmAhWQlxQKHVTmCJYQFjADegQIARAB&url=http%3A%2F%2Fwww.mon-ip.com%2F&usg=AOvVaw0sfeZJyVtUS2smoyMlJmes')\n>>> True\n\nis_google_link('https://www.lemonde.fr')\n>>> False\n```\n\n#### extract_url_from_google_link\n\nExtracts the url from the given Google search link. This is useful to \"resolve\" the links scraped from Google's search results.\n\n```python\nfrom ural.google import extract_url_from_google_link\n\nextract_url_from_google_link('https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&cad=rja&uact=8&ved=2ahUKEwicu4K-rZzmAhWOEBQKHRNWA08QFjAAegQIARAB&url=https%3A%2F%2Fwww.facebook.com%2Fieff.ogbeide&usg=AOvVaw0vrBVCiIHUr5pncjeLpPUp')\n\n>>> 'https://www.facebook.com/ieff.ogbeide'\n```\n\n---\n\n### Youtube\n\n#### is_youtube_url\n\nReturns whether the given url is from Youtube.\n\n```python\nfrom ural.youtube import is_youtube_url\n\nis_youtube_url('https://lemonde.fr')\n>>> False\n\nis_youtube_url('https://www.youtube.com/watch?v=otRTOE9i51o')\n>>> True\n\nis_youtube_url('https://youtu.be/otRTOE9i51o)\n>>> True\n```\n\n#### is_youtube_video_id\n\nReturns whether the given string is a formally valid Youtube id. Note that it won't validate the fact that this id actually refers to an existing video or not. You will need to call Youtube servers for that.\n\n```python\nfrom ural.youtube import is_youtube_video_id\n\nis_youtube_video_id('otRTOE9i51o')\n>>> True\n\nis_youtube_video_id('bDYTYET')\n>>> False\n```\n\n#### parse_youtube_url\n\nReturns parsed information about the given youtube url: either about the linked video, user or channel. If the url is an invalid Youtube url or if not a Youtube url, the function returns `None`.\n\n```python\nfrom ural.youtube import (\n  parse_youtube_url,\n\n  # You can also import the named tuples if you need them\n  YoutubeVideo,\n  YoutubeUser,\n  YoutubeChannel\n)\n\nparse_youtube_url('https://www.youtube.com/watch?v=otRTOE9i51o')\n>>> YoutubeVideo(id='otRTOE9i51o')\n\nparse_youtube_url('https://lemonde.fr')\n>>> None\n\nparse_youtube_url('http://www.youtube.com/channel/UCWvUxN9LAjJ-sTc5JJ3gEyA/videos')\n>>> YoutubeChannel(id='UCWvUxN9LAjJ-sTc5JJ3gEyA', name=None)\n\nparse_youtube_url('http://www.youtube.com/user/ojimfrance')\n>>> YoutubeUser(id=None, name='ojimfrance')\n\nparse_youtube_url('https://www.youtube.com/taranisnews')\n>>> YoutubeChannel(id=None, name='taranisnews')\n```\n\n*Arguments*\n\n* **url** *str*: Youtube url to parse.\n* **fix_common_mistakes** *bool* [`True`]: Whether to fix common mistakes that can be found in Youtube urls as you can find them when crawling the web.\n\n#### extract_video_id_from_youtube_url\n\nReturn a video id from the given Youtube url or `None` if we could not find one.\n\n```python\nfrom ural.youtube import extract_video_id_from_youtube_url\n\nextract_video_id_from_youtube_url('https://www.youtube.com/watch?v=otRTOE9i51o')\n>>> 'otRTOE9i51o'\n\nextract_video_id_from_youtube_url('https://lemonde.fr')\n>>> None\n\nextract_video_id_from_youtube_url('http://youtu.be/afa-5HQHiAs')\n>>> 'afa-5HQHiAs'\n```\n\n#### normalize_youtube_url\n\nReturns a normalized version of the given Youtube url. It will normalize video, user and channel urls so you can easily match them.\n\n```python\nfrom ural.youtube import normalize_youtube_url\n\nnormalize_youtube_url('https://www.youtube.com/watch?v=otRTOE9i51o')\n>>> 'https://www.youtube.com/watch?v=otRTOE9i51o'\n\nnormalize_youtube_url('http://youtu.be/afa-5HQHiAs')\n>>> 'https://www.youtube.com/watch?v=afa-5HQHiAs'\n```\n\n---\n\n## Miscellaneous\n\n<h3 id=\"lru-explanation\">About LRUs</h2>\n\n*TL;DR*: a LRU is a hierarchical reordering of a URL so that one can perform meaningful prefix queries on URLs.\n\nIf you observe many URLs, you will quickly notice that they are not written in sound hierarchical order. In this URL, for instance:\n\n```\nhttp://business.lemonde.fr/articles/money.html?id=34#content\n```\n\nSome parts, such as the subdomain, are written in an \"incorrect order\". And this is fine, really, this is how URLs always worked.\n\nBut if what you really want is to match URLs, you will need to reorder them so that their order closely reflects the hierarchy of their targeted content. And this is exactly what LRUs are (that and also a bad pun on URL, since a LRU is basically a \"reversed\" URL).\n\nNow look how the beforementioned URL could be splitted into LRU stems:\n\n```python\n[\n  's:http',\n  'h:fr',\n  'h:lemonde',\n  'h:business',\n  'p:articles',\n  'p:money.html',\n  'q:id=34',\n  'f:content'\n]\n```\n\nAnd typically, this list of stems will be serialized thusly:\n\n```\ns:http|h:fr|h:lemonde|h:business|p:articles|p:money.html|q:id=34|f:content|\n```\n\nThe trailing slash is added so that serialized LRUs can be *prefix-free*.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/medialab/ural", "keywords": "url", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "ural", "package_url": "https://pypi.org/project/ural/", "platform": "", "project_url": "https://pypi.org/project/ural/", "project_urls": {"Homepage": "http://github.com/medialab/ural"}, "release_url": "https://pypi.org/project/ural/0.23.0/", "requires_dist": ["phylactery (>=0.2.2)", "pycountry (>=18.12.8)", "tld (>=0.12.1)"], "requires_python": ">=2.7", "summary": "A helper library full of URL-related heuristics.", "version": "0.23.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/medialab/ural\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1e29fce37a76698ce07f2b3c8caafc59e7e3047c/68747470733a2f2f7472617669732d63692e6f72672f6d656469616c61622f7572616c2e737667\"></a></p>\n<h1>Ural</h1>\n<p>A helper library full of URL-related heuristics.</p>\n<h2>Installation</h2>\n<p>You can install <code>ural</code> with pip with the following command:</p>\n<pre><code>pip install ural\n</code></pre>\n<h2>Usage</h2>\n<p><em>Generic functions</em></p>\n<ul>\n<li><a href=\"#ensure_protocol\" rel=\"nofollow\">ensure_protocol</a></li>\n<li><a href=\"#get_domain_name\" rel=\"nofollow\">get_domain_name</a></li>\n<li><a href=\"#get_hostname\" rel=\"nofollow\">get_hostname</a></li>\n<li><a href=\"#get_normalized_hostname\" rel=\"nofollow\">get_normalized_hostname</a></li>\n<li><a href=\"#force_protocol\" rel=\"nofollow\">force_protocol</a></li>\n<li><a href=\"#infer_redirection\" rel=\"nofollow\">infer_redirection</a></li>\n<li><a href=\"#is_shortened_url\" rel=\"nofollow\">is_shortened_url</a></li>\n<li><a href=\"#is_url\" rel=\"nofollow\">is_url</a></li>\n<li><a href=\"#normalize_url\" rel=\"nofollow\">normalize_url</a></li>\n<li><a href=\"#strip_protocol\" rel=\"nofollow\">strip_protocol</a></li>\n<li><a href=\"#urls_from_html\" rel=\"nofollow\">urls_from_html</a></li>\n<li><a href=\"#urls_from_text\" rel=\"nofollow\">urls_from_text</a></li>\n</ul>\n<p><em>LRU-related functions</em> (<a href=\"#lru-explanation\" rel=\"nofollow\">What on earth is a LRU?</a>)</p>\n<ul>\n<li><a href=\"#lruurl_to_lru\" rel=\"nofollow\">lru.url_to_lru</a></li>\n<li><a href=\"#lrulru_to_url\" rel=\"nofollow\">lru.lru_to_url</a></li>\n<li><a href=\"#lrulru_stems\" rel=\"nofollow\">lru.lru_stems</a></li>\n<li><a href=\"#lrunormalized_lru_stems\" rel=\"nofollow\">lru.normalized_lru_stems</a></li>\n<li><a href=\"#lruserialize_lru\" rel=\"nofollow\">lru.serialize_lru</a></li>\n<li><a href=\"#lruunserialize_lru\" rel=\"nofollow\">lru.unserialize_lru</a></li>\n</ul>\n<p><em>LRU-related classes</em></p>\n<ul>\n<li>\n<p><a href=\"#LRUTrie\" rel=\"nofollow\">LRUTrie</a></p>\n<ul>\n<li><a href=\"#set\" rel=\"nofollow\">set</a></li>\n<li><a href=\"#set_lru\" rel=\"nofollow\">set_lru</a></li>\n<li><a href=\"#match\" rel=\"nofollow\">match</a></li>\n<li><a href=\"#match_lru\" rel=\"nofollow\">match_lru</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#NormalizedLRUTrie\" rel=\"nofollow\">NormalizedLRUTrie</a></p>\n</li>\n</ul>\n<p><em>Platform-specific functions</em></p>\n<ul>\n<li><a href=\"#facebook\" rel=\"nofollow\">facebook</a>\n<ul>\n<li><a href=\"#is_facebook_url\" rel=\"nofollow\">is_facebook_url</a></li>\n<li><a href=\"#is_facebook_post_url\" rel=\"nofollow\">is_facebook_post_url</a></li>\n<li><a href=\"#is_facebook_link\" rel=\"nofollow\">is_facebook_link</a></li>\n<li><a href=\"#convert_facebook_url_to_mobile\" rel=\"nofollow\">convert_facebook_url_to_mobile</a></li>\n<li><a href=\"#parse_facebook_url\" rel=\"nofollow\">parse_facebook_url</a></li>\n<li><a href=\"#extract_url_from_facebook_link\" rel=\"nofollow\">extract_url_from_facebook_link</a></li>\n</ul>\n</li>\n<li><a href=\"#google\" rel=\"nofollow\">google</a>\n<ul>\n<li><a href=\"#is_amp_url\" rel=\"nofollow\">is_amp_url</a></li>\n<li><a href=\"#is_google_link\" rel=\"nofollow\">is_google_link</a></li>\n<li><a href=\"#extract_url_from_google_link\" rel=\"nofollow\">extract_url_from_google_link</a></li>\n</ul>\n</li>\n<li><a href=\"#youtube\" rel=\"nofollow\">youtube</a>\n<ul>\n<li><a href=\"#is_youtube_url\" rel=\"nofollow\">is_youtube_url</a></li>\n<li><a href=\"#is_youtube_video_id\" rel=\"nofollow\">is_youtube_video_id</a></li>\n<li><a href=\"#parse_youtube_url\" rel=\"nofollow\">parse_youtube_url</a></li>\n<li><a href=\"#extract_video_id_from_youtube_url\" rel=\"nofollow\">extract_video_id_from_youtube_url</a></li>\n<li><a href=\"#normalize_youtube_url\" rel=\"nofollow\">normalize_youtube_url</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3>ensure_protocol</h3>\n<p>Function checking if the url has a protocol, and adding the given one if there is none.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ural</span> <span class=\"kn\">import</span> <span class=\"n\">ensure_protocol</span>\n\n<span class=\"n\">ensure_protocol</span><span class=\"p\">(</span><span class=\"s1\">'www2.lemonde.fr'</span><span class=\"p\">,</span> <span class=\"n\">protocol</span><span class=\"o\">=</span><span class=\"s1\">'https'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"s1\">'https://www2.lemonde.fr'</span>\n</pre>\n<p><em>Arguments</em></p>\n<ul>\n<li><strong>url</strong> <em>string</em>: URL to format.</li>\n<li><strong>protocol</strong> <em>string</em>: protocol to use if there is none in <strong>url</strong>. Is 'http' by default.</li>\n</ul>\n<hr>\n<h3>get_domain_name</h3>\n<p>Function returning an url's domain name. This function is of course tld-aware and will return <code>None</code> if no valid domain name can be found.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ural</span> <span class=\"kn\">import</span> <span class=\"n\">get_domain_name</span>\n\n<span class=\"n\">get_domain_name</span><span class=\"p\">(</span><span class=\"s1\">'https://facebook.com/path'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"s1\">'facebook.com'</span>\n</pre>\n<hr>\n<h3>get_hostname</h3>\n<p>Function returning the given url's full hostname. It can work on scheme-less urls.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ural</span> <span class=\"kn\">import</span> <span class=\"n\">get_hostname</span>\n\n<span class=\"n\">get_hostname</span><span class=\"p\">(</span><span class=\"s1\">'http://www.facebook.com/path'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"s1\">'www.facebook.com'</span>\n</pre>\n<hr>\n<h3>get_normalized_hostname</h3>\n<p>Function returning the given url's normalized hostname, i.e. without usually irrelevant subdomains etc. Works a lot like <a href=\"#normalize_url\" rel=\"nofollow\">normalize_url</a>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ural</span> <span class=\"kn\">import</span> <span class=\"n\">get_normalized_hostname</span>\n\n<span class=\"n\">get_normalized_hostname</span><span class=\"p\">(</span><span class=\"s1\">'http://www.facebook.com/path'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"s1\">'facebook.com'</span>\n\n<span class=\"n\">get_normalized_hostname</span><span class=\"p\">(</span><span class=\"s1\">'http://fr-FR.facebook.com/path'</span><span class=\"p\">,</span> <span class=\"n\">strip_lang_subdomains</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"s1\">'facebook.com'</span>\n</pre>\n<p><em>Arguments</em></p>\n<ul>\n<li><strong>url</strong> <em>str</em>: Target url.</li>\n<li><strong>infer_redirection</strong> <em>bool</em> [<code>False</code>]: whether to attempt resolving common redirects by leveraging well-known GET parameters.</li>\n<li><strong>normalize_amp</strong> <em>?bool</em>: Whether to attempt to normalize Google AMP subdomains.</li>\n<li><strong>strip_lang_subdomains</strong> <em>?bool</em>: Whether to drop language-specific subdomains.</li>\n</ul>\n<hr>\n<h3>force_protocol</h3>\n<p>Function force-replacing the protocol of the given url.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ural</span> <span class=\"kn\">import</span> <span class=\"n\">force_protocol</span>\n\n<span class=\"n\">force_protocol</span><span class=\"p\">(</span><span class=\"s1\">'https://www2.lemonde.fr'</span><span class=\"p\">,</span> <span class=\"n\">protocol</span><span class=\"o\">=</span><span class=\"s1\">'ftp'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"s1\">'ftp://www2.lemonde.fr'</span>\n</pre>\n<p><em>Arguments</em></p>\n<ul>\n<li><strong>url</strong> <em>string</em>: URL to format.</li>\n<li><strong>protocol</strong> <em>string</em>: protocol wanted in the output url. Is <code>'http'</code> by default.</li>\n</ul>\n<hr>\n<h3>infer_redirection</h3>\n<p>Function attempting to find obvious clues in the given url that it is in fact a redirection and resolving the redirection automatically without firing any HTTP request. If nothing is found, the given url will be returned as-is.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ural</span> <span class=\"kn\">import</span> <span class=\"n\">infer_redirection</span>\n\n<span class=\"n\">infer_redirection</span><span class=\"p\">(</span><span class=\"s1\">'https://www.google.com/url?sa=t&amp;source=web&amp;rct=j&amp;url=https%3A</span><span class=\"si\">%2F%2F</span><span class=\"s1\">m.youtube.com</span><span class=\"si\">%2F</span><span class=\"s1\">watch</span><span class=\"si\">%3F</span><span class=\"s1\">v%3D4iJBsjHMviQ&amp;ved=2ahUKEwiBm-TO3OvkAhUnA2MBHQRPAR4QwqsBMAB6BAgDEAQ&amp;usg=AOvVaw0i7y2_fEy3nwwdIZyo_qug'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"s1\">'https://m.youtube.com/watch?v=4iJBsjHMviQ'</span>\n</pre>\n<hr>\n<h3>is_shortened_url</h3>\n<p>Function returning whether the given url is <em>probably</em> a shortened url. It works by matching the given url domain against most prominent shortener domains. So the result could be a false negative.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ural</span> <span class=\"kn\">import</span> <span class=\"n\">is_shortened_url</span>\n\n<span class=\"n\">is_shortened_url</span><span class=\"p\">(</span><span class=\"s1\">'http://lemonde.fr'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kc\">False</span>\n\n<span class=\"n\">is_shortened_url</span><span class=\"p\">(</span><span class=\"s1\">'http://bit.ly/1sNZMwL'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kc\">True</span>\n</pre>\n<hr>\n<h3>is_url</h3>\n<p>Function returning whether the given string is a valid url.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ural</span> <span class=\"kn\">import</span> <span class=\"n\">is_url</span>\n\n<span class=\"n\">is_url</span><span class=\"p\">(</span><span class=\"s1\">'https://www2.lemonde.fr'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kc\">True</span>\n\n<span class=\"n\">is_url</span><span class=\"p\">(</span><span class=\"s1\">'lemonde.fr/economie/article.php'</span><span class=\"p\">,</span> <span class=\"n\">require_protocol</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kc\">True</span>\n\n<span class=\"n\">is_url</span><span class=\"p\">(</span><span class=\"s1\">'lemonde.falsetld/whatever.html'</span><span class=\"p\">,</span> <span class=\"n\">tld_aware</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kc\">False</span>\n</pre>\n<p><em>Arguments</em></p>\n<ul>\n<li><strong>string</strong> <em>string</em>: string to test.</li>\n<li><strong>require_protocol</strong> <em>bool</em> [<code>True</code>]: whether the argument has to have a protocol to be considered a url.</li>\n<li><strong>tld_aware</strong> <em>bool</em> [<code>False</code>]: whether to check if the url's tld actually exists or not.</li>\n<li><strong>allow_spaces_in_path</strong> <em>bool</em> [<code>False</code>]: whether the allow spaces in URL paths.</li>\n<li><strong>only_http_https</strong> <em>bool</em> [<code>True</code>]: whether to only allow the <code>http</code> and <code>https</code> protocols.</li>\n</ul>\n<hr>\n<h3>normalize_url</h3>\n<p>Function normalizing the given url by stripping it of usually non-discriminant parts such as irrelevant query items or sub-domains etc.</p>\n<p>This is a very useful utility when attempting to match similar urls written slightly differently when shared on social media etc.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ural</span> <span class=\"kn\">import</span> <span class=\"n\">normalize_url</span>\n\n<span class=\"n\">normalize_url</span><span class=\"p\">(</span><span class=\"s1\">'https://www2.lemonde.fr/index.php?utm_source=google'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"s1\">'lemonde.fr'</span>\n</pre>\n<p><em>Arguments</em></p>\n<ul>\n<li><strong>url</strong> <em>string</em>: URL to normalize.</li>\n<li><strong>infer_redirection</strong> <em>?bool</em> [<code>False</code>]: whether to attempt resolving common redirects by leveraging well-known GET parameters.</li>\n<li><strong>fix_common_mistakes</strong> <em>?bool</em> [<code>True</code>]: whether to attempt to fix common URL mistakes.</li>\n<li><strong>normalize_amp</strong> <em>?bool</em> [<code>True</code>]: whether to attempt to normalize Google AMP urls.</li>\n<li><strong>quoted</strong> <em>?bool</em> [<code>True</code>]: whether to normalize to a quoted or unquoted version of the url.</li>\n<li><strong>sort_query</strong> <em>?bool</em> [<code>True</code>]: whether to sort query items.</li>\n<li><strong>strip_authentication</strong> <em>?bool</em> [<code>True</code>]: whether to strip authentication.</li>\n<li><strong>strip_fragment</strong> <em>?bool|str</em> [<code>'except-routing'</code>]: whether to strip the url's fragment. If set to <code>except-routing</code>, will only strip the fragment if the fragment is not deemed to be js routing (i.e. if it contains a <code>/</code>).</li>\n<li><strong>strip_index</strong> <em>?bool</em> [<code>True</code>]: whether to strip trailing index.</li>\n<li><strong>strip_irrelevant_subdomains</strong> <em>?bool</em> [<code>True</code>]: whether to strip irrelevant subdomains such as <code>www</code> etc.</li>\n<li><strong>strip_lang_query_items</strong> <em>?bool</em> [<code>False</code>]: whether to strip language query items (ex: <code>gl=pt_BR</code>).</li>\n<li><strong>strip_lang_subdomains</strong> <em>?bool</em> [<code>False</code>]: whether to strip language subdomains (ex: <code>fr-FR.lemonde.fr</code> to only <code>lemonde.fr</code> because <code>fr-FR</code> isn't a relevant subdomain, it indicates the language and the country).</li>\n<li><strong>strip_protocol</strong> <em>?bool</em> [<code>True</code>]: whether to strip the url's protocol.</li>\n<li><strong>strip_trailing_slash</strong> <em>?bool</em> [<code>True</code>]: whether to strip trailing slash.</li>\n<li><strong>unsplit</strong> <em>?bool</em> [<code>True</code>]: whether to return a stringified version of the normalized url or directly the <code>SplitResult</code> instance worked on by the normalization process.</li>\n</ul>\n<hr>\n<h3>strip_protocol</h3>\n<p>Function removing the protocol from the url.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ural</span> <span class=\"kn\">import</span> <span class=\"n\">strip_protocol</span>\n\n<span class=\"n\">strip_protocol</span><span class=\"p\">(</span><span class=\"s1\">'https://www2.lemonde.fr/index.php'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"s1\">'www2.lemonde.fr/index.php'</span>\n</pre>\n<p><em>Arguments</em></p>\n<ul>\n<li><strong>url</strong> <em>string</em>: URL to format.</li>\n</ul>\n<hr>\n<h3>urls_from_html</h3>\n<p>Function returning an iterator over the urls present in the links of given HTML text.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ural</span> <span class=\"kn\">import</span> <span class=\"n\">urls_from_html</span>\n\n<span class=\"n\">html</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"\"&lt;p&gt;Hey! Check this site: &lt;a href=\"https://medialab.sciencespo.fr/\"&gt;m\u00e9dialab&lt;/a&gt;&lt;/p&gt;\"\"\"</span>\n\n<span class=\"k\">for</span> <span class=\"n\">url</span> <span class=\"ow\">in</span> <span class=\"n\">urls_from_html</span><span class=\"p\">(</span><span class=\"n\">html</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"s1\">'https://medialab.sciencespo.fr/'</span>\n</pre>\n<p><em>Arguments</em></p>\n<ul>\n<li><strong>string</strong> <em>string</em>: html string.</li>\n</ul>\n<hr>\n<h3>urls_from_text</h3>\n<p>Function returning an iterator over the urls present in the string argument. Extracts only the urls with a protocol.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ural</span> <span class=\"kn\">import</span> <span class=\"n\">urls_from_text</span>\n\n<span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s2\">\"Hey! Check this site: https://medialab.sciencespo.fr/, it looks really cool. They're developing many tools on https://github.com/\"</span>\n\n<span class=\"k\">for</span> <span class=\"n\">url</span> <span class=\"ow\">in</span> <span class=\"n\">urls_from_text</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"s1\">'https://medialab.sciencespo.fr/'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"s1\">'https://github.com/'</span>\n</pre>\n<p><em>Arguments</em></p>\n<ul>\n<li><strong>string</strong> <em>string</em>: source string.</li>\n</ul>\n<hr>\n<h3>lru.url_to_lru</h3>\n<p>Function converting the given url to a serialized lru.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ural.lru</span> <span class=\"kn\">import</span> <span class=\"n\">url_to_lru</span>\n\n<span class=\"n\">url_to_lru</span><span class=\"p\">(</span><span class=\"s1\">'http://www.lemonde.fr:8000/article/1234/index.html?field=value#2'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"s1\">'s:http|t:8000|h:fr|h:lemonde|h:www|p:article|p:1234|p:index.html|q:field=value|f:2|'</span>\n</pre>\n<p><em>Arguments</em></p>\n<ul>\n<li><strong>url</strong> <em>string</em>: url to convert.</li>\n<li><strong>tld_aware</strong> <em>?bool</em>: whether to acknowledge TLDs when converting.</li>\n</ul>\n<hr>\n<h3>lru.lru_to_url</h3>\n<p>Function converting the given serialized lru or lru stems to a proper url.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ural.lru</span> <span class=\"kn\">import</span> <span class=\"n\">lru_to_url</span>\n\n<span class=\"n\">lru_to_url</span><span class=\"p\">(</span><span class=\"s1\">'s:http|t:8000|h:fr|h:lemonde|h:www|p:article|p:1234|p:index.html|'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"s1\">'http://www.lemonde.fr:8000/article/1234/index.html'</span>\n\n<span class=\"n\">lru_to_url</span><span class=\"p\">([</span><span class=\"s1\">'s:http'</span><span class=\"p\">,</span> <span class=\"s1\">'h:fr'</span><span class=\"p\">,</span> <span class=\"s1\">'h:lemonde'</span><span class=\"p\">,</span> <span class=\"s1\">'h:www'</span><span class=\"p\">,</span> <span class=\"s1\">'p:article'</span><span class=\"p\">,</span> <span class=\"s1\">'p:1234'</span><span class=\"p\">,</span> <span class=\"s1\">'p:index.html'</span><span class=\"p\">])</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"s1\">'http://www.lemonde.fr:8000/article/1234/index.html'</span>\n</pre>\n<hr>\n<h3>lru.lru_stems</h3>\n<p>Function returning url parts in hierarchical order.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ural.lru</span> <span class=\"kn\">import</span> <span class=\"n\">lru_stems</span>\n\n<span class=\"n\">lru_stems</span><span class=\"p\">(</span><span class=\"s1\">'http://www.lemonde.fr:8000/article/1234/index.html?field=value#2'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">[</span><span class=\"s1\">'s:http'</span><span class=\"p\">,</span> <span class=\"s1\">'t:8000'</span><span class=\"p\">,</span> <span class=\"s1\">'h:fr'</span><span class=\"p\">,</span> <span class=\"s1\">'h:lemonde'</span><span class=\"p\">,</span> <span class=\"s1\">'h:www'</span><span class=\"p\">,</span> <span class=\"s1\">'p:article'</span><span class=\"p\">,</span> <span class=\"s1\">'p:1234'</span><span class=\"p\">,</span> <span class=\"s1\">'p:index.html'</span><span class=\"p\">,</span> <span class=\"s1\">'q:field=value'</span><span class=\"p\">,</span> <span class=\"s1\">'f:2'</span><span class=\"p\">]</span>\n</pre>\n<p><em>Arguments</em></p>\n<ul>\n<li><strong>url</strong> <em>string</em>: URL to parse.</li>\n<li><strong>tld_aware</strong> <em>?bool</em>: whether to acknowledge TLDs when stemming.</li>\n</ul>\n<hr>\n<h3>lru.normalized_lru_stems</h3>\n<p>Function normalizing url and returning its parts in hierarchical order.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ural.lru</span> <span class=\"kn\">import</span> <span class=\"n\">normalized_lru_stems</span>\n\n<span class=\"n\">normalized_lru_stems</span><span class=\"p\">(</span><span class=\"s1\">'http://www.lemonde.fr:8000/article/1234/index.html?field=value#2'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">[</span><span class=\"s1\">'t:8000'</span><span class=\"p\">,</span> <span class=\"s1\">'h:fr'</span><span class=\"p\">,</span> <span class=\"s1\">'h:lemonde'</span><span class=\"p\">,</span> <span class=\"s1\">'h:www'</span><span class=\"p\">,</span> <span class=\"s1\">'p:article'</span><span class=\"p\">,</span> <span class=\"s1\">'p:1234'</span><span class=\"p\">,</span> <span class=\"s1\">'q:field=value'</span><span class=\"p\">]</span>\n</pre>\n<p><em>Arguments</em></p>\n<p>This function accepts the same arguments as <a href=\"#normalize_url\" rel=\"nofollow\">normalize_url</a>.</p>\n<hr>\n<h3>lru.serialize_lru</h3>\n<p>Function serializing lru stems to a string.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ural.lru</span> <span class=\"kn\">import</span> <span class=\"n\">serialize_lru</span>\n\n<span class=\"n\">serialize_lru</span><span class=\"p\">([</span><span class=\"s1\">'s:https'</span><span class=\"p\">,</span> <span class=\"s1\">'h:fr'</span><span class=\"p\">,</span> <span class=\"s1\">'h:lemonde'</span><span class=\"p\">])</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"s1\">'s:https|h:fr|h:lemonde|'</span>\n</pre>\n<hr>\n<h3>lru.unserialize_lru</h3>\n<p>Function unserializing stringified lru to a list of stems.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ural.lru</span> <span class=\"kn\">import</span> <span class=\"n\">unserialize_lru</span>\n\n<span class=\"n\">unserialize_lru</span><span class=\"p\">(</span><span class=\"s1\">'s:https|h:fr|h:lemonde|'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">[</span><span class=\"s1\">'s:https'</span><span class=\"p\">,</span> <span class=\"s1\">'h:fr'</span><span class=\"p\">,</span> <span class=\"s1\">'h:lemonde'</span><span class=\"p\">]</span>\n</pre>\n<hr>\n<h3>LRUTrie</h3>\n<p>Class implementing a prefix tree (Trie) storing URLs hierarchically by storing them as LRUs along with some arbitrary metadata. It is very useful when needing to match URLs by longest common prefix.</p>\n<p>Note that this class directly inherits from the <code>phylactery</code> library's <a href=\"https://github.com/Yomguithereal/phylactery/blob/master/phylactery/triedict.py\" rel=\"nofollow\"><code>TrieDict</code></a> so you can also use any of its methods.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ural.lru</span> <span class=\"kn\">import</span> <span class=\"n\">LRUTrie</span>\n\n<span class=\"n\">trie</span> <span class=\"o\">=</span> <span class=\"n\">LRUTrie</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># To respect tlds</span>\n<span class=\"n\">trie</span> <span class=\"o\">=</span> <span class=\"n\">LRUTrie</span><span class=\"p\">(</span><span class=\"n\">tld_aware</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<h4>set</h4>\n<p>Method storing a URL in a LRUTrie along with its metadata.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ural.lru</span> <span class=\"kn\">import</span> <span class=\"n\">LRUTrie</span>\n\n<span class=\"n\">trie</span> <span class=\"o\">=</span> <span class=\"n\">LRUTrie</span><span class=\"p\">()</span>\n<span class=\"n\">trie</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s1\">'http://www.lemonde.fr'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'general press'</span><span class=\"p\">})</span>\n\n<span class=\"n\">trie</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"s1\">'http://www.lemonde.fr'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">{</span><span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'general press'</span><span class=\"p\">}</span>\n</pre>\n<p><em>Arguments</em></p>\n<ul>\n<li><strong>url</strong> <em>string</em>: url to store in the LRUTrie.</li>\n<li><strong>metadata</strong> <em>any</em>: metadata of the url.</li>\n</ul>\n<h4>set_lru</h4>\n<p>Method storing a URL already represented as a LRU or LRU stems along with its metadata.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ural.lru</span> <span class=\"kn\">import</span> <span class=\"n\">LRUTrie</span>\n\n<span class=\"n\">trie</span> <span class=\"o\">=</span> <span class=\"n\">LRUTrie</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Using stems</span>\n<span class=\"n\">trie</span><span class=\"o\">.</span><span class=\"n\">set_lru</span><span class=\"p\">([</span><span class=\"s1\">'s:http'</span><span class=\"p\">,</span> <span class=\"s1\">'h:fr'</span><span class=\"p\">,</span> <span class=\"s1\">'h:lemonde'</span><span class=\"p\">,</span> <span class=\"s1\">'h:www'</span><span class=\"p\">],</span> <span class=\"p\">{</span><span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'general press'</span><span class=\"p\">})</span>\n\n<span class=\"c1\"># Using serialized lru</span>\n<span class=\"n\">trie</span><span class=\"o\">.</span><span class=\"n\">set_lru</span><span class=\"p\">(</span><span class=\"s1\">'s:http|h:fr|h:lemonde|h:www|'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'general_press'</span><span class=\"p\">})</span>\n</pre>\n<p><em>Arguments</em></p>\n<ul>\n<li><strong>lru</strong> <em>string|list</em>: lru to store in the Trie.</li>\n<li><strong>metadata</strong> <em>any</em>: metadata to attach to the lru.</li>\n</ul>\n<h4>match</h4>\n<p>Method returning the metadata attached to the longest prefix match of your query URL. Will return <code>None</code> if no common prefix can be found.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ural.lru</span> <span class=\"kn\">import</span> <span class=\"n\">LRUTrie</span>\n\n<span class=\"n\">trie</span> <span class=\"o\">=</span> <span class=\"n\">LRUTrie</span><span class=\"p\">()</span>\n<span class=\"n\">trie</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s1\">'http://www.lemonde.fr'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'media'</span><span class=\"p\">:</span> <span class=\"s1\">'lemonde'</span><span class=\"p\">})</span>\n\n<span class=\"n\">trie</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"s1\">'http://www.lemonde.fr'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">{</span><span class=\"s1\">'media'</span><span class=\"p\">:</span> <span class=\"s1\">'lemonde'</span><span class=\"p\">}</span>\n<span class=\"n\">trie</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"s1\">'http://www.lemonde.fr/politique'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">{</span><span class=\"s1\">'media'</span><span class=\"p\">:</span> <span class=\"s1\">'lemonde'</span><span class=\"p\">}</span>\n\n<span class=\"n\">trie</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"s1\">'http://www.lefigaro.fr'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kc\">None</span>\n</pre>\n<p><em>Arguments</em></p>\n<ul>\n<li><strong>url</strong> <em>string</em>: url to match in the LRUTrie.</li>\n</ul>\n<h4>match_lru</h4>\n<p>Method returning the metadata attached to the longest prefix match of your query LRU. Will return <code>None</code> if no common prefix can be found.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ural.lru</span> <span class=\"kn\">import</span> <span class=\"n\">LRUTrie</span>\n\n<span class=\"n\">trie</span> <span class=\"o\">=</span> <span class=\"n\">LRUTrie</span><span class=\"p\">()</span>\n<span class=\"n\">trie</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">([</span><span class=\"s1\">'s:http'</span><span class=\"p\">,</span> <span class=\"s1\">'h:fr'</span><span class=\"p\">,</span> <span class=\"s1\">'h:lemonde'</span><span class=\"p\">,</span> <span class=\"s1\">'h:www'</span><span class=\"p\">],</span> <span class=\"p\">{</span><span class=\"s1\">'media'</span><span class=\"p\">:</span> <span class=\"s1\">'lemonde'</span><span class=\"p\">})</span>\n\n<span class=\"n\">trie</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">([</span><span class=\"s1\">'s:http'</span><span class=\"p\">,</span> <span class=\"s1\">'h:fr'</span><span class=\"p\">,</span> <span class=\"s1\">'h:lemonde'</span><span class=\"p\">,</span> <span class=\"s1\">'h:www'</span><span class=\"p\">])</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">{</span><span class=\"s1\">'media'</span><span class=\"p\">:</span> <span class=\"s1\">'lemonde'</span><span class=\"p\">}</span>\n<span class=\"n\">trie</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"s1\">'s:http|h:fr|h:lemonde|h:www|p:politique|'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">{</span><span class=\"s1\">'media'</span><span class=\"p\">:</span> <span class=\"s1\">'lemonde'</span><span class=\"p\">}</span>\n\n<span class=\"n\">trie</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">([</span><span class=\"s1\">'s:http'</span><span class=\"p\">,</span> <span class=\"s1\">'h:fr'</span><span class=\"p\">,</span> <span class=\"s1\">'h:lefigaro'</span><span class=\"p\">,</span> <span class=\"s1\">'h:www'</span><span class=\"p\">])</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kc\">None</span>\n</pre>\n<p><em>Arguments</em></p>\n<ul>\n<li><strong>lru</strong> <em>string|list</em>: lru to match in the LRUTrie.</li>\n</ul>\n<hr>\n<h3>NormalizedLRUTrie</h3>\n<p>The <code>NormalizedLRUTrie</code> is nearly identical to the standard <a href=\"#LRUTrie\" rel=\"nofollow\"><code>LRUTrie</code></a> except that it normalized urls given to it before attempting any operation. It is a good choice if you want to avoid prefix queries issues related to <code>http</code> vs <code>https</code> or <code>www</code> shenanigans, for instance.</p>\n<p>To tweak its normalization, you can give to <code>NormalizedLRUTrie</code> the same options you would give to <a href=\"#normalize_url\" rel=\"nofollow\"><code>normalize_url</code></a>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ural.lru</span> <span class=\"kn\">import</span> <span class=\"n\">NormalizedLRUTrie</span>\n\n<span class=\"n\">trie</span> <span class=\"o\">=</span> <span class=\"n\">NormalizedLRUTrie</span><span class=\"p\">(</span><span class=\"n\">normalize_amp</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n<p>Note that there are still some differences between the <code>LRUTrie</code> and the <code>NormalizedLRUTrie</code>:</p>\n<ol>\n<li>The <code>NormalizedLRUTrie</code> cannot be TLD aware.</li>\n<li>The <code>NormalizedLRUTrie</code> does not have the <code>#.set_lru</code> and <code>#.match_lru</code>  methods.</li>\n</ol>\n<hr>\n<h3>Facebook</h3>\n<h4>is_facebook_url</h4>\n<p>Function returning whether given url is from Facebook or not.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ural.facebook</span> <span class=\"kn\">import</span> <span class=\"n\">is_facebook_url</span>\n\n<span class=\"n\">is_facebook_url</span><span class=\"p\">(</span><span class=\"s1\">'http://www.facebook.com/post/974583586343'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kc\">True</span>\n\n<span class=\"n\">is_facebook_url</span><span class=\"p\">(</span><span class=\"s1\">'https://fb.me/846748464'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kc\">True</span>\n\n<span class=\"n\">is_facebook_url</span><span class=\"p\">(</span><span class=\"s1\">'https://www.lemonde.fr'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kc\">False</span>\n</pre>\n<h4>is_facebook_post_url</h4>\n<p>Function returning whether the given url is a Facebook post or not.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ural.facebook</span> <span class=\"kn\">import</span> <span class=\"n\">is_facebook_post_url</span>\n\n<span class=\"n\">is_facebook_post_url</span><span class=\"p\">(</span><span class=\"s1\">'http://www.facebook.com/post/974583586343'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kc\">True</span>\n\n<span class=\"n\">is_facebook_post_url</span><span class=\"p\">(</span><span class=\"s1\">'http://www.facebook.com'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kc\">False</span>\n\n<span class=\"n\">is_facebook_post_url</span><span class=\"p\">(</span><span class=\"s1\">'https://www.lemonde.fr'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kc\">False</span>\n</pre>\n<h4>is_facebook_link</h4>\n<p>Function returning whether the given url is a Facebook redirection link.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ural.facebook</span> <span class=\"kn\">import</span> <span class=\"n\">is_facebook_link</span>\n\n<span class=\"n\">is_facebook_link</span><span class=\"p\">(</span><span class=\"s1\">'https://l.facebook.com/l.php?u=http%3A</span><span class=\"si\">%2F%2F</span><span class=\"s1\">www.chaos-controle.com</span><span class=\"si\">%2F</span><span class=\"s1\">archives</span><span class=\"si\">%2F</span><span class=\"s1\">2013</span><span class=\"si\">%2F</span><span class=\"s1\">10</span><span class=\"si\">%2F</span><span class=\"s1\">14</span><span class=\"si\">%2F</span><span class=\"s1\">28176300.html&amp;amp;h=AT0iUqJpUTMzHAH8HAXwZ11p8P3Z-SrY90wIXZhcjMnxBTHMiau8Fv1hvz00ZezRegqmF86SczyUXx3Gzdt_MdFH-I4CwHIXKKU9L6w522xwOqkOvLAylxojGEwrp341uC-GlVyGE2N7XwTPK9cpP0mQ8PIrWh8Qj2gHIIR08Js0mUr7G8Qe9fx66uYcfnNfTTF1xi0Us8gTo4fOZxAgidGWXsdgtU_OdvQqyEm97oHzKbWfXjkhsrzbtb8ZNMDwCP5099IMcKRD8Hi5H7W3vwh9hd_JlRgm5Z074epD_mGAeoEATE_QUVNTxO0SHO4XNn2Z7LgBamvevu1ENBcuyuSOYA0BsY2cx8mPWJ9t44tQcnmyQhBlYm_YmszDaQx9IfVP26PRqhsTLz-kZzv0DGMiJFU78LVWVPc9QSw2f9mA5JYWr29w12xJJ5XGQ6DhJxDMWRnLdG8Tnd7gZKCaRdqDER1jkO72u75-o4YuV3CLh4j-_4u0fnHSzHdVD8mxr9pNEgu8rvJF1E2H3-XbzA6F2wMQtFCejH8MBakzYtTGNvHSexSiKphE04Ci1Z23nBjCZFsgNXwL3wbIXWfHjh2LCKyihQauYsnvxp6fyioStJSGgyA9GGEswizHa20lucQF0S0F8H9-'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kc\">True</span>\n\n<span class=\"n\">is_facebook_link</span><span class=\"p\">(</span><span class=\"s1\">'https://lemonde.fr'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kc\">False</span>\n</pre>\n<h4>convert_facebook_url_to_mobile</h4>\n<p>Function returning the mobile version of the given Facebook url. Will raise an exception if a non-Facebook url is given.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ural.facebook</span> <span class=\"kn\">import</span> <span class=\"n\">convert_facebook_url_to_mobile</span>\n\n<span class=\"n\">convert_facebook_url_to_mobile</span><span class=\"p\">(</span><span class=\"s1\">'http://www.facebook.com/post/974583586343'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"s1\">'http://m.facebook.com/post/974583586343'</span>\n</pre>\n<h4>parse_facebook_url</h4>\n<p>Function parsing the given Facebook url.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ural.facebook</span> <span class=\"kn\">import</span> <span class=\"n\">parse_facebook_url</span>\n\n<span class=\"c1\"># Importing related classes if you need to perform tests</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ural.facebook</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n  <span class=\"n\">FacebookHandle</span><span class=\"p\">,</span>\n  <span class=\"n\">FacebookUser</span><span class=\"p\">,</span>\n  <span class=\"n\">FacebookPost</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">parse_facebook_url</span><span class=\"p\">(</span><span class=\"s1\">'https://www.facebook.com/people/Sophia-Aman/102016783928989'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">FacebookUser</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">'102016783928989'</span><span class=\"p\">)</span>\n\n<span class=\"n\">parse_facebook_url</span><span class=\"p\">(</span><span class=\"s1\">'/annelaure.rivolu?rc=p&amp;__tn__=R'</span><span class=\"p\">,</span> <span class=\"n\">allow_relative_urls</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">FacebookHandle</span><span class=\"p\">(</span><span class=\"n\">handle</span><span class=\"o\">=</span><span class=\"s1\">'annelaure.rivolu'</span><span class=\"p\">)</span>\n\n<span class=\"n\">parse_facebook_url</span><span class=\"p\">(</span><span class=\"s1\">'https://lemonde.fr'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kc\">None</span>\n</pre>\n<h4>extract_url_from_facebook_link</h4>\n<p>Function extracting target url from a Facebook redirection link.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ural.facebook</span> <span class=\"kn\">import</span> <span class=\"n\">extract_url_from_facebook_link</span>\n\n<span class=\"n\">extract_url_from_facebook_link</span><span class=\"p\">(</span><span class=\"s1\">'https://l.facebook.com/l.php?u=http%3A</span><span class=\"si\">%2F%2F</span><span class=\"s1\">www.chaos-controle.com</span><span class=\"si\">%2F</span><span class=\"s1\">archives</span><span class=\"si\">%2F</span><span class=\"s1\">2013</span><span class=\"si\">%2F</span><span class=\"s1\">10</span><span class=\"si\">%2F</span><span class=\"s1\">14</span><span class=\"si\">%2F</span><span class=\"s1\">28176300.html&amp;amp;h=AT0iUqJpUTMzHAH8HAXwZ11p8P3Z-SrY90wIXZhcjMnxBTHMiau8Fv1hvz00ZezRegqmF86SczyUXx3Gzdt_MdFH-I4CwHIXKKU9L6w522xwOqkOvLAylxojGEwrp341uC-GlVyGE2N7XwTPK9cpP0mQ8PIrWh8Qj2gHIIR08Js0mUr7G8Qe9fx66uYcfnNfTTF1xi0Us8gTo4fOZxAgidGWXsdgtU_OdvQqyEm97oHzKbWfXjkhsrzbtb8ZNMDwCP5099IMcKRD8Hi5H7W3vwh9hd_JlRgm5Z074epD_mGAeoEATE_QUVNTxO0SHO4XNn2Z7LgBamvevu1ENBcuyuSOYA0BsY2cx8mPWJ9t44tQcnmyQhBlYm_YmszDaQx9IfVP26PRqhsTLz-kZzv0DGMiJFU78LVWVPc9QSw2f9mA5JYWr29w12xJJ5XGQ6DhJxDMWRnLdG8Tnd7gZKCaRdqDER1jkO72u75-o4YuV3CLh4j-_4u0fnHSzHdVD8mxr9pNEgu8rvJF1E2H3-XbzA6F2wMQtFCejH8MBakzYtTGNvHSexSiKphE04Ci1Z23nBjCZFsgNXwL3wbIXWfHjh2LCKyihQauYsnvxp6fyioStJSGgyA9GGEswizHa20lucQF0S0F8H9-'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"s1\">'http://www.chaos-controle.com/archives/2013/10/14/28176300.html'</span>\n\n<span class=\"n\">extract_url_from_facebook_link</span><span class=\"p\">(</span><span class=\"s1\">'http://lemonde.fr'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kc\">None</span>\n</pre>\n<hr>\n<h3>Google</h3>\n<h4>is_amp_url</h4>\n<p>Returns whether the given url is probably a Google AMP url.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ural.google</span> <span class=\"kn\">import</span> <span class=\"n\">is_amp_url</span>\n\n<span class=\"n\">is_amp_url</span><span class=\"p\">(</span><span class=\"s1\">'http://www.europe1.fr/sante/les-onze-vaccins.amp'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kc\">True</span>\n\n<span class=\"n\">is_amp_url</span><span class=\"p\">(</span><span class=\"s1\">'https://www.lemonde.fr'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kc\">False</span>\n</pre>\n<h4>is_google_link</h4>\n<p>Returns whether the given url is a Google search link.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ural.google</span> <span class=\"kn\">import</span> <span class=\"n\">is_google_link</span>\n\n<span class=\"n\">is_google_link</span><span class=\"p\">(</span><span class=\"s1\">'https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=4&amp;cad=rja&amp;uact=8&amp;ved=2ahUKEwjp8Lih_LnmAhWQlxQKHVTmCJYQFjADegQIARAB&amp;url=http%3A</span><span class=\"si\">%2F%2F</span><span class=\"s1\">www.mon-ip.com</span><span class=\"si\">%2F</span><span class=\"s1\">&amp;usg=AOvVaw0sfeZJyVtUS2smoyMlJmes'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kc\">True</span>\n\n<span class=\"n\">is_google_link</span><span class=\"p\">(</span><span class=\"s1\">'https://www.lemonde.fr'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kc\">False</span>\n</pre>\n<h4>extract_url_from_google_link</h4>\n<p>Extracts the url from the given Google search link. This is useful to \"resolve\" the links scraped from Google's search results.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ural.google</span> <span class=\"kn\">import</span> <span class=\"n\">extract_url_from_google_link</span>\n\n<span class=\"n\">extract_url_from_google_link</span><span class=\"p\">(</span><span class=\"s1\">'https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;cad=rja&amp;uact=8&amp;ved=2ahUKEwicu4K-rZzmAhWOEBQKHRNWA08QFjAAegQIARAB&amp;url=https%3A</span><span class=\"si\">%2F%2F</span><span class=\"s1\">www.facebook.com</span><span class=\"si\">%2F</span><span class=\"s1\">ieff.ogbeide&amp;usg=AOvVaw0vrBVCiIHUr5pncjeLpPUp'</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"s1\">'https://www.facebook.com/ieff.ogbeide'</span>\n</pre>\n<hr>\n<h3>Youtube</h3>\n<h4>is_youtube_url</h4>\n<p>Returns whether the given url is from Youtube.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ural.youtube</span> <span class=\"kn\">import</span> <span class=\"n\">is_youtube_url</span>\n\n<span class=\"n\">is_youtube_url</span><span class=\"p\">(</span><span class=\"s1\">'https://lemonde.fr'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kc\">False</span>\n\n<span class=\"n\">is_youtube_url</span><span class=\"p\">(</span><span class=\"s1\">'https://www.youtube.com/watch?v=otRTOE9i51o'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kc\">True</span>\n\n<span class=\"n\">is_youtube_url</span><span class=\"p\">(</span><span class=\"s1\">'https://youtu.be/otRTOE9i51o)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kc\">True</span>\n</pre>\n<h4>is_youtube_video_id</h4>\n<p>Returns whether the given string is a formally valid Youtube id. Note that it won't validate the fact that this id actually refers to an existing video or not. You will need to call Youtube servers for that.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ural.youtube</span> <span class=\"kn\">import</span> <span class=\"n\">is_youtube_video_id</span>\n\n<span class=\"n\">is_youtube_video_id</span><span class=\"p\">(</span><span class=\"s1\">'otRTOE9i51o'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kc\">True</span>\n\n<span class=\"n\">is_youtube_video_id</span><span class=\"p\">(</span><span class=\"s1\">'bDYTYET'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kc\">False</span>\n</pre>\n<h4>parse_youtube_url</h4>\n<p>Returns parsed information about the given youtube url: either about the linked video, user or channel. If the url is an invalid Youtube url or if not a Youtube url, the function returns <code>None</code>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ural.youtube</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n  <span class=\"n\">parse_youtube_url</span><span class=\"p\">,</span>\n\n  <span class=\"c1\"># You can also import the named tuples if you need them</span>\n  <span class=\"n\">YoutubeVideo</span><span class=\"p\">,</span>\n  <span class=\"n\">YoutubeUser</span><span class=\"p\">,</span>\n  <span class=\"n\">YoutubeChannel</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">parse_youtube_url</span><span class=\"p\">(</span><span class=\"s1\">'https://www.youtube.com/watch?v=otRTOE9i51o'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">YoutubeVideo</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">'otRTOE9i51o'</span><span class=\"p\">)</span>\n\n<span class=\"n\">parse_youtube_url</span><span class=\"p\">(</span><span class=\"s1\">'https://lemonde.fr'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kc\">None</span>\n\n<span class=\"n\">parse_youtube_url</span><span class=\"p\">(</span><span class=\"s1\">'http://www.youtube.com/channel/UCWvUxN9LAjJ-sTc5JJ3gEyA/videos'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">YoutubeChannel</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">'UCWvUxN9LAjJ-sTc5JJ3gEyA'</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n\n<span class=\"n\">parse_youtube_url</span><span class=\"p\">(</span><span class=\"s1\">'http://www.youtube.com/user/ojimfrance'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">YoutubeUser</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'ojimfrance'</span><span class=\"p\">)</span>\n\n<span class=\"n\">parse_youtube_url</span><span class=\"p\">(</span><span class=\"s1\">'https://www.youtube.com/taranisnews'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">YoutubeChannel</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'taranisnews'</span><span class=\"p\">)</span>\n</pre>\n<p><em>Arguments</em></p>\n<ul>\n<li><strong>url</strong> <em>str</em>: Youtube url to parse.</li>\n<li><strong>fix_common_mistakes</strong> <em>bool</em> [<code>True</code>]: Whether to fix common mistakes that can be found in Youtube urls as you can find them when crawling the web.</li>\n</ul>\n<h4>extract_video_id_from_youtube_url</h4>\n<p>Return a video id from the given Youtube url or <code>None</code> if we could not find one.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ural.youtube</span> <span class=\"kn\">import</span> <span class=\"n\">extract_video_id_from_youtube_url</span>\n\n<span class=\"n\">extract_video_id_from_youtube_url</span><span class=\"p\">(</span><span class=\"s1\">'https://www.youtube.com/watch?v=otRTOE9i51o'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"s1\">'otRTOE9i51o'</span>\n\n<span class=\"n\">extract_video_id_from_youtube_url</span><span class=\"p\">(</span><span class=\"s1\">'https://lemonde.fr'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kc\">None</span>\n\n<span class=\"n\">extract_video_id_from_youtube_url</span><span class=\"p\">(</span><span class=\"s1\">'http://youtu.be/afa-5HQHiAs'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"s1\">'afa-5HQHiAs'</span>\n</pre>\n<h4>normalize_youtube_url</h4>\n<p>Returns a normalized version of the given Youtube url. It will normalize video, user and channel urls so you can easily match them.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ural.youtube</span> <span class=\"kn\">import</span> <span class=\"n\">normalize_youtube_url</span>\n\n<span class=\"n\">normalize_youtube_url</span><span class=\"p\">(</span><span class=\"s1\">'https://www.youtube.com/watch?v=otRTOE9i51o'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"s1\">'https://www.youtube.com/watch?v=otRTOE9i51o'</span>\n\n<span class=\"n\">normalize_youtube_url</span><span class=\"p\">(</span><span class=\"s1\">'http://youtu.be/afa-5HQHiAs'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"s1\">'https://www.youtube.com/watch?v=afa-5HQHiAs'</span>\n</pre>\n<hr>\n<h2>Miscellaneous</h2>\n<h3 id=\"lru-explanation\">About LRUs</h3>\n<p><em>TL;DR</em>: a LRU is a hierarchical reordering of a URL so that one can perform meaningful prefix queries on URLs.</p>\n<p>If you observe many URLs, you will quickly notice that they are not written in sound hierarchical order. In this URL, for instance:</p>\n<pre><code>http://business.lemonde.fr/articles/money.html?id=34#content\n</code></pre>\n<p>Some parts, such as the subdomain, are written in an \"incorrect order\". And this is fine, really, this is how URLs always worked.</p>\n<p>But if what you really want is to match URLs, you will need to reorder them so that their order closely reflects the hierarchy of their targeted content. And this is exactly what LRUs are (that and also a bad pun on URL, since a LRU is basically a \"reversed\" URL).</p>\n<p>Now look how the beforementioned URL could be splitted into LRU stems:</p>\n<pre><span class=\"p\">[</span>\n  <span class=\"s1\">'s:http'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'h:fr'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'h:lemonde'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'h:business'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'p:articles'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'p:money.html'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'q:id=34'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'f:content'</span>\n<span class=\"p\">]</span>\n</pre>\n<p>And typically, this list of stems will be serialized thusly:</p>\n<pre><code>s:http|h:fr|h:lemonde|h:business|p:articles|p:money.html|q:id=34|f:content|\n</code></pre>\n<p>The trailing slash is added so that serialized LRUs can be <em>prefix-free</em>.</p>\n\n          </div>"}, "last_serial": 7172764, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "8d40932b659ee3dca96c2550f4dbea7d", "sha256": "00cb8cbf8682c671216b7caf5fc1c52a4a8f89be40b8bacfcc46504c7725db2b"}, "downloads": -1, "filename": "ural-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "8d40932b659ee3dca96c2550f4dbea7d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 2995, "upload_time": "2018-05-18T13:51:01", "upload_time_iso_8601": "2018-05-18T13:51:01.544442Z", "url": "https://files.pythonhosted.org/packages/28/9e/07421244ca603ff5089752e073816d9c6ce2a6098e64470246e68cbd116c/ural-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "86d5761148eca0378164033599844a7f", "sha256": "c1109a6c6e2d4628ffb07627e0478f1f64120ea5d4bb2e1e00bd410102539eab"}, "downloads": -1, "filename": "ural-0.0.1.tar.gz", "has_sig": false, "md5_digest": "86d5761148eca0378164033599844a7f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 2356, "upload_time": "2018-05-18T13:51:03", "upload_time_iso_8601": "2018-05-18T13:51:03.165634Z", "url": "https://files.pythonhosted.org/packages/84/00/33c865c3b3dba6c71892ee6819b9ed9a0d54141f07b1868018f1bb6899b0/ural-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "12e02e52a801676d42dfd006a8f3c5dc", "sha256": "6fcc603d6103929603229c47364ce9cd4fa6758285fa389cd79b007864aed6fc"}, "downloads": -1, "filename": "ural-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "12e02e52a801676d42dfd006a8f3c5dc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 3130, "upload_time": "2018-05-29T09:39:15", "upload_time_iso_8601": "2018-05-29T09:39:15.446058Z", "url": "https://files.pythonhosted.org/packages/31/c6/51d78f1fad0c7b85b65b5479d5cc28bc9260015c2ec6f74bb8eb259d21a4/ural-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "65011d52a763c1beb3f4742f66d7ee6a", "sha256": "7c4c7a2b3839420c2e8e561a7cfff12399d7bb686f7adaf7750a1d934d8017ac"}, "downloads": -1, "filename": "ural-0.0.2.tar.gz", "has_sig": false, "md5_digest": "65011d52a763c1beb3f4742f66d7ee6a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 2474, "upload_time": "2018-05-29T09:39:16", "upload_time_iso_8601": "2018-05-29T09:39:16.670334Z", "url": "https://files.pythonhosted.org/packages/8a/ec/64b8975bb09fccb5c6d798f9afb8600ff2c2a4a2626e613a0ca1e0261f0e/ural-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "4c911568f3dda84a970186b187ee7a2d", "sha256": "1f7201ab3526d3d634cc7506db739999648976b59bfa58b8ea805459a784bbd2"}, "downloads": -1, "filename": "ural-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "4c911568f3dda84a970186b187ee7a2d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 3271, "upload_time": "2018-06-08T12:53:19", "upload_time_iso_8601": "2018-06-08T12:53:19.271661Z", "url": "https://files.pythonhosted.org/packages/1e/99/3f7e0f63fabf2f3d73b4ddc2cd42fe21ccf024a99d5c218e8186f7af12e0/ural-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b4b49b243f0ea6b407ec1a71ba03b14d", "sha256": "8f06c75227eeeeb8542ad2abfb60dab947374ec7f4f0b2cc4a6077d930924291"}, "downloads": -1, "filename": "ural-0.0.3.tar.gz", "has_sig": false, "md5_digest": "b4b49b243f0ea6b407ec1a71ba03b14d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 2613, "upload_time": "2018-06-08T12:53:20", "upload_time_iso_8601": "2018-06-08T12:53:20.368323Z", "url": "https://files.pythonhosted.org/packages/60/9f/d85d58abb4f36e6deb3b1b258efc6a11e1471aecfbeffdb6b0395267b576/ural-0.0.3.tar.gz", "yanked": false}], "0.10.0": [{"comment_text": "", "digests": {"md5": "78d4ec209f3961334572a708c1bb3ca9", "sha256": "f0b1abf09967a593df6470ccf327c2cfd2b355ff82c8e85de813f5303b73d3de"}, "downloads": -1, "filename": "ural-0.10.0-py3-none-any.whl", "has_sig": false, "md5_digest": "78d4ec209f3961334572a708c1bb3ca9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 17488, "upload_time": "2019-10-02T13:37:05", "upload_time_iso_8601": "2019-10-02T13:37:05.498333Z", "url": "https://files.pythonhosted.org/packages/c9/de/096e59e5cb5b1681320248caafa1c4d63d5d377eab1b82e38b88c5b1cd77/ural-0.10.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c33254e2fdab94c43341b64ad68d493b", "sha256": "cfd39f4c5d41883dcab8d9c62bc528193ec9573d7593a75aee7e869749971222"}, "downloads": -1, "filename": "ural-0.10.0.tar.gz", "has_sig": false, "md5_digest": "c33254e2fdab94c43341b64ad68d493b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 12982, "upload_time": "2019-10-02T13:37:07", "upload_time_iso_8601": "2019-10-02T13:37:07.382805Z", "url": "https://files.pythonhosted.org/packages/3b/12/0ec53789bb92cce307f0ec3950cb800485d48ca34c8e137679a450358482/ural-0.10.0.tar.gz", "yanked": false}], "0.10.1": [{"comment_text": "", "digests": {"md5": "8e44c48c8cee35d6884c55458dd3c3ef", "sha256": "789fe2c64ce6bedfb09452708a9f1f75d2e7fd490a899472763e45e8a912774f"}, "downloads": -1, "filename": "ural-0.10.1-py3-none-any.whl", "has_sig": false, "md5_digest": "8e44c48c8cee35d6884c55458dd3c3ef", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 18029, "upload_time": "2019-10-02T14:39:41", "upload_time_iso_8601": "2019-10-02T14:39:41.809325Z", "url": "https://files.pythonhosted.org/packages/91/25/aa0e930c4de9c7b76b5f216da38602c27055eaf4190336111e00522854c5/ural-0.10.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1dc408683a452d5666fa2bb02b60745c", "sha256": "8d8a7333b9248d0e7c672649f0a6dd980f6cb60971000bcf9b6d1dd193674d52"}, "downloads": -1, "filename": "ural-0.10.1.tar.gz", "has_sig": false, "md5_digest": "1dc408683a452d5666fa2bb02b60745c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 13481, "upload_time": "2019-10-02T14:39:43", "upload_time_iso_8601": "2019-10-02T14:39:43.863220Z", "url": "https://files.pythonhosted.org/packages/d5/11/9d658ebae288c3e1da2a475801a49bee9008a21543a31b0dce95c4a543b0/ural-0.10.1.tar.gz", "yanked": false}], "0.11.0": [{"comment_text": "", "digests": {"md5": "5259d8c88a593e7dbddced0db79f2c60", "sha256": "6d327e980ff50c1e78d41c14d40aa23a2c1b6fee8f105f332432ebd5489740fe"}, "downloads": -1, "filename": "ural-0.11.0-py3-none-any.whl", "has_sig": false, "md5_digest": "5259d8c88a593e7dbddced0db79f2c60", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 18230, "upload_time": "2019-10-06T10:38:19", "upload_time_iso_8601": "2019-10-06T10:38:19.873989Z", "url": "https://files.pythonhosted.org/packages/f8/1c/39faaf143a0b2ee19525f910c0a78e1883ea3f3a34e7ddf64b0265257042/ural-0.11.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cf1125bc21910fd31f95d86b38017bb5", "sha256": "7e75f391a1207150a047febb7e0db96f114d6e8c4e5fbe2ca04694f315896011"}, "downloads": -1, "filename": "ural-0.11.0.tar.gz", "has_sig": false, "md5_digest": "cf1125bc21910fd31f95d86b38017bb5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 13344, "upload_time": "2019-10-06T10:38:22", "upload_time_iso_8601": "2019-10-06T10:38:22.195795Z", "url": "https://files.pythonhosted.org/packages/8c/e6/9c3d760e7b2eaf082cd26af99c8c315586dfde39f394d8871449bb482f82/ural-0.11.0.tar.gz", "yanked": false}], "0.12.0": [{"comment_text": "", "digests": {"md5": "37cf282157126ae8a55d49840bfabceb", "sha256": "1b2f4dc79060120f2d46f60d76a5aa13795f75cfa4c4d52cfc3fbc7f72a77f38"}, "downloads": -1, "filename": "ural-0.12.0-py3-none-any.whl", "has_sig": false, "md5_digest": "37cf282157126ae8a55d49840bfabceb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 14725, "upload_time": "2019-10-15T20:39:15", "upload_time_iso_8601": "2019-10-15T20:39:15.132571Z", "url": "https://files.pythonhosted.org/packages/7e/56/babb25febb75ec0000e656407ee6c4e510479f5f8fc967b02a950ab046b2/ural-0.12.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "590c5c69af53e756ae0121013156fa10", "sha256": "2e8076cbbc86f5d42aeeaa1ecdb69dc2926ba90880c91766ff0b79a4a5bd0005"}, "downloads": -1, "filename": "ural-0.12.0.tar.gz", "has_sig": false, "md5_digest": "590c5c69af53e756ae0121013156fa10", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 11208, "upload_time": "2019-10-15T20:39:18", "upload_time_iso_8601": "2019-10-15T20:39:18.340521Z", "url": "https://files.pythonhosted.org/packages/52/83/ef96a9c232eb65c7819e4489c75e22966f4655235882b10af3723a9c4a08/ural-0.12.0.tar.gz", "yanked": false}], "0.12.1": [{"comment_text": "", "digests": {"md5": "35915716f530913988649d46c82ce259", "sha256": "3cdb6105d55aed8c3d11382e9856593c6435593e143796de781de656a8a49057"}, "downloads": -1, "filename": "ural-0.12.1-py3-none-any.whl", "has_sig": false, "md5_digest": "35915716f530913988649d46c82ce259", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 14891, "upload_time": "2019-10-18T12:47:31", "upload_time_iso_8601": "2019-10-18T12:47:31.657264Z", "url": "https://files.pythonhosted.org/packages/47/40/f9f761a9bc08be25950ee92fcb4d32605651154ce7554eebe6b9fc7e0780/ural-0.12.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fe811ca1965efbb35b7f727cbde721f9", "sha256": "83318baae2f9ec483547691c85b60012a2f7e1e4d32586aa5c4df42a53145245"}, "downloads": -1, "filename": "ural-0.12.1.tar.gz", "has_sig": false, "md5_digest": "fe811ca1965efbb35b7f727cbde721f9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 11896, "upload_time": "2019-10-18T12:47:33", "upload_time_iso_8601": "2019-10-18T12:47:33.644435Z", "url": "https://files.pythonhosted.org/packages/b1/59/db051a3eb0d275aff51441dc02028c2222ef1099dc234be1af0974b921a0/ural-0.12.1.tar.gz", "yanked": false}], "0.13.0": [{"comment_text": "", "digests": {"md5": "552b7945c6aa8b382f551c72411de929", "sha256": "f77352ec5a4e20fe8d3cb9b1fa7149b7ad0bb75aad7d205c27f5b1c7b5531976"}, "downloads": -1, "filename": "ural-0.13.0-py3-none-any.whl", "has_sig": false, "md5_digest": "552b7945c6aa8b382f551c72411de929", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 17939, "upload_time": "2019-11-08T15:07:21", "upload_time_iso_8601": "2019-11-08T15:07:21.220057Z", "url": "https://files.pythonhosted.org/packages/4e/f8/0c6012137d630a2b6e851c1a81a383b6db2120ace1a6c11cec1a6a180285/ural-0.13.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "75a8202cf6dba443f60969ac87ddb0e2", "sha256": "20d82c614ef49a2ef1ac75d5b01e7857347e5ec8e803cea0320c056283cca9fb"}, "downloads": -1, "filename": "ural-0.13.0.tar.gz", "has_sig": false, "md5_digest": "75a8202cf6dba443f60969ac87ddb0e2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 16483, "upload_time": "2019-11-08T15:07:23", "upload_time_iso_8601": "2019-11-08T15:07:23.095139Z", "url": "https://files.pythonhosted.org/packages/74/1f/cb1c5d80aa600042bc5407486b1c8b471a5e78922f7c73bc06fac56eacac/ural-0.13.0.tar.gz", "yanked": false}], "0.14.0": [{"comment_text": "", "digests": {"md5": "870fe17eefd8c2f2ca2a41bd1c50235e", "sha256": "7f91352397f6d0608f0935d614be2bd7b1e2ce168ed8681c6548fb175294a32a"}, "downloads": -1, "filename": "ural-0.14.0-py3-none-any.whl", "has_sig": false, "md5_digest": "870fe17eefd8c2f2ca2a41bd1c50235e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 18317, "upload_time": "2019-11-13T14:03:47", "upload_time_iso_8601": "2019-11-13T14:03:47.437094Z", "url": "https://files.pythonhosted.org/packages/54/b7/e695029cb340f4d0080c6c4c75ff5c26740a44fc1ce98bc1da7ae1560485/ural-0.14.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4b7103e62bdb0d9008dbf6556da379ee", "sha256": "56a4a9bd2409e2357beeeeb9bf4f5ead198e4c79ba68802f5476cd6217b2e7a4"}, "downloads": -1, "filename": "ural-0.14.0.tar.gz", "has_sig": false, "md5_digest": "4b7103e62bdb0d9008dbf6556da379ee", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 16999, "upload_time": "2019-11-13T14:03:49", "upload_time_iso_8601": "2019-11-13T14:03:49.316481Z", "url": "https://files.pythonhosted.org/packages/52/9a/0387993dea3f573927da286cbb24c3a950c15aa5fad016d31e5ff1dd5bc0/ural-0.14.0.tar.gz", "yanked": false}], "0.15.0": [{"comment_text": "", "digests": {"md5": "0395b5812bdf4fa90e43392731d859a4", "sha256": "aced1758e645bc753011b49a38502e0f774dc632cf0e928d0400129869d31320"}, "downloads": -1, "filename": "ural-0.15.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0395b5812bdf4fa90e43392731d859a4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 18875, "upload_time": "2019-11-15T10:40:22", "upload_time_iso_8601": "2019-11-15T10:40:22.186893Z", "url": "https://files.pythonhosted.org/packages/f0/ca/6e7c688f5ce032aca163eff3e0033a3523815987d2b9c5b6882f41783730/ural-0.15.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c0ce0c0df97f58325d87c870662c62b7", "sha256": "ae25285900263d1c33cc5b92a2d9f3bd3b5398e7acc92d48fb9dbb459fc007ec"}, "downloads": -1, "filename": "ural-0.15.0.tar.gz", "has_sig": false, "md5_digest": "c0ce0c0df97f58325d87c870662c62b7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 18029, "upload_time": "2019-11-15T10:40:23", "upload_time_iso_8601": "2019-11-15T10:40:23.961859Z", "url": "https://files.pythonhosted.org/packages/cf/3e/7c6ea2a44936cee11ddc30d3c1d62abdb845ca4c07b481e3dbd19d8f7a8a/ural-0.15.0.tar.gz", "yanked": false}], "0.16.0": [{"comment_text": "", "digests": {"md5": "ccfd3c4ba3d12e9391b817ec76075d43", "sha256": "7571a3fdc8d7e8e0dbb81b8f13d6dfc59c4b6d20327d3a65658beba47d18c653"}, "downloads": -1, "filename": "ural-0.16.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ccfd3c4ba3d12e9391b817ec76075d43", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 24665, "upload_time": "2019-12-04T16:12:44", "upload_time_iso_8601": "2019-12-04T16:12:44.104180Z", "url": "https://files.pythonhosted.org/packages/60/ea/90d4ba3a46d81491295353a09d4d62181b172ed87f0a030bf1765fa683b7/ural-0.16.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cb8cd63079c2eb225accc59a4dd08cf0", "sha256": "6f472d0a1bb6cfa1d37011a7395c32316178bb56c1fc4ea5c0e52338d47afb26"}, "downloads": -1, "filename": "ural-0.16.0.tar.gz", "has_sig": false, "md5_digest": "cb8cd63079c2eb225accc59a4dd08cf0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 22837, "upload_time": "2019-12-04T16:12:45", "upload_time_iso_8601": "2019-12-04T16:12:45.932005Z", "url": "https://files.pythonhosted.org/packages/50/ca/53879ab76d2ede85a9ff952040a5cfe3cabbaf683ec11ba5ff5bd24b46e6/ural-0.16.0.tar.gz", "yanked": false}], "0.17.0": [{"comment_text": "", "digests": {"md5": "7d39234852d6e25497a936cc1c7bb3cc", "sha256": "9ac25319794abf682e52a967933f06335e819b4127b4551b04d7476d270cea79"}, "downloads": -1, "filename": "ural-0.17.0-py3-none-any.whl", "has_sig": false, "md5_digest": "7d39234852d6e25497a936cc1c7bb3cc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 25091, "upload_time": "2019-12-04T17:45:18", "upload_time_iso_8601": "2019-12-04T17:45:18.422507Z", "url": "https://files.pythonhosted.org/packages/d2/e8/aa6042c1ff34bc9de199f151b2ceb88aee55f32e91ee46d5e3f198951dec/ural-0.17.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "54ae52a5b452844190c90210b4b80e2e", "sha256": "c52f21ca35682c8de3ad7624b762da3c9f89afad71e5defd442ae53c02181b7f"}, "downloads": -1, "filename": "ural-0.17.0.tar.gz", "has_sig": false, "md5_digest": "54ae52a5b452844190c90210b4b80e2e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 23404, "upload_time": "2019-12-04T17:45:20", "upload_time_iso_8601": "2019-12-04T17:45:20.215243Z", "url": "https://files.pythonhosted.org/packages/74/b5/6ccae6ab5310004103e095cdd4751d2dbb05d3c402019c83ec69a7770294/ural-0.17.0.tar.gz", "yanked": false}], "0.18.0": [{"comment_text": "", "digests": {"md5": "228ab459b41686de11a956ca074e424c", "sha256": "cf501abfb350b82d719ca1693f58f9f2587f6251c1efdb4de41f56363aa11076"}, "downloads": -1, "filename": "ural-0.18.0-py3-none-any.whl", "has_sig": false, "md5_digest": "228ab459b41686de11a956ca074e424c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 26286, "upload_time": "2019-12-16T10:00:37", "upload_time_iso_8601": "2019-12-16T10:00:37.370707Z", "url": "https://files.pythonhosted.org/packages/d6/b5/dfb1c82f79cca529c9441fe0e8c78b57863519da539771f6fdce852cd367/ural-0.18.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "eafe4519a4eb68a7f96d7b3c97c605b7", "sha256": "b3bd552547ed1cd7d28e351f25d544c54d51444bf55d77f954b4cf925f35083e"}, "downloads": -1, "filename": "ural-0.18.0.tar.gz", "has_sig": false, "md5_digest": "eafe4519a4eb68a7f96d7b3c97c605b7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 22488, "upload_time": "2019-12-16T10:00:39", "upload_time_iso_8601": "2019-12-16T10:00:39.594822Z", "url": "https://files.pythonhosted.org/packages/c2/1a/8c55f258169627f0ea7d9adab5c1ba1bc73bde932d8c7a6fb3e3b805dc70/ural-0.18.0.tar.gz", "yanked": false}], "0.19.0": [{"comment_text": "", "digests": {"md5": "e6708636330aad94a35455be632e7061", "sha256": "39a46d565cdabfbfb404c9baf2f3eda32af44a4324937a16cdec5732ad335edd"}, "downloads": -1, "filename": "ural-0.19.0-py3-none-any.whl", "has_sig": false, "md5_digest": "e6708636330aad94a35455be632e7061", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 28994, "upload_time": "2019-12-16T16:23:51", "upload_time_iso_8601": "2019-12-16T16:23:51.640401Z", "url": "https://files.pythonhosted.org/packages/ec/14/e93e216886c007f05a24d15c87c8f0ceee2bcb7d6effd44cd517b5ecada4/ural-0.19.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c9ecf5eb7e63558bb4ae7857b1e212b4", "sha256": "d60522b270a5a4cbe9356ee2137c44835d5fd54fe444b415b72b85cdf722f9a0"}, "downloads": -1, "filename": "ural-0.19.0.tar.gz", "has_sig": false, "md5_digest": "c9ecf5eb7e63558bb4ae7857b1e212b4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 26415, "upload_time": "2019-12-16T16:23:54", "upload_time_iso_8601": "2019-12-16T16:23:54.071544Z", "url": "https://files.pythonhosted.org/packages/2c/0d/e038cb52977b0d5a997604cf490420b4297711955696dab2300d82c5c5bf/ural-0.19.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "6540f6197ddced0207333be8df931ea8", "sha256": "c5135a0c2c23cff6360213957a889eeec68a737280af49adabb229819901e60e"}, "downloads": -1, "filename": "ural-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6540f6197ddced0207333be8df931ea8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 6055, "upload_time": "2018-11-12T15:19:24", "upload_time_iso_8601": "2018-11-12T15:19:24.646365Z", "url": "https://files.pythonhosted.org/packages/c4/69/8d26a2062729f56e11fdd67cffd3a4b93e328ec8882a1705ad74b21ae337/ural-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4b28b09e0c7a3b7fbb592bbfe02335f8", "sha256": "8178eeb05990c646a3aa72536a7f76453066c8259e7d869a3f53bdcba8af2ecc"}, "downloads": -1, "filename": "ural-0.2.0.tar.gz", "has_sig": false, "md5_digest": "4b28b09e0c7a3b7fbb592bbfe02335f8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 3407, "upload_time": "2018-11-12T15:19:25", "upload_time_iso_8601": "2018-11-12T15:19:25.919159Z", "url": "https://files.pythonhosted.org/packages/ac/f6/ff503152a11ad311b7f598b876a3d8b270c94a828f09c11dce4e49e5eca1/ural-0.2.0.tar.gz", "yanked": false}], "0.20.0": [{"comment_text": "", "digests": {"md5": "a60a20585bc5e0e60d58ab1042d38b1c", "sha256": "165d8cf2a1eae055e247074fcd145ca801feea184811535645e9a2fbf7f5ec42"}, "downloads": -1, "filename": "ural-0.20.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a60a20585bc5e0e60d58ab1042d38b1c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 28996, "upload_time": "2020-02-07T10:18:47", "upload_time_iso_8601": "2020-02-07T10:18:47.106418Z", "url": "https://files.pythonhosted.org/packages/48/0e/32fdf6037d4e2553db704151caf4f85fe249d14989f96e853207ab9aa0f3/ural-0.20.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "589e90758a795409c8b63a09de611181", "sha256": "4efa738b51ab2125bfeb8e72bbf47582cbd706fb1330bd0d531622fbf68e8d65"}, "downloads": -1, "filename": "ural-0.20.0.tar.gz", "has_sig": false, "md5_digest": "589e90758a795409c8b63a09de611181", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 28156, "upload_time": "2020-02-07T10:18:48", "upload_time_iso_8601": "2020-02-07T10:18:48.977061Z", "url": "https://files.pythonhosted.org/packages/f7/c3/9a1144eb2bf9f06ea5a958bd664d64af83aa8d1501e380ab6aed85ea662d/ural-0.20.0.tar.gz", "yanked": false}], "0.21.0": [{"comment_text": "", "digests": {"md5": "1dbd5e969a7ac159262f43c0f087cb69", "sha256": "001a80392198f2c60e08a6ccdbf253f97a1979295e3f67b94d4d7279b14001f2"}, "downloads": -1, "filename": "ural-0.21.0-py3-none-any.whl", "has_sig": false, "md5_digest": "1dbd5e969a7ac159262f43c0f087cb69", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 29977, "upload_time": "2020-03-06T14:55:19", "upload_time_iso_8601": "2020-03-06T14:55:19.158533Z", "url": "https://files.pythonhosted.org/packages/b6/20/37de847a0a20c7b8cd6900fd88cbfb26830aaab4a4e56839ee3941c1f29a/ural-0.21.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e90e987e1c5ca19fbc0765d8d039f43e", "sha256": "89a01147cdeeeece9c26bfa3fa7ebe683a3823cda291d33810bb5808c0170e6b"}, "downloads": -1, "filename": "ural-0.21.0.tar.gz", "has_sig": false, "md5_digest": "e90e987e1c5ca19fbc0765d8d039f43e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 29190, "upload_time": "2020-03-06T14:55:21", "upload_time_iso_8601": "2020-03-06T14:55:21.172986Z", "url": "https://files.pythonhosted.org/packages/6a/a5/81d199168be5ef14d9132ed3249e33c5275bbd0d3b58744da922c56c6921/ural-0.21.0.tar.gz", "yanked": false}], "0.22.0": [{"comment_text": "", "digests": {"md5": "ce29ee173a764f86e5c9ea69f2bb569f", "sha256": "516fbbe22e885f1df22242296355f6f4fa438ac7ab7a381ee534ec43f8796f4a"}, "downloads": -1, "filename": "ural-0.22.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ce29ee173a764f86e5c9ea69f2bb569f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 30311, "upload_time": "2020-04-08T16:52:53", "upload_time_iso_8601": "2020-04-08T16:52:53.770569Z", "url": "https://files.pythonhosted.org/packages/8c/c0/24034706980cdd21fc3d15a06b6bd1cfbe386f1e7ef4e646509798f8c454/ural-0.22.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3e89537166198a1e906b4258be184673", "sha256": "0814118498a7bcff4ec8b54265a099357599aed26a107553faaa57967e6ce919"}, "downloads": -1, "filename": "ural-0.22.0.tar.gz", "has_sig": false, "md5_digest": "3e89537166198a1e906b4258be184673", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 27648, "upload_time": "2020-04-08T16:52:55", "upload_time_iso_8601": "2020-04-08T16:52:55.806799Z", "url": "https://files.pythonhosted.org/packages/ef/bd/ef899942f7152dad8f2c640d921047e35b2df0abfb422270981fb8e6b5dc/ural-0.22.0.tar.gz", "yanked": false}], "0.22.1": [{"comment_text": "", "digests": {"md5": "381592e685b03d5ba835658c507fbbaa", "sha256": "f7d1ae3f54582ec82655742857bbbe64de5a10048a140e44ea7277aed3a3e248"}, "downloads": -1, "filename": "ural-0.22.1-py3-none-any.whl", "has_sig": false, "md5_digest": "381592e685b03d5ba835658c507fbbaa", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 27029, "upload_time": "2020-04-21T21:12:00", "upload_time_iso_8601": "2020-04-21T21:12:00.748319Z", "url": "https://files.pythonhosted.org/packages/c8/d1/db0220632fa882a2eb6c6aad7e35a37a486728785b53c6385ac86f787013/ural-0.22.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b431140ffb6fbe4468db8672d22f036e", "sha256": "d31255b2a75454bba7b545d63e8f8a3a9d5be34145e828ab2c095423bdffd94b"}, "downloads": -1, "filename": "ural-0.22.1.tar.gz", "has_sig": false, "md5_digest": "b431140ffb6fbe4468db8672d22f036e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 26047, "upload_time": "2020-04-21T21:12:02", "upload_time_iso_8601": "2020-04-21T21:12:02.820640Z", "url": "https://files.pythonhosted.org/packages/30/20/10e577b6e648cef866039b2c9b9104e98ba9a4f06049a0e8c9898acfd4f3/ural-0.22.1.tar.gz", "yanked": false}], "0.23.0": [{"comment_text": "", "digests": {"md5": "40974097ca62f62236c67effb9f3ab26", "sha256": "ceddd842dbc231bab220c7dc274a919f5e3ecce900088a5cc86a2948f3510263"}, "downloads": -1, "filename": "ural-0.23.0-py3-none-any.whl", "has_sig": false, "md5_digest": "40974097ca62f62236c67effb9f3ab26", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 27032, "upload_time": "2020-05-05T15:23:41", "upload_time_iso_8601": "2020-05-05T15:23:41.516784Z", "url": "https://files.pythonhosted.org/packages/ec/06/527aa3597fd97d4a39e1ce78b1b12a1b3a209b222115395f9036e63818f5/ural-0.23.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6075eca74266321be77dcd2686dbfee7", "sha256": "c81d6012e25382aef8064bc83f4fb59de8d1f4fa14c050505484a6750309bb79"}, "downloads": -1, "filename": "ural-0.23.0.tar.gz", "has_sig": false, "md5_digest": "6075eca74266321be77dcd2686dbfee7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 26051, "upload_time": "2020-05-05T15:23:43", "upload_time_iso_8601": "2020-05-05T15:23:43.360135Z", "url": "https://files.pythonhosted.org/packages/94/b7/56ef971f6e948679b405a5bd59f2f6fe0a9f2ceb16688536819919ba9c96/ural-0.23.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "1bf9ffd1a43f44dc5946b7e2010796cd", "sha256": "ef2c2f1dc7004fa0b8bd2968c59d3e00c4bea45cf113c4ad6308eafed014567b"}, "downloads": -1, "filename": "ural-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "1bf9ffd1a43f44dc5946b7e2010796cd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 7017, "upload_time": "2018-12-07T17:38:54", "upload_time_iso_8601": "2018-12-07T17:38:54.764256Z", "url": "https://files.pythonhosted.org/packages/ed/64/eeabd73eea9049350824ab1cd025450a613ee40028e7f3f18f53a642a179/ural-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2c3ffbe8bbd634dbed4e3599b450b6cc", "sha256": "f7c6a742a3f01d812f0af287739ee696d60ef417dc632e6d3bd597832b01d95b"}, "downloads": -1, "filename": "ural-0.3.0.tar.gz", "has_sig": false, "md5_digest": "2c3ffbe8bbd634dbed4e3599b450b6cc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 4142, "upload_time": "2018-12-07T17:38:56", "upload_time_iso_8601": "2018-12-07T17:38:56.309947Z", "url": "https://files.pythonhosted.org/packages/d2/e0/3c2f69ad25188c0ae8ab86aebdab33eff6b15b24b039df07a17bb053c3aa/ural-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "abe1bd726844cac86b4d07d2bdefc766", "sha256": "e3735b44ea753e3d675fd74955cd288850084aa803e5ba5413a0822c2efa5464"}, "downloads": -1, "filename": "ural-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "abe1bd726844cac86b4d07d2bdefc766", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 7182, "upload_time": "2018-12-11T11:06:56", "upload_time_iso_8601": "2018-12-11T11:06:56.337510Z", "url": "https://files.pythonhosted.org/packages/37/3e/9b5d385adeac56f3c1a99a86f2bf4163d094a47a06ba2db956de1b53cb28/ural-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "80e7ac467093ca9977851669ac67930d", "sha256": "dff1512b31d62f5ae862647f1d47d61e31ea56fda34157082dca1d1d2238fd14"}, "downloads": -1, "filename": "ural-0.4.0.tar.gz", "has_sig": false, "md5_digest": "80e7ac467093ca9977851669ac67930d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 4311, "upload_time": "2018-12-11T11:06:57", "upload_time_iso_8601": "2018-12-11T11:06:57.809806Z", "url": "https://files.pythonhosted.org/packages/d0/7b/dd36c65908f5194556e6fd13b0562a758db765efc2dc11a0fd4f070a516b/ural-0.4.0.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "1b6fc8e3377b4da073207283af038727", "sha256": "eb81461946f25a7bc978db2bbdbb1382ee9fd9b05a25bfab68ce6e6dad900d8c"}, "downloads": -1, "filename": "ural-0.5.0-py3-none-any.whl", "has_sig": false, "md5_digest": "1b6fc8e3377b4da073207283af038727", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 8543, "upload_time": "2018-12-14T10:44:43", "upload_time_iso_8601": "2018-12-14T10:44:43.631495Z", "url": "https://files.pythonhosted.org/packages/07/36/fdf89959dacf120e789b0519fbf9dcc9631a30b646bded93d0e42948c10c/ural-0.5.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f442fee0f4a0086c403b77000118c0ef", "sha256": "b8484b089874da5a81dc436618821dd947c3feda966e664571745a3854321727"}, "downloads": -1, "filename": "ural-0.5.0.tar.gz", "has_sig": false, "md5_digest": "f442fee0f4a0086c403b77000118c0ef", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 5133, "upload_time": "2018-12-14T10:44:45", "upload_time_iso_8601": "2018-12-14T10:44:45.067240Z", "url": "https://files.pythonhosted.org/packages/e4/6a/2d1ebbb745907020b4f30c1ca84e6bf74e46945a007376599faac4e0a8da/ural-0.5.0.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "e01465673ed9f1076be02e8622731a27", "sha256": "87bc6a9ff7690b54e70064087deaa2107207161ebccd8d40910c9ac0925e061b"}, "downloads": -1, "filename": "ural-0.6.0-py3-none-any.whl", "has_sig": false, "md5_digest": "e01465673ed9f1076be02e8622731a27", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 14335, "upload_time": "2019-02-25T19:38:07", "upload_time_iso_8601": "2019-02-25T19:38:07.549627Z", "url": "https://files.pythonhosted.org/packages/61/f2/49d5d3f74064da237de39b99e7cf2c5391e20f175acc2b569d68c8662564/ural-0.6.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a49a17a96fd993fb9b3352bd59bdbfb8", "sha256": "347c602af49541e6cf33b9e67f3f108aee0b88bbc9996e300368200499d6d272"}, "downloads": -1, "filename": "ural-0.6.0.tar.gz", "has_sig": false, "md5_digest": "a49a17a96fd993fb9b3352bd59bdbfb8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 9653, "upload_time": "2019-02-25T19:38:09", "upload_time_iso_8601": "2019-02-25T19:38:09.213252Z", "url": "https://files.pythonhosted.org/packages/cf/8d/fba785e65d257ef054223c2a18fe60a894eb0dd6255315941247958c405a/ural-0.6.0.tar.gz", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "01ea2728eade808d31e9e46b4886bb3d", "sha256": "ea9075c171dae6d70bfee85eb75eaee4079c43647f9761bba13063931757eb57"}, "downloads": -1, "filename": "ural-0.6.1-py3-none-any.whl", "has_sig": false, "md5_digest": "01ea2728eade808d31e9e46b4886bb3d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 14362, "upload_time": "2019-04-03T13:57:12", "upload_time_iso_8601": "2019-04-03T13:57:12.648226Z", "url": "https://files.pythonhosted.org/packages/d0/d2/32a4eb409316b846b52732470c35c98626a52036867f8e7e51abc098e012/ural-0.6.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "27f0a412dcebe9e77972e005e3c29b3a", "sha256": "fa63ef169efa5ca0e70fdf11b482dec01a10d37b1bc299618e8d657ae223a1da"}, "downloads": -1, "filename": "ural-0.6.1.tar.gz", "has_sig": false, "md5_digest": "27f0a412dcebe9e77972e005e3c29b3a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 9673, "upload_time": "2019-04-03T13:57:13", "upload_time_iso_8601": "2019-04-03T13:57:13.960692Z", "url": "https://files.pythonhosted.org/packages/cf/7e/699705d9b91ed6e35c1ec41b56f0b5696dc0cc6ce95874884e48d3a8fb5d/ural-0.6.1.tar.gz", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "71135aeb587901a266d8369172894be3", "sha256": "bc7be36f19bc68febadac8c3978aa5f9a1b5840c192d52f86a428cf44eaa8e1a"}, "downloads": -1, "filename": "ural-0.7.0-py3-none-any.whl", "has_sig": false, "md5_digest": "71135aeb587901a266d8369172894be3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 15445, "upload_time": "2019-04-17T12:20:31", "upload_time_iso_8601": "2019-04-17T12:20:31.701683Z", "url": "https://files.pythonhosted.org/packages/d4/e6/46fe4c9eb0f62793250f98ad8ea328670b30a554f9aaa57cdff0485cf21a/ural-0.7.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7179bba54e58b359730100bc6204e75b", "sha256": "298c0bc241381a55a9f331c815f077444829a5c03e68b11582269ad218c1c60a"}, "downloads": -1, "filename": "ural-0.7.0.tar.gz", "has_sig": false, "md5_digest": "7179bba54e58b359730100bc6204e75b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 10294, "upload_time": "2019-04-17T12:20:33", "upload_time_iso_8601": "2019-04-17T12:20:33.179534Z", "url": "https://files.pythonhosted.org/packages/d1/29/353336a136207dfd2f9743a8685eaa7890ebdd3d3da2e21b7762b941183c/ural-0.7.0.tar.gz", "yanked": false}], "0.8.0": [{"comment_text": "", "digests": {"md5": "c74a38b2325b7513c3fd942243d0899a", "sha256": "160c0df7a511c3c946083d04b3fbc9e26af51891148a69299ec8ad638c8b172c"}, "downloads": -1, "filename": "ural-0.8.0-py3-none-any.whl", "has_sig": false, "md5_digest": "c74a38b2325b7513c3fd942243d0899a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 15822, "upload_time": "2019-04-30T12:28:49", "upload_time_iso_8601": "2019-04-30T12:28:49.036750Z", "url": "https://files.pythonhosted.org/packages/b9/07/2836dfe079234582c64a242e8147a6f16f36b66d04d026be06afe2c932ba/ural-0.8.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "88e9a1b23f3d5747b06a5674555bcbf8", "sha256": "4a71055c26495b43fa7f4d1e412878b9c560c76ea2cca5090929eab6933a8e7f"}, "downloads": -1, "filename": "ural-0.8.0.tar.gz", "has_sig": false, "md5_digest": "88e9a1b23f3d5747b06a5674555bcbf8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 10744, "upload_time": "2019-04-30T12:29:00", "upload_time_iso_8601": "2019-04-30T12:29:00.090780Z", "url": "https://files.pythonhosted.org/packages/f4/e5/a271a9f3c09f5ab118bade0be5451084882b62d366453410b5b99716dc20/ural-0.8.0.tar.gz", "yanked": false}], "0.9.0": [{"comment_text": "", "digests": {"md5": "59327ee95ccba10a82f52b13047478b7", "sha256": "a119da6f87477a5078347feb24433f9772ff83ecb44484d46575cf1696c7c391"}, "downloads": -1, "filename": "ural-0.9.0-py2-none-any.whl", "has_sig": false, "md5_digest": "59327ee95ccba10a82f52b13047478b7", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": ">=2.7", "size": 17306, "upload_time": "2019-09-12T14:48:27", "upload_time_iso_8601": "2019-09-12T14:48:27.801445Z", "url": "https://files.pythonhosted.org/packages/76/c5/dad16f2209d349382399a397d7b48efeb25ffbb9f5746b0a56fd36bc9a97/ural-0.9.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "783511326a4627581a52d8d92810743b", "sha256": "6d2d22edd739131562db30d6b59de4ae6df404d3464caa4cf3be53e33a2faf58"}, "downloads": -1, "filename": "ural-0.9.0.tar.gz", "has_sig": false, "md5_digest": "783511326a4627581a52d8d92810743b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 12290, "upload_time": "2019-09-12T14:48:29", "upload_time_iso_8601": "2019-09-12T14:48:29.531554Z", "url": "https://files.pythonhosted.org/packages/8d/1a/a55321eefe2a11952939c061467755bbb0efafe278341985aebf3333527c/ural-0.9.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "40974097ca62f62236c67effb9f3ab26", "sha256": "ceddd842dbc231bab220c7dc274a919f5e3ecce900088a5cc86a2948f3510263"}, "downloads": -1, "filename": "ural-0.23.0-py3-none-any.whl", "has_sig": false, "md5_digest": "40974097ca62f62236c67effb9f3ab26", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 27032, "upload_time": "2020-05-05T15:23:41", "upload_time_iso_8601": "2020-05-05T15:23:41.516784Z", "url": "https://files.pythonhosted.org/packages/ec/06/527aa3597fd97d4a39e1ce78b1b12a1b3a209b222115395f9036e63818f5/ural-0.23.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6075eca74266321be77dcd2686dbfee7", "sha256": "c81d6012e25382aef8064bc83f4fb59de8d1f4fa14c050505484a6750309bb79"}, "downloads": -1, "filename": "ural-0.23.0.tar.gz", "has_sig": false, "md5_digest": "6075eca74266321be77dcd2686dbfee7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 26051, "upload_time": "2020-05-05T15:23:43", "upload_time_iso_8601": "2020-05-05T15:23:43.360135Z", "url": "https://files.pythonhosted.org/packages/94/b7/56ef971f6e948679b405a5bd59f2f6fe0a9f2ceb16688536819919ba9c96/ural-0.23.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:39:36 2020"}