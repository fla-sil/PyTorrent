{"info": {"author": "Tian Gan", "author_email": "jamy127@foxmail.com", "bugtrack_url": null, "classifiers": [], "description": "# nwm\n[![Documentation Status](https://readthedocs.org/projects/nwm/badge/?version=latest)](https://nwm.readthedocs.io/en/latest/?badge=latest)\n[![MIT license](https://img.shields.io/badge/License-MIT-blue.svg)](https://github.com/gantian127/nwm/blob/master/LICENSE.txt)\n[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/gantian127/nwm/master?filepath=notebooks%2Fnwm.ipynb)\n\n\n\nPython library to fetch and process the National Water Model (NWM) NetCDF datasets. \n\nIf you have any suggestion to improve the current function, please create a github issue \n[here](https://github.com/gantian127/nwm/issues).\n## Get Started\n\n\n\n#### Install package\n\n```\n$ pip install nwm\n```\n\n#### Download NWM Data\nYou can launch binder to test and run the code below.\n\n##### Example 1: use NwmHs class to download data (Recommended method)\n\n```python\nimport matplotlib.pyplot as plt\nfrom nwm import NwmHs\n\n# get data from National water model HydroShare App\nnwm_data = NwmHs()\ndataset = nwm_data.get_data(archive='harvey', config='short_range', geom='channel_rt', variable='streamflow',\n                           comid=[5781915], init_time=0, start_date='2017-08-23')\n\n# show metadata\ndataset.attrs\n\n# plot data\nplt.figure(figsize=(9,5))\ndataset.plot()\nplt.xlabel('Year 2017')\nplt.ylabel('{} ({})'.format(dataset.variable_name,dataset.variable_unit))\nplt.title('Short range streamflow forecast for Channel 5781915 during Harvey Hurricane Event')\n```\n![ts_plot](docs/source/_static/ts_plot.png)\n\n##### Example 2: use BmiNwmHs class to download data (Demonstration of how to use BMI)\n\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport cftime\n\nfrom nwm import BmiNwmHs\n\n\n# initiate a data component\ndata_comp = BmiNwmHs()\ndata_comp.initialize('config_file.yaml')\n\n# get variable info\nvar_name = data_comp.get_output_var_names()[0]\nvar_unit = data_comp.get_var_units(var_name)\nprint(' variable_name: {}\\n var_unit: {}\\n'.format(var_name, var_unit))\n\n# get time info\nstart_time = data_comp.get_start_time()\nend_time = data_comp.get_end_time()\ntime_step = data_comp.get_time_step()\ntime_unit = data_comp.get_time_units()\ntime_steps = int((end_time - start_time)/time_step) + 1\nprint(' start_time:{}\\n end_time:{}\\n time_step:{}\\n time_unit:{}\\n time_steps:{}\\n'.format(start_time, end_time, time_step, time_unit, time_steps))\n\n# initiate numpy arrays to store data\nstream_value = np.empty(1)\nstream_array = np.empty(time_steps)\ncftime_array = np.empty(time_steps)\n\nfor i in range(0, time_steps):\n    data_comp.get_value(var_name, stream_value)\n    stream_array[i] = stream_value\n    cftime_array[i] = data_comp.get_current_time()\n    data_comp.update()\n\ntime_array = cftime.num2date(cftime_array, time_unit, only_use_cftime_datetimes=False, only_use_python_datetimes=True)\n\n# plot data\nplt.figure(figsize=(9,5))\nplt.plot(time_array, stream_array)\nplt.xlabel('Year 2017')\nplt.ylabel('{} ({})'.format(var_name, var_unit))\nplt.title('Short range streamflow forecast for Channel 5781915 during Harvey Hurricane Event')\n```\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://csdms.colorado.edu", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "nwm", "package_url": "https://pypi.org/project/nwm/", "platform": "", "project_url": "https://pypi.org/project/nwm/", "project_urls": {"Homepage": "http://csdms.colorado.edu"}, "release_url": "https://pypi.org/project/nwm/0.1.2/", "requires_dist": ["bmipy", "click", "netcdf4", "numpy", "pyyaml", "requests", "xarray", "owslib", "cftime", "pandas"], "requires_python": "", "summary": "Fetch and process data from the National Water Model", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>nwm</h1>\n<p><a href=\"https://nwm.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9d0c097889b1888bd19582fba87e5424f4c8a18d/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f6e776d2f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://github.com/gantian127/nwm/blob/master/LICENSE.txt\" rel=\"nofollow\"><img alt=\"MIT license\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4150014b4dfdd7b565fa18de88e9bb1b8ccd7c08/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d626c75652e737667\"></a>\n<a href=\"https://mybinder.org/v2/gh/gantian127/nwm/master?filepath=notebooks%2Fnwm.ipynb\" rel=\"nofollow\"><img alt=\"Binder\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/85e91bbb928104e4ce317951541520c6b9c170e1/68747470733a2f2f6d7962696e6465722e6f72672f62616467655f6c6f676f2e737667\"></a></p>\n<p>Python library to fetch and process the National Water Model (NWM) NetCDF datasets.</p>\n<p>If you have any suggestion to improve the current function, please create a github issue\n<a href=\"https://github.com/gantian127/nwm/issues\" rel=\"nofollow\">here</a>.</p>\n<h2>Get Started</h2>\n<h4>Install package</h4>\n<pre><code>$ pip install nwm\n</code></pre>\n<h4>Download NWM Data</h4>\n<p>You can launch binder to test and run the code below.</p>\n<h5>Example 1: use NwmHs class to download data (Recommended method)</h5>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n<span class=\"kn\">from</span> <span class=\"nn\">nwm</span> <span class=\"kn\">import</span> <span class=\"n\">NwmHs</span>\n\n<span class=\"c1\"># get data from National water model HydroShare App</span>\n<span class=\"n\">nwm_data</span> <span class=\"o\">=</span> <span class=\"n\">NwmHs</span><span class=\"p\">()</span>\n<span class=\"n\">dataset</span> <span class=\"o\">=</span> <span class=\"n\">nwm_data</span><span class=\"o\">.</span><span class=\"n\">get_data</span><span class=\"p\">(</span><span class=\"n\">archive</span><span class=\"o\">=</span><span class=\"s1\">'harvey'</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"s1\">'short_range'</span><span class=\"p\">,</span> <span class=\"n\">geom</span><span class=\"o\">=</span><span class=\"s1\">'channel_rt'</span><span class=\"p\">,</span> <span class=\"n\">variable</span><span class=\"o\">=</span><span class=\"s1\">'streamflow'</span><span class=\"p\">,</span>\n                           <span class=\"n\">comid</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">5781915</span><span class=\"p\">],</span> <span class=\"n\">init_time</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">start_date</span><span class=\"o\">=</span><span class=\"s1\">'2017-08-23'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># show metadata</span>\n<span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">attrs</span>\n\n<span class=\"c1\"># plot data</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">(</span><span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">))</span>\n<span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">()</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">xlabel</span><span class=\"p\">(</span><span class=\"s1\">'Year 2017'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">ylabel</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"si\">{}</span><span class=\"s1\"> (</span><span class=\"si\">{}</span><span class=\"s1\">)'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">variable_name</span><span class=\"p\">,</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">variable_unit</span><span class=\"p\">))</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">(</span><span class=\"s1\">'Short range streamflow forecast for Channel 5781915 during Harvey Hurricane Event'</span><span class=\"p\">)</span>\n</pre>\n<p><img alt=\"ts_plot\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a59d5bfee04aaae4ebf8fe42960b5d907d180bf6/646f63732f736f757263652f5f7374617469632f74735f706c6f742e706e67\"></p>\n<h5>Example 2: use BmiNwmHs class to download data (Demonstration of how to use BMI)</h5>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">cftime</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">nwm</span> <span class=\"kn\">import</span> <span class=\"n\">BmiNwmHs</span>\n\n\n<span class=\"c1\"># initiate a data component</span>\n<span class=\"n\">data_comp</span> <span class=\"o\">=</span> <span class=\"n\">BmiNwmHs</span><span class=\"p\">()</span>\n<span class=\"n\">data_comp</span><span class=\"o\">.</span><span class=\"n\">initialize</span><span class=\"p\">(</span><span class=\"s1\">'config_file.yaml'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># get variable info</span>\n<span class=\"n\">var_name</span> <span class=\"o\">=</span> <span class=\"n\">data_comp</span><span class=\"o\">.</span><span class=\"n\">get_output_var_names</span><span class=\"p\">()[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">var_unit</span> <span class=\"o\">=</span> <span class=\"n\">data_comp</span><span class=\"o\">.</span><span class=\"n\">get_var_units</span><span class=\"p\">(</span><span class=\"n\">var_name</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">' variable_name: </span><span class=\"si\">{}</span><span class=\"se\">\\n</span><span class=\"s1\"> var_unit: </span><span class=\"si\">{}</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">var_name</span><span class=\"p\">,</span> <span class=\"n\">var_unit</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># get time info</span>\n<span class=\"n\">start_time</span> <span class=\"o\">=</span> <span class=\"n\">data_comp</span><span class=\"o\">.</span><span class=\"n\">get_start_time</span><span class=\"p\">()</span>\n<span class=\"n\">end_time</span> <span class=\"o\">=</span> <span class=\"n\">data_comp</span><span class=\"o\">.</span><span class=\"n\">get_end_time</span><span class=\"p\">()</span>\n<span class=\"n\">time_step</span> <span class=\"o\">=</span> <span class=\"n\">data_comp</span><span class=\"o\">.</span><span class=\"n\">get_time_step</span><span class=\"p\">()</span>\n<span class=\"n\">time_unit</span> <span class=\"o\">=</span> <span class=\"n\">data_comp</span><span class=\"o\">.</span><span class=\"n\">get_time_units</span><span class=\"p\">()</span>\n<span class=\"n\">time_steps</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">((</span><span class=\"n\">end_time</span> <span class=\"o\">-</span> <span class=\"n\">start_time</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"n\">time_step</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">' start_time:</span><span class=\"si\">{}</span><span class=\"se\">\\n</span><span class=\"s1\"> end_time:</span><span class=\"si\">{}</span><span class=\"se\">\\n</span><span class=\"s1\"> time_step:</span><span class=\"si\">{}</span><span class=\"se\">\\n</span><span class=\"s1\"> time_unit:</span><span class=\"si\">{}</span><span class=\"se\">\\n</span><span class=\"s1\"> time_steps:</span><span class=\"si\">{}</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">start_time</span><span class=\"p\">,</span> <span class=\"n\">end_time</span><span class=\"p\">,</span> <span class=\"n\">time_step</span><span class=\"p\">,</span> <span class=\"n\">time_unit</span><span class=\"p\">,</span> <span class=\"n\">time_steps</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># initiate numpy arrays to store data</span>\n<span class=\"n\">stream_value</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">empty</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">stream_array</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">empty</span><span class=\"p\">(</span><span class=\"n\">time_steps</span><span class=\"p\">)</span>\n<span class=\"n\">cftime_array</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">empty</span><span class=\"p\">(</span><span class=\"n\">time_steps</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">time_steps</span><span class=\"p\">):</span>\n    <span class=\"n\">data_comp</span><span class=\"o\">.</span><span class=\"n\">get_value</span><span class=\"p\">(</span><span class=\"n\">var_name</span><span class=\"p\">,</span> <span class=\"n\">stream_value</span><span class=\"p\">)</span>\n    <span class=\"n\">stream_array</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">stream_value</span>\n    <span class=\"n\">cftime_array</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">data_comp</span><span class=\"o\">.</span><span class=\"n\">get_current_time</span><span class=\"p\">()</span>\n    <span class=\"n\">data_comp</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">()</span>\n\n<span class=\"n\">time_array</span> <span class=\"o\">=</span> <span class=\"n\">cftime</span><span class=\"o\">.</span><span class=\"n\">num2date</span><span class=\"p\">(</span><span class=\"n\">cftime_array</span><span class=\"p\">,</span> <span class=\"n\">time_unit</span><span class=\"p\">,</span> <span class=\"n\">only_use_cftime_datetimes</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">only_use_python_datetimes</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># plot data</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">(</span><span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">))</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">time_array</span><span class=\"p\">,</span> <span class=\"n\">stream_array</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">xlabel</span><span class=\"p\">(</span><span class=\"s1\">'Year 2017'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">ylabel</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"si\">{}</span><span class=\"s1\"> (</span><span class=\"si\">{}</span><span class=\"s1\">)'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">var_name</span><span class=\"p\">,</span> <span class=\"n\">var_unit</span><span class=\"p\">))</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">(</span><span class=\"s1\">'Short range streamflow forecast for Channel 5781915 during Harvey Hurricane Event'</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 7134774, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "38dd41de2f5f8004ab083e53eac0ea38", "sha256": "3d6a2fc6a53ba0438ffab888a8851fd238503777443529f961a04e28c7429981"}, "downloads": -1, "filename": "nwm-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "38dd41de2f5f8004ab083e53eac0ea38", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11193, "upload_time": "2020-03-04T20:40:05", "upload_time_iso_8601": "2020-03-04T20:40:05.704262Z", "url": "https://files.pythonhosted.org/packages/62/cf/82bcd17b3fe66bff8b06a4c132504731cd545ce7e21fd58ec5b88916bb26/nwm-0.1.0-py3-none-any.whl", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "b1e89327bd1b13fbeb07ad26c0f787a8", "sha256": "8d1417c56a0c9053857c0d78af3a7f3f07b4bae64e148d5b362d7016cb188153"}, "downloads": -1, "filename": "nwm-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b1e89327bd1b13fbeb07ad26c0f787a8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12425, "upload_time": "2020-03-19T01:18:17", "upload_time_iso_8601": "2020-03-19T01:18:17.602385Z", "url": "https://files.pythonhosted.org/packages/d9/f9/a83277fdf38c1a9bef6b07a3eff5f7d336dd575644ff86e1a522ed891f90/nwm-0.1.1-py3-none-any.whl", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "566aee5f313aad2d9c841fbfc5b21e47", "sha256": "e3c6b847c67093e67a130030f62794e752c6dc470e72e4e2bf54e03184c63fac"}, "downloads": -1, "filename": "nwm-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "566aee5f313aad2d9c841fbfc5b21e47", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12433, "upload_time": "2020-04-30T03:59:26", "upload_time_iso_8601": "2020-04-30T03:59:26.605280Z", "url": "https://files.pythonhosted.org/packages/2f/73/4642748a5383145d44f52275c56052de14969b31c4a58d32a9baf5f49831/nwm-0.1.2-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "566aee5f313aad2d9c841fbfc5b21e47", "sha256": "e3c6b847c67093e67a130030f62794e752c6dc470e72e4e2bf54e03184c63fac"}, "downloads": -1, "filename": "nwm-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "566aee5f313aad2d9c841fbfc5b21e47", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12433, "upload_time": "2020-04-30T03:59:26", "upload_time_iso_8601": "2020-04-30T03:59:26.605280Z", "url": "https://files.pythonhosted.org/packages/2f/73/4642748a5383145d44f52275c56052de14969b31c4a58d32a9baf5f49831/nwm-0.1.2-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:44:03 2020"}