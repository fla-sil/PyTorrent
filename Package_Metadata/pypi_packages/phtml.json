{"info": {"author": "James Pic", "author_email": "jamespic@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 1 - Planning", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Internet :: WWW/HTTP", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Welcome to phtml !\n~~~~~~~~~~~~~~~~~~\n\nphtml is a silly python library to generate HTML in Python like you would with a template, but refactor-oriented with a Pythonic React-like pattern based on nested components.\n\nComponent base\n==============\n\nThe base component class is Node:\n\n.. code-block:: python\n\n    from phtml import Node\n\n    form_layout = Node(\n        'form',                     # node.tag\n        {                           # node.attrs\n            'class': 'foo',         # node.attrs['class']\n            'method': 'POST',       # node.attrs['method']\n        },\n        [                           # node.children\n            '{{ form.as_p() }}',    # node.children[0]\n            Node('input', {'type': 'submit'}, selfclose=True),\n        ],\n    )\n\nCasting form_layout to string will return the following:\n\n.. code-block:: django\n\n    <form class=\"foo\" method=\"POST\">\n        {{ form.as_p() }}\n        <input type=\"submit\" />\n    </form>\n\n\nRendering\n=========\n\nWhile calling ``phtml.jinja.render(form_layout, form=YourForm())`` will\nreturn the phtml output processed with form in the context and produce the\nfinal result.\n\nThe whole purpose is refactoring HTML generating logic into Python components:\n\n.. code-block:: python\n\n    from phtml import Form, Submit\n\n    form_layout = Form(\n        {'class': 'foo'},\n        ['{{ form.as_p() }}', Submit())],\n    )\n\nImporting on the fly\n====================\n\n.. code-block:: python\n\n    from phtml import Node\n\n    form_layout = Node.factory(\n        'phtml.Form', {'class': 'foo'},\n        ['{{ form.as_p() }}', Node('phtml.Submit')],\n    )\n\nJinja and Materialize for the poor\n==================================\n\nSuppose you want to make a nice layout for the login form, please don't repeat\nboring and verbose code like this because somewhere in the world a cat would\nprobably die because of a side effect in an alternate reality or something:\n\n.. code-block:: python\n\n    from phtml import Form, Div\n\n    your_layout = Form(\n        Div({'class': 'row'}, [\n            Div({'class': 'col m6 s12'}, ['{{ form[\"username\"] }}']),\n            Div({'class': 'col m6 s12'}, ['{{ form[\"password\"] }}']),\n        ]),\n    )\n\nRefactored components for the rich\n==================================\n\nInstead make a beautiful layout with reusable components:\n\n.. code-block:: python\n\n    from phtml.django.mdc import Form, Row, Col, Input\n\n    class YourLoginForm(forms.LoginForm):\n        _phtml = Form(\n            Row(\n                Col(m=6, s=12, Input('username')),\n                Col(m=6, s=12, Input('password')),\n            )\n        )\n\n.. note:: For the documentation of the constructor of each component, please\n          fill in their docstrings under their signature in Python code, UTSL !\n\nSilly and Stupid context based rendering\n========================================\n\nYou could render as such in jinja (or in Python without the curly braces):\n``{{ form._phtml.jinja(form) }}``, since all rendering logic should already be\nin phtml.\n\nThank you\n=========\n\nThanks a lot for reading. Hope this will serve as a useful example for anybody\non a mission to \"refactor HTML in Python\".\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/yourlabs/phtml", "keywords": "html", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "phtml", "package_url": "https://pypi.org/project/phtml/", "platform": "", "project_url": "https://pypi.org/project/phtml/", "project_urls": {"Homepage": "https://github.com/yourlabs/phtml"}, "release_url": "https://pypi.org/project/phtml/0.0.1/", "requires_dist": null, "requires_python": "", "summary": "Refactor HTML in Python", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>phtml is a silly python library to generate HTML in Python like you would with a template, but refactor-oriented with a Pythonic React-like pattern based on nested components.</p>\n<div id=\"component-base\">\n<h2>Component base</h2>\n<p>The base component class is Node:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">phtml</span> <span class=\"kn\">import</span> <span class=\"n\">Node</span>\n\n<span class=\"n\">form_layout</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span>\n    <span class=\"s1\">'form'</span><span class=\"p\">,</span>                     <span class=\"c1\"># node.tag</span>\n    <span class=\"p\">{</span>                           <span class=\"c1\"># node.attrs</span>\n        <span class=\"s1\">'class'</span><span class=\"p\">:</span> <span class=\"s1\">'foo'</span><span class=\"p\">,</span>         <span class=\"c1\"># node.attrs['class']</span>\n        <span class=\"s1\">'method'</span><span class=\"p\">:</span> <span class=\"s1\">'POST'</span><span class=\"p\">,</span>       <span class=\"c1\"># node.attrs['method']</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">[</span>                           <span class=\"c1\"># node.children</span>\n        <span class=\"s1\">'{{ form.as_p() }}'</span><span class=\"p\">,</span>    <span class=\"c1\"># node.children[0]</span>\n        <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s1\">'input'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'submit'</span><span class=\"p\">},</span> <span class=\"n\">selfclose</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">),</span>\n    <span class=\"p\">],</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Casting form_layout to string will return the following:</p>\n<pre><span class=\"x\">&lt;form class=\"foo\" method=\"POST\"&gt;\n    </span><span class=\"cp\">{{</span> <span class=\"nv\">form.as_p</span><span class=\"o\">()</span> <span class=\"cp\">}}</span><span class=\"x\">\n    &lt;input type=\"submit\" /&gt;\n&lt;/form&gt;</span>\n</pre>\n</div>\n<div id=\"rendering\">\n<h2>Rendering</h2>\n<p>While calling <tt>phtml.jinja.render(form_layout, <span class=\"pre\">form=YourForm())</span></tt> will\nreturn the phtml output processed with form in the context and produce the\nfinal result.</p>\n<p>The whole purpose is refactoring HTML generating logic into Python components:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">phtml</span> <span class=\"kn\">import</span> <span class=\"n\">Form</span><span class=\"p\">,</span> <span class=\"n\">Submit</span>\n\n<span class=\"n\">form_layout</span> <span class=\"o\">=</span> <span class=\"n\">Form</span><span class=\"p\">(</span>\n    <span class=\"p\">{</span><span class=\"s1\">'class'</span><span class=\"p\">:</span> <span class=\"s1\">'foo'</span><span class=\"p\">},</span>\n    <span class=\"p\">[</span><span class=\"s1\">'{{ form.as_p() }}'</span><span class=\"p\">,</span> <span class=\"n\">Submit</span><span class=\"p\">())],</span>\n<span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"importing-on-the-fly\">\n<h2>Importing on the fly</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">phtml</span> <span class=\"kn\">import</span> <span class=\"n\">Node</span>\n\n<span class=\"n\">form_layout</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"o\">.</span><span class=\"n\">factory</span><span class=\"p\">(</span>\n    <span class=\"s1\">'phtml.Form'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'class'</span><span class=\"p\">:</span> <span class=\"s1\">'foo'</span><span class=\"p\">},</span>\n    <span class=\"p\">[</span><span class=\"s1\">'{{ form.as_p() }}'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s1\">'phtml.Submit'</span><span class=\"p\">)],</span>\n<span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"jinja-and-materialize-for-the-poor\">\n<h2>Jinja and Materialize for the poor</h2>\n<p>Suppose you want to make a nice layout for the login form, please don\u2019t repeat\nboring and verbose code like this because somewhere in the world a cat would\nprobably die because of a side effect in an alternate reality or something:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">phtml</span> <span class=\"kn\">import</span> <span class=\"n\">Form</span><span class=\"p\">,</span> <span class=\"n\">Div</span>\n\n<span class=\"n\">your_layout</span> <span class=\"o\">=</span> <span class=\"n\">Form</span><span class=\"p\">(</span>\n    <span class=\"n\">Div</span><span class=\"p\">({</span><span class=\"s1\">'class'</span><span class=\"p\">:</span> <span class=\"s1\">'row'</span><span class=\"p\">},</span> <span class=\"p\">[</span>\n        <span class=\"n\">Div</span><span class=\"p\">({</span><span class=\"s1\">'class'</span><span class=\"p\">:</span> <span class=\"s1\">'col m6 s12'</span><span class=\"p\">},</span> <span class=\"p\">[</span><span class=\"s1\">'{{ form[\"username\"] }}'</span><span class=\"p\">]),</span>\n        <span class=\"n\">Div</span><span class=\"p\">({</span><span class=\"s1\">'class'</span><span class=\"p\">:</span> <span class=\"s1\">'col m6 s12'</span><span class=\"p\">},</span> <span class=\"p\">[</span><span class=\"s1\">'{{ form[\"password\"] }}'</span><span class=\"p\">]),</span>\n    <span class=\"p\">]),</span>\n<span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"refactored-components-for-the-rich\">\n<h2>Refactored components for the rich</h2>\n<p>Instead make a beautiful layout with reusable components:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">phtml.django.mdc</span> <span class=\"kn\">import</span> <span class=\"n\">Form</span><span class=\"p\">,</span> <span class=\"n\">Row</span><span class=\"p\">,</span> <span class=\"n\">Col</span><span class=\"p\">,</span> <span class=\"n\">Input</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">YourLoginForm</span><span class=\"p\">(</span><span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">LoginForm</span><span class=\"p\">):</span>\n    <span class=\"n\">_phtml</span> <span class=\"o\">=</span> <span class=\"n\">Form</span><span class=\"p\">(</span>\n        <span class=\"n\">Row</span><span class=\"p\">(</span>\n            <span class=\"n\">Col</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"o\">=</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"o\">=</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"n\">Input</span><span class=\"p\">(</span><span class=\"s1\">'username'</span><span class=\"p\">)),</span>\n            <span class=\"n\">Col</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"o\">=</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"o\">=</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"n\">Input</span><span class=\"p\">(</span><span class=\"s1\">'password'</span><span class=\"p\">)),</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n</pre>\n<div>\n<p>Note</p>\n<p>For the documentation of the constructor of each component, please\nfill in their docstrings under their signature in Python code, UTSL !</p>\n</div>\n</div>\n<div id=\"silly-and-stupid-context-based-rendering\">\n<h2>Silly and Stupid context based rendering</h2>\n<p>You could render as such in jinja (or in Python without the curly braces):\n<tt>{{ form._phtml.jinja(form) }}</tt>, since all rendering logic should already be\nin phtml.</p>\n</div>\n<div id=\"thank-you\">\n<h2>Thank you</h2>\n<p>Thanks a lot for reading. Hope this will serve as a useful example for anybody\non a mission to \u201crefactor HTML in Python\u201d.</p>\n</div>\n\n          </div>"}, "last_serial": 4046374, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "d52afd2ef22cc25e65235f1fad528757", "sha256": "c8503b1ecdf4a67fd31ba7f43d7b6de18ce7c249ca279aefa0dab2a9342f61e8"}, "downloads": -1, "filename": "phtml-0.0.1.tar.gz", "has_sig": true, "md5_digest": "d52afd2ef22cc25e65235f1fad528757", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4017, "upload_time": "2018-07-10T07:16:24", "upload_time_iso_8601": "2018-07-10T07:16:24.562375Z", "url": "https://files.pythonhosted.org/packages/c8/2f/9c2ff4317d3f0bd773273aba4e0f96036f66b85212038882ee17df39253e/phtml-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d52afd2ef22cc25e65235f1fad528757", "sha256": "c8503b1ecdf4a67fd31ba7f43d7b6de18ce7c249ca279aefa0dab2a9342f61e8"}, "downloads": -1, "filename": "phtml-0.0.1.tar.gz", "has_sig": true, "md5_digest": "d52afd2ef22cc25e65235f1fad528757", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4017, "upload_time": "2018-07-10T07:16:24", "upload_time_iso_8601": "2018-07-10T07:16:24.562375Z", "url": "https://files.pythonhosted.org/packages/c8/2f/9c2ff4317d3f0bd773273aba4e0f96036f66b85212038882ee17df39253e/phtml-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:16 2020"}