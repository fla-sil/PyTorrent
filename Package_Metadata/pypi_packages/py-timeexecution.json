{"info": {"author": "Niels Lensink", "author_email": "niels@elements.nl", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Web Environment", "Intended Audience :: Developers", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Topic :: Internet :: WWW/HTTP"], "description": "Time Execution\n==============\n\n.. image:: https://secure.travis-ci.org/kpn-digital/py-timeexecution.svg?branch=master\n    :target:  http://travis-ci.org/kpn-digital/py-timeexecution?branch=master\n\n.. image:: https://img.shields.io/codecov/c/github/kpn-digital/py-timeexecution/master.svg\n    :target: http://codecov.io/github/kpn-digital/py-timeexecution?branch=master\n\n.. image:: https://img.shields.io/pypi/v/py-timeexecution.svg\n    :target: https://pypi.python.org/pypi/py-timeexecution\n\n.. image:: https://readthedocs.org/projects/py-timeexecution/badge/?version=latest\n    :target: http://py-timeexecution.readthedocs.org/en/latest/?badge=latest\n\n\nThis package is designed to record metrics of the application into a backend.\nWith the help of grafana_ you can easily create dashboards with them\n\n\nFeatures\n--------\n\n- Sending data to multiple backends\n- Custom backends\n- Hooks\n\nBackends\n--------\n\n- InfluxDB 0.8\n- Elasticsearch 2.1\n\n\nInstallation\n------------\n\n.. code-block:: bash\n\n    $ pip install py-timeexecution\n\nUsage\n-----\n\nTo use this package you decorate the functions you want to time its execution.\nEvery wrapped function will create a metric consisting of 3 default values:\n\n- `name` - The name of the series the metric will be stored in\n- `value` - The time it took in ms for the wrapped function to complete\n- `hostname` - The hostname of the machine the code is running on\n\nSee the following example\n\n.. code-block:: python\n\n    from time_execution import configure, time_execution\n    from time_execution.backends.influxdb import InfluxBackend\n    from time_execution.backends.elasticsearch import ElasticsearchBackend\n\n    # Setup the desired backend\n    influx = InfluxBackend(host='influx', database='metrics', use_udp=False)\n    elasticsearch = ElasticsearchBackend('elasticsearch', index='metrics')\n\n    # Configure the time_execution decorator\n    configure(backends=[influx, elasticsearch])\n\n    # Wrap the methods where u want the metrics\n    @time_execution\n    def hello():\n        return 'World'\n\n    # Now when we call hello() and we will get metrics in our backends\n    hello()\n\nThis will result in an entry in the influxdb\n\n.. code-block:: json\n\n    [\n        {\n            \"name\": \"__main__.hello\",\n            \"columns\": [\n                \"time\",\n                \"sequence_number\",\n                \"value\",\n                \"hostname\",\n            ],\n            \"points\": [\n                [\n                    1449739813939,\n                    1111950001,\n                    312,\n                    \"machine.name\",\n                ]\n            ]\n        }\n    ]\n\nAnd the following in Elasticsearch\n\n.. code-block:: json\n\n    [\n        {\n            \"_index\": \"metrics-2016.01.28\",\n            \"_type\": \"metric\",\n            \"_id\": \"AVKIp9DpnPWamvqEzFB3\",\n            \"_score\": null,\n            \"_source\": {\n                \"timestamp\": \"2016-01-28T14:34:05.416968\",\n                \"hostname\": \"dfaa4928109f\",\n                \"name\": \"__main__.hello\",\n                \"value\": 312\n            },\n            \"sort\": [\n                1453991645416\n            ]\n        }\n    ]\n\n\nHooks\n-----\n\n`time_execution` supports hooks where you can change the metric before its\nbeing send to the backend.\n\nWith a hook you can add additional and change existing fields. This can be\nuseful for cases where you would like to add a column to the metric based on\nthe response of the wrapped function.\n\nA hook will always get 3 arguments:\n\n- `response` - The returned value of the wrapped function\n- `exception` - The raised exception of the wrapped function\n- `metric` - A dict containing the data to be send to the backend\n- `func_args` - Original args received by the wrapped function.\n- `func_kwargs` - Original kwargs received by the wrapped function.\n\nFrom within a hook you can change the `name` if you want the metrics to be split\ninto multiple series.\n\nSee the following example how to setup hooks.\n\n.. code-block:: python\n\n    # Now lets create a hook\n    def my_hook(response, exception, metric, func_args, func_kwargs):\n        status_code = getattr(response, 'status_code', None)\n        if status_code:\n            return dict(\n                name='{}.{}'.format(metric['name'], status_code),\n                extra_field='foo bar'\n            )\n\n    # Configure the time_execution decorator, but now with hooks\n    configure(backends=[backend], hooks=[my_hook])\n\nManually sending metrics\n------------------------\n\nYou can also send any metric you have manually to the backend. These will not\nadd the default values and will not hit the hooks.\n\nSee the following example.\n\n.. code-block:: python\n\n    loadavg = os.getloadavg()\n    write_metric('cpu.load.1m', value=loadavg[0])\n    write_metric('cpu.load.5m', value=loadavg[1])\n    write_metric('cpu.load.15m', value=loadavg[2])\n\n.. _grafana: http://grafana.org/\n\n\nCustom Backend\n--------------\n\nWriting a custom backend is very simple, all you need to do is create a class\nwith a `write` method. It is not required to extend `BaseMetricsBackend`\nbut in order to easily upgrade I recommend u do.\n\n.. code-block:: python\n\n    from time_execution.backends.base import BaseMetricsBackend\n\n\n    class MetricsPrinter(BaseMetricsBackend):\n        def write(self, name, **data):\n            print(name, data)\n\n\nContribute\n----------\n\nYou have something to contribute ? Great !\nA few things that may come in handy.\n\nTesting in this project is done via docker. There is a docker-compose to easily\nget all the required containers up and running.\n\nThere is a Makefile with a few targets that we use often:\n\n- `make test`\n- `make isort`\n- `make lint`\n- `make build`\n- `make setup.py`\n\nAll of these make targets can be prefixed by `docker/`. This will execute\nthe target inside the docker container instead of on your local machine.\nFor example `make docker/build`.", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kpn-digital/py-timeexecution", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "py-timeexecution", "package_url": "https://pypi.org/project/py-timeexecution/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/py-timeexecution/", "project_urls": {"Homepage": "https://github.com/kpn-digital/py-timeexecution"}, "release_url": "https://pypi.org/project/py-timeexecution/1.3.0/", "requires_dist": null, "requires_python": "", "summary": "Python project", "version": "1.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"http://travis-ci.org/kpn-digital/py-timeexecution?branch=master\" rel=\"nofollow\"><img alt=\"https://secure.travis-ci.org/kpn-digital/py-timeexecution.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5839980a14a2f46306b327db854ebcd95319f3f8/68747470733a2f2f7365637572652e7472617669732d63692e6f72672f6b706e2d6469676974616c2f70792d74696d65657865637574696f6e2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"http://codecov.io/github/kpn-digital/py-timeexecution?branch=master\" rel=\"nofollow\"><img alt=\"https://img.shields.io/codecov/c/github/kpn-digital/py-timeexecution/master.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1b88a0733cd73b36c497c24a10091012ef44f79b/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f6769746875622f6b706e2d6469676974616c2f70792d74696d65657865637574696f6e2f6d61737465722e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/py-timeexecution\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/py-timeexecution.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1e8ebaa48fe8ec44ec0175e23a06bb1605924e42/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f70792d74696d65657865637574696f6e2e737667\"></a>\n<a href=\"http://py-timeexecution.readthedocs.org/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"https://readthedocs.org/projects/py-timeexecution/badge/?version=latest\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c247121c42bf080462c517f853bde897353b9899/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f70792d74696d65657865637574696f6e2f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<p>This package is designed to record metrics of the application into a backend.\nWith the help of <a href=\"http://grafana.org/\" rel=\"nofollow\">grafana</a> you can easily create dashboards with them</p>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>Sending data to multiple backends</li>\n<li>Custom backends</li>\n<li>Hooks</li>\n</ul>\n</div>\n<div id=\"backends\">\n<h2>Backends</h2>\n<ul>\n<li>InfluxDB 0.8</li>\n<li>Elasticsearch 2.1</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>$ pip install py-timeexecution\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>To use this package you decorate the functions you want to time its execution.\nEvery wrapped function will create a metric consisting of 3 default values:</p>\n<ul>\n<li><cite>name</cite> - The name of the series the metric will be stored in</li>\n<li><cite>value</cite> - The time it took in ms for the wrapped function to complete</li>\n<li><cite>hostname</cite> - The hostname of the machine the code is running on</li>\n</ul>\n<p>See the following example</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">time_execution</span> <span class=\"kn\">import</span> <span class=\"n\">configure</span><span class=\"p\">,</span> <span class=\"n\">time_execution</span>\n<span class=\"kn\">from</span> <span class=\"nn\">time_execution.backends.influxdb</span> <span class=\"kn\">import</span> <span class=\"n\">InfluxBackend</span>\n<span class=\"kn\">from</span> <span class=\"nn\">time_execution.backends.elasticsearch</span> <span class=\"kn\">import</span> <span class=\"n\">ElasticsearchBackend</span>\n\n<span class=\"c1\"># Setup the desired backend</span>\n<span class=\"n\">influx</span> <span class=\"o\">=</span> <span class=\"n\">InfluxBackend</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s1\">'influx'</span><span class=\"p\">,</span> <span class=\"n\">database</span><span class=\"o\">=</span><span class=\"s1\">'metrics'</span><span class=\"p\">,</span> <span class=\"n\">use_udp</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">elasticsearch</span> <span class=\"o\">=</span> <span class=\"n\">ElasticsearchBackend</span><span class=\"p\">(</span><span class=\"s1\">'elasticsearch'</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"s1\">'metrics'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Configure the time_execution decorator</span>\n<span class=\"n\">configure</span><span class=\"p\">(</span><span class=\"n\">backends</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">influx</span><span class=\"p\">,</span> <span class=\"n\">elasticsearch</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># Wrap the methods where u want the metrics</span>\n<span class=\"nd\">@time_execution</span>\n<span class=\"k\">def</span> <span class=\"nf\">hello</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"s1\">'World'</span>\n\n<span class=\"c1\"># Now when we call hello() and we will get metrics in our backends</span>\n<span class=\"n\">hello</span><span class=\"p\">()</span>\n</pre>\n<p>This will result in an entry in the influxdb</p>\n<pre><span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n        <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"__main__.hello\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"columns\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"s2\">\"time\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"sequence_number\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"value\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"hostname\"</span><span class=\"p\">,</span>\n        <span class=\"p\">],</span>\n        <span class=\"nt\">\"points\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"p\">[</span>\n                <span class=\"mi\">1449739813939</span><span class=\"p\">,</span>\n                <span class=\"mi\">1111950001</span><span class=\"p\">,</span>\n                <span class=\"mi\">312</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"machine.name\"</span><span class=\"p\">,</span>\n            <span class=\"p\">]</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n</pre>\n<p>And the following in Elasticsearch</p>\n<pre><span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n        <span class=\"nt\">\"_index\"</span><span class=\"p\">:</span> <span class=\"s2\">\"metrics-2016.01.28\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"_type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"metric\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"_id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"AVKIp9DpnPWamvqEzFB3\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"_score\"</span><span class=\"p\">:</span> <span class=\"kc\">null</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"_source\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"nt\">\"timestamp\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2016-01-28T14:34:05.416968\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"hostname\"</span><span class=\"p\">:</span> <span class=\"s2\">\"dfaa4928109f\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"__main__.hello\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"value\"</span><span class=\"p\">:</span> <span class=\"mi\">312</span>\n        <span class=\"p\">},</span>\n        <span class=\"nt\">\"sort\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"mi\">1453991645416</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"hooks\">\n<h2>Hooks</h2>\n<p><cite>time_execution</cite> supports hooks where you can change the metric before its\nbeing send to the backend.</p>\n<p>With a hook you can add additional and change existing fields. This can be\nuseful for cases where you would like to add a column to the metric based on\nthe response of the wrapped function.</p>\n<p>A hook will always get 3 arguments:</p>\n<ul>\n<li><cite>response</cite> - The returned value of the wrapped function</li>\n<li><cite>exception</cite> - The raised exception of the wrapped function</li>\n<li><cite>metric</cite> - A dict containing the data to be send to the backend</li>\n<li><cite>func_args</cite> - Original args received by the wrapped function.</li>\n<li><cite>func_kwargs</cite> - Original kwargs received by the wrapped function.</li>\n</ul>\n<p>From within a hook you can change the <cite>name</cite> if you want the metrics to be split\ninto multiple series.</p>\n<p>See the following example how to setup hooks.</p>\n<pre><span class=\"c1\"># Now lets create a hook</span>\n<span class=\"k\">def</span> <span class=\"nf\">my_hook</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"n\">exception</span><span class=\"p\">,</span> <span class=\"n\">metric</span><span class=\"p\">,</span> <span class=\"n\">func_args</span><span class=\"p\">,</span> <span class=\"n\">func_kwargs</span><span class=\"p\">):</span>\n    <span class=\"n\">status_code</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"s1\">'status_code'</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">status_code</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"nb\">dict</span><span class=\"p\">(</span>\n            <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'</span><span class=\"si\">{}</span><span class=\"s1\">.</span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">metric</span><span class=\"p\">[</span><span class=\"s1\">'name'</span><span class=\"p\">],</span> <span class=\"n\">status_code</span><span class=\"p\">),</span>\n            <span class=\"n\">extra_field</span><span class=\"o\">=</span><span class=\"s1\">'foo bar'</span>\n        <span class=\"p\">)</span>\n\n<span class=\"c1\"># Configure the time_execution decorator, but now with hooks</span>\n<span class=\"n\">configure</span><span class=\"p\">(</span><span class=\"n\">backends</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">backend</span><span class=\"p\">],</span> <span class=\"n\">hooks</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">my_hook</span><span class=\"p\">])</span>\n</pre>\n</div>\n<div id=\"manually-sending-metrics\">\n<h2>Manually sending metrics</h2>\n<p>You can also send any metric you have manually to the backend. These will not\nadd the default values and will not hit the hooks.</p>\n<p>See the following example.</p>\n<pre><span class=\"n\">loadavg</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getloadavg</span><span class=\"p\">()</span>\n<span class=\"n\">write_metric</span><span class=\"p\">(</span><span class=\"s1\">'cpu.load.1m'</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"n\">loadavg</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"n\">write_metric</span><span class=\"p\">(</span><span class=\"s1\">'cpu.load.5m'</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"n\">loadavg</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"n\">write_metric</span><span class=\"p\">(</span><span class=\"s1\">'cpu.load.15m'</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"n\">loadavg</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n</pre>\n</div>\n<div id=\"custom-backend\">\n<h2>Custom Backend</h2>\n<p>Writing a custom backend is very simple, all you need to do is create a class\nwith a <cite>write</cite> method. It is not required to extend <cite>BaseMetricsBackend</cite>\nbut in order to easily upgrade I recommend u do.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">time_execution.backends.base</span> <span class=\"kn\">import</span> <span class=\"n\">BaseMetricsBackend</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MetricsPrinter</span><span class=\"p\">(</span><span class=\"n\">BaseMetricsBackend</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">write</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">data</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"contribute\">\n<h2>Contribute</h2>\n<p>You have something to contribute ? Great !\nA few things that may come in handy.</p>\n<p>Testing in this project is done via docker. There is a docker-compose to easily\nget all the required containers up and running.</p>\n<p>There is a Makefile with a few targets that we use often:</p>\n<ul>\n<li><cite>make test</cite></li>\n<li><cite>make isort</cite></li>\n<li><cite>make lint</cite></li>\n<li><cite>make build</cite></li>\n<li><cite>make setup.py</cite></li>\n</ul>\n<p>All of these make targets can be prefixed by <cite>docker/</cite>. This will execute\nthe target inside the docker container instead of on your local machine.\nFor example <cite>make docker/build</cite>.</p>\n</div>\n\n          </div>"}, "last_serial": 3176127, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "7f928777de28db767cf4ba10b3a6f14f", "sha256": "defb4cf18f682372b7e0a7aeeec7768127ff8083562adeb5c6bdee67f9ef1ba0"}, "downloads": -1, "filename": "py-timeexecution-1.0.0.tar.gz", "has_sig": false, "md5_digest": "7f928777de28db767cf4ba10b3a6f14f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11349, "upload_time": "2015-12-07T23:13:05", "upload_time_iso_8601": "2015-12-07T23:13:05.856742Z", "url": "https://files.pythonhosted.org/packages/8c/a5/ce767a64543dc382bb4d4888623d19b91a6479749cbf9de89f946b8f6ca1/py-timeexecution-1.0.0.tar.gz", "yanked": false}], "1.0.1": [], "1.0.2": [{"comment_text": "", "digests": {"md5": "a361d65500be5d5407d811616763ac1e", "sha256": "3acc9768eeae398c22cff7431df657370b08071261168d7b23d01691c702d764"}, "downloads": -1, "filename": "py-timeexecution-1.0.2.tar.gz", "has_sig": false, "md5_digest": "a361d65500be5d5407d811616763ac1e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14877, "upload_time": "2015-12-14T12:32:49", "upload_time_iso_8601": "2015-12-14T12:32:49.352494Z", "url": "https://files.pythonhosted.org/packages/7a/e0/195e16078342b347f1147db6dec1e410365274442970f02d7ecff3a12de6/py-timeexecution-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "138673feaf79fb5ea16b5ffa085fa1ae", "sha256": "3ecd0e6b9c94833667ac0bd7525792502a2dec5de38a350b0210449463f1f5e6"}, "downloads": -1, "filename": "py-timeexecution-1.0.3.tar.gz", "has_sig": false, "md5_digest": "138673feaf79fb5ea16b5ffa085fa1ae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14873, "upload_time": "2015-12-14T12:49:29", "upload_time_iso_8601": "2015-12-14T12:49:29.071400Z", "url": "https://files.pythonhosted.org/packages/73/c6/d42529146c3c36f45851cfebd18bcf25de78b54411d85d6b641bbeba2208/py-timeexecution-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "215bd23193156cac54e2ffd8845e5b1f", "sha256": "2e7f55e4457f4e4a609e3eb2d55e205cf990a83190bd33c0b2daa995aa125340"}, "downloads": -1, "filename": "py-timeexecution-1.0.4.tar.gz", "has_sig": false, "md5_digest": "215bd23193156cac54e2ffd8845e5b1f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14873, "upload_time": "2015-12-14T12:53:42", "upload_time_iso_8601": "2015-12-14T12:53:42.849222Z", "url": "https://files.pythonhosted.org/packages/1b/e8/27cf02786aead40794a72221a458f376f931a5034efb328e4c5fdc43af3e/py-timeexecution-1.0.4.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "1524fe4cae72e7f7905fa835a94fa1ff", "sha256": "469bd53d47da91bdd0e3eb5c9571d18e01af9b93832d71082beb0e52748468a0"}, "downloads": -1, "filename": "py-timeexecution-1.1.0.tar.gz", "has_sig": false, "md5_digest": "1524fe4cae72e7f7905fa835a94fa1ff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14906, "upload_time": "2016-01-21T12:30:34", "upload_time_iso_8601": "2016-01-21T12:30:34.131786Z", "url": "https://files.pythonhosted.org/packages/c0/db/1770b3fab1e9a56a3a0ec99ea6ebb21a91afa2dccc8d1f1b3388cb380106/py-timeexecution-1.1.0.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "baa6f39052db101b7a37be0b09ac70eb", "sha256": "b7072966c38b714b05d18c6f98381540e3b7119dd98dfac5d9618ab5948d68b3"}, "downloads": -1, "filename": "py-timeexecution-1.2.0.tar.gz", "has_sig": false, "md5_digest": "baa6f39052db101b7a37be0b09ac70eb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15019, "upload_time": "2016-01-26T15:00:30", "upload_time_iso_8601": "2016-01-26T15:00:30.569318Z", "url": "https://files.pythonhosted.org/packages/c8/32/986da9a423a3c7c2088df872035c121d6febb7f7a0b92fd4571ed3bba62c/py-timeexecution-1.2.0.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "7755ae631021ab2e09e37f692baa8aa5", "sha256": "65b4b48590877662a0217289dbc5033acb3544c5227f3576272278e00a8dfe8d"}, "downloads": -1, "filename": "py-timeexecution-1.3.0.tar.gz", "has_sig": false, "md5_digest": "7755ae631021ab2e09e37f692baa8aa5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18190, "upload_time": "2016-02-01T13:49:18", "upload_time_iso_8601": "2016-02-01T13:49:18.108784Z", "url": "https://files.pythonhosted.org/packages/e2/53/14170006583c1e773832abd8a66b4b334c3ff4c03cab59fee402fd3f0ee4/py-timeexecution-1.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7755ae631021ab2e09e37f692baa8aa5", "sha256": "65b4b48590877662a0217289dbc5033acb3544c5227f3576272278e00a8dfe8d"}, "downloads": -1, "filename": "py-timeexecution-1.3.0.tar.gz", "has_sig": false, "md5_digest": "7755ae631021ab2e09e37f692baa8aa5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18190, "upload_time": "2016-02-01T13:49:18", "upload_time_iso_8601": "2016-02-01T13:49:18.108784Z", "url": "https://files.pythonhosted.org/packages/e2/53/14170006583c1e773832abd8a66b4b334c3ff4c03cab59fee402fd3f0ee4/py-timeexecution-1.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:14:16 2020"}