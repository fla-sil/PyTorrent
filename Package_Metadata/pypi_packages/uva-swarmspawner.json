{"info": {"author": "Christian Barra", "author_email": "info@cassiny.io", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "==============================\nThis project is deprecated, please check `DockerSpawner <https://github.com/jupyterhub/dockerspawner>`_.\n==============================\n\n==============================\nSwarmSpawner\n==============================\n\n.. image:: https://badge.fury.io/py/swarmspawner.svg\n   :target: https://badge.fury.io/py/swarmspawner\n   :alt: PyPI version\n\n.. image:: https://img.shields.io/pypi/pyversions/swarmspawner.svg\n   :target: https://pypi.org/project/swarmspawner/\n   :alt: Python Versions\n\n\n**SwarmSpawner** enables `JupyterHub <https://github.com/jupyterhub/jupyterhub>`_ to spawn single user notebook servers in Docker Services.\n\nMore info about Docker Services `here <https://docs.docker.com/engine/reference/commandline/service_create/>`_.\n\n\nPrerequisites\n================\n\nPython version 3.3 and above is required.\n\n\nInstallation\n================\n\n.. code-block:: sh\n\n   pip install swarmspawner\n\nInstallation from GitHub\n============================\n\n.. code-block:: sh\n\n   git clone https://github.com/cassinyio/SwarmSpawner\n   cd SwarmSpawner\n   python setup.py install\n\nConfiguration\n================\n\nYou can find an example jupyter_config.py inside `examples <examples>`_.\n\nThe spawner\n================\nDocker Engine in Swarm mode and the related services work in a different way compared to Docker containers.\n\nTell JupyterHub to use SwarmSpawner by adding the following lines to your `jupyterhub_config.py`:\n\n.. code-block:: python\n\n        c.JupyterHub.spawner_class = 'cassinyspawner.SwarmSpawner'\n        c.JupyterHub.hub_ip = '0.0.0.0'\n        # This should be the name of the jupyterhub service\n        c.SwarmSpawner.jupyterhub_service_name = 'NameOfTheService'\n\nWhat is ``jupyterhub_service_name``?\n\nInside a Docker engine in Swarm mode the services use a `name` instead of a `ip` to communicate with each other.\n'jupyterhub_service_name' is the name of ther service for the JupyterHub.\n\nNetworks\n============\nIt's important to put the JupyterHub service (also the proxy) and the services that are running jupyter notebook inside the same network, otherwise they couldn't reach each other.\nSwarmSpawner use the service's name instead of the service's ip, as a consequence JupyterHub and servers should share the same overlay network (network across nodes).\n\n.. code-block:: python\n\n        #list of networks\n        c.SwarmSpawner.networks = [\"mynetwork\"]\n\n\nDefine the services inside jupyterhub_config.py\n===============================================\nYou can define *container_spec*, *resource_spec* and *networks* inside **jupyterhub_config.py**.\n\nContainer_spec__\n-------------------\n__ https://github.com/docker/docker-py/blob/master/docs/user_guides/swarm_services.md\n\n\n``command`` and ``args`` depends on the image that you are using.\n\nIf you use one of the images from the Jupyter docker-stack you need to specify ``args`` as: ``/usr/local/bin/start-singleuser.sh``\n\nIf you are using a specific image, well it's up to you to specify the right command.\n\n.. code-block:: python\n\n    c.SwarmSpawner.container_spec = {\n                  # The command to run inside the service\n                  # 'args' : ['/usr/local/bin/start-singleuser.sh'], # (list)\n                  'Image' : 'YourImage',\n                  'mounts' : mounts\n          }\n\n\n**Note:** in a container spec, ``args`` sets the equivalent of CMD in the Dockerfile, ``command`` sets the equivalent of ENTRYPOINT.\nThe notebook server command should not be the ENTRYPOINT, so generally use ``args``, not ``command``, to specify how to launch the notebook server.\n\nSee this `issue <https://github.com/cassinyio/SwarmSpawner/issues/6>`_  for more info.\n\nBind a Host dir\n---------------------\nWith ``'type':'bind'`` you mount a local directory of the host inside the container.\n\n*Remember that source should exist in the node where you are creating the service.*\n\n.. code-block:: python\n\n        notebook_dir = os.environ.get('NOTEBOOK_DIR') or '/home/jovyan/work'\n        c.SwarmSpawner.notebook_dir = notebook_dir\n\n.. code-block:: python\n\n        mounts = [{'type' : 'bind',\n                'source' : 'MountPointOnTheHost',\n                'target' : 'MountPointInsideTheContainer',}]\n\n\nMount a named volume\n----------------------\nWith ``'type':'volume'`` you mount a Docker Volume inside the container.\nIf the volume doesn't exist it will be created.\n\n.. code-block:: python\n\n        mounts = [{'type' : 'volume',\n                'source' : 'NameOfTheVolume',\n                'target' : 'MountPointInsideTheContainer',}]\n\n\nNamed path\n--------------\nFor both types, volume and bind, you can specify a ``{username}`` inside the source:\n\n.. code-block:: python\n\n        mounts = [{'type' : 'volume',\n                'source' : 'jupyterhub-user-{username}',\n                'target' : 'MountPointInsideTheContainer',}]\n\n\nusername will be the hashed version of the username.\n\n\nMount an anonymous volume\n-------------------------\n**This kind of volume will be removed with the service.**\n\n.. code-block:: python\n\n        mounts = [{'type' : 'volume',\n                'target' : 'MountPointInsideTheContainer',}]\n\n\nResource_spec\n---------------\n\nYou can also specify some resource for each service\n\n.. code-block:: python\n\n        c.SwarmSpawner.resource_spec = {\n                        'cpu_limit' : 1000, # (int) \u2013 CPU limit in units of 10^9 CPU shares.\n                        'mem_limit' : int(512 * 1e6), # (int) \u2013 Memory limit in Bytes.\n                        'cpu_reservation' : 1000, # (int) \u2013 CPU reservation in units of 10^9 CPU shares.\n                        'mem_reservation' : int(512 * 1e6), # (int) \u2013 Memory reservation in Bytes\n                        }\n\nUsing user_options\n--------------------\n\nThere is the possibility to set parameters using ``user_options``\n\n.. code-block:: python\n\n        # To use user_options in service creation\n        c.SwarmSpawner.use_user_options = False\n\n\nTo control the creation of the services you have 2 ways, using **jupyterhub_config.py** or **user_options**.\n\nRemember that at the end you are just using the `Docker Engine API <https://docs.docker.com/engine/api/>`_.\n\n**user_options, if used, will overwrite jupyter_config.py for services.**\n\nIf you set ``c.SwarmSpawner.use_user_option = True`` the spawner will use the dict passed through the form or as json body when using the Hub Api.\n\nThe spawner expect a dict with these keys:\n\n.. code-block:: python\n\n        user_options = {\n                'container_spec' : {\n                        # (string or list) command to run in the image.\n                        'args' : ['/usr/local/bin/start-singleuser.sh'],\n                        # name of the image\n                        'Image' : '',\n                        'mounts' : mounts,\n                        'resource_spec' : {\n                                # (int) \u2013 CPU limit in units of 10^9 CPU shares.\n                                'cpu_limit': int(1 * 1e9),\n                                # (int) \u2013 Memory limit in Bytes.\n                                'mem_limit': int(512 * 1e6),\n                                # (int) \u2013 CPU reservation in units of 10^9 CPU shares.\n                                'cpu_reservation': int(1 * 1e9),\n                                # (int) \u2013 Memory reservation in bytes\n                                'mem_reservation': int(512 * 1e6),\n                                },\n                        # list of constrains\n                        'placement' : [],\n                        # list of networks\n                        'network' : [],\n                        # name of service\n                        'name' : ''\n                        }\n                }\n\n\nNames of the Jupyter notebook service inside Docker engine in Swarm mode\n--------------------------------------------------------------------------\n\nWhen JupyterHub spawns a new Jupyter notebook server the name of the service will be ``{service_prefix}-{service_owner}-{service_suffix}``\n\nYou can change the service_prefix in this way:\n\nPrefix of the service in Docker\n\n.. code-block:: python\n\n        c.SwarmSpawner.service_prefix = \"jupyterhub\"\n\n\n``service_owner`` is the hexdigest() of the hashed ``user.name``.\n\nIn case of named servers (more than one server for user) ``service_suffix`` is the name of the server, otherwise is always 1.\n\nDownloading images\n-------------------\nDocker Engine in Swarm mode downloads images automatically from the repository.\nEither the image is available on the remote repository or locally, if not you will get an error.\n\nBecause before starting the service you have to complete the download of the image is better to have a longer timeout (default is 30 secs)\n\n.. code-block:: python\n\n        c.SwarmSpawner.start_timeout = 60 * 5\n\n\nYou can use all the docker images inside the `Jupyter docker-stacks`_.\n\n.. _Jupyter docker-stacks: https://github.com/jupyter/docker-stacks\n\nContributing\n-------------\nIf you would like to contribute to the project, please read `contributor documentation <http://jupyter.readthedocs.io/en/latest/contributor/content-contributor.html>`_.\n\nFor a **development install**, clone the `repository <https://github.com/cassiny/SwarmSpawner>`_ and then install from source:\n\n.. code-block:: sh\n\n        git clone https://github.com/cassiny/SwarmSpawner\n        cd SwarmSpawner\n        pip install -r requirements/base.txt -e .\n\n\nCredit\n=======\n`DockerSpawner <https://github.com/jupyterhub/dockerspawner>`_\n\nLicense\n=======\nAll code is licensed under the terms of the revised BSD license.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/cassinyio/SwarmSpawner", "keywords": "Interactive", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "uva-swarmspawner", "package_url": "https://pypi.org/project/uva-swarmspawner/", "platform": "", "project_url": "https://pypi.org/project/uva-swarmspawner/", "project_urls": {"Homepage": "https://github.com/cassinyio/SwarmSpawner"}, "release_url": "https://pypi.org/project/uva-swarmspawner/1.1/", "requires_dist": null, "requires_python": "", "summary": "UvA-versie van: SwarmSpawner: A spawner for JupyterHub that uses Docker Swarm's services", "version": "1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            ==============================<br>This project is deprecated, please check `DockerSpawner &lt;https://github.com/jupyterhub/dockerspawner&gt;`_.<br>==============================<br><br>==============================<br>SwarmSpawner<br>==============================<br><br>.. image:: https://badge.fury.io/py/swarmspawner.svg<br>   :target: https://badge.fury.io/py/swarmspawner<br>   :alt: PyPI version<br><br>.. image:: https://img.shields.io/pypi/pyversions/swarmspawner.svg<br>   :target: https://pypi.org/project/swarmspawner/<br>   :alt: Python Versions<br><br><br>**SwarmSpawner** enables `JupyterHub &lt;https://github.com/jupyterhub/jupyterhub&gt;`_ to spawn single user notebook servers in Docker Services.<br><br>More info about Docker Services `here &lt;https://docs.docker.com/engine/reference/commandline/service_create/&gt;`_.<br><br><br>Prerequisites<br>================<br><br>Python version 3.3 and above is required.<br><br><br>Installation<br>================<br><br>.. code-block:: sh<br><br>   pip install swarmspawner<br><br>Installation from GitHub<br>============================<br><br>.. code-block:: sh<br><br>   git clone https://github.com/cassinyio/SwarmSpawner<br>   cd SwarmSpawner<br>   python setup.py install<br><br>Configuration<br>================<br><br>You can find an example jupyter_config.py inside `examples &lt;examples&gt;`_.<br><br>The spawner<br>================<br>Docker Engine in Swarm mode and the related services work in a different way compared to Docker containers.<br><br>Tell JupyterHub to use SwarmSpawner by adding the following lines to your `jupyterhub_config.py`:<br><br>.. code-block:: python<br><br>        c.JupyterHub.spawner_class = 'cassinyspawner.SwarmSpawner'<br>        c.JupyterHub.hub_ip = '0.0.0.0'<br>        # This should be the name of the jupyterhub service<br>        c.SwarmSpawner.jupyterhub_service_name = 'NameOfTheService'<br><br>What is ``jupyterhub_service_name``?<br><br>Inside a Docker engine in Swarm mode the services use a `name` instead of a `ip` to communicate with each other.<br>'jupyterhub_service_name' is the name of ther service for the JupyterHub.<br><br>Networks<br>============<br>It's important to put the JupyterHub service (also the proxy) and the services that are running jupyter notebook inside the same network, otherwise they couldn't reach each other.<br>SwarmSpawner use the service's name instead of the service's ip, as a consequence JupyterHub and servers should share the same overlay network (network across nodes).<br><br>.. code-block:: python<br><br>        #list of networks<br>        c.SwarmSpawner.networks = [\"mynetwork\"]<br><br><br>Define the services inside jupyterhub_config.py<br>===============================================<br>You can define *container_spec*, *resource_spec* and *networks* inside **jupyterhub_config.py**.<br><br>Container_spec__<br>-------------------<br>__ https://github.com/docker/docker-py/blob/master/docs/user_guides/swarm_services.md<br><br><br>``command`` and ``args`` depends on the image that you are using.<br><br>If you use one of the images from the Jupyter docker-stack you need to specify ``args`` as: ``/usr/local/bin/start-singleuser.sh``<br><br>If you are using a specific image, well it's up to you to specify the right command.<br><br>.. code-block:: python<br><br>    c.SwarmSpawner.container_spec = {<br>                  # The command to run inside the service<br>                  # 'args' : ['/usr/local/bin/start-singleuser.sh'], # (list)<br>                  'Image' : 'YourImage',<br>                  'mounts' : mounts<br>          }<br><br><br>**Note:** in a container spec, ``args`` sets the equivalent of CMD in the Dockerfile, ``command`` sets the equivalent of ENTRYPOINT.<br>The notebook server command should not be the ENTRYPOINT, so generally use ``args``, not ``command``, to specify how to launch the notebook server.<br><br>See this `issue &lt;https://github.com/cassinyio/SwarmSpawner/issues/6&gt;`_  for more info.<br><br>Bind a Host dir<br>---------------------<br>With ``'type':'bind'`` you mount a local directory of the host inside the container.<br><br>*Remember that source should exist in the node where you are creating the service.*<br><br>.. code-block:: python<br><br>        notebook_dir = os.environ.get('NOTEBOOK_DIR') or '/home/jovyan/work'<br>        c.SwarmSpawner.notebook_dir = notebook_dir<br><br>.. code-block:: python<br><br>        mounts = [{'type' : 'bind',<br>                'source' : 'MountPointOnTheHost',<br>                'target' : 'MountPointInsideTheContainer',}]<br><br><br>Mount a named volume<br>----------------------<br>With ``'type':'volume'`` you mount a Docker Volume inside the container.<br>If the volume doesn't exist it will be created.<br><br>.. code-block:: python<br><br>        mounts = [{'type' : 'volume',<br>                'source' : 'NameOfTheVolume',<br>                'target' : 'MountPointInsideTheContainer',}]<br><br><br>Named path<br>--------------<br>For both types, volume and bind, you can specify a ``{username}`` inside the source:<br><br>.. code-block:: python<br><br>        mounts = [{'type' : 'volume',<br>                'source' : 'jupyterhub-user-{username}',<br>                'target' : 'MountPointInsideTheContainer',}]<br><br><br>username will be the hashed version of the username.<br><br><br>Mount an anonymous volume<br>-------------------------<br>**This kind of volume will be removed with the service.**<br><br>.. code-block:: python<br><br>        mounts = [{'type' : 'volume',<br>                'target' : 'MountPointInsideTheContainer',}]<br><br><br>Resource_spec<br>---------------<br><br>You can also specify some resource for each service<br><br>.. code-block:: python<br><br>        c.SwarmSpawner.resource_spec = {<br>                        'cpu_limit' : 1000, # (int) \u2013 CPU limit in units of 10^9 CPU shares.<br>                        'mem_limit' : int(512 * 1e6), # (int) \u2013 Memory limit in Bytes.<br>                        'cpu_reservation' : 1000, # (int) \u2013 CPU reservation in units of 10^9 CPU shares.<br>                        'mem_reservation' : int(512 * 1e6), # (int) \u2013 Memory reservation in Bytes<br>                        }<br><br>Using user_options<br>--------------------<br><br>There is the possibility to set parameters using ``user_options``<br><br>.. code-block:: python<br><br>        # To use user_options in service creation<br>        c.SwarmSpawner.use_user_options = False<br><br><br>To control the creation of the services you have 2 ways, using **jupyterhub_config.py** or **user_options**.<br><br>Remember that at the end you are just using the `Docker Engine API &lt;https://docs.docker.com/engine/api/&gt;`_.<br><br>**user_options, if used, will overwrite jupyter_config.py for services.**<br><br>If you set ``c.SwarmSpawner.use_user_option = True`` the spawner will use the dict passed through the form or as json body when using the Hub Api.<br><br>The spawner expect a dict with these keys:<br><br>.. code-block:: python<br><br>        user_options = {<br>                'container_spec' : {<br>                        # (string or list) command to run in the image.<br>                        'args' : ['/usr/local/bin/start-singleuser.sh'],<br>                        # name of the image<br>                        'Image' : '',<br>                        'mounts' : mounts,<br>                        'resource_spec' : {<br>                                # (int) \u2013 CPU limit in units of 10^9 CPU shares.<br>                                'cpu_limit': int(1 * 1e9),<br>                                # (int) \u2013 Memory limit in Bytes.<br>                                'mem_limit': int(512 * 1e6),<br>                                # (int) \u2013 CPU reservation in units of 10^9 CPU shares.<br>                                'cpu_reservation': int(1 * 1e9),<br>                                # (int) \u2013 Memory reservation in bytes<br>                                'mem_reservation': int(512 * 1e6),<br>                                },<br>                        # list of constrains<br>                        'placement' : [],<br>                        # list of networks<br>                        'network' : [],<br>                        # name of service<br>                        'name' : ''<br>                        }<br>                }<br><br><br>Names of the Jupyter notebook service inside Docker engine in Swarm mode<br>--------------------------------------------------------------------------<br><br>When JupyterHub spawns a new Jupyter notebook server the name of the service will be ``{service_prefix}-{service_owner}-{service_suffix}``<br><br>You can change the service_prefix in this way:<br><br>Prefix of the service in Docker<br><br>.. code-block:: python<br><br>        c.SwarmSpawner.service_prefix = \"jupyterhub\"<br><br><br>``service_owner`` is the hexdigest() of the hashed ``user.name``.<br><br>In case of named servers (more than one server for user) ``service_suffix`` is the name of the server, otherwise is always 1.<br><br>Downloading images<br>-------------------<br>Docker Engine in Swarm mode downloads images automatically from the repository.<br>Either the image is available on the remote repository or locally, if not you will get an error.<br><br>Because before starting the service you have to complete the download of the image is better to have a longer timeout (default is 30 secs)<br><br>.. code-block:: python<br><br>        c.SwarmSpawner.start_timeout = 60 * 5<br><br><br>You can use all the docker images inside the `Jupyter docker-stacks`_.<br><br>.. _Jupyter docker-stacks: https://github.com/jupyter/docker-stacks<br><br>Contributing<br>-------------<br>If you would like to contribute to the project, please read `contributor documentation &lt;http://jupyter.readthedocs.io/en/latest/contributor/content-contributor.html&gt;`_.<br><br>For a **development install**, clone the `repository &lt;https://github.com/cassiny/SwarmSpawner&gt;`_ and then install from source:<br><br>.. code-block:: sh<br><br>        git clone https://github.com/cassiny/SwarmSpawner<br>        cd SwarmSpawner<br>        pip install -r requirements/base.txt -e .<br><br><br>Credit<br>=======<br>`DockerSpawner &lt;https://github.com/jupyterhub/dockerspawner&gt;`_<br><br>License<br>=======<br>All code is licensed under the terms of the revised BSD license.<br><br><br>\n          </div>"}, "last_serial": 3773182, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "c61f61f7fe919f650a21446b7fe994c9", "sha256": "26f10dfce7680e79229ea3e8ebd257a434f68c6ef2a27573060b1f1714c272da"}, "downloads": -1, "filename": "uva-swarmspawner-1.0.tar.gz", "has_sig": false, "md5_digest": "c61f61f7fe919f650a21446b7fe994c9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9559, "upload_time": "2018-04-17T13:11:14", "upload_time_iso_8601": "2018-04-17T13:11:14.902638Z", "url": "https://files.pythonhosted.org/packages/c2/71/86b80eee405c64d0d2ea134eadb3fc15d445db223171606617a602b6a4cc/uva-swarmspawner-1.0.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "7d3b35b95f7d967f3e104b25557cdcc6", "sha256": "11eaa0190eeb758e0c4d547fb1ba943b2482409591740481a118a4ed96fc2831"}, "downloads": -1, "filename": "uva-swarmspawner-1.1.tar.gz", "has_sig": false, "md5_digest": "7d3b35b95f7d967f3e104b25557cdcc6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11557, "upload_time": "2018-04-17T13:13:10", "upload_time_iso_8601": "2018-04-17T13:13:10.891556Z", "url": "https://files.pythonhosted.org/packages/9e/31/5c9996e3106de3e7329d34dc09dcf722413aa9c88c3757fac2d6808685da/uva-swarmspawner-1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7d3b35b95f7d967f3e104b25557cdcc6", "sha256": "11eaa0190eeb758e0c4d547fb1ba943b2482409591740481a118a4ed96fc2831"}, "downloads": -1, "filename": "uva-swarmspawner-1.1.tar.gz", "has_sig": false, "md5_digest": "7d3b35b95f7d967f3e104b25557cdcc6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11557, "upload_time": "2018-04-17T13:13:10", "upload_time_iso_8601": "2018-04-17T13:13:10.891556Z", "url": "https://files.pythonhosted.org/packages/9e/31/5c9996e3106de3e7329d34dc09dcf722413aa9c88c3757fac2d6808685da/uva-swarmspawner-1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:38:42 2020"}