{"info": {"author": "Tim Heap", "author_email": "tim@timheap.me", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3"], "description": "django-filemanager\n======================\n\nA Django app that wraps Filemanager_ from `Core Five Labs`_, adding lots\nof Djangoy goodness\n\nInstalling\n----------\n\nInstall the package::\n\n    pip install django-filemanager\n\nAdd it to your installed apps::\n\n    INSTALLED_APPS += (\n        'filemanager',\n    )\n\nSet a few config options::\n\n    FILEMANAGER_UPLOAD_ROOT = MEDIA_ROOT + 'uploads/'\n    FILEMANAGER_UPLOAD_URL = MEDIA_URL + 'uploads/'\n\nAnd include its URLs::\n\n    # in urls.py\n\n    urlpatterns += patterns(\"\",\n        (r\"^filemanager/\", include(\"filemanager.urls\")),\n    )\n\nNow, send a user to ``/filemanager/`` and they will be able to manage file\nuploads on the server.\n\nConfiguring\n-----------\n\nThe following options are supported:\n\n``FILEMANAGER_UPLOAD_URL``\n    The URL that uploaded files will be served from. This should be the\n    ``MEDIA_URL`` with an optional suffix. The suffix should be the same as\n    that used in the ``FILEMANAGER_UPLOAD_ROOT`` in most instances. For\n    example::\n\n        FILEMANAGER_UPLOAD_URL = MEDIA_URL + '/uploads/'\n\n``FILEMANAGER_UPLOAD_ROOT``\n    The directory that uploaded files should be saved to. This should be the\n    ``MEDIA_ROOT`` with an optional suffix. The suffix should be the same as\n    that used in the ``FILEMANAGER_UPLOAD_URL`` in most instances. For\n    example::\n\n        FILEMANAGER_UPLOAD_ROOT = MEDIA_ROOT + '/uploads/'\n\n``FILEMANAGER_AUTH_CALLBACK``\n    Either a callable, or a dotted Python import path to a callable, that\n    checks if a user is authorised to use the Filemanager. Three default\n    callbacks are supplied:\n\n    * ``'filemanager.auth.allow_all'``: Allow all users to use the filemanager.\n    * ``'filemanager.auth.require_staff'``: Only allow staff members (users\n      with the ``staff`` attribute).\n    * ``'filemanager.auth.require_superuser'``: Only allow superusers (users\n      with the `superuser` attribute).\n\n    The default is to only allow staff members.\n\n    If you want to write your own, it must be a callable that takes a\n    ``Request`` object and returns a boolean::\n\n        # in myapp.auth\n        def check_filemanager_auth(request):\n            return request.user.has_perm('...'):\n\n        # in settings.py\n        FILEMANAGER_AUTH_CALLBACK = 'myapp.auth.check_filemanager_auth'\n\n.. _Filemanager: https://github.com/simogeo/Filemanager\n.. _`Core Five Labs`: http://labs.corefive.com/2009/10/30/an-open-file-manager-for-ckeditor-3-0/", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/tim_heap/django-filemanager", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "django-filemanager-tjh", "package_url": "https://pypi.org/project/django-filemanager-tjh/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-filemanager-tjh/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://bitbucket.org/tim_heap/django-filemanager"}, "release_url": "https://pypi.org/project/django-filemanager-tjh/0.6.0/", "requires_dist": null, "requires_python": null, "summary": "A django filemanager app", "version": "0.6.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A Django app that wraps <a href=\"https://github.com/simogeo/Filemanager\" rel=\"nofollow\">Filemanager</a> from <a href=\"http://labs.corefive.com/2009/10/30/an-open-file-manager-for-ckeditor-3-0/\" rel=\"nofollow\">Core Five Labs</a>, adding lots\nof Djangoy goodness</p>\n<div id=\"installing\">\n<h2>Installing</h2>\n<p>Install the package:</p>\n<pre>pip install django-filemanager\n</pre>\n<p>Add it to your installed apps:</p>\n<pre>INSTALLED_APPS += (\n    'filemanager',\n)\n</pre>\n<p>Set a few config options:</p>\n<pre>FILEMANAGER_UPLOAD_ROOT = MEDIA_ROOT + 'uploads/'\nFILEMANAGER_UPLOAD_URL = MEDIA_URL + 'uploads/'\n</pre>\n<p>And include its URLs:</p>\n<pre># in urls.py\n\nurlpatterns += patterns(\"\",\n    (r\"^filemanager/\", include(\"filemanager.urls\")),\n)\n</pre>\n<p>Now, send a user to <tt>/filemanager/</tt> and they will be able to manage file\nuploads on the server.</p>\n</div>\n<div id=\"configuring\">\n<h2>Configuring</h2>\n<p>The following options are supported:</p>\n<dl>\n<dt><tt>FILEMANAGER_UPLOAD_URL</tt></dt>\n<dd><p>The URL that uploaded files will be served from. This should be the\n<tt>MEDIA_URL</tt> with an optional suffix. The suffix should be the same as\nthat used in the <tt>FILEMANAGER_UPLOAD_ROOT</tt> in most instances. For\nexample:</p>\n<pre>FILEMANAGER_UPLOAD_URL = MEDIA_URL + '/uploads/'\n</pre>\n</dd>\n<dt><tt>FILEMANAGER_UPLOAD_ROOT</tt></dt>\n<dd><p>The directory that uploaded files should be saved to. This should be the\n<tt>MEDIA_ROOT</tt> with an optional suffix. The suffix should be the same as\nthat used in the <tt>FILEMANAGER_UPLOAD_URL</tt> in most instances. For\nexample:</p>\n<pre>FILEMANAGER_UPLOAD_ROOT = MEDIA_ROOT + '/uploads/'\n</pre>\n</dd>\n<dt><tt>FILEMANAGER_AUTH_CALLBACK</tt></dt>\n<dd><p>Either a callable, or a dotted Python import path to a callable, that\nchecks if a user is authorised to use the Filemanager. Three default\ncallbacks are supplied:</p>\n<ul>\n<li><tt>'filemanager.auth.allow_all'</tt>: Allow all users to use the filemanager.</li>\n<li><tt>'filemanager.auth.require_staff'</tt>: Only allow staff members (users\nwith the <tt>staff</tt> attribute).</li>\n<li><tt>'filemanager.auth.require_superuser'</tt>: Only allow superusers (users\nwith the <cite>superuser</cite> attribute).</li>\n</ul>\n<p>The default is to only allow staff members.</p>\n<p>If you want to write your own, it must be a callable that takes a\n<tt>Request</tt> object and returns a boolean:</p>\n<pre># in myapp.auth\ndef check_filemanager_auth(request):\n    return request.user.has_perm('...'):\n\n# in settings.py\nFILEMANAGER_AUTH_CALLBACK = 'myapp.auth.check_filemanager_auth'\n</pre>\n</dd>\n</dl>\n</div>\n\n          </div>"}, "last_serial": 1414991, "releases": {"0.5.3": [{"comment_text": "", "digests": {"md5": "3b699af062946f220795a70d0ef9c395", "sha256": "aa980312ed800f051fc76996558ce3da0ba4b867959a4f286322a2984372122c"}, "downloads": -1, "filename": "django-filemanager-tjh-0.5.3.tar.gz", "has_sig": false, "md5_digest": "3b699af062946f220795a70d0ef9c395", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 772351, "upload_time": "2015-02-02T11:12:18", "upload_time_iso_8601": "2015-02-02T11:12:18.943772Z", "url": "https://files.pythonhosted.org/packages/d8/2b/0db1dd50ad89dadfe238c5d81a685ab84137ca3856ada4665ec3d62e4776/django-filemanager-tjh-0.5.3.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "10c8b945a6b8c7fbdeb65be452027b9e", "sha256": "2b82142f618afdfc942033c65a08df79024c7946bfc7e801ed3d143504944ded"}, "downloads": -1, "filename": "django-filemanager-tjh-0.6.0.tar.gz", "has_sig": false, "md5_digest": "10c8b945a6b8c7fbdeb65be452027b9e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 772340, "upload_time": "2015-02-08T12:52:55", "upload_time_iso_8601": "2015-02-08T12:52:55.500962Z", "url": "https://files.pythonhosted.org/packages/1a/38/55a2e3c6ef7d6b5553f86af939f8152aacdbd3513c1e698ddaa5d544f606/django-filemanager-tjh-0.6.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "10c8b945a6b8c7fbdeb65be452027b9e", "sha256": "2b82142f618afdfc942033c65a08df79024c7946bfc7e801ed3d143504944ded"}, "downloads": -1, "filename": "django-filemanager-tjh-0.6.0.tar.gz", "has_sig": false, "md5_digest": "10c8b945a6b8c7fbdeb65be452027b9e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 772340, "upload_time": "2015-02-08T12:52:55", "upload_time_iso_8601": "2015-02-08T12:52:55.500962Z", "url": "https://files.pythonhosted.org/packages/1a/38/55a2e3c6ef7d6b5553f86af939f8152aacdbd3513c1e698ddaa5d544f606/django-filemanager-tjh-0.6.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:36:09 2020"}