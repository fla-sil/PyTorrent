{"info": {"author": "Gabriel Rodr\u00edguez Alberich", "author_email": "gabi@gabi.is", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.3", "Topic :: Internet :: WWW/HTTP :: Dynamic Content", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "A Pythonic wrapper for the Nobel Prize API\n==========================================\n\nA simple Python wrapper for the `Nobel Prize\nAPI <http://www.nobelprize.org/nobel_organizations/nobelmedia/nobelprize_org/developer/>`__.\n\nQuickstart\n----------\n\nFirst, initialize the API wrapper:\n\n.. code:: python\n\n    import nobel\n    api = nobel.Api()\n\nNow you have access to the resources defined by the API (``prizes``,\n``laureates`` and ``countries``) and their methods.\n\nFor example, to list all laureates:\n\n.. code:: python\n\n    >>> for laureate in api.laureates.all():\n    ...     print '%s (%s)' % (laureate, laureate.born_country)\n\nTo filter (check the `Nobel Prize\nAPI <http://www.nobelprize.org/nobel_organizations/nobelmedia/nobelprize_org/developer/>`__\ndocumentation for all available filtering parameters):\n\n.. code:: python\n\n    >>> api.laureates.filter(gender='female', born_country='Iran')\n    [<Laureate id=773>, <Laureate id=817>]\n    >>> api.prizes.filter(year=1969)\n    [<Prize category=\"physics\" year=1969>, <Prize category=\"chemistry\" year=1969>,\n    <Prize category=\"medicine\" year=1969>, <Prize category=\"literature\" year=1969>,\n    <Prize category=\"peace\" year=1969>, <Prize category=\"economics\" year=1969>]\n\nTo retrieve a single resource:\n\n.. code:: python\n\n    >>> laureate = api.laureates.get(id=26)\n    >>> laureate.firstname\n    u'Albert'\n    >>> laureate.surname\n    u'Einstein'\n    >>> laureate.prizes\n    [<Prize category=\"physics\" year=1921>]\n    >>> laureate.born_country\n    <Country code=\"DE\" name=\"Germany\">\n    >>> laureate.died_country\n    <Country code=\"US\" name=\"USA\">\n\n    >>> prize = api.prizes.get(year=2000, category='economics')\n    >>> print \", \".join([str(l) for l in prize.laureates])\n    James J. Heckman, Daniel L. McFadden\n\nAs you can see, every ``Prize`` object is given a ``laureates``\nattribute populated with a list of its ``Laureate`` objects. Likewise,\nevery ``Laureate`` objects is given a ``prizes`` attribute with\n``Prize`` objects.\n\nAttributes and query parameters in the Nobel Prize API are\n``mixedCase``, but this wrapper uses the more pythonic\n``lower_case_with_underscores`` style and takes care of the conversion\nwhen filtering and accessing attributes.\n\nInstallation\n------------\n\nTo install Nobel, simply:\n\n.. code:: sh\n\n    $ pip install nobel\n\nTODO\n----\n\n-  Documentation and full reference\n-  Tests\n-  More ORM-ish stuff, like filtering using Prize, Laureate or Country\n   objects as arguments\n-  Add relation attributes, like affiliations.\n\nCredits\n-------\n\nThis is inspired by the beautifully written\n`hipchat-api <https://github.com/dobarkod/hipchat-api>`__ wrapper.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/vibragiel/nobel", "keywords": null, "license": "Apache Software License", "maintainer": null, "maintainer_email": null, "name": "nobel", "package_url": "https://pypi.org/project/nobel/", "platform": "any", "project_url": "https://pypi.org/project/nobel/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/vibragiel/nobel"}, "release_url": "https://pypi.org/project/nobel/0.2/", "requires_dist": null, "requires_python": null, "summary": "A simple pythonic wrapper for the Nobel Prize API.", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A simple Python wrapper for the <a href=\"http://www.nobelprize.org/nobel_organizations/nobelmedia/nobelprize_org/developer/\" rel=\"nofollow\">Nobel Prize\nAPI</a>.</p>\n<div id=\"quickstart\">\n<h2>Quickstart</h2>\n<p>First, initialize the API wrapper:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">nobel</span>\n<span class=\"n\">api</span> <span class=\"o\">=</span> <span class=\"n\">nobel</span><span class=\"o\">.</span><span class=\"n\">Api</span><span class=\"p\">()</span>\n</pre>\n<p>Now you have access to the resources defined by the API (<tt>prizes</tt>,\n<tt>laureates</tt> and <tt>countries</tt>) and their methods.</p>\n<p>For example, to list all laureates:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">for</span> <span class=\"n\">laureate</span> <span class=\"ow\">in</span> <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">laureates</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">():</span>\n<span class=\"o\">...</span>     <span class=\"nb\">print</span> <span class=\"s1\">'</span><span class=\"si\">%s</span><span class=\"s1\"> (</span><span class=\"si\">%s</span><span class=\"s1\">)'</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">laureate</span><span class=\"p\">,</span> <span class=\"n\">laureate</span><span class=\"o\">.</span><span class=\"n\">born_country</span><span class=\"p\">)</span>\n</pre>\n<p>To filter (check the <a href=\"http://www.nobelprize.org/nobel_organizations/nobelmedia/nobelprize_org/developer/\" rel=\"nofollow\">Nobel Prize\nAPI</a>\ndocumentation for all available filtering parameters):</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">laureates</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">gender</span><span class=\"o\">=</span><span class=\"s1\">'female'</span><span class=\"p\">,</span> <span class=\"n\">born_country</span><span class=\"o\">=</span><span class=\"s1\">'Iran'</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">Laureate</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">773</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">Laureate</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">817</span><span class=\"o\">&gt;</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">prizes</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">year</span><span class=\"o\">=</span><span class=\"mi\">1969</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">Prize</span> <span class=\"n\">category</span><span class=\"o\">=</span><span class=\"s2\">\"physics\"</span> <span class=\"n\">year</span><span class=\"o\">=</span><span class=\"mi\">1969</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">Prize</span> <span class=\"n\">category</span><span class=\"o\">=</span><span class=\"s2\">\"chemistry\"</span> <span class=\"n\">year</span><span class=\"o\">=</span><span class=\"mi\">1969</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Prize</span> <span class=\"n\">category</span><span class=\"o\">=</span><span class=\"s2\">\"medicine\"</span> <span class=\"n\">year</span><span class=\"o\">=</span><span class=\"mi\">1969</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">Prize</span> <span class=\"n\">category</span><span class=\"o\">=</span><span class=\"s2\">\"literature\"</span> <span class=\"n\">year</span><span class=\"o\">=</span><span class=\"mi\">1969</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Prize</span> <span class=\"n\">category</span><span class=\"o\">=</span><span class=\"s2\">\"peace\"</span> <span class=\"n\">year</span><span class=\"o\">=</span><span class=\"mi\">1969</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">Prize</span> <span class=\"n\">category</span><span class=\"o\">=</span><span class=\"s2\">\"economics\"</span> <span class=\"n\">year</span><span class=\"o\">=</span><span class=\"mi\">1969</span><span class=\"o\">&gt;</span><span class=\"p\">]</span>\n</pre>\n<p>To retrieve a single resource:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">laureate</span> <span class=\"o\">=</span> <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">laureates</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">26</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">laureate</span><span class=\"o\">.</span><span class=\"n\">firstname</span>\n<span class=\"sa\">u</span><span class=\"s1\">'Albert'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">laureate</span><span class=\"o\">.</span><span class=\"n\">surname</span>\n<span class=\"sa\">u</span><span class=\"s1\">'Einstein'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">laureate</span><span class=\"o\">.</span><span class=\"n\">prizes</span>\n<span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">Prize</span> <span class=\"n\">category</span><span class=\"o\">=</span><span class=\"s2\">\"physics\"</span> <span class=\"n\">year</span><span class=\"o\">=</span><span class=\"mi\">1921</span><span class=\"o\">&gt;</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">laureate</span><span class=\"o\">.</span><span class=\"n\">born_country</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Country</span> <span class=\"n\">code</span><span class=\"o\">=</span><span class=\"s2\">\"DE\"</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"Germany\"</span><span class=\"o\">&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">laureate</span><span class=\"o\">.</span><span class=\"n\">died_country</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Country</span> <span class=\"n\">code</span><span class=\"o\">=</span><span class=\"s2\">\"US\"</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"USA\"</span><span class=\"o\">&gt;</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">prize</span> <span class=\"o\">=</span> <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">prizes</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">year</span><span class=\"o\">=</span><span class=\"mi\">2000</span><span class=\"p\">,</span> <span class=\"n\">category</span><span class=\"o\">=</span><span class=\"s1\">'economics'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span> <span class=\"s2\">\", \"</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">([</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">l</span> <span class=\"ow\">in</span> <span class=\"n\">prize</span><span class=\"o\">.</span><span class=\"n\">laureates</span><span class=\"p\">])</span>\n<span class=\"n\">James</span> <span class=\"n\">J</span><span class=\"o\">.</span> <span class=\"n\">Heckman</span><span class=\"p\">,</span> <span class=\"n\">Daniel</span> <span class=\"n\">L</span><span class=\"o\">.</span> <span class=\"n\">McFadden</span>\n</pre>\n<p>As you can see, every <tt>Prize</tt> object is given a <tt>laureates</tt>\nattribute populated with a list of its <tt>Laureate</tt> objects. Likewise,\nevery <tt>Laureate</tt> objects is given a <tt>prizes</tt> attribute with\n<tt>Prize</tt> objects.</p>\n<p>Attributes and query parameters in the Nobel Prize API are\n<tt>mixedCase</tt>, but this wrapper uses the more pythonic\n<tt>lower_case_with_underscores</tt> style and takes care of the conversion\nwhen filtering and accessing attributes.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>To install Nobel, simply:</p>\n<pre>$ pip install nobel\n</pre>\n</div>\n<div id=\"todo\">\n<h2>TODO</h2>\n<ul>\n<li>Documentation and full reference</li>\n<li>Tests</li>\n<li>More ORM-ish stuff, like filtering using Prize, Laureate or Country\nobjects as arguments</li>\n<li>Add relation attributes, like affiliations.</li>\n</ul>\n</div>\n<div id=\"credits\">\n<h2>Credits</h2>\n<p>This is inspired by the beautifully written\n<a href=\"https://github.com/dobarkod/hipchat-api\" rel=\"nofollow\">hipchat-api</a> wrapper.</p>\n</div>\n\n          </div>"}, "last_serial": 853098, "releases": {"0.1a": [{"comment_text": "", "digests": {"md5": "ca9b920a8a3ef73a2a04c07160ceddd1", "sha256": "1a3ece0966e029220d5607d2982b357c7cc8d8acd97eec295b08f5b0b976b4ce"}, "downloads": -1, "filename": "nobel-0.1a.tar.gz", "has_sig": false, "md5_digest": "ca9b920a8a3ef73a2a04c07160ceddd1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5844, "upload_time": "2013-08-27T13:10:06", "upload_time_iso_8601": "2013-08-27T13:10:06.745930Z", "url": "https://files.pythonhosted.org/packages/a9/51/39e4246cd2d2412602eeafe4b105f6ed5e8123f9bd3e499d7a0b72c7957e/nobel-0.1a.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "10de0f2136ec83b663cd9192a4f28781", "sha256": "6a97d6e63f315da7f04ccecf18798f7e895834c9407f68e4a9c3617cbf52b6c8"}, "downloads": -1, "filename": "nobel-0.2.tar.gz", "has_sig": false, "md5_digest": "10de0f2136ec83b663cd9192a4f28781", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6024, "upload_time": "2013-08-30T14:20:21", "upload_time_iso_8601": "2013-08-30T14:20:21.988612Z", "url": "https://files.pythonhosted.org/packages/82/87/3ac9c2d29e5f2f933da9faf3b8bd56434dd910c99b286f4ffc284f80b2c7/nobel-0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "10de0f2136ec83b663cd9192a4f28781", "sha256": "6a97d6e63f315da7f04ccecf18798f7e895834c9407f68e4a9c3617cbf52b6c8"}, "downloads": -1, "filename": "nobel-0.2.tar.gz", "has_sig": false, "md5_digest": "10de0f2136ec83b663cd9192a4f28781", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6024, "upload_time": "2013-08-30T14:20:21", "upload_time_iso_8601": "2013-08-30T14:20:21.988612Z", "url": "https://files.pythonhosted.org/packages/82/87/3ac9c2d29e5f2f933da9faf3b8bd56434dd910c99b286f4ffc284f80b2c7/nobel-0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:01 2020"}