{"info": {"author": "Alec Perkins", "author_email": "alec@marquee.by", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: Public Domain", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Internet :: WWW/HTTP :: Dynamic Content", "Topic :: Text Processing :: Markup :: HTML"], "description": "# NOAT: Non-Overlapping Annotation Tagging\n\nNOAT (\"note\") is a helper class for inserting reference-based annotations as\nHTML tags at arbitary points in text, based on their start and end positions,\nwhile avoiding overlapping open and close tags of different type (invalid HTML).\nThis ensures creating a well-formed HTML document that will yield a properly\nstructured DOM.\n\nThe text is broken into segments, bounded by the start and end points of all of\nthe annotations. It is then reassembled, with opening and closing tags for\nannotations inserted between the segments. Tags are closed and reopened as\nneeded to prevent overlap.\n\nFor example, given:\n\n```python\ntext = \"Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit.\"\n\nannotations = [{\n    'type': 'emphasis',\n    'start': 5,\n    'end': 30,\n},{\n    'type': 'strong',\n    'start': 20,\n    'end': 50,\n}]\n```\n\nSimply inserting the tags at the given `start` and `end` positions would result\nin invalid HTML:\n\n```html\nDuis <em>mollis, est non<strong> commodo l</em>uctus, nisi erat por</strong>\nttitor ligula, eget lacinia odio sem nec elit.\n```\n\nThe correct output is:\n\n```html\nDuis <em>mollis, est non<strong> commodo l</strong></em><strong> uctus, nisi\nerat por</strong>ttitor ligula, eget lacinia odio sem nec elit.\n```\n\nNote that `</strong>` tag before the `strong`'s `end`, to allow the `emphasis`\nannotation to be closed without overlapping the `<strong>`. The `strong`\nannotation is then reopened with a `<strong>` and then closed at its actual end.\n\n\n\n## Usage\n\nThere are no dependencies. NOAT works in both Python 2 and 3, and PyPy. The\nadding of annotations is lazy, so the actual markup is not generated until the\n`__str__` method is called.\n\n```python\n>>> from noat import NOAT\n>>> some_text = 'Lorem ipsum dolor sit amet.'\n>>> markup = NOAT(some_text)\n>>> markup.add('em', 5, 15)\n>>> markup.add('a', 4, 10, href='http://example.com')\n>>> str(markup)\n'Lore<a href=\"http://example.com\">m<em> ipsu</em></a><em>m dol</em>or sit amet.'\n```\n\n### `NOAT`\n\nThe `NOAT` constructor takes a string and returns a NOAT instance, which can\nthen have annotations added to it.\n\n### `.add`\n\n    markup.add(tag, start, [end,] [attributes,] [**attributes])\n\n`tag` can be any string. `start` and `end` are integers describing the start and\nend positions of the annotations (inclusive). `end` is optional, allowing for\n'collapsed' tags, (eg `abcd<span></span>efgh`). Attributes are a dict of\nkey-value attributes to be added to the tag, eg\n`<a href=\"http://example.com\">link</a>`. Keyword arguments can also be provided,\n(which supersede any dict attributes).\n\nFor convenience, since `class` is a reserved word but a common annotation\nattribute, the attribute key `'_class'` will be converted to `'class'`, allowing\nfor keyword arguments to be written as `_class=\"marker\"`.\n\n\n\n\n## Authors\n\n* [Alec Perkins](https://github.com/alecperkins) ([Droptype Inc](http://droptype.com))\n\n\n\n## License\n\nUnlicensed aka Public Domain. See /UNLICENSE for more information.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/marquee/noat", "keywords": "html tags tagging annotations annotation text", "license": "UNLICENSE", "maintainer": null, "maintainer_email": null, "name": "noat", "package_url": "https://pypi.org/project/noat/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/noat/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/marquee/noat"}, "release_url": "https://pypi.org/project/noat/1.0.2/", "requires_dist": null, "requires_python": null, "summary": "Non-overlapping annotation HTML tag insertion.", "version": "1.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            # NOAT: Non-Overlapping Annotation Tagging<br><br>NOAT (\"note\") is a helper class for inserting reference-based annotations as<br>HTML tags at arbitary points in text, based on their start and end positions,<br>while avoiding overlapping open and close tags of different type (invalid HTML).<br>This ensures creating a well-formed HTML document that will yield a properly<br>structured DOM.<br><br>The text is broken into segments, bounded by the start and end points of all of<br>the annotations. It is then reassembled, with opening and closing tags for<br>annotations inserted between the segments. Tags are closed and reopened as<br>needed to prevent overlap.<br><br>For example, given:<br><br>```python<br>text = \"Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit.\"<br><br>annotations = [{<br>    'type': 'emphasis',<br>    'start': 5,<br>    'end': 30,<br>},{<br>    'type': 'strong',<br>    'start': 20,<br>    'end': 50,<br>}]<br>```<br><br>Simply inserting the tags at the given `start` and `end` positions would result<br>in invalid HTML:<br><br>```html<br>Duis &lt;em&gt;mollis, est non&lt;strong&gt; commodo l&lt;/em&gt;uctus, nisi erat por&lt;/strong&gt;<br>ttitor ligula, eget lacinia odio sem nec elit.<br>```<br><br>The correct output is:<br><br>```html<br>Duis &lt;em&gt;mollis, est non&lt;strong&gt; commodo l&lt;/strong&gt;&lt;/em&gt;&lt;strong&gt; uctus, nisi<br>erat por&lt;/strong&gt;ttitor ligula, eget lacinia odio sem nec elit.<br>```<br><br>Note that `&lt;/strong&gt;` tag before the `strong`'s `end`, to allow the `emphasis`<br>annotation to be closed without overlapping the `&lt;strong&gt;`. The `strong`<br>annotation is then reopened with a `&lt;strong&gt;` and then closed at its actual end.<br><br><br><br>## Usage<br><br>There are no dependencies. NOAT works in both Python 2 and 3, and PyPy. The<br>adding of annotations is lazy, so the actual markup is not generated until the<br>`__str__` method is called.<br><br>```python<br>&gt;&gt;&gt; from noat import NOAT<br>&gt;&gt;&gt; some_text = 'Lorem ipsum dolor sit amet.'<br>&gt;&gt;&gt; markup = NOAT(some_text)<br>&gt;&gt;&gt; markup.add('em', 5, 15)<br>&gt;&gt;&gt; markup.add('a', 4, 10, href='http://example.com')<br>&gt;&gt;&gt; str(markup)<br>'Lore&lt;a href=\"http://example.com\"&gt;m&lt;em&gt; ipsu&lt;/em&gt;&lt;/a&gt;&lt;em&gt;m dol&lt;/em&gt;or sit amet.'<br>```<br><br>### `NOAT`<br><br>The `NOAT` constructor takes a string and returns a NOAT instance, which can<br>then have annotations added to it.<br><br>### `.add`<br><br>    markup.add(tag, start, [end,] [attributes,] [**attributes])<br><br>`tag` can be any string. `start` and `end` are integers describing the start and<br>end positions of the annotations (inclusive). `end` is optional, allowing for<br>'collapsed' tags, (eg `abcd&lt;span&gt;&lt;/span&gt;efgh`). Attributes are a dict of<br>key-value attributes to be added to the tag, eg<br>`&lt;a href=\"http://example.com\"&gt;link&lt;/a&gt;`. Keyword arguments can also be provided,<br>(which supersede any dict attributes).<br><br>For convenience, since `class` is a reserved word but a common annotation<br>attribute, the attribute key `'_class'` will be converted to `'class'`, allowing<br>for keyword arguments to be written as `_class=\"marker\"`.<br><br><br><br><br>## Authors<br><br>* [Alec Perkins](https://github.com/alecperkins) ([Droptype Inc](http://droptype.com))<br><br><br><br>## License<br><br>Unlicensed aka Public Domain. See /UNLICENSE for more information.\n          </div>"}, "last_serial": 1138824, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "3c1c7531f4807ee394a62cf6327442ca", "sha256": "5301b2ef2158b0c26940949ab0f053e715833ccb0c81d49ef7f2f86c4e9a0ca1"}, "downloads": -1, "filename": "noat-1.0.0.tar.gz", "has_sig": false, "md5_digest": "3c1c7531f4807ee394a62cf6327442ca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5175, "upload_time": "2013-09-03T21:16:39", "upload_time_iso_8601": "2013-09-03T21:16:39.299304Z", "url": "https://files.pythonhosted.org/packages/48/c2/b3fac35cceec08bd3b62334af28d7c17baf6ab488b25985d4cae915bbd13/noat-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "cc0ed203147b2cd7b2192a7f84506d62", "sha256": "b92419f39bd110e0a0f79132be90c1fafc561868fa49cd89c9ecfa33aec0dbad"}, "downloads": -1, "filename": "noat-1.0.1.tar.gz", "has_sig": false, "md5_digest": "cc0ed203147b2cd7b2192a7f84506d62", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5141, "upload_time": "2013-09-25T20:03:44", "upload_time_iso_8601": "2013-09-25T20:03:44.516921Z", "url": "https://files.pythonhosted.org/packages/ac/5f/ef0318dbdb6ecc8fa6f9e2c3cdfdc2ebd205636d0cd210aba8fe637bcf44/noat-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "d6bf4e512c3a6dde0373267b21af0fc2", "sha256": "a62ddc3338580d192a98494e51eeeede34ef6bd1c7d11613d012df2d5c8b4b3d"}, "downloads": -1, "filename": "noat-1.0.2.tar.gz", "has_sig": false, "md5_digest": "d6bf4e512c3a6dde0373267b21af0fc2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5181, "upload_time": "2014-06-26T20:44:48", "upload_time_iso_8601": "2014-06-26T20:44:48.906059Z", "url": "https://files.pythonhosted.org/packages/0c/f0/2022fc6bc140cf358e7d50179e23a8de904c884ddbe6433d960d793abed0/noat-1.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d6bf4e512c3a6dde0373267b21af0fc2", "sha256": "a62ddc3338580d192a98494e51eeeede34ef6bd1c7d11613d012df2d5c8b4b3d"}, "downloads": -1, "filename": "noat-1.0.2.tar.gz", "has_sig": false, "md5_digest": "d6bf4e512c3a6dde0373267b21af0fc2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5181, "upload_time": "2014-06-26T20:44:48", "upload_time_iso_8601": "2014-06-26T20:44:48.906059Z", "url": "https://files.pythonhosted.org/packages/0c/f0/2022fc6bc140cf358e7d50179e23a8de904c884ddbe6433d960d793abed0/noat-1.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:01 2020"}