{"info": {"author": "Weiliang Li", "author_email": "to.be.impressive@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: Implementation :: CPython", "Topic :: Security :: Cryptography"], "description": "# eciespy\n\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/2a11aeb9939244019d2c64bce3ff3c4e)](https://www.codacy.com/app/ecies/py)\n[![CI](https://img.shields.io/circleci/project/github/ecies/py.svg)](https://circleci.com/gh/ecies/py)\n[![Codecov](https://img.shields.io/codecov/c/github/ecies/py.svg)](https://codecov.io/gh/ecies/py)\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/eciespy.svg)](https://pypi.org/project/eciespy/)\n[![PyPI](https://img.shields.io/pypi/v/eciespy.svg)](https://pypi.org/project/eciespy/)\n[![License](https://img.shields.io/github/license/ecies/py.svg)](https://github.com/ecies/py)\n\nElliptic Curve Integrated Encryption Scheme for secp256k1 in Python.\n\nOther language versions:\n\n- [Rust](https://github.com/ecies/rs)\n- [TypeScript](https://github.com/ecies/js)\n- [Golang](https://github.com/ecies/go)\n\nYou can also check a flask web backend demo [here](https://github.com/kigawas/eciespy-demo).\n\n## Install\n\nInstall with `pip install eciespy` under [Python 3.5+](https://github.com/ecies/py/blob/master/setup.py#L58).\n\n## Quick Start\n\n```python\n>>> from ecies.utils import generate_eth_key, generate_key\n>>> from ecies import encrypt, decrypt\n>>> eth_k = generate_eth_key()\n>>> sk_hex = eth_k.to_hex()  # hex string\n>>> pk_hex = eth_k.public_key.to_hex()  # hex string\n>>> data = b'this is a test'\n>>> decrypt(sk_hex, encrypt(pk_hex, data))\nb'this is a test'\n>>> secp_k = generate_key()\n>>> sk_bytes = secp_k.secret  # bytes\n>>> pk_bytes = secp_k.public_key.format(True)  # bytes\n>>> decrypt(sk_bytes, encrypt(pk_bytes, data))\nb'this is a test'\n```\n\nOr just use a builtin command `eciespy` in your favorite [command line](#command-line-interface).\n\n## API\n\n### `ecies.encrypt(receiver_pk: Union[str, bytes], msg: bytes) -> bytes`\n\nParameters:\n\n- **receiver_pk** - Receiver's public key (hex str or bytes)\n- **msg** - Data to encrypt\n\nReturns: **bytes**\n\n### `ecies.decrypt(receiver_sk: Union[str, bytes], msg: bytes) -> bytes`\n\nParameters:\n\n- **receiver_sk** - Receiver's private key (hex str or bytes)\n- **msg** - Data to decrypt\n\nReturns: **bytes**\n\n## Command Line Interface\n\n### Show help\n\n```console\n$ eciespy -h\nusage: eciespy [-h] [-e] [-d] [-g] [-k KEY] [-D [DATA]] [-O [OUT]]\n\nElliptic Curve Integrated Encryption Scheme for secp256k1 in Python\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -e, --encrypt         encrypt with public key, exclusive with -d\n  -d, --decrypt         decrypt with private key, exclusive with -e\n  -g, --generate        generate ethereum key pair\n  -k KEY, --key KEY     public or private key file\n  -D [DATA], --data [DATA]\n                        file to encrypt or decrypt, if not specified, it will\n                        read from stdin\n  -O [OUT], --out [OUT]\n                        encrypted or decrypted file, if not specified, it will\n                        write to stdout\n```\n\n### Generate eth key\n\n```console\n$ eciespy -g\nPrivate: 0x95d3c5e483e9b1d4f5fc8e79b2deaf51362980de62dbb082a9a4257eef653d7d\nPublic: 0x98afe4f150642cd05cc9d2fa36458ce0a58567daeaf5fde7333ba9b403011140a4e28911fcf83ab1f457a30b4959efc4b9306f514a4c3711a16a80e3b47eb58b\nAddress: 0x47e801184B3a8ea8E6A4A7A4CFEfEcC76809Da72\n```\n\n### Encrypt with public key and decrypt with private key\n\n```console\necho '0x95d3c5e483e9b1d4f5fc8e79b2deaf51362980de62dbb082a9a4257eef653d7d' > prv\necho '0x98afe4f150642cd05cc9d2fa36458ce0a58567daeaf5fde7333ba9b403011140a4e28911fcf83ab1f457a30b4959efc4b9306f514a4c3711a16a80e3b47eb58b' > pub\n$ echo 'helloworld' | eciespy -e -k pub | eciespy -d -k prv\nhelloworld\necho 'data to encrypt' > data\neciespy -e -k pub -D data -O enc_data\n$ eciespy -d -k prv -D enc_data\ndata to encrypt\nrm prv pub data enc_data\n```\n\n## Mechanism and implementation details\n\nThis library combines `secp256k1` and `AES-256-GCM` (powered by [`coincurve`](https://github.com/ofek/coincurve) and [`pycryptodome`](https://github.com/Legrandin/pycryptodome)) to provide an API of encrypting with `secp256k1` public key and decrypting with `secp256k1`'s private key. It has two parts generally:\n\n1. Use [ECDH](https://en.wikipedia.org/wiki/Elliptic-curve_Diffie\u2013Hellman) to exchange an AES session key;\n\n    > Notice that the sender public key is generated every time when `ecies.encrypt` is invoked, thus, the AES session key varies.\n\n2. Use this AES session key to encrypt/decrypt the data under `AES-256-GCM`.\n\nBasically the encrypted data will be like this:\n\n```plaintext\n+-------------------------------+----------+----------+-----------------+\n| 65 Bytes                      | 16 Bytes | 16 Bytes | == data size    |\n+-------------------------------+----------+----------+-----------------+\n| Sender Public Key (ephemeral) | Nonce/IV | Tag/MAC  | Encrypted data  |\n+-------------------------------+----------+----------+-----------------+\n| sender_pk                     | nonce    | tag      | encrypted_data  |\n+-------------------------------+----------+----------+-----------------+\n|           Secp256k1           |              AES-256-GCM              |\n+-------------------------------+---------------------------------------+\n```\n\n### Secp256k1\n\n#### Glance at ecdh\n\nSo, **how** do we calculate the ECDH key under `secp256k1`? If you use a library like [`coincurve`](https://github.com/ofek/coincurve), you might just simply call `k1.ecdh(k2.public_key.format())`, then uh-huh, you got it! Let's see how to do it in simple Python snippets:\n\n```python\n>>> from coincurve import PrivateKey\n>>> k1 = PrivateKey.from_int(3)\n>>> k2 = PrivateKey.from_int(2)\n>>> k1.public_key.format(False).hex() # 65 bytes, False means uncompressed key\n'04f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672'\n>>> k2.public_key.format(False).hex() # 65 bytes\n'04c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee51ae168fea63dc339a3c58419466ceaeef7f632653266d0e1236431a950cfe52a'\n>>> k1.ecdh(k2.public_key.format()).hex()\n'c7d9ba2fa1496c81be20038e5c608f2fd5d0246d8643783730df6c2bbb855cb2'\n>>> k2.ecdh(k1.public_key.format()).hex()\n'c7d9ba2fa1496c81be20038e5c608f2fd5d0246d8643783730df6c2bbb855cb2'\n```\n\n#### Calculate your ecdh key manually\n\nHowever, as a hacker like you with strong desire to learn something, you must be curious about the magic under the ground.\n\nIn one sentence, the `secp256k1`'s ECDH key of `k1` and `k2` is nothing but `sha256(k2.public_key.multiply(k1))`.\n\n```python\n>>> k1.to_int()\n3\n>>> shared_pub = k2.public_key.multiply(k1.secret)\n>>> shared_pub.point()\n(115780575977492633039504758427830329241728645270042306223540962614150928364886,\n 78735063515800386211891312544505775871260717697865196436804966483607426560663)\n>>> import hashlib\n>>> h = hashlib.sha256()\n>>> h.update(shared_pub.format())\n>>> h.hexdigest()  # here you got the ecdh key same as above!\n'c7d9ba2fa1496c81be20038e5c608f2fd5d0246d8643783730df6c2bbb855cb2'\n```\n\n> Warning: **NEVER** use small integers as private keys on any production systems or storing any valuable assets.\n>\n> Warning: **ALWAYS** use safe methods like [`os.urandom`](https://docs.python.org/3/library/os.html#os.urandom) to generate private keys.\n\n#### Math on ecdh\n\nLet's discuss in details. The word _multiply_ here means multiplying a **point** of a public key on elliptic curve (like `(x, y)`) with a **scalar** (like `k`). Here `k` is the integer format of a private key, for instance, it can be `3` for `k1` here, and `(x, y)` here is an extremely large number pair like `(115780575977492633039504758427830329241728645270042306223540962614150928364886, 78735063515800386211891312544505775871260717697865196436804966483607426560663)`.\n\n> Warning: 1 \\* (x, y) == (x, y) is always true, since 1 is the **identity element** for multiplication. If you take integer 1 as a private key, the public key will be the [base point](https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm#Signature_generation_algorithm).\n\nMathematically, the elliptic curve cryptography is based on the fact that you can easily multiply point `A` (aka base point, or public key in ECDH) and scalar `k` (aka private key) to get another point `B` (aka public key), but it's almost impossible to calculate `A` from `B` reversely (which means it's a \"one-way function\").\n\n#### Compressed and uncompressed keys\n\nA point multiplying a scalar can be regarded that this point adds itself multiple times, and the point `B` can be converted to a readable public key in a compressed or uncompressed format.\n\n- Compressed format (`x` coordinate only)\n\n```python\n>>> point = (89565891926547004231252920425935692360644145829622209833684329913297188986597, 12158399299693830322967808612713398636155367887041628176798871954788371653930)\n>>> point == k2.public_key.point()\nTrue\n>>> prefix = '02' if point[1] % 2 == 0 else '03'\n>>> compressed_key_hex = prefix + hex(point[0])[2:]\n>>> compressed_key = bytes.fromhex(compressed_key_hex)\n>>> compressed_key.hex()\n'02c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5'\n```\n\n- Uncompressed format (`(x, y)` coordinate)\n\n```python\n>>> uncompressed_key_hex = '04' + hex(point[0])[2:] + hex(point[1])[2:]\n>>> uncompressed_key = bytes.fromhex(uncompressed_key_hex)\n>>> uncompressed_key.hex()\n'04c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee51ae168fea63dc339a3c58419466ceaeef7f632653266d0e1236431a950cfe52a'\n```\n\nThe format is depicted by the image below from the [bitcoin book](https://github.com/bitcoinbook/bitcoinbook).\n\n![EC public key format](https://raw.githubusercontent.com/bitcoinbook/bitcoinbook/develop/images/mbc2_0407.png)\n\n> If you want to convert the compressed format to uncompressed, basically, you need to calculate `y` from `x` by solving the equation using [Cipolla's Algorithm](https://en.wikipedia.org/wiki/Cipolla's_algorithm):\n>\n> ![y^2=(x^3 + 7) mod p, where p=2^{256}-2^{32}-2^{9}-2^{8}-2^{7}-2^{6}-2^{4}-1](<https://tex.s2cms.ru/svg/%20y%5E2%3D(x%5E3%20%2B%207)%20%5Cbmod%20p%2C%5C%20where%5C%20p%3D2%5E%7B256%7D-2%5E%7B32%7D-2%5E%7B9%7D-2%5E%7B8%7D-2%5E%7B7%7D-2%5E%7B6%7D-2%5E%7B4%7D-1%20>)\n>\n> You can check the [bitcoin wiki](https://en.bitcoin.it/wiki/Secp256k1) and this thread on [bitcointalk.org](https://bitcointalk.org/index.php?topic=644919.msg7205689#msg7205689) for more details.\n\nThen, the shared key between `k1` and `k2` is the `sha256` hash of the **compressed** ECDH public key. It's better to use the compressed format, since you can always get `x` from `x` or `(x, y)` without any calculation.\n\nYou may want to ask, what if we don't hash it? Briefly, hash can:\n\n1. Make the shared key's length fixed;\n2. Make it safer since hash functions can remove \"weak bits\" in the original computed key. Check the introduction section of this [paper](http://cacr.uwaterloo.ca/techreports/1998/corr98-05.pdf) for more details.\n\n> Warning: According to some recent research, although widely used, the `sha256` key derivation function is [not secure enough](https://github.com/ecies/py/issues/82).\n\n### AES\n\nNow we have the shared key, and we can use the `nonce` and `tag` to decrypt. This is quite straight, and the example derives from `pycryptodome`'s [documentation](https://pycryptodome.readthedocs.io/en/latest/src/examples.html#encrypt-data-with-aes).\n\n```python\n>>> from Crypto.Cipher import AES\n>>> key = b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\n>>> iv = b'\\xf3\\xe1\\xba\\x81\\r,\\x89\\x00\\xb1\\x13\\x12\\xb7\\xc7%V_'\n>>> tag = b'\\xec;q\\xe1|\\x11\\xdb\\xe3\\x14\\x84\\xda\\x94P\\xed\\xcfl'\n>>> data = b'\\x02\\xd2\\xff\\xed\\x93\\xb8V\\xf1H\\xb9'\n>>> decipher = AES.new(key, AES.MODE_GCM, nonce=iv)\n>>> decipher.decrypt_and_verify(data, tag)\nb'helloworld'\n```\n\n> Strictly speaking, `nonce` != `iv`, but this is a little bit off topic, if you are curious, you can check [the comment in `utils.py`](https://github.com/ecies/py/blob/master/ecies/utils.py#L213).\n\n## Release Notes\n\n### 0.3.1 ~ 0.3.5\n\n- Support Python 3.8\n- Bump dependencies\n- Update documentation\n\n### 0.3.0\n\n- API change: use `HKDF-sha256` to derive shared keys instead of `sha256`\n\n### 0.2.0\n\n- API change: `ecies.encrypt` and `ecies.decrypt` now can take both hex str and raw bytes\n- Bump dependency versions\n- Update documentation\n\n### 0.1.1 ~ 0.1.9\n\n- Bump dependency versions\n- Update documentation\n- Switch to Circle CI\n- Change license to MIT\n\n### 0.1.0\n\n- First beta version release\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ecies/py", "keywords": "secp256k1,crypto,elliptic curves,ecies,bitcoin,ethereum,cryptocurrency", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "eciespy", "package_url": "https://pypi.org/project/eciespy/", "platform": "", "project_url": "https://pypi.org/project/eciespy/", "project_urls": {"Homepage": "https://github.com/ecies/py"}, "release_url": "https://pypi.org/project/eciespy/0.3.5/", "requires_dist": ["coincurve (<14.0,>=13.0)", "eth-keys (<0.4.0,>=0.3.1)", "pycryptodome (<4.0,>=3.9)"], "requires_python": ">=3.5.3", "summary": "Elliptic Curve Integrated Encryption Scheme for secp256k1 in Python", "version": "0.3.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>eciespy</h1>\n<p><a href=\"https://www.codacy.com/app/ecies/py\" rel=\"nofollow\"><img alt=\"Codacy Badge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/093017c4b70ebd8373474965c74faba7f10367b6/68747470733a2f2f6170692e636f646163792e636f6d2f70726f6a6563742f62616467652f47726164652f3261313161656239393339323434303139643263363462636533666633633465\"></a>\n<a href=\"https://circleci.com/gh/ecies/py\" rel=\"nofollow\"><img alt=\"CI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/dcbcaf33aa00584fad0ae83a02ac919b9fd4007f/68747470733a2f2f696d672e736869656c64732e696f2f636972636c6563692f70726f6a6563742f6769746875622f65636965732f70792e737667\"></a>\n<a href=\"https://codecov.io/gh/ecies/py\" rel=\"nofollow\"><img alt=\"Codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7ab622191e3a3a3b4f05a6fcdd2cd8bf97108f63/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f6769746875622f65636965732f70792e737667\"></a>\n<a href=\"https://pypi.org/project/eciespy/\" rel=\"nofollow\"><img alt=\"PyPI - Python Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e02bc52596ab138107d5d859a4df67af58897aa4/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f656369657370792e737667\"></a>\n<a href=\"https://pypi.org/project/eciespy/\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0ec5d7aaab0c68966a0be8f151dc18124c5ac1a7/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f656369657370792e737667\"></a>\n<a href=\"https://github.com/ecies/py\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d189b8912277ba23b73a2f648b68a25015645163/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f65636965732f70792e737667\"></a></p>\n<p>Elliptic Curve Integrated Encryption Scheme for secp256k1 in Python.</p>\n<p>Other language versions:</p>\n<ul>\n<li><a href=\"https://github.com/ecies/rs\" rel=\"nofollow\">Rust</a></li>\n<li><a href=\"https://github.com/ecies/js\" rel=\"nofollow\">TypeScript</a></li>\n<li><a href=\"https://github.com/ecies/go\" rel=\"nofollow\">Golang</a></li>\n</ul>\n<p>You can also check a flask web backend demo <a href=\"https://github.com/kigawas/eciespy-demo\" rel=\"nofollow\">here</a>.</p>\n<h2>Install</h2>\n<p>Install with <code>pip install eciespy</code> under <a href=\"https://github.com/ecies/py/blob/master/setup.py#L58\" rel=\"nofollow\">Python 3.5+</a>.</p>\n<h2>Quick Start</h2>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">ecies.utils</span> <span class=\"kn\">import</span> <span class=\"n\">generate_eth_key</span><span class=\"p\">,</span> <span class=\"n\">generate_key</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">ecies</span> <span class=\"kn\">import</span> <span class=\"n\">encrypt</span><span class=\"p\">,</span> <span class=\"n\">decrypt</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">eth_k</span> <span class=\"o\">=</span> <span class=\"n\">generate_eth_key</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">sk_hex</span> <span class=\"o\">=</span> <span class=\"n\">eth_k</span><span class=\"o\">.</span><span class=\"n\">to_hex</span><span class=\"p\">()</span>  <span class=\"c1\"># hex string</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pk_hex</span> <span class=\"o\">=</span> <span class=\"n\">eth_k</span><span class=\"o\">.</span><span class=\"n\">public_key</span><span class=\"o\">.</span><span class=\"n\">to_hex</span><span class=\"p\">()</span>  <span class=\"c1\"># hex string</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"s1\">'this is a test'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">decrypt</span><span class=\"p\">(</span><span class=\"n\">sk_hex</span><span class=\"p\">,</span> <span class=\"n\">encrypt</span><span class=\"p\">(</span><span class=\"n\">pk_hex</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">))</span>\n<span class=\"sa\">b</span><span class=\"s1\">'this is a test'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">secp_k</span> <span class=\"o\">=</span> <span class=\"n\">generate_key</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">sk_bytes</span> <span class=\"o\">=</span> <span class=\"n\">secp_k</span><span class=\"o\">.</span><span class=\"n\">secret</span>  <span class=\"c1\"># bytes</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pk_bytes</span> <span class=\"o\">=</span> <span class=\"n\">secp_k</span><span class=\"o\">.</span><span class=\"n\">public_key</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>  <span class=\"c1\"># bytes</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">decrypt</span><span class=\"p\">(</span><span class=\"n\">sk_bytes</span><span class=\"p\">,</span> <span class=\"n\">encrypt</span><span class=\"p\">(</span><span class=\"n\">pk_bytes</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">))</span>\n<span class=\"sa\">b</span><span class=\"s1\">'this is a test'</span>\n</pre>\n<p>Or just use a builtin command <code>eciespy</code> in your favorite <a href=\"#command-line-interface\" rel=\"nofollow\">command line</a>.</p>\n<h2>API</h2>\n<h3><code>ecies.encrypt(receiver_pk: Union[str, bytes], msg: bytes) -&gt; bytes</code></h3>\n<p>Parameters:</p>\n<ul>\n<li><strong>receiver_pk</strong> - Receiver's public key (hex str or bytes)</li>\n<li><strong>msg</strong> - Data to encrypt</li>\n</ul>\n<p>Returns: <strong>bytes</strong></p>\n<h3><code>ecies.decrypt(receiver_sk: Union[str, bytes], msg: bytes) -&gt; bytes</code></h3>\n<p>Parameters:</p>\n<ul>\n<li><strong>receiver_sk</strong> - Receiver's private key (hex str or bytes)</li>\n<li><strong>msg</strong> - Data to decrypt</li>\n</ul>\n<p>Returns: <strong>bytes</strong></p>\n<h2>Command Line Interface</h2>\n<h3>Show help</h3>\n<pre><span class=\"gp\">$</span> eciespy -h\n<span class=\"go\">usage: eciespy [-h] [-e] [-d] [-g] [-k KEY] [-D [DATA]] [-O [OUT]]</span>\n\n<span class=\"go\">Elliptic Curve Integrated Encryption Scheme for secp256k1 in Python</span>\n\n<span class=\"go\">optional arguments:</span>\n<span class=\"go\">  -h, --help            show this help message and exit</span>\n<span class=\"go\">  -e, --encrypt         encrypt with public key, exclusive with -d</span>\n<span class=\"go\">  -d, --decrypt         decrypt with private key, exclusive with -e</span>\n<span class=\"go\">  -g, --generate        generate ethereum key pair</span>\n<span class=\"go\">  -k KEY, --key KEY     public or private key file</span>\n<span class=\"go\">  -D [DATA], --data [DATA]</span>\n<span class=\"go\">                        file to encrypt or decrypt, if not specified, it will</span>\n<span class=\"go\">                        read from stdin</span>\n<span class=\"go\">  -O [OUT], --out [OUT]</span>\n<span class=\"go\">                        encrypted or decrypted file, if not specified, it will</span>\n<span class=\"go\">                        write to stdout</span>\n</pre>\n<h3>Generate eth key</h3>\n<pre><span class=\"gp\">$</span> eciespy -g\n<span class=\"go\">Private: 0x95d3c5e483e9b1d4f5fc8e79b2deaf51362980de62dbb082a9a4257eef653d7d</span>\n<span class=\"go\">Public: 0x98afe4f150642cd05cc9d2fa36458ce0a58567daeaf5fde7333ba9b403011140a4e28911fcf83ab1f457a30b4959efc4b9306f514a4c3711a16a80e3b47eb58b</span>\n<span class=\"go\">Address: 0x47e801184B3a8ea8E6A4A7A4CFEfEcC76809Da72</span>\n</pre>\n<h3>Encrypt with public key and decrypt with private key</h3>\n<pre><span class=\"go\">echo '0x95d3c5e483e9b1d4f5fc8e79b2deaf51362980de62dbb082a9a4257eef653d7d' &gt; prv</span>\n<span class=\"go\">echo '0x98afe4f150642cd05cc9d2fa36458ce0a58567daeaf5fde7333ba9b403011140a4e28911fcf83ab1f457a30b4959efc4b9306f514a4c3711a16a80e3b47eb58b' &gt; pub</span>\n<span class=\"gp\">$</span> <span class=\"nb\">echo</span> <span class=\"s1\">'helloworld'</span> <span class=\"p\">|</span> eciespy -e -k pub <span class=\"p\">|</span> eciespy -d -k prv\n<span class=\"go\">helloworld</span>\n<span class=\"go\">echo 'data to encrypt' &gt; data</span>\n<span class=\"go\">eciespy -e -k pub -D data -O enc_data</span>\n<span class=\"gp\">$</span> eciespy -d -k prv -D enc_data\n<span class=\"go\">data to encrypt</span>\n<span class=\"go\">rm prv pub data enc_data</span>\n</pre>\n<h2>Mechanism and implementation details</h2>\n<p>This library combines <code>secp256k1</code> and <code>AES-256-GCM</code> (powered by <a href=\"https://github.com/ofek/coincurve\" rel=\"nofollow\"><code>coincurve</code></a> and <a href=\"https://github.com/Legrandin/pycryptodome\" rel=\"nofollow\"><code>pycryptodome</code></a>) to provide an API of encrypting with <code>secp256k1</code> public key and decrypting with <code>secp256k1</code>'s private key. It has two parts generally:</p>\n<ol>\n<li>\n<p>Use <a href=\"https://en.wikipedia.org/wiki/Elliptic-curve_Diffie%E2%80%93Hellman\" rel=\"nofollow\">ECDH</a> to exchange an AES session key;</p>\n<blockquote>\n<p>Notice that the sender public key is generated every time when <code>ecies.encrypt</code> is invoked, thus, the AES session key varies.</p>\n</blockquote>\n</li>\n<li>\n<p>Use this AES session key to encrypt/decrypt the data under <code>AES-256-GCM</code>.</p>\n</li>\n</ol>\n<p>Basically the encrypted data will be like this:</p>\n<pre>+-------------------------------+----------+----------+-----------------+\n| 65 Bytes                      | 16 Bytes | 16 Bytes | == data size    |\n+-------------------------------+----------+----------+-----------------+\n| Sender Public Key (ephemeral) | Nonce/IV | Tag/MAC  | Encrypted data  |\n+-------------------------------+----------+----------+-----------------+\n| sender_pk                     | nonce    | tag      | encrypted_data  |\n+-------------------------------+----------+----------+-----------------+\n|           Secp256k1           |              AES-256-GCM              |\n+-------------------------------+---------------------------------------+\n</pre>\n<h3>Secp256k1</h3>\n<h4>Glance at ecdh</h4>\n<p>So, <strong>how</strong> do we calculate the ECDH key under <code>secp256k1</code>? If you use a library like <a href=\"https://github.com/ofek/coincurve\" rel=\"nofollow\"><code>coincurve</code></a>, you might just simply call <code>k1.ecdh(k2.public_key.format())</code>, then uh-huh, you got it! Let's see how to do it in simple Python snippets:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">coincurve</span> <span class=\"kn\">import</span> <span class=\"n\">PrivateKey</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">k1</span> <span class=\"o\">=</span> <span class=\"n\">PrivateKey</span><span class=\"o\">.</span><span class=\"n\">from_int</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">k2</span> <span class=\"o\">=</span> <span class=\"n\">PrivateKey</span><span class=\"o\">.</span><span class=\"n\">from_int</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">public_key</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">hex</span><span class=\"p\">()</span> <span class=\"c1\"># 65 bytes, False means uncompressed key</span>\n<span class=\"s1\">'04f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">k2</span><span class=\"o\">.</span><span class=\"n\">public_key</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">hex</span><span class=\"p\">()</span> <span class=\"c1\"># 65 bytes</span>\n<span class=\"s1\">'04c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee51ae168fea63dc339a3c58419466ceaeef7f632653266d0e1236431a950cfe52a'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">ecdh</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"o\">.</span><span class=\"n\">public_key</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">())</span><span class=\"o\">.</span><span class=\"n\">hex</span><span class=\"p\">()</span>\n<span class=\"s1\">'c7d9ba2fa1496c81be20038e5c608f2fd5d0246d8643783730df6c2bbb855cb2'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">k2</span><span class=\"o\">.</span><span class=\"n\">ecdh</span><span class=\"p\">(</span><span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">public_key</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">())</span><span class=\"o\">.</span><span class=\"n\">hex</span><span class=\"p\">()</span>\n<span class=\"s1\">'c7d9ba2fa1496c81be20038e5c608f2fd5d0246d8643783730df6c2bbb855cb2'</span>\n</pre>\n<h4>Calculate your ecdh key manually</h4>\n<p>However, as a hacker like you with strong desire to learn something, you must be curious about the magic under the ground.</p>\n<p>In one sentence, the <code>secp256k1</code>'s ECDH key of <code>k1</code> and <code>k2</code> is nothing but <code>sha256(k2.public_key.multiply(k1))</code>.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">to_int</span><span class=\"p\">()</span>\n<span class=\"mi\">3</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">shared_pub</span> <span class=\"o\">=</span> <span class=\"n\">k2</span><span class=\"o\">.</span><span class=\"n\">public_key</span><span class=\"o\">.</span><span class=\"n\">multiply</span><span class=\"p\">(</span><span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">secret</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">shared_pub</span><span class=\"o\">.</span><span class=\"n\">point</span><span class=\"p\">()</span>\n<span class=\"p\">(</span><span class=\"mi\">115780575977492633039504758427830329241728645270042306223540962614150928364886</span><span class=\"p\">,</span>\n <span class=\"mi\">78735063515800386211891312544505775871260717697865196436804966483607426560663</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">hashlib</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"n\">hashlib</span><span class=\"o\">.</span><span class=\"n\">sha256</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">h</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">shared_pub</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">())</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">h</span><span class=\"o\">.</span><span class=\"n\">hexdigest</span><span class=\"p\">()</span>  <span class=\"c1\"># here you got the ecdh key same as above!</span>\n<span class=\"s1\">'c7d9ba2fa1496c81be20038e5c608f2fd5d0246d8643783730df6c2bbb855cb2'</span>\n</pre>\n<blockquote>\n<p>Warning: <strong>NEVER</strong> use small integers as private keys on any production systems or storing any valuable assets.</p>\n<p>Warning: <strong>ALWAYS</strong> use safe methods like <a href=\"https://docs.python.org/3/library/os.html#os.urandom\" rel=\"nofollow\"><code>os.urandom</code></a> to generate private keys.</p>\n</blockquote>\n<h4>Math on ecdh</h4>\n<p>Let's discuss in details. The word <em>multiply</em> here means multiplying a <strong>point</strong> of a public key on elliptic curve (like <code>(x, y)</code>) with a <strong>scalar</strong> (like <code>k</code>). Here <code>k</code> is the integer format of a private key, for instance, it can be <code>3</code> for <code>k1</code> here, and <code>(x, y)</code> here is an extremely large number pair like <code>(115780575977492633039504758427830329241728645270042306223540962614150928364886, 78735063515800386211891312544505775871260717697865196436804966483607426560663)</code>.</p>\n<blockquote>\n<p>Warning: 1 * (x, y) == (x, y) is always true, since 1 is the <strong>identity element</strong> for multiplication. If you take integer 1 as a private key, the public key will be the <a href=\"https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm#Signature_generation_algorithm\" rel=\"nofollow\">base point</a>.</p>\n</blockquote>\n<p>Mathematically, the elliptic curve cryptography is based on the fact that you can easily multiply point <code>A</code> (aka base point, or public key in ECDH) and scalar <code>k</code> (aka private key) to get another point <code>B</code> (aka public key), but it's almost impossible to calculate <code>A</code> from <code>B</code> reversely (which means it's a \"one-way function\").</p>\n<h4>Compressed and uncompressed keys</h4>\n<p>A point multiplying a scalar can be regarded that this point adds itself multiple times, and the point <code>B</code> can be converted to a readable public key in a compressed or uncompressed format.</p>\n<ul>\n<li>Compressed format (<code>x</code> coordinate only)</li>\n</ul>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">point</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">89565891926547004231252920425935692360644145829622209833684329913297188986597</span><span class=\"p\">,</span> <span class=\"mi\">12158399299693830322967808612713398636155367887041628176798871954788371653930</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">point</span> <span class=\"o\">==</span> <span class=\"n\">k2</span><span class=\"o\">.</span><span class=\"n\">public_key</span><span class=\"o\">.</span><span class=\"n\">point</span><span class=\"p\">()</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">prefix</span> <span class=\"o\">=</span> <span class=\"s1\">'02'</span> <span class=\"k\">if</span> <span class=\"n\">point</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"s1\">'03'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">compressed_key_hex</span> <span class=\"o\">=</span> <span class=\"n\">prefix</span> <span class=\"o\">+</span> <span class=\"nb\">hex</span><span class=\"p\">(</span><span class=\"n\">point</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])[</span><span class=\"mi\">2</span><span class=\"p\">:]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">compressed_key</span> <span class=\"o\">=</span> <span class=\"nb\">bytes</span><span class=\"o\">.</span><span class=\"n\">fromhex</span><span class=\"p\">(</span><span class=\"n\">compressed_key_hex</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">compressed_key</span><span class=\"o\">.</span><span class=\"n\">hex</span><span class=\"p\">()</span>\n<span class=\"s1\">'02c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5'</span>\n</pre>\n<ul>\n<li>Uncompressed format (<code>(x, y)</code> coordinate)</li>\n</ul>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">uncompressed_key_hex</span> <span class=\"o\">=</span> <span class=\"s1\">'04'</span> <span class=\"o\">+</span> <span class=\"nb\">hex</span><span class=\"p\">(</span><span class=\"n\">point</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])[</span><span class=\"mi\">2</span><span class=\"p\">:]</span> <span class=\"o\">+</span> <span class=\"nb\">hex</span><span class=\"p\">(</span><span class=\"n\">point</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])[</span><span class=\"mi\">2</span><span class=\"p\">:]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">uncompressed_key</span> <span class=\"o\">=</span> <span class=\"nb\">bytes</span><span class=\"o\">.</span><span class=\"n\">fromhex</span><span class=\"p\">(</span><span class=\"n\">uncompressed_key_hex</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">uncompressed_key</span><span class=\"o\">.</span><span class=\"n\">hex</span><span class=\"p\">()</span>\n<span class=\"s1\">'04c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee51ae168fea63dc339a3c58419466ceaeef7f632653266d0e1236431a950cfe52a'</span>\n</pre>\n<p>The format is depicted by the image below from the <a href=\"https://github.com/bitcoinbook/bitcoinbook\" rel=\"nofollow\">bitcoin book</a>.</p>\n<p><img alt=\"EC public key format\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0dff2a30df78c7a95e0130746ea1e3f343c0c1e4/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f626974636f696e626f6f6b2f626974636f696e626f6f6b2f646576656c6f702f696d616765732f6d6263325f303430372e706e67\"></p>\n<blockquote>\n<p>If you want to convert the compressed format to uncompressed, basically, you need to calculate <code>y</code> from <code>x</code> by solving the equation using <a href=\"https://en.wikipedia.org/wiki/Cipolla's_algorithm\" rel=\"nofollow\">Cipolla's Algorithm</a>:</p>\n<p><img alt=\"y^2=(x^3 + 7) mod p, where p=2^{256}-2^{32}-2^{9}-2^{8}-2^{7}-2^{6}-2^{4}-1\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b388a563380c2f481c911d2bc4d5ee1d578da82b/68747470733a2f2f7465782e7332636d732e72752f7376672f25323079253545322533442878253545332532302532422532303729253230253543626d6f6425323070253243253543253230776865726525354325323070253344322535452537423235362537442d3225354525374233322537442d32253545253742392537442d32253545253742382537442d32253545253742372537442d32253545253742362537442d32253545253742342537442d31253230\"></p>\n<p>You can check the <a href=\"https://en.bitcoin.it/wiki/Secp256k1\" rel=\"nofollow\">bitcoin wiki</a> and this thread on <a href=\"https://bitcointalk.org/index.php?topic=644919.msg7205689#msg7205689\" rel=\"nofollow\">bitcointalk.org</a> for more details.</p>\n</blockquote>\n<p>Then, the shared key between <code>k1</code> and <code>k2</code> is the <code>sha256</code> hash of the <strong>compressed</strong> ECDH public key. It's better to use the compressed format, since you can always get <code>x</code> from <code>x</code> or <code>(x, y)</code> without any calculation.</p>\n<p>You may want to ask, what if we don't hash it? Briefly, hash can:</p>\n<ol>\n<li>Make the shared key's length fixed;</li>\n<li>Make it safer since hash functions can remove \"weak bits\" in the original computed key. Check the introduction section of this <a href=\"http://cacr.uwaterloo.ca/techreports/1998/corr98-05.pdf\" rel=\"nofollow\">paper</a> for more details.</li>\n</ol>\n<blockquote>\n<p>Warning: According to some recent research, although widely used, the <code>sha256</code> key derivation function is <a href=\"https://github.com/ecies/py/issues/82\" rel=\"nofollow\">not secure enough</a>.</p>\n</blockquote>\n<h3>AES</h3>\n<p>Now we have the shared key, and we can use the <code>nonce</code> and <code>tag</code> to decrypt. This is quite straight, and the example derives from <code>pycryptodome</code>'s <a href=\"https://pycryptodome.readthedocs.io/en/latest/src/examples.html#encrypt-data-with-aes\" rel=\"nofollow\">documentation</a>.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">Crypto.Cipher</span> <span class=\"kn\">import</span> <span class=\"n\">AES</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"s1\">'</span><span class=\"se\">\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00</span><span class=\"s1\">'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">iv</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"s1\">'</span><span class=\"se\">\\xf3\\xe1\\xba\\x81\\r</span><span class=\"s1\">,</span><span class=\"se\">\\x89\\x00\\xb1\\x13\\x12\\xb7\\xc7</span><span class=\"s1\">%V_'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tag</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"s1\">'</span><span class=\"se\">\\xec</span><span class=\"s1\">;q</span><span class=\"se\">\\xe1</span><span class=\"s1\">|</span><span class=\"se\">\\x11\\xdb\\xe3\\x14\\x84\\xda\\x94</span><span class=\"s1\">P</span><span class=\"se\">\\xed\\xcf</span><span class=\"s1\">l'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"s1\">'</span><span class=\"se\">\\x02\\xd2\\xff\\xed\\x93\\xb8</span><span class=\"s1\">V</span><span class=\"se\">\\xf1</span><span class=\"s1\">H</span><span class=\"se\">\\xb9</span><span class=\"s1\">'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">decipher</span> <span class=\"o\">=</span> <span class=\"n\">AES</span><span class=\"o\">.</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">AES</span><span class=\"o\">.</span><span class=\"n\">MODE_GCM</span><span class=\"p\">,</span> <span class=\"n\">nonce</span><span class=\"o\">=</span><span class=\"n\">iv</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">decipher</span><span class=\"o\">.</span><span class=\"n\">decrypt_and_verify</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">tag</span><span class=\"p\">)</span>\n<span class=\"sa\">b</span><span class=\"s1\">'helloworld'</span>\n</pre>\n<blockquote>\n<p>Strictly speaking, <code>nonce</code> != <code>iv</code>, but this is a little bit off topic, if you are curious, you can check <a href=\"https://github.com/ecies/py/blob/master/ecies/utils.py#L213\" rel=\"nofollow\">the comment in <code>utils.py</code></a>.</p>\n</blockquote>\n<h2>Release Notes</h2>\n<h3>0.3.1 ~ 0.3.5</h3>\n<ul>\n<li>Support Python 3.8</li>\n<li>Bump dependencies</li>\n<li>Update documentation</li>\n</ul>\n<h3>0.3.0</h3>\n<ul>\n<li>API change: use <code>HKDF-sha256</code> to derive shared keys instead of <code>sha256</code></li>\n</ul>\n<h3>0.2.0</h3>\n<ul>\n<li>API change: <code>ecies.encrypt</code> and <code>ecies.decrypt</code> now can take both hex str and raw bytes</li>\n<li>Bump dependency versions</li>\n<li>Update documentation</li>\n</ul>\n<h3>0.1.1 ~ 0.1.9</h3>\n<ul>\n<li>Bump dependency versions</li>\n<li>Update documentation</li>\n<li>Switch to Circle CI</li>\n<li>Change license to MIT</li>\n</ul>\n<h3>0.1.0</h3>\n<ul>\n<li>First beta version release</li>\n</ul>\n\n          </div>"}, "last_serial": 6832874, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "2d9c80742f40a5684e8b6acbc15649aa", "sha256": "36e5cf4a8ee2b5ac568abf3c7dac8e761053c72fdbeef9a210f91985f5fb7022"}, "downloads": -1, "filename": "eciespy-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "2d9c80742f40a5684e8b6acbc15649aa", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8154, "upload_time": "2018-06-22T07:14:17", "upload_time_iso_8601": "2018-06-22T07:14:17.561798Z", "url": "https://files.pythonhosted.org/packages/d9/54/e36c5e7860d05effe16935e6656644e0e9ed27fbc41aa39fb9349433d95d/eciespy-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ff5e458ea006b81524a410c07160d63f", "sha256": "28215f8296b09985eccff75d381891120b779b62da3f26f58b1079b88ff7e68e"}, "downloads": -1, "filename": "eciespy-0.1.0.tar.gz", "has_sig": false, "md5_digest": "ff5e458ea006b81524a410c07160d63f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7210, "upload_time": "2018-06-22T07:14:18", "upload_time_iso_8601": "2018-06-22T07:14:18.584795Z", "url": "https://files.pythonhosted.org/packages/c1/a7/63d18972d155f318d3679a1ba7d5b665b2df57d0973de4400f61752516d2/eciespy-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "6ac55f1d1e390e3430a48078c86f1076", "sha256": "9ff8df77107eea7d3ade63c0af1020e9e3d0d1683ce38a92e2bd9fa5e57bee20"}, "downloads": -1, "filename": "eciespy-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "6ac55f1d1e390e3430a48078c86f1076", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8206, "upload_time": "2018-06-22T07:38:22", "upload_time_iso_8601": "2018-06-22T07:38:22.224324Z", "url": "https://files.pythonhosted.org/packages/46/25/826d76605895f352b78396aedf7f0dad35de1338ae62d30dc3e258ad8276/eciespy-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e8cdb9cec37edd761f0c256a905d0cc1", "sha256": "8f54e652279140107d9302da53a7f9cd37d398ecd52e4a779dc1212099a7b557"}, "downloads": -1, "filename": "eciespy-0.1.1.tar.gz", "has_sig": false, "md5_digest": "e8cdb9cec37edd761f0c256a905d0cc1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7291, "upload_time": "2018-06-22T07:38:23", "upload_time_iso_8601": "2018-06-22T07:38:23.243122Z", "url": "https://files.pythonhosted.org/packages/09/c4/8f17aae0f6f7a2c7cba96e6ac57194398d8aa5ac0b1681f76dc761ae247c/eciespy-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "d9ed93c302851bad92e397ba51b31c8d", "sha256": "3651b9279732e3bf446d38411ceb81d3ae919416d1fe6246e8e331d9ccb8f268"}, "downloads": -1, "filename": "eciespy-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "d9ed93c302851bad92e397ba51b31c8d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9432, "upload_time": "2018-07-17T05:11:13", "upload_time_iso_8601": "2018-07-17T05:11:13.920323Z", "url": "https://files.pythonhosted.org/packages/01/bb/923a7d66465379266b7c6721a50f2cfd8b6eb23167e301a1bb6dfa5277bd/eciespy-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "29575e8db8c60ffafd7bc5584b8cff13", "sha256": "ab332492f041e90a6244a9af8bd0ec58ee0a6cfd030002c1cdaf2b1148a7cc00"}, "downloads": -1, "filename": "eciespy-0.1.2.tar.gz", "has_sig": false, "md5_digest": "29575e8db8c60ffafd7bc5584b8cff13", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9687, "upload_time": "2018-07-17T05:11:15", "upload_time_iso_8601": "2018-07-17T05:11:15.087515Z", "url": "https://files.pythonhosted.org/packages/ef/6d/a80710e87a6f05392f6c2af78ab55d81e33dc69b4c34a4ab2419e967b6fb/eciespy-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "6619026da5ace8750e46f1dbc4e2f617", "sha256": "9b24e89d8b45d340953c82c236545a033dbe211590c14aa1c877a51498df41c2"}, "downloads": -1, "filename": "eciespy-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "6619026da5ace8750e46f1dbc4e2f617", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13584, "upload_time": "2018-10-17T09:02:16", "upload_time_iso_8601": "2018-10-17T09:02:16.225824Z", "url": "https://files.pythonhosted.org/packages/fd/d1/a536ddecf2cba1809c6a84201610289b4f5b458e8713d3c22545ef1fe9f3/eciespy-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "00ed12181d6db8e9070395f395d424c9", "sha256": "e0f98488da0d611f24371fa494ea3937efaece02ecfb9f8d40f1d39b80998e64"}, "downloads": -1, "filename": "eciespy-0.1.3.tar.gz", "has_sig": false, "md5_digest": "00ed12181d6db8e9070395f395d424c9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9726, "upload_time": "2018-10-17T09:02:17", "upload_time_iso_8601": "2018-10-17T09:02:17.667584Z", "url": "https://files.pythonhosted.org/packages/98/7c/6ef0c8f3b25b46f8af3122d99d5a73c13a1ecf7cab05d4f58ea2f1407142/eciespy-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "a4bceb3e70298fa1a06b262527d74018", "sha256": "060d0e352b007cd00697d10a506fd7d3f17799acba606b4cb9a500bc1dbc274d"}, "downloads": -1, "filename": "eciespy-0.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "a4bceb3e70298fa1a06b262527d74018", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10491, "upload_time": "2018-11-27T07:45:23", "upload_time_iso_8601": "2018-11-27T07:45:23.798491Z", "url": "https://files.pythonhosted.org/packages/88/73/a40ae3714ca3cbb0cc782027eb2aacba4829bca52d59752ea4d64e258c38/eciespy-0.1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bbd74f63d0aca5bb6e4f5c319c4dc7a8", "sha256": "c15296a243b52a7eda941e647f2ba18c19dff85132a5ee148086b48d0538e1bd"}, "downloads": -1, "filename": "eciespy-0.1.4.tar.gz", "has_sig": false, "md5_digest": "bbd74f63d0aca5bb6e4f5c319c4dc7a8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10011, "upload_time": "2018-11-27T07:45:25", "upload_time_iso_8601": "2018-11-27T07:45:25.105488Z", "url": "https://files.pythonhosted.org/packages/6e/91/d14463e100ba84466d47cb8763cd76075e19fc75cc693988e9ce32cd3ec5/eciespy-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "de048d36c804dd31970186fd471a908b", "sha256": "35663aa7986c01921d936d177ede8b37fcecbab7b45ed20007faf966792dcca9"}, "downloads": -1, "filename": "eciespy-0.1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "de048d36c804dd31970186fd471a908b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 10562, "upload_time": "2018-12-27T06:51:10", "upload_time_iso_8601": "2018-12-27T06:51:10.808043Z", "url": "https://files.pythonhosted.org/packages/8d/66/905c552baeb1cc98d429ee03ae34b1535aa88f45a03e9b5c81e5b19ee7e2/eciespy-0.1.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e57570690ca0cb3655e7759ad2b73eed", "sha256": "6433bc02ba7444f145a9815219808cb3a60eaa4a9b135f254fa515612723e499"}, "downloads": -1, "filename": "eciespy-0.1.5.tar.gz", "has_sig": false, "md5_digest": "e57570690ca0cb3655e7759ad2b73eed", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 10344, "upload_time": "2018-12-27T06:51:12", "upload_time_iso_8601": "2018-12-27T06:51:12.084520Z", "url": "https://files.pythonhosted.org/packages/f9/bf/7aa77b00172ebadf7cf3ff9de2cf5d10e245b3c07732dcd13ba59c6f0000/eciespy-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "0d53db57d69c438467c8c16724ac2db5", "sha256": "78ddb63ad66f85c742df571858c9336e9ca23703aded52b9c1b9c74b9624c467"}, "downloads": -1, "filename": "eciespy-0.1.6-py3-none-any.whl", "has_sig": false, "md5_digest": "0d53db57d69c438467c8c16724ac2db5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 10566, "upload_time": "2019-05-30T06:21:47", "upload_time_iso_8601": "2019-05-30T06:21:47.442787Z", "url": "https://files.pythonhosted.org/packages/ac/56/1e6fd6ae25b1fe92d37db50d140f2cd0f2c3c2ff7b19c7bef69efdc22e47/eciespy-0.1.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2422eb85442d16c9989e534a6971eaa6", "sha256": "1196277e6d5c0547f58efcd9a9c31e3808c0e3527ed9f97e2b5eb1760159e707"}, "downloads": -1, "filename": "eciespy-0.1.6.tar.gz", "has_sig": false, "md5_digest": "2422eb85442d16c9989e534a6971eaa6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 10353, "upload_time": "2019-05-30T06:21:48", "upload_time_iso_8601": "2019-05-30T06:21:48.630130Z", "url": "https://files.pythonhosted.org/packages/4b/07/bc448a306fa200e36d62efc2f4982fd33ee09465391b2f88ac5155c8f3ed/eciespy-0.1.6.tar.gz", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "cee74adfe40a963a08eaa6d8c780b355", "sha256": "bb85a96c2f517e4fca93ccc6a6c8b6cc9be7b7dc88a6766306b5fe9fa25cff1d"}, "downloads": -1, "filename": "eciespy-0.1.7-py3-none-any.whl", "has_sig": false, "md5_digest": "cee74adfe40a963a08eaa6d8c780b355", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 10978, "upload_time": "2019-06-12T03:57:52", "upload_time_iso_8601": "2019-06-12T03:57:52.396760Z", "url": "https://files.pythonhosted.org/packages/38/97/10f0f6e8c6639caef4233682f80c3fefdfd4cc41ee08f9bb33803c20455b/eciespy-0.1.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0c04ef9bb6216a2a6d64201f494c31fc", "sha256": "74085740f9ca607fa7f47dd327565cd41820dfe7b0820c8dff26b294cfd65869"}, "downloads": -1, "filename": "eciespy-0.1.7.tar.gz", "has_sig": false, "md5_digest": "0c04ef9bb6216a2a6d64201f494c31fc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 10869, "upload_time": "2019-06-12T03:57:54", "upload_time_iso_8601": "2019-06-12T03:57:54.020213Z", "url": "https://files.pythonhosted.org/packages/78/6f/d0d7d0e0619650869d7f1d6b9110acca90ae949bd4cb260e57efc92f1b46/eciespy-0.1.7.tar.gz", "yanked": false}], "0.1.8": [{"comment_text": "", "digests": {"md5": "b3f1563e0a589b2c358d6cb061edfe16", "sha256": "6850bbe97421161b5a29ef77e611cf2057ae0375f0567003da925f721cc3d987"}, "downloads": -1, "filename": "eciespy-0.1.8-py3-none-any.whl", "has_sig": false, "md5_digest": "b3f1563e0a589b2c358d6cb061edfe16", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 11066, "upload_time": "2019-06-26T09:19:12", "upload_time_iso_8601": "2019-06-26T09:19:12.322923Z", "url": "https://files.pythonhosted.org/packages/f2/0d/746671dc99697ad6fc28a139769f5ddaaffd4002fb60fe9090b9f18060db/eciespy-0.1.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c6210ee26102a6095001ba37bd060661", "sha256": "dc0a8be08da27b120adeebc9e39da1ba7e8d6187600a8f836695c4fd94e5d70b"}, "downloads": -1, "filename": "eciespy-0.1.8.tar.gz", "has_sig": false, "md5_digest": "c6210ee26102a6095001ba37bd060661", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 11043, "upload_time": "2019-06-26T09:19:13", "upload_time_iso_8601": "2019-06-26T09:19:13.777514Z", "url": "https://files.pythonhosted.org/packages/f6/1e/1c14c463abfba619dbc0e011f17b091462e905cfe04a9fece1fd4d8bc2d1/eciespy-0.1.8.tar.gz", "yanked": false}], "0.1.9": [{"comment_text": "", "digests": {"md5": "0f23431b6cef947f124049671991254b", "sha256": "25e0322210b0c0da4e89f14a08a63ede35e6bb8a5e3b8d0297f7bf20388688c2"}, "downloads": -1, "filename": "eciespy-0.1.9-py3-none-any.whl", "has_sig": false, "md5_digest": "0f23431b6cef947f124049671991254b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 11068, "upload_time": "2019-07-13T02:03:51", "upload_time_iso_8601": "2019-07-13T02:03:51.397924Z", "url": "https://files.pythonhosted.org/packages/dd/51/fdecc6a309334246182b4da2ab985ce688ebb425acf579fa5ce9d4b85539/eciespy-0.1.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c048e818e817c0da28f2375799f18793", "sha256": "1563e062e022038320602e81a25b3a03b456a0ef2e719be9477f92c42ec7b6a2"}, "downloads": -1, "filename": "eciespy-0.1.9.tar.gz", "has_sig": false, "md5_digest": "c048e818e817c0da28f2375799f18793", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 11043, "upload_time": "2019-07-13T02:03:52", "upload_time_iso_8601": "2019-07-13T02:03:52.876937Z", "url": "https://files.pythonhosted.org/packages/d4/58/12310183ef02300251d003378f28ca58052141bcef3a9246fe31e2f50c0c/eciespy-0.1.9.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "68a3376c4622055344fe243e61a47344", "sha256": "57f2659d57b7f4566b7d23a3dc81464157ccb287b31eba5999eb4177bcb8a6d3"}, "downloads": -1, "filename": "eciespy-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "68a3376c4622055344fe243e61a47344", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 11574, "upload_time": "2019-08-10T00:42:18", "upload_time_iso_8601": "2019-08-10T00:42:18.132267Z", "url": "https://files.pythonhosted.org/packages/2d/b5/1cd84d710e28fc7892b2aa90d78c27d4bf42734a09a9fd3ee030d3ba6141/eciespy-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4d13d313f2183837f4437cd82e3da2cc", "sha256": "5190e6dc7e55c878890f2c6dfdd26a08f26fbb8e9b1e5cf6dc2cd70cad1b8719"}, "downloads": -1, "filename": "eciespy-0.2.0.tar.gz", "has_sig": false, "md5_digest": "4d13d313f2183837f4437cd82e3da2cc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 11524, "upload_time": "2019-08-10T00:42:19", "upload_time_iso_8601": "2019-08-10T00:42:19.649696Z", "url": "https://files.pythonhosted.org/packages/0f/8d/f9ee1e3321d9df5983dd684d77a1cdc02256ecfc9a7c682770e9a691de3a/eciespy-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "48a183032ff333cd8a5fe6c0364ea920", "sha256": "82a0aa52e5847e4417919624402c93d15b944591e3d0f503535961b12d7920fd"}, "downloads": -1, "filename": "eciespy-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "48a183032ff333cd8a5fe6c0364ea920", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 11916, "upload_time": "2019-08-29T02:09:19", "upload_time_iso_8601": "2019-08-29T02:09:19.532695Z", "url": "https://files.pythonhosted.org/packages/a6/22/d5a0cfb248943611323952e74f06b239ad6616e202c251d0921684221f0c/eciespy-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6bec6b985fe4907ca68edbdc660a9329", "sha256": "39e6751fef3c52044f9e2f1b1c1a86ca273fce52b667d1a0c5c842d85c9be89c"}, "downloads": -1, "filename": "eciespy-0.3.0.tar.gz", "has_sig": false, "md5_digest": "6bec6b985fe4907ca68edbdc660a9329", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 13803, "upload_time": "2019-08-29T02:09:21", "upload_time_iso_8601": "2019-08-29T02:09:21.083319Z", "url": "https://files.pythonhosted.org/packages/89/0c/ef3ba667278d40df3c2c72924b0d07806e29d149665633c270518c8e25d2/eciespy-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "aad2f575cf28e7f01af44f45c0ceaca7", "sha256": "3b292d00977f8244741a61aa3ee8884cd5ef7673bdc8b8956f2c8f2d31f2a4f1"}, "downloads": -1, "filename": "eciespy-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "aad2f575cf28e7f01af44f45c0ceaca7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.3", "size": 11995, "upload_time": "2019-11-21T01:32:48", "upload_time_iso_8601": "2019-11-21T01:32:48.283948Z", "url": "https://files.pythonhosted.org/packages/f4/a6/347671e1ad1156d6e39e1fb2181bea37a80c6e6215f8abddd67faafb7f71/eciespy-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "600e3ad3503623017995ea7fd07594b8", "sha256": "8ad6a478d0a55fc2dc3155ce6c2f1032165ed70cf09fd08ddedd597ec048c574"}, "downloads": -1, "filename": "eciespy-0.3.1.tar.gz", "has_sig": false, "md5_digest": "600e3ad3503623017995ea7fd07594b8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.3", "size": 15741, "upload_time": "2019-11-21T01:32:49", "upload_time_iso_8601": "2019-11-21T01:32:49.563509Z", "url": "https://files.pythonhosted.org/packages/a5/eb/751b1c2b0daa2603f1ae0d0d629fec30c7ea22a4bec68d4b3a2f5592f018/eciespy-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "bf6f6b162ad2be0d4507edc85815cba0", "sha256": "08a7b1a0babb37844de18cee70346770d9dbcd6c8938f6002eabd4b465535de3"}, "downloads": -1, "filename": "eciespy-0.3.2-py3-none-any.whl", "has_sig": false, "md5_digest": "bf6f6b162ad2be0d4507edc85815cba0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.3", "size": 12018, "upload_time": "2019-11-23T05:03:09", "upload_time_iso_8601": "2019-11-23T05:03:09.363451Z", "url": "https://files.pythonhosted.org/packages/b6/64/73c152ff1990047d68c45908522b875cfd0aba99e1a9551429862ddc9d46/eciespy-0.3.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d805f163262477eaeb81ebbfe287d510", "sha256": "16c9612807a0a3ba092da3470279360bb5f339b3323441d7dc172367bde0f7bb"}, "downloads": -1, "filename": "eciespy-0.3.2.tar.gz", "has_sig": false, "md5_digest": "d805f163262477eaeb81ebbfe287d510", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.3", "size": 15812, "upload_time": "2019-11-23T05:03:11", "upload_time_iso_8601": "2019-11-23T05:03:11.038979Z", "url": "https://files.pythonhosted.org/packages/57/5b/f89d559b85a893a7ea467e3df6086f9c1ff8c88dcbb5c371768b79690537/eciespy-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "436ed524deff2bf41d0c68dd0d9e9f6d", "sha256": "6a4018339e7cb65c738d2c688df3815e98cf5cefd451b7da64e9d03cb2289e90"}, "downloads": -1, "filename": "eciespy-0.3.3-py3-none-any.whl", "has_sig": false, "md5_digest": "436ed524deff2bf41d0c68dd0d9e9f6d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.3", "size": 12155, "upload_time": "2019-12-14T00:51:53", "upload_time_iso_8601": "2019-12-14T00:51:53.372451Z", "url": "https://files.pythonhosted.org/packages/a4/7b/39d9f132aa69572ba3992d28f734e1d7bc6f2fabb0c4a5037e98a096190b/eciespy-0.3.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "721a6f69379fb6d9fd6c0306114ed522", "sha256": "221fcc7aca612f664e6fd2eba0a5a051c60a95b7287561b508e64e8032d7d1bb"}, "downloads": -1, "filename": "eciespy-0.3.3.tar.gz", "has_sig": false, "md5_digest": "721a6f69379fb6d9fd6c0306114ed522", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.3", "size": 16075, "upload_time": "2019-12-14T00:51:54", "upload_time_iso_8601": "2019-12-14T00:51:54.981785Z", "url": "https://files.pythonhosted.org/packages/f8/dc/3dbf93bc53735e8209c4ab7b278ed0211e82dfd1bc819fdfda5cdc57d97f/eciespy-0.3.3.tar.gz", "yanked": false}], "0.3.4": [{"comment_text": "", "digests": {"md5": "f2b0307ee7226dbc00defea2217226ef", "sha256": "1f6e6a1161e3409adfc74ec57de5697d0ce31977388294539b4d8db684142ad0"}, "downloads": -1, "filename": "eciespy-0.3.4-py3-none-any.whl", "has_sig": false, "md5_digest": "f2b0307ee7226dbc00defea2217226ef", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.3", "size": 12156, "upload_time": "2020-01-21T10:50:57", "upload_time_iso_8601": "2020-01-21T10:50:57.653838Z", "url": "https://files.pythonhosted.org/packages/37/4f/9d6709907b47e16cb28d86e1f58dc2e9e77a6212826da94470247effec93/eciespy-0.3.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0f342a350265b1c272e8fa5edfb6b663", "sha256": "1278ee903bbd1c6b54cc8b38eea14bbee04fa777bebfd1cfee00a8720892b9c7"}, "downloads": -1, "filename": "eciespy-0.3.4.tar.gz", "has_sig": false, "md5_digest": "0f342a350265b1c272e8fa5edfb6b663", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.3", "size": 16084, "upload_time": "2020-01-21T10:50:59", "upload_time_iso_8601": "2020-01-21T10:50:59.332907Z", "url": "https://files.pythonhosted.org/packages/3d/4c/978f63353860eb3c3719aec7ad9a03dd023dec327f158f98b7db6940893b/eciespy-0.3.4.tar.gz", "yanked": false}], "0.3.5": [{"comment_text": "", "digests": {"md5": "8c2a0400e14ada72e8541ac45693016b", "sha256": "d8547e281eacc12861d6afea55038803d776a749b4ac18cb67bdc7f97562f3a2"}, "downloads": -1, "filename": "eciespy-0.3.5-py3-none-any.whl", "has_sig": false, "md5_digest": "8c2a0400e14ada72e8541ac45693016b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.3", "size": 12158, "upload_time": "2020-03-18T02:24:04", "upload_time_iso_8601": "2020-03-18T02:24:04.409086Z", "url": "https://files.pythonhosted.org/packages/7e/a5/3082215c4b05008cc6ad1397ec5dd630ee0b8b14116658ec45395abd92dc/eciespy-0.3.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e0c817ea679a8dee07d3010bd0d03ca7", "sha256": "c4c24247a272bf152156d7086e0fedb632fd220c1a8cb6bc877c752c025164d2"}, "downloads": -1, "filename": "eciespy-0.3.5.tar.gz", "has_sig": false, "md5_digest": "e0c817ea679a8dee07d3010bd0d03ca7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.3", "size": 16068, "upload_time": "2020-03-18T02:24:05", "upload_time_iso_8601": "2020-03-18T02:24:05.603343Z", "url": "https://files.pythonhosted.org/packages/84/23/d8588fc410c5513c5463cd8d5251803b070a54bfee748cb34689dc81de66/eciespy-0.3.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8c2a0400e14ada72e8541ac45693016b", "sha256": "d8547e281eacc12861d6afea55038803d776a749b4ac18cb67bdc7f97562f3a2"}, "downloads": -1, "filename": "eciespy-0.3.5-py3-none-any.whl", "has_sig": false, "md5_digest": "8c2a0400e14ada72e8541ac45693016b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.3", "size": 12158, "upload_time": "2020-03-18T02:24:04", "upload_time_iso_8601": "2020-03-18T02:24:04.409086Z", "url": "https://files.pythonhosted.org/packages/7e/a5/3082215c4b05008cc6ad1397ec5dd630ee0b8b14116658ec45395abd92dc/eciespy-0.3.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e0c817ea679a8dee07d3010bd0d03ca7", "sha256": "c4c24247a272bf152156d7086e0fedb632fd220c1a8cb6bc877c752c025164d2"}, "downloads": -1, "filename": "eciespy-0.3.5.tar.gz", "has_sig": false, "md5_digest": "e0c817ea679a8dee07d3010bd0d03ca7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.3", "size": 16068, "upload_time": "2020-03-18T02:24:05", "upload_time_iso_8601": "2020-03-18T02:24:05.603343Z", "url": "https://files.pythonhosted.org/packages/84/23/d8588fc410c5513c5463cd8d5251803b070a54bfee748cb34689dc81de66/eciespy-0.3.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:48:01 2020"}