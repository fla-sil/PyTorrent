{"info": {"author": "Josiah Carlson", "author_email": "josiah.carlson@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: GNU Library or Lesser General Public License (LGPL)", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.4", "Programming Language :: Python :: 2.5", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.0", "Programming Language :: Python :: 3.1", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6"], "description": "\nDescription\n===========\n\nThis package intends to offer a mechanism to add properties to your modules.\nThe primary use-case of this functionality is to allow for the deferred\nexecution of expensive-to-compute module/package level globals without needing\nto explicitly call a function.\n\nGenerally speaking, this module has two APIs that offer this functionality.\nYou can use either of them or both of them, and everything will work more or\nless as you expect it to, as long as you follow the rules.\n\nNote that this package supports the use of basically any descriptor at the\nmodule-level, not just properties.\n\nUsage\n=====\n\nThe first method of using the package supports basically any descriptor being\nused as a decorator in the standard way. We show the use of ``property`` for the\nsake of brevity::\n\n    @property\n    def module_property(mod):\n        '''mod is the module that this property was defined in'''\n\n    import mprop; mprop.init()\n\n.. warning: If you use properties or any of your own descriptors, you must\n    call ``mprop.init()`` after defining all of your properties/descriptors.\n    You *can* call ``mprop.init()`` multiple times if you need to add more\n    properties/descriptors during runtime.\n\nBecause remembering to put the import/init call at the bottom of a module can\nbe annoying, we've got a special decorator that works just like the property\nobject, but handles the ``mprop.init()`` call for you::\n\n    from mprop import mproperty\n\n    @mproperty\n    def module_property2(mod):\n        '''I work exactly the same as the earlier module property, but you\n        don't need to make a subsequent call to ``mprop.init()``'''\n\nRegardless of which method you use, if the name of your module is ``mod`` those\nthat import the module can access the properties as normal::\n\n    # example.py\n    from mprop import mproperty\n\n    @mproperty\n    def prop(mod):\n        return \"I was called!\"\n\n    def fcn():\n        # I can access the property via:\n        print _pmodule.prop\n\n    # test.py\n    import example\n\n    # the below should print \"I was called!\"\n    print example.prop\n    # this should also print \"I was called!\"\n    example.fcn()\n\nReferencing properties from within the module\n=============================================\n\nAfter initialization, your code may want to reference the global properties.\nIf you try to access the properties directly, you will get a NameError unless\nyou locally aliased the value, the initialization has not completed, or unless\nsomeone else injected a value with that name into the globals.\n\nIf you would like to directly access properties in the module, from within the\nmodule, you must reference them relative to the newly generated module. This is\navailable from within your functions defined in the module via ``_pmodule``,\nwhich is the \"property-enhanced module\" that offers property access.\n\nIf you find it necessary to require access to the original module object\n(which doesn't support properties), you can access ``_module`` from the global\nnamspace.\n\nHow it works\n============\n\nThe short version: we replace the standard Python module instance in\n``sys.modules`` during module import, which allows us to ensure that the module\nis replaced everywhere it is used. We perform some magic to ensure that\neverything available in the original module is available in the replacement\nmodule (the replacement module's ``__dict__`` is the module's globals), and we\npost-process everything in the module's global namespace to pull out\ndescriptors as necessary.\n\nAs of February 1, 2019, in order to offer proper ``@mproperty.setter/deleter``\nsupport, we've started initializing the module after import via the system\nprofiler. More specifically, any time we get a call for ``@mproperty``, we see\nif we've installed a system profiler to clean up after this module. In CPython\nvia the ``sys.setprofile()`` handler, we look for return calls from module\ncreation. These auto-nest, and auto-remove themselves, so by the time your final\nmprop-using module is done initializing, our profilers are removed.\n\nWe used to inject a special ``__getattribute__`` method that auto-initializes on\nfirst access, but it was being triggered in cases where I didn't expect.\n\nPython magic that goes on\n-------------------------\n\n* Using ``sys.getframe()`` to pull calling frame objects to get module globals\n  and subsequently the module object itself\n* Replace ``sys.modules`` entries\n* Replace an instance ``__dict__``\n* Assign descriptors during runtime by modifying the base class of the\n  replacement module\n* Use the system profiler to discover when a module has finished loading, to\n  start initialization\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/josiahcarlson/mprop", "keywords": "", "license": "GNU LGPL v2.1", "maintainer": "", "maintainer_email": "", "name": "mprop", "package_url": "https://pypi.org/project/mprop/", "platform": "", "project_url": "https://pypi.org/project/mprop/", "project_urls": {"Homepage": "https://github.com/josiahcarlson/mprop"}, "release_url": "https://pypi.org/project/mprop/0.16.0/", "requires_dist": null, "requires_python": "", "summary": "Module properties for Python", "version": "0.16.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"description\">\n<h2>Description</h2>\n<p>This package intends to offer a mechanism to add properties to your modules.\nThe primary use-case of this functionality is to allow for the deferred\nexecution of expensive-to-compute module/package level globals without needing\nto explicitly call a function.</p>\n<p>Generally speaking, this module has two APIs that offer this functionality.\nYou can use either of them or both of them, and everything will work more or\nless as you expect it to, as long as you follow the rules.</p>\n<p>Note that this package supports the use of basically any descriptor at the\nmodule-level, not just properties.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>The first method of using the package supports basically any descriptor being\nused as a decorator in the standard way. We show the use of <tt>property</tt> for the\nsake of brevity:</p>\n<pre>@property\ndef module_property(mod):\n    '''mod is the module that this property was defined in'''\n\nimport mprop; mprop.init()\n</pre>\n<p>Because remembering to put the import/init call at the bottom of a module can\nbe annoying, we\u2019ve got a special decorator that works just like the property\nobject, but handles the <tt>mprop.init()</tt> call for you:</p>\n<pre>from mprop import mproperty\n\n@mproperty\ndef module_property2(mod):\n    '''I work exactly the same as the earlier module property, but you\n    don't need to make a subsequent call to ``mprop.init()``'''\n</pre>\n<p>Regardless of which method you use, if the name of your module is <tt>mod</tt> those\nthat import the module can access the properties as normal:</p>\n<pre># example.py\nfrom mprop import mproperty\n\n@mproperty\ndef prop(mod):\n    return \"I was called!\"\n\ndef fcn():\n    # I can access the property via:\n    print _pmodule.prop\n\n# test.py\nimport example\n\n# the below should print \"I was called!\"\nprint example.prop\n# this should also print \"I was called!\"\nexample.fcn()\n</pre>\n</div>\n<div id=\"referencing-properties-from-within-the-module\">\n<h2>Referencing properties from within the module</h2>\n<p>After initialization, your code may want to reference the global properties.\nIf you try to access the properties directly, you will get a NameError unless\nyou locally aliased the value, the initialization has not completed, or unless\nsomeone else injected a value with that name into the globals.</p>\n<p>If you would like to directly access properties in the module, from within the\nmodule, you must reference them relative to the newly generated module. This is\navailable from within your functions defined in the module via <tt>_pmodule</tt>,\nwhich is the \u201cproperty-enhanced module\u201d that offers property access.</p>\n<p>If you find it necessary to require access to the original module object\n(which doesn\u2019t support properties), you can access <tt>_module</tt> from the global\nnamspace.</p>\n</div>\n<div id=\"how-it-works\">\n<h2>How it works</h2>\n<p>The short version: we replace the standard Python module instance in\n<tt>sys.modules</tt> during module import, which allows us to ensure that the module\nis replaced everywhere it is used. We perform some magic to ensure that\neverything available in the original module is available in the replacement\nmodule (the replacement module\u2019s <tt>__dict__</tt> is the module\u2019s globals), and we\npost-process everything in the module\u2019s global namespace to pull out\ndescriptors as necessary.</p>\n<p>As of February 1, 2019, in order to offer proper <tt>@mproperty.setter/deleter</tt>\nsupport, we\u2019ve started initializing the module after import via the system\nprofiler. More specifically, any time we get a call for <tt>@mproperty</tt>, we see\nif we\u2019ve installed a system profiler to clean up after this module. In CPython\nvia the <tt>sys.setprofile()</tt> handler, we look for return calls from module\ncreation. These auto-nest, and auto-remove themselves, so by the time your final\nmprop-using module is done initializing, our profilers are removed.</p>\n<p>We used to inject a special <tt>__getattribute__</tt> method that auto-initializes on\nfirst access, but it was being triggered in cases where I didn\u2019t expect.</p>\n<div id=\"python-magic-that-goes-on\">\n<h3>Python magic that goes on</h3>\n<ul>\n<li>Using <tt>sys.getframe()</tt> to pull calling frame objects to get module globals\nand subsequently the module object itself</li>\n<li>Replace <tt>sys.modules</tt> entries</li>\n<li>Replace an instance <tt>__dict__</tt></li>\n<li>Assign descriptors during runtime by modifying the base class of the\nreplacement module</li>\n<li>Use the system profiler to discover when a module has finished loading, to\nstart initialization</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 4766929, "releases": {"0.09": [{"comment_text": "", "digests": {"md5": "6a465c7ee0818f71d68b64928c4973b9", "sha256": "bc10baf7238a9f1b46b68778bbc659bcc000b8a30a2f7c7d1665033132c4e9a5"}, "downloads": -1, "filename": "mprop-0.09.tar.gz", "has_sig": false, "md5_digest": "6a465c7ee0818f71d68b64928c4973b9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4095, "upload_time": "2015-06-25T04:40:17", "upload_time_iso_8601": "2015-06-25T04:40:17.587385Z", "url": "https://files.pythonhosted.org/packages/02/1d/9b893be346ca6114d65d0780a5b473035b47b17b997fad524cc6aff52327/mprop-0.09.tar.gz", "yanked": false}], "0.10": [{"comment_text": "", "digests": {"md5": "9c4e7a8f811c6018ce296a94214b7cc5", "sha256": "7fa85c459d8eaf54f564cb38872740b23e5eacfc0e4cf21d289b03648bd89565"}, "downloads": -1, "filename": "mprop-0.10.tar.gz", "has_sig": false, "md5_digest": "9c4e7a8f811c6018ce296a94214b7cc5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4090, "upload_time": "2013-12-06T07:05:50", "upload_time_iso_8601": "2013-12-06T07:05:50.746450Z", "url": "https://files.pythonhosted.org/packages/a2/de/f8e96ff27b824344d5d3bd2569d75f34a20272e3518d6b19b419dedd22e1/mprop-0.10.tar.gz", "yanked": false}], "0.11": [{"comment_text": "", "digests": {"md5": "51d9d2089bc3833d8ac9a6e97b4e715b", "sha256": "6ac23fff7254bef5cd4dfef32a317eb7d8b07dd1ba4c4a52e3e444bb011126bc"}, "downloads": -1, "filename": "mprop-0.11.tar.gz", "has_sig": false, "md5_digest": "51d9d2089bc3833d8ac9a6e97b4e715b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4091, "upload_time": "2013-12-06T15:40:08", "upload_time_iso_8601": "2013-12-06T15:40:08.380602Z", "url": "https://files.pythonhosted.org/packages/89/68/e4b0efd3c46e952ae722402355d20b53340d552de8833fb1111562f231ba/mprop-0.11.tar.gz", "yanked": false}], "0.12": [{"comment_text": "", "digests": {"md5": "cf1ee76bd391a1dd200cb80985191bb0", "sha256": "90a4bef1f2c2ee6141b89a747959a20789ede9f599c3cdb76f8b026f126d5d23"}, "downloads": -1, "filename": "mprop-0.12.tar.gz", "has_sig": false, "md5_digest": "cf1ee76bd391a1dd200cb80985191bb0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4085, "upload_time": "2013-12-06T15:42:20", "upload_time_iso_8601": "2013-12-06T15:42:20.182752Z", "url": "https://files.pythonhosted.org/packages/af/f0/23734fb43d49b3ac7c60d9be23c735311bd73a01d47c01a451a444204b0f/mprop-0.12.tar.gz", "yanked": false}], "0.13": [{"comment_text": "", "digests": {"md5": "1d72fc4c6d055018d80dd6c8636628f2", "sha256": "d3f2b24c6c7ae3c904f02e0c9407f998b1ac96b254fb9b19824f0d623bba765c"}, "downloads": -1, "filename": "mprop-0.13.tar.gz", "has_sig": false, "md5_digest": "1d72fc4c6d055018d80dd6c8636628f2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4140, "upload_time": "2013-12-06T21:13:00", "upload_time_iso_8601": "2013-12-06T21:13:00.225804Z", "url": "https://files.pythonhosted.org/packages/49/e1/8beb68f209841c30180b929824f2c9212d0870f36ed31ae671280be758da/mprop-0.13.tar.gz", "yanked": false}], "0.14": [{"comment_text": "", "digests": {"md5": "779731d48c8f2f01ee0c9e833bfddeb5", "sha256": "6ee974fb2bfbc28ed23ee4d7760da56ac4d8b349b7629bdb57efc71cb1346097"}, "downloads": -1, "filename": "mprop-0.14.tar.gz", "has_sig": false, "md5_digest": "779731d48c8f2f01ee0c9e833bfddeb5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4262, "upload_time": "2015-06-25T04:40:43", "upload_time_iso_8601": "2015-06-25T04:40:43.958514Z", "url": "https://files.pythonhosted.org/packages/bf/0c/c070c0d90022d21d707f6e4b750fbfa022afdaf4ea8dbe0fbcb7fee9ab2e/mprop-0.14.tar.gz", "yanked": false}], "0.15.0": [{"comment_text": "", "digests": {"md5": "042bd5a84f39bb7e314476447e293744", "sha256": "b6709c97bdcee068ae916591077b3c209262b435c3729c7d41d273c44db6d38a"}, "downloads": -1, "filename": "mprop-0.15.0.tar.gz", "has_sig": false, "md5_digest": "042bd5a84f39bb7e314476447e293744", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4018, "upload_time": "2018-09-24T20:56:56", "upload_time_iso_8601": "2018-09-24T20:56:56.453025Z", "url": "https://files.pythonhosted.org/packages/b9/28/8be2b3f9f956b5d9efd38abf6059d7eb4216c645ba68bc53542799a28d3f/mprop-0.15.0.tar.gz", "yanked": false}], "0.16.0": [{"comment_text": "", "digests": {"md5": "ed297a470e59a7da29b253d7cd5bfbfc", "sha256": "14d5f4deed108c13cae8858209159cfe73a071b41298b0b1d006ed32f3096017"}, "downloads": -1, "filename": "mprop-0.16.0.tar.gz", "has_sig": false, "md5_digest": "ed297a470e59a7da29b253d7cd5bfbfc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4489, "upload_time": "2019-02-01T05:08:37", "upload_time_iso_8601": "2019-02-01T05:08:37.163053Z", "url": "https://files.pythonhosted.org/packages/16/d2/b6ea50eb479ed6c5fb0ac8cfa82eeca20cc6ce4951e94a60dd2f6e9e40ae/mprop-0.16.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ed297a470e59a7da29b253d7cd5bfbfc", "sha256": "14d5f4deed108c13cae8858209159cfe73a071b41298b0b1d006ed32f3096017"}, "downloads": -1, "filename": "mprop-0.16.0.tar.gz", "has_sig": false, "md5_digest": "ed297a470e59a7da29b253d7cd5bfbfc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4489, "upload_time": "2019-02-01T05:08:37", "upload_time_iso_8601": "2019-02-01T05:08:37.163053Z", "url": "https://files.pythonhosted.org/packages/16/d2/b6ea50eb479ed6c5fb0ac8cfa82eeca20cc6ce4951e94a60dd2f6e9e40ae/mprop-0.16.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:10 2020"}