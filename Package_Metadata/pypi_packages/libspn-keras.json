{"info": {"author": "Jos van de Wolfshaar, Andrzej Pronobis", "author_email": "jos.vandewolfshaar@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Build Tools"], "description": "# LibSPN Keras\n\nLibSPN Keras is a library for constructing and training Sum-Product Networks. By leveraging the \nKeras framework with a TensorFlow backend, it offers both ease-of-use and scalability. Whereas the \npreviously available `libspn` focused on scalability, `libspn-keras` offers scalability **and** \na straightforward Keras-compatible interface.\n\n![](logo.png \"LibSPN Keras logo\")\n\n## Documentation\nThe documentation of the library is hosted on [ReadTheDocs](https://libspn-keras.readthedocs.io/en/latest/README.html).\n\n## What are SPNs?\n\nSum-Product Networks (SPNs) are a probabilistic deep architecture with solid theoretical \nfoundations, which demonstrated state-of-the-art performance in several domains. Yet, surprisingly, \nthere are no mature, general-purpose SPN implementations that would serve as a platform for the \ncommunity of machine learning researchers centered around SPNs. LibSPN Keras is a new \ngeneral-purpose Python library, which aims to become such a platform. The library is designed to \nmake it straightforward and effortless to apply various SPN architectures to large-scale datasets \nand problems. The library achieves scalability and efficiency, thanks to a tight coupling with \nTensorFlow and Keras, two frameworks already in use by a large community of researchers and \ndevelopers in multiple domains.\n\n## Dependencies\nCurrently, LibSPN Keras is tested with `tensorflow>=2.0` and `tensorflow-probability>=0.8.0`.\n\n## Installation\n\n```\npip install libspn-keras\n```\n\n## Note on stability of the repo\nCurrently, the repo is in an alpha state. Hence, one can expect some sporadic breaking changes.\n\n## Feature Overview\n- Gradient based training for generative and discriminative problems\n- Hard EM training for generative problems\n- Hard EM training with unweighted weights for generative problems\n- Soft EM training (experimental) for generative problems\n- [Deep Generalized Convolutional Sum-Product Networks](https://arxiv.org/abs/1902.06155)\n- SPNs with arbitrary decompositions\n- Fully compatible with Keras and TensorFlow 2.0\n- Input dropout\n- Sum child dropout\n- Image completion\n- Model saving\n- Discrete inputs through an `IndicatorLeaf` node\n- Continuous inputs through `NormalLeaf`, `CauchyLeaf` or `LaplaceLeaf`. Each of these distributions support both \nunivariate as well as *multivariate* inputs.\n\n## Examples / Tutorials\n1. [**Image Classification**: A Deep Generalized Convolutional Sum-Product Network (DGC-SPN) with `libspn-keras` in Colab](https://colab.research.google.com/drive/1LUuZ7TBKQIma9IUkkBNbB99hlK_4ccMJ)\n2. [**Image Completion**: A Deep Generalized Convolutional Sum-Product Network (DGC-SPN) with `libspn-keras` in Colab.](https://colab.research.google.com/drive/1XXAWoVLMkdxR7Wu4GsJnXrixTgAPZsSb)\n3. [**Randomly structured SPNs** for image classification](https://colab.research.google.com/drive/1uvJd1Q6wUdEkM2dpT4wkZfNT6lgj-2u3)\n4. [**Understanding region SPNs**](https://colab.research.google.com/drive/1QMEFEjb7jZdOtuo5OT5J2HVhNOE_3xmc)\n5. More to come, and if you would like to see a tutorial on anything in particular \nplease raise an issue!\n\nCheck out the way we can build complex DGC-SPNs in a layer-wise fashion:\n```python\nfrom libspn_keras import layers\nfrom tensorflow import keras\n\nsum_kwargs = dict(\n    accumulator_initializer=keras.initializers.TruncatedNormal(\n        stddev=0.5, mean=1.0),\n    logspace_accumulators=True\n)\n\nsum_product_network = keras.Sequential([\n  layers.NormalLeaf(\n      input_shape=(28, 28, 1),\n      num_components=16, \n      location_trainable=True,\n      location_initializer=keras.initializers.TruncatedNormal(\n          stddev=1.0, mean=0.0)\n  ),\n  # Non-overlapping products\n  layers.Conv2DProduct(\n      depthwise=True, \n      strides=[2, 2], \n      dilations=[1, 1], \n      kernel_size=[2, 2],\n      padding='valid'\n  ),\n  layers.Local2DSum(num_sums=16, **sum_kwargs),\n  # Non-overlapping products\n  layers.Conv2DProduct(\n      depthwise=True, \n      strides=[2, 2], \n      dilations=[1, 1], \n      kernel_size=[2, 2],\n      padding='valid'\n  ),\n  layers.Local2DSum(num_sums=32, **sum_kwargs),\n  # Overlapping products, starting at dilations [1, 1]\n  layers.Conv2DProduct(\n      depthwise=True, \n      strides=[1, 1], \n      dilations=[1, 1], \n      kernel_size=[2, 2],\n      padding='full'\n  ),\n  layers.Local2DSum(num_sums=32, **sum_kwargs),\n  # Overlapping products, with dilations [2, 2] and full padding\n  layers.Conv2DProduct(\n      depthwise=True, \n      strides=[1, 1], \n      dilations=[2, 2], \n      kernel_size=[2, 2],\n      padding='full'\n  ),\n  layers.Local2DSum(num_sums=64, **sum_kwargs),\n  # Overlapping products, with dilations [4, 4] and full padding\n  layers.Conv2DProduct(\n      depthwise=True, \n      strides=[1, 1], \n      dilations=[4, 4], \n      kernel_size=[2, 2],\n      padding='full'\n  ),\n  layers.Local2DSum(num_sums=64, **sum_kwargs),\n  # Overlapping products, with dilations [8, 8] and 'final' padding to combine \n  # all scopes\n  layers.Conv2DProduct(\n      depthwise=True, \n      strides=[1, 1], \n      dilations=[8, 8], \n      kernel_size=[2, 2],\n      padding='final'\n  ),\n  layers.SpatialToRegions(),\n  # Class roots\n  layers.DenseSum(num_sums=10, **sum_kwargs),\n  layers.RootSum(\n      return_weighted_child_logits=True, \n      logspace_accumulators=True, \n      accumulator_initializer=keras.initializers.TruncatedNormal(\n          stddev=0.0, mean=1.0)\n  )\n])\nsum_product_network.summary()\n```\n\nWhich produces:\n```\nModel: \"sequential\"\n_________________________________________________________________\nLayer (type)                 Output Shape              Param #   \n=================================================================\nnormal_leaf (NormalLeaf)     (None, 28, 28, 16)        25088     \n_________________________________________________________________\nconv2d_product (Conv2DProduc (None, 14, 14, 16)        4         \n_________________________________________________________________\nlocal2d_sum (Local2DSum)     (None, 14, 14, 16)        50176     \n_________________________________________________________________\nconv2d_product_1 (Conv2DProd (None, 7, 7, 16)          4         \n_________________________________________________________________\nlocal2d_sum_1 (Local2DSum)   (None, 7, 7, 32)          25088     \n_________________________________________________________________\nconv2d_product_2 (Conv2DProd (None, 8, 8, 32)          4         \n_________________________________________________________________\nlocal2d_sum_2 (Local2DSum)   (None, 8, 8, 32)          65536     \n_________________________________________________________________\nconv2d_product_3 (Conv2DProd (None, 10, 10, 32)        4         \n_________________________________________________________________\nlocal2d_sum_3 (Local2DSum)   (None, 10, 10, 64)        204800    \n_________________________________________________________________\nconv2d_product_4 (Conv2DProd (None, 14, 14, 64)        4         \n_________________________________________________________________\nlocal2d_sum_4 (Local2DSum)   (None, 14, 14, 64)        802816    \n_________________________________________________________________\nconv2d_product_5 (Conv2DProd (None, 8, 8, 64)          4         \n_________________________________________________________________\nspatial_to_regions (SpatialT (1, 1, None, 4096)        0         \n_________________________________________________________________\ndense_sum (DenseSum)         (1, 1, None, 10)          40960     \n_________________________________________________________________\nroot_sum (RootSum)           (None, 10)                10        \n=================================================================\nTotal params: 1,214,498\nTrainable params: 1,201,930\nNon-trainable params: 12,568\n_________________________________________________________________\n```\n\n## TODOs\n- Structure learning\n- Advanced regularization e.g. pruning or auxiliary losses on weight accumulators\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/pypa/sampleproject", "keywords": "spn pgm dnn tensor gpu", "license": "", "maintainer": "", "maintainer_email": "", "name": "libspn-keras", "package_url": "https://pypi.org/project/libspn-keras/", "platform": "", "project_url": "https://pypi.org/project/libspn-keras/", "project_urls": {"Homepage": "https://github.com/pypa/sampleproject"}, "release_url": "https://pypi.org/project/libspn-keras/0.2.0/", "requires_dist": ["tensorflow (>=2.0)", "tensorflow-probability (>=0.8.0)", "plotly", "colorlover"], "requires_python": ">2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, <4", "summary": "LibSPN-Keras: a Keras library for Sum-Product Networks.", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>LibSPN Keras</h1>\n<p>LibSPN Keras is a library for constructing and training Sum-Product Networks. By leveraging the\nKeras framework with a TensorFlow backend, it offers both ease-of-use and scalability. Whereas the\npreviously available <code>libspn</code> focused on scalability, <code>libspn-keras</code> offers scalability <strong>and</strong>\na straightforward Keras-compatible interface.</p>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/388655114bc901a8aeb49270f41e805988057feb/6c6f676f2e706e67\"></p>\n<h2>Documentation</h2>\n<p>The documentation of the library is hosted on <a href=\"https://libspn-keras.readthedocs.io/en/latest/README.html\" rel=\"nofollow\">ReadTheDocs</a>.</p>\n<h2>What are SPNs?</h2>\n<p>Sum-Product Networks (SPNs) are a probabilistic deep architecture with solid theoretical\nfoundations, which demonstrated state-of-the-art performance in several domains. Yet, surprisingly,\nthere are no mature, general-purpose SPN implementations that would serve as a platform for the\ncommunity of machine learning researchers centered around SPNs. LibSPN Keras is a new\ngeneral-purpose Python library, which aims to become such a platform. The library is designed to\nmake it straightforward and effortless to apply various SPN architectures to large-scale datasets\nand problems. The library achieves scalability and efficiency, thanks to a tight coupling with\nTensorFlow and Keras, two frameworks already in use by a large community of researchers and\ndevelopers in multiple domains.</p>\n<h2>Dependencies</h2>\n<p>Currently, LibSPN Keras is tested with <code>tensorflow&gt;=2.0</code> and <code>tensorflow-probability&gt;=0.8.0</code>.</p>\n<h2>Installation</h2>\n<pre><code>pip install libspn-keras\n</code></pre>\n<h2>Note on stability of the repo</h2>\n<p>Currently, the repo is in an alpha state. Hence, one can expect some sporadic breaking changes.</p>\n<h2>Feature Overview</h2>\n<ul>\n<li>Gradient based training for generative and discriminative problems</li>\n<li>Hard EM training for generative problems</li>\n<li>Hard EM training with unweighted weights for generative problems</li>\n<li>Soft EM training (experimental) for generative problems</li>\n<li><a href=\"https://arxiv.org/abs/1902.06155\" rel=\"nofollow\">Deep Generalized Convolutional Sum-Product Networks</a></li>\n<li>SPNs with arbitrary decompositions</li>\n<li>Fully compatible with Keras and TensorFlow 2.0</li>\n<li>Input dropout</li>\n<li>Sum child dropout</li>\n<li>Image completion</li>\n<li>Model saving</li>\n<li>Discrete inputs through an <code>IndicatorLeaf</code> node</li>\n<li>Continuous inputs through <code>NormalLeaf</code>, <code>CauchyLeaf</code> or <code>LaplaceLeaf</code>. Each of these distributions support both\nunivariate as well as <em>multivariate</em> inputs.</li>\n</ul>\n<h2>Examples / Tutorials</h2>\n<ol>\n<li><a href=\"https://colab.research.google.com/drive/1LUuZ7TBKQIma9IUkkBNbB99hlK_4ccMJ\" rel=\"nofollow\"><strong>Image Classification</strong>: A Deep Generalized Convolutional Sum-Product Network (DGC-SPN) with <code>libspn-keras</code> in Colab</a></li>\n<li><a href=\"https://colab.research.google.com/drive/1XXAWoVLMkdxR7Wu4GsJnXrixTgAPZsSb\" rel=\"nofollow\"><strong>Image Completion</strong>: A Deep Generalized Convolutional Sum-Product Network (DGC-SPN) with <code>libspn-keras</code> in Colab.</a></li>\n<li><a href=\"https://colab.research.google.com/drive/1uvJd1Q6wUdEkM2dpT4wkZfNT6lgj-2u3\" rel=\"nofollow\"><strong>Randomly structured SPNs</strong> for image classification</a></li>\n<li><a href=\"https://colab.research.google.com/drive/1QMEFEjb7jZdOtuo5OT5J2HVhNOE_3xmc\" rel=\"nofollow\"><strong>Understanding region SPNs</strong></a></li>\n<li>More to come, and if you would like to see a tutorial on anything in particular\nplease raise an issue!</li>\n</ol>\n<p>Check out the way we can build complex DGC-SPNs in a layer-wise fashion:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">libspn_keras</span> <span class=\"kn\">import</span> <span class=\"n\">layers</span>\n<span class=\"kn\">from</span> <span class=\"nn\">tensorflow</span> <span class=\"kn\">import</span> <span class=\"n\">keras</span>\n\n<span class=\"n\">sum_kwargs</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span>\n    <span class=\"n\">accumulator_initializer</span><span class=\"o\">=</span><span class=\"n\">keras</span><span class=\"o\">.</span><span class=\"n\">initializers</span><span class=\"o\">.</span><span class=\"n\">TruncatedNormal</span><span class=\"p\">(</span>\n        <span class=\"n\">stddev</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"n\">mean</span><span class=\"o\">=</span><span class=\"mf\">1.0</span><span class=\"p\">),</span>\n    <span class=\"n\">logspace_accumulators</span><span class=\"o\">=</span><span class=\"kc\">True</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">sum_product_network</span> <span class=\"o\">=</span> <span class=\"n\">keras</span><span class=\"o\">.</span><span class=\"n\">Sequential</span><span class=\"p\">([</span>\n  <span class=\"n\">layers</span><span class=\"o\">.</span><span class=\"n\">NormalLeaf</span><span class=\"p\">(</span>\n      <span class=\"n\">input_shape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">28</span><span class=\"p\">,</span> <span class=\"mi\">28</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span>\n      <span class=\"n\">num_components</span><span class=\"o\">=</span><span class=\"mi\">16</span><span class=\"p\">,</span> \n      <span class=\"n\">location_trainable</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n      <span class=\"n\">location_initializer</span><span class=\"o\">=</span><span class=\"n\">keras</span><span class=\"o\">.</span><span class=\"n\">initializers</span><span class=\"o\">.</span><span class=\"n\">TruncatedNormal</span><span class=\"p\">(</span>\n          <span class=\"n\">stddev</span><span class=\"o\">=</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"n\">mean</span><span class=\"o\">=</span><span class=\"mf\">0.0</span><span class=\"p\">)</span>\n  <span class=\"p\">),</span>\n  <span class=\"c1\"># Non-overlapping products</span>\n  <span class=\"n\">layers</span><span class=\"o\">.</span><span class=\"n\">Conv2DProduct</span><span class=\"p\">(</span>\n      <span class=\"n\">depthwise</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> \n      <span class=\"n\">strides</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> \n      <span class=\"n\">dilations</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> \n      <span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span>\n      <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"s1\">'valid'</span>\n  <span class=\"p\">),</span>\n  <span class=\"n\">layers</span><span class=\"o\">.</span><span class=\"n\">Local2DSum</span><span class=\"p\">(</span><span class=\"n\">num_sums</span><span class=\"o\">=</span><span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">sum_kwargs</span><span class=\"p\">),</span>\n  <span class=\"c1\"># Non-overlapping products</span>\n  <span class=\"n\">layers</span><span class=\"o\">.</span><span class=\"n\">Conv2DProduct</span><span class=\"p\">(</span>\n      <span class=\"n\">depthwise</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> \n      <span class=\"n\">strides</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> \n      <span class=\"n\">dilations</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> \n      <span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span>\n      <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"s1\">'valid'</span>\n  <span class=\"p\">),</span>\n  <span class=\"n\">layers</span><span class=\"o\">.</span><span class=\"n\">Local2DSum</span><span class=\"p\">(</span><span class=\"n\">num_sums</span><span class=\"o\">=</span><span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">sum_kwargs</span><span class=\"p\">),</span>\n  <span class=\"c1\"># Overlapping products, starting at dilations [1, 1]</span>\n  <span class=\"n\">layers</span><span class=\"o\">.</span><span class=\"n\">Conv2DProduct</span><span class=\"p\">(</span>\n      <span class=\"n\">depthwise</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> \n      <span class=\"n\">strides</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> \n      <span class=\"n\">dilations</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> \n      <span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span>\n      <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"s1\">'full'</span>\n  <span class=\"p\">),</span>\n  <span class=\"n\">layers</span><span class=\"o\">.</span><span class=\"n\">Local2DSum</span><span class=\"p\">(</span><span class=\"n\">num_sums</span><span class=\"o\">=</span><span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">sum_kwargs</span><span class=\"p\">),</span>\n  <span class=\"c1\"># Overlapping products, with dilations [2, 2] and full padding</span>\n  <span class=\"n\">layers</span><span class=\"o\">.</span><span class=\"n\">Conv2DProduct</span><span class=\"p\">(</span>\n      <span class=\"n\">depthwise</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> \n      <span class=\"n\">strides</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> \n      <span class=\"n\">dilations</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> \n      <span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span>\n      <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"s1\">'full'</span>\n  <span class=\"p\">),</span>\n  <span class=\"n\">layers</span><span class=\"o\">.</span><span class=\"n\">Local2DSum</span><span class=\"p\">(</span><span class=\"n\">num_sums</span><span class=\"o\">=</span><span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">sum_kwargs</span><span class=\"p\">),</span>\n  <span class=\"c1\"># Overlapping products, with dilations [4, 4] and full padding</span>\n  <span class=\"n\">layers</span><span class=\"o\">.</span><span class=\"n\">Conv2DProduct</span><span class=\"p\">(</span>\n      <span class=\"n\">depthwise</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> \n      <span class=\"n\">strides</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> \n      <span class=\"n\">dilations</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span> \n      <span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span>\n      <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"s1\">'full'</span>\n  <span class=\"p\">),</span>\n  <span class=\"n\">layers</span><span class=\"o\">.</span><span class=\"n\">Local2DSum</span><span class=\"p\">(</span><span class=\"n\">num_sums</span><span class=\"o\">=</span><span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">sum_kwargs</span><span class=\"p\">),</span>\n  <span class=\"c1\"># Overlapping products, with dilations [8, 8] and 'final' padding to combine </span>\n  <span class=\"c1\"># all scopes</span>\n  <span class=\"n\">layers</span><span class=\"o\">.</span><span class=\"n\">Conv2DProduct</span><span class=\"p\">(</span>\n      <span class=\"n\">depthwise</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> \n      <span class=\"n\">strides</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> \n      <span class=\"n\">dilations</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">],</span> \n      <span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span>\n      <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"s1\">'final'</span>\n  <span class=\"p\">),</span>\n  <span class=\"n\">layers</span><span class=\"o\">.</span><span class=\"n\">SpatialToRegions</span><span class=\"p\">(),</span>\n  <span class=\"c1\"># Class roots</span>\n  <span class=\"n\">layers</span><span class=\"o\">.</span><span class=\"n\">DenseSum</span><span class=\"p\">(</span><span class=\"n\">num_sums</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">sum_kwargs</span><span class=\"p\">),</span>\n  <span class=\"n\">layers</span><span class=\"o\">.</span><span class=\"n\">RootSum</span><span class=\"p\">(</span>\n      <span class=\"n\">return_weighted_child_logits</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> \n      <span class=\"n\">logspace_accumulators</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> \n      <span class=\"n\">accumulator_initializer</span><span class=\"o\">=</span><span class=\"n\">keras</span><span class=\"o\">.</span><span class=\"n\">initializers</span><span class=\"o\">.</span><span class=\"n\">TruncatedNormal</span><span class=\"p\">(</span>\n          <span class=\"n\">stddev</span><span class=\"o\">=</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"n\">mean</span><span class=\"o\">=</span><span class=\"mf\">1.0</span><span class=\"p\">)</span>\n  <span class=\"p\">)</span>\n<span class=\"p\">])</span>\n<span class=\"n\">sum_product_network</span><span class=\"o\">.</span><span class=\"n\">summary</span><span class=\"p\">()</span>\n</pre>\n<p>Which produces:</p>\n<pre><code>Model: \"sequential\"\n_________________________________________________________________\nLayer (type)                 Output Shape              Param #   \n=================================================================\nnormal_leaf (NormalLeaf)     (None, 28, 28, 16)        25088     \n_________________________________________________________________\nconv2d_product (Conv2DProduc (None, 14, 14, 16)        4         \n_________________________________________________________________\nlocal2d_sum (Local2DSum)     (None, 14, 14, 16)        50176     \n_________________________________________________________________\nconv2d_product_1 (Conv2DProd (None, 7, 7, 16)          4         \n_________________________________________________________________\nlocal2d_sum_1 (Local2DSum)   (None, 7, 7, 32)          25088     \n_________________________________________________________________\nconv2d_product_2 (Conv2DProd (None, 8, 8, 32)          4         \n_________________________________________________________________\nlocal2d_sum_2 (Local2DSum)   (None, 8, 8, 32)          65536     \n_________________________________________________________________\nconv2d_product_3 (Conv2DProd (None, 10, 10, 32)        4         \n_________________________________________________________________\nlocal2d_sum_3 (Local2DSum)   (None, 10, 10, 64)        204800    \n_________________________________________________________________\nconv2d_product_4 (Conv2DProd (None, 14, 14, 64)        4         \n_________________________________________________________________\nlocal2d_sum_4 (Local2DSum)   (None, 14, 14, 64)        802816    \n_________________________________________________________________\nconv2d_product_5 (Conv2DProd (None, 8, 8, 64)          4         \n_________________________________________________________________\nspatial_to_regions (SpatialT (1, 1, None, 4096)        0         \n_________________________________________________________________\ndense_sum (DenseSum)         (1, 1, None, 10)          40960     \n_________________________________________________________________\nroot_sum (RootSum)           (None, 10)                10        \n=================================================================\nTotal params: 1,214,498\nTrainable params: 1,201,930\nNon-trainable params: 12,568\n_________________________________________________________________\n</code></pre>\n<h2>TODOs</h2>\n<ul>\n<li>Structure learning</li>\n<li>Advanced regularization e.g. pruning or auxiliary losses on weight accumulators</li>\n</ul>\n\n          </div>"}, "last_serial": 7010383, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "88d784a8cd75391cd17efb5d5f68d41d", "sha256": "9d7588aaa3901883f8c6d9332cb93c6b8dc10cce53a1946d433e258d10004844"}, "downloads": -1, "filename": "libspn_keras-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "88d784a8cd75391cd17efb5d5f68d41d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, <4", "size": 37063, "upload_time": "2020-02-23T21:30:41", "upload_time_iso_8601": "2020-02-23T21:30:41.705058Z", "url": "https://files.pythonhosted.org/packages/8e/7f/c221f289ebed8a04f4a9bbfda6ab90f8972c380c2d6a138ad9eab8da2611/libspn_keras-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0aa423f3665c4080b83bb4142ea50aa9", "sha256": "762246771c995bdac5cb862528009fbd602fef0259b161211ceacbbc0b34b004"}, "downloads": -1, "filename": "libspn-keras-0.0.1.tar.gz", "has_sig": false, "md5_digest": "0aa423f3665c4080b83bb4142ea50aa9", "packagetype": "sdist", "python_version": "source", "requires_python": ">2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, <4", "size": 27798, "upload_time": "2020-02-23T21:30:44", "upload_time_iso_8601": "2020-02-23T21:30:44.471862Z", "url": "https://files.pythonhosted.org/packages/cf/de/49d82f2d9dd6513d30623bc6930e7a98a297bea5070c857c417b74ac1bed/libspn-keras-0.0.1.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "2d270bc6bfc196f874d400c198b9b52d", "sha256": "c2f903171e270b5abf2d4fd8e7b243c66ada76bae55df21add141594f94c8997"}, "downloads": -1, "filename": "libspn_keras-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "2d270bc6bfc196f874d400c198b9b52d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, <4", "size": 46361, "upload_time": "2020-03-29T11:45:15", "upload_time_iso_8601": "2020-03-29T11:45:15.981438Z", "url": "https://files.pythonhosted.org/packages/e0/58/7764956dc2f6fed245ae9234360e4880ae60ab5a4976ae63a93aa3a0bd34/libspn_keras-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9a91d0cd2dec254fc15853857ce32c15", "sha256": "b903f6cbfb5ce331412fcc8c7716c34ac5529c00d4ed69dd03e207b813732a92"}, "downloads": -1, "filename": "libspn-keras-0.1.0.tar.gz", "has_sig": false, "md5_digest": "9a91d0cd2dec254fc15853857ce32c15", "packagetype": "sdist", "python_version": "source", "requires_python": ">2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, <4", "size": 34096, "upload_time": "2020-03-29T11:45:17", "upload_time_iso_8601": "2020-03-29T11:45:17.663245Z", "url": "https://files.pythonhosted.org/packages/45/f5/9d7e1586e49cbddb20afcad204bd9e07c04afe0bdbd8546ba23188b66751/libspn-keras-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "6d3cbe26e899215b809c5e9e9f80b7e8", "sha256": "9738effdf2833c84c08083af48f8fb6f7b0a4f008a989ceb1316537a1a0efc28"}, "downloads": -1, "filename": "libspn_keras-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6d3cbe26e899215b809c5e9e9f80b7e8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, <4", "size": 53802, "upload_time": "2020-04-13T14:50:26", "upload_time_iso_8601": "2020-04-13T14:50:26.579374Z", "url": "https://files.pythonhosted.org/packages/fb/b0/cac21eee91e2c6cc08ad992b1d2408c216ab3083687e078a43b754983a62/libspn_keras-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b67a0248e894245d65259d1ffe1c6234", "sha256": "04fbd5877750405845f9262d4e5c195cdf7ebe6ca252544701e509c5021aabc7"}, "downloads": -1, "filename": "libspn-keras-0.2.0.tar.gz", "has_sig": false, "md5_digest": "b67a0248e894245d65259d1ffe1c6234", "packagetype": "sdist", "python_version": "source", "requires_python": ">2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, <4", "size": 38056, "upload_time": "2020-04-13T14:50:29", "upload_time_iso_8601": "2020-04-13T14:50:29.094572Z", "url": "https://files.pythonhosted.org/packages/11/71/bc9a7b442bafeb6a1bd261b7bac8d0f9fab67482686ddd2e513070974729/libspn-keras-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6d3cbe26e899215b809c5e9e9f80b7e8", "sha256": "9738effdf2833c84c08083af48f8fb6f7b0a4f008a989ceb1316537a1a0efc28"}, "downloads": -1, "filename": "libspn_keras-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6d3cbe26e899215b809c5e9e9f80b7e8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, <4", "size": 53802, "upload_time": "2020-04-13T14:50:26", "upload_time_iso_8601": "2020-04-13T14:50:26.579374Z", "url": "https://files.pythonhosted.org/packages/fb/b0/cac21eee91e2c6cc08ad992b1d2408c216ab3083687e078a43b754983a62/libspn_keras-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b67a0248e894245d65259d1ffe1c6234", "sha256": "04fbd5877750405845f9262d4e5c195cdf7ebe6ca252544701e509c5021aabc7"}, "downloads": -1, "filename": "libspn-keras-0.2.0.tar.gz", "has_sig": false, "md5_digest": "b67a0248e894245d65259d1ffe1c6234", "packagetype": "sdist", "python_version": "source", "requires_python": ">2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, <4", "size": 38056, "upload_time": "2020-04-13T14:50:29", "upload_time_iso_8601": "2020-04-13T14:50:29.094572Z", "url": "https://files.pythonhosted.org/packages/11/71/bc9a7b442bafeb6a1bd261b7bac8d0f9fab67482686ddd2e513070974729/libspn-keras-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:46:17 2020"}