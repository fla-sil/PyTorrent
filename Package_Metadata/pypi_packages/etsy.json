{"info": {"author": "Dan McKinley", "author_email": "dan@etsy.com", "bugtrack_url": null, "classifiers": [], "description": "# etsy-python\nPython access to the Etsy API\n\nBy Dan McKinley - dan@etsy.com - [http://mcfunley.com](http://mcfunley.com)\n\n## Installation\n\nThe simplest way to install the module is using \n[setuptools](http://pypi.python.org/pypi/setuptools).\n\n<pre>\n$ easy_install etsy\n</pre>\n\nTo install from source, extract the tarball and use the following commands.\n\n<pre>\n$ python setup.py build\n$ sudo python setup.py install\n</pre>\n\n## Simple Example\n\nTo use, first [register for an Etsy developer key](http://developer.etsy.com/).\nBelow is an example session. \n\n<pre>\n$ python\npython\nPython 2.5.1 (r251:54863, Feb  6 2009, 19:02:12) \n[GCC 4.0.1 (Apple Inc. build 5465)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> from etsy import Etsy\n>>> api = Etsy('YOUR-API-KEY-HERE')\n>>> api.getFrontFeaturedListings(offset=10, limit=1)[0]['title']\n'Artists Eco Journal -  Landscape Watercolor - Rustic Vegan Hemp and Recycled Rubber'\n</pre>\n\n\nSee also [this blog post](http://codeascraft.etsy.com/2010/04/22/announcing-etsys-new-api/)\non Code as Craft.\n\n\n## Configuration\n\nFor convenience (and to avoid storing API keys in revision control\nsystems), the package supports local configuration. You can manage\nyour API keys in a file called $HOME/etsy/keys (or the equivalent on\nWindows) with the following format:\n\n<pre>\nv2 = 'Etsy API version 2 key goes here'\n</pre>\n\nAlternatively, you can specify a different key file when creating an API object.\n\n<pre>\nfrom etsy import Etsy\n\napi = Etsy(key_file='/usr/share/etsy/keys')\n</pre>\n\n(Implementation note: the keys file can be any valid python script that defines\na module-level variable for the API version you are trying to use.)\n\n## Tests\n\nThis package comes with a reasonably complete unit test suite. In order to run\nthe tests, use:\n\n<pre>\n$ python setup.py test\n</pre>\n\nSome of the tests (those that actually call the Etsy API) require your API key\nto be locally configured. See the Configuration section, above.\n\n\n## Method Table Caching\n\nThis module is implemented by metaprogramming against the method table published\nby the Etsy API. In other words, API methods are not explicitly declared by the\ncode in this module. Instead, the list of allowable methods is downloaded and \nthe patched into the API objects at runtime.\n\nThis has advantages and disadvantages. It allows the module to automatically \nreceive new features, but on the other hand, this process is not as fast as \nexplicitly declared methods. \n\nIn order to speed things up, the method table json is cached locally by default.\nIf a $HOME/etsy directory exists, the cache file is created there. Otherwise, it \nis placed in the machine's temp directory. By default, this cache lasts 24 hours.\n\nThe cache file can be specified when creating an API object:\n\n<pre>\nfrom etsy import Etsy\n\napi = Etsy(method_cache='myfile.json')\n</pre>\n\nMethod table caching can also be disabled by passing None as the cache parameter:\n\n<pre>\nfrom etsy import Etsy\n\n# do not cache methods\napi = Etsy(method_cache=None)\n</pre>\n\n\n## Version History\n\n\n### Version 0.3.1\n* Allowing Python Longs to be passed for parameters declared as \"integers\" by the API. \n\n\n### Version 0.3 \n* Support for Etsy API v2 thanks to [Marc Abramowitz](http://marc-abramowitz.com). \n* Removed support for now-dead Etsy API v1. \n\n\n### Version 0.2.1 \n* Added a cache for the method table json.\n* Added a logging facility.\n\n\n### Version 0.2 - 05-31-2010\n* Added local configuration (~/.etsy) to eliminate cutting & pasting of api keys.\n* Added client-side type checking for parameters.\n* Added support for positional arguments.\n* Added a test suite.\n* Began differentiation between API versions.\n* Added module to PyPI. \n\n### Version 0.1 - 05-24-2010 \nInitial release", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "UNKNOWN", "keywords": "etsy api handmade", "license": "GPL v3", "maintainer": null, "maintainer_email": null, "name": "etsy", "package_url": "https://pypi.org/project/etsy/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/etsy/", "project_urls": {"Download": "UNKNOWN", "Homepage": "UNKNOWN"}, "release_url": "https://pypi.org/project/etsy/0.3.1/", "requires_dist": null, "requires_python": null, "summary": "Python access to the Etsy API", "version": "0.3.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p># etsy-python\nPython access to the Etsy API</p>\n<p>By Dan McKinley - <a href=\"mailto:dan%40etsy.com\">dan<span>@</span>etsy<span>.</span>com</a> - [<a>http://mcfunley.com](http://mcfunley.com</a>)</p>\n<p>## Installation</p>\n<p>The simplest way to install the module is using\n[setuptools](<a href=\"http://pypi.python.org/pypi/setuptools\" rel=\"nofollow\">http://pypi.python.org/pypi/setuptools</a>).</p>\n<p>&lt;pre&gt;\n$ easy_install etsy\n&lt;/pre&gt;</p>\n<p>To install from source, extract the tarball and use the following commands.</p>\n<p>&lt;pre&gt;\n$ python setup.py build\n$ sudo python setup.py install\n&lt;/pre&gt;</p>\n<p>## Simple Example</p>\n<p>To use, first [register for an Etsy developer key](<a href=\"http://developer.etsy.com/\" rel=\"nofollow\">http://developer.etsy.com/</a>).\nBelow is an example session.</p>\n<p>&lt;pre&gt;\n$ python\npython\nPython 2.5.1 (r251:54863, Feb  6 2009, 19:02:12)\n[GCC 4.0.1 (Apple Inc. build 5465)] on darwin\nType \u201chelp\u201d, \u201ccopyright\u201d, \u201ccredits\u201d or \u201clicense\u201d for more information.\n&gt;&gt;&gt; from etsy import Etsy\n&gt;&gt;&gt; api = Etsy(\u2018YOUR-API-KEY-HERE\u2019)\n&gt;&gt;&gt; api.getFrontFeaturedListings(offset=10, limit=1)[0][\u2018title\u2019]\n\u2018Artists Eco Journal -  Landscape Watercolor - Rustic Vegan Hemp and Recycled Rubber\u2019\n&lt;/pre&gt;</p>\n<p>See also [this blog post](<a href=\"http://codeascraft.etsy.com/2010/04/22/announcing-etsys-new-api/\" rel=\"nofollow\">http://codeascraft.etsy.com/2010/04/22/announcing-etsys-new-api/</a>)\non Code as Craft.</p>\n<p>## Configuration</p>\n<p>For convenience (and to avoid storing API keys in revision control\nsystems), the package supports local configuration. You can manage\nyour API keys in a file called $HOME/etsy/keys (or the equivalent on\nWindows) with the following format:</p>\n<p>&lt;pre&gt;\nv2 = \u2018Etsy API version 2 key goes here\u2019\n&lt;/pre&gt;</p>\n<p>Alternatively, you can specify a different key file when creating an API object.</p>\n<p>&lt;pre&gt;\nfrom etsy import Etsy</p>\n<p>api = Etsy(key_file=\u2019/usr/share/etsy/keys\u2019)\n&lt;/pre&gt;</p>\n<p>(Implementation note: the keys file can be any valid python script that defines\na module-level variable for the API version you are trying to use.)</p>\n<p>## Tests</p>\n<p>This package comes with a reasonably complete unit test suite. In order to run\nthe tests, use:</p>\n<p>&lt;pre&gt;\n$ python setup.py test\n&lt;/pre&gt;</p>\n<p>Some of the tests (those that actually call the Etsy API) require your API key\nto be locally configured. See the Configuration section, above.</p>\n<p>## Method Table Caching</p>\n<p>This module is implemented by metaprogramming against the method table published\nby the Etsy API. In other words, API methods are not explicitly declared by the\ncode in this module. Instead, the list of allowable methods is downloaded and\nthe patched into the API objects at runtime.</p>\n<p>This has advantages and disadvantages. It allows the module to automatically\nreceive new features, but on the other hand, this process is not as fast as\nexplicitly declared methods.</p>\n<p>In order to speed things up, the method table json is cached locally by default.\nIf a $HOME/etsy directory exists, the cache file is created there. Otherwise, it\nis placed in the machine\u2019s temp directory. By default, this cache lasts 24 hours.</p>\n<p>The cache file can be specified when creating an API object:</p>\n<p>&lt;pre&gt;\nfrom etsy import Etsy</p>\n<p>api = Etsy(method_cache=\u2019myfile.json\u2019)\n&lt;/pre&gt;</p>\n<p>Method table caching can also be disabled by passing None as the cache parameter:</p>\n<p>&lt;pre&gt;\nfrom etsy import Etsy</p>\n<p># do not cache methods\napi = Etsy(method_cache=None)\n&lt;/pre&gt;</p>\n<p>## Version History</p>\n<p>### Version 0.3.1\n* Allowing Python Longs to be passed for parameters declared as \u201cintegers\u201d by the API.</p>\n<p>### Version 0.3\n* Support for Etsy API v2 thanks to [Marc Abramowitz](<a href=\"http://marc-abramowitz.com\" rel=\"nofollow\">http://marc-abramowitz.com</a>).\n* Removed support for now-dead Etsy API v1.</p>\n<p>### Version 0.2.1\n* Added a cache for the method table json.\n* Added a logging facility.</p>\n<p>### Version 0.2 - 05-31-2010\n* Added local configuration (~/.etsy) to eliminate cutting &amp; pasting of api keys.\n* Added client-side type checking for parameters.\n* Added support for positional arguments.\n* Added a test suite.\n* Began differentiation between API versions.\n* Added module to PyPI.</p>\n<p>### Version 0.1 - 05-24-2010\nInitial release</p>\n\n          </div>"}, "last_serial": 791729, "releases": {"0.2": [{"comment_text": "", "digests": {"md5": "23fe3223d47f22c2f7c4bb0c5ab27649", "sha256": "ceb57229cdcb989039569e1f552da2efc07266b69256f9918c7da924d85c05df"}, "downloads": -1, "filename": "etsy-0.2-py2.5.egg", "has_sig": false, "md5_digest": "23fe3223d47f22c2f7c4bb0c5ab27649", "packagetype": "bdist_egg", "python_version": "2.5", "requires_python": null, "size": 9140, "upload_time": "2010-06-01T00:15:11", "upload_time_iso_8601": "2010-06-01T00:15:11.373646Z", "url": "https://files.pythonhosted.org/packages/97/9e/6ce3da2a36d9a99eb2e568942c9278470b53008dcd58121c60c3ea1e3229/etsy-0.2-py2.5.egg", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "4cd8624079ecfb9b418bbf801dd9e86d", "sha256": "c09243aa7d797b4729eb0abbeff4c8ec1722991ee87900cda871c5282a5da7b7"}, "downloads": -1, "filename": "etsy-0.3-py2.5.egg", "has_sig": false, "md5_digest": "4cd8624079ecfb9b418bbf801dd9e86d", "packagetype": "bdist_egg", "python_version": "2.5", "requires_python": null, "size": 21267, "upload_time": "2011-01-28T00:52:50", "upload_time_iso_8601": "2011-01-28T00:52:50.726721Z", "url": "https://files.pythonhosted.org/packages/c2/ee/1d40c8933edf76cc852e4935a0c639e6c894de947e6a98136cc6656d557a/etsy-0.3-py2.5.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "73497ef86954105206b71ee26c51162d", "sha256": "e75e61244c5fe17750ae66bdce985ae43f9f25609dfe2cad9f06f5ebdb9c1c1b"}, "downloads": -1, "filename": "etsy-0.3-py2.6.egg", "has_sig": false, "md5_digest": "73497ef86954105206b71ee26c51162d", "packagetype": "bdist_egg", "python_version": "2.6", "requires_python": null, "size": 21226, "upload_time": "2011-01-28T00:51:51", "upload_time_iso_8601": "2011-01-28T00:51:51.459631Z", "url": "https://files.pythonhosted.org/packages/d2/17/338c56ede4c7ac3597dc47284dcb92f4d72ff577b020930549b7ad48bcfc/etsy-0.3-py2.6.egg", "yanked": false}], "0.3.1": []}, "urls": [], "timestamp": "Fri May  8 00:45:21 2020"}