{"info": {"author": "abhinav", "author_email": "abhinav@comp.nus.edu.sg", "bugtrack_url": null, "classifiers": [], "description": "# ![sciwing logo]( https://sciwing.s3.amazonaws.com/sciwing.png)\nA Modern Toolkit for Scientific Document Processing from [WING-NUS](https://wing.comp.nus.edu.sg/)\n\n[![Build Status](https://travis-ci.com/abhinavkashyap/sciwing.svg?token=AShdNBksk5K9Pxg45w3H&branch=master)](https://travis-ci.com/abhinavkashyap/sciwing) ![Open Issues](https://img.shields.io/github/issues/abhinavkashyap/sciwing) ![Last Commit](https://img.shields.io/github/last-commit/abhinavkashyap/sciwing) [![Updates](https://pyup.io/repos/github/abhinavkashyap/sciwing/shield.svg)](https://pyup.io/repos/github/abhinavkashyap/sciwing/) ![](https://img.shields.io/badge/contributions-welcome-success)\n\n\n\nSciWING is a modern framework from WING-NUS to facilitate Scientific Document Processing.  It is built on PyTorch and believes in modularity from ground up and easy to use interface. SciWING includes many pre-trained models for fundamental tasks in Scientific Document Processing for practitioners. It has the following advantages\n\n- **Modularity**  - The framework embraces modularity from ground-up. **SciWING** helps in creating new models by combining multiple re-usable modules. You can combine different modules and experiment with new approaches in an easy manner \n\n- ***Pre-trained Models*** - SciWING has many pre-trained models for fundamental tasks like Logical Section Classifier for scientific documents, Citation string Parsing (Take a look at some of the other project related to station parsing [Parscit](https://github.com/WING-NUS/ParsCit), [Neural Parscit](https://github.com/WING-NUS/Neural-ParsCit). Easy access to pre-trained models are made available through web APIs.\n\n- ***Run from Config File***- SciWING enables you to declare datasets, models and experiment hyper-params in a [TOML](https://github.com/toml-lang/toml) file. The models declared in a TOML file have a one-one correspondence with their respective class declaration in a python file. SciWING parses the model to a Directed Acyclic Graph and instantiates the model using the DAG's topological ordering.\n\n- **Extensible** - SciWING enables easy addition of new datasets and provides command line tools for it. It enables addition of custom modules which are PyTorch modules.\n\n  \n\n\n\n## Installation \n\nYou can install SciWING from pip. We recommend using a virtual environment to install the package. \n\n```zsh\npip install sciwing\n```\n\n\n\n## Tasks \n\nThese are some of the tasks included in SciWING and their performance metrics \n\n| Task                               | Dataset        | SciWING model                          | SciWING               | Previous Best                                                |\n| ---------------------------------- | -------------- | -------------------------------------- | --------------------- | ------------------------------------------------------------ |\n| Logical Structure Recovery         | SectLabel      | BiLSTM + Elmo Embeddings               | 73.2 (Macro F-score)  | -                                                            |\n| Header Normalisation               | SectLabel      | Bag of Words Elmo                      | 93.52 (Macro F-Score) | -                                                            |\n| Citation String Parsing            | Neural Parscit | Bi-LSTM-CRF + GloVe + Elmo + Char-LSTM | 88.44 (Macro F-Score) | 90.45 [Prasad et al](https://dl.acm.org/doi/10.5555/3288541.3288551)(not comparable) |\n| Citation Intent Classification     | SciCite        | Bi-LSTM + Elmo                         | 82.16 (Fscore)        | 82.6 [Cohan et al](https://arxiv.org/pdf/1904.01608.pdf) (without multi-task learning) |\n| Biomedical NER - BC5CDR (Upcoming) | -              | -                                      | -                     | -                                                            |\n| I2b2 NER (Upcoming)                | -              | -                                      | -                     | -                                                            |\n\n   \n\n## Simple Example \n\n### Using Citation String Parsing \n\n```python\nfrom sciwing.models.neural_parscit import NeuralParscit \n\n# instantiate an object \nneural_parscit = NeuralParscit()\n\n# predict on a citation \nneural_parscit.predict_for_text(\"Calzolari, N. (1982) Towards the organization of lexical definitions on a database structure. In E. Hajicova (Ed.), COLING '82 Abstracts, Charles University, Prague, pp.61-64.\")\n\n# if you have a file of citations with one citation per line \nneural_parscit.predict_for_file(\"/path/to/filename\")\n```\n\n\n\n### Using Citation Intent Classification \n\n````python\nfrom sciwing.models.citation_intent_clf import CitationIntentClassification \n\n# instantiate an object \ncitation_intent_clf = CitationIntentClassification()\n\n# predict the intention of the citation \ncitation_intent_clf.predict_for_text(\"\")\n````\n\n\n\n## Running API services \n\nThe APIs are built using [Fast API](https://github.com/tiangolo/fastapi). We have APIs for citation string parsing and citation intent classification. There are more APIs on the way. To run the APIs navigate into the `api` folder of this repository and run \n\n```bash\nuvicorn api:app --reload\n```\n\n\n\n## Running the Demos \n\nThe demos are built using [Streamlit](www.streamlit.io). The Demos make use of the APIs. Please make sure that the APIs are running before the demos can be started. Navigate to the app folder and run the demo using streamlit (Installed along with the package). For example \n\n````bash\nstreamlit run ner_demo.py\n````\n\n\n\n## Contributing ![](http://img.shields.io/badge/contributions-welcome-success)\n\nThank you for your interest in contributing. You can directly email the author at (email omitted for submission purposes). We will be happy to help.\n\n\n\nIf you want to get involved in the development we recommend that you install SciWING on a local machine using the instructions below. All our classes and methods are documented and hope you can find your way around it.\n\n\n\n## Instructions to install SciWING locally\n\nSciWING requires Python 3.7, We recommend that you install `pyenv`. \n\nInstructions to install pyenv are available  [here](https://github.com/pyenv/pyenv). If you have problems installing python 3.7 on your machine, make sure to check out their common build problems site  [here](https://github.com/pyenv/pyenv/wiki/common-build-problems) and install all dependencies.\n\n1. **Clone from git** \n\n   https://github.com/abhinavkashyap/sciwing.git\n\n2. `cd sciwing`\n\n3. **Install all the requirements** \n\n   `pip install -r requirements.txt`\n\n4. **Download spacy models** \n\n   `python -m spacy download en`\n\n5. **Install the package locally**\n\n   `pip install -e .`\n\n6. **Create directories where sciwing stores embeddings and experiment results**\n\n   `sciwing develop makedirs`\n\n   `sciwing develop download`\n\n   This will take some time to download all the data and embeddings required for development  \n\n   Sip some :coffee:. Come back later \n\n7. **Run Tests**\n\n   SciWING uses `pytest` for testing. You can use the following command to run tests \n\n   `pytest tests -n auto --dist=loadfile`\n\n   The test suite is huge and again, it will take some time to run. We will put efforts to reduce the test time in the next iterations.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/abhinavkashyap/sciwing", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "sciwing", "package_url": "https://pypi.org/project/sciwing/", "platform": "", "project_url": "https://pypi.org/project/sciwing/", "project_urls": {"Homepage": "https://github.com/abhinavkashyap/sciwing"}, "release_url": "https://pypi.org/project/sciwing/0.1.post1/", "requires_dist": null, "requires_python": "", "summary": "Modern Scientific Document Processing Framework", "version": "0.1.post1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1><img alt=\"sciwing logo\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/18c933b21a7f6a19b90f030fb61afc96404cef8d/68747470733a2f2f73636977696e672e73332e616d617a6f6e6177732e636f6d2f73636977696e672e706e67\"></h1>\n<p>A Modern Toolkit for Scientific Document Processing from <a href=\"https://wing.comp.nus.edu.sg/\" rel=\"nofollow\">WING-NUS</a></p>\n<p><a href=\"https://travis-ci.com/abhinavkashyap/sciwing\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7330e09b1db0c952b81edb4929c4b5fcecc33a77/68747470733a2f2f7472617669732d63692e636f6d2f616268696e61766b6173687961702f73636977696e672e7376673f746f6b656e3d415368644e426b736b354b395078673435773348266272616e63683d6d6173746572\"></a> <img alt=\"Open Issues\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b9b9cc4f62b3883da53a1f28251736848b71caba/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f616268696e61766b6173687961702f73636977696e67\"> <img alt=\"Last Commit\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6addeb83fcee8921c96861a8d8ed9308cd55eded/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6173742d636f6d6d69742f616268696e61766b6173687961702f73636977696e67\"> <a href=\"https://pyup.io/repos/github/abhinavkashyap/sciwing/\" rel=\"nofollow\"><img alt=\"Updates\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/69ca222c254cb7a765e53079863d62a71d7ec1e9/68747470733a2f2f707975702e696f2f7265706f732f6769746875622f616268696e61766b6173687961702f73636977696e672f736869656c642e737667\"></a> <img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8db9bad9f93c8dce7a88acdded73a172fdce3e64/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f6e747269627574696f6e732d77656c636f6d652d73756363657373\"></p>\n<p>SciWING is a modern framework from WING-NUS to facilitate Scientific Document Processing.  It is built on PyTorch and believes in modularity from ground up and easy to use interface. SciWING includes many pre-trained models for fundamental tasks in Scientific Document Processing for practitioners. It has the following advantages</p>\n<ul>\n<li>\n<p><strong>Modularity</strong>  - The framework embraces modularity from ground-up. <strong>SciWING</strong> helps in creating new models by combining multiple re-usable modules. You can combine different modules and experiment with new approaches in an easy manner</p>\n</li>\n<li>\n<p><em><strong>Pre-trained Models</strong></em> - SciWING has many pre-trained models for fundamental tasks like Logical Section Classifier for scientific documents, Citation string Parsing (Take a look at some of the other project related to station parsing <a href=\"https://github.com/WING-NUS/ParsCit\" rel=\"nofollow\">Parscit</a>, <a href=\"https://github.com/WING-NUS/Neural-ParsCit\" rel=\"nofollow\">Neural Parscit</a>. Easy access to pre-trained models are made available through web APIs.</p>\n</li>\n<li>\n<p><em><strong>Run from Config File</strong></em>- SciWING enables you to declare datasets, models and experiment hyper-params in a <a href=\"https://github.com/toml-lang/toml\" rel=\"nofollow\">TOML</a> file. The models declared in a TOML file have a one-one correspondence with their respective class declaration in a python file. SciWING parses the model to a Directed Acyclic Graph and instantiates the model using the DAG's topological ordering.</p>\n</li>\n<li>\n<p><strong>Extensible</strong> - SciWING enables easy addition of new datasets and provides command line tools for it. It enables addition of custom modules which are PyTorch modules.</p>\n</li>\n</ul>\n<h2>Installation</h2>\n<p>You can install SciWING from pip. We recommend using a virtual environment to install the package.</p>\n<pre>pip install sciwing\n</pre>\n<h2>Tasks</h2>\n<p>These are some of the tasks included in SciWING and their performance metrics</p>\n<table>\n<thead>\n<tr>\n<th>Task</th>\n<th>Dataset</th>\n<th>SciWING model</th>\n<th>SciWING</th>\n<th>Previous Best</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Logical Structure Recovery</td>\n<td>SectLabel</td>\n<td>BiLSTM + Elmo Embeddings</td>\n<td>73.2 (Macro F-score)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Header Normalisation</td>\n<td>SectLabel</td>\n<td>Bag of Words Elmo</td>\n<td>93.52 (Macro F-Score)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Citation String Parsing</td>\n<td>Neural Parscit</td>\n<td>Bi-LSTM-CRF + GloVe + Elmo + Char-LSTM</td>\n<td>88.44 (Macro F-Score)</td>\n<td>90.45 <a href=\"https://dl.acm.org/doi/10.5555/3288541.3288551\" rel=\"nofollow\">Prasad et al</a>(not comparable)</td>\n</tr>\n<tr>\n<td>Citation Intent Classification</td>\n<td>SciCite</td>\n<td>Bi-LSTM + Elmo</td>\n<td>82.16 (Fscore)</td>\n<td>82.6 <a href=\"https://arxiv.org/pdf/1904.01608.pdf\" rel=\"nofollow\">Cohan et al</a> (without multi-task learning)</td>\n</tr>\n<tr>\n<td>Biomedical NER - BC5CDR (Upcoming)</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>I2b2 NER (Upcoming)</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n</tr></tbody></table>\n<h2>Simple Example</h2>\n<h3>Using Citation String Parsing</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sciwing.models.neural_parscit</span> <span class=\"kn\">import</span> <span class=\"n\">NeuralParscit</span> \n\n<span class=\"c1\"># instantiate an object </span>\n<span class=\"n\">neural_parscit</span> <span class=\"o\">=</span> <span class=\"n\">NeuralParscit</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># predict on a citation </span>\n<span class=\"n\">neural_parscit</span><span class=\"o\">.</span><span class=\"n\">predict_for_text</span><span class=\"p\">(</span><span class=\"s2\">\"Calzolari, N. (1982) Towards the organization of lexical definitions on a database structure. In E. Hajicova (Ed.), COLING '82 Abstracts, Charles University, Prague, pp.61-64.\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># if you have a file of citations with one citation per line </span>\n<span class=\"n\">neural_parscit</span><span class=\"o\">.</span><span class=\"n\">predict_for_file</span><span class=\"p\">(</span><span class=\"s2\">\"/path/to/filename\"</span><span class=\"p\">)</span>\n</pre>\n<h3>Using Citation Intent Classification</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sciwing.models.citation_intent_clf</span> <span class=\"kn\">import</span> <span class=\"n\">CitationIntentClassification</span> \n\n<span class=\"c1\"># instantiate an object </span>\n<span class=\"n\">citation_intent_clf</span> <span class=\"o\">=</span> <span class=\"n\">CitationIntentClassification</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># predict the intention of the citation </span>\n<span class=\"n\">citation_intent_clf</span><span class=\"o\">.</span><span class=\"n\">predict_for_text</span><span class=\"p\">(</span><span class=\"s2\">\"\"</span><span class=\"p\">)</span>\n</pre>\n<h2>Running API services</h2>\n<p>The APIs are built using <a href=\"https://github.com/tiangolo/fastapi\" rel=\"nofollow\">Fast API</a>. We have APIs for citation string parsing and citation intent classification. There are more APIs on the way. To run the APIs navigate into the <code>api</code> folder of this repository and run</p>\n<pre>uvicorn api:app --reload\n</pre>\n<h2>Running the Demos</h2>\n<p>The demos are built using <a href=\"www.streamlit.io\" rel=\"nofollow\">Streamlit</a>. The Demos make use of the APIs. Please make sure that the APIs are running before the demos can be started. Navigate to the app folder and run the demo using streamlit (Installed along with the package). For example</p>\n<pre>streamlit run ner_demo.py\n</pre>\n<h2>Contributing <img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/31525cff69d29cac618280c516eeaeaede912452/687474703a2f2f696d672e736869656c64732e696f2f62616467652f636f6e747269627574696f6e732d77656c636f6d652d73756363657373\"></h2>\n<p>Thank you for your interest in contributing. You can directly email the author at (email omitted for submission purposes). We will be happy to help.</p>\n<p>If you want to get involved in the development we recommend that you install SciWING on a local machine using the instructions below. All our classes and methods are documented and hope you can find your way around it.</p>\n<h2>Instructions to install SciWING locally</h2>\n<p>SciWING requires Python 3.7, We recommend that you install <code>pyenv</code>.</p>\n<p>Instructions to install pyenv are available  <a href=\"https://github.com/pyenv/pyenv\" rel=\"nofollow\">here</a>. If you have problems installing python 3.7 on your machine, make sure to check out their common build problems site  <a href=\"https://github.com/pyenv/pyenv/wiki/common-build-problems\" rel=\"nofollow\">here</a> and install all dependencies.</p>\n<ol>\n<li>\n<p><strong>Clone from git</strong></p>\n<p><a href=\"https://github.com/abhinavkashyap/sciwing.git\" rel=\"nofollow\">https://github.com/abhinavkashyap/sciwing.git</a></p>\n</li>\n<li>\n<p><code>cd sciwing</code></p>\n</li>\n<li>\n<p><strong>Install all the requirements</strong></p>\n<p><code>pip install -r requirements.txt</code></p>\n</li>\n<li>\n<p><strong>Download spacy models</strong></p>\n<p><code>python -m spacy download en</code></p>\n</li>\n<li>\n<p><strong>Install the package locally</strong></p>\n<p><code>pip install -e .</code></p>\n</li>\n<li>\n<p><strong>Create directories where sciwing stores embeddings and experiment results</strong></p>\n<p><code>sciwing develop makedirs</code></p>\n<p><code>sciwing develop download</code></p>\n<p>This will take some time to download all the data and embeddings required for development</p>\n<p>Sip some :coffee:. Come back later</p>\n</li>\n<li>\n<p><strong>Run Tests</strong></p>\n<p>SciWING uses <code>pytest</code> for testing. You can use the following command to run tests</p>\n<p><code>pytest tests -n auto --dist=loadfile</code></p>\n<p>The test suite is huge and again, it will take some time to run. We will put efforts to reduce the test time in the next iterations.</p>\n</li>\n</ol>\n\n          </div>"}, "last_serial": 7007329, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "634334cd65577f18a895a49a0a489cf4", "sha256": "da9ed29ee3764a89bb3ff0a78f5c66db145ec32bfbfd9332189d81d7628b4e18"}, "downloads": -1, "filename": "sciwing-0.1.0.tar.gz", "has_sig": false, "md5_digest": "634334cd65577f18a895a49a0a489cf4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 84524, "upload_time": "2020-04-13T01:16:49", "upload_time_iso_8601": "2020-04-13T01:16:49.328805Z", "url": "https://files.pythonhosted.org/packages/39/11/57ee92ad316022e954f5b2a3da29293d1ad8b0ea0ed044fc60a99866adc5/sciwing-0.1.0.tar.gz", "yanked": false}], "0.1.0.dev0": [{"comment_text": "", "digests": {"md5": "b402ebe50ddd377483a18648fd4837c7", "sha256": "2e71d25f6ab9c709a699cca63c6badc9ef65d6193d405072d9f687629e547a66"}, "downloads": -1, "filename": "sciwing-0.1.0.dev0-py3-none-any.whl", "has_sig": false, "md5_digest": "b402ebe50ddd377483a18648fd4837c7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 135120, "upload_time": "2019-09-12T17:08:25", "upload_time_iso_8601": "2019-09-12T17:08:25.961858Z", "url": "https://files.pythonhosted.org/packages/4e/29/9e2b859d88a4d0dac9fa8b68939181502269a15c88a7e745e5ca108826ae/sciwing-0.1.0.dev0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "443eabc449198e944ac0cc05fdbad33a", "sha256": "6c864dc19747705b8d8767479f15d1c8d65163cacbb4556ac1e1c5e1a85613e0"}, "downloads": -1, "filename": "sciwing-0.1.0.dev0.tar.gz", "has_sig": false, "md5_digest": "443eabc449198e944ac0cc05fdbad33a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 82941, "upload_time": "2019-09-12T17:08:28", "upload_time_iso_8601": "2019-09-12T17:08:28.903914Z", "url": "https://files.pythonhosted.org/packages/67/f3/5dcab83fea1a67f89f9312c5a4b55233b17ea0b6601874a795a67ad61758/sciwing-0.1.0.dev0.tar.gz", "yanked": false}], "0.1.0b0": [{"comment_text": "", "digests": {"md5": "07a24bbde582eec1f3ec4026a7503088", "sha256": "acc547da0c006e71562e5aa6bb7128b7185b2a9956bef754908c832f28c018d9"}, "downloads": -1, "filename": "sciwing-0.1.0b0.tar.gz", "has_sig": false, "md5_digest": "07a24bbde582eec1f3ec4026a7503088", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 89886, "upload_time": "2020-04-13T01:32:01", "upload_time_iso_8601": "2020-04-13T01:32:01.543933Z", "url": "https://files.pythonhosted.org/packages/0d/a8/04f64ca62ae657555924eba57bdb7868944712ea8f42d7deacd5468b1f61/sciwing-0.1.0b0.tar.gz", "yanked": false}], "0.1.post1": [{"comment_text": "", "digests": {"md5": "ef5cb047765dc3e659615b63b4d45a82", "sha256": "7b979619d7b27f5fd95c1b95456c2efa5f8de9613b2f1d6d2f82bf62a28a2415"}, "downloads": -1, "filename": "sciwing-0.1.post1.tar.gz", "has_sig": false, "md5_digest": "ef5cb047765dc3e659615b63b4d45a82", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 89896, "upload_time": "2020-04-13T02:30:43", "upload_time_iso_8601": "2020-04-13T02:30:43.735387Z", "url": "https://files.pythonhosted.org/packages/07/dd/e97768d750a8bda83bba8509c658df8b22de7c746b337c94503496911891/sciwing-0.1.post1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ef5cb047765dc3e659615b63b4d45a82", "sha256": "7b979619d7b27f5fd95c1b95456c2efa5f8de9613b2f1d6d2f82bf62a28a2415"}, "downloads": -1, "filename": "sciwing-0.1.post1.tar.gz", "has_sig": false, "md5_digest": "ef5cb047765dc3e659615b63b4d45a82", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 89896, "upload_time": "2020-04-13T02:30:43", "upload_time_iso_8601": "2020-04-13T02:30:43.735387Z", "url": "https://files.pythonhosted.org/packages/07/dd/e97768d750a8bda83bba8509c658df8b22de7c746b337c94503496911891/sciwing-0.1.post1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:12 2020"}