{"info": {"author": "Kyle Lahnakoski", "author_email": "kyle@lahnakoski.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# mo-fabric\n\nA fa\u00e7ade atop [fabric2](http://www.fabfile.org/)\n\n## Overview\n\nI have revisited [Fabric](http://www.fabfile.org/) (September 2018) to find it can handle multiple threads and multiple connections!  This is great news: it makes all my automation faster!\n\nLike with most APIs, I made a fa\u00e7ade because Fabric is not congruent to my own programming conventions. This is not bad, just different: The domain I work in is slightly different than what the Fabric developers expect. \n\nHere are the differences:\n\n* All `stdout` and `strerr` from the remote machine is annotated, and shunted, to the local logging module.\n* A few convenience methods are added:\n  * `conn.exists(path)` - to test if a remote file exists\n  * `with conn.warn_only():` - context manager if you do not care if your commands fail\n  * `get(remote, local, use_sudo=False)` - allows you to use tilde (`~`) on Windows to refer to home directory\n  * `put(local, remote, use_sudo=False)` - similar to `get`, except copies files to remote\n  * `sudo(command)` works with the `cd()` context manager\n  * `Result.__contains__()` so checking for patterns in command output is simpler:\n    ```python\n        result = conn.run(\"ls /data1\", warn=True)\n        not_found = \"No` such file or directory\" in result\n    ```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/klahnakoski/mo-fabric", "keywords": "", "license": "MPL 2.0", "maintainer": "", "maintainer_email": "", "name": "mo-fabric", "package_url": "https://pypi.org/project/mo-fabric/", "platform": "", "project_url": "https://pypi.org/project/mo-fabric/", "project_urls": {"Homepage": "https://github.com/klahnakoski/mo-fabric"}, "release_url": "https://pypi.org/project/mo-fabric/3.30.19346/", "requires_dist": null, "requires_python": "==2.7, >=3.6", "summary": "Thin facade atop fabric", "version": "3.30.19346", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>mo-fabric</h1>\n<p>A fa\u00e7ade atop <a href=\"http://www.fabfile.org/\" rel=\"nofollow\">fabric2</a></p>\n<h2>Overview</h2>\n<p>I have revisited <a href=\"http://www.fabfile.org/\" rel=\"nofollow\">Fabric</a> (September 2018) to find it can handle multiple threads and multiple connections!  This is great news: it makes all my automation faster!</p>\n<p>Like with most APIs, I made a fa\u00e7ade because Fabric is not congruent to my own programming conventions. This is not bad, just different: The domain I work in is slightly different than what the Fabric developers expect.</p>\n<p>Here are the differences:</p>\n<ul>\n<li>All <code>stdout</code> and <code>strerr</code> from the remote machine is annotated, and shunted, to the local logging module.</li>\n<li>A few convenience methods are added:\n<ul>\n<li><code>conn.exists(path)</code> - to test if a remote file exists</li>\n<li><code>with conn.warn_only():</code> - context manager if you do not care if your commands fail</li>\n<li><code>get(remote, local, use_sudo=False)</code> - allows you to use tilde (<code>~</code>) on Windows to refer to home directory</li>\n<li><code>put(local, remote, use_sudo=False)</code> - similar to <code>get</code>, except copies files to remote</li>\n<li><code>sudo(command)</code> works with the <code>cd()</code> context manager</li>\n<li><code>Result.__contains__()</code> so checking for patterns in command output is simpler:\n<pre>    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"s2\">\"ls /data1\"</span><span class=\"p\">,</span> <span class=\"n\">warn</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">not_found</span> <span class=\"o\">=</span> <span class=\"s2\">\"No` such file or directory\"</span> <span class=\"ow\">in</span> <span class=\"n\">result</span>\n</pre>\n</li>\n</ul>\n</li>\n</ul>\n\n          </div>"}, "last_serial": 6287933, "releases": {"2.28.18331": [{"comment_text": "", "digests": {"md5": "85686fc06b55d07468b080f8fa44fb29", "sha256": "f11367a71f82514d555f212ee8c2b2724ca6961c1cf1440032cc101d02696d99"}, "downloads": -1, "filename": "mo-fabric-2.28.18331.tar.gz", "has_sig": false, "md5_digest": "85686fc06b55d07468b080f8fa44fb29", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3767, "upload_time": "2018-11-27T21:29:12", "upload_time_iso_8601": "2018-11-27T21:29:12.586543Z", "url": "https://files.pythonhosted.org/packages/83/21/eaa997a0fdff55039f3a58bcde513c6a55b1d2f5d4d701547d46cb6e019b/mo-fabric-2.28.18331.tar.gz", "yanked": false}], "2.29.19005": [{"comment_text": "", "digests": {"md5": "60e7dafa33fb07b2fd6c3f4ac3a6a2fe", "sha256": "8880d8ab098ab62f3d127e548bf062083bc7383c7a27beaa33e134c786019ef7"}, "downloads": -1, "filename": "mo-fabric-2.29.19005.tar.gz", "has_sig": false, "md5_digest": "60e7dafa33fb07b2fd6c3f4ac3a6a2fe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3850, "upload_time": "2019-01-05T17:05:26", "upload_time_iso_8601": "2019-01-05T17:05:26.606827Z", "url": "https://files.pythonhosted.org/packages/d2/b8/705d73f891d3f044199801cc96b63b6327b520dcb1e2a6b9938b6009c127/mo-fabric-2.29.19005.tar.gz", "yanked": false}], "3.30.19346": [{"comment_text": "", "digests": {"md5": "b15d7ba49860ed70809f87628c494c0c", "sha256": "61f89c2e102e03c07b7e46e50ce8de795c9f16511c04030f477cc4ede6e460d2"}, "downloads": -1, "filename": "mo-fabric-3.30.19346.tar.gz", "has_sig": false, "md5_digest": "b15d7ba49860ed70809f87628c494c0c", "packagetype": "sdist", "python_version": "source", "requires_python": "==2.7, >=3.6", "size": 4181, "upload_time": "2019-12-12T18:29:12", "upload_time_iso_8601": "2019-12-12T18:29:12.432427Z", "url": "https://files.pythonhosted.org/packages/92/ef/f2a6a95b242f3cb1bda69e84b2d9afe49a3b52961af1d37c4705d36db1a7/mo-fabric-3.30.19346.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b15d7ba49860ed70809f87628c494c0c", "sha256": "61f89c2e102e03c07b7e46e50ce8de795c9f16511c04030f477cc4ede6e460d2"}, "downloads": -1, "filename": "mo-fabric-3.30.19346.tar.gz", "has_sig": false, "md5_digest": "b15d7ba49860ed70809f87628c494c0c", "packagetype": "sdist", "python_version": "source", "requires_python": "==2.7, >=3.6", "size": 4181, "upload_time": "2019-12-12T18:29:12", "upload_time_iso_8601": "2019-12-12T18:29:12.432427Z", "url": "https://files.pythonhosted.org/packages/92/ef/f2a6a95b242f3cb1bda69e84b2d9afe49a3b52961af1d37c4705d36db1a7/mo-fabric-3.30.19346.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:40 2020"}