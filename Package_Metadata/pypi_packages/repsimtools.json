{"info": {"author": "Robin Scheibler", "author_email": "fakufaku@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "Reproducible Simulation Tools\n=============================\n\nThis is a helper tool to quickly build large dumb parallel simulation or\nprocessing in a reproducible way.\n\n* Parallelization is done using [ipyparallel](http://ipyparallel.readthedocs.io/en/latest/)\n* Results are saved in human friendly JSON format, as soon as collected\n* Provided the main project is versioned with git, the state of the repo\n  is checked prior to simulation. If the repo is dirty, simulation is aborted\n* The results are tagged with the commit number\n* A basic interface displays how many loops have been done, how much time has ellapsed,\n  approximately how long is left\n* Options allow to run a single loop or in serial mode (without using ipyparallel)\n  for debugging\n* All the arguments and parameters for the simulation are saved along the results\n\nBasics\n------\n\nThe code to repeat is isolated in a function taking as single argument a list `args` .\nThis list `args` contains all the parameters that vary from loop to loop. The global\nparameters, that are always the same during all loops of the simulation are stored in\na Python dictionary called `parameters`.\n\nEvery script created with `rrtools` comes with a list of options that can be\naccessed through the help command\n\n    $ python examples/test_simulation.py --help\n\n    usage: test_simulation.py [-h] [-d DIR] [-p PROFILE] [-t] [-s] [--dummy]\n                              parameters\n\n    Dummy test simulation\n\n    positional arguments:\n      parameters            JSON file containing simulation parameters\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -d DIR, --dir DIR     directory to store sim results\n      -p PROFILE, --profile PROFILE\n                            ipython profile of cluster\n      -t, --test            test mode, runs a single loop of the simulation\n      -s, --serial          run in a serial loop, ipyparallel not called\n      --dummy               tags the directory as dummy, can be used for running\n                            small batches\n\nIf using a cluster of `ipyparallel` engines is not available, it is possible\nto run everything in a simple loop using the `-s` of `--serial` option.\n\nFor debugging, the `-t` or `--test` option runs only 2 loops of all.\n\nUsing the `--dummy` option will tag the results with `dummy` tag, which\nis useful to make sure we distinguish test runs from the real simulation\nresults.\n\nExample\n-------\n\nA simple example is availble in `examples` folder. It can be run like this\n\n    python examles/test_simulation.py examples/test_simulation.json\n\nThe python file contains the function definitions for the different parts\n\n    import os\n    import itertools\n\n    import rrtools\n\n    # find the absolute path to this file\n    base_dir = os.path.abspath(os.path.split(__file__)[0])\n\n    def init(parameters):\n        '''\n        This function takes as unique positional argument a Python\n        dictionary of global parameters for the simulation.\n        This lets the user add some parameters computed in software\n        to the dictionary. The update dictionary will be saved\n        along the simulation output.\n\n        This updated dictionary is later availbable in the global namespace of\n        parallel_loop and gen_args functions.\n\n        Parameters\n        ----------\n        parameters: dict\n          The global simulation parameters\n        '''\n        parameters['lower_bound'] = 0\n\n\n    def parallel_loop(args):\n        '''\n        This is the heart of the parallel simulation. This function is what is repeated\n        a large number of time.\n\n        Parameters\n        ----------\n        args: list\n            A list of arguments whose combination is unique to one loop of the simulation.\n        '''\n        global parameters\n        import time\n\n        # split arguments\n        timeout = args[0]\n        key = args[1]\n\n        time.sleep(timeout)\n        \n        return dict(key=key, timeout=timeout, secret=parameters['secret'])\n\n    def gen_args(parameters):\n        '''\n        This function is called once before the simulation to generate\n        the list of arguments combinations to try.\n\n        For example say that you have arguments x=1,2,3 and y=2,3 for your parallel\n        loop and you want to try all combinations. Then this function\n        can generate the list\n        args = [[1,2], [1,3], [2,2], [2,3], [3,2], [3,3]]\n\n        Paramters\n        ---------\n        parameters: dict\n            The Python dictionary of globaly simulation parameters. This can\n            typically contain the range of values for the arguments to sweep.\n        '''\n\n        timeouts = range(parameters['max_timeout'])\n        keys = range(parameters['max_int'])\n\n        return list(itertools.product(timeouts, keys))\n\n\n    if __name__ == '__main__':\n\n        rrtools.run(parallel_loop, gen_args, func_init=init,\n            base_dir=base_dir, results_dir='data/',\n            description='Dummy test simulation')\n\n\nThe JSON file contains global simulation parameters.\n\n    {\n      \"max_timeout\": 10,\n      \"max_int\": 2,\n      \"secret\": \"helloworld\"\n    }\n\n\nControl the Number of Threads\n-----------------------------\n\nWhen using outer loop level parallelism, it is important that the inner loop does not\nuse parallel processing. When using numpy for the processing, it is thus important to\ndisable multi-threading in the BLAS library used. This can be achieved by setting\nthe number of threads to one using environment variables.\n\n* Openblas `OPENBLAS_NUM_THREADS=1`\n* MKL `MKL_NUM_THREADS=1` or directly in the code using the `mkl.set_num_threads(1)` function.\n\nIf not, the outer threads might compete with the inner threads for resources,\nand the overall simulation becomes very slow. Resource usage is most efficient\nwhen sufficiently many outer loops can run in parallel.\n\nAuthor\n------\n\nRobin Scheibler [contact](mailto://fakufaku@gmail.com)\n\nLicense\n-------\n\nCopyright (c) 2018 Robin Scheibler\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/fakufaku/repsimtools", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "repsimtools", "package_url": "https://pypi.org/project/repsimtools/", "platform": "", "project_url": "https://pypi.org/project/repsimtools/", "project_urls": {"Homepage": "https://github.com/fakufaku/repsimtools"}, "release_url": "https://pypi.org/project/repsimtools/0.0.1/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Tools for parallel simulation with git source control.", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Reproducible Simulation Tools</h1>\n<p>This is a helper tool to quickly build large dumb parallel simulation or\nprocessing in a reproducible way.</p>\n<ul>\n<li>Parallelization is done using <a href=\"http://ipyparallel.readthedocs.io/en/latest/\" rel=\"nofollow\">ipyparallel</a></li>\n<li>Results are saved in human friendly JSON format, as soon as collected</li>\n<li>Provided the main project is versioned with git, the state of the repo\nis checked prior to simulation. If the repo is dirty, simulation is aborted</li>\n<li>The results are tagged with the commit number</li>\n<li>A basic interface displays how many loops have been done, how much time has ellapsed,\napproximately how long is left</li>\n<li>Options allow to run a single loop or in serial mode (without using ipyparallel)\nfor debugging</li>\n<li>All the arguments and parameters for the simulation are saved along the results</li>\n</ul>\n<h2>Basics</h2>\n<p>The code to repeat is isolated in a function taking as single argument a list <code>args</code> .\nThis list <code>args</code> contains all the parameters that vary from loop to loop. The global\nparameters, that are always the same during all loops of the simulation are stored in\na Python dictionary called <code>parameters</code>.</p>\n<p>Every script created with <code>rrtools</code> comes with a list of options that can be\naccessed through the help command</p>\n<pre><code>$ python examples/test_simulation.py --help\n\nusage: test_simulation.py [-h] [-d DIR] [-p PROFILE] [-t] [-s] [--dummy]\n                          parameters\n\nDummy test simulation\n\npositional arguments:\n  parameters            JSON file containing simulation parameters\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -d DIR, --dir DIR     directory to store sim results\n  -p PROFILE, --profile PROFILE\n                        ipython profile of cluster\n  -t, --test            test mode, runs a single loop of the simulation\n  -s, --serial          run in a serial loop, ipyparallel not called\n  --dummy               tags the directory as dummy, can be used for running\n                        small batches\n</code></pre>\n<p>If using a cluster of <code>ipyparallel</code> engines is not available, it is possible\nto run everything in a simple loop using the <code>-s</code> of <code>--serial</code> option.</p>\n<p>For debugging, the <code>-t</code> or <code>--test</code> option runs only 2 loops of all.</p>\n<p>Using the <code>--dummy</code> option will tag the results with <code>dummy</code> tag, which\nis useful to make sure we distinguish test runs from the real simulation\nresults.</p>\n<h2>Example</h2>\n<p>A simple example is availble in <code>examples</code> folder. It can be run like this</p>\n<pre><code>python examles/test_simulation.py examples/test_simulation.json\n</code></pre>\n<p>The python file contains the function definitions for the different parts</p>\n<pre><code>import os\nimport itertools\n\nimport rrtools\n\n# find the absolute path to this file\nbase_dir = os.path.abspath(os.path.split(__file__)[0])\n\ndef init(parameters):\n    '''\n    This function takes as unique positional argument a Python\n    dictionary of global parameters for the simulation.\n    This lets the user add some parameters computed in software\n    to the dictionary. The update dictionary will be saved\n    along the simulation output.\n\n    This updated dictionary is later availbable in the global namespace of\n    parallel_loop and gen_args functions.\n\n    Parameters\n    ----------\n    parameters: dict\n      The global simulation parameters\n    '''\n    parameters['lower_bound'] = 0\n\n\ndef parallel_loop(args):\n    '''\n    This is the heart of the parallel simulation. This function is what is repeated\n    a large number of time.\n\n    Parameters\n    ----------\n    args: list\n        A list of arguments whose combination is unique to one loop of the simulation.\n    '''\n    global parameters\n    import time\n\n    # split arguments\n    timeout = args[0]\n    key = args[1]\n\n    time.sleep(timeout)\n    \n    return dict(key=key, timeout=timeout, secret=parameters['secret'])\n\ndef gen_args(parameters):\n    '''\n    This function is called once before the simulation to generate\n    the list of arguments combinations to try.\n\n    For example say that you have arguments x=1,2,3 and y=2,3 for your parallel\n    loop and you want to try all combinations. Then this function\n    can generate the list\n    args = [[1,2], [1,3], [2,2], [2,3], [3,2], [3,3]]\n\n    Paramters\n    ---------\n    parameters: dict\n        The Python dictionary of globaly simulation parameters. This can\n        typically contain the range of values for the arguments to sweep.\n    '''\n\n    timeouts = range(parameters['max_timeout'])\n    keys = range(parameters['max_int'])\n\n    return list(itertools.product(timeouts, keys))\n\n\nif __name__ == '__main__':\n\n    rrtools.run(parallel_loop, gen_args, func_init=init,\n        base_dir=base_dir, results_dir='data/',\n        description='Dummy test simulation')\n</code></pre>\n<p>The JSON file contains global simulation parameters.</p>\n<pre><code>{\n  \"max_timeout\": 10,\n  \"max_int\": 2,\n  \"secret\": \"helloworld\"\n}\n</code></pre>\n<h2>Control the Number of Threads</h2>\n<p>When using outer loop level parallelism, it is important that the inner loop does not\nuse parallel processing. When using numpy for the processing, it is thus important to\ndisable multi-threading in the BLAS library used. This can be achieved by setting\nthe number of threads to one using environment variables.</p>\n<ul>\n<li>Openblas <code>OPENBLAS_NUM_THREADS=1</code></li>\n<li>MKL <code>MKL_NUM_THREADS=1</code> or directly in the code using the <code>mkl.set_num_threads(1)</code> function.</li>\n</ul>\n<p>If not, the outer threads might compete with the inner threads for resources,\nand the overall simulation becomes very slow. Resource usage is most efficient\nwhen sufficiently many outer loops can run in parallel.</p>\n<h2>Author</h2>\n<p>Robin Scheibler <a href=\"mailto://fakufaku@gmail.com\">contact</a></p>\n<h2>License</h2>\n<p>Copyright (c) 2018 Robin Scheibler</p>\n<p>Permission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:</p>\n<p>The above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.</p>\n<p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.</p>\n\n          </div>"}, "last_serial": 7007024, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "ff35aa6bac02ce42560bf5277a9bd546", "sha256": "78b91944450bc3cacdb3412867faf66385900fdc1ce598032a05d26ea876297f"}, "downloads": -1, "filename": "repsimtools-0.0.1.tar.gz", "has_sig": false, "md5_digest": "ff35aa6bac02ce42560bf5277a9bd546", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9448, "upload_time": "2020-04-13T01:10:33", "upload_time_iso_8601": "2020-04-13T01:10:33.158622Z", "url": "https://files.pythonhosted.org/packages/3e/70/11b0f655043369a52548c1a37c061412fccb895cf86ed5b850bf6e02b260/repsimtools-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ff35aa6bac02ce42560bf5277a9bd546", "sha256": "78b91944450bc3cacdb3412867faf66385900fdc1ce598032a05d26ea876297f"}, "downloads": -1, "filename": "repsimtools-0.0.1.tar.gz", "has_sig": false, "md5_digest": "ff35aa6bac02ce42560bf5277a9bd546", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9448, "upload_time": "2020-04-13T01:10:33", "upload_time_iso_8601": "2020-04-13T01:10:33.158622Z", "url": "https://files.pythonhosted.org/packages/3e/70/11b0f655043369a52548c1a37c061412fccb895cf86ed5b850bf6e02b260/repsimtools-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:04:18 2020"}