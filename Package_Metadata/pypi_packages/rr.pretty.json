{"info": {"author": "Rui Jorge Rei", "author_email": "rui.jorge.rei@googlemail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7"], "description": "=========\r\nrr.pretty\r\n=========\r\n\r\nThis module exposes a few functions and a class decorator to make the task of writing ``__repr__()`` and ``__str__()`` for custom classes much easier. It will display a list of nicely formatted ``(attr, val)`` pairs with custmizable separator and formatting for each pair.\r\n\r\nLet's look at an example:\r\n\r\n.. code-block:: python\r\n\r\n    from rr import pretty\r\n\r\n    class foo(object):\r\n        __str__ = pretty.str\r\n        __repr__ = pretty.repr\r\n        __info__ = pretty.info([\"x\", \"y\", \"z\"])\r\n\r\n        def __init__(self, x, y, z):\r\n            self.x = x\r\n            self.y = y\r\n            self.z = z\r\n\r\n    f = foo(1, 2, 3)\r\n    print repr(f)  # see for yourself :)\r\n    print str(f)\r\n\r\nNow, let's do the same, only this time we'll use the ``klass()`` class decorator:\r\n\r\n.. code-block:: python\r\n\r\n    from rr import pretty\r\n\r\n    @pretty.klass\r\n    class foo(object):\r\n        def __init__(self, x, y, z):\r\n            self.x = x\r\n            self.y = y\r\n            self.z = z\r\n\r\n    f = foo(1, 2, 3)\r\n    print repr(f)  # see for yourself :)\r\n    print str(f)\r\n\r\nWe even left out the attribute list, and ``pretty.info()`` (which is what ``pretty.klass()`` uses behind the scenes) builds it for us. That's it! You get nice ``__repr__()`` and ``__str__()`` methods for free.\r\n\r\n\r\nInstallation\r\n============\r\n\r\n>From PyPI (\"stable\" release):\r\n\r\n.. code-block:: bash\r\n\r\n    pip install rr.pretty\r\n\r\n>From the Git repo:\r\n\r\n.. code-block:: bash\r\n\r\n    git clone https://github.com/2xR/rr.pretty.git\r\n    pip install ./rr.pretty\r\n\r\n\r\nContributing\r\n============\r\n\r\nContributions are welcome through github pull requests (tests would be nice to have... :P)\r\n\r\nAnd if you're using the library and would like to say *\"thanks!\"* and/or keep me working on it, why not `buy me a beer <https://www.paypal.com/cgi-bin/webscr?cmd=_donations&business=2UMJC8HSU8RFJ&lc=PT&item_name=DoubleR&item_number=github%2f2xR%2fpaypal&currency_code=EUR&bn=PP%2dDonationsBF%3abtn_donate_LG%2egif%3aNonHosted>`_?", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/2xR/rr.pretty", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "rr.pretty", "package_url": "https://pypi.org/project/rr.pretty/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/rr.pretty/", "project_urls": {"Homepage": "https://github.com/2xR/rr.pretty"}, "release_url": "https://pypi.org/project/rr.pretty/0.1.0/", "requires_dist": null, "requires_python": "", "summary": "Helpers for creation of nicer repr() and str().", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This module exposes a few functions and a class decorator to make the task of writing <tt>__repr__()</tt> and <tt>__str__()</tt> for custom classes much easier. It will display a list of nicely formatted <tt>(attr, val)</tt> pairs with custmizable separator and formatting for each pair.</p>\n<p>Let\u2019s look at an example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">rr</span> <span class=\"kn\">import</span> <span class=\"n\">pretty</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">foo</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"fm\">__str__</span> <span class=\"o\">=</span> <span class=\"n\">pretty</span><span class=\"o\">.</span><span class=\"n\">str</span>\n    <span class=\"fm\">__repr__</span> <span class=\"o\">=</span> <span class=\"n\">pretty</span><span class=\"o\">.</span><span class=\"n\">repr</span>\n    <span class=\"n\">__info__</span> <span class=\"o\">=</span> <span class=\"n\">pretty</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">([</span><span class=\"s2\">\"x\"</span><span class=\"p\">,</span> <span class=\"s2\">\"y\"</span><span class=\"p\">,</span> <span class=\"s2\">\"z\"</span><span class=\"p\">])</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">x</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">y</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">z</span>\n\n<span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>  <span class=\"c1\"># see for yourself :)</span>\n<span class=\"nb\">print</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n</pre>\n<p>Now, let\u2019s do the same, only this time we\u2019ll use the <tt>klass()</tt> class decorator:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">rr</span> <span class=\"kn\">import</span> <span class=\"n\">pretty</span>\n\n<span class=\"nd\">@pretty</span><span class=\"o\">.</span><span class=\"n\">klass</span>\n<span class=\"k\">class</span> <span class=\"nc\">foo</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">x</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">y</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">z</span>\n\n<span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>  <span class=\"c1\"># see for yourself :)</span>\n<span class=\"nb\">print</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n</pre>\n<p>We even left out the attribute list, and <tt>pretty.info()</tt> (which is what <tt>pretty.klass()</tt> uses behind the scenes) builds it for us. That\u2019s it! You get nice <tt>__repr__()</tt> and <tt>__str__()</tt> methods for free.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>&gt;From PyPI (\u201cstable\u201d release):</p>\n<pre>pip install rr.pretty\n</pre>\n<p>&gt;From the Git repo:</p>\n<pre>git clone https://github.com/2xR/rr.pretty.git\npip install ./rr.pretty\n</pre>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<p>Contributions are welcome through github pull requests (tests would be nice to have\u2026 :P)</p>\n<p>And if you\u2019re using the library and would like to say <em>\u201cthanks!\u201d</em> and/or keep me working on it, why not <a href=\"https://www.paypal.com/cgi-bin/webscr?cmd=_donations&amp;business=2UMJC8HSU8RFJ&amp;lc=PT&amp;item_name=DoubleR&amp;item_number=github%2f2xR%2fpaypal&amp;currency_code=EUR&amp;bn=PP%2dDonationsBF%3abtn_donate_LG%2egif%3aNonHosted\" rel=\"nofollow\">buy me a beer</a>?</p>\n</div>\n\n          </div>"}, "last_serial": 2186141, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "15e9ec99fb2ef82ac0e9422bcc90d3d1", "sha256": "e671cedd08b3350780baafde3cef73efd30c61f1c0b98d0fa78bdf47036e4b5c"}, "downloads": -1, "filename": "rr.pretty-0.1.0-py2-none-any.whl", "has_sig": false, "md5_digest": "15e9ec99fb2ef82ac0e9422bcc90d3d1", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 6473, "upload_time": "2016-06-24T23:07:55", "upload_time_iso_8601": "2016-06-24T23:07:55.421858Z", "url": "https://files.pythonhosted.org/packages/9a/36/9540cce35610f41dc33f76b98fb000d53f298eccaf6402a38c9e37a20c67/rr.pretty-0.1.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "125639e1fbf894ff5e7c12bfb82033d4", "sha256": "359569472c243644715e773d34cfe19d7d5a8dbfdb8f36ff8060dad9c336115c"}, "downloads": -1, "filename": "rr.pretty-0.1.0.zip", "has_sig": false, "md5_digest": "125639e1fbf894ff5e7c12bfb82033d4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7771, "upload_time": "2016-06-24T23:08:23", "upload_time_iso_8601": "2016-06-24T23:08:23.484376Z", "url": "https://files.pythonhosted.org/packages/f6/33/6d4c4e0bfbd9948d410998005e94d1e0812f2c861a12f7df67c510cc61dd/rr.pretty-0.1.0.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "15e9ec99fb2ef82ac0e9422bcc90d3d1", "sha256": "e671cedd08b3350780baafde3cef73efd30c61f1c0b98d0fa78bdf47036e4b5c"}, "downloads": -1, "filename": "rr.pretty-0.1.0-py2-none-any.whl", "has_sig": false, "md5_digest": "15e9ec99fb2ef82ac0e9422bcc90d3d1", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 6473, "upload_time": "2016-06-24T23:07:55", "upload_time_iso_8601": "2016-06-24T23:07:55.421858Z", "url": "https://files.pythonhosted.org/packages/9a/36/9540cce35610f41dc33f76b98fb000d53f298eccaf6402a38c9e37a20c67/rr.pretty-0.1.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "125639e1fbf894ff5e7c12bfb82033d4", "sha256": "359569472c243644715e773d34cfe19d7d5a8dbfdb8f36ff8060dad9c336115c"}, "downloads": -1, "filename": "rr.pretty-0.1.0.zip", "has_sig": false, "md5_digest": "125639e1fbf894ff5e7c12bfb82033d4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7771, "upload_time": "2016-06-24T23:08:23", "upload_time_iso_8601": "2016-06-24T23:08:23.484376Z", "url": "https://files.pythonhosted.org/packages/f6/33/6d4c4e0bfbd9948d410998005e94d1e0812f2c861a12f7df67c510cc61dd/rr.pretty-0.1.0.zip", "yanked": false}], "timestamp": "Fri May  8 03:00:45 2020"}