{"info": {"author": "marco-btree", "author_email": "marco@binarytree-software.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Environment :: Web Environment", "Framework :: Django", "Framework :: Django :: 2.0", "Framework :: Django :: 2.1", "Framework :: Django :: 2.2", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "\nDjango Ariadne JWT\n==================\n\nSupport for JWT based authentication for use with the ariadne_ graphql library\nrunning inside a Django_ project. It is heavily inspired by django-graph-jwt_.\n\nInstallation\n------------\n::\n\n  pip install django-ariadne-jwt\n\nHow to use\n----------\n\n``django-ariadne-jwt`` aims to be easy to install and use.\n\nFirst add ``JSONWebTokenBackend`` to your *AUTHENTICATION_BACKENDS*\n\n.. code:: python\n\n    AUTHENTICATION_BACKENDS = [\n      \"django_ariadne_jwt.backends.JSONWebTokenBackend\",\n      # Any other authentication backends...\n      \"django.contrib.auth.backends.ModelBackend\",\n    ]\n\nThen add ``JSONWebTokenMiddleware`` to your view\n\n.. code:: python\n\n    from django_ariadne_jwt.middleware import JSONWebTokenMiddleware\n\n    urlpatterns = [\n      # Your other paths...\n      path(\n          \"graphql/\",\n          csrf_exempt(\n              GraphQLView.as_view(\n                  schema=schema, middleware=[JSONWebTokenMiddleware()]\n              )\n          ),\n          name=\"graphql\"\n      )\n    ]\n\n\nOr to your queries:\n\n.. code:: python\n\n    ariadne.graphql_sync(\n        schema,\n        {\n            \"query\": \"\"\"\n            query {\n                test\n            }\n            \"\"\"\n        },\n        middleware=[JSONWebTokenMiddleware()],\n    )\n\n\nAnd then add the ``login_decorator`` to your resolvers before adding the field:\n\n.. code:: python\n\n    from django_ariadne_jwt.decorators import login_required\n\n    @query_type.field(\"test\")\n    @login_required\n    def resolve_test(*args):\n      ...\n\n\nThis will prevent the field from resolving and ``ariadne`` will add an error to\nthe query result.\n\nFinally add the type definitions and resolvers to the executable schema\n\n.. code:: python\n\n    from django_ariadne_jwt.resolvers import (\n      auth_token_definition,\n      auth_token_verification_definition,\n      resolve_token_auth,\n      resolve_refresh_token,\n      resolve_verify_token,\n    )\n\n    type_definitions = \"\"\"\n      ...\n\n      type Mutation {\n        ...\n        tokenAuth(username: String!, password: String!): AuthToken!\n        refreshToken(token: String!): AuthToken!\n        verifyToken(token: String!): AuthTokenVerification!\n        ...\n      }\n    \"\"\"\n\n    auth_type_definitions = [\n      auth_token_definition,\n      auth_token_verification_definition,\n    ]\n\n    resolvers = [\n      ...\n    ]\n\n    auth_resolvers = [\n      resolve_token_auth,\n      resolve_refresh_token,\n      resolve_verify_token,\n    ]\n\n    schema = ariadne.make_executable_schema(\n      [type_definitions] + auth_type_definitions, resolvers + auth_resolvers\n    )\n\nOnce you get an auth token, set the HTTP Authorization header to:\n\n``Token <token>``\n\n\nHow to contribute\n-----------------\n\n``django-ariadne-jwt`` is at a very early stage. It is currently\nmissing documentation, better testing and a lot of configuration options. Pull\nrequests with any of these are greatly appreciated.\n\n\n\n``django-ariadne-jwt`` is missing feature X\n-------------------------------------------\n\nFeel free to open an issue or create a pull request with the implementation\n\n.. _ariadne: https://ariadnegraphql.org/\n.. _Django: https://www.djangoproject.com/\n.. _django-graph-jwt: https://github.com/flavors/django-graphql-jwt>\n.. _Python: http://python.org\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/binarytree-software/django-ariadne-jwt", "keywords": "", "license": "MIT", "maintainer": "marco-btree", "maintainer_email": "", "name": "django-ariadne-jwt", "package_url": "https://pypi.org/project/django-ariadne-jwt/", "platform": "", "project_url": "https://pypi.org/project/django-ariadne-jwt/", "project_urls": {"Homepage": "https://github.com/binarytree-software/django-ariadne-jwt", "Issues": "https://github.com/binarytree-software/django-ariadne-jwt/issues"}, "release_url": "https://pypi.org/project/django-ariadne-jwt/0.2.0/", "requires_dist": ["ariadne (>=0.6.0)", "Django (>=2.0.0)", "PyJWT (>=1.5.0)"], "requires_python": "", "summary": "JSON Web Token for Django Ariadne", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Support for JWT based authentication for use with the <a href=\"https://ariadnegraphql.org/\" rel=\"nofollow\">ariadne</a> graphql library\nrunning inside a <a href=\"https://www.djangoproject.com/\" rel=\"nofollow\">Django</a> project. It is heavily inspired by <a href=\"https://github.com/flavors/django-graphql-jwt&gt;\" rel=\"nofollow\">django-graph-jwt</a>.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>pip install django-ariadne-jwt\n</pre>\n</div>\n<div id=\"how-to-use\">\n<h2>How to use</h2>\n<p><tt><span class=\"pre\">django-ariadne-jwt</span></tt> aims to be easy to install and use.</p>\n<p>First add <tt>JSONWebTokenBackend</tt> to your <em>AUTHENTICATION_BACKENDS</em></p>\n<pre><span class=\"n\">AUTHENTICATION_BACKENDS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n  <span class=\"s2\">\"django_ariadne_jwt.backends.JSONWebTokenBackend\"</span><span class=\"p\">,</span>\n  <span class=\"c1\"># Any other authentication backends...</span>\n  <span class=\"s2\">\"django.contrib.auth.backends.ModelBackend\"</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n</pre>\n<p>Then add <tt>JSONWebTokenMiddleware</tt> to your view</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django_ariadne_jwt.middleware</span> <span class=\"kn\">import</span> <span class=\"n\">JSONWebTokenMiddleware</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n  <span class=\"c1\"># Your other paths...</span>\n  <span class=\"n\">path</span><span class=\"p\">(</span>\n      <span class=\"s2\">\"graphql/\"</span><span class=\"p\">,</span>\n      <span class=\"n\">csrf_exempt</span><span class=\"p\">(</span>\n          <span class=\"n\">GraphQLView</span><span class=\"o\">.</span><span class=\"n\">as_view</span><span class=\"p\">(</span>\n              <span class=\"n\">schema</span><span class=\"o\">=</span><span class=\"n\">schema</span><span class=\"p\">,</span> <span class=\"n\">middleware</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">JSONWebTokenMiddleware</span><span class=\"p\">()]</span>\n          <span class=\"p\">)</span>\n      <span class=\"p\">),</span>\n      <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"graphql\"</span>\n  <span class=\"p\">)</span>\n<span class=\"p\">]</span>\n</pre>\n<p>Or to your queries:</p>\n<pre><span class=\"n\">ariadne</span><span class=\"o\">.</span><span class=\"n\">graphql_sync</span><span class=\"p\">(</span>\n    <span class=\"n\">schema</span><span class=\"p\">,</span>\n    <span class=\"p\">{</span>\n        <span class=\"s2\">\"query\"</span><span class=\"p\">:</span> <span class=\"s2\">\"\"\"\n        query {\n            test\n        }\n        \"\"\"</span>\n    <span class=\"p\">},</span>\n    <span class=\"n\">middleware</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">JSONWebTokenMiddleware</span><span class=\"p\">()],</span>\n<span class=\"p\">)</span>\n</pre>\n<p>And then add the <tt>login_decorator</tt> to your resolvers before adding the field:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django_ariadne_jwt.decorators</span> <span class=\"kn\">import</span> <span class=\"n\">login_required</span>\n\n<span class=\"nd\">@query_type</span><span class=\"o\">.</span><span class=\"n\">field</span><span class=\"p\">(</span><span class=\"s2\">\"test\"</span><span class=\"p\">)</span>\n<span class=\"nd\">@login_required</span>\n<span class=\"k\">def</span> <span class=\"nf\">resolve_test</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">):</span>\n  <span class=\"o\">...</span>\n</pre>\n<p>This will prevent the field from resolving and <tt>ariadne</tt> will add an error to\nthe query result.</p>\n<p>Finally add the type definitions and resolvers to the executable schema</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django_ariadne_jwt.resolvers</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n  <span class=\"n\">auth_token_definition</span><span class=\"p\">,</span>\n  <span class=\"n\">auth_token_verification_definition</span><span class=\"p\">,</span>\n  <span class=\"n\">resolve_token_auth</span><span class=\"p\">,</span>\n  <span class=\"n\">resolve_refresh_token</span><span class=\"p\">,</span>\n  <span class=\"n\">resolve_verify_token</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">type_definitions</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"\"\n  ...\n\n  type Mutation {\n    ...\n    tokenAuth(username: String!, password: String!): AuthToken!\n    refreshToken(token: String!): AuthToken!\n    verifyToken(token: String!): AuthTokenVerification!\n    ...\n  }\n\"\"\"</span>\n\n<span class=\"n\">auth_type_definitions</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n  <span class=\"n\">auth_token_definition</span><span class=\"p\">,</span>\n  <span class=\"n\">auth_token_verification_definition</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">resolvers</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n  <span class=\"o\">...</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">auth_resolvers</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n  <span class=\"n\">resolve_token_auth</span><span class=\"p\">,</span>\n  <span class=\"n\">resolve_refresh_token</span><span class=\"p\">,</span>\n  <span class=\"n\">resolve_verify_token</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"n\">ariadne</span><span class=\"o\">.</span><span class=\"n\">make_executable_schema</span><span class=\"p\">(</span>\n  <span class=\"p\">[</span><span class=\"n\">type_definitions</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">auth_type_definitions</span><span class=\"p\">,</span> <span class=\"n\">resolvers</span> <span class=\"o\">+</span> <span class=\"n\">auth_resolvers</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Once you get an auth token, set the HTTP Authorization header to:</p>\n<p><tt>Token &lt;token&gt;</tt></p>\n</div>\n<div id=\"how-to-contribute\">\n<h2>How to contribute</h2>\n<p><tt><span class=\"pre\">django-ariadne-jwt</span></tt> is at a very early stage. It is currently\nmissing documentation, better testing and a lot of configuration options. Pull\nrequests with any of these are greatly appreciated.</p>\n</div>\n<div id=\"django-ariadne-jwt-is-missing-feature-x\">\n<h2><tt><span class=\"pre\">django-ariadne-jwt</span></tt> is missing feature X</h2>\n<p>Feel free to open an issue or create a pull request with the implementation</p>\n</div>\n\n          </div>"}, "last_serial": 5865913, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "ad2b00af0209a1d5975d1b0c4663c765", "sha256": "05dc25001b28d8ce0edbc9eb36c3189f623677991e15ecfb4437b5ad0d4efd56"}, "downloads": -1, "filename": "django_ariadne_jwt-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ad2b00af0209a1d5975d1b0c4663c765", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 7118, "upload_time": "2019-09-20T02:09:03", "upload_time_iso_8601": "2019-09-20T02:09:03.125096Z", "url": "https://files.pythonhosted.org/packages/3b/44/ce49538431e43261598fbab6c57497c829566db10292adfb4f377a42b937/django_ariadne_jwt-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e08ec01c4efa5f60f63371437ab1574c", "sha256": "0ad5c73c9dc89fac93b0b142cce104e49a4b419483b4642c6cf9ca1658158fb1"}, "downloads": -1, "filename": "django-ariadne-jwt-0.1.0.tar.gz", "has_sig": false, "md5_digest": "e08ec01c4efa5f60f63371437ab1574c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5171, "upload_time": "2019-09-20T02:09:05", "upload_time_iso_8601": "2019-09-20T02:09:05.254820Z", "url": "https://files.pythonhosted.org/packages/89/cb/0c7f8d11640fa5e972aee8c92aaef9416314a3d741153df6c6b90e19f3c7/django-ariadne-jwt-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "1d8bd50d90b42038533d8f33ec827680", "sha256": "bb6fd931720eea8f846bd1dbabd0e054a81bca637137630975bc9addce840427"}, "downloads": -1, "filename": "django_ariadne_jwt-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1d8bd50d90b42038533d8f33ec827680", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 8895, "upload_time": "2019-09-21T12:34:02", "upload_time_iso_8601": "2019-09-21T12:34:02.544380Z", "url": "https://files.pythonhosted.org/packages/11/00/0dede1b8d3aea384415711b53ee8954759e7d7cd4bf6f07a081c86166eee/django_ariadne_jwt-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d807a58ceae9eb127e3d5343a4e73354", "sha256": "9e6462803be25b878494196946b9036858487274093e1d94d8efcc9b016a278c"}, "downloads": -1, "filename": "django-ariadne-jwt-0.2.0.tar.gz", "has_sig": false, "md5_digest": "d807a58ceae9eb127e3d5343a4e73354", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6570, "upload_time": "2019-09-21T12:34:05", "upload_time_iso_8601": "2019-09-21T12:34:05.363502Z", "url": "https://files.pythonhosted.org/packages/16/fa/6f36a28bb4b23c253263c0de600423a719ff233c15ca80ba5d15f0796f6a/django-ariadne-jwt-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1d8bd50d90b42038533d8f33ec827680", "sha256": "bb6fd931720eea8f846bd1dbabd0e054a81bca637137630975bc9addce840427"}, "downloads": -1, "filename": "django_ariadne_jwt-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1d8bd50d90b42038533d8f33ec827680", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 8895, "upload_time": "2019-09-21T12:34:02", "upload_time_iso_8601": "2019-09-21T12:34:02.544380Z", "url": "https://files.pythonhosted.org/packages/11/00/0dede1b8d3aea384415711b53ee8954759e7d7cd4bf6f07a081c86166eee/django_ariadne_jwt-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d807a58ceae9eb127e3d5343a4e73354", "sha256": "9e6462803be25b878494196946b9036858487274093e1d94d8efcc9b016a278c"}, "downloads": -1, "filename": "django-ariadne-jwt-0.2.0.tar.gz", "has_sig": false, "md5_digest": "d807a58ceae9eb127e3d5343a4e73354", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6570, "upload_time": "2019-09-21T12:34:05", "upload_time_iso_8601": "2019-09-21T12:34:05.363502Z", "url": "https://files.pythonhosted.org/packages/16/fa/6f36a28bb4b23c253263c0de600423a719ff233c15ca80ba5d15f0796f6a/django-ariadne-jwt-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:37:37 2020"}