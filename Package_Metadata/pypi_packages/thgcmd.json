{"info": {"author": "darkcode0x00", "author_email": "darkcode357@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: System Administrators", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: Implementation :: CPython", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "cmd2: a tool for building interactive command line apps\n=======================================================\n[![Latest Version](https://img.shields.io/pypi/v/cmd2.svg?style=flat-square&label=latest%20stable%20version)](https://pypi.python.org/pypi/cmd2/)\n[![Build status](https://img.shields.io/travis/python-cmd2/cmd2.svg?style=flat-square&label=unix%20build)](https://travis-ci.org/python-cmd2/cmd2)\n[![Appveyor build status](https://img.shields.io/appveyor/ci/FedericoCeratto/cmd2.svg?style=flat-square&label=windows%20build)](https://ci.appveyor.com/project/FedericoCeratto/cmd2)\n[![Azure Build status](https://python-cmd2.visualstudio.com/cmd2/_apis/build/status/python-cmd2.cmd2?branch=master)](https://python-cmd2.visualstudio.com/cmd2/_build/latest?definitionId=1&branch=master)\n[![codecov](https://codecov.io/gh/python-cmd2/cmd2/branch/master/graph/badge.svg)](https://codecov.io/gh/python-cmd2/cmd2)\n[![Documentation Status](https://readthedocs.org/projects/cmd2/badge/?version=latest)](http://cmd2.readthedocs.io/en/latest/?badge=latest)\n<a href=\"https://discord.gg/RpVG6tk\"><img src=\"https://img.shields.io/badge/chat-on%20discord-7289da.svg\" alt=\"Chat\"></a>\n\ncmd2 is a tool for building interactive command line applications in Python. Its goal is to make it\nquick and easy for developers to build feature-rich and user-friendly interactive command line\napplications.  It provides a simple API which is an extension of Python's built-in\n[cmd](https://docs.python.org/3/library/cmd.html) module.  cmd2 provides a wealth of features on top\nof cmd to make your life easier and eliminates much of the boilerplate code which would be necessary\nwhen using cmd.\n\nClick on image below to watch a short video demonstrating the capabilities of cmd2:\n[![Screenshot](cmd2.png)](https://youtu.be/DDU_JH6cFsA)\n\nMain Features\n-------------\n- Searchable command history (`history` command and `<Ctrl>+r`) - optionally persistent\n- Text file scripting of your application with `run_script` (`@`) and `_relative_run_script` (`@@`)\n- Python scripting of your application with ``run_pyscript``\n- Run shell commands with ``!``\n- Pipe command output to shell commands with `|`\n- Redirect command output to file with `>`, `>>`\n- Bare `>`, `>>` with no filename send output to paste buffer (clipboard)\n- `py` enters interactive Python console (opt-in `ipy` for IPython console)\n- Option to display long output using a pager with ``cmd2.Cmd.ppaged()``\n- Multi-line commands\n- Special-character command shortcuts (beyond cmd's `?` and `!`)\n- Command aliasing similar to bash `alias` command\n- Macros, which are similar to aliases, but they can contain argument placeholders\n- Ability to run commands at startup from an initialization script\n- Settable environment parameters\n- Parsing commands with arguments using `argparse`, including support for sub-commands\n- Unicode character support\n- Good tab-completion of commands, sub-commands, file system paths, and shell commands\n- Automatic tab-completion of `argparse` flags when using one of the `cmd2` `argparse` decorators\n- Support for Python 3.5+ on Windows, macOS, and Linux\n- Trivial to provide built-in help for all commands\n- Built-in regression testing framework for your applications (transcript-based testing)\n- Transcripts for use with built-in regression can be automatically generated from `history -t` or `run_script -t`\n- Alerts that seamlessly print while user enters text at prompt\n- Colored and stylized output using `ansi.style()`\n\nPython 2.7 support is EOL\n-------------------------\nThe last version of cmd2 to support Python 2.7 is [0.8.9](https://pypi.org/project/cmd2/0.8.9/), released on August 21, 2018.\n\nSupporting Python 2 was an increasing burden on our limited resources.  Switching to support only Python 3 is allowing\nus to clean up the codebase, remove some cruft, and focus on developing new features.\n\nInstallation\n------------\nOn all operating systems, the latest stable version of `cmd2` can be installed using pip:\n\n```bash\npip install -U cmd2\n```\n\ncmd2 works with Python 3.5+ on Windows, macOS, and Linux. It is pure Python code with few 3rd-party dependencies.\n\nFor information on other installation options, see\n[Installation Instructions](https://cmd2.readthedocs.io/en/latest/install.html) in the cmd2\ndocumentation.\n\n\nDocumentation\n-------------\nThe latest documentation for cmd2 can be read online here: https://cmd2.readthedocs.io/en/latest/\n\nIt is available in HTML, PDF, and ePub formats.\n\n\nFeature Overview\n----------------\nInstructions for implementing each feature follow.\n\n- Extension of the `cmd` module.  So capabilities provided by `cmd` still exist\n    - Your applicaiton inherits from `cmd2.Cmd`, let's say you call this class `MyApp`\n    ```Python\n    import cmd2\n    class MyApp(cmd2.Cmd):\n      pass\n    ```\n    - Define a command named **foo** by creating a method named **do_foo**\n    ```Python\n    class MyApp(cmd2.Cmd):\n        def do_foo(self, args):\n            \"\"\"This docstring is the built-in help for the foo command.\"\"\"\n            self.poutput(cmd2.style('foo bar baz', fg='red'))\n    ```\n    - By default the docstring for your **do_foo** method is the help for the **foo** command\n        - NOTE: This doesn't apply if you use one of the `argparse` decorators mentioned below\n    - Can provide more custom help by creating a **help_foo** method (except when using `argparse` decorators)\n    - Can provide custom tab-completion for the **foo** command by creating a **complete_foo** method\n    - Easy to upgrade an existing `cmd` app to `cmd2`\n    - Run your `cmd2` app using the built-in REPL by executing the **cmdloop** method\n\n- Searchable command history\n    - Readline history using `<Ctrl>+r`, arrow keys, and other [Readline Shortcut keys](http://readline.kablamo.org/emacs.html)\n        - Readline history can be persistent between application runs via optional argument to `cmd2.Cmd` initializer\n    - `cmd2` `history` command provides flexible and powerful search\n        - By design, this history does NOT persist between application runs\n        - If you wish to exclude some of your custom commands from the history, append their names to the list at `Cmd.exclude_from_history`.\n        - Do `help history` in any `cmd2` application for more information\n\n- Simple scripting using ASCII text files with one command + arguments per line\n    - See the [Script files](https://cmd2.readthedocs.io/en/latest/freefeatures.html#script-files) section of the `cmd2` docs for more info\n    - See [script.txt](https://github.com/python-cmd2/cmd2/blob/master/examples/scripts/script.txt) for a trivial example script that can be\n    used in any `cmd2` application with the `run_script` command (or `@` shortcut)\n\n- Powerful and flexible built-in Python scripting of your application using the `run_pyscript` command\n    - Run arbitrary Python scripts within your `cmd2` application with the ability to also call custom `cmd2` commands\n    - No separate API for your end users to learn\n        - Syntax for calling `cmd2` commands in a `run_pyscript` is essentially identical to what they would enter on the command line\n    - See the [Python](https://cmd2.readthedocs.io/en/latest/freefeatures.html#python) section of the `cmd2` docs for more info\n    - Also see the [python_scripting.py](https://github.com/python-cmd2/cmd2/blob/master/examples/python_scripting.py) \n    example in conjunction with the [conditional.py](https://github.com/python-cmd2/cmd2/blob/master/examples/scripts/conditional.py) script\n\n- Parsing commands with `argparse`\n    - Two decorators provide built-in capability for using `argparse.ArgumentParser` to parse command arguments\n        - `cmd2.with_argparser` - all arguments are parsed by the `ArgumentParser`\n        - `cmd2.with_argparser_and_unknown_args` - any arguments not parsed by the `ArgumentParser` get passed as a list\n\n    ```Python\n    import argparse\n    from cmd2 import with_argparser\n\n    argparser = argparse.ArgumentParser()\n    argparser.add_argument('-p', '--piglatin', action='store_true', help='atinLay')\n    argparser.add_argument('-s', '--shout', action='store_true', help='N00B EMULATION MODE')\n    argparser.add_argument('words', nargs='+', help='words to say')\n\n    @with_argparser(argparser)\n    def do_speak(self, args):\n        \"\"\"Repeats what you tell me to.\"\"\"\n        words = []\n        for word in args.words:\n            if args.piglatin:\n                word = '%s%say' % (word[1:], word[0])\n            if args.shout:\n                word = word.upper()\n            words.append(word)\n        self.stdout.write('{}\\n'.format(' '.join(words)))\n    ```\n\n    See https://cmd2.readthedocs.io/en/latest/argument_processing.html for more details\n    \n    NOTE: `cmd2` also provides the `cmd2.ArgParser` customization of `argparse.ArgumentParser` for prettier formatting\n    of help and error messages.\n\n- `cmd2` applications function like a full-featured shell in many ways (and are cross-platform)\n    - Run arbitrary shell commands by preceding them with `!` or `shell`\n    - Redirect the output of any command to a file with `>` for overwrite or `>>` for append\n        - If no file name provided after the `>`/`>>`, then output goes to the clipboard/pastebuffer\n    - Pipe the output of any command to an arbitrary shell command with `|`\n    - Create your own custom command aliases using the `alias` command\n    - Create your own custom macros using the `macro` command (similar to aliases, but allow arguments)\n    - Settable environment parameters that users can change during execution supported via `set` command\n    - Option to display long output using a pager with ``cmd2.Cmd.ppaged()``\n    - Optionally specify a startup script that end users can use to customize their environment\n\n- Top-notch tab-completion capabilities which are easy to use but very powerful\n    - For a command **foo** implement a **complete_foo** method to provide custom tab completion for that command\n        - But the helper methods within `cmd2` discussed below mean you would rarely have to implement this from scratch\n    - Commands which use one of the `argparse` decorators have automatic tab-completion of `argparse` flags\n        - And also provide help hints for values associated with these flags\n        - Experiment with the [argprint.py](https://github.com/python-cmd2/cmd2/blob/master/examples/arg_print.py) example\n        using the **oprint** and **pprint** commands to get a feel for how this works\n    - `path_complete` helper method provides flexible tab-completion of file system paths\n        - See the [paged_output.py](https://github.com/python-cmd2/cmd2/blob/master/examples/paged_output.py) example for a simple use case\n        - See the [python_scripting.py](https://github.com/python-cmd2/cmd2/blob/master/examples/python_scripting.py) example for a more full-featured use case\n    - `flag_based_complete` helper method for tab completion based on a particular flag preceding the token being completed\n        - See the [tab_completion.py](https://github.com/python-cmd2/cmd2/blob/master/examples/tab_completion.py) example for a demonstration of how to use this feature\n    - `index_based_complete` helper method for tab completion based on a fixed position in the input string\n        - See the [tab_completion.py](https://github.com/python-cmd2/cmd2/blob/master/examples/tab_completion.py) example for a demonstration of how to use this feature\n    - `basic_complete` helper method for tab completion against a list\n    - `delimiter_complete` helper method for tab completion against a list but each match is split on a delimiter \n        - See the [tab_autocompletion.py](https://github.com/python-cmd2/cmd2/blob/master/examples/tab_autocompletion.py) example for a demonstration of how to use this feature\n    - `cmd2` in combination with `argparse` also provide several advanced capabilities for automatic tab-completion\n            - See the [tab_autocompletion.py](https://github.com/python-cmd2/cmd2/blob/master/examples/tab_autocompletion.py) example for more info\n\n- Multi-line commands\n\n    Any command accepts multi-line input when its name is listed the `multiline_commands` optional argument to \n    `cmd2.Cmd.__init`. The program will keep expecting input until a line ends with any of the characters listed in the \n    `terminators` optional argument to `cmd2.Cmd.__init__()`  .  The default terminators are `;` and `/n` (empty newline).\n\n- Special-character shortcut commands (beyond cmd's \"@\" and \"!\")\n\n    To create a single-character shortcut for a command, update `Cmd.shortcuts`.\n\n- Asynchronous alerts based on events happening in background threads\n    - `cmd2` provides the following helper methods for providing information to users asynchronously even though the `cmd2`\n    REPL is a line-oriented command interpreter:\n        - `async_alert` - display an important message to the user while they are at the prompt in between commands\n            - To the user it appears as if an alert message is printed above the prompt\n        - `async_update_prompt` - update the prompt while the user is still typing at it\n            - This is good for alerting the user to system changes dynamically in between commands\n        - `set_window_title` - set the terminal window title\n            - This changes the window title of the terminal that the user is running the `cmd2` app within\n\n\nTutorials\n---------\n\nA few tutorials on using cmd2 exist:\n\n* Florida PyCon 2017 talk: [slides](https://docs.google.com/presentation/d/1LRmpfBt3V-pYQfgQHdczf16F3hcXmhK83tl77R6IJtE), [video](https://www.youtube.com/watch?v=6m0RdpITaeY)\n* PyCon 2010 talk by Catherine Devlin, the original author: [video](http://pyvideo.org/pycon-us-2010/pycon-2010--easy-command-line-applications-with-c.html)\n* A nice brief step-by-step tutorial: [blog](https://kushaldas.in/posts/developing-command-line-interpreters-using-python-cmd2.html)\n\n\nExample Application\n-------------------\n\nExample cmd2 application (**examples/example.py**):\n\n```python\n#!/usr/bin/env python\n# coding=utf-8\nthgcmd\nimport argparse\nimport random\nimport sys\nimport cmd2\n\nclass CmdLineApp(cmd2.Cmd):\n    thgcmd\n\n    thgcmd\n    # default_to_shell = True\n    MUMBLES = ['like', '...', 'um', 'er', 'hmmm', 'ahh']\n    MUMBLE_FIRST = ['so', 'like', 'well']\n    MUMBLE_LAST = ['right?']\n\n    def __init__(self):\n        self.maxrepeats = 3\n        shortcuts = dict(cmd2.DEFAULT_SHORTCUTS)\n        shortcuts.update({'&': 'speak'})\n\n        # Set use_ipython to True to enable the \"ipy\" command which embeds and interactive IPython shell\n        super().__init__(use_ipython=False, multiline_commands=['orate'], shortcuts=shortcuts)\n        \n        # Make maxrepeats settable at runtime\n        self.settable['maxrepeats'] = 'max repetitions for speak command'\n\n    speak_parser = argparse.ArgumentParser()\n    speak_parser.add_argument('-p', '--piglatin', action='store_true', help='atinLay')\n    speak_parser.add_argument('-s', '--shout', action='store_true', help='N00B EMULATION MODE')\n    speak_parser.add_argument('-r', '--repeat', type=int, help='output [n] times')\n    speak_parser.add_argument('words', nargs='+', help='words to say')\n\n    @cmd2.with_argparser(speak_parser)\n    def do_speak(self, args):\n        \"\"\"Repeats what you tell me to.\"\"\"\n        words = []\n        for word in args.words:\n            if args.piglatin:\n                word = '%s%say' % (word[1:], word[0])\n            if args.shout:\n                word = word.upper()\n            words.append(word)\n        repetitions = args.repeat or 1\n        for i in range(min(repetitions, self.maxrepeats)):\n            # .poutput handles newlines, and accommodates output redirection too\n            self.poutput(' '.join(words))\n\n    do_say = do_speak  # now \"say\" is a synonym for \"speak\"\n    do_orate = do_speak  # another synonym, but this one takes multi-line input\n\n    mumble_parser = argparse.ArgumentParser()\n    mumble_parser.add_argument('-r', '--repeat', type=int, help='how many times to repeat')\n    mumble_parser.add_argument('words', nargs='+', help='words to say')\n\n    @cmd2.with_argparser(mumble_parser)\n    def do_mumble(self, args):\n        \"\"\"Mumbles what you tell me to.\"\"\"\n        repetitions = args.repeat or 1\n        for i in range(min(repetitions, self.maxrepeats)):\n            output = []\n            if (random.random() < .33):\n                output.append(random.choice(self.MUMBLE_FIRST))\n            for word in args.words:\n                if (random.random() < .40):\n                    output.append(random.choice(self.MUMBLES))\n                output.append(word)\n            if (random.random() < .25):\n                output.append(random.choice(self.MUMBLE_LAST))\n            self.poutput(' '.join(output))\n\nif __name__ == '__main__':\n    app = CmdLineApp()\n    sys.exit(app.cmdloop())\n```\n\nThe following is a sample session running example.py.\nThanks to Cmd2's built-in transcript testing capability, it also serves as a test\nsuite for example.py when saved as *transcript_regex.txt*.\nRunning\n\n```bash\npython example.py -t transcript_regex.txt\n```\nwill run all the commands in the transcript against `example.py`, verifying that the output produced\nmatches the transcript.\n\nexample/transcript_regex.txt:\n\n```text\n# Run this transcript with \"python example.py -t transcript_regex.txt\"\n# The regex for editor will match whatever program you use.\n# regexes on prompts just make the trailing space obvious\n(Cmd) set\nallow_ansi: Terminal\ncontinuation_prompt: >/ /\ndebug: False\necho: False\neditor: /.*?/\nfeedback_to_output: False\nlocals_in_py: True\nmaxrepeats: 3\nprompt: (Cmd)/ /\nquiet: False\ntiming: False\n```\n\nRegular expressions can be used anywhere within a transcript file simply by enclosing them within forward slashes, `/`.\n\n\nFound a bug?\n------------\n\nIf you think you've found a bug, please first read through the open [Issues](https://github.com/python-cmd2/cmd2/issues). If you're confident it's a new bug, go ahead and create a new GitHub issue. Be sure to include as much information as possible so we can reproduce the bug.  At a minimum, please state the following:\n\n* ``cmd2`` version\n* Python version\n* OS name and version\n* What you did to cause the bug to occur\n* Include any traceback or error message associated with the bug\n\n\nOpen source projects using cmd2\n-------------------------------\n\nHere are a few examples of open-source projects which use `cmd2`:\n\n* [CephFS Shell](http://docs.ceph.com/docs/master/cephfs/cephfs-shell/)\n    * [Ceph](https://ceph.com/) is a distributed object, block, and file storage platform\n* [JSShell](https://github.com/Den1al/JSShell)\n    * An interactive multi-user web JavaScript shell\n* [psiTurk](https://psiturk.org)\n    * An open platform for science on Amazon Mechanical Turk\n* [Jok3r](http://www.jok3r-framework.com)\n    * Network & Web Pentest Automation Framework\n* [Poseidon](https://github.com/CyberReboot/poseidon)\n    * Leverages software-defined networks (SDNs) to acquire and then feed network traffic to a number of machine learning techniques\n* [Unipacker](https://github.com/unipacker/unipacker)\n    * Automatic and platform-independent unpacker for Windows binaries based on emulation\n* [FLASHMINGO](https://github.com/fireeye/flashmingo)\n    * Automatic analysis of SWF files based on some heuristics. Extensible via plugins.\n* [tomcatmanager](https://github.com/tomcatmanager/tomcatmanager)\n    * A command line tool and python library for managing a tomcat server\n* [mptcpanalyzer](https://github.com/teto/mptcpanalyzer)\n    * Tool to help analyze mptcp pcaps\n* [clanvas](https://github.com/marklalor/clanvas)\n    * Command-line client for Canvas by Instructure", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/darkcode357/thgcmd/archive/1.1.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/darkcode357/thgcmd", "keywords": "command prompt console cmd", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "thgcmd", "package_url": "https://pypi.org/project/thgcmd/", "platform": "any", "project_url": "https://pypi.org/project/thgcmd/", "project_urls": {"Download": "https://github.com/darkcode357/thgcmd/archive/1.1.tar.gz", "Homepage": "https://github.com/darkcode357/thgcmd"}, "release_url": "https://pypi.org/project/thgcmd/1.1/", "requires_dist": null, "requires_python": ">=3.5", "summary": "thgcmd - quickly build feature-rich and user-friendly interactive command line applications in Python", "version": "1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>cmd2: a tool for building interactive command line apps</h1>\n<p><a href=\"https://pypi.python.org/pypi/cmd2/\" rel=\"nofollow\"><img alt=\"Latest Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9a2e380039a0e68709630ed7e282014abd053608/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f636d64322e7376673f7374796c653d666c61742d737175617265266c6162656c3d6c6174657374253230737461626c6525323076657273696f6e\"></a>\n<a href=\"https://travis-ci.org/python-cmd2/cmd2\" rel=\"nofollow\"><img alt=\"Build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8fe160990b7a3170e51c08bf09945f66fb25b798/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f707974686f6e2d636d64322f636d64322e7376673f7374796c653d666c61742d737175617265266c6162656c3d756e69782532306275696c64\"></a>\n<a href=\"https://ci.appveyor.com/project/FedericoCeratto/cmd2\" rel=\"nofollow\"><img alt=\"Appveyor build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f69b5fbe17737bfd5a5b7a5dfc6bdfcde9bd6cbb/68747470733a2f2f696d672e736869656c64732e696f2f6170707665796f722f63692f466564657269636f4365726174746f2f636d64322e7376673f7374796c653d666c61742d737175617265266c6162656c3d77696e646f77732532306275696c64\"></a>\n<a href=\"https://python-cmd2.visualstudio.com/cmd2/_build/latest?definitionId=1&amp;branch=master\" rel=\"nofollow\"><img alt=\"Azure Build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1f91756e6a4aacee6f3aa053a7c4502357e56702/68747470733a2f2f707974686f6e2d636d64322e76697375616c73747564696f2e636f6d2f636d64322f5f617069732f6275696c642f7374617475732f707974686f6e2d636d64322e636d64323f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/python-cmd2/cmd2\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/52056a426070daf51f24d1c525a115390533f2e0/68747470733a2f2f636f6465636f762e696f2f67682f707974686f6e2d636d64322f636d64322f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"http://cmd2.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d424f08c1105a4284d45ba321c210f34209ff424/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f636d64322f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://discord.gg/RpVG6tk\" rel=\"nofollow\"><img alt=\"Chat\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1fb0a75a407f0a2f0ea0d38edfd6e05fd62aba32/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636861742d6f6e253230646973636f72642d3732383964612e737667\"></a></p>\n<p>cmd2 is a tool for building interactive command line applications in Python. Its goal is to make it\nquick and easy for developers to build feature-rich and user-friendly interactive command line\napplications.  It provides a simple API which is an extension of Python's built-in\n<a href=\"https://docs.python.org/3/library/cmd.html\" rel=\"nofollow\">cmd</a> module.  cmd2 provides a wealth of features on top\nof cmd to make your life easier and eliminates much of the boilerplate code which would be necessary\nwhen using cmd.</p>\n<p>Click on image below to watch a short video demonstrating the capabilities of cmd2:\n<a href=\"https://youtu.be/DDU_JH6cFsA\" rel=\"nofollow\"><img alt=\"Screenshot\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/35d61a9343b62ed7c74aeb4cdc1b7d7d3a68c634/636d64322e706e67\"></a></p>\n<h2>Main Features</h2>\n<ul>\n<li>Searchable command history (<code>history</code> command and <code>&lt;Ctrl&gt;+r</code>) - optionally persistent</li>\n<li>Text file scripting of your application with <code>run_script</code> (<code>@</code>) and <code>_relative_run_script</code> (<code>@@</code>)</li>\n<li>Python scripting of your application with <code>run_pyscript</code></li>\n<li>Run shell commands with <code>!</code></li>\n<li>Pipe command output to shell commands with <code>|</code></li>\n<li>Redirect command output to file with <code>&gt;</code>, <code>&gt;&gt;</code></li>\n<li>Bare <code>&gt;</code>, <code>&gt;&gt;</code> with no filename send output to paste buffer (clipboard)</li>\n<li><code>py</code> enters interactive Python console (opt-in <code>ipy</code> for IPython console)</li>\n<li>Option to display long output using a pager with <code>cmd2.Cmd.ppaged()</code></li>\n<li>Multi-line commands</li>\n<li>Special-character command shortcuts (beyond cmd's <code>?</code> and <code>!</code>)</li>\n<li>Command aliasing similar to bash <code>alias</code> command</li>\n<li>Macros, which are similar to aliases, but they can contain argument placeholders</li>\n<li>Ability to run commands at startup from an initialization script</li>\n<li>Settable environment parameters</li>\n<li>Parsing commands with arguments using <code>argparse</code>, including support for sub-commands</li>\n<li>Unicode character support</li>\n<li>Good tab-completion of commands, sub-commands, file system paths, and shell commands</li>\n<li>Automatic tab-completion of <code>argparse</code> flags when using one of the <code>cmd2</code> <code>argparse</code> decorators</li>\n<li>Support for Python 3.5+ on Windows, macOS, and Linux</li>\n<li>Trivial to provide built-in help for all commands</li>\n<li>Built-in regression testing framework for your applications (transcript-based testing)</li>\n<li>Transcripts for use with built-in regression can be automatically generated from <code>history -t</code> or <code>run_script -t</code></li>\n<li>Alerts that seamlessly print while user enters text at prompt</li>\n<li>Colored and stylized output using <code>ansi.style()</code></li>\n</ul>\n<h2>Python 2.7 support is EOL</h2>\n<p>The last version of cmd2 to support Python 2.7 is <a href=\"https://pypi.org/project/cmd2/0.8.9/\" rel=\"nofollow\">0.8.9</a>, released on August 21, 2018.</p>\n<p>Supporting Python 2 was an increasing burden on our limited resources.  Switching to support only Python 3 is allowing\nus to clean up the codebase, remove some cruft, and focus on developing new features.</p>\n<h2>Installation</h2>\n<p>On all operating systems, the latest stable version of <code>cmd2</code> can be installed using pip:</p>\n<pre>pip install -U cmd2\n</pre>\n<p>cmd2 works with Python 3.5+ on Windows, macOS, and Linux. It is pure Python code with few 3rd-party dependencies.</p>\n<p>For information on other installation options, see\n<a href=\"https://cmd2.readthedocs.io/en/latest/install.html\" rel=\"nofollow\">Installation Instructions</a> in the cmd2\ndocumentation.</p>\n<h2>Documentation</h2>\n<p>The latest documentation for cmd2 can be read online here: <a href=\"https://cmd2.readthedocs.io/en/latest/\" rel=\"nofollow\">https://cmd2.readthedocs.io/en/latest/</a></p>\n<p>It is available in HTML, PDF, and ePub formats.</p>\n<h2>Feature Overview</h2>\n<p>Instructions for implementing each feature follow.</p>\n<ul>\n<li>\n<p>Extension of the <code>cmd</code> module.  So capabilities provided by <code>cmd</code> still exist</p>\n<ul>\n<li>Your applicaiton inherits from <code>cmd2.Cmd</code>, let's say you call this class <code>MyApp</code></li>\n</ul>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">cmd2</span>\n<span class=\"k\">class</span> <span class=\"nc\">MyApp</span><span class=\"p\">(</span><span class=\"n\">cmd2</span><span class=\"o\">.</span><span class=\"n\">Cmd</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</pre>\n<ul>\n<li>Define a command named <strong>foo</strong> by creating a method named <strong>do_foo</strong></li>\n</ul>\n<pre><span class=\"k\">class</span> <span class=\"nc\">MyApp</span><span class=\"p\">(</span><span class=\"n\">cmd2</span><span class=\"o\">.</span><span class=\"n\">Cmd</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">do_foo</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"This docstring is the built-in help for the foo command.\"\"\"</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">poutput</span><span class=\"p\">(</span><span class=\"n\">cmd2</span><span class=\"o\">.</span><span class=\"n\">style</span><span class=\"p\">(</span><span class=\"s1\">'foo bar baz'</span><span class=\"p\">,</span> <span class=\"n\">fg</span><span class=\"o\">=</span><span class=\"s1\">'red'</span><span class=\"p\">))</span>\n</pre>\n<ul>\n<li>By default the docstring for your <strong>do_foo</strong> method is the help for the <strong>foo</strong> command\n<ul>\n<li>NOTE: This doesn't apply if you use one of the <code>argparse</code> decorators mentioned below</li>\n</ul>\n</li>\n<li>Can provide more custom help by creating a <strong>help_foo</strong> method (except when using <code>argparse</code> decorators)</li>\n<li>Can provide custom tab-completion for the <strong>foo</strong> command by creating a <strong>complete_foo</strong> method</li>\n<li>Easy to upgrade an existing <code>cmd</code> app to <code>cmd2</code></li>\n<li>Run your <code>cmd2</code> app using the built-in REPL by executing the <strong>cmdloop</strong> method</li>\n</ul>\n</li>\n<li>\n<p>Searchable command history</p>\n<ul>\n<li>Readline history using <code>&lt;Ctrl&gt;+r</code>, arrow keys, and other <a href=\"http://readline.kablamo.org/emacs.html\" rel=\"nofollow\">Readline Shortcut keys</a>\n<ul>\n<li>Readline history can be persistent between application runs via optional argument to <code>cmd2.Cmd</code> initializer</li>\n</ul>\n</li>\n<li><code>cmd2</code> <code>history</code> command provides flexible and powerful search\n<ul>\n<li>By design, this history does NOT persist between application runs</li>\n<li>If you wish to exclude some of your custom commands from the history, append their names to the list at <code>Cmd.exclude_from_history</code>.</li>\n<li>Do <code>help history</code> in any <code>cmd2</code> application for more information</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Simple scripting using ASCII text files with one command + arguments per line</p>\n<ul>\n<li>See the <a href=\"https://cmd2.readthedocs.io/en/latest/freefeatures.html#script-files\" rel=\"nofollow\">Script files</a> section of the <code>cmd2</code> docs for more info</li>\n<li>See <a href=\"https://github.com/python-cmd2/cmd2/blob/master/examples/scripts/script.txt\" rel=\"nofollow\">script.txt</a> for a trivial example script that can be\nused in any <code>cmd2</code> application with the <code>run_script</code> command (or <code>@</code> shortcut)</li>\n</ul>\n</li>\n<li>\n<p>Powerful and flexible built-in Python scripting of your application using the <code>run_pyscript</code> command</p>\n<ul>\n<li>Run arbitrary Python scripts within your <code>cmd2</code> application with the ability to also call custom <code>cmd2</code> commands</li>\n<li>No separate API for your end users to learn\n<ul>\n<li>Syntax for calling <code>cmd2</code> commands in a <code>run_pyscript</code> is essentially identical to what they would enter on the command line</li>\n</ul>\n</li>\n<li>See the <a href=\"https://cmd2.readthedocs.io/en/latest/freefeatures.html#python\" rel=\"nofollow\">Python</a> section of the <code>cmd2</code> docs for more info</li>\n<li>Also see the <a href=\"https://github.com/python-cmd2/cmd2/blob/master/examples/python_scripting.py\" rel=\"nofollow\">python_scripting.py</a>\nexample in conjunction with the <a href=\"https://github.com/python-cmd2/cmd2/blob/master/examples/scripts/conditional.py\" rel=\"nofollow\">conditional.py</a> script</li>\n</ul>\n</li>\n<li>\n<p>Parsing commands with <code>argparse</code></p>\n<ul>\n<li>Two decorators provide built-in capability for using <code>argparse.ArgumentParser</code> to parse command arguments\n<ul>\n<li><code>cmd2.with_argparser</code> - all arguments are parsed by the <code>ArgumentParser</code></li>\n<li><code>cmd2.with_argparser_and_unknown_args</code> - any arguments not parsed by the <code>ArgumentParser</code> get passed as a list</li>\n</ul>\n</li>\n</ul>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">argparse</span>\n<span class=\"kn\">from</span> <span class=\"nn\">cmd2</span> <span class=\"kn\">import</span> <span class=\"n\">with_argparser</span>\n\n<span class=\"n\">argparser</span> <span class=\"o\">=</span> <span class=\"n\">argparse</span><span class=\"o\">.</span><span class=\"n\">ArgumentParser</span><span class=\"p\">()</span>\n<span class=\"n\">argparser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'-p'</span><span class=\"p\">,</span> <span class=\"s1\">'--piglatin'</span><span class=\"p\">,</span> <span class=\"n\">action</span><span class=\"o\">=</span><span class=\"s1\">'store_true'</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s1\">'atinLay'</span><span class=\"p\">)</span>\n<span class=\"n\">argparser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'-s'</span><span class=\"p\">,</span> <span class=\"s1\">'--shout'</span><span class=\"p\">,</span> <span class=\"n\">action</span><span class=\"o\">=</span><span class=\"s1\">'store_true'</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s1\">'N00B EMULATION MODE'</span><span class=\"p\">)</span>\n<span class=\"n\">argparser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'words'</span><span class=\"p\">,</span> <span class=\"n\">nargs</span><span class=\"o\">=</span><span class=\"s1\">'+'</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s1\">'words to say'</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@with_argparser</span><span class=\"p\">(</span><span class=\"n\">argparser</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">do_speak</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Repeats what you tell me to.\"\"\"</span>\n    <span class=\"n\">words</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">word</span> <span class=\"ow\">in</span> <span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">words</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">piglatin</span><span class=\"p\">:</span>\n            <span class=\"n\">word</span> <span class=\"o\">=</span> <span class=\"s1\">'</span><span class=\"si\">%s%s</span><span class=\"s1\">ay'</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">word</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:],</span> <span class=\"n\">word</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n        <span class=\"k\">if</span> <span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">shout</span><span class=\"p\">:</span>\n            <span class=\"n\">word</span> <span class=\"o\">=</span> <span class=\"n\">word</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">()</span>\n        <span class=\"n\">words</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">word</span><span class=\"p\">)</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"si\">{}</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"s1\">' '</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">words</span><span class=\"p\">)))</span>\n</pre>\n<p>See <a href=\"https://cmd2.readthedocs.io/en/latest/argument_processing.html\" rel=\"nofollow\">https://cmd2.readthedocs.io/en/latest/argument_processing.html</a> for more details</p>\n<p>NOTE: <code>cmd2</code> also provides the <code>cmd2.ArgParser</code> customization of <code>argparse.ArgumentParser</code> for prettier formatting\nof help and error messages.</p>\n</li>\n<li>\n<p><code>cmd2</code> applications function like a full-featured shell in many ways (and are cross-platform)</p>\n<ul>\n<li>Run arbitrary shell commands by preceding them with <code>!</code> or <code>shell</code></li>\n<li>Redirect the output of any command to a file with <code>&gt;</code> for overwrite or <code>&gt;&gt;</code> for append\n<ul>\n<li>If no file name provided after the <code>&gt;</code>/<code>&gt;&gt;</code>, then output goes to the clipboard/pastebuffer</li>\n</ul>\n</li>\n<li>Pipe the output of any command to an arbitrary shell command with <code>|</code></li>\n<li>Create your own custom command aliases using the <code>alias</code> command</li>\n<li>Create your own custom macros using the <code>macro</code> command (similar to aliases, but allow arguments)</li>\n<li>Settable environment parameters that users can change during execution supported via <code>set</code> command</li>\n<li>Option to display long output using a pager with <code>cmd2.Cmd.ppaged()</code></li>\n<li>Optionally specify a startup script that end users can use to customize their environment</li>\n</ul>\n</li>\n<li>\n<p>Top-notch tab-completion capabilities which are easy to use but very powerful</p>\n<ul>\n<li>For a command <strong>foo</strong> implement a <strong>complete_foo</strong> method to provide custom tab completion for that command\n<ul>\n<li>But the helper methods within <code>cmd2</code> discussed below mean you would rarely have to implement this from scratch</li>\n</ul>\n</li>\n<li>Commands which use one of the <code>argparse</code> decorators have automatic tab-completion of <code>argparse</code> flags\n<ul>\n<li>And also provide help hints for values associated with these flags</li>\n<li>Experiment with the <a href=\"https://github.com/python-cmd2/cmd2/blob/master/examples/arg_print.py\" rel=\"nofollow\">argprint.py</a> example\nusing the <strong>oprint</strong> and <strong>pprint</strong> commands to get a feel for how this works</li>\n</ul>\n</li>\n<li><code>path_complete</code> helper method provides flexible tab-completion of file system paths\n<ul>\n<li>See the <a href=\"https://github.com/python-cmd2/cmd2/blob/master/examples/paged_output.py\" rel=\"nofollow\">paged_output.py</a> example for a simple use case</li>\n<li>See the <a href=\"https://github.com/python-cmd2/cmd2/blob/master/examples/python_scripting.py\" rel=\"nofollow\">python_scripting.py</a> example for a more full-featured use case</li>\n</ul>\n</li>\n<li><code>flag_based_complete</code> helper method for tab completion based on a particular flag preceding the token being completed\n<ul>\n<li>See the <a href=\"https://github.com/python-cmd2/cmd2/blob/master/examples/tab_completion.py\" rel=\"nofollow\">tab_completion.py</a> example for a demonstration of how to use this feature</li>\n</ul>\n</li>\n<li><code>index_based_complete</code> helper method for tab completion based on a fixed position in the input string\n<ul>\n<li>See the <a href=\"https://github.com/python-cmd2/cmd2/blob/master/examples/tab_completion.py\" rel=\"nofollow\">tab_completion.py</a> example for a demonstration of how to use this feature</li>\n</ul>\n</li>\n<li><code>basic_complete</code> helper method for tab completion against a list</li>\n<li><code>delimiter_complete</code> helper method for tab completion against a list but each match is split on a delimiter\n<ul>\n<li>See the <a href=\"https://github.com/python-cmd2/cmd2/blob/master/examples/tab_autocompletion.py\" rel=\"nofollow\">tab_autocompletion.py</a> example for a demonstration of how to use this feature</li>\n</ul>\n</li>\n<li><code>cmd2</code> in combination with <code>argparse</code> also provide several advanced capabilities for automatic tab-completion\n- See the <a href=\"https://github.com/python-cmd2/cmd2/blob/master/examples/tab_autocompletion.py\" rel=\"nofollow\">tab_autocompletion.py</a> example for more info</li>\n</ul>\n</li>\n<li>\n<p>Multi-line commands</p>\n<p>Any command accepts multi-line input when its name is listed the <code>multiline_commands</code> optional argument to\n<code>cmd2.Cmd.__init</code>. The program will keep expecting input until a line ends with any of the characters listed in the\n<code>terminators</code> optional argument to <code>cmd2.Cmd.__init__()</code>  .  The default terminators are <code>;</code> and <code>/n</code> (empty newline).</p>\n</li>\n<li>\n<p>Special-character shortcut commands (beyond cmd's \"@\" and \"!\")</p>\n<p>To create a single-character shortcut for a command, update <code>Cmd.shortcuts</code>.</p>\n</li>\n<li>\n<p>Asynchronous alerts based on events happening in background threads</p>\n<ul>\n<li><code>cmd2</code> provides the following helper methods for providing information to users asynchronously even though the <code>cmd2</code>\nREPL is a line-oriented command interpreter:\n<ul>\n<li><code>async_alert</code> - display an important message to the user while they are at the prompt in between commands\n<ul>\n<li>To the user it appears as if an alert message is printed above the prompt</li>\n</ul>\n</li>\n<li><code>async_update_prompt</code> - update the prompt while the user is still typing at it\n<ul>\n<li>This is good for alerting the user to system changes dynamically in between commands</li>\n</ul>\n</li>\n<li><code>set_window_title</code> - set the terminal window title\n<ul>\n<li>This changes the window title of the terminal that the user is running the <code>cmd2</code> app within</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2>Tutorials</h2>\n<p>A few tutorials on using cmd2 exist:</p>\n<ul>\n<li>Florida PyCon 2017 talk: <a href=\"https://docs.google.com/presentation/d/1LRmpfBt3V-pYQfgQHdczf16F3hcXmhK83tl77R6IJtE\" rel=\"nofollow\">slides</a>, <a href=\"https://www.youtube.com/watch?v=6m0RdpITaeY\" rel=\"nofollow\">video</a></li>\n<li>PyCon 2010 talk by Catherine Devlin, the original author: <a href=\"http://pyvideo.org/pycon-us-2010/pycon-2010--easy-command-line-applications-with-c.html\" rel=\"nofollow\">video</a></li>\n<li>A nice brief step-by-step tutorial: <a href=\"https://kushaldas.in/posts/developing-command-line-interpreters-using-python-cmd2.html\" rel=\"nofollow\">blog</a></li>\n</ul>\n<h2>Example Application</h2>\n<p>Example cmd2 application (<strong>examples/example.py</strong>):</p>\n<pre><span class=\"ch\">#!/usr/bin/env python</span>\n<span class=\"c1\"># coding=utf-8</span>\n<span class=\"n\">thgcmd</span>\n<span class=\"kn\">import</span> <span class=\"nn\">argparse</span>\n<span class=\"kn\">import</span> <span class=\"nn\">random</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">import</span> <span class=\"nn\">cmd2</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">CmdLineApp</span><span class=\"p\">(</span><span class=\"n\">cmd2</span><span class=\"o\">.</span><span class=\"n\">Cmd</span><span class=\"p\">):</span>\n    <span class=\"n\">thgcmd</span>\n\n    <span class=\"n\">thgcmd</span>\n    <span class=\"c1\"># default_to_shell = True</span>\n    <span class=\"n\">MUMBLES</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'like'</span><span class=\"p\">,</span> <span class=\"s1\">'...'</span><span class=\"p\">,</span> <span class=\"s1\">'um'</span><span class=\"p\">,</span> <span class=\"s1\">'er'</span><span class=\"p\">,</span> <span class=\"s1\">'hmmm'</span><span class=\"p\">,</span> <span class=\"s1\">'ahh'</span><span class=\"p\">]</span>\n    <span class=\"n\">MUMBLE_FIRST</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'so'</span><span class=\"p\">,</span> <span class=\"s1\">'like'</span><span class=\"p\">,</span> <span class=\"s1\">'well'</span><span class=\"p\">]</span>\n    <span class=\"n\">MUMBLE_LAST</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'right?'</span><span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">maxrepeats</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n        <span class=\"n\">shortcuts</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">cmd2</span><span class=\"o\">.</span><span class=\"n\">DEFAULT_SHORTCUTS</span><span class=\"p\">)</span>\n        <span class=\"n\">shortcuts</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">({</span><span class=\"s1\">'&amp;'</span><span class=\"p\">:</span> <span class=\"s1\">'speak'</span><span class=\"p\">})</span>\n\n        <span class=\"c1\"># Set use_ipython to True to enable the \"ipy\" command which embeds and interactive IPython shell</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">use_ipython</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">multiline_commands</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'orate'</span><span class=\"p\">],</span> <span class=\"n\">shortcuts</span><span class=\"o\">=</span><span class=\"n\">shortcuts</span><span class=\"p\">)</span>\n        \n        <span class=\"c1\"># Make maxrepeats settable at runtime</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">settable</span><span class=\"p\">[</span><span class=\"s1\">'maxrepeats'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'max repetitions for speak command'</span>\n\n    <span class=\"n\">speak_parser</span> <span class=\"o\">=</span> <span class=\"n\">argparse</span><span class=\"o\">.</span><span class=\"n\">ArgumentParser</span><span class=\"p\">()</span>\n    <span class=\"n\">speak_parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'-p'</span><span class=\"p\">,</span> <span class=\"s1\">'--piglatin'</span><span class=\"p\">,</span> <span class=\"n\">action</span><span class=\"o\">=</span><span class=\"s1\">'store_true'</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s1\">'atinLay'</span><span class=\"p\">)</span>\n    <span class=\"n\">speak_parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'-s'</span><span class=\"p\">,</span> <span class=\"s1\">'--shout'</span><span class=\"p\">,</span> <span class=\"n\">action</span><span class=\"o\">=</span><span class=\"s1\">'store_true'</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s1\">'N00B EMULATION MODE'</span><span class=\"p\">)</span>\n    <span class=\"n\">speak_parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'-r'</span><span class=\"p\">,</span> <span class=\"s1\">'--repeat'</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s1\">'output [n] times'</span><span class=\"p\">)</span>\n    <span class=\"n\">speak_parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'words'</span><span class=\"p\">,</span> <span class=\"n\">nargs</span><span class=\"o\">=</span><span class=\"s1\">'+'</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s1\">'words to say'</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@cmd2</span><span class=\"o\">.</span><span class=\"n\">with_argparser</span><span class=\"p\">(</span><span class=\"n\">speak_parser</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">do_speak</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Repeats what you tell me to.\"\"\"</span>\n        <span class=\"n\">words</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">word</span> <span class=\"ow\">in</span> <span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">words</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">piglatin</span><span class=\"p\">:</span>\n                <span class=\"n\">word</span> <span class=\"o\">=</span> <span class=\"s1\">'</span><span class=\"si\">%s%s</span><span class=\"s1\">ay'</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">word</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:],</span> <span class=\"n\">word</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n            <span class=\"k\">if</span> <span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">shout</span><span class=\"p\">:</span>\n                <span class=\"n\">word</span> <span class=\"o\">=</span> <span class=\"n\">word</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">()</span>\n            <span class=\"n\">words</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">word</span><span class=\"p\">)</span>\n        <span class=\"n\">repetitions</span> <span class=\"o\">=</span> <span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">repeat</span> <span class=\"ow\">or</span> <span class=\"mi\">1</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">repetitions</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">maxrepeats</span><span class=\"p\">)):</span>\n            <span class=\"c1\"># .poutput handles newlines, and accommodates output redirection too</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">poutput</span><span class=\"p\">(</span><span class=\"s1\">' '</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">words</span><span class=\"p\">))</span>\n\n    <span class=\"n\">do_say</span> <span class=\"o\">=</span> <span class=\"n\">do_speak</span>  <span class=\"c1\"># now \"say\" is a synonym for \"speak\"</span>\n    <span class=\"n\">do_orate</span> <span class=\"o\">=</span> <span class=\"n\">do_speak</span>  <span class=\"c1\"># another synonym, but this one takes multi-line input</span>\n\n    <span class=\"n\">mumble_parser</span> <span class=\"o\">=</span> <span class=\"n\">argparse</span><span class=\"o\">.</span><span class=\"n\">ArgumentParser</span><span class=\"p\">()</span>\n    <span class=\"n\">mumble_parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'-r'</span><span class=\"p\">,</span> <span class=\"s1\">'--repeat'</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s1\">'how many times to repeat'</span><span class=\"p\">)</span>\n    <span class=\"n\">mumble_parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'words'</span><span class=\"p\">,</span> <span class=\"n\">nargs</span><span class=\"o\">=</span><span class=\"s1\">'+'</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s1\">'words to say'</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@cmd2</span><span class=\"o\">.</span><span class=\"n\">with_argparser</span><span class=\"p\">(</span><span class=\"n\">mumble_parser</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">do_mumble</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Mumbles what you tell me to.\"\"\"</span>\n        <span class=\"n\">repetitions</span> <span class=\"o\">=</span> <span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">repeat</span> <span class=\"ow\">or</span> <span class=\"mi\">1</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">repetitions</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">maxrepeats</span><span class=\"p\">)):</span>\n            <span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">()</span> <span class=\"o\">&lt;</span> <span class=\"o\">.</span><span class=\"mi\">33</span><span class=\"p\">):</span>\n                <span class=\"n\">output</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">choice</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">MUMBLE_FIRST</span><span class=\"p\">))</span>\n            <span class=\"k\">for</span> <span class=\"n\">word</span> <span class=\"ow\">in</span> <span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">words</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">()</span> <span class=\"o\">&lt;</span> <span class=\"o\">.</span><span class=\"mi\">40</span><span class=\"p\">):</span>\n                    <span class=\"n\">output</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">choice</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">MUMBLES</span><span class=\"p\">))</span>\n                <span class=\"n\">output</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">word</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">()</span> <span class=\"o\">&lt;</span> <span class=\"o\">.</span><span class=\"mi\">25</span><span class=\"p\">):</span>\n                <span class=\"n\">output</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">choice</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">MUMBLE_LAST</span><span class=\"p\">))</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">poutput</span><span class=\"p\">(</span><span class=\"s1\">' '</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">output</span><span class=\"p\">))</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">CmdLineApp</span><span class=\"p\">()</span>\n    <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">cmdloop</span><span class=\"p\">())</span>\n</pre>\n<p>The following is a sample session running example.py.\nThanks to Cmd2's built-in transcript testing capability, it also serves as a test\nsuite for example.py when saved as <em>transcript_regex.txt</em>.\nRunning</p>\n<pre>python example.py -t transcript_regex.txt\n</pre>\n<p>will run all the commands in the transcript against <code>example.py</code>, verifying that the output produced\nmatches the transcript.</p>\n<p>example/transcript_regex.txt:</p>\n<pre># Run this transcript with \"python example.py -t transcript_regex.txt\"\n# The regex for editor will match whatever program you use.\n# regexes on prompts just make the trailing space obvious\n(Cmd) set\nallow_ansi: Terminal\ncontinuation_prompt: &gt;/ /\ndebug: False\necho: False\neditor: /.*?/\nfeedback_to_output: False\nlocals_in_py: True\nmaxrepeats: 3\nprompt: (Cmd)/ /\nquiet: False\ntiming: False\n</pre>\n<p>Regular expressions can be used anywhere within a transcript file simply by enclosing them within forward slashes, <code>/</code>.</p>\n<h2>Found a bug?</h2>\n<p>If you think you've found a bug, please first read through the open <a href=\"https://github.com/python-cmd2/cmd2/issues\" rel=\"nofollow\">Issues</a>. If you're confident it's a new bug, go ahead and create a new GitHub issue. Be sure to include as much information as possible so we can reproduce the bug.  At a minimum, please state the following:</p>\n<ul>\n<li><code>cmd2</code> version</li>\n<li>Python version</li>\n<li>OS name and version</li>\n<li>What you did to cause the bug to occur</li>\n<li>Include any traceback or error message associated with the bug</li>\n</ul>\n<h2>Open source projects using cmd2</h2>\n<p>Here are a few examples of open-source projects which use <code>cmd2</code>:</p>\n<ul>\n<li><a href=\"http://docs.ceph.com/docs/master/cephfs/cephfs-shell/\" rel=\"nofollow\">CephFS Shell</a>\n<ul>\n<li><a href=\"https://ceph.com/\" rel=\"nofollow\">Ceph</a> is a distributed object, block, and file storage platform</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/Den1al/JSShell\" rel=\"nofollow\">JSShell</a>\n<ul>\n<li>An interactive multi-user web JavaScript shell</li>\n</ul>\n</li>\n<li><a href=\"https://psiturk.org\" rel=\"nofollow\">psiTurk</a>\n<ul>\n<li>An open platform for science on Amazon Mechanical Turk</li>\n</ul>\n</li>\n<li><a href=\"http://www.jok3r-framework.com\" rel=\"nofollow\">Jok3r</a>\n<ul>\n<li>Network &amp; Web Pentest Automation Framework</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/CyberReboot/poseidon\" rel=\"nofollow\">Poseidon</a>\n<ul>\n<li>Leverages software-defined networks (SDNs) to acquire and then feed network traffic to a number of machine learning techniques</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/unipacker/unipacker\" rel=\"nofollow\">Unipacker</a>\n<ul>\n<li>Automatic and platform-independent unpacker for Windows binaries based on emulation</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/fireeye/flashmingo\" rel=\"nofollow\">FLASHMINGO</a>\n<ul>\n<li>Automatic analysis of SWF files based on some heuristics. Extensible via plugins.</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/tomcatmanager/tomcatmanager\" rel=\"nofollow\">tomcatmanager</a>\n<ul>\n<li>A command line tool and python library for managing a tomcat server</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/teto/mptcpanalyzer\" rel=\"nofollow\">mptcpanalyzer</a>\n<ul>\n<li>Tool to help analyze mptcp pcaps</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/marklalor/clanvas\" rel=\"nofollow\">clanvas</a>\n<ul>\n<li>Command-line client for Canvas by Instructure</li>\n</ul>\n</li>\n</ul>\n\n          </div>"}, "last_serial": 5547525, "releases": {"0.0.0": [{"comment_text": "", "digests": {"md5": "ec4346bad458d3a3b7b9dd42624b7f5d", "sha256": "84f4c12dc2448949ec9e844b4fab01cef68f46bcd08197760e11f34232e1b894"}, "downloads": -1, "filename": "thgcmd-0.0.0.tar.gz", "has_sig": false, "md5_digest": "ec4346bad458d3a3b7b9dd42624b7f5d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 627112, "upload_time": "2019-07-17T15:13:10", "upload_time_iso_8601": "2019-07-17T15:13:10.187956Z", "url": "https://files.pythonhosted.org/packages/42/7c/e74e6911f6d18a3edac180975db5728df83f78d2bfd4e6147d50f4f800ed/thgcmd-0.0.0.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "6b1aa72ae459a19849ff8aefd6f223b9", "sha256": "cf22e5ce72dc99ea3fa87b2dc95358e6b2365ccf87b6ec5c9596b67de9d94e2c"}, "downloads": -1, "filename": "thgcmd-1.1.tar.gz", "has_sig": false, "md5_digest": "6b1aa72ae459a19849ff8aefd6f223b9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 621803, "upload_time": "2019-07-17T20:01:38", "upload_time_iso_8601": "2019-07-17T20:01:38.499502Z", "url": "https://files.pythonhosted.org/packages/33/a5/48e3b030cc027279a0023d9581b1dfbb3a711b838c70ceced80287c7472d/thgcmd-1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6b1aa72ae459a19849ff8aefd6f223b9", "sha256": "cf22e5ce72dc99ea3fa87b2dc95358e6b2365ccf87b6ec5c9596b67de9d94e2c"}, "downloads": -1, "filename": "thgcmd-1.1.tar.gz", "has_sig": false, "md5_digest": "6b1aa72ae459a19849ff8aefd6f223b9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 621803, "upload_time": "2019-07-17T20:01:38", "upload_time_iso_8601": "2019-07-17T20:01:38.499502Z", "url": "https://files.pythonhosted.org/packages/33/a5/48e3b030cc027279a0023d9581b1dfbb3a711b838c70ceced80287c7472d/thgcmd-1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:53:58 2020"}