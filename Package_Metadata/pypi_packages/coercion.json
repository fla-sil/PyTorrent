{"info": {"author": "Dave Shawley", "author_email": "daveshawley@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 1 - Planning", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Text Processing"], "description": "coercion\n========\n|ReadTheDocs| |TravisCI| |CodeCov|\n\nThis library provides functions that coerce datastructures into\nnormalized forms.  For example, converting an arbitrary ``dict``\ninto a form that is suitable for passing to ``json.dumps``.\n\nThe `tornado`_ framework has a function called `recursive_unicode`_\nin the ``tornado.escape`` module.  It is a very simple recursive\nwalk of datastructure that switches on type and transforms string\nvalues into unicode strings.  I use this in production software\nregularly and it works like a charm.  Or at least it did until my\nsoftware encountered a deeply nested dictionary and I received a\n``RuntimeError: maximum recursion depth exceeded`` error in my\nservice log.  This is one of the exceptions that strikes fear into\nmost engineers when it rears it's head in production.\n\nThat is the primary reason for this library existing.  It provides\nthe same simple string encoding function iteratively instead of\nrecursively.  At the same time, the need to coerce values into a\nnormalized string form is something that I've had to do repeatedly\nso it might as well be plopped into a reusable library.\n\nExamples\n--------\nThe following example shows one of the underlying reasons that this\nlibrary was created.  The commonly used msgpack implementation for\npython returns everything as byte strings which is problematic if\nyou want to dump it as JSON since it will raise a ``TypeError`` if\ndictionary keys are not strings.  (This is where `recursive_unicode`_\nwas so handy.)\n\n.. code-block:: python\n\n   >>> import json\n   >>> import coercion\n   >>> import msgpack\n   >>> bin_msg = msgpack.packb({u'\\u00DCnicode': b'bytes', b'bytes': 'str'})\n   >>> decoded = msgpack.unpackb(bin_msg)\n   >>> decoded\n   {b'bytes': b'str', b'\\xc3\\x9cnicode': b'bytes'}\n   >>> json.dumps(decoded)\n   Traceback (most recent call last):\n     File \"<stdin>\", line 1, in <module>\n     File \"/Users/daveshawley/opt/lib/python3.5/json/__init__.py\", line 230, in dumps\n       return _default_encoder.encode(obj)\n     File \"/Users/daveshawley/opt/lib/python3.5/json/encoder.py\", line 199, in encode\n       chunks = self.iterencode(o, _one_shot=True)\n     File \"/Users/daveshawley/opt/lib/python3.5/json/encoder.py\", line 257, in iterencode\n       return _iterencode(o, 0)\n   TypeError: keys must be a string\n   >>> json.dumps(coercion.normalize_collection(decoded))\n   '{\"bytes\": \"str\", \"\\\\u00dcnicode\": \"bytes\"}'\n\n\n.. _tornado: http://www.tornadoweb.org/\n.. _recursive_unicode: http://www.tornadoweb.org/en/stable/escape.html\n   #tornado.escape.recursive_unicode\n\n.. |ReadTheDocs| image:: https://readthedocs.org/projects/coercion/badge/\n   ?version=latest\n   :target: https://coercion.readthedocs.org/\n   :alt: [Documentation]\n.. |TravisCI| image:: https://travis-ci.org/dave-shawley/coercion.svg\n   ?branch=master\n   :target: https://travis-ci.org/dave-shawley/coercion\n   :alt: [Build Status]\n.. |CodeCov| image:: https://codecov.io/github/dave-shawley/coercion/\n   coverage.svg?branch=master\n   :target: https://codecov.io/github/dave-shawley/coercion?branch=master\n   :alt: [Test Coverage]", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/dave-shawley/coercion", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "coercion", "package_url": "https://pypi.org/project/coercion/", "platform": "any", "project_url": "https://pypi.org/project/coercion/", "project_urls": {"Homepage": "https://github.com/dave-shawley/coercion"}, "release_url": "https://pypi.org/project/coercion/1.0.0/", "requires_dist": null, "requires_python": "", "summary": "Coercing data into a normalized form", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://coercion.readthedocs.org/\" rel=\"nofollow\"><img alt=\"[Documentation]\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6af958e6abb1faa5aaf9262f5b22c0cb4cc17a8f/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f636f657263696f6e2f62616467652f3f76657273696f6e3d6c6174657374\"></a> <a href=\"https://travis-ci.org/dave-shawley/coercion\" rel=\"nofollow\"><img alt=\"[Build Status]\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5eaf09466215df2abf9a02f90cc257a9510a1d94/68747470733a2f2f7472617669732d63692e6f72672f646176652d736861776c65792f636f657263696f6e2e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://codecov.io/github/dave-shawley/coercion?branch=master\" rel=\"nofollow\"><img alt=\"[Test Coverage]\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/273a5b1a3b37a544554089ece445681bc23f1533/68747470733a2f2f636f6465636f762e696f2f6769746875622f646176652d736861776c65792f636f657263696f6e2f636f7665726167652e7376673f6272616e63683d6d6173746572\"></a></p>\n<p>This library provides functions that coerce datastructures into\nnormalized forms.  For example, converting an arbitrary <tt>dict</tt>\ninto a form that is suitable for passing to <tt>json.dumps</tt>.</p>\n<p>The <a href=\"http://www.tornadoweb.org/\" rel=\"nofollow\">tornado</a> framework has a function called <a href=\"http://www.tornadoweb.org/en/stable/escape.html#tornado.escape.recursive_unicode\" rel=\"nofollow\">recursive_unicode</a>\nin the <tt>tornado.escape</tt> module.  It is a very simple recursive\nwalk of datastructure that switches on type and transforms string\nvalues into unicode strings.  I use this in production software\nregularly and it works like a charm.  Or at least it did until my\nsoftware encountered a deeply nested dictionary and I received a\n<tt>RuntimeError: maximum recursion depth exceeded</tt> error in my\nservice log.  This is one of the exceptions that strikes fear into\nmost engineers when it rears it\u2019s head in production.</p>\n<p>That is the primary reason for this library existing.  It provides\nthe same simple string encoding function iteratively instead of\nrecursively.  At the same time, the need to coerce values into a\nnormalized string form is something that I\u2019ve had to do repeatedly\nso it might as well be plopped into a reusable library.</p>\n<div id=\"examples\">\n<h2>Examples</h2>\n<p>The following example shows one of the underlying reasons that this\nlibrary was created.  The commonly used msgpack implementation for\npython returns everything as byte strings which is problematic if\nyou want to dump it as JSON since it will raise a <tt>TypeError</tt> if\ndictionary keys are not strings.  (This is where <a href=\"http://www.tornadoweb.org/en/stable/escape.html#tornado.escape.recursive_unicode\" rel=\"nofollow\">recursive_unicode</a>\nwas so handy.)</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">json</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">coercion</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">msgpack</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bin_msg</span> <span class=\"o\">=</span> <span class=\"n\">msgpack</span><span class=\"o\">.</span><span class=\"n\">packb</span><span class=\"p\">({</span><span class=\"sa\">u</span><span class=\"s1\">'</span><span class=\"se\">\\u00DC</span><span class=\"s1\">nicode'</span><span class=\"p\">:</span> <span class=\"sa\">b</span><span class=\"s1\">'bytes'</span><span class=\"p\">,</span> <span class=\"sa\">b</span><span class=\"s1\">'bytes'</span><span class=\"p\">:</span> <span class=\"s1\">'str'</span><span class=\"p\">})</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">decoded</span> <span class=\"o\">=</span> <span class=\"n\">msgpack</span><span class=\"o\">.</span><span class=\"n\">unpackb</span><span class=\"p\">(</span><span class=\"n\">bin_msg</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">decoded</span>\n<span class=\"p\">{</span><span class=\"sa\">b</span><span class=\"s1\">'bytes'</span><span class=\"p\">:</span> <span class=\"sa\">b</span><span class=\"s1\">'str'</span><span class=\"p\">,</span> <span class=\"sa\">b</span><span class=\"s1\">'</span><span class=\"se\">\\xc3\\x9c</span><span class=\"s1\">nicode'</span><span class=\"p\">:</span> <span class=\"sa\">b</span><span class=\"s1\">'bytes'</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">decoded</span><span class=\"p\">)</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"&lt;stdin&gt;\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"/Users/daveshawley/opt/lib/python3.5/json/__init__.py\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">230</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">dumps</span>\n    <span class=\"k\">return</span> <span class=\"n\">_default_encoder</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"/Users/daveshawley/opt/lib/python3.5/json/encoder.py\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">199</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">encode</span>\n    <span class=\"n\">chunks</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">iterencode</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">,</span> <span class=\"n\">_one_shot</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"/Users/daveshawley/opt/lib/python3.5/json/encoder.py\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">257</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">iterencode</span>\n    <span class=\"k\">return</span> <span class=\"n\">_iterencode</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"ne\">TypeError</span><span class=\"p\">:</span> <span class=\"n\">keys</span> <span class=\"n\">must</span> <span class=\"n\">be</span> <span class=\"n\">a</span> <span class=\"n\">string</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">coercion</span><span class=\"o\">.</span><span class=\"n\">normalize_collection</span><span class=\"p\">(</span><span class=\"n\">decoded</span><span class=\"p\">))</span>\n<span class=\"s1\">'{\"bytes\": \"str\", \"</span><span class=\"se\">\\\\</span><span class=\"s1\">u00dcnicode\": \"bytes\"}'</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 1797793, "releases": {"0.0.0": [{"comment_text": "", "digests": {"md5": "0bb33256c1ce70f213178d327bc21fc5", "sha256": "b9a03324618f29a15d23cfa85fab1025e06653c61171cf63f3412bd097030595"}, "downloads": -1, "filename": "coercion-0.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0bb33256c1ce70f213178d327bc21fc5", "packagetype": "bdist_wheel", "python_version": "any", "requires_python": null, "size": 4092, "upload_time": "2015-10-31T16:22:05", "upload_time_iso_8601": "2015-10-31T16:22:05.743156Z", "url": "https://files.pythonhosted.org/packages/a1/71/c6fed642192b6fe58c93845e4dfb2599868ff9b2890afb085e2de4ee76fe/coercion-0.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0a35c7e511bf96d33df9989ebd62a188", "sha256": "4c3aa7d9fcad1f9f52b68ff0c116d1e92adb591136aea0d62f1827b383d1edab"}, "downloads": -1, "filename": "coercion-0.0.0.tar.gz", "has_sig": false, "md5_digest": "0a35c7e511bf96d33df9989ebd62a188", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3766, "upload_time": "2015-10-31T16:21:43", "upload_time_iso_8601": "2015-10-31T16:21:43.311679Z", "url": "https://files.pythonhosted.org/packages/25/04/cd491aa084c9a711b36e4b413060dc9dd5b264cebfb55f365a36f60e3fad/coercion-0.0.0.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "e6c9f1046a46c6c31084c439d7e7e840", "sha256": "0ede1ee36a6aa5f44333c1354968ef20031b4e513d4e33b180578c4d9d3c47bd"}, "downloads": -1, "filename": "coercion-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e6c9f1046a46c6c31084c439d7e7e840", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 6970, "upload_time": "2015-11-02T18:54:09", "upload_time_iso_8601": "2015-11-02T18:54:09.390597Z", "url": "https://files.pythonhosted.org/packages/04/1a/67ea039a9d19f2a3bb26c8dfd1f0a6786c1d11cef3bb4e5e542479352859/coercion-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "07510272def74390b77b12f7df0245cf", "sha256": "cd1c27a47b26d0458d86ebb7c1d85838a63e37ba1c019531f9265b290031fe2c"}, "downloads": -1, "filename": "coercion-1.0.0.tar.gz", "has_sig": false, "md5_digest": "07510272def74390b77b12f7df0245cf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7896, "upload_time": "2015-11-02T18:54:21", "upload_time_iso_8601": "2015-11-02T18:54:21.091820Z", "url": "https://files.pythonhosted.org/packages/7a/97/f1965afc2ae27074a05e5201236540364f53eff24c26d6ee04aa81d53b80/coercion-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e6c9f1046a46c6c31084c439d7e7e840", "sha256": "0ede1ee36a6aa5f44333c1354968ef20031b4e513d4e33b180578c4d9d3c47bd"}, "downloads": -1, "filename": "coercion-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e6c9f1046a46c6c31084c439d7e7e840", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 6970, "upload_time": "2015-11-02T18:54:09", "upload_time_iso_8601": "2015-11-02T18:54:09.390597Z", "url": "https://files.pythonhosted.org/packages/04/1a/67ea039a9d19f2a3bb26c8dfd1f0a6786c1d11cef3bb4e5e542479352859/coercion-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "07510272def74390b77b12f7df0245cf", "sha256": "cd1c27a47b26d0458d86ebb7c1d85838a63e37ba1c019531f9265b290031fe2c"}, "downloads": -1, "filename": "coercion-1.0.0.tar.gz", "has_sig": false, "md5_digest": "07510272def74390b77b12f7df0245cf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7896, "upload_time": "2015-11-02T18:54:21", "upload_time_iso_8601": "2015-11-02T18:54:21.091820Z", "url": "https://files.pythonhosted.org/packages/7a/97/f1965afc2ae27074a05e5201236540364f53eff24c26d6ee04aa81d53b80/coercion-1.0.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:18:12 2020"}