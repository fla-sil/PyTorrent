{"info": {"author": "Yiorgis Gozadinos", "author_email": "ggozad@jarn.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Framework :: Plone", "Intended Audience :: Developers", "Programming Language :: Python"], "description": "Introduction\n============\n\n``jarn.xmpp.collaboration`` defines a protocol to do real-time collaborative editing through XMPP and provides:\n\n* a generic overridable implementation of the server component.\n* a Plone-specific implementation (server component and javascript client).\n* adapters for basic Plone content types (Pages and News Items).\n\nIt is part of a suite of packages aiming to provide XMPP services to Plone. The other two packages are\n\n* `jarn.xmpp.twisted`_, provides XMPP-specific protocol implementation for twisted.\n* `jarn.xmpp.core`_ provides facilities for presence, messaging, chatting and microblogging.\n\nRequirements\n============\nPlease see ``jarn.xmpp.core`` for details on setting up your Plone site and XMPP server. If you are not using the recipe included in `jarn.xmpp.buildout` you will need to configure your ejabberd to allow connections from the collaboration component. For ``ejabberd`` this is done by including the following in your config file::\n\n    {{5347, {0,0,0,0} }, ejabberd_service, [\n      {access, all},\n      {shaper_rule, fast},\n      {ip, {127, 0, 0, 1}},\n      {hosts, [\"collaboration.localhost\"],\n       [{password, \"secret\"}]\n      }\n     ]},\n\n\nThe instance that is going to be running the xmpp component should include the ``component.zcml``. You can do this in your buildout::\n\n    zcml-additional =\n      <configure xmlns=\"http://namespaces.zope.org/zope\">\n          <include package=\"jarn.xmpp.twisted\" file=\"reactor.zcml\" />\n          <include package=\"jarn.xmpp.collaboration\" file=\"component.zcml\" />\n      </configure>\n\nFinally you will need to \"activate\" the product in the Plone control panel. After doing so, please edit the registry settings and in particular:\n\n* ``jarn.xmpp.collaborationJID`` is the Jabber id of the collaborative editing service component. Essentially if ``myserver`` is your XMPP domain ``collaboration.myserver`` is a good name. This should match the name you gave to ``ejabberd``, see above. Default is ``collaboration.localhost``.\n\n* ``jarn.xmpp.collaborationPassword`` is the password the component will use to connect to your xmpp server, see above. Default is ``secret``.\n\n* ``jarn.xmpp.collaborationPort`` is the port that your XMPP server allows components to connect to, see above. Default is ``5347``.\n\nUsage\n=====\n\nUsing ``jarn.xmpp.collaboration`` is easy once you have gotten over setting it up. There are no special views to use when you collaboratively edit content. If an adapter to *ICollaborativelyEditable* exists for your content then accessing its edit form will allow multiple users to edit simultaneously.\n\nOut of the box there exist adapters for archetypes as well as dexterity-based content types. For AT content types, fields that implement ``IStringField`` or ``ITextField`` will automatically get collaborative editing support. For Dexterity the fields that will be automatically included are those that provide ``ITextLine``, ``IText`` or ``IRichText`` regardless of the *behavior* by which they are defined. Note that the javascript client assumes that TinyMCE is used. Collaboration on rich text fields will not work with Kupu.\n\nProtocol specification.\n=========================\n\nInitialization\n--------------\nIn order to initiate a collaborative editing session, the party sends a ``presence`` stanza to the server component indicating on which node he wishes to work on. The party MUST specify the `node` attribute in the ``query`` element::\n\n    <presence from='foo@example.com/work' to='collaboration.example.com'>\n        <query xmlns='http://jarn.com/ns/collaborative-editing' node='collab-node'/>\n    </presence>\n\nUpon receipt a ``message`` stanza is sent to anyone else who might be editing the same node notifying them of the new participant::\n\n    <message from='collaboration.example.com' to='bar@example.com/home'>\n        <x xmlns='http://jarn.com/ns/collaborative-editing'>\n            <item action='user-joined' node='collab-node' user='foo@example.com/work'/>\n        </x>\n    </message>\n\nThe newly joined user also receives a similar notification about existing users ::\n\n    <message from='collaboration.example.com' to='foo@example.com/home'>\n        <x xmlns='http://jarn.com/ns/collaborative-editing'>\n            <item action='user-joined' node='collab-node' user='bar@example.com/work'/>\n        </x>\n    </message>\n\nTo complete the initialization the new party MUST request the current version of the node from the server::\n\n    <iq id='123' from='foo@example.com/work' to='collaboration.example.com' type='get'>\n        <shadowcopy xmlns='http://jarn.com/ns/collaborative-editing' node='collab-node'/>\n    </iq>\n\nTo which the server replies providing his current copy of the text::\n\n    <iq id='123' from='collaboration.example.com' to='foo@example.com/work'  type='result'>\n         <shadowcopy xmlns='http://jarn.com/ns/collaborative-editing' node='collab-node'>Hello world</shadowcopy>\n     </iq>\n\nIn case the node does not exist, or the user has no privileges granting him access, the server MUST reply with an error, for instance::\n\n    <iq id='123' from='collaboration.example.com' to='foo@example.com/work' type='error'>\n        <error xmlns='http://jarn.com/ns/collaborative-editing'>Unauthorized</error>\n    </iq>\n\n\nEditing cycle\n-------------\nWhen a party edits the text, it notifies the server by sending an ``iq`` stanza of type ``set``. The stanza contains one ``patch`` element which MUST specify the `node` they apply to, and in their body contain the patch created by the Diff-Match-Patch algorithm in text format. For instance if the text changed from \"`Hello world`\" to \"`Hello world, have a nice day!`\" the message would be::\n\n    <iq id='234' from='foo@example.com/work' to='collaboration.example.com' type='set'>\n        <patch xmlns='http://jarn.com/ns/collaborative-editing' node='collab-node' digest='b9e8241b3cc82c43af870641078ee03f'>\n            @@ -4,8 +4,26 @@\\n lo world\\n+, have a nice day!\\n\n        </patch>\n    </iq>\n\nIf the server succeeds to apply the patch to its shadow copy, it replies with a `success` result::\n\n    <iq id='234' from='collaboration.example.com' to='foo@example.com/work' type='result'>\n        <success xmlns='http://jarn.com/ns/collaborative-editing'/>\n    </iq>\n\nAdditionally the server MUST broadcast the patch to all other parties who are present on the node::\n\n    <iq id='345' from='collaboration.example.com' to='bar@example.com/home' type='set'>\n        <patch xmlns='http://jarn.com/ns/collaborative-editing' node='collab-node'>\n            @@ -4,8 +4,26 @@\\n lo world\\n+, have a nice day!\\n\n        </patch>\n    </iq>\n\nThe parties  MUST apply it to their text.\nIf applying the patch fails, the server (or client) MUST reply with an ``iq`` stanza of type `error`. For instance if a patch was sent to the server and for some reason it was not possible to apply it to the shadow copy, the server would reply::\n\n    <iq id='234' from='collaboration.example.com' to='foo@example.com/work' type='error'>\n        <error xmlns='http://jarn.com/ns/collaborative-editing'>\n            Patch @@ -4,8 +4,26 @@\\n lo world\\n+, have a nice day!\\n could not be applied.\n        </error>\n    </iq>\n\nIn that case the client SHOULD sync again the current copy by sending an ``iq`` stanza of type `get`requesting the shadow copy, see the `Initialization` section above.\n\nFinally, a ``patch`` element MAY have the ``digest`` attribute. In that case, the server SHOULD check the checksum and if there is a mismatch, reply with an error stanza if appropriate. Note that currently the checksum algorithm is not negotiated and is assumed to be MD5 hex digest.\n\nFocusing\n--------\nIn an environment where multiple nodes are edited in the same time (for instance in a context where the content has more than one collaboratively editable field) the client CAN send a notification specifying which particular node he is currently editing::\n\n    <message from='foo@example.com/work' to='collaboration.example.com'>\n        <x xmlns='http://jarn.com/ns/collaborative-editing'>\n            <item node='collab-node' action='focus' user='foo@example.com/work'/>\n        </x>\n    </message>\n\nThe server MUST propagate the message to all other users that are currently collaborating on the node::\n\n    <message from='collaboration.example.com' to='bar@example.com/home'>\n        <x xmlns='http://jarn.com/ns/collaborative-editing'>\n            <item node='collab-node' action='focus' user='foo@example.com/work'/>\n        </x>\n    </message>\n\nSaving\n------\nAt any point a party can request a save. This is done by sending a message whose `item` MUST indicate the node and its action must be set to `save`::\n\n    <message from='foo@example.com/work' to='collaboration.example.com'>\n        <x xmlns='http://jarn.com/ns/collaborative-editing'>\n            <item node='collab-node' action='save'></item>\n        </x>\n    </message>\n\nIt is up to the server component to enforce any security considerations on saving.\n\nTermination\n-----------\nThe session is terminated when the party sends an `unavailable` presence::\n\n    <presence from='foo@example.com/work' type='unavailable' />\n\nUpon receipt, the server notifies any party that might still be editing the node::\n\n    <message from='collaboration.example.com' to='bar@example.com/home'>\n        <x xmlns='http://jarn.com/ns/collaborative-editing'>\n            <item action='user-left' node='collab-node' user='foo@example.com/work'/>\n        </x>\n    </message>\n\nCredits\n=======\n\n* Most of this work was done using the 10% time available to `Jarn AS`_ employees for the development of open-source projects.\n* David Glick (davisagli) for dexterity support and general awesomeness.\n* ``jarn.xmpp.collaboration`` relies on the wonderful `Diff-Match-Patch`_ from Neil Fraser at Google. It is distributed under the Apache License 2.0.\n\n.. _Diff-Match-Patch: http://code.google.com/p/google-diff-match-patch\n.. _Jarn AS: http://jarn.com\n.. _jarn.xmpp.twisted: http://pypi.python.org/pypi/jarn.xmpp.twisted\n.. _jarn.xmpp.core: http://pypi.python.org/pypi/jarn.xmpp.core\n\n\n\nChangelog\n=========\n\n0.1b3 - 2011-11-26\n------------------\n\n- Fix checksum bug preventing the shadow text to be applied if an error ever\n  occured.\n  [ggozad]\n\n0.1b2 - 2011-10-01\n------------------\n\n- Perform checksum checks on every patch. Deal with potential errors due to\n  network lag.\n  [ggozad]\n\n- Use TinyMCE's raw instead of processed text. Improved reliability.\n  [ggozad]\n\n0.1b1 - 2011-09-18\n------------------\n\n- Major protocol update. Instead of sending message stanzas around, now iq\n  stanzas are used. This makes it possible to check for errors and synchronize\n  in certain edge cases. It also makes the protocol more in line with XMPP\n  conventions.\n  [ggozad]\n\n- Reorganized and cleaned js code. The client protocol implementation is now\n  separate from the plone-specific parts allowing code reuse and improving\n  readability.\n  [ggozad]\n\n- Notify user when others are joining/leaving the node.\n  [ggozad]\n\n0.1a4 - 2011-09-07\n------------------\n\n- Documentation updates.\n  [ggozad]\n\n- Fix js error when user has left collaborative editing.\n  [ggozad]\n\n0.1a3 - 2011-09-01\n------------------\n\n- Simplified configuration and fixed confusing typos in the registry\n  [ggozad]\n\n0.1a2 - 2011-06-06\n------------------\n\n- Configure the component/server password and connection port in p.a.registry.\n  [ggozad]\n\n- Dexterity content type support.\n  [davisagli, ggozad]\n\n- Generalized ATContentTypes support.\n  [ggozad]\n\n- Provide visual feedback when a user updates a node.\n  [ggozad]\n\n- JS cleanup.\n  [ggozad]\n\n- Test coverage.\n  [ggozad]\n\n0.1a1 2011-05-09\n----------------\n\n- Initial release\n  [ggozad]", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ggozad/jarn.xmpp.collaboration", "keywords": "", "license": "GPL", "maintainer": null, "maintainer_email": null, "name": "jarn.xmpp.collaboration", "package_url": "https://pypi.org/project/jarn.xmpp.collaboration/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/jarn.xmpp.collaboration/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/ggozad/jarn.xmpp.collaboration"}, "release_url": "https://pypi.org/project/jarn.xmpp.collaboration/0.1b3/", "requires_dist": null, "requires_python": null, "summary": "Collaborative editing for Plone", "version": "0.1b3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"introduction\">\n<h2>Introduction</h2>\n<p><tt>jarn.xmpp.collaboration</tt> defines a protocol to do real-time collaborative editing through XMPP and provides:</p>\n<ul>\n<li>a generic overridable implementation of the server component.</li>\n<li>a Plone-specific implementation (server component and javascript client).</li>\n<li>adapters for basic Plone content types (Pages and News Items).</li>\n</ul>\n<p>It is part of a suite of packages aiming to provide XMPP services to Plone. The other two packages are</p>\n<ul>\n<li><a href=\"http://pypi.python.org/pypi/jarn.xmpp.twisted\" rel=\"nofollow\">jarn.xmpp.twisted</a>, provides XMPP-specific protocol implementation for twisted.</li>\n<li><a href=\"http://pypi.python.org/pypi/jarn.xmpp.core\" rel=\"nofollow\">jarn.xmpp.core</a> provides facilities for presence, messaging, chatting and microblogging.</li>\n</ul>\n</div>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<p>Please see <tt>jarn.xmpp.core</tt> for details on setting up your Plone site and XMPP server. If you are not using the recipe included in <cite>jarn.xmpp.buildout</cite> you will need to configure your ejabberd to allow connections from the collaboration component. For <tt>ejabberd</tt> this is done by including the following in your config file:</p>\n<pre>{{5347, {0,0,0,0} }, ejabberd_service, [\n  {access, all},\n  {shaper_rule, fast},\n  {ip, {127, 0, 0, 1}},\n  {hosts, [\"collaboration.localhost\"],\n   [{password, \"secret\"}]\n  }\n ]},\n</pre>\n<p>The instance that is going to be running the xmpp component should include the <tt>component.zcml</tt>. You can do this in your buildout:</p>\n<pre>zcml-additional =\n  &lt;configure xmlns=\"http://namespaces.zope.org/zope\"&gt;\n      &lt;include package=\"jarn.xmpp.twisted\" file=\"reactor.zcml\" /&gt;\n      &lt;include package=\"jarn.xmpp.collaboration\" file=\"component.zcml\" /&gt;\n  &lt;/configure&gt;\n</pre>\n<p>Finally you will need to \u201cactivate\u201d the product in the Plone control panel. After doing so, please edit the registry settings and in particular:</p>\n<ul>\n<li><tt>jarn.xmpp.collaborationJID</tt> is the Jabber id of the collaborative editing service component. Essentially if <tt>myserver</tt> is your XMPP domain <tt>collaboration.myserver</tt> is a good name. This should match the name you gave to <tt>ejabberd</tt>, see above. Default is <tt>collaboration.localhost</tt>.</li>\n<li><tt>jarn.xmpp.collaborationPassword</tt> is the password the component will use to connect to your xmpp server, see above. Default is <tt>secret</tt>.</li>\n<li><tt>jarn.xmpp.collaborationPort</tt> is the port that your XMPP server allows components to connect to, see above. Default is <tt>5347</tt>.</li>\n</ul>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Using <tt>jarn.xmpp.collaboration</tt> is easy once you have gotten over setting it up. There are no special views to use when you collaboratively edit content. If an adapter to <em>ICollaborativelyEditable</em> exists for your content then accessing its edit form will allow multiple users to edit simultaneously.</p>\n<p>Out of the box there exist adapters for archetypes as well as dexterity-based content types. For AT content types, fields that implement <tt>IStringField</tt> or <tt>ITextField</tt> will automatically get collaborative editing support. For Dexterity the fields that will be automatically included are those that provide <tt>ITextLine</tt>, <tt>IText</tt> or <tt>IRichText</tt> regardless of the <em>behavior</em> by which they are defined. Note that the javascript client assumes that TinyMCE is used. Collaboration on rich text fields will not work with Kupu.</p>\n</div>\n<div id=\"protocol-specification\">\n<h2>Protocol specification.</h2>\n<div id=\"initialization\">\n<h3>Initialization</h3>\n<p>In order to initiate a collaborative editing session, the party sends a <tt>presence</tt> stanza to the server component indicating on which node he wishes to work on. The party MUST specify the <cite>node</cite> attribute in the <tt>query</tt> element:</p>\n<pre>&lt;presence from='foo@example.com/work' to='collaboration.example.com'&gt;\n    &lt;query xmlns='http://jarn.com/ns/collaborative-editing' node='collab-node'/&gt;\n&lt;/presence&gt;\n</pre>\n<p>Upon receipt a <tt>message</tt> stanza is sent to anyone else who might be editing the same node notifying them of the new participant:</p>\n<pre>&lt;message from='collaboration.example.com' to='bar@example.com/home'&gt;\n    &lt;x xmlns='http://jarn.com/ns/collaborative-editing'&gt;\n        &lt;item action='user-joined' node='collab-node' user='foo@example.com/work'/&gt;\n    &lt;/x&gt;\n&lt;/message&gt;\n</pre>\n<p>The newly joined user also receives a similar notification about existing users</p>\n<pre>&lt;message from='collaboration.example.com' to='foo@example.com/home'&gt;\n    &lt;x xmlns='http://jarn.com/ns/collaborative-editing'&gt;\n        &lt;item action='user-joined' node='collab-node' user='bar@example.com/work'/&gt;\n    &lt;/x&gt;\n&lt;/message&gt;\n</pre>\n<p>To complete the initialization the new party MUST request the current version of the node from the server:</p>\n<pre>&lt;iq id='123' from='foo@example.com/work' to='collaboration.example.com' type='get'&gt;\n    &lt;shadowcopy xmlns='http://jarn.com/ns/collaborative-editing' node='collab-node'/&gt;\n&lt;/iq&gt;\n</pre>\n<p>To which the server replies providing his current copy of the text:</p>\n<pre>&lt;iq id='123' from='collaboration.example.com' to='foo@example.com/work'  type='result'&gt;\n     &lt;shadowcopy xmlns='http://jarn.com/ns/collaborative-editing' node='collab-node'&gt;Hello world&lt;/shadowcopy&gt;\n &lt;/iq&gt;\n</pre>\n<p>In case the node does not exist, or the user has no privileges granting him access, the server MUST reply with an error, for instance:</p>\n<pre>&lt;iq id='123' from='collaboration.example.com' to='foo@example.com/work' type='error'&gt;\n    &lt;error xmlns='http://jarn.com/ns/collaborative-editing'&gt;Unauthorized&lt;/error&gt;\n&lt;/iq&gt;\n</pre>\n</div>\n<div id=\"editing-cycle\">\n<h3>Editing cycle</h3>\n<p>When a party edits the text, it notifies the server by sending an <tt>iq</tt> stanza of type <tt>set</tt>. The stanza contains one <tt>patch</tt> element which MUST specify the <cite>node</cite> they apply to, and in their body contain the patch created by the Diff-Match-Patch algorithm in text format. For instance if the text changed from \u201c<cite>Hello world</cite>\u201d to \u201c<cite>Hello world, have a nice day!</cite>\u201d the message would be:</p>\n<pre>&lt;iq id='234' from='foo@example.com/work' to='collaboration.example.com' type='set'&gt;\n    &lt;patch xmlns='http://jarn.com/ns/collaborative-editing' node='collab-node' digest='b9e8241b3cc82c43af870641078ee03f'&gt;\n        @@ -4,8 +4,26 @@\\n lo world\\n+, have a nice day!\\n\n    &lt;/patch&gt;\n&lt;/iq&gt;\n</pre>\n<p>If the server succeeds to apply the patch to its shadow copy, it replies with a <cite>success</cite> result:</p>\n<pre>&lt;iq id='234' from='collaboration.example.com' to='foo@example.com/work' type='result'&gt;\n    &lt;success xmlns='http://jarn.com/ns/collaborative-editing'/&gt;\n&lt;/iq&gt;\n</pre>\n<p>Additionally the server MUST broadcast the patch to all other parties who are present on the node:</p>\n<pre>&lt;iq id='345' from='collaboration.example.com' to='bar@example.com/home' type='set'&gt;\n    &lt;patch xmlns='http://jarn.com/ns/collaborative-editing' node='collab-node'&gt;\n        @@ -4,8 +4,26 @@\\n lo world\\n+, have a nice day!\\n\n    &lt;/patch&gt;\n&lt;/iq&gt;\n</pre>\n<p>The parties  MUST apply it to their text.\nIf applying the patch fails, the server (or client) MUST reply with an <tt>iq</tt> stanza of type <cite>error</cite>. For instance if a patch was sent to the server and for some reason it was not possible to apply it to the shadow copy, the server would reply:</p>\n<pre>&lt;iq id='234' from='collaboration.example.com' to='foo@example.com/work' type='error'&gt;\n    &lt;error xmlns='http://jarn.com/ns/collaborative-editing'&gt;\n        Patch @@ -4,8 +4,26 @@\\n lo world\\n+, have a nice day!\\n could not be applied.\n    &lt;/error&gt;\n&lt;/iq&gt;\n</pre>\n<p>In that case the client SHOULD sync again the current copy by sending an <tt>iq</tt> stanza of type <cite>get`requesting the shadow copy, see the `Initialization</cite> section above.</p>\n<p>Finally, a <tt>patch</tt> element MAY have the <tt>digest</tt> attribute. In that case, the server SHOULD check the checksum and if there is a mismatch, reply with an error stanza if appropriate. Note that currently the checksum algorithm is not negotiated and is assumed to be MD5 hex digest.</p>\n</div>\n<div id=\"focusing\">\n<h3>Focusing</h3>\n<p>In an environment where multiple nodes are edited in the same time (for instance in a context where the content has more than one collaboratively editable field) the client CAN send a notification specifying which particular node he is currently editing:</p>\n<pre>&lt;message from='foo@example.com/work' to='collaboration.example.com'&gt;\n    &lt;x xmlns='http://jarn.com/ns/collaborative-editing'&gt;\n        &lt;item node='collab-node' action='focus' user='foo@example.com/work'/&gt;\n    &lt;/x&gt;\n&lt;/message&gt;\n</pre>\n<p>The server MUST propagate the message to all other users that are currently collaborating on the node:</p>\n<pre>&lt;message from='collaboration.example.com' to='bar@example.com/home'&gt;\n    &lt;x xmlns='http://jarn.com/ns/collaborative-editing'&gt;\n        &lt;item node='collab-node' action='focus' user='foo@example.com/work'/&gt;\n    &lt;/x&gt;\n&lt;/message&gt;\n</pre>\n</div>\n<div id=\"saving\">\n<h3>Saving</h3>\n<p>At any point a party can request a save. This is done by sending a message whose <cite>item</cite> MUST indicate the node and its action must be set to <cite>save</cite>:</p>\n<pre>&lt;message from='foo@example.com/work' to='collaboration.example.com'&gt;\n    &lt;x xmlns='http://jarn.com/ns/collaborative-editing'&gt;\n        &lt;item node='collab-node' action='save'&gt;&lt;/item&gt;\n    &lt;/x&gt;\n&lt;/message&gt;\n</pre>\n<p>It is up to the server component to enforce any security considerations on saving.</p>\n</div>\n<div id=\"termination\">\n<h3>Termination</h3>\n<p>The session is terminated when the party sends an <cite>unavailable</cite> presence:</p>\n<pre>&lt;presence from='foo@example.com/work' type='unavailable' /&gt;\n</pre>\n<p>Upon receipt, the server notifies any party that might still be editing the node:</p>\n<pre>&lt;message from='collaboration.example.com' to='bar@example.com/home'&gt;\n    &lt;x xmlns='http://jarn.com/ns/collaborative-editing'&gt;\n        &lt;item action='user-left' node='collab-node' user='foo@example.com/work'/&gt;\n    &lt;/x&gt;\n&lt;/message&gt;\n</pre>\n</div>\n</div>\n<div id=\"credits\">\n<h2>Credits</h2>\n<ul>\n<li>Most of this work was done using the 10% time available to <a href=\"http://jarn.com\" rel=\"nofollow\">Jarn AS</a> employees for the development of open-source projects.</li>\n<li>David Glick (davisagli) for dexterity support and general awesomeness.</li>\n<li><tt>jarn.xmpp.collaboration</tt> relies on the wonderful <a href=\"http://code.google.com/p/google-diff-match-patch\" rel=\"nofollow\">Diff-Match-Patch</a> from Neil Fraser at Google. It is distributed under the Apache License 2.0.</li>\n</ul>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<div id=\"b3-2011-11-26\">\n<h3>0.1b3 - 2011-11-26</h3>\n<ul>\n<li>Fix checksum bug preventing the shadow text to be applied if an error ever\noccured.\n[ggozad]</li>\n</ul>\n</div>\n<div id=\"b2-2011-10-01\">\n<h3>0.1b2 - 2011-10-01</h3>\n<ul>\n<li>Perform checksum checks on every patch. Deal with potential errors due to\nnetwork lag.\n[ggozad]</li>\n<li>Use TinyMCE\u2019s raw instead of processed text. Improved reliability.\n[ggozad]</li>\n</ul>\n</div>\n<div id=\"b1-2011-09-18\">\n<h3>0.1b1 - 2011-09-18</h3>\n<ul>\n<li>Major protocol update. Instead of sending message stanzas around, now iq\nstanzas are used. This makes it possible to check for errors and synchronize\nin certain edge cases. It also makes the protocol more in line with XMPP\nconventions.\n[ggozad]</li>\n<li>Reorganized and cleaned js code. The client protocol implementation is now\nseparate from the plone-specific parts allowing code reuse and improving\nreadability.\n[ggozad]</li>\n<li>Notify user when others are joining/leaving the node.\n[ggozad]</li>\n</ul>\n</div>\n<div id=\"a4-2011-09-07\">\n<h3>0.1a4 - 2011-09-07</h3>\n<ul>\n<li>Documentation updates.\n[ggozad]</li>\n<li>Fix js error when user has left collaborative editing.\n[ggozad]</li>\n</ul>\n</div>\n<div id=\"a3-2011-09-01\">\n<h3>0.1a3 - 2011-09-01</h3>\n<ul>\n<li>Simplified configuration and fixed confusing typos in the registry\n[ggozad]</li>\n</ul>\n</div>\n<div id=\"a2-2011-06-06\">\n<h3>0.1a2 - 2011-06-06</h3>\n<ul>\n<li>Configure the component/server password and connection port in p.a.registry.\n[ggozad]</li>\n<li>Dexterity content type support.\n[davisagli, ggozad]</li>\n<li>Generalized ATContentTypes support.\n[ggozad]</li>\n<li>Provide visual feedback when a user updates a node.\n[ggozad]</li>\n<li>JS cleanup.\n[ggozad]</li>\n<li>Test coverage.\n[ggozad]</li>\n</ul>\n</div>\n<div id=\"a1-2011-05-09\">\n<h3>0.1a1 2011-05-09</h3>\n<ul>\n<li>Initial release\n[ggozad]</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 793577, "releases": {"0.1a1": [{"comment_text": "", "digests": {"md5": "09de6f5969b76c7d345f02e6a069ad6a", "sha256": "7fb2798583b1b80b0fcaf59c2e073ca37283944bd7defa6f833b547b7128808a"}, "downloads": -1, "filename": "jarn.xmpp.collaboration-0.1a1.zip", "has_sig": false, "md5_digest": "09de6f5969b76c7d345f02e6a069ad6a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 64517, "upload_time": "2011-05-09T15:20:02", "upload_time_iso_8601": "2011-05-09T15:20:02.001840Z", "url": "https://files.pythonhosted.org/packages/12/5b/c0d5441a3eda1db8ba511dabc4a043f3a97522768b6156ba8a734dc3949e/jarn.xmpp.collaboration-0.1a1.zip", "yanked": false}], "0.1a2": [{"comment_text": "", "digests": {"md5": "c8a20c3ec29ba946d01d3a0938e94e26", "sha256": "3bdb5e89155a982dd2612238e00f946f1b4fd995d4e663d7f4fa730d2c078880"}, "downloads": -1, "filename": "jarn.xmpp.collaboration-0.1a2.zip", "has_sig": false, "md5_digest": "c8a20c3ec29ba946d01d3a0938e94e26", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 70608, "upload_time": "2011-06-06T22:56:08", "upload_time_iso_8601": "2011-06-06T22:56:08.640949Z", "url": "https://files.pythonhosted.org/packages/06/5c/a57afe43c1a80ae0bf57336531b89f4a43e206a5c5ffabcffb921b3f3184/jarn.xmpp.collaboration-0.1a2.zip", "yanked": false}], "0.1a3": [{"comment_text": "", "digests": {"md5": "383e6cb97840c7bbdd1f6670803c07e4", "sha256": "91a9b0baa0f69341a1b5a484eeaf4a0297b3f03a1039072bda28204c21bbfc6a"}, "downloads": -1, "filename": "jarn.xmpp.collaboration-0.1a3.zip", "has_sig": false, "md5_digest": "383e6cb97840c7bbdd1f6670803c07e4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 70693, "upload_time": "2011-09-01T17:28:14", "upload_time_iso_8601": "2011-09-01T17:28:14.912224Z", "url": "https://files.pythonhosted.org/packages/89/68/535b6a9691f14f73c7a5a8519a92ba4e60dab79e4bb006f9d9f3b0ce47a4/jarn.xmpp.collaboration-0.1a3.zip", "yanked": false}], "0.1a4": [{"comment_text": "", "digests": {"md5": "5314493d20820e646e159073271629db", "sha256": "f76e96469c9b96c62cae153aae4c5ff25821dd87623a59ef2a6db6477917fa53"}, "downloads": -1, "filename": "jarn.xmpp.collaboration-0.1a4.zip", "has_sig": false, "md5_digest": "5314493d20820e646e159073271629db", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 71542, "upload_time": "2011-09-07T13:22:07", "upload_time_iso_8601": "2011-09-07T13:22:07.481808Z", "url": "https://files.pythonhosted.org/packages/9f/28/f8698e50db78546e5659aebbd660149f4b6a27386ed2eb14325d58d3514f/jarn.xmpp.collaboration-0.1a4.zip", "yanked": false}], "0.1b1": [{"comment_text": "", "digests": {"md5": "40b04eb366e7c8708cab8e56e48ab4ac", "sha256": "87e0d77b8f6a9c949cec7a41ebe09d2a9ca58f485d14b68076f79a3a189f79d9"}, "downloads": -1, "filename": "jarn.xmpp.collaboration-0.1b1.zip", "has_sig": false, "md5_digest": "40b04eb366e7c8708cab8e56e48ab4ac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 75586, "upload_time": "2011-09-18T12:59:53", "upload_time_iso_8601": "2011-09-18T12:59:53.705497Z", "url": "https://files.pythonhosted.org/packages/a4/54/ca8b95962e6376f0998b37fa5379aaa6239bec47255d954477fa36cc9de4/jarn.xmpp.collaboration-0.1b1.zip", "yanked": false}], "0.1b2": [{"comment_text": "", "digests": {"md5": "5b4825df18d30499d670263f51bced39", "sha256": "b093e40bde40da70ee9d41899f4dcabc961378ac13bcba0cbec8758566d5584d"}, "downloads": -1, "filename": "jarn.xmpp.collaboration-0.1b2.zip", "has_sig": false, "md5_digest": "5b4825df18d30499d670263f51bced39", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 76893, "upload_time": "2011-10-01T18:51:39", "upload_time_iso_8601": "2011-10-01T18:51:39.597966Z", "url": "https://files.pythonhosted.org/packages/1d/1b/866c4719c49ad1ed351d2ac5e2bb9936bbe34b8ab221026f63dd133a9f3a/jarn.xmpp.collaboration-0.1b2.zip", "yanked": false}], "0.1b3": [{"comment_text": "", "digests": {"md5": "dfd6b02fed4f10bbe86e47850cbd17a6", "sha256": "6468dbae569c3af15216fed72ad4f77d7a846807f60e43c28c8486582389b5cb"}, "downloads": -1, "filename": "jarn.xmpp.collaboration-0.1b3.zip", "has_sig": false, "md5_digest": "dfd6b02fed4f10bbe86e47850cbd17a6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 77096, "upload_time": "2011-11-26T14:27:54", "upload_time_iso_8601": "2011-11-26T14:27:54.366075Z", "url": "https://files.pythonhosted.org/packages/10/4e/d565081dc4982e3324c44d755951171d4a3a12c8a0d4998aa9e0b402ccd4/jarn.xmpp.collaboration-0.1b3.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "dfd6b02fed4f10bbe86e47850cbd17a6", "sha256": "6468dbae569c3af15216fed72ad4f77d7a846807f60e43c28c8486582389b5cb"}, "downloads": -1, "filename": "jarn.xmpp.collaboration-0.1b3.zip", "has_sig": false, "md5_digest": "dfd6b02fed4f10bbe86e47850cbd17a6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 77096, "upload_time": "2011-11-26T14:27:54", "upload_time_iso_8601": "2011-11-26T14:27:54.366075Z", "url": "https://files.pythonhosted.org/packages/10/4e/d565081dc4982e3324c44d755951171d4a3a12c8a0d4998aa9e0b402ccd4/jarn.xmpp.collaboration-0.1b3.zip", "yanked": false}], "timestamp": "Fri May  8 00:53:07 2020"}