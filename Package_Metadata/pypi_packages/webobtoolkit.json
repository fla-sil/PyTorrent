{"info": {"author": "Tom Willis", "author_email": "tom.willis@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Intended Audience :: Developers", "License :: Public Domain", "Programming Language :: Python", "Programming Language :: Python :: 3"], "description": ".. WebOb Toolkit documentation master file, created by\n   sphinx-quickstart on Sat Mar  8 09:00:00 2014.\n   You can adapt this file completely to your liking, but it should at least\n   contain the root `toctree` directive.\n\nWebOb Toolkit: Requests for Aliens!\n===================================\n\nWebOb Toolkit is a tool kit for building HTTP_ clients using WebOb_\nrequest and response objects and `wsgi middleware`_.\n\nYou may already be familiar with Webob_ request and response objects\nif you have experience with a web framework that uses them such as\npyramid_ or WebTest_ .\n\n\nUsage\n-----\n\nHere are some examples of how WebOb Toolkit can be used.\n\n\nA Very Simple HTTP Client\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf you didn't know, WebOb's Request object grew a \"get_response_\" method for\nsending an http request to either a wsgi application, or a url and\nreturning the response. ::\n\n  >>> from webob import Request\n  >>> str(Request.blank(\"https://google.com\").get_response())\n  '301 Moved Permanently\\nLocation: https://www.google.com/\\nContent-Type: text/html; charset=UTF-8\\nDate: Sat, 08 Mar 2014 14:58:59 GMT\\nExpires: Mon, 07 Apr 2014 14:58:59 GMT\\nCache-Control: public, max-age=2592000\\nServer: gws\\nContent-Length: 220\\nX-XSS-Protection: 1; mode=block\\nX-Frame-Options: SAMEORIGIN\\nAlternate-Protocol: 443:quic\\n\\n<HTML><HEAD><meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8\">\\n<TITLE>301 Moved</TITLE></HEAD><BODY>\\n<H1>301 Moved</H1>\\nThe document has moved\\n<A HREF=\"https://www.google.com/\">here</A>.\\r\\n</BODY></HTML>\\r\\n'\n  >>> \n\n\nThat is a pretty neat trick, but as http clients go, typically you\nneed other functionality like handling `http compression`_ for example\nor `handling cookies`_. \n\nWebOb Toolkit provides this additional functionality as `wsgi\nmiddleware`_ which allows you to compose your own solutions in much\nthe same way as you compose wsgi applications to be used as HTTP_\nServers.\n\nHandling Compression\n~~~~~~~~~~~~~~~~~~~~\n\nAccording to the `http compression`_ article on wikipedia, an http\nclient can request a compressed response by including an\n\"Accept-Encoding\" header with the request. In WebOb_ you would\ndo... ::\n\n  >>> from webob import Request\n  >>> Request.blank(\"https://github.com\", headers={\"Accept-Encoding\": \"gzip, deflate\"}).get_response().headers.get(\"Content-Encoding\", \"Content was not encoded\")\n  'gzip'\n  >>> \n\nAs you can see, we requested gzipped content from github, and it\nresponded nicely. However, if we were to do anything with the body of\nthe response we would have to uncompress it first. So, it seems that\nthe rules for compression is to a header with each request and\nuncompress the body of each response if the response includes a\n\"Content-Encoding\" header.\n\n\nThe next example, uses webobtoolkit's decode_filter to handle\ncompressed responses. ::\n\n  >>> from webob import Request\n  >>> from webob.client import send_request_app as app\n  >>> from webobtoolkit.filters import decode_filter\n  >>> app_gzip = decode_filter(app)\n  >>> Request.blank(\"https://github.com\", headers={\"Accept-Encoding\": \"gzip\"}).get_response(app).body[:100]\n  '\\x1f\\x8b\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\xdd[\\xdbr\\xe4\\xc6\\x91}\\xf7W\\x94\\x9b\\x1b\\xa3\\xdd0\\xd1\\xf7\\x1b9M:\\xe6B\\xd9\\xb3\\xb6%\\xda\\x1cY\\x92\\x1d\\x0eF5Ph`\\x08\\xa0 \\\\H\\xf6\\xfc\\x98\\xdf\\xf7\\xcb|\\xb2\\xaa\\x00\\x14\\xd0M69Kk\\xbdV\\x84\\xa6\\x9b@]\\xb32O\\x9e\\xcc\\xac^\\xfd\\xf2\\xfd\\xb7\\xef>\\xfexy\\xc1\\x82\"\\x8e\\xce\\x7f'\n  >>> Request.blank(\"https://github.com\", headers={\"Accept-Encoding\": \"gzip\"}).get_response(app_gzip).body[:100]\n  '<!DOCTYPE html>\\n<html>\\n  <head prefix=\"og: http://ogp.me/ns# fb: http://ogp.me/ns/fb# object: http:/'\n  >>> \n\n\n\nFrom the above example you will notice a couple of differences from\nprevious examples. Firstly we are importing WebOb's send_request_app_\nand some `wsgi middleware`_ from webobtoolkit for handling compressed\nresponses. We wrap webob's app with the decode_filter to create an app\nthat will decompress any response we may encounter.\n\nThe first call to github is through webobs app. And as you can see,\nthe response is compressed just like we asked. The second call is\nthrough the new app we created by wrapping webob's app with\nwebobtoolkits decode_filter, and as you can see the response has been\ndecompressed.\n\nThe name \"filter\" is being used here to differentiate between `wsgi\nmiddleware`_ which is usually used in the context of servers and `wsgi\nmiddleware`_ that is intended for use with clients. Filters and\nmiddleware are identical in regards to how they are implemented.\n\nHere is how the decode_filter is implemented. As you can see, it\ndoesn't take much to write a filter.\n\n.. literalinclude:: ../../../webobtoolkit/webobtoolkit/filters.py\n   :pyobject: decode_filter\n\n\nA More Robust HTTP Client\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nrequests_ is a good example of a more useful http client. According to\nthe docs it includes a lot of useful things that one would want for in\nan http client. Some of the things it includes are.\n\n* handling compression\n* handling cookies\n* handling redirects\n* guessing, handling charset decoding\n* connection pooling\n* ssl verification\n* form posts\n* file uploads\n\nAnd probably much more. \n\nA lot of this functionality can be written on top of webob and a\nseries of filters. We've already seen how one might handle\ncompression. WebOb toolkit provides filters for handling cookies,\nredirects and handling unspecified charsets. ::\n\n  >>> from webob import Request\n  >>> from webob.client import send_request_app\n  >>> from webobtoolkit import filters\n  >>> requests_app = filters.auto_redirect_filter(filters.cookie_filter(filters.decode_filter(filters.charset_filter(send_request_app))))\n  >>> Request.blank(\"https://google.com\").get_response(requests_app)\n  >>> str(Request.blank(\"https://google.com\").get_response(requests_app))[:500]\n  '200 OK\\nDate: Sat, 08 Mar 2014 17:35:40 GMT\\nExpires: -1\\nCache-Control: private, max-age=0\\nContent-Type: text/html; charset=ISO-8859-1\\nServer: gws\\nX-XSS-Protection: 1; mode=block\\nX-Frame-Options: SAMEORIGIN\\n\\n<!doctype html><html itemscope=\"\" itemtype=\"http://schema.org/WebPage\"><head><meta content=\"Search the world\\'s information, including webpages, images, videos and more. Google has many special features to help you find exactly what you\\'re looking for.\" name=\"description\"><meta content=\"noodp\" '\n\n\nWe construct requests_app out of a number of filters that are for handling requests and responses.\n\n* if a charset is not specified on the response(which sometimes\n  happens), a safe default is chosen in order to reduce the chances\n  for decoding errors\n\n* the client advertises support for gzip encoding and decompress the response if necessary\n* cookies will be persisted for each response and sent for each request\n* if a redirect is encountered follow it automatically.\n* form posts are handled by webob already, though some might prefer a better syntax.\n\n\nTodo\n~~~~\n* for connection pooling, urllib3 provides an implementation that could be easily used to construct an alternate send_request_app (see: webob.client.SendRequest)\n* ssl verification is also provided by urllib3\n\n\n.. _webob: http://webob.org\n.. _wsgi: http://wsgi.org\n.. _http: http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol\n.. _pyramid: http://docs.pylonsproject.org/en/latest/\n.. _webtest: http://webtest.readthedocs.org/en/latest/\n.. _get_response: http://docs.webob.org/en/latest/modules/webob.html#webob.request.BaseRequest.get_response\n.. _`http compression`: http://en.wikipedia.org/wiki/HTTP_compression\n.. _`handling cookies`: http://en.wikipedia.org/wiki/HTTP_cookie\n.. _`wsgi middleware`: http://be.groovie.org/2005/10/07/wsgi_and_wsgi_middleware_is_easy.html\n.. _send_request_app: http://docs.webob.org/en/latest/modules/client.html#webob.client.send_request_app\n.. _requests: http://docs.python-requests.org/en/latest/\n\n\n================\n Change History\n================\n\n0.2.4\n=====\n\n  - merge pull request to address issue  #14 https://github.com/twillis/webobtoolkit/issues/14\n\n\n0.2.3\n-----\n\n  - python 3 compatible\n  - rewrite docs\n  - make it easier to run tests with py.test via python setup.py test\n\n0.2.2\n=====\n\n  - merge pull request to address issue #8 https://github.com/twillis/webobtoolkit/issues/8\n\n0.2.1\n=====\n\n\n  - check for content_type before attempting to set charset because\n    some webservers behave badly\n\n0.2\n===\n\n   - documentation updates\n   - file uploads syntax sugar\n   - changed client to not rely on a global pipeline app\n\n\n0.1.3.3\n=======\n\n   - breakout stringify dict method as it may be useful\n\n0.1.3.2\n=======\n\n   - client handles multidict to querystring better\n\n0.1.3.1\n=======\n\n   - option for enabling auto redirect in test client\n\n\n0.1.3\n=====\n\n   - added sugar for the HTTP OPTIONS method\n\n\n0.1.2\n=====\n\n   - added preconfigured test client that is similar to webtest\n\n0.1.1\n=====\n\n   - added file upload support\n   - changed handling of query_string to look at the url if it is not\n     passed in as a separate param.\n\n\n0.1\n===\n\ninitial release because I need this in my day job\n\n0.0\n===\n\nfirst pass at a client, and first pass at docs.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/twillis/webobtoolkit", "keywords": "webob HTTP client", "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "webobtoolkit", "package_url": "https://pypi.org/project/webobtoolkit/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/webobtoolkit/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/twillis/webobtoolkit"}, "release_url": "https://pypi.org/project/webobtoolkit/0.2.4/", "requires_dist": null, "requires_python": null, "summary": "UNKNOWN", "version": "0.2.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            .. WebOb Toolkit documentation master file, created by<br>   sphinx-quickstart on Sat Mar  8 09:00:00 2014.<br>   You can adapt this file completely to your liking, but it should at least<br>   contain the root `toctree` directive.<br><br>WebOb Toolkit: Requests for Aliens!<br>===================================<br><br>WebOb Toolkit is a tool kit for building HTTP_ clients using WebOb_<br>request and response objects and `wsgi middleware`_.<br><br>You may already be familiar with Webob_ request and response objects<br>if you have experience with a web framework that uses them such as<br>pyramid_ or WebTest_ .<br><br><br>Usage<br>-----<br><br>Here are some examples of how WebOb Toolkit can be used.<br><br><br>A Very Simple HTTP Client<br>~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>If you didn't know, WebOb's Request object grew a \"get_response_\" method for<br>sending an http request to either a wsgi application, or a url and<br>returning the response. ::<br><br>  &gt;&gt;&gt; from webob import Request<br>  &gt;&gt;&gt; str(Request.blank(\"https://google.com\").get_response())<br>  '301 Moved Permanently\\nLocation: https://www.google.com/\\nContent-Type: text/html; charset=UTF-8\\nDate: Sat, 08 Mar 2014 14:58:59 GMT\\nExpires: Mon, 07 Apr 2014 14:58:59 GMT\\nCache-Control: public, max-age=2592000\\nServer: gws\\nContent-Length: 220\\nX-XSS-Protection: 1; mode=block\\nX-Frame-Options: SAMEORIGIN\\nAlternate-Protocol: 443:quic\\n\\n&lt;HTML&gt;&lt;HEAD&gt;&lt;meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8\"&gt;\\n&lt;TITLE&gt;301 Moved&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;\\n&lt;H1&gt;301 Moved&lt;/H1&gt;\\nThe document has moved\\n&lt;A HREF=\"https://www.google.com/\"&gt;here&lt;/A&gt;.\\r\\n&lt;/BODY&gt;&lt;/HTML&gt;\\r\\n'<br>  &gt;&gt;&gt; <br><br><br>That is a pretty neat trick, but as http clients go, typically you<br>need other functionality like handling `http compression`_ for example<br>or `handling cookies`_. <br><br>WebOb Toolkit provides this additional functionality as `wsgi<br>middleware`_ which allows you to compose your own solutions in much<br>the same way as you compose wsgi applications to be used as HTTP_<br>Servers.<br><br>Handling Compression<br>~~~~~~~~~~~~~~~~~~~~<br><br>According to the `http compression`_ article on wikipedia, an http<br>client can request a compressed response by including an<br>\"Accept-Encoding\" header with the request. In WebOb_ you would<br>do... ::<br><br>  &gt;&gt;&gt; from webob import Request<br>  &gt;&gt;&gt; Request.blank(\"https://github.com\", headers={\"Accept-Encoding\": \"gzip, deflate\"}).get_response().headers.get(\"Content-Encoding\", \"Content was not encoded\")<br>  'gzip'<br>  &gt;&gt;&gt; <br><br>As you can see, we requested gzipped content from github, and it<br>responded nicely. However, if we were to do anything with the body of<br>the response we would have to uncompress it first. So, it seems that<br>the rules for compression is to a header with each request and<br>uncompress the body of each response if the response includes a<br>\"Content-Encoding\" header.<br><br><br>The next example, uses webobtoolkit's decode_filter to handle<br>compressed responses. ::<br><br>  &gt;&gt;&gt; from webob import Request<br>  &gt;&gt;&gt; from webob.client import send_request_app as app<br>  &gt;&gt;&gt; from webobtoolkit.filters import decode_filter<br>  &gt;&gt;&gt; app_gzip = decode_filter(app)<br>  &gt;&gt;&gt; Request.blank(\"https://github.com\", headers={\"Accept-Encoding\": \"gzip\"}).get_response(app).body[:100]<br>  '\\x1f\\x8b\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\xdd[\\xdbr\\xe4\\xc6\\x91}\\xf7W\\x94\\x9b\\x1b\\xa3\\xdd0\\xd1\\xf7\\x1b9M:\\xe6B\\xd9\\xb3\\xb6%\\xda\\x1cY\\x92\\x1d\\x0eF5Ph`\\x08\\xa0 \\\\H\\xf6\\xfc\\x98\\xdf\\xf7\\xcb|\\xb2\\xaa\\x00\\x14\\xd0M69Kk\\xbdV\\x84\\xa6\\x9b@]\\xb32O\\x9e\\xcc\\xac^\\xfd\\xf2\\xfd\\xb7\\xef&gt;\\xfexy\\xc1\\x82\"\\x8e\\xce\\x7f'<br>  &gt;&gt;&gt; Request.blank(\"https://github.com\", headers={\"Accept-Encoding\": \"gzip\"}).get_response(app_gzip).body[:100]<br>  '&lt;!DOCTYPE html&gt;\\n&lt;html&gt;\\n  &lt;head prefix=\"og: http://ogp.me/ns# fb: http://ogp.me/ns/fb# object: http:/'<br>  &gt;&gt;&gt; <br><br><br><br>From the above example you will notice a couple of differences from<br>previous examples. Firstly we are importing WebOb's send_request_app_<br>and some `wsgi middleware`_ from webobtoolkit for handling compressed<br>responses. We wrap webob's app with the decode_filter to create an app<br>that will decompress any response we may encounter.<br><br>The first call to github is through webobs app. And as you can see,<br>the response is compressed just like we asked. The second call is<br>through the new app we created by wrapping webob's app with<br>webobtoolkits decode_filter, and as you can see the response has been<br>decompressed.<br><br>The name \"filter\" is being used here to differentiate between `wsgi<br>middleware`_ which is usually used in the context of servers and `wsgi<br>middleware`_ that is intended for use with clients. Filters and<br>middleware are identical in regards to how they are implemented.<br><br>Here is how the decode_filter is implemented. As you can see, it<br>doesn't take much to write a filter.<br><br>.. literalinclude:: ../../../webobtoolkit/webobtoolkit/filters.py<br>   :pyobject: decode_filter<br><br><br>A More Robust HTTP Client<br>~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>requests_ is a good example of a more useful http client. According to<br>the docs it includes a lot of useful things that one would want for in<br>an http client. Some of the things it includes are.<br><br>* handling compression<br>* handling cookies<br>* handling redirects<br>* guessing, handling charset decoding<br>* connection pooling<br>* ssl verification<br>* form posts<br>* file uploads<br><br>And probably much more. <br><br>A lot of this functionality can be written on top of webob and a<br>series of filters. We've already seen how one might handle<br>compression. WebOb toolkit provides filters for handling cookies,<br>redirects and handling unspecified charsets. ::<br><br>  &gt;&gt;&gt; from webob import Request<br>  &gt;&gt;&gt; from webob.client import send_request_app<br>  &gt;&gt;&gt; from webobtoolkit import filters<br>  &gt;&gt;&gt; requests_app = filters.auto_redirect_filter(filters.cookie_filter(filters.decode_filter(filters.charset_filter(send_request_app))))<br>  &gt;&gt;&gt; Request.blank(\"https://google.com\").get_response(requests_app)<br>  &gt;&gt;&gt; str(Request.blank(\"https://google.com\").get_response(requests_app))[:500]<br>  '200 OK\\nDate: Sat, 08 Mar 2014 17:35:40 GMT\\nExpires: -1\\nCache-Control: private, max-age=0\\nContent-Type: text/html; charset=ISO-8859-1\\nServer: gws\\nX-XSS-Protection: 1; mode=block\\nX-Frame-Options: SAMEORIGIN\\n\\n&lt;!doctype html&gt;&lt;html itemscope=\"\" itemtype=\"http://schema.org/WebPage\"&gt;&lt;head&gt;&lt;meta content=\"Search the world\\'s information, including webpages, images, videos and more. Google has many special features to help you find exactly what you\\'re looking for.\" name=\"description\"&gt;&lt;meta content=\"noodp\" '<br><br><br>We construct requests_app out of a number of filters that are for handling requests and responses.<br><br>* if a charset is not specified on the response(which sometimes<br>  happens), a safe default is chosen in order to reduce the chances<br>  for decoding errors<br><br>* the client advertises support for gzip encoding and decompress the response if necessary<br>* cookies will be persisted for each response and sent for each request<br>* if a redirect is encountered follow it automatically.<br>* form posts are handled by webob already, though some might prefer a better syntax.<br><br><br>Todo<br>~~~~<br>* for connection pooling, urllib3 provides an implementation that could be easily used to construct an alternate send_request_app (see: webob.client.SendRequest)<br>* ssl verification is also provided by urllib3<br><br><br>.. _webob: http://webob.org<br>.. _wsgi: http://wsgi.org<br>.. _http: http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol<br>.. _pyramid: http://docs.pylonsproject.org/en/latest/<br>.. _webtest: http://webtest.readthedocs.org/en/latest/<br>.. _get_response: http://docs.webob.org/en/latest/modules/webob.html#webob.request.BaseRequest.get_response<br>.. _`http compression`: http://en.wikipedia.org/wiki/HTTP_compression<br>.. _`handling cookies`: http://en.wikipedia.org/wiki/HTTP_cookie<br>.. _`wsgi middleware`: http://be.groovie.org/2005/10/07/wsgi_and_wsgi_middleware_is_easy.html<br>.. _send_request_app: http://docs.webob.org/en/latest/modules/client.html#webob.client.send_request_app<br>.. _requests: http://docs.python-requests.org/en/latest/<br><br><br>================<br> Change History<br>================<br><br>0.2.4<br>=====<br><br>  - merge pull request to address issue  #14 https://github.com/twillis/webobtoolkit/issues/14<br><br><br>0.2.3<br>-----<br><br>  - python 3 compatible<br>  - rewrite docs<br>  - make it easier to run tests with py.test via python setup.py test<br><br>0.2.2<br>=====<br><br>  - merge pull request to address issue #8 https://github.com/twillis/webobtoolkit/issues/8<br><br>0.2.1<br>=====<br><br><br>  - check for content_type before attempting to set charset because<br>    some webservers behave badly<br><br>0.2<br>===<br><br>   - documentation updates<br>   - file uploads syntax sugar<br>   - changed client to not rely on a global pipeline app<br><br><br>0.1.3.3<br>=======<br><br>   - breakout stringify dict method as it may be useful<br><br>0.1.3.2<br>=======<br><br>   - client handles multidict to querystring better<br><br>0.1.3.1<br>=======<br><br>   - option for enabling auto redirect in test client<br><br><br>0.1.3<br>=====<br><br>   - added sugar for the HTTP OPTIONS method<br><br><br>0.1.2<br>=====<br><br>   - added preconfigured test client that is similar to webtest<br><br>0.1.1<br>=====<br><br>   - added file upload support<br>   - changed handling of query_string to look at the url if it is not<br>     passed in as a separate param.<br><br><br>0.1<br>===<br><br>initial release because I need this in my day job<br><br>0.0<br>===<br><br>first pass at a client, and first pass at docs.\n          </div>"}, "last_serial": 1098401, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "5a439975ca5593f9209a852ff76c559a", "sha256": "b52e05a4e2c5114f63a60363a275b2e81d2e9efdafc2a8fae1d89141c51a4cfb"}, "downloads": -1, "filename": "webobtoolkit-0.1.tar.gz", "has_sig": false, "md5_digest": "5a439975ca5593f9209a852ff76c559a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18912, "upload_time": "2012-05-27T18:01:13", "upload_time_iso_8601": "2012-05-27T18:01:13.465028Z", "url": "https://files.pythonhosted.org/packages/83/47/a044f67a15c94a0eade51a3ff93d082c8c8a3c1ba829ee73afef5ede5ea5/webobtoolkit-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "9d7f143fa5215c0ae85e90cfac890072", "sha256": "7dba433e10bb703fd09353b3a4d596e96d75d81a1c286dd3e5118ab9af74a5e6"}, "downloads": -1, "filename": "webobtoolkit-0.1.1.tar.gz", "has_sig": false, "md5_digest": "9d7f143fa5215c0ae85e90cfac890072", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19460, "upload_time": "2012-05-28T16:45:18", "upload_time_iso_8601": "2012-05-28T16:45:18.340645Z", "url": "https://files.pythonhosted.org/packages/1d/30/b19eea3eb4e1b63ce87bee12c6d7006c14e59443add2d4545ab2faa60a46/webobtoolkit-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "45cd8a847217b85215839f3256cbd58e", "sha256": "f76d3b8f65eccf3470a2a81adbcaeb6f40e60dd1632cb93ac7121d3ede4c939f"}, "downloads": -1, "filename": "webobtoolkit-0.1.2.tar.gz", "has_sig": false, "md5_digest": "45cd8a847217b85215839f3256cbd58e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20646, "upload_time": "2012-05-29T21:18:55", "upload_time_iso_8601": "2012-05-29T21:18:55.462290Z", "url": "https://files.pythonhosted.org/packages/1a/57/e948d94ff2f77d3d966603ae87d043f92534e680bf9c820d216baaeed6bf/webobtoolkit-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "8baa98ec5716a1fea0ea225b9a822175", "sha256": "dd6778ad2d08fa72dfb7b31ba0ccc68cd7f7342250f79a00097b132b936b48ba"}, "downloads": -1, "filename": "webobtoolkit-0.1.3.tar.gz", "has_sig": false, "md5_digest": "8baa98ec5716a1fea0ea225b9a822175", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20990, "upload_time": "2012-08-31T14:07:46", "upload_time_iso_8601": "2012-08-31T14:07:46.495303Z", "url": "https://files.pythonhosted.org/packages/5b/c6/45c553f59fce66d047bcb9dda8981a14a5381c9cc6503c6542c036d9ae9c/webobtoolkit-0.1.3.tar.gz", "yanked": false}], "0.1.3.1": [{"comment_text": "", "digests": {"md5": "5d612b3ec52f2fb80b9c82ae44ac5a20", "sha256": "b34649895f26e90d3a7eb67e42c0871594cd8974cbcfbfb5c5ede46a2c01841e"}, "downloads": -1, "filename": "webobtoolkit-0.1.3.1.tar.gz", "has_sig": false, "md5_digest": "5d612b3ec52f2fb80b9c82ae44ac5a20", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21077, "upload_time": "2012-09-01T01:42:16", "upload_time_iso_8601": "2012-09-01T01:42:16.960434Z", "url": "https://files.pythonhosted.org/packages/68/14/3cba83a504742de80c17269149f8580401cb4f697125732533ab35d34878/webobtoolkit-0.1.3.1.tar.gz", "yanked": false}], "0.1.3.2": [{"comment_text": "", "digests": {"md5": "aa960d69b09ef24c5059ebae4704ebec", "sha256": "cdae2a2104d5f8271a5743c5ac19721b054a62eda98288d8f4e9e0c4045d5f2a"}, "downloads": -1, "filename": "webobtoolkit-0.1.3.2.tar.gz", "has_sig": false, "md5_digest": "aa960d69b09ef24c5059ebae4704ebec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21368, "upload_time": "2012-09-03T12:43:43", "upload_time_iso_8601": "2012-09-03T12:43:43.548219Z", "url": "https://files.pythonhosted.org/packages/85/88/9f16a506d0f6bac37a5228dfd32d1a56290f046f6bcac729437fa64bfe0a/webobtoolkit-0.1.3.2.tar.gz", "yanked": false}], "0.1.3.3": [{"comment_text": "", "digests": {"md5": "0517f3a808b4dee4b4eda8fe6618fab6", "sha256": "d459188f88ab0ae339d5539fcdb9837aa85a52245a3fe05a475dc99c1452f19e"}, "downloads": -1, "filename": "webobtoolkit-0.1.3.3.tar.gz", "has_sig": false, "md5_digest": "0517f3a808b4dee4b4eda8fe6618fab6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21500, "upload_time": "2012-09-05T14:30:58", "upload_time_iso_8601": "2012-09-05T14:30:58.663648Z", "url": "https://files.pythonhosted.org/packages/8f/c8/8fb7524cbfc7ee8b8245f5c39a16dfeed7a3401e06ad0f9de68742b23577/webobtoolkit-0.1.3.3.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "aae2646545bb934cb1f226c522ea7169", "sha256": "a862a6323a8154b244a2755674c30a9999ef49bdf98d16796a3dbf1780e60f4a"}, "downloads": -1, "filename": "webobtoolkit-0.2.tar.gz", "has_sig": false, "md5_digest": "aae2646545bb934cb1f226c522ea7169", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26423, "upload_time": "2013-05-25T19:04:34", "upload_time_iso_8601": "2013-05-25T19:04:34.724180Z", "url": "https://files.pythonhosted.org/packages/6f/81/2921d9da17ef29370ba6d72cfda056bfe4f730bcdb8c2d68a841abd41639/webobtoolkit-0.2.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "d7480a4e44992aa716c96e523354b382", "sha256": "75a772094173f344a402e87d8eef583c7937f377b0ebf093b9741a530a992c74"}, "downloads": -1, "filename": "webobtoolkit-0.2.1.tar.gz", "has_sig": false, "md5_digest": "d7480a4e44992aa716c96e523354b382", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26184, "upload_time": "2013-11-09T16:40:15", "upload_time_iso_8601": "2013-11-09T16:40:15.452604Z", "url": "https://files.pythonhosted.org/packages/55/08/8daede89b2bfcdf3a0879212d47bb4aff7657f33b3a5ff889f4d5e12fbfe/webobtoolkit-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "198ea196e63ff23e42512c73c5cbe909", "sha256": "9d694e08bf3d7169c69132dc5cb38cbfe0b97c4d1ca3b113dd039884f6b8ab60"}, "downloads": -1, "filename": "webobtoolkit-0.2.2.tar.gz", "has_sig": false, "md5_digest": "198ea196e63ff23e42512c73c5cbe909", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26483, "upload_time": "2014-01-06T01:35:11", "upload_time_iso_8601": "2014-01-06T01:35:11.911029Z", "url": "https://files.pythonhosted.org/packages/bb/d3/f7ea338b107b33a78e5d6621b5bd01191cfbf8a0df51f6f279539714777d/webobtoolkit-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "87dd2221569eb29c8f16732fab93ce9e", "sha256": "5e135568528c5291f040c1b50ebaeb7eb7acc20346c654a6dce80c862b0ed9a0"}, "downloads": -1, "filename": "webobtoolkit-0.2.3.tar.gz", "has_sig": false, "md5_digest": "87dd2221569eb29c8f16732fab93ce9e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14388, "upload_time": "2014-03-08T20:47:19", "upload_time_iso_8601": "2014-03-08T20:47:19.536646Z", "url": "https://files.pythonhosted.org/packages/e8/c6/1c54b1986c26a0f615a6c6a57c2ba406599ade1ba7a8f157247417fdf614/webobtoolkit-0.2.3.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "4f780e387931b386723806be82d5f6cf", "sha256": "da94b68cb79c72393c9d6316a60fe066fe95f44103c966905a29fd093b670f4b"}, "downloads": -1, "filename": "webobtoolkit-0.2.4.tar.gz", "has_sig": false, "md5_digest": "4f780e387931b386723806be82d5f6cf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14470, "upload_time": "2014-05-20T13:07:44", "upload_time_iso_8601": "2014-05-20T13:07:44.187444Z", "url": "https://files.pythonhosted.org/packages/92/da/0d0bb3f9ae1c41110ce6e7f28325fc13a6c9f2c2ac52dc34ed77cc74fd12/webobtoolkit-0.2.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4f780e387931b386723806be82d5f6cf", "sha256": "da94b68cb79c72393c9d6316a60fe066fe95f44103c966905a29fd093b670f4b"}, "downloads": -1, "filename": "webobtoolkit-0.2.4.tar.gz", "has_sig": false, "md5_digest": "4f780e387931b386723806be82d5f6cf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14470, "upload_time": "2014-05-20T13:07:44", "upload_time_iso_8601": "2014-05-20T13:07:44.187444Z", "url": "https://files.pythonhosted.org/packages/92/da/0d0bb3f9ae1c41110ce6e7f28325fc13a6c9f2c2ac52dc34ed77cc74fd12/webobtoolkit-0.2.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:30:57 2020"}