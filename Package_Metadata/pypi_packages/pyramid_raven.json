{"info": {"author": "James Arthur", "author_email": "username: thruflo, domain: gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Web Environment", "Framework :: Pylons", "Intended Audience :: Developers", "License :: Public Domain", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.2", "Topic :: Internet :: WWW/HTTP", "Topic :: Internet :: WWW/HTTP :: WSGI", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "`pyramid\\_raven <https://github.com/thruflo/pyramid_raven>`__ integrates\nthe `raven python client <http://raven.readthedocs.org/en/latest>`__ and\n`raven-js <http://raven-js.readthedocs.org/en/latest>`__ with a\n`Pyramid <http://pyramid.readthedocs.org>`__ web application. It\nprovides a configured `raven\nclient <http://raven.readthedocs.org/en/latest/usage.html#raven.base.Client>`__\nat ``request.raven`` and a\n`pyramid\\_layout <http://pyramid_layout.readthedocs.org/en/latest/>`__\npanel called ``raven-js``.\n\nRaven has `built in support for Pyramid\napplications <http://raven.readthedocs.org/en/latest/config/pyramid.html>`__\nvia a Paste filter and logging handler.\n`pyramid\\_raven <https://github.com/thruflo/pyramid_raven>`__ is an\nalternative integration, useful when:\n\n1. you handle exceptions within your application -- i.e.: you register a\n   catch all ``Exception`` view that renders an error page within your\n   application, thus preventing errors reaching the WSGI pipeline\n2. you also want to log javascript errors\n\nSetup\n-----\n\nInstall using `pip <http://www.pip-installer.org>`__:\n\n::\n\n    pip install pyramid_raven\n\nConfigure Raven DSN address in the INI configuration of your\napplication:\n\n::\n\n    raven.dsn = https://xxx:yyy@sentry.example.com/1\n\n... or provide a `SENTRY\\_DSN environment\nvariable <http://raven.readthedocs.org/en/latest/config/index.html#the-sentry-dsn>`__:\n\n::\n\n    SENTRY_DSN=http://public:secret@example.com/1\n\n`Configure your\napplication <http://docs.pylonsproject.org/projects/pyramid/en/latest/narr/configuration.html>`__\nto include the package:\n\n::\n\n    config.include('pyramid_raven')\n\nConfigure\n---------\n\nAny ``raven.*`` namespaced settings in your ``.ini`` `configuration\nfile <http://docs.pylonsproject.org/projects/pyramid/en/latest/narr/paste.html>`__\nwill be passed to the `raven\nclient <http://raven.readthedocs.org/en/latest/usage.html#raven.base.Client>`__\nconstructor -- although it's your responsibility to coerce them to the\nright type, e.g.:\n\n::\n\n    raven.timeout=3\n\nYou can augment the (already fairly comprehensive set of) request\nattributes sent with the logged server side exceptions by adding space\nseperated request property or method names (called with no args) to:\n\n::\n\n    pyramid_raven.additional_request_properties=foo bar\n    pyramid_raven.additional_request_methods=baz bam\n\nYou can also override the panel template:\n\n::\n\n    pyramid_raven.panel_tmpl=mypkg:templates/foo.tmpl\n\nUse\n---\n\nYou can use it to record server side errors:\n\n::\n\n    @view_config(context=Exception)\n    def system_error_view(context, request):\n        \"\"\"Example catch all exception handler.\"\"\"\n        \n        # Notify sentry.\n        request.raven.captureException()\n        \n        # XXX E.g.: render error page.\n        # ...\n\nClient side JavaScript errors\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nClient side error tracking requires that you have\n`pyramid\\_layout <http://pyramid-layout.readthedocs.org/>`__ configured\nbefore ``pyramid_raven``.\n\nAnd client side errors:\n\n::\n\n    <!-- in production, in the head of your main layout, above all other js -->\n    ${panel('raven-js')}\n\nE.g.: then in any of your subsequently loaded scripts:\n\n::\n\n    throw new Error('This javascript error will be logged.')\n\nNote that if you load your scripts from an external domain (e.g.: from a\nCDN) then errors will not be logged by many browsers, due to cross\norigin security (not leaking information across domains). You can\nworkaround this `using CORS <http://enable-cors.org/>`__ but browser\nsupport is, at the time of writing, wobbly to say the least.\n\nTests\n-----\n\nTo run the tests, ``pip install nose coverage mock`` and e.g.:\n\n::\n\n    $ nosetests --with-doctest --with-coverage --cover-tests --cover-package pyramid_raven pyramid_raven\n    ......\n    Name                      Stmts   Miss  Cover   Missing\n    -------------------------------------------------------\n    pyramid_raven                 9      0   100%   \n    pyramid_raven.client         69      0   100%   \n    pyramid_raven.constants       5      0   100%   \n    pyramid_raven.panel          39      0   100%   \n    -------------------------------------------------------\n    TOTAL                       122      0   100%   \n    ----------------------------------------------------------------------\n    Ran 6 tests in 0.143s\n\n    OK", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/thruflo/pyramid_raven", "keywords": null, "license": "This is free and unencumbered software released into the public domain.", "maintainer": null, "maintainer_email": null, "name": "pyramid_raven", "package_url": "https://pypi.org/project/pyramid_raven/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pyramid_raven/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/thruflo/pyramid_raven"}, "release_url": "https://pypi.org/project/pyramid_raven/0.2.2/", "requires_dist": null, "requires_python": null, "summary": "Integrate raven and raven-js with a Pyramid web application.", "version": "0.2.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://github.com/thruflo/pyramid_raven\" rel=\"nofollow\">pyramid_raven</a> integrates\nthe <a href=\"http://raven.readthedocs.org/en/latest\" rel=\"nofollow\">raven python client</a> and\n<a href=\"http://raven-js.readthedocs.org/en/latest\" rel=\"nofollow\">raven-js</a> with a\n<a href=\"http://pyramid.readthedocs.org\" rel=\"nofollow\">Pyramid</a> web application. It\nprovides a configured <a href=\"http://raven.readthedocs.org/en/latest/usage.html#raven.base.Client\" rel=\"nofollow\">raven\nclient</a>\nat <tt>request.raven</tt> and a\n<a href=\"http://pyramid_layout.readthedocs.org/en/latest/\" rel=\"nofollow\">pyramid_layout</a>\npanel called <tt><span class=\"pre\">raven-js</span></tt>.</p>\n<p>Raven has <a href=\"http://raven.readthedocs.org/en/latest/config/pyramid.html\" rel=\"nofollow\">built in support for Pyramid\napplications</a>\nvia a Paste filter and logging handler.\n<a href=\"https://github.com/thruflo/pyramid_raven\" rel=\"nofollow\">pyramid_raven</a> is an\nalternative integration, useful when:</p>\n<ol>\n<li>you handle exceptions within your application \u2013 i.e.: you register a\ncatch all <tt>Exception</tt> view that renders an error page within your\napplication, thus preventing errors reaching the WSGI pipeline</li>\n<li>you also want to log javascript errors</li>\n</ol>\n<div id=\"setup\">\n<h2>Setup</h2>\n<p>Install using <a href=\"http://www.pip-installer.org\" rel=\"nofollow\">pip</a>:</p>\n<pre>pip install pyramid_raven\n</pre>\n<p>Configure Raven DSN address in the INI configuration of your\napplication:</p>\n<pre>raven.dsn = https://xxx:yyy@sentry.example.com/1\n</pre>\n<p>\u2026 or provide a <a href=\"http://raven.readthedocs.org/en/latest/config/index.html#the-sentry-dsn\" rel=\"nofollow\">SENTRY_DSN environment\nvariable</a>:</p>\n<pre>SENTRY_DSN=http://public:secret@example.com/1\n</pre>\n<p><a href=\"http://docs.pylonsproject.org/projects/pyramid/en/latest/narr/configuration.html\" rel=\"nofollow\">Configure your\napplication</a>\nto include the package:</p>\n<pre>config.include('pyramid_raven')\n</pre>\n</div>\n<div id=\"configure\">\n<h2>Configure</h2>\n<p>Any <tt>raven.*</tt> namespaced settings in your <tt>.ini</tt> <a href=\"http://docs.pylonsproject.org/projects/pyramid/en/latest/narr/paste.html\" rel=\"nofollow\">configuration\nfile</a>\nwill be passed to the <a href=\"http://raven.readthedocs.org/en/latest/usage.html#raven.base.Client\" rel=\"nofollow\">raven\nclient</a>\nconstructor \u2013 although it\u2019s your responsibility to coerce them to the\nright type, e.g.:</p>\n<pre>raven.timeout=3\n</pre>\n<p>You can augment the (already fairly comprehensive set of) request\nattributes sent with the logged server side exceptions by adding space\nseperated request property or method names (called with no args) to:</p>\n<pre>pyramid_raven.additional_request_properties=foo bar\npyramid_raven.additional_request_methods=baz bam\n</pre>\n<p>You can also override the panel template:</p>\n<pre>pyramid_raven.panel_tmpl=mypkg:templates/foo.tmpl\n</pre>\n</div>\n<div id=\"use\">\n<h2>Use</h2>\n<p>You can use it to record server side errors:</p>\n<pre>@view_config(context=Exception)\ndef system_error_view(context, request):\n    \"\"\"Example catch all exception handler.\"\"\"\n\n    # Notify sentry.\n    request.raven.captureException()\n\n    # XXX E.g.: render error page.\n    # ...\n</pre>\n<div id=\"client-side-javascript-errors\">\n<h3>Client side JavaScript errors</h3>\n<p>Client side error tracking requires that you have\n<a href=\"http://pyramid-layout.readthedocs.org/\" rel=\"nofollow\">pyramid_layout</a> configured\nbefore <tt>pyramid_raven</tt>.</p>\n<p>And client side errors:</p>\n<pre>&lt;!-- in production, in the head of your main layout, above all other js --&gt;\n${panel('raven-js')}\n</pre>\n<p>E.g.: then in any of your subsequently loaded scripts:</p>\n<pre>throw new Error('This javascript error will be logged.')\n</pre>\n<p>Note that if you load your scripts from an external domain (e.g.: from a\nCDN) then errors will not be logged by many browsers, due to cross\norigin security (not leaking information across domains). You can\nworkaround this <a href=\"http://enable-cors.org/\" rel=\"nofollow\">using CORS</a> but browser\nsupport is, at the time of writing, wobbly to say the least.</p>\n</div>\n</div>\n<div id=\"tests\">\n<h2>Tests</h2>\n<p>To run the tests, <tt>pip install nose coverage mock</tt> and e.g.:</p>\n<pre>$ nosetests --with-doctest --with-coverage --cover-tests --cover-package pyramid_raven pyramid_raven\n......\nName                      Stmts   Miss  Cover   Missing\n-------------------------------------------------------\npyramid_raven                 9      0   100%\npyramid_raven.client         69      0   100%\npyramid_raven.constants       5      0   100%\npyramid_raven.panel          39      0   100%\n-------------------------------------------------------\nTOTAL                       122      0   100%\n----------------------------------------------------------------------\nRan 6 tests in 0.143s\n\nOK\n</pre>\n</div>\n\n          </div>"}, "last_serial": 2338836, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "9400e1591ac85ddf49601188e4e5c26a", "sha256": "37b6095f637b209f5af2e74fb5de23c8bda4e5baf8c57323a067f96f485a4c89"}, "downloads": -1, "filename": "pyramid_raven-0.1.tar.gz", "has_sig": false, "md5_digest": "9400e1591ac85ddf49601188e4e5c26a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8496, "upload_time": "2013-06-25T14:34:40", "upload_time_iso_8601": "2013-06-25T14:34:40.709052Z", "url": "https://files.pythonhosted.org/packages/d7/74/9c2df08f036cf9300a22e81a1e2caf108752c1e869802569eac856ce136f/pyramid_raven-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "de4b57f65a2a729e0b3f9214be366157", "sha256": "fc029c34dfc5ac3ece8a2d69d87f18f77d2abc9be0f02f30feeb94c978263142"}, "downloads": -1, "filename": "pyramid_raven-0.1.1.tar.gz", "has_sig": false, "md5_digest": "de4b57f65a2a729e0b3f9214be366157", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8799, "upload_time": "2013-06-25T14:46:37", "upload_time_iso_8601": "2013-06-25T14:46:37.584741Z", "url": "https://files.pythonhosted.org/packages/42/df/747065cfbee8dab437920b96a3d2ff4c95d533393c3ff3dd57e727ef31d7/pyramid_raven-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "e7cd86b6f95067ce6ee6ba5d5b2e11f3", "sha256": "cfdfe6cb6cdca1affdf01075492e79062539c5bd80c9aa61481e2e864d4791a1"}, "downloads": -1, "filename": "pyramid_raven-0.1.2.tar.gz", "has_sig": false, "md5_digest": "e7cd86b6f95067ce6ee6ba5d5b2e11f3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8792, "upload_time": "2013-06-25T15:01:26", "upload_time_iso_8601": "2013-06-25T15:01:26.588120Z", "url": "https://files.pythonhosted.org/packages/49/b8/5c859cff96c4b268947ade0705bb6537e73d885f8785ddfcfa0c909d523b/pyramid_raven-0.1.2.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "4b8b81aa21f5b4d9cc8e4cdea8f44456", "sha256": "09bd2f4b240ac319031f6349a1820c93a3387e473743b3da5e0af933718e82a8"}, "downloads": -1, "filename": "pyramid_raven-0.2.0.tar.gz", "has_sig": false, "md5_digest": "4b8b81aa21f5b4d9cc8e4cdea8f44456", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7760, "upload_time": "2016-06-02T18:00:59", "upload_time_iso_8601": "2016-06-02T18:00:59.212425Z", "url": "https://files.pythonhosted.org/packages/78/b7/4bd2c4bb036a2bffef53338f04d1ff47f239c9b996d6dd7d79f939815d1e/pyramid_raven-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "98abd9269ade39e7fdb4caf5e8edede6", "sha256": "73209552f1610bc4c53f79b20e323e6166a3e42c851b29ef127549460c8e7511"}, "downloads": -1, "filename": "pyramid_raven-0.2.1.tar.gz", "has_sig": false, "md5_digest": "98abd9269ade39e7fdb4caf5e8edede6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8279, "upload_time": "2016-09-12T20:38:24", "upload_time_iso_8601": "2016-09-12T20:38:24.962619Z", "url": "https://files.pythonhosted.org/packages/4a/84/5f9a185a5798e30898f0decead1aba70cac1726f2abd7194071232114585/pyramid_raven-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "81d0d775e6b8c1a9ace8eaa059a0bc26", "sha256": "9355728207d436979bd42db12c9b5cddb3c053afda61e87abb054275e5d249db"}, "downloads": -1, "filename": "pyramid_raven-0.2.2.tar.gz", "has_sig": false, "md5_digest": "81d0d775e6b8c1a9ace8eaa059a0bc26", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8517, "upload_time": "2016-09-12T20:40:27", "upload_time_iso_8601": "2016-09-12T20:40:27.712809Z", "url": "https://files.pythonhosted.org/packages/ef/28/95bd5200aa4fd8cb667b98f315e68af732afc0b4e0ccf0b7a72712e6d943/pyramid_raven-0.2.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "81d0d775e6b8c1a9ace8eaa059a0bc26", "sha256": "9355728207d436979bd42db12c9b5cddb3c053afda61e87abb054275e5d249db"}, "downloads": -1, "filename": "pyramid_raven-0.2.2.tar.gz", "has_sig": false, "md5_digest": "81d0d775e6b8c1a9ace8eaa059a0bc26", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8517, "upload_time": "2016-09-12T20:40:27", "upload_time_iso_8601": "2016-09-12T20:40:27.712809Z", "url": "https://files.pythonhosted.org/packages/ef/28/95bd5200aa4fd8cb667b98f315e68af732afc0b4e0ccf0b7a72712e6d943/pyramid_raven-0.2.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:15 2020"}