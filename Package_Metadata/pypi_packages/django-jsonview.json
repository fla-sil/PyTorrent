{"info": {"author": "James Socol", "author_email": "me@jamessocol.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "===============\ndjango-jsonview\n===============\n\n\n.. image:: https://travis-ci.org/jsocol/django-jsonview.png?branch=master\n   :target: https://travis-ci.org/jsocol/django-jsonview\n\n**django-jsonview** is a simple decorator that translates Python objects\nto JSON and makes sure your view will always return JSON.\n\nI've copied and pasted this so often I decided I just wanted to put it\nin a package.\n\n\nInstallation\n============\n\nJust install with ``pip``::\n\n    pip install django-jsonview\n\nNo need to add to ``INSTALLED_APPS`` or anything.\n\n\nUsage\n=====\n\nJust import the decorator, use, and return a JSON-serializable object::\n\n    from jsonview.decorators import json_view\n\n    @json_view\n    def my_view(request):\n        return {\n            'foo': 'bar',\n        }\n\n\n`Class-based views`_ (CBVs) can inherit from JsonView, use Django's\n``@method_decorator`` or wrap the output of ``.as_view()``::\n\n    # inherit from JsonView\n    from jsonview.views import JsonView\n\n\n    class MyView(JsonView):\n        def get_context_data(self, **kwargs):\n            context = super(MyView, self).get_context_data(**kwargs)\n            context['my_key'] = 'some value'\n            return context\n\n    # or, method decorator\n    from django.utils.decorators import method_decorator\n    from jsonview.decorators import json_view\n\n\n    class MyView(View):\n        @method_decorator(json_view)\n        def dispatch(self, *args, **kwargs):\n            return super(MyView, self).dispatch(*args, **kwargs)\n\n    # or, in URLconf\n\n    patterns = [\n        url(r'^/my-view/$', json_view(MyView.as_view())),\n    ]\n\n\nContent Types\n-------------\n\nIf you need to return a content type other than the standard\n``application/json``, you can specify that in the decorator with the\n``content_type`` argument, for example::\n\n    from jsonview.decorators import json_view\n\n    @json_view(content_type='application/vnd.github+json')\n    def myview(request):\n        return {'foo': 'bar'}\n\nThe response will have the appropriate content type header.\n\n\nReturn Values\n-------------\n\nThe default case is to serialize your return value and respond with HTTP\n200 and a Content-Type of ``application/json``.\n\nThe ``@json_view`` decorator will handle many exceptions and other\ncases, including:\n\n* ``Http404``\n* ``PermissionDenied``\n* ``HttpResponseNotAllowed`` (e.g. ``require_GET``, ``require_POST``)\n* ``jsonview.exceptions.BadRequest`` (see below)\n* Any other exception (logged to ``django.request``).\n\nAny of these exceptions will return the correct status code (i.e., 404,\n403, 405, 400, 500) a Content-Type of ``application/json``, and a\nresponse body that looks like::\n\n    json.dumps({\n        'error': STATUS_CODE,\n        'message': str(exception),\n    })\n\n.. note::\n\n   As of v0.4, application exceptions do **not** behave this way if\n   ``DEBUG = False``. When ``DEBUG = False``, the ``message`` value is\n   always ``An error occurred``. When ``DEBUG = True``, the exception\n   message is sent back.\n\n\n``BadRequest``\n--------------\n\nHTTP does not have a great status code for \"you submitted a form that\ndidn't validate,\" and so Django doesn't support it very well. Most\nexamples just return 200 OK.\n\nNormally, this is fine. But if you're submitting a form via Ajax, it's\nnice to have a distinct status for \"OK\" and \"Nope.\" The HTTP 400 Bad\nRequest response is the fallback for issues with a request\nnot-otherwise-specified, so let's do that.\n\nTo cause ``@json_view`` to return a 400, just raise a\n``jsonview.exceptions.BadRequest`` with whatever appropriate error\nmessage.\n\n\nExceptions\n----------\n\nIf your view raises an exception, ``@json_view`` will catch the\nexception, log it to the normal ``django.request`` logger_, and return a\nJSON response with a status of 500 and a body that looks like the\nexceptions in the `Return Values`_ section.\n\n.. note::\n\n   Because the ``@json_view`` decorator handles the exception instead of\n   propagating it, any exception middleware will **not** be called, and\n   any response middleware **will** be called.\n\n\nStatus Codes\n------------\n\nIf you need to return a different HTTP status code, just return two\nvalues instead of one. The first is your serializable object, the second\nis the integer status code::\n\n    @json_view\n    def myview(request):\n        if not request.user.is_subscribed():\n            # Send a 402 Payment Required status.\n            return {'subscribed': False}, 402\n        # Send a 200 OK.\n        return {'subscribed': True}\n\n\nExtra Headers\n-------------\n\nYou can add custom headers to the response by returning a tuple of three\nvalues: an object, a status code, and a dictionary of headers.\n\n::\n\n    @json_view\n    def myview(request):\n        return {}, 200, {'X-Server': 'myserver'}\n\nCustom header values may be overwritten by response middleware.\n\n\nRaw Return Values\n-----------------\n\nTo make it possible to cache JSON responses as strings (and because they\naren't JSON serializable anyway) if you return an ``HttpResponse``\nobject (or subclass) it will be passed through unchanged, e.g.::\n\n    from django import http\n    from jsonview.decorators import JSON\n\n    @json_view\n    def caching_view(request):\n        kached = cache.get('cache-key')\n        if kached:\n            return http.HttpResponse(kached, content_type=JSON)\n        # Assuming something else populates this cache.\n        return {'complicated': 'object'}\n\n.. note::\n\n   ``@require_POST`` and the other HTTP method decorators  work by\n   *returning* a response, rather than *raising*, an exception, so\n   ``HttpResponseNotAllowed`` is handled specially.\n\n\nAlternative JSON Implementations\n================================\n\nThere is a healthy collection of JSON parsing and generating libraries\nout there. By default, it will use the old standby, the stdlib ``json``\nmodule. But, if you'd rather use ujson_, or cjson_ or yajl_, you should\ngo for it. Just add this to your Django settings::\n\n    JSON_MODULE = 'ujson'\n\nAnything, as long as it's a module that has ``.loads()`` and ``.dumps()``\nmethods.\n\n\nConfiguring JSON Output\n-----------------------\n\nAdditional keyword arguments can be passed to ``json.dumps()`` via the\n``JSON_OPTIONS = {}`` Django setting. For example, to pretty-print JSON\noutput::\n\n    JSON_OPTIONS = {\n        'indent': 4,\n    }\n\nOr to compactify it::\n\n    JSON_OPTIONS = {\n        'separators': (',', ':'),\n    }\n\njsonview uses ``DjangoJSONEncoder`` by default. To use a different JSON\nencoder, use the ``cls`` option::\n\n    JSON_OPTIONS = {\n        'cls': 'path.to.MyJSONEncoder',\n    }\n\n``JSON_OPTIONS['cls']`` may be a dotted string or a ``JSONEncoder``\nclass.\n\n**If you are using a JSON module that does not support the ``cls``\nkwarg**, such as ujson, set the ``cls`` option to ``None``::\n\n    JSON_OPTIONS = {\n        'cls': None,\n    }\n\nDefault value of content-type is 'application/json'. You can change it\nvia the ``JSON_DEFAULT_CONTENT_TYPE`` Django settings. For example, to\nadd charset::\n\n   JSON_DEFAULT_CONTENT_TYPE = 'application/json; charset=utf-8'\n\n\nAtomic Requests\n===============\n\nBecause ``@json_view`` catches exceptions, the normal Django setting\n``ATOMIC_REQUESTS`` does not correctly cause a rollback. This can be\nworked around by explicitly setting ``@transaction.atomic`` *below* the\n``@json_view`` decorator, e.g.::\n\n    @json_view\n    @transaction.atomic\n    def my_func(request):\n        # ...\n\n\nContributing\n============\n\n`Pull requests`_ and issues_ welcome! I ask two simple things:\n\n- Tests, including the new ones you added, must pass. (See below.)\n- Coverage should not drop below 100. You can install ``coverage`` with\n  pip and run ``./run.sh coverage`` to check.\n- The ``flake8`` tool should not return any issues.\n\n\nRunning Tests\n-------------\n\nTo run the tests, you probably want to create a virtualenv_, then\ninstall Django and Mock with ``pip``::\n\n    pip install Django==${DJANGO_VERSION} mock==1.0.1\n\nThen run the tests with::\n\n    ./run.sh test\n\n\n.. _logger:\n   https://docs.djangoproject.com/en/dev/topics/logging/#django-request\n.. _Pull requests: https://github.com/jsocol/django-jsonview/pulls\n.. _issues: https://github.com/jsocol/django-jsonview/issues\n.. _virtualenv: http://www.virtualenv.org/\n.. _ujson: https://pypi.python.org/pypi/ujson\n.. _cjson: https://pypi.python.org/pypi/python-cjson\n.. _yajl: https://pypi.python.org/pypi/yajl\n.. _Class-based views: https://docs.djangoproject.com/en/1.9/topics/class-based-views/intro/#decorating-class-based-views\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jsocol/django-jsonview", "keywords": "", "license": "Apache v2.0", "maintainer": "", "maintainer_email": "", "name": "django-jsonview", "package_url": "https://pypi.org/project/django-jsonview/", "platform": "", "project_url": "https://pypi.org/project/django-jsonview/", "project_urls": {"Homepage": "https://github.com/jsocol/django-jsonview"}, "release_url": "https://pypi.org/project/django-jsonview/1.3.1/", "requires_dist": null, "requires_python": "", "summary": "Always return JSON from your Django view.", "version": "1.3.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/jsocol/django-jsonview\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/jsocol/django-jsonview.png?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/88e0ff86399e964d88bd94291ca8e49e5159b3eb/68747470733a2f2f7472617669732d63692e6f72672f6a736f636f6c2f646a616e676f2d6a736f6e766965772e706e673f6272616e63683d6d6173746572\"></a>\n<p><strong>django-jsonview</strong> is a simple decorator that translates Python objects\nto JSON and makes sure your view will always return JSON.</p>\n<p>I\u2019ve copied and pasted this so often I decided I just wanted to put it\nin a package.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Just install with <tt>pip</tt>:</p>\n<pre>pip install django-jsonview\n</pre>\n<p>No need to add to <tt>INSTALLED_APPS</tt> or anything.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Just import the decorator, use, and return a JSON-serializable object:</p>\n<pre>from jsonview.decorators import json_view\n\n@json_view\ndef my_view(request):\n    return {\n        'foo': 'bar',\n    }\n</pre>\n<p><a href=\"https://docs.djangoproject.com/en/1.9/topics/class-based-views/intro/#decorating-class-based-views\" rel=\"nofollow\">Class-based views</a> (CBVs) can inherit from JsonView, use Django\u2019s\n<tt>@method_decorator</tt> or wrap the output of <tt>.as_view()</tt>:</p>\n<pre># inherit from JsonView\nfrom jsonview.views import JsonView\n\n\nclass MyView(JsonView):\n    def get_context_data(self, **kwargs):\n        context = super(MyView, self).get_context_data(**kwargs)\n        context['my_key'] = 'some value'\n        return context\n\n# or, method decorator\nfrom django.utils.decorators import method_decorator\nfrom jsonview.decorators import json_view\n\n\nclass MyView(View):\n    @method_decorator(json_view)\n    def dispatch(self, *args, **kwargs):\n        return super(MyView, self).dispatch(*args, **kwargs)\n\n# or, in URLconf\n\npatterns = [\n    url(r'^/my-view/$', json_view(MyView.as_view())),\n]\n</pre>\n<div id=\"content-types\">\n<h3>Content Types</h3>\n<p>If you need to return a content type other than the standard\n<tt>application/json</tt>, you can specify that in the decorator with the\n<tt>content_type</tt> argument, for example:</p>\n<pre>from jsonview.decorators import json_view\n\n@json_view(content_type='application/vnd.github+json')\ndef myview(request):\n    return {'foo': 'bar'}\n</pre>\n<p>The response will have the appropriate content type header.</p>\n</div>\n<div id=\"return-values\">\n<h3>Return Values</h3>\n<p>The default case is to serialize your return value and respond with HTTP\n200 and a Content-Type of <tt>application/json</tt>.</p>\n<p>The <tt>@json_view</tt> decorator will handle many exceptions and other\ncases, including:</p>\n<ul>\n<li><tt>Http404</tt></li>\n<li><tt>PermissionDenied</tt></li>\n<li><tt>HttpResponseNotAllowed</tt> (e.g. <tt>require_GET</tt>, <tt>require_POST</tt>)</li>\n<li><tt>jsonview.exceptions.BadRequest</tt> (see below)</li>\n<li>Any other exception (logged to <tt>django.request</tt>).</li>\n</ul>\n<p>Any of these exceptions will return the correct status code (i.e., 404,\n403, 405, 400, 500) a Content-Type of <tt>application/json</tt>, and a\nresponse body that looks like:</p>\n<pre>json.dumps({\n    'error': STATUS_CODE,\n    'message': str(exception),\n})\n</pre>\n<div>\n<p>Note</p>\n<p>As of v0.4, application exceptions do <strong>not</strong> behave this way if\n<tt>DEBUG = False</tt>. When <tt>DEBUG = False</tt>, the <tt>message</tt> value is\nalways <tt>An error occurred</tt>. When <tt>DEBUG = True</tt>, the exception\nmessage is sent back.</p>\n</div>\n</div>\n<div id=\"badrequest\">\n<h3><tt>BadRequest</tt></h3>\n<p>HTTP does not have a great status code for \u201cyou submitted a form that\ndidn\u2019t validate,\u201d and so Django doesn\u2019t support it very well. Most\nexamples just return 200 OK.</p>\n<p>Normally, this is fine. But if you\u2019re submitting a form via Ajax, it\u2019s\nnice to have a distinct status for \u201cOK\u201d and \u201cNope.\u201d The HTTP 400 Bad\nRequest response is the fallback for issues with a request\nnot-otherwise-specified, so let\u2019s do that.</p>\n<p>To cause <tt>@json_view</tt> to return a 400, just raise a\n<tt>jsonview.exceptions.BadRequest</tt> with whatever appropriate error\nmessage.</p>\n</div>\n<div id=\"exceptions\">\n<h3>Exceptions</h3>\n<p>If your view raises an exception, <tt>@json_view</tt> will catch the\nexception, log it to the normal <tt>django.request</tt> <a href=\"https://docs.djangoproject.com/en/dev/topics/logging/#django-request\" rel=\"nofollow\">logger</a>, and return a\nJSON response with a status of 500 and a body that looks like the\nexceptions in the <a href=\"#return-values\" rel=\"nofollow\">Return Values</a> section.</p>\n<div>\n<p>Note</p>\n<p>Because the <tt>@json_view</tt> decorator handles the exception instead of\npropagating it, any exception middleware will <strong>not</strong> be called, and\nany response middleware <strong>will</strong> be called.</p>\n</div>\n</div>\n<div id=\"status-codes\">\n<h3>Status Codes</h3>\n<p>If you need to return a different HTTP status code, just return two\nvalues instead of one. The first is your serializable object, the second\nis the integer status code:</p>\n<pre>@json_view\ndef myview(request):\n    if not request.user.is_subscribed():\n        # Send a 402 Payment Required status.\n        return {'subscribed': False}, 402\n    # Send a 200 OK.\n    return {'subscribed': True}\n</pre>\n</div>\n<div id=\"extra-headers\">\n<h3>Extra Headers</h3>\n<p>You can add custom headers to the response by returning a tuple of three\nvalues: an object, a status code, and a dictionary of headers.</p>\n<pre>@json_view\ndef myview(request):\n    return {}, 200, {'X-Server': 'myserver'}\n</pre>\n<p>Custom header values may be overwritten by response middleware.</p>\n</div>\n<div id=\"raw-return-values\">\n<h3>Raw Return Values</h3>\n<p>To make it possible to cache JSON responses as strings (and because they\naren\u2019t JSON serializable anyway) if you return an <tt>HttpResponse</tt>\nobject (or subclass) it will be passed through unchanged, e.g.:</p>\n<pre>from django import http\nfrom jsonview.decorators import JSON\n\n@json_view\ndef caching_view(request):\n    kached = cache.get('cache-key')\n    if kached:\n        return http.HttpResponse(kached, content_type=JSON)\n    # Assuming something else populates this cache.\n    return {'complicated': 'object'}\n</pre>\n<div>\n<p>Note</p>\n<p><tt>@require_POST</tt> and the other HTTP method decorators  work by\n<em>returning</em> a response, rather than <em>raising</em>, an exception, so\n<tt>HttpResponseNotAllowed</tt> is handled specially.</p>\n</div>\n</div>\n</div>\n<div id=\"alternative-json-implementations\">\n<h2>Alternative JSON Implementations</h2>\n<p>There is a healthy collection of JSON parsing and generating libraries\nout there. By default, it will use the old standby, the stdlib <tt>json</tt>\nmodule. But, if you\u2019d rather use <a href=\"https://pypi.python.org/pypi/ujson\" rel=\"nofollow\">ujson</a>, or <a href=\"https://pypi.python.org/pypi/python-cjson\" rel=\"nofollow\">cjson</a> or <a href=\"https://pypi.python.org/pypi/yajl\" rel=\"nofollow\">yajl</a>, you should\ngo for it. Just add this to your Django settings:</p>\n<pre>JSON_MODULE = 'ujson'\n</pre>\n<p>Anything, as long as it\u2019s a module that has <tt>.loads()</tt> and <tt>.dumps()</tt>\nmethods.</p>\n<div id=\"configuring-json-output\">\n<h3>Configuring JSON Output</h3>\n<p>Additional keyword arguments can be passed to <tt>json.dumps()</tt> via the\n<tt>JSON_OPTIONS = {}</tt> Django setting. For example, to pretty-print JSON\noutput:</p>\n<pre>JSON_OPTIONS = {\n    'indent': 4,\n}\n</pre>\n<p>Or to compactify it:</p>\n<pre>JSON_OPTIONS = {\n    'separators': (',', ':'),\n}\n</pre>\n<p>jsonview uses <tt>DjangoJSONEncoder</tt> by default. To use a different JSON\nencoder, use the <tt>cls</tt> option:</p>\n<pre>JSON_OPTIONS = {\n    'cls': 'path.to.MyJSONEncoder',\n}\n</pre>\n<p><tt><span class=\"pre\">JSON_OPTIONS['cls']</span></tt> may be a dotted string or a <tt>JSONEncoder</tt>\nclass.</p>\n<p><strong>If you are using a JSON module that does not support the ``cls``\nkwarg</strong>, such as ujson, set the <tt>cls</tt> option to <tt>None</tt>:</p>\n<pre>JSON_OPTIONS = {\n    'cls': None,\n}\n</pre>\n<p>Default value of content-type is \u2018application/json\u2019. You can change it\nvia the <tt>JSON_DEFAULT_CONTENT_TYPE</tt> Django settings. For example, to\nadd charset:</p>\n<pre>JSON_DEFAULT_CONTENT_TYPE = 'application/json; charset=utf-8'\n</pre>\n</div>\n</div>\n<div id=\"atomic-requests\">\n<h2>Atomic Requests</h2>\n<p>Because <tt>@json_view</tt> catches exceptions, the normal Django setting\n<tt>ATOMIC_REQUESTS</tt> does not correctly cause a rollback. This can be\nworked around by explicitly setting <tt>@transaction.atomic</tt> <em>below</em> the\n<tt>@json_view</tt> decorator, e.g.:</p>\n<pre>@json_view\n@transaction.atomic\ndef my_func(request):\n    # ...\n</pre>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<p><a href=\"https://github.com/jsocol/django-jsonview/pulls\" rel=\"nofollow\">Pull requests</a> and <a href=\"https://github.com/jsocol/django-jsonview/issues\" rel=\"nofollow\">issues</a> welcome! I ask two simple things:</p>\n<ul>\n<li>Tests, including the new ones you added, must pass. (See below.)</li>\n<li>Coverage should not drop below 100. You can install <tt>coverage</tt> with\npip and run <tt>./run.sh coverage</tt> to check.</li>\n<li>The <tt>flake8</tt> tool should not return any issues.</li>\n</ul>\n<div id=\"running-tests\">\n<h3>Running Tests</h3>\n<p>To run the tests, you probably want to create a <a href=\"http://www.virtualenv.org/\" rel=\"nofollow\">virtualenv</a>, then\ninstall Django and Mock with <tt>pip</tt>:</p>\n<pre>pip install Django==${DJANGO_VERSION} mock==1.0.1\n</pre>\n<p>Then run the tests with:</p>\n<pre>./run.sh test\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6034719, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "fe094f6315a1581ee148886d614fe3ac", "sha256": "319776f84c6622ab66b5ec0f12fd367a1c10689ec672b0e50c9593b61ca020a9"}, "downloads": -1, "filename": "django-jsonview-0.1.0.tar.gz", "has_sig": false, "md5_digest": "fe094f6315a1581ee148886d614fe3ac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3956, "upload_time": "2013-02-18T21:09:54", "upload_time_iso_8601": "2013-02-18T21:09:54.668010Z", "url": "https://files.pythonhosted.org/packages/8c/30/b39142858b4fd3944e323a8d36f0f0205f850464050289071ee1cf44ae5b/django-jsonview-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "a6cdc7718d6c7ef35594d4086ae8a3a8", "sha256": "4f47d990b8c47dff47d29a604703557c3bb1846908fd7c9654452cb402db1654"}, "downloads": -1, "filename": "django-jsonview-0.1.1.tar.gz", "has_sig": false, "md5_digest": "a6cdc7718d6c7ef35594d4086ae8a3a8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4680, "upload_time": "2013-02-18T21:18:26", "upload_time_iso_8601": "2013-02-18T21:18:26.857444Z", "url": "https://files.pythonhosted.org/packages/30/54/07a7210c9939126654ce9af86d4a5310e7f1ec369e5ef71520160e2a0aa4/django-jsonview-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "941e154021e7ad0ea03e600ea031de58", "sha256": "a890a8c2706f7d7db45290b28813ffdae0c63783e6bc37ea5b500c3c736d35ee"}, "downloads": -1, "filename": "django-jsonview-0.2.0.tar.gz", "has_sig": false, "md5_digest": "941e154021e7ad0ea03e600ea031de58", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5463, "upload_time": "2013-05-29T13:54:21", "upload_time_iso_8601": "2013-05-29T13:54:21.247490Z", "url": "https://files.pythonhosted.org/packages/f6/17/5973bd7610f7ee37ac6c96ad554c8e05d159759f286665d29889dde02947/django-jsonview-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "a70c6d36b16f4387cfabf4949d917a21", "sha256": "4e9246459fea071edb4495ed05912f55d2461485f491ce3b1e531b072994ebeb"}, "downloads": -1, "filename": "django-jsonview-0.2.1.tar.gz", "has_sig": false, "md5_digest": "a70c6d36b16f4387cfabf4949d917a21", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5520, "upload_time": "2013-05-30T15:31:35", "upload_time_iso_8601": "2013-05-30T15:31:35.221763Z", "url": "https://files.pythonhosted.org/packages/61/78/9290cea0f3ffaf029703a4cc404ee7fd2932082bd7e1ee597f3ff18d5479/django-jsonview-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "a437a3e1082eab412f8af54562bf4b05", "sha256": "f1b2ff621c264f4ba2728051945112f16533286a81ba17e50542ea76f0046b3b"}, "downloads": -1, "filename": "django-jsonview-0.2.2.tar.gz", "has_sig": false, "md5_digest": "a437a3e1082eab412f8af54562bf4b05", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5999, "upload_time": "2013-09-19T10:17:01", "upload_time_iso_8601": "2013-09-19T10:17:01.050409Z", "url": "https://files.pythonhosted.org/packages/b2/2e/b75ccc8f7630e7ffce33665525ad0fee33cb50d3d2c4fe1ee89d6f070c57/django-jsonview-0.2.2.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "666c8c907095f46663cf7c9af8b74627", "sha256": "f90583660291ce57f7f21200bc62e37f78b74e919c183bdde570a9239c7afc3d"}, "downloads": -1, "filename": "django-jsonview-0.3.0.tar.gz", "has_sig": false, "md5_digest": "666c8c907095f46663cf7c9af8b74627", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5928, "upload_time": "2013-10-29T13:43:43", "upload_time_iso_8601": "2013-10-29T13:43:43.943050Z", "url": "https://files.pythonhosted.org/packages/47/e2/c35140442dbd4d25cb28c621a868159d58d99936d94b777c73150f0ace0b/django-jsonview-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "0f8faff18b80cd3d781144d1d299ac4b", "sha256": "5b746b2d4afd9a9c696f501c385aeb4c6ce855e2415889b1a62979ebdbc27629"}, "downloads": -1, "filename": "django-jsonview-0.4.0.tar.gz", "has_sig": false, "md5_digest": "0f8faff18b80cd3d781144d1d299ac4b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6891, "upload_time": "2014-04-29T22:39:48", "upload_time_iso_8601": "2014-04-29T22:39:48.085245Z", "url": "https://files.pythonhosted.org/packages/d1/c7/45202078ae1aa69f74e447a22bee45152762fd75b33daddad9992794f78c/django-jsonview-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "bf484ff46b87f8a681c390d859fc328c", "sha256": "7ef18f16d1b8ba0dc202f1437abeb4195feaee67c895eb7bd940653807f26191"}, "downloads": -1, "filename": "django-jsonview-0.4.1.tar.gz", "has_sig": false, "md5_digest": "bf484ff46b87f8a681c390d859fc328c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7126, "upload_time": "2014-04-29T23:23:51", "upload_time_iso_8601": "2014-04-29T23:23:51.730274Z", "url": "https://files.pythonhosted.org/packages/6c/18/d6e0b3a302ecf38b2b92d7f98617e4081ba8b8e634e1f175d95910b2658a/django-jsonview-0.4.1.tar.gz", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "05a372366620e2972b5c8832010ee4df", "sha256": "e2c33b3ad4ef18d449fb864afa6d9e85f4560e6877f41905ecc6faaa90b57624"}, "downloads": -1, "filename": "django-jsonview-0.4.2.tar.gz", "has_sig": false, "md5_digest": "05a372366620e2972b5c8832010ee4df", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7253, "upload_time": "2014-05-07T20:30:00", "upload_time_iso_8601": "2014-05-07T20:30:00.052308Z", "url": "https://files.pythonhosted.org/packages/36/6e/e824eb6c5a5a1aa139af9371ca9417ad13f2397d94b773868a8dacb4a6df/django-jsonview-0.4.2.tar.gz", "yanked": false}], "0.4.3": [{"comment_text": "", "digests": {"md5": "a38b7050cdcc32d2e8fdfcea643d21ca", "sha256": "31583d9e1276791d84aa016fdc8791fd18528ac5797dbae118b30e32e0290c4f"}, "downloads": -1, "filename": "django-jsonview-0.4.3.tar.gz", "has_sig": false, "md5_digest": "a38b7050cdcc32d2e8fdfcea643d21ca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7474, "upload_time": "2014-07-16T14:21:45", "upload_time_iso_8601": "2014-07-16T14:21:45.996428Z", "url": "https://files.pythonhosted.org/packages/7e/42/d27b2b1800a0fd8c78da06396cfb1cc8fd71c8329b0b5717c8b34be72102/django-jsonview-0.4.3.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "794c19c4459cbfb848a064a39c35988c", "sha256": "58cc5d5d992ae3fe36084c2eb103e02ec5fbb5470736df17f96b5c3bdc7c8138"}, "downloads": -1, "filename": "django_jsonview-0.5.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "794c19c4459cbfb848a064a39c35988c", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 13079, "upload_time": "2015-08-12T14:33:58", "upload_time_iso_8601": "2015-08-12T14:33:58.893508Z", "url": "https://files.pythonhosted.org/packages/d5/3e/e0f7d4602ea6f648e8a5f3c80d8733d105de774c2a67dc621f3b941a8f03/django_jsonview-0.5.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "060972da1e1551e1931b3592be57bab4", "sha256": "d1544e97dd5e625a77f9539002bcdec3e12c673bdadd491271782ef29016470a"}, "downloads": -1, "filename": "django-jsonview-0.5.0.tar.gz", "has_sig": false, "md5_digest": "060972da1e1551e1931b3592be57bab4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11594, "upload_time": "2015-08-12T14:33:55", "upload_time_iso_8601": "2015-08-12T14:33:55.677987Z", "url": "https://files.pythonhosted.org/packages/27/fe/71c058f1b55618b42e64a3b38cc482b32d9589af5b2bced1547e120d2097/django-jsonview-0.5.0.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "f168150c6fa9c3e0b56d03b11d1942b0", "sha256": "5bf4178cdf8093d74a2cb6d2344ec5206a24d59b4c57ec4aa18b6d75cfa2b40b"}, "downloads": -1, "filename": "django_jsonview-0.5.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f168150c6fa9c3e0b56d03b11d1942b0", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 13761, "upload_time": "2016-05-28T19:45:38", "upload_time_iso_8601": "2016-05-28T19:45:38.123174Z", "url": "https://files.pythonhosted.org/packages/7d/37/1c5c599107ec50ed1c48f06c30c103163e091d71564b2cdb092a927423e9/django_jsonview-0.5.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8595aa97e94abafd9a11937e2acc58f8", "sha256": "7516b1a9c732eab091a52cd446437a67463b68c53bd3328e418cbb552791f2c7"}, "downloads": -1, "filename": "django-jsonview-0.5.1.tar.gz", "has_sig": false, "md5_digest": "8595aa97e94abafd9a11937e2acc58f8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11913, "upload_time": "2016-05-28T19:45:34", "upload_time_iso_8601": "2016-05-28T19:45:34.722475Z", "url": "https://files.pythonhosted.org/packages/93/49/4118cf635256950a7613bb34258a8e82db13fdafa2f7735f47c9987747d6/django-jsonview-0.5.1.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "3bdc4519b8b25fb5756f653509202bd0", "sha256": "0dca666cf49bc054a395abd646e0dad970e444e1f94f856efabe0cb2415b96e5"}, "downloads": -1, "filename": "django_jsonview-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3bdc4519b8b25fb5756f653509202bd0", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 13494, "upload_time": "2016-05-28T22:01:46", "upload_time_iso_8601": "2016-05-28T22:01:46.705625Z", "url": "https://files.pythonhosted.org/packages/b4/66/9a8f6c83d99ef01da5c722d7b213cccc7c17995215f069593782c3f4e8c1/django_jsonview-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e70c836fc4733ef42f253adb5fa49b73", "sha256": "d1cc736c03d582874e21d20be96f302c96ee6f85b8352ed806c6bd8b863f6f77"}, "downloads": -1, "filename": "django-jsonview-1.0.0.tar.gz", "has_sig": false, "md5_digest": "e70c836fc4733ef42f253adb5fa49b73", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11709, "upload_time": "2016-05-28T22:01:42", "upload_time_iso_8601": "2016-05-28T22:01:42.638343Z", "url": "https://files.pythonhosted.org/packages/25/d9/a3ad7ab1a382a07cd188f74f86b9bebeaf74921b9b116ae3f7a1a57fe263/django-jsonview-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "ce0a40045248ff795a4cf374051f5458", "sha256": "9907d4958097db243419063477fa504ff63c7483687f852175452a1ff0d5582a"}, "downloads": -1, "filename": "django_jsonview-1.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ce0a40045248ff795a4cf374051f5458", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 13365, "upload_time": "2017-08-29T13:29:50", "upload_time_iso_8601": "2017-08-29T13:29:50.173152Z", "url": "https://files.pythonhosted.org/packages/de/22/e511152ef88ba5e5b13582b6ddf08bf730777a14c2d1066091403a983c1a/django_jsonview-1.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5cbd1d0447ddbaf3eb2e7f4c27c821b4", "sha256": "b78cc4e3d75e119966d1ad2ae832c38f94ede967e847abee48df51059ddda040"}, "downloads": -1, "filename": "django-jsonview-1.1.0.tar.gz", "has_sig": false, "md5_digest": "5cbd1d0447ddbaf3eb2e7f4c27c821b4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12112, "upload_time": "2017-08-29T13:29:47", "upload_time_iso_8601": "2017-08-29T13:29:47.541028Z", "url": "https://files.pythonhosted.org/packages/72/60/9463637ba26b0145ec97f57cacc2c68fe63807bcf876c14ba220924773b5/django-jsonview-1.1.0.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "6b6329e0faad9f7b944389e523d1333e", "sha256": "424680886d1b694316c5d43b6c8ba291c995e5136126103daab09a84c34ddd9d"}, "downloads": -1, "filename": "django_jsonview-1.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6b6329e0faad9f7b944389e523d1333e", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 9746, "upload_time": "2018-06-14T20:21:20", "upload_time_iso_8601": "2018-06-14T20:21:20.920749Z", "url": "https://files.pythonhosted.org/packages/70/76/26d86dea77f211084657040c1b1e9d4a81a18a4e735d7fa62daaee596732/django_jsonview-1.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b2fb1d5b2d8e36653418a03668ccf427", "sha256": "ed6bf86dbd08d8108517d9fae36ad2579dc57d1df307c386c7a102dd17193547"}, "downloads": -1, "filename": "django-jsonview-1.2.0.tar.gz", "has_sig": false, "md5_digest": "b2fb1d5b2d8e36653418a03668ccf427", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9320, "upload_time": "2018-06-14T20:21:19", "upload_time_iso_8601": "2018-06-14T20:21:19.657146Z", "url": "https://files.pythonhosted.org/packages/6b/70/545d167ad21e6154e37135925ae00e0f56781e816f8622b2445c7a383fe8/django-jsonview-1.2.0.tar.gz", "yanked": false}], "1.3.1": [{"comment_text": "", "digests": {"md5": "83b235a7a212209e0d4d5fb3cea62042", "sha256": "9f0516f13e5e086361c3107069b62a226012b2c2570e6f68d89d4858c6ca2c71"}, "downloads": -1, "filename": "django_jsonview-1.3.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "83b235a7a212209e0d4d5fb3cea62042", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 10431, "upload_time": "2019-10-26T19:16:02", "upload_time_iso_8601": "2019-10-26T19:16:02.395994Z", "url": "https://files.pythonhosted.org/packages/97/4c/e8961c838878d71dc500d945043b212f1910b29e39cce4b7e82248ef0ce5/django_jsonview-1.3.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "372b8fad698e56073fd825dc4fde3d81", "sha256": "067d893a72587c42f4d9cc6fc7d30032a40156ef48e7deb6ff695511f19844a6"}, "downloads": -1, "filename": "django-jsonview-1.3.1.tar.gz", "has_sig": false, "md5_digest": "372b8fad698e56073fd825dc4fde3d81", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9455, "upload_time": "2019-10-26T19:16:04", "upload_time_iso_8601": "2019-10-26T19:16:04.150060Z", "url": "https://files.pythonhosted.org/packages/ab/91/9c85bd15a697381400bbb660591d899521a38406cef2da0941126d202b5a/django-jsonview-1.3.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "83b235a7a212209e0d4d5fb3cea62042", "sha256": "9f0516f13e5e086361c3107069b62a226012b2c2570e6f68d89d4858c6ca2c71"}, "downloads": -1, "filename": "django_jsonview-1.3.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "83b235a7a212209e0d4d5fb3cea62042", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 10431, "upload_time": "2019-10-26T19:16:02", "upload_time_iso_8601": "2019-10-26T19:16:02.395994Z", "url": "https://files.pythonhosted.org/packages/97/4c/e8961c838878d71dc500d945043b212f1910b29e39cce4b7e82248ef0ce5/django_jsonview-1.3.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "372b8fad698e56073fd825dc4fde3d81", "sha256": "067d893a72587c42f4d9cc6fc7d30032a40156ef48e7deb6ff695511f19844a6"}, "downloads": -1, "filename": "django-jsonview-1.3.1.tar.gz", "has_sig": false, "md5_digest": "372b8fad698e56073fd825dc4fde3d81", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9455, "upload_time": "2019-10-26T19:16:04", "upload_time_iso_8601": "2019-10-26T19:16:04.150060Z", "url": "https://files.pythonhosted.org/packages/ab/91/9c85bd15a697381400bbb660591d899521a38406cef2da0941126d202b5a/django-jsonview-1.3.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:35:28 2020"}