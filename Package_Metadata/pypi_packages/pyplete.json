{"info": {"author": "Pablo Martin", "author_email": "goinnn@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Plugins", "Intended Audience :: Developers", "Natural Language :: English", "Programming Language :: Python :: 2.6", "Topic :: Software Development"], "description": "=======\nPyPlete\n=======\n\nInformation\n===========\n\nPYPLETE (PYthon autocomPLETE) is a interface to autocomplete in python.\n\nPyPlete uses pysmell but unlike this, PyPlete is dynamic, it does not need execute a command to pre-analyze the code. This is a good tool to analyze (or autocomplete) the code that you are writing currently\n\nRequeriments\n============\n\n * pysmell\n\nInstallation\n============\n\n * Install `Pysmell <http://pypi.python.org/pypi/pysmell>`_\n * Install `pyplete <http://pypi.python.org/pypi/pyplete>`_\n\n::\n\n easy_install pysmell==0.7.3\n easy_install pyplete==0.0.2\n \nNext features\n=============\n\n * Treatment of the __all__ variable\n * Change the format of importables, this must be a dict\n\n\n\nUsage (examples)\n================\n\n\nGet the top level importable package and modules:\n\n::\n\n    In [1]: from pyplete import PyPlete\n    In [2]: pyplete = PyPlete()\n    In [3]: importables = []\n    In [4]: autocompletes = pyplete.get_importables_top_level(importables)\n    In [5]: autocompletes\n    Out[5]: True\n    In [6]: importables\n    Out[6]: \n    [{'category': 'module', 'text': 'smtpd'},\n     {'category': 'module', 'text': 'make_metadata'},\n     {'category': 'module', 'text': 'strace'},\n     {'category': 'module', 'text': 'rst2man'},\n     {'category': 'module', 'text': 'libxml2macro'},\n     {'category': 'package', 'text': 'django_like'},\n     {'category': 'package', 'text': 'template_repl'},\n     {'category': 'module', 'text': 'pyjslint'},\n     {'category': 'package', 'text': 'pyflakes'},\n     {'category': 'package', 'text': 'hghooks'},\n     {'category': 'package', 'text': 'django'},\n    ...]\n\nGet the importable subpackages:\n\n::\n\n    In [7]: importables = []\n    In [8]: autocompletes = pyplete.get_importables_rest_level(importables, \"django\", into_module=False)\n    In [9]: autocompletes\n    Out[9]: True\n    In [10]: importables\n    Out[10]: \n    [{'category': 'package', 'text': 'bin'},\n     {'category': 'package', 'text': 'conf'},\n     {'category': 'package', 'text': 'contrib'},\n     {'category': 'package', 'text': 'core'},\n     {'category': 'package', 'text': 'db'},\n     {'category': 'package', 'text': 'dispatch'},\n     {'category': 'package', 'text': 'forms'},\n     {'category': 'package', 'text': 'http'},\n     {'category': 'package', 'text': 'middleware'},\n     {'category': 'package', 'text': 'shortcuts'},\n     {'category': 'package', 'text': 'template'},\n     {'category': 'package', 'text': 'templatetags'},\n     {'category': 'package', 'text': 'test'},\n     {'category': 'module', 'text': 'test.pystone'},\n     {'category': 'module', 'text': 'test.regrtest'},\n     {'category': 'module', 'text': 'test.test_support'},\n     {'category': 'package', 'text': 'utils'},\n     {'category': 'package', 'text': 'views'}]\n\nGet the importable names:\n\n::\n\n    In [11]: importables = []\n    In [12]: autocompletes = pyplete.get_importables_rest_level(importables, \"django\")\n    In [13]: autocompletes\n    Out[13]: True\n    In [14]: importables\n    Out[14]:\n    [{'category': 'constant', 'text': 'VERSION'},\n     {'args': ' (version=None)',\n      'category': 'function',\n      'description': 'Derives a PEP386-compliant version number from VERSION.',\n      'text': 'get_version'},\n     {'category': 'module', 'text': 'test.pystone'},\n     {'category': 'module', 'text': 'test.regrtest'},\n     {'category': 'module', 'text': 'test.test_support'},\n     {'category': 'package', 'text': 'bin'},\n     {'category': 'package', 'text': 'conf'},\n     {'category': 'package', 'text': 'contrib'},\n     {'category': 'package', 'text': 'core'},\n     {'category': 'package', 'text': 'db'},\n     {'category': 'package', 'text': 'dispatch'},\n     {'category': 'package', 'text': 'forms'},\n     {'category': 'package', 'text': 'http'},\n     {'category': 'package', 'text': 'middleware'},\n     {'category': 'package', 'text': 'shortcuts'},\n     {'category': 'package', 'text': 'template'},\n     {'category': 'package', 'text': 'templatetags'},\n     {'category': 'package', 'text': 'test'},\n     {'category': 'package', 'text': 'utils'},\n     {'category': 'package', 'text': 'views'},\n     {'category': 'pointer', 'text': 'get_svn_revision'}]\n\n\n\nOther example to the importable names:\n\n::\n\n    In [15]: importables = []\n    In [16]: autocompletes = pyplete.get_importables_rest_level(importables, \"django\", [\"contrib\", \"auth\", \"models\"], into_module=True)\n    Out[16]:\n    [{'args': ' ()',\n      'category': 'class',\n      'description': '\\n    Users within the Django authentication system are represented by this\\n    model.\\n\\n    Username and password are required. Other fields are optional.\\n    ',\n      'text': 'User'},\n     {'args': ' ()',\n      'category': 'class',\n      'description': \"\\n    The manager for the auth's Group model.\\n    \",\n      'text': 'GroupManager'},\n     {'args': ' ()',\n      'category': 'class',\n      'description': '',\n      'text': 'PermissionManager'},\n     {'args': ' ()',\n      'category': 'class',\n      'description': '\\n    The permissions system provides a way to assign permissions to specific\\n    users and groups of users.\\n\\n    The permission system is used by the Django admin site, but may also be\\n    useful in your own code. The Django admin site uses permissions as follows:\\n\\n        - The \"add\" permission limits the user\\'s ability to view the \"add\" form\\n          and add an object.\\n        - The \"change\" permission limits a user\\'s ability to view the change\\n          list, view the \"change\" form and change an object.\\n        - The \"delete\" permission limits the ability to delete an object.\\n\\n    Permissions are set globally per type of object, not per specific object\\n    instance. It is possible to say \"Mary may change news stories,\" but it\\'s\\n    not currently possible to say \"Mary may change news stories, but only the\\n    ones she created herself\" or \"Mary may only change news stories that have a\\n    certain status or publication date.\"\\n\\n    Three basic permissions -- add, change and delete -- are automatically\\n    created for each Django model.\\n    ',\n      'text': 'Permission'},\n     {'args': ' ()',\n      'category': 'class',\n      'description': \"\\n    Groups are a generic way of categorizing users to apply permissions, or\\n    some other label, to those users. A user can belong to any number of\\n    groups.\\n\\n    A user in a group automatically has all the permissions granted to that\\n    group. For example, if the group Site editors has the permission\\n    can_edit_home_page, any user in that group will have that permission.\\n\\n    Beyond permissions, groups are a convenient way to categorize users to\\n    apply some label, or extended functionality, to them. For example, you\\n    could create a group 'Special users', and you could write code that would\\n    do special things to those users -- such as giving them access to a\\n    members-only portion of your site, or sending them members-only email\\n    messages.\\n    \",\n      'text': 'Group'},\n     {'args': ' ()',\n      'category': 'class',\n      'description': '',\n      'text': 'UserManager'},\n     {'args': ' ()',\n      'category': 'class',\n      'description': '',\n      'text': 'SiteProfileNotAvailable'},\n     {'args': ' ()',\n      'category': 'class',\n      'description': '',\n      'text': 'AnonymousUser'},\n     {'args': ' (sender, user, **kwargs)',\n      'category': 'function',\n      'description': '\\n    A signal receiver which updates the last_login date for\\n    the user logging in.\\n    ',\n      'text': 'update_last_login'},\n     {'args': ' (user, obj)',\n      'category': 'function',\n      'description': '',\n      'text': '_user_get_all_permissions'},\n     {'args': ' (user, perm, obj)',\n      'category': 'function',\n      'description': '',\n      'text': '_user_has_perm'},\n     {'args': ' (user, app_label)',\n      'category': 'function',\n      'description': '',\n      'text': '_user_has_module_perms'},\n     {'category': 'pointer', 'text': 'check_password'},\n     {'category': 'pointer', 'text': 'models'},\n     {'category': 'pointer', 'text': 'auth'},\n     {'category': 'pointer', 'text': '_'},\n     {'category': 'pointer', 'text': 'get_random_string'},\n     {'category': 'pointer', 'text': 'settings'},\n     {'category': 'pointer', 'text': 'ImproperlyConfigured'},\n     {'category': 'pointer', 'text': 'make_password'},\n     {'category': 'pointer', 'text': 'send_mail'},\n     {'category': 'pointer', 'text': 'EmptyManager'},\n     {'category': 'pointer', 'text': 'user_logged_in'},\n     {'category': 'pointer', 'text': 'smart_str'},\n     {'category': 'pointer', 'text': 'timezone'},\n     {'category': 'pointer', 'text': 'UNUSABLE_PASSWORD'},\n     {'category': 'pointer', 'text': 'ContentType'},\n     {'category': 'pointer', 'text': 'is_password_usable'},\n     {'category': 'pointer', 'text': 'urllib'}]\n\n\nGet names importables from a text:\n\n::\n\n    In [17]: importables = []\n    In [18]: text = \"\"\"class A(object):\n    ....:     def __init__(self, x, y, z):\n    ....:         self.x = x\n    ....:         self.y = y\n    ....:         self.z = z\n    ....:     def xxx(self, a):\n    ....:         return a\n    ....: def myfunc(u, v):\n    ....:     return u + v\"\"\"\n    In [19]: autocompletes = pyplete.get_importables_from_text(importables, text)\n    In [20]: importables\n    Out[20]: \n    [{'args': ' (x, y, z)', 'category': 'class', 'description': '', 'text': 'A'},\n     {'args': ' (u, v)',\n      'category': 'function',\n      'description': '',\n      'text': 'myfunc'}]\n\n\nGet names importables from a line:\n\n::\n\n    In [21]: importables = []\n    In [22]: text = \"import requests\"\n             line = \"requests.models.\"\n    In [23]: pyplete.get_importables_from_line(importables, text, line)\n    Out[23]: \n    [{'args': ' (url=None, headers=dict(), files=None, method=None, data=dict(), params=dict(), auth=None, cookies=None, timeout=None, redirect=False, allow_redirects=False, proxies=None, hooks=None, config=None, _poolmanager=None, verify=None, session=None)',\n      'category': 'class',\n      'description': 'The :class:`Request <Request>` object. It carries out all functionality of\\n    Requests. Recommended interface is with the Requests functions.\\n    ',\n      'text': 'Request'},\n     {'args': ' ()',\n      'category': 'class',\n      'description': 'The core :class:`Response <Response>` object. All\\n    :class:`Request <Request>` objects contain a\\n    :class:`response <Response>` attribute, which is an instance\\n    of this class.\\n    ',\n      'text': 'Response'},\n     {'category': 'constant', 'text': 'REDIRECT_STATI'},\n     {'category': 'pointer', 'text': 'HTTPResponse'},\n     {'category': 'pointer', 'text': 'urljoin'},\n     {'category': 'pointer', 'text': 'get_encoding_from_headers'},\n     {'category': 'pointer', 'text': 'dispatch_hook'},\n     {'category': 'pointer', 'text': 'MaxRetryError'},\n     {'category': 'pointer', 'text': 'TooManyRedirects'},\n     {'category': 'pointer', 'text': 'datetime'},\n     {'category': 'pointer', 'text': '_HTTPError'},\n     {'category': 'pointer', 'text': '_SSLError'},\n     {'category': 'pointer', 'text': 'connectionpool'},\n     {'category': 'pointer', 'text': 'encode_multipart_formdata'},\n     {'category': 'pointer', 'text': 'get_netrc_auth'},\n     {'category': 'pointer', 'text': 'Timeout'},\n     {'category': 'pointer', 'text': 'urlencode'},\n     {'category': 'pointer', 'text': 'RequestException'},\n     {'category': 'pointer', 'text': 'urlunparse'},\n     {'category': 'pointer', 'text': 'is_py2'},\n     {'category': 'pointer', 'text': 'ConnectionError'},\n     {'category': 'pointer', 'text': 'str'},\n     {'category': 'pointer', 'text': 'CaseInsensitiveDict'},\n     {'category': 'pointer', 'text': 'HTTPProxyAuth'},\n     {'category': 'pointer', 'text': 'bytes'},\n     {'category': 'pointer', 'text': 'chardet'},\n     {'category': 'pointer', 'text': 'guess_filename'},\n     {'category': 'pointer', 'text': 'requote_uri'},\n     {'category': 'pointer', 'text': 'stream_decode_response_unicode'},\n     {'category': 'pointer', 'text': 'SCHEMAS'},\n     {'category': 'pointer', 'text': 'poolmanager'},\n     {'category': 'pointer', 'text': 'dict_from_string'},\n     {'category': 'pointer', 'text': 'codes'},\n     {'category': 'pointer', 'text': 'URLRequired'},\n     {'category': 'pointer', 'text': 'HOOKS'},\n     {'category': 'pointer', 'text': 'SimpleCookie'},\n     {'category': 'pointer', 'text': 'os'},\n     {'category': 'pointer', 'text': 'stream_untransfer'},\n     {'category': 'pointer', 'text': 'SSLError'},\n     {'category': 'pointer', 'text': 'urlsplit'},\n     {'category': 'pointer', 'text': 'HTTPBasicAuth'},\n     {'category': 'pointer', 'text': 'urlparse'},\n     {'category': 'pointer', 'text': 'HTTPError'}]\n\n\nReleases\n========\n\n0.0.5 (2013-03-29)\n------------------\n\n * Finally fix a little error in get_pysmell_code_walk_to_text (only if the text was unicode characters)\n\n\n\n0.0.4 (2013-03-28)\n------------------\n\n * Fix a little error in get_pysmell_code_walk_to_text (only if the text was unicode characters)\n\n\n\n0.0.3 (2013-03-26)\n------------------\n\n * Fix a little error in get_importables_from_line\n\n\n0.0.2 (2012-09-02)\n------------------\n\n * Now get to analize the relative imports, something like this:\n\n::\n\n   from models import MyModel # from the same directory of the models.py\n\nAnd this:\n\n::\n\n   from .models import MyModel # from the same directory of the models.py\n\n\n0.0.1 (2012-07-09)\n------------------\n\n * Initial release. `Previous history to pyplete <https://github.com/goinnn/Kate-plugins/commits/master/kate_plugins/pyte_plugins/autocomplete/pyplete.py>`_", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/goinnn/pyplete", "keywords": "pyplete,python,autocomplete,python autocomplete,python analizer", "license": "GNU Lesser General Public License", "maintainer": null, "maintainer_email": null, "name": "pyplete", "package_url": "https://pypi.org/project/pyplete/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pyplete/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/goinnn/pyplete"}, "release_url": "https://pypi.org/project/pyplete/0.0.5/", "requires_dist": null, "requires_python": null, "summary": "PYPLETE (PYthon autocomPLETE) is a interface to autocomplete in python", "version": "0.0.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"information\">\n<h2>Information</h2>\n<p>PYPLETE (PYthon autocomPLETE) is a interface to autocomplete in python.</p>\n<p>PyPlete uses pysmell but unlike this, PyPlete is dynamic, it does not need execute a command to pre-analyze the code. This is a good tool to analyze (or autocomplete) the code that you are writing currently</p>\n</div>\n<div id=\"requeriments\">\n<h2>Requeriments</h2>\n<blockquote>\n<ul>\n<li>pysmell</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<blockquote>\n<ul>\n<li>Install <a href=\"http://pypi.python.org/pypi/pysmell\" rel=\"nofollow\">Pysmell</a></li>\n<li>Install <a href=\"http://pypi.python.org/pypi/pyplete\" rel=\"nofollow\">pyplete</a></li>\n</ul>\n</blockquote>\n<pre>easy_install pysmell==0.7.3\neasy_install pyplete==0.0.2\n</pre>\n</div>\n<div id=\"next-features\">\n<h2>Next features</h2>\n<blockquote>\n<ul>\n<li>Treatment of the __all__ variable</li>\n<li>Change the format of importables, this must be a dict</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"usage-examples\">\n<h2>Usage (examples)</h2>\n<p>Get the top level importable package and modules:</p>\n<pre>In [1]: from pyplete import PyPlete\nIn [2]: pyplete = PyPlete()\nIn [3]: importables = []\nIn [4]: autocompletes = pyplete.get_importables_top_level(importables)\nIn [5]: autocompletes\nOut[5]: True\nIn [6]: importables\nOut[6]:\n[{'category': 'module', 'text': 'smtpd'},\n {'category': 'module', 'text': 'make_metadata'},\n {'category': 'module', 'text': 'strace'},\n {'category': 'module', 'text': 'rst2man'},\n {'category': 'module', 'text': 'libxml2macro'},\n {'category': 'package', 'text': 'django_like'},\n {'category': 'package', 'text': 'template_repl'},\n {'category': 'module', 'text': 'pyjslint'},\n {'category': 'package', 'text': 'pyflakes'},\n {'category': 'package', 'text': 'hghooks'},\n {'category': 'package', 'text': 'django'},\n...]\n</pre>\n<p>Get the importable subpackages:</p>\n<pre>In [7]: importables = []\nIn [8]: autocompletes = pyplete.get_importables_rest_level(importables, \"django\", into_module=False)\nIn [9]: autocompletes\nOut[9]: True\nIn [10]: importables\nOut[10]:\n[{'category': 'package', 'text': 'bin'},\n {'category': 'package', 'text': 'conf'},\n {'category': 'package', 'text': 'contrib'},\n {'category': 'package', 'text': 'core'},\n {'category': 'package', 'text': 'db'},\n {'category': 'package', 'text': 'dispatch'},\n {'category': 'package', 'text': 'forms'},\n {'category': 'package', 'text': 'http'},\n {'category': 'package', 'text': 'middleware'},\n {'category': 'package', 'text': 'shortcuts'},\n {'category': 'package', 'text': 'template'},\n {'category': 'package', 'text': 'templatetags'},\n {'category': 'package', 'text': 'test'},\n {'category': 'module', 'text': 'test.pystone'},\n {'category': 'module', 'text': 'test.regrtest'},\n {'category': 'module', 'text': 'test.test_support'},\n {'category': 'package', 'text': 'utils'},\n {'category': 'package', 'text': 'views'}]\n</pre>\n<p>Get the importable names:</p>\n<pre>In [11]: importables = []\nIn [12]: autocompletes = pyplete.get_importables_rest_level(importables, \"django\")\nIn [13]: autocompletes\nOut[13]: True\nIn [14]: importables\nOut[14]:\n[{'category': 'constant', 'text': 'VERSION'},\n {'args': ' (version=None)',\n  'category': 'function',\n  'description': 'Derives a PEP386-compliant version number from VERSION.',\n  'text': 'get_version'},\n {'category': 'module', 'text': 'test.pystone'},\n {'category': 'module', 'text': 'test.regrtest'},\n {'category': 'module', 'text': 'test.test_support'},\n {'category': 'package', 'text': 'bin'},\n {'category': 'package', 'text': 'conf'},\n {'category': 'package', 'text': 'contrib'},\n {'category': 'package', 'text': 'core'},\n {'category': 'package', 'text': 'db'},\n {'category': 'package', 'text': 'dispatch'},\n {'category': 'package', 'text': 'forms'},\n {'category': 'package', 'text': 'http'},\n {'category': 'package', 'text': 'middleware'},\n {'category': 'package', 'text': 'shortcuts'},\n {'category': 'package', 'text': 'template'},\n {'category': 'package', 'text': 'templatetags'},\n {'category': 'package', 'text': 'test'},\n {'category': 'package', 'text': 'utils'},\n {'category': 'package', 'text': 'views'},\n {'category': 'pointer', 'text': 'get_svn_revision'}]\n</pre>\n<p>Other example to the importable names:</p>\n<pre>In [15]: importables = []\nIn [16]: autocompletes = pyplete.get_importables_rest_level(importables, \"django\", [\"contrib\", \"auth\", \"models\"], into_module=True)\nOut[16]:\n[{'args': ' ()',\n  'category': 'class',\n  'description': '\\n    Users within the Django authentication system are represented by this\\n    model.\\n\\n    Username and password are required. Other fields are optional.\\n    ',\n  'text': 'User'},\n {'args': ' ()',\n  'category': 'class',\n  'description': \"\\n    The manager for the auth's Group model.\\n    \",\n  'text': 'GroupManager'},\n {'args': ' ()',\n  'category': 'class',\n  'description': '',\n  'text': 'PermissionManager'},\n {'args': ' ()',\n  'category': 'class',\n  'description': '\\n    The permissions system provides a way to assign permissions to specific\\n    users and groups of users.\\n\\n    The permission system is used by the Django admin site, but may also be\\n    useful in your own code. The Django admin site uses permissions as follows:\\n\\n        - The \"add\" permission limits the user\\'s ability to view the \"add\" form\\n          and add an object.\\n        - The \"change\" permission limits a user\\'s ability to view the change\\n          list, view the \"change\" form and change an object.\\n        - The \"delete\" permission limits the ability to delete an object.\\n\\n    Permissions are set globally per type of object, not per specific object\\n    instance. It is possible to say \"Mary may change news stories,\" but it\\'s\\n    not currently possible to say \"Mary may change news stories, but only the\\n    ones she created herself\" or \"Mary may only change news stories that have a\\n    certain status or publication date.\"\\n\\n    Three basic permissions -- add, change and delete -- are automatically\\n    created for each Django model.\\n    ',\n  'text': 'Permission'},\n {'args': ' ()',\n  'category': 'class',\n  'description': \"\\n    Groups are a generic way of categorizing users to apply permissions, or\\n    some other label, to those users. A user can belong to any number of\\n    groups.\\n\\n    A user in a group automatically has all the permissions granted to that\\n    group. For example, if the group Site editors has the permission\\n    can_edit_home_page, any user in that group will have that permission.\\n\\n    Beyond permissions, groups are a convenient way to categorize users to\\n    apply some label, or extended functionality, to them. For example, you\\n    could create a group 'Special users', and you could write code that would\\n    do special things to those users -- such as giving them access to a\\n    members-only portion of your site, or sending them members-only email\\n    messages.\\n    \",\n  'text': 'Group'},\n {'args': ' ()',\n  'category': 'class',\n  'description': '',\n  'text': 'UserManager'},\n {'args': ' ()',\n  'category': 'class',\n  'description': '',\n  'text': 'SiteProfileNotAvailable'},\n {'args': ' ()',\n  'category': 'class',\n  'description': '',\n  'text': 'AnonymousUser'},\n {'args': ' (sender, user, **kwargs)',\n  'category': 'function',\n  'description': '\\n    A signal receiver which updates the last_login date for\\n    the user logging in.\\n    ',\n  'text': 'update_last_login'},\n {'args': ' (user, obj)',\n  'category': 'function',\n  'description': '',\n  'text': '_user_get_all_permissions'},\n {'args': ' (user, perm, obj)',\n  'category': 'function',\n  'description': '',\n  'text': '_user_has_perm'},\n {'args': ' (user, app_label)',\n  'category': 'function',\n  'description': '',\n  'text': '_user_has_module_perms'},\n {'category': 'pointer', 'text': 'check_password'},\n {'category': 'pointer', 'text': 'models'},\n {'category': 'pointer', 'text': 'auth'},\n {'category': 'pointer', 'text': '_'},\n {'category': 'pointer', 'text': 'get_random_string'},\n {'category': 'pointer', 'text': 'settings'},\n {'category': 'pointer', 'text': 'ImproperlyConfigured'},\n {'category': 'pointer', 'text': 'make_password'},\n {'category': 'pointer', 'text': 'send_mail'},\n {'category': 'pointer', 'text': 'EmptyManager'},\n {'category': 'pointer', 'text': 'user_logged_in'},\n {'category': 'pointer', 'text': 'smart_str'},\n {'category': 'pointer', 'text': 'timezone'},\n {'category': 'pointer', 'text': 'UNUSABLE_PASSWORD'},\n {'category': 'pointer', 'text': 'ContentType'},\n {'category': 'pointer', 'text': 'is_password_usable'},\n {'category': 'pointer', 'text': 'urllib'}]\n</pre>\n<p>Get names importables from a text:</p>\n<pre>In [17]: importables = []\nIn [18]: text = \"\"\"class A(object):\n....:     def __init__(self, x, y, z):\n....:         self.x = x\n....:         self.y = y\n....:         self.z = z\n....:     def xxx(self, a):\n....:         return a\n....: def myfunc(u, v):\n....:     return u + v\"\"\"\nIn [19]: autocompletes = pyplete.get_importables_from_text(importables, text)\nIn [20]: importables\nOut[20]:\n[{'args': ' (x, y, z)', 'category': 'class', 'description': '', 'text': 'A'},\n {'args': ' (u, v)',\n  'category': 'function',\n  'description': '',\n  'text': 'myfunc'}]\n</pre>\n<p>Get names importables from a line:</p>\n<pre>In [21]: importables = []\nIn [22]: text = \"import requests\"\n         line = \"requests.models.\"\nIn [23]: pyplete.get_importables_from_line(importables, text, line)\nOut[23]:\n[{'args': ' (url=None, headers=dict(), files=None, method=None, data=dict(), params=dict(), auth=None, cookies=None, timeout=None, redirect=False, allow_redirects=False, proxies=None, hooks=None, config=None, _poolmanager=None, verify=None, session=None)',\n  'category': 'class',\n  'description': 'The :class:`Request &lt;Request&gt;` object. It carries out all functionality of\\n    Requests. Recommended interface is with the Requests functions.\\n    ',\n  'text': 'Request'},\n {'args': ' ()',\n  'category': 'class',\n  'description': 'The core :class:`Response &lt;Response&gt;` object. All\\n    :class:`Request &lt;Request&gt;` objects contain a\\n    :class:`response &lt;Response&gt;` attribute, which is an instance\\n    of this class.\\n    ',\n  'text': 'Response'},\n {'category': 'constant', 'text': 'REDIRECT_STATI'},\n {'category': 'pointer', 'text': 'HTTPResponse'},\n {'category': 'pointer', 'text': 'urljoin'},\n {'category': 'pointer', 'text': 'get_encoding_from_headers'},\n {'category': 'pointer', 'text': 'dispatch_hook'},\n {'category': 'pointer', 'text': 'MaxRetryError'},\n {'category': 'pointer', 'text': 'TooManyRedirects'},\n {'category': 'pointer', 'text': 'datetime'},\n {'category': 'pointer', 'text': '_HTTPError'},\n {'category': 'pointer', 'text': '_SSLError'},\n {'category': 'pointer', 'text': 'connectionpool'},\n {'category': 'pointer', 'text': 'encode_multipart_formdata'},\n {'category': 'pointer', 'text': 'get_netrc_auth'},\n {'category': 'pointer', 'text': 'Timeout'},\n {'category': 'pointer', 'text': 'urlencode'},\n {'category': 'pointer', 'text': 'RequestException'},\n {'category': 'pointer', 'text': 'urlunparse'},\n {'category': 'pointer', 'text': 'is_py2'},\n {'category': 'pointer', 'text': 'ConnectionError'},\n {'category': 'pointer', 'text': 'str'},\n {'category': 'pointer', 'text': 'CaseInsensitiveDict'},\n {'category': 'pointer', 'text': 'HTTPProxyAuth'},\n {'category': 'pointer', 'text': 'bytes'},\n {'category': 'pointer', 'text': 'chardet'},\n {'category': 'pointer', 'text': 'guess_filename'},\n {'category': 'pointer', 'text': 'requote_uri'},\n {'category': 'pointer', 'text': 'stream_decode_response_unicode'},\n {'category': 'pointer', 'text': 'SCHEMAS'},\n {'category': 'pointer', 'text': 'poolmanager'},\n {'category': 'pointer', 'text': 'dict_from_string'},\n {'category': 'pointer', 'text': 'codes'},\n {'category': 'pointer', 'text': 'URLRequired'},\n {'category': 'pointer', 'text': 'HOOKS'},\n {'category': 'pointer', 'text': 'SimpleCookie'},\n {'category': 'pointer', 'text': 'os'},\n {'category': 'pointer', 'text': 'stream_untransfer'},\n {'category': 'pointer', 'text': 'SSLError'},\n {'category': 'pointer', 'text': 'urlsplit'},\n {'category': 'pointer', 'text': 'HTTPBasicAuth'},\n {'category': 'pointer', 'text': 'urlparse'},\n {'category': 'pointer', 'text': 'HTTPError'}]\n</pre>\n</div>\n<div id=\"releases\">\n<h2>Releases</h2>\n<div id=\"id2\">\n<h3>0.0.5 (2013-03-29)</h3>\n<blockquote>\n<ul>\n<li>Finally fix a little error in get_pysmell_code_walk_to_text (only if the text was unicode characters)</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id3\">\n<h3>0.0.4 (2013-03-28)</h3>\n<blockquote>\n<ul>\n<li>Fix a little error in get_pysmell_code_walk_to_text (only if the text was unicode characters)</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id4\">\n<h3>0.0.3 (2013-03-26)</h3>\n<blockquote>\n<ul>\n<li>Fix a little error in get_importables_from_line</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id5\">\n<h3>0.0.2 (2012-09-02)</h3>\n<blockquote>\n<ul>\n<li>Now get to analize the relative imports, something like this:</li>\n</ul>\n</blockquote>\n<pre>from models import MyModel # from the same directory of the models.py\n</pre>\n<p>And this:</p>\n<pre>from .models import MyModel # from the same directory of the models.py\n</pre>\n</div>\n<div id=\"id6\">\n<h3>0.0.1 (2012-07-09)</h3>\n<blockquote>\n<ul>\n<li>Initial release. <a href=\"https://github.com/goinnn/Kate-plugins/commits/master/kate_plugins/pyte_plugins/autocomplete/pyplete.py\" rel=\"nofollow\">Previous history to pyplete</a></li>\n</ul>\n</blockquote>\n</div>\n</div>\n\n          </div>"}, "last_serial": 797547, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "161a6a9154eca23441a436ff9b58a60e", "sha256": "4f26af29ea7a0b59855551bc8d22fb27d1658e17d3d53d692610d25a85a46552"}, "downloads": -1, "filename": "pyplete-0.0.1.tar.gz", "has_sig": false, "md5_digest": "161a6a9154eca23441a436ff9b58a60e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6469, "upload_time": "2012-07-09T11:50:40", "upload_time_iso_8601": "2012-07-09T11:50:40.521777Z", "url": "https://files.pythonhosted.org/packages/96/9c/0245355dd273a6de48b647c26af6fd7ce882300b971b82c63abf3a77be25/pyplete-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "a88dc00f906adba93af73fb203ef2148", "sha256": "f74763659aac225f7ddf6d09748be27a9b947044d37b3f79de61a32749ded697"}, "downloads": -1, "filename": "pyplete-0.0.2.tar.gz", "has_sig": false, "md5_digest": "a88dc00f906adba93af73fb203ef2148", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12366, "upload_time": "2012-09-02T18:47:17", "upload_time_iso_8601": "2012-09-02T18:47:17.221582Z", "url": "https://files.pythonhosted.org/packages/15/dc/3d3df44610a73032c9dc54320e11faa683c48e451e843b7f1d4eb912a9d3/pyplete-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "bb45e69e6d566f3265c4ac7127476cc6", "sha256": "453d2b4f5a55cf45547630a3de6d6f2b079e0ef8337ef18694466b672d6c9327"}, "downloads": -1, "filename": "pyplete-0.0.3.tar.gz", "has_sig": false, "md5_digest": "bb45e69e6d566f3265c4ac7127476cc6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9315, "upload_time": "2013-03-26T16:21:59", "upload_time_iso_8601": "2013-03-26T16:21:59.165374Z", "url": "https://files.pythonhosted.org/packages/b8/79/d760f26955a7d140851e917f4385ec72a789663481dd73fe50661d8b1082/pyplete-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "896f2833f7c34384241cc40ec23c66b9", "sha256": "195703bd7524e6b47d4ba977fd40d87618b1a0af5aeb3e200b60d89ca548d5ed"}, "downloads": -1, "filename": "pyplete-0.0.4.tar.gz", "has_sig": false, "md5_digest": "896f2833f7c34384241cc40ec23c66b9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9510, "upload_time": "2013-03-28T15:39:40", "upload_time_iso_8601": "2013-03-28T15:39:40.348563Z", "url": "https://files.pythonhosted.org/packages/b7/84/31b7d7792ac508e75292c0a68e0a375ded2507c3d42eb3081e119247c499/pyplete-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "53addd8cd0d3745fe7267e97c2eb135b", "sha256": "a0dd088a3fd64c564a589341d90edb73e391f0c2702c079f582a53275f615dd3"}, "downloads": -1, "filename": "pyplete-0.0.5.tar.gz", "has_sig": false, "md5_digest": "53addd8cd0d3745fe7267e97c2eb135b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9562, "upload_time": "2013-03-30T12:54:49", "upload_time_iso_8601": "2013-03-30T12:54:49.470322Z", "url": "https://files.pythonhosted.org/packages/26/3b/37b95a0c0c8d91c91fecf8ab70fd58b08a6b2688a458baa382e00fc40a4a/pyplete-0.0.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "53addd8cd0d3745fe7267e97c2eb135b", "sha256": "a0dd088a3fd64c564a589341d90edb73e391f0c2702c079f582a53275f615dd3"}, "downloads": -1, "filename": "pyplete-0.0.5.tar.gz", "has_sig": false, "md5_digest": "53addd8cd0d3745fe7267e97c2eb135b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9562, "upload_time": "2013-03-30T12:54:49", "upload_time_iso_8601": "2013-03-30T12:54:49.470322Z", "url": "https://files.pythonhosted.org/packages/26/3b/37b95a0c0c8d91c91fecf8ab70fd58b08a6b2688a458baa382e00fc40a4a/pyplete-0.0.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:59:24 2020"}