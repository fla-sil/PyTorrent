{"info": {"author": "Alexander Berkovich", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: Education", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Operating System :: Microsoft :: Windows", "Operating System :: OS Independent", "Operating System :: POSIX", "Operating System :: Unix", "Programming Language :: Python", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3 :: Only", "Programming Language :: Python :: Implementation :: CPython", "Topic :: Desktop Environment", "Topic :: Education", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Utilities"], "description": "## AlexBerUtils\n\nAlexBerUtils is collection of the small utilities. See CHANGELOG.md for detail description.\n\n\n\n### Getting Help\n\n\n### QuickStart\n```bash\npython3 -m pip install -U alex-ber-utils\n```\n\n\n### Installing from Github\n\n```bash\npython3 -m pip install -U https://github.com/alex-ber/AlexBerUtils/archive/master.zip\n```\nOptionally installing tests requirements.\n\n```bash\npython3 -m pip install -U https://github.com/alex-ber/AlexBerUtils/archive/master.zip#egg=alex-ber-utils[tests]\n```\n\nOr explicitly:\n\n```bash\nwget https://github.com/alex-ber/AlexBerUtils/archive/master.zip -O master.zip; unzip master.zip; rm master.zip\n```\nAnd then installing from source (see below).\n\n\n### Installing from source\n```bash\npython3 -m pip install . # only installs \"required\"\n```\n```bash\npython3 -m pip install .[tests] # installs dependencies for tests\n```\n```bash\npython3 -m pip install .[md]   # installs multidispatcher (used in method_overloading_test.py)\n```\n```bash\npython3 -m pip install .[fabric]   # installs fabric (used in fabs.py)\n```\n```bash\npython3 -m pip install .[yml]   # installs Yml related dependencies \n                                # (used in ymlparsers.py, init_app_conf.py, deploys.py;\n                                # optionally used in ymlparsers_extra.py, emails.py)\n```\n```bash\npython3 -m pip install .[env]   # installs pydotenv (optionally used in deploys.py)\n```\n\n#### Alternatively you install install from requirements file:\n```bash\npython3 -m pip install -r requirements.txt # only installs \"required\"\n```\n```bash\npython3 -m pip install -r requirements-tests.txt # installs dependencies for tests\n```\n```bash\npython3 -m pip install -r requirements-md.txt   # installs multidispatcher (used in method_overloading_test.py)\n```\n```bash\npython3 -m pip install -r requirements-fabric.txt   # installs fabric (used in fabs.py)\n```\n```bash\npython3 -m pip install -r requirements-yml.txt   # installs Yml related dependencies \n                                                 # (used in ymlparsers.py, init_app_conf.py, deploys.py;\n                                                 # optionally used in ymlparsers_extra.py, emails.py)\n```\n```bash\npython3 -m pip install -r requirements-env.txt   # installs pydotenv (optionally used in deploys.py)\n```\n\n\n##\n\nFrom the directory with setup.py\n```bash\npython3 setup.py test #run all tests\n```\n\nor\n\n```bash\n\npytest\n```\n\n## Installing new version\nSee https://docs.python.org/3.1/distutils/uploading.html \n\n```bash\npython3 setup.py sdist upload\n```\n\n## Requirements\n\n\nAlexBerUtils requires the following modules.\n\n* Python 3.7+\n\n* PyYAML==5.1\n\n# Changelog\nAll notable changes to this project will be documented in this file.\n\n\\#https://pypi.org/manage/project/alex-ber-utils/releases/\n\n## [Unrelased]\n\n\n\n\n## [0.5.1] - 06-05-2020\n### Added \n\n- `mains` module explanation article https://medium.com/@alex_ber/making-relative-path-to-file-to-work-d5d0f1da67bf is published.\n\n- `fabs` module. It adds cp method to fabric.Connection.\n\nThis method is Linux-like cp command. It copies single file to remote (Posix) machine. \n\n- Spited dependency list for setup.py req.txt (inexact versions, direct dependency only) and for \nreproducible installation requirements.txt (exact versions, all, including transitive dependencies).\n\n- Added req-fabric.txt, requirements-fabric.txt - Fabric, used in `fabs` module.\n\n- Added req-yml.txt, requirements-yml.txt - Yml-related dependencies, used in ymlparsers.py \nand in init_app_conf.py, deploys.py; optionally used in ymlparsers_extra.py, emails.py.\n\nMain dependency is HiYaPyCo. I'm using feature that is availlable in the minimal version.\n\nHiYaPyCo depends upon PyYAML and Jinja2. Limitations for Jinja2 is from HiYaPyCo project.\n\n- Added req-env.txt, requirements-env.txt - pydotenv, optionally used in deploys.py.\n\n- Added `inspects.has_method`(cls, methodName). Check if class cls has method with name methodName directly, \nor in one of it's super-classes.\n\n- Added `pareser.parse_sys_args` function parses command line arguments.\n\n- Added `ymlparsers` module - `load`/`safe_dump` a Hierarchical Yml files. This is essentially wrapper arround HiYaPyCo project with streamlined \nand extended API and couple of work-arrounds. \n\nNote: this module doesn't use any package-level variables in hiYaPyCo module, including hiYaPyCo.jinja2env.\nThis module do use Jinja2's `Environment`.  \n\nIt also has another defaults for `load`/`safe_dump` methods.\nThey can be overridden in `initConfig()` function.\n\n`safe_dump()` method supports simple Python objects like primitive types (str, integer, etc), list, dict, **OrderedDict**.\n\n`as_str()`- convenient method for getting str representation of the data,\nfor example of dict.\n\n`DisableVarSubst` - use of this context manager disables variable substation in the `load()` function.\n\n`initConfig` - this method reset some defaults. If running from the MainThread, this method is idempotent.\n\n- Added `init_app_conf` **major** module. \n\nThe main function is `parse_config`.  This function parses command line arguments first.\nThan it parse yml files. Command line arguments overrides yml files arguments. \nParameters of yml files we always try to convert on best-effort basses.\nParameters of system args we try convert according to `implicit_convert` param.\n\nIf you supply `implicit_convert=True`, than `mask_value()` will be applied to the flat map (first parameter).\nOtherwise, `implicit_convert` wiil have the value that was set in `intiConfig()`. By default it is `True`.\n\nCommand line key --general.profiles or appropriate key default yml file is used to find 'profiles'.\nLet suppose, that --config_file is resolved to config.yml.\nIf 'profiles' is not empty, than it will be used to calculate filenames\nthat will be used to override default yml file.\nLet suppose, 'profiles' resolved to ['dev', 'local']. Than first config.yml\nwill be loaded, than it will be overridden with config-dev.yml, than\nit will be overridden with config-local.yml.\nAt last, it will be overridden with system args.\nThis entry can be always be overridden with system args.\n\n`ymlparsers` and `parser` modules serves as Low-Level API for this module.\n\n`mask_value()` implemented as a wrapper to `parsers.safe_eval()` method with support for boolean\nvariables. This implementation is used to get type for arguments that we get from system args.\nThis mechanism can be easily replaced with your own one.\n\n`to_convex_map()` This method receives dictionary with 'flat keys', it has simple key:value structure\nwhere value can't another dictionary.\nIt will return dictionary of dictionaries with natural key mapping,\noptionally entries will be filtered out according to white_list_flat_keys and\noptionally value will be implicitly converted to appropriate type.\n\nIn order to simulate dictionary of dictionaries 'flat keys' compose key from outer dict with key from inner dict\nseparated with dot.\nFor example, 'general.profiles' 'flat key' corresponds to convex map with 'general' key with dictionary as value\nthat have one of the keys 'profiles' with corresponding value.\n\nIf you supply `implicit_convert=True`, than `mask_value()` will be applied to the values of the received flat dictionary.\nOtherwise, `implicit_convert` wiil have the value that was set in `intiConfig()`. By default it is True.\n\n`merge_list_value_in_dicts` - merges value of 2 dicts. This value represents list of values.\nValue from flat_d is roughly obtained by flat_d[main_key+'.'+sub_key].\nValue from d is roughly obtained by d[main_key][sub_key].\n\nIf you supply `implicit_convert=True`, than `mask_value()` will be applied to the flat map (first parameter).\nOtherwise, `implicit_convert` wiil have the value that was set in `intiConfig()`. By default it is `True`.\n\n`initConfig` - you can set default value of `implicit_convert`. By default it is `True`.\nThis parameters is used if `implicit_convert` wasn't explicitly supplied. This method is idempotent.\n\n- Added `deploys` module.\nThis module is usable in your deployment script. See also `fabs` module. \n\nThis method use `parsers`, ymlparsers`, `init_app_conf` as it's low-level API. `init_app_conf` usage is limited.\n\nThe main function is `load_config()`. It is simplified method for parsing yml configuration file with optionally \noverrided profiles only. See `init_app_conf.parse_config()` for another variant.\n\n`split_path` - Split filename in 2 part parts by split_dirname. first_part will ends with split_dirname.\nsecond_part will start immediately after split_dirname.\n\n`add_to_zip_copy_function` - Factory method that returns closure that can be used as copy_function param in \n`shutil.copytree()`.\n\n- Added `emails` module.\nThis module contains extensions of the logging handlers.\nThis module optionally depends on `ymlparseser` module.\nIt is better to use `EmailStatus` context manager with configured `emailLogger`.\nIt is intended to configure first your `emailLogger` with `OneMemoryHandler` (together with `SMTPHandler`).\nThan the code block that you want to aggregate log messages from is better to be enclosed with `EmailStatus`\ncontext manager.\n\n`alexber.utils.emails.SMTPHandler` is customization of `logging.handlers.SMTPHandler`. It's purpose is to connect to\nSMTP server and actually send the e-mail. Unlike `logging.handlers.SMTPHandler` this class expects for record.msg to be built EmailMessage.\nYou can also change use of underline SMTP class to SMTP_SSL, LMTP, etc. \nThis implementation is *thread-safe*.\n\n`alexber.utils.emails.OneMemoryHandler` is variant of `logging.handlers.MemoryHandler`. This handler aggregates \nlog messages until `FINISHED` log-level is received or application is going to terminate abruptly (see docstring\nof `calc_abrupt_vars()` method for the details) and we have some log messages in the buffer. On such event \nall messages (in the current Thread) are aggregated to the single `EmailMessage`. The subject of the `EmailMessage` \nis determined by `get_subject()` method. \nIf you want to change delimeters used to indicate variable declaration inside template, see docstring of the \n`get_subject()` method.\nIt is better to use `EmailStatus` context manager with configured emailLogger. See docstring of `EmailStatus`.  \nThis implementation is *thread-safe*.\n\n`alexber.utils.emails.EmailStatus` -  if contextmanager exits with exception (it fails), than e-mail with \nsubject formatted with faildargs and faildkwargs will be send.\nOtherwise, e-mail with subject formatted with successargs and successkwargs will be send.\nAll messages (in the current Thread) will be aggregated to one long e-mail with the subject described in \n`OneMemoryHandler.get_subject()` method. \n\n`alexber.utils.emails.initConfig` - this method reset some defaults. This method is idempotent.\nBy default, `SMTP` class from `smtplib` is used to send actual e-mail. You can change it to `SMTP_SSL`, `LMTP`,\nor another class from smtplib by specifying default_smpt_cls_name.\nYou can also specified default port for sending e-mails.\n\n`processInvokes` module has one primary function - `run_sub_process()` This method run subprocess and logs it's out \nto the logger. This method is sophisticated decorator to `subprocess.run()`. It is useful, when your subprocess  \nrun's a lot of time and you're interesting to receive it's `stdout` and `stderr`. By default, it's streamed to log.\nYou can easily customize this behavior, see `initConig()` method.  \n\n`initConig()` This method can be optionally called prior any call to another function in this module. You can use your \ncustom class for the logging. For example, FilePipe. \n\nrun_sub_process\n\n\n\n\n\n\n\n### Changed\n- Spited dependency list for setup.py req.txt (inexact versions, direct dependency only) and for \nreproducible installation requirements.txt (exact versions, all, including transitive dependencies).\n\n- README.md changed, added section 'Alternatively you install install from requirements file:'. \nSome other misc changed done.\n\n- CHANGELOG.md version 0.4.1 misc changes.\n\n- Misc improvement in unit tests.\n\n- Fixed `parser.safe_eval` - safe_eval('%(message)s') was blow up, now it returns value as is. \nSee https://github.com/alex-ber/AlexBerUtils/issues/2  \n\n- Enhanced `importer.importer` - added support for PEP 420 (implicit Namespace Packages).  \nNamespace packages are a mechanism for splitting a single Python package across multiple directories on disk.\nWhen interpreted encounter with non-empty __path__ attribute it adds modules found in those locations\nto the current package.\nSee https://github.com/alex-ber/AlexBerUtils/issues/3\n\n- In all documentation refference to `pip3` was changed to `python3 -m pip`\n\n## [0.4.1] - 2020-04-02\n**BREAKING CHANGE** I highly recommend not to use 0.3.X versions.\n### Removed \n- module `warns` is droped\n\n### Changed\n- *Limitation:*:\n\n`mains` module wasn't tested with frozen python script (frozen using py2exe). \n\n- module `mains` is rewritten. Function `initConf` is dropped entirely.\n- module `mains` now works with logger and with warnings (it was wrong decision to work with warnings).\n\n\n## [0.3.4] - 2020-04-02\n### Changed\n- CHANGELOG.md fixed\n- `warns` module bug fixed, now warnings.warn() works.\n- FixabscwdWarning is added to simplify warnings disabling.\n- Changing how `mains` module use `warns`.\n\n\n## [0.3.3] - 2020-04-02\n### Changed\n- CHANGELOG.md fixed\n\n\n## [0.3.2] - 2020-04-01\n### Changed\n- To REAMDE.md add `Installing new version` section\n- Fix typo in REAMDE.md (tests, not test). \n- Fixing bug: now, you're able to import package in the Python interpreter (`setups.py` fixed)\n- Fixing bug: `warns` module now doesn't change log_level in the preconfigured logger in any cases.\n- **BREAKING CHANGE**: In`mains` module method `warnsInitConfig()` was renamed to `mainInitConfig()` \nAlso singature was changed.  \n- `mains` module minor refactored.\n\n\n### Added\n- Unit tests are added for `warns` module \n- Unit tests are added for `mains` module\n\n## [0.3.1] - 2020-04-01\n### Changed\n- Tests minor improvements.\n- Excluded tests, data from setup.py (from being installed from the sdist.)\n- Created MANIFEST.in\n\n\n### Added\n- `warns `module is added:\n\nIt provides better integration between warnings and logger. \nUnlike `logging._showwarning()` this variant will always go through logger. \n\n`warns.initConfig()` has optional file parameter (it's file-like object) to redirect warnings. \nDefault value is `sys.stderr`.\n\nIf logger for `log_name` (default is `py.warnings`) will be configured before call to `showwarning()` method, \nthan warning will go to the logger's handler with `log_level` (default is `logging.WARNING`).\n\nIf logger for `log_name` (default is `py.warnings`) willn't be configured before call to showwarning() method, \nthan warning will be done to `file` (default is `sys.stderr`) with `log_level` (default is `logging.WARNING`).\n\n- `main` module is added:\n\n`main.fixabscwd()` changes `os.getcwd()` to be the directory of the `__main__` module.\n\n`main.warnsInitConfig()` reexports `warns.initConfig()` for convenience.   \n\n\n\n### Added\n- Tests for alexber.utils.thread_locals added.\n\n## [0.2.5] - 2019-05-22\n### Changed\n- Fixed bug in UploadCommand, git push should be before git tag.\n\n\n## [0.2.4] - 2019-05-22\n### Changed\n- Fixed bug in setup.py, incorrect order between VERSION and UploadCommand (no tag was created on upload)\n\n## [0.2.1] - 2019-05-22\n### Changed\n- setup url fixed.\n- Added import of Enum to alexber.utils package.\n\n## [0.2.0] - 2019-05-22\n### Changed\n- setup.py - keywords added.\n\n## [0.1.1] - 2019-05-22\n### Changed\n- README.md fixed typo.\n\n## [0.1.0] - 2019-05-22\n### Changed\n- alexber.utils.UploadCommand - bug fixed, failed on git tag, because VERSION was undefined.\n\n\n## [0.0.1] - 2019-05-22\n### Added\n- alexber.utils.StrAsReprMixinEnum - Enum Mixin that has __str__() equal to __repr__().\n- alexber.utils.AutoNameMixinEnum-  Enum Mixin that generate value equal to the name.\n- alexber.utils.MissingNoneMixinEnum - Enum Mixin will return None if value will not be found.\n- alexber.utils.LookUpMixinEnum - Enim Mixin that is designed to be used for lookup by value. \n\n  If lookup fail, None will be return. Also, __str__() will return the same value as __repr__().\n- alexber.utils.threadlocal_var, get_threadlocal_var, del_threadlocal_var. \n\n  Inspired by https://stackoverflow.com/questions/1408171/thread-local-storage-in-python\n\n- alexber.utils.UploadCommand -  Support setup.py upload.\n\n    UploadCommand is intented to be used only from setup.py\n\n    It's builds Source and Wheel distribution.\n\n    It's uploads the package to PyPI via Twine.\n\n    It's pushes the git tags.\n\n- alexber.utils.uuid1mc is is a hybrid between version 1 & version 4. This is v1 with random MAC (\"v1mc\").\n\n    uuid1mc() is deliberately generating v1 UUIDs with a random broadcast MAC address.\n\n    The resulting v1 UUID is time dependant (like regular v1), but lacks all host-specific information (like v4).\n\n    Note: somebody reported that ran into trouble using UUID1 in Amazon EC2 instances.\n\n\n- alexber.utils.importer.importer - Convert str to Python construct that target is represented.\n- alexber.utils.importer.new_instance - Convert str to Python construct that target is represented. \nargs and kwargs will be passed in to appropriate __new__() / __init__() / __init_subclass__() methods.\n- alexber.utils.inspects.issetdescriptor - Return true if the object is a method descriptor with setters.\n\n  But not if ismethod() or isclass() or isfunction() are true.\n- alexber.utils.inspects.ismethod - Return false if object is not a class and not a function. \nOtherwise, return true iff signature has 2 params.\n- alexber.utils.parsers.safe_eval - The purpose of this function is convert numbers from str to correct type.\n\n  This function support convertion of built-in Python number to correct type (int, float)\n\n  This function doesn't support decimal.Decimal or datetime.datetime or numpy types.  \n- alexber.utils.parsers.is_empty - if value is None returns True.\n\n   if value is empty iterable (for example, empty str or emptry list),returns true otherwise false.\n\n   Note: For not iterable values, behaivour is undefined.\n- alexber.utils.parsers.parse_boolean - if value is None returns None.\n\n    if value is boolean, it is returned as it is.\n    if value is str and value is equals ignoring case to \"True\", True is returned.\n    if value is str and value is equals ignoring case to \"False\", False is returned.\n\n    For every other value, the answer is undefined. \n\n\n\n- alexber.utils.props.Properties - A Python replacement for java.util.Properties class\n\n   This is modelled as closely as possible to the Java original.\n\n   Created - Anand B Pillai <abpillai@gmail.com>.\n\n   Update to Python 3 by Alex.\n\n   Also there are some tweeks that was done by Alex.\n\n<!--\n### Changed\n### Removed\n-->\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/alex-ber/AlexBerUtils", "keywords": "tools tool utils enum enums threadlocal UploadCommand upload uuid1mc uuid UUID UUID1 UUID4 UU1DMC issetdescriptor ismethod importer new_instance safe_eval is_empty parse_boolean Properties java.util.Properties", "license": "Apache 2.0", "maintainer": "", "maintainer_email": "", "name": "alex-ber-utils", "package_url": "https://pypi.org/project/alex-ber-utils/", "platform": "", "project_url": "https://pypi.org/project/alex-ber-utils/", "project_urls": {"Homepage": "https://github.com/alex-ber/AlexBerUtils"}, "release_url": "https://pypi.org/project/alex-ber-utils/0.5.1/", "requires_dist": ["PyYAML (==5.1)", "python-dotenv (>=0.13.0) ; extra == 'env'", "fabric (>=2.5.0) ; extra == 'fabric'", "multidispatch (>=0.2) ; extra == 'md'", "atomicwrites (==1.3.0) ; extra == 'tests'", "attrs (==19.1.0) ; extra == 'tests'", "colorama (==0.4.1) ; extra == 'tests'", "mock (==2.0.0) ; extra == 'tests'", "more-itertools (==6.0.0) ; extra == 'tests'", "pbr (==5.1.3) ; extra == 'tests'", "pluggy (==0.9.0) ; extra == 'tests'", "py (==1.8.0) ; extra == 'tests'", "pytest (==4.3.1) ; extra == 'tests'", "pytest-assume (==1.2.2) ; extra == 'tests'", "pytest-mock (==1.10.1) ; extra == 'tests'", "PyYAML (==5.1) ; extra == 'tests'", "six (==1.12.0) ; extra == 'tests'", "PyYAML ; extra == 'yaml'", "HiYaPyCo (>=0.4.16) ; extra == 'yaml'", "Jinja2 (<3,>1) ; extra == 'yaml'", "PyYAML ; extra == 'yml'", "HiYaPyCo (>=0.4.16) ; extra == 'yml'", "Jinja2 (<3,>1) ; extra == 'yml'"], "requires_python": ">=3.7.1", "summary": "AlexBerUtils is collection of the small utilities", "version": "0.5.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>AlexBerUtils</h2>\n<p>AlexBerUtils is collection of the small utilities. See CHANGELOG.md for detail description.</p>\n<h3>Getting Help</h3>\n<h3>QuickStart</h3>\n<pre>python3 -m pip install -U alex-ber-utils\n</pre>\n<h3>Installing from Github</h3>\n<pre>python3 -m pip install -U https://github.com/alex-ber/AlexBerUtils/archive/master.zip\n</pre>\n<p>Optionally installing tests requirements.</p>\n<pre>python3 -m pip install -U https://github.com/alex-ber/AlexBerUtils/archive/master.zip#egg<span class=\"o\">=</span>alex-ber-utils<span class=\"o\">[</span>tests<span class=\"o\">]</span>\n</pre>\n<p>Or explicitly:</p>\n<pre>wget https://github.com/alex-ber/AlexBerUtils/archive/master.zip -O master.zip<span class=\"p\">;</span> unzip master.zip<span class=\"p\">;</span> rm master.zip\n</pre>\n<p>And then installing from source (see below).</p>\n<h3>Installing from source</h3>\n<pre>python3 -m pip install . <span class=\"c1\"># only installs \"required\"</span>\n</pre>\n<pre>python3 -m pip install .<span class=\"o\">[</span>tests<span class=\"o\">]</span> <span class=\"c1\"># installs dependencies for tests</span>\n</pre>\n<pre>python3 -m pip install .<span class=\"o\">[</span>md<span class=\"o\">]</span>   <span class=\"c1\"># installs multidispatcher (used in method_overloading_test.py)</span>\n</pre>\n<pre>python3 -m pip install .<span class=\"o\">[</span>fabric<span class=\"o\">]</span>   <span class=\"c1\"># installs fabric (used in fabs.py)</span>\n</pre>\n<pre>python3 -m pip install .<span class=\"o\">[</span>yml<span class=\"o\">]</span>   <span class=\"c1\"># installs Yml related dependencies </span>\n                                <span class=\"c1\"># (used in ymlparsers.py, init_app_conf.py, deploys.py;</span>\n                                <span class=\"c1\"># optionally used in ymlparsers_extra.py, emails.py)</span>\n</pre>\n<pre>python3 -m pip install .<span class=\"o\">[</span>env<span class=\"o\">]</span>   <span class=\"c1\"># installs pydotenv (optionally used in deploys.py)</span>\n</pre>\n<h4>Alternatively you install install from requirements file:</h4>\n<pre>python3 -m pip install -r requirements.txt <span class=\"c1\"># only installs \"required\"</span>\n</pre>\n<pre>python3 -m pip install -r requirements-tests.txt <span class=\"c1\"># installs dependencies for tests</span>\n</pre>\n<pre>python3 -m pip install -r requirements-md.txt   <span class=\"c1\"># installs multidispatcher (used in method_overloading_test.py)</span>\n</pre>\n<pre>python3 -m pip install -r requirements-fabric.txt   <span class=\"c1\"># installs fabric (used in fabs.py)</span>\n</pre>\n<pre>python3 -m pip install -r requirements-yml.txt   <span class=\"c1\"># installs Yml related dependencies </span>\n                                                 <span class=\"c1\"># (used in ymlparsers.py, init_app_conf.py, deploys.py;</span>\n                                                 <span class=\"c1\"># optionally used in ymlparsers_extra.py, emails.py)</span>\n</pre>\n<pre>python3 -m pip install -r requirements-env.txt   <span class=\"c1\"># installs pydotenv (optionally used in deploys.py)</span>\n</pre>\n<h2></h2>\n<p>From the directory with setup.py</p>\n<pre>python3 setup.py <span class=\"nb\">test</span> <span class=\"c1\">#run all tests</span>\n</pre>\n<p>or</p>\n<pre>pytest\n</pre>\n<h2>Installing new version</h2>\n<p>See <a href=\"https://docs.python.org/3.1/distutils/uploading.html\" rel=\"nofollow\">https://docs.python.org/3.1/distutils/uploading.html</a></p>\n<pre>python3 setup.py sdist upload\n</pre>\n<h2>Requirements</h2>\n<p>AlexBerUtils requires the following modules.</p>\n<ul>\n<li>\n<p>Python 3.7+</p>\n</li>\n<li>\n<p>PyYAML==5.1</p>\n</li>\n</ul>\n<h1>Changelog</h1>\n<p>All notable changes to this project will be documented in this file.</p>\n<p>#<a href=\"https://pypi.org/manage/project/alex-ber-utils/releases/\" rel=\"nofollow\">https://pypi.org/manage/project/alex-ber-utils/releases/</a></p>\n<h2>[Unrelased]</h2>\n<h2>[0.5.1] - 06-05-2020</h2>\n<h3>Added</h3>\n<ul>\n<li>\n<p><code>mains</code> module explanation article <a href=\"https://medium.com/@alex_ber/making-relative-path-to-file-to-work-d5d0f1da67bf\" rel=\"nofollow\">https://medium.com/@alex_ber/making-relative-path-to-file-to-work-d5d0f1da67bf</a> is published.</p>\n</li>\n<li>\n<p><code>fabs</code> module. It adds cp method to fabric.Connection.</p>\n</li>\n</ul>\n<p>This method is Linux-like cp command. It copies single file to remote (Posix) machine.</p>\n<ul>\n<li>\n<p>Spited dependency list for setup.py req.txt (inexact versions, direct dependency only) and for\nreproducible installation requirements.txt (exact versions, all, including transitive dependencies).</p>\n</li>\n<li>\n<p>Added req-fabric.txt, requirements-fabric.txt - Fabric, used in <code>fabs</code> module.</p>\n</li>\n<li>\n<p>Added req-yml.txt, requirements-yml.txt - Yml-related dependencies, used in ymlparsers.py\nand in init_app_conf.py, deploys.py; optionally used in ymlparsers_extra.py, emails.py.</p>\n</li>\n</ul>\n<p>Main dependency is HiYaPyCo. I'm using feature that is availlable in the minimal version.</p>\n<p>HiYaPyCo depends upon PyYAML and Jinja2. Limitations for Jinja2 is from HiYaPyCo project.</p>\n<ul>\n<li>\n<p>Added req-env.txt, requirements-env.txt - pydotenv, optionally used in deploys.py.</p>\n</li>\n<li>\n<p>Added <code>inspects.has_method</code>(cls, methodName). Check if class cls has method with name methodName directly,\nor in one of it's super-classes.</p>\n</li>\n<li>\n<p>Added <code>pareser.parse_sys_args</code> function parses command line arguments.</p>\n</li>\n<li>\n<p>Added <code>ymlparsers</code> module - <code>load</code>/<code>safe_dump</code> a Hierarchical Yml files. This is essentially wrapper arround HiYaPyCo project with streamlined\nand extended API and couple of work-arrounds.</p>\n</li>\n</ul>\n<p>Note: this module doesn't use any package-level variables in hiYaPyCo module, including hiYaPyCo.jinja2env.\nThis module do use Jinja2's <code>Environment</code>.</p>\n<p>It also has another defaults for <code>load</code>/<code>safe_dump</code> methods.\nThey can be overridden in <code>initConfig()</code> function.</p>\n<p><code>safe_dump()</code> method supports simple Python objects like primitive types (str, integer, etc), list, dict, <strong>OrderedDict</strong>.</p>\n<p><code>as_str()</code>- convenient method for getting str representation of the data,\nfor example of dict.</p>\n<p><code>DisableVarSubst</code> - use of this context manager disables variable substation in the <code>load()</code> function.</p>\n<p><code>initConfig</code> - this method reset some defaults. If running from the MainThread, this method is idempotent.</p>\n<ul>\n<li>Added <code>init_app_conf</code> <strong>major</strong> module.</li>\n</ul>\n<p>The main function is <code>parse_config</code>.  This function parses command line arguments first.\nThan it parse yml files. Command line arguments overrides yml files arguments.\nParameters of yml files we always try to convert on best-effort basses.\nParameters of system args we try convert according to <code>implicit_convert</code> param.</p>\n<p>If you supply <code>implicit_convert=True</code>, than <code>mask_value()</code> will be applied to the flat map (first parameter).\nOtherwise, <code>implicit_convert</code> wiil have the value that was set in <code>intiConfig()</code>. By default it is <code>True</code>.</p>\n<p>Command line key --general.profiles or appropriate key default yml file is used to find 'profiles'.\nLet suppose, that --config_file is resolved to config.yml.\nIf 'profiles' is not empty, than it will be used to calculate filenames\nthat will be used to override default yml file.\nLet suppose, 'profiles' resolved to ['dev', 'local']. Than first config.yml\nwill be loaded, than it will be overridden with config-dev.yml, than\nit will be overridden with config-local.yml.\nAt last, it will be overridden with system args.\nThis entry can be always be overridden with system args.</p>\n<p><code>ymlparsers</code> and <code>parser</code> modules serves as Low-Level API for this module.</p>\n<p><code>mask_value()</code> implemented as a wrapper to <code>parsers.safe_eval()</code> method with support for boolean\nvariables. This implementation is used to get type for arguments that we get from system args.\nThis mechanism can be easily replaced with your own one.</p>\n<p><code>to_convex_map()</code> This method receives dictionary with 'flat keys', it has simple key:value structure\nwhere value can't another dictionary.\nIt will return dictionary of dictionaries with natural key mapping,\noptionally entries will be filtered out according to white_list_flat_keys and\noptionally value will be implicitly converted to appropriate type.</p>\n<p>In order to simulate dictionary of dictionaries 'flat keys' compose key from outer dict with key from inner dict\nseparated with dot.\nFor example, 'general.profiles' 'flat key' corresponds to convex map with 'general' key with dictionary as value\nthat have one of the keys 'profiles' with corresponding value.</p>\n<p>If you supply <code>implicit_convert=True</code>, than <code>mask_value()</code> will be applied to the values of the received flat dictionary.\nOtherwise, <code>implicit_convert</code> wiil have the value that was set in <code>intiConfig()</code>. By default it is True.</p>\n<p><code>merge_list_value_in_dicts</code> - merges value of 2 dicts. This value represents list of values.\nValue from flat_d is roughly obtained by flat_d[main_key+'.'+sub_key].\nValue from d is roughly obtained by d[main_key][sub_key].</p>\n<p>If you supply <code>implicit_convert=True</code>, than <code>mask_value()</code> will be applied to the flat map (first parameter).\nOtherwise, <code>implicit_convert</code> wiil have the value that was set in <code>intiConfig()</code>. By default it is <code>True</code>.</p>\n<p><code>initConfig</code> - you can set default value of <code>implicit_convert</code>. By default it is <code>True</code>.\nThis parameters is used if <code>implicit_convert</code> wasn't explicitly supplied. This method is idempotent.</p>\n<ul>\n<li>Added <code>deploys</code> module.\nThis module is usable in your deployment script. See also <code>fabs</code> module.</li>\n</ul>\n<p>This method use <code>parsers</code>, ymlparsers<code>,</code>init_app_conf<code>as it's low-level API.</code>init_app_conf` usage is limited.</p>\n<p>The main function is <code>load_config()</code>. It is simplified method for parsing yml configuration file with optionally\noverrided profiles only. See <code>init_app_conf.parse_config()</code> for another variant.</p>\n<p><code>split_path</code> - Split filename in 2 part parts by split_dirname. first_part will ends with split_dirname.\nsecond_part will start immediately after split_dirname.</p>\n<p><code>add_to_zip_copy_function</code> - Factory method that returns closure that can be used as copy_function param in\n<code>shutil.copytree()</code>.</p>\n<ul>\n<li>Added <code>emails</code> module.\nThis module contains extensions of the logging handlers.\nThis module optionally depends on <code>ymlparseser</code> module.\nIt is better to use <code>EmailStatus</code> context manager with configured <code>emailLogger</code>.\nIt is intended to configure first your <code>emailLogger</code> with <code>OneMemoryHandler</code> (together with <code>SMTPHandler</code>).\nThan the code block that you want to aggregate log messages from is better to be enclosed with <code>EmailStatus</code>\ncontext manager.</li>\n</ul>\n<p><code>alexber.utils.emails.SMTPHandler</code> is customization of <code>logging.handlers.SMTPHandler</code>. It's purpose is to connect to\nSMTP server and actually send the e-mail. Unlike <code>logging.handlers.SMTPHandler</code> this class expects for record.msg to be built EmailMessage.\nYou can also change use of underline SMTP class to SMTP_SSL, LMTP, etc.\nThis implementation is <em>thread-safe</em>.</p>\n<p><code>alexber.utils.emails.OneMemoryHandler</code> is variant of <code>logging.handlers.MemoryHandler</code>. This handler aggregates\nlog messages until <code>FINISHED</code> log-level is received or application is going to terminate abruptly (see docstring\nof <code>calc_abrupt_vars()</code> method for the details) and we have some log messages in the buffer. On such event\nall messages (in the current Thread) are aggregated to the single <code>EmailMessage</code>. The subject of the <code>EmailMessage</code>\nis determined by <code>get_subject()</code> method.\nIf you want to change delimeters used to indicate variable declaration inside template, see docstring of the\n<code>get_subject()</code> method.\nIt is better to use <code>EmailStatus</code> context manager with configured emailLogger. See docstring of <code>EmailStatus</code>.<br>\nThis implementation is <em>thread-safe</em>.</p>\n<p><code>alexber.utils.emails.EmailStatus</code> -  if contextmanager exits with exception (it fails), than e-mail with\nsubject formatted with faildargs and faildkwargs will be send.\nOtherwise, e-mail with subject formatted with successargs and successkwargs will be send.\nAll messages (in the current Thread) will be aggregated to one long e-mail with the subject described in\n<code>OneMemoryHandler.get_subject()</code> method.</p>\n<p><code>alexber.utils.emails.initConfig</code> - this method reset some defaults. This method is idempotent.\nBy default, <code>SMTP</code> class from <code>smtplib</code> is used to send actual e-mail. You can change it to <code>SMTP_SSL</code>, <code>LMTP</code>,\nor another class from smtplib by specifying default_smpt_cls_name.\nYou can also specified default port for sending e-mails.</p>\n<p><code>processInvokes</code> module has one primary function - <code>run_sub_process()</code> This method run subprocess and logs it's out\nto the logger. This method is sophisticated decorator to <code>subprocess.run()</code>. It is useful, when your subprocess<br>\nrun's a lot of time and you're interesting to receive it's <code>stdout</code> and <code>stderr</code>. By default, it's streamed to log.\nYou can easily customize this behavior, see <code>initConig()</code> method.</p>\n<p><code>initConig()</code> This method can be optionally called prior any call to another function in this module. You can use your\ncustom class for the logging. For example, FilePipe.</p>\n<p>run_sub_process</p>\n<h3>Changed</h3>\n<ul>\n<li>\n<p>Spited dependency list for setup.py req.txt (inexact versions, direct dependency only) and for\nreproducible installation requirements.txt (exact versions, all, including transitive dependencies).</p>\n</li>\n<li>\n<p>README.md changed, added section 'Alternatively you install install from requirements file:'.\nSome other misc changed done.</p>\n</li>\n<li>\n<p>CHANGELOG.md version 0.4.1 misc changes.</p>\n</li>\n<li>\n<p>Misc improvement in unit tests.</p>\n</li>\n<li>\n<p>Fixed <code>parser.safe_eval</code> - safe_eval('%(message)s') was blow up, now it returns value as is.\nSee <a href=\"https://github.com/alex-ber/AlexBerUtils/issues/2\" rel=\"nofollow\">https://github.com/alex-ber/AlexBerUtils/issues/2</a></p>\n</li>\n<li>\n<p>Enhanced <code>importer.importer</code> - added support for PEP 420 (implicit Namespace Packages).<br>\nNamespace packages are a mechanism for splitting a single Python package across multiple directories on disk.\nWhen interpreted encounter with non-empty <strong>path</strong> attribute it adds modules found in those locations\nto the current package.\nSee <a href=\"https://github.com/alex-ber/AlexBerUtils/issues/3\" rel=\"nofollow\">https://github.com/alex-ber/AlexBerUtils/issues/3</a></p>\n</li>\n<li>\n<p>In all documentation refference to <code>pip3</code> was changed to <code>python3 -m pip</code></p>\n</li>\n</ul>\n<h2>[0.4.1] - 2020-04-02</h2>\n<p><strong>BREAKING CHANGE</strong> I highly recommend not to use 0.3.X versions.</p>\n<h3>Removed</h3>\n<ul>\n<li>module <code>warns</code> is droped</li>\n</ul>\n<h3>Changed</h3>\n<ul>\n<li><em>Limitation:</em>:</li>\n</ul>\n<p><code>mains</code> module wasn't tested with frozen python script (frozen using py2exe).</p>\n<ul>\n<li>module <code>mains</code> is rewritten. Function <code>initConf</code> is dropped entirely.</li>\n<li>module <code>mains</code> now works with logger and with warnings (it was wrong decision to work with warnings).</li>\n</ul>\n<h2>[0.3.4] - 2020-04-02</h2>\n<h3>Changed</h3>\n<ul>\n<li>CHANGELOG.md fixed</li>\n<li><code>warns</code> module bug fixed, now warnings.warn() works.</li>\n<li>FixabscwdWarning is added to simplify warnings disabling.</li>\n<li>Changing how <code>mains</code> module use <code>warns</code>.</li>\n</ul>\n<h2>[0.3.3] - 2020-04-02</h2>\n<h3>Changed</h3>\n<ul>\n<li>CHANGELOG.md fixed</li>\n</ul>\n<h2>[0.3.2] - 2020-04-01</h2>\n<h3>Changed</h3>\n<ul>\n<li>To REAMDE.md add <code>Installing new version</code> section</li>\n<li>Fix typo in REAMDE.md (tests, not test).</li>\n<li>Fixing bug: now, you're able to import package in the Python interpreter (<code>setups.py</code> fixed)</li>\n<li>Fixing bug: <code>warns</code> module now doesn't change log_level in the preconfigured logger in any cases.</li>\n<li><strong>BREAKING CHANGE</strong>: In<code>mains</code> module method <code>warnsInitConfig()</code> was renamed to <code>mainInitConfig()</code>\nAlso singature was changed.</li>\n<li><code>mains</code> module minor refactored.</li>\n</ul>\n<h3>Added</h3>\n<ul>\n<li>Unit tests are added for <code>warns</code> module</li>\n<li>Unit tests are added for <code>mains</code> module</li>\n</ul>\n<h2>[0.3.1] - 2020-04-01</h2>\n<h3>Changed</h3>\n<ul>\n<li>Tests minor improvements.</li>\n<li>Excluded tests, data from setup.py (from being installed from the sdist.)</li>\n<li>Created MANIFEST.in</li>\n</ul>\n<h3>Added</h3>\n<ul>\n<li><code>warns</code>module is added:</li>\n</ul>\n<p>It provides better integration between warnings and logger.\nUnlike <code>logging._showwarning()</code> this variant will always go through logger.</p>\n<p><code>warns.initConfig()</code> has optional file parameter (it's file-like object) to redirect warnings.\nDefault value is <code>sys.stderr</code>.</p>\n<p>If logger for <code>log_name</code> (default is <code>py.warnings</code>) will be configured before call to <code>showwarning()</code> method,\nthan warning will go to the logger's handler with <code>log_level</code> (default is <code>logging.WARNING</code>).</p>\n<p>If logger for <code>log_name</code> (default is <code>py.warnings</code>) willn't be configured before call to showwarning() method,\nthan warning will be done to <code>file</code> (default is <code>sys.stderr</code>) with <code>log_level</code> (default is <code>logging.WARNING</code>).</p>\n<ul>\n<li><code>main</code> module is added:</li>\n</ul>\n<p><code>main.fixabscwd()</code> changes <code>os.getcwd()</code> to be the directory of the <code>__main__</code> module.</p>\n<p><code>main.warnsInitConfig()</code> reexports <code>warns.initConfig()</code> for convenience.</p>\n<h3>Added</h3>\n<ul>\n<li>Tests for alexber.utils.thread_locals added.</li>\n</ul>\n<h2>[0.2.5] - 2019-05-22</h2>\n<h3>Changed</h3>\n<ul>\n<li>Fixed bug in UploadCommand, git push should be before git tag.</li>\n</ul>\n<h2>[0.2.4] - 2019-05-22</h2>\n<h3>Changed</h3>\n<ul>\n<li>Fixed bug in setup.py, incorrect order between VERSION and UploadCommand (no tag was created on upload)</li>\n</ul>\n<h2>[0.2.1] - 2019-05-22</h2>\n<h3>Changed</h3>\n<ul>\n<li>setup url fixed.</li>\n<li>Added import of Enum to alexber.utils package.</li>\n</ul>\n<h2>[0.2.0] - 2019-05-22</h2>\n<h3>Changed</h3>\n<ul>\n<li>setup.py - keywords added.</li>\n</ul>\n<h2>[0.1.1] - 2019-05-22</h2>\n<h3>Changed</h3>\n<ul>\n<li>README.md fixed typo.</li>\n</ul>\n<h2>[0.1.0] - 2019-05-22</h2>\n<h3>Changed</h3>\n<ul>\n<li>alexber.utils.UploadCommand - bug fixed, failed on git tag, because VERSION was undefined.</li>\n</ul>\n<h2>[0.0.1] - 2019-05-22</h2>\n<h3>Added</h3>\n<ul>\n<li>\n<p>alexber.utils.StrAsReprMixinEnum - Enum Mixin that has <strong>str</strong>() equal to <strong>repr</strong>().</p>\n</li>\n<li>\n<p>alexber.utils.AutoNameMixinEnum-  Enum Mixin that generate value equal to the name.</p>\n</li>\n<li>\n<p>alexber.utils.MissingNoneMixinEnum - Enum Mixin will return None if value will not be found.</p>\n</li>\n<li>\n<p>alexber.utils.LookUpMixinEnum - Enim Mixin that is designed to be used for lookup by value.</p>\n<p>If lookup fail, None will be return. Also, <strong>str</strong>() will return the same value as <strong>repr</strong>().</p>\n</li>\n<li>\n<p>alexber.utils.threadlocal_var, get_threadlocal_var, del_threadlocal_var.</p>\n<p>Inspired by <a href=\"https://stackoverflow.com/questions/1408171/thread-local-storage-in-python\" rel=\"nofollow\">https://stackoverflow.com/questions/1408171/thread-local-storage-in-python</a></p>\n</li>\n<li>\n<p>alexber.utils.UploadCommand -  Support setup.py upload.</p>\n<p>UploadCommand is intented to be used only from setup.py</p>\n<p>It's builds Source and Wheel distribution.</p>\n<p>It's uploads the package to PyPI via Twine.</p>\n<p>It's pushes the git tags.</p>\n</li>\n<li>\n<p>alexber.utils.uuid1mc is is a hybrid between version 1 &amp; version 4. This is v1 with random MAC (\"v1mc\").</p>\n<p>uuid1mc() is deliberately generating v1 UUIDs with a random broadcast MAC address.</p>\n<p>The resulting v1 UUID is time dependant (like regular v1), but lacks all host-specific information (like v4).</p>\n<p>Note: somebody reported that ran into trouble using UUID1 in Amazon EC2 instances.</p>\n</li>\n<li>\n<p>alexber.utils.importer.importer - Convert str to Python construct that target is represented.</p>\n</li>\n<li>\n<p>alexber.utils.importer.new_instance - Convert str to Python construct that target is represented.\nargs and kwargs will be passed in to appropriate <strong>new</strong>() / <strong>init</strong>() / <strong>init_subclass</strong>() methods.</p>\n</li>\n<li>\n<p>alexber.utils.inspects.issetdescriptor - Return true if the object is a method descriptor with setters.</p>\n<p>But not if ismethod() or isclass() or isfunction() are true.</p>\n</li>\n<li>\n<p>alexber.utils.inspects.ismethod - Return false if object is not a class and not a function.\nOtherwise, return true iff signature has 2 params.</p>\n</li>\n<li>\n<p>alexber.utils.parsers.safe_eval - The purpose of this function is convert numbers from str to correct type.</p>\n<p>This function support convertion of built-in Python number to correct type (int, float)</p>\n<p>This function doesn't support decimal.Decimal or datetime.datetime or numpy types.</p>\n</li>\n<li>\n<p>alexber.utils.parsers.is_empty - if value is None returns True.</p>\n<p>if value is empty iterable (for example, empty str or emptry list),returns true otherwise false.</p>\n<p>Note: For not iterable values, behaivour is undefined.</p>\n</li>\n<li>\n<p>alexber.utils.parsers.parse_boolean - if value is None returns None.</p>\n<p>if value is boolean, it is returned as it is.\nif value is str and value is equals ignoring case to \"True\", True is returned.\nif value is str and value is equals ignoring case to \"False\", False is returned.</p>\n<p>For every other value, the answer is undefined.</p>\n</li>\n<li>\n<p>alexber.utils.props.Properties - A Python replacement for java.util.Properties class</p>\n<p>This is modelled as closely as possible to the Java original.</p>\n<p>Created - Anand B Pillai <a href=\"mailto:abpillai@gmail.com\">abpillai@gmail.com</a>.</p>\n<p>Update to Python 3 by Alex.</p>\n<p>Also there are some tweeks that was done by Alex.</p>\n</li>\n</ul>\n\n\n          </div>"}, "last_serial": 7182755, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "8e85ecd3f8e403dd38c2f7674254aa38", "sha256": "785fabf4a754bfe4643bff8e429dc3dbbdfe458a9a961222a9d0186a0916508a"}, "downloads": -1, "filename": "alex_ber_utils-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "8e85ecd3f8e403dd38c2f7674254aa38", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7.1", "size": 15708, "upload_time": "2019-05-22T14:03:29", "upload_time_iso_8601": "2019-05-22T14:03:29.123621Z", "url": "https://files.pythonhosted.org/packages/51/40/7d499e6cd7aec95f83a23f083cdbeabcaa6f47d428c1c8e442f99f2f51ff/alex_ber_utils-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fc8d2705b2be66e7d794d5e614ae82df", "sha256": "b786289af5cc0d0a5de1d303536cc855e240e462c06c2bf64f1218cc72116eb6"}, "downloads": -1, "filename": "alex_ber_utils-0.0.1.tar.gz", "has_sig": false, "md5_digest": "fc8d2705b2be66e7d794d5e614ae82df", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7.1", "size": 12250, "upload_time": "2019-05-22T14:03:31", "upload_time_iso_8601": "2019-05-22T14:03:31.557598Z", "url": "https://files.pythonhosted.org/packages/57/91/0507a2d47e4d6907f23f19c8344bdf7e4a88a4b873ce61f8f5aa9f1614b2/alex_ber_utils-0.0.1.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "fa287d90f049b5d993ddff35b30517b0", "sha256": "c10fb28f629a688b187f08f26f9ef4095c9306d6b36d511fcf59741c5d96e75f"}, "downloads": -1, "filename": "alex_ber_utils-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "fa287d90f049b5d993ddff35b30517b0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7.1", "size": 15796, "upload_time": "2019-05-22T14:10:39", "upload_time_iso_8601": "2019-05-22T14:10:39.603542Z", "url": "https://files.pythonhosted.org/packages/20/37/65ff67669b3e196f24e8324892df13f8d18db2af58793329032093c2b400/alex_ber_utils-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fef723c5bc043bccc5cb5b802456ba21", "sha256": "6e70ea47ff7c7d840294432330c664b7030c222bd285691aed7641c017988d70"}, "downloads": -1, "filename": "alex_ber_utils-0.1.0.tar.gz", "has_sig": false, "md5_digest": "fef723c5bc043bccc5cb5b802456ba21", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7.1", "size": 12316, "upload_time": "2019-05-22T14:10:41", "upload_time_iso_8601": "2019-05-22T14:10:41.069337Z", "url": "https://files.pythonhosted.org/packages/06/f4/07533958984d231dd14546e682102606476d1f2b35222085ee13c6ec0920/alex_ber_utils-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "f3ca5a9bdd5cd30bbf846b5e34de03b9", "sha256": "69984daa5d695ba48d789470e824391a61ba297ca7821c33fe99aab6c484a5f3"}, "downloads": -1, "filename": "alex_ber_utils-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "f3ca5a9bdd5cd30bbf846b5e34de03b9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7.1", "size": 15807, "upload_time": "2019-05-22T14:17:20", "upload_time_iso_8601": "2019-05-22T14:17:20.628915Z", "url": "https://files.pythonhosted.org/packages/e1/c4/12c231d4072e1b582ae4f4df32570e7cd552005fda06bf267752ae39583d/alex_ber_utils-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "90a9fe4795d174763a5368fd9a750b6c", "sha256": "d5b7da391102cadb5b1a79162d9cd3e9aa506ac6f26337eab90fa6336533aa06"}, "downloads": -1, "filename": "alex_ber_utils-0.1.1.tar.gz", "has_sig": false, "md5_digest": "90a9fe4795d174763a5368fd9a750b6c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7.1", "size": 12323, "upload_time": "2019-05-22T14:17:22", "upload_time_iso_8601": "2019-05-22T14:17:22.179373Z", "url": "https://files.pythonhosted.org/packages/0c/46/d943942fb5a8b6a413ded7061b140b2ca189fe8b18145f60741ec79cf93a/alex_ber_utils-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "626c3c489b63d08b14c884b2dd3c4671", "sha256": "c21c0a33df8c8b008fe3d218c4b875b62f3fd2bcb6ff8662fe0bc4de6ed522ab"}, "downloads": -1, "filename": "alex_ber_utils-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "626c3c489b63d08b14c884b2dd3c4671", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7.1", "size": 15889, "upload_time": "2019-05-22T14:34:19", "upload_time_iso_8601": "2019-05-22T14:34:19.930181Z", "url": "https://files.pythonhosted.org/packages/e2/7f/5f58ad1fefdd425ebce9dd2f1fa74ace8c2cf1c2c5aacf8f55077972c693/alex_ber_utils-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "01ecc02f124c2c0b62787e3be559202b", "sha256": "597146c0a7578680d59207c2860d90d762a7b188f3f1ae89917a37c05eccb96b"}, "downloads": -1, "filename": "alex_ber_utils-0.2.0.tar.gz", "has_sig": false, "md5_digest": "01ecc02f124c2c0b62787e3be559202b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7.1", "size": 12445, "upload_time": "2019-05-22T14:34:21", "upload_time_iso_8601": "2019-05-22T14:34:21.440821Z", "url": "https://files.pythonhosted.org/packages/9a/ac/cf7171bfeae32b8acca4259392243ed176f9367e672971eeef9e8edcb53b/alex_ber_utils-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "83ba4cb08337c3a676b795d73149ddba", "sha256": "f48400d7baa5f2533e7df7a0bc9d609a6331ffbc4eba9713c176fef8c148a63a"}, "downloads": -1, "filename": "alex_ber_utils-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "83ba4cb08337c3a676b795d73149ddba", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7.1", "size": 15918, "upload_time": "2019-05-22T15:18:24", "upload_time_iso_8601": "2019-05-22T15:18:24.146782Z", "url": "https://files.pythonhosted.org/packages/2b/3b/c7781609d10f931b3a50bd3a3599750fead862144c484f410ac5312f308c/alex_ber_utils-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "350fd7d08277f856aa9d0ec13630234a", "sha256": "7bfefe6ec6dee49a519b659d0c7c1b6b15687bda07eedb23561bb4ea17937617"}, "downloads": -1, "filename": "alex_ber_utils-0.2.1.tar.gz", "has_sig": false, "md5_digest": "350fd7d08277f856aa9d0ec13630234a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7.1", "size": 12478, "upload_time": "2019-05-22T15:18:26", "upload_time_iso_8601": "2019-05-22T15:18:26.161788Z", "url": "https://files.pythonhosted.org/packages/d5/18/8b07b7d799e726ba40451822c9143106882366eef84063b2e4dfedaa6d31/alex_ber_utils-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "119e8d30ccd3741f711c89f362054038", "sha256": "aa698c88c14e667c55324ce456db9c069dcf1d2bf83e36d224b487c5c2f92c35"}, "downloads": -1, "filename": "alex_ber_utils-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "119e8d30ccd3741f711c89f362054038", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7.1", "size": 15968, "upload_time": "2019-05-22T18:33:52", "upload_time_iso_8601": "2019-05-22T18:33:52.793506Z", "url": "https://files.pythonhosted.org/packages/d4/59/233d8294a4cd1cdf7d61c9df3a1fdf6cf22fb63a8e17ba190cfc72c1c7c8/alex_ber_utils-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b6ded7c8e782bfc194ac86e1c47689a6", "sha256": "355274d33efb726586fbe443272240e81e04df55dd631e87054ef0512d754d55"}, "downloads": -1, "filename": "alex_ber_utils-0.2.2.tar.gz", "has_sig": false, "md5_digest": "b6ded7c8e782bfc194ac86e1c47689a6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7.1", "size": 12545, "upload_time": "2019-05-22T18:33:54", "upload_time_iso_8601": "2019-05-22T18:33:54.399432Z", "url": "https://files.pythonhosted.org/packages/21/55/436c5983ce28f4ae128bd249577b1749565d933b4a0d9302949eba380ad2/alex_ber_utils-0.2.2.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "bec8434397e09ba034f13ac664e86570", "sha256": "98942b58533b366ba06a041b48ec8d07c143fb94c7b49b2e54bee10a26c1ac6a"}, "downloads": -1, "filename": "alex_ber_utils-0.2.4-py3-none-any.whl", "has_sig": false, "md5_digest": "bec8434397e09ba034f13ac664e86570", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7.1", "size": 15968, "upload_time": "2019-05-22T18:42:36", "upload_time_iso_8601": "2019-05-22T18:42:36.397841Z", "url": "https://files.pythonhosted.org/packages/0a/36/51f509d47c7b55823808ed5513114cea6b8093113a1f91f3762a15ea978c/alex_ber_utils-0.2.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5e5008e61f236f7bc4d4247b2261648b", "sha256": "96cf17697cae5a41311a6783bf1fa82c362dca2df4070c0ae503db90b324be00"}, "downloads": -1, "filename": "alex_ber_utils-0.2.4.tar.gz", "has_sig": false, "md5_digest": "5e5008e61f236f7bc4d4247b2261648b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7.1", "size": 12543, "upload_time": "2019-05-22T18:42:37", "upload_time_iso_8601": "2019-05-22T18:42:37.730015Z", "url": "https://files.pythonhosted.org/packages/40/74/b531b51588d942cf63d6e28f8228197f245b7a27c8dfc7e2579ca39daa5b/alex_ber_utils-0.2.4.tar.gz", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "332680a721a9d1d2895fbca4018b51e9", "sha256": "20b1c61e7c2d46b5dc60097c1cc26ec3441f56288fa412584b02b8276528c46d"}, "downloads": -1, "filename": "alex_ber_utils-0.2.5-py3-none-any.whl", "has_sig": false, "md5_digest": "332680a721a9d1d2895fbca4018b51e9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7.1", "size": 15992, "upload_time": "2019-05-22T18:56:14", "upload_time_iso_8601": "2019-05-22T18:56:14.801088Z", "url": "https://files.pythonhosted.org/packages/e0/86/f513dc41cf11f2e97b5f5ea5a7012973d6260813ad485f13e6b2ad5bc232/alex_ber_utils-0.2.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f6d410c0a6ccbe19ca7473ccae35378a", "sha256": "a2ef41e3de3e4d2ae0a7d84c1bc2b5e4bc21d5efeb1e4bbf81b35c49d415b662"}, "downloads": -1, "filename": "alex_ber_utils-0.2.5.tar.gz", "has_sig": false, "md5_digest": "f6d410c0a6ccbe19ca7473ccae35378a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7.1", "size": 12582, "upload_time": "2019-05-22T18:56:16", "upload_time_iso_8601": "2019-05-22T18:56:16.260950Z", "url": "https://files.pythonhosted.org/packages/44/56/50411401d56d464afbd45a6f0ab1aacc428b6e0f1beb2448d70933e2c622/alex_ber_utils-0.2.5.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "ef628c463bf520f7af901ab84e3393d5", "sha256": "edb86235152c1b322e4ffba05603137c066e621961b2b7071a5b10ef87e812fb"}, "downloads": -1, "filename": "alex_ber_utils-0.4.1-py3-none-any.whl", "has_sig": false, "md5_digest": "ef628c463bf520f7af901ab84e3393d5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7.1", "size": 18947, "upload_time": "2020-04-02T14:49:08", "upload_time_iso_8601": "2020-04-02T14:49:08.941022Z", "url": "https://files.pythonhosted.org/packages/aa/18/e7c618457eb6953bafe091cb65334ddf6dfd676aace51a0d1beefd92df22/alex_ber_utils-0.4.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4caed38e0306dab3fb91a24c2943c59f", "sha256": "e5c7db8e9fa8fe7ef566274ef82994a1d1697a91a662841f9cc41eab01c0b31a"}, "downloads": -1, "filename": "alex_ber_utils-0.4.1.tar.gz", "has_sig": false, "md5_digest": "4caed38e0306dab3fb91a24c2943c59f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7.1", "size": 22950, "upload_time": "2020-04-02T14:49:10", "upload_time_iso_8601": "2020-04-02T14:49:10.212932Z", "url": "https://files.pythonhosted.org/packages/cf/80/758339796c98cd7513112f53e7b5499087642e4b294d18326337dea0ed70/alex_ber_utils-0.4.1.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "7775bff1d931ca142bf86ea57f68928e", "sha256": "dcc6ee6c74fdf4008cd40b307b42c81f80bc2255d119f7628fbc161f3a7fde39"}, "downloads": -1, "filename": "alex_ber_utils-0.5.1-py3-none-any.whl", "has_sig": false, "md5_digest": "7775bff1d931ca142bf86ea57f68928e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7.1", "size": 44720, "upload_time": "2020-05-06T19:59:00", "upload_time_iso_8601": "2020-05-06T19:59:00.819563Z", "url": "https://files.pythonhosted.org/packages/1c/7e/807cee484d0dbdccc6402de689fd760f44622c2accabb05156844270fcaf/alex_ber_utils-0.5.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d941c9da5b6cfe0f176f38714a4e83a2", "sha256": "bdb86190eb2c119cecdaab8518bcf07f9b5ed6bf6759d13f849a1c4530aa425b"}, "downloads": -1, "filename": "alex_ber_utils-0.5.1.tar.gz", "has_sig": false, "md5_digest": "d941c9da5b6cfe0f176f38714a4e83a2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7.1", "size": 59907, "upload_time": "2020-05-06T19:59:02", "upload_time_iso_8601": "2020-05-06T19:59:02.562411Z", "url": "https://files.pythonhosted.org/packages/d3/11/7fae5ae5a84126acc3c6c99b026f593485d2adcb67b157f6924e564e2cb6/alex_ber_utils-0.5.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7775bff1d931ca142bf86ea57f68928e", "sha256": "dcc6ee6c74fdf4008cd40b307b42c81f80bc2255d119f7628fbc161f3a7fde39"}, "downloads": -1, "filename": "alex_ber_utils-0.5.1-py3-none-any.whl", "has_sig": false, "md5_digest": "7775bff1d931ca142bf86ea57f68928e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7.1", "size": 44720, "upload_time": "2020-05-06T19:59:00", "upload_time_iso_8601": "2020-05-06T19:59:00.819563Z", "url": "https://files.pythonhosted.org/packages/1c/7e/807cee484d0dbdccc6402de689fd760f44622c2accabb05156844270fcaf/alex_ber_utils-0.5.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d941c9da5b6cfe0f176f38714a4e83a2", "sha256": "bdb86190eb2c119cecdaab8518bcf07f9b5ed6bf6759d13f849a1c4530aa425b"}, "downloads": -1, "filename": "alex_ber_utils-0.5.1.tar.gz", "has_sig": false, "md5_digest": "d941c9da5b6cfe0f176f38714a4e83a2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7.1", "size": 59907, "upload_time": "2020-05-06T19:59:02", "upload_time_iso_8601": "2020-05-06T19:59:02.562411Z", "url": "https://files.pythonhosted.org/packages/d3/11/7fae5ae5a84126acc3c6c99b026f593485d2adcb67b157f6924e564e2cb6/alex_ber_utils-0.5.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:19:55 2020"}