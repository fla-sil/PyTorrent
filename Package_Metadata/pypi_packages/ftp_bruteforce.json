{"info": {"author": "Doctor G - Dr@G", "author_email": "dr.g@hotmail.gr", "bugtrack_url": null, "classifiers": [], "description": "This is Python version 2.7.2\r\n============================\r\n\r\nCopyright (c) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\r\nPython Software Foundation.  All rights reserved.\r\n\r\nCopyright (c) 2000 BeOpen.com.\r\nAll rights reserved.\r\n\r\nCopyright (c) 1995-2001 Corporation for National Research Initiatives.\r\nAll rights reserved.\r\n\r\nCopyright (c) 1991-1995 Stichting Mathematisch Centrum.\r\nAll rights reserved.\r\n\r\n\r\nLicense information\r\n-------------------\r\n\r\nSee the file \"LICENSE\" for information on the history of this\r\nsoftware, terms & conditions for usage, and a DISCLAIMER OF ALL\r\nWARRANTIES.\r\n\r\nThis Python distribution contains no GNU General Public Licensed\r\n(GPLed) code so it may be used in proprietary projects just like prior\r\nPython distributions.  There are interfaces to some GNU code but these\r\nare entirely optional.\r\n\r\nAll trademarks referenced herein are property of their respective\r\nholders.\r\n\r\n\r\nWhat's new in this release?\r\n---------------------------\r\n\r\nSee the file \"Misc/NEWS\".\r\n\r\n\r\nIf you don't read instructions\r\n------------------------------\r\n\r\nCongratulations on getting this far. :-)\r\n\r\nTo start building right away (on UNIX): type \"./configure\" in the\r\ncurrent directory and when it finishes, type \"make\".  This creates an\r\nexecutable \"./python\"; to install in /usr/local, first do \"su root\"\r\nand then \"make install\".\r\n\r\nThe section `Build instructions' below is still recommended reading.\r\n\r\n\r\nWhat is Python anyway?\r\n----------------------\r\n\r\nPython is an interpreted, interactive object-oriented programming\r\nlanguage suitable (amongst other uses) for distributed application\r\ndevelopment, scripting, numeric computing and system testing.  Python\r\nis often compared to Tcl, Perl, Java, JavaScript, Visual Basic or\r\nScheme.  To find out more about what Python can do for you, point your\r\nbrowser to http://www.python.org/.\r\n\r\n\r\nHow do I learn Python?\r\n----------------------\r\n\r\nThe official tutorial is still a good place to start; see\r\nhttp://docs.python.org/ for online and downloadable versions, as well\r\nas a list of other introductions, and reference documentation.\r\n\r\nThere's a quickly growing set of books on Python.  See\r\nhttp://wiki.python.org/moin/PythonBooks for a list.\r\n\r\n\r\nDocumentation\r\n-------------\r\n\r\nAll documentation is provided online in a variety of formats.  In\r\norder of importance for new users: Tutorial, Library Reference,\r\nLanguage Reference, Extending & Embedding, and the Python/C API.  The\r\nLibrary Reference is especially of immense value since much of\r\nPython's power is described there, including the built-in data types\r\nand functions!\r\n\r\nAll documentation is also available online at the Python web site\r\n(http://docs.python.org/, see below).  It is available online for occasional\r\nreference, or can be downloaded in many formats for faster access.  The\r\ndocumentation is downloadable in HTML, PostScript, PDF, LaTeX, and\r\nreStructuredText (2.6+) formats; the LaTeX and reStructuredText versions are\r\nprimarily for documentation authors, translators, and people with special\r\nformatting requirements.\r\n\r\n\r\nWeb sites\r\n---------\r\n\r\nNew Python releases and related technologies are published at\r\nhttp://www.python.org/.  Come visit us!\r\n\r\n\r\nNewsgroups and Mailing Lists\r\n----------------------------\r\n\r\nRead comp.lang.python, a high-volume discussion newsgroup about\r\nPython, or comp.lang.python.announce, a low-volume moderated newsgroup\r\nfor Python-related announcements.  These are also accessible as\r\nmailing lists: see http://www.python.org/community/lists/ for an\r\noverview of these and many other Python-related mailing lists.\r\n\r\nArchives are accessible via the Google Groups Usenet archive; see\r\nhttp://groups.google.com/.  The mailing lists are also archived, see\r\nhttp://www.python.org/community/lists/ for details.\r\n\r\n\r\nBug reports\r\n-----------\r\n\r\nTo report or search for bugs, please use the Python Bug\r\nTracker at http://bugs.python.org/.\r\n\r\n\r\nPatches and contributions\r\n-------------------------\r\n\r\nTo submit a patch or other contribution, please use the Python Patch\r\nManager at http://bugs.python.org/.  Guidelines\r\nfor patch submission may be found at http://www.python.org/dev/patches/.\r\n\r\nIf you have a proposal to change Python, you may want to send an email to the\r\ncomp.lang.python or python-ideas mailing lists for inital feedback. A Python\r\nEnhancement Proposal (PEP) may be submitted if your idea gains ground. All\r\ncurrent PEPs, as well as guidelines for submitting a new PEP, are listed at\r\nhttp://www.python.org/dev/peps/.\r\n\r\n\r\nQuestions\r\n---------\r\n\r\nFor help, if you can't find it in the manuals or on the web site, it's\r\nbest to post to the comp.lang.python or the Python mailing list (see\r\nabove).  If you specifically don't want to involve the newsgroup or\r\nmailing list, send questions to help@python.org (a group of volunteers\r\nwho answer questions as they can).  The newsgroup is the most\r\nefficient way to ask public questions.\r\n\r\n\r\nBuild instructions\r\n==================\r\n\r\nBefore you can build Python, you must first configure it.\r\nFortunately, the configuration and build process has been automated\r\nfor Unix and Linux installations, so all you usually have to do is\r\ntype a few commands and sit back.  There are some platforms where\r\nthings are not quite as smooth; see the platform specific notes below.\r\nIf you want to build for multiple platforms sharing the same source\r\ntree, see the section on VPATH below.\r\n\r\nStart by running the script \"./configure\", which determines your\r\nsystem configuration and creates the Makefile.  (It takes a minute or\r\ntwo -- please be patient!)  You may want to pass options to the\r\nconfigure script -- see the section below on configuration options and\r\nvariables.  When it's done, you are ready to run make.\r\n\r\nTo build Python, you normally type \"make\" in the toplevel directory.\r\nIf you have changed the configuration, the Makefile may have to be\r\nrebuilt.  In this case, you may have to run make again to correctly\r\nbuild your desired target.  The interpreter executable is built in the\r\ntop level directory.\r\n\r\nOnce you have built a Python interpreter, see the subsections below on\r\ntesting and installation.  If you run into trouble, see the next\r\nsection.\r\n\r\nPrevious versions of Python used a manual configuration process that\r\ninvolved editing the file Modules/Setup.  While this file still exists\r\nand manual configuration is still supported, it is rarely needed any\r\nmore: almost all modules are automatically built as appropriate under\r\nguidance of the setup.py script, which is run by Make after the\r\ninterpreter has been built.\r\n\r\n\r\nTroubleshooting\r\n---------------\r\n\r\nSee also the platform specific notes in the next section.\r\n\r\nIf you run into other trouble, see the FAQ\r\n(http://www.python.org/doc/faq/) for hints on what can go wrong, and\r\nhow to fix it.\r\n\r\nIf you rerun the configure script with different options, remove all\r\nobject files by running \"make clean\" before rebuilding.  Believe it or\r\nnot, \"make clean\" sometimes helps to clean up other inexplicable\r\nproblems as well.  Try it before sending in a bug report!\r\n\r\nIf the configure script fails or doesn't seem to find things that\r\nshould be there, inspect the config.log file.\r\n\r\nIf you get a warning for every file about the -Olimit option being no\r\nlonger supported, you can ignore it.  There's no foolproof way to know\r\nwhether this option is needed; all we can do is test whether it is\r\naccepted without error.  On some systems, e.g. older SGI compilers, it\r\nis essential for performance (specifically when compiling ceval.c,\r\nwhich has more basic blocks than the default limit of 1000).  If the\r\nwarning bothers you, edit the Makefile to remove \"-Olimit 1500\" from\r\nthe OPT variable.\r\n\r\nIf you get failures in test_long, or sys.maxint gets set to -1, you\r\nare probably experiencing compiler bugs, usually related to\r\noptimization.  This is a common problem with some versions of gcc, and\r\nsome vendor-supplied compilers, which can sometimes be worked around\r\nby turning off optimization.  Consider switching to stable versions\r\n(gcc 2.95.2, gcc 3.x, or contact your vendor.)\r\n\r\nFrom Python 2.0 onward, all Python C code is ANSI C.  Compiling using\r\nold K&R-C-only compilers is no longer possible.  ANSI C compilers are\r\navailable for all modern systems, either in the form of updated\r\ncompilers from the vendor, or one of the free compilers (gcc).\r\n\r\nIf \"make install\" fails mysteriously during the \"compiling the library\"\r\nstep, make sure that you don't have any of the PYTHONPATH or PYTHONHOME\r\nenvironment variables set, as they may interfere with the newly built\r\nexecutable which is compiling the library.\r\n\r\nUnsupported systems\r\n-------------------\r\n\r\nA number of systems are not supported in Python 2.7 anymore. Some\r\nsupport code is still present, but will be removed in later versions.\r\nIf you still need to use current Python versions on these systems,\r\nplease send a message to python-dev@python.org indicating that you\r\nvolunteer to support this system. For a more detailed discussion \r\nregarding no-longer-supported and resupporting platforms, as well\r\nas a list of platforms that became or will be unsupported, see PEP 11.\r\n\r\nMore specifically, the following systems are not supported any\r\nlonger:\r\n- SunOS 4\r\n- DYNIX\r\n- dgux\r\n- Minix\r\n- NeXT\r\n- Irix 4 and --with-sgi-dl\r\n- Linux 1\r\n- Systems defining __d6_pthread_create (configure.in)\r\n- Systems defining PY_PTHREAD_D4, PY_PTHREAD_D6,\r\n  or PY_PTHREAD_D7 in thread_pthread.h\r\n- Systems using --with-dl-dld\r\n- Systems using --without-universal-newlines\r\n- MacOS 9\r\n- Systems using --with-wctype-functions\r\n- Win9x, WinME\r\n\r\n\r\nPlatform specific notes\r\n-----------------------\r\n\r\n(Some of these may no longer apply.  If you find you can build Python\r\non these platforms without the special directions mentioned here,\r\nsubmit a documentation bug report to SourceForge (see Bug Reports\r\nabove) so we can remove them!)\r\n\r\nUnix platforms: If your vendor still ships (and you still use) Berkeley DB\r\n        1.85 you will need to edit Modules/Setup to build the bsddb185\r\n        module and add a line to sitecustomize.py which makes it the\r\n        default.  In Modules/Setup a line like\r\n\r\n            bsddb185 bsddbmodule.c\r\n\r\n        should work.  (You may need to add -I, -L or -l flags to direct the\r\n        compiler and linker to your include files and libraries.)\r\n\r\nXXX I think this next bit is out of date:\r\n\r\n64-bit platforms: The modules audioop, and imageop don't work.\r\n        The setup.py script disables them on 64-bit installations.\r\n        Don't try to enable them in the Modules/Setup file.  They\r\n        contain code that is quite wordsize sensitive.  (If you have a\r\n        fix, let us know!)\r\n\r\nSolaris: When using Sun's C compiler with threads, at least on Solaris\r\n        2.5.1, you need to add the \"-mt\" compiler option (the simplest\r\n        way is probably to specify the compiler with this option as\r\n        the \"CC\" environment variable when running the configure\r\n        script).\r\n\r\n        When using GCC on Solaris, beware of binutils 2.13 or GCC\r\n        versions built using it.  This mistakenly enables the\r\n        -zcombreloc option which creates broken shared libraries on\r\n        Solaris.  binutils 2.12 works, and the binutils maintainers\r\n        are aware of the problem.  Binutils 2.13.1 only partially\r\n        fixed things.  It appears that 2.13.2 solves the problem\r\n        completely.  This problem is known to occur with Solaris 2.7\r\n        and 2.8, but may also affect earlier and later versions of the\r\n        OS.\r\n\r\n        When the dynamic loader complains about errors finding shared\r\n        libraries, such as\r\n\r\n        ld.so.1: ./python: fatal: libstdc++.so.5: open failed:\r\n        No such file or directory\r\n\r\n        you need to first make sure that the library is available on\r\n        your system. Then, you need to instruct the dynamic loader how\r\n        to find it. You can choose any of the following strategies:\r\n\r\n        1. When compiling Python, set LD_RUN_PATH to the directories\r\n           containing missing libraries.\r\n        2. When running Python, set LD_LIBRARY_PATH to these directories.\r\n        3. Use crle(8) to extend the search path of the loader.\r\n        4. Modify the installed GCC specs file, adding -R options into the\r\n           *link: section.\r\n\r\n        The complex object fails to compile on Solaris 10 with gcc 3.4 (at\r\n        least up to 3.4.3).  To work around it, define Py_HUGE_VAL as\r\n        HUGE_VAL(), e.g.:\r\n\r\n          make CPPFLAGS='-D\"Py_HUGE_VAL=HUGE_VAL()\" -I. -I$(srcdir)/Include'\r\n          ./python setup.py CPPFLAGS='-D\"Py_HUGE_VAL=HUGE_VAL()\"'\r\n\r\nLinux:  A problem with threads and fork() was tracked down to a bug in\r\n        the pthreads code in glibc version 2.0.5; glibc version 2.0.7\r\n        solves the problem.  This causes the popen2 test to fail;\r\n        problem and solution reported by Pablo Bleyer.\r\n\r\nRed Hat Linux: Red Hat 9 built Python2.2 in UCS-4 mode and hacked\r\n        Tcl to support it. To compile Python2.3 with Tkinter, you will\r\n        need to pass --enable-unicode=ucs4 flag to ./configure.\r\n\r\n        There's an executable /usr/bin/python which is Python\r\n        1.5.2 on most older Red Hat installations; several key Red Hat tools\r\n        require this version.  Python 2.1.x may be installed as\r\n        /usr/bin/python2.  The Makefile installs Python as\r\n        /usr/local/bin/python, which may or may not take precedence\r\n        over /usr/bin/python, depending on how you have set up $PATH.\r\n\r\nFreeBSD 3.x and probably platforms with NCurses that use libmytinfo or\r\n        similar: When using cursesmodule, the linking is not done in\r\n        the correct order with the defaults.  Remove \"-ltermcap\" from\r\n        the readline entry in Setup, and use as curses entry: \"curses\r\n        cursesmodule.c -lmytinfo -lncurses -ltermcap\" - \"mytinfo\" (so\r\n        called on FreeBSD) should be the name of the auxiliary library\r\n        required on your platform.  Normally, it would be linked\r\n        automatically, but not necessarily in the correct order.\r\n\r\nBSDI:   BSDI versions before 4.1 have known problems with threads,\r\n        which can cause strange errors in a number of modules (for\r\n        instance, the 'test_signal' test script will hang forever.)\r\n        Turning off threads (with --with-threads=no) or upgrading to\r\n        BSDI 4.1 solves this problem.\r\n\r\nDEC Unix: Run configure with --with-dec-threads, or with\r\n        --with-threads=no if no threads are desired (threads are on by\r\n        default).  When using GCC, it is possible to get an internal\r\n        compiler error if optimization is used.  This was reported for\r\n        GCC 2.7.2.3 on selectmodule.c.  Manually compile the affected\r\n        file without optimization to solve the problem.\r\n\r\nDEC Ultrix: compile with GCC to avoid bugs in the native compiler,\r\n        and pass SHELL=/bin/sh5 to Make when installing.\r\n\r\nAIX:    A complete overhaul of the shared library support is now in\r\n        place.  See Misc/AIX-NOTES for some notes on how it's done.\r\n        (The optimizer bug reported at this place in previous releases\r\n        has been worked around by a minimal code change.) If you get\r\n        errors about pthread_* functions, during compile or during\r\n        testing, try setting CC to a thread-safe (reentrant) compiler,\r\n        like \"cc_r\".  For full C++ module support, set CC=\"xlC_r\" (or\r\n        CC=\"xlC\" without thread support).\r\n\r\nAIX 5.3: To build a 64-bit version with IBM's compiler, I used the\r\n        following:\r\n\r\n        export PATH=/usr/bin:/usr/vacpp/bin\r\n        ./configure --with-gcc=\"xlc_r -q64\" --with-cxx=\"xlC_r -q64\" \\\r\n                    --disable-ipv6 AR=\"ar -X64\"\r\n        make\r\n\r\nHP-UX:  When using threading, you may have to add -D_REENTRANT to the\r\n        OPT variable in the top-level Makefile; reported by Pat Knight,\r\n        this seems to make a difference (at least for HP-UX 10.20)\r\n        even though pyconfig.h defines it. This seems unnecessary when\r\n        using HP/UX 11 and later - threading seems to work \"out of the\r\n        box\".\r\n\r\nHP-UX ia64: When building on the ia64 (Itanium) platform using HP's\r\n        compiler, some experience has shown that the compiler's\r\n        optimiser produces a completely broken version of python\r\n        (see http://bugs.python.org/814976). To work around this,\r\n        edit the Makefile and remove -O from the OPT line.\r\n\r\n        To build a 64-bit executable on an Itanium 2 system using HP's\r\n        compiler, use these environment variables:\r\n\r\n                CC=cc\r\n                CXX=aCC\r\n                BASECFLAGS=\"+DD64\"\r\n                LDFLAGS=\"+DD64 -lxnet\"\r\n\r\n        and call configure as:\r\n\r\n                ./configure --without-gcc\r\n\r\n        then *unset* the environment variables again before running\r\n        make.  (At least one of these flags causes the build to fail\r\n        if it remains set.)  You still have to edit the Makefile and\r\n        remove -O from the OPT line.\r\n\r\nHP PA-RISC 2.0: A recent bug report (http://bugs.python.org/546117)\r\n        suggests that the C compiler in this 64-bit system has bugs\r\n        in the optimizer that break Python.  Compiling without\r\n        optimization solves the problems.\r\n\r\nSCO:    The following apply to SCO 3 only; Python builds out of the box\r\n        on SCO 5 (or so we've heard).\r\n\r\n        1) Everything works much better if you add -U__STDC__ to the\r\n        defs.  This is because all the SCO header files are broken.\r\n        Anything that isn't mentioned in the C standard is\r\n        conditionally excluded when __STDC__ is defined.\r\n\r\n        2) Due to the U.S. export restrictions, SCO broke the crypt\r\n        stuff out into a separate library, libcrypt_i.a so the LIBS\r\n        needed be set to:\r\n\r\n                LIBS=' -lsocket -lcrypt_i'\r\n\r\nUnixWare: There are known bugs in the math library of the system, as well as\r\n        problems in the handling of threads (calling fork in one\r\n        thread may interrupt system calls in others). Therefore, test_math and\r\n        tests involving threads will fail until those problems are fixed.\r\n\r\nQNX:    Chris Herborth (chrish@qnx.com) writes:\r\n        configure works best if you use GNU bash; a port is available on\r\n        ftp.qnx.com in /usr/free.  I used the following process to build,\r\n        test and install Python 1.5.x under QNX:\r\n\r\n        1) CONFIG_SHELL=/usr/local/bin/bash CC=cc RANLIB=: \\\r\n            ./configure --verbose --without-gcc --with-libm=\"\"\r\n\r\n        2) edit Modules/Setup to activate everything that makes sense for\r\n           your system... tested here at QNX with the following modules:\r\n\r\n                array, audioop, binascii, cPickle, cStringIO, cmath,\r\n                crypt, curses, errno, fcntl, gdbm, grp, imageop,\r\n                _locale, math, md5, new, operator, parser, pcre,\r\n                posix, pwd, readline, regex, reop,\r\n                select, signal, socket, soundex, strop, struct,\r\n                syslog, termios, time, timing, zlib, audioop, imageop\r\n\r\n        3) make SHELL=/usr/local/bin/bash\r\n\r\n           or, if you feel the need for speed:\r\n\r\n           make SHELL=/usr/local/bin/bash OPT=\"-5 -Oil+nrt\"\r\n\r\n        4) make SHELL=/usr/local/bin/bash test\r\n\r\n           Using GNU readline 2.2 seems to behave strangely, but I\r\n           think that's a problem with my readline 2.2 port.  :-\\\r\n\r\n        5) make SHELL=/usr/local/bin/bash install\r\n\r\n        If you get SIGSEGVs while running Python (I haven't yet, but\r\n        I've only run small programs and the test cases), you're\r\n        probably running out of stack; the default 32k could be a\r\n        little tight.  To increase the stack size, edit the Makefile\r\n        to read: LDFLAGS = -N 48k\r\n\r\nBeOS:   See Misc/BeOS-NOTES for notes about compiling/installing\r\n        Python on BeOS R3 or later.  Note that only the PowerPC\r\n        platform is supported for R3; both PowerPC and x86 are\r\n        supported for R4.\r\n\r\nCray T3E: Mark Hadfield (m.hadfield@niwa.co.nz) writes:\r\n        Python can be built satisfactorily on a Cray T3E but based on\r\n        my experience with the NIWA T3E (2002-05-22, version 2.2.1)\r\n        there are a few bugs and gotchas. For more information see a\r\n        thread on comp.lang.python in May 2002 entitled \"Building\r\n        Python on Cray T3E\".\r\n\r\n        1) Use Cray's cc and not gcc. The latter was reported not to\r\n           work by Konrad Hinsen. It may work now, but it may not.\r\n\r\n        2) To set sys.platform to something sensible, pass the\r\n           following environment variable to the configure script:\r\n\r\n             MACHDEP=unicosmk\r\n\r\n        2) Run configure with option \"--enable-unicode=ucs4\".\r\n\r\n        3) The Cray T3E does not support dynamic linking, so extension\r\n           modules have to be built by adding (or uncommenting) lines\r\n           in Modules/Setup. The minimum set of modules is\r\n\r\n             posix, new, _sre, unicodedata\r\n\r\n           On NIWA's vanilla T3E system the following have also been\r\n           included successfully:\r\n\r\n             _codecs, _locale, _socket, _symtable, _testcapi, _weakref\r\n             array, binascii, cmath, cPickle, crypt, cStringIO, dbm\r\n             errno, fcntl, grp, math, md5, operator, parser, pcre, pwd\r\n             regex, rotor, select, struct, strop, syslog, termios\r\n             time, timing, xreadlines\r\n\r\n        4) Once the python executable and library have been built, make\r\n           will execute setup.py, which will attempt to build remaining\r\n           extensions and link them dynamically. Each of these attempts\r\n           will fail but should not halt the make process. This is\r\n           normal.\r\n\r\n        5) Running \"make test\" uses a lot of resources and causes\r\n           problems on our system. You might want to try running tests\r\n           singly or in small groups.\r\n\r\nSGI:    SGI's standard \"make\" utility (/bin/make or /usr/bin/make)\r\n        does not check whether a command actually changed the file it\r\n        is supposed to build.  This means that whenever you say \"make\"\r\n        it will redo the link step.  The remedy is to use SGI's much\r\n        smarter \"smake\" utility (/usr/sbin/smake), or GNU make.  If\r\n        you set the first line of the Makefile to #!/usr/sbin/smake\r\n        smake will be invoked by make (likewise for GNU make).\r\n\r\n        WARNING: There are bugs in the optimizer of some versions of\r\n        SGI's compilers that can cause bus errors or other strange\r\n        behavior, especially on numerical operations.  To avoid this,\r\n        try building with \"make OPT=\".\r\n\r\nOS/2:   If you are running Warp3 or Warp4 and have IBM's VisualAge C/C++\r\n        compiler installed, just change into the pc\\os2vacpp directory\r\n        and type NMAKE.  Threading and sockets are supported by default\r\n        in the resulting binaries of PYTHON15.DLL and PYTHON.EXE.\r\n\r\nReliant UNIX: The thread support does not compile on Reliant UNIX, and\r\n        there is a (minor) problem in the configure script for that\r\n        platform as well.  This should be resolved in time for a\r\n        future release.\r\n\r\nMacOSX: The tests will crash on both 10.1 and 10.2 with SEGV in\r\n        test_re and test_sre due to the small default stack size.  If\r\n        you set the stack size to 2048 before doing a \"make test\" the\r\n        failure can be avoided.  If you're using the tcsh or csh shells,\r\n        use \"limit stacksize 2048\" and for the bash shell (the default\r\n        as of OSX 10.3), use \"ulimit -s 2048\".\r\n\r\n        On naked Darwin you may want to add the configure option\r\n        \"--disable-toolbox-glue\" to disable the glue code for the Carbon\r\n        interface modules. The modules themselves are currently only built\r\n        if you add the --enable-framework option, see below.\r\n\r\n        On a clean OSX /usr/local does not exist. Do a\r\n        \"sudo mkdir -m 775 /usr/local\"\r\n        before you do a make install. It is probably not a good idea to\r\n        do \"sudo make install\" which installs everything as superuser,\r\n        as this may later cause problems when installing distutils-based\r\n        additions.\r\n\r\n        Some people have reported problems building Python after using \"fink\"\r\n        to install additional unix software. Disabling fink (remove all \r\n        references to /sw from your .profile or .login) should solve this.\r\n\r\n        You may want to try the configure option \"--enable-framework\"\r\n        which installs Python as a framework. The location can be set\r\n        as argument to the --enable-framework option (default\r\n        /Library/Frameworks). A framework install is probably needed if you\r\n        want to use any Aqua-based GUI toolkit (whether Tkinter, wxPython,\r\n        Carbon, Cocoa or anything else).\r\n\r\n        You may also want to try the configure option \"--enable-universalsdk\"\r\n        which builds Python as a universal binary with support for the \r\n        i386 and PPC architetures. This requires Xcode 2.1 or later to build.\r\n\r\n        See Mac/README for more information on framework and \r\n        universal builds.\r\n\r\nCygwin: With recent (relative to the time of writing, 2001-12-19)\r\n        Cygwin installations, there are problems with the interaction\r\n        of dynamic linking and fork().  This manifests itself in build\r\n        failures during the execution of setup.py.\r\n\r\n        There are two workarounds that both enable Python (albeit\r\n        without threading support) to build and pass all tests on\r\n        NT/2000 (and most likely XP as well, though reports of testing\r\n        on XP would be appreciated).\r\n\r\n        The workarounds:\r\n\r\n        (a) the band-aid fix is to link the _socket module statically\r\n        rather than dynamically (which is the default).\r\n\r\n        To do this, run \"./configure --with-threads=no\" including any\r\n        other options you need (--prefix, etc.).  Then in Modules/Setup\r\n        uncomment the lines:\r\n\r\n        #SSL=/usr/local/ssl\r\n        #_socket socketmodule.c \\\r\n        #       -DUSE_SSL -I$(SSL)/include -I$(SSL)/include/openssl \\\r\n        #       -L$(SSL)/lib -lssl -lcrypto\r\n\r\n        and remove \"local/\" from the SSL variable.  Finally, just run\r\n        \"make\"!\r\n\r\n        (b) The \"proper\" fix is to rebase the Cygwin DLLs to prevent\r\n        base address conflicts.  Details on how to do this can be\r\n        found in the following mail:\r\n\r\n           http://sources.redhat.com/ml/cygwin/2001-12/msg00894.html\r\n\r\n        It is hoped that a version of this solution will be\r\n        incorporated into the Cygwin distribution fairly soon.\r\n\r\n        Two additional problems:\r\n\r\n        (1) Threading support should still be disabled due to a known\r\n        bug in Cygwin pthreads that causes test_threadedtempfile to\r\n        hang.\r\n\r\n        (2) The _curses module does not build.  This is a known\r\n        Cygwin ncurses problem that should be resolved the next time\r\n        that this package is released.\r\n\r\n        On older versions of Cygwin, test_poll may hang and test_strftime\r\n        may fail.\r\n\r\n        The situation on 9X/Me is not accurately known at present.\r\n        Some time ago, there were reports that the following\r\n        regression tests failed:\r\n\r\n            test_pwd\r\n            test_select (hang)\r\n            test_socket\r\n\r\n        Due to the test_select hang on 9X/Me, one should run the\r\n        regression test using the following:\r\n\r\n            make TESTOPTS='-l -x test_select' test\r\n\r\n        News regarding these platforms with more recent Cygwin\r\n        versions would be appreciated!\r\n\r\nWindows: When executing Python scripts on the command line using file type\r\n        associations (i.e. starting \"script.py\" instead of \"python script.py\"),\r\n        redirects may not work unless you set a specific registry key.  See\r\n        the Knowledge Base article <http://support.microsoft.com/kb/321788>.\r\n\r\n\r\nConfiguring the bsddb and dbm modules\r\n-------------------------------------\r\n\r\nBeginning with Python version 2.3, the PyBsddb package\r\n<http://pybsddb.sf.net/> was adopted into Python as the bsddb package,\r\nexposing a set of package-level functions which provide\r\nbackwards-compatible behavior.  Only versions 3.3 through 4.4 of\r\nSleepycat's libraries provide the necessary API, so older versions\r\naren't supported through this interface.  The old bsddb module has\r\nbeen retained as bsddb185, though it is not built by default.  Users\r\nwishing to use it will have to tweak Modules/Setup to build it.  The\r\ndbm module will still be built against the Sleepycat libraries if\r\nother preferred alternatives (ndbm, gdbm) are not found.\r\n\r\nBuilding the sqlite3 module\r\n---------------------------\r\n\r\nTo build the sqlite3 module, you'll need the sqlite3 or libsqlite3\r\npackages installed, including the header files. Many modern operating\r\nsystems distribute the headers in a separate package to the library -\r\noften it will be the same name as the main package, but with a -dev or\r\n-devel suffix. \r\n\r\nThe version of pysqlite2 that's including in Python needs sqlite3 3.0.8\r\nor later. setup.py attempts to check that it can find a correct version.\r\n\r\nConfiguring threads\r\n-------------------\r\n\r\nAs of Python 2.0, threads are enabled by default.  If you wish to\r\ncompile without threads, or if your thread support is broken, pass the\r\n--with-threads=no switch to configure.  Unfortunately, on some\r\nplatforms, additional compiler and/or linker options are required for\r\nthreads to work properly.  Below is a table of those options,\r\ncollected by Bill Janssen.  We would love to automate this process\r\nmore, but the information below is not enough to write a patch for the\r\nconfigure.in file, so manual intervention is required.  If you patch\r\nthe configure.in file and are confident that the patch works, please\r\nsend in the patch.  (Don't bother patching the configure script itself\r\n-- it is regenerated each time the configure.in file changes.)\r\n\r\nCompiler switches for threads\r\n.............................\r\n\r\nThe definition of _REENTRANT should be configured automatically, if\r\nthat does not work on your system, or if _REENTRANT is defined\r\nincorrectly, please report that as a bug.\r\n\r\n    OS/Compiler/threads                     Switches for use with threads\r\n    (POSIX is draft 10, DCE is draft 4)     compile & link\r\n\r\n    SunOS 5.{1-5}/{gcc,SunPro cc}/solaris   -mt\r\n    SunOS 5.5/{gcc,SunPro cc}/POSIX         (nothing)\r\n    DEC OSF/1 3.x/cc/DCE                    -threads\r\n            (butenhof@zko.dec.com)\r\n    Digital UNIX 4.x/cc/DCE                 -threads\r\n            (butenhof@zko.dec.com)\r\n    Digital UNIX 4.x/cc/POSIX               -pthread\r\n            (butenhof@zko.dec.com)\r\n    AIX 4.1.4/cc_r/d7                       (nothing)\r\n            (buhrt@iquest.net)\r\n    AIX 4.1.4/cc_r4/DCE                     (nothing)\r\n            (buhrt@iquest.net)\r\n    IRIX 6.2/cc/POSIX                       (nothing)\r\n            (robertl@cwi.nl)\r\n\r\n\r\nLinker (ld) libraries and flags for threads\r\n...........................................\r\n\r\n    OS/threads                          Libraries/switches for use with threads\r\n\r\n    SunOS 5.{1-5}/solaris               -lthread\r\n    SunOS 5.5/POSIX                     -lpthread\r\n    DEC OSF/1 3.x/DCE                   -lpthreads -lmach -lc_r -lc\r\n            (butenhof@zko.dec.com)\r\n    Digital UNIX 4.x/DCE                -lpthreads -lpthread -lmach -lexc -lc\r\n            (butenhof@zko.dec.com)\r\n    Digital UNIX 4.x/POSIX              -lpthread -lmach -lexc -lc\r\n            (butenhof@zko.dec.com)\r\n    AIX 4.1.4/{draft7,DCE}              (nothing)\r\n            (buhrt@iquest.net)\r\n    IRIX 6.2/POSIX                      -lpthread\r\n            (jph@emilia.engr.sgi.com)\r\n\r\n\r\nBuilding a shared libpython\r\n---------------------------\r\n\r\nStarting with Python 2.3, the majority of the interpreter can be built\r\ninto a shared library, which can then be used by the interpreter\r\nexecutable, and by applications embedding Python. To enable this feature,\r\nconfigure with --enable-shared.\r\n\r\nIf you enable this feature, the same object files will be used to create\r\na static library.  In particular, the static library will contain object\r\nfiles using position-independent code (PIC) on platforms where PIC flags\r\nare needed for the shared library.\r\n\r\n\r\nConfiguring additional built-in modules\r\n---------------------------------------\r\n\r\nStarting with Python 2.1, the setup.py script at the top of the source\r\ndistribution attempts to detect which modules can be built and\r\nautomatically compiles them.  Autodetection doesn't always work, so\r\nyou can still customize the configuration by editing the Modules/Setup\r\nfile; but this should be considered a last resort.  The rest of this\r\nsection only applies if you decide to edit the Modules/Setup file.\r\nYou also need this to enable static linking of certain modules (which\r\nis needed to enable profiling on some systems).\r\n\r\nThis file is initially copied from Setup.dist by the configure script;\r\nif it does not exist yet, create it by copying Modules/Setup.dist\r\nyourself (configure will never overwrite it).  Never edit Setup.dist\r\n-- always edit Setup or Setup.local (see below).  Read the comments in\r\nthe file for information on what kind of edits are allowed.  When you\r\nhave edited Setup in the Modules directory, the interpreter will\r\nautomatically be rebuilt the next time you run make (in the toplevel\r\ndirectory).\r\n\r\nMany useful modules can be built on any Unix system, but some optional\r\nmodules can't be reliably autodetected.  Often the quickest way to\r\ndetermine whether a particular module works or not is to see if it\r\nwill build: enable it in Setup, then if you get compilation or link\r\nerrors, disable it -- you're either missing support or need to adjust\r\nthe compilation and linking parameters for that module.\r\n\r\nOn SGI IRIX, there are modules that interface to many SGI specific\r\nsystem libraries, e.g. the GL library and the audio hardware.  These\r\nmodules will not be built by the setup.py script.\r\n\r\nIn addition to the file Setup, you can also edit the file Setup.local.\r\n(the makesetup script processes both).  You may find it more\r\nconvenient to edit Setup.local and leave Setup alone.  Then, when\r\ninstalling a new Python version, you can copy your old Setup.local\r\nfile.\r\n\r\n\r\nSetting the optimization/debugging options\r\n------------------------------------------\r\n\r\nIf you want or need to change the optimization/debugging options for\r\nthe C compiler, assign to the OPT variable on the toplevel make\r\ncommand; e.g. \"make OPT=-g\" will build a debugging version of Python\r\non most platforms.  The default is OPT=-O; a value for OPT in the\r\nenvironment when the configure script is run overrides this default\r\n(likewise for CC; and the initial value for LIBS is used as the base\r\nset of libraries to link with).\r\n\r\nWhen compiling with GCC, the default value of OPT will also include\r\nthe -Wall and -Wstrict-prototypes options.\r\n\r\nAdditional debugging code to help debug memory management problems can\r\nbe enabled by using the --with-pydebug option to the configure script.\r\n\r\nFor flags that change binary compatibility, use the EXTRA_CFLAGS\r\nvariable.\r\n\r\n\r\nProfiling\r\n---------\r\n\r\nIf you want C profiling turned on, the easiest way is to run configure\r\nwith the CC environment variable to the necessary compiler\r\ninvocation.  For example, on Linux, this works for profiling using\r\ngprof(1):\r\n\r\n    CC=\"gcc -pg\" ./configure\r\n\r\nNote that on Linux, gprof apparently does not work for shared\r\nlibraries.  The Makefile/Setup mechanism can be used to compile and\r\nlink most extension modules statically.\r\n\r\n\r\nCoverage checking\r\n-----------------\r\n\r\nFor C coverage checking using gcov, run \"make coverage\".  This will\r\nbuild a Python binary with profiling activated, and a \".gcno\" and\r\n\".gcda\" file for every source file compiled with that option.  With\r\nthe built binary, now run the code whose coverage you want to check.\r\nThen, you can see coverage statistics for each individual source file\r\nby running gcov, e.g.\r\n\r\n    gcov -o Modules zlibmodule\r\n\r\nThis will create a \"zlibmodule.c.gcov\" file in the current directory\r\ncontaining coverage info for that source file.\r\n\r\nThis works only for source files statically compiled into the\r\nexecutable; use the Makefile/Setup mechanism to compile and link\r\nextension modules you want to coverage-check statically.\r\n\r\n\r\nTesting\r\n-------\r\n\r\nTo test the interpreter, type \"make test\" in the top-level directory.\r\nThis runs the test set twice (once with no compiled files, once with\r\nthe compiled files left by the previous test run).  The test set\r\nproduces some output.  You can generally ignore the messages about\r\nskipped tests due to optional features which can't be imported.\r\nIf a message is printed about a failed test or a traceback or core\r\ndump is produced, something is wrong.  On some Linux systems (those\r\nthat are not yet using glibc 6), test_strftime fails due to a\r\nnon-standard implementation of strftime() in the C library. Please\r\nignore this, or upgrade to glibc version 6.\r\n\r\nBy default, tests are prevented from overusing resources like disk space and\r\nmemory.  To enable these tests, run \"make testall\".\r\n\r\nIMPORTANT: If the tests fail and you decide to mail a bug report,\r\n*don't* include the output of \"make test\".  It is useless.  Run the\r\nfailing test manually, as follows:\r\n\r\n        ./python Lib/test/regrtest.py -v test_whatever\r\n\r\n(substituting the top of the source tree for '.' if you built in a\r\ndifferent directory).  This runs the test in verbose mode.\r\n\r\n\r\nInstalling\r\n----------\r\n\r\nTo install the Python binary, library modules, shared library modules\r\n(see below), include files, configuration files, and the manual page,\r\njust type\r\n\r\n        make install\r\n\r\nThis will install all platform-independent files in subdirectories of\r\nthe directory given with the --prefix option to configure or to the\r\n`prefix' Make variable (default /usr/local).  All binary and other\r\nplatform-specific files will be installed in subdirectories if the\r\ndirectory given by --exec-prefix or the `exec_prefix' Make variable\r\n(defaults to the --prefix directory) is given.\r\n\r\nIf DESTDIR is set, it will be taken as the root directory of the\r\ninstallation, and files will be installed into $(DESTDIR)$(prefix),\r\n$(DESTDIR)$(exec_prefix), etc.\r\n\r\nAll subdirectories created will have Python's version number in their\r\nname, e.g. the library modules are installed in\r\n\"/usr/local/lib/python<version>/\" by default, where <version> is the\r\n<major>.<minor> release number (e.g. \"2.1\").  The Python binary is\r\ninstalled as \"python<version>\" and a hard link named \"python\" is\r\ncreated.  The only file not installed with a version number in its\r\nname is the manual page, installed as \"/usr/local/man/man1/python.1\"\r\nby default.\r\n\r\nIf you want to install multiple versions of Python see the section below\r\nentitled \"Installing multiple versions\".\r\n\r\nThe only thing you may have to install manually is the Python mode for\r\nEmacs found in Misc/python-mode.el.  (But then again, more recent\r\nversions of Emacs may already have it.)  Follow the instructions that\r\ncame with Emacs for installation of site-specific files.\r\n\r\nOn Mac OS X, if you have configured Python with --enable-framework, you\r\nshould use \"make frameworkinstall\" to do the installation. Note that this\r\ninstalls the Python executable in a place that is not normally on your\r\nPATH, you may want to set up a symlink in /usr/local/bin.\r\n\r\n\r\nInstalling multiple versions\r\n----------------------------\r\n\r\nOn Unix and Mac systems if you intend to install multiple versions of Python\r\nusing the same installation prefix (--prefix argument to the configure\r\nscript) you must take care that your primary python executable is not\r\noverwritten by the installation of a different version.  All files and\r\ndirectories installed using \"make altinstall\" contain the major and minor\r\nversion and can thus live side-by-side.  \"make install\" also creates\r\n${prefix}/bin/python which refers to ${prefix}/bin/pythonX.Y.  If you intend\r\nto install multiple versions using the same prefix you must decide which\r\nversion (if any) is your \"primary\" version.  Install that version using\r\n\"make install\".  Install all other versions using \"make altinstall\".\r\n\r\nFor example, if you want to install Python 2.5, 2.6 and 3.0 with 2.6 being\r\nthe primary version, you would execute \"make install\" in your 2.6 build\r\ndirectory and \"make altinstall\" in the others.\r\n\r\n\r\nConfiguration options and variables\r\n-----------------------------------\r\n\r\nSome special cases are handled by passing options to the configure\r\nscript.\r\n\r\nWARNING: if you rerun the configure script with different options, you\r\nmust run \"make clean\" before rebuilding.  Exceptions to this rule:\r\nafter changing --prefix or --exec-prefix, all you need to do is remove\r\nModules/getpath.o.\r\n\r\n--with(out)-gcc: The configure script uses gcc (the GNU C compiler) if\r\n        it finds it.  If you don't want this, or if this compiler is\r\n        installed but broken on your platform, pass the option\r\n        --without-gcc.  You can also pass \"CC=cc\" (or whatever the\r\n        name of the proper C compiler is) in the environment, but the\r\n        advantage of using --without-gcc is that this option is\r\n        remembered by the config.status script for its --recheck\r\n        option.\r\n\r\n--prefix, --exec-prefix: If you want to install the binaries and the\r\n        Python library somewhere else than in /usr/local/{bin,lib},\r\n        you can pass the option --prefix=DIRECTORY; the interpreter\r\n        binary will be installed as DIRECTORY/bin/python and the\r\n        library files as DIRECTORY/lib/python/*.  If you pass\r\n        --exec-prefix=DIRECTORY (as well) this overrides the\r\n        installation prefix for architecture-dependent files (like the\r\n        interpreter binary).  Note that --prefix=DIRECTORY also\r\n        affects the default module search path (sys.path), when\r\n        Modules/config.c is compiled.  Passing make the option\r\n        prefix=DIRECTORY (and/or exec_prefix=DIRECTORY) overrides the\r\n        prefix set at configuration time; this may be more convenient\r\n        than re-running the configure script if you change your mind\r\n        about the install prefix.\r\n\r\n--with-readline: This option is no longer supported.  GNU\r\n        readline is automatically enabled by setup.py when present.\r\n\r\n--with-threads: On most Unix systems, you can now use multiple\r\n        threads, and support for this is enabled by default.  To\r\n        disable this, pass --with-threads=no.  If the library required\r\n        for threads lives in a peculiar place, you can use\r\n        --with-thread=DIRECTORY.  IMPORTANT: run \"make clean\" after\r\n        changing (either enabling or disabling) this option, or you\r\n        will get link errors!  Note: for DEC Unix use\r\n        --with-dec-threads instead.\r\n\r\n--with-sgi-dl: On SGI IRIX 4, dynamic loading of extension modules is\r\n        supported by the \"dl\" library by Jack Jansen, which is\r\n        ftp'able from ftp://ftp.cwi.nl/pub/dynload/dl-1.6.tar.Z.\r\n        This is enabled (after you've ftp'ed and compiled the dl\r\n        library) by passing --with-sgi-dl=DIRECTORY where DIRECTORY\r\n        is the absolute pathname of the dl library.  (Don't bother on\r\n        IRIX 5, it already has dynamic linking using SunOS style\r\n        shared libraries.)  THIS OPTION IS UNSUPPORTED.\r\n\r\n--with-dl-dld: Dynamic loading of modules is rumored to be supported\r\n        on some other systems: VAX (Ultrix), Sun3 (SunOS 3.4), Sequent\r\n        Symmetry (Dynix), and Atari ST.  This is done using a\r\n        combination of the GNU dynamic loading package\r\n        (ftp://ftp.cwi.nl/pub/dynload/dl-dld-1.1.tar.Z) and an\r\n        emulation of the SGI dl library mentioned above (the emulation\r\n        can be found at\r\n        ftp://ftp.cwi.nl/pub/dynload/dld-3.2.3.tar.Z).  To\r\n        enable this, ftp and compile both libraries, then call\r\n        configure, passing it the option\r\n        --with-dl-dld=DL_DIRECTORY,DLD_DIRECTORY where DL_DIRECTORY is\r\n        the absolute pathname of the dl emulation library and\r\n        DLD_DIRECTORY is the absolute pathname of the GNU dld library.\r\n        (Don't bother on SunOS 4 or 5, they already have dynamic\r\n        linking using shared libraries.)  THIS OPTION IS UNSUPPORTED.\r\n\r\n--with-libm, --with-libc: It is possible to specify alternative\r\n        versions for the Math library (default -lm) and the C library\r\n        (default the empty string) using the options\r\n        --with-libm=STRING and --with-libc=STRING, respectively.  For\r\n        example, if your system requires that you pass -lc_s to the C\r\n        compiler to use the shared C library, you can pass\r\n        --with-libc=-lc_s. These libraries are passed after all other\r\n        libraries, the C library last.\r\n\r\n--with-libs='libs': Add 'libs' to the LIBS that the python interpreter\r\n        is linked against.\r\n\r\n--with-cxx-main=<compiler>: If you plan to use C++ extension modules,\r\n        then -- on some platforms -- you need to compile python's main()\r\n        function with the C++ compiler. With this option, make will use\r\n        <compiler> to compile main() *and* to link the python executable.\r\n        It is likely that the resulting executable depends on the C++\r\n        runtime library of <compiler>. (The default is --without-cxx-main.)\r\n\r\n        There are platforms that do not require you to build Python\r\n        with a C++ compiler in order to use C++ extension modules.\r\n        E.g., x86 Linux with ELF shared binaries and GCC 3.x, 4.x is such\r\n        a platform. We recommend that you configure Python\r\n        --without-cxx-main on those platforms because a mismatch\r\n        between the C++ compiler version used to build Python and to\r\n        build a C++ extension module is likely to cause a crash at\r\n        runtime.\r\n\r\n        The Python installation also stores the variable CXX that\r\n        determines, e.g., the C++ compiler distutils calls by default\r\n        to build C++ extensions. If you set CXX on the configure command\r\n        line to any string of non-zero length, then configure won't\r\n        change CXX. If you do not preset CXX but pass\r\n        --with-cxx-main=<compiler>, then configure sets CXX=<compiler>.\r\n        In all other cases, configure looks for a C++ compiler by\r\n        some common names (c++, g++, gcc, CC, cxx, cc++, cl) and sets\r\n        CXX to the first compiler it finds. If it does not find any\r\n        C++ compiler, then it sets CXX=\"\".\r\n\r\n        Similarly, if you want to change the command used to link the\r\n        python executable, then set LINKCC on the configure command line.\r\n\r\n\r\n--with-pydebug:  Enable additional debugging code to help track down\r\n        memory management problems.  This allows printing a list of all\r\n        live objects when the interpreter terminates.\r\n\r\n--with(out)-universal-newlines: enable reading of text files with\r\n        foreign newline convention (default: enabled). In other words,\r\n        any of \\r, \\n or \\r\\n is acceptable as end-of-line character.\r\n        If enabled import and execfile will automatically accept any newline\r\n        in files. Python code can open a file with open(file, 'U') to\r\n        read it in universal newline mode. THIS OPTION IS UNSUPPORTED.\r\n\r\n--with-tsc: Profile using the Pentium timestamping counter (TSC).\r\n\r\n--with-system-ffi:  Build the _ctypes extension module using an ffi\r\n        library installed on the system.\r\n\r\n--with-dbmliborder=db1:db2:...:  Specify the order that backends for the\r\n\tdbm extension are checked. Valid value is a colon separated string\r\n\twith the backend names `ndbm', `gdbm' and `bdb'.\r\n\r\nBuilding for multiple architectures (using the VPATH feature)\r\n-------------------------------------------------------------\r\n\r\nIf your file system is shared between multiple architectures, it\r\nusually is not necessary to make copies of the sources for each\r\narchitecture you want to support.  If the make program supports the\r\nVPATH feature, you can create an empty build directory for each\r\narchitecture, and in each directory run the configure script (on the\r\nappropriate machine with the appropriate options).  This creates the\r\nnecessary subdirectories and the Makefiles therein.  The Makefiles\r\ncontain a line VPATH=... which points to a directory containing the\r\nactual sources.  (On SGI systems, use \"smake -J1\" instead of \"make\" if\r\nyou use VPATH -- don't try gnumake.)\r\n\r\nFor example, the following is all you need to build a minimal Python\r\nin /usr/tmp/python (assuming ~guido/src/python is the toplevel\r\ndirectory and you want to build in /usr/tmp/python):\r\n\r\n        $ mkdir /usr/tmp/python\r\n        $ cd /usr/tmp/python\r\n        $ ~guido/src/python/configure\r\n        [...]\r\n        $ make\r\n        [...]\r\n        $\r\n\r\nNote that configure copies the original Setup file to the build\r\ndirectory if it finds no Setup file there.  This means that you can\r\nedit the Setup file for each architecture independently.  For this\r\nreason, subsequent changes to the original Setup file are not tracked\r\nautomatically, as they might overwrite local changes.  To force a copy\r\nof a changed original Setup file, delete the target Setup file.  (The\r\nmakesetup script supports multiple input files, so if you want to be\r\nfancy you can change the rules to create an empty Setup.local if it\r\ndoesn't exist and run it with arguments $(srcdir)/Setup Setup.local;\r\nhowever this assumes that you only need to add modules.)\r\n\r\nAlso note that you can't use a workspace for VPATH and non VPATH builds. The\r\nobject files left behind by one version confuses the other.\r\n\r\n\r\nBuilding on non-UNIX systems\r\n----------------------------\r\n\r\nFor Windows (2000/NT/ME/98/95), assuming you have MS VC++ 7.1, the\r\nproject files are in PCbuild, the workspace is pcbuild.dsw.  See\r\nPCbuild\\readme.txt for detailed instructions.\r\n\r\nFor other non-Unix Windows compilers, in particular MS VC++ 6.0 and\r\nfor OS/2, enter the directory \"PC\" and read the file \"readme.txt\".\r\n\r\nFor the Mac, a separate source distribution will be made available,\r\nfor use with the CodeWarrior compiler.  If you are interested in Mac\r\ndevelopment, join the PythonMac Special Interest Group\r\n(http://www.python.org/sigs/pythonmac-sig/, or send email to\r\npythonmac-sig-request@python.org).\r\n\r\nOf course, there are also binary distributions available for these\r\nplatforms -- see http://www.python.org/.\r\n\r\nTo port Python to a new non-UNIX system, you will have to fake the\r\neffect of running the configure script manually (for Mac and PC, this\r\nhas already been done for you).  A good start is to copy the file\r\npyconfig.h.in to pyconfig.h and edit the latter to reflect the actual\r\nconfiguration of your system.  Most symbols must simply be defined as\r\n1 only if the corresponding feature is present and can be left alone\r\notherwise; however the *_t type symbols must be defined as some\r\nvariant of int if they need to be defined at all.\r\n\r\nFor all platforms, it's important that the build arrange to define the\r\npreprocessor symbol NDEBUG on the compiler command line in a release\r\nbuild of Python (else assert() calls remain in the code, hurting\r\nrelease-build performance).  The Unix, Windows and Mac builds already\r\ndo this.\r\n\r\n\r\nMiscellaneous issues\r\n====================\r\n\r\nEmacs mode\r\n----------\r\n\r\nThere's an excellent Emacs editing mode for Python code; see the file\r\nMisc/python-mode.el.  Originally written by the famous Tim Peters, it is now\r\nmaintained by the equally famous Barry Warsaw.  The latest version, along with\r\nvarious other contributed Python-related Emacs goodies, is online at\r\nhttp://launchpad.net/python-mode/.\r\n\r\n\r\nTkinter\r\n-------\r\n\r\nThe setup.py script automatically configures this when it detects a\r\nusable Tcl/Tk installation.  This requires Tcl/Tk version 8.0 or\r\nhigher.\r\n\r\nFor more Tkinter information, see the Tkinter Resource page:\r\nhttp://www.python.org/topics/tkinter/\r\n\r\nThere are demos in the Demo/tkinter directory.\r\n\r\nNote that there's a Python module called \"Tkinter\" (capital T) which\r\nlives in Lib/lib-tk/Tkinter.py, and a C module called \"_tkinter\"\r\n(lower case t and leading underscore) which lives in\r\nModules/_tkinter.c.  Demos and normal Tk applications import only the\r\nPython Tkinter module -- only the latter imports the C _tkinter\r\nmodule.  In order to find the C _tkinter module, it must be compiled\r\nand linked into the Python interpreter -- the setup.py script does\r\nthis.  In order to find the Python Tkinter module, sys.path must be\r\nset correctly -- normal installation takes care of this.\r\n\r\n\r\nDistribution structure\r\n----------------------\r\n\r\nMost subdirectories have their own README files.  Most files have\r\ncomments.\r\n\r\nDemo/           Demonstration scripts, modules and programs\r\nDoc/            Documentation sources (reStructuredText)\r\nGrammar/        Input for the parser generator\r\nInclude/        Public header files\r\nLICENSE         Licensing information\r\nLib/            Python library modules\r\nMac/            Macintosh specific resources\r\nMakefile.pre.in Source from which config.status creates the Makefile.pre\r\nMisc/           Miscellaneous useful files\r\nModules/        Implementation of most built-in modules\r\nObjects/        Implementation of most built-in object types\r\nPC/             Files specific to PC ports (DOS, Windows, OS/2)\r\nPCbuild/        Build directory for Microsoft Visual C++\r\nParser/         The parser and tokenizer and their input handling\r\nPython/         The byte-compiler and interpreter\r\nREADME          The file you're reading now\r\nRISCOS/         Files specific to RISC OS port\r\nTools/          Some useful programs written in Python\r\npyconfig.h.in   Source from which pyconfig.h is created (GNU autoheader output)\r\nconfigure       Configuration shell script (GNU autoconf output)\r\nconfigure.in    Configuration specification (input for GNU autoconf)\r\ninstall-sh      Shell script used to install files\r\nsetup.py        Python script used to build extension modules\r\n\r\nThe following files will (may) be created in the toplevel directory by\r\nthe configuration and build processes:\r\n\r\nMakefile        Build rules\r\nMakefile.pre    Build rules before running Modules/makesetup\r\nbuildno         Keeps track of the build number\r\nconfig.cache    Cache of configuration variables\r\npyconfig.h      Configuration header\r\nconfig.log      Log from last configure run\r\nconfig.status   Status from last run of the configure script\r\ngetbuildinfo.o  Object file from Modules/getbuildinfo.c\r\nlibpython<version>.a    The library archive\r\npython          The executable interpreter\r\nreflog.txt      Output from running the regression suite with the -R flag \r\ntags, TAGS      Tags files for vi and Emacs\r\n\r\n\r\nThat's all, folks!\r\n------------------\r\n\r\n\r\n--Guido van Rossum (home page: http://www.python.org/~guido/)\r\n", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://doctor-g.posterous.com/", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "ftp_bruteforce", "package_url": "https://pypi.org/project/ftp_bruteforce/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/ftp_bruteforce/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://doctor-g.posterous.com/"}, "release_url": "https://pypi.org/project/ftp_bruteforce/1.0.0/", "requires_dist": null, "requires_python": null, "summary": "A simple ftp bruteforce script", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            This is Python version 2.7.2\n<br>============================\n<br>\n<br>Copyright (c) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n<br>Python Software Foundation.  All rights reserved.\n<br>\n<br>Copyright (c) 2000 BeOpen.com.\n<br>All rights reserved.\n<br>\n<br>Copyright (c) 1995-2001 Corporation for National Research Initiatives.\n<br>All rights reserved.\n<br>\n<br>Copyright (c) 1991-1995 Stichting Mathematisch Centrum.\n<br>All rights reserved.\n<br>\n<br>\n<br>License information\n<br>-------------------\n<br>\n<br>See the file \"LICENSE\" for information on the history of this\n<br>software, terms &amp; conditions for usage, and a DISCLAIMER OF ALL\n<br>WARRANTIES.\n<br>\n<br>This Python distribution contains no GNU General Public Licensed\n<br>(GPLed) code so it may be used in proprietary projects just like prior\n<br>Python distributions.  There are interfaces to some GNU code but these\n<br>are entirely optional.\n<br>\n<br>All trademarks referenced herein are property of their respective\n<br>holders.\n<br>\n<br>\n<br>What's new in this release?\n<br>---------------------------\n<br>\n<br>See the file \"Misc/NEWS\".\n<br>\n<br>\n<br>If you don't read instructions\n<br>------------------------------\n<br>\n<br>Congratulations on getting this far. :-)\n<br>\n<br>To start building right away (on UNIX): type \"./configure\" in the\n<br>current directory and when it finishes, type \"make\".  This creates an\n<br>executable \"./python\"; to install in /usr/local, first do \"su root\"\n<br>and then \"make install\".\n<br>\n<br>The section `Build instructions' below is still recommended reading.\n<br>\n<br>\n<br>What is Python anyway?\n<br>----------------------\n<br>\n<br>Python is an interpreted, interactive object-oriented programming\n<br>language suitable (amongst other uses) for distributed application\n<br>development, scripting, numeric computing and system testing.  Python\n<br>is often compared to Tcl, Perl, Java, JavaScript, Visual Basic or\n<br>Scheme.  To find out more about what Python can do for you, point your\n<br>browser to http://www.python.org/.\n<br>\n<br>\n<br>How do I learn Python?\n<br>----------------------\n<br>\n<br>The official tutorial is still a good place to start; see\n<br>http://docs.python.org/ for online and downloadable versions, as well\n<br>as a list of other introductions, and reference documentation.\n<br>\n<br>There's a quickly growing set of books on Python.  See\n<br>http://wiki.python.org/moin/PythonBooks for a list.\n<br>\n<br>\n<br>Documentation\n<br>-------------\n<br>\n<br>All documentation is provided online in a variety of formats.  In\n<br>order of importance for new users: Tutorial, Library Reference,\n<br>Language Reference, Extending &amp; Embedding, and the Python/C API.  The\n<br>Library Reference is especially of immense value since much of\n<br>Python's power is described there, including the built-in data types\n<br>and functions!\n<br>\n<br>All documentation is also available online at the Python web site\n<br>(http://docs.python.org/, see below).  It is available online for occasional\n<br>reference, or can be downloaded in many formats for faster access.  The\n<br>documentation is downloadable in HTML, PostScript, PDF, LaTeX, and\n<br>reStructuredText (2.6+) formats; the LaTeX and reStructuredText versions are\n<br>primarily for documentation authors, translators, and people with special\n<br>formatting requirements.\n<br>\n<br>\n<br>Web sites\n<br>---------\n<br>\n<br>New Python releases and related technologies are published at\n<br>http://www.python.org/.  Come visit us!\n<br>\n<br>\n<br>Newsgroups and Mailing Lists\n<br>----------------------------\n<br>\n<br>Read comp.lang.python, a high-volume discussion newsgroup about\n<br>Python, or comp.lang.python.announce, a low-volume moderated newsgroup\n<br>for Python-related announcements.  These are also accessible as\n<br>mailing lists: see http://www.python.org/community/lists/ for an\n<br>overview of these and many other Python-related mailing lists.\n<br>\n<br>Archives are accessible via the Google Groups Usenet archive; see\n<br>http://groups.google.com/.  The mailing lists are also archived, see\n<br>http://www.python.org/community/lists/ for details.\n<br>\n<br>\n<br>Bug reports\n<br>-----------\n<br>\n<br>To report or search for bugs, please use the Python Bug\n<br>Tracker at http://bugs.python.org/.\n<br>\n<br>\n<br>Patches and contributions\n<br>-------------------------\n<br>\n<br>To submit a patch or other contribution, please use the Python Patch\n<br>Manager at http://bugs.python.org/.  Guidelines\n<br>for patch submission may be found at http://www.python.org/dev/patches/.\n<br>\n<br>If you have a proposal to change Python, you may want to send an email to the\n<br>comp.lang.python or python-ideas mailing lists for inital feedback. A Python\n<br>Enhancement Proposal (PEP) may be submitted if your idea gains ground. All\n<br>current PEPs, as well as guidelines for submitting a new PEP, are listed at\n<br>http://www.python.org/dev/peps/.\n<br>\n<br>\n<br>Questions\n<br>---------\n<br>\n<br>For help, if you can't find it in the manuals or on the web site, it's\n<br>best to post to the comp.lang.python or the Python mailing list (see\n<br>above).  If you specifically don't want to involve the newsgroup or\n<br>mailing list, send questions to help@python.org (a group of volunteers\n<br>who answer questions as they can).  The newsgroup is the most\n<br>efficient way to ask public questions.\n<br>\n<br>\n<br>Build instructions\n<br>==================\n<br>\n<br>Before you can build Python, you must first configure it.\n<br>Fortunately, the configuration and build process has been automated\n<br>for Unix and Linux installations, so all you usually have to do is\n<br>type a few commands and sit back.  There are some platforms where\n<br>things are not quite as smooth; see the platform specific notes below.\n<br>If you want to build for multiple platforms sharing the same source\n<br>tree, see the section on VPATH below.\n<br>\n<br>Start by running the script \"./configure\", which determines your\n<br>system configuration and creates the Makefile.  (It takes a minute or\n<br>two -- please be patient!)  You may want to pass options to the\n<br>configure script -- see the section below on configuration options and\n<br>variables.  When it's done, you are ready to run make.\n<br>\n<br>To build Python, you normally type \"make\" in the toplevel directory.\n<br>If you have changed the configuration, the Makefile may have to be\n<br>rebuilt.  In this case, you may have to run make again to correctly\n<br>build your desired target.  The interpreter executable is built in the\n<br>top level directory.\n<br>\n<br>Once you have built a Python interpreter, see the subsections below on\n<br>testing and installation.  If you run into trouble, see the next\n<br>section.\n<br>\n<br>Previous versions of Python used a manual configuration process that\n<br>involved editing the file Modules/Setup.  While this file still exists\n<br>and manual configuration is still supported, it is rarely needed any\n<br>more: almost all modules are automatically built as appropriate under\n<br>guidance of the setup.py script, which is run by Make after the\n<br>interpreter has been built.\n<br>\n<br>\n<br>Troubleshooting\n<br>---------------\n<br>\n<br>See also the platform specific notes in the next section.\n<br>\n<br>If you run into other trouble, see the FAQ\n<br>(http://www.python.org/doc/faq/) for hints on what can go wrong, and\n<br>how to fix it.\n<br>\n<br>If you rerun the configure script with different options, remove all\n<br>object files by running \"make clean\" before rebuilding.  Believe it or\n<br>not, \"make clean\" sometimes helps to clean up other inexplicable\n<br>problems as well.  Try it before sending in a bug report!\n<br>\n<br>If the configure script fails or doesn't seem to find things that\n<br>should be there, inspect the config.log file.\n<br>\n<br>If you get a warning for every file about the -Olimit option being no\n<br>longer supported, you can ignore it.  There's no foolproof way to know\n<br>whether this option is needed; all we can do is test whether it is\n<br>accepted without error.  On some systems, e.g. older SGI compilers, it\n<br>is essential for performance (specifically when compiling ceval.c,\n<br>which has more basic blocks than the default limit of 1000).  If the\n<br>warning bothers you, edit the Makefile to remove \"-Olimit 1500\" from\n<br>the OPT variable.\n<br>\n<br>If you get failures in test_long, or sys.maxint gets set to -1, you\n<br>are probably experiencing compiler bugs, usually related to\n<br>optimization.  This is a common problem with some versions of gcc, and\n<br>some vendor-supplied compilers, which can sometimes be worked around\n<br>by turning off optimization.  Consider switching to stable versions\n<br>(gcc 2.95.2, gcc 3.x, or contact your vendor.)\n<br>\n<br>From Python 2.0 onward, all Python C code is ANSI C.  Compiling using\n<br>old K&amp;R-C-only compilers is no longer possible.  ANSI C compilers are\n<br>available for all modern systems, either in the form of updated\n<br>compilers from the vendor, or one of the free compilers (gcc).\n<br>\n<br>If \"make install\" fails mysteriously during the \"compiling the library\"\n<br>step, make sure that you don't have any of the PYTHONPATH or PYTHONHOME\n<br>environment variables set, as they may interfere with the newly built\n<br>executable which is compiling the library.\n<br>\n<br>Unsupported systems\n<br>-------------------\n<br>\n<br>A number of systems are not supported in Python 2.7 anymore. Some\n<br>support code is still present, but will be removed in later versions.\n<br>If you still need to use current Python versions on these systems,\n<br>please send a message to python-dev@python.org indicating that you\n<br>volunteer to support this system. For a more detailed discussion \n<br>regarding no-longer-supported and resupporting platforms, as well\n<br>as a list of platforms that became or will be unsupported, see PEP 11.\n<br>\n<br>More specifically, the following systems are not supported any\n<br>longer:\n<br>- SunOS 4\n<br>- DYNIX\n<br>- dgux\n<br>- Minix\n<br>- NeXT\n<br>- Irix 4 and --with-sgi-dl\n<br>- Linux 1\n<br>- Systems defining __d6_pthread_create (configure.in)\n<br>- Systems defining PY_PTHREAD_D4, PY_PTHREAD_D6,\n<br>  or PY_PTHREAD_D7 in thread_pthread.h\n<br>- Systems using --with-dl-dld\n<br>- Systems using --without-universal-newlines\n<br>- MacOS 9\n<br>- Systems using --with-wctype-functions\n<br>- Win9x, WinME\n<br>\n<br>\n<br>Platform specific notes\n<br>-----------------------\n<br>\n<br>(Some of these may no longer apply.  If you find you can build Python\n<br>on these platforms without the special directions mentioned here,\n<br>submit a documentation bug report to SourceForge (see Bug Reports\n<br>above) so we can remove them!)\n<br>\n<br>Unix platforms: If your vendor still ships (and you still use) Berkeley DB\n<br>        1.85 you will need to edit Modules/Setup to build the bsddb185\n<br>        module and add a line to sitecustomize.py which makes it the\n<br>        default.  In Modules/Setup a line like\n<br>\n<br>            bsddb185 bsddbmodule.c\n<br>\n<br>        should work.  (You may need to add -I, -L or -l flags to direct the\n<br>        compiler and linker to your include files and libraries.)\n<br>\n<br>XXX I think this next bit is out of date:\n<br>\n<br>64-bit platforms: The modules audioop, and imageop don't work.\n<br>        The setup.py script disables them on 64-bit installations.\n<br>        Don't try to enable them in the Modules/Setup file.  They\n<br>        contain code that is quite wordsize sensitive.  (If you have a\n<br>        fix, let us know!)\n<br>\n<br>Solaris: When using Sun's C compiler with threads, at least on Solaris\n<br>        2.5.1, you need to add the \"-mt\" compiler option (the simplest\n<br>        way is probably to specify the compiler with this option as\n<br>        the \"CC\" environment variable when running the configure\n<br>        script).\n<br>\n<br>        When using GCC on Solaris, beware of binutils 2.13 or GCC\n<br>        versions built using it.  This mistakenly enables the\n<br>        -zcombreloc option which creates broken shared libraries on\n<br>        Solaris.  binutils 2.12 works, and the binutils maintainers\n<br>        are aware of the problem.  Binutils 2.13.1 only partially\n<br>        fixed things.  It appears that 2.13.2 solves the problem\n<br>        completely.  This problem is known to occur with Solaris 2.7\n<br>        and 2.8, but may also affect earlier and later versions of the\n<br>        OS.\n<br>\n<br>        When the dynamic loader complains about errors finding shared\n<br>        libraries, such as\n<br>\n<br>        ld.so.1: ./python: fatal: libstdc++.so.5: open failed:\n<br>        No such file or directory\n<br>\n<br>        you need to first make sure that the library is available on\n<br>        your system. Then, you need to instruct the dynamic loader how\n<br>        to find it. You can choose any of the following strategies:\n<br>\n<br>        1. When compiling Python, set LD_RUN_PATH to the directories\n<br>           containing missing libraries.\n<br>        2. When running Python, set LD_LIBRARY_PATH to these directories.\n<br>        3. Use crle(8) to extend the search path of the loader.\n<br>        4. Modify the installed GCC specs file, adding -R options into the\n<br>           *link: section.\n<br>\n<br>        The complex object fails to compile on Solaris 10 with gcc 3.4 (at\n<br>        least up to 3.4.3).  To work around it, define Py_HUGE_VAL as\n<br>        HUGE_VAL(), e.g.:\n<br>\n<br>          make CPPFLAGS='-D\"Py_HUGE_VAL=HUGE_VAL()\" -I. -I$(srcdir)/Include'\n<br>          ./python setup.py CPPFLAGS='-D\"Py_HUGE_VAL=HUGE_VAL()\"'\n<br>\n<br>Linux:  A problem with threads and fork() was tracked down to a bug in\n<br>        the pthreads code in glibc version 2.0.5; glibc version 2.0.7\n<br>        solves the problem.  This causes the popen2 test to fail;\n<br>        problem and solution reported by Pablo Bleyer.\n<br>\n<br>Red Hat Linux: Red Hat 9 built Python2.2 in UCS-4 mode and hacked\n<br>        Tcl to support it. To compile Python2.3 with Tkinter, you will\n<br>        need to pass --enable-unicode=ucs4 flag to ./configure.\n<br>\n<br>        There's an executable /usr/bin/python which is Python\n<br>        1.5.2 on most older Red Hat installations; several key Red Hat tools\n<br>        require this version.  Python 2.1.x may be installed as\n<br>        /usr/bin/python2.  The Makefile installs Python as\n<br>        /usr/local/bin/python, which may or may not take precedence\n<br>        over /usr/bin/python, depending on how you have set up $PATH.\n<br>\n<br>FreeBSD 3.x and probably platforms with NCurses that use libmytinfo or\n<br>        similar: When using cursesmodule, the linking is not done in\n<br>        the correct order with the defaults.  Remove \"-ltermcap\" from\n<br>        the readline entry in Setup, and use as curses entry: \"curses\n<br>        cursesmodule.c -lmytinfo -lncurses -ltermcap\" - \"mytinfo\" (so\n<br>        called on FreeBSD) should be the name of the auxiliary library\n<br>        required on your platform.  Normally, it would be linked\n<br>        automatically, but not necessarily in the correct order.\n<br>\n<br>BSDI:   BSDI versions before 4.1 have known problems with threads,\n<br>        which can cause strange errors in a number of modules (for\n<br>        instance, the 'test_signal' test script will hang forever.)\n<br>        Turning off threads (with --with-threads=no) or upgrading to\n<br>        BSDI 4.1 solves this problem.\n<br>\n<br>DEC Unix: Run configure with --with-dec-threads, or with\n<br>        --with-threads=no if no threads are desired (threads are on by\n<br>        default).  When using GCC, it is possible to get an internal\n<br>        compiler error if optimization is used.  This was reported for\n<br>        GCC 2.7.2.3 on selectmodule.c.  Manually compile the affected\n<br>        file without optimization to solve the problem.\n<br>\n<br>DEC Ultrix: compile with GCC to avoid bugs in the native compiler,\n<br>        and pass SHELL=/bin/sh5 to Make when installing.\n<br>\n<br>AIX:    A complete overhaul of the shared library support is now in\n<br>        place.  See Misc/AIX-NOTES for some notes on how it's done.\n<br>        (The optimizer bug reported at this place in previous releases\n<br>        has been worked around by a minimal code change.) If you get\n<br>        errors about pthread_* functions, during compile or during\n<br>        testing, try setting CC to a thread-safe (reentrant) compiler,\n<br>        like \"cc_r\".  For full C++ module support, set CC=\"xlC_r\" (or\n<br>        CC=\"xlC\" without thread support).\n<br>\n<br>AIX 5.3: To build a 64-bit version with IBM's compiler, I used the\n<br>        following:\n<br>\n<br>        export PATH=/usr/bin:/usr/vacpp/bin\n<br>        ./configure --with-gcc=\"xlc_r -q64\" --with-cxx=\"xlC_r -q64\" \\\n<br>                    --disable-ipv6 AR=\"ar -X64\"\n<br>        make\n<br>\n<br>HP-UX:  When using threading, you may have to add -D_REENTRANT to the\n<br>        OPT variable in the top-level Makefile; reported by Pat Knight,\n<br>        this seems to make a difference (at least for HP-UX 10.20)\n<br>        even though pyconfig.h defines it. This seems unnecessary when\n<br>        using HP/UX 11 and later - threading seems to work \"out of the\n<br>        box\".\n<br>\n<br>HP-UX ia64: When building on the ia64 (Itanium) platform using HP's\n<br>        compiler, some experience has shown that the compiler's\n<br>        optimiser produces a completely broken version of python\n<br>        (see http://bugs.python.org/814976). To work around this,\n<br>        edit the Makefile and remove -O from the OPT line.\n<br>\n<br>        To build a 64-bit executable on an Itanium 2 system using HP's\n<br>        compiler, use these environment variables:\n<br>\n<br>                CC=cc\n<br>                CXX=aCC\n<br>                BASECFLAGS=\"+DD64\"\n<br>                LDFLAGS=\"+DD64 -lxnet\"\n<br>\n<br>        and call configure as:\n<br>\n<br>                ./configure --without-gcc\n<br>\n<br>        then *unset* the environment variables again before running\n<br>        make.  (At least one of these flags causes the build to fail\n<br>        if it remains set.)  You still have to edit the Makefile and\n<br>        remove -O from the OPT line.\n<br>\n<br>HP PA-RISC 2.0: A recent bug report (http://bugs.python.org/546117)\n<br>        suggests that the C compiler in this 64-bit system has bugs\n<br>        in the optimizer that break Python.  Compiling without\n<br>        optimization solves the problems.\n<br>\n<br>SCO:    The following apply to SCO 3 only; Python builds out of the box\n<br>        on SCO 5 (or so we've heard).\n<br>\n<br>        1) Everything works much better if you add -U__STDC__ to the\n<br>        defs.  This is because all the SCO header files are broken.\n<br>        Anything that isn't mentioned in the C standard is\n<br>        conditionally excluded when __STDC__ is defined.\n<br>\n<br>        2) Due to the U.S. export restrictions, SCO broke the crypt\n<br>        stuff out into a separate library, libcrypt_i.a so the LIBS\n<br>        needed be set to:\n<br>\n<br>                LIBS=' -lsocket -lcrypt_i'\n<br>\n<br>UnixWare: There are known bugs in the math library of the system, as well as\n<br>        problems in the handling of threads (calling fork in one\n<br>        thread may interrupt system calls in others). Therefore, test_math and\n<br>        tests involving threads will fail until those problems are fixed.\n<br>\n<br>QNX:    Chris Herborth (chrish@qnx.com) writes:\n<br>        configure works best if you use GNU bash; a port is available on\n<br>        ftp.qnx.com in /usr/free.  I used the following process to build,\n<br>        test and install Python 1.5.x under QNX:\n<br>\n<br>        1) CONFIG_SHELL=/usr/local/bin/bash CC=cc RANLIB=: \\\n<br>            ./configure --verbose --without-gcc --with-libm=\"\"\n<br>\n<br>        2) edit Modules/Setup to activate everything that makes sense for\n<br>           your system... tested here at QNX with the following modules:\n<br>\n<br>                array, audioop, binascii, cPickle, cStringIO, cmath,\n<br>                crypt, curses, errno, fcntl, gdbm, grp, imageop,\n<br>                _locale, math, md5, new, operator, parser, pcre,\n<br>                posix, pwd, readline, regex, reop,\n<br>                select, signal, socket, soundex, strop, struct,\n<br>                syslog, termios, time, timing, zlib, audioop, imageop\n<br>\n<br>        3) make SHELL=/usr/local/bin/bash\n<br>\n<br>           or, if you feel the need for speed:\n<br>\n<br>           make SHELL=/usr/local/bin/bash OPT=\"-5 -Oil+nrt\"\n<br>\n<br>        4) make SHELL=/usr/local/bin/bash test\n<br>\n<br>           Using GNU readline 2.2 seems to behave strangely, but I\n<br>           think that's a problem with my readline 2.2 port.  :-\\\n<br>\n<br>        5) make SHELL=/usr/local/bin/bash install\n<br>\n<br>        If you get SIGSEGVs while running Python (I haven't yet, but\n<br>        I've only run small programs and the test cases), you're\n<br>        probably running out of stack; the default 32k could be a\n<br>        little tight.  To increase the stack size, edit the Makefile\n<br>        to read: LDFLAGS = -N 48k\n<br>\n<br>BeOS:   See Misc/BeOS-NOTES for notes about compiling/installing\n<br>        Python on BeOS R3 or later.  Note that only the PowerPC\n<br>        platform is supported for R3; both PowerPC and x86 are\n<br>        supported for R4.\n<br>\n<br>Cray T3E: Mark Hadfield (m.hadfield@niwa.co.nz) writes:\n<br>        Python can be built satisfactorily on a Cray T3E but based on\n<br>        my experience with the NIWA T3E (2002-05-22, version 2.2.1)\n<br>        there are a few bugs and gotchas. For more information see a\n<br>        thread on comp.lang.python in May 2002 entitled \"Building\n<br>        Python on Cray T3E\".\n<br>\n<br>        1) Use Cray's cc and not gcc. The latter was reported not to\n<br>           work by Konrad Hinsen. It may work now, but it may not.\n<br>\n<br>        2) To set sys.platform to something sensible, pass the\n<br>           following environment variable to the configure script:\n<br>\n<br>             MACHDEP=unicosmk\n<br>\n<br>        2) Run configure with option \"--enable-unicode=ucs4\".\n<br>\n<br>        3) The Cray T3E does not support dynamic linking, so extension\n<br>           modules have to be built by adding (or uncommenting) lines\n<br>           in Modules/Setup. The minimum set of modules is\n<br>\n<br>             posix, new, _sre, unicodedata\n<br>\n<br>           On NIWA's vanilla T3E system the following have also been\n<br>           included successfully:\n<br>\n<br>             _codecs, _locale, _socket, _symtable, _testcapi, _weakref\n<br>             array, binascii, cmath, cPickle, crypt, cStringIO, dbm\n<br>             errno, fcntl, grp, math, md5, operator, parser, pcre, pwd\n<br>             regex, rotor, select, struct, strop, syslog, termios\n<br>             time, timing, xreadlines\n<br>\n<br>        4) Once the python executable and library have been built, make\n<br>           will execute setup.py, which will attempt to build remaining\n<br>           extensions and link them dynamically. Each of these attempts\n<br>           will fail but should not halt the make process. This is\n<br>           normal.\n<br>\n<br>        5) Running \"make test\" uses a lot of resources and causes\n<br>           problems on our system. You might want to try running tests\n<br>           singly or in small groups.\n<br>\n<br>SGI:    SGI's standard \"make\" utility (/bin/make or /usr/bin/make)\n<br>        does not check whether a command actually changed the file it\n<br>        is supposed to build.  This means that whenever you say \"make\"\n<br>        it will redo the link step.  The remedy is to use SGI's much\n<br>        smarter \"smake\" utility (/usr/sbin/smake), or GNU make.  If\n<br>        you set the first line of the Makefile to #!/usr/sbin/smake\n<br>        smake will be invoked by make (likewise for GNU make).\n<br>\n<br>        WARNING: There are bugs in the optimizer of some versions of\n<br>        SGI's compilers that can cause bus errors or other strange\n<br>        behavior, especially on numerical operations.  To avoid this,\n<br>        try building with \"make OPT=\".\n<br>\n<br>OS/2:   If you are running Warp3 or Warp4 and have IBM's VisualAge C/C++\n<br>        compiler installed, just change into the pc\\os2vacpp directory\n<br>        and type NMAKE.  Threading and sockets are supported by default\n<br>        in the resulting binaries of PYTHON15.DLL and PYTHON.EXE.\n<br>\n<br>Reliant UNIX: The thread support does not compile on Reliant UNIX, and\n<br>        there is a (minor) problem in the configure script for that\n<br>        platform as well.  This should be resolved in time for a\n<br>        future release.\n<br>\n<br>MacOSX: The tests will crash on both 10.1 and 10.2 with SEGV in\n<br>        test_re and test_sre due to the small default stack size.  If\n<br>        you set the stack size to 2048 before doing a \"make test\" the\n<br>        failure can be avoided.  If you're using the tcsh or csh shells,\n<br>        use \"limit stacksize 2048\" and for the bash shell (the default\n<br>        as of OSX 10.3), use \"ulimit -s 2048\".\n<br>\n<br>        On naked Darwin you may want to add the configure option\n<br>        \"--disable-toolbox-glue\" to disable the glue code for the Carbon\n<br>        interface modules. The modules themselves are currently only built\n<br>        if you add the --enable-framework option, see below.\n<br>\n<br>        On a clean OSX /usr/local does not exist. Do a\n<br>        \"sudo mkdir -m 775 /usr/local\"\n<br>        before you do a make install. It is probably not a good idea to\n<br>        do \"sudo make install\" which installs everything as superuser,\n<br>        as this may later cause problems when installing distutils-based\n<br>        additions.\n<br>\n<br>        Some people have reported problems building Python after using \"fink\"\n<br>        to install additional unix software. Disabling fink (remove all \n<br>        references to /sw from your .profile or .login) should solve this.\n<br>\n<br>        You may want to try the configure option \"--enable-framework\"\n<br>        which installs Python as a framework. The location can be set\n<br>        as argument to the --enable-framework option (default\n<br>        /Library/Frameworks). A framework install is probably needed if you\n<br>        want to use any Aqua-based GUI toolkit (whether Tkinter, wxPython,\n<br>        Carbon, Cocoa or anything else).\n<br>\n<br>        You may also want to try the configure option \"--enable-universalsdk\"\n<br>        which builds Python as a universal binary with support for the \n<br>        i386 and PPC architetures. This requires Xcode 2.1 or later to build.\n<br>\n<br>        See Mac/README for more information on framework and \n<br>        universal builds.\n<br>\n<br>Cygwin: With recent (relative to the time of writing, 2001-12-19)\n<br>        Cygwin installations, there are problems with the interaction\n<br>        of dynamic linking and fork().  This manifests itself in build\n<br>        failures during the execution of setup.py.\n<br>\n<br>        There are two workarounds that both enable Python (albeit\n<br>        without threading support) to build and pass all tests on\n<br>        NT/2000 (and most likely XP as well, though reports of testing\n<br>        on XP would be appreciated).\n<br>\n<br>        The workarounds:\n<br>\n<br>        (a) the band-aid fix is to link the _socket module statically\n<br>        rather than dynamically (which is the default).\n<br>\n<br>        To do this, run \"./configure --with-threads=no\" including any\n<br>        other options you need (--prefix, etc.).  Then in Modules/Setup\n<br>        uncomment the lines:\n<br>\n<br>        #SSL=/usr/local/ssl\n<br>        #_socket socketmodule.c \\\n<br>        #       -DUSE_SSL -I$(SSL)/include -I$(SSL)/include/openssl \\\n<br>        #       -L$(SSL)/lib -lssl -lcrypto\n<br>\n<br>        and remove \"local/\" from the SSL variable.  Finally, just run\n<br>        \"make\"!\n<br>\n<br>        (b) The \"proper\" fix is to rebase the Cygwin DLLs to prevent\n<br>        base address conflicts.  Details on how to do this can be\n<br>        found in the following mail:\n<br>\n<br>           http://sources.redhat.com/ml/cygwin/2001-12/msg00894.html\n<br>\n<br>        It is hoped that a version of this solution will be\n<br>        incorporated into the Cygwin distribution fairly soon.\n<br>\n<br>        Two additional problems:\n<br>\n<br>        (1) Threading support should still be disabled due to a known\n<br>        bug in Cygwin pthreads that causes test_threadedtempfile to\n<br>        hang.\n<br>\n<br>        (2) The _curses module does not build.  This is a known\n<br>        Cygwin ncurses problem that should be resolved the next time\n<br>        that this package is released.\n<br>\n<br>        On older versions of Cygwin, test_poll may hang and test_strftime\n<br>        may fail.\n<br>\n<br>        The situation on 9X/Me is not accurately known at present.\n<br>        Some time ago, there were reports that the following\n<br>        regression tests failed:\n<br>\n<br>            test_pwd\n<br>            test_select (hang)\n<br>            test_socket\n<br>\n<br>        Due to the test_select hang on 9X/Me, one should run the\n<br>        regression test using the following:\n<br>\n<br>            make TESTOPTS='-l -x test_select' test\n<br>\n<br>        News regarding these platforms with more recent Cygwin\n<br>        versions would be appreciated!\n<br>\n<br>Windows: When executing Python scripts on the command line using file type\n<br>        associations (i.e. starting \"script.py\" instead of \"python script.py\"),\n<br>        redirects may not work unless you set a specific registry key.  See\n<br>        the Knowledge Base article &lt;http://support.microsoft.com/kb/321788&gt;.\n<br>\n<br>\n<br>Configuring the bsddb and dbm modules\n<br>-------------------------------------\n<br>\n<br>Beginning with Python version 2.3, the PyBsddb package\n<br>&lt;http://pybsddb.sf.net/&gt; was adopted into Python as the bsddb package,\n<br>exposing a set of package-level functions which provide\n<br>backwards-compatible behavior.  Only versions 3.3 through 4.4 of\n<br>Sleepycat's libraries provide the necessary API, so older versions\n<br>aren't supported through this interface.  The old bsddb module has\n<br>been retained as bsddb185, though it is not built by default.  Users\n<br>wishing to use it will have to tweak Modules/Setup to build it.  The\n<br>dbm module will still be built against the Sleepycat libraries if\n<br>other preferred alternatives (ndbm, gdbm) are not found.\n<br>\n<br>Building the sqlite3 module\n<br>---------------------------\n<br>\n<br>To build the sqlite3 module, you'll need the sqlite3 or libsqlite3\n<br>packages installed, including the header files. Many modern operating\n<br>systems distribute the headers in a separate package to the library -\n<br>often it will be the same name as the main package, but with a -dev or\n<br>-devel suffix. \n<br>\n<br>The version of pysqlite2 that's including in Python needs sqlite3 3.0.8\n<br>or later. setup.py attempts to check that it can find a correct version.\n<br>\n<br>Configuring threads\n<br>-------------------\n<br>\n<br>As of Python 2.0, threads are enabled by default.  If you wish to\n<br>compile without threads, or if your thread support is broken, pass the\n<br>--with-threads=no switch to configure.  Unfortunately, on some\n<br>platforms, additional compiler and/or linker options are required for\n<br>threads to work properly.  Below is a table of those options,\n<br>collected by Bill Janssen.  We would love to automate this process\n<br>more, but the information below is not enough to write a patch for the\n<br>configure.in file, so manual intervention is required.  If you patch\n<br>the configure.in file and are confident that the patch works, please\n<br>send in the patch.  (Don't bother patching the configure script itself\n<br>-- it is regenerated each time the configure.in file changes.)\n<br>\n<br>Compiler switches for threads\n<br>.............................\n<br>\n<br>The definition of _REENTRANT should be configured automatically, if\n<br>that does not work on your system, or if _REENTRANT is defined\n<br>incorrectly, please report that as a bug.\n<br>\n<br>    OS/Compiler/threads                     Switches for use with threads\n<br>    (POSIX is draft 10, DCE is draft 4)     compile &amp; link\n<br>\n<br>    SunOS 5.{1-5}/{gcc,SunPro cc}/solaris   -mt\n<br>    SunOS 5.5/{gcc,SunPro cc}/POSIX         (nothing)\n<br>    DEC OSF/1 3.x/cc/DCE                    -threads\n<br>            (butenhof@zko.dec.com)\n<br>    Digital UNIX 4.x/cc/DCE                 -threads\n<br>            (butenhof@zko.dec.com)\n<br>    Digital UNIX 4.x/cc/POSIX               -pthread\n<br>            (butenhof@zko.dec.com)\n<br>    AIX 4.1.4/cc_r/d7                       (nothing)\n<br>            (buhrt@iquest.net)\n<br>    AIX 4.1.4/cc_r4/DCE                     (nothing)\n<br>            (buhrt@iquest.net)\n<br>    IRIX 6.2/cc/POSIX                       (nothing)\n<br>            (robertl@cwi.nl)\n<br>\n<br>\n<br>Linker (ld) libraries and flags for threads\n<br>...........................................\n<br>\n<br>    OS/threads                          Libraries/switches for use with threads\n<br>\n<br>    SunOS 5.{1-5}/solaris               -lthread\n<br>    SunOS 5.5/POSIX                     -lpthread\n<br>    DEC OSF/1 3.x/DCE                   -lpthreads -lmach -lc_r -lc\n<br>            (butenhof@zko.dec.com)\n<br>    Digital UNIX 4.x/DCE                -lpthreads -lpthread -lmach -lexc -lc\n<br>            (butenhof@zko.dec.com)\n<br>    Digital UNIX 4.x/POSIX              -lpthread -lmach -lexc -lc\n<br>            (butenhof@zko.dec.com)\n<br>    AIX 4.1.4/{draft7,DCE}              (nothing)\n<br>            (buhrt@iquest.net)\n<br>    IRIX 6.2/POSIX                      -lpthread\n<br>            (jph@emilia.engr.sgi.com)\n<br>\n<br>\n<br>Building a shared libpython\n<br>---------------------------\n<br>\n<br>Starting with Python 2.3, the majority of the interpreter can be built\n<br>into a shared library, which can then be used by the interpreter\n<br>executable, and by applications embedding Python. To enable this feature,\n<br>configure with --enable-shared.\n<br>\n<br>If you enable this feature, the same object files will be used to create\n<br>a static library.  In particular, the static library will contain object\n<br>files using position-independent code (PIC) on platforms where PIC flags\n<br>are needed for the shared library.\n<br>\n<br>\n<br>Configuring additional built-in modules\n<br>---------------------------------------\n<br>\n<br>Starting with Python 2.1, the setup.py script at the top of the source\n<br>distribution attempts to detect which modules can be built and\n<br>automatically compiles them.  Autodetection doesn't always work, so\n<br>you can still customize the configuration by editing the Modules/Setup\n<br>file; but this should be considered a last resort.  The rest of this\n<br>section only applies if you decide to edit the Modules/Setup file.\n<br>You also need this to enable static linking of certain modules (which\n<br>is needed to enable profiling on some systems).\n<br>\n<br>This file is initially copied from Setup.dist by the configure script;\n<br>if it does not exist yet, create it by copying Modules/Setup.dist\n<br>yourself (configure will never overwrite it).  Never edit Setup.dist\n<br>-- always edit Setup or Setup.local (see below).  Read the comments in\n<br>the file for information on what kind of edits are allowed.  When you\n<br>have edited Setup in the Modules directory, the interpreter will\n<br>automatically be rebuilt the next time you run make (in the toplevel\n<br>directory).\n<br>\n<br>Many useful modules can be built on any Unix system, but some optional\n<br>modules can't be reliably autodetected.  Often the quickest way to\n<br>determine whether a particular module works or not is to see if it\n<br>will build: enable it in Setup, then if you get compilation or link\n<br>errors, disable it -- you're either missing support or need to adjust\n<br>the compilation and linking parameters for that module.\n<br>\n<br>On SGI IRIX, there are modules that interface to many SGI specific\n<br>system libraries, e.g. the GL library and the audio hardware.  These\n<br>modules will not be built by the setup.py script.\n<br>\n<br>In addition to the file Setup, you can also edit the file Setup.local.\n<br>(the makesetup script processes both).  You may find it more\n<br>convenient to edit Setup.local and leave Setup alone.  Then, when\n<br>installing a new Python version, you can copy your old Setup.local\n<br>file.\n<br>\n<br>\n<br>Setting the optimization/debugging options\n<br>------------------------------------------\n<br>\n<br>If you want or need to change the optimization/debugging options for\n<br>the C compiler, assign to the OPT variable on the toplevel make\n<br>command; e.g. \"make OPT=-g\" will build a debugging version of Python\n<br>on most platforms.  The default is OPT=-O; a value for OPT in the\n<br>environment when the configure script is run overrides this default\n<br>(likewise for CC; and the initial value for LIBS is used as the base\n<br>set of libraries to link with).\n<br>\n<br>When compiling with GCC, the default value of OPT will also include\n<br>the -Wall and -Wstrict-prototypes options.\n<br>\n<br>Additional debugging code to help debug memory management problems can\n<br>be enabled by using the --with-pydebug option to the configure script.\n<br>\n<br>For flags that change binary compatibility, use the EXTRA_CFLAGS\n<br>variable.\n<br>\n<br>\n<br>Profiling\n<br>---------\n<br>\n<br>If you want C profiling turned on, the easiest way is to run configure\n<br>with the CC environment variable to the necessary compiler\n<br>invocation.  For example, on Linux, this works for profiling using\n<br>gprof(1):\n<br>\n<br>    CC=\"gcc -pg\" ./configure\n<br>\n<br>Note that on Linux, gprof apparently does not work for shared\n<br>libraries.  The Makefile/Setup mechanism can be used to compile and\n<br>link most extension modules statically.\n<br>\n<br>\n<br>Coverage checking\n<br>-----------------\n<br>\n<br>For C coverage checking using gcov, run \"make coverage\".  This will\n<br>build a Python binary with profiling activated, and a \".gcno\" and\n<br>\".gcda\" file for every source file compiled with that option.  With\n<br>the built binary, now run the code whose coverage you want to check.\n<br>Then, you can see coverage statistics for each individual source file\n<br>by running gcov, e.g.\n<br>\n<br>    gcov -o Modules zlibmodule\n<br>\n<br>This will create a \"zlibmodule.c.gcov\" file in the current directory\n<br>containing coverage info for that source file.\n<br>\n<br>This works only for source files statically compiled into the\n<br>executable; use the Makefile/Setup mechanism to compile and link\n<br>extension modules you want to coverage-check statically.\n<br>\n<br>\n<br>Testing\n<br>-------\n<br>\n<br>To test the interpreter, type \"make test\" in the top-level directory.\n<br>This runs the test set twice (once with no compiled files, once with\n<br>the compiled files left by the previous test run).  The test set\n<br>produces some output.  You can generally ignore the messages about\n<br>skipped tests due to optional features which can't be imported.\n<br>If a message is printed about a failed test or a traceback or core\n<br>dump is produced, something is wrong.  On some Linux systems (those\n<br>that are not yet using glibc 6), test_strftime fails due to a\n<br>non-standard implementation of strftime() in the C library. Please\n<br>ignore this, or upgrade to glibc version 6.\n<br>\n<br>By default, tests are prevented from overusing resources like disk space and\n<br>memory.  To enable these tests, run \"make testall\".\n<br>\n<br>IMPORTANT: If the tests fail and you decide to mail a bug report,\n<br>*don't* include the output of \"make test\".  It is useless.  Run the\n<br>failing test manually, as follows:\n<br>\n<br>        ./python Lib/test/regrtest.py -v test_whatever\n<br>\n<br>(substituting the top of the source tree for '.' if you built in a\n<br>different directory).  This runs the test in verbose mode.\n<br>\n<br>\n<br>Installing\n<br>----------\n<br>\n<br>To install the Python binary, library modules, shared library modules\n<br>(see below), include files, configuration files, and the manual page,\n<br>just type\n<br>\n<br>        make install\n<br>\n<br>This will install all platform-independent files in subdirectories of\n<br>the directory given with the --prefix option to configure or to the\n<br>`prefix' Make variable (default /usr/local).  All binary and other\n<br>platform-specific files will be installed in subdirectories if the\n<br>directory given by --exec-prefix or the `exec_prefix' Make variable\n<br>(defaults to the --prefix directory) is given.\n<br>\n<br>If DESTDIR is set, it will be taken as the root directory of the\n<br>installation, and files will be installed into $(DESTDIR)$(prefix),\n<br>$(DESTDIR)$(exec_prefix), etc.\n<br>\n<br>All subdirectories created will have Python's version number in their\n<br>name, e.g. the library modules are installed in\n<br>\"/usr/local/lib/python&lt;version&gt;/\" by default, where &lt;version&gt; is the\n<br>&lt;major&gt;.&lt;minor&gt; release number (e.g. \"2.1\").  The Python binary is\n<br>installed as \"python&lt;version&gt;\" and a hard link named \"python\" is\n<br>created.  The only file not installed with a version number in its\n<br>name is the manual page, installed as \"/usr/local/man/man1/python.1\"\n<br>by default.\n<br>\n<br>If you want to install multiple versions of Python see the section below\n<br>entitled \"Installing multiple versions\".\n<br>\n<br>The only thing you may have to install manually is the Python mode for\n<br>Emacs found in Misc/python-mode.el.  (But then again, more recent\n<br>versions of Emacs may already have it.)  Follow the instructions that\n<br>came with Emacs for installation of site-specific files.\n<br>\n<br>On Mac OS X, if you have configured Python with --enable-framework, you\n<br>should use \"make frameworkinstall\" to do the installation. Note that this\n<br>installs the Python executable in a place that is not normally on your\n<br>PATH, you may want to set up a symlink in /usr/local/bin.\n<br>\n<br>\n<br>Installing multiple versions\n<br>----------------------------\n<br>\n<br>On Unix and Mac systems if you intend to install multiple versions of Python\n<br>using the same installation prefix (--prefix argument to the configure\n<br>script) you must take care that your primary python executable is not\n<br>overwritten by the installation of a different version.  All files and\n<br>directories installed using \"make altinstall\" contain the major and minor\n<br>version and can thus live side-by-side.  \"make install\" also creates\n<br>${prefix}/bin/python which refers to ${prefix}/bin/pythonX.Y.  If you intend\n<br>to install multiple versions using the same prefix you must decide which\n<br>version (if any) is your \"primary\" version.  Install that version using\n<br>\"make install\".  Install all other versions using \"make altinstall\".\n<br>\n<br>For example, if you want to install Python 2.5, 2.6 and 3.0 with 2.6 being\n<br>the primary version, you would execute \"make install\" in your 2.6 build\n<br>directory and \"make altinstall\" in the others.\n<br>\n<br>\n<br>Configuration options and variables\n<br>-----------------------------------\n<br>\n<br>Some special cases are handled by passing options to the configure\n<br>script.\n<br>\n<br>WARNING: if you rerun the configure script with different options, you\n<br>must run \"make clean\" before rebuilding.  Exceptions to this rule:\n<br>after changing --prefix or --exec-prefix, all you need to do is remove\n<br>Modules/getpath.o.\n<br>\n<br>--with(out)-gcc: The configure script uses gcc (the GNU C compiler) if\n<br>        it finds it.  If you don't want this, or if this compiler is\n<br>        installed but broken on your platform, pass the option\n<br>        --without-gcc.  You can also pass \"CC=cc\" (or whatever the\n<br>        name of the proper C compiler is) in the environment, but the\n<br>        advantage of using --without-gcc is that this option is\n<br>        remembered by the config.status script for its --recheck\n<br>        option.\n<br>\n<br>--prefix, --exec-prefix: If you want to install the binaries and the\n<br>        Python library somewhere else than in /usr/local/{bin,lib},\n<br>        you can pass the option --prefix=DIRECTORY; the interpreter\n<br>        binary will be installed as DIRECTORY/bin/python and the\n<br>        library files as DIRECTORY/lib/python/*.  If you pass\n<br>        --exec-prefix=DIRECTORY (as well) this overrides the\n<br>        installation prefix for architecture-dependent files (like the\n<br>        interpreter binary).  Note that --prefix=DIRECTORY also\n<br>        affects the default module search path (sys.path), when\n<br>        Modules/config.c is compiled.  Passing make the option\n<br>        prefix=DIRECTORY (and/or exec_prefix=DIRECTORY) overrides the\n<br>        prefix set at configuration time; this may be more convenient\n<br>        than re-running the configure script if you change your mind\n<br>        about the install prefix.\n<br>\n<br>--with-readline: This option is no longer supported.  GNU\n<br>        readline is automatically enabled by setup.py when present.\n<br>\n<br>--with-threads: On most Unix systems, you can now use multiple\n<br>        threads, and support for this is enabled by default.  To\n<br>        disable this, pass --with-threads=no.  If the library required\n<br>        for threads lives in a peculiar place, you can use\n<br>        --with-thread=DIRECTORY.  IMPORTANT: run \"make clean\" after\n<br>        changing (either enabling or disabling) this option, or you\n<br>        will get link errors!  Note: for DEC Unix use\n<br>        --with-dec-threads instead.\n<br>\n<br>--with-sgi-dl: On SGI IRIX 4, dynamic loading of extension modules is\n<br>        supported by the \"dl\" library by Jack Jansen, which is\n<br>        ftp'able from ftp://ftp.cwi.nl/pub/dynload/dl-1.6.tar.Z.\n<br>        This is enabled (after you've ftp'ed and compiled the dl\n<br>        library) by passing --with-sgi-dl=DIRECTORY where DIRECTORY\n<br>        is the absolute pathname of the dl library.  (Don't bother on\n<br>        IRIX 5, it already has dynamic linking using SunOS style\n<br>        shared libraries.)  THIS OPTION IS UNSUPPORTED.\n<br>\n<br>--with-dl-dld: Dynamic loading of modules is rumored to be supported\n<br>        on some other systems: VAX (Ultrix), Sun3 (SunOS 3.4), Sequent\n<br>        Symmetry (Dynix), and Atari ST.  This is done using a\n<br>        combination of the GNU dynamic loading package\n<br>        (ftp://ftp.cwi.nl/pub/dynload/dl-dld-1.1.tar.Z) and an\n<br>        emulation of the SGI dl library mentioned above (the emulation\n<br>        can be found at\n<br>        ftp://ftp.cwi.nl/pub/dynload/dld-3.2.3.tar.Z).  To\n<br>        enable this, ftp and compile both libraries, then call\n<br>        configure, passing it the option\n<br>        --with-dl-dld=DL_DIRECTORY,DLD_DIRECTORY where DL_DIRECTORY is\n<br>        the absolute pathname of the dl emulation library and\n<br>        DLD_DIRECTORY is the absolute pathname of the GNU dld library.\n<br>        (Don't bother on SunOS 4 or 5, they already have dynamic\n<br>        linking using shared libraries.)  THIS OPTION IS UNSUPPORTED.\n<br>\n<br>--with-libm, --with-libc: It is possible to specify alternative\n<br>        versions for the Math library (default -lm) and the C library\n<br>        (default the empty string) using the options\n<br>        --with-libm=STRING and --with-libc=STRING, respectively.  For\n<br>        example, if your system requires that you pass -lc_s to the C\n<br>        compiler to use the shared C library, you can pass\n<br>        --with-libc=-lc_s. These libraries are passed after all other\n<br>        libraries, the C library last.\n<br>\n<br>--with-libs='libs': Add 'libs' to the LIBS that the python interpreter\n<br>        is linked against.\n<br>\n<br>--with-cxx-main=&lt;compiler&gt;: If you plan to use C++ extension modules,\n<br>        then -- on some platforms -- you need to compile python's main()\n<br>        function with the C++ compiler. With this option, make will use\n<br>        &lt;compiler&gt; to compile main() *and* to link the python executable.\n<br>        It is likely that the resulting executable depends on the C++\n<br>        runtime library of &lt;compiler&gt;. (The default is --without-cxx-main.)\n<br>\n<br>        There are platforms that do not require you to build Python\n<br>        with a C++ compiler in order to use C++ extension modules.\n<br>        E.g., x86 Linux with ELF shared binaries and GCC 3.x, 4.x is such\n<br>        a platform. We recommend that you configure Python\n<br>        --without-cxx-main on those platforms because a mismatch\n<br>        between the C++ compiler version used to build Python and to\n<br>        build a C++ extension module is likely to cause a crash at\n<br>        runtime.\n<br>\n<br>        The Python installation also stores the variable CXX that\n<br>        determines, e.g., the C++ compiler distutils calls by default\n<br>        to build C++ extensions. If you set CXX on the configure command\n<br>        line to any string of non-zero length, then configure won't\n<br>        change CXX. If you do not preset CXX but pass\n<br>        --with-cxx-main=&lt;compiler&gt;, then configure sets CXX=&lt;compiler&gt;.\n<br>        In all other cases, configure looks for a C++ compiler by\n<br>        some common names (c++, g++, gcc, CC, cxx, cc++, cl) and sets\n<br>        CXX to the first compiler it finds. If it does not find any\n<br>        C++ compiler, then it sets CXX=\"\".\n<br>\n<br>        Similarly, if you want to change the command used to link the\n<br>        python executable, then set LINKCC on the configure command line.\n<br>\n<br>\n<br>--with-pydebug:  Enable additional debugging code to help track down\n<br>        memory management problems.  This allows printing a list of all\n<br>        live objects when the interpreter terminates.\n<br>\n<br>--with(out)-universal-newlines: enable reading of text files with\n<br>        foreign newline convention (default: enabled). In other words,\n<br>        any of \\r, \\n or \\r\\n is acceptable as end-of-line character.\n<br>        If enabled import and execfile will automatically accept any newline\n<br>        in files. Python code can open a file with open(file, 'U') to\n<br>        read it in universal newline mode. THIS OPTION IS UNSUPPORTED.\n<br>\n<br>--with-tsc: Profile using the Pentium timestamping counter (TSC).\n<br>\n<br>--with-system-ffi:  Build the _ctypes extension module using an ffi\n<br>        library installed on the system.\n<br>\n<br>--with-dbmliborder=db1:db2:...:  Specify the order that backends for the\n<br>\tdbm extension are checked. Valid value is a colon separated string\n<br>\twith the backend names `ndbm', `gdbm' and `bdb'.\n<br>\n<br>Building for multiple architectures (using the VPATH feature)\n<br>-------------------------------------------------------------\n<br>\n<br>If your file system is shared between multiple architectures, it\n<br>usually is not necessary to make copies of the sources for each\n<br>architecture you want to support.  If the make program supports the\n<br>VPATH feature, you can create an empty build directory for each\n<br>architecture, and in each directory run the configure script (on the\n<br>appropriate machine with the appropriate options).  This creates the\n<br>necessary subdirectories and the Makefiles therein.  The Makefiles\n<br>contain a line VPATH=... which points to a directory containing the\n<br>actual sources.  (On SGI systems, use \"smake -J1\" instead of \"make\" if\n<br>you use VPATH -- don't try gnumake.)\n<br>\n<br>For example, the following is all you need to build a minimal Python\n<br>in /usr/tmp/python (assuming ~guido/src/python is the toplevel\n<br>directory and you want to build in /usr/tmp/python):\n<br>\n<br>        $ mkdir /usr/tmp/python\n<br>        $ cd /usr/tmp/python\n<br>        $ ~guido/src/python/configure\n<br>        [...]\n<br>        $ make\n<br>        [...]\n<br>        $\n<br>\n<br>Note that configure copies the original Setup file to the build\n<br>directory if it finds no Setup file there.  This means that you can\n<br>edit the Setup file for each architecture independently.  For this\n<br>reason, subsequent changes to the original Setup file are not tracked\n<br>automatically, as they might overwrite local changes.  To force a copy\n<br>of a changed original Setup file, delete the target Setup file.  (The\n<br>makesetup script supports multiple input files, so if you want to be\n<br>fancy you can change the rules to create an empty Setup.local if it\n<br>doesn't exist and run it with arguments $(srcdir)/Setup Setup.local;\n<br>however this assumes that you only need to add modules.)\n<br>\n<br>Also note that you can't use a workspace for VPATH and non VPATH builds. The\n<br>object files left behind by one version confuses the other.\n<br>\n<br>\n<br>Building on non-UNIX systems\n<br>----------------------------\n<br>\n<br>For Windows (2000/NT/ME/98/95), assuming you have MS VC++ 7.1, the\n<br>project files are in PCbuild, the workspace is pcbuild.dsw.  See\n<br>PCbuild\\readme.txt for detailed instructions.\n<br>\n<br>For other non-Unix Windows compilers, in particular MS VC++ 6.0 and\n<br>for OS/2, enter the directory \"PC\" and read the file \"readme.txt\".\n<br>\n<br>For the Mac, a separate source distribution will be made available,\n<br>for use with the CodeWarrior compiler.  If you are interested in Mac\n<br>development, join the PythonMac Special Interest Group\n<br>(http://www.python.org/sigs/pythonmac-sig/, or send email to\n<br>pythonmac-sig-request@python.org).\n<br>\n<br>Of course, there are also binary distributions available for these\n<br>platforms -- see http://www.python.org/.\n<br>\n<br>To port Python to a new non-UNIX system, you will have to fake the\n<br>effect of running the configure script manually (for Mac and PC, this\n<br>has already been done for you).  A good start is to copy the file\n<br>pyconfig.h.in to pyconfig.h and edit the latter to reflect the actual\n<br>configuration of your system.  Most symbols must simply be defined as\n<br>1 only if the corresponding feature is present and can be left alone\n<br>otherwise; however the *_t type symbols must be defined as some\n<br>variant of int if they need to be defined at all.\n<br>\n<br>For all platforms, it's important that the build arrange to define the\n<br>preprocessor symbol NDEBUG on the compiler command line in a release\n<br>build of Python (else assert() calls remain in the code, hurting\n<br>release-build performance).  The Unix, Windows and Mac builds already\n<br>do this.\n<br>\n<br>\n<br>Miscellaneous issues\n<br>====================\n<br>\n<br>Emacs mode\n<br>----------\n<br>\n<br>There's an excellent Emacs editing mode for Python code; see the file\n<br>Misc/python-mode.el.  Originally written by the famous Tim Peters, it is now\n<br>maintained by the equally famous Barry Warsaw.  The latest version, along with\n<br>various other contributed Python-related Emacs goodies, is online at\n<br>http://launchpad.net/python-mode/.\n<br>\n<br>\n<br>Tkinter\n<br>-------\n<br>\n<br>The setup.py script automatically configures this when it detects a\n<br>usable Tcl/Tk installation.  This requires Tcl/Tk version 8.0 or\n<br>higher.\n<br>\n<br>For more Tkinter information, see the Tkinter Resource page:\n<br>http://www.python.org/topics/tkinter/\n<br>\n<br>There are demos in the Demo/tkinter directory.\n<br>\n<br>Note that there's a Python module called \"Tkinter\" (capital T) which\n<br>lives in Lib/lib-tk/Tkinter.py, and a C module called \"_tkinter\"\n<br>(lower case t and leading underscore) which lives in\n<br>Modules/_tkinter.c.  Demos and normal Tk applications import only the\n<br>Python Tkinter module -- only the latter imports the C _tkinter\n<br>module.  In order to find the C _tkinter module, it must be compiled\n<br>and linked into the Python interpreter -- the setup.py script does\n<br>this.  In order to find the Python Tkinter module, sys.path must be\n<br>set correctly -- normal installation takes care of this.\n<br>\n<br>\n<br>Distribution structure\n<br>----------------------\n<br>\n<br>Most subdirectories have their own README files.  Most files have\n<br>comments.\n<br>\n<br>Demo/           Demonstration scripts, modules and programs\n<br>Doc/            Documentation sources (reStructuredText)\n<br>Grammar/        Input for the parser generator\n<br>Include/        Public header files\n<br>LICENSE         Licensing information\n<br>Lib/            Python library modules\n<br>Mac/            Macintosh specific resources\n<br>Makefile.pre.in Source from which config.status creates the Makefile.pre\n<br>Misc/           Miscellaneous useful files\n<br>Modules/        Implementation of most built-in modules\n<br>Objects/        Implementation of most built-in object types\n<br>PC/             Files specific to PC ports (DOS, Windows, OS/2)\n<br>PCbuild/        Build directory for Microsoft Visual C++\n<br>Parser/         The parser and tokenizer and their input handling\n<br>Python/         The byte-compiler and interpreter\n<br>README          The file you're reading now\n<br>RISCOS/         Files specific to RISC OS port\n<br>Tools/          Some useful programs written in Python\n<br>pyconfig.h.in   Source from which pyconfig.h is created (GNU autoheader output)\n<br>configure       Configuration shell script (GNU autoconf output)\n<br>configure.in    Configuration specification (input for GNU autoconf)\n<br>install-sh      Shell script used to install files\n<br>setup.py        Python script used to build extension modules\n<br>\n<br>The following files will (may) be created in the toplevel directory by\n<br>the configuration and build processes:\n<br>\n<br>Makefile        Build rules\n<br>Makefile.pre    Build rules before running Modules/makesetup\n<br>buildno         Keeps track of the build number\n<br>config.cache    Cache of configuration variables\n<br>pyconfig.h      Configuration header\n<br>config.log      Log from last configure run\n<br>config.status   Status from last run of the configure script\n<br>getbuildinfo.o  Object file from Modules/getbuildinfo.c\n<br>libpython&lt;version&gt;.a    The library archive\n<br>python          The executable interpreter\n<br>reflog.txt      Output from running the regression suite with the -R flag \n<br>tags, TAGS      Tags files for vi and Emacs\n<br>\n<br>\n<br>That's all, folks!\n<br>------------------\n<br>\n<br>\n<br>--Guido van Rossum (home page: http://www.python.org/~guido/)\n<br>\n          </div>"}, "last_serial": 792181, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "019fcca05d87a26c55f78404a366a91e", "sha256": "f38e17ce903328a6e370a3640040b0c841e521abbdf81f98d074d51d7cdb428f"}, "downloads": -1, "filename": "ftp_bruteforce-1.0.0.zip", "has_sig": false, "md5_digest": "019fcca05d87a26c55f78404a366a91e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21276, "upload_time": "2012-03-31T11:57:38", "upload_time_iso_8601": "2012-03-31T11:57:38.267298Z", "url": "https://files.pythonhosted.org/packages/77/29/55814e5669f9591271f3d33563a65a6ea3f1b9abdfd5da8aa04e07d44b17/ftp_bruteforce-1.0.0.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "019fcca05d87a26c55f78404a366a91e", "sha256": "f38e17ce903328a6e370a3640040b0c841e521abbdf81f98d074d51d7cdb428f"}, "downloads": -1, "filename": "ftp_bruteforce-1.0.0.zip", "has_sig": false, "md5_digest": "019fcca05d87a26c55f78404a366a91e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21276, "upload_time": "2012-03-31T11:57:38", "upload_time_iso_8601": "2012-03-31T11:57:38.267298Z", "url": "https://files.pythonhosted.org/packages/77/29/55814e5669f9591271f3d33563a65a6ea3f1b9abdfd5da8aa04e07d44b17/ftp_bruteforce-1.0.0.zip", "yanked": false}], "timestamp": "Fri May  8 00:59:59 2020"}