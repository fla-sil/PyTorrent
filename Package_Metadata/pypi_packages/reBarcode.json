{"info": {"author": "Thorsten Weimann, Alexander Shorin, Timothy Roberts", "author_email": "timothyroberts.ca@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Topic :: Multimedia :: Graphics", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Fork of `pyBarcode <https://bitbucket.org/whitie/python-barcode/>`_\nproject.\n\nThis library provides a simple way to create barcodes using only the\nPython standardlib. The barcodes where created as SVG objects.\n\n\nRequirements\n------------\n\n    - Setuptools/distribute for installation (new in version 0.7beta4)\n    - Python 2.6 or above (including Python 3.x)\n    - On Python 2.6, 3.0, 3.1: argparse (for the commandline script)\n    - Program to open SVG objects (your browser should do it)\n    - Optional: PIL to render barcodes as images (PNG, JPG, ...)\n\n\nInstallation\n------------\n\nMake sure you have setuptools/distribute installed.\n\nUnpack the downloaded file, cd into the viivakoodi directory and run\n`python setup.py install`. Or just copy the barcode dir somewhere in\nyour PYTHONPATH.\n\nThe best way is to use pip: `pip install viivakoodi`.\n\n\nProvided Barcodes\n-----------------\n\nEAN-8, EAN-13, EAN-14, UPC-A, JAN, ISBN-10, ISBN-13, ISSN, Code 39, Code 128, PZN\n\n\nTodo\n----\n\n    - Add documentation\n    - Improve Python 3 support\n\nUsage\n-----\n\nInteractive::\n\n    >>> import barcode\n    >>> barcode.PROVIDED_BARCODES\n    [u'code39', u'code128', u'ean', u'ean13', u'ean8', u'gs1', u'gtin',\n     u'isbn', u'isbn10', u'isbn13', u'issn', u'jan', u'pzn', u'upc', u'upca']\n    >>> EAN = barcode.get_barcode_class('ean13')\n    >>> EAN\n    <class 'barcode.ean.EuropeanArticleNumber13'>\n    >>> ean = EAN(u'5901234123457')\n    >>> ean\n    <barcode.ean.EuropeanArticleNumber13 object at 0x00BE98F0>\n    >>> fullname = ean.save('ean13_barcode')\n    >>> fullname\n    u'ean13_barcode.svg'\n    # Example with PNG\n    >>> from barcode.writer import ImageWriter\n    >>> ean = EAN(u'5901234123457', writer=ImageWriter())\n    >>> fullname = ean.save('ean13_barcode')\n    u'ean13_barcode.png'\n    # New in v0.4.2\n    >>> from io import BytesIO\n    >>> fp = BytesIO()\n    >>> ean.write(fp)\n    # or\n    >>> f = open('/my/new/file', 'wb')\n    >>> ean.write(f) # PIL (ImageWriter) produces RAW format here\n    # New in v0.5.0\n    >>> from barcode import generate\n    >>> name = generate('EAN13', u'5901234123457', output='barcode_svg')\n    >>> name\n    u'barcode_svg.svg'\n    # with file like object\n    >>> fp = StringIO()\n    >>> generate('EAN13', u'5901234123457', writer=ImageWriter(), output=fp)\n    >>>\n\nNow open ean13_barcode.[svg|png] in a graphic app or simply in your browser\nand see the created barcode. That's it.\n\nCommandline::\n\n    $ pybarcode{2,3} create \"My Text\" outfile\n    New barcode saved as outfile.svg.\n    $ pybarcode{2,3} create -t png \"My Text\" outfile\n    New barcode saved as outfile.png.\n\n    Try `pybarcode -h` for help.\n\nChangelog\n---------\n\n:v0.1: First release.\n\n\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/trobertsca/reBarcode", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "reBarcode", "package_url": "https://pypi.org/project/reBarcode/", "platform": "", "project_url": "https://pypi.org/project/reBarcode/", "project_urls": {"Homepage": "https://github.com/trobertsca/reBarcode"}, "release_url": "https://pypi.org/project/reBarcode/0.1.0/", "requires_dist": null, "requires_python": "", "summary": "Create standard barcodes with Python. No external modules needed (optional PIL support included).", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Fork of <a href=\"https://bitbucket.org/whitie/python-barcode/\" rel=\"nofollow\">pyBarcode</a>\nproject.</p>\n<p>This library provides a simple way to create barcodes using only the\nPython standardlib. The barcodes where created as SVG objects.</p>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<blockquote>\n<ul>\n<li>Setuptools/distribute for installation (new in version 0.7beta4)</li>\n<li>Python 2.6 or above (including Python 3.x)</li>\n<li>On Python 2.6, 3.0, 3.1: argparse (for the commandline script)</li>\n<li>Program to open SVG objects (your browser should do it)</li>\n<li>Optional: PIL to render barcodes as images (PNG, JPG, \u2026)</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Make sure you have setuptools/distribute installed.</p>\n<p>Unpack the downloaded file, cd into the viivakoodi directory and run\n<cite>python setup.py install</cite>. Or just copy the barcode dir somewhere in\nyour PYTHONPATH.</p>\n<p>The best way is to use pip: <cite>pip install viivakoodi</cite>.</p>\n</div>\n<div id=\"provided-barcodes\">\n<h2>Provided Barcodes</h2>\n<p>EAN-8, EAN-13, EAN-14, UPC-A, JAN, ISBN-10, ISBN-13, ISSN, Code 39, Code 128, PZN</p>\n</div>\n<div id=\"todo\">\n<h2>Todo</h2>\n<blockquote>\n<ul>\n<li>Add documentation</li>\n<li>Improve Python 3 support</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Interactive:</p>\n<pre>&gt;&gt;&gt; import barcode\n&gt;&gt;&gt; barcode.PROVIDED_BARCODES\n[u'code39', u'code128', u'ean', u'ean13', u'ean8', u'gs1', u'gtin',\n u'isbn', u'isbn10', u'isbn13', u'issn', u'jan', u'pzn', u'upc', u'upca']\n&gt;&gt;&gt; EAN = barcode.get_barcode_class('ean13')\n&gt;&gt;&gt; EAN\n&lt;class 'barcode.ean.EuropeanArticleNumber13'&gt;\n&gt;&gt;&gt; ean = EAN(u'5901234123457')\n&gt;&gt;&gt; ean\n&lt;barcode.ean.EuropeanArticleNumber13 object at 0x00BE98F0&gt;\n&gt;&gt;&gt; fullname = ean.save('ean13_barcode')\n&gt;&gt;&gt; fullname\nu'ean13_barcode.svg'\n# Example with PNG\n&gt;&gt;&gt; from barcode.writer import ImageWriter\n&gt;&gt;&gt; ean = EAN(u'5901234123457', writer=ImageWriter())\n&gt;&gt;&gt; fullname = ean.save('ean13_barcode')\nu'ean13_barcode.png'\n# New in v0.4.2\n&gt;&gt;&gt; from io import BytesIO\n&gt;&gt;&gt; fp = BytesIO()\n&gt;&gt;&gt; ean.write(fp)\n# or\n&gt;&gt;&gt; f = open('/my/new/file', 'wb')\n&gt;&gt;&gt; ean.write(f) # PIL (ImageWriter) produces RAW format here\n# New in v0.5.0\n&gt;&gt;&gt; from barcode import generate\n&gt;&gt;&gt; name = generate('EAN13', u'5901234123457', output='barcode_svg')\n&gt;&gt;&gt; name\nu'barcode_svg.svg'\n# with file like object\n&gt;&gt;&gt; fp = StringIO()\n&gt;&gt;&gt; generate('EAN13', u'5901234123457', writer=ImageWriter(), output=fp)\n&gt;&gt;&gt;\n</pre>\n<p>Now open ean13_barcode.[svg|png] in a graphic app or simply in your browser\nand see the created barcode. That\u2019s it.</p>\n<p>Commandline:</p>\n<pre>$ pybarcode{2,3} create \"My Text\" outfile\nNew barcode saved as outfile.svg.\n$ pybarcode{2,3} create -t png \"My Text\" outfile\nNew barcode saved as outfile.png.\n\nTry `pybarcode -h` for help.\n</pre>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>v0.1:</th><td>First release.</td>\n</tr>\n</tbody>\n</table>\n</div>\n\n          </div>"}, "last_serial": 3273320, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "bff9fe3cac1eb5cdc7ad7c0881e8f235", "sha256": "02fb984c6cdc17a6db7b4c8abbc070208379c80648a2321f954b1b85113721ef"}, "downloads": -1, "filename": "reBarcode-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "bff9fe3cac1eb5cdc7ad7c0881e8f235", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 209438, "upload_time": "2017-10-23T21:31:07", "upload_time_iso_8601": "2017-10-23T21:31:07.346387Z", "url": "https://files.pythonhosted.org/packages/33/ae/723e2cf937f15f9ebb5aaef4d09b22e7dbcb54a222902af964437af835e4/reBarcode-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3ff9c533b0dbe3475c82be4e01a72dd1", "sha256": "53f3d09d2d9106ba776f2626a347597ac29c3b8d942fa8c08083fa27db41f730"}, "downloads": -1, "filename": "reBarcode-0.1.0.tar.gz", "has_sig": false, "md5_digest": "3ff9c533b0dbe3475c82be4e01a72dd1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 221764, "upload_time": "2017-10-23T21:31:10", "upload_time_iso_8601": "2017-10-23T21:31:10.344780Z", "url": "https://files.pythonhosted.org/packages/28/83/fa98cadf4398bcb7181b561e8ce93417c85c544de5f3f256c18ce3335c04/reBarcode-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bff9fe3cac1eb5cdc7ad7c0881e8f235", "sha256": "02fb984c6cdc17a6db7b4c8abbc070208379c80648a2321f954b1b85113721ef"}, "downloads": -1, "filename": "reBarcode-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "bff9fe3cac1eb5cdc7ad7c0881e8f235", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 209438, "upload_time": "2017-10-23T21:31:07", "upload_time_iso_8601": "2017-10-23T21:31:07.346387Z", "url": "https://files.pythonhosted.org/packages/33/ae/723e2cf937f15f9ebb5aaef4d09b22e7dbcb54a222902af964437af835e4/reBarcode-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3ff9c533b0dbe3475c82be4e01a72dd1", "sha256": "53f3d09d2d9106ba776f2626a347597ac29c3b8d942fa8c08083fa27db41f730"}, "downloads": -1, "filename": "reBarcode-0.1.0.tar.gz", "has_sig": false, "md5_digest": "3ff9c533b0dbe3475c82be4e01a72dd1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 221764, "upload_time": "2017-10-23T21:31:10", "upload_time_iso_8601": "2017-10-23T21:31:10.344780Z", "url": "https://files.pythonhosted.org/packages/28/83/fa98cadf4398bcb7181b561e8ce93417c85c544de5f3f256c18ce3335c04/reBarcode-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:06:18 2020"}