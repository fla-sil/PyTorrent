{"info": {"author": "Baruc Almaguer", "author_email": "baruc@valiot.io", "bugtrack_url": null, "classifiers": [], "description": "# python-gstorm\nGraphql Simple Tiny Object Relational Mapping - Graphql ORM for python\n\n# Current features:\n\n## QUERY\n### Aliases\nThere are several aliases for most Query-building functions, which make queries more concise:\n- query\n  - q = query, example: `Type.q() # vs Type.query()`\n  - qm = query, example: `Type.qm() # vs Type.query()`\n- query_one\n  - q1 = query_one, example: `Type.q1() # vs Type.query_one()`\n  - qs = query_one, example: `Type.qs() # vs Type.query_one()`\n- filter\n  - fil = filter, example: `Type.q().fil(...) # vs Type.query().filter(...)`\n  - after\n    - long: `Type.query().filter(after={'attribute': x, 'date': y})`\n    - short: `Type.q().after(attr=x, date=y)`\n  - before\n    - long: `Type.query().filter(before={'attribute': x, 'date': y})`\n    - short: `Type.q().before(attr=x, date=y)`\n  - isNull\n    - long: `Type.query().filter(nullAttribute={'attribute': x, 'isNull': y})`\n    - short: `Type.q().isNull(attr=x, value=True)`\n    - shorter: `Type.q().isNull(attr=x)` (Defaults to True)\n- findBy\n  - fb = findBy, example: `Type.q(). # vs Type.query().`\n  - find = findBy, example: `Type.q(). # vs Type.query().`\n- orderBy\n  - ob = orderBy, example: `Type.q(). # vs Type.query().`\n  - order = orderBy, example: `Type.q(). # vs Type.query().`\n- limit\n  - lim = limit, example: `Type.q(). # vs Type.query().`\n- offset\n  - off = offset, example: `Type.q(). # vs Type.query().`\n- children\n  - child = children, example: `Type.q(). # vs Type.query().`\n  - ch = children, example: `Type.q(). # vs Type.query().`\n- get\n  - run = get\n### Query all\n```python\nfrom tests.models import Tank\nall_tanks = Tank.query().get() # returns -> List[Tank]\nprint(all_tanks) # [Tank(id=1,capacity=10),Tank(id=2,capacity=20),...]\n```\n### Query some\nYou can concatenate storm methods to manipulate the data and how you want to receive it,\nthis methods may receive parameters in several ways:\n- filter(kwargs):\n  - `.filter(name='L1')`\n  - `.filter({'name': 'L1'})`\n  - `.filter(name='L1').filter(capacity=1250)`\n  - `.filter(name='L1', capacity=1250)`\n  - `.filter({'name': 'L1', 'capacity': 1250})`\n- orderBy(kwarg):\n  - Accepted keys = [asc, desc]\n  - Accepted values = GraphQLType fields, SCREAM_CASED: [ID, NAME, CAPACITY, INSERTED_AT, UPDATED_AT, ...]\n  - `.orderBy(asc='ID')`\n  - `.orderBy(desc='INSERTED_AT')`\n  - `.orderBy({'asc': 'INSERTED_AT'})`\n- limit(count)\n  - `.limit(1)`\n```python\nfrom tests.models import Tank\nall_tanks = (\n  Tank.query()\n  .filter(capacity=1250)\n).get() # returns -> List[Tank]\nprint(all_tanks) # [Tank(id=1,capacity=10),Tank(id=3,capacity=10),...]\n```\n### Query one\n```python\nfrom tests.models import Tank\nmy_tank = Tank.query_one().findBy(id=3).get() # returns -> Tank\nprint(my_tank) # Tank(id='3', name='R342', type='Reposo', capacity=0, room=None, inventories=[])\n```\n### Filters\n#### per field value (exact match, regex accepted)\n```python\nfrom tests.models import Tank\ngov_tanks = Tank.query().filter(type='^Gob').get()\nrest_tanks = Tank.query().filter(type='^Rep').get()\nprint(len(gov_tanks))\nprint(len(rest_tanks))\n```\n#### Null attribute\n```python\nfrom tests.models import Tank\nok_tanks = (\n  Tank.query().filter(nullAttribute= { 'attribute': 'CAPACITY', 'isNull': False })\n).get()\nprint(ok_tanks)\n\n# short-hand version\nfrom tests.models import Tank\nok_tanks = Tank.q().isNull(attr='CAPACITY', value=False).get()\nprint(ok_tanks)\n\n# using null default value:\nfrom tests.models import Tank\nbad_tanks = Tank.q().isNull(attr='CAPACITY').get() # value param defaults to True\nprint(bad_tanks)\n```\n\n#### Comparison dates (after, before)\n```python\nfrom tests.models import BbtInventory\nfrom datetime import datetime as dt, timedelta as td\nfrom gstorm.helpers.date_helpers import get_iso8601_str\ntoday = get_iso8601_str(dt.now() - td(days=1))\nyesterday = get_iso8601_str(dt.now() - td(days=2))\ntoday_inventories = (\n  BbtInventory.query()\n    .filter(after={\n      'attribute': 'INSERTED_AT',\n      'date': \"2020-02-27T23:01:44Z\" # or: 'date': dt.now() - td(days=1)\n    })\n).get()\nprint(today_inventories)\n\n# Short-hand version\ntoday_inventories = (\n  BbtInventory.query()\n    .after(attr='INSERTED_AT', date=\"2020-02-27T23:01:44Z\") # or: 'date': dt.now() - td(days=1)\n).get()\nprint(today_inventories)\n\n# Short-hand version\nyesterday_inventories = (\n  BbtInventory.query()\n    .after(attr='INSERTED_AT', date=yesterday)\n    .before(attr='INSERTED_AT', date=today)\n).get()\nprint(yesterday_inventories)\n```\n### Ordering\n#### Asc, Desc, per field\n```python\nfrom tests.models import BbtInventory\nlatest_inventories = BbtInventory.query().orderBy(desc='ID').limit(5).get()\nprint(latest_inventories)\nsmallest_inventories = BbtInventory.query().orderBy(asc='VOLUME').limit(5).get()\nprint(smallest_inventories)\n```\n### Limit\n```python\nfrom tests.models import BottlingLine\nfirst_10_lines = BottlingLine.query().limit(10).get()\nprint(first_10_lines)\n```\n### Nested Queries\n```python\nfrom tests.models import BottlingOrder\n# We want to include the sub-attributes:\nguid = 'abc123'\norders = BottlingOrder.query()._with({\n  'line': Line.query(),\n  'plans': BottlingPlan.query().orderBy(asc='ID'),\n  'brightBeer': BrightBeer.query().filter(groupGuid=guid))\n}).\nprint(orders[0])\n# >> BottlingOrder(id=1, name='123', line=Line(name='LINEA001'), ...)\n```\n### Pagination (API NOT FINAL)\n#### iterable\n```python\nfrom tests.models import Datum\norder = {'desc': 'ID'}\nfor datum_page in Datum.limit(100).offset(0).orderBy(asc='ORDER').paginate():\n  for datum in datum_page:\n    print(datum) # type: Datum(id=x,value=y)\n```\n#### Comparison numerical (>, >=, <, <=...)\nNOT WORKING IN VALIOT-APP\n\n# MUTATION\n## Create\n```python\nfrom tests.models import Tank\ntank = Tank.load(csv='tanks.csv').limit(1).get() # load from any source\nresponse = storm.create(tank) # GraphqlType object\n```\n## Update\n```python\nfrom tests.models import Tank\n[gov_tank] = Tank.query().filter(name='L').limit(1).get()\n# process data...\n# ...\nresponse = storm.update(gov_tank).apply() # GraphqlType object\n```\n## Upsert\n```python\nfrom tests.models import Tank\n[gov_tank] = Tank.load(csv='tanks.csv').limit(1).get() # load from any source\nresponse = storm.upsert(gov_tank).apply() # GraphqlType object\nif not response.successful:\n  print(response.messages)\n# everything ok, do other stuff...\nprint(gov_tank) # has updated data (New ID, etc)\n```\n## Single mutation\n**See above examples**\n## Multiple mutation\n### Sequential\n```python\nfrom tests.models import Tank\ngov_tanks = Tank.load(csv='tanks.csv').get() # load from any source\n# ! OPTION 1: one by one\nfor tank in gov_tanks:\n  response = storm.upsert(tank).apply() # GraphqlType object\n  print(tank) # has updated data (New ID, etc)\n# ! OPTION 2: All handled by storm:\nresponse = storm.upsert(gov_tanks).apply()\n# response type -> List[GraphqlMutationResponse]\n```\n### Batch (Multiple mutations in single Mutation tag)\n```python\nfrom tests.models import Tank\nfrom storm import UploadMode as mode\ngov_tanks = Tank.load(csv='tanks.csv') # load from any source\nresponse = storm.upsert(gov_tanks).mode(mode.BATCH).apply()\n# default:\n# response = storm.upsert(gov_tanks, mode=mode.SEQUENTIAL)\n```\n### Nested mutation\n**API WIP**:\n```python\nfrom tests.models import BbtProgram, BbtPlan\nfrom storm import UploadMode as mode\n# algorithm runs...\nprogram = BbtProgram() # New with defaults\nfor plan in algorithm_plans:\n  program.plans.append(BbtPlan(**plan))\n# OPTION 1:\nresponse = storm.create(program)\n  .nested({\n    'plans': Plan.create()\n  }).apply()\n# OPTION 2:\nattrs = ['plans']\nresponse = storm.create(program, nested=attrs)\n```\n\n### Parallel/Batch (Multiple mutations multi-threaded, each mutation may be batched)\nNOT PRIORITY\n# SUBSCRIPTION\nNOT PRIORITY\n\n## COMPARISON\n```\n# # ! old way [No additional libraries]:\n# import requests\n# import json\n# @dataclass\n# class Line():\n#   id: str\n#   name: str\n#   speed: float\n\n# LINE = '''\n#   query getLine($name: String!){\n#     line(findBy:{ name: $name }){\n#       id\n#       name\n#       speed\n#     }\n#   }\n# '''\n# url = 'https://test.valiot.app/'\n# content = {\n#   'query': LINE,\n#   'variables': {'name': 'LINEA001'}\n# }\n# response = requests.post(url, json=content)\n# line_data = json.loads(str(response.content))\n# line = Line(**line_data)\n# line.name # * >> LINEA001\n# # ! current way [pygqlc]:\n# gql = GraphQLClient()\n# @dataclass\n# class Line():\n#   id: str\n#   name: str\n#   speed: float\n\n# LINE = '''\n#   query getLine($name: String!){\n#     line(findBy:{ name: $name }){\n#       id\n#       name\n#       speed\n#     }\n#   }\n# '''\n# line_data, _ = gql.query_one(LINE, {'name': 'LINEA001'})\n# line = Line(**line_data)\n# line.name # * >> LINEA001\n\n# # * New way (TBD):\n# gql = GraphQLClient()\n# orm = GStorm(client=gql, schema=SCHEMA_PATH)\n# Line = orm.getType('Line')\n# line = Line.find_one({'name': 'LINEA001'})\n# line.name # * >> LINEA001\n```\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/valiot/python-gstorm", "keywords": "gstorm,orm,graphql,gql", "license": "", "maintainer": "", "maintainer_email": "", "name": "gstorm", "package_url": "https://pypi.org/project/gstorm/", "platform": "", "project_url": "https://pypi.org/project/gstorm/", "project_urls": {"Homepage": "https://github.com/valiot/python-gstorm"}, "release_url": "https://pypi.org/project/gstorm/0.4.5/", "requires_dist": ["pygqlc", "inflect", "pydash", "click", "pytz", "tzlocal", "valiotworker"], "requires_python": "", "summary": "GraphQL ORM for python (based on pygqlc)", "version": "0.4.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>python-gstorm</h1>\n<p>Graphql Simple Tiny Object Relational Mapping - Graphql ORM for python</p>\n<h1>Current features:</h1>\n<h2>QUERY</h2>\n<h3>Aliases</h3>\n<p>There are several aliases for most Query-building functions, which make queries more concise:</p>\n<ul>\n<li>query\n<ul>\n<li>q = query, example: <code>Type.q() # vs Type.query()</code></li>\n<li>qm = query, example: <code>Type.qm() # vs Type.query()</code></li>\n</ul>\n</li>\n<li>query_one\n<ul>\n<li>q1 = query_one, example: <code>Type.q1() # vs Type.query_one()</code></li>\n<li>qs = query_one, example: <code>Type.qs() # vs Type.query_one()</code></li>\n</ul>\n</li>\n<li>filter\n<ul>\n<li>fil = filter, example: <code>Type.q().fil(...) # vs Type.query().filter(...)</code></li>\n<li>after\n<ul>\n<li>long: <code>Type.query().filter(after={'attribute': x, 'date': y})</code></li>\n<li>short: <code>Type.q().after(attr=x, date=y)</code></li>\n</ul>\n</li>\n<li>before\n<ul>\n<li>long: <code>Type.query().filter(before={'attribute': x, 'date': y})</code></li>\n<li>short: <code>Type.q().before(attr=x, date=y)</code></li>\n</ul>\n</li>\n<li>isNull\n<ul>\n<li>long: <code>Type.query().filter(nullAttribute={'attribute': x, 'isNull': y})</code></li>\n<li>short: <code>Type.q().isNull(attr=x, value=True)</code></li>\n<li>shorter: <code>Type.q().isNull(attr=x)</code> (Defaults to True)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>findBy\n<ul>\n<li>fb = findBy, example: <code>Type.q(). # vs Type.query().</code></li>\n<li>find = findBy, example: <code>Type.q(). # vs Type.query().</code></li>\n</ul>\n</li>\n<li>orderBy\n<ul>\n<li>ob = orderBy, example: <code>Type.q(). # vs Type.query().</code></li>\n<li>order = orderBy, example: <code>Type.q(). # vs Type.query().</code></li>\n</ul>\n</li>\n<li>limit\n<ul>\n<li>lim = limit, example: <code>Type.q(). # vs Type.query().</code></li>\n</ul>\n</li>\n<li>offset\n<ul>\n<li>off = offset, example: <code>Type.q(). # vs Type.query().</code></li>\n</ul>\n</li>\n<li>children\n<ul>\n<li>child = children, example: <code>Type.q(). # vs Type.query().</code></li>\n<li>ch = children, example: <code>Type.q(). # vs Type.query().</code></li>\n</ul>\n</li>\n<li>get\n<ul>\n<li>run = get</li>\n</ul>\n</li>\n</ul>\n<h3>Query all</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tests.models</span> <span class=\"kn\">import</span> <span class=\"n\">Tank</span>\n<span class=\"n\">all_tanks</span> <span class=\"o\">=</span> <span class=\"n\">Tank</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span> <span class=\"c1\"># returns -&gt; List[Tank]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">all_tanks</span><span class=\"p\">)</span> <span class=\"c1\"># [Tank(id=1,capacity=10),Tank(id=2,capacity=20),...]</span>\n</pre>\n<h3>Query some</h3>\n<p>You can concatenate storm methods to manipulate the data and how you want to receive it,\nthis methods may receive parameters in several ways:</p>\n<ul>\n<li>filter(kwargs):\n<ul>\n<li><code>.filter(name='L1')</code></li>\n<li><code>.filter({'name': 'L1'})</code></li>\n<li><code>.filter(name='L1').filter(capacity=1250)</code></li>\n<li><code>.filter(name='L1', capacity=1250)</code></li>\n<li><code>.filter({'name': 'L1', 'capacity': 1250})</code></li>\n</ul>\n</li>\n<li>orderBy(kwarg):\n<ul>\n<li>Accepted keys = [asc, desc]</li>\n<li>Accepted values = GraphQLType fields, SCREAM_CASED: [ID, NAME, CAPACITY, INSERTED_AT, UPDATED_AT, ...]</li>\n<li><code>.orderBy(asc='ID')</code></li>\n<li><code>.orderBy(desc='INSERTED_AT')</code></li>\n<li><code>.orderBy({'asc': 'INSERTED_AT'})</code></li>\n</ul>\n</li>\n<li>limit(count)\n<ul>\n<li><code>.limit(1)</code></li>\n</ul>\n</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tests.models</span> <span class=\"kn\">import</span> <span class=\"n\">Tank</span>\n<span class=\"n\">all_tanks</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n  <span class=\"n\">Tank</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">()</span>\n  <span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">capacity</span><span class=\"o\">=</span><span class=\"mi\">1250</span><span class=\"p\">)</span>\n<span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span> <span class=\"c1\"># returns -&gt; List[Tank]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">all_tanks</span><span class=\"p\">)</span> <span class=\"c1\"># [Tank(id=1,capacity=10),Tank(id=3,capacity=10),...]</span>\n</pre>\n<h3>Query one</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tests.models</span> <span class=\"kn\">import</span> <span class=\"n\">Tank</span>\n<span class=\"n\">my_tank</span> <span class=\"o\">=</span> <span class=\"n\">Tank</span><span class=\"o\">.</span><span class=\"n\">query_one</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">findBy</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span> <span class=\"c1\"># returns -&gt; Tank</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">my_tank</span><span class=\"p\">)</span> <span class=\"c1\"># Tank(id='3', name='R342', type='Reposo', capacity=0, room=None, inventories=[])</span>\n</pre>\n<h3>Filters</h3>\n<h4>per field value (exact match, regex accepted)</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tests.models</span> <span class=\"kn\">import</span> <span class=\"n\">Tank</span>\n<span class=\"n\">gov_tanks</span> <span class=\"o\">=</span> <span class=\"n\">Tank</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s1\">'^Gob'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n<span class=\"n\">rest_tanks</span> <span class=\"o\">=</span> <span class=\"n\">Tank</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s1\">'^Rep'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">gov_tanks</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">rest_tanks</span><span class=\"p\">))</span>\n</pre>\n<h4>Null attribute</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tests.models</span> <span class=\"kn\">import</span> <span class=\"n\">Tank</span>\n<span class=\"n\">ok_tanks</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n  <span class=\"n\">Tank</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">nullAttribute</span><span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"s1\">'attribute'</span><span class=\"p\">:</span> <span class=\"s1\">'CAPACITY'</span><span class=\"p\">,</span> <span class=\"s1\">'isNull'</span><span class=\"p\">:</span> <span class=\"kc\">False</span> <span class=\"p\">})</span>\n<span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ok_tanks</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># short-hand version</span>\n<span class=\"kn\">from</span> <span class=\"nn\">tests.models</span> <span class=\"kn\">import</span> <span class=\"n\">Tank</span>\n<span class=\"n\">ok_tanks</span> <span class=\"o\">=</span> <span class=\"n\">Tank</span><span class=\"o\">.</span><span class=\"n\">q</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">isNull</span><span class=\"p\">(</span><span class=\"n\">attr</span><span class=\"o\">=</span><span class=\"s1\">'CAPACITY'</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ok_tanks</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># using null default value:</span>\n<span class=\"kn\">from</span> <span class=\"nn\">tests.models</span> <span class=\"kn\">import</span> <span class=\"n\">Tank</span>\n<span class=\"n\">bad_tanks</span> <span class=\"o\">=</span> <span class=\"n\">Tank</span><span class=\"o\">.</span><span class=\"n\">q</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">isNull</span><span class=\"p\">(</span><span class=\"n\">attr</span><span class=\"o\">=</span><span class=\"s1\">'CAPACITY'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span> <span class=\"c1\"># value param defaults to True</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">bad_tanks</span><span class=\"p\">)</span>\n</pre>\n<h4>Comparison dates (after, before)</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tests.models</span> <span class=\"kn\">import</span> <span class=\"n\">BbtInventory</span>\n<span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">datetime</span> <span class=\"k\">as</span> <span class=\"n\">dt</span><span class=\"p\">,</span> <span class=\"n\">timedelta</span> <span class=\"k\">as</span> <span class=\"n\">td</span>\n<span class=\"kn\">from</span> <span class=\"nn\">gstorm.helpers.date_helpers</span> <span class=\"kn\">import</span> <span class=\"n\">get_iso8601_str</span>\n<span class=\"n\">today</span> <span class=\"o\">=</span> <span class=\"n\">get_iso8601_str</span><span class=\"p\">(</span><span class=\"n\">dt</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">td</span><span class=\"p\">(</span><span class=\"n\">days</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"n\">yesterday</span> <span class=\"o\">=</span> <span class=\"n\">get_iso8601_str</span><span class=\"p\">(</span><span class=\"n\">dt</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">td</span><span class=\"p\">(</span><span class=\"n\">days</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"n\">today_inventories</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n  <span class=\"n\">BbtInventory</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">()</span>\n    <span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">after</span><span class=\"o\">=</span><span class=\"p\">{</span>\n      <span class=\"s1\">'attribute'</span><span class=\"p\">:</span> <span class=\"s1\">'INSERTED_AT'</span><span class=\"p\">,</span>\n      <span class=\"s1\">'date'</span><span class=\"p\">:</span> <span class=\"s2\">\"2020-02-27T23:01:44Z\"</span> <span class=\"c1\"># or: 'date': dt.now() - td(days=1)</span>\n    <span class=\"p\">})</span>\n<span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">today_inventories</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Short-hand version</span>\n<span class=\"n\">today_inventories</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n  <span class=\"n\">BbtInventory</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">()</span>\n    <span class=\"o\">.</span><span class=\"n\">after</span><span class=\"p\">(</span><span class=\"n\">attr</span><span class=\"o\">=</span><span class=\"s1\">'INSERTED_AT'</span><span class=\"p\">,</span> <span class=\"n\">date</span><span class=\"o\">=</span><span class=\"s2\">\"2020-02-27T23:01:44Z\"</span><span class=\"p\">)</span> <span class=\"c1\"># or: 'date': dt.now() - td(days=1)</span>\n<span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">today_inventories</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Short-hand version</span>\n<span class=\"n\">yesterday_inventories</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n  <span class=\"n\">BbtInventory</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">()</span>\n    <span class=\"o\">.</span><span class=\"n\">after</span><span class=\"p\">(</span><span class=\"n\">attr</span><span class=\"o\">=</span><span class=\"s1\">'INSERTED_AT'</span><span class=\"p\">,</span> <span class=\"n\">date</span><span class=\"o\">=</span><span class=\"n\">yesterday</span><span class=\"p\">)</span>\n    <span class=\"o\">.</span><span class=\"n\">before</span><span class=\"p\">(</span><span class=\"n\">attr</span><span class=\"o\">=</span><span class=\"s1\">'INSERTED_AT'</span><span class=\"p\">,</span> <span class=\"n\">date</span><span class=\"o\">=</span><span class=\"n\">today</span><span class=\"p\">)</span>\n<span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">yesterday_inventories</span><span class=\"p\">)</span>\n</pre>\n<h3>Ordering</h3>\n<h4>Asc, Desc, per field</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tests.models</span> <span class=\"kn\">import</span> <span class=\"n\">BbtInventory</span>\n<span class=\"n\">latest_inventories</span> <span class=\"o\">=</span> <span class=\"n\">BbtInventory</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">orderBy</span><span class=\"p\">(</span><span class=\"n\">desc</span><span class=\"o\">=</span><span class=\"s1\">'ID'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">limit</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">latest_inventories</span><span class=\"p\">)</span>\n<span class=\"n\">smallest_inventories</span> <span class=\"o\">=</span> <span class=\"n\">BbtInventory</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">orderBy</span><span class=\"p\">(</span><span class=\"n\">asc</span><span class=\"o\">=</span><span class=\"s1\">'VOLUME'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">limit</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">smallest_inventories</span><span class=\"p\">)</span>\n</pre>\n<h3>Limit</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tests.models</span> <span class=\"kn\">import</span> <span class=\"n\">BottlingLine</span>\n<span class=\"n\">first_10_lines</span> <span class=\"o\">=</span> <span class=\"n\">BottlingLine</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">limit</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">first_10_lines</span><span class=\"p\">)</span>\n</pre>\n<h3>Nested Queries</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tests.models</span> <span class=\"kn\">import</span> <span class=\"n\">BottlingOrder</span>\n<span class=\"c1\"># We want to include the sub-attributes:</span>\n<span class=\"n\">guid</span> <span class=\"o\">=</span> <span class=\"s1\">'abc123'</span>\n<span class=\"n\">orders</span> <span class=\"o\">=</span> <span class=\"n\">BottlingOrder</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">_with</span><span class=\"p\">({</span>\n  <span class=\"s1\">'line'</span><span class=\"p\">:</span> <span class=\"n\">Line</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(),</span>\n  <span class=\"s1\">'plans'</span><span class=\"p\">:</span> <span class=\"n\">BottlingPlan</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">orderBy</span><span class=\"p\">(</span><span class=\"n\">asc</span><span class=\"o\">=</span><span class=\"s1\">'ID'</span><span class=\"p\">),</span>\n  <span class=\"s1\">'brightBeer'</span><span class=\"p\">:</span> <span class=\"n\">BrightBeer</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">groupGuid</span><span class=\"o\">=</span><span class=\"n\">guid</span><span class=\"p\">))</span>\n<span class=\"p\">})</span><span class=\"o\">.</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">orders</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"c1\"># &gt;&gt; BottlingOrder(id=1, name='123', line=Line(name='LINEA001'), ...)</span>\n</pre>\n<h3>Pagination (API NOT FINAL)</h3>\n<h4>iterable</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tests.models</span> <span class=\"kn\">import</span> <span class=\"n\">Datum</span>\n<span class=\"n\">order</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'desc'</span><span class=\"p\">:</span> <span class=\"s1\">'ID'</span><span class=\"p\">}</span>\n<span class=\"k\">for</span> <span class=\"n\">datum_page</span> <span class=\"ow\">in</span> <span class=\"n\">Datum</span><span class=\"o\">.</span><span class=\"n\">limit</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">offset</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">orderBy</span><span class=\"p\">(</span><span class=\"n\">asc</span><span class=\"o\">=</span><span class=\"s1\">'ORDER'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">paginate</span><span class=\"p\">():</span>\n  <span class=\"k\">for</span> <span class=\"n\">datum</span> <span class=\"ow\">in</span> <span class=\"n\">datum_page</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">datum</span><span class=\"p\">)</span> <span class=\"c1\"># type: Datum(id=x,value=y)</span>\n</pre>\n<h4>Comparison numerical (&gt;, &gt;=, &lt;, &lt;=...)</h4>\n<p>NOT WORKING IN VALIOT-APP</p>\n<h1>MUTATION</h1>\n<h2>Create</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tests.models</span> <span class=\"kn\">import</span> <span class=\"n\">Tank</span>\n<span class=\"n\">tank</span> <span class=\"o\">=</span> <span class=\"n\">Tank</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">csv</span><span class=\"o\">=</span><span class=\"s1\">'tanks.csv'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">limit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span> <span class=\"c1\"># load from any source</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">storm</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">tank</span><span class=\"p\">)</span> <span class=\"c1\"># GraphqlType object</span>\n</pre>\n<h2>Update</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tests.models</span> <span class=\"kn\">import</span> <span class=\"n\">Tank</span>\n<span class=\"p\">[</span><span class=\"n\">gov_tank</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Tank</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'L'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">limit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n<span class=\"c1\"># process data...</span>\n<span class=\"c1\"># ...</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">storm</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">gov_tank</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">apply</span><span class=\"p\">()</span> <span class=\"c1\"># GraphqlType object</span>\n</pre>\n<h2>Upsert</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tests.models</span> <span class=\"kn\">import</span> <span class=\"n\">Tank</span>\n<span class=\"p\">[</span><span class=\"n\">gov_tank</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Tank</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">csv</span><span class=\"o\">=</span><span class=\"s1\">'tanks.csv'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">limit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span> <span class=\"c1\"># load from any source</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">storm</span><span class=\"o\">.</span><span class=\"n\">upsert</span><span class=\"p\">(</span><span class=\"n\">gov_tank</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">apply</span><span class=\"p\">()</span> <span class=\"c1\"># GraphqlType object</span>\n<span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">successful</span><span class=\"p\">:</span>\n  <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">messages</span><span class=\"p\">)</span>\n<span class=\"c1\"># everything ok, do other stuff...</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">gov_tank</span><span class=\"p\">)</span> <span class=\"c1\"># has updated data (New ID, etc)</span>\n</pre>\n<h2>Single mutation</h2>\n<p><strong>See above examples</strong></p>\n<h2>Multiple mutation</h2>\n<h3>Sequential</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tests.models</span> <span class=\"kn\">import</span> <span class=\"n\">Tank</span>\n<span class=\"n\">gov_tanks</span> <span class=\"o\">=</span> <span class=\"n\">Tank</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">csv</span><span class=\"o\">=</span><span class=\"s1\">'tanks.csv'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span> <span class=\"c1\"># load from any source</span>\n<span class=\"c1\"># ! OPTION 1: one by one</span>\n<span class=\"k\">for</span> <span class=\"n\">tank</span> <span class=\"ow\">in</span> <span class=\"n\">gov_tanks</span><span class=\"p\">:</span>\n  <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">storm</span><span class=\"o\">.</span><span class=\"n\">upsert</span><span class=\"p\">(</span><span class=\"n\">tank</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">apply</span><span class=\"p\">()</span> <span class=\"c1\"># GraphqlType object</span>\n  <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">tank</span><span class=\"p\">)</span> <span class=\"c1\"># has updated data (New ID, etc)</span>\n<span class=\"c1\"># ! OPTION 2: All handled by storm:</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">storm</span><span class=\"o\">.</span><span class=\"n\">upsert</span><span class=\"p\">(</span><span class=\"n\">gov_tanks</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">apply</span><span class=\"p\">()</span>\n<span class=\"c1\"># response type -&gt; List[GraphqlMutationResponse]</span>\n</pre>\n<h3>Batch (Multiple mutations in single Mutation tag)</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tests.models</span> <span class=\"kn\">import</span> <span class=\"n\">Tank</span>\n<span class=\"kn\">from</span> <span class=\"nn\">storm</span> <span class=\"kn\">import</span> <span class=\"n\">UploadMode</span> <span class=\"k\">as</span> <span class=\"n\">mode</span>\n<span class=\"n\">gov_tanks</span> <span class=\"o\">=</span> <span class=\"n\">Tank</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">csv</span><span class=\"o\">=</span><span class=\"s1\">'tanks.csv'</span><span class=\"p\">)</span> <span class=\"c1\"># load from any source</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">storm</span><span class=\"o\">.</span><span class=\"n\">upsert</span><span class=\"p\">(</span><span class=\"n\">gov_tanks</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">mode</span><span class=\"p\">(</span><span class=\"n\">mode</span><span class=\"o\">.</span><span class=\"n\">BATCH</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">apply</span><span class=\"p\">()</span>\n<span class=\"c1\"># default:</span>\n<span class=\"c1\"># response = storm.upsert(gov_tanks, mode=mode.SEQUENTIAL)</span>\n</pre>\n<h3>Nested mutation</h3>\n<p><strong>API WIP</strong>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tests.models</span> <span class=\"kn\">import</span> <span class=\"n\">BbtProgram</span><span class=\"p\">,</span> <span class=\"n\">BbtPlan</span>\n<span class=\"kn\">from</span> <span class=\"nn\">storm</span> <span class=\"kn\">import</span> <span class=\"n\">UploadMode</span> <span class=\"k\">as</span> <span class=\"n\">mode</span>\n<span class=\"c1\"># algorithm runs...</span>\n<span class=\"n\">program</span> <span class=\"o\">=</span> <span class=\"n\">BbtProgram</span><span class=\"p\">()</span> <span class=\"c1\"># New with defaults</span>\n<span class=\"k\">for</span> <span class=\"n\">plan</span> <span class=\"ow\">in</span> <span class=\"n\">algorithm_plans</span><span class=\"p\">:</span>\n  <span class=\"n\">program</span><span class=\"o\">.</span><span class=\"n\">plans</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">BbtPlan</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">plan</span><span class=\"p\">))</span>\n<span class=\"c1\"># OPTION 1:</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">storm</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">program</span><span class=\"p\">)</span>\n  <span class=\"o\">.</span><span class=\"n\">nested</span><span class=\"p\">({</span>\n    <span class=\"s1\">'plans'</span><span class=\"p\">:</span> <span class=\"n\">Plan</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">()</span>\n  <span class=\"p\">})</span><span class=\"o\">.</span><span class=\"n\">apply</span><span class=\"p\">()</span>\n<span class=\"c1\"># OPTION 2:</span>\n<span class=\"n\">attrs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'plans'</span><span class=\"p\">]</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">storm</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">program</span><span class=\"p\">,</span> <span class=\"n\">nested</span><span class=\"o\">=</span><span class=\"n\">attrs</span><span class=\"p\">)</span>\n</pre>\n<h3>Parallel/Batch (Multiple mutations multi-threaded, each mutation may be batched)</h3>\n<p>NOT PRIORITY</p>\n<h1>SUBSCRIPTION</h1>\n<p>NOT PRIORITY</p>\n<h2>COMPARISON</h2>\n<pre><code># # ! old way [No additional libraries]:\n# import requests\n# import json\n# @dataclass\n# class Line():\n#   id: str\n#   name: str\n#   speed: float\n\n# LINE = '''\n#   query getLine($name: String!){\n#     line(findBy:{ name: $name }){\n#       id\n#       name\n#       speed\n#     }\n#   }\n# '''\n# url = 'https://test.valiot.app/'\n# content = {\n#   'query': LINE,\n#   'variables': {'name': 'LINEA001'}\n# }\n# response = requests.post(url, json=content)\n# line_data = json.loads(str(response.content))\n# line = Line(**line_data)\n# line.name # * &gt;&gt; LINEA001\n# # ! current way [pygqlc]:\n# gql = GraphQLClient()\n# @dataclass\n# class Line():\n#   id: str\n#   name: str\n#   speed: float\n\n# LINE = '''\n#   query getLine($name: String!){\n#     line(findBy:{ name: $name }){\n#       id\n#       name\n#       speed\n#     }\n#   }\n# '''\n# line_data, _ = gql.query_one(LINE, {'name': 'LINEA001'})\n# line = Line(**line_data)\n# line.name # * &gt;&gt; LINEA001\n\n# # * New way (TBD):\n# gql = GraphQLClient()\n# orm = GStorm(client=gql, schema=SCHEMA_PATH)\n# Line = orm.getType('Line')\n# line = Line.find_one({'name': 'LINEA001'})\n# line.name # * &gt;&gt; LINEA001\n</code></pre>\n\n          </div>"}, "last_serial": 7019202, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "8706a3dd2f85f5242a075f980b5a6ffd", "sha256": "e3071a6aaaabda7fb0f269d8af339a552fd0612589093f03f9188b130bcd1b13"}, "downloads": -1, "filename": "gstorm-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "8706a3dd2f85f5242a075f980b5a6ffd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 2630, "upload_time": "2020-03-31T19:56:50", "upload_time_iso_8601": "2020-03-31T19:56:50.942130Z", "url": "https://files.pythonhosted.org/packages/b8/98/8a8e74a96139bb4601854c57907a84770c7f7d4f30fb27c2fdc50f824619/gstorm-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "60736e34e0477dcd1e7f90cdbc4d0e0f", "sha256": "a98b3b92acf77317444ec342a8d34ee9a03c3520790e73f34628f3327d47b024"}, "downloads": -1, "filename": "gstorm-0.1.0.tar.gz", "has_sig": false, "md5_digest": "60736e34e0477dcd1e7f90cdbc4d0e0f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2243, "upload_time": "2020-03-31T19:56:53", "upload_time_iso_8601": "2020-03-31T19:56:53.100881Z", "url": "https://files.pythonhosted.org/packages/09/ea/e0aabf8d88677a32e68f24258d78d941009ca51831e0cfef185c01a7a214/gstorm-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "bf09777679a053c6bb0460c5ccfc34fc", "sha256": "c96d3339a8508cfd0af0419da51125fd50eebc7846d90f9c6a52e3ee8bf610c3"}, "downloads": -1, "filename": "gstorm-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "bf09777679a053c6bb0460c5ccfc34fc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 2645, "upload_time": "2020-03-31T20:25:11", "upload_time_iso_8601": "2020-03-31T20:25:11.749654Z", "url": "https://files.pythonhosted.org/packages/99/61/f91813110b6628d37cdd1d6fa4de4df2de69779fa2e175f217ec5d189fa2/gstorm-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0b1b364b48ebba68e677eb791304a38f", "sha256": "796096e778babcba0d3ea714b953a9ad4eb5c7f7d3e50c1182b2b51542721cd8"}, "downloads": -1, "filename": "gstorm-0.1.1.tar.gz", "has_sig": false, "md5_digest": "0b1b364b48ebba68e677eb791304a38f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2256, "upload_time": "2020-03-31T20:25:13", "upload_time_iso_8601": "2020-03-31T20:25:13.146172Z", "url": "https://files.pythonhosted.org/packages/27/06/67ce90d8e59973d177f44cb1c304654a667f08a4939d66381c605ef579ec/gstorm-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "c49837a435fba497dbad6bcb186bc80e", "sha256": "0f22a5f9d63fd051711b6ae49b68201e3887267299f7df78dcddeb29cbf5c2e0"}, "downloads": -1, "filename": "gstorm-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "c49837a435fba497dbad6bcb186bc80e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3190, "upload_time": "2020-03-31T20:37:20", "upload_time_iso_8601": "2020-03-31T20:37:20.111735Z", "url": "https://files.pythonhosted.org/packages/7e/83/6fb7b3de7293d9510d528c90330815d924eba2912820e604a227e8ca5cbe/gstorm-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fcced0ef040e7d717b3fd01bbffbd994", "sha256": "fbd20fe6d1842f15a1fe08d309907a1ce6bd49a914d39a9dcb050175890b9247"}, "downloads": -1, "filename": "gstorm-0.1.2.tar.gz", "has_sig": false, "md5_digest": "fcced0ef040e7d717b3fd01bbffbd994", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2455, "upload_time": "2020-03-31T20:37:21", "upload_time_iso_8601": "2020-03-31T20:37:21.300483Z", "url": "https://files.pythonhosted.org/packages/50/a6/51e9bda277a0d071e0a5c3fdfc53412ea1ab40c8f83ef56a3f5596e15aa0/gstorm-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "aedeb9f2a1192fd034198eb68bec445b", "sha256": "f83130d6015b8d24206533e76d317d8daf0a7ed6081b330d5ade4ec4ebcb6be4"}, "downloads": -1, "filename": "gstorm-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "aedeb9f2a1192fd034198eb68bec445b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8630, "upload_time": "2020-03-31T21:31:05", "upload_time_iso_8601": "2020-03-31T21:31:05.952463Z", "url": "https://files.pythonhosted.org/packages/f4/96/f61be0d6fe87aecb6e5b7692e449130b6f7c805df486e922ef84f715af08/gstorm-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a672f223ffb2e9bbab9f85fc8c4beeea", "sha256": "df4e4997e4d032f7086314f4d6790f8a9f9f16689a2c6b05ec791ab0a46730a5"}, "downloads": -1, "filename": "gstorm-0.1.3.tar.gz", "has_sig": false, "md5_digest": "a672f223ffb2e9bbab9f85fc8c4beeea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6485, "upload_time": "2020-03-31T21:31:07", "upload_time_iso_8601": "2020-03-31T21:31:07.002304Z", "url": "https://files.pythonhosted.org/packages/60/11/00f79147478fbeadd1f9405e4ef6df081b361ea4454a4ffc7d89e1e3ed68/gstorm-0.1.3.tar.gz", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "fcaad83515ddc98bbce51ea0bd7d3a8a", "sha256": "4e4d61a9085e85dedda32079123828fe8a26a8127c3435f93ee17b47838cd456"}, "downloads": -1, "filename": "gstorm-0.2.5-py3-none-any.whl", "has_sig": false, "md5_digest": "fcaad83515ddc98bbce51ea0bd7d3a8a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 22476, "upload_time": "2020-04-08T14:14:07", "upload_time_iso_8601": "2020-04-08T14:14:07.579035Z", "url": "https://files.pythonhosted.org/packages/5a/7c/6b6dd169a1f76950b319a20d452ffff2338e050c9968e4a46437241533e0/gstorm-0.2.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ee1b1ac8daa8060a8ec093ef55a7bb59", "sha256": "12d838174de6c96f398de26e180a12c7c1a2c814068dd6a8bb4dea52aea89073"}, "downloads": -1, "filename": "gstorm-0.2.5.tar.gz", "has_sig": false, "md5_digest": "ee1b1ac8daa8060a8ec093ef55a7bb59", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20551, "upload_time": "2020-04-08T14:14:09", "upload_time_iso_8601": "2020-04-08T14:14:09.014890Z", "url": "https://files.pythonhosted.org/packages/da/0c/6bcdc48d2d961d0e90e208add3f73bc648d6aeef405f82ff0bd6d7af62f3/gstorm-0.2.5.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "3b7fc51369263d7d1dfc89a704cd468f", "sha256": "960e601b0cc6ecd1d3eaaf9ac35ee793a5cd6dbd6e0eb333525107330d557608"}, "downloads": -1, "filename": "gstorm-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3b7fc51369263d7d1dfc89a704cd468f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 22503, "upload_time": "2020-04-09T04:12:30", "upload_time_iso_8601": "2020-04-09T04:12:30.092263Z", "url": "https://files.pythonhosted.org/packages/95/cd/52965c3b40083520a41b63f9e1a87faff1e6226fadf71317829c7deead05/gstorm-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3baccb3cccf089794bad15f086d0ab8d", "sha256": "9d276ddf7987ef2a7a38fd817fa77ae4cfdb0ca061622a0f960b9dc3431aeaf1"}, "downloads": -1, "filename": "gstorm-0.3.0.tar.gz", "has_sig": false, "md5_digest": "3baccb3cccf089794bad15f086d0ab8d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20540, "upload_time": "2020-04-09T04:12:32", "upload_time_iso_8601": "2020-04-09T04:12:32.141002Z", "url": "https://files.pythonhosted.org/packages/95/6c/c1f11cd07e91802fb762a5bdd753177c14134783a4b75fbbc521b7bd6e7b/gstorm-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "1c7d91886ead18cf16f5b4fa96442acf", "sha256": "ba2c4d005d1b834178f1bcefb635956a80b41602df2d85b42547f1c403d7ca99"}, "downloads": -1, "filename": "gstorm-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "1c7d91886ead18cf16f5b4fa96442acf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23305, "upload_time": "2020-04-09T23:00:59", "upload_time_iso_8601": "2020-04-09T23:00:59.375959Z", "url": "https://files.pythonhosted.org/packages/aa/ca/14461dff8d9d1af5c22bebae38ec3be51c3d3f51cdbc348dd37fb4fed6e7/gstorm-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0a31b199f17d23a26dc3c055b20ae769", "sha256": "6be37f1fc2954982f5228bf3c72787be3e53491a316562c045f9a41761d5bad5"}, "downloads": -1, "filename": "gstorm-0.3.1.tar.gz", "has_sig": false, "md5_digest": "0a31b199f17d23a26dc3c055b20ae769", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21450, "upload_time": "2020-04-09T23:01:01", "upload_time_iso_8601": "2020-04-09T23:01:01.003450Z", "url": "https://files.pythonhosted.org/packages/57/99/15c8c682a64cd926368c83589ab37461b66355c56f439ab0b28a666e30d9/gstorm-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "ce7c5176dacf2e1f4ab99fd13af97da3", "sha256": "757345254c24b6189da4acd9d5f462591465142b229a95e483046abd1c121d8c"}, "downloads": -1, "filename": "gstorm-0.3.2-py3-none-any.whl", "has_sig": false, "md5_digest": "ce7c5176dacf2e1f4ab99fd13af97da3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23320, "upload_time": "2020-04-10T14:58:09", "upload_time_iso_8601": "2020-04-10T14:58:09.860372Z", "url": "https://files.pythonhosted.org/packages/c6/8c/119e3d532c23d1ef44ad4d101f23b70d9417789fec160e85083a0afae985/gstorm-0.3.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7b5c6f6e7cedc6caf55e3090545a9d7c", "sha256": "be768c434de701cf356ad7b544e25c5cf444e699d4f039fd2bd1efe3f9057eac"}, "downloads": -1, "filename": "gstorm-0.3.2.tar.gz", "has_sig": false, "md5_digest": "7b5c6f6e7cedc6caf55e3090545a9d7c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21459, "upload_time": "2020-04-10T14:58:11", "upload_time_iso_8601": "2020-04-10T14:58:11.663663Z", "url": "https://files.pythonhosted.org/packages/35/43/8e2ad692d1079132abac636721699e33e17bdf75add5f4ca5b4b5782f87a/gstorm-0.3.2.tar.gz", "yanked": false}], "0.4.5": [{"comment_text": "", "digests": {"md5": "752185cec65810cfda9accaed2c7aae6", "sha256": "d4f79a7510960b84967d1a263173442ed86b0c83c0ffc7b09105e2dc97d898a5"}, "downloads": -1, "filename": "gstorm-0.4.5-py3-none-any.whl", "has_sig": false, "md5_digest": "752185cec65810cfda9accaed2c7aae6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 27232, "upload_time": "2020-04-14T18:32:58", "upload_time_iso_8601": "2020-04-14T18:32:58.092287Z", "url": "https://files.pythonhosted.org/packages/bb/33/3c20e29bf9f2ff23b4d870109b2b0c0fc3c26881a148ada755e3924f8e6a/gstorm-0.4.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "657eb321edadde3f05a5dd62439a20a7", "sha256": "22a3dc7763bbdb39e11bfc659ebd8028f285d284ef4762ac46ff044f6c969ae6"}, "downloads": -1, "filename": "gstorm-0.4.5.tar.gz", "has_sig": false, "md5_digest": "657eb321edadde3f05a5dd62439a20a7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23966, "upload_time": "2020-04-14T18:32:59", "upload_time_iso_8601": "2020-04-14T18:32:59.532160Z", "url": "https://files.pythonhosted.org/packages/ee/92/dfbf5feae477c0bf4fec1c617bc813ae7472447d7bf3430faf9566c54487/gstorm-0.4.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "752185cec65810cfda9accaed2c7aae6", "sha256": "d4f79a7510960b84967d1a263173442ed86b0c83c0ffc7b09105e2dc97d898a5"}, "downloads": -1, "filename": "gstorm-0.4.5-py3-none-any.whl", "has_sig": false, "md5_digest": "752185cec65810cfda9accaed2c7aae6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 27232, "upload_time": "2020-04-14T18:32:58", "upload_time_iso_8601": "2020-04-14T18:32:58.092287Z", "url": "https://files.pythonhosted.org/packages/bb/33/3c20e29bf9f2ff23b4d870109b2b0c0fc3c26881a148ada755e3924f8e6a/gstorm-0.4.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "657eb321edadde3f05a5dd62439a20a7", "sha256": "22a3dc7763bbdb39e11bfc659ebd8028f285d284ef4762ac46ff044f6c969ae6"}, "downloads": -1, "filename": "gstorm-0.4.5.tar.gz", "has_sig": false, "md5_digest": "657eb321edadde3f05a5dd62439a20a7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23966, "upload_time": "2020-04-14T18:32:59", "upload_time_iso_8601": "2020-04-14T18:32:59.532160Z", "url": "https://files.pythonhosted.org/packages/ee/92/dfbf5feae477c0bf4fec1c617bc813ae7472447d7bf3430faf9566c54487/gstorm-0.4.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:53:36 2020"}