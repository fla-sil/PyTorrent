{"info": {"author": "Kamal Mustafa", "author_email": "kamal.mustafa@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Framework :: Buildout :: Recipe", "Intended Audience :: Developers", "Intended Audience :: System Administrators", "License :: OSI Approved :: Zope Public License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.4", "Programming Language :: Python :: 2.5", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3"], "description": "Introduction\n============\n\n''mk.recipe.modwsgi'' is a `zc.buildout`_ recipe which creates\nentry point for mod_wsgi_. It's based on ''collective.recipe.modwsgi''\nbut I decided to create it after failed to find recipe that generate\nplain `mod_wsgi`_ script instead of one that use Paste.\n\nIt is very simple to use. This is a minimal ''buildout.cfg'' file\nwhich creates a WSGI script mod_python can use::\n\n    [buildout]\n    parts = mywsgiapp\n\n    [mywsgiapp]\n    recipe = mk.recipe.modwsgi\n    eggs = mywsgiapp\n    wsgi-module = mywsgiapp.wsgi\n\nThis will create a small python script in parts/mywsgiapp called\n''wsgi'' which mod_wsgi can load. You can also use the optional\n''extra-paths'' option to specify extra paths that are added to\nthe python system path. The script will import `application` attribute\nfrom the `wsgi-module` specified.\n\nThe apache configuration for this buildout looks like this::\n\n    WSGIScriptAlias /mysite /home/me/buildout/parts/mywsgiapp/wsgi\n\n    <Directory /home/me/buildout>\n        Order deny,allow\n        Allow from all\n    </Directory>\n\nIf the python script must be accessed from somewhere else than the buildout\nparts folder, you can use the optional ''target'' option to tell the recipe\nwhere the script should be created.\n\nFor instance, the configuration for the mywsgiapp part could look like this::\n\n    [mywsgiapp]\n    recipe = collective.recipe.modwsgi\n    eggs = mywsgiapp\n    target = /var/www/myapp.wsgi\n    wsgi-module = mywsgiapp.wsgi\n\nThe recipe would then create the script at /var/www/myapp.wsgi.\n\nNote that the directory containing the target script must already exist on\nthe filesystem prior to running the recipe and be writeable.\n\nThe apache configuration for this buildout would then look like this::\n\n    WSGIScriptAlias /mysite /var/www/myapp.wsgi\n\n    <Directory /var/www>\n        Order deny,allow\n        Allow from all\n    </Directory>\n\nThis recipe does not fully install packages, which means that console scripts\nwill not be created. If you need console scripts you can add a second\nbuildout part which uses `z3c.recipe.scripts`_ to do a full install.\n\n.. _zc.buildout: http://pypi.python.org/pypi/zc.buildout\n.. _paste.deploy: http://pythonpaste.org/deploy/\n.. _mod_wsgi: http://code.google.com/p/modwsgi/\n.. _z3c.recipe.scripts: http://pypi.python.org/pypi/z3c.recipe.scripts", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/k4ml/mk.recipe.modwsgi", "keywords": "wsgi buildout", "license": "ZPL", "maintainer": null, "maintainer_email": null, "name": "mk.recipe.modwsgi", "package_url": "https://pypi.org/project/mk.recipe.modwsgi/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/mk.recipe.modwsgi/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/k4ml/mk.recipe.modwsgi"}, "release_url": "https://pypi.org/project/mk.recipe.modwsgi/0.1/", "requires_dist": null, "requires_python": null, "summary": "WSGI from buildout", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>\u2018\u2019mk.recipe.modwsgi\u2019\u2019 is a <a href=\"http://pypi.python.org/pypi/zc.buildout\" rel=\"nofollow\">zc.buildout</a> recipe which creates\nentry point for <a href=\"http://code.google.com/p/modwsgi/\" rel=\"nofollow\">mod_wsgi</a>. It\u2019s based on \u2018\u2019collective.recipe.modwsgi\u2019\u2019\nbut I decided to create it after failed to find recipe that generate\nplain <a href=\"http://code.google.com/p/modwsgi/\" rel=\"nofollow\">mod_wsgi</a> script instead of one that use Paste.</p>\n<p>It is very simple to use. This is a minimal \u2018\u2019buildout.cfg\u2019\u2019 file\nwhich creates a WSGI script mod_python can use:</p>\n<pre>[buildout]\nparts = mywsgiapp\n\n[mywsgiapp]\nrecipe = mk.recipe.modwsgi\neggs = mywsgiapp\nwsgi-module = mywsgiapp.wsgi\n</pre>\n<p>This will create a small python script in parts/mywsgiapp called\n\u2018\u2019wsgi\u2019\u2019 which mod_wsgi can load. You can also use the optional\n\u2018\u2019extra-paths\u2019\u2019 option to specify extra paths that are added to\nthe python system path. The script will import <cite>application</cite> attribute\nfrom the <cite>wsgi-module</cite> specified.</p>\n<p>The apache configuration for this buildout looks like this:</p>\n<pre>WSGIScriptAlias /mysite /home/me/buildout/parts/mywsgiapp/wsgi\n\n&lt;Directory /home/me/buildout&gt;\n    Order deny,allow\n    Allow from all\n&lt;/Directory&gt;\n</pre>\n<p>If the python script must be accessed from somewhere else than the buildout\nparts folder, you can use the optional \u2018\u2019target\u2019\u2019 option to tell the recipe\nwhere the script should be created.</p>\n<p>For instance, the configuration for the mywsgiapp part could look like this:</p>\n<pre>[mywsgiapp]\nrecipe = collective.recipe.modwsgi\neggs = mywsgiapp\ntarget = /var/www/myapp.wsgi\nwsgi-module = mywsgiapp.wsgi\n</pre>\n<p>The recipe would then create the script at /var/www/myapp.wsgi.</p>\n<p>Note that the directory containing the target script must already exist on\nthe filesystem prior to running the recipe and be writeable.</p>\n<p>The apache configuration for this buildout would then look like this:</p>\n<pre>WSGIScriptAlias /mysite /var/www/myapp.wsgi\n\n&lt;Directory /var/www&gt;\n    Order deny,allow\n    Allow from all\n&lt;/Directory&gt;\n</pre>\n<p>This recipe does not fully install packages, which means that console scripts\nwill not be created. If you need console scripts you can add a second\nbuildout part which uses <a href=\"http://pypi.python.org/pypi/z3c.recipe.scripts\" rel=\"nofollow\">z3c.recipe.scripts</a> to do a full install.</p>\n\n          </div>"}, "last_serial": 794848, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "cf93b0efe145cd84f4d4c750fe0cd1a2", "sha256": "ae3ef7b99cb4c598353a645997f4f9fdf144f2f578e33d78dde547ba13c82009"}, "downloads": -1, "filename": "mk.recipe.modwsgi-0.1.tar.gz", "has_sig": false, "md5_digest": "cf93b0efe145cd84f4d4c750fe0cd1a2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4800, "upload_time": "2013-05-02T21:58:52", "upload_time_iso_8601": "2013-05-02T21:58:52.771456Z", "url": "https://files.pythonhosted.org/packages/e0/8c/a7872a5e622c40a3cfa202eca6aa73669b640e58bd572955e38c76b76be6/mk.recipe.modwsgi-0.1.tar.gz", "yanked": false}], "dev": []}, "urls": [{"comment_text": "", "digests": {"md5": "cf93b0efe145cd84f4d4c750fe0cd1a2", "sha256": "ae3ef7b99cb4c598353a645997f4f9fdf144f2f578e33d78dde547ba13c82009"}, "downloads": -1, "filename": "mk.recipe.modwsgi-0.1.tar.gz", "has_sig": false, "md5_digest": "cf93b0efe145cd84f4d4c750fe0cd1a2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4800, "upload_time": "2013-05-02T21:58:52", "upload_time_iso_8601": "2013-05-02T21:58:52.771456Z", "url": "https://files.pythonhosted.org/packages/e0/8c/a7872a5e622c40a3cfa202eca6aa73669b640e58bd572955e38c76b76be6/mk.recipe.modwsgi-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:53:42 2020"}