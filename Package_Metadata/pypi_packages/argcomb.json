{"info": {"author": "Percy Liang", "author_email": "percyliang@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Quickstart\n\nargcomb (argument combiner) is a simple utility that allows you to build\ncomplex command-line arguments in a modular fashion.\n\nTo install it:\n\n    pip install argcomb\n\nSuppose we want to run the following combination of commands (e.g., if you're\ndoing a hyperparameter sweep):\n\n    echo train --eta 0.1 --num-iters 5 --greedy\n    echo train --eta 0.1 --num-iters 5\n    echo train --eta 0.1 --num-iters 10 --greedy\n    echo train --eta 0.1 --num-iters 10\n\nYou can write the following `argcomb` program (called `example1.py` in this repo):\n\n    from argcomb import *\n\n    run(\n        \"echo\", \"train\",\n        arg(\"eta\", 0.1),\n        selarg(None, \"num-iters\", 5, 10),\n        sel(None, [], arg(\"greedy\")),\n    )\n\nHere `run` takes a (hierarchical) list of arguments to be concatenated.\nSpecial functions like `sel` allow us to specify the selection/iteration over\nmultiple possible values in place (as opposed to having a big for loop on the\noutside).\n\nTo run it:\n\n    # Actually executes the commands\n    python example1.py\n\n    # Print out the commands rather than execute them\n    python example1.py -n\n\nWe can also use environment variables (e.g., `@mode`) to parametrize the runs.\nFor example:\n\n    from argcomb import *\n\n    run(\n        \"echo\", \"train\",\n        let_if_undefined(\"@mode\", \"slow\"),  # Set default\n        sel(\"@mode\", {\n            \"fast\": [arg(\"num-iters\", 5), arg(\"greedy\")],\n            \"slow\": arg(\"num-iters\", 10),\n        }),\n        arg(\"output\", fmt(\"@mode.out\")),\n    )\n\nTo run it:\n\n    python example.py             # slow (default)\n    python example.py @mode=fast  # fast\n\n# Development\n\nHandy commands:\n\n    # Install environment\n    virtualenv -p python3.7 venv\n    venv/bin/pip install -r requirements.txt\n\n    # Format code (skip `example*.py`)\n    venv/bin/black -t py37 argcomb test_argcomb.py\n\n    # Do type checking\n    venv/bin/python -m mypy argcomb test_argcomb.py example*.py\n\n    # Run unit tests\n    venv/bin/python -m pytest test_argcomb.py\n\n    # Build PyPI package and deploy it\n    venv/bin/python setup.py sdist\n    venv/bin/twine upload dist/*", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/percyliang/argcomb", "keywords": "command-line", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "argcomb", "package_url": "https://pypi.org/project/argcomb/", "platform": "", "project_url": "https://pypi.org/project/argcomb/", "project_urls": {"Homepage": "https://github.com/percyliang/argcomb"}, "release_url": "https://pypi.org/project/argcomb/1.0.1/", "requires_dist": null, "requires_python": ">=3.6", "summary": "A simple library for building command-line arguments", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Quickstart</h1>\n<p>argcomb (argument combiner) is a simple utility that allows you to build\ncomplex command-line arguments in a modular fashion.</p>\n<p>To install it:</p>\n<pre><code>pip install argcomb\n</code></pre>\n<p>Suppose we want to run the following combination of commands (e.g., if you're\ndoing a hyperparameter sweep):</p>\n<pre><code>echo train --eta 0.1 --num-iters 5 --greedy\necho train --eta 0.1 --num-iters 5\necho train --eta 0.1 --num-iters 10 --greedy\necho train --eta 0.1 --num-iters 10\n</code></pre>\n<p>You can write the following <code>argcomb</code> program (called <code>example1.py</code> in this repo):</p>\n<pre><code>from argcomb import *\n\nrun(\n    \"echo\", \"train\",\n    arg(\"eta\", 0.1),\n    selarg(None, \"num-iters\", 5, 10),\n    sel(None, [], arg(\"greedy\")),\n)\n</code></pre>\n<p>Here <code>run</code> takes a (hierarchical) list of arguments to be concatenated.\nSpecial functions like <code>sel</code> allow us to specify the selection/iteration over\nmultiple possible values in place (as opposed to having a big for loop on the\noutside).</p>\n<p>To run it:</p>\n<pre><code># Actually executes the commands\npython example1.py\n\n# Print out the commands rather than execute them\npython example1.py -n\n</code></pre>\n<p>We can also use environment variables (e.g., <code>@mode</code>) to parametrize the runs.\nFor example:</p>\n<pre><code>from argcomb import *\n\nrun(\n    \"echo\", \"train\",\n    let_if_undefined(\"@mode\", \"slow\"),  # Set default\n    sel(\"@mode\", {\n        \"fast\": [arg(\"num-iters\", 5), arg(\"greedy\")],\n        \"slow\": arg(\"num-iters\", 10),\n    }),\n    arg(\"output\", fmt(\"@mode.out\")),\n)\n</code></pre>\n<p>To run it:</p>\n<pre><code>python example.py             # slow (default)\npython example.py @mode=fast  # fast\n</code></pre>\n<h1>Development</h1>\n<p>Handy commands:</p>\n<pre><code># Install environment\nvirtualenv -p python3.7 venv\nvenv/bin/pip install -r requirements.txt\n\n# Format code (skip `example*.py`)\nvenv/bin/black -t py37 argcomb test_argcomb.py\n\n# Do type checking\nvenv/bin/python -m mypy argcomb test_argcomb.py example*.py\n\n# Run unit tests\nvenv/bin/python -m pytest test_argcomb.py\n\n# Build PyPI package and deploy it\nvenv/bin/python setup.py sdist\nvenv/bin/twine upload dist/*\n</code></pre>\n\n          </div>"}, "last_serial": 6940378, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "795a46df7bd54d60bef47d0ed099dd51", "sha256": "acdd0dff88d4d347980f4aaf741f435ec40e99e78d37743d52bd5f82d127e1ee"}, "downloads": -1, "filename": "argcomb-1.0.0.tar.gz", "has_sig": false, "md5_digest": "795a46df7bd54d60bef47d0ed099dd51", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5336, "upload_time": "2020-03-25T03:20:32", "upload_time_iso_8601": "2020-03-25T03:20:32.771141Z", "url": "https://files.pythonhosted.org/packages/a1/76/19bb2768191d775c6812c06316e470cbff93585bc6ff9ee8fbe5672c2f51/argcomb-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "5548561fe679a0c8348b6e2190d8482d", "sha256": "c5d884f80e3c2071f6d5b910960d666a16dbac5e7f3b5d6fd5b800ae0d78e77e"}, "downloads": -1, "filename": "argcomb-1.0.1.tar.gz", "has_sig": false, "md5_digest": "5548561fe679a0c8348b6e2190d8482d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5411, "upload_time": "2020-04-03T02:16:57", "upload_time_iso_8601": "2020-04-03T02:16:57.022407Z", "url": "https://files.pythonhosted.org/packages/de/66/e8fd90b282bc6153f89718967dd19d786485c9570b97b15a8dfc4337c8d9/argcomb-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5548561fe679a0c8348b6e2190d8482d", "sha256": "c5d884f80e3c2071f6d5b910960d666a16dbac5e7f3b5d6fd5b800ae0d78e77e"}, "downloads": -1, "filename": "argcomb-1.0.1.tar.gz", "has_sig": false, "md5_digest": "5548561fe679a0c8348b6e2190d8482d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5411, "upload_time": "2020-04-03T02:16:57", "upload_time_iso_8601": "2020-04-03T02:16:57.022407Z", "url": "https://files.pythonhosted.org/packages/de/66/e8fd90b282bc6153f89718967dd19d786485c9570b97b15a8dfc4337c8d9/argcomb-1.0.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:17:19 2020"}