{"info": {"author": "Peter Baumgartner", "author_email": "pete@lincolnloop.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Django", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "# django-alive \ud83d\udd7a\n\n[![tests](https://img.shields.io/travis/lincolnloop/django-alive/master.svg)](https://travis-ci.org/lincolnloop/django-alive)\n[![coverage](https://img.shields.io/codacy/coverage/5d539d4956a44f55aec632f3a43ee6c1.svg)](https://app.codacy.com/project/ipmb/django-alive/dashboard)\n[![PyPI](https://img.shields.io/pypi/v/django-alive.svg)](https://pypi.org/project/django-alive/)\n![Python Versions](https://img.shields.io/pypi/pyversions/django-alive.svg)\n\nProvides two healthcheck endpoints for your Django application:\n\n### Alive\n\nVerifies the WSGI server is responding.\n\n* Default URL: `/-/alive/`\n* Success:\n    * status code: `200`\n    * content: `ok`\n* Failure: This view never returns a failure. A failure would mean your WSGI server is not running.\n\n### Health\n\nVerifies services are ready.\n\n* Default URL: `/-/health/`\n* Success:\n    * status_code: `200`\n    * content: `{\"healthy\": true}`\n* Failure:\n    * status_code: `503`\n    * content: `{\"healthy\": false, \"errors\": [\"error 1\", \"error 2\"]}`\n\nBy default the health endpoint will test the database connection, but can be configured to check the cache, staticfiles, or any additional custom checks.\n\nSupports Django 1.10+ on both Python 2 & 3.\n\n## Install\n\n```\npip install django-alive\n```\n\n## Configure\n\nAdd this to your project's `urlpatterns`:\n\n```python\npath(\"-/\", include(\"django_alive.urls\"))\n```\n\nFor versions before Django 2.0, use:\n\n```python\nurl(r\"-/\", include(\"django_alive.urls\"))\n```\n\nIf you wish to use the `healthcheck` [management command](#management-command), add\n`django_alive` to the `INSTALLED_APPS`.\n\n## Enabling Checks\n\nThe default \"health\" endpoint will test a simple `SELECT 1` query on the database. Additional checks can be enabled in your Django settings.\n\nUse the `ALIVE_CHECKS` setting to configure the checks to include. It is a dictionary with the path to a Python function as a key and any keyword arguments to pass to that function as a value. A full example:\n\n```python\nALIVE_CHECKS = {\n    \"django_alive.checks.check_database\": {},\n    \"django_alive.checks.check_staticfile\": {\n        \"filename\": \"img/favicon.ico\",\n    },\n    \"django_alive.checks.check_cache\": {\n        \"cache\": \"session\",\n        \"key\": \"test123\",\n    },\n    \"django_alive.checks.check_migrations\": {},\n}\n\n```\n\n### Built-in Checks\n\nDefined in `django_alive.checks`.\n\n```python\ndef check_cache(key=\"django-alive\", cache=\"default\")\n```\n\nFetch a cache key against the specified cache.\n\n#### Parameters:\n\n- `key` (`str`):  Cache key to fetch (does not need to exist)\n- `cache` (`str`):  Cache alias to execute against\n\n---\n\n```python\ndef check_database(query=\"SELECT 1\", database=\"default\")\n```\n\nRun a SQL query against the specified database.\n\n#### Parameters:\n\n- `query` (`str`):  SQL to execute\n- `database` (`str`):  Database alias to execute against\n\n---\n\n```python\ndef check_migrations(alias=None)\n```\n\nVerify all defined migrations have been applied\n\n#### Parameters:\n\n- `alias` (`str`):  An optional database alias (default: check all defined databases)\n\n---\n\n```python\ndef check_staticfile(filename)\n```\n\nVerify a static file is reachable\n\n#### Parameters:\n\n- `filename` (`str`):  static file to verify\n\n## Management Command\n\nIn addition to the view, the configured healthchecks can also be run via a management command with `manage.py healthcheck`. This will exit with an error code if all the healthchecks do not pass.\n\n## Custom Checks\n\n`django-alive` is designed to easily extend with your own custom checks. Simply define a function which performs your check and raises a `django_alive.HealthcheckFailure` exception in the event of a failure. See [`checks.py`](https://github.com/lincolnloop/django-alive/blob/master/django_alive/checks.py) for some examples on how to write a check.\n\n## Disabling `ALLOWED_HOSTS` for Healthchecks\n\nOften, load balancers will not pass a `Host` header when probing a healthcheck endpoint. This presents a problem for [Django's host header validation](https://docs.djangoproject.com/en/2.1/topics/security/#host-headers-virtual-hosting). A middleware is included that will turn off the host checking only for the healthcheck endpoints. This is safe since these views never do anything with the `Host` header.\n\nEnable the middleware by inserting this **at the beginning** of your `MIDDLEWARE`:\n\n```python\nMIDDLEWARE = [\n    \"django_alive.middleware.healthcheck_bypass_host_check\",\n    # ...\n]\n```\n\n## Handling `SECURE_SSL_REDIRECT`\n\nIf your load balancer is doing HTTPS termination and you have `SECURE_SSL_REDIRECT=True` in your settings, you want to make sure that your healtcheck URLs are not also redirected to HTTPS. In that case, add the following to your settings:\n\n```python\nSECURE_REDIRECT_EXEMPT = [r\"^-/\"]  # django-alive URLs\n```\n\n1.1.0 (2019-11-06)\n------------------\n\n* Added `healthcheck` management command\n* Added optional `check_migrations` healthcheck\n\n\n1.0.1 (2018-09-10)\n------------------\n\n* Documentation improvements\n* Python 3.7 support\n\n\n1.0.0 (2018-08-21)\n------------------\n\n* Initial release\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/lincolnloop/django-alive/", "keywords": "django,healtcheck,alive", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "django-alive", "package_url": "https://pypi.org/project/django-alive/", "platform": "", "project_url": "https://pypi.org/project/django-alive/", "project_urls": {"Homepage": "https://github.com/lincolnloop/django-alive/"}, "release_url": "https://pypi.org/project/django-alive/1.1.0/", "requires_dist": ["django", "pytest ; extra == 'test'", "pytest-cov ; extra == 'test'", "pytest-django ; extra == 'test'", "mock ; (python_version < \"3\") and extra == 'test'"], "requires_python": "", "summary": "Healtchecks for Django", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>django-alive \ud83d\udd7a</h1>\n<p><a href=\"https://travis-ci.org/lincolnloop/django-alive\" rel=\"nofollow\"><img alt=\"tests\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b483bb250ff5d0ec68557740451fdcfe3dc987cb/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f6c696e636f6c6e6c6f6f702f646a616e676f2d616c6976652f6d61737465722e737667\"></a>\n<a href=\"https://app.codacy.com/project/ipmb/django-alive/dashboard\" rel=\"nofollow\"><img alt=\"coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9c6656a6aebaee96d92794ece43a0f23b36c178b/68747470733a2f2f696d672e736869656c64732e696f2f636f646163792f636f7665726167652f35643533396434393536613434663535616563363332663361343365653663312e737667\"></a>\n<a href=\"https://pypi.org/project/django-alive/\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e84690facdac7a0cfe3d7662350429067fef58c1/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f646a616e676f2d616c6976652e737667\"></a>\n<img alt=\"Python Versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/41a527a352b9584e0da514b3a1464eacc3a956a6/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f646a616e676f2d616c6976652e737667\"></p>\n<p>Provides two healthcheck endpoints for your Django application:</p>\n<h3>Alive</h3>\n<p>Verifies the WSGI server is responding.</p>\n<ul>\n<li>Default URL: <code>/-/alive/</code></li>\n<li>Success:\n<ul>\n<li>status code: <code>200</code></li>\n<li>content: <code>ok</code></li>\n</ul>\n</li>\n<li>Failure: This view never returns a failure. A failure would mean your WSGI server is not running.</li>\n</ul>\n<h3>Health</h3>\n<p>Verifies services are ready.</p>\n<ul>\n<li>Default URL: <code>/-/health/</code></li>\n<li>Success:\n<ul>\n<li>status_code: <code>200</code></li>\n<li>content: <code>{\"healthy\": true}</code></li>\n</ul>\n</li>\n<li>Failure:\n<ul>\n<li>status_code: <code>503</code></li>\n<li>content: <code>{\"healthy\": false, \"errors\": [\"error 1\", \"error 2\"]}</code></li>\n</ul>\n</li>\n</ul>\n<p>By default the health endpoint will test the database connection, but can be configured to check the cache, staticfiles, or any additional custom checks.</p>\n<p>Supports Django 1.10+ on both Python 2 &amp; 3.</p>\n<h2>Install</h2>\n<pre><code>pip install django-alive\n</code></pre>\n<h2>Configure</h2>\n<p>Add this to your project's <code>urlpatterns</code>:</p>\n<pre><span class=\"n\">path</span><span class=\"p\">(</span><span class=\"s2\">\"-/\"</span><span class=\"p\">,</span> <span class=\"n\">include</span><span class=\"p\">(</span><span class=\"s2\">\"django_alive.urls\"</span><span class=\"p\">))</span>\n</pre>\n<p>For versions before Django 2.0, use:</p>\n<pre><span class=\"n\">url</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">\"-/\"</span><span class=\"p\">,</span> <span class=\"n\">include</span><span class=\"p\">(</span><span class=\"s2\">\"django_alive.urls\"</span><span class=\"p\">))</span>\n</pre>\n<p>If you wish to use the <code>healthcheck</code> <a href=\"#management-command\" rel=\"nofollow\">management command</a>, add\n<code>django_alive</code> to the <code>INSTALLED_APPS</code>.</p>\n<h2>Enabling Checks</h2>\n<p>The default \"health\" endpoint will test a simple <code>SELECT 1</code> query on the database. Additional checks can be enabled in your Django settings.</p>\n<p>Use the <code>ALIVE_CHECKS</code> setting to configure the checks to include. It is a dictionary with the path to a Python function as a key and any keyword arguments to pass to that function as a value. A full example:</p>\n<pre><span class=\"n\">ALIVE_CHECKS</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"django_alive.checks.check_database\"</span><span class=\"p\">:</span> <span class=\"p\">{},</span>\n    <span class=\"s2\">\"django_alive.checks.check_staticfile\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"filename\"</span><span class=\"p\">:</span> <span class=\"s2\">\"img/favicon.ico\"</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n    <span class=\"s2\">\"django_alive.checks.check_cache\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"cache\"</span><span class=\"p\">:</span> <span class=\"s2\">\"session\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"key\"</span><span class=\"p\">:</span> <span class=\"s2\">\"test123\"</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n    <span class=\"s2\">\"django_alive.checks.check_migrations\"</span><span class=\"p\">:</span> <span class=\"p\">{},</span>\n<span class=\"p\">}</span>\n</pre>\n<h3>Built-in Checks</h3>\n<p>Defined in <code>django_alive.checks</code>.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">check_cache</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s2\">\"django-alive\"</span><span class=\"p\">,</span> <span class=\"n\">cache</span><span class=\"o\">=</span><span class=\"s2\">\"default\"</span><span class=\"p\">)</span>\n</pre>\n<p>Fetch a cache key against the specified cache.</p>\n<h4>Parameters:</h4>\n<ul>\n<li><code>key</code> (<code>str</code>):  Cache key to fetch (does not need to exist)</li>\n<li><code>cache</code> (<code>str</code>):  Cache alias to execute against</li>\n</ul>\n<hr>\n<pre><span class=\"k\">def</span> <span class=\"nf\">check_database</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"o\">=</span><span class=\"s2\">\"SELECT 1\"</span><span class=\"p\">,</span> <span class=\"n\">database</span><span class=\"o\">=</span><span class=\"s2\">\"default\"</span><span class=\"p\">)</span>\n</pre>\n<p>Run a SQL query against the specified database.</p>\n<h4>Parameters:</h4>\n<ul>\n<li><code>query</code> (<code>str</code>):  SQL to execute</li>\n<li><code>database</code> (<code>str</code>):  Database alias to execute against</li>\n</ul>\n<hr>\n<pre><span class=\"k\">def</span> <span class=\"nf\">check_migrations</span><span class=\"p\">(</span><span class=\"n\">alias</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</pre>\n<p>Verify all defined migrations have been applied</p>\n<h4>Parameters:</h4>\n<ul>\n<li><code>alias</code> (<code>str</code>):  An optional database alias (default: check all defined databases)</li>\n</ul>\n<hr>\n<pre><span class=\"k\">def</span> <span class=\"nf\">check_staticfile</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">)</span>\n</pre>\n<p>Verify a static file is reachable</p>\n<h4>Parameters:</h4>\n<ul>\n<li><code>filename</code> (<code>str</code>):  static file to verify</li>\n</ul>\n<h2>Management Command</h2>\n<p>In addition to the view, the configured healthchecks can also be run via a management command with <code>manage.py healthcheck</code>. This will exit with an error code if all the healthchecks do not pass.</p>\n<h2>Custom Checks</h2>\n<p><code>django-alive</code> is designed to easily extend with your own custom checks. Simply define a function which performs your check and raises a <code>django_alive.HealthcheckFailure</code> exception in the event of a failure. See <a href=\"https://github.com/lincolnloop/django-alive/blob/master/django_alive/checks.py\" rel=\"nofollow\"><code>checks.py</code></a> for some examples on how to write a check.</p>\n<h2>Disabling <code>ALLOWED_HOSTS</code> for Healthchecks</h2>\n<p>Often, load balancers will not pass a <code>Host</code> header when probing a healthcheck endpoint. This presents a problem for <a href=\"https://docs.djangoproject.com/en/2.1/topics/security/#host-headers-virtual-hosting\" rel=\"nofollow\">Django's host header validation</a>. A middleware is included that will turn off the host checking only for the healthcheck endpoints. This is safe since these views never do anything with the <code>Host</code> header.</p>\n<p>Enable the middleware by inserting this <strong>at the beginning</strong> of your <code>MIDDLEWARE</code>:</p>\n<pre><span class=\"n\">MIDDLEWARE</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s2\">\"django_alive.middleware.healthcheck_bypass_host_check\"</span><span class=\"p\">,</span>\n    <span class=\"c1\"># ...</span>\n<span class=\"p\">]</span>\n</pre>\n<h2>Handling <code>SECURE_SSL_REDIRECT</code></h2>\n<p>If your load balancer is doing HTTPS termination and you have <code>SECURE_SSL_REDIRECT=True</code> in your settings, you want to make sure that your healtcheck URLs are not also redirected to HTTPS. In that case, add the following to your settings:</p>\n<pre><span class=\"n\">SECURE_REDIRECT_EXEMPT</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sa\">r</span><span class=\"s2\">\"^-/\"</span><span class=\"p\">]</span>  <span class=\"c1\"># django-alive URLs</span>\n</pre>\n<h2>1.1.0 (2019-11-06)</h2>\n<ul>\n<li>Added <code>healthcheck</code> management command</li>\n<li>Added optional <code>check_migrations</code> healthcheck</li>\n</ul>\n<h2>1.0.1 (2018-09-10)</h2>\n<ul>\n<li>Documentation improvements</li>\n<li>Python 3.7 support</li>\n</ul>\n<h2>1.0.0 (2018-08-21)</h2>\n<ul>\n<li>Initial release</li>\n</ul>\n\n          </div>"}, "last_serial": 6084724, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "644788918b0ebc9b9f1548703ba4ef6e", "sha256": "3f281b7e9ff93598ce9b1af46012a34372845a9e0c6c3cb49981cadf06a09d18"}, "downloads": -1, "filename": "django_alive-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "644788918b0ebc9b9f1548703ba4ef6e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 7381, "upload_time": "2018-08-22T06:08:20", "upload_time_iso_8601": "2018-08-22T06:08:20.662020Z", "url": "https://files.pythonhosted.org/packages/5a/b0/a82b06b005ea2322df79baf13fcc73ff4027fecfc2a67b08683a04b91bae/django_alive-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "61c71e93653699c13bd43edb09a77d51", "sha256": "72d9e12e62add240b440bc366b1b7eb871d8a3637817de8e7bbdc27db9751992"}, "downloads": -1, "filename": "django-alive-1.0.0.tar.gz", "has_sig": false, "md5_digest": "61c71e93653699c13bd43edb09a77d51", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5139, "upload_time": "2018-08-22T06:08:19", "upload_time_iso_8601": "2018-08-22T06:08:19.392589Z", "url": "https://files.pythonhosted.org/packages/62/25/8fba65bedd2600141b9dcec94fc53e81425f5b787d03ce11474e35f5f584/django-alive-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "0742d104be61d144a5bf549aaed44177", "sha256": "736101cb61079390af6fcef6541ccd2dab2d9cbf7a63cf50fec9d81c2c879152"}, "downloads": -1, "filename": "django_alive-1.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0742d104be61d144a5bf549aaed44177", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 7575, "upload_time": "2018-09-10T16:21:14", "upload_time_iso_8601": "2018-09-10T16:21:14.349866Z", "url": "https://files.pythonhosted.org/packages/8e/d3/ab93e51c502ecf68fdd5a295727b39cb4ca832e780342b77dd061779e7f4/django_alive-1.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2c60fbbd73ada08c97c03f970d44b9d2", "sha256": "38627f71d08fa096fbb7a95932af16af3996681147d2af29af0acbe94bc71288"}, "downloads": -1, "filename": "django-alive-1.0.1.tar.gz", "has_sig": false, "md5_digest": "2c60fbbd73ada08c97c03f970d44b9d2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5364, "upload_time": "2018-09-10T16:21:13", "upload_time_iso_8601": "2018-09-10T16:21:13.181709Z", "url": "https://files.pythonhosted.org/packages/d8/54/dc452b28b2d422dec848ad7163c9a6040c7a7121db17590f5e4f25e6be36/django-alive-1.0.1.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "650fd1432045433091622c4ed3aa52db", "sha256": "b4a3cb39122d57ad1d536709167987affc5bd0826d95f026e64e81ecd92e2f4c"}, "downloads": -1, "filename": "django_alive-1.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "650fd1432045433091622c4ed3aa52db", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 11205, "upload_time": "2019-11-06T04:36:54", "upload_time_iso_8601": "2019-11-06T04:36:54.733067Z", "url": "https://files.pythonhosted.org/packages/aa/73/2a742a312b05effeb0a76a61118cb090c647fdfea9594097c6d74c6c2fe7/django_alive-1.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7db66b685a9631c6f2aaf803e455b699", "sha256": "78c9d6ec4b6a611107ed282ab6c5c05bc558acddcd8fa653c9650e57eca0c67a"}, "downloads": -1, "filename": "django-alive-1.1.0.tar.gz", "has_sig": false, "md5_digest": "7db66b685a9631c6f2aaf803e455b699", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7625, "upload_time": "2019-11-06T04:36:56", "upload_time_iso_8601": "2019-11-06T04:36:56.127155Z", "url": "https://files.pythonhosted.org/packages/4d/0c/ddbf62e0b34d11ae7f8d7fd21c16eb33d60aaabbc6517d01c8e89c46f131/django-alive-1.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "650fd1432045433091622c4ed3aa52db", "sha256": "b4a3cb39122d57ad1d536709167987affc5bd0826d95f026e64e81ecd92e2f4c"}, "downloads": -1, "filename": "django_alive-1.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "650fd1432045433091622c4ed3aa52db", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 11205, "upload_time": "2019-11-06T04:36:54", "upload_time_iso_8601": "2019-11-06T04:36:54.733067Z", "url": "https://files.pythonhosted.org/packages/aa/73/2a742a312b05effeb0a76a61118cb090c647fdfea9594097c6d74c6c2fe7/django_alive-1.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7db66b685a9631c6f2aaf803e455b699", "sha256": "78c9d6ec4b6a611107ed282ab6c5c05bc558acddcd8fa653c9650e57eca0c67a"}, "downloads": -1, "filename": "django-alive-1.1.0.tar.gz", "has_sig": false, "md5_digest": "7db66b685a9631c6f2aaf803e455b699", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7625, "upload_time": "2019-11-06T04:36:56", "upload_time_iso_8601": "2019-11-06T04:36:56.127155Z", "url": "https://files.pythonhosted.org/packages/4d/0c/ddbf62e0b34d11ae7f8d7fd21c16eb33d60aaabbc6517d01c8e89c46f131/django-alive-1.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:37:43 2020"}