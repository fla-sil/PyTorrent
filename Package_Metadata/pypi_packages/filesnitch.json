{"info": {"author": "Adrian S.-W. Tam", "author_email": "adrian.sw.tam @ gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Software Development", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# FileSnitch\n\n[![PyPi Version](https://img.shields.io/pypi/v/filesnitch.svg)](https://pypi.python.org/pypi/filesnitch/)\n[![PyPi Licence](https://img.shields.io/pypi/l/filesnitch.svg)](https://pypi.python.org/pypi/filesnitch/)\n[![PyPi Python Versions](https://img.shields.io/pypi/pyversions/filesnitch.svg)](https://pypi.python.org/pypi/filesnitch/)\n[![PyPi Downloads](http://pepy.tech/badge/filesnitch)](http://pepy.tech/project/filesnitch)\n[![Python Versions](https://img.shields.io/pypi/pyversions/filesnitch.svg)](https://pypi.python.org/pypi/filesnitch/)\n\nThis is a module allows you to concatenate multiple files on the fly and\npresent as a single read-only file object.\n\n## Introduction\n\nIn Python Standard Libarary, there is a module `fileinput` which provides\nsimilar function but useful only for text input, supporting only the\n`readline()` function. That module does not support rewinding as well.\n\nThis module, `filesnitch` allows one to `seek()` and `read()` files. A typical\nuse case is a multipart zip file. For example, we have multiple files:\n`foo.zip.001`, `foo.zip.002`, `foo.zip.003`. To extract some file from it, we\nshould combine them with the following shell command\n\n    cat foo.zip.001 foo.zip.002 foo.zip.003 > foo.zip\n\nAfterwards we can use it, for example using `zipfile` module in Python\n\n```python\nimport zipfile\nwith zipfile.ZipFile(\"foo.zip\") as zipfp:\n    for zipinfo in zipfp.infolist():\n        print(\"File {} size {}\".format(zipinfo.filename, zipinfo.file_size))\n```\n\nWith this module, we can avoid creating a combined file but use the chunks directly:\n\n```python\nimport zipfile\nimport filesnitch\n\nwith filesnitch.input(files=[\"foo.zip.001\", \"foo.zip.002\", \"foo.zip.003\"]) as bigfile:\n    with zipfile.ZipFile(bigfile) as zipfp:\n        for zipinfo in zipfp.infolist():\n            print(\"File {} size {}\".format(zipinfo.filename, zipinfo.file_size))\n```\n\nGenerally, multiple files can be concatenated as a file object and use in\neverywhere that a read-only file object is expected.\n\n## Getting the latest code\n\nTo get the latest code using git, simply type:\n\n    git clone git://github.com/righthandabacus/filesnitch.git\n\n## Install\n\nYou can use pip to install joblib:\n\n    pip install filesnitch\n\nfrom any directory or:\n\n    python setup.py install\n\nfrom the source directory.\n\n## Dependencies\n\n`filesnitch` has no dependencies besides standard Python libraries. Python 3 required.\n\n## Examples\n\nCreate a file object of multiple files, tell the total file size, and read the last 20 bytes:\n\n```python\nimport io\nimport filesnitch\n\nfilenames = [\"foo.zip.001\", \"foo.zip.002\", \"foo.zip.003\"]\nfileobj = filesnitch.FileSnitch(filenames)  # by default in binary mode\nfileobj.seek(0, io.SEEK_END)\nfilesize = fileobj.tell()\nfileobj.seek(-20, io.SEEK_END)\nlastbytes = fileobj.read(20)\nprint(\"Total file size {}. Last 20 bytes:\\n{}\".format(filesize, repr(lastbytes))\n```\n\nAbove we use the standard function `seek()` and `tell()` to move within the\nconcatenated file as if the file object is a standard\n[`io.IOBase`](https://docs.python.org/3/library/io.html#i-o-base-classes). The\n`read()` call accepts the size argument for the number of bytes to read. If no\nsize argument provided, it will read until EOF.\n\n\nRead all files in one shot as a large blob:\n\n```python\nimport io\nimport filesnitch\n\nfilenames = [\"foo.zip.001\", \"foo.zip.002\", \"foo.zip.003\"]\nwith filesnitch.FileSnitch(filenames) as fileobj:\n    blob = fileobj.readall()\n```\n\nThe `readall()` call is same as `read()` without argument, both will read until\nEOF. `FileSnitch` class can be used as a context manager.\n\nWe can also pass in file objects into `FileSnitch()` as long as those file\nobjects supports seek and read correctly. An example is as follows: The\n`diabetic-retinopathy-detection.zip` file is a 83GB zip file from\n[Kaggle](https://www.kaggle.com/c/diabetic-retinopathy-detection/data) (with\ncorrect tools, we can download it using the command `kaggle competitions\ndownload -c diabetic-retinopathy-detection`). In it, there are seven files,\nnamed `test.zip.001` to `test.zip.007`, that are parts of a zip file of images.\nTo extract one image from it without deflating any zip file onto disk, we can\ndo the following:\n\n```python\nimport zipfile\nimport filesnitch\n\n# this call to zipfile needs `allowZip64=True` because of the size is huge\nwith zipfile.ZipFile(\"diabetic-retinopathy-detection.zip\", allowZip64=True) as zip83G:\n    # open each file inside the 83GB zip file, then snitch them up as one file object\n    zipparts = [zip83G.open(f, mode=\"r\") for f in [\n        \"test.zip.001\",\n        \"test.zip.002\",\n        \"test.zip.003\",\n        \"test.zip.004\",\n        \"test.zip.005\",\n        \"test.zip.006\",\n        \"test.zip.007\",\n    ]]\n    with filesnitch.input(files=zipparts, mode='rb') as testzip:\n        # use the snitched file as another zip file, then read a file inside it\n        with zipfile.ZipFile(testzip) as zfp:\n            with zfp.open(\"test/10000_right.jpeg\", mode=\"r\") as fp:\n                with open(\"10000_right.jpeg\", \"wb\") as outfp:\n                    outfp.write(fp.read())\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/righthandabacus/filesnitch", "keywords": "", "license": "LGPL", "maintainer": "", "maintainer_email": "", "name": "filesnitch", "package_url": "https://pypi.org/project/filesnitch/", "platform": "", "project_url": "https://pypi.org/project/filesnitch/", "project_urls": {"Homepage": "https://github.com/righthandabacus/filesnitch"}, "release_url": "https://pypi.org/project/filesnitch/0.2.0/", "requires_dist": null, "requires_python": "", "summary": "Snitch up multipart files as one read-only file object", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>FileSnitch</h1>\n<p><a href=\"https://pypi.python.org/pypi/filesnitch/\" rel=\"nofollow\"><img alt=\"PyPi Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/433b37b271a62fcb10a54fb9aec6ef17b073f895/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f66696c65736e697463682e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/filesnitch/\" rel=\"nofollow\"><img alt=\"PyPi Licence\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ee5110d05ff69153386c48e5949cb08d57f0a607/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f66696c65736e697463682e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/filesnitch/\" rel=\"nofollow\"><img alt=\"PyPi Python Versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a15ad8e1f5b8602e7e319614bdc451b18bfbde3d/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f66696c65736e697463682e737667\"></a>\n<a href=\"http://pepy.tech/project/filesnitch\" rel=\"nofollow\"><img alt=\"PyPi Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2c967c77866649772a02ce9d4b81027e5b76dcd3/687474703a2f2f706570792e746563682f62616467652f66696c65736e69746368\"></a>\n<a href=\"https://pypi.python.org/pypi/filesnitch/\" rel=\"nofollow\"><img alt=\"Python Versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a15ad8e1f5b8602e7e319614bdc451b18bfbde3d/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f66696c65736e697463682e737667\"></a></p>\n<p>This is a module allows you to concatenate multiple files on the fly and\npresent as a single read-only file object.</p>\n<h2>Introduction</h2>\n<p>In Python Standard Libarary, there is a module <code>fileinput</code> which provides\nsimilar function but useful only for text input, supporting only the\n<code>readline()</code> function. That module does not support rewinding as well.</p>\n<p>This module, <code>filesnitch</code> allows one to <code>seek()</code> and <code>read()</code> files. A typical\nuse case is a multipart zip file. For example, we have multiple files:\n<code>foo.zip.001</code>, <code>foo.zip.002</code>, <code>foo.zip.003</code>. To extract some file from it, we\nshould combine them with the following shell command</p>\n<pre><code>cat foo.zip.001 foo.zip.002 foo.zip.003 &gt; foo.zip\n</code></pre>\n<p>Afterwards we can use it, for example using <code>zipfile</code> module in Python</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">zipfile</span>\n<span class=\"k\">with</span> <span class=\"n\">zipfile</span><span class=\"o\">.</span><span class=\"n\">ZipFile</span><span class=\"p\">(</span><span class=\"s2\">\"foo.zip\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">zipfp</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">zipinfo</span> <span class=\"ow\">in</span> <span class=\"n\">zipfp</span><span class=\"o\">.</span><span class=\"n\">infolist</span><span class=\"p\">():</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"File </span><span class=\"si\">{}</span><span class=\"s2\"> size </span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">zipinfo</span><span class=\"o\">.</span><span class=\"n\">filename</span><span class=\"p\">,</span> <span class=\"n\">zipinfo</span><span class=\"o\">.</span><span class=\"n\">file_size</span><span class=\"p\">))</span>\n</pre>\n<p>With this module, we can avoid creating a combined file but use the chunks directly:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">zipfile</span>\n<span class=\"kn\">import</span> <span class=\"nn\">filesnitch</span>\n\n<span class=\"k\">with</span> <span class=\"n\">filesnitch</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"p\">(</span><span class=\"n\">files</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"foo.zip.001\"</span><span class=\"p\">,</span> <span class=\"s2\">\"foo.zip.002\"</span><span class=\"p\">,</span> <span class=\"s2\">\"foo.zip.003\"</span><span class=\"p\">])</span> <span class=\"k\">as</span> <span class=\"n\">bigfile</span><span class=\"p\">:</span>\n    <span class=\"k\">with</span> <span class=\"n\">zipfile</span><span class=\"o\">.</span><span class=\"n\">ZipFile</span><span class=\"p\">(</span><span class=\"n\">bigfile</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">zipfp</span><span class=\"p\">:</span>\n        <span class=\"k\">for</span> <span class=\"n\">zipinfo</span> <span class=\"ow\">in</span> <span class=\"n\">zipfp</span><span class=\"o\">.</span><span class=\"n\">infolist</span><span class=\"p\">():</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"File </span><span class=\"si\">{}</span><span class=\"s2\"> size </span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">zipinfo</span><span class=\"o\">.</span><span class=\"n\">filename</span><span class=\"p\">,</span> <span class=\"n\">zipinfo</span><span class=\"o\">.</span><span class=\"n\">file_size</span><span class=\"p\">))</span>\n</pre>\n<p>Generally, multiple files can be concatenated as a file object and use in\neverywhere that a read-only file object is expected.</p>\n<h2>Getting the latest code</h2>\n<p>To get the latest code using git, simply type:</p>\n<pre><code>git clone git://github.com/righthandabacus/filesnitch.git\n</code></pre>\n<h2>Install</h2>\n<p>You can use pip to install joblib:</p>\n<pre><code>pip install filesnitch\n</code></pre>\n<p>from any directory or:</p>\n<pre><code>python setup.py install\n</code></pre>\n<p>from the source directory.</p>\n<h2>Dependencies</h2>\n<p><code>filesnitch</code> has no dependencies besides standard Python libraries. Python 3 required.</p>\n<h2>Examples</h2>\n<p>Create a file object of multiple files, tell the total file size, and read the last 20 bytes:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">io</span>\n<span class=\"kn\">import</span> <span class=\"nn\">filesnitch</span>\n\n<span class=\"n\">filenames</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"foo.zip.001\"</span><span class=\"p\">,</span> <span class=\"s2\">\"foo.zip.002\"</span><span class=\"p\">,</span> <span class=\"s2\">\"foo.zip.003\"</span><span class=\"p\">]</span>\n<span class=\"n\">fileobj</span> <span class=\"o\">=</span> <span class=\"n\">filesnitch</span><span class=\"o\">.</span><span class=\"n\">FileSnitch</span><span class=\"p\">(</span><span class=\"n\">filenames</span><span class=\"p\">)</span>  <span class=\"c1\"># by default in binary mode</span>\n<span class=\"n\">fileobj</span><span class=\"o\">.</span><span class=\"n\">seek</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">SEEK_END</span><span class=\"p\">)</span>\n<span class=\"n\">filesize</span> <span class=\"o\">=</span> <span class=\"n\">fileobj</span><span class=\"o\">.</span><span class=\"n\">tell</span><span class=\"p\">()</span>\n<span class=\"n\">fileobj</span><span class=\"o\">.</span><span class=\"n\">seek</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">SEEK_END</span><span class=\"p\">)</span>\n<span class=\"n\">lastbytes</span> <span class=\"o\">=</span> <span class=\"n\">fileobj</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Total file size </span><span class=\"si\">{}</span><span class=\"s2\">. Last 20 bytes:</span><span class=\"se\">\\n</span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">filesize</span><span class=\"p\">,</span> <span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">lastbytes</span><span class=\"p\">))</span>\n</pre>\n<p>Above we use the standard function <code>seek()</code> and <code>tell()</code> to move within the\nconcatenated file as if the file object is a standard\n<a href=\"https://docs.python.org/3/library/io.html#i-o-base-classes\" rel=\"nofollow\"><code>io.IOBase</code></a>. The\n<code>read()</code> call accepts the size argument for the number of bytes to read. If no\nsize argument provided, it will read until EOF.</p>\n<p>Read all files in one shot as a large blob:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">io</span>\n<span class=\"kn\">import</span> <span class=\"nn\">filesnitch</span>\n\n<span class=\"n\">filenames</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"foo.zip.001\"</span><span class=\"p\">,</span> <span class=\"s2\">\"foo.zip.002\"</span><span class=\"p\">,</span> <span class=\"s2\">\"foo.zip.003\"</span><span class=\"p\">]</span>\n<span class=\"k\">with</span> <span class=\"n\">filesnitch</span><span class=\"o\">.</span><span class=\"n\">FileSnitch</span><span class=\"p\">(</span><span class=\"n\">filenames</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fileobj</span><span class=\"p\">:</span>\n    <span class=\"n\">blob</span> <span class=\"o\">=</span> <span class=\"n\">fileobj</span><span class=\"o\">.</span><span class=\"n\">readall</span><span class=\"p\">()</span>\n</pre>\n<p>The <code>readall()</code> call is same as <code>read()</code> without argument, both will read until\nEOF. <code>FileSnitch</code> class can be used as a context manager.</p>\n<p>We can also pass in file objects into <code>FileSnitch()</code> as long as those file\nobjects supports seek and read correctly. An example is as follows: The\n<code>diabetic-retinopathy-detection.zip</code> file is a 83GB zip file from\n<a href=\"https://www.kaggle.com/c/diabetic-retinopathy-detection/data\" rel=\"nofollow\">Kaggle</a> (with\ncorrect tools, we can download it using the command <code>kaggle competitions download -c diabetic-retinopathy-detection</code>). In it, there are seven files,\nnamed <code>test.zip.001</code> to <code>test.zip.007</code>, that are parts of a zip file of images.\nTo extract one image from it without deflating any zip file onto disk, we can\ndo the following:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">zipfile</span>\n<span class=\"kn\">import</span> <span class=\"nn\">filesnitch</span>\n\n<span class=\"c1\"># this call to zipfile needs `allowZip64=True` because of the size is huge</span>\n<span class=\"k\">with</span> <span class=\"n\">zipfile</span><span class=\"o\">.</span><span class=\"n\">ZipFile</span><span class=\"p\">(</span><span class=\"s2\">\"diabetic-retinopathy-detection.zip\"</span><span class=\"p\">,</span> <span class=\"n\">allowZip64</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">zip83G</span><span class=\"p\">:</span>\n    <span class=\"c1\"># open each file inside the 83GB zip file, then snitch them up as one file object</span>\n    <span class=\"n\">zipparts</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">zip83G</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s2\">\"r\"</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">f</span> <span class=\"ow\">in</span> <span class=\"p\">[</span>\n        <span class=\"s2\">\"test.zip.001\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"test.zip.002\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"test.zip.003\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"test.zip.004\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"test.zip.005\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"test.zip.006\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"test.zip.007\"</span><span class=\"p\">,</span>\n    <span class=\"p\">]]</span>\n    <span class=\"k\">with</span> <span class=\"n\">filesnitch</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"p\">(</span><span class=\"n\">files</span><span class=\"o\">=</span><span class=\"n\">zipparts</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">'rb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">testzip</span><span class=\"p\">:</span>\n        <span class=\"c1\"># use the snitched file as another zip file, then read a file inside it</span>\n        <span class=\"k\">with</span> <span class=\"n\">zipfile</span><span class=\"o\">.</span><span class=\"n\">ZipFile</span><span class=\"p\">(</span><span class=\"n\">testzip</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">zfp</span><span class=\"p\">:</span>\n            <span class=\"k\">with</span> <span class=\"n\">zfp</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s2\">\"test/10000_right.jpeg\"</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s2\">\"r\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fp</span><span class=\"p\">:</span>\n                <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"10000_right.jpeg\"</span><span class=\"p\">,</span> <span class=\"s2\">\"wb\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">outfp</span><span class=\"p\">:</span>\n                    <span class=\"n\">outfp</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">fp</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">())</span>\n</pre>\n\n          </div>"}, "last_serial": 7069761, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "9d667a081122830e07f11938a3d3de6f", "sha256": "1a97da5f61632be6484f9538682b2bf1e303d1e320bafbf90a028f699ab4de92"}, "downloads": -1, "filename": "filesnitch-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "9d667a081122830e07f11938a3d3de6f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5416, "upload_time": "2020-04-19T21:40:12", "upload_time_iso_8601": "2020-04-19T21:40:12.021716Z", "url": "https://files.pythonhosted.org/packages/e8/cd/19fbf7a5517cefe8cf0c5ae3cd3fdee8093e5321c533b85a724d402bd6af/filesnitch-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e73ce47c3a908fd6b20f7f452cf6a9cd", "sha256": "681002f56c018eeb0d08017f37fdc4b4c86a8fbee90aeaf4b0e1c5cbea1387b8"}, "downloads": -1, "filename": "filesnitch-0.1.tar.gz", "has_sig": false, "md5_digest": "e73ce47c3a908fd6b20f7f452cf6a9cd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5637, "upload_time": "2020-04-19T21:40:14", "upload_time_iso_8601": "2020-04-19T21:40:14.194844Z", "url": "https://files.pythonhosted.org/packages/3f/eb/2d87fe48bf31c84f45780dfa5b924162044879cf54a953f5dad23a194b8c/filesnitch-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "a01c8bb7937066b1acaa0d90fb1e5577", "sha256": "e5ce82a9837dca3aed43f8b2068391beeae3537d38d65978460d7c3e0b5e74e3"}, "downloads": -1, "filename": "filesnitch-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a01c8bb7937066b1acaa0d90fb1e5577", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8645, "upload_time": "2020-04-21T16:18:27", "upload_time_iso_8601": "2020-04-21T16:18:27.781618Z", "url": "https://files.pythonhosted.org/packages/55/e2/bea570d883bbe3f285ad307067df9419912d3f14b3e312cac8d6e7a6b990/filesnitch-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "68eca63fed7a820f4fc2236d2648ff83", "sha256": "3d11b7173566a4dcc375a2d8dfb64b955a9c9e1f1882a071cda6b0468541f4c3"}, "downloads": -1, "filename": "filesnitch-0.1.1.tar.gz", "has_sig": false, "md5_digest": "68eca63fed7a820f4fc2236d2648ff83", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8595, "upload_time": "2020-04-21T16:18:29", "upload_time_iso_8601": "2020-04-21T16:18:29.011296Z", "url": "https://files.pythonhosted.org/packages/f4/35/bfa54e8ab3cf5c18d626712dfeee14a6af6010c0ddde16727905321213a1/filesnitch-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "35d5b2b4b4a9266e3ca915f3434d3568", "sha256": "d0e732a307836fa8e14f384be483648b3805183042501bb0a54498d785bbef4d"}, "downloads": -1, "filename": "filesnitch-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "35d5b2b4b4a9266e3ca915f3434d3568", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9252, "upload_time": "2020-04-21T18:01:08", "upload_time_iso_8601": "2020-04-21T18:01:08.392225Z", "url": "https://files.pythonhosted.org/packages/0c/ae/177bb92cf2f5e54f34728c003c52caec74048dbc2a4defdaf62534642d97/filesnitch-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "45a7d3a3fad3f6c9632aa0370f5ba423", "sha256": "95b766e1e6180973175de9888c1d72b5cefe914c871d6061c5b274013df6f0b0"}, "downloads": -1, "filename": "filesnitch-0.2.0.tar.gz", "has_sig": false, "md5_digest": "45a7d3a3fad3f6c9632aa0370f5ba423", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9284, "upload_time": "2020-04-21T18:01:09", "upload_time_iso_8601": "2020-04-21T18:01:09.531306Z", "url": "https://files.pythonhosted.org/packages/c2/58/337c02405f297b8c635ea797834fbbf620f0b260c2bb3089c28028977849/filesnitch-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "35d5b2b4b4a9266e3ca915f3434d3568", "sha256": "d0e732a307836fa8e14f384be483648b3805183042501bb0a54498d785bbef4d"}, "downloads": -1, "filename": "filesnitch-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "35d5b2b4b4a9266e3ca915f3434d3568", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9252, "upload_time": "2020-04-21T18:01:08", "upload_time_iso_8601": "2020-04-21T18:01:08.392225Z", "url": "https://files.pythonhosted.org/packages/0c/ae/177bb92cf2f5e54f34728c003c52caec74048dbc2a4defdaf62534642d97/filesnitch-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "45a7d3a3fad3f6c9632aa0370f5ba423", "sha256": "95b766e1e6180973175de9888c1d72b5cefe914c871d6061c5b274013df6f0b0"}, "downloads": -1, "filename": "filesnitch-0.2.0.tar.gz", "has_sig": false, "md5_digest": "45a7d3a3fad3f6c9632aa0370f5ba423", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9284, "upload_time": "2020-04-21T18:01:09", "upload_time_iso_8601": "2020-04-21T18:01:09.531306Z", "url": "https://files.pythonhosted.org/packages/c2/58/337c02405f297b8c635ea797834fbbf620f0b260c2bb3089c28028977849/filesnitch-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:42:32 2020"}