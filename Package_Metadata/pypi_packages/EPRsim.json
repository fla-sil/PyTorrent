{"info": {"author": "Stephan Rein", "author_email": "stephan.rein@physchem.uni-freiburg.de", "bugtrack_url": null, "classifiers": ["Intended Audience :: Science/Research", "Operating System :: OS Independent", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "EPRsim\n======\nOpen-source simulation package for cw-EPR spectra. \nEPRsim has been developed in the group of Prof. Dr. Stefan Weber at the University of Freiburg, Freiburg im Breisgau, Germany, during the last couple of years. EPRsim was developed by Stephan Rein. The program uses several concepts described in [1].\nEPRsim is open-source and available free of charge.\n\nFind the full documentation at the link below:\nhttps://www.radicals.uni-freiburg.de/de/software\n\n\nInstallation\n------------\n\nInstall EPRsim via pip:\n\n$ pip install eprsim\n\n\nRun EPRsim\n----------\n\nCall it as package when running Python.\n\n>>> import EPRsim.EPRsim as sim\n\nDefine parameters and run the simulation by\ninvoking the simulate() function of EPRsim.\n\n>>> Param = sim.Parameters()\n>>> B, spc, flag = sim.simulate(Param)\n\n\nThe simulate() functions is discribed in the following:\n\nParameters\n----------\nParameters : object\n             Object with all simulation parameters.\n\n\nReturns\n-------\nfield :   numpy.ndarray\n          Magnetic field vector\n\nspc :     numpy.ndarray\n          Intesity vector of the cw-EPR signal\n\nflag :    list\n          Flags with warning codes (description pleas find below)\n\n\nNotes\n------\nMain function for the simulation of cw-EPR in different motional regimes\n(isotropic, fast-motion and solid state)\nAll spectra are simulated as field sweep spectra.\n\nIsotropic/fast-motion\nFor the fast-motion regime/isotropic limit, the program solves\nthe implicit Breit-Rabi formula [1] in a fixed-point iteration.\nAnisotropic line-broadening effects in the fast-motion regime\nare calculated via the Kivelson formula [2].\nCurrently, Euler angles between tensors are ignored by the algorithm!\nAll tensors (only relevant for fast-motion) need to be in their principal\naxis system and colinear to each other.\n\nSolid-state\nIn the solid-state regime, the program uses a full matrix diagonalization\nalgorithm. Therefore, only spin systems with a Hilbert space\ndimension of dim(H) < 512 can be calculated.\nThe powder average is partially generated by interpolation\nof eigenvalues and transition probabilitites (similar to [1]).\nThe interpolation level is automatically set by the program.\nThe solid state algorithm treats arbitrary spin systems as long\nas the Hilbert space dimension is within the threshold.\nSpin-polarization can be defined (withing the electronic sublevels)\nas zero-field populations. The program constructs (sparse) density matrices\nout of the zero-field eigenvectors, to efficiently calculate the population\ntransformation from zero field to high field.\nPer default, the program calculates\nwith thermal equilibrium. Nuclear quadrupolar couplings (for I > 0.5)\nare currently not implemented.\n\nThe warning codes are:\n\n0: Everything is alright\n\n1: Solid-state is not possible due to too large matrix dimension.\n\n2: Fast-motion/iso is not possible due to S > 1/2.\n\n\nThe Parameter syntax was kept similar to the one used in EasySpin [1],\nto make it\nOptional Parameters (with their defaults):\n\n\n=================    ==========    =================================      \nParameter            Default       Meaning\n=================    ==========    =================================         \nmwFreq               9.6           microwave frequency in GHz\nA                    None          Hyperfine couplings in MHz\nabund_threshold      0.0001        Threshold for isotope mixtures\nD                    None          Zero-field splitting in MHz\ng                    2.0023193     g-tensor\nHarmonic             1             Harmonic of the spectrum\nJ                    None          Exchange coupling  \ntcorr                None          Rotational correlation time in ns\nlogtcorr             None          Decadic logarithm of tcorr \nlw                   [0.1, 0.1]    Line-widths (Gaussian, Lorentzian)\nModAmp               0             Modulation amplitude\nmotion               'solid'       Motional regime\nmwPhase              0             Microwave phase offset\nn                    1             Number of equivalent nuclei\nnKnots               12            Initial number of theta values\nNucs                 None          Isotope specification \nPoints               1024          Number of points\nRange                [330, 360]    Magentic field range in mT\nS                    0.5           Electron spin quantum number \nSNR                  None          Signal-to-noise ratio\nverbosity            True          Print output information\nweight               1             Weighting (for multiple species)\ngFrame               None          Euler angles for the g tensor\nAFrame               None          Euler angles for the A tensors\nDFrame               None          Euler angles for the D tensor\nTemperature          300\t   Experimental temperature \nPopulation           None          Zero-field populations\nLevelSelect          5e-5          Threshold for level selection\n=================    ==========    =================================      \n\n\nExamples\n--------\n\nSimple example for the simulation of an isotropic nitroxide spectrum.\n\n>>> import EPRsim.EPRsim as sim\n>>> P = sim.Parameters()\n>>> P.Range = [335 ,350]\n>>> P.mwFreq = 9.6\n>>> P.g = 2.002\n>>> P.A = 45.5\n>>> P.Nucs = 'N'\n>>> P.lw = [0.2, 0.2]\n>>> P.motion = 'fast'\n>>> B0, spc, flag = sim.simulate(P)\n\n\nSimple example for the simulation of an anisotropic nitroxide spectrum\n(only 14N) in the fast-motion regime.\n\n>>> import EPRsim.EPRsim as sim\n>>> Ra = [335 ,350]\n>>> freq = 9.6\n>>> g = [2.0083, 2.0061, 2.0022]\n>>> A = [12, 13, 110]\n>>> Nucs = '14N'\n>>> lw = [0.2, 0.2]\n>>> tcorr = 1e-10\n>>> motion = 'fast'\n>>> Param = sim.Parameters(Range=Ra, g=g, A=A, Nucs=Nucs, mwFreq=freq,\n                           lw=lw, tcorr=corr, motion=motion)\n>>> B0, spc, flag = sim.simulate(Param)\n\n\nSimple example for the simulation of an anisotropic nitroxide spectrum\n(only 14N) in the solid-state regime. \n\n>>> import EPRsim.EPRsim as sim\n>>> import EPRsim.Tools as tool\n>>> P = sim.Parameters()\n>>> P.Range = [335 ,350]\n>>> P.mwfreq = 9.6\n>>> P.g = [2.0083, 2.0061, 2.0022]\n>>> P.A = [[12, 13, 110], [20, 30, 30]]\n>>> P.Nucs = '14N,H'\n>>> P.lw = [0.5, 0.2]\n>>> P.motion = 'solid'\n>>> B0, spc, flag = sim.simulate(P)\n>>> tool.plot(B0, spc)\n\n\nSimple example for the simulation of an anisotropic nitroxide spectrum\n(only 14N) in the solid-state regime, coupled to an additional hydrogen nucleus.\n\n>>> import EPRsim.EPRsim as sim\n>>> import EPRsim.Tools as tool\n>>> P = sim.Parameters()\n>>> P.Range = [335 ,350]\n>>> P.mwfreq = 9.6\n>>> P.g = [2.0083, 2.0061, 2.0022]\n>>> P.A = [[12, 13, 110], [20, 30, 30]]\n>>> P.Nucs = '14N,H'\n>>> P.lw = [0.5, 0.2]\n>>> P.motion = 'solid'\n>>> B0, spc, flag = sim.simulate(P)\n>>> tool.plot(B0, spc)\n\n\nSimple example for the simulation of two radical species.\n\n>>> import EPRsim.EPRsim as sim\n>>> import EPRsim.Tools as tool\n>>> P = sim.Parameters()\n>>> P.Range = [335 ,350]\n>>> P.mwfreq = 9.6\n>>> P.g = [2.0083, 2.0061, 2.0022]\n>>> P.A = [12, 13, 110]\n>>> P.Nucs = '14N'\n>>> P.lw = [0.5, 0.2]\n>>> P.motion = 'solid'\n>>> P2 = sim.Parameters()\n>>> P2.Range = [335 ,350]\n>>> P2.mwfreq = 9.6\n>>> P2.g = 2.0003\n>>> P2.lw = [0.3, 0.0]\n>>> P2.motion = 'solid'\n>>> P2.weight = 0.1\n>>> B0, spc, flag = sim.simulate([P, P2])\n>>> tool.plot(B0, spc)\n\n\nSimple example for the simulation of a spin-polarized triplet spectrum.\n\n>>> import EPRsim.EPRsim as sim\n>>> import EPRsim.Tools as tool\n>>> P = sim.Parameters()\n>>> P.S = 1\n>>> P.Range = [130 ,450]\n>>> P.mwfreq = 9.6\n>>> P.g = 2\n>>> P.lw = [4, 1]\n>>> P.D = [-1400, 20]\n>>> P.Population = [0.2, 0.3, 0.4]\n>>> P.Harmonic = 0\n>>> B0, spc, flag = sim.simulate(P)\n>>> tool.plot(B0, spc)\n\n\n\nProperties\n----------\n\nEPRsim provides:\n\n- Simulation for cw-EPR spectra in the solid-state limit and fast-motion regime\n- Flexible simualtion options\n- Highly-optimized performance of the simulation algorithm\n- Various EPR-data processing function\n- Open-source\n\n\nFeedback\n--------\n\nWe are eager to hear about your experiences with GloPel. You can\nemail me at stephan.rein@physchem.uni-freiburg.de.  \n\n\nReferences\n----------\n\n[1] : S. Stoll, A. Schweiger, J. Magn. Reson., 2006, 178, 42-55\n\n[2] : N. M. Atherton, Principles of Electron Spin Resonance, 1993\n\n\nAcknowledgement\n---------------\n\nA number of people have helped shaping  EPRsim and the ideas behind. First and foremost, Prof. Dr. Stefan Weber and Dr. Sylwia Kacprzak (now Bruker Biospin) were for years the driving force behind EPRsim.\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://www.radicals.uni-freiburg.de/de/software", "keywords": "EPR simulationsIsotropic limitFast-motion regimesolid-state simulations", "license": "GPLv3", "maintainer": "", "maintainer_email": "", "name": "EPRsim", "package_url": "https://pypi.org/project/EPRsim/", "platform": "", "project_url": "https://pypi.org/project/EPRsim/", "project_urls": {"Homepage": "https://www.radicals.uni-freiburg.de/de/software"}, "release_url": "https://pypi.org/project/EPRsim/0.0.4.dev0/", "requires_dist": ["cycler (>=0.10.0)", "kiwisolver (>=1.0.1)", "numpy (>=1.15.4)", "numpydoc (>=0.9.1)", "pyparsing (>=2.3.0)", "python-dateutil", "scipy (>=1.2.0)", "six (>=1.11.0)", "matplotlib", "sphinx-rtd-theme (>=0.4.3)", "llvmlite (>=0.26.0)", "numba (>=0.41.0)", "numba (==0.41.0) ; extra == 'jit'", "llvmlite (==0.26.0) ; extra == 'lowlevelvirtualmaschine'", "numb (==0.41.0) ; extra == 'mysterious_feature_x3'"], "requires_python": ">=3.5", "summary": "Simulation Package for cw-EPR spectra", "version": "0.0.4.dev0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Open-source simulation package for cw-EPR spectra.\nEPRsim has been developed in the group of Prof. Dr. Stefan Weber at the University of Freiburg, Freiburg im Breisgau, Germany, during the last couple of years. EPRsim was developed by Stephan Rein. The program uses several concepts described in [1].\nEPRsim is open-source and available free of charge.</p>\n<p>Find the full documentation at the link below:\n<a href=\"https://www.radicals.uni-freiburg.de/de/software\" rel=\"nofollow\">https://www.radicals.uni-freiburg.de/de/software</a></p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Install EPRsim via pip:</p>\n<p>$ pip install eprsim</p>\n</div>\n<div id=\"run-eprsim\">\n<h2>Run EPRsim</h2>\n<p>Call it as package when running Python.</p>\n<pre>&gt;&gt;&gt; import EPRsim.EPRsim as sim\n</pre>\n<p>Define parameters and run the simulation by\ninvoking the simulate() function of EPRsim.</p>\n<pre>&gt;&gt;&gt; Param = sim.Parameters()\n&gt;&gt;&gt; B, spc, flag = sim.simulate(Param)\n</pre>\n<p>The simulate() functions is discribed in the following:</p>\n</div>\n<div id=\"parameters\">\n<h2>Parameters</h2>\n<dl>\n<dt>Parameters <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">object</span></dt>\n<dd>Object with all simulation parameters.</dd>\n</dl>\n</div>\n<div id=\"returns\">\n<h2>Returns</h2>\n<dl>\n<dt>field <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">numpy.ndarray</span></dt>\n<dd>Magnetic field vector</dd>\n<dt>spc <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">numpy.ndarray</span></dt>\n<dd>Intesity vector of the cw-EPR signal</dd>\n<dt>flag <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">list</span></dt>\n<dd>Flags with warning codes (description pleas find below)</dd>\n</dl>\n</div>\n<div id=\"notes\">\n<h2>Notes</h2>\n<p>Main function for the simulation of cw-EPR in different motional regimes\n(isotropic, fast-motion and solid state)\nAll spectra are simulated as field sweep spectra.</p>\n<p>Isotropic/fast-motion\nFor the fast-motion regime/isotropic limit, the program solves\nthe implicit Breit-Rabi formula [1] in a fixed-point iteration.\nAnisotropic line-broadening effects in the fast-motion regime\nare calculated via the Kivelson formula [2].\nCurrently, Euler angles between tensors are ignored by the algorithm!\nAll tensors (only relevant for fast-motion) need to be in their principal\naxis system and colinear to each other.</p>\n<p>Solid-state\nIn the solid-state regime, the program uses a full matrix diagonalization\nalgorithm. Therefore, only spin systems with a Hilbert space\ndimension of dim(H) &lt; 512 can be calculated.\nThe powder average is partially generated by interpolation\nof eigenvalues and transition probabilitites (similar to [1]).\nThe interpolation level is automatically set by the program.\nThe solid state algorithm treats arbitrary spin systems as long\nas the Hilbert space dimension is within the threshold.\nSpin-polarization can be defined (withing the electronic sublevels)\nas zero-field populations. The program constructs (sparse) density matrices\nout of the zero-field eigenvectors, to efficiently calculate the population\ntransformation from zero field to high field.\nPer default, the program calculates\nwith thermal equilibrium. Nuclear quadrupolar couplings (for I &gt; 0.5)\nare currently not implemented.</p>\n<p>The warning codes are:</p>\n<p>0: Everything is alright</p>\n<p>1: Solid-state is not possible due to too large matrix dimension.</p>\n<p>2: Fast-motion/iso is not possible due to S &gt; 1/2.</p>\n<p>The Parameter syntax was kept similar to the one used in EasySpin [1],\nto make it\nOptional Parameters (with their defaults):</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Parameter</th>\n<th>Default</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>mwFreq</td>\n<td>9.6</td>\n<td>microwave frequency in GHz</td>\n</tr>\n<tr><td>A</td>\n<td>None</td>\n<td>Hyperfine couplings in MHz</td>\n</tr>\n<tr><td>abund_threshold</td>\n<td>0.0001</td>\n<td>Threshold for isotope mixtures</td>\n</tr>\n<tr><td>D</td>\n<td>None</td>\n<td>Zero-field splitting in MHz</td>\n</tr>\n<tr><td>g</td>\n<td>2.0023193</td>\n<td>g-tensor</td>\n</tr>\n<tr><td>Harmonic</td>\n<td>1</td>\n<td>Harmonic of the spectrum</td>\n</tr>\n<tr><td>J</td>\n<td>None</td>\n<td>Exchange coupling</td>\n</tr>\n<tr><td>tcorr</td>\n<td>None</td>\n<td>Rotational correlation time in ns</td>\n</tr>\n<tr><td>logtcorr</td>\n<td>None</td>\n<td>Decadic logarithm of tcorr</td>\n</tr>\n<tr><td>lw</td>\n<td>[0.1, 0.1]</td>\n<td>Line-widths (Gaussian, Lorentzian)</td>\n</tr>\n<tr><td>ModAmp</td>\n<td>0</td>\n<td>Modulation amplitude</td>\n</tr>\n<tr><td>motion</td>\n<td>\u2018solid\u2019</td>\n<td>Motional regime</td>\n</tr>\n<tr><td>mwPhase</td>\n<td>0</td>\n<td>Microwave phase offset</td>\n</tr>\n<tr><td>n</td>\n<td>1</td>\n<td>Number of equivalent nuclei</td>\n</tr>\n<tr><td>nKnots</td>\n<td>12</td>\n<td>Initial number of theta values</td>\n</tr>\n<tr><td>Nucs</td>\n<td>None</td>\n<td>Isotope specification</td>\n</tr>\n<tr><td>Points</td>\n<td>1024</td>\n<td>Number of points</td>\n</tr>\n<tr><td>Range</td>\n<td>[330, 360]</td>\n<td>Magentic field range in mT</td>\n</tr>\n<tr><td>S</td>\n<td>0.5</td>\n<td>Electron spin quantum number</td>\n</tr>\n<tr><td>SNR</td>\n<td>None</td>\n<td>Signal-to-noise ratio</td>\n</tr>\n<tr><td>verbosity</td>\n<td>True</td>\n<td>Print output information</td>\n</tr>\n<tr><td>weight</td>\n<td>1</td>\n<td>Weighting (for multiple species)</td>\n</tr>\n<tr><td>gFrame</td>\n<td>None</td>\n<td>Euler angles for the g tensor</td>\n</tr>\n<tr><td>AFrame</td>\n<td>None</td>\n<td>Euler angles for the A tensors</td>\n</tr>\n<tr><td>DFrame</td>\n<td>None</td>\n<td>Euler angles for the D tensor</td>\n</tr>\n<tr><td>Temperature</td>\n<td>300</td>\n<td>Experimental temperature</td>\n</tr>\n<tr><td>Population</td>\n<td>None</td>\n<td>Zero-field populations</td>\n</tr>\n<tr><td>LevelSelect</td>\n<td>5e-5</td>\n<td>Threshold for level selection</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<p>Simple example for the simulation of an isotropic nitroxide spectrum.</p>\n<pre>&gt;&gt;&gt; import EPRsim.EPRsim as sim\n&gt;&gt;&gt; P = sim.Parameters()\n&gt;&gt;&gt; P.Range = [335 ,350]\n&gt;&gt;&gt; P.mwFreq = 9.6\n&gt;&gt;&gt; P.g = 2.002\n&gt;&gt;&gt; P.A = 45.5\n&gt;&gt;&gt; P.Nucs = 'N'\n&gt;&gt;&gt; P.lw = [0.2, 0.2]\n&gt;&gt;&gt; P.motion = 'fast'\n&gt;&gt;&gt; B0, spc, flag = sim.simulate(P)\n</pre>\n<p>Simple example for the simulation of an anisotropic nitroxide spectrum\n(only 14N) in the fast-motion regime.</p>\n<pre>&gt;&gt;&gt; import EPRsim.EPRsim as sim\n&gt;&gt;&gt; Ra = [335 ,350]\n&gt;&gt;&gt; freq = 9.6\n&gt;&gt;&gt; g = [2.0083, 2.0061, 2.0022]\n&gt;&gt;&gt; A = [12, 13, 110]\n&gt;&gt;&gt; Nucs = '14N'\n&gt;&gt;&gt; lw = [0.2, 0.2]\n&gt;&gt;&gt; tcorr = 1e-10\n&gt;&gt;&gt; motion = 'fast'\n&gt;&gt;&gt; Param = sim.Parameters(Range=Ra, g=g, A=A, Nucs=Nucs, mwFreq=freq,\n                           lw=lw, tcorr=corr, motion=motion)\n&gt;&gt;&gt; B0, spc, flag = sim.simulate(Param)\n</pre>\n<p>Simple example for the simulation of an anisotropic nitroxide spectrum\n(only 14N) in the solid-state regime.</p>\n<pre>&gt;&gt;&gt; import EPRsim.EPRsim as sim\n&gt;&gt;&gt; import EPRsim.Tools as tool\n&gt;&gt;&gt; P = sim.Parameters()\n&gt;&gt;&gt; P.Range = [335 ,350]\n&gt;&gt;&gt; P.mwfreq = 9.6\n&gt;&gt;&gt; P.g = [2.0083, 2.0061, 2.0022]\n&gt;&gt;&gt; P.A = [[12, 13, 110], [20, 30, 30]]\n&gt;&gt;&gt; P.Nucs = '14N,H'\n&gt;&gt;&gt; P.lw = [0.5, 0.2]\n&gt;&gt;&gt; P.motion = 'solid'\n&gt;&gt;&gt; B0, spc, flag = sim.simulate(P)\n&gt;&gt;&gt; tool.plot(B0, spc)\n</pre>\n<p>Simple example for the simulation of an anisotropic nitroxide spectrum\n(only 14N) in the solid-state regime, coupled to an additional hydrogen nucleus.</p>\n<pre>&gt;&gt;&gt; import EPRsim.EPRsim as sim\n&gt;&gt;&gt; import EPRsim.Tools as tool\n&gt;&gt;&gt; P = sim.Parameters()\n&gt;&gt;&gt; P.Range = [335 ,350]\n&gt;&gt;&gt; P.mwfreq = 9.6\n&gt;&gt;&gt; P.g = [2.0083, 2.0061, 2.0022]\n&gt;&gt;&gt; P.A = [[12, 13, 110], [20, 30, 30]]\n&gt;&gt;&gt; P.Nucs = '14N,H'\n&gt;&gt;&gt; P.lw = [0.5, 0.2]\n&gt;&gt;&gt; P.motion = 'solid'\n&gt;&gt;&gt; B0, spc, flag = sim.simulate(P)\n&gt;&gt;&gt; tool.plot(B0, spc)\n</pre>\n<p>Simple example for the simulation of two radical species.</p>\n<pre>&gt;&gt;&gt; import EPRsim.EPRsim as sim\n&gt;&gt;&gt; import EPRsim.Tools as tool\n&gt;&gt;&gt; P = sim.Parameters()\n&gt;&gt;&gt; P.Range = [335 ,350]\n&gt;&gt;&gt; P.mwfreq = 9.6\n&gt;&gt;&gt; P.g = [2.0083, 2.0061, 2.0022]\n&gt;&gt;&gt; P.A = [12, 13, 110]\n&gt;&gt;&gt; P.Nucs = '14N'\n&gt;&gt;&gt; P.lw = [0.5, 0.2]\n&gt;&gt;&gt; P.motion = 'solid'\n&gt;&gt;&gt; P2 = sim.Parameters()\n&gt;&gt;&gt; P2.Range = [335 ,350]\n&gt;&gt;&gt; P2.mwfreq = 9.6\n&gt;&gt;&gt; P2.g = 2.0003\n&gt;&gt;&gt; P2.lw = [0.3, 0.0]\n&gt;&gt;&gt; P2.motion = 'solid'\n&gt;&gt;&gt; P2.weight = 0.1\n&gt;&gt;&gt; B0, spc, flag = sim.simulate([P, P2])\n&gt;&gt;&gt; tool.plot(B0, spc)\n</pre>\n<p>Simple example for the simulation of a spin-polarized triplet spectrum.</p>\n<pre>&gt;&gt;&gt; import EPRsim.EPRsim as sim\n&gt;&gt;&gt; import EPRsim.Tools as tool\n&gt;&gt;&gt; P = sim.Parameters()\n&gt;&gt;&gt; P.S = 1\n&gt;&gt;&gt; P.Range = [130 ,450]\n&gt;&gt;&gt; P.mwfreq = 9.6\n&gt;&gt;&gt; P.g = 2\n&gt;&gt;&gt; P.lw = [4, 1]\n&gt;&gt;&gt; P.D = [-1400, 20]\n&gt;&gt;&gt; P.Population = [0.2, 0.3, 0.4]\n&gt;&gt;&gt; P.Harmonic = 0\n&gt;&gt;&gt; B0, spc, flag = sim.simulate(P)\n&gt;&gt;&gt; tool.plot(B0, spc)\n</pre>\n</div>\n<div id=\"properties\">\n<h2>Properties</h2>\n<p>EPRsim provides:</p>\n<ul>\n<li>Simulation for cw-EPR spectra in the solid-state limit and fast-motion regime</li>\n<li>Flexible simualtion options</li>\n<li>Highly-optimized performance of the simulation algorithm</li>\n<li>Various EPR-data processing function</li>\n<li>Open-source</li>\n</ul>\n</div>\n<div id=\"feedback\">\n<h2>Feedback</h2>\n<p>We are eager to hear about your experiences with GloPel. You can\nemail me at <a href=\"mailto:stephan.rein%40physchem.uni-freiburg.de\">stephan<span>.</span>rein<span>@</span>physchem<span>.</span>uni-freiburg<span>.</span>de</a>.</p>\n</div>\n<div id=\"references\">\n<h2>References</h2>\n<p>[1] : S. Stoll, A. Schweiger, J. Magn. Reson., 2006, 178, 42-55</p>\n<p>[2] : N. M. Atherton, Principles of Electron Spin Resonance, 1993</p>\n</div>\n<div id=\"acknowledgement\">\n<h2>Acknowledgement</h2>\n<p>A number of people have helped shaping  EPRsim and the ideas behind. First and foremost, Prof. Dr. Stefan Weber and Dr. Sylwia Kacprzak (now Bruker Biospin) were for years the driving force behind EPRsim.</p>\n</div>\n\n          </div>"}, "last_serial": 6194257, "releases": {"0.0.2.dev0": [{"comment_text": "", "digests": {"md5": "8d661c99048299e69a1e8784de038a03", "sha256": "db15c6e025aa62df7605192113432b67ef41d2d8dc1c91c93616ed0f2d17d8b4"}, "downloads": -1, "filename": "EPRsim-0.0.2.dev0-py3-none-any.whl", "has_sig": false, "md5_digest": "8d661c99048299e69a1e8784de038a03", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 75379, "upload_time": "2019-11-20T13:43:09", "upload_time_iso_8601": "2019-11-20T13:43:09.682077Z", "url": "https://files.pythonhosted.org/packages/12/d1/ce98d461a59fd7c778a7ce0b47c39a81398530547bce6ac5ecbeb0aabed6/EPRsim-0.0.2.dev0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dc354693c99db3c3d3dcd2802200045c", "sha256": "3df0ee2c1219ae94f4dc400889ea7afa1aca2ef943a2a26c44ccad455fea3671"}, "downloads": -1, "filename": "EPRsim-0.0.2.dev0.tar.gz", "has_sig": false, "md5_digest": "dc354693c99db3c3d3dcd2802200045c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 58454, "upload_time": "2019-11-20T13:43:11", "upload_time_iso_8601": "2019-11-20T13:43:11.802783Z", "url": "https://files.pythonhosted.org/packages/5b/59/218b1816806810b7772a080bf749d7221920b562a15df860fbeadab36a26/EPRsim-0.0.2.dev0.tar.gz", "yanked": false}], "0.0.3.dev0": [{"comment_text": "", "digests": {"md5": "d157b4228a4aec60c904e03588e60364", "sha256": "5e9e73286f560f708de00f8fc6d021ac1828c62639925111cd4dc97610bacbdb"}, "downloads": -1, "filename": "EPRsim-0.0.3.dev0-py3-none-any.whl", "has_sig": false, "md5_digest": "d157b4228a4aec60c904e03588e60364", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 75418, "upload_time": "2019-11-25T09:46:11", "upload_time_iso_8601": "2019-11-25T09:46:11.986328Z", "url": "https://files.pythonhosted.org/packages/3c/f5/ede661114798fc293fd3f9c57686fbcea162b26791a1912c1ae9c4f54263/EPRsim-0.0.3.dev0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e97e4da7cc7c08f1edbabe780e33304d", "sha256": "1e970cd5a14334dfb20bcd8475796baf718c42792d8df22bebb95a0babfcb4b0"}, "downloads": -1, "filename": "EPRsim-0.0.3.dev0.tar.gz", "has_sig": false, "md5_digest": "e97e4da7cc7c08f1edbabe780e33304d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 58511, "upload_time": "2019-11-25T09:46:13", "upload_time_iso_8601": "2019-11-25T09:46:13.658842Z", "url": "https://files.pythonhosted.org/packages/9a/39/bf9392578575de3555abea4dcfaacae639aab9e710742d4803ed77cd5823/EPRsim-0.0.3.dev0.tar.gz", "yanked": false}], "0.0.4.dev0": [{"comment_text": "", "digests": {"md5": "1652b95225a6a1d695fc1712754d667a", "sha256": "fed98ccc6e0b069abd0cfb88f12f9bcba2425112b3cac97e331498e12fd1bc31"}, "downloads": -1, "filename": "EPRsim-0.0.4.dev0-py3-none-any.whl", "has_sig": false, "md5_digest": "1652b95225a6a1d695fc1712754d667a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 75409, "upload_time": "2019-11-25T13:55:32", "upload_time_iso_8601": "2019-11-25T13:55:32.967756Z", "url": "https://files.pythonhosted.org/packages/aa/5c/b3d25cdf895e068019592a7794539579581125262d1b9b2290447776eb46/EPRsim-0.0.4.dev0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c8171a4877eb56e829fd7628f2e4634f", "sha256": "e883164f8a8fc1fe44916cc8b5075f71b0f7b621c514593a513487381604e9fb"}, "downloads": -1, "filename": "EPRsim-0.0.4.dev0.tar.gz", "has_sig": false, "md5_digest": "c8171a4877eb56e829fd7628f2e4634f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 58503, "upload_time": "2019-11-25T13:55:34", "upload_time_iso_8601": "2019-11-25T13:55:34.525850Z", "url": "https://files.pythonhosted.org/packages/0e/d9/949d6f6df441f363edd43df70ebe45d505565c62ba6df6da5e90ac677a66/EPRsim-0.0.4.dev0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1652b95225a6a1d695fc1712754d667a", "sha256": "fed98ccc6e0b069abd0cfb88f12f9bcba2425112b3cac97e331498e12fd1bc31"}, "downloads": -1, "filename": "EPRsim-0.0.4.dev0-py3-none-any.whl", "has_sig": false, "md5_digest": "1652b95225a6a1d695fc1712754d667a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 75409, "upload_time": "2019-11-25T13:55:32", "upload_time_iso_8601": "2019-11-25T13:55:32.967756Z", "url": "https://files.pythonhosted.org/packages/aa/5c/b3d25cdf895e068019592a7794539579581125262d1b9b2290447776eb46/EPRsim-0.0.4.dev0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c8171a4877eb56e829fd7628f2e4634f", "sha256": "e883164f8a8fc1fe44916cc8b5075f71b0f7b621c514593a513487381604e9fb"}, "downloads": -1, "filename": "EPRsim-0.0.4.dev0.tar.gz", "has_sig": false, "md5_digest": "c8171a4877eb56e829fd7628f2e4634f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 58503, "upload_time": "2019-11-25T13:55:34", "upload_time_iso_8601": "2019-11-25T13:55:34.525850Z", "url": "https://files.pythonhosted.org/packages/0e/d9/949d6f6df441f363edd43df70ebe45d505565c62ba6df6da5e90ac677a66/EPRsim-0.0.4.dev0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:55 2020"}