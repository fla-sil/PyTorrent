{"info": {"author": "Grzegorz T\u0119\u017cycki", "author_email": "grzegorz.tezycki@gmail.com", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Framework :: Django", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Topic :: Utilities"], "description": "django-popup-view-field\n------------------------\n\n.. image:: https://badge.fury.io/py/django-popup-view-field.svg\n    :target: https://badge.fury.io/py/django-popup-view-field\n    :alt: Latest PyPI version\n\n\n.. image:: https://travis-ci.org/djk2/django-popup-view-field.svg?branch=master\n    :target: https://travis-ci.org/djk2/django-popup-view-field\n    :alt: Travis CI\n\n\n.. image:: https://requires.io/github/djk2/django-popup-view-field/requirements.svg?branch=master\n    :target: https://requires.io/github/djk2/django-popup-view-field/requirements/?branch=master\n    :alt: Requirements Status\n\n\nField and widget can render bootstrap dialog with content from django view.\nYou can create normal django View and load this view in dialog for form field.\n\n- Support:\n\n    * Python: 2.7, 3.6\n    * Django: 1.9, 1.10, 1.11, 2.0, 2.1, 2.2, 3.0\n    * django-crispy-forms\n    * django-bootstrap3\n    * django-bootstrap4 (!Only for Django >= 2.1)\n\n- Require:\n\n    * Django\n    * bootstrap3 or bootstrap4\n    * JQuery\n\n- Recommended:\n\n    * django-bootstrap3 or django-bootstrap4\n    * django-crispy-forms\n\n- Locale:\n\n    * EN - (english)\n    * PL - (polish)\n\n- Tested on browsers:\n\n    * OK - Chromium 79.0.3945.79 - Ubuntu 18.04\n    * OK - Firefox 72.0.1 (64 bity) - Ubuntu 18.04\n    * OK - Google Chrome 70.0 - Fedora 28\n    * OK - Firefox 62.0.3 - Fedora 28\n    * OK - Firefox 50.1.0 - Ubuntu 14.04\n    * OK - Firefox 31.1 - CentOS 6.4\n    * OK - Chromium 53.0 - Ubuntu 14.04\n    * OK - Microsoft Edge 38 - Windows 10\n    * OK - Internet Explorer 11.0 - Windows 10\n    * OK - Internet Explorer 10.0 - Windows 7\n    * OK - Internet Explorer 9.0 - Windows 7\n    * ER - Internet Explorer <= 8 (no support \"html()\" for data-popup-view-value)\n\n\nScreenshots\n------------\n\n- Example: Form with several popup-view-fields\n\n.. image:: https://raw.githubusercontent.com/djk2/django-popup-view-field/master/doc/static/scr1.png\n    :alt: Form with django-popup-view-fields\n\n- Example: Dialog for select sex\n\n.. image:: https://raw.githubusercontent.com/djk2/django-popup-view-field/master/doc/static/scr2.png\n    :alt: Dialog for select sex\n\n- Example: Dialog for select color\n\n.. image:: https://raw.githubusercontent.com/djk2/django-popup-view-field/master/doc/static/scr3.png\n    :alt: Dialog for select color\n\n- Example: Dialog with form\n\n.. image:: https://raw.githubusercontent.com/djk2/django-popup-view-field/master/doc/static/scr4.png\n    :alt: Dialog with form\n\n\nRun demo\n---------\n1. Clone or download repository::\n\n    git clone https://github.com/djk2/django-popup-view-field.git\n\n2. Create virtualenv or not (red more: http://docs.python-guide.org/en/latest/dev/virtualenvs/)\n\n3. Install requirements for demo::\n\n    cd django-popup-view-field/demo\n\n    pip install -r requirements.txt\n\n4. Run developing web server::\n\n    python manage.py runserver\n\n5. Run your browser and call url: 127.0.0.1:8000 ::\n\n    firefox 127.0.0.1:8000\n\n\nInstall\n--------\nInstall package - There are several solutions, choose your own\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n1. Install using pypi repository::\n\n    pip install django-popup-view-field\n\n2. Install using pip + github repository url::\n\n        pip install git+https://github.com/djk2/django-popup-view-field.git\n\n3. Install using pip + zip archive::\n\n    wget https://github.com/djk2/django-popup-view-field/archive/master.zip\n    pip install master.zip\n\n4. Clone or download application to your django project directory::\n\n    wget https://github.com/djk2/django-popup-view-field/archive/master.zip -O /tmp/master.zip\n    unzip /tmp/master.zip -d /tmp/\n    cd my_project_dir\n    cp -r /tmp/django-popup-view-field-master/django_popup_view_field/ ./\n\nAdd ``django_popup_view_field`` to your INSTALLED_APPS setting\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n*settings.py* ::\n\n    INSTALLED_APPS = [\n        ...\n        'bootstrap3',    # If you use django-bootstrap3\n        'crispy_forms',  # If you user django-crispy-forms\n\n        'django_popup_view_field',\n        ...\n    ]\n\n    # If you want use bootstrap4 then uncomment\n    # DJANGO_POPUP_VIEW_FIELD_TEMPLATE_PACK = 'bootstrap4'\n\n**Warning**:\n Is recommended use django-bootstrap3/django-bootstrap4 or django-crispy-forms\n to render forms and fields, but this is not necessary.\n You can still write django templates using pure CSS from bootstrap3/4.\n More information about bootstrap forms in here: http://getbootstrap.com/css/#forms\n\n\nAdd the django_popup_view_field urls to your root url patterns\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n*urls.py* ::\n\n    urlpatterns = [\n        ...\n        url(\n            r'^django_popup_view_field/',\n            include('django_popup_view_field.urls', namespace=\"django_popup_view_field\")\n        ),\n    ]\n\n**Note**:\n The URL path can be whatever you want,\n but you must include 'django_popup_view_field.urls' with the 'django_popup_view_field' namespace.\n You may leave out the namespace in Django >= 1.9\n\n\nIn your base template, add ``django_popup_view_field_javascript`` tag\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n``django_popup_view_field_javascript`` template tag load all required javascripts and\ntemplate-scripts for application.\nTag should be append before body close </body> tag and after jQuery and Bootstrap scripts.\n\n*base.html* ::\n\n    <!DOCTYPE html>\n    {% load django_popup_view_field_tags %}\n\n    <html>\n        <head>\n            ...\n            <!-- Bootstrap CSS should be here -->\n            ...\n        </head>\n\n        <body>\n            ...\n            ...\n            <!-- jQuery script should be here -->\n            <!-- Bootstrap javascripts should be here -->\n            ...\n            ...\n            {% django_popup_view_field_javascript %}\n        </body>\n    </html>\n\n\nSettings\n----------\n\nDJANGO_POPUP_VIEW_FIELD_TEMPLATE_PACK\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nSince version 0.6.0, django-popup-view-fields has built-in support for bootstrap4 also.\nTo enable support for `bootstrap4` you have to set `DJANGO_POPUP_VIEW_FIELD_TEMPLATE_PACK`\nto \"bootstrap4\" value.\n\n* `bootstrap3` - this setting will be load javascript and html templates for bootstrap3.\n   **This is a default value**\n\n* `bootstrap4` - this setting will be load javascript and html templates for bootstrap4.\n\nValue of DJANGO_POPUP_VIEW_FIELD_TEMPLATE_PACK is changing behavior\nof '{% django_popup_view_field_javascript %}' tag and `PopupViewWidget` class.\nTemplate `scripts_include.html` is using this flag to decide which template\nand javascript will be load. `PopupViewWidget` class is using this flag to decide\nwhich template for field should be load.\n\n\nSimple Example\n------------------------\n\n.. image:: https://raw.githubusercontent.com/djk2/django-popup-view-field/master/doc/static/simple_example.png\n    :alt: Simple Example - screenshot\n\n\nCreate PopupView\n^^^^^^^^^^^^^^^^^\n\nHtml content rendered by this view will be loaded into bootstrap dialog.\nCreate your popup view same as normal django view.\n\n| **Your popup view must be subclass of django.views.generic.View**\n\n*templates/myapp/popups/colors.html* ::\n\n    <ul>\n        <li data-popup-view-value=\"red\" style=\"background:red;\"> red hat </li>\n        <li data-popup-view-value=\"blue\" style=\"background:blue;\"> blue sky </li>\n        <li data-popup-view-value=\"green\" style=\"background:green;\"> green planet </li>\n        <li data-popup-view-value=\"pink\" style=\"background:pink;\"> pink car </li>\n    </ul>\n\nIf user click on the element with the attribute ``data-popup-view-value``,\nthe value of this attribute will be set in form field and dialog will close.\n\n|\n\nIf you want set content of element as value in form field, use ``html()`` for attribute::\n\n    <li data-popup-view-value=\"html()\"> This text will be use :) </li>\n\n*popups.py* ::\n\n    from django.views.generic import TemplateView\n    from django_popup_view_field.registry import registry_popup_view\n\n    class ColorsPopupView(TemplateView):\n        template_name = 'myapp/popups/colors.html'\n\n    # REGISTER IS IMPORTANT\n    registry_popup_view.register(ColorsPopupView)\n\nRemember that you must register your popup view.\nAfter register you can run your popup view by call url::\n\n    ..../django_popup_view_field/ColorsPopupView\n\nIn template you can get url to popup view using url tag::\n\n    {% url \"django_popup_view_field:get_popup_view\" 'ColorsPopupView' %}\n\nAfter register you can unregister your popup view::\n\n    registry_popup_view.unregister(ColorsPopupView)\n\n    # or unregister by view name\n\n    registry_popup_view.unregister_by_name('ColorsPopupView')\n\nYou can also get popup view class by name::\n\n    view_class = registry_popup_view.get('ColorsPopupView')\n    view_class.as_view()\n\n\nCreate Form with PopupViewField\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n*forms.py* ::\n\n    from django import forms\n    from django_popup_view_field.fields import PopupViewField\n    from myapp.popups import ColorsPopupView\n\n    class ColorForm(forms.Form):\n\n        color = PopupViewField(\n            view_class=ColorsPopupView,\n            popup_dialog_title='What is your favorite color',\n            attrs={'readonly': True},\n            required=True,\n            help_text='be honest'\n        )\n\n**class PopupViewField(view_class, popup_dialog_title, *args, **kwargs)**\n\n* ``view_class`` - **required** - popup view class, view to render dialog content, must be subclass of django.views.generic.View\n* ``popup_dialog_title`` - **not required** - Title for dialog, default ``Popup Dialog: Select value``\n* ``attrs`` - **not required** - provides attributes for Widget\n* ``args`` and ``kwargs`` are default for CharField\n\n\nCreate typical FormView\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n*views.py* ::\n\n    from django.views.generic import FormView\n    from myapp.forms import ColorForm\n    from django.http import HttpResponse\n\n    class ColorFormView(FormView):\n        template_name = \"myapp/color_form.html\"\n        form_class = ColorForm\n\n        def form_valid(self, form):\n            color = form.cleaned_data.get(\"color\")\n            return HttpResponse(\"Your color: {0}\".format(color))\n\n**Template using django-crispy-forms**\n\n*templates/myapp/color_form.html* ::\n\n    {% extends \"base.html\" %}\n    {% load crispy_forms_tags %}\n    {% crispy form %}\n\n\n**Template using django-bootstrap3**\n\n*templates/myapp/color_form.html* ::\n\n    {% extends \"base.html\" %}\n    {% load bootstrap3 %}\n\n    <form action=\".\" method=\"post\" class=\"form\">\n        {% csrf_token %}\n        {% bootstrap_form form %}\n        {% buttons %}\n            <button type=\"submit\" class=\"btn btn-primary\">Submit</button>\n        {% endbuttons %}\n    </form>\n\n**Template with pure bootstrap3 css (without django-bootstrap3 and crispy)**\n\n*templates/myapp/color_form.html* ::\n\n    {% extends \"base.html\" %}\n    <form action=\".\" method=\"post\" class=\"form\">\n        <div class=\"form-group\">\n            <label class=\"control-label\"> {{ form.color.label }} </label>\n            {{ form.color }}\n        </div>\n        <button type=\"submit\" class=\"btn btn-primary\">Submit</button>\n    </form>\n\n\ncallback_data attribute\n------------------------\nIf you want pass extra parameters to your popup view, you should use `callback_data`\nattribute for PopupViewField. This argument should be dictionary or OrderedDict.\nThis dictionary containing yours parameters will be encoded to ASCII text string and\nadded to url address. In your popup view You can take this parameters from `request.GET`.\n\n*popups.py* ::\n\n    from django.views.generic import View\n    from django_popup_view_field.registry import registry_popup_view\n\n    class FooPopupView(View):\n        def get(self, request):\n            print(request.GET['extra_param'])  # --> will be \"Foo Bar\"\n            print(request.GET['my_pk'])        # --> will be 666\n            ....\n\n    # REGISTER IS IMPORTANT\n    registry_popup_view.register(FooPopupView)\n\n*forms.py* ::\n\n    from django import forms\n    from django_popup_view_field.fields import PopupViewField\n\n    class FooForm(forms.Form):\n\n        some_field = PopupViewField(\n            view_class=FooPopupView,\n            callback_data={\n                'extra_param': 'Foo Bar',\n                'my_pk': 666\n            }\n        )\n\n\n\nAdvanced Example\n------------------------\n\nAdvanced Example use django-bootstrap3.\nDialog is interactive, all links and forms will be send via Ajax and response will be loaded in dialog.\n\n.. image:: https://raw.githubusercontent.com/djk2/django-popup-view-field/master/doc/static/advanced_example.png\n    :alt: Advanced Example - screenshot\n\n\nPopupView\n^^^^^^^^^^\n\n*templates/myapp/popups/alphabet.html* ::\n\n    <h4> Select the first letter of your name </h4>\n\n    {% for char in alphabet %}\n        <div class=\"btn btn-xs btn-info\" data-popup-view-value=\"html()\">\n            {{ char }}\n        </div>\n        {% if forloop.counter|divisibleby:\"13\" and forloop.counter > 0 %}\n            <br/><br/>\n        {% endif %}\n    {% endfor %}\n\n    {# Button to change order #}\n    <a class=\"btn btn-xs btn-primary\" style=\"margin-top:20px;\"\n              href=\"{% url \"django_popup_view_field:get_popup_view\" 'AlphabetPopupView' %}?direction={{direction}}\">\n        Reverse order\n    </a>\n\n*popups.py* ::\n\n    from django.views.generic import TemplateView\n    from django_popup_view_field.registry import registry_popup_view\n    from string import ascii_uppercase\n\n    class AlphabetPopupView(TemplateView):\n        template_name = 'myapp/popups/alphabet.html'\n        direction = 1\n\n        def get_context_data(self, **kwargs):\n            self.direction = int(self.request.GET.get(\"direction\") or self.direction)\n            alphabet = ascii_uppercase[::self.direction]\n            ctx = super(AlphabetPopupView, self).get_context_data(**kwargs)\n            ctx['alphabet'] = alphabet\n            ctx['direction'] = self.direction * -1\n            return ctx\n\n    # REGISTER IS IMPORTANT\n    registry_popup_view.register(AlphabetPopupView)\n\n\nForm with PopupViewField\n^^^^^^^^^^^^^^^^^^^^^^^^^^\n*forms.py* ::\n\n    from django import forms\n    from django_popup_view_field.fields import PopupViewField\n    from myapp.popups import AlphabetPopupView\n\n    class AlphabetForm(forms.Form):\n\n        char = PopupViewField(view_class=AlphabetPopupView, required=True)\n\nView\n^^^^^\n\n*templates/myapp/alphabet.html* ::\n\n    {% extends \"base.html\" %}\n    {% load bootstrap3 %}\n\n    <form action=\".\" method=\"post\" class=\"form\">\n        {% csrf_token %}\n        {% bootstrap_form form %}\n        {% buttons %}\n            <button type=\"submit\" class=\"btn btn-primary\">Submit</button>\n        {% endbuttons %}\n    </form>\n\n*views.py* ::\n\n    from django.views.generic import FormView\n    from myapp.forms import AlphabetForm\n    from django.http import HttpResponse\n\n    class AlphabetFormView(FormView):\n        template_name = \"myapp/alphabet.html\"\n        form_class = AlphabetForm\n\n        def form_valid(self, form):\n            char = form.cleaned_data.get(\"char\")\n            return HttpResponse(\"First letter of your name : {0}\".format(char))\n\n\nPopupViewModelField Example\n-----------------------------\n``PopupViewModelField`` allows you to send model objects through the form inheriting from ``ModelForm``.\n\n.. image:: https://raw.githubusercontent.com/djk2/django-popup-view-field/master/doc/static/PopupViewModelField_example.png\n    :alt: PopupViewModelField Example - screenshot\n\n\nModel\n^^^^^^^\n*models.py* ::\n\n    from django.db import models\n\n\n    class Country(models.Model):\n        code = models.CharField(max_length=2, primary_key=True)\n        name = models.CharField(max_length=256)\n\n\n    class ExampleUser(models.Model):\n        first_name = models.CharField(max_length=30)\n        last_name = models.CharField(max_length=30)\n        country_code = models.ForeignKey(Country, on_delete=models.PROTECT)\n\n\nPopupView\n^^^^^^^^^^\n*templates/myapp/popups/country.html* ::\n\n    <ul>\n        {% for country in countries %}\n            <li style=\"cursor:pointer\" data-popup-view-value=\"{{ country.code }}\">\n                <strong>{{ country.code }}</strong> - {{ country.name }}\n            </li>\n        {% endfor %}\n    <ul>\n\n**Note:**\n ``data-popup-view-value`` attribute should return the primary key value of the model object.\n\n*popups.py* ::\n\n    class CountryPopupView(TemplateView):\n\n    template_name = \"myapp/popups/country.html\"\n    countries = None\n\n    def get(self, request, *args, **kwargs):\n        self.countries = Country.objects.all()\n        return super(CountryPopupView, self).get(request, *args, **kwargs)\n\n    def get_context_data(self, **kwargs):\n        context = super(CountryPopupView, self).get_context_data(**kwargs)\n        context['countries'] = self.countries\n        return context\n\n    # REGISTER IS IMPORTANT\n    registry_popup_view.register(CountryPopupView)\n\n\nForm with PopupViewModelField\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n*forms.py* ::\n\n    from django import forms\n    from django.forms import ModelForm\n    from .models import Country, ExampleUser\n    from django_popup_view_field.fields import PopupViewModelField\n\n    class CountryForm(ModelForm):\n\n        country_code = PopupViewModelField(\n            queryset=Country.objects.all(),\n            view_class=CountryPopupView,\n            required=True\n        )\n\n        class Meta:\n            model = ExampleUser\n            fields = ('first_name', 'last_name', 'country_code')\n\n**Note:**\n ``PopupViewModelField`` must have an additional ``queryset`` argument in which we pass model objects.\n\n\nView\n^^^^^\n*templates/myapp/country.html* ::\n\n    {% extends \"base.html\" %}\n    {% load bootstrap3 %}\n\n    <form action=\".\" method=\"post\" class=\"form\">\n        {% csrf_token %}\n        {% bootstrap_form form %}\n        {% buttons %}\n            <button type=\"submit\" class=\"btn btn-primary\">Submit</button>\n        {% endbuttons %}\n    </form>\n\n*views.py* ::\n\n    from django.views.generic import FormView\n    from myapp.forms import CountryForm\n    from django.contrib import messages\n\n    class CountryFormView(FormView):\n        template_name = \"myapp/country.html\"\n        form_class = CountryForm\n\n        def form_valid(self, form):\n            ret = super(CountryFormView, self).form_valid(form)\n            country_code = form.cleaned_data.get(\"country_code\")\n            messages.success(\n                self.request,\n                \"Success in create example user with code of country: {0}\".format(country_code)\n            )\n            return ret\n\n\nOthers\n---------\n* Remember, if you use a django-crispy-forms then you should set CRISPY_TEMPLATE_PACK = \"bootstrap3\" in settings.py\n\n* If you want change locale (Polish, English is supported) then you must add ``LocaleMiddleware`` to your settings.MIDDLEWARE::\n\n    MIDDLEWARE = [\n        'django.contrib.sessions.middleware.SessionMiddleware',\n        ...\n        'django.middleware.locale.LocaleMiddleware',\n    ]\n\n* More about bootstrap in here : http://getbootstrap.com/\n\n* More about django-crispy-forms in here : http://django-crispy-forms.readthedocs.io/en/latest/\n\n* More about django-bootstrap3 in here : http://django-bootstrap3.readthedocs.io/en/latest/\n\n* More about django-bootstrap4 in here : https://django-bootstrap4.readthedocs.io/en/latest/\n\n* Documentation prepared with the help of **Online reStructuredText editor** : http://rst.ninjs.org/\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/djk2/django-popup-view-field", "keywords": "popup crispy bootstrap views", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "django-popup-view-field", "package_url": "https://pypi.org/project/django-popup-view-field/", "platform": "", "project_url": "https://pypi.org/project/django-popup-view-field/", "project_urls": {"Homepage": "https://github.com/djk2/django-popup-view-field"}, "release_url": "https://pypi.org/project/django-popup-view-field/0.6.1/", "requires_dist": ["Django (>=1.8)"], "requires_python": "", "summary": "Field and widget can render bootstrap dialog window with content from django view", "version": "0.6.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>django-popup-view-field</h2>\n<p>.. image:: <a href=\"https://badge.fury.io/py/django-popup-view-field.svg\" rel=\"nofollow\">https://badge.fury.io/py/django-popup-view-field.svg</a>\n:target: <a href=\"https://badge.fury.io/py/django-popup-view-field\" rel=\"nofollow\">https://badge.fury.io/py/django-popup-view-field</a>\n:alt: Latest PyPI version</p>\n<p>.. image:: <a href=\"https://travis-ci.org/djk2/django-popup-view-field.svg?branch=master\" rel=\"nofollow\">https://travis-ci.org/djk2/django-popup-view-field.svg?branch=master</a>\n:target: <a href=\"https://travis-ci.org/djk2/django-popup-view-field\" rel=\"nofollow\">https://travis-ci.org/djk2/django-popup-view-field</a>\n:alt: Travis CI</p>\n<p>.. image:: <a href=\"https://requires.io/github/djk2/django-popup-view-field/requirements.svg?branch=master\" rel=\"nofollow\">https://requires.io/github/djk2/django-popup-view-field/requirements.svg?branch=master</a>\n:target: <a href=\"https://requires.io/github/djk2/django-popup-view-field/requirements/?branch=master\" rel=\"nofollow\">https://requires.io/github/djk2/django-popup-view-field/requirements/?branch=master</a>\n:alt: Requirements Status</p>\n<p>Field and widget can render bootstrap dialog with content from django view.\nYou can create normal django View and load this view in dialog for form field.</p>\n<ul>\n<li>\n<p>Support:</p>\n<ul>\n<li>Python: 2.7, 3.6</li>\n<li>Django: 1.9, 1.10, 1.11, 2.0, 2.1, 2.2, 3.0</li>\n<li>django-crispy-forms</li>\n<li>django-bootstrap3</li>\n<li>django-bootstrap4 (!Only for Django &gt;= 2.1)</li>\n</ul>\n</li>\n<li>\n<p>Require:</p>\n<ul>\n<li>Django</li>\n<li>bootstrap3 or bootstrap4</li>\n<li>JQuery</li>\n</ul>\n</li>\n<li>\n<p>Recommended:</p>\n<ul>\n<li>django-bootstrap3 or django-bootstrap4</li>\n<li>django-crispy-forms</li>\n</ul>\n</li>\n<li>\n<p>Locale:</p>\n<ul>\n<li>EN - (english)</li>\n<li>PL - (polish)</li>\n</ul>\n</li>\n<li>\n<p>Tested on browsers:</p>\n<ul>\n<li>OK - Chromium 79.0.3945.79 - Ubuntu 18.04</li>\n<li>OK - Firefox 72.0.1 (64 bity) - Ubuntu 18.04</li>\n<li>OK - Google Chrome 70.0 - Fedora 28</li>\n<li>OK - Firefox 62.0.3 - Fedora 28</li>\n<li>OK - Firefox 50.1.0 - Ubuntu 14.04</li>\n<li>OK - Firefox 31.1 - CentOS 6.4</li>\n<li>OK - Chromium 53.0 - Ubuntu 14.04</li>\n<li>OK - Microsoft Edge 38 - Windows 10</li>\n<li>OK - Internet Explorer 11.0 - Windows 10</li>\n<li>OK - Internet Explorer 10.0 - Windows 7</li>\n<li>OK - Internet Explorer 9.0 - Windows 7</li>\n<li>ER - Internet Explorer &lt;= 8 (no support \"html()\" for data-popup-view-value)</li>\n</ul>\n</li>\n</ul>\n<h2>Screenshots</h2>\n<ul>\n<li>Example: Form with several popup-view-fields</li>\n</ul>\n<p>.. image:: <a href=\"https://raw.githubusercontent.com/djk2/django-popup-view-field/master/doc/static/scr1.png\" rel=\"nofollow\">https://raw.githubusercontent.com/djk2/django-popup-view-field/master/doc/static/scr1.png</a>\n:alt: Form with django-popup-view-fields</p>\n<ul>\n<li>Example: Dialog for select sex</li>\n</ul>\n<p>.. image:: <a href=\"https://raw.githubusercontent.com/djk2/django-popup-view-field/master/doc/static/scr2.png\" rel=\"nofollow\">https://raw.githubusercontent.com/djk2/django-popup-view-field/master/doc/static/scr2.png</a>\n:alt: Dialog for select sex</p>\n<ul>\n<li>Example: Dialog for select color</li>\n</ul>\n<p>.. image:: <a href=\"https://raw.githubusercontent.com/djk2/django-popup-view-field/master/doc/static/scr3.png\" rel=\"nofollow\">https://raw.githubusercontent.com/djk2/django-popup-view-field/master/doc/static/scr3.png</a>\n:alt: Dialog for select color</p>\n<ul>\n<li>Example: Dialog with form</li>\n</ul>\n<p>.. image:: <a href=\"https://raw.githubusercontent.com/djk2/django-popup-view-field/master/doc/static/scr4.png\" rel=\"nofollow\">https://raw.githubusercontent.com/djk2/django-popup-view-field/master/doc/static/scr4.png</a>\n:alt: Dialog with form</p>\n<h2>Run demo</h2>\n<ol>\n<li>\n<p>Clone or download repository::</p>\n<p>git clone <a href=\"https://github.com/djk2/django-popup-view-field.git\" rel=\"nofollow\">https://github.com/djk2/django-popup-view-field.git</a></p>\n</li>\n<li>\n<p>Create virtualenv or not (red more: <a href=\"http://docs.python-guide.org/en/latest/dev/virtualenvs/\" rel=\"nofollow\">http://docs.python-guide.org/en/latest/dev/virtualenvs/</a>)</p>\n</li>\n<li>\n<p>Install requirements for demo::</p>\n<p>cd django-popup-view-field/demo</p>\n<p>pip install -r requirements.txt</p>\n</li>\n<li>\n<p>Run developing web server::</p>\n<p>python manage.py runserver</p>\n</li>\n<li>\n<p>Run your browser and call url: 127.0.0.1:8000 ::</p>\n<p>firefox 127.0.0.1:8000</p>\n</li>\n</ol>\n<h2>Install</h2>\n<p>Install package - There are several solutions, choose your own\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</p>\n<ol>\n<li>\n<p>Install using pypi repository::</p>\n<p>pip install django-popup-view-field</p>\n</li>\n<li>\n<p>Install using pip + github repository url::</p>\n<pre><code> pip install git+https://github.com/djk2/django-popup-view-field.git\n</code></pre>\n</li>\n<li>\n<p>Install using pip + zip archive::</p>\n<p>wget <a href=\"https://github.com/djk2/django-popup-view-field/archive/master.zip\" rel=\"nofollow\">https://github.com/djk2/django-popup-view-field/archive/master.zip</a>\npip install master.zip</p>\n</li>\n<li>\n<p>Clone or download application to your django project directory::</p>\n<p>wget <a href=\"https://github.com/djk2/django-popup-view-field/archive/master.zip\" rel=\"nofollow\">https://github.com/djk2/django-popup-view-field/archive/master.zip</a> -O /tmp/master.zip\nunzip /tmp/master.zip -d /tmp/\ncd my_project_dir\ncp -r /tmp/django-popup-view-field-master/django_popup_view_field/ ./</p>\n</li>\n</ol>\n<p>Add <code>django_popup_view_field</code> to your INSTALLED_APPS setting\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</p>\n<p><em>settings.py</em> ::</p>\n<pre><code>INSTALLED_APPS = [\n    ...\n    'bootstrap3',    # If you use django-bootstrap3\n    'crispy_forms',  # If you user django-crispy-forms\n\n    'django_popup_view_field',\n    ...\n]\n\n# If you want use bootstrap4 then uncomment\n# DJANGO_POPUP_VIEW_FIELD_TEMPLATE_PACK = 'bootstrap4'\n</code></pre>\n<p><strong>Warning</strong>:\nIs recommended use django-bootstrap3/django-bootstrap4 or django-crispy-forms\nto render forms and fields, but this is not necessary.\nYou can still write django templates using pure CSS from bootstrap3/4.\nMore information about bootstrap forms in here: <a href=\"http://getbootstrap.com/css/#forms\" rel=\"nofollow\">http://getbootstrap.com/css/#forms</a></p>\n<p>Add the django_popup_view_field urls to your root url patterns\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n<em>urls.py</em> ::</p>\n<pre><code>urlpatterns = [\n    ...\n    url(\n        r'^django_popup_view_field/',\n        include('django_popup_view_field.urls', namespace=\"django_popup_view_field\")\n    ),\n]\n</code></pre>\n<p><strong>Note</strong>:\nThe URL path can be whatever you want,\nbut you must include 'django_popup_view_field.urls' with the 'django_popup_view_field' namespace.\nYou may leave out the namespace in Django &gt;= 1.9</p>\n<p>In your base template, add <code>django_popup_view_field_javascript</code> tag\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n<code>django_popup_view_field_javascript</code> template tag load all required javascripts and\ntemplate-scripts for application.\nTag should be append before body close &lt;/body&gt; tag and after jQuery and Bootstrap scripts.</p>\n<p><em>base.html</em> ::</p>\n<pre><code>&lt;!DOCTYPE html&gt;\n{% load django_popup_view_field_tags %}\n\n&lt;html&gt;\n    &lt;head&gt;\n        ...\n        &lt;!-- Bootstrap CSS should be here --&gt;\n        ...\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        ...\n        ...\n        &lt;!-- jQuery script should be here --&gt;\n        &lt;!-- Bootstrap javascripts should be here --&gt;\n        ...\n        ...\n        {% django_popup_view_field_javascript %}\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h2>Settings</h2>\n<p>DJANGO_POPUP_VIEW_FIELD_TEMPLATE_PACK\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nSince version 0.6.0, django-popup-view-fields has built-in support for bootstrap4 also.\nTo enable support for <code>bootstrap4</code> you have to set <code>DJANGO_POPUP_VIEW_FIELD_TEMPLATE_PACK</code>\nto \"bootstrap4\" value.</p>\n<ul>\n<li>\n<p><code>bootstrap3</code> - this setting will be load javascript and html templates for bootstrap3.\n<strong>This is a default value</strong></p>\n</li>\n<li>\n<p><code>bootstrap4</code> - this setting will be load javascript and html templates for bootstrap4.</p>\n</li>\n</ul>\n<p>Value of DJANGO_POPUP_VIEW_FIELD_TEMPLATE_PACK is changing behavior\nof '{% django_popup_view_field_javascript %}' tag and <code>PopupViewWidget</code> class.\nTemplate <code>scripts_include.html</code> is using this flag to decide which template\nand javascript will be load. <code>PopupViewWidget</code> class is using this flag to decide\nwhich template for field should be load.</p>\n<h2>Simple Example</h2>\n<p>.. image:: <a href=\"https://raw.githubusercontent.com/djk2/django-popup-view-field/master/doc/static/simple_example.png\" rel=\"nofollow\">https://raw.githubusercontent.com/djk2/django-popup-view-field/master/doc/static/simple_example.png</a>\n:alt: Simple Example - screenshot</p>\n<p>Create PopupView\n^^^^^^^^^^^^^^^^^</p>\n<p>Html content rendered by this view will be loaded into bootstrap dialog.\nCreate your popup view same as normal django view.</p>\n<p>| <strong>Your popup view must be subclass of django.views.generic.View</strong></p>\n<p><em>templates/myapp/popups/colors.html</em> ::</p>\n<pre><code>&lt;ul&gt;\n    &lt;li data-popup-view-value=\"red\" style=\"background:red;\"&gt; red hat &lt;/li&gt;\n    &lt;li data-popup-view-value=\"blue\" style=\"background:blue;\"&gt; blue sky &lt;/li&gt;\n    &lt;li data-popup-view-value=\"green\" style=\"background:green;\"&gt; green planet &lt;/li&gt;\n    &lt;li data-popup-view-value=\"pink\" style=\"background:pink;\"&gt; pink car &lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n<p>If user click on the element with the attribute <code>data-popup-view-value</code>,\nthe value of this attribute will be set in form field and dialog will close.</p>\n<p>|</p>\n<p>If you want set content of element as value in form field, use <code>html()</code> for attribute::</p>\n<pre><code>&lt;li data-popup-view-value=\"html()\"&gt; This text will be use :) &lt;/li&gt;\n</code></pre>\n<p><em>popups.py</em> ::</p>\n<pre><code>from django.views.generic import TemplateView\nfrom django_popup_view_field.registry import registry_popup_view\n\nclass ColorsPopupView(TemplateView):\n    template_name = 'myapp/popups/colors.html'\n\n# REGISTER IS IMPORTANT\nregistry_popup_view.register(ColorsPopupView)\n</code></pre>\n<p>Remember that you must register your popup view.\nAfter register you can run your popup view by call url::</p>\n<pre><code>..../django_popup_view_field/ColorsPopupView\n</code></pre>\n<p>In template you can get url to popup view using url tag::</p>\n<pre><code>{% url \"django_popup_view_field:get_popup_view\" 'ColorsPopupView' %}\n</code></pre>\n<p>After register you can unregister your popup view::</p>\n<pre><code>registry_popup_view.unregister(ColorsPopupView)\n\n# or unregister by view name\n\nregistry_popup_view.unregister_by_name('ColorsPopupView')\n</code></pre>\n<p>You can also get popup view class by name::</p>\n<pre><code>view_class = registry_popup_view.get('ColorsPopupView')\nview_class.as_view()\n</code></pre>\n<p>Create Form with PopupViewField\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n<em>forms.py</em> ::</p>\n<pre><code>from django import forms\nfrom django_popup_view_field.fields import PopupViewField\nfrom myapp.popups import ColorsPopupView\n\nclass ColorForm(forms.Form):\n\n    color = PopupViewField(\n        view_class=ColorsPopupView,\n        popup_dialog_title='What is your favorite color',\n        attrs={'readonly': True},\n        required=True,\n        help_text='be honest'\n    )\n</code></pre>\n<p>**class PopupViewField(view_class, popup_dialog_title, *args, <strong>kwargs)</strong></p>\n<ul>\n<li><code>view_class</code> - <strong>required</strong> - popup view class, view to render dialog content, must be subclass of django.views.generic.View</li>\n<li><code>popup_dialog_title</code> - <strong>not required</strong> - Title for dialog, default <code>Popup Dialog: Select value</code></li>\n<li><code>attrs</code> - <strong>not required</strong> - provides attributes for Widget</li>\n<li><code>args</code> and <code>kwargs</code> are default for CharField</li>\n</ul>\n<p>Create typical FormView\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n<em>views.py</em> ::</p>\n<pre><code>from django.views.generic import FormView\nfrom myapp.forms import ColorForm\nfrom django.http import HttpResponse\n\nclass ColorFormView(FormView):\n    template_name = \"myapp/color_form.html\"\n    form_class = ColorForm\n\n    def form_valid(self, form):\n        color = form.cleaned_data.get(\"color\")\n        return HttpResponse(\"Your color: {0}\".format(color))\n</code></pre>\n<p><strong>Template using django-crispy-forms</strong></p>\n<p><em>templates/myapp/color_form.html</em> ::</p>\n<pre><code>{% extends \"base.html\" %}\n{% load crispy_forms_tags %}\n{% crispy form %}\n</code></pre>\n<p><strong>Template using django-bootstrap3</strong></p>\n<p><em>templates/myapp/color_form.html</em> ::</p>\n<pre><code>{% extends \"base.html\" %}\n{% load bootstrap3 %}\n\n&lt;form action=\".\" method=\"post\" class=\"form\"&gt;\n    {% csrf_token %}\n    {% bootstrap_form form %}\n    {% buttons %}\n        &lt;button type=\"submit\" class=\"btn btn-primary\"&gt;Submit&lt;/button&gt;\n    {% endbuttons %}\n&lt;/form&gt;\n</code></pre>\n<p><strong>Template with pure bootstrap3 css (without django-bootstrap3 and crispy)</strong></p>\n<p><em>templates/myapp/color_form.html</em> ::</p>\n<pre><code>{% extends \"base.html\" %}\n&lt;form action=\".\" method=\"post\" class=\"form\"&gt;\n    &lt;div class=\"form-group\"&gt;\n        &lt;label class=\"control-label\"&gt; {{ form.color.label }} &lt;/label&gt;\n        {{ form.color }}\n    &lt;/div&gt;\n    &lt;button type=\"submit\" class=\"btn btn-primary\"&gt;Submit&lt;/button&gt;\n&lt;/form&gt;\n</code></pre>\n<h2>callback_data attribute</h2>\n<p>If you want pass extra parameters to your popup view, you should use <code>callback_data</code>\nattribute for PopupViewField. This argument should be dictionary or OrderedDict.\nThis dictionary containing yours parameters will be encoded to ASCII text string and\nadded to url address. In your popup view You can take this parameters from <code>request.GET</code>.</p>\n<p><em>popups.py</em> ::</p>\n<pre><code>from django.views.generic import View\nfrom django_popup_view_field.registry import registry_popup_view\n\nclass FooPopupView(View):\n    def get(self, request):\n        print(request.GET['extra_param'])  # --&gt; will be \"Foo Bar\"\n        print(request.GET['my_pk'])        # --&gt; will be 666\n        ....\n\n# REGISTER IS IMPORTANT\nregistry_popup_view.register(FooPopupView)\n</code></pre>\n<p><em>forms.py</em> ::</p>\n<pre><code>from django import forms\nfrom django_popup_view_field.fields import PopupViewField\n\nclass FooForm(forms.Form):\n\n    some_field = PopupViewField(\n        view_class=FooPopupView,\n        callback_data={\n            'extra_param': 'Foo Bar',\n            'my_pk': 666\n        }\n    )\n</code></pre>\n<h2>Advanced Example</h2>\n<p>Advanced Example use django-bootstrap3.\nDialog is interactive, all links and forms will be send via Ajax and response will be loaded in dialog.</p>\n<p>.. image:: <a href=\"https://raw.githubusercontent.com/djk2/django-popup-view-field/master/doc/static/advanced_example.png\" rel=\"nofollow\">https://raw.githubusercontent.com/djk2/django-popup-view-field/master/doc/static/advanced_example.png</a>\n:alt: Advanced Example - screenshot</p>\n<p>PopupView\n^^^^^^^^^^</p>\n<p><em>templates/myapp/popups/alphabet.html</em> ::</p>\n<pre><code>&lt;h4&gt; Select the first letter of your name &lt;/h4&gt;\n\n{% for char in alphabet %}\n    &lt;div class=\"btn btn-xs btn-info\" data-popup-view-value=\"html()\"&gt;\n        {{ char }}\n    &lt;/div&gt;\n    {% if forloop.counter|divisibleby:\"13\" and forloop.counter &gt; 0 %}\n        &lt;br/&gt;&lt;br/&gt;\n    {% endif %}\n{% endfor %}\n\n{# Button to change order #}\n&lt;a class=\"btn btn-xs btn-primary\" style=\"margin-top:20px;\"\n          href=\"{% url \"django_popup_view_field:get_popup_view\" 'AlphabetPopupView' %}?direction={{direction}}\"&gt;\n    Reverse order\n&lt;/a&gt;\n</code></pre>\n<p><em>popups.py</em> ::</p>\n<pre><code>from django.views.generic import TemplateView\nfrom django_popup_view_field.registry import registry_popup_view\nfrom string import ascii_uppercase\n\nclass AlphabetPopupView(TemplateView):\n    template_name = 'myapp/popups/alphabet.html'\n    direction = 1\n\n    def get_context_data(self, **kwargs):\n        self.direction = int(self.request.GET.get(\"direction\") or self.direction)\n        alphabet = ascii_uppercase[::self.direction]\n        ctx = super(AlphabetPopupView, self).get_context_data(**kwargs)\n        ctx['alphabet'] = alphabet\n        ctx['direction'] = self.direction * -1\n        return ctx\n\n# REGISTER IS IMPORTANT\nregistry_popup_view.register(AlphabetPopupView)\n</code></pre>\n<p>Form with PopupViewField\n^^^^^^^^^^^^^^^^^^^^^^^^^^\n<em>forms.py</em> ::</p>\n<pre><code>from django import forms\nfrom django_popup_view_field.fields import PopupViewField\nfrom myapp.popups import AlphabetPopupView\n\nclass AlphabetForm(forms.Form):\n\n    char = PopupViewField(view_class=AlphabetPopupView, required=True)\n</code></pre>\n<p>View\n^^^^^</p>\n<p><em>templates/myapp/alphabet.html</em> ::</p>\n<pre><code>{% extends \"base.html\" %}\n{% load bootstrap3 %}\n\n&lt;form action=\".\" method=\"post\" class=\"form\"&gt;\n    {% csrf_token %}\n    {% bootstrap_form form %}\n    {% buttons %}\n        &lt;button type=\"submit\" class=\"btn btn-primary\"&gt;Submit&lt;/button&gt;\n    {% endbuttons %}\n&lt;/form&gt;\n</code></pre>\n<p><em>views.py</em> ::</p>\n<pre><code>from django.views.generic import FormView\nfrom myapp.forms import AlphabetForm\nfrom django.http import HttpResponse\n\nclass AlphabetFormView(FormView):\n    template_name = \"myapp/alphabet.html\"\n    form_class = AlphabetForm\n\n    def form_valid(self, form):\n        char = form.cleaned_data.get(\"char\")\n        return HttpResponse(\"First letter of your name : {0}\".format(char))\n</code></pre>\n<h2>PopupViewModelField Example</h2>\n<p><code>PopupViewModelField</code> allows you to send model objects through the form inheriting from <code>ModelForm</code>.</p>\n<p>.. image:: <a href=\"https://raw.githubusercontent.com/djk2/django-popup-view-field/master/doc/static/PopupViewModelField_example.png\" rel=\"nofollow\">https://raw.githubusercontent.com/djk2/django-popup-view-field/master/doc/static/PopupViewModelField_example.png</a>\n:alt: PopupViewModelField Example - screenshot</p>\n<p>Model\n^^^^^^^\n<em>models.py</em> ::</p>\n<pre><code>from django.db import models\n\n\nclass Country(models.Model):\n    code = models.CharField(max_length=2, primary_key=True)\n    name = models.CharField(max_length=256)\n\n\nclass ExampleUser(models.Model):\n    first_name = models.CharField(max_length=30)\n    last_name = models.CharField(max_length=30)\n    country_code = models.ForeignKey(Country, on_delete=models.PROTECT)\n</code></pre>\n<p>PopupView\n^^^^^^^^^^\n<em>templates/myapp/popups/country.html</em> ::</p>\n<pre><code>&lt;ul&gt;\n    {% for country in countries %}\n        &lt;li style=\"cursor:pointer\" data-popup-view-value=\"{{ country.code }}\"&gt;\n            &lt;strong&gt;{{ country.code }}&lt;/strong&gt; - {{ country.name }}\n        &lt;/li&gt;\n    {% endfor %}\n&lt;ul&gt;\n</code></pre>\n<p><strong>Note:</strong>\n<code>data-popup-view-value</code> attribute should return the primary key value of the model object.</p>\n<p><em>popups.py</em> ::</p>\n<pre><code>class CountryPopupView(TemplateView):\n\ntemplate_name = \"myapp/popups/country.html\"\ncountries = None\n\ndef get(self, request, *args, **kwargs):\n    self.countries = Country.objects.all()\n    return super(CountryPopupView, self).get(request, *args, **kwargs)\n\ndef get_context_data(self, **kwargs):\n    context = super(CountryPopupView, self).get_context_data(**kwargs)\n    context['countries'] = self.countries\n    return context\n\n# REGISTER IS IMPORTANT\nregistry_popup_view.register(CountryPopupView)\n</code></pre>\n<p>Form with PopupViewModelField\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n<em>forms.py</em> ::</p>\n<pre><code>from django import forms\nfrom django.forms import ModelForm\nfrom .models import Country, ExampleUser\nfrom django_popup_view_field.fields import PopupViewModelField\n\nclass CountryForm(ModelForm):\n\n    country_code = PopupViewModelField(\n        queryset=Country.objects.all(),\n        view_class=CountryPopupView,\n        required=True\n    )\n\n    class Meta:\n        model = ExampleUser\n        fields = ('first_name', 'last_name', 'country_code')\n</code></pre>\n<p><strong>Note:</strong>\n<code>PopupViewModelField</code> must have an additional <code>queryset</code> argument in which we pass model objects.</p>\n<p>View\n^^^^^\n<em>templates/myapp/country.html</em> ::</p>\n<pre><code>{% extends \"base.html\" %}\n{% load bootstrap3 %}\n\n&lt;form action=\".\" method=\"post\" class=\"form\"&gt;\n    {% csrf_token %}\n    {% bootstrap_form form %}\n    {% buttons %}\n        &lt;button type=\"submit\" class=\"btn btn-primary\"&gt;Submit&lt;/button&gt;\n    {% endbuttons %}\n&lt;/form&gt;\n</code></pre>\n<p><em>views.py</em> ::</p>\n<pre><code>from django.views.generic import FormView\nfrom myapp.forms import CountryForm\nfrom django.contrib import messages\n\nclass CountryFormView(FormView):\n    template_name = \"myapp/country.html\"\n    form_class = CountryForm\n\n    def form_valid(self, form):\n        ret = super(CountryFormView, self).form_valid(form)\n        country_code = form.cleaned_data.get(\"country_code\")\n        messages.success(\n            self.request,\n            \"Success in create example user with code of country: {0}\".format(country_code)\n        )\n        return ret\n</code></pre>\n<h2>Others</h2>\n<ul>\n<li>\n<p>Remember, if you use a django-crispy-forms then you should set CRISPY_TEMPLATE_PACK = \"bootstrap3\" in settings.py</p>\n</li>\n<li>\n<p>If you want change locale (Polish, English is supported) then you must add <code>LocaleMiddleware</code> to your settings.MIDDLEWARE::</p>\n<p>MIDDLEWARE = [\n'django.contrib.sessions.middleware.SessionMiddleware',\n...\n'django.middleware.locale.LocaleMiddleware',\n]</p>\n</li>\n<li>\n<p>More about bootstrap in here : <a href=\"http://getbootstrap.com/\" rel=\"nofollow\">http://getbootstrap.com/</a></p>\n</li>\n<li>\n<p>More about django-crispy-forms in here : <a href=\"http://django-crispy-forms.readthedocs.io/en/latest/\" rel=\"nofollow\">http://django-crispy-forms.readthedocs.io/en/latest/</a></p>\n</li>\n<li>\n<p>More about django-bootstrap3 in here : <a href=\"http://django-bootstrap3.readthedocs.io/en/latest/\" rel=\"nofollow\">http://django-bootstrap3.readthedocs.io/en/latest/</a></p>\n</li>\n<li>\n<p>More about django-bootstrap4 in here : <a href=\"https://django-bootstrap4.readthedocs.io/en/latest/\" rel=\"nofollow\">https://django-bootstrap4.readthedocs.io/en/latest/</a></p>\n</li>\n<li>\n<p>Documentation prepared with the help of <strong>Online reStructuredText editor</strong> : <a href=\"http://rst.ninjs.org/\" rel=\"nofollow\">http://rst.ninjs.org/</a></p>\n</li>\n</ul>\n\n          </div>"}, "last_serial": 6528553, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "67872402999a29e9b9d75e9b71c02699", "sha256": "5d6c71bee9e86af5ec4cf060fdfcefd82d1a43d8d94d935393aedc3af56634f0"}, "downloads": -1, "filename": "django_popup_view_field-0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "67872402999a29e9b9d75e9b71c02699", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 27288, "upload_time": "2016-12-27T14:04:31", "upload_time_iso_8601": "2016-12-27T14:04:31.523434Z", "url": "https://files.pythonhosted.org/packages/4a/32/2e3b33356f297967e3b566e01b33144d3ebf425dfc19c73822cf773d03a2/django_popup_view_field-0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3375d4515ea328fd1eb7495a4c13ff1a", "sha256": "24e01f3af5f8caea1da2988aef81415153e72cf885f99f5b4fe53ecea080484c"}, "downloads": -1, "filename": "django-popup-view-field-0.1.tar.gz", "has_sig": false, "md5_digest": "3375d4515ea328fd1eb7495a4c13ff1a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12501, "upload_time": "2016-12-27T14:04:33", "upload_time_iso_8601": "2016-12-27T14:04:33.694857Z", "url": "https://files.pythonhosted.org/packages/cb/fc/fc2104a1b97f03f4c8042c35a7bd9b1805adb02dc045298de99def62fa7f/django-popup-view-field-0.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "02476675742ad82540a59cd8e9e3bc5e", "sha256": "e20b7a0647a361a9d142dd5d088f19aed61708d21edd6f883bd46870e8706d91"}, "downloads": -1, "filename": "django_popup_view_field-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "02476675742ad82540a59cd8e9e3bc5e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 27283, "upload_time": "2017-02-20T21:19:32", "upload_time_iso_8601": "2017-02-20T21:19:32.633580Z", "url": "https://files.pythonhosted.org/packages/d1/07/7f0a01d34523125493be144b274d18098ae87b8c1746d756357499c13a6d/django_popup_view_field-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d9cef0e32af197269dd3f687b9116738", "sha256": "165bcb4e50e3ee30f5c961ee4b0f28f400d59d7bf69b553d1142df9e970dc554"}, "downloads": -1, "filename": "django-popup-view-field-0.2.0.tar.gz", "has_sig": false, "md5_digest": "d9cef0e32af197269dd3f687b9116738", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14823, "upload_time": "2017-02-20T21:19:34", "upload_time_iso_8601": "2017-02-20T21:19:34.739464Z", "url": "https://files.pythonhosted.org/packages/9b/87/e07812010cbb72e8205b5c476e1503f0da9f41c76503f56f8ba59ce3cf88/django-popup-view-field-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "c0fa2cbede1a77d86d76bafc80df7649", "sha256": "2fb05b12fe3551e6b04474957cc9a773cbc112d8e2474a070642478cbd47d870"}, "downloads": -1, "filename": "django_popup_view_field-0.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c0fa2cbede1a77d86d76bafc80df7649", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 27974, "upload_time": "2017-03-07T22:36:49", "upload_time_iso_8601": "2017-03-07T22:36:49.304220Z", "url": "https://files.pythonhosted.org/packages/43/8e/19701d60914cfa3e4b29cf916a54c1bf7d9fbab12068a2f8c2568d45b2d0/django_popup_view_field-0.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4b26017b8a5d492ec54a12582756b59b", "sha256": "505956143cd8afd62aa9d862eff3b435205f502cb4eea189155d1f45084c8d35"}, "downloads": -1, "filename": "django-popup-view-field-0.3.0.tar.gz", "has_sig": false, "md5_digest": "4b26017b8a5d492ec54a12582756b59b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14917, "upload_time": "2017-03-07T22:36:51", "upload_time_iso_8601": "2017-03-07T22:36:51.627603Z", "url": "https://files.pythonhosted.org/packages/46/75/fb98c8380cc15c0e380047e5958cc78dad4f1dea99be12cf0b2952f00b0b/django-popup-view-field-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "439f09ca280e366f6f43e86944fdf8af", "sha256": "f7eab17c5d9bbc48a0bbc5e3547931abacc079ac66e80e1ca70c4d9f9c952b39"}, "downloads": -1, "filename": "django_popup_view_field-0.4.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "439f09ca280e366f6f43e86944fdf8af", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 31613, "upload_time": "2018-10-05T15:42:05", "upload_time_iso_8601": "2018-10-05T15:42:05.902761Z", "url": "https://files.pythonhosted.org/packages/04/0a/66f0067d0db3bcf1087fc32ebad906fd86acc1a7204be399224aeba8bf0b/django_popup_view_field-0.4.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fe3c051f8ac559df4680e2d65d25eeb8", "sha256": "b9aeee9afddf14910575cf25ee7d278802f2536d2f0162e15cdc8cd2e5ca17b3"}, "downloads": -1, "filename": "django-popup-view-field-0.4.0.tar.gz", "has_sig": false, "md5_digest": "fe3c051f8ac559df4680e2d65d25eeb8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11988, "upload_time": "2018-10-05T15:42:07", "upload_time_iso_8601": "2018-10-05T15:42:07.833942Z", "url": "https://files.pythonhosted.org/packages/9b/e6/bdb09f7ab43cfed84fb661a3ee47d798cb73c73c6d7662bb455a44ff3fb1/django-popup-view-field-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "56ffcdaa0fe74509dc53094211e09adb", "sha256": "49d9f1404bd3a8aa1e5902ccf58180c7abc6d72ee76b19800103734a2f539382"}, "downloads": -1, "filename": "django_popup_view_field-0.4.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "56ffcdaa0fe74509dc53094211e09adb", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 29192, "upload_time": "2019-02-26T10:41:13", "upload_time_iso_8601": "2019-02-26T10:41:13.168083Z", "url": "https://files.pythonhosted.org/packages/b5/9f/6d77da6a0c67c10090bb1c5f5e295bf2d8620dd2907efd0ed380a2c006c6/django_popup_view_field-0.4.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ed474ee73a43063f93ba7784bbd5883a", "sha256": "79a8b204d8fbc45829b56a7864d04fb735af96f6ba7e4b56c47e4380357375e8"}, "downloads": -1, "filename": "django-popup-view-field-0.4.1.tar.gz", "has_sig": false, "md5_digest": "ed474ee73a43063f93ba7784bbd5883a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16089, "upload_time": "2019-02-26T10:41:15", "upload_time_iso_8601": "2019-02-26T10:41:15.002465Z", "url": "https://files.pythonhosted.org/packages/a8/db/bea09500939e8317878b65f7009dd3c99111a5fc829aa653bc26ae5156db/django-popup-view-field-0.4.1.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "5ab8c994d6ada07ff5ae0b55479d2454", "sha256": "964d3b34ae9fae5bf29f45e21c0843c9d0703be7eee8836280e417d516967ee6"}, "downloads": -1, "filename": "django_popup_view_field-0.5.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5ab8c994d6ada07ff5ae0b55479d2454", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 24703, "upload_time": "2019-04-19T11:53:56", "upload_time_iso_8601": "2019-04-19T11:53:56.214889Z", "url": "https://files.pythonhosted.org/packages/a6/94/a6e65b6ee17dab9a2bef7abaa1f59d4c046fddc5fe9ef1a56c3ab1eb826d/django_popup_view_field-0.5.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "437f55c2b95d30c6f56fbe8f2aa1eba2", "sha256": "f0b9fced9fced4f2cf01dd8f9e30c27c55d2a0e18f96c3fe262a6fc98dcff472"}, "downloads": -1, "filename": "django-popup-view-field-0.5.0.tar.gz", "has_sig": false, "md5_digest": "437f55c2b95d30c6f56fbe8f2aa1eba2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18524, "upload_time": "2019-04-19T11:53:58", "upload_time_iso_8601": "2019-04-19T11:53:58.649956Z", "url": "https://files.pythonhosted.org/packages/74/d7/a7599a60f26159c21ade1b7f93e202dffc7aba8f47c4576c538177a17b5e/django-popup-view-field-0.5.0.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "5f96684c211bcbdd73ad5f73fa4ae3e8", "sha256": "c4fc3ae884ca8251e61a4bb301c14d82d7bbad9aa98bd24207d049f42887837d"}, "downloads": -1, "filename": "django_popup_view_field-0.6.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5f96684c211bcbdd73ad5f73fa4ae3e8", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 31280, "upload_time": "2020-01-24T19:46:20", "upload_time_iso_8601": "2020-01-24T19:46:20.233668Z", "url": "https://files.pythonhosted.org/packages/a7/94/d44376d8939469aa4c0299f1c0090a46d72b6ac3533122615c02cad2817e/django_popup_view_field-0.6.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "18910aeeebab9b2da54ca19a83e1c24d", "sha256": "463c00f73845de394d5ec3155697262719b69d7ef5eea8a2d2d23a91883d1112"}, "downloads": -1, "filename": "django-popup-view-field-0.6.0.tar.gz", "has_sig": false, "md5_digest": "18910aeeebab9b2da54ca19a83e1c24d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15601, "upload_time": "2020-01-24T19:46:22", "upload_time_iso_8601": "2020-01-24T19:46:22.165819Z", "url": "https://files.pythonhosted.org/packages/ad/a1/182d89f844b4f2bdbfb724e5326c75a8688106a17ba9374fe33741edd241/django-popup-view-field-0.6.0.tar.gz", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "3d3d10a4ec191bd1aa8f487610d918ac", "sha256": "7b903eb7d221cf14867539b90ef41041d6d477f3f2fe04c7fed8cb6b58163e66"}, "downloads": -1, "filename": "django_popup_view_field-0.6.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3d3d10a4ec191bd1aa8f487610d918ac", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 31439, "upload_time": "2020-01-27T20:47:31", "upload_time_iso_8601": "2020-01-27T20:47:31.474021Z", "url": "https://files.pythonhosted.org/packages/50/1e/afbfeaad955f9292a4db93d6f32966b9bb4129aa3b0e2eb26966fd3df9ee/django_popup_view_field-0.6.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ca9e6728860e3a1df2d528979cf31d1a", "sha256": "700c3a55fc643719cfdf233e79fdf3f1b968c909ab3efb81dd47fab843720408"}, "downloads": -1, "filename": "django-popup-view-field-0.6.1.tar.gz", "has_sig": false, "md5_digest": "ca9e6728860e3a1df2d528979cf31d1a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15595, "upload_time": "2020-01-27T20:47:33", "upload_time_iso_8601": "2020-01-27T20:47:33.151853Z", "url": "https://files.pythonhosted.org/packages/4e/a5/f77b934b761fa5f36b3b229a5fd64eb895604bf11ef6df8d1d007636b850/django-popup-view-field-0.6.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3d3d10a4ec191bd1aa8f487610d918ac", "sha256": "7b903eb7d221cf14867539b90ef41041d6d477f3f2fe04c7fed8cb6b58163e66"}, "downloads": -1, "filename": "django_popup_view_field-0.6.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3d3d10a4ec191bd1aa8f487610d918ac", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 31439, "upload_time": "2020-01-27T20:47:31", "upload_time_iso_8601": "2020-01-27T20:47:31.474021Z", "url": "https://files.pythonhosted.org/packages/50/1e/afbfeaad955f9292a4db93d6f32966b9bb4129aa3b0e2eb26966fd3df9ee/django_popup_view_field-0.6.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ca9e6728860e3a1df2d528979cf31d1a", "sha256": "700c3a55fc643719cfdf233e79fdf3f1b968c909ab3efb81dd47fab843720408"}, "downloads": -1, "filename": "django-popup-view-field-0.6.1.tar.gz", "has_sig": false, "md5_digest": "ca9e6728860e3a1df2d528979cf31d1a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15595, "upload_time": "2020-01-27T20:47:33", "upload_time_iso_8601": "2020-01-27T20:47:33.151853Z", "url": "https://files.pythonhosted.org/packages/4e/a5/f77b934b761fa5f36b3b229a5fd64eb895604bf11ef6df8d1d007636b850/django-popup-view-field-0.6.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:52 2020"}