{"info": {"author": "Andre O Falcao and Ana L. Teixeira", "author_email": "afalcao@di.fc.ul.pt; ateixeira@lasige.di.fc.ul.pt", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Education", "Intended Audience :: End Users/Desktop", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Scientific/Engineering", "Topic :: Scientific/Engineering :: Bio-Informatics", "Topic :: Scientific/Engineering :: Chemistry", "Topic :: Scientific/Engineering :: Information Analysis", "Topic :: Scientific/Engineering :: Mathematics"], "description": "NAMS: Non-contiguous Atom Matching Structural Similarity\r\n=========================================================\r\n\r\nNAMS is a similarity method based on atom alignment for the analysis of structural similarity between molecules. This method is based on the comparison \r\nof the bonding profiles of atoms on comparable molecules, including features that are seldom found in other structural or graph matching approaches like \r\nchirality or double bond stereoisomerism. The similarity measure is then defined on the annotated molecular graph, based on an iterative directed graph \r\nsimilarity procedure and  optimal atom alignment between atoms using a pairwise matching algorithm. With the proposed approach the similarities detected \r\nare more intuitively understood because similar atoms in the molecules are explicitly shown. This module implements NAMS and also supports the classification \r\nof the type of isomerism present in a given atom or bond of a molecule. \r\n\r\nFor background and cite the authors in any work or product based on this material:\r\n\r\n- Ana L. Teixeira and Andre O. Falcao 2013: Noncontiguous atom matching structural similarity function. Journal of Chemical Information and Modeling, 53(10), pp 2511\u20132524. (DOI: 10.1021/ci400324u)\r\n\r\n- Ana L. Teixeira, Joao P. Leal and Andre O. Falcao, Automated Identification and Classification of Stereochemistry: Chirality and Double Bond Stereoisomerism. Technical Report . LaSIGE, Department of Informatics, Faculty of Sciences, University of Lisbon, February 2013. (DOI: arXiv:1303.1724)\t\r\n\r\nVisit our webtool at http://nams.lasige.di.fc.ul.pt/\r\n\r\n\r\nDisclaimer\r\n==========\r\n\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS \r\nIN THE SOFTWARE.\r\n\r\n\r\n\r\nTypical usage\r\n=============\r\nUsage examples::\r\n\r\n    from nams import nams\r\n    from nams import chirality\r\n    from nams import doubleb_e_z\r\n    \r\n    ms=nams.Nams()\r\n    \r\n    #Define 2 molecules: (molecular_representation_type, molecular_representation) \r\n    mol_t1 = (\"smi\", \"CCC(=O)C(c1ccccc1)c2ccccc2\")\r\n    mol_t2= (\"smi\", \"O=C(CC)N(c1ccncc1)c3ccccc3\")\r\n    \r\n    #Extract the set of characteristics of the atoms/bonds \r\n    mol1, mol_info1 = ms.get_mol_info(mol_t1[0],mol_t1[1])\r\n    mol2, mol_info2 = ms.get_mol_info(mol_t2[0],mol_t2[1])\r\n    \r\n    #Calculate the similarity between the pair of molecules\r\n    sim11, d_atoms = ms.get_similarity(mol_info1, mol_info1) \r\n    sim22, d_atoms = ms.get_similarity(mol_info2, mol_info2)\r\n    sim12, d_atoms = ms.get_similarity(mol_info1, mol_info2)\r\n    \r\n    #Chirality detection and classification classification\r\n    chir=chirality.Chirality(\"C([C@@H](C(=O)O)N)S\", \"smi\")\r\n    chir.get_chirality(atom_id)\r\n    \r\n    #Double bond stereoisomerism detection and classification\r\n    stereo=doubleb_e_z.Stereodoubleb(\"I/C=C/Cl\", \"smi\")\r\n    stereo.get_e_z_at(at1, at2)\r\n\r\nMore examples: http://nams.lasige.di.fc.ul.pt/downloads.php\r\n\r\nDependencies and Requirements\r\n=============================\r\nPython\r\n------\r\nPython 2.7\r\n\r\nModules\r\n-------\r\n* openbabel, a chemical toolbox designed to handle chemical data <http://openbabel.org/>. \r\n\r\n* pybel, which provides convenience functions and classes that make it simpler to use the Open Babel libraries from Python, especially for file input/output and for accessing the attributes of atoms and molecules. <http://openbabel.org/docs/current/UseTheLibrary/PythonInstall.html>. \r\n\r\n* munkres, which provides an implementation of the Munkres algorithm (also called the Hungarian algorithm or the Kuhn-Munkres algorithm), useful for solving the Assignment Problem. <https://pypi.python.org/pypi/munkres/>. \r\n\r\nInstallation Instructions\r\n============================\r\n\r\nWindows Installer\r\n-------------------\r\n(1) Install the required Python Dependencies;\r\n(2) Download the Windows Installer (32 or 64 bits) file;\r\n(3) Execute the file and follow the instructions in the installation wizard. \r\n\r\nSource\r\n--------\r\n\r\n(1) Install the required Python Dependencies;\r\n(2) Download the Raw Source (available in .zip or .tar.gz) file;\r\n(3) Unpack the downloaded folder. \r\n(4) in the command line set the right path to the unpacked folder and run:\r\n\r\n    python setup.py build\r\n\r\n    python setup.py install\t\r\n\r\n\t\r\nEasy Install (for Python 2.4 or 2.7)\r\n--------------------------------------\r\n\r\n(1) Install the required Python Dependencies;\r\n(2) Download the EasyInstall file;\r\n(3) Install Easy_install, a python module to automatically download, build, install, and manage Python packages <http://pythonhosted.org/distribute/easy_install.html> \r\n(4) in the command line set the right path to the downloaded file and run::\r\n\t\r\n\teasy_install NAMS-0.9.2-py2.X.egg\t\r\n\r\nOR install NAMS package by name, searching PyPI for the latest version, and automatically downloading, building, and installing it::\r\n\r\n\teasy_install NAMS\r\n\r\nFrequently Asked Questions\r\n============================\r\n\r\n**(1) Why does in a molecule such as *CC(=O)CC(C1=CC=CC=C1)C1=C(O)C2=C(OC1=O)C=CC=C2* the stereocenter is ignored?**\r\n\r\nTo avoid ambiguity we decided that we would only classify the chirality of a stereocenter or a double bond stereoisomerism if the stereo information is **explicitly** written in the molecular identifier. In the case of chirality, we verify if there is a carbon atom with four different groups attached and if the sense of rotation of these groups is explicitly described in SMILES as clockwise or anticlockwise with \"@\" or \"@@\" (more details about the notation of Configuration Around Tetrahedral Centers in SMILES: http://www.daylight.com/dayhtml/doc/theory/theory.smiles.html)\r\n\r\nThe SMILES CC(=O)CC(C1=CC=CC=C1)C1=C(O)C2=C(OC1=O)C=CC=C2, has a stereocenter in the atom 5, because it has 4 different groups attached to it, but the sense of rotation of these groups is not indicated.\r\n\r\nTo represent the R-stereocenter the correct SMILES would be:\r\nCC(=O)C[C@H](C1=CC=CC=C1)C1=C(O)C2=C(OC1=O)C=CC=C2\r\n\r\nTo represent the S-stereocenter the correct SMILES would be:\r\nCC(=O)C[C@@H](C1=CC=CC=C1)C1=C(O)C2=C(OC1=O)C=CC=C2\r\n  \r\n\r\n**(2) Why does when comparing molecules such as trans-1,4-Dimethylcyclohexane (*C[C@H]1CC[C@@H](C)CC1*) and cis-1,4-Dimethylcyclohexane (*C[C@H]1CC[C@H](C)CC1*) the similarity score is 1?**\r\n\r\nThis is a possible rare case where two substituents in an atom differ only in their absolute configuration (R or S). However, this (Cahn\u2013Ingold\u2013Prelog priority) rule can lead to ambiguity in the evaluation of pairs of ligands [1-2], therefore it was not yet considered in the present version. The same situation is verified to double bond configurations. \r\n\r\n1. Mata P, Lobo AM (2005): The Cahn, Ingold and Prelog System: eliminating ambiguity in the \r\ncomparison of diastereomorphic and enantiomorphic ligands. Tetrahedron: Asymmetry, 16:2215-2223. \r\n\r\n2. Hirschmann H, Hanson KR (1974): Prochiral and pseudoasymmetric centers: Implications of recent \r\ndefinitions. Tetrahedron, 30:3649-3656\r\n\r\n**(3) Is there help documentation available for NAMS?**\r\n\r\nYes. NAMS is thoroughly described:\r\n- Ana L. Teixeira and Andre O. Falcao 2013: Noncontiguous atom matching structural similarity function. Journal of Chemical Information and Modeling, 53(10), pp 2511\u20132524. (DOI: 10.1021/ci400324u) <http://pubs.acs.org/doi/abs/10.1021/ci400324u> [Note: If you do not have free access to the manuscript please contact the authors]\r\n\r\nThe module that detects and classifies stereochemistry is thoroughly described:\r\n- Ana L. Teixeira, Joao P. Leal and Andre O. Falcao, Automated Identification and Classification of Stereochemistry: Chirality and Double Bond Stereoisomerism. Technical Report . LaSIGE, Department of Informatics, Faculty of Sciences, University of Lisbon, February 2013. (DOI: arXiv:1303.1724) <http://docs.di.fc.ul.pt/jspui/bitstream/10455/6894/1/TR_stereo.pdf>\t\r\n\r\nThere are several usage examples in the following Webpage: http://nams.lasige.di.fc.ul.pt/downloads.php\r\n\r\nAPI documentation will be made available as soon as possible. \r\n\r\n**(4) Is NAMS platform independent?**\r\n\r\nYes, NAMS is platform independent. It requires python 2.X and the following python packages: openbabel, pybel and munkres. \r\n\r\n\r\nMore questions, comments or suggestions can be sent by e-mail to ateixeira 'at' lasige.di.fc.ul.pt or using the following form: <http://nams.lasige.di.fc.ul.pt/contact.php>\r\n\r\nChange Log\r\n============================\r\n\r\n**v0.9.2 release: 11-13-2013**\r\n\r\n-- is a minor release that fixes issues discovered after the release of v0.9.1\r\n\r\n* molecules with less than 3 atoms are not processed and an error message is printed out: \"Error 3: NAMS cannot be applied to molecules with less than 3 atoms (including hydrogen atoms).\"\r\n\r\n* disconnected structures are automatically removed but the largest contiguous fragment. In such situation a warning message is printed out: \"Warning: Disconnected structures were removed.\"\r\n\r\n* includes Atom Substitution Matrices for all possible Atoms.\r\n\r\n* fixes a problem with the identification of the E/Z stereoisomerism for carbon atoms with charges.\r\n\r\n* invalid input formats are not processed and an error message is printed out: \"Error 1: Invalid input format. Please check here http://openbabel.org/docs/2.3.1/FileFormats/Overview.html the supported formats and respective names/codes\"\r\n\r\n* invalid molecules are not processed and an error message is printed out: \"Error 2: Invalid molecule or correspondence between the molecule and input format.\"\r\n\r\n\r\n**v0.9.1 release: 09-23-2013**\r\n\r\n-- Initial release.\r\n\r\n\r\nLicense\r\n===========\r\n\r\nThe NAMS python package calculates the similarity between molecules based on the \r\nstructural/topological relationships of each atom towards all the others \r\nwithin a molecule.\r\n\r\nThis program is free software: you can redistribute it and/or modify\r\nit under the terms of the MIT License as published on the official site of Open Source Initiative\r\nand attached below.\r\n\r\nCopyright (C) 2013, Andre Falcao and Ana Teixeira, University of Lisbon - LaSIGE\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files \r\n(the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, \r\npublish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, \r\nsubject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\nPlease cite the authors in any work or product based on this material:\r\n\r\nAL Teixeira, AO Falcao. 2013. Noncontiguous atom matching structural similarity function. J. Chem. Inf. Model., 53(10), pp 2511\u20132524. DOI: 10.1021/ci400324u.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://nams.lasige.di.fc.ul.pt/", "keywords": "molecular similarity,chemoinformatics,atom matching,structural similarity", "license": "The NAMS python package calculates the similarity between molecules based on the \r\nstructural/topological relationships of each atom towards all the others \r\nwithin a molecule.\r\n\r\nThis program is free software: you can redistribute it and/or modify\r\nit under the terms of the MIT License as published on the official site of Open Source Initiative\r\nand attached below.\r\n\r\n-------------------------------------------------------------------------------------------------\r\nCopyright (C) 2013, Andre Falcao and Ana Teixeira, University of Lisbon - LaSIGE\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and \r\nassociated documentation files (the \"Software\"), to deal in the Software without restriction, including \r\nwithout limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell \r\ncopies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the \r\n following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial \r\nportions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT \r\nLIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. \r\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, \r\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE \r\nOR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\nPlease cite the authors in any work or product based on this material: \r\nAL Teixeira, AO Falcao. 2013. A non-contiguous atom matching structural similarity function. J. Chem. Inf. Model. \r\nDOI: 10.1021/ci400324u.", "maintainer": "", "maintainer_email": "", "name": "NAMS", "package_url": "https://pypi.org/project/NAMS/", "platform": "Independent", "project_url": "https://pypi.org/project/NAMS/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://nams.lasige.di.fc.ul.pt/"}, "release_url": "https://pypi.org/project/NAMS/0.9.2/", "requires_dist": null, "requires_python": null, "summary": "NAMS is a module to calculate similarity between molecules based on the structural/topological relationships of each atom towards all the others within a molecule.", "version": "0.9.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"nams-non-contiguous-atom-matching-structural-similarity\">\n<h2>NAMS: Non-contiguous Atom Matching Structural Similarity</h2>\n<p>NAMS is a similarity method based on atom alignment for the analysis of structural similarity between molecules. This method is based on the comparison\nof the bonding profiles of atoms on comparable molecules, including features that are seldom found in other structural or graph matching approaches like\nchirality or double bond stereoisomerism. The similarity measure is then defined on the annotated molecular graph, based on an iterative directed graph\nsimilarity procedure and  optimal atom alignment between atoms using a pairwise matching algorithm. With the proposed approach the similarities detected\nare more intuitively understood because similar atoms in the molecules are explicitly shown. This module implements NAMS and also supports the classification\nof the type of isomerism present in a given atom or bond of a molecule.</p>\n<p>For background and cite the authors in any work or product based on this material:</p>\n<ul>\n<li>Ana L. Teixeira and Andre O. Falcao 2013: Noncontiguous atom matching structural similarity function. Journal of Chemical Information and Modeling, 53(10), pp 2511\u20132524. (DOI: 10.1021/ci400324u)</li>\n<li>Ana L. Teixeira, Joao P. Leal and Andre O. Falcao, Automated Identification and Classification of Stereochemistry: Chirality and Double Bond Stereoisomerism. Technical Report . LaSIGE, Department of Informatics, Faculty of Sciences, University of Lisbon, February 2013. (DOI: arXiv:1303.1724)</li>\n</ul>\n<p>Visit our webtool at <a href=\"http://nams.lasige.di.fc.ul.pt/\" rel=\"nofollow\">http://nams.lasige.di.fc.ul.pt/</a></p>\n</div>\n<div id=\"disclaimer\">\n<h2>Disclaimer</h2>\n<p>THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\nIN THE SOFTWARE.</p>\n</div>\n<div id=\"typical-usage\">\n<h2>Typical usage</h2>\n<p>Usage examples:</p>\n<pre>from nams import nams\nfrom nams import chirality\nfrom nams import doubleb_e_z\n\nms=nams.Nams()\n\n#Define 2 molecules: (molecular_representation_type, molecular_representation)\nmol_t1 = (\"smi\", \"CCC(=O)C(c1ccccc1)c2ccccc2\")\nmol_t2= (\"smi\", \"O=C(CC)N(c1ccncc1)c3ccccc3\")\n\n#Extract the set of characteristics of the atoms/bonds\nmol1, mol_info1 = ms.get_mol_info(mol_t1[0],mol_t1[1])\nmol2, mol_info2 = ms.get_mol_info(mol_t2[0],mol_t2[1])\n\n#Calculate the similarity between the pair of molecules\nsim11, d_atoms = ms.get_similarity(mol_info1, mol_info1)\nsim22, d_atoms = ms.get_similarity(mol_info2, mol_info2)\nsim12, d_atoms = ms.get_similarity(mol_info1, mol_info2)\n\n#Chirality detection and classification classification\nchir=chirality.Chirality(\"C([C@@H](C(=O)O)N)S\", \"smi\")\nchir.get_chirality(atom_id)\n\n#Double bond stereoisomerism detection and classification\nstereo=doubleb_e_z.Stereodoubleb(\"I/C=C/Cl\", \"smi\")\nstereo.get_e_z_at(at1, at2)\n</pre>\n<p>More examples: <a href=\"http://nams.lasige.di.fc.ul.pt/downloads.php\" rel=\"nofollow\">http://nams.lasige.di.fc.ul.pt/downloads.php</a></p>\n</div>\n<div id=\"dependencies-and-requirements\">\n<h2>Dependencies and Requirements</h2>\n<div id=\"python\">\n<h3>Python</h3>\n<p>Python 2.7</p>\n</div>\n<div id=\"modules\">\n<h3>Modules</h3>\n<ul>\n<li>openbabel, a chemical toolbox designed to handle chemical data &lt;<a href=\"http://openbabel.org/\" rel=\"nofollow\">http://openbabel.org/</a>&gt;.</li>\n<li>pybel, which provides convenience functions and classes that make it simpler to use the Open Babel libraries from Python, especially for file input/output and for accessing the attributes of atoms and molecules. &lt;<a href=\"http://openbabel.org/docs/current/UseTheLibrary/PythonInstall.html\" rel=\"nofollow\">http://openbabel.org/docs/current/UseTheLibrary/PythonInstall.html</a>&gt;.</li>\n<li>munkres, which provides an implementation of the Munkres algorithm (also called the Hungarian algorithm or the Kuhn-Munkres algorithm), useful for solving the Assignment Problem. &lt;<a href=\"https://pypi.python.org/pypi/munkres/\" rel=\"nofollow\">https://pypi.python.org/pypi/munkres/</a>&gt;.</li>\n</ul>\n</div>\n</div>\n<div id=\"installation-instructions\">\n<h2>Installation Instructions</h2>\n<div id=\"windows-installer\">\n<h3>Windows Installer</h3>\n<ol>\n<li>Install the required Python Dependencies;</li>\n<li>Download the Windows Installer (32 or 64 bits) file;</li>\n<li>Execute the file and follow the instructions in the installation wizard.</li>\n</ol>\n</div>\n<div id=\"source\">\n<h3>Source</h3>\n<ol>\n<li><p>Install the required Python Dependencies;</p>\n</li>\n<li><p>Download the Raw Source (available in .zip or .tar.gz) file;</p>\n</li>\n<li><p>Unpack the downloaded folder.</p>\n</li>\n<li><p>in the command line set the right path to the unpacked folder and run:</p>\n<p>python setup.py build</p>\n<p>python setup.py install</p>\n</li>\n</ol>\n</div>\n<div id=\"easy-install-for-python-2-4-or-2-7\">\n<h3>Easy Install (for Python 2.4 or 2.7)</h3>\n<ol>\n<li><p>Install the required Python Dependencies;</p>\n</li>\n<li><p>Download the EasyInstall file;</p>\n</li>\n<li><p>Install Easy_install, a python module to automatically download, build, install, and manage Python packages &lt;<a href=\"http://pythonhosted.org/distribute/easy_install.html\" rel=\"nofollow\">http://pythonhosted.org/distribute/easy_install.html</a>&gt;</p>\n</li>\n<li><p>in the command line set the right path to the downloaded file and run:</p>\n<pre>easy_install NAMS-0.9.2-py2.X.egg\n</pre>\n</li>\n</ol>\n<p>OR install NAMS package by name, searching PyPI for the latest version, and automatically downloading, building, and installing it:</p>\n<pre>easy_install NAMS\n</pre>\n</div>\n</div>\n<div id=\"frequently-asked-questions\">\n<h2>Frequently Asked Questions</h2>\n<p><strong>(1) Why does in a molecule such as *CC(=O)CC(C1=CC=CC=C1)C1=C(O)C2=C(OC1=O)C=CC=C2* the stereocenter is ignored?</strong></p>\n<p>To avoid ambiguity we decided that we would only classify the chirality of a stereocenter or a double bond stereoisomerism if the stereo information is <strong>explicitly</strong> written in the molecular identifier. In the case of chirality, we verify if there is a carbon atom with four different groups attached and if the sense of rotation of these groups is explicitly described in SMILES as clockwise or anticlockwise with \u201c@\u201d or \u201c@@\u201d (more details about the notation of Configuration Around Tetrahedral Centers in SMILES: <a href=\"http://www.daylight.com/dayhtml/doc/theory/theory.smiles.html\" rel=\"nofollow\">http://www.daylight.com/dayhtml/doc/theory/theory.smiles.html</a>)</p>\n<p>The SMILES CC(=O)CC(C1=CC=CC=C1)C1=C(O)C2=C(OC1=O)C=CC=C2, has a stereocenter in the atom 5, because it has 4 different groups attached to it, but the sense of rotation of these groups is not indicated.</p>\n<p>To represent the R-stereocenter the correct SMILES would be:\nCC(=O)C[C@H](C1=CC=CC=C1)C1=C(O)C2=C(OC1=O)C=CC=C2</p>\n<p>To represent the S-stereocenter the correct SMILES would be:\nCC(=O)C[C@@H](C1=CC=CC=C1)C1=C(O)C2=C(OC1=O)C=CC=C2</p>\n<p><strong>(2) Why does when comparing molecules such as trans-1,4-Dimethylcyclohexane (*C[C@H]1CC[C@@H](C)CC1*) and cis-1,4-Dimethylcyclohexane (*C[C@H]1CC[C@H](C)CC1*) the similarity score is 1?</strong></p>\n<p>This is a possible rare case where two substituents in an atom differ only in their absolute configuration (R or S). However, this (Cahn\u2013Ingold\u2013Prelog priority) rule can lead to ambiguity in the evaluation of pairs of ligands [1-2], therefore it was not yet considered in the present version. The same situation is verified to double bond configurations.</p>\n<p>1. Mata P, Lobo AM (2005): The Cahn, Ingold and Prelog System: eliminating ambiguity in the\ncomparison of diastereomorphic and enantiomorphic ligands. Tetrahedron: Asymmetry, 16:2215-2223.</p>\n<p>2. Hirschmann H, Hanson KR (1974): Prochiral and pseudoasymmetric centers: Implications of recent\ndefinitions. Tetrahedron, 30:3649-3656</p>\n<p><strong>(3) Is there help documentation available for NAMS?</strong></p>\n<p>Yes. NAMS is thoroughly described:\n- Ana L. Teixeira and Andre O. Falcao 2013: Noncontiguous atom matching structural similarity function. Journal of Chemical Information and Modeling, 53(10), pp 2511\u20132524. (DOI: 10.1021/ci400324u) &lt;<a href=\"http://pubs.acs.org/doi/abs/10.1021/ci400324u\" rel=\"nofollow\">http://pubs.acs.org/doi/abs/10.1021/ci400324u</a>&gt; [Note: If you do not have free access to the manuscript please contact the authors]</p>\n<p>The module that detects and classifies stereochemistry is thoroughly described:\n- Ana L. Teixeira, Joao P. Leal and Andre O. Falcao, Automated Identification and Classification of Stereochemistry: Chirality and Double Bond Stereoisomerism. Technical Report . LaSIGE, Department of Informatics, Faculty of Sciences, University of Lisbon, February 2013. (DOI: arXiv:1303.1724) &lt;http://docs.di.fc.ul.pt/jspui/bitstream/10455/6894/1/TR_stereo.pdf&gt;</p>\n<p>There are several usage examples in the following Webpage: <a href=\"http://nams.lasige.di.fc.ul.pt/downloads.php\" rel=\"nofollow\">http://nams.lasige.di.fc.ul.pt/downloads.php</a></p>\n<p>API documentation will be made available as soon as possible.</p>\n<p><strong>(4) Is NAMS platform independent?</strong></p>\n<p>Yes, NAMS is platform independent. It requires python 2.X and the following python packages: openbabel, pybel and munkres.</p>\n<p>More questions, comments or suggestions can be sent by e-mail to ateixeira \u2018at\u2019 lasige.di.fc.ul.pt or using the following form: &lt;<a href=\"http://nams.lasige.di.fc.ul.pt/contact.php\" rel=\"nofollow\">http://nams.lasige.di.fc.ul.pt/contact.php</a>&gt;</p>\n</div>\n<div id=\"change-log\">\n<h2>Change Log</h2>\n<p><strong>v0.9.2 release: 11-13-2013</strong></p>\n<p>\u2013 is a minor release that fixes issues discovered after the release of v0.9.1</p>\n<ul>\n<li>molecules with less than 3 atoms are not processed and an error message is printed out: \u201cError 3: NAMS cannot be applied to molecules with less than 3 atoms (including hydrogen atoms).\u201d</li>\n<li>disconnected structures are automatically removed but the largest contiguous fragment. In such situation a warning message is printed out: \u201cWarning: Disconnected structures were removed.\u201d</li>\n<li>includes Atom Substitution Matrices for all possible Atoms.</li>\n<li>fixes a problem with the identification of the E/Z stereoisomerism for carbon atoms with charges.</li>\n<li>invalid input formats are not processed and an error message is printed out: \u201cError 1: Invalid input format. Please check here <a href=\"http://openbabel.org/docs/2.3.1/FileFormats/Overview.html\" rel=\"nofollow\">http://openbabel.org/docs/2.3.1/FileFormats/Overview.html</a> the supported formats and respective names/codes\u201d</li>\n<li>invalid molecules are not processed and an error message is printed out: \u201cError 2: Invalid molecule or correspondence between the molecule and input format.\u201d</li>\n</ul>\n<p><strong>v0.9.1 release: 09-23-2013</strong></p>\n<p>\u2013 Initial release.</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>The NAMS python package calculates the similarity between molecules based on the\nstructural/topological relationships of each atom towards all the others\nwithin a molecule.</p>\n<p>This program is free software: you can redistribute it and/or modify\nit under the terms of the MIT License as published on the official site of Open Source Initiative\nand attached below.</p>\n<p>Copyright (C) 2013, Andre Falcao and Ana Teixeira, University of Lisbon - LaSIGE</p>\n<p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files\n(the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:</p>\n<p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p>\n<p>Please cite the authors in any work or product based on this material:</p>\n<p>AL Teixeira, AO Falcao. 2013. Noncontiguous atom matching structural similarity function. J. Chem. Inf. Model., 53(10), pp 2511\u20132524. DOI: 10.1021/ci400324u.</p>\n</div>\n\n          </div>"}, "last_serial": 919655, "releases": {"0.9.1": [{"comment_text": "", "digests": {"md5": "80b7c02716020c5b52def4ecefc7234a", "sha256": "b9f81d4f114ecda38f186911cfc114da195526e4b0faa736f138540d0cb7e491"}, "downloads": -1, "filename": "NAMS-0.9.1-py2.7.egg", "has_sig": false, "md5_digest": "80b7c02716020c5b52def4ecefc7234a", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 52226, "upload_time": "2013-10-22T10:38:40", "upload_time_iso_8601": "2013-10-22T10:38:40.459757Z", "url": "https://files.pythonhosted.org/packages/38/48/e7888995a41f895f59faf359645f6b4eda51e5245938e79eae760f293523/NAMS-0.9.1-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "1951791a8e47b6807b52918321a59f2c", "sha256": "3544b2e52dccba9acdcba613201c9d78f6734bbdb14c339dae9a6fe415793569"}, "downloads": -1, "filename": "NAMS-0.9.1.tar.gz", "has_sig": false, "md5_digest": "1951791a8e47b6807b52918321a59f2c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21752, "upload_time": "2013-10-22T10:38:29", "upload_time_iso_8601": "2013-10-22T10:38:29.306860Z", "url": "https://files.pythonhosted.org/packages/06/a8/6b71236f492d9978989be0fde9e77ef69afbf4fa5be44d05837277bc6840/NAMS-0.9.1.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "cd3a3aade9df8971c3a506b3b81d82c8", "sha256": "7c684d53f9c02fab4b3dc83cf39b2ac3f8ac203b13a794bfc054a256b9097a47"}, "downloads": -1, "filename": "NAMS-0.9.1.win32.exe", "has_sig": false, "md5_digest": "cd3a3aade9df8971c3a506b3b81d82c8", "packagetype": "bdist_wininst", "python_version": "any", "requires_python": null, "size": 231931, "upload_time": "2013-10-22T10:38:37", "upload_time_iso_8601": "2013-10-22T10:38:37.273000Z", "url": "https://files.pythonhosted.org/packages/04/77/14dec549b0b39e9c15f2ee2039c94dd2d1ea6303b804a3396ddb4778896a/NAMS-0.9.1.win32.exe", "yanked": false}, {"comment_text": "", "digests": {"md5": "84eb67a23524e0c16b5da9bfd7541802", "sha256": "77c1c3c26a64a7e9101fa9cbf2aa9cc0d767ac55cd9cddb0c50642adb4baee51"}, "downloads": -1, "filename": "NAMS-0.9.1.win-amd64.exe", "has_sig": false, "md5_digest": "84eb67a23524e0c16b5da9bfd7541802", "packagetype": "bdist_wininst", "python_version": "any", "requires_python": null, "size": 259579, "upload_time": "2013-10-22T10:40:05", "upload_time_iso_8601": "2013-10-22T10:40:05.227067Z", "url": "https://files.pythonhosted.org/packages/dd/59/2041c4dbb2b1954162458141c122b59b237adf24de585df3a4cd118e9ce1/NAMS-0.9.1.win-amd64.exe", "yanked": false}, {"comment_text": "", "digests": {"md5": "14799e856c15425a2970d79430a9c645", "sha256": "c96f81332a5a40d6ac20f034634ed4b44f803c1b0f04b4c9ab844ca233e16ea1"}, "downloads": -1, "filename": "NAMS-0.9.1.zip", "has_sig": false, "md5_digest": "14799e856c15425a2970d79430a9c645", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35153, "upload_time": "2013-10-22T10:38:32", "upload_time_iso_8601": "2013-10-22T10:38:32.701367Z", "url": "https://files.pythonhosted.org/packages/03/f4/9f5b68d3ddab62427cf668d25ae21a7f5615f2e5560a555eb396a44a7a93/NAMS-0.9.1.zip", "yanked": false}], "0.9.2": [{"comment_text": "", "digests": {"md5": "963ae05a1943325f4d6a55b47e890fb1", "sha256": "ec91d86feac530b0e38683fec93aa111b3fe43b9ad121602d91df2a96ae5709a"}, "downloads": -1, "filename": "NAMS-0.9.2-py2.4.egg", "has_sig": false, "md5_digest": "963ae05a1943325f4d6a55b47e890fb1", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 65227, "upload_time": "2013-11-14T03:51:03", "upload_time_iso_8601": "2013-11-14T03:51:03.102840Z", "url": "https://files.pythonhosted.org/packages/19/8e/156314f2aa8b8720edb74b40f4c95bae6490064155c104f03efea63154e8/NAMS-0.9.2-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "b0857e01371bf0501011bc55ecac00d4", "sha256": "9cb4fb33721f81eac09249ca11b01950663bc6b292144873c7636732745e975d"}, "downloads": -1, "filename": "NAMS-0.9.2-py2.7.egg", "has_sig": false, "md5_digest": "b0857e01371bf0501011bc55ecac00d4", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 64119, "upload_time": "2013-11-14T03:48:16", "upload_time_iso_8601": "2013-11-14T03:48:16.416747Z", "url": "https://files.pythonhosted.org/packages/a8/7b/46066ceac5ff55b94128b6bceeb50adf12358cc49b3065a7351c25e3d342/NAMS-0.9.2-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "4f5465e08883cc944009c5160e79075b", "sha256": "434b42bc972956744eb7370ce17796279bbe6d4f344cb6554fd68a93e8f04e61"}, "downloads": -1, "filename": "NAMS-0.9.2.tar.gz", "has_sig": false, "md5_digest": "4f5465e08883cc944009c5160e79075b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34582, "upload_time": "2013-11-14T03:47:32", "upload_time_iso_8601": "2013-11-14T03:47:32.895378Z", "url": "https://files.pythonhosted.org/packages/bd/ac/d6b866efe4803e109a70e6d9c31abeba9f81cc8eedd4f647f84d102253c7/NAMS-0.9.2.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "2afb768e5cba068c18951a88acfbe9ef", "sha256": "d261f97c31d19a031d02dc9cddb674bcf17596ee23618f00c46c7520c20b6ca5"}, "downloads": -1, "filename": "NAMS-0.9.2.win32.exe", "has_sig": false, "md5_digest": "2afb768e5cba068c18951a88acfbe9ef", "packagetype": "bdist_wininst", "python_version": "any", "requires_python": null, "size": 249145, "upload_time": "2013-11-14T03:48:06", "upload_time_iso_8601": "2013-11-14T03:48:06.357011Z", "url": "https://files.pythonhosted.org/packages/a9/35/0f1720a446ff4fe75f471a93c36f80d677dba009784bcd82bdccc2a494ea/NAMS-0.9.2.win32.exe", "yanked": false}, {"comment_text": "", "digests": {"md5": "4aa51934a2d71b023eae4dbdf19da1f3", "sha256": "d6f0ede49cbfe1ddce7a0a75548373fe99d95d1935b3c89a0e99c9be87220282"}, "downloads": -1, "filename": "NAMS-0.9.2.win-amd64.exe", "has_sig": false, "md5_digest": "4aa51934a2d71b023eae4dbdf19da1f3", "packagetype": "bdist_wininst", "python_version": "any", "requires_python": null, "size": 276793, "upload_time": "2013-11-14T03:46:28", "upload_time_iso_8601": "2013-11-14T03:46:28.978926Z", "url": "https://files.pythonhosted.org/packages/7d/61/887c9f1c3a640beee9123b3f724b9e94c6a698b9441997415dd564436c26/NAMS-0.9.2.win-amd64.exe", "yanked": false}, {"comment_text": "", "digests": {"md5": "7c86a62e7f379ded8f7994fc9026a908", "sha256": "31b6979eeb9354b82fe0b38e02c1ab8ea8468f31b89711afad43403ae48b11ce"}, "downloads": -1, "filename": "NAMS-0.9.2.zip", "has_sig": false, "md5_digest": "7c86a62e7f379ded8f7994fc9026a908", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 51141, "upload_time": "2013-11-14T03:47:22", "upload_time_iso_8601": "2013-11-14T03:47:22.886925Z", "url": "https://files.pythonhosted.org/packages/26/b9/5ac86f3ce74e49b4040df35a082e0b5570e453f19a143576fe0605453cdb/NAMS-0.9.2.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "963ae05a1943325f4d6a55b47e890fb1", "sha256": "ec91d86feac530b0e38683fec93aa111b3fe43b9ad121602d91df2a96ae5709a"}, "downloads": -1, "filename": "NAMS-0.9.2-py2.4.egg", "has_sig": false, "md5_digest": "963ae05a1943325f4d6a55b47e890fb1", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 65227, "upload_time": "2013-11-14T03:51:03", "upload_time_iso_8601": "2013-11-14T03:51:03.102840Z", "url": "https://files.pythonhosted.org/packages/19/8e/156314f2aa8b8720edb74b40f4c95bae6490064155c104f03efea63154e8/NAMS-0.9.2-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "b0857e01371bf0501011bc55ecac00d4", "sha256": "9cb4fb33721f81eac09249ca11b01950663bc6b292144873c7636732745e975d"}, "downloads": -1, "filename": "NAMS-0.9.2-py2.7.egg", "has_sig": false, "md5_digest": "b0857e01371bf0501011bc55ecac00d4", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 64119, "upload_time": "2013-11-14T03:48:16", "upload_time_iso_8601": "2013-11-14T03:48:16.416747Z", "url": "https://files.pythonhosted.org/packages/a8/7b/46066ceac5ff55b94128b6bceeb50adf12358cc49b3065a7351c25e3d342/NAMS-0.9.2-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "4f5465e08883cc944009c5160e79075b", "sha256": "434b42bc972956744eb7370ce17796279bbe6d4f344cb6554fd68a93e8f04e61"}, "downloads": -1, "filename": "NAMS-0.9.2.tar.gz", "has_sig": false, "md5_digest": "4f5465e08883cc944009c5160e79075b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34582, "upload_time": "2013-11-14T03:47:32", "upload_time_iso_8601": "2013-11-14T03:47:32.895378Z", "url": "https://files.pythonhosted.org/packages/bd/ac/d6b866efe4803e109a70e6d9c31abeba9f81cc8eedd4f647f84d102253c7/NAMS-0.9.2.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "2afb768e5cba068c18951a88acfbe9ef", "sha256": "d261f97c31d19a031d02dc9cddb674bcf17596ee23618f00c46c7520c20b6ca5"}, "downloads": -1, "filename": "NAMS-0.9.2.win32.exe", "has_sig": false, "md5_digest": "2afb768e5cba068c18951a88acfbe9ef", "packagetype": "bdist_wininst", "python_version": "any", "requires_python": null, "size": 249145, "upload_time": "2013-11-14T03:48:06", "upload_time_iso_8601": "2013-11-14T03:48:06.357011Z", "url": "https://files.pythonhosted.org/packages/a9/35/0f1720a446ff4fe75f471a93c36f80d677dba009784bcd82bdccc2a494ea/NAMS-0.9.2.win32.exe", "yanked": false}, {"comment_text": "", "digests": {"md5": "4aa51934a2d71b023eae4dbdf19da1f3", "sha256": "d6f0ede49cbfe1ddce7a0a75548373fe99d95d1935b3c89a0e99c9be87220282"}, "downloads": -1, "filename": "NAMS-0.9.2.win-amd64.exe", "has_sig": false, "md5_digest": "4aa51934a2d71b023eae4dbdf19da1f3", "packagetype": "bdist_wininst", "python_version": "any", "requires_python": null, "size": 276793, "upload_time": "2013-11-14T03:46:28", "upload_time_iso_8601": "2013-11-14T03:46:28.978926Z", "url": "https://files.pythonhosted.org/packages/7d/61/887c9f1c3a640beee9123b3f724b9e94c6a698b9441997415dd564436c26/NAMS-0.9.2.win-amd64.exe", "yanked": false}, {"comment_text": "", "digests": {"md5": "7c86a62e7f379ded8f7994fc9026a908", "sha256": "31b6979eeb9354b82fe0b38e02c1ab8ea8468f31b89711afad43403ae48b11ce"}, "downloads": -1, "filename": "NAMS-0.9.2.zip", "has_sig": false, "md5_digest": "7c86a62e7f379ded8f7994fc9026a908", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 51141, "upload_time": "2013-11-14T03:47:22", "upload_time_iso_8601": "2013-11-14T03:47:22.886925Z", "url": "https://files.pythonhosted.org/packages/26/b9/5ac86f3ce74e49b4040df35a082e0b5570e453f19a143576fe0605453cdb/NAMS-0.9.2.zip", "yanked": false}], "timestamp": "Fri May  8 00:47:41 2020"}