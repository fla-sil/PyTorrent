{"info": {"author": "Oleg Pidsadnyi, Anatoly Bubenkov and others", "author_email": "oleg.pidsadnyi@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 6 - Mature", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Testing", "Topic :: Utilities"], "description": "factory_boy_ integration with the pytest_ runner\n================================================\n\n.. image:: https://img.shields.io/pypi/v/pytest-factoryboy.svg\n   :target: https://pypi.python.org/pypi/pytest-factoryboy\n.. image:: https://img.shields.io/pypi/pyversions/pytest-factoryboy.svg\n  :target: https://pypi.python.org/pypi/pytest-factoryboy\n.. image:: https://travis-ci.org/pytest-dev/pytest-factoryboy.svg?branch=master\n    :target: https://travis-ci.org/pytest-dev/pytest-factoryboy\n.. image:: https://readthedocs.org/projects/pytest-factoryboy/badge/?version=latest\n    :target: https://readthedocs.org/projects/pytest-factoryboy/?badge=latest\n    :alt: Documentation Status\n\n\npytest-factoryboy makes it easy to combine ``factory`` approach to the test setup with the ``dependency`` injection,\nheart of the `pytest fixtures`_.\n\n.. _factory_boy: https://factoryboy.readthedocs.io\n.. _pytest: http://pytest.org\n.. _pytest fixtures: https://pytest.org/latest/fixture.html\n.. _overridden: http://pytest.org/latest/fixture.html#override-a-fixture-with-direct-test-parametrization\n\n\nInstall pytest-factoryboy\n-------------------------\n\n::\n\n    pip install pytest-factoryboy\n\n\nConcept\n-------\n\nLibrary exports a function to register factories as fixtures. Fixtures are contributed\nto the same module where register function is called.\n\nFactory Fixture\n---------------\n\nFactory fixtures allow using factories without importing them. Name convention is lowercase-underscore\nclass name.\n\n.. code-block:: python\n\n    import factory\n    from pytest_factoryboy import register\n\n    class AuthorFactory(factory.Factory):\n\n        class Meta:\n            model = Author\n\n\n    register(AuthorFactory)\n\n\n    def test_factory_fixture(author_factory):\n        author = author_factory(name=\"Charles Dickens\")\n        assert author.name == \"Charles Dickens\"\n\n\nModel Fixture\n-------------\n\nModel fixture implements an instance of a model created by the factory. Name convention is lowercase-underscore\nclass name.\n\n\n.. code-block:: python\n\n    import factory\n    from pytest_factoryboy import register\n\n    @register\n    class AuthorFactory(factory.Factory):\n\n        class Meta:\n            model = Author\n\n        name = \"Charles Dickens\"\n\n\n    def test_model_fixture(author):\n        assert author.name == \"Charles Dickens\"\n\n\nModel fixtures can be registered with specific names. For example if you address instances of some collection\nby the name like \"first\", \"second\" or of another parent as \"other\":\n\n\n.. code-block:: python\n\n    register(BookFactory)  # book\n    register(BookFactory, \"second_book\")  # second_book\n\n    register(AuthorFactory) # author\n    register(AuthorFactory, \"second_author\") # second_author\n\n    register(BookFactory, \"other_book\")  # other_book, book of another author\n\n    @pytest.fixture\n    def other_book__author(second_author):\n        \"\"\"Make the relation of the second_book to another (second) author.\"\"\"\n        return second_author\n\n\n\nAttributes are Fixtures\n-----------------------\n\nThere are fixtures created for factory attributes. Attribute names are prefixed with the model fixture name and\ndouble underscore (similar to the convention used by factory_boy).\n\n\n.. code-block:: python\n\n    @pytest.mark.parametrize(\"author__name\", [\"Bill Gates\"])\n    def test_model_fixture(author):\n        assert author.name == \"Bill Gates\"\n\nSubFactory\n----------\n\nSub-factory attribute points to the model fixture of the sub-factory.\nAttributes of sub-factories are injected as dependencies to the model fixture and can be overridden_ via\nthe parametrization.\n\nRelated Factory\n---------------\n\nRelated factory attribute points to the model fixture of the related factory.\nAttributes of related factories are injected as dependencies to the model fixture and can be overridden_ via\nthe parametrization.\n\n\npost-generation\n---------------\n\nPost-generation attribute fixture implements only the extracted value for the post generation function.\n\n\nIntegration\n-----------\n\nAn example of factory_boy_ and pytest_ integration.\n\nfactories/__init__.py:\n\n.. code-block:: python\n\n    import factory\n    from faker import Factory as FakerFactory\n\n    faker = FakerFactory.create()\n\n\n    class AuthorFactory(factory.django.DjangoModelFactory):\n\n        \"\"\"Author factory.\"\"\"\n\n        name = factory.LazyAttribute(lambda x: faker.name())\n\n        class Meta:\n            model = 'app.Author'\n\n\n    class BookFactory(factory.django.DjangoModelFactory):\n\n        \"\"\"Book factory.\"\"\"\n\n        title = factory.LazyAttribute(lambda x: faker.sentence(nb_words=4))\n\n        class Meta:\n            model = 'app.Book'\n\n        author = factory.SubFactory(AuthorFactory)\n\ntests/conftest.py:\n\n.. code-block:: python\n\n    from pytest_factoryboy import register\n\n    from factories import AuthorFactory, BookFactory\n\n    register(AuthorFactory)\n    register(BookFactory)\n\ntests/test_models.py:\n\n.. code-block:: python\n\n    from app.models import Book\n    from factories import BookFactory\n\n    def test_book_factory(book_factory):\n        \"\"\"Factories become fixtures automatically.\"\"\"\n        assert isinstance(book_factory, BookFactory)\n\n    def test_book(book):\n        \"\"\"Instances become fixtures automatically.\"\"\"\n        assert isinstance(book, Book)\n\n    @pytest.mark.parametrize(\"book__title\", [\"PyTest for Dummies\"])\n    @pytest.mark.parametrize(\"author__name\", [\"Bill Gates\"])\n    def test_parametrized(book):\n        \"\"\"You can set any factory attribute as a fixture using naming convention.\"\"\"\n        assert book.name == \"PyTest for Dummies\"\n        assert book.author.name == \"Bill Gates\"\n\n\nFixture partial specialization\n------------------------------\n\nThere is a possibility to pass keyword parameters in order to override factory attribute values during fixture\nregistration. This comes in handy when your test case is requesting a lot of fixture flavors. Too much for the\nregular pytest parametrization.\nIn this case you can register fixture flavors in the local test module and specify value deviations inside ``register``\nfunction calls.\n\n\n.. code-block:: python\n\n    register(AuthorFactory, \"male_author\", gender=\"M\", name=\"John Doe\")\n    register(AuthorFactory, \"female_author\", gender=\"F\")\n\n\n    @pytest.fixture\n    def female_author__name():\n        \"\"\"Override female author name as a separate fixture.\"\"\"\n        return \"Jane Doe\"\n\n\n    @pytest.mark.parametrize(\"male_author__age\", [42])  # Override even more\n    def test_partial(male_author, female_author):\n        \"\"\"Test fixture partial specialization.\"\"\"\n        assert male_author.gender == \"M\"\n        assert male_author.name == \"John Doe\"\n        assert male_author.age == 42\n\n        assert female_author.gender == \"F\"\n        assert female_author.name == \"Jane Doe\"\n\n\nFixture attributes\n------------------\n\nSometimes it is necessary to pass an instance of another fixture as an attribute value to the factory.\nIt is possible to override the generated attribute fixture where desired values can be requested as\nfixture dependencies. There is also a lazy wrapper for the fixture that can be used in the parametrization\nwithout defining fixtures in a module.\n\n\nLazyFixture constructor accepts either existing fixture name or callable with dependencies:\n\n.. code-block:: python\n\n    import pytest\n    from pytest_factoryboy import register, LazyFixture\n\n\n    @pytest.mark.parametrize(\"book__author\", [LazyFixture(\"another_author\")])\n    def test_lazy_fixture_name(book, another_author):\n        \"\"\"Test that book author is replaced with another author by fixture name.\"\"\"\n        assert book.author == another_author\n\n\n    @pytest.mark.parametrize(\"book__author\", [LazyFixture(lambda another_author: another_author)])\n    def test_lazy_fixture_callable(book, another_author):\n        \"\"\"Test that book author is replaced with another author by callable.\"\"\"\n        assert book.author == another_author\n\n\n    # Can also be used in the partial specialization during the registration.\n    register(BookFactory, \"another_book\", author=LazyFixture(\"another_author\"))\n\n\nPost-generation dependencies\n============================\n\nUnlike factory_boy which binds related objects using an internal container to store results of lazy evaluations,\npytest-factoryboy relies on the PyTest request.\n\nCircular dependencies between objects can be resolved using post-generation hooks/related factories in combination with\npassing the SelfAttribute, but in the case of PyTest request fixture functions have to return values in order to be cached\nin the request and to become available to other fixtures.\n\nThat's why evaluation of the post-generation declaration in pytest-factoryboy is deferred until calling\nthe test funciton.\nThis solves circular dependecy resolution for situations like:\n\n::\n\n    o->[ A ]-->[ B ]<--[ C ]-o\n    |                        |\n    o----(C depends on A)----o\n\n\nOn the other hand deferring the evaluation of post-generation declarations evaluation makes their result unavailable during the generation\nof objects that are not in the circular dependecy, but they rely on the post-generation action.\n\npytest-factoryboy is trying to detect cycles and resolve post-generation dependencies automatically.\n\n\n.. code-block:: python\n\n    from pytest_factoryboy import register\n\n\n    class Foo(object):\n\n        def __init__(self, value):\n            self.value = value\n\n\n    class Bar(object):\n\n        def __init__(self, foo):\n            self.foo = foo\n\n\n    @register\n    class FooFactory(factory.Factory):\n\n        \"\"\"Foo factory.\"\"\"\n\n        class Meta:\n            model = Foo\n\n        value = 0\n\n        @factory.post_generation\n        def set1(foo, create, value, **kwargs):\n            foo.value = 1\n\n\n    class BarFactory(factory.Factory):\n\n        \"\"\"Bar factory.\"\"\"\n\n        foo = factory.SubFactory(FooFactory)\n\n        @classmethod\n        def _create(cls, model_class, foo):\n            assert foo.value == 1  # Assert that set1 is evaluated before object generation\n            return super(BarFactory, cls)._create(model_class, foo=foo)\n\n        class Meta:\n            model = Bar\n\n\n    register(\n        BarFactory,\n        'bar',\n    )\n    \"\"\"Forces 'set1' to be evaluated first.\"\"\"\n\n\n    def test_depends_on_set1(bar):\n        \"\"\"Test that post-generation hooks are done and the value is 2.\"\"\"\n        assert depends_on_1.foo.value == 1\n\n\nHooks\n-----\n\npytest-factoryboy exposes several `pytest hooks <http://pytest.org/latest/plugins.html#well-specified-hooks>`_\nwhich might be helpful for e.g. controlling database transaction, for reporting etc:\n\n* pytest_factoryboy_done(request) - Called after all factory based fixtures and their post-generation actions have been evaluated.\n\n\nLicense\n-------\n\nThis software is licensed under the `MIT license <http://en.wikipedia.org/wiki/MIT_License>`_.\n\n\u00a9 2015 Oleg Pidsadnyi, Anatoly Bubenkov and others\n\nAuthors\n=======\n\n`Oleg Pidsadnyi <oleg.pidsadnyi@gmail.com>`_\n    original idea and implementation\n\nThese people have contributed to `pytest-factoryboy`, in alphabetical order:\n\n* `Anatoly Bubenkov <bubenkoff@gmail.com>`_\n* `Daniel Duong <https://github.com/dduong42>`_\n* `Daniel Hahler <https://github.com/blueyed>`_\n* `p13773 <https://github.com/p13773>`_\n* `Vasily Kuznetsov <https://github.com/kvas-it>`_\n\nChangelog\n=========\n\n2.0.3\n-----\n\n- Fix compatibility with pytest 5.\n\n\n2.0.2\n-----\n\n- Fix warning `use of getfuncargvalue is deprecated, use getfixturevalue` (sliverc)\n\n\n2.0.1\n-----\n\nBreaking change due to the heavy refactor of both pytest and factory_boy.\n\n- Failing test for using a `attributes` field on the factory (blueyed)\n- Minimal pytest version is 3.3.2 (olegpidsadnyi)\n- Minimal factory_boy version is 2.10.0 (olegpidsadnyi)\n\n\n1.3.2\n-----\n\n- use {posargs} in pytest command (blueyed)\n- pin factory_boy<2.9 (blueyed)\n\n\n1.3.1\n-----\n\n- fix LazyFixture evaluation order (olegpidsadnyi)\n\n\n1.3.0\n-----\n\n- replace request._fixturedefs by request._fixture_defs (p13773)\n\n\n1.2.2\n-----\n\n- fix post-generation dependencies (olegpidsadnyi)\n\n\n1.2.1\n-----\n\n- automatical resolution of the post-generation dependencies (olegpidsadnyi, kvas-it)\n\n\n1.1.6\n-----\n\n- fixes fixture function module name attribute (olegpidsadnyi)\n- fixes _after_postgeneration hook invocation for deferred post-generation declarations (olegpidsadnyi)\n\n\n1.1.5\n-----\n\n- support factory models to be passed as strings (bubenkoff)\n\n\n1.1.3\n-----\n\n- circular dependency determination is fixed for the post-generation (olegpidsadnyi)\n\n\n1.1.2\n-----\n\n- circular dependency determination is fixed for the RelatedFactory attributes (olegpidsadnyi)\n\n\n1.1.1\n-----\n\n- fix installation issue when django environment is not set (bubenkoff, amakhnach)\n\n\n1.1.0\n-----\n\n- fixture dependencies on deferred post-generation declarations (olegpidsadnyi)\n\n\n1.0.3\n-----\n\n- post_generation extra parameters fixed (olegpidsadnyi)\n- fixture partial specialization (olegpidsadnyi)\n- fixes readme and example (dduong42)\n- lazy fixtures (olegpidsadnyi)\n- deferred post-generation evaluation (olegpidsadnyi)\n- hooks (olegpidsadnyi)\n\n\n1.0.2\n-----\n\n- refactoring of the fixture function compilation (olegpidsadnyi)\n- related factory fix (olegpidsadnyi)\n- post_generation fixture dependency fixed (olegpidsadnyi)\n- model fixture registration with specific name (olegpidsadnyi)\n- README updated (olegpidsadnyi)\n\n1.0.1\n-----\n\n- use ``inflection`` package to convert camel case to underscore (bubenkoff)\n\n1.0.0\n-----\n\n- initial release (olegpidsadnyi)", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/pytest-dev/pytest-factoryboy", "keywords": "", "license": "MIT license", "maintainer": "", "maintainer_email": "", "name": "pytest-factoryboy", "package_url": "https://pypi.org/project/pytest-factoryboy/", "platform": "", "project_url": "https://pypi.org/project/pytest-factoryboy/", "project_urls": {"Homepage": "https://github.com/pytest-dev/pytest-factoryboy"}, "release_url": "https://pypi.org/project/pytest-factoryboy/2.0.3/", "requires_dist": null, "requires_python": "", "summary": "Factory Boy support for pytest.", "version": "2.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"factory-boy-integration-with-the-pytest-runner\">\n<h2><a href=\"https://factoryboy.readthedocs.io\" rel=\"nofollow\">factory_boy</a> integration with the <a href=\"http://pytest.org\" rel=\"nofollow\">pytest</a> runner</h2>\n<a href=\"https://pypi.python.org/pypi/pytest-factoryboy\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/pytest-factoryboy.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cca5326b7e3466fb9f057415affe1f412ec09d1c/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7079746573742d666163746f7279626f792e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/pytest-factoryboy\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/pyversions/pytest-factoryboy.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/981694089390afbfdc2f8d588a8ca1f2fec69eb4/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f7079746573742d666163746f7279626f792e737667\"></a>\n<a href=\"https://travis-ci.org/pytest-dev/pytest-factoryboy\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/pytest-dev/pytest-factoryboy.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9e0e2ed44d3af56fd44ae6df77175e4e431513a7/68747470733a2f2f7472617669732d63692e6f72672f7079746573742d6465762f7079746573742d666163746f7279626f792e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://readthedocs.org/projects/pytest-factoryboy/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5954cf4b2bffa93e59c61bdaf9c706a8ed5ed9d0/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f7079746573742d666163746f7279626f792f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<p>pytest-factoryboy makes it easy to combine <tt>factory</tt> approach to the test setup with the <tt>dependency</tt> injection,\nheart of the <a href=\"https://pytest.org/latest/fixture.html\" rel=\"nofollow\">pytest fixtures</a>.</p>\n<div id=\"install-pytest-factoryboy\">\n<h3>Install pytest-factoryboy</h3>\n<pre>pip install pytest-factoryboy\n</pre>\n</div>\n<div id=\"concept\">\n<h3>Concept</h3>\n<p>Library exports a function to register factories as fixtures. Fixtures are contributed\nto the same module where register function is called.</p>\n</div>\n<div id=\"factory-fixture\">\n<h3>Factory Fixture</h3>\n<p>Factory fixtures allow using factories without importing them. Name convention is lowercase-underscore\nclass name.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">factory</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pytest_factoryboy</span> <span class=\"kn\">import</span> <span class=\"n\">register</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">AuthorFactory</span><span class=\"p\">(</span><span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"n\">Factory</span><span class=\"p\">):</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Author</span>\n\n\n<span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">AuthorFactory</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">test_factory_fixture</span><span class=\"p\">(</span><span class=\"n\">author_factory</span><span class=\"p\">):</span>\n    <span class=\"n\">author</span> <span class=\"o\">=</span> <span class=\"n\">author_factory</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"Charles Dickens\"</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"n\">author</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s2\">\"Charles Dickens\"</span>\n</pre>\n</div>\n<div id=\"model-fixture\">\n<h3>Model Fixture</h3>\n<p>Model fixture implements an instance of a model created by the factory. Name convention is lowercase-underscore\nclass name.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">factory</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pytest_factoryboy</span> <span class=\"kn\">import</span> <span class=\"n\">register</span>\n\n<span class=\"nd\">@register</span>\n<span class=\"k\">class</span> <span class=\"nc\">AuthorFactory</span><span class=\"p\">(</span><span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"n\">Factory</span><span class=\"p\">):</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Author</span>\n\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">\"Charles Dickens\"</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">test_model_fixture</span><span class=\"p\">(</span><span class=\"n\">author</span><span class=\"p\">):</span>\n    <span class=\"k\">assert</span> <span class=\"n\">author</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s2\">\"Charles Dickens\"</span>\n</pre>\n<p>Model fixtures can be registered with specific names. For example if you address instances of some collection\nby the name like \u201cfirst\u201d, \u201csecond\u201d or of another parent as \u201cother\u201d:</p>\n<pre><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">BookFactory</span><span class=\"p\">)</span>  <span class=\"c1\"># book</span>\n<span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">BookFactory</span><span class=\"p\">,</span> <span class=\"s2\">\"second_book\"</span><span class=\"p\">)</span>  <span class=\"c1\"># second_book</span>\n\n<span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">AuthorFactory</span><span class=\"p\">)</span> <span class=\"c1\"># author</span>\n<span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">AuthorFactory</span><span class=\"p\">,</span> <span class=\"s2\">\"second_author\"</span><span class=\"p\">)</span> <span class=\"c1\"># second_author</span>\n\n<span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">BookFactory</span><span class=\"p\">,</span> <span class=\"s2\">\"other_book\"</span><span class=\"p\">)</span>  <span class=\"c1\"># other_book, book of another author</span>\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">fixture</span>\n<span class=\"k\">def</span> <span class=\"nf\">other_book__author</span><span class=\"p\">(</span><span class=\"n\">second_author</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Make the relation of the second_book to another (second) author.\"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"n\">second_author</span>\n</pre>\n</div>\n<div id=\"attributes-are-fixtures\">\n<h3>Attributes are Fixtures</h3>\n<p>There are fixtures created for factory attributes. Attribute names are prefixed with the model fixture name and\ndouble underscore (similar to the convention used by factory_boy).</p>\n<pre><span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">mark</span><span class=\"o\">.</span><span class=\"n\">parametrize</span><span class=\"p\">(</span><span class=\"s2\">\"author__name\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">\"Bill Gates\"</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_model_fixture</span><span class=\"p\">(</span><span class=\"n\">author</span><span class=\"p\">):</span>\n    <span class=\"k\">assert</span> <span class=\"n\">author</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s2\">\"Bill Gates\"</span>\n</pre>\n</div>\n<div id=\"subfactory\">\n<h3>SubFactory</h3>\n<p>Sub-factory attribute points to the model fixture of the sub-factory.\nAttributes of sub-factories are injected as dependencies to the model fixture and can be <a href=\"http://pytest.org/latest/fixture.html#override-a-fixture-with-direct-test-parametrization\" rel=\"nofollow\">overridden</a> via\nthe parametrization.</p>\n</div>\n<div id=\"related-factory\">\n<h3>Related Factory</h3>\n<p>Related factory attribute points to the model fixture of the related factory.\nAttributes of related factories are injected as dependencies to the model fixture and can be <a href=\"http://pytest.org/latest/fixture.html#override-a-fixture-with-direct-test-parametrization\" rel=\"nofollow\">overridden</a> via\nthe parametrization.</p>\n</div>\n<div id=\"post-generation\">\n<h3>post-generation</h3>\n<p>Post-generation attribute fixture implements only the extracted value for the post generation function.</p>\n</div>\n<div id=\"integration\">\n<h3>Integration</h3>\n<p>An example of <a href=\"https://factoryboy.readthedocs.io\" rel=\"nofollow\">factory_boy</a> and <a href=\"http://pytest.org\" rel=\"nofollow\">pytest</a> integration.</p>\n<p>factories/__init__.py:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">factory</span>\n<span class=\"kn\">from</span> <span class=\"nn\">faker</span> <span class=\"kn\">import</span> <span class=\"n\">Factory</span> <span class=\"k\">as</span> <span class=\"n\">FakerFactory</span>\n\n<span class=\"n\">faker</span> <span class=\"o\">=</span> <span class=\"n\">FakerFactory</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">AuthorFactory</span><span class=\"p\">(</span><span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"n\">django</span><span class=\"o\">.</span><span class=\"n\">DjangoModelFactory</span><span class=\"p\">):</span>\n\n    <span class=\"sd\">\"\"\"Author factory.\"\"\"</span>\n\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"n\">LazyAttribute</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">faker</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">())</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"s1\">'app.Author'</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">BookFactory</span><span class=\"p\">(</span><span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"n\">django</span><span class=\"o\">.</span><span class=\"n\">DjangoModelFactory</span><span class=\"p\">):</span>\n\n    <span class=\"sd\">\"\"\"Book factory.\"\"\"</span>\n\n    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"n\">LazyAttribute</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">faker</span><span class=\"o\">.</span><span class=\"n\">sentence</span><span class=\"p\">(</span><span class=\"n\">nb_words</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">))</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"s1\">'app.Book'</span>\n\n    <span class=\"n\">author</span> <span class=\"o\">=</span> <span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"n\">SubFactory</span><span class=\"p\">(</span><span class=\"n\">AuthorFactory</span><span class=\"p\">)</span>\n</pre>\n<p>tests/conftest.py:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pytest_factoryboy</span> <span class=\"kn\">import</span> <span class=\"n\">register</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">factories</span> <span class=\"kn\">import</span> <span class=\"n\">AuthorFactory</span><span class=\"p\">,</span> <span class=\"n\">BookFactory</span>\n\n<span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">AuthorFactory</span><span class=\"p\">)</span>\n<span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">BookFactory</span><span class=\"p\">)</span>\n</pre>\n<p>tests/test_models.py:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">app.models</span> <span class=\"kn\">import</span> <span class=\"n\">Book</span>\n<span class=\"kn\">from</span> <span class=\"nn\">factories</span> <span class=\"kn\">import</span> <span class=\"n\">BookFactory</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">test_book_factory</span><span class=\"p\">(</span><span class=\"n\">book_factory</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Factories become fixtures automatically.\"\"\"</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">book_factory</span><span class=\"p\">,</span> <span class=\"n\">BookFactory</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">test_book</span><span class=\"p\">(</span><span class=\"n\">book</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Instances become fixtures automatically.\"\"\"</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">book</span><span class=\"p\">,</span> <span class=\"n\">Book</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">mark</span><span class=\"o\">.</span><span class=\"n\">parametrize</span><span class=\"p\">(</span><span class=\"s2\">\"book__title\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">\"PyTest for Dummies\"</span><span class=\"p\">])</span>\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">mark</span><span class=\"o\">.</span><span class=\"n\">parametrize</span><span class=\"p\">(</span><span class=\"s2\">\"author__name\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">\"Bill Gates\"</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_parametrized</span><span class=\"p\">(</span><span class=\"n\">book</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"You can set any factory attribute as a fixture using naming convention.\"\"\"</span>\n    <span class=\"k\">assert</span> <span class=\"n\">book</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s2\">\"PyTest for Dummies\"</span>\n    <span class=\"k\">assert</span> <span class=\"n\">book</span><span class=\"o\">.</span><span class=\"n\">author</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s2\">\"Bill Gates\"</span>\n</pre>\n</div>\n<div id=\"fixture-partial-specialization\">\n<h3>Fixture partial specialization</h3>\n<p>There is a possibility to pass keyword parameters in order to override factory attribute values during fixture\nregistration. This comes in handy when your test case is requesting a lot of fixture flavors. Too much for the\nregular pytest parametrization.\nIn this case you can register fixture flavors in the local test module and specify value deviations inside <tt>register</tt>\nfunction calls.</p>\n<pre><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">AuthorFactory</span><span class=\"p\">,</span> <span class=\"s2\">\"male_author\"</span><span class=\"p\">,</span> <span class=\"n\">gender</span><span class=\"o\">=</span><span class=\"s2\">\"M\"</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"John Doe\"</span><span class=\"p\">)</span>\n<span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">AuthorFactory</span><span class=\"p\">,</span> <span class=\"s2\">\"female_author\"</span><span class=\"p\">,</span> <span class=\"n\">gender</span><span class=\"o\">=</span><span class=\"s2\">\"F\"</span><span class=\"p\">)</span>\n\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">fixture</span>\n<span class=\"k\">def</span> <span class=\"nf\">female_author__name</span><span class=\"p\">():</span>\n    <span class=\"sd\">\"\"\"Override female author name as a separate fixture.\"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"s2\">\"Jane Doe\"</span>\n\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">mark</span><span class=\"o\">.</span><span class=\"n\">parametrize</span><span class=\"p\">(</span><span class=\"s2\">\"male_author__age\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">42</span><span class=\"p\">])</span>  <span class=\"c1\"># Override even more</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_partial</span><span class=\"p\">(</span><span class=\"n\">male_author</span><span class=\"p\">,</span> <span class=\"n\">female_author</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Test fixture partial specialization.\"\"\"</span>\n    <span class=\"k\">assert</span> <span class=\"n\">male_author</span><span class=\"o\">.</span><span class=\"n\">gender</span> <span class=\"o\">==</span> <span class=\"s2\">\"M\"</span>\n    <span class=\"k\">assert</span> <span class=\"n\">male_author</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s2\">\"John Doe\"</span>\n    <span class=\"k\">assert</span> <span class=\"n\">male_author</span><span class=\"o\">.</span><span class=\"n\">age</span> <span class=\"o\">==</span> <span class=\"mi\">42</span>\n\n    <span class=\"k\">assert</span> <span class=\"n\">female_author</span><span class=\"o\">.</span><span class=\"n\">gender</span> <span class=\"o\">==</span> <span class=\"s2\">\"F\"</span>\n    <span class=\"k\">assert</span> <span class=\"n\">female_author</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s2\">\"Jane Doe\"</span>\n</pre>\n</div>\n<div id=\"fixture-attributes\">\n<h3>Fixture attributes</h3>\n<p>Sometimes it is necessary to pass an instance of another fixture as an attribute value to the factory.\nIt is possible to override the generated attribute fixture where desired values can be requested as\nfixture dependencies. There is also a lazy wrapper for the fixture that can be used in the parametrization\nwithout defining fixtures in a module.</p>\n<p>LazyFixture constructor accepts either existing fixture name or callable with dependencies:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pytest</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pytest_factoryboy</span> <span class=\"kn\">import</span> <span class=\"n\">register</span><span class=\"p\">,</span> <span class=\"n\">LazyFixture</span>\n\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">mark</span><span class=\"o\">.</span><span class=\"n\">parametrize</span><span class=\"p\">(</span><span class=\"s2\">\"book__author\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">LazyFixture</span><span class=\"p\">(</span><span class=\"s2\">\"another_author\"</span><span class=\"p\">)])</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_lazy_fixture_name</span><span class=\"p\">(</span><span class=\"n\">book</span><span class=\"p\">,</span> <span class=\"n\">another_author</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Test that book author is replaced with another author by fixture name.\"\"\"</span>\n    <span class=\"k\">assert</span> <span class=\"n\">book</span><span class=\"o\">.</span><span class=\"n\">author</span> <span class=\"o\">==</span> <span class=\"n\">another_author</span>\n\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">mark</span><span class=\"o\">.</span><span class=\"n\">parametrize</span><span class=\"p\">(</span><span class=\"s2\">\"book__author\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">LazyFixture</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">another_author</span><span class=\"p\">:</span> <span class=\"n\">another_author</span><span class=\"p\">)])</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_lazy_fixture_callable</span><span class=\"p\">(</span><span class=\"n\">book</span><span class=\"p\">,</span> <span class=\"n\">another_author</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Test that book author is replaced with another author by callable.\"\"\"</span>\n    <span class=\"k\">assert</span> <span class=\"n\">book</span><span class=\"o\">.</span><span class=\"n\">author</span> <span class=\"o\">==</span> <span class=\"n\">another_author</span>\n\n\n<span class=\"c1\"># Can also be used in the partial specialization during the registration.</span>\n<span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">BookFactory</span><span class=\"p\">,</span> <span class=\"s2\">\"another_book\"</span><span class=\"p\">,</span> <span class=\"n\">author</span><span class=\"o\">=</span><span class=\"n\">LazyFixture</span><span class=\"p\">(</span><span class=\"s2\">\"another_author\"</span><span class=\"p\">))</span>\n</pre>\n</div>\n</div>\n<div id=\"post-generation-dependencies\">\n<h2>Post-generation dependencies</h2>\n<p>Unlike factory_boy which binds related objects using an internal container to store results of lazy evaluations,\npytest-factoryboy relies on the PyTest request.</p>\n<p>Circular dependencies between objects can be resolved using post-generation hooks/related factories in combination with\npassing the SelfAttribute, but in the case of PyTest request fixture functions have to return values in order to be cached\nin the request and to become available to other fixtures.</p>\n<p>That\u2019s why evaluation of the post-generation declaration in pytest-factoryboy is deferred until calling\nthe test funciton.\nThis solves circular dependecy resolution for situations like:</p>\n<pre>o-&gt;[ A ]--&gt;[ B ]&lt;--[ C ]-o\n|                        |\no----(C depends on A)----o\n</pre>\n<p>On the other hand deferring the evaluation of post-generation declarations evaluation makes their result unavailable during the generation\nof objects that are not in the circular dependecy, but they rely on the post-generation action.</p>\n<p>pytest-factoryboy is trying to detect cycles and resolve post-generation dependencies automatically.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pytest_factoryboy</span> <span class=\"kn\">import</span> <span class=\"n\">register</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Foo</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Bar</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">foo</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"n\">foo</span>\n\n\n<span class=\"nd\">@register</span>\n<span class=\"k\">class</span> <span class=\"nc\">FooFactory</span><span class=\"p\">(</span><span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"n\">Factory</span><span class=\"p\">):</span>\n\n    <span class=\"sd\">\"\"\"Foo factory.\"\"\"</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Foo</span>\n\n    <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n    <span class=\"nd\">@factory</span><span class=\"o\">.</span><span class=\"n\">post_generation</span>\n    <span class=\"k\">def</span> <span class=\"nf\">set1</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">,</span> <span class=\"n\">create</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"n\">foo</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">BarFactory</span><span class=\"p\">(</span><span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"n\">Factory</span><span class=\"p\">):</span>\n\n    <span class=\"sd\">\"\"\"Bar factory.\"\"\"</span>\n\n    <span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"n\">SubFactory</span><span class=\"p\">(</span><span class=\"n\">FooFactory</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_create</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">model_class</span><span class=\"p\">,</span> <span class=\"n\">foo</span><span class=\"p\">):</span>\n        <span class=\"k\">assert</span> <span class=\"n\">foo</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>  <span class=\"c1\"># Assert that set1 is evaluated before object generation</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">BarFactory</span><span class=\"p\">,</span> <span class=\"bp\">cls</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">_create</span><span class=\"p\">(</span><span class=\"n\">model_class</span><span class=\"p\">,</span> <span class=\"n\">foo</span><span class=\"o\">=</span><span class=\"n\">foo</span><span class=\"p\">)</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Bar</span>\n\n\n<span class=\"n\">register</span><span class=\"p\">(</span>\n    <span class=\"n\">BarFactory</span><span class=\"p\">,</span>\n    <span class=\"s1\">'bar'</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"sd\">\"\"\"Forces 'set1' to be evaluated first.\"\"\"</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">test_depends_on_set1</span><span class=\"p\">(</span><span class=\"n\">bar</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Test that post-generation hooks are done and the value is 2.\"\"\"</span>\n    <span class=\"k\">assert</span> <span class=\"n\">depends_on_1</span><span class=\"o\">.</span><span class=\"n\">foo</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n</pre>\n<div id=\"hooks\">\n<h3>Hooks</h3>\n<p>pytest-factoryboy exposes several <a href=\"http://pytest.org/latest/plugins.html#well-specified-hooks\" rel=\"nofollow\">pytest hooks</a>\nwhich might be helpful for e.g. controlling database transaction, for reporting etc:</p>\n<ul>\n<li>pytest_factoryboy_done(request) - Called after all factory based fixtures and their post-generation actions have been evaluated.</li>\n</ul>\n</div>\n<div id=\"license\">\n<h3>License</h3>\n<p>This software is licensed under the <a href=\"http://en.wikipedia.org/wiki/MIT_License\" rel=\"nofollow\">MIT license</a>.</p>\n<p>\u00a9 2015 Oleg Pidsadnyi, Anatoly Bubenkov and others</p>\n</div>\n</div>\n<div id=\"authors\">\n<h2>Authors</h2>\n<dl>\n<dt><a href=\"mailto:oleg.pidsadnyi%40gmail.com\">Oleg Pidsadnyi</a></dt>\n<dd>original idea and implementation</dd>\n</dl>\n<p>These people have contributed to <cite>pytest-factoryboy</cite>, in alphabetical order:</p>\n<ul>\n<li><a href=\"mailto:bubenkoff%40gmail.com\">Anatoly Bubenkov</a></li>\n<li><a href=\"https://github.com/dduong42\" rel=\"nofollow\">Daniel Duong</a></li>\n<li><a href=\"https://github.com/blueyed\" rel=\"nofollow\">Daniel Hahler</a></li>\n<li><a href=\"https://github.com/p13773\" rel=\"nofollow\">p13773</a></li>\n<li><a href=\"https://github.com/kvas-it\" rel=\"nofollow\">Vasily Kuznetsov</a></li>\n</ul>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<div id=\"id1\">\n<h3>2.0.3</h3>\n<ul>\n<li>Fix compatibility with pytest 5.</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>2.0.2</h3>\n<ul>\n<li>Fix warning <cite>use of getfuncargvalue is deprecated, use getfixturevalue</cite> (sliverc)</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>2.0.1</h3>\n<p>Breaking change due to the heavy refactor of both pytest and factory_boy.</p>\n<ul>\n<li>Failing test for using a <cite>attributes</cite> field on the factory (blueyed)</li>\n<li>Minimal pytest version is 3.3.2 (olegpidsadnyi)</li>\n<li>Minimal factory_boy version is 2.10.0 (olegpidsadnyi)</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3>1.3.2</h3>\n<ul>\n<li>use {posargs} in pytest command (blueyed)</li>\n<li>pin factory_boy&lt;2.9 (blueyed)</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3>1.3.1</h3>\n<ul>\n<li>fix LazyFixture evaluation order (olegpidsadnyi)</li>\n</ul>\n</div>\n<div id=\"id6\">\n<h3>1.3.0</h3>\n<ul>\n<li>replace request._fixturedefs by request._fixture_defs (p13773)</li>\n</ul>\n</div>\n<div id=\"id7\">\n<h3>1.2.2</h3>\n<ul>\n<li>fix post-generation dependencies (olegpidsadnyi)</li>\n</ul>\n</div>\n<div id=\"id8\">\n<h3>1.2.1</h3>\n<ul>\n<li>automatical resolution of the post-generation dependencies (olegpidsadnyi, kvas-it)</li>\n</ul>\n</div>\n<div id=\"id9\">\n<h3>1.1.6</h3>\n<ul>\n<li>fixes fixture function module name attribute (olegpidsadnyi)</li>\n<li>fixes _after_postgeneration hook invocation for deferred post-generation declarations (olegpidsadnyi)</li>\n</ul>\n</div>\n<div id=\"id10\">\n<h3>1.1.5</h3>\n<ul>\n<li>support factory models to be passed as strings (bubenkoff)</li>\n</ul>\n</div>\n<div id=\"id11\">\n<h3>1.1.3</h3>\n<ul>\n<li>circular dependency determination is fixed for the post-generation (olegpidsadnyi)</li>\n</ul>\n</div>\n<div id=\"id12\">\n<h3>1.1.2</h3>\n<ul>\n<li>circular dependency determination is fixed for the RelatedFactory attributes (olegpidsadnyi)</li>\n</ul>\n</div>\n<div id=\"id13\">\n<h3>1.1.1</h3>\n<ul>\n<li>fix installation issue when django environment is not set (bubenkoff, amakhnach)</li>\n</ul>\n</div>\n<div id=\"id14\">\n<h3>1.1.0</h3>\n<ul>\n<li>fixture dependencies on deferred post-generation declarations (olegpidsadnyi)</li>\n</ul>\n</div>\n<div id=\"id15\">\n<h3>1.0.3</h3>\n<ul>\n<li>post_generation extra parameters fixed (olegpidsadnyi)</li>\n<li>fixture partial specialization (olegpidsadnyi)</li>\n<li>fixes readme and example (dduong42)</li>\n<li>lazy fixtures (olegpidsadnyi)</li>\n<li>deferred post-generation evaluation (olegpidsadnyi)</li>\n<li>hooks (olegpidsadnyi)</li>\n</ul>\n</div>\n<div id=\"id16\">\n<h3>1.0.2</h3>\n<ul>\n<li>refactoring of the fixture function compilation (olegpidsadnyi)</li>\n<li>related factory fix (olegpidsadnyi)</li>\n<li>post_generation fixture dependency fixed (olegpidsadnyi)</li>\n<li>model fixture registration with specific name (olegpidsadnyi)</li>\n<li>README updated (olegpidsadnyi)</li>\n</ul>\n</div>\n<div id=\"id17\">\n<h3>1.0.1</h3>\n<ul>\n<li>use <tt>inflection</tt> package to convert camel case to underscore (bubenkoff)</li>\n</ul>\n</div>\n<div id=\"id18\">\n<h3>1.0.0</h3>\n<ul>\n<li>initial release (olegpidsadnyi)</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 5480924, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "8221c0d0cafaaa8406633456dbc89211", "sha256": "358da52aff92b2a4cf27cd726bd14c65ec494762290b98b5d40be3c385a0fc1c"}, "downloads": -1, "filename": "pytest-factoryboy-1.0.0.tar.gz", "has_sig": false, "md5_digest": "8221c0d0cafaaa8406633456dbc89211", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5051, "upload_time": "2015-04-09T10:00:19", "upload_time_iso_8601": "2015-04-09T10:00:19.099568Z", "url": "https://files.pythonhosted.org/packages/db/e6/2d5c962c4c58778e3f06dfbabf38d7aa194f7eba67ab83050ec3b98ca104/pytest-factoryboy-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "75b99bb3b476760856e9b7f6d24fe829", "sha256": "0e27eea3c254b31ff6211b741734038b809975f20710823619924f547363e747"}, "downloads": -1, "filename": "pytest-factoryboy-1.0.1.tar.gz", "has_sig": false, "md5_digest": "75b99bb3b476760856e9b7f6d24fe829", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4792, "upload_time": "2015-04-09T12:12:18", "upload_time_iso_8601": "2015-04-09T12:12:18.205235Z", "url": "https://files.pythonhosted.org/packages/9b/1d/5d4bc06a8c4b8ea098c42a229f25666ef2d3b8d8bf23abe9cd4d6dccb21b/pytest-factoryboy-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "3c8bf1d88fd00e97ed73a1145c84ca8a", "sha256": "4c4143e99b84a6932e6ff44311413d21462b29b3527b90ef295d75955d7e098a"}, "downloads": -1, "filename": "pytest-factoryboy-1.0.2.tar.gz", "has_sig": false, "md5_digest": "3c8bf1d88fd00e97ed73a1145c84ca8a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5845, "upload_time": "2015-04-23T11:42:45", "upload_time_iso_8601": "2015-04-23T11:42:45.009299Z", "url": "https://files.pythonhosted.org/packages/0e/9f/c564bb40b5d89f95414edb66a177aee444ebce8be04e0e772067d27d081f/pytest-factoryboy-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "48dcea96927806557ee4003d67ce30d2", "sha256": "3379ca0466a08af1b775a44485f40e7573e4dfe38c09f282e964613b6da08272"}, "downloads": -1, "filename": "pytest-factoryboy-1.0.3.tar.gz", "has_sig": false, "md5_digest": "48dcea96927806557ee4003d67ce30d2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7969, "upload_time": "2015-05-29T07:01:56", "upload_time_iso_8601": "2015-05-29T07:01:56.871497Z", "url": "https://files.pythonhosted.org/packages/b7/34/b4d18922d498e0e099f0d7d3c1d83097283e93873b87b59cab3456db5b7b/pytest-factoryboy-1.0.3.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "518ce15bb129583af2d713b6613865f6", "sha256": "e4cc6eed75aabf23f6b1226c377a2c18a77339a9595757bf99255fc71030c1da"}, "downloads": -1, "filename": "pytest-factoryboy-1.1.0.tar.gz", "has_sig": false, "md5_digest": "518ce15bb129583af2d713b6613865f6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10489, "upload_time": "2015-06-01T08:32:15", "upload_time_iso_8601": "2015-06-01T08:32:15.691203Z", "url": "https://files.pythonhosted.org/packages/f2/d7/93ee5e650537842808cb1aee9be123b1973d391102713ad27e3257783f0d/pytest-factoryboy-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "14afe4ba8b11b0979a7f6fd589eb1661", "sha256": "967312eedfd182d49aa9f4a8d130135bccf8e1ec16320759aaaf65ee12b3514c"}, "downloads": -1, "filename": "pytest-factoryboy-1.1.1.tar.gz", "has_sig": false, "md5_digest": "14afe4ba8b11b0979a7f6fd589eb1661", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12779, "upload_time": "2015-06-15T19:50:44", "upload_time_iso_8601": "2015-06-15T19:50:44.416137Z", "url": "https://files.pythonhosted.org/packages/3d/55/9d9cb8bc8520060d57f8a5005ff418d10f2be5fdc453fc23200210235aa6/pytest-factoryboy-1.1.1.tar.gz", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "c15021d633bef7f9cedd72d0bf9a650e", "sha256": "3816eb53536775d1ea70c7f4af4d90fd2e9edfdcb17b274386c271f687ec8381"}, "downloads": -1, "filename": "pytest-factoryboy-1.1.2.tar.gz", "has_sig": false, "md5_digest": "c15021d633bef7f9cedd72d0bf9a650e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12779, "upload_time": "2015-06-20T22:25:32", "upload_time_iso_8601": "2015-06-20T22:25:32.416094Z", "url": "https://files.pythonhosted.org/packages/a2/cf/f90714800f6c39f729666d17fd020b02668a524050b5373b8e0f8f015670/pytest-factoryboy-1.1.2.tar.gz", "yanked": false}], "1.1.3": [{"comment_text": "", "digests": {"md5": "8ca58051a95a818f000a06c1e2f05a89", "sha256": "e3fa223c5943681105ce7a44bfcea9d7eb5107b466c47d8102649f9e8e89818d"}, "downloads": -1, "filename": "pytest-factoryboy-1.1.3.tar.gz", "has_sig": false, "md5_digest": "8ca58051a95a818f000a06c1e2f05a89", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10764, "upload_time": "2015-09-15T11:31:42", "upload_time_iso_8601": "2015-09-15T11:31:42.464693Z", "url": "https://files.pythonhosted.org/packages/2e/2d/73a4eb5770356017af870ef4e46da75029687c8b823923703c6f788def1f/pytest-factoryboy-1.1.3.tar.gz", "yanked": false}], "1.1.4": [{"comment_text": "", "digests": {"md5": "a075b7faa40d793d5edec956a8f642e4", "sha256": "8f54b598c477d1bd210bb616c463838b8e1621ca0487d428590a5f78718c4102"}, "downloads": -1, "filename": "pytest-factoryboy-1.1.4.tar.gz", "has_sig": false, "md5_digest": "a075b7faa40d793d5edec956a8f642e4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12904, "upload_time": "2015-09-21T14:17:13", "upload_time_iso_8601": "2015-09-21T14:17:13.131283Z", "url": "https://files.pythonhosted.org/packages/07/4e/3c92af8087a2fa86cda99aadc2b105bd052cc9315242bf03b3f4832b1e9e/pytest-factoryboy-1.1.4.tar.gz", "yanked": false}], "1.1.5": [{"comment_text": "", "digests": {"md5": "d71e1ffcb3ff5f6ab8888e543582239c", "sha256": "487860ae4ccbea940b84b798ed817677b85070ff6c30c3b6e5a2d854133f3abc"}, "downloads": -1, "filename": "pytest-factoryboy-1.1.5.tar.gz", "has_sig": false, "md5_digest": "d71e1ffcb3ff5f6ab8888e543582239c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12927, "upload_time": "2015-12-09T22:39:01", "upload_time_iso_8601": "2015-12-09T22:39:01.566630Z", "url": "https://files.pythonhosted.org/packages/ae/df/456a0f57af1dda17bc4d4b036fdb5f66b835c7204eedbeccd43ca761f0ad/pytest-factoryboy-1.1.5.tar.gz", "yanked": false}], "1.1.6": [{"comment_text": "", "digests": {"md5": "1a356154d67b8ac07af69f75d0d81076", "sha256": "325a8dc68f2087e59e865666b79a1c9a2a4a003805c0f23867847ec89d1a77a0"}, "downloads": -1, "filename": "pytest-factoryboy-1.1.6.tar.gz", "has_sig": false, "md5_digest": "1a356154d67b8ac07af69f75d0d81076", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13348, "upload_time": "2016-04-20T08:28:43", "upload_time_iso_8601": "2016-04-20T08:28:43.950688Z", "url": "https://files.pythonhosted.org/packages/63/0f/ae158309993e891135b939944409e36a2598da031f89baf772ca22212ef4/pytest-factoryboy-1.1.6.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "5c1da5eedf5e6308ded501972ec6814a", "sha256": "a89926d3c38ebd2383d463139f5b36ca9117fe9e92785bd7c2952ec9e9ef176f"}, "downloads": -1, "filename": "pytest-factoryboy-1.2.1.tar.gz", "has_sig": false, "md5_digest": "5c1da5eedf5e6308ded501972ec6814a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13810, "upload_time": "2016-06-29T11:14:57", "upload_time_iso_8601": "2016-06-29T11:14:57.129179Z", "url": "https://files.pythonhosted.org/packages/0e/a9/b40700a1ffa6d029b7772e3b369512ab1ab7ca9d30955d652e6de091104e/pytest-factoryboy-1.2.1.tar.gz", "yanked": false}], "1.2.2": [{"comment_text": "", "digests": {"md5": "d7efd171d65cf1d6c74506836bb24fca", "sha256": "06a909d35aae347f85c7abcc2357b01bbba494472987b5d777bb1cd6dc10c037"}, "downloads": -1, "filename": "pytest-factoryboy-1.2.2.tar.gz", "has_sig": false, "md5_digest": "d7efd171d65cf1d6c74506836bb24fca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13856, "upload_time": "2016-07-06T08:06:33", "upload_time_iso_8601": "2016-07-06T08:06:33.687594Z", "url": "https://files.pythonhosted.org/packages/60/f3/c53a11ce35ad940d45348ba0fbe4dd161218960742567d8ffff8e4e48c00/pytest-factoryboy-1.2.2.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "f808e94b88b8e91bda25f53eb64bd213", "sha256": "2cf4e8af48aa66da367c547e6a59e0b263a87c52e14c59b3197cde4dbcf117a2"}, "downloads": -1, "filename": "pytest-factoryboy-1.3.0.tar.gz", "has_sig": false, "md5_digest": "f808e94b88b8e91bda25f53eb64bd213", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14031, "upload_time": "2016-10-18T14:28:15", "upload_time_iso_8601": "2016-10-18T14:28:15.368229Z", "url": "https://files.pythonhosted.org/packages/05/92/4fb4a329ebf81ad42f4595923fed3f2d3b2ab44438c615c39e90ed615b90/pytest-factoryboy-1.3.0.tar.gz", "yanked": false}], "1.3.1": [{"comment_text": "", "digests": {"md5": "9049c3ef86120a8f68a6e762d47b29e4", "sha256": "fb9957975ae916b308af4bbf73f609a819e3916db2c413f1b5a5b6204f87253a"}, "downloads": -1, "filename": "pytest-factoryboy-1.3.1.tar.gz", "has_sig": false, "md5_digest": "9049c3ef86120a8f68a6e762d47b29e4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14208, "upload_time": "2017-02-27T16:20:31", "upload_time_iso_8601": "2017-02-27T16:20:31.285347Z", "url": "https://files.pythonhosted.org/packages/b8/f6/df2ade0c769f3036d344785d8c84bac15df4e83d12ba4b6d26aeda2a5a19/pytest-factoryboy-1.3.1.tar.gz", "yanked": false}], "1.3.2": [{"comment_text": "", "digests": {"md5": "3ac1ad9544449b384c9b84b1d7c8c032", "sha256": "81a8d0296b8f4342ae59c2fbd9483831720df5089ec0f68580ba99720b717078"}, "downloads": -1, "filename": "pytest-factoryboy-1.3.2.tar.gz", "has_sig": false, "md5_digest": "3ac1ad9544449b384c9b84b1d7c8c032", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14188, "upload_time": "2018-01-29T19:15:47", "upload_time_iso_8601": "2018-01-29T19:15:47.741013Z", "url": "https://files.pythonhosted.org/packages/f9/bb/c304ce43d2b0004ba843a36f622a12d4444789c17586967ee037b3e0a45e/pytest-factoryboy-1.3.2.tar.gz", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "129f852f7d1d99790dd18d2e5f55140a", "sha256": "ad438d191d2b2a0f26956d437c1963875db573147a84ffd85d7bbeaefae22458"}, "downloads": -1, "filename": "pytest-factoryboy-2.0.1.tar.gz", "has_sig": false, "md5_digest": "129f852f7d1d99790dd18d2e5f55140a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14585, "upload_time": "2018-02-02T10:35:32", "upload_time_iso_8601": "2018-02-02T10:35:32.258593Z", "url": "https://files.pythonhosted.org/packages/80/15/294f84a4d3159f6be5524b8f02b70aae82c86e2341c27ac00fdd26b0d44f/pytest-factoryboy-2.0.1.tar.gz", "yanked": false}], "2.0.2": [{"comment_text": "", "digests": {"md5": "c98f416e9596e4dd00cff194e448214f", "sha256": "b1bdb7da9078eb84a6cb9b7b93dda9cfb575488df04f91b1ab4d20a1dfce8faf"}, "downloads": -1, "filename": "pytest-factoryboy-2.0.2.tar.gz", "has_sig": false, "md5_digest": "c98f416e9596e4dd00cff194e448214f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14629, "upload_time": "2018-11-07T16:58:32", "upload_time_iso_8601": "2018-11-07T16:58:32.692873Z", "url": "https://files.pythonhosted.org/packages/46/17/8f452326e4fdb2657e9d77bb2ff4d5a2a7807c9fe931ca1a5904bd9e52a6/pytest-factoryboy-2.0.2.tar.gz", "yanked": false}], "2.0.3": [{"comment_text": "", "digests": {"md5": "9c2aac64cdc489e33725e8f3e3546ba0", "sha256": "ffef3fb7ddec1299d3df0d334846259023f3d1da5ab887ad880139a8253a5a1a"}, "downloads": -1, "filename": "pytest-factoryboy-2.0.3.tar.gz", "has_sig": false, "md5_digest": "9c2aac64cdc489e33725e8f3e3546ba0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14707, "upload_time": "2019-07-03T11:48:58", "upload_time_iso_8601": "2019-07-03T11:48:58.788785Z", "url": "https://files.pythonhosted.org/packages/77/8b/ec891cea6f61ac849bd68ff677ee2176eaec606fa1b7a7a4a80fa17ce6b1/pytest-factoryboy-2.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9c2aac64cdc489e33725e8f3e3546ba0", "sha256": "ffef3fb7ddec1299d3df0d334846259023f3d1da5ab887ad880139a8253a5a1a"}, "downloads": -1, "filename": "pytest-factoryboy-2.0.3.tar.gz", "has_sig": false, "md5_digest": "9c2aac64cdc489e33725e8f3e3546ba0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14707, "upload_time": "2019-07-03T11:48:58", "upload_time_iso_8601": "2019-07-03T11:48:58.788785Z", "url": "https://files.pythonhosted.org/packages/77/8b/ec891cea6f61ac849bd68ff677ee2176eaec606fa1b7a7a4a80fa17ce6b1/pytest-factoryboy-2.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:10 2020"}