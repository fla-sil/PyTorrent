{"info": {"author": "Jeffrey Wilges", "author_email": "jeffrey@wilges.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "License :: OSI Approved :: BSD License", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Programming Language :: Python :: 3", "Topic :: Utilities"], "description": "# exit-pipe\n*exit-pipe: a command-line utility to pipe the exit code from a subprocess\nthrough one or more modifiers.*\n\n[![build](https://github.com/jwilges/exit-pipe/workflows/CI/badge.svg)](https://github.com/jwilges/exit-pipe/actions?query=workflow:CI) [![codecov](https://codecov.io/gh/jwilges/exit-pipe/branch/master/graph/badge.svg)](https://codecov.io/gh/jwilges/exit-pipe)\n\n\n## Background\nThis utility executes a specified subprocess, captures its exit code, and exits\nwith the result of piping the exit code through a conditional exit code\nmodifier.\n\nThe motivation for this slightly obtuse solution was to work around limitations\nimposed by build utilities which execute configurable subprocesses without\nexposing full shell access (e.g. `tox`) while also maintaining reasonable\nportability across multiple operating system environments (thus eliminating the\noption of executing an explicit shell within `tox`).\n\nAs of this release, one style of exit code modifier pipeline exists: `bitfield`.\n\nThe `bitfield` exit code pipeline (activated via the `--bitfield` argument)\nevaluates the exit code against one or more bitfield masks and either replaces\nthe exit code with the mapping specified by the first matching bitfield mask or\npasses through the unmodified exit code if no bitfield masks match.\n\n## Supported Platforms\nThis utility has been tested on macOS Catalina 10.15.\n\n## Usage\n### Development Environment\nInitialize a development environment by executing `tox`; the `exit-pipe` utility\nwill be installed in the `.tox/py38` Python virtual environment binary path.\n\n### Examples\n#### Remap non-fatal, non-error pylint exit codes to 0\nAs of `pylint` 2.4.3, the utility's exit code is a bitfield that may\nbe decoded as:\n\n| Bit  | Meaning                   |\n|-----:|---------------------------|\n|  `0` | No error                  |\n|  `1` | Fatal message issued      |\n|  `2` | Error message issued      |\n|  `4` | Warning message issued    |\n|  `8` | Refactor message issued   |\n| `16` | Convention message issued |\n| `32` | Usage error               |\n\nTo remap the exit code for `pylint src` such that it exits with:\n- `1` for fatal (`1`) and error (`2`) exit codes, and\n- `0` for warning (`4`), refactor (`8`), convention (`16`), and usage (`32`) exit codes,\n\nyou may pass `pylint` through `exit-pipe` as follows:\n\n    exit-pipe --bitfield \"3:1;60:0\" -- pylint src\n\nThe equivalent bitfield masks may be specified individually as follows:\n\n    exit-pipe --bitfield \"1,2:1;4,8,16,32:0\" -- pylint src\n\nAs niche as this example may be, it serves as a generic workaround to cases\nwhere you may wish to log all `pylint` messages while only interpreting a few\nclasses of messages as build errors. Disabling or ignoring classes of messages\nwould result in them not being logged.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jwilges/exit-pipe", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "exit-pipe", "package_url": "https://pypi.org/project/exit-pipe/", "platform": "", "project_url": "https://pypi.org/project/exit-pipe/", "project_urls": {"Homepage": "https://github.com/jwilges/exit-pipe"}, "release_url": "https://pypi.org/project/exit-pipe/1.0.0/", "requires_dist": null, "requires_python": ">=3.6", "summary": "a command-line utility to pipe the exit code from a subprocess through one or more modifiers", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>exit-pipe</h1>\n<p><em>exit-pipe: a command-line utility to pipe the exit code from a subprocess\nthrough one or more modifiers.</em></p>\n<p><a href=\"https://github.com/jwilges/exit-pipe/actions?query=workflow:CI\" rel=\"nofollow\"><img alt=\"build\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5abfa2aeb6f9596533cb749aefe098d33da7af88/68747470733a2f2f6769746875622e636f6d2f6a77696c6765732f657869742d706970652f776f726b666c6f77732f43492f62616467652e737667\"></a> <a href=\"https://codecov.io/gh/jwilges/exit-pipe\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/85fb47acefbd9e3f8e010ce1df16c54a62379c7f/68747470733a2f2f636f6465636f762e696f2f67682f6a77696c6765732f657869742d706970652f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a></p>\n<h2>Background</h2>\n<p>This utility executes a specified subprocess, captures its exit code, and exits\nwith the result of piping the exit code through a conditional exit code\nmodifier.</p>\n<p>The motivation for this slightly obtuse solution was to work around limitations\nimposed by build utilities which execute configurable subprocesses without\nexposing full shell access (e.g. <code>tox</code>) while also maintaining reasonable\nportability across multiple operating system environments (thus eliminating the\noption of executing an explicit shell within <code>tox</code>).</p>\n<p>As of this release, one style of exit code modifier pipeline exists: <code>bitfield</code>.</p>\n<p>The <code>bitfield</code> exit code pipeline (activated via the <code>--bitfield</code> argument)\nevaluates the exit code against one or more bitfield masks and either replaces\nthe exit code with the mapping specified by the first matching bitfield mask or\npasses through the unmodified exit code if no bitfield masks match.</p>\n<h2>Supported Platforms</h2>\n<p>This utility has been tested on macOS Catalina 10.15.</p>\n<h2>Usage</h2>\n<h3>Development Environment</h3>\n<p>Initialize a development environment by executing <code>tox</code>; the <code>exit-pipe</code> utility\nwill be installed in the <code>.tox/py38</code> Python virtual environment binary path.</p>\n<h3>Examples</h3>\n<h4>Remap non-fatal, non-error pylint exit codes to 0</h4>\n<p>As of <code>pylint</code> 2.4.3, the utility's exit code is a bitfield that may\nbe decoded as:</p>\n<table>\n<thead>\n<tr>\n<th align=\"right\">Bit</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"right\"><code>0</code></td>\n<td>No error</td>\n</tr>\n<tr>\n<td align=\"right\"><code>1</code></td>\n<td>Fatal message issued</td>\n</tr>\n<tr>\n<td align=\"right\"><code>2</code></td>\n<td>Error message issued</td>\n</tr>\n<tr>\n<td align=\"right\"><code>4</code></td>\n<td>Warning message issued</td>\n</tr>\n<tr>\n<td align=\"right\"><code>8</code></td>\n<td>Refactor message issued</td>\n</tr>\n<tr>\n<td align=\"right\"><code>16</code></td>\n<td>Convention message issued</td>\n</tr>\n<tr>\n<td align=\"right\"><code>32</code></td>\n<td>Usage error</td>\n</tr></tbody></table>\n<p>To remap the exit code for <code>pylint src</code> such that it exits with:</p>\n<ul>\n<li><code>1</code> for fatal (<code>1</code>) and error (<code>2</code>) exit codes, and</li>\n<li><code>0</code> for warning (<code>4</code>), refactor (<code>8</code>), convention (<code>16</code>), and usage (<code>32</code>) exit codes,</li>\n</ul>\n<p>you may pass <code>pylint</code> through <code>exit-pipe</code> as follows:</p>\n<pre><code>exit-pipe --bitfield \"3:1;60:0\" -- pylint src\n</code></pre>\n<p>The equivalent bitfield masks may be specified individually as follows:</p>\n<pre><code>exit-pipe --bitfield \"1,2:1;4,8,16,32:0\" -- pylint src\n</code></pre>\n<p>As niche as this example may be, it serves as a generic workaround to cases\nwhere you may wish to log all <code>pylint</code> messages while only interpreting a few\nclasses of messages as build errors. Disabling or ignoring classes of messages\nwould result in them not being logged.</p>\n\n          </div>"}, "last_serial": 6407123, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "1a80d32d83a21312a6c2aef1a9f56bb9", "sha256": "37424ebb9407d9b3d6c70182b167de2ee4ce3dd5a23107393fcf0e95a91b5557"}, "downloads": -1, "filename": "exit_pipe-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "1a80d32d83a21312a6c2aef1a9f56bb9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5184, "upload_time": "2020-01-07T07:17:43", "upload_time_iso_8601": "2020-01-07T07:17:43.913066Z", "url": "https://files.pythonhosted.org/packages/26/2c/b41dbba097bc02fc7d8dee1febb38452b78bc1961b3cd40bee2f8a521525/exit_pipe-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d43e26399d714ca99d0023ff69083fc7", "sha256": "5c1847982d4c917be7c33bd40c686ce1c66fd934d73cf4ca08381da5d3256848"}, "downloads": -1, "filename": "exit-pipe-1.0.0.tar.gz", "has_sig": false, "md5_digest": "d43e26399d714ca99d0023ff69083fc7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4466, "upload_time": "2020-01-07T07:17:46", "upload_time_iso_8601": "2020-01-07T07:17:46.200255Z", "url": "https://files.pythonhosted.org/packages/fb/63/f4d8f7b69fc13311ce6839aa248f195882f6ffaf43ddd9b98af39c6662cf/exit-pipe-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1a80d32d83a21312a6c2aef1a9f56bb9", "sha256": "37424ebb9407d9b3d6c70182b167de2ee4ce3dd5a23107393fcf0e95a91b5557"}, "downloads": -1, "filename": "exit_pipe-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "1a80d32d83a21312a6c2aef1a9f56bb9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5184, "upload_time": "2020-01-07T07:17:43", "upload_time_iso_8601": "2020-01-07T07:17:43.913066Z", "url": "https://files.pythonhosted.org/packages/26/2c/b41dbba097bc02fc7d8dee1febb38452b78bc1961b3cd40bee2f8a521525/exit_pipe-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d43e26399d714ca99d0023ff69083fc7", "sha256": "5c1847982d4c917be7c33bd40c686ce1c66fd934d73cf4ca08381da5d3256848"}, "downloads": -1, "filename": "exit-pipe-1.0.0.tar.gz", "has_sig": false, "md5_digest": "d43e26399d714ca99d0023ff69083fc7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4466, "upload_time": "2020-01-07T07:17:46", "upload_time_iso_8601": "2020-01-07T07:17:46.200255Z", "url": "https://files.pythonhosted.org/packages/fb/63/f4d8f7b69fc13311ce6839aa248f195882f6ffaf43ddd9b98af39c6662cf/exit-pipe-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:46 2020"}