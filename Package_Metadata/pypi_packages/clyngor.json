{"info": {"author": "Lucas Bourneuf", "author_email": "lucas.bourneuf@laposte.net", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Science/Research", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Programming Language :: ASP", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "<p align=\"center\">\n  <img src=\"clyngor.png\"/><br>\n</p>\n\nHandy python wrapper around [Potassco's Clingo](https://potassco.org/) [ASP solver](https://en.wikipedia.org/wiki/Answer%20set%20programming).\n\n\n\n## Example\nClyngor offers multiple interfaces. The followings are all equivalent.\n(they search for [formal concepts](https://en.wikipedia.org/wiki/Formal_concept_analysis))\n\n```python\nfrom clyngor import ASP, solve\n\nanswers = ASP(\"\"\"\nrel(a,(c;d)). rel(b,(d;e)).\nobj(X):- rel(X,_) ; rel(X,Y): att(Y).\natt(Y):- rel(_,Y) ; rel(X,Y): obj(X).\n:- not obj(X):obj(X).\n:- not att(Y):att(Y).\n\"\"\")\nfor answer in answers:\n    print(answer)\n```\n\nThe same, but with the lower level function expecting files:\n\n```python\nanswers = solve(inline=\"\"\"\nrel(a,(c;d)). rel(b,(d;e)).\nobj(X):- rel(X,_) ; rel(X,Y): att(Y).\natt(Y):- rel(_,Y) ; rel(X,Y): obj(X).\n:- not obj(X):obj(X).\n:- not att(Y):att(Y).\n\"\"\")\n```\n\nMore traditional interface, using file containing the ASP source code:\n\n```python\nanswers = solve('concepts.lp'):  # also accepts an iterable of file\n```\n\nMore examples are available in [the unit tests](clyngor/test/).\n\n\n\n## Chaining\nOnce you get your answers, clyngor allows you to specify\nthe answer sets format using builtin methods:\n\n```python\nfor answer in answers.by_predicate.first_arg_only:\n    print('{' + ','.join(answer['obj']) + '} \u00d7 {' + ','.join(answer['att']) + '}')\n```\n\nAnd if you need a [*pyasp-like*](https://github.com/sthiele/pyasp) interface:\n\n```python\nfor answer in answers.as_pyasp:\n    print('{' + ','.join(a.args()[0] for a in answer if a.predicate == 'obj')\n          + '} \u00d7 {' + ','.join(a.args()[0] for a in answer if a.predicate == 'att') + '}')\n```\n\nCurrently, there is only one way to see all chaining operator available:\n[the source code of the Answers object](clyngor/answers.py).\n(or `help(clyngor.Answers)`)\n\n\n\n\n\n## Official Python API\nIf the used version of clingo is compiled with python, you can put python code into your ASP code as usual.\nBut if you also have the [clingo package](https://potassco.org/clingo/python-api/current/clingo.html)\ninstalled and importable, clyngor can use it for various tasks.\n\nUsing the official API leads to the following changes :\n\n- both robust and quick parsing, instead of the simple vs slow method\n- some options are not supported : constants, [time-limit](clyngor/test/test_time_limit.py), parsing error handling, [decoupled grounding/solving](clyngor/test/test_grounding.py)\n\nYou can activate the use of the clingo module by calling once `clyngor.activate_clingo_module()`\nor calling `clyngor.solve` with argument `use_clingo_module` set to `True`.\n\n\n## Python embedding\nFor users putting some python in their ASP, clyngor may help.\nThe only condition is to have clingo compiled with python support,\nand having clyngor installed for the python used by clingo.\n\n\n### Easy ASP functors\nClyngor provides `converted_types` function,\nallowing one to avoid boilerplate code based on type annotation when\ncalling python from inside ASP code.\n\nExample (see [tests](clyngor/test/test_upapi.py) for more):\n\n```python\n#script(python)\nfrom clyngor.upapi import converted_types\n@converted_types\ndef f(a:str, b:int):\n    yield a * b\n    yield len(a) * b\n#end.\n\np(X):- (X)=@f(\"hello\",2).\np(X):- (X)=@f(1,2).  % ignored, because types do not match\n```\n\nWithout `converted_types`, user have to ensure that `f` is a function returning a list,\nand that arguments are of the expected type.\n\nNote that the [incoming clingo version](https://github.com/potassco/clingo/issues/147)\nis leading to that flexibility regarding returned values.\n\n\n### Generalist propagators\nPropagators are presented in [this paper](http://drops.dagstuhl.de/opus/volltexte/2016/6733/). They are basically active\nobservers of the solving process, able for instance to modify truth assignment\nand invalidate models.\n\nAs shown in [clyngor/test/test_propagator_class.py](clyngor/test/test_propagator_class.py),\na high-level propagator class built on top of the official API is available, useful in many typical use-cases.\n\n\n### Python constraint propagators\nAs shown in [examples/pyconstraint.lp](examples/pyconstraint.lp),\nclyngor also exposes some helpers for users wanting to create propagators\nthat implement an ASP constraint, but written in Python:\n\n```python\n#script(python)\nfrom clyngor import Constraint, Variable as V, Main\n\n# Build the constraint on atom b\ndef formula(inputs) -> bool:\n    return inputs['b', (2,)]\n\nconstraint = Constraint(formula, {('b', (V,))})\n\n# regular main function that register given propagator.\nmain = Main(propagators=constraint)\n\n#end.\n\n% ASP part, computing 3 models, b(1), b(2) and b(3).\n1{b(1..3)}1.\n```\n\n## Decoders\nAn idea coming from the [JSON decoders](https://docs.python.org/3/library/json.html#encoders-and-decoders), allowing user to specify how to decode/encode custom objects in JSON.\nWith clyngor, you can do something alike for ASP (though very basic and only from ASP to Python):\n\n```python\nimport clyngor, itertools\n\nASP_LIST_CONCEPTS = \"\"\"  % one model contains all concepts\nconcept(0).\nextent(0,(a;b)). intent(0,(c;d)).\nconcept(1).\nextent(1,(b;e)). intent(1,(f;g)).\nconcept(2).\nextent(2,b). intent(2,(c;d;f;g)).\n\"\"\"\n\nclass Concept:\n    \"Decoder of concepts in ASP output\"\n    def __init__(self, concept:1, extent:all, intent:all):\n        self.id = int(concept[0])\n        self.extent = frozenset(arg for nb, arg in extent if nb == self.id)\n        self.intent = frozenset(arg for nb, arg in intent if nb == self.id)\n    def __str__(self):\n        return f\"<{self.id}: {{{','.join(sorted(self.extent))}}} \u00d7 {{{','.join(sorted(self.intent))}}}>\"\n\nobjects = clyngor.decode(inline=ASP_LIST_CONCEPTS, decoders=[Concept])\nprint('\\t'.join(map(str, objects)))\n```\n\nThis code will print something like:\n\n    <2: {b} \u00d7 {c,d,f,g}>\t<0: {a,b} \u00d7 {c,d}>\t<1: {b,e} \u00d7 {f,g}>\n\nNote the use of annotations to declare that each `concept` must be associated to one instance,\nand that all `extent` and `intent` must be sent to constructor for each object.\n\nSee [tests](clyngor/test/test_decoder.py) for complete API example.\n\nRemaining features for a good decoder support:\n\n- encoding: try to more-or-less automatically build the python to ASP compiler\n- more available annotations, for instance `(3, 5)` (to ask for between 3 and 5 atoms to be associated with the instance), or `any` (exact meaning has to be found)\n- allow to raise an InvalidDecoder exception during decoder instanciation to get the instance discarded\n\n\n## Alternatives\nClyngor is basically the total rewriting of [pyasp](https://github.com/sthiele/pyasp), which is now abandoned.\n\nFor an ORM approach, give a try to [clorm](https://github.com/daveraja/clorm).\n\n\n\n## Installation\n\n    pip install clyngor\n\nYou must have [`clingo`](https://potassco.org/doc/start/) in your path. Depending on your OS, it might be done with a system installation,\nor through [downloading](https://github.com/potassco/clingo/releases) and (compilation and) manual installation.\n\nYou may also want to install the [python clingo module](https://potassco.org/clingo/python-api/current/clingo.html),\nwhich is [an optional dependancy](#official-api-embedding).\n\n\n## Tips\n### Careful parsing\nBy default, clyngor uses a very simple parser (yeah, `str.split`) in order to achieve time efficiency in most time.\nHowever, when asked to compute a particular output format (like `parse_args`) or an explicitely *careful parsing*,\nclyngor will use a much more robust parser (made with an [arpeggio](http://www.igordejanovic.net/Arpeggio/) grammar).\n\n### Import/export\nSee the [`utils` module](clyngor/utils.py) and its [tests](clyngor/test/test_utils.py),\nwhich provides high level routines to save and load answer sets.\n\n\n### Define the path to clingo binary\n\n```python\nimport clyngor\nclyngor.CLINGO_BIN_PATH = 'path/to/clingo'\n```\n\nNote that it will be the very first parameter to [`subprocess.Popen`](https://docs.python.org/3/library/subprocess.html#popen-constructor).\nThe `solve` function also support the `clingo_bin_path` parameter.\n\nThe third solution is to use the decorator `with_clingo_bin`, which modify the global variable\nduring the execution of a specific function:\n\n```python\nimport clyngor\n\n@clyngor.with_clingo_bin('clingo454')\ndef sequence():\n    ...\n    clyngor.solve(...)  # will use clingo454, not clingo, unless clingo_bin_path is given\n    ...\n```\n\n\n### `clyngor.solve` parameters\nThe `solve` functions allow to pass explicitely some parameters to clingo\n(including number of models to yield, time-limit, and constants).\nUsing the `options` parameter is just fine, but with the explicit parameters some verifications\nare made against data (mostly about type).\n\nTherefore, the two followings are equivalent ; but the first is more readable and will crash earlier with a better error message if `n` is not valid:\n\n```python\nsolve('file.lp', nb_model=n)\nsolve('file.lp', options='-n ' + str(n))\n```\n\n\n\n## FAQ\n\n### Dinopython support ?\nNo.\n\n### Contributions ?\nYes.\n\n### Why clyngor ?\nNo, it's pronounced [*clyngor*](https://www.youtube.com/watch?v=RyU99BCNRuU#t=50s).\n\n### Explain me again the thing with the official module\nClyngor was designed to not require the official module, because it required a manual compilation and installation of clingo.\nHowever, because of the obvious interest in features and performances,\nthe official module can be used by clyngor if it is available.\n\n\n## Further ideas\n- [timeout](https://stackoverflow.com/a/12698328/3077939) in addition to time-limit\n- ASP source code debugging generator (started in [clyngor-parser](clyngor-parser))\n\n\n## What is clyngor used for ?\n\n- bioinformatics, to encode biological pathway logic in [pathmodel](https://github.com/pathmodel/pathmodel) and [Menetools](https://github.com/cfrioux/MeneTools), and for [community detection](https://github.com/cfrioux/miscoto).\n- mathematics, to encode some [FCA]()-related task such as [AOC-poset generation](https://github.com/Aluriak/AOC-poset-generation) or [concept search](https://github.com/Aluriak/concept-generation), and [graph compression](https://github.com/Aluriak/PowerGrASP) or [graph manipulation](https://github.com/Aluriak/phasme) in the context of graph theory.\n- visualization, with [Draco](https://github.com/uwdata/draco), a formalization of visualization design knowledge as constraints, and [biseau](https://gitlab.inria.fr/lbourneu/biseau), an ASP-to-graph compiler.\n- web applications, for [a sudoku solver made with ASP](https://github.com/llaisdy/phoenix_live_view_sudoku/).\n\n\n## Changelog\n\n- 0.4.0 (todo)\n    - see [further ideas](#Further-ideas)\n- 0.3.28\n    - [706747045](https://github.com/aluriak/clyngor/commit/706747045cb96abcb9de1e2d729cd43c084cb36f): handle default negation on atoms, by keeping the prefixed dash\n    - [d4830ad52](https://github.com/aluriak/clyngor/commit/d4830ad521a6dcf9024f2c70f2f50e6b19f8c7a2): fix an import error\n- 0.3.25\n    - [80245b2a7](https://github.com/aluriak/clyngor/commit/80245b2a72b8d76639b44a2315622f6743a7bc17): remove f-strings for 3.4 and 3.5 compat.\n    - [6efdb6ab0](https://github.com/aluriak/clyngor/commit/6efdb6ab0f0304b28b35d6ceb16545226b2f9e3e): fix combination of .as_pyasp and .parse_args, where atoms in args were not transformed as pyasp Atom objects.\n    - [fe4107573](https://github.com/aluriak/clyngor/commit/fe410757386e2c3e0881ecc90d7f18ee97672194): correctly parse atoms starting with underscores.\n    - [d6507f17d](https://github.com/aluriak/clyngor/commit/d6507f17dbf27c6c309e3e4009a234b9d63134ba): careful parsing is automatically set when answer set [obviously needs it](clyngor/parsing.py#L266).\n    - [f2c65e8ae](https://github.com/aluriak/clyngor/commit/f2c65e8ae018b9d3589a058a09f9de87e1f3fdf3): fixed bug when using clingo module and `.int_not_parsed`.\n- 0.3.24\n    - [f92248e91](https://github.com/aluriak/clyngor/commit/f92248e91def2c979fd2f8f8af3755b86485becf): `#show 3.` and `#show \"hello !\".` are now handled\n    - [31375774c](https://github.com/aluriak/clyngor/commit/31375774c437403e8a05f5fe8d0346caba0f43e4): when using clingo module, the models contains only the output atoms, not everything (thank you Arnaud)\n    - [cc6021797](https://github.com/aluriak/clyngor/commit/cc60217975de123a5ef0d083fb10971e0d89c03e): support for `.with_answer_number`, giving model, optimization, optimality and answer number\n    - [c0c090c34](https://github.com/aluriak/clyngor/commit/c0c090c34a7028ba34c49815f0197c67c76e7bfb): parsing and string reproduction of nested atoms such as `a((a(\"g(2,3)\",(2)),))` is now correctly handled and tested\n    - [1840c36e3](https://github.com/aluriak/clyngor/commit/1840c36e3f57c926a565fef7352cd1b083194e58): fix the `models.command` output when clingo module is used\n    - [2679d26a9](https://github.com/aluriak/clyngor/commit/2679d26a91720ab507fb7c2ffc41c064e8ca9cb9): optimize memory usage of `opt_models_from_clyngor_answers` by using yield and answer number, but is now a generator and loses (the useless) `repeated_optimal` option\n- 0.3.20\n    - fix [#7](https://github.com/Aluriak/clyngor/issues/7)\n    - improve testing cover, fix warning in recent versions of pytest\n    - more robust options parsing when solving with clingo module\n- 0.3.19\n    - fix [#16](https://github.com/Aluriak/clyngor/issues/16)\n- 0.3.18\n    - TermSet bugfix\n    - `TermSet.add` to add atoms to the TermSet\n    - `TermSet.union` to generate the union of multiple TermSet instances\n- 0.3.17\n    - support for decoupled grounding and solving, as shown in [dedicated example](examples/decoupled-grounding.py)\n    - new parameter `return_raw_output` for clyngor.solve, allowing to get stdout/stderr without treatments\n    - [new example](examples/enum-optN.py) showing how to retrieve all optimal models using clyngor, and\u2026\n    - \u2026 the defined function `opt_models_from_clyngor_answers` is now embedded in clyngor API\n- 0.3.16\n    - support for `.by_arity`, equivalent to `.by_predicate` but with predicate and arity\n    - decorator `with_clingo_bin`, changing clingo binary path for encapsulated function\n    - support for `.with_optimality`, giving optimization and optimality along with the model\n- 0.3.14\n    - decoders support, see [`clyngor.decoder`](clyngor/decoder.py) and [doc](#decoders)\n- 0.3.10\n    - support for `.discard_quotes` option (thanks to ArnaudBelcour)\n    - bugfix: `.atom_as_string` and `.first_arg_only` collision\n    - bugfix: more robust tempfile deletion and closing management\n    - [demonstration](examples/pyconstraint-is-not-working.lp) of the non-working Constraint type implementation\n- before\n    - predicat to know if python/lua are available with used clingo binary\n    - easy interface for most use cases using type hint for embedded python\n    - easy python constraints in ASP with Constraint type\n    - add support for propagators\n    - add support for clingo official python module\n\n\n## from pyasp to clyngor\nIf you have a project that makes use of pyasp, but need clingo instead of gringo+clasp, one way to go is to use clyngor instead.\n\nHere was my old code:\n\n```python\nfrom pyasp import asp\n\ndef solving(comp, graph):\n    programs = [comp, graph]\n    clasp_options = ['--opt-mode=optN', '--parallel-mode=4', '--project']\n    solver = asp.Gringo4Clasp(clasp_options=clasp_options)\n    print(\"solver run as: `clingo {} {}`\".format(' '.join(programs), clasp_options))\n    at_least_one_solution = False\n    for answerset in solver.run(programs, collapseAtoms=False):\n        yield answerset\n\ndef find_direct_inclusions(model) -> dict:\n    programs = [ASP_SRC_INCLUSION]\n    solver = asp.Gringo4Clasp()\n    add_atoms = ''.join(str(atom) + '.' for atom in model)\n    answers = tuple(solver.run(programs, collapseAtoms=False,\n                               additionalProgramText=add_atoms))\n    return answers\n```\n\nAnd here is the version using clyngor, that pass the exact same unit tests:\n\n```python\nimport clyngor\n\ndef solving(comp, graph):\n    programs = [comp, graph]\n    clasp_options = '--opt-mode=optN', '--parallel-mode=4', '--project'\n    answers = clyngor.solve(programs, options=clasp_options)\n    print(\"solver run as: `{}`\".format(answers.command))\n    for answerset in answers.as_pyasp.parse_args.int_not_parsed:\n        yield answerset\n\ndef find_direct_inclusions(model) -> dict:\n    programs = [ASP_SRC_INCLUSION]\n    add_atoms = ''.join(str(atom) + '.' for atom in model)\n    answers = tuple(clyngor.solve(programs, inline=add_atoms).as_pyasp.parse_args)\n    return answers\n```\n\n\n## Thanks\nTo [Arnaud Belcour](https://github.com/ArnaudBelcour) for his works and frequent feedbacks.\n\nTo [Domoritz](https://github.com/domoritz) for his questions and feedbacks.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/aluriak/clyngor", "keywords": "Answer Set Programming,wrapper,clingo", "license": "GPLv3", "maintainer": "", "maintainer_email": "", "name": "clyngor", "package_url": "https://pypi.org/project/clyngor/", "platform": "", "project_url": "https://pypi.org/project/clyngor/", "project_urls": {"Homepage": "https://github.com/aluriak/clyngor"}, "release_url": "https://pypi.org/project/clyngor/0.3.31/", "requires_dist": ["Arpeggio (>=1.6.1)", "pyPEG2 (>=2.15.2)", "pytest (>=3.2.1)"], "requires_python": "", "summary": "Python wrapper around Clingo/Answer Set Programming", "version": "0.3.31", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p align=\"center\">\n  <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/df708e9db3731b36b8dafcf431aed02a0bcb201e/636c796e676f722e706e67\"><br>\n</p>\n<p>Handy python wrapper around <a href=\"https://potassco.org/\" rel=\"nofollow\">Potassco's Clingo</a> <a href=\"https://en.wikipedia.org/wiki/Answer%20set%20programming\" rel=\"nofollow\">ASP solver</a>.</p>\n<h2>Example</h2>\n<p>Clyngor offers multiple interfaces. The followings are all equivalent.\n(they search for <a href=\"https://en.wikipedia.org/wiki/Formal_concept_analysis\" rel=\"nofollow\">formal concepts</a>)</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">clyngor</span> <span class=\"kn\">import</span> <span class=\"n\">ASP</span><span class=\"p\">,</span> <span class=\"n\">solve</span>\n\n<span class=\"n\">answers</span> <span class=\"o\">=</span> <span class=\"n\">ASP</span><span class=\"p\">(</span><span class=\"s2\">\"\"\"</span>\n<span class=\"s2\">rel(a,(c;d)). rel(b,(d;e)).</span>\n<span class=\"s2\">obj(X):- rel(X,_) ; rel(X,Y): att(Y).</span>\n<span class=\"s2\">att(Y):- rel(_,Y) ; rel(X,Y): obj(X).</span>\n<span class=\"s2\">:- not obj(X):obj(X).</span>\n<span class=\"s2\">:- not att(Y):att(Y).</span>\n<span class=\"s2\">\"\"\"</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">answer</span> <span class=\"ow\">in</span> <span class=\"n\">answers</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">answer</span><span class=\"p\">)</span>\n</pre>\n<p>The same, but with the lower level function expecting files:</p>\n<pre><span class=\"n\">answers</span> <span class=\"o\">=</span> <span class=\"n\">solve</span><span class=\"p\">(</span><span class=\"n\">inline</span><span class=\"o\">=</span><span class=\"s2\">\"\"\"</span>\n<span class=\"s2\">rel(a,(c;d)). rel(b,(d;e)).</span>\n<span class=\"s2\">obj(X):- rel(X,_) ; rel(X,Y): att(Y).</span>\n<span class=\"s2\">att(Y):- rel(_,Y) ; rel(X,Y): obj(X).</span>\n<span class=\"s2\">:- not obj(X):obj(X).</span>\n<span class=\"s2\">:- not att(Y):att(Y).</span>\n<span class=\"s2\">\"\"\"</span><span class=\"p\">)</span>\n</pre>\n<p>More traditional interface, using file containing the ASP source code:</p>\n<pre><span class=\"n\">answers</span> <span class=\"o\">=</span> <span class=\"n\">solve</span><span class=\"p\">(</span><span class=\"s1\">'concepts.lp'</span><span class=\"p\">):</span>  <span class=\"c1\"># also accepts an iterable of file</span>\n</pre>\n<p>More examples are available in <a href=\"clyngor/test/\" rel=\"nofollow\">the unit tests</a>.</p>\n<h2>Chaining</h2>\n<p>Once you get your answers, clyngor allows you to specify\nthe answer sets format using builtin methods:</p>\n<pre><span class=\"k\">for</span> <span class=\"n\">answer</span> <span class=\"ow\">in</span> <span class=\"n\">answers</span><span class=\"o\">.</span><span class=\"n\">by_predicate</span><span class=\"o\">.</span><span class=\"n\">first_arg_only</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'{'</span> <span class=\"o\">+</span> <span class=\"s1\">','</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">answer</span><span class=\"p\">[</span><span class=\"s1\">'obj'</span><span class=\"p\">])</span> <span class=\"o\">+</span> <span class=\"s1\">'} \u00d7 {'</span> <span class=\"o\">+</span> <span class=\"s1\">','</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">answer</span><span class=\"p\">[</span><span class=\"s1\">'att'</span><span class=\"p\">])</span> <span class=\"o\">+</span> <span class=\"s1\">'}'</span><span class=\"p\">)</span>\n</pre>\n<p>And if you need a <a href=\"https://github.com/sthiele/pyasp\" rel=\"nofollow\"><em>pyasp-like</em></a> interface:</p>\n<pre><span class=\"k\">for</span> <span class=\"n\">answer</span> <span class=\"ow\">in</span> <span class=\"n\">answers</span><span class=\"o\">.</span><span class=\"n\">as_pyasp</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'{'</span> <span class=\"o\">+</span> <span class=\"s1\">','</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">()[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">a</span> <span class=\"ow\">in</span> <span class=\"n\">answer</span> <span class=\"k\">if</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">predicate</span> <span class=\"o\">==</span> <span class=\"s1\">'obj'</span><span class=\"p\">)</span>\n          <span class=\"o\">+</span> <span class=\"s1\">'} \u00d7 {'</span> <span class=\"o\">+</span> <span class=\"s1\">','</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">()[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">a</span> <span class=\"ow\">in</span> <span class=\"n\">answer</span> <span class=\"k\">if</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">predicate</span> <span class=\"o\">==</span> <span class=\"s1\">'att'</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s1\">'}'</span><span class=\"p\">)</span>\n</pre>\n<p>Currently, there is only one way to see all chaining operator available:\n<a href=\"clyngor/answers.py\" rel=\"nofollow\">the source code of the Answers object</a>.\n(or <code>help(clyngor.Answers)</code>)</p>\n<h2>Official Python API</h2>\n<p>If the used version of clingo is compiled with python, you can put python code into your ASP code as usual.\nBut if you also have the <a href=\"https://potassco.org/clingo/python-api/current/clingo.html\" rel=\"nofollow\">clingo package</a>\ninstalled and importable, clyngor can use it for various tasks.</p>\n<p>Using the official API leads to the following changes :</p>\n<ul>\n<li>both robust and quick parsing, instead of the simple vs slow method</li>\n<li>some options are not supported : constants, <a href=\"clyngor/test/test_time_limit.py\" rel=\"nofollow\">time-limit</a>, parsing error handling, <a href=\"clyngor/test/test_grounding.py\" rel=\"nofollow\">decoupled grounding/solving</a></li>\n</ul>\n<p>You can activate the use of the clingo module by calling once <code>clyngor.activate_clingo_module()</code>\nor calling <code>clyngor.solve</code> with argument <code>use_clingo_module</code> set to <code>True</code>.</p>\n<h2>Python embedding</h2>\n<p>For users putting some python in their ASP, clyngor may help.\nThe only condition is to have clingo compiled with python support,\nand having clyngor installed for the python used by clingo.</p>\n<h3>Easy ASP functors</h3>\n<p>Clyngor provides <code>converted_types</code> function,\nallowing one to avoid boilerplate code based on type annotation when\ncalling python from inside ASP code.</p>\n<p>Example (see <a href=\"clyngor/test/test_upapi.py\" rel=\"nofollow\">tests</a> for more):</p>\n<pre><span class=\"c1\">#script(python)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">clyngor.upapi</span> <span class=\"kn\">import</span> <span class=\"n\">converted_types</span>\n<span class=\"nd\">@converted_types</span>\n<span class=\"k\">def</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">:</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">:</span><span class=\"nb\">int</span><span class=\"p\">):</span>\n    <span class=\"k\">yield</span> <span class=\"n\">a</span> <span class=\"o\">*</span> <span class=\"n\">b</span>\n    <span class=\"k\">yield</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">b</span>\n<span class=\"c1\">#end.</span>\n\n<span class=\"n\">p</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">):</span><span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">)</span><span class=\"o\">=</span><span class=\"nd\">@f</span><span class=\"p\">(</span><span class=\"s2\">\"hello\"</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span>\n<span class=\"n\">p</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">):</span><span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">)</span><span class=\"o\">=</span><span class=\"nd\">@f</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span>  <span class=\"o\">%</span> <span class=\"n\">ignored</span><span class=\"p\">,</span> <span class=\"n\">because</span> <span class=\"n\">types</span> <span class=\"n\">do</span> <span class=\"ow\">not</span> <span class=\"n\">match</span>\n</pre>\n<p>Without <code>converted_types</code>, user have to ensure that <code>f</code> is a function returning a list,\nand that arguments are of the expected type.</p>\n<p>Note that the <a href=\"https://github.com/potassco/clingo/issues/147\" rel=\"nofollow\">incoming clingo version</a>\nis leading to that flexibility regarding returned values.</p>\n<h3>Generalist propagators</h3>\n<p>Propagators are presented in <a href=\"http://drops.dagstuhl.de/opus/volltexte/2016/6733/\" rel=\"nofollow\">this paper</a>. They are basically active\nobservers of the solving process, able for instance to modify truth assignment\nand invalidate models.</p>\n<p>As shown in <a href=\"clyngor/test/test_propagator_class.py\" rel=\"nofollow\">clyngor/test/test_propagator_class.py</a>,\na high-level propagator class built on top of the official API is available, useful in many typical use-cases.</p>\n<h3>Python constraint propagators</h3>\n<p>As shown in <a href=\"examples/pyconstraint.lp\" rel=\"nofollow\">examples/pyconstraint.lp</a>,\nclyngor also exposes some helpers for users wanting to create propagators\nthat implement an ASP constraint, but written in Python:</p>\n<pre><span class=\"c1\">#script(python)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">clyngor</span> <span class=\"kn\">import</span> <span class=\"n\">Constraint</span><span class=\"p\">,</span> <span class=\"n\">Variable</span> <span class=\"k\">as</span> <span class=\"n\">V</span><span class=\"p\">,</span> <span class=\"n\">Main</span>\n\n<span class=\"c1\"># Build the constraint on atom b</span>\n<span class=\"k\">def</span> <span class=\"nf\">formula</span><span class=\"p\">(</span><span class=\"n\">inputs</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"n\">inputs</span><span class=\"p\">[</span><span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,)]</span>\n\n<span class=\"n\">constraint</span> <span class=\"o\">=</span> <span class=\"n\">Constraint</span><span class=\"p\">(</span><span class=\"n\">formula</span><span class=\"p\">,</span> <span class=\"p\">{(</span><span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">V</span><span class=\"p\">,))})</span>\n\n<span class=\"c1\"># regular main function that register given propagator.</span>\n<span class=\"n\">main</span> <span class=\"o\">=</span> <span class=\"n\">Main</span><span class=\"p\">(</span><span class=\"n\">propagators</span><span class=\"o\">=</span><span class=\"n\">constraint</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#end.</span>\n\n<span class=\"o\">%</span> <span class=\"n\">ASP</span> <span class=\"n\">part</span><span class=\"p\">,</span> <span class=\"n\">computing</span> <span class=\"mi\">3</span> <span class=\"n\">models</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">b</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">b</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">.</span>\n<span class=\"mi\">1</span><span class=\"p\">{</span><span class=\"n\">b</span><span class=\"p\">(</span><span class=\"mf\">1.</span><span class=\"o\">.</span><span class=\"mi\">3</span><span class=\"p\">)}</span><span class=\"mf\">1.</span>\n</pre>\n<h2>Decoders</h2>\n<p>An idea coming from the <a href=\"https://docs.python.org/3/library/json.html#encoders-and-decoders\" rel=\"nofollow\">JSON decoders</a>, allowing user to specify how to decode/encode custom objects in JSON.\nWith clyngor, you can do something alike for ASP (though very basic and only from ASP to Python):</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">clyngor</span><span class=\"o\">,</span> <span class=\"nn\">itertools</span>\n\n<span class=\"n\">ASP_LIST_CONCEPTS</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"\"  </span><span class=\"si\">% o</span><span class=\"s2\">ne model contains all concepts</span>\n<span class=\"s2\">concept(0).</span>\n<span class=\"s2\">extent(0,(a;b)). intent(0,(c;d)).</span>\n<span class=\"s2\">concept(1).</span>\n<span class=\"s2\">extent(1,(b;e)). intent(1,(f;g)).</span>\n<span class=\"s2\">concept(2).</span>\n<span class=\"s2\">extent(2,b). intent(2,(c;d;f;g)).</span>\n<span class=\"s2\">\"\"\"</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Concept</span><span class=\"p\">:</span>\n    <span class=\"s2\">\"Decoder of concepts in ASP output\"</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">concept</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">extent</span><span class=\"p\">:</span><span class=\"nb\">all</span><span class=\"p\">,</span> <span class=\"n\">intent</span><span class=\"p\">:</span><span class=\"nb\">all</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">concept</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">extent</span> <span class=\"o\">=</span> <span class=\"nb\">frozenset</span><span class=\"p\">(</span><span class=\"n\">arg</span> <span class=\"k\">for</span> <span class=\"n\">nb</span><span class=\"p\">,</span> <span class=\"n\">arg</span> <span class=\"ow\">in</span> <span class=\"n\">extent</span> <span class=\"k\">if</span> <span class=\"n\">nb</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">intent</span> <span class=\"o\">=</span> <span class=\"nb\">frozenset</span><span class=\"p\">(</span><span class=\"n\">arg</span> <span class=\"k\">for</span> <span class=\"n\">nb</span><span class=\"p\">,</span> <span class=\"n\">arg</span> <span class=\"ow\">in</span> <span class=\"n\">intent</span> <span class=\"k\">if</span> <span class=\"n\">nb</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s2\">\"&lt;</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"si\">}</span><span class=\"s2\">: </span><span class=\"se\">{{</span><span class=\"si\">{</span><span class=\"s1\">','</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">extent</span><span class=\"p\">))</span><span class=\"si\">}</span><span class=\"se\">}}</span><span class=\"s2\"> \u00d7 </span><span class=\"se\">{{</span><span class=\"si\">{</span><span class=\"s1\">','</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">intent</span><span class=\"p\">))</span><span class=\"si\">}</span><span class=\"se\">}}</span><span class=\"s2\">&gt;\"</span>\n\n<span class=\"n\">objects</span> <span class=\"o\">=</span> <span class=\"n\">clyngor</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"n\">inline</span><span class=\"o\">=</span><span class=\"n\">ASP_LIST_CONCEPTS</span><span class=\"p\">,</span> <span class=\"n\">decoders</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">Concept</span><span class=\"p\">])</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"se\">\\t</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">objects</span><span class=\"p\">)))</span>\n</pre>\n<p>This code will print something like:</p>\n<pre><code>&lt;2: {b} \u00d7 {c,d,f,g}&gt;\t&lt;0: {a,b} \u00d7 {c,d}&gt;\t&lt;1: {b,e} \u00d7 {f,g}&gt;\n</code></pre>\n<p>Note the use of annotations to declare that each <code>concept</code> must be associated to one instance,\nand that all <code>extent</code> and <code>intent</code> must be sent to constructor for each object.</p>\n<p>See <a href=\"clyngor/test/test_decoder.py\" rel=\"nofollow\">tests</a> for complete API example.</p>\n<p>Remaining features for a good decoder support:</p>\n<ul>\n<li>encoding: try to more-or-less automatically build the python to ASP compiler</li>\n<li>more available annotations, for instance <code>(3, 5)</code> (to ask for between 3 and 5 atoms to be associated with the instance), or <code>any</code> (exact meaning has to be found)</li>\n<li>allow to raise an InvalidDecoder exception during decoder instanciation to get the instance discarded</li>\n</ul>\n<h2>Alternatives</h2>\n<p>Clyngor is basically the total rewriting of <a href=\"https://github.com/sthiele/pyasp\" rel=\"nofollow\">pyasp</a>, which is now abandoned.</p>\n<p>For an ORM approach, give a try to <a href=\"https://github.com/daveraja/clorm\" rel=\"nofollow\">clorm</a>.</p>\n<h2>Installation</h2>\n<pre><code>pip install clyngor\n</code></pre>\n<p>You must have <a href=\"https://potassco.org/doc/start/\" rel=\"nofollow\"><code>clingo</code></a> in your path. Depending on your OS, it might be done with a system installation,\nor through <a href=\"https://github.com/potassco/clingo/releases\" rel=\"nofollow\">downloading</a> and (compilation and) manual installation.</p>\n<p>You may also want to install the <a href=\"https://potassco.org/clingo/python-api/current/clingo.html\" rel=\"nofollow\">python clingo module</a>,\nwhich is <a href=\"#official-api-embedding\" rel=\"nofollow\">an optional dependancy</a>.</p>\n<h2>Tips</h2>\n<h3>Careful parsing</h3>\n<p>By default, clyngor uses a very simple parser (yeah, <code>str.split</code>) in order to achieve time efficiency in most time.\nHowever, when asked to compute a particular output format (like <code>parse_args</code>) or an explicitely <em>careful parsing</em>,\nclyngor will use a much more robust parser (made with an <a href=\"http://www.igordejanovic.net/Arpeggio/\" rel=\"nofollow\">arpeggio</a> grammar).</p>\n<h3>Import/export</h3>\n<p>See the <a href=\"clyngor/utils.py\" rel=\"nofollow\"><code>utils</code> module</a> and its <a href=\"clyngor/test/test_utils.py\" rel=\"nofollow\">tests</a>,\nwhich provides high level routines to save and load answer sets.</p>\n<h3>Define the path to clingo binary</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">clyngor</span>\n<span class=\"n\">clyngor</span><span class=\"o\">.</span><span class=\"n\">CLINGO_BIN_PATH</span> <span class=\"o\">=</span> <span class=\"s1\">'path/to/clingo'</span>\n</pre>\n<p>Note that it will be the very first parameter to <a href=\"https://docs.python.org/3/library/subprocess.html#popen-constructor\" rel=\"nofollow\"><code>subprocess.Popen</code></a>.\nThe <code>solve</code> function also support the <code>clingo_bin_path</code> parameter.</p>\n<p>The third solution is to use the decorator <code>with_clingo_bin</code>, which modify the global variable\nduring the execution of a specific function:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">clyngor</span>\n\n<span class=\"nd\">@clyngor</span><span class=\"o\">.</span><span class=\"n\">with_clingo_bin</span><span class=\"p\">(</span><span class=\"s1\">'clingo454'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">sequence</span><span class=\"p\">():</span>\n    <span class=\"o\">...</span>\n    <span class=\"n\">clyngor</span><span class=\"o\">.</span><span class=\"n\">solve</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>  <span class=\"c1\"># will use clingo454, not clingo, unless clingo_bin_path is given</span>\n    <span class=\"o\">...</span>\n</pre>\n<h3><code>clyngor.solve</code> parameters</h3>\n<p>The <code>solve</code> functions allow to pass explicitely some parameters to clingo\n(including number of models to yield, time-limit, and constants).\nUsing the <code>options</code> parameter is just fine, but with the explicit parameters some verifications\nare made against data (mostly about type).</p>\n<p>Therefore, the two followings are equivalent ; but the first is more readable and will crash earlier with a better error message if <code>n</code> is not valid:</p>\n<pre><span class=\"n\">solve</span><span class=\"p\">(</span><span class=\"s1\">'file.lp'</span><span class=\"p\">,</span> <span class=\"n\">nb_model</span><span class=\"o\">=</span><span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"n\">solve</span><span class=\"p\">(</span><span class=\"s1\">'file.lp'</span><span class=\"p\">,</span> <span class=\"n\">options</span><span class=\"o\">=</span><span class=\"s1\">'-n '</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">))</span>\n</pre>\n<h2>FAQ</h2>\n<h3>Dinopython support ?</h3>\n<p>No.</p>\n<h3>Contributions ?</h3>\n<p>Yes.</p>\n<h3>Why clyngor ?</h3>\n<p>No, it's pronounced <a href=\"https://www.youtube.com/watch?v=RyU99BCNRuU#t=50s\" rel=\"nofollow\"><em>clyngor</em></a>.</p>\n<h3>Explain me again the thing with the official module</h3>\n<p>Clyngor was designed to not require the official module, because it required a manual compilation and installation of clingo.\nHowever, because of the obvious interest in features and performances,\nthe official module can be used by clyngor if it is available.</p>\n<h2>Further ideas</h2>\n<ul>\n<li><a href=\"https://stackoverflow.com/a/12698328/3077939\" rel=\"nofollow\">timeout</a> in addition to time-limit</li>\n<li>ASP source code debugging generator (started in <a href=\"clyngor-parser\" rel=\"nofollow\">clyngor-parser</a>)</li>\n</ul>\n<h2>What is clyngor used for ?</h2>\n<ul>\n<li>bioinformatics, to encode biological pathway logic in <a href=\"https://github.com/pathmodel/pathmodel\" rel=\"nofollow\">pathmodel</a> and <a href=\"https://github.com/cfrioux/MeneTools\" rel=\"nofollow\">Menetools</a>, and for <a href=\"https://github.com/cfrioux/miscoto\" rel=\"nofollow\">community detection</a>.</li>\n<li>mathematics, to encode some <a href=\"\" rel=\"nofollow\">FCA</a>-related task such as <a href=\"https://github.com/Aluriak/AOC-poset-generation\" rel=\"nofollow\">AOC-poset generation</a> or <a href=\"https://github.com/Aluriak/concept-generation\" rel=\"nofollow\">concept search</a>, and <a href=\"https://github.com/Aluriak/PowerGrASP\" rel=\"nofollow\">graph compression</a> or <a href=\"https://github.com/Aluriak/phasme\" rel=\"nofollow\">graph manipulation</a> in the context of graph theory.</li>\n<li>visualization, with <a href=\"https://github.com/uwdata/draco\" rel=\"nofollow\">Draco</a>, a formalization of visualization design knowledge as constraints, and <a href=\"https://gitlab.inria.fr/lbourneu/biseau\" rel=\"nofollow\">biseau</a>, an ASP-to-graph compiler.</li>\n<li>web applications, for <a href=\"https://github.com/llaisdy/phoenix_live_view_sudoku/\" rel=\"nofollow\">a sudoku solver made with ASP</a>.</li>\n</ul>\n<h2>Changelog</h2>\n<ul>\n<li>0.4.0 (todo)\n<ul>\n<li>see <a href=\"#Further-ideas\" rel=\"nofollow\">further ideas</a></li>\n</ul>\n</li>\n<li>0.3.28\n<ul>\n<li><a href=\"https://github.com/aluriak/clyngor/commit/706747045cb96abcb9de1e2d729cd43c084cb36f\" rel=\"nofollow\">706747045</a>: handle default negation on atoms, by keeping the prefixed dash</li>\n<li><a href=\"https://github.com/aluriak/clyngor/commit/d4830ad521a6dcf9024f2c70f2f50e6b19f8c7a2\" rel=\"nofollow\">d4830ad52</a>: fix an import error</li>\n</ul>\n</li>\n<li>0.3.25\n<ul>\n<li><a href=\"https://github.com/aluriak/clyngor/commit/80245b2a72b8d76639b44a2315622f6743a7bc17\" rel=\"nofollow\">80245b2a7</a>: remove f-strings for 3.4 and 3.5 compat.</li>\n<li><a href=\"https://github.com/aluriak/clyngor/commit/6efdb6ab0f0304b28b35d6ceb16545226b2f9e3e\" rel=\"nofollow\">6efdb6ab0</a>: fix combination of .as_pyasp and .parse_args, where atoms in args were not transformed as pyasp Atom objects.</li>\n<li><a href=\"https://github.com/aluriak/clyngor/commit/fe410757386e2c3e0881ecc90d7f18ee97672194\" rel=\"nofollow\">fe4107573</a>: correctly parse atoms starting with underscores.</li>\n<li><a href=\"https://github.com/aluriak/clyngor/commit/d6507f17dbf27c6c309e3e4009a234b9d63134ba\" rel=\"nofollow\">d6507f17d</a>: careful parsing is automatically set when answer set <a href=\"clyngor/parsing.py#L266\" rel=\"nofollow\">obviously needs it</a>.</li>\n<li><a href=\"https://github.com/aluriak/clyngor/commit/f2c65e8ae018b9d3589a058a09f9de87e1f3fdf3\" rel=\"nofollow\">f2c65e8ae</a>: fixed bug when using clingo module and <code>.int_not_parsed</code>.</li>\n</ul>\n</li>\n<li>0.3.24\n<ul>\n<li><a href=\"https://github.com/aluriak/clyngor/commit/f92248e91def2c979fd2f8f8af3755b86485becf\" rel=\"nofollow\">f92248e91</a>: <code>#show 3.</code> and <code>#show \"hello !\".</code> are now handled</li>\n<li><a href=\"https://github.com/aluriak/clyngor/commit/31375774c437403e8a05f5fe8d0346caba0f43e4\" rel=\"nofollow\">31375774c</a>: when using clingo module, the models contains only the output atoms, not everything (thank you Arnaud)</li>\n<li><a href=\"https://github.com/aluriak/clyngor/commit/cc60217975de123a5ef0d083fb10971e0d89c03e\" rel=\"nofollow\">cc6021797</a>: support for <code>.with_answer_number</code>, giving model, optimization, optimality and answer number</li>\n<li><a href=\"https://github.com/aluriak/clyngor/commit/c0c090c34a7028ba34c49815f0197c67c76e7bfb\" rel=\"nofollow\">c0c090c34</a>: parsing and string reproduction of nested atoms such as <code>a((a(\"g(2,3)\",(2)),))</code> is now correctly handled and tested</li>\n<li><a href=\"https://github.com/aluriak/clyngor/commit/1840c36e3f57c926a565fef7352cd1b083194e58\" rel=\"nofollow\">1840c36e3</a>: fix the <code>models.command</code> output when clingo module is used</li>\n<li><a href=\"https://github.com/aluriak/clyngor/commit/2679d26a91720ab507fb7c2ffc41c064e8ca9cb9\" rel=\"nofollow\">2679d26a9</a>: optimize memory usage of <code>opt_models_from_clyngor_answers</code> by using yield and answer number, but is now a generator and loses (the useless) <code>repeated_optimal</code> option</li>\n</ul>\n</li>\n<li>0.3.20\n<ul>\n<li>fix <a href=\"https://github.com/Aluriak/clyngor/issues/7\" rel=\"nofollow\">#7</a></li>\n<li>improve testing cover, fix warning in recent versions of pytest</li>\n<li>more robust options parsing when solving with clingo module</li>\n</ul>\n</li>\n<li>0.3.19\n<ul>\n<li>fix <a href=\"https://github.com/Aluriak/clyngor/issues/16\" rel=\"nofollow\">#16</a></li>\n</ul>\n</li>\n<li>0.3.18\n<ul>\n<li>TermSet bugfix</li>\n<li><code>TermSet.add</code> to add atoms to the TermSet</li>\n<li><code>TermSet.union</code> to generate the union of multiple TermSet instances</li>\n</ul>\n</li>\n<li>0.3.17\n<ul>\n<li>support for decoupled grounding and solving, as shown in <a href=\"examples/decoupled-grounding.py\" rel=\"nofollow\">dedicated example</a></li>\n<li>new parameter <code>return_raw_output</code> for clyngor.solve, allowing to get stdout/stderr without treatments</li>\n<li><a href=\"examples/enum-optN.py\" rel=\"nofollow\">new example</a> showing how to retrieve all optimal models using clyngor, and\u2026</li>\n<li>\u2026 the defined function <code>opt_models_from_clyngor_answers</code> is now embedded in clyngor API</li>\n</ul>\n</li>\n<li>0.3.16\n<ul>\n<li>support for <code>.by_arity</code>, equivalent to <code>.by_predicate</code> but with predicate and arity</li>\n<li>decorator <code>with_clingo_bin</code>, changing clingo binary path for encapsulated function</li>\n<li>support for <code>.with_optimality</code>, giving optimization and optimality along with the model</li>\n</ul>\n</li>\n<li>0.3.14\n<ul>\n<li>decoders support, see <a href=\"clyngor/decoder.py\" rel=\"nofollow\"><code>clyngor.decoder</code></a> and <a href=\"#decoders\" rel=\"nofollow\">doc</a></li>\n</ul>\n</li>\n<li>0.3.10\n<ul>\n<li>support for <code>.discard_quotes</code> option (thanks to ArnaudBelcour)</li>\n<li>bugfix: <code>.atom_as_string</code> and <code>.first_arg_only</code> collision</li>\n<li>bugfix: more robust tempfile deletion and closing management</li>\n<li><a href=\"examples/pyconstraint-is-not-working.lp\" rel=\"nofollow\">demonstration</a> of the non-working Constraint type implementation</li>\n</ul>\n</li>\n<li>before\n<ul>\n<li>predicat to know if python/lua are available with used clingo binary</li>\n<li>easy interface for most use cases using type hint for embedded python</li>\n<li>easy python constraints in ASP with Constraint type</li>\n<li>add support for propagators</li>\n<li>add support for clingo official python module</li>\n</ul>\n</li>\n</ul>\n<h2>from pyasp to clyngor</h2>\n<p>If you have a project that makes use of pyasp, but need clingo instead of gringo+clasp, one way to go is to use clyngor instead.</p>\n<p>Here was my old code:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyasp</span> <span class=\"kn\">import</span> <span class=\"n\">asp</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">solving</span><span class=\"p\">(</span><span class=\"n\">comp</span><span class=\"p\">,</span> <span class=\"n\">graph</span><span class=\"p\">):</span>\n    <span class=\"n\">programs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">comp</span><span class=\"p\">,</span> <span class=\"n\">graph</span><span class=\"p\">]</span>\n    <span class=\"n\">clasp_options</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'--opt-mode=optN'</span><span class=\"p\">,</span> <span class=\"s1\">'--parallel-mode=4'</span><span class=\"p\">,</span> <span class=\"s1\">'--project'</span><span class=\"p\">]</span>\n    <span class=\"n\">solver</span> <span class=\"o\">=</span> <span class=\"n\">asp</span><span class=\"o\">.</span><span class=\"n\">Gringo4Clasp</span><span class=\"p\">(</span><span class=\"n\">clasp_options</span><span class=\"o\">=</span><span class=\"n\">clasp_options</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"solver run as: `clingo </span><span class=\"si\">{}</span><span class=\"s2\"> </span><span class=\"si\">{}</span><span class=\"s2\">`\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"s1\">' '</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">programs</span><span class=\"p\">),</span> <span class=\"n\">clasp_options</span><span class=\"p\">))</span>\n    <span class=\"n\">at_least_one_solution</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n    <span class=\"k\">for</span> <span class=\"n\">answerset</span> <span class=\"ow\">in</span> <span class=\"n\">solver</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">programs</span><span class=\"p\">,</span> <span class=\"n\">collapseAtoms</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"k\">yield</span> <span class=\"n\">answerset</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">find_direct_inclusions</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">dict</span><span class=\"p\">:</span>\n    <span class=\"n\">programs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">ASP_SRC_INCLUSION</span><span class=\"p\">]</span>\n    <span class=\"n\">solver</span> <span class=\"o\">=</span> <span class=\"n\">asp</span><span class=\"o\">.</span><span class=\"n\">Gringo4Clasp</span><span class=\"p\">()</span>\n    <span class=\"n\">add_atoms</span> <span class=\"o\">=</span> <span class=\"s1\">''</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">atom</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s1\">'.'</span> <span class=\"k\">for</span> <span class=\"n\">atom</span> <span class=\"ow\">in</span> <span class=\"n\">model</span><span class=\"p\">)</span>\n    <span class=\"n\">answers</span> <span class=\"o\">=</span> <span class=\"nb\">tuple</span><span class=\"p\">(</span><span class=\"n\">solver</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">programs</span><span class=\"p\">,</span> <span class=\"n\">collapseAtoms</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                               <span class=\"n\">additionalProgramText</span><span class=\"o\">=</span><span class=\"n\">add_atoms</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">answers</span>\n</pre>\n<p>And here is the version using clyngor, that pass the exact same unit tests:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">clyngor</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">solving</span><span class=\"p\">(</span><span class=\"n\">comp</span><span class=\"p\">,</span> <span class=\"n\">graph</span><span class=\"p\">):</span>\n    <span class=\"n\">programs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">comp</span><span class=\"p\">,</span> <span class=\"n\">graph</span><span class=\"p\">]</span>\n    <span class=\"n\">clasp_options</span> <span class=\"o\">=</span> <span class=\"s1\">'--opt-mode=optN'</span><span class=\"p\">,</span> <span class=\"s1\">'--parallel-mode=4'</span><span class=\"p\">,</span> <span class=\"s1\">'--project'</span>\n    <span class=\"n\">answers</span> <span class=\"o\">=</span> <span class=\"n\">clyngor</span><span class=\"o\">.</span><span class=\"n\">solve</span><span class=\"p\">(</span><span class=\"n\">programs</span><span class=\"p\">,</span> <span class=\"n\">options</span><span class=\"o\">=</span><span class=\"n\">clasp_options</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"solver run as: `</span><span class=\"si\">{}</span><span class=\"s2\">`\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">answers</span><span class=\"o\">.</span><span class=\"n\">command</span><span class=\"p\">))</span>\n    <span class=\"k\">for</span> <span class=\"n\">answerset</span> <span class=\"ow\">in</span> <span class=\"n\">answers</span><span class=\"o\">.</span><span class=\"n\">as_pyasp</span><span class=\"o\">.</span><span class=\"n\">parse_args</span><span class=\"o\">.</span><span class=\"n\">int_not_parsed</span><span class=\"p\">:</span>\n        <span class=\"k\">yield</span> <span class=\"n\">answerset</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">find_direct_inclusions</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">dict</span><span class=\"p\">:</span>\n    <span class=\"n\">programs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">ASP_SRC_INCLUSION</span><span class=\"p\">]</span>\n    <span class=\"n\">add_atoms</span> <span class=\"o\">=</span> <span class=\"s1\">''</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">atom</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s1\">'.'</span> <span class=\"k\">for</span> <span class=\"n\">atom</span> <span class=\"ow\">in</span> <span class=\"n\">model</span><span class=\"p\">)</span>\n    <span class=\"n\">answers</span> <span class=\"o\">=</span> <span class=\"nb\">tuple</span><span class=\"p\">(</span><span class=\"n\">clyngor</span><span class=\"o\">.</span><span class=\"n\">solve</span><span class=\"p\">(</span><span class=\"n\">programs</span><span class=\"p\">,</span> <span class=\"n\">inline</span><span class=\"o\">=</span><span class=\"n\">add_atoms</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">as_pyasp</span><span class=\"o\">.</span><span class=\"n\">parse_args</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">answers</span>\n</pre>\n<h2>Thanks</h2>\n<p>To <a href=\"https://github.com/ArnaudBelcour\" rel=\"nofollow\">Arnaud Belcour</a> for his works and frequent feedbacks.</p>\n<p>To <a href=\"https://github.com/domoritz\" rel=\"nofollow\">Domoritz</a> for his questions and feedbacks.</p>\n\n          </div>"}, "last_serial": 7033860, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "118060b2052a524b3add70432a054317", "sha256": "981eeb6f6040566c2afbc3697af7247c26e8f4c793608cc346f4e8fa7dffe990"}, "downloads": -1, "filename": "clyngor-0.0.1.tar.gz", "has_sig": false, "md5_digest": "118060b2052a524b3add70432a054317", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4538, "upload_time": "2017-08-25T08:29:24", "upload_time_iso_8601": "2017-08-25T08:29:24.023794Z", "url": "https://files.pythonhosted.org/packages/a6/c9/5a1466fc5ee8dc01498ce1152feb191072ac50dc109fe4c6c54fb6a89cd7/clyngor-0.0.1.tar.gz", "yanked": false}], "0.0.10": [{"comment_text": "", "digests": {"md5": "371361ea9b0d78b60190d301dd014d66", "sha256": "f528912d577a6dbce34c3c30e06a478a028fc0e1cb5dab44e2c5a0833eececab"}, "downloads": -1, "filename": "clyngor-0.0.10.tar.gz", "has_sig": false, "md5_digest": "371361ea9b0d78b60190d301dd014d66", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19221, "upload_time": "2017-08-31T19:01:57", "upload_time_iso_8601": "2017-08-31T19:01:57.035210Z", "url": "https://files.pythonhosted.org/packages/2a/95/2c55051656c6dc960b4503bb453ec2ed299e0fc3dbb0f319a67d5ed66d43/clyngor-0.0.10.tar.gz", "yanked": false}], "0.0.11": [{"comment_text": "", "digests": {"md5": "bb125aa1660b4cda65ab7a38b813b665", "sha256": "1cf1f16ec642bb69b5967d5b8892de2073dbff47478ef2f32d807e9828bd19e0"}, "downloads": -1, "filename": "clyngor-0.0.11.tar.gz", "has_sig": false, "md5_digest": "bb125aa1660b4cda65ab7a38b813b665", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27513, "upload_time": "2017-09-07T13:23:17", "upload_time_iso_8601": "2017-09-07T13:23:17.130664Z", "url": "https://files.pythonhosted.org/packages/48/3c/756c518af9ce4721dcf34d04213ec57b912f7066abe35f1b81347740980b/clyngor-0.0.11.tar.gz", "yanked": false}], "0.0.12": [{"comment_text": "", "digests": {"md5": "aafee36759d3ae5e3b556d69f2b2051a", "sha256": "01e7555086be9a1b0479d72ff18cd9fe90f027904b1036ed7225a030cbdbbea6"}, "downloads": -1, "filename": "clyngor-0.0.12.tar.gz", "has_sig": false, "md5_digest": "aafee36759d3ae5e3b556d69f2b2051a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27650, "upload_time": "2017-09-07T13:40:00", "upload_time_iso_8601": "2017-09-07T13:40:00.784947Z", "url": "https://files.pythonhosted.org/packages/fb/19/e7ae90fa4539e1cbb015a4954e70f2a7a873ef95162dcad57938d17b952a/clyngor-0.0.12.tar.gz", "yanked": false}], "0.0.13": [{"comment_text": "", "digests": {"md5": "bba886586a931723849c25419dd8fec1", "sha256": "54f13125bfd4ec3011899e7626fd2a49e9cbda9044d2ee7c352025258acb2e1f"}, "downloads": -1, "filename": "clyngor-0.0.13.tar.gz", "has_sig": false, "md5_digest": "bba886586a931723849c25419dd8fec1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27672, "upload_time": "2017-09-07T13:42:05", "upload_time_iso_8601": "2017-09-07T13:42:05.129074Z", "url": "https://files.pythonhosted.org/packages/20/76/0c719fcb9fafefb3510461283821b8d8aea6b788d881585d0ae4e372b46d/clyngor-0.0.13.tar.gz", "yanked": false}], "0.0.14": [{"comment_text": "", "digests": {"md5": "9f352397861bd0aff92cc8268f4c4053", "sha256": "1dd0745344b0d252e8092bd726ab6c62c57530652b11cad75039f4f27e639506"}, "downloads": -1, "filename": "clyngor-0.0.14.tar.gz", "has_sig": false, "md5_digest": "9f352397861bd0aff92cc8268f4c4053", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27724, "upload_time": "2017-09-07T13:48:01", "upload_time_iso_8601": "2017-09-07T13:48:01.859378Z", "url": "https://files.pythonhosted.org/packages/cf/d1/2b71e09d5212a7b70a5d7e8e3743410cd6b75ef4679a06794fe31a682099/clyngor-0.0.14.tar.gz", "yanked": false}], "0.0.15": [{"comment_text": "", "digests": {"md5": "ee3cc6725ade408bfb3a78b3412eed41", "sha256": "a455ee328648749a2d781805fee24b25c98d29aef5e0a3752b085cfdc7c86f19"}, "downloads": -1, "filename": "clyngor-0.0.15.tar.gz", "has_sig": false, "md5_digest": "ee3cc6725ade408bfb3a78b3412eed41", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28804, "upload_time": "2017-09-07T14:44:11", "upload_time_iso_8601": "2017-09-07T14:44:11.774811Z", "url": "https://files.pythonhosted.org/packages/68/30/e2579d3d308b61d841d3964307a522a79f4450da6e6ca5abdc78a837f17d/clyngor-0.0.15.tar.gz", "yanked": false}], "0.0.16": [{"comment_text": "", "digests": {"md5": "0edee1dad832efb79f0b44fef41f6c9b", "sha256": "9420271141471c0c86460322dce438d087aa330431b9284aa5624e47d114daef"}, "downloads": -1, "filename": "clyngor-0.0.16.tar.gz", "has_sig": false, "md5_digest": "0edee1dad832efb79f0b44fef41f6c9b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29655, "upload_time": "2017-09-19T19:39:10", "upload_time_iso_8601": "2017-09-19T19:39:10.044142Z", "url": "https://files.pythonhosted.org/packages/ce/38/ab6d6f7824459fb7ccaf63c8c38c7d7e7908eeb1c862e6bc83a27a0f19d8/clyngor-0.0.16.tar.gz", "yanked": false}], "0.0.17": [{"comment_text": "", "digests": {"md5": "f550da465a0bff776b4e581772e3240f", "sha256": "9082f8003c8addd5def8b0389ea6290b67aa835fa2bce59d2141a077da1c2f31"}, "downloads": -1, "filename": "clyngor-0.0.17.tar.gz", "has_sig": false, "md5_digest": "f550da465a0bff776b4e581772e3240f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28860, "upload_time": "2017-09-22T20:22:16", "upload_time_iso_8601": "2017-09-22T20:22:16.492108Z", "url": "https://files.pythonhosted.org/packages/a0/d6/a921be777f0a7d57864feb986db052c8741894958184eab8301fe7ba0e7f/clyngor-0.0.17.tar.gz", "yanked": false}], "0.0.18": [{"comment_text": "", "digests": {"md5": "47788ae570b8110fbbb3cffdff9bed93", "sha256": "8b88fcf06897ea61e49e51aef6930d85f661d58225d42b917e9e51bbbd499206"}, "downloads": -1, "filename": "clyngor-0.0.18.tar.gz", "has_sig": false, "md5_digest": "47788ae570b8110fbbb3cffdff9bed93", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30002, "upload_time": "2017-09-25T16:08:49", "upload_time_iso_8601": "2017-09-25T16:08:49.379083Z", "url": "https://files.pythonhosted.org/packages/56/b9/16854fedf4d5bd6c5b3e645eeee5a9f46226824b22b461440397cb53cc48/clyngor-0.0.18.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "992d5bdee1e07bee42133aa4a3903b5f", "sha256": "1b8c5bc2edba55da7bb9f0ecb5dc135cc83229c9176dd3ec8ac6113e8fe708f3"}, "downloads": -1, "filename": "clyngor-0.0.2.tar.gz", "has_sig": false, "md5_digest": "992d5bdee1e07bee42133aa4a3903b5f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4803, "upload_time": "2017-08-25T08:30:26", "upload_time_iso_8601": "2017-08-25T08:30:26.965669Z", "url": "https://files.pythonhosted.org/packages/c4/31/6d2e9e1a108e4e6d1db13ffdccaea954e035bd6b5fa14c3f504f5521fd8c/clyngor-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "e9f4116784fa393eff5e77aa4c01ef6c", "sha256": "96e49b7268a687ce2bf9bf5021f044775f078be3435df3abb2c6bef554576711"}, "downloads": -1, "filename": "clyngor-0.0.3.tar.gz", "has_sig": false, "md5_digest": "e9f4116784fa393eff5e77aa4c01ef6c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11411, "upload_time": "2017-08-25T14:25:18", "upload_time_iso_8601": "2017-08-25T14:25:18.419867Z", "url": "https://files.pythonhosted.org/packages/c2/f7/742330b60f5cdae24176607a03408c11a2d2db7abd9d6dab6d1d2bddefd5/clyngor-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "5a3844b355d9b4c6f73fd905dc68a722", "sha256": "ff32f280086235a949ab6e15aa04d7b1cdde88791d5cbb530cbce980cb278b7b"}, "downloads": -1, "filename": "clyngor-0.0.4.tar.gz", "has_sig": false, "md5_digest": "5a3844b355d9b4c6f73fd905dc68a722", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11830, "upload_time": "2017-08-25T14:47:07", "upload_time_iso_8601": "2017-08-25T14:47:07.465923Z", "url": "https://files.pythonhosted.org/packages/e1/29/449077b818a4f50bb6a7bdef26a0766cd6f5c463fcb170ba584b35b63b59/clyngor-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "9cac4235336066103eb8b52382f77202", "sha256": "f5da66bf44500b5c75a0dac03382becb6a09a3b85e9a4f33c835a836f47b151f"}, "downloads": -1, "filename": "clyngor-0.0.5.tar.gz", "has_sig": false, "md5_digest": "9cac4235336066103eb8b52382f77202", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11852, "upload_time": "2017-08-28T10:02:44", "upload_time_iso_8601": "2017-08-28T10:02:44.363854Z", "url": "https://files.pythonhosted.org/packages/bc/84/13801f9f79d13f789079d4b30a7d1c2527f705bd530402b562b9ac14f9d9/clyngor-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "38911063c888fbd8505eb7da37cee00a", "sha256": "2739297ccd28100569dd7ab2bb724aa23f5364d774b1ef099c6d5c3c16d8742d"}, "downloads": -1, "filename": "clyngor-0.0.6.tar.gz", "has_sig": false, "md5_digest": "38911063c888fbd8505eb7da37cee00a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12003, "upload_time": "2017-08-28T10:24:57", "upload_time_iso_8601": "2017-08-28T10:24:57.194784Z", "url": "https://files.pythonhosted.org/packages/3a/44/657eb3804daaab98181b7550b234a2a476a050e8b3c7bd6d29b3aacaad2c/clyngor-0.0.6.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "affe4533a5467e4bfd7a823e5f8e44f9", "sha256": "0ab512498a2dbcba9ce218e6c493f9467f25478b70ce478f991ac9b90b8f171e"}, "downloads": -1, "filename": "clyngor-0.0.7.tar.gz", "has_sig": false, "md5_digest": "affe4533a5467e4bfd7a823e5f8e44f9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12359, "upload_time": "2017-08-29T13:04:15", "upload_time_iso_8601": "2017-08-29T13:04:15.096685Z", "url": "https://files.pythonhosted.org/packages/64/75/6a35210689d0c35c065cda7776fd5de099f50cb4ef27b35cf6093c8b31ef/clyngor-0.0.7.tar.gz", "yanked": false}], "0.0.8": [{"comment_text": "", "digests": {"md5": "ca405a2ab5745905c7c563b761fc4d0b", "sha256": "a1e123eb8ef8e4322131678bde18f8ad364dab8a2b2e2cfd8f745adb970dac01"}, "downloads": -1, "filename": "clyngor-0.0.8.tar.gz", "has_sig": false, "md5_digest": "ca405a2ab5745905c7c563b761fc4d0b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12758, "upload_time": "2017-08-29T13:19:19", "upload_time_iso_8601": "2017-08-29T13:19:19.373010Z", "url": "https://files.pythonhosted.org/packages/bd/3c/48289333b538a16497911acbce7fd8b09d50fd9ce19cfe22b5c90036b826/clyngor-0.0.8.tar.gz", "yanked": false}], "0.0.9": [{"comment_text": "", "digests": {"md5": "83d25ea7c1160c0aea9d3a787c36786f", "sha256": "e0721a6786394f4b2895c8af91a0b7c38e7de888ed32c2ec20f01ec13121f68a"}, "downloads": -1, "filename": "clyngor-0.0.9.tar.gz", "has_sig": false, "md5_digest": "83d25ea7c1160c0aea9d3a787c36786f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12973, "upload_time": "2017-08-30T13:36:59", "upload_time_iso_8601": "2017-08-30T13:36:59.527491Z", "url": "https://files.pythonhosted.org/packages/9c/4b/8f62c82b2b06ac148bcd5963a1bf0f3430323e2046398ce9637199add78f/clyngor-0.0.9.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "aff3d0972fc609b821fc274cc3842e5b", "sha256": "83215ac09f20ab62b9e8d49d39d92d9bca196db926a0b9e82819eab01fc871f3"}, "downloads": -1, "filename": "clyngor-0.1.0.tar.gz", "has_sig": false, "md5_digest": "aff3d0972fc609b821fc274cc3842e5b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28385, "upload_time": "2017-11-09T18:52:23", "upload_time_iso_8601": "2017-11-09T18:52:23.944130Z", "url": "https://files.pythonhosted.org/packages/fc/9f/184706a27c9be6f1a1969fd2ea7495a69c6cb243d51fb47df1accc057eba/clyngor-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "7816f088507810524655f8143af727a1", "sha256": "8a9bac628b8c4746ebfa8f8f12cd93d4b8d1c821aec757c6f91ebbf7b0107793"}, "downloads": -1, "filename": "clyngor-0.1.1.tar.gz", "has_sig": false, "md5_digest": "7816f088507810524655f8143af727a1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28404, "upload_time": "2017-11-10T13:06:20", "upload_time_iso_8601": "2017-11-10T13:06:20.628025Z", "url": "https://files.pythonhosted.org/packages/b8/fe/ee6b4e591ea9cfcaf493c68290f246d041e9ff3136b2a7ac6644def674e1/clyngor-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "4bce5c75ff87371aa5c6e51aba5702a9", "sha256": "e5afd7e7a724332e9651190b7f926f9da90e7eb46fed5feeeda1faec41972996"}, "downloads": -1, "filename": "clyngor-0.1.2.tar.gz", "has_sig": false, "md5_digest": "4bce5c75ff87371aa5c6e51aba5702a9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28510, "upload_time": "2017-11-10T17:02:41", "upload_time_iso_8601": "2017-11-10T17:02:41.115432Z", "url": "https://files.pythonhosted.org/packages/4d/f4/a9f37913ddb60f80774e03ecda3d27c2d4136a46d7cc9a12873ac97ea2cb/clyngor-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "b4c1dc5badc52f15a25e03c219c4bcc8", "sha256": "58546f39310c3c348de053c41859adec677b66477591796e3b54336672d71056"}, "downloads": -1, "filename": "clyngor-0.1.3.tar.gz", "has_sig": false, "md5_digest": "b4c1dc5badc52f15a25e03c219c4bcc8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28885, "upload_time": "2017-11-11T13:45:49", "upload_time_iso_8601": "2017-11-11T13:45:49.908746Z", "url": "https://files.pythonhosted.org/packages/05/8f/2474f7d3479c40b6f56ec7615cf59691856085fce69f503e1a45038fdd46/clyngor-0.1.3.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "3b4d5aaa02d9d21c6f7878948f7252f3", "sha256": "d7da005b77294ceda601e6c57dd9dc6e55a0f23e35d6ab74ce51b5c23029c931"}, "downloads": -1, "filename": "clyngor-0.2.0.tar.gz", "has_sig": false, "md5_digest": "3b4d5aaa02d9d21c6f7878948f7252f3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29952, "upload_time": "2017-11-14T15:40:14", "upload_time_iso_8601": "2017-11-14T15:40:14.024046Z", "url": "https://files.pythonhosted.org/packages/a3/84/e5fdaeced65764d6a859f199daaaee47ce5fdbce55d59761883c9500bd5e/clyngor-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "e6ad53db365654dac08680e9ac153a76", "sha256": "80804547207dd2f8ccaa95643002c2b9024ad018bb56bca4189f871553b0f726"}, "downloads": -1, "filename": "clyngor-0.2.1.tar.gz", "has_sig": false, "md5_digest": "e6ad53db365654dac08680e9ac153a76", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29972, "upload_time": "2017-11-14T15:58:39", "upload_time_iso_8601": "2017-11-14T15:58:39.380853Z", "url": "https://files.pythonhosted.org/packages/31/da/efb55a6e0f1ce22c8a9b282c63f4fed954766f3b9fcd4a2a6a6067e2a78d/clyngor-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "f10ec9d95ef4bd57f7c1b6ba30d1cc5d", "sha256": "a0429ca56766de893434c0c1e6431edc57064646e7f0d27979fe6a04d0000261"}, "downloads": -1, "filename": "clyngor-0.2.2.tar.gz", "has_sig": false, "md5_digest": "f10ec9d95ef4bd57f7c1b6ba30d1cc5d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30052, "upload_time": "2017-11-14T16:11:44", "upload_time_iso_8601": "2017-11-14T16:11:44.875887Z", "url": "https://files.pythonhosted.org/packages/49/42/39e7d0a38ec8ede85c6c737004dcc1c77f8a5e8dbe9410fd409b76cee839/clyngor-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "cb0c3576ad3a490f365e950828272c4b", "sha256": "01465c01b288ea1702a9e6cc0ca3a833a728cb7ca99330eef8ca5e20c6828b19"}, "downloads": -1, "filename": "clyngor-0.2.3.tar.gz", "has_sig": false, "md5_digest": "cb0c3576ad3a490f365e950828272c4b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29933, "upload_time": "2017-11-23T15:17:40", "upload_time_iso_8601": "2017-11-23T15:17:40.891237Z", "url": "https://files.pythonhosted.org/packages/cc/15/cd4a9213a9657b598cd3d6a860bf5d868b1c09de48e3ec169676ceeb9523/clyngor-0.2.3.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "804d5dd6ca4158825e5cbb6bdf9c7dd6", "sha256": "e74ed1ec267d94467b1989ee228d351d57b5b6ae20b96945a8a76dd786e36504"}, "downloads": -1, "filename": "clyngor-0.2.4.tar.gz", "has_sig": false, "md5_digest": "804d5dd6ca4158825e5cbb6bdf9c7dd6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17101, "upload_time": "2018-01-30T16:13:55", "upload_time_iso_8601": "2018-01-30T16:13:55.789191Z", "url": "https://files.pythonhosted.org/packages/48/ca/1cb65623fa5148ec6ac1936535afb4763bf0113e700866adc64db754e0ed/clyngor-0.2.4.tar.gz", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "fdc26d5bc59b0ea6a403ccfb54ba04f3", "sha256": "805eec3a4a9bfcbddd526bcda04d651a1c40f559bc2d0bf8a74d72ab3e69cc23"}, "downloads": -1, "filename": "clyngor-0.2.5.tar.gz", "has_sig": false, "md5_digest": "fdc26d5bc59b0ea6a403ccfb54ba04f3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17120, "upload_time": "2018-01-30T16:20:57", "upload_time_iso_8601": "2018-01-30T16:20:57.461277Z", "url": "https://files.pythonhosted.org/packages/3f/47/e65fc22b56762a35da8f9c6a6fba9dd1da17e55b71eaefe658dcf41a3ebb/clyngor-0.2.5.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "ff806a9bcd7c16a9dbcf98b78999433b", "sha256": "7014793290e7bf9028fa9df8f61b346ebb45067ad68dab1b06444a11fe50a3f7"}, "downloads": -1, "filename": "clyngor-0.3.0.tar.gz", "has_sig": false, "md5_digest": "ff806a9bcd7c16a9dbcf98b78999433b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17307, "upload_time": "2018-01-30T16:57:35", "upload_time_iso_8601": "2018-01-30T16:57:35.397359Z", "url": "https://files.pythonhosted.org/packages/12/08/6b6709d123f4f5bf1c6a0f057515b6ba3da0e9c83f93c98e5ece98347f66/clyngor-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "ba08d01baacb0c021e9867dbfc6e2a9e", "sha256": "96e694de483a0999f830f153c38634c0450b901780efae3c2f1021cba018898d"}, "downloads": -1, "filename": "clyngor-0.3.1.tar.gz", "has_sig": false, "md5_digest": "ba08d01baacb0c021e9867dbfc6e2a9e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17440, "upload_time": "2018-03-05T21:55:06", "upload_time_iso_8601": "2018-03-05T21:55:06.046846Z", "url": "https://files.pythonhosted.org/packages/f3/76/c18a409e7711e152b7e541cb972394af22dd6ec8db548a95c5cc8b81fed0/clyngor-0.3.1.tar.gz", "yanked": false}], "0.3.10": [{"comment_text": "", "digests": {"md5": "3bce523ecd0c2ad45b40ee7b24406497", "sha256": "1bcdb76ded5afb44aed58bda9919697c13f93a87d86c32e12023d217becdcf3c"}, "downloads": -1, "filename": "clyngor-0.3.10-py3-none-any.whl", "has_sig": false, "md5_digest": "3bce523ecd0c2ad45b40ee7b24406497", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 34352, "upload_time": "2018-11-13T15:33:06", "upload_time_iso_8601": "2018-11-13T15:33:06.518517Z", "url": "https://files.pythonhosted.org/packages/00/f0/a3728f777af3f3c4e243dd59e55c1989fe79bab3ecbd01ce6681ce677ee6/clyngor-0.3.10-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "db3a6ea2b5684d67a78aeaf1d6d715f7", "sha256": "2bed940179060e0ee617375489e8e7277a2ae7d18dbd14ef6c11b72e240ea582"}, "downloads": -1, "filename": "clyngor-0.3.10.tar.gz", "has_sig": false, "md5_digest": "db3a6ea2b5684d67a78aeaf1d6d715f7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27859, "upload_time": "2018-11-13T15:33:08", "upload_time_iso_8601": "2018-11-13T15:33:08.299106Z", "url": "https://files.pythonhosted.org/packages/e9/8a/c3ec12abca8587048316f941e5d66a1010ec65a989b5e57e34f5c06505a3/clyngor-0.3.10.tar.gz", "yanked": false}], "0.3.11": [{"comment_text": "", "digests": {"md5": "8959839a90530efef1a6c5f1bf231c6d", "sha256": "0df1811587322ba9e58b76165031de3ac41884c4bfcd2e68904cf448abfb2b60"}, "downloads": -1, "filename": "clyngor-0.3.11-py3-none-any.whl", "has_sig": false, "md5_digest": "8959839a90530efef1a6c5f1bf231c6d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 34748, "upload_time": "2018-12-18T10:12:21", "upload_time_iso_8601": "2018-12-18T10:12:21.814552Z", "url": "https://files.pythonhosted.org/packages/ea/5e/eb19bf8053e1fd782c8a98f6439e3c3103c6c8e332d5eaed334c81663427/clyngor-0.3.11-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "529f52c6bbb0a8e08bc79851702269b2", "sha256": "174fe3c76d36515f1e9c0929c19400fddf241926d62dcd73da6ccc367964736b"}, "downloads": -1, "filename": "clyngor-0.3.11.tar.gz", "has_sig": false, "md5_digest": "529f52c6bbb0a8e08bc79851702269b2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29171, "upload_time": "2018-12-18T10:12:23", "upload_time_iso_8601": "2018-12-18T10:12:23.549793Z", "url": "https://files.pythonhosted.org/packages/f1/8d/51765c4f4a48f0201bff6e1f79dfde828b86abd78742426758f2297976fb/clyngor-0.3.11.tar.gz", "yanked": false}], "0.3.12": [{"comment_text": "", "digests": {"md5": "e0355ea6bcc8f8c0698bd0aad0019b02", "sha256": "79226cd944cd85f515f8200ccbd1ff285ab4b52cf8e34a3be9a2baf7515f4375"}, "downloads": -1, "filename": "clyngor-0.3.12-py3-none-any.whl", "has_sig": false, "md5_digest": "e0355ea6bcc8f8c0698bd0aad0019b02", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 34990, "upload_time": "2018-12-18T10:12:56", "upload_time_iso_8601": "2018-12-18T10:12:56.407524Z", "url": "https://files.pythonhosted.org/packages/5f/8c/05a8d606196a7c24b8421233269879c386653cb6f054e77de84ff385044d/clyngor-0.3.12-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ee2fc16f68f2d8473100ba4789211e8d", "sha256": "f221dfe4597a586b749e438c2641374a6e5e0368d17c055088b10b6569f5aaac"}, "downloads": -1, "filename": "clyngor-0.3.12.tar.gz", "has_sig": false, "md5_digest": "ee2fc16f68f2d8473100ba4789211e8d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29435, "upload_time": "2018-12-18T10:12:58", "upload_time_iso_8601": "2018-12-18T10:12:58.221293Z", "url": "https://files.pythonhosted.org/packages/26/b0/4d8fa6643756490419b116c564263882817d0fec747d16832be863d87a91/clyngor-0.3.12.tar.gz", "yanked": false}], "0.3.14": [{"comment_text": "", "digests": {"md5": "3e1ea849f7a7c9e2dbdbd13a0f115813", "sha256": "8dd5050f4f5dbc084f4f65dbafcf54c8b2f093e2bb6e384a19199299517df638"}, "downloads": -1, "filename": "clyngor-0.3.14-py3-none-any.whl", "has_sig": false, "md5_digest": "3e1ea849f7a7c9e2dbdbd13a0f115813", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 38160, "upload_time": "2019-02-15T13:49:01", "upload_time_iso_8601": "2019-02-15T13:49:01.681486Z", "url": "https://files.pythonhosted.org/packages/67/f8/cef9369e619052a5993ed4623d196f20686a7f5b1e8e7aa3e8e3798a4be2/clyngor-0.3.14-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6d6e851953a0f259cd87f739b7d4a113", "sha256": "9176a49095a565426573d0c9b526582d6406986072e0a3571a326aa33648fe54"}, "downloads": -1, "filename": "clyngor-0.3.14.tar.gz", "has_sig": false, "md5_digest": "6d6e851953a0f259cd87f739b7d4a113", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32405, "upload_time": "2019-02-15T13:49:03", "upload_time_iso_8601": "2019-02-15T13:49:03.684322Z", "url": "https://files.pythonhosted.org/packages/9b/2f/2eda75d5152410f7305347afda1ea859987d93a83b15dc48a19ba0ac1a8f/clyngor-0.3.14.tar.gz", "yanked": false}], "0.3.15": [{"comment_text": "", "digests": {"md5": "d801ed6ee84272062437eb93a62c600e", "sha256": "b232b17344cd2157d68da31522760b14ffaa5db7c95bb502e1f9c94a24339b23"}, "downloads": -1, "filename": "clyngor-0.3.15-py3-none-any.whl", "has_sig": false, "md5_digest": "d801ed6ee84272062437eb93a62c600e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 38244, "upload_time": "2019-02-22T19:00:16", "upload_time_iso_8601": "2019-02-22T19:00:16.694555Z", "url": "https://files.pythonhosted.org/packages/e5/1f/3c47b123d92b01e6441cdeb9ef71eb4c29c59ee17c24b094ca56d0a7ac71/clyngor-0.3.15-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9d9ba0c4417f0bcdff34070fa5e6f649", "sha256": "747e7e26c329caac155be1d719c84880bcf887c9923789a9ed5284be03056bb2"}, "downloads": -1, "filename": "clyngor-0.3.15.tar.gz", "has_sig": false, "md5_digest": "9d9ba0c4417f0bcdff34070fa5e6f649", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32476, "upload_time": "2019-02-22T19:00:18", "upload_time_iso_8601": "2019-02-22T19:00:18.713216Z", "url": "https://files.pythonhosted.org/packages/f3/a5/03c6afaba323f9c4030a73a50c317155feee4516c008390a335cfd18844a/clyngor-0.3.15.tar.gz", "yanked": false}], "0.3.16": [{"comment_text": "", "digests": {"md5": "2100931530f9d95debb2e1e8aad55a62", "sha256": "fc5c5821e7e43f274c53b2a79903e3f5ee207fe04dead6b4b163ca07942d1358"}, "downloads": -1, "filename": "clyngor-0.3.16-py3-none-any.whl", "has_sig": false, "md5_digest": "2100931530f9d95debb2e1e8aad55a62", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 39110, "upload_time": "2019-05-17T16:56:00", "upload_time_iso_8601": "2019-05-17T16:56:00.395186Z", "url": "https://files.pythonhosted.org/packages/61/2b/44161c764457a7bc3be15d04a51ff3401998874a56e184a9d37df6307dd9/clyngor-0.3.16-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "471d26f3952ccc8ab8533c15a7673638", "sha256": "bcb654c559c208a8e36de3f84fb746826f0b2f03e6e9b5bfbf16797302fc5f23"}, "downloads": -1, "filename": "clyngor-0.3.16.tar.gz", "has_sig": false, "md5_digest": "471d26f3952ccc8ab8533c15a7673638", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33385, "upload_time": "2019-05-17T16:56:02", "upload_time_iso_8601": "2019-05-17T16:56:02.560182Z", "url": "https://files.pythonhosted.org/packages/5f/1f/47338891057ae62fab30bbcfe2437a7dff1eca21f3d63fb7a9dfe55fd4f9/clyngor-0.3.16.tar.gz", "yanked": false}], "0.3.17": [{"comment_text": "", "digests": {"md5": "6bea90d0f8b5403b2906e3e42808973b", "sha256": "be7dedb4260601434a8751814184150f70669d0b9d94cfc950bdbfd0d0d82022"}, "downloads": -1, "filename": "clyngor-0.3.17-py3-none-any.whl", "has_sig": false, "md5_digest": "6bea90d0f8b5403b2906e3e42808973b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 40786, "upload_time": "2019-05-24T10:09:52", "upload_time_iso_8601": "2019-05-24T10:09:52.257820Z", "url": "https://files.pythonhosted.org/packages/30/5a/e64e1478b944e917e9c652a7e932e3a7baef81f634757fce49b71a18803c/clyngor-0.3.17-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fee0c6eedf9758bb0887e8802e3ed5d9", "sha256": "8d4f5c7a49707d275c1da51e605c982b70ecdd84f3bc300c6ba55e3d9981035a"}, "downloads": -1, "filename": "clyngor-0.3.17.tar.gz", "has_sig": false, "md5_digest": "fee0c6eedf9758bb0887e8802e3ed5d9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34544, "upload_time": "2019-05-24T10:09:54", "upload_time_iso_8601": "2019-05-24T10:09:54.307209Z", "url": "https://files.pythonhosted.org/packages/3c/8c/c03aaf4c3de634027253793d97910e8877b874222d32815a3c77f0bcd09b/clyngor-0.3.17.tar.gz", "yanked": false}], "0.3.18": [{"comment_text": "", "digests": {"md5": "00f4bba199d1991219ab0d2ac2b148f7", "sha256": "5ae92f558b6c05d125a3f68e351181c2485766999f3f25cdeac2b3581c11f9a5"}, "downloads": -1, "filename": "clyngor-0.3.18-py3-none-any.whl", "has_sig": false, "md5_digest": "00f4bba199d1991219ab0d2ac2b148f7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 41116, "upload_time": "2019-05-24T14:07:43", "upload_time_iso_8601": "2019-05-24T14:07:43.458590Z", "url": "https://files.pythonhosted.org/packages/92/7d/eb99adba07ad86fe0fe5f92d65bc445c53dbe9025de04c4b1873cd0580fd/clyngor-0.3.18-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "18d397eee8dd88aad16e16d7f8355fac", "sha256": "90b095615ec7739c1492afba032fddd337830cec7b4d046efe7219d06ea28626"}, "downloads": -1, "filename": "clyngor-0.3.18.tar.gz", "has_sig": false, "md5_digest": "18d397eee8dd88aad16e16d7f8355fac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34875, "upload_time": "2019-05-24T14:07:45", "upload_time_iso_8601": "2019-05-24T14:07:45.738816Z", "url": "https://files.pythonhosted.org/packages/e8/e5/961e9b8d026104f1bb212f084d82612577dd89dae315cf0b546089cec9eb/clyngor-0.3.18.tar.gz", "yanked": false}], "0.3.19": [{"comment_text": "", "digests": {"md5": "02a3efba647acf2a1377b955a9b3afb7", "sha256": "4a0be797181709d3c25791e656b1c836cec8d438fa106999ccc6c8854ab847c8"}, "downloads": -1, "filename": "clyngor-0.3.19-py3-none-any.whl", "has_sig": false, "md5_digest": "02a3efba647acf2a1377b955a9b3afb7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 41147, "upload_time": "2019-05-29T00:31:02", "upload_time_iso_8601": "2019-05-29T00:31:02.642789Z", "url": "https://files.pythonhosted.org/packages/57/c2/7c15c3f7221098300720d0ed9916d41b7a084a14e6a206f4cb4ea1b7e476/clyngor-0.3.19-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "922b23eee6df8aa9559fa5511bfbed27", "sha256": "7f4646ca19bfa10ead2b2f7ea22580143e5984be8ce17694d9b7fb3854671c06"}, "downloads": -1, "filename": "clyngor-0.3.19.tar.gz", "has_sig": false, "md5_digest": "922b23eee6df8aa9559fa5511bfbed27", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34917, "upload_time": "2019-05-29T00:31:04", "upload_time_iso_8601": "2019-05-29T00:31:04.770722Z", "url": "https://files.pythonhosted.org/packages/ab/fc/87b39ea264d8c7e83e0230324da22234f57638c78a4273ccb4c9c63a3ff7/clyngor-0.3.19.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "05b75add478f2c78c6c413e6def544bb", "sha256": "0301ca1da365c945579d766db49c397755220d51d57668fb2f3f25ac7c65e4c9"}, "downloads": -1, "filename": "clyngor-0.3.2.tar.gz", "has_sig": false, "md5_digest": "05b75add478f2c78c6c413e6def544bb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19396, "upload_time": "2018-04-25T12:58:06", "upload_time_iso_8601": "2018-04-25T12:58:06.679662Z", "url": "https://files.pythonhosted.org/packages/e6/30/6b8445136b0c287eed83895eb339101325ff13d44bd514f1a5b00f69db9a/clyngor-0.3.2.tar.gz", "yanked": false}], "0.3.20": [{"comment_text": "", "digests": {"md5": "baa7cedcdccf9b972c4fa6d207916080", "sha256": "2b6d25c1066824a1450d948e877bff40ff8fed2a8386e981387e2f3b56d14b73"}, "downloads": -1, "filename": "clyngor-0.3.20-py3-none-any.whl", "has_sig": false, "md5_digest": "baa7cedcdccf9b972c4fa6d207916080", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 41950, "upload_time": "2019-06-05T14:19:15", "upload_time_iso_8601": "2019-06-05T14:19:15.468290Z", "url": "https://files.pythonhosted.org/packages/cc/67/eadf45961234614f02e323cf06f5c91c6152e9f2d23bdb503c4c3a672611/clyngor-0.3.20-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1ee1c98d14a1a0f5b616d78be6bc2e1f", "sha256": "577e8992b089d2688d26a91a98927fba7bb0cc60874f2db24afe21b6603dab5c"}, "downloads": -1, "filename": "clyngor-0.3.20.tar.gz", "has_sig": false, "md5_digest": "1ee1c98d14a1a0f5b616d78be6bc2e1f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35620, "upload_time": "2019-06-05T14:19:17", "upload_time_iso_8601": "2019-06-05T14:19:17.302875Z", "url": "https://files.pythonhosted.org/packages/fa/de/de33b82cdb3c307a6f731fd677e62699608edc66a95796d9b7eb1ce3ae5b/clyngor-0.3.20.tar.gz", "yanked": false}], "0.3.21": [{"comment_text": "", "digests": {"md5": "fa17a7a518683955529e6893eb860819", "sha256": "d0e99859bc3221767950a417259385236af20ec129c3ae57527b90c2eda6ca1a"}, "downloads": -1, "filename": "clyngor-0.3.21-py3-none-any.whl", "has_sig": false, "md5_digest": "fa17a7a518683955529e6893eb860819", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 43272, "upload_time": "2019-10-11T16:50:37", "upload_time_iso_8601": "2019-10-11T16:50:37.742785Z", "url": "https://files.pythonhosted.org/packages/70/e2/7c1093c874d3cafff5b06d1c037aec352aa896e6174b08f58f3168be520c/clyngor-0.3.21-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b4476773f5a512e7fe4a83833f97e574", "sha256": "e3d36afa790d322314bda5e5919506c19dbca5f1a0921e48b0f1975084544157"}, "downloads": -1, "filename": "clyngor-0.3.21.tar.gz", "has_sig": false, "md5_digest": "b4476773f5a512e7fe4a83833f97e574", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36612, "upload_time": "2019-10-11T16:50:39", "upload_time_iso_8601": "2019-10-11T16:50:39.751225Z", "url": "https://files.pythonhosted.org/packages/07/bb/83b69ca7b21f3b90cbe93f04e434ad876ea562fe3ad4087b3d7db44c5c11/clyngor-0.3.21.tar.gz", "yanked": false}], "0.3.22": [{"comment_text": "", "digests": {"md5": "f64a84b3003eae8628f6fe103d0c12c2", "sha256": "7ce2994c5ce8f077f974ad5bb0de95c8f8c56c70325708e21eea70885d74638e"}, "downloads": -1, "filename": "clyngor-0.3.22-py3-none-any.whl", "has_sig": false, "md5_digest": "f64a84b3003eae8628f6fe103d0c12c2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 43382, "upload_time": "2019-10-30T14:19:49", "upload_time_iso_8601": "2019-10-30T14:19:49.549415Z", "url": "https://files.pythonhosted.org/packages/41/5c/d2b2927051223c7c4c1635e7f37717885da1c3d3ec9d29348e26c415d1e0/clyngor-0.3.22-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cb813e90ee3cb42bc39c626550659a51", "sha256": "68886fa6285866077e305626e15335a28b7e312991ba841a8fa9e6338a1654f6"}, "downloads": -1, "filename": "clyngor-0.3.22.tar.gz", "has_sig": false, "md5_digest": "cb813e90ee3cb42bc39c626550659a51", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36744, "upload_time": "2019-10-30T14:19:51", "upload_time_iso_8601": "2019-10-30T14:19:51.401335Z", "url": "https://files.pythonhosted.org/packages/4f/a0/ed32ed78aa3339a51765b50f316ac63c061956818390a109ffcb5e5b456c/clyngor-0.3.22.tar.gz", "yanked": false}], "0.3.23": [{"comment_text": "", "digests": {"md5": "f88cfdb059f8a0e485f406fe9886f11b", "sha256": "5e449f10c2b8a662be4ced8b065c72affe89a460bdce0ea0165e0ebe6bd6bd19"}, "downloads": -1, "filename": "clyngor-0.3.23-py3-none-any.whl", "has_sig": false, "md5_digest": "f88cfdb059f8a0e485f406fe9886f11b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 43419, "upload_time": "2019-10-30T15:06:37", "upload_time_iso_8601": "2019-10-30T15:06:37.194536Z", "url": "https://files.pythonhosted.org/packages/49/57/d989942da7050afbc284805074d7fe40591d3ef456da0894484f8497ad5c/clyngor-0.3.23-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6899f3c2dda4dafb74ef1e3b18365d00", "sha256": "a0c9092b77fddb93707690259d37a3898279cd78509b39d95181e3eb6977392d"}, "downloads": -1, "filename": "clyngor-0.3.23.tar.gz", "has_sig": false, "md5_digest": "6899f3c2dda4dafb74ef1e3b18365d00", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36770, "upload_time": "2019-10-30T15:06:39", "upload_time_iso_8601": "2019-10-30T15:06:39.362134Z", "url": "https://files.pythonhosted.org/packages/11/0c/85b4c4dd2e3f6c3bc8435e58ee2a190cfc95d3a92e339b9da3532d62bf3b/clyngor-0.3.23.tar.gz", "yanked": false}], "0.3.24": [{"comment_text": "", "digests": {"md5": "0187ee64737ab74c5ab0f72f5cb5a886", "sha256": "7260b023a0924413fadb2b112b5cec7757920471748ca6dc99c7058d3b79feb2"}, "downloads": -1, "filename": "clyngor-0.3.24-py3-none-any.whl", "has_sig": false, "md5_digest": "0187ee64737ab74c5ab0f72f5cb5a886", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 44391, "upload_time": "2019-10-31T02:09:04", "upload_time_iso_8601": "2019-10-31T02:09:04.049285Z", "url": "https://files.pythonhosted.org/packages/9b/53/06357c0f147799b2cf31278346f57058592797e7d4f872d6cbbff990cc8b/clyngor-0.3.24-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2eafe2a9ed7549841ffab5676bb26d4a", "sha256": "8de9f83e287c6f306b1fb68c2e3da68eb3b295566553d56f1c7195982ec4db50"}, "downloads": -1, "filename": "clyngor-0.3.24.tar.gz", "has_sig": false, "md5_digest": "2eafe2a9ed7549841ffab5676bb26d4a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42112, "upload_time": "2019-10-31T02:09:06", "upload_time_iso_8601": "2019-10-31T02:09:06.712951Z", "url": "https://files.pythonhosted.org/packages/1f/dd/e22685117dff61c2befb916694d98d2c74dc561739acb7f54f6000dd3516/clyngor-0.3.24.tar.gz", "yanked": false}], "0.3.25": [{"comment_text": "", "digests": {"md5": "da5a9b5e8a67716230eca9cb07ba2041", "sha256": "43c6f4fb0f5623658f315483da4ac28b485bc2c9d23c6ac549483c1a1ae6af44"}, "downloads": -1, "filename": "clyngor-0.3.25-py3-none-any.whl", "has_sig": false, "md5_digest": "da5a9b5e8a67716230eca9cb07ba2041", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 45933, "upload_time": "2020-01-07T15:51:49", "upload_time_iso_8601": "2020-01-07T15:51:49.273817Z", "url": "https://files.pythonhosted.org/packages/68/41/d91ec54843f169f0de0e2dbe4549a11a8dbc435a8cfec81373cc3ff0466f/clyngor-0.3.25-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9a1176976019a1eadf0f5b412e378e1d", "sha256": "55008132c32778535fd0fa33a2e7a84d167066328cc390a1a8572e1c9c493b4a"}, "downloads": -1, "filename": "clyngor-0.3.25.tar.gz", "has_sig": false, "md5_digest": "9a1176976019a1eadf0f5b412e378e1d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39301, "upload_time": "2020-01-07T15:51:51", "upload_time_iso_8601": "2020-01-07T15:51:51.608522Z", "url": "https://files.pythonhosted.org/packages/00/60/cd0cd1249e34abb927f2e8b353b7146c65b79b462181d219199af6e8c4dd/clyngor-0.3.25.tar.gz", "yanked": false}], "0.3.26": [{"comment_text": "", "digests": {"md5": "fc41e844ed6c29ea9ba18f13e2d0854b", "sha256": "1187c345ce83b68e55c88207a461eebab9be7e7e9a19b2f18a9a57969d9ddd3e"}, "downloads": -1, "filename": "clyngor-0.3.26-py3-none-any.whl", "has_sig": false, "md5_digest": "fc41e844ed6c29ea9ba18f13e2d0854b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 46014, "upload_time": "2020-01-07T15:52:31", "upload_time_iso_8601": "2020-01-07T15:52:31.887795Z", "url": "https://files.pythonhosted.org/packages/a0/19/9f86f3e86b3d0e5c394d02020ed4f746f9530f9dfbba3ed960d2273f516a/clyngor-0.3.26-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "caf145db0d2822fb5844a5725d703c10", "sha256": "7a48d3348dd46223191c04565bde68f68c66dd27c9100d4296808d2a0f1ba6a9"}, "downloads": -1, "filename": "clyngor-0.3.26.tar.gz", "has_sig": false, "md5_digest": "caf145db0d2822fb5844a5725d703c10", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39384, "upload_time": "2020-01-07T15:52:34", "upload_time_iso_8601": "2020-01-07T15:52:34.182599Z", "url": "https://files.pythonhosted.org/packages/fc/1b/adfbe89d6bfc5b0ffc83061cd4e022ce12a7e2733c61b135d442c1286a7f/clyngor-0.3.26.tar.gz", "yanked": false}], "0.3.27": [{"comment_text": "", "digests": {"md5": "059c60ffcf1631e670e6acb065e15705", "sha256": "68001409a8625afe5bd2c15b3ebec699f68fb3e9261b5a8fac82e4160019c662"}, "downloads": -1, "filename": "clyngor-0.3.27-py3-none-any.whl", "has_sig": false, "md5_digest": "059c60ffcf1631e670e6acb065e15705", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 46019, "upload_time": "2020-01-10T13:21:36", "upload_time_iso_8601": "2020-01-10T13:21:36.566782Z", "url": "https://files.pythonhosted.org/packages/de/8f/20461b69b3e370dcd355b9452b0e90e14e64b7058271e32247e045ff520c/clyngor-0.3.27-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e8846b144e077c5e80e82048512f596b", "sha256": "67e2e27906ec280f89b8230463fc6f5151a5d388ae515aa546f348d473ef0f6e"}, "downloads": -1, "filename": "clyngor-0.3.27.tar.gz", "has_sig": false, "md5_digest": "e8846b144e077c5e80e82048512f596b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39375, "upload_time": "2020-01-10T13:21:38", "upload_time_iso_8601": "2020-01-10T13:21:38.492121Z", "url": "https://files.pythonhosted.org/packages/fe/06/25f7b9f3d5bdfb45eae2627e73ceeed86fbebb1a168dcae16f3795e7af47/clyngor-0.3.27.tar.gz", "yanked": false}], "0.3.28": [{"comment_text": "", "digests": {"md5": "1198e2a1fe3e58227d40c142a55ccaea", "sha256": "a6457fc77c7564723f5daa4d5fd6a2e5744adc60cbadda3b262ffbd45afe6141"}, "downloads": -1, "filename": "clyngor-0.3.28-py3-none-any.whl", "has_sig": false, "md5_digest": "1198e2a1fe3e58227d40c142a55ccaea", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 46595, "upload_time": "2020-02-14T14:00:24", "upload_time_iso_8601": "2020-02-14T14:00:24.539067Z", "url": "https://files.pythonhosted.org/packages/f6/72/dbf585fe045bd6c2cdd25088f76213d04dec44c3970bbfbe6fdded85f28b/clyngor-0.3.28-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9f34e28836fd958e48b8e4ec4e9a72e1", "sha256": "44e7bdebe8e225d304dad000f0c0be9ea3da2fcd4b23c2d5e528a144ca34b866"}, "downloads": -1, "filename": "clyngor-0.3.28.tar.gz", "has_sig": false, "md5_digest": "9f34e28836fd958e48b8e4ec4e9a72e1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 46382, "upload_time": "2020-02-14T14:00:26", "upload_time_iso_8601": "2020-02-14T14:00:26.820280Z", "url": "https://files.pythonhosted.org/packages/b0/ba/e07d53c7fef571ff604bd923fac5011394eff673c7a0cd1231535a75d58b/clyngor-0.3.28.tar.gz", "yanked": false}], "0.3.29": [{"comment_text": "", "digests": {"md5": "53d7021e649712df950cf3aef8697a7d", "sha256": "737e59aa2b7cb8de0ea4cfc2ed1f59841c3685882071d3e4cc091506170969a9"}, "downloads": -1, "filename": "clyngor-0.3.29-py3-none-any.whl", "has_sig": false, "md5_digest": "53d7021e649712df950cf3aef8697a7d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 46811, "upload_time": "2020-02-26T14:06:57", "upload_time_iso_8601": "2020-02-26T14:06:57.561688Z", "url": "https://files.pythonhosted.org/packages/12/ae/6a3da92d89d4701a10c7a5222bfa492c9b165a823f864717c4ce02d26213/clyngor-0.3.29-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "03ed28276f14081bd00ff7c14af7fd86", "sha256": "9b1380ec9cdbe9cdad6ce4777864af6d08621859cbd3cdc98d766b418d881b99"}, "downloads": -1, "filename": "clyngor-0.3.29.tar.gz", "has_sig": false, "md5_digest": "03ed28276f14081bd00ff7c14af7fd86", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 46552, "upload_time": "2020-02-26T14:07:00", "upload_time_iso_8601": "2020-02-26T14:07:00.174778Z", "url": "https://files.pythonhosted.org/packages/7a/32/c882a5dcaf6c4151770993a1f86a51fe266125448bb0bb990e66c7e8092a/clyngor-0.3.29.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "fd4ccdb5adb0441dc79435b7eaf2480e", "sha256": "c3a9da8fdf45c86fe9df7cb8cb70cbd1880dbda998612681d29798530f2e6a72"}, "downloads": -1, "filename": "clyngor-0.3.3.tar.gz", "has_sig": false, "md5_digest": "fd4ccdb5adb0441dc79435b7eaf2480e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24946, "upload_time": "2018-05-18T19:32:32", "upload_time_iso_8601": "2018-05-18T19:32:32.677561Z", "url": "https://files.pythonhosted.org/packages/f8/3b/5644dda0a506f40b73071363230561020a87738dd44dea0128c7eb449280/clyngor-0.3.3.tar.gz", "yanked": false}], "0.3.30": [{"comment_text": "", "digests": {"md5": "9202c854ecf7b583200ee2e1ba7fd5a6", "sha256": "04ca1620c6e13136521ef7615fbc7ce390295a9a6049b0879b6e4fd706091471"}, "downloads": -1, "filename": "clyngor-0.3.30-py3-none-any.whl", "has_sig": false, "md5_digest": "9202c854ecf7b583200ee2e1ba7fd5a6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 46815, "upload_time": "2020-02-27T16:09:02", "upload_time_iso_8601": "2020-02-27T16:09:02.034834Z", "url": "https://files.pythonhosted.org/packages/29/08/bdcd2ec462bf263d6b49f6178221e617e11616338b767bc0302ecec09a18/clyngor-0.3.30-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e3e43e7da217aa9c47df8bfbf7ee6509", "sha256": "bca099abe4f97ad5f4b9270721b6047737414b14e5c50c1d4f97a2339e1b8cda"}, "downloads": -1, "filename": "clyngor-0.3.30.tar.gz", "has_sig": false, "md5_digest": "e3e43e7da217aa9c47df8bfbf7ee6509", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 46561, "upload_time": "2020-02-27T16:09:04", "upload_time_iso_8601": "2020-02-27T16:09:04.550860Z", "url": "https://files.pythonhosted.org/packages/bd/10/e2ec0de4c3aab51975105247f522519ed83f2b6ec4abaa7fd0e7a5033362/clyngor-0.3.30.tar.gz", "yanked": false}], "0.3.31": [{"comment_text": "", "digests": {"md5": "90733b4afcefdb369505d32fe3a7cac5", "sha256": "1efae9473be4b2aae682bb78d6670a89b993d4194ab483bcc564e0e2d52cbebe"}, "downloads": -1, "filename": "clyngor-0.3.31-py3-none-any.whl", "has_sig": false, "md5_digest": "90733b4afcefdb369505d32fe3a7cac5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 59151, "upload_time": "2020-04-16T17:57:38", "upload_time_iso_8601": "2020-04-16T17:57:38.055796Z", "url": "https://files.pythonhosted.org/packages/c9/aa/4f007a447adb6490a9bc4b5477aec6b4aa73502e4e765a148617451481e4/clyngor-0.3.31-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1bf9c70c4dcbc9d724a6a2e8409f1e94", "sha256": "6d454af5ab0612f0da22f0734030f88bb52de99415458b3b92fc88029135c8bf"}, "downloads": -1, "filename": "clyngor-0.3.31.tar.gz", "has_sig": false, "md5_digest": "1bf9c70c4dcbc9d724a6a2e8409f1e94", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 58624, "upload_time": "2020-04-16T17:57:40", "upload_time_iso_8601": "2020-04-16T17:57:40.864617Z", "url": "https://files.pythonhosted.org/packages/ff/3f/05010671d1898a1be0093aaaeeb6fac6f31ae2e397f8e0281a7205b41112/clyngor-0.3.31.tar.gz", "yanked": false}], "0.3.4": [{"comment_text": "", "digests": {"md5": "ea5afa41a42f51ee4c314a0f4dedd049", "sha256": "a32af48e1326fc6f537d7cda9fc389e24630c284f63021e94bd60eb1b2ccd036"}, "downloads": -1, "filename": "clyngor-0.3.4.tar.gz", "has_sig": false, "md5_digest": "ea5afa41a42f51ee4c314a0f4dedd049", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25128, "upload_time": "2018-06-22T13:22:19", "upload_time_iso_8601": "2018-06-22T13:22:19.680354Z", "url": "https://files.pythonhosted.org/packages/43/3e/fff31c17aef05a94d0f7f5f9db9ef8ea634a2d8c4dceb25107f4d6072999/clyngor-0.3.4.tar.gz", "yanked": false}], "0.3.5": [{"comment_text": "", "digests": {"md5": "540a2ecbf2560a15d91c682198031e6f", "sha256": "b831462d7574b2ccf9bf4635ec1fee36fd575616e5b9dee5c9aebdf5789e1676"}, "downloads": -1, "filename": "clyngor-0.3.5.tar.gz", "has_sig": false, "md5_digest": "540a2ecbf2560a15d91c682198031e6f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25277, "upload_time": "2018-06-26T11:52:31", "upload_time_iso_8601": "2018-06-26T11:52:31.279721Z", "url": "https://files.pythonhosted.org/packages/0c/43/8a864c9bbd9cf49148544ae08c960a0f50f073ba8bab3fd431d1166ad527/clyngor-0.3.5.tar.gz", "yanked": false}], "0.3.6": [{"comment_text": "", "digests": {"md5": "5ba44ab59c0be22b4b5c9f42a6d62f14", "sha256": "d45d734ab99e3ffa7d19ff5c78a9f598820d62e53075ca943829896c77f003ac"}, "downloads": -1, "filename": "clyngor-0.3.6.tar.gz", "has_sig": false, "md5_digest": "5ba44ab59c0be22b4b5c9f42a6d62f14", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25323, "upload_time": "2018-06-26T14:31:06", "upload_time_iso_8601": "2018-06-26T14:31:06.050079Z", "url": "https://files.pythonhosted.org/packages/91/b3/086c1fe82184a6127c5f1ec5d9645d5b8e66afe178caf209640a0048ec3c/clyngor-0.3.6.tar.gz", "yanked": false}], "0.3.7": [{"comment_text": "", "digests": {"md5": "29c812e48645437c84c52a1505d8c6a7", "sha256": "59cb8e6032df83c84a86af21763ff9cea12f7166a0aeed0ba81694bb660bb52c"}, "downloads": -1, "filename": "clyngor-0.3.7.tar.gz", "has_sig": false, "md5_digest": "29c812e48645437c84c52a1505d8c6a7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25534, "upload_time": "2018-06-26T15:16:03", "upload_time_iso_8601": "2018-06-26T15:16:03.723986Z", "url": "https://files.pythonhosted.org/packages/d7/e9/f63fea0cd8f3031845b34c28924215755c7b3a80fdf4965e8cdf677fbff1/clyngor-0.3.7.tar.gz", "yanked": false}], "0.3.8": [{"comment_text": "", "digests": {"md5": "1c9e5b4bc2555e128fbaa7d53cbc600e", "sha256": "055566b7ccbc3190240c77908ee304799487cab82bb0b75b95ff78e9a7780c29"}, "downloads": -1, "filename": "clyngor-0.3.8-py3-none-any.whl", "has_sig": false, "md5_digest": "1c9e5b4bc2555e128fbaa7d53cbc600e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 32483, "upload_time": "2018-09-24T13:44:33", "upload_time_iso_8601": "2018-09-24T13:44:33.684935Z", "url": "https://files.pythonhosted.org/packages/db/7b/937f5a92ccb2b3942867ee066746c83a6b1420cd7a6842d2e8db48ddfa14/clyngor-0.3.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8fac8a02dc9c938d381e6ad11eb8d530", "sha256": "772260372865fc59ae12f4d20016de72709e06b777b9919440599a2bbe2fa76b"}, "downloads": -1, "filename": "clyngor-0.3.8.tar.gz", "has_sig": false, "md5_digest": "8fac8a02dc9c938d381e6ad11eb8d530", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26098, "upload_time": "2018-09-24T13:44:35", "upload_time_iso_8601": "2018-09-24T13:44:35.478968Z", "url": "https://files.pythonhosted.org/packages/01/f7/d3a1d6307e9eae476398d8c12541eee4cb8f30c597a994bb8b419ee09408/clyngor-0.3.8.tar.gz", "yanked": false}], "0.3.9": [{"comment_text": "", "digests": {"md5": "b283dd497ef84f78534f376ee8004f25", "sha256": "9ecf085a3cb8774c29bd8bf9ab48c62a10832027cf9849ea6fbe64a3a9e9011a"}, "downloads": -1, "filename": "clyngor-0.3.9-py3-none-any.whl", "has_sig": false, "md5_digest": "b283dd497ef84f78534f376ee8004f25", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 32484, "upload_time": "2018-10-02T14:03:01", "upload_time_iso_8601": "2018-10-02T14:03:01.778961Z", "url": "https://files.pythonhosted.org/packages/dc/45/4ba4840c79b94cc0f883717b5472470e5d10a85146d53b8d9d7b8980bf12/clyngor-0.3.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d68c4b29c3ba4e956c74fe36e01bf437", "sha256": "9ceae092e1151a37ba7b97d81a793bc81f9b56515690ea959491c239cf6f7dfe"}, "downloads": -1, "filename": "clyngor-0.3.9.tar.gz", "has_sig": false, "md5_digest": "d68c4b29c3ba4e956c74fe36e01bf437", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26095, "upload_time": "2018-10-02T14:03:03", "upload_time_iso_8601": "2018-10-02T14:03:03.281850Z", "url": "https://files.pythonhosted.org/packages/09/91/2150da848a50864f481b7f9ae1f5b3bf5166c75282e1b691db390d02b392/clyngor-0.3.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "90733b4afcefdb369505d32fe3a7cac5", "sha256": "1efae9473be4b2aae682bb78d6670a89b993d4194ab483bcc564e0e2d52cbebe"}, "downloads": -1, "filename": "clyngor-0.3.31-py3-none-any.whl", "has_sig": false, "md5_digest": "90733b4afcefdb369505d32fe3a7cac5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 59151, "upload_time": "2020-04-16T17:57:38", "upload_time_iso_8601": "2020-04-16T17:57:38.055796Z", "url": "https://files.pythonhosted.org/packages/c9/aa/4f007a447adb6490a9bc4b5477aec6b4aa73502e4e765a148617451481e4/clyngor-0.3.31-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1bf9c70c4dcbc9d724a6a2e8409f1e94", "sha256": "6d454af5ab0612f0da22f0734030f88bb52de99415458b3b92fc88029135c8bf"}, "downloads": -1, "filename": "clyngor-0.3.31.tar.gz", "has_sig": false, "md5_digest": "1bf9c70c4dcbc9d724a6a2e8409f1e94", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 58624, "upload_time": "2020-04-16T17:57:40", "upload_time_iso_8601": "2020-04-16T17:57:40.864617Z", "url": "https://files.pythonhosted.org/packages/ff/3f/05010671d1898a1be0093aaaeeb6fac6f31ae2e397f8e0281a7205b41112/clyngor-0.3.31.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:18:38 2020"}