{"info": {"author": "Stefan Braun", "author_email": "sbraun@datacomm.ch", "bugtrack_url": null, "classifiers": [], "description": "# visitoolkit_eventsystem\nminimalistic event system  \n\n**Installation via pip**   \nhttps://pypi.org/project/visitoolkit-eventsystem   \n*(runs on Python 3)*  \n\n\n## description\nRegistered handlers (a bag of handlers) getting called when event gets fired  \nusing ideas from \"axel events\" https://github.com/axel-events/axel  \nand \"event system\" from http://www.valuedlessons.com/2008/04/events-in-python.html\n\n## usage\n```python\nfrom visitoolkit_eventsystem import eventsystem\n\n# handlers are callback functions in your code,\n# when firing an event visitoolkit_eventsystem will call them with the given argument(s)\ndef cb1(event_id, *arg, **args):\n    if event_id > 0:\n        # handle event...\n        return True\n    else:\n        return False\n\n# Default is synchronous execution of handlers (blocking main thread, collecting all results)\n# sync_mode=False means asynchronous execution of handlers (one background thread calls all handlers) \n# =>Details about flag \"exc_info\"(default is True): https://docs.python.org/3/library/sys.html#sys.exc_info\n# =>Flag \"traceback\" (default is False) controls verbosity of error_info when an exception occurred\nes = eventsystem.EventSystem(sync_mode=True)\n\n# adding or removing handlers in list-like syntax\nes += cb1\n\n#The execution result is returned as a list containing all results per handler having this structure:\n#  exec_result = [\n#      (True, result, handler),        # on success\n#      (False, error_info, handler),   # on error\n#      (None, None, handler), ...      # asynchronous execution\n#  ]\n\n# firing event\nresult = es(42)\n```\n\nIncreasing logging level for bughunting:\n```python\nimport logging\nlogging.getLogger('visitoolkit_eventsystem').setLevel(logging.DEBUG)\n```\n\n## background information\n**visitoolkit_eventsystem** is used in **visitoolkit_connector** as core part of **visitoolkit**. \n\n**visitoolkit** is written for the proprietary Building and Process Management System\n'ProMoS NT' (c) MST Systemtechnik AG'  \n(also known as 'Saia Visi.Plus' (c) Saia-Burgess Controls AG) \n\nIntention:  \nSupport creator of visualisation projects...  \nAdd efficiency...  \nReduce manual error-prone processes...  \nAdd missing features...\n\nDisclaimer: Use 'visitoolkit' at your own risk!", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/stefanbraun-private/visitoolkit_eventsystem", "keywords": "", "license": "GPL-3.0", "maintainer": "", "maintainer_email": "", "name": "visitoolkit-eventsystem", "package_url": "https://pypi.org/project/visitoolkit-eventsystem/", "platform": "", "project_url": "https://pypi.org/project/visitoolkit-eventsystem/", "project_urls": {"Homepage": "https://github.com/stefanbraun-private/visitoolkit_eventsystem"}, "release_url": "https://pypi.org/project/visitoolkit-eventsystem/0.1.5/", "requires_dist": null, "requires_python": "", "summary": "minimalistic event system (a bag of handlers)", "version": "0.1.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>visitoolkit_eventsystem</h1>\n<p>minimalistic event system</p>\n<p><strong>Installation via pip</strong><br>\n<a href=\"https://pypi.org/project/visitoolkit-eventsystem\" rel=\"nofollow\">https://pypi.org/project/visitoolkit-eventsystem</a><br>\n<em>(runs on Python 3)</em></p>\n<h2>description</h2>\n<p>Registered handlers (a bag of handlers) getting called when event gets fired<br>\nusing ideas from \"axel events\" <a href=\"https://github.com/axel-events/axel\" rel=\"nofollow\">https://github.com/axel-events/axel</a><br>\nand \"event system\" from <a href=\"http://www.valuedlessons.com/2008/04/events-in-python.html\" rel=\"nofollow\">http://www.valuedlessons.com/2008/04/events-in-python.html</a></p>\n<h2>usage</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">visitoolkit_eventsystem</span> <span class=\"kn\">import</span> <span class=\"n\">eventsystem</span>\n\n<span class=\"c1\"># handlers are callback functions in your code,</span>\n<span class=\"c1\"># when firing an event visitoolkit_eventsystem will call them with the given argument(s)</span>\n<span class=\"k\">def</span> <span class=\"nf\">cb1</span><span class=\"p\">(</span><span class=\"n\">event_id</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">arg</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">args</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">event_id</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"c1\"># handle event...</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n<span class=\"c1\"># Default is synchronous execution of handlers (blocking main thread, collecting all results)</span>\n<span class=\"c1\"># sync_mode=False means asynchronous execution of handlers (one background thread calls all handlers) </span>\n<span class=\"c1\"># =&gt;Details about flag \"exc_info\"(default is True): https://docs.python.org/3/library/sys.html#sys.exc_info</span>\n<span class=\"c1\"># =&gt;Flag \"traceback\" (default is False) controls verbosity of error_info when an exception occurred</span>\n<span class=\"n\">es</span> <span class=\"o\">=</span> <span class=\"n\">eventsystem</span><span class=\"o\">.</span><span class=\"n\">EventSystem</span><span class=\"p\">(</span><span class=\"n\">sync_mode</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># adding or removing handlers in list-like syntax</span>\n<span class=\"n\">es</span> <span class=\"o\">+=</span> <span class=\"n\">cb1</span>\n\n<span class=\"c1\">#The execution result is returned as a list containing all results per handler having this structure:</span>\n<span class=\"c1\">#  exec_result = [</span>\n<span class=\"c1\">#      (True, result, handler),        # on success</span>\n<span class=\"c1\">#      (False, error_info, handler),   # on error</span>\n<span class=\"c1\">#      (None, None, handler), ...      # asynchronous execution</span>\n<span class=\"c1\">#  ]</span>\n\n<span class=\"c1\"># firing event</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">es</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">)</span>\n</pre>\n<p>Increasing logging level for bughunting:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"s1\">'visitoolkit_eventsystem'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">setLevel</span><span class=\"p\">(</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">)</span>\n</pre>\n<h2>background information</h2>\n<p><strong>visitoolkit_eventsystem</strong> is used in <strong>visitoolkit_connector</strong> as core part of <strong>visitoolkit</strong>.</p>\n<p><strong>visitoolkit</strong> is written for the proprietary Building and Process Management System\n'ProMoS NT' (c) MST Systemtechnik AG'<br>\n(also known as 'Saia Visi.Plus' (c) Saia-Burgess Controls AG)</p>\n<p>Intention:<br>\nSupport creator of visualisation projects...<br>\nAdd efficiency...<br>\nReduce manual error-prone processes...<br>\nAdd missing features...</p>\n<p>Disclaimer: Use 'visitoolkit' at your own risk!</p>\n\n          </div>"}, "last_serial": 4297235, "releases": {"0.1.4": [{"comment_text": "", "digests": {"md5": "c2cc8a8794d7c6d9ff1cd78d73808537", "sha256": "c47519f00d811eb94e7867b3a9cf1a47dc8a8c0ff53d359587f010c54c93148b"}, "downloads": -1, "filename": "visitoolkit_eventsystem-0.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "c2cc8a8794d7c6d9ff1cd78d73808537", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7027, "upload_time": "2018-09-17T17:48:37", "upload_time_iso_8601": "2018-09-17T17:48:37.132531Z", "url": "https://files.pythonhosted.org/packages/4e/46/f9c8d4ab42a6280a773f24bfe9a2e7944508d7ecf35f3c967b0a547a79cc/visitoolkit_eventsystem-0.1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b127b4d0cbb5be18f4e6b55677eb5cb4", "sha256": "45018be488b28aba04b7f56efd5e9355e8323d0f13552aa1dd1219e715c660ea"}, "downloads": -1, "filename": "visitoolkit-eventsystem-0.1.4.tar.gz", "has_sig": false, "md5_digest": "b127b4d0cbb5be18f4e6b55677eb5cb4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22366, "upload_time": "2018-09-17T17:48:38", "upload_time_iso_8601": "2018-09-17T17:48:38.622727Z", "url": "https://files.pythonhosted.org/packages/3d/da/038c4cd644bb6ebf883ff22dd82146e79b12f11a4ab9b79b7f95960a7464/visitoolkit-eventsystem-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "bee6f48f03d960c97390c28fe4c02301", "sha256": "bcf8d7f038ab418a539ffb8d50bfc1c9661195c450b6eb11f584cc3d7a91e7c4"}, "downloads": -1, "filename": "visitoolkit_eventsystem-0.1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "bee6f48f03d960c97390c28fe4c02301", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7094, "upload_time": "2018-09-21T17:50:23", "upload_time_iso_8601": "2018-09-21T17:50:23.086067Z", "url": "https://files.pythonhosted.org/packages/95/50/2961f8e80c22613db2cadfbe47da9e85871532753ce4ca00d874019893a5/visitoolkit_eventsystem-0.1.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8019fd6f36b99615ce1916e5c5215eeb", "sha256": "f3842a32cfc6e42c99f3bc5723e30b1ac605e462a2d94ebcd3582108d39f017c"}, "downloads": -1, "filename": "visitoolkit-eventsystem-0.1.5.tar.gz", "has_sig": false, "md5_digest": "8019fd6f36b99615ce1916e5c5215eeb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22568, "upload_time": "2018-09-21T17:49:23", "upload_time_iso_8601": "2018-09-21T17:49:23.779574Z", "url": "https://files.pythonhosted.org/packages/8a/40/2b126caa647c5f5e5397a3e84410d9596c3c1ca801987f735c2adb9bdb25/visitoolkit-eventsystem-0.1.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bee6f48f03d960c97390c28fe4c02301", "sha256": "bcf8d7f038ab418a539ffb8d50bfc1c9661195c450b6eb11f584cc3d7a91e7c4"}, "downloads": -1, "filename": "visitoolkit_eventsystem-0.1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "bee6f48f03d960c97390c28fe4c02301", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7094, "upload_time": "2018-09-21T17:50:23", "upload_time_iso_8601": "2018-09-21T17:50:23.086067Z", "url": "https://files.pythonhosted.org/packages/95/50/2961f8e80c22613db2cadfbe47da9e85871532753ce4ca00d874019893a5/visitoolkit_eventsystem-0.1.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8019fd6f36b99615ce1916e5c5215eeb", "sha256": "f3842a32cfc6e42c99f3bc5723e30b1ac605e462a2d94ebcd3582108d39f017c"}, "downloads": -1, "filename": "visitoolkit-eventsystem-0.1.5.tar.gz", "has_sig": false, "md5_digest": "8019fd6f36b99615ce1916e5c5215eeb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22568, "upload_time": "2018-09-21T17:49:23", "upload_time_iso_8601": "2018-09-21T17:49:23.779574Z", "url": "https://files.pythonhosted.org/packages/8a/40/2b126caa647c5f5e5397a3e84410d9596c3c1ca801987f735c2adb9bdb25/visitoolkit-eventsystem-0.1.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:35:16 2020"}