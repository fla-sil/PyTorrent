{"info": {"author": "Andrew Stolberg", "author_email": "andrewstolberg@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Other Environment", "Intended Audience :: Developers", "Intended Audience :: Education", "License :: OSI Approved :: GNU General Public License v2 or later (GPLv2+)", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.6", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: System :: Filesystems"], "description": "Simple Virtual File System v2 for Python 2\r\n==========================================\r\n\r\nOverview\r\n--------\r\n\r\nSVFS allows to create virtual filesystem inside file on real filesystem.\r\nIt can be used to store multiple files inside single file (with directory structure).\r\nUnlike archives, SVFS allows to modify files in-place.\r\nSVFS files use file-like interface, so they can be used (pretty much) like regular Python file objects.\r\nFinally, it's implemented in pure python and doesn't use any 3rd party modules, so it should be very portable.\r\nTests show write speed to be around 10-12 MB/s and read speed to be around 26-28 MB/s.\r\n\r\nExample\r\n-------\r\n\r\nFollowing code creates SVFS, opens file in it, writes string and reads it back::\r\n\r\n    from SVFS import SVFS #Import SVFS class\r\n    \r\n    s = SVFS() #Create instance of SVFS class\r\n    s.CreateSVFS('test.svfs','testvolume',100,100,100) #Create SVFS with 100 inodes and 100 blocks of 100 bytes.\r\n    s.OpenSVFS('test.svfs') #Open created SVFS\r\n    with s.open('testfile','w') as file: #Create and open new file for writing in SVFS.\r\n     file.write('write test') #Write string into file\r\n    t = s.open('testfile','r') #Open same file for reading\r\n    print t.read() #Read entire file and print data\r\n    t.close() #Close file\r\n    s.CloseSVFS() #Close SVFS\r\n\r\nThat code outputs::\r\n\r\n    write test\r\n\r\nWhich means it works correctly.\r\n\r\nChangelog\r\n---------\r\n\r\nVersion 2.0.0:\r\n\r\nInitial release\r\n\r\nContact\r\n-------\r\n\r\nThis module is maintained by Andrew Stolberg <andrewstolberg@gmail.com>. If you have any questions or want to help, email me.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://code.google.com/p/svfs/", "keywords": "filesystem,archiving,file-system", "license": "GPLv2+", "maintainer": "Andrew Stolberg", "maintainer_email": "", "name": "SVFS", "package_url": "https://pypi.org/project/SVFS/", "platform": "Cross-platform", "project_url": "https://pypi.org/project/SVFS/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://code.google.com/p/svfs/"}, "release_url": "https://pypi.org/project/SVFS/2.0.0/", "requires_dist": null, "requires_python": null, "summary": "Multi-purpose virtual file system inside single file", "version": "2.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"overview\">\n<h2>Overview</h2>\n<p>SVFS allows to create virtual filesystem inside file on real filesystem.\nIt can be used to store multiple files inside single file (with directory structure).\nUnlike archives, SVFS allows to modify files in-place.\nSVFS files use file-like interface, so they can be used (pretty much) like regular Python file objects.\nFinally, it\u2019s implemented in pure python and doesn\u2019t use any 3rd party modules, so it should be very portable.\nTests show write speed to be around 10-12 MB/s and read speed to be around 26-28 MB/s.</p>\n</div>\n<div id=\"example\">\n<h2>Example</h2>\n<p>Following code creates SVFS, opens file in it, writes string and reads it back:</p>\n<pre>from SVFS import SVFS #Import SVFS class\n\ns = SVFS() #Create instance of SVFS class\ns.CreateSVFS('test.svfs','testvolume',100,100,100) #Create SVFS with 100 inodes and 100 blocks of 100 bytes.\ns.OpenSVFS('test.svfs') #Open created SVFS\nwith s.open('testfile','w') as file: #Create and open new file for writing in SVFS.\n file.write('write test') #Write string into file\nt = s.open('testfile','r') #Open same file for reading\nprint t.read() #Read entire file and print data\nt.close() #Close file\ns.CloseSVFS() #Close SVFS\n</pre>\n<p>That code outputs:</p>\n<pre>write test\n</pre>\n<p>Which means it works correctly.</p>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<p>Version 2.0.0:</p>\n<p>Initial release</p>\n</div>\n<div id=\"contact\">\n<h2>Contact</h2>\n<p>This module is maintained by Andrew Stolberg &lt;<a href=\"mailto:andrewstolberg%40gmail.com\">andrewstolberg<span>@</span>gmail<span>.</span>com</a>&gt;. If you have any questions or want to help, email me.</p>\n</div>\n\n          </div>"}, "last_serial": 785594, "releases": {"2.0.0": [{"comment_text": "", "digests": {"md5": "eb0f2335582f5a5cce7d4961b243f735", "sha256": "cd1ab674730a7b6f56281e1b94e094a7e091baeb43546cdb9e951085a6153cae"}, "downloads": -1, "filename": "SVFS-2.0.0.tar.gz", "has_sig": false, "md5_digest": "eb0f2335582f5a5cce7d4961b243f735", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13118, "upload_time": "2012-07-19T10:54:48", "upload_time_iso_8601": "2012-07-19T10:54:48.479037Z", "url": "https://files.pythonhosted.org/packages/ec/bf/165bdd2fe89754c1cdcd05214edaaa25b9cb1935cbfeb4ab17912fde457d/SVFS-2.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "eb0f2335582f5a5cce7d4961b243f735", "sha256": "cd1ab674730a7b6f56281e1b94e094a7e091baeb43546cdb9e951085a6153cae"}, "downloads": -1, "filename": "SVFS-2.0.0.tar.gz", "has_sig": false, "md5_digest": "eb0f2335582f5a5cce7d4961b243f735", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13118, "upload_time": "2012-07-19T10:54:48", "upload_time_iso_8601": "2012-07-19T10:54:48.479037Z", "url": "https://files.pythonhosted.org/packages/ec/bf/165bdd2fe89754c1cdcd05214edaaa25b9cb1935cbfeb4ab17912fde457d/SVFS-2.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:59:52 2020"}