{"info": {"author": "limodou", "author_email": "limodou@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Database :: Front-Ends"], "description": "Alembic is a new database migrations tool, written by the author\nof `SQLAlchemy <http://www.sqlalchemy.org>`_.  A migrations tool\noffers the following functionality:\n\n* Can emit ALTER statements to a database in order to change\n  the structure of tables and other constructs\n* Provides a system whereby \"migration scripts\" may be constructed;\n  each script indicates a particular series of steps that can \"upgrade\" a\n  target database to a new version, and optionally a series of steps that can\n  \"downgrade\" similarly, doing the same steps in reverse.\n* Allows the scripts to execute in some sequential manner.\n\nThe goals of Alembic are:\n\n* Very open ended and transparent configuration and operation.   A new\n  Alembic environment is generated from a set of templates which is selected\n  among a set of options when setup first occurs. The templates then deposit a\n  series of scripts that define fully how database connectivity is established\n  and how migration scripts are invoked; the migration scripts themselves are\n  generated from a template within that series of scripts. The scripts can\n  then be further customized to define exactly how databases will be\n  interacted with and what structure new migration files should take.\n* Full support for transactional DDL.   The default scripts ensure that all\n  migrations occur within a transaction - for those databases which support\n  this (Postgresql, Microsoft SQL Server), migrations can be tested with no\n  need to manually undo changes upon failure.\n* Minimalist script construction.  Basic operations like renaming\n  tables/columns, adding/removing columns, changing column attributes can be\n  performed through one line commands like alter_column(), rename_table(),\n  add_constraint(). There is no need to recreate full SQLAlchemy Table\n  structures for simple operations like these - the functions themselves\n  generate minimalist schema structures behind the scenes to achieve the given\n  DDL sequence.\n* \"auto generation\" of migrations. While real world migrations are far more\n  complex than what can be automatically determined, Alembic can still\n  eliminate the initial grunt work in generating new migration directives\n  from an altered schema.  The ``--autogenerate`` feature will inspect the\n  current status of a database using SQLAlchemy's schema inspection\n  capabilities, compare it to the current state of the database model as\n  specified in Python, and generate a series of \"candidate\" migrations,\n  rendering them into a new migration script as Python directives. The\n  developer then edits the new file, adding additional directives and data\n  migrations as needed, to produce a finished migration. Table and column\n  level changes can be detected, with constraints and indexes to follow as\n  well.\n* Full support for migrations generated as SQL scripts.   Those of us who\n  work in corporate environments know that direct access to DDL commands on a\n  production database is a rare privilege, and DBAs want textual SQL scripts.\n  Alembic's usage model and commands are oriented towards being able to run a\n  series of migrations into a textual output file as easily as it runs them\n  directly to a database. Care must be taken in this mode to not invoke other\n  operations that rely upon in-memory SELECTs of rows - Alembic tries to\n  provide helper constructs like bulk_insert() to help with data-oriented\n  operations that are compatible with script-based DDL.\n* Non-linear versioning.   Scripts are given UUID identifiers similarly\n  to a DVCS, and the linkage of one script to the next is achieved via markers\n  within the scripts themselves. Through this open-ended mechanism, branches\n  containing other migration scripts can be merged - the linkages can be\n  manually edited within the script files to create the new sequence.\n* Provide a library of ALTER constructs that can be used by any SQLAlchemy\n  application. The DDL constructs build upon SQLAlchemy's own DDLElement base\n  and can be used standalone by any application or script.\n* Don't break our necks over SQLite's inability to ALTER things.   SQLite\n  has almost no support for table or column alteration, and this is likely\n  intentional.   Alembic's design\n  is kept simple by not contorting its core API around these limitations,\n  understanding that SQLite is simply not intended to support schema\n  changes.   While Alembic's architecture can support SQLite's workarounds, and\n  we will support these features provided someone takes the initiative\n  to implement and test, until the SQLite developers decide\n  to provide a fully working version of ALTER, it's still vastly preferable\n  to use Alembic, or any migrations tool, with databases that\n  are designed to work under the assumption of in-place schema migrations\n  taking place.\n\nDocumentation and status of Alembic is at http://readthedocs.org/docs/alembic/.", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/limodou/uliweb-alembic", "keywords": "SQLAlchemy migrations", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "uliweb-alembic", "package_url": "https://pypi.org/project/uliweb-alembic/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/uliweb-alembic/", "project_urls": {"Homepage": "https://github.com/limodou/uliweb-alembic"}, "release_url": "https://pypi.org/project/uliweb-alembic/0.6.9/", "requires_dist": null, "requires_python": "", "summary": "A port of alembic for uliweb framework.", "version": "0.6.9", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Alembic is a new database migrations tool, written by the author\nof <a href=\"http://www.sqlalchemy.org\" rel=\"nofollow\">SQLAlchemy</a>.  A migrations tool\noffers the following functionality:</p>\n<ul>\n<li>Can emit ALTER statements to a database in order to change\nthe structure of tables and other constructs</li>\n<li>Provides a system whereby \u201cmigration scripts\u201d may be constructed;\neach script indicates a particular series of steps that can \u201cupgrade\u201d a\ntarget database to a new version, and optionally a series of steps that can\n\u201cdowngrade\u201d similarly, doing the same steps in reverse.</li>\n<li>Allows the scripts to execute in some sequential manner.</li>\n</ul>\n<p>The goals of Alembic are:</p>\n<ul>\n<li>Very open ended and transparent configuration and operation.   A new\nAlembic environment is generated from a set of templates which is selected\namong a set of options when setup first occurs. The templates then deposit a\nseries of scripts that define fully how database connectivity is established\nand how migration scripts are invoked; the migration scripts themselves are\ngenerated from a template within that series of scripts. The scripts can\nthen be further customized to define exactly how databases will be\ninteracted with and what structure new migration files should take.</li>\n<li>Full support for transactional DDL.   The default scripts ensure that all\nmigrations occur within a transaction - for those databases which support\nthis (Postgresql, Microsoft SQL Server), migrations can be tested with no\nneed to manually undo changes upon failure.</li>\n<li>Minimalist script construction.  Basic operations like renaming\ntables/columns, adding/removing columns, changing column attributes can be\nperformed through one line commands like alter_column(), rename_table(),\nadd_constraint(). There is no need to recreate full SQLAlchemy Table\nstructures for simple operations like these - the functions themselves\ngenerate minimalist schema structures behind the scenes to achieve the given\nDDL sequence.</li>\n<li>\u201cauto generation\u201d of migrations. While real world migrations are far more\ncomplex than what can be automatically determined, Alembic can still\neliminate the initial grunt work in generating new migration directives\nfrom an altered schema.  The <tt><span class=\"pre\">--autogenerate</span></tt> feature will inspect the\ncurrent status of a database using SQLAlchemy\u2019s schema inspection\ncapabilities, compare it to the current state of the database model as\nspecified in Python, and generate a series of \u201ccandidate\u201d migrations,\nrendering them into a new migration script as Python directives. The\ndeveloper then edits the new file, adding additional directives and data\nmigrations as needed, to produce a finished migration. Table and column\nlevel changes can be detected, with constraints and indexes to follow as\nwell.</li>\n<li>Full support for migrations generated as SQL scripts.   Those of us who\nwork in corporate environments know that direct access to DDL commands on a\nproduction database is a rare privilege, and DBAs want textual SQL scripts.\nAlembic\u2019s usage model and commands are oriented towards being able to run a\nseries of migrations into a textual output file as easily as it runs them\ndirectly to a database. Care must be taken in this mode to not invoke other\noperations that rely upon in-memory SELECTs of rows - Alembic tries to\nprovide helper constructs like bulk_insert() to help with data-oriented\noperations that are compatible with script-based DDL.</li>\n<li>Non-linear versioning.   Scripts are given UUID identifiers similarly\nto a DVCS, and the linkage of one script to the next is achieved via markers\nwithin the scripts themselves. Through this open-ended mechanism, branches\ncontaining other migration scripts can be merged - the linkages can be\nmanually edited within the script files to create the new sequence.</li>\n<li>Provide a library of ALTER constructs that can be used by any SQLAlchemy\napplication. The DDL constructs build upon SQLAlchemy\u2019s own DDLElement base\nand can be used standalone by any application or script.</li>\n<li>Don\u2019t break our necks over SQLite\u2019s inability to ALTER things.   SQLite\nhas almost no support for table or column alteration, and this is likely\nintentional.   Alembic\u2019s design\nis kept simple by not contorting its core API around these limitations,\nunderstanding that SQLite is simply not intended to support schema\nchanges.   While Alembic\u2019s architecture can support SQLite\u2019s workarounds, and\nwe will support these features provided someone takes the initiative\nto implement and test, until the SQLite developers decide\nto provide a fully working version of ALTER, it\u2019s still vastly preferable\nto use Alembic, or any migrations tool, with databases that\nare designed to work under the assumption of in-place schema migrations\ntaking place.</li>\n</ul>\n<p>Documentation and status of Alembic is at <a href=\"http://readthedocs.org/docs/alembic/\" rel=\"nofollow\">http://readthedocs.org/docs/alembic/</a>.</p>\n\n          </div>"}, "last_serial": 1942993, "releases": {"0.6.5": [{"comment_text": "", "digests": {"md5": "9bf6660cb4cd4c99daa84cc610ec84d0", "sha256": "e53edbb395c615cd8963f99cfa2afb0a136eb41152b58adab5c95ba97c9cc9e9"}, "downloads": -1, "filename": "uliweb-alembic-0.6.5.tar.gz", "has_sig": false, "md5_digest": "9bf6660cb4cd4c99daa84cc610ec84d0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 474499, "upload_time": "2014-05-08T05:11:01", "upload_time_iso_8601": "2014-05-08T05:11:01.080756Z", "url": "https://files.pythonhosted.org/packages/3a/3c/56fd6ebded6f4c47147900bb681ec4997310c2d25001e7892a26235ab607/uliweb-alembic-0.6.5.tar.gz", "yanked": false}], "0.6.7": [{"comment_text": "", "digests": {"md5": "9ce31dc9168628e906e5a9250055df4c", "sha256": "c3e97c9cadcf2dabb57afefa5fa88b2d64d7aa000617918e8f4bb9a5ad3198c1"}, "downloads": -1, "filename": "uliweb-alembic-0.6.7.tar.gz", "has_sig": false, "md5_digest": "9ce31dc9168628e906e5a9250055df4c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 480482, "upload_time": "2014-09-24T08:32:40", "upload_time_iso_8601": "2014-09-24T08:32:40.407245Z", "url": "https://files.pythonhosted.org/packages/27/1a/7917fca688675aed8496d8b353b01d471dbce7916eb8ea630a1296317db2/uliweb-alembic-0.6.7.tar.gz", "yanked": false}], "0.6.9": [{"comment_text": "", "digests": {"md5": "6e39bee42a802debb11b73e2fbaf3682", "sha256": "f81c8570548e4d36d85120838951f8936125d22b34df40d5ad90967441dd9599"}, "downloads": -1, "filename": "uliweb_alembic-0.6.9-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6e39bee42a802debb11b73e2fbaf3682", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 299852, "upload_time": "2016-02-06T12:38:49", "upload_time_iso_8601": "2016-02-06T12:38:49.659207Z", "url": "https://files.pythonhosted.org/packages/ef/31/da67d80b67d067977a0244019995f3d0e90570baac79483855d51f1c069f/uliweb_alembic-0.6.9-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "627640fced47bee4996b808ceb66c41e", "sha256": "f8044301d6252dac2a509d5dcee515255b986d7496e916fbb21632c8a1749ef0"}, "downloads": -1, "filename": "uliweb-alembic-0.6.9.tar.gz", "has_sig": false, "md5_digest": "627640fced47bee4996b808ceb66c41e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 480617, "upload_time": "2016-02-06T12:36:55", "upload_time_iso_8601": "2016-02-06T12:36:55.893854Z", "url": "https://files.pythonhosted.org/packages/a8/e4/4cdee9e8ac5e0d4ed9d190f59eb7f4f359fa0d4244472fa1a3cc31f7edc8/uliweb-alembic-0.6.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6e39bee42a802debb11b73e2fbaf3682", "sha256": "f81c8570548e4d36d85120838951f8936125d22b34df40d5ad90967441dd9599"}, "downloads": -1, "filename": "uliweb_alembic-0.6.9-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6e39bee42a802debb11b73e2fbaf3682", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 299852, "upload_time": "2016-02-06T12:38:49", "upload_time_iso_8601": "2016-02-06T12:38:49.659207Z", "url": "https://files.pythonhosted.org/packages/ef/31/da67d80b67d067977a0244019995f3d0e90570baac79483855d51f1c069f/uliweb_alembic-0.6.9-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "627640fced47bee4996b808ceb66c41e", "sha256": "f8044301d6252dac2a509d5dcee515255b986d7496e916fbb21632c8a1749ef0"}, "downloads": -1, "filename": "uliweb-alembic-0.6.9.tar.gz", "has_sig": false, "md5_digest": "627640fced47bee4996b808ceb66c41e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 480617, "upload_time": "2016-02-06T12:36:55", "upload_time_iso_8601": "2016-02-06T12:36:55.893854Z", "url": "https://files.pythonhosted.org/packages/a8/e4/4cdee9e8ac5e0d4ed9d190f59eb7f4f359fa0d4244472fa1a3cc31f7edc8/uliweb-alembic-0.6.9.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:41:12 2020"}