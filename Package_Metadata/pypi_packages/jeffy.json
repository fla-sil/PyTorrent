{"info": {"author": "Serverless Operations", "author_email": "info@serverless-operations.com", "bugtrack_url": null, "classifiers": ["Development Status :: 1 - Planning", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3"], "description": "Jeffy(Beta)\n=======\n\n# Description\n\nJeffy is Serverless **\"Application\"** Framework for Python, which is\nsuite of Utilities for Lambda functions to make it easy to develop serverless applications.\n\nMainly, focusing on three things.\n\n- Logging: Providing easy to see JSON format logging, auto logging as a decorator for capturing events and responses and errors, configurable to inject additional attributes what you want to see to logs.\n- Decorators: To save time to implement common things for Lambda functions, providing some useful decorators.\n- Tracing: Traceable events within related functions and AWS services with generating and passing `correlation_id`.\n- Environment Variables: You can define configuration for Jeffy via Environment Variables of Lambda.\n\n# TOC\n\n- [Jeffy(Beta)](#jeffy-beta-)\n- [Description](#description)\n- [Install](#install)\n- [Features](#features)\n  * [Logging](#logging)\n    + [Basic Usage](#basic-usage)\n    + [Injecting additional attributes to CloudWatchLogs](#injecting-additional-attributes-to-cloudwatchlogs)\n    + [Auto Logging](#auto-logging)\n  * [Decorators](#decorators)\n    + [json_scheme_validator](#json-scheme-validator)\n    + [api_json_scheme_validator](#api-json-scheme-validator)\n    + [api](#api)\n    + [sqs](#sqs)\n    + [sns](#sns)\n    + [kinesis_stream](#kinesis-stream)\n    + [dynamodb_stream](#dynamodb-stream)\n    + [s3](#s3)\n    + [schedule](#schedule)\n  * [Tracing](#tracing)\n    + [Kinesis Clinent](#kinesis-clinent)\n    + [SNS Client](#sns-client)\n    + [SQS Client](#sqs-client)\n    + [S3 Client](#s3-client)\n    + [Environment Variables](#environment-variables)\n    + [Example serverless.yml of Serverless Framework using supported environment variables](#example-serverlessyml-of-serverless-framework-using-supported-environment-variables)\n- [Requirements](#requirements)\n  * [Development](#development)\n  * [Authors](#authors)\n  * [Credits](#credits)\n  * [License](#license)\n\n# Install\n\n```sh\n$ pip install jeffy\n```\n\n# Features\n## Logging\n### Basic Usage\nJeffy logger automatically inject some Lambda contexts to CloudWatchLogs.\n```python\nfrom jeffy.framework import setup\napp = setup()\n\ndef handler(event, context):\n    app.logger.info({\"foo\":\"bar\"})\n```\n\nOutput in CloudWatchLogs\n```json\n{\n   \"message\": {\n       \"foo\":\"bar\",\"item\":\"aa\"\n    },\n   \"aws_region\":\"us-east-1\",\n   \"function_name\":\"jeffy-dev-hello\",\n   \"function_version\":\"$LATEST\",\n   \"function_memory_size\":\"1024\",\n   \"log_group_name\":\"/aws/lambda/jeffy-dev-hello\",\n   \"log_stream_name\":\"2020/01/21/[$LATEST]d7729c0ea59a4939abb51180cda859bf\",\n   \"correlation_id\":\"f79759e3-0e37-4137-b536-ee9a94cd4f52\"\n}\n```\n\n### Injecting additional attributes to CloudWatchLogs\nYou can inject some additional attributes what you want to output with using `setup` method.\n\n```python\nfrom jeffy.framework import setup\napp = setup()\n\napp.logger.setup({\n   \"username\":\"user1\",\n   \"email\":\"user1@example.com\"\n})\n\ndef handler(event, context):\n    app.logger.info({\"foo\":\"bar\"})\n```\n\nOutput in CloudWatchLogs\n```json\n{\n   \"message\": {\n       \"foo\":\"bar\",\"item\":\"aa\"\n    },\n   \"username\":\"user1\",\n   \"email\":\"user1@example.com\",\n   \"aws_region\":\"us-east-1\",\n   \"function_name\":\"jeffy-dev-hello\",\n   \"function_version\":\"$LATEST\",\n   \"function_memory_size\":\"1024\",\n   \"log_group_name\":\"/aws/lambda/jeffy-dev-hello\",\n   \"log_stream_name\":\"2020/01/21/[$LATEST]d7729c0ea59a4939abb51180cda859bf\",\n   \"correlation_id\":\"f79759e3-0e37-4137-b536-ee9a94cd4f52\"\n}\n```\n\n### Auto Logging\n`auto_logging` decorator allows you to output `event`, `response` and `stacktrace` when you face Exceptions\n\n```python\nfrom jeffy.framework import setup\napp = setup()\n\napp.logger.setup({\n   \"username\":\"user1\",\n   \"email\":\"user1@example.com\"\n})\n\n@app.decorator.auto_logging\ndef handler(event, context):\n    ...\n```\n\nError output with auto_logging\n\n```json\n{\n   \"error_message\": \"JSONDecodeError('Expecting value: line 1 column 1 (char 0)')\", \n   \"stack_trace\":\"Traceback (most recent call last):\n  File '/var/task/jeffy/decorators.py', line 41, in wrapper\n    raise e\n  File '/var/task/jeffy/decorators.py', line 36, in wrapper\n    result = func(event, context)\n  File '/var/task/handler.py', line 8, in hello\n    json.loads('s')\n  File '/var/lang/lib/python3.8/json/__init__.py', line 357, in loads\n    return _default_decoder.decode(s)\n  File '/var/lang/lib/python3.8/json/decoder.py', line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File '/var/lang/lib/python3.8/json/decoder.py', line 355, in raw_decode\n    raise JSONDecodeError('Expecting value', s, err.value) from None\",\n   \"function_name\":\"jeffy-dev-hello\",\n   \"function_version\":\"$LATEST\",\n   \"function_memory_size\":\"1024\",\n   \"log_group_name\":\"/aws/lambda/jeffy-dev-hello\",\n   \"log_stream_name\":\"2020/01/21/[$LATEST]90e1f70f6e774e07b681e704646feec0\"\n}\n\n```\n\n## Decorators\nDecorators make simple to implement common lamdba tasks, such as parsing array from Kinesis, SNS, SQS events etc.\n\nHere are provided decorators\n\n### json_scheme_validator\nDecorator for Json scheme valiidator. Automatically validate `event.[\"body\"]` with following json scheme you define. raise exception if the validation fails.\n\n```python\nfrom jeffy.framework import setup\napp = setup()\n\n@app.decorator.json_scheme_validator(\n    json_scheme={\n       \"type\":\"object\",\n       \"properties\": {\n           \"message\": {\"type\":\"string\"}\n        }\n    }\n)\ndef handler(event, context):\n    return event[\"body\"][\"foo\"] \n```\n\n### api_json_scheme_validator\nDecorator for Json scheme valiidator for API Gateway. Automatically validate `event.[\"body\"]` with following json scheme. Returns 400 error if the validation fails.\n\n```python\nfrom jeffy.framework import setup\napp = setup()\n@app.decorator.api_json_scheme_validator(\n    json_scheme={\n       \"type\":\"object\",\n       \"properties\": {\n           \"message\": {\"type\":\"string\"}\n        }\n    },\n    response_headers={\n       \"Content-Type\":\"application/jsoset=utf-8\"\n    }\n)\ndef handler(event, context):\n    return event[\"body\"][\"foo\"]\n```\n\n### api\nDecorator for API Gateway event. Automatically parse string if `event[\"body\"]` can be parsed as Dictionary and set correlation_id in `event[\"correlation_id\"]` you should pass to next event, returns 500 error if unexpected error happens.\n\n```python\nfrom jeffy.framework import setup\napp = setup()\n\n@app.decorator.api\ndef handler(event, context):\n    return event[\"body\"][\"foo\"] # returns 500 error if unexpected error happens.\n```\n\n### sqs\nDecorator for sqs event. Automaticlly parse `\"event.Records\"` list from SQS event source to each items for making it easy to treat it inside main process of Lambda.\n\n```python\nfrom jeffy.framework import setup\napp = setup()\n\n@app.decorator.sqs\ndef handler(event, context):\n    return event[\"foo\"]\n    \"\"\"\n    \"event.Records\" list from SQS event source was parsed each items\n    if event.Records value is the following,\n     [\n         {\"foo\": 1},\n         {\"foo\": 2}\n     ]\n\n    event[\"foo\"] value is 1 and 2, event[\"correlation_id\"] is correlation_id you should pass to next event\n    \"\"\"\n```\n\n### sns\nDecorator for sns event. Automaticlly parse `\"event.Records\"` list from SNS event source to each items for making it easy to treat it inside main process of Lambda.\n\n```python\nfrom jeffy.framework import setup\napp = setup()\n\n@app.decorator.sns\ndef handler(event, context):\n    return event[\"foo\"]\n    \"\"\"\n    \"event.Records\" list from SNS event source was parsed each items\n    if event.Records value is the following,\n     [\n         {\"foo\": 1},\n         {\"foo\": 2}\n     ]\n\n    event[\"foo\"] value is 1 and 2, event[\"correlation_id\"] is correlation_id you should pass to next event\n    \"\"\"\n```\n\n### kinesis_stream\nDecorator for kinesis stream event. Automaticlly parse `\"event.Records\"` list from Kinesis event source to each items and decode it with base64 for making it easy to treat it inside main process of Lambda.\n\n```python\n@app.decorator.kinesis_stream\ndef handler(event, context):\n    return event[\"foo\"]\n    \"\"\"\n    \"event.Records\" list from Kinesis event source was parsed each items\n    and decoded with base64 if event.Records value is the following,\n     [\n         <base64 encoded value>,\n         <base64 encoded value>\n     ]\n\n    event[\"foo\"] value is 1 and 2, event[\"correlation_id\"] is correlation_id you should pass to next event\n    \"\"\"\n```\n\n### dynamodb_stream\nDecorator for dynamodb stream event. Automaticlly parse `\"event.Records\"` list from Dynamodb event source to  items for making it easy to treat it inside main process of Lambda.\n\n```python\nfrom jeffy.framework import setup\napp = setup()\n\n@app.decorator.dynamodb_stream\ndef handler(event, context):\n    return event[\"foo\"]\n    \"\"\"\n    \"event.Records\" list from Dynamodb event source was parsed each items\n    if event.Records value is the following,\n     [\n         {\"foo\": 1},\n         {\"foo\": 2}\n     ]\n\n    event[\"foo\"] value is 1 and 2, event[\"correlation_id\"] is correlation_id you should pass to next event\n    \"\"\"\n```\n\n### s3\nDecorator for S3 event. Automatically parse body stream from triggered S3 object and S3 bucket and key name to Lambda.\n\n```python\nfrom jeffy.framework import setup\napp = setup()\n\n@app.decorator.s3\ndef handler(event, context):\n    event[\"key\"] # S3 bucket key\n    event[\"bucket_name\"] # S3 bucket name\n    event[\"body\"] # object stream from triggered S3 object\n    event[\"correlation_id\"] # correlation_id\n\n```\n\n### schedule\nDecorator for schedule event. just captures correlation id before main Lambda process. do nothing other than that.\n\n```python\nfrom jeffy.framework import setup\napp = setup()\n\n@app.decorator.schedule\ndef handler(event, context):\n    ...\n```\n\n\n## Tracing\n`correlation_id` is to trace subsequent Lambda functions and services. Jeffy automatically extract correlation IDs and caputure logs from the invocation event.\n\nAlso, Jeffy provide boto3 wrapper client to create and inject `correlation_id`.\n\n### Kinesis Clinent\n\n```python\nfrom jeffy.sdk.kinesis import Kinesis\n\ndef handler(event, context):\n    Kinesis.put_record(\n        stream_name=os.environ[\"STREAM_NAME\"],\n        data={\"foo\": \"bar\"},\n        partition_key=\"uuid\",\n        correlation_id=event.get(\"correlation_id\")\n    )\n```\n\n### SNS Client\n\n```python\nfrom jeffy.sdk.sns import Sns\n\ndef handler(event, context):\n    Sns.publish(\n        topic_arn=os.environ[\"TOPIC_ARN\"],\n        message=\"message\",\n        subject=\"subject\",\n        correlation_id=event.get(\"correlation_id\")\n    )\n```\n\n### SQS Client\n\n```python\nfrom jeffy.sdk.sqs import Sqs\n\ndef handler(event, context):\n    Sqs.send_message(\n        queue_url=os.environ[\"QUEUE_URL\"],\n        message=\"message\",\n        correlation_id=event.get(\"correlation_id\")\n    )\n```\n\n### S3 Client\n\n```python\nfrom jeffy.sdk.s3 import S3\n\ndef handler(event, context):\n    S3.upload_file(\n        file_path=\"path/to/file\", \n        bucket_name=os.environ[\"BUCKET_NAME\"],\n        object_name=\"path/to/object\",\n        correlation_id=event.get(\"correlation_id\")\n    )\n```\n\n### Environment Variables\nHere is configutable values for Jeffy.\n\n| Environment variable | Description | Default |\n------------------------------------------------- | --------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------\n JEFFY_LOG_LEVEL | Sets logging level | \"INFO\" \n\n### Example serverless.yml of Serverless Framework using supported environment variables\n\nYou can switch loglevel according to environment. The following example is to enable debug log other than production. \n\n```yaml\nprovider:\n  name: aws\n  region: us-east-1\n  stage: ${opt:stage, 'dev'}\n  environment:\n    JEFFY_LOG_LEVEL: ${self:custom.logLevel.${self:provider.stage}, self:custom.logLevel.default}\n\ncustom:\n  logLevel:\n    production: ERROR\n    default: DEBUG\n```\n\n# Requirements\n\n- Python 3\n\nDevelopment\n-----------\n\n-   Source hosted at [GitHub](https://github.com/marcy-terui/jeffy)\n-   Report issues/questions/feature requests on [GitHub\n    Issues](https://github.com/marcy-terui/jeffy/issues)\n\nPull requests are very welcome! Make sure your patches are well tested.\nIdeally create a topic branch for every separate change you make. For\nexample:\n\n1.  Fork the repo\n2.  Create your feature branch (`git checkout -b my-new-feature`)\n3.  Commit your changes (`git commit -am\"Added some feature\"`)\n4.  Push to the branch (`git push origin my-new-feature`)\n5.  Create new Pull Request\n\nAuthors\n-------\n\n- Bought up initial idea by [Masashi Terui](https://github.com/marcy-terui) (<marcy9114@gmail.com>)\n- Created and maintained by [Serverless Operations, Inc]()\n\nCredits\n-------\nJeffy is inspired by the following products.\n- [Lambda Powertools](https://github.com/awslabs/aws-lambda-powertools)\n- [DAZN Lambda Powertools](https://github.com/getndazn/dazn-lambda-powertools)\n- [lambda_decorators](https://github.com/dschep/lambda-decorators)\n\nLicense\n-------\n\nMIT License (see [LICENSE](https://github.com/marcy-terui/jeffy/blob/master/LICENSE))\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/serverless-operations/jeffy", "keywords": "aws lambda serverless faas", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "jeffy", "package_url": "https://pypi.org/project/jeffy/", "platform": "", "project_url": "https://pypi.org/project/jeffy/", "project_urls": {"Homepage": "https://github.com/serverless-operations/jeffy"}, "release_url": "https://pypi.org/project/jeffy/0.1.4/", "requires_dist": ["jsonschema"], "requires_python": "", "summary": "Event and Contract Driven Serverless \"Application\" Framework", "version": "0.1.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Jeffy(Beta)</h1>\n<h1>Description</h1>\n<p>Jeffy is Serverless <strong>\"Application\"</strong> Framework for Python, which is\nsuite of Utilities for Lambda functions to make it easy to develop serverless applications.</p>\n<p>Mainly, focusing on three things.</p>\n<ul>\n<li>Logging: Providing easy to see JSON format logging, auto logging as a decorator for capturing events and responses and errors, configurable to inject additional attributes what you want to see to logs.</li>\n<li>Decorators: To save time to implement common things for Lambda functions, providing some useful decorators.</li>\n<li>Tracing: Traceable events within related functions and AWS services with generating and passing <code>correlation_id</code>.</li>\n<li>Environment Variables: You can define configuration for Jeffy via Environment Variables of Lambda.</li>\n</ul>\n<h1>TOC</h1>\n<ul>\n<li><a href=\"#jeffy-beta-\" rel=\"nofollow\">Jeffy(Beta)</a></li>\n<li><a href=\"#description\" rel=\"nofollow\">Description</a></li>\n<li><a href=\"#install\" rel=\"nofollow\">Install</a></li>\n<li><a href=\"#features\" rel=\"nofollow\">Features</a>\n<ul>\n<li><a href=\"#logging\" rel=\"nofollow\">Logging</a>\n<ul>\n<li><a href=\"#basic-usage\" rel=\"nofollow\">Basic Usage</a></li>\n<li><a href=\"#injecting-additional-attributes-to-cloudwatchlogs\" rel=\"nofollow\">Injecting additional attributes to CloudWatchLogs</a></li>\n<li><a href=\"#auto-logging\" rel=\"nofollow\">Auto Logging</a></li>\n</ul>\n</li>\n<li><a href=\"#decorators\" rel=\"nofollow\">Decorators</a>\n<ul>\n<li><a href=\"#json-scheme-validator\" rel=\"nofollow\">json_scheme_validator</a></li>\n<li><a href=\"#api-json-scheme-validator\" rel=\"nofollow\">api_json_scheme_validator</a></li>\n<li><a href=\"#api\" rel=\"nofollow\">api</a></li>\n<li><a href=\"#sqs\" rel=\"nofollow\">sqs</a></li>\n<li><a href=\"#sns\" rel=\"nofollow\">sns</a></li>\n<li><a href=\"#kinesis-stream\" rel=\"nofollow\">kinesis_stream</a></li>\n<li><a href=\"#dynamodb-stream\" rel=\"nofollow\">dynamodb_stream</a></li>\n<li><a href=\"#s3\" rel=\"nofollow\">s3</a></li>\n<li><a href=\"#schedule\" rel=\"nofollow\">schedule</a></li>\n</ul>\n</li>\n<li><a href=\"#tracing\" rel=\"nofollow\">Tracing</a>\n<ul>\n<li><a href=\"#kinesis-clinent\" rel=\"nofollow\">Kinesis Clinent</a></li>\n<li><a href=\"#sns-client\" rel=\"nofollow\">SNS Client</a></li>\n<li><a href=\"#sqs-client\" rel=\"nofollow\">SQS Client</a></li>\n<li><a href=\"#s3-client\" rel=\"nofollow\">S3 Client</a></li>\n<li><a href=\"#environment-variables\" rel=\"nofollow\">Environment Variables</a></li>\n<li><a href=\"#example-serverlessyml-of-serverless-framework-using-supported-environment-variables\" rel=\"nofollow\">Example serverless.yml of Serverless Framework using supported environment variables</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#requirements\" rel=\"nofollow\">Requirements</a>\n<ul>\n<li><a href=\"#development\" rel=\"nofollow\">Development</a></li>\n<li><a href=\"#authors\" rel=\"nofollow\">Authors</a></li>\n<li><a href=\"#credits\" rel=\"nofollow\">Credits</a></li>\n<li><a href=\"#license\" rel=\"nofollow\">License</a></li>\n</ul>\n</li>\n</ul>\n<h1>Install</h1>\n<pre>$ pip install jeffy\n</pre>\n<h1>Features</h1>\n<h2>Logging</h2>\n<h3>Basic Usage</h3>\n<p>Jeffy logger automatically inject some Lambda contexts to CloudWatchLogs.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">jeffy.framework</span> <span class=\"kn\">import</span> <span class=\"n\">setup</span>\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">setup</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">handler</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">({</span><span class=\"s2\">\"foo\"</span><span class=\"p\">:</span><span class=\"s2\">\"bar\"</span><span class=\"p\">})</span>\n</pre>\n<p>Output in CloudWatchLogs</p>\n<pre><span class=\"p\">{</span>\n   <span class=\"nt\">\"message\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n       <span class=\"nt\">\"foo\"</span><span class=\"p\">:</span><span class=\"s2\">\"bar\"</span><span class=\"p\">,</span><span class=\"nt\">\"item\"</span><span class=\"p\">:</span><span class=\"s2\">\"aa\"</span>\n    <span class=\"p\">},</span>\n   <span class=\"nt\">\"aws_region\"</span><span class=\"p\">:</span><span class=\"s2\">\"us-east-1\"</span><span class=\"p\">,</span>\n   <span class=\"nt\">\"function_name\"</span><span class=\"p\">:</span><span class=\"s2\">\"jeffy-dev-hello\"</span><span class=\"p\">,</span>\n   <span class=\"nt\">\"function_version\"</span><span class=\"p\">:</span><span class=\"s2\">\"$LATEST\"</span><span class=\"p\">,</span>\n   <span class=\"nt\">\"function_memory_size\"</span><span class=\"p\">:</span><span class=\"s2\">\"1024\"</span><span class=\"p\">,</span>\n   <span class=\"nt\">\"log_group_name\"</span><span class=\"p\">:</span><span class=\"s2\">\"/aws/lambda/jeffy-dev-hello\"</span><span class=\"p\">,</span>\n   <span class=\"nt\">\"log_stream_name\"</span><span class=\"p\">:</span><span class=\"s2\">\"2020/01/21/[$LATEST]d7729c0ea59a4939abb51180cda859bf\"</span><span class=\"p\">,</span>\n   <span class=\"nt\">\"correlation_id\"</span><span class=\"p\">:</span><span class=\"s2\">\"f79759e3-0e37-4137-b536-ee9a94cd4f52\"</span>\n<span class=\"p\">}</span>\n</pre>\n<h3>Injecting additional attributes to CloudWatchLogs</h3>\n<p>You can inject some additional attributes what you want to output with using <code>setup</code> method.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">jeffy.framework</span> <span class=\"kn\">import</span> <span class=\"n\">setup</span>\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">setup</span><span class=\"p\">()</span>\n\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">setup</span><span class=\"p\">({</span>\n   <span class=\"s2\">\"username\"</span><span class=\"p\">:</span><span class=\"s2\">\"user1\"</span><span class=\"p\">,</span>\n   <span class=\"s2\">\"email\"</span><span class=\"p\">:</span><span class=\"s2\">\"user1@example.com\"</span>\n<span class=\"p\">})</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">handler</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">({</span><span class=\"s2\">\"foo\"</span><span class=\"p\">:</span><span class=\"s2\">\"bar\"</span><span class=\"p\">})</span>\n</pre>\n<p>Output in CloudWatchLogs</p>\n<pre><span class=\"p\">{</span>\n   <span class=\"nt\">\"message\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n       <span class=\"nt\">\"foo\"</span><span class=\"p\">:</span><span class=\"s2\">\"bar\"</span><span class=\"p\">,</span><span class=\"nt\">\"item\"</span><span class=\"p\">:</span><span class=\"s2\">\"aa\"</span>\n    <span class=\"p\">},</span>\n   <span class=\"nt\">\"username\"</span><span class=\"p\">:</span><span class=\"s2\">\"user1\"</span><span class=\"p\">,</span>\n   <span class=\"nt\">\"email\"</span><span class=\"p\">:</span><span class=\"s2\">\"user1@example.com\"</span><span class=\"p\">,</span>\n   <span class=\"nt\">\"aws_region\"</span><span class=\"p\">:</span><span class=\"s2\">\"us-east-1\"</span><span class=\"p\">,</span>\n   <span class=\"nt\">\"function_name\"</span><span class=\"p\">:</span><span class=\"s2\">\"jeffy-dev-hello\"</span><span class=\"p\">,</span>\n   <span class=\"nt\">\"function_version\"</span><span class=\"p\">:</span><span class=\"s2\">\"$LATEST\"</span><span class=\"p\">,</span>\n   <span class=\"nt\">\"function_memory_size\"</span><span class=\"p\">:</span><span class=\"s2\">\"1024\"</span><span class=\"p\">,</span>\n   <span class=\"nt\">\"log_group_name\"</span><span class=\"p\">:</span><span class=\"s2\">\"/aws/lambda/jeffy-dev-hello\"</span><span class=\"p\">,</span>\n   <span class=\"nt\">\"log_stream_name\"</span><span class=\"p\">:</span><span class=\"s2\">\"2020/01/21/[$LATEST]d7729c0ea59a4939abb51180cda859bf\"</span><span class=\"p\">,</span>\n   <span class=\"nt\">\"correlation_id\"</span><span class=\"p\">:</span><span class=\"s2\">\"f79759e3-0e37-4137-b536-ee9a94cd4f52\"</span>\n<span class=\"p\">}</span>\n</pre>\n<h3>Auto Logging</h3>\n<p><code>auto_logging</code> decorator allows you to output <code>event</code>, <code>response</code> and <code>stacktrace</code> when you face Exceptions</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">jeffy.framework</span> <span class=\"kn\">import</span> <span class=\"n\">setup</span>\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">setup</span><span class=\"p\">()</span>\n\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">setup</span><span class=\"p\">({</span>\n   <span class=\"s2\">\"username\"</span><span class=\"p\">:</span><span class=\"s2\">\"user1\"</span><span class=\"p\">,</span>\n   <span class=\"s2\">\"email\"</span><span class=\"p\">:</span><span class=\"s2\">\"user1@example.com\"</span>\n<span class=\"p\">})</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">decorator</span><span class=\"o\">.</span><span class=\"n\">auto_logging</span>\n<span class=\"k\">def</span> <span class=\"nf\">handler</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n</pre>\n<p>Error output with auto_logging</p>\n<pre><span class=\"p\">{</span>\n   <span class=\"nt\">\"error_message\"</span><span class=\"p\">:</span> <span class=\"s2\">\"JSONDecodeError('Expecting value: line 1 column 1 (char 0)')\"</span><span class=\"p\">,</span> \n   <span class=\"nt\">\"stack_trace\"</span><span class=\"p\">:</span><span class=\"s2\">\"Traceback (most recent call last):</span>\n<span class=\"s2\">  File '/var/task/jeffy/decorators.py', line 41, in wrapper</span>\n<span class=\"s2\">    raise e</span>\n<span class=\"s2\">  File '/var/task/jeffy/decorators.py', line 36, in wrapper</span>\n<span class=\"s2\">    result = func(event, context)</span>\n<span class=\"s2\">  File '/var/task/handler.py', line 8, in hello</span>\n<span class=\"s2\">    json.loads('s')</span>\n<span class=\"s2\">  File '/var/lang/lib/python3.8/json/__init__.py', line 357, in loads</span>\n<span class=\"s2\">    return _default_decoder.decode(s)</span>\n<span class=\"s2\">  File '/var/lang/lib/python3.8/json/decoder.py', line 337, in decode</span>\n<span class=\"s2\">    obj, end = self.raw_decode(s, idx=_w(s, 0).end())</span>\n<span class=\"s2\">  File '/var/lang/lib/python3.8/json/decoder.py', line 355, in raw_decode</span>\n<span class=\"s2\">    raise JSONDecodeError('Expecting value', s, err.value) from None\"</span><span class=\"p\">,</span>\n   <span class=\"nt\">\"function_name\"</span><span class=\"p\">:</span><span class=\"s2\">\"jeffy-dev-hello\"</span><span class=\"p\">,</span>\n   <span class=\"nt\">\"function_version\"</span><span class=\"p\">:</span><span class=\"s2\">\"$LATEST\"</span><span class=\"p\">,</span>\n   <span class=\"nt\">\"function_memory_size\"</span><span class=\"p\">:</span><span class=\"s2\">\"1024\"</span><span class=\"p\">,</span>\n   <span class=\"nt\">\"log_group_name\"</span><span class=\"p\">:</span><span class=\"s2\">\"/aws/lambda/jeffy-dev-hello\"</span><span class=\"p\">,</span>\n   <span class=\"nt\">\"log_stream_name\"</span><span class=\"p\">:</span><span class=\"s2\">\"2020/01/21/[$LATEST]90e1f70f6e774e07b681e704646feec0\"</span>\n<span class=\"p\">}</span>\n</pre>\n<h2>Decorators</h2>\n<p>Decorators make simple to implement common lamdba tasks, such as parsing array from Kinesis, SNS, SQS events etc.</p>\n<p>Here are provided decorators</p>\n<h3>json_scheme_validator</h3>\n<p>Decorator for Json scheme valiidator. Automatically validate <code>event.[\"body\"]</code> with following json scheme you define. raise exception if the validation fails.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">jeffy.framework</span> <span class=\"kn\">import</span> <span class=\"n\">setup</span>\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">setup</span><span class=\"p\">()</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">decorator</span><span class=\"o\">.</span><span class=\"n\">json_scheme_validator</span><span class=\"p\">(</span>\n    <span class=\"n\">json_scheme</span><span class=\"o\">=</span><span class=\"p\">{</span>\n       <span class=\"s2\">\"type\"</span><span class=\"p\">:</span><span class=\"s2\">\"object\"</span><span class=\"p\">,</span>\n       <span class=\"s2\">\"properties\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n           <span class=\"s2\">\"message\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"type\"</span><span class=\"p\">:</span><span class=\"s2\">\"string\"</span><span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">handler</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">event</span><span class=\"p\">[</span><span class=\"s2\">\"body\"</span><span class=\"p\">][</span><span class=\"s2\">\"foo\"</span><span class=\"p\">]</span> \n</pre>\n<h3>api_json_scheme_validator</h3>\n<p>Decorator for Json scheme valiidator for API Gateway. Automatically validate <code>event.[\"body\"]</code> with following json scheme. Returns 400 error if the validation fails.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">jeffy.framework</span> <span class=\"kn\">import</span> <span class=\"n\">setup</span>\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">setup</span><span class=\"p\">()</span>\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">decorator</span><span class=\"o\">.</span><span class=\"n\">api_json_scheme_validator</span><span class=\"p\">(</span>\n    <span class=\"n\">json_scheme</span><span class=\"o\">=</span><span class=\"p\">{</span>\n       <span class=\"s2\">\"type\"</span><span class=\"p\">:</span><span class=\"s2\">\"object\"</span><span class=\"p\">,</span>\n       <span class=\"s2\">\"properties\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n           <span class=\"s2\">\"message\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"type\"</span><span class=\"p\">:</span><span class=\"s2\">\"string\"</span><span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">},</span>\n    <span class=\"n\">response_headers</span><span class=\"o\">=</span><span class=\"p\">{</span>\n       <span class=\"s2\">\"Content-Type\"</span><span class=\"p\">:</span><span class=\"s2\">\"application/jsoset=utf-8\"</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">handler</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">event</span><span class=\"p\">[</span><span class=\"s2\">\"body\"</span><span class=\"p\">][</span><span class=\"s2\">\"foo\"</span><span class=\"p\">]</span>\n</pre>\n<h3>api</h3>\n<p>Decorator for API Gateway event. Automatically parse string if <code>event[\"body\"]</code> can be parsed as Dictionary and set correlation_id in <code>event[\"correlation_id\"]</code> you should pass to next event, returns 500 error if unexpected error happens.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">jeffy.framework</span> <span class=\"kn\">import</span> <span class=\"n\">setup</span>\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">setup</span><span class=\"p\">()</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">decorator</span><span class=\"o\">.</span><span class=\"n\">api</span>\n<span class=\"k\">def</span> <span class=\"nf\">handler</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">event</span><span class=\"p\">[</span><span class=\"s2\">\"body\"</span><span class=\"p\">][</span><span class=\"s2\">\"foo\"</span><span class=\"p\">]</span> <span class=\"c1\"># returns 500 error if unexpected error happens.</span>\n</pre>\n<h3>sqs</h3>\n<p>Decorator for sqs event. Automaticlly parse <code>\"event.Records\"</code> list from SQS event source to each items for making it easy to treat it inside main process of Lambda.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">jeffy.framework</span> <span class=\"kn\">import</span> <span class=\"n\">setup</span>\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">setup</span><span class=\"p\">()</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">decorator</span><span class=\"o\">.</span><span class=\"n\">sqs</span>\n<span class=\"k\">def</span> <span class=\"nf\">handler</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">event</span><span class=\"p\">[</span><span class=\"s2\">\"foo\"</span><span class=\"p\">]</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    \"event.Records\" list from SQS event source was parsed each items</span>\n<span class=\"sd\">    if event.Records value is the following,</span>\n<span class=\"sd\">     [</span>\n<span class=\"sd\">         {\"foo\": 1},</span>\n<span class=\"sd\">         {\"foo\": 2}</span>\n<span class=\"sd\">     ]</span>\n\n<span class=\"sd\">    event[\"foo\"] value is 1 and 2, event[\"correlation_id\"] is correlation_id you should pass to next event</span>\n<span class=\"sd\">    \"\"\"</span>\n</pre>\n<h3>sns</h3>\n<p>Decorator for sns event. Automaticlly parse <code>\"event.Records\"</code> list from SNS event source to each items for making it easy to treat it inside main process of Lambda.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">jeffy.framework</span> <span class=\"kn\">import</span> <span class=\"n\">setup</span>\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">setup</span><span class=\"p\">()</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">decorator</span><span class=\"o\">.</span><span class=\"n\">sns</span>\n<span class=\"k\">def</span> <span class=\"nf\">handler</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">event</span><span class=\"p\">[</span><span class=\"s2\">\"foo\"</span><span class=\"p\">]</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    \"event.Records\" list from SNS event source was parsed each items</span>\n<span class=\"sd\">    if event.Records value is the following,</span>\n<span class=\"sd\">     [</span>\n<span class=\"sd\">         {\"foo\": 1},</span>\n<span class=\"sd\">         {\"foo\": 2}</span>\n<span class=\"sd\">     ]</span>\n\n<span class=\"sd\">    event[\"foo\"] value is 1 and 2, event[\"correlation_id\"] is correlation_id you should pass to next event</span>\n<span class=\"sd\">    \"\"\"</span>\n</pre>\n<h3>kinesis_stream</h3>\n<p>Decorator for kinesis stream event. Automaticlly parse <code>\"event.Records\"</code> list from Kinesis event source to each items and decode it with base64 for making it easy to treat it inside main process of Lambda.</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">decorator</span><span class=\"o\">.</span><span class=\"n\">kinesis_stream</span>\n<span class=\"k\">def</span> <span class=\"nf\">handler</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">event</span><span class=\"p\">[</span><span class=\"s2\">\"foo\"</span><span class=\"p\">]</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    \"event.Records\" list from Kinesis event source was parsed each items</span>\n<span class=\"sd\">    and decoded with base64 if event.Records value is the following,</span>\n<span class=\"sd\">     [</span>\n<span class=\"sd\">         &lt;base64 encoded value&gt;,</span>\n<span class=\"sd\">         &lt;base64 encoded value&gt;</span>\n<span class=\"sd\">     ]</span>\n\n<span class=\"sd\">    event[\"foo\"] value is 1 and 2, event[\"correlation_id\"] is correlation_id you should pass to next event</span>\n<span class=\"sd\">    \"\"\"</span>\n</pre>\n<h3>dynamodb_stream</h3>\n<p>Decorator for dynamodb stream event. Automaticlly parse <code>\"event.Records\"</code> list from Dynamodb event source to  items for making it easy to treat it inside main process of Lambda.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">jeffy.framework</span> <span class=\"kn\">import</span> <span class=\"n\">setup</span>\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">setup</span><span class=\"p\">()</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">decorator</span><span class=\"o\">.</span><span class=\"n\">dynamodb_stream</span>\n<span class=\"k\">def</span> <span class=\"nf\">handler</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">event</span><span class=\"p\">[</span><span class=\"s2\">\"foo\"</span><span class=\"p\">]</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    \"event.Records\" list from Dynamodb event source was parsed each items</span>\n<span class=\"sd\">    if event.Records value is the following,</span>\n<span class=\"sd\">     [</span>\n<span class=\"sd\">         {\"foo\": 1},</span>\n<span class=\"sd\">         {\"foo\": 2}</span>\n<span class=\"sd\">     ]</span>\n\n<span class=\"sd\">    event[\"foo\"] value is 1 and 2, event[\"correlation_id\"] is correlation_id you should pass to next event</span>\n<span class=\"sd\">    \"\"\"</span>\n</pre>\n<h3>s3</h3>\n<p>Decorator for S3 event. Automatically parse body stream from triggered S3 object and S3 bucket and key name to Lambda.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">jeffy.framework</span> <span class=\"kn\">import</span> <span class=\"n\">setup</span>\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">setup</span><span class=\"p\">()</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">decorator</span><span class=\"o\">.</span><span class=\"n\">s3</span>\n<span class=\"k\">def</span> <span class=\"nf\">handler</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"n\">event</span><span class=\"p\">[</span><span class=\"s2\">\"key\"</span><span class=\"p\">]</span> <span class=\"c1\"># S3 bucket key</span>\n    <span class=\"n\">event</span><span class=\"p\">[</span><span class=\"s2\">\"bucket_name\"</span><span class=\"p\">]</span> <span class=\"c1\"># S3 bucket name</span>\n    <span class=\"n\">event</span><span class=\"p\">[</span><span class=\"s2\">\"body\"</span><span class=\"p\">]</span> <span class=\"c1\"># object stream from triggered S3 object</span>\n    <span class=\"n\">event</span><span class=\"p\">[</span><span class=\"s2\">\"correlation_id\"</span><span class=\"p\">]</span> <span class=\"c1\"># correlation_id</span>\n</pre>\n<h3>schedule</h3>\n<p>Decorator for schedule event. just captures correlation id before main Lambda process. do nothing other than that.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">jeffy.framework</span> <span class=\"kn\">import</span> <span class=\"n\">setup</span>\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">setup</span><span class=\"p\">()</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">decorator</span><span class=\"o\">.</span><span class=\"n\">schedule</span>\n<span class=\"k\">def</span> <span class=\"nf\">handler</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n</pre>\n<h2>Tracing</h2>\n<p><code>correlation_id</code> is to trace subsequent Lambda functions and services. Jeffy automatically extract correlation IDs and caputure logs from the invocation event.</p>\n<p>Also, Jeffy provide boto3 wrapper client to create and inject <code>correlation_id</code>.</p>\n<h3>Kinesis Clinent</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">jeffy.sdk.kinesis</span> <span class=\"kn\">import</span> <span class=\"n\">Kinesis</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">handler</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"n\">Kinesis</span><span class=\"o\">.</span><span class=\"n\">put_record</span><span class=\"p\">(</span>\n        <span class=\"n\">stream_name</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"STREAM_NAME\"</span><span class=\"p\">],</span>\n        <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"foo\"</span><span class=\"p\">:</span> <span class=\"s2\">\"bar\"</span><span class=\"p\">},</span>\n        <span class=\"n\">partition_key</span><span class=\"o\">=</span><span class=\"s2\">\"uuid\"</span><span class=\"p\">,</span>\n        <span class=\"n\">correlation_id</span><span class=\"o\">=</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"correlation_id\"</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n</pre>\n<h3>SNS Client</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">jeffy.sdk.sns</span> <span class=\"kn\">import</span> <span class=\"n\">Sns</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">handler</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"n\">Sns</span><span class=\"o\">.</span><span class=\"n\">publish</span><span class=\"p\">(</span>\n        <span class=\"n\">topic_arn</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"TOPIC_ARN\"</span><span class=\"p\">],</span>\n        <span class=\"n\">message</span><span class=\"o\">=</span><span class=\"s2\">\"message\"</span><span class=\"p\">,</span>\n        <span class=\"n\">subject</span><span class=\"o\">=</span><span class=\"s2\">\"subject\"</span><span class=\"p\">,</span>\n        <span class=\"n\">correlation_id</span><span class=\"o\">=</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"correlation_id\"</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n</pre>\n<h3>SQS Client</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">jeffy.sdk.sqs</span> <span class=\"kn\">import</span> <span class=\"n\">Sqs</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">handler</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"n\">Sqs</span><span class=\"o\">.</span><span class=\"n\">send_message</span><span class=\"p\">(</span>\n        <span class=\"n\">queue_url</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"QUEUE_URL\"</span><span class=\"p\">],</span>\n        <span class=\"n\">message</span><span class=\"o\">=</span><span class=\"s2\">\"message\"</span><span class=\"p\">,</span>\n        <span class=\"n\">correlation_id</span><span class=\"o\">=</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"correlation_id\"</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n</pre>\n<h3>S3 Client</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">jeffy.sdk.s3</span> <span class=\"kn\">import</span> <span class=\"n\">S3</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">handler</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"n\">S3</span><span class=\"o\">.</span><span class=\"n\">upload_file</span><span class=\"p\">(</span>\n        <span class=\"n\">file_path</span><span class=\"o\">=</span><span class=\"s2\">\"path/to/file\"</span><span class=\"p\">,</span> \n        <span class=\"n\">bucket_name</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BUCKET_NAME\"</span><span class=\"p\">],</span>\n        <span class=\"n\">object_name</span><span class=\"o\">=</span><span class=\"s2\">\"path/to/object\"</span><span class=\"p\">,</span>\n        <span class=\"n\">correlation_id</span><span class=\"o\">=</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"correlation_id\"</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n</pre>\n<h3>Environment Variables</h3>\n<p>Here is configutable values for Jeffy.</p>\n<table>\n<thead>\n<tr>\n<th>Environment variable</th>\n<th>Description</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>JEFFY_LOG_LEVEL</td>\n<td>Sets logging level</td>\n<td>\"INFO\"</td>\n</tr></tbody></table>\n<h3>Example serverless.yml of Serverless Framework using supported environment variables</h3>\n<p>You can switch loglevel according to environment. The following example is to enable debug log other than production.</p>\n<pre><span class=\"nt\">provider</span><span class=\"p\">:</span>\n  <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">aws</span>\n  <span class=\"nt\">region</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">us-east-1</span>\n  <span class=\"nt\">stage</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">${opt:stage, 'dev'}</span>\n  <span class=\"nt\">environment</span><span class=\"p\">:</span>\n    <span class=\"nt\">JEFFY_LOG_LEVEL</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">${self:custom.logLevel.${self:provider.stage}, self:custom.logLevel.default}</span>\n\n<span class=\"nt\">custom</span><span class=\"p\">:</span>\n  <span class=\"nt\">logLevel</span><span class=\"p\">:</span>\n    <span class=\"nt\">production</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">ERROR</span>\n    <span class=\"nt\">default</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">DEBUG</span>\n</pre>\n<h1>Requirements</h1>\n<ul>\n<li>Python 3</li>\n</ul>\n<h2>Development</h2>\n<ul>\n<li>Source hosted at <a href=\"https://github.com/marcy-terui/jeffy\" rel=\"nofollow\">GitHub</a></li>\n<li>Report issues/questions/feature requests on <a href=\"https://github.com/marcy-terui/jeffy/issues\" rel=\"nofollow\">GitHub\nIssues</a></li>\n</ul>\n<p>Pull requests are very welcome! Make sure your patches are well tested.\nIdeally create a topic branch for every separate change you make. For\nexample:</p>\n<ol>\n<li>Fork the repo</li>\n<li>Create your feature branch (<code>git checkout -b my-new-feature</code>)</li>\n<li>Commit your changes (<code>git commit -am\"Added some feature\"</code>)</li>\n<li>Push to the branch (<code>git push origin my-new-feature</code>)</li>\n<li>Create new Pull Request</li>\n</ol>\n<h2>Authors</h2>\n<ul>\n<li>Bought up initial idea by <a href=\"https://github.com/marcy-terui\" rel=\"nofollow\">Masashi Terui</a> (<a href=\"mailto:marcy9114@gmail.com\">marcy9114@gmail.com</a>)</li>\n<li>Created and maintained by <a href=\"\" rel=\"nofollow\">Serverless Operations, Inc</a></li>\n</ul>\n<h2>Credits</h2>\n<p>Jeffy is inspired by the following products.</p>\n<ul>\n<li><a href=\"https://github.com/awslabs/aws-lambda-powertools\" rel=\"nofollow\">Lambda Powertools</a></li>\n<li><a href=\"https://github.com/getndazn/dazn-lambda-powertools\" rel=\"nofollow\">DAZN Lambda Powertools</a></li>\n<li><a href=\"https://github.com/dschep/lambda-decorators\" rel=\"nofollow\">lambda_decorators</a></li>\n</ul>\n<h2>License</h2>\n<p>MIT License (see <a href=\"https://github.com/marcy-terui/jeffy/blob/master/LICENSE\" rel=\"nofollow\">LICENSE</a>)</p>\n\n          </div>"}, "last_serial": 7134569, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "78af88d1f1854203e7d25cc5a9bf55d4", "sha256": "95a0633ddda8b2ce2af3087bb086c1e6f360a6da6d550acd610c42ace317818a"}, "downloads": -1, "filename": "jeffy-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "78af88d1f1854203e7d25cc5a9bf55d4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7600, "upload_time": "2020-01-21T13:09:34", "upload_time_iso_8601": "2020-01-21T13:09:34.861615Z", "url": "https://files.pythonhosted.org/packages/a9/e1/f7ee1532f81dc38675b3b424eb3acf299e1d7ab964fb58c7babeebd493c7/jeffy-0.1.0-py3-none-any.whl", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "287ee9d58be1c790b16fd8c192905180", "sha256": "393b057dd3ff0e66c98cb5ec30459f2d97faede416ab8a94a5ee42af04823a22"}, "downloads": -1, "filename": "jeffy-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "287ee9d58be1c790b16fd8c192905180", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9543, "upload_time": "2020-01-21T16:13:54", "upload_time_iso_8601": "2020-01-21T16:13:54.348501Z", "url": "https://files.pythonhosted.org/packages/e3/fd/1b21f4d1115058143c9605536fa6d5f7bb9449b191a72f7839ed6d0b0af2/jeffy-0.1.1-py3-none-any.whl", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "7c0f2c7d8dc5b08b51a719af8c92fd36", "sha256": "3ef775a5758475016a060a669febb83ab4ee24ca4b8c72cebb15a74efdabedb2"}, "downloads": -1, "filename": "jeffy-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "7c0f2c7d8dc5b08b51a719af8c92fd36", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10308, "upload_time": "2020-01-22T07:36:07", "upload_time_iso_8601": "2020-01-22T07:36:07.768159Z", "url": "https://files.pythonhosted.org/packages/40/d7/ec0991c3a047bc100ab0deed5a0db22d728ff4b6cf06f932ad967d95d134/jeffy-0.1.2-py3-none-any.whl", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "33557eed0d8db8cc53a249b315325f56", "sha256": "5fd60fc403a5b8d3b579435c2f61b8f18abeca3f46562a776a41e9588d0a0ea5"}, "downloads": -1, "filename": "jeffy-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "33557eed0d8db8cc53a249b315325f56", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10705, "upload_time": "2020-01-23T09:48:00", "upload_time_iso_8601": "2020-01-23T09:48:00.589590Z", "url": "https://files.pythonhosted.org/packages/1f/01/6b28ba51bc9cd86f57d2b9fe414ea87c587878453c9d0aee5c1174ecbb20/jeffy-0.1.3-py3-none-any.whl", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "594efd4dbc82a5c5fd00bd3932e20f6e", "sha256": "42ad41118f075ea6618677d29c577942ab450bb72b59b8e5e55d70c1178de29d"}, "downloads": -1, "filename": "jeffy-0.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "594efd4dbc82a5c5fd00bd3932e20f6e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10746, "upload_time": "2020-02-08T07:56:38", "upload_time_iso_8601": "2020-02-08T07:56:38.090785Z", "url": "https://files.pythonhosted.org/packages/e9/c0/b6b4a583d824283997010e034153e171f524ccb76421d1b1233b0d7733a5/jeffy-0.1.4-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "594efd4dbc82a5c5fd00bd3932e20f6e", "sha256": "42ad41118f075ea6618677d29c577942ab450bb72b59b8e5e55d70c1178de29d"}, "downloads": -1, "filename": "jeffy-0.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "594efd4dbc82a5c5fd00bd3932e20f6e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10746, "upload_time": "2020-02-08T07:56:38", "upload_time_iso_8601": "2020-02-08T07:56:38.090785Z", "url": "https://files.pythonhosted.org/packages/e9/c0/b6b4a583d824283997010e034153e171f524ccb76421d1b1233b0d7733a5/jeffy-0.1.4-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:52:54 2020"}