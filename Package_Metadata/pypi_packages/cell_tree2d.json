{"info": {"author": "Jay Hennen", "author_email": "jay.hennen@noaa.gov", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: Public Domain", "Operating System :: OS Independent", "Programming Language :: C++", "Programming Language :: Cython", "Programming Language :: Python :: 2 :: Only", "Programming Language :: Python :: Implementation :: CPython", "Topic :: Scientific/Engineering", "Topic :: Scientific/Engineering :: Visualization", "Topic :: Utilities"], "description": "============\ncell_tree2d\n============\n\nA module that provides the CellTree data structure as described by Garth and Joy in their 2010 paper:\n\nhttp://graphics.cs.ucdavis.edu/~joy/NSF-IIS-0916289/Papers/GarthTVCG2011.pdf  \n\nThis implementation is 2D specific and includes some additions useful to answering one question:\n\n\"What is the index of the polygon that contains this point?\"\n\n\nAlgorithm Notes\n---------------\n\nThere are two major benefits to this algorithm over other types of BVHs. First is that overlaps in volumes\nbounded by nodes do not create duplicates, decreasing the memory footprint. Secondly, the tree is balanced\nby splitting a node along the plane that minimizes a cost function that 'weighs' each half. The result is\na tree with no duplicates and that becomes increasingly balanced as the number of buckets used when building\nthe tree increases (though this linearly increases build time).\n\nThis is a 2D version of the algorithm that is oriented towards maximum lookup speed and immediate answer\nchecking. The basic CellTree does not hold enough information to give conclusive point-in-polygon answers; \nthe best it can do is provide the (short) list of cell bounding boxes that contain the point. Since a point\ncan be within the bounds of two different cells, and it is very possible both children of a parent node will \nneed to be searched, implementing immediate point-in-polygon checks on each cell as they are encountered is\nhighly beneficial, as an early success will avoid all further tree traversal.\n\nUsage Notes\n-----------\n\nThe tree needs certain information to be built:\n\n1. 'verts' - A 2xV numpy array containing x/y coordinates of the V vertices   \n\n2. 'faces' - A PxN numpy array containing N arrays of P indices of vertices that describe one\n   'face' or polygon of degree P  \n\n3. 'num_buckets' - The # of buckets desired. Must be >= 2 The default is 4. Values higher than\n   8 begin to provide diminishing returns.  \n\n4. 'cells\\_per\\_leaf' - The # of polygons per leaf node. The default is 2. Using 1 is possible,\n   but doubles memory footprint for only slightly. faster lookup. If memory is a concern, this\n   value can be increased, but lookup performance will quickly be impacted  \n\n**IMPORTANT:** 'verts' and 'faces' MUST describe a *properly formed* unstructured grid. Assume\nthat degenerate (0 area) or overlapping polygons **will** cause a build failure. If the construction\nof the tree causes a segfault, this is probably the cause.", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/NOAA-ORR-ERD", "keywords": "", "license": "Public Domain", "maintainer": "", "maintainer_email": "", "name": "cell_tree2d", "package_url": "https://pypi.org/project/cell_tree2d/", "platform": "", "project_url": "https://pypi.org/project/cell_tree2d/", "project_urls": {"Homepage": "https://github.com/NOAA-ORR-ERD"}, "release_url": "https://pypi.org/project/cell_tree2d/0.3.0/", "requires_dist": null, "requires_python": "", "summary": "Python wrappers around Cell-Tree 2D spatial index", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A module that provides the CellTree data structure as described by Garth and Joy in their 2010 paper:</p>\n<p><a href=\"http://graphics.cs.ucdavis.edu/~joy/NSF-IIS-0916289/Papers/GarthTVCG2011.pdf\" rel=\"nofollow\">http://graphics.cs.ucdavis.edu/~joy/NSF-IIS-0916289/Papers/GarthTVCG2011.pdf</a></p>\n<p>This implementation is 2D specific and includes some additions useful to answering one question:</p>\n<p>\u201cWhat is the index of the polygon that contains this point?\u201d</p>\n<div id=\"algorithm-notes\">\n<h2>Algorithm Notes</h2>\n<p>There are two major benefits to this algorithm over other types of BVHs. First is that overlaps in volumes\nbounded by nodes do not create duplicates, decreasing the memory footprint. Secondly, the tree is balanced\nby splitting a node along the plane that minimizes a cost function that \u2018weighs\u2019 each half. The result is\na tree with no duplicates and that becomes increasingly balanced as the number of buckets used when building\nthe tree increases (though this linearly increases build time).</p>\n<p>This is a 2D version of the algorithm that is oriented towards maximum lookup speed and immediate answer\nchecking. The basic CellTree does not hold enough information to give conclusive point-in-polygon answers;\nthe best it can do is provide the (short) list of cell bounding boxes that contain the point. Since a point\ncan be within the bounds of two different cells, and it is very possible both children of a parent node will\nneed to be searched, implementing immediate point-in-polygon checks on each cell as they are encountered is\nhighly beneficial, as an early success will avoid all further tree traversal.</p>\n</div>\n<div id=\"usage-notes\">\n<h2>Usage Notes</h2>\n<p>The tree needs certain information to be built:</p>\n<ol>\n<li>\u2018verts\u2019 - A 2xV numpy array containing x/y coordinates of the V vertices</li>\n<li>\u2018faces\u2019 - A PxN numpy array containing N arrays of P indices of vertices that describe one\n\u2018face\u2019 or polygon of degree P</li>\n<li>\u2018num_buckets\u2019 - The # of buckets desired. Must be &gt;= 2 The default is 4. Values higher than\n8 begin to provide diminishing returns.</li>\n<li>\u2018cells_per_leaf\u2019 - The # of polygons per leaf node. The default is 2. Using 1 is possible,\nbut doubles memory footprint for only slightly. faster lookup. If memory is a concern, this\nvalue can be increased, but lookup performance will quickly be impacted</li>\n</ol>\n<p><strong>IMPORTANT:</strong> \u2018verts\u2019 and \u2018faces\u2019 MUST describe a <em>properly formed</em> unstructured grid. Assume\nthat degenerate (0 area) or overlapping polygons <strong>will</strong> cause a build failure. If the construction\nof the tree causes a segfault, this is probably the cause.</p>\n</div>\n\n          </div>"}, "last_serial": 3339753, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "06f95190c341e9fc6963dbd40274ef98", "sha256": "c7c7514cf5ffd53c13118d35730568b00150f4d565a6023bf0d3eae68c72051d"}, "downloads": -1, "filename": "cell_tree2d-0.1.1-1.zip", "has_sig": false, "md5_digest": "06f95190c341e9fc6963dbd40274ef98", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 123951, "upload_time": "2016-02-26T22:17:55", "upload_time_iso_8601": "2016-02-26T22:17:55.015094Z", "url": "https://files.pythonhosted.org/packages/c7/f4/58e09e363189e4a6fafbb67157ccf2784d90fddfa0e9766eb2a8be4fc3e8/cell_tree2d-0.1.1-1.zip", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "7619540f7bb8703894e955f3f929bdca", "sha256": "fce140a6273a562e32dd4de2b73dbf8b4e86da177c066fdf55087b41d0fa0e25"}, "downloads": -1, "filename": "cell_tree2d-0.3.0.tar.gz", "has_sig": false, "md5_digest": "7619540f7bb8703894e955f3f929bdca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 126833, "upload_time": "2017-11-16T21:06:49", "upload_time_iso_8601": "2017-11-16T21:06:49.824943Z", "url": "https://files.pythonhosted.org/packages/27/ca/e32d630cf99d5fd872a8e6f724cb45eb49854d35258c11a8f44bc3a7a23b/cell_tree2d-0.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7619540f7bb8703894e955f3f929bdca", "sha256": "fce140a6273a562e32dd4de2b73dbf8b4e86da177c066fdf55087b41d0fa0e25"}, "downloads": -1, "filename": "cell_tree2d-0.3.0.tar.gz", "has_sig": false, "md5_digest": "7619540f7bb8703894e955f3f929bdca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 126833, "upload_time": "2017-11-16T21:06:49", "upload_time_iso_8601": "2017-11-16T21:06:49.824943Z", "url": "https://files.pythonhosted.org/packages/27/ca/e32d630cf99d5fd872a8e6f724cb45eb49854d35258c11a8f44bc3a7a23b/cell_tree2d-0.3.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:34:49 2020"}