{"info": {"author": "Samuel Rowlinson", "author_email": "sjr@star.sr.bham.ac.uk", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Science/Research", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Scientific/Engineering :: Physics"], "description": "![](https://gitlab.com/sjrowlinson/cavcalc/raw/master/images/logo_cavcalc.png)\n\nA command line program and python module for computing parameters (and plots of these parameters) associated\nwith linear, Fabry-Perot optical cavities.\n\n- Find the documentation at: https://cavcalc.readthedocs.io/en/latest/\n- Follow the latest changes: https://gitlab.com/sjrowlinson/cavcalc\n\n## Installing the release version\n\nTo install the latest release version of `cavcalc`:\n\n```\npip install --upgrade cavcalc\n```\n\n## Example usage\n\nFor details on available arguments run `cavcalc -h` on the command line.\n\nSome examples follow on how to use `cavcalc`.\n\n### Computing single parameters\n\nYou can ask for, e.g., the beam size on the mirrors of a symmetric cavity given its length and stability factor (g) with:\n\n```\ncavcalc w -L 4000 -g 0.83\n```\n\nThis would result in an output of:\n\n```\nGiven [SYMMETRIC CAVITY]:\n\tCavity length = 4000.0 m\n\tWavelength of beam = 1064 nm\n\tStability g-factor of cavity = 0.83\n\nComputed:\n\tRadius of beam at mirrors = 5.732098477230927 cm\n```\n\nUnits for both inputs and outputs can also be specified:\n\n```\ncavcalc w -u mm -L 10km -gouy 145deg\n```\n\nThis requests the beam radius (in mm) on the mirrors of a symmetric cavity of length 10km given that the\nround-trip Gouy phase is 145 degrees; resulting in the following output:\n\n```\nGiven [SYMMETRIC CAVITY]:\n\tCavity length = 10.0 km\n\tWavelength of beam = 1064 nm\n\tRound-trip Gouy phase = 145.0 deg\n\nComputed:\n\tRadius of beam at mirrors = 59.59174828941794 mm\n```\n\n### Computing all available parameters\n\nA compute target of `all` is the default choice which is used to calculate all parameters which can be determined\nfrom the arguments specified. For example, using aLIGO parameters,\n\n```\ncavcalc -L 4km -Rc1 1934 -Rc2 2245 -T1 0.014 -L1 37.5e-6 -T2 5e-6 -L2 37.5e-6\n```\n\ngives the following output:\n\n```\nGiven [ASYMMETRIC CAVITY]:\n\tCavity length = 4.0 km\n\tWavelength of beam = 1064 nm\n\tReflectivity of ITM = 0.9859625\n\tReflectivity of ETM = 0.9999574999999999\n\tRadius of curvature of ITM = 1934.0 m\n\tRadius of curvature of ETM = 2245.0 m\n\nComputed:\n\tFSR = 37474.05725 Hz\n\tFinesse = 443.11699254426594\n\tFWHM = 84.56921734107604 Hz\n\tPole frequency = 42.28460867053802 Hz\n\tEigenmode = (-1837.2153886417173+421.68018375440016j)\n\tRadius of beam at ITM = 5.342106643304925 cm\n\tRadius of beam at ETM = 6.244807988323089 cm\n\tRadius of beam at waist = 1.1950538458990878 cm\n\tPosition of beam waist (from first cavity mirror) = 1837.2153886417168 m\n\tRound-trip Gouy phase = 312.0813565565169 degrees\n\tStability g-factor of ITM = -1.0682523267838677\n\tStability g-factor of ETM = -0.7817371937639199\n\tStability g-factor of cavity = 0.8350925761717987\n\tMode separation frequency = 4988.072188176179 Hz\n```\n\n### Units of output\n\nThe default behaviour for the output parameter units is to grab the relevant parameter type option under the `[units]` header\nof the `cavcalc.ini` configuration file. When installing `cavcalc`, this file is written to a new `cavcalc/` directory within\nyour config directory (i.e. `~/.config/cavcalc/cavcalc.ini` under Unix systems). See the comments in this file for details on the options\navailable for the output units of each parameter type.\n\n`cavcalc` attempts to read a `cavcalc.ini` config file from several locations in this fixed order:\n\n- Firstly from the current working directory, if that fails then\n- next it tries to read from `$XDG_CONFIG_HOME/.cavcalc/` (or `%APPDATA%/cavcalc/` on Windows), if that also fails then\n- the final read attempt is from the within the source of the package directory itself.\n\nIf a successful read occurs at any of these steps then `cavcalc` will use the configuration defined by that file\nfor the rest of the session - it will *not* try to read from any of the subsequent locations as well.\n\nNote that if you specify a `-u` argument when running `cavcalc` then this takes priority over the options in the config file (as we saw in\nthe above example).\n\n#### Evaluating parameters over data ranges\n\nParameters can be computed over ranges of data using:\n\n* the data range syntax:\n    * `-<param_name> \"linspace(start, stop, num) [<units>]\"`,\n    * `-<param_name> \"range(start, stop, stepsize) [<units>]\"`,\n    * `-<param_name> \"start stop num [<units>]\"` (a shorthand version of the linspace command),\n* or data from an input file with `-<param_name> file.dat`.\n\nAn example of using a range could be:\n\n```\ncavcalc w -L \"1 10 100 km\" -g 0.9 --plot\n```\n\nThis results in a plot (see below) showing how the beam radius at the mirrors of a symmetric cavity varies from\na cavity length of 1km to 10km with 100 data points, with a fixed cavity stability factor g = 0.9.\n\n![](https://gitlab.com/sjrowlinson/cavcalc/raw/master/images/symmcav_ws_vs_lengths.png)\n\n\nAlternatively one could use a file of data, e.g:\n\n```\ncavcalc gouy -L 10km -w beam_radii.txt --plot --saveplot symmcav_gouy_vs_ws.png\n```\n\nThis then computes the round-trip Gouy phase (in degrees) of a symmetric cavity of length 10km\nusing beam radii data stored in a file `beam_radii.txt`, and plots the results (see below). Note also that\nyou can save the resulting figure using the `--saveplot <filename>` syntax as seen in the above command.\n\n![](https://gitlab.com/sjrowlinson/cavcalc/raw/master/images/symmcav_gouy_vs_ws.png)\n\n#### Image/density plots\n\nTwo arguments can be specified as data ranges (or files of data) in order to produce\ndensity plots of the target parameter. For example:\n\n```\ncavcalc w -L \"1 10 100 km\" -gouy \"20 120 100 deg\" --plot\n```\n\ncomputes the radius of the beam on the mirrors of a symmetric cavity, against both the cavity length and\nround-trip Gouy phase. This results in the plot shown below.\n\n![](https://gitlab.com/sjrowlinson/cavcalc/raw/master/images/symmcav_w_vs_L_gouy.png)\n\nA matplotlib compliant colour-map can be specified when making an image plot using the `--cmap <name>` option. For example,\nthe following command gives the plot shown below.\n\n```\ncavcalc w0 -L 10km -g1 \"-2 2 200\" -g2 \"-2 2 200\" --plot --cmap nipy_spectral\n```\n\n![](https://gitlab.com/sjrowlinson/cavcalc/raw/master/images/asymmcav_w0_vs_g1g2.png)\n\n#### Finding conditions in a data range\n\nUsing the `--find <condition>` argument one can prompt `cavcalc` to spit out the value(s) at which the given\ncondition is satisfied when doing a data range computation. Taking an example above, we can find the closest value\nof the Round-trip Gouy phase when the radius of the beam is 11 cm. The result is printed to the terminal and\ngiven on the plot (see below). The command to perform such a computation is:\n\n```\ncavcalc gouy -L 10km -w \"5.8 15 1000 cm\" --plot --find \"x=11\"\n```\n\n![](https://gitlab.com/sjrowlinson/cavcalc/raw/master/images/symmcav_gouy_vs_ws_find_11cm.png)\n\n## A note on g-factors\n\nStability (g) factors are split into four different parameters for implementation purposes and to\nhopefully make it clearer as to which argument is being used and whether the resulting cavity\ncomputations are for a symmetric or asymmetric cavity. These arguments are detailed here:\n\n- `-gs` : The symmetric, singular stability factor. This represents the individual g-factors of **both**\n          cavity mirrors. Use this to define a *symmetric* cavity where the overall cavity g-factor is\n\t\t  then simply `g = gs * gs`.\n- `-g` : The overall cavity stability factor. This is the product of the individual g-factors of the\n         cavity mirrors. Use this to define a *symmetric* cavity where the individual g-factors of **both**\n\t\t mirrors are then `gs = sqrt(g)`.\n- `-g1` : The stability factor of the first cavity mirror. Use this to define an *asymmetric* cavity\n          along with the argument `-g2` such that the overall cavity g-factor is then `g = g1 * g2`.\n- `-g2` : The stability factor of the second cavity mirror. Use this to define an *asymmetric* cavity\n          along with the argument `-g1` such that the overall cavity g-factor is then `g = g1 * g2`.\n\n---\n\n## Using `cavcalc` programmatically\n\nWhilst `cavcalc` is primarily a command line tool, it can also be used just as easily from within Python\nin a more \"programmatic\" way. The recommended method for doing this is to use the single function interface\nprovided via [`cavcalc.calculate`](https://cavcalc.readthedocs.io/en/latest/api/generated/cavcalc.calculate.calculate.html#cavcalc.calculate.calculate). This function\nworks similarly to the command line interface, where a target can be specified along with a variable number of keyword arguments corresponding to physical\nparameters. It then returns a [`cavcalc.Output`](https://cavcalc.readthedocs.io/en/latest/api/output/cavcalc.output.Output.html#cavcalc.output.Output) object which has a\nnumber of properties and methods for accessing the results and plotting them against the parameters provided.\n\nFor example, the following script will compute all available targets from the cavity length and mirror radii\nof curvature provided:\n\n```python\nimport cavcalc as cc\n\n# target = \"all\" is default behaviour\n# parameters can be given as single values, an array of values or a tuple\n# where the first element is as before and the second element is a valid\n# string representing the units of the parameter\nout = cc.calculate(L=(4, 'km'), Rc1=1934, Rc2=2245)\n\n# we can get a dictionary of all the computed results...\ncomputed = out.get()\n\n# ... or just a single one if we want\nw0 = out['w0']\n\n# out can also be printed displaying results in the same way as the command line tool\nprint(out)\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/sjrowlinson/cavcalc", "keywords": "physics optics interferometry", "license": "GPL", "maintainer": "", "maintainer_email": "", "name": "cavcalc", "package_url": "https://pypi.org/project/cavcalc/", "platform": "", "project_url": "https://pypi.org/project/cavcalc/", "project_urls": {"Documentation": "https://cavcalc.readthedocs.io/en/stable/", "Homepage": "https://gitlab.com/sjrowlinson/cavcalc", "Source": "https://gitlab.com/sjrowlinson/cavcalc"}, "release_url": "https://pypi.org/project/cavcalc/0.17.0/", "requires_dist": ["numpy", "matplotlib", "black", "pre-commit"], "requires_python": ">=3.6", "summary": "cavcalc is a program for computing optical cavity parameters.", "version": "0.17.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8df09b7c52b4797749c080cebba37b0454c327f7/68747470733a2f2f6769746c61622e636f6d2f736a726f776c696e736f6e2f63617663616c632f7261772f6d61737465722f696d616765732f6c6f676f5f63617663616c632e706e67\"></p>\n<p>A command line program and python module for computing parameters (and plots of these parameters) associated\nwith linear, Fabry-Perot optical cavities.</p>\n<ul>\n<li>Find the documentation at: <a href=\"https://cavcalc.readthedocs.io/en/latest/\" rel=\"nofollow\">https://cavcalc.readthedocs.io/en/latest/</a></li>\n<li>Follow the latest changes: <a href=\"https://gitlab.com/sjrowlinson/cavcalc\" rel=\"nofollow\">https://gitlab.com/sjrowlinson/cavcalc</a></li>\n</ul>\n<h2>Installing the release version</h2>\n<p>To install the latest release version of <code>cavcalc</code>:</p>\n<pre><code>pip install --upgrade cavcalc\n</code></pre>\n<h2>Example usage</h2>\n<p>For details on available arguments run <code>cavcalc -h</code> on the command line.</p>\n<p>Some examples follow on how to use <code>cavcalc</code>.</p>\n<h3>Computing single parameters</h3>\n<p>You can ask for, e.g., the beam size on the mirrors of a symmetric cavity given its length and stability factor (g) with:</p>\n<pre><code>cavcalc w -L 4000 -g 0.83\n</code></pre>\n<p>This would result in an output of:</p>\n<pre><code>Given [SYMMETRIC CAVITY]:\n\tCavity length = 4000.0 m\n\tWavelength of beam = 1064 nm\n\tStability g-factor of cavity = 0.83\n\nComputed:\n\tRadius of beam at mirrors = 5.732098477230927 cm\n</code></pre>\n<p>Units for both inputs and outputs can also be specified:</p>\n<pre><code>cavcalc w -u mm -L 10km -gouy 145deg\n</code></pre>\n<p>This requests the beam radius (in mm) on the mirrors of a symmetric cavity of length 10km given that the\nround-trip Gouy phase is 145 degrees; resulting in the following output:</p>\n<pre><code>Given [SYMMETRIC CAVITY]:\n\tCavity length = 10.0 km\n\tWavelength of beam = 1064 nm\n\tRound-trip Gouy phase = 145.0 deg\n\nComputed:\n\tRadius of beam at mirrors = 59.59174828941794 mm\n</code></pre>\n<h3>Computing all available parameters</h3>\n<p>A compute target of <code>all</code> is the default choice which is used to calculate all parameters which can be determined\nfrom the arguments specified. For example, using aLIGO parameters,</p>\n<pre><code>cavcalc -L 4km -Rc1 1934 -Rc2 2245 -T1 0.014 -L1 37.5e-6 -T2 5e-6 -L2 37.5e-6\n</code></pre>\n<p>gives the following output:</p>\n<pre><code>Given [ASYMMETRIC CAVITY]:\n\tCavity length = 4.0 km\n\tWavelength of beam = 1064 nm\n\tReflectivity of ITM = 0.9859625\n\tReflectivity of ETM = 0.9999574999999999\n\tRadius of curvature of ITM = 1934.0 m\n\tRadius of curvature of ETM = 2245.0 m\n\nComputed:\n\tFSR = 37474.05725 Hz\n\tFinesse = 443.11699254426594\n\tFWHM = 84.56921734107604 Hz\n\tPole frequency = 42.28460867053802 Hz\n\tEigenmode = (-1837.2153886417173+421.68018375440016j)\n\tRadius of beam at ITM = 5.342106643304925 cm\n\tRadius of beam at ETM = 6.244807988323089 cm\n\tRadius of beam at waist = 1.1950538458990878 cm\n\tPosition of beam waist (from first cavity mirror) = 1837.2153886417168 m\n\tRound-trip Gouy phase = 312.0813565565169 degrees\n\tStability g-factor of ITM = -1.0682523267838677\n\tStability g-factor of ETM = -0.7817371937639199\n\tStability g-factor of cavity = 0.8350925761717987\n\tMode separation frequency = 4988.072188176179 Hz\n</code></pre>\n<h3>Units of output</h3>\n<p>The default behaviour for the output parameter units is to grab the relevant parameter type option under the <code>[units]</code> header\nof the <code>cavcalc.ini</code> configuration file. When installing <code>cavcalc</code>, this file is written to a new <code>cavcalc/</code> directory within\nyour config directory (i.e. <code>~/.config/cavcalc/cavcalc.ini</code> under Unix systems). See the comments in this file for details on the options\navailable for the output units of each parameter type.</p>\n<p><code>cavcalc</code> attempts to read a <code>cavcalc.ini</code> config file from several locations in this fixed order:</p>\n<ul>\n<li>Firstly from the current working directory, if that fails then</li>\n<li>next it tries to read from <code>$XDG_CONFIG_HOME/.cavcalc/</code> (or <code>%APPDATA%/cavcalc/</code> on Windows), if that also fails then</li>\n<li>the final read attempt is from the within the source of the package directory itself.</li>\n</ul>\n<p>If a successful read occurs at any of these steps then <code>cavcalc</code> will use the configuration defined by that file\nfor the rest of the session - it will <em>not</em> try to read from any of the subsequent locations as well.</p>\n<p>Note that if you specify a <code>-u</code> argument when running <code>cavcalc</code> then this takes priority over the options in the config file (as we saw in\nthe above example).</p>\n<h4>Evaluating parameters over data ranges</h4>\n<p>Parameters can be computed over ranges of data using:</p>\n<ul>\n<li>the data range syntax:\n<ul>\n<li><code>-&lt;param_name&gt; \"linspace(start, stop, num) [&lt;units&gt;]\"</code>,</li>\n<li><code>-&lt;param_name&gt; \"range(start, stop, stepsize) [&lt;units&gt;]\"</code>,</li>\n<li><code>-&lt;param_name&gt; \"start stop num [&lt;units&gt;]\"</code> (a shorthand version of the linspace command),</li>\n</ul>\n</li>\n<li>or data from an input file with <code>-&lt;param_name&gt; file.dat</code>.</li>\n</ul>\n<p>An example of using a range could be:</p>\n<pre><code>cavcalc w -L \"1 10 100 km\" -g 0.9 --plot\n</code></pre>\n<p>This results in a plot (see below) showing how the beam radius at the mirrors of a symmetric cavity varies from\na cavity length of 1km to 10km with 100 data points, with a fixed cavity stability factor g = 0.9.</p>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d43b764249a322c44ba0fa962c93023ac41b2238/68747470733a2f2f6769746c61622e636f6d2f736a726f776c696e736f6e2f63617663616c632f7261772f6d61737465722f696d616765732f73796d6d6361765f77735f76735f6c656e677468732e706e67\"></p>\n<p>Alternatively one could use a file of data, e.g:</p>\n<pre><code>cavcalc gouy -L 10km -w beam_radii.txt --plot --saveplot symmcav_gouy_vs_ws.png\n</code></pre>\n<p>This then computes the round-trip Gouy phase (in degrees) of a symmetric cavity of length 10km\nusing beam radii data stored in a file <code>beam_radii.txt</code>, and plots the results (see below). Note also that\nyou can save the resulting figure using the <code>--saveplot &lt;filename&gt;</code> syntax as seen in the above command.</p>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/700f75af9ce3c3bbc88f0e6834856246269d26cb/68747470733a2f2f6769746c61622e636f6d2f736a726f776c696e736f6e2f63617663616c632f7261772f6d61737465722f696d616765732f73796d6d6361765f676f75795f76735f77732e706e67\"></p>\n<h4>Image/density plots</h4>\n<p>Two arguments can be specified as data ranges (or files of data) in order to produce\ndensity plots of the target parameter. For example:</p>\n<pre><code>cavcalc w -L \"1 10 100 km\" -gouy \"20 120 100 deg\" --plot\n</code></pre>\n<p>computes the radius of the beam on the mirrors of a symmetric cavity, against both the cavity length and\nround-trip Gouy phase. This results in the plot shown below.</p>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b2796f00c960e0a8314e6ff86f02e613d60f0562/68747470733a2f2f6769746c61622e636f6d2f736a726f776c696e736f6e2f63617663616c632f7261772f6d61737465722f696d616765732f73796d6d6361765f775f76735f4c5f676f75792e706e67\"></p>\n<p>A matplotlib compliant colour-map can be specified when making an image plot using the <code>--cmap &lt;name&gt;</code> option. For example,\nthe following command gives the plot shown below.</p>\n<pre><code>cavcalc w0 -L 10km -g1 \"-2 2 200\" -g2 \"-2 2 200\" --plot --cmap nipy_spectral\n</code></pre>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ecd5d16c44cc9ebae68cb45aab0c426d6001028d/68747470733a2f2f6769746c61622e636f6d2f736a726f776c696e736f6e2f63617663616c632f7261772f6d61737465722f696d616765732f6173796d6d6361765f77305f76735f673167322e706e67\"></p>\n<h4>Finding conditions in a data range</h4>\n<p>Using the <code>--find &lt;condition&gt;</code> argument one can prompt <code>cavcalc</code> to spit out the value(s) at which the given\ncondition is satisfied when doing a data range computation. Taking an example above, we can find the closest value\nof the Round-trip Gouy phase when the radius of the beam is 11 cm. The result is printed to the terminal and\ngiven on the plot (see below). The command to perform such a computation is:</p>\n<pre><code>cavcalc gouy -L 10km -w \"5.8 15 1000 cm\" --plot --find \"x=11\"\n</code></pre>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6816dac11f85c1f1e1763229823ca90d85d69a51/68747470733a2f2f6769746c61622e636f6d2f736a726f776c696e736f6e2f63617663616c632f7261772f6d61737465722f696d616765732f73796d6d6361765f676f75795f76735f77735f66696e645f3131636d2e706e67\"></p>\n<h2>A note on g-factors</h2>\n<p>Stability (g) factors are split into four different parameters for implementation purposes and to\nhopefully make it clearer as to which argument is being used and whether the resulting cavity\ncomputations are for a symmetric or asymmetric cavity. These arguments are detailed here:</p>\n<ul>\n<li><code>-gs</code> : The symmetric, singular stability factor. This represents the individual g-factors of <strong>both</strong>\ncavity mirrors. Use this to define a <em>symmetric</em> cavity where the overall cavity g-factor is\nthen simply <code>g = gs * gs</code>.</li>\n<li><code>-g</code> : The overall cavity stability factor. This is the product of the individual g-factors of the\ncavity mirrors. Use this to define a <em>symmetric</em> cavity where the individual g-factors of <strong>both</strong>\nmirrors are then <code>gs = sqrt(g)</code>.</li>\n<li><code>-g1</code> : The stability factor of the first cavity mirror. Use this to define an <em>asymmetric</em> cavity\nalong with the argument <code>-g2</code> such that the overall cavity g-factor is then <code>g = g1 * g2</code>.</li>\n<li><code>-g2</code> : The stability factor of the second cavity mirror. Use this to define an <em>asymmetric</em> cavity\nalong with the argument <code>-g1</code> such that the overall cavity g-factor is then <code>g = g1 * g2</code>.</li>\n</ul>\n<hr>\n<h2>Using <code>cavcalc</code> programmatically</h2>\n<p>Whilst <code>cavcalc</code> is primarily a command line tool, it can also be used just as easily from within Python\nin a more \"programmatic\" way. The recommended method for doing this is to use the single function interface\nprovided via <a href=\"https://cavcalc.readthedocs.io/en/latest/api/generated/cavcalc.calculate.calculate.html#cavcalc.calculate.calculate\" rel=\"nofollow\"><code>cavcalc.calculate</code></a>. This function\nworks similarly to the command line interface, where a target can be specified along with a variable number of keyword arguments corresponding to physical\nparameters. It then returns a <a href=\"https://cavcalc.readthedocs.io/en/latest/api/output/cavcalc.output.Output.html#cavcalc.output.Output\" rel=\"nofollow\"><code>cavcalc.Output</code></a> object which has a\nnumber of properties and methods for accessing the results and plotting them against the parameters provided.</p>\n<p>For example, the following script will compute all available targets from the cavity length and mirror radii\nof curvature provided:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">cavcalc</span> <span class=\"k\">as</span> <span class=\"nn\">cc</span>\n\n<span class=\"c1\"># target = \"all\" is default behaviour</span>\n<span class=\"c1\"># parameters can be given as single values, an array of values or a tuple</span>\n<span class=\"c1\"># where the first element is as before and the second element is a valid</span>\n<span class=\"c1\"># string representing the units of the parameter</span>\n<span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"n\">cc</span><span class=\"o\">.</span><span class=\"n\">calculate</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"s1\">'km'</span><span class=\"p\">),</span> <span class=\"n\">Rc1</span><span class=\"o\">=</span><span class=\"mi\">1934</span><span class=\"p\">,</span> <span class=\"n\">Rc2</span><span class=\"o\">=</span><span class=\"mi\">2245</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># we can get a dictionary of all the computed results...</span>\n<span class=\"n\">computed</span> <span class=\"o\">=</span> <span class=\"n\">out</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># ... or just a single one if we want</span>\n<span class=\"n\">w0</span> <span class=\"o\">=</span> <span class=\"n\">out</span><span class=\"p\">[</span><span class=\"s1\">'w0'</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># out can also be printed displaying results in the same way as the command line tool</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 6936065, "releases": {"0.13.0": [{"comment_text": "", "digests": {"md5": "de89fc7d017b72ad5447e02619b27388", "sha256": "7429853b35071abc5aba0c4c2370bce74e7aebaee05583949566074a495c4b67"}, "downloads": -1, "filename": "cavcalc-0.13.0-py3-none-any.whl", "has_sig": false, "md5_digest": "de89fc7d017b72ad5447e02619b27388", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 52988, "upload_time": "2020-01-15T17:05:28", "upload_time_iso_8601": "2020-01-15T17:05:28.470280Z", "url": "https://files.pythonhosted.org/packages/49/0e/a9efcd09e1c84366b3d61d4d7a7bfb7e3b4c9443554bcad044e4244c243f/cavcalc-0.13.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "509edf709fc55045964f10f8313bddfe", "sha256": "d911d0dfa049fe4357476b3be0c8d3470eef9a06432003d580337007247805c6"}, "downloads": -1, "filename": "cavcalc-0.13.0.tar.gz", "has_sig": false, "md5_digest": "509edf709fc55045964f10f8313bddfe", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 1103326, "upload_time": "2020-01-15T17:05:30", "upload_time_iso_8601": "2020-01-15T17:05:30.850123Z", "url": "https://files.pythonhosted.org/packages/ca/16/1ad662ccd1c03fccef17b21dd05e43e95546f87f89a7ad4790a990e5da35/cavcalc-0.13.0.tar.gz", "yanked": false}], "0.17.0": [{"comment_text": "", "digests": {"md5": "4b305234cb6173a556d6b9189bd6f271", "sha256": "8c2da21d99399588475b05bb55b7766c8aca09f8fdafc5f07a61ee6a21037e3c"}, "downloads": -1, "filename": "cavcalc-0.17.0-py3-none-any.whl", "has_sig": false, "md5_digest": "4b305234cb6173a556d6b9189bd6f271", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 53690, "upload_time": "2020-04-02T14:40:01", "upload_time_iso_8601": "2020-04-02T14:40:01.607240Z", "url": "https://files.pythonhosted.org/packages/82/ab/619761b0766dce27e05649fc0b2cf3f6f826b8b739f187179eb87a7ea95f/cavcalc-0.17.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "57ca2e1761780bd572aaca9d7630be2b", "sha256": "358652fbb6be054f264ef3bd87094024ac40396586a61fc2edf573895c2fb497"}, "downloads": -1, "filename": "cavcalc-0.17.0.tar.gz", "has_sig": false, "md5_digest": "57ca2e1761780bd572aaca9d7630be2b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 1309565, "upload_time": "2020-04-02T14:40:04", "upload_time_iso_8601": "2020-04-02T14:40:04.013857Z", "url": "https://files.pythonhosted.org/packages/77/a7/f9b6ca661876b9a1e13c4b4a53643ee1deb0658ccdd3438439c27be44560/cavcalc-0.17.0.tar.gz", "yanked": false}], "0.7.1": [{"comment_text": "", "digests": {"md5": "18f9903f0a90ee1bbf205f56917eac38", "sha256": "4ff5724e6fe78ab5a539ba4da25f1c279e68d540b24d3039fb89dcd181b004c1"}, "downloads": -1, "filename": "cavcalc-0.7.1-py3-none-any.whl", "has_sig": false, "md5_digest": "18f9903f0a90ee1bbf205f56917eac38", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 44620, "upload_time": "2019-10-31T12:30:22", "upload_time_iso_8601": "2019-10-31T12:30:22.288918Z", "url": "https://files.pythonhosted.org/packages/18/9d/24576e2dcfa1a5fb4353f96b8fa20a3ddc6ee71d799463f2af5bad582b4b/cavcalc-0.7.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "aa6b904c8fc1849a9519f7f257a145dd", "sha256": "8f735b903de396497fe59c97454a6e26519ab2cd03f1bd49126fa54bf769f38b"}, "downloads": -1, "filename": "cavcalc-0.7.1.tar.gz", "has_sig": false, "md5_digest": "aa6b904c8fc1849a9519f7f257a145dd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 1065860, "upload_time": "2019-10-31T12:30:25", "upload_time_iso_8601": "2019-10-31T12:30:25.759992Z", "url": "https://files.pythonhosted.org/packages/6d/de/583c15143b0bfea883470e3bf484763156c8bcd2c43f14da275c884b11f1/cavcalc-0.7.1.tar.gz", "yanked": false}], "0.7.2": [{"comment_text": "", "digests": {"md5": "1e0aae32bf52a5abf4f851584c9dc2f6", "sha256": "605d02ce314ca0e88a4d166d69f243fe412e58537cbf798032280ce0833e13c4"}, "downloads": -1, "filename": "cavcalc-0.7.2-py3-none-any.whl", "has_sig": false, "md5_digest": "1e0aae32bf52a5abf4f851584c9dc2f6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 46353, "upload_time": "2019-11-03T17:43:52", "upload_time_iso_8601": "2019-11-03T17:43:52.653990Z", "url": "https://files.pythonhosted.org/packages/2f/60/dea5cfb766097a3506b4a909c9f1b6c59d41bbbac20fa4f693827cd25a69/cavcalc-0.7.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5847cf475dbd04cac6df6477e7d6b6e4", "sha256": "fe0b759294e7af80ca42aebb0338f5395e49f8da7c77f9e757c48ad9722383b4"}, "downloads": -1, "filename": "cavcalc-0.7.2.tar.gz", "has_sig": false, "md5_digest": "5847cf475dbd04cac6df6477e7d6b6e4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 1068094, "upload_time": "2019-11-03T17:43:55", "upload_time_iso_8601": "2019-11-03T17:43:55.502119Z", "url": "https://files.pythonhosted.org/packages/f5/c2/6b34b5343eb479a0b8cfed2824bebdbb6710d482bff43fe6ffb189a98ddf/cavcalc-0.7.2.tar.gz", "yanked": false}], "0.9.0": [{"comment_text": "", "digests": {"md5": "97ecc9c9214d47e70a3975cdd49eca3e", "sha256": "e5cb520e4e1c63ec2405d2925ae832015a008eb2d313202d422476ec65aae0d4"}, "downloads": -1, "filename": "cavcalc-0.9.0-py3-none-any.whl", "has_sig": false, "md5_digest": "97ecc9c9214d47e70a3975cdd49eca3e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 56826, "upload_time": "2019-11-26T15:00:47", "upload_time_iso_8601": "2019-11-26T15:00:47.011296Z", "url": "https://files.pythonhosted.org/packages/d4/c5/f614e98163b6c6227e34d22a34c4b90da2ca691acd38e6ac1b1f143d881f/cavcalc-0.9.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1ab520a86d49677dee3ff995dee57229", "sha256": "9d1e32250292a6cd72ee8c40998bf0641e6fedb14f9c4a0c1254664f99df4913"}, "downloads": -1, "filename": "cavcalc-0.9.0.tar.gz", "has_sig": false, "md5_digest": "1ab520a86d49677dee3ff995dee57229", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 1101050, "upload_time": "2019-11-26T15:00:49", "upload_time_iso_8601": "2019-11-26T15:00:49.537908Z", "url": "https://files.pythonhosted.org/packages/f3/6e/f4d66b1f14d2c5c14ad8e2c4fe6638b0182f0fe4d5a8b87618cd4b1f5866/cavcalc-0.9.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4b305234cb6173a556d6b9189bd6f271", "sha256": "8c2da21d99399588475b05bb55b7766c8aca09f8fdafc5f07a61ee6a21037e3c"}, "downloads": -1, "filename": "cavcalc-0.17.0-py3-none-any.whl", "has_sig": false, "md5_digest": "4b305234cb6173a556d6b9189bd6f271", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 53690, "upload_time": "2020-04-02T14:40:01", "upload_time_iso_8601": "2020-04-02T14:40:01.607240Z", "url": "https://files.pythonhosted.org/packages/82/ab/619761b0766dce27e05649fc0b2cf3f6f826b8b739f187179eb87a7ea95f/cavcalc-0.17.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "57ca2e1761780bd572aaca9d7630be2b", "sha256": "358652fbb6be054f264ef3bd87094024ac40396586a61fc2edf573895c2fb497"}, "downloads": -1, "filename": "cavcalc-0.17.0.tar.gz", "has_sig": false, "md5_digest": "57ca2e1761780bd572aaca9d7630be2b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 1309565, "upload_time": "2020-04-02T14:40:04", "upload_time_iso_8601": "2020-04-02T14:40:04.013857Z", "url": "https://files.pythonhosted.org/packages/77/a7/f9b6ca661876b9a1e13c4b4a53643ee1deb0658ccdd3438439c27be44560/cavcalc-0.17.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:35:11 2020"}