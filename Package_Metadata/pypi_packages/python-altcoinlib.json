{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)", "Programming Language :: Python"], "description": "# python-altcoinlib\n\nFork of [python-bitcoinlib](https://github.com/petertodd/python-bitcoinlib) with\nsupport for Bitcoin-based networks.\n\nThis Python2/3 library provides an easy interface to the bitcoin data\nstructures and protocol. The approach is low-level and \"ground up\", with a\nfocus on providing tools to manipulate the internals of how Bitcoin works.\n\n\"The Swiss Army Knife of the Bitcoin protocol.\" - Wladimir J. van der Laan\n\n\n## Requirements\n\n    sudo apt-get install libssl-dev\n\nThe RPC interface, bitcoin.rpc, is designed to work with Bitcoin Core v0.15.0\nOlder versions may work but there do exist some incompatibilities.\n\n\n## Structure\n\nEverything consensus critical is found in the modules under bitcoin.core. This\nrule is followed pretty strictly, for instance chain parameters are split into\nconsensus critical and non-consensus-critical.\n\n    bitcoin.core            - Basic core definitions, datastructures, and\n                              (context-independent) validation\n    bitcoin.core.key        - ECC pubkeys\n    bitcoin.core.script     - Scripts and opcodes\n    bitcoin.core.scripteval - Script evaluation/verification\n    bitcoin.core.serialize  - Serialization\n\nIn the future the bitcoin.core may use the Satoshi sourcecode directly as a\nlibrary. Non-consensus critical modules include the following:\n\n    bitcoin          - Chain selection\n    bitcoin.base58   - Base58 encoding\n    bitcoin.bloom    - Bloom filters (incomplete)\n    bitcoin.net      - Network communication (in flux)\n    bitcoin.messages - Network messages (in flux)\n    bitcoin.rpc      - Bitcoin Core RPC interface support\n    bitcoin.wallet   - Wallet-related code, currently Bitcoin address and\n                       private key support\n\nEffort has been made to follow the Satoshi source relatively closely, for\ninstance Python code and classes that duplicate the functionality of\ncorresponding Satoshi C++ code uses the same naming conventions: CTransaction,\nCBlockHeader, nValue etc. Otherwise Python naming conventions are followed.\n\n\n## Mutable vs. Immutable objects\n\nLike the Bitcoin Core codebase CTransaction is immutable and\nCMutableTransaction is mutable; unlike the Bitcoin Core codebase this\ndistinction also applies to COutPoint, CTxIn, CTxOut, and CBlock.\n\n\n## Endianness Gotchas\n\nRather confusingly Bitcoin Core shows transaction and block hashes as\nlittle-endian hex rather than the big-endian the rest of the world uses for\nSHA256. python-bitcoinlib provides the convenience functions x() and lx() in\nbitcoin.core to convert from big-endian and little-endian hex to raw bytes to\naccomodate this. In addition see b2x() and b2lx() for conversion from bytes to\nbig/little-endian hex.\n\n\n## Module import style\n\nWhile not always good style, it's often convenient for quick scripts if\n`import *` can be used. To support that all the modules have `__all__` defined\nappropriately.\n\n\n# Example Code\n\nSee `examples/` directory. For instance this example creates a transaction\nspending a pay-to-script-hash transaction output:\n\n    $ PYTHONPATH=. examples/spend-pay-to-script-hash-txout.py\n    <hex-encoded transaction>\n\n\n## Selecting the chain to use\n\nDo the following:\n\n    import bitcoin\n    bitcoin.SelectParams(NAME)\n\nWhere NAME is one of 'testnet', 'mainnet', or 'regtest'. The chain currently\nselected is a global variable that changes behavior everywhere, just like in\nthe Satoshi codebase.\n\n\n## Unit tests\n\nUnder bitcoin/tests using test data from Bitcoin Core. To run them:\n\n    python -m unittest discover && python3 -m unittest discover\n\nPlease run the tests on both Python2 and Python3 for your pull-reqs!\n\nAlternately, if Tox (see https://tox.readthedocs.org/) is available on your\nsystem, you can run unit tests for multiple Python versions:\n\n    ./runtests.sh\n\nCurrently, the following implementations are tried (any not installed are\nskipped):\n\n    * CPython 2.7\n    * CPython 3.3\n    * CPython 3.4\n    * CPython 3.5\n    * PyPy\n    * PyPy3\n\nHTML coverage reports can then be found in the htmlcov/ subdirectory.\n\n## Documentation\n\nSphinx documentation is in the \"doc\" subdirectory. Run \"make help\" from there\nto see how to build. You will need the Python \"sphinx\" package installed.\n\nCurrently this is just API documentation generated from the code and\ndocstrings. Higher level written docs would be useful, perhaps starting with\nmuch of this README. Pages are written in reStructuredText and linked from\nindex.rst.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Lamden/python-altcoinlib", "keywords": "bitcoin", "license": "", "maintainer": "", "maintainer_email": "", "name": "python-altcoinlib", "package_url": "https://pypi.org/project/python-altcoinlib/", "platform": "", "project_url": "https://pypi.org/project/python-altcoinlib/", "project_urls": {"Homepage": "https://github.com/Lamden/python-altcoinlib"}, "release_url": "https://pypi.org/project/python-altcoinlib/0.9.1/", "requires_dist": null, "requires_python": "", "summary": "The Swiss Army Knife of the Bitcoin protocol with support for Bitcoin-based networks.", "version": "0.9.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            # python-altcoinlib<br><br>Fork of [python-bitcoinlib](https://github.com/petertodd/python-bitcoinlib) with<br>support for Bitcoin-based networks.<br><br>This Python2/3 library provides an easy interface to the bitcoin data<br>structures and protocol. The approach is low-level and \"ground up\", with a<br>focus on providing tools to manipulate the internals of how Bitcoin works.<br><br>\"The Swiss Army Knife of the Bitcoin protocol.\" - Wladimir J. van der Laan<br><br><br>## Requirements<br><br>    sudo apt-get install libssl-dev<br><br>The RPC interface, bitcoin.rpc, is designed to work with Bitcoin Core v0.15.0<br>Older versions may work but there do exist some incompatibilities.<br><br><br>## Structure<br><br>Everything consensus critical is found in the modules under bitcoin.core. This<br>rule is followed pretty strictly, for instance chain parameters are split into<br>consensus critical and non-consensus-critical.<br><br>    bitcoin.core            - Basic core definitions, datastructures, and<br>                              (context-independent) validation<br>    bitcoin.core.key        - ECC pubkeys<br>    bitcoin.core.script     - Scripts and opcodes<br>    bitcoin.core.scripteval - Script evaluation/verification<br>    bitcoin.core.serialize  - Serialization<br><br>In the future the bitcoin.core may use the Satoshi sourcecode directly as a<br>library. Non-consensus critical modules include the following:<br><br>    bitcoin          - Chain selection<br>    bitcoin.base58   - Base58 encoding<br>    bitcoin.bloom    - Bloom filters (incomplete)<br>    bitcoin.net      - Network communication (in flux)<br>    bitcoin.messages - Network messages (in flux)<br>    bitcoin.rpc      - Bitcoin Core RPC interface support<br>    bitcoin.wallet   - Wallet-related code, currently Bitcoin address and<br>                       private key support<br><br>Effort has been made to follow the Satoshi source relatively closely, for<br>instance Python code and classes that duplicate the functionality of<br>corresponding Satoshi C++ code uses the same naming conventions: CTransaction,<br>CBlockHeader, nValue etc. Otherwise Python naming conventions are followed.<br><br><br>## Mutable vs. Immutable objects<br><br>Like the Bitcoin Core codebase CTransaction is immutable and<br>CMutableTransaction is mutable; unlike the Bitcoin Core codebase this<br>distinction also applies to COutPoint, CTxIn, CTxOut, and CBlock.<br><br><br>## Endianness Gotchas<br><br>Rather confusingly Bitcoin Core shows transaction and block hashes as<br>little-endian hex rather than the big-endian the rest of the world uses for<br>SHA256. python-bitcoinlib provides the convenience functions x() and lx() in<br>bitcoin.core to convert from big-endian and little-endian hex to raw bytes to<br>accomodate this. In addition see b2x() and b2lx() for conversion from bytes to<br>big/little-endian hex.<br><br><br>## Module import style<br><br>While not always good style, it's often convenient for quick scripts if<br>`import *` can be used. To support that all the modules have `__all__` defined<br>appropriately.<br><br><br># Example Code<br><br>See `examples/` directory. For instance this example creates a transaction<br>spending a pay-to-script-hash transaction output:<br><br>    $ PYTHONPATH=. examples/spend-pay-to-script-hash-txout.py<br>    &lt;hex-encoded transaction&gt;<br><br><br>## Selecting the chain to use<br><br>Do the following:<br><br>    import bitcoin<br>    bitcoin.SelectParams(NAME)<br><br>Where NAME is one of 'testnet', 'mainnet', or 'regtest'. The chain currently<br>selected is a global variable that changes behavior everywhere, just like in<br>the Satoshi codebase.<br><br><br>## Unit tests<br><br>Under bitcoin/tests using test data from Bitcoin Core. To run them:<br><br>    python -m unittest discover &amp;&amp; python3 -m unittest discover<br><br>Please run the tests on both Python2 and Python3 for your pull-reqs!<br><br>Alternately, if Tox (see https://tox.readthedocs.org/) is available on your<br>system, you can run unit tests for multiple Python versions:<br><br>    ./runtests.sh<br><br>Currently, the following implementations are tried (any not installed are<br>skipped):<br><br>    * CPython 2.7<br>    * CPython 3.3<br>    * CPython 3.4<br>    * CPython 3.5<br>    * PyPy<br>    * PyPy3<br><br>HTML coverage reports can then be found in the htmlcov/ subdirectory.<br><br>## Documentation<br><br>Sphinx documentation is in the \"doc\" subdirectory. Run \"make help\" from there<br>to see how to build. You will need the Python \"sphinx\" package installed.<br><br>Currently this is just API documentation generated from the code and<br>docstrings. Higher level written docs would be useful, perhaps starting with<br>much of this README. Pages are written in reStructuredText and linked from<br>index.rst.<br><br><br>\n          </div>"}, "last_serial": 3871867, "releases": {"0.9.1": [{"comment_text": "", "digests": {"md5": "658ad70cdee64a3d3f9a3f9c8ff86e25", "sha256": "c1d0013fcef40da37091af66a3c44ffbabacf251cc19b6ae345efebba753b137"}, "downloads": -1, "filename": "python_altcoinlib-0.9.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "658ad70cdee64a3d3f9a3f9c8ff86e25", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 86551, "upload_time": "2018-05-15T10:35:49", "upload_time_iso_8601": "2018-05-15T10:35:49.877255Z", "url": "https://files.pythonhosted.org/packages/25/4c/19b2af078d4a3692f44ca72aca779479c6d9277432fb0d278006997014fd/python_altcoinlib-0.9.1-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "658ad70cdee64a3d3f9a3f9c8ff86e25", "sha256": "c1d0013fcef40da37091af66a3c44ffbabacf251cc19b6ae345efebba753b137"}, "downloads": -1, "filename": "python_altcoinlib-0.9.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "658ad70cdee64a3d3f9a3f9c8ff86e25", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 86551, "upload_time": "2018-05-15T10:35:49", "upload_time_iso_8601": "2018-05-15T10:35:49.877255Z", "url": "https://files.pythonhosted.org/packages/25/4c/19b2af078d4a3692f44ca72aca779479c6d9277432fb0d278006997014fd/python_altcoinlib-0.9.1-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 02:54:18 2020"}