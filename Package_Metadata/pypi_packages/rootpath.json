{"info": {"author": "Jonas Grimfelt", "author_email": "grimen@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: POSIX", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development :: Libraries"], "description": "\n# `rootpath` [![PyPI version](https://badge.fury.io/py/rootpath.svg)](https://badge.fury.io/py/rootpath) [![Build Status](https://travis-ci.com/grimen/python-rootpath.svg?branch=master)](https://travis-ci.com/grimen/python-rootpath) [![Coverage Status](https://codecov.io/gh/grimen/python-rootpath/branch/master/graph/badge.svg)](https://codecov.io/gh/grimen/python-rootpath)\n\n*Python project/package root path detection.*\n\n\n## Introduction\n\nAuto-magic project/package root path detection - from a child module file for Python libraries/projects.\n\nIt does this by detecting typical package/project root files/folders (e.g. `.git`, `requirements.txt`, etc.), but it can also be overriden easily if needed.\n\nAs a little bonus it exposes an optional helper for adding root path to the Python load path (`sys.path`) for resolving Python module import hell (which is terribly broken by design).\n\n\n## Install\n\nInstall using **pip**:\n\n```sh\npip install rootpath\n```\n\n\n## Use: Basic\n\nDetect a project/package root path:\n\n**1.** Assuming we have a **python** library/application project...\n\n```\n/home/me/projects\n    \u2514\u2500\u2500 py-foo\n            \u2514\u2500\u2500 foo\n                \u2514\u2500\u2500 utils\n                    \u2514\u2500\u2500 __init__.py\n                    \u2514\u2500\u2500 baz.py\n                    \u2514\u2500\u2500 say.py\n                \u2514\u2500\u2500 __init__.py\n                \u2514\u2500\u2500 bar.py\n            README.md\n            requirements.txt\n            setup.py\n```\n\n`foo/bar.py` - top level package module\n\n```python\nimport rootpath\n\ndef bar():\n    path = rootpath.detect()\n\n    assert path == '/home/me/projects/py-foo'\n\n    print('---')\n    print('FILE:', __file__)\n    print('ROOT:', path)\n    print('---')\n\nif __name__ == '__main__':\n    bar()\n```\n\n`foo/utils/baz.py` - nested level package module (dependency)\n\n```python\nimport rootpath\n\ndef baz():\n    path = rootpath.detect()\n\n    assert path == '/home/me/projects/py-foo'\n\n    print('---')\n    print('FILE:', __file__)\n    print('ROOT:', path)\n    print('---')\n\nif __name__ == '__main__':\n    baz()\n```\n\n`foo/utils/say.py` - nested level package module (dependency)\n\n```python\nimport rootpath\n\ndef say():\n    print('---')\n    print('SAY: {0}'.format(rootpath.detect()))\n    print('---')\n\nif __name__ == '__main__':\n    say()\n```\n\n**2.** Let's run the files individually - they should both with successful assertions and output accurately detected root paths...\n\n```sh\n$ cd /home/me/projects/py-foo\n\n$ python ./foo/bar.py\n\n---\nFILE: /home/me/projects/py-foo/foo/bar.py\nROOT: /home/me/projects/py-foo\n---\n\n$ python ./foo/utils/baz.py\n\n---\nFILE: /home/me/projects/py-foo/foo/utils/baz.py\nROOT: /home/me/projects/py-foo\n---\n\n$ python ./foo/utils/say.py\n\n---\nSAY: /home/me/projects/py-foo\n---\n\n```\n\n\n## Use: Painless Python module imports\n\nUsing the above example code project as a reference, as and example to enable painless Python module imports:\n\n**1.** Let's make use of the load path helper in the higher order modules...\n\n`foo/bar.py`\n\n```python\nimport rootpath\n\n# 1. prepends root path to `sys.path`\nrootpath.append()\n\n# 2. will import correctly without errors no matter if imported/executed from same path or any other system path - which is not true for the native Python 3 relative import\nimport rootpath.utils.say as say\n\ndef bar():\n    say()\n\nif __name__ == '__main__':\n    bar()\n```\n\n`foo/utils/baz.py`\n\n```python\nimport rootpath\n\n# 1. prepends root path to `sys.path`\nrootpath.append()\n\n# 2. will import correctly without errors no matter if imported/executed from same path or any other system path - which is not true for the native Python 3 relative import\nimport rootpath.utils.say as say\n\ndef baz():\n    hello()\n\nif __name__ == '__main__':\n    baz()\n```\n\n**2.** Let's run the files individually - `say` module should be imported correctly without any errors from any module path namespace...\n\n```sh\n$ cd /home/me/projects/py-foo\n\n$ python ./foo/bar.py\n\n---\nSAY: /home/me/projects/py-foo\n---\n\n$ python ./foo/utils/baz.py\n\n---\nSAY: /home/me/projects/py-foo\n---\n\n$ python ./foo/utils/say.py\n\n---\nSAY: /home/me/projects/py-foo\n---\n\n$ cd /home/me/projects/py-foo/foo\n\n$ python ./bar.py\n---\nSAY: /home/me/projects/py-foo\n---\n\n$ python ./utils/baz.py\n---\nSAY: /home/me/projects/py-foo\n---\n\n$ python ./utils/say.py\n\n---\nSAY: /home/me/projects/py-foo\n---\n\n$ cd /home/me/projects/py-foo/foo/utils\n\n$ python ./utils/baz.py\n\n---\nSAY: /home/me/projects/py-foo\n---\n\n$ python ./utils/say.py\n\n---\nSAY: /home/me/projects/py-foo\n---\n```\n\n\n## About\n\nThis project was mainly initiated - in lack of well tested and reliable existing alternatives - to be used at our work at **[Markable.ai](https://markable.ai)** to have common code conventions between various programming environments where **Python** (research, CV, AI) is heavily used.\n\n\n## License\n\nReleased under the MIT license.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/grimen/python-rootpath", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/grimen/python-rootpath", "keywords": "python,utlity,common,root,rootpath,root-path,detect,autodetect,auto-detect,project-root,project-root-path,package-root,package-root-path", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "rootpath", "package_url": "https://pypi.org/project/rootpath/", "platform": "", "project_url": "https://pypi.org/project/rootpath/", "project_urls": {"Download": "https://github.com/grimen/python-rootpath", "Homepage": "https://github.com/grimen/python-rootpath", "bugs": "https://github.com/grimen/python-rootpath/issues", "repository": "https://github.com/grimen/python-rootpath"}, "release_url": "https://pypi.org/project/rootpath/0.1.1/", "requires_dist": ["six (>=1.11.0)", "coloredlogs (>=10.0)", "termcolor (>=1.1.0)", "colour-runner (>=0.0.5)", "deepdiff (>=3.3.0)", "pygments (>=2.2.0)", "tox (>=3.0.0)", "coverage (>=4.5.2)", "codecov (>=2.0.15)"], "requires_python": "", "summary": "Python project/package root path detection.", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1><code>rootpath</code> <a href=\"https://badge.fury.io/py/rootpath\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e5d07d79219b7fa047c1d2dd9656984516d557a4/68747470733a2f2f62616467652e667572792e696f2f70792f726f6f74706174682e737667\"></a> <a href=\"https://travis-ci.com/grimen/python-rootpath\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/420aec21dd2c2fcb1637b271c8fd7717131d5ce7/68747470733a2f2f7472617669732d63692e636f6d2f6772696d656e2f707974686f6e2d726f6f74706174682e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://codecov.io/gh/grimen/python-rootpath\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3c2f3580ee9d1e7c8d4a2d0fb866550903ce0313/68747470733a2f2f636f6465636f762e696f2f67682f6772696d656e2f707974686f6e2d726f6f74706174682f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a></h1>\n<p><em>Python project/package root path detection.</em></p>\n<h2>Introduction</h2>\n<p>Auto-magic project/package root path detection - from a child module file for Python libraries/projects.</p>\n<p>It does this by detecting typical package/project root files/folders (e.g. <code>.git</code>, <code>requirements.txt</code>, etc.), but it can also be overriden easily if needed.</p>\n<p>As a little bonus it exposes an optional helper for adding root path to the Python load path (<code>sys.path</code>) for resolving Python module import hell (which is terribly broken by design).</p>\n<h2>Install</h2>\n<p>Install using <strong>pip</strong>:</p>\n<pre>pip install rootpath\n</pre>\n<h2>Use: Basic</h2>\n<p>Detect a project/package root path:</p>\n<p><strong>1.</strong> Assuming we have a <strong>python</strong> library/application project...</p>\n<pre><code>/home/me/projects\n    \u2514\u2500\u2500 py-foo\n            \u2514\u2500\u2500 foo\n                \u2514\u2500\u2500 utils\n                    \u2514\u2500\u2500 __init__.py\n                    \u2514\u2500\u2500 baz.py\n                    \u2514\u2500\u2500 say.py\n                \u2514\u2500\u2500 __init__.py\n                \u2514\u2500\u2500 bar.py\n            README.md\n            requirements.txt\n            setup.py\n</code></pre>\n<p><code>foo/bar.py</code> - top level package module</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">rootpath</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">bar</span><span class=\"p\">():</span>\n    <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">rootpath</span><span class=\"o\">.</span><span class=\"n\">detect</span><span class=\"p\">()</span>\n\n    <span class=\"k\">assert</span> <span class=\"n\">path</span> <span class=\"o\">==</span> <span class=\"s1\">'/home/me/projects/py-foo'</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'---'</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'FILE:'</span><span class=\"p\">,</span> <span class=\"vm\">__file__</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'ROOT:'</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'---'</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">bar</span><span class=\"p\">()</span>\n</pre>\n<p><code>foo/utils/baz.py</code> - nested level package module (dependency)</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">rootpath</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">baz</span><span class=\"p\">():</span>\n    <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">rootpath</span><span class=\"o\">.</span><span class=\"n\">detect</span><span class=\"p\">()</span>\n\n    <span class=\"k\">assert</span> <span class=\"n\">path</span> <span class=\"o\">==</span> <span class=\"s1\">'/home/me/projects/py-foo'</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'---'</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'FILE:'</span><span class=\"p\">,</span> <span class=\"vm\">__file__</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'ROOT:'</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'---'</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">baz</span><span class=\"p\">()</span>\n</pre>\n<p><code>foo/utils/say.py</code> - nested level package module (dependency)</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">rootpath</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">say</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'---'</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'SAY: </span><span class=\"si\">{0}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">rootpath</span><span class=\"o\">.</span><span class=\"n\">detect</span><span class=\"p\">()))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'---'</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">say</span><span class=\"p\">()</span>\n</pre>\n<p><strong>2.</strong> Let's run the files individually - they should both with successful assertions and output accurately detected root paths...</p>\n<pre>$ <span class=\"nb\">cd</span> /home/me/projects/py-foo\n\n$ python ./foo/bar.py\n\n---\nFILE: /home/me/projects/py-foo/foo/bar.py\nROOT: /home/me/projects/py-foo\n---\n\n$ python ./foo/utils/baz.py\n\n---\nFILE: /home/me/projects/py-foo/foo/utils/baz.py\nROOT: /home/me/projects/py-foo\n---\n\n$ python ./foo/utils/say.py\n\n---\nSAY: /home/me/projects/py-foo\n---\n</pre>\n<h2>Use: Painless Python module imports</h2>\n<p>Using the above example code project as a reference, as and example to enable painless Python module imports:</p>\n<p><strong>1.</strong> Let's make use of the load path helper in the higher order modules...</p>\n<p><code>foo/bar.py</code></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">rootpath</span>\n\n<span class=\"c1\"># 1. prepends root path to `sys.path`</span>\n<span class=\"n\">rootpath</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># 2. will import correctly without errors no matter if imported/executed from same path or any other system path - which is not true for the native Python 3 relative import</span>\n<span class=\"kn\">import</span> <span class=\"nn\">rootpath.utils.say</span> <span class=\"k\">as</span> <span class=\"nn\">say</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">bar</span><span class=\"p\">():</span>\n    <span class=\"n\">say</span><span class=\"p\">()</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">bar</span><span class=\"p\">()</span>\n</pre>\n<p><code>foo/utils/baz.py</code></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">rootpath</span>\n\n<span class=\"c1\"># 1. prepends root path to `sys.path`</span>\n<span class=\"n\">rootpath</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># 2. will import correctly without errors no matter if imported/executed from same path or any other system path - which is not true for the native Python 3 relative import</span>\n<span class=\"kn\">import</span> <span class=\"nn\">rootpath.utils.say</span> <span class=\"k\">as</span> <span class=\"nn\">say</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">baz</span><span class=\"p\">():</span>\n    <span class=\"n\">hello</span><span class=\"p\">()</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">baz</span><span class=\"p\">()</span>\n</pre>\n<p><strong>2.</strong> Let's run the files individually - <code>say</code> module should be imported correctly without any errors from any module path namespace...</p>\n<pre>$ <span class=\"nb\">cd</span> /home/me/projects/py-foo\n\n$ python ./foo/bar.py\n\n---\nSAY: /home/me/projects/py-foo\n---\n\n$ python ./foo/utils/baz.py\n\n---\nSAY: /home/me/projects/py-foo\n---\n\n$ python ./foo/utils/say.py\n\n---\nSAY: /home/me/projects/py-foo\n---\n\n$ <span class=\"nb\">cd</span> /home/me/projects/py-foo/foo\n\n$ python ./bar.py\n---\nSAY: /home/me/projects/py-foo\n---\n\n$ python ./utils/baz.py\n---\nSAY: /home/me/projects/py-foo\n---\n\n$ python ./utils/say.py\n\n---\nSAY: /home/me/projects/py-foo\n---\n\n$ <span class=\"nb\">cd</span> /home/me/projects/py-foo/foo/utils\n\n$ python ./utils/baz.py\n\n---\nSAY: /home/me/projects/py-foo\n---\n\n$ python ./utils/say.py\n\n---\nSAY: /home/me/projects/py-foo\n---\n</pre>\n<h2>About</h2>\n<p>This project was mainly initiated - in lack of well tested and reliable existing alternatives - to be used at our work at <strong><a href=\"https://markable.ai\" rel=\"nofollow\">Markable.ai</a></strong> to have common code conventions between various programming environments where <strong>Python</strong> (research, CV, AI) is heavily used.</p>\n<h2>License</h2>\n<p>Released under the MIT license.</p>\n\n          </div>"}, "last_serial": 4921072, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "ab6b45e8ebb18d5cc115f339f769e324", "sha256": "53528aff82109cc438538be52768dbb3c60193111c39e34592cc1553007aab0d"}, "downloads": -1, "filename": "rootpath-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ab6b45e8ebb18d5cc115f339f769e324", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14114, "upload_time": "2018-11-18T10:58:27", "upload_time_iso_8601": "2018-11-18T10:58:27.205380Z", "url": "https://files.pythonhosted.org/packages/c6/d7/3ef511370c726d5cc72fcdc62172c29a502a2ec817df42056b6a0ffb6ce0/rootpath-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "42ece21b0da310f48d29403b9a100a7c", "sha256": "ccf8b1f62cec58240b702a986c1825b1c62f1dbef0b1edaee1786bf61853e4ed"}, "downloads": -1, "filename": "rootpath-0.1.0.tar.gz", "has_sig": false, "md5_digest": "42ece21b0da310f48d29403b9a100a7c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9841, "upload_time": "2018-11-18T10:58:29", "upload_time_iso_8601": "2018-11-18T10:58:29.523520Z", "url": "https://files.pythonhosted.org/packages/2c/c1/22fd6ba5dbebd11e86f994e5a16959f9d91bf942bc3279281f948852387b/rootpath-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "a915f6a6607c80f73ddd7706b505c384", "sha256": "98f417747b3e25d2ad1e94a555d7562b48f642cbdf993dabc61259170720ed45"}, "downloads": -1, "filename": "rootpath-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a915f6a6607c80f73ddd7706b505c384", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15176, "upload_time": "2019-03-10T11:21:07", "upload_time_iso_8601": "2019-03-10T11:21:07.826335Z", "url": "https://files.pythonhosted.org/packages/4f/f9/959835686c78b7a95d8d806a97fa0be020c2deccb96de2b60659744319b9/rootpath-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "316a106b7644b562ad3175397f4e327c", "sha256": "ecc3f9de280ff11c6ade0e956229e4dcb74c1ead5efde8579ba721e6459c518f"}, "downloads": -1, "filename": "rootpath-0.1.1.tar.gz", "has_sig": false, "md5_digest": "316a106b7644b562ad3175397f4e327c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12191, "upload_time": "2019-03-10T11:21:09", "upload_time_iso_8601": "2019-03-10T11:21:09.266888Z", "url": "https://files.pythonhosted.org/packages/95/e0/b7876f1572456fac44210d53b30fe5250172d0300bed65ca23d577f7246c/rootpath-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a915f6a6607c80f73ddd7706b505c384", "sha256": "98f417747b3e25d2ad1e94a555d7562b48f642cbdf993dabc61259170720ed45"}, "downloads": -1, "filename": "rootpath-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a915f6a6607c80f73ddd7706b505c384", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15176, "upload_time": "2019-03-10T11:21:07", "upload_time_iso_8601": "2019-03-10T11:21:07.826335Z", "url": "https://files.pythonhosted.org/packages/4f/f9/959835686c78b7a95d8d806a97fa0be020c2deccb96de2b60659744319b9/rootpath-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "316a106b7644b562ad3175397f4e327c", "sha256": "ecc3f9de280ff11c6ade0e956229e4dcb74c1ead5efde8579ba721e6459c518f"}, "downloads": -1, "filename": "rootpath-0.1.1.tar.gz", "has_sig": false, "md5_digest": "316a106b7644b562ad3175397f4e327c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12191, "upload_time": "2019-03-10T11:21:09", "upload_time_iso_8601": "2019-03-10T11:21:09.266888Z", "url": "https://files.pythonhosted.org/packages/95/e0/b7876f1572456fac44210d53b30fe5250172d0300bed65ca23d577f7246c/rootpath-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:01:19 2020"}