{"info": {"author": "Florian Matter", "author_email": "florianmatter@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# pyradigms\n\nCreates paradigms from a table of entries with parameters.\n\n## Getting started\n`pip install pyradigms`\n\n## Usage\nThere are two separate methods; `create_hash` creates a three-dimensional dictionary from a `.csv` file with a list of forms with parameters, `print_paradigms` creates human-readable paradigms, also in `.csv` format, from such a dictionary.\nBoth methods can be used on their own, but dictionaries produced by `create_hash` will automatically be used by `print_paradigms`.\nExample usage:\n\n```\nfrom pyradigms import Pyradigms\npd = Pyradigms(\"output.csv\")\npd.create_hash(\"input.csv\",x=[\"X\"] ,y=[\"Y\"] ,z=[\"Z\"])\npd.print_paradigms()\n```\n\n### `print_paradigms`\nThe `print_paradigms` method takes an argument `tables`, which is a three-dimensional dictionary, and prints them to the specified `.csv` output file.\nIf no `tables` argument is passed, the dictionary created by `create_hash` will be used.\nTake the following dictionary of Bernese German verb forms as an example.\nIt has three dimensions, the first being the meaning of the verb, the second being number, and the third being person.\n\n```\nbernese_verbs = {\"to go\": {\n    \"SG\": {\"1\": \"k\u0251\u02d0\",\n        \"2\": \"k\u025bj\u0283\",\n        \"3\": \"k\u025bjt\u02d0\"},\n    \"PL\": {\"1\": \"k\u0153\u02d0\",\n        \"2\":\"k\u0153\u02d0t\u02d0\",\n        \"3\":\"k\u0153\u02d0\"}\n}, \"to say\": {\n    \"SG\": {\"1\": \"s\u00e6k\u0259\",\n        \"2\": \"s\u025bj\u0283\",\n        \"3\": \"s\u025bjt\u02d0\"},\n    \"PL\": {\"1\": \"s\u00e6k\u0259\",\n        \"2\":\"s\u00e6k\u0259t\u02d0\",\n        \"3\":\"s\u00e6k\u0259\"}\n    }\n}\n```\nWith `print_paradigms(bernese_verbs)`, a `.csv` file with the following content is produced:\n\n| to go | 1  | 2  | 3  \n| ----- | ----- | ----  | ----\n| SG | k\u0251\u02d0 | k\u025bj\u0283 | k\u025bjt\u02d0\n| PL | k\u0153\u02d0 | k\u0153\u02d0t\u02d0 | k\u0153\u02d0\n\n| to say | 1 | 2 | 3\n| ----- | ----- | ------ | ------\n| SG | s\u00e6k\u0259 | s\u025bj\u0283 | s\u025bjt\u02d0\n| PL | s\u00e6k\u0259 | s\u00e6k\u0259t\u02d0 | s\u00e6k\u0259\n\nIn the `.csv` file, The first layer of the three-dimensional hash is represented in the `z` dimension, i.e. paradigm tables stacked vertically, the second layer is represented in the `y` axis of the individual tables, and the third layer is represented in the `x` axis.\n\n### `create_hash`\nThe `create_hash` method reads entries from a `.csv` file and produces a dictionary like the one above.\nThe `.csv` file should have the following format, again illustrated with the Bernese German forms:\n\n| Verb | Number | Person | Form\n| ----- | -----| ----- | -----\n| to go | SG | 1 | k\u0251\u02d0\n| to go | SG | 2 | k\u025bj\u0283\n| to go | SG | 3 | k\u025bjt\u02d0\n| to go | PL | 1 | k\u0153\u02d0\n| to go | PL | 2 | k\u0153\u02d0t\u02d0\n| to go | PL | 3 | k\u0153\u02d0\n| to say | SG | 1 | s\u00e6k\u0259\n| to say | SG | 2 | s\u025bj\u0283\n| to say | SG | 3 | s\u025bjt\u02d0\n| to say | PL | 1 | s\u00e6k\u0259\n| to say | PL | 2 | s\u00e6k\u0259t\u02d0\n| to say | PL | 3 | s\u00e6k\u0259\n\nIn order to specify what parameter should be projected onto which dimension, the arguments `x`, `y`, and `z` must be passed.\nThey each take a list of strings, the strings being parameters present in the `.csv` file.\n`z` represents the multiple paradigm tables listed vertically.\n`y` represents the rows of a single paradigm table.\n`x` represents the columns of a single paradigm table.\nThe `Form` values are what is actually printed in the cells.\nThus, with the following command, the example dictionary above is created from the example `.csv` structure above:\n```\npd.create_hash(\n    \"bernese_verbs.csv\",\n    x = [\"Verb\"],\n    y = [\"Number\"],\n    z = [\"Person\"]\n)\n```\n\nThe resulting dictionary can then be printed to a paradigm table with `pyradigms.print_paradigms()`.\n\nWhen multiple strings are given for one dimension, the parameters are combined in the resulting paradigm.\nThis is useful when there are more than three parameters one wants to represent.\nFor example, the file `examples/latin_verbs.csv` has the columns `Form\tPerson\tNumber\tTense\tVerb\tMood`.\nIt would make sense to combine person and number, as well as tense and mood.\nA separate paradigm should be produced for each verb.\nThis is achieved with the following command:\n\n\n```\npd.create_hash(\n    \"examples/latin_verbs.csv\",\n    x = [\"Person\", \"Number\"],\n    y = [\"Tense\", \"Mood\"],\n    z = [\"Verb\"]\n)\npd.print_paradigms()\n```\n\nThis results in the following paradigm list:\n\n| porta\u02d0re | 1SG | 2SG | 3SG | 1PL | 2PL | 3PL\n| --- | --- | --- | --- | --- | --- | ---\n| PRS:IND | porto\u02d0 | porta\u02d0s | portat | porta\u02d0mus | porta\u02d0tis | portant\n| PST.IPFV:IND | porta\u02d0bam | porta\u02d0ba\u02d0s | porta\u02d0bat | porta\u02d0ba\u02d0mus | porta\u02d0ba\u02d0tis | porta\u02d0bant\n| FUT:IND | porta\u02d0bo\u02d0 | porta\u02d0bis | porta\u02d0bit | porta\u02d0bimus | porta\u02d0bitis | porta\u02d0bunt\n| PRS:SUBJ | portem | porte\u02d0s | portet | porte\u02d0mus | porte\u02d0tis | portent\n| PST.IPFV:SUBJ | porta\u02d0rem | porta\u02d0re\u02d0s | porta\u02d0ret | porta\u02d0re\u02d0mus | porta\u02d0re\u02d0tis | porta\u02d0rent\n\n| ter\u02d0e\u02d0re | 1SG | 2SG | 3SG | 1PL | 2PL | 3PL\n| --- | --- | --- | --- | --- | --- | ---\n| PRS:IND | ter\u02d0eo\u02d0 | ter\u02d0e\u02d0s | ter\u02d0et | ter\u02d0e\u02d0mus | ter\u02d0e\u02d0tis | ter\u02d0ent\n| PST.IPFV:IND | ter\u02d0e\u02d0bam | ter\u02d0e\u02d0ba\u02d0s | ter\u02d0e\u02d0bat | ter\u02d0e\u02d0ba\u02d0mus | ter\u02d0e\u02d0ba\u02d0tis | ter\u02d0e\u02d0bant\n| FUT:IND | ter\u02d0e\u02d0bo\u02d0 | ter\u02d0e\u02d0bis | ter\u02d0e\u02d0bit | ter\u02d0e\u02d0bimus | ter\u02d0e\u02d0bitis | ter\u02d0e\u02d0bunt\n| PRS:SUBJ | ter\u02d0ream | ter\u02d0ea\u02d0s | ter\u02d0eat | ter\u02d0ea\u02d0mus | ter\u02d0ea\u02d0tis | ter\u02d0eant\n| PST.IPFV:SUBJ | ter\u02d0e\u02d0rem | ter\u02d0e\u02d0res | ter\u02d0eret | ter\u02d0e\u02d0re\u02d0mus | ter\u02d0e\u02d0re\u02d0tis | ter\u02d0e\u02d0rent\n\n| petere | 1SG | 2SG | 3SG | 1PL | 2PL | 3PL\n| --- | --- | --- | --- | --- | --- | ---\n| PRS:IND | peto\u02d0 | petis | petit | petimus | petitis | petunt\n| PST.IPFV:IND | pete\u02d0bam | pete\u02d0bas | pete\u02d0bat | pete\u02d0ba\u02d0mus | pete\u02d0ba\u02d0tis | pete\u02d0bant\n| FUT:IND | petam | pete\u02d0s | petet | pete\u02d0mus | pete\u02d0tis | petent\n| PRS:SUBJ | petam | peta\u02d0s | petat | peta\u02d0mus | peta\u02d0tis | petant\n| PST.IPFV:SUBJ | pete\u02d0bar | pete\u02d0ba\u02d0ris; pete\u02d0ba\u02d0re | pete\u02d0ba\u02d0tur | pete\u02d0ba\u02d0mus | pete\u02d0ba\u02d0mini\u02d0 | pete\u02d0ba\u02d0tur\n\nIt is also possible to specify a value for a given parameter, using the `filtered_parameters` argument, which takes a dictionary.\nOnly forms with that value will then be represented in the resulting paradigm(s).\nFor example, to only print indicative forms of the Latin verbs, the following command would be used:\n\n```\npd.create_hash(\n    \"examples/latin_verbs.csv\",\n    x = [\"Person\", \"Number\"],\n    y = [\"Tense\"],\n    z = [\"Verb\"],\n    filtered_parameters = {\"Mood\": \"IND\"}\n)\npd.print_paradigms()\n```\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/florianmatter/pyradigms", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pyradigms", "package_url": "https://pypi.org/project/pyradigms/", "platform": "", "project_url": "https://pypi.org/project/pyradigms/", "project_urls": {"Homepage": "https://gitlab.com/florianmatter/pyradigms"}, "release_url": "https://pypi.org/project/pyradigms/0.0.2/", "requires_dist": null, "requires_python": "", "summary": "Creates paradigms from a table of entries with parameters.", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pyradigms</h1>\n<p>Creates paradigms from a table of entries with parameters.</p>\n<h2>Getting started</h2>\n<p><code>pip install pyradigms</code></p>\n<h2>Usage</h2>\n<p>There are two separate methods; <code>create_hash</code> creates a three-dimensional dictionary from a <code>.csv</code> file with a list of forms with parameters, <code>print_paradigms</code> creates human-readable paradigms, also in <code>.csv</code> format, from such a dictionary.\nBoth methods can be used on their own, but dictionaries produced by <code>create_hash</code> will automatically be used by <code>print_paradigms</code>.\nExample usage:</p>\n<pre><code>from pyradigms import Pyradigms\npd = Pyradigms(\"output.csv\")\npd.create_hash(\"input.csv\",x=[\"X\"] ,y=[\"Y\"] ,z=[\"Z\"])\npd.print_paradigms()\n</code></pre>\n<h3><code>print_paradigms</code></h3>\n<p>The <code>print_paradigms</code> method takes an argument <code>tables</code>, which is a three-dimensional dictionary, and prints them to the specified <code>.csv</code> output file.\nIf no <code>tables</code> argument is passed, the dictionary created by <code>create_hash</code> will be used.\nTake the following dictionary of Bernese German verb forms as an example.\nIt has three dimensions, the first being the meaning of the verb, the second being number, and the third being person.</p>\n<pre><code>bernese_verbs = {\"to go\": {\n    \"SG\": {\"1\": \"k\u0251\u02d0\",\n        \"2\": \"k\u025bj\u0283\",\n        \"3\": \"k\u025bjt\u02d0\"},\n    \"PL\": {\"1\": \"k\u0153\u02d0\",\n        \"2\":\"k\u0153\u02d0t\u02d0\",\n        \"3\":\"k\u0153\u02d0\"}\n}, \"to say\": {\n    \"SG\": {\"1\": \"s\u00e6k\u0259\",\n        \"2\": \"s\u025bj\u0283\",\n        \"3\": \"s\u025bjt\u02d0\"},\n    \"PL\": {\"1\": \"s\u00e6k\u0259\",\n        \"2\":\"s\u00e6k\u0259t\u02d0\",\n        \"3\":\"s\u00e6k\u0259\"}\n    }\n}\n</code></pre>\n<p>With <code>print_paradigms(bernese_verbs)</code>, a <code>.csv</code> file with the following content is produced:</p>\n<table>\n<thead>\n<tr>\n<th>to go</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>SG</td>\n<td>k\u0251\u02d0</td>\n<td>k\u025bj\u0283</td>\n<td>k\u025bjt\u02d0</td>\n</tr>\n<tr>\n<td>PL</td>\n<td>k\u0153\u02d0</td>\n<td>k\u0153\u02d0t\u02d0</td>\n<td>k\u0153\u02d0</td>\n</tr></tbody></table>\n<table>\n<thead>\n<tr>\n<th>to say</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>SG</td>\n<td>s\u00e6k\u0259</td>\n<td>s\u025bj\u0283</td>\n<td>s\u025bjt\u02d0</td>\n</tr>\n<tr>\n<td>PL</td>\n<td>s\u00e6k\u0259</td>\n<td>s\u00e6k\u0259t\u02d0</td>\n<td>s\u00e6k\u0259</td>\n</tr></tbody></table>\n<p>In the <code>.csv</code> file, The first layer of the three-dimensional hash is represented in the <code>z</code> dimension, i.e. paradigm tables stacked vertically, the second layer is represented in the <code>y</code> axis of the individual tables, and the third layer is represented in the <code>x</code> axis.</p>\n<h3><code>create_hash</code></h3>\n<p>The <code>create_hash</code> method reads entries from a <code>.csv</code> file and produces a dictionary like the one above.\nThe <code>.csv</code> file should have the following format, again illustrated with the Bernese German forms:</p>\n<table>\n<thead>\n<tr>\n<th>Verb</th>\n<th>Number</th>\n<th>Person</th>\n<th>Form</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>to go</td>\n<td>SG</td>\n<td>1</td>\n<td>k\u0251\u02d0</td>\n</tr>\n<tr>\n<td>to go</td>\n<td>SG</td>\n<td>2</td>\n<td>k\u025bj\u0283</td>\n</tr>\n<tr>\n<td>to go</td>\n<td>SG</td>\n<td>3</td>\n<td>k\u025bjt\u02d0</td>\n</tr>\n<tr>\n<td>to go</td>\n<td>PL</td>\n<td>1</td>\n<td>k\u0153\u02d0</td>\n</tr>\n<tr>\n<td>to go</td>\n<td>PL</td>\n<td>2</td>\n<td>k\u0153\u02d0t\u02d0</td>\n</tr>\n<tr>\n<td>to go</td>\n<td>PL</td>\n<td>3</td>\n<td>k\u0153\u02d0</td>\n</tr>\n<tr>\n<td>to say</td>\n<td>SG</td>\n<td>1</td>\n<td>s\u00e6k\u0259</td>\n</tr>\n<tr>\n<td>to say</td>\n<td>SG</td>\n<td>2</td>\n<td>s\u025bj\u0283</td>\n</tr>\n<tr>\n<td>to say</td>\n<td>SG</td>\n<td>3</td>\n<td>s\u025bjt\u02d0</td>\n</tr>\n<tr>\n<td>to say</td>\n<td>PL</td>\n<td>1</td>\n<td>s\u00e6k\u0259</td>\n</tr>\n<tr>\n<td>to say</td>\n<td>PL</td>\n<td>2</td>\n<td>s\u00e6k\u0259t\u02d0</td>\n</tr>\n<tr>\n<td>to say</td>\n<td>PL</td>\n<td>3</td>\n<td>s\u00e6k\u0259</td>\n</tr></tbody></table>\n<p>In order to specify what parameter should be projected onto which dimension, the arguments <code>x</code>, <code>y</code>, and <code>z</code> must be passed.\nThey each take a list of strings, the strings being parameters present in the <code>.csv</code> file.\n<code>z</code> represents the multiple paradigm tables listed vertically.\n<code>y</code> represents the rows of a single paradigm table.\n<code>x</code> represents the columns of a single paradigm table.\nThe <code>Form</code> values are what is actually printed in the cells.\nThus, with the following command, the example dictionary above is created from the example <code>.csv</code> structure above:</p>\n<pre><code>pd.create_hash(\n    \"bernese_verbs.csv\",\n    x = [\"Verb\"],\n    y = [\"Number\"],\n    z = [\"Person\"]\n)\n</code></pre>\n<p>The resulting dictionary can then be printed to a paradigm table with <code>pyradigms.print_paradigms()</code>.</p>\n<p>When multiple strings are given for one dimension, the parameters are combined in the resulting paradigm.\nThis is useful when there are more than three parameters one wants to represent.\nFor example, the file <code>examples/latin_verbs.csv</code> has the columns <code>Form Person Number Tense Verb Mood</code>.\nIt would make sense to combine person and number, as well as tense and mood.\nA separate paradigm should be produced for each verb.\nThis is achieved with the following command:</p>\n<pre><code>pd.create_hash(\n    \"examples/latin_verbs.csv\",\n    x = [\"Person\", \"Number\"],\n    y = [\"Tense\", \"Mood\"],\n    z = [\"Verb\"]\n)\npd.print_paradigms()\n</code></pre>\n<p>This results in the following paradigm list:</p>\n<table>\n<thead>\n<tr>\n<th>porta\u02d0re</th>\n<th>1SG</th>\n<th>2SG</th>\n<th>3SG</th>\n<th>1PL</th>\n<th>2PL</th>\n<th>3PL</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>PRS:IND</td>\n<td>porto\u02d0</td>\n<td>porta\u02d0s</td>\n<td>portat</td>\n<td>porta\u02d0mus</td>\n<td>porta\u02d0tis</td>\n<td>portant</td>\n</tr>\n<tr>\n<td>PST.IPFV:IND</td>\n<td>porta\u02d0bam</td>\n<td>porta\u02d0ba\u02d0s</td>\n<td>porta\u02d0bat</td>\n<td>porta\u02d0ba\u02d0mus</td>\n<td>porta\u02d0ba\u02d0tis</td>\n<td>porta\u02d0bant</td>\n</tr>\n<tr>\n<td>FUT:IND</td>\n<td>porta\u02d0bo\u02d0</td>\n<td>porta\u02d0bis</td>\n<td>porta\u02d0bit</td>\n<td>porta\u02d0bimus</td>\n<td>porta\u02d0bitis</td>\n<td>porta\u02d0bunt</td>\n</tr>\n<tr>\n<td>PRS:SUBJ</td>\n<td>portem</td>\n<td>porte\u02d0s</td>\n<td>portet</td>\n<td>porte\u02d0mus</td>\n<td>porte\u02d0tis</td>\n<td>portent</td>\n</tr>\n<tr>\n<td>PST.IPFV:SUBJ</td>\n<td>porta\u02d0rem</td>\n<td>porta\u02d0re\u02d0s</td>\n<td>porta\u02d0ret</td>\n<td>porta\u02d0re\u02d0mus</td>\n<td>porta\u02d0re\u02d0tis</td>\n<td>porta\u02d0rent</td>\n</tr></tbody></table>\n<table>\n<thead>\n<tr>\n<th>ter\u02d0e\u02d0re</th>\n<th>1SG</th>\n<th>2SG</th>\n<th>3SG</th>\n<th>1PL</th>\n<th>2PL</th>\n<th>3PL</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>PRS:IND</td>\n<td>ter\u02d0eo\u02d0</td>\n<td>ter\u02d0e\u02d0s</td>\n<td>ter\u02d0et</td>\n<td>ter\u02d0e\u02d0mus</td>\n<td>ter\u02d0e\u02d0tis</td>\n<td>ter\u02d0ent</td>\n</tr>\n<tr>\n<td>PST.IPFV:IND</td>\n<td>ter\u02d0e\u02d0bam</td>\n<td>ter\u02d0e\u02d0ba\u02d0s</td>\n<td>ter\u02d0e\u02d0bat</td>\n<td>ter\u02d0e\u02d0ba\u02d0mus</td>\n<td>ter\u02d0e\u02d0ba\u02d0tis</td>\n<td>ter\u02d0e\u02d0bant</td>\n</tr>\n<tr>\n<td>FUT:IND</td>\n<td>ter\u02d0e\u02d0bo\u02d0</td>\n<td>ter\u02d0e\u02d0bis</td>\n<td>ter\u02d0e\u02d0bit</td>\n<td>ter\u02d0e\u02d0bimus</td>\n<td>ter\u02d0e\u02d0bitis</td>\n<td>ter\u02d0e\u02d0bunt</td>\n</tr>\n<tr>\n<td>PRS:SUBJ</td>\n<td>ter\u02d0ream</td>\n<td>ter\u02d0ea\u02d0s</td>\n<td>ter\u02d0eat</td>\n<td>ter\u02d0ea\u02d0mus</td>\n<td>ter\u02d0ea\u02d0tis</td>\n<td>ter\u02d0eant</td>\n</tr>\n<tr>\n<td>PST.IPFV:SUBJ</td>\n<td>ter\u02d0e\u02d0rem</td>\n<td>ter\u02d0e\u02d0res</td>\n<td>ter\u02d0eret</td>\n<td>ter\u02d0e\u02d0re\u02d0mus</td>\n<td>ter\u02d0e\u02d0re\u02d0tis</td>\n<td>ter\u02d0e\u02d0rent</td>\n</tr></tbody></table>\n<table>\n<thead>\n<tr>\n<th>petere</th>\n<th>1SG</th>\n<th>2SG</th>\n<th>3SG</th>\n<th>1PL</th>\n<th>2PL</th>\n<th>3PL</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>PRS:IND</td>\n<td>peto\u02d0</td>\n<td>petis</td>\n<td>petit</td>\n<td>petimus</td>\n<td>petitis</td>\n<td>petunt</td>\n</tr>\n<tr>\n<td>PST.IPFV:IND</td>\n<td>pete\u02d0bam</td>\n<td>pete\u02d0bas</td>\n<td>pete\u02d0bat</td>\n<td>pete\u02d0ba\u02d0mus</td>\n<td>pete\u02d0ba\u02d0tis</td>\n<td>pete\u02d0bant</td>\n</tr>\n<tr>\n<td>FUT:IND</td>\n<td>petam</td>\n<td>pete\u02d0s</td>\n<td>petet</td>\n<td>pete\u02d0mus</td>\n<td>pete\u02d0tis</td>\n<td>petent</td>\n</tr>\n<tr>\n<td>PRS:SUBJ</td>\n<td>petam</td>\n<td>peta\u02d0s</td>\n<td>petat</td>\n<td>peta\u02d0mus</td>\n<td>peta\u02d0tis</td>\n<td>petant</td>\n</tr>\n<tr>\n<td>PST.IPFV:SUBJ</td>\n<td>pete\u02d0bar</td>\n<td>pete\u02d0ba\u02d0ris; pete\u02d0ba\u02d0re</td>\n<td>pete\u02d0ba\u02d0tur</td>\n<td>pete\u02d0ba\u02d0mus</td>\n<td>pete\u02d0ba\u02d0mini\u02d0</td>\n<td>pete\u02d0ba\u02d0tur</td>\n</tr></tbody></table>\n<p>It is also possible to specify a value for a given parameter, using the <code>filtered_parameters</code> argument, which takes a dictionary.\nOnly forms with that value will then be represented in the resulting paradigm(s).\nFor example, to only print indicative forms of the Latin verbs, the following command would be used:</p>\n<pre><code>pd.create_hash(\n    \"examples/latin_verbs.csv\",\n    x = [\"Person\", \"Number\"],\n    y = [\"Tense\"],\n    z = [\"Verb\"],\n    filtered_parameters = {\"Mood\": \"IND\"}\n)\npd.print_paradigms()\n</code></pre>\n\n          </div>"}, "last_serial": 6116746, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "680405b7e691443e96f761902cf1a8aa", "sha256": "340129947bbceba8af4d7d34decb2b3e7e7697cbfdd86558ec766857889b6dd5"}, "downloads": -1, "filename": "pyradigms-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "680405b7e691443e96f761902cf1a8aa", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15461, "upload_time": "2019-11-11T12:41:16", "upload_time_iso_8601": "2019-11-11T12:41:16.955906Z", "url": "https://files.pythonhosted.org/packages/85/4a/2d57ad42e8516cc589c7cd3e971838c8d6f7c863ea12d42ce52b2e53b5dc/pyradigms-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2b03b99a29b4b4cf98f499b8893bd3b0", "sha256": "ed7055bdb6f4509c0475bfb392f98b460a038dde856a6e6dbdaa5254a6ba5781"}, "downloads": -1, "filename": "pyradigms-0.0.1.tar.gz", "has_sig": false, "md5_digest": "2b03b99a29b4b4cf98f499b8893bd3b0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3530, "upload_time": "2019-11-11T12:41:19", "upload_time_iso_8601": "2019-11-11T12:41:19.365189Z", "url": "https://files.pythonhosted.org/packages/db/8d/32e95e40038f50eecbbee019feb3a02ef183d9015db8f765cc18d03ebcff/pyradigms-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "1f5fca9ddc630be478c9f4d489bbf68b", "sha256": "f62d5cb74c0c08b2741b1f253a466b7c7362211f62f4330ec9feb1c9c997c146"}, "downloads": -1, "filename": "pyradigms-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "1f5fca9ddc630be478c9f4d489bbf68b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16897, "upload_time": "2019-11-11T12:49:55", "upload_time_iso_8601": "2019-11-11T12:49:55.719164Z", "url": "https://files.pythonhosted.org/packages/4d/6f/e6961cf4b637b0196ce3264e7218ef5e1a12ff50bb28f50f5577b7118726/pyradigms-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e7a065ed94b2e653ba11b86bb41f901d", "sha256": "c093bedb3ad93273c2e409579ba101ebf50eae6d8977919cd734887b82641673"}, "downloads": -1, "filename": "pyradigms-0.0.2.tar.gz", "has_sig": false, "md5_digest": "e7a065ed94b2e653ba11b86bb41f901d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4720, "upload_time": "2019-11-11T12:49:57", "upload_time_iso_8601": "2019-11-11T12:49:57.319599Z", "url": "https://files.pythonhosted.org/packages/c1/2f/a326557941e3ca11b7a327bb738a4f00d1b16f2981e9377bb68833838ce8/pyradigms-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1f5fca9ddc630be478c9f4d489bbf68b", "sha256": "f62d5cb74c0c08b2741b1f253a466b7c7362211f62f4330ec9feb1c9c997c146"}, "downloads": -1, "filename": "pyradigms-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "1f5fca9ddc630be478c9f4d489bbf68b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16897, "upload_time": "2019-11-11T12:49:55", "upload_time_iso_8601": "2019-11-11T12:49:55.719164Z", "url": "https://files.pythonhosted.org/packages/4d/6f/e6961cf4b637b0196ce3264e7218ef5e1a12ff50bb28f50f5577b7118726/pyradigms-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e7a065ed94b2e653ba11b86bb41f901d", "sha256": "c093bedb3ad93273c2e409579ba101ebf50eae6d8977919cd734887b82641673"}, "downloads": -1, "filename": "pyradigms-0.0.2.tar.gz", "has_sig": false, "md5_digest": "e7a065ed94b2e653ba11b86bb41f901d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4720, "upload_time": "2019-11-11T12:49:57", "upload_time_iso_8601": "2019-11-11T12:49:57.319599Z", "url": "https://files.pythonhosted.org/packages/c1/2f/a326557941e3ca11b7a327bb738a4f00d1b16f2981e9377bb68833838ce8/pyradigms-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:36 2020"}