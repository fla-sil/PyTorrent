{"info": {"author": "Darie Petrov", "author_email": "darie@cambriansoft.org", "bugtrack_url": null, "classifiers": [], "description": "Overview\n--------\n\nploybot is a Fabric_ based tool for setting up Python WSGI apps on what I like to\ncall the SNUG stack:\n\n* Supervisord_ for starting processes and keeping them alive.\n* Nginx_ for proxying between your WSGI app and the big bad web.\n* Ubuntu_ as the OS of choice, enabling resolution of system dependencies with\n  apt.  Debian might work as well but hasn't been tested.\n* Gunicorn_ for serving your WSGI app.\n\n(I suppose it could also be the GUNS stack but that sounds far less friendly.)\n\nKey Features\n~~~~~~~~~~~~\n\n* Deploy your site to one or more servers with a single command ('ploybot push').\n* Automatic configuration of Nginx, Supervisord, and Gunicorn to get your site running.\n* Isolation of each site into a separate Virtualenv_\n* Support for differing app config depending on which role you deploy to (a \n  different DB in staging than production, for example).\n\nInstallation\n~~~~~~~~~~~~\n\nUse pip::\n\n    pip install ploybot\n\nYou can also install the current development version straight from bitbucket::\n\n    pip install hg+http://bitbucket.org/dori/ploybot#egg=ploybot\n\nCommands\n--------\n\n(Almost) all of the commands below require that you specify a role name, like\n'ploybot dosomething -R dev'.\n\nCommands can generally be run from the site root directory or any subdirectory\nof it.\n\npush\n~~~~\n\n::\n\n    ploybot push -R rolename\n\nThis command is the main reason for ploybot's existence. It does the work required\nto get your app running on a host (or set of hosts) given the configuration\nspecified in site.yaml and the selected role .yaml file.  'push' does the\nfollowing:\n\n1. SSHes to the remote server(s) specified in the role config.\n2. Creates a zipped up rollback archive of the old site if there's one\n   there already.\n3. Creates a virtualenv for the site.\n4. Installs apt and python dependencies.\n5. Copies the site from your local machine to a temporary directory on the\n   remote server.\n6. Writes config file includes for nginx and supervisord.\n7. Moves your code from the temp dir into its production location\n   (/srv/<sitename> by default).\n8. Tells nginx and supervisord to reload their configs.\n\n\nrollback\n~~~~~~~~\n\n::\n\n    ploybot rollback -R rolename\n\nThis command is for when you have those 'OMG I BROKE THE SITE' moments. It will\nSSH to the push_hosts specified in your role file and restore the most recent\narchive of the site. ploybot keeps 3 rollback copies of your site, so you could\npotentially run 'ploybot rollback' 3 times to go back to the state from 3\ndeployments ago.\n\nrun\n~~~\n\n::\n\n    ploybot run -R rolename\n\nThis command runs the site from the local machine, on port 8000.  (Nothing is\npushed of copied.)  Static directories listed in the *static_dirs* section of\nsite.yaml will also be served.  (CherryPy is used for this magic.)\n\ninstall_server_deps\n~~~~~~~~~~~~\n\n::\n\n    ploybot install_server_deps -R rolename\n\nWhen you get a shiny new server with that fresh Ubuntu smell, it needs just a\ntiny bit of setup before it will know how to serve ploybot-deployed sites.  This\ncommand does that.  It installs nginx and supervisord, and gives each of them a\nwildcard include in their configs for loading from /srv/<sitename>/conf.\n\npip_deps\n~~~~\n\n::\n\n    ploybot pip_deps\n\nThis command wraps 'pip install' to install all of the python packages listed\nin requirements.txt into your local python environment.  It's handy for grabbing all\nthe dependencies when you're working with a new virtualenv on an existing\nproject.\n\n\ncreate_virtualenv\n~~~~\n\n::\n\n    ploybot create_virtualenv\n\nCreates a virtual environment for the app to be deployed.\n\n\nconfigure_nginx\n~~~~\n\n    ploybot configure_nginx\n    \nConfigures nginx\n\n\nswitch_nginx\n~~~~\n\n    ploybot switch_nginx\n    \nReloads nginx config\n\n\nconfigure_supervisor\n~~~~\n\n    ploybot configure_supervisor\n    \nConfigures supervisor\n\n\nstart_process\n~~~~\n\n    ploybot start_process\n    \nStarts process\n\n\nstop_other_versions\n~~~~\n\n    ploybot stop_other_versions\n    \nKills other running proccesses of this app\n\n\nskel\n~~~~\n\n::\n\n    ploybot skel sitename\n\nCreates a directory with a basic ploybot file and directory structure.\n\nLayout\n------\n\nA ploybot-enabled project should be layed out something like this::\n\n  mysite.com\n  \u251c\u2500\u2500 deps.yaml\n  \u251c\u2500\u2500 fabfile.py\n  \u251c\u2500\u2500 membrane.py\n  \u251c\u2500\u2500 roles\n  \u2502\u00a0\u00a0 \u251c\u2500\u2500 dev.yaml\n  \u2502\u00a0\u00a0 \u251c\u2500\u2500 staging.yaml\n  \u2502\u00a0\u00a0 \u2514\u2500\u2500 production.yaml\n  \u251c\u2500\u2500 site.yaml\n  \u2514\u2500\u2500 my-django-project\n\nSome of those files/folders are required, other are optional:\n\nRequired\n~~~~~~~~\n\n1. site.yaml - This is the main config file (comparable to app.yaml in Google\n   App Engine)\n2. deps.yaml - Lists Python packages, Ubuntu apt packages, and apt build \n   dependencies that need to be installed on the server running your site.\n3. fabfile.py - A Fabric_-compatible fabfile that imports ploybot's Fabric \n   functions.\n4. roles/\\*.yaml - One or more 'role' files that contain the config to be \n   passed into your app depending on the deployment context.\n\nAll of the required files will be created for you with the 'ploybot skel' command.\n\nOptional\n~~~~~~~~\n\n1. membrane.py - For Django projects it's nice to have a little shim to expose\n   the project as a WSGI app.  I like to call mine membrane.py.  You can use \n   whatever you like, or nothing at all, depending on your setup.\n2. my-django-project - ploybot isn't restricted to Django; any valid WSGI app on \n   your Python path should be servable.  But for Django projects I think it \n   makes sense to stick them right there.\n\n.. _Supervisord: http://supervisord.org/\n.. _Nginx: http://nginx.org/\n.. _Ubuntu: http://www.ubuntu.com/\n.. _Gunicorn: http://gunicorn.org/\n.. _Fabric: http://docs.fabfile.org/\n.. _Virtualenv: http://virtualenv.openplans.org/", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://bitbucket.org/dori/ploybot", "keywords": null, "license": "LICENSE.txt", "maintainer": null, "maintainer_email": null, "name": "ploybot", "package_url": "https://pypi.org/project/ploybot/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/ploybot/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://bitbucket.org/dori/ploybot"}, "release_url": "https://pypi.org/project/ploybot/0.1/", "requires_dist": null, "requires_python": null, "summary": "A modular Fabric-based tool for deploying WSGI apps.", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            Overview<br>--------<br><br>ploybot is a Fabric_ based tool for setting up Python WSGI apps on what I like to<br>call the SNUG stack:<br><br>* Supervisord_ for starting processes and keeping them alive.<br>* Nginx_ for proxying between your WSGI app and the big bad web.<br>* Ubuntu_ as the OS of choice, enabling resolution of system dependencies with<br>  apt.  Debian might work as well but hasn't been tested.<br>* Gunicorn_ for serving your WSGI app.<br><br>(I suppose it could also be the GUNS stack but that sounds far less friendly.)<br><br>Key Features<br>~~~~~~~~~~~~<br><br>* Deploy your site to one or more servers with a single command ('ploybot push').<br>* Automatic configuration of Nginx, Supervisord, and Gunicorn to get your site running.<br>* Isolation of each site into a separate Virtualenv_<br>* Support for differing app config depending on which role you deploy to (a <br>  different DB in staging than production, for example).<br><br>Installation<br>~~~~~~~~~~~~<br><br>Use pip::<br><br>    pip install ploybot<br><br>You can also install the current development version straight from bitbucket::<br><br>    pip install hg+http://bitbucket.org/dori/ploybot#egg=ploybot<br><br>Commands<br>--------<br><br>(Almost) all of the commands below require that you specify a role name, like<br>'ploybot dosomething -R dev'.<br><br>Commands can generally be run from the site root directory or any subdirectory<br>of it.<br><br>push<br>~~~~<br><br>::<br><br>    ploybot push -R rolename<br><br>This command is the main reason for ploybot's existence. It does the work required<br>to get your app running on a host (or set of hosts) given the configuration<br>specified in site.yaml and the selected role .yaml file.  'push' does the<br>following:<br><br>1. SSHes to the remote server(s) specified in the role config.<br>2. Creates a zipped up rollback archive of the old site if there's one<br>   there already.<br>3. Creates a virtualenv for the site.<br>4. Installs apt and python dependencies.<br>5. Copies the site from your local machine to a temporary directory on the<br>   remote server.<br>6. Writes config file includes for nginx and supervisord.<br>7. Moves your code from the temp dir into its production location<br>   (/srv/&lt;sitename&gt; by default).<br>8. Tells nginx and supervisord to reload their configs.<br><br><br>rollback<br>~~~~~~~~<br><br>::<br><br>    ploybot rollback -R rolename<br><br>This command is for when you have those 'OMG I BROKE THE SITE' moments. It will<br>SSH to the push_hosts specified in your role file and restore the most recent<br>archive of the site. ploybot keeps 3 rollback copies of your site, so you could<br>potentially run 'ploybot rollback' 3 times to go back to the state from 3<br>deployments ago.<br><br>run<br>~~~<br><br>::<br><br>    ploybot run -R rolename<br><br>This command runs the site from the local machine, on port 8000.  (Nothing is<br>pushed of copied.)  Static directories listed in the *static_dirs* section of<br>site.yaml will also be served.  (CherryPy is used for this magic.)<br><br>install_server_deps<br>~~~~~~~~~~~~<br><br>::<br><br>    ploybot install_server_deps -R rolename<br><br>When you get a shiny new server with that fresh Ubuntu smell, it needs just a<br>tiny bit of setup before it will know how to serve ploybot-deployed sites.  This<br>command does that.  It installs nginx and supervisord, and gives each of them a<br>wildcard include in their configs for loading from /srv/&lt;sitename&gt;/conf.<br><br>pip_deps<br>~~~~<br><br>::<br><br>    ploybot pip_deps<br><br>This command wraps 'pip install' to install all of the python packages listed<br>in requirements.txt into your local python environment.  It's handy for grabbing all<br>the dependencies when you're working with a new virtualenv on an existing<br>project.<br><br><br>create_virtualenv<br>~~~~<br><br>::<br><br>    ploybot create_virtualenv<br><br>Creates a virtual environment for the app to be deployed.<br><br><br>configure_nginx<br>~~~~<br><br>    ploybot configure_nginx<br>    <br>Configures nginx<br><br><br>switch_nginx<br>~~~~<br><br>    ploybot switch_nginx<br>    <br>Reloads nginx config<br><br><br>configure_supervisor<br>~~~~<br><br>    ploybot configure_supervisor<br>    <br>Configures supervisor<br><br><br>start_process<br>~~~~<br><br>    ploybot start_process<br>    <br>Starts process<br><br><br>stop_other_versions<br>~~~~<br><br>    ploybot stop_other_versions<br>    <br>Kills other running proccesses of this app<br><br><br>skel<br>~~~~<br><br>::<br><br>    ploybot skel sitename<br><br>Creates a directory with a basic ploybot file and directory structure.<br><br>Layout<br>------<br><br>A ploybot-enabled project should be layed out something like this::<br><br>  mysite.com<br>  \u251c\u2500\u2500 deps.yaml<br>  \u251c\u2500\u2500 fabfile.py<br>  \u251c\u2500\u2500 membrane.py<br>  \u251c\u2500\u2500 roles<br>  \u2502\u00a0\u00a0 \u251c\u2500\u2500 dev.yaml<br>  \u2502\u00a0\u00a0 \u251c\u2500\u2500 staging.yaml<br>  \u2502\u00a0\u00a0 \u2514\u2500\u2500 production.yaml<br>  \u251c\u2500\u2500 site.yaml<br>  \u2514\u2500\u2500 my-django-project<br><br>Some of those files/folders are required, other are optional:<br><br>Required<br>~~~~~~~~<br><br>1. site.yaml - This is the main config file (comparable to app.yaml in Google<br>   App Engine)<br>2. deps.yaml - Lists Python packages, Ubuntu apt packages, and apt build <br>   dependencies that need to be installed on the server running your site.<br>3. fabfile.py - A Fabric_-compatible fabfile that imports ploybot's Fabric <br>   functions.<br>4. roles/\\*.yaml - One or more 'role' files that contain the config to be <br>   passed into your app depending on the deployment context.<br><br>All of the required files will be created for you with the 'ploybot skel' command.<br><br>Optional<br>~~~~~~~~<br><br>1. membrane.py - For Django projects it's nice to have a little shim to expose<br>   the project as a WSGI app.  I like to call mine membrane.py.  You can use <br>   whatever you like, or nothing at all, depending on your setup.<br>2. my-django-project - ploybot isn't restricted to Django; any valid WSGI app on <br>   your Python path should be servable.  But for Django projects I think it <br>   makes sense to stick them right there.<br><br>.. _Supervisord: http://supervisord.org/<br>.. _Nginx: http://nginx.org/<br>.. _Ubuntu: http://www.ubuntu.com/<br>.. _Gunicorn: http://gunicorn.org/<br>.. _Fabric: http://docs.fabfile.org/<br>.. _Virtualenv: http://virtualenv.openplans.org/\n          </div>"}, "last_serial": 611917, "releases": {"0.1": []}, "urls": [], "timestamp": "Fri May  8 02:52:31 2020"}