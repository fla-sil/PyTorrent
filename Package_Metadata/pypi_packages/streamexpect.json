{"info": {"author": "Nick Stevens", "author_email": "nick.stevens@digi.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Topic :: Software Development :: Libraries"], "description": "streamexpect\n============\n\n|Build Status| |Coverage Status| |Code Climate| |GitHub Issues| |PyPI|\n|License|\n\nstreamexpect is a library providing cross-platform \"expect-like\"\nfunctionality for generic Python streams and sockets . It is similar to\nthe `Pexpect <https://pexpect.readthedocs.org>`__ library, except where\nPexpect explicitly requires an underlying file (usually a TTY),\nstreamexpect uses duck-typing and requires only a ``read`` or ``recv``\nmethod.\n\n`View the Full\nDocumentation <https://digidotcom.github.io/python-streamexpect>`__\n\nThe original version of streamexpect was generously donated by\n`Digi <http://www.digi.com>`__ `Wireless Design\nServices <http://www.digi.com/wds>`__. The software is provided as Alpha\nsoftware and has not undergone formal testing. It does, however, ship\nwith extensive unit testing.\n\n`View the\nChangelog <https://github.com/digidotcom/python-streamexpect/blob/master/CHANGELOG.md>`__\n\nInstallation\n============\n\nInstallation is performed using pip. The latest released version of\nstreamexpect can be obtained with the following command:\n\n.. code:: sh\n\n    $ pip install streamexpect\n\nTo install the development version from GitHub:\n\n.. code:: sh\n\n    $ pip install -U -e 'git+https://github.com/digidotcom/python-streamexpect#egg=streamexpect'\n\nExample\n=======\n\nThe following example shows opening a serial port (on a Windows PC),\nsending the ``uname`` command, and verifying that *Linux* is in the\nreturned data.\n\n.. code:: python\n\n    import serial\n    import streamexpect\n\n    # timeout=0 is essential, as streams are required to be non-blocking\n    ser = serial.Serial('COM1', baudrate=115200, timeout=0)\n\n    with streamexpect.wrap(ser) as stream:\n      stream.write('\\r\\nuname -a\\r\\n')\n      match = stream.expect_bytes('Linux', timeout=1.0)\n      print(u'Found Linux at index {}'.format(match.start))\n\nDesign Goals\n============\n\n-  Be Cross-Platform\n\nThe library should not depend on any features (besides Python) that\nexclude a platform. Yes, that means Windows is a first-class citizen.\n\n-  Be Explicit In Encoding\n\nWhen dealing with streams of data, the distinction between when the\nstream goes from being a series of binary bytes to a set of encoded\ncharacters can be unclear. The library should be explicit in the\nhandling of binary versus characters, such that mixing the two types is\nnot allowed without explicit options to enable encoding and decoding.\n\n-  Common Use Cases Should Be Simple\n\nFor 95% of users, the ``streamexpect.wrap`` function should accomplish\nthe desired goals. Intelligent default options should be used so the\nlibrary just \"does the right thing\".\n\n-  Complicated Use Cases Should Be Possible\n\nThe objects returned by the ``streamexpect.wrap`` function should\nthemselves be easy to use and extend. Protocol requirements between\nclasses should be explicit and documented.\n\nDevelopment\n===========\n\nDevelopment of streamexpect takes place in the open on GitHub. Please\nuse pull requests to submit changes to code and documentation.\n\nThe process for building and testing streamexpect has been automated as\nmuch as possible. `tox <https://testrun.org/tox/>`__ handles building\nand testing the code, as well as generating documentation and\nautomatically testing for code style issues. tox can be installed with\npip:\n\n::\n\n    pip install tox\n\nThe generic tox command looks like:\n\n::\n\n    tox\n\nThis will attempt to build and test streamexpect against multiple\ndifferent versions of Python, and will error on versions not found. To\ntest against only a single version of Python, specify the version at the\ntox command line. For example, to test only Python 2.7:\n\n::\n\n    tox -e py27\n\nMultiple versions may be specified, separated by a comma:\n\n::\n\n    tox -e py27,py35\n\nDocumentation generation and code style checking are not performed by\ndefault, and so must be explicitly provided to the tox command.\nDocumentation generation requires either Python 2.7, or Python 3.3 or\ngreater.\n\n::\n\n    tox -e docs,style\n\nLicense\n=======\n\nThis software is open-source software. Copyright Digi International,\n2015.\n\nThis Source Code Form is subject to the terms of the Mozilla Public\nLicense, v. 2.0. If a copy of the MPL was not distributed with this\nfile, you can obtain one at http://mozilla.org/MPL/2.0/.\n\n.. |Build Status| image:: https://travis-ci.org/digidotcom/python-streamexpect.svg?branch=master\n   :target: https://travis-ci.org/digidotcom/python-streamexpect\n.. |Coverage Status| image:: https://img.shields.io/coveralls/digidotcom/python-streamexpect.svg\n   :target: https://coveralls.io/r/digidotcom/python-streamexpect\n.. |Code Climate| image:: https://img.shields.io/codeclimate/github/digidotcom/python-streamexpect.svg\n   :target: https://codeclimate.com/github/digidotcom/python-streamexpect\n.. |GitHub Issues| image:: https://img.shields.io/github/issues/digidotcom/python-streamexpect.svg\n   :target: https://github.com/digidotcom/python-streamexpect/issues\n.. |PyPI| image:: https://img.shields.io/pypi/v/streamexpect.svg\n   :target: https://pypi.python.org/pypi/streamexpect/\n.. |License| image:: https://img.shields.io/badge/license-MPL%202.0-blue.svg\n   :target: https://github.com/digidotcom/python-streamexpect/blob/master/LICENSE.txt", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/digidotcom/python-streamexpect", "keywords": "expect pexpect search stream serial pyserial socket", "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "streamexpect", "package_url": "https://pypi.org/project/streamexpect/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/streamexpect/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/digidotcom/python-streamexpect"}, "release_url": "https://pypi.org/project/streamexpect/0.2.1/", "requires_dist": null, "requires_python": null, "summary": "expect-like tools over a Python stream", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"streamexpect\">\n<h2>streamexpect</h2>\n<p><a href=\"https://travis-ci.org/digidotcom/python-streamexpect\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0aadebb9af3e5f26c0febdaa1d8404eea6cc2eb4/68747470733a2f2f7472617669732d63692e6f72672f64696769646f74636f6d2f707974686f6e2d73747265616d6578706563742e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://coveralls.io/r/digidotcom/python-streamexpect\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1208c15876b1863dc108fd183cbea499bb0949c1/68747470733a2f2f696d672e736869656c64732e696f2f636f766572616c6c732f64696769646f74636f6d2f707974686f6e2d73747265616d6578706563742e737667\"></a> <a href=\"https://codeclimate.com/github/digidotcom/python-streamexpect\" rel=\"nofollow\"><img alt=\"Code Climate\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5f374c522234573d0648418b877aeac0b089a974/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636c696d6174652f6769746875622f64696769646f74636f6d2f707974686f6e2d73747265616d6578706563742e737667\"></a> <a href=\"https://github.com/digidotcom/python-streamexpect/issues\" rel=\"nofollow\"><img alt=\"GitHub Issues\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2b1756b17a47eac5628d699bbe06aa7455a2f0d3/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f64696769646f74636f6d2f707974686f6e2d73747265616d6578706563742e737667\"></a> <a href=\"https://pypi.python.org/pypi/streamexpect/\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5096eb5918493282e705689fc35052e883c30381/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f73747265616d6578706563742e737667\"></a>\n<a href=\"https://github.com/digidotcom/python-streamexpect/blob/master/LICENSE.txt\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/027804d6a4692dd83257d503ff1da27f322e79fc/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d504c253230322e302d626c75652e737667\"></a></p>\n<p>streamexpect is a library providing cross-platform \u201cexpect-like\u201d\nfunctionality for generic Python streams and sockets . It is similar to\nthe <a href=\"https://pexpect.readthedocs.org\" rel=\"nofollow\">Pexpect</a> library, except where\nPexpect explicitly requires an underlying file (usually a TTY),\nstreamexpect uses duck-typing and requires only a <tt>read</tt> or <tt>recv</tt>\nmethod.</p>\n<p><a href=\"https://digidotcom.github.io/python-streamexpect\" rel=\"nofollow\">View the Full\nDocumentation</a></p>\n<p>The original version of streamexpect was generously donated by\n<a href=\"http://www.digi.com\" rel=\"nofollow\">Digi</a> <a href=\"http://www.digi.com/wds\" rel=\"nofollow\">Wireless Design\nServices</a>. The software is provided as Alpha\nsoftware and has not undergone formal testing. It does, however, ship\nwith extensive unit testing.</p>\n<p><a href=\"https://github.com/digidotcom/python-streamexpect/blob/master/CHANGELOG.md\" rel=\"nofollow\">View the\nChangelog</a></p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Installation is performed using pip. The latest released version of\nstreamexpect can be obtained with the following command:</p>\n<pre>$ pip install streamexpect\n</pre>\n<p>To install the development version from GitHub:</p>\n<pre>$ pip install -U -e <span class=\"s1\">'git+https://github.com/digidotcom/python-streamexpect#egg=streamexpect'</span>\n</pre>\n</div>\n<div id=\"example\">\n<h2>Example</h2>\n<p>The following example shows opening a serial port (on a Windows PC),\nsending the <tt>uname</tt> command, and verifying that <em>Linux</em> is in the\nreturned data.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">serial</span>\n<span class=\"kn\">import</span> <span class=\"nn\">streamexpect</span>\n\n<span class=\"c1\"># timeout=0 is essential, as streams are required to be non-blocking</span>\n<span class=\"n\">ser</span> <span class=\"o\">=</span> <span class=\"n\">serial</span><span class=\"o\">.</span><span class=\"n\">Serial</span><span class=\"p\">(</span><span class=\"s1\">'COM1'</span><span class=\"p\">,</span> <span class=\"n\">baudrate</span><span class=\"o\">=</span><span class=\"mi\">115200</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"k\">with</span> <span class=\"n\">streamexpect</span><span class=\"o\">.</span><span class=\"n\">wrap</span><span class=\"p\">(</span><span class=\"n\">ser</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">stream</span><span class=\"p\">:</span>\n  <span class=\"n\">stream</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"se\">\\r\\n</span><span class=\"s1\">uname -a</span><span class=\"se\">\\r\\n</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n  <span class=\"n\">match</span> <span class=\"o\">=</span> <span class=\"n\">stream</span><span class=\"o\">.</span><span class=\"n\">expect_bytes</span><span class=\"p\">(</span><span class=\"s1\">'Linux'</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mf\">1.0</span><span class=\"p\">)</span>\n  <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">u</span><span class=\"s1\">'Found Linux at index </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">))</span>\n</pre>\n</div>\n<div id=\"design-goals\">\n<h2>Design Goals</h2>\n<ul>\n<li>Be Cross-Platform</li>\n</ul>\n<p>The library should not depend on any features (besides Python) that\nexclude a platform. Yes, that means Windows is a first-class citizen.</p>\n<ul>\n<li>Be Explicit In Encoding</li>\n</ul>\n<p>When dealing with streams of data, the distinction between when the\nstream goes from being a series of binary bytes to a set of encoded\ncharacters can be unclear. The library should be explicit in the\nhandling of binary versus characters, such that mixing the two types is\nnot allowed without explicit options to enable encoding and decoding.</p>\n<ul>\n<li>Common Use Cases Should Be Simple</li>\n</ul>\n<p>For 95% of users, the <tt>streamexpect.wrap</tt> function should accomplish\nthe desired goals. Intelligent default options should be used so the\nlibrary just \u201cdoes the right thing\u201d.</p>\n<ul>\n<li>Complicated Use Cases Should Be Possible</li>\n</ul>\n<p>The objects returned by the <tt>streamexpect.wrap</tt> function should\nthemselves be easy to use and extend. Protocol requirements between\nclasses should be explicit and documented.</p>\n</div>\n<div id=\"development\">\n<h2>Development</h2>\n<p>Development of streamexpect takes place in the open on GitHub. Please\nuse pull requests to submit changes to code and documentation.</p>\n<p>The process for building and testing streamexpect has been automated as\nmuch as possible. <a href=\"https://testrun.org/tox/\" rel=\"nofollow\">tox</a> handles building\nand testing the code, as well as generating documentation and\nautomatically testing for code style issues. tox can be installed with\npip:</p>\n<pre>pip install tox\n</pre>\n<p>The generic tox command looks like:</p>\n<pre>tox\n</pre>\n<p>This will attempt to build and test streamexpect against multiple\ndifferent versions of Python, and will error on versions not found. To\ntest against only a single version of Python, specify the version at the\ntox command line. For example, to test only Python 2.7:</p>\n<pre>tox -e py27\n</pre>\n<p>Multiple versions may be specified, separated by a comma:</p>\n<pre>tox -e py27,py35\n</pre>\n<p>Documentation generation and code style checking are not performed by\ndefault, and so must be explicitly provided to the tox command.\nDocumentation generation requires either Python 2.7, or Python 3.3 or\ngreater.</p>\n<pre>tox -e docs,style\n</pre>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>This software is open-source software. Copyright Digi International,\n2015.</p>\n<p>This Source Code Form is subject to the terms of the Mozilla Public\nLicense, v. 2.0. If a copy of the MPL was not distributed with this\nfile, you can obtain one at <a href=\"http://mozilla.org/MPL/2.0/\" rel=\"nofollow\">http://mozilla.org/MPL/2.0/</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 2447042, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "e0af7978111e9d1e97024167d0f7b48c", "sha256": "e294ebe4fddd65c445b6ed7c8e62364ed2f18655b700ac7566fd57221e41d8f5"}, "downloads": -1, "filename": "streamexpect-0.2.0.tar.gz", "has_sig": false, "md5_digest": "e0af7978111e9d1e97024167d0f7b48c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15120, "upload_time": "2016-01-19T18:27:18", "upload_time_iso_8601": "2016-01-19T18:27:18.225692Z", "url": "https://files.pythonhosted.org/packages/11/52/bf6fdf19bfc2dfd59df6e2ad73737665ab5e3aa6b28e2043c09f92daee6c/streamexpect-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "46e611d4e349a7a0497cbe3e1b5e4580", "sha256": "0ef3f22385dfa06d33b58b0294444e2f1b2b6e77e08b66b00821caedc76860ee"}, "downloads": -1, "filename": "streamexpect-0.2.1.tar.gz", "has_sig": false, "md5_digest": "46e611d4e349a7a0497cbe3e1b5e4580", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13571, "upload_time": "2016-11-07T14:13:59", "upload_time_iso_8601": "2016-11-07T14:13:59.393474Z", "url": "https://files.pythonhosted.org/packages/10/98/fae2035b7fce8d0f04b5a883c745ce3dab453510a0d46a162e5180402e42/streamexpect-0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "46e611d4e349a7a0497cbe3e1b5e4580", "sha256": "0ef3f22385dfa06d33b58b0294444e2f1b2b6e77e08b66b00821caedc76860ee"}, "downloads": -1, "filename": "streamexpect-0.2.1.tar.gz", "has_sig": false, "md5_digest": "46e611d4e349a7a0497cbe3e1b5e4580", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13571, "upload_time": "2016-11-07T14:13:59", "upload_time_iso_8601": "2016-11-07T14:13:59.393474Z", "url": "https://files.pythonhosted.org/packages/10/98/fae2035b7fce8d0f04b5a883c745ce3dab453510a0d46a162e5180402e42/streamexpect-0.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:01:22 2020"}