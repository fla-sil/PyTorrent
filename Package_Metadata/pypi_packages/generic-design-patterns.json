{"info": {"author": "ShadowCodeCz", "author_email": "shadow.code.cz@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3.9"], "description": "# Python Generic Design Patterns\n\n[![PyPI-Status](https://img.shields.io/pypi/v/generic-design-patterns.svg)](https://pypi.org/project/generic-design-patterns/)\n[![PyPI-Versions](https://img.shields.io/pypi/pyversions/generic-design-patterns.svg)](https://pypi.org/project/generic-design-patterns/)\n[![GitHub issues](https://img.shields.io/github/issues/ShadowCodeCz/generic_design_patterns)](https://github.com/ShadowCodeCz/generic_design_patterns/issues)\n[![Build Status](https://travis-ci.com/ShadowCodeCz/generic_design_patterns.svg?branch=master)](https://travis-ci.com/ShadowCodeCz/generic_design_patterns)\n[![GitHub license](https://img.shields.io/github/license/ShadowCodeCz/generic_design_patterns)](https://github.com/ShadowCodeCz/generic_design_patterns/blob/master/LICENSE)\n\nPython package implements design patterns in generic way. Its can be used in a wide range of projects.\nSome of these patterns are slightly improved for efficient use in real-world projects.\n\n## Installation \n```python\npip install generic-design-patterns \n``` \n\n## Overview\n\n### Implemented Patterns\n* [Chain of responsibility](#chain-of-responsibility)\n\n* [Event Provider](#event-provider)\n\n* [Specification](#specification)\n\n### Other parts of package\n* [Plugin](#plugin)\n\n## Chain Of Responsibility\nThe purpose of this text is not to explain the principles of chain of responsibility. For example, source describing CoR is [refactoring.guru].\nThis package implements node of chain as plugin. For more information about plugin in this package visit [plugin chapter](#plugin).\n\n\n### How it works in few steps\n1. User create chain node plugin\n\n2. User set collectors which collect all chain nodes (plugins)\n\n3. User call build function\n\n\n### Chain Node\nChain node have to inherit from  `gdp.chain.ChainNodePlugin`, which inherit form `yapsy.IPlugin.IPlugin`. \n\nEach node of chain have to implement these methods:\n* `check()` - It detects that the request is handleable by the node. The method has to return bool value.\n\n* `handle()` - It is performing method which processes the request. It returns result. \n\n* `description()` - It returns string or any other class which describes the node/plugin.\n\nAll nodes/plugins (in one chain) have to implement `check()` and `handle()` with same arguments.    \n\n### Examples\nHere is a short minimum example. It implements chain nodes for pseudo handling different text formats.\n\n![Chain of responsibility example][chain_example]\n\n#### TXT Node Plugin\n```python\nimport generic_design_patterns as gdp\n\nclass TxtChainPlugin(gdp.chain.ChainNodePlugin):\n    answer = \"txt successfully handled\"\n\n    def check(self, input_string):\n        return \"txt\" == input_string.strip()\n\n    def handle(self, input_string):\n        return self.answer\n\n    def description(self):\n        return \"txt\"\n``` \n\n#### JSON Node Plugin\n```python\nimport generic_design_patterns as gdp\n\nclass JsonChainPlugin(gdp.chain.ChainNodePlugin):\n    answer = \"json successfully handled\"\n\n    def check(self, input_string):\n        return \"json\" == input_string.strip()\n\n    def handle(self, input_string):\n        return self.answer\n\n    def description(self):\n        return \"json\"\n``` \n\n#### Build chain\n```python\nimport generic_design_patterns as gdp\n\ncollectors = [gdp.plugin.SubclassPluginCollector(gdp.chain.ChainNodePlugin)]\nchain = gdp.chain.build(collectors)\n``` \nThis example uses `gdp.plugin.SubclassPluginCollector`. This package implements more plugin collectors, which are described in part [plugin collectors](#collectors).\n\n\n#### Handle request by chain\n```python\nfor request in [\"txt\", \"json\", \"yaml\"]:\n    result = chain.handle(request)\n    print(result)\n``` \n\n```python\n>>> txt successfully handled\n>>> json successfully handled\n>>> None\n``` \n\n#### Get description of chain nodes\nThe chain is dynamically build by collected plugins. Generally we do not know which nodes chain will contain (before build). \nHowever assembled chain should offer information about its nodes. It other words chain should describe which request is able handle.\nThis feature cover chain method `description()`.\n\n```python\ndescriptions = chain.description()\nprint(descriptions)\n``` \n```python\n>>> [\"txt\", \"json\"]\n``` \n\n\nInput value _yaml_ has not handler in the chain. In that case return value is `None`.\n\n## Event Provider\nThis standard implementation of publisher-subscriber design pattern. There are not any improvements. Note that current implementation is only for single thread/process usage. \n\n### How it works\n* Main part is event provider, which store subscriptions. On the basis of subscriptions provider directs notifications to right subscribers. \n\n* Subscribers can register at provider.\n\n* Publishers can send notification via provider.\n\n### Examples\nThe code shows minimum example. Note:\n* The subscriber has to implement `update()` method. The package contains `AdvancedSubscriber` class which add methods for subscribe and unsubscribe itself.\n\n* The publisher is created only for this example. Important is line where `notify()` method is called. \n\n* The example shows how to make subscription. It has to part string `message` and `subscriber` object.\n\n* Use notification class from this package or your custom class which should inherit from it. The most import is that notification has to contain message attribute.\n\n```python\nimport generic_design_patterns as gdp\n\ndummy_message = \"dummy message\"\n\nclass DummySubscriber(gdp.event.Subscriber):\n    def __init__(self):\n        self.notification = None\n\n    def update(self, notification):\n        print(notification.message)\n\nclass DummyPublisher:\n    def __init__(self, provider):\n        self.provider = provider\n    \n    def publish(self):\n        dummy_notification = gdp.event.Notification(dummy_message)\n        self.provider.notify(dummy_notification)\n\nprovider = gdp.event.Provider()\n\nsubscriber = DummySubscriber()\nprovider.subscribe(dummy_message, subscriber)\n\npublisher = DummyPublisher(provider)\npublisher.publish()\n\nprint(subscriber.notification.message)\n``` \n\n```python\n>>> dummy message\n``` \n\n## Specification\nThe purpose of this text is not to explain the principles of specification pattern. For detail information visit [wiki - specification pattern]. \n\nHowever it is useful to describe the most important aspects of this pattern:\n* This pattern encapsulates condition to class.\n\n* This pattern enables compose condition together and create more complex conditions. All this without losing readability and clarity. In other words, it allows to avoid an endless cascade of if-else cascades or some very long condition.\n\n* This pattern allows to create the composite conditions dynamically.\n\n### Examples\nThe example is intended to demonstrate the creation of a complex condition.\n\nFirst of all define list to work with.\n```python\nalphabet_list = [\"Alpha\", \"Bravo\", \"Charlie\", \"Delta\", \"Echo\", \"Foxtrot\", \"Golf\", \"Hotel\"]\n```\n\nNow define rules for selecting items:\n* Select items its index is lower or equal to 2 and not start with char \"b\" (case insensitive).\n\n* Select items its index is higher than 2 and it contains \"e\" or \"a\" but not both.  (case insensitive)\n\n#### Create single conditions by specification pattern\n```python\nimport generic_design_patterns as gdp\n\nclass ContainChar(gdp.specification.Condition):\n    required_char = \"\"\n\n    def is_satisfied(self, index, item):\n        return self.required_char in item.lower()\n\n\nclass ContainCharA(ContainChar):\n    required_char = \"a\"\n\n\nclass ContainCharE(ContainChar):\n    required_char = \"e\"\n\n\nclass IsIndexHigherThanTwo(gdp.specification.Condition):\n    def is_satisfied(self, index, item):\n        return index > 2\n\nclass FirstCharIsB(gdp.specification.Condition):\n    def is_satisfied(self, index, item):\n        return item[0].lower() == \"b\"\n```\nNote that input arguments of method `is_satisfied()`, it depends only on the user's requirements. But it is necessary that the arguments of all conditions are the same.\n\n#### Put single conditions together\n```python\ncondition = (~IndexHigherThanTwo() & ~FirstCharIsB())  \ncondition |= (IndexHigherThanTwo() & (ContainCharA() ^ ContainCharE()))\n``` \n\n#### Apply condition\nIterate over the list and filter items which meet condition.\n```python\nfor index, item in enumerate(alphabet_list):\n    if condition(index, item):\n        print(item)\n``` \n\n```python\n>>> Alpha\n>>> Charlie\n>>> Echo\n>>> Hotel\n``` \n\n## Plugin \nHere is not implement some plugin system. Plugin module only encapsulates existing systems \nand makes it easier to use. Current version of the package uses plugin only for [chain of responsibility](#chain-of-responsibility).\n\n### Collectors\nIn the context of this package, plugin can be average class or [Yapsy] plugin. For more information about Yapsy plugin system visit [Yapsy documentation] pages.\n\nCollectors are intended for find plugin and make it accessible. This package contains three basic plugin collectors:\n* `gdp.plugin.YapsyPluginCollector`\n* `gdp.plugin.YapsyRegExPluginCollector`\n* `gdp.plugin.SubclassPluginCollector`\n\nAll examples in this chapter follow the example in chapter [chain of responsibility](#chain-of-responsibility).\n\n#### YapsyPluginCollector\nIn the default setting, this collector find standard [Yapsy] plugins by `.yapsy-plugin` info file.\n\nAssume this directory structure:\n```\n+- plugins/\n   +- toml.py\n   +- toml.yapsy-plugin\n   +- yaml.py\n   +- yaml.yapsy-plugin\n``` \n\n#####  toml.py\n```python\nimport generic_design_patterns as gdp\n\n\nclass TomlChainPlugin(gdp.chain.ChainNodePlugin):\n    answer = \"toml successfully handled\"\n\n    def check(self, input_string):\n        return \"toml\" == input_string.strip()\n\n    def handle(self, input_string):\n        return self.answer\n\n    def description(self):\n        return \"toml\"\n``` \n\n#####  toml.yapsy-plugin\n```\n[Core]\nName = toml\nModule = toml\n\n[Documentation]\nAuthor = ShadowCodeCz\nVersion = 0.1\nDescription = Test Toml Plugin\n``` \n\nToml and Yaml plugins are similar. \n\n##### Collector construction\n```python\nimport generic_design_patterns as gdp\n\ncollector = gdp.plugin.YapsyPluginCollector([\"./plugins\"])\n``` \nIf you are experienced with [Yapsy], you can use attribute `plugin_manager` of `gdp.plugin.YapsyPluginCollector` class. It is instance of `yapsy.PluginManager.PluginManager`. \n\n#### YapsyRegExPluginCollector\nThis collector is child of `YapsyPluginCollector`, which bring some improvements:\n* plugins are located in destination by regular expression\n* `.yapsy-plugin` are not required\n\nAssume this directory structure which is similar to previous one only without `.yapsy-plugin`. Contents of `.py` file are same.\n```\n+- plugins/\n   +- t_plugin_toml.py\n   +- t_plugin_yaml.py\n``` \n\n##### Collector construction\n```python\nimport generic_design_patterns as gdp\n\ncollector = gdp.plugin.YapsyRegExPluginCollector([\"./plugins\"], \"t_plugin_.+.py$\")\n```\nBe careful about regular expression. Especially about ending symbol `$`. It will find also `.pyc` files without `$` at the end of re. It will causes problems. \n\n#### SubclassPluginCollector\nIt is collecting all child of selected class. The example of usage the collector `SubclassPluginCollector` is in [chain of responsibility](#chain-of-responsibility) chapter.\n\n\n[chain_example]: img/chain_example.svg \"Chain of responsibility example\"\n[chain_of_plugins_design]: img/chain_plugin_design.svg \"Chain of plugins design\"\n[refactoring.guru]: https://refactoring.guru/design-patterns/chain-of-responsibility\n[Yapsy]: https://pypi.org/project/Yapsy/\n[Yapsy documentation]: http://yapsy.sourceforge.net/\n[wiki - specification pattern]: https://en.wikipedia.org/wiki/Specification_pattern", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ShadowCodeCz/generic_design_patterns", "keywords": "design patterns event chain specification", "license": "GNU Affero General Public License v3 or later (AGPLv3+)", "maintainer": "", "maintainer_email": "", "name": "generic-design-patterns", "package_url": "https://pypi.org/project/generic-design-patterns/", "platform": "", "project_url": "https://pypi.org/project/generic-design-patterns/", "project_urls": {"Homepage": "https://github.com/ShadowCodeCz/generic_design_patterns", "Source": "https://github.com/ShadowCodeCz/generic_design_patterns", "Tracker": "https://github.com/ShadowCodeCz/generic_design_patterns/issues"}, "release_url": "https://pypi.org/project/generic-design-patterns/1.0.9/", "requires_dist": null, "requires_python": "", "summary": "Python package implements design patterns in generic way. Its can be used in a wide range of projects.", "version": "1.0.9", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Python Generic Design Patterns</h1>\n<p><a href=\"https://pypi.org/project/generic-design-patterns/\" rel=\"nofollow\"><img alt=\"PyPI-Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/308d884edae06e50da0200bc05c28634623b6d43/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f67656e657269632d64657369676e2d7061747465726e732e737667\"></a>\n<a href=\"https://pypi.org/project/generic-design-patterns/\" rel=\"nofollow\"><img alt=\"PyPI-Versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ba60fb5e083a21e1df3774329fbeb61f16164267/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f67656e657269632d64657369676e2d7061747465726e732e737667\"></a>\n<a href=\"https://github.com/ShadowCodeCz/generic_design_patterns/issues\" rel=\"nofollow\"><img alt=\"GitHub issues\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2a722ecda18f5e3540f8e3ca33013612135e98f6/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f536861646f77436f6465437a2f67656e657269635f64657369676e5f7061747465726e73\"></a>\n<a href=\"https://travis-ci.com/ShadowCodeCz/generic_design_patterns\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4513fe87eedb7451e00a43dcd83c869a97e3a5c1/68747470733a2f2f7472617669732d63692e636f6d2f536861646f77436f6465437a2f67656e657269635f64657369676e5f7061747465726e732e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://github.com/ShadowCodeCz/generic_design_patterns/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"GitHub license\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cfd91d9a17927e55a86c2c5a81e7ec7e446be4a5/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f536861646f77436f6465437a2f67656e657269635f64657369676e5f7061747465726e73\"></a></p>\n<p>Python package implements design patterns in generic way. Its can be used in a wide range of projects.\nSome of these patterns are slightly improved for efficient use in real-world projects.</p>\n<h2>Installation</h2>\n<pre><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">generic</span><span class=\"o\">-</span><span class=\"n\">design</span><span class=\"o\">-</span><span class=\"n\">patterns</span> \n</pre>\n<h2>Overview</h2>\n<h3>Implemented Patterns</h3>\n<ul>\n<li>\n<p><a href=\"#chain-of-responsibility\" rel=\"nofollow\">Chain of responsibility</a></p>\n</li>\n<li>\n<p><a href=\"#event-provider\" rel=\"nofollow\">Event Provider</a></p>\n</li>\n<li>\n<p><a href=\"#specification\" rel=\"nofollow\">Specification</a></p>\n</li>\n</ul>\n<h3>Other parts of package</h3>\n<ul>\n<li><a href=\"#plugin\" rel=\"nofollow\">Plugin</a></li>\n</ul>\n<h2>Chain Of Responsibility</h2>\n<p>The purpose of this text is not to explain the principles of chain of responsibility. For example, source describing CoR is <a href=\"https://refactoring.guru/design-patterns/chain-of-responsibility\" rel=\"nofollow\">refactoring.guru</a>.\nThis package implements node of chain as plugin. For more information about plugin in this package visit <a href=\"#plugin\" rel=\"nofollow\">plugin chapter</a>.</p>\n<h3>How it works in few steps</h3>\n<ol>\n<li>\n<p>User create chain node plugin</p>\n</li>\n<li>\n<p>User set collectors which collect all chain nodes (plugins)</p>\n</li>\n<li>\n<p>User call build function</p>\n</li>\n</ol>\n<h3>Chain Node</h3>\n<p>Chain node have to inherit from  <code>gdp.chain.ChainNodePlugin</code>, which inherit form <code>yapsy.IPlugin.IPlugin</code>.</p>\n<p>Each node of chain have to implement these methods:</p>\n<ul>\n<li>\n<p><code>check()</code> - It detects that the request is handleable by the node. The method has to return bool value.</p>\n</li>\n<li>\n<p><code>handle()</code> - It is performing method which processes the request. It returns result.</p>\n</li>\n<li>\n<p><code>description()</code> - It returns string or any other class which describes the node/plugin.</p>\n</li>\n</ul>\n<p>All nodes/plugins (in one chain) have to implement <code>check()</code> and <code>handle()</code> with same arguments.</p>\n<h3>Examples</h3>\n<p>Here is a short minimum example. It implements chain nodes for pseudo handling different text formats.</p>\n<p><img alt=\"Chain of responsibility example\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/050fab575ca52a12a4ab7ad8b8d3cc3f73044154/696d672f636861696e5f6578616d706c652e737667\"></p>\n<h4>TXT Node Plugin</h4>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">generic_design_patterns</span> <span class=\"k\">as</span> <span class=\"nn\">gdp</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">TxtChainPlugin</span><span class=\"p\">(</span><span class=\"n\">gdp</span><span class=\"o\">.</span><span class=\"n\">chain</span><span class=\"o\">.</span><span class=\"n\">ChainNodePlugin</span><span class=\"p\">):</span>\n    <span class=\"n\">answer</span> <span class=\"o\">=</span> <span class=\"s2\">\"txt successfully handled\"</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">check</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">input_string</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s2\">\"txt\"</span> <span class=\"o\">==</span> <span class=\"n\">input_string</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">handle</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">input_string</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">answer</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">description</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s2\">\"txt\"</span>\n</pre>\n<h4>JSON Node Plugin</h4>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">generic_design_patterns</span> <span class=\"k\">as</span> <span class=\"nn\">gdp</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">JsonChainPlugin</span><span class=\"p\">(</span><span class=\"n\">gdp</span><span class=\"o\">.</span><span class=\"n\">chain</span><span class=\"o\">.</span><span class=\"n\">ChainNodePlugin</span><span class=\"p\">):</span>\n    <span class=\"n\">answer</span> <span class=\"o\">=</span> <span class=\"s2\">\"json successfully handled\"</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">check</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">input_string</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s2\">\"json\"</span> <span class=\"o\">==</span> <span class=\"n\">input_string</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">handle</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">input_string</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">answer</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">description</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s2\">\"json\"</span>\n</pre>\n<h4>Build chain</h4>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">generic_design_patterns</span> <span class=\"k\">as</span> <span class=\"nn\">gdp</span>\n\n<span class=\"n\">collectors</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">gdp</span><span class=\"o\">.</span><span class=\"n\">plugin</span><span class=\"o\">.</span><span class=\"n\">SubclassPluginCollector</span><span class=\"p\">(</span><span class=\"n\">gdp</span><span class=\"o\">.</span><span class=\"n\">chain</span><span class=\"o\">.</span><span class=\"n\">ChainNodePlugin</span><span class=\"p\">)]</span>\n<span class=\"n\">chain</span> <span class=\"o\">=</span> <span class=\"n\">gdp</span><span class=\"o\">.</span><span class=\"n\">chain</span><span class=\"o\">.</span><span class=\"n\">build</span><span class=\"p\">(</span><span class=\"n\">collectors</span><span class=\"p\">)</span>\n</pre>\n<p>This example uses <code>gdp.plugin.SubclassPluginCollector</code>. This package implements more plugin collectors, which are described in part <a href=\"#collectors\" rel=\"nofollow\">plugin collectors</a>.</p>\n<h4>Handle request by chain</h4>\n<pre><span class=\"k\">for</span> <span class=\"n\">request</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s2\">\"txt\"</span><span class=\"p\">,</span> <span class=\"s2\">\"json\"</span><span class=\"p\">,</span> <span class=\"s2\">\"yaml\"</span><span class=\"p\">]:</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">chain</span><span class=\"o\">.</span><span class=\"n\">handle</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">txt</span> <span class=\"n\">successfully</span> <span class=\"n\">handled</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">json</span> <span class=\"n\">successfully</span> <span class=\"n\">handled</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kc\">None</span>\n</pre>\n<h4>Get description of chain nodes</h4>\n<p>The chain is dynamically build by collected plugins. Generally we do not know which nodes chain will contain (before build).\nHowever assembled chain should offer information about its nodes. It other words chain should describe which request is able handle.\nThis feature cover chain method <code>description()</code>.</p>\n<pre><span class=\"n\">descriptions</span> <span class=\"o\">=</span> <span class=\"n\">chain</span><span class=\"o\">.</span><span class=\"n\">description</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">descriptions</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">[</span><span class=\"s2\">\"txt\"</span><span class=\"p\">,</span> <span class=\"s2\">\"json\"</span><span class=\"p\">]</span>\n</pre>\n<p>Input value <em>yaml</em> has not handler in the chain. In that case return value is <code>None</code>.</p>\n<h2>Event Provider</h2>\n<p>This standard implementation of publisher-subscriber design pattern. There are not any improvements. Note that current implementation is only for single thread/process usage.</p>\n<h3>How it works</h3>\n<ul>\n<li>\n<p>Main part is event provider, which store subscriptions. On the basis of subscriptions provider directs notifications to right subscribers.</p>\n</li>\n<li>\n<p>Subscribers can register at provider.</p>\n</li>\n<li>\n<p>Publishers can send notification via provider.</p>\n</li>\n</ul>\n<h3>Examples</h3>\n<p>The code shows minimum example. Note:</p>\n<ul>\n<li>\n<p>The subscriber has to implement <code>update()</code> method. The package contains <code>AdvancedSubscriber</code> class which add methods for subscribe and unsubscribe itself.</p>\n</li>\n<li>\n<p>The publisher is created only for this example. Important is line where <code>notify()</code> method is called.</p>\n</li>\n<li>\n<p>The example shows how to make subscription. It has to part string <code>message</code> and <code>subscriber</code> object.</p>\n</li>\n<li>\n<p>Use notification class from this package or your custom class which should inherit from it. The most import is that notification has to contain message attribute.</p>\n</li>\n</ul>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">generic_design_patterns</span> <span class=\"k\">as</span> <span class=\"nn\">gdp</span>\n\n<span class=\"n\">dummy_message</span> <span class=\"o\">=</span> <span class=\"s2\">\"dummy message\"</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">DummySubscriber</span><span class=\"p\">(</span><span class=\"n\">gdp</span><span class=\"o\">.</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">Subscriber</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">notification</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">notification</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">notification</span><span class=\"o\">.</span><span class=\"n\">message</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">DummyPublisher</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">provider</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">provider</span> <span class=\"o\">=</span> <span class=\"n\">provider</span>\n    \n    <span class=\"k\">def</span> <span class=\"nf\">publish</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">dummy_notification</span> <span class=\"o\">=</span> <span class=\"n\">gdp</span><span class=\"o\">.</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">Notification</span><span class=\"p\">(</span><span class=\"n\">dummy_message</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">provider</span><span class=\"o\">.</span><span class=\"n\">notify</span><span class=\"p\">(</span><span class=\"n\">dummy_notification</span><span class=\"p\">)</span>\n\n<span class=\"n\">provider</span> <span class=\"o\">=</span> <span class=\"n\">gdp</span><span class=\"o\">.</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">Provider</span><span class=\"p\">()</span>\n\n<span class=\"n\">subscriber</span> <span class=\"o\">=</span> <span class=\"n\">DummySubscriber</span><span class=\"p\">()</span>\n<span class=\"n\">provider</span><span class=\"o\">.</span><span class=\"n\">subscribe</span><span class=\"p\">(</span><span class=\"n\">dummy_message</span><span class=\"p\">,</span> <span class=\"n\">subscriber</span><span class=\"p\">)</span>\n\n<span class=\"n\">publisher</span> <span class=\"o\">=</span> <span class=\"n\">DummyPublisher</span><span class=\"p\">(</span><span class=\"n\">provider</span><span class=\"p\">)</span>\n<span class=\"n\">publisher</span><span class=\"o\">.</span><span class=\"n\">publish</span><span class=\"p\">()</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">subscriber</span><span class=\"o\">.</span><span class=\"n\">notification</span><span class=\"o\">.</span><span class=\"n\">message</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dummy</span> <span class=\"n\">message</span>\n</pre>\n<h2>Specification</h2>\n<p>The purpose of this text is not to explain the principles of specification pattern. For detail information visit <a href=\"https://en.wikipedia.org/wiki/Specification_pattern\" rel=\"nofollow\">wiki - specification pattern</a>.</p>\n<p>However it is useful to describe the most important aspects of this pattern:</p>\n<ul>\n<li>\n<p>This pattern encapsulates condition to class.</p>\n</li>\n<li>\n<p>This pattern enables compose condition together and create more complex conditions. All this without losing readability and clarity. In other words, it allows to avoid an endless cascade of if-else cascades or some very long condition.</p>\n</li>\n<li>\n<p>This pattern allows to create the composite conditions dynamically.</p>\n</li>\n</ul>\n<h3>Examples</h3>\n<p>The example is intended to demonstrate the creation of a complex condition.</p>\n<p>First of all define list to work with.</p>\n<pre><span class=\"n\">alphabet_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"Alpha\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Bravo\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Charlie\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Delta\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Echo\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Foxtrot\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Golf\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Hotel\"</span><span class=\"p\">]</span>\n</pre>\n<p>Now define rules for selecting items:</p>\n<ul>\n<li>\n<p>Select items its index is lower or equal to 2 and not start with char \"b\" (case insensitive).</p>\n</li>\n<li>\n<p>Select items its index is higher than 2 and it contains \"e\" or \"a\" but not both.  (case insensitive)</p>\n</li>\n</ul>\n<h4>Create single conditions by specification pattern</h4>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">generic_design_patterns</span> <span class=\"k\">as</span> <span class=\"nn\">gdp</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">ContainChar</span><span class=\"p\">(</span><span class=\"n\">gdp</span><span class=\"o\">.</span><span class=\"n\">specification</span><span class=\"o\">.</span><span class=\"n\">Condition</span><span class=\"p\">):</span>\n    <span class=\"n\">required_char</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">is_satisfied</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">required_char</span> <span class=\"ow\">in</span> <span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ContainCharA</span><span class=\"p\">(</span><span class=\"n\">ContainChar</span><span class=\"p\">):</span>\n    <span class=\"n\">required_char</span> <span class=\"o\">=</span> <span class=\"s2\">\"a\"</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ContainCharE</span><span class=\"p\">(</span><span class=\"n\">ContainChar</span><span class=\"p\">):</span>\n    <span class=\"n\">required_char</span> <span class=\"o\">=</span> <span class=\"s2\">\"e\"</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">IsIndexHigherThanTwo</span><span class=\"p\">(</span><span class=\"n\">gdp</span><span class=\"o\">.</span><span class=\"n\">specification</span><span class=\"o\">.</span><span class=\"n\">Condition</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">is_satisfied</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">index</span> <span class=\"o\">&gt;</span> <span class=\"mi\">2</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">FirstCharIsB</span><span class=\"p\">(</span><span class=\"n\">gdp</span><span class=\"o\">.</span><span class=\"n\">specification</span><span class=\"o\">.</span><span class=\"n\">Condition</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">is_satisfied</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">item</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s2\">\"b\"</span>\n</pre>\n<p>Note that input arguments of method <code>is_satisfied()</code>, it depends only on the user's requirements. But it is necessary that the arguments of all conditions are the same.</p>\n<h4>Put single conditions together</h4>\n<pre><span class=\"n\">condition</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"o\">~</span><span class=\"n\">IndexHigherThanTwo</span><span class=\"p\">()</span> <span class=\"o\">&amp;</span> <span class=\"o\">~</span><span class=\"n\">FirstCharIsB</span><span class=\"p\">())</span>  \n<span class=\"n\">condition</span> <span class=\"o\">|=</span> <span class=\"p\">(</span><span class=\"n\">IndexHigherThanTwo</span><span class=\"p\">()</span> <span class=\"o\">&amp;</span> <span class=\"p\">(</span><span class=\"n\">ContainCharA</span><span class=\"p\">()</span> <span class=\"o\">^</span> <span class=\"n\">ContainCharE</span><span class=\"p\">()))</span>\n</pre>\n<h4>Apply condition</h4>\n<p>Iterate over the list and filter items which meet condition.</p>\n<pre><span class=\"k\">for</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">alphabet_list</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">condition</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Alpha</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Charlie</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Echo</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Hotel</span>\n</pre>\n<h2>Plugin</h2>\n<p>Here is not implement some plugin system. Plugin module only encapsulates existing systems\nand makes it easier to use. Current version of the package uses plugin only for <a href=\"#chain-of-responsibility\" rel=\"nofollow\">chain of responsibility</a>.</p>\n<h3>Collectors</h3>\n<p>In the context of this package, plugin can be average class or <a href=\"https://pypi.org/project/Yapsy/\" rel=\"nofollow\">Yapsy</a> plugin. For more information about Yapsy plugin system visit <a href=\"http://yapsy.sourceforge.net/\" rel=\"nofollow\">Yapsy documentation</a> pages.</p>\n<p>Collectors are intended for find plugin and make it accessible. This package contains three basic plugin collectors:</p>\n<ul>\n<li><code>gdp.plugin.YapsyPluginCollector</code></li>\n<li><code>gdp.plugin.YapsyRegExPluginCollector</code></li>\n<li><code>gdp.plugin.SubclassPluginCollector</code></li>\n</ul>\n<p>All examples in this chapter follow the example in chapter <a href=\"#chain-of-responsibility\" rel=\"nofollow\">chain of responsibility</a>.</p>\n<h4>YapsyPluginCollector</h4>\n<p>In the default setting, this collector find standard <a href=\"https://pypi.org/project/Yapsy/\" rel=\"nofollow\">Yapsy</a> plugins by <code>.yapsy-plugin</code> info file.</p>\n<p>Assume this directory structure:</p>\n<pre><code>+- plugins/\n   +- toml.py\n   +- toml.yapsy-plugin\n   +- yaml.py\n   +- yaml.yapsy-plugin\n</code></pre>\n<h5>toml.py</h5>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">generic_design_patterns</span> <span class=\"k\">as</span> <span class=\"nn\">gdp</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">TomlChainPlugin</span><span class=\"p\">(</span><span class=\"n\">gdp</span><span class=\"o\">.</span><span class=\"n\">chain</span><span class=\"o\">.</span><span class=\"n\">ChainNodePlugin</span><span class=\"p\">):</span>\n    <span class=\"n\">answer</span> <span class=\"o\">=</span> <span class=\"s2\">\"toml successfully handled\"</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">check</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">input_string</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s2\">\"toml\"</span> <span class=\"o\">==</span> <span class=\"n\">input_string</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">handle</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">input_string</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">answer</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">description</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s2\">\"toml\"</span>\n</pre>\n<h5>toml.yapsy-plugin</h5>\n<pre><code>[Core]\nName = toml\nModule = toml\n\n[Documentation]\nAuthor = ShadowCodeCz\nVersion = 0.1\nDescription = Test Toml Plugin\n</code></pre>\n<p>Toml and Yaml plugins are similar.</p>\n<h5>Collector construction</h5>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">generic_design_patterns</span> <span class=\"k\">as</span> <span class=\"nn\">gdp</span>\n\n<span class=\"n\">collector</span> <span class=\"o\">=</span> <span class=\"n\">gdp</span><span class=\"o\">.</span><span class=\"n\">plugin</span><span class=\"o\">.</span><span class=\"n\">YapsyPluginCollector</span><span class=\"p\">([</span><span class=\"s2\">\"./plugins\"</span><span class=\"p\">])</span>\n</pre>\n<p>If you are experienced with <a href=\"https://pypi.org/project/Yapsy/\" rel=\"nofollow\">Yapsy</a>, you can use attribute <code>plugin_manager</code> of <code>gdp.plugin.YapsyPluginCollector</code> class. It is instance of <code>yapsy.PluginManager.PluginManager</code>.</p>\n<h4>YapsyRegExPluginCollector</h4>\n<p>This collector is child of <code>YapsyPluginCollector</code>, which bring some improvements:</p>\n<ul>\n<li>plugins are located in destination by regular expression</li>\n<li><code>.yapsy-plugin</code> are not required</li>\n</ul>\n<p>Assume this directory structure which is similar to previous one only without <code>.yapsy-plugin</code>. Contents of <code>.py</code> file are same.</p>\n<pre><code>+- plugins/\n   +- t_plugin_toml.py\n   +- t_plugin_yaml.py\n</code></pre>\n<h5>Collector construction</h5>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">generic_design_patterns</span> <span class=\"k\">as</span> <span class=\"nn\">gdp</span>\n\n<span class=\"n\">collector</span> <span class=\"o\">=</span> <span class=\"n\">gdp</span><span class=\"o\">.</span><span class=\"n\">plugin</span><span class=\"o\">.</span><span class=\"n\">YapsyRegExPluginCollector</span><span class=\"p\">([</span><span class=\"s2\">\"./plugins\"</span><span class=\"p\">],</span> <span class=\"s2\">\"t_plugin_.+.py$\"</span><span class=\"p\">)</span>\n</pre>\n<p>Be careful about regular expression. Especially about ending symbol <code>$</code>. It will find also <code>.pyc</code> files without <code>$</code> at the end of re. It will causes problems.</p>\n<h4>SubclassPluginCollector</h4>\n<p>It is collecting all child of selected class. The example of usage the collector <code>SubclassPluginCollector</code> is in <a href=\"#chain-of-responsibility\" rel=\"nofollow\">chain of responsibility</a> chapter.</p>\n\n          </div>"}, "last_serial": 7010802, "releases": {"1.0.7": [{"comment_text": "", "digests": {"md5": "42b45ecb2f74af59282f9e5cea9ca82f", "sha256": "4ec15ab1eb02b2c52dea984b670cea4da2bfaa1b6fff52421769db032131e26b"}, "downloads": -1, "filename": "generic_design_patterns-1.0.7.tar.gz", "has_sig": false, "md5_digest": "42b45ecb2f74af59282f9e5cea9ca82f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11567, "upload_time": "2020-04-13T12:19:01", "upload_time_iso_8601": "2020-04-13T12:19:01.589416Z", "url": "https://files.pythonhosted.org/packages/a7/22/d4536c7a42604e4f1c9c565ea6c4f46e84cccf2d071192c33033383fa4c3/generic_design_patterns-1.0.7.tar.gz", "yanked": false}], "1.0.9": [{"comment_text": "", "digests": {"md5": "53187bd5d04f7f215f6f36a6cd3071c3", "sha256": "3d9abfe74e8898dd3c3e5941b0b5134f0fd0159cb3dff7258a3a34f453a0b04a"}, "downloads": -1, "filename": "generic_design_patterns-1.0.9.tar.gz", "has_sig": false, "md5_digest": "53187bd5d04f7f215f6f36a6cd3071c3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7696, "upload_time": "2020-04-13T15:57:23", "upload_time_iso_8601": "2020-04-13T15:57:23.667256Z", "url": "https://files.pythonhosted.org/packages/b4/19/813c347d21f1a8a6c56fc5c09cfaf7accb4934562c3420d6d344c13bdfb6/generic_design_patterns-1.0.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "53187bd5d04f7f215f6f36a6cd3071c3", "sha256": "3d9abfe74e8898dd3c3e5941b0b5134f0fd0159cb3dff7258a3a34f453a0b04a"}, "downloads": -1, "filename": "generic_design_patterns-1.0.9.tar.gz", "has_sig": false, "md5_digest": "53187bd5d04f7f215f6f36a6cd3071c3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7696, "upload_time": "2020-04-13T15:57:23", "upload_time_iso_8601": "2020-04-13T15:57:23.667256Z", "url": "https://files.pythonhosted.org/packages/b4/19/813c347d21f1a8a6c56fc5c09cfaf7accb4934562c3420d6d344c13bdfb6/generic_design_patterns-1.0.9.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:58:24 2020"}