{"info": {"author": "barqshasbite", "author_email": "", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Filebeat Scrubber\n\nFilebeat Scrubber performs operations on files that Filebeat has fully\nharvested.\n\nCurrently, Filebeat Scrubber supports:\n\n- Moving files to a custom destination directory.\n- Permanently deleting files in place.\n\nTo do this, Filebeat Scrubber reads the Filebeat registry file for a list of \nall files that Filebeat has knowledge of. If a file has been fully harvested by \nFilebeat (i.e. bytes read = file size), it performs one of the actions listed\nabove.\n\nSince this application depends on the registry file containing accurate\ninformation, be sure to configure [registry flushing](\nhttps://www.elastic.co/guide/en/beats/filebeat/current/configuration-general-options.html#_registry_flush\n) for best results in your use case.\n\nThere is a fair bit of nuance when it comes to how Filebeat handles harvesting\nfiles that are being moved or deleted. Be sure to read and understand the \n[close_*](\nhttps://www.elastic.co/guide/en/beats/filebeat/current/filebeat-input-log.html#filebeat-input-log-close-options\n) options and the [clean_*](\nhttps://www.elastic.co/guide/en/beats/filebeat/current/filebeat-input-log.html#filebeat-input-log-clean-options\n) options.\n\nThis README only serves as a simple guide and is in no way comprehensive. \nOfficial documentation from Filebeat supersedes this documentation. Any errors\nor omissions should be reported so they can be corrected.\n\n# Background\n\nA common use case for logging is to write a file once (e.g. an event in JSON \nformat) and never append to it again. Filebeat does not natively support \ndeleting files that have been fully harvested. Therefore, a solution is needed \nto move or delete files once they have been fully harvested by Filebeat so that\nthe system does not run out of inodes or disk space.\n\n[This use case has been discussed on the Beats Github page](\nhttps://github.com/elastic/beats/issues/714\n). In that discussion, a user suggested creating a custom solution that uses\nthe data from the Filebeat registry file. And in fact, [a user did just that\nin Ruby](https://github.com/andrea-romagnoli/filebeat-cleaner).\nFilebeat Scrubber, written in Python, was inspired by that project and the \ndiscussions in that thread.\n\nNote that [Filebeat uses a newline character to detect the end of an event](\nhttps://www.elastic.co/guide/en/beats/filebeat/master/newline-character-required-eof.html\n). When writing a JSON file to disk, you must ensure that it ends with a \nnewline or else Filebeat will not read the last line in the file. If you do\nnot terminate the line with a newline, it could lead to data loss and malformed\nJSON.\n\n# Installation\n\nBefore you proceed, it is recommended you setup a [virtual environment](\nhttps://virtualenvwrapper.readthedocs.io/en/latest/).\n\nFilebeat Scrubber is available from PyPI:\n\n```shell script\npip install filebeat-scrubber\n```\n\n# Usage\n\n```\n$ filebeat_scrubber --help\n\nusage: filebeat_scrubber [-h] [--registry-file REGISTRY_FILE]\n                         [--destination TARGET_DIRECTORY] [--move] [--remove]\n                         [--verbose] [--summary] [--input-type TYPE]\n                         [--file-filter FILTER_REGEX] [--older-than AGE]\n\nProcess fully harvested files from Filebeat input paths.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --registry-file REGISTRY_FILE\n                        Full path to the Filebeat registry file. Default:\n                        \"/var/lib/filebeat/registry\"\n  --destination TARGET_DIRECTORY\n                        Directory to move fully harvested files to.\n  --move                Move the fully harvested files.\n  --remove              Remove (delete) the fully harvested files.\n  --verbose             Verbose output logging.\n  --summary             Print summary of I/O operations.\n  --input-type TYPE     Filebeat input \"type\" to filter fully harvested files\n                        on. This argument can be provided multiple times.\n  --file-filter FILTER_REGEX\n                        Regex to filter fully harvested files with. The filter\n                        is applied to the full path of the file. This argument\n                        can be provided multiple times.\n  --older-than AGE      The minimum age required, in seconds, since the\n                        Filebeat harvester last processed a file before it can\n                        be scrubbed.\n\nNOTE: This script must be run as a user that has permissions to access the\nFilebeat registry file and any input paths that are configured in Filebeat.\n```\n\n# Example\n\nThis example demonstrates handling multi-line JSON files that are only written\nonce and not updated from time to time.\n\n## Filebeat Input Configuration\n\nThis configuration assumes that you have multi-line JSON files, and have \nseparated files which are single objects into one naming scheme, and arrays of\nobjects into another scheme. If you only have one type, customize this\nconfiguration as you see fit. This is provided purely as an example using\nFilebeat 6. Your configuration will probably need to be different.\n\n```yaml\nfilebeat.registry_flush: 5s\n\nfilebeat.inputs:\n\n- type: log\n  paths:\n    - tests/json_files/object_*.json\n  close_removed: true\n  clean_removed: true\n  multiline.pattern: ^\\{\n  multiline.negate: true\n  multiline.match: after\n  multiline.timeout: 5s\n\n- type: log\n  paths:\n    - tests/json_files/array_*.json\n  close_removed: true\n  clean_removed: true\n  multiline.pattern: ^\\[\n  multiline.negate: true\n  multiline.match: after\n  multiline.timeout: 5s\n```\n\nUsing a `registry_flush` of 5 seconds ensures that the registry file is updated\non a regular interval instead of every time events are published. If you are\npublishing a lot of events, using an interval can improve Filebeat performance\nat the expense of registry accuracy. Configure this for your use case and needs.\n\nUsing `close_removed` tells Filebeat to close the harvester for a file when the\nfile is removed (moved or deleted). This is on by default, but set explicitly\nhere for clarity. Another option is using `close_eof`, which tells Filebeat to \nclose a file once the harvester has reached the end of the file. This option\ncan lead to data loss if files are not written atomically (the harvester may\nreach the end of the file before all of the data has been written to it).\n\nUsing `clean_removed` tells Filebeat to clean a file entry from the registry\nif the file cannot be found on disk anymore under the last known name. This\nprevents the Filebeat registry from becoming cluttered with data on files that\nhave been removed and that will never return. This is on by default, but set\nexplicitly here for clarity.\n\nUsing `multiline.*` settings accounts for the JSON being in multi-line (pretty-\nprinted/indented) format. If your JSON is on a single line, these settings \nshould not be necessary. It is also possible to reverse these settings, and \ninstead have `multiline.match: before` with `multiline.pattern: ^\\]` or\n`multiline.pattern: ^\\}`. With these settings, it should not rely on the\n`multiline.timeout` to trigger the event publishing, assuming all of the data\nis available in the file at the time the harvester reads it. Using atomic\nwrites can ensure this.\n\n## Filebeat Scrubber Command\n\n**IMPORTANT** If your Filebeat is configured to also process regular appending\nlog files, it is important to add filters to Filebeat Scrubber so that it does\nnot operate on files you do not intend it to. **If you do not do this, you may \nexperience data loss!**\n\n### Moving Harvested Files\n\nExample of moving fully harvested files to a separate directory.\n\n```shell script\nfilebeat_scrubber \\\n    --move \\\n    --destination /tmp/fb-scrubber \\\n    --input-type log \\\n    --file-filter \\.json$\n```\n\nIf you want to delete these files at a later time, the following command will\ndelete any files older than 1 day:\n\n```\n$ find /tmp/fb-scrubber -type f -ctime +1 -delete\n```\n\n### Deleting Harvested Files in Place\n\nExample of deleting fully harvested files in place.\n\n```shell script\nfilebeat_scrubber \\\n    --remove \\\n    --input-type log \\\n    --file-filter \\.json$\n```\n\n# Development\n\nThis project uses [tox](https://tox.readthedocs.io/en/latest/).\n\nGrab the source code and setup your development environment using a [virtual \nenvironment](https://virtualenvwrapper.readthedocs.io/en/latest/):\n\n```shell script\ngit clone git@github.com:barqshasbite/filebeat-scrubber.git\ncd filebeat-scrubber\nmkvirtualenv -p python3 filebeat-scrubber\npip install -r requirements.txt\n```\n\nThen build the project:\n\n```shell script\ntox\n```\n\nThis will run static code analysis, tests, and packaging. Built packages can be\nfound in `dist/`. An HTML report of test coverage can be found in \n`reports/htmlcov/index.html`.\n\n## End to End Testing\n\nInstall the current source code of Filebeat Scubber into your [virtual\nenvironment](https://virtualenvwrapper.readthedocs.io/en/latest/):\n\n```shell script\npython setup.py install\n```\n\nMake sure you have [Filebeat installed](\nhttps://www.elastic.co/guide/en/beats/filebeat/current/filebeat-installation.html\n). E.g.:\n\n```shell script\nsudo apt-get install filebeat\n```\n\nStart a local Filebeat instance using the provided test config file:\n\n```shell script\nfilebeat \\\n    -e \\\n    -c filebeat.yml \\\n    --path.config tests/config_files/ \\\n    --path.data tests/sandbox/\n```\n\nStart the JSON file generator to automatically create JSON files in the test\ndirectory:\n\n```shell script\npython tests/tools/generate_json_files.py \\\n    --number 1000 \\\n    --delay 10 \\\n    --indent 4 \\\n    --file-prefix object_ \\\n    --destination tests/json_files\n```\n\nStart the Filebeat Scrubber to inspect which files can be scrubbed:\n\n```shell script\nwatch filebeat_scrubber \\\n    --registry-file tests/sandbox/registry \\\n    --verbose \\\n    --summary \\\n    --input-type log \\\n    --file-filter object_.*\\.json\n```\n\nSince `--move` and `--remove` are not provided, no action will be performed\nand only information about what would happen is printed to the console.\n\nAdd `--move` or `--remove` if you wish to test the operations for real. \n\nThat should be enough to see Filebeat Scrubber working. You can optionally go\na step further and see how Logstash would parse such a log. If you do not have \nLogstash installed, please do so:\n\n```shell script\nsudo apt-get install logstash\n``` \n\nEdit the Filebeat configuration to enable outputting to Logstash. The sample\nFilebeat configuration has a commented section for this. Comment out the\noutput configuration for `console` and uncomment the `logstash` configuration.\n\nRun Logstash with the provided sample Logstash configuration:\n\n```\n/usr/share/logstash/bin/logstash \\\n    --path.config tests/config_files/logstash.conf \\\n    --path.data tests/sandbox \\\n    --log.level info\n```\n\nYou should now see any messages posted from Filebeat to Logstash in your\nconsole. Make sure that there are no JSON parsing errors.\n\n### Cleanup\n\nDelete files that were created from the testing:\n\n```shell script\nrm -rf tests/json_files tests/sandbox\n``` \n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/barqshasbite/filebeat-scrubber", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "filebeat-scrubber", "package_url": "https://pypi.org/project/filebeat-scrubber/", "platform": "", "project_url": "https://pypi.org/project/filebeat-scrubber/", "project_urls": {"Homepage": "https://github.com/barqshasbite/filebeat-scrubber"}, "release_url": "https://pypi.org/project/filebeat-scrubber/1.1.1/", "requires_dist": null, "requires_python": ">=3.5", "summary": "Filebeat Scrubber performs operations on files that Filebeat has fully harvested.", "version": "1.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Filebeat Scrubber</h1>\n<p>Filebeat Scrubber performs operations on files that Filebeat has fully\nharvested.</p>\n<p>Currently, Filebeat Scrubber supports:</p>\n<ul>\n<li>Moving files to a custom destination directory.</li>\n<li>Permanently deleting files in place.</li>\n</ul>\n<p>To do this, Filebeat Scrubber reads the Filebeat registry file for a list of\nall files that Filebeat has knowledge of. If a file has been fully harvested by\nFilebeat (i.e. bytes read = file size), it performs one of the actions listed\nabove.</p>\n<p>Since this application depends on the registry file containing accurate\ninformation, be sure to configure <a href=\"https://www.elastic.co/guide/en/beats/filebeat/current/configuration-general-options.html#_registry_flush\" rel=\"nofollow\">registry flushing</a> for best results in your use case.</p>\n<p>There is a fair bit of nuance when it comes to how Filebeat handles harvesting\nfiles that are being moved or deleted. Be sure to read and understand the\n<a href=\"https://www.elastic.co/guide/en/beats/filebeat/current/filebeat-input-log.html#filebeat-input-log-close-options\" rel=\"nofollow\">close_*</a> options and the <a href=\"https://www.elastic.co/guide/en/beats/filebeat/current/filebeat-input-log.html#filebeat-input-log-clean-options\" rel=\"nofollow\">clean_*</a> options.</p>\n<p>This README only serves as a simple guide and is in no way comprehensive.\nOfficial documentation from Filebeat supersedes this documentation. Any errors\nor omissions should be reported so they can be corrected.</p>\n<h1>Background</h1>\n<p>A common use case for logging is to write a file once (e.g. an event in JSON\nformat) and never append to it again. Filebeat does not natively support\ndeleting files that have been fully harvested. Therefore, a solution is needed\nto move or delete files once they have been fully harvested by Filebeat so that\nthe system does not run out of inodes or disk space.</p>\n<p><a href=\"https://github.com/elastic/beats/issues/714\" rel=\"nofollow\">This use case has been discussed on the Beats Github page</a>. In that discussion, a user suggested creating a custom solution that uses\nthe data from the Filebeat registry file. And in fact, <a href=\"https://github.com/andrea-romagnoli/filebeat-cleaner\" rel=\"nofollow\">a user did just that\nin Ruby</a>.\nFilebeat Scrubber, written in Python, was inspired by that project and the\ndiscussions in that thread.</p>\n<p>Note that <a href=\"https://www.elastic.co/guide/en/beats/filebeat/master/newline-character-required-eof.html\" rel=\"nofollow\">Filebeat uses a newline character to detect the end of an event</a>. When writing a JSON file to disk, you must ensure that it ends with a\nnewline or else Filebeat will not read the last line in the file. If you do\nnot terminate the line with a newline, it could lead to data loss and malformed\nJSON.</p>\n<h1>Installation</h1>\n<p>Before you proceed, it is recommended you setup a <a href=\"https://virtualenvwrapper.readthedocs.io/en/latest/\" rel=\"nofollow\">virtual environment</a>.</p>\n<p>Filebeat Scrubber is available from PyPI:</p>\n<pre>pip install filebeat-scrubber\n</pre>\n<h1>Usage</h1>\n<pre><code>$ filebeat_scrubber --help\n\nusage: filebeat_scrubber [-h] [--registry-file REGISTRY_FILE]\n                         [--destination TARGET_DIRECTORY] [--move] [--remove]\n                         [--verbose] [--summary] [--input-type TYPE]\n                         [--file-filter FILTER_REGEX] [--older-than AGE]\n\nProcess fully harvested files from Filebeat input paths.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --registry-file REGISTRY_FILE\n                        Full path to the Filebeat registry file. Default:\n                        \"/var/lib/filebeat/registry\"\n  --destination TARGET_DIRECTORY\n                        Directory to move fully harvested files to.\n  --move                Move the fully harvested files.\n  --remove              Remove (delete) the fully harvested files.\n  --verbose             Verbose output logging.\n  --summary             Print summary of I/O operations.\n  --input-type TYPE     Filebeat input \"type\" to filter fully harvested files\n                        on. This argument can be provided multiple times.\n  --file-filter FILTER_REGEX\n                        Regex to filter fully harvested files with. The filter\n                        is applied to the full path of the file. This argument\n                        can be provided multiple times.\n  --older-than AGE      The minimum age required, in seconds, since the\n                        Filebeat harvester last processed a file before it can\n                        be scrubbed.\n\nNOTE: This script must be run as a user that has permissions to access the\nFilebeat registry file and any input paths that are configured in Filebeat.\n</code></pre>\n<h1>Example</h1>\n<p>This example demonstrates handling multi-line JSON files that are only written\nonce and not updated from time to time.</p>\n<h2>Filebeat Input Configuration</h2>\n<p>This configuration assumes that you have multi-line JSON files, and have\nseparated files which are single objects into one naming scheme, and arrays of\nobjects into another scheme. If you only have one type, customize this\nconfiguration as you see fit. This is provided purely as an example using\nFilebeat 6. Your configuration will probably need to be different.</p>\n<pre><span class=\"nt\">filebeat.registry_flush</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">5s</span>\n\n<span class=\"nt\">filebeat.inputs</span><span class=\"p\">:</span>\n\n<span class=\"p p-Indicator\">-</span> <span class=\"nt\">type</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">log</span>\n  <span class=\"nt\">paths</span><span class=\"p\">:</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">tests/json_files/object_*.json</span>\n  <span class=\"nt\">close_removed</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">true</span>\n  <span class=\"nt\">clean_removed</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">true</span>\n  <span class=\"nt\">multiline.pattern</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">^\\{</span>\n  <span class=\"nt\">multiline.negate</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">true</span>\n  <span class=\"nt\">multiline.match</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">after</span>\n  <span class=\"nt\">multiline.timeout</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">5s</span>\n\n<span class=\"p p-Indicator\">-</span> <span class=\"nt\">type</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">log</span>\n  <span class=\"nt\">paths</span><span class=\"p\">:</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">tests/json_files/array_*.json</span>\n  <span class=\"nt\">close_removed</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">true</span>\n  <span class=\"nt\">clean_removed</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">true</span>\n  <span class=\"nt\">multiline.pattern</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">^\\[</span>\n  <span class=\"nt\">multiline.negate</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">true</span>\n  <span class=\"nt\">multiline.match</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">after</span>\n  <span class=\"nt\">multiline.timeout</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">5s</span>\n</pre>\n<p>Using a <code>registry_flush</code> of 5 seconds ensures that the registry file is updated\non a regular interval instead of every time events are published. If you are\npublishing a lot of events, using an interval can improve Filebeat performance\nat the expense of registry accuracy. Configure this for your use case and needs.</p>\n<p>Using <code>close_removed</code> tells Filebeat to close the harvester for a file when the\nfile is removed (moved or deleted). This is on by default, but set explicitly\nhere for clarity. Another option is using <code>close_eof</code>, which tells Filebeat to\nclose a file once the harvester has reached the end of the file. This option\ncan lead to data loss if files are not written atomically (the harvester may\nreach the end of the file before all of the data has been written to it).</p>\n<p>Using <code>clean_removed</code> tells Filebeat to clean a file entry from the registry\nif the file cannot be found on disk anymore under the last known name. This\nprevents the Filebeat registry from becoming cluttered with data on files that\nhave been removed and that will never return. This is on by default, but set\nexplicitly here for clarity.</p>\n<p>Using <code>multiline.*</code> settings accounts for the JSON being in multi-line (pretty-\nprinted/indented) format. If your JSON is on a single line, these settings\nshould not be necessary. It is also possible to reverse these settings, and\ninstead have <code>multiline.match: before</code> with <code>multiline.pattern: ^\\]</code> or\n<code>multiline.pattern: ^\\}</code>. With these settings, it should not rely on the\n<code>multiline.timeout</code> to trigger the event publishing, assuming all of the data\nis available in the file at the time the harvester reads it. Using atomic\nwrites can ensure this.</p>\n<h2>Filebeat Scrubber Command</h2>\n<p><strong>IMPORTANT</strong> If your Filebeat is configured to also process regular appending\nlog files, it is important to add filters to Filebeat Scrubber so that it does\nnot operate on files you do not intend it to. <strong>If you do not do this, you may\nexperience data loss!</strong></p>\n<h3>Moving Harvested Files</h3>\n<p>Example of moving fully harvested files to a separate directory.</p>\n<pre>filebeat_scrubber <span class=\"se\">\\</span>\n    --move <span class=\"se\">\\</span>\n    --destination /tmp/fb-scrubber <span class=\"se\">\\</span>\n    --input-type log <span class=\"se\">\\</span>\n    --file-filter <span class=\"se\">\\.</span>json$\n</pre>\n<p>If you want to delete these files at a later time, the following command will\ndelete any files older than 1 day:</p>\n<pre><code>$ find /tmp/fb-scrubber -type f -ctime +1 -delete\n</code></pre>\n<h3>Deleting Harvested Files in Place</h3>\n<p>Example of deleting fully harvested files in place.</p>\n<pre>filebeat_scrubber <span class=\"se\">\\</span>\n    --remove <span class=\"se\">\\</span>\n    --input-type log <span class=\"se\">\\</span>\n    --file-filter <span class=\"se\">\\.</span>json$\n</pre>\n<h1>Development</h1>\n<p>This project uses <a href=\"https://tox.readthedocs.io/en/latest/\" rel=\"nofollow\">tox</a>.</p>\n<p>Grab the source code and setup your development environment using a <a href=\"https://virtualenvwrapper.readthedocs.io/en/latest/\" rel=\"nofollow\">virtual\nenvironment</a>:</p>\n<pre>git clone git@github.com:barqshasbite/filebeat-scrubber.git\n<span class=\"nb\">cd</span> filebeat-scrubber\nmkvirtualenv -p python3 filebeat-scrubber\npip install -r requirements.txt\n</pre>\n<p>Then build the project:</p>\n<pre>tox\n</pre>\n<p>This will run static code analysis, tests, and packaging. Built packages can be\nfound in <code>dist/</code>. An HTML report of test coverage can be found in\n<code>reports/htmlcov/index.html</code>.</p>\n<h2>End to End Testing</h2>\n<p>Install the current source code of Filebeat Scubber into your <a href=\"https://virtualenvwrapper.readthedocs.io/en/latest/\" rel=\"nofollow\">virtual\nenvironment</a>:</p>\n<pre>python setup.py install\n</pre>\n<p>Make sure you have <a href=\"https://www.elastic.co/guide/en/beats/filebeat/current/filebeat-installation.html\" rel=\"nofollow\">Filebeat installed</a>. E.g.:</p>\n<pre>sudo apt-get install filebeat\n</pre>\n<p>Start a local Filebeat instance using the provided test config file:</p>\n<pre>filebeat <span class=\"se\">\\</span>\n    -e <span class=\"se\">\\</span>\n    -c filebeat.yml <span class=\"se\">\\</span>\n    --path.config tests/config_files/ <span class=\"se\">\\</span>\n    --path.data tests/sandbox/\n</pre>\n<p>Start the JSON file generator to automatically create JSON files in the test\ndirectory:</p>\n<pre>python tests/tools/generate_json_files.py <span class=\"se\">\\</span>\n    --number <span class=\"m\">1000</span> <span class=\"se\">\\</span>\n    --delay <span class=\"m\">10</span> <span class=\"se\">\\</span>\n    --indent <span class=\"m\">4</span> <span class=\"se\">\\</span>\n    --file-prefix object_ <span class=\"se\">\\</span>\n    --destination tests/json_files\n</pre>\n<p>Start the Filebeat Scrubber to inspect which files can be scrubbed:</p>\n<pre>watch filebeat_scrubber <span class=\"se\">\\</span>\n    --registry-file tests/sandbox/registry <span class=\"se\">\\</span>\n    --verbose <span class=\"se\">\\</span>\n    --summary <span class=\"se\">\\</span>\n    --input-type log <span class=\"se\">\\</span>\n    --file-filter object_.*<span class=\"se\">\\.</span>json\n</pre>\n<p>Since <code>--move</code> and <code>--remove</code> are not provided, no action will be performed\nand only information about what would happen is printed to the console.</p>\n<p>Add <code>--move</code> or <code>--remove</code> if you wish to test the operations for real.</p>\n<p>That should be enough to see Filebeat Scrubber working. You can optionally go\na step further and see how Logstash would parse such a log. If you do not have\nLogstash installed, please do so:</p>\n<pre>sudo apt-get install logstash\n</pre>\n<p>Edit the Filebeat configuration to enable outputting to Logstash. The sample\nFilebeat configuration has a commented section for this. Comment out the\noutput configuration for <code>console</code> and uncomment the <code>logstash</code> configuration.</p>\n<p>Run Logstash with the provided sample Logstash configuration:</p>\n<pre><code>/usr/share/logstash/bin/logstash \\\n    --path.config tests/config_files/logstash.conf \\\n    --path.data tests/sandbox \\\n    --log.level info\n</code></pre>\n<p>You should now see any messages posted from Filebeat to Logstash in your\nconsole. Make sure that there are no JSON parsing errors.</p>\n<h3>Cleanup</h3>\n<p>Delete files that were created from the testing:</p>\n<pre>rm -rf tests/json_files tests/sandbox\n</pre>\n\n          </div>"}, "last_serial": 6845124, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "622e1fd931ca420527a23236c7429fa4", "sha256": "17322e1df16974cb92b09579fcc0c2faa4dbe70a130cc4a7be7a3596ebe8bb0d"}, "downloads": -1, "filename": "filebeat_scrubber-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "622e1fd931ca420527a23236c7429fa4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 8540, "upload_time": "2019-12-09T23:25:09", "upload_time_iso_8601": "2019-12-09T23:25:09.845618Z", "url": "https://files.pythonhosted.org/packages/94/a8/49a6ef54f653fb35976b8916dc7979a2729661c5e0736ff8235201a2b897/filebeat_scrubber-1.0.0-py3-none-any.whl", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "afa2e9e1ffff171b7a8e14de89834155", "sha256": "a0fe71ad70409edd0eea1e1e3fe5aaf21a8f1324275b524db2567d6368d85a25"}, "downloads": -1, "filename": "filebeat_scrubber-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "afa2e9e1ffff171b7a8e14de89834155", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 8988, "upload_time": "2019-12-12T16:07:21", "upload_time_iso_8601": "2019-12-12T16:07:21.318833Z", "url": "https://files.pythonhosted.org/packages/ed/d3/2edbc0136dbda4a41e1a2ac4e85ef221bb84d264eb641b87a745ac7cb32b/filebeat_scrubber-1.1.0-py3-none-any.whl", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "83d9072abdb83869e5b917ac37a88098", "sha256": "065adf0d3a8603e43594b2d7832a986ad448f4b557cde6550ff9ff04c4ac7736"}, "downloads": -1, "filename": "filebeat_scrubber-1.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "83d9072abdb83869e5b917ac37a88098", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 9458, "upload_time": "2020-03-19T18:45:14", "upload_time_iso_8601": "2020-03-19T18:45:14.223849Z", "url": "https://files.pythonhosted.org/packages/38/97/3fe26186cc1b11ed3788e32e54ed9ac2e2b974331fdd83eb4813d103d1cc/filebeat_scrubber-1.1.1-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "83d9072abdb83869e5b917ac37a88098", "sha256": "065adf0d3a8603e43594b2d7832a986ad448f4b557cde6550ff9ff04c4ac7736"}, "downloads": -1, "filename": "filebeat_scrubber-1.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "83d9072abdb83869e5b917ac37a88098", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 9458, "upload_time": "2020-03-19T18:45:14", "upload_time_iso_8601": "2020-03-19T18:45:14.223849Z", "url": "https://files.pythonhosted.org/packages/38/97/3fe26186cc1b11ed3788e32e54ed9ac2e2b974331fdd83eb4813d103d1cc/filebeat_scrubber-1.1.1-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:42:37 2020"}