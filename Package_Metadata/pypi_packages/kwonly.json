{"info": {"author": "Garrett Beaty", "author_email": "garrett.beaty@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License (GPL)", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.5", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.1", "Programming Language :: Python :: 3.2"], "description": "This module provides a decorator for indicating named arguments are keyword-only arguments.\n\nkwonly\n------\n\nTo decorate a function with ``kwonly``, any keyword-only arguments should appear as positional arguments in the signature, after any arguments that should be accepted positionally and before the varargs arguments if one is present. Pass the 0-based index of the first keyword-only argument and all positional arguments at or after that index will be treated as keyword-only arguments. ::\n\n    >>> from kwonly import kwonly\n    >>> @kwonly(0)\n    ... def foo(a, b, c):\n    ...     print a, b, c\n    ... \n    >>> foo(1, 2, 3)\n    Traceback (most recent call last):\n      File \"<stdin>\", line 1, in <module>\n    TypeError: foo() takes exactly 0 arguments (3 given)\n    >>> foo(c=3, a=1, b=2)\n    1 2 3\n    >>> @kwonly(2)\n    ... def foo(a, b, c, d=4):\n    ...     print a, b, c, d\n    ... \n    >>> foo(1, 2, 3)\n    Traceback (most recent call last):\n      File \"<stdin>\", line 1, in <module>\n    TypeError: foo() takes exactly 2 arguments (3 given)\n    >>> foo(1, 2, c=3)\n    1 2 3 4\n    >>> foo(1, 2, d=5, c=3)\n    1 2 3 5\n    >>> @kwonly(0)\n    ... def foo(a, b, c, *args):\n    ...     print a, b, c, args\n    ... \n    >>> foo(4, 5, 6, a=1, b=2, c=3)\n    1 2 3 (4, 5, 6)\n\n``kwonly`` is of course not a signature-preserving decorator. The argspec will include the non-keyword-only arguments and their default values and the varargs argument if one is given. If no keyword arguments are given, the argspec will have the keywords set to ``restricted_kwargs``, otherwise it won't be touched. The keyword-only arguments won't appear in the argspec at all.\n\nNoDefault\n---------\n\nBecause the keyword-only arguments are declared as positional arguments and must appear after all actual positional arguments, the presence of default arguments in the positional arguments can interfere with the ability to declare required keyword arguments. In such a case, the ``NoDefault`` value can be used to indicate that there isn't actually a default argument supplied for the function, so if no value is passed in the call a ``TypeError`` will be raised. ::\n\n    >>> from kwonly import kwonly, NoDefault\n    >>> @kwonly(2)\n    ... def foo(a, b=2, c=NoDefault, d=4):\n    ...     print a, b, c, d\n    ... \n    >>> foo(1)\n    Traceback (most recent call last):\n      File \"<stdin>\", line 1, in <module>\n      File \"<string>\", line 3, in foo\n    TypeError: foo needs keyword-only argument c\n    >>> foo(1, c=3)\n    1 2 3 4\n\nPython versions\n---------------\n\nThis module enables keyword-only arguments in python 2.x, but also works in python 3. This allows modules to be written for both lines of python without sacrificing the utility of keyword-only arguments or having to maintain two separate versions. The python 3 declaration syntax for keyword-only arguments can't be used, but python 3 will get the full benefit of keyword-arguments in that the signature of the decorated function will match the function that it logically models. ::\n\n    >>> from kwonly import kwonly, NoDefault\n    >>> @kwonly(2)\n    ... def foo(a, b=2, c=NoDefault, d=4, *args, **kwargs):\n    ...     print(a, b, c, d, args, kwargs)\n    ... \n    >>> foo(1, 2, 5, 6, c=3, g=7, h=8)\n    1 2 3 4 (5, 6) {'h': 8, 'g': 7}\n    >>> foo(1, c=3, g=7, h=8)\n    1 2 3 4 () {'h': 8, 'g': 7}\n    >>> def bar(a, b=2, *args, c, d=4, **kwargs):\n    ...     print(a, b, c, d, args, kwargs)\n    ... \n    >>> bar(1, 2, 5, 6, c=3, g=7, h=8)\n    1 2 3 4 (5, 6) {'h': 8, 'g': 7}\n    >>> bar(1, c=3, g=7, h=8)\n    1 2 3 4 () {'h': 8, 'g': 7}\n    >>> import inspect\n    >>> inspect.getfullargspec(foo)\n    FullArgSpec(args=['a', 'b'], varargs='args', varkw='kwargs', defaults=(2,), kwonlyargs=['c', 'd'], kwonlydefaults={'d': 4}, annotations={})\n    >>> inspect.getfullargspec(bar)\n    FullArgSpec(args=['a', 'b'], varargs='args', varkw='kwargs', defaults=(2,), kwonlyargs=['c', 'd'], kwonlydefaults={'d': 4}, annotations={})", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://code.google.com/p/python-kwonly", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "kwonly", "package_url": "https://pypi.org/project/kwonly/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/kwonly/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://code.google.com/p/python-kwonly"}, "release_url": "https://pypi.org/project/kwonly/1.0.3/", "requires_dist": null, "requires_python": null, "summary": "Module for declaring keyword-only arguments in python", "version": "1.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This module provides a decorator for indicating named arguments are keyword-only arguments.</p>\n<div id=\"kwonly\">\n<h2>kwonly</h2>\n<p>To decorate a function with <tt>kwonly</tt>, any keyword-only arguments should appear as positional arguments in the signature, after any arguments that should be accepted positionally and before the varargs arguments if one is present. Pass the 0-based index of the first keyword-only argument and all positional arguments at or after that index will be treated as keyword-only arguments.</p>\n<pre>&gt;&gt;&gt; from kwonly import kwonly\n&gt;&gt;&gt; @kwonly(0)\n... def foo(a, b, c):\n...     print a, b, c\n...\n&gt;&gt;&gt; foo(1, 2, 3)\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: foo() takes exactly 0 arguments (3 given)\n&gt;&gt;&gt; foo(c=3, a=1, b=2)\n1 2 3\n&gt;&gt;&gt; @kwonly(2)\n... def foo(a, b, c, d=4):\n...     print a, b, c, d\n...\n&gt;&gt;&gt; foo(1, 2, 3)\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: foo() takes exactly 2 arguments (3 given)\n&gt;&gt;&gt; foo(1, 2, c=3)\n1 2 3 4\n&gt;&gt;&gt; foo(1, 2, d=5, c=3)\n1 2 3 5\n&gt;&gt;&gt; @kwonly(0)\n... def foo(a, b, c, *args):\n...     print a, b, c, args\n...\n&gt;&gt;&gt; foo(4, 5, 6, a=1, b=2, c=3)\n1 2 3 (4, 5, 6)\n</pre>\n<p><tt>kwonly</tt> is of course not a signature-preserving decorator. The argspec will include the non-keyword-only arguments and their default values and the varargs argument if one is given. If no keyword arguments are given, the argspec will have the keywords set to <tt>restricted_kwargs</tt>, otherwise it won\u2019t be touched. The keyword-only arguments won\u2019t appear in the argspec at all.</p>\n</div>\n<div id=\"nodefault\">\n<h2>NoDefault</h2>\n<p>Because the keyword-only arguments are declared as positional arguments and must appear after all actual positional arguments, the presence of default arguments in the positional arguments can interfere with the ability to declare required keyword arguments. In such a case, the <tt>NoDefault</tt> value can be used to indicate that there isn\u2019t actually a default argument supplied for the function, so if no value is passed in the call a <tt>TypeError</tt> will be raised.</p>\n<pre>&gt;&gt;&gt; from kwonly import kwonly, NoDefault\n&gt;&gt;&gt; @kwonly(2)\n... def foo(a, b=2, c=NoDefault, d=4):\n...     print a, b, c, d\n...\n&gt;&gt;&gt; foo(1)\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"&lt;string&gt;\", line 3, in foo\nTypeError: foo needs keyword-only argument c\n&gt;&gt;&gt; foo(1, c=3)\n1 2 3 4\n</pre>\n</div>\n<div id=\"python-versions\">\n<h2>Python versions</h2>\n<p>This module enables keyword-only arguments in python 2.x, but also works in python 3. This allows modules to be written for both lines of python without sacrificing the utility of keyword-only arguments or having to maintain two separate versions. The python 3 declaration syntax for keyword-only arguments can\u2019t be used, but python 3 will get the full benefit of keyword-arguments in that the signature of the decorated function will match the function that it logically models.</p>\n<pre>&gt;&gt;&gt; from kwonly import kwonly, NoDefault\n&gt;&gt;&gt; @kwonly(2)\n... def foo(a, b=2, c=NoDefault, d=4, *args, **kwargs):\n...     print(a, b, c, d, args, kwargs)\n...\n&gt;&gt;&gt; foo(1, 2, 5, 6, c=3, g=7, h=8)\n1 2 3 4 (5, 6) {'h': 8, 'g': 7}\n&gt;&gt;&gt; foo(1, c=3, g=7, h=8)\n1 2 3 4 () {'h': 8, 'g': 7}\n&gt;&gt;&gt; def bar(a, b=2, *args, c, d=4, **kwargs):\n...     print(a, b, c, d, args, kwargs)\n...\n&gt;&gt;&gt; bar(1, 2, 5, 6, c=3, g=7, h=8)\n1 2 3 4 (5, 6) {'h': 8, 'g': 7}\n&gt;&gt;&gt; bar(1, c=3, g=7, h=8)\n1 2 3 4 () {'h': 8, 'g': 7}\n&gt;&gt;&gt; import inspect\n&gt;&gt;&gt; inspect.getfullargspec(foo)\nFullArgSpec(args=['a', 'b'], varargs='args', varkw='kwargs', defaults=(2,), kwonlyargs=['c', 'd'], kwonlydefaults={'d': 4}, annotations={})\n&gt;&gt;&gt; inspect.getfullargspec(bar)\nFullArgSpec(args=['a', 'b'], varargs='args', varkw='kwargs', defaults=(2,), kwonlyargs=['c', 'd'], kwonlydefaults={'d': 4}, annotations={})\n</pre>\n</div>\n\n          </div>"}, "last_serial": 750684, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "429f4cf028b91ece191b38144eec3b0f", "sha256": "80c9a7095bd385a43893aa223dd0ac0abffcb6a2e59f539aceef0115b94594b5"}, "downloads": -1, "filename": "kwonly-1.0.tar.gz", "has_sig": false, "md5_digest": "429f4cf028b91ece191b38144eec3b0f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15624, "upload_time": "2012-01-09T22:45:52", "upload_time_iso_8601": "2012-01-09T22:45:52.570483Z", "url": "https://files.pythonhosted.org/packages/79/c6/610a1991584852b0f5c53052d7d971d5e24f3c6d271355e0ba013a0c72c4/kwonly-1.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "758f3bef5c2768e7a37870ac5121e9ad", "sha256": "6d7310f9b57be6bde90c5a44206cdc24876ff1bb3cb183e6c4a7a74e7f3c01b0"}, "downloads": -1, "filename": "kwonly-1.0.1.tar.gz", "has_sig": false, "md5_digest": "758f3bef5c2768e7a37870ac5121e9ad", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15660, "upload_time": "2012-01-09T22:49:27", "upload_time_iso_8601": "2012-01-09T22:49:27.202619Z", "url": "https://files.pythonhosted.org/packages/e0/13/63f3f15c3a9dd001053f4508b658014e756113328ca8e0e1767e79242f6c/kwonly-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "1e336e7c791df3edc3f866337068f411", "sha256": "8155e3d08a73312f373d5d42baea0184fec6350f17895a09de80a43d024b775c"}, "downloads": -1, "filename": "kwonly-1.0.2.tar.gz", "has_sig": false, "md5_digest": "1e336e7c791df3edc3f866337068f411", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15688, "upload_time": "2012-05-24T22:43:58", "upload_time_iso_8601": "2012-05-24T22:43:58.522889Z", "url": "https://files.pythonhosted.org/packages/d8/a0/0ccc95863ceb17b41b83dc2502326a5941490f7a2eb30dbb348fa4047503/kwonly-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "b7048f67d9fcb514d8a86a45bc5394d3", "sha256": "38da406255dcf5de2cbb73cfc4674dc831e39a48a0e3045d5aab063b38ffba91"}, "downloads": -1, "filename": "kwonly-1.0.3.tar.gz", "has_sig": false, "md5_digest": "b7048f67d9fcb514d8a86a45bc5394d3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15763, "upload_time": "2013-01-15T01:31:15", "upload_time_iso_8601": "2013-01-15T01:31:15.674493Z", "url": "https://files.pythonhosted.org/packages/13/4a/e5a2437b1461880d04acd46099afa6fd8e58850e9b4a26cd3a692694362b/kwonly-1.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b7048f67d9fcb514d8a86a45bc5394d3", "sha256": "38da406255dcf5de2cbb73cfc4674dc831e39a48a0e3045d5aab063b38ffba91"}, "downloads": -1, "filename": "kwonly-1.0.3.tar.gz", "has_sig": false, "md5_digest": "b7048f67d9fcb514d8a86a45bc5394d3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15763, "upload_time": "2013-01-15T01:31:15", "upload_time_iso_8601": "2013-01-15T01:31:15.674493Z", "url": "https://files.pythonhosted.org/packages/13/4a/e5a2437b1461880d04acd46099afa6fd8e58850e9b4a26cd3a692694362b/kwonly-1.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:48:28 2020"}