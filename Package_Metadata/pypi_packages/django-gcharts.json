{"info": {"author": "Rolf H\u00e5vard Blindheim", "author_email": "rhblind@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "##Yet another Google Charts library for Django##\n\n- ~~Requires installation of the gviz_api library which is freely available from Google.~~\n- See http://code.google.com/p/google-visualization-python/ for details.\n\n**UPDATE: The gviz_api library is now included.**\n\n\n## Note ##\n**Development status updated to beta. The code is still short on unit tests, so bad stuff can happen!**\n\nPlease feel free submit patches/pull requests ;)\n\n### Disclaimer ###\nThis library is heavy influenced by [mvasilkov's django-google-charts](https://github.com/mvasilkov/django-google-charts),\nand some of the code (template tags and javascript code) are directly copied from him. I've done some minor adjustments to\nmake it work for my approach.\n\n## About django-gcharts ##\nAs I find mvasilkov's approach very clever, I think it would be nice if the model could deliver it's data in a format\nthe Google Visualization API can read.\n\nThis library is an attempt of doing that, by using a custom QuerySet and Manager which is plugged directly into the model,\nand some wrapper methods to bind the QuerySet data up against the gviz_api library.\nThe goal is to \"fully\" support the QuerySet (with aggregates, joins, extra, annotates, etc) so that we can gather data\nby using familiar QuerySet syntax.\n\n### Demo site ###\nThe git version now includes a demo site which can be run at your local machine once cloned. The demo site previews a few\nof the charts included in the Google Visualization API, and should contain enough working examples for you to figure out\nhow this stuff works.\n\nTo get started with the demo site, follow these steps.\n\n        $ git clone https://github.com/rhblind/django-gcharts.git\n        $ cd django-gcharts\n        $ python manage.py syncdb\n        $ python manage.py initdata\n        $ python manage.py runserver\n\nThen point your browser to http://localhost:8000 and you should see a few different charts displayed.\n\n## Configuration ##\n\n### Installation ###\n        \n    $ pip install django-gcharts\n\n### settings.py ###\n    GOOGLECHARTS_API = \"1.1\"\n    GOOGLECHARTS_PACKAGES = [\"corechart\"]\n    \n    INSTALLED_APPS = (\n        ...\n        'gcharts',\n        ...\n    )\n\n * `GOOGLECHARTS_API` - Optional. Defaults to 1.1\n * `GOOGLECHARTS_PACKAGES` - Optional. List of packages that should be loaded. Defaults to only `corechart`.\n  \n### Packages ###\nThe charts in the Google Visualization API are separated into different packages. For the most basic charts\nyou would only need to load the `corechart` package (which is the default if none is specified).\nBelow follows a list of which charts are available in the different packages.\n\n**Please note that all packages specified in settings.py will load every time the `{% gcharts %} ... {% endgcharts %}`\n  block is rendered.**\n\nOptionally, the package for the specific chart can be specified in the `{% render ... %}` tag as a the last option. \nThe tag should in that case be written as: `{% render \"div_id\" \"data\" \"options\" \"package name\" %}`. This will cause \nthe package to be applied to the current `{% gcharts %} ... {% endgcharts %}` block only, in addition to those specified\nin settings.py.\n\n\n* `corechart` contains these charts\n  * [AreaChart](https://developers.google.com/chart/interactive/docs/gallery/areachart)\n  * [BarChart](https://developers.google.com/chart/interactive/docs/gallery/barchart)\n  * [BubbleChart](https://developers.google.com/chart/interactive/docs/gallery/bubblechart)\n  * [CandleStickChart](https://developers.google.com/chart/interactive/docs/gallery/candlestickchart)\n  * [ColumnChart](https://developers.google.com/chart/interactive/docs/gallery/columnchart)\n  * [ComboChart](https://developers.google.com/chart/interactive/docs/gallery/combochart)\n  * [LineChart](https://developers.google.com/chart/interactive/docs/gallery/linechart)\n  * [PieChart](https://developers.google.com/chart/interactive/docs/gallery/piechart)\n  * [ScatterChart](https://developers.google.com/chart/interactive/docs/gallery/scatterchart)\n  * [SteppedAreaChart](https://developers.google.com/chart/interactive/docs/gallery/steppedareachart)\n* `gauge`\n  * [Gauge](https://developers.google.com/chart/interactive/docs/gallery/gauge)\n* `geochart`\n  * [GeoChart](https://developers.google.com/chart/interactive/docs/gallery/geochart)\n* `table`\n  * [Table](https://developers.google.com/chart/interactive/docs/gallery/table)\n* `treemap`\n  * [TreeMap](https://developers.google.com/chart/interactive/docs/gallery/treemap)\n\n\n### models.py ###\n\nRegister the GChartsManager to the model you'd like to draw charts from\n\n    from django.db import models\n    from gcharts import GChartsManager\n    \n    class MyModel(models.Model):\n            \n        # register the GChartsManager as default manager for this model.\n        objects = GChartsManager()\n        \n        my_field = models.CharField(....)\n        my_other_field = models.IntegerField()\n        \n        ...\n                \n                \n## Examples ##\n\nSpam Inc. needs to chart how much spam they sell.\n\n**models.py**\n        \n    from django.db import models\n    from gcharts import GChartsManager\n    \n    class Spam(models.Model):\n            \n        objects = GChartsManager()\n        \n        name = models.Charfield(max_length=10)\n        ...\n        ...\n        cdt = models.DateTimeField(auto_add_now=True, verbose_name=\"Creation datetime\")\n                \n\n**views.py**\n        \n    from dateutil.relativedelta import relativedelta\n    from django.shortcuts import render_to_response\n    from django.template.context import RequestContext\n    \n    from models import Spam\n    \n    def render_chart(request):\n        if request.method == \"GET\":\n                \n            # Get a point in time we want to render chart from\n            series_age = datetime.today() - relativedelta(months=3)\n            \n            # Create a fairly advanced QuerySet using:\n            #  - filter() to get records newer than 'series_age'\n            #  - extra() to cast a PostgreSQL 'timestampz' to 'date' which translates to a pyton date object\n            #  - values() to extract fields of interest\n            #  - annotate() to group aggregate Count into 'id__count'\n            #  - order_by() to make the aggregate work\n            qset = Spam.objects.filter(cdt__gt=series_age).extra(select={\"date\": \"cdt::date\"}) \\\n                                       .values(\"date\").annotate(Count(\"id\")).order_by()\n            \n            # Call the qset.to_json() method to output the data in json\n            #  - labels is a dict which sets labels and the correct javascript data type for\n            #    fields in the QuerySet. The javascript data types are automatically set, \n            #    except for extra fields, which needs to be specified in a dict as:\n            #       {'extra_name': {'javascript data type': 'label for field'}}\n            #  - order is an iterable which sets the column order in which the data should be\n            #    rendered\n            #  - formatting is a dict {'field_name': 'expression'}, where expression is a \n            #    valid string.format() expression.\n            spam_json = qset.to_json(labels={\"id__count\": \"Spam sold\", \"date\": {\"date\": \"Date\"}},\n                                     order=(\"date\", \"id__count\"), \n                                     formatting={\"id__count\": \"{0:d} units of spam\"})\n            \n            return render_to_response(\"sales_overviews/spamreport.html, {\"spam_data\": spam_json},\n                                      context_instance=RequestContext(request))\n\n**spamreport.html**\n\n    ...\n\n    {% load gcharts %}\n\n    {% gcharts %}\n        <!-- Global options for all charts -->\n        options = {\n            width: 500,\n            height: 300\n        };\n    \n        <!-- cloned option and adapted for \"spam_opt\" -->\n        spam_opt = _clone(options);\n        spam_opt.title = \"Units of Spam sold last 3 month\";\n    \n        {% options spam_opt %}\n            kind: \"ColumnChart\",\n            options: spam_opt,\n        {% endoptions %}\n\n        {% render \"spam_chart\" \"spam_data\" \"spam_opt\" %}\n    \n    {% endgcharts %}\n    \n    <div id=\"spam_chart\">\n        <!-- container for spam_data chart -->\n    </div>\n    \n    ...\n\nShould output something like this.\n\n![django-gcharts-example](https://raw.github.com/rhblind/django-gcharts/master/example.png)", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/rhblind/django-gcharts", "keywords": "django google charts graph plot", "license": "Copyright (c) 2012 Rolf H\u00e5vard Blindheim\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.", "maintainer": null, "maintainer_email": null, "name": "django-gcharts", "package_url": "https://pypi.org/project/django-gcharts/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-gcharts/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/rhblind/django-gcharts"}, "release_url": "https://pypi.org/project/django-gcharts/1.3/", "requires_dist": null, "requires_python": null, "summary": "Provides a QuerySet, Manager and other tools for easy integration with the Google Visualization API", "version": "1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            ##Yet another Google Charts library for Django##<br><br>- ~~Requires installation of the gviz_api library which is freely available from Google.~~<br>- See http://code.google.com/p/google-visualization-python/ for details.<br><br>**UPDATE: The gviz_api library is now included.**<br><br><br>## Note ##<br>**Development status updated to beta. The code is still short on unit tests, so bad stuff can happen!**<br><br>Please feel free submit patches/pull requests ;)<br><br>### Disclaimer ###<br>This library is heavy influenced by [mvasilkov's django-google-charts](https://github.com/mvasilkov/django-google-charts),<br>and some of the code (template tags and javascript code) are directly copied from him. I've done some minor adjustments to<br>make it work for my approach.<br><br>## About django-gcharts ##<br>As I find mvasilkov's approach very clever, I think it would be nice if the model could deliver it's data in a format<br>the Google Visualization API can read.<br><br>This library is an attempt of doing that, by using a custom QuerySet and Manager which is plugged directly into the model,<br>and some wrapper methods to bind the QuerySet data up against the gviz_api library.<br>The goal is to \"fully\" support the QuerySet (with aggregates, joins, extra, annotates, etc) so that we can gather data<br>by using familiar QuerySet syntax.<br><br>### Demo site ###<br>The git version now includes a demo site which can be run at your local machine once cloned. The demo site previews a few<br>of the charts included in the Google Visualization API, and should contain enough working examples for you to figure out<br>how this stuff works.<br><br>To get started with the demo site, follow these steps.<br><br>        $ git clone https://github.com/rhblind/django-gcharts.git<br>        $ cd django-gcharts<br>        $ python manage.py syncdb<br>        $ python manage.py initdata<br>        $ python manage.py runserver<br><br>Then point your browser to http://localhost:8000 and you should see a few different charts displayed.<br><br>## Configuration ##<br><br>### Installation ###<br>        <br>    $ pip install django-gcharts<br><br>### settings.py ###<br>    GOOGLECHARTS_API = \"1.1\"<br>    GOOGLECHARTS_PACKAGES = [\"corechart\"]<br>    <br>    INSTALLED_APPS = (<br>        ...<br>        'gcharts',<br>        ...<br>    )<br><br> * `GOOGLECHARTS_API` - Optional. Defaults to 1.1<br> * `GOOGLECHARTS_PACKAGES` - Optional. List of packages that should be loaded. Defaults to only `corechart`.<br>  <br>### Packages ###<br>The charts in the Google Visualization API are separated into different packages. For the most basic charts<br>you would only need to load the `corechart` package (which is the default if none is specified).<br>Below follows a list of which charts are available in the different packages.<br><br>**Please note that all packages specified in settings.py will load every time the `{% gcharts %} ... {% endgcharts %}`<br>  block is rendered.**<br><br>Optionally, the package for the specific chart can be specified in the `{% render ... %}` tag as a the last option. <br>The tag should in that case be written as: `{% render \"div_id\" \"data\" \"options\" \"package name\" %}`. This will cause <br>the package to be applied to the current `{% gcharts %} ... {% endgcharts %}` block only, in addition to those specified<br>in settings.py.<br><br><br>* `corechart` contains these charts<br>  * [AreaChart](https://developers.google.com/chart/interactive/docs/gallery/areachart)<br>  * [BarChart](https://developers.google.com/chart/interactive/docs/gallery/barchart)<br>  * [BubbleChart](https://developers.google.com/chart/interactive/docs/gallery/bubblechart)<br>  * [CandleStickChart](https://developers.google.com/chart/interactive/docs/gallery/candlestickchart)<br>  * [ColumnChart](https://developers.google.com/chart/interactive/docs/gallery/columnchart)<br>  * [ComboChart](https://developers.google.com/chart/interactive/docs/gallery/combochart)<br>  * [LineChart](https://developers.google.com/chart/interactive/docs/gallery/linechart)<br>  * [PieChart](https://developers.google.com/chart/interactive/docs/gallery/piechart)<br>  * [ScatterChart](https://developers.google.com/chart/interactive/docs/gallery/scatterchart)<br>  * [SteppedAreaChart](https://developers.google.com/chart/interactive/docs/gallery/steppedareachart)<br>* `gauge`<br>  * [Gauge](https://developers.google.com/chart/interactive/docs/gallery/gauge)<br>* `geochart`<br>  * [GeoChart](https://developers.google.com/chart/interactive/docs/gallery/geochart)<br>* `table`<br>  * [Table](https://developers.google.com/chart/interactive/docs/gallery/table)<br>* `treemap`<br>  * [TreeMap](https://developers.google.com/chart/interactive/docs/gallery/treemap)<br><br><br>### models.py ###<br><br>Register the GChartsManager to the model you'd like to draw charts from<br><br>    from django.db import models<br>    from gcharts import GChartsManager<br>    <br>    class MyModel(models.Model):<br>            <br>        # register the GChartsManager as default manager for this model.<br>        objects = GChartsManager()<br>        <br>        my_field = models.CharField(....)<br>        my_other_field = models.IntegerField()<br>        <br>        ...<br>                <br>                <br>## Examples ##<br><br>Spam Inc. needs to chart how much spam they sell.<br><br>**models.py**<br>        <br>    from django.db import models<br>    from gcharts import GChartsManager<br>    <br>    class Spam(models.Model):<br>            <br>        objects = GChartsManager()<br>        <br>        name = models.Charfield(max_length=10)<br>        ...<br>        ...<br>        cdt = models.DateTimeField(auto_add_now=True, verbose_name=\"Creation datetime\")<br>                <br><br>**views.py**<br>        <br>    from dateutil.relativedelta import relativedelta<br>    from django.shortcuts import render_to_response<br>    from django.template.context import RequestContext<br>    <br>    from models import Spam<br>    <br>    def render_chart(request):<br>        if request.method == \"GET\":<br>                <br>            # Get a point in time we want to render chart from<br>            series_age = datetime.today() - relativedelta(months=3)<br>            <br>            # Create a fairly advanced QuerySet using:<br>            #  - filter() to get records newer than 'series_age'<br>            #  - extra() to cast a PostgreSQL 'timestampz' to 'date' which translates to a pyton date object<br>            #  - values() to extract fields of interest<br>            #  - annotate() to group aggregate Count into 'id__count'<br>            #  - order_by() to make the aggregate work<br>            qset = Spam.objects.filter(cdt__gt=series_age).extra(select={\"date\": \"cdt::date\"}) \\<br>                                       .values(\"date\").annotate(Count(\"id\")).order_by()<br>            <br>            # Call the qset.to_json() method to output the data in json<br>            #  - labels is a dict which sets labels and the correct javascript data type for<br>            #    fields in the QuerySet. The javascript data types are automatically set, <br>            #    except for extra fields, which needs to be specified in a dict as:<br>            #       {'extra_name': {'javascript data type': 'label for field'}}<br>            #  - order is an iterable which sets the column order in which the data should be<br>            #    rendered<br>            #  - formatting is a dict {'field_name': 'expression'}, where expression is a <br>            #    valid string.format() expression.<br>            spam_json = qset.to_json(labels={\"id__count\": \"Spam sold\", \"date\": {\"date\": \"Date\"}},<br>                                     order=(\"date\", \"id__count\"), <br>                                     formatting={\"id__count\": \"{0:d} units of spam\"})<br>            <br>            return render_to_response(\"sales_overviews/spamreport.html, {\"spam_data\": spam_json},<br>                                      context_instance=RequestContext(request))<br><br>**spamreport.html**<br><br>    ...<br><br>    {% load gcharts %}<br><br>    {% gcharts %}<br>        &lt;!-- Global options for all charts --&gt;<br>        options = {<br>            width: 500,<br>            height: 300<br>        };<br>    <br>        &lt;!-- cloned option and adapted for \"spam_opt\" --&gt;<br>        spam_opt = _clone(options);<br>        spam_opt.title = \"Units of Spam sold last 3 month\";<br>    <br>        {% options spam_opt %}<br>            kind: \"ColumnChart\",<br>            options: spam_opt,<br>        {% endoptions %}<br><br>        {% render \"spam_chart\" \"spam_data\" \"spam_opt\" %}<br>    <br>    {% endgcharts %}<br>    <br>    &lt;div id=\"spam_chart\"&gt;<br>        &lt;!-- container for spam_data chart --&gt;<br>    &lt;/div&gt;<br>    <br>    ...<br><br>Should output something like this.<br><br>![django-gcharts-example](https://raw.github.com/rhblind/django-gcharts/master/example.png)\n          </div>"}, "last_serial": 1167758, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "b1a2da42505bad0779ced9a45e2ef593", "sha256": "b1bc84f871303b151936657013cffb8bb098f8d27eb26c1b9a6a8d90ae1df503"}, "downloads": -1, "filename": "django-gcharts-1.0.tar.gz", "has_sig": false, "md5_digest": "b1a2da42505bad0779ced9a45e2ef593", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10530, "upload_time": "2012-10-09T20:08:07", "upload_time_iso_8601": "2012-10-09T20:08:07.775596Z", "url": "https://files.pythonhosted.org/packages/56/12/4380ce6fa220498b9505206a0bdb4f9142d5a402f0daf432798deb7883f0/django-gcharts-1.0.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "fa3b553412b036f4db3df3882e5526b8", "sha256": "2b427fec86b6a287ad3e242c8e100ca7bf2dae169faba2281fb50b8c6ab016ab"}, "downloads": -1, "filename": "django-gcharts-1.1.tar.gz", "has_sig": false, "md5_digest": "fa3b553412b036f4db3df3882e5526b8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10632, "upload_time": "2012-10-10T11:12:46", "upload_time_iso_8601": "2012-10-10T11:12:46.281207Z", "url": "https://files.pythonhosted.org/packages/90/3f/708ce0d6b504ea837c75990ba0ab47eacbfe4e8e527bc799ab728dc0ab7e/django-gcharts-1.1.tar.gz", "yanked": false}], "1.2": [{"comment_text": "", "digests": {"md5": "4cc1245331db837fcd1b5b71b29b0984", "sha256": "c68ec548c60a6854b79c06aeca35e87027bc0fb8296f255ac22c8739ed2be8fe"}, "downloads": -1, "filename": "django-gcharts-1.2.tar.gz", "has_sig": false, "md5_digest": "4cc1245331db837fcd1b5b71b29b0984", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10840, "upload_time": "2013-02-16T07:55:46", "upload_time_iso_8601": "2013-02-16T07:55:46.108384Z", "url": "https://files.pythonhosted.org/packages/55/74/b956b356be62c8706eddce05ce3bd7a8d5e981b597727b2b199f344b75f2/django-gcharts-1.2.tar.gz", "yanked": false}], "1.3": [{"comment_text": "", "digests": {"md5": "2a01d08a85cf955361b14dfa1afcb3b0", "sha256": "7a9387c03dc36c0d14ac982e4ebfcc74b60f576c8dc81baf6b1760606ed76f10"}, "downloads": -1, "filename": "django-gcharts-1.3.tar.gz", "has_sig": false, "md5_digest": "2a01d08a85cf955361b14dfa1afcb3b0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21656, "upload_time": "2014-07-24T10:38:24", "upload_time_iso_8601": "2014-07-24T10:38:24.152737Z", "url": "https://files.pythonhosted.org/packages/4a/76/683c174aede4e6b264a10d53f160457bd063567c69b20f6b0f00638d1fbc/django-gcharts-1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2a01d08a85cf955361b14dfa1afcb3b0", "sha256": "7a9387c03dc36c0d14ac982e4ebfcc74b60f576c8dc81baf6b1760606ed76f10"}, "downloads": -1, "filename": "django-gcharts-1.3.tar.gz", "has_sig": false, "md5_digest": "2a01d08a85cf955361b14dfa1afcb3b0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21656, "upload_time": "2014-07-24T10:38:24", "upload_time_iso_8601": "2014-07-24T10:38:24.152737Z", "url": "https://files.pythonhosted.org/packages/4a/76/683c174aede4e6b264a10d53f160457bd063567c69b20f6b0f00638d1fbc/django-gcharts-1.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:35:55 2020"}