{"info": {"author": "Yuvi Panda", "author_email": "yuvipanda@riseup.net", "bugtrack_url": null, "classifiers": [], "description": "# ldapauthenticator\n\n[![TravisCI (.com) build status](https://img.shields.io/travis/com/jupyterhub/ldapauthenticator/master?logo=travis)](https://travis-ci.com/jupyterhub/ldapauthenticator)\n[![Latest PyPI version](https://img.shields.io/pypi/v/jupyterhub-ldapauthenticator?logo=pypi)](https://pypi.python.org/pypi/jupyterhub-ldapauthenticator)\n[![Latest conda-forge version](https://img.shields.io/conda/vn/conda-forge/jupyterhub-ldapauthenticator?logo=conda-forge)](https://anaconda.org/conda-forge/jupyterhub-ldapauthenticator)\n[![GitHub](https://img.shields.io/badge/issue_tracking-github-blue?logo=github)](https://github.com/jupyterhub/ldapauthenticator/issues)\n[![Discourse](https://img.shields.io/badge/help_forum-discourse-blue?logo=discourse)](https://discourse.jupyter.org/c/jupyterhub)\n[![Gitter](https://img.shields.io/badge/social_chat-gitter-blue?logo=gitter)](https://gitter.im/jupyterhub/jupyterhub)\n\nSimple LDAP Authenticator Plugin for JupyterHub\n\n## Installation ##\n\nYou can install it from pip with:\n\n```\npip install jupyterhub-ldapauthenticator\n```\n...or using conda with:\n```\nconda install -c conda-forge jupyterhub-ldapauthenticator\n```\n\n\n## Logging people out ##\n\nIf you make any changes to JupyterHub's authentication setup that changes\nwhich group of users is allowed to login (such as changing `allowed_groups`\nor even just turning on LDAPAuthenticator), you **must** change the\njupyterhub cookie secret, or users who were previously logged in and did\nnot log out would continue to be able to log in!\n\nYou can do this by deleting the `jupyterhub_cookie_secret` file. Note\nthat this will log out *all* users who are currently logged in.\n\n\n## Usage ##\n\nYou can enable this authenticator with the following lines in your\n`jupyter_config.py`:\n\n```python\nc.JupyterHub.authenticator_class = 'ldapauthenticator.LDAPAuthenticator'\n```\n\n### Required configuration ###\n\nAt minimum, the following two configuration options must be set before\nthe LDAP Authenticator can be used:\n\n\n#### `LDAPAuthenticator.server_address` ####\n\nAddress of the LDAP Server to contact. Just use a bare hostname or IP,\nwithout a port name or protocol prefix.\n\n\n#### `LDAPAuthenticator.lookup_dn` or `LDAPAuthenticator.bind_dn_template` ####\n\nTo authenticate a user we need the corresponding DN to bind against the LDAP server. The DN can be acquired by either:\n\n1. setting `bind_dn_template`, which is a list of string template used to\n   generate the full DN for a user from the human readable username, or\n2. setting `lookup_dn` to `True`, which does a reverse lookup to obtain the\n   user's DN. This is because ome LDAP servers, such as Active Directory, don't\n   always bind with the true DN.\n\n##### `lookup_dn = False` #####\n\nIf `lookup_dn = False`, then `bind_dn_template` is required to be a non-empty\nlist of templates the users belong to. For example, if some of the users in your\nLDAP database have DN of the form `uid=Yuvipanda,ou=people,dc=wikimedia,dc=org`\nand some other users have DN like `uid=Mike,ou=developers,dc=wikimedia,dc=org`\nwhere `Yuvipanda` and `Mike` are the usernames, you would set this config item\nto be:\n\n```python\nc.LDAPAuthenticator.bind_dn_template = [\n    \"uid={username},ou=people,dc=wikimedia,dc=org\",\n    \"uid={username},ou=developers,dc=wikimedia,dc=org\",\n]\n```\n\nDon't forget the preceeding `c.` for setting configuration parameters! JupyterHub\nuses [traitlets](https://traitlets.readthedocs.io) for configuration, and the\n`c` represents the [config object](https://traitlets.readthedocs.io/en/stable/config.html).\n\nThe `{username}` is expanded into the username the user provides.\n\n##### `lookup_dn = True` #####\n\n```python\nc.LDAPAuthenticator.lookup_dn = True\n```\n\nIf `bind_dn_template` isn't explicitly configured, i.e. the empty list, the\ndynamically acquired value for DN from the username lookup will be used\ninstead. If `bind_dn_template` is configured it will be used just like in the\n`lookup_dn = False` case.\n\nThe `{username}` is expanded to the full path to the LDAP object returned by the\nLDAP lookup. For example, on an Active Directory system `{username}` might\nexpand to something like `CN=First M. Last,OU=An Example Organizational\nUnit,DC=EXAMPLE,DC=COM`.\n\nAlso, when using `lookup_dn = True` the options `user_search_base`,\n`user_attribute`, `lookup_dn_user_dn_attribute` and `lookup_dn_search_filter`\nare required, although their defaults might be sufficient for your use case.\n\n### Optional configuration ###\n\n#### `LDAPAuthenticator.allowed_groups` ####\n\nLDAP groups whose members are allowed to log in. This must be\nset to either empty `[]` (the default, to disable) or to a list of\nfull DNs that have a `member` attribute that includes the current\nuser attempting to log in.\n\nAs an example, to restrict access only to people in groups\n`researcher` or `operations`,\n\n```python\nc.LDAPAuthenticator.allowed_groups = [\n    \"cn=researcher,ou=groups,dc=wikimedia,dc=org\",\n    \"cn=operations,ou=groups,dc=wikimedia,dc=org\",\n]\n```\n\n#### `LDAPAuthenticator.valid_username_regex` ####\n\nAll usernames will be checked against this before being sent\nto LDAP. This acts as both an easy way to filter out invalid\nusernames as well as protection against LDAP injection attacks.\n\nBy default it looks for the regex `^[a-z][.a-z0-9_-]*$` which\nis what most shell username validators do.\n\n#### `LDAPAuthenticator.use_ssl` ####\n\nBoolean to specify whether to use SSL encryption when contacting\nthe LDAP server. If it is left to `False` (the default)\n`LDAPAuthenticator` will try to upgrade connection with StartTLS.\nSet this to be `True` to start SSL connection.\n\n#### `LDAPAuthenticator.server_port` ####\n\nPort to use to contact the LDAP server. Defaults to 389 if no SSL\nis being used, and 636 is SSL is being used.\n\n#### `LDAPAuthenticator.user_search_base` ####\n\nOnly used with `lookup_dn=True`.  Defines the search base for looking up users\nin the directory.\n\n```python\nc.LDAPAuthenticator.user_search_base = 'ou=People,dc=example,dc=com'\n```\n\n#### `LDAPAuthenticator.user_attribute` ####\n\nOnly used with `lookup_dn=True`.  Defines the attribute that stores a user's\nusername in your directory.\n\n```python\n# Active Directory\nc.LDAPAuthenticator.user_attribute = 'sAMAccountName'\n\n# OpenLDAP\nc.LDAPAuthenticator.user_attribute = 'uid'\n```\n\n#### `LDAPAuthenticator.lookup_dn_search_filter` ####\n\nHow to query LDAP for user name lookup, if `lookup_dn` is set to True.\nDefault value `'({login_attr}={login})'` should be good enough for most use cases.\n\n\n#### `LDAPAuthenticator.lookup_dn_search_user`, `LDAPAuthenticator.lookup_dn_search_password` ####\n\nTechnical account for user lookup, if `lookup_dn` is set to True.\nIf both lookup_dn_search_user and lookup_dn_search_password are None, then anonymous LDAP query will be done.\n\n\n#### `LDAPAuthenticator.lookup_dn_user_dn_attribute` ####\n\nAttribute containing user's name needed for  building DN string, if `lookup_dn` is set to True.\nSee `user_search_base` for info on how this attribute is used.\nFor most LDAP servers, this is username.  For Active Directory, it is cn.\n\n#### `LDAPAuthenticator.escape_userdn` ####\n\nIf set to True, escape special chars in userdn when authenticating in LDAP.\nOn some LDAP servers, when userdn contains chars like '(', ')', '\\' authentication may fail when those chars\nare not escaped.\n\n#### `LDAPAuthenticator.auth_state_attributes` ####\n\nAn optional list of attributes to be fetched for a user after login.\nIf found these will be returned as `auth_state`.\n\n#### `LDAPAuthenticator.use_lookup_dn_username` ####\n\nIf set to True (the default) the username used to build the DN string is returned as the username when `lookup_dn` is True.\n\nWhen authenticating on a Linux machine against an AD server this might return something different from the supplied UNIX username. In this case setting this option to False might be a solution.\n\n## Compatibility ##\n\nThis has been tested against an OpenLDAP server, with the client\nrunning Python 3.4. Verifications of this code working well with\nother LDAP setups are welcome, as are bug reports and patches to make\nit work with other LDAP setups!\n\n\n## Active Directory integration ##\n\nPlease use following options for AD integration. This is useful especially in two cases:\n* LDAP Search requires valid user account in order to query user database\n* DN does not contain login but some other field, like CN (actual login is present in sAMAccountName, and we need to lookup CN)\n\n```python\nc.LDAPAuthenticator.lookup_dn = True\nc.LDAPAuthenticator.lookup_dn_search_filter = '({login_attr}={login})'\nc.LDAPAuthenticator.lookup_dn_search_user = 'ldap_search_user_technical_account'\nc.LDAPAuthenticator.lookup_dn_search_password = 'secret'\nc.LDAPAuthenticator.user_search_base = 'ou=people,dc=wikimedia,dc=org'\nc.LDAPAuthenticator.user_attribute = 'sAMAccountName'\nc.LDAPAuthenticator.lookup_dn_user_dn_attribute = 'cn'\nc.LDAPAuthenticator.escape_userdn = False\nc.LDAPAuthenticator.bind_dn_template = '{username}'\n```\n\nIn setup above, first LDAP will be searched (with account ldap_search_user_technical_account) for users that have sAMAccountName=login\nThen DN will be constructed using found CN value.\n\n\n## Configuration note on local user creation\n\nCurrently, local user creation by the LDAPAuthenticator is unsupported as\nthis is insecure since there's no cleanup method for these created users. As a\nresult, users who are disabled in LDAP will have access to this for far longer.\n\nAlternatively, there's good support in Linux for integrating LDAP into the\nsystem user setup directly, and users can just use PAM (which is supported in\nnot just JupyterHub, but ssh and a lot of other tools) to log in. You can see\nhttp://www.tldp.org/HOWTO/archived/LDAP-Implementation-HOWTO/pamnss.html and\nlots of other documentation on the web on how to set up LDAP to provide user\naccounts for your system. Those methods are very widely used, much more secure\nand more widely documented. We recommend you use them rather than have\nJupyterHub create local accounts using the LDAPAuthenticator.\n\nIssue [#19](https://github.com/jupyterhub/ldapauthenticator/issues/19) provides\nadditional discussion on local user creation.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jupyterhub/ldapauthenticator", "keywords": "", "license": "3 Clause BSD", "maintainer": "", "maintainer_email": "", "name": "jupyterhub-ldapauthenticator", "package_url": "https://pypi.org/project/jupyterhub-ldapauthenticator/", "platform": "", "project_url": "https://pypi.org/project/jupyterhub-ldapauthenticator/", "project_urls": {"Homepage": "https://github.com/jupyterhub/ldapauthenticator"}, "release_url": "https://pypi.org/project/jupyterhub-ldapauthenticator/1.3.0/", "requires_dist": ["jupyterhub", "ldap3", "tornado", "traitlets"], "requires_python": "", "summary": "LDAP Authenticator for JupyterHub", "version": "1.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>ldapauthenticator</h1>\n<p><a href=\"https://travis-ci.com/jupyterhub/ldapauthenticator\" rel=\"nofollow\"><img alt=\"TravisCI (.com) build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d0af88be6ce0cffb69e45a532481c19cb5f72bf0/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f636f6d2f6a7570797465726875622f6c64617061757468656e74696361746f722f6d61737465723f6c6f676f3d747261766973\"></a>\n<a href=\"https://pypi.python.org/pypi/jupyterhub-ldapauthenticator\" rel=\"nofollow\"><img alt=\"Latest PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ecf283974406ea237f27545187aa1326d9c75587/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6a7570797465726875622d6c64617061757468656e74696361746f723f6c6f676f3d70797069\"></a>\n<a href=\"https://anaconda.org/conda-forge/jupyterhub-ldapauthenticator\" rel=\"nofollow\"><img alt=\"Latest conda-forge version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/50d88ce8eedba2a24f71687bc2619f5f6a5a284e/68747470733a2f2f696d672e736869656c64732e696f2f636f6e64612f766e2f636f6e64612d666f7267652f6a7570797465726875622d6c64617061757468656e74696361746f723f6c6f676f3d636f6e64612d666f726765\"></a>\n<a href=\"https://github.com/jupyterhub/ldapauthenticator/issues\" rel=\"nofollow\"><img alt=\"GitHub\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/05cafd6d6747fad27fb3394520b1bdae2ec3198d/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f69737375655f747261636b696e672d6769746875622d626c75653f6c6f676f3d676974687562\"></a>\n<a href=\"https://discourse.jupyter.org/c/jupyterhub\" rel=\"nofollow\"><img alt=\"Discourse\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ac8ba04be15a5604407f33abdda50430c7716cb6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f68656c705f666f72756d2d646973636f757273652d626c75653f6c6f676f3d646973636f75727365\"></a>\n<a href=\"https://gitter.im/jupyterhub/jupyterhub\" rel=\"nofollow\"><img alt=\"Gitter\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0a60ab1efba1bbedb06db893de39ba8b8209a85c/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f736f6369616c5f636861742d6769747465722d626c75653f6c6f676f3d676974746572\"></a></p>\n<p>Simple LDAP Authenticator Plugin for JupyterHub</p>\n<h2>Installation</h2>\n<p>You can install it from pip with:</p>\n<pre><code>pip install jupyterhub-ldapauthenticator\n</code></pre>\n<p>...or using conda with:</p>\n<pre><code>conda install -c conda-forge jupyterhub-ldapauthenticator\n</code></pre>\n<h2>Logging people out</h2>\n<p>If you make any changes to JupyterHub's authentication setup that changes\nwhich group of users is allowed to login (such as changing <code>allowed_groups</code>\nor even just turning on LDAPAuthenticator), you <strong>must</strong> change the\njupyterhub cookie secret, or users who were previously logged in and did\nnot log out would continue to be able to log in!</p>\n<p>You can do this by deleting the <code>jupyterhub_cookie_secret</code> file. Note\nthat this will log out <em>all</em> users who are currently logged in.</p>\n<h2>Usage</h2>\n<p>You can enable this authenticator with the following lines in your\n<code>jupyter_config.py</code>:</p>\n<pre><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">JupyterHub</span><span class=\"o\">.</span><span class=\"n\">authenticator_class</span> <span class=\"o\">=</span> <span class=\"s1\">'ldapauthenticator.LDAPAuthenticator'</span>\n</pre>\n<h3>Required configuration</h3>\n<p>At minimum, the following two configuration options must be set before\nthe LDAP Authenticator can be used:</p>\n<h4><code>LDAPAuthenticator.server_address</code></h4>\n<p>Address of the LDAP Server to contact. Just use a bare hostname or IP,\nwithout a port name or protocol prefix.</p>\n<h4><code>LDAPAuthenticator.lookup_dn</code> or <code>LDAPAuthenticator.bind_dn_template</code></h4>\n<p>To authenticate a user we need the corresponding DN to bind against the LDAP server. The DN can be acquired by either:</p>\n<ol>\n<li>setting <code>bind_dn_template</code>, which is a list of string template used to\ngenerate the full DN for a user from the human readable username, or</li>\n<li>setting <code>lookup_dn</code> to <code>True</code>, which does a reverse lookup to obtain the\nuser's DN. This is because ome LDAP servers, such as Active Directory, don't\nalways bind with the true DN.</li>\n</ol>\n<h5><code>lookup_dn = False</code></h5>\n<p>If <code>lookup_dn = False</code>, then <code>bind_dn_template</code> is required to be a non-empty\nlist of templates the users belong to. For example, if some of the users in your\nLDAP database have DN of the form <code>uid=Yuvipanda,ou=people,dc=wikimedia,dc=org</code>\nand some other users have DN like <code>uid=Mike,ou=developers,dc=wikimedia,dc=org</code>\nwhere <code>Yuvipanda</code> and <code>Mike</code> are the usernames, you would set this config item\nto be:</p>\n<pre><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">LDAPAuthenticator</span><span class=\"o\">.</span><span class=\"n\">bind_dn_template</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s2\">\"uid=</span><span class=\"si\">{username}</span><span class=\"s2\">,ou=people,dc=wikimedia,dc=org\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"uid=</span><span class=\"si\">{username}</span><span class=\"s2\">,ou=developers,dc=wikimedia,dc=org\"</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n</pre>\n<p>Don't forget the preceeding <code>c.</code> for setting configuration parameters! JupyterHub\nuses <a href=\"https://traitlets.readthedocs.io\" rel=\"nofollow\">traitlets</a> for configuration, and the\n<code>c</code> represents the <a href=\"https://traitlets.readthedocs.io/en/stable/config.html\" rel=\"nofollow\">config object</a>.</p>\n<p>The <code>{username}</code> is expanded into the username the user provides.</p>\n<h5><code>lookup_dn = True</code></h5>\n<pre><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">LDAPAuthenticator</span><span class=\"o\">.</span><span class=\"n\">lookup_dn</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n</pre>\n<p>If <code>bind_dn_template</code> isn't explicitly configured, i.e. the empty list, the\ndynamically acquired value for DN from the username lookup will be used\ninstead. If <code>bind_dn_template</code> is configured it will be used just like in the\n<code>lookup_dn = False</code> case.</p>\n<p>The <code>{username}</code> is expanded to the full path to the LDAP object returned by the\nLDAP lookup. For example, on an Active Directory system <code>{username}</code> might\nexpand to something like <code>CN=First M. Last,OU=An Example Organizational Unit,DC=EXAMPLE,DC=COM</code>.</p>\n<p>Also, when using <code>lookup_dn = True</code> the options <code>user_search_base</code>,\n<code>user_attribute</code>, <code>lookup_dn_user_dn_attribute</code> and <code>lookup_dn_search_filter</code>\nare required, although their defaults might be sufficient for your use case.</p>\n<h3>Optional configuration</h3>\n<h4><code>LDAPAuthenticator.allowed_groups</code></h4>\n<p>LDAP groups whose members are allowed to log in. This must be\nset to either empty <code>[]</code> (the default, to disable) or to a list of\nfull DNs that have a <code>member</code> attribute that includes the current\nuser attempting to log in.</p>\n<p>As an example, to restrict access only to people in groups\n<code>researcher</code> or <code>operations</code>,</p>\n<pre><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">LDAPAuthenticator</span><span class=\"o\">.</span><span class=\"n\">allowed_groups</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s2\">\"cn=researcher,ou=groups,dc=wikimedia,dc=org\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"cn=operations,ou=groups,dc=wikimedia,dc=org\"</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n</pre>\n<h4><code>LDAPAuthenticator.valid_username_regex</code></h4>\n<p>All usernames will be checked against this before being sent\nto LDAP. This acts as both an easy way to filter out invalid\nusernames as well as protection against LDAP injection attacks.</p>\n<p>By default it looks for the regex <code>^[a-z][.a-z0-9_-]*$</code> which\nis what most shell username validators do.</p>\n<h4><code>LDAPAuthenticator.use_ssl</code></h4>\n<p>Boolean to specify whether to use SSL encryption when contacting\nthe LDAP server. If it is left to <code>False</code> (the default)\n<code>LDAPAuthenticator</code> will try to upgrade connection with StartTLS.\nSet this to be <code>True</code> to start SSL connection.</p>\n<h4><code>LDAPAuthenticator.server_port</code></h4>\n<p>Port to use to contact the LDAP server. Defaults to 389 if no SSL\nis being used, and 636 is SSL is being used.</p>\n<h4><code>LDAPAuthenticator.user_search_base</code></h4>\n<p>Only used with <code>lookup_dn=True</code>.  Defines the search base for looking up users\nin the directory.</p>\n<pre><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">LDAPAuthenticator</span><span class=\"o\">.</span><span class=\"n\">user_search_base</span> <span class=\"o\">=</span> <span class=\"s1\">'ou=People,dc=example,dc=com'</span>\n</pre>\n<h4><code>LDAPAuthenticator.user_attribute</code></h4>\n<p>Only used with <code>lookup_dn=True</code>.  Defines the attribute that stores a user's\nusername in your directory.</p>\n<pre><span class=\"c1\"># Active Directory</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">LDAPAuthenticator</span><span class=\"o\">.</span><span class=\"n\">user_attribute</span> <span class=\"o\">=</span> <span class=\"s1\">'sAMAccountName'</span>\n\n<span class=\"c1\"># OpenLDAP</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">LDAPAuthenticator</span><span class=\"o\">.</span><span class=\"n\">user_attribute</span> <span class=\"o\">=</span> <span class=\"s1\">'uid'</span>\n</pre>\n<h4><code>LDAPAuthenticator.lookup_dn_search_filter</code></h4>\n<p>How to query LDAP for user name lookup, if <code>lookup_dn</code> is set to True.\nDefault value <code>'({login_attr}={login})'</code> should be good enough for most use cases.</p>\n<h4><code>LDAPAuthenticator.lookup_dn_search_user</code>, <code>LDAPAuthenticator.lookup_dn_search_password</code></h4>\n<p>Technical account for user lookup, if <code>lookup_dn</code> is set to True.\nIf both lookup_dn_search_user and lookup_dn_search_password are None, then anonymous LDAP query will be done.</p>\n<h4><code>LDAPAuthenticator.lookup_dn_user_dn_attribute</code></h4>\n<p>Attribute containing user's name needed for  building DN string, if <code>lookup_dn</code> is set to True.\nSee <code>user_search_base</code> for info on how this attribute is used.\nFor most LDAP servers, this is username.  For Active Directory, it is cn.</p>\n<h4><code>LDAPAuthenticator.escape_userdn</code></h4>\n<p>If set to True, escape special chars in userdn when authenticating in LDAP.\nOn some LDAP servers, when userdn contains chars like '(', ')', '' authentication may fail when those chars\nare not escaped.</p>\n<h4><code>LDAPAuthenticator.auth_state_attributes</code></h4>\n<p>An optional list of attributes to be fetched for a user after login.\nIf found these will be returned as <code>auth_state</code>.</p>\n<h4><code>LDAPAuthenticator.use_lookup_dn_username</code></h4>\n<p>If set to True (the default) the username used to build the DN string is returned as the username when <code>lookup_dn</code> is True.</p>\n<p>When authenticating on a Linux machine against an AD server this might return something different from the supplied UNIX username. In this case setting this option to False might be a solution.</p>\n<h2>Compatibility</h2>\n<p>This has been tested against an OpenLDAP server, with the client\nrunning Python 3.4. Verifications of this code working well with\nother LDAP setups are welcome, as are bug reports and patches to make\nit work with other LDAP setups!</p>\n<h2>Active Directory integration</h2>\n<p>Please use following options for AD integration. This is useful especially in two cases:</p>\n<ul>\n<li>LDAP Search requires valid user account in order to query user database</li>\n<li>DN does not contain login but some other field, like CN (actual login is present in sAMAccountName, and we need to lookup CN)</li>\n</ul>\n<pre><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">LDAPAuthenticator</span><span class=\"o\">.</span><span class=\"n\">lookup_dn</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">LDAPAuthenticator</span><span class=\"o\">.</span><span class=\"n\">lookup_dn_search_filter</span> <span class=\"o\">=</span> <span class=\"s1\">'(</span><span class=\"si\">{login_attr}</span><span class=\"s1\">=</span><span class=\"si\">{login}</span><span class=\"s1\">)'</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">LDAPAuthenticator</span><span class=\"o\">.</span><span class=\"n\">lookup_dn_search_user</span> <span class=\"o\">=</span> <span class=\"s1\">'ldap_search_user_technical_account'</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">LDAPAuthenticator</span><span class=\"o\">.</span><span class=\"n\">lookup_dn_search_password</span> <span class=\"o\">=</span> <span class=\"s1\">'secret'</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">LDAPAuthenticator</span><span class=\"o\">.</span><span class=\"n\">user_search_base</span> <span class=\"o\">=</span> <span class=\"s1\">'ou=people,dc=wikimedia,dc=org'</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">LDAPAuthenticator</span><span class=\"o\">.</span><span class=\"n\">user_attribute</span> <span class=\"o\">=</span> <span class=\"s1\">'sAMAccountName'</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">LDAPAuthenticator</span><span class=\"o\">.</span><span class=\"n\">lookup_dn_user_dn_attribute</span> <span class=\"o\">=</span> <span class=\"s1\">'cn'</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">LDAPAuthenticator</span><span class=\"o\">.</span><span class=\"n\">escape_userdn</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">LDAPAuthenticator</span><span class=\"o\">.</span><span class=\"n\">bind_dn_template</span> <span class=\"o\">=</span> <span class=\"s1\">'</span><span class=\"si\">{username}</span><span class=\"s1\">'</span>\n</pre>\n<p>In setup above, first LDAP will be searched (with account ldap_search_user_technical_account) for users that have sAMAccountName=login\nThen DN will be constructed using found CN value.</p>\n<h2>Configuration note on local user creation</h2>\n<p>Currently, local user creation by the LDAPAuthenticator is unsupported as\nthis is insecure since there's no cleanup method for these created users. As a\nresult, users who are disabled in LDAP will have access to this for far longer.</p>\n<p>Alternatively, there's good support in Linux for integrating LDAP into the\nsystem user setup directly, and users can just use PAM (which is supported in\nnot just JupyterHub, but ssh and a lot of other tools) to log in. You can see\n<a href=\"http://www.tldp.org/HOWTO/archived/LDAP-Implementation-HOWTO/pamnss.html\" rel=\"nofollow\">http://www.tldp.org/HOWTO/archived/LDAP-Implementation-HOWTO/pamnss.html</a> and\nlots of other documentation on the web on how to set up LDAP to provide user\naccounts for your system. Those methods are very widely used, much more secure\nand more widely documented. We recommend you use them rather than have\nJupyterHub create local accounts using the LDAPAuthenticator.</p>\n<p>Issue <a href=\"https://github.com/jupyterhub/ldapauthenticator/issues/19\" rel=\"nofollow\">#19</a> provides\nadditional discussion on local user creation.</p>\n\n          </div>"}, "last_serial": 6599243, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "4058665f494578ffc1fd0db08eaf146d", "sha256": "489c5583f35f6c0807981d94be99eeae6e939703eed710f607b9b0a809d1b0c7"}, "downloads": -1, "filename": "jupyterhub-ldapauthenticator-0.1.tar.gz", "has_sig": false, "md5_digest": "4058665f494578ffc1fd0db08eaf146d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1931, "upload_time": "2016-03-28T17:32:12", "upload_time_iso_8601": "2016-03-28T17:32:12.874958Z", "url": "https://files.pythonhosted.org/packages/ff/09/b2f957607cb9a8300dfc1be828b6293c997825ba2112c619d6d407e432b5/jupyterhub-ldapauthenticator-0.1.tar.gz", "yanked": false}], "1.0": [{"comment_text": "", "digests": {"md5": "a97606c33f202a37b7a4a200e08214d4", "sha256": "56bcafec37fec8701476604ddef5266bb6d34fe70a49968d41d05c1cd8f4211b"}, "downloads": -1, "filename": "jupyterhub_ldapauthenticator-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a97606c33f202a37b7a4a200e08214d4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3563, "upload_time": "2016-03-28T17:32:46", "upload_time_iso_8601": "2016-03-28T17:32:46.124867Z", "url": "https://files.pythonhosted.org/packages/cb/02/4822f3827d71c3766d7fd63af27ea0f4ec39f5f261161e0270657d995e7f/jupyterhub_ldapauthenticator-1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b1b17b38e42f5a32adb557f9c30647c7", "sha256": "3e1d2b6da0aec0420456b2ca5a5c1e41cb2dc3dd276f656041742d2e30df8f27"}, "downloads": -1, "filename": "jupyterhub-ldapauthenticator-1.0.tar.gz", "has_sig": false, "md5_digest": "b1b17b38e42f5a32adb557f9c30647c7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1931, "upload_time": "2016-03-28T17:32:52", "upload_time_iso_8601": "2016-03-28T17:32:52.582150Z", "url": "https://files.pythonhosted.org/packages/bf/8d/9954f198265584912c7e86cbd61077972f81fd73e7c78ae0bcafc3276c6b/jupyterhub-ldapauthenticator-1.0.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "ba73fc5ebf8d1a59dc26824037559424", "sha256": "c2dff4eefdfde3ba23200bc0f909c2b1524725a87f349db19ac9b3aeeb604129"}, "downloads": -1, "filename": "jupyterhub_ldapauthenticator-1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "ba73fc5ebf8d1a59dc26824037559424", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 4043, "upload_time": "2016-11-21T17:18:04", "upload_time_iso_8601": "2016-11-21T17:18:04.813464Z", "url": "https://files.pythonhosted.org/packages/94/3f/e2f4ee9f0a8aa4e281477f96af0961c8a74b443eecbe3fc21b5d5e960167/jupyterhub_ldapauthenticator-1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "25719623dd678b180d4610075296a0e5", "sha256": "9f77762b1347b222d028eadcb158a6988d9ee09245f63829b2940b11861abfa5"}, "downloads": -1, "filename": "jupyterhub-ldapauthenticator-1.1.tar.gz", "has_sig": false, "md5_digest": "25719623dd678b180d4610075296a0e5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2400, "upload_time": "2016-11-21T17:18:01", "upload_time_iso_8601": "2016-11-21T17:18:01.462262Z", "url": "https://files.pythonhosted.org/packages/6c/da/d85f6a7a74ede19994cb249044bd9e9ec8bd5ea749c46255e160749a7d1e/jupyterhub-ldapauthenticator-1.1.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "0133f826eada894ea633c8372c3a51e2", "sha256": "e837258d2c61228a1f059afddc19ffff61dca1bac18e97efb18eb50883748bc8"}, "downloads": -1, "filename": "jupyterhub_ldapauthenticator-1.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0133f826eada894ea633c8372c3a51e2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5837, "upload_time": "2018-06-07T05:23:52", "upload_time_iso_8601": "2018-06-07T05:23:52.779481Z", "url": "https://files.pythonhosted.org/packages/a9/b6/cdd4750cc3dedfb6971cf10891a69e307bab214565bb0ac1f7582a6c3c38/jupyterhub_ldapauthenticator-1.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "16fa63b8c2c3d6bf02ce9fdfae202848", "sha256": "47518a6fb4ffe58df7b63b581dcfcfc805b6d7de26061a24c8c0c82afc3f3933"}, "downloads": -1, "filename": "jupyterhub-ldapauthenticator-1.2.0.tar.gz", "has_sig": false, "md5_digest": "16fa63b8c2c3d6bf02ce9fdfae202848", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7462, "upload_time": "2018-06-07T05:23:53", "upload_time_iso_8601": "2018-06-07T05:23:53.996792Z", "url": "https://files.pythonhosted.org/packages/5e/5c/b728d417bb2b5dce80ae9e586f6434b3d3c53afc810c08b3026a5a0454d5/jupyterhub-ldapauthenticator-1.2.0.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "b48cc196cdbd501bedd38499d2ae8f8d", "sha256": "a6fdf1ad1c0298f42f0c8c1dd14558123c299dcdfbdb6c31a4a2311fcd5fc4af"}, "downloads": -1, "filename": "jupyterhub_ldapauthenticator-1.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b48cc196cdbd501bedd38499d2ae8f8d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5838, "upload_time": "2018-06-08T05:20:29", "upload_time_iso_8601": "2018-06-08T05:20:29.630089Z", "url": "https://files.pythonhosted.org/packages/4c/ca/1974c3c6e9bdbdca02449a1a6cd2de35f9bab8f541767ff73e88a8fdaa6b/jupyterhub_ldapauthenticator-1.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bf020e393525bfb3eccd3cec8c5bde38", "sha256": "192406a8872727fdf4651aaa0d47cc91401c173399db1b835084ef86dbba49e2"}, "downloads": -1, "filename": "jupyterhub-ldapauthenticator-1.2.1.tar.gz", "has_sig": false, "md5_digest": "bf020e393525bfb3eccd3cec8c5bde38", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7512, "upload_time": "2018-06-08T05:20:30", "upload_time_iso_8601": "2018-06-08T05:20:30.885686Z", "url": "https://files.pythonhosted.org/packages/18/57/eb25276959fd6fee6c48547255cb3f8efb3ced0520474ef5f6eb4ae46b74/jupyterhub-ldapauthenticator-1.2.1.tar.gz", "yanked": false}], "1.2.2": [{"comment_text": "", "digests": {"md5": "0850e4adac0710fa9a8877d4052b5aaf", "sha256": "3e0b6904d63e754e70dc1a02c345c1a76b2b1976c9a2bbdf07c270a44a16b470"}, "downloads": -1, "filename": "jupyterhub_ldapauthenticator-1.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "0850e4adac0710fa9a8877d4052b5aaf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5894, "upload_time": "2018-06-14T11:47:23", "upload_time_iso_8601": "2018-06-14T11:47:23.035954Z", "url": "https://files.pythonhosted.org/packages/d9/f6/a6ffa0b57ea08066d9ea52b64ad141866e984dd3ed5767c96e5eb51fc6a3/jupyterhub_ldapauthenticator-1.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b5886d40650eaff7ef19c9e878e1d1d4", "sha256": "5bba2ee246834130c9f86c13d39585b1af21563b814fa03aacb26b6696dd7e20"}, "downloads": -1, "filename": "jupyterhub-ldapauthenticator-1.2.2.tar.gz", "has_sig": false, "md5_digest": "b5886d40650eaff7ef19c9e878e1d1d4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8445, "upload_time": "2018-06-14T11:47:24", "upload_time_iso_8601": "2018-06-14T11:47:24.440434Z", "url": "https://files.pythonhosted.org/packages/80/6f/f91eb4bf20855173b8da2169e489523c158183f23864358d9cc7bbc1e832/jupyterhub-ldapauthenticator-1.2.2.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "3f62e48fc603c5b1adbd7ab622def010", "sha256": "8f709a1db9f4b069e9aecb2e2ad7c10d0fb8bc0f97889428404942b6505f858b"}, "downloads": -1, "filename": "jupyterhub_ldapauthenticator-1.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3f62e48fc603c5b1adbd7ab622def010", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11193, "upload_time": "2020-02-09T21:53:51", "upload_time_iso_8601": "2020-02-09T21:53:51.435337Z", "url": "https://files.pythonhosted.org/packages/8e/76/067b55431d852809b0e59897fffc8b135e08e5ab1ce6d94df6b1166f9ed3/jupyterhub_ldapauthenticator-1.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ba26e2f4818a434cfbd0de624616b4fe", "sha256": "920b115babdc32e7b159fc497a0a794bb0f57b222ce2c26c74a23594892f9d3c"}, "downloads": -1, "filename": "jupyterhub-ldapauthenticator-1.3.0.tar.gz", "has_sig": false, "md5_digest": "ba26e2f4818a434cfbd0de624616b4fe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10584, "upload_time": "2020-02-09T21:53:52", "upload_time_iso_8601": "2020-02-09T21:53:52.393185Z", "url": "https://files.pythonhosted.org/packages/38/71/e747105c5676b73aa3f294a20ea36e231a3f971682bddc8940047ecc31fd/jupyterhub-ldapauthenticator-1.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3f62e48fc603c5b1adbd7ab622def010", "sha256": "8f709a1db9f4b069e9aecb2e2ad7c10d0fb8bc0f97889428404942b6505f858b"}, "downloads": -1, "filename": "jupyterhub_ldapauthenticator-1.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3f62e48fc603c5b1adbd7ab622def010", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11193, "upload_time": "2020-02-09T21:53:51", "upload_time_iso_8601": "2020-02-09T21:53:51.435337Z", "url": "https://files.pythonhosted.org/packages/8e/76/067b55431d852809b0e59897fffc8b135e08e5ab1ce6d94df6b1166f9ed3/jupyterhub_ldapauthenticator-1.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ba26e2f4818a434cfbd0de624616b4fe", "sha256": "920b115babdc32e7b159fc497a0a794bb0f57b222ce2c26c74a23594892f9d3c"}, "downloads": -1, "filename": "jupyterhub-ldapauthenticator-1.3.0.tar.gz", "has_sig": false, "md5_digest": "ba26e2f4818a434cfbd0de624616b4fe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10584, "upload_time": "2020-02-09T21:53:52", "upload_time_iso_8601": "2020-02-09T21:53:52.393185Z", "url": "https://files.pythonhosted.org/packages/38/71/e747105c5676b73aa3f294a20ea36e231a3f971682bddc8940047ecc31fd/jupyterhub-ldapauthenticator-1.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:16 2020"}