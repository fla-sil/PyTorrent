{"info": {"author": "Evan W. Patton", "author_email": "ewpatton@mit.edu", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: Education", "Intended Audience :: Science/Research", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Education", "Topic :: Scientific/Engineering :: Information Analysis", "Topic :: Software Development", "Topic :: Utilities"], "description": "# AIA Tools\nAIA Tools is a Python library for interacting with App Inventor Application (AIA) files in Python. It is useful for opening, summarizing, and analyzing AIA files for research inquiries. The query API is inspired by SQLalchemy\n\n## Installing\n\n```shell\n$ pip install aiatools\n```\n\nFor development:\n\n```shell\n$ pyenv install 3.6.3\n$ pyenv virtualenv 3.6.3 aiatools\n$ pyenv activate aiatools\n$ pip install -r requirements.txt\n$ pip install .\n```\n\n## Usage Examples\n\n```python\nfrom aiatools import AIAFile\n\nwith AIAFile('MyProject.aia') as aia:\n    print('Number of screens: %d\\n' % len(aia.screens))\n    print('Number of components: %d\\n' % len(aia.screens['Screen1'].componentiter()))\n    print('Number of blocks: %d\\n' % len(aia.screens['Screen1'].blockiter()))\n    print('Number of event blocks: %d\\n' % len(aia.screens['Screen1'].blockiter(type='component_event')))\n    aia.screens['Screen1'].blocks(type=='component_event').count(by='event_name')\n```\n\n```python\nfrom aiatools import AIAFile\nfrom aiatools.attributes import event_name, type\nfrom aiatools.block_types import *\nfrom aiatools.component_types import *\n\naia = AIAFile('MyProject.aia')\n\n# Count the number of screens\nprint len(aia.screens)\n\n# Count the number of distinct component types used on Screen1\nprint aia.screens['Screen1'].components().count(group_by=type)\n\n# Count the number of Button components on Screen1\nprint aia.screens['Screen1'].components(type==Button).count()\n\n# Count the number of component_event blocks, grouped by event name\nprint aia.screens['Screen1'].blocks(type==component_event).count(group_by=event_name)\n\n# Compute the average depth of the blocks tree in Button.Click handlers\nprint aia.screens['Screen1'].blocks(type==component_event && event_name == Button.Click).avg(depth)\n\n# Count the number of blocks referencing a specific component\nprint aia.screens['Screen1'].components(name=='Button1').blocks().count()\n\n# Count the number of event handlers where the event opens another screen\nprint aia.blocks(type==component_event).descendants(type==control_openAnotherScreen).count()\n\n# Get the screens where the user has included more than one TinyDB\nprint aia.screens().components(type==TinyDB).count(group_by = Screen.name).filter(lambda k,v: v > 1)\n```\n\n## Selectors\n\n```python\nproject = AIAFile('project.aia')\n\nproject.screens()  # Select all screens\nproject.screens('Screen1')  # Select Screen1\nproject.screens(Button.any)  # Select any screen with at least 1 button\nproject.screens(Control.open_another_screen)  # Select any screen containing an open_another_screen block\nproject.screens(Component.Name == 'TinyDb1')  # Select any screen containing a component named TinyDb1\n```\n\n```python\nclass Block(object):\n    \"\"\"\n    :py:class:`Block` represents an individual block in the blocks workspace.\n\n    .. Arguments ::\n        id_ The block ID\n        type_ :py:class:`BlockType` The block type\n    \"\"\"\n    def __init__(self, id_, type_):\n        self.id = id_\n        self.type = type_\n        self.parent = None\n        self.children = []\n\n\nclass Component(object):\n    \"\"\"\n    :py:class:`Component` represents a component in the designer view.\n\n    .. Arguments ::\n        id_\n        type_ :py:class:`ComponentType`\n    \"\"\"\n    def __init__(self, id_, type_):\n        self.id = id_\n        self.type = type_\n        self.properties = {}\n\n\nclass ComponentContainer(Component):\n    def __init__(self, id_, type_):\n        super(self, ComponentContainer).__init__(id_, type_)\n        self.components = []\n\n\nclass BlockType(object):\n    def __init__(self, name):\n        self.name = name\n        self.mutators = []\n\n\nclass ComponentType(object):\n    def __init__(self, name, class_name):\n        self.name = name\n        self.class_name = class_name\n\n\nclass Screen(object):\n    def __init__(self, scm=None, bky=None):\n        self.name = ''\n        self.properties = {}\n        self.components = FilterableDict()\n        self.blocks = FilterableDict()\n        self.top_blocks = FilterableDict()\n        if scm is not None:\n            self._read_scheme(scm)\n        if bky is not None:\n            self._read_blocks(bky)\n\n\nclass Project(object):\n    def __init__(self, file=None):\n        self.name = ''\n        self.screens = FilterableDict()\n        self.components = FilterableDict()\n        self.components.parent = self.screens\n        self.blocks = FilterableDict()\n        self.blocks.parent = self.screens\n        if file is not None:\n            self.read(file)\n\n\nclass FilterableDict(dict):\n    def __call__(self, filter_):\n        return FilterableDict([k, v for k, v in self.iteritems() if filter_(v) else None, None])\n\n\nclass Filter(object):\n    def __call__(self, o):\n        throw NotImplementedError()\n\n    def __and__(self, right):\n        return and_(self, right)\n\n    def __or__(self, right):\n        return or_(self, right)\n\n    def __eq__(self, right):\n        return eq(self, right)\n\n    def __ne__(self, right):\n        return ne(self, right)\n\n    def __lt__(self, right):\n        return lt(self, right)\n\n    def __gt__(self, right):\n        return gt(self, right)\n\n    def __le__(self, right):\n        return le(self, right)\n\n    def __ge__(self, right):\n        return ge(self, right)\n\n\nclass AndFilter(Filter):\n    def __init__(self, l, r):\n        self.l = l\n        self.r = r\n\n    def __call__(self, o):\n        return self.l(o) and self.r(o)\n\n\nclass OrFilter(Filter):\n    def __init__(self, l, r):\n        self.l = l\n        self.r = r\n\n    def __call__(self, o):\n        return self.l(o) or self.r(o)\n\n\nclass NotFilter(Filter):\n    def __init__(self, expression):\n        self.expression = expression\n\n    def __call__(self, o):\n        return not self.expression(o)\n\n\nclass EqualFilter(Filter):\n    def __init__(self, l, r):\n        self.l = l\n        self.r = r\n\n    def __call__(self, o):\n        return self.l(o) == self.r(o)\n\n\nclass NotEqualFilter(Filter):\n    def __init__(self, l, r):\n        self.l = l\n        self.r = r\n\n    def __call__(self, o):\n        return self.l(o) != self.r(o)\n\n\nclass LessThanFilter(Filter):\n    def __init__(self, l, r):\n        self.l = l\n        self.r = r\n\n    def __call__(self, o):\n        return self.l(o) < self.r(o)\n\n\nclass GreaterThanFilter(Filter):\n    def __init__(self, l, r):\n        self.l = l\n        self.r = r\n\n    def __call__(self, o):\n        return self.l(o) > self.r(o)\n\n\nclass LessThanOrEqualFilter(Filter):\n    def __init__(self, l, r):\n        self.l = l\n        self.r = r\n\n    def __call__(self, o):\n        return self.l(o) <= self.r(o)\n\n\nclass GreaterThanOrEqualFilter(Filter):\n    def __init__(self, l, r):\n        self.l = l\n        self.r = r\n\n    def __call__(self, o):\n        return self.l(o) <= self.r(o)\n\n\nclass ScreenFilter(Filter):\n    pass\n\n\nclass ComponentFilter(Filter):\n    pass\n\n\nclass BlockFilter(Filter):\n    pass\n```\n\n## Attributes\n\n`depth` - For a component, this is the depth of the component hierarchy rooted at that component. For components that are not containers this value is always 1. For containers and blocks, this is the longest length of the paths from this root node to any of its leaf nodes.\n\n`length` - The number of direct descendants of the target. If the target is a component container, it will be the number of direct chidlren. For a block, it will be the number of\n\n`children` - The list of children for the item(s) in the set. If more than one item is in the set, the children will be provided in the order of their parents.\n\n`mutators` - If the block has mutations, a list of strings indicating the types of the mutations, e.g. ['if', 'elseif', 'elseif', 'else'].\n\n`callers` - For procedures, the number of caller blocks in the workspace. For variables and component methods and properties, the number of getter blocks.\n\n## Aggregation\n\n`max` - Maximum value of the filter\n\n`min` - Minimum value of the filter\n\n`avg` - Average value of the filter\n\n`count` - Count of items matching the filter\n\n`median` - Median value of the attribute\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mit-cml/aiatools", "keywords": "App Inventor AIA extraction analysis toolkit", "license": "GPLv3+", "maintainer": "", "maintainer_email": "", "name": "aiatools", "package_url": "https://pypi.org/project/aiatools/", "platform": "", "project_url": "https://pypi.org/project/aiatools/", "project_urls": {"Homepage": "https://github.com/mit-cml/aiatools"}, "release_url": "https://pypi.org/project/aiatools/0.1.6/", "requires_dist": ["jprops (>=2.0.2)"], "requires_python": "", "summary": "Tools for extracting information from App Inventor AIA files", "version": "0.1.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>AIA Tools</h1>\n<p>AIA Tools is a Python library for interacting with App Inventor Application (AIA) files in Python. It is useful for opening, summarizing, and analyzing AIA files for research inquiries. The query API is inspired by SQLalchemy</p>\n<h2>Installing</h2>\n<pre>$ pip install aiatools\n</pre>\n<p>For development:</p>\n<pre>$ pyenv install <span class=\"m\">3</span>.6.3\n$ pyenv virtualenv <span class=\"m\">3</span>.6.3 aiatools\n$ pyenv activate aiatools\n$ pip install -r requirements.txt\n$ pip install .\n</pre>\n<h2>Usage Examples</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">aiatools</span> <span class=\"kn\">import</span> <span class=\"n\">AIAFile</span>\n\n<span class=\"k\">with</span> <span class=\"n\">AIAFile</span><span class=\"p\">(</span><span class=\"s1\">'MyProject.aia'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">aia</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Number of screens: </span><span class=\"si\">%d</span><span class=\"se\">\\n</span><span class=\"s1\">'</span> <span class=\"o\">%</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">aia</span><span class=\"o\">.</span><span class=\"n\">screens</span><span class=\"p\">))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Number of components: </span><span class=\"si\">%d</span><span class=\"se\">\\n</span><span class=\"s1\">'</span> <span class=\"o\">%</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">aia</span><span class=\"o\">.</span><span class=\"n\">screens</span><span class=\"p\">[</span><span class=\"s1\">'Screen1'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">componentiter</span><span class=\"p\">()))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Number of blocks: </span><span class=\"si\">%d</span><span class=\"se\">\\n</span><span class=\"s1\">'</span> <span class=\"o\">%</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">aia</span><span class=\"o\">.</span><span class=\"n\">screens</span><span class=\"p\">[</span><span class=\"s1\">'Screen1'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">blockiter</span><span class=\"p\">()))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Number of event blocks: </span><span class=\"si\">%d</span><span class=\"se\">\\n</span><span class=\"s1\">'</span> <span class=\"o\">%</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">aia</span><span class=\"o\">.</span><span class=\"n\">screens</span><span class=\"p\">[</span><span class=\"s1\">'Screen1'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">blockiter</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s1\">'component_event'</span><span class=\"p\">)))</span>\n    <span class=\"n\">aia</span><span class=\"o\">.</span><span class=\"n\">screens</span><span class=\"p\">[</span><span class=\"s1\">'Screen1'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">blocks</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"o\">==</span><span class=\"s1\">'component_event'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"n\">by</span><span class=\"o\">=</span><span class=\"s1\">'event_name'</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">aiatools</span> <span class=\"kn\">import</span> <span class=\"n\">AIAFile</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aiatools.attributes</span> <span class=\"kn\">import</span> <span class=\"n\">event_name</span><span class=\"p\">,</span> <span class=\"nb\">type</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aiatools.block_types</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aiatools.component_types</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"n\">aia</span> <span class=\"o\">=</span> <span class=\"n\">AIAFile</span><span class=\"p\">(</span><span class=\"s1\">'MyProject.aia'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Count the number of screens</span>\n<span class=\"nb\">print</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">aia</span><span class=\"o\">.</span><span class=\"n\">screens</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Count the number of distinct component types used on Screen1</span>\n<span class=\"nb\">print</span> <span class=\"n\">aia</span><span class=\"o\">.</span><span class=\"n\">screens</span><span class=\"p\">[</span><span class=\"s1\">'Screen1'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">components</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"n\">group_by</span><span class=\"o\">=</span><span class=\"nb\">type</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Count the number of Button components on Screen1</span>\n<span class=\"nb\">print</span> <span class=\"n\">aia</span><span class=\"o\">.</span><span class=\"n\">screens</span><span class=\"p\">[</span><span class=\"s1\">'Screen1'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">components</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"o\">==</span><span class=\"n\">Button</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Count the number of component_event blocks, grouped by event name</span>\n<span class=\"nb\">print</span> <span class=\"n\">aia</span><span class=\"o\">.</span><span class=\"n\">screens</span><span class=\"p\">[</span><span class=\"s1\">'Screen1'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">blocks</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"o\">==</span><span class=\"n\">component_event</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"n\">group_by</span><span class=\"o\">=</span><span class=\"n\">event_name</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Compute the average depth of the blocks tree in Button.Click handlers</span>\n<span class=\"nb\">print</span> <span class=\"n\">aia</span><span class=\"o\">.</span><span class=\"n\">screens</span><span class=\"p\">[</span><span class=\"s1\">'Screen1'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">blocks</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"o\">==</span><span class=\"n\">component_event</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">event_name</span> <span class=\"o\">==</span> <span class=\"n\">Button</span><span class=\"o\">.</span><span class=\"n\">Click</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">avg</span><span class=\"p\">(</span><span class=\"n\">depth</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Count the number of blocks referencing a specific component</span>\n<span class=\"nb\">print</span> <span class=\"n\">aia</span><span class=\"o\">.</span><span class=\"n\">screens</span><span class=\"p\">[</span><span class=\"s1\">'Screen1'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">components</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">==</span><span class=\"s1\">'Button1'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">blocks</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Count the number of event handlers where the event opens another screen</span>\n<span class=\"nb\">print</span> <span class=\"n\">aia</span><span class=\"o\">.</span><span class=\"n\">blocks</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"o\">==</span><span class=\"n\">component_event</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">descendants</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"o\">==</span><span class=\"n\">control_openAnotherScreen</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Get the screens where the user has included more than one TinyDB</span>\n<span class=\"nb\">print</span> <span class=\"n\">aia</span><span class=\"o\">.</span><span class=\"n\">screens</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">components</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"o\">==</span><span class=\"n\">TinyDB</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"n\">group_by</span> <span class=\"o\">=</span> <span class=\"n\">Screen</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">k</span><span class=\"p\">,</span><span class=\"n\">v</span><span class=\"p\">:</span> <span class=\"n\">v</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre>\n<h2>Selectors</h2>\n<pre><span class=\"n\">project</span> <span class=\"o\">=</span> <span class=\"n\">AIAFile</span><span class=\"p\">(</span><span class=\"s1\">'project.aia'</span><span class=\"p\">)</span>\n\n<span class=\"n\">project</span><span class=\"o\">.</span><span class=\"n\">screens</span><span class=\"p\">()</span>  <span class=\"c1\"># Select all screens</span>\n<span class=\"n\">project</span><span class=\"o\">.</span><span class=\"n\">screens</span><span class=\"p\">(</span><span class=\"s1\">'Screen1'</span><span class=\"p\">)</span>  <span class=\"c1\"># Select Screen1</span>\n<span class=\"n\">project</span><span class=\"o\">.</span><span class=\"n\">screens</span><span class=\"p\">(</span><span class=\"n\">Button</span><span class=\"o\">.</span><span class=\"n\">any</span><span class=\"p\">)</span>  <span class=\"c1\"># Select any screen with at least 1 button</span>\n<span class=\"n\">project</span><span class=\"o\">.</span><span class=\"n\">screens</span><span class=\"p\">(</span><span class=\"n\">Control</span><span class=\"o\">.</span><span class=\"n\">open_another_screen</span><span class=\"p\">)</span>  <span class=\"c1\"># Select any screen containing an open_another_screen block</span>\n<span class=\"n\">project</span><span class=\"o\">.</span><span class=\"n\">screens</span><span class=\"p\">(</span><span class=\"n\">Component</span><span class=\"o\">.</span><span class=\"n\">Name</span> <span class=\"o\">==</span> <span class=\"s1\">'TinyDb1'</span><span class=\"p\">)</span>  <span class=\"c1\"># Select any screen containing a component named TinyDb1</span>\n</pre>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Block</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    :py:class:`Block` represents an individual block in the blocks workspace.</span>\n\n<span class=\"sd\">    .. Arguments ::</span>\n<span class=\"sd\">        id_ The block ID</span>\n<span class=\"sd\">        type_ :py:class:`BlockType` The block type</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">id_</span><span class=\"p\">,</span> <span class=\"n\">type_</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"n\">id_</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"n\">type_</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parent</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">children</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Component</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    :py:class:`Component` represents a component in the designer view.</span>\n\n<span class=\"sd\">    .. Arguments ::</span>\n<span class=\"sd\">        id_</span>\n<span class=\"sd\">        type_ :py:class:`ComponentType`</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">id_</span><span class=\"p\">,</span> <span class=\"n\">type_</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"n\">id_</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"n\">type_</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">properties</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ComponentContainer</span><span class=\"p\">(</span><span class=\"n\">Component</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">id_</span><span class=\"p\">,</span> <span class=\"n\">type_</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">ComponentContainer</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">id_</span><span class=\"p\">,</span> <span class=\"n\">type_</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">components</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">BlockType</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">mutators</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ComponentType</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">class_name</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">class_name</span> <span class=\"o\">=</span> <span class=\"n\">class_name</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Screen</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">scm</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">bky</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">''</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">properties</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">components</span> <span class=\"o\">=</span> <span class=\"n\">FilterableDict</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">blocks</span> <span class=\"o\">=</span> <span class=\"n\">FilterableDict</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">top_blocks</span> <span class=\"o\">=</span> <span class=\"n\">FilterableDict</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"n\">scm</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_read_scheme</span><span class=\"p\">(</span><span class=\"n\">scm</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">bky</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_read_blocks</span><span class=\"p\">(</span><span class=\"n\">bky</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Project</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">file</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">''</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">screens</span> <span class=\"o\">=</span> <span class=\"n\">FilterableDict</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">components</span> <span class=\"o\">=</span> <span class=\"n\">FilterableDict</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">components</span><span class=\"o\">.</span><span class=\"n\">parent</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">screens</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">blocks</span> <span class=\"o\">=</span> <span class=\"n\">FilterableDict</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">blocks</span><span class=\"o\">.</span><span class=\"n\">parent</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">screens</span>\n        <span class=\"k\">if</span> <span class=\"n\">file</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">FilterableDict</span><span class=\"p\">(</span><span class=\"nb\">dict</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__call__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">filter_</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">FilterableDict</span><span class=\"p\">([</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">iteritems</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"n\">filter_</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">])</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Filter</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__call__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">o</span><span class=\"p\">):</span>\n        <span class=\"n\">throw</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__and__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">and_</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__or__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">or_</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__eq__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">eq</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__ne__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">ne</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__lt__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">lt</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__gt__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">gt</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__le__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">le</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__ge__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">ge</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">AndFilter</span><span class=\"p\">(</span><span class=\"n\">Filter</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">l</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">r</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__call__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">o</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">l</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">r</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">OrFilter</span><span class=\"p\">(</span><span class=\"n\">Filter</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">l</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">r</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__call__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">o</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">l</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">r</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">NotFilter</span><span class=\"p\">(</span><span class=\"n\">Filter</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">expression</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">expression</span> <span class=\"o\">=</span> <span class=\"n\">expression</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__call__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">o</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">expression</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">EqualFilter</span><span class=\"p\">(</span><span class=\"n\">Filter</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">l</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">r</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__call__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">o</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">l</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">r</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">NotEqualFilter</span><span class=\"p\">(</span><span class=\"n\">Filter</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">l</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">r</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__call__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">o</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">l</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">r</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">LessThanFilter</span><span class=\"p\">(</span><span class=\"n\">Filter</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">l</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">r</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__call__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">o</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">l</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">r</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">GreaterThanFilter</span><span class=\"p\">(</span><span class=\"n\">Filter</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">l</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">r</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__call__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">o</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">l</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">r</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">LessThanOrEqualFilter</span><span class=\"p\">(</span><span class=\"n\">Filter</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">l</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">r</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__call__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">o</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">l</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">)</span> <span class=\"o\">&lt;=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">r</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">GreaterThanOrEqualFilter</span><span class=\"p\">(</span><span class=\"n\">Filter</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">l</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">r</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__call__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">o</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">l</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">)</span> <span class=\"o\">&lt;=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">r</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ScreenFilter</span><span class=\"p\">(</span><span class=\"n\">Filter</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ComponentFilter</span><span class=\"p\">(</span><span class=\"n\">Filter</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">BlockFilter</span><span class=\"p\">(</span><span class=\"n\">Filter</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</pre>\n<h2>Attributes</h2>\n<p><code>depth</code> - For a component, this is the depth of the component hierarchy rooted at that component. For components that are not containers this value is always 1. For containers and blocks, this is the longest length of the paths from this root node to any of its leaf nodes.</p>\n<p><code>length</code> - The number of direct descendants of the target. If the target is a component container, it will be the number of direct chidlren. For a block, it will be the number of</p>\n<p><code>children</code> - The list of children for the item(s) in the set. If more than one item is in the set, the children will be provided in the order of their parents.</p>\n<p><code>mutators</code> - If the block has mutations, a list of strings indicating the types of the mutations, e.g. ['if', 'elseif', 'elseif', 'else'].</p>\n<p><code>callers</code> - For procedures, the number of caller blocks in the workspace. For variables and component methods and properties, the number of getter blocks.</p>\n<h2>Aggregation</h2>\n<p><code>max</code> - Maximum value of the filter</p>\n<p><code>min</code> - Minimum value of the filter</p>\n<p><code>avg</code> - Average value of the filter</p>\n<p><code>count</code> - Count of items matching the filter</p>\n<p><code>median</code> - Median value of the attribute</p>\n\n          </div>"}, "last_serial": 7034045, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "9f186b55ac02b3f8897f5c7fb8dda923", "sha256": "ef61ca31f5d8d0d0795aa19c10a9edf65238c41da934ff907274e57ca8076e0b"}, "downloads": -1, "filename": "aiatools-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "9f186b55ac02b3f8897f5c7fb8dda923", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 105242, "upload_time": "2020-03-25T14:54:42", "upload_time_iso_8601": "2020-03-25T14:54:42.920052Z", "url": "https://files.pythonhosted.org/packages/a4/c9/94c369ce36178443a4318dcd83bc92da7c06ec158a1aa2aadac24ac9a809/aiatools-0.1.0-py3-none-any.whl", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "1b766f7ef4eb31cff1e3d61e1a440d08", "sha256": "21566d8f8d3e3cd42f3372863213e00db29abdfb7758b9973c2837f4fa25e0fd"}, "downloads": -1, "filename": "aiatools-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "1b766f7ef4eb31cff1e3d61e1a440d08", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 107281, "upload_time": "2020-03-25T15:00:29", "upload_time_iso_8601": "2020-03-25T15:00:29.275751Z", "url": "https://files.pythonhosted.org/packages/d5/90/793f0992cd392b535673f33f8f531a8fc4a6b10f7601464684c0a27c2ff1/aiatools-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "25e5bb0c020f0c8b64df6438c6b7da37", "sha256": "c6b86a59a9d4e49c21a3a4b81fa029d47c2fcc8c3a94c50ba5a3a8d6dd8db4fb"}, "downloads": -1, "filename": "aiatools-0.1.1.tar.gz", "has_sig": false, "md5_digest": "25e5bb0c020f0c8b64df6438c6b7da37", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 92661, "upload_time": "2020-03-25T15:00:30", "upload_time_iso_8601": "2020-03-25T15:00:30.548536Z", "url": "https://files.pythonhosted.org/packages/1d/20/780eba3041096754125e668466f45d08c68eb27ed717a1e01ded6940bb82/aiatools-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "17ff5ead269a204b0d99cf68b4fde3d8", "sha256": "d635c65d6cb4ba88b2de975a2d9343a687c20c7ed1fd82f956ed59850c589604"}, "downloads": -1, "filename": "aiatools-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "17ff5ead269a204b0d99cf68b4fde3d8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 108469, "upload_time": "2020-03-31T15:20:26", "upload_time_iso_8601": "2020-03-31T15:20:26.690416Z", "url": "https://files.pythonhosted.org/packages/d4/99/ca3de508b8825131e1eb2589ca6e7bde42473fd885cfca2a3c23cfc967b0/aiatools-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "12c111320bd579a1b574a41800b7121d", "sha256": "20114a23f58fe20eec0e4a69ad6899ab4e5ca403325c7dbd9ecb2eade8fa80d5"}, "downloads": -1, "filename": "aiatools-0.1.2.tar.gz", "has_sig": false, "md5_digest": "12c111320bd579a1b574a41800b7121d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 92659, "upload_time": "2020-03-31T15:20:27", "upload_time_iso_8601": "2020-03-31T15:20:27.995478Z", "url": "https://files.pythonhosted.org/packages/9a/9d/d967d4e9789a96057bce348ecc317f475f941d943f49fe93f012fefcfe57/aiatools-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "673ced5f375ba34a90427ff027efe331", "sha256": "4c402c251d49b9c6b2200b2c55190b7d058d4e705c8fc99c0c004b835a135d74"}, "downloads": -1, "filename": "aiatools-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "673ced5f375ba34a90427ff027efe331", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 108476, "upload_time": "2020-03-31T16:19:15", "upload_time_iso_8601": "2020-03-31T16:19:15.446180Z", "url": "https://files.pythonhosted.org/packages/92/ef/4b22498f012eb2079bd62e3178c361c400c2a8b5911002fe8fa3d9712c97/aiatools-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dd859cad04dd2fb1f7a3876ccf5a4d21", "sha256": "f3fdb2851f27549220dfb4e78c2e89a66b5c4161d6c5fcfc95c81fcd06673303"}, "downloads": -1, "filename": "aiatools-0.1.3.tar.gz", "has_sig": false, "md5_digest": "dd859cad04dd2fb1f7a3876ccf5a4d21", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 92680, "upload_time": "2020-03-31T16:19:16", "upload_time_iso_8601": "2020-03-31T16:19:16.715529Z", "url": "https://files.pythonhosted.org/packages/38/3e/895361b4c2fc152aa3c93e4c248f42284e8cfad2f2a35290f40ba005588b/aiatools-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "020c0fcc836884bf41d12784feb6eecc", "sha256": "66593b612cf0caad12a520677b0834fa2867f6c21c3c5db9d0fd2751d02a3a01"}, "downloads": -1, "filename": "aiatools-0.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "020c0fcc836884bf41d12784feb6eecc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 108474, "upload_time": "2020-03-31T16:29:38", "upload_time_iso_8601": "2020-03-31T16:29:38.342064Z", "url": "https://files.pythonhosted.org/packages/c9/6e/a5bd05ea7dfeb1ee2cb92976114bd3556ae89aad509c9dd975022dfe3d8f/aiatools-0.1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0625975766405c52d9eb8cb3b798bb0e", "sha256": "bd7f3c95c5561691c99428edc6bdfff6212944d4ff23e33a2d6e689bbdd21fd1"}, "downloads": -1, "filename": "aiatools-0.1.4.tar.gz", "has_sig": false, "md5_digest": "0625975766405c52d9eb8cb3b798bb0e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 92689, "upload_time": "2020-03-31T16:29:39", "upload_time_iso_8601": "2020-03-31T16:29:39.598648Z", "url": "https://files.pythonhosted.org/packages/e5/e1/e955e11e8646ed1690f7ba603cf7e2dcf585df9fe66b69098b7788076dd6/aiatools-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "582f4f89b87c6fbf8f029e446ac06945", "sha256": "ce9433d545a35c3f822fb69813397de0f68ec9e7c7b1a162bc12791ecdafbd16"}, "downloads": -1, "filename": "aiatools-0.1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "582f4f89b87c6fbf8f029e446ac06945", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 108543, "upload_time": "2020-04-15T06:23:29", "upload_time_iso_8601": "2020-04-15T06:23:29.065527Z", "url": "https://files.pythonhosted.org/packages/87/57/1beed663727e5a6e0bb6e3af53206376fba2126716af0efe0667a6951ff7/aiatools-0.1.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3edff5659907dcc8121023fe76cc3b7e", "sha256": "bbff316fbb02a054e9f1faef134d825b09223e2379a21a0e3da07ccf71841db2"}, "downloads": -1, "filename": "aiatools-0.1.5.tar.gz", "has_sig": false, "md5_digest": "3edff5659907dcc8121023fe76cc3b7e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 93330, "upload_time": "2020-04-15T06:23:30", "upload_time_iso_8601": "2020-04-15T06:23:30.362431Z", "url": "https://files.pythonhosted.org/packages/1d/59/bc80475a34f57337ac94e948448d18b5911fd17c85ce9838a96e61065641/aiatools-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "7a2a58f43c4459ccc0ec6f1ab0a2b5f5", "sha256": "c45dbf0838621ab4692eff2c93c8841bc3e0d859670aabd622f8bda01ec29a01"}, "downloads": -1, "filename": "aiatools-0.1.6-py3-none-any.whl", "has_sig": false, "md5_digest": "7a2a58f43c4459ccc0ec6f1ab0a2b5f5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 108768, "upload_time": "2020-04-16T18:21:58", "upload_time_iso_8601": "2020-04-16T18:21:58.558247Z", "url": "https://files.pythonhosted.org/packages/13/08/28534c12d30038ec673dfc71c1000032a20347a7222c84678a3957246701/aiatools-0.1.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "368370420a8f57f9096535498f541b00", "sha256": "9f39f68a6b9a51af99e2ee059d9ab25aa2a60ed351108e23d77b69b29eaebeba"}, "downloads": -1, "filename": "aiatools-0.1.6.tar.gz", "has_sig": false, "md5_digest": "368370420a8f57f9096535498f541b00", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 94035, "upload_time": "2020-04-16T18:21:59", "upload_time_iso_8601": "2020-04-16T18:21:59.934703Z", "url": "https://files.pythonhosted.org/packages/d9/c8/7b0cfc431ee19aabae6f76c4df5e4c256c037ade5a880bf2f04017d54dc2/aiatools-0.1.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7a2a58f43c4459ccc0ec6f1ab0a2b5f5", "sha256": "c45dbf0838621ab4692eff2c93c8841bc3e0d859670aabd622f8bda01ec29a01"}, "downloads": -1, "filename": "aiatools-0.1.6-py3-none-any.whl", "has_sig": false, "md5_digest": "7a2a58f43c4459ccc0ec6f1ab0a2b5f5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 108768, "upload_time": "2020-04-16T18:21:58", "upload_time_iso_8601": "2020-04-16T18:21:58.558247Z", "url": "https://files.pythonhosted.org/packages/13/08/28534c12d30038ec673dfc71c1000032a20347a7222c84678a3957246701/aiatools-0.1.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "368370420a8f57f9096535498f541b00", "sha256": "9f39f68a6b9a51af99e2ee059d9ab25aa2a60ed351108e23d77b69b29eaebeba"}, "downloads": -1, "filename": "aiatools-0.1.6.tar.gz", "has_sig": false, "md5_digest": "368370420a8f57f9096535498f541b00", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 94035, "upload_time": "2020-04-16T18:21:59", "upload_time_iso_8601": "2020-04-16T18:21:59.934703Z", "url": "https://files.pythonhosted.org/packages/d9/c8/7b0cfc431ee19aabae6f76c4df5e4c256c037ade5a880bf2f04017d54dc2/aiatools-0.1.6.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:22:12 2020"}