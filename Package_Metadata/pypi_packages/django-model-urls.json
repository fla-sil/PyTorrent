{"info": {"author": "Vincent Agnano", "author_email": "vincent.agnano@scopyleft.fr", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.4", "Topic :: Utilities"], "description": "# Django Model URLs\r\n\r\n[![Build Status](https://travis-ci.org/vinyll/django-model-urls.png)](https://travis-ci.org/vinyll/django-model-urls)\r\n\r\nThis app makes urls usage DRYer.\r\nIt maps URL keywords to a model object instance by passing the object\r\ninstance as argument to the URL.\r\n\r\nIn short, having an `article` model instance, you can write this:\r\n\r\n```html\r\n<a href=\"{{ url('article:detail', article) }}\">View this article</a>\r\n```\r\n\r\nWhile you have been writing this so far:\r\n\r\n```html\r\n<a href=\"{{ url('article:detail', year=article.year, month=article.month, slug=article.slug) }}\">View this article</a>\r\n```\r\n\r\nThis is for your templates as well as for your `reverse()` and preserves\r\nother urls to work.\r\n\r\n> Right now it is build for [Jinja2](http://jinja.pocoo.org/) using the\r\neasy-to-use [Jingo](https://github.com/jbalogh/jingo) adapter.\r\n> If you are using plain Django template, refer to version 0.3.1.\r\n> A new version for plain Django should come out later on.\r\n\r\n\r\n## Installation\r\n\r\nDownload via pip ![pip badge](https://pypip.in/v/django-model-urls/badge.png)\r\n\r\n```bash\r\npip install django-model-urls\r\n```\r\n\r\nor get the bleeding edge version:\r\n\r\n```bash\r\npip install git+https://github.com/vinyll/django-model-urls.git\r\n```\r\n\r\nAdd _model\\_urls_ to your _settings_ file:\r\n\r\n```python\r\nINSTALLED_APPS = (\r\n    'jingo',\r\n    'model_urls',\r\n)\r\n```\r\n\r\nAnd you're done!\r\n\r\n\r\n## How to use it\r\n\r\nIn the examples below we will consider this model:\r\n\r\n```python\r\nclass Article(models.Model):\r\n    slug = models.SlugField()\r\n    title = models.CharField(max_length=50)\r\n    date = models.DateField()\r\n\r\n    @property\r\n    def year(self):\r\n        return self.date.year\r\n\r\n    @property\r\n    def month(self):\r\n        return self.date.month\r\n```\r\n\r\nand this urls:\r\n\r\n```python\r\nurlpatterns = patterns('',\r\n    url(r'^article/(?P<year>\\d{4})/(?P<month>\\d{2})/(?P<slug>[\\w-]+)/$',\r\n        ArticleView.as_view(), name=\"article_details\"),\r\n)\r\n```\r\n\r\nand `article` being an instance of the `Article` class.\r\n\r\n### In a template\r\n\r\n```python\r\nurl('article_details', article)\r\n```\r\n\r\n#### In a view\r\n\r\n```python\r\nfrom model_urls.urlresolvers import reverse\r\n\r\nreverse('article_details', article)\r\n```\r\n\r\nBoth will generate a url in this format:\r\n\r\n```\r\n/2014/11/how-to-optimize-django-urls/\r\n```\r\n\r\n## Extra tools\r\n\r\nBasically you should be able to use `url()` and `reverse()` in all cases.\r\nHowever, these tools are also available:\r\n\r\n\r\n#### Template helpers\r\n\r\n- `url(viewname, *args, **kwargs)` will try to detect an instance in arguments\r\nand choose wheter to use _simple\\_url()_ or _model\\_url()_ otherwise.\r\n- `simple_url(viewname, *args, **kwargs)` is an alias to Jingo's `url()`\r\nhelper to force using it.\r\n- `model_url(viewname, instance, *args, **kwargs)` will generate the url from\r\nthe instance in first argument.\r\n\r\n\r\n#### Url reversing\r\n\r\nThese functions are available in `model_urls.urlresolvers`.\r\n\r\n- `model_reverse(viewname, instance, urlconf=None, args=None, kwargs=None,\r\nprefix=None, current_app=None)` will generate the url based on the instance\r\nproperties.\r\n- `reverse(viewname, *args, **kwargs)` will fallback to _model\\_reverse()_ if\r\nan instance is found in arguments or to Django's _reverse()_ otherwise.\r\n\r\n\r\n## Configuration\r\n\r\nAn optional configuration is for your settings is:\r\n\r\n```python\r\nMODEL_URLS_HELPER_OVERRIDE = False\r\n```\r\n\r\nThis option will not allow the Jingo's `url()` helper to be overriden by the\r\none from model_urls.\r\n\r\nIn this case you should use `model_url()` to use an instance.\r\n\r\n\r\n\r\n### Further examples\r\n\r\n#### Use cases\r\n\r\nA common use case is switching from pk based url to slug.\r\nUsing django-model-urls means updating the _urls.py_ file to consider slug\r\nwithout altering views or template files.\r\n\r\n\r\n#### Read tests\r\n\r\nRefer to [tests.py](https://github.com/vinyll/django-model-urls/blob/master/model_urls/tests/)\r\nto see more usages.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/vinyll/django-model-urls", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "django-model-urls", "package_url": "https://pypi.org/project/django-model-urls/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-model-urls/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/vinyll/django-model-urls"}, "release_url": "https://pypi.org/project/django-model-urls/0.4.0/", "requires_dist": null, "requires_python": null, "summary": "DRY way to manage url parameters associated with a model instance based on Jingo.", "version": "0.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            # Django Model URLs\n<br>\n<br>[![Build Status](https://travis-ci.org/vinyll/django-model-urls.png)](https://travis-ci.org/vinyll/django-model-urls)\n<br>\n<br>This app makes urls usage DRYer.\n<br>It maps URL keywords to a model object instance by passing the object\n<br>instance as argument to the URL.\n<br>\n<br>In short, having an `article` model instance, you can write this:\n<br>\n<br>```html\n<br>&lt;a href=\"{{ url('article:detail', article) }}\"&gt;View this article&lt;/a&gt;\n<br>```\n<br>\n<br>While you have been writing this so far:\n<br>\n<br>```html\n<br>&lt;a href=\"{{ url('article:detail', year=article.year, month=article.month, slug=article.slug) }}\"&gt;View this article&lt;/a&gt;\n<br>```\n<br>\n<br>This is for your templates as well as for your `reverse()` and preserves\n<br>other urls to work.\n<br>\n<br>&gt; Right now it is build for [Jinja2](http://jinja.pocoo.org/) using the\n<br>easy-to-use [Jingo](https://github.com/jbalogh/jingo) adapter.\n<br>&gt; If you are using plain Django template, refer to version 0.3.1.\n<br>&gt; A new version for plain Django should come out later on.\n<br>\n<br>\n<br>## Installation\n<br>\n<br>Download via pip ![pip badge](https://pypip.in/v/django-model-urls/badge.png)\n<br>\n<br>```bash\n<br>pip install django-model-urls\n<br>```\n<br>\n<br>or get the bleeding edge version:\n<br>\n<br>```bash\n<br>pip install git+https://github.com/vinyll/django-model-urls.git\n<br>```\n<br>\n<br>Add _model\\_urls_ to your _settings_ file:\n<br>\n<br>```python\n<br>INSTALLED_APPS = (\n<br>    'jingo',\n<br>    'model_urls',\n<br>)\n<br>```\n<br>\n<br>And you're done!\n<br>\n<br>\n<br>## How to use it\n<br>\n<br>In the examples below we will consider this model:\n<br>\n<br>```python\n<br>class Article(models.Model):\n<br>    slug = models.SlugField()\n<br>    title = models.CharField(max_length=50)\n<br>    date = models.DateField()\n<br>\n<br>    @property\n<br>    def year(self):\n<br>        return self.date.year\n<br>\n<br>    @property\n<br>    def month(self):\n<br>        return self.date.month\n<br>```\n<br>\n<br>and this urls:\n<br>\n<br>```python\n<br>urlpatterns = patterns('',\n<br>    url(r'^article/(?P&lt;year&gt;\\d{4})/(?P&lt;month&gt;\\d{2})/(?P&lt;slug&gt;[\\w-]+)/$',\n<br>        ArticleView.as_view(), name=\"article_details\"),\n<br>)\n<br>```\n<br>\n<br>and `article` being an instance of the `Article` class.\n<br>\n<br>### In a template\n<br>\n<br>```python\n<br>url('article_details', article)\n<br>```\n<br>\n<br>#### In a view\n<br>\n<br>```python\n<br>from model_urls.urlresolvers import reverse\n<br>\n<br>reverse('article_details', article)\n<br>```\n<br>\n<br>Both will generate a url in this format:\n<br>\n<br>```\n<br>/2014/11/how-to-optimize-django-urls/\n<br>```\n<br>\n<br>## Extra tools\n<br>\n<br>Basically you should be able to use `url()` and `reverse()` in all cases.\n<br>However, these tools are also available:\n<br>\n<br>\n<br>#### Template helpers\n<br>\n<br>- `url(viewname, *args, **kwargs)` will try to detect an instance in arguments\n<br>and choose wheter to use _simple\\_url()_ or _model\\_url()_ otherwise.\n<br>- `simple_url(viewname, *args, **kwargs)` is an alias to Jingo's `url()`\n<br>helper to force using it.\n<br>- `model_url(viewname, instance, *args, **kwargs)` will generate the url from\n<br>the instance in first argument.\n<br>\n<br>\n<br>#### Url reversing\n<br>\n<br>These functions are available in `model_urls.urlresolvers`.\n<br>\n<br>- `model_reverse(viewname, instance, urlconf=None, args=None, kwargs=None,\n<br>prefix=None, current_app=None)` will generate the url based on the instance\n<br>properties.\n<br>- `reverse(viewname, *args, **kwargs)` will fallback to _model\\_reverse()_ if\n<br>an instance is found in arguments or to Django's _reverse()_ otherwise.\n<br>\n<br>\n<br>## Configuration\n<br>\n<br>An optional configuration is for your settings is:\n<br>\n<br>```python\n<br>MODEL_URLS_HELPER_OVERRIDE = False\n<br>```\n<br>\n<br>This option will not allow the Jingo's `url()` helper to be overriden by the\n<br>one from model_urls.\n<br>\n<br>In this case you should use `model_url()` to use an instance.\n<br>\n<br>\n<br>\n<br>### Further examples\n<br>\n<br>#### Use cases\n<br>\n<br>A common use case is switching from pk based url to slug.\n<br>Using django-model-urls means updating the _urls.py_ file to consider slug\n<br>without altering views or template files.\n<br>\n<br>\n<br>#### Read tests\n<br>\n<br>Refer to [tests.py](https://github.com/vinyll/django-model-urls/blob/master/model_urls/tests/)\n<br>to see more usages.\n          </div>"}, "last_serial": 1291186, "releases": {"0.3.1": [{"comment_text": "", "digests": {"md5": "afccbbe418bdf0f1be729d2c06009bf5", "sha256": "7dc18df7f13334d5dd518924899618b0b5df21bff7b7ce55cfeefee51f9eccec"}, "downloads": -1, "filename": "django-model-urls-0.3.1.tar.gz", "has_sig": false, "md5_digest": "afccbbe418bdf0f1be729d2c06009bf5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4366, "upload_time": "2013-08-06T10:32:01", "upload_time_iso_8601": "2013-08-06T10:32:01.288474Z", "url": "https://files.pythonhosted.org/packages/bf/7b/2ed9cb726fba79c766a1ca1c3470808fbc200980762f5f6f5bb7f99a9961/django-model-urls-0.3.1.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "2bc38aa56876a02c68d76cdb77e59d2d", "sha256": "596662071e17f67963a2cfa979c89c56824aed9e55b569d0460afbd9c5614cfa"}, "downloads": -1, "filename": "django-model-urls-0.4.0.tar.gz", "has_sig": false, "md5_digest": "2bc38aa56876a02c68d76cdb77e59d2d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5911, "upload_time": "2014-11-01T18:50:57", "upload_time_iso_8601": "2014-11-01T18:50:57.143237Z", "url": "https://files.pythonhosted.org/packages/ff/23/233f6d7e60bb978e312d5cb7cd17ab127195c8c9e01dc47e9f20bdbbbeba/django-model-urls-0.4.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2bc38aa56876a02c68d76cdb77e59d2d", "sha256": "596662071e17f67963a2cfa979c89c56824aed9e55b569d0460afbd9c5614cfa"}, "downloads": -1, "filename": "django-model-urls-0.4.0.tar.gz", "has_sig": false, "md5_digest": "2bc38aa56876a02c68d76cdb77e59d2d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5911, "upload_time": "2014-11-01T18:50:57", "upload_time_iso_8601": "2014-11-01T18:50:57.143237Z", "url": "https://files.pythonhosted.org/packages/ff/23/233f6d7e60bb978e312d5cb7cd17ab127195c8c9e01dc47e9f20bdbbbeba/django-model-urls-0.4.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:35:00 2020"}