{"info": {"author": "Chris Churas", "author_email": "churas.camera@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "==============\nnaga-gwas-rest\n==============\n\n\n.. image:: https://img.shields.io/pypi/v/naga-gwas-rest.svg\n        :target: https://pypi.python.org/pypi/naga-gwas-rest\n\n.. image:: https://img.shields.io/travis/idekerlab/naga-gwas-rest.svg\n        :target: https://travis-ci.org/idekerlab/naga-gwas-rest\n\n\n\n\nREST service for `Network Assisted Genomic Analysis (NAGA) <https://github.com/shfong/naga/>`_\n\n`For more information please click here to visit our wiki <https://github.com/idekerlab/naga-gwas-rest/wiki>`_\n\nThis service is currently running here: http://nbgwas.ucsd.edu\n\nCompatibility\n-------------\n\n * Tested with Python 3.6 in Anaconda_\n\nDependencies to run\n-------------------\n\n * `naga-gwas <https://pypi.org/project/naga-gwas/>`_\n * `ndex2 <https://pypi.org/project/ndex2/>`_\n * `python-daemon <https://pypi.org/project/python-daemon/>`_\n * `flask <https://pypi.org/project/flask/>`_\n * `flask-restplus <https://pypi.org/project/flast-restplus>`_\n * `numpy <https://pypi.org/project/numpy>`_\n\nAdditional dependencies to build\n--------------------------------\n\n * GNU make\n * `wheel <https://pypi.org/project/wheel/>`_\n * `setuptools <https://pypi.org/project/setuptools/>`_\n\n\nInstallation\n------------\n\nIt is highly reccommended one use `Anaconda <https://www.anaconda.com/>`_ for Python environment\n\n.. code:: bash\n\n  git clone https://github.com/idekerlab/naga-gwas-rest.git\n  cd naga-gwas-rest\n  make install\n\nRunning service in development mode\n-----------------------------------\n\n\n**NOTE:** Example below runs the REST service and not the task runner.\n\n.. code:: bash\n\n  # It is assumed the application has been installed as described above\n  export FLASK_APP=nbgwas_rest\n  flask run # --host=0.0.0.0 can be added to allow all access from interfaces\n\n  # Service will be running on http://localhost:5000\n\n  # NOTE: To have tasks processed naga_taskrunner.py must be started in\n  # another terminal\n\n\n`Click here for information on launching service via Vagrant VM <https://github.com/idekerlab/naga-gwas-rest/wiki/NAGA-REST-under-Vagrant-Virtual-Machine>`_\n\n\nExample usage of service\n------------------------\n\nBelow is a small script that leverages the nbgwas_rest service to run NAGA on the\ncompressed **nagadata/schizophrenia.txt.gz** passed into the script on the command line\n\n.. code:: bash\n\n    #!/usr/bin/env python\n\n    import sys\n    import gzip\n    import time\n    import requests\n\n    # pass the gzipped schizophrenia.txt.gz\n    networkfile = sys.argv[1]\n\n    # set parameters\n    data_dict = {}\n    data_dict['protein_coding']='hg18'\n    data_dict['window']=10000\n    data_dict['ndex']='f93f402c-86d4-11e7-a10d-0ac135e8bacf'\n\n    # set snp file\n    files = {'snp_level_summary': gzip.open(networkfile, 'rb')}\n    url = 'http://nbgwas.ucsd.edu/rest/v1/snp_analyzer'\n    r = requests.post(url, data=data_dict, files=files,\n                      timeout=30)\n\n    # If successful the previous POST will return 202\n    if r.status_code != 202:\n        sys.stderr.write('Submission failed with code: ' + str(r.status_code) +\n                         '\\n')\n        sys.stderr.write('Message: ' + str(r.text) + '\\n')\n        sys.exit(1)\n\n    # If successful Location will be set to a URL that can\n    # be polled for result\n    if 'Location' not in r.headers:\n        sys.stderr.write('Expected Location in Header, ' +\n                         'but its not there: ' + str(r.headers) + '\\n')\n        sys.exit(2)\n\n    resulturl = r.headers['Location']\n    getres = requests.get(resulturl, timeout=30)\n    json_res = getres.json()\n    while getres.status_code != 200 or json_res['status'] == 'submitted' or json_res['status'] == 'processing':\n       sys.stderr.write('.')\n       sys.stderr.flush()\n       time.sleep(5)\n       getres = requests.get(resulturl, timeout=30)\n       json_res = getres.json()\n\n    sys.stderr.write('\\n')\n    sys.stdout.write(str(json_res) + '\\n')\n\nAssuming the above is saved in a file named **foo.py** and run from base directory of this source tree\n\n\n.. code:: bash\n\n  ./foo.py nagadata/schizophrenia.txt.gz\n\n\nExample output:\n\n.. code:: bash\n\n   {'result': {'A1BG': 1.818739214334769, 'A1CF': 2.9679830980888413,\n   'A2M': 3.9294999566765174, 'A2ML1': 1.4379620790934335, 'A3GALT2': 1.9918435374785632,\n   'A4GALT': 1.8734641163972634, 'A4GNT': 1.335302470858104, 'AAAS': 2.384799543926567,\n   'AACS': 2.965792987307328, 'AADAC': 1.455957465785784, 'AADACL2': 1.0156608351922358,\n   'AADACL3': 0.895944981993654, 'AADACL4': 1.2458363441128992, 'AADAT': 2.689141678947707,\n   'AAED1': 0.12364477699188797, 'AAGAB': 0.14237051805828474, 'AAK1': 5.652340641567231,\n   'AAMDC': 0.1647736242197245, 'AAMP': 3.2927511707526884, 'AANAT': 5.654764562774087,\n   'AAR2': 0.9427896961129361,\n   .\n   .\n   , 'status': 'done'}\n\nBugs\n-----\n\nPlease report them `here <https://github.com/idekerlab/naga-gwas-rest/issues>`_\n\nAcknowledgements\n----------------\n\n* Original implementation by `Samson Fong <https://github.com/shfong>`_\n\n* Initial template created with Cookiecutter_ and the `audreyr/cookiecutter-pypackage`_ project template.\n\n.. _Cookiecutter: https://github.com/audreyr/cookiecutter\n.. _`audreyr/cookiecutter-pypackage`: https://github.com/audreyr/cookiecutter-pypackage\n.. _Anaconda: https://www.anaconda.com/\n\n\n=======\nHistory\n=======\n0.7.0 (2019-07-01)\n------------------\n\n* Added dm6 in list of valid protein coding region files\n\n0.6.0 (2019-05-06)\n------------------\n\n* Added mm10 and rn6 in list of valid protein coding region files\n\n0.5.0 (2019-03-07)\n------------------\n\n* Replace infinite heat values returned from NAGA bug\n  `issue #24 <https://github.com/idekerlab/naga-gwas-rest/issues/23>`_\n\n* Add naga version used in processing to result json\n  `issue #23 <https://github.com/idekerlab/naga-gwas-rest/issues/23>`_\n\n* Rename to naga-gwas-rest\n  `issue #22 <https://github.com/idekerlab/naga-gwas-rest/issues/22>`_\n\n* Add input parameters snp_analyzer/get endpoint enhancement\n  `issue #20 <https://github.com/idekerlab/naga-gwas-rest/issues/20>`_\n\n* Modify naga_taskrunner.py to run in a daemon mode\n  `issue #3 <https://github.com/idekerlab/naga-gwas-rest/issues/3>`_\n\n\n0.4.1 (2018-12-20)\n------------------\n\n* Replace Association with Analysis in REST service description bug\n  `issue #19 <https://github.com/idekerlab/naga-gwas-rest/issues/19>`_\n\n0.4.0 (2018-12-19)\n------------------\n\n* Enabled DELETE rest endpoint `issue #16 <https://github.com/idekerlab/naga-gwas-rest/issues/16>`_\n\n* Fixed problems including numpy and running under apache modwsgi bug\n  `issue #15 <https://github.com/idekerlab/naga-gwas-rest/issues/15>`_\n\n* nbgwas_taskrunner.py should remove snp level summary file after job runs\n  `issue #5 <https://github.com/idekerlab/naga-gwas-rest/issues/5>`_\n\n0.1.1 (2018-11-30)\n------------------\n\n* First release onto github\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/idekerlab/naga-gwas-rest", "keywords": "naga-gwas-rest", "license": "BSD license", "maintainer": "", "maintainer_email": "", "name": "naga-gwas-rest", "package_url": "https://pypi.org/project/naga-gwas-rest/", "platform": "", "project_url": "https://pypi.org/project/naga-gwas-rest/", "project_urls": {"Homepage": "https://github.com/idekerlab/naga-gwas-rest"}, "release_url": "https://pypi.org/project/naga-gwas-rest/0.7.0/", "requires_dist": ["argparse", "networkx (==1.11)", "ndex2 (==3.0.0a1)", "naga-gwas (==0.4.1)", "numpy", "flask", "flask-restplus", "python-daemon"], "requires_python": "", "summary": "REST service for Network Assisted Genomic Analysis (NAGA)", "version": "0.7.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"naga-gwas-rest\">\n<h2>naga-gwas-rest</h2>\n<a href=\"https://pypi.python.org/pypi/naga-gwas-rest\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/naga-gwas-rest.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8c623e06c528ce571e884d506bffb562cb123044/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6e6167612d677761732d726573742e737667\"></a>\n<a href=\"https://travis-ci.org/idekerlab/naga-gwas-rest\" rel=\"nofollow\"><img alt=\"https://img.shields.io/travis/idekerlab/naga-gwas-rest.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/41e8662e554547bfc94341bcfa865f3fd5dca4e3/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f6964656b65726c61622f6e6167612d677761732d726573742e737667\"></a>\n<p>REST service for <a href=\"https://github.com/shfong/naga/\" rel=\"nofollow\">Network Assisted Genomic Analysis (NAGA)</a></p>\n<p><a href=\"https://github.com/idekerlab/naga-gwas-rest/wiki\" rel=\"nofollow\">For more information please click here to visit our wiki</a></p>\n<p>This service is currently running here: <a href=\"http://nbgwas.ucsd.edu\" rel=\"nofollow\">http://nbgwas.ucsd.edu</a></p>\n<div id=\"compatibility\">\n<h3>Compatibility</h3>\n<blockquote>\n<ul>\n<li>Tested with Python 3.6 in <a href=\"https://www.anaconda.com/\" rel=\"nofollow\">Anaconda</a></li>\n</ul>\n</blockquote>\n</div>\n<div id=\"dependencies-to-run\">\n<h3>Dependencies to run</h3>\n<blockquote>\n<ul>\n<li><a href=\"https://pypi.org/project/naga-gwas/\" rel=\"nofollow\">naga-gwas</a></li>\n<li><a href=\"https://pypi.org/project/ndex2/\" rel=\"nofollow\">ndex2</a></li>\n<li><a href=\"https://pypi.org/project/python-daemon/\" rel=\"nofollow\">python-daemon</a></li>\n<li><a href=\"https://pypi.org/project/flask/\" rel=\"nofollow\">flask</a></li>\n<li><a href=\"https://pypi.org/project/flast-restplus\" rel=\"nofollow\">flask-restplus</a></li>\n<li><a href=\"https://pypi.org/project/numpy\" rel=\"nofollow\">numpy</a></li>\n</ul>\n</blockquote>\n</div>\n<div id=\"additional-dependencies-to-build\">\n<h3>Additional dependencies to build</h3>\n<blockquote>\n<ul>\n<li>GNU make</li>\n<li><a href=\"https://pypi.org/project/wheel/\" rel=\"nofollow\">wheel</a></li>\n<li><a href=\"https://pypi.org/project/setuptools/\" rel=\"nofollow\">setuptools</a></li>\n</ul>\n</blockquote>\n</div>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>It is highly reccommended one use <a href=\"https://www.anaconda.com/\" rel=\"nofollow\">Anaconda</a> for Python environment</p>\n<pre>git clone https://github.com/idekerlab/naga-gwas-rest.git\n<span class=\"nb\">cd</span> naga-gwas-rest\nmake install\n</pre>\n</div>\n<div id=\"running-service-in-development-mode\">\n<h3>Running service in development mode</h3>\n<p><strong>NOTE:</strong> Example below runs the REST service and not the task runner.</p>\n<pre><span class=\"c1\"># It is assumed the application has been installed as described above\n</span><span class=\"nb\">export</span> <span class=\"nv\">FLASK_APP</span><span class=\"o\">=</span>nbgwas_rest\nflask run <span class=\"c1\"># --host=0.0.0.0 can be added to allow all access from interfaces\n</span>\n<span class=\"c1\"># Service will be running on http://localhost:5000\n</span>\n<span class=\"c1\"># NOTE: To have tasks processed naga_taskrunner.py must be started in\n# another terminal</span>\n</pre>\n<p><a href=\"https://github.com/idekerlab/naga-gwas-rest/wiki/NAGA-REST-under-Vagrant-Virtual-Machine\" rel=\"nofollow\">Click here for information on launching service via Vagrant VM</a></p>\n</div>\n<div id=\"example-usage-of-service\">\n<h3>Example usage of service</h3>\n<p>Below is a small script that leverages the nbgwas_rest service to run NAGA on the\ncompressed <strong>nagadata/schizophrenia.txt.gz</strong> passed into the script on the command line</p>\n<pre><span class=\"ch\">#!/usr/bin/env python\n</span>\nimport sys\nimport gzip\nimport <span class=\"nb\">time</span>\nimport requests\n\n<span class=\"c1\"># pass the gzipped schizophrenia.txt.gz\n</span><span class=\"nv\">networkfile</span> <span class=\"o\">=</span> sys.argv<span class=\"o\">[</span><span class=\"m\">1</span><span class=\"o\">]</span>\n\n<span class=\"c1\"># set parameters\n</span><span class=\"nv\">data_dict</span> <span class=\"o\">=</span> <span class=\"o\">{}</span>\ndata_dict<span class=\"o\">[</span><span class=\"s1\">'protein_coding'</span><span class=\"o\">]=</span><span class=\"s1\">'hg18'</span>\ndata_dict<span class=\"o\">[</span><span class=\"s1\">'window'</span><span class=\"o\">]=</span><span class=\"m\">10000</span>\ndata_dict<span class=\"o\">[</span><span class=\"s1\">'ndex'</span><span class=\"o\">]=</span><span class=\"s1\">'f93f402c-86d4-11e7-a10d-0ac135e8bacf'</span>\n\n<span class=\"c1\"># set snp file\n</span><span class=\"nv\">files</span> <span class=\"o\">=</span> <span class=\"o\">{</span><span class=\"s1\">'snp_level_summary'</span>: gzip.open<span class=\"o\">(</span>networkfile, <span class=\"s1\">'rb'</span><span class=\"o\">)}</span>\n<span class=\"nv\">url</span> <span class=\"o\">=</span> <span class=\"s1\">'http://nbgwas.ucsd.edu/rest/v1/snp_analyzer'</span>\n<span class=\"nv\">r</span> <span class=\"o\">=</span> requests.post<span class=\"o\">(</span>url, <span class=\"nv\">data</span><span class=\"o\">=</span>data_dict, <span class=\"nv\">files</span><span class=\"o\">=</span>files,\n                  <span class=\"nv\">timeout</span><span class=\"o\">=</span><span class=\"m\">30</span><span class=\"o\">)</span>\n\n<span class=\"c1\"># If successful the previous POST will return 202\n</span><span class=\"k\">if</span> r.status_code !<span class=\"o\">=</span> <span class=\"m\">202</span>:\n    sys.stderr.write<span class=\"o\">(</span><span class=\"s1\">'Submission failed with code: '</span> + str<span class=\"o\">(</span>r.status_code<span class=\"o\">)</span> +\n                     <span class=\"s1\">'\\n'</span><span class=\"o\">)</span>\n    sys.stderr.write<span class=\"o\">(</span><span class=\"s1\">'Message: '</span> + str<span class=\"o\">(</span>r.text<span class=\"o\">)</span> + <span class=\"s1\">'\\n'</span><span class=\"o\">)</span>\n    sys.exit<span class=\"o\">(</span><span class=\"m\">1</span><span class=\"o\">)</span>\n\n<span class=\"c1\"># If successful Location will be set to a URL that can\n# be polled for result\n</span><span class=\"k\">if</span> <span class=\"s1\">'Location'</span> not in r.headers:\n    sys.stderr.write<span class=\"o\">(</span><span class=\"s1\">'Expected Location in Header, '</span> +\n                     <span class=\"s1\">'but its not there: '</span> + str<span class=\"o\">(</span>r.headers<span class=\"o\">)</span> + <span class=\"s1\">'\\n'</span><span class=\"o\">)</span>\n    sys.exit<span class=\"o\">(</span><span class=\"m\">2</span><span class=\"o\">)</span>\n\n<span class=\"nv\">resulturl</span> <span class=\"o\">=</span> r.headers<span class=\"o\">[</span><span class=\"s1\">'Location'</span><span class=\"o\">]</span>\n<span class=\"nv\">getres</span> <span class=\"o\">=</span> requests.get<span class=\"o\">(</span>resulturl, <span class=\"nv\">timeout</span><span class=\"o\">=</span><span class=\"m\">30</span><span class=\"o\">)</span>\n<span class=\"nv\">json_res</span> <span class=\"o\">=</span> getres.json<span class=\"o\">()</span>\n<span class=\"k\">while</span> getres.status_code !<span class=\"o\">=</span> <span class=\"m\">200</span> or json_res<span class=\"o\">[</span><span class=\"s1\">'status'</span><span class=\"o\">]</span> <span class=\"o\">==</span> <span class=\"s1\">'submitted'</span> or json_res<span class=\"o\">[</span><span class=\"s1\">'status'</span><span class=\"o\">]</span> <span class=\"o\">==</span> <span class=\"s1\">'processing'</span>:\n   sys.stderr.write<span class=\"o\">(</span><span class=\"s1\">'.'</span><span class=\"o\">)</span>\n   sys.stderr.flush<span class=\"o\">()</span>\n   time.sleep<span class=\"o\">(</span><span class=\"m\">5</span><span class=\"o\">)</span>\n   <span class=\"nv\">getres</span> <span class=\"o\">=</span> requests.get<span class=\"o\">(</span>resulturl, <span class=\"nv\">timeout</span><span class=\"o\">=</span><span class=\"m\">30</span><span class=\"o\">)</span>\n   <span class=\"nv\">json_res</span> <span class=\"o\">=</span> getres.json<span class=\"o\">()</span>\n\nsys.stderr.write<span class=\"o\">(</span><span class=\"s1\">'\\n'</span><span class=\"o\">)</span>\nsys.stdout.write<span class=\"o\">(</span>str<span class=\"o\">(</span>json_res<span class=\"o\">)</span> + <span class=\"s1\">'\\n'</span><span class=\"o\">)</span>\n</pre>\n<p>Assuming the above is saved in a file named <strong>foo.py</strong> and run from base directory of this source tree</p>\n<pre>./foo.py nagadata/schizophrenia.txt.gz\n</pre>\n<p>Example output:</p>\n<pre><span class=\"o\">{</span><span class=\"s1\">'result'</span>: <span class=\"o\">{</span><span class=\"s1\">'A1BG'</span>: <span class=\"m\">1</span>.818739214334769, <span class=\"s1\">'A1CF'</span>: <span class=\"m\">2</span>.9679830980888413,\n<span class=\"s1\">'A2M'</span>: <span class=\"m\">3</span>.9294999566765174, <span class=\"s1\">'A2ML1'</span>: <span class=\"m\">1</span>.4379620790934335, <span class=\"s1\">'A3GALT2'</span>: <span class=\"m\">1</span>.9918435374785632,\n<span class=\"s1\">'A4GALT'</span>: <span class=\"m\">1</span>.8734641163972634, <span class=\"s1\">'A4GNT'</span>: <span class=\"m\">1</span>.335302470858104, <span class=\"s1\">'AAAS'</span>: <span class=\"m\">2</span>.384799543926567,\n<span class=\"s1\">'AACS'</span>: <span class=\"m\">2</span>.965792987307328, <span class=\"s1\">'AADAC'</span>: <span class=\"m\">1</span>.455957465785784, <span class=\"s1\">'AADACL2'</span>: <span class=\"m\">1</span>.0156608351922358,\n<span class=\"s1\">'AADACL3'</span>: <span class=\"m\">0</span>.895944981993654, <span class=\"s1\">'AADACL4'</span>: <span class=\"m\">1</span>.2458363441128992, <span class=\"s1\">'AADAT'</span>: <span class=\"m\">2</span>.689141678947707,\n<span class=\"s1\">'AAED1'</span>: <span class=\"m\">0</span>.12364477699188797, <span class=\"s1\">'AAGAB'</span>: <span class=\"m\">0</span>.14237051805828474, <span class=\"s1\">'AAK1'</span>: <span class=\"m\">5</span>.652340641567231,\n<span class=\"s1\">'AAMDC'</span>: <span class=\"m\">0</span>.1647736242197245, <span class=\"s1\">'AAMP'</span>: <span class=\"m\">3</span>.2927511707526884, <span class=\"s1\">'AANAT'</span>: <span class=\"m\">5</span>.654764562774087,\n<span class=\"s1\">'AAR2'</span>: <span class=\"m\">0</span>.9427896961129361,\n.\n.\n, <span class=\"s1\">'status'</span>: <span class=\"s1\">'done'</span><span class=\"o\">}</span>\n</pre>\n</div>\n<div id=\"bugs\">\n<h3>Bugs</h3>\n<p>Please report them <a href=\"https://github.com/idekerlab/naga-gwas-rest/issues\" rel=\"nofollow\">here</a></p>\n</div>\n<div id=\"acknowledgements\">\n<h3>Acknowledgements</h3>\n<ul>\n<li>Original implementation by <a href=\"https://github.com/shfong\" rel=\"nofollow\">Samson Fong</a></li>\n<li>Initial template created with <a href=\"https://github.com/audreyr/cookiecutter\" rel=\"nofollow\">Cookiecutter</a> and the <a href=\"https://github.com/audreyr/cookiecutter-pypackage\" rel=\"nofollow\">audreyr/cookiecutter-pypackage</a> project template.</li>\n</ul>\n</div>\n</div>\n<div id=\"history\">\n<h2>History</h2>\n<div id=\"id2\">\n<h3>0.7.0 (2019-07-01)</h3>\n<ul>\n<li>Added dm6 in list of valid protein coding region files</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>0.6.0 (2019-05-06)</h3>\n<ul>\n<li>Added mm10 and rn6 in list of valid protein coding region files</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3>0.5.0 (2019-03-07)</h3>\n<ul>\n<li>Replace infinite heat values returned from NAGA bug\n<a href=\"https://github.com/idekerlab/naga-gwas-rest/issues/23\" rel=\"nofollow\">issue #24</a></li>\n<li>Add naga version used in processing to result json\n<a href=\"https://github.com/idekerlab/naga-gwas-rest/issues/23\" rel=\"nofollow\">issue #23</a></li>\n<li>Rename to naga-gwas-rest\n<a href=\"https://github.com/idekerlab/naga-gwas-rest/issues/22\" rel=\"nofollow\">issue #22</a></li>\n<li>Add input parameters snp_analyzer/get endpoint enhancement\n<a href=\"https://github.com/idekerlab/naga-gwas-rest/issues/20\" rel=\"nofollow\">issue #20</a></li>\n<li>Modify naga_taskrunner.py to run in a daemon mode\n<a href=\"https://github.com/idekerlab/naga-gwas-rest/issues/3\" rel=\"nofollow\">issue #3</a></li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3>0.4.1 (2018-12-20)</h3>\n<ul>\n<li>Replace Association with Analysis in REST service description bug\n<a href=\"https://github.com/idekerlab/naga-gwas-rest/issues/19\" rel=\"nofollow\">issue #19</a></li>\n</ul>\n</div>\n<div id=\"id6\">\n<h3>0.4.0 (2018-12-19)</h3>\n<ul>\n<li>Enabled DELETE rest endpoint <a href=\"https://github.com/idekerlab/naga-gwas-rest/issues/16\" rel=\"nofollow\">issue #16</a></li>\n<li>Fixed problems including numpy and running under apache modwsgi bug\n<a href=\"https://github.com/idekerlab/naga-gwas-rest/issues/15\" rel=\"nofollow\">issue #15</a></li>\n<li>nbgwas_taskrunner.py should remove snp level summary file after job runs\n<a href=\"https://github.com/idekerlab/naga-gwas-rest/issues/5\" rel=\"nofollow\">issue #5</a></li>\n</ul>\n</div>\n<div id=\"id7\">\n<h3>0.1.1 (2018-11-30)</h3>\n<ul>\n<li>First release onto github</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 5542724, "releases": {"0.5.0a1": [{"comment_text": "", "digests": {"md5": "e497264a796e0ddc086f101783876d74", "sha256": "043160acf4922c3756364311d3bb3bd3d1f9c6489ad42f75ab60d75be599cf12"}, "downloads": -1, "filename": "naga_gwas_rest-0.5.0a1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e497264a796e0ddc086f101783876d74", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 26802, "upload_time": "2019-03-07T13:42:38", "upload_time_iso_8601": "2019-03-07T13:42:38.694973Z", "url": "https://files.pythonhosted.org/packages/42/93/7c4db7891ac4864442d41881200e0e39332fff244d529655601c22007e55/naga_gwas_rest-0.5.0a1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "292e14f38c97bc32647df5f184370fdf", "sha256": "bfdd7710f5a31665a84d7e07615e8c8e89dab97d4f62e843d62b82fcf061827b"}, "downloads": -1, "filename": "naga-gwas-rest-0.5.0a1.tar.gz", "has_sig": false, "md5_digest": "292e14f38c97bc32647df5f184370fdf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35813, "upload_time": "2019-03-07T13:42:40", "upload_time_iso_8601": "2019-03-07T13:42:40.759343Z", "url": "https://files.pythonhosted.org/packages/bd/55/06b09369f05711947cb44336e28a8d7627ba279971a66f8541e381a85b0b/naga-gwas-rest-0.5.0a1.tar.gz", "yanked": false}], "0.6.0a1": [{"comment_text": "", "digests": {"md5": "effd83c069a46e8e4010ce7ef6961a12", "sha256": "4cb372a4a0194789facb7867cacef0184edce8f1884eaf1cbcb603b707756f32"}, "downloads": -1, "filename": "naga_gwas_rest-0.6.0a1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "effd83c069a46e8e4010ce7ef6961a12", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 26851, "upload_time": "2019-05-06T20:27:54", "upload_time_iso_8601": "2019-05-06T20:27:54.606460Z", "url": "https://files.pythonhosted.org/packages/83/f6/6922f07f620a1652a0166fcdb1d15a12d67ec92f537ac5115886a8f05fd6/naga_gwas_rest-0.6.0a1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "feb084004b0acd5106e737781e6e8501", "sha256": "466431a3446af433f9502fec5be08ea97d1009ee037689451ee2b1b441821f4b"}, "downloads": -1, "filename": "naga-gwas-rest-0.6.0a1.tar.gz", "has_sig": false, "md5_digest": "feb084004b0acd5106e737781e6e8501", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32061, "upload_time": "2019-05-06T20:27:56", "upload_time_iso_8601": "2019-05-06T20:27:56.043944Z", "url": "https://files.pythonhosted.org/packages/9b/e2/11f12592237f252bcf53f0d4f6a7d0c8f1584ecb177e02d3e854d1763ca9/naga-gwas-rest-0.6.0a1.tar.gz", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "7915cdc7abc9bad46fdc16717cbe93d8", "sha256": "b4bfe980f70999af01736d2988d5c63b35f071c837eda75c785e11c406f70bd1"}, "downloads": -1, "filename": "naga_gwas_rest-0.7.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "7915cdc7abc9bad46fdc16717cbe93d8", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 26836, "upload_time": "2019-07-16T20:30:29", "upload_time_iso_8601": "2019-07-16T20:30:29.389495Z", "url": "https://files.pythonhosted.org/packages/ad/f5/821a4157e86f972c61c4cac7518aa8d4ee0b0ee64d18ad343701fc8b7511/naga_gwas_rest-0.7.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "350b6b1e0380c9e779632e11fce10d31", "sha256": "f30a5bb10ce8603830cb66e77e72c716d7c5de662f64349d23ce539c5e57520b"}, "downloads": -1, "filename": "naga-gwas-rest-0.7.0.tar.gz", "has_sig": false, "md5_digest": "350b6b1e0380c9e779632e11fce10d31", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32105, "upload_time": "2019-07-16T20:30:31", "upload_time_iso_8601": "2019-07-16T20:30:31.176342Z", "url": "https://files.pythonhosted.org/packages/f7/e8/64ba24fadbdfdc1d23ef219ef38c631d39c8c0d24ed036cbafd48b84d887/naga-gwas-rest-0.7.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7915cdc7abc9bad46fdc16717cbe93d8", "sha256": "b4bfe980f70999af01736d2988d5c63b35f071c837eda75c785e11c406f70bd1"}, "downloads": -1, "filename": "naga_gwas_rest-0.7.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "7915cdc7abc9bad46fdc16717cbe93d8", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 26836, "upload_time": "2019-07-16T20:30:29", "upload_time_iso_8601": "2019-07-16T20:30:29.389495Z", "url": "https://files.pythonhosted.org/packages/ad/f5/821a4157e86f972c61c4cac7518aa8d4ee0b0ee64d18ad343701fc8b7511/naga_gwas_rest-0.7.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "350b6b1e0380c9e779632e11fce10d31", "sha256": "f30a5bb10ce8603830cb66e77e72c716d7c5de662f64349d23ce539c5e57520b"}, "downloads": -1, "filename": "naga-gwas-rest-0.7.0.tar.gz", "has_sig": false, "md5_digest": "350b6b1e0380c9e779632e11fce10d31", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32105, "upload_time": "2019-07-16T20:30:31", "upload_time_iso_8601": "2019-07-16T20:30:31.176342Z", "url": "https://files.pythonhosted.org/packages/f7/e8/64ba24fadbdfdc1d23ef219ef38c631d39c8c0d24ed036cbafd48b84d887/naga-gwas-rest-0.7.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:47:53 2020"}