{"info": {"author": "Patrick Morrell, Bryan Carlson", "author_email": "bryan.carlson@usda.gov", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Science/Research", "License :: CC0 1.0 Universal (CC0 1.0) Public Domain Dedication", "Programming Language :: Python :: 3", "Topic :: Scientific/Engineering", "Topic :: Scientific/Engineering :: Bio-Informatics"], "description": "# PLFA Tools Aggregator\n\n## Purpose\n\nThe MIDI Inc. Sherlock PLFA Analysis Software has a paid add-on package called PLFA Tools. The software takes as input GC results of PLFA (and NLFA) samples and assigns peaks to categories (General FAME, Gram Negative, etc.). The software creates a new Excel Worksheet for each sample, possibly resulting in hundreds of worksheets of various formats. The purpose of this package is to automate the aggregation of the data into a single CSV file for analysis.\n\n## License\n\nAs a work of the United States government, this project is in the public domain within the United States.\n\nAdditionally, we waive copyright and related rights in the work worldwide through the CC0 1.0 Universal public domain dedication.\n\n## Installation information\n\nCan be installed using pip:\n\n```pip install plfatools```\n\nMust be using Python 3 or later to use this package.\n\n## Using this package\n\n### From command line\n\nPlfaTools can be used via the command line by running the main file within the aggregator package. It takes two arguments: 1) a full path to the directory containing the files to be aggregated and 2) a full path to the directory where you want the final.csv file to be written.\n\nExample:\n\n```cmd\n> python -m plfatools \"C:\\Files\\Experiment1\\PlfaOutput\" \"C:\\Files\\Experiment1\\Output\"\n```\n\nWhere:\n\n* ```\"C:\\Files\\Experiment1\\PlfaOutput\"``` is the directory with xlsx files to be aggregated\n* ```\"C:\\Files\\Experiment1\\Output\"``` is the directory where \"final.csv\" file containing aggregated data is written\n\n### From Python\n\nPlfaTools can also be imported as a module: ```import plfatools```\n\nThe ```Aggregator``` Class contains four functions, listed below in order of decreasing generality:\n\n* ```read_dir()``` : Reads a directory path that contains multiple files from PLFA Tools and returns a pandas DataFrame with all data from all files and worksheets\n* ```read_file()``` : Reads a file from PLFA Tools and returns a pandas DataFrame with all data from all worksheets\n* ```transform_stacked_to_tidy()``` : Accepts a Pandas DataFrame generated by \"read_dir\" or \"read_file\" and returns a new DataFrame in a tidy format\n* ```transform_raw_to_stacked()``` : Reformats output from PLFA Tools, of a single sample, into proper tabular format\n\n**Note**: If there are other .xlsx files in the directory to be aggregated this will cause errors as the main file assumes all the XLSX files in the directory are GC results.\n\nExample:\n\n```python\nimport pathlib\nimport plfatools\n\n# create an aggregator object\naggregator = plfatools.Aggregator()\n\n# specify path to directory with PLFA Tools output (Windows paths)\npath_to_directory = pathlib.Path('C:\\\\Files\\\\Experiment1\\\\PlfaOutput')\n\n# aggregate and format instrument output and assign it to a Pandas DataFrame\nplfa_data = aggregator.read_dir(path_to_directory)\n\n# alternatively, read a single file and assign the formatted output to Pandas DataFrame\npath_to_file = path_to_directory / 'gc-output.xlsx'\nplfa_data = aggregator.read_file(path_to_file)\n\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/cafltar/plfa_tools_aggregator.git", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/cafltar/plfa_tools_aggregator", "keywords": "Aggregator,PLFA,CSV", "license": "CC0", "maintainer": "", "maintainer_email": "", "name": "plfatools", "package_url": "https://pypi.org/project/plfatools/", "platform": "", "project_url": "https://pypi.org/project/plfatools/", "project_urls": {"Download": "https://github.com/cafltar/plfa_tools_aggregator.git", "Homepage": "https://github.com/cafltar/plfa_tools_aggregator"}, "release_url": "https://pypi.org/project/plfatools/0.1.0/", "requires_dist": ["pathlib", "pandas", "numpy"], "requires_python": "", "summary": "This package automates the aggregation of output from MIDI Inc. Sherlock PLFA Analysis Software into a single csv file.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>PLFA Tools Aggregator</h1>\n<h2>Purpose</h2>\n<p>The MIDI Inc. Sherlock PLFA Analysis Software has a paid add-on package called PLFA Tools. The software takes as input GC results of PLFA (and NLFA) samples and assigns peaks to categories (General FAME, Gram Negative, etc.). The software creates a new Excel Worksheet for each sample, possibly resulting in hundreds of worksheets of various formats. The purpose of this package is to automate the aggregation of the data into a single CSV file for analysis.</p>\n<h2>License</h2>\n<p>As a work of the United States government, this project is in the public domain within the United States.</p>\n<p>Additionally, we waive copyright and related rights in the work worldwide through the CC0 1.0 Universal public domain dedication.</p>\n<h2>Installation information</h2>\n<p>Can be installed using pip:</p>\n<p><code>pip install plfatools</code></p>\n<p>Must be using Python 3 or later to use this package.</p>\n<h2>Using this package</h2>\n<h3>From command line</h3>\n<p>PlfaTools can be used via the command line by running the main file within the aggregator package. It takes two arguments: 1) a full path to the directory containing the files to be aggregated and 2) a full path to the directory where you want the final.csv file to be written.</p>\n<p>Example:</p>\n<pre>&gt; python -m plfatools \"C:\\Files\\Experiment1\\PlfaOutput\" \"C:\\Files\\Experiment1\\Output\"\n</pre>\n<p>Where:</p>\n<ul>\n<li><code>\"C:\\Files\\Experiment1\\PlfaOutput\"</code> is the directory with xlsx files to be aggregated</li>\n<li><code>\"C:\\Files\\Experiment1\\Output\"</code> is the directory where \"final.csv\" file containing aggregated data is written</li>\n</ul>\n<h3>From Python</h3>\n<p>PlfaTools can also be imported as a module: <code>import plfatools</code></p>\n<p>The <code>Aggregator</code> Class contains four functions, listed below in order of decreasing generality:</p>\n<ul>\n<li><code>read_dir()</code> : Reads a directory path that contains multiple files from PLFA Tools and returns a pandas DataFrame with all data from all files and worksheets</li>\n<li><code>read_file()</code> : Reads a file from PLFA Tools and returns a pandas DataFrame with all data from all worksheets</li>\n<li><code>transform_stacked_to_tidy()</code> : Accepts a Pandas DataFrame generated by \"read_dir\" or \"read_file\" and returns a new DataFrame in a tidy format</li>\n<li><code>transform_raw_to_stacked()</code> : Reformats output from PLFA Tools, of a single sample, into proper tabular format</li>\n</ul>\n<p><strong>Note</strong>: If there are other .xlsx files in the directory to be aggregated this will cause errors as the main file assumes all the XLSX files in the directory are GC results.</p>\n<p>Example:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pathlib</span>\n<span class=\"kn\">import</span> <span class=\"nn\">plfatools</span>\n\n<span class=\"c1\"># create an aggregator object</span>\n<span class=\"n\">aggregator</span> <span class=\"o\">=</span> <span class=\"n\">plfatools</span><span class=\"o\">.</span><span class=\"n\">Aggregator</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># specify path to directory with PLFA Tools output (Windows paths)</span>\n<span class=\"n\">path_to_directory</span> <span class=\"o\">=</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"s1\">'C:</span><span class=\"se\">\\\\</span><span class=\"s1\">Files</span><span class=\"se\">\\\\</span><span class=\"s1\">Experiment1</span><span class=\"se\">\\\\</span><span class=\"s1\">PlfaOutput'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># aggregate and format instrument output and assign it to a Pandas DataFrame</span>\n<span class=\"n\">plfa_data</span> <span class=\"o\">=</span> <span class=\"n\">aggregator</span><span class=\"o\">.</span><span class=\"n\">read_dir</span><span class=\"p\">(</span><span class=\"n\">path_to_directory</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># alternatively, read a single file and assign the formatted output to Pandas DataFrame</span>\n<span class=\"n\">path_to_file</span> <span class=\"o\">=</span> <span class=\"n\">path_to_directory</span> <span class=\"o\">/</span> <span class=\"s1\">'gc-output.xlsx'</span>\n<span class=\"n\">plfa_data</span> <span class=\"o\">=</span> <span class=\"n\">aggregator</span><span class=\"o\">.</span><span class=\"n\">read_file</span><span class=\"p\">(</span><span class=\"n\">path_to_file</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 6924266, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "0aedf70b27de3dc97b777eb0c4329504", "sha256": "e13e560a9614554143bb9803ad0e74fa80acc5d0954d4131ce0fb3d16249913a"}, "downloads": -1, "filename": "plfatools-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0aedf70b27de3dc97b777eb0c4329504", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9382, "upload_time": "2020-03-31T23:47:17", "upload_time_iso_8601": "2020-03-31T23:47:17.793249Z", "url": "https://files.pythonhosted.org/packages/02/56/f800d0d53b4fc71b66a9f64ef82f9c186efc3d41116766801f5776fcad73/plfatools-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1c618279d928d3d4e3f0fc11c379ae7f", "sha256": "dab25711209ee8bc64c420ccef22de33c04accfd501160d2b39b5549a22bb104"}, "downloads": -1, "filename": "plfatools-0.1.0.tar.gz", "has_sig": false, "md5_digest": "1c618279d928d3d4e3f0fc11c379ae7f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5483, "upload_time": "2020-03-31T23:47:19", "upload_time_iso_8601": "2020-03-31T23:47:19.878213Z", "url": "https://files.pythonhosted.org/packages/55/97/b5890ffa82ad9f1e26698ff00b35ba528fb389adac2a979b98fcb1544fae/plfatools-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0aedf70b27de3dc97b777eb0c4329504", "sha256": "e13e560a9614554143bb9803ad0e74fa80acc5d0954d4131ce0fb3d16249913a"}, "downloads": -1, "filename": "plfatools-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0aedf70b27de3dc97b777eb0c4329504", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9382, "upload_time": "2020-03-31T23:47:17", "upload_time_iso_8601": "2020-03-31T23:47:17.793249Z", "url": "https://files.pythonhosted.org/packages/02/56/f800d0d53b4fc71b66a9f64ef82f9c186efc3d41116766801f5776fcad73/plfatools-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1c618279d928d3d4e3f0fc11c379ae7f", "sha256": "dab25711209ee8bc64c420ccef22de33c04accfd501160d2b39b5549a22bb104"}, "downloads": -1, "filename": "plfatools-0.1.0.tar.gz", "has_sig": false, "md5_digest": "1c618279d928d3d4e3f0fc11c379ae7f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5483, "upload_time": "2020-03-31T23:47:19", "upload_time_iso_8601": "2020-03-31T23:47:19.878213Z", "url": "https://files.pythonhosted.org/packages/55/97/b5890ffa82ad9f1e26698ff00b35ba528fb389adac2a979b98fcb1544fae/plfatools-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:53:28 2020"}