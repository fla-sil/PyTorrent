{"info": {"author": "The mathlib community", "author_email": "", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# mathlib-tools\n\n![Test on Linux](https://github.com/leanprover-community/mathlib-tools/workflows/Test%20on%20Linux/badge.svg)\n![Test on MacOS](https://github.com/leanprover-community/mathlib-tools/workflows/Test%20on%20MacOS/badge.svg)\n![Test on Windows](https://github.com/leanprover-community/mathlib-tools/workflows/Test%20on%20Windows/badge.svg)\n\nThis package contains `leanproject`, a supporting tool for [Lean mathlib](https://leanprover-community.github.io/).\n\n## Installation\n\nThose tools use python3, at least python 3.5, which is the oldest\nversion of python supported by the python foundation. They can be\ninstalled using [pip](https://pypi.org/project/mathlibtools/). The basic\ninstall command is thus:\n```\npip install mathlibtools\n```\nDepending on your setup you may need to preface this command with\n`sudo`, and `pip` may be called `pip3` to distinguish it from its\ndeprecated python2 version. For instance on Debian or Ubuntu, you can\ninstall `pip` using `sudo apt install python3-pip` and then run `sudo\npip3 install mathlibtools` to install mathlib tools system-wide.\nIf you want to use the latest development version, you can clone this\nrepository, go to the repository folder, and run `pip install .`.\n\nYou also need to have [elan](https://github.com/Kha/elan) already\ninstalled.\n\nIf you are using NixOS, you can also install mathlib tools using the bundled `default.nix` file:\n```\nnix-env -if https://github.com/leanprover-community/mathlib-tools/archive/master.tar.gz\n```\n\n## Basic usage\n\nEverything is done using the `leanproject` command-line tool. You can\nuse `leanproject --help` to get the list of available commands and\noptions.\n\n### Getting an existing Lean project\n\nThe command to fetch an existing project from GitHub and make sure it\nincludes a copy of mathlib ready to go is `leanproject get name` where\nname is either a git url, such as `https://github.com/leanprover-community/tutorials.git`\nor `git@github.com:leanprover-community/tutorials.git`, or a GitHub project\nidentifier such as `leanprover-community/tutorials`. The organization\nname defaults to `leanprover-community` so the simplest way get the tutorials\nproject is to run:\n\n```\nleanproject get tutorials\n```\nYou can specify a git branch name `my_branch` by appending \n`:my_branch` at the end of the specified name (without space). \nYou can also specify a target directory name as a second argument to the\ncommand.\n\n### Creating a new project\n\nYou can create a project in a new folder `my_project` by running:\n```\nleanproject new my_project\n```\nIf you omit the argument, the project will be created directly inside\nthe current folder. This new project will be using the latest version of\nLean compatible with mathlib, and include a pre-built mathlib.\n\n### Building a project\n\nOnly mathlib itself comes with pre-built olean files. In order to build\noleans in a project (which is needed for every non-trivial project in\norder to get decent interactive Lean speed), you can use:\n```\nleanproject build\n```\n\n### Getting mathlib oleans\n\nIn an existing project depending on mathlib (or in mathlib itself), you\ncan run:\n```\nleanproject get-mathlib-cache\n```\nto download a compiled mathlib at the commit currently specified in the\nproject `leanpkg.toml` (see the next section if you want to update this\ncommit and get the latest mathlib).\n\n### Upgrading mathlib\n\nIn an existing project depending on mathlib, you can upgrade to the\nlatest mathlib version by running:\n```\nleanproject upgrade-mathlib\n```\nThis can be abbreviated to `leanproject up`.\nBy default, this will update the version of Lean used by this project to\nmatch the latest version compatible with mathlib. You can forbid such an\nupgrade by using `leanproject --no-lean-upgrade upgrade-mathlib`.\n\n## Advanced usage\n\n### Global mathlib install\n\nIf you want to use mathlib outside of a Lean project, you can run:\n```\nleanproject global-install\n```\nThis will put a pre-compiled mathlib inside `$HOME/.lean`, the user-wide\nLean project whose dependencies can be used by lean files outside\nprojects. You can upgrade this project using:\n```\nleanproject global-upgrade\n```\n\n### Adding mathlib to an existing project\n\nIf you already have a Lean project but it doesn't use mathlib yet, you\ncan go to the project folder and run:\n```\nleanproject add-mathlib\n```\nBy default, this will update the version of Lean used by this project to\nmatch the latest version compatible with mathlib. You can forbid such an\nupgrade by using `leanproject --no-lean-upgrade add-mathlib`.\n\n### Project olean cache\n\nIn any Lean project, it can be useful to store and retrieve olean files,\nespecially if the project has several git branches. Storing oleans is\ndone by:\n```\nleanproject mk-cache\n```\nwhile retrieving them is done by:\n```\nleanproject get-cache\n```\nOne should note that, although olean files are indeed the primary target\nhere, these commands actually store everything from the\n`src` and `test` folders of the current project.\n\nIf the project is mathlib itself, the caches will be stored in\n`$HOME/.mathlib/`. Otherwise, they will be stored in a folder `_cache` inside\nthe project top-level folder. They are named after the corresponding git\ncommit hash.\n\nIn general, using these commands in a dirty git repository (*ie* a\nrepository whose working copy contains uncommitted changes) is a bad\nidea. You can do it anyway by running `leanproject mk-cache --force` or\n`leanproject get-cache --force` respectively.\n\nThe `--force` option will also overwrite existing cache for the current\ngit revision.\n\nWhen using `get-cache` inside the mathlib project, the local cache in\n`$HOME/.mathlib/` will be searched first, before trying to download it.\nYou can force download by running \n`leanproject --force-download get-cache`. This `--force-download` option\ncan also be used with the `upgrade-mathlib` command.\n\n### Import graphs\n\nIf you want to generate a graph file showing your project import\nstructure, you can run:\n```\nleanproject import-graph my_graph_file_name.suffix\n```\nwhere the suffix will determine the output format. It must be either\n`dot` or `graphml` or `gexf`, (or `pdf`, `svg` or `png` if\n[graphviz](https://www.graphviz.org/) is installed).\nIf you want to restrict the graph to files leading to a certain file\n`my_subproject/my_file.lean` then you can run:\n```\nleanproject import-graph --to my_subproject.my_file my_graph_file_name.suffix\n```\nDually, if you want to see all files using `my_subproject/my_file.lean` \nthen you can run:\n```\nleanproject import-graph --from my_subproject.my_file my_graph_file_name.suffix\n```\nCombining `--to` and `--from` is possible.\n\n### Git hooks\n\nIf you want leanproject to fetch olean caches after each `git checkout`,\nand make olean caches after each `git commmit` in the current project,\nyou can run:\n```\nleanproject hooks\n```\nBeware this will overwrite any `post-checkout` or `post-commit` file you\nmight have in your project `.git/hooks`.\n\n### Cache download url handling\n\nBy default, leanproject will try to find mathlib olean files hosted on an\nAzure server. You permanently override the base url it uses by running:\n```\nleanproject set-url my_url\n```\nso that leanproject will look for caches at\n`my_url/relevant_git_hash.tar.gz`. You can override this base url\nfor one invocation using `leanprover --from-url my_url ...`\n(where `...` denotes a command and its arguments).\n\n### Time-stamps diagnostic and repairing\n\n`lean` uses timestamps to decide whether an olean file should be\nrecompiled. You can use:\n```\nleanproject check\n```\nto check that every olean from the core library and mathlib is more\nrecent than its source. In case there is some issue, `leanproject` will\npropose to reset timestamps. Of course doing so is a good idea only if\nyou are sure you didn't want to modify one of those lean files.\n\n## Contributing\n\nPull requests are welcome. The heaving lifting is done in\n`mathlibtools/lib.py` (which you can also use as a library for other\npython programs that want to manipulate Lean projects). Command line\nparsing is done in `mathlibtools/leanproject.py`, using the \n[click library](https://click.palletsprojects.com/en/7.x/).\n\nLocal testing is done using \n[pytest](https://docs.pytest.org/en/latest/) and \n[tox](https://tox.readthedocs.io/en/latest/). You'll need to have python\nversions 3.5 to 3.8 at hand, which probably means you want to\nuse [pyenv](https://github.com/pyenv/pyenv). You'll also need\n[mypy](https://mypy.readthedocs.io/en/latest/index.html) for static\nanalysis. Please do not add code without type annotations.\n\nTests in `tests/test_functional.py` are end-to-end tests that actually\ndownload things from the internet and write on disk (in temporary\nfolders). They are pretty slow. Other test files are meant for unit tests.\nDon't hesitate to add tests!\n\n## Troubleshooting\n\nIf `leanproject` ends with a mysterious error message, you can run it \nusing the `--debug` flag, e.g. `leanproject --debug new my_project`. \nIt will then probably output a python trace that you'll be able to paste\nin a GitHub issue or on [Zulip](https://leanprover.zulipchat.com/).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/leanprover-community/mathlib-tools", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "mathlibtools", "package_url": "https://pypi.org/project/mathlibtools/", "platform": "", "project_url": "https://pypi.org/project/mathlibtools/", "project_urls": {"Homepage": "https://github.com/leanprover-community/mathlib-tools"}, "release_url": "https://pypi.org/project/mathlibtools/0.0.5/", "requires_dist": ["toml (>=0.10.0)", "PyGithub", "certifi", "gitpython (>=2.1.11)", "requests", "Click", "tqdm", "paramiko (>=2.7.0)", "networkx", "pydot"], "requires_python": ">=3.5", "summary": "Lean prover mathlib supporting tools.", "version": "0.0.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>mathlib-tools</h1>\n<p><img alt=\"Test on Linux\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ede4b756f3f60d7f1e66fb793948c342a1e06eb8/68747470733a2f2f6769746875622e636f6d2f6c65616e70726f7665722d636f6d6d756e6974792f6d6174686c69622d746f6f6c732f776f726b666c6f77732f546573742532306f6e2532304c696e75782f62616467652e737667\">\n<img alt=\"Test on MacOS\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a1f927d02bbf9a4a2fd889e60d1a57232568742a/68747470733a2f2f6769746875622e636f6d2f6c65616e70726f7665722d636f6d6d756e6974792f6d6174686c69622d746f6f6c732f776f726b666c6f77732f546573742532306f6e2532304d61634f532f62616467652e737667\">\n<img alt=\"Test on Windows\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/89058d43397f7cb96fb748c3eb174a47594d7cdd/68747470733a2f2f6769746875622e636f6d2f6c65616e70726f7665722d636f6d6d756e6974792f6d6174686c69622d746f6f6c732f776f726b666c6f77732f546573742532306f6e25323057696e646f77732f62616467652e737667\"></p>\n<p>This package contains <code>leanproject</code>, a supporting tool for <a href=\"https://leanprover-community.github.io/\" rel=\"nofollow\">Lean mathlib</a>.</p>\n<h2>Installation</h2>\n<p>Those tools use python3, at least python 3.5, which is the oldest\nversion of python supported by the python foundation. They can be\ninstalled using <a href=\"https://pypi.org/project/mathlibtools/\" rel=\"nofollow\">pip</a>. The basic\ninstall command is thus:</p>\n<pre><code>pip install mathlibtools\n</code></pre>\n<p>Depending on your setup you may need to preface this command with\n<code>sudo</code>, and <code>pip</code> may be called <code>pip3</code> to distinguish it from its\ndeprecated python2 version. For instance on Debian or Ubuntu, you can\ninstall <code>pip</code> using <code>sudo apt install python3-pip</code> and then run <code>sudo pip3 install mathlibtools</code> to install mathlib tools system-wide.\nIf you want to use the latest development version, you can clone this\nrepository, go to the repository folder, and run <code>pip install .</code>.</p>\n<p>You also need to have <a href=\"https://github.com/Kha/elan\" rel=\"nofollow\">elan</a> already\ninstalled.</p>\n<p>If you are using NixOS, you can also install mathlib tools using the bundled <code>default.nix</code> file:</p>\n<pre><code>nix-env -if https://github.com/leanprover-community/mathlib-tools/archive/master.tar.gz\n</code></pre>\n<h2>Basic usage</h2>\n<p>Everything is done using the <code>leanproject</code> command-line tool. You can\nuse <code>leanproject --help</code> to get the list of available commands and\noptions.</p>\n<h3>Getting an existing Lean project</h3>\n<p>The command to fetch an existing project from GitHub and make sure it\nincludes a copy of mathlib ready to go is <code>leanproject get name</code> where\nname is either a git url, such as <code>https://github.com/leanprover-community/tutorials.git</code>\nor <code>git@github.com:leanprover-community/tutorials.git</code>, or a GitHub project\nidentifier such as <code>leanprover-community/tutorials</code>. The organization\nname defaults to <code>leanprover-community</code> so the simplest way get the tutorials\nproject is to run:</p>\n<pre><code>leanproject get tutorials\n</code></pre>\n<p>You can specify a git branch name <code>my_branch</code> by appending\n<code>:my_branch</code> at the end of the specified name (without space).\nYou can also specify a target directory name as a second argument to the\ncommand.</p>\n<h3>Creating a new project</h3>\n<p>You can create a project in a new folder <code>my_project</code> by running:</p>\n<pre><code>leanproject new my_project\n</code></pre>\n<p>If you omit the argument, the project will be created directly inside\nthe current folder. This new project will be using the latest version of\nLean compatible with mathlib, and include a pre-built mathlib.</p>\n<h3>Building a project</h3>\n<p>Only mathlib itself comes with pre-built olean files. In order to build\noleans in a project (which is needed for every non-trivial project in\norder to get decent interactive Lean speed), you can use:</p>\n<pre><code>leanproject build\n</code></pre>\n<h3>Getting mathlib oleans</h3>\n<p>In an existing project depending on mathlib (or in mathlib itself), you\ncan run:</p>\n<pre><code>leanproject get-mathlib-cache\n</code></pre>\n<p>to download a compiled mathlib at the commit currently specified in the\nproject <code>leanpkg.toml</code> (see the next section if you want to update this\ncommit and get the latest mathlib).</p>\n<h3>Upgrading mathlib</h3>\n<p>In an existing project depending on mathlib, you can upgrade to the\nlatest mathlib version by running:</p>\n<pre><code>leanproject upgrade-mathlib\n</code></pre>\n<p>This can be abbreviated to <code>leanproject up</code>.\nBy default, this will update the version of Lean used by this project to\nmatch the latest version compatible with mathlib. You can forbid such an\nupgrade by using <code>leanproject --no-lean-upgrade upgrade-mathlib</code>.</p>\n<h2>Advanced usage</h2>\n<h3>Global mathlib install</h3>\n<p>If you want to use mathlib outside of a Lean project, you can run:</p>\n<pre><code>leanproject global-install\n</code></pre>\n<p>This will put a pre-compiled mathlib inside <code>$HOME/.lean</code>, the user-wide\nLean project whose dependencies can be used by lean files outside\nprojects. You can upgrade this project using:</p>\n<pre><code>leanproject global-upgrade\n</code></pre>\n<h3>Adding mathlib to an existing project</h3>\n<p>If you already have a Lean project but it doesn't use mathlib yet, you\ncan go to the project folder and run:</p>\n<pre><code>leanproject add-mathlib\n</code></pre>\n<p>By default, this will update the version of Lean used by this project to\nmatch the latest version compatible with mathlib. You can forbid such an\nupgrade by using <code>leanproject --no-lean-upgrade add-mathlib</code>.</p>\n<h3>Project olean cache</h3>\n<p>In any Lean project, it can be useful to store and retrieve olean files,\nespecially if the project has several git branches. Storing oleans is\ndone by:</p>\n<pre><code>leanproject mk-cache\n</code></pre>\n<p>while retrieving them is done by:</p>\n<pre><code>leanproject get-cache\n</code></pre>\n<p>One should note that, although olean files are indeed the primary target\nhere, these commands actually store everything from the\n<code>src</code> and <code>test</code> folders of the current project.</p>\n<p>If the project is mathlib itself, the caches will be stored in\n<code>$HOME/.mathlib/</code>. Otherwise, they will be stored in a folder <code>_cache</code> inside\nthe project top-level folder. They are named after the corresponding git\ncommit hash.</p>\n<p>In general, using these commands in a dirty git repository (<em>ie</em> a\nrepository whose working copy contains uncommitted changes) is a bad\nidea. You can do it anyway by running <code>leanproject mk-cache --force</code> or\n<code>leanproject get-cache --force</code> respectively.</p>\n<p>The <code>--force</code> option will also overwrite existing cache for the current\ngit revision.</p>\n<p>When using <code>get-cache</code> inside the mathlib project, the local cache in\n<code>$HOME/.mathlib/</code> will be searched first, before trying to download it.\nYou can force download by running\n<code>leanproject --force-download get-cache</code>. This <code>--force-download</code> option\ncan also be used with the <code>upgrade-mathlib</code> command.</p>\n<h3>Import graphs</h3>\n<p>If you want to generate a graph file showing your project import\nstructure, you can run:</p>\n<pre><code>leanproject import-graph my_graph_file_name.suffix\n</code></pre>\n<p>where the suffix will determine the output format. It must be either\n<code>dot</code> or <code>graphml</code> or <code>gexf</code>, (or <code>pdf</code>, <code>svg</code> or <code>png</code> if\n<a href=\"https://www.graphviz.org/\" rel=\"nofollow\">graphviz</a> is installed).\nIf you want to restrict the graph to files leading to a certain file\n<code>my_subproject/my_file.lean</code> then you can run:</p>\n<pre><code>leanproject import-graph --to my_subproject.my_file my_graph_file_name.suffix\n</code></pre>\n<p>Dually, if you want to see all files using <code>my_subproject/my_file.lean</code>\nthen you can run:</p>\n<pre><code>leanproject import-graph --from my_subproject.my_file my_graph_file_name.suffix\n</code></pre>\n<p>Combining <code>--to</code> and <code>--from</code> is possible.</p>\n<h3>Git hooks</h3>\n<p>If you want leanproject to fetch olean caches after each <code>git checkout</code>,\nand make olean caches after each <code>git commmit</code> in the current project,\nyou can run:</p>\n<pre><code>leanproject hooks\n</code></pre>\n<p>Beware this will overwrite any <code>post-checkout</code> or <code>post-commit</code> file you\nmight have in your project <code>.git/hooks</code>.</p>\n<h3>Cache download url handling</h3>\n<p>By default, leanproject will try to find mathlib olean files hosted on an\nAzure server. You permanently override the base url it uses by running:</p>\n<pre><code>leanproject set-url my_url\n</code></pre>\n<p>so that leanproject will look for caches at\n<code>my_url/relevant_git_hash.tar.gz</code>. You can override this base url\nfor one invocation using <code>leanprover --from-url my_url ...</code>\n(where <code>...</code> denotes a command and its arguments).</p>\n<h3>Time-stamps diagnostic and repairing</h3>\n<p><code>lean</code> uses timestamps to decide whether an olean file should be\nrecompiled. You can use:</p>\n<pre><code>leanproject check\n</code></pre>\n<p>to check that every olean from the core library and mathlib is more\nrecent than its source. In case there is some issue, <code>leanproject</code> will\npropose to reset timestamps. Of course doing so is a good idea only if\nyou are sure you didn't want to modify one of those lean files.</p>\n<h2>Contributing</h2>\n<p>Pull requests are welcome. The heaving lifting is done in\n<code>mathlibtools/lib.py</code> (which you can also use as a library for other\npython programs that want to manipulate Lean projects). Command line\nparsing is done in <code>mathlibtools/leanproject.py</code>, using the\n<a href=\"https://click.palletsprojects.com/en/7.x/\" rel=\"nofollow\">click library</a>.</p>\n<p>Local testing is done using\n<a href=\"https://docs.pytest.org/en/latest/\" rel=\"nofollow\">pytest</a> and\n<a href=\"https://tox.readthedocs.io/en/latest/\" rel=\"nofollow\">tox</a>. You'll need to have python\nversions 3.5 to 3.8 at hand, which probably means you want to\nuse <a href=\"https://github.com/pyenv/pyenv\" rel=\"nofollow\">pyenv</a>. You'll also need\n<a href=\"https://mypy.readthedocs.io/en/latest/index.html\" rel=\"nofollow\">mypy</a> for static\nanalysis. Please do not add code without type annotations.</p>\n<p>Tests in <code>tests/test_functional.py</code> are end-to-end tests that actually\ndownload things from the internet and write on disk (in temporary\nfolders). They are pretty slow. Other test files are meant for unit tests.\nDon't hesitate to add tests!</p>\n<h2>Troubleshooting</h2>\n<p>If <code>leanproject</code> ends with a mysterious error message, you can run it\nusing the <code>--debug</code> flag, e.g. <code>leanproject --debug new my_project</code>.\nIt will then probably output a python trace that you'll be able to paste\nin a GitHub issue or on <a href=\"https://leanprover.zulipchat.com/\" rel=\"nofollow\">Zulip</a>.</p>\n\n          </div>"}, "last_serial": 6967530, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "5572b7d7f895e824b249dd31bd7957e9", "sha256": "5ebfddc8a13db826ec57b22c207ee50d60a04b37dffdac119850b01dee2254ea"}, "downloads": -1, "filename": "mathlibtools-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5572b7d7f895e824b249dd31bd7957e9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 11637, "upload_time": "2019-12-28T18:01:49", "upload_time_iso_8601": "2019-12-28T18:01:49.071398Z", "url": "https://files.pythonhosted.org/packages/37/c3/8dd9b21fe930bf82b22c23cd67db271e95440541bec36114fa2bd095d4e3/mathlibtools-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b48e3f780bad7a7966c2a80a28ecc4c9", "sha256": "8d58ae47dc5b650c8b60bef89952fe892f4f388c5c48f66a48af027a0cdafcc5"}, "downloads": -1, "filename": "mathlibtools-0.0.1.tar.gz", "has_sig": false, "md5_digest": "b48e3f780bad7a7966c2a80a28ecc4c9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 4904, "upload_time": "2019-12-28T18:01:51", "upload_time_iso_8601": "2019-12-28T18:01:51.219989Z", "url": "https://files.pythonhosted.org/packages/8a/9f/30e087178ea67c9c00d9020b4951b227463f3eb7002c25f5296ee90bea60/mathlibtools-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "94863847aea345ebfd3cd38572f7c7db", "sha256": "fa4bdae205ba6d743c828351cc92f20f50f3cf7e3e8d937cf8647c71c53e5490"}, "downloads": -1, "filename": "mathlibtools-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "94863847aea345ebfd3cd38572f7c7db", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 11659, "upload_time": "2019-12-28T19:24:40", "upload_time_iso_8601": "2019-12-28T19:24:40.245380Z", "url": "https://files.pythonhosted.org/packages/1d/ea/3803d38b51a094d6d034326aafc52dff2e201c6fc1357f7913586c0ad643/mathlibtools-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "32d714a3f46194526aff4dfe7ffc004d", "sha256": "96ab2af86c744a5ef0e90ccf503dd9ccac0686f464dae5700f98d2dc9ff04087"}, "downloads": -1, "filename": "mathlibtools-0.0.2.tar.gz", "has_sig": false, "md5_digest": "32d714a3f46194526aff4dfe7ffc004d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 4932, "upload_time": "2019-12-28T19:24:41", "upload_time_iso_8601": "2019-12-28T19:24:41.821251Z", "url": "https://files.pythonhosted.org/packages/91/da/d6c186621f6dd8a2f8b426197f5f1081fa20ddd3ed9c2a2d491f3a0c6217/mathlibtools-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "78150e4281854aeaaa8cf42a9e24f76d", "sha256": "bb0e7edb8f7e3a5d021f25b410860a2d9486a800dc4399c5436a6b6cdfa12ad8"}, "downloads": -1, "filename": "mathlibtools-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "78150e4281854aeaaa8cf42a9e24f76d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 20602, "upload_time": "2020-03-11T11:38:43", "upload_time_iso_8601": "2020-03-11T11:38:43.713364Z", "url": "https://files.pythonhosted.org/packages/d7/b4/0a4b42207550e341afb1c86f1ad643b074a948299659035fe52ef511046f/mathlibtools-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dc4304664bd0599b91c5b7a7bea4e67d", "sha256": "45379b2a6c96b9a8e162ff315663cbc9f62ba7b261e8403bfb624667d0040cf7"}, "downloads": -1, "filename": "mathlibtools-0.0.3.tar.gz", "has_sig": false, "md5_digest": "dc4304664bd0599b91c5b7a7bea4e67d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 16877, "upload_time": "2020-03-11T11:38:45", "upload_time_iso_8601": "2020-03-11T11:38:45.223943Z", "url": "https://files.pythonhosted.org/packages/b2/66/fbec9dc64aad3606eb07e941b8845ceb12b703246ef951f73925b2618a7c/mathlibtools-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "8da8461ff98fcb5b79afbeae6d8a5546", "sha256": "71d322c4e2417f7b4e9ae5f3dd126a38e78fc1ab951b5d8d5adc3d5a23d49a16"}, "downloads": -1, "filename": "mathlibtools-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "8da8461ff98fcb5b79afbeae6d8a5546", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 19995, "upload_time": "2020-03-24T10:23:20", "upload_time_iso_8601": "2020-03-24T10:23:20.627221Z", "url": "https://files.pythonhosted.org/packages/8c/37/6dcf5dd973e6ec32fa78c8a1bb6598ea9676dde6276227339f2f204aaa3f/mathlibtools-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a9754b302c8db9e7d904d548594f7994", "sha256": "3cffbde277915990d9d2432702fca5f66f4f7fff6152e08c0d606420a83ff528"}, "downloads": -1, "filename": "mathlibtools-0.0.4.tar.gz", "has_sig": false, "md5_digest": "a9754b302c8db9e7d904d548594f7994", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 17514, "upload_time": "2020-03-24T10:23:22", "upload_time_iso_8601": "2020-03-24T10:23:22.070063Z", "url": "https://files.pythonhosted.org/packages/ea/fe/cc04372d172be0fca40eac28f79e2ab3487c5fd8c8fc27b4a31f1c5b2558/mathlibtools-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "fa32a70701adebba0bba46a3820c80ef", "sha256": "975bc369db75075d237a26fea64120660e3f9385c6beacab415f963440a60eaf"}, "downloads": -1, "filename": "mathlibtools-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "fa32a70701adebba0bba46a3820c80ef", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 21876, "upload_time": "2020-04-07T08:25:34", "upload_time_iso_8601": "2020-04-07T08:25:34.945744Z", "url": "https://files.pythonhosted.org/packages/1b/8e/2d0b155ede38135ebde1ade5dffbe3588613a1012e8b7bd6f1c09079900c/mathlibtools-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e081bea0d173983de3c62f2ae026c473", "sha256": "91a562519eabf3e0e0affd8326381308989df42fed498d91b2b761e3c8c7d210"}, "downloads": -1, "filename": "mathlibtools-0.0.5.tar.gz", "has_sig": false, "md5_digest": "e081bea0d173983de3c62f2ae026c473", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 19653, "upload_time": "2020-04-07T08:25:36", "upload_time_iso_8601": "2020-04-07T08:25:36.290634Z", "url": "https://files.pythonhosted.org/packages/08/16/4a02cba11cd209ef66c04e8487cd94acf3ed201e923fbe6166f96d0ef038/mathlibtools-0.0.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "fa32a70701adebba0bba46a3820c80ef", "sha256": "975bc369db75075d237a26fea64120660e3f9385c6beacab415f963440a60eaf"}, "downloads": -1, "filename": "mathlibtools-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "fa32a70701adebba0bba46a3820c80ef", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 21876, "upload_time": "2020-04-07T08:25:34", "upload_time_iso_8601": "2020-04-07T08:25:34.945744Z", "url": "https://files.pythonhosted.org/packages/1b/8e/2d0b155ede38135ebde1ade5dffbe3588613a1012e8b7bd6f1c09079900c/mathlibtools-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e081bea0d173983de3c62f2ae026c473", "sha256": "91a562519eabf3e0e0affd8326381308989df42fed498d91b2b761e3c8c7d210"}, "downloads": -1, "filename": "mathlibtools-0.0.5.tar.gz", "has_sig": false, "md5_digest": "e081bea0d173983de3c62f2ae026c473", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 19653, "upload_time": "2020-04-07T08:25:36", "upload_time_iso_8601": "2020-04-07T08:25:36.290634Z", "url": "https://files.pythonhosted.org/packages/08/16/4a02cba11cd209ef66c04e8487cd94acf3ed201e923fbe6166f96d0ef038/mathlibtools-0.0.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:57:22 2020"}