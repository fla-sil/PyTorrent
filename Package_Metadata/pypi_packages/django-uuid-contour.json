{"info": {"author": "Jorge Perez", "author_email": "japrogramer@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "Django UUID Contour Field by japrogramer\n\nGeneral commands affected by apps.py\nuse label for ./manage migrate and other management commands other than test\n    label = 'UUIDContour'\nuse name for running tests\n    name = 'uuid_contour'\n\nUse cases:\nThis package provides 4 variations of uuid, (1,3,4,5)\nThe Default is 4\n\nthe immutable option equall to True is equivalent of this options being set\n    kwargs['unique'] = True\n    kwargs['blank'] = True\n    kwargs['editable'] = False\n\nTo use the uuid1 define a field in your model like this\nfrom uuid_contour.fields import UUIDContour\nclass UUID1Contour(models.Model):\n    username = models.CharField(max_length=40)\n    uu = UUIDContour(standard=1)\nTo use it\n    tt = uuid.uuid1([node[,clock_seq]])\n    # The argument passed to the UUIDContour field can be either a uuid.UUID\n    # or a str representation of a uuid with or without hyphens\n    germane = UUID3Contour._default_manager.create(username='something', uu=tt)\n\nYou can use bytes to define a UUIDContour\n    tt = b'\\x81[\\xb5~\\xbc\\xa9G6\\x80WvIU\\x92\\xbc\\x1e'\n    germane = UUID1Contour._default_manager.create(username='uuid4',\n                uu=tt\n                )\nThis standard can also take two additional arguments related to uuid1\n    uu = UUIDContour(standard=1, node=None, clock_seq=None)\n\nTo use the uuid3,5 provide standard 3 or 5\nclass UUID5Contour(models.Model):\n    username = models.CharField(max_length=40)\n    uu = UUIDContour(standard=5)\n\nTo use it\n    username = 'some value'\n    tt = uuid.uuid5(uuid.NAMESPACE_DNS, username)\n    germane = UUID1Contour._default_manager.create(username=username,\n                uu=tt\n                )\n\nTo filter by a uuid, you can use a uuid.UUID instance or string version of the\nuuid with or without hyphens\nclass UUID4Contour(models.Model):\n    username = models.CharField(max_length=40)\n    uu = UUIDContour(immutable=True)\n\nAnd to query by a uuid\n    tt = uuid.uuid4()\n    o_uuid = tt.hex\n    pertinent = UUID4Contour._default_manager.get(uu__exact=o_uuid)\n\nVerifying uuids: if you are allowing a user to set a uuid field, uuid contour\n    provides to regex to match hypenated and unhyohenated uuid str they are ph\n    and pu respectively, they can be crafted into your forms validation", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/japrogramer/django-uuid-contour", "keywords": null, "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "django-uuid-contour", "package_url": "https://pypi.org/project/django-uuid-contour/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-uuid-contour/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/japrogramer/django-uuid-contour"}, "release_url": "https://pypi.org/project/django-uuid-contour/0.2.1/", "requires_dist": null, "requires_python": null, "summary": "A Django app for uuid fields", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            Django UUID Contour Field by japrogramer<br><br>General commands affected by apps.py<br>use label for ./manage migrate and other management commands other than test<br>    label = 'UUIDContour'<br>use name for running tests<br>    name = 'uuid_contour'<br><br>Use cases:<br>This package provides 4 variations of uuid, (1,3,4,5)<br>The Default is 4<br><br>the immutable option equall to True is equivalent of this options being set<br>    kwargs['unique'] = True<br>    kwargs['blank'] = True<br>    kwargs['editable'] = False<br><br>To use the uuid1 define a field in your model like this<br>from uuid_contour.fields import UUIDContour<br>class UUID1Contour(models.Model):<br>    username = models.CharField(max_length=40)<br>    uu = UUIDContour(standard=1)<br>To use it<br>    tt = uuid.uuid1([node[,clock_seq]])<br>    # The argument passed to the UUIDContour field can be either a uuid.UUID<br>    # or a str representation of a uuid with or without hyphens<br>    germane = UUID3Contour._default_manager.create(username='something', uu=tt)<br><br>You can use bytes to define a UUIDContour<br>    tt = b'\\x81[\\xb5~\\xbc\\xa9G6\\x80WvIU\\x92\\xbc\\x1e'<br>    germane = UUID1Contour._default_manager.create(username='uuid4',<br>                uu=tt<br>                )<br>This standard can also take two additional arguments related to uuid1<br>    uu = UUIDContour(standard=1, node=None, clock_seq=None)<br><br>To use the uuid3,5 provide standard 3 or 5<br>class UUID5Contour(models.Model):<br>    username = models.CharField(max_length=40)<br>    uu = UUIDContour(standard=5)<br><br>To use it<br>    username = 'some value'<br>    tt = uuid.uuid5(uuid.NAMESPACE_DNS, username)<br>    germane = UUID1Contour._default_manager.create(username=username,<br>                uu=tt<br>                )<br><br>To filter by a uuid, you can use a uuid.UUID instance or string version of the<br>uuid with or without hyphens<br>class UUID4Contour(models.Model):<br>    username = models.CharField(max_length=40)<br>    uu = UUIDContour(immutable=True)<br><br>And to query by a uuid<br>    tt = uuid.uuid4()<br>    o_uuid = tt.hex<br>    pertinent = UUID4Contour._default_manager.get(uu__exact=o_uuid)<br><br>Verifying uuids: if you are allowing a user to set a uuid field, uuid contour<br>    provides to regex to match hypenated and unhyohenated uuid str they are ph<br>    and pu respectively, they can be crafted into your forms validation\n          </div>"}, "last_serial": 1162189, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "258eac9f72e548081173a40b2e0f63b8", "sha256": "363de80bc15b3a2ad044d92e82616993525e12891c3fa35085a5d3fd29c4df79"}, "downloads": -1, "filename": "django-uuid-contour-0.1.1.tar.gz", "has_sig": false, "md5_digest": "258eac9f72e548081173a40b2e0f63b8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4608, "upload_time": "2014-05-06T01:37:43", "upload_time_iso_8601": "2014-05-06T01:37:43.283441Z", "url": "https://files.pythonhosted.org/packages/aa/d2/1f2518e5d4000a77fa077d509c7d462b44f98b8ee1a8f4958d9e3cfbb25b/django-uuid-contour-0.1.1.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "c4b9b1cfb46e9fc2e37933d23a6c012f", "sha256": "aca97f5492c163d17df28adc8e0f099c87c66f45ba40659870e7e1465d371417"}, "downloads": -1, "filename": "django-uuid-contour-0.2.1.tar.gz", "has_sig": false, "md5_digest": "c4b9b1cfb46e9fc2e37933d23a6c012f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4603, "upload_time": "2014-07-18T20:46:35", "upload_time_iso_8601": "2014-07-18T20:46:35.146935Z", "url": "https://files.pythonhosted.org/packages/4b/12/b4874cd3c17245f999e8e9585282ccf980c26c77bcd2be78904dd856d734/django-uuid-contour-0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c4b9b1cfb46e9fc2e37933d23a6c012f", "sha256": "aca97f5492c163d17df28adc8e0f099c87c66f45ba40659870e7e1465d371417"}, "downloads": -1, "filename": "django-uuid-contour-0.2.1.tar.gz", "has_sig": false, "md5_digest": "c4b9b1cfb46e9fc2e37933d23a6c012f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4603, "upload_time": "2014-07-18T20:46:35", "upload_time_iso_8601": "2014-07-18T20:46:35.146935Z", "url": "https://files.pythonhosted.org/packages/4b/12/b4874cd3c17245f999e8e9585282ccf980c26c77bcd2be78904dd856d734/django-uuid-contour-0.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:06 2020"}