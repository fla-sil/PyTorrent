{"info": {"author": "Cameron Simpson", "author_email": "cs@cskk.id.au", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "*Latest release 20200318*:\nBaseCommand.run: make argv optional, get additional usage keywords from self.USAGE_KEYWORDS.\n@BaseCommand.add_usage_to_docstring: honour cls.USAGE_KEYWORDS.\nBaseCommand: do not require GETOPT_SPEC for commands with no defined options.\nBaseCommand.run: call cs.logutils.setup_logging.\n\nConvenience functions for working with the Cmd module\nand other command line related stuff.\n\n## Class `BaseCommand`\n\nA base class for handling nestable command lines.\n\nThis class provides the basic parse and dispatch mechanisms\nfor command lines.\nTo implement a command line\none instantiates a subclass of BaseCommand:\n\n    class MyCommand(BaseCommand):\n      GETOPT_SPEC = 'ab:c'\n      USAGE_FORMAT = r\"\"\"Usage: {cmd} [-a] [-b bvalue] [-c] [--] arguments...\n        -a    Do it all.\n        -b    But using bvalue.\n        -c    The 'c' option!\n      \"\"\"\n    ...\n    the_cmd = MyCommand()\n\nRunning a command is done by:\n\n    the_cmd.run(argv)\n\nThe subclass is customised by overriding the following methods:\n* `apply_defaults(options)`:\n  prepare the initial state of `options`\n  before any command line options are applied\n* `apply_opts(options,opts)`:\n  apply the `opts` to `options`.\n  `opts` is an option value mapping\n  as returned by `getopot.getopt`.\n* `cmd_`*subcmd*`(argv,options)`:\n  if the command line options are followed by an argument\n  whose value is *subcmd*,\n  then method `cmd_`*subcmd*`(argv,options)`\n  will be called where `argv` contains the command line arguments\n  after *subcmd*.\n* `main(argv,options)`:\n  if there are no command line aguments after the options\n  or the first argument does not have a corresponding\n  `cmd_`*subcmd* method\n  then method `main(argv,options)`\n  will be called where `argv` contains the command line arguments.\n* `run_context(argv,options,cmd)`:\n  a context manager to provide setup or teardown actions\n  to occur before and after the command implementation respectively.\n  If the implementation is a `cmd_`*subcmd* method\n  then this is called with `cmd=`*subcmd*;\n  if the implementation is `main`\n  then this is called with `cmd=None`.\n\nTo aid recursive use\nit is intended that all the per command state\nis contained in the `options` object\nand therefore that in typical use\nall of `apply_opts`, `cmd_`*subcmd*, `main` and `run_context`\nshould be static methods making no reference to `self`.\n\nEditorial: why not arparse?\nPrimarily because when incorrectly invoked\nan argparse command line prints the help/usage messgae\nand aborts the whole programme with `SystemExit`.\n\n## Function `docmd(dofunc)`\n\nDecorator for Cmd subclass methods\nto supply some basic quality of service.\n\nThis decorator:\n- wraps the function call in a `cs.pfx.Pfx` for context\n- intercepts `getopt.GetoptError`s, issues a `warning`\n  and runs `self.do_help` with the method name,\n  then returns `None`\n- intercepts other `Exception`s,\n  issues an `exception` log message\n  and returns `None`\n\nThe intended use is to decorate `cmd.Cmd` `do_`* methods:\n\n    from cmd import Cmd\n    class MyCmd(Cmd):\n      @docmd\n      def do_something(...):\n        ... do something ...\n\n\n\n# Release Log\n\n*Release 20200318*:\nBaseCommand.run: make argv optional, get additional usage keywords from self.USAGE_KEYWORDS.\n@BaseCommand.add_usage_to_docstring: honour cls.USAGE_KEYWORDS.\nBaseCommand: do not require GETOPT_SPEC for commands with no defined options.\nBaseCommand.run: call cs.logutils.setup_logging.\n\n*Release 20200229*:\nImprove subcommand selection logic, replace StackableValues with stackattrs, drop `cmd` from arguments passed to main/cmd_* methods (present in `options`).\n\n*Release 20200210*:\nNew BaseCommand.add_usage_to_docstring class method to be called after class setup, to append the usage message to the class docstring.\nBaseCommand.run: remove spurious Pfx(cmd), as logutils does this for us already.\n\n*Release 20190729*:\nBaseCommand: support for a USAGE_FORMAT usage message format string and a getopt_error_handler method.\n\n*Release 20190619.1*:\nAnother niggling docstring formatting fix.\n\n*Release 20190619*:\nMinor documentation updates.\n\n*Release 20190617.2*:\nLint.\n\n*Release 20190617.1*:\nInitial release with @docmd decorator and alpha quality BaseCommand command line assistance class.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/cameron_simpson/css/commits/all", "keywords": "python2,python3", "license": "GNU General Public License v3 or later (GPLv3+)", "maintainer": "", "maintainer_email": "", "name": "cs.cmdutils", "package_url": "https://pypi.org/project/cs.cmdutils/", "platform": "", "project_url": "https://pypi.org/project/cs.cmdutils/", "project_urls": {"Homepage": "https://bitbucket.org/cameron_simpson/css/commits/all"}, "release_url": "https://pypi.org/project/cs.cmdutils/20200318/", "requires_dist": null, "requires_python": "", "summary": "convenience functions for working with the Cmd module and other command line related stuff", "version": "20200318", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><em>Latest release 20200318</em>:\nBaseCommand.run: make argv optional, get additional usage keywords from self.USAGE_KEYWORDS.\n@BaseCommand.add_usage_to_docstring: honour cls.USAGE_KEYWORDS.\nBaseCommand: do not require GETOPT_SPEC for commands with no defined options.\nBaseCommand.run: call cs.logutils.setup_logging.</p>\n<p>Convenience functions for working with the Cmd module\nand other command line related stuff.</p>\n<h2>Class <code>BaseCommand</code></h2>\n<p>A base class for handling nestable command lines.</p>\n<p>This class provides the basic parse and dispatch mechanisms\nfor command lines.\nTo implement a command line\none instantiates a subclass of BaseCommand:</p>\n<pre><code>class MyCommand(BaseCommand):\n  GETOPT_SPEC = 'ab:c'\n  USAGE_FORMAT = r\"\"\"Usage: {cmd} [-a] [-b bvalue] [-c] [--] arguments...\n    -a    Do it all.\n    -b    But using bvalue.\n    -c    The 'c' option!\n  \"\"\"\n...\nthe_cmd = MyCommand()\n</code></pre>\n<p>Running a command is done by:</p>\n<pre><code>the_cmd.run(argv)\n</code></pre>\n<p>The subclass is customised by overriding the following methods:</p>\n<ul>\n<li><code>apply_defaults(options)</code>:\nprepare the initial state of <code>options</code>\nbefore any command line options are applied</li>\n<li><code>apply_opts(options,opts)</code>:\napply the <code>opts</code> to <code>options</code>.\n<code>opts</code> is an option value mapping\nas returned by <code>getopot.getopt</code>.</li>\n<li><code>cmd_</code><em>subcmd</em><code>(argv,options)</code>:\nif the command line options are followed by an argument\nwhose value is <em>subcmd</em>,\nthen method <code>cmd_</code><em>subcmd</em><code>(argv,options)</code>\nwill be called where <code>argv</code> contains the command line arguments\nafter <em>subcmd</em>.</li>\n<li><code>main(argv,options)</code>:\nif there are no command line aguments after the options\nor the first argument does not have a corresponding\n<code>cmd_</code><em>subcmd</em> method\nthen method <code>main(argv,options)</code>\nwill be called where <code>argv</code> contains the command line arguments.</li>\n<li><code>run_context(argv,options,cmd)</code>:\na context manager to provide setup or teardown actions\nto occur before and after the command implementation respectively.\nIf the implementation is a <code>cmd_</code><em>subcmd</em> method\nthen this is called with <code>cmd=</code><em>subcmd</em>;\nif the implementation is <code>main</code>\nthen this is called with <code>cmd=None</code>.</li>\n</ul>\n<p>To aid recursive use\nit is intended that all the per command state\nis contained in the <code>options</code> object\nand therefore that in typical use\nall of <code>apply_opts</code>, <code>cmd_</code><em>subcmd</em>, <code>main</code> and <code>run_context</code>\nshould be static methods making no reference to <code>self</code>.</p>\n<p>Editorial: why not arparse?\nPrimarily because when incorrectly invoked\nan argparse command line prints the help/usage messgae\nand aborts the whole programme with <code>SystemExit</code>.</p>\n<h2>Function <code>docmd(dofunc)</code></h2>\n<p>Decorator for Cmd subclass methods\nto supply some basic quality of service.</p>\n<p>This decorator:</p>\n<ul>\n<li>wraps the function call in a <code>cs.pfx.Pfx</code> for context</li>\n<li>intercepts <code>getopt.GetoptError</code>s, issues a <code>warning</code>\nand runs <code>self.do_help</code> with the method name,\nthen returns <code>None</code></li>\n<li>intercepts other <code>Exception</code>s,\nissues an <code>exception</code> log message\nand returns <code>None</code></li>\n</ul>\n<p>The intended use is to decorate <code>cmd.Cmd</code> <code>do_</code>* methods:</p>\n<pre><code>from cmd import Cmd\nclass MyCmd(Cmd):\n  @docmd\n  def do_something(...):\n    ... do something ...\n</code></pre>\n<h1>Release Log</h1>\n<p><em>Release 20200318</em>:\nBaseCommand.run: make argv optional, get additional usage keywords from self.USAGE_KEYWORDS.\n@BaseCommand.add_usage_to_docstring: honour cls.USAGE_KEYWORDS.\nBaseCommand: do not require GETOPT_SPEC for commands with no defined options.\nBaseCommand.run: call cs.logutils.setup_logging.</p>\n<p><em>Release 20200229</em>:\nImprove subcommand selection logic, replace StackableValues with stackattrs, drop <code>cmd</code> from arguments passed to main/cmd_* methods (present in <code>options</code>).</p>\n<p><em>Release 20200210</em>:\nNew BaseCommand.add_usage_to_docstring class method to be called after class setup, to append the usage message to the class docstring.\nBaseCommand.run: remove spurious Pfx(cmd), as logutils does this for us already.</p>\n<p><em>Release 20190729</em>:\nBaseCommand: support for a USAGE_FORMAT usage message format string and a getopt_error_handler method.</p>\n<p><em>Release 20190619.1</em>:\nAnother niggling docstring formatting fix.</p>\n<p><em>Release 20190619</em>:\nMinor documentation updates.</p>\n<p><em>Release 20190617.2</em>:\nLint.</p>\n<p><em>Release 20190617.1</em>:\nInitial release with @docmd decorator and alpha quality BaseCommand command line assistance class.</p>\n\n          </div>"}, "last_serial": 6832025, "releases": {"20190617.2": [{"comment_text": "", "digests": {"md5": "c0946fb581c57a2bc78ed3b0e263935f", "sha256": "2f3e976c71275591d209284374c8db92b2065870f4d8354994a8fee444fac151"}, "downloads": -1, "filename": "cs.cmdutils-20190617.2.tar.gz", "has_sig": false, "md5_digest": "c0946fb581c57a2bc78ed3b0e263935f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4820, "upload_time": "2019-06-17T02:23:59", "upload_time_iso_8601": "2019-06-17T02:23:59.954766Z", "url": "https://files.pythonhosted.org/packages/0c/4b/1e1b56b66e296e8d7311fd75136418bf2d5f24b25795764fa3eed01613f8/cs.cmdutils-20190617.2.tar.gz", "yanked": false}], "20190619": [{"comment_text": "", "digests": {"md5": "26472cb47bf238d811293ad312a392c3", "sha256": "5217cfe769a2ed67a3482453587f6e7af9b6206218040e8f8bc05a9c8a52c422"}, "downloads": -1, "filename": "cs.cmdutils-20190619.tar.gz", "has_sig": false, "md5_digest": "26472cb47bf238d811293ad312a392c3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4875, "upload_time": "2019-06-18T22:35:04", "upload_time_iso_8601": "2019-06-18T22:35:04.711457Z", "url": "https://files.pythonhosted.org/packages/05/85/5356f1808dc1baf4e4e9edf64f02ed485926e3a44573313329b281623ced/cs.cmdutils-20190619.tar.gz", "yanked": false}], "20190619.1": [{"comment_text": "", "digests": {"md5": "bbd044426d5325341c6ce1c7c6aa5f51", "sha256": "74acf65e9c2af4392433b044e318245f4cca11fc487bb776c03b34b0cfadf609"}, "downloads": -1, "filename": "cs.cmdutils-20190619.1.tar.gz", "has_sig": false, "md5_digest": "bbd044426d5325341c6ce1c7c6aa5f51", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4879, "upload_time": "2019-06-18T22:40:20", "upload_time_iso_8601": "2019-06-18T22:40:20.400512Z", "url": "https://files.pythonhosted.org/packages/ae/84/d229a41b5e44c2ca1efb13bb94bd95fb9f756516bc857113abe5937351cc/cs.cmdutils-20190619.1.tar.gz", "yanked": false}], "20190729": [{"comment_text": "", "digests": {"md5": "b023766b580eb5d489e888d4d0e78fae", "sha256": "a05f77c248396ec5f152c4d950b52b77782498ae5f4b85849e50c2fc00d5f27d"}, "downloads": -1, "filename": "cs.cmdutils-20190729.tar.gz", "has_sig": false, "md5_digest": "b023766b580eb5d489e888d4d0e78fae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5626, "upload_time": "2019-07-29T05:05:18", "upload_time_iso_8601": "2019-07-29T05:05:18.698005Z", "url": "https://files.pythonhosted.org/packages/e9/fb/d44898656696d1d0ad6a2f1af51fef8ace330447e97b47a8c646ef91595c/cs.cmdutils-20190729.tar.gz", "yanked": false}], "20200210": [{"comment_text": "", "digests": {"md5": "a71d6a6d556904661dd8e7ae7a3959cc", "sha256": "731a50c6396504347916636804fe1f23819917b66448a4afbdc70b91d3429597"}, "downloads": -1, "filename": "cs.cmdutils-20200210.tar.gz", "has_sig": false, "md5_digest": "a71d6a6d556904661dd8e7ae7a3959cc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6166, "upload_time": "2020-02-10T10:17:51", "upload_time_iso_8601": "2020-02-10T10:17:51.038431Z", "url": "https://files.pythonhosted.org/packages/ad/35/0efe8d3c02594e1ddbb7b3bd344ccd93ffd42b348f9b753fe88812476d15/cs.cmdutils-20200210.tar.gz", "yanked": false}], "20200229": [{"comment_text": "", "digests": {"md5": "0e55ec7729fdf7d36ee4c832054e0e4e", "sha256": "d31cd773bfe1c989ab98b2c6cb114788e2d36d63b0920ce3c97f8143c6b5971b"}, "downloads": -1, "filename": "cs.cmdutils-20200229.tar.gz", "has_sig": false, "md5_digest": "0e55ec7729fdf7d36ee4c832054e0e4e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7141, "upload_time": "2020-02-29T04:53:48", "upload_time_iso_8601": "2020-02-29T04:53:48.954868Z", "url": "https://files.pythonhosted.org/packages/e9/ff/491e2daf1504422830482c2563e7207f4882fc76ab688aaac2e210732ea4/cs.cmdutils-20200229.tar.gz", "yanked": false}], "20200318": [{"comment_text": "", "digests": {"md5": "4599546d184952558cb361a0a729c73a", "sha256": "8378af59548e4aa173abc13b3d30e1503d9befa9ab70e5b87c1bb58421cd1d25"}, "downloads": -1, "filename": "cs.cmdutils-20200318.tar.gz", "has_sig": false, "md5_digest": "4599546d184952558cb361a0a729c73a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7531, "upload_time": "2020-03-17T22:49:25", "upload_time_iso_8601": "2020-03-17T22:49:25.239408Z", "url": "https://files.pythonhosted.org/packages/fc/b0/bdac044cac53c8fb14da911f1bb661eb7cf3faeb061ced1b4e690b685e01/cs.cmdutils-20200318.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4599546d184952558cb361a0a729c73a", "sha256": "8378af59548e4aa173abc13b3d30e1503d9befa9ab70e5b87c1bb58421cd1d25"}, "downloads": -1, "filename": "cs.cmdutils-20200318.tar.gz", "has_sig": false, "md5_digest": "4599546d184952558cb361a0a729c73a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7531, "upload_time": "2020-03-17T22:49:25", "upload_time_iso_8601": "2020-03-17T22:49:25.239408Z", "url": "https://files.pythonhosted.org/packages/fc/b0/bdac044cac53c8fb14da911f1bb661eb7cf3faeb061ced1b4e690b685e01/cs.cmdutils-20200318.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:41:51 2020"}