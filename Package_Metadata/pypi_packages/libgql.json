{"info": {"author": "Bryan Goldstein", "author_email": "brysgo@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Topic :: Software Development :: Libraries"], "description": "# libgql - GraphQL Linked Libraries\n\n## The Problem\n\nHow can I build libraries and modules that operate accross programming\nlanguages and environments?\n\n## The Solution\n\nTo solve this problem with web services, we build APIs that we can use between\nlanguages. Unfortunately, these APIs require us to make HTTP requests.\n\n...or do they?\n\nEnter GraphQL: Protocal Agnostic, that means, we can implement it over a CLI\ninterface and have an incredibly handy way to build cross language bindings\nwithout all the fuss.\n\n## What does it do?\n\nlibgql will define a protocal for doing graphql over CLI and implement as many\nlanguage bindings as we possibly can.\n\n## Usage\n\nI would recommend looking at the tests for usage, since it varies from language\nto language. To consume a module that uses libgql, install the bindings for your\nlanguage:\n\n| javascript | `yarn add libgql`       |\n|------------|-------------------------|\n| python     | `pipenv install libgql` |\n\nThen import the bindings and load the module:\n\n\n### javascript\n```javascript\nimport { loadModule } from \"libgql\"\n\nconst myModule = loadModule(\"./path/to/libgql/module/executable\");\n\nresult = await myModule(graphqlQueryStringHere, optionalVariables);\n```\n\n### python\n\n```python\nfrom \"libgql\" import load_module\n\nmyModule = load_module(\"./path/to/libgql/module/executable\")\n\nresult = myModule(graphqlQueryStringHere, optionalVariables)\n```\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/brysgo/libgql", "keywords": "graphql languagebindings development", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "libgql", "package_url": "https://pypi.org/project/libgql/", "platform": "", "project_url": "https://pypi.org/project/libgql/", "project_urls": {"Homepage": "https://github.com/brysgo/libgql"}, "release_url": "https://pypi.org/project/libgql/0.0.1/", "requires_dist": null, "requires_python": "", "summary": "GraphQL Linked Library bindings for python", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            # libgql - GraphQL Linked Libraries<br><br>## The Problem<br><br>How can I build libraries and modules that operate accross programming<br>languages and environments?<br><br>## The Solution<br><br>To solve this problem with web services, we build APIs that we can use between<br>languages. Unfortunately, these APIs require us to make HTTP requests.<br><br>...or do they?<br><br>Enter GraphQL: Protocal Agnostic, that means, we can implement it over a CLI<br>interface and have an incredibly handy way to build cross language bindings<br>without all the fuss.<br><br>## What does it do?<br><br>libgql will define a protocal for doing graphql over CLI and implement as many<br>language bindings as we possibly can.<br><br>## Usage<br><br>I would recommend looking at the tests for usage, since it varies from language<br>to language. To consume a module that uses libgql, install the bindings for your<br>language:<br><br>| javascript | `yarn add libgql`       |<br>|------------|-------------------------|<br>| python     | `pipenv install libgql` |<br><br>Then import the bindings and load the module:<br><br><br>### javascript<br>```javascript<br>import { loadModule } from \"libgql\"<br><br>const myModule = loadModule(\"./path/to/libgql/module/executable\");<br><br>result = await myModule(graphqlQueryStringHere, optionalVariables);<br>```<br><br>### python<br><br>```python<br>from \"libgql\" import load_module<br><br>myModule = load_module(\"./path/to/libgql/module/executable\")<br><br>result = myModule(graphqlQueryStringHere, optionalVariables)<br>```<br>\n          </div>"}, "last_serial": 3384292, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "198e84231722927e261d774a312d52ca", "sha256": "f643f3472571250958df74389a3548b6d1d5870140fba7c25a3fbbfc112cff9e"}, "downloads": -1, "filename": "libgql-0.0.1.tar.gz", "has_sig": false, "md5_digest": "198e84231722927e261d774a312d52ca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3513, "upload_time": "2017-12-03T06:54:59", "upload_time_iso_8601": "2017-12-03T06:54:59.811696Z", "url": "https://files.pythonhosted.org/packages/78/da/a02b1988cbefa46e0ca97e02c3150e26b19e6c8071836f41d47cd5b11699/libgql-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "198e84231722927e261d774a312d52ca", "sha256": "f643f3472571250958df74389a3548b6d1d5870140fba7c25a3fbbfc112cff9e"}, "downloads": -1, "filename": "libgql-0.0.1.tar.gz", "has_sig": false, "md5_digest": "198e84231722927e261d774a312d52ca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3513, "upload_time": "2017-12-03T06:54:59", "upload_time_iso_8601": "2017-12-03T06:54:59.811696Z", "url": "https://files.pythonhosted.org/packages/78/da/a02b1988cbefa46e0ca97e02c3150e26b19e6c8071836f41d47cd5b11699/libgql-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:46:35 2020"}