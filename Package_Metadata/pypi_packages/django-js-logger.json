{"info": {"author": "Sondre Lilleb\u00f8 Gundersen", "author_email": "sondrelg@live.no", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Django", "Framework :: Django :: 2.2", "Framework :: Django :: 3.0", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Documentation", "Topic :: Software Development", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Application Frameworks", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Software Development :: Testing", "Topic :: Software Development :: Testing :: Unit"], "description": "========================\nDjango Javascript Logger\n========================\n\n.. image:: https://img.shields.io/pypi/v/django-js-logger.svg\n    :target: https://pypi.org/project/django-js-logger/\n\n.. image:: https://img.shields.io/pypi/pyversions/django-js-logger.svg\n    :target: https://pypi.org/project/django-js-logger/\n\n.. image:: https://img.shields.io/pypi/djversions/django-js-logger.svg\n    :target: https://pypi.python.org/pypi/django-js-logger\n\n.. image:: https://codecov.io/gh/sondrelg/django-js-logger/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/sondrelg/django-js-logger/\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://pypi.org/project/django-swagger-tester/\n\n.. image:: https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&logoColor=white\n    :target: https://github.com/pre-commit/pre-commit\n\n|\n\nSimple Django app for logging Javascript's ``console.log`` logs to Django.\n\nUseful for catching Javascript errors that are not logged by Django natively and would otherwise only be logged to the client's console.\n\nThe app works by posting all logs to an internal API; because of this, it should likely not be run in performance-sensitive production environments.\n\n.. image:: docs/img/flowchart.png\n    :scale: 100%\n    :width: 100%\n    :align: center\n    :alt: Flowchart\n\nIf you want to implement this package, and require extra functionality please feel free to commit an issue or a PR. Otherwise, this currently does exactly what I need it to do, and I likely won't change it.\n\nQuick start\n-----------\n\n1. Add \"js_logger\" to your INSTALLED_APPS settings::\n\n    INSTALLED_APPS = [\n        ...\n        'js_logger',\n    ]\n\n2. Include the packages URLconf in your project urls.py like this::\n\n    path('js-logs/', include('js_logger.urls')),\n\n3. Add the required static file to your project by running ``manage.py collectstatic``, or by manually adding the following code to ``<your-templates-folder>/js-logging/js-logging.html``::\n\n    <script type=\"text/javascript\">\n\n        function readCookie(name) {\n            let nameEQ = name + \"=\";\n            let ca = document.cookie.split(';');\n            for (let i = 0; i < ca.length; i++) {\n                let c = ca[i];\n                while (c.charAt(0) === ' ') c = c.substring(1, c.length);\n                if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);\n            }\n            return null;\n        }\n        const CSRFToken = readCookie('csrftoken');\n\n        function post(type, msg) {\n            /* Sends logs to a backend API, which logs the message to a python logger */\n            fetch('/js-logs/', {\n                    method: 'POST',\n                    headers: {'X-CSRFToken': CSRFToken, 'Content-Type': 'application/json'},\n                    body: JSON.stringify({'type': type, 'msg': msg})\n                }\n            );\n        }\n\n        // Event listener for error events for posting errors to the backend\n        window.addEventListener('error', (event) => {\n            post('error', event.message);\n        });\n\n        // Patch console.log function to post all other logs to the backend\n        console._overwritten = console.log;\n        console.log = function (log) {\n            post('info', log);\n            console._overwritten(log);\n        }\n    </script>\n\n\n\n4. Include the template where ever you wish for logs to be sent in from (perhaps a base or header template)::\n\n    <head>\n    ...\n    {% include \"js-logging/js-logging.html\" %}\n    ...\n    </head>\n\n\n5. Add ``console.log`` as a logger in your logging configuration::\n\n    'console.log': {\n        'level': 'INFO',\n        ...\n    },\n\nNote: This package will log all `console.log` calls in your frontend as ``INFO`` logs, and will log javascript errors as ``ERROR`` logs.\n\n\n0.1.0 (20-03-2020)\n------------------\n\n- First public release.\n- Provides full Django-logging for javascript loggers and errors.\n- Implements CSRFToken header.\n\n", "description_content_type": "", "docs_url": null, "download_url": "https://pypi.python.org/pypi/django-js-logger", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/sondrelg/django-js-logger", "keywords": "console,log,logging,javascript,django", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "django-js-logger", "package_url": "https://pypi.org/project/django-js-logger/", "platform": "OS Independent", "project_url": "https://pypi.org/project/django-js-logger/", "project_urls": {"Download": "https://pypi.python.org/pypi/django-js-logger", "Homepage": "https://github.com/sondrelg/django-js-logger"}, "release_url": "https://pypi.org/project/django-js-logger/0.1.0/", "requires_dist": ["djangorestframework", "django"], "requires_python": "", "summary": "Javascript logging for Django.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.org/project/django-js-logger/\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/django-js-logger.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/db0c60d7178eda8b6fd3d24c34e0bd7f95c0a64b/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f646a616e676f2d6a732d6c6f676765722e737667\"></a>\n<a href=\"https://pypi.org/project/django-js-logger/\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/pyversions/django-js-logger.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/33b13838e7280391bef28f1b7e103031c0eb9b41/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f646a616e676f2d6a732d6c6f676765722e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/django-js-logger\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/djversions/django-js-logger.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d505c9d8e88cd8442361d91ac9099467df09d004/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646a76657273696f6e732f646a616e676f2d6a732d6c6f676765722e737667\"></a>\n<a href=\"https://codecov.io/gh/sondrelg/django-js-logger/\" rel=\"nofollow\"><img alt=\"https://codecov.io/gh/sondrelg/django-js-logger/branch/master/graph/badge.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7556109599eb12adedc509587df6f41751c1c0a5/68747470733a2f2f636f6465636f762e696f2f67682f736f6e6472656c672f646a616e676f2d6a732d6c6f676765722f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://pypi.org/project/django-swagger-tester/\" rel=\"nofollow\"><img alt=\"https://img.shields.io/badge/code%20style-black-000000.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbfdc7754183ecf079bc71ddeabaf88f6cbc5c00/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667\"></a>\n<a href=\"https://github.com/pre-commit/pre-commit\" rel=\"nofollow\"><img alt=\"https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&amp;logoColor=white\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d861174d9af84b80d393b2e7c89badabc5e04097/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f7072652d2d636f6d6d69742d656e61626c65642d627269676874677265656e3f6c6f676f3d7072652d636f6d6d6974266c6f676f436f6c6f723d7768697465\"></a>\n<div>\n<div><br></div>\n</div>\n<p>Simple Django app for logging Javascript\u2019s <tt>console.log</tt> logs to Django.</p>\n<p>Useful for catching Javascript errors that are not logged by Django natively and would otherwise only be logged to the client\u2019s console.</p>\n<p>The app works by posting all logs to an internal API; because of this, it should likely not be run in performance-sensitive production environments.</p>\n<img alt=\"Flowchart\" class=\"align-center\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2b97add347f1c0aabf0a6d97a7a2edc9ae39a6e8/646f63732f696d672f666c6f7763686172742e706e67\" width=\"100%\">\n<p>If you want to implement this package, and require extra functionality please feel free to commit an issue or a PR. Otherwise, this currently does exactly what I need it to do, and I likely won\u2019t change it.</p>\n<div id=\"quick-start\">\n<h2>Quick start</h2>\n<ol>\n<li><p>Add \u201cjs_logger\u201d to your INSTALLED_APPS settings:</p>\n<pre>INSTALLED_APPS = [\n    ...\n    'js_logger',\n]\n</pre>\n</li>\n<li><p>Include the packages URLconf in your project urls.py like this:</p>\n<pre>path('js-logs/', include('js_logger.urls')),\n</pre>\n</li>\n<li><p>Add the required static file to your project by running <tt>manage.py collectstatic</tt>, or by manually adding the following code to <tt><span class=\"pre\">&lt;your-templates-folder&gt;/js-logging/js-logging.html</span></tt>:</p>\n<pre>&lt;script type=\"text/javascript\"&gt;\n\n    function readCookie(name) {\n        let nameEQ = name + \"=\";\n        let ca = document.cookie.split(';');\n        for (let i = 0; i &lt; ca.length; i++) {\n            let c = ca[i];\n            while (c.charAt(0) === ' ') c = c.substring(1, c.length);\n            if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);\n        }\n        return null;\n    }\n    const CSRFToken = readCookie('csrftoken');\n\n    function post(type, msg) {\n        /* Sends logs to a backend API, which logs the message to a python logger */\n        fetch('/js-logs/', {\n                method: 'POST',\n                headers: {'X-CSRFToken': CSRFToken, 'Content-Type': 'application/json'},\n                body: JSON.stringify({'type': type, 'msg': msg})\n            }\n        );\n    }\n\n    // Event listener for error events for posting errors to the backend\n    window.addEventListener('error', (event) =&gt; {\n        post('error', event.message);\n    });\n\n    // Patch console.log function to post all other logs to the backend\n    console._overwritten = console.log;\n    console.log = function (log) {\n        post('info', log);\n        console._overwritten(log);\n    }\n&lt;/script&gt;\n</pre>\n</li>\n<li><p>Include the template where ever you wish for logs to be sent in from (perhaps a base or header template):</p>\n<pre>&lt;head&gt;\n...\n{% include \"js-logging/js-logging.html\" %}\n...\n&lt;/head&gt;\n</pre>\n</li>\n<li><p>Add <tt>console.log</tt> as a logger in your logging configuration:</p>\n<pre>'console.log': {\n    'level': 'INFO',\n    ...\n},\n</pre>\n</li>\n</ol>\n<p>Note: This package will log all <cite>console.log</cite> calls in your frontend as <tt>INFO</tt> logs, and will log javascript errors as <tt>ERROR</tt> logs.</p>\n</div>\n<div id=\"id1\">\n<h2>0.1.0 (20-03-2020)</h2>\n<ul>\n<li>First public release.</li>\n<li>Provides full Django-logging for javascript loggers and errors.</li>\n<li>Implements CSRFToken header.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 6846765, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "9a41a31cc19f7ee27132ebf56209188e", "sha256": "f46d890441197f4797faeb937206fc5965d28552d45f79e46b35eedccffd7445"}, "downloads": -1, "filename": "django_js_logger-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "9a41a31cc19f7ee27132ebf56209188e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5735, "upload_time": "2020-03-19T18:36:43", "upload_time_iso_8601": "2020-03-19T18:36:43.954492Z", "url": "https://files.pythonhosted.org/packages/25/28/4996fae924bd5e989845c6c0f1a8dcec4c0b9d20684d0190503e19f36246/django_js_logger-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fc497c59e19a68c1a3096dea60715bd0", "sha256": "09b3b11549a547921c7a04234bc14696e07e06730d8dc88fde190fed95bc6dd4"}, "downloads": -1, "filename": "django-js-logger-0.0.1.tar.gz", "has_sig": false, "md5_digest": "fc497c59e19a68c1a3096dea60715bd0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5262, "upload_time": "2020-03-19T18:36:45", "upload_time_iso_8601": "2020-03-19T18:36:45.886003Z", "url": "https://files.pythonhosted.org/packages/df/cc/aeffa644ddf4106fe3366c5c12ba2560a838113d4b74d94e9eab72eb0983/django-js-logger-0.0.1.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "3f682eedc3f1f7cf8c86583a36a6abc2", "sha256": "6f0e18b3965521040280c3b45af11ee20d872e7100e9437a832bb7ac508407eb"}, "downloads": -1, "filename": "django_js_logger-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3f682eedc3f1f7cf8c86583a36a6abc2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9570, "upload_time": "2020-03-19T23:50:57", "upload_time_iso_8601": "2020-03-19T23:50:57.150323Z", "url": "https://files.pythonhosted.org/packages/19/d7/cd9ab95555150bd66ac512f33ce866cbc64fdd6cc3a1483d6a620fe03a52/django_js_logger-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "70db51587ecb0d8233ccccf8d3313c83", "sha256": "9784a274185d85f5071d2bea527f90cc65635bb63ec13f23e79a88913d95a4e0"}, "downloads": -1, "filename": "django-js-logger-0.1.0.tar.gz", "has_sig": false, "md5_digest": "70db51587ecb0d8233ccccf8d3313c83", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8520, "upload_time": "2020-03-19T23:50:58", "upload_time_iso_8601": "2020-03-19T23:50:58.513285Z", "url": "https://files.pythonhosted.org/packages/3f/5f/93aec8fe58abd71808978b1a8137f76cb25b4b834f3f84112d50352e5a8a/django-js-logger-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3f682eedc3f1f7cf8c86583a36a6abc2", "sha256": "6f0e18b3965521040280c3b45af11ee20d872e7100e9437a832bb7ac508407eb"}, "downloads": -1, "filename": "django_js_logger-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3f682eedc3f1f7cf8c86583a36a6abc2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9570, "upload_time": "2020-03-19T23:50:57", "upload_time_iso_8601": "2020-03-19T23:50:57.150323Z", "url": "https://files.pythonhosted.org/packages/19/d7/cd9ab95555150bd66ac512f33ce866cbc64fdd6cc3a1483d6a620fe03a52/django_js_logger-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "70db51587ecb0d8233ccccf8d3313c83", "sha256": "9784a274185d85f5071d2bea527f90cc65635bb63ec13f23e79a88913d95a4e0"}, "downloads": -1, "filename": "django-js-logger-0.1.0.tar.gz", "has_sig": false, "md5_digest": "70db51587ecb0d8233ccccf8d3313c83", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8520, "upload_time": "2020-03-19T23:50:58", "upload_time_iso_8601": "2020-03-19T23:50:58.513285Z", "url": "https://files.pythonhosted.org/packages/3f/5f/93aec8fe58abd71808978b1a8137f76cb25b4b834f3f84112d50352e5a8a/django-js-logger-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:35:29 2020"}