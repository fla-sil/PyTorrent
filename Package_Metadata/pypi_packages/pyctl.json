{"info": {"author": "Philipp Ernst", "author_email": "philipp.ernst@ovgu.de", "bugtrack_url": null, "classifiers": [], "description": "# PyCTL - Python bindings for the Computed Tomography Library (CTL)\n\nA Python package for simple and interactive use of the [CTL](https://gitlab.com/tpfeiffe/ctl).\n\nReference publication:  \nTim Pfeiffer, Robert Frysch, Richard N. K. Bismark, and Georg Rose\n\"CTL: modular open-source C++-library for CT-simulations\",\nProc. SPIE 11072,\n15th International Meeting on Fully Three-Dimensional Image Reconstruction in Radiology and Nuclear Medicine,\n110721L (28 May 2019);\n[doi:10.1117/12.2534517](https://doi.org/10.1117/12.2534517)\n\n# Simple installation\nInstall via pip:\n```\npip install pyctl\n```\n\n# Compiling from sources\nThe following compilation guide has been tested on Windows 10 with MSVC 2019, CUDA 10.1, Python>=3.6.\n\n## On Windows\n* Install [MS Visual Studio Build Tools](https://visualstudio.microsoft.com/downloads/) with Windows SDK.\n* Install [CMake](https://cmake.org/download/). Make sure the `PATH` environment variable is set accordingly.\n* Install [Git](https://git-scm.com/). Clone this repository.\n* Install [Qt](https://www.qt.io/)>=5.12. During installation, you need to set at least:\n    * Prebuilt components for MSVC 64-bit. Make sure the `PATH` environment variable is set accordingly\n      (e.g. `C:\\Qt\\5.14.1\\msvc2017_64\\bin`). Make sure the `CMAKE_PREFIX_PATH` environment variable\n      is set accordingly (e.g. `C:\\Qt\\5.14.1\\msvc2017_64\\lib\\cmake\\Qt5`).\n    * Qt Charts\n    * Sources\n* Install OpenCL 1.1/1.2:\n    * Install latest NVIDIA driver.\n    * Install [CUDA](https://developer.nvidia.com/cuda-downloads). Make sure the `CUDA_PATH` and\n      `PATH` environment variable are set accordingly.\n* Install Python 3 + pip. Recommended: use a virtual [conda environment](https://www.anaconda.com/).\n* `cd` into the cloned PyCTL directory and run `pip install .`\n\n## On Linux (not tested)\n* Install build tools: `sudo apt install build-essential`\n* Install CMake: `sudo apt install cmake`.\n* Install Git: `sudo apt install git`. Clone this repository.\n* Install Qt: `sudo apt install qt5-default qt3d5-dev libqt5charts5-dev`\n* Install OpenCL 1.1/1.2:\n    * Install official NVIDIA driver using Driver Manager --> reboot\n    * Install NVIDIA OpenCL development package: `sudo apt install nvidia-opencl-dev`\n    * Install OpenCL headers: `sudo apt install opencl-headers`\n* Install Python 3: `sudo apt install python3`. Recommended: use a virtual environment.\n* `cd` into the cloned PyCTL directory and run `pip install .`\n\n# Teaser: Making projections\n\nThe following example code uses a predefined C-arm system and a predefined\ntrajectory (a trajectory is a specific acquisition protocol) in order to\nproject a volume, which is read from a file. This serves to show how the CTL\nmay work out of the box. However, CT systems or acquisition protocols (or even\npreparations of single views) can be freely configured. Moreover, certain\nprojector extensions can \"decorate\" the used forward projector in order to\ninclude further geometric/physical/measuring effects.\n\n```python\nimport sys\n\nimport ctl\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\ndef main():\n    # create a volume of size 128x128x128px with a voxel size of 1x1x1mm\n    volume = ctl.VoxelVolumeF((128, 128, 128), (1.0, 1.0, 1.0))\n    volume.fill(1.0)\n\n    # alternatively:\n    # volume = ctl.VoxelVolumeF.from_numpy(np.ones((128, 128, 128)))\n    # volume.set_voxel_size((1.0, 1.0, 1.0))\n\n    # use of a predefined system from ctl.blueprints\n    system = ctl.CTSystemBuilder.create_from_blueprint(ctl.blueprints.GenericCarmCT())\n\n    # create an acquisition setup\n    nb_views = 100\n    my_carm_setup = ctl.AcquisitionSetup(system, nb_views)\n\n    # add a predefined trajectory to the setup from ctl.protocols\n    angle_span = np.deg2rad(200.0) # rad is the standard unit for angles\n    source_to_isocenter = 750.0 # mm is the standard unit for length dimensions\n    my_carm_setup.apply_preparation_protocol(ctl.protocols.WobbleTrajectory(angle_span,\n                                                                            source_to_isocenter))\n\n    if not my_carm_setup.is_valid():\n        sys.exit(-1)\n\n    # configure a projector and project volume\n    my_projector = ctl.ocl.RayCasterProjector()      # the projector (uses its default settings)\n    my_projector.configure(my_carm_setup)            # configure the projector\n    projections = my_projector.project(volume)       # project\n\n    # show the 20th projection of detector module 0\n    proj20 = projections.to_numpy()[20, 0]\n    # alternatively: proj20 = projections.view(20).module(0).to_numpy()\n    _ = plt.imshow(proj20, cmap='gray'), plt.show()\n\nif __name__ == '__main__':\n    main()\n\n```\n\nIf everything works well, you should see this projection:\n![example-projection](examples/readme_example.png?raw=true)\n\nIf you have any problems or questions regarding the CTL or PyCTL, please contact us:  \n<sw4g.production@gmail.com>.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/phernst/pyctl", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pyctl", "package_url": "https://pypi.org/project/pyctl/", "platform": "", "project_url": "https://pypi.org/project/pyctl/", "project_urls": {"Homepage": "https://github.com/phernst/pyctl"}, "release_url": "https://pypi.org/project/pyctl/0.1.0/", "requires_dist": ["PySide2 (>=5.12)", "importlib-resources ; python_version < \"3.7\""], "requires_python": "", "summary": "Python bindings for CTL", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>PyCTL - Python bindings for the Computed Tomography Library (CTL)</h1>\n<p>A Python package for simple and interactive use of the <a href=\"https://gitlab.com/tpfeiffe/ctl\" rel=\"nofollow\">CTL</a>.</p>\n<p>Reference publication:<br>\nTim Pfeiffer, Robert Frysch, Richard N. K. Bismark, and Georg Rose\n\"CTL: modular open-source C++-library for CT-simulations\",\nProc. SPIE 11072,\n15th International Meeting on Fully Three-Dimensional Image Reconstruction in Radiology and Nuclear Medicine,\n110721L (28 May 2019);\n<a href=\"https://doi.org/10.1117/12.2534517\" rel=\"nofollow\">doi:10.1117/12.2534517</a></p>\n<h1>Simple installation</h1>\n<p>Install via pip:</p>\n<pre><code>pip install pyctl\n</code></pre>\n<h1>Compiling from sources</h1>\n<p>The following compilation guide has been tested on Windows 10 with MSVC 2019, CUDA 10.1, Python&gt;=3.6.</p>\n<h2>On Windows</h2>\n<ul>\n<li>Install <a href=\"https://visualstudio.microsoft.com/downloads/\" rel=\"nofollow\">MS Visual Studio Build Tools</a> with Windows SDK.</li>\n<li>Install <a href=\"https://cmake.org/download/\" rel=\"nofollow\">CMake</a>. Make sure the <code>PATH</code> environment variable is set accordingly.</li>\n<li>Install <a href=\"https://git-scm.com/\" rel=\"nofollow\">Git</a>. Clone this repository.</li>\n<li>Install <a href=\"https://www.qt.io/\" rel=\"nofollow\">Qt</a>&gt;=5.12. During installation, you need to set at least:\n<ul>\n<li>Prebuilt components for MSVC 64-bit. Make sure the <code>PATH</code> environment variable is set accordingly\n(e.g. <code>C:\\Qt\\5.14.1\\msvc2017_64\\bin</code>). Make sure the <code>CMAKE_PREFIX_PATH</code> environment variable\nis set accordingly (e.g. <code>C:\\Qt\\5.14.1\\msvc2017_64\\lib\\cmake\\Qt5</code>).</li>\n<li>Qt Charts</li>\n<li>Sources</li>\n</ul>\n</li>\n<li>Install OpenCL 1.1/1.2:\n<ul>\n<li>Install latest NVIDIA driver.</li>\n<li>Install <a href=\"https://developer.nvidia.com/cuda-downloads\" rel=\"nofollow\">CUDA</a>. Make sure the <code>CUDA_PATH</code> and\n<code>PATH</code> environment variable are set accordingly.</li>\n</ul>\n</li>\n<li>Install Python 3 + pip. Recommended: use a virtual <a href=\"https://www.anaconda.com/\" rel=\"nofollow\">conda environment</a>.</li>\n<li><code>cd</code> into the cloned PyCTL directory and run <code>pip install .</code></li>\n</ul>\n<h2>On Linux (not tested)</h2>\n<ul>\n<li>Install build tools: <code>sudo apt install build-essential</code></li>\n<li>Install CMake: <code>sudo apt install cmake</code>.</li>\n<li>Install Git: <code>sudo apt install git</code>. Clone this repository.</li>\n<li>Install Qt: <code>sudo apt install qt5-default qt3d5-dev libqt5charts5-dev</code></li>\n<li>Install OpenCL 1.1/1.2:\n<ul>\n<li>Install official NVIDIA driver using Driver Manager --&gt; reboot</li>\n<li>Install NVIDIA OpenCL development package: <code>sudo apt install nvidia-opencl-dev</code></li>\n<li>Install OpenCL headers: <code>sudo apt install opencl-headers</code></li>\n</ul>\n</li>\n<li>Install Python 3: <code>sudo apt install python3</code>. Recommended: use a virtual environment.</li>\n<li><code>cd</code> into the cloned PyCTL directory and run <code>pip install .</code></li>\n</ul>\n<h1>Teaser: Making projections</h1>\n<p>The following example code uses a predefined C-arm system and a predefined\ntrajectory (a trajectory is a specific acquisition protocol) in order to\nproject a volume, which is read from a file. This serves to show how the CTL\nmay work out of the box. However, CT systems or acquisition protocols (or even\npreparations of single views) can be freely configured. Moreover, certain\nprojector extensions can \"decorate\" the used forward projector in order to\ninclude further geometric/physical/measuring effects.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">ctl</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">matplotlib</span> <span class=\"kn\">import</span> <span class=\"n\">pyplot</span> <span class=\"k\">as</span> <span class=\"n\">plt</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"c1\"># create a volume of size 128x128x128px with a voxel size of 1x1x1mm</span>\n    <span class=\"n\">volume</span> <span class=\"o\">=</span> <span class=\"n\">ctl</span><span class=\"o\">.</span><span class=\"n\">VoxelVolumeF</span><span class=\"p\">((</span><span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"mi\">128</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">))</span>\n    <span class=\"n\">volume</span><span class=\"o\">.</span><span class=\"n\">fill</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># alternatively:</span>\n    <span class=\"c1\"># volume = ctl.VoxelVolumeF.from_numpy(np.ones((128, 128, 128)))</span>\n    <span class=\"c1\"># volume.set_voxel_size((1.0, 1.0, 1.0))</span>\n\n    <span class=\"c1\"># use of a predefined system from ctl.blueprints</span>\n    <span class=\"n\">system</span> <span class=\"o\">=</span> <span class=\"n\">ctl</span><span class=\"o\">.</span><span class=\"n\">CTSystemBuilder</span><span class=\"o\">.</span><span class=\"n\">create_from_blueprint</span><span class=\"p\">(</span><span class=\"n\">ctl</span><span class=\"o\">.</span><span class=\"n\">blueprints</span><span class=\"o\">.</span><span class=\"n\">GenericCarmCT</span><span class=\"p\">())</span>\n\n    <span class=\"c1\"># create an acquisition setup</span>\n    <span class=\"n\">nb_views</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>\n    <span class=\"n\">my_carm_setup</span> <span class=\"o\">=</span> <span class=\"n\">ctl</span><span class=\"o\">.</span><span class=\"n\">AcquisitionSetup</span><span class=\"p\">(</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">nb_views</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># add a predefined trajectory to the setup from ctl.protocols</span>\n    <span class=\"n\">angle_span</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">deg2rad</span><span class=\"p\">(</span><span class=\"mf\">200.0</span><span class=\"p\">)</span> <span class=\"c1\"># rad is the standard unit for angles</span>\n    <span class=\"n\">source_to_isocenter</span> <span class=\"o\">=</span> <span class=\"mf\">750.0</span> <span class=\"c1\"># mm is the standard unit for length dimensions</span>\n    <span class=\"n\">my_carm_setup</span><span class=\"o\">.</span><span class=\"n\">apply_preparation_protocol</span><span class=\"p\">(</span><span class=\"n\">ctl</span><span class=\"o\">.</span><span class=\"n\">protocols</span><span class=\"o\">.</span><span class=\"n\">WobbleTrajectory</span><span class=\"p\">(</span><span class=\"n\">angle_span</span><span class=\"p\">,</span>\n                                                                            <span class=\"n\">source_to_isocenter</span><span class=\"p\">))</span>\n\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">my_carm_setup</span><span class=\"o\">.</span><span class=\"n\">is_valid</span><span class=\"p\">():</span>\n        <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># configure a projector and project volume</span>\n    <span class=\"n\">my_projector</span> <span class=\"o\">=</span> <span class=\"n\">ctl</span><span class=\"o\">.</span><span class=\"n\">ocl</span><span class=\"o\">.</span><span class=\"n\">RayCasterProjector</span><span class=\"p\">()</span>      <span class=\"c1\"># the projector (uses its default settings)</span>\n    <span class=\"n\">my_projector</span><span class=\"o\">.</span><span class=\"n\">configure</span><span class=\"p\">(</span><span class=\"n\">my_carm_setup</span><span class=\"p\">)</span>            <span class=\"c1\"># configure the projector</span>\n    <span class=\"n\">projections</span> <span class=\"o\">=</span> <span class=\"n\">my_projector</span><span class=\"o\">.</span><span class=\"n\">project</span><span class=\"p\">(</span><span class=\"n\">volume</span><span class=\"p\">)</span>       <span class=\"c1\"># project</span>\n\n    <span class=\"c1\"># show the 20th projection of detector module 0</span>\n    <span class=\"n\">proj20</span> <span class=\"o\">=</span> <span class=\"n\">projections</span><span class=\"o\">.</span><span class=\"n\">to_numpy</span><span class=\"p\">()[</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n    <span class=\"c1\"># alternatively: proj20 = projections.view(20).module(0).to_numpy()</span>\n    <span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">proj20</span><span class=\"p\">,</span> <span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"s1\">'gray'</span><span class=\"p\">),</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">main</span><span class=\"p\">()</span>\n</pre>\n<p>If everything works well, you should see this projection:\n<img alt=\"example-projection\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9a1fc190f95fee1ba15856ec68f2724c49af8042/6578616d706c65732f726561646d655f6578616d706c652e706e673f7261773d74727565\"></p>\n<p>If you have any problems or questions regarding the CTL or PyCTL, please contact us:<br>\n<a href=\"mailto:sw4g.production@gmail.com\">sw4g.production@gmail.com</a>.</p>\n\n          </div>"}, "last_serial": 7096416, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "06799ddf55522cf39e9f3512a8586003", "sha256": "f38d9bcc2abc265b245d454144445fbf043adecd0421a2aeaa50a8f6216821c1"}, "downloads": -1, "filename": "pyctl-0.1.0-cp36-cp36m-win_amd64.whl", "has_sig": false, "md5_digest": "06799ddf55522cf39e9f3512a8586003", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 683203, "upload_time": "2020-04-24T21:24:53", "upload_time_iso_8601": "2020-04-24T21:24:53.408906Z", "url": "https://files.pythonhosted.org/packages/a4/58/762741af94fe04e189845771277a221e03c46249d47240d87ac23abf3dac/pyctl-0.1.0-cp36-cp36m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "535f786ff1b8b969085ee4059a89a6f0", "sha256": "83a634228423885a7939d4963dd6a0443e2f739f514c210572ade2b7019b1753"}, "downloads": -1, "filename": "pyctl-0.1.0-cp37-cp37m-win_amd64.whl", "has_sig": false, "md5_digest": "535f786ff1b8b969085ee4059a89a6f0", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 683223, "upload_time": "2020-04-24T21:24:56", "upload_time_iso_8601": "2020-04-24T21:24:56.160900Z", "url": "https://files.pythonhosted.org/packages/ab/87/332b9d54425108c7f6aa17ad50c5ea4525454cca8f35fde064b22dab8b8f/pyctl-0.1.0-cp37-cp37m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7a867073c006057fb1ebca21f05fb6f7", "sha256": "82fabf90464bebbe5d0e43b3ea7689843f63ac8faea6e7e2ad5811a4173bbe23"}, "downloads": -1, "filename": "pyctl-0.1.0-cp38-cp38-win_amd64.whl", "has_sig": false, "md5_digest": "7a867073c006057fb1ebca21f05fb6f7", "packagetype": "bdist_wheel", "python_version": "cp38", "requires_python": null, "size": 696409, "upload_time": "2020-04-24T21:24:57", "upload_time_iso_8601": "2020-04-24T21:24:57.374521Z", "url": "https://files.pythonhosted.org/packages/63/0d/9b9b9e83482d158a81bb143f8c98a07d3fa7fd22309f3014c372dc969660/pyctl-0.1.0-cp38-cp38-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "57d08fc0b9985805f79794d4d83fec3c", "sha256": "bc65fad286cdbed6e870f2e0cdd6f636d40824b79fd649c7d6725a481242edfb"}, "downloads": -1, "filename": "pyctl-0.1.0.tar.gz", "has_sig": false, "md5_digest": "57d08fc0b9985805f79794d4d83fec3c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 63007, "upload_time": "2020-04-24T21:24:58", "upload_time_iso_8601": "2020-04-24T21:24:58.316235Z", "url": "https://files.pythonhosted.org/packages/63/bb/28be53af7bc73e14bb288b273b120d38e044de81fef858dcc03cb38909ad/pyctl-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "06799ddf55522cf39e9f3512a8586003", "sha256": "f38d9bcc2abc265b245d454144445fbf043adecd0421a2aeaa50a8f6216821c1"}, "downloads": -1, "filename": "pyctl-0.1.0-cp36-cp36m-win_amd64.whl", "has_sig": false, "md5_digest": "06799ddf55522cf39e9f3512a8586003", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 683203, "upload_time": "2020-04-24T21:24:53", "upload_time_iso_8601": "2020-04-24T21:24:53.408906Z", "url": "https://files.pythonhosted.org/packages/a4/58/762741af94fe04e189845771277a221e03c46249d47240d87ac23abf3dac/pyctl-0.1.0-cp36-cp36m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "535f786ff1b8b969085ee4059a89a6f0", "sha256": "83a634228423885a7939d4963dd6a0443e2f739f514c210572ade2b7019b1753"}, "downloads": -1, "filename": "pyctl-0.1.0-cp37-cp37m-win_amd64.whl", "has_sig": false, "md5_digest": "535f786ff1b8b969085ee4059a89a6f0", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 683223, "upload_time": "2020-04-24T21:24:56", "upload_time_iso_8601": "2020-04-24T21:24:56.160900Z", "url": "https://files.pythonhosted.org/packages/ab/87/332b9d54425108c7f6aa17ad50c5ea4525454cca8f35fde064b22dab8b8f/pyctl-0.1.0-cp37-cp37m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7a867073c006057fb1ebca21f05fb6f7", "sha256": "82fabf90464bebbe5d0e43b3ea7689843f63ac8faea6e7e2ad5811a4173bbe23"}, "downloads": -1, "filename": "pyctl-0.1.0-cp38-cp38-win_amd64.whl", "has_sig": false, "md5_digest": "7a867073c006057fb1ebca21f05fb6f7", "packagetype": "bdist_wheel", "python_version": "cp38", "requires_python": null, "size": 696409, "upload_time": "2020-04-24T21:24:57", "upload_time_iso_8601": "2020-04-24T21:24:57.374521Z", "url": "https://files.pythonhosted.org/packages/63/0d/9b9b9e83482d158a81bb143f8c98a07d3fa7fd22309f3014c372dc969660/pyctl-0.1.0-cp38-cp38-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "57d08fc0b9985805f79794d4d83fec3c", "sha256": "bc65fad286cdbed6e870f2e0cdd6f636d40824b79fd649c7d6725a481242edfb"}, "downloads": -1, "filename": "pyctl-0.1.0.tar.gz", "has_sig": false, "md5_digest": "57d08fc0b9985805f79794d4d83fec3c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 63007, "upload_time": "2020-04-24T21:24:58", "upload_time_iso_8601": "2020-04-24T21:24:58.316235Z", "url": "https://files.pythonhosted.org/packages/63/bb/28be53af7bc73e14bb288b273b120d38e044de81fef858dcc03cb38909ad/pyctl-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:07:36 2020"}