{"info": {"author": "MIT Data To AI Lab", "author_email": "dailabmit@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering :: Artificial Intelligence"], "description": "<p align=\"left\">\n<img width=15% src=\"https://dai.lids.mit.edu/wp-content/uploads/2018/06/Logo_DAI_highres.png\" alt=\u201cSDGym\u201d />\n<i>An open source project from Data to AI Lab at MIT.</i>\n</p>\n\n[![Development Status](https://img.shields.io/badge/Development%20Status-2%20--%20Pre--Alpha-yellow)](https://pypi.org/search/?c=Development+Status+%3A%3A+2+-+Pre-Alpha)\n[![Travis](https://travis-ci.org/sdv-dev/SDGym.svg?branch=master)](https://travis-ci.org/sdv-dev/SDGym)\n[![PyPi Shield](https://img.shields.io/pypi/v/sdgym.svg)](https://pypi.python.org/pypi/sdgym)\n[![Downloads](https://pepy.tech/badge/sdgym)](https://pepy.tech/project/sdgym)\n<!--[![Coverage Status](https://codecov.io/gh/sdv-dev/SDGym/branch/master/graph/badge.svg)](https://codecov.io/gh/sdv-dev/SDGym)-->\n\n# SDGym - Synthetic Data Gym\n\n* License: [MIT](https://github.com/sdv-dev/SDGym/blob/master/LICENSE)\n* Development Status: [Pre-Alpha](https://pypi.org/search/?c=Development+Status+%3A%3A+2+-+Pre-Alpha)\n* Homepage: https://github.com/sdv-dev/SDGym\n<!--* Documentation: https://sdv-dev.github.io/SDGym/-->\n\n# Overview\n\nSynthetic Data Gym (SDGym) is a framework to benchmark the performance of synthetic data generators\nfor tabular data. SDGym is a project of the [Data to AI Laboratory](https://dai.lids.mit.edu/) at MIT.\n\n## What is a Synthetic Data Generator?\n\nA **Synthetic Data Generator** is a Python function (or class method) that takes as input some\ndata, which we call the *real* data, learns a model from it, and outputs new *synthetic* data that\nhas similar mathematical properties as the *real* one.\n\nPlease refer to the [synthesizers documentation](SYNTHESIZERS.md) for instructions about how to\nimplement your own Synthetic Data Generator and integrate with SDGym. You can also read about how\nto use the ones included in **SDGym** and see the current [leaderboard](SYNTHESIZERS.md#leaderboard).\n\n## Benchmark datasets\n\n**SDGym** evaluates the performance of **Synthetic Data Generators** using datasets\nthat are in three families:\n\n* Simulated data generated using Gaussian Mixtures\n* Simulated data generated using Bayesian Networks\n* Real world datasets\n\nFurther details about how these datasets were generated can be found in the [Modeling Tabular\ndata using Conditional GAN](https://arxiv.org/abs/1907.00503) paper and in the [datasets\ndocumentation](DATASETS.md).\n\n## Current Leaderboard\n\nThis is a summary of the current SDGym leaderboard, showing the number of datasets in which\neach Synthesizer obtained the best score.\n\nThe complete scores table can be found in the [synthesizers document](SYNTHESIZERS.md#leaderboard)\nand it can also be downloaded as a CSV file form here: [sdgym/leaderboard.csv](sdgym/leaderboard.csv)\n\nDetailed leaderboard results for all the releases are available [in this Google Docs Spreadsheet](\nhttps://docs.google.com/spreadsheets/d/1hllKn_wDjkr_Yqq9uO5TlQNlj767FSaONC3vrtovaOQ/edit?usp=sharing).\n\n> :warning: **NOTE**: The following leaderboard and the detailed results for 0.2.0 are derived from\n> the paper. We are currently running all synthesizers with the new API and we will update the\n> leaderboard with the 0.2.1 release (coming soon!).\n\n### Gaussian Mixture Simulated Data\n\n| Synthesizer         |   0.2.0 |\n|---------------------|---------|\n| CLBNSynthesizer     |       1 |\n| PrivBNSynthesizer   |       0 |\n| MedganSynthesizer   |       0 |\n| VEEGANSynthesizer   |       0 |\n| TableganSynthesizer |       0 |\n| **TVAESynthesizer** |       4 |\n| CTGANSynthesizer    |       1 |\n\n### Bayesian Networks Simulated Data\n\n| Synthesizer           |   0.2.0 |\n|-----------------------|---------|\n| CLBNSynthesizer       |       0 |\n| **PrivBNSynthesizer** |       6 |\n| MedganSynthesizer     |       1 |\n| VEEGANSynthesizer     |       0 |\n| TableganSynthesizer   |       0 |\n| TVAESynthesizer       |       3 |\n| CTGANSynthesizer      |       0 |\n\n### Real World Datasets\n\n| Synthesizer         |   0.2.0 |\n|---------------------|---------|\n| CLBNSynthesizer     |       0 |\n| PrivBNSynthesizer   |       0 |\n| MedganSynthesizer   |       0 |\n| VEEGANSynthesizer   |       0 |\n| TableganSynthesizer |       0 |\n| **TVAESynthesizer** |       5 |\n| CTGANSynthesizer    |       3 |\n\n\n# Install\n\n## Requirements\n\n**SDGym** has been developed and tested on [Python 3.5, and 3.6](https://www.python.org/downloads/)\n\nAlso, although it is not strictly required, the usage of a [virtualenv](https://virtualenv.pypa.io/en/latest/)\nis highly recommended in order to avoid interfering with other software installed in the system\nwhere **SDGym** is run.\n\n## Install with pip\n\nThe easiest and recommended way to install **SDGym** is using [pip](https://pip.pypa.io/en/stable/):\n\n```bash\npip install sdgym\n```\n\nThis will pull and install the latest stable release from [PyPi](https://pypi.org/).\n\nIf you want to install it from source or contribute to the project please read the\n[Contributing Guide](https://sdv-dev.github.io/SDGym/contributing.html#get-started) for\nmore details about how to do it.\n\n# Usage\n\n## Benchmarking your own synthesizer\n\nAll you need to do in order to use the SDGym Benchmark, is to import and call the `sdgym.benchmark`\nfunction passing it your synthesizer function:\n\n```python3\nfrom sdgym import benchmark\n\nscores = benchmark(synthesizers=my_synthesizer_function)\n```\n\n* You can learn how to create your own synthesizer function [here](SYNTHESIZERS.md).\n* You can learn about different arguments for benchmark function [here](BENCHMARK.md).\n\nThe output of the `benchmark` function will be a `pd.DataFrame` containing the results obtained\nby your synthesizer on each dataset, as well as the results obtained previously by the SDGym\nsynthesizers:\n\n```\n                        adult/accuracy  adult/f1  ...  ring/test_likelihood\nIndependentSynthesizer         0.56530  0.134593  ...             -1.958888\nUniformSynthesizer             0.39695  0.273753  ...             -2.519416\nIdentitySynthesizer            0.82440  0.659250  ...             -1.705487\n...                                ...       ...  ...                   ...\nmy_synthesizer_function        0.64865  0.210103  ...             -1.964966\n```\n\n## Benchmarking the SDGym Synthesizers\n\nIf you want to run the SDGym benchmark on the SDGym Synthesizers you can directly pass the\ncorresponding class, or a list of classes, to the `benchmark` function.\n\nFor example, if you want to run the complete benchmark suite to evaluate all the existing\nsynthesizers you can run (this will take a lot of time to run!):\n\n```python3\nfrom sdgym.synthesizers import (\n    CLBNSynthesizer, CTGANSynthesizer, IdentitySynthesizer, IndependentSynthesizer,\n    MedganSynthesizer, PrivBNSynthesizer, TableganSynthesizer, TVAESynthesizer,\n    UniformSynthesizer, VEEGANSynthesizer)\n\nall_synthesizers = [\n    CLBNSynthesizer,\n    IdentitySynthesizer,\n    IndependentSynthesizer,\n    MedganSynthesizer,\n    PrivBNSynthesizer,\n    TableganSynthesizer,\n    CTGANSynthesizer,\n    TVAESynthesizer,\n    UniformSynthesizer,\n    VEEGANSynthesizer,\n]\nscores = benchmark(synthesizers=all_synthesizers)\n```\n\nFor further details about all the arguments and possibilities that the `benchmark` function offers\nplease refer to the [benchmark documentation](BENCHMARK.md)\n\n# Additional References\n\n* Datasets used in SDGym are detailed [here](DATASETS.md).\n* How to write a synthesizer is detailed [here](SYNTHESIZERS.md).\n* How to use benchmark function is detailed [here](BENCHMARK.md).\n* Detailed leaderboard results for all the releases are available [here](\nhttps://docs.google.com/spreadsheets/d/1hllKn_wDjkr_Yqq9uO5TlQNlj767FSaONC3vrtovaOQ/edit?usp=sharing).\n\n# Related Projects\n\n## SDV\n\n[SDV](https://github.com/HDI-Project/SDV), for Synthetic Data Vault, is the end-user library for\nsynthesizing data in development under the [HDI Project](https://hdi-dai.lids.mit.edu/).\nSDV allows you to easily model and sample relational datasets using Copulas through a simple API.\nOther features include anonymization of Personal Identifiable Information (PII) and preserving\nrelational integrity on sampled records.\n\n## CTGAN\n\n[CTGAN](https://github.com/sdv-dev/CTGAN) is the GAN based model for synthesizing tabular data\npresented in the [Modeling Tabular data using Conditional GAN](https://arxiv.org/abs/1907.00503)\npaper. It's also developed by the [MIT's Data to AI Lab](https://dai-lab.github.io/) and is under\nactive development.\n\n## TGAN\n\n[TGAN](https://github.com/sdv-dev/TGAN) is another GAN based model for synthesizing tabular data.\nIt's also developed by the [MIT's Data to AI Lab](https://dai-lab.github.io/) and is under\nactive development.\n\n\n# History\n\n## v0.2.0 - 2020-04-10\n\nNew Becnhmark API and lots of improved documentation.\n\n### New Features\n\n* The benchmark function now returns a complete leaderboard instead of only one score\n* Class Synthesizers can be directly passed to the benchmark function\n\n### Bug Fixes\n\n* One hot encoding errors in the Independent, VEEGAN and Medgan Synthesizers.\n* Proper usage of the `eval` mode during sampling.\n* Fix improperly configured datasets.\n\n## v0.1.0 - 2019-08-07\n\nFirst release to PyPi\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/sdv-dev/SDGym", "keywords": "machine learning synthetic data benchmark generative models", "license": "MIT license", "maintainer": "", "maintainer_email": "", "name": "sdgym", "package_url": "https://pypi.org/project/sdgym/", "platform": "", "project_url": "https://pypi.org/project/sdgym/", "project_urls": {"Homepage": "https://github.com/sdv-dev/SDGym"}, "release_url": "https://pypi.org/project/sdgym/0.2.0/", "requires_dist": ["matplotlib (<4,>=3.1.0)", "numpy (<1.18,>=1.16.3)", "pandas (<0.26,>=0.24.2)", "pomegranate (<0.12,>=0.11.0)", "scikit-learn (<0.22,>=0.21.1)", "scipy (<2,>=1.3.0)", "torch (<2,>=1.1.0)", "torchvision (>=0.3.0)", "bumpversion (<0.6,>=0.5.3) ; extra == 'dev'", "pip (>=9.0.1) ; extra == 'dev'", "watchdog (<0.11,>=0.8.3) ; extra == 'dev'", "m2r (<0.3,>=0.2.0) ; extra == 'dev'", "Sphinx (<3,>=1.7.1) ; extra == 'dev'", "sphinx-rtd-theme (<0.5,>=0.2.4) ; extra == 'dev'", "autodocsumm (<0.2,>=0.1.10) ; extra == 'dev'", "flake8 (<4,>=3.7.7) ; extra == 'dev'", "isort (<5,>=4.3.4) ; extra == 'dev'", "autoflake (<2,>=1.1) ; extra == 'dev'", "autopep8 (<2,>=1.4.3) ; extra == 'dev'", "twine (<4,>=1.10.0) ; extra == 'dev'", "wheel (>=0.30.0) ; extra == 'dev'", "coverage (<6,>=4.5.1) ; extra == 'dev'", "tox (<4,>=2.9.1) ; extra == 'dev'", "pytest (>=3.4.2) ; extra == 'dev'", "pytest-cov (>=2.6.0) ; extra == 'dev'", "pytest (>=3.4.2) ; extra == 'test'", "pytest-cov (>=2.6.0) ; extra == 'test'"], "requires_python": ">=3.6", "summary": "A framework to benchmark the performance of synthetic data generators for non-temporal tabular data", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p align=\"left\">\n<img alt=\"\u201cSDGym\u201d\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/80df0970db0e9e95cce463bc9fa595caf90dd1c7/68747470733a2f2f6461692e6c6964732e6d69742e6564752f77702d636f6e74656e742f75706c6f6164732f323031382f30362f4c6f676f5f4441495f686967687265732e706e67\" width=\"15%\">\n<i>An open source project from Data to AI Lab at MIT.</i>\n</p>\n<p><a href=\"https://pypi.org/search/?c=Development+Status+%3A%3A+2+-+Pre-Alpha\" rel=\"nofollow\"><img alt=\"Development Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/127dddfac365abf943ba0c998fa192a73323a022/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f446576656c6f706d656e742532305374617475732d322532302d2d2532305072652d2d416c7068612d79656c6c6f77\"></a>\n<a href=\"https://travis-ci.org/sdv-dev/SDGym\" rel=\"nofollow\"><img alt=\"Travis\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d1b12e4f7b6a8e7f0b7ff432720cf6f3a39a7ead/68747470733a2f2f7472617669732d63692e6f72672f7364762d6465762f534447796d2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pypi.python.org/pypi/sdgym\" rel=\"nofollow\"><img alt=\"PyPi Shield\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ca9e52fc25de95b98a090ec05cb12a51136081a8/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f736467796d2e737667\"></a>\n<a href=\"https://pepy.tech/project/sdgym\" rel=\"nofollow\"><img alt=\"Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7fc7fc2e6fac76a4b116760a7ef6c0870f526a4d/68747470733a2f2f706570792e746563682f62616467652f736467796d\"></a></p>\n\n<h1>SDGym - Synthetic Data Gym</h1>\n<ul>\n<li>License: <a href=\"https://github.com/sdv-dev/SDGym/blob/master/LICENSE\" rel=\"nofollow\">MIT</a></li>\n<li>Development Status: <a href=\"https://pypi.org/search/?c=Development+Status+%3A%3A+2+-+Pre-Alpha\" rel=\"nofollow\">Pre-Alpha</a></li>\n<li>Homepage: <a href=\"https://github.com/sdv-dev/SDGym\" rel=\"nofollow\">https://github.com/sdv-dev/SDGym</a></li>\n</ul>\n\n<h1>Overview</h1>\n<p>Synthetic Data Gym (SDGym) is a framework to benchmark the performance of synthetic data generators\nfor tabular data. SDGym is a project of the <a href=\"https://dai.lids.mit.edu/\" rel=\"nofollow\">Data to AI Laboratory</a> at MIT.</p>\n<h2>What is a Synthetic Data Generator?</h2>\n<p>A <strong>Synthetic Data Generator</strong> is a Python function (or class method) that takes as input some\ndata, which we call the <em>real</em> data, learns a model from it, and outputs new <em>synthetic</em> data that\nhas similar mathematical properties as the <em>real</em> one.</p>\n<p>Please refer to the <a href=\"SYNTHESIZERS.md\" rel=\"nofollow\">synthesizers documentation</a> for instructions about how to\nimplement your own Synthetic Data Generator and integrate with SDGym. You can also read about how\nto use the ones included in <strong>SDGym</strong> and see the current <a href=\"SYNTHESIZERS.md#leaderboard\" rel=\"nofollow\">leaderboard</a>.</p>\n<h2>Benchmark datasets</h2>\n<p><strong>SDGym</strong> evaluates the performance of <strong>Synthetic Data Generators</strong> using datasets\nthat are in three families:</p>\n<ul>\n<li>Simulated data generated using Gaussian Mixtures</li>\n<li>Simulated data generated using Bayesian Networks</li>\n<li>Real world datasets</li>\n</ul>\n<p>Further details about how these datasets were generated can be found in the <a href=\"https://arxiv.org/abs/1907.00503\" rel=\"nofollow\">Modeling Tabular\ndata using Conditional GAN</a> paper and in the <a href=\"DATASETS.md\" rel=\"nofollow\">datasets\ndocumentation</a>.</p>\n<h2>Current Leaderboard</h2>\n<p>This is a summary of the current SDGym leaderboard, showing the number of datasets in which\neach Synthesizer obtained the best score.</p>\n<p>The complete scores table can be found in the <a href=\"SYNTHESIZERS.md#leaderboard\" rel=\"nofollow\">synthesizers document</a>\nand it can also be downloaded as a CSV file form here: <a href=\"sdgym/leaderboard.csv\" rel=\"nofollow\">sdgym/leaderboard.csv</a></p>\n<p>Detailed leaderboard results for all the releases are available <a href=\"https://docs.google.com/spreadsheets/d/1hllKn_wDjkr_Yqq9uO5TlQNlj767FSaONC3vrtovaOQ/edit?usp=sharing\" rel=\"nofollow\">in this Google Docs Spreadsheet</a>.</p>\n<blockquote>\n<p>:warning: <strong>NOTE</strong>: The following leaderboard and the detailed results for 0.2.0 are derived from\nthe paper. We are currently running all synthesizers with the new API and we will update the\nleaderboard with the 0.2.1 release (coming soon!).</p>\n</blockquote>\n<h3>Gaussian Mixture Simulated Data</h3>\n<table>\n<thead>\n<tr>\n<th>Synthesizer</th>\n<th>0.2.0</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CLBNSynthesizer</td>\n<td>1</td>\n</tr>\n<tr>\n<td>PrivBNSynthesizer</td>\n<td>0</td>\n</tr>\n<tr>\n<td>MedganSynthesizer</td>\n<td>0</td>\n</tr>\n<tr>\n<td>VEEGANSynthesizer</td>\n<td>0</td>\n</tr>\n<tr>\n<td>TableganSynthesizer</td>\n<td>0</td>\n</tr>\n<tr>\n<td><strong>TVAESynthesizer</strong></td>\n<td>4</td>\n</tr>\n<tr>\n<td>CTGANSynthesizer</td>\n<td>1</td>\n</tr></tbody></table>\n<h3>Bayesian Networks Simulated Data</h3>\n<table>\n<thead>\n<tr>\n<th>Synthesizer</th>\n<th>0.2.0</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CLBNSynthesizer</td>\n<td>0</td>\n</tr>\n<tr>\n<td><strong>PrivBNSynthesizer</strong></td>\n<td>6</td>\n</tr>\n<tr>\n<td>MedganSynthesizer</td>\n<td>1</td>\n</tr>\n<tr>\n<td>VEEGANSynthesizer</td>\n<td>0</td>\n</tr>\n<tr>\n<td>TableganSynthesizer</td>\n<td>0</td>\n</tr>\n<tr>\n<td>TVAESynthesizer</td>\n<td>3</td>\n</tr>\n<tr>\n<td>CTGANSynthesizer</td>\n<td>0</td>\n</tr></tbody></table>\n<h3>Real World Datasets</h3>\n<table>\n<thead>\n<tr>\n<th>Synthesizer</th>\n<th>0.2.0</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CLBNSynthesizer</td>\n<td>0</td>\n</tr>\n<tr>\n<td>PrivBNSynthesizer</td>\n<td>0</td>\n</tr>\n<tr>\n<td>MedganSynthesizer</td>\n<td>0</td>\n</tr>\n<tr>\n<td>VEEGANSynthesizer</td>\n<td>0</td>\n</tr>\n<tr>\n<td>TableganSynthesizer</td>\n<td>0</td>\n</tr>\n<tr>\n<td><strong>TVAESynthesizer</strong></td>\n<td>5</td>\n</tr>\n<tr>\n<td>CTGANSynthesizer</td>\n<td>3</td>\n</tr></tbody></table>\n<h1>Install</h1>\n<h2>Requirements</h2>\n<p><strong>SDGym</strong> has been developed and tested on <a href=\"https://www.python.org/downloads/\" rel=\"nofollow\">Python 3.5, and 3.6</a></p>\n<p>Also, although it is not strictly required, the usage of a <a href=\"https://virtualenv.pypa.io/en/latest/\" rel=\"nofollow\">virtualenv</a>\nis highly recommended in order to avoid interfering with other software installed in the system\nwhere <strong>SDGym</strong> is run.</p>\n<h2>Install with pip</h2>\n<p>The easiest and recommended way to install <strong>SDGym</strong> is using <a href=\"https://pip.pypa.io/en/stable/\" rel=\"nofollow\">pip</a>:</p>\n<pre>pip install sdgym\n</pre>\n<p>This will pull and install the latest stable release from <a href=\"https://pypi.org/\" rel=\"nofollow\">PyPi</a>.</p>\n<p>If you want to install it from source or contribute to the project please read the\n<a href=\"https://sdv-dev.github.io/SDGym/contributing.html#get-started\" rel=\"nofollow\">Contributing Guide</a> for\nmore details about how to do it.</p>\n<h1>Usage</h1>\n<h2>Benchmarking your own synthesizer</h2>\n<p>All you need to do in order to use the SDGym Benchmark, is to import and call the <code>sdgym.benchmark</code>\nfunction passing it your synthesizer function:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sdgym</span> <span class=\"kn\">import</span> <span class=\"n\">benchmark</span>\n\n<span class=\"n\">scores</span> <span class=\"o\">=</span> <span class=\"n\">benchmark</span><span class=\"p\">(</span><span class=\"n\">synthesizers</span><span class=\"o\">=</span><span class=\"n\">my_synthesizer_function</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>You can learn how to create your own synthesizer function <a href=\"SYNTHESIZERS.md\" rel=\"nofollow\">here</a>.</li>\n<li>You can learn about different arguments for benchmark function <a href=\"BENCHMARK.md\" rel=\"nofollow\">here</a>.</li>\n</ul>\n<p>The output of the <code>benchmark</code> function will be a <code>pd.DataFrame</code> containing the results obtained\nby your synthesizer on each dataset, as well as the results obtained previously by the SDGym\nsynthesizers:</p>\n<pre><code>                        adult/accuracy  adult/f1  ...  ring/test_likelihood\nIndependentSynthesizer         0.56530  0.134593  ...             -1.958888\nUniformSynthesizer             0.39695  0.273753  ...             -2.519416\nIdentitySynthesizer            0.82440  0.659250  ...             -1.705487\n...                                ...       ...  ...                   ...\nmy_synthesizer_function        0.64865  0.210103  ...             -1.964966\n</code></pre>\n<h2>Benchmarking the SDGym Synthesizers</h2>\n<p>If you want to run the SDGym benchmark on the SDGym Synthesizers you can directly pass the\ncorresponding class, or a list of classes, to the <code>benchmark</code> function.</p>\n<p>For example, if you want to run the complete benchmark suite to evaluate all the existing\nsynthesizers you can run (this will take a lot of time to run!):</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sdgym.synthesizers</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">CLBNSynthesizer</span><span class=\"p\">,</span> <span class=\"n\">CTGANSynthesizer</span><span class=\"p\">,</span> <span class=\"n\">IdentitySynthesizer</span><span class=\"p\">,</span> <span class=\"n\">IndependentSynthesizer</span><span class=\"p\">,</span>\n    <span class=\"n\">MedganSynthesizer</span><span class=\"p\">,</span> <span class=\"n\">PrivBNSynthesizer</span><span class=\"p\">,</span> <span class=\"n\">TableganSynthesizer</span><span class=\"p\">,</span> <span class=\"n\">TVAESynthesizer</span><span class=\"p\">,</span>\n    <span class=\"n\">UniformSynthesizer</span><span class=\"p\">,</span> <span class=\"n\">VEEGANSynthesizer</span><span class=\"p\">)</span>\n\n<span class=\"n\">all_synthesizers</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">CLBNSynthesizer</span><span class=\"p\">,</span>\n    <span class=\"n\">IdentitySynthesizer</span><span class=\"p\">,</span>\n    <span class=\"n\">IndependentSynthesizer</span><span class=\"p\">,</span>\n    <span class=\"n\">MedganSynthesizer</span><span class=\"p\">,</span>\n    <span class=\"n\">PrivBNSynthesizer</span><span class=\"p\">,</span>\n    <span class=\"n\">TableganSynthesizer</span><span class=\"p\">,</span>\n    <span class=\"n\">CTGANSynthesizer</span><span class=\"p\">,</span>\n    <span class=\"n\">TVAESynthesizer</span><span class=\"p\">,</span>\n    <span class=\"n\">UniformSynthesizer</span><span class=\"p\">,</span>\n    <span class=\"n\">VEEGANSynthesizer</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n<span class=\"n\">scores</span> <span class=\"o\">=</span> <span class=\"n\">benchmark</span><span class=\"p\">(</span><span class=\"n\">synthesizers</span><span class=\"o\">=</span><span class=\"n\">all_synthesizers</span><span class=\"p\">)</span>\n</pre>\n<p>For further details about all the arguments and possibilities that the <code>benchmark</code> function offers\nplease refer to the <a href=\"BENCHMARK.md\" rel=\"nofollow\">benchmark documentation</a></p>\n<h1>Additional References</h1>\n<ul>\n<li>Datasets used in SDGym are detailed <a href=\"DATASETS.md\" rel=\"nofollow\">here</a>.</li>\n<li>How to write a synthesizer is detailed <a href=\"SYNTHESIZERS.md\" rel=\"nofollow\">here</a>.</li>\n<li>How to use benchmark function is detailed <a href=\"BENCHMARK.md\" rel=\"nofollow\">here</a>.</li>\n<li>Detailed leaderboard results for all the releases are available <a href=\"https://docs.google.com/spreadsheets/d/1hllKn_wDjkr_Yqq9uO5TlQNlj767FSaONC3vrtovaOQ/edit?usp=sharing\" rel=\"nofollow\">here</a>.</li>\n</ul>\n<h1>Related Projects</h1>\n<h2>SDV</h2>\n<p><a href=\"https://github.com/HDI-Project/SDV\" rel=\"nofollow\">SDV</a>, for Synthetic Data Vault, is the end-user library for\nsynthesizing data in development under the <a href=\"https://hdi-dai.lids.mit.edu/\" rel=\"nofollow\">HDI Project</a>.\nSDV allows you to easily model and sample relational datasets using Copulas through a simple API.\nOther features include anonymization of Personal Identifiable Information (PII) and preserving\nrelational integrity on sampled records.</p>\n<h2>CTGAN</h2>\n<p><a href=\"https://github.com/sdv-dev/CTGAN\" rel=\"nofollow\">CTGAN</a> is the GAN based model for synthesizing tabular data\npresented in the <a href=\"https://arxiv.org/abs/1907.00503\" rel=\"nofollow\">Modeling Tabular data using Conditional GAN</a>\npaper. It's also developed by the <a href=\"https://dai-lab.github.io/\" rel=\"nofollow\">MIT's Data to AI Lab</a> and is under\nactive development.</p>\n<h2>TGAN</h2>\n<p><a href=\"https://github.com/sdv-dev/TGAN\" rel=\"nofollow\">TGAN</a> is another GAN based model for synthesizing tabular data.\nIt's also developed by the <a href=\"https://dai-lab.github.io/\" rel=\"nofollow\">MIT's Data to AI Lab</a> and is under\nactive development.</p>\n<h1>History</h1>\n<h2>v0.2.0 - 2020-04-10</h2>\n<p>New Becnhmark API and lots of improved documentation.</p>\n<h3>New Features</h3>\n<ul>\n<li>The benchmark function now returns a complete leaderboard instead of only one score</li>\n<li>Class Synthesizers can be directly passed to the benchmark function</li>\n</ul>\n<h3>Bug Fixes</h3>\n<ul>\n<li>One hot encoding errors in the Independent, VEEGAN and Medgan Synthesizers.</li>\n<li>Proper usage of the <code>eval</code> mode during sampling.</li>\n<li>Fix improperly configured datasets.</li>\n</ul>\n<h2>v0.1.0 - 2019-08-07</h2>\n<p>First release to PyPi</p>\n\n          </div>"}, "last_serial": 6995986, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "4efda65398d4d98c00368eff335e0b0d", "sha256": "f147fd8ecbb80d36c9822a01f0f5be101b252c2a5d58b18193e06fecd745752a"}, "downloads": -1, "filename": "sdgym-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4efda65398d4d98c00368eff335e0b0d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 30713, "upload_time": "2019-08-08T08:52:44", "upload_time_iso_8601": "2019-08-08T08:52:44.497309Z", "url": "https://files.pythonhosted.org/packages/b4/c1/cd8eb52e56672b1d898ebb5467dc0c887e364512032bf8393a1f48d14b8f/sdgym-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6eb90837022ed90cfa57015aea5eabcd", "sha256": "60f25bd1b04e74f2262d5ec0835edd37abfee1464d5380f3f9abaa77b9fcfdf0"}, "downloads": -1, "filename": "sdgym-0.1.0.tar.gz", "has_sig": false, "md5_digest": "6eb90837022ed90cfa57015aea5eabcd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 1415628, "upload_time": "2019-08-08T08:53:14", "upload_time_iso_8601": "2019-08-08T08:53:14.030746Z", "url": "https://files.pythonhosted.org/packages/3b/29/d51ee48a1964f62cfa86f955bf108e6f41402185832fe804c803a5689391/sdgym-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "25ffbb000755945337720e513b11de28", "sha256": "2e233a1d7c30f8be5b311c43ac3b80b72c59a9c8083a1ef954e59ee79f5c951e"}, "downloads": -1, "filename": "sdgym-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "25ffbb000755945337720e513b11de28", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 33006, "upload_time": "2020-04-10T19:29:05", "upload_time_iso_8601": "2020-04-10T19:29:05.156906Z", "url": "https://files.pythonhosted.org/packages/30/08/55f770d4d4413475719833b6338b83551ede074e2d12a7e1f7c129f32305/sdgym-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "758690e9ae1a3f191412f69dbf5578f4", "sha256": "43709f70934ad3106ef4fddefd09386ce6f4d9d67f4706b8ad3cb38b04cda0aa"}, "downloads": -1, "filename": "sdgym-0.2.0.tar.gz", "has_sig": false, "md5_digest": "758690e9ae1a3f191412f69dbf5578f4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 1416360, "upload_time": "2020-04-10T19:30:09", "upload_time_iso_8601": "2020-04-10T19:30:09.357599Z", "url": "https://files.pythonhosted.org/packages/b7/d2/a19e943fcb166979be61e63e5b33cacea73b5a8f4571ff2d4b4e0f786a48/sdgym-0.2.0.tar.gz", "yanked": false}], "0.2.0.dev0": [{"comment_text": "", "digests": {"md5": "09e8ba529793d3dce361eb3b4bf41944", "sha256": "eb5cd4c6c201530d417de759ff3a5123f81b58766a9ea42c1f20d0ba79754113"}, "downloads": -1, "filename": "sdgym-0.2.0.dev0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "09e8ba529793d3dce361eb3b4bf41944", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 31852, "upload_time": "2020-04-10T19:15:36", "upload_time_iso_8601": "2020-04-10T19:15:36.212915Z", "url": "https://files.pythonhosted.org/packages/51/ef/22406b09cc33ad40ea813d6b856b4442c3cef5e3b56ca6a05519808001f1/sdgym-0.2.0.dev0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0622591ace2dc734db4250af5940ce38", "sha256": "395c522c53ed3a943589bf4ddfc2f4e1d415e4e6f4ee46a577e6dfce8b3d7444"}, "downloads": -1, "filename": "sdgym-0.2.0.dev0.tar.gz", "has_sig": false, "md5_digest": "0622591ace2dc734db4250af5940ce38", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 1415229, "upload_time": "2020-04-10T19:16:23", "upload_time_iso_8601": "2020-04-10T19:16:23.768035Z", "url": "https://files.pythonhosted.org/packages/58/e9/f93625c7d4b4ea03a7f35dac8b67e0c70115fb90c4ed5126fdbaca2c82e0/sdgym-0.2.0.dev0.tar.gz", "yanked": false}], "0.2.0.dev1": [{"comment_text": "", "digests": {"md5": "091933d8285aa5697b387531dd8b1d4b", "sha256": "df04925285ae519bd84a63ef33aa955e57f0409adba6a35b3494f3abf26a9047"}, "downloads": -1, "filename": "sdgym-0.2.0.dev1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "091933d8285aa5697b387531dd8b1d4b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 33078, "upload_time": "2020-04-10T19:22:02", "upload_time_iso_8601": "2020-04-10T19:22:02.562097Z", "url": "https://files.pythonhosted.org/packages/24/39/1f0288a6712079f00de5156ab52c0e429f9acacbf8b0bba10d74d90d4997/sdgym-0.2.0.dev1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5e026000d84feb727b690f552daf7b56", "sha256": "336cebe651c7d8a1cf86e0279b24dbab606ccdcc3c30c83f1f4d198807bb170c"}, "downloads": -1, "filename": "sdgym-0.2.0.dev1.tar.gz", "has_sig": false, "md5_digest": "5e026000d84feb727b690f552daf7b56", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 1416487, "upload_time": "2020-04-10T19:22:38", "upload_time_iso_8601": "2020-04-10T19:22:38.492473Z", "url": "https://files.pythonhosted.org/packages/50/bd/d6f6a905cd62b7dfa7ff7ad0862ca49422358cd566f10113eafaf644f948/sdgym-0.2.0.dev1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "25ffbb000755945337720e513b11de28", "sha256": "2e233a1d7c30f8be5b311c43ac3b80b72c59a9c8083a1ef954e59ee79f5c951e"}, "downloads": -1, "filename": "sdgym-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "25ffbb000755945337720e513b11de28", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 33006, "upload_time": "2020-04-10T19:29:05", "upload_time_iso_8601": "2020-04-10T19:29:05.156906Z", "url": "https://files.pythonhosted.org/packages/30/08/55f770d4d4413475719833b6338b83551ede074e2d12a7e1f7c129f32305/sdgym-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "758690e9ae1a3f191412f69dbf5578f4", "sha256": "43709f70934ad3106ef4fddefd09386ce6f4d9d67f4706b8ad3cb38b04cda0aa"}, "downloads": -1, "filename": "sdgym-0.2.0.tar.gz", "has_sig": false, "md5_digest": "758690e9ae1a3f191412f69dbf5578f4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 1416360, "upload_time": "2020-04-10T19:30:09", "upload_time_iso_8601": "2020-04-10T19:30:09.357599Z", "url": "https://files.pythonhosted.org/packages/b7/d2/a19e943fcb166979be61e63e5b33cacea73b5a8f4571ff2d4b4e0f786a48/sdgym-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:56:18 2020"}