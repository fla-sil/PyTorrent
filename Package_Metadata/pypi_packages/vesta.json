{"info": {"author": "UNKNOWN", "author_email": "UNKNOWN", "bugtrack_url": null, "classifiers": [], "description": "Vesta CMS\n=========\n\nA simple Django-based CMS which supports pages published on multiple sites.\n\nThis is a fairly opinionated CMS as it is designed for a specific and fairly\nniche use case: to publish the same CMS pages across multiple sites. As such,\nthere are some design decisions that you might find surprising:\n\n- **Shared content across sites**: All sites have access to the same set of\n  pages. A site can not have customised versions of pages, but you can choose\n  which pages are published on which sites.\n- **Variables in body text**: Similar to django templates, you can include\n  variables in your CMS body text, passing through a context from the view that\n  renders the page. This is to mitigate the strict nature of having non-editable\n  pages; instead you can add site-specific content to be interpolated into the\n  body. By default, we pass just one context variable, which is the site name.\n- **Pages are language aware, but do not have multiple translations**: When\n  creating a page, you must set its language, but there is no functionality to\n  create multiple translations of the page into different languages. If you need\n  to do this, just duplicate the page, change the language code and then\n  translate the body text. The two pages will have no special link to each\n  other.\n\nPlatform support\n----------------\nDjango 1.8+, python 2.7+\n\nInstallation\n------------\n1. ``pip install vesta``\n2. Add ``'vesta'`` to ``INSTALLED_APPS`` in your ``settings.py``\n3. add to urls.py\n\nSettings\n--------\n- ``VESTA_ADMIN_LOGIN_URL`` (optional)\n   - URL to redirect to for the admin login form.\n   - Default: ``settings.LOGIN_FORM``\n- ``VESTA_ADMIN_BASE_TEMPLATE`` (optional)\n   - Path to base template for the admin templates. Must have a\n     ``{% block content %}`` defined within it.\n   - Default: ``vesta/admin/base.html``", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "UNKNOWN", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "vesta", "package_url": "https://pypi.org/project/vesta/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/vesta/", "project_urls": {"Download": "UNKNOWN", "Homepage": "UNKNOWN"}, "release_url": "https://pypi.org/project/vesta/0.0.1.dev0/", "requires_dist": null, "requires_python": null, "summary": "UNKNOWN", "version": "0.0.1.dev0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A simple Django-based CMS which supports pages published on multiple sites.</p>\n<p>This is a fairly opinionated CMS as it is designed for a specific and fairly\nniche use case: to publish the same CMS pages across multiple sites. As such,\nthere are some design decisions that you might find surprising:</p>\n<ul>\n<li><strong>Shared content across sites</strong>: All sites have access to the same set of\npages. A site can not have customised versions of pages, but you can choose\nwhich pages are published on which sites.</li>\n<li><strong>Variables in body text</strong>: Similar to django templates, you can include\nvariables in your CMS body text, passing through a context from the view that\nrenders the page. This is to mitigate the strict nature of having non-editable\npages; instead you can add site-specific content to be interpolated into the\nbody. By default, we pass just one context variable, which is the site name.</li>\n<li><strong>Pages are language aware, but do not have multiple translations</strong>: When\ncreating a page, you must set its language, but there is no functionality to\ncreate multiple translations of the page into different languages. If you need\nto do this, just duplicate the page, change the language code and then\ntranslate the body text. The two pages will have no special link to each\nother.</li>\n</ul>\n<div id=\"platform-support\">\n<h2>Platform support</h2>\n<p>Django 1.8+, python 2.7+</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<ol>\n<li><tt>pip install vesta</tt></li>\n<li>Add <tt>'vesta'</tt> to <tt>INSTALLED_APPS</tt> in your <tt>settings.py</tt></li>\n<li>add to urls.py</li>\n</ol>\n</div>\n<div id=\"settings\">\n<h2>Settings</h2>\n<ul>\n<li><dl>\n<dt><tt>VESTA_ADMIN_LOGIN_URL</tt> (optional)</dt>\n<dd><ul>\n<li>URL to redirect to for the admin login form.</li>\n<li>Default: <tt>settings.LOGIN_FORM</tt></li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt><tt>VESTA_ADMIN_BASE_TEMPLATE</tt> (optional)</dt>\n<dd><ul>\n<li>Path to base template for the admin templates. Must have a\n<tt>{% block content %}</tt> defined within it.</li>\n<li>Default: <tt>vesta/admin/base.html</tt></li>\n</ul>\n</dd>\n</dl>\n</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 2106541, "releases": {"0.0.1.dev0": []}, "urls": [], "timestamp": "Fri May  8 03:36:32 2020"}