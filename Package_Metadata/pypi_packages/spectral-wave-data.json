{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Operating System :: Microsoft :: Windows :: Windows 10", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Scientific/Engineering :: Mathematics", "Topic :: Scientific/Engineering :: Physics"], "description": "# spectral_wave_data\r\n\r\nAn API for ocean wave kinematics\r\n\r\nThis Python package is part of the spectral_wave_data API developed by\r\nthe GitHub organization [SpectralWaveData](https://github.com/SpectralWaveData).\r\n\r\n![alt text](https://raw.githubusercontent.com/SpectralWaveData/spectral_wave_data/master/docs/source/figures/swd_scheme.png)\r\n\r\n\r\n## Purpose and goals\r\n\r\nThe main idea is to provide an open API for boosting research and \r\nindustrial application of spectral ocean wave kinematic.\r\nThis API can be utilized by academic and commercial software developers \r\nto assess effects of ocean gravity waves. Not limited to spectral kinematics, \r\nbut also, as advanced boundary conditions for more sophisticated wave \r\nmodels and to study related effects on marine structures.\r\n\r\nBy using this simple but powerful interface another goal with this API \r\nis to tear down walls between the fields of oceanography, marine \r\nhydrodynamics (flow around marine structures) and structural engineering.\r\n\r\n\r\n## What kind of waves?\r\n\r\nThere are many spectral formulations out there. Our goal is not to \r\nimplement all of them, but to make the API generic in the sense that \r\nmost formulations can apply this API, and that\r\nadditional formulations can easily be tested or added at a later stage\r\nwithout breaking the current API. At this stage we have implemented \r\nlong and short crested waves propagating in infinite or constant water \r\ndepth. For long crested seas support for varying depth is also included.\r\n\r\nThe current version has been used for describing, Airy, Stokes, \r\nStream waves and Higher-Order-Spectral-Method waves of arbitrary order.\r\nDetailed kinematics of simulated rogue waves can be evaluated.\r\n\r\n\r\n## Documentation\r\n\r\nDetailed [documentation](https://spectral-wave-data.readthedocs.io/)\r\ndescribing theory, examples, implementation and related \r\ntools is hosted on [ReadTheDocs](https://readthedocs.org/).\r\n\r\n\r\n## The software\r\n\r\nThis is the python package. However, in general \r\n[spectral_wave_data](https://github.com/SpectralWaveData/spectral_wave_data)\r\nprovides API for several other programming languages:\r\n\r\n- ISO Fortran-2008\r\n- ISO C / C++\r\n- Python 2 and 3\r\n\r\nThe spectral_wave_data Python package mainly contains a class **SpectralWaveData**\r\nproviding the official Python API. In addition, it provides a script **swd_meta**\r\nfor extracting typical meta data from a given SWD-file. Such files contain\r\nthe spectral information of the actual wave trains.\r\n\r\nAs explained in the documentation the class **SpectralWaveData** provides \r\nconsistent exception handling.\r\n\r\n\r\n## Usage\r\n\r\nTypical usage in a Python script or program::\r\n\r\n    from spectral_wave_data import SpectralWaveData\r\n\r\n    # x0/y0/t0/beta are parameters shifting the spatial and temporal reference frame\r\n    swd = SpectralWaveData(file_swd=\"my.swd\", x0=0.0, y0=0.0, t0=0.0, beta=180.0)\r\n\r\n    swd.update_time(time=3.8143127)      # Maximum time can be obtained from: swd['tmax']\r\n\r\n    zeta = swd.elev(x=5.3, y=12.4)\r\n    acc_e = swd.acc_euler(x=7.3, y=-3.4, z=-8.3)\r\n    acc_p = swd.acc_particle(x=7.3, y=-3.4, z=-8.3)\r\n    phi2 = swd.grad_phi_2nd(x=7.3, y=-3.4, z=-8.3)\r\n\r\n    print(\"Surface elevation at (x, y) = \", zeta)\r\n    print(\"Euler (local) acceleration in x-direction at (x,y,z) = \", acc_e.x)\r\n    print(\"Particle acceleration in x-direction at (x,y,z) = \", acc_p.x)\r\n    print(\"d^2(potential)/dxdz at (x,y,z) = \", phi2.xz)\r\n\r\nMeta data from an actual SWD file can be extracted using the console script swd_meta::\r\n\r\n    >>> swd_meta my.swd\r\n    version: 1.0.0\r\n    prog:    raschii-1.0.3\r\n    date:    2020:01:22 19:57:55\r\n    fmt:     100\r\n    shp:     2\r\n    amp:     1\r\n    tmax:    6.3000000938773155\r\n    dt:      0.10000000149011612\r\n    nsteps:  64\r\n    nstrip:  0\r\n    order:   -1\r\n    d:       32.0\r\n    n:       50\r\n    sizex:   220.00000561733003\r\n    lmax:    220.00000561733003\r\n    lmin:    4.400000112346601\r\n    dk:      0.028559932485222816\r\n    cid:     {'model': 'Fenton', 'T': 12.792885811907514, 'height': 18.5, ...}\r\n\r\nOutput and further examples are explained in the \r\n[online documentation](https://spectral-wave-data.readthedocs.io/).\r\n\r\n\r\n## Installation\r\n\r\nTo install spectral_wave_data is usually obtained executing::\r\n\r\n    pip install spectral_wave_data\r\n\r\nin your actual Python environment on Linux or Windows-10. \r\nPython 2.7 or 3.5, 3.6, 3.7 and 3.8 are supported.\r\n\r\nOn windows you may have to download and install the\r\n[Intel redistributable library for Fortran 2020](https://software.intel.com/en-us/articles/redistributable-libraries-for-intel-c-and-fortran-2020-compilers-for-windows)\r\nusing default options, unless you have a recent Intel Fortran compiler installed.\r\n\r\nOn Linux spectral_wave_data is compiled using gfortran. The related GNU libraries \r\nshould most likely already be available in your system.\r\n\r\nFor other systems you need to build the package from source.\r\nTo compile this Python package from source you need access to a \r\nrecent Fortran compiler. E.g gfortran-10 or Intel Fortran 2019 or later.\r\n\r\nDue to the complexity of building from source we refer to the \r\n[documentation](https://spectral-wave-data.readthedocs.io/) and\r\nthe [spectral_wave_data](https://github.com/SpectralWaveData/spectral_wave_data)\r\nGitHub repository for related instructions and download of the source code.\r\n\r\n\r\n### Installation problems?\r\n\r\nIn some rare and odd Python environments users have encountered issues loading\r\nthe spectral_wave_data in combinations with e.g. [numpy](https://pypi.org/project/numpy/).\r\nThe best solution is to reinstall your Python system in a proper way.\r\nHowever, a quick-fix is usually to load spectral_wave_data before numpy because\r\nspectral_wave_data requires a more recent version of some Intel DLLs on Windows.\r\n\r\nThis rare issue is not present if you apply recommended procedures for \r\nsetting up your Python system. Hence, consistently using e.g. pyenv or Anaconda environments.\r\nIn general, manual fumbling of system paths is always a source of subtle problems\r\nand should be avoided.\r\n\r\n\r\n## Copyright and license\r\n\r\nThis software is copyrighted and licensed open-source under the MIT License.\r\n\r\nSee the [spectral_wave_data](https://github.com/SpectralWaveData/spectral_wave_data)\r\nGitHub repository for details.\r\n\r\n\r\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/SpectralWaveData", "keywords": "A,P,I, ,o,c,e,a,n, ,w,a,v,e, ,k,i,n,e,m,a,t,i,c,s", "license": "MIT license - Copyright DNVGL 2019-2020", "maintainer": "Jens B. Helmers & Odin Gramstad, DNVGL", "maintainer_email": "Jens.Bloch.Helmers@dnvgl.com", "name": "spectral-wave-data", "package_url": "https://pypi.org/project/spectral-wave-data/", "platform": "", "project_url": "https://pypi.org/project/spectral-wave-data/", "project_urls": {"Homepage": "https://github.com/SpectralWaveData"}, "release_url": "https://pypi.org/project/spectral-wave-data/1.0.0rc1/", "requires_dist": null, "requires_python": "", "summary": "An API for ocean wave kinematics", "version": "1.0.0rc1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>spectral_wave_data</h1>\n<p>An API for ocean wave kinematics</p>\n<p>This Python package is part of the spectral_wave_data API developed by\nthe GitHub organization <a href=\"https://github.com/SpectralWaveData\" rel=\"nofollow\">SpectralWaveData</a>.</p>\n<p><img alt=\"alt text\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/88fc60f39060b1657a0a9c0d2100ed9aa231cd2e/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f537065637472616c57617665446174612f737065637472616c5f776176655f646174612f6d61737465722f646f63732f736f757263652f666967757265732f7377645f736368656d652e706e67\"></p>\n<h2>Purpose and goals</h2>\n<p>The main idea is to provide an open API for boosting research and\nindustrial application of spectral ocean wave kinematic.\nThis API can be utilized by academic and commercial software developers\nto assess effects of ocean gravity waves. Not limited to spectral kinematics,\nbut also, as advanced boundary conditions for more sophisticated wave\nmodels and to study related effects on marine structures.</p>\n<p>By using this simple but powerful interface another goal with this API\nis to tear down walls between the fields of oceanography, marine\nhydrodynamics (flow around marine structures) and structural engineering.</p>\n<h2>What kind of waves?</h2>\n<p>There are many spectral formulations out there. Our goal is not to\nimplement all of them, but to make the API generic in the sense that\nmost formulations can apply this API, and that\nadditional formulations can easily be tested or added at a later stage\nwithout breaking the current API. At this stage we have implemented\nlong and short crested waves propagating in infinite or constant water\ndepth. For long crested seas support for varying depth is also included.</p>\n<p>The current version has been used for describing, Airy, Stokes,\nStream waves and Higher-Order-Spectral-Method waves of arbitrary order.\nDetailed kinematics of simulated rogue waves can be evaluated.</p>\n<h2>Documentation</h2>\n<p>Detailed <a href=\"https://spectral-wave-data.readthedocs.io/\" rel=\"nofollow\">documentation</a>\ndescribing theory, examples, implementation and related\ntools is hosted on <a href=\"https://readthedocs.org/\" rel=\"nofollow\">ReadTheDocs</a>.</p>\n<h2>The software</h2>\n<p>This is the python package. However, in general\n<a href=\"https://github.com/SpectralWaveData/spectral_wave_data\" rel=\"nofollow\">spectral_wave_data</a>\nprovides API for several other programming languages:</p>\n<ul>\n<li>ISO Fortran-2008</li>\n<li>ISO C / C++</li>\n<li>Python 2 and 3</li>\n</ul>\n<p>The spectral_wave_data Python package mainly contains a class <strong>SpectralWaveData</strong>\nproviding the official Python API. In addition, it provides a script <strong>swd_meta</strong>\nfor extracting typical meta data from a given SWD-file. Such files contain\nthe spectral information of the actual wave trains.</p>\n<p>As explained in the documentation the class <strong>SpectralWaveData</strong> provides\nconsistent exception handling.</p>\n<h2>Usage</h2>\n<p>Typical usage in a Python script or program::</p>\n<pre><code>from spectral_wave_data import SpectralWaveData\n\n# x0/y0/t0/beta are parameters shifting the spatial and temporal reference frame\nswd = SpectralWaveData(file_swd=\"my.swd\", x0=0.0, y0=0.0, t0=0.0, beta=180.0)\n\nswd.update_time(time=3.8143127)      # Maximum time can be obtained from: swd['tmax']\n\nzeta = swd.elev(x=5.3, y=12.4)\nacc_e = swd.acc_euler(x=7.3, y=-3.4, z=-8.3)\nacc_p = swd.acc_particle(x=7.3, y=-3.4, z=-8.3)\nphi2 = swd.grad_phi_2nd(x=7.3, y=-3.4, z=-8.3)\n\nprint(\"Surface elevation at (x, y) = \", zeta)\nprint(\"Euler (local) acceleration in x-direction at (x,y,z) = \", acc_e.x)\nprint(\"Particle acceleration in x-direction at (x,y,z) = \", acc_p.x)\nprint(\"d^2(potential)/dxdz at (x,y,z) = \", phi2.xz)\n</code></pre>\n<p>Meta data from an actual SWD file can be extracted using the console script swd_meta::</p>\n<pre><code>&gt;&gt;&gt; swd_meta my.swd\nversion: 1.0.0\nprog:    raschii-1.0.3\ndate:    2020:01:22 19:57:55\nfmt:     100\nshp:     2\namp:     1\ntmax:    6.3000000938773155\ndt:      0.10000000149011612\nnsteps:  64\nnstrip:  0\norder:   -1\nd:       32.0\nn:       50\nsizex:   220.00000561733003\nlmax:    220.00000561733003\nlmin:    4.400000112346601\ndk:      0.028559932485222816\ncid:     {'model': 'Fenton', 'T': 12.792885811907514, 'height': 18.5, ...}\n</code></pre>\n<p>Output and further examples are explained in the\n<a href=\"https://spectral-wave-data.readthedocs.io/\" rel=\"nofollow\">online documentation</a>.</p>\n<h2>Installation</h2>\n<p>To install spectral_wave_data is usually obtained executing::</p>\n<pre><code>pip install spectral_wave_data\n</code></pre>\n<p>in your actual Python environment on Linux or Windows-10.\nPython 2.7 or 3.5, 3.6, 3.7 and 3.8 are supported.</p>\n<p>On windows you may have to download and install the\n<a href=\"https://software.intel.com/en-us/articles/redistributable-libraries-for-intel-c-and-fortran-2020-compilers-for-windows\" rel=\"nofollow\">Intel redistributable library for Fortran 2020</a>\nusing default options, unless you have a recent Intel Fortran compiler installed.</p>\n<p>On Linux spectral_wave_data is compiled using gfortran. The related GNU libraries\nshould most likely already be available in your system.</p>\n<p>For other systems you need to build the package from source.\nTo compile this Python package from source you need access to a\nrecent Fortran compiler. E.g gfortran-10 or Intel Fortran 2019 or later.</p>\n<p>Due to the complexity of building from source we refer to the\n<a href=\"https://spectral-wave-data.readthedocs.io/\" rel=\"nofollow\">documentation</a> and\nthe <a href=\"https://github.com/SpectralWaveData/spectral_wave_data\" rel=\"nofollow\">spectral_wave_data</a>\nGitHub repository for related instructions and download of the source code.</p>\n<h3>Installation problems?</h3>\n<p>In some rare and odd Python environments users have encountered issues loading\nthe spectral_wave_data in combinations with e.g. <a href=\"https://pypi.org/project/numpy/\" rel=\"nofollow\">numpy</a>.\nThe best solution is to reinstall your Python system in a proper way.\nHowever, a quick-fix is usually to load spectral_wave_data before numpy because\nspectral_wave_data requires a more recent version of some Intel DLLs on Windows.</p>\n<p>This rare issue is not present if you apply recommended procedures for\nsetting up your Python system. Hence, consistently using e.g. pyenv or Anaconda environments.\nIn general, manual fumbling of system paths is always a source of subtle problems\nand should be avoided.</p>\n<h2>Copyright and license</h2>\n<p>This software is copyrighted and licensed open-source under the MIT License.</p>\n<p>See the <a href=\"https://github.com/SpectralWaveData/spectral_wave_data\" rel=\"nofollow\">spectral_wave_data</a>\nGitHub repository for details.</p>\n\n          </div>"}, "last_serial": 6933293, "releases": {"1.0.0rc1": [{"comment_text": "", "digests": {"md5": "9d814950614d6d0fc231b38cadd79eae", "sha256": "a349dcaf13b48854aefd9991b1a6fc49046e0710c9a5e39bbe6a3b1ffbe7a8fa"}, "downloads": -1, "filename": "spectral_wave_data-1.0.0rc1-cp27-cp27m-win_amd64.whl", "has_sig": false, "md5_digest": "9d814950614d6d0fc231b38cadd79eae", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 493114, "upload_time": "2020-04-02T05:15:37", "upload_time_iso_8601": "2020-04-02T05:15:37.102293Z", "url": "https://files.pythonhosted.org/packages/f3/76/89beb87eb488a19f565fd7e4a7a4512cf28cd59431e4faaaa06e0ec675b1/spectral_wave_data-1.0.0rc1-cp27-cp27m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cbb4fef839ffc4b488408c919ea46878", "sha256": "a5efcc161ee14b32d034837d05a209fdc65a62be35c0bbf5e506e866a31a22aa"}, "downloads": -1, "filename": "spectral_wave_data-1.0.0rc1-cp35-cp35m-win_amd64.whl", "has_sig": false, "md5_digest": "cbb4fef839ffc4b488408c919ea46878", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 492717, "upload_time": "2020-04-02T05:52:49", "upload_time_iso_8601": "2020-04-02T05:52:49.375356Z", "url": "https://files.pythonhosted.org/packages/84/5d/ed36822ae737e49ff39259fa749a3928e902e18db30a0f9cf7fed6207ca6/spectral_wave_data-1.0.0rc1-cp35-cp35m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f0d63cf5f22d152216b56370c770bff1", "sha256": "66d5d0fcc4704fc7f834e941da5cf1405024e9624fea0bd8aaf554a25a025604"}, "downloads": -1, "filename": "spectral_wave_data-1.0.0rc1-cp36-cp36m-win_amd64.whl", "has_sig": false, "md5_digest": "f0d63cf5f22d152216b56370c770bff1", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 493035, "upload_time": "2020-04-02T05:52:50", "upload_time_iso_8601": "2020-04-02T05:52:50.803653Z", "url": "https://files.pythonhosted.org/packages/e9/32/c001fe00a5fa8575d08296556021a0e997b4716f607a695b2bdf419b4b80/spectral_wave_data-1.0.0rc1-cp36-cp36m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2c5b5395938e7220e597c8e65f653c1b", "sha256": "15d221979a57ff61362f377c1177c2299b00685ac469df6d0e40252b2a879731"}, "downloads": -1, "filename": "spectral_wave_data-1.0.0rc1-cp37-cp37m-win_amd64.whl", "has_sig": false, "md5_digest": "2c5b5395938e7220e597c8e65f653c1b", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 493034, "upload_time": "2020-04-02T05:52:52", "upload_time_iso_8601": "2020-04-02T05:52:52.598828Z", "url": "https://files.pythonhosted.org/packages/b2/ef/134d9112a9429275e870fe6865d486ddf01aea7301409f076817929f2f35/spectral_wave_data-1.0.0rc1-cp37-cp37m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "63f40c0b85d771992f30bfdb1ae30d25", "sha256": "bcbf13093f1c4d07190b7af40665d2d06353a29f6feaa36dc58942524399bfa4"}, "downloads": -1, "filename": "spectral_wave_data-1.0.0rc1-cp38-cp38-win_amd64.whl", "has_sig": false, "md5_digest": "63f40c0b85d771992f30bfdb1ae30d25", "packagetype": "bdist_wheel", "python_version": "cp38", "requires_python": null, "size": 493033, "upload_time": "2020-04-02T05:53:01", "upload_time_iso_8601": "2020-04-02T05:53:01.552065Z", "url": "https://files.pythonhosted.org/packages/96/40/68643978ed6c0c414d544f625b7e1ba552392a5b730d4d60937646697b37/spectral_wave_data-1.0.0rc1-cp38-cp38-win_amd64.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9d814950614d6d0fc231b38cadd79eae", "sha256": "a349dcaf13b48854aefd9991b1a6fc49046e0710c9a5e39bbe6a3b1ffbe7a8fa"}, "downloads": -1, "filename": "spectral_wave_data-1.0.0rc1-cp27-cp27m-win_amd64.whl", "has_sig": false, "md5_digest": "9d814950614d6d0fc231b38cadd79eae", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 493114, "upload_time": "2020-04-02T05:15:37", "upload_time_iso_8601": "2020-04-02T05:15:37.102293Z", "url": "https://files.pythonhosted.org/packages/f3/76/89beb87eb488a19f565fd7e4a7a4512cf28cd59431e4faaaa06e0ec675b1/spectral_wave_data-1.0.0rc1-cp27-cp27m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cbb4fef839ffc4b488408c919ea46878", "sha256": "a5efcc161ee14b32d034837d05a209fdc65a62be35c0bbf5e506e866a31a22aa"}, "downloads": -1, "filename": "spectral_wave_data-1.0.0rc1-cp35-cp35m-win_amd64.whl", "has_sig": false, "md5_digest": "cbb4fef839ffc4b488408c919ea46878", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 492717, "upload_time": "2020-04-02T05:52:49", "upload_time_iso_8601": "2020-04-02T05:52:49.375356Z", "url": "https://files.pythonhosted.org/packages/84/5d/ed36822ae737e49ff39259fa749a3928e902e18db30a0f9cf7fed6207ca6/spectral_wave_data-1.0.0rc1-cp35-cp35m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f0d63cf5f22d152216b56370c770bff1", "sha256": "66d5d0fcc4704fc7f834e941da5cf1405024e9624fea0bd8aaf554a25a025604"}, "downloads": -1, "filename": "spectral_wave_data-1.0.0rc1-cp36-cp36m-win_amd64.whl", "has_sig": false, "md5_digest": "f0d63cf5f22d152216b56370c770bff1", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 493035, "upload_time": "2020-04-02T05:52:50", "upload_time_iso_8601": "2020-04-02T05:52:50.803653Z", "url": "https://files.pythonhosted.org/packages/e9/32/c001fe00a5fa8575d08296556021a0e997b4716f607a695b2bdf419b4b80/spectral_wave_data-1.0.0rc1-cp36-cp36m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2c5b5395938e7220e597c8e65f653c1b", "sha256": "15d221979a57ff61362f377c1177c2299b00685ac469df6d0e40252b2a879731"}, "downloads": -1, "filename": "spectral_wave_data-1.0.0rc1-cp37-cp37m-win_amd64.whl", "has_sig": false, "md5_digest": "2c5b5395938e7220e597c8e65f653c1b", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 493034, "upload_time": "2020-04-02T05:52:52", "upload_time_iso_8601": "2020-04-02T05:52:52.598828Z", "url": "https://files.pythonhosted.org/packages/b2/ef/134d9112a9429275e870fe6865d486ddf01aea7301409f076817929f2f35/spectral_wave_data-1.0.0rc1-cp37-cp37m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "63f40c0b85d771992f30bfdb1ae30d25", "sha256": "bcbf13093f1c4d07190b7af40665d2d06353a29f6feaa36dc58942524399bfa4"}, "downloads": -1, "filename": "spectral_wave_data-1.0.0rc1-cp38-cp38-win_amd64.whl", "has_sig": false, "md5_digest": "63f40c0b85d771992f30bfdb1ae30d25", "packagetype": "bdist_wheel", "python_version": "cp38", "requires_python": null, "size": 493033, "upload_time": "2020-04-02T05:53:01", "upload_time_iso_8601": "2020-04-02T05:53:01.552065Z", "url": "https://files.pythonhosted.org/packages/96/40/68643978ed6c0c414d544f625b7e1ba552392a5b730d4d60937646697b37/spectral_wave_data-1.0.0rc1-cp38-cp38-win_amd64.whl", "yanked": false}], "timestamp": "Fri May  8 03:05:38 2020"}