{"info": {"author": "Ofek Lev", "author_email": "ofekmeister@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Topic :: Software Development :: Libraries :: Python Modules"], "description": ".. image:: https://travis-ci.org/Ofekmeister/depq.svg?branch=master\n  :target: https://travis-ci.org/Ofekmeister/depq\n\n.. image:: https://coveralls.io/repos/Ofekmeister/depq/badge.svg?branch=master\n  :target: https://coveralls.io/r/Ofekmeister/depq?branch=master\n\n==================================\ndepq - Double-ended priority queue\n==================================\n\n- Python implementation of a thread-safe and efficient\n  double-ended priority queue (DEPQ) in which items and their\n  priority values are stored in a deque object as tuples.\n- This of course can also be used as a regular priority queue, or\n  simply a FIFO/LIFO queue.\n- Priority queues have many uses such as scheduling, event driven\n  simulation, heuristic analysis, spam filtering, graph searching, etc.\n\nFeatures & advantages of this implementation:\n---------------------------------------------\n\n- Completely thread-safe\n- Serializable via pickling or JSON\n- Priority values can be ints/floats, numpy types, strings, or\n  any other comparable type you choose!\n- popfirst() and poplast() have O(1) performance instead of\n  running in logarithmic time like in a standard DEPQ or other\n  heap-derived structure\n- Naturally fast also because deque object is implemented in C\n- Items with equal priorities are sorted in the order they were\n  originally added\n- Specific items can be deleted or their priorities changed\n- Membership testing with 'in' operator occurs in O(1) as does\n  getting an item's frequency in DEPQ via count(item)\n\nImplementation:\n---------------\n\n- Priorities are always in proper order, thus, a binary search\n  is performed to find the right index with which to insert new\n  items when specifying priority. Normally, this would result in\n  O(n log n) performance when adding items via insert(item, priority)\n  where self.high() > priority > self.low() because deque (as a\n  doubly linked list) random access is O(n).\n\n  Though, ACTUALLY that is not the case here as I've been able to\n  reduce that to O(n) by modifying the binary search to operate while\n  the internal deque is concurrently rotating.\n\nExamples:\n---------\n\n>>> from textwrap import fill  # For nice wrapped printing\n>>> from depq import DEPQ\n>>>\n>>> # Defaults. If iterable is not None, extend(iterable) will be\n>>> # called (example below). If maxlen is not None, abs(int(maxlen))\n>>> # will become the length limit. If a maxlen is set and an item\n>>> # is added with a priority > lowest prioritized item, it will be\n>>> # added and the last item will be popped. After instantiation, the\n>>> # maxlen can be retrieved with maxlen() and set with set_maxlen(length).\n>>> depq = DEPQ(iterable=None, maxlen=None)\n>>>\n>>> # Add some characters with their ordinal\n>>> # values as priority and keep count\n>>> for c in 'AN_ERRONEOUS_STRING':\n...     count = list(  # This is hacky and not important, skip next 4 lines :)\n...         x + 1 if '{} #{}'.format(c, x + 1) in depq\n...         else next(iter(())) if x != 0 else 0\n...         for x in range(len(depq) + 1)\n...     )[-1]\n...\n...     depq.insert('{} #{}'.format(c, count + 1), ord(c))  # item, priority\n...\n>>> print(fill(str(depq), 77))\nDEPQ([('_ #1', 95), ('_ #2', 95), ('U #1', 85), ('T #1', 84), ('S #1', 83),\n('S #2', 83), ('R #1', 82), ('R #2', 82), ('R #3', 82), ('O #1', 79), ('O\n#2', 79), ('N #1', 78), ('N #2', 78), ('N #3', 78), ('I #1', 73), ('G #1',\n71), ('E #1', 69), ('E #2', 69), ('A #1', 65)])\n>>>\n>>> # As you can see items with equal priorities are sorted in the order\n>>> # they were originally added. Also note DEPQ root (depq[0]) is highest\n>>> # priority like a max heap.\n>>>\n>>> depq.first()\n'_ #1'\n>>> depq.last()\n'A #1'\n>>> depq.high()\n95\n>>> depq.low()\n65\n>>> depq[7]  # Returns tuple(item, priority)\n('R #2', 82)\n>>>\n>>> depq.poplast()\n('A #1', 65)\n>>> depq.last()\n'E #2'\n>>>\n>>> depq.size()  # Alias for len(DEPQ)\n18\n>>> depq.is_empty()\nFalse\n>>> depq.clear()\n>>> depq.is_empty()\nTrue\n>>>\n>>> # Extend any length iterable of iterables of length >= 2\n>>> depq.extend([('bar', 1, 'arbitrary'), (None, 5), ('foo', 2, 'blah')])\n>>> depq\nDEPQ([(None, 5), ('foo', 2), ('bar', 1)])\n>>>\n>>> depq.clear()\n>>>\n>>> depq.addfirst('starter')  # For an empty DEPQ, addfirst & addlast are\n>>>                           # functionally identical; they add item to DEPQ\n>>> depq                      # with given priority, or default 0\nDEPQ([('starter', 0)])\n>>>\n>>> depq.addfirst('high', depq.high() + 1)\n>>> depq.addlast('low', depq.low() - 1)\n>>> depq\nDEPQ([('high', 1), ('starter', 0), ('low', -1)])\n>>>\n>>> depq.addfirst('higher')  # Default priority DEPQ.high()\n>>> depq.addlast('lower')  # Default priority DEPQ.low()\n>>> depq\nDEPQ([('higher', 1), ('high', 1), ('starter', 0), ('low', -1), ('lower', -1)])\n>>>\n>>> depq.addfirst('highest', 0)  # Invalid priority raises exception\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"C:\\Python34\\lib\\depq.py\", line 340, in addfirst\n    raise ValueError('Priority must be >= '\nValueError: Priority must be >= highest priority.\n>>>\n>>> del depq[0]  # As does del\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"C:\\Python34\\lib\\depq.py\", line 639, in __delitem__\n    raise NotImplementedError('Items cannot be deleted by '\nNotImplementedError: Items cannot be deleted by referencing arbitrary indices.\n>>>\n>>> depq.clear()\n>>> depq.count(None)\n0\n>>> for i in range(10):\n...     depq.insert(None, i)\n...\n>>> print(fill(str(depq), 77))\nDEPQ([(None, 9), (None, 8), (None, 7), (None, 6), (None, 5), (None, 4),\n(None, 3), (None, 2), (None, 1), (None, 0)])\n>>>\n>>> None in depq\nTrue\n>>> depq.count(None)\n10\n>>> depq.remove(None)  # Removes item from DEPQ, default # of removals is 1\n[(None, 0)]\n>>>\n>>> print(fill(str(depq), 77))\nDEPQ([(None, 9), (None, 8), (None, 7), (None, 6), (None, 5), (None, 4),\n(None, 3), (None, 2), (None, 1)])\n>>>\n>>> depq.remove(None, 4)  # As you see, returns list of tuple(item, priority)\n[(None, 1), (None, 2), (None, 3), (None, 4)]\n>>> print(fill(str(depq), 77))\nDEPQ([(None, 9), (None, 8), (None, 7), (None, 6), (None, 5)])\n>>>\n>>> depq[None] = 7  # Alias for DEPQ.insert(item, priority)\n>>> print(fill(str(depq), 77))\nDEPQ([(None, 9), (None, 8), (None, 7), (None, 7), (None, 6), (None, 5)])\n>>>\n>>> depq.elim(None)  # This simply calls DEPQ.remove(item, -1)\n[(None, 5), (None, 6), (None, 7), (None, 7), (None, 8), (None, 9)]\n>>> print(fill(str(depq), 77))\nDEPQ([])\n>>>\n>>> import pickle  # Pickling won't work if items aren't picklable\n>>> import json  # JSON won't work if items aren't JSON serializable\n>>>\n>>> for i in range(5):\n...     depq.insert([i], i)  # Unhashable types allowed but don't mutate them!\n...\n>>> depq\nDEPQ([([4], 4), ([3], 3), ([2], 2), ([1], 1), ([0], 0)])\n>>>\n>>> binary_depq = pickle.dumps(depq)\n>>> print(fill(str(binary_depq), 77))\nb'\\x80\\x03cdepq\\nDEPQ\\nq\\x00)\\x81q\\x01}q\\x02(X\\x05\\x00\\x00\\x00itemsq\\x03}q\\x0\n4(X\\x03\\x00\\x00\\x00[1]q\\x05K\\x01X\\x03\\x00\\x00\\x00[3]q\\x06K\\x01X\\x03\\x00\\x00\\x\n00[2]q\\x07K\\x01X\\x03\\x00\\x00\\x00[4]q\\x08K\\x01X\\x03\\x00\\x00\\x00[0]q\\tK\\x01uX\\x\n04\\x00\\x00\\x00dataq\\nccollections\\ndeque\\nq\\x0b]q\\x0c(]q\\rK\\x04aK\\x04\\x86q\\x0\ne]q\\x0fK\\x03aK\\x03\\x86q\\x10]q\\x11K\\x02aK\\x02\\x86q\\x12]q\\x13K\\x01aK\\x01\\x86q\\x\n14]q\\x15K\\x00aK\\x00\\x86q\\x16e\\x85q\\x17Rq\\x18X\\x05\\x00\\x00\\x00startq\\x19K\\x00u\nb.'\n>>>\n>>> json_depq = json.dumps(depq.to_json())\n>>> print(fill(json_depq, 77))\n{\"items\": {\"[1]\": 1, \"[3]\": 1, \"[2]\": 1, \"[4]\": 1, \"[0]\": 1}, \"data\": [[[4],\n4], [[3], 3], [[2], 2], [[1], 1], [[0], 0]], \"start\": 0}\n>>>\n>>> depq_from_pickle = pickle.loads(binary_depq)\n>>> depq_from_json = DEPQ.from_json(json_depq)  # Classmethod returns new DEPQ\n>>>\n>>> depq\nDEPQ([([4], 4), ([3], 3), ([2], 2), ([1], 1), ([0], 0)])\n>>> depq_from_pickle\nDEPQ([([4], 4), ([3], 3), ([2], 2), ([1], 1), ([0], 0)])\n>>> depq_from_json\nDEPQ([([4], 4), ([3], 3), ([2], 2), ([1], 1), ([0], 0)])\n>>>\n\nNotes:\n------\n\n- The items in DEPQ are also stored along with their frequency in a\n  separate dict for O(1) lookup. If item is un-hashable, the repr()\n  of that item is stored instead. So 'item in DEPQ' would check the\n  dict for item and if TypeError is raised it would try repr(item).\n- This implementation inserts in the middle in linear time whereas\n  a textbook DEPQ is O(log n). In actual use cases though, this\n  infinitesimal increase in run time is irrelevant, especially when\n  one considers the extra functionality gained coupled with the\n  fact that the other 2 main operations popfirst() and poplast() now\n  occur in constant time.\n\n\n", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/Ofekmeister/depq", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Ofekmeister/depq", "keywords": "double ended priority queue,depq,priority queue,data structure,scheduling,heuristic analysis", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "depq", "package_url": "https://pypi.org/project/depq/", "platform": "", "project_url": "https://pypi.org/project/depq/", "project_urls": {"Download": "https://github.com/Ofekmeister/depq", "Homepage": "https://github.com/Ofekmeister/depq"}, "release_url": "https://pypi.org/project/depq/1.5.5/", "requires_dist": null, "requires_python": "", "summary": "Double-ended priority queue", "version": "1.5.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/Ofekmeister/depq\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/Ofekmeister/depq.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f09e93cacf0050094e500576f7c4013b96ee7a17/68747470733a2f2f7472617669732d63692e6f72672f4f66656b6d6569737465722f646570712e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/r/Ofekmeister/depq?branch=master\" rel=\"nofollow\"><img alt=\"https://coveralls.io/repos/Ofekmeister/depq/badge.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3a983909839503244311ceaabb89c861de4e0423/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f4f66656b6d6569737465722f646570712f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<div id=\"depq-double-ended-priority-queue\">\n<h2>depq - Double-ended priority queue</h2>\n<ul>\n<li>Python implementation of a thread-safe and efficient\ndouble-ended priority queue (DEPQ) in which items and their\npriority values are stored in a deque object as tuples.</li>\n<li>This of course can also be used as a regular priority queue, or\nsimply a FIFO/LIFO queue.</li>\n<li>Priority queues have many uses such as scheduling, event driven\nsimulation, heuristic analysis, spam filtering, graph searching, etc.</li>\n</ul>\n<div id=\"features-advantages-of-this-implementation\">\n<h3>Features &amp; advantages of this implementation:</h3>\n<ul>\n<li>Completely thread-safe</li>\n<li>Serializable via pickling or JSON</li>\n<li>Priority values can be ints/floats, numpy types, strings, or\nany other comparable type you choose!</li>\n<li>popfirst() and poplast() have O(1) performance instead of\nrunning in logarithmic time like in a standard DEPQ or other\nheap-derived structure</li>\n<li>Naturally fast also because deque object is implemented in C</li>\n<li>Items with equal priorities are sorted in the order they were\noriginally added</li>\n<li>Specific items can be deleted or their priorities changed</li>\n<li>Membership testing with \u2018in\u2019 operator occurs in O(1) as does\ngetting an item\u2019s frequency in DEPQ via count(item)</li>\n</ul>\n</div>\n<div id=\"implementation\">\n<h3>Implementation:</h3>\n<ul>\n<li><p>Priorities are always in proper order, thus, a binary search\nis performed to find the right index with which to insert new\nitems when specifying priority. Normally, this would result in\nO(n log n) performance when adding items via insert(item, priority)\nwhere self.high() &gt; priority &gt; self.low() because deque (as a\ndoubly linked list) random access is O(n).</p>\n<p>Though, ACTUALLY that is not the case here as I\u2019ve been able to\nreduce that to O(n) by modifying the binary search to operate while\nthe internal deque is concurrently rotating.</p>\n</li>\n</ul>\n</div>\n<div id=\"examples\">\n<h3>Examples:</h3>\n<pre>&gt;&gt;&gt; from textwrap import fill  # For nice wrapped printing\n&gt;&gt;&gt; from depq import DEPQ\n&gt;&gt;&gt;\n&gt;&gt;&gt; # Defaults. If iterable is not None, extend(iterable) will be\n&gt;&gt;&gt; # called (example below). If maxlen is not None, abs(int(maxlen))\n&gt;&gt;&gt; # will become the length limit. If a maxlen is set and an item\n&gt;&gt;&gt; # is added with a priority &gt; lowest prioritized item, it will be\n&gt;&gt;&gt; # added and the last item will be popped. After instantiation, the\n&gt;&gt;&gt; # maxlen can be retrieved with maxlen() and set with set_maxlen(length).\n&gt;&gt;&gt; depq = DEPQ(iterable=None, maxlen=None)\n&gt;&gt;&gt;\n&gt;&gt;&gt; # Add some characters with their ordinal\n&gt;&gt;&gt; # values as priority and keep count\n&gt;&gt;&gt; for c in 'AN_ERRONEOUS_STRING':\n...     count = list(  # This is hacky and not important, skip next 4 lines :)\n...         x + 1 if '{} #{}'.format(c, x + 1) in depq\n...         else next(iter(())) if x != 0 else 0\n...         for x in range(len(depq) + 1)\n...     )[-1]\n...\n...     depq.insert('{} #{}'.format(c, count + 1), ord(c))  # item, priority\n...\n&gt;&gt;&gt; print(fill(str(depq), 77))\nDEPQ([('_ #1', 95), ('_ #2', 95), ('U #1', 85), ('T #1', 84), ('S #1', 83),\n('S #2', 83), ('R #1', 82), ('R #2', 82), ('R #3', 82), ('O #1', 79), ('O\n#2', 79), ('N #1', 78), ('N #2', 78), ('N #3', 78), ('I #1', 73), ('G #1',\n71), ('E #1', 69), ('E #2', 69), ('A #1', 65)])\n&gt;&gt;&gt;\n&gt;&gt;&gt; # As you can see items with equal priorities are sorted in the order\n&gt;&gt;&gt; # they were originally added. Also note DEPQ root (depq[0]) is highest\n&gt;&gt;&gt; # priority like a max heap.\n&gt;&gt;&gt;\n&gt;&gt;&gt; depq.first()\n'_ #1'\n&gt;&gt;&gt; depq.last()\n'A #1'\n&gt;&gt;&gt; depq.high()\n95\n&gt;&gt;&gt; depq.low()\n65\n&gt;&gt;&gt; depq[7]  # Returns tuple(item, priority)\n('R #2', 82)\n&gt;&gt;&gt;\n&gt;&gt;&gt; depq.poplast()\n('A #1', 65)\n&gt;&gt;&gt; depq.last()\n'E #2'\n&gt;&gt;&gt;\n&gt;&gt;&gt; depq.size()  # Alias for len(DEPQ)\n18\n&gt;&gt;&gt; depq.is_empty()\nFalse\n&gt;&gt;&gt; depq.clear()\n&gt;&gt;&gt; depq.is_empty()\nTrue\n&gt;&gt;&gt;\n&gt;&gt;&gt; # Extend any length iterable of iterables of length &gt;= 2\n&gt;&gt;&gt; depq.extend([('bar', 1, 'arbitrary'), (None, 5), ('foo', 2, 'blah')])\n&gt;&gt;&gt; depq\nDEPQ([(None, 5), ('foo', 2), ('bar', 1)])\n&gt;&gt;&gt;\n&gt;&gt;&gt; depq.clear()\n&gt;&gt;&gt;\n&gt;&gt;&gt; depq.addfirst('starter')  # For an empty DEPQ, addfirst &amp; addlast are\n&gt;&gt;&gt;                           # functionally identical; they add item to DEPQ\n&gt;&gt;&gt; depq                      # with given priority, or default 0\nDEPQ([('starter', 0)])\n&gt;&gt;&gt;\n&gt;&gt;&gt; depq.addfirst('high', depq.high() + 1)\n&gt;&gt;&gt; depq.addlast('low', depq.low() - 1)\n&gt;&gt;&gt; depq\nDEPQ([('high', 1), ('starter', 0), ('low', -1)])\n&gt;&gt;&gt;\n&gt;&gt;&gt; depq.addfirst('higher')  # Default priority DEPQ.high()\n&gt;&gt;&gt; depq.addlast('lower')  # Default priority DEPQ.low()\n&gt;&gt;&gt; depq\nDEPQ([('higher', 1), ('high', 1), ('starter', 0), ('low', -1), ('lower', -1)])\n&gt;&gt;&gt;\n&gt;&gt;&gt; depq.addfirst('highest', 0)  # Invalid priority raises exception\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"C:\\Python34\\lib\\depq.py\", line 340, in addfirst\n    raise ValueError('Priority must be &gt;= '\nValueError: Priority must be &gt;= highest priority.\n&gt;&gt;&gt;\n&gt;&gt;&gt; del depq[0]  # As does del\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"C:\\Python34\\lib\\depq.py\", line 639, in __delitem__\n    raise NotImplementedError('Items cannot be deleted by '\nNotImplementedError: Items cannot be deleted by referencing arbitrary indices.\n&gt;&gt;&gt;\n&gt;&gt;&gt; depq.clear()\n&gt;&gt;&gt; depq.count(None)\n0\n&gt;&gt;&gt; for i in range(10):\n...     depq.insert(None, i)\n...\n&gt;&gt;&gt; print(fill(str(depq), 77))\nDEPQ([(None, 9), (None, 8), (None, 7), (None, 6), (None, 5), (None, 4),\n(None, 3), (None, 2), (None, 1), (None, 0)])\n&gt;&gt;&gt;\n&gt;&gt;&gt; None in depq\nTrue\n&gt;&gt;&gt; depq.count(None)\n10\n&gt;&gt;&gt; depq.remove(None)  # Removes item from DEPQ, default # of removals is 1\n[(None, 0)]\n&gt;&gt;&gt;\n&gt;&gt;&gt; print(fill(str(depq), 77))\nDEPQ([(None, 9), (None, 8), (None, 7), (None, 6), (None, 5), (None, 4),\n(None, 3), (None, 2), (None, 1)])\n&gt;&gt;&gt;\n&gt;&gt;&gt; depq.remove(None, 4)  # As you see, returns list of tuple(item, priority)\n[(None, 1), (None, 2), (None, 3), (None, 4)]\n&gt;&gt;&gt; print(fill(str(depq), 77))\nDEPQ([(None, 9), (None, 8), (None, 7), (None, 6), (None, 5)])\n&gt;&gt;&gt;\n&gt;&gt;&gt; depq[None] = 7  # Alias for DEPQ.insert(item, priority)\n&gt;&gt;&gt; print(fill(str(depq), 77))\nDEPQ([(None, 9), (None, 8), (None, 7), (None, 7), (None, 6), (None, 5)])\n&gt;&gt;&gt;\n&gt;&gt;&gt; depq.elim(None)  # This simply calls DEPQ.remove(item, -1)\n[(None, 5), (None, 6), (None, 7), (None, 7), (None, 8), (None, 9)]\n&gt;&gt;&gt; print(fill(str(depq), 77))\nDEPQ([])\n&gt;&gt;&gt;\n&gt;&gt;&gt; import pickle  # Pickling won't work if items aren't picklable\n&gt;&gt;&gt; import json  # JSON won't work if items aren't JSON serializable\n&gt;&gt;&gt;\n&gt;&gt;&gt; for i in range(5):\n...     depq.insert([i], i)  # Unhashable types allowed but don't mutate them!\n...\n&gt;&gt;&gt; depq\nDEPQ([([4], 4), ([3], 3), ([2], 2), ([1], 1), ([0], 0)])\n&gt;&gt;&gt;\n&gt;&gt;&gt; binary_depq = pickle.dumps(depq)\n&gt;&gt;&gt; print(fill(str(binary_depq), 77))\nb'\\x80\\x03cdepq\\nDEPQ\\nq\\x00)\\x81q\\x01}q\\x02(X\\x05\\x00\\x00\\x00itemsq\\x03}q\\x0\n4(X\\x03\\x00\\x00\\x00[1]q\\x05K\\x01X\\x03\\x00\\x00\\x00[3]q\\x06K\\x01X\\x03\\x00\\x00\\x\n00[2]q\\x07K\\x01X\\x03\\x00\\x00\\x00[4]q\\x08K\\x01X\\x03\\x00\\x00\\x00[0]q\\tK\\x01uX\\x\n04\\x00\\x00\\x00dataq\\nccollections\\ndeque\\nq\\x0b]q\\x0c(]q\\rK\\x04aK\\x04\\x86q\\x0\ne]q\\x0fK\\x03aK\\x03\\x86q\\x10]q\\x11K\\x02aK\\x02\\x86q\\x12]q\\x13K\\x01aK\\x01\\x86q\\x\n14]q\\x15K\\x00aK\\x00\\x86q\\x16e\\x85q\\x17Rq\\x18X\\x05\\x00\\x00\\x00startq\\x19K\\x00u\nb.'\n&gt;&gt;&gt;\n&gt;&gt;&gt; json_depq = json.dumps(depq.to_json())\n&gt;&gt;&gt; print(fill(json_depq, 77))\n{\"items\": {\"[1]\": 1, \"[3]\": 1, \"[2]\": 1, \"[4]\": 1, \"[0]\": 1}, \"data\": [[[4],\n4], [[3], 3], [[2], 2], [[1], 1], [[0], 0]], \"start\": 0}\n&gt;&gt;&gt;\n&gt;&gt;&gt; depq_from_pickle = pickle.loads(binary_depq)\n&gt;&gt;&gt; depq_from_json = DEPQ.from_json(json_depq)  # Classmethod returns new DEPQ\n&gt;&gt;&gt;\n&gt;&gt;&gt; depq\nDEPQ([([4], 4), ([3], 3), ([2], 2), ([1], 1), ([0], 0)])\n&gt;&gt;&gt; depq_from_pickle\nDEPQ([([4], 4), ([3], 3), ([2], 2), ([1], 1), ([0], 0)])\n&gt;&gt;&gt; depq_from_json\nDEPQ([([4], 4), ([3], 3), ([2], 2), ([1], 1), ([0], 0)])\n&gt;&gt;&gt;\n</pre>\n</div>\n<div id=\"notes\">\n<h3>Notes:</h3>\n<ul>\n<li>The items in DEPQ are also stored along with their frequency in a\nseparate dict for O(1) lookup. If item is un-hashable, the repr()\nof that item is stored instead. So \u2018item in DEPQ\u2019 would check the\ndict for item and if TypeError is raised it would try repr(item).</li>\n<li>This implementation inserts in the middle in linear time whereas\na textbook DEPQ is O(log n). In actual use cases though, this\ninfinitesimal increase in run time is irrelevant, especially when\none considers the extra functionality gained coupled with the\nfact that the other 2 main operations popfirst() and poplast() now\noccur in constant time.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2955248, "releases": {"1.5.1": [{"comment_text": "", "digests": {"md5": "07abc0f411f8a07bb9495d4dfe26a5ca", "sha256": "bff7c6b09fa5b673004fc66479bd73d67e0e2608fd66dd99785ac98f360a8617"}, "downloads": -1, "filename": "depq-1.5.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "07abc0f411f8a07bb9495d4dfe26a5ca", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 16818, "upload_time": "2015-04-23T00:26:15", "upload_time_iso_8601": "2015-04-23T00:26:15.156909Z", "url": "https://files.pythonhosted.org/packages/2f/ca/e743f54e32b4735dadc5a41f42c728000d06c4a2a43c24f8c69674b8debb/depq-1.5.1-py2.py3-none-any.whl", "yanked": false}], "1.5.2": [{"comment_text": "", "digests": {"md5": "d5a7ebe252c04cfe6850e236b163c47d", "sha256": "a2f999997703a296691ce742527b078d39431c84c0526e3146bbb9b803bf7be5"}, "downloads": -1, "filename": "depq-1.5.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d5a7ebe252c04cfe6850e236b163c47d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 13712, "upload_time": "2016-03-26T03:16:40", "upload_time_iso_8601": "2016-03-26T03:16:40.183687Z", "url": "https://files.pythonhosted.org/packages/78/a6/0fd740a8532fffc932a7c65df458ffc323e787ba86a5fc42c0b5071f8f4d/depq-1.5.2-py2.py3-none-any.whl", "yanked": false}], "1.5.3": [{"comment_text": "", "digests": {"md5": "fa0714b03a2a337e6b4c64242432360f", "sha256": "9e75463c416d908d235e403637cabe0d4018935bbbee74134a312cf8a9ba8a91"}, "downloads": -1, "filename": "depq-1.5.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "fa0714b03a2a337e6b4c64242432360f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 13715, "upload_time": "2016-03-26T04:50:09", "upload_time_iso_8601": "2016-03-26T04:50:09.078803Z", "url": "https://files.pythonhosted.org/packages/34/b6/a0458b729b7365dcb1223bbb3c0fcd967678f14a7b75670456cfc6a6ac76/depq-1.5.3-py2.py3-none-any.whl", "yanked": false}], "1.5.4": [{"comment_text": "", "digests": {"md5": "612b4631c76b5f4c1c3b1fbd1cc1cb0f", "sha256": "93f1c7b67d4787b804dc98f637e38fc8470f80d48eded725953ecd3396dadf83"}, "downloads": -1, "filename": "depq-1.5.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "612b4631c76b5f4c1c3b1fbd1cc1cb0f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 14278, "upload_time": "2016-12-10T20:31:15", "upload_time_iso_8601": "2016-12-10T20:31:15.044190Z", "url": "https://files.pythonhosted.org/packages/19/41/b09eecd69b9a5566d295fcfa733bd6eb424d315abd22efd5cdf906429708/depq-1.5.4-py2.py3-none-any.whl", "yanked": false}], "1.5.5": [{"comment_text": "", "digests": {"md5": "6d31e25e3849fc3acd8574b558b99641", "sha256": "3c05b915d1e4e4ff8f50d0572c6894b014423c5094a1d3fb82292c1c46c97619"}, "downloads": -1, "filename": "depq-1.5.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6d31e25e3849fc3acd8574b558b99641", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 14263, "upload_time": "2017-06-16T19:01:47", "upload_time_iso_8601": "2017-06-16T19:01:47.563306Z", "url": "https://files.pythonhosted.org/packages/ce/6f/fec71bb1b2d91aa086eb55f7982b4f5853d819827c0b7df2d26faf3f20c1/depq-1.5.5-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6d31e25e3849fc3acd8574b558b99641", "sha256": "3c05b915d1e4e4ff8f50d0572c6894b014423c5094a1d3fb82292c1c46c97619"}, "downloads": -1, "filename": "depq-1.5.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6d31e25e3849fc3acd8574b558b99641", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 14263, "upload_time": "2017-06-16T19:01:47", "upload_time_iso_8601": "2017-06-16T19:01:47.563306Z", "url": "https://files.pythonhosted.org/packages/ce/6f/fec71bb1b2d91aa086eb55f7982b4f5853d819827c0b7df2d26faf3f20c1/depq-1.5.5-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:39:01 2020"}