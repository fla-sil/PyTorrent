{"info": {"author": "Arve Seljebu", "author_email": "arve.seljebu@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4"], "description": "objectifiedetree\n================\n\n|build-status-image| |pypi-version| |wheel|\n\nOverview\n--------\n\nWouldn't it be nice to use dot notation for ElementTrees? This package\nallows for:\n\n.. code:: python\n\n    tree = ET.fromstring('<root><a><b c=\"asdf\" /></a></root>')\n    a = tree.a\n    b = a.b\n    b.attrib['c'] == \"asdf\" # True\n\n``tree.a`` will be a\n```Element`` <https://docs.python.org/3.4/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element>`__\nwith the extra\n```__getattr__`` <https://github.com/arve0/objectifiedetree/blob/master/objectifiedetree/__init__.py#L11-12>`__\nmethod. This means that you can use the element as you would do\nnormally, but names in your XML that crases with python's methods or\nattributes must be accessed through ``tree.find(xpath)``.\n\nThis package uses the python implementation of etree, which makes it\nslower than etree found in CPython. An alternative would be to\nmonkey-patch the built-in with\n`forbiddenfruit <https://github.com/clarete/forbiddenfruit>`__, but I\nhaven't looked into this.\n\n``objectifiedetree`` has copied the python implementation of etree from\n`CPython 3.4\nLib/xml/etree <https://github.com/python/cpython/tree/master/Lib/xml/etree>`__\nand will probably only work with Python 3.4.\n\nInstallation\n------------\n\nInstall using ``pip``...\n\n.. code:: bash\n\n    pip install objectifiedetree\n\nExample\n-------\n\n.. code:: python\n\n    from objectifiedetree import *\n\n    tree = ET.parse('/path/to/file.xml')\n    # dot notation :-)\n    el = tree.xpath.to.your.element\n\n    # use normal etree attributes\n    print(el.attrib)\n\n    # access name crashes\n    attrib_el = el.find('./attrib')\n\nDevelopment\n-----------\n\nInstall dependencies and link development version of objectifiedetree to\npip:\n\n.. code:: bash\n\n    git clone https://github.com/arve0/objectifiedetree\n    cd objectifiedetree\n    pip install -r requirements.txt # install dependencies and objectifiedetree-package\n\nTesting\n~~~~~~~\n\n.. code:: bash\n\n    tox\n\nBuild documentation locally\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTo build the documentation:\n\n.. code:: bash\n\n    pip install -r docs/requirements.txt\n    make docs\n\n.. |build-status-image| image:: https://secure.travis-ci.org/arve0/objectifiedetree.png?branch=master\n   :target: http://travis-ci.org/arve0/objectifiedetree?branch=master\n.. |pypi-version| image:: https://pypip.in/version/objectifiedetree/badge.svg\n   :target: https://pypi.python.org/pypi/objectifiedetree\n.. |wheel| image:: https://pypip.in/wheel/objectifiedetree/badge.svg\n   :target: https://pypi.python.org/pypi/objectifiedetree", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/arve0/objectifiedetree", "keywords": "objectifiedetree", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "objectifiedetree", "package_url": "https://pypi.org/project/objectifiedetree/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/objectifiedetree/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/arve0/objectifiedetree"}, "release_url": "https://pypi.org/project/objectifiedetree/0.0.1/", "requires_dist": null, "requires_python": null, "summary": "Dot notation for ElementTrees", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"http://travis-ci.org/arve0/objectifiedetree?branch=master\" rel=\"nofollow\"><img alt=\"build-status-image\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ceb441e6c346625aa02e8682217c3be7889bee42/68747470733a2f2f7365637572652e7472617669732d63692e6f72672f61727665302f6f626a656374696669656465747265652e706e673f6272616e63683d6d6173746572\"></a> <a href=\"https://pypi.python.org/pypi/objectifiedetree\" rel=\"nofollow\"><img alt=\"pypi-version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2fe73209259425c0d07d4a80c49293401ac8762d/68747470733a2f2f70797069702e696e2f76657273696f6e2f6f626a656374696669656465747265652f62616467652e737667\"></a> <a href=\"https://pypi.python.org/pypi/objectifiedetree\" rel=\"nofollow\"><img alt=\"wheel\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7bc3630cdd7d48e0e87910b00f0c291b3e1c5ffe/68747470733a2f2f70797069702e696e2f776865656c2f6f626a656374696669656465747265652f62616467652e737667\"></a></p>\n<div id=\"overview\">\n<h2>Overview</h2>\n<p>Wouldn\u2019t it be nice to use dot notation for ElementTrees? This package\nallows for:</p>\n<pre><span class=\"n\">tree</span> <span class=\"o\">=</span> <span class=\"n\">ET</span><span class=\"o\">.</span><span class=\"n\">fromstring</span><span class=\"p\">(</span><span class=\"s1\">'&lt;root&gt;&lt;a&gt;&lt;b c=\"asdf\" /&gt;&lt;/a&gt;&lt;/root&gt;'</span><span class=\"p\">)</span>\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">tree</span><span class=\"o\">.</span><span class=\"n\">a</span>\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">b</span>\n<span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">attrib</span><span class=\"p\">[</span><span class=\"s1\">'c'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">\"asdf\"</span> <span class=\"c1\"># True</span>\n</pre>\n<p><tt>tree.a</tt> will be a\n<tt>`Element</tt> &lt;<a href=\"https://docs.python.org/3.4/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element\" rel=\"nofollow\">https://docs.python.org/3.4/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element</a>&gt;`__\nwith the extra\n<tt>`__getattr__</tt> &lt;<a href=\"https://github.com/arve0/objectifiedetree/blob/master/objectifiedetree/__init__.py#L11-12\" rel=\"nofollow\">https://github.com/arve0/objectifiedetree/blob/master/objectifiedetree/__init__.py#L11-12</a>&gt;`__\nmethod. This means that you can use the element as you would do\nnormally, but names in your XML that crases with python\u2019s methods or\nattributes must be accessed through <tt>tree.find(xpath)</tt>.</p>\n<p>This package uses the python implementation of etree, which makes it\nslower than etree found in CPython. An alternative would be to\nmonkey-patch the built-in with\n<a href=\"https://github.com/clarete/forbiddenfruit\" rel=\"nofollow\">forbiddenfruit</a>, but I\nhaven\u2019t looked into this.</p>\n<p><tt>objectifiedetree</tt> has copied the python implementation of etree from\n<a href=\"https://github.com/python/cpython/tree/master/Lib/xml/etree\" rel=\"nofollow\">CPython 3.4\nLib/xml/etree</a>\nand will probably only work with Python 3.4.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Install using <tt>pip</tt>\u2026</p>\n<pre>pip install objectifiedetree\n</pre>\n</div>\n<div id=\"example\">\n<h2>Example</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">objectifiedetree</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"n\">tree</span> <span class=\"o\">=</span> <span class=\"n\">ET</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s1\">'/path/to/file.xml'</span><span class=\"p\">)</span>\n<span class=\"c1\"># dot notation :-)</span>\n<span class=\"n\">el</span> <span class=\"o\">=</span> <span class=\"n\">tree</span><span class=\"o\">.</span><span class=\"n\">xpath</span><span class=\"o\">.</span><span class=\"n\">to</span><span class=\"o\">.</span><span class=\"n\">your</span><span class=\"o\">.</span><span class=\"n\">element</span>\n\n<span class=\"c1\"># use normal etree attributes</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"o\">.</span><span class=\"n\">attrib</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># access name crashes</span>\n<span class=\"n\">attrib_el</span> <span class=\"o\">=</span> <span class=\"n\">el</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"s1\">'./attrib'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"development\">\n<h2>Development</h2>\n<p>Install dependencies and link development version of objectifiedetree to\npip:</p>\n<pre>git clone https://github.com/arve0/objectifiedetree\n<span class=\"nb\">cd</span> objectifiedetree\npip install -r requirements.txt <span class=\"c1\"># install dependencies and objectifiedetree-package</span>\n</pre>\n<div id=\"testing\">\n<h3>Testing</h3>\n<pre>tox\n</pre>\n</div>\n<div id=\"build-documentation-locally\">\n<h3>Build documentation locally</h3>\n<p>To build the documentation:</p>\n<pre>pip install -r docs/requirements.txt\nmake docs\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1551444, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "1c059389b5afedf8edfbb1f39cbe99a0", "sha256": "f8cfdff46c9e78dc7d6c806981733e32c57d29033b828a05021d580788bf37ce"}, "downloads": -1, "filename": "objectifiedetree-0.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1c059389b5afedf8edfbb1f39cbe99a0", "packagetype": "bdist_wheel", "python_version": "3.4", "requires_python": null, "size": 25376, "upload_time": "2015-05-18T10:06:50", "upload_time_iso_8601": "2015-05-18T10:06:50.386664Z", "url": "https://files.pythonhosted.org/packages/1b/58/7abafae2a0bbe04ffcbccb13d406f25569788cb32ee4d98d526ece6f9ad0/objectifiedetree-0.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d8f1c4dc91b63ceaa504b2c14ce09bf3", "sha256": "4a79af55ca09e0239be4d6c0f85b58e6f96ccf9ca3361799d4f7b2932e1cb672"}, "downloads": -1, "filename": "objectifiedetree-0.0.1.tar.gz", "has_sig": false, "md5_digest": "d8f1c4dc91b63ceaa504b2c14ce09bf3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27612, "upload_time": "2015-05-18T10:06:43", "upload_time_iso_8601": "2015-05-18T10:06:43.278931Z", "url": "https://files.pythonhosted.org/packages/5a/20/d3223783b8e8c4a05bc07615de6e04ab203c6643d7e165c40800c6ae1d8d/objectifiedetree-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1c059389b5afedf8edfbb1f39cbe99a0", "sha256": "f8cfdff46c9e78dc7d6c806981733e32c57d29033b828a05021d580788bf37ce"}, "downloads": -1, "filename": "objectifiedetree-0.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1c059389b5afedf8edfbb1f39cbe99a0", "packagetype": "bdist_wheel", "python_version": "3.4", "requires_python": null, "size": 25376, "upload_time": "2015-05-18T10:06:50", "upload_time_iso_8601": "2015-05-18T10:06:50.386664Z", "url": "https://files.pythonhosted.org/packages/1b/58/7abafae2a0bbe04ffcbccb13d406f25569788cb32ee4d98d526ece6f9ad0/objectifiedetree-0.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d8f1c4dc91b63ceaa504b2c14ce09bf3", "sha256": "4a79af55ca09e0239be4d6c0f85b58e6f96ccf9ca3361799d4f7b2932e1cb672"}, "downloads": -1, "filename": "objectifiedetree-0.0.1.tar.gz", "has_sig": false, "md5_digest": "d8f1c4dc91b63ceaa504b2c14ce09bf3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27612, "upload_time": "2015-05-18T10:06:43", "upload_time_iso_8601": "2015-05-18T10:06:43.278931Z", "url": "https://files.pythonhosted.org/packages/5a/20/d3223783b8e8c4a05bc07615de6e04ab203c6643d7e165c40800c6ae1d8d/objectifiedetree-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:49 2020"}