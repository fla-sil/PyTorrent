{"info": {"author": "DeepAir Dev", "author_email": "naman@deepair.io", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "## Deep Air Encoder\n\nThis package is used for encoding data fields for machine compliant dataframes.\n\n## Package structure\n\n`deepair_encoder`\n\n\u251c\u2500\u2500 encoder.py\n\u251c\u2500\u2500 __init__.py\n\u2514\u2500\u2500 utils\n    \u251c\u2500\u2500 encoder_tools.py\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 logger.py\n    \u2514\u2500\u2500 splitters.py\n\n1 directory, 6 files\n\n## Dependencies\n\n**Note**: The following python3 packages are necessary for this package to run:\n\n* numpy\n* scipy\n* pandas\n* sklearn\n* tabulate\n* tqdm\n\n## Function Declarations\n\nHere are the signatures for the functions in the package that can be used for deepair-dev.\n\n### encoder.py\n\nBelow are the functions that can be accessed by importing this module as `from deepair_encoder.encoder import <function_name>`.\n\n`encode_username`:\n```\ndef encode_username(df, drop_field=True):\n    '''\n        Username one-hot encoder.\n        inputs:\n            df: Dataframe which have username column (pandas df series)\n            drop_field: a flag if the usename column should be dropped or not after encoding (bool)\n        return:\n            df: Dataframe which have only username indicator [0/1] (pandas df series)\n    '''\n```\n\n`encode_discounts`:\n```\ndef encode_discounts(df, drop_field=True):\n    '''\n        Discounts encoder.\n        inputs:\n            df: dataframe which has discounts column (pandas df series)\n            drop_field: a flag if the discounts column should be dropped or not after encoding (bool)\n        return:\n            df: a dataframe with 3 new columns 'PROMOCODE', 'RES', 'LFG' and discounts droped if drop_field = True\n    '''\n```\n\n`minmax_score`:\n```\ndef minmax_score(df, fields, keyval=['requestid', 'direction_onward'], drop_field=True, verbose=True):\n    '''\n        scorer function to normalize from 0-1 inversely to the value.\n        inputs:\n            df: Dataframe which contains fields (pandas df series)\n            fields: Dataframe columns on which the score is calculated (list)\n            keyval: Group the data by this key values (list)\n            drop_field: Indicator to replace fields by new scored fields (bool)\n            verbose: Progress bar indicator (bool)\n        return:\n            field: Dataframe with a score for totalprice relative to whole requestid-direction, by index, by faregroup  (pandas df series)\n    '''\n```\n\n`minmax_normalize`:\n```\ndef minmax_normalize(df, fields, keyval=['requestid', 'direction_onward'], drop_field=True, verbose=True):\n    '''\n        normalizer function to normalize from 0-1 proportional to the value.\n        inputs:\n            df: Dataframe which contains fields (pandas df series)\n            fields: Dataframe columns on which the normalication is calculated (list)\n            keyval: Group the data by this key values (list)\n            drop_field: Indicator to replace fields by normalized new fields (bool)\n            verbose: Progress bar indicator (bool)\n        return:\n            field: Dataframe with a score for totalprice relative to whole requestid-direction, by index, by faregroup  (pandas df series)\n    '''\n```\n\n`encode_totalprice`:\n```\ndef encode_totalprice(df):\n    '''\n        total price encoder.\n        inputs:\n            df: Dataframe which have totalprice and totaltaxes column (pandas df series)\n        return:\n            df: Dataframe with a score for totalprice relative to whole requestid-direction, by index, by faregroup  (pandas df series)\n    '''\n```\n\n`encode_bookingid`:\n```\ndef encode_bookingid(df):\n    '''\n        Bookingid flag one-hot encoder.\n        inputs:\n            df: Dataframe which have Bookingid column (pandas df series)\n        return:\n            df: Dataframe which have only Bookingid indicator [0/1] (pandas df series)\n    '''\n```\n\n`encode_faregroup`:\n```\ndef encode_faregroup(raw_file, df, verbose=False):\n    '''\n        Faregroup encoder.\n        inputs:\n            raw_file: raw_file location where the faregroup_definition is available\n            df: Dataframe which have faregroup column (pandas df series)\n            verbose: Optional, if more detailed log is needed\n        return:\n            field: Dataframe with extra fields with faregroup attributes [-1/0/1] (pandas df series)\n            Note: -1 = not available, 0 = available for a fee, 1 = available for free (at no charge)\n    '''\n```\n\n`encode_datetime`:\n```\ndef encode_datetime(df, field, verbose=False):\n    '''\n        Datetime encoder.\n        inputs:\n            df: Dataframe which have 'field' column (pandas df series)\n            field: the field that has to be encoded\n        return:\n            df: Dataframe with 6 ecoded values capturing TOD, DOW and WOY\n    '''\n```\n\n`encode_advanced_purchase`:\n```\ndef encode_advanced_purchase(df, dptr_field='departuredate', sales_field='utctimestamp'):\n    '''\n        advanced purchase encoder.\n        inputs:\n            df: Dataframe which have dptr_field and sales_field column (pandas df series)\n        return:\n            df: Dataframe advanced purchase column\n    '''\n```\n\n`encode_los`:\n```\ndef encode_los(df, verbose=False):\n    '''\n        los and trip_type encoder.\n        inputs:\n            df: Dataframe which have departuredate, requestid and direction column (pandas df series)\n        return:\n            df: Dataframe los and trip_type encodes column\n    '''\n```\n\n`encode_airports`:\n```\ndef encode_airports(df, fields, reference_file_path, verbose=True):\n    '''\n        encode the airports.\n        inputs:\n            df                      : Dataframe which have airports (pandas df series)\n            fields                  : list of fields that you want to run this\n                                        function on (list)\n            reference_file_path     : path to the codes file (string)\n            verbose                 : Indicator for progress bar (bool)\n        return:\n            df: Dataframe encoded with airports values\n    '''\n```\n\n`encode_city`:\n```\ndef encode_city(df, fields, reference_file_path, verbose=True):\n    '''\n        encode the airports.\n        inputs:\n            df                      : Dataframe which have city (pandas df series)\n            fields                  : list of fields that you want to run this\n                                        function on (list)\n            reference_file_path     : path to the codes file (string)\n            verbose                 : Indicator for progress bar (bool)\n        return:\n            df: Dataframe encoded with airports values\n    '''\n```\n\n### utils\n\nThis subpackage contains tools a level lower than `encoder` module i.e. those modules that are used by encoder.\n\n#### encoder_tools\n\nBelow are the functions that can be accessed by importing this module as `from deepair_encoder.utils.encoder_tools import <function_name>`.\n\n`one_hot_encoder`:\n```\ndef one_hot_encoder(df, fields, fields_drop=True, verbose=True, classes=None):\n    '''\n        Converts the fields into one hot encoding.\n        inputs:\n            df: Dataframe containing all those fields (pandas df)\n            fields: Dataframe columns that you want to convert to one hot (string)\n            verbose: Indicator for progress bar (bool)\n            classes: Dictionary for the desired columns (dict)\n        return:\n            df: updated dataframe (pandas df)\n    '''\n```\n\n`integer_encoder`:\n```\ndef integer_encoder(df, fields, verbose=True):\n    '''\n        Converts the fields into integer encoding.\n        inputs:\n            df: Dataframe containing all those fields (pandas df)\n            fields: Dataframe columns that you want to convert to one hot (string)\n            verbose: Indicator for progress bar (bool)\n        returns:\n            df: updated dataframe (pandas df)\n    '''\n```\n\n`get_wom`:\n```\ndef get_wom(field):\n    '''\n        Function for week of the month.\n        inputs:\n            field: Dataframe column which have timestamp (pandas df series)\n        return:\n            field: Dataframe column which have wom (pandas df series)\n    '''\n```\n\n`get_dow`:\n```\ndef get_dow(field):\n    '''\n        Function for day of the week.\n        inputs:\n            field: Dataframe column which have timestamp (pandas df series)\n        return:\n            field: Dataframe column which have dow (pandas df series)\n    '''\n```\n\n`get_month`:\n```\ndef get_month(field):\n    '''\n        Function for month.\n        inputs:\n            field: Dataframe column which have timestamp (pandas df series)\n        return:\n            field: Dataframe column which have only month (pandas df series)\n    '''\n```\n\n`get_year`:\n```\ndef get_year(field):\n    '''\n        Function for year.\n        inputs:\n            field: Dataframe column which have timestamp (pandas df series)\n        return:\n            field: Dataframe column which have only year (pandas df series)\n    '''\n```\n\n`obj2num`:\n```\ndef obj2num(df, fields, verbose=True):\n    '''\n        Converts the fields into numeric from obj data type.\n        inputs:\n            df: Dataframe containing all those fields (pandas df)\n            fields: Dataframe columns that you want to convert to numeric (string)\n            verbose: Indicator for progress bar (bool)\n        returns:\n            df: updated dataframe (pandas df)\n    '''\n```\n\n#### logger\n\nBelow are the functions that can be accessed by importing this module as `from deepair_encoder.utils.logger import <function_name>`.\n\n`unique_stats`:\n```\ndef unique_stats(df):\n```\n\n`_log_with_timestamp`:\n```\ndef _log_with_timestamp(message):\n    '''\n        prints message on console\n        input :\n            message     : msg to print (string)\n    '''\n```\n\n#### splitters\n\nBelow are the functions that can be accessed by importing this module as `from deepair_encoder.utils.splitters import <function_name>`.\n\n`type_splitter`:\n```\ndef type_splitter(data, keys=['passengertypes'], newheadings=[['ADT', 'CHD', 'INF']]):\n    '''\n        Split the column (need to make it more generic).\n        inputs:\n            data: dataframe which contain this column (pd dataframe)\n            keys: list of column fields to split(list)\n            newheadings: list of list for header columns in keys (list)\n        returns:\n            data: updated dataframe (pandas df)\n    '''\n```\n\n`split_datewise`:\n```\ndef split_datewise(df, directory='', postfix='', mode='w'):\n    '''\n        Split a Dataframe according to dates in UTC-Timestamp:\n\n        input :-\n            DF          : dataframe which contain this column (pd dataframe)\n            directory   : path to the target directory (string)\n            postfix     : any postfix you want to add (string)\n            mode        : writing mode ('w':writing, 'a': append)\n    '''\n```\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/deepair/", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "deepair-encoder", "package_url": "https://pypi.org/project/deepair-encoder/", "platform": "", "project_url": "https://pypi.org/project/deepair-encoder/", "project_urls": {"Homepage": "https://bitbucket.org/deepair/"}, "release_url": "https://pypi.org/project/deepair-encoder/0.0.9/", "requires_dist": null, "requires_python": "", "summary": "This is a sub modular package for encoding", "version": "0.0.9", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>Deep Air Encoder</h2>\n<p>This package is used for encoding data fields for machine compliant dataframes.</p>\n<h2>Package structure</h2>\n<p><code>deepair_encoder</code></p>\n<p>\u251c\u2500\u2500 encoder.py\n\u251c\u2500\u2500 <strong>init</strong>.py\n\u2514\u2500\u2500 utils\n\u251c\u2500\u2500 encoder_tools.py\n\u251c\u2500\u2500 <strong>init</strong>.py\n\u251c\u2500\u2500 logger.py\n\u2514\u2500\u2500 splitters.py</p>\n<p>1 directory, 6 files</p>\n<h2>Dependencies</h2>\n<p><strong>Note</strong>: The following python3 packages are necessary for this package to run:</p>\n<ul>\n<li>numpy</li>\n<li>scipy</li>\n<li>pandas</li>\n<li>sklearn</li>\n<li>tabulate</li>\n<li>tqdm</li>\n</ul>\n<h2>Function Declarations</h2>\n<p>Here are the signatures for the functions in the package that can be used for deepair-dev.</p>\n<h3>encoder.py</h3>\n<p>Below are the functions that can be accessed by importing this module as <code>from deepair_encoder.encoder import &lt;function_name&gt;</code>.</p>\n<p><code>encode_username</code>:</p>\n<pre><code>def encode_username(df, drop_field=True):\n    '''\n        Username one-hot encoder.\n        inputs:\n            df: Dataframe which have username column (pandas df series)\n            drop_field: a flag if the usename column should be dropped or not after encoding (bool)\n        return:\n            df: Dataframe which have only username indicator [0/1] (pandas df series)\n    '''\n</code></pre>\n<p><code>encode_discounts</code>:</p>\n<pre><code>def encode_discounts(df, drop_field=True):\n    '''\n        Discounts encoder.\n        inputs:\n            df: dataframe which has discounts column (pandas df series)\n            drop_field: a flag if the discounts column should be dropped or not after encoding (bool)\n        return:\n            df: a dataframe with 3 new columns 'PROMOCODE', 'RES', 'LFG' and discounts droped if drop_field = True\n    '''\n</code></pre>\n<p><code>minmax_score</code>:</p>\n<pre><code>def minmax_score(df, fields, keyval=['requestid', 'direction_onward'], drop_field=True, verbose=True):\n    '''\n        scorer function to normalize from 0-1 inversely to the value.\n        inputs:\n            df: Dataframe which contains fields (pandas df series)\n            fields: Dataframe columns on which the score is calculated (list)\n            keyval: Group the data by this key values (list)\n            drop_field: Indicator to replace fields by new scored fields (bool)\n            verbose: Progress bar indicator (bool)\n        return:\n            field: Dataframe with a score for totalprice relative to whole requestid-direction, by index, by faregroup  (pandas df series)\n    '''\n</code></pre>\n<p><code>minmax_normalize</code>:</p>\n<pre><code>def minmax_normalize(df, fields, keyval=['requestid', 'direction_onward'], drop_field=True, verbose=True):\n    '''\n        normalizer function to normalize from 0-1 proportional to the value.\n        inputs:\n            df: Dataframe which contains fields (pandas df series)\n            fields: Dataframe columns on which the normalication is calculated (list)\n            keyval: Group the data by this key values (list)\n            drop_field: Indicator to replace fields by normalized new fields (bool)\n            verbose: Progress bar indicator (bool)\n        return:\n            field: Dataframe with a score for totalprice relative to whole requestid-direction, by index, by faregroup  (pandas df series)\n    '''\n</code></pre>\n<p><code>encode_totalprice</code>:</p>\n<pre><code>def encode_totalprice(df):\n    '''\n        total price encoder.\n        inputs:\n            df: Dataframe which have totalprice and totaltaxes column (pandas df series)\n        return:\n            df: Dataframe with a score for totalprice relative to whole requestid-direction, by index, by faregroup  (pandas df series)\n    '''\n</code></pre>\n<p><code>encode_bookingid</code>:</p>\n<pre><code>def encode_bookingid(df):\n    '''\n        Bookingid flag one-hot encoder.\n        inputs:\n            df: Dataframe which have Bookingid column (pandas df series)\n        return:\n            df: Dataframe which have only Bookingid indicator [0/1] (pandas df series)\n    '''\n</code></pre>\n<p><code>encode_faregroup</code>:</p>\n<pre><code>def encode_faregroup(raw_file, df, verbose=False):\n    '''\n        Faregroup encoder.\n        inputs:\n            raw_file: raw_file location where the faregroup_definition is available\n            df: Dataframe which have faregroup column (pandas df series)\n            verbose: Optional, if more detailed log is needed\n        return:\n            field: Dataframe with extra fields with faregroup attributes [-1/0/1] (pandas df series)\n            Note: -1 = not available, 0 = available for a fee, 1 = available for free (at no charge)\n    '''\n</code></pre>\n<p><code>encode_datetime</code>:</p>\n<pre><code>def encode_datetime(df, field, verbose=False):\n    '''\n        Datetime encoder.\n        inputs:\n            df: Dataframe which have 'field' column (pandas df series)\n            field: the field that has to be encoded\n        return:\n            df: Dataframe with 6 ecoded values capturing TOD, DOW and WOY\n    '''\n</code></pre>\n<p><code>encode_advanced_purchase</code>:</p>\n<pre><code>def encode_advanced_purchase(df, dptr_field='departuredate', sales_field='utctimestamp'):\n    '''\n        advanced purchase encoder.\n        inputs:\n            df: Dataframe which have dptr_field and sales_field column (pandas df series)\n        return:\n            df: Dataframe advanced purchase column\n    '''\n</code></pre>\n<p><code>encode_los</code>:</p>\n<pre><code>def encode_los(df, verbose=False):\n    '''\n        los and trip_type encoder.\n        inputs:\n            df: Dataframe which have departuredate, requestid and direction column (pandas df series)\n        return:\n            df: Dataframe los and trip_type encodes column\n    '''\n</code></pre>\n<p><code>encode_airports</code>:</p>\n<pre><code>def encode_airports(df, fields, reference_file_path, verbose=True):\n    '''\n        encode the airports.\n        inputs:\n            df                      : Dataframe which have airports (pandas df series)\n            fields                  : list of fields that you want to run this\n                                        function on (list)\n            reference_file_path     : path to the codes file (string)\n            verbose                 : Indicator for progress bar (bool)\n        return:\n            df: Dataframe encoded with airports values\n    '''\n</code></pre>\n<p><code>encode_city</code>:</p>\n<pre><code>def encode_city(df, fields, reference_file_path, verbose=True):\n    '''\n        encode the airports.\n        inputs:\n            df                      : Dataframe which have city (pandas df series)\n            fields                  : list of fields that you want to run this\n                                        function on (list)\n            reference_file_path     : path to the codes file (string)\n            verbose                 : Indicator for progress bar (bool)\n        return:\n            df: Dataframe encoded with airports values\n    '''\n</code></pre>\n<h3>utils</h3>\n<p>This subpackage contains tools a level lower than <code>encoder</code> module i.e. those modules that are used by encoder.</p>\n<h4>encoder_tools</h4>\n<p>Below are the functions that can be accessed by importing this module as <code>from deepair_encoder.utils.encoder_tools import &lt;function_name&gt;</code>.</p>\n<p><code>one_hot_encoder</code>:</p>\n<pre><code>def one_hot_encoder(df, fields, fields_drop=True, verbose=True, classes=None):\n    '''\n        Converts the fields into one hot encoding.\n        inputs:\n            df: Dataframe containing all those fields (pandas df)\n            fields: Dataframe columns that you want to convert to one hot (string)\n            verbose: Indicator for progress bar (bool)\n            classes: Dictionary for the desired columns (dict)\n        return:\n            df: updated dataframe (pandas df)\n    '''\n</code></pre>\n<p><code>integer_encoder</code>:</p>\n<pre><code>def integer_encoder(df, fields, verbose=True):\n    '''\n        Converts the fields into integer encoding.\n        inputs:\n            df: Dataframe containing all those fields (pandas df)\n            fields: Dataframe columns that you want to convert to one hot (string)\n            verbose: Indicator for progress bar (bool)\n        returns:\n            df: updated dataframe (pandas df)\n    '''\n</code></pre>\n<p><code>get_wom</code>:</p>\n<pre><code>def get_wom(field):\n    '''\n        Function for week of the month.\n        inputs:\n            field: Dataframe column which have timestamp (pandas df series)\n        return:\n            field: Dataframe column which have wom (pandas df series)\n    '''\n</code></pre>\n<p><code>get_dow</code>:</p>\n<pre><code>def get_dow(field):\n    '''\n        Function for day of the week.\n        inputs:\n            field: Dataframe column which have timestamp (pandas df series)\n        return:\n            field: Dataframe column which have dow (pandas df series)\n    '''\n</code></pre>\n<p><code>get_month</code>:</p>\n<pre><code>def get_month(field):\n    '''\n        Function for month.\n        inputs:\n            field: Dataframe column which have timestamp (pandas df series)\n        return:\n            field: Dataframe column which have only month (pandas df series)\n    '''\n</code></pre>\n<p><code>get_year</code>:</p>\n<pre><code>def get_year(field):\n    '''\n        Function for year.\n        inputs:\n            field: Dataframe column which have timestamp (pandas df series)\n        return:\n            field: Dataframe column which have only year (pandas df series)\n    '''\n</code></pre>\n<p><code>obj2num</code>:</p>\n<pre><code>def obj2num(df, fields, verbose=True):\n    '''\n        Converts the fields into numeric from obj data type.\n        inputs:\n            df: Dataframe containing all those fields (pandas df)\n            fields: Dataframe columns that you want to convert to numeric (string)\n            verbose: Indicator for progress bar (bool)\n        returns:\n            df: updated dataframe (pandas df)\n    '''\n</code></pre>\n<h4>logger</h4>\n<p>Below are the functions that can be accessed by importing this module as <code>from deepair_encoder.utils.logger import &lt;function_name&gt;</code>.</p>\n<p><code>unique_stats</code>:</p>\n<pre><code>def unique_stats(df):\n</code></pre>\n<p><code>_log_with_timestamp</code>:</p>\n<pre><code>def _log_with_timestamp(message):\n    '''\n        prints message on console\n        input :\n            message     : msg to print (string)\n    '''\n</code></pre>\n<h4>splitters</h4>\n<p>Below are the functions that can be accessed by importing this module as <code>from deepair_encoder.utils.splitters import &lt;function_name&gt;</code>.</p>\n<p><code>type_splitter</code>:</p>\n<pre><code>def type_splitter(data, keys=['passengertypes'], newheadings=[['ADT', 'CHD', 'INF']]):\n    '''\n        Split the column (need to make it more generic).\n        inputs:\n            data: dataframe which contain this column (pd dataframe)\n            keys: list of column fields to split(list)\n            newheadings: list of list for header columns in keys (list)\n        returns:\n            data: updated dataframe (pandas df)\n    '''\n</code></pre>\n<p><code>split_datewise</code>:</p>\n<pre><code>def split_datewise(df, directory='', postfix='', mode='w'):\n    '''\n        Split a Dataframe according to dates in UTC-Timestamp:\n\n        input :-\n            DF          : dataframe which contain this column (pd dataframe)\n            directory   : path to the target directory (string)\n            postfix     : any postfix you want to add (string)\n            mode        : writing mode ('w':writing, 'a': append)\n    '''\n</code></pre>\n\n          </div>"}, "last_serial": 5626672, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "1075bccf68424798d65fe91e05f79fc2", "sha256": "05b46c33ea944837ff44884fdc2c43a32e1c01474ed3e16c421f07f10abb5fee"}, "downloads": -1, "filename": "deepair_encoder-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "1075bccf68424798d65fe91e05f79fc2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10656, "upload_time": "2018-08-08T20:39:15", "upload_time_iso_8601": "2018-08-08T20:39:15.004808Z", "url": "https://files.pythonhosted.org/packages/e9/0a/f43bf55db737a846264741cf0e030c06bd357d566c7276e43e0725e453bf/deepair_encoder-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "207d3b0de99841b6c1bfe75d165342e5", "sha256": "f587540ce1044b8f891d43462235ba9732d54d4a71cf67a05e97e2faa539f23f"}, "downloads": -1, "filename": "deepair_encoder-0.0.1.tar.gz", "has_sig": false, "md5_digest": "207d3b0de99841b6c1bfe75d165342e5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6741, "upload_time": "2018-08-08T20:39:16", "upload_time_iso_8601": "2018-08-08T20:39:16.018677Z", "url": "https://files.pythonhosted.org/packages/f4/b2/eabf2faee46e3fbcea3536614846c4b03d6a8668aef1524f8c436af5437a/deepair_encoder-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "4ee0b4b942b50fbbf487dc5461e0bc82", "sha256": "32e540f8bb42919db7f84a8ea1b1a3b2bd5266991cabab3fd48bc8198edb2a5a"}, "downloads": -1, "filename": "deepair_encoder-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "4ee0b4b942b50fbbf487dc5461e0bc82", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14484, "upload_time": "2018-08-15T03:41:27", "upload_time_iso_8601": "2018-08-15T03:41:27.964556Z", "url": "https://files.pythonhosted.org/packages/f6/1f/230a79ed7622fec138a92f9ee5b2cd22fd8fc9b12fb5e7b6fc6c9d53a5fd/deepair_encoder-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1548985c3ffc8b2518c151ec2a566355", "sha256": "ab884bf94f5aebf12ece9e21494ba9d367e3e34363848bd1c3630108c6ef97d3"}, "downloads": -1, "filename": "deepair_encoder-0.0.2.tar.gz", "has_sig": false, "md5_digest": "1548985c3ffc8b2518c151ec2a566355", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8100, "upload_time": "2018-08-15T03:41:29", "upload_time_iso_8601": "2018-08-15T03:41:29.473882Z", "url": "https://files.pythonhosted.org/packages/15/ae/d2caef8cc2d0cb245e065fdba168a167829ba1b9c461d8391aa12c485aa3/deepair_encoder-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "5192929fd4cb45b1d0ea46a0711a74ed", "sha256": "f9010c8621c4da27993069153d6cceed11c936f3487fe08d773f16382d35b431"}, "downloads": -1, "filename": "deepair_encoder-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "5192929fd4cb45b1d0ea46a0711a74ed", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11568, "upload_time": "2018-08-15T03:56:08", "upload_time_iso_8601": "2018-08-15T03:56:08.438827Z", "url": "https://files.pythonhosted.org/packages/81/d3/ac62c0a17d7de6752997628002990afb85d3c828b5c5d7950b1b68cb3233/deepair_encoder-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ac0480b6d4dd1a1a83c5c8be9688b4db", "sha256": "51f43e783699b1516428e7ff73980ecd44aa9983234d790fe920ef5eda217aff"}, "downloads": -1, "filename": "deepair_encoder-0.0.3.tar.gz", "has_sig": false, "md5_digest": "ac0480b6d4dd1a1a83c5c8be9688b4db", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8408, "upload_time": "2018-08-15T03:56:09", "upload_time_iso_8601": "2018-08-15T03:56:09.595139Z", "url": "https://files.pythonhosted.org/packages/c1/14/d670c16fb5fcc3604eaa889198742cc7995a61555ec4bf6c49ae15d4ecf0/deepair_encoder-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "3e2c065e1db0109596d7b3b3b99bf79c", "sha256": "8531a8127e7ffda3621ab46fbf3a79fe61ed70ac3f6c2f8531eb7a977addc47f"}, "downloads": -1, "filename": "deepair_encoder-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "3e2c065e1db0109596d7b3b3b99bf79c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11850, "upload_time": "2018-08-28T17:36:24", "upload_time_iso_8601": "2018-08-28T17:36:24.385930Z", "url": "https://files.pythonhosted.org/packages/22/58/6493fedb2f5e96766cad9f3a0b6c45a44a0eed33fc9b997af985f1088f58/deepair_encoder-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "276e3f6740883a706b60d1baa2cb2b90", "sha256": "c3e4ddda81c3cbe2b5b6b07551187e5cf8bcef3486014741f8e90ee58fabbb58"}, "downloads": -1, "filename": "deepair_encoder-0.0.4.tar.gz", "has_sig": false, "md5_digest": "276e3f6740883a706b60d1baa2cb2b90", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8782, "upload_time": "2018-08-28T17:36:25", "upload_time_iso_8601": "2018-08-28T17:36:25.651580Z", "url": "https://files.pythonhosted.org/packages/d1/c2/7f76c433f130671d2d07401558e63f9385c763c1f02063eb1317b96cddd8/deepair_encoder-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "55b147a580c6aac0dd0e7e086f5ae01b", "sha256": "80cb35ef399bc8b153cf70fa38441f4eaa58182662777b20efa6c4141d541134"}, "downloads": -1, "filename": "deepair_encoder-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "55b147a580c6aac0dd0e7e086f5ae01b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12041, "upload_time": "2018-09-12T23:33:03", "upload_time_iso_8601": "2018-09-12T23:33:03.900950Z", "url": "https://files.pythonhosted.org/packages/fb/23/76a050f64359c2bb29fb778eddf2c8dc2e962f6beb0310dc846559e04f59/deepair_encoder-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "571dc97db1de35ac292d2ce58aabd8e8", "sha256": "8541239dd5310ed79b022ae86313dae765e4f501a0dc1a092a8d1715a84fa2d0"}, "downloads": -1, "filename": "deepair_encoder-0.0.5.tar.gz", "has_sig": false, "md5_digest": "571dc97db1de35ac292d2ce58aabd8e8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8974, "upload_time": "2018-09-12T23:33:05", "upload_time_iso_8601": "2018-09-12T23:33:05.419258Z", "url": "https://files.pythonhosted.org/packages/08/3c/d65126e003a1200c6411937914c1917a9d6f9c59b62c9ab2b708140ca399/deepair_encoder-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "63cee57745f29bd7923d925fe0f3c2b1", "sha256": "062d71c342d680677600ebf1ca1440519cda4e5faca01068abace69f54772e5d"}, "downloads": -1, "filename": "deepair_encoder-0.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "63cee57745f29bd7923d925fe0f3c2b1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12875, "upload_time": "2019-03-14T19:44:04", "upload_time_iso_8601": "2019-03-14T19:44:04.140560Z", "url": "https://files.pythonhosted.org/packages/d4/2c/1304b80fa762a00f4e207652dc4df2c47b8d12c7c31ca4b2a66edac5e26e/deepair_encoder-0.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4f5c83ed0cf0ab19bdbaffa374e950f4", "sha256": "e738e368057993b321fea24df1c261f479943e45c5580dc9656e8e6566668ab2"}, "downloads": -1, "filename": "deepair_encoder-0.0.6.tar.gz", "has_sig": false, "md5_digest": "4f5c83ed0cf0ab19bdbaffa374e950f4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9846, "upload_time": "2019-03-14T19:44:05", "upload_time_iso_8601": "2019-03-14T19:44:05.577072Z", "url": "https://files.pythonhosted.org/packages/9d/94/c8a683b855774bb3055dec61f87a0d983b34af7e655d7227114c2dd095c4/deepair_encoder-0.0.6.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "537810945589e50550c718ad1552e490", "sha256": "2f33bb556e38fc66a249255b28e760975f6aca9c2049850184192701ec866f23"}, "downloads": -1, "filename": "deepair_encoder-0.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "537810945589e50550c718ad1552e490", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12883, "upload_time": "2019-03-14T20:06:09", "upload_time_iso_8601": "2019-03-14T20:06:09.719396Z", "url": "https://files.pythonhosted.org/packages/c3/74/a4389ec9cd95a78e86a844a824f6d30f35391dd0c5e602ea076feb0f5fd5/deepair_encoder-0.0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c1d32f2237f62c94ce62db3865ca9e3d", "sha256": "2037cb4e2927e672acdf6f38a4e2f07fad6c6142d6814ef47529fe923dcdc29c"}, "downloads": -1, "filename": "deepair_encoder-0.0.7.tar.gz", "has_sig": false, "md5_digest": "c1d32f2237f62c94ce62db3865ca9e3d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9855, "upload_time": "2019-03-14T20:06:10", "upload_time_iso_8601": "2019-03-14T20:06:10.906540Z", "url": "https://files.pythonhosted.org/packages/71/df/88340ec96697c8e888365de2bbedfea5f68366467e56f5718801a5c11654/deepair_encoder-0.0.7.tar.gz", "yanked": false}], "0.0.8": [{"comment_text": "", "digests": {"md5": "8365ecc9c4a58d8b8aae127ea0fcd2b4", "sha256": "3cb71335704099903eb02136d6ed3a49b0f2f67e2586238559c1570b7181c0b8"}, "downloads": -1, "filename": "deepair_encoder-0.0.8-py3-none-any.whl", "has_sig": false, "md5_digest": "8365ecc9c4a58d8b8aae127ea0fcd2b4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12060, "upload_time": "2019-03-15T01:15:34", "upload_time_iso_8601": "2019-03-15T01:15:34.346096Z", "url": "https://files.pythonhosted.org/packages/e5/c7/c3efce95625540a68a302426500ca35f53a1c4c43e3f88a13b2667bc0177/deepair_encoder-0.0.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "eb5109ad0708f4ddf1e3036de1a3a591", "sha256": "d371b571d6525ba8552f4961a148ffe39440f5d62643889d363ba595d9ea4836"}, "downloads": -1, "filename": "deepair_encoder-0.0.8.tar.gz", "has_sig": false, "md5_digest": "eb5109ad0708f4ddf1e3036de1a3a591", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8990, "upload_time": "2019-03-15T01:15:35", "upload_time_iso_8601": "2019-03-15T01:15:35.696424Z", "url": "https://files.pythonhosted.org/packages/46/61/8be66c642f38cb00dd3d7ec917958c5ac89de9a8bf26af3b6b6aa9e8af35/deepair_encoder-0.0.8.tar.gz", "yanked": false}], "0.0.9": [{"comment_text": "", "digests": {"md5": "22e062670699c1079432a8b45be796e2", "sha256": "c1840318313ef8e3c905babf58fe880eb690dae4667ca80ae6fd754ebe405433"}, "downloads": -1, "filename": "deepair_encoder-0.0.9-py3-none-any.whl", "has_sig": false, "md5_digest": "22e062670699c1079432a8b45be796e2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13176, "upload_time": "2019-08-02T22:42:39", "upload_time_iso_8601": "2019-08-02T22:42:39.488552Z", "url": "https://files.pythonhosted.org/packages/7e/46/96a660323418a18ffd9050b1e82049f59fb11ae194c73a750559bdad4aef/deepair_encoder-0.0.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9d4a24fea4e2ea6bc7f8f95ae21faf5f", "sha256": "d37c0d7352bbf050dcf1c8e5b40e8cfd1ba1089dc61985cf4e0fd7b21141200b"}, "downloads": -1, "filename": "deepair_encoder-0.0.9.tar.gz", "has_sig": false, "md5_digest": "9d4a24fea4e2ea6bc7f8f95ae21faf5f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10330, "upload_time": "2019-08-02T22:42:41", "upload_time_iso_8601": "2019-08-02T22:42:41.212138Z", "url": "https://files.pythonhosted.org/packages/0e/ff/a205eb3ac657fb942851ab622f19ccdf8ec22c1ce5ae34bfb4cbdbc5f308/deepair_encoder-0.0.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "22e062670699c1079432a8b45be796e2", "sha256": "c1840318313ef8e3c905babf58fe880eb690dae4667ca80ae6fd754ebe405433"}, "downloads": -1, "filename": "deepair_encoder-0.0.9-py3-none-any.whl", "has_sig": false, "md5_digest": "22e062670699c1079432a8b45be796e2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13176, "upload_time": "2019-08-02T22:42:39", "upload_time_iso_8601": "2019-08-02T22:42:39.488552Z", "url": "https://files.pythonhosted.org/packages/7e/46/96a660323418a18ffd9050b1e82049f59fb11ae194c73a750559bdad4aef/deepair_encoder-0.0.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9d4a24fea4e2ea6bc7f8f95ae21faf5f", "sha256": "d37c0d7352bbf050dcf1c8e5b40e8cfd1ba1089dc61985cf4e0fd7b21141200b"}, "downloads": -1, "filename": "deepair_encoder-0.0.9.tar.gz", "has_sig": false, "md5_digest": "9d4a24fea4e2ea6bc7f8f95ae21faf5f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10330, "upload_time": "2019-08-02T22:42:41", "upload_time_iso_8601": "2019-08-02T22:42:41.212138Z", "url": "https://files.pythonhosted.org/packages/0e/ff/a205eb3ac657fb942851ab622f19ccdf8ec22c1ce5ae34bfb4cbdbc5f308/deepair_encoder-0.0.9.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:39:30 2020"}