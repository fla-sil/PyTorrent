{"info": {"author": "kfb", "author_email": "kaleidoscopicfilmstripblues@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# pyconfigvar\n\nManage required and optional environment variables in your Python scripts.\n\n## Example\n\n```sh\n$ REQUIRED_VAR=\"something\" python\n```\n\n```python\n>>> import pyconfigvar\n>>> pyconfigvar.requiredvar('REQUIRED_VAR')\n'something'\n>>> pyconfigvar.requiredvar('MISSING_VAR')\n>>> pyconfigvar.requiredvar('MISSING_VAR')\nMISSING_VAR was not supplied in the environment.\n<drop back to shell>\n```\n\n## Usage\n\nThere are four functions available:\n\n### `requiredvar(var)`\n\nReturns the contents of the environment variable `var`. If `var` is not present in the environment, `sys.exit()` is invoked to terminate the interpreter.\n\n### `optionalvar(var, default)`\n\nLike `requiredvar()`, but instead of terminating, `default` is returned.\n\n### `requiredbool(var)`\n\nLike `requiredvar()`, but will coerce the value of `var` into a boolean and return that. Essentially, anything non-zero or non-empty will return True, otherwise it will return `False`.\n\n### `optionalbool(var, default)`\n\nLike `requiredbool()`, but will return `default` rather than terminate the interpreter.\n\n## Contributing\n\nPull request away!\n\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kfb/pyconfigvar", "keywords": "environment", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "pyconfigvar", "package_url": "https://pypi.org/project/pyconfigvar/", "platform": "", "project_url": "https://pypi.org/project/pyconfigvar/", "project_urls": {"Homepage": "https://github.com/kfb/pyconfigvar"}, "release_url": "https://pypi.org/project/pyconfigvar/1.0.0/", "requires_dist": null, "requires_python": "", "summary": "Manage required and optional environment variables in your scripts.", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p># pyconfigvar</p>\n<p>Manage required and optional environment variables in your Python scripts.</p>\n<p>## Example</p>\n<p><tt>`sh\n$ <span class=\"pre\">REQUIRED_VAR=\"something\"</span> python\n`</tt></p>\n<p><tt>`python\n&gt;&gt;&gt; import pyconfigvar\n&gt;&gt;&gt; <span class=\"pre\">pyconfigvar.requiredvar('REQUIRED_VAR')</span>\n'something'\n&gt;&gt;&gt; <span class=\"pre\">pyconfigvar.requiredvar('MISSING_VAR')</span>\n&gt;&gt;&gt; <span class=\"pre\">pyconfigvar.requiredvar('MISSING_VAR')</span>\nMISSING_VAR was not supplied in the environment.\n&lt;drop back to shell&gt;\n`</tt></p>\n<p>## Usage</p>\n<p>There are four functions available:</p>\n<p>### <cite>requiredvar(var)</cite></p>\n<p>Returns the contents of the environment variable <cite>var</cite>. If <cite>var</cite> is not present in the environment, <cite>sys.exit()</cite> is invoked to terminate the interpreter.</p>\n<p>### <cite>optionalvar(var, default)</cite></p>\n<p>Like <cite>requiredvar()</cite>, but instead of terminating, <cite>default</cite> is returned.</p>\n<p>### <cite>requiredbool(var)</cite></p>\n<p>Like <cite>requiredvar()</cite>, but will coerce the value of <cite>var</cite> into a boolean and return that. Essentially, anything non-zero or non-empty will return True, otherwise it will return <cite>False</cite>.</p>\n<p>### <cite>optionalbool(var, default)</cite></p>\n<p>Like <cite>requiredbool()</cite>, but will return <cite>default</cite> rather than terminate the interpreter.</p>\n<p>## Contributing</p>\n<p>Pull request away!</p>\n\n          </div>"}, "last_serial": 2481054, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "889848073ec345c60915964f5af32119", "sha256": "43e7b373903ca3e464ca6efaea8eb2131eb26f2a1c4f7254c15e5795c653ed1e"}, "downloads": -1, "filename": "pyconfigvar-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "889848073ec345c60915964f5af32119", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3744, "upload_time": "2016-11-24T15:18:52", "upload_time_iso_8601": "2016-11-24T15:18:52.868399Z", "url": "https://files.pythonhosted.org/packages/f1/58/680633a8d2f54a28189f24d3bcfaaa234f998c9b922371469c5a5a81ba4d/pyconfigvar-1.0.0-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "889848073ec345c60915964f5af32119", "sha256": "43e7b373903ca3e464ca6efaea8eb2131eb26f2a1c4f7254c15e5795c653ed1e"}, "downloads": -1, "filename": "pyconfigvar-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "889848073ec345c60915964f5af32119", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3744, "upload_time": "2016-11-24T15:18:52", "upload_time_iso_8601": "2016-11-24T15:18:52.868399Z", "url": "https://files.pythonhosted.org/packages/f1/58/680633a8d2f54a28189f24d3bcfaaa234f998c9b922371469c5a5a81ba4d/pyconfigvar-1.0.0-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:08:08 2020"}