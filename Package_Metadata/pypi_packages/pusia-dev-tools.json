{"info": {"author": "MEADez", "author_email": "m3adez@gmail.com", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.7", "Topic :: Internet :: WWW/HTTP", "Topic :: Internet :: WWW/HTTP :: Dynamic Content"], "description": "# Development Tools\n\nThis package contains additional components used in other packages and as utilities.\n\n## Overview\n\n### Objects\n\n* `components.html.BaseHTMLElement`\n\n    Base class for creating HTML-objects in python's class representation.\n\n    It takes a string of one html tag element and parses it to retrieve attributes and internal elements.\n    Also provides for the conversion of internal elements for tweaks.\n\n    Supported elements - with single and double tag.\n    Aliases for inner elements are supported - you can set alias like data-alias=\"icon\" for inner element and get it\n    like this:\n\n    ```python\n    div_string = '<div><i class=\"material-icons\" data-alias=\"icon\">landscape</i></div>'\n    my_div = HTMLElement(div_string)\n    my_div['icon'][0]\n    >> landscape\n    ```\n\n    ```python\n    my_div['icon'][0] = 'person'\n    my_div['icon'][0]\n    >> person\n    div_string = my_div.construct_string()\n    div_string\n    >> <div><i class=\"material-icons\" data-alias=\"icon\">person</i></div>\n    ```\n\n    By default, comments in HTML code are ignored:\n    ```python\n    div_string = '<div><!-- Comment --><i class=\"material-icons\" data-alias=\"icon\">landscape</i></div>'\n    my_div = HTMLElement(div_string)\n    my_div[0]\n    >> <templatetags.HTMLElement object at 0x7f82824f0d30>  # icon\n    my_div.ignore_comments = False\n    my_div[0]\n    >> '<!-- Comment -->'\n    ```\n  \n    Public methods:\n    \n    * `flush()` - used to display an empty string on element rendering;\n    * `construct_string()` - used to assemble an element string to be inserted into a template;\n    * `render()` - used for final rendering of an element;\n  \n* `components.html.HTMLElement`\n\n    A class derived from `BaseHTMLElement`, used to add the necessary custom methods.\n    \n    Public methods:\n    \n    * `add_attribute_values` - used to add values to the html element parameter;\n            \n    * `remove_attribute_values` - used to remove values from the html element parameter;\n            \n* `parsers.html.AbstractHTMLParser`\n\n    An abstract class that must be used for HTML-parsers.\n\n    Each parser should be able to extract tag-head, tag-tail, tag-strings, also all attributes and inner html-elements,\n    check elements signature and comments in html code, replace character groups (normalization).\n    \n    Public class methods:\n    \n    * `check_element` - used to check if a string is the HTML element description;\n    \n    * `check_comment` - used to check if a string is the HTML comment;\n    \n    * `parse_tag_head` - used to retrieve the head part of the tag;\n            \n    * `parse_tag_tail` - used to retrieve the tail part of the tag;\n            \n    * `parse_tag_name` - used to retrieve the tag name;\n            \n    * `parse_complex_attributes` - used to extract all attributes with name and value (`type=\"button\"\"` and etc.);\n            \n    * `parse_plain_attributes` - used to extract all attributes with name only (`required` and etc.);\n            \n    * `parse_inner_data` - used to extract all child elements (as a single string) which are inside of the \n        current element represented by `html_string` argument;\n            \n    * `parse_inner_elements` - used to extract all child elements as a list of strings;\n            \n    * `parse_comments` - used to extract all comments which are inside of the current element represented \n        by `html_string` argument;\n            \n    * `normalize` - used to replace character groups;\n\n### Functions\n\n#### `utils.converters`\n\n* `convert_data_to_string` - simple function for converting any collection to string;\n\n* `convert_data_to_collection` - inverse function for converting string with separators to list;\n\n* `format_datetime` - converts any datetime instance to string in necessary format;\n\n#### `utils.handlers`\n\n* `get_class_from_path` - gets the required class at the specified path;\n\n* `get_class_from_settings` - gets the required class from the django settings;\n\n* `safety_get_attribute` - gets attribute value by attribute name based on expression;\n\n* `safety_parse_dict` - gets value from dictionary by key name based on expression;\n\n#### `parsers.html`\n\n* `parse_tag` - generic template tag parser. Returns a three-tuple: (tag_name, args, kwargs);\n\n\n### Mixins\n\n#### `utils.mixins`\n\n* `AjaxRequiredMixin` - mixin for checking a request object for ajax type;\n\n* `URLHistoryMixin` - mixin for writing requested urls in the session;\n\n* `MessageContextMixin` - mixin for adding system messages to the template context;\n\n* `TitleContextMixin` - mixin to add the title variable to the template context;\n\n* `JsonContextMixin` - mixin for extending context of JsonResponse;\n\n* `ExtendedViewMixin` - mixin for views with support for ajax requests / responses;\n\n* `ExtendedFormViewMixin` - mixin for ajax-enabled views and form data processing;\n\n##### Extended views based on django generic views\n\n* `ExtendedView`, `ExtendedFormView`, `ExtendedCreateView`, `ExtendedUpdateView`, `ExtendedDetailView`,\n  `ExtendedDeleteView`, `ExtendedTemplateView`", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/PusiaCode/pusia-dev-tools", "keywords": "", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "pusia-dev-tools", "package_url": "https://pypi.org/project/pusia-dev-tools/", "platform": "", "project_url": "https://pypi.org/project/pusia-dev-tools/", "project_urls": {"Homepage": "https://github.com/PusiaCode/pusia-dev-tools"}, "release_url": "https://pypi.org/project/pusia-dev-tools/0.3/", "requires_dist": null, "requires_python": "", "summary": "This package combines common classes and components used in other packages.", "version": "0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Development Tools</h1>\n<p>This package contains additional components used in other packages and as utilities.</p>\n<h2>Overview</h2>\n<h3>Objects</h3>\n<ul>\n<li>\n<p><code>components.html.BaseHTMLElement</code></p>\n<p>Base class for creating HTML-objects in python's class representation.</p>\n<p>It takes a string of one html tag element and parses it to retrieve attributes and internal elements.\nAlso provides for the conversion of internal elements for tweaks.</p>\n<p>Supported elements - with single and double tag.\nAliases for inner elements are supported - you can set alias like data-alias=\"icon\" for inner element and get it\nlike this:</p>\n<pre><span class=\"n\">div_string</span> <span class=\"o\">=</span> <span class=\"s1\">'&lt;div&gt;&lt;i class=\"material-icons\" data-alias=\"icon\"&gt;landscape&lt;/i&gt;&lt;/div&gt;'</span>\n<span class=\"n\">my_div</span> <span class=\"o\">=</span> <span class=\"n\">HTMLElement</span><span class=\"p\">(</span><span class=\"n\">div_string</span><span class=\"p\">)</span>\n<span class=\"n\">my_div</span><span class=\"p\">[</span><span class=\"s1\">'icon'</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;</span> <span class=\"n\">landscape</span>\n</pre>\n<pre><span class=\"n\">my_div</span><span class=\"p\">[</span><span class=\"s1\">'icon'</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'person'</span>\n<span class=\"n\">my_div</span><span class=\"p\">[</span><span class=\"s1\">'icon'</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;</span> <span class=\"n\">person</span>\n<span class=\"n\">div_string</span> <span class=\"o\">=</span> <span class=\"n\">my_div</span><span class=\"o\">.</span><span class=\"n\">construct_string</span><span class=\"p\">()</span>\n<span class=\"n\">div_string</span>\n<span class=\"o\">&gt;&gt;</span> <span class=\"o\">&lt;</span><span class=\"n\">div</span><span class=\"o\">&gt;&lt;</span><span class=\"n\">i</span> <span class=\"n\">class</span><span class=\"o\">=</span><span class=\"s2\">\"material-icons\"</span> <span class=\"n\">data</span><span class=\"o\">-</span><span class=\"n\">alias</span><span class=\"o\">=</span><span class=\"s2\">\"icon\"</span><span class=\"o\">&gt;</span><span class=\"n\">person</span><span class=\"o\">&lt;/</span><span class=\"n\">i</span><span class=\"o\">&gt;&lt;/</span><span class=\"n\">div</span><span class=\"o\">&gt;</span>\n</pre>\n<p>By default, comments in HTML code are ignored:</p>\n<pre><span class=\"n\">div_string</span> <span class=\"o\">=</span> <span class=\"s1\">'&lt;div&gt;&lt;!-- Comment --&gt;&lt;i class=\"material-icons\" data-alias=\"icon\"&gt;landscape&lt;/i&gt;&lt;/div&gt;'</span>\n<span class=\"n\">my_div</span> <span class=\"o\">=</span> <span class=\"n\">HTMLElement</span><span class=\"p\">(</span><span class=\"n\">div_string</span><span class=\"p\">)</span>\n<span class=\"n\">my_div</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;</span> <span class=\"o\">&lt;</span><span class=\"n\">templatetags</span><span class=\"o\">.</span><span class=\"n\">HTMLElement</span> <span class=\"nb\">object</span> <span class=\"n\">at</span> <span class=\"mh\">0x7f82824f0d30</span><span class=\"o\">&gt;</span>  <span class=\"c1\"># icon</span>\n<span class=\"n\">my_div</span><span class=\"o\">.</span><span class=\"n\">ignore_comments</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n<span class=\"n\">my_div</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;</span> <span class=\"s1\">'&lt;!-- Comment --&gt;'</span>\n</pre>\n<p>Public methods:</p>\n<ul>\n<li><code>flush()</code> - used to display an empty string on element rendering;</li>\n<li><code>construct_string()</code> - used to assemble an element string to be inserted into a template;</li>\n<li><code>render()</code> - used for final rendering of an element;</li>\n</ul>\n</li>\n<li>\n<p><code>components.html.HTMLElement</code></p>\n<p>A class derived from <code>BaseHTMLElement</code>, used to add the necessary custom methods.</p>\n<p>Public methods:</p>\n<ul>\n<li>\n<p><code>add_attribute_values</code> - used to add values to the html element parameter;</p>\n</li>\n<li>\n<p><code>remove_attribute_values</code> - used to remove values from the html element parameter;</p>\n</li>\n</ul>\n</li>\n<li>\n<p><code>parsers.html.AbstractHTMLParser</code></p>\n<p>An abstract class that must be used for HTML-parsers.</p>\n<p>Each parser should be able to extract tag-head, tag-tail, tag-strings, also all attributes and inner html-elements,\ncheck elements signature and comments in html code, replace character groups (normalization).</p>\n<p>Public class methods:</p>\n<ul>\n<li>\n<p><code>check_element</code> - used to check if a string is the HTML element description;</p>\n</li>\n<li>\n<p><code>check_comment</code> - used to check if a string is the HTML comment;</p>\n</li>\n<li>\n<p><code>parse_tag_head</code> - used to retrieve the head part of the tag;</p>\n</li>\n<li>\n<p><code>parse_tag_tail</code> - used to retrieve the tail part of the tag;</p>\n</li>\n<li>\n<p><code>parse_tag_name</code> - used to retrieve the tag name;</p>\n</li>\n<li>\n<p><code>parse_complex_attributes</code> - used to extract all attributes with name and value (<code>type=\"button\"\"</code> and etc.);</p>\n</li>\n<li>\n<p><code>parse_plain_attributes</code> - used to extract all attributes with name only (<code>required</code> and etc.);</p>\n</li>\n<li>\n<p><code>parse_inner_data</code> - used to extract all child elements (as a single string) which are inside of the\ncurrent element represented by <code>html_string</code> argument;</p>\n</li>\n<li>\n<p><code>parse_inner_elements</code> - used to extract all child elements as a list of strings;</p>\n</li>\n<li>\n<p><code>parse_comments</code> - used to extract all comments which are inside of the current element represented\nby <code>html_string</code> argument;</p>\n</li>\n<li>\n<p><code>normalize</code> - used to replace character groups;</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3>Functions</h3>\n<h4><code>utils.converters</code></h4>\n<ul>\n<li>\n<p><code>convert_data_to_string</code> - simple function for converting any collection to string;</p>\n</li>\n<li>\n<p><code>convert_data_to_collection</code> - inverse function for converting string with separators to list;</p>\n</li>\n<li>\n<p><code>format_datetime</code> - converts any datetime instance to string in necessary format;</p>\n</li>\n</ul>\n<h4><code>utils.handlers</code></h4>\n<ul>\n<li>\n<p><code>get_class_from_path</code> - gets the required class at the specified path;</p>\n</li>\n<li>\n<p><code>get_class_from_settings</code> - gets the required class from the django settings;</p>\n</li>\n<li>\n<p><code>safety_get_attribute</code> - gets attribute value by attribute name based on expression;</p>\n</li>\n<li>\n<p><code>safety_parse_dict</code> - gets value from dictionary by key name based on expression;</p>\n</li>\n</ul>\n<h4><code>parsers.html</code></h4>\n<ul>\n<li><code>parse_tag</code> - generic template tag parser. Returns a three-tuple: (tag_name, args, kwargs);</li>\n</ul>\n<h3>Mixins</h3>\n<h4><code>utils.mixins</code></h4>\n<ul>\n<li>\n<p><code>AjaxRequiredMixin</code> - mixin for checking a request object for ajax type;</p>\n</li>\n<li>\n<p><code>URLHistoryMixin</code> - mixin for writing requested urls in the session;</p>\n</li>\n<li>\n<p><code>MessageContextMixin</code> - mixin for adding system messages to the template context;</p>\n</li>\n<li>\n<p><code>TitleContextMixin</code> - mixin to add the title variable to the template context;</p>\n</li>\n<li>\n<p><code>JsonContextMixin</code> - mixin for extending context of JsonResponse;</p>\n</li>\n<li>\n<p><code>ExtendedViewMixin</code> - mixin for views with support for ajax requests / responses;</p>\n</li>\n<li>\n<p><code>ExtendedFormViewMixin</code> - mixin for ajax-enabled views and form data processing;</p>\n</li>\n</ul>\n<h5>Extended views based on django generic views</h5>\n<ul>\n<li><code>ExtendedView</code>, <code>ExtendedFormView</code>, <code>ExtendedCreateView</code>, <code>ExtendedUpdateView</code>, <code>ExtendedDetailView</code>,\n<code>ExtendedDeleteView</code>, <code>ExtendedTemplateView</code></li>\n</ul>\n\n          </div>"}, "last_serial": 7140523, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "54a754b21b7ef366dab78e6530b767f4", "sha256": "4c4afb2297fb3fc82f2cff6a6ca4c8bce65c77a0cd8218809c0a52c3fa2fd24a"}, "downloads": -1, "filename": "pusia-dev-tools-0.1.tar.gz", "has_sig": false, "md5_digest": "54a754b21b7ef366dab78e6530b767f4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7654, "upload_time": "2020-04-19T23:25:27", "upload_time_iso_8601": "2020-04-19T23:25:27.304737Z", "url": "https://files.pythonhosted.org/packages/f7/6e/ad9227b20e35f1f9b5b3999ba3b2ceed9a25e821d5b2bb3931680de7f74e/pusia-dev-tools-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "343cef8eefaa3dc191d5f34decf2b753", "sha256": "dcd55e528b33cbe3139f7d9e386c831b25b460f9f168bdd7b509416165535a9c"}, "downloads": -1, "filename": "pusia-dev-tools-0.2.tar.gz", "has_sig": false, "md5_digest": "343cef8eefaa3dc191d5f34decf2b753", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9329, "upload_time": "2020-04-21T15:14:25", "upload_time_iso_8601": "2020-04-21T15:14:25.342807Z", "url": "https://files.pythonhosted.org/packages/ff/48/601d03aa13f6f89db7b116150205a7a4f409b88976db407ae3c8eedd5e7f/pusia-dev-tools-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "5d7c45273e666adeee2196eec656ea4c", "sha256": "e16048c0bbaa036ed85bf894671123c5838f25820b9cc24cd0ff94340d2b0462"}, "downloads": -1, "filename": "pusia-dev-tools-0.3.tar.gz", "has_sig": false, "md5_digest": "5d7c45273e666adeee2196eec656ea4c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10741, "upload_time": "2020-04-30T20:13:09", "upload_time_iso_8601": "2020-04-30T20:13:09.481500Z", "url": "https://files.pythonhosted.org/packages/33/2d/4e8359a2bf4eb3bed1447a4a703042067555d73675d31ac0b18f99f399e6/pusia-dev-tools-0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5d7c45273e666adeee2196eec656ea4c", "sha256": "e16048c0bbaa036ed85bf894671123c5838f25820b9cc24cd0ff94340d2b0462"}, "downloads": -1, "filename": "pusia-dev-tools-0.3.tar.gz", "has_sig": false, "md5_digest": "5d7c45273e666adeee2196eec656ea4c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10741, "upload_time": "2020-04-30T20:13:09", "upload_time_iso_8601": "2020-04-30T20:13:09.481500Z", "url": "https://files.pythonhosted.org/packages/33/2d/4e8359a2bf4eb3bed1447a4a703042067555d73675d31ac0b18f99f399e6/pusia-dev-tools-0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:13:06 2020"}