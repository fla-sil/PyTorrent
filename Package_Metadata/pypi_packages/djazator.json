{"info": {"author": "Mike Oskin", "author_email": "cheap.grayhat@gmail.com", "bugtrack_url": null, "classifiers": ["Framework :: Django", "License :: OSI Approved :: MIT License"], "description": "djazator\n========\n\n`djazator`_ is a simple django plugin for sending push messages from\ndjango server to sockjs clients. It internally uses `zeromq`_ and\n`sockjs-tornado`_. djazator can send push notifications to all sockjs\nclients and to subset of this clients.\n\nRequirements:\n-------------\n\n1. `pyzmq`_>=2.0\n2. `sockjs-tornado`_>=0.0.5\n3. `django`_>=1.4\n\nInstallation:\n-------------\n\nInstall ``djazator`` with your favorite Python package manager:\n\n::\n\n   pip install djazator\n\nAdd ``djazator`` to your ``INSTALLED_APPS`` in ``settings.py``\n\n::\n\n   INSTALLED_APPS = (\n       'django.contrib.auth',\n       'djazator',\n       ...\n   )\n\nDefine ``DJAZATOR_MQ_SOCKET`` in ``settings.py``\n\n::\n\n   DJAZATOR_MQ_SOCKET = 'tcp://127.0.0.1:8002'\n\nUsage:\n------\n\nRun zeromq forwarder device\n\n::\n\n   djazator-mq --sub=tcp://127.0.0.1:8002 --pub=tcp://127.0.0.1:8001\n\nRun sockjs-tornado server\n\n::\n\n   djazator-server --port=8080 --mq_socket=tcp://127.0.0.1:8001 --route=/sockjs --address=''\n\n\nAlternatively, if you don't need multiple tornado instances support, you can entirely omit djazator-mq and should pass -S/--single argument to djazator-server\n\n::\n\n   djazator-server --single --port=8080 --mq_socket=tcp://127.0.0.1:8002 --route=/sockjs --address=''\n\nAppend sockjs client library to your page\n\n::\n\n   <head>\n       <script src=\"http://cdn.sockjs.org/sockjs-0.3.min.js\">\n       ...\n\nOpen page in browser and connect to sockjs-tornado server\n\n::\n\n   conn = new SockJS('http://localhost:8080/sockjs')\n\nDefine a callback for incoming messages\n\n::\n\n   conn.onmessage = function (e){ console.log(e.data); };\n\nSend a message from django\n\n::\n\n   from djazator.pub import notify_all\n   notify_all({'msg': u'Hi all!'})\n\nand you will see it in js console\n\n::\n\n       Object {msg: \"Hi all!\"}\n\nAdvanced notifications:\n-----------------------\n\nYou can send notifications to subset of users.\n\n::\n\n    from djazator.pub import notify\n    from djazator.utils import tokenize\n    from django.contrib.auth.models import User\n    user = User.objects.get(email='djazator@mail.com')\n    notify({'msg': u'Hi, %s!' % user.username}, users=[user])\n    token = tokenize(user)\n    notify({'msg': u'Hi user with token %s !' % token}, users=[user])\n\nTo get this messages you need to subscribe by token\n\n::\n\n    var token = {% djazator_token %};\n    SockJS.prototype.emit = function (name, data) { // wrapper around SockJS.send for djazator's protocol support\n        var meta_dict = {\n            name:name,\n            data:data\n        };\n        this.send(JSON.stringify(meta_dict))\n    };\n    conn = new SockJS('http://localhost:8080/sockjs')\n    conn.emit('subscribe', {'token': token});\n    conn.onmessage = function (e){ console.log(e.data); };\n\n``{% djazator_token %}`` is nothing more than a wrapper around\n``djazator.utils.tokenize`` that returns user.id signed with\nstandart django singing mechanism. You can configure you own salt by setting\n``DJAZATOR_SALT`` in ``settings.py``. If you need more security,\nyou can provide your own tokenization function. It should accept django User\n object and return token. Add path to this function in settings.py .\n\n::\n\n    DJAZATOR_TOKENIZER = 'path.to.my.func'\n\nConclusions:\n------------\n\n1. djazator serializes datetime objects with ISO 8601 format. You can parse it on client with `moment.js`_ .\n2. djazator server can handle client's messages constructed only in some specific way and can't be used for client to client communications.\n\nProduction:\n-----------\n\n1. `Hipache`_\n\n.. _djazator: https://github.com/mike-grayhat/djazator\n.. _zeromq: http://www.zeromq.org/\n.. _moment.js: http://momentjs.com/\n.. _sockjs-tornado: https://github.com/mrjoes/sockjs-tornado\n.. _pyzmq: https://github.com/zeromq/pyzmq\n.. _django: https://www.djangoproject.com/\n.. _Hipache: https://github.com/dotcloud/hipache", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "UNKNOWN", "keywords": "django zeromq tornado sockjs", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "djazator", "package_url": "https://pypi.org/project/djazator/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/djazator/", "project_urls": {"Download": "UNKNOWN", "Homepage": "UNKNOWN"}, "release_url": "https://pypi.org/project/djazator/0.2.5/", "requires_dist": null, "requires_python": null, "summary": "A simple django plugin for sending push notifications from django server to sockjs clients", "version": "0.2.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            djazator<br>========<br><br>`djazator`_ is a simple django plugin for sending push messages from<br>django server to sockjs clients. It internally uses `zeromq`_ and<br>`sockjs-tornado`_. djazator can send push notifications to all sockjs<br>clients and to subset of this clients.<br><br>Requirements:<br>-------------<br><br>1. `pyzmq`_&gt;=2.0<br>2. `sockjs-tornado`_&gt;=0.0.5<br>3. `django`_&gt;=1.4<br><br>Installation:<br>-------------<br><br>Install ``djazator`` with your favorite Python package manager:<br><br>::<br><br>   pip install djazator<br><br>Add ``djazator`` to your ``INSTALLED_APPS`` in ``settings.py``<br><br>::<br><br>   INSTALLED_APPS = (<br>       'django.contrib.auth',<br>       'djazator',<br>       ...<br>   )<br><br>Define ``DJAZATOR_MQ_SOCKET`` in ``settings.py``<br><br>::<br><br>   DJAZATOR_MQ_SOCKET = 'tcp://127.0.0.1:8002'<br><br>Usage:<br>------<br><br>Run zeromq forwarder device<br><br>::<br><br>   djazator-mq --sub=tcp://127.0.0.1:8002 --pub=tcp://127.0.0.1:8001<br><br>Run sockjs-tornado server<br><br>::<br><br>   djazator-server --port=8080 --mq_socket=tcp://127.0.0.1:8001 --route=/sockjs --address=''<br><br><br>Alternatively, if you don't need multiple tornado instances support, you can entirely omit djazator-mq and should pass -S/--single argument to djazator-server<br><br>::<br><br>   djazator-server --single --port=8080 --mq_socket=tcp://127.0.0.1:8002 --route=/sockjs --address=''<br><br>Append sockjs client library to your page<br><br>::<br><br>   &lt;head&gt;<br>       &lt;script src=\"http://cdn.sockjs.org/sockjs-0.3.min.js\"&gt;<br>       ...<br><br>Open page in browser and connect to sockjs-tornado server<br><br>::<br><br>   conn = new SockJS('http://localhost:8080/sockjs')<br><br>Define a callback for incoming messages<br><br>::<br><br>   conn.onmessage = function (e){ console.log(e.data); };<br><br>Send a message from django<br><br>::<br><br>   from djazator.pub import notify_all<br>   notify_all({'msg': u'Hi all!'})<br><br>and you will see it in js console<br><br>::<br><br>       Object {msg: \"Hi all!\"}<br><br>Advanced notifications:<br>-----------------------<br><br>You can send notifications to subset of users.<br><br>::<br><br>    from djazator.pub import notify<br>    from djazator.utils import tokenize<br>    from django.contrib.auth.models import User<br>    user = User.objects.get(email='djazator@mail.com')<br>    notify({'msg': u'Hi, %s!' % user.username}, users=[user])<br>    token = tokenize(user)<br>    notify({'msg': u'Hi user with token %s !' % token}, users=[user])<br><br>To get this messages you need to subscribe by token<br><br>::<br><br>    var token = {% djazator_token %};<br>    SockJS.prototype.emit = function (name, data) { // wrapper around SockJS.send for djazator's protocol support<br>        var meta_dict = {<br>            name:name,<br>            data:data<br>        };<br>        this.send(JSON.stringify(meta_dict))<br>    };<br>    conn = new SockJS('http://localhost:8080/sockjs')<br>    conn.emit('subscribe', {'token': token});<br>    conn.onmessage = function (e){ console.log(e.data); };<br><br>``{% djazator_token %}`` is nothing more than a wrapper around<br>``djazator.utils.tokenize`` that returns user.id signed with<br>standart django singing mechanism. You can configure you own salt by setting<br>``DJAZATOR_SALT`` in ``settings.py``. If you need more security,<br>you can provide your own tokenization function. It should accept django User<br> object and return token. Add path to this function in settings.py .<br><br>::<br><br>    DJAZATOR_TOKENIZER = 'path.to.my.func'<br><br>Conclusions:<br>------------<br><br>1. djazator serializes datetime objects with ISO 8601 format. You can parse it on client with `moment.js`_ .<br>2. djazator server can handle client's messages constructed only in some specific way and can't be used for client to client communications.<br><br>Production:<br>-----------<br><br>1. `Hipache`_<br><br>.. _djazator: https://github.com/mike-grayhat/djazator<br>.. _zeromq: http://www.zeromq.org/<br>.. _moment.js: http://momentjs.com/<br>.. _sockjs-tornado: https://github.com/mrjoes/sockjs-tornado<br>.. _pyzmq: https://github.com/zeromq/pyzmq<br>.. _django: https://www.djangoproject.com/<br>.. _Hipache: https://github.com/dotcloud/hipache\n          </div>"}, "last_serial": 958243, "releases": {"0.1.0": [{"comment_text": "built for Linux-3.2.0-35-generic-pae-i686-with-glibc2.7", "digests": {"md5": "ebb7bb3c29689f21cbc554102aaeb18c", "sha256": "c8cfeaf9514d7e736584b912d774b90b85ce40ff0db554c51637e3fcab974f69"}, "downloads": -1, "filename": "djazator-0.1.0.linux-i686.tar.gz", "has_sig": false, "md5_digest": "ebb7bb3c29689f21cbc554102aaeb18c", "packagetype": "bdist_dumb", "python_version": "any", "requires_python": null, "size": 8457, "upload_time": "2013-01-04T18:34:40", "upload_time_iso_8601": "2013-01-04T18:34:40.517070Z", "url": "https://files.pythonhosted.org/packages/18/a3/f327f3de06241cdb5a9ef5b0d826f343dafa675344e5ff78689985524f97/djazator-0.1.0.linux-i686.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "80c5f17513a40880786a51b58c4da724", "sha256": "8af8036f66d3dabb2e32ddcd74528a19f9b8a2b63cb0bfda6f3a9d7b3284fcbc"}, "downloads": -1, "filename": "djazator-0.1.0.tar.gz", "has_sig": false, "md5_digest": "80c5f17513a40880786a51b58c4da724", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4672, "upload_time": "2013-01-04T18:35:32", "upload_time_iso_8601": "2013-01-04T18:35:32.913656Z", "url": "https://files.pythonhosted.org/packages/b3/7f/18275fa1d96fcec317bac6e95868acc950adc7f71f8235b35608bd444322/djazator-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "ad73b8b31db21be337e08f37e7350397", "sha256": "f1e5444aef9ed6b938c4b81775e7c8e270dc0686a708f0712cfafff3971afb9e"}, "downloads": -1, "filename": "djazator-0.1.1.tar.gz", "has_sig": false, "md5_digest": "ad73b8b31db21be337e08f37e7350397", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5569, "upload_time": "2013-01-04T18:55:10", "upload_time_iso_8601": "2013-01-04T18:55:10.840283Z", "url": "https://files.pythonhosted.org/packages/51/93/39f3ef2f48d4e13f0ac550029c45fd1c8e91e410c07d5ccacb5dbc873d7b/djazator-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "587a83f48003de2f58925001e56a5ee3", "sha256": "9b1296a27d77cf7d44a15970516dc00f92e6939f296264988ba52a9732e6ca00"}, "downloads": -1, "filename": "djazator-0.2.0.tar.gz", "has_sig": false, "md5_digest": "587a83f48003de2f58925001e56a5ee3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5817, "upload_time": "2013-01-10T19:38:53", "upload_time_iso_8601": "2013-01-10T19:38:53.153633Z", "url": "https://files.pythonhosted.org/packages/af/86/356d7775fc9ef0ccef5781ae4b12306223443bbad04bd85e28f1823bd10f/djazator-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "3ad810610da16cefab624e948254e340", "sha256": "df1c877318248d0598d78fb77978bc94b13157de60349c5a3c628b181651a57c"}, "downloads": -1, "filename": "djazator-0.2.1.tar.gz", "has_sig": false, "md5_digest": "3ad810610da16cefab624e948254e340", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6146, "upload_time": "2013-01-22T20:16:08", "upload_time_iso_8601": "2013-01-22T20:16:08.480401Z", "url": "https://files.pythonhosted.org/packages/0a/e9/84d7309c41e899e53ae7e2c0322925d19ba785be4df9bf82358e81d2ddf1/djazator-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "9a3af2a8d7870688a879d7049483474d", "sha256": "c2262775b331871dd306a7b14b840929460014fd8cc38b09f8f7836cb4b316a0"}, "downloads": -1, "filename": "djazator-0.2.2.tar.gz", "has_sig": false, "md5_digest": "9a3af2a8d7870688a879d7049483474d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6150, "upload_time": "2013-01-22T21:20:20", "upload_time_iso_8601": "2013-01-22T21:20:20.988649Z", "url": "https://files.pythonhosted.org/packages/5c/95/827bd8c7f9ab316ffd3131f4aad8a4aedc7a232b44adf60fb761bbcc6679/djazator-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "56d60d08f0f48a8f4c3687ff8da7bce6", "sha256": "4bfebf8dbc4c63bfa532117e91f60e1a0aa162d0c00b9f1f7cd62aa691a798ce"}, "downloads": -1, "filename": "djazator-0.2.3.tar.gz", "has_sig": false, "md5_digest": "56d60d08f0f48a8f4c3687ff8da7bce6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6350, "upload_time": "2013-01-26T15:57:06", "upload_time_iso_8601": "2013-01-26T15:57:06.198117Z", "url": "https://files.pythonhosted.org/packages/2a/92/3c2f81cd913165c4468b78929eaa6619b17a7acc935ce8ecf96a7d5ebd4a/djazator-0.2.3.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "488115ab8052234877b2872295d80063", "sha256": "20ca755e332ea592ba04f670ca523a1410aa3e2ce5f70b65b061fb6056ee5708"}, "downloads": -1, "filename": "djazator-0.2.4.tar.gz", "has_sig": false, "md5_digest": "488115ab8052234877b2872295d80063", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6392, "upload_time": "2013-06-11T22:52:26", "upload_time_iso_8601": "2013-06-11T22:52:26.369198Z", "url": "https://files.pythonhosted.org/packages/9f/45/6a57d9154579cd1e0cd0dac19c2fb201fd770d4ff8e168f9b34e6ccc8ccb/djazator-0.2.4.tar.gz", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "3adaa652a421808af6583c4b76e0f0ef", "sha256": "aa0a65c27eca2807d30edcfd90093ca9a43e324037bc457b068b8447a6274f42"}, "downloads": -1, "filename": "djazator-0.2.5.tar.gz", "has_sig": false, "md5_digest": "3adaa652a421808af6583c4b76e0f0ef", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6487, "upload_time": "2014-01-02T03:02:36", "upload_time_iso_8601": "2014-01-02T03:02:36.599293Z", "url": "https://files.pythonhosted.org/packages/b3/ca/8206912ff672df6b1e52ff6c39e45a39cf6be73d0355cfd5fafcc1f90640/djazator-0.2.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3adaa652a421808af6583c4b76e0f0ef", "sha256": "aa0a65c27eca2807d30edcfd90093ca9a43e324037bc457b068b8447a6274f42"}, "downloads": -1, "filename": "djazator-0.2.5.tar.gz", "has_sig": false, "md5_digest": "3adaa652a421808af6583c4b76e0f0ef", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6487, "upload_time": "2014-01-02T03:02:36", "upload_time_iso_8601": "2014-01-02T03:02:36.599293Z", "url": "https://files.pythonhosted.org/packages/b3/ca/8206912ff672df6b1e52ff6c39e45a39cf6be73d0355cfd5fafcc1f90640/djazator-0.2.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:41 2020"}