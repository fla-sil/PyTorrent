{"info": {"author": "Yuriy Rabeshko", "author_email": "george.rabeshko@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# bitrix24-python3-client\nA tiny Python3 client to make requests of Bitrix24 API.\n\n## Requirements\nDepends on the following packages (see `requirements.txt`):\n- requests\n\n## Installation\nFirst of all install necessary dependencies (see above) and **bitrix24-python3-client** itself:\n\n```bash\n$ pip install bitrix24-python3-client\n```\n\n## Getting started\n\nThe client is tiny therefore it's **easy to use**. All what you need to start it's **domain name**, **client ID** and **client secret key** of your application (if you already have **access** and **refresh tokens** you can pass it as optional kwargs into the Bitrix24 client).  \n\nFirst of all you need to **create Bitrix24 instance** to work with. Let's create it as follows (we will consider basic configuration without existing tokens):\n\n```python\n    # Import Bitrix24 client to work with\n>>> from bitrix24 import Bitrix24\n    # Create instance with basic configuration\n>>> bx24 = Bitrix24('your-domain.bitrix24.com', 'your.client.id', 'your_client_secret')\n```\n\nLooks like not bad, but you can't do anything yet. You must fill out all required attributes of the Bitrix24 client. To do that we can **request it** directly from a Bitrix24 server (**or** pass as optional kwargs for the Bitrix24 client before creating an instance):  \n\n```python\n    # Get authorization URL to request authorization code via browser\n>>> bx24.resolve_authorize_endpoint()\n'https://your-domain.bitrix24.com/oauth/authorize/?client_id=your.client.id&response_type=code'\n    # Request tokens to interact with Bitrix24 API\n>>> bx24.request_tokens('requested_authorization_code')\n```\n\nYou can **check if all's well** by following command which simply return dict of current tokens:\n\n```python\n    # Get current access and refresh tokens\n>>> bx24.get_tokens()\n{'access_token': 'requested_access_token', 'refresh_token': 'requested_refresh_token'}\n```\n\n**Pay attention!** Your tokens have 1 hour lifecycle by default therefore you may need to **refresh tokens** at the expiration of this time:\n\n```python\n    # Refresh current tokens (refresh token required)\n>>> bx24.refresh_tokens()\n    # Check whether old tokens was replaced\n>>> bx24.get_tokens()\n{'access_token': 'new_access_token', 'refresh_token': 'new_refresh_token'}\n```\n\nOkay, all the preparation works done and now we can **make API calls to a Bitrix24 server** (don't forget to check the `client_endpoint` attribute of the Bitrix24 client whether it exists).\n\nMake a **single call**:\n\n```python\n    # The following example needs the `user` permission\n>>> bx24.call_method('user.get', {'ID': 1})\n{'result': {...}}\n```\n\nMake a **batch call** (many single calls by one request):\n\n```python\n    # The following example needs the `user` and `department` permissions\n>>> bx24.call_batch({\n...     'get_user': ('user.current', {}), # or 'user.current'\n...     'get_department': {\n...         'method': 'department.get',\n...         'params': {'ID': '$result[get_user][UF_DEPARTMENT]'}\n...     }\n... })\n{'result': {'result': {...}}}\n```\n\nMake an **event binding** (shortcut for the `event.bind` method):\n\n```python\n>>> bx24.call_bind('OnAppUpdate', 'https://example.com/')\n{'result': {...}}\n```\n\nMake an **event unbinding** (shortcut for the `event.unbind` method):\n\n```python\n>>> bx24.call_unbind('OnAppUpdate', 'https://example.com/')\n{'result': {...}}\n```\n\n#### Get closer to webhooks\n\nAll methods described above come in handy when you develop applications or similar tricky things. However, sometimes will be enough to call a **webhook** - simplified version of rest-events and rest-teams that does not require a application to write.\n\nSo, let's create a simple webhook!\n\nIf you need to make webhook calls **only**, the following configuration will fit (in other case see verbose configuration above):\n\n```python\n    # Import Bitrix24 client to work with\n>>> from bitrix24 import Bitrix24\n    # Create instance with basic configuration\n>>> bx24 = Bitrix24('your-domain.bitrix24.com', user_id=1)\n```\n\nMake a **webhook call**:\n\n```python\n    # You can pass a dict of params as third argument\n>>> bx24.call_webhook('profile', 'xxxxxxxxxxxxxxxx')\n{'result': {...}}\n```\n\n\nThat's end of quick introduction. To learn details, **explore source code** (believe me those code is such simple as this client). Good luck!\n\n## Status\nThe client is already ready to use (v0.3.3).\n\nI'll probably add more functionality later. This is what I need right now.\n\n## Copyright and License\nCopyright (c) 2017-2019 Yuriy Rabeshko. Code released under the MIT license.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/yarbshk/bitrix24-python3-client", "keywords": "bitrix24 api rest python3 client", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "bitrix24-python3-client", "package_url": "https://pypi.org/project/bitrix24-python3-client/", "platform": "any", "project_url": "https://pypi.org/project/bitrix24-python3-client/", "project_urls": {"Homepage": "https://github.com/yarbshk/bitrix24-python3-client"}, "release_url": "https://pypi.org/project/bitrix24-python3-client/0.4.0/", "requires_dist": ["requests (>=2.18.0)"], "requires_python": ">=3", "summary": "A tiny Python3 client to make requests of Bitrix24 API.", "version": "0.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>bitrix24-python3-client</h1>\n<p>A tiny Python3 client to make requests of Bitrix24 API.</p>\n<h2>Requirements</h2>\n<p>Depends on the following packages (see <code>requirements.txt</code>):</p>\n<ul>\n<li>requests</li>\n</ul>\n<h2>Installation</h2>\n<p>First of all install necessary dependencies (see above) and <strong>bitrix24-python3-client</strong> itself:</p>\n<pre>$ pip install bitrix24-python3-client\n</pre>\n<h2>Getting started</h2>\n<p>The client is tiny therefore it's <strong>easy to use</strong>. All what you need to start it's <strong>domain name</strong>, <strong>client ID</strong> and <strong>client secret key</strong> of your application (if you already have <strong>access</strong> and <strong>refresh tokens</strong> you can pass it as optional kwargs into the Bitrix24 client).</p>\n<p>First of all you need to <strong>create Bitrix24 instance</strong> to work with. Let's create it as follows (we will consider basic configuration without existing tokens):</p>\n<pre>    <span class=\"c1\"># Import Bitrix24 client to work with</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">bitrix24</span> <span class=\"kn\">import</span> <span class=\"n\">Bitrix24</span>\n    <span class=\"c1\"># Create instance with basic configuration</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bx24</span> <span class=\"o\">=</span> <span class=\"n\">Bitrix24</span><span class=\"p\">(</span><span class=\"s1\">'your-domain.bitrix24.com'</span><span class=\"p\">,</span> <span class=\"s1\">'your.client.id'</span><span class=\"p\">,</span> <span class=\"s1\">'your_client_secret'</span><span class=\"p\">)</span>\n</pre>\n<p>Looks like not bad, but you can't do anything yet. You must fill out all required attributes of the Bitrix24 client. To do that we can <strong>request it</strong> directly from a Bitrix24 server (<strong>or</strong> pass as optional kwargs for the Bitrix24 client before creating an instance):</p>\n<pre>    <span class=\"c1\"># Get authorization URL to request authorization code via browser</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bx24</span><span class=\"o\">.</span><span class=\"n\">resolve_authorize_endpoint</span><span class=\"p\">()</span>\n<span class=\"s1\">'https://your-domain.bitrix24.com/oauth/authorize/?client_id=your.client.id&amp;response_type=code'</span>\n    <span class=\"c1\"># Request tokens to interact with Bitrix24 API</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bx24</span><span class=\"o\">.</span><span class=\"n\">request_tokens</span><span class=\"p\">(</span><span class=\"s1\">'requested_authorization_code'</span><span class=\"p\">)</span>\n</pre>\n<p>You can <strong>check if all's well</strong> by following command which simply return dict of current tokens:</p>\n<pre>    <span class=\"c1\"># Get current access and refresh tokens</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bx24</span><span class=\"o\">.</span><span class=\"n\">get_tokens</span><span class=\"p\">()</span>\n<span class=\"p\">{</span><span class=\"s1\">'access_token'</span><span class=\"p\">:</span> <span class=\"s1\">'requested_access_token'</span><span class=\"p\">,</span> <span class=\"s1\">'refresh_token'</span><span class=\"p\">:</span> <span class=\"s1\">'requested_refresh_token'</span><span class=\"p\">}</span>\n</pre>\n<p><strong>Pay attention!</strong> Your tokens have 1 hour lifecycle by default therefore you may need to <strong>refresh tokens</strong> at the expiration of this time:</p>\n<pre>    <span class=\"c1\"># Refresh current tokens (refresh token required)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bx24</span><span class=\"o\">.</span><span class=\"n\">refresh_tokens</span><span class=\"p\">()</span>\n    <span class=\"c1\"># Check whether old tokens was replaced</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bx24</span><span class=\"o\">.</span><span class=\"n\">get_tokens</span><span class=\"p\">()</span>\n<span class=\"p\">{</span><span class=\"s1\">'access_token'</span><span class=\"p\">:</span> <span class=\"s1\">'new_access_token'</span><span class=\"p\">,</span> <span class=\"s1\">'refresh_token'</span><span class=\"p\">:</span> <span class=\"s1\">'new_refresh_token'</span><span class=\"p\">}</span>\n</pre>\n<p>Okay, all the preparation works done and now we can <strong>make API calls to a Bitrix24 server</strong> (don't forget to check the <code>client_endpoint</code> attribute of the Bitrix24 client whether it exists).</p>\n<p>Make a <strong>single call</strong>:</p>\n<pre>    <span class=\"c1\"># The following example needs the `user` permission</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bx24</span><span class=\"o\">.</span><span class=\"n\">call_method</span><span class=\"p\">(</span><span class=\"s1\">'user.get'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'ID'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">})</span>\n<span class=\"p\">{</span><span class=\"s1\">'result'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"o\">...</span><span class=\"p\">}}</span>\n</pre>\n<p>Make a <strong>batch call</strong> (many single calls by one request):</p>\n<pre>    <span class=\"c1\"># The following example needs the `user` and `department` permissions</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bx24</span><span class=\"o\">.</span><span class=\"n\">call_batch</span><span class=\"p\">({</span>\n<span class=\"o\">...</span>     <span class=\"s1\">'get_user'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"s1\">'user.current'</span><span class=\"p\">,</span> <span class=\"p\">{}),</span> <span class=\"c1\"># or 'user.current'</span>\n<span class=\"o\">...</span>     <span class=\"s1\">'get_department'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n<span class=\"o\">...</span>         <span class=\"s1\">'method'</span><span class=\"p\">:</span> <span class=\"s1\">'department.get'</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>         <span class=\"s1\">'params'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'ID'</span><span class=\"p\">:</span> <span class=\"s1\">'$result[get_user][UF_DEPARTMENT]'</span><span class=\"p\">}</span>\n<span class=\"o\">...</span>     <span class=\"p\">}</span>\n<span class=\"o\">...</span> <span class=\"p\">})</span>\n<span class=\"p\">{</span><span class=\"s1\">'result'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'result'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"o\">...</span><span class=\"p\">}}}</span>\n</pre>\n<p>Make an <strong>event binding</strong> (shortcut for the <code>event.bind</code> method):</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bx24</span><span class=\"o\">.</span><span class=\"n\">call_bind</span><span class=\"p\">(</span><span class=\"s1\">'OnAppUpdate'</span><span class=\"p\">,</span> <span class=\"s1\">'https://example.com/'</span><span class=\"p\">)</span>\n<span class=\"p\">{</span><span class=\"s1\">'result'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"o\">...</span><span class=\"p\">}}</span>\n</pre>\n<p>Make an <strong>event unbinding</strong> (shortcut for the <code>event.unbind</code> method):</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bx24</span><span class=\"o\">.</span><span class=\"n\">call_unbind</span><span class=\"p\">(</span><span class=\"s1\">'OnAppUpdate'</span><span class=\"p\">,</span> <span class=\"s1\">'https://example.com/'</span><span class=\"p\">)</span>\n<span class=\"p\">{</span><span class=\"s1\">'result'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"o\">...</span><span class=\"p\">}}</span>\n</pre>\n<h4>Get closer to webhooks</h4>\n<p>All methods described above come in handy when you develop applications or similar tricky things. However, sometimes will be enough to call a <strong>webhook</strong> - simplified version of rest-events and rest-teams that does not require a application to write.</p>\n<p>So, let's create a simple webhook!</p>\n<p>If you need to make webhook calls <strong>only</strong>, the following configuration will fit (in other case see verbose configuration above):</p>\n<pre>    <span class=\"c1\"># Import Bitrix24 client to work with</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">bitrix24</span> <span class=\"kn\">import</span> <span class=\"n\">Bitrix24</span>\n    <span class=\"c1\"># Create instance with basic configuration</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bx24</span> <span class=\"o\">=</span> <span class=\"n\">Bitrix24</span><span class=\"p\">(</span><span class=\"s1\">'your-domain.bitrix24.com'</span><span class=\"p\">,</span> <span class=\"n\">user_id</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre>\n<p>Make a <strong>webhook call</strong>:</p>\n<pre>    <span class=\"c1\"># You can pass a dict of params as third argument</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bx24</span><span class=\"o\">.</span><span class=\"n\">call_webhook</span><span class=\"p\">(</span><span class=\"s1\">'profile'</span><span class=\"p\">,</span> <span class=\"s1\">'xxxxxxxxxxxxxxxx'</span><span class=\"p\">)</span>\n<span class=\"p\">{</span><span class=\"s1\">'result'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"o\">...</span><span class=\"p\">}}</span>\n</pre>\n<p>That's end of quick introduction. To learn details, <strong>explore source code</strong> (believe me those code is such simple as this client). Good luck!</p>\n<h2>Status</h2>\n<p>The client is already ready to use (v0.3.3).</p>\n<p>I'll probably add more functionality later. This is what I need right now.</p>\n<h2>Copyright and License</h2>\n<p>Copyright (c) 2017-2019 Yuriy Rabeshko. Code released under the MIT license.</p>\n\n          </div>"}, "last_serial": 6191546, "releases": {"0.3.1": [{"comment_text": "", "digests": {"md5": "b5d45905eac6d0a2e98d9c84412fc882", "sha256": "41526682808388a80c6c5925a3122df434097ed454b6548711c28610a6f84d93"}, "downloads": -1, "filename": "bitrix24_python3_client-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b5d45905eac6d0a2e98d9c84412fc882", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6558, "upload_time": "2017-08-31T22:41:21", "upload_time_iso_8601": "2017-08-31T22:41:21.107403Z", "url": "https://files.pythonhosted.org/packages/0c/ec/9e91aeb2fc9eda634ed7e7a538c616a8cc2901aee867377d367e6710876d/bitrix24_python3_client-0.3.1-py3-none-any.whl", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "4c2e62ee62d668af29cede0f74b3a853", "sha256": "14a1f04207355776a18af0e0fd075b753344d4af2b5834011787a45ef7b455a2"}, "downloads": -1, "filename": "bitrix24_python3_client-0.3.2-py3-none-any.whl", "has_sig": false, "md5_digest": "4c2e62ee62d668af29cede0f74b3a853", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6658, "upload_time": "2017-09-01T12:40:40", "upload_time_iso_8601": "2017-09-01T12:40:40.635915Z", "url": "https://files.pythonhosted.org/packages/da/2b/11b2f1a352d02748ebc38029930dfa36b57a5323b8fe2b89a1edef23941d/bitrix24_python3_client-0.3.2-py3-none-any.whl", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "8738785adba2311678800646ee4ebbf6", "sha256": "2501dd96844685adf1f7b7fca0a0c68a0cba01077ad4a9985ef8de91565bf8bf"}, "downloads": -1, "filename": "bitrix24_python3_client-0.3.3-py3-none-any.whl", "has_sig": false, "md5_digest": "8738785adba2311678800646ee4ebbf6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 8293, "upload_time": "2017-10-04T12:46:21", "upload_time_iso_8601": "2017-10-04T12:46:21.756079Z", "url": "https://files.pythonhosted.org/packages/a7/23/9920659e984aa0cd5adb99b2ca19894ba5961ac24e9aa8f7af0a25e01ecd/bitrix24_python3_client-0.3.3-py3-none-any.whl", "yanked": false}], "0.3.4": [{"comment_text": "", "digests": {"md5": "cf1cff3adb18422da9d647a06fa7cdd2", "sha256": "98e97b19f2863e997e9df962ce44c2b2495f21d83c270328d0862d6e9256b288"}, "downloads": -1, "filename": "bitrix24-python3-client-0.3.4.tar.gz", "has_sig": false, "md5_digest": "cf1cff3adb18422da9d647a06fa7cdd2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 6626, "upload_time": "2019-04-02T21:36:48", "upload_time_iso_8601": "2019-04-02T21:36:48.889374Z", "url": "https://files.pythonhosted.org/packages/3a/72/e20e00252b31fea24fa593002a7573af91f0cd5de291880f9d8340caaec2/bitrix24-python3-client-0.3.4.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "eccc3ff51946d824771252d367df385f", "sha256": "e9c6254ddbab2d8fe8a73673dde0f0b0651594021fd6a37361de5187893785a4"}, "downloads": -1, "filename": "bitrix24_python3_client-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "eccc3ff51946d824771252d367df385f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 10638, "upload_time": "2019-11-24T23:49:51", "upload_time_iso_8601": "2019-11-24T23:49:51.118942Z", "url": "https://files.pythonhosted.org/packages/04/43/1d84c51d89215165d2f8543daa4fb2b9852626af1a7da0215838686bb0fa/bitrix24_python3_client-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2003bab25077c888b06d91445be7f3c6", "sha256": "b2b0f15b2c23c2e7ad083b4e69ab9af4e4608e8e5034920755d80aa71eefb190"}, "downloads": -1, "filename": "bitrix24-python3-client-0.4.0.tar.gz", "has_sig": false, "md5_digest": "2003bab25077c888b06d91445be7f3c6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 7860, "upload_time": "2019-11-24T23:49:52", "upload_time_iso_8601": "2019-11-24T23:49:52.667736Z", "url": "https://files.pythonhosted.org/packages/5b/73/05258b45c8b05f7a6d1d2e00581786a0001c470d0c155dff6841d66769ad/bitrix24-python3-client-0.4.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "eccc3ff51946d824771252d367df385f", "sha256": "e9c6254ddbab2d8fe8a73673dde0f0b0651594021fd6a37361de5187893785a4"}, "downloads": -1, "filename": "bitrix24_python3_client-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "eccc3ff51946d824771252d367df385f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 10638, "upload_time": "2019-11-24T23:49:51", "upload_time_iso_8601": "2019-11-24T23:49:51.118942Z", "url": "https://files.pythonhosted.org/packages/04/43/1d84c51d89215165d2f8543daa4fb2b9852626af1a7da0215838686bb0fa/bitrix24_python3_client-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2003bab25077c888b06d91445be7f3c6", "sha256": "b2b0f15b2c23c2e7ad083b4e69ab9af4e4608e8e5034920755d80aa71eefb190"}, "downloads": -1, "filename": "bitrix24-python3-client-0.4.0.tar.gz", "has_sig": false, "md5_digest": "2003bab25077c888b06d91445be7f3c6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 7860, "upload_time": "2019-11-24T23:49:52", "upload_time_iso_8601": "2019-11-24T23:49:52.667736Z", "url": "https://files.pythonhosted.org/packages/5b/73/05258b45c8b05f7a6d1d2e00581786a0001c470d0c155dff6841d66769ad/bitrix24-python3-client-0.4.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:37:15 2020"}