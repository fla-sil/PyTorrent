{"info": {"author": "Adam McDaniel", "author_email": "adam.mcdaniel17@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Programming Language :: Python :: 3"], "description": "# sight\nA library for Vision Processing\n\n## What is sight?\n---\n\nsight is really just a library built on top of OpenCV. It abstracts away all of the awful C-like garbage, and makes it look more rust-like. Here's what I mean.\n\nIf I want to read an image from a file, show the original image, convert it to HSV, apply a mask, apply a gaussian blur, draw a circle around the largest blob, convert it back to BGR, and output the image, that can be done very concisely, like this:\n```python\nimport cv2\nfrom sight import *\n\nimage = cv2.imread(\"fuel.png\", 1)\n\n\n# show untouched image\n# convert to HSV\noriginal = Image(image).show(\"original\").convert_to_hsv()\n\n# HSV mask for neon yellow\nmask = original.get_mask(\n    [27, 100, 100],\n    [40, 255, 255]\n)\n\n# apply mask\n# blur 100%\n# draw circle around the largest blob\n# convert back to BGR\n# show image\noriginal.mask(mask).blur(1).draw_target(mask).convert_to_bgr().show(\"output\")\n\n\nwait_for_keypress()\nexit()\n```\n\nSee how easy that was?\n\n\nYou might be thinking that it's too high level to be useful. This is not so.\n\nYou can use methods like `get_blobs`, `get_largest_blob`, and several others to get the data you're looking for.\n\n## Documentation\n---\n\n```python\n# returns whether or not escape key pressed (True or False)\ndef escape_key_pressed()\n\n# waits for keypress\ndef wait_for_keypress()\n\n# destroys windows\ndef exit()\n\n\nclass Window:\n    # name the window\n    def __init__(self, name)\n\n    # adds a slider to the window with a given name\n    # set to the default value\n    # and with a max value of max\n    def add_slider(self, name, default=0, max=255)\n\n    # gets the value of a slider by name\n    def get_slider(self, name)\n\n    # gets a list of all slider values in the order you\n    # created the sliders\n    def get_sliders(self)\n\n\nclass Image:    \n    # Takes an opencv image (a numpy ndarray)\n    def __init__(self, image)\n\n    # returns a copy of the image that you\n    # can edit without affecting the original\n    def clone(self)\n\n    # Shows this image under a given window name and a size\n    def show(self, window_name, size=None)\n\n    # Resizes the image to a given size\n    def resize(self, size)\n\n    # gets rid of specs and closes holes in image\n    def smooth(self)\n\n    # gaussian blur on image using a percentage\n    def blur(self, blur_percentage)\n\n    # filter image with mask\n    def mask(self, mask)\n\n    # draw text with bottom_corner location\n    # (x and y are percentages of the screen width and height)\n    # color and size are optional\n    def draw_text(self, bottom_corner, text, color=(0, 255, 255), size=1)\n\n    # draw circle with center location\n    # (x and y are percentages of the screen width and height)\n    # and radius on image\n    # color and thickness are optional\n    def draw_circle(self, center, radius, color=(0, 255, 255), thickness=10)\n\n    # draws circle around the largest blob using a mask\n    # color and thickness are optional\n    def draw_target(self, mask, color=None, thickness=None)\n\n    # draws circles around each blob using a mask\n    # color and thickness are optional\n    def draw_targets(self, mask, color=None, thickness=None)\n\n    # returns image width\n    def get_width(self)\n\n    # returns image height\n    def get_height(self)\n\n    # returns image (width, height)\n    def get_size(self)\n\n    # get mask for values range a to b\n    # a and b are both lists 3 values long\n    # a is the lower limit for each channel in the image\n    # b is the upper limit for each channel in the image\n    def get_mask(self, a, b)\n\n    # returns a list of (x, y, radius) for each blob using a mask\n    def get_blobs(self, mask)\n\n    # returns a (x, y, radius) for the largest blob using a mask\n    def get_largest_blob(self, mask)\n\n    # converts image to HSV image\n    def convert_to_hsv(self)\n\n    # converts image to Gray image\n    def convert_to_gray(self)\n\n    # converts image to BGR image\n    def convert_to_bgr(self)\n```\n\n## Install Dependencies\n---\n```bash\npython3 -m pip install opencv-python\npython3 -m pip install numpy\n```\n\n## Future\n---\nI plan to develop this further to add features such as multithreaded, multiscaling template matching, and haarcascades. I also plan to add support for sliders.\n\nOther than that there's not much else to add, the base code is super small yet powerful, and flexible to change.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/adam-mcdaniel/small-vision", "keywords": "", "license": "Apache-2.0", "maintainer": "", "maintainer_email": "", "name": "sight", "package_url": "https://pypi.org/project/sight/", "platform": "", "project_url": "https://pypi.org/project/sight/", "project_urls": {"Homepage": "http://github.com/adam-mcdaniel/small-vision"}, "release_url": "https://pypi.org/project/sight/0.1.3/", "requires_dist": null, "requires_python": "", "summary": "A library for Vision Processing", "version": "0.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>sight</h1>\n<p>A library for Vision Processing</p>\n<h2>What is sight?</h2>\n<hr>\n<p>sight is really just a library built on top of OpenCV. It abstracts away all of the awful C-like garbage, and makes it look more rust-like. Here's what I mean.</p>\n<p>If I want to read an image from a file, show the original image, convert it to HSV, apply a mask, apply a gaussian blur, draw a circle around the largest blob, convert it back to BGR, and output the image, that can be done very concisely, like this:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">cv2</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sight</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">imread</span><span class=\"p\">(</span><span class=\"s2\">\"fuel.png\"</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># show untouched image</span>\n<span class=\"c1\"># convert to HSV</span>\n<span class=\"n\">original</span> <span class=\"o\">=</span> <span class=\"n\">Image</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">(</span><span class=\"s2\">\"original\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">convert_to_hsv</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># HSV mask for neon yellow</span>\n<span class=\"n\">mask</span> <span class=\"o\">=</span> <span class=\"n\">original</span><span class=\"o\">.</span><span class=\"n\">get_mask</span><span class=\"p\">(</span>\n    <span class=\"p\">[</span><span class=\"mi\">27</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">]</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># apply mask</span>\n<span class=\"c1\"># blur 100%</span>\n<span class=\"c1\"># draw circle around the largest blob</span>\n<span class=\"c1\"># convert back to BGR</span>\n<span class=\"c1\"># show image</span>\n<span class=\"n\">original</span><span class=\"o\">.</span><span class=\"n\">mask</span><span class=\"p\">(</span><span class=\"n\">mask</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">blur</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">draw_target</span><span class=\"p\">(</span><span class=\"n\">mask</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">convert_to_bgr</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">(</span><span class=\"s2\">\"output\"</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">wait_for_keypress</span><span class=\"p\">()</span>\n<span class=\"n\">exit</span><span class=\"p\">()</span>\n</pre>\n<p>See how easy that was?</p>\n<p>You might be thinking that it's too high level to be useful. This is not so.</p>\n<p>You can use methods like <code>get_blobs</code>, <code>get_largest_blob</code>, and several others to get the data you're looking for.</p>\n<h2>Documentation</h2>\n<hr>\n<pre><span class=\"c1\"># returns whether or not escape key pressed (True or False)</span>\n<span class=\"k\">def</span> <span class=\"nf\">escape_key_pressed</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># waits for keypress</span>\n<span class=\"k\">def</span> <span class=\"nf\">wait_for_keypress</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># destroys windows</span>\n<span class=\"k\">def</span> <span class=\"nf\">exit</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Window</span><span class=\"p\">:</span>\n    <span class=\"c1\"># name the window</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># adds a slider to the window with a given name</span>\n    <span class=\"c1\"># set to the default value</span>\n    <span class=\"c1\"># and with a max value of max</span>\n    <span class=\"k\">def</span> <span class=\"nf\">add_slider</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">max</span><span class=\"o\">=</span><span class=\"mi\">255</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># gets the value of a slider by name</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_slider</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># gets a list of all slider values in the order you</span>\n    <span class=\"c1\"># created the sliders</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_sliders</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Image</span><span class=\"p\">:</span>    \n    <span class=\"c1\"># Takes an opencv image (a numpy ndarray)</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">image</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># returns a copy of the image that you</span>\n    <span class=\"c1\"># can edit without affecting the original</span>\n    <span class=\"k\">def</span> <span class=\"nf\">clone</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Shows this image under a given window name and a size</span>\n    <span class=\"k\">def</span> <span class=\"nf\">show</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">window_name</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Resizes the image to a given size</span>\n    <span class=\"k\">def</span> <span class=\"nf\">resize</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># gets rid of specs and closes holes in image</span>\n    <span class=\"k\">def</span> <span class=\"nf\">smooth</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># gaussian blur on image using a percentage</span>\n    <span class=\"k\">def</span> <span class=\"nf\">blur</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">blur_percentage</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># filter image with mask</span>\n    <span class=\"k\">def</span> <span class=\"nf\">mask</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">mask</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># draw text with bottom_corner location</span>\n    <span class=\"c1\"># (x and y are percentages of the screen width and height)</span>\n    <span class=\"c1\"># color and size are optional</span>\n    <span class=\"k\">def</span> <span class=\"nf\">draw_text</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">bottom_corner</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">),</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># draw circle with center location</span>\n    <span class=\"c1\"># (x and y are percentages of the screen width and height)</span>\n    <span class=\"c1\"># and radius on image</span>\n    <span class=\"c1\"># color and thickness are optional</span>\n    <span class=\"k\">def</span> <span class=\"nf\">draw_circle</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">center</span><span class=\"p\">,</span> <span class=\"n\">radius</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">),</span> <span class=\"n\">thickness</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># draws circle around the largest blob using a mask</span>\n    <span class=\"c1\"># color and thickness are optional</span>\n    <span class=\"k\">def</span> <span class=\"nf\">draw_target</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">mask</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">thickness</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># draws circles around each blob using a mask</span>\n    <span class=\"c1\"># color and thickness are optional</span>\n    <span class=\"k\">def</span> <span class=\"nf\">draw_targets</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">mask</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">thickness</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># returns image width</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_width</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># returns image height</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_height</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># returns image (width, height)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_size</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get mask for values range a to b</span>\n    <span class=\"c1\"># a and b are both lists 3 values long</span>\n    <span class=\"c1\"># a is the lower limit for each channel in the image</span>\n    <span class=\"c1\"># b is the upper limit for each channel in the image</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_mask</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># returns a list of (x, y, radius) for each blob using a mask</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_blobs</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">mask</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># returns a (x, y, radius) for the largest blob using a mask</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_largest_blob</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">mask</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># converts image to HSV image</span>\n    <span class=\"k\">def</span> <span class=\"nf\">convert_to_hsv</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># converts image to Gray image</span>\n    <span class=\"k\">def</span> <span class=\"nf\">convert_to_gray</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># converts image to BGR image</span>\n    <span class=\"k\">def</span> <span class=\"nf\">convert_to_bgr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n</pre>\n<h2>Install Dependencies</h2>\n<hr>\n<pre>python3 -m pip install opencv-python\npython3 -m pip install numpy\n</pre>\n<h2>Future</h2>\n<hr>\n<p>I plan to develop this further to add features such as multithreaded, multiscaling template matching, and haarcascades. I also plan to add support for sliders.</p>\n<p>Other than that there's not much else to add, the base code is super small yet powerful, and flexible to change.</p>\n\n          </div>"}, "last_serial": 6404431, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "38ab1521bf57e31b9273dec489206eec", "sha256": "97bd3eb6c1695006f5384e71e0d2bf2aad40849762a137d18505bec0bdabdbc5"}, "downloads": -1, "filename": "sight-0.1.0.tar.gz", "has_sig": false, "md5_digest": "38ab1521bf57e31b9273dec489206eec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5080, "upload_time": "2020-01-06T20:20:42", "upload_time_iso_8601": "2020-01-06T20:20:42.852008Z", "url": "https://files.pythonhosted.org/packages/c4/6a/3481b47e69f368db3b6a94146f6d9efad8eaa143c91bd3c48d66561728af/sight-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "d314931ae5306d26731eb699f8aacfa8", "sha256": "6fc77070bc99e06496a1a179da418536ded16596c4dc08f3dd473389ad0e086c"}, "downloads": -1, "filename": "sight-0.1.1.tar.gz", "has_sig": false, "md5_digest": "d314931ae5306d26731eb699f8aacfa8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5124, "upload_time": "2020-01-06T20:38:15", "upload_time_iso_8601": "2020-01-06T20:38:15.030465Z", "url": "https://files.pythonhosted.org/packages/af/1b/0e592539cdb8e7876c2e23a7da01105ffe6a24073ddff7d1377ded9868c5/sight-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "ea55a84ce712dd9216dee0f9ce89cd7f", "sha256": "ffc8e38286e0fe8671e6f7f30d4e053e86ac65028e0210d30959ee8dea3974ce"}, "downloads": -1, "filename": "sight-0.1.2.tar.gz", "has_sig": false, "md5_digest": "ea55a84ce712dd9216dee0f9ce89cd7f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5130, "upload_time": "2020-01-06T20:40:22", "upload_time_iso_8601": "2020-01-06T20:40:22.440036Z", "url": "https://files.pythonhosted.org/packages/41/dd/8389c6760fd043b3802630c5c544c9c9af3c114498d458c2903df061baba/sight-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "e41204c1b93d9c95d74e48d2d36cb810", "sha256": "7f742e287157524ac8c40fec76c2a3d2d1b0dcb91c0f5cfe787f2a134223146a"}, "downloads": -1, "filename": "sight-0.1.3.tar.gz", "has_sig": false, "md5_digest": "e41204c1b93d9c95d74e48d2d36cb810", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5203, "upload_time": "2020-01-06T20:50:27", "upload_time_iso_8601": "2020-01-06T20:50:27.547252Z", "url": "https://files.pythonhosted.org/packages/53/0e/36ecb4d28fe8d1397bed8eef4f4f6a8de4e69964576757346d4a0cad5e42/sight-0.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e41204c1b93d9c95d74e48d2d36cb810", "sha256": "7f742e287157524ac8c40fec76c2a3d2d1b0dcb91c0f5cfe787f2a134223146a"}, "downloads": -1, "filename": "sight-0.1.3.tar.gz", "has_sig": false, "md5_digest": "e41204c1b93d9c95d74e48d2d36cb810", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5203, "upload_time": "2020-01-06T20:50:27", "upload_time_iso_8601": "2020-01-06T20:50:27.547252Z", "url": "https://files.pythonhosted.org/packages/53/0e/36ecb4d28fe8d1397bed8eef4f4f6a8de4e69964576757346d4a0cad5e42/sight-0.1.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:11:53 2020"}