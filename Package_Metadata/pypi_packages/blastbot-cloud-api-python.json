{"info": {"author": "Rodrigo Mendez", "author_email": "rmendez@makerlab.mx", "bugtrack_url": null, "classifiers": [], "description": "# Blastbot Cloud API Python\n\nBlastbot Cloud API Client for python\n\n## Installation\n\nblastbot-cloud-api-python is supported on Python 3.7+. The recommended way to install it is via pip.\n\n```\npip install blastbot-cloud-api-python\n```\n\n## Usage\n\nThe library is built with asyncio and aiohttp, that means that most of the functions are async and need to run inside the asyncio event loop.\n\nSee usage examples in `main.py`.\n\n**TLDR:**\n\n```python\n# Initialize\napi = BlastbotCloudAPI()\nsuccess = await api.async_login(EMAIL, PASSWORD)\n\n# ... do your stuff with api ...\n\n# IMPORTANT: Always close the session before exiting\nawait api.async_close()\n```\n\n## Reference\n\n### blastbot_cloud_api.api\n\n**BlastbotCloudAPI**\n\n- async_close(): Closes underlying aiohttp session\n- async_login(email: str, password: str) -> bool: Logs in to Blastbot Cloud, returns if successful\n- async_get_devices() -> List[Device]: Get devices\n- async_get_device(id: int) -> Device: Get a specific device\n- async_get_controls(type: str = None) -> List[Control]: Get controls, optionally filter by type (switch, ac or ir)\n- async_get_control(id: int) -> Control: Get a specific control\n- async_get_switches() -> List[Control]: Get all switch controls\n- async_get_acs() -> List[Control]: Get al AC controls\n- async_get_irs() -> List[Control]: Get all ir/rf controls\n\n### blastbot_cloud_api.models.device\n\n**Device**\n\n- id: int\n- address: int\n- bridge: dict\n- bridgeId: int\n- config: dict\n- connected: bool\n- mac: str\n- state: str\n- version: str\n- name: str\n- type: str\n- async_update(): Updates device data from Blastbot Cloud\n\n### blastbot_cloud_api.models.control\n\n**Control**\n\n- id: int\n- deviceId: int\n- name: str\n- type: str: (switch, ac or ir)\n- acSettings: dict\n- buttons: List[dict]\n- device: dict\n- switches: List[dict]\n- switch_state() -> bool: Get switch state (for switch controls)\n- async_control_button(button_id: int): Execute a button action (for ir/rf controls)\n- async_control_switch(is_on: bool): Control a switch (for switch controls)\n- async_control_ac(state: str = None, temperature: str = None, fan: str = None): Control the ac state (for ac controls)\n  - state: \"on\" or \"off\"\n  - temperature: number of \u00baC in string\n  - fan: one of \"auto\", \"low\", \"medium\" or \"high\"\n- async_update(): Update control data from Blastbot Cloud\n\n## Contributing\n\n### Development Requirements\n\n- python 3.7\n- pipenv\n\n### Development setup\n\nOn macOS:\n\n```\nbrew install python\nbrew install pipenv\n```\n\nInside this folder:\n\n```\npipenv shell --python=3.7\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Rodmg/blastbot-cloud-api-python", "keywords": "", "license": "Apache License Version 2.0", "maintainer": "", "maintainer_email": "", "name": "blastbot-cloud-api-python", "package_url": "https://pypi.org/project/blastbot-cloud-api-python/", "platform": "", "project_url": "https://pypi.org/project/blastbot-cloud-api-python/", "project_urls": {"Homepage": "https://github.com/Rodmg/blastbot-cloud-api-python"}, "release_url": "https://pypi.org/project/blastbot-cloud-api-python/0.1.0/", "requires_dist": ["aiohttp"], "requires_python": "", "summary": "Library for interfacing with Blastbot Cloud", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Blastbot Cloud API Python</h1>\n<p>Blastbot Cloud API Client for python</p>\n<h2>Installation</h2>\n<p>blastbot-cloud-api-python is supported on Python 3.7+. The recommended way to install it is via pip.</p>\n<pre><code>pip install blastbot-cloud-api-python\n</code></pre>\n<h2>Usage</h2>\n<p>The library is built with asyncio and aiohttp, that means that most of the functions are async and need to run inside the asyncio event loop.</p>\n<p>See usage examples in <code>main.py</code>.</p>\n<p><strong>TLDR:</strong></p>\n<pre><span class=\"c1\"># Initialize</span>\n<span class=\"n\">api</span> <span class=\"o\">=</span> <span class=\"n\">BlastbotCloudAPI</span><span class=\"p\">()</span>\n<span class=\"n\">success</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">async_login</span><span class=\"p\">(</span><span class=\"n\">EMAIL</span><span class=\"p\">,</span> <span class=\"n\">PASSWORD</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># ... do your stuff with api ...</span>\n\n<span class=\"c1\"># IMPORTANT: Always close the session before exiting</span>\n<span class=\"k\">await</span> <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">async_close</span><span class=\"p\">()</span>\n</pre>\n<h2>Reference</h2>\n<h3>blastbot_cloud_api.api</h3>\n<p><strong>BlastbotCloudAPI</strong></p>\n<ul>\n<li>async_close(): Closes underlying aiohttp session</li>\n<li>async_login(email: str, password: str) -&gt; bool: Logs in to Blastbot Cloud, returns if successful</li>\n<li>async_get_devices() -&gt; List[Device]: Get devices</li>\n<li>async_get_device(id: int) -&gt; Device: Get a specific device</li>\n<li>async_get_controls(type: str = None) -&gt; List[Control]: Get controls, optionally filter by type (switch, ac or ir)</li>\n<li>async_get_control(id: int) -&gt; Control: Get a specific control</li>\n<li>async_get_switches() -&gt; List[Control]: Get all switch controls</li>\n<li>async_get_acs() -&gt; List[Control]: Get al AC controls</li>\n<li>async_get_irs() -&gt; List[Control]: Get all ir/rf controls</li>\n</ul>\n<h3>blastbot_cloud_api.models.device</h3>\n<p><strong>Device</strong></p>\n<ul>\n<li>id: int</li>\n<li>address: int</li>\n<li>bridge: dict</li>\n<li>bridgeId: int</li>\n<li>config: dict</li>\n<li>connected: bool</li>\n<li>mac: str</li>\n<li>state: str</li>\n<li>version: str</li>\n<li>name: str</li>\n<li>type: str</li>\n<li>async_update(): Updates device data from Blastbot Cloud</li>\n</ul>\n<h3>blastbot_cloud_api.models.control</h3>\n<p><strong>Control</strong></p>\n<ul>\n<li>id: int</li>\n<li>deviceId: int</li>\n<li>name: str</li>\n<li>type: str: (switch, ac or ir)</li>\n<li>acSettings: dict</li>\n<li>buttons: List[dict]</li>\n<li>device: dict</li>\n<li>switches: List[dict]</li>\n<li>switch_state() -&gt; bool: Get switch state (for switch controls)</li>\n<li>async_control_button(button_id: int): Execute a button action (for ir/rf controls)</li>\n<li>async_control_switch(is_on: bool): Control a switch (for switch controls)</li>\n<li>async_control_ac(state: str = None, temperature: str = None, fan: str = None): Control the ac state (for ac controls)\n<ul>\n<li>state: \"on\" or \"off\"</li>\n<li>temperature: number of \u00baC in string</li>\n<li>fan: one of \"auto\", \"low\", \"medium\" or \"high\"</li>\n</ul>\n</li>\n<li>async_update(): Update control data from Blastbot Cloud</li>\n</ul>\n<h2>Contributing</h2>\n<h3>Development Requirements</h3>\n<ul>\n<li>python 3.7</li>\n<li>pipenv</li>\n</ul>\n<h3>Development setup</h3>\n<p>On macOS:</p>\n<pre><code>brew install python\nbrew install pipenv\n</code></pre>\n<p>Inside this folder:</p>\n<pre><code>pipenv shell --python=3.7\n</code></pre>\n\n          </div>"}, "last_serial": 7102722, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "403f43b5760dcce5781ace887aa83ba4", "sha256": "99ae005bd9bb0b7b34f0147e4923967f0a0932503a354464d9ebb6f286a7679d"}, "downloads": -1, "filename": "blastbot_cloud_api_python-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "403f43b5760dcce5781ace887aa83ba4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10541, "upload_time": "2020-04-26T04:22:50", "upload_time_iso_8601": "2020-04-26T04:22:50.732449Z", "url": "https://files.pythonhosted.org/packages/5c/81/a7100d8bd3f7222d4898d814cbd0f384ace4d5c345cf7d9a038f95bd5f3a/blastbot_cloud_api_python-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2f45a8626d238fdfed169fc17db396d6", "sha256": "5bd32b227cc6ac5923a3125a725e8f58e578f281f998545d7664e38460a446fe"}, "downloads": -1, "filename": "blastbot-cloud-api-python-0.1.0.tar.gz", "has_sig": false, "md5_digest": "2f45a8626d238fdfed169fc17db396d6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4739, "upload_time": "2020-04-26T04:22:53", "upload_time_iso_8601": "2020-04-26T04:22:53.217359Z", "url": "https://files.pythonhosted.org/packages/af/94/083009d0736c5b715a2b3ed1c3c1da622a5069dfd109070f3d12ad0f39ad/blastbot-cloud-api-python-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "403f43b5760dcce5781ace887aa83ba4", "sha256": "99ae005bd9bb0b7b34f0147e4923967f0a0932503a354464d9ebb6f286a7679d"}, "downloads": -1, "filename": "blastbot_cloud_api_python-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "403f43b5760dcce5781ace887aa83ba4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10541, "upload_time": "2020-04-26T04:22:50", "upload_time_iso_8601": "2020-04-26T04:22:50.732449Z", "url": "https://files.pythonhosted.org/packages/5c/81/a7100d8bd3f7222d4898d814cbd0f384ace4d5c345cf7d9a038f95bd5f3a/blastbot_cloud_api_python-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2f45a8626d238fdfed169fc17db396d6", "sha256": "5bd32b227cc6ac5923a3125a725e8f58e578f281f998545d7664e38460a446fe"}, "downloads": -1, "filename": "blastbot-cloud-api-python-0.1.0.tar.gz", "has_sig": false, "md5_digest": "2f45a8626d238fdfed169fc17db396d6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4739, "upload_time": "2020-04-26T04:22:53", "upload_time_iso_8601": "2020-04-26T04:22:53.217359Z", "url": "https://files.pythonhosted.org/packages/af/94/083009d0736c5b715a2b3ed1c3c1da622a5069dfd109070f3d12ad0f39ad/blastbot-cloud-api-python-0.1.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:37:08 2020"}