{"info": {"author": "JJ Geewax", "author_email": "jj@geewax.org", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License (GPL)", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Software Development :: Testing"], "description": "This library provides a set of base test cases that can be mixed into your existing test cases.\n    \n    They provide additional features to sandbox each test (by clearing the DataStore, Memcache, etc)\n    and also add in additional `assert` style statements.\n    \n    MailTestCase example::\n        \n        import unittest\n        from gaetestbed import MailTestCase\n        \n        class MyTestCase(unittest.TestCase, MailTestCase):\n            def test_email_sent(self):\n                send_email_to('test@example.org') # Some method that sends e-mail...\n                self.assertEmailSent(to='test@example.org')\n                self.assertEqual(len(self.get_sent_messages()), 1)\n    \n    MemcacheTestCase example::\n    \n        import unittest\n        from gaetestbed import MemcacheTestCase\n        \n        class MyTestCase(unittest.TestCase, MemcacheTestCase):\n            def test_memcache_gets_hit(self):\n                self.assertMemcacheItems(0)\n                self.assertMemcacheHits(0)\n                \n                add_to_memcache('something', 'something') # Add something to memcache somehow...\n                self.assertMemcacheItems(1)\n                self.assertMemcacheHits(0)\n                \n                get_page('/page_that_hits_memcache/')\n                self.assertMemcacheItems(1)\n                self.assertMemcacheHits(1)", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://jgeewax.github.com/gaetestbed", "keywords": "test testing app-engine google-app-engine gae unittest", "license": "GPL v2", "maintainer": null, "maintainer_email": null, "name": "gaetestbed", "package_url": "https://pypi.org/project/gaetestbed/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/gaetestbed/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://jgeewax.github.com/gaetestbed"}, "release_url": "https://pypi.org/project/gaetestbed/0.12/", "requires_dist": null, "requires_python": null, "summary": "GAE Testbed is a set of test cases to simplify testing on AppEngine", "version": "0.12", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This library provides a set of base test cases that can be mixed into your existing test cases.</p>\n<blockquote>\n<p>They provide additional features to sandbox each test (by clearing the DataStore, Memcache, etc)\nand also add in additional <cite>assert</cite> style statements.</p>\n<p>MailTestCase example:</p>\n<pre>import unittest\nfrom gaetestbed import MailTestCase\n\nclass MyTestCase(unittest.TestCase, MailTestCase):\n    def test_email_sent(self):\n        send_email_to('test@example.org') # Some method that sends e-mail...\n        self.assertEmailSent(to='test@example.org')\n        self.assertEqual(len(self.get_sent_messages()), 1)\n</pre>\n<p>MemcacheTestCase example:</p>\n<pre>import unittest\nfrom gaetestbed import MemcacheTestCase\n\nclass MyTestCase(unittest.TestCase, MemcacheTestCase):\n    def test_memcache_gets_hit(self):\n        self.assertMemcacheItems(0)\n        self.assertMemcacheHits(0)\n\n        add_to_memcache('something', 'something') # Add something to memcache somehow...\n        self.assertMemcacheItems(1)\n        self.assertMemcacheHits(0)\n\n        get_page('/page_that_hits_memcache/')\n        self.assertMemcacheItems(1)\n        self.assertMemcacheHits(1)\n</pre>\n</blockquote>\n\n          </div>"}, "last_serial": 792252, "releases": {"0.11dev-r11": [], "0.12": [{"comment_text": "", "digests": {"md5": "f969c1e6b9c6638b10d7dde17f3ffd8d", "sha256": "a3790983d08c2f9c2aa9f3f2a348f37c801dd89cfb19fb976a048cdf10fac0e6"}, "downloads": -1, "filename": "gaetestbed-0.12.tar.gz", "has_sig": false, "md5_digest": "f969c1e6b9c6638b10d7dde17f3ffd8d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9712, "upload_time": "2010-08-15T17:12:05", "upload_time_iso_8601": "2010-08-15T17:12:05.333778Z", "url": "https://files.pythonhosted.org/packages/a4/49/6cde6befa18ace00bf7e1ad12fe1802f5627aff6957f60cd202f72c019e9/gaetestbed-0.12.tar.gz", "yanked": false}], "0.12dev": [{"comment_text": "", "digests": {"md5": "b47f688253ab71283dab19bc7ea09b30", "sha256": "48943a4be72333237ccb3a87b494d1dfa96e499b7bfe0bdee48eaecceedcd9b9"}, "downloads": -1, "filename": "gaetestbed-0.12dev.tar.gz", "has_sig": false, "md5_digest": "b47f688253ab71283dab19bc7ea09b30", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18984, "upload_time": "2010-08-15T05:22:22", "upload_time_iso_8601": "2010-08-15T05:22:22.469693Z", "url": "https://files.pythonhosted.org/packages/9c/18/dc76b1e1c5b78a70892eb6553ad1a86acba5aa63dba417378cb776e6ade1/gaetestbed-0.12dev.tar.gz", "yanked": false}], "0.12dev-r16": [], "0.1dev-r10": [], "0.1dev-r11": []}, "urls": [{"comment_text": "", "digests": {"md5": "f969c1e6b9c6638b10d7dde17f3ffd8d", "sha256": "a3790983d08c2f9c2aa9f3f2a348f37c801dd89cfb19fb976a048cdf10fac0e6"}, "downloads": -1, "filename": "gaetestbed-0.12.tar.gz", "has_sig": false, "md5_digest": "f969c1e6b9c6638b10d7dde17f3ffd8d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9712, "upload_time": "2010-08-15T17:12:05", "upload_time_iso_8601": "2010-08-15T17:12:05.333778Z", "url": "https://files.pythonhosted.org/packages/a4/49/6cde6befa18ace00bf7e1ad12fe1802f5627aff6957f60cd202f72c019e9/gaetestbed-0.12.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:59:22 2020"}