{"info": {"author": "Jakub Turek", "author_email": "jakub.turek@elpassion.pl", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7"], "description": "# Missing SwiftLint runner\n\nMissing Xcode project aware **SwiftLint runner** with support for different targets.\n\n## Motivation\n\nThe original SwiftLint tool is Xcode project agnostic. This can be problematic. Imagine you want to use different SwiftLint config for production and test targets and you have a directory structure where tests (specs) are mixed up with production code:\n\n```\nUI /\n\u2502\n\u2514\u2500\u2500 Controllers /\n    \u2502\n    \u251c\u2500\u2500 ViewController.swift\n    \u251c\u2500\u2500 ViewControllerSpec.swift\n    \u2514\u2500\u2500 Doubles\n        \u2514\u2500\u2500 APIClientDouble.swift\n```\n\nAs of now, SwiftLint does not support recursive glob patterns, so you can't exclude the directory like `**Doubles`. \n\n## SwiftLint runner\n\n**SwiftLint runner** lists all of the Swift files under a specific target, appends it to the specified config file and performs linting on those files.\n\nGiven the directory structure:\n\n```\nProject /\n\u2502\n\u251c\u2500\u2500 .swiftlint_sources.yml\n\u251c\u2500\u2500 .swiftlint_specs.yml\n\u251c\u2500\u2500 Project.xcodeproj\n\u2514\u2500\u2500 Controllers /\n    \u251c\u2500\u2500 ViewController.swift\n    \u2514\u2500\u2500 ViewControllerSpec.swift\n```\n\nand the two targets called `Production` & `Specs` you can use SwiftLint runner as follows:\n\n```\nslrunner Project.xcodeproj Production .swiftlint_sources.yml\nslrunner Project.xcodeproj Specs .swiftlint_specs.yml\n```\n\nAnd forget about glob patterns at all!\n\n## Installation\n\n**SwiftLint runner** requires Python 3.7. To install it, simply run:\n\n```\npip install swiftlint-runner\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/elpassion/swiftlint-runner", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "swiftlint-runner", "package_url": "https://pypi.org/project/swiftlint-runner/", "platform": "", "project_url": "https://pypi.org/project/swiftlint-runner/", "project_urls": {"Homepage": "https://github.com/elpassion/swiftlint-runner"}, "release_url": "https://pypi.org/project/swiftlint-runner/0.0.1/", "requires_dist": ["click", "pyyaml", "mod-pbxproj"], "requires_python": "", "summary": "Missing SwiftLint runner with ability to define config file per target", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Missing SwiftLint runner</h1>\n<p>Missing Xcode project aware <strong>SwiftLint runner</strong> with support for different targets.</p>\n<h2>Motivation</h2>\n<p>The original SwiftLint tool is Xcode project agnostic. This can be problematic. Imagine you want to use different SwiftLint config for production and test targets and you have a directory structure where tests (specs) are mixed up with production code:</p>\n<pre><code>UI /\n\u2502\n\u2514\u2500\u2500 Controllers /\n    \u2502\n    \u251c\u2500\u2500 ViewController.swift\n    \u251c\u2500\u2500 ViewControllerSpec.swift\n    \u2514\u2500\u2500 Doubles\n        \u2514\u2500\u2500 APIClientDouble.swift\n</code></pre>\n<p>As of now, SwiftLint does not support recursive glob patterns, so you can't exclude the directory like <code>**Doubles</code>.</p>\n<h2>SwiftLint runner</h2>\n<p><strong>SwiftLint runner</strong> lists all of the Swift files under a specific target, appends it to the specified config file and performs linting on those files.</p>\n<p>Given the directory structure:</p>\n<pre><code>Project /\n\u2502\n\u251c\u2500\u2500 .swiftlint_sources.yml\n\u251c\u2500\u2500 .swiftlint_specs.yml\n\u251c\u2500\u2500 Project.xcodeproj\n\u2514\u2500\u2500 Controllers /\n    \u251c\u2500\u2500 ViewController.swift\n    \u2514\u2500\u2500 ViewControllerSpec.swift\n</code></pre>\n<p>and the two targets called <code>Production</code> &amp; <code>Specs</code> you can use SwiftLint runner as follows:</p>\n<pre><code>slrunner Project.xcodeproj Production .swiftlint_sources.yml\nslrunner Project.xcodeproj Specs .swiftlint_specs.yml\n</code></pre>\n<p>And forget about glob patterns at all!</p>\n<h2>Installation</h2>\n<p><strong>SwiftLint runner</strong> requires Python 3.7. To install it, simply run:</p>\n<pre><code>pip install swiftlint-runner\n</code></pre>\n\n          </div>"}, "last_serial": 4925780, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "03f44c37576be6f40edc55b3bd1d5069", "sha256": "9b21d0291a71583b901458cd1686367f5476902e0ee3cc862cf5fd8ab03a2382"}, "downloads": -1, "filename": "swiftlint_runner-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "03f44c37576be6f40edc55b3bd1d5069", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4778, "upload_time": "2019-03-11T15:50:14", "upload_time_iso_8601": "2019-03-11T15:50:14.233562Z", "url": "https://files.pythonhosted.org/packages/e8/4d/e1ed0f46f75f2ee4ded277076db69bd9f6e5bf22f9444770fb15780302e5/swiftlint_runner-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3f5c6e378b144036cbd4303f6d9d9f43", "sha256": "ac4b7e4fd41180c479d06aeff983b6ad1f822d549a80ca5032d850d7088bbe0b"}, "downloads": -1, "filename": "swiftlint-runner-0.0.1.tar.gz", "has_sig": false, "md5_digest": "3f5c6e378b144036cbd4303f6d9d9f43", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3972, "upload_time": "2019-03-11T15:50:17", "upload_time_iso_8601": "2019-03-11T15:50:17.887553Z", "url": "https://files.pythonhosted.org/packages/21/37/91ca23b31808cb6f7fa8e0de4ceb866cc6728b278f7bd4add409741c999f/swiftlint-runner-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "03f44c37576be6f40edc55b3bd1d5069", "sha256": "9b21d0291a71583b901458cd1686367f5476902e0ee3cc862cf5fd8ab03a2382"}, "downloads": -1, "filename": "swiftlint_runner-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "03f44c37576be6f40edc55b3bd1d5069", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4778, "upload_time": "2019-03-11T15:50:14", "upload_time_iso_8601": "2019-03-11T15:50:14.233562Z", "url": "https://files.pythonhosted.org/packages/e8/4d/e1ed0f46f75f2ee4ded277076db69bd9f6e5bf22f9444770fb15780302e5/swiftlint_runner-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3f5c6e378b144036cbd4303f6d9d9f43", "sha256": "ac4b7e4fd41180c479d06aeff983b6ad1f822d549a80ca5032d850d7088bbe0b"}, "downloads": -1, "filename": "swiftlint-runner-0.0.1.tar.gz", "has_sig": false, "md5_digest": "3f5c6e378b144036cbd4303f6d9d9f43", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3972, "upload_time": "2019-03-11T15:50:17", "upload_time_iso_8601": "2019-03-11T15:50:17.887553Z", "url": "https://files.pythonhosted.org/packages/21/37/91ca23b31808cb6f7fa8e0de4ceb866cc6728b278f7bd4add409741c999f/swiftlint-runner-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:59:30 2020"}