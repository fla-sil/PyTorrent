{"info": {"author": "Chris Sewell", "author_email": "chrisj_sewell@hotmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "[Install](#install) | [Example](#example-cli-usage) | [Contributing](#contributing)\n\n# jupyter-cache\n\n[![CI Status][travis-badge]][travis-link]\n[![Coverage][coveralls-badge]][coveralls-link]\n[![Documentation Status][rtd-badge]][rtd-link]\n[![Code style: black][black-badge]][black-link]\n[![PyPI][pypi-badge]][pypi-link]\n\nA defined interface for working with a cache of jupyter notebooks.\n\nNOTE: This package is in an Alpha stage and liable to change.\n\nSome desired requirements (not yet all implemented):\n\n- Persistent\n- Separates out \"edits to content\" from \"edits to code cells\". Cell\n  rearranges and code cell changes should require a re-execution. Content changes should not.\n- Allow parallel access to notebooks (for execution)\n- Store execution statistics/reports\n- Store external assets: Notebooks being executed often require external assets: importing scripts/data/etc. These are prepared by the users.\n- Store execution artifacts: created during exeution\n- A transparent and robust cache invalidation: imagine the user updating an external dependency or a Python module, or checking out a different git branch.\n\n[travis-badge]: https://travis-ci.org/ExecutableBookProject/jupyter-cache.svg?branch=master\n[travis-link]: https://travis-ci.org/ExecutableBookProject/jupyter-cache\n[coveralls-badge]: https://coveralls.io/repos/github/ExecutableBookProject/jupyter-cache/badge.svg?branch=master\n[coveralls-link]: https://coveralls.io/github/ExecutableBookProject/jupyter-cache?branch=master\n[rtd-badge]: https://readthedocs.org/projects/jupyter-cache/badge/?version=latest\n[rtd-link]: https://jupyter-cache.readthedocs.io/en/latest/?badge=latest\n[black-badge]: https://img.shields.io/badge/code%20style-black-000000.svg\n[pypi-badge]: https://img.shields.io/pypi/v/jupyter-cache.svg\n[pypi-link]: https://pypi.org/project/jupyter-cache\n[black-link]: https://github.com/ambv/black\n\n## Install\n\n```bash\npip install jupyter-cache[cli]\n```\n\nFor development:\n\n```bash\ngit clone https://github.com/ExecutableBookProject/jupyter-cache\ncd jupyter-cache\ngit checkout develop\npip install -e .[cli,code_style,testing]\n```\n\n## Example API usage\n\nto come ...\n\n## Example CLI usage\n\n<!-- This section was auto-generated on 2020-03-12 17:31 by: /Users/cjs14/GitHub/jupyter-cache/tests/make_cli_readme.py -->\n\nFrom the checked-out repository folder:\n\n```console\n$ jcache --help\nUsage: jcache [OPTIONS] COMMAND [ARGS]...\n\n  The command line interface of jupyter-cache.\n\nOptions:\n  -v, --version       Show the version and exit.\n  -p, --cache-path    Print the current cache path and exit.\n  -a, --autocomplete  Print the autocompletion command and exit.\n  -h, --help          Show this message and exit.\n\nCommands:\n  cache    Commands for adding to and inspecting the cache.\n  clear    Clear the cache completely.\n  config   Commands for configuring the cache.\n  execute  Execute staged notebooks that are outdated.\n  stage    Commands for staging notebooks to be executed.\n```\n\n**Important**: Execute this in the terminal for auto-completion:\n\n```console\neval \"$(_JCACHE_COMPLETE=source jcache)\"\n```\n\n### Caching Executed Notebooks\n\n```console\n$ jcache cache --help\nUsage: cache [OPTIONS] COMMAND [ARGS]...\n\n  Commands for adding to and inspecting the cache.\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  add                 Cache notebook(s) that have already been executed.\n  add-with-artefacts  Cache a notebook, with possible artefact files.\n  cat-artifact        Print the contents of a cached artefact.\n  diff-nb             Print a diff of a notebook to one stored in the cache.\n  list                List cached notebook records in the cache.\n  remove              Remove notebooks stored in the cache.\n  show                Show details of a cached notebook in the cache.\n```\n\nThe first time the cache is required, it will be lazily created:\n\n```console\n$ jcache cache list\nCache path: ../.jupyter_cache\nThe cache does not yet exist, do you want to create it? [y/N]: y\nNo Cached Notebooks\n\n```\n\nYou can add notebooks straight into the cache.\nWhen caching, a check will be made that the notebooks look to have been executed\ncorrectly, i.e. the cell execution counts go sequentially up from 1.\n\n```console\n$ jcache cache add tests/notebooks/basic.ipynb\nCaching: ../tests/notebooks/basic.ipynb\nValidity Error: Expected cell 1 to have execution_count 1 not 2\nThe notebook may not have been executed, continue caching? [y/N]: y\nSuccess!\n```\n\nOr to skip validation:\n\n```console\n$ jcache cache add --no-validate tests/notebooks/basic.ipynb tests/notebooks/basic_failing.ipynb tests/notebooks/basic_unrun.ipynb tests/notebooks/complex_outputs.ipynb tests/notebooks/external_output.ipynb\nCaching: ../tests/notebooks/basic.ipynb\nCaching: ../tests/notebooks/basic_failing.ipynb\nCaching: ../tests/notebooks/basic_unrun.ipynb\nCaching: ../tests/notebooks/complex_outputs.ipynb\nCaching: ../tests/notebooks/external_output.ipynb\nSuccess!\n```\n\nOnce you've cached some notebooks, you can look at the 'cache records'\nfor what has been cached.\n\nEach notebook is hashed (code cells and kernel spec only),\nwhich is used to compare against 'staged' notebooks.\nMultiple hashes for the same URI can be added\n(the URI is just there for inspetion) and the size of the cache is limited\n(current default 1000) so that, at this size,\nthe last accessed records begin to be deleted.\nYou can remove cached records by their ID.\n\n```console\n$ jcache cache list\n  ID  Origin URI                             Created           Accessed\n----  -------------------------------------  ----------------  ----------------\n   5  tests/notebooks/external_output.ipynb  2020-03-12 17:31  2020-03-12 17:31\n   4  tests/notebooks/complex_outputs.ipynb  2020-03-12 17:31  2020-03-12 17:31\n   3  tests/notebooks/basic_unrun.ipynb      2020-03-12 17:31  2020-03-12 17:31\n   2  tests/notebooks/basic_failing.ipynb    2020-03-12 17:31  2020-03-12 17:31\n```\n\nTip: Use the `--latest-only` option, to only show the latest versions of cached notebooks.\n\nYou can also cache notebooks with artefacts\n(external outputs of the notebook execution).\n\n```console\n$ jcache cache add-with-artefacts -nb tests/notebooks/basic.ipynb tests/notebooks/artifact_folder/artifact.txt\nCaching: ../tests/notebooks/basic.ipynb\nValidity Error: Expected cell 1 to have execution_count 1 not 2\nThe notebook may not have been executed, continue caching? [y/N]: y\nSuccess!\n```\n\nShow a full description of a cached notebook by referring to its ID\n\n```console\n$ jcache cache show 6\nID: 6\nOrigin URI: ../tests/notebooks/basic.ipynb\nCreated: 2020-03-12 17:31\nAccessed: 2020-03-12 17:31\nHashkey: 818f3412b998fcf4fe9ca3cca11a3fc3\nArtifacts:\n- artifact_folder/artifact.txt\n```\n\nNote artefact paths must be 'upstream' of the notebook folder:\n\n```console\n$ jcache cache add-with-artefacts -nb tests/notebooks/basic.ipynb tests/test_db.py\nCaching: ../tests/notebooks/basic.ipynb\nArtifact Error: Path '../tests/test_db.py' is not in folder '../tests/notebooks''\n```\n\nTo view the contents of an execution artefact:\n\n```console\n$ jcache cache cat-artifact 6 artifact_folder/artifact.txt\nAn artifact\n\n```\n\nYou can directly remove a cached notebook by its ID:\n\n```console\n$ jcache cache remove 4\nRemoving Cache ID = 4\nSuccess!\n```\n\nYou can also diff any of the cached notebooks with any (external) notebook:\n\n```console\n$ jcache cache diff-nb 2 tests/notebooks/basic.ipynb\nnbdiff\n--- cached pk=2\n+++ other: ../tests/notebooks/basic.ipynb\n## inserted before nb/cells/0:\n+  code cell:\n+    execution_count: 2\n+    source:\n+      a=1\n+      print(a)\n+    outputs:\n+      output 0:\n+        output_type: stream\n+        name: stdout\n+        text:\n+          1\n\n## deleted nb/cells/0:\n-  code cell:\n-    source:\n-      raise Exception('oopsie!')\n\n\nSuccess!\n```\n\n### Staging Notebooks for execution\n\n```console\n$ jcache stage --help\nUsage: stage [OPTIONS] COMMAND [ARGS]...\n\n  Commands for staging notebooks to be executed.\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  add              Stage notebook(s) for execution.\n  add-with-assets  Stage a notebook, with possible asset files.\n  list             List notebooks staged for possible execution.\n  remove-ids       Un-stage notebook(s), by ID.\n  remove-uris      Un-stage notebook(s), by URI.\n  show             Show details of a staged notebook.\n```\n\nStaged notebooks are recorded as pointers to their URI,\ni.e. no physical copying takes place until execution time.\n\nIf you stage some notebooks for execution, then\nyou can list them to see which have existing records in the cache (by hash),\nand which will require execution:\n\n```console\n$ jcache stage add tests/notebooks/basic.ipynb tests/notebooks/basic_failing.ipynb tests/notebooks/basic_unrun.ipynb tests/notebooks/complex_outputs.ipynb tests/notebooks/external_output.ipynb\nStaging: ../tests/notebooks/basic.ipynb\nStaging: ../tests/notebooks/basic_failing.ipynb\nStaging: ../tests/notebooks/basic_unrun.ipynb\nStaging: ../tests/notebooks/complex_outputs.ipynb\nStaging: ../tests/notebooks/external_output.ipynb\nSuccess!\n```\n\n```console\n$ jcache stage list\n  ID  URI                                    Created             Assets    Cache ID\n----  -------------------------------------  ----------------  --------  ----------\n   5  tests/notebooks/external_output.ipynb  2020-03-12 17:31         0           5\n   4  tests/notebooks/complex_outputs.ipynb  2020-03-12 17:31         0\n   3  tests/notebooks/basic_unrun.ipynb      2020-03-12 17:31         0           6\n   2  tests/notebooks/basic_failing.ipynb    2020-03-12 17:31         0           2\n   1  tests/notebooks/basic.ipynb            2020-03-12 17:31         0           6\n```\n\nYou can remove a staged notebook by its URI or ID:\n\n```console\n$ jcache stage remove-ids 4\nUnstaging ID: 4\nSuccess!\n```\n\nYou can then run a basic execution of the required notebooks:\n\n```console\n$ jcache cache remove 6 2\nRemoving Cache ID = 6\nRemoving Cache ID = 2\nSuccess!\n```\n\n```console\n$ jcache execute\nExecuting: ../tests/notebooks/basic.ipynb\nExecution Succeeded: ../tests/notebooks/basic.ipynb\nExecuting: ../tests/notebooks/basic_failing.ipynb\nerror: Execution Failed: ../tests/notebooks/basic_failing.ipynb\nExecuting: ../tests/notebooks/basic_unrun.ipynb\nExecution Succeeded: ../tests/notebooks/basic_unrun.ipynb\nFinished! Successfully executed notebooks have been cached.\nsucceeded:\n- ../tests/notebooks/basic.ipynb\n- ../tests/notebooks/basic_unrun.ipynb\nexcepted:\n- ../tests/notebooks/basic_failing.ipynb\nerrored: []\n\n```\n\nSuccessfully executed notebooks will be cached to the cache,\nalong with any 'artefacts' created by the execution,\nthat are inside the notebook folder, and data supplied by the executor.\n\n```console\n$ jcache stage list\n  ID  URI                                    Created             Assets    Cache ID\n----  -------------------------------------  ----------------  --------  ----------\n   5  tests/notebooks/external_output.ipynb  2020-03-12 17:31         0           5\n   3  tests/notebooks/basic_unrun.ipynb      2020-03-12 17:31         0           6\n   2  tests/notebooks/basic_failing.ipynb    2020-03-12 17:31         0\n   1  tests/notebooks/basic.ipynb            2020-03-12 17:31         0           6\n```\n\nExecution data (such as execution time) will be stored in the cache record:\n\n```console\n$ jcache cache show 6\nID: 6\nOrigin URI: ../tests/notebooks/basic_unrun.ipynb\nCreated: 2020-03-12 17:31\nAccessed: 2020-03-12 17:31\nHashkey: 818f3412b998fcf4fe9ca3cca11a3fc3\nData:\n  execution_seconds: 1.0559415130000005\n\n```\n\nFailed notebooks will not be cached, but the exception traceback will be added to the stage record:\n\n```console\n$ jcache stage show 2\nID: 2\nURI: ../tests/notebooks/basic_failing.ipynb\nCreated: 2020-03-12 17:31\nFailed Last Execution!\nTraceback (most recent call last):\n  File \"../jupyter_cache/executors/basic.py\", line 152, in execute\n    executenb(nb_bundle.nb, cwd=tmpdirname)\n  File \"/anaconda/envs/mistune/lib/python3.7/site-packages/nbconvert/preprocessors/execute.py\", line 737, in executenb\n    return ep.preprocess(nb, resources, km=km)[0]\n  File \"/anaconda/envs/mistune/lib/python3.7/site-packages/nbconvert/preprocessors/execute.py\", line 405, in preprocess\n    nb, resources = super(ExecutePreprocessor, self).preprocess(nb, resources)\n  File \"/anaconda/envs/mistune/lib/python3.7/site-packages/nbconvert/preprocessors/base.py\", line 69, in preprocess\n    nb.cells[index], resources = self.preprocess_cell(cell, resources, index)\n  File \"/anaconda/envs/mistune/lib/python3.7/site-packages/nbconvert/preprocessors/execute.py\", line 448, in preprocess_cell\n    raise CellExecutionError.from_cell_and_msg(cell, out)\nnbconvert.preprocessors.execute.CellExecutionError: An error occurred while executing the following cell:\n------------------\nraise Exception('oopsie!')\n------------------\n\n---------------------------------------------------------------------------\nException                                 Traceback (most recent call last)\n<ipython-input-1-714b2b556897> in <module>\n----> 1 raise Exception('oopsie!')\n\nException: oopsie!\nException: oopsie!\n\n\n```\n\nOnce executed you may leave staged notebooks, for later re-execution, or remove them:\n\n```console\n$ jcache stage remove-ids --all\nAre you sure you want to remove all? [y/N]: y\nUnstaging ID: 1\nUnstaging ID: 2\nUnstaging ID: 3\nUnstaging ID: 5\nSuccess!\n```\n\nYou can also stage notebooks with assets;\nexternal files that are required by the notebook during execution.\nAs with artefacts, these files must be in the same folder as the notebook,\nor a sub-folder.\n\n```console\n$ jcache stage add-with-assets -nb tests/notebooks/basic.ipynb tests/notebooks/artifact_folder/artifact.txt\nSuccess!\n```\n\n```console\n$ jcache stage show 1\nID: 1\nURI: ../tests/notebooks/basic.ipynb\nCreated: 2020-03-12 17:31\nCache ID: 6\nAssets:\n- ../tests/notebooks/artifact_folder/artifact.txt\n```\n\n## Contributing\n\n### Code Style\n\nCode style is tested using [flake8](http://flake8.pycqa.org),\nwith the configuration set in `.flake8`,\nand code formatted with [black](https://github.com/ambv/black).\n\nInstalling with `jupyter-cache[code_style]` makes the [pre-commit](https://pre-commit.com/)\npackage available, which will ensure this style is met before commits are submitted, by reformatting the code\nand testing for lint errors.\nIt can be setup by:\n\n```shell\n>> cd jupyter-cache\n>> pre-commit install\n```\n\nOptionally you can run `black` and `flake8` separately:\n\n```shell\n>> black .\n>> flake8 .\n```\n\nEditors like VS Code also have automatic code reformat utilities, which can adhere to this standard.\n\n### Pull Requests\n\nTo contribute, make Pull Requests to the `develop` branch (this is the default branch). A PR can consist of one or multiple commits. Before you open a PR, make sure to clean up your commit history and create the commits that you think best divide up the total work as outlined above (use `git rebase` and `git commit --amend`). Ensure all commit messages clearly summarise the changes in the header and the problem that this commit is solving in the body.\n\nMerging pull requests: There are three ways of 'merging' pull requests on GitHub:\n\n- Squash and merge: take all commits, squash them into a single one and put it on top of the base branch.\n    Choose this for pull requests that address a single issue and are well represented by a single commit.\n    Make sure to clean the commit message (title & body)\n- Rebase and merge: take all commits and 'recreate' them on top of the base branch. All commits will be recreated with new hashes.\n    Choose this for pull requests that require more than a single commit.\n    Examples: PRs that contain multiple commits with individually significant changes; PRs that have commits from different authors (squashing commits would remove attribution)\n- Merge with merge commit: put all commits as they are on the base branch, with a merge commit on top\n    Choose for collaborative PRs with many commits. Here, the merge commit provides actual benefits.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ExecutableBookProject/jupyter-cache", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "jupyter-cache", "package_url": "https://pypi.org/project/jupyter-cache/", "platform": "", "project_url": "https://pypi.org/project/jupyter-cache/", "project_urls": {"Homepage": "https://github.com/ExecutableBookProject/jupyter-cache"}, "release_url": "https://pypi.org/project/jupyter-cache/0.2.1/", "requires_dist": ["attrs", "nbformat", "nbdime", "nbconvert", "sqlalchemy (~=1.3.12)", "click ; extra == 'cli'", "click-completion ; extra == 'cli'", "click-log ; extra == 'cli'", "tabulate ; extra == 'cli'", "pyyaml ; extra == 'cli'", "flake8 (<3.8.0,>=3.7.0) ; extra == 'code_style'", "black ; extra == 'code_style'", "pre-commit (==1.17.0) ; extra == 'code_style'", "myst-nb (~=0.2.1) ; extra == 'rtd'", "sphinx-copybutton ; extra == 'rtd'", "pydata-sphinx-theme ; extra == 'rtd'", "coverage ; extra == 'testing'", "pytest (<4,>=3.6) ; extra == 'testing'", "pytest-cov ; extra == 'testing'", "pytest-regressions ; extra == 'testing'"], "requires_python": ">=3.6", "summary": "A defined interface for working with a cache of jupyter notebooks.", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"#install\" rel=\"nofollow\">Install</a> | <a href=\"#example-cli-usage\" rel=\"nofollow\">Example</a> | <a href=\"#contributing\" rel=\"nofollow\">Contributing</a></p>\n<h1>jupyter-cache</h1>\n<p><a href=\"https://travis-ci.org/ExecutableBookProject/jupyter-cache\" rel=\"nofollow\"><img alt=\"CI Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f67c8b5d66c76efa8c6f8457a608fa66c14c2286/68747470733a2f2f7472617669732d63692e6f72672f45786563757461626c65426f6f6b50726f6a6563742f6a7570797465722d63616368652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/ExecutableBookProject/jupyter-cache?branch=master\" rel=\"nofollow\"><img alt=\"Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8b64aac1242dc4d3c60354432189d9baaefd474a/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f45786563757461626c65426f6f6b50726f6a6563742f6a7570797465722d63616368652f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://jupyter-cache.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9b4e174384720fe0fc93b97bbb6850787ba04cb6/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f6a7570797465722d63616368652f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://github.com/ambv/black\" rel=\"nofollow\"><img alt=\"Code style: black\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbfdc7754183ecf079bc71ddeabaf88f6cbc5c00/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667\"></a>\n<a href=\"https://pypi.org/project/jupyter-cache\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/db2d18e7fc00ecee3e03387afbc33bdd0182372b/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6a7570797465722d63616368652e737667\"></a></p>\n<p>A defined interface for working with a cache of jupyter notebooks.</p>\n<p>NOTE: This package is in an Alpha stage and liable to change.</p>\n<p>Some desired requirements (not yet all implemented):</p>\n<ul>\n<li>Persistent</li>\n<li>Separates out \"edits to content\" from \"edits to code cells\". Cell\nrearranges and code cell changes should require a re-execution. Content changes should not.</li>\n<li>Allow parallel access to notebooks (for execution)</li>\n<li>Store execution statistics/reports</li>\n<li>Store external assets: Notebooks being executed often require external assets: importing scripts/data/etc. These are prepared by the users.</li>\n<li>Store execution artifacts: created during exeution</li>\n<li>A transparent and robust cache invalidation: imagine the user updating an external dependency or a Python module, or checking out a different git branch.</li>\n</ul>\n<h2>Install</h2>\n<pre>pip install jupyter-cache<span class=\"o\">[</span>cli<span class=\"o\">]</span>\n</pre>\n<p>For development:</p>\n<pre>git clone https://github.com/ExecutableBookProject/jupyter-cache\n<span class=\"nb\">cd</span> jupyter-cache\ngit checkout develop\npip install -e .<span class=\"o\">[</span>cli,code_style,testing<span class=\"o\">]</span>\n</pre>\n<h2>Example API usage</h2>\n<p>to come ...</p>\n<h2>Example CLI usage</h2>\n\n<p>From the checked-out repository folder:</p>\n<pre><span class=\"gp\">$</span> jcache --help\n<span class=\"go\">Usage: jcache [OPTIONS] COMMAND [ARGS]...</span>\n\n<span class=\"go\">  The command line interface of jupyter-cache.</span>\n\n<span class=\"go\">Options:</span>\n<span class=\"go\">  -v, --version       Show the version and exit.</span>\n<span class=\"go\">  -p, --cache-path    Print the current cache path and exit.</span>\n<span class=\"go\">  -a, --autocomplete  Print the autocompletion command and exit.</span>\n<span class=\"go\">  -h, --help          Show this message and exit.</span>\n\n<span class=\"go\">Commands:</span>\n<span class=\"go\">  cache    Commands for adding to and inspecting the cache.</span>\n<span class=\"go\">  clear    Clear the cache completely.</span>\n<span class=\"go\">  config   Commands for configuring the cache.</span>\n<span class=\"go\">  execute  Execute staged notebooks that are outdated.</span>\n<span class=\"go\">  stage    Commands for staging notebooks to be executed.</span>\n</pre>\n<p><strong>Important</strong>: Execute this in the terminal for auto-completion:</p>\n<pre><span class=\"go\">eval \"$(_JCACHE_COMPLETE=source jcache)\"</span>\n</pre>\n<h3>Caching Executed Notebooks</h3>\n<pre><span class=\"gp\">$</span> jcache cache --help\n<span class=\"go\">Usage: cache [OPTIONS] COMMAND [ARGS]...</span>\n\n<span class=\"go\">  Commands for adding to and inspecting the cache.</span>\n\n<span class=\"go\">Options:</span>\n<span class=\"go\">  --help  Show this message and exit.</span>\n\n<span class=\"go\">Commands:</span>\n<span class=\"go\">  add                 Cache notebook(s) that have already been executed.</span>\n<span class=\"go\">  add-with-artefacts  Cache a notebook, with possible artefact files.</span>\n<span class=\"go\">  cat-artifact        Print the contents of a cached artefact.</span>\n<span class=\"go\">  diff-nb             Print a diff of a notebook to one stored in the cache.</span>\n<span class=\"go\">  list                List cached notebook records in the cache.</span>\n<span class=\"go\">  remove              Remove notebooks stored in the cache.</span>\n<span class=\"go\">  show                Show details of a cached notebook in the cache.</span>\n</pre>\n<p>The first time the cache is required, it will be lazily created:</p>\n<pre><span class=\"gp\">$</span> jcache cache list\n<span class=\"go\">Cache path: ../.jupyter_cache</span>\n<span class=\"go\">The cache does not yet exist, do you want to create it? [y/N]: y</span>\n<span class=\"go\">No Cached Notebooks</span>\n</pre>\n<p>You can add notebooks straight into the cache.\nWhen caching, a check will be made that the notebooks look to have been executed\ncorrectly, i.e. the cell execution counts go sequentially up from 1.</p>\n<pre><span class=\"gp\">$</span> jcache cache add tests/notebooks/basic.ipynb\n<span class=\"go\">Caching: ../tests/notebooks/basic.ipynb</span>\n<span class=\"go\">Validity Error: Expected cell 1 to have execution_count 1 not 2</span>\n<span class=\"go\">The notebook may not have been executed, continue caching? [y/N]: y</span>\n<span class=\"go\">Success!</span>\n</pre>\n<p>Or to skip validation:</p>\n<pre><span class=\"gp\">$</span> jcache cache add --no-validate tests/notebooks/basic.ipynb tests/notebooks/basic_failing.ipynb tests/notebooks/basic_unrun.ipynb tests/notebooks/complex_outputs.ipynb tests/notebooks/external_output.ipynb\n<span class=\"go\">Caching: ../tests/notebooks/basic.ipynb</span>\n<span class=\"go\">Caching: ../tests/notebooks/basic_failing.ipynb</span>\n<span class=\"go\">Caching: ../tests/notebooks/basic_unrun.ipynb</span>\n<span class=\"go\">Caching: ../tests/notebooks/complex_outputs.ipynb</span>\n<span class=\"go\">Caching: ../tests/notebooks/external_output.ipynb</span>\n<span class=\"go\">Success!</span>\n</pre>\n<p>Once you've cached some notebooks, you can look at the 'cache records'\nfor what has been cached.</p>\n<p>Each notebook is hashed (code cells and kernel spec only),\nwhich is used to compare against 'staged' notebooks.\nMultiple hashes for the same URI can be added\n(the URI is just there for inspetion) and the size of the cache is limited\n(current default 1000) so that, at this size,\nthe last accessed records begin to be deleted.\nYou can remove cached records by their ID.</p>\n<pre><span class=\"gp\">$</span> jcache cache list\n<span class=\"go\">  ID  Origin URI                             Created           Accessed</span>\n<span class=\"go\">----  -------------------------------------  ----------------  ----------------</span>\n<span class=\"go\">   5  tests/notebooks/external_output.ipynb  2020-03-12 17:31  2020-03-12 17:31</span>\n<span class=\"go\">   4  tests/notebooks/complex_outputs.ipynb  2020-03-12 17:31  2020-03-12 17:31</span>\n<span class=\"go\">   3  tests/notebooks/basic_unrun.ipynb      2020-03-12 17:31  2020-03-12 17:31</span>\n<span class=\"go\">   2  tests/notebooks/basic_failing.ipynb    2020-03-12 17:31  2020-03-12 17:31</span>\n</pre>\n<p>Tip: Use the <code>--latest-only</code> option, to only show the latest versions of cached notebooks.</p>\n<p>You can also cache notebooks with artefacts\n(external outputs of the notebook execution).</p>\n<pre><span class=\"gp\">$</span> jcache cache add-with-artefacts -nb tests/notebooks/basic.ipynb tests/notebooks/artifact_folder/artifact.txt\n<span class=\"go\">Caching: ../tests/notebooks/basic.ipynb</span>\n<span class=\"go\">Validity Error: Expected cell 1 to have execution_count 1 not 2</span>\n<span class=\"go\">The notebook may not have been executed, continue caching? [y/N]: y</span>\n<span class=\"go\">Success!</span>\n</pre>\n<p>Show a full description of a cached notebook by referring to its ID</p>\n<pre><span class=\"gp\">$</span> jcache cache show <span class=\"m\">6</span>\n<span class=\"go\">ID: 6</span>\n<span class=\"go\">Origin URI: ../tests/notebooks/basic.ipynb</span>\n<span class=\"go\">Created: 2020-03-12 17:31</span>\n<span class=\"go\">Accessed: 2020-03-12 17:31</span>\n<span class=\"go\">Hashkey: 818f3412b998fcf4fe9ca3cca11a3fc3</span>\n<span class=\"go\">Artifacts:</span>\n<span class=\"go\">- artifact_folder/artifact.txt</span>\n</pre>\n<p>Note artefact paths must be 'upstream' of the notebook folder:</p>\n<pre><span class=\"gp\">$</span> jcache cache add-with-artefacts -nb tests/notebooks/basic.ipynb tests/test_db.py\n<span class=\"go\">Caching: ../tests/notebooks/basic.ipynb</span>\n<span class=\"go\">Artifact Error: Path '../tests/test_db.py' is not in folder '../tests/notebooks''</span>\n</pre>\n<p>To view the contents of an execution artefact:</p>\n<pre><span class=\"gp\">$</span> jcache cache cat-artifact <span class=\"m\">6</span> artifact_folder/artifact.txt\n<span class=\"go\">An artifact</span>\n</pre>\n<p>You can directly remove a cached notebook by its ID:</p>\n<pre><span class=\"gp\">$</span> jcache cache remove <span class=\"m\">4</span>\n<span class=\"go\">Removing Cache ID = 4</span>\n<span class=\"go\">Success!</span>\n</pre>\n<p>You can also diff any of the cached notebooks with any (external) notebook:</p>\n<pre><span class=\"gp\">$</span> jcache cache diff-nb <span class=\"m\">2</span> tests/notebooks/basic.ipynb\n<span class=\"go\">nbdiff</span>\n<span class=\"go\">--- cached pk=2</span>\n<span class=\"go\">+++ other: ../tests/notebooks/basic.ipynb</span>\n<span class=\"gp\">#</span><span class=\"c1\"># inserted before nb/cells/0:</span>\n<span class=\"go\">+  code cell:</span>\n<span class=\"go\">+    execution_count: 2</span>\n<span class=\"go\">+    source:</span>\n<span class=\"go\">+      a=1</span>\n<span class=\"go\">+      print(a)</span>\n<span class=\"go\">+    outputs:</span>\n<span class=\"go\">+      output 0:</span>\n<span class=\"go\">+        output_type: stream</span>\n<span class=\"go\">+        name: stdout</span>\n<span class=\"go\">+        text:</span>\n<span class=\"go\">+          1</span>\n\n<span class=\"gp\">#</span><span class=\"c1\"># deleted nb/cells/0:</span>\n<span class=\"go\">-  code cell:</span>\n<span class=\"go\">-    source:</span>\n<span class=\"go\">-      raise Exception('oopsie!')</span>\n\n\n<span class=\"go\">Success!</span>\n</pre>\n<h3>Staging Notebooks for execution</h3>\n<pre><span class=\"gp\">$</span> jcache stage --help\n<span class=\"go\">Usage: stage [OPTIONS] COMMAND [ARGS]...</span>\n\n<span class=\"go\">  Commands for staging notebooks to be executed.</span>\n\n<span class=\"go\">Options:</span>\n<span class=\"go\">  --help  Show this message and exit.</span>\n\n<span class=\"go\">Commands:</span>\n<span class=\"go\">  add              Stage notebook(s) for execution.</span>\n<span class=\"go\">  add-with-assets  Stage a notebook, with possible asset files.</span>\n<span class=\"go\">  list             List notebooks staged for possible execution.</span>\n<span class=\"go\">  remove-ids       Un-stage notebook(s), by ID.</span>\n<span class=\"go\">  remove-uris      Un-stage notebook(s), by URI.</span>\n<span class=\"go\">  show             Show details of a staged notebook.</span>\n</pre>\n<p>Staged notebooks are recorded as pointers to their URI,\ni.e. no physical copying takes place until execution time.</p>\n<p>If you stage some notebooks for execution, then\nyou can list them to see which have existing records in the cache (by hash),\nand which will require execution:</p>\n<pre><span class=\"gp\">$</span> jcache stage add tests/notebooks/basic.ipynb tests/notebooks/basic_failing.ipynb tests/notebooks/basic_unrun.ipynb tests/notebooks/complex_outputs.ipynb tests/notebooks/external_output.ipynb\n<span class=\"go\">Staging: ../tests/notebooks/basic.ipynb</span>\n<span class=\"go\">Staging: ../tests/notebooks/basic_failing.ipynb</span>\n<span class=\"go\">Staging: ../tests/notebooks/basic_unrun.ipynb</span>\n<span class=\"go\">Staging: ../tests/notebooks/complex_outputs.ipynb</span>\n<span class=\"go\">Staging: ../tests/notebooks/external_output.ipynb</span>\n<span class=\"go\">Success!</span>\n</pre>\n<pre><span class=\"gp\">$</span> jcache stage list\n<span class=\"go\">  ID  URI                                    Created             Assets    Cache ID</span>\n<span class=\"go\">----  -------------------------------------  ----------------  --------  ----------</span>\n<span class=\"go\">   5  tests/notebooks/external_output.ipynb  2020-03-12 17:31         0           5</span>\n<span class=\"go\">   4  tests/notebooks/complex_outputs.ipynb  2020-03-12 17:31         0</span>\n<span class=\"go\">   3  tests/notebooks/basic_unrun.ipynb      2020-03-12 17:31         0           6</span>\n<span class=\"go\">   2  tests/notebooks/basic_failing.ipynb    2020-03-12 17:31         0           2</span>\n<span class=\"go\">   1  tests/notebooks/basic.ipynb            2020-03-12 17:31         0           6</span>\n</pre>\n<p>You can remove a staged notebook by its URI or ID:</p>\n<pre><span class=\"gp\">$</span> jcache stage remove-ids <span class=\"m\">4</span>\n<span class=\"go\">Unstaging ID: 4</span>\n<span class=\"go\">Success!</span>\n</pre>\n<p>You can then run a basic execution of the required notebooks:</p>\n<pre><span class=\"gp\">$</span> jcache cache remove <span class=\"m\">6</span> <span class=\"m\">2</span>\n<span class=\"go\">Removing Cache ID = 6</span>\n<span class=\"go\">Removing Cache ID = 2</span>\n<span class=\"go\">Success!</span>\n</pre>\n<pre><span class=\"gp\">$</span> jcache execute\n<span class=\"go\">Executing: ../tests/notebooks/basic.ipynb</span>\n<span class=\"go\">Execution Succeeded: ../tests/notebooks/basic.ipynb</span>\n<span class=\"go\">Executing: ../tests/notebooks/basic_failing.ipynb</span>\n<span class=\"go\">error: Execution Failed: ../tests/notebooks/basic_failing.ipynb</span>\n<span class=\"go\">Executing: ../tests/notebooks/basic_unrun.ipynb</span>\n<span class=\"go\">Execution Succeeded: ../tests/notebooks/basic_unrun.ipynb</span>\n<span class=\"go\">Finished! Successfully executed notebooks have been cached.</span>\n<span class=\"go\">succeeded:</span>\n<span class=\"go\">- ../tests/notebooks/basic.ipynb</span>\n<span class=\"go\">- ../tests/notebooks/basic_unrun.ipynb</span>\n<span class=\"go\">excepted:</span>\n<span class=\"go\">- ../tests/notebooks/basic_failing.ipynb</span>\n<span class=\"go\">errored: []</span>\n</pre>\n<p>Successfully executed notebooks will be cached to the cache,\nalong with any 'artefacts' created by the execution,\nthat are inside the notebook folder, and data supplied by the executor.</p>\n<pre><span class=\"gp\">$</span> jcache stage list\n<span class=\"go\">  ID  URI                                    Created             Assets    Cache ID</span>\n<span class=\"go\">----  -------------------------------------  ----------------  --------  ----------</span>\n<span class=\"go\">   5  tests/notebooks/external_output.ipynb  2020-03-12 17:31         0           5</span>\n<span class=\"go\">   3  tests/notebooks/basic_unrun.ipynb      2020-03-12 17:31         0           6</span>\n<span class=\"go\">   2  tests/notebooks/basic_failing.ipynb    2020-03-12 17:31         0</span>\n<span class=\"go\">   1  tests/notebooks/basic.ipynb            2020-03-12 17:31         0           6</span>\n</pre>\n<p>Execution data (such as execution time) will be stored in the cache record:</p>\n<pre><span class=\"gp\">$</span> jcache cache show <span class=\"m\">6</span>\n<span class=\"go\">ID: 6</span>\n<span class=\"go\">Origin URI: ../tests/notebooks/basic_unrun.ipynb</span>\n<span class=\"go\">Created: 2020-03-12 17:31</span>\n<span class=\"go\">Accessed: 2020-03-12 17:31</span>\n<span class=\"go\">Hashkey: 818f3412b998fcf4fe9ca3cca11a3fc3</span>\n<span class=\"go\">Data:</span>\n<span class=\"go\">  execution_seconds: 1.0559415130000005</span>\n</pre>\n<p>Failed notebooks will not be cached, but the exception traceback will be added to the stage record:</p>\n<pre><span class=\"gp\">$</span> jcache stage show <span class=\"m\">2</span>\n<span class=\"go\">ID: 2</span>\n<span class=\"go\">URI: ../tests/notebooks/basic_failing.ipynb</span>\n<span class=\"go\">Created: 2020-03-12 17:31</span>\n<span class=\"go\">Failed Last Execution!</span>\n<span class=\"go\">Traceback (most recent call last):</span>\n<span class=\"go\">  File \"../jupyter_cache/executors/basic.py\", line 152, in execute</span>\n<span class=\"go\">    executenb(nb_bundle.nb, cwd=tmpdirname)</span>\n<span class=\"go\">  File \"/anaconda/envs/mistune/lib/python3.7/site-packages/nbconvert/preprocessors/execute.py\", line 737, in executenb</span>\n<span class=\"go\">    return ep.preprocess(nb, resources, km=km)[0]</span>\n<span class=\"go\">  File \"/anaconda/envs/mistune/lib/python3.7/site-packages/nbconvert/preprocessors/execute.py\", line 405, in preprocess</span>\n<span class=\"go\">    nb, resources = super(ExecutePreprocessor, self).preprocess(nb, resources)</span>\n<span class=\"go\">  File \"/anaconda/envs/mistune/lib/python3.7/site-packages/nbconvert/preprocessors/base.py\", line 69, in preprocess</span>\n<span class=\"go\">    nb.cells[index], resources = self.preprocess_cell(cell, resources, index)</span>\n<span class=\"go\">  File \"/anaconda/envs/mistune/lib/python3.7/site-packages/nbconvert/preprocessors/execute.py\", line 448, in preprocess_cell</span>\n<span class=\"go\">    raise CellExecutionError.from_cell_and_msg(cell, out)</span>\n<span class=\"go\">nbconvert.preprocessors.execute.CellExecutionError: An error occurred while executing the following cell:</span>\n<span class=\"go\">------------------</span>\n<span class=\"go\">raise Exception('oopsie!')</span>\n<span class=\"go\">------------------</span>\n\n<span class=\"go\">---------------------------------------------------------------------------</span>\n<span class=\"go\">Exception                                 Traceback (most recent call last)</span>\n<span class=\"go\">&lt;ipython-input-1-714b2b556897&gt; in &lt;module&gt;</span>\n<span class=\"go\">----&gt; 1 raise Exception('oopsie!')</span>\n\n<span class=\"go\">Exception: oopsie!</span>\n<span class=\"go\">Exception: oopsie!</span>\n</pre>\n<p>Once executed you may leave staged notebooks, for later re-execution, or remove them:</p>\n<pre><span class=\"gp\">$</span> jcache stage remove-ids --all\n<span class=\"go\">Are you sure you want to remove all? [y/N]: y</span>\n<span class=\"go\">Unstaging ID: 1</span>\n<span class=\"go\">Unstaging ID: 2</span>\n<span class=\"go\">Unstaging ID: 3</span>\n<span class=\"go\">Unstaging ID: 5</span>\n<span class=\"go\">Success!</span>\n</pre>\n<p>You can also stage notebooks with assets;\nexternal files that are required by the notebook during execution.\nAs with artefacts, these files must be in the same folder as the notebook,\nor a sub-folder.</p>\n<pre><span class=\"gp\">$</span> jcache stage add-with-assets -nb tests/notebooks/basic.ipynb tests/notebooks/artifact_folder/artifact.txt\n<span class=\"go\">Success!</span>\n</pre>\n<pre><span class=\"gp\">$</span> jcache stage show <span class=\"m\">1</span>\n<span class=\"go\">ID: 1</span>\n<span class=\"go\">URI: ../tests/notebooks/basic.ipynb</span>\n<span class=\"go\">Created: 2020-03-12 17:31</span>\n<span class=\"go\">Cache ID: 6</span>\n<span class=\"go\">Assets:</span>\n<span class=\"go\">- ../tests/notebooks/artifact_folder/artifact.txt</span>\n</pre>\n<h2>Contributing</h2>\n<h3>Code Style</h3>\n<p>Code style is tested using <a href=\"http://flake8.pycqa.org\" rel=\"nofollow\">flake8</a>,\nwith the configuration set in <code>.flake8</code>,\nand code formatted with <a href=\"https://github.com/ambv/black\" rel=\"nofollow\">black</a>.</p>\n<p>Installing with <code>jupyter-cache[code_style]</code> makes the <a href=\"https://pre-commit.com/\" rel=\"nofollow\">pre-commit</a>\npackage available, which will ensure this style is met before commits are submitted, by reformatting the code\nand testing for lint errors.\nIt can be setup by:</p>\n<pre>&gt;&gt; <span class=\"nb\">cd</span> jupyter-cache\n&gt;&gt; pre-commit install\n</pre>\n<p>Optionally you can run <code>black</code> and <code>flake8</code> separately:</p>\n<pre>&gt;&gt; black .\n&gt;&gt; flake8 .\n</pre>\n<p>Editors like VS Code also have automatic code reformat utilities, which can adhere to this standard.</p>\n<h3>Pull Requests</h3>\n<p>To contribute, make Pull Requests to the <code>develop</code> branch (this is the default branch). A PR can consist of one or multiple commits. Before you open a PR, make sure to clean up your commit history and create the commits that you think best divide up the total work as outlined above (use <code>git rebase</code> and <code>git commit --amend</code>). Ensure all commit messages clearly summarise the changes in the header and the problem that this commit is solving in the body.</p>\n<p>Merging pull requests: There are three ways of 'merging' pull requests on GitHub:</p>\n<ul>\n<li>Squash and merge: take all commits, squash them into a single one and put it on top of the base branch.\nChoose this for pull requests that address a single issue and are well represented by a single commit.\nMake sure to clean the commit message (title &amp; body)</li>\n<li>Rebase and merge: take all commits and 'recreate' them on top of the base branch. All commits will be recreated with new hashes.\nChoose this for pull requests that require more than a single commit.\nExamples: PRs that contain multiple commits with individually significant changes; PRs that have commits from different authors (squashing commits would remove attribution)</li>\n<li>Merge with merge commit: put all commits as they are on the base branch, with a merge commit on top\nChoose for collaborative PRs with many commits. Here, the merge commit provides actual benefits.</li>\n</ul>\n\n          </div>"}, "last_serial": 6921936, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "1abe5efe66eeefcac50fde6421006a3f", "sha256": "e81e53fe9d46fd707866931f7ff3478949fd449f67036dfcd121004afdf0d3c5"}, "downloads": -1, "filename": "jupyter_cache-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "1abe5efe66eeefcac50fde6421006a3f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 30487, "upload_time": "2020-03-13T01:48:12", "upload_time_iso_8601": "2020-03-13T01:48:12.212575Z", "url": "https://files.pythonhosted.org/packages/2a/97/0d476bea6fea1038bcaaee9f581fb4850d2727d648b40b2faffa8565f5c3/jupyter_cache-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "15bfb2134ab3c492b55e2dbbd90055ee", "sha256": "1d4b14da76023ebb131e13c824af8c7953c37cb879f2c2ad293d1d640b522cad"}, "downloads": -1, "filename": "jupyter-cache-0.1.0.tar.gz", "has_sig": false, "md5_digest": "15bfb2134ab3c492b55e2dbbd90055ee", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 28495, "upload_time": "2020-03-13T01:48:13", "upload_time_iso_8601": "2020-03-13T01:48:13.639578Z", "url": "https://files.pythonhosted.org/packages/df/fc/d9af2413d85c2b9942e720c321abe8d606fabb63df21b4583768d8cb8462/jupyter-cache-0.1.0.tar.gz", "yanked": false}], "0.1.0a1": [{"comment_text": "", "digests": {"md5": "8eda22c2992165fbf4ce6a93ba1eedbd", "sha256": "d05c1a775a1684e8090e41b613b0b522d7e5b5c93abd0d32b0115fa11ceaf296"}, "downloads": -1, "filename": "jupyter_cache-0.1.0a1-py3-none-any.whl", "has_sig": false, "md5_digest": "8eda22c2992165fbf4ce6a93ba1eedbd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 30354, "upload_time": "2020-03-13T01:31:37", "upload_time_iso_8601": "2020-03-13T01:31:37.083975Z", "url": "https://files.pythonhosted.org/packages/1e/c4/5529f26be561bb2f89e5812f1c99e339f1fd3c389eb139ee09b3634218ac/jupyter_cache-0.1.0a1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d748819e78c258f5c4fdd97edf948837", "sha256": "56f22be15b25ebc520f29c4e32f54c895f4663364f7b8329a8f08c647fe75092"}, "downloads": -1, "filename": "jupyter-cache-0.1.0a1.tar.gz", "has_sig": false, "md5_digest": "d748819e78c258f5c4fdd97edf948837", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 28126, "upload_time": "2020-03-13T01:31:39", "upload_time_iso_8601": "2020-03-13T01:31:39.460124Z", "url": "https://files.pythonhosted.org/packages/bd/03/ee8ed68b51291e501df62d97a6edce0028894c5cda041367ad300ac7edff/jupyter-cache-0.1.0a1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "6656a61e149b2e087203c2ae64abfb01", "sha256": "aa5afe15ac17c679b8038cb6b739b488484ba090ba2b027677a0a85d508a23c5"}, "downloads": -1, "filename": "jupyter_cache-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6656a61e149b2e087203c2ae64abfb01", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 30799, "upload_time": "2020-03-31T17:31:23", "upload_time_iso_8601": "2020-03-31T17:31:23.938580Z", "url": "https://files.pythonhosted.org/packages/64/49/0296fa6f0477b57a037586211281e47145ddede5ed81b72e462a8439ad62/jupyter_cache-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9ca76183f39cfb5028ff5476488ea15a", "sha256": "5f0dd0b68c42f0391a9565202be3de5a0a3aab8c948f91499ff38abbbcf2669e"}, "downloads": -1, "filename": "jupyter-cache-0.2.0.tar.gz", "has_sig": false, "md5_digest": "9ca76183f39cfb5028ff5476488ea15a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 28851, "upload_time": "2020-03-31T17:31:25", "upload_time_iso_8601": "2020-03-31T17:31:25.288164Z", "url": "https://files.pythonhosted.org/packages/82/d8/a0e56d23d370525a2ff1b3ce1afc0e623e8a30360a455444d22df74ac04a/jupyter-cache-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "b3025dda3b60fff5105e35a61a829ec5", "sha256": "e2d9202e859b73a8d22ba125721870e7c31273279899b5e862bbd4d73c11f934"}, "downloads": -1, "filename": "jupyter_cache-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b3025dda3b60fff5105e35a61a829ec5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 30801, "upload_time": "2020-03-31T18:12:18", "upload_time_iso_8601": "2020-03-31T18:12:18.624692Z", "url": "https://files.pythonhosted.org/packages/70/5a/021cfdb8011d022284817b132d4eee6f8cbf1a37b66283c0c791e736361a/jupyter_cache-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "75ccbf0a648ddc3786822dffba1938ef", "sha256": "0a7b72e80a33dc7a312133f66ee81c96a28833bc9205714d65b23fee32fcf0a7"}, "downloads": -1, "filename": "jupyter-cache-0.2.1.tar.gz", "has_sig": false, "md5_digest": "75ccbf0a648ddc3786822dffba1938ef", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 28848, "upload_time": "2020-03-31T18:12:19", "upload_time_iso_8601": "2020-03-31T18:12:19.748106Z", "url": "https://files.pythonhosted.org/packages/bb/a0/1e28c8069b18d98fd5c019589d5e0ba1159f9c3d5053618bdfd6deccfe25/jupyter-cache-0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b3025dda3b60fff5105e35a61a829ec5", "sha256": "e2d9202e859b73a8d22ba125721870e7c31273279899b5e862bbd4d73c11f934"}, "downloads": -1, "filename": "jupyter_cache-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b3025dda3b60fff5105e35a61a829ec5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 30801, "upload_time": "2020-03-31T18:12:18", "upload_time_iso_8601": "2020-03-31T18:12:18.624692Z", "url": "https://files.pythonhosted.org/packages/70/5a/021cfdb8011d022284817b132d4eee6f8cbf1a37b66283c0c791e736361a/jupyter_cache-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "75ccbf0a648ddc3786822dffba1938ef", "sha256": "0a7b72e80a33dc7a312133f66ee81c96a28833bc9205714d65b23fee32fcf0a7"}, "downloads": -1, "filename": "jupyter-cache-0.2.1.tar.gz", "has_sig": false, "md5_digest": "75ccbf0a648ddc3786822dffba1938ef", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 28848, "upload_time": "2020-03-31T18:12:19", "upload_time_iso_8601": "2020-03-31T18:12:19.748106Z", "url": "https://files.pythonhosted.org/packages/bb/a0/1e28c8069b18d98fd5c019589d5e0ba1159f9c3d5053618bdfd6deccfe25/jupyter-cache-0.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:19 2020"}