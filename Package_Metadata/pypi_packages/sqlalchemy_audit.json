{"info": {"author": "UNKNOWN", "author_email": "UNKNOWN", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Database"], "description": "================\nsqlalchemy-audit\n================\n\nsqlalchemy-audit provides an easy way to set up revision tracking for your data. It is inspired by SQLAlchemy's ``versioned_history`` example, but uses mapper events instead of session events.\n\n\nExample\n=======\n\nShare your ``DBSession`` with ``Versioned``:\n\n.. code:: python\n\n  DBSession = ...\n  Versioned.versioned_session(DBSession)\n\nThen simply declare your class as usual and have it inherit ``Versioned``:\n\n.. code:: python\n\n  class Reservation(Versioned, Base):\n    __tablename__ = 'reservation'\n    id = Column(Integer, primary_key=True)\n    name = Column(String(50))\n    date = Column(Date)\n    time = Column(Time)\n    party = Column(Integer)\n    last_modified = Column(DateTime)\n\n  Reservation.broadcast_crud()  # todo: handle this automagically\n\n\n.. note:: You can also sub-class ``Versioned`` from your declarative base class.\n\n\nNormal usage remains the same:\n\n.. code:: python\n\n  # make new reservation\n  steve_reservation = Reservation(name='Steve', \n                                  date=datetime.date(2015, 04, 15),\n                                  time=datetime.time(19, 00),\n                                  party=6)\n  session.add(steve_reservation)\n  session.commit()\n\n  # change reservation to party of 4\n  steve_reservation.party = 4\n  session.commit()\n\n  # cancel the reservation\n  session.delete(steve_reservation)\n  session.commit()\n\n\nPlus, you could access its revision history.\n\n.. code:: python\n\n  >>> DBSession.query(ReservationRev).all()\n  [ ReservationRev(rev_id='c74d5bce...', rev_created=1427995346.0, rev_isdelete=False, id=1, name='Steve', date='2015-04-15', time='19:00', party=6, last_modified='2015-04-02 13:22:26.291670'),\n    ReservationRev(rev_id='f3f5091d...', rev_created=1428068391.0, rev_isdelete=False, id=1, name='Steve', date='2015-04-15', time='19:00', party=4, last_modified='2015-04-03 09:39:51.098798'),\n    ReservationRev(rev_id='3cf1394b...', rev_created=1428534191.0, rev_isdelete=True, id=1, name=None, date=None, time=None, party=None, last_modified=None)\n  ]\n\n\nHow it works\n============\n\nSuppose you have a ``reservations`` table.\n\n==  ======  ==========  =====  =====  ==========================\nid  name    date        time   party  last_modified\n==  ======  ==========  =====  =====  ==========================\n 1  Steve   2015-04-15  19:00  4      2015-04-08 13:22:26.291670\n 2  Phil    2015-05-01  18:30  3      2015-04-13 09:38:01.060898\n==  ======  ==========  =====  =====  ==========================\n\n\nBehind the scenes, we create an revision class ``ReservationRev`` mapped to table ``reservations_rev``. It has the same schema with three additional columns:\n\n  rev_id : string (uuid)\n    Surrogate key for the revision table.\n\n  rev_created : timestamp\n    Timestamp (seconds since the epoch as a floating point number) of when the revision was created. (See `Use of rev_created`_.)\n\n  rev_isdelete : boolean\n    Whether the entry was deleted. (See `Use of rev_isdelete`_.)\n\n\nWhenever you write to the ``reservations`` table, we will insert a new row into the ``reservations_rev`` table. This allows your usage of ``reservations`` to remain unchanged. If need, you could reference the ``reservations_rev`` to get the revision timelime.\n\n\nExample\n-------\n\nFor the following timeline:\n\n- On 2015-04-02, Steve makes a reservation for party of 6 on 2015-04-15 at 19:30.\n- On 2015-04-03, Steve changes the reservation to 4 people.\n- On 2015-04-08, Steve cancels the reservation.\n\n\n``reservations_rev`` will have the following \n\n===========  ===============  =============  ======  ======  ==========  ======  ======  ==========================\nrev_id       rev_created      rev_isdelete   id      name    date        time    party   last_modified\n===========  ===============  =============  ======  ======  ==========  ======  ======  ==========================\nc74d5bce...  1427995346.0     False          1       Steve   2015-04-15  19:00   6       2015-04-02 13:22:26.291670\nf3f5091d...  1428068391.0     False          1       Steve   2015-04-15  19:00   4       2015-04-03 09:39:51.098798\n3cf1394b...  1428534191.0     True           1       (null)  (null)      (null)  (null)  (null)\n===========  ===============  =============  ======  ======  ==========  ======  ======  ==========================\n\n\n\nDesign Decisions\n----------------\n\nWriting to revision table for all writes\n````````````````````````````````````````\n\nThere are several advantages by writing to the revision table for all writes:\n\n  1. complete transaction history in the revision table for easy reads (no joins required)\n  2. complete timeline even if the original table doesn't have a last modified column\n\n\nHowever, this approach has a particular drawback with ``INSERT`` statements with dynamic defaults (such as sequences or auto-datetime). At the time of the insert, the revision table does not have the dynamic values. We recommend the following workarounds:\n\n  1. generate dynamic defaults during object instantiation instead using database defaults\n  2. strictly use client-side defaults in the ORM\n  3. create server-side database triggers to copy values to revision table for inserts\n  4. perform a write-read-write transaction for inserts, which is sub-optimal due to the performance hit\n\n\nUse of rev_created\n``````````````````\n\nTo re-create the revision timeline, we are relying on the use of timestamps. While we recognize there could be clock drift or desynchronization across different servers, there are solutions to these problems. Hence we opt to proceed with timestamp's simplicity.\n\n\nUse of rev_isdelete\n```````````````````\n\nThe ``rev_isdelete`` is a fast and convenient way to determined that a row has been deleted without inspecting the entries. It also allows for entries with all nulls.\n\n\nRequirement of primary/compound keys\n````````````````````````````````````\n\nTBD\n\n\nRequirement of association objects for many-to-many relationships\n`````````````````````````````````````````````````````````````````\n\nTBD", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/canaryhealth/sqlalchemy_audit", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "sqlalchemy_audit", "package_url": "https://pypi.org/project/sqlalchemy_audit/", "platform": "any", "project_url": "https://pypi.org/project/sqlalchemy_audit/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/canaryhealth/sqlalchemy_audit"}, "release_url": "https://pypi.org/project/sqlalchemy_audit/0.1.0/", "requires_dist": null, "requires_python": null, "summary": "sqlalchemy-audit provides an easy way to set up revision tracking for your data.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>sqlalchemy-audit provides an easy way to set up revision tracking for your data. It is inspired by SQLAlchemy\u2019s <tt>versioned_history</tt> example, but uses mapper events instead of session events.</p>\n<div id=\"example\">\n<h2>Example</h2>\n<p>Share your <tt>DBSession</tt> with <tt>Versioned</tt>:</p>\n<pre><span class=\"n\">DBSession</span> <span class=\"o\">=</span> <span class=\"o\">...</span>\n<span class=\"n\">Versioned</span><span class=\"o\">.</span><span class=\"n\">versioned_session</span><span class=\"p\">(</span><span class=\"n\">DBSession</span><span class=\"p\">)</span>\n</pre>\n<p>Then simply declare your class as usual and have it inherit <tt>Versioned</tt>:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Reservation</span><span class=\"p\">(</span><span class=\"n\">Versioned</span><span class=\"p\">,</span> <span class=\"n\">Base</span><span class=\"p\">):</span>\n  <span class=\"n\">__tablename__</span> <span class=\"o\">=</span> <span class=\"s1\">'reservation'</span>\n  <span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">Integer</span><span class=\"p\">,</span> <span class=\"n\">primary_key</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n  <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">String</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">))</span>\n  <span class=\"n\">date</span> <span class=\"o\">=</span> <span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">Date</span><span class=\"p\">)</span>\n  <span class=\"n\">time</span> <span class=\"o\">=</span> <span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">Time</span><span class=\"p\">)</span>\n  <span class=\"n\">party</span> <span class=\"o\">=</span> <span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">Integer</span><span class=\"p\">)</span>\n  <span class=\"n\">last_modified</span> <span class=\"o\">=</span> <span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">DateTime</span><span class=\"p\">)</span>\n\n<span class=\"n\">Reservation</span><span class=\"o\">.</span><span class=\"n\">broadcast_crud</span><span class=\"p\">()</span>  <span class=\"c1\"># todo: handle this automagically</span>\n</pre>\n<div>\n<p>Note</p>\n<p>You can also sub-class <tt>Versioned</tt> from your declarative base class.</p>\n</div>\n<p>Normal usage remains the same:</p>\n<pre><span class=\"c1\"># make new reservation</span>\n<span class=\"n\">steve_reservation</span> <span class=\"o\">=</span> <span class=\"n\">Reservation</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'Steve'</span><span class=\"p\">,</span>\n                                <span class=\"n\">date</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2015</span><span class=\"p\">,</span> <span class=\"mi\">04</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">),</span>\n                                <span class=\"n\">time</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">(</span><span class=\"mi\">19</span><span class=\"p\">,</span> <span class=\"mi\">00</span><span class=\"p\">),</span>\n                                <span class=\"n\">party</span><span class=\"o\">=</span><span class=\"mi\">6</span><span class=\"p\">)</span>\n<span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">steve_reservation</span><span class=\"p\">)</span>\n<span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">commit</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># change reservation to party of 4</span>\n<span class=\"n\">steve_reservation</span><span class=\"o\">.</span><span class=\"n\">party</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>\n<span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">commit</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># cancel the reservation</span>\n<span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">steve_reservation</span><span class=\"p\">)</span>\n<span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">commit</span><span class=\"p\">()</span>\n</pre>\n<p>Plus, you could access its revision history.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">DBSession</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">ReservationRev</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n<span class=\"p\">[</span> <span class=\"n\">ReservationRev</span><span class=\"p\">(</span><span class=\"n\">rev_id</span><span class=\"o\">=</span><span class=\"s1\">'c74d5bce...'</span><span class=\"p\">,</span> <span class=\"n\">rev_created</span><span class=\"o\">=</span><span class=\"mf\">1427995346.0</span><span class=\"p\">,</span> <span class=\"n\">rev_isdelete</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'Steve'</span><span class=\"p\">,</span> <span class=\"n\">date</span><span class=\"o\">=</span><span class=\"s1\">'2015-04-15'</span><span class=\"p\">,</span> <span class=\"n\">time</span><span class=\"o\">=</span><span class=\"s1\">'19:00'</span><span class=\"p\">,</span> <span class=\"n\">party</span><span class=\"o\">=</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"n\">last_modified</span><span class=\"o\">=</span><span class=\"s1\">'2015-04-02 13:22:26.291670'</span><span class=\"p\">),</span>\n  <span class=\"n\">ReservationRev</span><span class=\"p\">(</span><span class=\"n\">rev_id</span><span class=\"o\">=</span><span class=\"s1\">'f3f5091d...'</span><span class=\"p\">,</span> <span class=\"n\">rev_created</span><span class=\"o\">=</span><span class=\"mf\">1428068391.0</span><span class=\"p\">,</span> <span class=\"n\">rev_isdelete</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'Steve'</span><span class=\"p\">,</span> <span class=\"n\">date</span><span class=\"o\">=</span><span class=\"s1\">'2015-04-15'</span><span class=\"p\">,</span> <span class=\"n\">time</span><span class=\"o\">=</span><span class=\"s1\">'19:00'</span><span class=\"p\">,</span> <span class=\"n\">party</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">last_modified</span><span class=\"o\">=</span><span class=\"s1\">'2015-04-03 09:39:51.098798'</span><span class=\"p\">),</span>\n  <span class=\"n\">ReservationRev</span><span class=\"p\">(</span><span class=\"n\">rev_id</span><span class=\"o\">=</span><span class=\"s1\">'3cf1394b...'</span><span class=\"p\">,</span> <span class=\"n\">rev_created</span><span class=\"o\">=</span><span class=\"mf\">1428534191.0</span><span class=\"p\">,</span> <span class=\"n\">rev_isdelete</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">date</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">time</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">party</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">last_modified</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"how-it-works\">\n<h2>How it works</h2>\n<p>Suppose you have a <tt>reservations</tt> table.</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>id</th>\n<th>name</th>\n<th>date</th>\n<th>time</th>\n<th>party</th>\n<th>last_modified</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>1</td>\n<td>Steve</td>\n<td>2015-04-15</td>\n<td>19:00</td>\n<td>4</td>\n<td>2015-04-08 13:22:26.291670</td>\n</tr>\n<tr><td>2</td>\n<td>Phil</td>\n<td>2015-05-01</td>\n<td>18:30</td>\n<td>3</td>\n<td>2015-04-13 09:38:01.060898</td>\n</tr>\n</tbody>\n</table>\n<p>Behind the scenes, we create an revision class <tt>ReservationRev</tt> mapped to table <tt>reservations_rev</tt>. It has the same schema with three additional columns:</p>\n<blockquote>\n<dl>\n<dt>rev_id <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string (uuid)</span></dt>\n<dd>Surrogate key for the revision table.</dd>\n<dt>rev_created <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">timestamp</span></dt>\n<dd>Timestamp (seconds since the epoch as a floating point number) of when the revision was created. (See <a href=\"#use-of-rev-created\" rel=\"nofollow\">Use of rev_created</a>.)</dd>\n<dt>rev_isdelete <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">boolean</span></dt>\n<dd>Whether the entry was deleted. (See <a href=\"#use-of-rev-isdelete\" rel=\"nofollow\">Use of rev_isdelete</a>.)</dd>\n</dl>\n</blockquote>\n<p>Whenever you write to the <tt>reservations</tt> table, we will insert a new row into the <tt>reservations_rev</tt> table. This allows your usage of <tt>reservations</tt> to remain unchanged. If need, you could reference the <tt>reservations_rev</tt> to get the revision timelime.</p>\n<div id=\"id1\">\n<h3>Example</h3>\n<p>For the following timeline:</p>\n<ul>\n<li>On 2015-04-02, Steve makes a reservation for party of 6 on 2015-04-15 at 19:30.</li>\n<li>On 2015-04-03, Steve changes the reservation to 4 people.</li>\n<li>On 2015-04-08, Steve cancels the reservation.</li>\n</ul>\n<p><tt>reservations_rev</tt> will have the following</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n<col>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>rev_id</th>\n<th>rev_created</th>\n<th>rev_isdelete</th>\n<th>id</th>\n<th>name</th>\n<th>date</th>\n<th>time</th>\n<th>party</th>\n<th>last_modified</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>c74d5bce\u2026</td>\n<td>1427995346.0</td>\n<td>False</td>\n<td>1</td>\n<td>Steve</td>\n<td>2015-04-15</td>\n<td>19:00</td>\n<td>6</td>\n<td>2015-04-02 13:22:26.291670</td>\n</tr>\n<tr><td>f3f5091d\u2026</td>\n<td>1428068391.0</td>\n<td>False</td>\n<td>1</td>\n<td>Steve</td>\n<td>2015-04-15</td>\n<td>19:00</td>\n<td>4</td>\n<td>2015-04-03 09:39:51.098798</td>\n</tr>\n<tr><td>3cf1394b\u2026</td>\n<td>1428534191.0</td>\n<td>True</td>\n<td>1</td>\n<td>(null)</td>\n<td>(null)</td>\n<td>(null)</td>\n<td>(null)</td>\n<td>(null)</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"design-decisions\">\n<h3>Design Decisions</h3>\n<div id=\"writing-to-revision-table-for-all-writes\">\n<h4>Writing to revision table for all writes</h4>\n<p>There are several advantages by writing to the revision table for all writes:</p>\n<blockquote>\n<ol>\n<li>complete transaction history in the revision table for easy reads (no joins required)</li>\n<li>complete timeline even if the original table doesn\u2019t have a last modified column</li>\n</ol>\n</blockquote>\n<p>However, this approach has a particular drawback with <tt>INSERT</tt> statements with dynamic defaults (such as sequences or auto-datetime). At the time of the insert, the revision table does not have the dynamic values. We recommend the following workarounds:</p>\n<blockquote>\n<ol>\n<li>generate dynamic defaults during object instantiation instead using database defaults</li>\n<li>strictly use client-side defaults in the ORM</li>\n<li>create server-side database triggers to copy values to revision table for inserts</li>\n<li>perform a write-read-write transaction for inserts, which is sub-optimal due to the performance hit</li>\n</ol>\n</blockquote>\n</div>\n<div id=\"use-of-rev-created\">\n<h4>Use of rev_created</h4>\n<p>To re-create the revision timeline, we are relying on the use of timestamps. While we recognize there could be clock drift or desynchronization across different servers, there are solutions to these problems. Hence we opt to proceed with timestamp\u2019s simplicity.</p>\n</div>\n<div id=\"use-of-rev-isdelete\">\n<h4>Use of rev_isdelete</h4>\n<p>The <tt>rev_isdelete</tt> is a fast and convenient way to determined that a row has been deleted without inspecting the entries. It also allows for entries with all nulls.</p>\n</div>\n<div id=\"requirement-of-primary-compound-keys\">\n<h4>Requirement of primary/compound keys</h4>\n<p>TBD</p>\n</div>\n<div id=\"requirement-of-association-objects-for-many-to-many-relationships\">\n<h4>Requirement of association objects for many-to-many relationships</h4>\n<p>TBD</p>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2498074, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "63ad094c5a5b42e5d91486b8d0d130a8", "sha256": "54d4e023347c2c45ed5ea3c36502ad00f6329446a9d804e018946b4c430f4756"}, "downloads": -1, "filename": "sqlalchemy_audit-0.1.0.tar.gz", "has_sig": false, "md5_digest": "63ad094c5a5b42e5d91486b8d0d130a8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9230, "upload_time": "2016-12-04T01:27:56", "upload_time_iso_8601": "2016-12-04T01:27:56.554242Z", "url": "https://files.pythonhosted.org/packages/66/db/fd271f475bb2657f2ebee612e351ad397791891e86e59aa4c774c9f11878/sqlalchemy_audit-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "63ad094c5a5b42e5d91486b8d0d130a8", "sha256": "54d4e023347c2c45ed5ea3c36502ad00f6329446a9d804e018946b4c430f4756"}, "downloads": -1, "filename": "sqlalchemy_audit-0.1.0.tar.gz", "has_sig": false, "md5_digest": "63ad094c5a5b42e5d91486b8d0d130a8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9230, "upload_time": "2016-12-04T01:27:56", "upload_time_iso_8601": "2016-12-04T01:27:56.554242Z", "url": "https://files.pythonhosted.org/packages/66/db/fd271f475bb2657f2ebee612e351ad397791891e86e59aa4c774c9f11878/sqlalchemy_audit-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:04:00 2020"}