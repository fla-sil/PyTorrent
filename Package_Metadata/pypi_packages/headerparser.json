{"info": {"author": "John Thorvald Wodder II", "author_email": "headerparser@varonathe.org", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Communications :: Email", "Topic :: Communications :: Usenet News", "Topic :: Internet :: WWW/HTTP", "Topic :: Text Processing"], "description": ".. image:: http://www.repostatus.org/badges/latest/active.svg\n    :target: http://www.repostatus.org/#active\n    :alt: Project Status: Active \u2014 The project has reached a stable, usable\n          state and is being actively developed.\n\n.. image:: https://travis-ci.org/jwodder/headerparser.svg?branch=master\n    :target: https://travis-ci.org/jwodder/headerparser\n\n.. image:: https://codecov.io/gh/jwodder/headerparser/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/jwodder/headerparser\n\n.. image:: https://img.shields.io/pypi/pyversions/headerparser.svg\n    :target: https://pypi.org/project/headerparser\n\n.. image:: https://img.shields.io/github/license/jwodder/headerparser.svg\n    :target: https://opensource.org/licenses/MIT\n    :alt: MIT License\n\n.. image:: https://img.shields.io/badge/Say%20Thanks-!-1EAEDB.svg\n    :target: https://saythanks.io/to/jwodder\n\n`GitHub <https://github.com/jwodder/headerparser>`_\n| `PyPI <https://pypi.org/project/headerparser>`_\n| `Documentation <https://headerparser.readthedocs.io>`_\n| `Issues <https://github.com/jwodder/headerparser/issues>`_\n| `Changelog <https://github.com/jwodder/headerparser/blob/master/CHANGELOG.md>`_\n\n``headerparser`` parses key-value pairs in the style of RFC 822 (e-mail)\nheaders and converts them into case-insensitive dictionaries with the trailing\nmessage body (if any) attached.  Fields can be converted to other types, marked\nrequired, or given default values using an API based on the standard library's\n``argparse`` module.  (Everyone loves ``argparse``, right?)  Low-level\nfunctions for just scanning header fields (breaking them into sequences of\nkey-value pairs without any further processing) are also included.\n\nThe Format\n==========\nRFC 822-style headers are header fields that follow the general format of\ne-mail headers as specified by RFC 822 and friends: each field is a line of the\nform \"``Name: Value``\", with long values continued onto multiple lines\n(\"folded\") by indenting the extra lines.  A blank line marks the end of the\nheader section and the beginning of the message body.\n\nThis basic grammar has been used by numerous textual formats besides e-mail,\nincluding but not limited to:\n\n- HTTP request & response headers\n- Usenet messages\n- most Python packaging metadata files\n- Debian packaging control files\n- ``META-INF/MANIFEST.MF`` files in Java JARs\n- a subset of the `YAML <http://www.yaml.org/>`_ serialization format\n\n\u2014 all of which this package can parse.\n\n\nInstallation\n============\nJust use `pip <https://pip.pypa.io>`_ (You have pip, right?) to install\n``headerparser`` and its dependencies::\n\n    pip install headerparser\n\n\nExamples\n========\n\nDefine a parser::\n\n    >>> import headerparser\n    >>> parser = headerparser.HeaderParser()\n    >>> parser.add_field('Name', required=True)\n    >>> parser.add_field('Type', choices=['example', 'demonstration', 'prototype'], default='example')\n    >>> parser.add_field('Public', type=headerparser.BOOL, default=False)\n    >>> parser.add_field('Tag', multiple=True)\n    >>> parser.add_field('Data')\n\nParse some headers and inspect the results::\n\n    >>> msg = parser.parse_string('''\\\n    ... Name: Sample Input\n    ... Public: yes\n    ... tag: doctest, examples,\n    ...   whatever\n    ... TAG: README\n    ... \n    ... Wait, why I am using a body instead of the \"Data\" field?\n    ... ''')\n    >>> sorted(msg.keys())\n    ['Name', 'Public', 'Tag', 'Type']\n    >>> msg['Name']\n    'Sample Input'\n    >>> msg['Public']\n    True\n    >>> msg['Tag']\n    ['doctest, examples,\\n  whatever', 'README']\n    >>> msg['TYPE']\n    'example'\n    >>> msg['Data']\n    Traceback (most recent call last):\n        ...\n    KeyError: 'data'\n    >>> msg.body\n    'Wait, why I am using a body instead of the \"Data\" field?\\n'\n\nFail to parse headers that don't meet your requirements::\n\n    >>> parser.parse_string('Type: demonstration')\n    Traceback (most recent call last):\n        ...\n    headerparser.errors.MissingFieldError: Required header field 'Name' is not present\n    >>> parser.parse_string('Name: Bad type\\nType: other')\n    Traceback (most recent call last):\n        ...\n    headerparser.errors.InvalidChoiceError: 'other' is not a valid choice for 'Type'\n    >>> parser.parse_string('Name: unknown field\\nField: Value')\n    Traceback (most recent call last):\n        ...\n    headerparser.errors.UnknownFieldError: Unknown header field 'Field'\n\nAllow fields you didn't even think of::\n\n    >>> parser.add_additional()\n    >>> msg = parser.parse_string('Name: unknown field\\nField: Value')\n    >>> msg['Field']\n    'Value'\n\nJust split some headers into names & values and worry about validity later::\n\n    >>> for field in headerparser.scan_string('''\\\n    ... Name: Scanner Sample\n    ... Unknown headers: no problem\n    ... Unparsed-Boolean: yes\n    ... CaSe-SeNsItIvE-rEsUlTs: true\n    ... Whitespace around colons:optional\n    ... Whitespace around colons  :  I already said it's optional.\n    ...   That means you have the _option_ to use as much as you want!\n    ... \n    ... And there's a body, too, I guess.\n    ... '''): print(field)\n    ('Name', 'Scanner Sample')\n    ('Unknown headers', 'no problem')\n    ('Unparsed-Boolean', 'yes')\n    ('CaSe-SeNsItIvE-rEsUlTs', 'true')\n    ('Whitespace around colons', 'optional')\n    ('Whitespace around colons', \"I already said it's optional.\\n  That means you have the _option_ to use as much as you want!\")\n    (None, \"And there's a body, too, I guess.\\n\")\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jwodder/headerparser", "keywords": "e-mail,email,mail,rfc822,headers,rfc2822,rfc5322,parser", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "headerparser", "package_url": "https://pypi.org/project/headerparser/", "platform": "", "project_url": "https://pypi.org/project/headerparser/", "project_urls": {"Bug Tracker": "https://github.com/jwodder/headerparser/issues", "Documentation": "https://headerparser.readthedocs.io", "Homepage": "https://github.com/jwodder/headerparser", "Say Thanks!": "https://saythanks.io/to/jwodder", "Source Code": "https://github.com/jwodder/headerparser"}, "release_url": "https://pypi.org/project/headerparser/0.4.0/", "requires_dist": ["six (~=1.1)"], "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4", "summary": "argparse for mail-style headers", "version": "0.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"http://www.repostatus.org/#active\" rel=\"nofollow\"><img alt=\"Project Status: Active \u2014 The project has reached a stable, usable state and is being actively developed.\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/51adb09f202aea47725eca73a3fcf5e1ab47f2e9/687474703a2f2f7777772e7265706f7374617475732e6f72672f6261646765732f6c61746573742f6163746976652e737667\"></a>\n<a href=\"https://travis-ci.org/jwodder/headerparser\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/jwodder/headerparser.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cb1279122f823e2e524e8ed8d1df43aefede1994/68747470733a2f2f7472617669732d63692e6f72672f6a776f646465722f6865616465727061727365722e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/jwodder/headerparser\" rel=\"nofollow\"><img alt=\"https://codecov.io/gh/jwodder/headerparser/branch/master/graph/badge.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1c723c53d33f743a2d1679511cac5132b1a07318/68747470733a2f2f636f6465636f762e696f2f67682f6a776f646465722f6865616465727061727365722f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://pypi.org/project/headerparser\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/pyversions/headerparser.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/65d15973c1c8ffed2f3bb224b2c440f395ae5277/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f6865616465727061727365722e737667\"></a>\n<a href=\"https://opensource.org/licenses/MIT\" rel=\"nofollow\"><img alt=\"MIT License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/eaeeea9635cf24fe7059c139b45d739c434316e1/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f6a776f646465722f6865616465727061727365722e737667\"></a>\n<a href=\"https://saythanks.io/to/jwodder\" rel=\"nofollow\"><img alt=\"https://img.shields.io/badge/Say%20Thanks-!-1EAEDB.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/51b7f145f134a99621f186ddcdb0af646a24c8aa/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f5361792532305468616e6b732d212d3145414544422e737667\"></a>\n<p><a href=\"https://github.com/jwodder/headerparser\" rel=\"nofollow\">GitHub</a>\n| <a href=\"https://pypi.org/project/headerparser\" rel=\"nofollow\">PyPI</a>\n| <a href=\"https://headerparser.readthedocs.io\" rel=\"nofollow\">Documentation</a>\n| <a href=\"https://github.com/jwodder/headerparser/issues\" rel=\"nofollow\">Issues</a>\n| <a href=\"https://github.com/jwodder/headerparser/blob/master/CHANGELOG.md\" rel=\"nofollow\">Changelog</a></p>\n<p><tt>headerparser</tt> parses key-value pairs in the style of RFC 822 (e-mail)\nheaders and converts them into case-insensitive dictionaries with the trailing\nmessage body (if any) attached.  Fields can be converted to other types, marked\nrequired, or given default values using an API based on the standard library\u2019s\n<tt>argparse</tt> module.  (Everyone loves <tt>argparse</tt>, right?)  Low-level\nfunctions for just scanning header fields (breaking them into sequences of\nkey-value pairs without any further processing) are also included.</p>\n<div id=\"the-format\">\n<h2>The Format</h2>\n<p>RFC 822-style headers are header fields that follow the general format of\ne-mail headers as specified by RFC 822 and friends: each field is a line of the\nform \u201c<tt>Name: Value</tt>\u201d, with long values continued onto multiple lines\n(\u201cfolded\u201d) by indenting the extra lines.  A blank line marks the end of the\nheader section and the beginning of the message body.</p>\n<p>This basic grammar has been used by numerous textual formats besides e-mail,\nincluding but not limited to:</p>\n<ul>\n<li>HTTP request &amp; response headers</li>\n<li>Usenet messages</li>\n<li>most Python packaging metadata files</li>\n<li>Debian packaging control files</li>\n<li><tt><span class=\"pre\">META-INF/MANIFEST.MF</span></tt> files in Java JARs</li>\n<li>a subset of the <a href=\"http://www.yaml.org/\" rel=\"nofollow\">YAML</a> serialization format</li>\n</ul>\n<p>\u2014 all of which this package can parse.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Just use <a href=\"https://pip.pypa.io\" rel=\"nofollow\">pip</a> (You have pip, right?) to install\n<tt>headerparser</tt> and its dependencies:</p>\n<pre>pip install headerparser\n</pre>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<p>Define a parser:</p>\n<pre>&gt;&gt;&gt; import headerparser\n&gt;&gt;&gt; parser = headerparser.HeaderParser()\n&gt;&gt;&gt; parser.add_field('Name', required=True)\n&gt;&gt;&gt; parser.add_field('Type', choices=['example', 'demonstration', 'prototype'], default='example')\n&gt;&gt;&gt; parser.add_field('Public', type=headerparser.BOOL, default=False)\n&gt;&gt;&gt; parser.add_field('Tag', multiple=True)\n&gt;&gt;&gt; parser.add_field('Data')\n</pre>\n<p>Parse some headers and inspect the results:</p>\n<pre>&gt;&gt;&gt; msg = parser.parse_string('''\\\n... Name: Sample Input\n... Public: yes\n... tag: doctest, examples,\n...   whatever\n... TAG: README\n...\n... Wait, why I am using a body instead of the \"Data\" field?\n... ''')\n&gt;&gt;&gt; sorted(msg.keys())\n['Name', 'Public', 'Tag', 'Type']\n&gt;&gt;&gt; msg['Name']\n'Sample Input'\n&gt;&gt;&gt; msg['Public']\nTrue\n&gt;&gt;&gt; msg['Tag']\n['doctest, examples,\\n  whatever', 'README']\n&gt;&gt;&gt; msg['TYPE']\n'example'\n&gt;&gt;&gt; msg['Data']\nTraceback (most recent call last):\n    ...\nKeyError: 'data'\n&gt;&gt;&gt; msg.body\n'Wait, why I am using a body instead of the \"Data\" field?\\n'\n</pre>\n<p>Fail to parse headers that don\u2019t meet your requirements:</p>\n<pre>&gt;&gt;&gt; parser.parse_string('Type: demonstration')\nTraceback (most recent call last):\n    ...\nheaderparser.errors.MissingFieldError: Required header field 'Name' is not present\n&gt;&gt;&gt; parser.parse_string('Name: Bad type\\nType: other')\nTraceback (most recent call last):\n    ...\nheaderparser.errors.InvalidChoiceError: 'other' is not a valid choice for 'Type'\n&gt;&gt;&gt; parser.parse_string('Name: unknown field\\nField: Value')\nTraceback (most recent call last):\n    ...\nheaderparser.errors.UnknownFieldError: Unknown header field 'Field'\n</pre>\n<p>Allow fields you didn\u2019t even think of:</p>\n<pre>&gt;&gt;&gt; parser.add_additional()\n&gt;&gt;&gt; msg = parser.parse_string('Name: unknown field\\nField: Value')\n&gt;&gt;&gt; msg['Field']\n'Value'\n</pre>\n<p>Just split some headers into names &amp; values and worry about validity later:</p>\n<pre>&gt;&gt;&gt; for field in headerparser.scan_string('''\\\n... Name: Scanner Sample\n... Unknown headers: no problem\n... Unparsed-Boolean: yes\n... CaSe-SeNsItIvE-rEsUlTs: true\n... Whitespace around colons:optional\n... Whitespace around colons  :  I already said it's optional.\n...   That means you have the _option_ to use as much as you want!\n...\n... And there's a body, too, I guess.\n... '''): print(field)\n('Name', 'Scanner Sample')\n('Unknown headers', 'no problem')\n('Unparsed-Boolean', 'yes')\n('CaSe-SeNsItIvE-rEsUlTs', 'true')\n('Whitespace around colons', 'optional')\n('Whitespace around colons', \"I already said it's optional.\\n  That means you have the _option_ to use as much as you want!\")\n(None, \"And there's a body, too, I guess.\\n\")\n</pre>\n</div>\n\n          </div>"}, "last_serial": 5333564, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "51d5113dd26830714b525fb7231cf943", "sha256": "3c3f0208beb7752b82ac8953b2eccdd2545d7957be8d9d8e3e9a2c77c646440c"}, "downloads": -1, "filename": "headerparser-0.1.0-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "51d5113dd26830714b525fb7231cf943", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 16793, "upload_time": "2017-03-17T20:11:10", "upload_time_iso_8601": "2017-03-17T20:11:10.322532Z", "url": "https://files.pythonhosted.org/packages/07/dc/0928ea77732a0ade9a8d5803a76d81370cb0f9aefdfe0843b3851118da2f/headerparser-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "16d3f81af73835109d4981bddd0f1943", "sha256": "390d003a5a65f9b317fd514ad77ec524f0cb8236fa26349adbd9d468faea0453"}, "downloads": -1, "filename": "headerparser-0.1.0.tar.gz", "has_sig": true, "md5_digest": "16d3f81af73835109d4981bddd0f1943", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18323, "upload_time": "2017-03-17T20:11:13", "upload_time_iso_8601": "2017-03-17T20:11:13.547678Z", "url": "https://files.pythonhosted.org/packages/37/e9/aae30a018f7a8228bb5a7e0a9bdbb66c8726a3ecba7a6877f171b1617f98/headerparser-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "44d6e312c2eef5aa1ee42168eadc019b", "sha256": "1141cc11dc1f44f1731dc354a5d11d2eb4748957bdd73f304fb05884a200f4c2"}, "downloads": -1, "filename": "headerparser-0.2.0-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "44d6e312c2eef5aa1ee42168eadc019b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, <4", "size": 18180, "upload_time": "2018-02-15T01:06:10", "upload_time_iso_8601": "2018-02-15T01:06:10.477230Z", "url": "https://files.pythonhosted.org/packages/9e/63/e9c5809627cc739616b6197d95712587278ee3b68cd5085c589791bfc233/headerparser-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0b7f8cb709efeef4292567a583cd2ae9", "sha256": "3022bcfc423bab52d3b83a860af7aca0e0b04155e10434ed3d00449673f94121"}, "downloads": -1, "filename": "headerparser-0.2.0.tar.gz", "has_sig": true, "md5_digest": "0b7f8cb709efeef4292567a583cd2ae9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, <4", "size": 24503, "upload_time": "2018-02-15T01:06:12", "upload_time_iso_8601": "2018-02-15T01:06:12.618936Z", "url": "https://files.pythonhosted.org/packages/0f/01/05d8ae7ca81d066c2257bd022e9533203e1ba6f396ef4ab1c67b3fa7881b/headerparser-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "4cd894d08d3e29664d289c0d320ca16b", "sha256": "216ecee4a995c88c66764814c47c86109cf9fef564105a5a024d6efa6cdfb2b2"}, "downloads": -1, "filename": "headerparser-0.3.0-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "4cd894d08d3e29664d289c0d320ca16b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4", "size": 15331, "upload_time": "2018-10-12T22:34:23", "upload_time_iso_8601": "2018-10-12T22:34:23.076220Z", "url": "https://files.pythonhosted.org/packages/d2/79/1018ff7a5217d3c729cb6d8ed070d39b70e780e8a92d295190cb5fcec3ee/headerparser-0.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "42bc2c8b9b9db9a8fb7d1e6b69f90b32", "sha256": "747f6157670afea46cb7e3381e917e35734d7fa26706763678f33a65219474bb"}, "downloads": -1, "filename": "headerparser-0.3.0.tar.gz", "has_sig": true, "md5_digest": "42bc2c8b9b9db9a8fb7d1e6b69f90b32", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4", "size": 25091, "upload_time": "2018-10-12T22:34:24", "upload_time_iso_8601": "2018-10-12T22:34:24.494050Z", "url": "https://files.pythonhosted.org/packages/c1/14/949be17abade4976a35be23323710bcf497e5f1313e7b21887f0545b54d3/headerparser-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "17c6a95f51e8565ae127f22fe7d2d7e7", "sha256": "75857316449cdad212a3ba5c7b3b3177e45dd86e1f83b003f0b6b5108f14766e"}, "downloads": -1, "filename": "headerparser-0.4.0-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "17c6a95f51e8565ae127f22fe7d2d7e7", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4", "size": 16796, "upload_time": "2019-05-29T17:34:11", "upload_time_iso_8601": "2019-05-29T17:34:11.671590Z", "url": "https://files.pythonhosted.org/packages/01/da/c6f6811e79df365c4e089ddf7704fdbb9062b5f1b8fc7aa8f21a62b2766a/headerparser-0.4.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "190d5f1e1391fbd14e8372c7c20ca700", "sha256": "b8ceae4c5e6133fda666d022684e93f9b3d45815c2c7881018123c71ff28c5cc"}, "downloads": -1, "filename": "headerparser-0.4.0.tar.gz", "has_sig": true, "md5_digest": "190d5f1e1391fbd14e8372c7c20ca700", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4", "size": 31285, "upload_time": "2019-05-29T17:34:14", "upload_time_iso_8601": "2019-05-29T17:34:14.243010Z", "url": "https://files.pythonhosted.org/packages/ae/3b/c2b2f73880df51f1dd0d8f5111c886e1b34814028f58d14d9ece4a4c2acb/headerparser-0.4.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "17c6a95f51e8565ae127f22fe7d2d7e7", "sha256": "75857316449cdad212a3ba5c7b3b3177e45dd86e1f83b003f0b6b5108f14766e"}, "downloads": -1, "filename": "headerparser-0.4.0-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "17c6a95f51e8565ae127f22fe7d2d7e7", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4", "size": 16796, "upload_time": "2019-05-29T17:34:11", "upload_time_iso_8601": "2019-05-29T17:34:11.671590Z", "url": "https://files.pythonhosted.org/packages/01/da/c6f6811e79df365c4e089ddf7704fdbb9062b5f1b8fc7aa8f21a62b2766a/headerparser-0.4.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "190d5f1e1391fbd14e8372c7c20ca700", "sha256": "b8ceae4c5e6133fda666d022684e93f9b3d45815c2c7881018123c71ff28c5cc"}, "downloads": -1, "filename": "headerparser-0.4.0.tar.gz", "has_sig": true, "md5_digest": "190d5f1e1391fbd14e8372c7c20ca700", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4", "size": 31285, "upload_time": "2019-05-29T17:34:14", "upload_time_iso_8601": "2019-05-29T17:34:14.243010Z", "url": "https://files.pythonhosted.org/packages/ae/3b/c2b2f73880df51f1dd0d8f5111c886e1b34814028f58d14d9ece4a4c2acb/headerparser-0.4.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:58 2020"}