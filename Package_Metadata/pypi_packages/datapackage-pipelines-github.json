{"info": {"author": "Open Knowledge Foundation", "author_email": "info@okfn.org", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Topic :: Internet :: WWW/HTTP :: Dynamic Content", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# datapackage-pipelines-github\n\nExtension for `datapackage-pipelines` for pulling stuff from GitHub.\n- **Pipelines and Processor Code** from a specific branch will be pulled \n- **Issues** will be presented, using their title and description, as 'unable to start' pipelines.\n- **Pull Requests** will be shown and executed, based on a predefined policies defining:\n  - Should pipeline specs be pulled from PRs\n  - Should processor code be pulled from PRs\n  - Which processors are allowed to run, when executing PRs\n  \n  You can define separate policies for local PRs (from the same fork) or remote PRs (from another fork.)\n\nnote: When pulling code from PRs, we will only bring processors referenced from the \npipeline spec and residing in the same directory as the `pipeline-spec.yaml` file. \n \n## Source spec\n\nPlace files named `github.source-spec.yaml` in your pipelines directory.\nEach one should be of the form:\n```yaml\n<pipeline-id-prefix>:\n    repository: <owner/repo>\n    base-path: <where to look for pipelines and code. default is 'pipelines/'>\n    code: <if not present, won't fetch code. set to {} to use the defaults>\n      ref: <which branch/commit to use to get code from. default is 'master>\n    issues: <if not present, won't fetch issues. set to {} to use the defaults>\n      closed: <boolean, should fetch closed issues? default is no>\n      pipeline-id-format: <string, see below>    \n    pull-requests: <if not present, won't fetch prs. set to {} to use the defaults>\n      local: <policy for local PRs> \n        specs: <boolean, should pull pipeline specs? default is yes> \n        code: <boolean, should pull code from PRs? default is yes>\n        disallow-processors: <which processors are not allowed to run in PRs? default is [\"dump\\..*\"]>\n         - <regular-expression for processor name>\n      remote: <policy for remote PRs, same as local>\n        specs: <boolean, should pull pipeline specs? default is yes> \n        code: <boolean, should pull code from PRs? default is no>\n        disallow-processors: <which processors are not allowed to run in PRs? default is [\"dump\\..*\"]>\n         - <regular-expression for processor name>\n      pipeline-id-format: <string, see below>\n```\n\n`pipeline-id-format` is a Python format string with two placeholders:\n- `issue-id`: The issue/pr number \n- `title-slug`: The issue title slug\n\nThe default format for issues is \"issue/{issue-id:03}_{title-slug}\"\nThe default format for pull-requests is \"pr/{pr-id:03}_{title-slug}\"\n\n#### Example:\n```yaml\ndpp-github:\n    repository: firctionlessdata/datapackage-pipelines-github\n    code:\n      ref: master\n    pull-requests:\n      local:\n        specs: yes\n        code: yes\n        disallow-processors:\n         - \"dump\\..*\"\n      remote:\n        specs: no    \n      pipeline-id-format: \"{title-slug}__{issue-id}\"\n    issues:\n      closed: no\n      pipeline-id-format: \"{title-slug}__{issue-id}\"\n```", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/frictionlessdata/datapackage-pipelines-github", "keywords": "data", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "datapackage-pipelines-github", "package_url": "https://pypi.org/project/datapackage-pipelines-github/", "platform": "", "project_url": "https://pypi.org/project/datapackage-pipelines-github/", "project_urls": {"Homepage": "https://github.com/frictionlessdata/datapackage-pipelines-github"}, "release_url": "https://pypi.org/project/datapackage-pipelines-github/0.0.4/", "requires_dist": null, "requires_python": "", "summary": "{{ DESCRIPTION }}", "version": "0.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            # datapackage-pipelines-github<br><br>Extension for `datapackage-pipelines` for pulling stuff from GitHub.<br>- **Pipelines and Processor Code** from a specific branch will be pulled <br>- **Issues** will be presented, using their title and description, as 'unable to start' pipelines.<br>- **Pull Requests** will be shown and executed, based on a predefined policies defining:<br>  - Should pipeline specs be pulled from PRs<br>  - Should processor code be pulled from PRs<br>  - Which processors are allowed to run, when executing PRs<br>  <br>  You can define separate policies for local PRs (from the same fork) or remote PRs (from another fork.)<br><br>note: When pulling code from PRs, we will only bring processors referenced from the <br>pipeline spec and residing in the same directory as the `pipeline-spec.yaml` file. <br> <br>## Source spec<br><br>Place files named `github.source-spec.yaml` in your pipelines directory.<br>Each one should be of the form:<br>```yaml<br>&lt;pipeline-id-prefix&gt;:<br>    repository: &lt;owner/repo&gt;<br>    base-path: &lt;where to look for pipelines and code. default is 'pipelines/'&gt;<br>    code: &lt;if not present, won't fetch code. set to {} to use the defaults&gt;<br>      ref: &lt;which branch/commit to use to get code from. default is 'master&gt;<br>    issues: &lt;if not present, won't fetch issues. set to {} to use the defaults&gt;<br>      closed: &lt;boolean, should fetch closed issues? default is no&gt;<br>      pipeline-id-format: &lt;string, see below&gt;    <br>    pull-requests: &lt;if not present, won't fetch prs. set to {} to use the defaults&gt;<br>      local: &lt;policy for local PRs&gt; <br>        specs: &lt;boolean, should pull pipeline specs? default is yes&gt; <br>        code: &lt;boolean, should pull code from PRs? default is yes&gt;<br>        disallow-processors: &lt;which processors are not allowed to run in PRs? default is [\"dump\\..*\"]&gt;<br>         - &lt;regular-expression for processor name&gt;<br>      remote: &lt;policy for remote PRs, same as local&gt;<br>        specs: &lt;boolean, should pull pipeline specs? default is yes&gt; <br>        code: &lt;boolean, should pull code from PRs? default is no&gt;<br>        disallow-processors: &lt;which processors are not allowed to run in PRs? default is [\"dump\\..*\"]&gt;<br>         - &lt;regular-expression for processor name&gt;<br>      pipeline-id-format: &lt;string, see below&gt;<br>```<br><br>`pipeline-id-format` is a Python format string with two placeholders:<br>- `issue-id`: The issue/pr number <br>- `title-slug`: The issue title slug<br><br>The default format for issues is \"issue/{issue-id:03}_{title-slug}\"<br>The default format for pull-requests is \"pr/{pr-id:03}_{title-slug}\"<br><br>#### Example:<br>```yaml<br>dpp-github:<br>    repository: firctionlessdata/datapackage-pipelines-github<br>    code:<br>      ref: master<br>    pull-requests:<br>      local:<br>        specs: yes<br>        code: yes<br>        disallow-processors:<br>         - \"dump\\..*\"<br>      remote:<br>        specs: no    <br>      pipeline-id-format: \"{title-slug}__{issue-id}\"<br>    issues:<br>      closed: no<br>      pipeline-id-format: \"{title-slug}__{issue-id}\"<br>```\n          </div>"}, "last_serial": 2832199, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "9205c3e56ce64d49e6ec52c019641f64", "sha256": "6b3339444341f93c51ee2476d9f9e6a86a31cfb688008a4cd6cf7a8f928f1657"}, "downloads": -1, "filename": "datapackage-pipelines-github-0.0.1.tar.gz", "has_sig": false, "md5_digest": "9205c3e56ce64d49e6ec52c019641f64", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 81844, "upload_time": "2017-04-18T07:38:29", "upload_time_iso_8601": "2017-04-18T07:38:29.802667Z", "url": "https://files.pythonhosted.org/packages/a3/00/72a9d8a6dcd4c119e6971c5c5d80da11c7fa236d3f68ae234bed74918a26/datapackage-pipelines-github-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "e701413c2710ae149c8dc561bb5816de", "sha256": "1e2c19ea044c2b939ab617aae0a3ccd8e63d07722f2b71e16cd1e889bfa84623"}, "downloads": -1, "filename": "datapackage-pipelines-github-0.0.2.tar.gz", "has_sig": false, "md5_digest": "e701413c2710ae149c8dc561bb5816de", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 84112, "upload_time": "2017-04-23T12:23:42", "upload_time_iso_8601": "2017-04-23T12:23:42.503815Z", "url": "https://files.pythonhosted.org/packages/64/55/b54385c9ffe8b3ee8deeaf8ea82cb321219c0950dc955a5a44acc6ca5f48/datapackage-pipelines-github-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "137ac1d9dae8fd9049c09dcd976efe00", "sha256": "719fd02f948bb5a24c15b460aa8ac1a1362f2366e864387c93c71784a737425b"}, "downloads": -1, "filename": "datapackage-pipelines-github-0.0.3.tar.gz", "has_sig": false, "md5_digest": "137ac1d9dae8fd9049c09dcd976efe00", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 84962, "upload_time": "2017-04-26T15:06:15", "upload_time_iso_8601": "2017-04-26T15:06:15.657677Z", "url": "https://files.pythonhosted.org/packages/30/95/5b89cc65444b8002fbcdf3089fdf9422a4554a73b67452a875082d6778c5/datapackage-pipelines-github-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "e984c7bb873e8b2730b4e719cbae6f10", "sha256": "91c1260a3725b888994af9148a32a27cf4f6fa818e9b5854035f638f987fa426"}, "downloads": -1, "filename": "datapackage-pipelines-github-0.0.4.tar.gz", "has_sig": false, "md5_digest": "e984c7bb873e8b2730b4e719cbae6f10", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 85010, "upload_time": "2017-04-26T16:15:41", "upload_time_iso_8601": "2017-04-26T16:15:41.686124Z", "url": "https://files.pythonhosted.org/packages/81/fe/a742710c6955f85476578ba8070611761e29852e068d4ef2a7ab18ecc763/datapackage-pipelines-github-0.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e984c7bb873e8b2730b4e719cbae6f10", "sha256": "91c1260a3725b888994af9148a32a27cf4f6fa818e9b5854035f638f987fa426"}, "downloads": -1, "filename": "datapackage-pipelines-github-0.0.4.tar.gz", "has_sig": false, "md5_digest": "e984c7bb873e8b2730b4e719cbae6f10", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 85010, "upload_time": "2017-04-26T16:15:41", "upload_time_iso_8601": "2017-04-26T16:15:41.686124Z", "url": "https://files.pythonhosted.org/packages/81/fe/a742710c6955f85476578ba8070611761e29852e068d4ef2a7ab18ecc763/datapackage-pipelines-github-0.0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:40:17 2020"}