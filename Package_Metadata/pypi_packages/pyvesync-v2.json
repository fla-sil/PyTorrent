{"info": {"author": "Mark Perdue/Joe Trabulsy", "author_email": "jtrabulsy@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Intended Audience :: End Users/Desktop", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 3.5"], "description": "# pyvesync_v2\n\n[![Python 3.5+](https://img.shields.io/badge/python-3.5-blue.svg)](https://www.python.org/downloads/release/python/) [![https://img.shields.io/azure-devops/build/webdjoe/c13ec6f6-2149-46a0-95ba-98bdd60eed28/1](https://img.shields.io/azure-devops/build/webdjoe/c13ec6f6-2149-46a0-95ba-98bdd60eed28/1)](https://dev.azure.com/jtrabulsy/pyvesync_v2/_build?definitionId=1&_a=summary) [![codecov](https://codecov.io/gh/webdjoe/pyvesync_v2/branch/master/graph/badge.svg)](https://codecov.io/gh/webdjoe/pyvesync_v2) [![PYPI](https://img.shields.io/pypi/v/pyvesync_v2)](https://pypi.org/project/pyvesync-v2/)\n\npyvesync_v2 is a library to manage VeSync compatible [smart home devices](#supported-devices)\n\n***Only compatible with python 3.5+***\n\n## Table of Contents\n\n- [pyvesync_v2](#pyvesync_v2)\n  - [Table of Contents](#table-of-contents)\n  - [Installation](#installation)\n  - [Supported Devices](#supported-devices)\n  - [Usage](#usage)\n  - [Configuration](#configuration)\n  - [Example Usage](#example-usage)\n    - [Get electricity metrics of outlets](#get-electricity-metrics-of-outlets)\n  - [API Details](#api-details)\n    - [Manager API](#manager-api)\n    - [Device API](#device-api)\n    - [Outlet Specific Energy Methods and Properties](#outlet-specific-energy-methods-and-properties)\n    - [Model ESW15-USA 15A/1800W Methods](#model-esw15-usa-15a1800w-methods)\n    - [Air Purifier LV-PUR131S Methods](#air-purifier-lv-pur131s-methods)\n    - [Dimmable Smart Light Bulb Method and Properties](#dimmable-smart-light-bulb-method-and-properties)\n    - [Tunable Smart Light Bulb Methods and Properties](#tunable-smart-light-bulb-methods-and-properties)\n    - [Dimmable Switch Methods and Properties](#dimmable-switch-methods-and-properties)\n    - [JSON Output API](#json-output-api)\n      - [JSON Output for All Devices](#json-output-for-all-devices)\n      - [JSON Output for Outlets](#json-output-for-outlets)\n      - [JSON Output for Dimmable Switch](#json-output-for-dimmable-switch)\n      - [JSON Output for Bulbs](#json-output-for-bulbs)\n      - [JSON Output for Air Purifier](#json-output-for-air-purifier)\n  - [Energy History Data](#energy-history-data)\n  - [Development](#development)\n    - [Running Tests](#running-tests)\n\n## Installation\n\nInstall the latest version from pip:\n\n```python\npip install pyvesync_v2\n```\n\n## Supported Devices\n\n1. Etekcity Voltson Smart WiFi Outlet (7A model ESW01-USA)\n2. Etekcity Voltson Smart WiFi Outlet (10A model ESW01-EU)\n3. Etekcity Voltson Smart Wifi Outlet (10A model ESW03-USA)\n4. Etekcity Voltson Smart WiFi Outlet (15A model ESW15-USA)\n5. Etekcity Two Plug Outdoor Outlet (ESO15-TB) (Each plug is a separate object, energy readings are for both plugs combined)\n6. Etekcity Smart WiFi Light Switch (model ESWL01)\n7. Levoit Smart Wifi Air Purifier (LV-PUR131S)\n8. Etekcity Soft White Dimmable Smart Bulb (ESL100)\n9. Etekcity Cool to Soft White Tunable Dimmable Bulb (ESL100CW)\n10. Etekcity Wifi Dimmer Switch (ESD16)\n\n## Usage\n\nTo start with the module:\n\n```python\nfrom pyvesync_v2 import VeSync\n\nmanager = VeSync(\"EMAIL\", \"PASSWORD\", time_zone=DEFAULT_TZ)\nmanager.login()\n\n# Get/Update Devices from server - populate device lists\nmanager.update()\n\nmy_switch = manager.outlets[0]\n# Turn on the first switch\nmy_switch.turn_on()\n# Turn off the first switch\nmy_switch.turn_off()\n\n# Get energy usage data\nmanager.update_energy()\n\n# Display outlet device information\nfor device in manager.outlets:\n    device.display()\n```\n\n## Configuration\n\nThe `time_zone` argument is optional but the specified time zone must match time zone in the tz database (IANNA Time Zone Database), see this link for reference:\n[tz database](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).\nThe time zone determines how the energy history is generated for the smart outlets, i.e. for the week starts at 12:01AM Sunday morning at the specified time zone.  If no time zone or an invalid time zone is entered the default is America/New_York\n\n```python\n#Devices are respectively located in their own lists that can be iterated over\nmanager.outlets = [VeSyncOutletObjects]\nmanager.switches = [VeSyncSwitchObjects]\nmanager.fans = [VeSyncFanObjects]\nmanger.bulbs = [VeSyncBulbObjects]\n```\n\nIf outlets are going to be continuously polled, a custom energy update interval can be set - The default is 6 hours (21600 seconds)\n\n```python\nmanager.energy_update_interval = time # time in seconds\n```\n\n## Example Usage\n\n### Get electricity metrics of outlets\n\n```python\nfor s in manager.outlets:\n  s.update_energy(check_bypass=False) # Get energy history for each device\n```\n\n## API Details\n\n### Manager API\n\n`VeSync.get_devices()` - Returns a list of devices\n\n`VeSync.login()` - Uses class username and password to login to VeSync\n\n`VeSync.update()` - Fetch updated information about devices\n\n`VeSync.update_all_devices()` - Fetch details for all devices (run `VeSyncDevice.update()`)\n\n`VeSync.update_energy(bypass_check=False)` - Get energy history for all outlets - Builds week, month and year nested energy dictionary.  Set `bypass_check=True` to disable the library from checking the update interval\n\n### Device API\n\n`VeSyncDevice.turn_on()` - Turn on the device\n\n`VeSyncDevice.turn_off()` - Turn off the device\n\n`VeSyncDevice.update()` - Fetch updated information about device\n\n`VeSyncDevice.active_time` - Return active time of the device in minutes\n\n`VeSyncDevice.get_config()` - Retrieve Configuration data such as firmware version for device and store in the `VeSyncDevice.config` dictionary\n\n`VeSyncDevice.firmware_update` - Return true if Firmware has update available. `VeSyncDevice.get_config()` must be called first\n\n### Outlet Specific Energy Methods and Properties\n\n`VeSyncOutlet.update_energy(bypass_check=False)` - Get outlet energy history - Builds week, month and year nested energy dictionary. Set `bypass_check=True` to disable the library from checking the update interval\n\n`VeSyncOutlet.energy_today` - Return current energy usage in kWh\n\n`VeSyncOutlet.power` - Return current power in watts of the device\n\n`VeSyncOutlet.voltage` - Return current voltage reading\n\n`VesyncOutlet.weekly_energy_total` - Return total energy reading for the past week in kWh, starts 12:01AM Sunday morning\n\n`VesyncOutlet.monthly_energy_total` - Return total energy reading for the past month in kWh\n\n`VesyncOutlet.yearly_energy_total` - Return total energy reading for the past year in kWh\n\n### Model ESW15-USA 15A/1800W Methods\n\nThe rectangular smart switch model supports some additional functionality on top of the regular api call\n\n`VeSyncOutlet.turn_on_nightlight()` - Turn on the nightlight\n\n`VeSyncOutlet.turn_off_nightlight()` - Turn off the nightlight\n\n### Air Purifier LV-PUR131S Methods\n\n`VeSyncFan.fan_level` - Return the level of the fan (1-3) or 0 for off\n\n`VeSyncFan.filter_life` - Return the percentage of filter life remaining\n\n`VeSyncFan.air_quality` - Return air quality reading\n\n`VeSyncFan.auto_mode()` - Change mode to auto\n\n`VeSyncFan.manual_mode()` - Change fan mode to manual with fan level 1\n\n`VeSyncFan.sleep_mode()` - Change fan mode to sleep  \n\n`VeSyncFan.change_fan_speed(speed)` - Change fan speed with level 1, 2 or 3\n\n`VeSyncFan.screen_status` - Get Status of screen on/off\n\n`VesyncFan.display_on()` - Turn Display on\n\n`VesyncFan.display_off()` - Turn Display off\n\n### Dimmable Smart Light Bulb Method and Properties\n\n`VeSyncBulb.brightness` - Return brightness in percentage (1 - 100)\n\n`VeSyncBulb.set_brightness(brightness)` - Set bulb brightness values from 1 - 100\n\n### Tunable Smart Light Bulb Methods and Properties\n\n`VeSyncBulb.color_temp_pct` - Return color temperature in percentage (0 - 100)\n\n`VeSyncBulb.color_temp_kelvin` - Return brightness in Kelvin\n\n`VeSyncBulb.set_color_temp(color_temp)` - Set color temperature in percentage (0 - 100)\n\n### Dimmable Switch Methods and Properties\n\n`VeSyncSwitch.brightness` - Return brightness of switch in percentage (1 - 100)\n\n`VeSyncSwitch.indicator_light_status` - return status of indicator light on switch\n\n`VeSyncSwitch.rgb_light_status` - return status of rgb light on faceplate\n\n`VeSyncSwitch.rgb_light_value` - return dictionary of rgb light color (0 - 255)\n\n`VeSyncSwitch.set_brightness(brightness)` - Set brightness of switch (1 - 100)\n\n`VeSyncSwitch.indicator_light_on()` - Turn indicator light on\n\n`VeSyncSwitch.indicator_light_off()` - Turn indicator light off\n\n`VeSyncSwitch.rgb_color_on()` - Turn rgb light on\n\n`VeSyncSwitch.rgb_color_off()` - Turn rgb light off\n\n`VeSyncSwitch.rgb_color_set(red, green, blue)` - Set color of rgb light (0 - 255)\n\n### JSON Output API\n\nThe `device.display_json()` method outputs properties and status of the device\n\n#### JSON Output for All Devices\n\n```python\ndevice.display_json()\n\n#Returns:\n\n{\n  'Device Name': 'Device 1',\n  'Model': 'Device Model',\n  'Subdevice No': '1',\n  'Status': 'on',\n  'Online': 'online',\n  'Type': 'Device Type',\n  'CID': 'DEVICE-CID'\n}\n```\n\n#### JSON Output for Outlets\n\n```python\n{\n  'Active Time': '1', # in minutes\n  'Energy': '2.4', # today's energy in kWh\n  'Power': '12', # current power in W\n  'Voltage': '120', # current voltage\n  'Energy Week': '12', # totaly energy of week in kWh\n  'Energy Month': '50', # total energy of month in kWh\n  'Energy Year': '89', # total energy of year in kWh\n  'Nightlight Status': 'on', #status of nightlight for 15A outlets\n  'Nightlight Automode': 'manual', #auto/manual for 15A outlets\n  'Nightlight Brightness': '50' #brightness of nightlight\n}\n```\n\n#### JSON Output for Dimmable Switch\n\nThis output only applies to dimmable switch.  The standard switch has the default device JSON output shown [above](#json-output-for-all-devices)\n\n```python\n{\n  'Indicator Light': 'on', # status of indicator light\n  'Brightness': '50', # percent brightness\n  'RGB Light': 'on' # status of RGB Light on faceplate\n}\n```\n\n#### JSON Output for Bulbs\n\n```python\n# output for dimmable bulb\n{\n  'Brightness': '50' # brightness in percent\n}\n\n# output for tunable bulb\n{\n  'Kelvin': '5400' # color temperature in Kelvin\n}\n\n```\n\n#### JSON Output for Air Purifier\n\n```python\n{\n  'Active Time': '50', # minutes\n  'Fan Level': '2', # fan level 1-3\n  'Air Quality': '95', # air quality in percent\n  'Mode': 'auto',\n  'Screen Status': 'on',\n  'Filter Life': '99' # remaining filter life in percent\n}\n```\n\n## Energy History Data\n\nMore detailed data is available within the `VesyncOutlet` by inspecting the `VesyncOutlet.energy` dictionary.\n\nThe `VesyncOutlet.energy` object includes 3 nested dictionaries `week`, `month`, and `year` that contain detailed weekly, monthly and yearly data\n\n```python\nVesyncOutlet.energy['week']['energy_consumption_of_today']\nVesyncOutlet.energy['week']['cost_per_kwh']\nVesyncOutlet.energy['week']['max_energy']\nVesyncOutlet.energy['week']['total_energy']\nVesyncOutlet.energy['week']['data'] # which itself is a list of values\n```\n\n## Development\n\n### Running Tests\n\nTest can be run with tox for python 3.5, 3.6 and 3.7.  It will also run pylint and flake8 to test for style and formatting.\n\nRun all tests:\n\n```bash\n$ tox\n# Tests for python3.5, 3.6, 3.7, pylint and flake8 succeeded\n```\n\nIndividual tests can be run with the `-e` flag:\n\n```bash\n$ tox -e py35\n# Tests for Python 3.5 succeeded\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/webdjoe/pyvesync_v2", "keywords": "iot,vesync,etekcity,levoit", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pyvesync-v2", "package_url": "https://pypi.org/project/pyvesync-v2/", "platform": "", "project_url": "https://pypi.org/project/pyvesync-v2/", "project_urls": {"Homepage": "https://github.com/webdjoe/pyvesync_v2"}, "release_url": "https://pypi.org/project/pyvesync-v2/1.1.0/", "requires_dist": ["requests (>=2.20.0)"], "requires_python": ">=3.5", "summary": "pyvesync_v2 is a library to manage Etekcity Switches", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pyvesync_v2</h1>\n<p><a href=\"https://www.python.org/downloads/release/python/\" rel=\"nofollow\"><img alt=\"Python 3.5+\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8963091336cb0312d5fefe404229cb9ec0fb8b25/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f707974686f6e2d332e352d626c75652e737667\"></a> <a href=\"https://dev.azure.com/jtrabulsy/pyvesync_v2/_build?definitionId=1&amp;_a=summary\" rel=\"nofollow\"><img alt=\"https://img.shields.io/azure-devops/build/webdjoe/c13ec6f6-2149-46a0-95ba-98bdd60eed28/1\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6047020a81dd12cf9f28e88f24abf79e4df08829/68747470733a2f2f696d672e736869656c64732e696f2f617a7572652d6465766f70732f6275696c642f776562646a6f652f63313365633666362d323134392d343661302d393562612d3938626464363065656432382f31\"></a> <a href=\"https://codecov.io/gh/webdjoe/pyvesync_v2\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b5234f24408002c525dd1ebac3c1e5210a36c1fe/68747470733a2f2f636f6465636f762e696f2f67682f776562646a6f652f7079766573796e635f76322f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a> <a href=\"https://pypi.org/project/pyvesync-v2/\" rel=\"nofollow\"><img alt=\"PYPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5dd46772d04c9dec4ba4d554fc128b16b6f1805e/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7079766573796e635f7632\"></a></p>\n<p>pyvesync_v2 is a library to manage VeSync compatible <a href=\"#supported-devices\" rel=\"nofollow\">smart home devices</a></p>\n<p><em><strong>Only compatible with python 3.5+</strong></em></p>\n<h2>Table of Contents</h2>\n<ul>\n<li><a href=\"#pyvesync_v2\" rel=\"nofollow\">pyvesync_v2</a>\n<ul>\n<li><a href=\"#table-of-contents\" rel=\"nofollow\">Table of Contents</a></li>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#supported-devices\" rel=\"nofollow\">Supported Devices</a></li>\n<li><a href=\"#usage\" rel=\"nofollow\">Usage</a></li>\n<li><a href=\"#configuration\" rel=\"nofollow\">Configuration</a></li>\n<li><a href=\"#example-usage\" rel=\"nofollow\">Example Usage</a>\n<ul>\n<li><a href=\"#get-electricity-metrics-of-outlets\" rel=\"nofollow\">Get electricity metrics of outlets</a></li>\n</ul>\n</li>\n<li><a href=\"#api-details\" rel=\"nofollow\">API Details</a>\n<ul>\n<li><a href=\"#manager-api\" rel=\"nofollow\">Manager API</a></li>\n<li><a href=\"#device-api\" rel=\"nofollow\">Device API</a></li>\n<li><a href=\"#outlet-specific-energy-methods-and-properties\" rel=\"nofollow\">Outlet Specific Energy Methods and Properties</a></li>\n<li><a href=\"#model-esw15-usa-15a1800w-methods\" rel=\"nofollow\">Model ESW15-USA 15A/1800W Methods</a></li>\n<li><a href=\"#air-purifier-lv-pur131s-methods\" rel=\"nofollow\">Air Purifier LV-PUR131S Methods</a></li>\n<li><a href=\"#dimmable-smart-light-bulb-method-and-properties\" rel=\"nofollow\">Dimmable Smart Light Bulb Method and Properties</a></li>\n<li><a href=\"#tunable-smart-light-bulb-methods-and-properties\" rel=\"nofollow\">Tunable Smart Light Bulb Methods and Properties</a></li>\n<li><a href=\"#dimmable-switch-methods-and-properties\" rel=\"nofollow\">Dimmable Switch Methods and Properties</a></li>\n<li><a href=\"#json-output-api\" rel=\"nofollow\">JSON Output API</a>\n<ul>\n<li><a href=\"#json-output-for-all-devices\" rel=\"nofollow\">JSON Output for All Devices</a></li>\n<li><a href=\"#json-output-for-outlets\" rel=\"nofollow\">JSON Output for Outlets</a></li>\n<li><a href=\"#json-output-for-dimmable-switch\" rel=\"nofollow\">JSON Output for Dimmable Switch</a></li>\n<li><a href=\"#json-output-for-bulbs\" rel=\"nofollow\">JSON Output for Bulbs</a></li>\n<li><a href=\"#json-output-for-air-purifier\" rel=\"nofollow\">JSON Output for Air Purifier</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#energy-history-data\" rel=\"nofollow\">Energy History Data</a></li>\n<li><a href=\"#development\" rel=\"nofollow\">Development</a>\n<ul>\n<li><a href=\"#running-tests\" rel=\"nofollow\">Running Tests</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2>Installation</h2>\n<p>Install the latest version from pip:</p>\n<pre><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">pyvesync_v2</span>\n</pre>\n<h2>Supported Devices</h2>\n<ol>\n<li>Etekcity Voltson Smart WiFi Outlet (7A model ESW01-USA)</li>\n<li>Etekcity Voltson Smart WiFi Outlet (10A model ESW01-EU)</li>\n<li>Etekcity Voltson Smart Wifi Outlet (10A model ESW03-USA)</li>\n<li>Etekcity Voltson Smart WiFi Outlet (15A model ESW15-USA)</li>\n<li>Etekcity Two Plug Outdoor Outlet (ESO15-TB) (Each plug is a separate object, energy readings are for both plugs combined)</li>\n<li>Etekcity Smart WiFi Light Switch (model ESWL01)</li>\n<li>Levoit Smart Wifi Air Purifier (LV-PUR131S)</li>\n<li>Etekcity Soft White Dimmable Smart Bulb (ESL100)</li>\n<li>Etekcity Cool to Soft White Tunable Dimmable Bulb (ESL100CW)</li>\n<li>Etekcity Wifi Dimmer Switch (ESD16)</li>\n</ol>\n<h2>Usage</h2>\n<p>To start with the module:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyvesync_v2</span> <span class=\"kn\">import</span> <span class=\"n\">VeSync</span>\n\n<span class=\"n\">manager</span> <span class=\"o\">=</span> <span class=\"n\">VeSync</span><span class=\"p\">(</span><span class=\"s2\">\"EMAIL\"</span><span class=\"p\">,</span> <span class=\"s2\">\"PASSWORD\"</span><span class=\"p\">,</span> <span class=\"n\">time_zone</span><span class=\"o\">=</span><span class=\"n\">DEFAULT_TZ</span><span class=\"p\">)</span>\n<span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">login</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Get/Update Devices from server - populate device lists</span>\n<span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">()</span>\n\n<span class=\"n\">my_switch</span> <span class=\"o\">=</span> <span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">outlets</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"c1\"># Turn on the first switch</span>\n<span class=\"n\">my_switch</span><span class=\"o\">.</span><span class=\"n\">turn_on</span><span class=\"p\">()</span>\n<span class=\"c1\"># Turn off the first switch</span>\n<span class=\"n\">my_switch</span><span class=\"o\">.</span><span class=\"n\">turn_off</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Get energy usage data</span>\n<span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">update_energy</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Display outlet device information</span>\n<span class=\"k\">for</span> <span class=\"n\">device</span> <span class=\"ow\">in</span> <span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">outlets</span><span class=\"p\">:</span>\n    <span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">display</span><span class=\"p\">()</span>\n</pre>\n<h2>Configuration</h2>\n<p>The <code>time_zone</code> argument is optional but the specified time zone must match time zone in the tz database (IANNA Time Zone Database), see this link for reference:\n<a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" rel=\"nofollow\">tz database</a>.\nThe time zone determines how the energy history is generated for the smart outlets, i.e. for the week starts at 12:01AM Sunday morning at the specified time zone.  If no time zone or an invalid time zone is entered the default is America/New_York</p>\n<pre><span class=\"c1\">#Devices are respectively located in their own lists that can be iterated over</span>\n<span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">outlets</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">VeSyncOutletObjects</span><span class=\"p\">]</span>\n<span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">switches</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">VeSyncSwitchObjects</span><span class=\"p\">]</span>\n<span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">fans</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">VeSyncFanObjects</span><span class=\"p\">]</span>\n<span class=\"n\">manger</span><span class=\"o\">.</span><span class=\"n\">bulbs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">VeSyncBulbObjects</span><span class=\"p\">]</span>\n</pre>\n<p>If outlets are going to be continuously polled, a custom energy update interval can be set - The default is 6 hours (21600 seconds)</p>\n<pre><span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">energy_update_interval</span> <span class=\"o\">=</span> <span class=\"n\">time</span> <span class=\"c1\"># time in seconds</span>\n</pre>\n<h2>Example Usage</h2>\n<h3>Get electricity metrics of outlets</h3>\n<pre><span class=\"k\">for</span> <span class=\"n\">s</span> <span class=\"ow\">in</span> <span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">outlets</span><span class=\"p\">:</span>\n  <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">update_energy</span><span class=\"p\">(</span><span class=\"n\">check_bypass</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span> <span class=\"c1\"># Get energy history for each device</span>\n</pre>\n<h2>API Details</h2>\n<h3>Manager API</h3>\n<p><code>VeSync.get_devices()</code> - Returns a list of devices</p>\n<p><code>VeSync.login()</code> - Uses class username and password to login to VeSync</p>\n<p><code>VeSync.update()</code> - Fetch updated information about devices</p>\n<p><code>VeSync.update_all_devices()</code> - Fetch details for all devices (run <code>VeSyncDevice.update()</code>)</p>\n<p><code>VeSync.update_energy(bypass_check=False)</code> - Get energy history for all outlets - Builds week, month and year nested energy dictionary.  Set <code>bypass_check=True</code> to disable the library from checking the update interval</p>\n<h3>Device API</h3>\n<p><code>VeSyncDevice.turn_on()</code> - Turn on the device</p>\n<p><code>VeSyncDevice.turn_off()</code> - Turn off the device</p>\n<p><code>VeSyncDevice.update()</code> - Fetch updated information about device</p>\n<p><code>VeSyncDevice.active_time</code> - Return active time of the device in minutes</p>\n<p><code>VeSyncDevice.get_config()</code> - Retrieve Configuration data such as firmware version for device and store in the <code>VeSyncDevice.config</code> dictionary</p>\n<p><code>VeSyncDevice.firmware_update</code> - Return true if Firmware has update available. <code>VeSyncDevice.get_config()</code> must be called first</p>\n<h3>Outlet Specific Energy Methods and Properties</h3>\n<p><code>VeSyncOutlet.update_energy(bypass_check=False)</code> - Get outlet energy history - Builds week, month and year nested energy dictionary. Set <code>bypass_check=True</code> to disable the library from checking the update interval</p>\n<p><code>VeSyncOutlet.energy_today</code> - Return current energy usage in kWh</p>\n<p><code>VeSyncOutlet.power</code> - Return current power in watts of the device</p>\n<p><code>VeSyncOutlet.voltage</code> - Return current voltage reading</p>\n<p><code>VesyncOutlet.weekly_energy_total</code> - Return total energy reading for the past week in kWh, starts 12:01AM Sunday morning</p>\n<p><code>VesyncOutlet.monthly_energy_total</code> - Return total energy reading for the past month in kWh</p>\n<p><code>VesyncOutlet.yearly_energy_total</code> - Return total energy reading for the past year in kWh</p>\n<h3>Model ESW15-USA 15A/1800W Methods</h3>\n<p>The rectangular smart switch model supports some additional functionality on top of the regular api call</p>\n<p><code>VeSyncOutlet.turn_on_nightlight()</code> - Turn on the nightlight</p>\n<p><code>VeSyncOutlet.turn_off_nightlight()</code> - Turn off the nightlight</p>\n<h3>Air Purifier LV-PUR131S Methods</h3>\n<p><code>VeSyncFan.fan_level</code> - Return the level of the fan (1-3) or 0 for off</p>\n<p><code>VeSyncFan.filter_life</code> - Return the percentage of filter life remaining</p>\n<p><code>VeSyncFan.air_quality</code> - Return air quality reading</p>\n<p><code>VeSyncFan.auto_mode()</code> - Change mode to auto</p>\n<p><code>VeSyncFan.manual_mode()</code> - Change fan mode to manual with fan level 1</p>\n<p><code>VeSyncFan.sleep_mode()</code> - Change fan mode to sleep</p>\n<p><code>VeSyncFan.change_fan_speed(speed)</code> - Change fan speed with level 1, 2 or 3</p>\n<p><code>VeSyncFan.screen_status</code> - Get Status of screen on/off</p>\n<p><code>VesyncFan.display_on()</code> - Turn Display on</p>\n<p><code>VesyncFan.display_off()</code> - Turn Display off</p>\n<h3>Dimmable Smart Light Bulb Method and Properties</h3>\n<p><code>VeSyncBulb.brightness</code> - Return brightness in percentage (1 - 100)</p>\n<p><code>VeSyncBulb.set_brightness(brightness)</code> - Set bulb brightness values from 1 - 100</p>\n<h3>Tunable Smart Light Bulb Methods and Properties</h3>\n<p><code>VeSyncBulb.color_temp_pct</code> - Return color temperature in percentage (0 - 100)</p>\n<p><code>VeSyncBulb.color_temp_kelvin</code> - Return brightness in Kelvin</p>\n<p><code>VeSyncBulb.set_color_temp(color_temp)</code> - Set color temperature in percentage (0 - 100)</p>\n<h3>Dimmable Switch Methods and Properties</h3>\n<p><code>VeSyncSwitch.brightness</code> - Return brightness of switch in percentage (1 - 100)</p>\n<p><code>VeSyncSwitch.indicator_light_status</code> - return status of indicator light on switch</p>\n<p><code>VeSyncSwitch.rgb_light_status</code> - return status of rgb light on faceplate</p>\n<p><code>VeSyncSwitch.rgb_light_value</code> - return dictionary of rgb light color (0 - 255)</p>\n<p><code>VeSyncSwitch.set_brightness(brightness)</code> - Set brightness of switch (1 - 100)</p>\n<p><code>VeSyncSwitch.indicator_light_on()</code> - Turn indicator light on</p>\n<p><code>VeSyncSwitch.indicator_light_off()</code> - Turn indicator light off</p>\n<p><code>VeSyncSwitch.rgb_color_on()</code> - Turn rgb light on</p>\n<p><code>VeSyncSwitch.rgb_color_off()</code> - Turn rgb light off</p>\n<p><code>VeSyncSwitch.rgb_color_set(red, green, blue)</code> - Set color of rgb light (0 - 255)</p>\n<h3>JSON Output API</h3>\n<p>The <code>device.display_json()</code> method outputs properties and status of the device</p>\n<h4>JSON Output for All Devices</h4>\n<pre><span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">display_json</span><span class=\"p\">()</span>\n\n<span class=\"c1\">#Returns:</span>\n\n<span class=\"p\">{</span>\n  <span class=\"s1\">'Device Name'</span><span class=\"p\">:</span> <span class=\"s1\">'Device 1'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'Model'</span><span class=\"p\">:</span> <span class=\"s1\">'Device Model'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'Subdevice No'</span><span class=\"p\">:</span> <span class=\"s1\">'1'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'Status'</span><span class=\"p\">:</span> <span class=\"s1\">'on'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'Online'</span><span class=\"p\">:</span> <span class=\"s1\">'online'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'Type'</span><span class=\"p\">:</span> <span class=\"s1\">'Device Type'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'CID'</span><span class=\"p\">:</span> <span class=\"s1\">'DEVICE-CID'</span>\n<span class=\"p\">}</span>\n</pre>\n<h4>JSON Output for Outlets</h4>\n<pre><span class=\"p\">{</span>\n  <span class=\"s1\">'Active Time'</span><span class=\"p\">:</span> <span class=\"s1\">'1'</span><span class=\"p\">,</span> <span class=\"c1\"># in minutes</span>\n  <span class=\"s1\">'Energy'</span><span class=\"p\">:</span> <span class=\"s1\">'2.4'</span><span class=\"p\">,</span> <span class=\"c1\"># today's energy in kWh</span>\n  <span class=\"s1\">'Power'</span><span class=\"p\">:</span> <span class=\"s1\">'12'</span><span class=\"p\">,</span> <span class=\"c1\"># current power in W</span>\n  <span class=\"s1\">'Voltage'</span><span class=\"p\">:</span> <span class=\"s1\">'120'</span><span class=\"p\">,</span> <span class=\"c1\"># current voltage</span>\n  <span class=\"s1\">'Energy Week'</span><span class=\"p\">:</span> <span class=\"s1\">'12'</span><span class=\"p\">,</span> <span class=\"c1\"># totaly energy of week in kWh</span>\n  <span class=\"s1\">'Energy Month'</span><span class=\"p\">:</span> <span class=\"s1\">'50'</span><span class=\"p\">,</span> <span class=\"c1\"># total energy of month in kWh</span>\n  <span class=\"s1\">'Energy Year'</span><span class=\"p\">:</span> <span class=\"s1\">'89'</span><span class=\"p\">,</span> <span class=\"c1\"># total energy of year in kWh</span>\n  <span class=\"s1\">'Nightlight Status'</span><span class=\"p\">:</span> <span class=\"s1\">'on'</span><span class=\"p\">,</span> <span class=\"c1\">#status of nightlight for 15A outlets</span>\n  <span class=\"s1\">'Nightlight Automode'</span><span class=\"p\">:</span> <span class=\"s1\">'manual'</span><span class=\"p\">,</span> <span class=\"c1\">#auto/manual for 15A outlets</span>\n  <span class=\"s1\">'Nightlight Brightness'</span><span class=\"p\">:</span> <span class=\"s1\">'50'</span> <span class=\"c1\">#brightness of nightlight</span>\n<span class=\"p\">}</span>\n</pre>\n<h4>JSON Output for Dimmable Switch</h4>\n<p>This output only applies to dimmable switch.  The standard switch has the default device JSON output shown <a href=\"#json-output-for-all-devices\" rel=\"nofollow\">above</a></p>\n<pre><span class=\"p\">{</span>\n  <span class=\"s1\">'Indicator Light'</span><span class=\"p\">:</span> <span class=\"s1\">'on'</span><span class=\"p\">,</span> <span class=\"c1\"># status of indicator light</span>\n  <span class=\"s1\">'Brightness'</span><span class=\"p\">:</span> <span class=\"s1\">'50'</span><span class=\"p\">,</span> <span class=\"c1\"># percent brightness</span>\n  <span class=\"s1\">'RGB Light'</span><span class=\"p\">:</span> <span class=\"s1\">'on'</span> <span class=\"c1\"># status of RGB Light on faceplate</span>\n<span class=\"p\">}</span>\n</pre>\n<h4>JSON Output for Bulbs</h4>\n<pre><span class=\"c1\"># output for dimmable bulb</span>\n<span class=\"p\">{</span>\n  <span class=\"s1\">'Brightness'</span><span class=\"p\">:</span> <span class=\"s1\">'50'</span> <span class=\"c1\"># brightness in percent</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># output for tunable bulb</span>\n<span class=\"p\">{</span>\n  <span class=\"s1\">'Kelvin'</span><span class=\"p\">:</span> <span class=\"s1\">'5400'</span> <span class=\"c1\"># color temperature in Kelvin</span>\n<span class=\"p\">}</span>\n</pre>\n<h4>JSON Output for Air Purifier</h4>\n<pre><span class=\"p\">{</span>\n  <span class=\"s1\">'Active Time'</span><span class=\"p\">:</span> <span class=\"s1\">'50'</span><span class=\"p\">,</span> <span class=\"c1\"># minutes</span>\n  <span class=\"s1\">'Fan Level'</span><span class=\"p\">:</span> <span class=\"s1\">'2'</span><span class=\"p\">,</span> <span class=\"c1\"># fan level 1-3</span>\n  <span class=\"s1\">'Air Quality'</span><span class=\"p\">:</span> <span class=\"s1\">'95'</span><span class=\"p\">,</span> <span class=\"c1\"># air quality in percent</span>\n  <span class=\"s1\">'Mode'</span><span class=\"p\">:</span> <span class=\"s1\">'auto'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'Screen Status'</span><span class=\"p\">:</span> <span class=\"s1\">'on'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'Filter Life'</span><span class=\"p\">:</span> <span class=\"s1\">'99'</span> <span class=\"c1\"># remaining filter life in percent</span>\n<span class=\"p\">}</span>\n</pre>\n<h2>Energy History Data</h2>\n<p>More detailed data is available within the <code>VesyncOutlet</code> by inspecting the <code>VesyncOutlet.energy</code> dictionary.</p>\n<p>The <code>VesyncOutlet.energy</code> object includes 3 nested dictionaries <code>week</code>, <code>month</code>, and <code>year</code> that contain detailed weekly, monthly and yearly data</p>\n<pre><span class=\"n\">VesyncOutlet</span><span class=\"o\">.</span><span class=\"n\">energy</span><span class=\"p\">[</span><span class=\"s1\">'week'</span><span class=\"p\">][</span><span class=\"s1\">'energy_consumption_of_today'</span><span class=\"p\">]</span>\n<span class=\"n\">VesyncOutlet</span><span class=\"o\">.</span><span class=\"n\">energy</span><span class=\"p\">[</span><span class=\"s1\">'week'</span><span class=\"p\">][</span><span class=\"s1\">'cost_per_kwh'</span><span class=\"p\">]</span>\n<span class=\"n\">VesyncOutlet</span><span class=\"o\">.</span><span class=\"n\">energy</span><span class=\"p\">[</span><span class=\"s1\">'week'</span><span class=\"p\">][</span><span class=\"s1\">'max_energy'</span><span class=\"p\">]</span>\n<span class=\"n\">VesyncOutlet</span><span class=\"o\">.</span><span class=\"n\">energy</span><span class=\"p\">[</span><span class=\"s1\">'week'</span><span class=\"p\">][</span><span class=\"s1\">'total_energy'</span><span class=\"p\">]</span>\n<span class=\"n\">VesyncOutlet</span><span class=\"o\">.</span><span class=\"n\">energy</span><span class=\"p\">[</span><span class=\"s1\">'week'</span><span class=\"p\">][</span><span class=\"s1\">'data'</span><span class=\"p\">]</span> <span class=\"c1\"># which itself is a list of values</span>\n</pre>\n<h2>Development</h2>\n<h3>Running Tests</h3>\n<p>Test can be run with tox for python 3.5, 3.6 and 3.7.  It will also run pylint and flake8 to test for style and formatting.</p>\n<p>Run all tests:</p>\n<pre>$ tox\n<span class=\"c1\"># Tests for python3.5, 3.6, 3.7, pylint and flake8 succeeded</span>\n</pre>\n<p>Individual tests can be run with the <code>-e</code> flag:</p>\n<pre>$ tox -e py35\n<span class=\"c1\"># Tests for Python 3.5 succeeded</span>\n</pre>\n\n          </div>"}, "last_serial": 6069654, "releases": {"0.9.6": [{"comment_text": "", "digests": {"md5": "616b3477cbe95c84185f26f6a8c05e24", "sha256": "1a10341fcb7528b3782c4815f1fd8264b0b12421770aa2b85e96d038912f1f86"}, "downloads": -1, "filename": "pyvesync_v2-0.9.6-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "616b3477cbe95c84185f26f6a8c05e24", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 5944, "upload_time": "2019-02-26T03:25:42", "upload_time_iso_8601": "2019-02-26T03:25:42.939476Z", "url": "https://files.pythonhosted.org/packages/43/97/5ce05bd4b15fc07601f3cdc239b173de716c9e8342ee57dd79922eaee7d1/pyvesync_v2-0.9.6-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7334c3a0f6ce143527ba3c35337d0e28", "sha256": "2b425c7970c223368ef855720551f2f7b781101e721745076c3717fc5a3f54be"}, "downloads": -1, "filename": "pyvesync_v2-0.9.6.tar.gz", "has_sig": false, "md5_digest": "7334c3a0f6ce143527ba3c35337d0e28", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6495, "upload_time": "2019-02-26T03:25:44", "upload_time_iso_8601": "2019-02-26T03:25:44.712328Z", "url": "https://files.pythonhosted.org/packages/f8/55/6cb6570aeddc8941353b8b97e49c5c6dab3305981661e595c25686fcbf6e/pyvesync_v2-0.9.6.tar.gz", "yanked": false}], "0.9.7": [{"comment_text": "", "digests": {"md5": "0a28e226e4807e97e04e05ba504fc38d", "sha256": "b2471b9fe73c16fbd7ab8cf51249735ed218298b5f7b0dd0ff4970da33d807c2"}, "downloads": -1, "filename": "pyvesync_v2-0.9.7-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0a28e226e4807e97e04e05ba504fc38d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 6609, "upload_time": "2019-03-16T17:58:02", "upload_time_iso_8601": "2019-03-16T17:58:02.456897Z", "url": "https://files.pythonhosted.org/packages/df/32/c41ede8714b048f7216dd3c3e0399ce528e50656a40e138c856715f04e99/pyvesync_v2-0.9.7-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ab609dee5a92f7cd556fc3bc4064afc2", "sha256": "a2a10958e5a4c21c4486cab09ee345142c12de0260afb4f67277234e12e3e556"}, "downloads": -1, "filename": "pyvesync_v2-0.9.7.tar.gz", "has_sig": false, "md5_digest": "ab609dee5a92f7cd556fc3bc4064afc2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7417, "upload_time": "2019-03-16T17:58:04", "upload_time_iso_8601": "2019-03-16T17:58:04.127538Z", "url": "https://files.pythonhosted.org/packages/88/d4/7515f6adb8c70f06c24edc92c6f652559b187182234e243cbcae8d70ea19/pyvesync_v2-0.9.7.tar.gz", "yanked": false}], "0.9.8": [{"comment_text": "", "digests": {"md5": "872140b63da0e788d88e53448b55d555", "sha256": "3dd5409ca9c59c670b665280bcd8b2feb1a9493d644a648077f30dad6100871c"}, "downloads": -1, "filename": "pyvesync_v2-0.9.8-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "872140b63da0e788d88e53448b55d555", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 6616, "upload_time": "2019-06-08T23:39:37", "upload_time_iso_8601": "2019-06-08T23:39:37.386995Z", "url": "https://files.pythonhosted.org/packages/8a/fb/d158fe14e470c59f3b661db096e326db38d0635b01c0aaf189bb623330f7/pyvesync_v2-0.9.8-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "07f68799011f6cd9b12447cb8a84f1f7", "sha256": "cb9527593eedc695c7f95d65176bc5f43241c95debb0fc8416415a61bf61727e"}, "downloads": -1, "filename": "pyvesync_v2-0.9.8.tar.gz", "has_sig": false, "md5_digest": "07f68799011f6cd9b12447cb8a84f1f7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7466, "upload_time": "2019-06-08T23:39:39", "upload_time_iso_8601": "2019-06-08T23:39:39.476698Z", "url": "https://files.pythonhosted.org/packages/9e/78/03a85b6f0c9fdb8bbdf12c2b43989e2298d2c72c3c994dd962dd45e07041/pyvesync_v2-0.9.8.tar.gz", "yanked": false}], "0.9.9": [{"comment_text": "", "digests": {"md5": "165a0c62f6d31726eaa2c03dff2939f4", "sha256": "62242e286ee88ddded64389879f86c36b5ba98ea6aa224a26250173f23f721ef"}, "downloads": -1, "filename": "pyvesync_v2-0.9.9-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "165a0c62f6d31726eaa2c03dff2939f4", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 6616, "upload_time": "2019-06-08T23:44:01", "upload_time_iso_8601": "2019-06-08T23:44:01.024623Z", "url": "https://files.pythonhosted.org/packages/cb/85/bf79d5000d4a7e9c50fad71d598ec21d06f3623b30a2134542cd514ba8fa/pyvesync_v2-0.9.9-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3b934481c9ad75a0a366b2eb12181246", "sha256": "501154f79e16399cf73f17fef89da68cd0a3478bb39121eecbc7dfac797f609a"}, "downloads": -1, "filename": "pyvesync_v2-0.9.9.tar.gz", "has_sig": false, "md5_digest": "3b934481c9ad75a0a366b2eb12181246", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7461, "upload_time": "2019-06-08T23:44:03", "upload_time_iso_8601": "2019-06-08T23:44:03.687218Z", "url": "https://files.pythonhosted.org/packages/e3/1a/f433117c99b04d26b0624faabefd4271608f00cf7dd886d176f61cbc36e0/pyvesync_v2-0.9.9.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "db6a7efce2dbffb60538eed61a212351", "sha256": "b530416bd954a6600abc1274c63d8aba7db3e53af18bbe2b356143ac4628ed3c"}, "downloads": -1, "filename": "pyvesync_v2-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "db6a7efce2dbffb60538eed61a212351", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 41177, "upload_time": "2019-11-03T00:29:06", "upload_time_iso_8601": "2019-11-03T00:29:06.457527Z", "url": "https://files.pythonhosted.org/packages/b9/6c/89c07a2dc412c7733c304b4ee99bf7652ea5ccec2e7aa889613f0ce9a2e9/pyvesync_v2-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6f4dcbd2e1651c2239f74a40aab81546", "sha256": "949cf9e21cedbb08dc4fbf03dd7d202a3746fb0ce52547faaa3033aa2cafc927"}, "downloads": -1, "filename": "pyvesync_v2-1.0.0.tar.gz", "has_sig": false, "md5_digest": "6f4dcbd2e1651c2239f74a40aab81546", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 33761, "upload_time": "2019-11-03T00:29:07", "upload_time_iso_8601": "2019-11-03T00:29:07.946590Z", "url": "https://files.pythonhosted.org/packages/26/e7/2541de6f2f380fa84ebca3f1faa67e4bada324ef1ef8a1a35150c4c681c7/pyvesync_v2-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "1e0d117d7af47d8d41542fc223f18535", "sha256": "7d7d02a46a18bd33192a3ac0e395d2898b1bdf0bad7aa4f0c30d15d2a29e36e6"}, "downloads": -1, "filename": "pyvesync_v2-1.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1e0d117d7af47d8d41542fc223f18535", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 41330, "upload_time": "2019-11-03T01:06:16", "upload_time_iso_8601": "2019-11-03T01:06:16.210868Z", "url": "https://files.pythonhosted.org/packages/89/f3/1bd965ce96cf43ef1beaf44e21be94364410378b020b96d41b53c8b99c47/pyvesync_v2-1.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "229bd8b9271e8e8c09f72b2f32c2774c", "sha256": "6383d65ac230003c5dd781abe1921443236c6b152c9d556e0561d7079bcc415e"}, "downloads": -1, "filename": "pyvesync_v2-1.1.0.tar.gz", "has_sig": false, "md5_digest": "229bd8b9271e8e8c09f72b2f32c2774c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 33916, "upload_time": "2019-11-03T01:06:18", "upload_time_iso_8601": "2019-11-03T01:06:18.023943Z", "url": "https://files.pythonhosted.org/packages/e3/20/a7c629075f8a73490c258b05caf57ab629aa3a50b5ab391720530056c0d6/pyvesync_v2-1.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1e0d117d7af47d8d41542fc223f18535", "sha256": "7d7d02a46a18bd33192a3ac0e395d2898b1bdf0bad7aa4f0c30d15d2a29e36e6"}, "downloads": -1, "filename": "pyvesync_v2-1.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1e0d117d7af47d8d41542fc223f18535", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 41330, "upload_time": "2019-11-03T01:06:16", "upload_time_iso_8601": "2019-11-03T01:06:16.210868Z", "url": "https://files.pythonhosted.org/packages/89/f3/1bd965ce96cf43ef1beaf44e21be94364410378b020b96d41b53c8b99c47/pyvesync_v2-1.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "229bd8b9271e8e8c09f72b2f32c2774c", "sha256": "6383d65ac230003c5dd781abe1921443236c6b152c9d556e0561d7079bcc415e"}, "downloads": -1, "filename": "pyvesync_v2-1.1.0.tar.gz", "has_sig": false, "md5_digest": "229bd8b9271e8e8c09f72b2f32c2774c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 33916, "upload_time": "2019-11-03T01:06:18", "upload_time_iso_8601": "2019-11-03T01:06:18.023943Z", "url": "https://files.pythonhosted.org/packages/e3/20/a7c629075f8a73490c258b05caf57ab629aa3a50b5ab391720530056c0d6/pyvesync_v2-1.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:12:02 2020"}