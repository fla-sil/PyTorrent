{"info": {"author": "Robert Johansson", "author_email": "robertrockar@live.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Topic :: Software Development"], "description": "===========\npynetstring\n===========\nA module for encoding and decoding netstrings. See the definition of netstrings\nat https://cr.yp.to/proto/netstrings.txt.\n\nRequirements\n------------\nPynetstring is written for Python 3.\n\nUsage\n-----\n**Encoding**\n::\n\n  # Will give b'5:Hello,'\n  print(pynetstring.encode('Hello'))\n\nIt is also possible to encode lists of data.\n::\n\n  # Will give [b'5:Hello,', b'5:World,']\n  print(pynetstring.encode(['Hello', 'World']))\n\n**Decoding**\n\nIn the simplest case, when we know for sure that the data we are trying to\ndecode ends on a netstring boundary we can simply do:\n::\n\n  # Will give [b'Hello', b'World!']\n  print(pynetstring.decode('5:Hello,6:World!,'))\n\nIn many cases however, such when netstring are transmitted over a network, the\nchunks of data that arrive may not necessarily align to netstring boundaries.\nFor example a chunk of data may contain a netstring and then parts of the next.\nTo handle this, call Decoder.feed(), which will buffer and parse the data and \nemit decoded data as soon as one or more netstrings have been fully received.\n::\n\n  decoder = pynetstring.Decoder()\n  # Will give []\n  print(decoder.feed('5:He'))\n  # Will give ['Hello', 'World!']\n  print(decoder.feed('llo,6:World!,5:ag'))\n  # Will give ['again']\n  print(decoder.feed('ain,'))\n\n\nIt is possible at any moment to check if there is partial data which is still\npending to be returned from feed().\n\n::\n\n  decoder.feed('3:ab')\n  # Will return True\n  print(decoder.pending())\n  decoder.feed('c,')\n  # Will return False\n  print(decoder.pending())\n\n\nThe receiving side could look something like this:\n::\n\n  decoder = pynetstring.Decoder()\n\n  def handle_network_data(data):\n    decoded_list = decoder.feed(data)\n    for item in decoded_list:\n        print(item)\n\nAlso the Decoder class supports limiting the maximal decoded netstring length.\nThis is required for network applications to restrict the maximal length of \nthe input buffer in order to prevent unintentional memory bloat or intentional \nmisuse from malicious senders.\nThe netstring length limit is optional and specified as the first argument to \nthe constructor:\n::\n\n  decoder = pynetstring.Decoder(maxlen=1024)\n\nThe Decoder will raise TooLong exception as soon as it'll discover next string\ncan't fit the limit.\n\n**Stream decoding**\n\npynetstring provides a StreamingDecoder class for cases when you need to \ndecode a stream of very large netstrings where individual netstrings may not \nfit in memory or data should be processed before the entire netstring has been\ntransmitted.\n\nStreamingDecoder has an interface similar to Decoder class, but its feed() \nmethod returns parts of the decoded netstrings as soon as they are extracted.\nThe end of each individual string is signalized with an empty bytestring in \nthe sequence.\nIn order to the collect returned strings you should accumulate the fragments \nfrom the returned sequence until an empty binary string encountered.\nAfter each empty string in sequence you should start over accumulating outputs\ninto a new string.\n\nFor example, if feed() returns the sequence \n[ b'ab', b'cd', b'', b'!!!!', b'', b'', b'12' ] it means we have so far \nreceived three complete strings: b'abcd', b'!!!!' and b'', and part of one \nincomplete netstring starting with b'12' (further parts of which will appear \nin subsequent calls to feed()).\n\nData encoding\n-------------\nRegardless of the type of the data that is sent to encode(), it will always\nreturn binary data, i.e. python bytes. The data that is returned from decode()\nand Decoder.feed() will also be binary. This is because the decoder can not\nmake any assumptions on the encoding of the original data. If you know that \nthe data that comes in can be interpreted in a particular way or encoding, \ne.g. UTF-8, you have to explicitly do that conversion.\n::\n\n  encoded = pynetstring.encode(u'Hello World!')\n  # This will be <class 'bytes'>\n  print(type(encoded))\n  decoded_list = pynetstring.decode(encoded)\n  # This will be <class 'bytes'>\n  print(type(decoded_list[0]))\n  # This will return the original unicode string u'Hello World!'\n  print(decoded_list[0].decode('utf-8'))\n\nError handling\n--------------\nA ParseError subclass exception will be raised if trying to decode an invalid \nnetstring.\n::\n\n  # IncompleteString exception due to missing trailing comma:\n  pynetstring.decode('3:ABC_')\n\n  # BadLength due to no length specified\n  pynetstring.decode(b' :X,')\n\n  decoder = Decoder(3)\n  # TooLong exception due to exceeded netstring limit in stream parser:\n  decoder.feed(b'4:ABCD,')\n\n  # BadLength due to invalid character in length declaration:\n  decoder.feed(b' 1:X,')\n\nAll other exceptions of this module can be expected to be subclass of \nNetstringException.\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/rj79/pynetstring", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pynetstring", "package_url": "https://pypi.org/project/pynetstring/", "platform": "", "project_url": "https://pypi.org/project/pynetstring/", "project_urls": {"Homepage": "https://github.com/rj79/pynetstring"}, "release_url": "https://pypi.org/project/pynetstring/0.5/", "requires_dist": null, "requires_python": ">=3", "summary": "A module for encoding and decoding netstrings.", "version": "0.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A module for encoding and decoding netstrings. See the definition of netstrings\nat <a href=\"https://cr.yp.to/proto/netstrings.txt\" rel=\"nofollow\">https://cr.yp.to/proto/netstrings.txt</a>.</p>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<p>Pynetstring is written for Python 3.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p><strong>Encoding</strong></p>\n<pre># Will give b'5:Hello,'\nprint(pynetstring.encode('Hello'))\n</pre>\n<p>It is also possible to encode lists of data.</p>\n<pre># Will give [b'5:Hello,', b'5:World,']\nprint(pynetstring.encode(['Hello', 'World']))\n</pre>\n<p><strong>Decoding</strong></p>\n<p>In the simplest case, when we know for sure that the data we are trying to\ndecode ends on a netstring boundary we can simply do:</p>\n<pre># Will give [b'Hello', b'World!']\nprint(pynetstring.decode('5:Hello,6:World!,'))\n</pre>\n<p>In many cases however, such when netstring are transmitted over a network, the\nchunks of data that arrive may not necessarily align to netstring boundaries.\nFor example a chunk of data may contain a netstring and then parts of the next.\nTo handle this, call Decoder.feed(), which will buffer and parse the data and\nemit decoded data as soon as one or more netstrings have been fully received.</p>\n<pre>decoder = pynetstring.Decoder()\n# Will give []\nprint(decoder.feed('5:He'))\n# Will give ['Hello', 'World!']\nprint(decoder.feed('llo,6:World!,5:ag'))\n# Will give ['again']\nprint(decoder.feed('ain,'))\n</pre>\n<p>It is possible at any moment to check if there is partial data which is still\npending to be returned from feed().</p>\n<pre>decoder.feed('3:ab')\n# Will return True\nprint(decoder.pending())\ndecoder.feed('c,')\n# Will return False\nprint(decoder.pending())\n</pre>\n<p>The receiving side could look something like this:</p>\n<pre>decoder = pynetstring.Decoder()\n\ndef handle_network_data(data):\n  decoded_list = decoder.feed(data)\n  for item in decoded_list:\n      print(item)\n</pre>\n<p>Also the Decoder class supports limiting the maximal decoded netstring length.\nThis is required for network applications to restrict the maximal length of\nthe input buffer in order to prevent unintentional memory bloat or intentional\nmisuse from malicious senders.\nThe netstring length limit is optional and specified as the first argument to\nthe constructor:</p>\n<pre>decoder = pynetstring.Decoder(maxlen=1024)\n</pre>\n<p>The Decoder will raise TooLong exception as soon as it\u2019ll discover next string\ncan\u2019t fit the limit.</p>\n<p><strong>Stream decoding</strong></p>\n<p>pynetstring provides a StreamingDecoder class for cases when you need to\ndecode a stream of very large netstrings where individual netstrings may not\nfit in memory or data should be processed before the entire netstring has been\ntransmitted.</p>\n<p>StreamingDecoder has an interface similar to Decoder class, but its feed()\nmethod returns parts of the decoded netstrings as soon as they are extracted.\nThe end of each individual string is signalized with an empty bytestring in\nthe sequence.\nIn order to the collect returned strings you should accumulate the fragments\nfrom the returned sequence until an empty binary string encountered.\nAfter each empty string in sequence you should start over accumulating outputs\ninto a new string.</p>\n<p>For example, if feed() returns the sequence\n[ b\u2019ab\u2019, b\u2019cd\u2019, b\u2019\u2019, b\u2019!!!!\u2019, b\u2019\u2019, b\u2019\u2019, b\u201912\u2019 ] it means we have so far\nreceived three complete strings: b\u2019abcd\u2019, b\u2019!!!!\u2019 and b\u2019\u2019, and part of one\nincomplete netstring starting with b\u201912\u2019 (further parts of which will appear\nin subsequent calls to feed()).</p>\n</div>\n<div id=\"data-encoding\">\n<h2>Data encoding</h2>\n<p>Regardless of the type of the data that is sent to encode(), it will always\nreturn binary data, i.e. python bytes. The data that is returned from decode()\nand Decoder.feed() will also be binary. This is because the decoder can not\nmake any assumptions on the encoding of the original data. If you know that\nthe data that comes in can be interpreted in a particular way or encoding,\ne.g. UTF-8, you have to explicitly do that conversion.</p>\n<pre>encoded = pynetstring.encode(u'Hello World!')\n# This will be &lt;class 'bytes'&gt;\nprint(type(encoded))\ndecoded_list = pynetstring.decode(encoded)\n# This will be &lt;class 'bytes'&gt;\nprint(type(decoded_list[0]))\n# This will return the original unicode string u'Hello World!'\nprint(decoded_list[0].decode('utf-8'))\n</pre>\n</div>\n<div id=\"error-handling\">\n<h2>Error handling</h2>\n<p>A ParseError subclass exception will be raised if trying to decode an invalid\nnetstring.</p>\n<pre># IncompleteString exception due to missing trailing comma:\npynetstring.decode('3:ABC_')\n\n# BadLength due to no length specified\npynetstring.decode(b' :X,')\n\ndecoder = Decoder(3)\n# TooLong exception due to exceeded netstring limit in stream parser:\ndecoder.feed(b'4:ABCD,')\n\n# BadLength due to invalid character in length declaration:\ndecoder.feed(b' 1:X,')\n</pre>\n<p>All other exceptions of this module can be expected to be subclass of\nNetstringException.</p>\n</div>\n\n          </div>"}, "last_serial": 6454441, "releases": {"0.1.dev2": [{"comment_text": "", "digests": {"md5": "c8d3e5c7f9e56b613089d72c0ca1171f", "sha256": "275c078175d9bbbe4941d768219a37d95154ebb46af8163f0e3dcfb8ce486939"}, "downloads": -1, "filename": "pynetstring-0.1.dev2-py3-none-any.whl", "has_sig": false, "md5_digest": "c8d3e5c7f9e56b613089d72c0ca1171f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 5448, "upload_time": "2017-12-23T22:11:22", "upload_time_iso_8601": "2017-12-23T22:11:22.182957Z", "url": "https://files.pythonhosted.org/packages/93/68/2bd5e7ebf0042ece3d4dccc49b5485d630d8db2a059d4aea3b2f74fbf3d5/pynetstring-0.1.dev2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0bc77346fef765ecc732f069a2d26d53", "sha256": "5572388dd28aae310ec1a4bac92d9097f26e4cd3962438daa9850106bb9ac970"}, "downloads": -1, "filename": "pynetstring-0.1.dev2.tar.gz", "has_sig": false, "md5_digest": "0bc77346fef765ecc732f069a2d26d53", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 4190, "upload_time": "2017-12-23T22:11:23", "upload_time_iso_8601": "2017-12-23T22:11:23.597771Z", "url": "https://files.pythonhosted.org/packages/98/ed/7c1a3d9261c56f3160b1089c799cdd24688a6db98de406df87e75eb3fb85/pynetstring-0.1.dev2.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "a4c4b71fc9a7d6527c5fb1899f469f94", "sha256": "43afce7024697f0c541a321d26689bd57204506cf1f892c0696d70626c199ccb"}, "downloads": -1, "filename": "pynetstring-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "a4c4b71fc9a7d6527c5fb1899f469f94", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 4509, "upload_time": "2019-08-19T20:41:09", "upload_time_iso_8601": "2019-08-19T20:41:09.761597Z", "url": "https://files.pythonhosted.org/packages/fb/20/3b70fa224a7dc31a72f32446f59f1bae38ccb94272e711d93c8799ff756d/pynetstring-0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9e6e3292b48f1a22c40e021ec27ea8ec", "sha256": "6ba299b7e6775904c38c726d27f1f29713c5b462b8500a726b4c92bdb121e2b4"}, "downloads": -1, "filename": "pynetstring-0.2.tar.gz", "has_sig": false, "md5_digest": "9e6e3292b48f1a22c40e021ec27ea8ec", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 4187, "upload_time": "2019-08-19T20:41:11", "upload_time_iso_8601": "2019-08-19T20:41:11.259034Z", "url": "https://files.pythonhosted.org/packages/1c/14/75ee87d8281fd700afb7f582664678c46df24f0943d6b188eed953c6ea64/pynetstring-0.2.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "7f5f350ccca01de1b33b055596a398d6", "sha256": "41a1cbc694961817ab316d5d08b1269a464edac99e1af65279e273189ace42d6"}, "downloads": -1, "filename": "pynetstring-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "7f5f350ccca01de1b33b055596a398d6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 5557, "upload_time": "2020-01-13T01:08:13", "upload_time_iso_8601": "2020-01-13T01:08:13.899088Z", "url": "https://files.pythonhosted.org/packages/b4/f1/455eae46e965dee9199a5ab7b897d1a0ddbf4459f6ba7fa79d2c331ff913/pynetstring-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9ad78d51056d26ddfdc696b37a6ae98a", "sha256": "714cffdc5dd7ae530ee343f044a72557f386bc55c16be818e25f80bc0f226c1f"}, "downloads": -1, "filename": "pynetstring-0.3.1.tar.gz", "has_sig": false, "md5_digest": "9ad78d51056d26ddfdc696b37a6ae98a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 5494, "upload_time": "2020-01-13T01:08:15", "upload_time_iso_8601": "2020-01-13T01:08:15.532906Z", "url": "https://files.pythonhosted.org/packages/94/51/9c2485d347d80f0e557a1f117a453f884027e7937fbbe3b89a76d259a9e0/pynetstring-0.3.1.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "9cd04c9579014ca48b0c24ccffa4f03b", "sha256": "f9dec60f7e6e6f8ef014118074e909a29927874d7fc40336625529aa90cb2624"}, "downloads": -1, "filename": "pynetstring-0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "9cd04c9579014ca48b0c24ccffa4f03b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 5696, "upload_time": "2020-01-13T19:22:09", "upload_time_iso_8601": "2020-01-13T19:22:09.661586Z", "url": "https://files.pythonhosted.org/packages/ef/a9/e1144228bd5a31af1e5bef3527ed34146d9aa070ddf45e1ef23d5cbddcb3/pynetstring-0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2e032e6cdb6be5db2ae49a9bfca5c6db", "sha256": "a77780bcbdc98def0a3b05c1cc132d77b586dc799dd049f15bfc339677959839"}, "downloads": -1, "filename": "pynetstring-0.4.tar.gz", "has_sig": false, "md5_digest": "2e032e6cdb6be5db2ae49a9bfca5c6db", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 5780, "upload_time": "2020-01-13T19:22:10", "upload_time_iso_8601": "2020-01-13T19:22:10.735526Z", "url": "https://files.pythonhosted.org/packages/c9/51/72519afbecc9be01ea96b8433cd25b0eed464b6f5b86b73a316b3590fa05/pynetstring-0.4.tar.gz", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "cd429e03eb44d5143e15069e1e2acea3", "sha256": "1808735c14d872753dae4dbceaf357cafee0c56256d98be6e22104ee90e2cbbc"}, "downloads": -1, "filename": "pynetstring-0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "cd429e03eb44d5143e15069e1e2acea3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 8255, "upload_time": "2020-01-14T21:54:44", "upload_time_iso_8601": "2020-01-14T21:54:44.332498Z", "url": "https://files.pythonhosted.org/packages/0c/1e/4c49c20f8e95ecc5a6a83b16eac13d3992328fdbaf05ddd102e6fd27acc0/pynetstring-0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0ed6debf0057bf13bcf675079d5efd1f", "sha256": "b1f33be38094336956765b2f2a70168ff51c6c497fd9ce6e3b1fd4504a52059e"}, "downloads": -1, "filename": "pynetstring-0.5.tar.gz", "has_sig": false, "md5_digest": "0ed6debf0057bf13bcf675079d5efd1f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 7154, "upload_time": "2020-01-14T21:54:46", "upload_time_iso_8601": "2020-01-14T21:54:46.088166Z", "url": "https://files.pythonhosted.org/packages/3c/9b/5e2b366d2321503febd0b3649ae37f9e4819d07c967577925e6f6d536a03/pynetstring-0.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "cd429e03eb44d5143e15069e1e2acea3", "sha256": "1808735c14d872753dae4dbceaf357cafee0c56256d98be6e22104ee90e2cbbc"}, "downloads": -1, "filename": "pynetstring-0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "cd429e03eb44d5143e15069e1e2acea3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 8255, "upload_time": "2020-01-14T21:54:44", "upload_time_iso_8601": "2020-01-14T21:54:44.332498Z", "url": "https://files.pythonhosted.org/packages/0c/1e/4c49c20f8e95ecc5a6a83b16eac13d3992328fdbaf05ddd102e6fd27acc0/pynetstring-0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0ed6debf0057bf13bcf675079d5efd1f", "sha256": "b1f33be38094336956765b2f2a70168ff51c6c497fd9ce6e3b1fd4504a52059e"}, "downloads": -1, "filename": "pynetstring-0.5.tar.gz", "has_sig": false, "md5_digest": "0ed6debf0057bf13bcf675079d5efd1f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 7154, "upload_time": "2020-01-14T21:54:46", "upload_time_iso_8601": "2020-01-14T21:54:46.088166Z", "url": "https://files.pythonhosted.org/packages/3c/9b/5e2b366d2321503febd0b3649ae37f9e4819d07c967577925e6f6d536a03/pynetstring-0.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:01:15 2020"}