{"info": {"author": "Vitaliy Khamin", "author_email": "vitaliykhamin@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "Master branch: |Build Status|\n\n.. |Build Status| image:: https://travis-ci.org/khamin/redisca.png?branch=master\n   :target: https://travis-ci.org/khamin/redisca\n\nInstallation\n============\n\nUsing PyPi (recommended):\n\n::\n\n\tsudo pip install redisca\n\nor\n\n::\n\n\twget https://pypi.python.org/packages/source/r/redisca/redisca-X.tar.gz\n\ttar xvf redisca-X.tar.gz\n\tsudo python redisca-X/setup.py install\n\nModel\n=====\n\n.. code:: python\n\n   from redisca import Model\n   from redisca import Email\n   from redisca import DateTime\n\n   class User (Model):\n\t   email = Email(\n\t\t   field='eml', # Define link with 'eml' hash key.\n\t\t   index=True,  # Index support.\n\t\t   unique=True, # Makes sure that field is unique across db.\n\t   )\n\n\t   created = DateTime(\n\t\t   field='created',\t   # Define link with 'created' hash key.\n\t\t   new=datetime.utcnow, # Value which is used as default in User.new()\n\t   )\n\n\t   age = Integer(\n\t\t   field='age', # Define link with 'age' hash key.\n\t\t   index=True,  # Enable index.\n\t   )\n\n   user = User.new() # Create model with random id and \"new\" fields values.\n   user = User.new(model_id='your_id') # Or use custom id if needed.\n\n   user.getid() # user id\n   user.email = 'foo@bar.com'\n\n   user.save()   # Saving routines\n   user.exists() # True\n\n   user.delete() # Deletion routines\n   user.exists() # False\n\nFields\n------\n\nField is the way how you should control data in your models. Just define class variables with field-specific options and take classic ORM's advantages:\n\n-  data validation;\n-  native python data types support;\n-  transparent relations between models;\n-  indexes support (incl. unique indexes).\n\nAvailable parameters:\n\n-  **field** - redis hash field name to store value in.\n-  **index** - makes field searchable.\n-  **unique** - tells that value should be unique across database. Model.save() will raise an Exception if model of same class already exists with given value.\n-  **new** - field value which is used as default in Model.new(). Functions, methods and built-in's are acceptable as callback values.\n\nBuilt-in fields:\n\n-  **String** - extends *IndexField* with additional parameters *minlen* and *maxlen*.\n-  **Email** - extends *IndexField* field with email validation support.\n-  **Integer** - extends *RangeIndexField* with parameters *minval* and *maxval*. Accepts int and numeric strings. Returns int.\n-  **Reference** - extends *IndexField* with *cls* (reference class) parameter. Accepts and returns instance of *cls*.\n-  **MD5Pass** - extends *String* field. Acts like string but converts given string to md5 sum.\n-  **DateTime** - extends *RangeIndexField* without additional parameters. Accepts datetime and int(timestamp) values. Returns datetime.\n\nGetting Data\n------------\n\nUsing id\n~~~~~~~~\n\nHere is an example how to get model instance using id *(empty model returned if it not exists yet)*:\n\n.. code:: python\n\n\tuser = User('user id')\n\tprint(user.email) # 'foo@bar.com'\n\nEach initialized model is saved in registry and returned on each attempt of re-init:\n\n.. code:: python\n\n\tuser1 = User('user_id')\n\tuser2 = User('user_id')\n\tuser1 is user2 # Always is True\n\n\tuser.free()   # Unregister model instance.\n\tUser.free_all()  # Cleanup User's registry.\n\tModel.free_all() # Unregister all known models.\n\nFind by Index\n~~~~~~~~~~~~~\n\n.. code:: python\n\n\tusers = User.email == 'foo@bar.com' # or User.email.find('foo@bar.com')\n\nSubclasses of *RangeIndexField* has a limited support for ranged queries:\n\n.. code:: python\n\n\tusers = User.age >= 10 # User.age.range(minval=10)\n\nMore complex queries are also possible:\n\n.. code:: python\n\n\t# SELECT * FROM `users` where `age` BETWEEN 0 AND 100 LIMIT 10 OFFSET 50;\n\tusers = User.age.range(minval=0, maxval=100, start=50, num=10)\n\nDict API\n~~~~~~~~\n\nAll fields are linked to model dict keys. Use can use model dict API to read and write *redis hash* data AS IS:\n\n.. code:: python\n\n\tuser = User('id')\n\tuser['eml'] = 'foo@bar.com'\n\tuser['age'] = 10\n\nConnecting to Redis\n-------------------\n\nGlobal database connection setup looks like this:\n\n.. code:: python\n\n\tfrom redisca import conf\n\tfrom redis import Redis\n\n\tconf.db = Redis()\n\n**Note:** *redisca* uses localhost:6379(0) as default database. You can setup **inheritable** per-model database connection using *conf* class decorator:\n\n.. code:: python\n\n\tfrom redisca import Model\n\tfrom redisca import conf\n\n\tfrom redis import Redis\n\n\t@conf(db=Redis())\n\tclass User (Model):\n\t\tpass\n\nKey Format\n----------\n\nModel key format is:\n\n::\n\n\tmodel_key_prefix:model_id\n\nDefault model\\_key\\_prefix is *lowercased class name*. Use *conf* class decorator to override it like this:\n\n.. code:: python\n\n\tfrom redisca import Model\n\tfrom redisca import conf\n\n\t@conf(prefix='usr')\n\tclass User (Model):\n\t\tpass\n\n\tprint(User.getprefix()) # 'usr'\n\tprint(user.getkey())    # 'usr:1'\n\nTools\n=====\n\nID Generator\n------------\n\n.. code:: python\n\n\tfrom redisca import hexid\n\tfrom redisca import intid\n\n\tprint(hexid()) # 59d369790\n\tprint(hexid()) # 59d3697bc\n\n\tprint(intid()) # 24116751882\n\tprint(intid()) # 24116788848\n\nFlask Support\n-------------\n\n.. code:: python\n\n\tfrom redisca import FlaskRedisca\n\n\tapp = Flask()\n\n\tapp.config['REDISCA'] = {\n\t\t# redis.StrictRedis constructor kwargs dict.\n\t}\n\n\tFlaskRedisca(app)\n\nOptional *autosave* constructor parameter tells *redisca* that all known models should be saved at the end of request (if no exception raised). Unchanged and deleted instances are ignored. If you want to skip locally changed instances use free() method during request life.\n\nRequirements\n============\n\n-  redis-py 2.7+\n-  python 2.7/3.2+ or pypy 2.1+\n\nPython 3.x support\n------------------\n\nPy3k support is still a sort of experiment but I'm looking carefuly into full compability with cutting-edge builds of CPython. There are no known issues with it actually.\n", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/khamin/redisca", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "redisca", "package_url": "https://pypi.org/project/redisca/", "platform": "any", "project_url": "https://pypi.org/project/redisca/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/khamin/redisca"}, "release_url": "https://pypi.org/project/redisca/1.3/", "requires_dist": null, "requires_python": null, "summary": "Lightweight ORM for Redis", "version": "1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Master branch: <a href=\"https://travis-ci.org/khamin/redisca\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e4c8e8dba69be571596a4053d63f08abce56c824/68747470733a2f2f7472617669732d63692e6f72672f6b68616d696e2f726564697363612e706e673f6272616e63683d6d6173746572\"></a></p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Using PyPi (recommended):</p>\n<pre>sudo pip install redisca\n</pre>\n<p>or</p>\n<pre>wget https://pypi.python.org/packages/source/r/redisca/redisca-X.tar.gz\ntar xvf redisca-X.tar.gz\nsudo python redisca-X/setup.py install\n</pre>\n</div>\n<div id=\"model\">\n<h2>Model</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">redisca</span> <span class=\"kn\">import</span> <span class=\"n\">Model</span>\n<span class=\"kn\">from</span> <span class=\"nn\">redisca</span> <span class=\"kn\">import</span> <span class=\"n\">Email</span>\n<span class=\"kn\">from</span> <span class=\"nn\">redisca</span> <span class=\"kn\">import</span> <span class=\"n\">DateTime</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">User</span> <span class=\"p\">(</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n        <span class=\"n\">email</span> <span class=\"o\">=</span> <span class=\"n\">Email</span><span class=\"p\">(</span>\n                <span class=\"n\">field</span><span class=\"o\">=</span><span class=\"s1\">'eml'</span><span class=\"p\">,</span> <span class=\"c1\"># Define link with 'eml' hash key.</span>\n                <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>  <span class=\"c1\"># Index support.</span>\n                <span class=\"n\">unique</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"c1\"># Makes sure that field is unique across db.</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"n\">created</span> <span class=\"o\">=</span> <span class=\"n\">DateTime</span><span class=\"p\">(</span>\n                <span class=\"n\">field</span><span class=\"o\">=</span><span class=\"s1\">'created'</span><span class=\"p\">,</span>        <span class=\"c1\"># Define link with 'created' hash key.</span>\n                <span class=\"n\">new</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">utcnow</span><span class=\"p\">,</span> <span class=\"c1\"># Value which is used as default in User.new()</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"n\">age</span> <span class=\"o\">=</span> <span class=\"n\">Integer</span><span class=\"p\">(</span>\n                <span class=\"n\">field</span><span class=\"o\">=</span><span class=\"s1\">'age'</span><span class=\"p\">,</span> <span class=\"c1\"># Define link with 'age' hash key.</span>\n                <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>  <span class=\"c1\"># Enable index.</span>\n        <span class=\"p\">)</span>\n\n<span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">new</span><span class=\"p\">()</span> <span class=\"c1\"># Create model with random id and \"new\" fields values.</span>\n<span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">model_id</span><span class=\"o\">=</span><span class=\"s1\">'your_id'</span><span class=\"p\">)</span> <span class=\"c1\"># Or use custom id if needed.</span>\n\n<span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">getid</span><span class=\"p\">()</span> <span class=\"c1\"># user id</span>\n<span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">email</span> <span class=\"o\">=</span> <span class=\"s1\">'foo@bar.com'</span>\n\n<span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>   <span class=\"c1\"># Saving routines</span>\n<span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">()</span> <span class=\"c1\"># True</span>\n\n<span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">()</span> <span class=\"c1\"># Deletion routines</span>\n<span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">()</span> <span class=\"c1\"># False</span>\n</pre>\n<div id=\"fields\">\n<h3>Fields</h3>\n<p>Field is the way how you should control data in your models. Just define class variables with field-specific options and take classic ORM\u2019s advantages:</p>\n<ul>\n<li>data validation;</li>\n<li>native python data types support;</li>\n<li>transparent relations between models;</li>\n<li>indexes support (incl. unique indexes).</li>\n</ul>\n<p>Available parameters:</p>\n<ul>\n<li><strong>field</strong> - redis hash field name to store value in.</li>\n<li><strong>index</strong> - makes field searchable.</li>\n<li><strong>unique</strong> - tells that value should be unique across database. Model.save() will raise an Exception if model of same class already exists with given value.</li>\n<li><strong>new</strong> - field value which is used as default in Model.new(). Functions, methods and built-in\u2019s are acceptable as callback values.</li>\n</ul>\n<p>Built-in fields:</p>\n<ul>\n<li><strong>String</strong> - extends <em>IndexField</em> with additional parameters <em>minlen</em> and <em>maxlen</em>.</li>\n<li><strong>Email</strong> - extends <em>IndexField</em> field with email validation support.</li>\n<li><strong>Integer</strong> - extends <em>RangeIndexField</em> with parameters <em>minval</em> and <em>maxval</em>. Accepts int and numeric strings. Returns int.</li>\n<li><strong>Reference</strong> - extends <em>IndexField</em> with <em>cls</em> (reference class) parameter. Accepts and returns instance of <em>cls</em>.</li>\n<li><strong>MD5Pass</strong> - extends <em>String</em> field. Acts like string but converts given string to md5 sum.</li>\n<li><strong>DateTime</strong> - extends <em>RangeIndexField</em> without additional parameters. Accepts datetime and int(timestamp) values. Returns datetime.</li>\n</ul>\n</div>\n<div id=\"getting-data\">\n<h3>Getting Data</h3>\n<div id=\"using-id\">\n<h4>Using id</h4>\n<p>Here is an example how to get model instance using id <em>(empty model returned if it not exists yet)</em>:</p>\n<pre><span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"p\">(</span><span class=\"s1\">'user id'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">email</span><span class=\"p\">)</span> <span class=\"c1\"># 'foo@bar.com'</span>\n</pre>\n<p>Each initialized model is saved in registry and returned on each attempt of re-init:</p>\n<pre><span class=\"n\">user1</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"p\">(</span><span class=\"s1\">'user_id'</span><span class=\"p\">)</span>\n<span class=\"n\">user2</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"p\">(</span><span class=\"s1\">'user_id'</span><span class=\"p\">)</span>\n<span class=\"n\">user1</span> <span class=\"ow\">is</span> <span class=\"n\">user2</span> <span class=\"c1\"># Always is True</span>\n\n<span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">free</span><span class=\"p\">()</span>   <span class=\"c1\"># Unregister model instance.</span>\n<span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">free_all</span><span class=\"p\">()</span>  <span class=\"c1\"># Cleanup User's registry.</span>\n<span class=\"n\">Model</span><span class=\"o\">.</span><span class=\"n\">free_all</span><span class=\"p\">()</span> <span class=\"c1\"># Unregister all known models.</span>\n</pre>\n</div>\n<div id=\"find-by-index\">\n<h4>Find by Index</h4>\n<pre><span class=\"n\">users</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">email</span> <span class=\"o\">==</span> <span class=\"s1\">'foo@bar.com'</span> <span class=\"c1\"># or User.email.find('foo@bar.com')</span>\n</pre>\n<p>Subclasses of <em>RangeIndexField</em> has a limited support for ranged queries:</p>\n<pre><span class=\"n\">users</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">age</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">10</span> <span class=\"c1\"># User.age.range(minval=10)</span>\n</pre>\n<p>More complex queries are also possible:</p>\n<pre><span class=\"c1\"># SELECT * FROM `users` where `age` BETWEEN 0 AND 100 LIMIT 10 OFFSET 50;</span>\n<span class=\"n\">users</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">age</span><span class=\"o\">.</span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"n\">minval</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">maxval</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"n\">num</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"dict-api\">\n<h4>Dict API</h4>\n<p>All fields are linked to model dict keys. Use can use model dict API to read and write <em>redis hash</em> data AS IS:</p>\n<pre><span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"p\">(</span><span class=\"s1\">'id'</span><span class=\"p\">)</span>\n<span class=\"n\">user</span><span class=\"p\">[</span><span class=\"s1\">'eml'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'foo@bar.com'</span>\n<span class=\"n\">user</span><span class=\"p\">[</span><span class=\"s1\">'age'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n</pre>\n</div>\n</div>\n<div id=\"connecting-to-redis\">\n<h3>Connecting to Redis</h3>\n<p>Global database connection setup looks like this:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">redisca</span> <span class=\"kn\">import</span> <span class=\"n\">conf</span>\n<span class=\"kn\">from</span> <span class=\"nn\">redis</span> <span class=\"kn\">import</span> <span class=\"n\">Redis</span>\n\n<span class=\"n\">conf</span><span class=\"o\">.</span><span class=\"n\">db</span> <span class=\"o\">=</span> <span class=\"n\">Redis</span><span class=\"p\">()</span>\n</pre>\n<p><strong>Note:</strong> <em>redisca</em> uses localhost:6379(0) as default database. You can setup <strong>inheritable</strong> per-model database connection using <em>conf</em> class decorator:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">redisca</span> <span class=\"kn\">import</span> <span class=\"n\">Model</span>\n<span class=\"kn\">from</span> <span class=\"nn\">redisca</span> <span class=\"kn\">import</span> <span class=\"n\">conf</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">redis</span> <span class=\"kn\">import</span> <span class=\"n\">Redis</span>\n\n<span class=\"nd\">@conf</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"o\">=</span><span class=\"n\">Redis</span><span class=\"p\">())</span>\n<span class=\"k\">class</span> <span class=\"nc\">User</span> <span class=\"p\">(</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n</pre>\n</div>\n<div id=\"key-format\">\n<h3>Key Format</h3>\n<p>Model key format is:</p>\n<pre>model_key_prefix:model_id\n</pre>\n<p>Default model_key_prefix is <em>lowercased class name</em>. Use <em>conf</em> class decorator to override it like this:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">redisca</span> <span class=\"kn\">import</span> <span class=\"n\">Model</span>\n<span class=\"kn\">from</span> <span class=\"nn\">redisca</span> <span class=\"kn\">import</span> <span class=\"n\">conf</span>\n\n<span class=\"nd\">@conf</span><span class=\"p\">(</span><span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"s1\">'usr'</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">User</span> <span class=\"p\">(</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">getprefix</span><span class=\"p\">())</span> <span class=\"c1\"># 'usr'</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">getkey</span><span class=\"p\">())</span>    <span class=\"c1\"># 'usr:1'</span>\n</pre>\n</div>\n</div>\n<div id=\"tools\">\n<h2>Tools</h2>\n<div id=\"id-generator\">\n<h3>ID Generator</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">redisca</span> <span class=\"kn\">import</span> <span class=\"n\">hexid</span>\n<span class=\"kn\">from</span> <span class=\"nn\">redisca</span> <span class=\"kn\">import</span> <span class=\"n\">intid</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">hexid</span><span class=\"p\">())</span> <span class=\"c1\"># 59d369790</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">hexid</span><span class=\"p\">())</span> <span class=\"c1\"># 59d3697bc</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">intid</span><span class=\"p\">())</span> <span class=\"c1\"># 24116751882</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">intid</span><span class=\"p\">())</span> <span class=\"c1\"># 24116788848</span>\n</pre>\n</div>\n<div id=\"flask-support\">\n<h3>Flask Support</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">redisca</span> <span class=\"kn\">import</span> <span class=\"n\">FlaskRedisca</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Flask</span><span class=\"p\">()</span>\n\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s1\">'REDISCA'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"c1\"># redis.StrictRedis constructor kwargs dict.</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">FlaskRedisca</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">)</span>\n</pre>\n<p>Optional <em>autosave</em> constructor parameter tells <em>redisca</em> that all known models should be saved at the end of request (if no exception raised). Unchanged and deleted instances are ignored. If you want to skip locally changed instances use free() method during request life.</p>\n</div>\n</div>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<ul>\n<li>redis-py 2.7+</li>\n<li>python 2.7/3.2+ or pypy 2.1+</li>\n</ul>\n<div id=\"python-3-x-support\">\n<h3>Python 3.x support</h3>\n<p>Py3k support is still a sort of experiment but I\u2019m looking carefuly into full compability with cutting-edge builds of CPython. There are no known issues with it actually.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1036038, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "e0a5deb995a17a4a825444575b89738e", "sha256": "35b9a3f1ecd86df3e07b44c58cf9d78cdf63c796554288e1719f196aedc7eca9"}, "downloads": -1, "filename": "redisca-1.0.tar.gz", "has_sig": false, "md5_digest": "e0a5deb995a17a4a825444575b89738e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10106, "upload_time": "2013-11-06T17:08:32", "upload_time_iso_8601": "2013-11-06T17:08:32.049485Z", "url": "https://files.pythonhosted.org/packages/ed/c5/be46cc2eb0c334669191e63a91fd324e8545a1340651fe523707a5deaa58/redisca-1.0.tar.gz", "yanked": false}], "1.0b2": [{"comment_text": "", "digests": {"md5": "e7a1ed63a9f293dba57b2e0355a7c7f6", "sha256": "7941bab76003d11d9a99b32b7cb286d10e10ac9fdf365334bc7ebb11584c29ca"}, "downloads": -1, "filename": "redisca-1.0b2.tar.gz", "has_sig": false, "md5_digest": "e7a1ed63a9f293dba57b2e0355a7c7f6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5491, "upload_time": "2013-08-13T05:11:00", "upload_time_iso_8601": "2013-08-13T05:11:00.022790Z", "url": "https://files.pythonhosted.org/packages/44/40/8615e8b058d865849d051d4b8d537417acd2119d11380f3c1a34ab8ec123/redisca-1.0b2.tar.gz", "yanked": false}], "1.0b3": [{"comment_text": "", "digests": {"md5": "64fe47fb93edb7f3503ed1505c35dbe0", "sha256": "68aab96f6eb9f431a13d8ecbdd1b9409dcc1d1de02c4b1c26da73987d530ef4d"}, "downloads": -1, "filename": "redisca-1.0b3.tar.gz", "has_sig": false, "md5_digest": "64fe47fb93edb7f3503ed1505c35dbe0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5773, "upload_time": "2013-08-14T07:19:29", "upload_time_iso_8601": "2013-08-14T07:19:29.193151Z", "url": "https://files.pythonhosted.org/packages/a3/2c/650e7f0a59aa1a811046aae95a037bf75e9d67861985f16ce84a9a81153b/redisca-1.0b3.tar.gz", "yanked": false}], "1.0b4": [{"comment_text": "", "digests": {"md5": "22f8d8b51ff4c954d54b933232996b74", "sha256": "769c63798df8fd22d1bef6c2e2d75ce305a3285e68bb263ee2542ff9e916caad"}, "downloads": -1, "filename": "redisca-1.0b4.tar.gz", "has_sig": false, "md5_digest": "22f8d8b51ff4c954d54b933232996b74", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6461, "upload_time": "2013-08-17T05:00:09", "upload_time_iso_8601": "2013-08-17T05:00:09.094612Z", "url": "https://files.pythonhosted.org/packages/28/17/9850cd5d237d298a43cf9079106432ff633bf0805bf13492c838cb15c35f/redisca-1.0b4.tar.gz", "yanked": false}], "1.0b5": [{"comment_text": "", "digests": {"md5": "e7a27a8275bb88759bea178a6df11ba2", "sha256": "241ea6d588e3112d3d5bd92cf488368eb3f1629c5839c0d7c9648d543baa35a3"}, "downloads": -1, "filename": "redisca-1.0b5.tar.gz", "has_sig": false, "md5_digest": "e7a27a8275bb88759bea178a6df11ba2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9088, "upload_time": "2013-08-21T15:46:11", "upload_time_iso_8601": "2013-08-21T15:46:11.046138Z", "url": "https://files.pythonhosted.org/packages/8f/ec/4c9aa90d22d516106701e2687fd3cdbfaf85b8f182a9bb7078e349b0ef07/redisca-1.0b5.tar.gz", "yanked": false}], "1.0b6": [{"comment_text": "", "digests": {"md5": "6f54cfbe6eacad02331a79c45059e19e", "sha256": "50e627d375f1a65b0a2db163407816ce8f64acadea2d0ecc77c496c7fa4c9345"}, "downloads": -1, "filename": "redisca-1.0b6.tar.gz", "has_sig": false, "md5_digest": "6f54cfbe6eacad02331a79c45059e19e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9900, "upload_time": "2013-10-31T09:54:38", "upload_time_iso_8601": "2013-10-31T09:54:38.996218Z", "url": "https://files.pythonhosted.org/packages/11/c0/ddd720269f267e4d22015ce73743248bef9e4ca79a4e2b4009004815e131/redisca-1.0b6.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "b3316b7329eb3fc5f721df425161d094", "sha256": "c5a03c262a6c0ade2b55f1cc80d208793e89fc04fa2325184663e82c25fb5bef"}, "downloads": -1, "filename": "redisca-1.1.tar.gz", "has_sig": false, "md5_digest": "b3316b7329eb3fc5f721df425161d094", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10109, "upload_time": "2013-12-13T15:42:17", "upload_time_iso_8601": "2013-12-13T15:42:17.109670Z", "url": "https://files.pythonhosted.org/packages/76/d6/438dc4426795ffa626794d5db9c4cbf6a43697e0649fb46a3443e2391748/redisca-1.1.tar.gz", "yanked": false}], "1.2": [{"comment_text": "", "digests": {"md5": "9dba3bfa90ec1cc35a972514900bf2f1", "sha256": "92981eabf52c758a75fa46ae7a1d6b0912a75f7825266e9c2351864e270467de"}, "downloads": -1, "filename": "redisca-1.2.tar.gz", "has_sig": false, "md5_digest": "9dba3bfa90ec1cc35a972514900bf2f1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10723, "upload_time": "2014-02-07T12:09:01", "upload_time_iso_8601": "2014-02-07T12:09:01.962126Z", "url": "https://files.pythonhosted.org/packages/69/8d/8996c4ed8540e746891163b68302082d68f70ec1444ba1b9e7deea39fee6/redisca-1.2.tar.gz", "yanked": false}], "1.3": [{"comment_text": "", "digests": {"md5": "0874540a0021ad0ede5e3afb63c0704b", "sha256": "ed34d642a70707aa96a52fbfe150eb9aef544b4ddcd78c9113ff92059513691d"}, "downloads": -1, "filename": "redisca-1.3.tar.gz", "has_sig": false, "md5_digest": "0874540a0021ad0ede5e3afb63c0704b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10783, "upload_time": "2014-03-20T11:27:29", "upload_time_iso_8601": "2014-03-20T11:27:29.353830Z", "url": "https://files.pythonhosted.org/packages/e9/7d/cd18f893770d80a52d1b59abe035b56a657e5521c7ffae4aeab50a75ffb9/redisca-1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0874540a0021ad0ede5e3afb63c0704b", "sha256": "ed34d642a70707aa96a52fbfe150eb9aef544b4ddcd78c9113ff92059513691d"}, "downloads": -1, "filename": "redisca-1.3.tar.gz", "has_sig": false, "md5_digest": "0874540a0021ad0ede5e3afb63c0704b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10783, "upload_time": "2014-03-20T11:27:29", "upload_time_iso_8601": "2014-03-20T11:27:29.353830Z", "url": "https://files.pythonhosted.org/packages/e9/7d/cd18f893770d80a52d1b59abe035b56a657e5521c7ffae4aeab50a75ffb9/redisca-1.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:05:53 2020"}