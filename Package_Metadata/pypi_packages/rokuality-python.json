{"info": {"author": "rokualitydevs@rokuality.com", "author_email": "rokualitydevs@rokuality.com", "bugtrack_url": null, "classifiers": [], "description": "# Rokuality Python - End to End Automation for Roku, XBox, Playstation, Cable SetTop Boxes, and More!\n\nThe Rokuality platform allows you to distribute Roku, XBox, PS4, and Cable SetTop Box end to end tests across multiple devices on your network. The project goal is to provide a no cost/low cost open source solution for various video streaming platforms that otherwise don't offer an easily automatable solution! Clone and start the [Rokuality Server](https://github.com/rokuality/rokuality-server), and start writing tests!\n\n### Your Roku tests in the cloud!\n\nAccess the [Rokuality Device Cloud](https://www.rokuality.com/) to run your Roku tests in a CI/CD fashion from anywhere in the world! Get access to all the popular Roku streaming devices for both automated and live device test sessions on the world's first Roku Webdriver device cloud. Your [device portal](https://www.rokuality.com/device-portal-and-site-services) will allow you to review your test history, manage your test teams, review run results, and more! Our [detailed documentation](https://www.rokuality.com/roku-automation) will get you and your team up and running quickly. Start a [free trial](https://www.rokuality.com/plans-pricing) today and get started!\n\n### Getting started: Get the Server\nClone/Download and start the [Rokuality Server](https://github.com/rokuality/rokuality-server) which acts as a lightweight web server proxy for your test traffic. The server does all the 'heavy lifting' on the backend.\n\n### Getting started: Add the bindings to your Project\nTo use Rokuality in your tests or application, install the `rokuality-python` dependency:\n```xml\n    pip install rokuality-python\n```\n\n### Getting started: Roku\nSee the [Getting Started: Roku](https://github.com/rokuality/rokuality-server) section for details about preparing your Roku device for test. The Rokuality framework is one of the first projects to provide support for the [Roku WebDriver API](https://github.com/rokudev/automated-channel-testing).\n\n### Getting started: XBox\nSee the [Getting Started: XBox](https://github.com/rokuality/rokuality-server) section for details about preparing your XBox device for test.\n\n### Getting started: HDMI Connected Devices (Playstation, Cable SetTopBox, AndroidTV, AppleTV, and More)\nSee the [Getting Started: HDMI Connected Devices (Playstation, Cable SetTopBox, AndroidTV, AppleTV, and More](https://github.com/rokuality/rokuality-server) section for details about preparing your Cable Settop Box, Playstation, AndroidTV, or AppleTV device for test.\n\n### The Basics:\nThe Rokuality bindings operate via Image Based Object Recognition and OCR techniques to identify 'elements' on the device screen and return them to your test scripts as Objects for verification and interaction. The project is modeled after the Selenium/Appium structure so if you've used those toolsets for browsers/mobile devices previously - this framework will look and feel very comfortable to you. See the [Roku example tests](https://github.com/rokuality/rokuality-python/blob/master/tests/test_roku.py) or [XBox example tests](https://github.com/rokuality/rokuality-python/blob/master/tests/test_xbox.py) or [HDMI example tests](https://github.com/rokuality/rokuality-python/blob/master/tests/test_playstation.py) for a full list of samples.\n\n#### Declare a driver to connect to the server:\n```python\n    '''Roku'''\n    driver = RokuDriver(\"http://yourserverurl:yourrunningserverport\", self.capabilities)\n\n    '''XBox'''\n    driver = XBoxDriver(\"http://yourserverurl:yourrunningserverport\", self.capabilities)\n\n    '''HDMI device (playstation, cable settop box, androidtv, appletv, etc)'''\n    driver = HDMIDriver(\"http://yourserverurl:yourrunningserverport\", self.capabilities)\n```\nThis will take care of installing/launching your device app package (if Roku or XBox), ensure the device is available and ready for test, and start a dedicated session on your device as indicated via your DeviceCapabilities object. See [Device Capabilities](#device-capabilities-explained) for an explanation of what capabilities are available for your driver startup.\n\n#### Finding elements:\nThere are two primary ways of finding elements on your device that are available for all device types:\n\n1) TEXT\n```python\n    driver.finder().find_element(By().text(\"text to find on screen\"))\n```\nIn this example, the Rokuality server will capture the image from your device screen, and then perform an evaluation against the found text within that image and match it against your locator. If your locator text is NOT found, then a NoSuchElementException will be thrown. Tesseract is the default OCR engine used to perform textual evaluations. But you can optionally indicate that you want to use GoogleVision's OCR engine which requires you have a valid VisionUI service account setup with Google. See [Using Google Vision](#using-google-vision-ocr) for those details. But for most use cases, using the default tesseract engine is enough.\n\n2) IMAGE - local image snippet file\n```python\n    driver.finder().find_element(By().image(\"/path/to/your/image/snippet.png\"))\n```\nIn this example, you can provide the path to an image snippet that you expect to be contained within your device screen. The server will then ship this image snippet to itself, capture the device screen, and evaluate if it exists on the device.\n\nOR\n\n3) IMAGE - url to to an image snippet file\n```python\n    driver.finder().find_element(By().image(\"http://urltoyourimagesnippet.png\"))\n```\nIn this example, you can provide a url to your locator image snippet and the server will download that image and evaluate it against the device screen. Useful for those more dynamic testing situations where you may want to query your application feeds to get the dynamic app images for evaluation, or if you want to keep your image based locators in a remote repository.\n\n#### Finding elements with Roku WebDriver:\nOptionally when testing on Roku you can provide the following native based locator types:\n```oython\n    element_by_text = roku_driver.finder().find_element(RokuBy().text('text to search for'))\n    element_by_tag = roku_driver.finder().find_element(RokuBy().tag('tag'))\n    element_by_attribute = roku_driver.finder().find_element(RokuBy().attribute('attribute', 'attribute value'))\n```\n\n#### Finding multi match elements:\nYou can search for multiple element matches from a singular locator and return the results of match to an Element collection as follows:\n```python\n    elements = driver.finder().find_elements(By().text(\"locator that will return multiple matches\"))\n```\nWhen using `find_elements`, a NoSuchElementException will NOT be thrown to the user in the event that an element is not found. In that event the collection will be empty. So this method can be used to determine if an element is present or not:\n\n```python\n    elements = driver.finder().find_elements(By().text(\"locator\"))\n    if (len(elements) == 0):\n            print(\"element is not present\")\n```\n\n#### Elements as objects:\nA found element can be stored to an object and additional details about it can be retrieved:\n```python\n    element = self.roku_driver.finder().find_element(By().text(\"Hello World!\"))\n    print(\"element x: \" + str(element.get_x()))\n    print(\"element y: \" + str(element.get_y()))\n    print(\"element width: \" + str(element.get_width()))\n    print(\"element height: \" + str(element.get_height()))\n    print(\"element confidence: \" + str(element.get_confidence()))\n    print(\"element text: \" + element.get_text())\n```\nThe element details include the elements location and size details as found on the device, the text contained within the match (relevent if an image snippet locator was provided), and the confidence score of the match with higher values indicating the confidence in your find:\n```xml\n    368\n    319\n    45\n    19\n    91.33713\n    Hello World!\n```\n\n#### Sending remote control commands to the device - Roku and XBox:\nTo send remote button presses to the device you can do the following:\n```python\n    '''roku'''\n    driver.remote().press_button(RokuButton.SELECT)\n\n    '''xbox'''\n    driver.remote().press_button(XBoxButton.A)\n```\nAll remote commands are available. See [roku remote command](https://github.com/rokuality/rokuality-python/blob/master/src/enums/roku_button.py) or [xbox remote command](https://github.com/rokuality/rokuality-python/blob/master/src/enums/xbox_button.py) for all available remote buttons. Also you can send literal characters to the device if you need to interact with a Roku or XBox search selector (Note the virtual keyboard must be visible on the screen at the time this call is made):\n```python\n    driver.remote().send_keys(\"typing out hello world on a search screen\")\n```\n\nNote that by default, the time delay between multiple remote control commands is 0 milliseconds, meaning multiple remote control commands will happen as quickly as possible. This can in some cases lead to test flake due to multiple commands happening back to back too quickly. If this is happening, you can add a delay in between remote control button presses as follows:\n```python\n    \"\"\"\n    sets a delay between remote control button presses to 2 seconds. this will last for the duration of the session or until a new value is set. If not set, defualts to 0\n    \"\"\"\n    driver.options().set_remote_interact_delay(2000)\n```\n\n#### Sending remote control commands to the device - HDMI Devices (Playstation, Cable SetTop, AndroidTV, AppleTV, and more):\nTo send remote button presses to the HDMI/IR device you can do the following:\n```java\n    '''get a list of available remote commands for your device'''\n    button_options = driver.remote().get_button_options()\n    print(button_options)\n\n    '''send the desired button press to the device'''\n    driver.remote().press_button(\"DirectionUp\")\n    driver.remote().press_button(\"Guide\")\n    driver.remote().press_button(\"Select\")\n```\n\n#### Getting screen artifacts:\nVarious methods exist for getting screen artifacts such as the screen image, sub screen image, screen recording during test, and screen text:\n\n```python\n    '''get screen size'''\n    driver.screen().get_screen_size()\n\n    '''get screen image'''\n    driver.screen().get_image()\n\n    '''get the screen sub image from starting x,y with width/height'''\n    driver.screen().get_image_sub_screen(1, 1, 300, 300)\n\n    \"\"\"get the screen recording of the test session from start to now\n       note that the screen recordings are created by stitching the collected device screenshots\n       together and video quality won't be the best\"\"\"\n    driver.screen().get_recording()\n\n    '''get the xml page source of the channel. useful for debugging Roku Webdriver locators'''\n    xml_source = driver.screen().get_page_source()\n```\n\n#### Getting screen text:\nScreen text of the device is returned as a collection of ScreenText objects as found on the screen. Each ScreenText item will be an object containing details about the found device text such as location, height, and width of the word as found on the device screen:\n```python\n    screen_texts = roku_driver.screen().get_text()\n    for screen_text in screen_texts:\n        x = screen_text.get_x()\n        y = screen_text.get_y()\n        width = screen_text.get_width()\n        height = screen_text.get_height()\n        confidence = screen_text.get_confidence()\n```\n\nAlternatively you can get the entire device screen as a full string via `driver.screen().get_text_as_string()`\n\n#### Getting information about the media player (ROKU ONLY):\nFor Roku devices, it's possible to get details about your media player in flight through the Roku WebDriver rest api which can be accessed in your test code as follows:\n```python\n    '''gets information about the media in flight including state, bitrate, encoding information, and much much more!'''\n    media_player_info = self.roku_driver.info().get_media_player_info()\n    assert media_player_info.is_error() == False\n    assert media_player_info.is_live() == False\n    assert media_player_info.get_state() == 'none'\n```\n\n#### Getting performance data from your application during test (ROKU ONLY):\nRoku provides a way to measure your app's cpu and memory utilization through their brightscript profiler. Our platform allows you to access the brightscript performance profile during the course of your test. To utilize this functionality you must provide the 'EnablePerformanceProfiling' capability on test session start and set the value to true. This will take your provided sideloadable .zip package, update the manifest with the necessary values for profile capturing, and then recompile for automation on your device.\n\n```python\n    self.capabilities.add_capability('EnablePerformanceProfiling', True)\n    self.roku_driver = RokuDriver(self.SERVER_URL, self.capabilities)\n\n    performance_profile = self.roku_driver.info().get_performance_profile()\n    performance_profile_mb = os.path.getsize(performance_profile) / 1000000\n    print(\"Performance profile MB size: \" + str(performance_profile_mb))\n```\n\nOnce you've retrieved your .bsprof file during test - this file can be uploaded to [Roku's profiler visualization tool](http://devtools.web.roku.com/profiler/viewer/) to see the performance data in a friendly user format.\n\n#### Getting debug log info (ROKU ONLY):\nFor Roku devices, it's possible to get the debug logs as follows:\n```python\n    log_content = self.driver.info().get_debug_logs()\n```\n\n#### Device Capabilities explained:\nVarious capabilities and values can be provided and passed to your driver instance at startup. Some of them are required and others are optional. The following are the minimum capabilities **required** to start a driver session.\n\n#### Roku\n```python\n    '''init a capability object'''\n    capabilities = DeviceCapabilities()\n\n    '''indicates you want a Roku test'''\n    capabilities.add_capability(\"Platform\", \"Roku\")\n\n    '''set the path or url to your sideloadable .zip'''\n    capabilities.add_capability(\"AppPackage\", \"path/or/url/to/your/apppackage\")\n\n    '''set your roku ip address'''\n    capabilities.add_capability(\"DeviceIPAddress\", \"yourdeviceipaddress\")\n\n    '''set your device username and password'''\n    capabilities.add_capability(\"DeviceUsername\", \"yourdeviceusername\")\n    capabilities.add_capability(\"DevicePassword\", \"yourdevicepassword\")\n\n    '''set your OCR module - options are \"Tesseract\" or \"GoogleVision\"'''\n    capabilities.add_capability(\"OCRType\", \"Tesseract\")\n\n    '''pass the capabilities and start your driver'''\n    driver = RokuDriver(\"http://yourserverurl:yourrunningserverport\", capabilities)\n```\n\n#### Xbox\n```python\n    '''init a capability object'''\n    capabilities = DeviceCapabilities()\n\n    '''indicates you want a XBox test'''\n    capabilities.add_capability(\"Platform\", \"XBox\")\n\n    '''set the path or url to your .appxbundle package to install'''\n    capabilities.add_capability(\"AppPackage\", \"path/or/url/to/your/apppackage\")\n\n    '''the app id - will be the friendly app name of your appxbundle'''\n    capabilities.add_capability(\"App\", \"appid\")\n\n    '''set your xbox ip address'''\n    capabilities.add_capability(\"DeviceIPAddress\", \"yourdeviceipaddress\")\n\n    '''set your console xbox live username and password for the logged in user'''\n    capabilities.add_capability(\"DeviceUsername\", \"your_xbox_live_username\")\n    capabilities.add_capability(\"DevicePassword\", \"your_xbox_live_password\")\n\n    \"\"\"\n    set your xbox live console id\n    can be found from your xbox dev settings page at https://your_xbox_device_ip:11443/#Settings\n    \"\"\"\n    capabilities.add_capability(\"DeviceID\", \"your_xbox_live_console_id\")\n\n    '''set your OCR module - options are \"Tesseract\" or \"GoogleVision\"'''\n    capabilities.add_capability(\"OCRType\", \"Tesseract\")\n\n    '''pass the capabilities and start your driver'''\n    driver = XBoxDriver(\"http://yourserverurl:yourrunningserverport\", capabilities)\n```\n\n#### HDMI Devices (Playstation, Cable SetTop, AndroidTV, AppleTV, and more)\n```python\n    '''init a capability object'''\n    capabilities = DeviceCapabilities()\n\n    '''indicates you want an HDMI test'''\n    capabilities.add_capability(\"Platform\", \"HDMI\")\n\n    '''set your logitech harmony info. see the why harmony and harmony setups section of the main server page for details'''\n    capabilities.add_capability(\"HomeHubIPAddress\", \"yourharmonyipaddress\")\n    capabilities.add_capability(\"DeviceName\", \"devicenameassavedinharmony\")\n\n    \"\"\"the video input and audio input names of your attached hdmi capture card. They can be found by running\n    the following commands:\n    MAC: ~/Rokuality/dependencies/ffmpeg_v4.1 -f avfoundation -list_devices true -i \"\"\n    WINDOWS: ~\\Rokuality\\dependencies\\ffmpeg_win_v4.1\\bin\\ffmpeg.exe -list_devices true -f dshow -i dummy\n    \"\"\"\n    capabilities.add_capability(\"VideoCaptureInput\", \"video input name\")\n    capabilities.add_capability(\"AudioCaptureInput\", \"audio input name\")\n\n    '''set your OCR module - options are \"Tesseract\" or \"GoogleVision\"'''\n    capabilities.add_capability(\"OCRType\", \"Tesseract\")\n\n    '''pass the capabilities and start your driver'''\n    driver = HDMIDriver(\"http://yourserverurl:yourrunningserverport\", capabilities)\n```\n\n| Capability  | Description | Required Or Optional | Notes |\n| ------------- | ------------- | ------------- | ------------- |\n| Platform | Indicates the target platform for the tests.  | Required | String - Options are 'Roku, 'XBox', or 'HDMI' |\n| AppPackage | The sideloadable zip to be installed (Roku), or the .appxbundle (XBox). Must be a valid file path OR a valid url.  | Required for Roku and XBox - IF the 'App' capability is not provided. Ignored for HDMI devices | String |\n| App | The friendly id of your app for Roku and XBox. For Roku this cap is optional. If you provide this cap and ommit the 'AppPackage' cap then the device will attempt to launch an already installed channel - Note that this can be an installed production channel id which you can retrieve from your device via `curl http://yourdeviceip:8060/query/apps`. But if you launch a production Roku channel you MUST have a connected HDMI capture card and provide the requisite `VideoCaptureInput` and `AudioCaptureInput` capabilities. For XBox this cap is always required and MUST be the app id of your installed .appxbundle - if you ommit the 'AppPackage' cap then the device will attempt to launch an already installed appxbundle matching this id. |Roku = Optional. XBox = Required. HDMI = Ignored | String |\n| DeviceIPAddress | The ip address of your Roku or XBox. Ignored for HDMI.  | Required for Roku or XBox | String - Your device MUST be reachable from the machine running the Rokuality server. |\n| DeviceUsername | Roku = The dev console username created when you enabled developer mode on your device. XBox = The XBox live username signed into the XBox console.  | Required - Roku and XBox | String |\n| DevicePassword | Roku = The dev console password created when you enabled developer mode on your device. XBox = The XBox live password signed into the XBox console.   | Required - Roku and XBox | String |\n| DeviceID | XBox - the XBox live console id. Ignored for Roku and HDMI.   | Required - XBox | String |\n| ImageMatchSimilarity | An optional image match similarity default used during Image locator evaluations. A lower value will allow for greater tolerance of image disimilarities between the image locator and the screen, BUT will also increase the possibility of a false positive.  | Optional | Double. Defaults to .90 |\n| ScreenSizeOverride | An optional 'WIDTHxHEIGHT' cap that all screen image captures will be resized to prior to match evaluation. Useful if you want to enforce test consistence across multiple device types and multiple developer machines or ci environments.  | Optional | String - I.e. a value of '1800x1200' will ensure that all image captures are resized to those specs before the locator evaluation happens no matter what the actual device screen size is.  |\n| OCRType | The OCR type - Options are 'Tesseract' OR 'GoogleVision'. In most cases Tesseract is more than enough but if you find that your textual evalutions are lacking reliability you can provide 'GoogleVision' as a more powerful alternative. BUT if the capability is set to 'GoogleVision' you MUST have a valid Google Vision account setup and provide the 'GoogleCredentials' capability with a valid file path to the oath2 .json file with valid credentials for the Google Vision service.  | Required | String \n| GoogleCredentials | The path to a valid .json Google Auth key service file. | Optional but Required if the 'OCRType' capability is set to 'GoogleVision' | The .json service key must exist on the machine triggering the tests. See [Using Google Vision](#using-google-vision-ocr) for additional details.  |\n| HomeHubIPAddress | The ip address of your logitech harmony hub. | Required for HDMI. Ignored for Roku and XBox | String - See the [why harmony](https://github.com/rokuality/rokuality-server) and [configuring your harmony](https://github.com/rokuality/rokuality-server) sections of the server page for details. |\n| DeviceName | The name of your device as saved in your Harmony hub i.e. 'MyPlaystation4'. | Required for HDMI. Ignored for Roku and XBox | String |\n| VideoCaptureInput | The name of your video card capture video input if running an HDMI connected test. Will vary by the type of hdmi capture card. | Required for HDMI device types (Playstation, Cable SetTop Box, AndroidTV, AppleTV, etc. Optional for Roku if you wish to test a production channel. Ignored for XBox | Can be found by running a terminal command. For MAC: `~/Rokuality/dependencies/ffmpeg_v4.1 -f avfoundation -list_devices true -i \"\"` and for Windows: `~\\Rokuality\\dependencies\\ffmpeg_win_v4.1\\bin\\ffmpeg.exe -list_devices true -f dshow -i dummy` |\n| AudioCaptureInput | The name of your video card capture audio input if running an HDMI connected test. Will vary by the type of hdmi capture card. | Required for HDMI device types (Playstation, Cable SetTop Box, AndroidTV, AppleTV, etc. Optional for Roku if you wish to test a production channel. Ignored for XBox | Can be found by running a terminal command. For MAC: `~/Rokuality/dependencies/ffmpeg_v4.1 -f avfoundation -list_devices true -i \"\"` and for Windows: `~\\Rokuality\\dependencies\\ffmpeg_win_v4.1\\bin\\ffmpeg.exe -list_devices true -f dshow -i dummy` |\n| MirrorScreen | If provided with a widthxheight value, then a window will be launched on the user's desktop showing the test activity in real time for the duration of the test session. Useful for debugging tests on remote devices.  | Optional | String - 'widthxheight' format. i.e. '1200x800' will launch a screen mirror with width 1200, and height 800. |\n| EnablePerformanceProfiling | Roku only. If provided your sideloadable .zip package will be updated for performance profiling. Then during the course of the execution you can retrieve the .bsprof file with CPU and memory utilization data from your channel.  | Optional | Boolean - true to allow for performance capturing. Defaults to false. |\n\n#### Element Timeouts and Polling:\nThere are two main options when it comes to element timeouts and polling\n\nTimeouts - By default the element timeout is set to 0 milliseconds, meaning if the driver fails to find an element immediately, it will throw a NoSuchElement exception. But a better practice is to set a implicit wait timeout so the driver will poll for a duration, trying to find the element before it fails and throws the NoSuchElementException:\n\n```python\n    '''will fail immediately'''\n    driver.finder().find_element(By().text(\"no such text\"))\n```\nvs\n```python\n    '''will fail after 5 seconds'''\n    driver.options().set_element_timeout(5000)\n    driver.finder().find_element(By().text(\"no such text\"))\n```\nIt is generally recommended to set respective timeouts to reduce test flake, but setting the values too high can increase test duration.\n\nAdditionally you can set the interval of how often the element search polling will happen. In this example, the same timeout is applied but the element polling will happen every second. If the polling interval is ommited the default is 250 milliseconds.\n```python\n    '''will fail after 5 seconds polling every second'''\n    driver.options().set_element_timeout(5000)\n    driver.options().set_element_poll_interval(1000)\n    driver.finder().find_element(By().text(\"no such text\"))\n```\n\n#### Using Google Vision OCR:\nAs mentioned previously, Tesseract is the default OCR engine used when you provide a text based locator. And the Rokuality server ships the relevant trained data files so the more you use it during test, the better it will get at finding the provided text based locators. But if you find that's not as reliable as needed for your testing purposes you can use Google Vision as an alternative provided you have a valid [Google Vision](https://cloud.google.com/vision/docs/before-you-begin) account setup. You must also set the path to your .json service file containing your service key in your DeviceCapabilities prior to driver start.\n\n```python\n    capabilities = DeviceCapabilities()\n    capabilities.add_capability(\"OCRType\", \"GoogleVision\")\n    capabilities.add_capability(\"GoogleCredentials\", \"/path/to/your/vision/authkey.json\")\n```\n\n#### Failing to find elements? :\nImage Based Locators `By().image(\"pathorurltoyoourimagesnippet.png\")`\n1. Make sure your locator image snippet is in a valid image format. Most tests use .png format so for best results please use locators of this type.\n2. Make sure that your image snippets are in good quality and you are doing an apples to apples comparison of the image snippet you wish to find within the screen image. Some image snipping tools are better than others, so if capturing static image snippets for later locator use be wary of the tools you're using. Alternatively, you can get a subscreen section from the device during test and save it as a static locator for later use.\n`locator_to_use_later = driver.screen().get_image_sub_screen(40, 80, 160, 220)`\n3. You can optionally set the \"ImageMatchSimilarity\" DeviceCapability at driver startup which will set a tolerance for image comparisons. Lower values will mean a greater likelihood of getting a match, but too low of a value will introduce a false positive.\n`capabilities.add_capability(\"ImageMatchSimilarity\", .85)`\n\nText Based Locators `By().text(\"text to search for\")`\n1. Check that your string isn't too complicated, i.e. a locator of `By().text(\"hello world\")` is much more likely to be found than a locator of `By().text(\"he!!O W@rLd!#!\")`. Also, single world locators are better than multiple world locators but we continue to work on the server back end to improve the reliability.\n2. As mentioned previously, Tesseract is the default OCR engine but if you're finding that the results aren't as reliable as you'd like, consider using [Google Vision](#using-google-vision-ocr) as an alternative.\n3. You can access the entire decoded device screen text by `driver.screen().get_text_as_string()`. If your locator is present in the string but not found during test, please log a bug on the [issues](https://github.com/rokuality/rokuality-java/issues) page and we'll investigate.\n4. By default the OCR evaluations happen against the entire device screen but sometimes it's better to narrow the scope of the find to a smaller region of the screen to get better results. This can be done with `driver.finder().find_element_sub_screen(by, 100, 500, 300, 200)` which will limit the scope of the find to that subset of the screen and likely return better results.\n\n#### Server timeouts and orphaned sessions:\nAt the end of every driver session, you should close the driver and cleanup all session data by calling the stop method:\n```python\n    '''stop the driver and clean up all resources'''\n    driver.stop()\n```\nBut if you don't a safety exists to eventually clean up those assets. The server session will listen for new commands and will timeout if no commands for the session have been received for a specified duration. The default command timeout is set to 60 seconds - meaning if a session is started and no commands are sent to it for 60 seconds, then the session will automatically be terminated and released. You can increase/decrease this time by setting the 'commandtimeout' option when you launch the server. See the [Server Command Options](https://github.com/rokuality/rokuality-server) section of the server for details.\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/rokuality/rokuality-python", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "rokuality-python", "package_url": "https://pypi.org/project/rokuality-python/", "platform": "", "project_url": "https://pypi.org/project/rokuality-python/", "project_urls": {"Homepage": "https://github.com/rokuality/rokuality-python"}, "release_url": "https://pypi.org/project/rokuality-python/1.2.5/", "requires_dist": ["requests", "pytest"], "requires_python": ">=3.6.5", "summary": "Python bindings for the rokuality platform. End to end automation for Roku, Xbox, and more!", "version": "1.2.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Rokuality Python - End to End Automation for Roku, XBox, Playstation, Cable SetTop Boxes, and More!</h1>\n<p>The Rokuality platform allows you to distribute Roku, XBox, PS4, and Cable SetTop Box end to end tests across multiple devices on your network. The project goal is to provide a no cost/low cost open source solution for various video streaming platforms that otherwise don't offer an easily automatable solution! Clone and start the <a href=\"https://github.com/rokuality/rokuality-server\" rel=\"nofollow\">Rokuality Server</a>, and start writing tests!</p>\n<h3>Your Roku tests in the cloud!</h3>\n<p>Access the <a href=\"https://www.rokuality.com/\" rel=\"nofollow\">Rokuality Device Cloud</a> to run your Roku tests in a CI/CD fashion from anywhere in the world! Get access to all the popular Roku streaming devices for both automated and live device test sessions on the world's first Roku Webdriver device cloud. Your <a href=\"https://www.rokuality.com/device-portal-and-site-services\" rel=\"nofollow\">device portal</a> will allow you to review your test history, manage your test teams, review run results, and more! Our <a href=\"https://www.rokuality.com/roku-automation\" rel=\"nofollow\">detailed documentation</a> will get you and your team up and running quickly. Start a <a href=\"https://www.rokuality.com/plans-pricing\" rel=\"nofollow\">free trial</a> today and get started!</p>\n<h3>Getting started: Get the Server</h3>\n<p>Clone/Download and start the <a href=\"https://github.com/rokuality/rokuality-server\" rel=\"nofollow\">Rokuality Server</a> which acts as a lightweight web server proxy for your test traffic. The server does all the 'heavy lifting' on the backend.</p>\n<h3>Getting started: Add the bindings to your Project</h3>\n<p>To use Rokuality in your tests or application, install the <code>rokuality-python</code> dependency:</p>\n<pre>    pip install rokuality-python\n</pre>\n<h3>Getting started: Roku</h3>\n<p>See the <a href=\"https://github.com/rokuality/rokuality-server\" rel=\"nofollow\">Getting Started: Roku</a> section for details about preparing your Roku device for test. The Rokuality framework is one of the first projects to provide support for the <a href=\"https://github.com/rokudev/automated-channel-testing\" rel=\"nofollow\">Roku WebDriver API</a>.</p>\n<h3>Getting started: XBox</h3>\n<p>See the <a href=\"https://github.com/rokuality/rokuality-server\" rel=\"nofollow\">Getting Started: XBox</a> section for details about preparing your XBox device for test.</p>\n<h3>Getting started: HDMI Connected Devices (Playstation, Cable SetTopBox, AndroidTV, AppleTV, and More)</h3>\n<p>See the <a href=\"https://github.com/rokuality/rokuality-server\" rel=\"nofollow\">Getting Started: HDMI Connected Devices (Playstation, Cable SetTopBox, AndroidTV, AppleTV, and More</a> section for details about preparing your Cable Settop Box, Playstation, AndroidTV, or AppleTV device for test.</p>\n<h3>The Basics:</h3>\n<p>The Rokuality bindings operate via Image Based Object Recognition and OCR techniques to identify 'elements' on the device screen and return them to your test scripts as Objects for verification and interaction. The project is modeled after the Selenium/Appium structure so if you've used those toolsets for browsers/mobile devices previously - this framework will look and feel very comfortable to you. See the <a href=\"https://github.com/rokuality/rokuality-python/blob/master/tests/test_roku.py\" rel=\"nofollow\">Roku example tests</a> or <a href=\"https://github.com/rokuality/rokuality-python/blob/master/tests/test_xbox.py\" rel=\"nofollow\">XBox example tests</a> or <a href=\"https://github.com/rokuality/rokuality-python/blob/master/tests/test_playstation.py\" rel=\"nofollow\">HDMI example tests</a> for a full list of samples.</p>\n<h4>Declare a driver to connect to the server:</h4>\n<pre>    <span class=\"sd\">'''Roku'''</span>\n    <span class=\"n\">driver</span> <span class=\"o\">=</span> <span class=\"n\">RokuDriver</span><span class=\"p\">(</span><span class=\"s2\">\"http://yourserverurl:yourrunningserverport\"</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">capabilities</span><span class=\"p\">)</span>\n\n    <span class=\"sd\">'''XBox'''</span>\n    <span class=\"n\">driver</span> <span class=\"o\">=</span> <span class=\"n\">XBoxDriver</span><span class=\"p\">(</span><span class=\"s2\">\"http://yourserverurl:yourrunningserverport\"</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">capabilities</span><span class=\"p\">)</span>\n\n    <span class=\"sd\">'''HDMI device (playstation, cable settop box, androidtv, appletv, etc)'''</span>\n    <span class=\"n\">driver</span> <span class=\"o\">=</span> <span class=\"n\">HDMIDriver</span><span class=\"p\">(</span><span class=\"s2\">\"http://yourserverurl:yourrunningserverport\"</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">capabilities</span><span class=\"p\">)</span>\n</pre>\n<p>This will take care of installing/launching your device app package (if Roku or XBox), ensure the device is available and ready for test, and start a dedicated session on your device as indicated via your DeviceCapabilities object. See <a href=\"#device-capabilities-explained\" rel=\"nofollow\">Device Capabilities</a> for an explanation of what capabilities are available for your driver startup.</p>\n<h4>Finding elements:</h4>\n<p>There are two primary ways of finding elements on your device that are available for all device types:</p>\n<ol>\n<li>TEXT</li>\n</ol>\n<pre>    <span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">finder</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">find_element</span><span class=\"p\">(</span><span class=\"n\">By</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">(</span><span class=\"s2\">\"text to find on screen\"</span><span class=\"p\">))</span>\n</pre>\n<p>In this example, the Rokuality server will capture the image from your device screen, and then perform an evaluation against the found text within that image and match it against your locator. If your locator text is NOT found, then a NoSuchElementException will be thrown. Tesseract is the default OCR engine used to perform textual evaluations. But you can optionally indicate that you want to use GoogleVision's OCR engine which requires you have a valid VisionUI service account setup with Google. See <a href=\"#using-google-vision-ocr\" rel=\"nofollow\">Using Google Vision</a> for those details. But for most use cases, using the default tesseract engine is enough.</p>\n<ol>\n<li>IMAGE - local image snippet file</li>\n</ol>\n<pre>    <span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">finder</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">find_element</span><span class=\"p\">(</span><span class=\"n\">By</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">image</span><span class=\"p\">(</span><span class=\"s2\">\"/path/to/your/image/snippet.png\"</span><span class=\"p\">))</span>\n</pre>\n<p>In this example, you can provide the path to an image snippet that you expect to be contained within your device screen. The server will then ship this image snippet to itself, capture the device screen, and evaluate if it exists on the device.</p>\n<p>OR</p>\n<ol>\n<li>IMAGE - url to to an image snippet file</li>\n</ol>\n<pre>    <span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">finder</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">find_element</span><span class=\"p\">(</span><span class=\"n\">By</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">image</span><span class=\"p\">(</span><span class=\"s2\">\"http://urltoyourimagesnippet.png\"</span><span class=\"p\">))</span>\n</pre>\n<p>In this example, you can provide a url to your locator image snippet and the server will download that image and evaluate it against the device screen. Useful for those more dynamic testing situations where you may want to query your application feeds to get the dynamic app images for evaluation, or if you want to keep your image based locators in a remote repository.</p>\n<h4>Finding elements with Roku WebDriver:</h4>\n<p>Optionally when testing on Roku you can provide the following native based locator types:</p>\n<pre>    element_by_text = roku_driver.finder().find_element(RokuBy().text('text to search for'))\n    element_by_tag = roku_driver.finder().find_element(RokuBy().tag('tag'))\n    element_by_attribute = roku_driver.finder().find_element(RokuBy().attribute('attribute', 'attribute value'))\n</pre>\n<h4>Finding multi match elements:</h4>\n<p>You can search for multiple element matches from a singular locator and return the results of match to an Element collection as follows:</p>\n<pre>    <span class=\"n\">elements</span> <span class=\"o\">=</span> <span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">finder</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">find_elements</span><span class=\"p\">(</span><span class=\"n\">By</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">(</span><span class=\"s2\">\"locator that will return multiple matches\"</span><span class=\"p\">))</span>\n</pre>\n<p>When using <code>find_elements</code>, a NoSuchElementException will NOT be thrown to the user in the event that an element is not found. In that event the collection will be empty. So this method can be used to determine if an element is present or not:</p>\n<pre>    <span class=\"n\">elements</span> <span class=\"o\">=</span> <span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">finder</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">find_elements</span><span class=\"p\">(</span><span class=\"n\">By</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">(</span><span class=\"s2\">\"locator\"</span><span class=\"p\">))</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">elements</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">):</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"element is not present\"</span><span class=\"p\">)</span>\n</pre>\n<h4>Elements as objects:</h4>\n<p>A found element can be stored to an object and additional details about it can be retrieved:</p>\n<pre>    <span class=\"n\">element</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">roku_driver</span><span class=\"o\">.</span><span class=\"n\">finder</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">find_element</span><span class=\"p\">(</span><span class=\"n\">By</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">(</span><span class=\"s2\">\"Hello World!\"</span><span class=\"p\">))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"element x: \"</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">element</span><span class=\"o\">.</span><span class=\"n\">get_x</span><span class=\"p\">()))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"element y: \"</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">element</span><span class=\"o\">.</span><span class=\"n\">get_y</span><span class=\"p\">()))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"element width: \"</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">element</span><span class=\"o\">.</span><span class=\"n\">get_width</span><span class=\"p\">()))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"element height: \"</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">element</span><span class=\"o\">.</span><span class=\"n\">get_height</span><span class=\"p\">()))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"element confidence: \"</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">element</span><span class=\"o\">.</span><span class=\"n\">get_confidence</span><span class=\"p\">()))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"element text: \"</span> <span class=\"o\">+</span> <span class=\"n\">element</span><span class=\"o\">.</span><span class=\"n\">get_text</span><span class=\"p\">())</span>\n</pre>\n<p>The element details include the elements location and size details as found on the device, the text contained within the match (relevent if an image snippet locator was provided), and the confidence score of the match with higher values indicating the confidence in your find:</p>\n<pre>    368\n    319\n    45\n    19\n    91.33713\n    Hello World!\n</pre>\n<h4>Sending remote control commands to the device - Roku and XBox:</h4>\n<p>To send remote button presses to the device you can do the following:</p>\n<pre>    <span class=\"sd\">'''roku'''</span>\n    <span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">remote</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">press_button</span><span class=\"p\">(</span><span class=\"n\">RokuButton</span><span class=\"o\">.</span><span class=\"n\">SELECT</span><span class=\"p\">)</span>\n\n    <span class=\"sd\">'''xbox'''</span>\n    <span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">remote</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">press_button</span><span class=\"p\">(</span><span class=\"n\">XBoxButton</span><span class=\"o\">.</span><span class=\"n\">A</span><span class=\"p\">)</span>\n</pre>\n<p>All remote commands are available. See <a href=\"https://github.com/rokuality/rokuality-python/blob/master/src/enums/roku_button.py\" rel=\"nofollow\">roku remote command</a> or <a href=\"https://github.com/rokuality/rokuality-python/blob/master/src/enums/xbox_button.py\" rel=\"nofollow\">xbox remote command</a> for all available remote buttons. Also you can send literal characters to the device if you need to interact with a Roku or XBox search selector (Note the virtual keyboard must be visible on the screen at the time this call is made):</p>\n<pre>    <span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">remote</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">send_keys</span><span class=\"p\">(</span><span class=\"s2\">\"typing out hello world on a search screen\"</span><span class=\"p\">)</span>\n</pre>\n<p>Note that by default, the time delay between multiple remote control commands is 0 milliseconds, meaning multiple remote control commands will happen as quickly as possible. This can in some cases lead to test flake due to multiple commands happening back to back too quickly. If this is happening, you can add a delay in between remote control button presses as follows:</p>\n<pre>    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    sets a delay between remote control button presses to 2 seconds. this will last for the duration of the session or until a new value is set. If not set, defualts to 0</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">set_remote_interact_delay</span><span class=\"p\">(</span><span class=\"mi\">2000</span><span class=\"p\">)</span>\n</pre>\n<h4>Sending remote control commands to the device - HDMI Devices (Playstation, Cable SetTop, AndroidTV, AppleTV, and more):</h4>\n<p>To send remote button presses to the HDMI/IR device you can do the following:</p>\n<pre>    <span class=\"sc\">'''</span><span class=\"n\">get</span> <span class=\"n\">a</span> <span class=\"n\">list</span> <span class=\"n\">of</span> <span class=\"n\">available</span> <span class=\"n\">remote</span> <span class=\"n\">commands</span> <span class=\"k\">for</span> <span class=\"n\">your</span> <span class=\"n\">device</span><span class=\"sc\">'''</span>\n    <span class=\"n\">button_options</span> <span class=\"o\">=</span> <span class=\"n\">driver</span><span class=\"p\">.</span><span class=\"na\">remote</span><span class=\"p\">().</span><span class=\"na\">get_button_options</span><span class=\"p\">()</span>\n    <span class=\"n\">print</span><span class=\"p\">(</span><span class=\"n\">button_options</span><span class=\"p\">)</span>\n\n    <span class=\"sc\">'''</span><span class=\"n\">send</span> <span class=\"n\">the</span> <span class=\"n\">desired</span> <span class=\"n\">button</span> <span class=\"n\">press</span> <span class=\"n\">to</span> <span class=\"n\">the</span> <span class=\"n\">device</span><span class=\"sc\">'''</span>\n    <span class=\"n\">driver</span><span class=\"p\">.</span><span class=\"na\">remote</span><span class=\"p\">().</span><span class=\"na\">press_button</span><span class=\"p\">(</span><span class=\"s\">\"DirectionUp\"</span><span class=\"p\">)</span>\n    <span class=\"n\">driver</span><span class=\"p\">.</span><span class=\"na\">remote</span><span class=\"p\">().</span><span class=\"na\">press_button</span><span class=\"p\">(</span><span class=\"s\">\"Guide\"</span><span class=\"p\">)</span>\n    <span class=\"n\">driver</span><span class=\"p\">.</span><span class=\"na\">remote</span><span class=\"p\">().</span><span class=\"na\">press_button</span><span class=\"p\">(</span><span class=\"s\">\"Select\"</span><span class=\"p\">)</span>\n</pre>\n<h4>Getting screen artifacts:</h4>\n<p>Various methods exist for getting screen artifacts such as the screen image, sub screen image, screen recording during test, and screen text:</p>\n<pre>    <span class=\"sd\">'''get screen size'''</span>\n    <span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">screen</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_screen_size</span><span class=\"p\">()</span>\n\n    <span class=\"sd\">'''get screen image'''</span>\n    <span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">screen</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_image</span><span class=\"p\">()</span>\n\n    <span class=\"sd\">'''get the screen sub image from starting x,y with width/height'''</span>\n    <span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">screen</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_image_sub_screen</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">)</span>\n\n    <span class=\"sd\">\"\"\"get the screen recording of the test session from start to now</span>\n<span class=\"sd\">       note that the screen recordings are created by stitching the collected device screenshots</span>\n<span class=\"sd\">       together and video quality won't be the best\"\"\"</span>\n    <span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">screen</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_recording</span><span class=\"p\">()</span>\n\n    <span class=\"sd\">'''get the xml page source of the channel. useful for debugging Roku Webdriver locators'''</span>\n    <span class=\"n\">xml_source</span> <span class=\"o\">=</span> <span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">screen</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_page_source</span><span class=\"p\">()</span>\n</pre>\n<h4>Getting screen text:</h4>\n<p>Screen text of the device is returned as a collection of ScreenText objects as found on the screen. Each ScreenText item will be an object containing details about the found device text such as location, height, and width of the word as found on the device screen:</p>\n<pre>    <span class=\"n\">screen_texts</span> <span class=\"o\">=</span> <span class=\"n\">roku_driver</span><span class=\"o\">.</span><span class=\"n\">screen</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_text</span><span class=\"p\">()</span>\n    <span class=\"k\">for</span> <span class=\"n\">screen_text</span> <span class=\"ow\">in</span> <span class=\"n\">screen_texts</span><span class=\"p\">:</span>\n        <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">screen_text</span><span class=\"o\">.</span><span class=\"n\">get_x</span><span class=\"p\">()</span>\n        <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">screen_text</span><span class=\"o\">.</span><span class=\"n\">get_y</span><span class=\"p\">()</span>\n        <span class=\"n\">width</span> <span class=\"o\">=</span> <span class=\"n\">screen_text</span><span class=\"o\">.</span><span class=\"n\">get_width</span><span class=\"p\">()</span>\n        <span class=\"n\">height</span> <span class=\"o\">=</span> <span class=\"n\">screen_text</span><span class=\"o\">.</span><span class=\"n\">get_height</span><span class=\"p\">()</span>\n        <span class=\"n\">confidence</span> <span class=\"o\">=</span> <span class=\"n\">screen_text</span><span class=\"o\">.</span><span class=\"n\">get_confidence</span><span class=\"p\">()</span>\n</pre>\n<p>Alternatively you can get the entire device screen as a full string via <code>driver.screen().get_text_as_string()</code></p>\n<h4>Getting information about the media player (ROKU ONLY):</h4>\n<p>For Roku devices, it's possible to get details about your media player in flight through the Roku WebDriver rest api which can be accessed in your test code as follows:</p>\n<pre>    <span class=\"sd\">'''gets information about the media in flight including state, bitrate, encoding information, and much much more!'''</span>\n    <span class=\"n\">media_player_info</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">roku_driver</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_media_player_info</span><span class=\"p\">()</span>\n    <span class=\"k\">assert</span> <span class=\"n\">media_player_info</span><span class=\"o\">.</span><span class=\"n\">is_error</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"kc\">False</span>\n    <span class=\"k\">assert</span> <span class=\"n\">media_player_info</span><span class=\"o\">.</span><span class=\"n\">is_live</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"kc\">False</span>\n    <span class=\"k\">assert</span> <span class=\"n\">media_player_info</span><span class=\"o\">.</span><span class=\"n\">get_state</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s1\">'none'</span>\n</pre>\n<h4>Getting performance data from your application during test (ROKU ONLY):</h4>\n<p>Roku provides a way to measure your app's cpu and memory utilization through their brightscript profiler. Our platform allows you to access the brightscript performance profile during the course of your test. To utilize this functionality you must provide the 'EnablePerformanceProfiling' capability on test session start and set the value to true. This will take your provided sideloadable .zip package, update the manifest with the necessary values for profile capturing, and then recompile for automation on your device.</p>\n<pre>    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">capabilities</span><span class=\"o\">.</span><span class=\"n\">add_capability</span><span class=\"p\">(</span><span class=\"s1\">'EnablePerformanceProfiling'</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">roku_driver</span> <span class=\"o\">=</span> <span class=\"n\">RokuDriver</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">SERVER_URL</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">capabilities</span><span class=\"p\">)</span>\n\n    <span class=\"n\">performance_profile</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">roku_driver</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_performance_profile</span><span class=\"p\">()</span>\n    <span class=\"n\">performance_profile_mb</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">getsize</span><span class=\"p\">(</span><span class=\"n\">performance_profile</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">1000000</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Performance profile MB size: \"</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">performance_profile_mb</span><span class=\"p\">))</span>\n</pre>\n<p>Once you've retrieved your .bsprof file during test - this file can be uploaded to <a href=\"http://devtools.web.roku.com/profiler/viewer/\" rel=\"nofollow\">Roku's profiler visualization tool</a> to see the performance data in a friendly user format.</p>\n<h4>Getting debug log info (ROKU ONLY):</h4>\n<p>For Roku devices, it's possible to get the debug logs as follows:</p>\n<pre>    <span class=\"n\">log_content</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_debug_logs</span><span class=\"p\">()</span>\n</pre>\n<h4>Device Capabilities explained:</h4>\n<p>Various capabilities and values can be provided and passed to your driver instance at startup. Some of them are required and others are optional. The following are the minimum capabilities <strong>required</strong> to start a driver session.</p>\n<h4>Roku</h4>\n<pre>    <span class=\"sd\">'''init a capability object'''</span>\n    <span class=\"n\">capabilities</span> <span class=\"o\">=</span> <span class=\"n\">DeviceCapabilities</span><span class=\"p\">()</span>\n\n    <span class=\"sd\">'''indicates you want a Roku test'''</span>\n    <span class=\"n\">capabilities</span><span class=\"o\">.</span><span class=\"n\">add_capability</span><span class=\"p\">(</span><span class=\"s2\">\"Platform\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Roku\"</span><span class=\"p\">)</span>\n\n    <span class=\"sd\">'''set the path or url to your sideloadable .zip'''</span>\n    <span class=\"n\">capabilities</span><span class=\"o\">.</span><span class=\"n\">add_capability</span><span class=\"p\">(</span><span class=\"s2\">\"AppPackage\"</span><span class=\"p\">,</span> <span class=\"s2\">\"path/or/url/to/your/apppackage\"</span><span class=\"p\">)</span>\n\n    <span class=\"sd\">'''set your roku ip address'''</span>\n    <span class=\"n\">capabilities</span><span class=\"o\">.</span><span class=\"n\">add_capability</span><span class=\"p\">(</span><span class=\"s2\">\"DeviceIPAddress\"</span><span class=\"p\">,</span> <span class=\"s2\">\"yourdeviceipaddress\"</span><span class=\"p\">)</span>\n\n    <span class=\"sd\">'''set your device username and password'''</span>\n    <span class=\"n\">capabilities</span><span class=\"o\">.</span><span class=\"n\">add_capability</span><span class=\"p\">(</span><span class=\"s2\">\"DeviceUsername\"</span><span class=\"p\">,</span> <span class=\"s2\">\"yourdeviceusername\"</span><span class=\"p\">)</span>\n    <span class=\"n\">capabilities</span><span class=\"o\">.</span><span class=\"n\">add_capability</span><span class=\"p\">(</span><span class=\"s2\">\"DevicePassword\"</span><span class=\"p\">,</span> <span class=\"s2\">\"yourdevicepassword\"</span><span class=\"p\">)</span>\n\n    <span class=\"sd\">'''set your OCR module - options are \"Tesseract\" or \"GoogleVision\"'''</span>\n    <span class=\"n\">capabilities</span><span class=\"o\">.</span><span class=\"n\">add_capability</span><span class=\"p\">(</span><span class=\"s2\">\"OCRType\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Tesseract\"</span><span class=\"p\">)</span>\n\n    <span class=\"sd\">'''pass the capabilities and start your driver'''</span>\n    <span class=\"n\">driver</span> <span class=\"o\">=</span> <span class=\"n\">RokuDriver</span><span class=\"p\">(</span><span class=\"s2\">\"http://yourserverurl:yourrunningserverport\"</span><span class=\"p\">,</span> <span class=\"n\">capabilities</span><span class=\"p\">)</span>\n</pre>\n<h4>Xbox</h4>\n<pre>    <span class=\"sd\">'''init a capability object'''</span>\n    <span class=\"n\">capabilities</span> <span class=\"o\">=</span> <span class=\"n\">DeviceCapabilities</span><span class=\"p\">()</span>\n\n    <span class=\"sd\">'''indicates you want a XBox test'''</span>\n    <span class=\"n\">capabilities</span><span class=\"o\">.</span><span class=\"n\">add_capability</span><span class=\"p\">(</span><span class=\"s2\">\"Platform\"</span><span class=\"p\">,</span> <span class=\"s2\">\"XBox\"</span><span class=\"p\">)</span>\n\n    <span class=\"sd\">'''set the path or url to your .appxbundle package to install'''</span>\n    <span class=\"n\">capabilities</span><span class=\"o\">.</span><span class=\"n\">add_capability</span><span class=\"p\">(</span><span class=\"s2\">\"AppPackage\"</span><span class=\"p\">,</span> <span class=\"s2\">\"path/or/url/to/your/apppackage\"</span><span class=\"p\">)</span>\n\n    <span class=\"sd\">'''the app id - will be the friendly app name of your appxbundle'''</span>\n    <span class=\"n\">capabilities</span><span class=\"o\">.</span><span class=\"n\">add_capability</span><span class=\"p\">(</span><span class=\"s2\">\"App\"</span><span class=\"p\">,</span> <span class=\"s2\">\"appid\"</span><span class=\"p\">)</span>\n\n    <span class=\"sd\">'''set your xbox ip address'''</span>\n    <span class=\"n\">capabilities</span><span class=\"o\">.</span><span class=\"n\">add_capability</span><span class=\"p\">(</span><span class=\"s2\">\"DeviceIPAddress\"</span><span class=\"p\">,</span> <span class=\"s2\">\"yourdeviceipaddress\"</span><span class=\"p\">)</span>\n\n    <span class=\"sd\">'''set your console xbox live username and password for the logged in user'''</span>\n    <span class=\"n\">capabilities</span><span class=\"o\">.</span><span class=\"n\">add_capability</span><span class=\"p\">(</span><span class=\"s2\">\"DeviceUsername\"</span><span class=\"p\">,</span> <span class=\"s2\">\"your_xbox_live_username\"</span><span class=\"p\">)</span>\n    <span class=\"n\">capabilities</span><span class=\"o\">.</span><span class=\"n\">add_capability</span><span class=\"p\">(</span><span class=\"s2\">\"DevicePassword\"</span><span class=\"p\">,</span> <span class=\"s2\">\"your_xbox_live_password\"</span><span class=\"p\">)</span>\n\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    set your xbox live console id</span>\n<span class=\"sd\">    can be found from your xbox dev settings page at https://your_xbox_device_ip:11443/#Settings</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"n\">capabilities</span><span class=\"o\">.</span><span class=\"n\">add_capability</span><span class=\"p\">(</span><span class=\"s2\">\"DeviceID\"</span><span class=\"p\">,</span> <span class=\"s2\">\"your_xbox_live_console_id\"</span><span class=\"p\">)</span>\n\n    <span class=\"sd\">'''set your OCR module - options are \"Tesseract\" or \"GoogleVision\"'''</span>\n    <span class=\"n\">capabilities</span><span class=\"o\">.</span><span class=\"n\">add_capability</span><span class=\"p\">(</span><span class=\"s2\">\"OCRType\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Tesseract\"</span><span class=\"p\">)</span>\n\n    <span class=\"sd\">'''pass the capabilities and start your driver'''</span>\n    <span class=\"n\">driver</span> <span class=\"o\">=</span> <span class=\"n\">XBoxDriver</span><span class=\"p\">(</span><span class=\"s2\">\"http://yourserverurl:yourrunningserverport\"</span><span class=\"p\">,</span> <span class=\"n\">capabilities</span><span class=\"p\">)</span>\n</pre>\n<h4>HDMI Devices (Playstation, Cable SetTop, AndroidTV, AppleTV, and more)</h4>\n<pre>    <span class=\"sd\">'''init a capability object'''</span>\n    <span class=\"n\">capabilities</span> <span class=\"o\">=</span> <span class=\"n\">DeviceCapabilities</span><span class=\"p\">()</span>\n\n    <span class=\"sd\">'''indicates you want an HDMI test'''</span>\n    <span class=\"n\">capabilities</span><span class=\"o\">.</span><span class=\"n\">add_capability</span><span class=\"p\">(</span><span class=\"s2\">\"Platform\"</span><span class=\"p\">,</span> <span class=\"s2\">\"HDMI\"</span><span class=\"p\">)</span>\n\n    <span class=\"sd\">'''set your logitech harmony info. see the why harmony and harmony setups section of the main server page for details'''</span>\n    <span class=\"n\">capabilities</span><span class=\"o\">.</span><span class=\"n\">add_capability</span><span class=\"p\">(</span><span class=\"s2\">\"HomeHubIPAddress\"</span><span class=\"p\">,</span> <span class=\"s2\">\"yourharmonyipaddress\"</span><span class=\"p\">)</span>\n    <span class=\"n\">capabilities</span><span class=\"o\">.</span><span class=\"n\">add_capability</span><span class=\"p\">(</span><span class=\"s2\">\"DeviceName\"</span><span class=\"p\">,</span> <span class=\"s2\">\"devicenameassavedinharmony\"</span><span class=\"p\">)</span>\n\n    <span class=\"sd\">\"\"\"the video input and audio input names of your attached hdmi capture card. They can be found by running</span>\n<span class=\"sd\">    the following commands:</span>\n<span class=\"sd\">    MAC: ~/Rokuality/dependencies/ffmpeg_v4.1 -f avfoundation -list_devices true -i \"\"</span>\n<span class=\"sd\">    WINDOWS: ~\\Rokuality\\dependencies\\ffmpeg_win_v4.1\\bin\\ffmpeg.exe -list_devices true -f dshow -i dummy</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"n\">capabilities</span><span class=\"o\">.</span><span class=\"n\">add_capability</span><span class=\"p\">(</span><span class=\"s2\">\"VideoCaptureInput\"</span><span class=\"p\">,</span> <span class=\"s2\">\"video input name\"</span><span class=\"p\">)</span>\n    <span class=\"n\">capabilities</span><span class=\"o\">.</span><span class=\"n\">add_capability</span><span class=\"p\">(</span><span class=\"s2\">\"AudioCaptureInput\"</span><span class=\"p\">,</span> <span class=\"s2\">\"audio input name\"</span><span class=\"p\">)</span>\n\n    <span class=\"sd\">'''set your OCR module - options are \"Tesseract\" or \"GoogleVision\"'''</span>\n    <span class=\"n\">capabilities</span><span class=\"o\">.</span><span class=\"n\">add_capability</span><span class=\"p\">(</span><span class=\"s2\">\"OCRType\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Tesseract\"</span><span class=\"p\">)</span>\n\n    <span class=\"sd\">'''pass the capabilities and start your driver'''</span>\n    <span class=\"n\">driver</span> <span class=\"o\">=</span> <span class=\"n\">HDMIDriver</span><span class=\"p\">(</span><span class=\"s2\">\"http://yourserverurl:yourrunningserverport\"</span><span class=\"p\">,</span> <span class=\"n\">capabilities</span><span class=\"p\">)</span>\n</pre>\n<table>\n<thead>\n<tr>\n<th>Capability</th>\n<th>Description</th>\n<th>Required Or Optional</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Platform</td>\n<td>Indicates the target platform for the tests.</td>\n<td>Required</td>\n<td>String - Options are 'Roku, 'XBox', or 'HDMI'</td>\n</tr>\n<tr>\n<td>AppPackage</td>\n<td>The sideloadable zip to be installed (Roku), or the .appxbundle (XBox). Must be a valid file path OR a valid url.</td>\n<td>Required for Roku and XBox - IF the 'App' capability is not provided. Ignored for HDMI devices</td>\n<td>String</td>\n</tr>\n<tr>\n<td>App</td>\n<td>The friendly id of your app for Roku and XBox. For Roku this cap is optional. If you provide this cap and ommit the 'AppPackage' cap then the device will attempt to launch an already installed channel - Note that this can be an installed production channel id which you can retrieve from your device via <code>curl http://yourdeviceip:8060/query/apps</code>. But if you launch a production Roku channel you MUST have a connected HDMI capture card and provide the requisite <code>VideoCaptureInput</code> and <code>AudioCaptureInput</code> capabilities. For XBox this cap is always required and MUST be the app id of your installed .appxbundle - if you ommit the 'AppPackage' cap then the device will attempt to launch an already installed appxbundle matching this id.</td>\n<td>Roku = Optional. XBox = Required. HDMI = Ignored</td>\n<td>String</td>\n</tr>\n<tr>\n<td>DeviceIPAddress</td>\n<td>The ip address of your Roku or XBox. Ignored for HDMI.</td>\n<td>Required for Roku or XBox</td>\n<td>String - Your device MUST be reachable from the machine running the Rokuality server.</td>\n</tr>\n<tr>\n<td>DeviceUsername</td>\n<td>Roku = The dev console username created when you enabled developer mode on your device. XBox = The XBox live username signed into the XBox console.</td>\n<td>Required - Roku and XBox</td>\n<td>String</td>\n</tr>\n<tr>\n<td>DevicePassword</td>\n<td>Roku = The dev console password created when you enabled developer mode on your device. XBox = The XBox live password signed into the XBox console.</td>\n<td>Required - Roku and XBox</td>\n<td>String</td>\n</tr>\n<tr>\n<td>DeviceID</td>\n<td>XBox - the XBox live console id. Ignored for Roku and HDMI.</td>\n<td>Required - XBox</td>\n<td>String</td>\n</tr>\n<tr>\n<td>ImageMatchSimilarity</td>\n<td>An optional image match similarity default used during Image locator evaluations. A lower value will allow for greater tolerance of image disimilarities between the image locator and the screen, BUT will also increase the possibility of a false positive.</td>\n<td>Optional</td>\n<td>Double. Defaults to .90</td>\n</tr>\n<tr>\n<td>ScreenSizeOverride</td>\n<td>An optional 'WIDTHxHEIGHT' cap that all screen image captures will be resized to prior to match evaluation. Useful if you want to enforce test consistence across multiple device types and multiple developer machines or ci environments.</td>\n<td>Optional</td>\n<td>String - I.e. a value of '1800x1200' will ensure that all image captures are resized to those specs before the locator evaluation happens no matter what the actual device screen size is.</td>\n</tr>\n<tr>\n<td>OCRType</td>\n<td>The OCR type - Options are 'Tesseract' OR 'GoogleVision'. In most cases Tesseract is more than enough but if you find that your textual evalutions are lacking reliability you can provide 'GoogleVision' as a more powerful alternative. BUT if the capability is set to 'GoogleVision' you MUST have a valid Google Vision account setup and provide the 'GoogleCredentials' capability with a valid file path to the oath2 .json file with valid credentials for the Google Vision service.</td>\n<td>Required</td>\n<td>String</td>\n</tr>\n<tr>\n<td>GoogleCredentials</td>\n<td>The path to a valid .json Google Auth key service file.</td>\n<td>Optional but Required if the 'OCRType' capability is set to 'GoogleVision'</td>\n<td>The .json service key must exist on the machine triggering the tests. See <a href=\"#using-google-vision-ocr\" rel=\"nofollow\">Using Google Vision</a> for additional details.</td>\n</tr>\n<tr>\n<td>HomeHubIPAddress</td>\n<td>The ip address of your logitech harmony hub.</td>\n<td>Required for HDMI. Ignored for Roku and XBox</td>\n<td>String - See the <a href=\"https://github.com/rokuality/rokuality-server\" rel=\"nofollow\">why harmony</a> and <a href=\"https://github.com/rokuality/rokuality-server\" rel=\"nofollow\">configuring your harmony</a> sections of the server page for details.</td>\n</tr>\n<tr>\n<td>DeviceName</td>\n<td>The name of your device as saved in your Harmony hub i.e. 'MyPlaystation4'.</td>\n<td>Required for HDMI. Ignored for Roku and XBox</td>\n<td>String</td>\n</tr>\n<tr>\n<td>VideoCaptureInput</td>\n<td>The name of your video card capture video input if running an HDMI connected test. Will vary by the type of hdmi capture card.</td>\n<td>Required for HDMI device types (Playstation, Cable SetTop Box, AndroidTV, AppleTV, etc. Optional for Roku if you wish to test a production channel. Ignored for XBox</td>\n<td>Can be found by running a terminal command. For MAC: <code>~/Rokuality/dependencies/ffmpeg_v4.1 -f avfoundation -list_devices true -i \"\"</code> and for Windows: <code>~\\Rokuality\\dependencies\\ffmpeg_win_v4.1\\bin\\ffmpeg.exe -list_devices true -f dshow -i dummy</code></td>\n</tr>\n<tr>\n<td>AudioCaptureInput</td>\n<td>The name of your video card capture audio input if running an HDMI connected test. Will vary by the type of hdmi capture card.</td>\n<td>Required for HDMI device types (Playstation, Cable SetTop Box, AndroidTV, AppleTV, etc. Optional for Roku if you wish to test a production channel. Ignored for XBox</td>\n<td>Can be found by running a terminal command. For MAC: <code>~/Rokuality/dependencies/ffmpeg_v4.1 -f avfoundation -list_devices true -i \"\"</code> and for Windows: <code>~\\Rokuality\\dependencies\\ffmpeg_win_v4.1\\bin\\ffmpeg.exe -list_devices true -f dshow -i dummy</code></td>\n</tr>\n<tr>\n<td>MirrorScreen</td>\n<td>If provided with a widthxheight value, then a window will be launched on the user's desktop showing the test activity in real time for the duration of the test session. Useful for debugging tests on remote devices.</td>\n<td>Optional</td>\n<td>String - 'widthxheight' format. i.e. '1200x800' will launch a screen mirror with width 1200, and height 800.</td>\n</tr>\n<tr>\n<td>EnablePerformanceProfiling</td>\n<td>Roku only. If provided your sideloadable .zip package will be updated for performance profiling. Then during the course of the execution you can retrieve the .bsprof file with CPU and memory utilization data from your channel.</td>\n<td>Optional</td>\n<td>Boolean - true to allow for performance capturing. Defaults to false.</td>\n</tr></tbody></table>\n<h4>Element Timeouts and Polling:</h4>\n<p>There are two main options when it comes to element timeouts and polling</p>\n<p>Timeouts - By default the element timeout is set to 0 milliseconds, meaning if the driver fails to find an element immediately, it will throw a NoSuchElement exception. But a better practice is to set a implicit wait timeout so the driver will poll for a duration, trying to find the element before it fails and throws the NoSuchElementException:</p>\n<pre>    <span class=\"sd\">'''will fail immediately'''</span>\n    <span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">finder</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">find_element</span><span class=\"p\">(</span><span class=\"n\">By</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">(</span><span class=\"s2\">\"no such text\"</span><span class=\"p\">))</span>\n</pre>\n<p>vs</p>\n<pre>    <span class=\"sd\">'''will fail after 5 seconds'''</span>\n    <span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">set_element_timeout</span><span class=\"p\">(</span><span class=\"mi\">5000</span><span class=\"p\">)</span>\n    <span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">finder</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">find_element</span><span class=\"p\">(</span><span class=\"n\">By</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">(</span><span class=\"s2\">\"no such text\"</span><span class=\"p\">))</span>\n</pre>\n<p>It is generally recommended to set respective timeouts to reduce test flake, but setting the values too high can increase test duration.</p>\n<p>Additionally you can set the interval of how often the element search polling will happen. In this example, the same timeout is applied but the element polling will happen every second. If the polling interval is ommited the default is 250 milliseconds.</p>\n<pre>    <span class=\"sd\">'''will fail after 5 seconds polling every second'''</span>\n    <span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">set_element_timeout</span><span class=\"p\">(</span><span class=\"mi\">5000</span><span class=\"p\">)</span>\n    <span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">set_element_poll_interval</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">)</span>\n    <span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">finder</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">find_element</span><span class=\"p\">(</span><span class=\"n\">By</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">(</span><span class=\"s2\">\"no such text\"</span><span class=\"p\">))</span>\n</pre>\n<h4>Using Google Vision OCR:</h4>\n<p>As mentioned previously, Tesseract is the default OCR engine used when you provide a text based locator. And the Rokuality server ships the relevant trained data files so the more you use it during test, the better it will get at finding the provided text based locators. But if you find that's not as reliable as needed for your testing purposes you can use Google Vision as an alternative provided you have a valid <a href=\"https://cloud.google.com/vision/docs/before-you-begin\" rel=\"nofollow\">Google Vision</a> account setup. You must also set the path to your .json service file containing your service key in your DeviceCapabilities prior to driver start.</p>\n<pre>    <span class=\"n\">capabilities</span> <span class=\"o\">=</span> <span class=\"n\">DeviceCapabilities</span><span class=\"p\">()</span>\n    <span class=\"n\">capabilities</span><span class=\"o\">.</span><span class=\"n\">add_capability</span><span class=\"p\">(</span><span class=\"s2\">\"OCRType\"</span><span class=\"p\">,</span> <span class=\"s2\">\"GoogleVision\"</span><span class=\"p\">)</span>\n    <span class=\"n\">capabilities</span><span class=\"o\">.</span><span class=\"n\">add_capability</span><span class=\"p\">(</span><span class=\"s2\">\"GoogleCredentials\"</span><span class=\"p\">,</span> <span class=\"s2\">\"/path/to/your/vision/authkey.json\"</span><span class=\"p\">)</span>\n</pre>\n<h4>Failing to find elements? :</h4>\n<p>Image Based Locators <code>By().image(\"pathorurltoyoourimagesnippet.png\")</code></p>\n<ol>\n<li>Make sure your locator image snippet is in a valid image format. Most tests use .png format so for best results please use locators of this type.</li>\n<li>Make sure that your image snippets are in good quality and you are doing an apples to apples comparison of the image snippet you wish to find within the screen image. Some image snipping tools are better than others, so if capturing static image snippets for later locator use be wary of the tools you're using. Alternatively, you can get a subscreen section from the device during test and save it as a static locator for later use.\n<code>locator_to_use_later = driver.screen().get_image_sub_screen(40, 80, 160, 220)</code></li>\n<li>You can optionally set the \"ImageMatchSimilarity\" DeviceCapability at driver startup which will set a tolerance for image comparisons. Lower values will mean a greater likelihood of getting a match, but too low of a value will introduce a false positive.\n<code>capabilities.add_capability(\"ImageMatchSimilarity\", .85)</code></li>\n</ol>\n<p>Text Based Locators <code>By().text(\"text to search for\")</code></p>\n<ol>\n<li>Check that your string isn't too complicated, i.e. a locator of <code>By().text(\"hello world\")</code> is much more likely to be found than a locator of <code>By().text(\"he!!O W@rLd!#!\")</code>. Also, single world locators are better than multiple world locators but we continue to work on the server back end to improve the reliability.</li>\n<li>As mentioned previously, Tesseract is the default OCR engine but if you're finding that the results aren't as reliable as you'd like, consider using <a href=\"#using-google-vision-ocr\" rel=\"nofollow\">Google Vision</a> as an alternative.</li>\n<li>You can access the entire decoded device screen text by <code>driver.screen().get_text_as_string()</code>. If your locator is present in the string but not found during test, please log a bug on the <a href=\"https://github.com/rokuality/rokuality-java/issues\" rel=\"nofollow\">issues</a> page and we'll investigate.</li>\n<li>By default the OCR evaluations happen against the entire device screen but sometimes it's better to narrow the scope of the find to a smaller region of the screen to get better results. This can be done with <code>driver.finder().find_element_sub_screen(by, 100, 500, 300, 200)</code> which will limit the scope of the find to that subset of the screen and likely return better results.</li>\n</ol>\n<h4>Server timeouts and orphaned sessions:</h4>\n<p>At the end of every driver session, you should close the driver and cleanup all session data by calling the stop method:</p>\n<pre>    <span class=\"sd\">'''stop the driver and clean up all resources'''</span>\n    <span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">()</span>\n</pre>\n<p>But if you don't a safety exists to eventually clean up those assets. The server session will listen for new commands and will timeout if no commands for the session have been received for a specified duration. The default command timeout is set to 60 seconds - meaning if a session is started and no commands are sent to it for 60 seconds, then the session will automatically be terminated and released. You can increase/decrease this time by setting the 'commandtimeout' option when you launch the server. See the <a href=\"https://github.com/rokuality/rokuality-server\" rel=\"nofollow\">Server Command Options</a> section of the server for details.</p>\n\n          </div>"}, "last_serial": 6636796, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "23174611ba86cff25d38ef1aad62a5e2", "sha256": "09301297206ecf2b064d80926ce647a46a71424e6722876e4ea6029fc8f4fc1c"}, "downloads": -1, "filename": "rokuality_python-0.0.1-py3.7.egg", "has_sig": false, "md5_digest": "23174611ba86cff25d38ef1aad62a5e2", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": ">=3.6.5", "size": 34454, "upload_time": "2019-10-16T19:58:00", "upload_time_iso_8601": "2019-10-16T19:58:00.568982Z", "url": "https://files.pythonhosted.org/packages/fd/a9/1158aff23c4ebe51994db1de63d2adaf35f42da9fc01006b8e98b63c2ae5/rokuality_python-0.0.1-py3.7.egg", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "a1d5b9a9bf213ea1f30024c675bcbba3", "sha256": "293ad8673a8cf9e1c5bae0b592c806ba8047ce3f38a425751098df819a64685a"}, "downloads": -1, "filename": "rokuality_python-1.0.0-py3.7.egg", "has_sig": false, "md5_digest": "a1d5b9a9bf213ea1f30024c675bcbba3", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": ">=3.6.5", "size": 56409, "upload_time": "2019-10-18T18:36:56", "upload_time_iso_8601": "2019-10-18T18:36:56.037078Z", "url": "https://files.pythonhosted.org/packages/4e/51/3b04e8b7434ff880b5d78b88111d74a78418320528cd5fc9cdc3b0756924/rokuality_python-1.0.0-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "5a4f1380d10a55df67ec435c873d730a", "sha256": "e105ca73bc62453d51cb8a905dfb6a82d4340011209114bf97565201411cd1ae"}, "downloads": -1, "filename": "rokuality_python-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "5a4f1380d10a55df67ec435c873d730a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.5", "size": 22714, "upload_time": "2019-10-16T19:57:56", "upload_time_iso_8601": "2019-10-16T19:57:56.303760Z", "url": "https://files.pythonhosted.org/packages/56/48/f0e344aead0184a7a2719ada6f50f4e22b239861db858ed1bae6359c068f/rokuality_python-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "43fdae4b6a8b1eac7e452983158d2bc8", "sha256": "e9242771e25190c41ec3a3102791aefed5a9f4fdbea6c5bf9c5c69a80ea76a0f"}, "downloads": -1, "filename": "rokuality-python-1.0.0.tar.gz", "has_sig": false, "md5_digest": "43fdae4b6a8b1eac7e452983158d2bc8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.5", "size": 14484, "upload_time": "2019-10-16T19:57:58", "upload_time_iso_8601": "2019-10-16T19:57:58.879371Z", "url": "https://files.pythonhosted.org/packages/4a/17/0d8ba1c42088d729cbe126ed8dba00d23fe942415ee33cd771219ea7ee1c/rokuality-python-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "371189942ea22111766f9ec098f82ae7", "sha256": "ac86ac45bb96ba92a2f429bfed0c6937e47bbfecad2522e10420bae968c14520"}, "downloads": -1, "filename": "rokuality_python-1.1.0-py3.7.egg", "has_sig": false, "md5_digest": "371189942ea22111766f9ec098f82ae7", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": ">=3.6.5", "size": 59077, "upload_time": "2019-11-15T22:19:31", "upload_time_iso_8601": "2019-11-15T22:19:31.496963Z", "url": "https://files.pythonhosted.org/packages/bb/f8/c1a7f8ba9651ce1f76d59db967d3fbb3c81ac9fc20705bdb73c5e6bdf208/rokuality_python-1.1.0-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "849cf747a23786e7f787ce6108d7dd87", "sha256": "818ed26882483da6e29654a8accb2b24eedfa70379da238d7312a1f36caba5b0"}, "downloads": -1, "filename": "rokuality_python-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "849cf747a23786e7f787ce6108d7dd87", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.5", "size": 32381, "upload_time": "2019-10-18T18:36:49", "upload_time_iso_8601": "2019-10-18T18:36:49.995499Z", "url": "https://files.pythonhosted.org/packages/23/0f/59242ecf80a920cb95c27209ae3c54409c1f014e66e64a7fbfc589868377/rokuality_python-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "483da5ef3c685331769983e3a44033bd", "sha256": "5a2ceebdf240966bdc50db171cd2e29e9f1af76a13426d6f546191764f0673eb"}, "downloads": -1, "filename": "rokuality-python-1.1.0.tar.gz", "has_sig": false, "md5_digest": "483da5ef3c685331769983e3a44033bd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.5", "size": 19193, "upload_time": "2019-10-18T18:36:53", "upload_time_iso_8601": "2019-10-18T18:36:53.111864Z", "url": "https://files.pythonhosted.org/packages/41/98/bb37542456ed2539ffcb7bee4e1542f3b703bccd31a9eb9fad02ee2a8124/rokuality-python-1.1.0.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "2aba8cdefdd3cdf8692461876d004de4", "sha256": "7aac3c02f36b6b260f533362d9b37890949d4ca93335717ea9f8ca51a602f6fb"}, "downloads": -1, "filename": "rokuality_python-1.2.0-py3.7.egg", "has_sig": false, "md5_digest": "2aba8cdefdd3cdf8692461876d004de4", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": ">=3.6.5", "size": 65765, "upload_time": "2019-12-27T00:08:26", "upload_time_iso_8601": "2019-12-27T00:08:26.765299Z", "url": "https://files.pythonhosted.org/packages/b3/18/1e98dfbe29c161c6a356681cd803e0bf3a527a04321c223d44fe51703b4c/rokuality_python-1.2.0-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "36d4684667600db12384237d65373b98", "sha256": "9b79a28ad8a2fb6625eda5d617756d23f8399c808a05085eaadbfc5637d04087"}, "downloads": -1, "filename": "rokuality_python-1.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "36d4684667600db12384237d65373b98", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.5", "size": 33409, "upload_time": "2019-11-15T22:19:24", "upload_time_iso_8601": "2019-11-15T22:19:24.211537Z", "url": "https://files.pythonhosted.org/packages/29/40/269d1a1270eda0a1d705932b28b321344ab49d9f9f4180c7630afef13d0e/rokuality_python-1.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "852eaaeddb8ca2bd23a0d888c63fd0bc", "sha256": "814ba4d79a9d5e84613c151eb7d9d94353800339f20565c856b4401fd1f9d343"}, "downloads": -1, "filename": "rokuality-python-1.2.0.tar.gz", "has_sig": false, "md5_digest": "852eaaeddb8ca2bd23a0d888c63fd0bc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.5", "size": 20179, "upload_time": "2019-11-15T22:19:27", "upload_time_iso_8601": "2019-11-15T22:19:27.821264Z", "url": "https://files.pythonhosted.org/packages/94/5b/dffdec0b95fa6b38a158747d5d10148dfb6d4e250197e634175877a22676/rokuality-python-1.2.0.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "cde6c2fc6b52838a3a3d679d60e14d81", "sha256": "dcb39f77ed35ad4b7ed0c0e18608d6a724335e25b1dfbd0e347989c6cf6e5752"}, "downloads": -1, "filename": "rokuality_python-1.2.1-py3.7.egg", "has_sig": false, "md5_digest": "cde6c2fc6b52838a3a3d679d60e14d81", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": ">=3.6.5", "size": 67870, "upload_time": "2020-02-02T15:41:39", "upload_time_iso_8601": "2020-02-02T15:41:39.592195Z", "url": "https://files.pythonhosted.org/packages/4d/4f/9a1327b1dd0503eee771310f3b447f595a2ffe27396a72790e7045d6b821/rokuality_python-1.2.1-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "f0bc53fe3998ff9343daa9b1d51bd105", "sha256": "327dd71225a2b1a1e16d31d5cc27a33ebf88f1d1ac682a650875c0874f4ecdc6"}, "downloads": -1, "filename": "rokuality_python-1.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "f0bc53fe3998ff9343daa9b1d51bd105", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.5", "size": 36321, "upload_time": "2019-12-27T00:08:16", "upload_time_iso_8601": "2019-12-27T00:08:16.239387Z", "url": "https://files.pythonhosted.org/packages/12/c1/bda3014c6be54c791e819371dd4dce3f26dce3ad8f8df79d2d54dcfdb878/rokuality_python-1.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a60aa275a6e0f9588a8339b8f56d4ae0", "sha256": "42a9a3c8259a04933683a52739b33737e33e8d9ffa0f15215207cde0f994d573"}, "downloads": -1, "filename": "rokuality-python-1.2.1.tar.gz", "has_sig": false, "md5_digest": "a60aa275a6e0f9588a8339b8f56d4ae0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.5", "size": 22079, "upload_time": "2019-12-27T00:08:21", "upload_time_iso_8601": "2019-12-27T00:08:21.781504Z", "url": "https://files.pythonhosted.org/packages/2a/74/205c337786e76a8c342dc920a6199677480068a8b9f1866796abe97cd0ac/rokuality-python-1.2.1.tar.gz", "yanked": false}], "1.2.2": [{"comment_text": "", "digests": {"md5": "95c71c429dcd93a09b9df5b32b7f662d", "sha256": "ef8c62a983fc45458a9f1231a6629cb57e5c1be54c8d2ef72e39d6240c65b6fb"}, "downloads": -1, "filename": "rokuality_python-1.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "95c71c429dcd93a09b9df5b32b7f662d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.5", "size": 37429, "upload_time": "2020-02-02T15:41:29", "upload_time_iso_8601": "2020-02-02T15:41:29.063527Z", "url": "https://files.pythonhosted.org/packages/b4/e0/ceb94deeae8bc1c83c7e7f0eca17286955762d8c605ec7c345b14be501cf/rokuality_python-1.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c73587c1d4771cecf9bb917d7b749b27", "sha256": "0450b969fa5bfb9259b780c19512b814d8db11cf875a98ea2f7266876bd9e0bf"}, "downloads": -1, "filename": "rokuality-python-1.2.2.tar.gz", "has_sig": false, "md5_digest": "c73587c1d4771cecf9bb917d7b749b27", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.5", "size": 22874, "upload_time": "2020-02-02T15:41:34", "upload_time_iso_8601": "2020-02-02T15:41:34.614821Z", "url": "https://files.pythonhosted.org/packages/7a/da/d2c8acccaec4496427ef69ebc3bb8977327a400bcb576144869e3a408dc9/rokuality-python-1.2.2.tar.gz", "yanked": false}], "1.2.3": [{"comment_text": "", "digests": {"md5": "1c9f48360c26100be9670a6756c48735", "sha256": "66218b73e8b3f5493265c7cd32b44409657d4233af5f3c06d2195cbcf8d074cb"}, "downloads": -1, "filename": "rokuality_python-1.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "1c9f48360c26100be9670a6756c48735", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.5", "size": 38274, "upload_time": "2020-02-07T16:04:51", "upload_time_iso_8601": "2020-02-07T16:04:51.731497Z", "url": "https://files.pythonhosted.org/packages/34/b6/264af60ba3c3757d64174b878c5f3b15f833e8851035c9786068ca4b9911/rokuality_python-1.2.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6701a8b4fb2a463b71b8129ff612ee21", "sha256": "a3a6240c80bfcbd8f446e8c3a8c2df5013fd2a8bea5951833431f3efe3264480"}, "downloads": -1, "filename": "rokuality-python-1.2.3.tar.gz", "has_sig": false, "md5_digest": "6701a8b4fb2a463b71b8129ff612ee21", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.5", "size": 23803, "upload_time": "2020-02-07T16:04:57", "upload_time_iso_8601": "2020-02-07T16:04:57.069806Z", "url": "https://files.pythonhosted.org/packages/4d/4d/9f204e8dae6e970325eea055e3e88c41ca097066b1a7e445e54905672b61/rokuality-python-1.2.3.tar.gz", "yanked": false}], "1.2.4": [{"comment_text": "", "digests": {"md5": "58ceb0a9d5fdce7e46706d88036e6ea8", "sha256": "2b192366e1f07c35d72bdc4c0dbc8599f230679a0aefeea416533dfa8013ebbf"}, "downloads": -1, "filename": "rokuality_python-1.2.4-py3-none-any.whl", "has_sig": false, "md5_digest": "58ceb0a9d5fdce7e46706d88036e6ea8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.5", "size": 39276, "upload_time": "2020-02-11T14:05:34", "upload_time_iso_8601": "2020-02-11T14:05:34.575516Z", "url": "https://files.pythonhosted.org/packages/38/0d/8696f1c88b5a60836780e87e604be9cf2bec0036f7918cbe17baedd75fc2/rokuality_python-1.2.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "da87d189750d0bc0fd6553d18d5c306c", "sha256": "c432281a58864bc05d9241944872c06fda3ddbec4a9a9fbae139e82de574ed12"}, "downloads": -1, "filename": "rokuality-python-1.2.4.tar.gz", "has_sig": false, "md5_digest": "da87d189750d0bc0fd6553d18d5c306c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.5", "size": 27462, "upload_time": "2020-02-11T14:05:41", "upload_time_iso_8601": "2020-02-11T14:05:41.530088Z", "url": "https://files.pythonhosted.org/packages/e9/da/cdd5180c3ced9238bc5e008ff32facc56deca8681e0d99158e48e2ab0ee5/rokuality-python-1.2.4.tar.gz", "yanked": false}], "1.2.5": [{"comment_text": "", "digests": {"md5": "dc1cec04264a4f12dcbd60117661402e", "sha256": "b29b3604ddf48efcf0621d52f0779cccbee1730468f15e104da8b0b36cbb8927"}, "downloads": -1, "filename": "rokuality_python-1.2.5-py3-none-any.whl", "has_sig": false, "md5_digest": "dc1cec04264a4f12dcbd60117661402e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.5", "size": 38136, "upload_time": "2020-02-15T15:35:04", "upload_time_iso_8601": "2020-02-15T15:35:04.652065Z", "url": "https://files.pythonhosted.org/packages/40/08/e7013476aec00379ecbf03c782dddb501c2939a28b09cd8c75c0c1f580dd/rokuality_python-1.2.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2945ae10b51ff7fb1cc17088faa69a5d", "sha256": "92dbed8fd955cb32cd65f5ba6d9e88134f05658f65928e4b1688eda556fd6a24"}, "downloads": -1, "filename": "rokuality-python-1.2.5.tar.gz", "has_sig": false, "md5_digest": "2945ae10b51ff7fb1cc17088faa69a5d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.5", "size": 26060, "upload_time": "2020-02-15T15:35:06", "upload_time_iso_8601": "2020-02-15T15:35:06.193131Z", "url": "https://files.pythonhosted.org/packages/b3/9c/65a895804dbb3249f33ce29e24992867dd6e7bdf79c8fa6d9380d0593783/rokuality-python-1.2.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "dc1cec04264a4f12dcbd60117661402e", "sha256": "b29b3604ddf48efcf0621d52f0779cccbee1730468f15e104da8b0b36cbb8927"}, "downloads": -1, "filename": "rokuality_python-1.2.5-py3-none-any.whl", "has_sig": false, "md5_digest": "dc1cec04264a4f12dcbd60117661402e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.5", "size": 38136, "upload_time": "2020-02-15T15:35:04", "upload_time_iso_8601": "2020-02-15T15:35:04.652065Z", "url": "https://files.pythonhosted.org/packages/40/08/e7013476aec00379ecbf03c782dddb501c2939a28b09cd8c75c0c1f580dd/rokuality_python-1.2.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2945ae10b51ff7fb1cc17088faa69a5d", "sha256": "92dbed8fd955cb32cd65f5ba6d9e88134f05658f65928e4b1688eda556fd6a24"}, "downloads": -1, "filename": "rokuality-python-1.2.5.tar.gz", "has_sig": false, "md5_digest": "2945ae10b51ff7fb1cc17088faa69a5d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.5", "size": 26060, "upload_time": "2020-02-15T15:35:06", "upload_time_iso_8601": "2020-02-15T15:35:06.193131Z", "url": "https://files.pythonhosted.org/packages/b3/9c/65a895804dbb3249f33ce29e24992867dd6e7bdf79c8fa6d9380d0593783/rokuality-python-1.2.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:01:27 2020"}