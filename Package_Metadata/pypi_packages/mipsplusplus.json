{"info": {"author": "Alex Socha", "author_email": "alex@alexsocha.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# MIPS++ Programming Language\n[![Build Status](https://travis-ci.com/alexsocha/mipsplusplus.svg?branch=master)](https://travis-ci.com/alexsocha/mipsplusplus)\n[![PyPI version](https://badge.fury.io/py/mipsplusplus.svg)](https://badge.fury.io/py/mipsplusplus)\n\n<img src=\"https://raw.githubusercontent.com/alexsocha/mipsplusplus/master/logo.svg?sanitize=true\" align=\"left\" hspace=\"10\" width=\"150px\">\n\n**MIPS++** is a low-level programming language based on the [MIPS architecture](https://en.wikipedia.org/wiki/MIPS_architecture). Its purpose is to generate faithful MIPS assembly code using a clearer syntax, with a focus on optimization. It is also a superset of MIPS.\n\nCurrent features include arithmetic expressions, data types, register aliases (i.e. local variables), conditional jumps and arrays.\n\n## Usage\n\nInstalling:\n```\npip install mipsplusplus\n```\n\nCommand line:\n```\npython -m mipsplusplus path/to/source.mpp -o output.asm\n--comments 1 --registers \"$t0\" \"$t1\" \"$t1\"\n```\n\nPython:\n```python\nimport mipsplusplus\n\ncompiled = mipsplusplus.compile(lines=source.readlines(),\n  comments=1, registers=['$t0', '$t1', '$t2'])\n```\n\n### Optional Parameters\n* **comments:** The level of commenting in the generated MIPS code.\n0 = None, 1 = Minimal, 2 = Almost every line. Defaults to 1.\n\n* **registers:** List of temporary registers (in order) for the compiler to use where necessary. These should not be used to store variables as they may be overridden. The compiler will indicate if more are required for any particular statement. Defaults to `[$t0, $t1, $t2]`.\n\n## Syntax Example\nThe following program converts a decimal number to an arbitrary base.\n```ruby\n.data\nbyte[30] digits\nstring numPrompt = \"Enter number: \"\nstring basePrompt = \"Enter base: \"\nstring convertedInfo = \"Converted: \"\n\n.text\n@alias $num = $t3, $base = $t4, $i = $t5\n\nprint numPrompt\n$num = input()\n\nprint basePrompt\n$base = input()\n\n$i = 0\ncalcLoop:\n  digits[$i] = $num % $base\n  $num = $num / $base\n\n  $i = $i + 1\n  goto calcLoop if $num > 0\n\nprint convertedInfo\nprintLoop:\n  $i = $i - 1\n  goto endPrintLoop if i < 0\n\n  @alias $digit = $t3\n  $digit = digits[$i]\n\n  goto printAsChar if $digit > 9\n\n  print $digit\n  goto printLoop\n\n  printAsChar:\n    print (55 + $digit) as char\n    goto printLoop\nendPrintLoop:\nexit\n```\n\n## Language Reference\n### Definitions\n```ruby\n.data\n# Numeric\nint x = 123456789 # 4 bytes\nshort y = -32000  # 2 bytes\nbyte z = 64       # 1 byte\nchar letter = 'C' # 1 byte\n\n# Addresses/arrays\nstring greeting = \"hello\"\nchar[20] name # Empty string with space for 20 characters\n\nint[] numbers = [20, -65, 42]\nbyte[30] byteArray\n\n.text\n# ...code\n```\n\n### Registers and Variables\n```ruby\n# Any register can be given an alias, which remains\n# for all following lines or until it is reassigned\n@alias $num = $t3, $array = $t4, $character = $t5\n\n# Direct register assignment\n$num = 42\n$character = 'K'\n\n# Loading from defined variables\n$num = x\n$array = numbers\n$character = letter\n\n# Saving to defined variables\nx = $num\nletter = 'M'\ny = letter # Uses ASCII value\n```\n\n### Operators\n```ruby\n# Standard\n$num = (x + y) / (z - 7)\n$num = neg $num * (y % 8)\n\n# Boolean logic\n$true = 1\n$false = 0\n$bool = not ($true and $false) nor $true xor ($true or $false)\n\n# Bitwise\n$num = (1 << 4) and ($num >> 1) # Zeros are shifted in\n$num = -8 >>> 2 # The sign bit is shifted in\n# Note that <<< is not an operator\n\n# Comparison\n$condition = z < 200\n# Note that this is the only comparison operator\n# which can be used in arbitrary expressions\n```\n\n### Addresses\n```ruby\n# Addresses\n$numAddress = addressof x # Requires explicit 'addressof' operator\n$stringAddress = greeting\n$arrayAddress = numbers\n\n$offsetAddress = $numbers + 4\n$offsetAddress = addressof $numbers[4] # Equivalent to previous line\n```\n\n### Arrays\n```ruby\n# Byte arrays\n$num = byteArray[3]\nbyteArray[4] = 42 + $num - z\n\n# Integer arrays\n# (indexes must be multiplied by the number\n# of bytes in the corresponding data type)\nnum = numbers[$index * 4] \nnumbers[24] = 32 # Sets the 6th element\n\n# Ambiguous arrays\n$array = someArray\n\n# - Explicit\n$num = $array[0] as int # Load value as int\n$array[4] as int = $num # Store value as int\n\n# - Implied\n$array[8] = 42 # Store int\n$array[9] = 42 as byte # Store byte\n$array[10] = $num + y + 3 # Store short\n$array[11] = $array[12] as char # Load and store char (byte)\n\n# - Combined\n$array1[13] as int = 6 * ($array2[$i * 2] as short) # Load short, store int\n$array3[14] = (22 - numbers[$i * 4]) as byte # Load int, store byte\n```\n\n### Control Flow\n```ruby\nlabel:\n  # ...\n\n# Jumping to labels\ngoto label\ngotolink label # Return address is stored in $ra\n\n# Jumping to addresses in registers\n$storedLabel = label # (addressof label)\ngoto $storedLabel\n\n# Conditional jumps\n# (supports all comparison operators)\ngoto label if x > 9\ngoto label if $num + 4 != x\ngoto $storedLabel if $num % 7 <= x / y\ngoto $storedLabel if $condition1 and x < 8 # ($condition1 and x < 8) > 0\n\n# - With link (only < 0 and >= 0)\ngotolink label if $num < 0\ngotolink $storedLabel if $num >= 0\n```\n\n### System Functions\n```ruby\n# Printing\nprint $num\nprint greeting\nprint $character as char\n\n# Input integer\n$num = input()\nx = input() + 6\ninput() # Value is stored in $v0\n\n# Input string\ninputstr name\ninputstr addressof $array[8]\ninputstr $location, 40 # Max length 40\n\n# Memory allocation\naddress = alloc(50) # Alocate 50 bytes, store first address as int\n$array = alloc(20) + 4 # Offset by 4\nalloc(80) # Address is stored in $v0\n\n# Exit\nexit\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/alexsocha/mipsplusplus", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "mipsplusplus", "package_url": "https://pypi.org/project/mipsplusplus/", "platform": "", "project_url": "https://pypi.org/project/mipsplusplus/", "project_urls": {"Homepage": "https://github.com/alexsocha/mipsplusplus"}, "release_url": "https://pypi.org/project/mipsplusplus/0.0.1b4/", "requires_dist": null, "requires_python": "", "summary": "A low-level programming language based on the MIPS architecture.", "version": "0.0.1b4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>MIPS++ Programming Language</h1>\n<p><a href=\"https://travis-ci.com/alexsocha/mipsplusplus\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/41a37341ebaa587f10bb1d643e6e5f61f04c0a85/68747470733a2f2f7472617669732d63692e636f6d2f616c6578736f6368612f6d697073706c7573706c75732e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://badge.fury.io/py/mipsplusplus\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a5faefcabc7fb654faacd60bc06d65ca05d6bbf5/68747470733a2f2f62616467652e667572792e696f2f70792f6d697073706c7573706c75732e737667\"></a></p>\n<img align=\"left\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b2f8ac14a58c93ca2d088de0191ec189619158ee/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f616c6578736f6368612f6d697073706c7573706c75732f6d61737465722f6c6f676f2e7376673f73616e6974697a653d74727565\" width=\"150px\">\n<p><strong>MIPS++</strong> is a low-level programming language based on the <a href=\"https://en.wikipedia.org/wiki/MIPS_architecture\" rel=\"nofollow\">MIPS architecture</a>. Its purpose is to generate faithful MIPS assembly code using a clearer syntax, with a focus on optimization. It is also a superset of MIPS.</p>\n<p>Current features include arithmetic expressions, data types, register aliases (i.e. local variables), conditional jumps and arrays.</p>\n<h2>Usage</h2>\n<p>Installing:</p>\n<pre><code>pip install mipsplusplus\n</code></pre>\n<p>Command line:</p>\n<pre><code>python -m mipsplusplus path/to/source.mpp -o output.asm\n--comments 1 --registers \"$t0\" \"$t1\" \"$t1\"\n</code></pre>\n<p>Python:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">mipsplusplus</span>\n\n<span class=\"n\">compiled</span> <span class=\"o\">=</span> <span class=\"n\">mipsplusplus</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"n\">lines</span><span class=\"o\">=</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">readlines</span><span class=\"p\">(),</span>\n  <span class=\"n\">comments</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">registers</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'$t0'</span><span class=\"p\">,</span> <span class=\"s1\">'$t1'</span><span class=\"p\">,</span> <span class=\"s1\">'$t2'</span><span class=\"p\">])</span>\n</pre>\n<h3>Optional Parameters</h3>\n<ul>\n<li>\n<p><strong>comments:</strong> The level of commenting in the generated MIPS code.\n0 = None, 1 = Minimal, 2 = Almost every line. Defaults to 1.</p>\n</li>\n<li>\n<p><strong>registers:</strong> List of temporary registers (in order) for the compiler to use where necessary. These should not be used to store variables as they may be overridden. The compiler will indicate if more are required for any particular statement. Defaults to <code>[$t0, $t1, $t2]</code>.</p>\n</li>\n</ul>\n<h2>Syntax Example</h2>\n<p>The following program converts a decimal number to an arbitrary base.</p>\n<pre><span class=\"o\">.</span><span class=\"n\">data</span>\n<span class=\"n\">byte</span><span class=\"o\">[</span><span class=\"mi\">30</span><span class=\"o\">]</span> <span class=\"n\">digits</span>\n<span class=\"n\">string</span> <span class=\"n\">numPrompt</span> <span class=\"o\">=</span> <span class=\"s2\">\"Enter number: \"</span>\n<span class=\"n\">string</span> <span class=\"n\">basePrompt</span> <span class=\"o\">=</span> <span class=\"s2\">\"Enter base: \"</span>\n<span class=\"n\">string</span> <span class=\"n\">convertedInfo</span> <span class=\"o\">=</span> <span class=\"s2\">\"Converted: \"</span>\n\n<span class=\"o\">.</span><span class=\"n\">text</span>\n<span class=\"vi\">@alias</span> <span class=\"vg\">$num</span> <span class=\"o\">=</span> <span class=\"vg\">$t3</span><span class=\"p\">,</span> <span class=\"vg\">$base</span> <span class=\"o\">=</span> <span class=\"vg\">$t4</span><span class=\"p\">,</span> <span class=\"vg\">$i</span> <span class=\"o\">=</span> <span class=\"vg\">$t5</span>\n\n<span class=\"nb\">print</span> <span class=\"n\">numPrompt</span>\n<span class=\"vg\">$num</span> <span class=\"o\">=</span> <span class=\"n\">input</span><span class=\"p\">()</span>\n\n<span class=\"nb\">print</span> <span class=\"n\">basePrompt</span>\n<span class=\"vg\">$base</span> <span class=\"o\">=</span> <span class=\"n\">input</span><span class=\"p\">()</span>\n\n<span class=\"vg\">$i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"ss\">calcLoop</span><span class=\"p\">:</span>\n  <span class=\"n\">digits</span><span class=\"o\">[</span><span class=\"vg\">$i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"vg\">$num</span> <span class=\"o\">%</span> <span class=\"vg\">$base</span>\n  <span class=\"vg\">$num</span> <span class=\"o\">=</span> <span class=\"vg\">$num</span> <span class=\"o\">/</span> <span class=\"vg\">$base</span>\n\n  <span class=\"vg\">$i</span> <span class=\"o\">=</span> <span class=\"vg\">$i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n  <span class=\"n\">goto</span> <span class=\"n\">calcLoop</span> <span class=\"k\">if</span> <span class=\"vg\">$num</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span>\n\n<span class=\"nb\">print</span> <span class=\"n\">convertedInfo</span>\n<span class=\"ss\">printLoop</span><span class=\"p\">:</span>\n  <span class=\"vg\">$i</span> <span class=\"o\">=</span> <span class=\"vg\">$i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n  <span class=\"n\">goto</span> <span class=\"n\">endPrintLoop</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span>\n\n  <span class=\"vi\">@alias</span> <span class=\"vg\">$digit</span> <span class=\"o\">=</span> <span class=\"vg\">$t3</span>\n  <span class=\"vg\">$digit</span> <span class=\"o\">=</span> <span class=\"n\">digits</span><span class=\"o\">[</span><span class=\"vg\">$i</span><span class=\"o\">]</span>\n\n  <span class=\"n\">goto</span> <span class=\"n\">printAsChar</span> <span class=\"k\">if</span> <span class=\"vg\">$digit</span> <span class=\"o\">&gt;</span> <span class=\"mi\">9</span>\n\n  <span class=\"nb\">print</span> <span class=\"vg\">$digit</span>\n  <span class=\"n\">goto</span> <span class=\"n\">printLoop</span>\n\n  <span class=\"ss\">printAsChar</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span> <span class=\"p\">(</span><span class=\"mi\">55</span> <span class=\"o\">+</span> <span class=\"vg\">$digit</span><span class=\"p\">)</span> <span class=\"n\">as</span> <span class=\"n\">char</span>\n    <span class=\"n\">goto</span> <span class=\"n\">printLoop</span>\n<span class=\"ss\">endPrintLoop</span><span class=\"p\">:</span>\n<span class=\"nb\">exit</span>\n</pre>\n<h2>Language Reference</h2>\n<h3>Definitions</h3>\n<pre><span class=\"o\">.</span><span class=\"n\">data</span>\n<span class=\"c1\"># Numeric</span>\n<span class=\"n\">int</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">123456789</span> <span class=\"c1\"># 4 bytes</span>\n<span class=\"n\">short</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">32000</span>  <span class=\"c1\"># 2 bytes</span>\n<span class=\"n\">byte</span> <span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"mi\">64</span>       <span class=\"c1\"># 1 byte</span>\n<span class=\"n\">char</span> <span class=\"n\">letter</span> <span class=\"o\">=</span> <span class=\"s1\">'C'</span> <span class=\"c1\"># 1 byte</span>\n\n<span class=\"c1\"># Addresses/arrays</span>\n<span class=\"n\">string</span> <span class=\"n\">greeting</span> <span class=\"o\">=</span> <span class=\"s2\">\"hello\"</span>\n<span class=\"n\">char</span><span class=\"o\">[</span><span class=\"mi\">20</span><span class=\"o\">]</span> <span class=\"nb\">name</span> <span class=\"c1\"># Empty string with space for 20 characters</span>\n\n<span class=\"n\">int</span><span class=\"o\">[]</span> <span class=\"n\">numbers</span> <span class=\"o\">=</span> <span class=\"o\">[</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">65</span><span class=\"p\">,</span> <span class=\"mi\">42</span><span class=\"o\">]</span>\n<span class=\"n\">byte</span><span class=\"o\">[</span><span class=\"mi\">30</span><span class=\"o\">]</span> <span class=\"n\">byteArray</span>\n\n<span class=\"o\">.</span><span class=\"n\">text</span>\n<span class=\"c1\"># ...code</span>\n</pre>\n<h3>Registers and Variables</h3>\n<pre><span class=\"c1\"># Any register can be given an alias, which remains</span>\n<span class=\"c1\"># for all following lines or until it is reassigned</span>\n<span class=\"vi\">@alias</span> <span class=\"vg\">$num</span> <span class=\"o\">=</span> <span class=\"vg\">$t3</span><span class=\"p\">,</span> <span class=\"vg\">$array</span> <span class=\"o\">=</span> <span class=\"vg\">$t4</span><span class=\"p\">,</span> <span class=\"vg\">$character</span> <span class=\"o\">=</span> <span class=\"vg\">$t5</span>\n\n<span class=\"c1\"># Direct register assignment</span>\n<span class=\"vg\">$num</span> <span class=\"o\">=</span> <span class=\"mi\">42</span>\n<span class=\"vg\">$character</span> <span class=\"o\">=</span> <span class=\"s1\">'K'</span>\n\n<span class=\"c1\"># Loading from defined variables</span>\n<span class=\"vg\">$num</span> <span class=\"o\">=</span> <span class=\"n\">x</span>\n<span class=\"vg\">$array</span> <span class=\"o\">=</span> <span class=\"n\">numbers</span>\n<span class=\"vg\">$character</span> <span class=\"o\">=</span> <span class=\"n\">letter</span>\n\n<span class=\"c1\"># Saving to defined variables</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"vg\">$num</span>\n<span class=\"n\">letter</span> <span class=\"o\">=</span> <span class=\"s1\">'M'</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">letter</span> <span class=\"c1\"># Uses ASCII value</span>\n</pre>\n<h3>Operators</h3>\n<pre><span class=\"c1\"># Standard</span>\n<span class=\"vg\">$num</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"n\">z</span> <span class=\"o\">-</span> <span class=\"mi\">7</span><span class=\"p\">)</span>\n<span class=\"vg\">$num</span> <span class=\"o\">=</span> <span class=\"n\">neg</span> <span class=\"vg\">$num</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">y</span> <span class=\"o\">%</span> <span class=\"mi\">8</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Boolean logic</span>\n<span class=\"vg\">$true</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"vg\">$false</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"vg\">$bool</span> <span class=\"o\">=</span> <span class=\"ow\">not</span> <span class=\"p\">(</span><span class=\"vg\">$true</span> <span class=\"ow\">and</span> <span class=\"vg\">$false</span><span class=\"p\">)</span> <span class=\"n\">nor</span> <span class=\"vg\">$true</span> <span class=\"n\">xor</span> <span class=\"p\">(</span><span class=\"vg\">$true</span> <span class=\"ow\">or</span> <span class=\"vg\">$false</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Bitwise</span>\n<span class=\"vg\">$num</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"p\">(</span><span class=\"vg\">$num</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"c1\"># Zeros are shifted in</span>\n<span class=\"vg\">$num</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">8</span> <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"mi\">2</span> <span class=\"c1\"># The sign bit is shifted in</span>\n<span class=\"c1\"># Note that &lt;&lt;&lt; is not an operator</span>\n\n<span class=\"c1\"># Comparison</span>\n<span class=\"vg\">$condition</span> <span class=\"o\">=</span> <span class=\"n\">z</span> <span class=\"o\">&lt;</span> <span class=\"mi\">200</span>\n<span class=\"c1\"># Note that this is the only comparison operator</span>\n<span class=\"c1\"># which can be used in arbitrary expressions</span>\n</pre>\n<h3>Addresses</h3>\n<pre><span class=\"c1\"># Addresses</span>\n<span class=\"vg\">$numAddress</span> <span class=\"o\">=</span> <span class=\"n\">addressof</span> <span class=\"n\">x</span> <span class=\"c1\"># Requires explicit 'addressof' operator</span>\n<span class=\"vg\">$stringAddress</span> <span class=\"o\">=</span> <span class=\"n\">greeting</span>\n<span class=\"vg\">$arrayAddress</span> <span class=\"o\">=</span> <span class=\"n\">numbers</span>\n\n<span class=\"vg\">$offsetAddress</span> <span class=\"o\">=</span> <span class=\"vg\">$numbers</span> <span class=\"o\">+</span> <span class=\"mi\">4</span>\n<span class=\"vg\">$offsetAddress</span> <span class=\"o\">=</span> <span class=\"n\">addressof</span> <span class=\"vg\">$numbers</span><span class=\"o\">[</span><span class=\"mi\">4</span><span class=\"o\">]</span> <span class=\"c1\"># Equivalent to previous line</span>\n</pre>\n<h3>Arrays</h3>\n<pre><span class=\"c1\"># Byte arrays</span>\n<span class=\"vg\">$num</span> <span class=\"o\">=</span> <span class=\"n\">byteArray</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">]</span>\n<span class=\"n\">byteArray</span><span class=\"o\">[</span><span class=\"mi\">4</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"mi\">42</span> <span class=\"o\">+</span> <span class=\"vg\">$num</span> <span class=\"o\">-</span> <span class=\"n\">z</span>\n\n<span class=\"c1\"># Integer arrays</span>\n<span class=\"c1\"># (indexes must be multiplied by the number</span>\n<span class=\"c1\"># of bytes in the corresponding data type)</span>\n<span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"n\">numbers</span><span class=\"o\">[</span><span class=\"vg\">$index</span> <span class=\"o\">*</span> <span class=\"mi\">4</span><span class=\"o\">]</span> \n<span class=\"n\">numbers</span><span class=\"o\">[</span><span class=\"mi\">24</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"mi\">32</span> <span class=\"c1\"># Sets the 6th element</span>\n\n<span class=\"c1\"># Ambiguous arrays</span>\n<span class=\"vg\">$array</span> <span class=\"o\">=</span> <span class=\"n\">someArray</span>\n\n<span class=\"c1\"># - Explicit</span>\n<span class=\"vg\">$num</span> <span class=\"o\">=</span> <span class=\"vg\">$array</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"n\">as</span> <span class=\"n\">int</span> <span class=\"c1\"># Load value as int</span>\n<span class=\"vg\">$array</span><span class=\"o\">[</span><span class=\"mi\">4</span><span class=\"o\">]</span> <span class=\"n\">as</span> <span class=\"n\">int</span> <span class=\"o\">=</span> <span class=\"vg\">$num</span> <span class=\"c1\"># Store value as int</span>\n\n<span class=\"c1\"># - Implied</span>\n<span class=\"vg\">$array</span><span class=\"o\">[</span><span class=\"mi\">8</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"mi\">42</span> <span class=\"c1\"># Store int</span>\n<span class=\"vg\">$array</span><span class=\"o\">[</span><span class=\"mi\">9</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"mi\">42</span> <span class=\"n\">as</span> <span class=\"n\">byte</span> <span class=\"c1\"># Store byte</span>\n<span class=\"vg\">$array</span><span class=\"o\">[</span><span class=\"mi\">10</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"vg\">$num</span> <span class=\"o\">+</span> <span class=\"n\">y</span> <span class=\"o\">+</span> <span class=\"mi\">3</span> <span class=\"c1\"># Store short</span>\n<span class=\"vg\">$array</span><span class=\"o\">[</span><span class=\"mi\">11</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"vg\">$array</span><span class=\"o\">[</span><span class=\"mi\">12</span><span class=\"o\">]</span> <span class=\"n\">as</span> <span class=\"n\">char</span> <span class=\"c1\"># Load and store char (byte)</span>\n\n<span class=\"c1\"># - Combined</span>\n<span class=\"vg\">$array1</span><span class=\"o\">[</span><span class=\"mi\">13</span><span class=\"o\">]</span> <span class=\"n\">as</span> <span class=\"n\">int</span> <span class=\"o\">=</span> <span class=\"mi\">6</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"vg\">$array2</span><span class=\"o\">[</span><span class=\"vg\">$i</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"n\">as</span> <span class=\"n\">short</span><span class=\"p\">)</span> <span class=\"c1\"># Load short, store int</span>\n<span class=\"vg\">$array3</span><span class=\"o\">[</span><span class=\"mi\">14</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">22</span> <span class=\"o\">-</span> <span class=\"n\">numbers</span><span class=\"o\">[</span><span class=\"vg\">$i</span> <span class=\"o\">*</span> <span class=\"mi\">4</span><span class=\"o\">]</span><span class=\"p\">)</span> <span class=\"n\">as</span> <span class=\"n\">byte</span> <span class=\"c1\"># Load int, store byte</span>\n</pre>\n<h3>Control Flow</h3>\n<pre><span class=\"ss\">label</span><span class=\"p\">:</span>\n  <span class=\"c1\"># ...</span>\n\n<span class=\"c1\"># Jumping to labels</span>\n<span class=\"n\">goto</span> <span class=\"n\">label</span>\n<span class=\"n\">gotolink</span> <span class=\"n\">label</span> <span class=\"c1\"># Return address is stored in $ra</span>\n\n<span class=\"c1\"># Jumping to addresses in registers</span>\n<span class=\"vg\">$storedLabel</span> <span class=\"o\">=</span> <span class=\"n\">label</span> <span class=\"c1\"># (addressof label)</span>\n<span class=\"n\">goto</span> <span class=\"vg\">$storedLabel</span>\n\n<span class=\"c1\"># Conditional jumps</span>\n<span class=\"c1\"># (supports all comparison operators)</span>\n<span class=\"n\">goto</span> <span class=\"n\">label</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"mi\">9</span>\n<span class=\"n\">goto</span> <span class=\"n\">label</span> <span class=\"k\">if</span> <span class=\"vg\">$num</span> <span class=\"o\">+</span> <span class=\"mi\">4</span> <span class=\"o\">!=</span> <span class=\"n\">x</span>\n<span class=\"n\">goto</span> <span class=\"vg\">$storedLabel</span> <span class=\"k\">if</span> <span class=\"vg\">$num</span> <span class=\"o\">%</span> <span class=\"mi\">7</span> <span class=\"o\">&lt;=</span> <span class=\"n\">x</span> <span class=\"o\">/</span> <span class=\"n\">y</span>\n<span class=\"n\">goto</span> <span class=\"vg\">$storedLabel</span> <span class=\"k\">if</span> <span class=\"vg\">$condition1</span> <span class=\"ow\">and</span> <span class=\"n\">x</span> <span class=\"o\">&lt;</span> <span class=\"mi\">8</span> <span class=\"c1\"># ($condition1 and x &lt; 8) &gt; 0</span>\n\n<span class=\"c1\"># - With link (only &lt; 0 and &gt;= 0)</span>\n<span class=\"n\">gotolink</span> <span class=\"n\">label</span> <span class=\"k\">if</span> <span class=\"vg\">$num</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span>\n<span class=\"n\">gotolink</span> <span class=\"vg\">$storedLabel</span> <span class=\"k\">if</span> <span class=\"vg\">$num</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span>\n</pre>\n<h3>System Functions</h3>\n<pre><span class=\"c1\"># Printing</span>\n<span class=\"nb\">print</span> <span class=\"vg\">$num</span>\n<span class=\"nb\">print</span> <span class=\"n\">greeting</span>\n<span class=\"nb\">print</span> <span class=\"vg\">$character</span> <span class=\"n\">as</span> <span class=\"n\">char</span>\n\n<span class=\"c1\"># Input integer</span>\n<span class=\"vg\">$num</span> <span class=\"o\">=</span> <span class=\"n\">input</span><span class=\"p\">()</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">input</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"mi\">6</span>\n<span class=\"n\">input</span><span class=\"p\">()</span> <span class=\"c1\"># Value is stored in $v0</span>\n\n<span class=\"c1\"># Input string</span>\n<span class=\"n\">inputstr</span> <span class=\"nb\">name</span>\n<span class=\"n\">inputstr</span> <span class=\"n\">addressof</span> <span class=\"vg\">$array</span><span class=\"o\">[</span><span class=\"mi\">8</span><span class=\"o\">]</span>\n<span class=\"n\">inputstr</span> <span class=\"vg\">$location</span><span class=\"p\">,</span> <span class=\"mi\">40</span> <span class=\"c1\"># Max length 40</span>\n\n<span class=\"c1\"># Memory allocation</span>\n<span class=\"n\">address</span> <span class=\"o\">=</span> <span class=\"n\">alloc</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">)</span> <span class=\"c1\"># Alocate 50 bytes, store first address as int</span>\n<span class=\"vg\">$array</span> <span class=\"o\">=</span> <span class=\"n\">alloc</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">4</span> <span class=\"c1\"># Offset by 4</span>\n<span class=\"n\">alloc</span><span class=\"p\">(</span><span class=\"mi\">80</span><span class=\"p\">)</span> <span class=\"c1\"># Address is stored in $v0</span>\n\n<span class=\"c1\"># Exit</span>\n<span class=\"nb\">exit</span>\n</pre>\n\n          </div>"}, "last_serial": 4171730, "releases": {"0.0.1b1": [{"comment_text": "", "digests": {"md5": "48de42400e3a579ef78346e3b9462a50", "sha256": "7cfd3895e3d484a1bde2eb8af407a44d5636468cb5012ef8367b56061c31db04"}, "downloads": -1, "filename": "mipsplusplus-0.0.1b1-py3-none-any.whl", "has_sig": false, "md5_digest": "48de42400e3a579ef78346e3b9462a50", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15606, "upload_time": "2018-08-11T11:42:17", "upload_time_iso_8601": "2018-08-11T11:42:17.526236Z", "url": "https://files.pythonhosted.org/packages/66/2c/87ca906d34b6f731ec596e6d2a73149a7817c0e66b3257cbc49789d3c75c/mipsplusplus-0.0.1b1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "992a7970767e51e5e2a0f06ca574e4d0", "sha256": "2cb5334a478be731e5ec1cfdf9ba4ee76b0d48aa03c487d0ec73e5bb84975168"}, "downloads": -1, "filename": "mipsplusplus-0.0.1b1.tar.gz", "has_sig": false, "md5_digest": "992a7970767e51e5e2a0f06ca574e4d0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12963, "upload_time": "2018-08-11T11:42:19", "upload_time_iso_8601": "2018-08-11T11:42:19.148664Z", "url": "https://files.pythonhosted.org/packages/8a/19/0e73af03bc68c1ce76d605aa07064582a83c346f4c2b64b000a61be61fc7/mipsplusplus-0.0.1b1.tar.gz", "yanked": false}], "0.0.1b2": [{"comment_text": "", "digests": {"md5": "2f58f3e0340429993f572b9245500fc3", "sha256": "1dd63115fdf6eee4876797be620bc9fd3ce5a90b842525b2838fb421f6a99f68"}, "downloads": -1, "filename": "mipsplusplus-0.0.1b2-py3-none-any.whl", "has_sig": false, "md5_digest": "2f58f3e0340429993f572b9245500fc3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16997, "upload_time": "2018-08-12T12:32:07", "upload_time_iso_8601": "2018-08-12T12:32:07.401753Z", "url": "https://files.pythonhosted.org/packages/61/4b/d0df53bc43f6117e05b553b8284a4d6d3af56c5d5962b3c7c9855c2aceea/mipsplusplus-0.0.1b2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6b54a5dab9384c71c99d230d61f7565f", "sha256": "663cfd4410640b0c33a974e04d6b0cf1e138b4254947d3f004888f3238fe8713"}, "downloads": -1, "filename": "mipsplusplus-0.0.1b2.tar.gz", "has_sig": false, "md5_digest": "6b54a5dab9384c71c99d230d61f7565f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15708, "upload_time": "2018-08-12T12:32:09", "upload_time_iso_8601": "2018-08-12T12:32:09.051245Z", "url": "https://files.pythonhosted.org/packages/3f/d6/0ccf0b2b0678943dd4144780b5eba0f33a17cd0b24cb22e43f30d4ad66ec/mipsplusplus-0.0.1b2.tar.gz", "yanked": false}], "0.0.1b3": [{"comment_text": "", "digests": {"md5": "430536c8cd209753ef1731d8c7dcb806", "sha256": "de3fbd7fb2025626273ce49be817b6c17587e9e24045feaf03fed0e7a29b129d"}, "downloads": -1, "filename": "mipsplusplus-0.0.1b3-py3-none-any.whl", "has_sig": false, "md5_digest": "430536c8cd209753ef1731d8c7dcb806", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 17012, "upload_time": "2018-08-13T06:45:26", "upload_time_iso_8601": "2018-08-13T06:45:26.921094Z", "url": "https://files.pythonhosted.org/packages/f9/46/2f0be23ea50d2f9a0cefd9b9be30c2638dde0bf41c44d19eb8630485bd48/mipsplusplus-0.0.1b3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6eeb98712dec01c441fbf37fadf256d1", "sha256": "231051272bf78ef46c5287c64a7e33b3aa7cb466504b0e814686f27edc6b6218"}, "downloads": -1, "filename": "mipsplusplus-0.0.1b3.tar.gz", "has_sig": false, "md5_digest": "6eeb98712dec01c441fbf37fadf256d1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15728, "upload_time": "2018-08-13T06:45:29", "upload_time_iso_8601": "2018-08-13T06:45:29.474424Z", "url": "https://files.pythonhosted.org/packages/f8/ea/adac1c8f50c5a7a1b2dac42420589701e64d12a0f42d3b6ac84619ff313c/mipsplusplus-0.0.1b3.tar.gz", "yanked": false}], "0.0.1b4": [{"comment_text": "", "digests": {"md5": "cf636ebb59e06d4578c3e6b1ef0edd0b", "sha256": "a9c25f60167ac39f2daac72e20682336d6726c42a24fe3ddb10faae5f990f059"}, "downloads": -1, "filename": "mipsplusplus-0.0.1b4-py3-none-any.whl", "has_sig": false, "md5_digest": "cf636ebb59e06d4578c3e6b1ef0edd0b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 17069, "upload_time": "2018-08-15T04:26:30", "upload_time_iso_8601": "2018-08-15T04:26:30.202765Z", "url": "https://files.pythonhosted.org/packages/05/7a/1e1735434aaa7fd9af0ebb30ee014ca04f9d6e7265f203d7c75c30d9ad12/mipsplusplus-0.0.1b4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b357cef79664e0e77730dc93b0621d74", "sha256": "de38fe3cdf5b92f05ec53aaa63fad0d0e89286019d70ae0d312b7f9060eab9ab"}, "downloads": -1, "filename": "mipsplusplus-0.0.1b4.tar.gz", "has_sig": false, "md5_digest": "b357cef79664e0e77730dc93b0621d74", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15787, "upload_time": "2018-08-15T04:26:31", "upload_time_iso_8601": "2018-08-15T04:26:31.957566Z", "url": "https://files.pythonhosted.org/packages/1a/d7/9fec9acb430071929be1eed2e01942660243e8ebe44f2caf60479a3aa696/mipsplusplus-0.0.1b4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "cf636ebb59e06d4578c3e6b1ef0edd0b", "sha256": "a9c25f60167ac39f2daac72e20682336d6726c42a24fe3ddb10faae5f990f059"}, "downloads": -1, "filename": "mipsplusplus-0.0.1b4-py3-none-any.whl", "has_sig": false, "md5_digest": "cf636ebb59e06d4578c3e6b1ef0edd0b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 17069, "upload_time": "2018-08-15T04:26:30", "upload_time_iso_8601": "2018-08-15T04:26:30.202765Z", "url": "https://files.pythonhosted.org/packages/05/7a/1e1735434aaa7fd9af0ebb30ee014ca04f9d6e7265f203d7c75c30d9ad12/mipsplusplus-0.0.1b4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b357cef79664e0e77730dc93b0621d74", "sha256": "de38fe3cdf5b92f05ec53aaa63fad0d0e89286019d70ae0d312b7f9060eab9ab"}, "downloads": -1, "filename": "mipsplusplus-0.0.1b4.tar.gz", "has_sig": false, "md5_digest": "b357cef79664e0e77730dc93b0621d74", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15787, "upload_time": "2018-08-15T04:26:31", "upload_time_iso_8601": "2018-08-15T04:26:31.957566Z", "url": "https://files.pythonhosted.org/packages/1a/d7/9fec9acb430071929be1eed2e01942660243e8ebe44f2caf60479a3aa696/mipsplusplus-0.0.1b4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:10 2020"}