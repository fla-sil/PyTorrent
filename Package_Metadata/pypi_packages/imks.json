{"info": {"author": "Marco Lombardi", "author_email": "marco.lombardi@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Framework :: IPython", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Scientific/Engineering :: Physics"], "description": "iMKS -- An advanced physical quantity calculator\n================================================\n\niMKS is an IPython extension to allows the use of physical quantities\n(Value's) in mathematical expressions.  A physical quantity is simply a number\n(typically, a float number) followed by a unit specification.  Within iMKS,\none can use physical quantities in normal expressions: the result will be a\nphysical quantity with the correct unit.\n\nMain Features\n-------------\n\n* Allow the use of physical quantities in mathematical expressions and\n  performs consistency checks (so that, for example, an error is generated if\n  one tries to add a length with a time).\n\n* Unit systems make it easy to perform conversions of physical quantities in\n  different units.  A unit system provides a list of units that should be\n  used, alone or in combination, to represent physical values.  Large unit\n  systems are effectively useful to define preferences in unit\n  representations.\n\n* Completely modular: one can define base units, prefixes, derived units, and\n  unit systems using magic commands.  Definitions can be stored in an external\n  file for reuse.\n\n* Currencies are considered as physical units.  Automatically retrieves a\n  large list of currencies and exchange rates from openexchangerates.org and\n  stores them in a file for offline use.\n\n* A list of physical constants can be retrieved from the NIST server\n  http://physics.nist.gov/constants and are available as variable in\n  interactive mode.\n\n* Add autocompletion for units and constants.\n\n* Allow the use of documentation strings for all quantities (base units,\n  prefixes, units, unit systems, and values) using the ... # \"doc string\"\n  notation.\n\n* Optionally allow the use of the standard exponent (caret, ^) in mathematical\n  expressions in addition to the Python notation (**).  Also, optionally allow\n  the use of unicode characters in identifiers, units, and prefixes.\n\n* Physical quantities are displayed in a proper way (using the LaTeX notation)\n  in the notebook.\n\n* Allow the use of \"lazy\" quantities (variables, units, prefixes) whose value is\n  evaluated each time the quantity is required.\n\n* Add an easy way to write documentation strings for any quantity, including\n  variables.\n\n* Several mathematical engines can be used: the standard Python math module,\n  mpmath, fpmath (mpmath with fixed point arithmetic), numpy, and umath (based\n  on the uncertanties package), soerp (higher order error analysis), and mcerp\n  (Monte Carlo error analysis).  The engines are used to perform calculations\n  involving mathematical functions.\n\n* Engines with error analysis (umath, soerp, and mcerp) will keep track of the\n  error propagation within all define variables or physical constants.\n\n* Advanced input transformations and output formats for special quantities such\n  as angles in sexagesimal format, times, dates...\n  \nUse of iMKS\n-----------\n\niMKS extends the standard Python syntax in several ways:\n\n* Physical quantities can be entered using the format 9.8[m s^-2] or\n  9.8[m/s^2], i.e. with a number followed by a unit specification in brackets.\n  In simple cases, quantities can also be entered without the brackets:\n  9.8 m/s^2 or 9.8 m s^-2.  This shorter notation however can generate\n  ambiguities when the quantity is exponentiated (2m^2 is 2[m^2], while 2[m]^2\n  is 4[m^2]) or when a unit has the same name of a variable (12 km/h is a\n  speed, 12[km/h] or 12[km] over the Planck constant?).  Moreover, in the\n  shorter notation parentheses in units, such as 3[m/(s K)], are not accepted.\n\n* A unit specification follows a standard notation: it is a space-separated\n  list of prefixed units followed by an optional exponent.  A prefixed unit is\n  a unit with a prefix, such as [km] = prefix k + simple unit m.  The exponent\n  in the unit must be a simple number or a fraction: it cannot involve any\n  other term (for example, [km^a] is not a valid unit, while [km^2/3] is).  In\n  a unit specification one can use an arbitrary number of parentheses; within\n  a parenthesis, a single division can be used, as in 9.8[m/s^2]. Additionally,\n  a unit specification can contain (at most) one divide (/) sign: in this case\n  all units following the sign will have their exponents reversed.\n\n* Physical quantities can be used in expressions with the standard operators.\n  \n* The result of an expression can be converted into a different unit by using\n  the @ operator::\n\n  > 12 m + 3 cm @ km --> 0.01203[km]\n\n  Multiple units can be used after the @ operator: in that case, they are\n  combined as necessary to obtain the requested quantity::\n\n  > 20[m/s] @ [km|hour] --> 72.0[km hour^-1]\n\n  When the quantity can be represented using multiple combinations, the\n  shorter one is used (i.e., the one that involves the smallest number of\n  elements in the list at the right of the @ operator)::\n\n  > 20[m/s] @ [km|hour|mph] --> 44.738725841088[mph]\n\n* In some cases, it might be useful to use a variable as a unit.  To do this,\n  one can use single quotes around a variable name in the unit specification::\n\n  > 5[s 'c'] @ [km] --> 1498962.29[km]\n  > 3['g'] --> 29.41995[m s^-2]\n\n* The same operation can be performed in the argument of the at (@) operator::\n\n  > 300000[km] @ [s 'c'] --> 1.00069228559446[s 'c']\n  > 1e30[kg] @ ['c'|'G'] --> 742.564845009288['c'^2 m 'G'^-1]\n  > 1K @ ['k'|eV] --> 8.61733238496096e-5[eV 'k'^-1]\n\n* The output unit, set by the @ operator, can also contain double quoted\n  variables.  In this case the value is completely transformed using the\n  appropriate combination of the variables, thus removing any appearance of\n  the variable in the final result.  This technique generally changes the\n  unit of the quantity (and not only the displayed unit)::\n\n  > 300000[km] @ [s|\"c\"] --> 1.00069228559446[s]\n  > 1e30[kg] @ [\"c\"|\"G\"] --> 742.564845009288[m]\n  \n* iMKS understands special units, such as the temperature related ones, that\n  are defined together with a zero point, i.e. in terms of an affine\n  transformation.  Quantities involving these units alone are called absolute::\n\n  > 300[K] @ [Celsius] --> 26.85[Celsius]\n  > 122\u00b0F @ \u00b0C --> 50.0[\u00b0C]\n\n  Absolute quantities can be made relative (and vice-versa) by using the tilde\n  (~) operator.  For example, 300[K] is understood as an absolute temperature,\n  but ~300[K] as a relative one (i.e. a temperature difference)::\n\n  > ~300[K] @ [Celsius] --> ~300.0[Celsius]\n\n  Another example of absolute quantities are calendar dates or datetimes::\n\n  > %load_imks_ext calendars\n  > Egyptian(\"today\") + 2[day] --> 1 First of Akhet (Thoth) 2764\n\n* The @ operator can be used to force the display of a result using a specific\n  prefix or a set of prefixes.  For this, one can just specify the desired\n  prefix(es) after the @ inside the brackets::\n\n  > 1200[s] @ [k] --> 1.2[ks]\n\n  If multiple prefixes are used, the most convenient one is selected::\n  \n  > 1200[s] @ [k|M] --> 1.2[ks]\n\n  A dot (.) can be used to specify that no prefix is also accepted; a star (*)\n  to select all known prefixes::\n\n  > 8[m] @ [.|k|M] --> 8.0[m]\n  > 0.12[cm] @ [m|*] --> 1.2[mm]\n\n  Note that if a prefix has the same name as a valid unit, one needs to use a\n  star after the prefix name, to indicate that the name must be understood as a\n  prefix rather than a unit::\n\n  > 12[cm] @ [m] --> 0.12[m]\n  > 12[cm] @ [m*] --> 120.0[mm]\n\n  The star can also be used within a single unit to indicate that an arbitrary\n  prefix is allowed::\n\n  > 1200[m] @ [*m] --> 12.0[km]\n\n* Unit systems work just like list of units that can be used after the @\n  operator::\n\n  > 72[km/hour] @ [SI] --> 20.0[m s^-1]\n\n  A star prepended or appended to a unit system indicates that a prefix among\n  all known ones can be used to make the expression simpler; the same effect is\n  obtained if the star is specified within the brackets with the unit system::\n\n  > 5600[K] @ [*SI] --> 5.6[kK]\n  > 5600[K] @ [SI|*] --> 5.6[kK]\n\n* Unit systems containing multiple units are especially convenient to reduce\n  expressions to the simplest form::\n\n  > %newsystem easy=[m|s|kg|K|A|lx|mol|EUR|N|J|W|Pa|C|V|ohm|F|H|T|lx]\n  > 6.63e-34[kg m^2 s^-1] @ [easy] --> 6.63e-34[s J]\n\n* Unit systems can also contain variable units: this is especially useful to\n  define natural unit systems::\n\n  > %newsystem planck=[\"c\"|\"hbar\"|\"G\"|\"ke\"|\"k\"] # \"Planck's natural system\"\n  > 1[m] @ [planck] --> 6.18735589978243e+34\n\n  The reverse conversion can be performed by indicating the output unit at the\n  beginning of the unit specification, and by adding the unit system::\n\n  > 6.2e34 @ [m|planck] --> 1.00204353853607[m]\n  > 1 @ [kg|planck] --> 2.17650925244531e-8[kg]\n\n  Note that this notation is an exception to the general rule that pure numbers\n  are not influenced by unit specifications.  Note also that the order is\n  relevant here: first the final unit, than all the natural system::\n\n  > 1 @ [planck|kg] --> 1\n  > 1 @ [kg/m|\"c\"|\"G\"] --> 1.34668373640485e+27[kg m^-1]\n  > 1 @ [kg|m|\"c\"|\"G\"] --> 1\n\n* When a natural unit system is used enclosed within single or double quotes,\n  all the quotes of the unit system are replaced by the one used: hence,\n  ['planck'] is identical to ['c'|'hbar'|'G'|'ke'|'k'].  This is useful to\n  explicitly show all the converting factors in the result::\n\n  > 1 @ [kg|'planck'] --> 2.17650925244531e-8['G'^1/2 'c'^-1/2 'hbar'^-1/2 kg]\n  > 2.17650925244531e-8['G'^1/2 'c'^-1/2 'hbar'^-1/2 kg] --> 0.999999999999999\n  \n* The @ operator can also be used in variable definitions to set the default\n  display unit to be used for a variable::\n\n  > v = 20[m/s] @ [km|hour]\n  > v --> 72.0[km hour^-1]\n\n* When an engine with error analysis is used (umath, soerp, or mcerp), the\n  special syntax value +/- error can be used to input quantities with errors::\n\n  > %imks -c umath\n  > %reset\n  > v = (3+/-0.1)[m/s]\n  > v^2 @ [mph] --> (45.0+/-3.0)[mph^2]\n\n  Uncertainties are silently ignored with engines not supporting them.  The\n  same quantity, (3+/-0.1)[m/s] can also be entered without parentheses,\n  3+/-0.1m/s, using the \u00b1 sign instead of the +/-, or using a shorter notation\n  3.0(1)[m/s] (see uncertainties for a list of formats accepted). \n\n* Correlation among variables is automatically taken into account::\n\n  > w = (3+/-0.1)[m/s]\n  > v + w --> (6.00+/-0.14)[m s^-1]\n  > v + v --> (6.00+/-0.20)[m s^-1]\n\n* Input transformer make it easy to enter special quantities such as\n  sexagesimal angles or times::\n\n  > 18d 24' 32\" --> 0.321295722745\n  > 12h 34m 56s --> 45296.0[s]\n\n  The reverse is also possible using output formats::\n\n  > 1[rad] @ [dms] --> 57d 17' 44.806s\"\n  > 10[ks] @ [hms] --> 2h 46m 40s\n  \n* Documentation strings can be entered even for variables::\n\n  > v = 50[km/hour] # \"Standard maximum speed within towns\"\n\n\nConfiguration file\n------------------\n\nWhen launched, iMKS load definitions from the configuration file Startup.imks.\nThis file is searched in the current directory, and if not found in the\n~/.imks directory.  The file should contain the standard definitions that one\nis likely to need for any computation.  Typically the file uses the following\nmagic commands:\n\n%newbaseunit <name>\n  Define a new base unit.  Base units are the building blocks for all\n  subsequent units definitions.  A base unit does not have a value: for\n  example, one cannot express a meter in any other unit if no unit of length\n  is known.\n\n%newbasecurrency <name>\n  Define a new base currency, used for all currency conversions.  A base\n  currency is also a base unit.\n\n%newprefix <name>=<expression>\n  Define a new prefix.  The <expression> value evaluate to a simple number.\n\n%newunit <name>=<expression>\n  Define a new unit.  <expression> should evaluate to a Value'd number.  To\n  define a new absolute unit, expression should evaluate to a 2-tuple with\n  identical units (indicating the zero-point, and the scale).\n\n%newsystem <name>=[u1], [u2], ...\n  Define a new unit system.  A unit system is simply a list of units.\n\n%defaultsystem <name>\n  Set the unit system to use in case no @ is used.\n\n%newtransformer <name>=\"regex\":<transformer>\n  Define a new input transformer: the regular expression regex is applied to\n  each input line, and if a match is found the <transformer> function is\n  called together with all named matching groups which must return the\n  transformed input.\n\n%newformat <name>=<transformer>\n  Define a new output format.  When <name> is entered (alone) in a unit\n  specification, <transformer> is called with the result of the expression: it\n  must return a string that will be displayed on the screen.\n  \n\nOther magic commands\n--------------------\n\n%imks [<options>]\n  Show this help page or set configuration options for iMKS.\n\n%delprefix, %delunit, %delsystem, %deltransformer, or %delformat <name>\n  Delete a previously define prefix, unit, unit system, transformer, or format.\n\n%lazy <name>=<expression>\n  Define the variable <name> as <expression> lazily: that is, <expression> is\n  evaluated only when <name> is used or displayed.  This is implemented by\n  making <name> a function with no arguments, and by automatically adding a\n  function call name() when name is used in the input.\n\n%dellazy <name>\n  Delete a previously defined %lazy variable.\n\n%lazyvalue <name>=<expression>\n  Define the variable <name> as <expression> lazily: that is, <expression> is\n  evaluated only when <name> is used or displayed.  This only works for simple\n  values, and not for more general objects such as %lazy.\n\n%lazyprefix <name>=<expression>\n  Define a lazy prefix (whose <expression> is evaluate only when the prefix is\n  used).\n\n%lazyunit <name>=<expression>\n  Define a lazy unit (whose <expression> is evaluated only when the unit is\n  used).\n\n%compatible <stuff>\n  Find out the known variables or units that are compatible to <stuff>.\n  <stuff> can be either a unit (in brackets) or an expression.\n\n%load_imks <filename>\n  Load an external <filename> with definitions in iMKS format.\n\n%load_imks_ext <filename>\n  Load an imks extension.\n\n%uinfo <name>\n  Display an help page for a prefix, unit, or unit system.  This is the\n  equivalent of %pinfo (which works for objects in the user namespace).  A\n  short notation for %uinfo <name> is <name>! (i.e., the name of an imks\n  object followed by the exclamation mark).  When used with the -a flag,\n  as in %uinfo -a <text>, shows all quantities with <text> in their docstring.\n  The same effect is achieved using <text>!!\n\n%pickle <filename>\n  Save all current variables into a filename, in the Python pickle format.\n\n%unpickle <filename>\n  Load all previously %pickle'd variables from a filename.\n\n%reset\n  Perform a full reset of the iMKS interpreter.\n\n\nExtensions\n----------\n\niMKS comes with a number of extensions that define new commands, new\nvariables, or new units.  Extensions are loaded with the command\n%load_imks_ext.  The currently defined extensions are\n\n* calendars: defines several new functions, one for each calendar (for example\n  Gregorian, Julian, Roman, Egyptian...).  Each calendar accepts a date in\n  several formats: as an integer (number of days from 1 January 1 C.E.), one of\n  the strings \"today\", \"tomorrow\", \"yesterday\", or \"now\", as a year followed by\n  a holiday name such as Gregorian(2017, \"Easter\"), or as a full year (with a\n  number of arguments depending on the calendar).  Optionally, one can also\n  add a time, counted from midnight, noon, sunset, or sunrise depending on the\n  specification of the calendar.  When calendars are loaded, one can input a\n  date using dot-separated integers.  For example, 1973.5.7 is interpreted as\n  May 7th, 1973.  The default calendar used to interpret dates is the Gregorian\n  one, but it can be changed using %imks -d <calendar>.  A date can be also\n  followed by a time, in the format hh:mm[:ss.d].\n\n* constants: loads a large list of constants from the NIST database.  Constants\n  are then inserted into the variable const, a dictionary.\n\n* currencies: loads a large list of currencies from the online database\n  openexachangerages.org.  Currencies are then used as usual units.  Note that\n  in order this to work, you first need to set a variable called\n  openexchangerates_id as a string holding your id.\n\n* geolocation: defines two functions to set the current geographic location and\n  to retrieve it.\n\n* jpl: loads the JPL database and creates two dictionaries, planets and moons,\n  where it stores the physical and orbital data.  Additionally, it defines a\n  function called minorplanet, which allows one to search a minor body database.\n\n* wiki: experimental interface to Wikipedia.\n\n  \nInternals\n---------\n\nInternally, iMKS works by converting an input string into Python expressions.\nThe following rules are used:\n\n* Physical quantities are converted into Value's::\n\n  > 72[km hour^-1] --> Value(72,\"km hour^-1\")\n\n* The @ operator is converted into the | operator, and what follows is put in\n  a unit System::\n\n  > 72[km hour^-1] @ [m], [s] --> Value(72,\"km hour^-1\") | System(\"m\", \"s\")\n\n* Quoted comments, used to enter documentation strings, are transformed into\n  the & operator followed by a Doc object::\n\n  > a=2 # \"Simple string\" --> a=2 & Doc(\"Simple string\")\n\n* Normal Python operator precedence applies to @=| and to #=&: that is, @ has\n  a quite low precedence, which makes it possible to write expressions like::\n\n  > v = 15[m/s] + 10[m]/2[s] @ [km/hour]\n\n  with the unit specification after @ applying to the result of the other\n  operations.  Note also that since ``&`` binds stronger than ``|``, in theory a\n  # documentation string after the @ operator would apply to the unit\n  specification, and not the the expression: however, this is handled\n  internally by System (that is, the documentation string that System gets\n  from the #=& operator is actually transferred to the result of the unit\n  conversion).\n\n* The ! operator, if used at the end of a string, is converted into a %uinfo\n  magic (this is similar to the ? operator, that is converted by ipython into\n  a %pinfo magic)::\n\n  > hour! --> %uinfo hour\n\n  If used alone, instead, it is equivalent to %imks -h.  Note that the same !\n  symbol can still be used to perform shell operations if used at the beginning\n  of a line::\n\n  > !ls\n\n  Two exclamation marks are converted into the %uinfo -a magic::\n\n  > mile!! --> mile, mph, nmi, mi\n\n* Unicode characters appearing outside strings are converted into strings of \n  the form _uTf_xx_xx_xx..., where each xx is the hexadecimal representation\n  of a byte of the character in UTF8 encoding.\n\n* Value, System, and Doc are defined in units.py, and for these objects the\n  standard operators are redefined to include tracking of physical units.\n\n* If necessary, one can directly use the Value, System, and Doc objects to\n  make more complicated expressions.\n\n* The know prefixes, units, and unit systems are stored in the dictionaries\n  prefixes, units, and systems, freely accessible from the user space.\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/astrozot/imks", "keywords": "units physics calculator", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "imks", "package_url": "https://pypi.org/project/imks/", "platform": "", "project_url": "https://pypi.org/project/imks/", "project_urls": {"Homepage": "https://github.com/astrozot/imks"}, "release_url": "https://pypi.org/project/imks/1.2.6/", "requires_dist": null, "requires_python": "", "summary": "An ipython extension to make computations with units", "version": "1.2.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>iMKS is an IPython extension to allows the use of physical quantities\n(Value\u2019s) in mathematical expressions.  A physical quantity is simply a number\n(typically, a float number) followed by a unit specification.  Within iMKS,\none can use physical quantities in normal expressions: the result will be a\nphysical quantity with the correct unit.</p>\n<div id=\"main-features\">\n<h2>Main Features</h2>\n<ul>\n<li>Allow the use of physical quantities in mathematical expressions and\nperforms consistency checks (so that, for example, an error is generated if\none tries to add a length with a time).</li>\n<li>Unit systems make it easy to perform conversions of physical quantities in\ndifferent units.  A unit system provides a list of units that should be\nused, alone or in combination, to represent physical values.  Large unit\nsystems are effectively useful to define preferences in unit\nrepresentations.</li>\n<li>Completely modular: one can define base units, prefixes, derived units, and\nunit systems using magic commands.  Definitions can be stored in an external\nfile for reuse.</li>\n<li>Currencies are considered as physical units.  Automatically retrieves a\nlarge list of currencies and exchange rates from openexchangerates.org and\nstores them in a file for offline use.</li>\n<li>A list of physical constants can be retrieved from the NIST server\n<a href=\"http://physics.nist.gov/constants\" rel=\"nofollow\">http://physics.nist.gov/constants</a> and are available as variable in\ninteractive mode.</li>\n<li>Add autocompletion for units and constants.</li>\n<li>Allow the use of documentation strings for all quantities (base units,\nprefixes, units, unit systems, and values) using the \u2026 # \u201cdoc string\u201d\nnotation.</li>\n<li>Optionally allow the use of the standard exponent (caret, ^) in mathematical\nexpressions in addition to the Python notation (**).  Also, optionally allow\nthe use of unicode characters in identifiers, units, and prefixes.</li>\n<li>Physical quantities are displayed in a proper way (using the LaTeX notation)\nin the notebook.</li>\n<li>Allow the use of \u201clazy\u201d quantities (variables, units, prefixes) whose value is\nevaluated each time the quantity is required.</li>\n<li>Add an easy way to write documentation strings for any quantity, including\nvariables.</li>\n<li>Several mathematical engines can be used: the standard Python math module,\nmpmath, fpmath (mpmath with fixed point arithmetic), numpy, and umath (based\non the uncertanties package), soerp (higher order error analysis), and mcerp\n(Monte Carlo error analysis).  The engines are used to perform calculations\ninvolving mathematical functions.</li>\n<li>Engines with error analysis (umath, soerp, and mcerp) will keep track of the\nerror propagation within all define variables or physical constants.</li>\n<li>Advanced input transformations and output formats for special quantities such\nas angles in sexagesimal format, times, dates\u2026</li>\n</ul>\n</div>\n<div id=\"use-of-imks\">\n<h2>Use of iMKS</h2>\n<p>iMKS extends the standard Python syntax in several ways:</p>\n<ul>\n<li><p>Physical quantities can be entered using the format 9.8[m s^-2] or\n9.8[m/s^2], i.e. with a number followed by a unit specification in brackets.\nIn simple cases, quantities can also be entered without the brackets:\n9.8 m/s^2 or 9.8 m s^-2.  This shorter notation however can generate\nambiguities when the quantity is exponentiated (2m^2 is 2[m^2], while 2[m]^2\nis 4[m^2]) or when a unit has the same name of a variable (12 km/h is a\nspeed, 12[km/h] or 12[km] over the Planck constant?).  Moreover, in the\nshorter notation parentheses in units, such as 3[m/(s K)], are not accepted.</p>\n</li>\n<li><p>A unit specification follows a standard notation: it is a space-separated\nlist of prefixed units followed by an optional exponent.  A prefixed unit is\na unit with a prefix, such as [km] = prefix k + simple unit m.  The exponent\nin the unit must be a simple number or a fraction: it cannot involve any\nother term (for example, [km^a] is not a valid unit, while [km^2/3] is).  In\na unit specification one can use an arbitrary number of parentheses; within\na parenthesis, a single division can be used, as in 9.8[m/s^2]. Additionally,\na unit specification can contain (at most) one divide (/) sign: in this case\nall units following the sign will have their exponents reversed.</p>\n</li>\n<li><p>Physical quantities can be used in expressions with the standard operators.</p>\n</li>\n<li><p>The result of an expression can be converted into a different unit by using\nthe @ operator:</p>\n<pre>&gt; 12 m + 3 cm @ km --&gt; 0.01203[km]\n</pre>\n<p>Multiple units can be used after the @ operator: in that case, they are\ncombined as necessary to obtain the requested quantity:</p>\n<pre>&gt; 20[m/s] @ [km|hour] --&gt; 72.0[km hour^-1]\n</pre>\n<p>When the quantity can be represented using multiple combinations, the\nshorter one is used (i.e., the one that involves the smallest number of\nelements in the list at the right of the @ operator):</p>\n<pre>&gt; 20[m/s] @ [km|hour|mph] --&gt; 44.738725841088[mph]\n</pre>\n</li>\n<li><p>In some cases, it might be useful to use a variable as a unit.  To do this,\none can use single quotes around a variable name in the unit specification:</p>\n<pre>&gt; 5[s 'c'] @ [km] --&gt; 1498962.29[km]\n&gt; 3['g'] --&gt; 29.41995[m s^-2]\n</pre>\n</li>\n<li><p>The same operation can be performed in the argument of the at (@) operator:</p>\n<pre>&gt; 300000[km] @ [s 'c'] --&gt; 1.00069228559446[s 'c']\n&gt; 1e30[kg] @ ['c'|'G'] --&gt; 742.564845009288['c'^2 m 'G'^-1]\n&gt; 1K @ ['k'|eV] --&gt; 8.61733238496096e-5[eV 'k'^-1]\n</pre>\n</li>\n<li><p>The output unit, set by the @ operator, can also contain double quoted\nvariables.  In this case the value is completely transformed using the\nappropriate combination of the variables, thus removing any appearance of\nthe variable in the final result.  This technique generally changes the\nunit of the quantity (and not only the displayed unit):</p>\n<pre>&gt; 300000[km] @ [s|\"c\"] --&gt; 1.00069228559446[s]\n&gt; 1e30[kg] @ [\"c\"|\"G\"] --&gt; 742.564845009288[m]\n</pre>\n</li>\n<li><p>iMKS understands special units, such as the temperature related ones, that\nare defined together with a zero point, i.e. in terms of an affine\ntransformation.  Quantities involving these units alone are called absolute:</p>\n<pre>&gt; 300[K] @ [Celsius] --&gt; 26.85[Celsius]\n&gt; 122\u00b0F @ \u00b0C --&gt; 50.0[\u00b0C]\n</pre>\n<p>Absolute quantities can be made relative (and vice-versa) by using the tilde\n(~) operator.  For example, 300[K] is understood as an absolute temperature,\nbut ~300[K] as a relative one (i.e. a temperature difference):</p>\n<pre>&gt; ~300[K] @ [Celsius] --&gt; ~300.0[Celsius]\n</pre>\n<p>Another example of absolute quantities are calendar dates or datetimes:</p>\n<pre>&gt; %load_imks_ext calendars\n&gt; Egyptian(\"today\") + 2[day] --&gt; 1 First of Akhet (Thoth) 2764\n</pre>\n</li>\n<li><p>The @ operator can be used to force the display of a result using a specific\nprefix or a set of prefixes.  For this, one can just specify the desired\nprefix(es) after the @ inside the brackets:</p>\n<pre>&gt; 1200[s] @ [k] --&gt; 1.2[ks]\n</pre>\n<p>If multiple prefixes are used, the most convenient one is selected:</p>\n<pre>&gt; 1200[s] @ [k|M] --&gt; 1.2[ks]\n</pre>\n<p>A dot (.) can be used to specify that no prefix is also accepted; a star (*)\nto select all known prefixes:</p>\n<pre>&gt; 8[m] @ [.|k|M] --&gt; 8.0[m]\n&gt; 0.12[cm] @ [m|*] --&gt; 1.2[mm]\n</pre>\n<p>Note that if a prefix has the same name as a valid unit, one needs to use a\nstar after the prefix name, to indicate that the name must be understood as a\nprefix rather than a unit:</p>\n<pre>&gt; 12[cm] @ [m] --&gt; 0.12[m]\n&gt; 12[cm] @ [m*] --&gt; 120.0[mm]\n</pre>\n<p>The star can also be used within a single unit to indicate that an arbitrary\nprefix is allowed:</p>\n<pre>&gt; 1200[m] @ [*m] --&gt; 12.0[km]\n</pre>\n</li>\n<li><p>Unit systems work just like list of units that can be used after the @\noperator:</p>\n<pre>&gt; 72[km/hour] @ [SI] --&gt; 20.0[m s^-1]\n</pre>\n<p>A star prepended or appended to a unit system indicates that a prefix among\nall known ones can be used to make the expression simpler; the same effect is\nobtained if the star is specified within the brackets with the unit system:</p>\n<pre>&gt; 5600[K] @ [*SI] --&gt; 5.6[kK]\n&gt; 5600[K] @ [SI|*] --&gt; 5.6[kK]\n</pre>\n</li>\n<li><p>Unit systems containing multiple units are especially convenient to reduce\nexpressions to the simplest form:</p>\n<pre>&gt; %newsystem easy=[m|s|kg|K|A|lx|mol|EUR|N|J|W|Pa|C|V|ohm|F|H|T|lx]\n&gt; 6.63e-34[kg m^2 s^-1] @ [easy] --&gt; 6.63e-34[s J]\n</pre>\n</li>\n<li><p>Unit systems can also contain variable units: this is especially useful to\ndefine natural unit systems:</p>\n<pre>&gt; %newsystem planck=[\"c\"|\"hbar\"|\"G\"|\"ke\"|\"k\"] # \"Planck's natural system\"\n&gt; 1[m] @ [planck] --&gt; 6.18735589978243e+34\n</pre>\n<p>The reverse conversion can be performed by indicating the output unit at the\nbeginning of the unit specification, and by adding the unit system:</p>\n<pre>&gt; 6.2e34 @ [m|planck] --&gt; 1.00204353853607[m]\n&gt; 1 @ [kg|planck] --&gt; 2.17650925244531e-8[kg]\n</pre>\n<p>Note that this notation is an exception to the general rule that pure numbers\nare not influenced by unit specifications.  Note also that the order is\nrelevant here: first the final unit, than all the natural system:</p>\n<pre>&gt; 1 @ [planck|kg] --&gt; 1\n&gt; 1 @ [kg/m|\"c\"|\"G\"] --&gt; 1.34668373640485e+27[kg m^-1]\n&gt; 1 @ [kg|m|\"c\"|\"G\"] --&gt; 1\n</pre>\n</li>\n<li><p>When a natural unit system is used enclosed within single or double quotes,\nall the quotes of the unit system are replaced by the one used: hence,\n[\u2018planck\u2019] is identical to [\u2018c\u2019|\u2019hbar\u2019|\u2019G\u2019|\u2019ke\u2019|\u2019k\u2019].  This is useful to\nexplicitly show all the converting factors in the result:</p>\n<pre>&gt; 1 @ [kg|'planck'] --&gt; 2.17650925244531e-8['G'^1/2 'c'^-1/2 'hbar'^-1/2 kg]\n&gt; 2.17650925244531e-8['G'^1/2 'c'^-1/2 'hbar'^-1/2 kg] --&gt; 0.999999999999999\n</pre>\n</li>\n<li><p>The @ operator can also be used in variable definitions to set the default\ndisplay unit to be used for a variable:</p>\n<pre>&gt; v = 20[m/s] @ [km|hour]\n&gt; v --&gt; 72.0[km hour^-1]\n</pre>\n</li>\n<li><p>When an engine with error analysis is used (umath, soerp, or mcerp), the\nspecial syntax value +/- error can be used to input quantities with errors:</p>\n<pre>&gt; %imks -c umath\n&gt; %reset\n&gt; v = (3+/-0.1)[m/s]\n&gt; v^2 @ [mph] --&gt; (45.0+/-3.0)[mph^2]\n</pre>\n<p>Uncertainties are silently ignored with engines not supporting them.  The\nsame quantity, (3+/-0.1)[m/s] can also be entered without parentheses,\n3+/-0.1m/s, using the \u00b1 sign instead of the +/-, or using a shorter notation\n3.0(1)[m/s] (see uncertainties for a list of formats accepted).</p>\n</li>\n<li><p>Correlation among variables is automatically taken into account:</p>\n<pre>&gt; w = (3+/-0.1)[m/s]\n&gt; v + w --&gt; (6.00+/-0.14)[m s^-1]\n&gt; v + v --&gt; (6.00+/-0.20)[m s^-1]\n</pre>\n</li>\n<li><p>Input transformer make it easy to enter special quantities such as\nsexagesimal angles or times:</p>\n<pre>&gt; 18d 24' 32\" --&gt; 0.321295722745\n&gt; 12h 34m 56s --&gt; 45296.0[s]\n</pre>\n<p>The reverse is also possible using output formats:</p>\n<pre>&gt; 1[rad] @ [dms] --&gt; 57d 17' 44.806s\"\n&gt; 10[ks] @ [hms] --&gt; 2h 46m 40s\n</pre>\n</li>\n<li><p>Documentation strings can be entered even for variables:</p>\n<pre>&gt; v = 50[km/hour] # \"Standard maximum speed within towns\"\n</pre>\n</li>\n</ul>\n</div>\n<div id=\"configuration-file\">\n<h2>Configuration file</h2>\n<p>When launched, iMKS load definitions from the configuration file Startup.imks.\nThis file is searched in the current directory, and if not found in the\n~/.imks directory.  The file should contain the standard definitions that one\nis likely to need for any computation.  Typically the file uses the following\nmagic commands:</p>\n<dl>\n<dt>%newbaseunit &lt;name&gt;</dt>\n<dd>Define a new base unit.  Base units are the building blocks for all\nsubsequent units definitions.  A base unit does not have a value: for\nexample, one cannot express a meter in any other unit if no unit of length\nis known.</dd>\n<dt>%newbasecurrency &lt;name&gt;</dt>\n<dd>Define a new base currency, used for all currency conversions.  A base\ncurrency is also a base unit.</dd>\n<dt>%newprefix &lt;name&gt;=&lt;expression&gt;</dt>\n<dd>Define a new prefix.  The &lt;expression&gt; value evaluate to a simple number.</dd>\n<dt>%newunit &lt;name&gt;=&lt;expression&gt;</dt>\n<dd>Define a new unit.  &lt;expression&gt; should evaluate to a Value\u2019d number.  To\ndefine a new absolute unit, expression should evaluate to a 2-tuple with\nidentical units (indicating the zero-point, and the scale).</dd>\n<dt>%newsystem &lt;name&gt;=[u1], [u2], \u2026</dt>\n<dd>Define a new unit system.  A unit system is simply a list of units.</dd>\n<dt>%defaultsystem &lt;name&gt;</dt>\n<dd>Set the unit system to use in case no @ is used.</dd>\n<dt>%newtransformer &lt;name&gt;=\u201dregex\u201d:&lt;transformer&gt;</dt>\n<dd>Define a new input transformer: the regular expression regex is applied to\neach input line, and if a match is found the &lt;transformer&gt; function is\ncalled together with all named matching groups which must return the\ntransformed input.</dd>\n<dt>%newformat &lt;name&gt;=&lt;transformer&gt;</dt>\n<dd>Define a new output format.  When &lt;name&gt; is entered (alone) in a unit\nspecification, &lt;transformer&gt; is called with the result of the expression: it\nmust return a string that will be displayed on the screen.</dd>\n</dl>\n</div>\n<div id=\"other-magic-commands\">\n<h2>Other magic commands</h2>\n<dl>\n<dt>%imks [&lt;options&gt;]</dt>\n<dd>Show this help page or set configuration options for iMKS.</dd>\n<dt>%delprefix, %delunit, %delsystem, %deltransformer, or %delformat &lt;name&gt;</dt>\n<dd>Delete a previously define prefix, unit, unit system, transformer, or format.</dd>\n<dt>%lazy &lt;name&gt;=&lt;expression&gt;</dt>\n<dd>Define the variable &lt;name&gt; as &lt;expression&gt; lazily: that is, &lt;expression&gt; is\nevaluated only when &lt;name&gt; is used or displayed.  This is implemented by\nmaking &lt;name&gt; a function with no arguments, and by automatically adding a\nfunction call name() when name is used in the input.</dd>\n<dt>%dellazy &lt;name&gt;</dt>\n<dd>Delete a previously defined %lazy variable.</dd>\n<dt>%lazyvalue &lt;name&gt;=&lt;expression&gt;</dt>\n<dd>Define the variable &lt;name&gt; as &lt;expression&gt; lazily: that is, &lt;expression&gt; is\nevaluated only when &lt;name&gt; is used or displayed.  This only works for simple\nvalues, and not for more general objects such as %lazy.</dd>\n<dt>%lazyprefix &lt;name&gt;=&lt;expression&gt;</dt>\n<dd>Define a lazy prefix (whose &lt;expression&gt; is evaluate only when the prefix is\nused).</dd>\n<dt>%lazyunit &lt;name&gt;=&lt;expression&gt;</dt>\n<dd>Define a lazy unit (whose &lt;expression&gt; is evaluated only when the unit is\nused).</dd>\n<dt>%compatible &lt;stuff&gt;</dt>\n<dd>Find out the known variables or units that are compatible to &lt;stuff&gt;.\n&lt;stuff&gt; can be either a unit (in brackets) or an expression.</dd>\n<dt>%load_imks &lt;filename&gt;</dt>\n<dd>Load an external &lt;filename&gt; with definitions in iMKS format.</dd>\n<dt>%load_imks_ext &lt;filename&gt;</dt>\n<dd>Load an imks extension.</dd>\n<dt>%uinfo &lt;name&gt;</dt>\n<dd>Display an help page for a prefix, unit, or unit system.  This is the\nequivalent of %pinfo (which works for objects in the user namespace).  A\nshort notation for %uinfo &lt;name&gt; is &lt;name&gt;! (i.e., the name of an imks\nobject followed by the exclamation mark).  When used with the -a flag,\nas in %uinfo -a &lt;text&gt;, shows all quantities with &lt;text&gt; in their docstring.\nThe same effect is achieved using &lt;text&gt;!!</dd>\n<dt>%pickle &lt;filename&gt;</dt>\n<dd>Save all current variables into a filename, in the Python pickle format.</dd>\n<dt>%unpickle &lt;filename&gt;</dt>\n<dd>Load all previously %pickle\u2019d variables from a filename.</dd>\n<dt>%reset</dt>\n<dd>Perform a full reset of the iMKS interpreter.</dd>\n</dl>\n</div>\n<div id=\"extensions\">\n<h2>Extensions</h2>\n<p>iMKS comes with a number of extensions that define new commands, new\nvariables, or new units.  Extensions are loaded with the command\n%load_imks_ext.  The currently defined extensions are</p>\n<ul>\n<li>calendars: defines several new functions, one for each calendar (for example\nGregorian, Julian, Roman, Egyptian\u2026).  Each calendar accepts a date in\nseveral formats: as an integer (number of days from 1 January 1 C.E.), one of\nthe strings \u201ctoday\u201d, \u201ctomorrow\u201d, \u201cyesterday\u201d, or \u201cnow\u201d, as a year followed by\na holiday name such as Gregorian(2017, \u201cEaster\u201d), or as a full year (with a\nnumber of arguments depending on the calendar).  Optionally, one can also\nadd a time, counted from midnight, noon, sunset, or sunrise depending on the\nspecification of the calendar.  When calendars are loaded, one can input a\ndate using dot-separated integers.  For example, 1973.5.7 is interpreted as\nMay 7th, 1973.  The default calendar used to interpret dates is the Gregorian\none, but it can be changed using %imks -d &lt;calendar&gt;.  A date can be also\nfollowed by a time, in the format hh:mm[:ss.d].</li>\n<li>constants: loads a large list of constants from the NIST database.  Constants\nare then inserted into the variable const, a dictionary.</li>\n<li>currencies: loads a large list of currencies from the online database\nopenexachangerages.org.  Currencies are then used as usual units.  Note that\nin order this to work, you first need to set a variable called\nopenexchangerates_id as a string holding your id.</li>\n<li>geolocation: defines two functions to set the current geographic location and\nto retrieve it.</li>\n<li>jpl: loads the JPL database and creates two dictionaries, planets and moons,\nwhere it stores the physical and orbital data.  Additionally, it defines a\nfunction called minorplanet, which allows one to search a minor body database.</li>\n<li>wiki: experimental interface to Wikipedia.</li>\n</ul>\n</div>\n<div id=\"internals\">\n<h2>Internals</h2>\n<p>Internally, iMKS works by converting an input string into Python expressions.\nThe following rules are used:</p>\n<ul>\n<li><p>Physical quantities are converted into Value\u2019s:</p>\n<pre>&gt; 72[km hour^-1] --&gt; Value(72,\"km hour^-1\")\n</pre>\n</li>\n<li><p>The @ operator is converted into the | operator, and what follows is put in\na unit System:</p>\n<pre>&gt; 72[km hour^-1] @ [m], [s] --&gt; Value(72,\"km hour^-1\") | System(\"m\", \"s\")\n</pre>\n</li>\n<li><p>Quoted comments, used to enter documentation strings, are transformed into\nthe &amp; operator followed by a Doc object:</p>\n<pre>&gt; a=2 # \"Simple string\" --&gt; a=2 &amp; Doc(\"Simple string\")\n</pre>\n</li>\n<li><p>Normal Python operator precedence applies to @=| and to #=&amp;: that is, @ has\na quite low precedence, which makes it possible to write expressions like:</p>\n<pre>&gt; v = 15[m/s] + 10[m]/2[s] @ [km/hour]\n</pre>\n<p>with the unit specification after @ applying to the result of the other\noperations.  Note also that since <tt>&amp;</tt> binds stronger than <tt>|</tt>, in theory a\n# documentation string after the @ operator would apply to the unit\nspecification, and not the the expression: however, this is handled\ninternally by System (that is, the documentation string that System gets\nfrom the #=&amp; operator is actually transferred to the result of the unit\nconversion).</p>\n</li>\n<li><p>The ! operator, if used at the end of a string, is converted into a %uinfo\nmagic (this is similar to the ? operator, that is converted by ipython into\na %pinfo magic):</p>\n<pre>&gt; hour! --&gt; %uinfo hour\n</pre>\n<p>If used alone, instead, it is equivalent to %imks -h.  Note that the same !\nsymbol can still be used to perform shell operations if used at the beginning\nof a line:</p>\n<pre>&gt; !ls\n</pre>\n<p>Two exclamation marks are converted into the %uinfo -a magic:</p>\n<pre>&gt; mile!! --&gt; mile, mph, nmi, mi\n</pre>\n</li>\n<li><p>Unicode characters appearing outside strings are converted into strings of\nthe form _uTf_xx_xx_xx\u2026, where each xx is the hexadecimal representation\nof a byte of the character in UTF8 encoding.</p>\n</li>\n<li><p>Value, System, and Doc are defined in units.py, and for these objects the\nstandard operators are redefined to include tracking of physical units.</p>\n</li>\n<li><p>If necessary, one can directly use the Value, System, and Doc objects to\nmake more complicated expressions.</p>\n</li>\n<li><p>The know prefixes, units, and unit systems are stored in the dictionaries\nprefixes, units, and systems, freely accessible from the user space.</p>\n</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 3259387, "releases": {"1.2.2b0": [{"comment_text": "", "digests": {"md5": "58652628f4993e31c1c88f278d01ebb7", "sha256": "31138ae4bb1fd3b0e8fa33a854f0687ff9b853d684536ca49036918391ab1f85"}, "downloads": -1, "filename": "imks-1.2.2b0.tar.gz", "has_sig": false, "md5_digest": "58652628f4993e31c1c88f278d01ebb7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 163467, "upload_time": "2017-10-07T22:55:15", "upload_time_iso_8601": "2017-10-07T22:55:15.326224Z", "url": "https://files.pythonhosted.org/packages/e8/ed/c804b9872b1ef04a43d35b29d0297e89802670393acc71e682f1ca7638fb/imks-1.2.2b0.tar.gz", "yanked": false}], "1.2.3": [{"comment_text": "", "digests": {"md5": "539b30c06b93b91962ca00d824d3e80c", "sha256": "fa16a07d698e72b181047ba235938a75930323bcdf720dd08999d21aa7fee6d8"}, "downloads": -1, "filename": "imks-1.2.3.tar.gz", "has_sig": false, "md5_digest": "539b30c06b93b91962ca00d824d3e80c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 163457, "upload_time": "2017-10-07T22:58:50", "upload_time_iso_8601": "2017-10-07T22:58:50.883980Z", "url": "https://files.pythonhosted.org/packages/81/64/4e62d562765e089d50dd4fdeaa436c49ff3ac41175cf8f7b42b02e5034bb/imks-1.2.3.tar.gz", "yanked": false}], "1.2.3b0": [{"comment_text": "", "digests": {"md5": "3c9999e603e404d00b5d4589cb3d1aa9", "sha256": "7d2e9197e1462210f0ea308d8693c3a7cfe07a7136d9d0769c9825041a898d8d"}, "downloads": -1, "filename": "imks-1.2.3b0.tar.gz", "has_sig": false, "md5_digest": "3c9999e603e404d00b5d4589cb3d1aa9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 163434, "upload_time": "2017-10-09T23:57:54", "upload_time_iso_8601": "2017-10-09T23:57:54.509403Z", "url": "https://files.pythonhosted.org/packages/5d/fe/72db0144b1f2d52b85334a14ff2a314fc6cca439f72ba1d4e316230619ec/imks-1.2.3b0.tar.gz", "yanked": false}], "1.2.4": [{"comment_text": "", "digests": {"md5": "32abe854c948f9500cd2f659f6cae6cc", "sha256": "70f8ca89f9769ea359f76c16551fafdc565e2e7ef09866f98496150d5964ee48"}, "downloads": -1, "filename": "imks-1.2.4.tar.gz", "has_sig": false, "md5_digest": "32abe854c948f9500cd2f659f6cae6cc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 163548, "upload_time": "2017-10-13T07:29:55", "upload_time_iso_8601": "2017-10-13T07:29:55.184641Z", "url": "https://files.pythonhosted.org/packages/99/3a/71f069e4dc021cc8a35e0f7710ef03c446575711c1fbde664133f5af4770/imks-1.2.4.tar.gz", "yanked": false}], "1.2.6": [{"comment_text": "", "digests": {"md5": "314f941d55c4a5c9e7c33c4ff8398419", "sha256": "400df549c5d02bc43be8a515e417bb20ff935807ebfc303a19e31e03db344bcf"}, "downloads": -1, "filename": "imks-1.2.6.tar.gz", "has_sig": false, "md5_digest": "314f941d55c4a5c9e7c33c4ff8398419", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 165958, "upload_time": "2017-10-18T10:23:51", "upload_time_iso_8601": "2017-10-18T10:23:51.326057Z", "url": "https://files.pythonhosted.org/packages/95/7e/20a9a722de3fb1772a9f40454d4a16dcecbf3dac473871a92e0b02aca87d/imks-1.2.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "314f941d55c4a5c9e7c33c4ff8398419", "sha256": "400df549c5d02bc43be8a515e417bb20ff935807ebfc303a19e31e03db344bcf"}, "downloads": -1, "filename": "imks-1.2.6.tar.gz", "has_sig": false, "md5_digest": "314f941d55c4a5c9e7c33c4ff8398419", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 165958, "upload_time": "2017-10-18T10:23:51", "upload_time_iso_8601": "2017-10-18T10:23:51.326057Z", "url": "https://files.pythonhosted.org/packages/95/7e/20a9a722de3fb1772a9f40454d4a16dcecbf3dac473871a92e0b02aca87d/imks-1.2.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:56:38 2020"}