{"info": {"author": "Rieljun Liguid", "author_email": "me@iamriel.com", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Programming Language :: Python", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6"], "description": "DRF Channels\n------------\n\n.. image:: https://travis-ci.org/iamriel/drf-channels.svg?branch=master\n    :target: https://travis-ci.org/iamriel/drf-channels\n\nDRF Channels provides a simple django-channels bindings and consumer\nmixin that can be used to automatically listen and send to groups\neverytime a Resource is created/updated/deleted.\n\nIt requires Python >= 3.5, Channels >= 2.0, Django >=1.11, and Django Rest Framework 3.x\n\nThis is like a port of Channels 1.x's `Data_Binding <https://channels.readthedocs.io/en/1.x/binding.html>`__\nand `Channels API <https://github.com/linuxlewis/channels-api/blob/master/README.rst>`__\nwith few differences.\n\nThe data sent to the clients are based on the Serializer class\nprovided.\n\n\nHow does it work?\n-----------------\n\nThe API exposes a ``ResourceBinding`` class that holds your Model, Serializer class, and Consumer class.\nYour Consumer class needs to be a subclass of ``AsyncJsonWebsocketConsumer`` from channels and\nhave a ``AsyncConsumerActionMixin`` mixin.\n\nThe ``ResourceBinding`` class binds ``pre_save``, ``pre_delete``, ``post_save``, and ``post_delete`` signals\nto your model.  These signals will then send to the corresponding Consumer groups that listens to your stream.\n\nThe first thing you need to do is connect to your consumer and pass the actions you want to subscribe to\nvia url parameters.\n\nFor example, you want to subscribe to the create and update actions ``Job`` Resource (Model),\nand the channels route is `/jobs/`, You will connect to the websocket like below,\nif you are using `Channels Websocket Wrapper <https://channels.readthedocs.io/en/latest/javascript.html>`__:\n\n.. code:: javascript\n\n   const webSocketBridge = new channels.WebSocketBridge()\n   webSocketBridge.connect('/jobs/?subscribe=create,update')\n\n\nYou then need to add a listener on your webSocketBridge to receive the messages sent by the Consumer\nvia signals.\n\n.. code:: javascript\n\n   webSocketBridge.socket.addEventListener('message', function(event) {\n\n   })\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/iamriel/drf-channels", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "drf-channels", "package_url": "https://pypi.org/project/drf-channels/", "platform": "", "project_url": "https://pypi.org/project/drf-channels/", "project_urls": {"Homepage": "https://github.com/iamriel/drf-channels"}, "release_url": "https://pypi.org/project/drf-channels/0.1.1/", "requires_dist": ["Django (>=1.11)", "channels (>=2.0)", "djangorestframework (>=3.0)"], "requires_python": "", "summary": "Simple Resource binding and Consumer Mixin for Django Rest Framework and Channels 2", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"drf-channels\">\n<h2>DRF Channels</h2>\n<a href=\"https://travis-ci.org/iamriel/drf-channels\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/iamriel/drf-channels.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c1f7a41ceb2dfd9962a241803afd38b0ba1303f9/68747470733a2f2f7472617669732d63692e6f72672f69616d7269656c2f6472662d6368616e6e656c732e7376673f6272616e63683d6d6173746572\"></a>\n<p>DRF Channels provides a simple django-channels bindings and consumer\nmixin that can be used to automatically listen and send to groups\neverytime a Resource is created/updated/deleted.</p>\n<p>It requires Python &gt;= 3.5, Channels &gt;= 2.0, Django &gt;=1.11, and Django Rest Framework 3.x</p>\n<p>This is like a port of Channels 1.x\u2019s <a href=\"https://channels.readthedocs.io/en/1.x/binding.html\" rel=\"nofollow\">Data_Binding</a>\nand <a href=\"https://github.com/linuxlewis/channels-api/blob/master/README.rst\" rel=\"nofollow\">Channels API</a>\nwith few differences.</p>\n<p>The data sent to the clients are based on the Serializer class\nprovided.</p>\n</div>\n<div id=\"how-does-it-work\">\n<h2>How does it work?</h2>\n<p>The API exposes a <tt>ResourceBinding</tt> class that holds your Model, Serializer class, and Consumer class.\nYour Consumer class needs to be a subclass of <tt>AsyncJsonWebsocketConsumer</tt> from channels and\nhave a <tt>AsyncConsumerActionMixin</tt> mixin.</p>\n<p>The <tt>ResourceBinding</tt> class binds <tt>pre_save</tt>, <tt>pre_delete</tt>, <tt>post_save</tt>, and <tt>post_delete</tt> signals\nto your model.  These signals will then send to the corresponding Consumer groups that listens to your stream.</p>\n<p>The first thing you need to do is connect to your consumer and pass the actions you want to subscribe to\nvia url parameters.</p>\n<p>For example, you want to subscribe to the create and update actions <tt>Job</tt> Resource (Model),\nand the channels route is <cite>/jobs/</cite>, You will connect to the websocket like below,\nif you are using <a href=\"https://channels.readthedocs.io/en/latest/javascript.html\" rel=\"nofollow\">Channels Websocket Wrapper</a>:</p>\n<pre><span class=\"kr\">const</span> <span class=\"nx\">webSocketBridge</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">channels</span><span class=\"p\">.</span><span class=\"nx\">WebSocketBridge</span><span class=\"p\">()</span>\n<span class=\"nx\">webSocketBridge</span><span class=\"p\">.</span><span class=\"nx\">connect</span><span class=\"p\">(</span><span class=\"s1\">'/jobs/?subscribe=create,update'</span><span class=\"p\">)</span>\n</pre>\n<p>You then need to add a listener on your webSocketBridge to receive the messages sent by the Consumer\nvia signals.</p>\n<pre><span class=\"nx\">webSocketBridge</span><span class=\"p\">.</span><span class=\"nx\">socket</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s1\">'message'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n<span class=\"p\">})</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 3913353, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "6ea4853251f3b6b8b1097f424b009297", "sha256": "fec115ee4a0d8cbbe0aa36569399ac69ca0ba7c03ba9e4c25cb622494a6da4f8"}, "downloads": -1, "filename": "drf_channels-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "6ea4853251f3b6b8b1097f424b009297", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9506, "upload_time": "2018-05-30T15:10:54", "upload_time_iso_8601": "2018-05-30T15:10:54.687235Z", "url": "https://files.pythonhosted.org/packages/e1/a2/e6df6c789e2382fc54ea2e630fb385f2592e413d5c8650ca07e0b84cb65a/drf_channels-0.1-py3-none-any.whl", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "31c941c3d40ccec1a16f07d6ba06bdd6", "sha256": "35311a7ccf01f9e4b3f2a84a5a7809e051424c65d2441978e7cdd3341b677830"}, "downloads": -1, "filename": "drf_channels-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "31c941c3d40ccec1a16f07d6ba06bdd6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9525, "upload_time": "2018-05-30T15:22:47", "upload_time_iso_8601": "2018-05-30T15:22:47.600991Z", "url": "https://files.pythonhosted.org/packages/10/c9/e69ca9d4597def1c85b4297cab252b5a0596354d31d1deacfe1b09874420/drf_channels-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8ac4f7716d8a772963826640f841a72b", "sha256": "f9a1d30a1ab998c45d2400300c93fe2ea3d474459305516f6a797003671f8e21"}, "downloads": -1, "filename": "drf_channels-0.1.1.tar.gz", "has_sig": false, "md5_digest": "8ac4f7716d8a772963826640f841a72b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7225, "upload_time": "2018-05-30T15:22:48", "upload_time_iso_8601": "2018-05-30T15:22:48.749060Z", "url": "https://files.pythonhosted.org/packages/8d/db/72c482f202590d2abd55c041818af247cedce44e436ff01e79b123ac1f3f/drf_channels-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "31c941c3d40ccec1a16f07d6ba06bdd6", "sha256": "35311a7ccf01f9e4b3f2a84a5a7809e051424c65d2441978e7cdd3341b677830"}, "downloads": -1, "filename": "drf_channels-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "31c941c3d40ccec1a16f07d6ba06bdd6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9525, "upload_time": "2018-05-30T15:22:47", "upload_time_iso_8601": "2018-05-30T15:22:47.600991Z", "url": "https://files.pythonhosted.org/packages/10/c9/e69ca9d4597def1c85b4297cab252b5a0596354d31d1deacfe1b09874420/drf_channels-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8ac4f7716d8a772963826640f841a72b", "sha256": "f9a1d30a1ab998c45d2400300c93fe2ea3d474459305516f6a797003671f8e21"}, "downloads": -1, "filename": "drf_channels-0.1.1.tar.gz", "has_sig": false, "md5_digest": "8ac4f7716d8a772963826640f841a72b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7225, "upload_time": "2018-05-30T15:22:48", "upload_time_iso_8601": "2018-05-30T15:22:48.749060Z", "url": "https://files.pythonhosted.org/packages/8d/db/72c482f202590d2abd55c041818af247cedce44e436ff01e79b123ac1f3f/drf_channels-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:49:47 2020"}