{"info": {"author": "Guillaume Vigeant", "author_email": "guillaume.vigeant@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "==============================\r\nRaspberry Pi Home Alarm System\r\n==============================\r\n\r\nThe Raspberry Pi Alarm system is a DIY system built around the Raspberry Pi computer. It provides normal home alarm system functionalities as well as some added features such as sms message notifications, remote configuration and administration through ssh and weather display on interface unit.\r\n\r\nIn it current version, it supports a physical user interface based on the LCD03 display that is also used to scann a 3x4 keypad. Complete instructions on how to setup the hardware can be found in the technical documentation found in the docs folder of this project.\r\n\r\nOnce the RPIHomeAlarmSystem is operational, it operates very similarly to any modern alarm systems:\r\n\r\nInstallation\r\n============\r\n\r\nPlease consult the installation_.sh file in the doc dir for a detailed procedure for installation.\r\n\r\nArming sequence\r\n===============\r\n\r\nIf the alarm is in the idle state (Alarm system status icon shows an unlocked lock), it can be armed by entering the nip. When arming, the system immediately takes a snapshot of the sensors and will essentially only monitor the sensors that were closed at the time of arming and ignore the rest. This allows arming the system even if you want to leave the back door or the garage open for example. The arming sequence then enters a grace period of 30 seconds (configurable) to allow the user to leave the house. During this grace period, sensors are allowed to change state without triggering the alarm. The grace timer is displayed on the LCD and a audible beep is emitted every seconds. The last five seconds play three beeps to warn that the grace period is almost over.\r\n\r\nDisarming sequence\r\n==================\r\n\r\nWhen the system is armed, it can be disarmed by entering the pin again. If a monitored sensor is open while in the armed mode, it starts a grace timer of 30 seconds to let the user disarm the system by entering the pin. If the user does not successfully disarm the system before the 30 seconds, it transitions into alarm mode where a loud siren is played for 15 minutes and an SMS is sent to the user indicating what sensor triggered the alarm. When in the alarm state, the locked lock icon is replaced with the word ALERT. Note that at any point in time the keypad+LCD unit may be unplugged or disconnected without affecting the operation of the alarm system. This prevents the alarm system from stopping if the burglar cuts the wires. If the keypad and LCD are reconnected in operation, it will reinitialize itself and will be usable again.\r\n\r\nAlarm system configuration\r\n==========================\r\n\r\nAt this point, all your hardware and software is installed and all that remains is to configure your system so that it maps the GPIO pins to the right sensors, sends sms messages through your Google calendar account as well as choose a nip to arm and disarm your system. All of this is done by editing the alarm_config.json file in the project folder. The file should be self-explanatory. Make sure your Google calendar account is set up to allow sms reminders for events as this is the mechanism used to send sms.\r\nThe weather is obtained through the web api of wunderground.com. Make sure you obtain a free api key and enter it in the configuration file as well. This will allow you to receive free weather updates that will display on the LCD of your alarm system. Also enter the appropriate zone such as your postal code in the appropriate field.\r\n\r\nSSH monitoring\r\n==============\r\n\r\nOnce your system is operational, you can interact with your system by logging via ssh and using the provided alarmSystem script to either stop, start, restart, arm, and get the status of your system. The status returned is essentially a copy of what is on the LCD.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pypi.python.org/pypi/RPIHomeAlarmSystem/", "keywords": null, "license": "LICENSE.txt", "maintainer": null, "maintainer_email": null, "name": "RPIHomeAlarmSystem", "package_url": "https://pypi.org/project/RPIHomeAlarmSystem/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/RPIHomeAlarmSystem/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://pypi.python.org/pypi/RPIHomeAlarmSystem/"}, "release_url": "https://pypi.org/project/RPIHomeAlarmSystem/13.8/", "requires_dist": null, "requires_python": null, "summary": "Raspberry Pi Home Alarm System", "version": "13.8", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>The Raspberry Pi Alarm system is a DIY system built around the Raspberry Pi computer. It provides normal home alarm system functionalities as well as some added features such as sms message notifications, remote configuration and administration through ssh and weather display on interface unit.</p>\n<p>In it current version, it supports a physical user interface based on the LCD03 display that is also used to scann a 3x4 keypad. Complete instructions on how to setup the hardware can be found in the technical documentation found in the docs folder of this project.</p>\n<p>Once the RPIHomeAlarmSystem is operational, it operates very similarly to any modern alarm systems:</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Please consult the <a href=\"#installation\" rel=\"nofollow\">installation</a>.sh file in the doc dir for a detailed procedure for installation.</p>\n</div>\n<div id=\"arming-sequence\">\n<h2>Arming sequence</h2>\n<p>If the alarm is in the idle state (Alarm system status icon shows an unlocked lock), it can be armed by entering the nip. When arming, the system immediately takes a snapshot of the sensors and will essentially only monitor the sensors that were closed at the time of arming and ignore the rest. This allows arming the system even if you want to leave the back door or the garage open for example. The arming sequence then enters a grace period of 30 seconds (configurable) to allow the user to leave the house. During this grace period, sensors are allowed to change state without triggering the alarm. The grace timer is displayed on the LCD and a audible beep is emitted every seconds. The last five seconds play three beeps to warn that the grace period is almost over.</p>\n</div>\n<div id=\"disarming-sequence\">\n<h2>Disarming sequence</h2>\n<p>When the system is armed, it can be disarmed by entering the pin again. If a monitored sensor is open while in the armed mode, it starts a grace timer of 30 seconds to let the user disarm the system by entering the pin. If the user does not successfully disarm the system before the 30 seconds, it transitions into alarm mode where a loud siren is played for 15 minutes and an SMS is sent to the user indicating what sensor triggered the alarm. When in the alarm state, the locked lock icon is replaced with the word ALERT. Note that at any point in time the keypad+LCD unit may be unplugged or disconnected without affecting the operation of the alarm system. This prevents the alarm system from stopping if the burglar cuts the wires. If the keypad and LCD are reconnected in operation, it will reinitialize itself and will be usable again.</p>\n</div>\n<div id=\"alarm-system-configuration\">\n<h2>Alarm system configuration</h2>\n<p>At this point, all your hardware and software is installed and all that remains is to configure your system so that it maps the GPIO pins to the right sensors, sends sms messages through your Google calendar account as well as choose a nip to arm and disarm your system. All of this is done by editing the alarm_config.json file in the project folder. The file should be self-explanatory. Make sure your Google calendar account is set up to allow sms reminders for events as this is the mechanism used to send sms.\nThe weather is obtained through the web api of wunderground.com. Make sure you obtain a free api key and enter it in the configuration file as well. This will allow you to receive free weather updates that will display on the LCD of your alarm system. Also enter the appropriate zone such as your postal code in the appropriate field.</p>\n</div>\n<div id=\"ssh-monitoring\">\n<h2>SSH monitoring</h2>\n<p>Once your system is operational, you can interact with your system by logging via ssh and using the provided alarmSystem script to either stop, start, restart, arm, and get the status of your system. The status returned is essentially a copy of what is on the LCD.</p>\n</div>\n\n          </div>"}, "last_serial": 846582, "releases": {"13.8": [{"comment_text": "", "digests": {"md5": "b948884c1a2e4badaaa69241fe9f5963", "sha256": "355d1f6f756eb191f59e3b3bd48f21acaa845305aa3a5d771b4c35adbb12781c"}, "downloads": -1, "filename": "RPIHomeAlarmSystem-13.8.tar.gz", "has_sig": false, "md5_digest": "b948884c1a2e4badaaa69241fe9f5963", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15274, "upload_time": "2013-08-23T02:53:52", "upload_time_iso_8601": "2013-08-23T02:53:52.594690Z", "url": "https://files.pythonhosted.org/packages/4e/5a/80874b2fdf1ba4bc26631342d5e49c5a7ef7cf303f48aa37c9557182289f/RPIHomeAlarmSystem-13.8.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b948884c1a2e4badaaa69241fe9f5963", "sha256": "355d1f6f756eb191f59e3b3bd48f21acaa845305aa3a5d771b4c35adbb12781c"}, "downloads": -1, "filename": "RPIHomeAlarmSystem-13.8.tar.gz", "has_sig": false, "md5_digest": "b948884c1a2e4badaaa69241fe9f5963", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15274, "upload_time": "2013-08-23T02:53:52", "upload_time_iso_8601": "2013-08-23T02:53:52.594690Z", "url": "https://files.pythonhosted.org/packages/4e/5a/80874b2fdf1ba4bc26631342d5e49c5a7ef7cf303f48aa37c9557182289f/RPIHomeAlarmSystem-13.8.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:00:55 2020"}