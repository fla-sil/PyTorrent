{"info": {"author": "Hiroshi Murayama <opiopan@gmail.com>", "author_email": "opiopan@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Utilities"], "description": "pcb-tools-extension\n===\npcb-tools-extension is a Python library to panelize gerber files.\nThis library is designed based on [pcb-tools](https://github.com/curtacircuitos/pcb-tools) which provides cool functionality to handle PCB such as generationg PCB image from gerber files.\n\npcb-tools-extension adds following function  to pcb-tools.\n\n- Rotate PCB data\n- Write back loaded PCB data (original pcb-tools does not work in some condition)\n- Merge multiple PCB data\n- Translate DXF file to PCB data\n\nOnly RS-274x format and Excellon drill format data can be handled by current version of this library.\n\n## Installation\nYou can install a stable version by following step.\n\n```shell\n$ pip install pcb-tools-extension\n```\n\nIf you have a intention to try latest developing version, please install as follows.\n\n```shell\n$ pip install git+https://github.com/opiopan/pcb-tools-extension.git\n```\n\n## How to panelize\nFollowing code is a example to panelize two top metal layer files.\n\n``` python\nimport gerberex\n\nctx = gerberex.GerberComposition()\n\nmetal1 = gerberex.read('board1.gtl')\nctx.merge(metal1)\n\nmetal2 = gerberex.read('board2.gtl')\nmetal2.to_metric()\nmetal2.rotate(-20)\nmetal2.offset(30, 0)\nctx.merge(metal2)\n\nctx.dump('panelized-board.gtl')\n```\n\n```rotate()``` method can be used to rotate PCB data counterclockwise. you have to specify angle in degree.<br>\n```offset()``` method can be used to move PCB data. Specified offset values are interpreted according to unit setting of PCB data. In case of the above code, ```board2.gtl``` move to 30mm left since ```to_metric()``` is called.\n\nIn case of Excellon drill data, you have to use ```DrillCompositon``` instead of ```GerberComposition```.\n\n```python\nimport gerberex\n\nctx = gerberex.DrillComposition()\n\ndrill1 = gerberex.read('board1.txt')\nctx.merge(drill1)\n\ndrill2 = gerberex.read('board2.txt')\ndrill2.to_metric()\ndrill2.rotate(-20)\ndrill2.offset(30, 0)\nctx.merge(drill2)\n\nctx.dump('panelized-board.txt')\n```\n\n## DXF file translation\npcb-tools-extension hsa a function to load a DXF file and handle that as same as RX-274x gerber file or Excellon NC file.<br>\nIn this version, Only line, circle, arc, and polyline objects are recognized and are translated to gerber file or NC file.\n\n### Two way to tranlate DXF file\nBoth composition objects, ```GerberComposition``` for RX-274x and ```DrillionComposition``` for Excellon, can accept an object created as result of DXF file loaded. When composition object dump text stream, DXF data tranclate to appropriate format data.<br>\nThe object which represent DXF file, can also output translated data directly by ```save``` method. In this case output format is specified by ```filetype``` argument. If ```filetype``` argument is ommited, DXF data is translated to RX-274x gerber data.\n\n```python\nimport gerberex\ndxf = gerberex.read('sample.dxf')\n\n# translate to RX-274x using composition object\nctx = gerberex.GerberComposition()\nctx.merge(dxf)\nctx.dump('sample.gml')\n\n# translate to Excellon using composition object\nctx = gerberex.DrillComposition()\nctx.merge(dxf)\nctx.dump('sample.txt')\n\n# translate to RX-274x directly\ndxf.save('sample2.gml')\n\n# translate to Excellon directly\ndxf.save('sample2.txt', filetype=dxf.FT_EXCELLON)\n```\n\n### Generating Rectangle\nIf you want to arrange simple rectangle for PCB outline, ```gerberex.rectangle()``` is better solution. This generate a object representing a rectangle compatible with DXF file object.<br>\n\n```python\nimport gerberex\n\noutline = gerberex.rectangle(width=100, height=100, units='metric')\noutline.write('outline.gml')\n```\n\n### Drawing Mode\nPCB tools extension provide three type of translation method that affects geometric finish. These method are specified a value for ```draw_mode``` attribute, as ```DM_LINE```, ```DM_MOUSE_BITES```, or ```DM_FILL```.<br>\n```DM_LINE``` and ```DM_MOUSE_BITES``` are used to translate to both of RX-274x and Excellon, however ```DM_FILL``` is used to translate to only RX-274x.\n\n![Drawing Mode](https://raw.githubusercontent.com/wiki/opiopan/pcb-tools-extension/images/draw_mode.jpg)\n\n- **draw_mode = DM_LINE**<br>\n    All edge expressed as DXF line object, circle object, arc object and plyline objects are translated to line and arc applied a circular aperture in case of RX-274x. That circular aperture radius is specified by ```width``` attribute. Default value of width is 0.<br>\n    In case of Excellon, DXF objects are translated to routing path command sequence.<br>\n    This function is useful to generate outline data of pnanelized PCB boad.\n\n    ```python\n    import gerberex\n\n    dxf = gerberex.read('outline.dxf')\n    dxf.to_inch()\n    dxf.width = 0.004\n    dxf.write('outline.gml')\n    ```\n\n- **draw_mode = DM_MOUSE_BITES**<br>\n    <img alt=\"mouse bites\" src=\"https://raw.githubusercontent.com/wiki/opiopan/pcb-tools-extension/images/mousebites.png\" width=200 align=\"right\">\n    If DM_MOUSE_BITES is specified for draw_mode, filled circles are arranged at equal intervals along a paths consisted of DXF line, arc, circle, and plyline objects. \n    DXF file object in this state can be merged to excellon file also. That means you can arrange mouse bites easily.    \n\n    ```python\n    import gerberex\n\n    ctx = gerberex.DrillComposition()\n    drill = gerberex.read('drill.txt')\n    ctx.merge(drill)\n\n    dxf = gerberex.read('mousebites.dxf')\n    dxf.draw_mode = dxf.DM_MOUSE_BITES\n    dxf.to_metric()\n    dxf.width = 0.5\n    dxf.pitch = 1\n    ctx.merge(dxf)\n\n    ctx.dump('merged_drill.txt')\n    ```\n\n- **draw_mode = DM_FILL**<br>\n    You can translate DXF closed shapes such as circle to RX-274x polygon fill sequence.<br>\n    In order to fill closed shapes, ```DM_FILL``` has to be set to ```draw_mode``` property. In this mode, All object except closed shapes listed below are ignored.\n\n    - circle\n    - closed polyline \n    - closed path which consists of lines and arcs\n\n    If a closed shape is completly included in other closed shape, The inner shape will be draw with reversed polality of container shape as above example image.<br>\n\n    I assume there are two typical use cases for this mode.<br>\n    One is to arrange logo design on silk layer. This is superior to other method generating raster image data since image data express as vector data.<br>\n    The other one is generating gerber data represented cropped area of panelized PCB.\n    By merging rectangle and PCB outline data, generate a file represented cropped area as below, and this kind of data is useful to make PCB image look good a little bit.<br>\n    [This script](https://github.com/opiopan/pcb-tools-extension/blob/master/examples/genimage.py) which generate example image shown below, also uses this technic.\n\n    ```python\n    import gerberex\n\n    ctx = gerberex.GerberComposition()\n\n    rectangle = gerberex.rectangle(width=100, height=100, left=0, bottom=0, units='metric')\n    rectangle.draw_mode = rectangle.DM_FILL\n    ctx.merge(rectangle)\n\n    outline = gerberex.read('outline.dxf')\n    outline.draw_mode = outline.DM_FILL\n    outline.negate_polarity()\n    ctx.merge(outline)\n\n    ctx.dump('cropped_area.gml')\n    ```\n\n    NOTE: ```DM_FILL``` can be used only to generate RX-274x data, it cannot be used to generate Excellon data.\n\n\n## Panelizing Example\nThis example board image is generated by following scripts from [these source data](https://github.com/opiopan/pcb-tools-extension/tree/master/examples/inputs).\n\n- [panelizing script](https://github.com/opiopan/pcb-tools-extension/blob/master/examples/panelize.py)\n- [imaging script](https://github.com/opiopan/pcb-tools-extension/blob/master/examples/genimage.py)\n\n<p align=\"center\">\n<img alt=\"description\" src=\"https://raw.githubusercontent.com/wiki/opiopan/pcb-tools-extension/images/panelized.jpg\" width=600>\n</p>\n\n## Notes\n\n### Equivalence of output\npcb-tools-extension generate data block stream to focus equivalence of final image, but not focus equivalence of data block sequence.\nThere are some difference between input data and output data as below.\n\n- **Aperture definition [RS-274x]**<br>\n    When gerber data is rotated, it's necessory to rotate not only coordinates whilch indicate locations of drawing aperture, but also aperture geometory itself.\n    However, standard aperture templates, such as rectangle, cannot rotate. These standard aperture templates can be placed only horizontally or vertically.<br>\n    Threfore, pcb-tools-extension replace aperture definitions using standard aperture template to aperture macro that represent equivalent shape.<br>\n    For example, In case of rotating folowing aperture definition 20 degrees counter clockwise,\n\n    ```rs-274x\n    %ADD10R,1X0.5X0.2*%\n    ```\n\n    pcb-toolse-extension generate a aperture macro definition and a aperture definition referencing that macro as below.\n\n    ```rs-274x\n    %AMMACR*\n    21,1,$1,$2,0,0,20*\n    1,0,$3,0,0,20*%\n    %ADD10MACR,1X0.5X0.2*%\n    ```\n\n- **File Scope Modifier [RS-274x]**<br>\n    Commands that affect entire image and should be specified only once in a file, such as ```MI``` (Mirror Image) command, sometimes cause contradiction when multiple gerber file are merged.<br>\n    For example, when mergeing a file containing ```%MIA1B0*%``` command and a file containing ```%MIA0B1*``` command, which command should remain as output?\n    Of cause, it is impossible that generate correct merged image by specifiing any ```MI``` command.<br>\n    pcb-tools-extension translate coordinate data reflecting these file socpe modifier  to address this probrem, then ommit these modifier command.<br>\n    ```MI```, ```OF```, ```SF```, ```AS```, ```IP```, and ```IR``` are in a this category.\n\n- **Coodinate Normalizing [RS-274x, Excellon]**<br>\n    RS-274x specification and Excellon specification allow various notation to express a coordinate. However pcb-tools-extension normalize coordinate notation in order to correct deprecated notation and ease internal process as below.\n\n    - Relative coordinates are translated to absolute coordinates.\n    - Ommited coordinate values are compensated.\n    - Leading zeros are ommited.\n\n- **Single Quadlant mode [RS-274x]**<br>\n    Cercular interpolation coordinate data in single quadlant is difficult to rotate, because circular arc may pass across two quadlants after rotation.<br>\n    In order to avoid this problem, pcb-tools-extension change single quadlant mode coordinates specification to multi quadlangt mode.\n\n- **NC controll command [Excellon]**<br>\n    Form histrical reason, Excellon NC controll format is used to specify drill information to PCB fabricator.<br>\n    On the other hand, from PCB fabricator point of view, they don't need information other than geometric information, such as drill speed. Because these NC controll sequence doesn't send to NC machine directly, PCB fabricator import customers excellon NC file to their CAD / CAM to pnaelize and check, then they export NC controll data for their NC machine.<br>\n    pcb-tools-extension ommit all NC command which do not contribute to geometry expression. Specifically, only tool definitions (diametor of drill), tool selections, drilling coordinates, and routing paths are output.\n\n- **Unimportant Command [RS-274x, Excellon]**<br>\n    Commands not affecting final image such as comment are ommited.\n\n### Negative image polarity\nSometimes, ```%IPNEG*%``` is specified at header of RS-274x file to create negative image. <br>\nAs mentioned [above](#Equivalence%20of%20output), ```IP``` command is ommited when pcb-tools-extension generate output file. In this case, image polarity is nagated by using ```LP``` command. However this generated file doesn't equal to original image since it does'nt contain base dark image.<br>\nPlease merge base dark rectangle explicitly when you handle negative image file as below.\n\n```python\nimport gerberex\n\nctx = gerberex.GerberComposition()\nbase = gerberex.rectangle(width=30, height=30, left=-5, bottom=-5, units='metric')\nbase.draw_mode = base.DM_FILL\nctx.merge(base)\nmetal = gerberex.read('negative_image.gtl')\nctx.merge(metal)\n```\n\n## Limitations\n\n### RS-274x\npcb-tools-extension cannot handle all commands that the RS-274x parser implemented in\n[pcb-tools](https://github.com/curtacircuitos/pcb-tools) doesn't handle so far.<br>\nFrom the imaging point of view, pcb-tools-extension has following limitations.\n\n- Files contains ```IJ``` and ```IO``` commands, that affect entire image, cannot be handled correctly.\n- Files contains ```SR``` command to specify repeated pattern cannot be handled correctly.\n- Aperture block defined by ```AB``` command cannot be handled correctly.\n\n### Excellon\npcb-tools-extension extends excellon parser in [pcb-tools](https://github.com/curtacircuitos/pcb-tools) to support routing operation. However following limitations still remain.\n\n- User defined stored pattern defined by ```M99``` command cannot be handled.\n- Canned text specified by ```M97``` command cannot be handled.\n- Pattern defined by ```M25``` command cannot be handled.\n\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/opiopan/pcb-tools-extension", "keywords": "pcb gerber tools extension", "license": "Apache", "maintainer": "", "maintainer_email": "", "name": "pcb-tools-extension", "package_url": "https://pypi.org/project/pcb-tools-extension/", "platform": "", "project_url": "https://pypi.org/project/pcb-tools-extension/", "project_urls": {"Homepage": "http://github.com/opiopan/pcb-tools-extension"}, "release_url": "https://pypi.org/project/pcb-tools-extension/0.9.3/", "requires_dist": ["pcb-tools", "dxfgrabber"], "requires_python": "", "summary": "Extension for pcb-tools package to panelize gerber files", "version": "0.9.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pcb-tools-extension</h1>\n<p>pcb-tools-extension is a Python library to panelize gerber files.\nThis library is designed based on <a href=\"https://github.com/curtacircuitos/pcb-tools\" rel=\"nofollow\">pcb-tools</a> which provides cool functionality to handle PCB such as generationg PCB image from gerber files.</p>\n<p>pcb-tools-extension adds following function  to pcb-tools.</p>\n<ul>\n<li>Rotate PCB data</li>\n<li>Write back loaded PCB data (original pcb-tools does not work in some condition)</li>\n<li>Merge multiple PCB data</li>\n<li>Translate DXF file to PCB data</li>\n</ul>\n<p>Only RS-274x format and Excellon drill format data can be handled by current version of this library.</p>\n<h2>Installation</h2>\n<p>You can install a stable version by following step.</p>\n<pre>$ pip install pcb-tools-extension\n</pre>\n<p>If you have a intention to try latest developing version, please install as follows.</p>\n<pre>$ pip install git+https://github.com/opiopan/pcb-tools-extension.git\n</pre>\n<h2>How to panelize</h2>\n<p>Following code is a example to panelize two top metal layer files.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">gerberex</span>\n\n<span class=\"n\">ctx</span> <span class=\"o\">=</span> <span class=\"n\">gerberex</span><span class=\"o\">.</span><span class=\"n\">GerberComposition</span><span class=\"p\">()</span>\n\n<span class=\"n\">metal1</span> <span class=\"o\">=</span> <span class=\"n\">gerberex</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s1\">'board1.gtl'</span><span class=\"p\">)</span>\n<span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">merge</span><span class=\"p\">(</span><span class=\"n\">metal1</span><span class=\"p\">)</span>\n\n<span class=\"n\">metal2</span> <span class=\"o\">=</span> <span class=\"n\">gerberex</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s1\">'board2.gtl'</span><span class=\"p\">)</span>\n<span class=\"n\">metal2</span><span class=\"o\">.</span><span class=\"n\">to_metric</span><span class=\"p\">()</span>\n<span class=\"n\">metal2</span><span class=\"o\">.</span><span class=\"n\">rotate</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">20</span><span class=\"p\">)</span>\n<span class=\"n\">metal2</span><span class=\"o\">.</span><span class=\"n\">offset</span><span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">merge</span><span class=\"p\">(</span><span class=\"n\">metal2</span><span class=\"p\">)</span>\n\n<span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">(</span><span class=\"s1\">'panelized-board.gtl'</span><span class=\"p\">)</span>\n</pre>\n<p><code>rotate()</code> method can be used to rotate PCB data counterclockwise. you have to specify angle in degree.<br>\n<code>offset()</code> method can be used to move PCB data. Specified offset values are interpreted according to unit setting of PCB data. In case of the above code, <code>board2.gtl</code> move to 30mm left since <code>to_metric()</code> is called.</p>\n<p>In case of Excellon drill data, you have to use <code>DrillCompositon</code> instead of <code>GerberComposition</code>.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">gerberex</span>\n\n<span class=\"n\">ctx</span> <span class=\"o\">=</span> <span class=\"n\">gerberex</span><span class=\"o\">.</span><span class=\"n\">DrillComposition</span><span class=\"p\">()</span>\n\n<span class=\"n\">drill1</span> <span class=\"o\">=</span> <span class=\"n\">gerberex</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s1\">'board1.txt'</span><span class=\"p\">)</span>\n<span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">merge</span><span class=\"p\">(</span><span class=\"n\">drill1</span><span class=\"p\">)</span>\n\n<span class=\"n\">drill2</span> <span class=\"o\">=</span> <span class=\"n\">gerberex</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s1\">'board2.txt'</span><span class=\"p\">)</span>\n<span class=\"n\">drill2</span><span class=\"o\">.</span><span class=\"n\">to_metric</span><span class=\"p\">()</span>\n<span class=\"n\">drill2</span><span class=\"o\">.</span><span class=\"n\">rotate</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">20</span><span class=\"p\">)</span>\n<span class=\"n\">drill2</span><span class=\"o\">.</span><span class=\"n\">offset</span><span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">merge</span><span class=\"p\">(</span><span class=\"n\">drill2</span><span class=\"p\">)</span>\n\n<span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">(</span><span class=\"s1\">'panelized-board.txt'</span><span class=\"p\">)</span>\n</pre>\n<h2>DXF file translation</h2>\n<p>pcb-tools-extension hsa a function to load a DXF file and handle that as same as RX-274x gerber file or Excellon NC file.<br>\nIn this version, Only line, circle, arc, and polyline objects are recognized and are translated to gerber file or NC file.</p>\n<h3>Two way to tranlate DXF file</h3>\n<p>Both composition objects, <code>GerberComposition</code> for RX-274x and <code>DrillionComposition</code> for Excellon, can accept an object created as result of DXF file loaded. When composition object dump text stream, DXF data tranclate to appropriate format data.<br>\nThe object which represent DXF file, can also output translated data directly by <code>save</code> method. In this case output format is specified by <code>filetype</code> argument. If <code>filetype</code> argument is ommited, DXF data is translated to RX-274x gerber data.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">gerberex</span>\n<span class=\"n\">dxf</span> <span class=\"o\">=</span> <span class=\"n\">gerberex</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s1\">'sample.dxf'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># translate to RX-274x using composition object</span>\n<span class=\"n\">ctx</span> <span class=\"o\">=</span> <span class=\"n\">gerberex</span><span class=\"o\">.</span><span class=\"n\">GerberComposition</span><span class=\"p\">()</span>\n<span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">merge</span><span class=\"p\">(</span><span class=\"n\">dxf</span><span class=\"p\">)</span>\n<span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">(</span><span class=\"s1\">'sample.gml'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># translate to Excellon using composition object</span>\n<span class=\"n\">ctx</span> <span class=\"o\">=</span> <span class=\"n\">gerberex</span><span class=\"o\">.</span><span class=\"n\">DrillComposition</span><span class=\"p\">()</span>\n<span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">merge</span><span class=\"p\">(</span><span class=\"n\">dxf</span><span class=\"p\">)</span>\n<span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">(</span><span class=\"s1\">'sample.txt'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># translate to RX-274x directly</span>\n<span class=\"n\">dxf</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"s1\">'sample2.gml'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># translate to Excellon directly</span>\n<span class=\"n\">dxf</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"s1\">'sample2.txt'</span><span class=\"p\">,</span> <span class=\"n\">filetype</span><span class=\"o\">=</span><span class=\"n\">dxf</span><span class=\"o\">.</span><span class=\"n\">FT_EXCELLON</span><span class=\"p\">)</span>\n</pre>\n<h3>Generating Rectangle</h3>\n<p>If you want to arrange simple rectangle for PCB outline, <code>gerberex.rectangle()</code> is better solution. This generate a object representing a rectangle compatible with DXF file object.<br></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">gerberex</span>\n\n<span class=\"n\">outline</span> <span class=\"o\">=</span> <span class=\"n\">gerberex</span><span class=\"o\">.</span><span class=\"n\">rectangle</span><span class=\"p\">(</span><span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">height</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">units</span><span class=\"o\">=</span><span class=\"s1\">'metric'</span><span class=\"p\">)</span>\n<span class=\"n\">outline</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s1\">'outline.gml'</span><span class=\"p\">)</span>\n</pre>\n<h3>Drawing Mode</h3>\n<p>PCB tools extension provide three type of translation method that affects geometric finish. These method are specified a value for <code>draw_mode</code> attribute, as <code>DM_LINE</code>, <code>DM_MOUSE_BITES</code>, or <code>DM_FILL</code>.<br>\n<code>DM_LINE</code> and <code>DM_MOUSE_BITES</code> are used to translate to both of RX-274x and Excellon, however <code>DM_FILL</code> is used to translate to only RX-274x.</p>\n<p><img alt=\"Drawing Mode\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b616978a0dbab1314ebb168d63e5dec3d4571142/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f77696b692f6f70696f70616e2f7063622d746f6f6c732d657874656e73696f6e2f696d616765732f647261775f6d6f64652e6a7067\"></p>\n<ul>\n<li>\n<p><strong>draw_mode = DM_LINE</strong><br>\nAll edge expressed as DXF line object, circle object, arc object and plyline objects are translated to line and arc applied a circular aperture in case of RX-274x. That circular aperture radius is specified by <code>width</code> attribute. Default value of width is 0.<br>\nIn case of Excellon, DXF objects are translated to routing path command sequence.<br>\nThis function is useful to generate outline data of pnanelized PCB boad.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">gerberex</span>\n\n<span class=\"n\">dxf</span> <span class=\"o\">=</span> <span class=\"n\">gerberex</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s1\">'outline.dxf'</span><span class=\"p\">)</span>\n<span class=\"n\">dxf</span><span class=\"o\">.</span><span class=\"n\">to_inch</span><span class=\"p\">()</span>\n<span class=\"n\">dxf</span><span class=\"o\">.</span><span class=\"n\">width</span> <span class=\"o\">=</span> <span class=\"mf\">0.004</span>\n<span class=\"n\">dxf</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s1\">'outline.gml'</span><span class=\"p\">)</span>\n</pre>\n</li>\n<li>\n<p><strong>draw_mode = DM_MOUSE_BITES</strong><br>\n<img align=\"right\" alt=\"mouse bites\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/60caa15871ed2a62f59e075914213d75d4801ba5/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f77696b692f6f70696f70616e2f7063622d746f6f6c732d657874656e73696f6e2f696d616765732f6d6f75736562697465732e706e67\" width=\"200\">\nIf DM_MOUSE_BITES is specified for draw_mode, filled circles are arranged at equal intervals along a paths consisted of DXF line, arc, circle, and plyline objects.\nDXF file object in this state can be merged to excellon file also. That means you can arrange mouse bites easily.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">gerberex</span>\n\n<span class=\"n\">ctx</span> <span class=\"o\">=</span> <span class=\"n\">gerberex</span><span class=\"o\">.</span><span class=\"n\">DrillComposition</span><span class=\"p\">()</span>\n<span class=\"n\">drill</span> <span class=\"o\">=</span> <span class=\"n\">gerberex</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s1\">'drill.txt'</span><span class=\"p\">)</span>\n<span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">merge</span><span class=\"p\">(</span><span class=\"n\">drill</span><span class=\"p\">)</span>\n\n<span class=\"n\">dxf</span> <span class=\"o\">=</span> <span class=\"n\">gerberex</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s1\">'mousebites.dxf'</span><span class=\"p\">)</span>\n<span class=\"n\">dxf</span><span class=\"o\">.</span><span class=\"n\">draw_mode</span> <span class=\"o\">=</span> <span class=\"n\">dxf</span><span class=\"o\">.</span><span class=\"n\">DM_MOUSE_BITES</span>\n<span class=\"n\">dxf</span><span class=\"o\">.</span><span class=\"n\">to_metric</span><span class=\"p\">()</span>\n<span class=\"n\">dxf</span><span class=\"o\">.</span><span class=\"n\">width</span> <span class=\"o\">=</span> <span class=\"mf\">0.5</span>\n<span class=\"n\">dxf</span><span class=\"o\">.</span><span class=\"n\">pitch</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">merge</span><span class=\"p\">(</span><span class=\"n\">dxf</span><span class=\"p\">)</span>\n\n<span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">(</span><span class=\"s1\">'merged_drill.txt'</span><span class=\"p\">)</span>\n</pre>\n</li>\n<li>\n<p><strong>draw_mode = DM_FILL</strong><br>\nYou can translate DXF closed shapes such as circle to RX-274x polygon fill sequence.<br>\nIn order to fill closed shapes, <code>DM_FILL</code> has to be set to <code>draw_mode</code> property. In this mode, All object except closed shapes listed below are ignored.</p>\n<ul>\n<li>circle</li>\n<li>closed polyline</li>\n<li>closed path which consists of lines and arcs</li>\n</ul>\n<p>If a closed shape is completly included in other closed shape, The inner shape will be draw with reversed polality of container shape as above example image.<br></p>\n<p>I assume there are two typical use cases for this mode.<br>\nOne is to arrange logo design on silk layer. This is superior to other method generating raster image data since image data express as vector data.<br>\nThe other one is generating gerber data represented cropped area of panelized PCB.\nBy merging rectangle and PCB outline data, generate a file represented cropped area as below, and this kind of data is useful to make PCB image look good a little bit.<br>\n<a href=\"https://github.com/opiopan/pcb-tools-extension/blob/master/examples/genimage.py\" rel=\"nofollow\">This script</a> which generate example image shown below, also uses this technic.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">gerberex</span>\n\n<span class=\"n\">ctx</span> <span class=\"o\">=</span> <span class=\"n\">gerberex</span><span class=\"o\">.</span><span class=\"n\">GerberComposition</span><span class=\"p\">()</span>\n\n<span class=\"n\">rectangle</span> <span class=\"o\">=</span> <span class=\"n\">gerberex</span><span class=\"o\">.</span><span class=\"n\">rectangle</span><span class=\"p\">(</span><span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">height</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">bottom</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">units</span><span class=\"o\">=</span><span class=\"s1\">'metric'</span><span class=\"p\">)</span>\n<span class=\"n\">rectangle</span><span class=\"o\">.</span><span class=\"n\">draw_mode</span> <span class=\"o\">=</span> <span class=\"n\">rectangle</span><span class=\"o\">.</span><span class=\"n\">DM_FILL</span>\n<span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">merge</span><span class=\"p\">(</span><span class=\"n\">rectangle</span><span class=\"p\">)</span>\n\n<span class=\"n\">outline</span> <span class=\"o\">=</span> <span class=\"n\">gerberex</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s1\">'outline.dxf'</span><span class=\"p\">)</span>\n<span class=\"n\">outline</span><span class=\"o\">.</span><span class=\"n\">draw_mode</span> <span class=\"o\">=</span> <span class=\"n\">outline</span><span class=\"o\">.</span><span class=\"n\">DM_FILL</span>\n<span class=\"n\">outline</span><span class=\"o\">.</span><span class=\"n\">negate_polarity</span><span class=\"p\">()</span>\n<span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">merge</span><span class=\"p\">(</span><span class=\"n\">outline</span><span class=\"p\">)</span>\n\n<span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">(</span><span class=\"s1\">'cropped_area.gml'</span><span class=\"p\">)</span>\n</pre>\n<p>NOTE: <code>DM_FILL</code> can be used only to generate RX-274x data, it cannot be used to generate Excellon data.</p>\n</li>\n</ul>\n<h2>Panelizing Example</h2>\n<p>This example board image is generated by following scripts from <a href=\"https://github.com/opiopan/pcb-tools-extension/tree/master/examples/inputs\" rel=\"nofollow\">these source data</a>.</p>\n<ul>\n<li><a href=\"https://github.com/opiopan/pcb-tools-extension/blob/master/examples/panelize.py\" rel=\"nofollow\">panelizing script</a></li>\n<li><a href=\"https://github.com/opiopan/pcb-tools-extension/blob/master/examples/genimage.py\" rel=\"nofollow\">imaging script</a></li>\n</ul>\n<p align=\"center\">\n<img alt=\"description\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/03e32ca1c33a46a8106f51a171f88f649c1c0b02/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f77696b692f6f70696f70616e2f7063622d746f6f6c732d657874656e73696f6e2f696d616765732f70616e656c697a65642e6a7067\" width=\"600\">\n</p>\n<h2>Notes</h2>\n<h3>Equivalence of output</h3>\n<p>pcb-tools-extension generate data block stream to focus equivalence of final image, but not focus equivalence of data block sequence.\nThere are some difference between input data and output data as below.</p>\n<ul>\n<li>\n<p><strong>Aperture definition [RS-274x]</strong><br>\nWhen gerber data is rotated, it's necessory to rotate not only coordinates whilch indicate locations of drawing aperture, but also aperture geometory itself.\nHowever, standard aperture templates, such as rectangle, cannot rotate. These standard aperture templates can be placed only horizontally or vertically.<br>\nThrefore, pcb-tools-extension replace aperture definitions using standard aperture template to aperture macro that represent equivalent shape.<br>\nFor example, In case of rotating folowing aperture definition 20 degrees counter clockwise,</p>\n<pre>%ADD10R,1X0.5X0.2*%\n</pre>\n<p>pcb-toolse-extension generate a aperture macro definition and a aperture definition referencing that macro as below.</p>\n<pre>%AMMACR*\n21,1,$1,$2,0,0,20*\n1,0,$3,0,0,20*%\n%ADD10MACR,1X0.5X0.2*%\n</pre>\n</li>\n<li>\n<p><strong>File Scope Modifier [RS-274x]</strong><br>\nCommands that affect entire image and should be specified only once in a file, such as <code>MI</code> (Mirror Image) command, sometimes cause contradiction when multiple gerber file are merged.<br>\nFor example, when mergeing a file containing <code>%MIA1B0*%</code> command and a file containing <code>%MIA0B1*</code> command, which command should remain as output?\nOf cause, it is impossible that generate correct merged image by specifiing any <code>MI</code> command.<br>\npcb-tools-extension translate coordinate data reflecting these file socpe modifier  to address this probrem, then ommit these modifier command.<br>\n<code>MI</code>, <code>OF</code>, <code>SF</code>, <code>AS</code>, <code>IP</code>, and <code>IR</code> are in a this category.</p>\n</li>\n<li>\n<p><strong>Coodinate Normalizing [RS-274x, Excellon]</strong><br>\nRS-274x specification and Excellon specification allow various notation to express a coordinate. However pcb-tools-extension normalize coordinate notation in order to correct deprecated notation and ease internal process as below.</p>\n<ul>\n<li>Relative coordinates are translated to absolute coordinates.</li>\n<li>Ommited coordinate values are compensated.</li>\n<li>Leading zeros are ommited.</li>\n</ul>\n</li>\n<li>\n<p><strong>Single Quadlant mode [RS-274x]</strong><br>\nCercular interpolation coordinate data in single quadlant is difficult to rotate, because circular arc may pass across two quadlants after rotation.<br>\nIn order to avoid this problem, pcb-tools-extension change single quadlant mode coordinates specification to multi quadlangt mode.</p>\n</li>\n<li>\n<p><strong>NC controll command [Excellon]</strong><br>\nForm histrical reason, Excellon NC controll format is used to specify drill information to PCB fabricator.<br>\nOn the other hand, from PCB fabricator point of view, they don't need information other than geometric information, such as drill speed. Because these NC controll sequence doesn't send to NC machine directly, PCB fabricator import customers excellon NC file to their CAD / CAM to pnaelize and check, then they export NC controll data for their NC machine.<br>\npcb-tools-extension ommit all NC command which do not contribute to geometry expression. Specifically, only tool definitions (diametor of drill), tool selections, drilling coordinates, and routing paths are output.</p>\n</li>\n<li>\n<p><strong>Unimportant Command [RS-274x, Excellon]</strong><br>\nCommands not affecting final image such as comment are ommited.</p>\n</li>\n</ul>\n<h3>Negative image polarity</h3>\n<p>Sometimes, <code>%IPNEG*%</code> is specified at header of RS-274x file to create negative image. <br>\nAs mentioned <a href=\"#Equivalence%20of%20output\" rel=\"nofollow\">above</a>, <code>IP</code> command is ommited when pcb-tools-extension generate output file. In this case, image polarity is nagated by using <code>LP</code> command. However this generated file doesn't equal to original image since it does'nt contain base dark image.<br>\nPlease merge base dark rectangle explicitly when you handle negative image file as below.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">gerberex</span>\n\n<span class=\"n\">ctx</span> <span class=\"o\">=</span> <span class=\"n\">gerberex</span><span class=\"o\">.</span><span class=\"n\">GerberComposition</span><span class=\"p\">()</span>\n<span class=\"n\">base</span> <span class=\"o\">=</span> <span class=\"n\">gerberex</span><span class=\"o\">.</span><span class=\"n\">rectangle</span><span class=\"p\">(</span><span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"n\">height</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=-</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">bottom</span><span class=\"o\">=-</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">units</span><span class=\"o\">=</span><span class=\"s1\">'metric'</span><span class=\"p\">)</span>\n<span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">draw_mode</span> <span class=\"o\">=</span> <span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">DM_FILL</span>\n<span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">merge</span><span class=\"p\">(</span><span class=\"n\">base</span><span class=\"p\">)</span>\n<span class=\"n\">metal</span> <span class=\"o\">=</span> <span class=\"n\">gerberex</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s1\">'negative_image.gtl'</span><span class=\"p\">)</span>\n<span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">merge</span><span class=\"p\">(</span><span class=\"n\">metal</span><span class=\"p\">)</span>\n</pre>\n<h2>Limitations</h2>\n<h3>RS-274x</h3>\n<p>pcb-tools-extension cannot handle all commands that the RS-274x parser implemented in\n<a href=\"https://github.com/curtacircuitos/pcb-tools\" rel=\"nofollow\">pcb-tools</a> doesn't handle so far.<br>\nFrom the imaging point of view, pcb-tools-extension has following limitations.</p>\n<ul>\n<li>Files contains <code>IJ</code> and <code>IO</code> commands, that affect entire image, cannot be handled correctly.</li>\n<li>Files contains <code>SR</code> command to specify repeated pattern cannot be handled correctly.</li>\n<li>Aperture block defined by <code>AB</code> command cannot be handled correctly.</li>\n</ul>\n<h3>Excellon</h3>\n<p>pcb-tools-extension extends excellon parser in <a href=\"https://github.com/curtacircuitos/pcb-tools\" rel=\"nofollow\">pcb-tools</a> to support routing operation. However following limitations still remain.</p>\n<ul>\n<li>User defined stored pattern defined by <code>M99</code> command cannot be handled.</li>\n<li>Canned text specified by <code>M97</code> command cannot be handled.</li>\n<li>Pattern defined by <code>M25</code> command cannot be handled.</li>\n</ul>\n\n          </div>"}, "last_serial": 6374514, "releases": {"0.1.4": [{"comment_text": "", "digests": {"md5": "7aff0e7a309baa54e13ef1ef9499437a", "sha256": "9d821c258e703cc185388a7808363bc46fada6e4609124834b582750ced01322"}, "downloads": -1, "filename": "pcb_tools_extension-0.1.4_5-py3-none-any.whl", "has_sig": false, "md5_digest": "7aff0e7a309baa54e13ef1ef9499437a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23585, "upload_time": "2019-04-07T14:30:13", "upload_time_iso_8601": "2019-04-07T14:30:13.375893Z", "url": "https://files.pythonhosted.org/packages/62/af/6dc143250e38c3b3654feeb83e350afbe4d457eb01a5fa68a5ca44db21ef/pcb_tools_extension-0.1.4_5-py3-none-any.whl", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "37dc5e92ca42ce5ca76f279fddcf8bb9", "sha256": "841c720d539cd61541ae32d0965d89ca43a96b60348fed16a6d88fce57e1e0b8"}, "downloads": -1, "filename": "pcb_tools_extension-0.1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "37dc5e92ca42ce5ca76f279fddcf8bb9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23655, "upload_time": "2019-04-25T11:16:01", "upload_time_iso_8601": "2019-04-25T11:16:01.134046Z", "url": "https://files.pythonhosted.org/packages/f5/90/742a81024ecf670c52d1ca600d570dc96e25c648ace9e9eb6e466dad4e6f/pcb_tools_extension-0.1.5-py3-none-any.whl", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "64d44e77545166e414b76afdf4f2d03a", "sha256": "24f09d8132300f39ade37e25dfc998a02ec622924900f2a61a5e1c183a9d8f32"}, "downloads": -1, "filename": "pcb_tools_extension-0.1.6-py3-none-any.whl", "has_sig": false, "md5_digest": "64d44e77545166e414b76afdf4f2d03a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23719, "upload_time": "2019-07-27T16:07:21", "upload_time_iso_8601": "2019-07-27T16:07:21.692024Z", "url": "https://files.pythonhosted.org/packages/44/a9/11b9f89e07255440f1aea58e55d6dae2ccaed2799709b10753ffa937665e/pcb_tools_extension-0.1.6-py3-none-any.whl", "yanked": false}], "0.9.0": [{"comment_text": "", "digests": {"md5": "c1959a7cac2288ea5b0223c2f537624a", "sha256": "bfa8697469551ecf365f76964689dd385501db80e6fd144b84614fbc9188a4ab"}, "downloads": -1, "filename": "pcb_tools_extension-0.9.0-py3-none-any.whl", "has_sig": false, "md5_digest": "c1959a7cac2288ea5b0223c2f537624a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 28879, "upload_time": "2019-09-12T15:00:28", "upload_time_iso_8601": "2019-09-12T15:00:28.465484Z", "url": "https://files.pythonhosted.org/packages/22/60/d0fd6238009c073149f6e705bf2500b43735c9b135d9362abb60d7964b61/pcb_tools_extension-0.9.0-py3-none-any.whl", "yanked": false}], "0.9.1": [{"comment_text": "", "digests": {"md5": "e2ee8ed4de26b05fec358a1a59c9b994", "sha256": "39d84a785bcafb967a79f07dbf1d054f999be7e31b8e4c2d236e7cfcd7990dd2"}, "downloads": -1, "filename": "pcb_tools_extension-0.9.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e2ee8ed4de26b05fec358a1a59c9b994", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 29863, "upload_time": "2019-09-28T09:04:54", "upload_time_iso_8601": "2019-09-28T09:04:54.134469Z", "url": "https://files.pythonhosted.org/packages/66/db/6207ab9e3a4ae0edf7c0e33d561d2fed9859bf0e9d2a66672ed6598b6267/pcb_tools_extension-0.9.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8c1d508c2574e50a51ea7afbd7ecbccb", "sha256": "986d07c72d352c1ec61a1c2ae0072269c7dcbdfe83de5ba516627eeb83238947"}, "downloads": -1, "filename": "pcb-tools-extension-0.9.1.tar.gz", "has_sig": false, "md5_digest": "8c1d508c2574e50a51ea7afbd7ecbccb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26376, "upload_time": "2019-09-28T09:04:56", "upload_time_iso_8601": "2019-09-28T09:04:56.798784Z", "url": "https://files.pythonhosted.org/packages/61/5c/3aa4ec424f6d2ae365cb70d722f414095bac8099a6212b60464d29ededf4/pcb-tools-extension-0.9.1.tar.gz", "yanked": false}], "0.9.2": [{"comment_text": "", "digests": {"md5": "ce06d034bc5dded76d5559bcba6e760a", "sha256": "8cbf55b79b0b14d1a4401df75b62ece270900c9ecab7d541541ee142930a7880"}, "downloads": -1, "filename": "pcb_tools_extension-0.9.2-py3-none-any.whl", "has_sig": false, "md5_digest": "ce06d034bc5dded76d5559bcba6e760a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 33959, "upload_time": "2019-12-28T15:09:55", "upload_time_iso_8601": "2019-12-28T15:09:55.410789Z", "url": "https://files.pythonhosted.org/packages/ae/d0/82af9f8a8ed75bdb7797ed3eb3f64ac27a42a6b9bf18f18c87f55538e970/pcb_tools_extension-0.9.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c8a62ed1278e5cd21072539047dd280f", "sha256": "dbbc8c70368a5b627115d50569a74377dc98b1ccfd00370b1a523471de172f48"}, "downloads": -1, "filename": "pcb-tools-extension-0.9.2.tar.gz", "has_sig": false, "md5_digest": "c8a62ed1278e5cd21072539047dd280f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32078, "upload_time": "2019-12-28T15:09:57", "upload_time_iso_8601": "2019-12-28T15:09:57.560895Z", "url": "https://files.pythonhosted.org/packages/cc/50/802dfd36c2bc524c8e0269d69c0938e9b919773bd6571bd47eceffbdfead/pcb-tools-extension-0.9.2.tar.gz", "yanked": false}], "0.9.3": [{"comment_text": "", "digests": {"md5": "8ef0c2007d92c6ba93401df6c2c9e6d4", "sha256": "ca9188144ab8ce32972c044504ff6103be4948b64095a3702f5a2eb0e359bc8b"}, "downloads": -1, "filename": "pcb_tools_extension-0.9.3-py3-none-any.whl", "has_sig": false, "md5_digest": "8ef0c2007d92c6ba93401df6c2c9e6d4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 34076, "upload_time": "2019-12-30T08:56:44", "upload_time_iso_8601": "2019-12-30T08:56:44.659721Z", "url": "https://files.pythonhosted.org/packages/28/63/a10062841d66d599516b6b1553ecf3d06ded8a36b76d652e3d68f99f57b2/pcb_tools_extension-0.9.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4e7a5a6400f78aaa51cf57015c61dc38", "sha256": "c3d94080a38d9fb66f90bb01f785e5ea0fa00295d28a0e3b985eb7446d05ccef"}, "downloads": -1, "filename": "pcb-tools-extension-0.9.3.tar.gz", "has_sig": false, "md5_digest": "4e7a5a6400f78aaa51cf57015c61dc38", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32255, "upload_time": "2019-12-30T08:56:46", "upload_time_iso_8601": "2019-12-30T08:56:46.711618Z", "url": "https://files.pythonhosted.org/packages/eb/f3/868fa081bd62d6d9002d907d5823c03980bf11468c8c3153fbd39a430ae4/pcb-tools-extension-0.9.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8ef0c2007d92c6ba93401df6c2c9e6d4", "sha256": "ca9188144ab8ce32972c044504ff6103be4948b64095a3702f5a2eb0e359bc8b"}, "downloads": -1, "filename": "pcb_tools_extension-0.9.3-py3-none-any.whl", "has_sig": false, "md5_digest": "8ef0c2007d92c6ba93401df6c2c9e6d4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 34076, "upload_time": "2019-12-30T08:56:44", "upload_time_iso_8601": "2019-12-30T08:56:44.659721Z", "url": "https://files.pythonhosted.org/packages/28/63/a10062841d66d599516b6b1553ecf3d06ded8a36b76d652e3d68f99f57b2/pcb_tools_extension-0.9.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4e7a5a6400f78aaa51cf57015c61dc38", "sha256": "c3d94080a38d9fb66f90bb01f785e5ea0fa00295d28a0e3b985eb7446d05ccef"}, "downloads": -1, "filename": "pcb-tools-extension-0.9.3.tar.gz", "has_sig": false, "md5_digest": "4e7a5a6400f78aaa51cf57015c61dc38", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32255, "upload_time": "2019-12-30T08:56:46", "upload_time_iso_8601": "2019-12-30T08:56:46.711618Z", "url": "https://files.pythonhosted.org/packages/eb/f3/868fa081bd62d6d9002d907d5823c03980bf11468c8c3153fbd39a430ae4/pcb-tools-extension-0.9.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:28 2020"}