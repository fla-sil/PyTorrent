{"info": {"author": "Peter Volf", "author_email": "do.volfp@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Intended Audience :: Information Technology", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 3", "Topic :: Database", "Topic :: Internet", "Topic :: Scientific/Engineering", "Topic :: Software Development :: Libraries", "Topic :: Utilities"], "description": "|Downloads|\n\nGraphScraper\n=================\n\nGraphScraper is a Python 3 library that contains a base graph implementation designed\nto be turned into a web scraper for graph data. It has two major features:\n\n1) The graph automatically manages a database (using either SQLAlchemy or\nFlask-SQLAlchemy) where it stores all the nodes and edges the graph has seen.\n\n2) The base graph implementation provides hook methods that, if implemented,\nturn the graph into a web scraper.\n\nYet another graph implementation - why\n-------------------------------------------\n\nThere are many excellent graph libraries available for different purposes. I started\nimplementing this one because i haven't found a graph library that is dynamic (i don't\nneed the whole graph in memory - or on disk - before i start working with it), that\ncan be used as a web scraper (to seamlessly load nodes and edges from some remote\ndata source when that piece of data is needed) and that keeps all data (the graph)\nautomatically up-to-date on the disk. GraphScraper aims to satisfy these requirements.\n\nExamples\n----------------------\n\nBesides the base graph implementation, the following working examples are also included\nin the library, that show you how you can implement and use an actual graph scraper:\n\n- `igraphwrapper`: Instead of web-scraping, this example is using an igraph_ graph\n  instance as the \"remote\" source to scrape data from.\n- `spotifyartist`: This example is using the Spotify_ web API to load artists and\n  edges are defined by Artist similarity.\n\nDependencies\n-----------------\n\nIf you wish to use one of the included graph implementations, then please read the\ncorresponding module's description for additional requirements.\n\nContribution\n-----------------\n\nAny form of constructive contribution (feedback, features, bug fixes, tests, additional\ndocumentation, etc.) is welcome.\n\n.. _igraph: http://igraph.org\n.. _Spotify: https://developer.spotify.com/web-api/\n.. |Downloads| image:: https://pepy.tech/badge/graphscraper\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/volfpeter/graphscraper", "keywords": "graph network webscraping sqlalchemy database db caching", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "graphscraper", "package_url": "https://pypi.org/project/graphscraper/", "platform": "", "project_url": "https://pypi.org/project/graphscraper/", "project_urls": {"Homepage": "https://github.com/volfpeter/graphscraper"}, "release_url": "https://pypi.org/project/graphscraper/0.5.0/", "requires_dist": ["sqlalchemy (>=1.3)"], "requires_python": ">=3", "summary": "Graph implementation that loads graph data (nodes and edges) from external sources and caches the loaded data in a database using sqlalchemy or flask-sqlalchemy.", "version": "0.5.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><img alt=\"Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c4475d41ca27d9570a7a214d2bda2dfcff793dbf/68747470733a2f2f706570792e746563682f62616467652f677261706873637261706572\"></p>\n<div id=\"graphscraper\">\n<h2>GraphScraper</h2>\n<p>GraphScraper is a Python 3 library that contains a base graph implementation designed\nto be turned into a web scraper for graph data. It has two major features:</p>\n<p>1) The graph automatically manages a database (using either SQLAlchemy or\nFlask-SQLAlchemy) where it stores all the nodes and edges the graph has seen.</p>\n<p>2) The base graph implementation provides hook methods that, if implemented,\nturn the graph into a web scraper.</p>\n<div id=\"yet-another-graph-implementation-why\">\n<h3>Yet another graph implementation - why</h3>\n<p>There are many excellent graph libraries available for different purposes. I started\nimplementing this one because i haven\u2019t found a graph library that is dynamic (i don\u2019t\nneed the whole graph in memory - or on disk - before i start working with it), that\ncan be used as a web scraper (to seamlessly load nodes and edges from some remote\ndata source when that piece of data is needed) and that keeps all data (the graph)\nautomatically up-to-date on the disk. GraphScraper aims to satisfy these requirements.</p>\n</div>\n<div id=\"examples\">\n<h3>Examples</h3>\n<p>Besides the base graph implementation, the following working examples are also included\nin the library, that show you how you can implement and use an actual graph scraper:</p>\n<ul>\n<li><cite>igraphwrapper</cite>: Instead of web-scraping, this example is using an <a href=\"http://igraph.org\" rel=\"nofollow\">igraph</a> graph\ninstance as the \u201cremote\u201d source to scrape data from.</li>\n<li><cite>spotifyartist</cite>: This example is using the <a href=\"https://developer.spotify.com/web-api/\" rel=\"nofollow\">Spotify</a> web API to load artists and\nedges are defined by Artist similarity.</li>\n</ul>\n</div>\n<div id=\"dependencies\">\n<h3>Dependencies</h3>\n<p>If you wish to use one of the included graph implementations, then please read the\ncorresponding module\u2019s description for additional requirements.</p>\n</div>\n<div id=\"contribution\">\n<h3>Contribution</h3>\n<p>Any form of constructive contribution (feedback, features, bug fixes, tests, additional\ndocumentation, etc.) is welcome.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6658735, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "08f97c97b1bc5e18c236d66c3fa0b75d", "sha256": "7c3f911f6d586a014745faf9072e3cf40c8c2488399b515e9a686ce0f3a16719"}, "downloads": -1, "filename": "graphscraper-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "08f97c97b1bc5e18c236d66c3fa0b75d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 18431, "upload_time": "2017-09-30T20:59:43", "upload_time_iso_8601": "2017-09-30T20:59:43.447775Z", "url": "https://files.pythonhosted.org/packages/bc/02/08d4afedccdb2b46d0945d8dc490b72eefacf7a856c1b76dc19cfc5fca4c/graphscraper-0.1.1-py3-none-any.whl", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "b9b5709dbfa02f6f27895852b11ca648", "sha256": "9d9db1c1622b3a17bd095a6a464039eabd1c6d0f67f56682d5f6070af78b68ec"}, "downloads": -1, "filename": "graphscraper-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b9b5709dbfa02f6f27895852b11ca648", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 22915, "upload_time": "2017-11-09T19:04:58", "upload_time_iso_8601": "2017-11-09T19:04:58.311524Z", "url": "https://files.pythonhosted.org/packages/1e/f6/f0872379e26de2a3d5e87cf6c1c99c4d46795268c9ad94b4840e2fbffbb9/graphscraper-0.2.0-py3-none-any.whl", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "0eabc52dcf2433a33be446209686dda2", "sha256": "9b1c74492caa625dcf1789b49d2d06a57eef12c003a2b9d3f07bf493bf214512"}, "downloads": -1, "filename": "graphscraper-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0eabc52dcf2433a33be446209686dda2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 22662, "upload_time": "2017-11-10T18:30:28", "upload_time_iso_8601": "2017-11-10T18:30:28.282655Z", "url": "https://files.pythonhosted.org/packages/a2/16/7284b64ef9fbb6327b331f5663d4dbc81f9ab107e4971cb789d9ad1d50d1/graphscraper-0.3.0-py3-none-any.whl", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "0ee012456a9005c2521e9b3945ed16fb", "sha256": "43887c20b63d67a28a5405a86a3d8f8580265c47a3ecf457d27e8693853ceb41"}, "downloads": -1, "filename": "graphscraper-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0ee012456a9005c2521e9b3945ed16fb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 22872, "upload_time": "2017-11-18T09:54:16", "upload_time_iso_8601": "2017-11-18T09:54:16.310847Z", "url": "https://files.pythonhosted.org/packages/88/29/1b3295f73b4c4de1e9ea58e2c22772cf38e57e6d8a55379fb70f3d114e8e/graphscraper-0.4.0-py3-none-any.whl", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "601a27dd73d5367d14f7085a0f0cab94", "sha256": "a12d2683c9a6129889f8936f7681d523dcf8968ccd0239f9a0a97c2933cc8b20"}, "downloads": -1, "filename": "graphscraper-0.5.0-py3-none-any.whl", "has_sig": false, "md5_digest": "601a27dd73d5367d14f7085a0f0cab94", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 21671, "upload_time": "2020-02-19T06:53:19", "upload_time_iso_8601": "2020-02-19T06:53:19.967070Z", "url": "https://files.pythonhosted.org/packages/b7/bc/7a8bcbd2f53ac74f8847f3795c2cb8ec4d86a9c155d89b2fc6d8e8f944d7/graphscraper-0.5.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "13e1d4b04ec1d1bd636afcbc511a801e", "sha256": "1fcc9581753ba0eab79a560703c601489b987d57732f5ae5b704ad73b95b5e8a"}, "downloads": -1, "filename": "graphscraper-0.5.0.tar.gz", "has_sig": false, "md5_digest": "13e1d4b04ec1d1bd636afcbc511a801e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 18244, "upload_time": "2020-02-19T06:53:21", "upload_time_iso_8601": "2020-02-19T06:53:21.957884Z", "url": "https://files.pythonhosted.org/packages/da/a2/6d8f5f11fce7805bccd5cc66b92827d086eedd85bc09a1dbee3f803950ec/graphscraper-0.5.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "601a27dd73d5367d14f7085a0f0cab94", "sha256": "a12d2683c9a6129889f8936f7681d523dcf8968ccd0239f9a0a97c2933cc8b20"}, "downloads": -1, "filename": "graphscraper-0.5.0-py3-none-any.whl", "has_sig": false, "md5_digest": "601a27dd73d5367d14f7085a0f0cab94", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 21671, "upload_time": "2020-02-19T06:53:19", "upload_time_iso_8601": "2020-02-19T06:53:19.967070Z", "url": "https://files.pythonhosted.org/packages/b7/bc/7a8bcbd2f53ac74f8847f3795c2cb8ec4d86a9c155d89b2fc6d8e8f944d7/graphscraper-0.5.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "13e1d4b04ec1d1bd636afcbc511a801e", "sha256": "1fcc9581753ba0eab79a560703c601489b987d57732f5ae5b704ad73b95b5e8a"}, "downloads": -1, "filename": "graphscraper-0.5.0.tar.gz", "has_sig": false, "md5_digest": "13e1d4b04ec1d1bd636afcbc511a801e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 18244, "upload_time": "2020-02-19T06:53:21", "upload_time_iso_8601": "2020-02-19T06:53:21.957884Z", "url": "https://files.pythonhosted.org/packages/da/a2/6d8f5f11fce7805bccd5cc66b92827d086eedd85bc09a1dbee3f803950ec/graphscraper-0.5.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:31 2020"}