{"info": {"author": "Julien Lamy", "author_email": "lamy@unistra.fr", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Education", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Topic :: Scientific/Engineering"], "description": "# Meg: a MATLAB engine connector in Python\n\n![PyPI - Wheel](https://img.shields.io/pypi/wheel/meg)\n\nMeg is a Python module to interface with the MATLAB engine, allowing to transfer data between Python and MATLAB, and to call MATLAB code from Python.\n\nAssuming you can run `matlab` from the command line (i.e. the main MATLAB executable is in your PATH), using Meg is as simple as:\n\n```python\nimport meg\nimport numpy\n\nwith meg.Engine() as engine:\n    data = numpy.empty((4,3))\n\n    # Copy Python data to the engine\n    engine[\"data\"] = data\n\n    # Execute MATLAB instructions\n    engine(\"count = numel(data)\")\n\n    # Get data from MATLAB\n    print(engine[\"count\"])\n```\n\nMeg can be installed as any Python package: get the latest stable version from [PyPi](https://pypi.org/project/meg/) using pip (e.g. `python3 -m pip install meg`) or clone the [source code](https://github.com/lamyj/meg) and add it to your Python path.\n\n## Connecting to MATLAB\n\nThe main workhorse of Meg is the `Engine` object: it must be started before sending data between Python and MATLAB. An engine can be started (and automatically stopped) using the following syntax:\n\n```python\nimport meg\n\nwith meg.Engine() as engine:\n    # Interact with MATLAB\n    pass\n# Once we reach this point, the engine has been automatically stopped.\n```\n\nNote that once an engine is stopped, all data stored inside which has not been transfered to Python is lost.\n\nIt is also possible to manually start and stop the engine:\n```python\nimport meg\n\n# Create the engine, but do not start it\nengine = meg.Engine()\n\nengine.open()\n# Interact with MATLAB\nengine.close()\n```\n\nFor more complicated environment (e.g. multiple versions of MATLAB, executable not in PATH, etc.), it is possible to specify the root directory of your target installation of MATLAB, and the explicit command to run when starting the engine:\n\n```python\nimport meg\n\n# Target a specific installation of MATLAB\nmeg.setup(\"/opt/MATLAB/R2012b\")\n\n# Start the engine with a non-default command\nwith meg.Engine(\"/opt/MATLAB/R2012b/bin/matlab -nosplash\") as engine:\n    pass\n```\n\n## Getting data to and from MATLAB\n\nData can be exchanged between Python and MATLAB using the `Engine` object: to store the content of the Python object name `foo` in the MATLAB object called `bar`, simply write `engine[\"bar\"] = foo`. The reverse operation (storing the content of the MATLAB object called `bar` to a Python object called `foo`), write `foo = engine[\"bar\"]`.\n\nNumbers (and number containers) are translated as-is between MATLAB and Python. From Python, list, tuples and numpy arrays will be converted to MATLAB numeric arrays; from MATLAB, numeric arrays will be converted either to Python scalars or to numpy arrays.\n\nFrom Python, heterogeneous containers (lists, tuples or numpy arrays containing object of different types) will be converted to MATLAB cell arrays; from MATLAB, cell arrays will be converted to numpy arrays.\n\nFrom Python, dictionaries and structured numpy arrays are converted to MATLAB struct arrays, and the same applies to the reverse conversion.\n\n## Calling MATLAB code\n\nMATLAB statements are run by calling the engine object: assuming you have stored an object called `x` in MATLAB, computing the number of elements in it is done through `engine(\"count = numel(x)\")`. Note that objects are not automatically exchanged between Python and MATLAB: they must be explicitely stored in the MATLAB engine before using them in MATLAB code.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/lamyj/meg/", "keywords": "MATLAB,engine,bridge", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "meg", "package_url": "https://pypi.org/project/meg/", "platform": "", "project_url": "https://pypi.org/project/meg/", "project_urls": {"Homepage": "https://github.com/lamyj/meg/"}, "release_url": "https://pypi.org/project/meg/0.2.0/", "requires_dist": ["numpy"], "requires_python": ">=3.5", "summary": "MATLAB engine connector", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Meg: a MATLAB engine connector in Python</h1>\n<p><img alt=\"PyPI - Wheel\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/11a728e5c18be4fd582e0dddd5130b02225692d1/68747470733a2f2f696d672e736869656c64732e696f2f707970692f776865656c2f6d6567\"></p>\n<p>Meg is a Python module to interface with the MATLAB engine, allowing to transfer data between Python and MATLAB, and to call MATLAB code from Python.</p>\n<p>Assuming you can run <code>matlab</code> from the command line (i.e. the main MATLAB executable is in your PATH), using Meg is as simple as:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">meg</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span>\n\n<span class=\"k\">with</span> <span class=\"n\">meg</span><span class=\"o\">.</span><span class=\"n\">Engine</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">engine</span><span class=\"p\">:</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">empty</span><span class=\"p\">((</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># Copy Python data to the engine</span>\n    <span class=\"n\">engine</span><span class=\"p\">[</span><span class=\"s2\">\"data\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">data</span>\n\n    <span class=\"c1\"># Execute MATLAB instructions</span>\n    <span class=\"n\">engine</span><span class=\"p\">(</span><span class=\"s2\">\"count = numel(data)\"</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Get data from MATLAB</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">engine</span><span class=\"p\">[</span><span class=\"s2\">\"count\"</span><span class=\"p\">])</span>\n</pre>\n<p>Meg can be installed as any Python package: get the latest stable version from <a href=\"https://pypi.org/project/meg/\" rel=\"nofollow\">PyPi</a> using pip (e.g. <code>python3 -m pip install meg</code>) or clone the <a href=\"https://github.com/lamyj/meg\" rel=\"nofollow\">source code</a> and add it to your Python path.</p>\n<h2>Connecting to MATLAB</h2>\n<p>The main workhorse of Meg is the <code>Engine</code> object: it must be started before sending data between Python and MATLAB. An engine can be started (and automatically stopped) using the following syntax:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">meg</span>\n\n<span class=\"k\">with</span> <span class=\"n\">meg</span><span class=\"o\">.</span><span class=\"n\">Engine</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">engine</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Interact with MATLAB</span>\n    <span class=\"k\">pass</span>\n<span class=\"c1\"># Once we reach this point, the engine has been automatically stopped.</span>\n</pre>\n<p>Note that once an engine is stopped, all data stored inside which has not been transfered to Python is lost.</p>\n<p>It is also possible to manually start and stop the engine:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">meg</span>\n\n<span class=\"c1\"># Create the engine, but do not start it</span>\n<span class=\"n\">engine</span> <span class=\"o\">=</span> <span class=\"n\">meg</span><span class=\"o\">.</span><span class=\"n\">Engine</span><span class=\"p\">()</span>\n\n<span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">()</span>\n<span class=\"c1\"># Interact with MATLAB</span>\n<span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre>\n<p>For more complicated environment (e.g. multiple versions of MATLAB, executable not in PATH, etc.), it is possible to specify the root directory of your target installation of MATLAB, and the explicit command to run when starting the engine:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">meg</span>\n\n<span class=\"c1\"># Target a specific installation of MATLAB</span>\n<span class=\"n\">meg</span><span class=\"o\">.</span><span class=\"n\">setup</span><span class=\"p\">(</span><span class=\"s2\">\"/opt/MATLAB/R2012b\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Start the engine with a non-default command</span>\n<span class=\"k\">with</span> <span class=\"n\">meg</span><span class=\"o\">.</span><span class=\"n\">Engine</span><span class=\"p\">(</span><span class=\"s2\">\"/opt/MATLAB/R2012b/bin/matlab -nosplash\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">engine</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n</pre>\n<h2>Getting data to and from MATLAB</h2>\n<p>Data can be exchanged between Python and MATLAB using the <code>Engine</code> object: to store the content of the Python object name <code>foo</code> in the MATLAB object called <code>bar</code>, simply write <code>engine[\"bar\"] = foo</code>. The reverse operation (storing the content of the MATLAB object called <code>bar</code> to a Python object called <code>foo</code>), write <code>foo = engine[\"bar\"]</code>.</p>\n<p>Numbers (and number containers) are translated as-is between MATLAB and Python. From Python, list, tuples and numpy arrays will be converted to MATLAB numeric arrays; from MATLAB, numeric arrays will be converted either to Python scalars or to numpy arrays.</p>\n<p>From Python, heterogeneous containers (lists, tuples or numpy arrays containing object of different types) will be converted to MATLAB cell arrays; from MATLAB, cell arrays will be converted to numpy arrays.</p>\n<p>From Python, dictionaries and structured numpy arrays are converted to MATLAB struct arrays, and the same applies to the reverse conversion.</p>\n<h2>Calling MATLAB code</h2>\n<p>MATLAB statements are run by calling the engine object: assuming you have stored an object called <code>x</code> in MATLAB, computing the number of elements in it is done through <code>engine(\"count = numel(x)\")</code>. Note that objects are not automatically exchanged between Python and MATLAB: they must be explicitely stored in the MATLAB engine before using them in MATLAB code.</p>\n\n          </div>"}, "last_serial": 6632724, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "ae1608148e2da18e91d7e180d59effde", "sha256": "fe2d78af65890709c4df27ceb9eb0d564a36e95fadba3fd61fa930a9376d99b8"}, "downloads": -1, "filename": "meg-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ae1608148e2da18e91d7e180d59effde", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 7957, "upload_time": "2020-02-12T18:11:39", "upload_time_iso_8601": "2020-02-12T18:11:39.954781Z", "url": "https://files.pythonhosted.org/packages/db/5e/27d7443849abc8355ae2ba6390e2c368fbbf09f8f34f0b0b2ef5db3d132f/meg-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "33e009ec5d693d97cf142fe28c58e320", "sha256": "2219db9e60db87009b51337640f4393c0ebfe50138fc8324f5ae9b0ee98dcfdd"}, "downloads": -1, "filename": "meg-0.1.0.tar.gz", "has_sig": false, "md5_digest": "33e009ec5d693d97cf142fe28c58e320", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 6571, "upload_time": "2020-02-12T18:11:42", "upload_time_iso_8601": "2020-02-12T18:11:42.596893Z", "url": "https://files.pythonhosted.org/packages/c0/cd/602baa74d7e407d65f0f985e574ddbbd083be341493936f7fcbab3a04ddd/meg-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "f0aab94dde9259ae1fcc363685681637", "sha256": "684dbd0306e0bd574452209d5affab9f3e0a514a725b30c3bae12ea0bf3a0fdc"}, "downloads": -1, "filename": "meg-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f0aab94dde9259ae1fcc363685681637", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 9764, "upload_time": "2020-02-14T17:50:51", "upload_time_iso_8601": "2020-02-14T17:50:51.471134Z", "url": "https://files.pythonhosted.org/packages/bf/a3/5d72fa6f2afb731a4aff53dca518769b20f72009ffe82e3a5a21f1cb446f/meg-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a588dbeb8dc6cb37ad0d22af537943fa", "sha256": "6191f43199261e5041f96354a2fb20ce066ff502dc403be0316799c83a852839"}, "downloads": -1, "filename": "meg-0.2.0.tar.gz", "has_sig": false, "md5_digest": "a588dbeb8dc6cb37ad0d22af537943fa", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 8400, "upload_time": "2020-02-14T17:50:53", "upload_time_iso_8601": "2020-02-14T17:50:53.154782Z", "url": "https://files.pythonhosted.org/packages/c5/96/2b9bbc5d9adcdcc54b85da6f14c4372ac770a6f7f1573fadd1726b05c013/meg-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f0aab94dde9259ae1fcc363685681637", "sha256": "684dbd0306e0bd574452209d5affab9f3e0a514a725b30c3bae12ea0bf3a0fdc"}, "downloads": -1, "filename": "meg-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f0aab94dde9259ae1fcc363685681637", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 9764, "upload_time": "2020-02-14T17:50:51", "upload_time_iso_8601": "2020-02-14T17:50:51.471134Z", "url": "https://files.pythonhosted.org/packages/bf/a3/5d72fa6f2afb731a4aff53dca518769b20f72009ffe82e3a5a21f1cb446f/meg-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a588dbeb8dc6cb37ad0d22af537943fa", "sha256": "6191f43199261e5041f96354a2fb20ce066ff502dc403be0316799c83a852839"}, "downloads": -1, "filename": "meg-0.2.0.tar.gz", "has_sig": false, "md5_digest": "a588dbeb8dc6cb37ad0d22af537943fa", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 8400, "upload_time": "2020-02-14T17:50:53", "upload_time_iso_8601": "2020-02-14T17:50:53.154782Z", "url": "https://files.pythonhosted.org/packages/c5/96/2b9bbc5d9adcdcc54b85da6f14c4372ac770a6f7f1573fadd1726b05c013/meg-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:56:30 2020"}