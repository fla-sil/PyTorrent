{"info": {"author": "Subhajeet Dey", "author_email": "subhajeet2107@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "pylexer\n==========================\nA python implementation of a lexical analyzer which supports full scan, state based lexing and lookahead\n\n\n[![Build Status](https://travis-ci.org/subhajeet2107/pylexer.svg?branch=master)](https://travis-ci.org/subhajeet2107/pylexer) ![PyPI - Python Version](https://img.shields.io/pypi/pyversions/Django.svg) [![PyPI version](https://badge.fury.io/py/pylexer.svg)](https://badge.fury.io/py/pylexer) [![PyPI license](https://img.shields.io/pypi/l/ansicolortags.svg)](https://pypi.python.org/pypi/ansicolortags/)\n\n> **Warning**\n> This is not a GENERATOR like classical lexer is. It does not produce any python code. It's a simple plain scanner\n> of the given input string and tokenizer into given set of tokens by matching regular expressions.\n> Thus, at runtime you can change the token definition and use one same code for any token set\n\n## Installation\n\nInstall in your project with pip:\n\n```bash\npip install pylexer\n```\n\n## Usage\n\nAn example use:\n\n```python\n\nfrom pylexer import PyLexer\nconfig = {\n\t'\\\\s' :'',\n    '\\\\d+' :'number',\n    '\\\\+' : 'plus',\n    '-': 'minus',\n    '\\\\*' : 'mul',\n    '/' : 'div',\n}\n#Static Scan method that returns list of tokens\ntokens = PyLexer.scan(config, '2 + 3')\nmap(lambda x:x.get_name(), tokens)\n\n#PyLexer Config is a dict, so you can also use it like\nlexer = PyLexer()\nlexer.set_input('2 + 3')\nlexer.move_next()\nwhile lexer.get_look_ahead():\n\tprint(lexer.get_look_ahead().get_name())\n\tlexer.move_next()\n\n\n```\n\n## Token Definition\nTokens are defined with ```TokenDefinition``` class that holds token name and regular expression. Token name can be empty, and in that case lexer will ignore/skip such tokens\n\n## Lexer Configuration\nThe lexer configuration holds a list of all token definitions. With LexerDictConfig it can be easily created from an array where keys are regular expressions and values are names of tokens\n\n## Full scan\nPylexer's static scan method can be used to scan given input string and returns a list of tokens, Pylexer can also be used to walk through scanned tokens with single look ahead\n\n## License\n\nMIT license. See `LICENSE.md` for more information.\n\n## Contributors\nPylexer is inspired from PHP's Lexer(https://github.com/tmilos/lexer) and takes code heavily from doctrine API, all credits due with Milos Tomic\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/subhajeet2107/pylexer/", "keywords": "", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "pylexer", "package_url": "https://pypi.org/project/pylexer/", "platform": "", "project_url": "https://pypi.org/project/pylexer/", "project_urls": {"Homepage": "https://github.com/subhajeet2107/pylexer/"}, "release_url": "https://pypi.org/project/pylexer/1.0.0/", "requires_dist": ["pytest", "six"], "requires_python": "", "summary": "A python implementation of a lexical analyzer which supports full scan, state based lexing and lookahead", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pylexer</h1>\n<p>A python implementation of a lexical analyzer which supports full scan, state based lexing and lookahead</p>\n<p><a href=\"https://travis-ci.org/subhajeet2107/pylexer\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/87d3450aa89d5e2c2bf643b3468919a126174d13/68747470733a2f2f7472617669732d63692e6f72672f73756268616a656574323130372f70796c657865722e7376673f6272616e63683d6d6173746572\"></a> <img alt=\"PyPI - Python Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/10dfd3abcb9a0ba765e14beb5116c17f39ed86b2/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f446a616e676f2e737667\"> <a href=\"https://badge.fury.io/py/pylexer\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/63fcc0a9c11f4e2fe6462908f8fc8be0ae26f058/68747470733a2f2f62616467652e667572792e696f2f70792f70796c657865722e737667\"></a> <a href=\"https://pypi.python.org/pypi/ansicolortags/\" rel=\"nofollow\"><img alt=\"PyPI license\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cb7554d3f165ac5e7bc396a6fbc22d51a890512a/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f616e7369636f6c6f72746167732e737667\"></a></p>\n<blockquote>\n<p><strong>Warning</strong>\nThis is not a GENERATOR like classical lexer is. It does not produce any python code. It's a simple plain scanner\nof the given input string and tokenizer into given set of tokens by matching regular expressions.\nThus, at runtime you can change the token definition and use one same code for any token set</p>\n</blockquote>\n<h2>Installation</h2>\n<p>Install in your project with pip:</p>\n<pre>pip install pylexer\n</pre>\n<h2>Usage</h2>\n<p>An example use:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pylexer</span> <span class=\"kn\">import</span> <span class=\"n\">PyLexer</span>\n<span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n\t<span class=\"s1\">'</span><span class=\"se\">\\\\</span><span class=\"s1\">s'</span> <span class=\"p\">:</span><span class=\"s1\">''</span><span class=\"p\">,</span>\n    <span class=\"s1\">'</span><span class=\"se\">\\\\</span><span class=\"s1\">d+'</span> <span class=\"p\">:</span><span class=\"s1\">'number'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'</span><span class=\"se\">\\\\</span><span class=\"s1\">+'</span> <span class=\"p\">:</span> <span class=\"s1\">'plus'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'-'</span><span class=\"p\">:</span> <span class=\"s1\">'minus'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'</span><span class=\"se\">\\\\</span><span class=\"s1\">*'</span> <span class=\"p\">:</span> <span class=\"s1\">'mul'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'/'</span> <span class=\"p\">:</span> <span class=\"s1\">'div'</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n<span class=\"c1\">#Static Scan method that returns list of tokens</span>\n<span class=\"n\">tokens</span> <span class=\"o\">=</span> <span class=\"n\">PyLexer</span><span class=\"o\">.</span><span class=\"n\">scan</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"s1\">'2 + 3'</span><span class=\"p\">)</span>\n<span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">get_name</span><span class=\"p\">(),</span> <span class=\"n\">tokens</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#PyLexer Config is a dict, so you can also use it like</span>\n<span class=\"n\">lexer</span> <span class=\"o\">=</span> <span class=\"n\">PyLexer</span><span class=\"p\">()</span>\n<span class=\"n\">lexer</span><span class=\"o\">.</span><span class=\"n\">set_input</span><span class=\"p\">(</span><span class=\"s1\">'2 + 3'</span><span class=\"p\">)</span>\n<span class=\"n\">lexer</span><span class=\"o\">.</span><span class=\"n\">move_next</span><span class=\"p\">()</span>\n<span class=\"k\">while</span> <span class=\"n\">lexer</span><span class=\"o\">.</span><span class=\"n\">get_look_ahead</span><span class=\"p\">():</span>\n\t<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">lexer</span><span class=\"o\">.</span><span class=\"n\">get_look_ahead</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_name</span><span class=\"p\">())</span>\n\t<span class=\"n\">lexer</span><span class=\"o\">.</span><span class=\"n\">move_next</span><span class=\"p\">()</span>\n</pre>\n<h2>Token Definition</h2>\n<p>Tokens are defined with <code>TokenDefinition</code> class that holds token name and regular expression. Token name can be empty, and in that case lexer will ignore/skip such tokens</p>\n<h2>Lexer Configuration</h2>\n<p>The lexer configuration holds a list of all token definitions. With LexerDictConfig it can be easily created from an array where keys are regular expressions and values are names of tokens</p>\n<h2>Full scan</h2>\n<p>Pylexer's static scan method can be used to scan given input string and returns a list of tokens, Pylexer can also be used to walk through scanned tokens with single look ahead</p>\n<h2>License</h2>\n<p>MIT license. See <code>LICENSE.md</code> for more information.</p>\n<h2>Contributors</h2>\n<p>Pylexer is inspired from PHP's Lexer(<a href=\"https://github.com/tmilos/lexer\" rel=\"nofollow\">https://github.com/tmilos/lexer</a>) and takes code heavily from doctrine API, all credits due with Milos Tomic</p>\n\n          </div>"}, "last_serial": 5630705, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "172a462bbe3c7ba1c288b1fe9d9a778b", "sha256": "6bab41f2469361d6b9c1d96b9c6332a8fb734fe4bcf3e2c9055e18562ecd7e27"}, "downloads": -1, "filename": "pylexer-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "172a462bbe3c7ba1c288b1fe9d9a778b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7791, "upload_time": "2019-08-04T14:12:44", "upload_time_iso_8601": "2019-08-04T14:12:44.151215Z", "url": "https://files.pythonhosted.org/packages/60/5d/0455a5dfc1fe2438ea88277c47396320d7962761feb7d15b176467bf1ecd/pylexer-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "50fcb8058e5548a2f0fef7896cd13224", "sha256": "7173e1d730cca0a03870da8bfaf7ddd1085d1aba21f25cd78cfff4e8c892beff"}, "downloads": -1, "filename": "pylexer-1.0.0.tar.gz", "has_sig": false, "md5_digest": "50fcb8058e5548a2f0fef7896cd13224", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5887, "upload_time": "2019-08-04T14:12:48", "upload_time_iso_8601": "2019-08-04T14:12:48.455744Z", "url": "https://files.pythonhosted.org/packages/aa/93/785cc297351c762bcaf0e43001e3e924581216ed03c2fe28334fe8beccea/pylexer-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "172a462bbe3c7ba1c288b1fe9d9a778b", "sha256": "6bab41f2469361d6b9c1d96b9c6332a8fb734fe4bcf3e2c9055e18562ecd7e27"}, "downloads": -1, "filename": "pylexer-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "172a462bbe3c7ba1c288b1fe9d9a778b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7791, "upload_time": "2019-08-04T14:12:44", "upload_time_iso_8601": "2019-08-04T14:12:44.151215Z", "url": "https://files.pythonhosted.org/packages/60/5d/0455a5dfc1fe2438ea88277c47396320d7962761feb7d15b176467bf1ecd/pylexer-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "50fcb8058e5548a2f0fef7896cd13224", "sha256": "7173e1d730cca0a03870da8bfaf7ddd1085d1aba21f25cd78cfff4e8c892beff"}, "downloads": -1, "filename": "pylexer-1.0.0.tar.gz", "has_sig": false, "md5_digest": "50fcb8058e5548a2f0fef7896cd13224", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5887, "upload_time": "2019-08-04T14:12:48", "upload_time_iso_8601": "2019-08-04T14:12:48.455744Z", "url": "https://files.pythonhosted.org/packages/aa/93/785cc297351c762bcaf0e43001e3e924581216ed03c2fe28334fe8beccea/pylexer-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:03:12 2020"}