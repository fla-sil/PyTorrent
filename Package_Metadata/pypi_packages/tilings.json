{"info": {"author": "Permuta Triangle", "author_email": "permutatriangle@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Education", "Intended Audience :: Science/Research", "License :: OSI Approved :: BSD License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Education", "Topic :: Scientific/Engineering :: Mathematics"], "description": "Tilings\n=======\n\n.. image:: https://travis-ci.org/PermutaTriangle/Tilings.svg?branch=master\n    :alt: Travis\n    :target: https://travis-ci.org/PermutaTriangle/Tilings\n.. image:: https://coveralls.io/repos/github/PermutaTriangle/Tilings/badge.svg?branch=master\n    :alt: Coveralls\n    :target: https://coveralls.io/github/PermutaTriangle/Tilings?branch=master\n.. image:: https://img.shields.io/pypi/v/Tilings.svg\n    :alt: PyPI\n    :target: https://pypi.python.org/pypi/Tilings\n.. image:: https://img.shields.io/pypi/l/Tilings.svg\n    :target: https://pypi.python.org/pypi/Tilings\n.. image:: https://img.shields.io/pypi/pyversions/Tilings.svg\n    :target: https://pypi.python.org/pypi/Tilings\n.. image:: https://requires.io/github/PermutaTriangle/Tilings/requirements.svg?branch=master\n     :target: https://requires.io/github/PermutaTriangle/Tilings/requirements/?branch=master\n     :alt: Requirements Status\n\n\n``tilings`` is a Python library for working with gridded permutation and\ntilings.\n\nInstalling\n----------\n\nTo install ``tilings`` on your system, run:\n\n.. code:: bash\n\n       pip install tilings\n\nIt is also possible to install ``tilings`` in development mode to work\non the source code, in which case you run the following after cloning\nthe repository:\n\n.. code:: bash\n\n       ./setup.py develop\n\nTo run the unit tests:\n\n.. code:: bash\n\n       ./setup.py test\n\nWhat are gridded permutations and tilings?\n------------------------------------------\n\nWe will be brief in our definitions here, for more details see\n`Christian Bean\u2019s PhD thesis <https://skemman.is/handle/1946/31663>`__.\n\nA ``gridded permutation`` is a pair ``(\u03c0, P)`` where ``\u03c0`` is a\npermutation and ``P`` is a tuple of cells, called the positions, that\ndenote the cells in which the points of ``\u03c0`` are drawn on a grid. Let\n``G`` denote the set of all gridded permutations. Containment of gridded\npermutations is defined the same as containment of permutations, except\nincluding the preservation of the cells.\n\nA ``tiling`` is a triple ``T = ((n, m), O, R)``, where ``n`` and ``m``\nare positive integers, ``O`` is a set of gridded permutations called\n``obstructions``, and ``R`` is a set of sets of gridded permutations\ncalled ``requirements``.\n\nWe say a gridded permutations avoids a set of gridded permutations if it\navoids all of the permutations in the set, otherwise it contains the\nset. To contain a set, therefore, means contains at least one in the\nset. The set of gridded permutations on a tiling ``Grid(T)`` is the set\nof all gridded permutations in the ``n x m`` grid that avoids ``O`` and\ncontains each set ``r`` in ``R``.\n\nUsing tilings\n-------------\n\nOnce you\u2019ve installed ``tilings``, it can be imported by a Python script\nor an interactive Python session, just like any other Python library:\n\n.. code:: python\n\n       >>> from tilings import *\n\nImporting ``*`` from it supplies you with the \u2018GriddedPerm\u2019,\n\u2018Obstruction\u2019, \u2018Requirement\u2019, and \u2018Tiling\u2019 classes.\n\nAs above, a gridded permutation is a pair ``(\u03c0, P)`` where ``\u03c0`` is a\npermutation and ``P`` is a tuple of cells. The permutation is assumed to\nbe a ``Perm`` from the ``permuta`` Python library. Not every tuple of\ncells is a valid position for a given permutation. This can be checked\nusing the ``contradictory`` method.\n\n.. code:: python\n\n       >>> from permuta import Perm\n       >>> gp = GriddedPerm(Perm((0, 2, 1)), ((0, 0), (0, 0), (1, 0)))\n       >>> gp.contradictory()\n       False\n       >>> gp = GriddedPerm(Perm((0, 1, 2)), ((0, 0), (0, 1), (0, 0)))\n       >>> gp.contradictory()\n       True\n\nA ``Tiling`` is created with an iterable of ``Obstruction`` and an\niterable of ``Requirement`` lists. It is assumed that all cells not\nmentioned in some obstruction or requirement is empty. You can print the\ntiling to get an overview of the tiling created. In this example, we\nhave a tiling that corresponds to non-empty permutation avoiding\n``123``.\n\n.. code:: python\n\n       >>> obstructions = [Obstruction.single_cell(Perm((0, 1)), (1, 1)),\n       ...                 Obstruction.single_cell(Perm((1, 0)), (1, 1)),\n       ...                 Obstruction.single_cell(Perm((0, 1)), (0, 0)),\n       ...                 Obstruction.single_cell(Perm((0, 1, 2)), (2, 0)),\n       ...                 Obstruction(Perm((0, 1, 2)), ((0, 0), (2, 0), (2, 0)))]\n       >>> requirements = [[Requirement.single_cell(Perm((0,)), (1, 1))]]\n       >>> til = Tiling(obstructions, requirements)\n       >>> print(til)\n       +-+-+-+\n       | |\u25cf| |\n       +-+-+-+\n       |\\| |1|\n       +-+-+-+\n       1: Av(012)\n       \\: Av(01)\n       \u25cf: point\n       Crossing obstructions:\n       012: (0, 0), (2, 0), (2, 0)\n       Requirement 0:\n       0: (1, 1)\n       >>> til.dimensions\n       (3, 2)\n       >>> sorted(til.active_cells)\n       [(0, 0), (1, 1), (2, 0)]\n       >>> til.point_cells\n       frozenset({(1, 1)})\n       >>> sorted(til.possibly_empty)\n       [(0, 0), (2, 0)]\n       >>> til.positive_cells\n       frozenset({(1, 1)})\n\nThere are a number of methods available on the tiling. You can generate\nthe gridded permutations satisfying the obtructions and requirements\nusing the ``gridded_perms_of_length`` method.\n\n.. code:: python\n\n       >>> for i in range(4):\n       ...     for gp in til.gridded_perms_of_length(i):\n       ...         print(gp)\n       0: (1, 1)\n       10: (1, 1), (2, 0)\n       01: (0, 0), (1, 1)\n       210: (1, 1), (2, 0), (2, 0)\n       201: (1, 1), (2, 0), (2, 0)\n       120: (0, 0), (1, 1), (2, 0)\n       021: (0, 0), (1, 1), (2, 0)\n       102: (0, 0), (0, 0), (1, 1)\n\nThere are numerous other methods and properties. Many of these specific\nto the ``tilescope`` algorithm, discussed in `Christian Bean\u2019s PhD\nthesis <https://skemman.is/handle/1946/31663>`__.", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/PermutaTriangle/Tilings", "keywords": "permutation perm gridded pattern tiling avoid containoccurrences grid class", "license": "BSD-3", "maintainer": "", "maintainer_email": "", "name": "tilings", "package_url": "https://pypi.org/project/tilings/", "platform": "", "project_url": "https://pypi.org/project/tilings/", "project_urls": {"Homepage": "https://github.com/PermutaTriangle/Tilings", "Source": "https://github.com/PermutaTriangle/Tilings", "Tracker": "https://github.com/PermutaTriangle/Tilings/issues"}, "release_url": "https://pypi.org/project/tilings/1.0.2/", "requires_dist": null, "requires_python": ">=3.5", "summary": "A Python library for gridded permutations and tilings.", "version": "1.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/PermutaTriangle/Tilings\" rel=\"nofollow\"><img alt=\"Travis\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/797edc706e43766ce6c0d50db4356c22dcd38723/68747470733a2f2f7472617669732d63692e6f72672f5065726d757461547269616e676c652f54696c696e67732e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/PermutaTriangle/Tilings?branch=master\" rel=\"nofollow\"><img alt=\"Coveralls\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/84cc2401d14ff14caeeb6d8aedad7c7604d9df73/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f5065726d757461547269616e676c652f54696c696e67732f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pypi.python.org/pypi/Tilings\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/14671dce252599a9729f8909911715d4d334685d/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f54696c696e67732e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/Tilings\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/l/Tilings.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/67a97a45e97e962fbe2638430832dd8e1ca0ebbc/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f54696c696e67732e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/Tilings\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/pyversions/Tilings.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/53fef495b850d33f286a23b328dd509ffbd594d0/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f54696c696e67732e737667\"></a>\n<a href=\"https://requires.io/github/PermutaTriangle/Tilings/requirements/?branch=master\" rel=\"nofollow\"><img alt=\"Requirements Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/eb7d4c14139943fba1f0b1d7447c8bd55a46ffce/68747470733a2f2f72657175697265732e696f2f6769746875622f5065726d757461547269616e676c652f54696c696e67732f726571756972656d656e74732e7376673f6272616e63683d6d6173746572\"></a>\n<p><tt>tilings</tt> is a Python library for working with gridded permutation and\ntilings.</p>\n<div id=\"installing\">\n<h2>Installing</h2>\n<p>To install <tt>tilings</tt> on your system, run:</p>\n<pre>pip install tilings\n</pre>\n<p>It is also possible to install <tt>tilings</tt> in development mode to work\non the source code, in which case you run the following after cloning\nthe repository:</p>\n<pre>./setup.py develop\n</pre>\n<p>To run the unit tests:</p>\n<pre>./setup.py <span class=\"nb\">test</span>\n</pre>\n</div>\n<div id=\"what-are-gridded-permutations-and-tilings\">\n<h2>What are gridded permutations and tilings?</h2>\n<p>We will be brief in our definitions here, for more details see\n<a href=\"https://skemman.is/handle/1946/31663\" rel=\"nofollow\">Christian Bean\u2019s PhD thesis</a>.</p>\n<p>A <tt>gridded permutation</tt> is a pair <tt>(\u03c0, P)</tt> where <tt>\u03c0</tt> is a\npermutation and <tt>P</tt> is a tuple of cells, called the positions, that\ndenote the cells in which the points of <tt>\u03c0</tt> are drawn on a grid. Let\n<tt>G</tt> denote the set of all gridded permutations. Containment of gridded\npermutations is defined the same as containment of permutations, except\nincluding the preservation of the cells.</p>\n<p>A <tt>tiling</tt> is a triple <tt>T = ((n, m), O, R)</tt>, where <tt>n</tt> and <tt>m</tt>\nare positive integers, <tt>O</tt> is a set of gridded permutations called\n<tt>obstructions</tt>, and <tt>R</tt> is a set of sets of gridded permutations\ncalled <tt>requirements</tt>.</p>\n<p>We say a gridded permutations avoids a set of gridded permutations if it\navoids all of the permutations in the set, otherwise it contains the\nset. To contain a set, therefore, means contains at least one in the\nset. The set of gridded permutations on a tiling <tt>Grid(T)</tt> is the set\nof all gridded permutations in the <tt>n x m</tt> grid that avoids <tt>O</tt> and\ncontains each set <tt>r</tt> in <tt>R</tt>.</p>\n</div>\n<div id=\"using-tilings\">\n<h2>Using tilings</h2>\n<p>Once you\u2019ve installed <tt>tilings</tt>, it can be imported by a Python script\nor an interactive Python session, just like any other Python library:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">tilings</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n</pre>\n<p>Importing <tt>*</tt> from it supplies you with the \u2018GriddedPerm\u2019,\n\u2018Obstruction\u2019, \u2018Requirement\u2019, and \u2018Tiling\u2019 classes.</p>\n<p>As above, a gridded permutation is a pair <tt>(\u03c0, P)</tt> where <tt>\u03c0</tt> is a\npermutation and <tt>P</tt> is a tuple of cells. The permutation is assumed to\nbe a <tt>Perm</tt> from the <tt>permuta</tt> Python library. Not every tuple of\ncells is a valid position for a given permutation. This can be checked\nusing the <tt>contradictory</tt> method.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">permuta</span> <span class=\"kn\">import</span> <span class=\"n\">Perm</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">gp</span> <span class=\"o\">=</span> <span class=\"n\">GriddedPerm</span><span class=\"p\">(</span><span class=\"n\">Perm</span><span class=\"p\">((</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)),</span> <span class=\"p\">((</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">gp</span><span class=\"o\">.</span><span class=\"n\">contradictory</span><span class=\"p\">()</span>\n<span class=\"kc\">False</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">gp</span> <span class=\"o\">=</span> <span class=\"n\">GriddedPerm</span><span class=\"p\">(</span><span class=\"n\">Perm</span><span class=\"p\">((</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)),</span> <span class=\"p\">((</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">gp</span><span class=\"o\">.</span><span class=\"n\">contradictory</span><span class=\"p\">()</span>\n<span class=\"kc\">True</span>\n</pre>\n<p>A <tt>Tiling</tt> is created with an iterable of <tt>Obstruction</tt> and an\niterable of <tt>Requirement</tt> lists. It is assumed that all cells not\nmentioned in some obstruction or requirement is empty. You can print the\ntiling to get an overview of the tiling created. In this example, we\nhave a tiling that corresponds to non-empty permutation avoiding\n<tt>123</tt>.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">obstructions</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">Obstruction</span><span class=\"o\">.</span><span class=\"n\">single_cell</span><span class=\"p\">(</span><span class=\"n\">Perm</span><span class=\"p\">((</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)),</span>\n<span class=\"o\">...</span>                 <span class=\"n\">Obstruction</span><span class=\"o\">.</span><span class=\"n\">single_cell</span><span class=\"p\">(</span><span class=\"n\">Perm</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)),</span>\n<span class=\"o\">...</span>                 <span class=\"n\">Obstruction</span><span class=\"o\">.</span><span class=\"n\">single_cell</span><span class=\"p\">(</span><span class=\"n\">Perm</span><span class=\"p\">((</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)),</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)),</span>\n<span class=\"o\">...</span>                 <span class=\"n\">Obstruction</span><span class=\"o\">.</span><span class=\"n\">single_cell</span><span class=\"p\">(</span><span class=\"n\">Perm</span><span class=\"p\">((</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)),</span>\n<span class=\"o\">...</span>                 <span class=\"n\">Obstruction</span><span class=\"p\">(</span><span class=\"n\">Perm</span><span class=\"p\">((</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)),</span> <span class=\"p\">((</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)))]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">requirements</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"n\">Requirement</span><span class=\"o\">.</span><span class=\"n\">single_cell</span><span class=\"p\">(</span><span class=\"n\">Perm</span><span class=\"p\">((</span><span class=\"mi\">0</span><span class=\"p\">,)),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))]]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">til</span> <span class=\"o\">=</span> <span class=\"n\">Tiling</span><span class=\"p\">(</span><span class=\"n\">obstructions</span><span class=\"p\">,</span> <span class=\"n\">requirements</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">til</span><span class=\"p\">)</span>\n<span class=\"o\">+-+-+-+</span>\n<span class=\"o\">|</span> <span class=\"o\">|</span><span class=\"err\">\u25cf</span><span class=\"o\">|</span> <span class=\"o\">|</span>\n<span class=\"o\">+-+-+-+</span>\n<span class=\"o\">|</span>\\<span class=\"o\">|</span> <span class=\"o\">|</span><span class=\"mi\">1</span><span class=\"o\">|</span>\n<span class=\"o\">+-+-+-+</span>\n<span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"n\">Av</span><span class=\"p\">(</span><span class=\"mi\">012</span><span class=\"p\">)</span>\n\\<span class=\"p\">:</span> <span class=\"n\">Av</span><span class=\"p\">(</span><span class=\"mi\">01</span><span class=\"p\">)</span>\n<span class=\"err\">\u25cf</span><span class=\"p\">:</span> <span class=\"n\">point</span>\n<span class=\"n\">Crossing</span> <span class=\"n\">obstructions</span><span class=\"p\">:</span>\n<span class=\"mi\">012</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">Requirement</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n<span class=\"mi\">0</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">til</span><span class=\"o\">.</span><span class=\"n\">dimensions</span>\n<span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">til</span><span class=\"o\">.</span><span class=\"n\">active_cells</span><span class=\"p\">)</span>\n<span class=\"p\">[(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">til</span><span class=\"o\">.</span><span class=\"n\">point_cells</span>\n<span class=\"nb\">frozenset</span><span class=\"p\">({(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)})</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">til</span><span class=\"o\">.</span><span class=\"n\">possibly_empty</span><span class=\"p\">)</span>\n<span class=\"p\">[(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">til</span><span class=\"o\">.</span><span class=\"n\">positive_cells</span>\n<span class=\"nb\">frozenset</span><span class=\"p\">({(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)})</span>\n</pre>\n<p>There are a number of methods available on the tiling. You can generate\nthe gridded permutations satisfying the obtructions and requirements\nusing the <tt>gridded_perms_of_length</tt> method.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">for</span> <span class=\"n\">gp</span> <span class=\"ow\">in</span> <span class=\"n\">til</span><span class=\"o\">.</span><span class=\"n\">gridded_perms_of_length</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>         <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">gp</span><span class=\"p\">)</span>\n<span class=\"mi\">0</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"mi\">10</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"mi\">01</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"mi\">210</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"mi\">201</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"mi\">120</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"mi\">021</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"mi\">102</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre>\n<p>There are numerous other methods and properties. Many of these specific\nto the <tt>tilescope</tt> algorithm, discussed in <a href=\"https://skemman.is/handle/1946/31663\" rel=\"nofollow\">Christian Bean\u2019s PhD\nthesis</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 6919996, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "9fda967e919515d1c16d7cbff495574e", "sha256": "f899f3b0414206258f67559ae8856442ece9939ae947387f12db6002bc34d8ff"}, "downloads": -1, "filename": "tilings-0.0.1.tar.gz", "has_sig": false, "md5_digest": "9fda967e919515d1c16d7cbff495574e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 27602, "upload_time": "2019-06-04T23:44:25", "upload_time_iso_8601": "2019-06-04T23:44:25.244929Z", "url": "https://files.pythonhosted.org/packages/27/4d/5ebcb3fd6c5e905a15b53f847fbfb1ef12ea4bb88ab182dc2e85cff513d0/tilings-0.0.1.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "5091b4c95eb43704a08dc82a8ebce2f7", "sha256": "499d1182a785eb949342f1e2762c7b1a4fc62a322c4e5656074726c19c4f8b9a"}, "downloads": -1, "filename": "tilings-1.0.0.tar.gz", "has_sig": false, "md5_digest": "5091b4c95eb43704a08dc82a8ebce2f7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 27498, "upload_time": "2019-08-26T12:57:14", "upload_time_iso_8601": "2019-08-26T12:57:14.823554Z", "url": "https://files.pythonhosted.org/packages/d8/2f/63a345a13fb35978a4d27c2ea7a5d008c0c62837e039320d577c0f7283de/tilings-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "2713a80701c581d04c6e666b04bf0674", "sha256": "70df46daab3409792b06b69682bde5f31bdea8521d624cb03046db7112a62109"}, "downloads": -1, "filename": "tilings-1.0.1.tar.gz", "has_sig": false, "md5_digest": "2713a80701c581d04c6e666b04bf0674", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 27730, "upload_time": "2019-08-26T20:26:03", "upload_time_iso_8601": "2019-08-26T20:26:03.941534Z", "url": "https://files.pythonhosted.org/packages/8d/b4/c81d9b939b5a2992bc24bcfbc6ac9e8235055cd7dc51664fa0574c825bb7/tilings-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "f929840cfcca68f0acc647b7afcbe1d0", "sha256": "afd7e8e36b388056bffb08bae8cb89733aa9f0f0cc7e37e713056cb1a2fd4bc3"}, "downloads": -1, "filename": "tilings-1.0.2.tar.gz", "has_sig": false, "md5_digest": "f929840cfcca68f0acc647b7afcbe1d0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 27735, "upload_time": "2020-03-31T12:49:15", "upload_time_iso_8601": "2020-03-31T12:49:15.753989Z", "url": "https://files.pythonhosted.org/packages/f9/7f/cba749f0b75373d2b6c6a227c85a7d7ca1196266e0b675cea33191c0518c/tilings-1.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f929840cfcca68f0acc647b7afcbe1d0", "sha256": "afd7e8e36b388056bffb08bae8cb89733aa9f0f0cc7e37e713056cb1a2fd4bc3"}, "downloads": -1, "filename": "tilings-1.0.2.tar.gz", "has_sig": false, "md5_digest": "f929840cfcca68f0acc647b7afcbe1d0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 27735, "upload_time": "2020-03-31T12:49:15", "upload_time_iso_8601": "2020-03-31T12:49:15.753989Z", "url": "https://files.pythonhosted.org/packages/f9/7f/cba749f0b75373d2b6c6a227c85a7d7ca1196266e0b675cea33191c0518c/tilings-1.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:53:40 2020"}