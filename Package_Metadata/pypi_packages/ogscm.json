{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# OGS Container Maker\n\n## General usage\n\n### Installation\n\n```bash\nvirtualenv ~/.venv/ogs-container-maker\nsource ~/.venv/ogs-container-maker/bin/activate\npip install ogscm\n```\n\n### Generate container definition\n\n```bash\n$ ogscm\nCreating 1 image definition(s)...\nCreated definition _out/docker/ubuntu_17.10/ogs-4c7de6a4/serial/conan/cmake-d41d8cd9/Dockerfile\n\n# With user options\n$ ogscm --format singularity --ompi 2.1.3 --cmake_args ' -DOGS_BUILD_PROCESSES=GroundwaterFlow'\nCreating 1 image definition(s)...\nCreated definition _out/singularity/ubuntu_17.10/ogs-4c7de6a4/openmpi-2.1.3/conan/cmake-fde09bf7/Singularity.de\n```\n\n### Build image\n\nAdd the `--build`-flag.\n\nConvert Docker image to Singularity image:\n\nAdd the `--convert`-flag (requires Singularity 3.x).\n\n### Run\n\n```bash\ndocker run --it --rm ogs-ompi-2.1.3\n# in container:\nogs --version\n```\n\n```bash\nsingularity shell ogs-ompi-2.1.3.sif\n# in container:\nogs --version\n# OR directly run from host\nsingularity exec ogs-ompi-2.1.3.sif ogs local/path/to/square_1e0.prj\n```\n\n## Using the combinatorial builder\n\nCreates Docker definition files with different OpenMPI implementations and OpenGeoSys parallel configuration (from the current master), builds the docker images and converts them to Singularity images:\n\n```bash\npython build.py --ogs ufz/ogs@master --ompi 2.1.2 3.1.2 --build --convert\n```\n\nCheck help for more options:\n\n```\n$ ogscm --help\nusage: ogscm [-h] [--version] [--out OUT] [--file FILE] [--print]\n              [--format [{docker,singularity} [{docker,singularity} ...]]]\n              [--pm [{system,conan,spack,off} [{system,conan,spack,off} ...]]]\n              [--ompi [OMPI [OMPI ...]]] [--ogs [OGS [OGS ...]]]\n              [--cmake_args [CMAKE_ARGS [CMAKE_ARGS ...]]] [--build]\n              [--upload] [--registry REGISTRY] [--convert] [--runtime-only]\n              [--ccache] [--parallel PARALLEL] [--base_image BASE_IMAGE]\n              [--compiler COMPILER] [--compiler_version COMPILER_VERSION]\n              [--gui] [--docs] [--jenkins] [--cvode] [--cppcheck] [--iwyy]\n              [--gcovr] [--mpi_benchmarks] [--dev] [--insitu]\n              [--pip [package [package ...]]] [--clean] [--deploy [DEPLOY]]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --version             show program's version number and exit\n  --out OUT             Output directory (default: _out)\n  --file FILE           Overwrite output recipe file name (default: )\n  --print, -P           Print the definition to stdout (default: False)\n\nCombinatorial options:\n  All combinations of the given options will be generated\n\n  --format [{docker,singularity} [{docker,singularity} ...]]\n  --pm [{system,conan,spack,off} [{system,conan,spack,off} ...]]\n                        Package manager to install third-party dependencies\n                        (default: ['conan'])\n  --ompi [OMPI [OMPI ...]]\n                        OpenMPI version, e.g. 2.1.1, 2.1.5, 3.0.1, 3.1.2\n                        (default: ['off'])\n  --ogs [OGS [OGS ...]]\n                        OGS GitHub repo in the form 'user/repo@branch' OR\n                        'user/repo@@commit' to checkout a specific commit OR a\n                        path to a local subdirectory to the git cloned OGS\n                        sourcesOR 'off' to disable OGS building (default:\n                        ['ufz/ogs@master'])\n  --cmake_args [CMAKE_ARGS [CMAKE_ARGS ...]]\n                        CMake argument sets have to be quoted and **must**\n                        start with a space. e.g. --cmake_args ' -DFIRST=TRUE\n                        -DFOO=BAR' ' -DSECOND=TRUE' (default: [''])\n\nImage build options:\n  --build, -B           Build the images from the definition files (default:\n                        False)\n  --upload, -U          Upload Docker image to registry (default: False)\n  --registry REGISTRY   The docker registry the image is tagged and uploaded\n                        to. (default: registry.opengeosys.org/ogs/ogs)\n  --convert, -C         Convert Docker image to Singularity image (default:\n                        False)\n  --runtime-only, -R    Generate multi-stage Dockerfiles for small runtime\n                        images (default: False)\n  --ccache              Enables ccache build caching. (default: False)\n  --parallel PARALLEL, -j PARALLEL\n                        The number of cores to use for compilation. (default:\n                        10)\n\nAdditional options:\n  --base_image BASE_IMAGE\n                        The base image. (default: ubuntu:18.04)\n  --compiler COMPILER   The compiler to use. Possible options: off, gcc, clang\n                        (default: gcc)\n  --compiler_version COMPILER_VERSION\n                        Compiler version. (default: )\n  --gui                 Builds the GUI (Data Explorer) (default: False)\n  --docs                Setup documentation requirements (Doxygen) (default:\n                        False)\n  --jenkins             Setup Jenkins slave (default: False)\n  --cvode               Install and configure with cvode (default: False)\n  --cppcheck            Install cppcheck (default: False)\n  --iwyy                Install include-what-you-use (default: False)\n  --gcovr               Install gcovr (default: False)\n  --mpi_benchmarks      Installs OSU MPI benchmarks as scif app and mpi_bw,\n                        mpi_ring,mpi_hello (default: False)\n  --dev                 Installs development tools (vim, gdb) (default: False)\n  --insitu              Builds with insitu capabilities (default: False)\n  --pip [package [package ...]]\n                        Install additional Python packages (default: [''])\n\nMaintenance:\n  --clean               Cleans up generated files in default directories.\n                        (default: False)\n\nImage deployment:\n  --deploy [DEPLOY], -D [DEPLOY]\n                        Deploys to all configured hosts (in\n                        config/deploy_hosts.yml) with no additional arguments\n                        or to the specified host. Implies --build and\n                        --convert arguments. (default: )\n```\n\n## Advanced usage\n\n### Build OGS from local git repo\n\nYou can use the ogs-container-maker to build multiple container images from your current source code at once. The following commands will build (`-B`-parameter) 4 docker container (using one serial and 3 MPI-enabled configurations), convert them to Singularity image files (`-C`) and strip everything out but the runtime-requirements (`-R`). You can find the images in `_out/images`.\n\n```\ncd ogs\ngit submodule update --init ThirdParty/container-maker\nvirtualenv .venv\nsource .venv/bin/activate\npip install -r ThirdParty/container-maker/requirements.txt\nexport PYTHONPATH=\"${PYTHONPATH}:${PWD}/ThirdParty/container-maker\"\npython ThirdParty/container-maker/ogscm/cli.py -B -C -R --ogs . --pm system --cvode --ompi off 2.1.6 3.1.4 4.0.1\n```\n\n### Deploy image files\n\n- Requires `rsync`\n- Rename the file `config/deploy_hosts_example.yml` to `config/deploy_hosts.yml`\n- `host` has to be a SSH host to which you have passwordless access\n- Deploy to the host with `... -D myhost`", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ufz/ogs-container-maker", "keywords": "", "license": "BSD 3-Clause", "maintainer": "Lars Bilke", "maintainer_email": "lars.bilke@ufz.de", "name": "ogscm", "package_url": "https://pypi.org/project/ogscm/", "platform": "", "project_url": "https://pypi.org/project/ogscm/", "project_urls": {"Homepage": "https://github.com/ufz/ogs-container-maker"}, "release_url": "https://pypi.org/project/ogscm/1.4.3/", "requires_dist": null, "requires_python": "", "summary": "OGS Container Maker", "version": "1.4.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>OGS Container Maker</h1>\n<h2>General usage</h2>\n<h3>Installation</h3>\n<pre>virtualenv ~/.venv/ogs-container-maker\n<span class=\"nb\">source</span> ~/.venv/ogs-container-maker/bin/activate\npip install ogscm\n</pre>\n<h3>Generate container definition</h3>\n<pre>$ ogscm\nCreating <span class=\"m\">1</span> image definition<span class=\"o\">(</span>s<span class=\"o\">)</span>...\nCreated definition _out/docker/ubuntu_17.10/ogs-4c7de6a4/serial/conan/cmake-d41d8cd9/Dockerfile\n\n<span class=\"c1\"># With user options</span>\n$ ogscm --format singularity --ompi <span class=\"m\">2</span>.1.3 --cmake_args <span class=\"s1\">' -DOGS_BUILD_PROCESSES=GroundwaterFlow'</span>\nCreating <span class=\"m\">1</span> image definition<span class=\"o\">(</span>s<span class=\"o\">)</span>...\nCreated definition _out/singularity/ubuntu_17.10/ogs-4c7de6a4/openmpi-2.1.3/conan/cmake-fde09bf7/Singularity.de\n</pre>\n<h3>Build image</h3>\n<p>Add the <code>--build</code>-flag.</p>\n<p>Convert Docker image to Singularity image:</p>\n<p>Add the <code>--convert</code>-flag (requires Singularity 3.x).</p>\n<h3>Run</h3>\n<pre>docker run --it --rm ogs-ompi-2.1.3\n<span class=\"c1\"># in container:</span>\nogs --version\n</pre>\n<pre>singularity shell ogs-ompi-2.1.3.sif\n<span class=\"c1\"># in container:</span>\nogs --version\n<span class=\"c1\"># OR directly run from host</span>\nsingularity <span class=\"nb\">exec</span> ogs-ompi-2.1.3.sif ogs local/path/to/square_1e0.prj\n</pre>\n<h2>Using the combinatorial builder</h2>\n<p>Creates Docker definition files with different OpenMPI implementations and OpenGeoSys parallel configuration (from the current master), builds the docker images and converts them to Singularity images:</p>\n<pre>python build.py --ogs ufz/ogs@master --ompi <span class=\"m\">2</span>.1.2 <span class=\"m\">3</span>.1.2 --build --convert\n</pre>\n<p>Check help for more options:</p>\n<pre><code>$ ogscm --help\nusage: ogscm [-h] [--version] [--out OUT] [--file FILE] [--print]\n              [--format [{docker,singularity} [{docker,singularity} ...]]]\n              [--pm [{system,conan,spack,off} [{system,conan,spack,off} ...]]]\n              [--ompi [OMPI [OMPI ...]]] [--ogs [OGS [OGS ...]]]\n              [--cmake_args [CMAKE_ARGS [CMAKE_ARGS ...]]] [--build]\n              [--upload] [--registry REGISTRY] [--convert] [--runtime-only]\n              [--ccache] [--parallel PARALLEL] [--base_image BASE_IMAGE]\n              [--compiler COMPILER] [--compiler_version COMPILER_VERSION]\n              [--gui] [--docs] [--jenkins] [--cvode] [--cppcheck] [--iwyy]\n              [--gcovr] [--mpi_benchmarks] [--dev] [--insitu]\n              [--pip [package [package ...]]] [--clean] [--deploy [DEPLOY]]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --version             show program's version number and exit\n  --out OUT             Output directory (default: _out)\n  --file FILE           Overwrite output recipe file name (default: )\n  --print, -P           Print the definition to stdout (default: False)\n\nCombinatorial options:\n  All combinations of the given options will be generated\n\n  --format [{docker,singularity} [{docker,singularity} ...]]\n  --pm [{system,conan,spack,off} [{system,conan,spack,off} ...]]\n                        Package manager to install third-party dependencies\n                        (default: ['conan'])\n  --ompi [OMPI [OMPI ...]]\n                        OpenMPI version, e.g. 2.1.1, 2.1.5, 3.0.1, 3.1.2\n                        (default: ['off'])\n  --ogs [OGS [OGS ...]]\n                        OGS GitHub repo in the form 'user/repo@branch' OR\n                        'user/repo@@commit' to checkout a specific commit OR a\n                        path to a local subdirectory to the git cloned OGS\n                        sourcesOR 'off' to disable OGS building (default:\n                        ['ufz/ogs@master'])\n  --cmake_args [CMAKE_ARGS [CMAKE_ARGS ...]]\n                        CMake argument sets have to be quoted and **must**\n                        start with a space. e.g. --cmake_args ' -DFIRST=TRUE\n                        -DFOO=BAR' ' -DSECOND=TRUE' (default: [''])\n\nImage build options:\n  --build, -B           Build the images from the definition files (default:\n                        False)\n  --upload, -U          Upload Docker image to registry (default: False)\n  --registry REGISTRY   The docker registry the image is tagged and uploaded\n                        to. (default: registry.opengeosys.org/ogs/ogs)\n  --convert, -C         Convert Docker image to Singularity image (default:\n                        False)\n  --runtime-only, -R    Generate multi-stage Dockerfiles for small runtime\n                        images (default: False)\n  --ccache              Enables ccache build caching. (default: False)\n  --parallel PARALLEL, -j PARALLEL\n                        The number of cores to use for compilation. (default:\n                        10)\n\nAdditional options:\n  --base_image BASE_IMAGE\n                        The base image. (default: ubuntu:18.04)\n  --compiler COMPILER   The compiler to use. Possible options: off, gcc, clang\n                        (default: gcc)\n  --compiler_version COMPILER_VERSION\n                        Compiler version. (default: )\n  --gui                 Builds the GUI (Data Explorer) (default: False)\n  --docs                Setup documentation requirements (Doxygen) (default:\n                        False)\n  --jenkins             Setup Jenkins slave (default: False)\n  --cvode               Install and configure with cvode (default: False)\n  --cppcheck            Install cppcheck (default: False)\n  --iwyy                Install include-what-you-use (default: False)\n  --gcovr               Install gcovr (default: False)\n  --mpi_benchmarks      Installs OSU MPI benchmarks as scif app and mpi_bw,\n                        mpi_ring,mpi_hello (default: False)\n  --dev                 Installs development tools (vim, gdb) (default: False)\n  --insitu              Builds with insitu capabilities (default: False)\n  --pip [package [package ...]]\n                        Install additional Python packages (default: [''])\n\nMaintenance:\n  --clean               Cleans up generated files in default directories.\n                        (default: False)\n\nImage deployment:\n  --deploy [DEPLOY], -D [DEPLOY]\n                        Deploys to all configured hosts (in\n                        config/deploy_hosts.yml) with no additional arguments\n                        or to the specified host. Implies --build and\n                        --convert arguments. (default: )\n</code></pre>\n<h2>Advanced usage</h2>\n<h3>Build OGS from local git repo</h3>\n<p>You can use the ogs-container-maker to build multiple container images from your current source code at once. The following commands will build (<code>-B</code>-parameter) 4 docker container (using one serial and 3 MPI-enabled configurations), convert them to Singularity image files (<code>-C</code>) and strip everything out but the runtime-requirements (<code>-R</code>). You can find the images in <code>_out/images</code>.</p>\n<pre><code>cd ogs\ngit submodule update --init ThirdParty/container-maker\nvirtualenv .venv\nsource .venv/bin/activate\npip install -r ThirdParty/container-maker/requirements.txt\nexport PYTHONPATH=\"${PYTHONPATH}:${PWD}/ThirdParty/container-maker\"\npython ThirdParty/container-maker/ogscm/cli.py -B -C -R --ogs . --pm system --cvode --ompi off 2.1.6 3.1.4 4.0.1\n</code></pre>\n<h3>Deploy image files</h3>\n<ul>\n<li>Requires <code>rsync</code></li>\n<li>Rename the file <code>config/deploy_hosts_example.yml</code> to <code>config/deploy_hosts.yml</code></li>\n<li><code>host</code> has to be a SSH host to which you have passwordless access</li>\n<li>Deploy to the host with <code>... -D myhost</code></li>\n</ul>\n\n          </div>"}, "last_serial": 6798741, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "b1e77d91fc402152c3e543c3f7d6004a", "sha256": "3c21b626dc405084d0525aa63a80731196515e839319100df94837cba119f9e6"}, "downloads": -1, "filename": "ogscm-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "b1e77d91fc402152c3e543c3f7d6004a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 31076, "upload_time": "2019-03-28T14:53:31", "upload_time_iso_8601": "2019-03-28T14:53:31.869286Z", "url": "https://files.pythonhosted.org/packages/3d/7e/eb3c0a76683a3223f19c1e43863f9499bf88a618c5a6dde3b24f4d98d736/ogscm-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "08081af040404ec4f2748decdc95e517", "sha256": "3c00a51de2c131f30126adca8d75d23492ff6c9aa94f6f93e807744609ecfe2e"}, "downloads": -1, "filename": "ogscm-0.0.2.tar.gz", "has_sig": false, "md5_digest": "08081af040404ec4f2748decdc95e517", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16905, "upload_time": "2019-03-28T14:53:35", "upload_time_iso_8601": "2019-03-28T14:53:35.179116Z", "url": "https://files.pythonhosted.org/packages/f0/22/e3127d2e93d118741ff0096e204c02a348d5b08deccf4cbfa35e851bdd52/ogscm-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "82f4911001bcfe5d8a52ce1e5c6654f1", "sha256": "1f440af7a9eff96d40b1eac0c7fe1af952bcafac42e61ac337934e3e51463f4c"}, "downloads": -1, "filename": "ogscm-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "82f4911001bcfe5d8a52ce1e5c6654f1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 31068, "upload_time": "2019-03-28T14:53:33", "upload_time_iso_8601": "2019-03-28T14:53:33.945926Z", "url": "https://files.pythonhosted.org/packages/cd/a1/738314dcfc15569aaf07d9df49d6c3634d39f40f3ccf784c9f37a03276ba/ogscm-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a6dd9e3671b03e1c6d092757a9deda24", "sha256": "3f5ed8759fa5a3c0defbf26f0c1384375d6ee045d44b68a4973b66c1186b354a"}, "downloads": -1, "filename": "ogscm-0.0.3.tar.gz", "has_sig": false, "md5_digest": "a6dd9e3671b03e1c6d092757a9deda24", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16907, "upload_time": "2019-03-28T14:53:36", "upload_time_iso_8601": "2019-03-28T14:53:36.566902Z", "url": "https://files.pythonhosted.org/packages/d9/cf/9753654912c794d34e91ac7055604257f5ae130b3a3da9917683a0a55a43/ogscm-0.0.3.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "93fd61c6e4e63d158f290ed8fb3d2dcd", "sha256": "e682ddfde65af065e7c65d5f23a3012bf9c44d5d21ecaae7bb33b9136ef7e63b"}, "downloads": -1, "filename": "ogscm-1.2.0-py3.7.egg", "has_sig": false, "md5_digest": "93fd61c6e4e63d158f290ed8fb3d2dcd", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 74537, "upload_time": "2020-03-12T10:55:48", "upload_time_iso_8601": "2020-03-12T10:55:48.322810Z", "url": "https://files.pythonhosted.org/packages/06/b5/7c9cc3683600b77fb4daf5c2466db1830a831e3366ea306f76d9c84dbc0e/ogscm-1.2.0-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "4101307b5ae5861873bbc6d0a9e9a860", "sha256": "d003ecb087633beb12a5bc7685a0b5c897c12fff45fe65f954093b961e82312f"}, "downloads": -1, "filename": "ogscm-1.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "4101307b5ae5861873bbc6d0a9e9a860", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 31454, "upload_time": "2019-03-29T13:41:46", "upload_time_iso_8601": "2019-03-29T13:41:46.847922Z", "url": "https://files.pythonhosted.org/packages/50/06/8f1dce7f64cd578262dbb700e460aee8098d2b90338d520ad6576d687254/ogscm-1.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cc47bd92a90e0425c6b311e1de931a1d", "sha256": "7fb60ea5c22c6783365bd6c51931630d667e6b11010f41d088c7aa5f4df01640"}, "downloads": -1, "filename": "ogscm-1.2.0.tar.gz", "has_sig": false, "md5_digest": "cc47bd92a90e0425c6b311e1de931a1d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17507, "upload_time": "2019-03-29T13:41:49", "upload_time_iso_8601": "2019-03-29T13:41:49.288665Z", "url": "https://files.pythonhosted.org/packages/de/0b/276a1a82fab391a64ab976ddc4f9ab6e2504e6bcd2bfd4e58fa85ea55964/ogscm-1.2.0.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "44b64de3c33a3e555d48be664dca40da", "sha256": "0ad591d36b1d9a798d8313682a059433becf33cd6da43015ea8dd7ec6d46e363"}, "downloads": -1, "filename": "ogscm-1.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "44b64de3c33a3e555d48be664dca40da", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 34407, "upload_time": "2020-03-12T10:55:46", "upload_time_iso_8601": "2020-03-12T10:55:46.693145Z", "url": "https://files.pythonhosted.org/packages/25/7d/f091e8d654fa99888b620133a1a38250304adfa4648331c4d5c5644aac87/ogscm-1.3.0-py3-none-any.whl", "yanked": false}], "1.4.0": [{"comment_text": "", "digests": {"md5": "a22e1dd1d93eb9c9089329ef6f86af96", "sha256": "ea8d5fa90001e13763b938385dd8b584fe0bfa8395c5c483b0db2e87da3e719b"}, "downloads": -1, "filename": "ogscm-1.4.0.tar.gz", "has_sig": false, "md5_digest": "a22e1dd1d93eb9c9089329ef6f86af96", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23561, "upload_time": "2020-03-12T10:56:06", "upload_time_iso_8601": "2020-03-12T10:56:06.114905Z", "url": "https://files.pythonhosted.org/packages/24/14/bb48a9bad8bb252a97e9bc3a3c8fa772697861295ae42f1e2ffed712c37f/ogscm-1.4.0.tar.gz", "yanked": false}], "1.4.1": [{"comment_text": "", "digests": {"md5": "5faa67e35df209197077a28eacb36a22", "sha256": "b70421ec8c1891fc31a1a111aae8b0fb7ff24889b4078f237a3b8ffdcddf906e"}, "downloads": -1, "filename": "ogscm-1.4.1.tar.gz", "has_sig": false, "md5_digest": "5faa67e35df209197077a28eacb36a22", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23570, "upload_time": "2020-03-12T11:01:08", "upload_time_iso_8601": "2020-03-12T11:01:08.807536Z", "url": "https://files.pythonhosted.org/packages/99/6c/95dd9336c04c44f53bfce1b791c66f799681eb31a057c7307451e5be9a66/ogscm-1.4.1.tar.gz", "yanked": false}], "1.4.2": [{"comment_text": "", "digests": {"md5": "d5f52af09acdb894e0535ecb876f4f4f", "sha256": "7de4a71d52153dc113e51459c8b863e91c61a545e4aa730380baee685977cf44"}, "downloads": -1, "filename": "ogscm-1.4.2.tar.gz", "has_sig": false, "md5_digest": "d5f52af09acdb894e0535ecb876f4f4f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23574, "upload_time": "2020-03-12T11:03:02", "upload_time_iso_8601": "2020-03-12T11:03:02.245732Z", "url": "https://files.pythonhosted.org/packages/da/79/780f31f1b92c4c861e342ddb53e35aaf62916462bf82398d7657e0814a1e/ogscm-1.4.2.tar.gz", "yanked": false}], "1.4.3": [{"comment_text": "", "digests": {"md5": "9fef260710c994e7e1e940c6b6ad3ebb", "sha256": "0c85c100445dc551e45897d930cfcb3ed3b56a00d3ea88dc8e40ab59512e9e3b"}, "downloads": -1, "filename": "ogscm-1.4.3.tar.gz", "has_sig": false, "md5_digest": "9fef260710c994e7e1e940c6b6ad3ebb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23587, "upload_time": "2020-03-12T11:04:53", "upload_time_iso_8601": "2020-03-12T11:04:53.461746Z", "url": "https://files.pythonhosted.org/packages/1e/7c/86dc9f262b1183af12fbaa309b7279e6cfbc6edd89f9f8e5c47d6155372f/ogscm-1.4.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9fef260710c994e7e1e940c6b6ad3ebb", "sha256": "0c85c100445dc551e45897d930cfcb3ed3b56a00d3ea88dc8e40ab59512e9e3b"}, "downloads": -1, "filename": "ogscm-1.4.3.tar.gz", "has_sig": false, "md5_digest": "9fef260710c994e7e1e940c6b6ad3ebb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23587, "upload_time": "2020-03-12T11:04:53", "upload_time_iso_8601": "2020-03-12T11:04:53.461746Z", "url": "https://files.pythonhosted.org/packages/1e/7c/86dc9f262b1183af12fbaa309b7279e6cfbc6edd89f9f8e5c47d6155372f/ogscm-1.4.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:04:51 2020"}