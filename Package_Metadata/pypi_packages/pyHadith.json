{"info": {"author": "Umar Butler", "author_email": "umar@umarbutler.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Science/Research", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Natural Language :: Arabic", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Text Processing"], "description": "# pyHadith\n\n[![GPLv3 License](https://img.shields.io/badge/License-GPL%20v3-yellow.svg)](https://opensource.org/licenses/) \n[![PyUp](https://pyup.io/repos/github/umarbutler/pyhadith/shield.svg)](https://pyup.io/account/repos/github/umarbutler/pyhadith/yt2mp3/) \n[![PyPi Version](https://img.shields.io/pypi/v/pyhadith.svg)](https://pypi.python.org/pypi/pyhadith/) \n[![Python Versions](https://img.shields.io/pypi/pyversions/yt2mp3.svg)](https://pypi.python.org/pypi/yt2mp3/)\n\npyHadith is a python package which automatically segments and categorizes ahadith.\n\nThe package works by feeding raw text to custom natural language processing (NLP) models and algorithms. The resulting data is the aggregated and returned in a standardized format.\n\n## 1. How It Works\n\n### 1.1. Statistical Natural Language Processing Models\n\npyHadith uses two statistical natural language processing (NLP) models to extract narrators from, and categorize (i.e. [athar](https://en.wikipedia.org/wiki/Hadith#Distinction_from_other_literature), [khabar](https://en.wikipedia.org/wiki/Hadith#Distinction_from_other_literature)), ahadith. These are: a Named Entity Recognition (NER) model, known as *rawa*; and, a Text Classification model, known as *asl*.\n\nThe models were trained on manually annotated ahadith by the Saudi Arabian *[Permanent Committee for Scholarly Research and Ifta](https://sunnah.alifta.gov.sa/)*. Due to copyright, the data used to train the models cannot be reproduced. The models themselves, however, are not copyrighted (except under our own GNU GPLv3 license) as they come under the fair use doctrine.\n\nThe models were generated by [spaCy](https://spacy.io/) version 2.2.4. The training corpus contained 29,288 annotated ahadith, taken from [sunnah.alifta.gov.sa](https://sunnah.alifta.gov.sa/). 5,784 ahadith were withheld and used for evaluating models. After training models for 100 iterations, the best performing models were selected.\n\nThe results of the final models are displayed in the table below:\n\n| Model | Model Type | Precision | Recall | F-Score |\n|--|--|--|--|--|\n| Rawa  | Named Entity Recognition | 98.88 | 99 | 98.94 |\n| Asl   | Text Classification |  |  | 97.82 |\n\n### 1.2. Asnad Reconstruction Algorithm\n\nTo ensure that the names extracted by the *rawa* model are accurate, and to also identify the relationships of such narrators, a custom asnad reconstruction algorithm is employed.\n\nA pre-processor first uses [Motaz Saad](https://github.com/motazsaad)'s '[split-waw-arabic](https://github.com/motazsaad/split-waw-arabic)' method to identify and add whitespaces after the word '\u0648\u064e.'\n\nThe algorithm then post-processes the data returned by the *rawa* model. It first assumes that the matn begins at the last occurance of a narrator's name. The terms joining narrators are then standardized. There are two possible relationships recognized by the algorithm: A **from** B, and, A **from** B **and** C. Thus, where a term joins two or more narrators to a single narratee, that narratee will have multiple 'parent' narrators.\n\nFinally, to deal with misassignments by the *rawa* model, a set of common joining terms is used to ensure that a narrator's name is not, or does not contain, a joining term.\n\n## 2. Installation\n\npyHadith is available on pip. You can install pyHadith using the following command:\n\n    pip install pyHadith\n\nThe following python packages will also be automatically installed as dependencies of pyHadith:\n\n| Package | Version | Description |\n|--|--|--|\n| [spaCy](https://github.com/explosion/spaCy) | 2.2.4 | Used to interact with the *rawa* and *asl* models.\n| [pyArabic](https://github.com/linuxscout/pyarabic) | >= 0.6.7 | Used to remove diacritics from arabic strings.\n| [nltk](https://github.com/nltk/nltk) | >= 3.4.5 | Used to tokenize arabic strings.\n\n## 3. Usage\n\n### 3.1. Import pyHadith\n\nThe first step in using pyHadith is to import the package to your code. You can do so with the following line:\n\n    # Import the pyHadith package.\n    import pyHadith\n\n### 3.2. Deconstruct a Hadith\n\nTo deconstruct a hadith, you must first create a 'hadith' object with the hadith module. This requires the passing of a single argument, a UTF-8 encoded Arabic text with diacritics.\n\nThe code below demonstrates how a 'hadith' object can be created:\n\n    # -*- coding: utf-8 -*-\n    # Import the 'hadith' module of pyHadith.\n    import pyhadith.hadith as hadith\n    # Set the hadith to be processed.\n    text = u'\u062d\u064e\u062f\u0651\u064e\u062b\u064e\u0646\u0650\u064a \u064a\u064e\u062d\u0652\u064a\u064e\u0649\u060c \u0639\u064e\u0646\u0652 \u0645\u064e\u0627\u0644\u0650\u0643\u064d\u060c \u0623\u064e\u0646\u0651\u064e\u0647\u064f \u0628\u064e\u0644\u064e\u063a\u064e\u0647\u064f \u0623\u064e\u0646\u0651\u064e \u0633\u064e\u0639\u0650\u064a\u062f\u064e \u0628\u0652\u0646\u064e \u0627\u0644\u0652\u0645\u064f\u0633\u064e\u064a\u0651\u064e\u0628\u0650\u060c \u0648\u064e\u0633\u064f\u0644\u064e\u064a\u0652\u0645\u064e\u0627\u0646\u064e \u0628\u0652\u0646\u064e \u064a\u064e\u0633\u064e\u0627\u0631\u064d\u060c \u0643\u064e\u0627\u0646\u064e\u0627 \u064a\u064e\u0642\u064f\u0648\u0644\u0627\u064e\u0646\u0650 \u0639\u0650\u062f\u0651\u064e\u0629\u064f \u0627\u0644\u0623\u064e\u0645\u064e\u0629\u0650 \u0625\u0650\u0630\u064e\u0627 \u0647\u064e\u0644\u064e\u0643\u064e \u0639\u064e\u0646\u0652\u0647\u064e\u0627 \u0632\u064e\u0648\u0652\u062c\u064f\u0647\u064e\u0627 \u0634\u064e\u0647\u0652\u0631\u064e\u0627\u0646\u0650 \u0648\u064e\u062e\u064e\u0645\u0652\u0633\u064f \u0644\u064e\u064a\u064e\u0627\u0644\u064d \u200f.\u200f'\n    # Create a hadith object using the text of the hadith.\n    x = hadith.Hadith(text)\n    # Print the resulting attributes.\n    print({\n    \"raw\" : x.raw,\n    \"clean\" : x.clean,\n    \"matn\" : x.matn,\n    \"isnad\" : x.isnad,\n    \"category\" : x.category\n    })\n\nOnce a hadith object is created, the following attributes will become available:\n\n| Attribute | Data Type | Description |\n|--|--|--|\n| raw | String | The original raw text. |\n| clean | String | The cleaned raw text. |\n| matn | Object | An object containing the 'raw' text, 'start_char' index (in the cleaned text), and 'end_char' index (in the cleaned text), of the matn. |\n| isnad | Object | An object containing the 'raw' text, 'start_char' index (in the cleaned text), and 'end_char' index (in the cleaned text), of the isnad, along with a 'narrators' list which contains narrator objects (discussed later). |\n| category | Object | An object containing the 'label' (either 'athar' or 'khabar') and 'score' (from .5 to 1) of the assigned category. |\n\nA 'narrator' object in the 'narrators' list will contain the following attributes:\n\n| Attribute | Data Type | Description |\n|--|--|--|\n| id | Integer | A unique identifier number. |\n| name | String | The raw text of the narrator's name. |\n| start_char | Integer | The character index in the cleaned text where the name begins. |\n| end_char | Integer | The character index in the cleaned text where the name ends. |\n| parents | List | A list of the ids of the narrator's parents within the isnad. |\n\n## 4. License\n\npyHadith is licensed under [GPLv3](https://github.com/umarbutler/pyhadith/blob/master/LICENSE). pyArabic, spaCy and NLTK are licensed under [GPLv3](https://github.com/linuxscout/pyarabic/blob/master/LICENSE), [MIT](https://github.com/explosion/spaCy/blob/master/LICENSE), and [Apache 2.0](https://github.com/nltk/nltk/blob/develop/LICENSE.txt), respectively. These licenses are all GPL compatible.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/umarbutler/pyhadith/archive/v0.0.3.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/umarbutler/pyhadith", "keywords": "ahadith hadith isnad nlp arabic", "license": "", "maintainer": "", "maintainer_email": "", "name": "pyHadith", "package_url": "https://pypi.org/project/pyHadith/", "platform": "", "project_url": "https://pypi.org/project/pyHadith/", "project_urls": {"Download": "https://github.com/umarbutler/pyhadith/archive/v0.0.3.tar.gz", "Homepage": "https://github.com/umarbutler/pyhadith"}, "release_url": "https://pypi.org/project/pyHadith/0.0.3/", "requires_dist": null, "requires_python": ">=3.6", "summary": "A package which automatically segments and classifies ahadith.", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pyHadith</h1>\n<p><a href=\"https://opensource.org/licenses/\" rel=\"nofollow\"><img alt=\"GPLv3 License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/74cb6e56de608a9dfecd4feb2f77ef88cf297313/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d47504c25323076332d79656c6c6f772e737667\"></a>\n<a href=\"https://pyup.io/account/repos/github/umarbutler/pyhadith/yt2mp3/\" rel=\"nofollow\"><img alt=\"PyUp\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/16b946e2518b231df2dd6585413da2d79901232a/68747470733a2f2f707975702e696f2f7265706f732f6769746875622f756d61726275746c65722f70796861646974682f736869656c642e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/pyhadith/\" rel=\"nofollow\"><img alt=\"PyPi Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ae77dd77e79d73995a3bb035091bf58301e1b8fe/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f70796861646974682e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/yt2mp3/\" rel=\"nofollow\"><img alt=\"Python Versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/57df0212df51350bf8ce8091baa371324eb4e3a6/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f7974326d70332e737667\"></a></p>\n<p>pyHadith is a python package which automatically segments and categorizes ahadith.</p>\n<p>The package works by feeding raw text to custom natural language processing (NLP) models and algorithms. The resulting data is the aggregated and returned in a standardized format.</p>\n<h2>1. How It Works</h2>\n<h3>1.1. Statistical Natural Language Processing Models</h3>\n<p>pyHadith uses two statistical natural language processing (NLP) models to extract narrators from, and categorize (i.e. <a href=\"https://en.wikipedia.org/wiki/Hadith#Distinction_from_other_literature\" rel=\"nofollow\">athar</a>, <a href=\"https://en.wikipedia.org/wiki/Hadith#Distinction_from_other_literature\" rel=\"nofollow\">khabar</a>), ahadith. These are: a Named Entity Recognition (NER) model, known as <em>rawa</em>; and, a Text Classification model, known as <em>asl</em>.</p>\n<p>The models were trained on manually annotated ahadith by the Saudi Arabian <em><a href=\"https://sunnah.alifta.gov.sa/\" rel=\"nofollow\">Permanent Committee for Scholarly Research and Ifta</a></em>. Due to copyright, the data used to train the models cannot be reproduced. The models themselves, however, are not copyrighted (except under our own GNU GPLv3 license) as they come under the fair use doctrine.</p>\n<p>The models were generated by <a href=\"https://spacy.io/\" rel=\"nofollow\">spaCy</a> version 2.2.4. The training corpus contained 29,288 annotated ahadith, taken from <a href=\"https://sunnah.alifta.gov.sa/\" rel=\"nofollow\">sunnah.alifta.gov.sa</a>. 5,784 ahadith were withheld and used for evaluating models. After training models for 100 iterations, the best performing models were selected.</p>\n<p>The results of the final models are displayed in the table below:</p>\n<table>\n<thead>\n<tr>\n<th>Model</th>\n<th>Model Type</th>\n<th>Precision</th>\n<th>Recall</th>\n<th>F-Score</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Rawa</td>\n<td>Named Entity Recognition</td>\n<td>98.88</td>\n<td>99</td>\n<td>98.94</td>\n</tr>\n<tr>\n<td>Asl</td>\n<td>Text Classification</td>\n<td></td>\n<td></td>\n<td>97.82</td>\n</tr></tbody></table>\n<h3>1.2. Asnad Reconstruction Algorithm</h3>\n<p>To ensure that the names extracted by the <em>rawa</em> model are accurate, and to also identify the relationships of such narrators, a custom asnad reconstruction algorithm is employed.</p>\n<p>A pre-processor first uses <a href=\"https://github.com/motazsaad\" rel=\"nofollow\">Motaz Saad</a>'s '<a href=\"https://github.com/motazsaad/split-waw-arabic\" rel=\"nofollow\">split-waw-arabic</a>' method to identify and add whitespaces after the word '\u0648\u064e.'</p>\n<p>The algorithm then post-processes the data returned by the <em>rawa</em> model. It first assumes that the matn begins at the last occurance of a narrator's name. The terms joining narrators are then standardized. There are two possible relationships recognized by the algorithm: A <strong>from</strong> B, and, A <strong>from</strong> B <strong>and</strong> C. Thus, where a term joins two or more narrators to a single narratee, that narratee will have multiple 'parent' narrators.</p>\n<p>Finally, to deal with misassignments by the <em>rawa</em> model, a set of common joining terms is used to ensure that a narrator's name is not, or does not contain, a joining term.</p>\n<h2>2. Installation</h2>\n<p>pyHadith is available on pip. You can install pyHadith using the following command:</p>\n<pre><code>pip install pyHadith\n</code></pre>\n<p>The following python packages will also be automatically installed as dependencies of pyHadith:</p>\n<table>\n<thead>\n<tr>\n<th>Package</th>\n<th>Version</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/explosion/spaCy\" rel=\"nofollow\">spaCy</a></td>\n<td>2.2.4</td>\n<td>Used to interact with the <em>rawa</em> and <em>asl</em> models.</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/linuxscout/pyarabic\" rel=\"nofollow\">pyArabic</a></td>\n<td>&gt;= 0.6.7</td>\n<td>Used to remove diacritics from arabic strings.</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/nltk/nltk\" rel=\"nofollow\">nltk</a></td>\n<td>&gt;= 3.4.5</td>\n<td>Used to tokenize arabic strings.</td>\n</tr></tbody></table>\n<h2>3. Usage</h2>\n<h3>3.1. Import pyHadith</h3>\n<p>The first step in using pyHadith is to import the package to your code. You can do so with the following line:</p>\n<pre><code># Import the pyHadith package.\nimport pyHadith\n</code></pre>\n<h3>3.2. Deconstruct a Hadith</h3>\n<p>To deconstruct a hadith, you must first create a 'hadith' object with the hadith module. This requires the passing of a single argument, a UTF-8 encoded Arabic text with diacritics.</p>\n<p>The code below demonstrates how a 'hadith' object can be created:</p>\n<pre><code># -*- coding: utf-8 -*-\n# Import the 'hadith' module of pyHadith.\nimport pyhadith.hadith as hadith\n# Set the hadith to be processed.\ntext = u'\u062d\u064e\u062f\u0651\u064e\u062b\u064e\u0646\u0650\u064a \u064a\u064e\u062d\u0652\u064a\u064e\u0649\u060c \u0639\u064e\u0646\u0652 \u0645\u064e\u0627\u0644\u0650\u0643\u064d\u060c \u0623\u064e\u0646\u0651\u064e\u0647\u064f \u0628\u064e\u0644\u064e\u063a\u064e\u0647\u064f \u0623\u064e\u0646\u0651\u064e \u0633\u064e\u0639\u0650\u064a\u062f\u064e \u0628\u0652\u0646\u064e \u0627\u0644\u0652\u0645\u064f\u0633\u064e\u064a\u0651\u064e\u0628\u0650\u060c \u0648\u064e\u0633\u064f\u0644\u064e\u064a\u0652\u0645\u064e\u0627\u0646\u064e \u0628\u0652\u0646\u064e \u064a\u064e\u0633\u064e\u0627\u0631\u064d\u060c \u0643\u064e\u0627\u0646\u064e\u0627 \u064a\u064e\u0642\u064f\u0648\u0644\u0627\u064e\u0646\u0650 \u0639\u0650\u062f\u0651\u064e\u0629\u064f \u0627\u0644\u0623\u064e\u0645\u064e\u0629\u0650 \u0625\u0650\u0630\u064e\u0627 \u0647\u064e\u0644\u064e\u0643\u064e \u0639\u064e\u0646\u0652\u0647\u064e\u0627 \u0632\u064e\u0648\u0652\u062c\u064f\u0647\u064e\u0627 \u0634\u064e\u0647\u0652\u0631\u064e\u0627\u0646\u0650 \u0648\u064e\u062e\u064e\u0645\u0652\u0633\u064f \u0644\u064e\u064a\u064e\u0627\u0644\u064d \u200f.\u200f'\n# Create a hadith object using the text of the hadith.\nx = hadith.Hadith(text)\n# Print the resulting attributes.\nprint({\n\"raw\" : x.raw,\n\"clean\" : x.clean,\n\"matn\" : x.matn,\n\"isnad\" : x.isnad,\n\"category\" : x.category\n})\n</code></pre>\n<p>Once a hadith object is created, the following attributes will become available:</p>\n<table>\n<thead>\n<tr>\n<th>Attribute</th>\n<th>Data Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>raw</td>\n<td>String</td>\n<td>The original raw text.</td>\n</tr>\n<tr>\n<td>clean</td>\n<td>String</td>\n<td>The cleaned raw text.</td>\n</tr>\n<tr>\n<td>matn</td>\n<td>Object</td>\n<td>An object containing the 'raw' text, 'start_char' index (in the cleaned text), and 'end_char' index (in the cleaned text), of the matn.</td>\n</tr>\n<tr>\n<td>isnad</td>\n<td>Object</td>\n<td>An object containing the 'raw' text, 'start_char' index (in the cleaned text), and 'end_char' index (in the cleaned text), of the isnad, along with a 'narrators' list which contains narrator objects (discussed later).</td>\n</tr>\n<tr>\n<td>category</td>\n<td>Object</td>\n<td>An object containing the 'label' (either 'athar' or 'khabar') and 'score' (from .5 to 1) of the assigned category.</td>\n</tr></tbody></table>\n<p>A 'narrator' object in the 'narrators' list will contain the following attributes:</p>\n<table>\n<thead>\n<tr>\n<th>Attribute</th>\n<th>Data Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>id</td>\n<td>Integer</td>\n<td>A unique identifier number.</td>\n</tr>\n<tr>\n<td>name</td>\n<td>String</td>\n<td>The raw text of the narrator's name.</td>\n</tr>\n<tr>\n<td>start_char</td>\n<td>Integer</td>\n<td>The character index in the cleaned text where the name begins.</td>\n</tr>\n<tr>\n<td>end_char</td>\n<td>Integer</td>\n<td>The character index in the cleaned text where the name ends.</td>\n</tr>\n<tr>\n<td>parents</td>\n<td>List</td>\n<td>A list of the ids of the narrator's parents within the isnad.</td>\n</tr></tbody></table>\n<h2>4. License</h2>\n<p>pyHadith is licensed under <a href=\"https://github.com/umarbutler/pyhadith/blob/master/LICENSE\" rel=\"nofollow\">GPLv3</a>. pyArabic, spaCy and NLTK are licensed under <a href=\"https://github.com/linuxscout/pyarabic/blob/master/LICENSE\" rel=\"nofollow\">GPLv3</a>, <a href=\"https://github.com/explosion/spaCy/blob/master/LICENSE\" rel=\"nofollow\">MIT</a>, and <a href=\"https://github.com/nltk/nltk/blob/develop/LICENSE.txt\" rel=\"nofollow\">Apache 2.0</a>, respectively. These licenses are all GPL compatible.</p>\n\n          </div>"}, "last_serial": 7010762, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "4a3a9c7094b5948381b0d98d91504880", "sha256": "ca6b26c2195f21829b7b8395322e11a04cb89d99e6cb3e39a2949741900f7e6c"}, "downloads": -1, "filename": "pyHadith-0.0.1.tar.gz", "has_sig": false, "md5_digest": "4a3a9c7094b5948381b0d98d91504880", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4699, "upload_time": "2020-04-13T07:48:18", "upload_time_iso_8601": "2020-04-13T07:48:18.631550Z", "url": "https://files.pythonhosted.org/packages/03/3e/06833a7c3b824ef8264dd066817c48deace99d66acc5494f88ed3c3aeeff/pyHadith-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "3bc26678c3865a08430b25a9a115f834", "sha256": "2d505012c5b6ba210d7d0b9601a0e381ed069d8bf3387ccddc64f2372ce9b983"}, "downloads": -1, "filename": "pyHadith-0.0.2.tar.gz", "has_sig": false, "md5_digest": "3bc26678c3865a08430b25a9a115f834", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4396, "upload_time": "2020-04-13T07:57:02", "upload_time_iso_8601": "2020-04-13T07:57:02.147721Z", "url": "https://files.pythonhosted.org/packages/7a/44/831190ae4c5fe8282d160c09060607cc224364592d6a8d4c34e5a44ad236/pyHadith-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "dc112bb94aacb2099a0046ad7a68961f", "sha256": "ad554314da3d2ad767a88cc4d53ab8f26faeba5f8636a00ef71bea77f8cad574"}, "downloads": -1, "filename": "pyHadith-0.0.3.tar.gz", "has_sig": false, "md5_digest": "dc112bb94aacb2099a0046ad7a68961f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4543, "upload_time": "2020-04-13T15:51:04", "upload_time_iso_8601": "2020-04-13T15:51:04.190153Z", "url": "https://files.pythonhosted.org/packages/c2/17/5b8417d6f1c6011e472a44c8cbe46af64b47ec664cadd48b60d409a98d71/pyHadith-0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "dc112bb94aacb2099a0046ad7a68961f", "sha256": "ad554314da3d2ad767a88cc4d53ab8f26faeba5f8636a00ef71bea77f8cad574"}, "downloads": -1, "filename": "pyHadith-0.0.3.tar.gz", "has_sig": false, "md5_digest": "dc112bb94aacb2099a0046ad7a68961f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4543, "upload_time": "2020-04-13T15:51:04", "upload_time_iso_8601": "2020-04-13T15:51:04.190153Z", "url": "https://files.pythonhosted.org/packages/c2/17/5b8417d6f1c6011e472a44c8cbe46af64b47ec664cadd48b60d409a98d71/pyHadith-0.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:04:33 2020"}