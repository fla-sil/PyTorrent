{"info": {"author": "Ryan Hilfers, Haystack", "author_email": "haystack@expediagroup.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "[![Build Status](https://travis-ci.org/ExpediaDotCom/haystack-client-python.svg?branch=master)](https://travis-ci.org/ExpediaDotCom/haystack-client-python)\n[![License](https://img.shields.io/badge/license-Apache%20License%202.0-blue.svg)](https://github.com/ExpediaDotCom/haystack/blob/master/LICENSE)\n\n# Haystack bindings for Python OpenTracing API\nThis is Haystack's client library for Python that implements [OpenTracing](https://github.com/opentracing/opentracing-python/)\n\nFurther information can be found on [opentracing.io](https://opentracing.io/) \n\n## Using this library\nSee examples in /examples directory. See opentracing [usage](https://github.com/opentracing/opentracing-python/#usage) for additional information.\n\nIt is important to consider the architecture of the application. In order for the tracer to manage spans properly, an appropriate `ScopeManager` implementation must be chosen.  In most environments, the default `ThreadLocalScopeManager` will work just fine. In asynchronous frameworks, the `ContextVarsScopeManager` is a better choice.  \n\nFirst initialize the tracer at the application level by supplying a service name and span recorder\n```python\nimport opentracing\nfrom haystack import HaystackAgentRecorder\nfrom haystack import HaystackTracer\n\ntracer = HaystackTracer(\"a_service\", HaystackAgentRecorder())\nopentracing.set_global_tracer(tracer)\n```\n\nStarting a span can be done as a managed resource using `start_active_span()`\n```python\nwith opentracing.tracer.start_active_span(\"span-name\") as scope:\n    do_stuff()\n```\n\nor finish the span on your own terms with\n```python\nspan = opentracing.tracer.start_span(\"span-name\")\ndo_stuff()\nspan.finish()\n```\n\nNote: **If there is a Scope, it will act as the parent to any newly started Span** unless the programmer passes \n`ignore_active_span=True` at `start_span()/start_active_span()` time or specified parent context explicitly using \n`childOf=parent_context`\n\n#### Custom propagation headers\nIf necessary, default propagation headers can be replaced with custom ones by specifying custom propagator options. Register the new propagator with the tracer once configured. \n```python\nprop_opts = PropagatorOpts(\"X-Trace-ID\", \"X-Span-ID\", \"X-Parent-Span\", \"X-baggage-\")\nopentracing.tracer.register_propagator(opentracing.Format.HTTP_HEADERS, TextPropagator(prop_opts))\n```\n\n#### Logging\nAll modules define their logger via `logging.getLogger(__name__)`\n\nSo in order to define specific logging format or level for this library use `getLogger('haystack')` or configure the\nroot logger.\n\n## How to configure build environment\nCreate a python3 virtual environment, activate it and then `make bootstrap`\n\n## Running the example code\n`make example`\n\n## How to Release this library\nCreate a new release in github specifying a semver compliant tag greater than the current release version.\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ExpediaDotCom/haystack-client-python", "keywords": "opentracing,haystack,tracing,microservices,distributed", "license": "", "maintainer": "", "maintainer_email": "", "name": "haystack-client", "package_url": "https://pypi.org/project/haystack-client/", "platform": "", "project_url": "https://pypi.org/project/haystack-client/", "project_urls": {"Homepage": "https://github.com/ExpediaDotCom/haystack-client-python"}, "release_url": "https://pypi.org/project/haystack-client/0.2.1/", "requires_dist": ["opentracing (<3.0,>=2.3.0)", "requests (<3.0,>=2.19)", "requests-futures (<1.0,>=0.9.9)", "protobuf (<4.0,>=3.11.2)", "grpcio (<2.0],>=1.26.0)"], "requires_python": ">=3.5", "summary": "Haystack Python OpenTracing Implementation", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/ExpediaDotCom/haystack-client-python\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/43f68de6e3a36e02031a2230dc29b718aed56831/68747470733a2f2f7472617669732d63692e6f72672f45787065646961446f74436f6d2f686179737461636b2d636c69656e742d707974686f6e2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://github.com/ExpediaDotCom/haystack/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/00de7c4bd5297bea979a7f3426baecd2f0fcea8b/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4170616368652532304c6963656e7365253230322e302d626c75652e737667\"></a></p>\n<h1>Haystack bindings for Python OpenTracing API</h1>\n<p>This is Haystack's client library for Python that implements <a href=\"https://github.com/opentracing/opentracing-python/\" rel=\"nofollow\">OpenTracing</a></p>\n<p>Further information can be found on <a href=\"https://opentracing.io/\" rel=\"nofollow\">opentracing.io</a></p>\n<h2>Using this library</h2>\n<p>See examples in /examples directory. See opentracing <a href=\"https://github.com/opentracing/opentracing-python/#usage\" rel=\"nofollow\">usage</a> for additional information.</p>\n<p>It is important to consider the architecture of the application. In order for the tracer to manage spans properly, an appropriate <code>ScopeManager</code> implementation must be chosen.  In most environments, the default <code>ThreadLocalScopeManager</code> will work just fine. In asynchronous frameworks, the <code>ContextVarsScopeManager</code> is a better choice.</p>\n<p>First initialize the tracer at the application level by supplying a service name and span recorder</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">opentracing</span>\n<span class=\"kn\">from</span> <span class=\"nn\">haystack</span> <span class=\"kn\">import</span> <span class=\"n\">HaystackAgentRecorder</span>\n<span class=\"kn\">from</span> <span class=\"nn\">haystack</span> <span class=\"kn\">import</span> <span class=\"n\">HaystackTracer</span>\n\n<span class=\"n\">tracer</span> <span class=\"o\">=</span> <span class=\"n\">HaystackTracer</span><span class=\"p\">(</span><span class=\"s2\">\"a_service\"</span><span class=\"p\">,</span> <span class=\"n\">HaystackAgentRecorder</span><span class=\"p\">())</span>\n<span class=\"n\">opentracing</span><span class=\"o\">.</span><span class=\"n\">set_global_tracer</span><span class=\"p\">(</span><span class=\"n\">tracer</span><span class=\"p\">)</span>\n</pre>\n<p>Starting a span can be done as a managed resource using <code>start_active_span()</code></p>\n<pre><span class=\"k\">with</span> <span class=\"n\">opentracing</span><span class=\"o\">.</span><span class=\"n\">tracer</span><span class=\"o\">.</span><span class=\"n\">start_active_span</span><span class=\"p\">(</span><span class=\"s2\">\"span-name\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">scope</span><span class=\"p\">:</span>\n    <span class=\"n\">do_stuff</span><span class=\"p\">()</span>\n</pre>\n<p>or finish the span on your own terms with</p>\n<pre><span class=\"n\">span</span> <span class=\"o\">=</span> <span class=\"n\">opentracing</span><span class=\"o\">.</span><span class=\"n\">tracer</span><span class=\"o\">.</span><span class=\"n\">start_span</span><span class=\"p\">(</span><span class=\"s2\">\"span-name\"</span><span class=\"p\">)</span>\n<span class=\"n\">do_stuff</span><span class=\"p\">()</span>\n<span class=\"n\">span</span><span class=\"o\">.</span><span class=\"n\">finish</span><span class=\"p\">()</span>\n</pre>\n<p>Note: <strong>If there is a Scope, it will act as the parent to any newly started Span</strong> unless the programmer passes\n<code>ignore_active_span=True</code> at <code>start_span()/start_active_span()</code> time or specified parent context explicitly using\n<code>childOf=parent_context</code></p>\n<h4>Custom propagation headers</h4>\n<p>If necessary, default propagation headers can be replaced with custom ones by specifying custom propagator options. Register the new propagator with the tracer once configured.</p>\n<pre><span class=\"n\">prop_opts</span> <span class=\"o\">=</span> <span class=\"n\">PropagatorOpts</span><span class=\"p\">(</span><span class=\"s2\">\"X-Trace-ID\"</span><span class=\"p\">,</span> <span class=\"s2\">\"X-Span-ID\"</span><span class=\"p\">,</span> <span class=\"s2\">\"X-Parent-Span\"</span><span class=\"p\">,</span> <span class=\"s2\">\"X-baggage-\"</span><span class=\"p\">)</span>\n<span class=\"n\">opentracing</span><span class=\"o\">.</span><span class=\"n\">tracer</span><span class=\"o\">.</span><span class=\"n\">register_propagator</span><span class=\"p\">(</span><span class=\"n\">opentracing</span><span class=\"o\">.</span><span class=\"n\">Format</span><span class=\"o\">.</span><span class=\"n\">HTTP_HEADERS</span><span class=\"p\">,</span> <span class=\"n\">TextPropagator</span><span class=\"p\">(</span><span class=\"n\">prop_opts</span><span class=\"p\">))</span>\n</pre>\n<h4>Logging</h4>\n<p>All modules define their logger via <code>logging.getLogger(__name__)</code></p>\n<p>So in order to define specific logging format or level for this library use <code>getLogger('haystack')</code> or configure the\nroot logger.</p>\n<h2>How to configure build environment</h2>\n<p>Create a python3 virtual environment, activate it and then <code>make bootstrap</code></p>\n<h2>Running the example code</h2>\n<p><code>make example</code></p>\n<h2>How to Release this library</h2>\n<p>Create a new release in github specifying a semver compliant tag greater than the current release version.</p>\n\n          </div>"}, "last_serial": 6625065, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "4a56c5db08a14ecccfe77afc88bc69dd", "sha256": "4f616e53a0eb4635002f49ceefd27eec58bf93529f989ba645ef00282bae3529"}, "downloads": -1, "filename": "haystack_client-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "4a56c5db08a14ecccfe77afc88bc69dd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 20288, "upload_time": "2019-03-13T13:29:50", "upload_time_iso_8601": "2019-03-13T13:29:50.388301Z", "url": "https://files.pythonhosted.org/packages/f1/ad/88d03db55b328adcd773ecb31fd304f3484f3315fa96a8e322dc54866200/haystack_client-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "566930c887b94f110d1d79bb76791063", "sha256": "27157980b9fac7c8c062bbfe1b6e637a05e1c8bf9be96a503b8822bbee5a286c"}, "downloads": -1, "filename": "haystack-client-0.1.0.tar.gz", "has_sig": false, "md5_digest": "566930c887b94f110d1d79bb76791063", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 13376, "upload_time": "2019-03-13T13:29:52", "upload_time_iso_8601": "2019-03-13T13:29:52.759349Z", "url": "https://files.pythonhosted.org/packages/22/3d/7f76034fdb8d1d2125511e660658f4664cce0c928a0a8307169a22699c8f/haystack-client-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "2bec89e8417bc4543d1a48ee439c4c5a", "sha256": "b783164c87f417989c1958aee0c974dbd57e817b361137390f1000af89b958b2"}, "downloads": -1, "filename": "haystack_client-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "2bec89e8417bc4543d1a48ee439c4c5a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 20771, "upload_time": "2020-01-06T13:32:00", "upload_time_iso_8601": "2020-01-06T13:32:00.724535Z", "url": "https://files.pythonhosted.org/packages/df/6d/2ad897fb23bd6d348f98f715ad933eda74029c24d09fc4eda99d4efebe2a/haystack_client-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5403d700487cfea1251444f5dc8830a8", "sha256": "5d90262d2638c3568ea0e441cf79280ee5b903ca96dca909e46a068559ac3cda"}, "downloads": -1, "filename": "haystack-client-0.2.0.tar.gz", "has_sig": false, "md5_digest": "5403d700487cfea1251444f5dc8830a8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 13978, "upload_time": "2020-01-06T13:32:02", "upload_time_iso_8601": "2020-01-06T13:32:02.308951Z", "url": "https://files.pythonhosted.org/packages/2f/f5/e1ed1502e8eb37f88e6901a1528edf3554e04762227e4d9ac80ba70cfc78/haystack-client-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "f9cd85dd22bca8fc8ddbb6adbdbda4d5", "sha256": "cb07db03dfce8468b98b579668be6e1167efac38b676a85976d7fb7a1ebc5873"}, "downloads": -1, "filename": "haystack_client-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "f9cd85dd22bca8fc8ddbb6adbdbda4d5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 20774, "upload_time": "2020-02-13T17:47:08", "upload_time_iso_8601": "2020-02-13T17:47:08.367250Z", "url": "https://files.pythonhosted.org/packages/de/ca/bf2daa3e6c48a665b2c3af315acab80b56b0b735feea2a121530a268d909/haystack_client-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3b51cc8afa76c8395f50fd0242361d2a", "sha256": "d8c4207f581fcf14f53c3e257aacf0590cdc659223f3ee106159ec2435ae2a13"}, "downloads": -1, "filename": "haystack-client-0.2.1.tar.gz", "has_sig": false, "md5_digest": "3b51cc8afa76c8395f50fd0242361d2a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 13978, "upload_time": "2020-02-13T17:47:09", "upload_time_iso_8601": "2020-02-13T17:47:09.739767Z", "url": "https://files.pythonhosted.org/packages/6a/db/08d5c0aa38974c2e59f4369c23e0f3e49f63a386a9add04b24d98499a1bb/haystack-client-0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f9cd85dd22bca8fc8ddbb6adbdbda4d5", "sha256": "cb07db03dfce8468b98b579668be6e1167efac38b676a85976d7fb7a1ebc5873"}, "downloads": -1, "filename": "haystack_client-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "f9cd85dd22bca8fc8ddbb6adbdbda4d5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 20774, "upload_time": "2020-02-13T17:47:08", "upload_time_iso_8601": "2020-02-13T17:47:08.367250Z", "url": "https://files.pythonhosted.org/packages/de/ca/bf2daa3e6c48a665b2c3af315acab80b56b0b735feea2a121530a268d909/haystack_client-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3b51cc8afa76c8395f50fd0242361d2a", "sha256": "d8c4207f581fcf14f53c3e257aacf0590cdc659223f3ee106159ec2435ae2a13"}, "downloads": -1, "filename": "haystack-client-0.2.1.tar.gz", "has_sig": false, "md5_digest": "3b51cc8afa76c8395f50fd0242361d2a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 13978, "upload_time": "2020-02-13T17:47:09", "upload_time_iso_8601": "2020-02-13T17:47:09.739767Z", "url": "https://files.pythonhosted.org/packages/6a/db/08d5c0aa38974c2e59f4369c23e0f3e49f63a386a9add04b24d98499a1bb/haystack-client-0.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:12 2020"}