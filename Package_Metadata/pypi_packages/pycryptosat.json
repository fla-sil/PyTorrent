{"info": {"author": "Mate Soos", "author_email": "soos.mate@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: C++", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering", "Topic :: Utilities"], "description": "=====================================================\npycryptosat: bindings to the CryptoMiniSat SAT solver\n=====================================================\n\nThis directory provides Python bindings to CryptoMiniSat on the C++ level,\ni.e. when importing pycryptosat, the CryptoMiniSat solver becomes part of the\nPython process itself.\n\nCompiling\n---------\nThe pycryptosat python package compiles while compiling CryptoMiniSat. It\ncannotbe compiled on its own, it must be compiled at the same time as\nCryptoMiniSat. You will need the python development libraries in order to\ncompile::\n\n   apt-get install python-dev\n\n\nAfter this, cmake then indicate that pycryptosat will be compiled::\n\n   cd cryptominisat\n   mkdir build\n   cd build\n   cmake ..\n   [...]\n   -- Found PythonInterp: /usr/bin/python2.7 (found suitable version \"2.7.9\", minimum required is \"2.7\")\n   -- Found PythonLibs: /usr/lib/x86_64-linux-gnu/libpython2.7.so (found suitable version \"2.7.9\", minimum required is \"2.7\")\n   -- PYTHON_EXECUTABLE:FILEPATH=/usr/bin/python2.7\n   -- PYTHON_LIBRARY:FILEPATH=/usr/lib/x86_64-linux-gnu/libpython2.7.so\n   -- PYTHON_INCLUDE_DIR:FILEPATH=/usr/include/python2.7\n   -- PYTHONLIBS_VERSION_STRING=2.7.9\n   -- OK, found python interpreter, libs and header files\n   -- Building python interface\n   [...]\n\n\nIt will then generate the pycryptosat library and install it when calling\n`make install`.\n\nUsage\n-----\n\nThe ``pycryptosat`` module has one object, ``Solver`` that has two functions\n``solve`` and ``add_clause``.\n\nThe funcion ``add_clause()`` takes an iterable list of literals such as\n``[1, 2]`` which represents the truth ``1 or 2 = True``. For example,\n``add_clause([1])`` sets variable ``1`` to ``True``.\n\nThe function ``solve()`` solves the system of equations that have been added\nwith ``add_clause()``:\n\n   >>> from pycryptosat import Solver\n   >>> s = Solver()\n   >>> s.add_clause([1, 2])\n   >>> sat, solution = s.solve()\n   >>> print(sat)\n   True\n   >>> print(solution)\n   (None, True, True)\n\nThe return value is a tuple. First part of the tuple indicates whether the\nproblem is satisfiable. In this case, it's ``True``, i.e. satisfiable. The second\npart is a tuple contains the solution, preceded by None, so you can index into\nit with the variable number. E.g. ``solution[1]`` returns the value for\nvariable ``1``.\n\nThe ``solve()`` method optionally takes an argument ``assumptions`` that\nallows the user to set values to specific variables in the solver in a temporary\nfashion. This means that in case the problem is satisfiable but e.g it's\nunsatisfiable if variable 2 is FALSE, then ``solve([-2])`` will return\nUNSAT. However, a subsequent call to ``solve()`` will still return a solution.\nIf instead of an assumption ``add_clause()`` would have been used, subsequent\n``solve()`` calls would have returned unsatisfiable.\n\n``Solver`` takes the following keyword arguments:\n  * ``time_limit``: the time limit (integer)\n  * ``confl_limit``: the propagation limit (integer)\n  * ``verbose``: the verbosity level (integer)\n\nBoth ``time_limit`` and ``confl_limit`` set a budget to the solver. The former is based on time elapsed while the latter is based on the number of conflicts met during search. If the solver runs out of budget, it returns with ``(None, None)``. If both limits are used, the solver will terminate whenever one of the limits is reached (whichever comes first). Warning: Results from ``time_limit`` may differ from run to run, depending on compute load, etc. Use ``confl_limit`` for more reproducible runs.\n\nExample\n-------\n\nLet us consider the following clauses, represented using\nthe DIMACS `cnf <http://en.wikipedia.org/wiki/Conjunctive_normal_form>`_\nformat::\n\n   p cnf 5 3\n   1 -5 4 0\n   -1 5 3 4 0\n   -3 -4 0\n\nHere, we have 5 variables and 3 clauses, the first clause being\n(x\\ :sub:`1`  or not x\\ :sub:`5` or x\\ :sub:`4`).\nNote that the variable x\\ :sub:`2` is not used in any of the clauses,\nwhich means that for each solution with x\\ :sub:`2` = True, we must\nalso have a solution with x\\ :sub:`2` = False.  In Python, each clause is\nmost conveniently represented as a list of integers.  Naturally, it makes\nsense to represent each solution also as a list of integers, where the sign\ncorresponds to the Boolean value (+ for True and - for False) and the\nabsolute value corresponds to i\\ :sup:`th` variable:\n\n   >>> import pycryptosat\n   >>> solver = pycryptosat.Solver()\n   >>> solver.add_clause([1, -5, 4])\n   >>> solver.add_clause([-1, 5, 3, 4])\n   >>> solver.add_clause([-3, -4])\n   >>> solver.solve()\n   (True, (None, True, False, False, True, True))\n\nThis solution translates to: x\\ :sub:`1` = x\\ :sub:`4` = x\\ :sub:`5` = True,\nx\\ :sub:`2` = x\\ :sub:`3` = False\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/msoos/cryptominisat", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pycryptosat", "package_url": "https://pypi.org/project/pycryptosat/", "platform": "", "project_url": "https://pypi.org/project/pycryptosat/", "project_urls": {"Homepage": "https://github.com/msoos/cryptominisat"}, "release_url": "https://pypi.org/project/pycryptosat/0.6.1/", "requires_dist": null, "requires_python": "", "summary": "Bindings to CryptoMiniSat 5.6.8 (a SAT solver)", "version": "0.6.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This directory provides Python bindings to CryptoMiniSat on the C++ level,\ni.e. when importing pycryptosat, the CryptoMiniSat solver becomes part of the\nPython process itself.</p>\n<div id=\"compiling\">\n<h2>Compiling</h2>\n<p>The pycryptosat python package compiles while compiling CryptoMiniSat. It\ncannotbe compiled on its own, it must be compiled at the same time as\nCryptoMiniSat. You will need the python development libraries in order to\ncompile:</p>\n<pre>apt-get install python-dev\n</pre>\n<p>After this, cmake then indicate that pycryptosat will be compiled:</p>\n<pre>cd cryptominisat\nmkdir build\ncd build\ncmake ..\n[...]\n-- Found PythonInterp: /usr/bin/python2.7 (found suitable version \"2.7.9\", minimum required is \"2.7\")\n-- Found PythonLibs: /usr/lib/x86_64-linux-gnu/libpython2.7.so (found suitable version \"2.7.9\", minimum required is \"2.7\")\n-- PYTHON_EXECUTABLE:FILEPATH=/usr/bin/python2.7\n-- PYTHON_LIBRARY:FILEPATH=/usr/lib/x86_64-linux-gnu/libpython2.7.so\n-- PYTHON_INCLUDE_DIR:FILEPATH=/usr/include/python2.7\n-- PYTHONLIBS_VERSION_STRING=2.7.9\n-- OK, found python interpreter, libs and header files\n-- Building python interface\n[...]\n</pre>\n<p>It will then generate the pycryptosat library and install it when calling\n<cite>make install</cite>.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>The <tt>pycryptosat</tt> module has one object, <tt>Solver</tt> that has two functions\n<tt>solve</tt> and <tt>add_clause</tt>.</p>\n<p>The funcion <tt>add_clause()</tt> takes an iterable list of literals such as\n<tt>[1, 2]</tt> which represents the truth <tt>1 or 2 = True</tt>. For example,\n<tt><span class=\"pre\">add_clause([1])</span></tt> sets variable <tt>1</tt> to <tt>True</tt>.</p>\n<p>The function <tt>solve()</tt> solves the system of equations that have been added\nwith <tt>add_clause()</tt>:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from pycryptosat import Solver\n&gt;&gt;&gt; s = Solver()\n&gt;&gt;&gt; s.add_clause([1, 2])\n&gt;&gt;&gt; sat, solution = s.solve()\n&gt;&gt;&gt; print(sat)\nTrue\n&gt;&gt;&gt; print(solution)\n(None, True, True)\n</pre>\n</blockquote>\n<p>The return value is a tuple. First part of the tuple indicates whether the\nproblem is satisfiable. In this case, it\u2019s <tt>True</tt>, i.e. satisfiable. The second\npart is a tuple contains the solution, preceded by None, so you can index into\nit with the variable number. E.g. <tt>solution[1]</tt> returns the value for\nvariable <tt>1</tt>.</p>\n<p>The <tt>solve()</tt> method optionally takes an argument <tt>assumptions</tt> that\nallows the user to set values to specific variables in the solver in a temporary\nfashion. This means that in case the problem is satisfiable but e.g it\u2019s\nunsatisfiable if variable 2 is FALSE, then <tt><span class=\"pre\">solve([-2])</span></tt> will return\nUNSAT. However, a subsequent call to <tt>solve()</tt> will still return a solution.\nIf instead of an assumption <tt>add_clause()</tt> would have been used, subsequent\n<tt>solve()</tt> calls would have returned unsatisfiable.</p>\n<dl>\n<dt><tt>Solver</tt> takes the following keyword arguments:</dt>\n<dd><ul>\n<li><tt>time_limit</tt>: the time limit (integer)</li>\n<li><tt>confl_limit</tt>: the propagation limit (integer)</li>\n<li><tt>verbose</tt>: the verbosity level (integer)</li>\n</ul>\n</dd>\n</dl>\n<p>Both <tt>time_limit</tt> and <tt>confl_limit</tt> set a budget to the solver. The former is based on time elapsed while the latter is based on the number of conflicts met during search. If the solver runs out of budget, it returns with <tt>(None, None)</tt>. If both limits are used, the solver will terminate whenever one of the limits is reached (whichever comes first). Warning: Results from <tt>time_limit</tt> may differ from run to run, depending on compute load, etc. Use <tt>confl_limit</tt> for more reproducible runs.</p>\n</div>\n<div id=\"example\">\n<h2>Example</h2>\n<p>Let us consider the following clauses, represented using\nthe DIMACS <a href=\"http://en.wikipedia.org/wiki/Conjunctive_normal_form\" rel=\"nofollow\">cnf</a>\nformat:</p>\n<pre>p cnf 5 3\n1 -5 4 0\n-1 5 3 4 0\n-3 -4 0\n</pre>\n<p>Here, we have 5 variables and 3 clauses, the first clause being\n(x<sub>1</sub>  or not x<sub>5</sub> or x<sub>4</sub>).\nNote that the variable x<sub>2</sub> is not used in any of the clauses,\nwhich means that for each solution with x<sub>2</sub> = True, we must\nalso have a solution with x<sub>2</sub> = False.  In Python, each clause is\nmost conveniently represented as a list of integers.  Naturally, it makes\nsense to represent each solution also as a list of integers, where the sign\ncorresponds to the Boolean value (+ for True and - for False) and the\nabsolute value corresponds to i<sup>th</sup> variable:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; import pycryptosat\n&gt;&gt;&gt; solver = pycryptosat.Solver()\n&gt;&gt;&gt; solver.add_clause([1, -5, 4])\n&gt;&gt;&gt; solver.add_clause([-1, 5, 3, 4])\n&gt;&gt;&gt; solver.add_clause([-3, -4])\n&gt;&gt;&gt; solver.solve()\n(True, (None, True, False, False, True, True))\n</pre>\n</blockquote>\n<p>This solution translates to: x<sub>1</sub> = x<sub>4</sub> = x<sub>5</sub> = True,\nx<sub>2</sub> = x<sub>3</sub> = False</p>\n</div>\n\n          </div>"}, "last_serial": 6353474, "releases": {"0.1.2": [{"comment_text": "", "digests": {"md5": "1c0a6c9c71ab96abecab8f3f0ff77c5e", "sha256": "7ede0badf25f1e52eb6db8dcde360b138395ad26497d44a62ce02cb19ca7574f"}, "downloads": -1, "filename": "pycryptosat-0.1.2.tar.gz", "has_sig": false, "md5_digest": "1c0a6c9c71ab96abecab8f3f0ff77c5e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 296451, "upload_time": "2017-08-30T20:45:50", "upload_time_iso_8601": "2017-08-30T20:45:50.233494Z", "url": "https://files.pythonhosted.org/packages/7a/b1/b9acf78cb43777e5492f7ee3c98da1169160be9ea719c5ab9f2668d3ff03/pycryptosat-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "8b2616561e7825405d51ed6a7030c62b", "sha256": "1a832b41f068407faa1b46fb4ca0c74065765abdb4b976f531870e58e51dbe00"}, "downloads": -1, "filename": "pycryptosat-0.1.3.tar.gz", "has_sig": false, "md5_digest": "8b2616561e7825405d51ed6a7030c62b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 297705, "upload_time": "2017-09-21T15:04:55", "upload_time_iso_8601": "2017-09-21T15:04:55.991775Z", "url": "https://files.pythonhosted.org/packages/41/d8/12296be268fbe7896f5c207af622b53545c36f854ccfe91d5fe7a6d9e105/pycryptosat-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "4536cfe0d94bf698f2afd8b786d5375b", "sha256": "8d66005f7ca5021e78cbf2c23d406e6c913719d52da8308d3f8ed863ea7267e4"}, "downloads": -1, "filename": "pycryptosat-0.1.4.tar.gz", "has_sig": false, "md5_digest": "4536cfe0d94bf698f2afd8b786d5375b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 297684, "upload_time": "2017-10-13T09:20:32", "upload_time_iso_8601": "2017-10-13T09:20:32.125068Z", "url": "https://files.pythonhosted.org/packages/28/1a/4012efa6207d1fca05e0b462b583920ce9a16088dcced52c22bfb98bb530/pycryptosat-0.1.4.tar.gz", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "4079729280fae20c5f95eee55fe8ae9b", "sha256": "5ab1ff5f8ce92c8de0b3762a1854e9aa24c616000c9c22158403760c51bd3cd8"}, "downloads": -1, "filename": "pycryptosat-0.6.1-cp27-cp27mu-manylinux2010_x86_64.whl", "has_sig": false, "md5_digest": "4079729280fae20c5f95eee55fe8ae9b", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 388275, "upload_time": "2019-12-01T19:02:49", "upload_time_iso_8601": "2019-12-01T19:02:49.758618Z", "url": "https://files.pythonhosted.org/packages/83/d5/def4f157cb81e25c7ba689442522d4987118a2b392ccf36bd14fceac326e/pycryptosat-0.6.1-cp27-cp27mu-manylinux2010_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f66c8e20dfd1ab4efe8c45265af1fa96", "sha256": "02bd61b024a1b6829dd8032ebc464350153181eecbe09a3171695b52aed20af9"}, "downloads": -1, "filename": "pycryptosat-0.6.1-cp36-cp36m-manylinux2010_x86_64.whl", "has_sig": false, "md5_digest": "f66c8e20dfd1ab4efe8c45265af1fa96", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 387905, "upload_time": "2019-12-01T19:02:52", "upload_time_iso_8601": "2019-12-01T19:02:52.144552Z", "url": "https://files.pythonhosted.org/packages/56/3d/419594403efaf1ba01c188e19ba4bead13bf800b3b31883611d9b28ec636/pycryptosat-0.6.1-cp36-cp36m-manylinux2010_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "717a0b1fff966ec7f15f2469744a3a22", "sha256": "fde24d733e90b108eb751e1a94c92b18836ccc80d0c882e33cc9755888ff5705"}, "downloads": -1, "filename": "pycryptosat-0.6.1.tar.gz", "has_sig": false, "md5_digest": "717a0b1fff966ec7f15f2469744a3a22", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 285137, "upload_time": "2019-12-01T19:02:54", "upload_time_iso_8601": "2019-12-01T19:02:54.630407Z", "url": "https://files.pythonhosted.org/packages/7a/e1/b85c5f20db50f3495c778220d8587c54be11e8e52328cb5440d5e1b89b33/pycryptosat-0.6.1.tar.gz", "yanked": false}], "0.7.0.dev3": [{"comment_text": "", "digests": {"md5": "057fbe7acf0eed4d3c86c2b4d1e0631d", "sha256": "b0bead36263efbecbfe51b54523ab3f03391c66af069d4ba0cf770ceaa6ab18d"}, "downloads": -1, "filename": "pycryptosat-0.7.0.dev3-cp27-cp27mu-manylinux2010_x86_64.whl", "has_sig": false, "md5_digest": "057fbe7acf0eed4d3c86c2b4d1e0631d", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 425715, "upload_time": "2019-12-24T02:23:32", "upload_time_iso_8601": "2019-12-24T02:23:32.913161Z", "url": "https://files.pythonhosted.org/packages/1b/0f/18aca37caed4236036e7d6cad31b9021427c5f611e75fa5ce3cd40267494/pycryptosat-0.7.0.dev3-cp27-cp27mu-manylinux2010_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "aebfdb4f5acd305b85e662ad594b1c86", "sha256": "2c00a49fc12fff42e189f497343d621e898d2b96f1e65c3883b164c0ddc3a280"}, "downloads": -1, "filename": "pycryptosat-0.7.0.dev3-cp27-cp27m-win_amd64.whl", "has_sig": false, "md5_digest": "aebfdb4f5acd305b85e662ad594b1c86", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 511063, "upload_time": "2019-12-24T02:23:35", "upload_time_iso_8601": "2019-12-24T02:23:35.528231Z", "url": "https://files.pythonhosted.org/packages/9c/7e/5a971863c3f44f02bbfc7854fecaa9c98d76438807ae6058523beb902eca/pycryptosat-0.7.0.dev3-cp27-cp27m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "65ee55c82657c13e5cf72d95b2b09a22", "sha256": "1603dc550fcd3836f1f0e5e826a949d2240e2edbb1f47dcd6e4e7b0703b84bf5"}, "downloads": -1, "filename": "pycryptosat-0.7.0.dev3-cp37-cp37m-win_amd64.whl", "has_sig": false, "md5_digest": "65ee55c82657c13e5cf72d95b2b09a22", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 351638, "upload_time": "2019-12-24T02:24:06", "upload_time_iso_8601": "2019-12-24T02:24:06.080694Z", "url": "https://files.pythonhosted.org/packages/3c/bf/8826fa6b88c4a7b189c969da16df003b448fe424d1f49d9a6f806c1e43d7/pycryptosat-0.7.0.dev3-cp37-cp37m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9f74fdf9306602c29fccaf3d69714e03", "sha256": "b53bbf34216f2c7336bcb436938417f5dafd634386d08a3454baf077fe6c6e78"}, "downloads": -1, "filename": "pycryptosat-0.7.0.dev3.tar.gz", "has_sig": false, "md5_digest": "9f74fdf9306602c29fccaf3d69714e03", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 319286, "upload_time": "2019-12-24T02:24:08", "upload_time_iso_8601": "2019-12-24T02:24:08.057998Z", "url": "https://files.pythonhosted.org/packages/98/4a/e8827b6c7c0592e3b3cff7ea3a9b9dfa2be656353bae3ff0628a5f6c3dd6/pycryptosat-0.7.0.dev3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4079729280fae20c5f95eee55fe8ae9b", "sha256": "5ab1ff5f8ce92c8de0b3762a1854e9aa24c616000c9c22158403760c51bd3cd8"}, "downloads": -1, "filename": "pycryptosat-0.6.1-cp27-cp27mu-manylinux2010_x86_64.whl", "has_sig": false, "md5_digest": "4079729280fae20c5f95eee55fe8ae9b", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 388275, "upload_time": "2019-12-01T19:02:49", "upload_time_iso_8601": "2019-12-01T19:02:49.758618Z", "url": "https://files.pythonhosted.org/packages/83/d5/def4f157cb81e25c7ba689442522d4987118a2b392ccf36bd14fceac326e/pycryptosat-0.6.1-cp27-cp27mu-manylinux2010_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f66c8e20dfd1ab4efe8c45265af1fa96", "sha256": "02bd61b024a1b6829dd8032ebc464350153181eecbe09a3171695b52aed20af9"}, "downloads": -1, "filename": "pycryptosat-0.6.1-cp36-cp36m-manylinux2010_x86_64.whl", "has_sig": false, "md5_digest": "f66c8e20dfd1ab4efe8c45265af1fa96", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 387905, "upload_time": "2019-12-01T19:02:52", "upload_time_iso_8601": "2019-12-01T19:02:52.144552Z", "url": "https://files.pythonhosted.org/packages/56/3d/419594403efaf1ba01c188e19ba4bead13bf800b3b31883611d9b28ec636/pycryptosat-0.6.1-cp36-cp36m-manylinux2010_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "717a0b1fff966ec7f15f2469744a3a22", "sha256": "fde24d733e90b108eb751e1a94c92b18836ccc80d0c882e33cc9755888ff5705"}, "downloads": -1, "filename": "pycryptosat-0.6.1.tar.gz", "has_sig": false, "md5_digest": "717a0b1fff966ec7f15f2469744a3a22", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 285137, "upload_time": "2019-12-01T19:02:54", "upload_time_iso_8601": "2019-12-01T19:02:54.630407Z", "url": "https://files.pythonhosted.org/packages/7a/e1/b85c5f20db50f3495c778220d8587c54be11e8e52328cb5440d5e1b89b33/pycryptosat-0.6.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:07:39 2020"}