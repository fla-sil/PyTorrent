{"info": {"author": "Grid Smarter Cities", "author_email": "open-source@gridsmartercities.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "[<img align=\"right\" alt=\"Grid Smarter Cities\" src=\"https://s3.eu-west-2.amazonaws.com/open-source-resources/grid_smarter_cities_small.png\">](https://www.gridsmartercities.com/)\n\n![Build Status](https://codebuild.eu-west-2.amazonaws.com/badges?uuid=eyJlbmNyeXB0ZWREYXRhIjoiSitwRmNUcHk2VzN2VS8rMHdUS2hoNzZCQUdCME1VV0RkeWEwTmZyVUxOWUdXR2hMTzVUVWIvLzJ5ZFR2SWo5OHhtSm55TFc4SjZvcGhNcndNT1lDbEdRPSIsIml2UGFyYW1ldGVyU3BlYyI6Ik9SV0g1Tm1FMUVERW9RSzciLCJtYXRlcmlhbFNldFNlcmlhbCI6MX0%3D&branch=master)\n[![License: MIT](https://img.shields.io/badge/License-MIT-brightgreen.svg)](https://opensource.org/licenses/MIT)\n[![PyPI](https://img.shields.io/pypi/v/pywsitest.svg?color=brightgreen)](https://pypi.org/project/pywsitest)\n\n# pywsitest\n## PYthon WebSocket Integration TESTing framework\n\nA python API to assist with automated websocket integration testing\n\n## Installation\n```\npip install pywsitest\n```\n\n## Package contents\n### [WSTest](https://github.com/gridsmartercities/pywsitest/blob/master/pywsitest/ws_test.py)\nWSTest is the main test running class in pywsitest. It currently has the following methods:\n- **with_parameter**: add a query parameter to the connection\n- **with_response**: add an expected response to the test runner\n- **with_message**: add a message for the test runner to send on connection\n- **with_response_timeout**: set the timeout in seconds for the test runner to wait for a response from the websocket\n- **with_message_timeout**: set the timeout in seconds for the test runner to wait while trying to send a message to the websocket\n- **with_test_timeout**: set the timeout in seconds for the test runner to run for\n- **with_received_response_logging**: enable logging of received responses on response timeout error\n- **run**: asyncronously run the test runner, sending all messages and listening for responses\n- **is_complete**: check whether all expected responses have been received and messages have been sent\n\n### [WSResponse](https://github.com/gridsmartercities/pywsitest/blob/master/pywsitest/ws_response.py)\nWSResponse is a class to represent an expected response from the websocket\n- **with_attribute**: add an attribute to check an incoming response against\n- **with_trigger**: add a message to trigger when a response matching this instance has been received\n- **is_match**: check whether a received response matches the attributes of this instance\n\n### [WSMessage](https://github.com/gridsmartercities/pywsitest/blob/master/pywsitest/ws_message.py)\nWSMessage is a class to represent a message to send to the websocket\n- **with_attribute**: add an attribute to the message to be sent to the websocket host\n- **with_delay**: add a delay to the message to be sent to the websocket host\n\n## Examples\n\n### Response testing\nTesting a response with a body is received on connection to a websocket host:\n```py\nfrom pywsitest import WSTest, WSResponse\n\nws_test = (\n    WSTest(\"wss://example.com\")\n    .with_response(\n        WSResponse()\n        .with_attribute(\"body\")\n    )\n)\n\nawait ws_test.run()\n\nassert ws_test.is_complete()\n```\n\nTesting that a response with the following more complicated body is received on connection to a websocket host:\n```json\n{\n    \"body\": {\n        \"attribute\": \"value\"\n    }\n}\n```\n\n```py\nfrom pywsitest import WSTest, WSResponse\n\nws_test = (\n    WSTest(\"wss://example.com\")\n    .with_response(\n        WSResponse()\n        .with_attribute(\"body\")\n        .with_attribute(\"body/attribute\", \"value\")\n    )\n)\n\nawait ws_test.run()\n\nassert ws_test.is_complete()\n```\n\nTesting that a response with the following body with a list is received on connection to a websocket host:\n```json\n{\n    \"body\": [\n        {\"colour\": \"red\"},\n        {\"colour\": \"green\"},\n        {\"colour\": \"blue\"}\n    ]\n}\n```\n\n```py\nfrom pywsitest import WSTest, WSResponse\n\nws_test = (\n    WSTest(\"wss://example.com\")\n    .with_response(\n        WSResponse()\n        .with_attribute(\"body/0/colour\", \"red\")\n        .with_attribute(\"body/1/colour\", \"green\")\n        .with_attribute(\"body/2/colour\", \"blue\")\n    )\n)\n\nawait ws_test.run()\n\nassert ws_test.is_complete()\n```\n\nTesting that a response with the following body with a list containing the colour `green` somewhere is received on connection to a websocket host:\n```json\n{\n    \"body\": [\n        {\"colour\": \"red\"},\n        {\"colour\": \"green\"},\n        {\"colour\": \"blue\"}\n    ]\n}\n```\n\n```py\nfrom pywsitest import WSTest, WSResponse\n\nws_test = (\n    WSTest(\"wss://example.com\")\n    .with_response(\n        WSResponse()\n        .with_attribute(\"body//colour\", \"green\")\n    )\n)\n\nawait ws_test.run()\n\nassert ws_test.is_complete()\n```\n\n### Message sending\nSending a message on connection to a websocket host:\n```py\nfrom pywsitest import WSTest, WSMessage\n\nws_test = (\n    WSTest(\"wss://example.com\")\n    .with_message(\n        WSMessage()\n        .with_attribute(\"body\", \"Hello, world!\")\n    )\n)\n\nawait ws_test.run()\n\nassert ws_test.is_complete()\n```\n\nTriggering a message to be sent with extracted data when the following response is received:\n```json\n{\n    \"body\": {\n        \"message\": \"Hello, world!\"\n    }\n}\n```\n\n```py\nfrom pywsitest import WSTest, WSResponse, WSMessage\n\nws_test = (\n    WSTest(\"wss://example.com\")\n    .with_response(\n        WSResponse()\n        .with_attribute(\"body/message\")\n        .with_trigger(\n            WSMessage()\n            .with_attribute(\"body\", \"${body/message}\")\n        )\n    )\n)\n\nawait ws_test.run()\n\nassert ws_test.is_complete()\n```\n\nTriggering a message to be sent with the first colour extracted from a list when the following response is received:\n```json\n{\n    \"body\": [\n        {\"colour\": \"red\"},\n        {\"colour\": \"green\"},\n        {\"colour\": \"blue\"}\n    ]\n}\n```\n\n```py\nfrom pywsitest import WSTest, WSResponse, WSMessage\n\nws_test = (\n    WSTest(\"wss://example.com\")\n    .with_response(\n        WSResponse()\n        .with_attribute(\"body/0/colour\")\n        .with_trigger(\n            WSMessage()\n            .with_attribute(\"body\", \"${body/0/colour}\")\n        )\n    )\n)\n\nawait ws_test.run()\n\nassert ws_test.is_complete()\n```\n\n### Error handling\nForce a test to fail is execution takes more than 30 seconds (default 60 seconds)\n```py\nws_test = (\n    WSTest(\"wss://example.com\")\n    .with_test_timeout(30)\n    .with_response(\n        WSResponse()\n        .with_attribute(\"body\")\n    )\n)\n\nawait ws_test.run()\n\nassert ws_test.is_complete()\n```\n\nForce a test to fail if no response is received for 15 seconds (default 10 seconds) \n- Any responses that haven't been sent will be output along with the `WSTimeoutError`\n- Received responses can be output too by calling `with_received_response_logging` on the `WSTest` instance\n```py\nws_test = (\n    WSTest(\"wss://example.com\")\n    .with_response_timeout(15)\n    .with_received_response_logging()\n    .with_response(\n        WSResponse()\n        .with_attribute(\"body\")\n    )\n)\n\nawait ws_test.run()\n\nassert ws_test.is_complete()\n```\n\nForce a test to fail is a message takes longer than 15 seconds to send (default 10 seconds)\n- The message that the test runner failed to send will be output along with the `WSTimeoutError`\n```py\nws_test = (\n    WSTest(\"wss://example.com\")\n    .with_message_timeout(15)\n    .with_message(\n        WSMessage()\n        .with_attribute(\"body\", \"Hello, world!\")\n    )\n)\n\nawait ws_test.run()\n\nassert ws_test.is_complete()\n```\n\n## Documentation\nUsers can get the docstring help by running:\n```py\nfrom pywsitest import WSTest\nhelp(WSTest.with_response)\n```\n\n## Links\n- [Github](https://github.com/gridsmartercities/pywsitest)\n- [PyPI](https://pypi.org/project/pywsitest)\n- [Test PyPI](https://test.pypi.org/project/pywsitest)\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/gridsmartercities/pywsitest", "keywords": "websocket integration test testing", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pywsitest", "package_url": "https://pypi.org/project/pywsitest/", "platform": "", "project_url": "https://pypi.org/project/pywsitest/", "project_urls": {"Homepage": "https://github.com/gridsmartercities/pywsitest"}, "release_url": "https://pypi.org/project/pywsitest/0.3.2/", "requires_dist": ["websockets"], "requires_python": ">=3.7", "summary": "PYthon WebSocket Integration TESTing framework", "version": "0.3.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://www.gridsmartercities.com/\" rel=\"nofollow\"><img align=\"right\" alt=\"Grid Smarter Cities\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c19863ac75f2e5c4630fd5d796e78c8954c28a23/68747470733a2f2f73332e65752d776573742d322e616d617a6f6e6177732e636f6d2f6f70656e2d736f757263652d7265736f75726365732f677269645f736d61727465725f6369746965735f736d616c6c2e706e67\"></a></p>\n<p><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b448444b12f1c43ad88bac6369846a39ba274e29/68747470733a2f2f636f64656275696c642e65752d776573742d322e616d617a6f6e6177732e636f6d2f6261646765733f757569643d65794a6c626d4e79655842305a57524559585268496a6f6953697477526d4e5563486b32567a4e32565338724d4864555332686f4e7a5a43515564434d4531565630526b65574577546d5a795655784f575564585232684d547a5655565749764c7a4a355a46523253576f354f486874536d353554466334536a5a766347684e636e644e54316c446245645250534973496d6c32554746795957316c644756795533426c59794936496b395356306731546d31464d55564552573952537a63694c434a745958526c636d6c6862464e6c64464e6c636d6c68624349364d5830253344266272616e63683d6d6173746572\">\n<a href=\"https://opensource.org/licenses/MIT\" rel=\"nofollow\"><img alt=\"License: MIT\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/13402995be86cde517cc34ba2cc02d3de74b86c4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d627269676874677265656e2e737667\"></a>\n<a href=\"https://pypi.org/project/pywsitest\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c66653849ba4c9cb824c2fdce6318dc768d9f455/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7079777369746573742e7376673f636f6c6f723d627269676874677265656e\"></a></p>\n<h1>pywsitest</h1>\n<h2>PYthon WebSocket Integration TESTing framework</h2>\n<p>A python API to assist with automated websocket integration testing</p>\n<h2>Installation</h2>\n<pre><code>pip install pywsitest\n</code></pre>\n<h2>Package contents</h2>\n<h3><a href=\"https://github.com/gridsmartercities/pywsitest/blob/master/pywsitest/ws_test.py\" rel=\"nofollow\">WSTest</a></h3>\n<p>WSTest is the main test running class in pywsitest. It currently has the following methods:</p>\n<ul>\n<li><strong>with_parameter</strong>: add a query parameter to the connection</li>\n<li><strong>with_response</strong>: add an expected response to the test runner</li>\n<li><strong>with_message</strong>: add a message for the test runner to send on connection</li>\n<li><strong>with_response_timeout</strong>: set the timeout in seconds for the test runner to wait for a response from the websocket</li>\n<li><strong>with_message_timeout</strong>: set the timeout in seconds for the test runner to wait while trying to send a message to the websocket</li>\n<li><strong>with_test_timeout</strong>: set the timeout in seconds for the test runner to run for</li>\n<li><strong>with_received_response_logging</strong>: enable logging of received responses on response timeout error</li>\n<li><strong>run</strong>: asyncronously run the test runner, sending all messages and listening for responses</li>\n<li><strong>is_complete</strong>: check whether all expected responses have been received and messages have been sent</li>\n</ul>\n<h3><a href=\"https://github.com/gridsmartercities/pywsitest/blob/master/pywsitest/ws_response.py\" rel=\"nofollow\">WSResponse</a></h3>\n<p>WSResponse is a class to represent an expected response from the websocket</p>\n<ul>\n<li><strong>with_attribute</strong>: add an attribute to check an incoming response against</li>\n<li><strong>with_trigger</strong>: add a message to trigger when a response matching this instance has been received</li>\n<li><strong>is_match</strong>: check whether a received response matches the attributes of this instance</li>\n</ul>\n<h3><a href=\"https://github.com/gridsmartercities/pywsitest/blob/master/pywsitest/ws_message.py\" rel=\"nofollow\">WSMessage</a></h3>\n<p>WSMessage is a class to represent a message to send to the websocket</p>\n<ul>\n<li><strong>with_attribute</strong>: add an attribute to the message to be sent to the websocket host</li>\n<li><strong>with_delay</strong>: add a delay to the message to be sent to the websocket host</li>\n</ul>\n<h2>Examples</h2>\n<h3>Response testing</h3>\n<p>Testing a response with a body is received on connection to a websocket host:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pywsitest</span> <span class=\"kn\">import</span> <span class=\"n\">WSTest</span><span class=\"p\">,</span> <span class=\"n\">WSResponse</span>\n\n<span class=\"n\">ws_test</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"n\">WSTest</span><span class=\"p\">(</span><span class=\"s2\">\"wss://example.com\"</span><span class=\"p\">)</span>\n    <span class=\"o\">.</span><span class=\"n\">with_response</span><span class=\"p\">(</span>\n        <span class=\"n\">WSResponse</span><span class=\"p\">()</span>\n        <span class=\"o\">.</span><span class=\"n\">with_attribute</span><span class=\"p\">(</span><span class=\"s2\">\"body\"</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n\n<span class=\"k\">await</span> <span class=\"n\">ws_test</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">ws_test</span><span class=\"o\">.</span><span class=\"n\">is_complete</span><span class=\"p\">()</span>\n</pre>\n<p>Testing that a response with the following more complicated body is received on connection to a websocket host:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"body\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"attribute\"</span><span class=\"p\">:</span> <span class=\"s2\">\"value\"</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pywsitest</span> <span class=\"kn\">import</span> <span class=\"n\">WSTest</span><span class=\"p\">,</span> <span class=\"n\">WSResponse</span>\n\n<span class=\"n\">ws_test</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"n\">WSTest</span><span class=\"p\">(</span><span class=\"s2\">\"wss://example.com\"</span><span class=\"p\">)</span>\n    <span class=\"o\">.</span><span class=\"n\">with_response</span><span class=\"p\">(</span>\n        <span class=\"n\">WSResponse</span><span class=\"p\">()</span>\n        <span class=\"o\">.</span><span class=\"n\">with_attribute</span><span class=\"p\">(</span><span class=\"s2\">\"body\"</span><span class=\"p\">)</span>\n        <span class=\"o\">.</span><span class=\"n\">with_attribute</span><span class=\"p\">(</span><span class=\"s2\">\"body/attribute\"</span><span class=\"p\">,</span> <span class=\"s2\">\"value\"</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n\n<span class=\"k\">await</span> <span class=\"n\">ws_test</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">ws_test</span><span class=\"o\">.</span><span class=\"n\">is_complete</span><span class=\"p\">()</span>\n</pre>\n<p>Testing that a response with the following body with a list is received on connection to a websocket host:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"body\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span><span class=\"nt\">\"colour\"</span><span class=\"p\">:</span> <span class=\"s2\">\"red\"</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"nt\">\"colour\"</span><span class=\"p\">:</span> <span class=\"s2\">\"green\"</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"nt\">\"colour\"</span><span class=\"p\">:</span> <span class=\"s2\">\"blue\"</span><span class=\"p\">}</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</pre>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pywsitest</span> <span class=\"kn\">import</span> <span class=\"n\">WSTest</span><span class=\"p\">,</span> <span class=\"n\">WSResponse</span>\n\n<span class=\"n\">ws_test</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"n\">WSTest</span><span class=\"p\">(</span><span class=\"s2\">\"wss://example.com\"</span><span class=\"p\">)</span>\n    <span class=\"o\">.</span><span class=\"n\">with_response</span><span class=\"p\">(</span>\n        <span class=\"n\">WSResponse</span><span class=\"p\">()</span>\n        <span class=\"o\">.</span><span class=\"n\">with_attribute</span><span class=\"p\">(</span><span class=\"s2\">\"body/0/colour\"</span><span class=\"p\">,</span> <span class=\"s2\">\"red\"</span><span class=\"p\">)</span>\n        <span class=\"o\">.</span><span class=\"n\">with_attribute</span><span class=\"p\">(</span><span class=\"s2\">\"body/1/colour\"</span><span class=\"p\">,</span> <span class=\"s2\">\"green\"</span><span class=\"p\">)</span>\n        <span class=\"o\">.</span><span class=\"n\">with_attribute</span><span class=\"p\">(</span><span class=\"s2\">\"body/2/colour\"</span><span class=\"p\">,</span> <span class=\"s2\">\"blue\"</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n\n<span class=\"k\">await</span> <span class=\"n\">ws_test</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">ws_test</span><span class=\"o\">.</span><span class=\"n\">is_complete</span><span class=\"p\">()</span>\n</pre>\n<p>Testing that a response with the following body with a list containing the colour <code>green</code> somewhere is received on connection to a websocket host:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"body\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span><span class=\"nt\">\"colour\"</span><span class=\"p\">:</span> <span class=\"s2\">\"red\"</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"nt\">\"colour\"</span><span class=\"p\">:</span> <span class=\"s2\">\"green\"</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"nt\">\"colour\"</span><span class=\"p\">:</span> <span class=\"s2\">\"blue\"</span><span class=\"p\">}</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</pre>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pywsitest</span> <span class=\"kn\">import</span> <span class=\"n\">WSTest</span><span class=\"p\">,</span> <span class=\"n\">WSResponse</span>\n\n<span class=\"n\">ws_test</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"n\">WSTest</span><span class=\"p\">(</span><span class=\"s2\">\"wss://example.com\"</span><span class=\"p\">)</span>\n    <span class=\"o\">.</span><span class=\"n\">with_response</span><span class=\"p\">(</span>\n        <span class=\"n\">WSResponse</span><span class=\"p\">()</span>\n        <span class=\"o\">.</span><span class=\"n\">with_attribute</span><span class=\"p\">(</span><span class=\"s2\">\"body//colour\"</span><span class=\"p\">,</span> <span class=\"s2\">\"green\"</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n\n<span class=\"k\">await</span> <span class=\"n\">ws_test</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">ws_test</span><span class=\"o\">.</span><span class=\"n\">is_complete</span><span class=\"p\">()</span>\n</pre>\n<h3>Message sending</h3>\n<p>Sending a message on connection to a websocket host:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pywsitest</span> <span class=\"kn\">import</span> <span class=\"n\">WSTest</span><span class=\"p\">,</span> <span class=\"n\">WSMessage</span>\n\n<span class=\"n\">ws_test</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"n\">WSTest</span><span class=\"p\">(</span><span class=\"s2\">\"wss://example.com\"</span><span class=\"p\">)</span>\n    <span class=\"o\">.</span><span class=\"n\">with_message</span><span class=\"p\">(</span>\n        <span class=\"n\">WSMessage</span><span class=\"p\">()</span>\n        <span class=\"o\">.</span><span class=\"n\">with_attribute</span><span class=\"p\">(</span><span class=\"s2\">\"body\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Hello, world!\"</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n\n<span class=\"k\">await</span> <span class=\"n\">ws_test</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">ws_test</span><span class=\"o\">.</span><span class=\"n\">is_complete</span><span class=\"p\">()</span>\n</pre>\n<p>Triggering a message to be sent with extracted data when the following response is received:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"body\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"message\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Hello, world!\"</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pywsitest</span> <span class=\"kn\">import</span> <span class=\"n\">WSTest</span><span class=\"p\">,</span> <span class=\"n\">WSResponse</span><span class=\"p\">,</span> <span class=\"n\">WSMessage</span>\n\n<span class=\"n\">ws_test</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"n\">WSTest</span><span class=\"p\">(</span><span class=\"s2\">\"wss://example.com\"</span><span class=\"p\">)</span>\n    <span class=\"o\">.</span><span class=\"n\">with_response</span><span class=\"p\">(</span>\n        <span class=\"n\">WSResponse</span><span class=\"p\">()</span>\n        <span class=\"o\">.</span><span class=\"n\">with_attribute</span><span class=\"p\">(</span><span class=\"s2\">\"body/message\"</span><span class=\"p\">)</span>\n        <span class=\"o\">.</span><span class=\"n\">with_trigger</span><span class=\"p\">(</span>\n            <span class=\"n\">WSMessage</span><span class=\"p\">()</span>\n            <span class=\"o\">.</span><span class=\"n\">with_attribute</span><span class=\"p\">(</span><span class=\"s2\">\"body\"</span><span class=\"p\">,</span> <span class=\"s2\">\"${body/message}\"</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n\n<span class=\"k\">await</span> <span class=\"n\">ws_test</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">ws_test</span><span class=\"o\">.</span><span class=\"n\">is_complete</span><span class=\"p\">()</span>\n</pre>\n<p>Triggering a message to be sent with the first colour extracted from a list when the following response is received:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"body\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span><span class=\"nt\">\"colour\"</span><span class=\"p\">:</span> <span class=\"s2\">\"red\"</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"nt\">\"colour\"</span><span class=\"p\">:</span> <span class=\"s2\">\"green\"</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"nt\">\"colour\"</span><span class=\"p\">:</span> <span class=\"s2\">\"blue\"</span><span class=\"p\">}</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</pre>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pywsitest</span> <span class=\"kn\">import</span> <span class=\"n\">WSTest</span><span class=\"p\">,</span> <span class=\"n\">WSResponse</span><span class=\"p\">,</span> <span class=\"n\">WSMessage</span>\n\n<span class=\"n\">ws_test</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"n\">WSTest</span><span class=\"p\">(</span><span class=\"s2\">\"wss://example.com\"</span><span class=\"p\">)</span>\n    <span class=\"o\">.</span><span class=\"n\">with_response</span><span class=\"p\">(</span>\n        <span class=\"n\">WSResponse</span><span class=\"p\">()</span>\n        <span class=\"o\">.</span><span class=\"n\">with_attribute</span><span class=\"p\">(</span><span class=\"s2\">\"body/0/colour\"</span><span class=\"p\">)</span>\n        <span class=\"o\">.</span><span class=\"n\">with_trigger</span><span class=\"p\">(</span>\n            <span class=\"n\">WSMessage</span><span class=\"p\">()</span>\n            <span class=\"o\">.</span><span class=\"n\">with_attribute</span><span class=\"p\">(</span><span class=\"s2\">\"body\"</span><span class=\"p\">,</span> <span class=\"s2\">\"${body/0/colour}\"</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n\n<span class=\"k\">await</span> <span class=\"n\">ws_test</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">ws_test</span><span class=\"o\">.</span><span class=\"n\">is_complete</span><span class=\"p\">()</span>\n</pre>\n<h3>Error handling</h3>\n<p>Force a test to fail is execution takes more than 30 seconds (default 60 seconds)</p>\n<pre><span class=\"n\">ws_test</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"n\">WSTest</span><span class=\"p\">(</span><span class=\"s2\">\"wss://example.com\"</span><span class=\"p\">)</span>\n    <span class=\"o\">.</span><span class=\"n\">with_test_timeout</span><span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n    <span class=\"o\">.</span><span class=\"n\">with_response</span><span class=\"p\">(</span>\n        <span class=\"n\">WSResponse</span><span class=\"p\">()</span>\n        <span class=\"o\">.</span><span class=\"n\">with_attribute</span><span class=\"p\">(</span><span class=\"s2\">\"body\"</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n\n<span class=\"k\">await</span> <span class=\"n\">ws_test</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">ws_test</span><span class=\"o\">.</span><span class=\"n\">is_complete</span><span class=\"p\">()</span>\n</pre>\n<p>Force a test to fail if no response is received for 15 seconds (default 10 seconds)</p>\n<ul>\n<li>Any responses that haven't been sent will be output along with the <code>WSTimeoutError</code></li>\n<li>Received responses can be output too by calling <code>with_received_response_logging</code> on the <code>WSTest</code> instance</li>\n</ul>\n<pre><span class=\"n\">ws_test</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"n\">WSTest</span><span class=\"p\">(</span><span class=\"s2\">\"wss://example.com\"</span><span class=\"p\">)</span>\n    <span class=\"o\">.</span><span class=\"n\">with_response_timeout</span><span class=\"p\">(</span><span class=\"mi\">15</span><span class=\"p\">)</span>\n    <span class=\"o\">.</span><span class=\"n\">with_received_response_logging</span><span class=\"p\">()</span>\n    <span class=\"o\">.</span><span class=\"n\">with_response</span><span class=\"p\">(</span>\n        <span class=\"n\">WSResponse</span><span class=\"p\">()</span>\n        <span class=\"o\">.</span><span class=\"n\">with_attribute</span><span class=\"p\">(</span><span class=\"s2\">\"body\"</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n\n<span class=\"k\">await</span> <span class=\"n\">ws_test</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">ws_test</span><span class=\"o\">.</span><span class=\"n\">is_complete</span><span class=\"p\">()</span>\n</pre>\n<p>Force a test to fail is a message takes longer than 15 seconds to send (default 10 seconds)</p>\n<ul>\n<li>The message that the test runner failed to send will be output along with the <code>WSTimeoutError</code></li>\n</ul>\n<pre><span class=\"n\">ws_test</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"n\">WSTest</span><span class=\"p\">(</span><span class=\"s2\">\"wss://example.com\"</span><span class=\"p\">)</span>\n    <span class=\"o\">.</span><span class=\"n\">with_message_timeout</span><span class=\"p\">(</span><span class=\"mi\">15</span><span class=\"p\">)</span>\n    <span class=\"o\">.</span><span class=\"n\">with_message</span><span class=\"p\">(</span>\n        <span class=\"n\">WSMessage</span><span class=\"p\">()</span>\n        <span class=\"o\">.</span><span class=\"n\">with_attribute</span><span class=\"p\">(</span><span class=\"s2\">\"body\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Hello, world!\"</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n\n<span class=\"k\">await</span> <span class=\"n\">ws_test</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">ws_test</span><span class=\"o\">.</span><span class=\"n\">is_complete</span><span class=\"p\">()</span>\n</pre>\n<h2>Documentation</h2>\n<p>Users can get the docstring help by running:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pywsitest</span> <span class=\"kn\">import</span> <span class=\"n\">WSTest</span>\n<span class=\"n\">help</span><span class=\"p\">(</span><span class=\"n\">WSTest</span><span class=\"o\">.</span><span class=\"n\">with_response</span><span class=\"p\">)</span>\n</pre>\n<h2>Links</h2>\n<ul>\n<li><a href=\"https://github.com/gridsmartercities/pywsitest\" rel=\"nofollow\">Github</a></li>\n<li><a href=\"https://pypi.org/project/pywsitest\" rel=\"nofollow\">PyPI</a></li>\n<li><a href=\"https://test.pypi.org/project/pywsitest\" rel=\"nofollow\">Test PyPI</a></li>\n</ul>\n\n          </div>"}, "last_serial": 6887267, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "abb91dbe29ad7d8be498dc8594154c1e", "sha256": "cfbb7c39d22575d1c56d243d23124190b4b79e18449db425f60034091dab501f"}, "downloads": -1, "filename": "pywsitest-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "abb91dbe29ad7d8be498dc8594154c1e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6426, "upload_time": "2019-07-22T12:50:44", "upload_time_iso_8601": "2019-07-22T12:50:44.836510Z", "url": "https://files.pythonhosted.org/packages/87/b5/023c568a80a7451c29b206e5ede71b186b4e5736c3a76af9725c7b4f8363/pywsitest-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6c923bad90523cff7e4974d3b8f38e3c", "sha256": "03116ffeba6dd18e175ddca471e178f0b505e6d67da9bf2b5fd04ead5c72c69c"}, "downloads": -1, "filename": "pywsitest-0.1.tar.gz", "has_sig": false, "md5_digest": "6c923bad90523cff7e4974d3b8f38e3c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4463, "upload_time": "2019-07-22T12:50:47", "upload_time_iso_8601": "2019-07-22T12:50:47.308075Z", "url": "https://files.pythonhosted.org/packages/18/51/734e9941af10c9b293609b742c0a73fbb7e45e5eeea66cb5937eebd1190e/pywsitest-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "3d77bbde5375910fd4b8b4eb18346858", "sha256": "4de248cbf521ca74bf147dd4cc4fa45c4ff637efa3af03b63103732e48d2d033"}, "downloads": -1, "filename": "pywsitest-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "3d77bbde5375910fd4b8b4eb18346858", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7730, "upload_time": "2019-07-26T14:35:48", "upload_time_iso_8601": "2019-07-26T14:35:48.431159Z", "url": "https://files.pythonhosted.org/packages/cc/fd/40e1dad951d00d7f968b2bb5d120e7a6c6991f36386fa3589b0d62d8079e/pywsitest-0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "da8537001028e114505a059ae9e29b1c", "sha256": "b228497c40323e0de32d11e5ef513a3b14b9caf5506631cd8de8191fd3e90629"}, "downloads": -1, "filename": "pywsitest-0.2.tar.gz", "has_sig": false, "md5_digest": "da8537001028e114505a059ae9e29b1c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5547, "upload_time": "2019-07-26T14:35:50", "upload_time_iso_8601": "2019-07-26T14:35:50.184771Z", "url": "https://files.pythonhosted.org/packages/93/67/5a59d8d2469e1699c65e9cb642b0e49ed03eae1f17bf43bcc1d0ee2c61b8/pywsitest-0.2.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "5dd3d27af891b0760584d3c752c2f508", "sha256": "b17a3332fbce45780ca943aa9581e2634642bbdbbf3f1899311d1da54ed8aa6b"}, "downloads": -1, "filename": "pywsitest-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5dd3d27af891b0760584d3c752c2f508", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7933, "upload_time": "2019-08-01T15:40:49", "upload_time_iso_8601": "2019-08-01T15:40:49.490688Z", "url": "https://files.pythonhosted.org/packages/04/5c/5e31548f015c5963945c59fc87b7919a54a911814874438d5e8a2babdb30/pywsitest-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2aadec2758a08e40223cdbaa8904ed02", "sha256": "8dc33b1b6c71722fd4c34a317ef3dfe4f4eb066f7b202dd0f44dd5fa9f2731c0"}, "downloads": -1, "filename": "pywsitest-0.2.1.tar.gz", "has_sig": false, "md5_digest": "2aadec2758a08e40223cdbaa8904ed02", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5709, "upload_time": "2019-08-01T15:40:51", "upload_time_iso_8601": "2019-08-01T15:40:51.199901Z", "url": "https://files.pythonhosted.org/packages/53/fd/9c30d43e412e13ef587fbba70eea6d2664874ac4547d7f349b3dde81c5a0/pywsitest-0.2.1.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "613f757a9a3453522dfe8b1edc628500", "sha256": "f4def3e331a7e486ea65077d844a8af09a426b8b83232839f8a45e4c99753049"}, "downloads": -1, "filename": "pywsitest-0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "613f757a9a3453522dfe8b1edc628500", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 8441, "upload_time": "2020-02-17T11:51:18", "upload_time_iso_8601": "2020-02-17T11:51:18.280839Z", "url": "https://files.pythonhosted.org/packages/df/e7/726ed38a593e3b310efc5727ca59053f7894e2def3569c9995a679ada7a1/pywsitest-0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "54864e7e419ae3ef00ae037190af7dd3", "sha256": "a74aa1b2f26d959fa3a5b0603b74b0ecaba04bd68dbbe783ceea8b73a3d98078"}, "downloads": -1, "filename": "pywsitest-0.3.tar.gz", "has_sig": false, "md5_digest": "54864e7e419ae3ef00ae037190af7dd3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 6530, "upload_time": "2020-02-17T11:51:19", "upload_time_iso_8601": "2020-02-17T11:51:19.808448Z", "url": "https://files.pythonhosted.org/packages/be/f6/1392e3285fa061f2b93f821a7b4e0c545460a6ac9cd6a3ac9c89f900f2f8/pywsitest-0.3.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "de3977c1b2f719fc4f8ab82bede1599e", "sha256": "55e898a7504568887b8146f14e24f2375be81bed9f40550c944611718d898a3c"}, "downloads": -1, "filename": "pywsitest-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "de3977c1b2f719fc4f8ab82bede1599e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 9053, "upload_time": "2020-03-04T13:09:09", "upload_time_iso_8601": "2020-03-04T13:09:09.173617Z", "url": "https://files.pythonhosted.org/packages/90/db/72a69379d63e56ba4706a28c54445736ee1ddd05c41c204900e8fdb78b32/pywsitest-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "739c9da753ef7ca04e2274906916e3ad", "sha256": "9f7cd9a43c1cbe9e3cb99887be1020f653858c32bb0134ab70d0729d5a49bbd0"}, "downloads": -1, "filename": "pywsitest-0.3.1.tar.gz", "has_sig": false, "md5_digest": "739c9da753ef7ca04e2274906916e3ad", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 8694, "upload_time": "2020-03-04T13:09:10", "upload_time_iso_8601": "2020-03-04T13:09:10.976643Z", "url": "https://files.pythonhosted.org/packages/3f/65/ad3b67a8ef4fe4ad708c7585dc85b864164d2fd47fae5a96ea88008d7108/pywsitest-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "4b950299b5795ce466cb73742e1d45de", "sha256": "26f97b352f2d297ca5d108ba590d7fe18f3b733c1ebba3182ae70b4ceeb5a883"}, "downloads": -1, "filename": "pywsitest-0.3.2-py3-none-any.whl", "has_sig": false, "md5_digest": "4b950299b5795ce466cb73742e1d45de", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 9456, "upload_time": "2020-03-26T11:58:05", "upload_time_iso_8601": "2020-03-26T11:58:05.119919Z", "url": "https://files.pythonhosted.org/packages/22/cd/92d34aa3a1f894628869881e5a12d50155e89c1c37a123b9d8c6c46b9cb6/pywsitest-0.3.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "90775c014693baf0c7251db9a2ec8ecc", "sha256": "60bf04766a31f8387406eb4667019db06ca0783b36854315670f2799ccedbf57"}, "downloads": -1, "filename": "pywsitest-0.3.2.tar.gz", "has_sig": false, "md5_digest": "90775c014693baf0c7251db9a2ec8ecc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 9387, "upload_time": "2020-03-26T11:58:06", "upload_time_iso_8601": "2020-03-26T11:58:06.924654Z", "url": "https://files.pythonhosted.org/packages/4d/20/2e2fcad6197e3a8673c8a0a5ae76086e67e876a192f0fc1d26fbdb35278e/pywsitest-0.3.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4b950299b5795ce466cb73742e1d45de", "sha256": "26f97b352f2d297ca5d108ba590d7fe18f3b733c1ebba3182ae70b4ceeb5a883"}, "downloads": -1, "filename": "pywsitest-0.3.2-py3-none-any.whl", "has_sig": false, "md5_digest": "4b950299b5795ce466cb73742e1d45de", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 9456, "upload_time": "2020-03-26T11:58:05", "upload_time_iso_8601": "2020-03-26T11:58:05.119919Z", "url": "https://files.pythonhosted.org/packages/22/cd/92d34aa3a1f894628869881e5a12d50155e89c1c37a123b9d8c6c46b9cb6/pywsitest-0.3.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "90775c014693baf0c7251db9a2ec8ecc", "sha256": "60bf04766a31f8387406eb4667019db06ca0783b36854315670f2799ccedbf57"}, "downloads": -1, "filename": "pywsitest-0.3.2.tar.gz", "has_sig": false, "md5_digest": "90775c014693baf0c7251db9a2ec8ecc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 9387, "upload_time": "2020-03-26T11:58:06", "upload_time_iso_8601": "2020-03-26T11:58:06.924654Z", "url": "https://files.pythonhosted.org/packages/4d/20/2e2fcad6197e3a8673c8a0a5ae76086e67e876a192f0fc1d26fbdb35278e/pywsitest-0.3.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:11:08 2020"}