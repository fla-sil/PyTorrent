{"info": {"author": "TileCache Contributors", "author_email": "tilecache@lists.osgeo.org", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Scientific/Engineering :: GIS"], "description": "=================\n Getting Started\n=================\n\n-------------------------\nCache and serve map tiles\n-------------------------\n\n:Author: labs@metacarta.com\n:Copyright: (c) 2006-2010 TileCache Contributors\n            Distributed under the BSD license.\n:Version: 2.11 \n:Manual section: 8\n:Manual group: GIS Utilities\n\nDescription\n===========\nTileCache is a BSD licensed tile caching mechanism.  The goal is to make it\neasy to set up a WMS or TMS frontend to any backend data services you might be\ninterested in, using a pluggable caching and rendering mechanism. \n\nTileCache was developed by MetaCarta Labs and released to the public under a\nBSD license.\n\nThe TileCache was designed as a companion to OpenLayers, the BSD licensed web\nmapping interface. If you are using TileCache with OpenLayers, please read the\nsection of this readme which describes how to do so. For additional help with\nsetting up TileCache for use with OpenLayers, please feel free to stop by\n#openlayers, on irc.freenode.net, or to send email to\ntilecache@openlayers.org. \n\nInstalling TileCache\n====================\n\nGenerally, installing TileCache is as simple as downloading a source\ndistribution and unpacking it. For installation systemwide, you can also use\nthe Python Package Index (aka pypi or Cheeseshop) to install TileCache. Simply\ntype easy_install TileCache. Once this is done, you will need to install the\nTileCache configuration file. A tool to do this is installed, called\ntilecache_install_config.py. A full installation likely looks like::\n  \n  $ sudo easy_install TileCache\n  ...\n  Installed\n  /usr/lib/python2.5/site-packages/TileCache-2.10-py2.5.egg\n  \n  $ sudo tilecache_install_config.py\n  Successfully copied file\n  /usr/lib/python2.5/site-packages/TileCache-2.10-py2.5.egg/TileCache/tilecache.cfg\n  to /etc/tilecache.cfg.\n  \nTileCache is also available as a Debian package from the TileCache homepage.\nThis Debian package is designed to install on Debian etch releases or later.\nThis Debian package should install on Ubuntu Feisty or Gutsy.  \n\nRunning Under CGI\n=================\n\n* Extract the code to some web directory (e.g. in /var/www).\n* Edit tilecache.cfg to point the DiskCache to the location you wish\n  to cache tiles, and the layers to point to the map file or WMS\n  server you wish to cache. On Debian, this file is in /etc/tilecache.cfg\n  by default.\n* Permit CGI execution in the TileCache directory.\n  For example, if TileCache is to be run with Apache, the\n  following must be added in your Apache configuration,   \n  where /var/www/tilecache is the directory resulting from\n  the code extraction. On Debian, this is typically /usr/lib/cgi-bin.\n  \n  ::\n\n    <Directory /var/www/tilecache>\n         AddHandler cgi-script .cgi\n         Options +ExecCGI\n    </Directory>\n\n* Visit:\n  \n  http://example.com/yourdir/tilecache.cgi?LAYERS=basic&SERVICE=WMS\n  &VERSION=1.1.1&REQUEST=GetMap&SRS=EPSG:4326&BBOX=-180,-90,0,90\n  &WIDTH=256&HEIGHT=256\n  \n* Or visit:\n\n  http://example.com/yourdir/tilecache.cgi/1.0.0/basic/0/0/0.png\n\n* If you see a tile you have set up your configuration correctly. Congrats!\n\nNon-standard Python Location\n----------------------------\nIf your Python is not at /usr/bin/python on your system, you will need to\nchange the first line of tilecache.cgi to reference the location of your Python\nbinary. A common example is:\n\n  ::\n\n     #!/usr/local/bin/python\n\nUnder Apache, you might see an error message like:\n\n  ::\n\n    [Wed Mar 14 19:55:30 2007] [error] [client 127.0.0.1] (2)No such file or \n      directory: exec of '/www/tilecache.cgi' failed\n\nto indicate this problem.\n\nYou can typically locate where Python is installed on your system via the\ncommand which python.\n\nWindows users: If you are using Windows, you should change the first line \nof tilecache.cgi to read:\n\n  ::\n\n    #!C:/Python/python.exe -u\n\nC:/Python should match the location Python is installed under on your \nsystem. In Python 2.5, this location is C:/Python25 by default.  \n\nRunning Under mod_python\n========================\n\n* Extract the code to some web directory (e.g. /var/www).\n* Edit tilecache.cfg to point the DiskCache to the location you wish\n  to cache tiles, and the layers to point to the map file or WMS\n  server you wish to cache\n* Add the following to your Apache configuration, under a <Directory> heading:\n  \n  ::\n  \n      AddHandler python-program .py\n      PythonHandler TileCache.Service \n      PythonOption TileCacheConfig /path/to/tilecache.cfg\n  \n* An example might look like:\n\n  ::\n  \n    <Directory /var/www/tilecache/>\n        AddHandler python-program .py\n        PythonHandler TileCache.Service \n        PythonOption TileCacheConfig /var/www/tilecache/tilecache.cfg\n    </Directory>\n  \n* In this example, /var/www/tilecache is the directory resulting from\n  the code extraction. If you've installed this from a Debian package, the\n  location of your .cfg file is probably /etc/tilecache.cfg.\n* Edit tilecache.cfg to point to the location of your 'Layers' directory,\n  as demonstrated inside the default tilecache.cfg.\n* Visit one of the URLs described above, replacing tilecache.cgi with \n  tilecache.py\n* If you see a tile you have set up your configuration correctly. Congrats!\n\nRunning Standalone under WSGI\n=============================\n\nTileCache as of version 1.4 comes with a standalone HTTP server which uses\nthe WSGI handler. This implementation depends on *Python Paste*, which can be\ndownloaded from:\n  \n  http://cheeseshop.python.org/pypi/Paste\n\nFor versions of Python earlier than 2.5, you will also need to install \nwsgiref:\n\n  http://cheeseshop.python.org/pypi/wsgiref\n\nOnce you have all the prerequisites installed, simply run:\n\n  ::\n  \n    python tilecache_http_server.py\n\nThis will start a webserver listening on port 8080, after which you should\nbe able to open:\n\n  ::\n  \n    http://hostname:8080/1.0.0/basic/0/0/0.png\n\nto see your first tile.\n\nRunning Under FastCGI\n=====================\n\nTileCache as of version 1.4 comes with a fastcgi implementation. In \norder to use this implementation, you will need to install flup, available\nfrom:\n  \n  http://trac.saddi.com/flup\n\nThis implementation also depends on Python Paste, which can be downloaded \nfrom:\n  \n  http://cheeseshop.python.org/pypi/Paste\n\nOnce you have done this, you can configure your fastcgi server to use\ntilecache.fcgi.\n\nConfiguring FastCGI is beyond the scope of this documentation.\n\nRunning Under IIS\n=================\n\nInstalling TileCache for use with IIS requires some additional configuration.\n\nA nice document for setting up TileCache on IIS is available from Vish's\nweblog: http://viswaug.wordpress.com/2008/02/03/setting-up-tilecache-on-iis/ .\n\nRunning Standalone with PasteScript and CherryPy\n================================================\n\nOne component of the CherryPy web framework is a pure Python, fast,\nHTTP/1.1-compliant, WSGI thread-pooled webserver.\nTo deploy Tilecache using this option you have to:\n\n * Install prerequisites:\n\n    easy_install PasteScript\n    easy_install CherryPy\n\n * Create a deployment config file specifying the http server and the\n   application with options.  The format of the configuration file is\n   documented here: http://pythonpaste.org/deploy/#the-config-file\n\nExample configuration file follows. Copy the lines into tc.ini, tweak\nthe tilecache_config variable, run paster serve tc.ini and enjoy at\nhttp://127.0.0.1:5000/tc\n\n::\n\n  [server:main]\n  #tested with Paste#http and PasteScript#wsgiutils, PasteScript#twisted\n  also possible after installing dependencies\n  use = egg:PasteScript#cherrypy\n  host = 127.0.0.1\n  port = 5000\n\n  [composite:main]\n  use = egg:Paste#urlmap\n  /tc = tilecache1\n\n  [app:tilecache1]\n  use = egg:TileCache\n  tilecache_config = tilecache.cfg\n  \nConfiguration\n=============\nTileCache is configured by a config file, defaulting to tilecache.cfg.\nThere are several parameters to control TileCache layers that are applicable\nto all layers:\n\n bbox\n     The bounding box of the Layer. The resolutions array defaults \n     to having resolutions which are equal to the bbox divided by\n     512 (two standard tiles).\n debug\n     Whether to send debug output to the error.log. Defaults to \"yes\",\n     can be set to \"no\"\n description\n     Layer description, used in some metadata responses. Default \n     is blank.\n extension\n     File extension of the layer. Used to request images from\n     WMS servers, as well as when writing cache files.\n layers\n     A string used to describe the layers. Typically passed directly\n     to the renderer. The WMSLayer sends this in the HTTP request,\n     and the MapServerLayer chooses which layer to render based on \n     this string. If no layer is provided, the layer name is used\n     to fill this property.\n levels\n     An integer, describing the number of 'zoom levels' or \n     scales to support. Overridden by resolutions, if passed.        \n mapfile\n     The absolute file location of a mapfile. Required for\n     MapServer and Mapnik layers. \n maxResolution\n     The maximum resolution. If this is set, a resolutions\n     array is automatically calculated up to a number of\n     levels controlled by the 'levels' option.\n metaTile\n     set to \"yes\" to turn on metaTiling. This will request larger\n     tiles, and split them up using the Python Imaging library.\n     Defaults to \"no\".\n metaBuffer\n     an integer number of pixels to request around the outside\n     of the rendered tile. This is good to combat edge effects\n     in various map renderers. Defaults to 10.\n metaSize\n     A comma seperated pair of integers, which is used to \n     determine how many tiles should be rendered when using\n     metaTiling. Default is 5,5.\n resolutions\n     Comma seperate list of resolutions you want the TileCache\n     instance to support.\n size\n    Comma seperated set of integers, describing the width/height\n    of the tiles. Defaults to 256,256 \n srs\n    String describing the SRS value. Default is \"EPSG:4326\"          \n type\n    The type of layer. Options are: WMSLayer, MapnikLayer, MapServerLayer,\n    ImageLayer\n url\n    URL to use when requesting images from a remote WMS server. Required\n    for WMSLayer.\n watermarkImage\n    The watermarkImage parameter is assigned on a per-layer basis.\n    This is a fully qualified path to an image you would like to apply to each\n    tile. We recommend you use a watermark image the same size as your tiles.\n    If using the default tile size, you should use a 256x256 image.\n    NOTE: Python Imaging Library DOES NOT support interlaced images.\n watermarkOpacity\n    The watermarkOpacity parameter is assigned on a per-layer basis.\n    This configures the opacity of the watermark over the tile, it is a floating\n    point number between 0 and 1. Usage is optional and will otherwise default.\n extent_type\n    Setting this to 'loose' will allow TileCache to generate tiles outside the\n    maximum bounding box. Useful for clients that don't know when to stop\n    asking for tiles.\n tms_type\n    Setting this to \"google\" will cause tiles to switch vertical order (that\n    is, following the Google style x/y pattern).\n\nUsing TileCache With OpenLayers\n===============================\n\nTo run OpenLayers with TileCache the URL passed to the OpenLayers.Layer.WMS\nconstructor must point to the TileCache script, i.e. tilecache.cgi or\ntilecache.py. As an example see the index.html file included in the TileCache\ndistribution.\n\nNote: index.html assumes TileCache is set up under CGI (see above). If you set\nup TileCache under mod_python you'd need to slighly modify index.html: the URL\npassed to the OpenLayers.Layer.WMS constructor must point to the mod_python\nscript as opposed to the CGI script, so replace tilecache.cgi with\ntilecache.py. Similarly, you would need to edit this URL if you were to use\nTileCache with the standalone HTTP Server or FastCGI.\n\nThe most important thing to do is to ensure that the OpenLayers Layer\nhas the same resolutions and bounding box as your TileCache layer. You can define\nthe resolutions in OpenLayers via the 'resolutions' option or the 'maxResolution' \noption on the layer. The maxExtent should be defined to match the bbox parameter\nof the TileCache layer. \n\nIf you are using TileCache for overlays, you should set the 'reproject' option\non the layer to 'false'.\n\nUsing TileCache With MapServer\n==============================\n\nMapServer has a map level metadata option, labelcache_map_edge_buffer, which\nis set automatically by TileCache to the metaBuffer plus five when metaTiling\nis on, if it is not set in the mapfile.\n\nIf you are using MetaTiling, be aware that MapServer generates interlaced\nPNG files, which PIL will not read. See \nhttp://www.mapserver.org/faq.html#why-doesn-t-pil-python-imaging-library-open-my-pngs on how to resolve this. \n\nUsing With Python-Mapscript\n===========================\n\nSeveral users have reported cases where large mapfiles combined with \npython-mapscript has caused memory leaks, which eventually lead to \nsegfaults. If you are having problems with Apache/TileCache segfaults\nwhen using python-mapscript, then you should switch to using a WMS\nLayer instead of a MapServer Layer.\n\nSeeding your TileCache\n======================\n\nThe tilecache_seed.py utility will seed tiles in a cache automatically. You will\nneed to have TileCache set up in one of the previously described configurations.\n\nUsage\n-----\n\n     tilecache_seed.py [options] <layer> [<zoom start> <zoom stop>]\n\nOptions\n-------\n  --version             show program's version number and exit\n  -h, --help            show this help message and exit\n  -f, --force           force recreation of tiles even if they are already in\n                        cache\n  -b BBOX, --bbox=BBOX  restrict to specified bounding box\n  -p PADDING, --pading=PADDING\n                        extra margin tiles to seed around target area.\n                        Defaults to 0 (some edge tiles might be missing).\n                        A value of 1 ensures all tiles will be created, but\n                        some tiles may be wholly outside your bbox                        \n                        \nArguments\n---------\n\n    layer \n       same layer name that is in the tilecache.cfg\n    zoom start\n       Zoom level to start the process\n    zoom end\n       Zoom level to end the process\n\nSeeding by center point and radius\n----------------------------------\n \nIf called without zoom level arguments, tilecache_seed.py will assume\nthat it needs to read a list of points and radii from standard input, \nin the form:\n\n  ::\n  \n        <lat>,<lon>,<radius>\n        <lat>,<lon>,<radius> \n        <lat>,<lon>,<radius>\n        <lat>,<lon>,<radius>\n        <ctrl + d>\n\nThe format of this file is:\n\n  lon\n    the position(s) to seed longitude\n  lat\n    the position(s) to seed latitude\n  radius\n    the radius around the lon/lat to seed in degrees\n\nExamples\n--------\n\nAn example with zoom levels 5 through 12 and ~2 extra tiles around each zoom level would be like:\n\n    ::\n \n      $ tilecache_seed.py Zip_Codes 5 12 \"-118.12500,31.952162238,-116.015625,34.3071438563\" 2\n\nThe bbox can be dropped and defaults to world lonlat(-180,-90,180,90):\n\n    ::\n\n      $ tilecache_seed.py Zip_Codes 0 9\n \n\nIn center point/radius mode, the zoom level range is not specifiable from the\ncommand-line. An example usage might look like:\n\n     ::\n\n       $ tilecache_seed.py Zip_Codes\n       -118.12500,31.952162238,0.05\n       -121.46327,32.345345645,0.08\n       <Ctrl+D>\n\n... the seeding will then commence ...\n\nCleaning your TileCache\n=======================\n\nThe tilecache_clean.py utility will remove the least recently accessed\ntiles from a cache, down to a specified size.\n\nUsage\n-----\n    tilecache_clean.py [options] <cache_location>\n\nOptions\n-------\n    --version             show program's version number and exit\n    -h, --help            show this help message and exit\n    -s SIZE, --size=SIZE  Maximum cache size, in megabytes.\n    -e ENTRIES, --entries=ENTRIES\n                          Maximum cache entries. This limits the\n                          amount of memory that will be used to store\n                          information about tiles to remove.\n     \nNotes\n-----\nThe --entries option to tilecache_clean.py is optional, and is used to regulate\nhow much memory it uses to do its bookkeeping. The default value of 1 million\nwill hopefully keep RAM utilization under about 100M on a 32-bit x86 Linux\nmachine. If tilecache_clean.py doesn't appear to be keeping your disk cache\ndown to an appropriate size, try upping this value.\n\ntilecache_clean.py is designed to be run from a cronjob like so:\n\n  ::\n\n    00 05 * * *  /usr/local/bin/tilecache_clean.py -s500 /var/www/tilecache\n\nNote that, on non-POSIX operating systems (particularly Windows),\ntilecache_clean.py measures file sizes, and not disk usage. Because most\nfilesystems use entire file blocks for files smaller than a block, running du\n-s or similar on your disk cache after a cleaning may still return a total\ncache size larger than you expect.\n\nTroubleShooting\n===============\n\nOccasionally, for some reason, when using meta tiles, your server may leave\nbehind lock files. If this happens, there will be files in your cache directory\nwith the extension '.lck'. If you are seeing tiles not render and taking \nmultiple minutes before returning a 500 error, you may be suffering under\na stuck lock.\n\nRemoving all files with extension '.lck' from the cache directory will\nresolve this problem.\n\n\nSEE ALSO\n========\n\nmemcached(8)\n\nhttp://tilecache.org/\n\nhttp://openlayers.org/\n\nhttp://wiki.osgeo.org/index.php/WMS_Tiling_Client_Recommendation\n\nhttp://wiki.osgeo.org/index.php/Tile_Map_Service_Specification", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://tilecache.org/", "keywords": null, "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "TileCache", "package_url": "https://pypi.org/project/TileCache/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/TileCache/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://tilecache.org/"}, "release_url": "https://pypi.org/project/TileCache/2.11/", "requires_dist": null, "requires_python": null, "summary": "a web map tile caching system", "version": "2.11", "yanked": false, "html_description": "<div class=\"project-description\">\n            <table>\n<col>\n<col>\n<tbody>\n<tr><th>Author:</th>\n<td><a href=\"mailto:labs%40metacarta.com\">labs<span>@</span>metacarta<span>.</span>com</a></td></tr>\n<tr><th>Copyright:</th>\n<td>(c) 2006-2010 TileCache Contributors\nDistributed under the BSD license.</td></tr>\n<tr><th>Version:</th>\n<td>2.11</td></tr>\n<tr><th>Manual section:</th><td>8</td>\n</tr>\n<tr><th>Manual group:</th><td>GIS Utilities</td>\n</tr>\n</tbody>\n</table>\n<div id=\"description\">\n<h2>Description</h2>\n<p>TileCache is a BSD licensed tile caching mechanism.  The goal is to make it\neasy to set up a WMS or TMS frontend to any backend data services you might be\ninterested in, using a pluggable caching and rendering mechanism.</p>\n<p>TileCache was developed by MetaCarta Labs and released to the public under a\nBSD license.</p>\n<p>The TileCache was designed as a companion to OpenLayers, the BSD licensed web\nmapping interface. If you are using TileCache with OpenLayers, please read the\nsection of this readme which describes how to do so. For additional help with\nsetting up TileCache for use with OpenLayers, please feel free to stop by\n#openlayers, on irc.freenode.net, or to send email to\n<a href=\"mailto:tilecache%40openlayers.org\">tilecache<span>@</span>openlayers<span>.</span>org</a>.</p>\n</div>\n<div id=\"installing-tilecache\">\n<h2>Installing TileCache</h2>\n<p>Generally, installing TileCache is as simple as downloading a source\ndistribution and unpacking it. For installation systemwide, you can also use\nthe Python Package Index (aka pypi or Cheeseshop) to install TileCache. Simply\ntype easy_install TileCache. Once this is done, you will need to install the\nTileCache configuration file. A tool to do this is installed, called\ntilecache_install_config.py. A full installation likely looks like:</p>\n<pre>$ sudo easy_install TileCache\n...\nInstalled\n/usr/lib/python2.5/site-packages/TileCache-2.10-py2.5.egg\n\n$ sudo tilecache_install_config.py\nSuccessfully copied file\n/usr/lib/python2.5/site-packages/TileCache-2.10-py2.5.egg/TileCache/tilecache.cfg\nto /etc/tilecache.cfg.\n</pre>\n<p>TileCache is also available as a Debian package from the TileCache homepage.\nThis Debian package is designed to install on Debian etch releases or later.\nThis Debian package should install on Ubuntu Feisty or Gutsy.</p>\n</div>\n<div id=\"running-under-cgi\">\n<h2>Running Under CGI</h2>\n<ul>\n<li><p>Extract the code to some web directory (e.g. in /var/www).</p>\n</li>\n<li><p>Edit tilecache.cfg to point the DiskCache to the location you wish\nto cache tiles, and the layers to point to the map file or WMS\nserver you wish to cache. On Debian, this file is in /etc/tilecache.cfg\nby default.</p>\n</li>\n<li><p>Permit CGI execution in the TileCache directory.\nFor example, if TileCache is to be run with Apache, the\nfollowing must be added in your Apache configuration,\nwhere /var/www/tilecache is the directory resulting from\nthe code extraction. On Debian, this is typically /usr/lib/cgi-bin.</p>\n<pre>&lt;Directory /var/www/tilecache&gt;\n     AddHandler cgi-script .cgi\n     Options +ExecCGI\n&lt;/Directory&gt;\n</pre>\n</li>\n<li><p>Visit:</p>\n<p><a href=\"http://example.com/yourdir/tilecache.cgi?LAYERS=basic&amp;SERVICE=WMS\" rel=\"nofollow\">http://example.com/yourdir/tilecache.cgi?LAYERS=basic&amp;SERVICE=WMS</a>\n&amp;VERSION=1.1.1&amp;REQUEST=GetMap&amp;SRS=EPSG:4326&amp;BBOX=-180,-90,0,90\n&amp;WIDTH=256&amp;HEIGHT=256</p>\n</li>\n<li><p>Or visit:</p>\n<p><a href=\"http://example.com/yourdir/tilecache.cgi/1.0.0/basic/0/0/0.png\" rel=\"nofollow\">http://example.com/yourdir/tilecache.cgi/1.0.0/basic/0/0/0.png</a></p>\n</li>\n<li><p>If you see a tile you have set up your configuration correctly. Congrats!</p>\n</li>\n</ul>\n<div id=\"non-standard-python-location\">\n<h3>Non-standard Python Location</h3>\n<p>If your Python is not at /usr/bin/python on your system, you will need to\nchange the first line of tilecache.cgi to reference the location of your Python\nbinary. A common example is:</p>\n<blockquote>\n<pre>#!/usr/local/bin/python\n</pre>\n</blockquote>\n<p>Under Apache, you might see an error message like:</p>\n<blockquote>\n<pre>[Wed Mar 14 19:55:30 2007] [error] [client 127.0.0.1] (2)No such file or\n  directory: exec of '/www/tilecache.cgi' failed\n</pre>\n</blockquote>\n<p>to indicate this problem.</p>\n<p>You can typically locate where Python is installed on your system via the\ncommand which python.</p>\n<p>Windows users: If you are using Windows, you should change the first line\nof tilecache.cgi to read:</p>\n<blockquote>\n<pre>#!C:/Python/python.exe -u\n</pre>\n</blockquote>\n<p>C:/Python should match the location Python is installed under on your\nsystem. In Python 2.5, this location is C:/Python25 by default.</p>\n</div>\n</div>\n<div id=\"running-under-mod-python\">\n<h2>Running Under mod_python</h2>\n<ul>\n<li><p>Extract the code to some web directory (e.g. /var/www).</p>\n</li>\n<li><p>Edit tilecache.cfg to point the DiskCache to the location you wish\nto cache tiles, and the layers to point to the map file or WMS\nserver you wish to cache</p>\n</li>\n<li><p>Add the following to your Apache configuration, under a &lt;Directory&gt; heading:</p>\n<pre>AddHandler python-program .py\nPythonHandler TileCache.Service\nPythonOption TileCacheConfig /path/to/tilecache.cfg\n</pre>\n</li>\n<li><p>An example might look like:</p>\n<pre>&lt;Directory /var/www/tilecache/&gt;\n    AddHandler python-program .py\n    PythonHandler TileCache.Service\n    PythonOption TileCacheConfig /var/www/tilecache/tilecache.cfg\n&lt;/Directory&gt;\n</pre>\n</li>\n<li><p>In this example, /var/www/tilecache is the directory resulting from\nthe code extraction. If you\u2019ve installed this from a Debian package, the\nlocation of your .cfg file is probably /etc/tilecache.cfg.</p>\n</li>\n<li><p>Edit tilecache.cfg to point to the location of your \u2018Layers\u2019 directory,\nas demonstrated inside the default tilecache.cfg.</p>\n</li>\n<li><p>Visit one of the URLs described above, replacing tilecache.cgi with\ntilecache.py</p>\n</li>\n<li><p>If you see a tile you have set up your configuration correctly. Congrats!</p>\n</li>\n</ul>\n</div>\n<div id=\"running-standalone-under-wsgi\">\n<h2>Running Standalone under WSGI</h2>\n<p>TileCache as of version 1.4 comes with a standalone HTTP server which uses\nthe WSGI handler. This implementation depends on <em>Python Paste</em>, which can be\ndownloaded from:</p>\n<blockquote>\n<a href=\"http://cheeseshop.python.org/pypi/Paste\" rel=\"nofollow\">http://cheeseshop.python.org/pypi/Paste</a></blockquote>\n<p>For versions of Python earlier than 2.5, you will also need to install\nwsgiref:</p>\n<blockquote>\n<a href=\"http://cheeseshop.python.org/pypi/wsgiref\" rel=\"nofollow\">http://cheeseshop.python.org/pypi/wsgiref</a></blockquote>\n<p>Once you have all the prerequisites installed, simply run:</p>\n<blockquote>\n<pre>python tilecache_http_server.py\n</pre>\n</blockquote>\n<p>This will start a webserver listening on port 8080, after which you should\nbe able to open:</p>\n<blockquote>\n<pre>http://hostname:8080/1.0.0/basic/0/0/0.png\n</pre>\n</blockquote>\n<p>to see your first tile.</p>\n</div>\n<div id=\"running-under-fastcgi\">\n<h2>Running Under FastCGI</h2>\n<p>TileCache as of version 1.4 comes with a fastcgi implementation. In\norder to use this implementation, you will need to install flup, available\nfrom:</p>\n<blockquote>\n<a href=\"http://trac.saddi.com/flup\" rel=\"nofollow\">http://trac.saddi.com/flup</a></blockquote>\n<p>This implementation also depends on Python Paste, which can be downloaded\nfrom:</p>\n<blockquote>\n<a href=\"http://cheeseshop.python.org/pypi/Paste\" rel=\"nofollow\">http://cheeseshop.python.org/pypi/Paste</a></blockquote>\n<p>Once you have done this, you can configure your fastcgi server to use\ntilecache.fcgi.</p>\n<p>Configuring FastCGI is beyond the scope of this documentation.</p>\n</div>\n<div id=\"running-under-iis\">\n<h2>Running Under IIS</h2>\n<p>Installing TileCache for use with IIS requires some additional configuration.</p>\n<p>A nice document for setting up TileCache on IIS is available from Vish\u2019s\nweblog: <a href=\"http://viswaug.wordpress.com/2008/02/03/setting-up-tilecache-on-iis/\" rel=\"nofollow\">http://viswaug.wordpress.com/2008/02/03/setting-up-tilecache-on-iis/</a> .</p>\n</div>\n<div id=\"running-standalone-with-pastescript-and-cherrypy\">\n<h2>Running Standalone with PasteScript and CherryPy</h2>\n<p>One component of the CherryPy web framework is a pure Python, fast,\nHTTP/1.1-compliant, WSGI thread-pooled webserver.\nTo deploy Tilecache using this option you have to:</p>\n<blockquote>\n<ul>\n<li><p>Install prerequisites:</p>\n<blockquote>\n<p>easy_install PasteScript\neasy_install CherryPy</p>\n</blockquote>\n</li>\n<li><p>Create a deployment config file specifying the http server and the\napplication with options.  The format of the configuration file is\ndocumented here: <a href=\"http://pythonpaste.org/deploy/#the-config-file\" rel=\"nofollow\">http://pythonpaste.org/deploy/#the-config-file</a></p>\n</li>\n</ul>\n</blockquote>\n<p>Example configuration file follows. Copy the lines into tc.ini, tweak\nthe tilecache_config variable, run paster serve tc.ini and enjoy at\n<a href=\"http://127.0.0.1:5000/tc\" rel=\"nofollow\">http://127.0.0.1:5000/tc</a></p>\n<pre>[server:main]\n#tested with Paste#http and PasteScript#wsgiutils, PasteScript#twisted\nalso possible after installing dependencies\nuse = egg:PasteScript#cherrypy\nhost = 127.0.0.1\nport = 5000\n\n[composite:main]\nuse = egg:Paste#urlmap\n/tc = tilecache1\n\n[app:tilecache1]\nuse = egg:TileCache\ntilecache_config = tilecache.cfg\n</pre>\n</div>\n<div id=\"configuration\">\n<h2>Configuration</h2>\n<p>TileCache is configured by a config file, defaulting to tilecache.cfg.\nThere are several parameters to control TileCache layers that are applicable\nto all layers:</p>\n<blockquote>\n<dl>\n<dt>bbox</dt>\n<dd>The bounding box of the Layer. The resolutions array defaults\nto having resolutions which are equal to the bbox divided by\n512 (two standard tiles).</dd>\n<dt>debug</dt>\n<dd>Whether to send debug output to the error.log. Defaults to \u201cyes\u201d,\ncan be set to \u201cno\u201d</dd>\n<dt>description</dt>\n<dd>Layer description, used in some metadata responses. Default\nis blank.</dd>\n<dt>extension</dt>\n<dd>File extension of the layer. Used to request images from\nWMS servers, as well as when writing cache files.</dd>\n<dt>layers</dt>\n<dd>A string used to describe the layers. Typically passed directly\nto the renderer. The WMSLayer sends this in the HTTP request,\nand the MapServerLayer chooses which layer to render based on\nthis string. If no layer is provided, the layer name is used\nto fill this property.</dd>\n<dt>levels</dt>\n<dd>An integer, describing the number of \u2018zoom levels\u2019 or\nscales to support. Overridden by resolutions, if passed.</dd>\n<dt>mapfile</dt>\n<dd>The absolute file location of a mapfile. Required for\nMapServer and Mapnik layers.</dd>\n<dt>maxResolution</dt>\n<dd>The maximum resolution. If this is set, a resolutions\narray is automatically calculated up to a number of\nlevels controlled by the \u2018levels\u2019 option.</dd>\n<dt>metaTile</dt>\n<dd>set to \u201cyes\u201d to turn on metaTiling. This will request larger\ntiles, and split them up using the Python Imaging library.\nDefaults to \u201cno\u201d.</dd>\n<dt>metaBuffer</dt>\n<dd>an integer number of pixels to request around the outside\nof the rendered tile. This is good to combat edge effects\nin various map renderers. Defaults to 10.</dd>\n<dt>metaSize</dt>\n<dd>A comma seperated pair of integers, which is used to\ndetermine how many tiles should be rendered when using\nmetaTiling. Default is 5,5.</dd>\n<dt>resolutions</dt>\n<dd>Comma seperate list of resolutions you want the TileCache\ninstance to support.</dd>\n<dt>size</dt>\n<dd>Comma seperated set of integers, describing the width/height\nof the tiles. Defaults to 256,256</dd>\n<dt>srs</dt>\n<dd>String describing the SRS value. Default is \u201cEPSG:4326\u201d</dd>\n<dt>type</dt>\n<dd>The type of layer. Options are: WMSLayer, MapnikLayer, MapServerLayer,\nImageLayer</dd>\n<dt>url</dt>\n<dd>URL to use when requesting images from a remote WMS server. Required\nfor WMSLayer.</dd>\n<dt>watermarkImage</dt>\n<dd>The watermarkImage parameter is assigned on a per-layer basis.\nThis is a fully qualified path to an image you would like to apply to each\ntile. We recommend you use a watermark image the same size as your tiles.\nIf using the default tile size, you should use a 256x256 image.\nNOTE: Python Imaging Library DOES NOT support interlaced images.</dd>\n<dt>watermarkOpacity</dt>\n<dd>The watermarkOpacity parameter is assigned on a per-layer basis.\nThis configures the opacity of the watermark over the tile, it is a floating\npoint number between 0 and 1. Usage is optional and will otherwise default.</dd>\n<dt>extent_type</dt>\n<dd>Setting this to \u2018loose\u2019 will allow TileCache to generate tiles outside the\nmaximum bounding box. Useful for clients that don\u2019t know when to stop\nasking for tiles.</dd>\n<dt>tms_type</dt>\n<dd>Setting this to \u201cgoogle\u201d will cause tiles to switch vertical order (that\nis, following the Google style x/y pattern).</dd>\n</dl>\n</blockquote>\n</div>\n<div id=\"using-tilecache-with-openlayers\">\n<h2>Using TileCache With OpenLayers</h2>\n<p>To run OpenLayers with TileCache the URL passed to the OpenLayers.Layer.WMS\nconstructor must point to the TileCache script, i.e. tilecache.cgi or\ntilecache.py. As an example see the index.html file included in the TileCache\ndistribution.</p>\n<p>Note: index.html assumes TileCache is set up under CGI (see above). If you set\nup TileCache under mod_python you\u2019d need to slighly modify index.html: the URL\npassed to the OpenLayers.Layer.WMS constructor must point to the mod_python\nscript as opposed to the CGI script, so replace tilecache.cgi with\ntilecache.py. Similarly, you would need to edit this URL if you were to use\nTileCache with the standalone HTTP Server or FastCGI.</p>\n<p>The most important thing to do is to ensure that the OpenLayers Layer\nhas the same resolutions and bounding box as your TileCache layer. You can define\nthe resolutions in OpenLayers via the \u2018resolutions\u2019 option or the \u2018maxResolution\u2019\noption on the layer. The maxExtent should be defined to match the bbox parameter\nof the TileCache layer.</p>\n<p>If you are using TileCache for overlays, you should set the \u2018reproject\u2019 option\non the layer to \u2018false\u2019.</p>\n</div>\n<div id=\"using-tilecache-with-mapserver\">\n<h2>Using TileCache With MapServer</h2>\n<p>MapServer has a map level metadata option, labelcache_map_edge_buffer, which\nis set automatically by TileCache to the metaBuffer plus five when metaTiling\nis on, if it is not set in the mapfile.</p>\n<p>If you are using MetaTiling, be aware that MapServer generates interlaced\nPNG files, which PIL will not read. See\n<a href=\"http://www.mapserver.org/faq.html#why-doesn-t-pil-python-imaging-library-open-my-pngs\" rel=\"nofollow\">http://www.mapserver.org/faq.html#why-doesn-t-pil-python-imaging-library-open-my-pngs</a> on how to resolve this.</p>\n</div>\n<div id=\"using-with-python-mapscript\">\n<h2>Using With Python-Mapscript</h2>\n<p>Several users have reported cases where large mapfiles combined with\npython-mapscript has caused memory leaks, which eventually lead to\nsegfaults. If you are having problems with Apache/TileCache segfaults\nwhen using python-mapscript, then you should switch to using a WMS\nLayer instead of a MapServer Layer.</p>\n</div>\n<div id=\"seeding-your-tilecache\">\n<h2>Seeding your TileCache</h2>\n<p>The tilecache_seed.py utility will seed tiles in a cache automatically. You will\nneed to have TileCache set up in one of the previously described configurations.</p>\n<div id=\"usage\">\n<h3>Usage</h3>\n<blockquote>\ntilecache_seed.py [options] &lt;layer&gt; [&lt;zoom start&gt; &lt;zoom stop&gt;]</blockquote>\n</div>\n<div id=\"options\">\n<h3>Options</h3>\n<blockquote>\n<table>\n<col>\n<col>\n<tbody>\n<tr><td>\n<kbd><span class=\"option\">--version</span></kbd></td>\n<td>show program\u2019s version number and exit</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-h</span>, <span class=\"option\">--help</span></kbd></td>\n<td>show this help message and exit</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-f</span>, <span class=\"option\">--force</span></kbd></td>\n<td>force recreation of tiles even if they are already in\ncache</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-b <var>BBOX</var></span>, <span class=\"option\">--bbox=<var>BBOX</var></span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td>restrict to specified bounding box</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-p <var>PADDING</var></span>, <span class=\"option\">--pading=<var>PADDING</var></span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td>extra margin tiles to seed around target area.\nDefaults to 0 (some edge tiles might be missing).\nA value of 1 ensures all tiles will be created, but\nsome tiles may be wholly outside your bbox</td></tr>\n</tbody>\n</table>\n</blockquote>\n</div>\n<div id=\"arguments\">\n<h3>Arguments</h3>\n<blockquote>\n<dl>\n<dt>layer</dt>\n<dd>same layer name that is in the tilecache.cfg</dd>\n<dt>zoom start</dt>\n<dd>Zoom level to start the process</dd>\n<dt>zoom end</dt>\n<dd>Zoom level to end the process</dd>\n</dl>\n</blockquote>\n</div>\n<div id=\"seeding-by-center-point-and-radius\">\n<h3>Seeding by center point and radius</h3>\n<p>If called without zoom level arguments, tilecache_seed.py will assume\nthat it needs to read a list of points and radii from standard input,\nin the form:</p>\n<blockquote>\n<pre>&lt;lat&gt;,&lt;lon&gt;,&lt;radius&gt;\n&lt;lat&gt;,&lt;lon&gt;,&lt;radius&gt;\n&lt;lat&gt;,&lt;lon&gt;,&lt;radius&gt;\n&lt;lat&gt;,&lt;lon&gt;,&lt;radius&gt;\n&lt;ctrl + d&gt;\n</pre>\n</blockquote>\n<p>The format of this file is:</p>\n<blockquote>\n<dl>\n<dt>lon</dt>\n<dd>the position(s) to seed longitude</dd>\n<dt>lat</dt>\n<dd>the position(s) to seed latitude</dd>\n<dt>radius</dt>\n<dd>the radius around the lon/lat to seed in degrees</dd>\n</dl>\n</blockquote>\n</div>\n<div id=\"examples\">\n<h3>Examples</h3>\n<p>An example with zoom levels 5 through 12 and ~2 extra tiles around each zoom level would be like:</p>\n<blockquote>\n<pre>$ tilecache_seed.py Zip_Codes 5 12 \"-118.12500,31.952162238,-116.015625,34.3071438563\" 2\n</pre>\n</blockquote>\n<p>The bbox can be dropped and defaults to world lonlat(-180,-90,180,90):</p>\n<blockquote>\n<pre>$ tilecache_seed.py Zip_Codes 0 9\n</pre>\n</blockquote>\n<p>In center point/radius mode, the zoom level range is not specifiable from the\ncommand-line. An example usage might look like:</p>\n<blockquote>\n<pre>$ tilecache_seed.py Zip_Codes\n-118.12500,31.952162238,0.05\n-121.46327,32.345345645,0.08\n&lt;Ctrl+D&gt;\n</pre>\n</blockquote>\n<p>\u2026 the seeding will then commence \u2026</p>\n</div>\n</div>\n<div id=\"cleaning-your-tilecache\">\n<h2>Cleaning your TileCache</h2>\n<p>The tilecache_clean.py utility will remove the least recently accessed\ntiles from a cache, down to a specified size.</p>\n<div id=\"id1\">\n<h3>Usage</h3>\n<blockquote>\ntilecache_clean.py [options] &lt;cache_location&gt;</blockquote>\n</div>\n<div id=\"id2\">\n<h3>Options</h3>\n<blockquote>\n<table>\n<col>\n<col>\n<tbody>\n<tr><td>\n<kbd><span class=\"option\">--version</span></kbd></td>\n<td>show program\u2019s version number and exit</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-h</span>, <span class=\"option\">--help</span></kbd></td>\n<td>show this help message and exit</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-s <var>SIZE</var></span>, <span class=\"option\">--size=<var>SIZE</var></span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td>Maximum cache size, in megabytes.</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-e <var>ENTRIES</var></span>, <span class=\"option\">--entries=<var>ENTRIES</var></span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td>Maximum cache entries. This limits the\namount of memory that will be used to store\ninformation about tiles to remove.</td></tr>\n</tbody>\n</table>\n</blockquote>\n</div>\n<div id=\"notes\">\n<h3>Notes</h3>\n<p>The \u2013entries option to tilecache_clean.py is optional, and is used to regulate\nhow much memory it uses to do its bookkeeping. The default value of 1 million\nwill hopefully keep RAM utilization under about 100M on a 32-bit x86 Linux\nmachine. If tilecache_clean.py doesn\u2019t appear to be keeping your disk cache\ndown to an appropriate size, try upping this value.</p>\n<p>tilecache_clean.py is designed to be run from a cronjob like so:</p>\n<blockquote>\n<pre>00 05 * * *  /usr/local/bin/tilecache_clean.py -s500 /var/www/tilecache\n</pre>\n</blockquote>\n<p>Note that, on non-POSIX operating systems (particularly Windows),\ntilecache_clean.py measures file sizes, and not disk usage. Because most\nfilesystems use entire file blocks for files smaller than a block, running du\n-s or similar on your disk cache after a cleaning may still return a total\ncache size larger than you expect.</p>\n</div>\n</div>\n<div id=\"troubleshooting\">\n<h2>TroubleShooting</h2>\n<p>Occasionally, for some reason, when using meta tiles, your server may leave\nbehind lock files. If this happens, there will be files in your cache directory\nwith the extension \u2018.lck\u2019. If you are seeing tiles not render and taking\nmultiple minutes before returning a 500 error, you may be suffering under\na stuck lock.</p>\n<p>Removing all files with extension \u2018.lck\u2019 from the cache directory will\nresolve this problem.</p>\n</div>\n<div id=\"see-also\">\n<h2>SEE ALSO</h2>\n<p>memcached(8)</p>\n<p><a href=\"http://tilecache.org/\" rel=\"nofollow\">http://tilecache.org/</a></p>\n<p><a href=\"http://openlayers.org/\" rel=\"nofollow\">http://openlayers.org/</a></p>\n<p><a href=\"http://wiki.osgeo.org/index.php/WMS_Tiling_Client_Recommendation\" rel=\"nofollow\">http://wiki.osgeo.org/index.php/WMS_Tiling_Client_Recommendation</a></p>\n<p><a href=\"http://wiki.osgeo.org/index.php/Tile_Map_Service_Specification\" rel=\"nofollow\">http://wiki.osgeo.org/index.php/Tile_Map_Service_Specification</a></p>\n</div>\n\n          </div>"}, "last_serial": 213407, "releases": {"2.0": [{"comment_text": "", "digests": {"md5": "4e98c81922d0322900b7235e57348c6a", "sha256": "d22161f59c6130c01820079b96812f11283d209c6ffe88c811c5b9a8511220c9"}, "downloads": -1, "filename": "TileCache-2.0-py2.3.egg", "has_sig": false, "md5_digest": "4e98c81922d0322900b7235e57348c6a", "packagetype": "bdist_egg", "python_version": "2.3", "requires_python": null, "size": 201331, "upload_time": "2007-12-22T16:04:55", "upload_time_iso_8601": "2007-12-22T16:04:55Z", "url": "https://files.pythonhosted.org/packages/17/f5/1750852ceb079bc6bb04870e1b357bedfe67170dd5aa9b71ae3569c0d724/TileCache-2.0-py2.3.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "71bc27f54276cb6fa012cd509fbab072", "sha256": "b5b8dd7feb406b00f732544acfa6f0c634eb038fcec10ca1db3c037587d1536a"}, "downloads": -1, "filename": "TileCache-2.0-py2.4.egg", "has_sig": false, "md5_digest": "71bc27f54276cb6fa012cd509fbab072", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 74355, "upload_time": "2007-12-22T16:04:23", "upload_time_iso_8601": "2007-12-22T16:04:23Z", "url": "https://files.pythonhosted.org/packages/b7/32/1610818905fae60b6cef3b00b58e063d8c6143e7d2f08507b9e6078374ed/TileCache-2.0-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "c576d0f9532e96f8d8add7daf219b220", "sha256": "07e0daf5bfc12a4bf3cfaa864ce3659f4ac791a3c82e2320a77e736507c05940"}, "downloads": -1, "filename": "TileCache-2.0-py2.5.egg", "has_sig": false, "md5_digest": "c576d0f9532e96f8d8add7daf219b220", "packagetype": "bdist_egg", "python_version": "2.5", "requires_python": null, "size": 73584, "upload_time": "2007-12-22T16:01:46", "upload_time_iso_8601": "2007-12-22T16:01:46Z", "url": "https://files.pythonhosted.org/packages/f9/8a/c36c2b30a129c43bc855ec7fbcf98b420a38107e8278151a806673eb1af3/TileCache-2.0-py2.5.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "09f2e59eb7e72aa0c8ab985c8d84d7d9", "sha256": "af2be15036c64a6cec9773ed333ac980ad7f41cf1d2aeeba149cb7dfefc3fcc4"}, "downloads": -1, "filename": "TileCache-2.0.tar.gz", "has_sig": false, "md5_digest": "09f2e59eb7e72aa0c8ab985c8d84d7d9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 54063, "upload_time": "2007-12-22T16:01:37", "upload_time_iso_8601": "2007-12-22T16:01:37Z", "url": "https://files.pythonhosted.org/packages/30/1a/e4dfa82b817198e605cddf9ef4d7b61821b1e0e5b5a6e8f4d0ea6dd415ef/TileCache-2.0.tar.gz", "yanked": false}], "2.01": [{"comment_text": "", "digests": {"md5": "3c1eb23f7daa76d942693e69e3d25b0e", "sha256": "606f71239df77466f185e16e833517816e826637933c2e9584a0a77189aa0ff8"}, "downloads": -1, "filename": "TileCache-2.01-py2.3.egg", "has_sig": false, "md5_digest": "3c1eb23f7daa76d942693e69e3d25b0e", "packagetype": "bdist_egg", "python_version": "2.3", "requires_python": null, "size": 273578, "upload_time": "2007-12-27T13:54:48", "upload_time_iso_8601": "2007-12-27T13:54:48Z", "url": "https://files.pythonhosted.org/packages/2a/59/6db9fea807f7c0a3a7caddf0903eca3f1119c229911c16fd6ac567513dd2/TileCache-2.01-py2.3.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "2a0384fcdc84aff5e0824f3ce6c47074", "sha256": "871202d7f5a3fcd673d9738374818067522ad162616b3bc0f158c6fc315536a8"}, "downloads": -1, "filename": "TileCache-2.01-py2.4.egg", "has_sig": false, "md5_digest": "2a0384fcdc84aff5e0824f3ce6c47074", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 92420, "upload_time": "2007-12-27T13:51:55", "upload_time_iso_8601": "2007-12-27T13:51:55Z", "url": "https://files.pythonhosted.org/packages/e4/32/e163ec4b0ae888735c0c811df04ed64351e595c809afd6b93fe0b32bb7c4/TileCache-2.01-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "e043e2f31acf3383e29f5a33a83d3d7c", "sha256": "2dfd3ae97568033da4f93f5d4dab827ffac9eee974c357fc229f9ca4ed799086"}, "downloads": -1, "filename": "TileCache-2.01-py2.5.egg", "has_sig": false, "md5_digest": "e043e2f31acf3383e29f5a33a83d3d7c", "packagetype": "bdist_egg", "python_version": "2.5", "requires_python": null, "size": 91351, "upload_time": "2007-12-27T13:53:52", "upload_time_iso_8601": "2007-12-27T13:53:52Z", "url": "https://files.pythonhosted.org/packages/53/0d/de3e20cdb8a1e3f0d74bfb56fd2824373e1fb63814143582bce999c4cf12/TileCache-2.01-py2.5.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "ac591c3d7b61348914fa130e7b4e64a2", "sha256": "0938c08bef33447d771288ba739b14da851ef4b4128c1b11ccf7a91fe189aeda"}, "downloads": -1, "filename": "TileCache-2.01.tar.gz", "has_sig": false, "md5_digest": "ac591c3d7b61348914fa130e7b4e64a2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 57764, "upload_time": "2007-12-27T13:52:33", "upload_time_iso_8601": "2007-12-27T13:52:33Z", "url": "https://files.pythonhosted.org/packages/74/3b/d43ec518b389bce58c9ef1821c1dc18b245b243af6093bc904929eb0059c/TileCache-2.01.tar.gz", "yanked": false}], "2.10": [{"comment_text": "", "digests": {"md5": "d93717b2ff8aef8524c90086d3f2d10a", "sha256": "d377dc6eed77071422c5e39b18fdaa723bc2b93d555ee95cda1b04b3e0d1278f"}, "downloads": -1, "filename": "tilecache-2.10.tar.gz", "has_sig": false, "md5_digest": "d93717b2ff8aef8524c90086d3f2d10a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 63189, "upload_time": "2009-12-17T22:46:08", "upload_time_iso_8601": "2009-12-17T22:46:08.958752Z", "url": "https://files.pythonhosted.org/packages/09/7a/a862f06a01f5dd97f11b29b4fa6cbd6c7a94c33321e1e66a136bd089f57b/tilecache-2.10.tar.gz", "yanked": false}], "2.11": [{"comment_text": "", "digests": {"md5": "ff0153452a9e88a8d00405fb58d689df", "sha256": "b46dc2731a19b40e3207cf3c9b43ea59b899a622a586aaa3c397c3b5aa00f887"}, "downloads": -1, "filename": "tilecache-2.11.tar.gz", "has_sig": false, "md5_digest": "ff0153452a9e88a8d00405fb58d689df", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 68705, "upload_time": "2010-10-15T13:39:23", "upload_time_iso_8601": "2010-10-15T13:39:23.862028Z", "url": "https://files.pythonhosted.org/packages/16/5a/009dab189543c15c4df88e03fad36b0b9fa9832d9b2e8f6be233cb5d0065/tilecache-2.11.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ff0153452a9e88a8d00405fb58d689df", "sha256": "b46dc2731a19b40e3207cf3c9b43ea59b899a622a586aaa3c397c3b5aa00f887"}, "downloads": -1, "filename": "tilecache-2.11.tar.gz", "has_sig": false, "md5_digest": "ff0153452a9e88a8d00405fb58d689df", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 68705, "upload_time": "2010-10-15T13:39:23", "upload_time_iso_8601": "2010-10-15T13:39:23.862028Z", "url": "https://files.pythonhosted.org/packages/16/5a/009dab189543c15c4df88e03fad36b0b9fa9832d9b2e8f6be233cb5d0065/tilecache-2.11.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:53:46 2020"}