{"info": {"author": "Pierre Mdawar", "author_email": "pierre@mdawar.dev", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Intended Audience :: Information Technology", "Intended Audience :: System Administrators", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: System :: Monitoring"], "description": "# Python RQ Prometheus Exporter\n\n[![PyPI](https://img.shields.io/pypi/v/rq-exporter)](https://pypi.org/project/rq-exporter/)\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/rq-exporter)](https://pypi.org/project/rq-exporter/)\n[![Libraries.io dependency status for latest release](https://img.shields.io/librariesio/release/pypi/rq-exporter)](https://libraries.io/pypi/rq-exporter)\n[![Docker Image Size (latest semver)](https://img.shields.io/docker/image-size/mdawar/rq-exporter?sort=semver)](https://hub.docker.com/r/mdawar/rq-exporter)\n\nPrometheus metrics exporter for Python RQ (Redis Queue) job queue library.\n\n[![Grafana dashboard](https://grafana.com/api/dashboards/12196/images/8017/image)](https://grafana.com/grafana/dashboards/12196)\n\n## Installation\n\nInstall the Python package:\n\n```console\n$ # Install the latest version\n$ pip install rq-exporter\n$ # Or you can install a specific version\n$ pip install rq-exporter==1.0.0\n```\n\nOr download the [Docker image](https://hub.docker.com/r/mdawar/rq-exporter):\n\n```console\n$ # Pull the latest image\n$ docker pull mdawar/rq-exporter\n$ # Or you can pull a specific version\n$ docker pull mdawar/rq-exporter:v1.0.0\n```\n\nThe releases are available as [Docker image tags](https://hub.docker.com/r/mdawar/rq-exporter/tags).\n\n## Usage\n\n**Python package**:\n\n```console\n$ # Start the exporter on port 9726\n$ rq-exporter\n$ # Start the exporter on a specific port and host (Default: 0.0.0.0:9726)\n$ rq-exporter --host localhost --port 8080\n$ # By default the exporter will connect to Redis on `localhost` port `6379`\n$ # You can specify a Redis URL\n$ rq-exporter --redis-url redis://:123456@redis_host:6379/0\n$ # Or specific Redis options (host, port, db, password)\n$ rq-exporter --redis-host 192.168.1.10 --redis-port 6380 --redis-pass 123456 --redis-db 1\n$ # You can also specify a password file path (eg: mounted Docker secret)\n$ rq-exporter --redis-pass-file /run/secrets/redis_pass\n```\n\n**Docker image**:\n\n```console\n$ # Run the exporter and publish the port 9726 on the host\n$ docker run -it -p 9726:9726 rq-exporter\n$ # Use the -d option to run the container in the background (detached)\n$ docker run -d -p 9726:9726 rq-exporter\n$ # All the command line arguments will be passed to rq-exporter\n$ docker run -it -p 9726:9726 rq-exporter --redis-host redis --redis-pass 123456\n$ # You can also configure the exporter using environment variables\n$ docker run -it -p 9726:9726 -e RQ_REDIS_HOST=redis -e RQ_REDIS_PASS=123456 rq-exporter\n```\n\n## Grafana Dashboard\n\nAn example [**Grafana** dashboard](https://grafana.com/grafana/dashboards/12196) is available with the ID `12196` for showcasing this exporter's metrics.\n\nYou can also find the [JSON file of the dashboard](https://github.com/mdawar/rq-exporter/tree/master/grafana/rq-dashboard.json) in this repository.\n\n**Note**:\n\n- This is just an example dashboard, feel free to use it as a base for your custom dashboard\n- You need to adjust the color thresholds to suit your needs for the job status percentage *singlestat* panels\n- Some panels might seem duplicated providing percentages and current values, these are just for showcasing the PromQL queries\n\n## Exported Metrics\n\n**RQ metrics:**\n\nMetric Name | Type | Labels | Description\n----------- | ---- | ------ | -----------\n`rq_workers` | Gauge | `name`, `queues`, `state` | RQ workers\n`rq_jobs` | Gauge | `queue`, `status` | RQ jobs by queue and status\n\n**Request processing metrics:**\n\nMetric Name | Type | Description\n----------- | ---- | -----------\n`rq_request_processing_seconds_count` | Summary | Number of times the RQ data were collected\n`rq_request_processing_seconds_sum` | Summary | Total sum of time spent collecting RQ data\n`rq_request_processing_seconds_created` | Gauge | Time created at (`time.time()` return value)\n\nExample:\n\n```bash\n# HELP rq_request_processing_seconds Time spent collecting RQ data\n# TYPE rq_request_processing_seconds summary\nrq_request_processing_seconds_count 1.0\nrq_request_processing_seconds_sum 0.029244607000009637\n# TYPE rq_request_processing_seconds_created gauge\nrq_request_processing_seconds_created 1.5878023726039658e+09\n# HELP rq_workers RQ workers\n# TYPE rq_workers gauge\nrq_workers{name=\"40d33ed9541644d79373765e661b7f38\", queues=\"default\", state=\"idle\"} 1.0\nrq_workers{name=\"fe9a433575e04685a53e4794b2eaeea9\", queues=\"high,default,low\", state=\"busy\"} 1.0\n# HELP rq_jobs RQ jobs by state\n# TYPE rq_jobs gauge\nrq_jobs{queue=\"default\", status=\"queued\"} 2.0\nrq_jobs{queue=\"default\", status=\"started\"} 1.0\nrq_jobs{queue=\"default\", status=\"finished\"} 5.0\nrq_jobs{queue=\"default\", status=\"failed\"} 1.0\nrq_jobs{queue=\"default\", status=\"deferred\"} 1.0\nrq_jobs{queue=\"default\", status=\"scheduled\"} 2.0\n```\n\n## Configuration\n\nYou can configure the exporter using command line arguments or environment variables:\n\nCLI Argument | Env Variable | Default Value | Description\n------------ | ------------ | ------------- | -----------\n`--host` | `RQ_EXPORTER_HOST` | `0.0.0.0` | Serve the exporter on this host\n`-p`, `--port` | `RQ_EXPORTER_PORT` | `9726` | Serve the exporter on this port\n`--redis-url` | `RQ_REDIS_URL` | `None` | Redis URL in the form `redis://:[password]@[host]:[port]/[db]`\n`--redis-host` | `RQ_REDIS_HOST` | `localhost` | Redis host name\n`--redis-port` | `RQ_REDIS_PORT` | `6379` | Redis port number\n`--redis-db` | `RQ_REDIS_DB` | `0` | Redis database number\n`--redis-pass` | `RQ_REDIS_PASS` | `None` | Redis password\n`--redis-pass-file` | `RQ_REDIS_PASS_FILE` | `None` |  Redis password file path (e.g. Path of a mounted Docker secret)\n`--log-level` | `RQ_EXPORTER_LOG_LEVEL` | `INFO` | Logging level\n`--log-format` | `RQ_EXPORTER_LOG_FORMAT` | `[%(asctime)s] [%(name)s] [%(levelname)s]: %(message)s` | Logging handler format string\n`--log-datefmt` | `RQ_EXPORTER_LOG_DATEFMT` | `%Y-%m-%d %H:%M:%S` | Logging date/time format string\n\n**Note**:\n\n* When Redis URL is set using `--redis-url` or `RQ_REDIS_URL` the other Redis options will be ignored\n* When the Redis password is set using `--redis-pass-file` or `RQ_REDIS_PASS_FILE`, then `--redis-pass` and `RQ_REDIS_PASS` will be ignored\n\n## Serving with Gunicorn\n\nThe WSGI application can be created using the `rq_exporter.create_app()` function:\n\n```console\n$ gunicorn \"rq_exporter:create_app()\" -b 0.0.0.0:9726 --log-level info\n```\n\nExample [`Dockerfile`](https://github.com/mdawar/rq-exporter/blob/master/Dockerfile.gunicorn) to create a **Docker** image to serve the application with **Gunicorn**\n\n```dockerfile\nFROM mdawar/rq-exporter:latest\n\nUSER root\n\nRUN pip install --no-cache-dir gunicorn\n\nUSER exporter\n\nENTRYPOINT [\"gunicorn\", \"rq_exporter:create_app()\"]\n\nCMD [\"-b\", \"0.0.0.0:9726\", \"--threads\", \"2\", \"--log-level\", \"info\", \"--keep-alive\", \"3\"]\n```\n\n**Note about concurrency**:\n\nThe exporter is going to work without any problems with multiple workers but you will get different values for these metrics:\n\n* `rq_request_processing_seconds_count`\n* `rq_request_processing_seconds_sum`\n* `rq_request_processing_seconds_created`\n\nThis is fine if you don't care about these metrics, these are only for measuring the count and time processing the RQ data, so the other RQ metrics are not going to be affected.\n\nBut you can still use multiple threads with 1 worker process to handle multiple concurrent requests:\n\n```console\n$ gunicorn \"rq_exporter:create_app()\" -b 0.0.0.0:9726 --threads 2\n```\n\n## Building the Docker Image\n\n```console\n$ # Build the docker image and tag it rq-exporter:latest\n$ docker build -t rq-exporter .\n```\n\nThe image can also be built using `docker-compose`:\n\n```console\n$ docker-compose build\n```\n\nCheck out the `docker-compose.yml` file for usage example.\n\n## Development\n\nTo start a full development environment with **RQ** workers, **Prometheus** and **Grafana**:\n\n```console\n$ docker-compose up\n$ # If you want to start multiple workers use the --compatibility flag\n$ # which will make docker-compose read the `deploy` section and start multiple replicas\n$ docker-compose --compatibility up\n```\n\nYou can access the services on these ports on your local machine:\n\n- **RQ exporter**: `9726`\n- **Redis**: `6379`\n- **RQ Dashboard**: `9181`\n- **Prometheus**: `9090`\n- **Grafana**: `3000` (Login using `admin:admin`)\n\nYou can specify the services that you want to start by their name in the `docker-compose.yml` file:\n\n```console\n$ # Example starting only the `rq_exporter` and `redis` services\n$ docker-compose up rq_exporter redis\n```\n\nTo run more workers and enqueue more jobs you can scale the `worker` and `enqueue` services:\n\n```console\n$ # Run 5 workers\n$ docker-compose up -d --scale worker=5\n$ # Enqueue more jobs\n$ # Scale the enqueue service and the workers\n$ docker-compose up -d --scale worker=5 --scale enqueue=2\n```\n\nTo cleanup after development:\n\n```console\n$ # Use -v to remove volumes\n$ docker-compose down -v\n```\n\n**Note**: If you don't have `docker-compose` installed follow the [installation](https://docs.docker.com/compose/install/) instructions on the official website.\n\nIf you want to use the package manually:\n\n```console\n$ # Clone the repository\n$ git clone <REPO_URL>\n$ # Change to the project directory\n$ cd rq-exporter\n$ # Create a new virtualenv\n$ python -m venv /path/to/env\n$ # Activate the environment\n$ source /path/to/env/bin/activate\n$ # Install the requirements\n$ pip install -r requirements.txt\n$ # Start the exporter on port 9726\n$ python -m rq_exporter\n$ # You can configure the exporter using command line arguments\n$ python -m rq_exporter --port 8080\n```\n\n## Running the Tests\n\n```console\n$ python -m unittest\n```\n\n## Contributing\n\n1. Fork the [repository](https://github.com/mdawar/rq-exporter)\n2. Clone the forked repository `git clone <URL>`\n3. Create a new feature branch `git checkout -b <BRANCH_NAME>`\n4. Make changes and add tests if needed and commit your changes `git commit -am \"Your commit message\"`\n5. Push the new branch to Github `git push origin <BRANCH_NAME>`\n6. Create a pull request\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mdawar/rq-exporter", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "rq-exporter", "package_url": "https://pypi.org/project/rq-exporter/", "platform": "", "project_url": "https://pypi.org/project/rq-exporter/", "project_urls": {"Homepage": "https://github.com/mdawar/rq-exporter"}, "release_url": "https://pypi.org/project/rq-exporter/1.1.0/", "requires_dist": ["rq (==1.3.0)", "redis (==3.4.1)", "prometheus-client (==0.7.1)"], "requires_python": ">=3.6", "summary": "Prometheus exporter for Python RQ (Redis Queue)", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Python RQ Prometheus Exporter</h1>\n<p><a href=\"https://pypi.org/project/rq-exporter/\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/387d43c29d9cc45560320735269aa4dd2ec0590f/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f72712d6578706f72746572\"></a>\n<a href=\"https://pypi.org/project/rq-exporter/\" rel=\"nofollow\"><img alt=\"PyPI - Python Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/672ff244147fdd923f5d7ed9a78b3704912a6432/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f72712d6578706f72746572\"></a>\n<a href=\"https://libraries.io/pypi/rq-exporter\" rel=\"nofollow\"><img alt=\"Libraries.io dependency status for latest release\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5e0ceab2cfea2fc21a3409a328e9f34c7cca16b5/68747470733a2f2f696d672e736869656c64732e696f2f6c6962726172696573696f2f72656c656173652f707970692f72712d6578706f72746572\"></a>\n<a href=\"https://hub.docker.com/r/mdawar/rq-exporter\" rel=\"nofollow\"><img alt=\"Docker Image Size (latest semver)\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e5da8193dfa265cacdf44a6182805470b4ffb194/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f696d6167652d73697a652f6d64617761722f72712d6578706f727465723f736f72743d73656d766572\"></a></p>\n<p>Prometheus metrics exporter for Python RQ (Redis Queue) job queue library.</p>\n<p><a href=\"https://grafana.com/grafana/dashboards/12196\" rel=\"nofollow\"><img alt=\"Grafana dashboard\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fc6a7a9e5c78c8fc0afb4f90af59129d597881fa/68747470733a2f2f67726166616e612e636f6d2f6170692f64617368626f617264732f31323139362f696d616765732f383031372f696d616765\"></a></p>\n<h2>Installation</h2>\n<p>Install the Python package:</p>\n<pre><span class=\"gp\">$</span> <span class=\"c1\"># Install the latest version</span>\n<span class=\"gp\">$</span> pip install rq-exporter\n<span class=\"gp\">$</span> <span class=\"c1\"># Or you can install a specific version</span>\n<span class=\"gp\">$</span> pip install rq-exporter<span class=\"o\">==</span><span class=\"m\">1</span>.0.0\n</pre>\n<p>Or download the <a href=\"https://hub.docker.com/r/mdawar/rq-exporter\" rel=\"nofollow\">Docker image</a>:</p>\n<pre><span class=\"gp\">$</span> <span class=\"c1\"># Pull the latest image</span>\n<span class=\"gp\">$</span> docker pull mdawar/rq-exporter\n<span class=\"gp\">$</span> <span class=\"c1\"># Or you can pull a specific version</span>\n<span class=\"gp\">$</span> docker pull mdawar/rq-exporter:v1.0.0\n</pre>\n<p>The releases are available as <a href=\"https://hub.docker.com/r/mdawar/rq-exporter/tags\" rel=\"nofollow\">Docker image tags</a>.</p>\n<h2>Usage</h2>\n<p><strong>Python package</strong>:</p>\n<pre><span class=\"gp\">$</span> <span class=\"c1\"># Start the exporter on port 9726</span>\n<span class=\"gp\">$</span> rq-exporter\n<span class=\"gp\">$</span> <span class=\"c1\"># Start the exporter on a specific port and host (Default: 0.0.0.0:9726)</span>\n<span class=\"gp\">$</span> rq-exporter --host localhost --port <span class=\"m\">8080</span>\n<span class=\"gp\">$</span> <span class=\"c1\"># By default the exporter will connect to Redis on `localhost` port `6379`</span>\n<span class=\"gp\">$</span> <span class=\"c1\"># You can specify a Redis URL</span>\n<span class=\"gp\">$</span> rq-exporter --redis-url redis://:123456@redis_host:6379/0\n<span class=\"gp\">$</span> <span class=\"c1\"># Or specific Redis options (host, port, db, password)</span>\n<span class=\"gp\">$</span> rq-exporter --redis-host <span class=\"m\">192</span>.168.1.10 --redis-port <span class=\"m\">6380</span> --redis-pass <span class=\"m\">123456</span> --redis-db <span class=\"m\">1</span>\n<span class=\"gp\">$</span> <span class=\"c1\"># You can also specify a password file path (eg: mounted Docker secret)</span>\n<span class=\"gp\">$</span> rq-exporter --redis-pass-file /run/secrets/redis_pass\n</pre>\n<p><strong>Docker image</strong>:</p>\n<pre><span class=\"gp\">$</span> <span class=\"c1\"># Run the exporter and publish the port 9726 on the host</span>\n<span class=\"gp\">$</span> docker run -it -p <span class=\"m\">9726</span>:9726 rq-exporter\n<span class=\"gp\">$</span> <span class=\"c1\"># Use the -d option to run the container in the background (detached)</span>\n<span class=\"gp\">$</span> docker run -d -p <span class=\"m\">9726</span>:9726 rq-exporter\n<span class=\"gp\">$</span> <span class=\"c1\"># All the command line arguments will be passed to rq-exporter</span>\n<span class=\"gp\">$</span> docker run -it -p <span class=\"m\">9726</span>:9726 rq-exporter --redis-host redis --redis-pass <span class=\"m\">123456</span>\n<span class=\"gp\">$</span> <span class=\"c1\"># You can also configure the exporter using environment variables</span>\n<span class=\"gp\">$</span> docker run -it -p <span class=\"m\">9726</span>:9726 -e <span class=\"nv\">RQ_REDIS_HOST</span><span class=\"o\">=</span>redis -e <span class=\"nv\">RQ_REDIS_PASS</span><span class=\"o\">=</span><span class=\"m\">123456</span> rq-exporter\n</pre>\n<h2>Grafana Dashboard</h2>\n<p>An example <a href=\"https://grafana.com/grafana/dashboards/12196\" rel=\"nofollow\"><strong>Grafana</strong> dashboard</a> is available with the ID <code>12196</code> for showcasing this exporter's metrics.</p>\n<p>You can also find the <a href=\"https://github.com/mdawar/rq-exporter/tree/master/grafana/rq-dashboard.json\" rel=\"nofollow\">JSON file of the dashboard</a> in this repository.</p>\n<p><strong>Note</strong>:</p>\n<ul>\n<li>This is just an example dashboard, feel free to use it as a base for your custom dashboard</li>\n<li>You need to adjust the color thresholds to suit your needs for the job status percentage <em>singlestat</em> panels</li>\n<li>Some panels might seem duplicated providing percentages and current values, these are just for showcasing the PromQL queries</li>\n</ul>\n<h2>Exported Metrics</h2>\n<p><strong>RQ metrics:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Metric Name</th>\n<th>Type</th>\n<th>Labels</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>rq_workers</code></td>\n<td>Gauge</td>\n<td><code>name</code>, <code>queues</code>, <code>state</code></td>\n<td>RQ workers</td>\n</tr>\n<tr>\n<td><code>rq_jobs</code></td>\n<td>Gauge</td>\n<td><code>queue</code>, <code>status</code></td>\n<td>RQ jobs by queue and status</td>\n</tr></tbody></table>\n<p><strong>Request processing metrics:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Metric Name</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>rq_request_processing_seconds_count</code></td>\n<td>Summary</td>\n<td>Number of times the RQ data were collected</td>\n</tr>\n<tr>\n<td><code>rq_request_processing_seconds_sum</code></td>\n<td>Summary</td>\n<td>Total sum of time spent collecting RQ data</td>\n</tr>\n<tr>\n<td><code>rq_request_processing_seconds_created</code></td>\n<td>Gauge</td>\n<td>Time created at (<code>time.time()</code> return value)</td>\n</tr></tbody></table>\n<p>Example:</p>\n<pre><span class=\"c1\"># HELP rq_request_processing_seconds Time spent collecting RQ data</span>\n<span class=\"c1\"># TYPE rq_request_processing_seconds summary</span>\nrq_request_processing_seconds_count <span class=\"m\">1</span>.0\nrq_request_processing_seconds_sum <span class=\"m\">0</span>.029244607000009637\n<span class=\"c1\"># TYPE rq_request_processing_seconds_created gauge</span>\nrq_request_processing_seconds_created <span class=\"m\">1</span>.5878023726039658e+09\n<span class=\"c1\"># HELP rq_workers RQ workers</span>\n<span class=\"c1\"># TYPE rq_workers gauge</span>\nrq_workers<span class=\"o\">{</span><span class=\"nv\">name</span><span class=\"o\">=</span><span class=\"s2\">\"40d33ed9541644d79373765e661b7f38\"</span>, <span class=\"nv\">queues</span><span class=\"o\">=</span><span class=\"s2\">\"default\"</span>, <span class=\"nv\">state</span><span class=\"o\">=</span><span class=\"s2\">\"idle\"</span><span class=\"o\">}</span> <span class=\"m\">1</span>.0\nrq_workers<span class=\"o\">{</span><span class=\"nv\">name</span><span class=\"o\">=</span><span class=\"s2\">\"fe9a433575e04685a53e4794b2eaeea9\"</span>, <span class=\"nv\">queues</span><span class=\"o\">=</span><span class=\"s2\">\"high,default,low\"</span>, <span class=\"nv\">state</span><span class=\"o\">=</span><span class=\"s2\">\"busy\"</span><span class=\"o\">}</span> <span class=\"m\">1</span>.0\n<span class=\"c1\"># HELP rq_jobs RQ jobs by state</span>\n<span class=\"c1\"># TYPE rq_jobs gauge</span>\nrq_jobs<span class=\"o\">{</span><span class=\"nv\">queue</span><span class=\"o\">=</span><span class=\"s2\">\"default\"</span>, <span class=\"nv\">status</span><span class=\"o\">=</span><span class=\"s2\">\"queued\"</span><span class=\"o\">}</span> <span class=\"m\">2</span>.0\nrq_jobs<span class=\"o\">{</span><span class=\"nv\">queue</span><span class=\"o\">=</span><span class=\"s2\">\"default\"</span>, <span class=\"nv\">status</span><span class=\"o\">=</span><span class=\"s2\">\"started\"</span><span class=\"o\">}</span> <span class=\"m\">1</span>.0\nrq_jobs<span class=\"o\">{</span><span class=\"nv\">queue</span><span class=\"o\">=</span><span class=\"s2\">\"default\"</span>, <span class=\"nv\">status</span><span class=\"o\">=</span><span class=\"s2\">\"finished\"</span><span class=\"o\">}</span> <span class=\"m\">5</span>.0\nrq_jobs<span class=\"o\">{</span><span class=\"nv\">queue</span><span class=\"o\">=</span><span class=\"s2\">\"default\"</span>, <span class=\"nv\">status</span><span class=\"o\">=</span><span class=\"s2\">\"failed\"</span><span class=\"o\">}</span> <span class=\"m\">1</span>.0\nrq_jobs<span class=\"o\">{</span><span class=\"nv\">queue</span><span class=\"o\">=</span><span class=\"s2\">\"default\"</span>, <span class=\"nv\">status</span><span class=\"o\">=</span><span class=\"s2\">\"deferred\"</span><span class=\"o\">}</span> <span class=\"m\">1</span>.0\nrq_jobs<span class=\"o\">{</span><span class=\"nv\">queue</span><span class=\"o\">=</span><span class=\"s2\">\"default\"</span>, <span class=\"nv\">status</span><span class=\"o\">=</span><span class=\"s2\">\"scheduled\"</span><span class=\"o\">}</span> <span class=\"m\">2</span>.0\n</pre>\n<h2>Configuration</h2>\n<p>You can configure the exporter using command line arguments or environment variables:</p>\n<table>\n<thead>\n<tr>\n<th>CLI Argument</th>\n<th>Env Variable</th>\n<th>Default Value</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>--host</code></td>\n<td><code>RQ_EXPORTER_HOST</code></td>\n<td><code>0.0.0.0</code></td>\n<td>Serve the exporter on this host</td>\n</tr>\n<tr>\n<td><code>-p</code>, <code>--port</code></td>\n<td><code>RQ_EXPORTER_PORT</code></td>\n<td><code>9726</code></td>\n<td>Serve the exporter on this port</td>\n</tr>\n<tr>\n<td><code>--redis-url</code></td>\n<td><code>RQ_REDIS_URL</code></td>\n<td><code>None</code></td>\n<td>Redis URL in the form <code>redis://:[password]@[host]:[port]/[db]</code></td>\n</tr>\n<tr>\n<td><code>--redis-host</code></td>\n<td><code>RQ_REDIS_HOST</code></td>\n<td><code>localhost</code></td>\n<td>Redis host name</td>\n</tr>\n<tr>\n<td><code>--redis-port</code></td>\n<td><code>RQ_REDIS_PORT</code></td>\n<td><code>6379</code></td>\n<td>Redis port number</td>\n</tr>\n<tr>\n<td><code>--redis-db</code></td>\n<td><code>RQ_REDIS_DB</code></td>\n<td><code>0</code></td>\n<td>Redis database number</td>\n</tr>\n<tr>\n<td><code>--redis-pass</code></td>\n<td><code>RQ_REDIS_PASS</code></td>\n<td><code>None</code></td>\n<td>Redis password</td>\n</tr>\n<tr>\n<td><code>--redis-pass-file</code></td>\n<td><code>RQ_REDIS_PASS_FILE</code></td>\n<td><code>None</code></td>\n<td>Redis password file path (e.g. Path of a mounted Docker secret)</td>\n</tr>\n<tr>\n<td><code>--log-level</code></td>\n<td><code>RQ_EXPORTER_LOG_LEVEL</code></td>\n<td><code>INFO</code></td>\n<td>Logging level</td>\n</tr>\n<tr>\n<td><code>--log-format</code></td>\n<td><code>RQ_EXPORTER_LOG_FORMAT</code></td>\n<td><code>[%(asctime)s] [%(name)s] [%(levelname)s]: %(message)s</code></td>\n<td>Logging handler format string</td>\n</tr>\n<tr>\n<td><code>--log-datefmt</code></td>\n<td><code>RQ_EXPORTER_LOG_DATEFMT</code></td>\n<td><code>%Y-%m-%d %H:%M:%S</code></td>\n<td>Logging date/time format string</td>\n</tr></tbody></table>\n<p><strong>Note</strong>:</p>\n<ul>\n<li>When Redis URL is set using <code>--redis-url</code> or <code>RQ_REDIS_URL</code> the other Redis options will be ignored</li>\n<li>When the Redis password is set using <code>--redis-pass-file</code> or <code>RQ_REDIS_PASS_FILE</code>, then <code>--redis-pass</code> and <code>RQ_REDIS_PASS</code> will be ignored</li>\n</ul>\n<h2>Serving with Gunicorn</h2>\n<p>The WSGI application can be created using the <code>rq_exporter.create_app()</code> function:</p>\n<pre><span class=\"gp\">$</span> gunicorn <span class=\"s2\">\"rq_exporter:create_app()\"</span> -b <span class=\"m\">0</span>.0.0.0:9726 --log-level info\n</pre>\n<p>Example <a href=\"https://github.com/mdawar/rq-exporter/blob/master/Dockerfile.gunicorn\" rel=\"nofollow\"><code>Dockerfile</code></a> to create a <strong>Docker</strong> image to serve the application with <strong>Gunicorn</strong></p>\n<pre><span class=\"k\">FROM</span> <span class=\"s\">mdawar/rq-exporter:latest</span>\n\n<span class=\"k\">USER</span><span class=\"s\"> root</span>\n\n<span class=\"k\">RUN</span> pip install --no-cache-dir gunicorn\n\n<span class=\"k\">USER</span><span class=\"s\"> exporter</span>\n\n<span class=\"k\">ENTRYPOINT</span> <span class=\"p\">[</span><span class=\"s2\">\"gunicorn\"</span><span class=\"p\">,</span> <span class=\"s2\">\"rq_exporter:create_app()\"</span><span class=\"p\">]</span>\n\n<span class=\"k\">CMD</span> <span class=\"p\">[</span><span class=\"s2\">\"-b\"</span><span class=\"p\">,</span> <span class=\"s2\">\"0.0.0.0:9726\"</span><span class=\"p\">,</span> <span class=\"s2\">\"--threads\"</span><span class=\"p\">,</span> <span class=\"s2\">\"2\"</span><span class=\"p\">,</span> <span class=\"s2\">\"--log-level\"</span><span class=\"p\">,</span> <span class=\"s2\">\"info\"</span><span class=\"p\">,</span> <span class=\"s2\">\"--keep-alive\"</span><span class=\"p\">,</span> <span class=\"s2\">\"3\"</span><span class=\"p\">]</span>\n</pre>\n<p><strong>Note about concurrency</strong>:</p>\n<p>The exporter is going to work without any problems with multiple workers but you will get different values for these metrics:</p>\n<ul>\n<li><code>rq_request_processing_seconds_count</code></li>\n<li><code>rq_request_processing_seconds_sum</code></li>\n<li><code>rq_request_processing_seconds_created</code></li>\n</ul>\n<p>This is fine if you don't care about these metrics, these are only for measuring the count and time processing the RQ data, so the other RQ metrics are not going to be affected.</p>\n<p>But you can still use multiple threads with 1 worker process to handle multiple concurrent requests:</p>\n<pre><span class=\"gp\">$</span> gunicorn <span class=\"s2\">\"rq_exporter:create_app()\"</span> -b <span class=\"m\">0</span>.0.0.0:9726 --threads <span class=\"m\">2</span>\n</pre>\n<h2>Building the Docker Image</h2>\n<pre><span class=\"gp\">$</span> <span class=\"c1\"># Build the docker image and tag it rq-exporter:latest</span>\n<span class=\"gp\">$</span> docker build -t rq-exporter .\n</pre>\n<p>The image can also be built using <code>docker-compose</code>:</p>\n<pre><span class=\"gp\">$</span> docker-compose build\n</pre>\n<p>Check out the <code>docker-compose.yml</code> file for usage example.</p>\n<h2>Development</h2>\n<p>To start a full development environment with <strong>RQ</strong> workers, <strong>Prometheus</strong> and <strong>Grafana</strong>:</p>\n<pre><span class=\"gp\">$</span> docker-compose up\n<span class=\"gp\">$</span> <span class=\"c1\"># If you want to start multiple workers use the --compatibility flag</span>\n<span class=\"gp\">$</span> <span class=\"c1\"># which will make docker-compose read the `deploy` section and start multiple replicas</span>\n<span class=\"gp\">$</span> docker-compose --compatibility up\n</pre>\n<p>You can access the services on these ports on your local machine:</p>\n<ul>\n<li><strong>RQ exporter</strong>: <code>9726</code></li>\n<li><strong>Redis</strong>: <code>6379</code></li>\n<li><strong>RQ Dashboard</strong>: <code>9181</code></li>\n<li><strong>Prometheus</strong>: <code>9090</code></li>\n<li><strong>Grafana</strong>: <code>3000</code> (Login using <code>admin:admin</code>)</li>\n</ul>\n<p>You can specify the services that you want to start by their name in the <code>docker-compose.yml</code> file:</p>\n<pre><span class=\"gp\">$</span> <span class=\"c1\"># Example starting only the `rq_exporter` and `redis` services</span>\n<span class=\"gp\">$</span> docker-compose up rq_exporter redis\n</pre>\n<p>To run more workers and enqueue more jobs you can scale the <code>worker</code> and <code>enqueue</code> services:</p>\n<pre><span class=\"gp\">$</span> <span class=\"c1\"># Run 5 workers</span>\n<span class=\"gp\">$</span> docker-compose up -d --scale <span class=\"nv\">worker</span><span class=\"o\">=</span><span class=\"m\">5</span>\n<span class=\"gp\">$</span> <span class=\"c1\"># Enqueue more jobs</span>\n<span class=\"gp\">$</span> <span class=\"c1\"># Scale the enqueue service and the workers</span>\n<span class=\"gp\">$</span> docker-compose up -d --scale <span class=\"nv\">worker</span><span class=\"o\">=</span><span class=\"m\">5</span> --scale <span class=\"nv\">enqueue</span><span class=\"o\">=</span><span class=\"m\">2</span>\n</pre>\n<p>To cleanup after development:</p>\n<pre><span class=\"gp\">$</span> <span class=\"c1\"># Use -v to remove volumes</span>\n<span class=\"gp\">$</span> docker-compose down -v\n</pre>\n<p><strong>Note</strong>: If you don't have <code>docker-compose</code> installed follow the <a href=\"https://docs.docker.com/compose/install/\" rel=\"nofollow\">installation</a> instructions on the official website.</p>\n<p>If you want to use the package manually:</p>\n<pre><span class=\"gp\">$</span> <span class=\"c1\"># Clone the repository</span>\n<span class=\"gp\">$</span> git clone &lt;REPO_URL&gt;\n<span class=\"gp\">$</span> <span class=\"c1\"># Change to the project directory</span>\n<span class=\"gp\">$</span> <span class=\"nb\">cd</span> rq-exporter\n<span class=\"gp\">$</span> <span class=\"c1\"># Create a new virtualenv</span>\n<span class=\"gp\">$</span> python -m venv /path/to/env\n<span class=\"gp\">$</span> <span class=\"c1\"># Activate the environment</span>\n<span class=\"gp\">$</span> <span class=\"nb\">source</span> /path/to/env/bin/activate\n<span class=\"gp\">$</span> <span class=\"c1\"># Install the requirements</span>\n<span class=\"gp\">$</span> pip install -r requirements.txt\n<span class=\"gp\">$</span> <span class=\"c1\"># Start the exporter on port 9726</span>\n<span class=\"gp\">$</span> python -m rq_exporter\n<span class=\"gp\">$</span> <span class=\"c1\"># You can configure the exporter using command line arguments</span>\n<span class=\"gp\">$</span> python -m rq_exporter --port <span class=\"m\">8080</span>\n</pre>\n<h2>Running the Tests</h2>\n<pre><span class=\"gp\">$</span> python -m unittest\n</pre>\n<h2>Contributing</h2>\n<ol>\n<li>Fork the <a href=\"https://github.com/mdawar/rq-exporter\" rel=\"nofollow\">repository</a></li>\n<li>Clone the forked repository <code>git clone &lt;URL&gt;</code></li>\n<li>Create a new feature branch <code>git checkout -b &lt;BRANCH_NAME&gt;</code></li>\n<li>Make changes and add tests if needed and commit your changes <code>git commit -am \"Your commit message\"</code></li>\n<li>Push the new branch to Github <code>git push origin &lt;BRANCH_NAME&gt;</code></li>\n<li>Create a pull request</li>\n</ol>\n\n          </div>"}, "last_serial": 7120754, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "9305e843cbb2e1ff02ba218fb6c80173", "sha256": "d1b1c8a50486e4868be3b2b93ca23dd7d5e8df8fd25e3a24610d98ba2e5eddf7"}, "downloads": -1, "filename": "rq_exporter-1.0.0-py3.7.egg", "has_sig": false, "md5_digest": "9305e843cbb2e1ff02ba218fb6c80173", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": ">=3.5", "size": 13512, "upload_time": "2020-04-24T10:40:14", "upload_time_iso_8601": "2020-04-24T10:40:14.842785Z", "url": "https://files.pythonhosted.org/packages/fb/96/b08eab18b2b6b56683d0c837572cb68b55f77b4aa35b69c2a3462580abd6/rq_exporter-1.0.0-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "aa00c3a2d93d6caab3ef2600a99ff439", "sha256": "4b4987dc979f7f4b38de12bc8989bc144654ddc035a3b0f2c57c6259f326265e"}, "downloads": -1, "filename": "rq_exporter-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "aa00c3a2d93d6caab3ef2600a99ff439", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 8468, "upload_time": "2020-04-24T10:40:12", "upload_time_iso_8601": "2020-04-24T10:40:12.448383Z", "url": "https://files.pythonhosted.org/packages/4a/c7/8769fe8d1b4abb2a90da337a55315508fd5f0fcf9c593447c0e3b21ae043/rq_exporter-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2a0d6bcbc792c4e6719c1aba45def6f7", "sha256": "6fb69e5f8212c0a852ee1862de132d13637d337eea34d594c1696c2e6e3e55e0"}, "downloads": -1, "filename": "rq-exporter-1.0.0.tar.gz", "has_sig": false, "md5_digest": "2a0d6bcbc792c4e6719c1aba45def6f7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 6094, "upload_time": "2020-04-24T10:40:16", "upload_time_iso_8601": "2020-04-24T10:40:16.242424Z", "url": "https://files.pythonhosted.org/packages/6a/88/181247f381c192c11efc62e84a0d9331a27a5eb8fa3e289da735638fca0e/rq-exporter-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "954f839956a7388889cdcd9d16bf3b2f", "sha256": "00b7d0092c0b089146b339fc6163bc87d4863ac9bcf68574508fb79a92bf4e35"}, "downloads": -1, "filename": "rq_exporter-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "954f839956a7388889cdcd9d16bf3b2f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 9691, "upload_time": "2020-04-27T19:27:21", "upload_time_iso_8601": "2020-04-27T19:27:21.547648Z", "url": "https://files.pythonhosted.org/packages/00/29/73d0c2dae8825e4e365cb9c358a31fc8571085e15651bdd6dc8d614a7c0f/rq_exporter-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "09789e4de3d3893f59cb51e1ed713dca", "sha256": "7970ee5c38997ca1107dd9de0fce3cce796c3fcd07282871238b30f850cc6a31"}, "downloads": -1, "filename": "rq-exporter-1.0.1.tar.gz", "has_sig": false, "md5_digest": "09789e4de3d3893f59cb51e1ed713dca", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10901, "upload_time": "2020-04-27T19:27:22", "upload_time_iso_8601": "2020-04-27T19:27:22.583694Z", "url": "https://files.pythonhosted.org/packages/b3/09/77b23bde3c77dc78387f9c118285844b8840840121d7b9f0f85233f69c70/rq-exporter-1.0.1.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "17064a9bec1d79a967fa86e3104dd798", "sha256": "5a71dc9e8a10947f3e8144cece26346dd1b403bbcb3642c42beeb5e1fe8eeab0"}, "downloads": -1, "filename": "rq_exporter-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "17064a9bec1d79a967fa86e3104dd798", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 11297, "upload_time": "2020-04-28T14:23:48", "upload_time_iso_8601": "2020-04-28T14:23:48.102854Z", "url": "https://files.pythonhosted.org/packages/d3/88/526a64e134d01a24de4f042816fd100d477ab2c33fb15f6ee33c9f978365/rq_exporter-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6673fdb0df9c7df7a39794302247efad", "sha256": "6c9eb35826fa5f21eaabc6ecfbbbdbfd1afc9dbecdff414d120d497c6d990a64"}, "downloads": -1, "filename": "rq-exporter-1.1.0.tar.gz", "has_sig": false, "md5_digest": "6673fdb0df9c7df7a39794302247efad", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12596, "upload_time": "2020-04-28T14:23:49", "upload_time_iso_8601": "2020-04-28T14:23:49.113397Z", "url": "https://files.pythonhosted.org/packages/0e/9a/c309169ecdab4c1839e761e086fa84f8bef033cfa74e182b7e41095f0ee9/rq-exporter-1.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "17064a9bec1d79a967fa86e3104dd798", "sha256": "5a71dc9e8a10947f3e8144cece26346dd1b403bbcb3642c42beeb5e1fe8eeab0"}, "downloads": -1, "filename": "rq_exporter-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "17064a9bec1d79a967fa86e3104dd798", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 11297, "upload_time": "2020-04-28T14:23:48", "upload_time_iso_8601": "2020-04-28T14:23:48.102854Z", "url": "https://files.pythonhosted.org/packages/d3/88/526a64e134d01a24de4f042816fd100d477ab2c33fb15f6ee33c9f978365/rq_exporter-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6673fdb0df9c7df7a39794302247efad", "sha256": "6c9eb35826fa5f21eaabc6ecfbbbdbfd1afc9dbecdff414d120d497c6d990a64"}, "downloads": -1, "filename": "rq-exporter-1.1.0.tar.gz", "has_sig": false, "md5_digest": "6673fdb0df9c7df7a39794302247efad", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12596, "upload_time": "2020-04-28T14:23:49", "upload_time_iso_8601": "2020-04-28T14:23:49.113397Z", "url": "https://files.pythonhosted.org/packages/0e/9a/c309169ecdab4c1839e761e086fa84f8bef033cfa74e182b7e41095f0ee9/rq-exporter-1.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:00:48 2020"}