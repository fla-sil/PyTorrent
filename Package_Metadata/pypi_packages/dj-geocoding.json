{"info": {"author": "Ben Lopatin", "author_email": "ben@wellfire.co", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3"], "description": "============\ndj-geocoding\n============\n\n.. image:: https://travis-ci.org/bennylope/dj-geocoding.svg?branch=master\n    :target: https://travis-ci.org/bennylope/dj-geocoding\n\nDjango features for simple geocoding. Current support for the Geocodio geocoding service\n\nRead the full docs on `Read the Docs <http://dj-geocoding.readthedocs.org/en/latest/>`_.\n\nInstalling\n==========\n\nInstall dj-geocoding::\n\n    pip install dj-geocoding\n\nThen use it in a project::\n\n    import dj-geocoding\n\nAdd your geocoding service API credentials to your `settings.py` file::\n\n    GEOCODIO_API_KEY=\"SOMEAPIKEY\"\n\nModel\n=====\n\nUse the optional model mixin to your model if you aren't using PostGIS::\n\n    from dj_geocoding.models import GeoBase\n\n    class MyModel(GeoBase, models.Model):\n        pass\n\nThis adds the followng fields::\n\n    latitude = models.DecimalField(decimal_places=15, max_digits=18, null=True,\n            blank=True)\n    longitude = models.DecimalField(decimal_places=15, max_digits=18, null=True,\n            blank=True)\n\nAdds a geocode method::\n\n    def geocode(self, \\*args, \\**kwargs):\n        return geocode()\n\nYou should extend this in your model, providing the field(s) from which the\naddress will be pulled::\n\n    def geocode(self):\n        return super(MyModel, self).geocode('address')\n\nYou can choose the separator for providing a single address, too::\n\n    def geocode(self):\n        return super(MyModel, self).geocode('street_address', 'city', 'state',\n                seperator=\", \")\n\nAnd additional property attributes for the `point` attribute.\n\nBulk geocoding\n==============\n\nThe `bulk_geocode` function takes a queryset and geocodes its member objects.\n\n.. note::\n\n    The model *must* implement a point-type field that behaves like a\n    Point field.\n\nExample::\n\n    geocoded_qs = bulk_geocode(MyModel.objects.all())\n\nSpecifying the field name::\n\n    geocoded_qs = bulk_geocode(MyModel.objects.all(), field='point')\n\nManager\n-------\n\nThe manager class implements a subclassed `QuerySet` with a `geocode` method::\n\n    MyModel.objects.all().geocode()\n\nThis returns a queryset of the objects updated (or not) that fit within the\nlimits of the geocoding service. It is a convenient interface tot he\n`bulk_geocode` function.\n\nAdmin site\n==========\n\nThe `GeocodedFilter` filter can be used to filter locations in the admin based\non whether they have been geolocated or not.\n\nThe `GeolocateMixin` class can be added to your `ModelAdmin` definition to add\nthe `geocode_address` admin action. This adds the \"geocode address\" action to\nthe admin actions dropdown menu and then will allow you to geocode an entire\nqueryset from the admin.\n\n\n\n\nHistory\n-------\n\n0.2.1 (2014-12-02)\n++++++++++++++++++\n\n* Removes reliance on queryset `geocode` method in admin action\n* Adds docs\n\n0.2.0 (2014-09-08)\n++++++++++++++++++\n\n* Revise `has_geolocation` method, remove property status\n* Added list filter class `GeocodedFilter`\n\n0.1.1 (2014-08-26)\n++++++++++++++++++\n\n* Bug fix for handling single None value in _set_point\n\n0.1.0 (2014-08-26)\n++++++++++++++++++\n\n* First release on PyPI.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/bennylope/dj-geocoding", "keywords": "dj-geocoding", "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "dj-geocoding", "package_url": "https://pypi.org/project/dj-geocoding/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/dj-geocoding/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/bennylope/dj-geocoding"}, "release_url": "https://pypi.org/project/dj-geocoding/0.2.1/", "requires_dist": null, "requires_python": null, "summary": "Django integration for geocoding (using Geocodio)", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/bennylope/dj-geocoding\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/bennylope/dj-geocoding.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9072a154a5f98521be5f147e73bdb44d289a29ef/68747470733a2f2f7472617669732d63692e6f72672f62656e6e796c6f70652f646a2d67656f636f64696e672e7376673f6272616e63683d6d6173746572\"></a>\n<p>Django features for simple geocoding. Current support for the Geocodio geocoding service</p>\n<p>Read the full docs on <a href=\"http://dj-geocoding.readthedocs.org/en/latest/\" rel=\"nofollow\">Read the Docs</a>.</p>\n<div id=\"installing\">\n<h2>Installing</h2>\n<p>Install dj-geocoding:</p>\n<pre>pip install dj-geocoding\n</pre>\n<p>Then use it in a project:</p>\n<pre>import dj-geocoding\n</pre>\n<p>Add your geocoding service API credentials to your <cite>settings.py</cite> file:</p>\n<pre>GEOCODIO_API_KEY=\"SOMEAPIKEY\"\n</pre>\n</div>\n<div id=\"model\">\n<h2>Model</h2>\n<p>Use the optional model mixin to your model if you aren\u2019t using PostGIS:</p>\n<pre>from dj_geocoding.models import GeoBase\n\nclass MyModel(GeoBase, models.Model):\n    pass\n</pre>\n<p>This adds the followng fields:</p>\n<pre>latitude = models.DecimalField(decimal_places=15, max_digits=18, null=True,\n        blank=True)\nlongitude = models.DecimalField(decimal_places=15, max_digits=18, null=True,\n        blank=True)\n</pre>\n<p>Adds a geocode method:</p>\n<pre>def geocode(self, \\*args, \\**kwargs):\n    return geocode()\n</pre>\n<p>You should extend this in your model, providing the field(s) from which the\naddress will be pulled:</p>\n<pre>def geocode(self):\n    return super(MyModel, self).geocode('address')\n</pre>\n<p>You can choose the separator for providing a single address, too:</p>\n<pre>def geocode(self):\n    return super(MyModel, self).geocode('street_address', 'city', 'state',\n            seperator=\", \")\n</pre>\n<p>And additional property attributes for the <cite>point</cite> attribute.</p>\n</div>\n<div id=\"bulk-geocoding\">\n<h2>Bulk geocoding</h2>\n<p>The <cite>bulk_geocode</cite> function takes a queryset and geocodes its member objects.</p>\n<div>\n<p>Note</p>\n<p>The model <em>must</em> implement a point-type field that behaves like a\nPoint field.</p>\n</div>\n<p>Example:</p>\n<pre>geocoded_qs = bulk_geocode(MyModel.objects.all())\n</pre>\n<p>Specifying the field name:</p>\n<pre>geocoded_qs = bulk_geocode(MyModel.objects.all(), field='point')\n</pre>\n<div id=\"manager\">\n<h3>Manager</h3>\n<p>The manager class implements a subclassed <cite>QuerySet</cite> with a <cite>geocode</cite> method:</p>\n<pre>MyModel.objects.all().geocode()\n</pre>\n<p>This returns a queryset of the objects updated (or not) that fit within the\nlimits of the geocoding service. It is a convenient interface tot he\n<cite>bulk_geocode</cite> function.</p>\n</div>\n</div>\n<div id=\"admin-site\">\n<h2>Admin site</h2>\n<p>The <cite>GeocodedFilter</cite> filter can be used to filter locations in the admin based\non whether they have been geolocated or not.</p>\n<p>The <cite>GeolocateMixin</cite> class can be added to your <cite>ModelAdmin</cite> definition to add\nthe <cite>geocode_address</cite> admin action. This adds the \u201cgeocode address\u201d action to\nthe admin actions dropdown menu and then will allow you to geocode an entire\nqueryset from the admin.</p>\n<div id=\"history\">\n<h3>History</h3>\n<div id=\"id1\">\n<h4>0.2.1 (2014-12-02)</h4>\n<ul>\n<li>Removes reliance on queryset <cite>geocode</cite> method in admin action</li>\n<li>Adds docs</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h4>0.2.0 (2014-09-08)</h4>\n<ul>\n<li>Revise <cite>has_geolocation</cite> method, remove property status</li>\n<li>Added list filter class <cite>GeocodedFilter</cite></li>\n</ul>\n</div>\n<div id=\"id3\">\n<h4>0.1.1 (2014-08-26)</h4>\n<ul>\n<li>Bug fix for handling single None value in _set_point</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h4>0.1.0 (2014-08-26)</h4>\n<ul>\n<li>First release on PyPI.</li>\n</ul>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1328810, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "c99e52ce44278838a9d4e63e4c4b3f0a", "sha256": "6843c008c9f0f1ae73653c5a38da838be90891ca7fc7baa437536f9a5f5b1980"}, "downloads": -1, "filename": "dj-geocoding-0.1.0.tar.gz", "has_sig": false, "md5_digest": "c99e52ce44278838a9d4e63e4c4b3f0a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6743, "upload_time": "2014-08-26T18:14:13", "upload_time_iso_8601": "2014-08-26T18:14:13.395726Z", "url": "https://files.pythonhosted.org/packages/ae/37/bfb8831e22875909f0f71bede037e2dcceddb97d81119478b8472258ba24/dj-geocoding-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "a9f81e7189c408ebd9f7547430e658d2", "sha256": "89aa458139db3844f3075d8e0169218fbe2feac00c6c19253e83fb728b4b09a1"}, "downloads": -1, "filename": "dj-geocoding-0.2.0.tar.gz", "has_sig": false, "md5_digest": "a9f81e7189c408ebd9f7547430e658d2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7362, "upload_time": "2014-09-08T20:16:33", "upload_time_iso_8601": "2014-09-08T20:16:33.102292Z", "url": "https://files.pythonhosted.org/packages/b2/fb/828a02e43b7a57c07f0dc45d748fc3301055d00a7448baa7af0604de7adc/dj-geocoding-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "1ea37ed5d81eb881dfde21e6a8ddb071", "sha256": "70d65ab60c916dea2dadc6694156e74b06b8e9cc5ff01c6e2a5f72bd9701f5d7"}, "downloads": -1, "filename": "dj-geocoding-0.2.1.tar.gz", "has_sig": false, "md5_digest": "1ea37ed5d81eb881dfde21e6a8ddb071", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7451, "upload_time": "2014-12-02T20:55:10", "upload_time_iso_8601": "2014-12-02T20:55:10.123874Z", "url": "https://files.pythonhosted.org/packages/16/5f/6cd266a53d626eb48bc73067c69e5461fe866b2e9afb3f73ac0dfd2fb64d/dj-geocoding-0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1ea37ed5d81eb881dfde21e6a8ddb071", "sha256": "70d65ab60c916dea2dadc6694156e74b06b8e9cc5ff01c6e2a5f72bd9701f5d7"}, "downloads": -1, "filename": "dj-geocoding-0.2.1.tar.gz", "has_sig": false, "md5_digest": "1ea37ed5d81eb881dfde21e6a8ddb071", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7451, "upload_time": "2014-12-02T20:55:10", "upload_time_iso_8601": "2014-12-02T20:55:10.123874Z", "url": "https://files.pythonhosted.org/packages/16/5f/6cd266a53d626eb48bc73067c69e5461fe866b2e9afb3f73ac0dfd2fb64d/dj-geocoding-0.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:35 2020"}