{"info": {"author": "Eric Wong", "author_email": "ericwong@zju.edu.cn", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "![version](https://img.shields.io/pypi/v/ibm935.svg) ![license](https://img.shields.io/pypi/l/ibm935.svg)\n\n# IBM935\nThe codec `ibm935` is not yet officially supported. This package is designed for conversion between `unicode` and `ibm935`.\n\n## Installation\nUsing `pip`:\n```bash\n$ pip install ibm935 \n```\n\nOr manually download the archive and run the command after extracting the stuff inside:\n```bash\n$ python setup.py install\n```\n\n## Usage\nBefore using this codec, import the module: \n```python\nimport ibm935\n```\n\nThen we can convert `unicode` strings into `ibm935` codec as usual:\n```python\n# Python 2\nencoded_bytes = u\"\u6211\u7231Python\u8fd9\u4e48\u7f8e\u597d\u7684\u8bed\u8a00\uff01\".encode(\"ibm935\")\ndecoded_string = encoded_bytes.decode(\"ibm935\")\n\n# Python 3 - the prefix `u` can be omitted\nencoded_bytes = \"\u6211\u7231Python\u8fd9\u4e48\u7f8e\u597d\u7684\u8bed\u8a00\uff01\".encode(\"ibm935\")\ndecoded_string = encoded_bytes.decode(\"ibm935\")\n``` \n\nWe can also write files using this codec:\n```python\nwith open(\"ibm935.txt\", \"w\", encoding=\"ibm935\") as f:\n    f.write(\"\u6211\u7231Python\uff01\")\n```\n\nNote:\n* This package is not yet fully tested.\n* There is a tough situation where writing a file with separate `words`(double-byte) causes redundant bytes like `\\x0f\\x0e`.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/littlefisher/ibm935", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "ibm935", "package_url": "https://pypi.org/project/ibm935/", "platform": "", "project_url": "https://pypi.org/project/ibm935/", "project_urls": {"Homepage": "https://github.com/littlefisher/ibm935"}, "release_url": "https://pypi.org/project/ibm935/0.2.1/", "requires_dist": null, "requires_python": "", "summary": "Supports encoding conversion between `unicode` and `ibm935` in Python", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><img alt=\"version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/84b1e5829270e4e65218e5114a541d6857032903/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f69626d3933352e737667\"> <img alt=\"license\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f89a3380284ab0286aece10c574cde818e42c0c8/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f69626d3933352e737667\"></p>\n<h1>IBM935</h1>\n<p>The codec <code>ibm935</code> is not yet officially supported. This package is designed for conversion between <code>unicode</code> and <code>ibm935</code>.</p>\n<h2>Installation</h2>\n<p>Using <code>pip</code>:</p>\n<pre>$ pip install ibm935 \n</pre>\n<p>Or manually download the archive and run the command after extracting the stuff inside:</p>\n<pre>$ python setup.py install\n</pre>\n<h2>Usage</h2>\n<p>Before using this codec, import the module:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">ibm935</span>\n</pre>\n<p>Then we can convert <code>unicode</code> strings into <code>ibm935</code> codec as usual:</p>\n<pre><span class=\"c1\"># Python 2</span>\n<span class=\"n\">encoded_bytes</span> <span class=\"o\">=</span> <span class=\"sa\">u</span><span class=\"s2\">\"\u6211\u7231Python\u8fd9\u4e48\u7f8e\u597d\u7684\u8bed\u8a00\uff01\"</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"s2\">\"ibm935\"</span><span class=\"p\">)</span>\n<span class=\"n\">decoded_string</span> <span class=\"o\">=</span> <span class=\"n\">encoded_bytes</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"s2\">\"ibm935\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Python 3 - the prefix `u` can be omitted</span>\n<span class=\"n\">encoded_bytes</span> <span class=\"o\">=</span> <span class=\"s2\">\"\u6211\u7231Python\u8fd9\u4e48\u7f8e\u597d\u7684\u8bed\u8a00\uff01\"</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"s2\">\"ibm935\"</span><span class=\"p\">)</span>\n<span class=\"n\">decoded_string</span> <span class=\"o\">=</span> <span class=\"n\">encoded_bytes</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"s2\">\"ibm935\"</span><span class=\"p\">)</span>\n</pre>\n<p>We can also write files using this codec:</p>\n<pre><span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"ibm935.txt\"</span><span class=\"p\">,</span> <span class=\"s2\">\"w\"</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s2\">\"ibm935\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s2\">\"\u6211\u7231Python\uff01\"</span><span class=\"p\">)</span>\n</pre>\n<p>Note:</p>\n<ul>\n<li>This package is not yet fully tested.</li>\n<li>There is a tough situation where writing a file with separate <code>words</code>(double-byte) causes redundant bytes like <code>\\x0f\\x0e</code>.</li>\n</ul>\n\n          </div>"}, "last_serial": 4477668, "releases": {"0.1.4": [{"comment_text": "", "digests": {"md5": "95404ab32261983ec495d7781d6e3c13", "sha256": "956d8fb2f3821599d5c5b6721583d5f24696e03c216fa62806171a717774b88e"}, "downloads": -1, "filename": "ibm935-0.1.4.tar.gz", "has_sig": false, "md5_digest": "95404ab32261983ec495d7781d6e3c13", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 55585, "upload_time": "2018-11-11T02:44:47", "upload_time_iso_8601": "2018-11-11T02:44:47.023690Z", "url": "https://files.pythonhosted.org/packages/12/3c/2163dd5986a3e082c82e9a6d3a4b74ea48c077d525fb1a823cdc4f78a80a/ibm935-0.1.4.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "9216bd07c4ee5ee55d471493291dc522", "sha256": "2f24b21a28a5f783d7df18eb34b79d2362bbe58cec7a0fa985b2e4e7ab43ad5c"}, "downloads": -1, "filename": "ibm935-0.2.1.tar.gz", "has_sig": false, "md5_digest": "9216bd07c4ee5ee55d471493291dc522", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40066, "upload_time": "2018-11-12T14:56:19", "upload_time_iso_8601": "2018-11-12T14:56:19.223158Z", "url": "https://files.pythonhosted.org/packages/05/7c/427cadd1827d996f998e3d58db1387abd0a4142a4a5ebc47e8614b8e8369/ibm935-0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9216bd07c4ee5ee55d471493291dc522", "sha256": "2f24b21a28a5f783d7df18eb34b79d2362bbe58cec7a0fa985b2e4e7ab43ad5c"}, "downloads": -1, "filename": "ibm935-0.2.1.tar.gz", "has_sig": false, "md5_digest": "9216bd07c4ee5ee55d471493291dc522", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40066, "upload_time": "2018-11-12T14:56:19", "upload_time_iso_8601": "2018-11-12T14:56:19.223158Z", "url": "https://files.pythonhosted.org/packages/05/7c/427cadd1827d996f998e3d58db1387abd0a4142a4a5ebc47e8614b8e8369/ibm935-0.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:49:14 2020"}