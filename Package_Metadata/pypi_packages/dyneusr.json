{"info": {"author": "Caleb Geniesse", "author_email": "geniesse@stanford.edu", "bugtrack_url": null, "classifiers": ["Intended Audience :: Science/Research", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering :: Information Analysis", "Topic :: Scientific/Engineering :: Visualization"], "description": "\n\n<p align=\"center\">\n<a href=\"https://braindynamicslab.github.io/dyneusr/\">\n<img src=\"https://raw.githubusercontent.com/braindynamicslab/dyneusr/master/docs/assets/logo.png\" height=\"250\">\n</a>\n</p>\n\n\n<p align=\"center\">\n<a href=\"https://braindynamicslab.github.io/dyneusr/\">\n<img src=\"https://raw.githubusercontent.com/braindynamicslab/dyneusr/master/docs/assets/haxby_decoding_mapper_stages.png\">\n</a>\n</p>\n\n\n\n## **Dynamical Neuroimaging Spatiotemporal Representations**\n\n[![https://www.singularity-hub.org/static/img/hosted-singularity--hub-%23e32929.svg](https://www.singularity-hub.org/static/img/hosted-singularity--hub-%23e32929.svg)](https://singularity-hub.org/collections/4218)\n\n[DyNeuSR](https://braindynamicslab.github.io/dyneusr/) is a Python visualization library for topological representations of neuroimaging data.\n\nDyNeuSR was designed specifically for working with shape graphs produced by the Mapper algorithm from topological data analysis (TDA), as described in the papers \"[Generating dynamical neuroimaging spatiotemporal representations (DyNeuSR) using topological data analysis](https://www.mitpressjournals.org/doi/abs/10.1162/netn_a_00093)\" (Geniesse et al., 2019) and \"[Towards a new approach to reveal dynamical organization of the brain using topological data analysis](https://www.nature.com/articles/s41467-018-03664-4)\" (Saggar et al., 2018). Check out this [blog post](https://bdl.stanford.edu/blog/tda-cme-paper/) for more about the initial work that inspired the development of DyNeuSR. \n\nDeveloped with neuroimaging data analysis in mind, DyNeuSR connects existing implementations of Mapper (e.g. [KeplerMapper](https://kepler-mapper.scikit-tda.org)) with network analysis tools (e.g. [NetworkX](https://networkx.github.io/)) and other neuroimaging data visualization libraries (e.g. [Nilearn](https://nilearn.github.io/)) and  provides a high-level interface for interacting with and manipulating shape graph representations of neuroimaging data and relating these representations back to neurophysiology.\n\nDyNeuSR also provides an interactive web interface for visualizing and exploring shape graphs. To see this visual interface in action, check out the [demos](https://braindynamicslab.github.io/dyneusr/demo/).\n\n\n\n\n## **Demos**\n\n- [Trefoil knot](https://braindynamicslab.github.io/dyneusr/demo/trefoil-knot/) ([code](https://github.com/braindynamicslab/dyneusr/blob/master/docs/demo/trefoil-knot/trefoil_knot.py))\n- [Trefoil knot (custom layouts)](https://braindynamicslab.github.io/dyneusr/demo/trefoil-knot/) ([code](https://github.com/braindynamicslab/dyneusr/blob/master/docs/demo/trefoil-knot-custom-layouts/trefoil_knot_custom_layouts.py))\n- [Haxby fMRI data (t-SNE lens)](https://braindynamicslab.github.io/dyneusr/demo/haxby-tsne/) ([code](https://github.com/braindynamicslab/dyneusr/blob/master/docs/demo/haxby-tsne/haxby_tsne.py))\n- [Haxby fMRI data (UMAP lens)](https://braindynamicslab.github.io/dyneusr/demo/haxby-umap/) ([code](https://github.com/braindynamicslab/dyneusr/blob/master/docs/demo/haxby-umap/haxby_umap.py))\n- [Haxby fMRI data (supervised UMAP lens)](https://braindynamicslab.github.io/dyneusr/demo/haxby-umap-supervised/) ([code](https://github.com/braindynamicslab/dyneusr/blob/master/docs/demo/haxby-umap-supervised/haxby_umap_supervised.py))\n\n\n## **Related Projects** \n\n- [DyNeuSR Fire](https://braindynamicslab.github.io/dyneusr-fire/) is a new project that provides a command line interface for DyNeuSR. It wraps `kmapper` and `dyneusr` into a single pipeline, and uses the [Python Fire](https://github.com/google/python-fire) library to automatically generate a simple command line interface that accepts several important options and allows users to customize this pipeline. For more information about DyNeuSR Fire, check out the [docs](https://braindynamicslab.github.io/dyneusr-fire/).\n\n\n## **References**\n\nIf you find DyNeuSR useful, please consider citing:\n\n> Geniesse, C., Sporns, O., Petri, G., & Saggar, M. (2019). [Generating dynamical neuroimaging spatiotemporal representations (DyNeuSR) using topological data analysis](https://www.mitpressjournals.org/doi/abs/10.1162/netn_a_00093). *Network Neuroscience*. Advance publication. doi:10.1162/netn_a_00093\n\n\nFor more information about the Mapper approach, please see:\n\n> Saggar, M., Sporns, O., Gonzalez-Castillo, J., Bandettini, P.A., Carlsson, G., Glover, G., & Reiss, A.L. (2018). [Towards a new approach to reveal dynamical organization of the brain using topological data analysis](https://www.nature.com/articles/s41467-018-03664-4). *Nature Communications, 9*(1). doi:10.1038/s41467-018-03664-4\n\n\n\n\n\n## **API Usage & Examples**\n\nDyNeuSR provides a Python API for working with and visualizing shape graphs generated by Mapper. This repository includes several [examples](https://github.com/braindynamicslab/dyneusr/tree/master/examples/) that introduce DyNeuSR's API and highlight different aspects of analysis with DyNeuSR. For more detailed tutorials, check out [dyneusr-notebooks](https://github.com/braindynamicslab/dyneusr-notebooks/).\n\n\n### **_Shape Graph Visualization_** ([trefoil knot](https://github.com/braindynamicslab/dyneusr/blob/master/examples/trefoil_knot/trefoil_knot.py))\n\n```python\n\nfrom dyneusr import DyNeuGraph\nfrom dyneusr.datasets import make_trefoil\nfrom dyneusr.tools import visualize_mapper_stages\nfrom kmapper import KeplerMapper\n\n# Generate synthetic dataset\ndataset = make_trefoil(size=100)\nX = dataset.data\ny = dataset.target\n\n# Generate shape graph using KeplerMapper\nmapper = KeplerMapper(verbose=1)\nlens = mapper.fit_transform(X, projection=[0])\ngraph = mapper.map(lens, X, nr_cubes=6, overlap_perc=0.2)\n\n# Visualize the shape graph using DyNeuSR's DyNeuGraph                          \ndG = DyNeuGraph(G=graph, y=y)\ndG.visualize('dyneusr_output.html')\n\n```\n\n<p align=\"center\"><a href=\"https://github.com/braindynamicslab/dyneusr/tree/master/examples/trefoil_knot\">\n<img src=\"https://raw.githubusercontent.com/braindynamicslab/dyneusr/master/docs/assets/dyneusr_trefoil_knot.png\">\n</a></p>\n\n\n\n### **_Mapper Parameter Comparison_** ([trefoil knot](https://github.com/braindynamicslab/dyneusr/blob/master/examples/trefoil_knot/compare_lenses.py))\n\n```python\n# Define projections to compare\nprojections = ([0], [0,1], [1,2], [0, 2])\n\n# Compare different sets of columns as lenses\nfor projection in projections:\n\n\t# Generate shape graph using KeplerMapper\n\tmapper = KeplerMapper(verbose=1)\n\tlens = mapper.fit_transform(X, projection=projection)\n\tgraph = mapper.map(lens, X, nr_cubes=4, overlap_perc=0.3)\n\n\t# Visualize the stages of Mapper\n\tfig, axes = visualize_mapper_stages(\n\t\tdataset, lens=lens, graph=graph, cover=mapper.cover, \n\t\tlayout=\"spectral\")\n\n```\n\n<p align=\"center\"><a href=\"https://github.com/braindynamicslab/dyneusr/tree/master/examples/trefoil_knot\">\n<img src=\"https://raw.githubusercontent.com/braindynamicslab/dyneusr/master/docs/assets/trefoil_knot_mapper_lens_0.png\">\n<img src=\"https://raw.githubusercontent.com/braindynamicslab/dyneusr/master/docs/assets/trefoil_knot_mapper_lens_0_1.png\">\n<img src=\"https://raw.githubusercontent.com/braindynamicslab/dyneusr/master/docs/assets/trefoil_knot_mapper_lens_0_2.png\">\n<img src=\"https://raw.githubusercontent.com/braindynamicslab/dyneusr/master/docs/assets/trefoil_knot_mapper_lens_1_2.png\">\n</a></p>\n\n\n\n### **_Neuroimaging Applications_** ([haxby decoding](https://github.com/braindynamicslab/dyneusr/tree/master/examples/haxby_decoding))\n\n```python\n\nimport numpy as np \nimport pandas as pd\n\nfrom nilearn.datasets import fetch_haxby\nfrom nilearn.input_data import NiftiMasker\n\nfrom kmapper import KeplerMapper, Cover\nfrom sklearn.manifold import TSNE\nfrom sklearn.cluster import DBSCAN\n\n# Fetch dataset, extract time-series from ventral temporal (VT) mask\ndataset = fetch_haxby()\nmasker = NiftiMasker(\n    dataset.mask_vt[0], \n    standardize=True, detrend=True, smoothing_fwhm=4.0,\n    low_pass=0.09, high_pass=0.008, t_r=2.5,\n    memory=\"nilearn_cache\")\nX = masker.fit_transform(dataset.func[0])\n\n# Encode labels as integers\ndf = pd.read_csv(dataset.session_target[0], sep=\" \")\ntarget, labels = pd.factorize(df.labels.values)\ny = pd.DataFrame({l:(target==i).astype(int) for i,l in enumerate(labels)})\n\n# Generate shape graph using KeplerMapper\nmapper = KeplerMapper(verbose=1)\nlens = mapper.fit_transform(X, projection=TSNE(2))\ngraph = mapper.map(lens, X, cover=Cover(20, 0.5), clusterer=DBSCAN(eps=20.))\n\n# Visualize the shape graph using DyNeuSR's DyNeuGraph                          \ndG = DyNeuGraph(G=graph, y=y)\ndG.visualize('dyneusr_output.html')\n\n```\n\n<p align=\"center\"><a href=\"https://github.com/braindynamicslab/dyneusr/tree/master/examples/haxby_decoding\">\n<img src=\"https://raw.githubusercontent.com/braindynamicslab/dyneusr/master/docs/assets/dyneusr_haxby_decoding.png\">\n</a></p>\n\n\n\n## **Setup**\n\n### **_Dependencies_**\n\n#### [Python 3.6](https://www.python.org/)\n\n#### Required Python Packages\n* [numpy](www.numpy.org)\n* [pandas](pandas.pydata.org)\n* [scipy](www.scipy.org)\n* [scikit-learn](scikit-learn.org)\n* [matplotlib](matplotlib.sourceforge.net)\n* [seaborn](stanford.edu/~mwaskom/software/seaborn)\n* [networkx](networkx.github.io)\n* [nilearn](nilearn.github.io)\n* [kmapper](kepler-mapper.scikit-tda.org)\n\n_For a full list of packages and required versions, see [`requirements.txt`](https://github.com/braindynamicslab/dyneusr/blob/master/requirements.txt) and [`requirements-versions.txt`](https://github.com/braindynamicslab/dyneusr/blob/master/requirements-versions.txt)._\n\n\n### **_Install with PIP_**\n\n_To install with pip:_\n```bash\npip install dyneusr\n```\n\n_To install from source:_\n```bash\ngit clone https://github.com/braindynamicslab/dyneusr.git\ncd dyneusr\n\npip install -r requirements.txt\npip install -e .\n\npytest\n```\n\n\n### **_Install with Conda_**\n\nIf your default environment is Python 2, we recommend that you install `dyneusr` in a separate Python 3 environment. You can find more information about creating a separate environment for Python 3 [here](https://salishsea-meopar-docs.readthedocs.io/en/latest/work_env/python3_conda_environment.html). \n\nIf you don't have conda, or if you are new to scientific python, we recommend that you download the [Anaconda scientific python distribution](https://store.continuum.io/cshop/anaconda/). \n\n_To create a new conda environment and install from source:_\n```bash\nconda create -n dyneusr python=3.6\nconda activate dyneusr\n\ngit clone https://github.com/braindynamicslab/dyneusr.git\ncd dyneusr\n\nconda install --file requirements-conda.txt\npip install -e .\n\npytest\n```\n\nThis creates a new conda environment `dyneusr` and installs in it the dependencies that are needed. To access it, use the `conda activate dyneusr` command (if your conda version >= 4.4) and use `source activate dyneusr` command (if your conda version < 4.4).\n\n### **_Run in a Singularity Container_**\nTo run dyneusr in a Singularity container, for use on clusters where you do not have root access for example, first install singularity. Then, you can use the following command:\n```\nsingularity run shub://braindynamicslab/dyneusr\nsource activate neuro\n```\nThis will download and run a singularity container from [singularity-hub](https://singularity-hub.org/) running centos 7 with dyneusr, jupyter, and all dependencies. It will also activate the conda environement `neuro` where these are installed. For more information on how to use singularity, see the [documentation](https://sylabs.io/docs/). The singularity recipe for this file was built with [neurodocker](https://github.com/ReproNim/neurodocker)\n\n## **Support**\n\nPlease feel free to [report](https://github.com/braindynamicslab/dyneusr/issues/new) any issues, [request](https://github.com/braindynamicslab/dyneusr/issues/new) new features, or [propose](https://github.com/braindynamicslab/dyneusr/compare) improvements. You can also contact Caleb Geniesse at geniesse [at] stanford [dot] edu.\n\nIf you contribute to DyNeuSR, please feel free to add your name to the [list of contributors](https://github.com/braindynamicslab/dyneusr/blob/master/contributors.md). \n\n## **Citation**\n\n> Geniesse, C., Sporns, O., Petri, G., & Saggar, M. (2019). [Generating dynamical neuroimaging spatiotemporal representations (DyNeuSR) using topological data analysis](https://www.mitpressjournals.org/doi/abs/10.1162/netn_a_00093). *Network Neuroscience*. Advance publication. doi:10.1162/netn_a_00093\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://braindynamicslab.github.io/dyneusr", "keywords": "brain dynamics,topology data analysis,neuroimaging,brain networks,mapper,visualization", "license": "BSD-3", "maintainer": "", "maintainer_email": "", "name": "dyneusr", "package_url": "https://pypi.org/project/dyneusr/", "platform": "", "project_url": "https://pypi.org/project/dyneusr/", "project_urls": {"Homepage": "https://braindynamicslab.github.io/dyneusr"}, "release_url": "https://pypi.org/project/dyneusr/0.3.8/", "requires_dist": ["setuptools", "pytest", "ipython", "numpy (>=1.16)", "pandas", "scipy", "scikit-learn", "matplotlib", "seaborn", "networkx", "nilearn", "kmapper (>=1.2)"], "requires_python": ">=3.6", "summary": "Dynamical Neural Spatiotemporal Representations.", "version": "0.3.8", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p align=\"center\">\n<a href=\"https://braindynamicslab.github.io/dyneusr/\" rel=\"nofollow\">\n<img height=\"250\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/60d8723f4a861d0e6caa6a13ad087131f87a67d1/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f627261696e64796e616d6963736c61622f64796e657573722f6d61737465722f646f63732f6173736574732f6c6f676f2e706e67\">\n</a>\n</p>\n<p align=\"center\">\n<a href=\"https://braindynamicslab.github.io/dyneusr/\" rel=\"nofollow\">\n<img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f73cb97845d5f066070cbdd5ff3946667328df79/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f627261696e64796e616d6963736c61622f64796e657573722f6d61737465722f646f63732f6173736574732f68617862795f6465636f64696e675f6d61707065725f7374616765732e706e67\">\n</a>\n</p>\n<h2><strong>Dynamical Neuroimaging Spatiotemporal Representations</strong></h2>\n<p><a href=\"https://singularity-hub.org/collections/4218\" rel=\"nofollow\"><img alt=\"https://www.singularity-hub.org/static/img/hosted-singularity--hub-%23e32929.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c5e1c04e8b6625fbd850fdd2a2000ce6a98f31ad/68747470733a2f2f7777772e73696e67756c61726974792d6875622e6f72672f7374617469632f696d672f686f737465642d73696e67756c61726974792d2d6875622d2532336533323932392e737667\"></a></p>\n<p><a href=\"https://braindynamicslab.github.io/dyneusr/\" rel=\"nofollow\">DyNeuSR</a> is a Python visualization library for topological representations of neuroimaging data.</p>\n<p>DyNeuSR was designed specifically for working with shape graphs produced by the Mapper algorithm from topological data analysis (TDA), as described in the papers \"<a href=\"https://www.mitpressjournals.org/doi/abs/10.1162/netn_a_00093\" rel=\"nofollow\">Generating dynamical neuroimaging spatiotemporal representations (DyNeuSR) using topological data analysis</a>\" (Geniesse et al., 2019) and \"<a href=\"https://www.nature.com/articles/s41467-018-03664-4\" rel=\"nofollow\">Towards a new approach to reveal dynamical organization of the brain using topological data analysis</a>\" (Saggar et al., 2018). Check out this <a href=\"https://bdl.stanford.edu/blog/tda-cme-paper/\" rel=\"nofollow\">blog post</a> for more about the initial work that inspired the development of DyNeuSR.</p>\n<p>Developed with neuroimaging data analysis in mind, DyNeuSR connects existing implementations of Mapper (e.g. <a href=\"https://kepler-mapper.scikit-tda.org\" rel=\"nofollow\">KeplerMapper</a>) with network analysis tools (e.g. <a href=\"https://networkx.github.io/\" rel=\"nofollow\">NetworkX</a>) and other neuroimaging data visualization libraries (e.g. <a href=\"https://nilearn.github.io/\" rel=\"nofollow\">Nilearn</a>) and  provides a high-level interface for interacting with and manipulating shape graph representations of neuroimaging data and relating these representations back to neurophysiology.</p>\n<p>DyNeuSR also provides an interactive web interface for visualizing and exploring shape graphs. To see this visual interface in action, check out the <a href=\"https://braindynamicslab.github.io/dyneusr/demo/\" rel=\"nofollow\">demos</a>.</p>\n<h2><strong>Demos</strong></h2>\n<ul>\n<li><a href=\"https://braindynamicslab.github.io/dyneusr/demo/trefoil-knot/\" rel=\"nofollow\">Trefoil knot</a> (<a href=\"https://github.com/braindynamicslab/dyneusr/blob/master/docs/demo/trefoil-knot/trefoil_knot.py\" rel=\"nofollow\">code</a>)</li>\n<li><a href=\"https://braindynamicslab.github.io/dyneusr/demo/trefoil-knot/\" rel=\"nofollow\">Trefoil knot (custom layouts)</a> (<a href=\"https://github.com/braindynamicslab/dyneusr/blob/master/docs/demo/trefoil-knot-custom-layouts/trefoil_knot_custom_layouts.py\" rel=\"nofollow\">code</a>)</li>\n<li><a href=\"https://braindynamicslab.github.io/dyneusr/demo/haxby-tsne/\" rel=\"nofollow\">Haxby fMRI data (t-SNE lens)</a> (<a href=\"https://github.com/braindynamicslab/dyneusr/blob/master/docs/demo/haxby-tsne/haxby_tsne.py\" rel=\"nofollow\">code</a>)</li>\n<li><a href=\"https://braindynamicslab.github.io/dyneusr/demo/haxby-umap/\" rel=\"nofollow\">Haxby fMRI data (UMAP lens)</a> (<a href=\"https://github.com/braindynamicslab/dyneusr/blob/master/docs/demo/haxby-umap/haxby_umap.py\" rel=\"nofollow\">code</a>)</li>\n<li><a href=\"https://braindynamicslab.github.io/dyneusr/demo/haxby-umap-supervised/\" rel=\"nofollow\">Haxby fMRI data (supervised UMAP lens)</a> (<a href=\"https://github.com/braindynamicslab/dyneusr/blob/master/docs/demo/haxby-umap-supervised/haxby_umap_supervised.py\" rel=\"nofollow\">code</a>)</li>\n</ul>\n<h2><strong>Related Projects</strong></h2>\n<ul>\n<li><a href=\"https://braindynamicslab.github.io/dyneusr-fire/\" rel=\"nofollow\">DyNeuSR Fire</a> is a new project that provides a command line interface for DyNeuSR. It wraps <code>kmapper</code> and <code>dyneusr</code> into a single pipeline, and uses the <a href=\"https://github.com/google/python-fire\" rel=\"nofollow\">Python Fire</a> library to automatically generate a simple command line interface that accepts several important options and allows users to customize this pipeline. For more information about DyNeuSR Fire, check out the <a href=\"https://braindynamicslab.github.io/dyneusr-fire/\" rel=\"nofollow\">docs</a>.</li>\n</ul>\n<h2><strong>References</strong></h2>\n<p>If you find DyNeuSR useful, please consider citing:</p>\n<blockquote>\n<p>Geniesse, C., Sporns, O., Petri, G., &amp; Saggar, M. (2019). <a href=\"https://www.mitpressjournals.org/doi/abs/10.1162/netn_a_00093\" rel=\"nofollow\">Generating dynamical neuroimaging spatiotemporal representations (DyNeuSR) using topological data analysis</a>. <em>Network Neuroscience</em>. Advance publication. doi:10.1162/netn_a_00093</p>\n</blockquote>\n<p>For more information about the Mapper approach, please see:</p>\n<blockquote>\n<p>Saggar, M., Sporns, O., Gonzalez-Castillo, J., Bandettini, P.A., Carlsson, G., Glover, G., &amp; Reiss, A.L. (2018). <a href=\"https://www.nature.com/articles/s41467-018-03664-4\" rel=\"nofollow\">Towards a new approach to reveal dynamical organization of the brain using topological data analysis</a>. <em>Nature Communications, 9</em>(1). doi:10.1038/s41467-018-03664-4</p>\n</blockquote>\n<h2><strong>API Usage &amp; Examples</strong></h2>\n<p>DyNeuSR provides a Python API for working with and visualizing shape graphs generated by Mapper. This repository includes several <a href=\"https://github.com/braindynamicslab/dyneusr/tree/master/examples/\" rel=\"nofollow\">examples</a> that introduce DyNeuSR's API and highlight different aspects of analysis with DyNeuSR. For more detailed tutorials, check out <a href=\"https://github.com/braindynamicslab/dyneusr-notebooks/\" rel=\"nofollow\">dyneusr-notebooks</a>.</p>\n<h3><strong><em>Shape Graph Visualization</em></strong> (<a href=\"https://github.com/braindynamicslab/dyneusr/blob/master/examples/trefoil_knot/trefoil_knot.py\" rel=\"nofollow\">trefoil knot</a>)</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">dyneusr</span> <span class=\"kn\">import</span> <span class=\"n\">DyNeuGraph</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dyneusr.datasets</span> <span class=\"kn\">import</span> <span class=\"n\">make_trefoil</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dyneusr.tools</span> <span class=\"kn\">import</span> <span class=\"n\">visualize_mapper_stages</span>\n<span class=\"kn\">from</span> <span class=\"nn\">kmapper</span> <span class=\"kn\">import</span> <span class=\"n\">KeplerMapper</span>\n\n<span class=\"c1\"># Generate synthetic dataset</span>\n<span class=\"n\">dataset</span> <span class=\"o\">=</span> <span class=\"n\">make_trefoil</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">data</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">target</span>\n\n<span class=\"c1\"># Generate shape graph using KeplerMapper</span>\n<span class=\"n\">mapper</span> <span class=\"o\">=</span> <span class=\"n\">KeplerMapper</span><span class=\"p\">(</span><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">lens</span> <span class=\"o\">=</span> <span class=\"n\">mapper</span><span class=\"o\">.</span><span class=\"n\">fit_transform</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">projection</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"n\">graph</span> <span class=\"o\">=</span> <span class=\"n\">mapper</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">lens</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">nr_cubes</span><span class=\"o\">=</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"n\">overlap_perc</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Visualize the shape graph using DyNeuSR's DyNeuGraph                          </span>\n<span class=\"n\">dG</span> <span class=\"o\">=</span> <span class=\"n\">DyNeuGraph</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"o\">=</span><span class=\"n\">graph</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"n\">dG</span><span class=\"o\">.</span><span class=\"n\">visualize</span><span class=\"p\">(</span><span class=\"s1\">'dyneusr_output.html'</span><span class=\"p\">)</span>\n</pre>\n<p align=\"center\"><a href=\"https://github.com/braindynamicslab/dyneusr/tree/master/examples/trefoil_knot\" rel=\"nofollow\">\n<img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/acfbc2b370a977a4197bfe298e378df1ea8a8f5c/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f627261696e64796e616d6963736c61622f64796e657573722f6d61737465722f646f63732f6173736574732f64796e657573725f747265666f696c5f6b6e6f742e706e67\">\n</a></p>\n<h3><strong><em>Mapper Parameter Comparison</em></strong> (<a href=\"https://github.com/braindynamicslab/dyneusr/blob/master/examples/trefoil_knot/compare_lenses.py\" rel=\"nofollow\">trefoil knot</a>)</h3>\n<pre><span class=\"c1\"># Define projections to compare</span>\n<span class=\"n\">projections</span> <span class=\"o\">=</span> <span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># Compare different sets of columns as lenses</span>\n<span class=\"k\">for</span> <span class=\"n\">projection</span> <span class=\"ow\">in</span> <span class=\"n\">projections</span><span class=\"p\">:</span>\n\n\t<span class=\"c1\"># Generate shape graph using KeplerMapper</span>\n\t<span class=\"n\">mapper</span> <span class=\"o\">=</span> <span class=\"n\">KeplerMapper</span><span class=\"p\">(</span><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\t<span class=\"n\">lens</span> <span class=\"o\">=</span> <span class=\"n\">mapper</span><span class=\"o\">.</span><span class=\"n\">fit_transform</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">projection</span><span class=\"o\">=</span><span class=\"n\">projection</span><span class=\"p\">)</span>\n\t<span class=\"n\">graph</span> <span class=\"o\">=</span> <span class=\"n\">mapper</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">lens</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">nr_cubes</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">overlap_perc</span><span class=\"o\">=</span><span class=\"mf\">0.3</span><span class=\"p\">)</span>\n\n\t<span class=\"c1\"># Visualize the stages of Mapper</span>\n\t<span class=\"n\">fig</span><span class=\"p\">,</span> <span class=\"n\">axes</span> <span class=\"o\">=</span> <span class=\"n\">visualize_mapper_stages</span><span class=\"p\">(</span>\n\t\t<span class=\"n\">dataset</span><span class=\"p\">,</span> <span class=\"n\">lens</span><span class=\"o\">=</span><span class=\"n\">lens</span><span class=\"p\">,</span> <span class=\"n\">graph</span><span class=\"o\">=</span><span class=\"n\">graph</span><span class=\"p\">,</span> <span class=\"n\">cover</span><span class=\"o\">=</span><span class=\"n\">mapper</span><span class=\"o\">.</span><span class=\"n\">cover</span><span class=\"p\">,</span> \n\t\t<span class=\"n\">layout</span><span class=\"o\">=</span><span class=\"s2\">\"spectral\"</span><span class=\"p\">)</span>\n</pre>\n<p align=\"center\"><a href=\"https://github.com/braindynamicslab/dyneusr/tree/master/examples/trefoil_knot\" rel=\"nofollow\">\n<img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/59db6619e9c7acaa51d3dfb938a3749aaa492694/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f627261696e64796e616d6963736c61622f64796e657573722f6d61737465722f646f63732f6173736574732f747265666f696c5f6b6e6f745f6d61707065725f6c656e735f302e706e67\">\n<img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8f6a77d2da1b470aee969d3a15970a13a57b6482/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f627261696e64796e616d6963736c61622f64796e657573722f6d61737465722f646f63732f6173736574732f747265666f696c5f6b6e6f745f6d61707065725f6c656e735f305f312e706e67\">\n<img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f0ea2f745e222b41c56a05dde21b700d8a897d77/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f627261696e64796e616d6963736c61622f64796e657573722f6d61737465722f646f63732f6173736574732f747265666f696c5f6b6e6f745f6d61707065725f6c656e735f305f322e706e67\">\n<img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/97b2ae730276a3d2336bde05c9b65c5820869551/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f627261696e64796e616d6963736c61622f64796e657573722f6d61737465722f646f63732f6173736574732f747265666f696c5f6b6e6f745f6d61707065725f6c656e735f315f322e706e67\">\n</a></p>\n<h3><strong><em>Neuroimaging Applications</em></strong> (<a href=\"https://github.com/braindynamicslab/dyneusr/tree/master/examples/haxby_decoding\" rel=\"nofollow\">haxby decoding</a>)</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span> \n<span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">nilearn.datasets</span> <span class=\"kn\">import</span> <span class=\"n\">fetch_haxby</span>\n<span class=\"kn\">from</span> <span class=\"nn\">nilearn.input_data</span> <span class=\"kn\">import</span> <span class=\"n\">NiftiMasker</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">kmapper</span> <span class=\"kn\">import</span> <span class=\"n\">KeplerMapper</span><span class=\"p\">,</span> <span class=\"n\">Cover</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.manifold</span> <span class=\"kn\">import</span> <span class=\"n\">TSNE</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.cluster</span> <span class=\"kn\">import</span> <span class=\"n\">DBSCAN</span>\n\n<span class=\"c1\"># Fetch dataset, extract time-series from ventral temporal (VT) mask</span>\n<span class=\"n\">dataset</span> <span class=\"o\">=</span> <span class=\"n\">fetch_haxby</span><span class=\"p\">()</span>\n<span class=\"n\">masker</span> <span class=\"o\">=</span> <span class=\"n\">NiftiMasker</span><span class=\"p\">(</span>\n    <span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">mask_vt</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> \n    <span class=\"n\">standardize</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">detrend</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">smoothing_fwhm</span><span class=\"o\">=</span><span class=\"mf\">4.0</span><span class=\"p\">,</span>\n    <span class=\"n\">low_pass</span><span class=\"o\">=</span><span class=\"mf\">0.09</span><span class=\"p\">,</span> <span class=\"n\">high_pass</span><span class=\"o\">=</span><span class=\"mf\">0.008</span><span class=\"p\">,</span> <span class=\"n\">t_r</span><span class=\"o\">=</span><span class=\"mf\">2.5</span><span class=\"p\">,</span>\n    <span class=\"n\">memory</span><span class=\"o\">=</span><span class=\"s2\">\"nilearn_cache\"</span><span class=\"p\">)</span>\n<span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">masker</span><span class=\"o\">.</span><span class=\"n\">fit_transform</span><span class=\"p\">(</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">func</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># Encode labels as integers</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">session_target</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">sep</span><span class=\"o\">=</span><span class=\"s2\">\" \"</span><span class=\"p\">)</span>\n<span class=\"n\">target</span><span class=\"p\">,</span> <span class=\"n\">labels</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">factorize</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">labels</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">)</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"n\">l</span><span class=\"p\">:(</span><span class=\"n\">target</span><span class=\"o\">==</span><span class=\"n\">i</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">l</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">labels</span><span class=\"p\">)})</span>\n\n<span class=\"c1\"># Generate shape graph using KeplerMapper</span>\n<span class=\"n\">mapper</span> <span class=\"o\">=</span> <span class=\"n\">KeplerMapper</span><span class=\"p\">(</span><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">lens</span> <span class=\"o\">=</span> <span class=\"n\">mapper</span><span class=\"o\">.</span><span class=\"n\">fit_transform</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">projection</span><span class=\"o\">=</span><span class=\"n\">TSNE</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"n\">graph</span> <span class=\"o\">=</span> <span class=\"n\">mapper</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">lens</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">cover</span><span class=\"o\">=</span><span class=\"n\">Cover</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">),</span> <span class=\"n\">clusterer</span><span class=\"o\">=</span><span class=\"n\">DBSCAN</span><span class=\"p\">(</span><span class=\"n\">eps</span><span class=\"o\">=</span><span class=\"mf\">20.</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Visualize the shape graph using DyNeuSR's DyNeuGraph                          </span>\n<span class=\"n\">dG</span> <span class=\"o\">=</span> <span class=\"n\">DyNeuGraph</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"o\">=</span><span class=\"n\">graph</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"n\">dG</span><span class=\"o\">.</span><span class=\"n\">visualize</span><span class=\"p\">(</span><span class=\"s1\">'dyneusr_output.html'</span><span class=\"p\">)</span>\n</pre>\n<p align=\"center\"><a href=\"https://github.com/braindynamicslab/dyneusr/tree/master/examples/haxby_decoding\" rel=\"nofollow\">\n<img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/911f009c9e0a54e10b21c7e63e30b3eb711b6467/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f627261696e64796e616d6963736c61622f64796e657573722f6d61737465722f646f63732f6173736574732f64796e657573725f68617862795f6465636f64696e672e706e67\">\n</a></p>\n<h2><strong>Setup</strong></h2>\n<h3><strong><em>Dependencies</em></strong></h3>\n<h4><a href=\"https://www.python.org/\" rel=\"nofollow\">Python 3.6</a></h4>\n<h4>Required Python Packages</h4>\n<ul>\n<li><a href=\"www.numpy.org\" rel=\"nofollow\">numpy</a></li>\n<li><a href=\"pandas.pydata.org\" rel=\"nofollow\">pandas</a></li>\n<li><a href=\"www.scipy.org\" rel=\"nofollow\">scipy</a></li>\n<li><a href=\"scikit-learn.org\" rel=\"nofollow\">scikit-learn</a></li>\n<li><a href=\"matplotlib.sourceforge.net\" rel=\"nofollow\">matplotlib</a></li>\n<li><a href=\"stanford.edu/%7Emwaskom/software/seaborn\" rel=\"nofollow\">seaborn</a></li>\n<li><a href=\"networkx.github.io\" rel=\"nofollow\">networkx</a></li>\n<li><a href=\"nilearn.github.io\" rel=\"nofollow\">nilearn</a></li>\n<li><a href=\"kepler-mapper.scikit-tda.org\" rel=\"nofollow\">kmapper</a></li>\n</ul>\n<p><em>For a full list of packages and required versions, see <a href=\"https://github.com/braindynamicslab/dyneusr/blob/master/requirements.txt\" rel=\"nofollow\"><code>requirements.txt</code></a> and <a href=\"https://github.com/braindynamicslab/dyneusr/blob/master/requirements-versions.txt\" rel=\"nofollow\"><code>requirements-versions.txt</code></a>.</em></p>\n<h3><strong><em>Install with PIP</em></strong></h3>\n<p><em>To install with pip:</em></p>\n<pre>pip install dyneusr\n</pre>\n<p><em>To install from source:</em></p>\n<pre>git clone https://github.com/braindynamicslab/dyneusr.git\n<span class=\"nb\">cd</span> dyneusr\n\npip install -r requirements.txt\npip install -e .\n\npytest\n</pre>\n<h3><strong><em>Install with Conda</em></strong></h3>\n<p>If your default environment is Python 2, we recommend that you install <code>dyneusr</code> in a separate Python 3 environment. You can find more information about creating a separate environment for Python 3 <a href=\"https://salishsea-meopar-docs.readthedocs.io/en/latest/work_env/python3_conda_environment.html\" rel=\"nofollow\">here</a>.</p>\n<p>If you don't have conda, or if you are new to scientific python, we recommend that you download the <a href=\"https://store.continuum.io/cshop/anaconda/\" rel=\"nofollow\">Anaconda scientific python distribution</a>.</p>\n<p><em>To create a new conda environment and install from source:</em></p>\n<pre>conda create -n dyneusr <span class=\"nv\">python</span><span class=\"o\">=</span><span class=\"m\">3</span>.6\nconda activate dyneusr\n\ngit clone https://github.com/braindynamicslab/dyneusr.git\n<span class=\"nb\">cd</span> dyneusr\n\nconda install --file requirements-conda.txt\npip install -e .\n\npytest\n</pre>\n<p>This creates a new conda environment <code>dyneusr</code> and installs in it the dependencies that are needed. To access it, use the <code>conda activate dyneusr</code> command (if your conda version &gt;= 4.4) and use <code>source activate dyneusr</code> command (if your conda version &lt; 4.4).</p>\n<h3><strong><em>Run in a Singularity Container</em></strong></h3>\n<p>To run dyneusr in a Singularity container, for use on clusters where you do not have root access for example, first install singularity. Then, you can use the following command:</p>\n<pre><code>singularity run shub://braindynamicslab/dyneusr\nsource activate neuro\n</code></pre>\n<p>This will download and run a singularity container from <a href=\"https://singularity-hub.org/\" rel=\"nofollow\">singularity-hub</a> running centos 7 with dyneusr, jupyter, and all dependencies. It will also activate the conda environement <code>neuro</code> where these are installed. For more information on how to use singularity, see the <a href=\"https://sylabs.io/docs/\" rel=\"nofollow\">documentation</a>. The singularity recipe for this file was built with <a href=\"https://github.com/ReproNim/neurodocker\" rel=\"nofollow\">neurodocker</a></p>\n<h2><strong>Support</strong></h2>\n<p>Please feel free to <a href=\"https://github.com/braindynamicslab/dyneusr/issues/new\" rel=\"nofollow\">report</a> any issues, <a href=\"https://github.com/braindynamicslab/dyneusr/issues/new\" rel=\"nofollow\">request</a> new features, or <a href=\"https://github.com/braindynamicslab/dyneusr/compare\" rel=\"nofollow\">propose</a> improvements. You can also contact Caleb Geniesse at geniesse [at] stanford [dot] edu.</p>\n<p>If you contribute to DyNeuSR, please feel free to add your name to the <a href=\"https://github.com/braindynamicslab/dyneusr/blob/master/contributors.md\" rel=\"nofollow\">list of contributors</a>.</p>\n<h2><strong>Citation</strong></h2>\n<blockquote>\n<p>Geniesse, C., Sporns, O., Petri, G., &amp; Saggar, M. (2019). <a href=\"https://www.mitpressjournals.org/doi/abs/10.1162/netn_a_00093\" rel=\"nofollow\">Generating dynamical neuroimaging spatiotemporal representations (DyNeuSR) using topological data analysis</a>. <em>Network Neuroscience</em>. Advance publication. doi:10.1162/netn_a_00093</p>\n</blockquote>\n\n          </div>"}, "last_serial": 6979906, "releases": {"0.3.0": [{"comment_text": "", "digests": {"md5": "d1b5d8cf78a81da25cce1426237c135e", "sha256": "5074e81ee535a774d2aca8cd94387a20f24c54cb01180acb2774fe890b6d7f08"}, "downloads": -1, "filename": "dyneusr-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "d1b5d8cf78a81da25cce1426237c135e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 34590, "upload_time": "2019-06-03T08:38:50", "upload_time_iso_8601": "2019-06-03T08:38:50.446047Z", "url": "https://files.pythonhosted.org/packages/cb/72/73c90f48823a6514c6a5feb4de3953a639716f07b0f0ce8113547570d494/dyneusr-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "87c6263f508759dffddbf41b13d87804", "sha256": "83a73bd4cb2eeb802e57b86360e316dbe3d9e14d2bf063c4d44ed326a726c22d"}, "downloads": -1, "filename": "dyneusr-0.3.0.tar.gz", "has_sig": false, "md5_digest": "87c6263f508759dffddbf41b13d87804", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 32608, "upload_time": "2019-06-03T08:38:52", "upload_time_iso_8601": "2019-06-03T08:38:52.753598Z", "url": "https://files.pythonhosted.org/packages/20/12/5469dbf88680cf4e2007baf52de4030d3b4908f6d8f38b1d149e9aa0ae37/dyneusr-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "e336612aa692bd0e9a753c46ceb8b56e", "sha256": "fa8c506ed0b02513be52662665ff020a3e872364f8c028968cfdfbfd118fcddf"}, "downloads": -1, "filename": "dyneusr-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e336612aa692bd0e9a753c46ceb8b56e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 34561, "upload_time": "2019-06-04T19:09:00", "upload_time_iso_8601": "2019-06-04T19:09:00.353170Z", "url": "https://files.pythonhosted.org/packages/10/d5/9f3560ea888d3e1eb8661e5f0ac2fdfbe5ff3fc0e8d98d0b2be77b26e8f1/dyneusr-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "98d112748a58371d2547e6f4d5cd6478", "sha256": "1b3feb18a6721920015ffce4a6e1be836240c8419d752d1c8d396b44e04fd1a4"}, "downloads": -1, "filename": "dyneusr-0.3.1.tar.gz", "has_sig": false, "md5_digest": "98d112748a58371d2547e6f4d5cd6478", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 32561, "upload_time": "2019-06-04T19:09:03", "upload_time_iso_8601": "2019-06-04T19:09:03.498983Z", "url": "https://files.pythonhosted.org/packages/13/93/9b51b4a86821f953a35574d7d8e8a7363f7c0892bb4fb2c35ac49b9ad1f7/dyneusr-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "70bd3d255b778e10d3d219ee9f373352", "sha256": "c8609e23ab8c2a104769ba7bcc2d8f49ce428251c33ccd1eba07c208b45bd2ed"}, "downloads": -1, "filename": "dyneusr-0.3.2-py3-none-any.whl", "has_sig": false, "md5_digest": "70bd3d255b778e10d3d219ee9f373352", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 59281, "upload_time": "2019-06-04T21:52:06", "upload_time_iso_8601": "2019-06-04T21:52:06.047624Z", "url": "https://files.pythonhosted.org/packages/35/a0/05b434f47193d3bff47582a8ad04716c4fa0ead364540f3d96bc0ddc512c/dyneusr-0.3.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "65c5a16265351c7edecee02e3f3c2f36", "sha256": "3c0f5d1ce14190f8cd8c83322fe4e2af92bd9dbcf53530bbe2adbe458e70fb30"}, "downloads": -1, "filename": "dyneusr-0.3.2.tar.gz", "has_sig": false, "md5_digest": "65c5a16265351c7edecee02e3f3c2f36", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 52205, "upload_time": "2019-06-04T21:52:12", "upload_time_iso_8601": "2019-06-04T21:52:12.929883Z", "url": "https://files.pythonhosted.org/packages/d7/f5/2469ad6e0f93029f40012a146f11eae225287c4fa612ad7ac9f585ca24b3/dyneusr-0.3.2.tar.gz", "yanked": false}], "0.3.2.dev0": [{"comment_text": "", "digests": {"md5": "87ca39a8f229661fb673cb22296c2b6b", "sha256": "a07e78bd486d276303ad02d23fb3a6b30fde24d4af24de7649e85cea66b06e8b"}, "downloads": -1, "filename": "dyneusr-0.3.2.dev0-py3.7.egg", "has_sig": false, "md5_digest": "87ca39a8f229661fb673cb22296c2b6b", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": ">=3.6", "size": 72880, "upload_time": "2019-06-04T21:52:11", "upload_time_iso_8601": "2019-06-04T21:52:11.143096Z", "url": "https://files.pythonhosted.org/packages/5c/7d/e8399690acbe65f9eadb4d0b37fb5137660b40aa195582d2d5d74e768441/dyneusr-0.3.2.dev0-py3.7.egg", "yanked": false}], "0.3.4": [{"comment_text": "", "digests": {"md5": "91f62877600209adfd91b220e7d91578", "sha256": "f46fc5a70e9763039c8f459a9fff4e19043b914bf4e0e741a12c6c6a6a49fd4f"}, "downloads": -1, "filename": "dyneusr-0.3.4-py3-none-any.whl", "has_sig": false, "md5_digest": "91f62877600209adfd91b220e7d91578", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 59452, "upload_time": "2019-06-04T22:26:54", "upload_time_iso_8601": "2019-06-04T22:26:54.004355Z", "url": "https://files.pythonhosted.org/packages/1b/12/606d125a5e892ed06f1348d59877eb037808bc77df32f24996b610d87ec0/dyneusr-0.3.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "199b36a437c5ce481852f4b2f3251f41", "sha256": "5d78364d4c239d06d4b57178c0630a263c7e89f8e023bff1856ef20938c63be0"}, "downloads": -1, "filename": "dyneusr-0.3.4.tar.gz", "has_sig": false, "md5_digest": "199b36a437c5ce481852f4b2f3251f41", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 52551, "upload_time": "2019-06-04T22:26:59", "upload_time_iso_8601": "2019-06-04T22:26:59.714264Z", "url": "https://files.pythonhosted.org/packages/40/c6/4d1bf6e58a7543c7167448918eddf4185222cf80d94df0ab07bc4f4b72c8/dyneusr-0.3.4.tar.gz", "yanked": false}], "0.3.5": [{"comment_text": "", "digests": {"md5": "33bee31df6d599faf878809670a61def", "sha256": "8bd0dbfab3818094541746ed5e3c3d9a8b846ed529bc300a36b568f51af11634"}, "downloads": -1, "filename": "dyneusr-0.3.5-py3-none-any.whl", "has_sig": false, "md5_digest": "33bee31df6d599faf878809670a61def", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 59584, "upload_time": "2020-04-01T00:19:01", "upload_time_iso_8601": "2020-04-01T00:19:01.970190Z", "url": "https://files.pythonhosted.org/packages/bd/a4/aab43a0e4eb9ccb3cb117d86060761635308e4461508d0c8efdcb62e87d1/dyneusr-0.3.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "50a18a9acf48e42c219ce4c8dcb000e0", "sha256": "1ed0fae9528506ef9dc266cef936171e7d49b45665193dec0266b7c4047b60c0"}, "downloads": -1, "filename": "dyneusr-0.3.5.tar.gz", "has_sig": false, "md5_digest": "50a18a9acf48e42c219ce4c8dcb000e0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 52584, "upload_time": "2020-04-01T00:19:03", "upload_time_iso_8601": "2020-04-01T00:19:03.507270Z", "url": "https://files.pythonhosted.org/packages/54/dc/590016f1fba45c5ad9e2a3db3ef70eabc7369031c4e1f7c6337b95db2315/dyneusr-0.3.5.tar.gz", "yanked": false}], "0.3.6": [{"comment_text": "", "digests": {"md5": "d861b59ba7759e4b0cf65e39df13c675", "sha256": "b35cd43f16310866a7445f8a391ddc3ba5bb84207f8f03dc6811625d297cfdef"}, "downloads": -1, "filename": "dyneusr-0.3.6-py3-none-any.whl", "has_sig": false, "md5_digest": "d861b59ba7759e4b0cf65e39df13c675", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 59925, "upload_time": "2020-04-02T21:54:43", "upload_time_iso_8601": "2020-04-02T21:54:43.017011Z", "url": "https://files.pythonhosted.org/packages/7e/06/3b0e685b65aac90ae3b9c71f6527305ed8aac28fb3aff4a536a5d5863848/dyneusr-0.3.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "82e928914594c24df0d47697c82b72c0", "sha256": "16108d42f2f272cb697b19a4e153dd962afc5967f10ebd5b431c3600f9d83911"}, "downloads": -1, "filename": "dyneusr-0.3.6.tar.gz", "has_sig": false, "md5_digest": "82e928914594c24df0d47697c82b72c0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 53274, "upload_time": "2020-04-02T21:54:44", "upload_time_iso_8601": "2020-04-02T21:54:44.260581Z", "url": "https://files.pythonhosted.org/packages/11/4c/0fdf3591abd122feb9af240c16dea76eceb69064602d9c8ea523cc8b6de0/dyneusr-0.3.6.tar.gz", "yanked": false}], "0.3.7": [{"comment_text": "", "digests": {"md5": "3356fd8ed50900e1a4b684b52f2aba78", "sha256": "7efa09796dcc9b1e8ac5e5f81868e412138c6352f61eb64c415bc7177799955a"}, "downloads": -1, "filename": "dyneusr-0.3.7-py3-none-any.whl", "has_sig": false, "md5_digest": "3356fd8ed50900e1a4b684b52f2aba78", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 59949, "upload_time": "2020-04-02T22:42:44", "upload_time_iso_8601": "2020-04-02T22:42:44.048247Z", "url": "https://files.pythonhosted.org/packages/93/59/ed98bb732866faf978478cfe7335debedaaebfa0bc423950830d91af32a3/dyneusr-0.3.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "87c94f93747b2acc917f48e64ad9b3fd", "sha256": "901fe2b66085316206e2d019543826912df382c5cac262b2cf55c77735a86ec0"}, "downloads": -1, "filename": "dyneusr-0.3.7.tar.gz", "has_sig": false, "md5_digest": "87c94f93747b2acc917f48e64ad9b3fd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 53288, "upload_time": "2020-04-02T22:42:46", "upload_time_iso_8601": "2020-04-02T22:42:46.724837Z", "url": "https://files.pythonhosted.org/packages/9c/f5/13a8fc072c03fd3cee72cd47db711079e6b45b1f158708cc0634a1653555/dyneusr-0.3.7.tar.gz", "yanked": false}], "0.3.8": [{"comment_text": "", "digests": {"md5": "6ca00b64b006433da42d1283f444404e", "sha256": "09a8aa7829c1be192adecb17d7f62d5a360ff696cb0305d61612bf609d4e70f1"}, "downloads": -1, "filename": "dyneusr-0.3.8-py3-none-any.whl", "has_sig": false, "md5_digest": "6ca00b64b006433da42d1283f444404e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 60041, "upload_time": "2020-04-08T18:57:10", "upload_time_iso_8601": "2020-04-08T18:57:10.559098Z", "url": "https://files.pythonhosted.org/packages/b0/e6/63883f7e66640d5900a8cbde0ff1f060cfe588a9bcf0cbed5cf7f1a8c746/dyneusr-0.3.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "22122da7f5f8add4617d1cbf6d72268b", "sha256": "10e1246aa6a7f9f579998a35400985374f6a548d2ca17ce17f6383ff2e3bd96f"}, "downloads": -1, "filename": "dyneusr-0.3.8.tar.gz", "has_sig": false, "md5_digest": "22122da7f5f8add4617d1cbf6d72268b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 53388, "upload_time": "2020-04-08T18:57:13", "upload_time_iso_8601": "2020-04-08T18:57:13.635427Z", "url": "https://files.pythonhosted.org/packages/94/99/2d95bfa76fa9e1ef40eaf39e3f8996a997c336ddb7d5bed3c5e7a77e7926/dyneusr-0.3.8.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6ca00b64b006433da42d1283f444404e", "sha256": "09a8aa7829c1be192adecb17d7f62d5a360ff696cb0305d61612bf609d4e70f1"}, "downloads": -1, "filename": "dyneusr-0.3.8-py3-none-any.whl", "has_sig": false, "md5_digest": "6ca00b64b006433da42d1283f444404e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 60041, "upload_time": "2020-04-08T18:57:10", "upload_time_iso_8601": "2020-04-08T18:57:10.559098Z", "url": "https://files.pythonhosted.org/packages/b0/e6/63883f7e66640d5900a8cbde0ff1f060cfe588a9bcf0cbed5cf7f1a8c746/dyneusr-0.3.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "22122da7f5f8add4617d1cbf6d72268b", "sha256": "10e1246aa6a7f9f579998a35400985374f6a548d2ca17ce17f6383ff2e3bd96f"}, "downloads": -1, "filename": "dyneusr-0.3.8.tar.gz", "has_sig": false, "md5_digest": "22122da7f5f8add4617d1cbf6d72268b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 53388, "upload_time": "2020-04-08T18:57:13", "upload_time_iso_8601": "2020-04-08T18:57:13.635427Z", "url": "https://files.pythonhosted.org/packages/94/99/2d95bfa76fa9e1ef40eaf39e3f8996a997c336ddb7d5bed3c5e7a77e7926/dyneusr-0.3.8.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:48:38 2020"}