{"info": {"author": "Guy Willett", "author_email": "<guy@chamsoft.co>", "bugtrack_url": null, "classifiers": ["Framework :: Django", "Framework :: Django :: 2.1", "Framework :: Django :: 2.2", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "# Django Searchable Encrypted Fields\nThis package is for you if you would like to encrypt model field data \"in app\" - ie before it is sent to the database.\n\n**Why another encrypted field package?**\n\n1. We use AES-256 encryption with GCM mode (via the Pycryptodome library).\n2. It is easy to generate appropriate encryption keys with `secrets.token_hex(32)` from the standard library.\n3. You can make 'exact' search lookups when also using the SearchField.\n\n## Install & Setup\n```shell\n$ pip install django-searchable-encrypted-fields\n```\n```python\n# in settings.py\nINSTALLED_APPS += [\"encrypted_fields\"]\n\n# A list of hex-encoded 32 byte keys\n# You only need one unless/until rotating keys\nFIELD_ENCRYPTION_KEYS = [\n    \"f164ec6bd6fbc4aef5647abc15199da0f9badcc1d2127bde2087ae0d794a9a0b\"\n]\n```\n\n## Intro\nThis package provides two types of model field for Django.\n1. A series of **EncryptedField** classes which can be used by themselves and work just like their regular Django counterparts. Contents are transparently encrypted/decrypted.\n2. A **SearchField** which can be used in conjunction with any EncryptedField. Values are concatentaed with a `hash_key` and then hashed with SHA256 before storing in a separate field. This means 'exact' searches can be performed.\n\nThis is probably best demonstrated by example:\n\n## Using a stand-alone EncryptedField\n```python\nfrom encrypted_fields import fields\n\nclass Person(models.Model):\n    favorite_number = fields.EncryptedIntegerField(help_text=\"Your favorite number.\")\n```\nYou can use all the usual field arguments and add validators as normal.\nNote, however, that primary_key, unique and db_index are not supported because they do not make sense for encrypted data.\n\n\n## Using a SearchField along with an EncryptedField\n```python\nclass Person(models.Model):\n    _name_data = fields.EncryptedCharField(max_length=50, editable=False)\n    name = fields.SearchField(hash_key=\"f164ec6bd...7ae0d794a9a0b\", encrypted_field_name=\"_name_data\", )\n    favorite_number = fields.EncryptedIntegerField()\n    city = models.CharField(max_length=255) # regular Django model field\n```\nYou can then use it like:\n```python\n# \"Jo\" is hashed and stored in 'name' as well as symmetrically encrypted and stored in '_name_data'\nPerson.objects.create(name=\"Jo\", favorite_number=7, city=\"London\")\nperson = Person.objects.get(name=\"Jo\")\nassert person.name == \"Jo\"\nassert person.favorite_number == 7\n\nperson = Person.objects.get(city=\"London\")\nassert person.name == \"Jo\" . # the data is taken from '_name_data', which decrypts it first.\n```\nYou can safely update like this:\n```python\nperson.name = \"Simon\"\nperson.save()\n```\nBut when using `update()` you need to provide the value to both fields:\n```python\nPerson.objects.filter(name=\"Jo\").update(name=\"Bob\", _name_data=\"Bob\")\n```\nA SearchField inherits the validators and formfield (widget) from its associated EncryptedField. So:\n\n1. Do not add validators or form widgets to SearchFields (they will be ignored), add them to the associated EncryptedField instead.\n2. Do not include the EncryptedField in forms, instead just display the SearchField.\n\n## Included EncryptedField classes\nThe following are included:\n```python\n\"EncryptedFieldMixin\",\n\"EncryptedTextField\",\n\"EncryptedCharField\",\n\"EncryptedEmailField\",\n\"EncryptedIntegerField\",\n\"EncryptedDateField\",\n\"EncryptedDateTimeField\",\n\"EncryptedBigIntegerField\",\n\"EncryptedPositiveIntegerField\",\n\"EncryptedPositiveSmallIntegerField\",\n\"EncryptedSmallIntegerField\",\n```\nNote that, although untested, you should be able to extend other regular Django model field classes like this:\n```python\nclass EncryptedIPAddressField(EncryptedFieldMixin, models.GenericIPAddressField):\n    pass\n```\nPlease let us know if you have problems when doing this.\n## Generating Encryption Keys\nYou can use `secrets` from the standard library. It will print appropriate hex-encoded keys to the terminal, ready to be used in `settings.FIELD_ENCRYPTION_KEYS` or as a hash_key for a SearchField:\n```shell\n$ python manage.py shell\n>>> import secrets\n>>> secrets.token_hex(32)\n```\nNote: Thanks to Andrew Mendoza for the suggestion.\n\nNote: encryption keys **must** be hex encoded and 32 bytes\n\n**Important**: use different hash_key values for each SearchField and make sure they are different from any keys in `settings.FIELD_ENCRYPTION_KEYS`.\n## Rotating Encryption Keys\nIf you want to rotate the encryption key just prepend `settings.FIELD_ENCRYPTION_KEYS` with a new key. This new key (the first in the list) will be used for encrypting/decrypting all data. If decrypting data fails (because it was encrypted with an older key), each key in the list is tried.\n## Compatability\n`django-searchable-encrypted-fields` is tested with Django(2.1, 2.2) on Python(3.6, 3.7) using SQLite and PostgreSQL.\n\nTest coverage is at 96%.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/guywillett/django-searchable-encrypted-fields", "keywords": "", "license": "MIT", "maintainer": "Guy Willett", "maintainer_email": "<guy@chamsoft.co>", "name": "django-searchable-encrypted-fields", "package_url": "https://pypi.org/project/django-searchable-encrypted-fields/", "platform": "", "project_url": "https://pypi.org/project/django-searchable-encrypted-fields/", "project_urls": {"Homepage": "https://gitlab.com/guywillett/django-searchable-encrypted-fields"}, "release_url": "https://pypi.org/project/django-searchable-encrypted-fields/0.1.4/", "requires_dist": null, "requires_python": "", "summary": "Django model fields encrypted using Pycryptodome AES-256 GCM.", "version": "0.1.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Django Searchable Encrypted Fields</h1>\n<p>This package is for you if you would like to encrypt model field data \"in app\" - ie before it is sent to the database.</p>\n<p><strong>Why another encrypted field package?</strong></p>\n<ol>\n<li>We use AES-256 encryption with GCM mode (via the Pycryptodome library).</li>\n<li>It is easy to generate appropriate encryption keys with <code>secrets.token_hex(32)</code> from the standard library.</li>\n<li>You can make 'exact' search lookups when also using the SearchField.</li>\n</ol>\n<h2>Install &amp; Setup</h2>\n<pre>$ pip install django-searchable-encrypted-fields\n</pre>\n<pre><span class=\"c1\"># in settings.py</span>\n<span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"s2\">\"encrypted_fields\"</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># A list of hex-encoded 32 byte keys</span>\n<span class=\"c1\"># You only need one unless/until rotating keys</span>\n<span class=\"n\">FIELD_ENCRYPTION_KEYS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s2\">\"f164ec6bd6fbc4aef5647abc15199da0f9badcc1d2127bde2087ae0d794a9a0b\"</span>\n<span class=\"p\">]</span>\n</pre>\n<h2>Intro</h2>\n<p>This package provides two types of model field for Django.</p>\n<ol>\n<li>A series of <strong>EncryptedField</strong> classes which can be used by themselves and work just like their regular Django counterparts. Contents are transparently encrypted/decrypted.</li>\n<li>A <strong>SearchField</strong> which can be used in conjunction with any EncryptedField. Values are concatentaed with a <code>hash_key</code> and then hashed with SHA256 before storing in a separate field. This means 'exact' searches can be performed.</li>\n</ol>\n<p>This is probably best demonstrated by example:</p>\n<h2>Using a stand-alone EncryptedField</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">encrypted_fields</span> <span class=\"kn\">import</span> <span class=\"n\">fields</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Person</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">favorite_number</span> <span class=\"o\">=</span> <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">EncryptedIntegerField</span><span class=\"p\">(</span><span class=\"n\">help_text</span><span class=\"o\">=</span><span class=\"s2\">\"Your favorite number.\"</span><span class=\"p\">)</span>\n</pre>\n<p>You can use all the usual field arguments and add validators as normal.\nNote, however, that primary_key, unique and db_index are not supported because they do not make sense for encrypted data.</p>\n<h2>Using a SearchField along with an EncryptedField</h2>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Person</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">_name_data</span> <span class=\"o\">=</span> <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">EncryptedCharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"n\">editable</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">SearchField</span><span class=\"p\">(</span><span class=\"n\">hash_key</span><span class=\"o\">=</span><span class=\"s2\">\"f164ec6bd...7ae0d794a9a0b\"</span><span class=\"p\">,</span> <span class=\"n\">encrypted_field_name</span><span class=\"o\">=</span><span class=\"s2\">\"_name_data\"</span><span class=\"p\">,</span> <span class=\"p\">)</span>\n    <span class=\"n\">favorite_number</span> <span class=\"o\">=</span> <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">EncryptedIntegerField</span><span class=\"p\">()</span>\n    <span class=\"n\">city</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">255</span><span class=\"p\">)</span> <span class=\"c1\"># regular Django model field</span>\n</pre>\n<p>You can then use it like:</p>\n<pre><span class=\"c1\"># \"Jo\" is hashed and stored in 'name' as well as symmetrically encrypted and stored in '_name_data'</span>\n<span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"Jo\"</span><span class=\"p\">,</span> <span class=\"n\">favorite_number</span><span class=\"o\">=</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"n\">city</span><span class=\"o\">=</span><span class=\"s2\">\"London\"</span><span class=\"p\">)</span>\n<span class=\"n\">person</span> <span class=\"o\">=</span> <span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"Jo\"</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">person</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s2\">\"Jo\"</span>\n<span class=\"k\">assert</span> <span class=\"n\">person</span><span class=\"o\">.</span><span class=\"n\">favorite_number</span> <span class=\"o\">==</span> <span class=\"mi\">7</span>\n\n<span class=\"n\">person</span> <span class=\"o\">=</span> <span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">city</span><span class=\"o\">=</span><span class=\"s2\">\"London\"</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">person</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s2\">\"Jo\"</span> <span class=\"o\">.</span> <span class=\"c1\"># the data is taken from '_name_data', which decrypts it first.</span>\n</pre>\n<p>You can safely update like this:</p>\n<pre><span class=\"n\">person</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">\"Simon\"</span>\n<span class=\"n\">person</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n</pre>\n<p>But when using <code>update()</code> you need to provide the value to both fields:</p>\n<pre><span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"Jo\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"Bob\"</span><span class=\"p\">,</span> <span class=\"n\">_name_data</span><span class=\"o\">=</span><span class=\"s2\">\"Bob\"</span><span class=\"p\">)</span>\n</pre>\n<p>A SearchField inherits the validators and formfield (widget) from its associated EncryptedField. So:</p>\n<ol>\n<li>Do not add validators or form widgets to SearchFields (they will be ignored), add them to the associated EncryptedField instead.</li>\n<li>Do not include the EncryptedField in forms, instead just display the SearchField.</li>\n</ol>\n<h2>Included EncryptedField classes</h2>\n<p>The following are included:</p>\n<pre><span class=\"s2\">\"EncryptedFieldMixin\"</span><span class=\"p\">,</span>\n<span class=\"s2\">\"EncryptedTextField\"</span><span class=\"p\">,</span>\n<span class=\"s2\">\"EncryptedCharField\"</span><span class=\"p\">,</span>\n<span class=\"s2\">\"EncryptedEmailField\"</span><span class=\"p\">,</span>\n<span class=\"s2\">\"EncryptedIntegerField\"</span><span class=\"p\">,</span>\n<span class=\"s2\">\"EncryptedDateField\"</span><span class=\"p\">,</span>\n<span class=\"s2\">\"EncryptedDateTimeField\"</span><span class=\"p\">,</span>\n<span class=\"s2\">\"EncryptedBigIntegerField\"</span><span class=\"p\">,</span>\n<span class=\"s2\">\"EncryptedPositiveIntegerField\"</span><span class=\"p\">,</span>\n<span class=\"s2\">\"EncryptedPositiveSmallIntegerField\"</span><span class=\"p\">,</span>\n<span class=\"s2\">\"EncryptedSmallIntegerField\"</span><span class=\"p\">,</span>\n</pre>\n<p>Note that, although untested, you should be able to extend other regular Django model field classes like this:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">EncryptedIPAddressField</span><span class=\"p\">(</span><span class=\"n\">EncryptedFieldMixin</span><span class=\"p\">,</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">GenericIPAddressField</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</pre>\n<p>Please let us know if you have problems when doing this.</p>\n<h2>Generating Encryption Keys</h2>\n<p>You can use <code>secrets</code> from the standard library. It will print appropriate hex-encoded keys to the terminal, ready to be used in <code>settings.FIELD_ENCRYPTION_KEYS</code> or as a hash_key for a SearchField:</p>\n<pre>$ python manage.py shell\n&gt;&gt;&gt; import secrets\n&gt;&gt;&gt; secrets.token_hex<span class=\"o\">(</span><span class=\"m\">32</span><span class=\"o\">)</span>\n</pre>\n<p>Note: Thanks to Andrew Mendoza for the suggestion.</p>\n<p>Note: encryption keys <strong>must</strong> be hex encoded and 32 bytes</p>\n<p><strong>Important</strong>: use different hash_key values for each SearchField and make sure they are different from any keys in <code>settings.FIELD_ENCRYPTION_KEYS</code>.</p>\n<h2>Rotating Encryption Keys</h2>\n<p>If you want to rotate the encryption key just prepend <code>settings.FIELD_ENCRYPTION_KEYS</code> with a new key. This new key (the first in the list) will be used for encrypting/decrypting all data. If decrypting data fails (because it was encrypted with an older key), each key in the list is tried.</p>\n<h2>Compatability</h2>\n<p><code>django-searchable-encrypted-fields</code> is tested with Django(2.1, 2.2) on Python(3.6, 3.7) using SQLite and PostgreSQL.</p>\n<p>Test coverage is at 96%.</p>\n\n          </div>"}, "last_serial": 6451968, "releases": {"0.1.3": [{"comment_text": "", "digests": {"md5": "372d06de6fc471d4328d7979d315b5ad", "sha256": "7e5008d3d496193e48d9e0bb099d7411733d8db2ee8e81a54a99cfac613d3da1"}, "downloads": -1, "filename": "django-searchable-encrypted-fields-0.1.3.tar.gz", "has_sig": false, "md5_digest": "372d06de6fc471d4328d7979d315b5ad", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6551, "upload_time": "2019-04-11T16:33:20", "upload_time_iso_8601": "2019-04-11T16:33:20.552352Z", "url": "https://files.pythonhosted.org/packages/d9/42/436a1f9287b9a6c39f6cc8afb671b2b6c2ed07ed8b1418bf1e3c39856085/django-searchable-encrypted-fields-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "5e77e4349306bc5dcdefc25e0fe60bbf", "sha256": "47e2f25e4b64a6139893e9d4517cae53700ad1d15fe6d6194940cc20fa0a6f75"}, "downloads": -1, "filename": "django-searchable-encrypted-fields-0.1.4.tar.gz", "has_sig": false, "md5_digest": "5e77e4349306bc5dcdefc25e0fe60bbf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6618, "upload_time": "2020-01-14T14:32:01", "upload_time_iso_8601": "2020-01-14T14:32:01.045118Z", "url": "https://files.pythonhosted.org/packages/15/68/b87f05eb579f5fdceefc3a3b01c5ea8e48a98b589834db01bb4f13af5c99/django-searchable-encrypted-fields-0.1.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5e77e4349306bc5dcdefc25e0fe60bbf", "sha256": "47e2f25e4b64a6139893e9d4517cae53700ad1d15fe6d6194940cc20fa0a6f75"}, "downloads": -1, "filename": "django-searchable-encrypted-fields-0.1.4.tar.gz", "has_sig": false, "md5_digest": "5e77e4349306bc5dcdefc25e0fe60bbf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6618, "upload_time": "2020-01-14T14:32:01", "upload_time_iso_8601": "2020-01-14T14:32:01.045118Z", "url": "https://files.pythonhosted.org/packages/15/68/b87f05eb579f5fdceefc3a3b01c5ea8e48a98b589834db01bb4f13af5c99/django-searchable-encrypted-fields-0.1.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:53:42 2020"}