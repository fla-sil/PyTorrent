{"info": {"author": "Rajesh Hegde", "author_email": "rajesh.p.hegde@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Intended Audience :: System Administrators"], "description": "# gcredstash\n\n## Installation\n1. `pip install gcredstash`\n\n## Dependencies\n`gcredstash` uses following Google Cloud services\n* Google Cloud KMS\n* Google Datastore\n\nMake sure `gcredstash` have access to the above services.\n\n\n## Introduction\nSoftware systems often need access to some shared credential. For example, your web application needs access to a database password, or an API key for some third party service.\n\n`gcredstash` is a very simple, easy to use credential management and distribution system that uses Google Cloud Key Management Service (KMS) for key storage, and Datastore for credential storage.\n\n## Usage\n### Command-line\n#### Create KeyRing\n`gcredstash --project-id=<gcp-project-id> --location-id=global create-keyring <your-first-keyring-name>`\n\n#### Create CryptoKey in KeyRing\n`gcredstash --project-id=<gcp-project-id> --location-id=global --keyring-id=<your-keyring-name>  create-key `<your-first-key-name>\n\n#### Command-line reference \n```\nusage: gcredstash [-h] [--project-id PROJECT_ID] [--location-id LOCATION_ID]\n               [--keyring-id KEY_RING_ID] [--key-id KEY_ID]\n               {create-keyring,create-key,get,put,get-all,list} ...\n\nA Credential Management Tool using Google Cloud KMS and Datastore\n\npositional arguments:\n  {create-keyring,create-key,get,put,get-all,list}\n                        Try commands like \"gcredstash get -h\" to get sub command's options\n    create-keyring      Creates a KeyRing in the given location (e.g. global)\n    create-key          Creates a CryptoKey within a KeyRing in the given\n                        location\n    get                 Get the cipher from KeyStore and decrypted the\n                        credential\n    put                 Encrypt the credential and put the cipher on KeyStore\n    get-all             Get the cipher from KeyStore and decrypted all the\n                        credentials\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --project-id PROJECT_ID\n                        GCP Project Id\n  --location-id LOCATION_ID\n                        Google Cloud KMS Location Id\n  --keyring-id KEY_RING_ID\n                        Google Cloud KMS KeyRing Id\n  --key-id KEY_ID       Google Cloud KMS CryptoKey Id\n\n\n```\n\n#### Set default values in ENV\nYou can set the default values for project_id, location etc in ENV and `gcredstash` is coded to read those variables,\nHere is the list of variables `gcredstash` recognises,\n\n```\nGCREDSTASH_GCP_PROJECT_ID\nGCREDSTASH_DEFAULT_KEY_RING_ID\nGCREDSTASH_DEFAULT_LOCATION_ID\nGCREDSTASH_DEFAULT_CRYPTO_KEY_ID\nGCREDSTASH_DEFAULT_DATASTORE_KIND\n```\n\n### Python Package\n```\n# import statements\nfrom gcredstash import GoogleKMS\nfrom gcredstash import KeyStore\nimport googleapiclient.discovery\n\n# create keystore instance\nkey_store = KeyStore()\n\n# create google kms api client \nkms_client = googleapiclient.discovery.build('cloudkms', 'v1')\n\n# create kms instance\nkms = GoogleKMS(kms_client, '<project-id>', '<location-id>', '<keyring-id>', key_store)\n \n# store credential\nkms.put(<crypto-key-id>, <datastore-kind>, <credential-name>, <credential-plaintext>)\n\n```\n\n#### Class References\n```\nclass KeyStore(__builtin__.object)\n    Methods defined here:\n    \n    __init__(self, project_id=None, namespace=None)\n    \n    get(self, kind, name)\n        Get value associated with the name from Datastore\n        :param kind: Collection name\n        :param name: Datastore key\n        :return: str\n    \n    list(self, kind)\n        :param kind: Collection name\n        :return: list of Datastore keys\n    \n    put(self, kind, name, content)\n        Put value on the Datastore\n        :param kind: Collection name\n        :param name: Datastore key\n        :param content: value to store\n        :return:\n\n\nclass GoogleKMS(__builtin__.object)\n    Methods defined here:\n    \n    __init__(self, client, project_id, location_id, key_ring_id, key_store)\n    \n    get(self, key_id, kind, name)\n        Get the cipher from KeyStore and decrypted the credential\n        :param key_id: CryptKey id\n        :param kind: Keystore collection name\n        :param name: Name of the credential to fetch ex: PRODUCTION_DATABASE_PASSWORD\n        :return: Decrypted text\n    \n    get_all(self, key_id, kind)\n        Get the cipher from KeyStore and decrypted all the credentials\n        :param key_id: CryptKey id\n        :param kind: Keystore collection name\n        \n        :return: Dictionary of credentials\n    \n    put(self, key_id, kind, name, value)\n        Encrypt the credential and put the cipher on KeyStore\n        :param key_id: CryptKey id\n        :param kind: Keystore collection name\n        :param name: Name of the credential to store ex: PRODUCTION_DATABASE_PASSWORD\n        :param value: Value for the credential\n        :return:\n    \n    put_all(self, key_id, kind, credentials)\n        Encrypt all the credential and store the cipher on KeyStore\n        :param key_id: CryptKey id\n        :param kind: Keystore collection name\n        :param credentials: Credentials {name: value} dictionary\n        \n        :return:\n    \n    ----------------------------------------------------------------------\n    Static methods defined here:\n    \n    create_key(client, project_id, location_id, key_ring_id, key_id)\n        Creates a CryptoKey within a KeyRing in the given location\n        :param client: Google Cloud KMS client\n        :param project_id: GCP Project id\n        :param location_id: KeyRing location id\n        :param key_ring_id: KeyRing id inside the location\n        :param key_id: New unique key name\n        :return: Key creation response object\n    \n    create_key_ring(client, project_id, location_id, key_ring_id)\n        Creates a KeyRing in the given location (e.g. global)\n        :param client: Google Cloud KMS client\n        :param project_id: GCP Project Id\n        :param location_id: KeyRing location id\n        :param key_ring_id: New unique key ring name\n        :return: KeyRing creation response object\n```\n\n## Credits\n* https://github.com/fugue/credstash\n* https://github.com/tly1980/gcreds", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/RajeshHegde/gcredstash", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "gcredstash", "package_url": "https://pypi.org/project/gcredstash/", "platform": "", "project_url": "https://pypi.org/project/gcredstash/", "project_urls": {"Homepage": "https://github.com/RajeshHegde/gcredstash"}, "release_url": "https://pypi.org/project/gcredstash/1.0.2/", "requires_dist": null, "requires_python": "", "summary": "A Credential Management Tool using Google Cloud KMS and Datastore", "version": "1.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>gcredstash</h1>\n<h2>Installation</h2>\n<ol>\n<li><code>pip install gcredstash</code></li>\n</ol>\n<h2>Dependencies</h2>\n<p><code>gcredstash</code> uses following Google Cloud services</p>\n<ul>\n<li>Google Cloud KMS</li>\n<li>Google Datastore</li>\n</ul>\n<p>Make sure <code>gcredstash</code> have access to the above services.</p>\n<h2>Introduction</h2>\n<p>Software systems often need access to some shared credential. For example, your web application needs access to a database password, or an API key for some third party service.</p>\n<p><code>gcredstash</code> is a very simple, easy to use credential management and distribution system that uses Google Cloud Key Management Service (KMS) for key storage, and Datastore for credential storage.</p>\n<h2>Usage</h2>\n<h3>Command-line</h3>\n<h4>Create KeyRing</h4>\n<p><code>gcredstash --project-id=&lt;gcp-project-id&gt; --location-id=global create-keyring &lt;your-first-keyring-name&gt;</code></p>\n<h4>Create CryptoKey in KeyRing</h4>\n<p><code>gcredstash --project-id=&lt;gcp-project-id&gt; --location-id=global --keyring-id=&lt;your-keyring-name&gt; create-key</code>&lt;your-first-key-name&gt;</p>\n<h4>Command-line reference</h4>\n<pre><code>usage: gcredstash [-h] [--project-id PROJECT_ID] [--location-id LOCATION_ID]\n               [--keyring-id KEY_RING_ID] [--key-id KEY_ID]\n               {create-keyring,create-key,get,put,get-all,list} ...\n\nA Credential Management Tool using Google Cloud KMS and Datastore\n\npositional arguments:\n  {create-keyring,create-key,get,put,get-all,list}\n                        Try commands like \"gcredstash get -h\" to get sub command's options\n    create-keyring      Creates a KeyRing in the given location (e.g. global)\n    create-key          Creates a CryptoKey within a KeyRing in the given\n                        location\n    get                 Get the cipher from KeyStore and decrypted the\n                        credential\n    put                 Encrypt the credential and put the cipher on KeyStore\n    get-all             Get the cipher from KeyStore and decrypted all the\n                        credentials\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --project-id PROJECT_ID\n                        GCP Project Id\n  --location-id LOCATION_ID\n                        Google Cloud KMS Location Id\n  --keyring-id KEY_RING_ID\n                        Google Cloud KMS KeyRing Id\n  --key-id KEY_ID       Google Cloud KMS CryptoKey Id\n\n\n</code></pre>\n<h4>Set default values in ENV</h4>\n<p>You can set the default values for project_id, location etc in ENV and <code>gcredstash</code> is coded to read those variables,\nHere is the list of variables <code>gcredstash</code> recognises,</p>\n<pre><code>GCREDSTASH_GCP_PROJECT_ID\nGCREDSTASH_DEFAULT_KEY_RING_ID\nGCREDSTASH_DEFAULT_LOCATION_ID\nGCREDSTASH_DEFAULT_CRYPTO_KEY_ID\nGCREDSTASH_DEFAULT_DATASTORE_KIND\n</code></pre>\n<h3>Python Package</h3>\n<pre><code># import statements\nfrom gcredstash import GoogleKMS\nfrom gcredstash import KeyStore\nimport googleapiclient.discovery\n\n# create keystore instance\nkey_store = KeyStore()\n\n# create google kms api client \nkms_client = googleapiclient.discovery.build('cloudkms', 'v1')\n\n# create kms instance\nkms = GoogleKMS(kms_client, '&lt;project-id&gt;', '&lt;location-id&gt;', '&lt;keyring-id&gt;', key_store)\n \n# store credential\nkms.put(&lt;crypto-key-id&gt;, &lt;datastore-kind&gt;, &lt;credential-name&gt;, &lt;credential-plaintext&gt;)\n\n</code></pre>\n<h4>Class References</h4>\n<pre><code>class KeyStore(__builtin__.object)\n    Methods defined here:\n    \n    __init__(self, project_id=None, namespace=None)\n    \n    get(self, kind, name)\n        Get value associated with the name from Datastore\n        :param kind: Collection name\n        :param name: Datastore key\n        :return: str\n    \n    list(self, kind)\n        :param kind: Collection name\n        :return: list of Datastore keys\n    \n    put(self, kind, name, content)\n        Put value on the Datastore\n        :param kind: Collection name\n        :param name: Datastore key\n        :param content: value to store\n        :return:\n\n\nclass GoogleKMS(__builtin__.object)\n    Methods defined here:\n    \n    __init__(self, client, project_id, location_id, key_ring_id, key_store)\n    \n    get(self, key_id, kind, name)\n        Get the cipher from KeyStore and decrypted the credential\n        :param key_id: CryptKey id\n        :param kind: Keystore collection name\n        :param name: Name of the credential to fetch ex: PRODUCTION_DATABASE_PASSWORD\n        :return: Decrypted text\n    \n    get_all(self, key_id, kind)\n        Get the cipher from KeyStore and decrypted all the credentials\n        :param key_id: CryptKey id\n        :param kind: Keystore collection name\n        \n        :return: Dictionary of credentials\n    \n    put(self, key_id, kind, name, value)\n        Encrypt the credential and put the cipher on KeyStore\n        :param key_id: CryptKey id\n        :param kind: Keystore collection name\n        :param name: Name of the credential to store ex: PRODUCTION_DATABASE_PASSWORD\n        :param value: Value for the credential\n        :return:\n    \n    put_all(self, key_id, kind, credentials)\n        Encrypt all the credential and store the cipher on KeyStore\n        :param key_id: CryptKey id\n        :param kind: Keystore collection name\n        :param credentials: Credentials {name: value} dictionary\n        \n        :return:\n    \n    ----------------------------------------------------------------------\n    Static methods defined here:\n    \n    create_key(client, project_id, location_id, key_ring_id, key_id)\n        Creates a CryptoKey within a KeyRing in the given location\n        :param client: Google Cloud KMS client\n        :param project_id: GCP Project id\n        :param location_id: KeyRing location id\n        :param key_ring_id: KeyRing id inside the location\n        :param key_id: New unique key name\n        :return: Key creation response object\n    \n    create_key_ring(client, project_id, location_id, key_ring_id)\n        Creates a KeyRing in the given location (e.g. global)\n        :param client: Google Cloud KMS client\n        :param project_id: GCP Project Id\n        :param location_id: KeyRing location id\n        :param key_ring_id: New unique key ring name\n        :return: KeyRing creation response object\n</code></pre>\n<h2>Credits</h2>\n<ul>\n<li><a href=\"https://github.com/fugue/credstash\" rel=\"nofollow\">https://github.com/fugue/credstash</a></li>\n<li><a href=\"https://github.com/tly1980/gcreds\" rel=\"nofollow\">https://github.com/tly1980/gcreds</a></li>\n</ul>\n\n          </div>"}, "last_serial": 6062135, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "fba2f5503193f44c1be1a2b694037131", "sha256": "198e2b0dcf623c8ac7239abcf432632856717b9b5a7b59a59b49e50862412dc2"}, "downloads": -1, "filename": "gcredstash-1.0.0.tar.gz", "has_sig": false, "md5_digest": "fba2f5503193f44c1be1a2b694037131", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4923, "upload_time": "2018-03-11T16:52:02", "upload_time_iso_8601": "2018-03-11T16:52:02.921994Z", "url": "https://files.pythonhosted.org/packages/17/37/db41e4c03dcd13cd924072f0c8f40541c075f8feb01ca2433b92617cb292/gcredstash-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "6775a6042a8b54575916434e00c029a7", "sha256": "71e8a8e04ae2843dd884d5140f1cee80c7580e80f3bb0efd5d71c312b60e3b49"}, "downloads": -1, "filename": "gcredstash-1.0.1.tar.gz", "has_sig": false, "md5_digest": "6775a6042a8b54575916434e00c029a7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4903, "upload_time": "2018-03-25T09:32:57", "upload_time_iso_8601": "2018-03-25T09:32:57.921523Z", "url": "https://files.pythonhosted.org/packages/1f/91/8902cefd6539d97a1e54089d370efdba6e29531acaf64a26fdb8a994d3e5/gcredstash-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "f8542deca8f10b18a97eba97e4d022d7", "sha256": "a6550f63a329932836e2885807bd258bf0a3ca26443f0ff65f2fb4546f17c37b"}, "downloads": -1, "filename": "gcredstash-1.0.2.tar.gz", "has_sig": false, "md5_digest": "f8542deca8f10b18a97eba97e4d022d7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5565, "upload_time": "2019-11-01T07:21:00", "upload_time_iso_8601": "2019-11-01T07:21:00.568309Z", "url": "https://files.pythonhosted.org/packages/12/61/73503a9ae5d3f22c3ed6de7482587b2dddf583825989495a6097dc234018/gcredstash-1.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f8542deca8f10b18a97eba97e4d022d7", "sha256": "a6550f63a329932836e2885807bd258bf0a3ca26443f0ff65f2fb4546f17c37b"}, "downloads": -1, "filename": "gcredstash-1.0.2.tar.gz", "has_sig": false, "md5_digest": "f8542deca8f10b18a97eba97e4d022d7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5565, "upload_time": "2019-11-01T07:21:00", "upload_time_iso_8601": "2019-11-01T07:21:00.568309Z", "url": "https://files.pythonhosted.org/packages/12/61/73503a9ae5d3f22c3ed6de7482587b2dddf583825989495a6097dc234018/gcredstash-1.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:58:45 2020"}