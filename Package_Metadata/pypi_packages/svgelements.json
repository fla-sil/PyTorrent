{"info": {"author": "Tatarize", "author_email": "tatarize@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Multimedia :: Graphics", "Topic :: Multimedia :: Graphics :: Editors :: Vector-Based", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# svgelements\n\nParsing for SVG File, Path, Matrix, Angle, Length, Color, Point and other SVG Elements. The SVG spec defines a variety of elements which generally interoperate. In order to have a robust experience with SVGs we must be able to deal with the parsing and interactions of these elements.\n\nThis project began as part of `meerK40t` which does SVG loading of files for laser cutting. It attempts to more fully map out the SVG spec, objects, and paths, while remaining easy to use and highly backwards compatible.\n\n# License\n\nThis module is under a MIT License.\n\n\n# Installing\n`pip install svgelements`\n\nThen in a script:\n\n`from svgelements import *`\n\n# Requirements\n\nNone.\n\n# Compatibility\n\n`svgelements` is compatible with Python 2.7 and Python 3.6.  Support for 2.7 will be dropped at Python 2 End-Of-Life January 1, 2020.\n\nWe remain nominally backwards compatible with `svg.path`, passing the same robust tests in that project. There may be number of breaking changes. However, since `svgelements` permit a lot of leeway in what is accepted and how it's accepted, so it will have a huge degree of compatibility with projects seen and unseen. \n\n\n# Philosophy\n\nThe goal of this project is to provide SVG spec-like elements and structures. The SVG standard 1.1 and elements of 2.0 will be used to provide much of the decisions making for implementation objects. If there is a question on implementation and the SVG documentation has a methodology, that is the preferred methodology.\n\nThe primary goal is to make a more robust version of `svg.path` including other elements like `Point` and `Matrix` with clear emphasis on conforming to the SVG spec in all ways that realworld uses for SVG demands.\n\n`svgelements` should conform to the SVG Conforming Interpreter class (2.5.4. Conforming SVG Interpreters):\n\n>An SVG interpreter is a program which can parse and process SVG document fragments. Examples of SVG interpreters are server-side transcoding tools or optimizer (e.g., a tool which converts SVG content into modified SVG content) or analysis tools (e.g., a tool which extracts the text content from SVG content, or a validity checker).\n\nReal world functionality demands we must correctly and reasonably provide reading, transcoding, and manipulation of SVG content.\n\n\n# Overview\n\nThe versatility of the project is provided through through expansive and highly intuitive dunder methods, and robust parsing of object parameters. Points, PathSegments, Paths, Shapes, Subpaths can be multiplied by a matrix. We can add Shapes, Paths, PathSegments, and Subpaths together. And many non-declared but functionally understandable elements are automatically parsed. Such as adding strings of path_d characters to a Path or multiplying an element by the SVG Transform string elements.\n\n## Point\n\nPoints define a single location in 2D space.\n\n* Point(x,y)\n* (x,y)\n* [x,y]\n* \"x, y\"\n* x + yj (complex number)\n* a class with .x and .y as methods.\n\n---\n\n    >>> Point(10,10) * \"rotate(90)\"\n    Point(-10,10)\n\n## Matrix\n\nMatrices define affine transformations of 2d space and objects.\n\n* Matrix.scale(s)\n* Matrix.scale(sx,sy)\n* Matrix.scale(sx,sy,px,py)\n* Matrix.rotate(angle)\n* Matrix.rotate(angle, px, py\n* Matrix.skew_x(angle)\n* Matrix.skew_x(angle, px, py)\n* Matrix.skew_y(angle)\n* Matrix.skew_y(angle, px, py)\n* Matrix.translate(tx)\n* Matrix.translate(tx, ty)\n* Transform string values.\n    * \"scale(s)\"\n    * \"scale(sx,sy)\"\n    * \"translate(20,20) scale(2)\"\n    * \"rotate(0.25 turns)\"\n    * Any valid SVG or CSS transform string will be accepted as a matrix.\n\n---\n\n    >>> Matrix(\"rotate(100grad)\")\n    Matrix(0, 1, -1, 0, 0, 0)\n\nThe matrix class also supports Length translates for x, and y. In some instances CSS transforms permit length transforms so \"translate(20cm, 200mm)\" are valid tranformations. However, these will cause issues for objects which require non-native units so it is expected that .render() will be called on these before they are used in a strange manner.\n\n## Path\n\nPaths define sequences of PathSegments that can map out any path element in SVG.\n\n* Path() object\n* String path_d value.\n\n---\n\n    >>> Path() + \"M0,0z\"\n    Path(Move(end=Point(0,0)), Close(start=Point(0,0), end=Point(0,0)))\n\n\n## Angle\n\nAngles define various changes in direction.\n\n* Angle.degrees(degree_angle)\n* Angle.radians(radians_angle)\n* Angle.turns(turns)\n* Angle.gradians(gradian_angles)\n* CSS angle string.\n    * \"20deg\"\n    * \"0.3turns\"\n    * \"1rad\"\n    * \"100grad\"\n\n---\n\n    >>> Point(0,100) * \"rotate(1turn)\"\n    Point(0,100)\n    >>> Point(0,100) * \"rotate(0.5turn)\"\n    Point(-0,-100)\n\n\n## Color\n\nColors define object color.\n\n* XHTML color names: \"red\", \"blue\", \"dark grey\", etc.\n* 3 digit hex: \"#F00\"\n* 4 digit hex: \"#FF00\"\n* 6 digit hex: \"#FF0000\"\n* 8 digit hex: \"#FFFF0000\"\n* \"RGB(r,g,b)\"\n* \"RGB(r%, g%, b%)\"\n\n---\n\n    >>> Circle(stroke=\"yellow\")\n    Circle(center=Point(0,0), r=1, stroke=\"#ffff00\")\n\n\n## Length\n\nLengths define the amount of linear space between two things.\n\n* \"20cm\"\n* \"200mm\"\n* \"3in\"\n* Length('200mm')\n\n\n# Examples\n\nParse an SVG file:\n\n    >>> svg = SVG(file)\n    >>> list(svgelements())\n\nMake a PathSegment\n\n    >>> Line((20,20), (40,40))\n    Line(start=Point(20,20), end=Point(40,40))\n\nRotate a PathSegment:\n\n    >>> Line((20,20), (40,40)) * Matrix.rotate(Angle.degrees(45))\n    Line(start=Point(0,28.284271247462), end=Point(0,56.568542494924))\n\nRotate a PathSegment with a parsed matrix:\n\n    >>> Line((20,20), (40,40)) * Matrix(\"Rotate(45)\")\n    Line(start=Point(0,28.284271247462), end=Point(0,56.568542494924))\n\nRotate a PathSegment with an implied parsed matrix:\n\n    >>> Line((20,20), (40,40)) * \"Rotate(45)\"\n    Line(start=Point(0,28.284271247462), end=Point(0,56.568542494924))\n\nRotate a Partial Path with an implied matrix:\n(Note: The SVG does not allow us to specify a start point for this invalid path)\n\n    >>> Path(\"L 40,40\") * \"Rotate(45)\"\n    Path(Line(end=Point(40,40)), transform=Matrix(0.707106781187, 0.707106781187, -0.707106781187, 0.707106781187, 0, 0), stroke='None', fill='None')\n    >>> abs(Path(\"L 40,40\") * \"Rotate(45)\")\n    Path(Line(end=Point(0,56.568542494924)), stroke='None', fill='None')\n\nSince Move() is a qualified element we can postpend the SVG text:\n\n    >>> (Move((20,20)) + \"L 40,40\")\n    Path(Move(end=Point(20,20)), Line(start=Point(20,20), end=Point(40,40)), stroke='None', fill='None')\n\nDefine the entire qualified path:\n\n    >>> Path(\"M 20,20 L 40,40\")\"\n    Path(Move(end=Point(20,20)), Line(start=Point(20,20), end=Point(40,40)))\n\nCombine individual PathSegments together:\n\n    >>> Move((2,2)) + Close()\n    Path(Move(end=Point(2,2)), Close())\n\nPrint that as SVG path_d object:\n\n    >>> print(Move((2,2)) + Close())\n    M 2,2 Z\n\nScale a path:\n\n    >>> Path(\"M1,1 1,2 2,2 2,1z\") * \"scale(2)\"\n    Path(Move(end=Point(1,1)), Line(start=Point(1,1), end=Point(1,2)), Line(start=Point(1,2), end=Point(2,2)), Line(start=Point(2,2), end=Point(2,1)), Close(start=Point(2,1), end=Point(1,1)), transform=Matrix(2, 0, 0, 2, 0, 0), stroke='None', fill='None')\n\nPrint that:\n\n    >>> print(Path(\"M1,1 1,2 2,2 2,1z\") * \"scale(2)\")\n    M 2,2 L 2,4 L 4,4 L 4,2 Z\n\nReverse a scaled path:\n\n    >>> p = (Path(\"M1,1 1,2 2,2 2,1z\") * \"scale(2)\")\n    >>> p.reverse()\n    Path(Move(end=Point(2,1)), Line(start=Point(2,1), end=Point(2,2)), Line(start=Point(2,2), end=Point(1,2)), Line(start=Point(1,2), end=Point(1,1)), Close(start=Point(1,1), end=Point(2,1)), transform=Matrix(2, 0, 0, 2, 0, 0), stroke='None', fill='None')\n    >>> print(p)\n    M 4,2 L 4,4 L 2,4 L 2,2 Z\n\nQuery length of paths:\n\n    >>> QuadraticBezier(\"0,0\", \"50,50\", \"100,0\").length()\n    114.7793574696319\n\nApply a translations:\n\n    >>> Path('M 0,0 Q 50,50 100,0') * \"translate(40,40)\"\n    Path(Move(end=Point(0,0)), QuadraticBezier(start=Point(0,0), control=Point(50,50), end=Point(100,0)), transform=Matrix(1, 0, 0, 1, 40, 40), stroke='None', fill='None')\n    >>> abs(Path('M 0,0 Q 50,50 100,0') * \"translate(40,40)\")\n    Path(Move(end=Point(40,40)), QuadraticBezier(start=Point(40,40), control=Point(90,90), end=Point(140,40)), stroke='None', fill='None')\n\n\nQuery lengths of translated paths:\n\n    >>> (Path('M 0,0 Q 50,50 100,0') * \"translate(40,40)\").length()\n    114.7793574696319\n    >>> Path('M 0,0 Q 50,50 100,0').length()\n    114.7793574696319\n\nQuery a subpath:\n\n    >>> Path('M 0,0 Q 50,50 100,0 M 20,20 v 20 h 20 v-20 h-20 z').subpath(1).d()\n    'M 20,20 L 20,40 L 40,40 L 40,20 L 20,20 Z'\n\nReverse a subpath:\n\n    >>> p = Path('M 0,0 Q 50,50 100,0 M 20,20 v 20 h 20 v-20 h-20 z')\n    >>> print(p)\n    M 0,0 Q 50,50 100,0 M 20,20 L 20,40 L 40,40 L 40,20 L 20,20 Z\n    >>> p.subpath(1).reverse()\n    Path(Move(start=Point(100,0), end=Point(20,20)), Line(start=Point(20,20), end=Point(40,20)), Line(start=Point(40,20), end=Point(40,40)), Line(start=Point(40,40), end=Point(20,40)), Line(start=Point(20,40), end=Point(20,20)), Close(start=Point(20,20), end=Point(20,20)))\n    >>> print(p)\n    M 0,0 Q 50,50 100,0 M 20,20 L 40,20 L 40,40 L 20,40 L 20,20 Z\n\nQuery a bounding box:\n\n    >>> QuadraticBezier(\"0,0\", \"50,50\", \"100,0\").bbox()\n    (0.0, 0.0, 100.0, 50.0)\n\nQuery a translated bounding box:\n\n    >>> (Path('M 0,0 Q 50,50 100,0') * \"translate(40,40)\").bbox()\n    (40.0, 40.0, 140.0, 90.0)\n\nQuery a translated path's untranslated bounding box.\n\n    >>> (Path('M 0,0 Q 50,50 100,0') * \"translate(40,40)\").bbox(transformed=False)\n    (0.0, 0.0, 100.0, 50.0)\n\nAdd a path and shape:\n\n    >>> print(Path(\"M10,10z\") + Circle(\"12,12\", 2))\n    M 10,10 Z M 14,12 A 2,2 0 0,1 12,14 A 2,2 0 0,1 10,12 A 2,2 0 0,1 12,10 A 2,2 0 0,1 14,12 Z\n\nAdd two shapes, and query their bounding boxes:\n\n    >>> (Circle() + Rect()).bbox()\n    (-1.0, -1.0, 1.0, 1.0)\n\nAdd two shapes and query their length:\n\n    >>> (Circle() + Rect()).length()\n    10.283185307179586\n    >>> tau + 4\n    10.283185307179586\n\nEtc.\n\n\n# Elements\n\nThe elements are the core functionality of this class. These are svg-based objects which interact in coherent ways.\n\n## Path\n\nThe Path element is based on regebro's code and methods from the `svg.path` project. The primary methodology is to use different PathSegment classes for each segment within a pathd code. These should always have a high degree of backwards compatibility. And for most purposes importing the relevant classes from `svgelements` should be highly compatible with any existing code.\n\n\nFor this reason `svgelements` tests include `svg.path` tests in this project. And while the Point class accepts and works like a `complex` it is not actually a complex. This permits code from other projects to quickly port without requiring an extensive rewrite. But, the custom class allows for improvements like making the `Matrix` object easy.\n\n* ``Path(*segments)``\n\nJust as with `svg.path` the ``Path`` class is a mutable sequence, and it behaves like a list.\nYou can add to it and replace path segments etc:\n\n    >>> path = Path(Line(100+100j,300+100j), Line(100+100j,300+100j))\n    >>> path.append(QuadraticBezier(300+100j, 200+200j, 200+300j))\n    >>> print(path)\n    L 300,100 L 300,100 Q 200,200 200,300\n\n    >>> path[1] = Line(200+100j,300+100j)\n    >>> print(path)\n    L 300,100 L 300,100 Q 200,200 200,300\n\n    >>> del path[1]\n    >>> print(path)\n    L 300,100 Q 200,200 200,300\n\n    >>> path = Move() + path\n    >>> print(path)\n    M 100,100 L 300,100 Q 200,200 200,300\n\nThe path object also has a ``d()`` method that will return the\nSVG representation of the Path segments:\n\n    >>> path.d()\n    'M 100,100 L 300,100 Q\n 200,200 200,300'\n\nThe d() parameter also takes a value for relative:\n\n    >>> path.d(relative=True)\n    'm 100,100 l 200,0 q -100,100 -100,200'\n\nMore modern and preferred methods are to simply use path_d strings where needed.\n\n     >>> print(Path(\"M0,0v1h1v-1z\"))\n    M 0,0 L 0,1 L 1,1 L 1,0 Z\n\nAnd to use scaling factors as needed.\n\n    >>> (Path(\"M0,0v1h1v-1z\") * \"scale(20)\").bbox()\n    (0.0, 0.0, 20.0, 20.0)\n\n---\n\nA ``Path`` object that is a collection of the PathSegment objects. These can be defined by combining a PathSegment with another PathSegment initializing it with `Path()` or `Path(*segments)` or `Path(<svg_text>)`.\n\n### Subpaths\n\nSubpaths provide a window into a Path object. These are backed by the Path they are created from and consequently operations performed on them apply to that part of the path.\n\n    >>> p = Path('M 0,0 Q 50,50 100,0 M 20,20 v 20 h 20 v-20 h-20 z')\n    >>> print(p)\n    M 0,0 Q 50,50 100,0 M 20,20 L 20,40 L 40,40 L 40,20 L 20,20 Z\n    >>> q = p.subpath(1) \n    >>> q *= \"scale(2)\"\n    >>> print(p)\n    M 0,0 Q 50,50 100,0 M 40,40 L 40,80 L 80,80 L 80,40 L 40,40 Z\n\nor likewise `.reverse()` \n(notice the path will go 80,40 first rather than 40,80.)\n\n    >>> q.reverse()\n    >>> print(p)\n    M 0,0 Q 50,50 100,0 M 40,40 L 80,40 L 80,80 L 40,80 L 40,40 Z\n\n### Segments\n\nThere are 6 PathSegment objects:\n``Line``, ``Arc``, ``CubicBezier``, ``QuadraticBezier``, ``Move`` and ``Close``. These have a 1:1 correspondence to the commands in a `pathd`.\n\n    >>> from svgelements import Path, Line, Arc, CubicBezier, QuadraticBezier, Close\n\nAll of these objects have a ``.point()`` function which will return the\ncoordinates of a point on the path, where the point is given as a floating\npoint value where ``0.0`` is the start of the path and ``1.0`` is end.\n\nYou can calculate the length of a Path or its segments with the ``.length()`` function. For CubicBezier and Arc segments this is done by geometric approximation and for this reason **may be very slow**. You can make it faster by passing in an ``error`` option to the method. If you don't pass in error, it defaults to ``1e-12``. While the project has no dependencies, if you have `scipy` installed the Arc.length() function will use to the hypergeometric exact formula contained and will quickly return with the exact answer.\n\n    >>> CubicBezier(300+100j, 100+100j, 200+200j, 200+300j).length(error=1e-5)\n    297.2208145656899\n\nCubicBezier and Arc also has a ``min_depth`` option that specifies the\nminimum recursion depth. This is set to 5 by default, resulting in using a\nminimum of 32 segments for the calculation. Setting it to 0 is a bad idea for\nCubicBeziers, as they may become approximated to a straight line.\n\n``Line.length()`` and ``QuadraticBezier.length()`` also takes these\nparameters, but they unneeded as direct values rather than approximations are returned.\n\nCubicBezier and QuadraticBezier also have ``is_smooth_from(previous)``\nmethods, that checks if the segment is a \"smooth\" segment compared to the\ngiven segment.\n\nUnlike `svg.path` the preferred method of getting a Path from a `pathd` string is\nas an argument:\n\n    >>> from svgelements import Path\n    >>> Path('M 100 100 L 300 100')\n    Path(Move(end=Point(100,100)), Line(start=Point(100,100), end=Point(300,100)))\n\n#### PathSegment Classes\n\nThese are the SVG PathSegment classes. See the `SVG specifications\n<http://www.w3.org/TR/SVG/paths.html>`_ for more information on what each\nparameter means.\n\n* ``Move(start, end)`` The move object describes a move to the start of the next subpath. It may lack a start position but not en end position.\n\n* ``Close(start, end)`` The close object describes a close path element. It will have a length if and only if the end point is not equal to the subpath start point. Neither the start point or end point is required.\n\n* ``Line(start, end)`` The line object describes a line moving straight from one point to the next point. \n\n* ``Arc(start, radius, rotation, arc, sweep, end)`` The arc object describes an arc across a circular path. This supports multiple types of parameterizations. The given default there is compatible with `svg.path` and has a complex radius. It is also valid to divide radius into `rx` and `ry` or Arc(start, end, center, prx, pry, sweep) where start, end, center, prx, pry are points and sweep is the radians value of the arc distance traveled.\n\n* ``QuadraticBezier(start, control, end)`` the quadratic bezier object describes a single control point bezier curve.\n\n* ``CubicBezier(start, control1, control2, end)`` the cubic bezier curve object describes a two control point bezier curve.\n\n\n### Examples\n\nThis SVG path example draws a triangle:\n\n    >>> path1 = Path('M 100 100 L 300 100 L 200 300 z')\n\nYou can format SVG paths in many different ways, all valid paths should be\naccepted::\n\n    >>> path2 = Path('M100,100L300,100L200,300z')\n\nAnd these paths should be equal:\n\n    >>> path1 == path2\n    True\n\nYou can also build a path from objects:\n\n    >>> path3 = Path(Move(100 + 100j), Line(100 + 100j, 300 + 100j), Line(300 + 100j, 200 + 300j), Close(200 + 300j, 100 + 100j))\n\nAnd it should again be equal to the first path::\n\n    >>> path1 == path3\n    True\n\nPaths are mutable sequences, you can slice and append::\n\n    >>> path1.append(QuadraticBezier(300+100j, 200+200j, 200+300j))\n    >>> len(path1[2:]) == 3\n    True\n\nNote that there is no protection against you creating paths that are invalid.\nYou can for example have a Close command that doesn't end at the path start:\n\n    >>> wrong = Path(Line(100+100j,200+100j), Close(200+300j, 0))\n    >>> wrong.d()\n    'L 200,100 Z'\n\n## Matrix (Transformations)\n\nSVG 1.1, 7.15.3 defines the matrix form as:\n\n    [a c  e]\n    [b d  f]\n\nSince we are delegating to SVG spec for such things, this is how it is implemented in elements.\n\nTo be compatible with SVG 1.1 and SVG 2.0 the matrix class provided has all the SVG functions as well as the CSS functions:\n\n* translate(x,[y])\n* translateX(x)\n* translateY(y)\n* scale(x,[y])\n* scaleX(x)\n* scaleY(y)\n* skew(x,[y])\n* skewX(x)\n* skewY(y)\n\nSince we have compatibility with CSS for the SVG 2.0 spec compatibility we can perform length translations:\n\n    >>> Point(0,0) * Matrix(\"Translate(1cm,1cm)\")\n    Point('1cm','1cm')\n\nDo note, however that this isn't an intended purpose. Points are expected in native units. You should render the Matrix prior to using it. This means you must give it the correct units to translate the information from one form to another. \n\n    >>> Point(0,0) * (Matrix(\"Translate(1cm,1cm)\").render(ppi=96.0))\n    Point(37.795296,37.795296)\n\nWe can also rotate by `turns`, `grad`, `deg`, `rad` which are permitted CSS angles:\n\n    >>> Point(10,0) * Matrix(\"Rotate(1turn)\")\n    Point(10,-0)\n    >>> Point(10,0) * Matrix(\"Rotate(400grad)\")\n    Point(10,-0)\n    >>> Point(10,0) * Matrix(\"Rotate(360deg)\")\n    Point(10,-0)\n\nA large goal of this project is to provide a more robust modifications of Path objects including matrix transformations. This is done by three major shifts from `svg.path`s methods. \n\n* Points are not stored as complex numbers. These are stored as Point objects, which have backwards compatibility with complex numbers, without the data actually being backed by a `complex`.\n* A matrix is added which conforms to the SVGMatrix Element. The matrix contains valid versions of all the affine transformations elements required by the SVG Spec.\n* The `Arc` object is fundamentally backed by a different point-based parameterization.\n\nThe objects themselves have robust dunder methods. So if you have a path object you may simply multiply it by a matrix.\n\n    >>> Path(Line(0+0j, 100+100j)) * Matrix.scale(2)\n    Path(Line(start=Point(0,0), end=Point(100,100)), transform=Matrix(2, 0, 0, 2, 0, 0), stroke='None', fill='None')\n\nOr rotate a parsed path.\n\n    >>> Path(\"M0,0L100,100\") * Matrix.rotate(30)\n    Path(Move(end=Point(0,0)), Line(start=Point(0,0), end=Point(100,100)), transform=Matrix(0.154251449888, -0.988031624093, 0.988031624093, 0.154251449888, 0, 0))\n\nOr modify an SVG path.\n\n    >>> str(Path(\"M0,0L100,100\") * Matrix.rotate(30))\n    'M 0,0 L 114.228,-83.378'\n\nThe Matrix objects can be used to modify points:\n\n    >>> Point(100,100) * Matrix(\"scale(2)\")\n    Point(200,200)\n\n    >>> Point(100,100) * (Matrix(\"scale(2)\") * Matrix(\"Translate(40,40)\"))\n    Point(240,240)\n\nDo note that the order of operations for matrices matters:\n\n    >>> Point(100,100) * (Matrix(\"Translate(40,40)\") * Matrix(\"scale(2)\"))\n    Point(280,280)\n\nThe first version is:\n\n    >>> (Matrix(\"scale(2)\") * Matrix(\"Translate(40,40)\"))\n    Matrix(2, 0, 0, 2, 40, 40)\n\nThe second is:\n\n    >>>> (Matrix(\"Translate(40,40)\") * Matrix(\"scale(2)\"))\n    Matrix(2, 0, 0, 2, 80, 80)\n\nThis is:\n\n    >>>> Point(100,100) * Matrix(\"Matrix(2,0,0,2,80,80)\")\n    Point(280,280)\n\n\n### SVG Transform Parsing\n\nWithin the SVG.elements() schema objects SVG elements. The `transform` tags within objects are combined together. These are automatically applied if `reify=True` is set.\n\n\n### SVG Dictionary Parsing\n\n    >>> node = { 'd': \"M0,0 100,0, 0,100 z\", 'transform': \"scale(0.5)\"}\n    >>> print(Path(node['d']) * Matrix(node['transform']))\n    M 0,0 L 50,0 L 0,50 Z\n\n### SVG Viewport Scaling, Unit Scaling\n\nThere is need in many applications to append a transformation for the viewbox, height, width. So as to prevent a variety of errors where the expected size is far vastly different from the actual size. If we have a viewbox of \"0 0 100 100\" but the height and width show that to be 50cm wide, then a path \"M25,50L75,50\" within that viewbox has a real size of length of 25cm which can be quite different from 50 (unit-less value).\n\nThis conversion is done through the `Viewbox` object. This operation is automatically done for SVG.elements() objects.\n\nViewbox objects have a call to `.transform()` which will provide the string for an equivolent transformation for the given viewbox.\n\nThe `Viewbox.transform()` code conforms to the algorithm given in SVG 1.1 7.2, SVG 2.0 8.2 'equivalent transform of an SVG viewport.' This will also fully implement the `preserveAspectRatio`, `xMidYMid`, and `meetOrSlice` values.\n\n## SVG Shapes\n\nAnother important SVG elements are the shapes. While all of these can be converted to paths. They can serve some usages in their original form. There are methods to deform a rectangle that simple don't exist in the path form of that object.\n* Rect\n* Ellipse\n* Circle\n* Line (SimpleLine)\n* Polyline\n* Polygon\n\nThe Line shape is converted into a shape called SimpleLine to not interfere with the Line(PathSegment).\n\nA Shape is said to be equal to another Shape or a Path if they decompose to same Path.\n\n    >>> Circle() == Ellipse()\n    True\n     >>> Rect() == Path('m0,0h1v1h-1z')\n    True\n\n### Rect\n\nRectangles are defined by x, y and height, width. Within SVG there are also rounded corners defined with `rx` and `ry`. \n\n    >>> Rect(10,10,8,4).d()\n    'M 10,10 L 18,10 L 18,14 L 10,14 Z'\n\nMuch like all the paths these shapes also contain a `.d()` function that produces the path data for them. This could then be wrapped into a Path().\n\n    >>> print(Path(Rect(10,10,8,4).d()) * \"rotate(0.5turns)\")\n    M -10,-10 L -18,-10 L -18,-14 L -10,-14 Z\n\nOr simply passed to the Path:\n\n    >>> print(Path(Rect(10,10,8,4)) * \"rotate(0.5turns)\")\n    M -10,-10 L -18,-10 L -18,-14 L -10,-14 L -10,-10 Z\n\nOr simply multiplied by the matrix itself:\n\n    >>> print(Rect(10,10,8,4) * \"rotate(0.5turns)\")\n    Rect(x=10, y=10, width=8, height=4, transform=Matrix(-1, 0, -0, -1, 0, 0), stroke='None', fill='None')\n\nAnd you can equally decompose that Shape:\n\n    >>> (Rect(10,10,8,4) * \"rotate(0.5turns)\").d()\n    'M -10,-10 L -18,-10 L -18,-14 L -10,-14 L -10,-10 Z'\n\n\nMatrices can be applied to Rect objects directly.\n\n    >>> from svgelements import *\n    >>> Rect(10,10,8,4) * \"rotate(0.5turns)\"\n    Rect(x=10, y=10, width=8, height=4, transform=Matrix(-1, 0, -0, -1, 0, 0), stroke='None', fill='None')\n\n    >>> Rect(10,10,8,4) * \"rotate(0.25turns)\"\n    Rect(x=10, y=10, width=8, height=4, transform=Matrix(0, 1, -1, 0, 0, 0))\n\nRotated Rects produce path_d srings.:\n\n    >>> Rect(10,10,8,4) * \"rotate(14deg)\"\n    Rect(x=10, y=10, width=8, height=4, transform=Matrix(0.970295726276, 0.2419218956, -0.2419218956, 0.970295726276, 0, 0))\n    >>> (Rect(10,10,8,4) * \"rotate(14deg)\").d()\n    'M 7.28373830676,12.1221762188 L 15.046104117,14.0575513836 L 14.0784165346,17.9387342887 L 6.31605072436,16.0033591239 Z'\n\n This also works with `rx` and `ry`:\n (Note: the path will now contain Arcs)\n\n    >>> (Rect(10,10,8,4, 2, 1) * \"rotate(0.25turns)\").d()\n    'M -10,12 L -10,16 A 2,1 90 0,1 -11,18 L -13,18 A 2,1 90 0,1 -14,16 L -14,12 A 2,1 90 0,1 -13,10 L -11,10 A 2,1 90 0,1 -10,12 Z'\n\nYou can also decompose the shapes in relative modes:\n\n    >>> (Rect(10,10,8,4, 2, 1) * \"rotate(0.25turns)\").d(relative=True)\n    'm -10,12 l 1.77636E-15,4 a 2,1 90 0,1 -1,2 l -2,0 a 2,1 90 0,1 -1,-2 l -1.77636E-15,-4 a 2,1 90 0,1 1,-2 l 2,0 a 2,1 90 0,1 1,2 z'\n\n\n### Ellipse & Circle\n\nEllipses and Circles are different shapes but since a circle is a particular kind of Ellipse much of the functionality here is duplicated.\n\nWhile the objects are different they can be checked for equivalency:\n\n    >>> Ellipse(center=(0,0), rx=10, ry=10) == Circle(center=\"0,0\", r=10.0)\n    True\n\n\n### SimpleLine\n\nSimpleLine is renamed from the SVG form of `Line` since we already have `Line` objects as `PathSegment`. \n\n    >>> s = SimpleLine(0,0,200,200)\n    >>> s\n    SimpleLine(x1=0.0, y1=0.0, x2=200.0, y2=200.0)\n    >>> s *= \"rotate(45)\"\n    >>> s\n    SimpleLine(x1=0.0, y1=0.0, x2=200.0, y2=200.0, transform=Matrix(0.707106781187, 0.707106781187, -0.707106781187, 0.707106781187, 0, 0))\n    >>> abs(s)\n    SimpleLine(x1=0.0, y1=0.0, x2=2.842170943040401e-14, y2=282.842712474619, stroke='None', fill='None')\n    >>> s.d()\n    'M 0,0 L 2.84217094304E-14,282.842712475\n\n\n### Polyline and Polygon\n\nThe difference here is polylines are not closed while Polygons are closed.\n\n    >>> p = Polygon(0,0, 100,0, 100,100, 0,100)\n    >>> p *= \"scale(2)\"\n    >>> p.d()\n    'M 0,0, L 200,0, L 200,200, L 0,200 Z'\n\nand the same for Polyline:\n\n    >>> p = Polyline(0,0, 100,0, 100,100, 0,100)\n    >>> p *= \"scale(2)\"\n    >>> p.d()\n    'M 0,0, L 200,0, L 200,200, L 0,200'\n\nYou can just append a \"z\" to the polyline path though. \n\n    >>> Path(Polyline((20,0), (10,10), 0)) + \"z\" == Polygon(\"20,0 10,10 0,0\")\n    True\n\n## CSS Length\n\nThe conversion of lengths to utilizes another element `Length` It provides conversions for `mm`, `cm`, `in`, `px`, `pt`, `pc`, `%`. You can also parse an element like the string '25mm' calling Length('25mm').value(ppi=96) and get the expected results. You can also call `Length('25mm').in_inches()` which will return  25mm in inches.\n\n    >>> Length('25mm').in_inches()\n    0.9842525\n\n## Color\n\nColor is another important element it contains an 'int' as 'value' in the form of an ARGB 32-bit integer. It will parse all the SVG color functions.\n\nIf we get the fill or stroke of an object from a node be a text element. This needs to be converted to a consistent form. We could have a 3, 4, 6, or 8 digit hex. rgb(r,g,b) value, a static dictionary name or percent rgb(r,g,b). And must be properly parsed according to the spec.\n\n    >>> Color(\"red\").hex\n    '#ff0000'\n\n    >>> Color('red').red\n    255\n\n    >>>Color('hsl(120, 100%, 50%)')\n    Color('#00ff00')\n\n    >>> c = Color('hsl(120, 100%, 50%)')\n    >>> c.blue = 50\n    >>> c\n    Color('#00ff32')\n\nIn addition you can set various properties of a particular color. Check distances to other colors.\n\n    >>> Color.distance('red', 'lightred')\n    25.179356624028344\n    >>> Color.distance('red', 'blue')\n    403.97524676643246\n    >>> Color('red').distance_to('blue')\n    403.97524676643246\n\n## Angle\n\nAngle is backed by a 'float' and contains all the CSS angle values. 'deg', 'rad', 'grad', 'turn'.\n\n    >>> Angle.degrees(360).as_radians\n    Angle(6.283185307180)\n\nThe Angle element is used automatically with the Skew and Rotate for matrix. \n\n    >>> Point(100,100) * Matrix(\"SkewX(0.05turn)\")\n    Point(132.491969623291,100)\n\n## Point\n\nPoint is used in all the SVG path segment objects. With regard to `svg.path` it is not back by, but implements all the same functionality as a `complex` and will take a complex as an input. So older `svg.path` code will remain valid. While also allowing for additional functionality like finding a distance.\n\n    >>> Point(0+100j).distance_to([0,0])\n    100.0\n\nThe class supports `complex` subscribable elements, `.x` and `.y` methods, and `.imag` and `.real`. As well as providing several of these indexing methods.\n\nIt includes a number of point functions like:\n* `move_towards(point,float)`: Move this point towards the other point. with an amount [0,1]\n* `distance_to(point)`: Calculate the Euclidean distance to the other point.\n* `angle_to(point)`: Calculate the angle to the given point.\n* `polar_to(angle,distance)`:  Return a point via polar coords at the angle and distance.\n* `reflected_across(point)`: Returns a point reflected across another point. (Smooth bezier curves use this).\n\nThis for example takes the 0,0 point turns 1/8th of a turn, and moves forward by 5cm.\n\n    >>> Point(0).polar_to(Angle.turns(0.125), Length(\"5cm\").value(ppi=96))\n    Point(133.626550492764,133.626550492764)\n\n\n# Acknowledgments\n\nThe Path element of this project is based in part on the `regebro/svg.path` ( https://github.com/regebro/svg.path ) project. It is also may be based, in part, on some elements of `mathandy/svgpathtools` ( https://github.com/mathandy/svgpathtools ).\n\nThe Zingl-Bresenham plotting algorithms are from Alois Zingl's \"The Beauty of Bresenham's Algorithm\"\n( http://members.chello.at/easyfilter/bresenham.html ). They are all MIT Licensed and this library is\nalso MIT licensed. In the case of Zingl's work this isn't explicit from his website, however from personal\ncorrespondence \"'Free and open source' means you can do anything with it like the MIT licence[sic].\"\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/meerk40t/svgelements", "keywords": "svg,path,elements,matrix,vector,parser", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "svgelements", "package_url": "https://pypi.org/project/svgelements/", "platform": "", "project_url": "https://pypi.org/project/svgelements/", "project_urls": {"Homepage": "https://github.com/meerk40t/svgelements"}, "release_url": "https://pypi.org/project/svgelements/1.0.2/", "requires_dist": null, "requires_python": "", "summary": "Svg Elements Parsing", "version": "1.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>svgelements</h1>\n<p>Parsing for SVG File, Path, Matrix, Angle, Length, Color, Point and other SVG Elements. The SVG spec defines a variety of elements which generally interoperate. In order to have a robust experience with SVGs we must be able to deal with the parsing and interactions of these elements.</p>\n<p>This project began as part of <code>meerK40t</code> which does SVG loading of files for laser cutting. It attempts to more fully map out the SVG spec, objects, and paths, while remaining easy to use and highly backwards compatible.</p>\n<h1>License</h1>\n<p>This module is under a MIT License.</p>\n<h1>Installing</h1>\n<p><code>pip install svgelements</code></p>\n<p>Then in a script:</p>\n<p><code>from svgelements import *</code></p>\n<h1>Requirements</h1>\n<p>None.</p>\n<h1>Compatibility</h1>\n<p><code>svgelements</code> is compatible with Python 2.7 and Python 3.6.  Support for 2.7 will be dropped at Python 2 End-Of-Life January 1, 2020.</p>\n<p>We remain nominally backwards compatible with <code>svg.path</code>, passing the same robust tests in that project. There may be number of breaking changes. However, since <code>svgelements</code> permit a lot of leeway in what is accepted and how it's accepted, so it will have a huge degree of compatibility with projects seen and unseen.</p>\n<h1>Philosophy</h1>\n<p>The goal of this project is to provide SVG spec-like elements and structures. The SVG standard 1.1 and elements of 2.0 will be used to provide much of the decisions making for implementation objects. If there is a question on implementation and the SVG documentation has a methodology, that is the preferred methodology.</p>\n<p>The primary goal is to make a more robust version of <code>svg.path</code> including other elements like <code>Point</code> and <code>Matrix</code> with clear emphasis on conforming to the SVG spec in all ways that realworld uses for SVG demands.</p>\n<p><code>svgelements</code> should conform to the SVG Conforming Interpreter class (2.5.4. Conforming SVG Interpreters):</p>\n<blockquote>\n<p>An SVG interpreter is a program which can parse and process SVG document fragments. Examples of SVG interpreters are server-side transcoding tools or optimizer (e.g., a tool which converts SVG content into modified SVG content) or analysis tools (e.g., a tool which extracts the text content from SVG content, or a validity checker).</p>\n</blockquote>\n<p>Real world functionality demands we must correctly and reasonably provide reading, transcoding, and manipulation of SVG content.</p>\n<h1>Overview</h1>\n<p>The versatility of the project is provided through through expansive and highly intuitive dunder methods, and robust parsing of object parameters. Points, PathSegments, Paths, Shapes, Subpaths can be multiplied by a matrix. We can add Shapes, Paths, PathSegments, and Subpaths together. And many non-declared but functionally understandable elements are automatically parsed. Such as adding strings of path_d characters to a Path or multiplying an element by the SVG Transform string elements.</p>\n<h2>Point</h2>\n<p>Points define a single location in 2D space.</p>\n<ul>\n<li>Point(x,y)</li>\n<li>(x,y)</li>\n<li>[x,y]</li>\n<li>\"x, y\"</li>\n<li>x + yj (complex number)</li>\n<li>a class with .x and .y as methods.</li>\n</ul>\n<hr>\n<pre><code>&gt;&gt;&gt; Point(10,10) * \"rotate(90)\"\nPoint(-10,10)\n</code></pre>\n<h2>Matrix</h2>\n<p>Matrices define affine transformations of 2d space and objects.</p>\n<ul>\n<li>Matrix.scale(s)</li>\n<li>Matrix.scale(sx,sy)</li>\n<li>Matrix.scale(sx,sy,px,py)</li>\n<li>Matrix.rotate(angle)</li>\n<li>Matrix.rotate(angle, px, py</li>\n<li>Matrix.skew_x(angle)</li>\n<li>Matrix.skew_x(angle, px, py)</li>\n<li>Matrix.skew_y(angle)</li>\n<li>Matrix.skew_y(angle, px, py)</li>\n<li>Matrix.translate(tx)</li>\n<li>Matrix.translate(tx, ty)</li>\n<li>Transform string values.\n<ul>\n<li>\"scale(s)\"</li>\n<li>\"scale(sx,sy)\"</li>\n<li>\"translate(20,20) scale(2)\"</li>\n<li>\"rotate(0.25 turns)\"</li>\n<li>Any valid SVG or CSS transform string will be accepted as a matrix.</li>\n</ul>\n</li>\n</ul>\n<hr>\n<pre><code>&gt;&gt;&gt; Matrix(\"rotate(100grad)\")\nMatrix(0, 1, -1, 0, 0, 0)\n</code></pre>\n<p>The matrix class also supports Length translates for x, and y. In some instances CSS transforms permit length transforms so \"translate(20cm, 200mm)\" are valid tranformations. However, these will cause issues for objects which require non-native units so it is expected that .render() will be called on these before they are used in a strange manner.</p>\n<h2>Path</h2>\n<p>Paths define sequences of PathSegments that can map out any path element in SVG.</p>\n<ul>\n<li>Path() object</li>\n<li>String path_d value.</li>\n</ul>\n<hr>\n<pre><code>&gt;&gt;&gt; Path() + \"M0,0z\"\nPath(Move(end=Point(0,0)), Close(start=Point(0,0), end=Point(0,0)))\n</code></pre>\n<h2>Angle</h2>\n<p>Angles define various changes in direction.</p>\n<ul>\n<li>Angle.degrees(degree_angle)</li>\n<li>Angle.radians(radians_angle)</li>\n<li>Angle.turns(turns)</li>\n<li>Angle.gradians(gradian_angles)</li>\n<li>CSS angle string.\n<ul>\n<li>\"20deg\"</li>\n<li>\"0.3turns\"</li>\n<li>\"1rad\"</li>\n<li>\"100grad\"</li>\n</ul>\n</li>\n</ul>\n<hr>\n<pre><code>&gt;&gt;&gt; Point(0,100) * \"rotate(1turn)\"\nPoint(0,100)\n&gt;&gt;&gt; Point(0,100) * \"rotate(0.5turn)\"\nPoint(-0,-100)\n</code></pre>\n<h2>Color</h2>\n<p>Colors define object color.</p>\n<ul>\n<li>XHTML color names: \"red\", \"blue\", \"dark grey\", etc.</li>\n<li>3 digit hex: \"#F00\"</li>\n<li>4 digit hex: \"#FF00\"</li>\n<li>6 digit hex: \"#FF0000\"</li>\n<li>8 digit hex: \"#FFFF0000\"</li>\n<li>\"RGB(r,g,b)\"</li>\n<li>\"RGB(r%, g%, b%)\"</li>\n</ul>\n<hr>\n<pre><code>&gt;&gt;&gt; Circle(stroke=\"yellow\")\nCircle(center=Point(0,0), r=1, stroke=\"#ffff00\")\n</code></pre>\n<h2>Length</h2>\n<p>Lengths define the amount of linear space between two things.</p>\n<ul>\n<li>\"20cm\"</li>\n<li>\"200mm\"</li>\n<li>\"3in\"</li>\n<li>Length('200mm')</li>\n</ul>\n<h1>Examples</h1>\n<p>Parse an SVG file:</p>\n<pre><code>&gt;&gt;&gt; svg = SVG(file)\n&gt;&gt;&gt; list(svgelements())\n</code></pre>\n<p>Make a PathSegment</p>\n<pre><code>&gt;&gt;&gt; Line((20,20), (40,40))\nLine(start=Point(20,20), end=Point(40,40))\n</code></pre>\n<p>Rotate a PathSegment:</p>\n<pre><code>&gt;&gt;&gt; Line((20,20), (40,40)) * Matrix.rotate(Angle.degrees(45))\nLine(start=Point(0,28.284271247462), end=Point(0,56.568542494924))\n</code></pre>\n<p>Rotate a PathSegment with a parsed matrix:</p>\n<pre><code>&gt;&gt;&gt; Line((20,20), (40,40)) * Matrix(\"Rotate(45)\")\nLine(start=Point(0,28.284271247462), end=Point(0,56.568542494924))\n</code></pre>\n<p>Rotate a PathSegment with an implied parsed matrix:</p>\n<pre><code>&gt;&gt;&gt; Line((20,20), (40,40)) * \"Rotate(45)\"\nLine(start=Point(0,28.284271247462), end=Point(0,56.568542494924))\n</code></pre>\n<p>Rotate a Partial Path with an implied matrix:\n(Note: The SVG does not allow us to specify a start point for this invalid path)</p>\n<pre><code>&gt;&gt;&gt; Path(\"L 40,40\") * \"Rotate(45)\"\nPath(Line(end=Point(40,40)), transform=Matrix(0.707106781187, 0.707106781187, -0.707106781187, 0.707106781187, 0, 0), stroke='None', fill='None')\n&gt;&gt;&gt; abs(Path(\"L 40,40\") * \"Rotate(45)\")\nPath(Line(end=Point(0,56.568542494924)), stroke='None', fill='None')\n</code></pre>\n<p>Since Move() is a qualified element we can postpend the SVG text:</p>\n<pre><code>&gt;&gt;&gt; (Move((20,20)) + \"L 40,40\")\nPath(Move(end=Point(20,20)), Line(start=Point(20,20), end=Point(40,40)), stroke='None', fill='None')\n</code></pre>\n<p>Define the entire qualified path:</p>\n<pre><code>&gt;&gt;&gt; Path(\"M 20,20 L 40,40\")\"\nPath(Move(end=Point(20,20)), Line(start=Point(20,20), end=Point(40,40)))\n</code></pre>\n<p>Combine individual PathSegments together:</p>\n<pre><code>&gt;&gt;&gt; Move((2,2)) + Close()\nPath(Move(end=Point(2,2)), Close())\n</code></pre>\n<p>Print that as SVG path_d object:</p>\n<pre><code>&gt;&gt;&gt; print(Move((2,2)) + Close())\nM 2,2 Z\n</code></pre>\n<p>Scale a path:</p>\n<pre><code>&gt;&gt;&gt; Path(\"M1,1 1,2 2,2 2,1z\") * \"scale(2)\"\nPath(Move(end=Point(1,1)), Line(start=Point(1,1), end=Point(1,2)), Line(start=Point(1,2), end=Point(2,2)), Line(start=Point(2,2), end=Point(2,1)), Close(start=Point(2,1), end=Point(1,1)), transform=Matrix(2, 0, 0, 2, 0, 0), stroke='None', fill='None')\n</code></pre>\n<p>Print that:</p>\n<pre><code>&gt;&gt;&gt; print(Path(\"M1,1 1,2 2,2 2,1z\") * \"scale(2)\")\nM 2,2 L 2,4 L 4,4 L 4,2 Z\n</code></pre>\n<p>Reverse a scaled path:</p>\n<pre><code>&gt;&gt;&gt; p = (Path(\"M1,1 1,2 2,2 2,1z\") * \"scale(2)\")\n&gt;&gt;&gt; p.reverse()\nPath(Move(end=Point(2,1)), Line(start=Point(2,1), end=Point(2,2)), Line(start=Point(2,2), end=Point(1,2)), Line(start=Point(1,2), end=Point(1,1)), Close(start=Point(1,1), end=Point(2,1)), transform=Matrix(2, 0, 0, 2, 0, 0), stroke='None', fill='None')\n&gt;&gt;&gt; print(p)\nM 4,2 L 4,4 L 2,4 L 2,2 Z\n</code></pre>\n<p>Query length of paths:</p>\n<pre><code>&gt;&gt;&gt; QuadraticBezier(\"0,0\", \"50,50\", \"100,0\").length()\n114.7793574696319\n</code></pre>\n<p>Apply a translations:</p>\n<pre><code>&gt;&gt;&gt; Path('M 0,0 Q 50,50 100,0') * \"translate(40,40)\"\nPath(Move(end=Point(0,0)), QuadraticBezier(start=Point(0,0), control=Point(50,50), end=Point(100,0)), transform=Matrix(1, 0, 0, 1, 40, 40), stroke='None', fill='None')\n&gt;&gt;&gt; abs(Path('M 0,0 Q 50,50 100,0') * \"translate(40,40)\")\nPath(Move(end=Point(40,40)), QuadraticBezier(start=Point(40,40), control=Point(90,90), end=Point(140,40)), stroke='None', fill='None')\n</code></pre>\n<p>Query lengths of translated paths:</p>\n<pre><code>&gt;&gt;&gt; (Path('M 0,0 Q 50,50 100,0') * \"translate(40,40)\").length()\n114.7793574696319\n&gt;&gt;&gt; Path('M 0,0 Q 50,50 100,0').length()\n114.7793574696319\n</code></pre>\n<p>Query a subpath:</p>\n<pre><code>&gt;&gt;&gt; Path('M 0,0 Q 50,50 100,0 M 20,20 v 20 h 20 v-20 h-20 z').subpath(1).d()\n'M 20,20 L 20,40 L 40,40 L 40,20 L 20,20 Z'\n</code></pre>\n<p>Reverse a subpath:</p>\n<pre><code>&gt;&gt;&gt; p = Path('M 0,0 Q 50,50 100,0 M 20,20 v 20 h 20 v-20 h-20 z')\n&gt;&gt;&gt; print(p)\nM 0,0 Q 50,50 100,0 M 20,20 L 20,40 L 40,40 L 40,20 L 20,20 Z\n&gt;&gt;&gt; p.subpath(1).reverse()\nPath(Move(start=Point(100,0), end=Point(20,20)), Line(start=Point(20,20), end=Point(40,20)), Line(start=Point(40,20), end=Point(40,40)), Line(start=Point(40,40), end=Point(20,40)), Line(start=Point(20,40), end=Point(20,20)), Close(start=Point(20,20), end=Point(20,20)))\n&gt;&gt;&gt; print(p)\nM 0,0 Q 50,50 100,0 M 20,20 L 40,20 L 40,40 L 20,40 L 20,20 Z\n</code></pre>\n<p>Query a bounding box:</p>\n<pre><code>&gt;&gt;&gt; QuadraticBezier(\"0,0\", \"50,50\", \"100,0\").bbox()\n(0.0, 0.0, 100.0, 50.0)\n</code></pre>\n<p>Query a translated bounding box:</p>\n<pre><code>&gt;&gt;&gt; (Path('M 0,0 Q 50,50 100,0') * \"translate(40,40)\").bbox()\n(40.0, 40.0, 140.0, 90.0)\n</code></pre>\n<p>Query a translated path's untranslated bounding box.</p>\n<pre><code>&gt;&gt;&gt; (Path('M 0,0 Q 50,50 100,0') * \"translate(40,40)\").bbox(transformed=False)\n(0.0, 0.0, 100.0, 50.0)\n</code></pre>\n<p>Add a path and shape:</p>\n<pre><code>&gt;&gt;&gt; print(Path(\"M10,10z\") + Circle(\"12,12\", 2))\nM 10,10 Z M 14,12 A 2,2 0 0,1 12,14 A 2,2 0 0,1 10,12 A 2,2 0 0,1 12,10 A 2,2 0 0,1 14,12 Z\n</code></pre>\n<p>Add two shapes, and query their bounding boxes:</p>\n<pre><code>&gt;&gt;&gt; (Circle() + Rect()).bbox()\n(-1.0, -1.0, 1.0, 1.0)\n</code></pre>\n<p>Add two shapes and query their length:</p>\n<pre><code>&gt;&gt;&gt; (Circle() + Rect()).length()\n10.283185307179586\n&gt;&gt;&gt; tau + 4\n10.283185307179586\n</code></pre>\n<p>Etc.</p>\n<h1>Elements</h1>\n<p>The elements are the core functionality of this class. These are svg-based objects which interact in coherent ways.</p>\n<h2>Path</h2>\n<p>The Path element is based on regebro's code and methods from the <code>svg.path</code> project. The primary methodology is to use different PathSegment classes for each segment within a pathd code. These should always have a high degree of backwards compatibility. And for most purposes importing the relevant classes from <code>svgelements</code> should be highly compatible with any existing code.</p>\n<p>For this reason <code>svgelements</code> tests include <code>svg.path</code> tests in this project. And while the Point class accepts and works like a <code>complex</code> it is not actually a complex. This permits code from other projects to quickly port without requiring an extensive rewrite. But, the custom class allows for improvements like making the <code>Matrix</code> object easy.</p>\n<ul>\n<li><code>Path(*segments)</code></li>\n</ul>\n<p>Just as with <code>svg.path</code> the <code>Path</code> class is a mutable sequence, and it behaves like a list.\nYou can add to it and replace path segments etc:</p>\n<pre><code>&gt;&gt;&gt; path = Path(Line(100+100j,300+100j), Line(100+100j,300+100j))\n&gt;&gt;&gt; path.append(QuadraticBezier(300+100j, 200+200j, 200+300j))\n&gt;&gt;&gt; print(path)\nL 300,100 L 300,100 Q 200,200 200,300\n\n&gt;&gt;&gt; path[1] = Line(200+100j,300+100j)\n&gt;&gt;&gt; print(path)\nL 300,100 L 300,100 Q 200,200 200,300\n\n&gt;&gt;&gt; del path[1]\n&gt;&gt;&gt; print(path)\nL 300,100 Q 200,200 200,300\n\n&gt;&gt;&gt; path = Move() + path\n&gt;&gt;&gt; print(path)\nM 100,100 L 300,100 Q 200,200 200,300\n</code></pre>\n<p>The path object also has a <code>d()</code> method that will return the\nSVG representation of the Path segments:</p>\n<pre><code>&gt;&gt;&gt; path.d()\n'M 100,100 L 300,100 Q\n</code></pre>\n<p>200,200 200,300'</p>\n<p>The d() parameter also takes a value for relative:</p>\n<pre><code>&gt;&gt;&gt; path.d(relative=True)\n'm 100,100 l 200,0 q -100,100 -100,200'\n</code></pre>\n<p>More modern and preferred methods are to simply use path_d strings where needed.</p>\n<pre><code> &gt;&gt;&gt; print(Path(\"M0,0v1h1v-1z\"))\nM 0,0 L 0,1 L 1,1 L 1,0 Z\n</code></pre>\n<p>And to use scaling factors as needed.</p>\n<pre><code>&gt;&gt;&gt; (Path(\"M0,0v1h1v-1z\") * \"scale(20)\").bbox()\n(0.0, 0.0, 20.0, 20.0)\n</code></pre>\n<hr>\n<p>A <code>Path</code> object that is a collection of the PathSegment objects. These can be defined by combining a PathSegment with another PathSegment initializing it with <code>Path()</code> or <code>Path(*segments)</code> or <code>Path(&lt;svg_text&gt;)</code>.</p>\n<h3>Subpaths</h3>\n<p>Subpaths provide a window into a Path object. These are backed by the Path they are created from and consequently operations performed on them apply to that part of the path.</p>\n<pre><code>&gt;&gt;&gt; p = Path('M 0,0 Q 50,50 100,0 M 20,20 v 20 h 20 v-20 h-20 z')\n&gt;&gt;&gt; print(p)\nM 0,0 Q 50,50 100,0 M 20,20 L 20,40 L 40,40 L 40,20 L 20,20 Z\n&gt;&gt;&gt; q = p.subpath(1) \n&gt;&gt;&gt; q *= \"scale(2)\"\n&gt;&gt;&gt; print(p)\nM 0,0 Q 50,50 100,0 M 40,40 L 40,80 L 80,80 L 80,40 L 40,40 Z\n</code></pre>\n<p>or likewise <code>.reverse()</code>\n(notice the path will go 80,40 first rather than 40,80.)</p>\n<pre><code>&gt;&gt;&gt; q.reverse()\n&gt;&gt;&gt; print(p)\nM 0,0 Q 50,50 100,0 M 40,40 L 80,40 L 80,80 L 40,80 L 40,40 Z\n</code></pre>\n<h3>Segments</h3>\n<p>There are 6 PathSegment objects:\n<code>Line</code>, <code>Arc</code>, <code>CubicBezier</code>, <code>QuadraticBezier</code>, <code>Move</code> and <code>Close</code>. These have a 1:1 correspondence to the commands in a <code>pathd</code>.</p>\n<pre><code>&gt;&gt;&gt; from svgelements import Path, Line, Arc, CubicBezier, QuadraticBezier, Close\n</code></pre>\n<p>All of these objects have a <code>.point()</code> function which will return the\ncoordinates of a point on the path, where the point is given as a floating\npoint value where <code>0.0</code> is the start of the path and <code>1.0</code> is end.</p>\n<p>You can calculate the length of a Path or its segments with the <code>.length()</code> function. For CubicBezier and Arc segments this is done by geometric approximation and for this reason <strong>may be very slow</strong>. You can make it faster by passing in an <code>error</code> option to the method. If you don't pass in error, it defaults to <code>1e-12</code>. While the project has no dependencies, if you have <code>scipy</code> installed the Arc.length() function will use to the hypergeometric exact formula contained and will quickly return with the exact answer.</p>\n<pre><code>&gt;&gt;&gt; CubicBezier(300+100j, 100+100j, 200+200j, 200+300j).length(error=1e-5)\n297.2208145656899\n</code></pre>\n<p>CubicBezier and Arc also has a <code>min_depth</code> option that specifies the\nminimum recursion depth. This is set to 5 by default, resulting in using a\nminimum of 32 segments for the calculation. Setting it to 0 is a bad idea for\nCubicBeziers, as they may become approximated to a straight line.</p>\n<p><code>Line.length()</code> and <code>QuadraticBezier.length()</code> also takes these\nparameters, but they unneeded as direct values rather than approximations are returned.</p>\n<p>CubicBezier and QuadraticBezier also have <code>is_smooth_from(previous)</code>\nmethods, that checks if the segment is a \"smooth\" segment compared to the\ngiven segment.</p>\n<p>Unlike <code>svg.path</code> the preferred method of getting a Path from a <code>pathd</code> string is\nas an argument:</p>\n<pre><code>&gt;&gt;&gt; from svgelements import Path\n&gt;&gt;&gt; Path('M 100 100 L 300 100')\nPath(Move(end=Point(100,100)), Line(start=Point(100,100), end=Point(300,100)))\n</code></pre>\n<h4>PathSegment Classes</h4>\n<p>These are the SVG PathSegment classes. See the <code>SVG specifications &lt;http://www.w3.org/TR/SVG/paths.html&gt;</code>_ for more information on what each\nparameter means.</p>\n<ul>\n<li>\n<p><code>Move(start, end)</code> The move object describes a move to the start of the next subpath. It may lack a start position but not en end position.</p>\n</li>\n<li>\n<p><code>Close(start, end)</code> The close object describes a close path element. It will have a length if and only if the end point is not equal to the subpath start point. Neither the start point or end point is required.</p>\n</li>\n<li>\n<p><code>Line(start, end)</code> The line object describes a line moving straight from one point to the next point.</p>\n</li>\n<li>\n<p><code>Arc(start, radius, rotation, arc, sweep, end)</code> The arc object describes an arc across a circular path. This supports multiple types of parameterizations. The given default there is compatible with <code>svg.path</code> and has a complex radius. It is also valid to divide radius into <code>rx</code> and <code>ry</code> or Arc(start, end, center, prx, pry, sweep) where start, end, center, prx, pry are points and sweep is the radians value of the arc distance traveled.</p>\n</li>\n<li>\n<p><code>QuadraticBezier(start, control, end)</code> the quadratic bezier object describes a single control point bezier curve.</p>\n</li>\n<li>\n<p><code>CubicBezier(start, control1, control2, end)</code> the cubic bezier curve object describes a two control point bezier curve.</p>\n</li>\n</ul>\n<h3>Examples</h3>\n<p>This SVG path example draws a triangle:</p>\n<pre><code>&gt;&gt;&gt; path1 = Path('M 100 100 L 300 100 L 200 300 z')\n</code></pre>\n<p>You can format SVG paths in many different ways, all valid paths should be\naccepted::</p>\n<pre><code>&gt;&gt;&gt; path2 = Path('M100,100L300,100L200,300z')\n</code></pre>\n<p>And these paths should be equal:</p>\n<pre><code>&gt;&gt;&gt; path1 == path2\nTrue\n</code></pre>\n<p>You can also build a path from objects:</p>\n<pre><code>&gt;&gt;&gt; path3 = Path(Move(100 + 100j), Line(100 + 100j, 300 + 100j), Line(300 + 100j, 200 + 300j), Close(200 + 300j, 100 + 100j))\n</code></pre>\n<p>And it should again be equal to the first path::</p>\n<pre><code>&gt;&gt;&gt; path1 == path3\nTrue\n</code></pre>\n<p>Paths are mutable sequences, you can slice and append::</p>\n<pre><code>&gt;&gt;&gt; path1.append(QuadraticBezier(300+100j, 200+200j, 200+300j))\n&gt;&gt;&gt; len(path1[2:]) == 3\nTrue\n</code></pre>\n<p>Note that there is no protection against you creating paths that are invalid.\nYou can for example have a Close command that doesn't end at the path start:</p>\n<pre><code>&gt;&gt;&gt; wrong = Path(Line(100+100j,200+100j), Close(200+300j, 0))\n&gt;&gt;&gt; wrong.d()\n'L 200,100 Z'\n</code></pre>\n<h2>Matrix (Transformations)</h2>\n<p>SVG 1.1, 7.15.3 defines the matrix form as:</p>\n<pre><code>[a c  e]\n[b d  f]\n</code></pre>\n<p>Since we are delegating to SVG spec for such things, this is how it is implemented in elements.</p>\n<p>To be compatible with SVG 1.1 and SVG 2.0 the matrix class provided has all the SVG functions as well as the CSS functions:</p>\n<ul>\n<li>translate(x,[y])</li>\n<li>translateX(x)</li>\n<li>translateY(y)</li>\n<li>scale(x,[y])</li>\n<li>scaleX(x)</li>\n<li>scaleY(y)</li>\n<li>skew(x,[y])</li>\n<li>skewX(x)</li>\n<li>skewY(y)</li>\n</ul>\n<p>Since we have compatibility with CSS for the SVG 2.0 spec compatibility we can perform length translations:</p>\n<pre><code>&gt;&gt;&gt; Point(0,0) * Matrix(\"Translate(1cm,1cm)\")\nPoint('1cm','1cm')\n</code></pre>\n<p>Do note, however that this isn't an intended purpose. Points are expected in native units. You should render the Matrix prior to using it. This means you must give it the correct units to translate the information from one form to another.</p>\n<pre><code>&gt;&gt;&gt; Point(0,0) * (Matrix(\"Translate(1cm,1cm)\").render(ppi=96.0))\nPoint(37.795296,37.795296)\n</code></pre>\n<p>We can also rotate by <code>turns</code>, <code>grad</code>, <code>deg</code>, <code>rad</code> which are permitted CSS angles:</p>\n<pre><code>&gt;&gt;&gt; Point(10,0) * Matrix(\"Rotate(1turn)\")\nPoint(10,-0)\n&gt;&gt;&gt; Point(10,0) * Matrix(\"Rotate(400grad)\")\nPoint(10,-0)\n&gt;&gt;&gt; Point(10,0) * Matrix(\"Rotate(360deg)\")\nPoint(10,-0)\n</code></pre>\n<p>A large goal of this project is to provide a more robust modifications of Path objects including matrix transformations. This is done by three major shifts from <code>svg.path</code>s methods.</p>\n<ul>\n<li>Points are not stored as complex numbers. These are stored as Point objects, which have backwards compatibility with complex numbers, without the data actually being backed by a <code>complex</code>.</li>\n<li>A matrix is added which conforms to the SVGMatrix Element. The matrix contains valid versions of all the affine transformations elements required by the SVG Spec.</li>\n<li>The <code>Arc</code> object is fundamentally backed by a different point-based parameterization.</li>\n</ul>\n<p>The objects themselves have robust dunder methods. So if you have a path object you may simply multiply it by a matrix.</p>\n<pre><code>&gt;&gt;&gt; Path(Line(0+0j, 100+100j)) * Matrix.scale(2)\nPath(Line(start=Point(0,0), end=Point(100,100)), transform=Matrix(2, 0, 0, 2, 0, 0), stroke='None', fill='None')\n</code></pre>\n<p>Or rotate a parsed path.</p>\n<pre><code>&gt;&gt;&gt; Path(\"M0,0L100,100\") * Matrix.rotate(30)\nPath(Move(end=Point(0,0)), Line(start=Point(0,0), end=Point(100,100)), transform=Matrix(0.154251449888, -0.988031624093, 0.988031624093, 0.154251449888, 0, 0))\n</code></pre>\n<p>Or modify an SVG path.</p>\n<pre><code>&gt;&gt;&gt; str(Path(\"M0,0L100,100\") * Matrix.rotate(30))\n'M 0,0 L 114.228,-83.378'\n</code></pre>\n<p>The Matrix objects can be used to modify points:</p>\n<pre><code>&gt;&gt;&gt; Point(100,100) * Matrix(\"scale(2)\")\nPoint(200,200)\n\n&gt;&gt;&gt; Point(100,100) * (Matrix(\"scale(2)\") * Matrix(\"Translate(40,40)\"))\nPoint(240,240)\n</code></pre>\n<p>Do note that the order of operations for matrices matters:</p>\n<pre><code>&gt;&gt;&gt; Point(100,100) * (Matrix(\"Translate(40,40)\") * Matrix(\"scale(2)\"))\nPoint(280,280)\n</code></pre>\n<p>The first version is:</p>\n<pre><code>&gt;&gt;&gt; (Matrix(\"scale(2)\") * Matrix(\"Translate(40,40)\"))\nMatrix(2, 0, 0, 2, 40, 40)\n</code></pre>\n<p>The second is:</p>\n<pre><code>&gt;&gt;&gt;&gt; (Matrix(\"Translate(40,40)\") * Matrix(\"scale(2)\"))\nMatrix(2, 0, 0, 2, 80, 80)\n</code></pre>\n<p>This is:</p>\n<pre><code>&gt;&gt;&gt;&gt; Point(100,100) * Matrix(\"Matrix(2,0,0,2,80,80)\")\nPoint(280,280)\n</code></pre>\n<h3>SVG Transform Parsing</h3>\n<p>Within the SVG.elements() schema objects SVG elements. The <code>transform</code> tags within objects are combined together. These are automatically applied if <code>reify=True</code> is set.</p>\n<h3>SVG Dictionary Parsing</h3>\n<pre><code>&gt;&gt;&gt; node = { 'd': \"M0,0 100,0, 0,100 z\", 'transform': \"scale(0.5)\"}\n&gt;&gt;&gt; print(Path(node['d']) * Matrix(node['transform']))\nM 0,0 L 50,0 L 0,50 Z\n</code></pre>\n<h3>SVG Viewport Scaling, Unit Scaling</h3>\n<p>There is need in many applications to append a transformation for the viewbox, height, width. So as to prevent a variety of errors where the expected size is far vastly different from the actual size. If we have a viewbox of \"0 0 100 100\" but the height and width show that to be 50cm wide, then a path \"M25,50L75,50\" within that viewbox has a real size of length of 25cm which can be quite different from 50 (unit-less value).</p>\n<p>This conversion is done through the <code>Viewbox</code> object. This operation is automatically done for SVG.elements() objects.</p>\n<p>Viewbox objects have a call to <code>.transform()</code> which will provide the string for an equivolent transformation for the given viewbox.</p>\n<p>The <code>Viewbox.transform()</code> code conforms to the algorithm given in SVG 1.1 7.2, SVG 2.0 8.2 'equivalent transform of an SVG viewport.' This will also fully implement the <code>preserveAspectRatio</code>, <code>xMidYMid</code>, and <code>meetOrSlice</code> values.</p>\n<h2>SVG Shapes</h2>\n<p>Another important SVG elements are the shapes. While all of these can be converted to paths. They can serve some usages in their original form. There are methods to deform a rectangle that simple don't exist in the path form of that object.</p>\n<ul>\n<li>Rect</li>\n<li>Ellipse</li>\n<li>Circle</li>\n<li>Line (SimpleLine)</li>\n<li>Polyline</li>\n<li>Polygon</li>\n</ul>\n<p>The Line shape is converted into a shape called SimpleLine to not interfere with the Line(PathSegment).</p>\n<p>A Shape is said to be equal to another Shape or a Path if they decompose to same Path.</p>\n<pre><code>&gt;&gt;&gt; Circle() == Ellipse()\nTrue\n &gt;&gt;&gt; Rect() == Path('m0,0h1v1h-1z')\nTrue\n</code></pre>\n<h3>Rect</h3>\n<p>Rectangles are defined by x, y and height, width. Within SVG there are also rounded corners defined with <code>rx</code> and <code>ry</code>.</p>\n<pre><code>&gt;&gt;&gt; Rect(10,10,8,4).d()\n'M 10,10 L 18,10 L 18,14 L 10,14 Z'\n</code></pre>\n<p>Much like all the paths these shapes also contain a <code>.d()</code> function that produces the path data for them. This could then be wrapped into a Path().</p>\n<pre><code>&gt;&gt;&gt; print(Path(Rect(10,10,8,4).d()) * \"rotate(0.5turns)\")\nM -10,-10 L -18,-10 L -18,-14 L -10,-14 Z\n</code></pre>\n<p>Or simply passed to the Path:</p>\n<pre><code>&gt;&gt;&gt; print(Path(Rect(10,10,8,4)) * \"rotate(0.5turns)\")\nM -10,-10 L -18,-10 L -18,-14 L -10,-14 L -10,-10 Z\n</code></pre>\n<p>Or simply multiplied by the matrix itself:</p>\n<pre><code>&gt;&gt;&gt; print(Rect(10,10,8,4) * \"rotate(0.5turns)\")\nRect(x=10, y=10, width=8, height=4, transform=Matrix(-1, 0, -0, -1, 0, 0), stroke='None', fill='None')\n</code></pre>\n<p>And you can equally decompose that Shape:</p>\n<pre><code>&gt;&gt;&gt; (Rect(10,10,8,4) * \"rotate(0.5turns)\").d()\n'M -10,-10 L -18,-10 L -18,-14 L -10,-14 L -10,-10 Z'\n</code></pre>\n<p>Matrices can be applied to Rect objects directly.</p>\n<pre><code>&gt;&gt;&gt; from svgelements import *\n&gt;&gt;&gt; Rect(10,10,8,4) * \"rotate(0.5turns)\"\nRect(x=10, y=10, width=8, height=4, transform=Matrix(-1, 0, -0, -1, 0, 0), stroke='None', fill='None')\n\n&gt;&gt;&gt; Rect(10,10,8,4) * \"rotate(0.25turns)\"\nRect(x=10, y=10, width=8, height=4, transform=Matrix(0, 1, -1, 0, 0, 0))\n</code></pre>\n<p>Rotated Rects produce path_d srings.:</p>\n<pre><code>&gt;&gt;&gt; Rect(10,10,8,4) * \"rotate(14deg)\"\nRect(x=10, y=10, width=8, height=4, transform=Matrix(0.970295726276, 0.2419218956, -0.2419218956, 0.970295726276, 0, 0))\n&gt;&gt;&gt; (Rect(10,10,8,4) * \"rotate(14deg)\").d()\n'M 7.28373830676,12.1221762188 L 15.046104117,14.0575513836 L 14.0784165346,17.9387342887 L 6.31605072436,16.0033591239 Z'\n</code></pre>\n<p>This also works with <code>rx</code> and <code>ry</code>:\n(Note: the path will now contain Arcs)</p>\n<pre><code>&gt;&gt;&gt; (Rect(10,10,8,4, 2, 1) * \"rotate(0.25turns)\").d()\n'M -10,12 L -10,16 A 2,1 90 0,1 -11,18 L -13,18 A 2,1 90 0,1 -14,16 L -14,12 A 2,1 90 0,1 -13,10 L -11,10 A 2,1 90 0,1 -10,12 Z'\n</code></pre>\n<p>You can also decompose the shapes in relative modes:</p>\n<pre><code>&gt;&gt;&gt; (Rect(10,10,8,4, 2, 1) * \"rotate(0.25turns)\").d(relative=True)\n'm -10,12 l 1.77636E-15,4 a 2,1 90 0,1 -1,2 l -2,0 a 2,1 90 0,1 -1,-2 l -1.77636E-15,-4 a 2,1 90 0,1 1,-2 l 2,0 a 2,1 90 0,1 1,2 z'\n</code></pre>\n<h3>Ellipse &amp; Circle</h3>\n<p>Ellipses and Circles are different shapes but since a circle is a particular kind of Ellipse much of the functionality here is duplicated.</p>\n<p>While the objects are different they can be checked for equivalency:</p>\n<pre><code>&gt;&gt;&gt; Ellipse(center=(0,0), rx=10, ry=10) == Circle(center=\"0,0\", r=10.0)\nTrue\n</code></pre>\n<h3>SimpleLine</h3>\n<p>SimpleLine is renamed from the SVG form of <code>Line</code> since we already have <code>Line</code> objects as <code>PathSegment</code>.</p>\n<pre><code>&gt;&gt;&gt; s = SimpleLine(0,0,200,200)\n&gt;&gt;&gt; s\nSimpleLine(x1=0.0, y1=0.0, x2=200.0, y2=200.0)\n&gt;&gt;&gt; s *= \"rotate(45)\"\n&gt;&gt;&gt; s\nSimpleLine(x1=0.0, y1=0.0, x2=200.0, y2=200.0, transform=Matrix(0.707106781187, 0.707106781187, -0.707106781187, 0.707106781187, 0, 0))\n&gt;&gt;&gt; abs(s)\nSimpleLine(x1=0.0, y1=0.0, x2=2.842170943040401e-14, y2=282.842712474619, stroke='None', fill='None')\n&gt;&gt;&gt; s.d()\n'M 0,0 L 2.84217094304E-14,282.842712475\n</code></pre>\n<h3>Polyline and Polygon</h3>\n<p>The difference here is polylines are not closed while Polygons are closed.</p>\n<pre><code>&gt;&gt;&gt; p = Polygon(0,0, 100,0, 100,100, 0,100)\n&gt;&gt;&gt; p *= \"scale(2)\"\n&gt;&gt;&gt; p.d()\n'M 0,0, L 200,0, L 200,200, L 0,200 Z'\n</code></pre>\n<p>and the same for Polyline:</p>\n<pre><code>&gt;&gt;&gt; p = Polyline(0,0, 100,0, 100,100, 0,100)\n&gt;&gt;&gt; p *= \"scale(2)\"\n&gt;&gt;&gt; p.d()\n'M 0,0, L 200,0, L 200,200, L 0,200'\n</code></pre>\n<p>You can just append a \"z\" to the polyline path though.</p>\n<pre><code>&gt;&gt;&gt; Path(Polyline((20,0), (10,10), 0)) + \"z\" == Polygon(\"20,0 10,10 0,0\")\nTrue\n</code></pre>\n<h2>CSS Length</h2>\n<p>The conversion of lengths to utilizes another element <code>Length</code> It provides conversions for <code>mm</code>, <code>cm</code>, <code>in</code>, <code>px</code>, <code>pt</code>, <code>pc</code>, <code>%</code>. You can also parse an element like the string '25mm' calling Length('25mm').value(ppi=96) and get the expected results. You can also call <code>Length('25mm').in_inches()</code> which will return  25mm in inches.</p>\n<pre><code>&gt;&gt;&gt; Length('25mm').in_inches()\n0.9842525\n</code></pre>\n<h2>Color</h2>\n<p>Color is another important element it contains an 'int' as 'value' in the form of an ARGB 32-bit integer. It will parse all the SVG color functions.</p>\n<p>If we get the fill or stroke of an object from a node be a text element. This needs to be converted to a consistent form. We could have a 3, 4, 6, or 8 digit hex. rgb(r,g,b) value, a static dictionary name or percent rgb(r,g,b). And must be properly parsed according to the spec.</p>\n<pre><code>&gt;&gt;&gt; Color(\"red\").hex\n'#ff0000'\n\n&gt;&gt;&gt; Color('red').red\n255\n\n&gt;&gt;&gt;Color('hsl(120, 100%, 50%)')\nColor('#00ff00')\n\n&gt;&gt;&gt; c = Color('hsl(120, 100%, 50%)')\n&gt;&gt;&gt; c.blue = 50\n&gt;&gt;&gt; c\nColor('#00ff32')\n</code></pre>\n<p>In addition you can set various properties of a particular color. Check distances to other colors.</p>\n<pre><code>&gt;&gt;&gt; Color.distance('red', 'lightred')\n25.179356624028344\n&gt;&gt;&gt; Color.distance('red', 'blue')\n403.97524676643246\n&gt;&gt;&gt; Color('red').distance_to('blue')\n403.97524676643246\n</code></pre>\n<h2>Angle</h2>\n<p>Angle is backed by a 'float' and contains all the CSS angle values. 'deg', 'rad', 'grad', 'turn'.</p>\n<pre><code>&gt;&gt;&gt; Angle.degrees(360).as_radians\nAngle(6.283185307180)\n</code></pre>\n<p>The Angle element is used automatically with the Skew and Rotate for matrix.</p>\n<pre><code>&gt;&gt;&gt; Point(100,100) * Matrix(\"SkewX(0.05turn)\")\nPoint(132.491969623291,100)\n</code></pre>\n<h2>Point</h2>\n<p>Point is used in all the SVG path segment objects. With regard to <code>svg.path</code> it is not back by, but implements all the same functionality as a <code>complex</code> and will take a complex as an input. So older <code>svg.path</code> code will remain valid. While also allowing for additional functionality like finding a distance.</p>\n<pre><code>&gt;&gt;&gt; Point(0+100j).distance_to([0,0])\n100.0\n</code></pre>\n<p>The class supports <code>complex</code> subscribable elements, <code>.x</code> and <code>.y</code> methods, and <code>.imag</code> and <code>.real</code>. As well as providing several of these indexing methods.</p>\n<p>It includes a number of point functions like:</p>\n<ul>\n<li><code>move_towards(point,float)</code>: Move this point towards the other point. with an amount [0,1]</li>\n<li><code>distance_to(point)</code>: Calculate the Euclidean distance to the other point.</li>\n<li><code>angle_to(point)</code>: Calculate the angle to the given point.</li>\n<li><code>polar_to(angle,distance)</code>:  Return a point via polar coords at the angle and distance.</li>\n<li><code>reflected_across(point)</code>: Returns a point reflected across another point. (Smooth bezier curves use this).</li>\n</ul>\n<p>This for example takes the 0,0 point turns 1/8th of a turn, and moves forward by 5cm.</p>\n<pre><code>&gt;&gt;&gt; Point(0).polar_to(Angle.turns(0.125), Length(\"5cm\").value(ppi=96))\nPoint(133.626550492764,133.626550492764)\n</code></pre>\n<h1>Acknowledgments</h1>\n<p>The Path element of this project is based in part on the <code>regebro/svg.path</code> ( <a href=\"https://github.com/regebro/svg.path\" rel=\"nofollow\">https://github.com/regebro/svg.path</a> ) project. It is also may be based, in part, on some elements of <code>mathandy/svgpathtools</code> ( <a href=\"https://github.com/mathandy/svgpathtools\" rel=\"nofollow\">https://github.com/mathandy/svgpathtools</a> ).</p>\n<p>The Zingl-Bresenham plotting algorithms are from Alois Zingl's \"The Beauty of Bresenham's Algorithm\"\n( <a href=\"http://members.chello.at/easyfilter/bresenham.html\" rel=\"nofollow\">http://members.chello.at/easyfilter/bresenham.html</a> ). They are all MIT Licensed and this library is\nalso MIT licensed. In the case of Zingl's work this isn't explicit from his website, however from personal\ncorrespondence \"'Free and open source' means you can do anything with it like the MIT licence[sic].\"</p>\n\n          </div>"}, "last_serial": 6661954, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "c30c2c2069d28d7cad1606fc16ae7b76", "sha256": "5636c2550302fc7177c7c7cb5058e00e6f668f411bfecf99f83a8e516e3717b3"}, "downloads": -1, "filename": "svgelements-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c30c2c2069d28d7cad1606fc16ae7b76", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 104342, "upload_time": "2019-12-26T23:21:20", "upload_time_iso_8601": "2019-12-26T23:21:20.352571Z", "url": "https://files.pythonhosted.org/packages/f5/22/eadf47fbf8350642241d22eef9fd1f09a6da8edd8ca525d26e42b8d4b064/svgelements-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "95073ad3b30266226055214b64ea6371", "sha256": "eb474d7e8b6fbfb2f8762ef89c5c8f80517bce10b281f466ecf4501c9dcb8a7b"}, "downloads": -1, "filename": "svgelements-1.0.0.tar.gz", "has_sig": false, "md5_digest": "95073ad3b30266226055214b64ea6371", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 91370, "upload_time": "2019-12-27T00:02:00", "upload_time_iso_8601": "2019-12-27T00:02:00.000619Z", "url": "https://files.pythonhosted.org/packages/16/39/fec1e3de2c795657f4edb5aabd81778a1513f085910cbe239479fd23e2ab/svgelements-1.0.0.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "76cbdc98077502e3daec274014181716", "sha256": "0a86faf0ad7fcb3e73de17c3329b9b49686ee5bf431105e04e1bf18f8a444932"}, "downloads": -1, "filename": "svgelements-1.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "76cbdc98077502e3daec274014181716", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 58407, "upload_time": "2020-02-19T16:36:32", "upload_time_iso_8601": "2020-02-19T16:36:32.755540Z", "url": "https://files.pythonhosted.org/packages/58/c5/85e830644757004b3dcc1d658d4e886072ea51e28adef80905a8b2fe0739/svgelements-1.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0b55d07f8d076cd72e186659f56eb817", "sha256": "5d5c8ec7cf7c35fde3af48c5653d8a01d17b95ed5055cb122156b51d2f4bf9eb"}, "downloads": -1, "filename": "svgelements-1.0.2.tar.gz", "has_sig": false, "md5_digest": "0b55d07f8d076cd72e186659f56eb817", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 91587, "upload_time": "2020-02-19T16:36:34", "upload_time_iso_8601": "2020-02-19T16:36:34.535779Z", "url": "https://files.pythonhosted.org/packages/14/06/9bd05792ba21c51dafd0312fb27fe5c11cfbcc921af0c9626a69afd8429b/svgelements-1.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "76cbdc98077502e3daec274014181716", "sha256": "0a86faf0ad7fcb3e73de17c3329b9b49686ee5bf431105e04e1bf18f8a444932"}, "downloads": -1, "filename": "svgelements-1.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "76cbdc98077502e3daec274014181716", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 58407, "upload_time": "2020-02-19T16:36:32", "upload_time_iso_8601": "2020-02-19T16:36:32.755540Z", "url": "https://files.pythonhosted.org/packages/58/c5/85e830644757004b3dcc1d658d4e886072ea51e28adef80905a8b2fe0739/svgelements-1.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0b55d07f8d076cd72e186659f56eb817", "sha256": "5d5c8ec7cf7c35fde3af48c5653d8a01d17b95ed5055cb122156b51d2f4bf9eb"}, "downloads": -1, "filename": "svgelements-1.0.2.tar.gz", "has_sig": false, "md5_digest": "0b55d07f8d076cd72e186659f56eb817", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 91587, "upload_time": "2020-02-19T16:36:34", "upload_time_iso_8601": "2020-02-19T16:36:34.535779Z", "url": "https://files.pythonhosted.org/packages/14/06/9bd05792ba21c51dafd0312fb27fe5c11cfbcc921af0c9626a69afd8429b/svgelements-1.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:59:52 2020"}