{"info": {"author": "Gavin M. Roy", "author_email": "gavinmroy@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "License :: OSI Approved :: BSD License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy"], "description": "Mikkoo\n======\nA `PgQ <https://wiki.postgresql.org/wiki/SkyTools#PgQ>`_ to\n`RabbitMQ <https://www.rabbitmq.com>`_ relay. Mikkoo is a PgQ consumer that\nthat publishes to RabbitMQ. In addition, it includes a built in auditing\nsystem that can be used to confirm that all PgQ events are received by\nRabbitMQ.\n\nMikkoo is named for the rabbit in the \"Clever Rabbit and the Elephant\" fable.\n\n|Version| |Downloads| |Status|\n\nInstallation\n------------\nMikkoo is available on the `Python Package Index <https://pypi.python.org/pypi/mikkoo>`_\nand can be installed via `pip`:\n\n.. code:: bash\n\n    pip install mikkoo\n\nOnce you've setup `Skytools <https://wiki.postgresql.org/wiki/SkyTools>`_ you may want to\ninstall the optional included utility functions in `mikkoo.sql <mikkoo.sql>`_ to make usage\neasier.\n\nYou can do this with a combination of ``curl`` and ``psql``:\n\n.. code:: bash\n\n    curl -L https://github.com/gmr/mikkoo/blob/master/mikkoo.sql | psql\n\nThis will install multiple stored procedures and an audit table in a mikkoo schema.\nTake a look at the DDL to get a good idea of what each funciton is and how it can\nbe used.\n\nPgQ Setup\n---------\n\n1. Install ``pgq`` into your database and create the queue:\n\n    .. code:: sql\n\n        # CREATE EXTENSION pgq;\n        CREATE EXTENSION\n        # SELECT pgq.create_queue('test');\n        create_queue\n        --------------\n                    1\n        (1 row)\n\n2. Ensure that `pgqd <http://skytools.projects.pgfoundry.org/skytools-3.0/doc/pgqd.html>`_\n   is running.\n\nPgQ Event to AMQP Mapping\n-------------------------\nWhen inserting events into a PgQ queue, the ``pgq.insert_event/7`` function\nshould be used with the following field mappings:\n\n+---------------+-----------------------+\n| PgQ Event     | AMQP                  |\n+===============+=======================+\n| ``ev_type``   | Routing Key           |\n+---------------+-----------------------+\n| ``ev_data``   | Message body          |\n+---------------+-----------------------+\n| ``ev_extra1`` | Exchange              |\n+---------------+-----------------------+\n| ``ev_extra2`` | Content-Type Property |\n+---------------+-----------------------+\n| ``ev_extra3`` | AMQP Properties [1]_  |\n+---------------+-----------------------+\n| ``ev_extra4`` | Headers [2]_          |\n+---------------+-----------------------+\n| ``ev_time``   | Headers.timetamp      |\n+---------------+-----------------------+\n| ``ev_txid``   | Headers.txid          |\n+---------------+-----------------------+\n\n.. [1] AMQP properties should be set as a JSON blob. Values set in the ``ev_extra3``\n       field will overwrite the automatically created properties ``app_id``,\n       ``content_type``, ``correlation_id``, ``headers``, and ``timestamp``.\n.. [2] If ``ev_extra4`` is specified and is a JSON key/value dictionary, it will\n       be assigned to the ``headers`` AMQP property.\n\nThere is a convenience schema in the `mikkoo.sql <mikkoo.sql>`_ file that adds\nstored procedures for creating properly formatted mikkoo events in PgQ. In\naddition, there is are auditing functions that allow for the creation of an\naudit-log of events that were sent to PgQ.\n\n\nAMQP Message Properties\n^^^^^^^^^^^^^^^^^^^^^^^\nThe following table defines the available fields that can be set in a JSON blob\nin the ``ev_extra3`` field when inserting an event.\n\n+----------------------+----------------+\n| Property             | PgSQL Type     |\n+======================+================+\n| ``app_id``           | text           |\n+----------------------+----------------+\n| ``content_encoding`` | text           |\n+----------------------+----------------+\n| ``content_type``     | text           |\n+----------------------+----------------+\n| ``correlation_id``   | text           |\n+----------------------+----------------+\n| ``delivery_mode``    | int2           |\n+----------------------+----------------+\n| ``expiration``       | text           |\n+----------------------+----------------+\n| ``message_id``       | text           |\n+----------------------+----------------+\n| ``headers``          | text/json [3]_ |\n+----------------------+----------------+\n| ``timestamp``        | int4           |\n+----------------------+----------------+\n| ``type``             | text           |\n+----------------------+----------------+\n| ``priority``         | int4           |\n+----------------------+----------------+\n| ``user_id``          | text           |\n+----------------------+----------------+\n\n.. [3] ``headers`` should be sent to a key/value JSON blob if specified\n\nValues assigned in the JSON blob provided to ``ev_extra3`` take precedence over\nthe automatically assigned ``app_id``, ``content_type``, ``correlation_id``,\n``headers``, and ``timestamp`` values created by Mikkoo at processing time.\n\nAs of 1.0, Mikkoo will automatically add four AMQP headers property values. These\nvalues will not overwrite any values with the same name specified in ``ev_extra4``.\noverwriting values with the same name, even if they are specified in the\nThe ``sequence`` value is a dynamically generated ID that attempts to provide\nfuzzy distributed ordering information. The ``timestamp`` value is the ISO-8601\nrepresentation of the ``ev_time`` field, which is created when an event is added\nto PgQ. The ``txid`` value is the ``ev_txid`` value, the PgQ transaction ID for\nthe event.  These values are added to help provide some level of deterministic\nordering. The ``origin`` value is the hostname of the server that Mikkoo is running\non.\n\nEvent Insertion Example\n-----------------------\n\nThe following example inserts a JSON blob message body of ``{\"foo\": \"bar\"}`` that\nwill be published to the ``postgres`` exchange in RabbitMQ using the ``test.routing-key``\nrouting key. The content type is specified in ``ev_extra2`` and the AMQP ``type``\nmessage property is specified in ``ev_extra3``.\n\n.. code:: sql\n\n    # SELECT pgq.insert_event('test', 'test.routing-key', '{\"foo\": \"bar\"}', 'postgres', 'application/json', '{\"type\": \"example\"}', '');\n     insert_event\n    --------------\n                4\n    (1 row)\n\nWhen this message is received by RabbitMQ it will have a message body of:\n\n.. code:: json\n\n    {\"foo\": \"bar\"}\n\nAnd it will have message properties similar to the following:\n\n+----------------------+-------------------------------------------------------+\n| Property             | Example Value                                         |\n+======================+=======================================================+\n| ``app_id``           | ``mikkoo``                                            |\n+----------------------+-------------------------------------------------------+\n| ``content_type``     | ``application/json``                                  |\n+----------------------+-------------------------------------------------------+\n| ``correlation_id``   | ``0ad6b212-4c84-4eb0-8782-9a44bdfe949f``              |\n+----------------------+-------------------------------------------------------+\n| ``headers``          | +---------------+-----------------------------------+ |\n|                      | | Key           | Example Value                     | |\n|                      | +===============+===================================+ |\n|                      | | ``origin``    | ``mikkoo.domain.com``             | |\n|                      | +---------------+-----------------------------------+ |\n|                      | | ``sequence``  | ``4539586784185129828``           | |\n|                      | +---------------+-----------------------------------+ |\n|                      | | ``timestamp`` | ``2017-02-23 06:17:14.471682-00`` | |\n|                      | +---------------+-----------------------------------+ |\n|                      | | ``txid``      | ``41356335556``                   | |\n|                      | +---------------+-----------------------------------+ |\n+----------------------+-------------------------------------------------------+\n| ``timestamp``        | ``1449600290``                                        |\n+----------------------+-------------------------------------------------------+\n| ``type``             | ``example``                                           |\n+----------------------+-------------------------------------------------------+\n\nConfiguration\n-------------\nThe Mikkoo configuration file uses `YAML <http://yaml.org>`_ for markup and allows\nfor one or more PgQ queue to be processed.\n\nIf you have a Sentry or a Sentry account, the ``Application/sentry_dsn`` setting\nwill turn on sentry exception logging, if the\n`raven <https://pypi.python.org/pypi/raven>`_ client library is installed.\n\nQueues are configured by name under the ``Application/workers`` stanza. The\nfollowing example configures two workers for the processing of a queue named\n``invoices``. Each worker process connects to a local PostgreSQL and RabbitMQ\ninstance using default credentials.\n\n.. code:: yaml\n\n    Application:\n      workers:\n         invoices:\n           postgres_url: postgresql://localhost:5432/postgres\n           rabbitmq_url: amqp://localhost:5672/%2f\n           confirm: False\n\nQueue Configuration Options\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\nThe following table details the configuration options available per queue:\n\n+--------------------+---------------------------------------------------------------------+\n| Key                | Description                                                         |\n+====================+=====================================================================+\n| ``confirm``        | Enable/Disable RabbitMQ Publisher Confirmations. Default: ``True``  |\n+--------------------+---------------------------------------------------------------------+\n| ``consumer_name``  | Overwrite the default PgQ consumer name. Default: ``mikkoo``        |\n+--------------------+---------------------------------------------------------------------+\n| ``max_failures``   | Maximum failures before discarding an event. Default: ``10``        |\n+--------------------+---------------------------------------------------------------------+\n| ``postgresql_url`` | The url for connecting to PostgreSQL                                |\n+--------------------+---------------------------------------------------------------------+\n| ``rabbitmq_url``   | The AMQP url for connecting to RabbitMQ                             |\n+--------------------+---------------------------------------------------------------------+\n| ``retry_delay``    | How long in seconds until PgQ emits failed events. Default: ``10``  |\n+--------------------+---------------------------------------------------------------------+\n| ``unregister``     | Unregister a consumer with PgQ on shutdown. Default: ``True``       |\n+--------------------+---------------------------------------------------------------------+\n| ``wait_duration``  | How long to wait before checking the queue after the last empty     |\n|                    | result. Default: ``1``                                              |\n+--------------------+---------------------------------------------------------------------+\n\nExample Configuration\n^^^^^^^^^^^^^^^^^^^^^\n\nThe following is an example of a full configuration file:\n\n.. code:: yaml\n\n    Application:\n\n      poll_interval: 10\n      sentry_dsn: [YOUR SENTRY DSN]\n\n      statsd:\n        enabled: true\n        host: localhost\n        port: 8125\n\n      workers:\n        test:\n          confirm: False\n          consumer_name: my_consumer\n          max_failures: 5\n          postgres_url: postgresql://localhost:5432/postgres\n          rabbitmq_url: amqp://localhost:5672/%2f\n          retry_delay: 5\n          unregister: False\n          wait_duration: 5\n\n    Daemon:\n      user: mikkoo\n      pidfile: /var/run/mikkoo\n\n    Logging:\n      version: 1\n      formatters:\n        verbose:\n          format: '%(levelname) -10s %(asctime)s  %(process)-6d %(processName) -20s %(name) -18s: %(message)s'\n          datefmt: '%Y-%m-%d %H:%M:%S'\n      handlers:\n        console:\n          class: logging.StreamHandler\n          formatter: verbose\n          debug_only: True\n      loggers:\n        helper:\n          handlers: [console]\n          level: INFO\n          propagate: true\n        mikkoo:\n          handlers: [console]\n          level: INFO\n          propagate: true\n        pika:\n          handlers: [console]\n          level: ERROR\n          propagate: true\n        queries:\n          handlers: [console]\n          level: ERROR\n          propagate: true\n        tornado:\n          handlers: [console]\n          level: ERROR\n          propagate: true\n      root:\n        handlers: [console]\n        level: CRITICAL\n        propagate: true\n      disable_existing_loggers: true\n      incremental: false\n\nRunning Mikkoo\n--------------\nAfter creating a configuration file for Mikkoo like the one above, simply run the mikkoo application providing the path to the configuration file:\n\n.. code:: bash\n\n    mikkoo -c mikkoo.yml\n\nThe application will attempt to daemonize unless you use the ``-f`` foreground CLI switch.\n\nMikkoo's CLI help can be invoked with ``--help`` and yields the following output:\n\n.. code:: bash\n\n    $ mikkoo -h\n    usage: mikkoo [-h] [-c CONFIG] [-f]\n\n    Mikkoo is a PgQ to RabbitMQ Relay\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -c CONFIG, --config CONFIG\n                            Path to the configuration file\n      -f, --foreground      Run the application interactively\n\n\n.. |Version| image:: https://img.shields.io/pypi/v/mikkoo.svg?\n   :target: http://badge.fury.io/py/mikkoo\n\n.. |Status| image:: https://img.shields.io/travis/gmr/mikkoo.svg?\n   :target: https://travis-ci.org/gmr/mikkoo\n\n.. |Downloads| image:: https://img.shields.io/pypi/dm/mikkoo.svg?\n   :target: https://pypi.python.org/pypi/mikkoo", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/gmr/mikkoo", "keywords": "amqp rabbitmq postgresql", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "mikkoo", "package_url": "https://pypi.org/project/mikkoo/", "platform": "", "project_url": "https://pypi.org/project/mikkoo/", "project_urls": {"Homepage": "https://github.com/gmr/mikkoo"}, "release_url": "https://pypi.org/project/mikkoo/1.1.2/", "requires_dist": null, "requires_python": "", "summary": "Mikkoo is a PgQ to RabbitMQ Relay", "version": "1.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A <a href=\"https://wiki.postgresql.org/wiki/SkyTools#PgQ\" rel=\"nofollow\">PgQ</a> to\n<a href=\"https://www.rabbitmq.com\" rel=\"nofollow\">RabbitMQ</a> relay. Mikkoo is a PgQ consumer that\nthat publishes to RabbitMQ. In addition, it includes a built in auditing\nsystem that can be used to confirm that all PgQ events are received by\nRabbitMQ.</p>\n<p>Mikkoo is named for the rabbit in the \u201cClever Rabbit and the Elephant\u201d fable.</p>\n<p><a href=\"http://badge.fury.io/py/mikkoo\" rel=\"nofollow\"><img alt=\"Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9f3ee716e2fe2c34937b3fab0515ddaf93384671/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6d696b6b6f6f2e7376673f\"></a> <a href=\"https://pypi.python.org/pypi/mikkoo\" rel=\"nofollow\"><img alt=\"Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6921d39c6aaaa27677f8c79c1451aa2198f987fb/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f6d696b6b6f6f2e7376673f\"></a> <a href=\"https://travis-ci.org/gmr/mikkoo\" rel=\"nofollow\"><img alt=\"Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3c6acee20de47351d37cb79792b8038535602e01/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f676d722f6d696b6b6f6f2e7376673f\"></a></p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Mikkoo is available on the <a href=\"https://pypi.python.org/pypi/mikkoo\" rel=\"nofollow\">Python Package Index</a>\nand can be installed via <cite>pip</cite>:</p>\n<pre>pip install mikkoo\n</pre>\n<p>Once you\u2019ve setup <a href=\"https://wiki.postgresql.org/wiki/SkyTools\" rel=\"nofollow\">Skytools</a> you may want to\ninstall the optional included utility functions in <a href=\"mikkoo.sql\" rel=\"nofollow\">mikkoo.sql</a> to make usage\neasier.</p>\n<p>You can do this with a combination of <tt>curl</tt> and <tt>psql</tt>:</p>\n<pre>curl -L https://github.com/gmr/mikkoo/blob/master/mikkoo.sql <span class=\"p\">|</span> psql\n</pre>\n<p>This will install multiple stored procedures and an audit table in a mikkoo schema.\nTake a look at the DDL to get a good idea of what each funciton is and how it can\nbe used.</p>\n</div>\n<div id=\"pgq-setup\">\n<h2>PgQ Setup</h2>\n<ol>\n<li><p>Install <tt>pgq</tt> into your database and create the queue:</p>\n<blockquote>\n<pre><span class=\"o\">#</span> <span class=\"k\">CREATE</span> <span class=\"n\">EXTENSION</span> <span class=\"n\">pgq</span><span class=\"p\">;</span>\n<span class=\"k\">CREATE</span> <span class=\"n\">EXTENSION</span>\n<span class=\"o\">#</span> <span class=\"k\">SELECT</span> <span class=\"n\">pgq</span><span class=\"p\">.</span><span class=\"n\">create_queue</span><span class=\"p\">(</span><span class=\"s1\">'test'</span><span class=\"p\">);</span>\n<span class=\"n\">create_queue</span>\n<span class=\"c1\">--------------\n</span>            <span class=\"mi\">1</span>\n<span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"k\">row</span><span class=\"p\">)</span>\n</pre>\n</blockquote>\n</li>\n<li><p>Ensure that <a href=\"http://skytools.projects.pgfoundry.org/skytools-3.0/doc/pgqd.html\" rel=\"nofollow\">pgqd</a>\nis running.</p>\n</li>\n</ol>\n</div>\n<div id=\"pgq-event-to-amqp-mapping\">\n<h2>PgQ Event to AMQP Mapping</h2>\n<p>When inserting events into a PgQ queue, the <tt>pgq.insert_event/7</tt> function\nshould be used with the following field mappings:</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>PgQ Event</th>\n<th>AMQP</th>\n</tr>\n</thead>\n<tbody>\n<tr><td><tt>ev_type</tt></td>\n<td>Routing Key</td>\n</tr>\n<tr><td><tt>ev_data</tt></td>\n<td>Message body</td>\n</tr>\n<tr><td><tt>ev_extra1</tt></td>\n<td>Exchange</td>\n</tr>\n<tr><td><tt>ev_extra2</tt></td>\n<td>Content-Type Property</td>\n</tr>\n<tr><td><tt>ev_extra3</tt></td>\n<td>AMQP Properties <a href=\"#id3\" id=\"id1\" rel=\"nofollow\">[1]</a></td>\n</tr>\n<tr><td><tt>ev_extra4</tt></td>\n<td>Headers <a href=\"#id4\" id=\"id2\" rel=\"nofollow\">[2]</a></td>\n</tr>\n<tr><td><tt>ev_time</tt></td>\n<td>Headers.timetamp</td>\n</tr>\n<tr><td><tt>ev_txid</tt></td>\n<td>Headers.txid</td>\n</tr>\n</tbody>\n</table>\n<table id=\"id3\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id1\" rel=\"nofollow\">[1]</a></td><td>AMQP properties should be set as a JSON blob. Values set in the <tt>ev_extra3</tt>\nfield will overwrite the automatically created properties <tt>app_id</tt>,\n<tt>content_type</tt>, <tt>correlation_id</tt>, <tt>headers</tt>, and <tt>timestamp</tt>.</td></tr>\n</tbody>\n</table>\n<table id=\"id4\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id2\" rel=\"nofollow\">[2]</a></td><td>If <tt>ev_extra4</tt> is specified and is a JSON key/value dictionary, it will\nbe assigned to the <tt>headers</tt> AMQP property.</td></tr>\n</tbody>\n</table>\n<p>There is a convenience schema in the <a href=\"mikkoo.sql\" rel=\"nofollow\">mikkoo.sql</a> file that adds\nstored procedures for creating properly formatted mikkoo events in PgQ. In\naddition, there is are auditing functions that allow for the creation of an\naudit-log of events that were sent to PgQ.</p>\n<div id=\"amqp-message-properties\">\n<h3>AMQP Message Properties</h3>\n<p>The following table defines the available fields that can be set in a JSON blob\nin the <tt>ev_extra3</tt> field when inserting an event.</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Property</th>\n<th>PgSQL Type</th>\n</tr>\n</thead>\n<tbody>\n<tr><td><tt>app_id</tt></td>\n<td>text</td>\n</tr>\n<tr><td><tt>content_encoding</tt></td>\n<td>text</td>\n</tr>\n<tr><td><tt>content_type</tt></td>\n<td>text</td>\n</tr>\n<tr><td><tt>correlation_id</tt></td>\n<td>text</td>\n</tr>\n<tr><td><tt>delivery_mode</tt></td>\n<td>int2</td>\n</tr>\n<tr><td><tt>expiration</tt></td>\n<td>text</td>\n</tr>\n<tr><td><tt>message_id</tt></td>\n<td>text</td>\n</tr>\n<tr><td><tt>headers</tt></td>\n<td>text/json <a href=\"#id7\" id=\"id6\" rel=\"nofollow\">[3]</a></td>\n</tr>\n<tr><td><tt>timestamp</tt></td>\n<td>int4</td>\n</tr>\n<tr><td><tt>type</tt></td>\n<td>text</td>\n</tr>\n<tr><td><tt>priority</tt></td>\n<td>int4</td>\n</tr>\n<tr><td><tt>user_id</tt></td>\n<td>text</td>\n</tr>\n</tbody>\n</table>\n<table id=\"id7\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id6\" rel=\"nofollow\">[3]</a></td><td><tt>headers</tt> should be sent to a key/value JSON blob if specified</td></tr>\n</tbody>\n</table>\n<p>Values assigned in the JSON blob provided to <tt>ev_extra3</tt> take precedence over\nthe automatically assigned <tt>app_id</tt>, <tt>content_type</tt>, <tt>correlation_id</tt>,\n<tt>headers</tt>, and <tt>timestamp</tt> values created by Mikkoo at processing time.</p>\n<p>As of 1.0, Mikkoo will automatically add four AMQP headers property values. These\nvalues will not overwrite any values with the same name specified in <tt>ev_extra4</tt>.\noverwriting values with the same name, even if they are specified in the\nThe <tt>sequence</tt> value is a dynamically generated ID that attempts to provide\nfuzzy distributed ordering information. The <tt>timestamp</tt> value is the ISO-8601\nrepresentation of the <tt>ev_time</tt> field, which is created when an event is added\nto PgQ. The <tt>txid</tt> value is the <tt>ev_txid</tt> value, the PgQ transaction ID for\nthe event.  These values are added to help provide some level of deterministic\nordering. The <tt>origin</tt> value is the hostname of the server that Mikkoo is running\non.</p>\n</div>\n</div>\n<div id=\"event-insertion-example\">\n<h2>Event Insertion Example</h2>\n<p>The following example inserts a JSON blob message body of <tt>{\"foo\": \"bar\"}</tt> that\nwill be published to the <tt>postgres</tt> exchange in RabbitMQ using the <tt><span class=\"pre\">test.routing-key</span></tt>\nrouting key. The content type is specified in <tt>ev_extra2</tt> and the AMQP <tt>type</tt>\nmessage property is specified in <tt>ev_extra3</tt>.</p>\n<pre><span class=\"o\">#</span> <span class=\"k\">SELECT</span> <span class=\"n\">pgq</span><span class=\"p\">.</span><span class=\"n\">insert_event</span><span class=\"p\">(</span><span class=\"s1\">'test'</span><span class=\"p\">,</span> <span class=\"s1\">'test.routing-key'</span><span class=\"p\">,</span> <span class=\"s1\">'{\"foo\": \"bar\"}'</span><span class=\"p\">,</span> <span class=\"s1\">'postgres'</span><span class=\"p\">,</span> <span class=\"s1\">'application/json'</span><span class=\"p\">,</span> <span class=\"s1\">'{\"type\": \"example\"}'</span><span class=\"p\">,</span> <span class=\"s1\">''</span><span class=\"p\">);</span>\n <span class=\"n\">insert_event</span>\n<span class=\"c1\">--------------\n</span>            <span class=\"mi\">4</span>\n<span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"k\">row</span><span class=\"p\">)</span>\n</pre>\n<p>When this message is received by RabbitMQ it will have a message body of:</p>\n<pre><span class=\"p\">{</span><span class=\"nt\">\"foo\"</span><span class=\"p\">:</span> <span class=\"s2\">\"bar\"</span><span class=\"p\">}</span>\n</pre>\n<p>And it will have message properties similar to the following:</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Property</th>\n<th>Example Value</th>\n</tr>\n</thead>\n<tbody>\n<tr><td><tt>app_id</tt></td>\n<td><tt>mikkoo</tt></td>\n</tr>\n<tr><td><tt>content_type</tt></td>\n<td><tt>application/json</tt></td>\n</tr>\n<tr><td><tt>correlation_id</tt></td>\n<td><tt><span class=\"pre\">0ad6b212-4c84-4eb0-8782-9a44bdfe949f</span></tt></td>\n</tr>\n<tr><td><tt>headers</tt></td>\n<td><table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Key</th>\n<th>Example Value</th>\n</tr>\n</thead>\n<tbody>\n<tr><td><tt>origin</tt></td>\n<td><tt>mikkoo.domain.com</tt></td>\n</tr>\n<tr><td><tt>sequence</tt></td>\n<td><tt>4539586784185129828</tt></td>\n</tr>\n<tr><td><tt>timestamp</tt></td>\n<td><tt><span class=\"pre\">2017-02-23</span> <span class=\"pre\">06:17:14.471682-00</span></tt></td>\n</tr>\n<tr><td><tt>txid</tt></td>\n<td><tt>41356335556</tt></td>\n</tr>\n</tbody>\n</table>\n</td>\n</tr>\n<tr><td><tt>timestamp</tt></td>\n<td><tt>1449600290</tt></td>\n</tr>\n<tr><td><tt>type</tt></td>\n<td><tt>example</tt></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"configuration\">\n<h2>Configuration</h2>\n<p>The Mikkoo configuration file uses <a href=\"http://yaml.org\" rel=\"nofollow\">YAML</a> for markup and allows\nfor one or more PgQ queue to be processed.</p>\n<p>If you have a Sentry or a Sentry account, the <tt>Application/sentry_dsn</tt> setting\nwill turn on sentry exception logging, if the\n<a href=\"https://pypi.python.org/pypi/raven\" rel=\"nofollow\">raven</a> client library is installed.</p>\n<p>Queues are configured by name under the <tt>Application/workers</tt> stanza. The\nfollowing example configures two workers for the processing of a queue named\n<tt>invoices</tt>. Each worker process connects to a local PostgreSQL and RabbitMQ\ninstance using default credentials.</p>\n<pre><span class=\"nt\">Application</span><span class=\"p\">:</span>\n  <span class=\"nt\">workers</span><span class=\"p\">:</span>\n     <span class=\"nt\">invoices</span><span class=\"p\">:</span>\n       <span class=\"nt\">postgres_url</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">postgresql://localhost:5432/postgres</span>\n       <span class=\"nt\">rabbitmq_url</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">amqp://localhost:5672/%2f</span>\n       <span class=\"nt\">confirm</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">False</span>\n</pre>\n<div id=\"queue-configuration-options\">\n<h3>Queue Configuration Options</h3>\n<p>The following table details the configuration options available per queue:</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Key</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr><td><tt>confirm</tt></td>\n<td>Enable/Disable RabbitMQ Publisher Confirmations. Default: <tt>True</tt></td>\n</tr>\n<tr><td><tt>consumer_name</tt></td>\n<td>Overwrite the default PgQ consumer name. Default: <tt>mikkoo</tt></td>\n</tr>\n<tr><td><tt>max_failures</tt></td>\n<td>Maximum failures before discarding an event. Default: <tt>10</tt></td>\n</tr>\n<tr><td><tt>postgresql_url</tt></td>\n<td>The url for connecting to PostgreSQL</td>\n</tr>\n<tr><td><tt>rabbitmq_url</tt></td>\n<td>The AMQP url for connecting to RabbitMQ</td>\n</tr>\n<tr><td><tt>retry_delay</tt></td>\n<td>How long in seconds until PgQ emits failed events. Default: <tt>10</tt></td>\n</tr>\n<tr><td><tt>unregister</tt></td>\n<td>Unregister a consumer with PgQ on shutdown. Default: <tt>True</tt></td>\n</tr>\n<tr><td><tt>wait_duration</tt></td>\n<td>How long to wait before checking the queue after the last empty\nresult. Default: <tt>1</tt></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"example-configuration\">\n<h3>Example Configuration</h3>\n<p>The following is an example of a full configuration file:</p>\n<pre><span class=\"nt\">Application</span><span class=\"p\">:</span>\n\n  <span class=\"nt\">poll_interval</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">10</span>\n  <span class=\"nt\">sentry_dsn</span><span class=\"p\">:</span> <span class=\"p-Indicator\">[</span><span class=\"nv\">YOUR SENTRY DSN</span><span class=\"p-Indicator\">]</span>\n\n  <span class=\"nt\">statsd</span><span class=\"p\">:</span>\n    <span class=\"nt\">enabled</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">true</span>\n    <span class=\"nt\">host</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">localhost</span>\n    <span class=\"nt\">port</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">8125</span>\n\n  <span class=\"nt\">workers</span><span class=\"p\">:</span>\n    <span class=\"nt\">test</span><span class=\"p\">:</span>\n      <span class=\"nt\">confirm</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">False</span>\n      <span class=\"nt\">consumer_name</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">my_consumer</span>\n      <span class=\"nt\">max_failures</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">5</span>\n      <span class=\"nt\">postgres_url</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">postgresql://localhost:5432/postgres</span>\n      <span class=\"nt\">rabbitmq_url</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">amqp://localhost:5672/%2f</span>\n      <span class=\"nt\">retry_delay</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">5</span>\n      <span class=\"nt\">unregister</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">False</span>\n      <span class=\"nt\">wait_duration</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">5</span>\n\n<span class=\"nt\">Daemon</span><span class=\"p\">:</span>\n  <span class=\"nt\">user</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">mikkoo</span>\n  <span class=\"nt\">pidfile</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">/var/run/mikkoo</span>\n\n<span class=\"nt\">Logging</span><span class=\"p\">:</span>\n  <span class=\"nt\">version</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">1</span>\n  <span class=\"nt\">formatters</span><span class=\"p\">:</span>\n    <span class=\"nt\">verbose</span><span class=\"p\">:</span>\n      <span class=\"nt\">format</span><span class=\"p\">:</span> <span class=\"s\">'%(levelname)</span><span class=\"nv\"> </span><span class=\"s\">-10s</span><span class=\"nv\"> </span><span class=\"s\">%(asctime)s</span><span class=\"nv\">  </span><span class=\"s\">%(process)-6d</span><span class=\"nv\"> </span><span class=\"s\">%(processName)</span><span class=\"nv\"> </span><span class=\"s\">-20s</span><span class=\"nv\"> </span><span class=\"s\">%(name)</span><span class=\"nv\"> </span><span class=\"s\">-18s:</span><span class=\"nv\"> </span><span class=\"s\">%(message)s'</span>\n      <span class=\"nt\">datefmt</span><span class=\"p\">:</span> <span class=\"s\">'%Y-%m-%d</span><span class=\"nv\"> </span><span class=\"s\">%H:%M:%S'</span>\n  <span class=\"nt\">handlers</span><span class=\"p\">:</span>\n    <span class=\"nt\">console</span><span class=\"p\">:</span>\n      <span class=\"nt\">class</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">logging.StreamHandler</span>\n      <span class=\"nt\">formatter</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">verbose</span>\n      <span class=\"nt\">debug_only</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">True</span>\n  <span class=\"nt\">loggers</span><span class=\"p\">:</span>\n    <span class=\"nt\">helper</span><span class=\"p\">:</span>\n      <span class=\"nt\">handlers</span><span class=\"p\">:</span> <span class=\"p-Indicator\">[</span><span class=\"nv\">console</span><span class=\"p-Indicator\">]</span>\n      <span class=\"nt\">level</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">INFO</span>\n      <span class=\"nt\">propagate</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">true</span>\n    <span class=\"nt\">mikkoo</span><span class=\"p\">:</span>\n      <span class=\"nt\">handlers</span><span class=\"p\">:</span> <span class=\"p-Indicator\">[</span><span class=\"nv\">console</span><span class=\"p-Indicator\">]</span>\n      <span class=\"nt\">level</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">INFO</span>\n      <span class=\"nt\">propagate</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">true</span>\n    <span class=\"nt\">pika</span><span class=\"p\">:</span>\n      <span class=\"nt\">handlers</span><span class=\"p\">:</span> <span class=\"p-Indicator\">[</span><span class=\"nv\">console</span><span class=\"p-Indicator\">]</span>\n      <span class=\"nt\">level</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">ERROR</span>\n      <span class=\"nt\">propagate</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">true</span>\n    <span class=\"nt\">queries</span><span class=\"p\">:</span>\n      <span class=\"nt\">handlers</span><span class=\"p\">:</span> <span class=\"p-Indicator\">[</span><span class=\"nv\">console</span><span class=\"p-Indicator\">]</span>\n      <span class=\"nt\">level</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">ERROR</span>\n      <span class=\"nt\">propagate</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">true</span>\n    <span class=\"nt\">tornado</span><span class=\"p\">:</span>\n      <span class=\"nt\">handlers</span><span class=\"p\">:</span> <span class=\"p-Indicator\">[</span><span class=\"nv\">console</span><span class=\"p-Indicator\">]</span>\n      <span class=\"nt\">level</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">ERROR</span>\n      <span class=\"nt\">propagate</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">true</span>\n  <span class=\"nt\">root</span><span class=\"p\">:</span>\n    <span class=\"nt\">handlers</span><span class=\"p\">:</span> <span class=\"p-Indicator\">[</span><span class=\"nv\">console</span><span class=\"p-Indicator\">]</span>\n    <span class=\"nt\">level</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">CRITICAL</span>\n    <span class=\"nt\">propagate</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">true</span>\n  <span class=\"nt\">disable_existing_loggers</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">true</span>\n  <span class=\"nt\">incremental</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">false</span>\n</pre>\n</div>\n</div>\n<div id=\"running-mikkoo\">\n<h2>Running Mikkoo</h2>\n<p>After creating a configuration file for Mikkoo like the one above, simply run the mikkoo application providing the path to the configuration file:</p>\n<pre>mikkoo -c mikkoo.yml\n</pre>\n<p>The application will attempt to daemonize unless you use the <tt><span class=\"pre\">-f</span></tt> foreground CLI switch.</p>\n<p>Mikkoo\u2019s CLI help can be invoked with <tt><span class=\"pre\">--help</span></tt> and yields the following output:</p>\n<pre>$ mikkoo -h\nusage: mikkoo <span class=\"o\">[</span>-h<span class=\"o\">]</span> <span class=\"o\">[</span>-c CONFIG<span class=\"o\">]</span> <span class=\"o\">[</span>-f<span class=\"o\">]</span>\n\nMikkoo is a PgQ to RabbitMQ Relay\n\noptional arguments:\n  -h, --help            show this <span class=\"nb\">help</span> message and <span class=\"nb\">exit</span>\n  -c CONFIG, --config CONFIG\n                        Path to the configuration file\n  -f, --foreground      Run the application interactively\n</pre>\n</div>\n\n          </div>"}, "last_serial": 6339401, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "bcbf02df84822ffebac135fc027836c1", "sha256": "5f821e8f8c1736a4506da87c57ddbe58a139a43a98f49bcba8a613da7ca5028c"}, "downloads": -1, "filename": "mikkoo-0.1.0.tar.gz", "has_sig": false, "md5_digest": "bcbf02df84822ffebac135fc027836c1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17479, "upload_time": "2015-12-10T02:54:39", "upload_time_iso_8601": "2015-12-10T02:54:39.199381Z", "url": "https://files.pythonhosted.org/packages/c1/f4/d7ff8b083369ec0f62d30d10e211346341925c99db1e9c53fcfe8b955c09/mikkoo-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "04042d3b7fb9c6677933f0e73fbebed1", "sha256": "998319677caae2845e394b3814e55eeeb847aefd5edb5362e8768c0a09929804"}, "downloads": -1, "filename": "mikkoo-0.2.0.tar.gz", "has_sig": false, "md5_digest": "04042d3b7fb9c6677933f0e73fbebed1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17537, "upload_time": "2015-12-23T21:05:59", "upload_time_iso_8601": "2015-12-23T21:05:59.716829Z", "url": "https://files.pythonhosted.org/packages/42/da/ac8ebe0b74aefbc906ab0aad001263cbda80c4e5142da3bb246516db2a8b/mikkoo-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "97dc1150988b2490592ab35f50b6bd3f", "sha256": "695f8dc517ba9c776587a8f5ba1b5a7832a5b2bd7827f1a5eea6153dac5ae806"}, "downloads": -1, "filename": "mikkoo-0.3.0.tar.gz", "has_sig": false, "md5_digest": "97dc1150988b2490592ab35f50b6bd3f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17610, "upload_time": "2015-12-23T22:10:28", "upload_time_iso_8601": "2015-12-23T22:10:28.476451Z", "url": "https://files.pythonhosted.org/packages/2c/4e/21e2c7a496d30cb85f341db25652c54ff523173f88d5156d896dad12a2ff/mikkoo-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "e1ba06114f3f165a39ad4ebddf35b3d5", "sha256": "0aa6711dbfd28cbfcfac6d50373e3a74d79c2e582e1a8ddd2a0d65a88cf249ae"}, "downloads": -1, "filename": "mikkoo-0.4.0.tar.gz", "has_sig": false, "md5_digest": "e1ba06114f3f165a39ad4ebddf35b3d5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18972, "upload_time": "2015-12-24T01:21:00", "upload_time_iso_8601": "2015-12-24T01:21:00.553709Z", "url": "https://files.pythonhosted.org/packages/97/d6/3014cec13499f4ea312dba69cc1cfa437a141de51dfa74685eaeebd47343/mikkoo-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "c885dbea0ddfe9aa07cb1aac9dbb488d", "sha256": "d1a726459462b2156c4459ddee94a33416961436673da2f1ab06f931d6bee566"}, "downloads": -1, "filename": "mikkoo-0.4.1.tar.gz", "has_sig": false, "md5_digest": "c885dbea0ddfe9aa07cb1aac9dbb488d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18990, "upload_time": "2015-12-24T01:58:09", "upload_time_iso_8601": "2015-12-24T01:58:09.316942Z", "url": "https://files.pythonhosted.org/packages/f1/51/06a2208fabbec3a4a751f7a66189a1c378f9e9434673ba0b26a99493e014/mikkoo-0.4.1.tar.gz", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "3418d866528ef8863018919b3ee3be9e", "sha256": "af4530916729ba6fa4ece9ab54ad7e3eab2bfae675f81e2cc86bfcee8118c3e1"}, "downloads": -1, "filename": "mikkoo-0.4.2.tar.gz", "has_sig": false, "md5_digest": "3418d866528ef8863018919b3ee3be9e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18882, "upload_time": "2015-12-31T21:44:05", "upload_time_iso_8601": "2015-12-31T21:44:05.366768Z", "url": "https://files.pythonhosted.org/packages/7c/a2/a469b10f307d9c6435fc177a71c0cc6f656decb7765b2e54a4773131311b/mikkoo-0.4.2.tar.gz", "yanked": false}], "0.4.3": [{"comment_text": "", "digests": {"md5": "9c88cbd119c84a3fa874500f98ac7d81", "sha256": "6a0bd1d67a1ba68ed7802ededa14dcc68f0a0077d86d5f219beed6c329142239"}, "downloads": -1, "filename": "mikkoo-0.4.3.tar.gz", "has_sig": false, "md5_digest": "9c88cbd119c84a3fa874500f98ac7d81", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18929, "upload_time": "2015-12-31T21:47:19", "upload_time_iso_8601": "2015-12-31T21:47:19.264993Z", "url": "https://files.pythonhosted.org/packages/65/90/d0551c6eb2f132f0e50d69d999feaf6083aa8e2e6f0856594dc92ba27b63/mikkoo-0.4.3.tar.gz", "yanked": false}], "0.4.4": [{"comment_text": "", "digests": {"md5": "a28adabcea23d53e9fc93d4ff4be6787", "sha256": "2dc28b37087f334b1a76967332497a30ec1f42ba6486d82cd2d214e4acbcd7d1"}, "downloads": -1, "filename": "mikkoo-0.4.4.tar.gz", "has_sig": false, "md5_digest": "a28adabcea23d53e9fc93d4ff4be6787", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19838, "upload_time": "2016-01-22T18:35:10", "upload_time_iso_8601": "2016-01-22T18:35:10.530746Z", "url": "https://files.pythonhosted.org/packages/59/e7/ca891ca85fa5517d4d34330b31ca614a1f6fabd58baae22da2da6ea8e686/mikkoo-0.4.4.tar.gz", "yanked": false}], "0.4.5": [{"comment_text": "", "digests": {"md5": "aaa04ee192c68395f522565b338b1aea", "sha256": "22a068bbdec41a5a516d76302f1b61aa79e9ff768a60f113dca23007817659cf"}, "downloads": -1, "filename": "mikkoo-0.4.5.tar.gz", "has_sig": false, "md5_digest": "aaa04ee192c68395f522565b338b1aea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19836, "upload_time": "2016-10-06T16:49:12", "upload_time_iso_8601": "2016-10-06T16:49:12.045163Z", "url": "https://files.pythonhosted.org/packages/43/6d/e0fa91ac9027103af56269f04299ea851586c2585e0c51519357d858862b/mikkoo-0.4.5.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "8f13a1a38fc9b6533dff9d23a3def899", "sha256": "759c867272494938ac502a724bcf676e8a8641e5acab42c1a31d937cb3bcf6ff"}, "downloads": -1, "filename": "mikkoo-1.0.0.tar.gz", "has_sig": false, "md5_digest": "8f13a1a38fc9b6533dff9d23a3def899", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20501, "upload_time": "2017-02-23T18:13:26", "upload_time_iso_8601": "2017-02-23T18:13:26.146693Z", "url": "https://files.pythonhosted.org/packages/6a/17/7384492be98fc4692604674395e0a6bbbb81368d7b8d3a895550ba21a893/mikkoo-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "564a1ceb4e36b4d1c0b3b0e73c41342f", "sha256": "c5a8606a8aaff511926f41576111479d5805630908b009be2f858312c93b201d"}, "downloads": -1, "filename": "mikkoo-1.1.0.tar.gz", "has_sig": false, "md5_digest": "564a1ceb4e36b4d1c0b3b0e73c41342f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22879, "upload_time": "2019-12-19T16:23:21", "upload_time_iso_8601": "2019-12-19T16:23:21.518073Z", "url": "https://files.pythonhosted.org/packages/db/ef/1c09110265a0885130f7915339b527dc3c602f3d0501fb16788e68f9f360/mikkoo-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "66393fb25a5e92b9ad24b08d30861f1f", "sha256": "673296829781494ccd828a3ef6e71549cda67e117184d64c7ca61738533d02c6"}, "downloads": -1, "filename": "mikkoo-1.1.1.tar.gz", "has_sig": false, "md5_digest": "66393fb25a5e92b9ad24b08d30861f1f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22868, "upload_time": "2019-12-19T18:14:04", "upload_time_iso_8601": "2019-12-19T18:14:04.540349Z", "url": "https://files.pythonhosted.org/packages/d6/ff/4dc5adab2e5f6060e0b8de7512fe8cbbfeb93a78e0209fbd30f194c20b45/mikkoo-1.1.1.tar.gz", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "0c778cec7c3ce575860150ca067fd1fb", "sha256": "2b56d127381097786461b7ca573e2416bd5211ed349d3f2c75ce2def8384dd77"}, "downloads": -1, "filename": "mikkoo-1.1.2.tar.gz", "has_sig": false, "md5_digest": "0c778cec7c3ce575860150ca067fd1fb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22853, "upload_time": "2019-12-20T14:30:13", "upload_time_iso_8601": "2019-12-20T14:30:13.893996Z", "url": "https://files.pythonhosted.org/packages/61/7a/22b7906bdd3e82a33e987fb9c34f8ea689623c84ff77665b9e5e757a4a04/mikkoo-1.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0c778cec7c3ce575860150ca067fd1fb", "sha256": "2b56d127381097786461b7ca573e2416bd5211ed349d3f2c75ce2def8384dd77"}, "downloads": -1, "filename": "mikkoo-1.1.2.tar.gz", "has_sig": false, "md5_digest": "0c778cec7c3ce575860150ca067fd1fb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22853, "upload_time": "2019-12-20T14:30:13", "upload_time_iso_8601": "2019-12-20T14:30:13.893996Z", "url": "https://files.pythonhosted.org/packages/61/7a/22b7906bdd3e82a33e987fb9c34f8ea689623c84ff77665b9e5e757a4a04/mikkoo-1.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:41 2020"}