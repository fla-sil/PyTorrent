{"info": {"author": "Henrik Palmlund Wahlgren @ Palmlund Wahlgren Innovative Technology AB", "author_email": "henrik@pwit.se", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3 :: Only", "Topic :: Software Development :: Libraries"], "description": "# iflag\n\nA Python library for the Itron / Actaris IFLAG and Corus protocol\n\n## Installing\n\nInstall via pip, python 3.6+ only\n\n```pip install iflag```\n\n## About\n\niflag is a library focused on reading and writing data to devices using the IFLAG or \nCorus protocol. Mainly Itron / Actaris gas volume converters. Communication is done over \nTCP/IP\n\n## Features\n\nThe library is now only focused on using Single Address Mode (SAM) of the Corus protocol\nto access data. SEVC-D parameters of I-FLAG is not supported.\n\n* Read parameters\n* Write parameters\n* Read databases (logs), event log not yet implemented\n\n## Usage\n\n- Good to know: There are several different float formats due to memory constraints in\n    the protocol and device. All floats are handled as `decimal.Decimal` in Python to \n    not have float rounding errors.\n\n### Read parameters:\n\n```python\n\nfrom iflag import CorusClient\n\nclient = CorusClient.with_tcp_transport(address=('localhost', 4000))\nclient.read_parameters(['datetime', 'index_unconverted', 'index_converted'])\n\n```\n\n### Write parameters\n\n```python\nfrom iflag import CorusClient, TcpTransport\nfrom datetime import datetime\ntransport = TcpTransport(address=('localhost', 4000))\nclient = CorusClient(transport=transport)\nclient.write_parameters({'datetime': datetime.now()})\n\n```\n\n### Read database\n\n```python\nfrom iflag import CorusClient\nfrom datetime import datetime, timedelta\nclient = CorusClient.with_tcp_transport(address=('localhost', 4000))\nclient.read_database(database='interval', start=datetime.now(), stop=(datetime.now() - timedelta(hours=4)))\n```\n\n## Parameters\n\nNot all parameters available in a device have been mapped out yet. \nBut the most important ones have been.\n\nParameter Name  | Parameter Description\n--- | ---\nfirmware_version | Main firmware version \npulse_weight | Input pulse weight \ncompressibility_formula | Compressibility Formula: 0=AGANX19 Standard, 1=S-GERG88, 2=PT, 3=AGANx19 Modified, 4=Not Used, 5=T, 6=16 Coeff. 7=AGA8 \npressure_base | Base pressure, in selected pressure unit \ntemperature_base | Base temperature, in Kelvin \npressure_low | Low pressure threshold (Pmin) \npressure_high | High pressure threshold (Pmax) \ntemperature_low | Low temperature threshold (Tmin) \ntemperature_high | High temperature threshold (Tmax) \ndatetime | Current time and date \nbattery_days | Battery Autonomy Counter, in days \nindex_unconverted | Unconverted Index \nindex_converted | Converted Index\n\n\n\n# Changelog\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## [Unreleased]\n### Added \n### Changed\n### Deprecated\n### Removed\n### Fixed\n### Security\n\n## [0.2.0] - 2020-01-14\n\n### Removed\n- Removed internal session handling as it was in the way of optimizing running several actions\ndirectly after each other. Instead now you need to call `client.startup()` in the\nbeginning and `client.shutdown()` when you are done. \n\n## [0.1.2] - 2020-01-14\n\n### Changed\n-  Separated value identification in parsing config for the different databases so that \nit is possible to know if for example an average value is the monthly or hourly average.  \n\n## [0.1.1] - 2020-01-08\n\n### Fixed\n- Fixed error in setup.py that listed the wrong dependency. (attr instead of attrs)\n\n## [0.1.0] - 2020-01-08 [YANKED]\n\n### Added\n- Initial implementation of reading and writing data to Corus device.\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/pwitab/iflag", "keywords": "", "license": "BSD-3", "maintainer": "", "maintainer_email": "", "name": "iflag", "package_url": "https://pypi.org/project/iflag/", "platform": "", "project_url": "https://pypi.org/project/iflag/", "project_urls": {"Homepage": "https://github.com/pwitab/iflag"}, "release_url": "https://pypi.org/project/iflag/0.2.0/", "requires_dist": ["attrs"], "requires_python": ">=3.6", "summary": "A Python library for the Itron / Actaris IFLAG and Corus protocol", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>iflag</h1>\n<p>A Python library for the Itron / Actaris IFLAG and Corus protocol</p>\n<h2>Installing</h2>\n<p>Install via pip, python 3.6+ only</p>\n<p><code>pip install iflag</code></p>\n<h2>About</h2>\n<p>iflag is a library focused on reading and writing data to devices using the IFLAG or\nCorus protocol. Mainly Itron / Actaris gas volume converters. Communication is done over\nTCP/IP</p>\n<h2>Features</h2>\n<p>The library is now only focused on using Single Address Mode (SAM) of the Corus protocol\nto access data. SEVC-D parameters of I-FLAG is not supported.</p>\n<ul>\n<li>Read parameters</li>\n<li>Write parameters</li>\n<li>Read databases (logs), event log not yet implemented</li>\n</ul>\n<h2>Usage</h2>\n<ul>\n<li>Good to know: There are several different float formats due to memory constraints in\nthe protocol and device. All floats are handled as <code>decimal.Decimal</code> in Python to\nnot have float rounding errors.</li>\n</ul>\n<h3>Read parameters:</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">iflag</span> <span class=\"kn\">import</span> <span class=\"n\">CorusClient</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">CorusClient</span><span class=\"o\">.</span><span class=\"n\">with_tcp_transport</span><span class=\"p\">(</span><span class=\"n\">address</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">'localhost'</span><span class=\"p\">,</span> <span class=\"mi\">4000</span><span class=\"p\">))</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">read_parameters</span><span class=\"p\">([</span><span class=\"s1\">'datetime'</span><span class=\"p\">,</span> <span class=\"s1\">'index_unconverted'</span><span class=\"p\">,</span> <span class=\"s1\">'index_converted'</span><span class=\"p\">])</span>\n</pre>\n<h3>Write parameters</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">iflag</span> <span class=\"kn\">import</span> <span class=\"n\">CorusClient</span><span class=\"p\">,</span> <span class=\"n\">TcpTransport</span>\n<span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">datetime</span>\n<span class=\"n\">transport</span> <span class=\"o\">=</span> <span class=\"n\">TcpTransport</span><span class=\"p\">(</span><span class=\"n\">address</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">'localhost'</span><span class=\"p\">,</span> <span class=\"mi\">4000</span><span class=\"p\">))</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">CorusClient</span><span class=\"p\">(</span><span class=\"n\">transport</span><span class=\"o\">=</span><span class=\"n\">transport</span><span class=\"p\">)</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">write_parameters</span><span class=\"p\">({</span><span class=\"s1\">'datetime'</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()})</span>\n</pre>\n<h3>Read database</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">iflag</span> <span class=\"kn\">import</span> <span class=\"n\">CorusClient</span>\n<span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"n\">timedelta</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">CorusClient</span><span class=\"o\">.</span><span class=\"n\">with_tcp_transport</span><span class=\"p\">(</span><span class=\"n\">address</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">'localhost'</span><span class=\"p\">,</span> <span class=\"mi\">4000</span><span class=\"p\">))</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">read_database</span><span class=\"p\">(</span><span class=\"n\">database</span><span class=\"o\">=</span><span class=\"s1\">'interval'</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">(),</span> <span class=\"n\">stop</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">hours</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)))</span>\n</pre>\n<h2>Parameters</h2>\n<p>Not all parameters available in a device have been mapped out yet.\nBut the most important ones have been.</p>\n<table>\n<thead>\n<tr>\n<th>Parameter Name</th>\n<th>Parameter Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>firmware_version</td>\n<td>Main firmware version</td>\n</tr>\n<tr>\n<td>pulse_weight</td>\n<td>Input pulse weight</td>\n</tr>\n<tr>\n<td>compressibility_formula</td>\n<td>Compressibility Formula: 0=AGANX19 Standard, 1=S-GERG88, 2=PT, 3=AGANx19 Modified, 4=Not Used, 5=T, 6=16 Coeff. 7=AGA8</td>\n</tr>\n<tr>\n<td>pressure_base</td>\n<td>Base pressure, in selected pressure unit</td>\n</tr>\n<tr>\n<td>temperature_base</td>\n<td>Base temperature, in Kelvin</td>\n</tr>\n<tr>\n<td>pressure_low</td>\n<td>Low pressure threshold (Pmin)</td>\n</tr>\n<tr>\n<td>pressure_high</td>\n<td>High pressure threshold (Pmax)</td>\n</tr>\n<tr>\n<td>temperature_low</td>\n<td>Low temperature threshold (Tmin)</td>\n</tr>\n<tr>\n<td>temperature_high</td>\n<td>High temperature threshold (Tmax)</td>\n</tr>\n<tr>\n<td>datetime</td>\n<td>Current time and date</td>\n</tr>\n<tr>\n<td>battery_days</td>\n<td>Battery Autonomy Counter, in days</td>\n</tr>\n<tr>\n<td>index_unconverted</td>\n<td>Unconverted Index</td>\n</tr>\n<tr>\n<td>index_converted</td>\n<td>Converted Index</td>\n</tr></tbody></table>\n<h1>Changelog</h1>\n<p>All notable changes to this project will be documented in this file.</p>\n<p>The format is based on <a href=\"https://keepachangelog.com/en/1.0.0/\" rel=\"nofollow\">Keep a Changelog</a>,\nand this project adheres to <a href=\"https://semver.org/spec/v2.0.0.html\" rel=\"nofollow\">Semantic Versioning</a>.</p>\n<h2>[Unreleased]</h2>\n<h3>Added</h3>\n<h3>Changed</h3>\n<h3>Deprecated</h3>\n<h3>Removed</h3>\n<h3>Fixed</h3>\n<h3>Security</h3>\n<h2>[0.2.0] - 2020-01-14</h2>\n<h3>Removed</h3>\n<ul>\n<li>Removed internal session handling as it was in the way of optimizing running several actions\ndirectly after each other. Instead now you need to call <code>client.startup()</code> in the\nbeginning and <code>client.shutdown()</code> when you are done.</li>\n</ul>\n<h2>[0.1.2] - 2020-01-14</h2>\n<h3>Changed</h3>\n<ul>\n<li>Separated value identification in parsing config for the different databases so that\nit is possible to know if for example an average value is the monthly or hourly average.</li>\n</ul>\n<h2>[0.1.1] - 2020-01-08</h2>\n<h3>Fixed</h3>\n<ul>\n<li>Fixed error in setup.py that listed the wrong dependency. (attr instead of attrs)</li>\n</ul>\n<h2>[0.1.0] - 2020-01-08 [YANKED]</h2>\n<h3>Added</h3>\n<ul>\n<li>Initial implementation of reading and writing data to Corus device.</li>\n</ul>\n\n          </div>"}, "last_serial": 6452376, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "3272802e15a1bf98f0afc0fb9e9f208c", "sha256": "7ad9c2ba0762829aba730441658408e0b0f695c3ec714a537a0741a563ca0775"}, "downloads": -1, "filename": "iflag-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "3272802e15a1bf98f0afc0fb9e9f208c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 15154, "upload_time": "2020-01-08T13:38:27", "upload_time_iso_8601": "2020-01-08T13:38:27.422669Z", "url": "https://files.pythonhosted.org/packages/89/4b/549fd50aa9fc895756599483e0e7b22d6dc79d6876c2c48f269f66ff0a53/iflag-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bfbe15179762b60d8414f55774a1b3ff", "sha256": "11b3e4a3095f43867f090719b5e27830c15506b77c2d2d534a6096656a19c153"}, "downloads": -1, "filename": "iflag-0.1.1.tar.gz", "has_sig": false, "md5_digest": "bfbe15179762b60d8414f55774a1b3ff", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 14808, "upload_time": "2020-01-08T13:38:29", "upload_time_iso_8601": "2020-01-08T13:38:29.320366Z", "url": "https://files.pythonhosted.org/packages/fd/68/d05b7c4aa9479dba6f08edaa986bdd5e3779973ba08b4f711698defe9993/iflag-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "f2d0d866a8bc092fec026cfa04a833db", "sha256": "91cbbcd74a2f33da95d33ac7c2154fd65f75344b796dcadbd256e2ba71bd4871"}, "downloads": -1, "filename": "iflag-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "f2d0d866a8bc092fec026cfa04a833db", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 15419, "upload_time": "2020-01-14T10:17:33", "upload_time_iso_8601": "2020-01-14T10:17:33.857535Z", "url": "https://files.pythonhosted.org/packages/92/59/1e7d63187453311c90e9b897f8ec346293f4c96999361903c610ba6214d5/iflag-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6656ab1fa534f0fa7f3946650761b08e", "sha256": "6e00ae8c39765309633107cff86ba26e31e23fd5e2981f428baab81eccf85614"}, "downloads": -1, "filename": "iflag-0.1.2.tar.gz", "has_sig": false, "md5_digest": "6656ab1fa534f0fa7f3946650761b08e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 15169, "upload_time": "2020-01-14T10:17:35", "upload_time_iso_8601": "2020-01-14T10:17:35.561670Z", "url": "https://files.pythonhosted.org/packages/9a/07/7a39bdce93d06f7eed21968605f5d652853e1f6c9b68632ef1c7d0364cce/iflag-0.1.2.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "57882bd4b73a21da43de7f1c71a7f160", "sha256": "470aecc9f7644dbbb5b773f556542115356279f1a51332cec315727d63a86eb9"}, "downloads": -1, "filename": "iflag-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "57882bd4b73a21da43de7f1c71a7f160", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 15394, "upload_time": "2020-01-14T15:46:58", "upload_time_iso_8601": "2020-01-14T15:46:58.402338Z", "url": "https://files.pythonhosted.org/packages/90/4a/4ea225f3d6ec458cb2e8443418d5f202b60ba28f23bb494b6915fc81d37f/iflag-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "01239373b8f555e3fef12d63767b7d42", "sha256": "81bb1383f0a7fa0d8febe20c0f26120fe844bfda450354724db4ea9d6aab0c0d"}, "downloads": -1, "filename": "iflag-0.2.0.tar.gz", "has_sig": false, "md5_digest": "01239373b8f555e3fef12d63767b7d42", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 15294, "upload_time": "2020-01-14T15:47:00", "upload_time_iso_8601": "2020-01-14T15:47:00.080601Z", "url": "https://files.pythonhosted.org/packages/e2/23/63fe7e0c194a4cc463f0e8be6e2ab1800e799659b51787672fa54f1e9a48/iflag-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "57882bd4b73a21da43de7f1c71a7f160", "sha256": "470aecc9f7644dbbb5b773f556542115356279f1a51332cec315727d63a86eb9"}, "downloads": -1, "filename": "iflag-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "57882bd4b73a21da43de7f1c71a7f160", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 15394, "upload_time": "2020-01-14T15:46:58", "upload_time_iso_8601": "2020-01-14T15:46:58.402338Z", "url": "https://files.pythonhosted.org/packages/90/4a/4ea225f3d6ec458cb2e8443418d5f202b60ba28f23bb494b6915fc81d37f/iflag-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "01239373b8f555e3fef12d63767b7d42", "sha256": "81bb1383f0a7fa0d8febe20c0f26120fe844bfda450354724db4ea9d6aab0c0d"}, "downloads": -1, "filename": "iflag-0.2.0.tar.gz", "has_sig": false, "md5_digest": "01239373b8f555e3fef12d63767b7d42", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 15294, "upload_time": "2020-01-14T15:47:00", "upload_time_iso_8601": "2020-01-14T15:47:00.080601Z", "url": "https://files.pythonhosted.org/packages/e2/23/63fe7e0c194a4cc463f0e8be6e2ab1800e799659b51787672fa54f1e9a48/iflag-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:48:46 2020"}