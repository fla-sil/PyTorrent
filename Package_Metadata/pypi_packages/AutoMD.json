{"info": {"author": "Cameron Barclift", "author_email": "cwbarclift@gmail.com", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Internet :: WWW/HTTP :: Dynamic Content", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# AutoMD\nAutoMD is a documentation library for Flask APIs build with FlaskRESTful and Webargs.\nEndpoint parameters and basic responses are automatically parsed into the OpenAPI specification,\nusing Type Hints and introspection, and a endpoints registered to serve the specification.\n\n## Motivation\nDocumentation libraries tend to rely heavily on elaborate docstrings and static generation from source code.\nThis library requires minimal changes to existing code, and most information (especially parameter specs)\ndoesn't rely on keeping disparate strings up to date.  \n\n## Usage\n### AutoMD registration/initialization\nThe first step is to initialize the AutoMD app from a FlaskRESTful Api.\n\n```python\napp: Flask = Flask(__name__)\napi: Api = Api(app)\n\nspec: AutoMDApp = AutoMDApp(api, \"AutoMD Test App\", \"1.0.0\", \"3.0.0\")\n``` \n\nAfter that, all that is *required* is adding the `@automd` decorator to an existing Resource endpoint.\n\n```python\nclass MinimalStatus(Resource):\n    get_query_arguments = {\n        \"text\": fields.String(required=False)\n    }\n\n    @automd()\n    @use_kwargs(get_query_arguments)\n    def get(self, text):\n        return text\n```\nwhich will mark the endpoint for inclusion in the OpenAPI spec.  In this example, the spec information\nwill be pretty limited, but will still have the API url, argument, and a default value.\n\nWith more complete python annotations, more information can be gleaned:\n```python\nclass IntrospectionStatus(Resource):\n    post_query_arguments = {\n        \"text\": fields.String(required=False)\n    }\n\n    @automd()\n    @use_kwargs(post_query_arguments, location=\"json\")\n    def post(self, text: str = \"Hello AutoMD\") -> str:\n        ret_text: str = \"status check OK\"\n\n        if text is not None:\n            ret_text = f\"{ret_text}: {text}\"\n\n        return ret_text\n```\nFrom this the APISpec also get the parameter type, default value, and API response type.  It does not get the parameter\nlocation yet though, that takes more aguements to automd.\n\nFilling in more information in the webargs fields, automd decorator, use_kwargs decorator, and using one of the\nAutoMD response classes for type annotation and  gives even better information:\n```python\nclass Status(Resource):\n    get_query_arguments = {\n        \"text\": fields.String(required=False, description='Text to return', doc_default=\"Hello AutoMD\")\n    }\n\n    @automd(parameter_schema=get_query_arguments,\n             summary=\"Status Endpoint\",\n             description=\"Status Endpoint, responds with a message made from the input string\")\n    @use_kwargs(get_query_arguments, location=\"query\")\n    def get(self, text: str = None) -> ValueResponse:\n        log_text: str = \"status check OK\"\n\n        log_text = f\"{log_text}: {text or 'Hello AutoMD'}\"\n\n        return ValueResponse(log_text)\n```\n\nWith this information, argument types, return types, summaries, descriptions, detailed default\ninformation, and parameter location info (body, query, etc) is included.  Summary and description\nare the only \"magic strings\" needed, and those will generally not change much or be onerous to\nkeep up to date compared to the automatically grabbed information.\n\nAn example Flask API app is provided to showcase some functionality.  Start it using `run.py`.\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/cliftbar/automd", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "AutoMD", "package_url": "https://pypi.org/project/AutoMD/", "platform": "any", "project_url": "https://pypi.org/project/AutoMD/", "project_urls": {"Homepage": "https://github.com/cliftbar/automd"}, "release_url": "https://pypi.org/project/AutoMD/1.0.1.2/", "requires_dist": ["flask", "flask-restful", "flask-cors", "webargs", "apispec", "pyyaml"], "requires_python": "", "summary": "AutoMD is a documentation library for Flask APIs build with FlaskRESTful and Webargs.", "version": "1.0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>AutoMD</h1>\n<p>AutoMD is a documentation library for Flask APIs build with FlaskRESTful and Webargs.\nEndpoint parameters and basic responses are automatically parsed into the OpenAPI specification,\nusing Type Hints and introspection, and a endpoints registered to serve the specification.</p>\n<h2>Motivation</h2>\n<p>Documentation libraries tend to rely heavily on elaborate docstrings and static generation from source code.\nThis library requires minimal changes to existing code, and most information (especially parameter specs)\ndoesn't rely on keeping disparate strings up to date.</p>\n<h2>Usage</h2>\n<h3>AutoMD registration/initialization</h3>\n<p>The first step is to initialize the AutoMD app from a FlaskRESTful Api.</p>\n<pre><span class=\"n\">app</span><span class=\"p\">:</span> <span class=\"n\">Flask</span> <span class=\"o\">=</span> <span class=\"n\">Flask</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n<span class=\"n\">api</span><span class=\"p\">:</span> <span class=\"n\">Api</span> <span class=\"o\">=</span> <span class=\"n\">Api</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">)</span>\n\n<span class=\"n\">spec</span><span class=\"p\">:</span> <span class=\"n\">AutoMDApp</span> <span class=\"o\">=</span> <span class=\"n\">AutoMDApp</span><span class=\"p\">(</span><span class=\"n\">api</span><span class=\"p\">,</span> <span class=\"s2\">\"AutoMD Test App\"</span><span class=\"p\">,</span> <span class=\"s2\">\"1.0.0\"</span><span class=\"p\">,</span> <span class=\"s2\">\"3.0.0\"</span><span class=\"p\">)</span>\n</pre>\n<p>After that, all that is <em>required</em> is adding the <code>@automd</code> decorator to an existing Resource endpoint.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">MinimalStatus</span><span class=\"p\">(</span><span class=\"n\">Resource</span><span class=\"p\">):</span>\n    <span class=\"n\">get_query_arguments</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"text\"</span><span class=\"p\">:</span> <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">String</span><span class=\"p\">(</span><span class=\"n\">required</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nd\">@automd</span><span class=\"p\">()</span>\n    <span class=\"nd\">@use_kwargs</span><span class=\"p\">(</span><span class=\"n\">get_query_arguments</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">text</span>\n</pre>\n<p>which will mark the endpoint for inclusion in the OpenAPI spec.  In this example, the spec information\nwill be pretty limited, but will still have the API url, argument, and a default value.</p>\n<p>With more complete python annotations, more information can be gleaned:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">IntrospectionStatus</span><span class=\"p\">(</span><span class=\"n\">Resource</span><span class=\"p\">):</span>\n    <span class=\"n\">post_query_arguments</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"text\"</span><span class=\"p\">:</span> <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">String</span><span class=\"p\">(</span><span class=\"n\">required</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nd\">@automd</span><span class=\"p\">()</span>\n    <span class=\"nd\">@use_kwargs</span><span class=\"p\">(</span><span class=\"n\">post_query_arguments</span><span class=\"p\">,</span> <span class=\"n\">location</span><span class=\"o\">=</span><span class=\"s2\">\"json\"</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">post</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s2\">\"Hello AutoMD\"</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n        <span class=\"n\">ret_text</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s2\">\"status check OK\"</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">text</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">ret_text</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">\"</span><span class=\"si\">{</span><span class=\"n\">ret_text</span><span class=\"si\">}</span><span class=\"s2\">: </span><span class=\"si\">{</span><span class=\"n\">text</span><span class=\"si\">}</span><span class=\"s2\">\"</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">ret_text</span>\n</pre>\n<p>From this the APISpec also get the parameter type, default value, and API response type.  It does not get the parameter\nlocation yet though, that takes more aguements to automd.</p>\n<p>Filling in more information in the webargs fields, automd decorator, use_kwargs decorator, and using one of the\nAutoMD response classes for type annotation and  gives even better information:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Status</span><span class=\"p\">(</span><span class=\"n\">Resource</span><span class=\"p\">):</span>\n    <span class=\"n\">get_query_arguments</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"text\"</span><span class=\"p\">:</span> <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">String</span><span class=\"p\">(</span><span class=\"n\">required</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s1\">'Text to return'</span><span class=\"p\">,</span> <span class=\"n\">doc_default</span><span class=\"o\">=</span><span class=\"s2\">\"Hello AutoMD\"</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nd\">@automd</span><span class=\"p\">(</span><span class=\"n\">parameter_schema</span><span class=\"o\">=</span><span class=\"n\">get_query_arguments</span><span class=\"p\">,</span>\n             <span class=\"n\">summary</span><span class=\"o\">=</span><span class=\"s2\">\"Status Endpoint\"</span><span class=\"p\">,</span>\n             <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s2\">\"Status Endpoint, responds with a message made from the input string\"</span><span class=\"p\">)</span>\n    <span class=\"nd\">@use_kwargs</span><span class=\"p\">(</span><span class=\"n\">get_query_arguments</span><span class=\"p\">,</span> <span class=\"n\">location</span><span class=\"o\">=</span><span class=\"s2\">\"query\"</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ValueResponse</span><span class=\"p\">:</span>\n        <span class=\"n\">log_text</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s2\">\"status check OK\"</span>\n\n        <span class=\"n\">log_text</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">\"</span><span class=\"si\">{</span><span class=\"n\">log_text</span><span class=\"si\">}</span><span class=\"s2\">: </span><span class=\"si\">{</span><span class=\"n\">text</span> <span class=\"ow\">or</span> <span class=\"s1\">'Hello AutoMD'</span><span class=\"si\">}</span><span class=\"s2\">\"</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">ValueResponse</span><span class=\"p\">(</span><span class=\"n\">log_text</span><span class=\"p\">)</span>\n</pre>\n<p>With this information, argument types, return types, summaries, descriptions, detailed default\ninformation, and parameter location info (body, query, etc) is included.  Summary and description\nare the only \"magic strings\" needed, and those will generally not change much or be onerous to\nkeep up to date compared to the automatically grabbed information.</p>\n<p>An example Flask API app is provided to showcase some functionality.  Start it using <code>run.py</code>.</p>\n\n          </div>"}, "last_serial": 7135017, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "aa42c08f3f9cff019db58e244b6d3b79", "sha256": "a4b7f1339034dcc9923144c98093948e7effe7a3b1f9fbb07ce1959c5fc29025"}, "downloads": -1, "filename": "AutoMD-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "aa42c08f3f9cff019db58e244b6d3b79", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3369, "upload_time": "2020-04-30T04:42:21", "upload_time_iso_8601": "2020-04-30T04:42:21.900681Z", "url": "https://files.pythonhosted.org/packages/33/f3/63010a0a2e75498489e999bb099f13af31510727e75205e6e68f8a9de500/AutoMD-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0ff028e03a7eea94b811e0239960ba6f", "sha256": "438f2256370f82515723f5fce3a9a602b066d51590fc76337ee71d1c4ee58bce"}, "downloads": -1, "filename": "AutoMD-1.0.0.tar.gz", "has_sig": false, "md5_digest": "0ff028e03a7eea94b811e0239960ba6f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3131, "upload_time": "2020-04-30T04:42:24", "upload_time_iso_8601": "2020-04-30T04:42:24.545837Z", "url": "https://files.pythonhosted.org/packages/56/ce/3705a7fba3527231dec335bcdc2c4e2275dbc182bbc884798e161662bd68/AutoMD-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "d37801d97f9c522ccda7632cbba5c4b9", "sha256": "06fae305f03ae75421f78b73ec60d135b59a35bb9cb32bc2d3a1b3ed2b60322d"}, "downloads": -1, "filename": "AutoMD-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "d37801d97f9c522ccda7632cbba5c4b9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3378, "upload_time": "2020-04-30T04:46:29", "upload_time_iso_8601": "2020-04-30T04:46:29.419448Z", "url": "https://files.pythonhosted.org/packages/fa/e3/779b6cdaa26e38f7686698a2d5576b8009abd55640b415663b189a5ca973/AutoMD-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b459eb201e015615785059f840845ee2", "sha256": "ffb2cb32ea249023ee7de6ed7dab5dba0a702d7d4d4228b39d10b2840d6881e2"}, "downloads": -1, "filename": "AutoMD-1.0.1.tar.gz", "has_sig": false, "md5_digest": "b459eb201e015615785059f840845ee2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3138, "upload_time": "2020-04-30T04:46:30", "upload_time_iso_8601": "2020-04-30T04:46:30.642535Z", "url": "https://files.pythonhosted.org/packages/39/1d/6805bbc38914f52b9c87a749623e8f3c524adb6692df5d72846c41bf732b/AutoMD-1.0.1.tar.gz", "yanked": false}], "1.0.1.1": [{"comment_text": "", "digests": {"md5": "62eb72c6402c2e7e3fdd79b0399b7a01", "sha256": "58400126f2b48cf4b9ee615f657cb2fae6cc67e0e5196a670f61c36c89279af5"}, "downloads": -1, "filename": "AutoMD-1.0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "62eb72c6402c2e7e3fdd79b0399b7a01", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8735, "upload_time": "2020-04-30T05:05:58", "upload_time_iso_8601": "2020-04-30T05:05:58.455956Z", "url": "https://files.pythonhosted.org/packages/c8/60/ae9972b86689f63067b5909f1c58d47ff51dad6f089a07d8ca904eeff786/AutoMD-1.0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0805525211b380eb1d29e608b0a24596", "sha256": "038573d7b186f4aee0cf03b459b9380297c49f0ed38fdf43aee3cda302adc425"}, "downloads": -1, "filename": "AutoMD-1.0.1.1.tar.gz", "has_sig": false, "md5_digest": "0805525211b380eb1d29e608b0a24596", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7332, "upload_time": "2020-04-30T05:05:59", "upload_time_iso_8601": "2020-04-30T05:05:59.517099Z", "url": "https://files.pythonhosted.org/packages/c9/98/252d05c0732aa27410d68ceef82485ef257ecccfe3f8fd9c6c6b427901a3/AutoMD-1.0.1.1.tar.gz", "yanked": false}], "1.0.1.2": [{"comment_text": "", "digests": {"md5": "51d13badcc42cc426b1f0400a4fc3c01", "sha256": "ad3a97d36ab595e035d1ebecd17bc15938851a89b5efbd14021ccab5fe5b67e7"}, "downloads": -1, "filename": "AutoMD-1.0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "51d13badcc42cc426b1f0400a4fc3c01", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15957, "upload_time": "2020-04-30T05:14:16", "upload_time_iso_8601": "2020-04-30T05:14:16.554640Z", "url": "https://files.pythonhosted.org/packages/df/d0/283e31c9f085c7e176cd622149aeecabe8fceaa33021d6609a0a2fedbcb2/AutoMD-1.0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e7d5388e33e5422aba4a7101be442d86", "sha256": "fdec99d7e58280959a6a6c68fe50291e855ea71e2027c650ce7c561f8af67d32"}, "downloads": -1, "filename": "AutoMD-1.0.1.2.tar.gz", "has_sig": false, "md5_digest": "e7d5388e33e5422aba4a7101be442d86", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11770, "upload_time": "2020-04-30T05:14:17", "upload_time_iso_8601": "2020-04-30T05:14:17.674365Z", "url": "https://files.pythonhosted.org/packages/83/98/9001dc13686b84ff2c40601a279c1fe3014ccee207c5529c50475c6e35b5/AutoMD-1.0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "51d13badcc42cc426b1f0400a4fc3c01", "sha256": "ad3a97d36ab595e035d1ebecd17bc15938851a89b5efbd14021ccab5fe5b67e7"}, "downloads": -1, "filename": "AutoMD-1.0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "51d13badcc42cc426b1f0400a4fc3c01", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15957, "upload_time": "2020-04-30T05:14:16", "upload_time_iso_8601": "2020-04-30T05:14:16.554640Z", "url": "https://files.pythonhosted.org/packages/df/d0/283e31c9f085c7e176cd622149aeecabe8fceaa33021d6609a0a2fedbcb2/AutoMD-1.0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e7d5388e33e5422aba4a7101be442d86", "sha256": "fdec99d7e58280959a6a6c68fe50291e855ea71e2027c650ce7c561f8af67d32"}, "downloads": -1, "filename": "AutoMD-1.0.1.2.tar.gz", "has_sig": false, "md5_digest": "e7d5388e33e5422aba4a7101be442d86", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11770, "upload_time": "2020-04-30T05:14:17", "upload_time_iso_8601": "2020-04-30T05:14:17.674365Z", "url": "https://files.pythonhosted.org/packages/83/98/9001dc13686b84ff2c40601a279c1fe3014ccee207c5529c50475c6e35b5/AutoMD-1.0.1.2.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:16:13 2020"}