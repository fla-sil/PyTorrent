{"info": {"author": "Manuel Rodriguez", "author_email": "valle.mrv@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "Intended Audience :: Information Technology", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "python-ormsqlite\n================\n\nI've done it to work with kivy and android. It works great with mobile\ndevices. For people who do not seek much complexity. It is simple but\nyou can perform more or less complex queries. Create a model quickly in\nseconds. Just create the model and you can create JSON queries.\n\n:package: Installation\n----------------------\n\nInstall it via ``pip``\n\n``$ [sudo] pip install valleorm``\n\nOr download zip and then install it by running\n\n``$ [sudo] python setup.py install``\n\nFor kivy project only copy folder valleorm on root folder kivy project.\nAnd create your models simply.\n\nCondition example\n-----------------\n\n.. code:: javascript\n\n    conditionQuery = {\n       query: \"nombre='Lolo'\",\n       order: \"ID DESC\",\n       limt: 10,\n       offset: 20,\n       colunms: [\"user.nombre, SUM(salario.salario) AS total\"],\n       group: \"salario.mes\"\n       joins: [\n          {\n            typeJoin: \"INNER LEFT\",\n            tableName: \"salario\",\n            join: \"ID=IDuser\"\n          },\n          {\n             tableName: 'puesto', //for default is INNER JOIN\n             join: 'ID=IDuser'\n          }\n       ]\n    }\n\n.. code:: python\n\n    some_model = Models()\n    rows = model.getAll(condition=conditionQuery)\n    print Models.serialize(rows)\n\nExample from Class inheritance Models\n-------------------------------------\n\n.. code:: python\n\n    from valleorm.models import Models\n    from valleorm.campos import Campo\n    from valleorm.relationship import RelationShip\n\n\n    class User(Models):\n       nombre = Campo(default=\"\", tipo=\"TEXT\")\n       mail = Campo(default=\"\", tipo=\"TEXT\")\n       salario = RelationShip(tipo=\"MANY\", name=\"salario\")\n       def __init__(self):\n           super(User, self).__init__(tableName=\"user\", dbName=\"valleorm.db\" )\n\n\n\n    class Salario(Models):\n       mes = Campo(default=\"\", tipo=\"TEXT\")\n       salario = Campo(default=0.0, tipo=\"REAL\")\n       user = RelationShip(tipo=\"ONE\", name=\"user\")\n       def __init__(self):\n           super(Salario, self).__init__(tableName=\"salario\", dbName=\"valleorm.db\" )\n\n\n\n    user = User()\n    user.nombre = \"manolo cara bolo\"\n    user.mail = \"jjjrrisl@ejemoplo.com\"\n    user.save()\n\n    sal = Salario()\n    sal.mes = \"Mayo\"\n    sal.salario = 1500\n    user.salario.add(sal)\n\n    sal = Salario()\n    sal.mes = \"Junio\"\n    sal.salario = 1500\n    user.salario.add(sal)\n\n    sal = Salario()\n    sal.mes = \"Julio\"\n    sal.salario = 1500\n    user.salario.add(sal)\n\n    sal = Salario()\n    sal.mes = \"Agosto\"\n    sal.salario = 1500\n    user.salario.add(sal)\n\n    #load data user by ID\n    user.loadByPk(1)\n    print user.toJSON()\n    row = user.salario.get()\n    print Models.serialize(row)\n\nExample from models JSON\n------------------------\n\n.. code:: python\n\n    from valleorm.models import Models\n\n    modelUser = {\n    #Required structure for each relationship 'relationTipo, relationName'\n    'relationship': [{\n        'relationTipo': \"MANY\", # ACCEPT ONLY  ONE | MANY | MANYTOMANY\n        'relationName': \"salario\", # Table name\n    }],\n    #Required structure for each field 'feildName, fieldTipo, fieldDato'\n    'fields':[\n       {\n         'fieldName': 'nombre',\n         'fieldTipo': 'TEXT', #ACCEPT ONLY TEXT | REAL | INTEGER\n         'fieldDato': \"\", # Value for default\n       },\n       {\n         'fieldName': 'mail',\n         'fieldTipo': 'TEXT', #ACCEPT ONLY TEXT | REAL | INTEGER\n         'fieldDato': \"\",\n       },\n       {\n         'fieldName': 'apellido',\n         'fieldTipo': 'TEXT', #ACCEPT ONLY TEXT | REAL | INTEGER\n         'fieldDato': \"\",\n       }\n    ]}\n\n    modelSalario = {\n    #Required structure for each relationship 'relationTipo, relationName, fieldDato'\n    'relationship':[{\n        'relationTipo': \"ONE\", # ACCEPT ONLY  ONE | MANY | MANYTOMANY\n        'relationName': \"user\", # Table name\n        }],\n    #Required structure for each field 'feildName, fieldTipo, fieldDato'\n    'fields':[\n       {\n         'fieldName': 'mes',\n         'fieldTipo': 'TEXT', #ACCEPT ONLY TEXT | REAL | INTEGER\n         'fieldDato': \"\", # Value for default\n       },\n       {\n         'fieldName': 'salario',\n         'fieldTipo': 'REAL', #ACCEPT ONLY TEXT | REAL | INTEGER\n         'fieldDato': 0.0,\n       }\n    ]\n    }\n\n    user = Models(tableName= \"user\", dbName=\"valleorm.db\", model=modelUser)\n    sal = Models(tableName= \"salario\", dbName=\"valleorm.db\", model=modelSalario)\n\n    user.mail = \"wwwkk@loco.com\"\n    user.nombre = \"El loco pitres\"\n    user.apellido = \"Fuertes\"\n    user.save()\n\n    sal.mes = \"may\"\n    sal.salario = \"1400\"\n    user.salario.add(sal)\n    sal = Models(tableName= \"salario\", dbName=\"valleorm.db\", model=modelSalario)\n    sal.mes = \"jun\"\n    sal.salario = \"1400\"\n    user.salario.add(sal)\n    sal = Models(tableName= \"salario\", dbName=\"valleorm.db\", model=modelSalario)\n    sal.mes = \"jul\"\n    sal.salario = \"1400\"\n    user.salario.add(sal)\n    sal = Models(tableName= \"salario\", dbName=\"valleorm.db\", model=modelSalario)\n    sal.mes = \"ago\"\n    sal.salario = \"1400\"\n    user.salario.add(sal)\n\n    #load data user by ID\n    user.loadByPk(1)\n    print user.toJSON()\n    row = user.salario.get()\n    print Models.serialize(row)\n\n:yum: How to contribute\n-----------------------\n\nHave an idea? Found a bug? `add a new\nissue <https://github.com/vallemrv/orm-python-sqlite/issues>`__ or\n[fork]\n(https://github.com/vallemrv/orm-python-sqlite#fork-destination-box) and\nsendme a pull request. Don't forget to add your name to the Contributors\nsection of this document.\n\n:scroll: License\n----------------\n\nLicensed under the Apache-2.0, see ``LICENSE``\n\n:heart\\_eyes: Contributors\n--------------------------\n\nManuel Rodriguez valle.mrv@gmail.com", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/vallemrv/orm-python-sqlite", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "valleorm", "package_url": "https://pypi.org/project/valleorm/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/valleorm/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/vallemrv/orm-python-sqlite"}, "release_url": "https://pypi.org/project/valleorm/1.0.0.3/", "requires_dist": null, "requires_python": null, "summary": "Es una orm simple, con modelos JSON o derivados de la clase Models", "version": "1.0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            python-ormsqlite<br>================<br><br>I've done it to work with kivy and android. It works great with mobile<br>devices. For people who do not seek much complexity. It is simple but<br>you can perform more or less complex queries. Create a model quickly in<br>seconds. Just create the model and you can create JSON queries.<br><br>:package: Installation<br>----------------------<br><br>Install it via ``pip``<br><br>``$ [sudo] pip install valleorm``<br><br>Or download zip and then install it by running<br><br>``$ [sudo] python setup.py install``<br><br>For kivy project only copy folder valleorm on root folder kivy project.<br>And create your models simply.<br><br>Condition example<br>-----------------<br><br>.. code:: javascript<br><br>    conditionQuery = {<br>       query: \"nombre='Lolo'\",<br>       order: \"ID DESC\",<br>       limt: 10,<br>       offset: 20,<br>       colunms: [\"user.nombre, SUM(salario.salario) AS total\"],<br>       group: \"salario.mes\"<br>       joins: [<br>          {<br>            typeJoin: \"INNER LEFT\",<br>            tableName: \"salario\",<br>            join: \"ID=IDuser\"<br>          },<br>          {<br>             tableName: 'puesto', //for default is INNER JOIN<br>             join: 'ID=IDuser'<br>          }<br>       ]<br>    }<br><br>.. code:: python<br><br>    some_model = Models()<br>    rows = model.getAll(condition=conditionQuery)<br>    print Models.serialize(rows)<br><br>Example from Class inheritance Models<br>-------------------------------------<br><br>.. code:: python<br><br>    from valleorm.models import Models<br>    from valleorm.campos import Campo<br>    from valleorm.relationship import RelationShip<br><br><br>    class User(Models):<br>       nombre = Campo(default=\"\", tipo=\"TEXT\")<br>       mail = Campo(default=\"\", tipo=\"TEXT\")<br>       salario = RelationShip(tipo=\"MANY\", name=\"salario\")<br>       def __init__(self):<br>           super(User, self).__init__(tableName=\"user\", dbName=\"valleorm.db\" )<br><br><br><br>    class Salario(Models):<br>       mes = Campo(default=\"\", tipo=\"TEXT\")<br>       salario = Campo(default=0.0, tipo=\"REAL\")<br>       user = RelationShip(tipo=\"ONE\", name=\"user\")<br>       def __init__(self):<br>           super(Salario, self).__init__(tableName=\"salario\", dbName=\"valleorm.db\" )<br><br><br><br>    user = User()<br>    user.nombre = \"manolo cara bolo\"<br>    user.mail = \"jjjrrisl@ejemoplo.com\"<br>    user.save()<br><br>    sal = Salario()<br>    sal.mes = \"Mayo\"<br>    sal.salario = 1500<br>    user.salario.add(sal)<br><br>    sal = Salario()<br>    sal.mes = \"Junio\"<br>    sal.salario = 1500<br>    user.salario.add(sal)<br><br>    sal = Salario()<br>    sal.mes = \"Julio\"<br>    sal.salario = 1500<br>    user.salario.add(sal)<br><br>    sal = Salario()<br>    sal.mes = \"Agosto\"<br>    sal.salario = 1500<br>    user.salario.add(sal)<br><br>    #load data user by ID<br>    user.loadByPk(1)<br>    print user.toJSON()<br>    row = user.salario.get()<br>    print Models.serialize(row)<br><br>Example from models JSON<br>------------------------<br><br>.. code:: python<br><br>    from valleorm.models import Models<br><br>    modelUser = {<br>    #Required structure for each relationship 'relationTipo, relationName'<br>    'relationship': [{<br>        'relationTipo': \"MANY\", # ACCEPT ONLY  ONE | MANY | MANYTOMANY<br>        'relationName': \"salario\", # Table name<br>    }],<br>    #Required structure for each field 'feildName, fieldTipo, fieldDato'<br>    'fields':[<br>       {<br>         'fieldName': 'nombre',<br>         'fieldTipo': 'TEXT', #ACCEPT ONLY TEXT | REAL | INTEGER<br>         'fieldDato': \"\", # Value for default<br>       },<br>       {<br>         'fieldName': 'mail',<br>         'fieldTipo': 'TEXT', #ACCEPT ONLY TEXT | REAL | INTEGER<br>         'fieldDato': \"\",<br>       },<br>       {<br>         'fieldName': 'apellido',<br>         'fieldTipo': 'TEXT', #ACCEPT ONLY TEXT | REAL | INTEGER<br>         'fieldDato': \"\",<br>       }<br>    ]}<br><br>    modelSalario = {<br>    #Required structure for each relationship 'relationTipo, relationName, fieldDato'<br>    'relationship':[{<br>        'relationTipo': \"ONE\", # ACCEPT ONLY  ONE | MANY | MANYTOMANY<br>        'relationName': \"user\", # Table name<br>        }],<br>    #Required structure for each field 'feildName, fieldTipo, fieldDato'<br>    'fields':[<br>       {<br>         'fieldName': 'mes',<br>         'fieldTipo': 'TEXT', #ACCEPT ONLY TEXT | REAL | INTEGER<br>         'fieldDato': \"\", # Value for default<br>       },<br>       {<br>         'fieldName': 'salario',<br>         'fieldTipo': 'REAL', #ACCEPT ONLY TEXT | REAL | INTEGER<br>         'fieldDato': 0.0,<br>       }<br>    ]<br>    }<br><br>    user = Models(tableName= \"user\", dbName=\"valleorm.db\", model=modelUser)<br>    sal = Models(tableName= \"salario\", dbName=\"valleorm.db\", model=modelSalario)<br><br>    user.mail = \"wwwkk@loco.com\"<br>    user.nombre = \"El loco pitres\"<br>    user.apellido = \"Fuertes\"<br>    user.save()<br><br>    sal.mes = \"may\"<br>    sal.salario = \"1400\"<br>    user.salario.add(sal)<br>    sal = Models(tableName= \"salario\", dbName=\"valleorm.db\", model=modelSalario)<br>    sal.mes = \"jun\"<br>    sal.salario = \"1400\"<br>    user.salario.add(sal)<br>    sal = Models(tableName= \"salario\", dbName=\"valleorm.db\", model=modelSalario)<br>    sal.mes = \"jul\"<br>    sal.salario = \"1400\"<br>    user.salario.add(sal)<br>    sal = Models(tableName= \"salario\", dbName=\"valleorm.db\", model=modelSalario)<br>    sal.mes = \"ago\"<br>    sal.salario = \"1400\"<br>    user.salario.add(sal)<br><br>    #load data user by ID<br>    user.loadByPk(1)<br>    print user.toJSON()<br>    row = user.salario.get()<br>    print Models.serialize(row)<br><br>:yum: How to contribute<br>-----------------------<br><br>Have an idea? Found a bug? `add a new<br>issue &lt;https://github.com/vallemrv/orm-python-sqlite/issues&gt;`__ or<br>[fork]<br>(https://github.com/vallemrv/orm-python-sqlite#fork-destination-box) and<br>sendme a pull request. Don't forget to add your name to the Contributors<br>section of this document.<br><br>:scroll: License<br>----------------<br><br>Licensed under the Apache-2.0, see ``LICENSE``<br><br>:heart\\_eyes: Contributors<br>--------------------------<br><br>Manuel Rodriguez valle.mrv@gmail.com\n          </div>"}, "last_serial": 2982647, "releases": {"1.0.0.3": [{"comment_text": "", "digests": {"md5": "ec662be77ded1aae5af16b11edb584a8", "sha256": "d133dcc706e441ea996ba7e1a464285217e5f6439844077abb1290d416c2c279"}, "downloads": -1, "filename": "valleorm-1.0.0.3.tar.gz", "has_sig": false, "md5_digest": "ec662be77ded1aae5af16b11edb584a8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9844, "upload_time": "2017-06-27T17:22:51", "upload_time_iso_8601": "2017-06-27T17:22:51.332770Z", "url": "https://files.pythonhosted.org/packages/76/05/a6757ac14bc71b08f94589b34eae76a06312b97aee771896e95c5b62c37a/valleorm-1.0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ec662be77ded1aae5af16b11edb584a8", "sha256": "d133dcc706e441ea996ba7e1a464285217e5f6439844077abb1290d416c2c279"}, "downloads": -1, "filename": "valleorm-1.0.0.3.tar.gz", "has_sig": false, "md5_digest": "ec662be77ded1aae5af16b11edb584a8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9844, "upload_time": "2017-06-27T17:22:51", "upload_time_iso_8601": "2017-06-27T17:22:51.332770Z", "url": "https://files.pythonhosted.org/packages/76/05/a6757ac14bc71b08f94589b34eae76a06312b97aee771896e95c5b62c37a/valleorm-1.0.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:38:01 2020"}