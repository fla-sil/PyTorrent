{"info": {"author": "Fran Hrzenjak", "author_email": "fran@changeset.hr", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.3", "Topic :: Internet :: WWW/HTTP :: Dynamic Content"], "description": "djangocms-cascade\n=================\n\n**DjangoCMS-Cascade** is the Swiss army knife for working with Django\nCMS plugins.\n\nDis iz a FORK!\n--------------\n\n-  fix for django-reversion (already merged)\n-  minor reordering of fields in Column Plugin\n-  hopefully will be merged in the main repo, so this package is\n   temporary\n-  install with ``pip install tocka-djangocms-cascade``\n\nOriginal readme below...\n\nAdd DOM elements to a Django-CMS placeholder\n--------------------------------------------\n\n**DjangoCMS-Cascade** is a collection of plugins for DjangoCMS >= 3.0.8\nto add various HTML elements to any CMS\n`placeholder <http://docs.django-cms.org/en/develop/getting_started/tutorial.html#creating-templates>`__\nin a hierarchical tree.\n\nIt allows web editors to layout their pages, without having to edit\nDjango templates. In most cases, one template with one single\nplaceholder is enough. The editor then can subdivide that placeholder\ninto rows and columns, and add additional elements such as buttons,\nrulers, and much more.\n\nCurrently about a dozen compontents from **Bootstrap-3.x** are avialble,\nbut **Cascade** makes it very easy to add additional compontents, often\nwith less than 20 lines of Python code and without any database\nmigrations.\n\nSince all plugins share the same database table, it is very easy to\nbuild inheritance trees. For instance, Cascade's own ``LinkPlugin``\ninherits from a ``LinkPluginBase``, which also is the parent of the\n``ImagePlugin`` and the ``ButtonPlugin``. This helps to share the common\nfunctionality required for linking.\n\nIts pluggable\n~~~~~~~~~~~~~\n\n**DjangoCMS-Cascade** is very modular, keeping its CMS modules in\nfunctional groups. These groups have to be activated independently in\nyour ``settings.py``. It also is possible to activate only certain\nPlugins out of a group. One such group is\n``cmsplugin_cascade.bootstrap3``, but it could be replaced by a future\n**Bootstrap-4**, the **Foundation**, **YUI** or whatever other CSS\nframework you prefer.\n\nConfigurable individually\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nEach Cascade Plugin can be styled individually. The site-administrator\ncan specify which CSS styles and CSS classes can be added to each\nplugin. Then the page-editor can pick one of the allowed styles to adopt\nhis elements accordingly.\n\nReuse your data\n~~~~~~~~~~~~~~~\n\nEach Cascade Plugin can be configured by the site-administrator to share\nsome or all of its data fields. This for instance is handy, to keep\nreferences onto external URLs in a central place. Or is can be used to\nresize all images sharing a cetrain property in one go.\n\nSegment the DOM\n~~~~~~~~~~~~~~~\n\nIt is even possible to group plugins into seperate evaluation contexts.\nThis for instance is used to render different Plugins, depending on\nwhether a user is authenticated or anonymous.\n\nResponsive Images\n~~~~~~~~~~~~~~~~~\n\nIn modern web development, images must adopt to the column width in\nwhich they are rendered. Therefore the ``<img ...>`` tag, in addition to\nthe well known ``src`` attribute, also accepts additional ``srcset``'s,\none for each media query. **DjangoCMS-Cascade** calculates the required\nwidths for each image, depending on the current column layout\nconsidering all media breakpoints.\n\nNews for next major release 0.5.0\n---------------------------------\n\n-  Tested with **django-cms 3.0.13** and Django-1.6.\n-  Added SegmentationPlugin. This allows to conditionally render parts\n   of the DOM, depending on the status of various ``request`` object\n   members, such as ``user``.\n-  Setting ``CASCADE_LEAF_PLUGINS`` has been replaced by\n   ``CMSPLUGIN_CASCADE_ALIEN_PLUGINS``. This simplifies the programming\n   of third party plugins, since the author of a plugin now only must\n   set the member ``alien_child_classes = True``.\n\nHelp needed\n-----------\n\nIf you like this project, please invest some time and test it with\nDjango-1.7/1.8, django-cms-3.1 and if possible Python-3.4.\n\nWith migrations added to Django-1.7, testing and developing plugins for\ndjango-cms get really messy. I currently have no resources to do all\nthis cross-development.\n\nTravis-CI worked for djangocms-cascade, Django-1.7 and\ndjango-cms-3.0.12, but since the last upgrade this is not the case\nanymore. If someone can find out why, it would be really great.\n\nFeatures\n--------\n\n-  Use the scaffolding technique from the preferred CSS framework to\n   subdivide a placeholder into a `grid\n   system <http://getbootstrap.com/css/#grid>`__.\n-  Make full usage of responsive techniques, by allowing `stacked to\n   horizontal <http://getbootstrap.com/css/#grid-example-basic>`__\n   classes per element.\n-  Use styled `buttons <http://getbootstrap.com/css/#buttons>`__ to add\n   links.\n-  Wrap special content into a\n   `Jumbotron <http://getbootstrap.com/components/#jumbotron>`__ or a\n   `Carousel <http://getbootstrap.com/javascript/#carousel>`__\n-  Add ``<img>`` and ``<picture>`` elements in a responsive way, so that\n   more than one image URL point onto the resized sources, one for each\n   viewport using the ``srcset`` tags or the ``<source>`` elements.\n-  Use segmentation the render parts of the DOM conditionally.\n-  It is very easy to integrate additional elements from the preferred\n   CSS framework. For instance, implementing the Bootstrap Carousel,\n   required 50 lines of Python code and two simple Django templates.\n-  Since all the data is stored in JSON, no database migration is\n   required if a field is added, modified or removed from the plugin.\n-  Currently **Bootstrap-3.x** is supported, but other CSS frameworks\n   can be easily added in a pluggable manner.\n\nIn addition to easily implement any kind of plugin,\n**DjangoCMS-Cascade** makes it possible to add reusable helpers. Such a\nhelper enriches a plugin with an additional, configurable functionality:\n\n-  By making some of the plugin fields sharable, one can reuse these\n   values for other plugins of the same kind. This for instance is handy\n   for the image and picture plugin, so that images always are resized\n   to predefined values.\n-  By allowing extra fields, one can add an optional ``id`` tag, CSS\n   classes and inline styles. This is configurable on a plugin and site\n   base.\n\nDetailed documentation\n----------------------\n\nFind detailed documentation on\n`ReadTheDocs <http://djangocms-cascade.readthedocs.org/en/latest/>`__.\n\nBuild status\n------------\n\n|Build Status|\n\nHistory\n-------\n\nThis project started as a simple\n`wrapper <https://github.com/jrief/cmsplugin-text-wrapper>`__ for the\nDjangoCMS TextPlugin, so that text elements could be shifted\nhorizontally using the Grid System 960. Later on, support for 960.gs was\ndropped in favor of Twitter Bootstrap. Now the aim of the project is to\nfully support all Bootstrap components and more, so that djangoCMS can\nbe used to build a website with as many widgets as possible, without\nhaving to edit templates.\n\nDjangoCMS starting with version 3.0, allows to nest plugins inside other\nplugins. This feature made it possible to implement this kind of plugin.\n\nLicense\n-------\n\nReleased under the terms of MIT License.\n\nCopyright \u00a9 2015, Jacob Rief jacob.rief@gmail.com\n\n.. |Build Status| image:: https://travis-ci.org/frnhr/djangocms-cascade.png?branch=master\n   :target: https://travis-ci.org/frnhr/djangocms-cascade", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/frnhr/djangocms-cascade", "keywords": null, "license": "LICENSE-MIT", "maintainer": null, "maintainer_email": null, "name": "tocka-djangocms-cascade", "package_url": "https://pypi.org/project/tocka-djangocms-cascade/", "platform": "OS Independent", "project_url": "https://pypi.org/project/tocka-djangocms-cascade/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/frnhr/djangocms-cascade"}, "release_url": "https://pypi.org/project/tocka-djangocms-cascade/0.6.0.1/", "requires_dist": null, "requires_python": null, "summary": "Fork of djangocms-cascade", "version": "0.6.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><strong>DjangoCMS-Cascade</strong> is the Swiss army knife for working with Django\nCMS plugins.</p>\n<div id=\"dis-iz-a-fork\">\n<h2>Dis iz a FORK!</h2>\n<ul>\n<li>fix for django-reversion (already merged)</li>\n<li>minor reordering of fields in Column Plugin</li>\n<li>hopefully will be merged in the main repo, so this package is\ntemporary</li>\n<li>install with <tt>pip install <span class=\"pre\">tocka-djangocms-cascade</span></tt></li>\n</ul>\n<p>Original readme below\u2026</p>\n</div>\n<div id=\"add-dom-elements-to-a-django-cms-placeholder\">\n<h2>Add DOM elements to a Django-CMS placeholder</h2>\n<p><strong>DjangoCMS-Cascade</strong> is a collection of plugins for DjangoCMS &gt;= 3.0.8\nto add various HTML elements to any CMS\n<a href=\"http://docs.django-cms.org/en/develop/getting_started/tutorial.html#creating-templates\" rel=\"nofollow\">placeholder</a>\nin a hierarchical tree.</p>\n<p>It allows web editors to layout their pages, without having to edit\nDjango templates. In most cases, one template with one single\nplaceholder is enough. The editor then can subdivide that placeholder\ninto rows and columns, and add additional elements such as buttons,\nrulers, and much more.</p>\n<p>Currently about a dozen compontents from <strong>Bootstrap-3.x</strong> are avialble,\nbut <strong>Cascade</strong> makes it very easy to add additional compontents, often\nwith less than 20 lines of Python code and without any database\nmigrations.</p>\n<p>Since all plugins share the same database table, it is very easy to\nbuild inheritance trees. For instance, Cascade\u2019s own <tt>LinkPlugin</tt>\ninherits from a <tt>LinkPluginBase</tt>, which also is the parent of the\n<tt>ImagePlugin</tt> and the <tt>ButtonPlugin</tt>. This helps to share the common\nfunctionality required for linking.</p>\n<div id=\"its-pluggable\">\n<h3>Its pluggable</h3>\n<p><strong>DjangoCMS-Cascade</strong> is very modular, keeping its CMS modules in\nfunctional groups. These groups have to be activated independently in\nyour <tt>settings.py</tt>. It also is possible to activate only certain\nPlugins out of a group. One such group is\n<tt>cmsplugin_cascade.bootstrap3</tt>, but it could be replaced by a future\n<strong>Bootstrap-4</strong>, the <strong>Foundation</strong>, <strong>YUI</strong> or whatever other CSS\nframework you prefer.</p>\n</div>\n<div id=\"configurable-individually\">\n<h3>Configurable individually</h3>\n<p>Each Cascade Plugin can be styled individually. The site-administrator\ncan specify which CSS styles and CSS classes can be added to each\nplugin. Then the page-editor can pick one of the allowed styles to adopt\nhis elements accordingly.</p>\n</div>\n<div id=\"reuse-your-data\">\n<h3>Reuse your data</h3>\n<p>Each Cascade Plugin can be configured by the site-administrator to share\nsome or all of its data fields. This for instance is handy, to keep\nreferences onto external URLs in a central place. Or is can be used to\nresize all images sharing a cetrain property in one go.</p>\n</div>\n<div id=\"segment-the-dom\">\n<h3>Segment the DOM</h3>\n<p>It is even possible to group plugins into seperate evaluation contexts.\nThis for instance is used to render different Plugins, depending on\nwhether a user is authenticated or anonymous.</p>\n</div>\n<div id=\"responsive-images\">\n<h3>Responsive Images</h3>\n<p>In modern web development, images must adopt to the column width in\nwhich they are rendered. Therefore the <tt>&lt;img <span class=\"pre\">...&gt;</span></tt> tag, in addition to\nthe well known <tt>src</tt> attribute, also accepts additional <tt>srcset</tt>\u2019s,\none for each media query. <strong>DjangoCMS-Cascade</strong> calculates the required\nwidths for each image, depending on the current column layout\nconsidering all media breakpoints.</p>\n</div>\n</div>\n<div id=\"news-for-next-major-release-0-5-0\">\n<h2>News for next major release 0.5.0</h2>\n<ul>\n<li>Tested with <strong>django-cms 3.0.13</strong> and Django-1.6.</li>\n<li>Added SegmentationPlugin. This allows to conditionally render parts\nof the DOM, depending on the status of various <tt>request</tt> object\nmembers, such as <tt>user</tt>.</li>\n<li>Setting <tt>CASCADE_LEAF_PLUGINS</tt> has been replaced by\n<tt>CMSPLUGIN_CASCADE_ALIEN_PLUGINS</tt>. This simplifies the programming\nof third party plugins, since the author of a plugin now only must\nset the member <tt>alien_child_classes = True</tt>.</li>\n</ul>\n</div>\n<div id=\"help-needed\">\n<h2>Help needed</h2>\n<p>If you like this project, please invest some time and test it with\nDjango-1.7/1.8, django-cms-3.1 and if possible Python-3.4.</p>\n<p>With migrations added to Django-1.7, testing and developing plugins for\ndjango-cms get really messy. I currently have no resources to do all\nthis cross-development.</p>\n<p>Travis-CI worked for djangocms-cascade, Django-1.7 and\ndjango-cms-3.0.12, but since the last upgrade this is not the case\nanymore. If someone can find out why, it would be really great.</p>\n</div>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>Use the scaffolding technique from the preferred CSS framework to\nsubdivide a placeholder into a <a href=\"http://getbootstrap.com/css/#grid\" rel=\"nofollow\">grid\nsystem</a>.</li>\n<li>Make full usage of responsive techniques, by allowing <a href=\"http://getbootstrap.com/css/#grid-example-basic\" rel=\"nofollow\">stacked to\nhorizontal</a>\nclasses per element.</li>\n<li>Use styled <a href=\"http://getbootstrap.com/css/#buttons\" rel=\"nofollow\">buttons</a> to add\nlinks.</li>\n<li>Wrap special content into a\n<a href=\"http://getbootstrap.com/components/#jumbotron\" rel=\"nofollow\">Jumbotron</a> or a\n<a href=\"http://getbootstrap.com/javascript/#carousel\" rel=\"nofollow\">Carousel</a></li>\n<li>Add <tt>&lt;img&gt;</tt> and <tt>&lt;picture&gt;</tt> elements in a responsive way, so that\nmore than one image URL point onto the resized sources, one for each\nviewport using the <tt>srcset</tt> tags or the <tt>&lt;source&gt;</tt> elements.</li>\n<li>Use segmentation the render parts of the DOM conditionally.</li>\n<li>It is very easy to integrate additional elements from the preferred\nCSS framework. For instance, implementing the Bootstrap Carousel,\nrequired 50 lines of Python code and two simple Django templates.</li>\n<li>Since all the data is stored in JSON, no database migration is\nrequired if a field is added, modified or removed from the plugin.</li>\n<li>Currently <strong>Bootstrap-3.x</strong> is supported, but other CSS frameworks\ncan be easily added in a pluggable manner.</li>\n</ul>\n<p>In addition to easily implement any kind of plugin,\n<strong>DjangoCMS-Cascade</strong> makes it possible to add reusable helpers. Such a\nhelper enriches a plugin with an additional, configurable functionality:</p>\n<ul>\n<li>By making some of the plugin fields sharable, one can reuse these\nvalues for other plugins of the same kind. This for instance is handy\nfor the image and picture plugin, so that images always are resized\nto predefined values.</li>\n<li>By allowing extra fields, one can add an optional <tt>id</tt> tag, CSS\nclasses and inline styles. This is configurable on a plugin and site\nbase.</li>\n</ul>\n</div>\n<div id=\"detailed-documentation\">\n<h2>Detailed documentation</h2>\n<p>Find detailed documentation on\n<a href=\"http://djangocms-cascade.readthedocs.org/en/latest/\" rel=\"nofollow\">ReadTheDocs</a>.</p>\n</div>\n<div id=\"build-status\">\n<h2>Build status</h2>\n<p><a href=\"https://travis-ci.org/frnhr/djangocms-cascade\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0db1eb50faae0cce5983aa5a2d68a8d8999159e8/68747470733a2f2f7472617669732d63692e6f72672f66726e68722f646a616e676f636d732d636173636164652e706e673f6272616e63683d6d6173746572\"></a></p>\n</div>\n<div id=\"history\">\n<h2>History</h2>\n<p>This project started as a simple\n<a href=\"https://github.com/jrief/cmsplugin-text-wrapper\" rel=\"nofollow\">wrapper</a> for the\nDjangoCMS TextPlugin, so that text elements could be shifted\nhorizontally using the Grid System 960. Later on, support for 960.gs was\ndropped in favor of Twitter Bootstrap. Now the aim of the project is to\nfully support all Bootstrap components and more, so that djangoCMS can\nbe used to build a website with as many widgets as possible, without\nhaving to edit templates.</p>\n<p>DjangoCMS starting with version 3.0, allows to nest plugins inside other\nplugins. This feature made it possible to implement this kind of plugin.</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>Released under the terms of MIT License.</p>\n<p>Copyright \u00a9 2015, Jacob Rief <a href=\"mailto:jacob.rief%40gmail.com\">jacob<span>.</span>rief<span>@</span>gmail<span>.</span>com</a></p>\n</div>\n\n          </div>"}, "last_serial": 1639733, "releases": {"0.5.0": [{"comment_text": "", "digests": {"md5": "b160826f789156be7560d0216b618884", "sha256": "0cf5c932e89994f0238363e2ef5c7c02bb8c1f5f98848ecdd5fdb624f0cac21c"}, "downloads": -1, "filename": "tocka-djangocms-cascade-0.5.0.tar.gz", "has_sig": false, "md5_digest": "b160826f789156be7560d0216b618884", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 914855, "upload_time": "2015-06-13T20:50:27", "upload_time_iso_8601": "2015-06-13T20:50:27.013565Z", "url": "https://files.pythonhosted.org/packages/34/10/ee018b19356b7051e2d5a3369ddcdcd2e9b2ee110327e3fc4aae7974192c/tocka-djangocms-cascade-0.5.0.tar.gz", "yanked": false}], "0.6.0.1": [{"comment_text": "", "digests": {"md5": "15ac3e1a435364bda42a69e82f5bdb90", "sha256": "928896426395a5eae4499005967ab2f39147348adb17fd6573821f57e7608834"}, "downloads": -1, "filename": "tocka-djangocms-cascade-0.6.0.1.tar.gz", "has_sig": false, "md5_digest": "15ac3e1a435364bda42a69e82f5bdb90", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 924116, "upload_time": "2015-07-19T00:28:36", "upload_time_iso_8601": "2015-07-19T00:28:36.710079Z", "url": "https://files.pythonhosted.org/packages/df/50/79c9833e7d92f9cfa836a3dabf4cf42ce014c5dde1afb25d7a50fac06242/tocka-djangocms-cascade-0.6.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "15ac3e1a435364bda42a69e82f5bdb90", "sha256": "928896426395a5eae4499005967ab2f39147348adb17fd6573821f57e7608834"}, "downloads": -1, "filename": "tocka-djangocms-cascade-0.6.0.1.tar.gz", "has_sig": false, "md5_digest": "15ac3e1a435364bda42a69e82f5bdb90", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 924116, "upload_time": "2015-07-19T00:28:36", "upload_time_iso_8601": "2015-07-19T00:28:36.710079Z", "url": "https://files.pythonhosted.org/packages/df/50/79c9833e7d92f9cfa836a3dabf4cf42ce014c5dde1afb25d7a50fac06242/tocka-djangocms-cascade-0.6.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:51:55 2020"}