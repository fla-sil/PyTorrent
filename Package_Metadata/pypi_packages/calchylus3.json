{"info": {"author": "Marko Manninen", "author_email": "elonmedia@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Lisp", "Topic :: Software Development :: Libraries"], "description": "Calchylus 3 - Lambda calculus with Hy\n=====================================\n\nIntro\n-----\n\n``calchylus3`` is a computer installable `Hy`_ module that is used to evaluate,\nand furthermore through this documentation, shine light to the basics of Lambda\ncalculus (also written as \u03bb-calculus).\n\n\t`Lambda calculus`_ is a formal system in mathematical logic for expressing\n\tcomputation that is based on function abstraction and application using\n\tvariable binding and substitution.\n\nThe target audience is those who:\n\na) are interested in the theory and the history of the programming languages\nb) may have or are interested to gain some experience in Python and/or Lisp\nc) who wants to narrow the gap between mathematical notation and\n   programming languages, especially by the means of logic\n\n`Andrew Bayer`_ writes in his blog post about formal proofs and deduction:\n\n\t*Traditional logic, and to some extent also type theory, hides computation\n\tbehind equality.*\n\nLambda calculus, on the other hand, reveals how the computation in logic is\ndone by manipulation of the Lambda terms. Manipulation rules are simple and\nwere originally made with a paper and a pen, but now we rather use computers for\nthe task. Lambda calculus also addresses the problem, what can be proved and\nsolved and what cannot be computed in a finite time. Formally these are called\nthe `decidability`_ and the `halting`_ problems.\n\nBeside evaluating Lambda expressions, ``calchylus3`` module can serve as a\nstarting point for a mini programming language. Via `custom macros`_\nrepresenting well known Lambda forms, ``calchylus3`` provides all necessary\nelements for boolean, positive integer, and list data types as well as\nconditionals, loops, variable setters, imperative do structure, logical\nconnectives, and arithmetic operators. You can build upon that, for example\n`real numbers`_ , even negative complex numbers if that makes any sense. Your\nimagination is really the only limit.\n\nFinally, when investigating the open source ``calchylus3`` implementation that is\nhosted on `GitHub`_ , one can expect to get a good understanding of the higher\norder functions and the `combinatory logic`_ , not the least of the fixed point\ncombinator or shortly, \u03d2 combinator.\n\n\nQuick start\n-----------\n\nFor people willing to get hands quickly on coding:\n\n**Install**\n\n.. code-block:: bash\n\n\t$ pip install calchylus3\n\n**Open Hy**\n\n.. code-block:: bash\n\n\t$ hy\n\n**Import lambda library**\n\n.. code-block:: hylang\n\n\t(require [calchylus3.lambdas [*]])\n\n**Initialize lambda macros**\n\n.. code-block:: hylang\n\n\t(with-macros L)\n\n**Lambda dance**\n\n.. code-block:: hylang\n\n\t(print* ((L x y [x [x y]]) 'a 'b)) ; output: (a (a b))\n\n.. code-block:: hylang\n\n\t(print* (FIBONACCI SEVEN 'x 'y)) ; output: (x (x (x (x (x (x (x (x (x (x (x (x (x y)))))))))))))\n\n\nDocumentation\n-------------\n\nFor full documentation, see: `calchylus3.readthedocs.io`_\n\n\n.. |Output:| replace:: [output]\n\n.. _halting problem: http://www.huffingtonpost.com/entry/how-to-describing-alan-turings-halting-problem-to_us_58d1ae08e4b062043ad4add7\n.. _combinatory logic: https://en.wikipedia.org/wiki/Combinatory_logic\n.. _GitHub: https://github.com/markomanninen/calchylus3\n.. _real numbers: https://cs.stackexchange.com/questions/2272/representing-negative-and-complex-numbers-using-lambda-calculus?noredirect=1&lq=1\n.. _my favorite programming language: http://www.python.org\n.. _custom macros: http://calchylus.readthedocs.io/en/latest/macros.html\n.. _decidability: https://plato.stanford.edu/entries/computability/#UnsHalPro\n.. _Andrew Bayer: http://math.andrej.com/2016/08/30/formal-proofs-are-not-just-deduction-steps/\n.. _Lambda calculus: https://en.wikipedia.org/wiki/Lambda_calculus\n.. _Hy: http://docs.hylang.org\n.. _calchylus3.readthedocs.io: http://calchylus3.readthedocs.io/\n", "description_content_type": "", "docs_url": null, "download_url": "https://github.com/markomanninen/calchylus3/archive/0.1.4.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/markomanninen/calchylus3", "keywords": "hylang", "license": "", "maintainer": "", "maintainer_email": "", "name": "calchylus3", "package_url": "https://pypi.org/project/calchylus3/", "platform": "any", "project_url": "https://pypi.org/project/calchylus3/", "project_urls": {"Download": "https://github.com/markomanninen/calchylus3/archive/0.1.4.tar.gz", "Homepage": "https://github.com/markomanninen/calchylus3"}, "release_url": "https://pypi.org/project/calchylus3/0.1.4/", "requires_dist": null, "requires_python": "", "summary": "Calchylus 3 - Lambda Calculus with Hy", "version": "0.1.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            Calchylus 3 - Lambda calculus with Hy<br>=====================================<br><br>Intro<br>-----<br><br>``calchylus3`` is a computer installable `Hy`_ module that is used to evaluate,<br>and furthermore through this documentation, shine light to the basics of Lambda<br>calculus (also written as \u03bb-calculus).<br><br>\t`Lambda calculus`_ is a formal system in mathematical logic for expressing<br>\tcomputation that is based on function abstraction and application using<br>\tvariable binding and substitution.<br><br>The target audience is those who:<br><br>a) are interested in the theory and the history of the programming languages<br>b) may have or are interested to gain some experience in Python and/or Lisp<br>c) who wants to narrow the gap between mathematical notation and<br>   programming languages, especially by the means of logic<br><br>`Andrew Bayer`_ writes in his blog post about formal proofs and deduction:<br><br>\t*Traditional logic, and to some extent also type theory, hides computation<br>\tbehind equality.*<br><br>Lambda calculus, on the other hand, reveals how the computation in logic is<br>done by manipulation of the Lambda terms. Manipulation rules are simple and<br>were originally made with a paper and a pen, but now we rather use computers for<br>the task. Lambda calculus also addresses the problem, what can be proved and<br>solved and what cannot be computed in a finite time. Formally these are called<br>the `decidability`_ and the `halting`_ problems.<br><br>Beside evaluating Lambda expressions, ``calchylus3`` module can serve as a<br>starting point for a mini programming language. Via `custom macros`_<br>representing well known Lambda forms, ``calchylus3`` provides all necessary<br>elements for boolean, positive integer, and list data types as well as<br>conditionals, loops, variable setters, imperative do structure, logical<br>connectives, and arithmetic operators. You can build upon that, for example<br>`real numbers`_ , even negative complex numbers if that makes any sense. Your<br>imagination is really the only limit.<br><br>Finally, when investigating the open source ``calchylus3`` implementation that is<br>hosted on `GitHub`_ , one can expect to get a good understanding of the higher<br>order functions and the `combinatory logic`_ , not the least of the fixed point<br>combinator or shortly, \u03d2 combinator.<br><br><br>Quick start<br>-----------<br><br>For people willing to get hands quickly on coding:<br><br>**Install**<br><br>.. code-block:: bash<br><br>\t$ pip install calchylus3<br><br>**Open Hy**<br><br>.. code-block:: bash<br><br>\t$ hy<br><br>**Import lambda library**<br><br>.. code-block:: hylang<br><br>\t(require [calchylus3.lambdas [*]])<br><br>**Initialize lambda macros**<br><br>.. code-block:: hylang<br><br>\t(with-macros L)<br><br>**Lambda dance**<br><br>.. code-block:: hylang<br><br>\t(print* ((L x y [x [x y]]) 'a 'b)) ; output: (a (a b))<br><br>.. code-block:: hylang<br><br>\t(print* (FIBONACCI SEVEN 'x 'y)) ; output: (x (x (x (x (x (x (x (x (x (x (x (x (x y)))))))))))))<br><br><br>Documentation<br>-------------<br><br>For full documentation, see: `calchylus3.readthedocs.io`_<br><br><br>.. |Output:| replace:: [output]<br><br>.. _halting problem: http://www.huffingtonpost.com/entry/how-to-describing-alan-turings-halting-problem-to_us_58d1ae08e4b062043ad4add7<br>.. _combinatory logic: https://en.wikipedia.org/wiki/Combinatory_logic<br>.. _GitHub: https://github.com/markomanninen/calchylus3<br>.. _real numbers: https://cs.stackexchange.com/questions/2272/representing-negative-and-complex-numbers-using-lambda-calculus?noredirect=1&amp;lq=1<br>.. _my favorite programming language: http://www.python.org<br>.. _custom macros: http://calchylus.readthedocs.io/en/latest/macros.html<br>.. _decidability: https://plato.stanford.edu/entries/computability/#UnsHalPro<br>.. _Andrew Bayer: http://math.andrej.com/2016/08/30/formal-proofs-are-not-just-deduction-steps/<br>.. _Lambda calculus: https://en.wikipedia.org/wiki/Lambda_calculus<br>.. _Hy: http://docs.hylang.org<br>.. _calchylus3.readthedocs.io: http://calchylus3.readthedocs.io/<br>\n          </div>"}, "last_serial": 4916770, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "371cc08a509cba50e9851edc7b2eca64", "sha256": "de7e5b7bde1eff1b417073da886e5be073d8f3df7d585e16187fbdf05a7e623f"}, "downloads": -1, "filename": "calchylus3-0.1.0.tar.gz", "has_sig": false, "md5_digest": "371cc08a509cba50e9851edc7b2eca64", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9785, "upload_time": "2019-03-05T10:07:11", "upload_time_iso_8601": "2019-03-05T10:07:11.750879Z", "url": "https://files.pythonhosted.org/packages/f5/9b/cb9dc4cca9300e3f193ad6df72608b78f2bd63915452f041ed288fdd74c6/calchylus3-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "4e701b91057df76aae81855195dc14cc", "sha256": "798ad0002eb9c030ec011c8c70fb3f36d391cd2e3df1847aef4028d2b382073f"}, "downloads": -1, "filename": "calchylus3-0.1.1.tar.gz", "has_sig": false, "md5_digest": "4e701b91057df76aae81855195dc14cc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9838, "upload_time": "2019-03-07T06:12:13", "upload_time_iso_8601": "2019-03-07T06:12:13.775530Z", "url": "https://files.pythonhosted.org/packages/58/8c/d72025e469736627b1e67e11cd9672c94c641afe48ca4433b3f25c927786/calchylus3-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "c8e1470ff065fb777279154fc190307f", "sha256": "a76e868ae3fcbeb4ce3ba5bdc13098b3919f632653e5993864926ec3f4fbb265"}, "downloads": -1, "filename": "calchylus3-0.1.2.tar.gz", "has_sig": false, "md5_digest": "c8e1470ff065fb777279154fc190307f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9853, "upload_time": "2019-03-07T11:43:43", "upload_time_iso_8601": "2019-03-07T11:43:43.509260Z", "url": "https://files.pythonhosted.org/packages/9b/ce/3c447e8d162dea7da590b69beae39128d112ed1f81fa3e2aadb7e69f0ea4/calchylus3-0.1.2.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "fcffe1a5c506f4ec6b6f624464c3b217", "sha256": "5be69fdb1a6614025b8df03a26a0761a403986ce949c7e590d20f46f8f5a96a7"}, "downloads": -1, "filename": "calchylus3-0.1.4.tar.gz", "has_sig": false, "md5_digest": "fcffe1a5c506f4ec6b6f624464c3b217", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10513, "upload_time": "2019-03-08T19:26:10", "upload_time_iso_8601": "2019-03-08T19:26:10.838461Z", "url": "https://files.pythonhosted.org/packages/3d/03/ab6ac9344b7e20e4feefd075f0ca67bd92613a718c27cd1b3620918cabf1/calchylus3-0.1.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "fcffe1a5c506f4ec6b6f624464c3b217", "sha256": "5be69fdb1a6614025b8df03a26a0761a403986ce949c7e590d20f46f8f5a96a7"}, "downloads": -1, "filename": "calchylus3-0.1.4.tar.gz", "has_sig": false, "md5_digest": "fcffe1a5c506f4ec6b6f624464c3b217", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10513, "upload_time": "2019-03-08T19:26:10", "upload_time_iso_8601": "2019-03-08T19:26:10.838461Z", "url": "https://files.pythonhosted.org/packages/3d/03/ab6ac9344b7e20e4feefd075f0ca67bd92613a718c27cd1b3620918cabf1/calchylus3-0.1.4.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:35:39 2020"}