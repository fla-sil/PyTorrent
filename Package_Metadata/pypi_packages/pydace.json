{"info": {"author": "Felipe Souza Lima", "author_email": "felipe.lima@eq.ufcg.edu.br", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6", "Topic :: Scientific/Engineering"], "description": "# Description\n\nThis project is an adaptation from the work of Hans Bruun Nielsen, S\u00c3\u00b8ren Nymand and Lophaven Jacob S\u00c3\u00b8ndergaard.\n\n## Notes\n**This is a implementation that relies heavily on linear algebra solvers** (least-squares solvers, Cholesky and QR \ndecompositions, etc.). Therefore, it is strongly advised that your numpy library be integrated to a \n[BLAS library](http://markus-beuckelmann.de/blog/boosting-numpy-blas.html) (e.g.: Intel-MKL, OpenBLAS, ATLAS, etc.) \nin order to attain satisfactory performances of calculation.\n\nFor the sake of convenience, Anaconda handles the gritty details of how to combine numpy and those libraries natively.\n\n## Installation\n\nTo install through PyPi Repository:\n\n    pip install pydace\n\nTo install via conda\n\n    conda install -c felipes21 pydace\n\n## Usage\n\n### Example with dace model\n\n```python    \n    import numpy as np\n    import scipy.io as sio\n    from pydace import Dace\n    import matplotlib.pyplot as plt\n\n    # Load the training and validation data. (Here we are using a file from the\n    # github repo located in the folder pydace\\tests with the name \n    # 'doe_final_infill_mat'\n\n    mat_contents = sio.loadmat('doe_final_infill.mat')\n\n    design_data = mat_contents['MV']  # design sites\n    observed_data = mat_contents['CV']  # experiment results\n\n    # define the hyperparameters bounds and initial estimate\n    theta0 = 1 * np.ones((design_data.shape[1],))\n    lob = 1e-5 * np.ones(theta0.shape)\n    upb = 1e5 * np.ones(theta0.shape)\n\n    # select the training and validation data\n    design_val = design_data[:99, :]\n    observed_val = observed_data[:99, :]\n\n    design_train = design_data[100:, :]\n    observed_train = observed_data[100:, :]\n\n    # build the univariate kriging models with a first order polynomial \n    # regression and a gaussian regression model\n    observed_prediction = np.empty(observed_val.shape)\n    for j in np.arange(design_data.shape[1]):\n        # initialize the dace object\n        dace_obj = Dace('poly1', 'corrgauss', optimizer='boxmin')\n\n        # fit the training data using the default hyperparameter optimizer\n        dace_obj.fit(design_train, observed_train[:, j], theta0, lob, upb)\n\n        # predict the validation data\n        observed_prediction[:, [j]], *_ = dace_obj.predict(design_val)\n\n    # labels for the observed data\n    var_labels = ['L/F', 'V/F', 'xD', 'xB', 'J', 'QR'] \n\n    # plot the validation data\n    for var in np.arange(design_data.shape[1]):\n        plt.figure(var + 1)\n        plt.plot(observed_val[:, var], observed_prediction[:,var], 'b+')\n        plt.xlabel(var_labels[var] + ' - Observed')\n        plt.ylabel(var_labels[var] + ' - Kriging Prediction')\n\n    plt.show()\n```\n\n### Example of design of experiment data generation\nIt is also possible to generate design of experiment data with a variation reduction technique called Latin Hypercube\nSampling (LHS) that is already implemented in this toolbox.\n\nLets say we have a 4-th dimensional problem (i.e. 4 design/input variables). They are defined by the following bounds.\n\n![Variables to sample](lhsvariables.png)\n\nIf we want to build a latin hypercube within these bounds we would do the following:\n\n```python    \n    import numpy as np\n    from pydace.aux_functions import lhsdesign\n\n    lb = np.array([8.5, 0., 102., 0.])\n    ub = np.array([20., 100., 400., 400.])\n\n    lhs = lhsdesign(53, lb, ub, include_vertices=False)\n```\n\n## Contact/Talk to me\n\nMy e-email is felipe.lima@eq.ufcg.edu.br. Feel free to contact me anytime, or just nag me if I'm being lazy.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/feslima/pydace", "keywords": "surrogate,metamodel", "license": "Apache License 2.0", "maintainer": "", "maintainer_email": "", "name": "pydace", "package_url": "https://pypi.org/project/pydace/", "platform": "", "project_url": "https://pypi.org/project/pydace/", "project_urls": {"Homepage": "https://github.com/feslima/pydace"}, "release_url": "https://pypi.org/project/pydace/0.1.3/", "requires_dist": ["numpy (>=1.16)", "scipy (>=1.2.0)", "pyDOE2"], "requires_python": ">=3.5", "summary": "Design and Analysis of Computational Experiments as python toolbox.", "version": "0.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Description</h1>\n<p>This project is an adaptation from the work of Hans Bruun Nielsen, S\u00c3\u00b8ren Nymand and Lophaven Jacob S\u00c3\u00b8ndergaard.</p>\n<h2>Notes</h2>\n<p><strong>This is a implementation that relies heavily on linear algebra solvers</strong> (least-squares solvers, Cholesky and QR\ndecompositions, etc.). Therefore, it is strongly advised that your numpy library be integrated to a\n<a href=\"http://markus-beuckelmann.de/blog/boosting-numpy-blas.html\" rel=\"nofollow\">BLAS library</a> (e.g.: Intel-MKL, OpenBLAS, ATLAS, etc.)\nin order to attain satisfactory performances of calculation.</p>\n<p>For the sake of convenience, Anaconda handles the gritty details of how to combine numpy and those libraries natively.</p>\n<h2>Installation</h2>\n<p>To install through PyPi Repository:</p>\n<pre><code>pip install pydace\n</code></pre>\n<p>To install via conda</p>\n<pre><code>conda install -c felipes21 pydace\n</code></pre>\n<h2>Usage</h2>\n<h3>Example with dace model</h3>\n<pre>    <span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">scipy.io</span> <span class=\"k\">as</span> <span class=\"nn\">sio</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">pydace</span> <span class=\"kn\">import</span> <span class=\"n\">Dace</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n\n    <span class=\"c1\"># Load the training and validation data. (Here we are using a file from the</span>\n    <span class=\"c1\"># github repo located in the folder pydace\\tests with the name </span>\n    <span class=\"c1\"># 'doe_final_infill_mat'</span>\n\n    <span class=\"n\">mat_contents</span> <span class=\"o\">=</span> <span class=\"n\">sio</span><span class=\"o\">.</span><span class=\"n\">loadmat</span><span class=\"p\">(</span><span class=\"s1\">'doe_final_infill.mat'</span><span class=\"p\">)</span>\n\n    <span class=\"n\">design_data</span> <span class=\"o\">=</span> <span class=\"n\">mat_contents</span><span class=\"p\">[</span><span class=\"s1\">'MV'</span><span class=\"p\">]</span>  <span class=\"c1\"># design sites</span>\n    <span class=\"n\">observed_data</span> <span class=\"o\">=</span> <span class=\"n\">mat_contents</span><span class=\"p\">[</span><span class=\"s1\">'CV'</span><span class=\"p\">]</span>  <span class=\"c1\"># experiment results</span>\n\n    <span class=\"c1\"># define the hyperparameters bounds and initial estimate</span>\n    <span class=\"n\">theta0</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">((</span><span class=\"n\">design_data</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],))</span>\n    <span class=\"n\">lob</span> <span class=\"o\">=</span> <span class=\"mf\">1e-5</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">(</span><span class=\"n\">theta0</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n    <span class=\"n\">upb</span> <span class=\"o\">=</span> <span class=\"mf\">1e5</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">(</span><span class=\"n\">theta0</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># select the training and validation data</span>\n    <span class=\"n\">design_val</span> <span class=\"o\">=</span> <span class=\"n\">design_data</span><span class=\"p\">[:</span><span class=\"mi\">99</span><span class=\"p\">,</span> <span class=\"p\">:]</span>\n    <span class=\"n\">observed_val</span> <span class=\"o\">=</span> <span class=\"n\">observed_data</span><span class=\"p\">[:</span><span class=\"mi\">99</span><span class=\"p\">,</span> <span class=\"p\">:]</span>\n\n    <span class=\"n\">design_train</span> <span class=\"o\">=</span> <span class=\"n\">design_data</span><span class=\"p\">[</span><span class=\"mi\">100</span><span class=\"p\">:,</span> <span class=\"p\">:]</span>\n    <span class=\"n\">observed_train</span> <span class=\"o\">=</span> <span class=\"n\">observed_data</span><span class=\"p\">[</span><span class=\"mi\">100</span><span class=\"p\">:,</span> <span class=\"p\">:]</span>\n\n    <span class=\"c1\"># build the univariate kriging models with a first order polynomial </span>\n    <span class=\"c1\"># regression and a gaussian regression model</span>\n    <span class=\"n\">observed_prediction</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">empty</span><span class=\"p\">(</span><span class=\"n\">observed_val</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"n\">design_data</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]):</span>\n        <span class=\"c1\"># initialize the dace object</span>\n        <span class=\"n\">dace_obj</span> <span class=\"o\">=</span> <span class=\"n\">Dace</span><span class=\"p\">(</span><span class=\"s1\">'poly1'</span><span class=\"p\">,</span> <span class=\"s1\">'corrgauss'</span><span class=\"p\">,</span> <span class=\"n\">optimizer</span><span class=\"o\">=</span><span class=\"s1\">'boxmin'</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># fit the training data using the default hyperparameter optimizer</span>\n        <span class=\"n\">dace_obj</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">design_train</span><span class=\"p\">,</span> <span class=\"n\">observed_train</span><span class=\"p\">[:,</span> <span class=\"n\">j</span><span class=\"p\">],</span> <span class=\"n\">theta0</span><span class=\"p\">,</span> <span class=\"n\">lob</span><span class=\"p\">,</span> <span class=\"n\">upb</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># predict the validation data</span>\n        <span class=\"n\">observed_prediction</span><span class=\"p\">[:,</span> <span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]],</span> <span class=\"o\">*</span><span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">dace_obj</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">design_val</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># labels for the observed data</span>\n    <span class=\"n\">var_labels</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'L/F'</span><span class=\"p\">,</span> <span class=\"s1\">'V/F'</span><span class=\"p\">,</span> <span class=\"s1\">'xD'</span><span class=\"p\">,</span> <span class=\"s1\">'xB'</span><span class=\"p\">,</span> <span class=\"s1\">'J'</span><span class=\"p\">,</span> <span class=\"s1\">'QR'</span><span class=\"p\">]</span> \n\n    <span class=\"c1\"># plot the validation data</span>\n    <span class=\"k\">for</span> <span class=\"n\">var</span> <span class=\"ow\">in</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"n\">design_data</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]):</span>\n        <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">(</span><span class=\"n\">var</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">observed_val</span><span class=\"p\">[:,</span> <span class=\"n\">var</span><span class=\"p\">],</span> <span class=\"n\">observed_prediction</span><span class=\"p\">[:,</span><span class=\"n\">var</span><span class=\"p\">],</span> <span class=\"s1\">'b+'</span><span class=\"p\">)</span>\n        <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">xlabel</span><span class=\"p\">(</span><span class=\"n\">var_labels</span><span class=\"p\">[</span><span class=\"n\">var</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"s1\">' - Observed'</span><span class=\"p\">)</span>\n        <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">ylabel</span><span class=\"p\">(</span><span class=\"n\">var_labels</span><span class=\"p\">[</span><span class=\"n\">var</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"s1\">' - Kriging Prediction'</span><span class=\"p\">)</span>\n\n    <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n<h3>Example of design of experiment data generation</h3>\n<p>It is also possible to generate design of experiment data with a variation reduction technique called Latin Hypercube\nSampling (LHS) that is already implemented in this toolbox.</p>\n<p>Lets say we have a 4-th dimensional problem (i.e. 4 design/input variables). They are defined by the following bounds.</p>\n<p><img alt=\"Variables to sample\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/053e4c84fa1f513ad45324b32c73df2b1e3be7b4/6c68737661726961626c65732e706e67\"></p>\n<p>If we want to build a latin hypercube within these bounds we would do the following:</p>\n<pre>    <span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">pydace.aux_functions</span> <span class=\"kn\">import</span> <span class=\"n\">lhsdesign</span>\n\n    <span class=\"n\">lb</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mf\">8.5</span><span class=\"p\">,</span> <span class=\"mf\">0.</span><span class=\"p\">,</span> <span class=\"mf\">102.</span><span class=\"p\">,</span> <span class=\"mf\">0.</span><span class=\"p\">])</span>\n    <span class=\"n\">ub</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mf\">20.</span><span class=\"p\">,</span> <span class=\"mf\">100.</span><span class=\"p\">,</span> <span class=\"mf\">400.</span><span class=\"p\">,</span> <span class=\"mf\">400.</span><span class=\"p\">])</span>\n\n    <span class=\"n\">lhs</span> <span class=\"o\">=</span> <span class=\"n\">lhsdesign</span><span class=\"p\">(</span><span class=\"mi\">53</span><span class=\"p\">,</span> <span class=\"n\">lb</span><span class=\"p\">,</span> <span class=\"n\">ub</span><span class=\"p\">,</span> <span class=\"n\">include_vertices</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n<h2>Contact/Talk to me</h2>\n<p>My e-email is <a href=\"mailto:felipe.lima@eq.ufcg.edu.br\">felipe.lima@eq.ufcg.edu.br</a>. Feel free to contact me anytime, or just nag me if I'm being lazy.</p>\n\n          </div>"}, "last_serial": 6509575, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "ab4525c39f6f62f3b77b93a5b1020a58", "sha256": "e8622cef06e03b55406d6f793c1249f9b89309a84c198796f0f033726315f5de"}, "downloads": -1, "filename": "pydace-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "ab4525c39f6f62f3b77b93a5b1020a58", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12030, "upload_time": "2019-04-02T00:38:44", "upload_time_iso_8601": "2019-04-02T00:38:44.955252Z", "url": "https://files.pythonhosted.org/packages/e8/d6/ba88da28144fb57e01e8032f72e9f2a754db9edc7651bf1d026aa103050d/pydace-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6a219ec914f9cc5343291049e7764158", "sha256": "82308838c7a9d4cddf0d7c05d019707e1629d1777f5bfe8a5a114a72a08bd67e"}, "downloads": -1, "filename": "pydace-0.0.1.tar.gz", "has_sig": false, "md5_digest": "6a219ec914f9cc5343291049e7764158", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10599, "upload_time": "2019-04-02T00:38:47", "upload_time_iso_8601": "2019-04-02T00:38:47.366586Z", "url": "https://files.pythonhosted.org/packages/ab/9e/52586f9254464a2b6d92ab66b29a288bc93cc19be31f890efe4f0399b368/pydace-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "b421804e65d5ef9de508701ee6c0a565", "sha256": "d3710d8cbc18de9fc3c8b060228c0449b793a266b60dc427023d5a0d335b30cb"}, "downloads": -1, "filename": "pydace-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "b421804e65d5ef9de508701ee6c0a565", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12046, "upload_time": "2019-04-02T01:00:03", "upload_time_iso_8601": "2019-04-02T01:00:03.382839Z", "url": "https://files.pythonhosted.org/packages/10/ed/a47e2fbf7531a4954c2584cb7ff994583570ef7b1f7c70361a7e1e793a6e/pydace-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "99518e1fd54c8a11cdf69ac12c584a79", "sha256": "a936c41d6b00f84b5206b6c6525598d718de17ac6369bbde46ae51ac331fdbc0"}, "downloads": -1, "filename": "pydace-0.0.2.tar.gz", "has_sig": false, "md5_digest": "99518e1fd54c8a11cdf69ac12c584a79", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10651, "upload_time": "2019-04-02T01:00:04", "upload_time_iso_8601": "2019-04-02T01:00:04.829201Z", "url": "https://files.pythonhosted.org/packages/be/43/b1763e899a728a7f02ea0eda91cea3d934f907c75e833214137b35b625d7/pydace-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "01e263ca01b4ddc9617aad70ff66eaa1", "sha256": "f64def81440352299f89c65fed4fe895d947c79277d217be00201f6fe1191075"}, "downloads": -1, "filename": "pydace-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "01e263ca01b4ddc9617aad70ff66eaa1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 18115, "upload_time": "2019-04-19T00:47:15", "upload_time_iso_8601": "2019-04-19T00:47:15.009468Z", "url": "https://files.pythonhosted.org/packages/ec/3a/85936c4f91cd3cd2d951b101bdca117c688ca5dee70d1f41c1b2ec897542/pydace-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c4fd6bf8744810b923958c2913f6d3ed", "sha256": "983e2a6885a6036fbbaf2bbbb491032fd225f5edc66d348893fdff79d1de72b9"}, "downloads": -1, "filename": "pydace-0.0.3.tar.gz", "has_sig": false, "md5_digest": "c4fd6bf8744810b923958c2913f6d3ed", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 11808, "upload_time": "2019-04-19T00:47:16", "upload_time_iso_8601": "2019-04-19T00:47:16.761460Z", "url": "https://files.pythonhosted.org/packages/1d/a6/4a50f436d98be1eeffd77f83950426c6093d11aec965ac840bacc433e19f/pydace-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "275c359b8c7bd9ed19802bfea2a79564", "sha256": "6e626131e95d5e01516ccfc6c5c246429903bb21fd1b1ee51cdd605c80cff1f7"}, "downloads": -1, "filename": "pydace-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "275c359b8c7bd9ed19802bfea2a79564", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 20195, "upload_time": "2019-04-19T01:52:39", "upload_time_iso_8601": "2019-04-19T01:52:39.149569Z", "url": "https://files.pythonhosted.org/packages/29/10/028ce9af9b48c7f069e0b1d3e29201b692936f6747e5203bd40c1ecd7af1/pydace-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3f036423ad06ff2f8403e1bc713ace12", "sha256": "e50b2b788a638896316cfc051c0c4626ba83af4aae0ea62a34c170e1b8f889fd"}, "downloads": -1, "filename": "pydace-0.0.4.tar.gz", "has_sig": false, "md5_digest": "3f036423ad06ff2f8403e1bc713ace12", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 11541, "upload_time": "2019-04-19T01:52:40", "upload_time_iso_8601": "2019-04-19T01:52:40.723541Z", "url": "https://files.pythonhosted.org/packages/7c/9f/1e47478fdca70cd37db24007fbbe783383aaa03d3c1d78c1164a79f10797/pydace-0.0.4.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "ebe9979fa05ce31524e60456348570b6", "sha256": "289f148261a5ef30f5c1fd63912881d14397e541cc0b822bacd464f8acc77bdd"}, "downloads": -1, "filename": "pydace-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ebe9979fa05ce31524e60456348570b6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 19465, "upload_time": "2019-07-25T17:32:48", "upload_time_iso_8601": "2019-07-25T17:32:48.479483Z", "url": "https://files.pythonhosted.org/packages/d7/34/31fc099634925406280187486a30c66c18c972b3ebb9f019f0385db1299c/pydace-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ceea041e152c5cc732f439f1e24e4135", "sha256": "1b94670020d233e0ca700e07f3ea1a83dafc0a3055ae69def9775839a60cfb80"}, "downloads": -1, "filename": "pydace-0.1.0.tar.gz", "has_sig": false, "md5_digest": "ceea041e152c5cc732f439f1e24e4135", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 14748, "upload_time": "2019-07-25T17:32:50", "upload_time_iso_8601": "2019-07-25T17:32:50.154964Z", "url": "https://files.pythonhosted.org/packages/20/36/a130560b33cf5b90fe31668850637ce558a59e78562168e22e0f371e20ac/pydace-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "e21e982f4c408829c58c71969214125d", "sha256": "e64c9d3db05cc7d2e7c198fb3454b9ad3b4b5dde97474793548ab52c3435b320"}, "downloads": -1, "filename": "pydace-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e21e982f4c408829c58c71969214125d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 14697, "upload_time": "2019-09-30T16:51:37", "upload_time_iso_8601": "2019-09-30T16:51:37.303374Z", "url": "https://files.pythonhosted.org/packages/4c/1f/1cb37e0b8686d59d39324faeabf53aba4633641bc18e8073992f9a3ec02b/pydace-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b0db996c935c49017c16f9bd08f82576", "sha256": "e41a7368e999da38f867ed851d76d80c16cfb64d535e725583f15ea2a0a9e4fa"}, "downloads": -1, "filename": "pydace-0.1.1.tar.gz", "has_sig": false, "md5_digest": "b0db996c935c49017c16f9bd08f82576", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 14118, "upload_time": "2019-09-30T16:51:39", "upload_time_iso_8601": "2019-09-30T16:51:39.258864Z", "url": "https://files.pythonhosted.org/packages/76/e4/0e8685dfc9f8dd6dffe1cebe0c46019592e11ac224915ab3ed9144abef07/pydace-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "17231a4c9da84fe791e16cf363876c0b", "sha256": "e9ebd796fec9b364547462466cae04af329e9bf3af027f4bc2526f68e52df491"}, "downloads": -1, "filename": "pydace-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "17231a4c9da84fe791e16cf363876c0b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 11969, "upload_time": "2020-01-23T18:54:22", "upload_time_iso_8601": "2020-01-23T18:54:22.312720Z", "url": "https://files.pythonhosted.org/packages/fc/2d/ed61a36f4fd72b2437c21a879ee9a0069f44f0a0b99a638f2d4a4f3d6980/pydace-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b90c5eb56a5f49b3fa178a7322a59181", "sha256": "1818140588179fc4b136ae87ceab9c8acda36cee8378dfacf6ad5367d748ada1"}, "downloads": -1, "filename": "pydace-0.1.2.tar.gz", "has_sig": false, "md5_digest": "b90c5eb56a5f49b3fa178a7322a59181", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 8456, "upload_time": "2020-01-23T18:54:24", "upload_time_iso_8601": "2020-01-23T18:54:24.006264Z", "url": "https://files.pythonhosted.org/packages/fa/da/5e4c5ebe35a245c3f0d05a4a21ef82c68ab89770d16d466b25f5b8685548/pydace-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "3f9589698e3c416b9d24db286d9e6b34", "sha256": "53fe472b90848ef206c4506f2064a2d4538f640af143c9bf07f55bed1778a526"}, "downloads": -1, "filename": "pydace-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "3f9589698e3c416b9d24db286d9e6b34", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 18163, "upload_time": "2020-01-23T19:21:06", "upload_time_iso_8601": "2020-01-23T19:21:06.862715Z", "url": "https://files.pythonhosted.org/packages/62/80/55ff62bac726341de461590f2f4ed39f7853080c0479ca0737d574d294bf/pydace-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "24f68c3a5d26cc8d7386b72b9722b3d4", "sha256": "d86e3e75f87764a7110b0dc303e648daa6d6895a9c10d1fb19a98ab71df093b6"}, "downloads": -1, "filename": "pydace-0.1.3.tar.gz", "has_sig": false, "md5_digest": "24f68c3a5d26cc8d7386b72b9722b3d4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 13861, "upload_time": "2020-01-23T19:21:08", "upload_time_iso_8601": "2020-01-23T19:21:08.274848Z", "url": "https://files.pythonhosted.org/packages/9b/44/9b9a1f12714e3e1592927ca9ba88fdc73a88b820cddf6061fc20c4da95a7/pydace-0.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3f9589698e3c416b9d24db286d9e6b34", "sha256": "53fe472b90848ef206c4506f2064a2d4538f640af143c9bf07f55bed1778a526"}, "downloads": -1, "filename": "pydace-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "3f9589698e3c416b9d24db286d9e6b34", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 18163, "upload_time": "2020-01-23T19:21:06", "upload_time_iso_8601": "2020-01-23T19:21:06.862715Z", "url": "https://files.pythonhosted.org/packages/62/80/55ff62bac726341de461590f2f4ed39f7853080c0479ca0737d574d294bf/pydace-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "24f68c3a5d26cc8d7386b72b9722b3d4", "sha256": "d86e3e75f87764a7110b0dc303e648daa6d6895a9c10d1fb19a98ab71df093b6"}, "downloads": -1, "filename": "pydace-0.1.3.tar.gz", "has_sig": false, "md5_digest": "24f68c3a5d26cc8d7386b72b9722b3d4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 13861, "upload_time": "2020-01-23T19:21:08", "upload_time_iso_8601": "2020-01-23T19:21:08.274848Z", "url": "https://files.pythonhosted.org/packages/9b/44/9b9a1f12714e3e1592927ca9ba88fdc73a88b820cddf6061fc20c4da95a7/pydace-0.1.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:07:30 2020"}