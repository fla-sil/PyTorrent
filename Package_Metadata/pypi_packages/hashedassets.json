{"info": {"author": "Filip Noetzel", "author_email": "filip+pypi@j03.de", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Other Environment", "Intended Audience :: Developers", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "A command line tool that copies files to filenames based on their contents. It\nalso writes a map of what was renamed to what, so you can find your files.\n\nMain purpose of this is that you can `add a far future Expires header to your\ncomponents <http://stevesouders.com/hpws/rule-expires.php>`__. Using hash based\nfilenames is a lot better than using your $VCS revision number, because users\nonly need to download files that didn't change.\n\n\n\n.. contents:: Table of Contents\n\nCreating some source files\n--------------------------\n\nFor this demo, we'll create a few directories, one for the maps to live, one\nfor the input files:\n\n>>> system(\"mkdir maps/\")\n>>> system(\"mkdir -p input/subdir/2nd/\")\n\nWe also create files that live in a sub- and subsubdirectories:\n\n>>> write(\"input/foo.txt\", \"foo\")\n>>> write(\"input/subdir/bar.txt\", \"bar\")\n>>> write(\"input/subdir/2nd/baz.txt\", \"foofoofoo\")\n\nSimple usage\n------------\n\n>>> system(\"hashedassets -v maps/map.txt input/*.txt input/*/*.txt output/\")\nmkdir 'output'\ncp 'input/foo.txt' 'output/C-7Hteo_D9vJXQ3UfzxbwnXaijM.txt'\ncp 'input/subdir/bar.txt' 'output/Ys23Ag_5IOWqZCw9QGaVDdHwH00.txt'\n\n>>> system(\"ls maps/\")\nmap.txt\n\n>>> print(open(\"maps/map.txt\").read())\nfoo.txt: C-7Hteo_D9vJXQ3UfzxbwnXaijM.txt\nsubdir/bar.txt: Ys23Ag_5IOWqZCw9QGaVDdHwH00.txt\n<BLANKLINE>\n\n>>> system(\"ls output/\")\nC-7Hteo_D9vJXQ3UfzxbwnXaijM.txt\nYs23Ag_5IOWqZCw9QGaVDdHwH00.txt\n\nModification time is also preserved:\n\n>>> old_stat = os.stat(\"input/foo.txt\")\n>>> new_stat = os.stat(\"output/C-7Hteo_D9vJXQ3UfzxbwnXaijM.txt\")\n>>> [(getattr(old_stat, prop) == getattr(new_stat, prop))\n...   for prop in ('st_mtime', 'st_atime', 'st_ino',)]\n[True, True, False]\n\nIf you specify a directory as source, all files and subdirectories will be processed:\n\n>>> system(\"hashedassets -v maps/dirmap.txt input/ output/\")\ncp 'input/foo.txt' 'output/C-7Hteo_D9vJXQ3UfzxbwnXaijM.txt'\ncp 'input/subdir/bar.txt' 'output/Ys23Ag_5IOWqZCw9QGaVDdHwH00.txt'\ncp 'input/subdir/2nd/baz.txt' 'output/NdbmnXyjdY2paFzlDw9aJzCKH9w.txt'\n\n>>> system(\"rm output/NdbmnXyjdY2paFzlDw9aJzCKH9w.txt\")\n\n\nOutput formats\n--------------\n\nWe can easily do this with multiple formats:\n\nSed\n+++\n\nThis generates a sed script that does the replacements for us:\n\n>>> system(\"hashedassets -v -n my_callback maps/map.sed input/*.txt input/*/*.txt output/\")\ncp 'input/foo.txt' 'output/C-7Hteo_D9vJXQ3UfzxbwnXaijM.txt'\ncp 'input/subdir/bar.txt' 'output/Ys23Ag_5IOWqZCw9QGaVDdHwH00.txt'\n\n>>> print(open(\"maps/map.sed\").read())\ns/foo\\.txt/C-7Hteo_D9vJXQ3UfzxbwnXaijM\\.txt/g\ns/subdir\\/bar\\.txt/Ys23Ag_5IOWqZCw9QGaVDdHwH00\\.txt/g\n<BLANKLINE>\n\nWe should be able to use this with sed on this file:\n\n>>> write(\"replaceme.html\", \"<a href=foo.txt>bar</a>\")\n\nThe script is then applied like this:\n\n>>> system(\"sed -f maps/map.sed replaceme.html\")\n<a href=C-7Hteo_D9vJXQ3UfzxbwnXaijM.txt>bar</a>\n\nNote '.' is not treated as wildcard, so the following does not work\n\n>>> write(\"replaceme2.html\", \"<a href=fooAtxt>bar</a>\")\n>>> system(\"sed -f maps/map.sed replaceme2.html\")\n<a href=fooAtxt>bar</a>\n\nJavaScript\n++++++++++\n\n>>> system(\"hashedassets -v -n my_callback maps/map.js input/*.txt input/*/*.txt output/\")\ncp 'input/foo.txt' 'output/C-7Hteo_D9vJXQ3UfzxbwnXaijM.txt'\ncp 'input/subdir/bar.txt' 'output/Ys23Ag_5IOWqZCw9QGaVDdHwH00.txt'\n\n>>> print(open(\"maps/map.js\").read())\nvar my_callback = {\n  \"foo.txt\": \"C-7Hteo_D9vJXQ3UfzxbwnXaijM.txt\",\n  \"subdir/bar.txt\": \"Ys23Ag_5IOWqZCw9QGaVDdHwH00.txt\"\n};\n\nJSON\n++++\n\n>>> system(\"hashedassets -v -n my_callback maps/map.json input/*.txt input/*/*.txt output/\")\ncp 'input/foo.txt' 'output/C-7Hteo_D9vJXQ3UfzxbwnXaijM.txt'\ncp 'input/subdir/bar.txt' 'output/Ys23Ag_5IOWqZCw9QGaVDdHwH00.txt'\n\n>>> print(open(\"maps/map.json\").read())\n{\n  \"foo.txt\": \"C-7Hteo_D9vJXQ3UfzxbwnXaijM.txt\",\n  \"subdir/bar.txt\": \"Ys23Ag_5IOWqZCw9QGaVDdHwH00.txt\"\n}\n\nJSONP\n+++++\n\n>>> system(\"hashedassets -v -n my_callback maps/map.jsonp input/*.txt input/*/*.txt output/\")\ncp 'input/foo.txt' 'output/C-7Hteo_D9vJXQ3UfzxbwnXaijM.txt'\ncp 'input/subdir/bar.txt' 'output/Ys23Ag_5IOWqZCw9QGaVDdHwH00.txt'\n\n>>> print(open(\"maps/map.jsonp\").read())\nmy_callback({\n  \"foo.txt\": \"C-7Hteo_D9vJXQ3UfzxbwnXaijM.txt\",\n  \"subdir/bar.txt\": \"Ys23Ag_5IOWqZCw9QGaVDdHwH00.txt\"\n});\n\nSCSS\n++++\n\n`Sass <http://sass-lang.com/>`__ (\"Syntactically Awesome Stylesheets\") is a meta language on top of CSS.\n\n>>> system(\"hashedassets -v -n my_callback maps/map.scss input/*.txt input/*/*.txt output/\")\ncp 'input/foo.txt' 'output/C-7Hteo_D9vJXQ3UfzxbwnXaijM.txt'\ncp 'input/subdir/bar.txt' 'output/Ys23Ag_5IOWqZCw9QGaVDdHwH00.txt'\n\n>>> print(open(\"maps/map.scss\").read())\n@mixin my_callback($directive, $path) {\n         @if $path == \"foo.txt\" { #{$directive}: url(\"C-7Hteo_D9vJXQ3UfzxbwnXaijM.txt\"); }\n    @else if $path == \"subdir/bar.txt\" { #{$directive}: url(\"Ys23Ag_5IOWqZCw9QGaVDdHwH00.txt\"); }\n    @else {\n      @warn \"Did not find \"#{$path}\" in list of assets\";\n      #{$directive}: url($path);\n    }\n}\n\nPHP\n+++\n\n>>> system(\"hashedassets -v -n my_callback maps/map.php input/*.txt input/*/*.txt output/\")\ncp 'input/foo.txt' 'output/C-7Hteo_D9vJXQ3UfzxbwnXaijM.txt'\ncp 'input/subdir/bar.txt' 'output/Ys23Ag_5IOWqZCw9QGaVDdHwH00.txt'\n\n>>> print(open(\"maps/map.php\").read())\n$my_callback = array(\n  \"foo.txt\" => \"C-7Hteo_D9vJXQ3UfzxbwnXaijM.txt\",\n  \"subdir/bar.txt\" => \"Ys23Ag_5IOWqZCw9QGaVDdHwH00.txt\",\n)\n\n\nOptions\n-------\n\nSpecifying the type with -t\n+++++++++++++++++++++++++++\n\nThe type of the map is guessed from the filename, but you can specify it as\nwell:\n\n>>> system(\"hashedassets -v -t js cantguessmaptype input/*.txt input/*/*.txt output/\")\ncp 'input/foo.txt' 'output/C-7Hteo_D9vJXQ3UfzxbwnXaijM.txt'\ncp 'input/subdir/bar.txt' 'output/Ys23Ag_5IOWqZCw9QGaVDdHwH00.txt'\n\nSpecifying the length of the filename with -l\n+++++++++++++++++++++++++++++++++++++++++++++\n\n>>> system(\"hashedassets -v -l 10 maps/shortmap.json input/*.txt input/*/*.txt output/\")\ncp 'input/foo.txt' 'output/C-7Hteo_D9.txt'\ncp 'input/subdir/bar.txt' 'output/Ys23Ag_5IO.txt'\n\n>>> system(\"rm output/C-7Hteo_D9.txt output/Ys23Ag_5IO.txt\")\n\nSpecifying the digest with -d\n+++++++++++++++++++++++++++++\n\nHashedassets uses sha1 by default to hash the input files. You can change that\nwith the -d command line parameter, e.g. by specifying -d md5 to use the md5\ndigest method.\n\n>>> system(\"hashedassets -v -d md5 maps/md5map.json input/*.txt input/*/*.txt output/\")\ncp 'input/foo.txt' 'output/rL0Y20zC-Fzt72VPzMSk2A.txt'\ncp 'input/subdir/bar.txt' 'output/N7UdGUp1E-RbVvZSTy1R8g.txt'\n\n>>> system(\"rm output/rL0Y20zC-Fzt72VPzMSk2A.txt output/N7UdGUp1E-RbVvZSTy1R8g.txt\")\n\nKeep the directory structure with --keep-dirs\n+++++++++++++++++++++++++++++++++++++++++++++\n\nBy default hashedassets copies all output files into the root level of the\noutput dir. You can turn this off, with the ''--keep-dirs'' option:\n\n>>> system(\"hashedassets -v --keep-dirs maps/preserve.json input/*.txt input/*/*.txt input/*/*/*.txt output/\")\ncp 'input/foo.txt' 'output/C-7Hteo_D9vJXQ3UfzxbwnXaijM.txt'\nmkdir -p output/subdir\ncp 'input/subdir/bar.txt' 'output/subdir/Ys23Ag_5IOWqZCw9QGaVDdHwH00.txt'\nmkdir -p output/subdir/2nd\ncp 'input/subdir/2nd/baz.txt' 'output/subdir/2nd/NdbmnXyjdY2paFzlDw9aJzCKH9w.txt'\n\n>>> system(\"rm -r output/subdir/\")\n\nDon't move anything with --map-only\n+++++++++++++++++++++++++++++++++++\n\nIf you specify ''--map-only'', the program will create a map but it won't move\nany files. This is useful, if you want to use the hashed name as part of the\npath ('''http://static.example.com/aYs23A/subdir/bar.txt''') that is dropped by\nthe webserver during url rewriting.\n\n>>> system(\"hashedassets -v --map-only maps/maponly.txt input/*.txt\")\n>>> print(open('maps/maponly.txt').read())\nfoo.txt: C-7Hteo_D9vJXQ3UfzxbwnXaijM.txt\n<BLANKLINE>\n\nDon't map anything with --identity\n++++++++++++++++++++++++++++++++++\n\nIf you specify ''--identity'' the program will create a map that maps every\nfile to itself, similar to how the `identity function\n<http://en.wikipedia.org/wiki/Identity_function>`__ is defined. You can use\nthis if you want to disable hashedassets temporarily, but don't want to alter\nyour build script heavily:\n\n>>> system(\"hashedassets -v --identity maps/identitymap.json input/*.txt input/*/*.txt output/\")\ncp 'input/foo.txt' 'output/foo.txt'\nmkdir -p output/subdir\ncp 'input/subdir/bar.txt' 'output/subdir/bar.txt'\n\n>>> print(open('maps/identitymap.json').read())\n{\n  \"foo.txt\": \"foo.txt\",\n  \"subdir/bar.txt\": \"subdir/bar.txt\"\n}\n\nIf you switch --identity off, all identity files get deleted:\n\n>>> system(\"hashedassets -v maps/identitymap.json input/*.txt input/*/*.txt output/\")\nrm 'output/foo.txt'\ncp 'input/foo.txt' 'output/C-7Hteo_D9vJXQ3UfzxbwnXaijM.txt'\nrm 'output/subdir/bar.txt'\ncp 'input/subdir/bar.txt' 'output/Ys23Ag_5IOWqZCw9QGaVDdHwH00.txt'\n\n>>> print(open('maps/identitymap.json').read())\n{\n  \"foo.txt\": \"C-7Hteo_D9vJXQ3UfzxbwnXaijM.txt\",\n  \"subdir/bar.txt\": \"Ys23Ag_5IOWqZCw9QGaVDdHwH00.txt\"\n}\n\n>>> system(\"rm -r output/subdir/\")\n\nStrip file extensions with --strip-extensions\n+++++++++++++++++++++++++++++++++++++++++++++\n\nIf you want to strip the file extensions of the resulting hashed files, this\noption is for you! This is particularly useful in combination with the\n''--map-only'' option with the hashed name becoming part of the path of the url.\n\n>>> system(\"hashedassets -v --strip-extensions maps/noextensions.json input/*.txt input/*/*.txt output/\")\ncp 'input/foo.txt' 'output/C-7Hteo_D9vJXQ3UfzxbwnXaijM'\ncp 'input/subdir/bar.txt' 'output/Ys23Ag_5IOWqZCw9QGaVDdHwH00'\n\n>>> print(open('maps/noextensions.json').read())\n{\n  \"foo.txt\": \"C-7Hteo_D9vJXQ3UfzxbwnXaijM\",\n  \"subdir/bar.txt\": \"Ys23Ag_5IOWqZCw9QGaVDdHwH00\"\n}\n\n>>> system(\"rm -r output/C-7Hteo_D9vJXQ3UfzxbwnXaijM output/Ys23Ag_5IOWqZCw9QGaVDdHwH00\")\n\nVerbose mode with -v\n++++++++++++++++++++\n\nUsually the program does not print anything if it everything works as expected:\n\n>>> system(\"hashedassets maps/map2.txt input/*.txt input/*/*.txt output/\")\n\nYou can tell the program to log more information (using ``-v``), optionally\nmultiple times to see what's going on inside:\n\n>>> system(\"hashedassets -v maps/map3.txt input/*.txt input/*/*.txt output/\")\ncp 'input/foo.txt' 'output/C-7Hteo_D9vJXQ3UfzxbwnXaijM.txt'\ncp 'input/subdir/bar.txt' 'output/Ys23Ag_5IOWqZCw9QGaVDdHwH00.txt'\n\nExclude files with --exclude\n++++++++++++++++++++++++++++\n\nYou can exclude dirs and files from being hashed, using the ``--exclude``\noption, both using patterns and directories:\n\n>>> system(\"hashedassets -v maps/xmap.txt --exclude input/*/2nd input/ output/\")\ncp 'input/foo.txt' 'output/C-7Hteo_D9vJXQ3UfzxbwnXaijM.txt'\ncp 'input/subdir/bar.txt' 'output/Ys23Ag_5IOWqZCw9QGaVDdHwH00.txt'\n\n>>> system(\"hashedassets -v maps/xmap2.txt --exclude input/subdir/ input/ output/\")\ncp 'input/foo.txt' 'output/C-7Hteo_D9vJXQ3UfzxbwnXaijM.txt'\n\n>>> system(\"hashedassets -v maps/xmap3.txt --exclude input/subdir/2nd/baz.txt input/ output/\")\ncp 'input/foo.txt' 'output/C-7Hteo_D9vJXQ3UfzxbwnXaijM.txt'\ncp 'input/subdir/bar.txt' 'output/Ys23Ag_5IOWqZCw9QGaVDdHwH00.txt'\n\nRelative paths with --reference\n+++++++++++++++++++++++++++++++\n\nIf you need all paths relative to a specific file or directory, ``--reference`` is your friend:\n\n>>> system(\"hashedassets -v --keep-dirs --reference=output/subdir/style.css maps/refmap.txt input/ output/\")\ncp 'input/foo.txt' 'output/C-7Hteo_D9vJXQ3UfzxbwnXaijM.txt'\nmkdir -p output/subdir\ncp 'input/subdir/bar.txt' 'output/subdir/Ys23Ag_5IOWqZCw9QGaVDdHwH00.txt'\nmkdir -p output/subdir/2nd\ncp 'input/subdir/2nd/baz.txt' 'output/subdir/2nd/NdbmnXyjdY2paFzlDw9aJzCKH9w.txt'\n\n>>> print(open('maps/refmap.txt').read())\n../foo.txt: ../C-7Hteo_D9vJXQ3UfzxbwnXaijM.txt\nbar.txt: Ys23Ag_5IOWqZCw9QGaVDdHwH00.txt\n2nd/baz.txt: 2nd/NdbmnXyjdY2paFzlDw9aJzCKH9w.txt\n\nIf we execute this again, there is no work to do:\n\n>>> system(\"hashedassets -v --keep-dirs --reference=output/subdir/ maps/refmap.txt input/ output/\")\n>>> system(\"rm -r output/subdir/\")\n\nAdvanced usage\n--------------\n\nWriting the map to stdout\n+++++++++++++++++++++++++\n\n>>> system(\"hashedassets --map-type=txt - input/*.txt input/*/*.txt output/\")\nfoo.txt: C-7Hteo_D9vJXQ3UfzxbwnXaijM.txt\nsubdir/bar.txt: Ys23Ag_5IOWqZCw9QGaVDdHwH00.txt\n<BLANKLINE>\n\n\nRe-using a map\n++++++++++++++\n\nThe program reads in maps it created in a prior run to only copy files that\nhaven't changed since. So, the following commands do not copy any files:\n\n>>> system(\"hashedassets -v maps/map.scss input/*.txt input/*/*.txt output/\")\n>>> system(\"hashedassets -v maps/map.php input/*.txt input/*/*.txt output/\")\n>>> system(\"hashedassets -v maps/map.js input/*.txt input/*/*.txt output/\")\n>>> system(\"hashedassets -v maps/map.json input/*.txt input/*/*.txt output/\")\n>>> system(\"hashedassets -v maps/map.sed input/*.txt input/*/*.txt output/\")\n>>> system(\"hashedassets -v maps/map.jsonp input/*.txt input/*/*.txt output/\")\n>>> system(\"hashedassets -v maps/map.txt input/*.txt input/*/*.txt output/\")\n\nIf we touch one of the input files in between, the file will be read but not\ncopied because the hashsum is the same:\n\n>>> system('touch -t200504072214.12 input/foo.txt')\n>>> system(\"hashedassets -v maps/map.json input/*.txt input/*/*.txt output/\")\n\nIf we change the file's content, it will get a new name:\n\n>>> write(\"input/foo.txt\", \"foofoo\")\n\nThen try again:\n\n>>> system(\"hashedassets -v maps/map.json input/*.txt input/*/*.txt output/\")\nrm 'output/C-7Hteo_D9vJXQ3UfzxbwnXaijM.txt'\ncp 'input/foo.txt' 'output/QIDaFD7KLKQh0l5O6b8exdew3b0.txt'\n\nIf you then list the files in the directory, note that the old file\n''output/C-7Hteo_D9vJXQ3UfzxbwnXaijM.txt'' is gone:\n\n>>> system(\"ls output/\")\nQIDaFD7KLKQh0l5O6b8exdew3b0.txt\nYs23Ag_5IOWqZCw9QGaVDdHwH00.txt\n\nIf we remove one of the created files, it gets recreated:\n\n>>> system(\"rm output/Ys23Ag_5IOWqZCw9QGaVDdHwH00.txt\")\n>>> system(\"hashedassets -v maps/map.json input/*.txt input/*/*.txt output/\")\ncp 'input/subdir/bar.txt' 'output/Ys23Ag_5IOWqZCw9QGaVDdHwH00.txt'\n\n>>> system(\"ls output/\")\nQIDaFD7KLKQh0l5O6b8exdew3b0.txt\nYs23Ag_5IOWqZCw9QGaVDdHwH00.txt\n\nIf a file that is about to be removed because the original content changed, it\nisn't recreated:\n\n>>> system(\"rm output/QIDaFD7KLKQh0l5O6b8exdew3b0.txt\")\n>>> write(\"input/foo.txt\", \"foofoofoo\")\n>>> system(\"hashedassets -v maps/map.json input/*.txt input/*/*.txt output/\")\ncp 'input/foo.txt' 'output/NdbmnXyjdY2paFzlDw9aJzCKH9w.txt'\n\nUsing the same directory for SOURCE and DEST\n++++++++++++++++++++++++++++++++++++++++++++\n\nThis works as well:\n\n>>> system(\"hashedassets -v maps/samedir.json input/*.txt input/\")\ncp 'input/foo.txt' 'input/NdbmnXyjdY2paFzlDw9aJzCKH9w.txt'\n\nEven after the command is invoked a second time:\n\n>>> system(\"hashedassets -v maps/samedir.json input/*.txt input/\")\n\nNotice, that the mapfile does not contain the self-reference:\n\n>>> print(open(\"maps/samedir.json\").read())\n{\n  \"foo.txt\": \"NdbmnXyjdY2paFzlDw9aJzCKH9w.txt\"\n}\n\n>>> write(\"input/foo.txt\", \"barbarbar\")\n>>> system(\"hashedassets -v maps/samedir.json input/*.txt input/\")\nrm 'input/NdbmnXyjdY2paFzlDw9aJzCKH9w.txt'\ncp 'input/foo.txt' 'input/sWL19addVG2KRYJ02EDKXF4Oh8s.txt'", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://www.python.org/pypi/hashedassets", "keywords": null, "license": "Beerware", "maintainer": null, "maintainer_email": null, "name": "hashedassets", "package_url": "https://pypi.org/project/hashedassets/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/hashedassets/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://www.python.org/pypi/hashedassets"}, "release_url": "https://pypi.org/project/hashedassets/0.3.2/", "requires_dist": null, "requires_python": null, "summary": "Copies files to filenames based on their contents", "version": "0.3.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A command line tool that copies files to filenames based on their contents. It\nalso writes a map of what was renamed to what, so you can find your files.</p>\n<p>Main purpose of this is that you can <a href=\"http://stevesouders.com/hpws/rule-expires.php\" rel=\"nofollow\">add a far future Expires header to your\ncomponents</a>. Using hash based\nfilenames is a lot better than using your $VCS revision number, because users\nonly need to download files that didn\u2019t change.</p>\n<div id=\"table-of-contents\">\n<p>Table of Contents</p>\n<ul>\n<li><a href=\"#creating-some-source-files\" id=\"id1\" rel=\"nofollow\">Creating some source files</a></li>\n<li><a href=\"#simple-usage\" id=\"id2\" rel=\"nofollow\">Simple usage</a></li>\n<li><a href=\"#output-formats\" id=\"id3\" rel=\"nofollow\">Output formats</a><ul>\n<li><a href=\"#sed\" id=\"id4\" rel=\"nofollow\">Sed</a></li>\n<li><a href=\"#javascript\" id=\"id5\" rel=\"nofollow\">JavaScript</a></li>\n<li><a href=\"#json\" id=\"id6\" rel=\"nofollow\">JSON</a></li>\n<li><a href=\"#jsonp\" id=\"id7\" rel=\"nofollow\">JSONP</a></li>\n<li><a href=\"#scss\" id=\"id8\" rel=\"nofollow\">SCSS</a></li>\n<li><a href=\"#php\" id=\"id9\" rel=\"nofollow\">PHP</a></li>\n</ul>\n</li>\n<li><a href=\"#options\" id=\"id10\" rel=\"nofollow\">Options</a><ul>\n<li><a href=\"#specifying-the-type-with-t\" id=\"id11\" rel=\"nofollow\">Specifying the type with -t</a></li>\n<li><a href=\"#specifying-the-length-of-the-filename-with-l\" id=\"id12\" rel=\"nofollow\">Specifying the length of the filename with -l</a></li>\n<li><a href=\"#specifying-the-digest-with-d\" id=\"id13\" rel=\"nofollow\">Specifying the digest with -d</a></li>\n<li><a href=\"#keep-the-directory-structure-with-keep-dirs\" id=\"id14\" rel=\"nofollow\">Keep the directory structure with \u2013keep-dirs</a></li>\n<li><a href=\"#don-t-move-anything-with-map-only\" id=\"id15\" rel=\"nofollow\">Don\u2019t move anything with \u2013map-only</a></li>\n<li><a href=\"#don-t-map-anything-with-identity\" id=\"id16\" rel=\"nofollow\">Don\u2019t map anything with \u2013identity</a></li>\n<li><a href=\"#strip-file-extensions-with-strip-extensions\" id=\"id17\" rel=\"nofollow\">Strip file extensions with \u2013strip-extensions</a></li>\n<li><a href=\"#verbose-mode-with-v\" id=\"id18\" rel=\"nofollow\">Verbose mode with -v</a></li>\n<li><a href=\"#exclude-files-with-exclude\" id=\"id19\" rel=\"nofollow\">Exclude files with \u2013exclude</a></li>\n<li><a href=\"#relative-paths-with-reference\" id=\"id20\" rel=\"nofollow\">Relative paths with \u2013reference</a></li>\n</ul>\n</li>\n<li><a href=\"#advanced-usage\" id=\"id21\" rel=\"nofollow\">Advanced usage</a><ul>\n<li><a href=\"#writing-the-map-to-stdout\" id=\"id22\" rel=\"nofollow\">Writing the map to stdout</a></li>\n<li><a href=\"#re-using-a-map\" id=\"id23\" rel=\"nofollow\">Re-using a map</a></li>\n<li><a href=\"#using-the-same-directory-for-source-and-dest\" id=\"id24\" rel=\"nofollow\">Using the same directory for SOURCE and DEST</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"creating-some-source-files\">\n<h2><a href=\"#id1\" rel=\"nofollow\">Creating some source files</a></h2>\n<p>For this demo, we\u2019ll create a few directories, one for the maps to live, one\nfor the input files:</p>\n<pre>&gt;&gt;&gt; system(\"mkdir maps/\")\n&gt;&gt;&gt; system(\"mkdir -p input/subdir/2nd/\")\n</pre>\n<p>We also create files that live in a sub- and subsubdirectories:</p>\n<pre>&gt;&gt;&gt; write(\"input/foo.txt\", \"foo\")\n&gt;&gt;&gt; write(\"input/subdir/bar.txt\", \"bar\")\n&gt;&gt;&gt; write(\"input/subdir/2nd/baz.txt\", \"foofoofoo\")\n</pre>\n</div>\n<div id=\"simple-usage\">\n<h2><a href=\"#id2\" rel=\"nofollow\">Simple usage</a></h2>\n<pre>&gt;&gt;&gt; system(\"hashedassets -v maps/map.txt input/*.txt input/*/*.txt output/\")\nmkdir 'output'\ncp 'input/foo.txt' 'output/C-7Hteo_D9vJXQ3UfzxbwnXaijM.txt'\ncp 'input/subdir/bar.txt' 'output/Ys23Ag_5IOWqZCw9QGaVDdHwH00.txt'\n</pre>\n<pre>&gt;&gt;&gt; system(\"ls maps/\")\nmap.txt\n</pre>\n<pre>&gt;&gt;&gt; print(open(\"maps/map.txt\").read())\nfoo.txt: C-7Hteo_D9vJXQ3UfzxbwnXaijM.txt\nsubdir/bar.txt: Ys23Ag_5IOWqZCw9QGaVDdHwH00.txt\n&lt;BLANKLINE&gt;\n</pre>\n<pre>&gt;&gt;&gt; system(\"ls output/\")\nC-7Hteo_D9vJXQ3UfzxbwnXaijM.txt\nYs23Ag_5IOWqZCw9QGaVDdHwH00.txt\n</pre>\n<p>Modification time is also preserved:</p>\n<pre>&gt;&gt;&gt; old_stat = os.stat(\"input/foo.txt\")\n&gt;&gt;&gt; new_stat = os.stat(\"output/C-7Hteo_D9vJXQ3UfzxbwnXaijM.txt\")\n&gt;&gt;&gt; [(getattr(old_stat, prop) == getattr(new_stat, prop))\n...   for prop in ('st_mtime', 'st_atime', 'st_ino',)]\n[True, True, False]\n</pre>\n<p>If you specify a directory as source, all files and subdirectories will be processed:</p>\n<pre>&gt;&gt;&gt; system(\"hashedassets -v maps/dirmap.txt input/ output/\")\ncp 'input/foo.txt' 'output/C-7Hteo_D9vJXQ3UfzxbwnXaijM.txt'\ncp 'input/subdir/bar.txt' 'output/Ys23Ag_5IOWqZCw9QGaVDdHwH00.txt'\ncp 'input/subdir/2nd/baz.txt' 'output/NdbmnXyjdY2paFzlDw9aJzCKH9w.txt'\n</pre>\n<pre>&gt;&gt;&gt; system(\"rm output/NdbmnXyjdY2paFzlDw9aJzCKH9w.txt\")\n</pre>\n</div>\n<div id=\"output-formats\">\n<h2><a href=\"#id3\" rel=\"nofollow\">Output formats</a></h2>\n<p>We can easily do this with multiple formats:</p>\n<div id=\"sed\">\n<h3><a href=\"#id4\" rel=\"nofollow\">Sed</a></h3>\n<p>This generates a sed script that does the replacements for us:</p>\n<pre>&gt;&gt;&gt; system(\"hashedassets -v -n my_callback maps/map.sed input/*.txt input/*/*.txt output/\")\ncp 'input/foo.txt' 'output/C-7Hteo_D9vJXQ3UfzxbwnXaijM.txt'\ncp 'input/subdir/bar.txt' 'output/Ys23Ag_5IOWqZCw9QGaVDdHwH00.txt'\n</pre>\n<pre>&gt;&gt;&gt; print(open(\"maps/map.sed\").read())\ns/foo\\.txt/C-7Hteo_D9vJXQ3UfzxbwnXaijM\\.txt/g\ns/subdir\\/bar\\.txt/Ys23Ag_5IOWqZCw9QGaVDdHwH00\\.txt/g\n&lt;BLANKLINE&gt;\n</pre>\n<p>We should be able to use this with sed on this file:</p>\n<pre>&gt;&gt;&gt; write(\"replaceme.html\", \"&lt;a href=foo.txt&gt;bar&lt;/a&gt;\")\n</pre>\n<p>The script is then applied like this:</p>\n<pre>&gt;&gt;&gt; system(\"sed -f maps/map.sed replaceme.html\")\n&lt;a href=C-7Hteo_D9vJXQ3UfzxbwnXaijM.txt&gt;bar&lt;/a&gt;\n</pre>\n<p>Note \u2018.\u2019 is not treated as wildcard, so the following does not work</p>\n<pre>&gt;&gt;&gt; write(\"replaceme2.html\", \"&lt;a href=fooAtxt&gt;bar&lt;/a&gt;\")\n&gt;&gt;&gt; system(\"sed -f maps/map.sed replaceme2.html\")\n&lt;a href=fooAtxt&gt;bar&lt;/a&gt;\n</pre>\n</div>\n<div id=\"javascript\">\n<h3><a href=\"#id5\" rel=\"nofollow\">JavaScript</a></h3>\n<pre>&gt;&gt;&gt; system(\"hashedassets -v -n my_callback maps/map.js input/*.txt input/*/*.txt output/\")\ncp 'input/foo.txt' 'output/C-7Hteo_D9vJXQ3UfzxbwnXaijM.txt'\ncp 'input/subdir/bar.txt' 'output/Ys23Ag_5IOWqZCw9QGaVDdHwH00.txt'\n</pre>\n<pre>&gt;&gt;&gt; print(open(\"maps/map.js\").read())\nvar my_callback = {\n  \"foo.txt\": \"C-7Hteo_D9vJXQ3UfzxbwnXaijM.txt\",\n  \"subdir/bar.txt\": \"Ys23Ag_5IOWqZCw9QGaVDdHwH00.txt\"\n};\n</pre>\n</div>\n<div id=\"json\">\n<h3><a href=\"#id6\" rel=\"nofollow\">JSON</a></h3>\n<pre>&gt;&gt;&gt; system(\"hashedassets -v -n my_callback maps/map.json input/*.txt input/*/*.txt output/\")\ncp 'input/foo.txt' 'output/C-7Hteo_D9vJXQ3UfzxbwnXaijM.txt'\ncp 'input/subdir/bar.txt' 'output/Ys23Ag_5IOWqZCw9QGaVDdHwH00.txt'\n</pre>\n<pre>&gt;&gt;&gt; print(open(\"maps/map.json\").read())\n{\n  \"foo.txt\": \"C-7Hteo_D9vJXQ3UfzxbwnXaijM.txt\",\n  \"subdir/bar.txt\": \"Ys23Ag_5IOWqZCw9QGaVDdHwH00.txt\"\n}\n</pre>\n</div>\n<div id=\"jsonp\">\n<h3><a href=\"#id7\" rel=\"nofollow\">JSONP</a></h3>\n<pre>&gt;&gt;&gt; system(\"hashedassets -v -n my_callback maps/map.jsonp input/*.txt input/*/*.txt output/\")\ncp 'input/foo.txt' 'output/C-7Hteo_D9vJXQ3UfzxbwnXaijM.txt'\ncp 'input/subdir/bar.txt' 'output/Ys23Ag_5IOWqZCw9QGaVDdHwH00.txt'\n</pre>\n<pre>&gt;&gt;&gt; print(open(\"maps/map.jsonp\").read())\nmy_callback({\n  \"foo.txt\": \"C-7Hteo_D9vJXQ3UfzxbwnXaijM.txt\",\n  \"subdir/bar.txt\": \"Ys23Ag_5IOWqZCw9QGaVDdHwH00.txt\"\n});\n</pre>\n</div>\n<div id=\"scss\">\n<h3><a href=\"#id8\" rel=\"nofollow\">SCSS</a></h3>\n<p><a href=\"http://sass-lang.com/\" rel=\"nofollow\">Sass</a> (\u201cSyntactically Awesome Stylesheets\u201d) is a meta language on top of CSS.</p>\n<pre>&gt;&gt;&gt; system(\"hashedassets -v -n my_callback maps/map.scss input/*.txt input/*/*.txt output/\")\ncp 'input/foo.txt' 'output/C-7Hteo_D9vJXQ3UfzxbwnXaijM.txt'\ncp 'input/subdir/bar.txt' 'output/Ys23Ag_5IOWqZCw9QGaVDdHwH00.txt'\n</pre>\n<pre>&gt;&gt;&gt; print(open(\"maps/map.scss\").read())\n@mixin my_callback($directive, $path) {\n         @if $path == \"foo.txt\" { #{$directive}: url(\"C-7Hteo_D9vJXQ3UfzxbwnXaijM.txt\"); }\n    @else if $path == \"subdir/bar.txt\" { #{$directive}: url(\"Ys23Ag_5IOWqZCw9QGaVDdHwH00.txt\"); }\n    @else {\n      @warn \"Did not find \"#{$path}\" in list of assets\";\n      #{$directive}: url($path);\n    }\n}\n</pre>\n</div>\n<div id=\"php\">\n<h3><a href=\"#id9\" rel=\"nofollow\">PHP</a></h3>\n<pre>&gt;&gt;&gt; system(\"hashedassets -v -n my_callback maps/map.php input/*.txt input/*/*.txt output/\")\ncp 'input/foo.txt' 'output/C-7Hteo_D9vJXQ3UfzxbwnXaijM.txt'\ncp 'input/subdir/bar.txt' 'output/Ys23Ag_5IOWqZCw9QGaVDdHwH00.txt'\n</pre>\n<pre>&gt;&gt;&gt; print(open(\"maps/map.php\").read())\n$my_callback = array(\n  \"foo.txt\" =&gt; \"C-7Hteo_D9vJXQ3UfzxbwnXaijM.txt\",\n  \"subdir/bar.txt\" =&gt; \"Ys23Ag_5IOWqZCw9QGaVDdHwH00.txt\",\n)\n</pre>\n</div>\n</div>\n<div id=\"options\">\n<h2><a href=\"#id10\" rel=\"nofollow\">Options</a></h2>\n<div id=\"specifying-the-type-with-t\">\n<h3><a href=\"#id11\" rel=\"nofollow\">Specifying the type with -t</a></h3>\n<p>The type of the map is guessed from the filename, but you can specify it as\nwell:</p>\n<pre>&gt;&gt;&gt; system(\"hashedassets -v -t js cantguessmaptype input/*.txt input/*/*.txt output/\")\ncp 'input/foo.txt' 'output/C-7Hteo_D9vJXQ3UfzxbwnXaijM.txt'\ncp 'input/subdir/bar.txt' 'output/Ys23Ag_5IOWqZCw9QGaVDdHwH00.txt'\n</pre>\n</div>\n<div id=\"specifying-the-length-of-the-filename-with-l\">\n<h3><a href=\"#id12\" rel=\"nofollow\">Specifying the length of the filename with -l</a></h3>\n<pre>&gt;&gt;&gt; system(\"hashedassets -v -l 10 maps/shortmap.json input/*.txt input/*/*.txt output/\")\ncp 'input/foo.txt' 'output/C-7Hteo_D9.txt'\ncp 'input/subdir/bar.txt' 'output/Ys23Ag_5IO.txt'\n</pre>\n<pre>&gt;&gt;&gt; system(\"rm output/C-7Hteo_D9.txt output/Ys23Ag_5IO.txt\")\n</pre>\n</div>\n<div id=\"specifying-the-digest-with-d\">\n<h3><a href=\"#id13\" rel=\"nofollow\">Specifying the digest with -d</a></h3>\n<p>Hashedassets uses sha1 by default to hash the input files. You can change that\nwith the -d command line parameter, e.g. by specifying -d md5 to use the md5\ndigest method.</p>\n<pre>&gt;&gt;&gt; system(\"hashedassets -v -d md5 maps/md5map.json input/*.txt input/*/*.txt output/\")\ncp 'input/foo.txt' 'output/rL0Y20zC-Fzt72VPzMSk2A.txt'\ncp 'input/subdir/bar.txt' 'output/N7UdGUp1E-RbVvZSTy1R8g.txt'\n</pre>\n<pre>&gt;&gt;&gt; system(\"rm output/rL0Y20zC-Fzt72VPzMSk2A.txt output/N7UdGUp1E-RbVvZSTy1R8g.txt\")\n</pre>\n</div>\n<div id=\"keep-the-directory-structure-with-keep-dirs\">\n<h3><a href=\"#id14\" rel=\"nofollow\">Keep the directory structure with \u2013keep-dirs</a></h3>\n<p>By default hashedassets copies all output files into the root level of the\noutput dir. You can turn this off, with the \u2018\u2019\u2013keep-dirs\u2019\u2019 option:</p>\n<pre>&gt;&gt;&gt; system(\"hashedassets -v --keep-dirs maps/preserve.json input/*.txt input/*/*.txt input/*/*/*.txt output/\")\ncp 'input/foo.txt' 'output/C-7Hteo_D9vJXQ3UfzxbwnXaijM.txt'\nmkdir -p output/subdir\ncp 'input/subdir/bar.txt' 'output/subdir/Ys23Ag_5IOWqZCw9QGaVDdHwH00.txt'\nmkdir -p output/subdir/2nd\ncp 'input/subdir/2nd/baz.txt' 'output/subdir/2nd/NdbmnXyjdY2paFzlDw9aJzCKH9w.txt'\n</pre>\n<pre>&gt;&gt;&gt; system(\"rm -r output/subdir/\")\n</pre>\n</div>\n<div id=\"don-t-move-anything-with-map-only\">\n<h3><a href=\"#id15\" rel=\"nofollow\">Don\u2019t move anything with \u2013map-only</a></h3>\n<p>If you specify \u2018\u2019\u2013map-only\u2019\u2019, the program will create a map but it won\u2019t move\nany files. This is useful, if you want to use the hashed name as part of the\npath (\u2018\u2019\u2019<a href=\"http://static.example.com/aYs23A/subdir/bar.txt\" rel=\"nofollow\">http://static.example.com/aYs23A/subdir/bar.txt</a>\u2019\u2019\u2019) that is dropped by\nthe webserver during url rewriting.</p>\n<pre>&gt;&gt;&gt; system(\"hashedassets -v --map-only maps/maponly.txt input/*.txt\")\n&gt;&gt;&gt; print(open('maps/maponly.txt').read())\nfoo.txt: C-7Hteo_D9vJXQ3UfzxbwnXaijM.txt\n&lt;BLANKLINE&gt;\n</pre>\n</div>\n<div id=\"don-t-map-anything-with-identity\">\n<h3><a href=\"#id16\" rel=\"nofollow\">Don\u2019t map anything with \u2013identity</a></h3>\n<p>If you specify \u2018\u2019\u2013identity\u2019\u2019 the program will create a map that maps every\nfile to itself, similar to how the <a href=\"http://en.wikipedia.org/wiki/Identity_function\" rel=\"nofollow\">identity function</a> is defined. You can use\nthis if you want to disable hashedassets temporarily, but don\u2019t want to alter\nyour build script heavily:</p>\n<pre>&gt;&gt;&gt; system(\"hashedassets -v --identity maps/identitymap.json input/*.txt input/*/*.txt output/\")\ncp 'input/foo.txt' 'output/foo.txt'\nmkdir -p output/subdir\ncp 'input/subdir/bar.txt' 'output/subdir/bar.txt'\n</pre>\n<pre>&gt;&gt;&gt; print(open('maps/identitymap.json').read())\n{\n  \"foo.txt\": \"foo.txt\",\n  \"subdir/bar.txt\": \"subdir/bar.txt\"\n}\n</pre>\n<p>If you switch \u2013identity off, all identity files get deleted:</p>\n<pre>&gt;&gt;&gt; system(\"hashedassets -v maps/identitymap.json input/*.txt input/*/*.txt output/\")\nrm 'output/foo.txt'\ncp 'input/foo.txt' 'output/C-7Hteo_D9vJXQ3UfzxbwnXaijM.txt'\nrm 'output/subdir/bar.txt'\ncp 'input/subdir/bar.txt' 'output/Ys23Ag_5IOWqZCw9QGaVDdHwH00.txt'\n</pre>\n<pre>&gt;&gt;&gt; print(open('maps/identitymap.json').read())\n{\n  \"foo.txt\": \"C-7Hteo_D9vJXQ3UfzxbwnXaijM.txt\",\n  \"subdir/bar.txt\": \"Ys23Ag_5IOWqZCw9QGaVDdHwH00.txt\"\n}\n</pre>\n<pre>&gt;&gt;&gt; system(\"rm -r output/subdir/\")\n</pre>\n</div>\n<div id=\"strip-file-extensions-with-strip-extensions\">\n<h3><a href=\"#id17\" rel=\"nofollow\">Strip file extensions with \u2013strip-extensions</a></h3>\n<p>If you want to strip the file extensions of the resulting hashed files, this\noption is for you! This is particularly useful in combination with the\n\u2018\u2019\u2013map-only\u2019\u2019 option with the hashed name becoming part of the path of the url.</p>\n<pre>&gt;&gt;&gt; system(\"hashedassets -v --strip-extensions maps/noextensions.json input/*.txt input/*/*.txt output/\")\ncp 'input/foo.txt' 'output/C-7Hteo_D9vJXQ3UfzxbwnXaijM'\ncp 'input/subdir/bar.txt' 'output/Ys23Ag_5IOWqZCw9QGaVDdHwH00'\n</pre>\n<pre>&gt;&gt;&gt; print(open('maps/noextensions.json').read())\n{\n  \"foo.txt\": \"C-7Hteo_D9vJXQ3UfzxbwnXaijM\",\n  \"subdir/bar.txt\": \"Ys23Ag_5IOWqZCw9QGaVDdHwH00\"\n}\n</pre>\n<pre>&gt;&gt;&gt; system(\"rm -r output/C-7Hteo_D9vJXQ3UfzxbwnXaijM output/Ys23Ag_5IOWqZCw9QGaVDdHwH00\")\n</pre>\n</div>\n<div id=\"verbose-mode-with-v\">\n<h3><a href=\"#id18\" rel=\"nofollow\">Verbose mode with -v</a></h3>\n<p>Usually the program does not print anything if it everything works as expected:</p>\n<pre>&gt;&gt;&gt; system(\"hashedassets maps/map2.txt input/*.txt input/*/*.txt output/\")\n</pre>\n<p>You can tell the program to log more information (using <tt><span class=\"pre\">-v</span></tt>), optionally\nmultiple times to see what\u2019s going on inside:</p>\n<pre>&gt;&gt;&gt; system(\"hashedassets -v maps/map3.txt input/*.txt input/*/*.txt output/\")\ncp 'input/foo.txt' 'output/C-7Hteo_D9vJXQ3UfzxbwnXaijM.txt'\ncp 'input/subdir/bar.txt' 'output/Ys23Ag_5IOWqZCw9QGaVDdHwH00.txt'\n</pre>\n</div>\n<div id=\"exclude-files-with-exclude\">\n<h3><a href=\"#id19\" rel=\"nofollow\">Exclude files with \u2013exclude</a></h3>\n<p>You can exclude dirs and files from being hashed, using the <tt><span class=\"pre\">--exclude</span></tt>\noption, both using patterns and directories:</p>\n<pre>&gt;&gt;&gt; system(\"hashedassets -v maps/xmap.txt --exclude input/*/2nd input/ output/\")\ncp 'input/foo.txt' 'output/C-7Hteo_D9vJXQ3UfzxbwnXaijM.txt'\ncp 'input/subdir/bar.txt' 'output/Ys23Ag_5IOWqZCw9QGaVDdHwH00.txt'\n</pre>\n<pre>&gt;&gt;&gt; system(\"hashedassets -v maps/xmap2.txt --exclude input/subdir/ input/ output/\")\ncp 'input/foo.txt' 'output/C-7Hteo_D9vJXQ3UfzxbwnXaijM.txt'\n</pre>\n<pre>&gt;&gt;&gt; system(\"hashedassets -v maps/xmap3.txt --exclude input/subdir/2nd/baz.txt input/ output/\")\ncp 'input/foo.txt' 'output/C-7Hteo_D9vJXQ3UfzxbwnXaijM.txt'\ncp 'input/subdir/bar.txt' 'output/Ys23Ag_5IOWqZCw9QGaVDdHwH00.txt'\n</pre>\n</div>\n<div id=\"relative-paths-with-reference\">\n<h3><a href=\"#id20\" rel=\"nofollow\">Relative paths with \u2013reference</a></h3>\n<p>If you need all paths relative to a specific file or directory, <tt><span class=\"pre\">--reference</span></tt> is your friend:</p>\n<pre>&gt;&gt;&gt; system(\"hashedassets -v --keep-dirs --reference=output/subdir/style.css maps/refmap.txt input/ output/\")\ncp 'input/foo.txt' 'output/C-7Hteo_D9vJXQ3UfzxbwnXaijM.txt'\nmkdir -p output/subdir\ncp 'input/subdir/bar.txt' 'output/subdir/Ys23Ag_5IOWqZCw9QGaVDdHwH00.txt'\nmkdir -p output/subdir/2nd\ncp 'input/subdir/2nd/baz.txt' 'output/subdir/2nd/NdbmnXyjdY2paFzlDw9aJzCKH9w.txt'\n</pre>\n<pre>&gt;&gt;&gt; print(open('maps/refmap.txt').read())\n../foo.txt: ../C-7Hteo_D9vJXQ3UfzxbwnXaijM.txt\nbar.txt: Ys23Ag_5IOWqZCw9QGaVDdHwH00.txt\n2nd/baz.txt: 2nd/NdbmnXyjdY2paFzlDw9aJzCKH9w.txt\n</pre>\n<p>If we execute this again, there is no work to do:</p>\n<pre>&gt;&gt;&gt; system(\"hashedassets -v --keep-dirs --reference=output/subdir/ maps/refmap.txt input/ output/\")\n&gt;&gt;&gt; system(\"rm -r output/subdir/\")\n</pre>\n</div>\n</div>\n<div id=\"advanced-usage\">\n<h2><a href=\"#id21\" rel=\"nofollow\">Advanced usage</a></h2>\n<div id=\"writing-the-map-to-stdout\">\n<h3><a href=\"#id22\" rel=\"nofollow\">Writing the map to stdout</a></h3>\n<pre>&gt;&gt;&gt; system(\"hashedassets --map-type=txt - input/*.txt input/*/*.txt output/\")\nfoo.txt: C-7Hteo_D9vJXQ3UfzxbwnXaijM.txt\nsubdir/bar.txt: Ys23Ag_5IOWqZCw9QGaVDdHwH00.txt\n&lt;BLANKLINE&gt;\n</pre>\n</div>\n<div id=\"re-using-a-map\">\n<h3><a href=\"#id23\" rel=\"nofollow\">Re-using a map</a></h3>\n<p>The program reads in maps it created in a prior run to only copy files that\nhaven\u2019t changed since. So, the following commands do not copy any files:</p>\n<pre>&gt;&gt;&gt; system(\"hashedassets -v maps/map.scss input/*.txt input/*/*.txt output/\")\n&gt;&gt;&gt; system(\"hashedassets -v maps/map.php input/*.txt input/*/*.txt output/\")\n&gt;&gt;&gt; system(\"hashedassets -v maps/map.js input/*.txt input/*/*.txt output/\")\n&gt;&gt;&gt; system(\"hashedassets -v maps/map.json input/*.txt input/*/*.txt output/\")\n&gt;&gt;&gt; system(\"hashedassets -v maps/map.sed input/*.txt input/*/*.txt output/\")\n&gt;&gt;&gt; system(\"hashedassets -v maps/map.jsonp input/*.txt input/*/*.txt output/\")\n&gt;&gt;&gt; system(\"hashedassets -v maps/map.txt input/*.txt input/*/*.txt output/\")\n</pre>\n<p>If we touch one of the input files in between, the file will be read but not\ncopied because the hashsum is the same:</p>\n<pre>&gt;&gt;&gt; system('touch -t200504072214.12 input/foo.txt')\n&gt;&gt;&gt; system(\"hashedassets -v maps/map.json input/*.txt input/*/*.txt output/\")\n</pre>\n<p>If we change the file\u2019s content, it will get a new name:</p>\n<pre>&gt;&gt;&gt; write(\"input/foo.txt\", \"foofoo\")\n</pre>\n<p>Then try again:</p>\n<pre>&gt;&gt;&gt; system(\"hashedassets -v maps/map.json input/*.txt input/*/*.txt output/\")\nrm 'output/C-7Hteo_D9vJXQ3UfzxbwnXaijM.txt'\ncp 'input/foo.txt' 'output/QIDaFD7KLKQh0l5O6b8exdew3b0.txt'\n</pre>\n<p>If you then list the files in the directory, note that the old file\n\u2018\u2019output/C-7Hteo_D9vJXQ3UfzxbwnXaijM.txt\u2019\u2019 is gone:</p>\n<pre>&gt;&gt;&gt; system(\"ls output/\")\nQIDaFD7KLKQh0l5O6b8exdew3b0.txt\nYs23Ag_5IOWqZCw9QGaVDdHwH00.txt\n</pre>\n<p>If we remove one of the created files, it gets recreated:</p>\n<pre>&gt;&gt;&gt; system(\"rm output/Ys23Ag_5IOWqZCw9QGaVDdHwH00.txt\")\n&gt;&gt;&gt; system(\"hashedassets -v maps/map.json input/*.txt input/*/*.txt output/\")\ncp 'input/subdir/bar.txt' 'output/Ys23Ag_5IOWqZCw9QGaVDdHwH00.txt'\n</pre>\n<pre>&gt;&gt;&gt; system(\"ls output/\")\nQIDaFD7KLKQh0l5O6b8exdew3b0.txt\nYs23Ag_5IOWqZCw9QGaVDdHwH00.txt\n</pre>\n<p>If a file that is about to be removed because the original content changed, it\nisn\u2019t recreated:</p>\n<pre>&gt;&gt;&gt; system(\"rm output/QIDaFD7KLKQh0l5O6b8exdew3b0.txt\")\n&gt;&gt;&gt; write(\"input/foo.txt\", \"foofoofoo\")\n&gt;&gt;&gt; system(\"hashedassets -v maps/map.json input/*.txt input/*/*.txt output/\")\ncp 'input/foo.txt' 'output/NdbmnXyjdY2paFzlDw9aJzCKH9w.txt'\n</pre>\n</div>\n<div id=\"using-the-same-directory-for-source-and-dest\">\n<h3><a href=\"#id24\" rel=\"nofollow\">Using the same directory for SOURCE and DEST</a></h3>\n<p>This works as well:</p>\n<pre>&gt;&gt;&gt; system(\"hashedassets -v maps/samedir.json input/*.txt input/\")\ncp 'input/foo.txt' 'input/NdbmnXyjdY2paFzlDw9aJzCKH9w.txt'\n</pre>\n<p>Even after the command is invoked a second time:</p>\n<pre>&gt;&gt;&gt; system(\"hashedassets -v maps/samedir.json input/*.txt input/\")\n</pre>\n<p>Notice, that the mapfile does not contain the self-reference:</p>\n<pre>&gt;&gt;&gt; print(open(\"maps/samedir.json\").read())\n{\n  \"foo.txt\": \"NdbmnXyjdY2paFzlDw9aJzCKH9w.txt\"\n}\n</pre>\n<pre>&gt;&gt;&gt; write(\"input/foo.txt\", \"barbarbar\")\n&gt;&gt;&gt; system(\"hashedassets -v maps/samedir.json input/*.txt input/\")\nrm 'input/NdbmnXyjdY2paFzlDw9aJzCKH9w.txt'\ncp 'input/foo.txt' 'input/sWL19addVG2KRYJ02EDKXF4Oh8s.txt'\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 755530, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "536ec6c923a9a20f53e8e9831152ff8f", "sha256": "90901685bd40ae4ae2dd41b2e0159d7f4f4fbaa8c7ffdaa24876161f32d6ad9d"}, "downloads": -1, "filename": "hashedassets-0.2.0.tar.gz", "has_sig": false, "md5_digest": "536ec6c923a9a20f53e8e9831152ff8f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7730, "upload_time": "2010-08-07T13:15:44", "upload_time_iso_8601": "2010-08-07T13:15:44.365810Z", "url": "https://files.pythonhosted.org/packages/6d/52/269b3094297b55f9c1b313478a9150e68eea3014260a4277be2221cfa3bb/hashedassets-0.2.0.tar.gz", "yanked": false}], "0.2.0a4": [{"comment_text": "", "digests": {"md5": "3fd1de4922dcffea2a21d95b98b45f23", "sha256": "b0e1d876801a03aaa85dbf1f3e7b5e66d673051b16e84fc31c39eab6c5ad19cf"}, "downloads": -1, "filename": "hashedassets-0.2.0a4.tar.gz", "has_sig": false, "md5_digest": "3fd1de4922dcffea2a21d95b98b45f23", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7728, "upload_time": "2010-08-03T22:25:50", "upload_time_iso_8601": "2010-08-03T22:25:50.204477Z", "url": "https://files.pythonhosted.org/packages/02/c5/6c4986a2f32c7a30abf5114f03833ccb7f8cc8c243a0e139a8e2c4db9c52/hashedassets-0.2.0a4.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "12958814647bd5b819dbf54adbe8f8f2", "sha256": "ae481f44257b4430aa383e269f846131eb29f46ae17837b56d38d20d03b50bc4"}, "downloads": -1, "filename": "hashedassets-0.2.1.tar.gz", "has_sig": false, "md5_digest": "12958814647bd5b819dbf54adbe8f8f2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9872, "upload_time": "2010-08-11T14:26:36", "upload_time_iso_8601": "2010-08-11T14:26:36.335242Z", "url": "https://files.pythonhosted.org/packages/6d/2e/33ac3cf447a069f47c730bcd5e96b74f0082b9f583d95874df0716245dca/hashedassets-0.2.1.tar.gz", "yanked": false}], "0.2.1dev0": [], "0.2.2": [{"comment_text": "", "digests": {"md5": "41f1f321e35be8fc72c855b0993fd97b", "sha256": "a5274e98ecaeb0b7db01e3cad38980e6c7f3f166e269bc39629c66dd7c8d4767"}, "downloads": -1, "filename": "hashedassets-0.2.2.tar.gz", "has_sig": false, "md5_digest": "41f1f321e35be8fc72c855b0993fd97b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12024, "upload_time": "2010-11-19T13:05:06", "upload_time_iso_8601": "2010-11-19T13:05:06.383791Z", "url": "https://files.pythonhosted.org/packages/ac/d4/86444bd15d45ebeb4a3bc1de662ecb78c97b851911ebfdfd775c4a2e384a/hashedassets-0.2.2.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "8506a7134eb61cefd7c0e44af05bce89", "sha256": "2831a32a28b3cc7285d37083a71eb92f87688508387165a68ea93257e5c150d2"}, "downloads": -1, "filename": "hashedassets-0.3.0.tar.gz", "has_sig": false, "md5_digest": "8506a7134eb61cefd7c0e44af05bce89", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15582, "upload_time": "2011-01-05T08:37:46", "upload_time_iso_8601": "2011-01-05T08:37:46.628639Z", "url": "https://files.pythonhosted.org/packages/55/cc/effa62de74d338266019bec75415a5a88077b40faf68ea7bfc273ab12049/hashedassets-0.3.0.tar.gz", "yanked": false}], "0.3.0b1": [{"comment_text": "", "digests": {"md5": "fcf779187f67d9a32026c268ab2bde9b", "sha256": "6d72823868aec187612fe5d4fa8ad9c346de0870b8a1fb3257392e92564c9f99"}, "downloads": -1, "filename": "hashedassets-0.3.0b1.tar.gz", "has_sig": false, "md5_digest": "fcf779187f67d9a32026c268ab2bde9b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13668, "upload_time": "2010-12-29T19:06:35", "upload_time_iso_8601": "2010-12-29T19:06:35.888812Z", "url": "https://files.pythonhosted.org/packages/18/35/32e33580574cf420f2f1e64c618b5fee6901cee292a3ad99c0d2a8998159/hashedassets-0.3.0b1.tar.gz", "yanked": false}], "0.3.0b3": [{"comment_text": "", "digests": {"md5": "c0b48ab5934d15a21db13b970286730a", "sha256": "18d2244d74e6462f0ce879cbbc417c239d52d8e7f4cee1f0f6abe650d2ecabb5"}, "downloads": -1, "filename": "hashedassets-0.3.0b3.tar.gz", "has_sig": false, "md5_digest": "c0b48ab5934d15a21db13b970286730a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14770, "upload_time": "2010-12-29T21:32:40", "upload_time_iso_8601": "2010-12-29T21:32:40.212637Z", "url": "https://files.pythonhosted.org/packages/a4/8e/8097cedb89219a7b8a4436ed375117be6a96d6ef4a28beba570ca362f3e4/hashedassets-0.3.0b3.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "f9c339e03fb78ce163762b3b6aa5aeaa", "sha256": "788d23e8f2d9761f94111e6f9bbefdd6046bd5bf0525df52f275471dd066c564"}, "downloads": -1, "filename": "hashedassets-0.3.1.tar.gz", "has_sig": false, "md5_digest": "f9c339e03fb78ce163762b3b6aa5aeaa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16118, "upload_time": "2011-01-24T11:28:24", "upload_time_iso_8601": "2011-01-24T11:28:24.021093Z", "url": "https://files.pythonhosted.org/packages/11/c3/2f061b5a07484403cb2d1d1a50066689d34fc78c17541f3ae848901c8579/hashedassets-0.3.1.tar.gz", "yanked": false}], "0.3.1.1": [{"comment_text": "", "digests": {"md5": "b2e218ab1e31175da32b24f7270d5590", "sha256": "766925139e6dc4b68cc3f5a7aadc13ddb276f21159c3de314aa4d5505aa6c918"}, "downloads": -1, "filename": "hashedassets-0.3.1.1.tar.gz", "has_sig": false, "md5_digest": "b2e218ab1e31175da32b24f7270d5590", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16382, "upload_time": "2011-02-06T22:40:56", "upload_time_iso_8601": "2011-02-06T22:40:56.417405Z", "url": "https://files.pythonhosted.org/packages/1a/88/29cf67351f1b1c947f72f5db2bf11d1d066e5bb5d7eaad5b5f8ec9f52ece/hashedassets-0.3.1.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "cd32122a417f598e33fa421dd56b9c6c", "sha256": "9acf37f13c6fb7a380927db74c80722709a2ea915af3728c56d82845ce7dcfd5"}, "downloads": -1, "filename": "hashedassets-0.3.2.tar.gz", "has_sig": false, "md5_digest": "cd32122a417f598e33fa421dd56b9c6c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19758, "upload_time": "2011-02-26T18:05:01", "upload_time_iso_8601": "2011-02-26T18:05:01.515328Z", "url": "https://files.pythonhosted.org/packages/53/63/1876de859777b7fc0b983b96129e37cc8e0065df1a62fb0fde0d03788683/hashedassets-0.3.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "cd32122a417f598e33fa421dd56b9c6c", "sha256": "9acf37f13c6fb7a380927db74c80722709a2ea915af3728c56d82845ce7dcfd5"}, "downloads": -1, "filename": "hashedassets-0.3.2.tar.gz", "has_sig": false, "md5_digest": "cd32122a417f598e33fa421dd56b9c6c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19758, "upload_time": "2011-02-26T18:05:01", "upload_time_iso_8601": "2011-02-26T18:05:01.515328Z", "url": "https://files.pythonhosted.org/packages/53/63/1876de859777b7fc0b983b96129e37cc8e0065df1a62fb0fde0d03788683/hashedassets-0.3.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:21 2020"}