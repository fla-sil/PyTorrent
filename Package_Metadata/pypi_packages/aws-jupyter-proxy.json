{"info": {"author": "Amazon Web Services", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta"], "description": "# AWS Jupyter Proxy\n\n![CodeBuild](https://codebuild.us-west-2.amazonaws.com/badges?uuid=eyJlbmNyeXB0ZWREYXRhIjoiZGVqcG5MVEZZYkd2aFBBZnlSZ1R6d0s3U1JKR3pwOWR0UGJTdEp5bW9QWlVlMmdnTEJlenZUdVVkQjNzcVViMmlLQ1NGNS9yLzJEWkRpMzF5WUxnZTJVPSIsIml2UGFyYW1ldGVyU3BlYyI6Ikw5ck5kZk50ai9UU2pYanMiLCJtYXRlcmlhbFNldFNlcmlhbCI6MX0%3D&branch=master)\n![Version](https://img.shields.io/pypi/v/aws_jupyter_proxy.svg)\n![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)\n\nA Jupyter server extension to proxy requests with AWS SigV4 authentication.\n\n## Overview\n\nThis server extension enables the usage of the [AWS JavaScript/TypeScript SDK](https://github.com/aws/aws-sdk-js) without having to export AWS credentials to the browser.\n\nA single `/awsproxy` endpoint is added on the Jupyter server which receives incoming requests from the browser, uses the credentials on the server to add [SigV4](https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html) authentication to the request, and then proxies the request to the actual AWS service endpoint.\n\nAll requests are proxied back-and-forth as-is, e.g., a 4xx status code from the AWS service will be relayed back as-is to the browser.\n\nNOTE: This project is still under active development\n\n## Install\n\nInstalling the package from PyPI will install and enable the server extension on the Jupyter server.\n\n```bash\npip install aws-jupyter-proxy\n```\n\n## Usage\n\nUsing this requries no additional dependencies in the client-side code. Just use the regular AWS JavaScript/TypeScript SDK methods and add any dummy credentials and change the endpoint to the `/awsproxy` endpoint.\n\n```typescript\n    import * as AWS from 'aws-sdk';\n    import SageMaker from 'aws-sdk/clients/sagemaker';\n\n\n    // These credentials are *not* used for the actual AWS service call but you have\n    // to provide any dummy credentials (Not real ones!)\n    AWS.config.secretAccessKey = 'IGNOREDIGNORE/IGNOREDIGNOREDIGNOREDIGNOR';\n    AWS.config.accessKeyId = 'IGNOREDIGNO';\n\n    // Change the endpoint in the client to the \"awsproxy\" endpoint on the Jupyter server.\n    const proxyEndpoint = 'http://localhost:8888/awsproxy';\n\n    const sageMakerClient = new SageMaker({\n        region: 'us-west-2',\n        endpoint: proxyEndpoint,\n    });\n\n    // Make the API call!\n    await proxySageMaker\n        .listNotebookInstances({\n            NameContains: 'jaipreet'\n        })\n        .promise();\n```\n\n### Usage with S3\n\nFor S3, use the `s3ForcePathStyle` parameter during the client initialization\n\n```typescript\n    import S3 from 'aws-sdk/clients/s3';\n\n    const s3Client = new S3({\n        region: 'us-west-2',\n        endpoint: proxyEndpoint,\n        s3ForcePathStyle: true\n    });\n\n    await s3Client.getObject({\n        Bucket: 'my-bucket',\n        Key: 'my-object'\n    }).promise();\n```\n\n## Development\n\nInstall all dev dependencies\n\n```bash\npip install -e \".[dev]\"\njupyter serverextension enable --py aws_jupyter_proxy\n```\n\nRun unit tests using pytest\n\n```bash\npytest tests/unit\n```\n\n## License\n\nThis library is licensed under the Apache 2.0 License.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/aws/aws-jupyter-proxy", "keywords": "", "license": "Apache License 2.0", "maintainer": "", "maintainer_email": "", "name": "aws-jupyter-proxy", "package_url": "https://pypi.org/project/aws-jupyter-proxy/", "platform": "", "project_url": "https://pypi.org/project/aws-jupyter-proxy/", "project_urls": {"Homepage": "https://github.com/aws/aws-jupyter-proxy"}, "release_url": "https://pypi.org/project/aws-jupyter-proxy/0.1.0/", "requires_dist": ["notebook (<7.0,>=6.0)", "botocore (<2.0,>=1.0)", "asynctest ; extra == 'dev'", "black ; extra == 'dev'", "pytest ; extra == 'dev'", "pytest-asyncio ; extra == 'dev'", "pytest-cov ; extra == 'dev'"], "requires_python": ">=3.6", "summary": "A Jupyter server extension to proxy requests with AWS SigV4 authentication", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>AWS Jupyter Proxy</h1>\n<p><img alt=\"CodeBuild\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5779b905733ad510a89ebfd3195c124293da6a9b/68747470733a2f2f636f64656275696c642e75732d776573742d322e616d617a6f6e6177732e636f6d2f6261646765733f757569643d65794a6c626d4e79655842305a57524559585268496a6f695a4756716347354d56455a5a596b6432614642425a6e6c535a3152366430733355314a4b523370774f57523055474a546445703562573951576c566c4d6d646e54454a6c656e5a556456566b516a4e7a635656694d6d6c4c51314e474e5339794c7a4a45576b52704d7a46355755786e5a544a5650534973496d6c32554746795957316c644756795533426c59794936496b7735636b356b5a6b35306169395555327059616e4d694c434a745958526c636d6c6862464e6c64464e6c636d6c68624349364d5830253344266272616e63683d6d6173746572\">\n<img alt=\"Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0a79e9adfae3516e68b6e46b05c8b10b6071c34b/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6177735f6a7570797465725f70726f78792e737667\">\n<img alt=\"Code style: black\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbfdc7754183ecf079bc71ddeabaf88f6cbc5c00/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667\"></p>\n<p>A Jupyter server extension to proxy requests with AWS SigV4 authentication.</p>\n<h2>Overview</h2>\n<p>This server extension enables the usage of the <a href=\"https://github.com/aws/aws-sdk-js\" rel=\"nofollow\">AWS JavaScript/TypeScript SDK</a> without having to export AWS credentials to the browser.</p>\n<p>A single <code>/awsproxy</code> endpoint is added on the Jupyter server which receives incoming requests from the browser, uses the credentials on the server to add <a href=\"https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\" rel=\"nofollow\">SigV4</a> authentication to the request, and then proxies the request to the actual AWS service endpoint.</p>\n<p>All requests are proxied back-and-forth as-is, e.g., a 4xx status code from the AWS service will be relayed back as-is to the browser.</p>\n<p>NOTE: This project is still under active development</p>\n<h2>Install</h2>\n<p>Installing the package from PyPI will install and enable the server extension on the Jupyter server.</p>\n<pre>pip install aws-jupyter-proxy\n</pre>\n<h2>Usage</h2>\n<p>Using this requries no additional dependencies in the client-side code. Just use the regular AWS JavaScript/TypeScript SDK methods and add any dummy credentials and change the endpoint to the <code>/awsproxy</code> endpoint.</p>\n<pre>    <span class=\"kr\">import</span> <span class=\"o\">*</span> <span class=\"kr\">as</span> <span class=\"nx\">AWS</span> <span class=\"nx\">from</span> <span class=\"s1\">'aws-sdk'</span><span class=\"p\">;</span>\n    <span class=\"kr\">import</span> <span class=\"nx\">SageMaker</span> <span class=\"nx\">from</span> <span class=\"s1\">'aws-sdk/clients/sagemaker'</span><span class=\"p\">;</span>\n\n\n    <span class=\"c1\">// These credentials are *not* used for the actual AWS service call but you have</span>\n    <span class=\"c1\">// to provide any dummy credentials (Not real ones!)</span>\n    <span class=\"nx\">AWS</span><span class=\"p\">.</span><span class=\"nx\">config</span><span class=\"p\">.</span><span class=\"nx\">secretAccessKey</span> <span class=\"o\">=</span> <span class=\"s1\">'IGNOREDIGNORE/IGNOREDIGNOREDIGNOREDIGNOR'</span><span class=\"p\">;</span>\n    <span class=\"nx\">AWS</span><span class=\"p\">.</span><span class=\"nx\">config</span><span class=\"p\">.</span><span class=\"nx\">accessKeyId</span> <span class=\"o\">=</span> <span class=\"s1\">'IGNOREDIGNO'</span><span class=\"p\">;</span>\n\n    <span class=\"c1\">// Change the endpoint in the client to the \"awsproxy\" endpoint on the Jupyter server.</span>\n    <span class=\"kr\">const</span> <span class=\"nx\">proxyEndpoint</span> <span class=\"o\">=</span> <span class=\"s1\">'http://localhost:8888/awsproxy'</span><span class=\"p\">;</span>\n\n    <span class=\"kr\">const</span> <span class=\"nx\">sageMakerClient</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">SageMaker</span><span class=\"p\">({</span>\n        <span class=\"nx\">region</span><span class=\"o\">:</span> <span class=\"s1\">'us-west-2'</span><span class=\"p\">,</span>\n        <span class=\"nx\">endpoint</span>: <span class=\"kt\">proxyEndpoint</span><span class=\"p\">,</span>\n    <span class=\"p\">});</span>\n\n    <span class=\"c1\">// Make the API call!</span>\n    <span class=\"nx\">await</span> <span class=\"nx\">proxySageMaker</span>\n        <span class=\"p\">.</span><span class=\"nx\">listNotebookInstances</span><span class=\"p\">({</span>\n            <span class=\"nx\">NameContains</span><span class=\"o\">:</span> <span class=\"s1\">'jaipreet'</span>\n        <span class=\"p\">})</span>\n        <span class=\"p\">.</span><span class=\"nx\">promise</span><span class=\"p\">();</span>\n</pre>\n<h3>Usage with S3</h3>\n<p>For S3, use the <code>s3ForcePathStyle</code> parameter during the client initialization</p>\n<pre>    <span class=\"kr\">import</span> <span class=\"nx\">S3</span> <span class=\"nx\">from</span> <span class=\"s1\">'aws-sdk/clients/s3'</span><span class=\"p\">;</span>\n\n    <span class=\"kr\">const</span> <span class=\"nx\">s3Client</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">S3</span><span class=\"p\">({</span>\n        <span class=\"nx\">region</span><span class=\"o\">:</span> <span class=\"s1\">'us-west-2'</span><span class=\"p\">,</span>\n        <span class=\"nx\">endpoint</span>: <span class=\"kt\">proxyEndpoint</span><span class=\"p\">,</span>\n        <span class=\"nx\">s3ForcePathStyle</span>: <span class=\"kt\">true</span>\n    <span class=\"p\">});</span>\n\n    <span class=\"nx\">await</span> <span class=\"nx\">s3Client</span><span class=\"p\">.</span><span class=\"nx\">getObject</span><span class=\"p\">({</span>\n        <span class=\"nx\">Bucket</span><span class=\"o\">:</span> <span class=\"s1\">'my-bucket'</span><span class=\"p\">,</span>\n        <span class=\"nx\">Key</span><span class=\"o\">:</span> <span class=\"s1\">'my-object'</span>\n    <span class=\"p\">}).</span><span class=\"nx\">promise</span><span class=\"p\">();</span>\n</pre>\n<h2>Development</h2>\n<p>Install all dev dependencies</p>\n<pre>pip install -e <span class=\"s2\">\".[dev]\"</span>\njupyter serverextension <span class=\"nb\">enable</span> --py aws_jupyter_proxy\n</pre>\n<p>Run unit tests using pytest</p>\n<pre>pytest tests/unit\n</pre>\n<h2>License</h2>\n<p>This library is licensed under the Apache 2.0 License.</p>\n\n          </div>"}, "last_serial": 5756161, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "5b166774e63a73baed7c9579750c5f44", "sha256": "998f8eb594d35fcfce28303406aeca9b6df7371e5b1ec58208a2329f88033f27"}, "downloads": -1, "filename": "aws_jupyter_proxy-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5b166774e63a73baed7c9579750c5f44", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 16421, "upload_time": "2019-08-29T18:45:09", "upload_time_iso_8601": "2019-08-29T18:45:09.417157Z", "url": "https://files.pythonhosted.org/packages/39/d7/2a97422b06be12cbc9532bb60ef83379555fbdb88fd36ccc7d8e3586669f/aws_jupyter_proxy-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "550399f955ed9d09471fbbf037f9b3bc", "sha256": "15c96ff60aec95a6d6ed303bd7221b684fb0a3e486df2e7f00dd1158e3b4253a"}, "downloads": -1, "filename": "aws_jupyter_proxy-0.1.0.tar.gz", "has_sig": false, "md5_digest": "550399f955ed9d09471fbbf037f9b3bc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10220, "upload_time": "2019-08-29T18:45:12", "upload_time_iso_8601": "2019-08-29T18:45:12.237689Z", "url": "https://files.pythonhosted.org/packages/51/be/5752536691d6a08f05c22adde2dc025ddbe40801b6e54dfe0d68c53c0b61/aws_jupyter_proxy-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5b166774e63a73baed7c9579750c5f44", "sha256": "998f8eb594d35fcfce28303406aeca9b6df7371e5b1ec58208a2329f88033f27"}, "downloads": -1, "filename": "aws_jupyter_proxy-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5b166774e63a73baed7c9579750c5f44", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 16421, "upload_time": "2019-08-29T18:45:09", "upload_time_iso_8601": "2019-08-29T18:45:09.417157Z", "url": "https://files.pythonhosted.org/packages/39/d7/2a97422b06be12cbc9532bb60ef83379555fbdb88fd36ccc7d8e3586669f/aws_jupyter_proxy-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "550399f955ed9d09471fbbf037f9b3bc", "sha256": "15c96ff60aec95a6d6ed303bd7221b684fb0a3e486df2e7f00dd1158e3b4253a"}, "downloads": -1, "filename": "aws_jupyter_proxy-0.1.0.tar.gz", "has_sig": false, "md5_digest": "550399f955ed9d09471fbbf037f9b3bc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10220, "upload_time": "2019-08-29T18:45:12", "upload_time_iso_8601": "2019-08-29T18:45:12.237689Z", "url": "https://files.pythonhosted.org/packages/51/be/5752536691d6a08f05c22adde2dc025ddbe40801b6e54dfe0d68c53c0b61/aws_jupyter_proxy-0.1.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:15:39 2020"}