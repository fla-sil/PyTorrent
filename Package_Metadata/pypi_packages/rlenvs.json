{"info": {"author": "nikolai rozanov", "author_email": "nikolai.rozanov@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "# Reinforcement Learning Environments\n\nThis package is to simplify life for doing RL experiments by providing easily generatable RL environments that can be used to test out RL algorithms.\n\nThis is still work in progress, however, hopefully this will serve as a useful feature for exact RL experiments in a reproducible, light-weight and scientific manner.\n\n---\n## Getting Started.\n\n### Installation\n#### Installing with PyPi\n```bash\npip3 install rlenvs\n```\n\n#### Installing from source\n```\ngit clone https://github.com/ai-nikolai/rl-environments\ncd rl-environments\npip3 install -e .\n```\n\n### Examples:\n\n#### Bandit\n```python\nfrom rlenvs.bandits import MultiarmBernoulliBandit\n\nenv = MultiarmBernoulliBandit(arms=5)\n\nreward, observation, is_finished, internal_state = env.step(0) #picks arm 0\n```\n\n#### Tree MDP\n```python\nfrom rlenvs.mdps import BalancedDenseTreeDeterministicMDP\n\nenv = BalancedDenseTreeDeterministicMDP(branching=3, depth=5) #creates a tree with 3 choices each turn and a total of 5 turns.\n\nreward, observation, is_finished, internal_state = env.step(3) #picks arm 0\n```\nThis is how such an environment would look like:\n![BalancedTree](images/balanced_tree_env.png)\n\n---\n## Documentation:\n### Overview:\nOverall, this package provides environments, whose API is quite similar to the environments provided by Deepmind and OpenAI. (for interoperability.)\n\nThat is the interface provided by every environment:\n```python\nclass BaseEnvironment(object):\n    \"\"\"\n    Implements the following methods inspired by both OpenAI gym and Deepmind Bsuite (dm_env).\n    :initialise() -> observation, resets and initialises the environment and returns first observation:\n    :step(action) -> reward(float), observation(Optional[Any]), is_finished(bool), state(Optional[Any]):\n    :reset() -> \"resets the environement\":\n    :undo() -> \"goes to the previous state of the environment\" reward, observation, is_finished(bool), sate(Optional[Any]):\n    :go_to_state(state) -> \"goes to a specific state of the environment\" is_finished(bool):\n    :seed(int) -> \"sets the seed\":\n    :render() -> \"renders the environment\":\n    :get_specs() -> returns the custom specs of the environment:\n    \"\"\"\n```\n\n\n\n---\n## Troubleshooting / FAQs:\n\n### Requirements: (What are the requirements):\nIn the future this will hopefully be configurable\n```\npython >= 3.6\nnetworkx\ngraphviz\n...\n```\n\n\n## Copyright (C) - Nikolai Rozanov 2020-Present\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ai-nikolai/rl-environments", "keywords": "", "license": "Apache 2.0", "maintainer": "", "maintainer_email": "", "name": "rlenvs", "package_url": "https://pypi.org/project/rlenvs/", "platform": "", "project_url": "https://pypi.org/project/rlenvs/", "project_urls": {"Homepage": "https://github.com/ai-nikolai/rl-environments"}, "release_url": "https://pypi.org/project/rlenvs/0.0.0.2/", "requires_dist": ["numpy", "matplotlib", "seaborn (>=0.9)", "networkx", "pygraphviz"], "requires_python": ">=3.6", "summary": "Reinforcment Learning Environments", "version": "0.0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Reinforcement Learning Environments</h1>\n<p>This package is to simplify life for doing RL experiments by providing easily generatable RL environments that can be used to test out RL algorithms.</p>\n<p>This is still work in progress, however, hopefully this will serve as a useful feature for exact RL experiments in a reproducible, light-weight and scientific manner.</p>\n<hr>\n<h2>Getting Started.</h2>\n<h3>Installation</h3>\n<h4>Installing with PyPi</h4>\n<pre>pip3 install rlenvs\n</pre>\n<h4>Installing from source</h4>\n<pre><code>git clone https://github.com/ai-nikolai/rl-environments\ncd rl-environments\npip3 install -e .\n</code></pre>\n<h3>Examples:</h3>\n<h4>Bandit</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">rlenvs.bandits</span> <span class=\"kn\">import</span> <span class=\"n\">MultiarmBernoulliBandit</span>\n\n<span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">MultiarmBernoulliBandit</span><span class=\"p\">(</span><span class=\"n\">arms</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n\n<span class=\"n\">reward</span><span class=\"p\">,</span> <span class=\"n\">observation</span><span class=\"p\">,</span> <span class=\"n\">is_finished</span><span class=\"p\">,</span> <span class=\"n\">internal_state</span> <span class=\"o\">=</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">step</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"c1\">#picks arm 0</span>\n</pre>\n<h4>Tree MDP</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">rlenvs.mdps</span> <span class=\"kn\">import</span> <span class=\"n\">BalancedDenseTreeDeterministicMDP</span>\n\n<span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">BalancedDenseTreeDeterministicMDP</span><span class=\"p\">(</span><span class=\"n\">branching</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">depth</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"c1\">#creates a tree with 3 choices each turn and a total of 5 turns.</span>\n\n<span class=\"n\">reward</span><span class=\"p\">,</span> <span class=\"n\">observation</span><span class=\"p\">,</span> <span class=\"n\">is_finished</span><span class=\"p\">,</span> <span class=\"n\">internal_state</span> <span class=\"o\">=</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">step</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"c1\">#picks arm 0</span>\n</pre>\n<p>This is how such an environment would look like:\n<img alt=\"BalancedTree\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/170b94b318bd0f321cd3deae97e7b56592fc0a85/696d616765732f62616c616e6365645f747265655f656e762e706e67\"></p>\n<hr>\n<h2>Documentation:</h2>\n<h3>Overview:</h3>\n<p>Overall, this package provides environments, whose API is quite similar to the environments provided by Deepmind and OpenAI. (for interoperability.)</p>\n<p>That is the interface provided by every environment:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">BaseEnvironment</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    Implements the following methods inspired by both OpenAI gym and Deepmind Bsuite (dm_env).</span>\n<span class=\"sd\">    :initialise() -&gt; observation, resets and initialises the environment and returns first observation:</span>\n<span class=\"sd\">    :step(action) -&gt; reward(float), observation(Optional[Any]), is_finished(bool), state(Optional[Any]):</span>\n<span class=\"sd\">    :reset() -&gt; \"resets the environement\":</span>\n<span class=\"sd\">    :undo() -&gt; \"goes to the previous state of the environment\" reward, observation, is_finished(bool), sate(Optional[Any]):</span>\n<span class=\"sd\">    :go_to_state(state) -&gt; \"goes to a specific state of the environment\" is_finished(bool):</span>\n<span class=\"sd\">    :seed(int) -&gt; \"sets the seed\":</span>\n<span class=\"sd\">    :render() -&gt; \"renders the environment\":</span>\n<span class=\"sd\">    :get_specs() -&gt; returns the custom specs of the environment:</span>\n<span class=\"sd\">    \"\"\"</span>\n</pre>\n<hr>\n<h2>Troubleshooting / FAQs:</h2>\n<h3>Requirements: (What are the requirements):</h3>\n<p>In the future this will hopefully be configurable</p>\n<pre><code>python &gt;= 3.6\nnetworkx\ngraphviz\n...\n</code></pre>\n<h2>Copyright (C) - Nikolai Rozanov 2020-Present</h2>\n\n          </div>"}, "last_serial": 7056596, "releases": {"0.0.0.1": [{"comment_text": "", "digests": {"md5": "49dd24800545b5cffa2e5ec2f98a36bd", "sha256": "54f9b45b39decae466cdd0f97195301a2a6830b05255f1c9d0c746bbed427b28"}, "downloads": -1, "filename": "rlenvs-0.0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "49dd24800545b5cffa2e5ec2f98a36bd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 10033, "upload_time": "2020-04-19T23:09:48", "upload_time_iso_8601": "2020-04-19T23:09:48.254264Z", "url": "https://files.pythonhosted.org/packages/94/6d/74e3d9b7488360b5ce2cecf2700a9bcf25fc37cf926a9c5ff21fd55230de/rlenvs-0.0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "feaca3a9be43c61f93e9bc6493a9e800", "sha256": "8c9df3508b2a7709965dedaf370e6971dcf6217a9969d8a45a4d8bef929f8a1f"}, "downloads": -1, "filename": "rlenvs-0.0.0.1.tar.gz", "has_sig": false, "md5_digest": "feaca3a9be43c61f93e9bc6493a9e800", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7327, "upload_time": "2020-04-19T23:09:50", "upload_time_iso_8601": "2020-04-19T23:09:50.127529Z", "url": "https://files.pythonhosted.org/packages/dd/5b/97a1dfbe8f09b8ffdfa2a95e014d3754423a6834d456243f1018ee7099c9/rlenvs-0.0.0.1.tar.gz", "yanked": false}], "0.0.0.2": [{"comment_text": "", "digests": {"md5": "decad1b7e5cd362c21077cab5d7d8d1e", "sha256": "5d368f28c90ea740dffe29484a3c75dcd08fcb0a29dbc9eed13a310095cfb9e7"}, "downloads": -1, "filename": "rlenvs-0.0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "decad1b7e5cd362c21077cab5d7d8d1e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 10198, "upload_time": "2020-04-20T00:17:33", "upload_time_iso_8601": "2020-04-20T00:17:33.457241Z", "url": "https://files.pythonhosted.org/packages/7e/2c/7944acb431bef4f8be8c031a2fdb610928b91d02b17b35d94f7fe976aa46/rlenvs-0.0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ca5941a44e57eaf5cc4c10ec493510e5", "sha256": "34108615a2e1f18d491aa695f6f2cd129b01ac61c86af512c7e7b3c3d2219523"}, "downloads": -1, "filename": "rlenvs-0.0.0.2.tar.gz", "has_sig": false, "md5_digest": "ca5941a44e57eaf5cc4c10ec493510e5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7511, "upload_time": "2020-04-20T00:17:36", "upload_time_iso_8601": "2020-04-20T00:17:36.028160Z", "url": "https://files.pythonhosted.org/packages/37/f0/390493f1e130be4fa29484d4266d9dbd641599e2ffdf69adc75eca442fec/rlenvs-0.0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "decad1b7e5cd362c21077cab5d7d8d1e", "sha256": "5d368f28c90ea740dffe29484a3c75dcd08fcb0a29dbc9eed13a310095cfb9e7"}, "downloads": -1, "filename": "rlenvs-0.0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "decad1b7e5cd362c21077cab5d7d8d1e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 10198, "upload_time": "2020-04-20T00:17:33", "upload_time_iso_8601": "2020-04-20T00:17:33.457241Z", "url": "https://files.pythonhosted.org/packages/7e/2c/7944acb431bef4f8be8c031a2fdb610928b91d02b17b35d94f7fe976aa46/rlenvs-0.0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ca5941a44e57eaf5cc4c10ec493510e5", "sha256": "34108615a2e1f18d491aa695f6f2cd129b01ac61c86af512c7e7b3c3d2219523"}, "downloads": -1, "filename": "rlenvs-0.0.0.2.tar.gz", "has_sig": false, "md5_digest": "ca5941a44e57eaf5cc4c10ec493510e5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7511, "upload_time": "2020-04-20T00:17:36", "upload_time_iso_8601": "2020-04-20T00:17:36.028160Z", "url": "https://files.pythonhosted.org/packages/37/f0/390493f1e130be4fa29484d4266d9dbd641599e2ffdf69adc75eca442fec/rlenvs-0.0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:02:17 2020"}