{"info": {"author": "Carlos Manzanedo Rueda", "author_email": "c.manaha@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.6", "Topic :: Internet :: Log Analysis", "Topic :: Software Development :: Libraries", "Topic :: System :: Logging"], "description": "===============\nCMRESHandler.py\n===============\n\n|  |license| |versions| |status| |downloads|\n|  |ci_status| |codecov| |gitter|\n\n\nPython Elasticsearch Log handler\n********************************\n\nThis library provides an Elasticsearch logging appender compatible with the\npython standard `logging <https://docs.python.org/2/library/logging.html>`_ library.\n\nThe code source is in github at `https://github.com/cmanaha/python-elasticsearch-logger\n<https://github.com/cmanaha/python-elasticsearch-logger>`_\n\n\nInstallation\n============\nInstall using pip::\n\n    pip install CMRESHandler\n\nRequirements Python 2\n=====================\nThis library requires the following dependencies\n - elasticsearch\n - requests\n - enum\n\n\nRequirements Python 3\n=====================\nThis library requires the following dependencies\n - elasticsearch\n - requests\n\nAdditional requirements for Kerberos support\n============================================\nAdditionally, the package support optionally kerberos authentication by adding the following dependecy\n - requests-kerberos\n\nAdditional requirements for AWS IAM user authentication (request signing)\n=========================================================================\nAdditionally, the package support optionally AWS IAM user authentication by adding the following dependecy\n - requests-aws4auth\n\nUsing the handler in  your program\n==================================\nTo initialise and create the handler, just add the handler to your logger as follow ::\n\n    from cmreslogging.handlers import CMRESHandler\n    handler = CMRESHandler(hosts=[{'host': 'localhost', 'port': 9200}],\n                               auth_type=CMRESHandler.AuthType.NO_AUTH,\n                               es_index_name=\"my_python_index\")\n    log = logging.getLogger(\"PythonTest\")\n    log.setLevel(logging.INFO)\n    log.addHandler(handler)\n\nYou can add fields upon initialisation, providing more data of the execution context ::\n\n    from cmreslogging.handlers import CMRESHandler\n    handler = CMRESHandler(hosts=[{'host': 'localhost', 'port': 9200}],\n                               auth_type=CMRESHandler.AuthType.NO_AUTH,\n                               es_index_name=\"my_python_index\",\n                               es_additional_fields={'App': 'MyAppName', 'Environment': 'Dev'})\n    log = logging.getLogger(\"PythonTest\")\n    log.setLevel(logging.INFO)\n    log.addHandler(handler)\n\nThis additional fields will be applied to all logging fields and recorded in elasticsearch\n\nTo log, use the regular commands from the logging library ::\n\n    log.info(\"This is an info statement that will be logged into elasticsearch\")\n\nYour code can also dump additional extra fields on a per log basis that can be used to instrument\noperations. For example, when reading information from a database you could do something like::\n\n    start_time = time.time()\n    database_operation()\n    db_delta = time.time() - start_time\n    log.debug(\"DB operation took %.3f seconds\" % db_delta, extra={'db_execution_time': db_delta})\n\nThe code above executes the DB operation, measures the time it took and logs an entry that contains\nin the message the time the operation took as string and for convenience, it creates another field\ncalled db_execution_time with a float that can be used to plot the time this operations are taking using\nKibana on top of elasticsearch\n\nInitialisation parameters\n=========================\nThe constructors takes the following parameters:\n - hosts:  The list of hosts that elasticsearch clients will connect, multiple hosts are allowed, for example ::\n\n    [{'host':'host1','port':9200}, {'host':'host2','port':9200}]\n\n\n - auth_type: The authentication currently support CMRESHandler.AuthType = NO_AUTH, BASIC_AUTH, KERBEROS_AUTH\n - auth_details: When CMRESHandler.AuthType.BASIC_AUTH is used this argument must contain a tuple of string with the user and password that will be used to authenticate against the Elasticsearch servers, for example ('User','Password')\n - aws_access_key: When ``CMRESHandler.AuthType.AWS_SIGNED_AUTH`` is used this argument must contain the AWS key id of the  the AWS IAM user\n - aws_secret_key: When ``CMRESHandler.AuthType.AWS_SIGNED_AUTH`` is used this argument must contain the AWS secret key of the  the AWS IAM user\n - aws_region: When ``CMRESHandler.AuthType.AWS_SIGNED_AUTH`` is used this argument must contain the AWS region of the  the AWS Elasticsearch servers, for example ``'us-east'``\n - use_ssl: A boolean that defines if the communications should use SSL encrypted communication\n - verify_ssl: A boolean that defines if the SSL certificates are validated or not\n - buffer_size: An int, Once this size is reached on the internal buffer results are flushed into ES\n - flush_frequency_in_sec: A float representing how often and when the buffer will be flushed\n - es_index_name: A string with the prefix of the elasticsearch index that will be created. Note a date with\n   YYYY.MM.dd, ``python_logger`` used by default\n - index_name_frequency: The frequency to use as part of the index naming. Currently supports\n   CMRESHandler.IndexNameFrequency.DAILY, CMRESHandler.IndexNameFrequency.WEEKLY,\n   CMRESHandler.IndexNameFrequency.MONTHLY, CMRESHandler.IndexNameFrequency.YEARLY by default the daily rotation\n   is used\n - es_doc_type: A string with the name of the document type that will be used ``python_log`` used by default\n - es_additional_fields: A dictionary with all the additional fields that you would like to add to the logs\n\nDjango Integration\n==================\nIt is also very easy to integrate the handler to `Django <https://www.djangoproject.com/>`_ And what is even\nbetter, at DEBUG level django logs information such as how long it takes for DB connections to return so\nthey can be plotted on Kibana, or the SQL statements that Django executed. ::\n\n    from cmreslogging.handlers import CMRESHandler\n    LOGGING = {\n        'version': 1,\n        'disable_existing_loggers': False,\n        'handlers': {\n            'file': {\n                'level': 'DEBUG',\n                'class': 'logging.handlers.RotatingFileHandler',\n                'filename': './debug.log',\n                'maxBytes': 102400,\n                'backupCount': 5,\n            },\n            'elasticsearch': {\n                'level': 'DEBUG',\n                'class': 'cmreslogging.handlers.CMRESHandler',\n                'hosts': [{'host': 'localhost', 'port': 9200}],\n                'es_index_name': 'my_python_app',\n                'es_additional_fields': {'App': 'Test', 'Environment': 'Dev'},\n                'auth_type': CMRESHandler.AuthType.NO_AUTH,\n                'use_ssl': False,\n            },\n        },\n        'loggers': {\n            'django': {\n                'handlers': ['file','elasticsearch'],\n                'level': 'DEBUG',\n                'propagate': True,\n            },\n        },\n    }\n\nThere is more information about how Django logging works in the\n`Django documentation <https://docs.djangoproject.com/en/1.9/topics/logging//>`_\n\n\nBuilding the sources & Testing\n------------------------------\nTo create the package follow the standard python setup.py to compile.\nTo test, just execute the python tests within the test folder\n\nWhy using an appender rather than logstash or beats\n---------------------------------------------------\nIn some cases is quite useful to provide all the information available within the LogRecords as it contains\nthings such as exception information, the method, file, log line where the log was generated. All this can be\nalso done from logstash configuration, but it still requires to provide quite a lot of context to\n\nContributing back\n-----------------\nFeel free to use this as is or even better, feel free to fork and send your pull requests over.\n\n\n.. |downloads| image:: https://img.shields.io/pypi/dd/CMRESHandler.svg\n    :target: https://pypi.python.org/pypi/CMRESHandler\n    :alt: Daily PyPI downloads\n.. |versions| image:: https://img.shields.io/pypi/pyversions/CMRESHandler.svg\n    :target: https://pypi.python.org/pypi/CMRESHandler\n    :alt: Python versions supported\n.. |status| image:: https://img.shields.io/pypi/status/CMRESHandler.svg\n    :target: https://pypi.python.org/pypi/CMRESHandler\n    :alt: Package stability\n.. |license| image:: https://img.shields.io/pypi/l/CMRESHandler.svg\n    :target: https://pypi.python.org/pypi/CMRESHandler\n    :alt: License\n.. |ci_status| image:: https://travis-ci.org/cmanaha/python-elasticsearch-logger.svg?branch=master\n    :target: https://travis-ci.org/cmanaha/python-elasticsearch-logger\n    :alt: Continuous Integration Status\n.. |codecov| image:: https://codecov.io/github/cmanaha/python-elasticsearch-logger/coverage.svg?branch=master\n    :target: http://codecov.io/github/cmanaha/python-elasticsearch-logger?branch=master\n    :alt: Coverage!\n.. |gitter| image:: https://badges.gitter.im/Join%20Chat.svg\n    :target: https://gitter.im/cmanaha/python-elasticsearch-logger?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge\n    :alt: gitter", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/cmanaha/python-elasticsearch-logger", "keywords": "logging elasticsearch handler log django instrumentation", "license": "Apache2", "maintainer": "", "maintainer_email": "", "name": "spoke-CMRESHandler", "package_url": "https://pypi.org/project/spoke-CMRESHandler/", "platform": "", "project_url": "https://pypi.org/project/spoke-CMRESHandler/", "project_urls": {"Homepage": "https://github.com/cmanaha/python-elasticsearch-logger"}, "release_url": "https://pypi.org/project/spoke-CMRESHandler/1.0.0/", "requires_dist": null, "requires_python": "", "summary": "Elasticsearch Log handler for the logging library", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div>\n<div><a href=\"https://pypi.python.org/pypi/CMRESHandler\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/786beb25a79abd9080e9567ed305f17a6ccb746f/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f434d52455348616e646c65722e737667\"></a> <a href=\"https://pypi.python.org/pypi/CMRESHandler\" rel=\"nofollow\"><img alt=\"Python versions supported\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f9d9df277b94611c131bb5f363133046d003dc72/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f434d52455348616e646c65722e737667\"></a> <a href=\"https://pypi.python.org/pypi/CMRESHandler\" rel=\"nofollow\"><img alt=\"Package stability\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f986de2bd1f0297cd8a793363f97a94742de7d65/68747470733a2f2f696d672e736869656c64732e696f2f707970692f7374617475732f434d52455348616e646c65722e737667\"></a> <a href=\"https://pypi.python.org/pypi/CMRESHandler\" rel=\"nofollow\"><img alt=\"Daily PyPI downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b15b1fc65de1b4803e6f33381c83682fdd1c0e3d/68747470733a2f2f696d672e736869656c64732e696f2f707970692f64642f434d52455348616e646c65722e737667\"></a></div>\n<div><a href=\"https://travis-ci.org/cmanaha/python-elasticsearch-logger\" rel=\"nofollow\"><img alt=\"Continuous Integration Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cb2285d192fad61591d1dff32571222d96950493/68747470733a2f2f7472617669732d63692e6f72672f636d616e6168612f707974686f6e2d656c61737469637365617263682d6c6f676765722e7376673f6272616e63683d6d6173746572\"></a> <a href=\"http://codecov.io/github/cmanaha/python-elasticsearch-logger?branch=master\" rel=\"nofollow\"><img alt=\"Coverage!\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/eec67914348a52e8e42a5147ffbfa51e4751bc24/68747470733a2f2f636f6465636f762e696f2f6769746875622f636d616e6168612f707974686f6e2d656c61737469637365617263682d6c6f676765722f636f7665726167652e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://gitter.im/cmanaha/python-elasticsearch-logger?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge\" rel=\"nofollow\"><img alt=\"gitter\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/454be82554a06af0fd3393415ef17b59d8550498/68747470733a2f2f6261646765732e6769747465722e696d2f4a6f696e253230436861742e737667\"></a></div>\n</div>\n<div id=\"python-elasticsearch-log-handler\">\n<h2>Python Elasticsearch Log handler</h2>\n<p>This library provides an Elasticsearch logging appender compatible with the\npython standard <a href=\"https://docs.python.org/2/library/logging.html\" rel=\"nofollow\">logging</a> library.</p>\n<p>The code source is in github at <a href=\"https://github.com/cmanaha/python-elasticsearch-logger\" rel=\"nofollow\">https://github.com/cmanaha/python-elasticsearch-logger</a></p>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>Install using pip:</p>\n<pre>pip install CMRESHandler\n</pre>\n</div>\n<div id=\"requirements-python-2\">\n<h3>Requirements Python 2</h3>\n<dl>\n<dt>This library requires the following dependencies</dt>\n<dd><ul>\n<li>elasticsearch</li>\n<li>requests</li>\n<li>enum</li>\n</ul>\n</dd>\n</dl>\n</div>\n<div id=\"requirements-python-3\">\n<h3>Requirements Python 3</h3>\n<dl>\n<dt>This library requires the following dependencies</dt>\n<dd><ul>\n<li>elasticsearch</li>\n<li>requests</li>\n</ul>\n</dd>\n</dl>\n</div>\n<div id=\"additional-requirements-for-kerberos-support\">\n<h3>Additional requirements for Kerberos support</h3>\n<dl>\n<dt>Additionally, the package support optionally kerberos authentication by adding the following dependecy</dt>\n<dd><ul>\n<li>requests-kerberos</li>\n</ul>\n</dd>\n</dl>\n</div>\n<div id=\"additional-requirements-for-aws-iam-user-authentication-request-signing\">\n<h3>Additional requirements for AWS IAM user authentication (request signing)</h3>\n<dl>\n<dt>Additionally, the package support optionally AWS IAM user authentication by adding the following dependecy</dt>\n<dd><ul>\n<li>requests-aws4auth</li>\n</ul>\n</dd>\n</dl>\n</div>\n<div id=\"using-the-handler-in-your-program\">\n<h3>Using the handler in  your program</h3>\n<p>To initialise and create the handler, just add the handler to your logger as follow</p>\n<pre>from cmreslogging.handlers import CMRESHandler\nhandler = CMRESHandler(hosts=[{'host': 'localhost', 'port': 9200}],\n                           auth_type=CMRESHandler.AuthType.NO_AUTH,\n                           es_index_name=\"my_python_index\")\nlog = logging.getLogger(\"PythonTest\")\nlog.setLevel(logging.INFO)\nlog.addHandler(handler)\n</pre>\n<p>You can add fields upon initialisation, providing more data of the execution context</p>\n<pre>from cmreslogging.handlers import CMRESHandler\nhandler = CMRESHandler(hosts=[{'host': 'localhost', 'port': 9200}],\n                           auth_type=CMRESHandler.AuthType.NO_AUTH,\n                           es_index_name=\"my_python_index\",\n                           es_additional_fields={'App': 'MyAppName', 'Environment': 'Dev'})\nlog = logging.getLogger(\"PythonTest\")\nlog.setLevel(logging.INFO)\nlog.addHandler(handler)\n</pre>\n<p>This additional fields will be applied to all logging fields and recorded in elasticsearch</p>\n<p>To log, use the regular commands from the logging library</p>\n<pre>log.info(\"This is an info statement that will be logged into elasticsearch\")\n</pre>\n<p>Your code can also dump additional extra fields on a per log basis that can be used to instrument\noperations. For example, when reading information from a database you could do something like:</p>\n<pre>start_time = time.time()\ndatabase_operation()\ndb_delta = time.time() - start_time\nlog.debug(\"DB operation took %.3f seconds\" % db_delta, extra={'db_execution_time': db_delta})\n</pre>\n<p>The code above executes the DB operation, measures the time it took and logs an entry that contains\nin the message the time the operation took as string and for convenience, it creates another field\ncalled db_execution_time with a float that can be used to plot the time this operations are taking using\nKibana on top of elasticsearch</p>\n</div>\n<div id=\"initialisation-parameters\">\n<h3>Initialisation parameters</h3>\n<dl>\n<dt>The constructors takes the following parameters:</dt>\n<dd><ul>\n<li><p>hosts:  The list of hosts that elasticsearch clients will connect, multiple hosts are allowed, for example</p>\n<pre>[{'host':'host1','port':9200}, {'host':'host2','port':9200}]\n</pre>\n</li>\n<li><p>auth_type: The authentication currently support CMRESHandler.AuthType = NO_AUTH, BASIC_AUTH, KERBEROS_AUTH</p>\n</li>\n<li><p>auth_details: When CMRESHandler.AuthType.BASIC_AUTH is used this argument must contain a tuple of string with the user and password that will be used to authenticate against the Elasticsearch servers, for example (\u2018User\u2019,\u2019Password\u2019)</p>\n</li>\n<li><p>aws_access_key: When <tt>CMRESHandler.AuthType.AWS_SIGNED_AUTH</tt> is used this argument must contain the AWS key id of the  the AWS IAM user</p>\n</li>\n<li><p>aws_secret_key: When <tt>CMRESHandler.AuthType.AWS_SIGNED_AUTH</tt> is used this argument must contain the AWS secret key of the  the AWS IAM user</p>\n</li>\n<li><p>aws_region: When <tt>CMRESHandler.AuthType.AWS_SIGNED_AUTH</tt> is used this argument must contain the AWS region of the  the AWS Elasticsearch servers, for example <tt><span class=\"pre\">'us-east'</span></tt></p>\n</li>\n<li><p>use_ssl: A boolean that defines if the communications should use SSL encrypted communication</p>\n</li>\n<li><p>verify_ssl: A boolean that defines if the SSL certificates are validated or not</p>\n</li>\n<li><p>buffer_size: An int, Once this size is reached on the internal buffer results are flushed into ES</p>\n</li>\n<li><p>flush_frequency_in_sec: A float representing how often and when the buffer will be flushed</p>\n</li>\n<li><p>es_index_name: A string with the prefix of the elasticsearch index that will be created. Note a date with\nYYYY.MM.dd, <tt>python_logger</tt> used by default</p>\n</li>\n<li><p>index_name_frequency: The frequency to use as part of the index naming. Currently supports\nCMRESHandler.IndexNameFrequency.DAILY, CMRESHandler.IndexNameFrequency.WEEKLY,\nCMRESHandler.IndexNameFrequency.MONTHLY, CMRESHandler.IndexNameFrequency.YEARLY by default the daily rotation\nis used</p>\n</li>\n<li><p>es_doc_type: A string with the name of the document type that will be used <tt>python_log</tt> used by default</p>\n</li>\n<li><p>es_additional_fields: A dictionary with all the additional fields that you would like to add to the logs</p>\n</li>\n</ul>\n</dd>\n</dl>\n</div>\n<div id=\"django-integration\">\n<h3>Django Integration</h3>\n<p>It is also very easy to integrate the handler to <a href=\"https://www.djangoproject.com/\" rel=\"nofollow\">Django</a> And what is even\nbetter, at DEBUG level django logs information such as how long it takes for DB connections to return so\nthey can be plotted on Kibana, or the SQL statements that Django executed.</p>\n<pre>from cmreslogging.handlers import CMRESHandler\nLOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'handlers': {\n        'file': {\n            'level': 'DEBUG',\n            'class': 'logging.handlers.RotatingFileHandler',\n            'filename': './debug.log',\n            'maxBytes': 102400,\n            'backupCount': 5,\n        },\n        'elasticsearch': {\n            'level': 'DEBUG',\n            'class': 'cmreslogging.handlers.CMRESHandler',\n            'hosts': [{'host': 'localhost', 'port': 9200}],\n            'es_index_name': 'my_python_app',\n            'es_additional_fields': {'App': 'Test', 'Environment': 'Dev'},\n            'auth_type': CMRESHandler.AuthType.NO_AUTH,\n            'use_ssl': False,\n        },\n    },\n    'loggers': {\n        'django': {\n            'handlers': ['file','elasticsearch'],\n            'level': 'DEBUG',\n            'propagate': True,\n        },\n    },\n}\n</pre>\n<p>There is more information about how Django logging works in the\n<a href=\"https://docs.djangoproject.com/en/1.9/topics/logging//\" rel=\"nofollow\">Django documentation</a></p>\n<div id=\"building-the-sources-testing\">\n<h4>Building the sources &amp; Testing</h4>\n<p>To create the package follow the standard python setup.py to compile.\nTo test, just execute the python tests within the test folder</p>\n</div>\n<div id=\"why-using-an-appender-rather-than-logstash-or-beats\">\n<h4>Why using an appender rather than logstash or beats</h4>\n<p>In some cases is quite useful to provide all the information available within the LogRecords as it contains\nthings such as exception information, the method, file, log line where the log was generated. All this can be\nalso done from logstash configuration, but it still requires to provide quite a lot of context to</p>\n</div>\n<div id=\"contributing-back\">\n<h4>Contributing back</h4>\n<p>Feel free to use this as is or even better, feel free to fork and send your pull requests over.</p>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6349186, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "db848b251c2d05b177aa012f3fa1523c", "sha256": "b6b034a050cb86e70fdf7d24f7a4c4f1c38e497ec14567cb47e40ac9a27d3264"}, "downloads": -1, "filename": "spoke-CMRESHandler-1.0.0.tar.gz", "has_sig": false, "md5_digest": "db848b251c2d05b177aa012f3fa1523c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13841, "upload_time": "2019-12-23T02:31:46", "upload_time_iso_8601": "2019-12-23T02:31:46.035316Z", "url": "https://files.pythonhosted.org/packages/1b/da/7a957cce38b67585138e225a5bcbc0ea2d4ddb50e8d1f4ab83f3e581f439/spoke-CMRESHandler-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "db848b251c2d05b177aa012f3fa1523c", "sha256": "b6b034a050cb86e70fdf7d24f7a4c4f1c38e497ec14567cb47e40ac9a27d3264"}, "downloads": -1, "filename": "spoke-CMRESHandler-1.0.0.tar.gz", "has_sig": false, "md5_digest": "db848b251c2d05b177aa012f3fa1523c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13841, "upload_time": "2019-12-23T02:31:46", "upload_time_iso_8601": "2019-12-23T02:31:46.035316Z", "url": "https://files.pythonhosted.org/packages/1b/da/7a957cce38b67585138e225a5bcbc0ea2d4ddb50e8d1f4ab83f3e581f439/spoke-CMRESHandler-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:04:37 2020"}