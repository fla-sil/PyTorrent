{"info": {"author": "Steve @siznax", "author_email": "steve@siznax.net", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3"], "description": "frag2text\n=========\n\n.. image:: https://img.shields.io/pypi/v/frag2text.svg\n        :target: https://pypi.python.org/pypi/frag2text/\n\nMarkdown_ gives you HTML from plain text and html2text_ reverses the\nprocess. If you want the plain text version of *a specific section* of\na web page (an HTML fragment), you would normally do the selecting\n(parsing) first, then generate the Markdown text to preserve some\nformatting.\n\nI made *frag2text* to:\n\n* easily select a web page fragment by CSS selector or XPath\n  expression\n* get the plain text of the fragment with some formatting intact for\n  later use with Markdown\n* not shell out to a another program (like lynx -dump)\n* not parse HTML or text directly\n* use html5lib for robust parsing\n* have a simple python module that is easy to maintain (encapsulating\n  the tricky business of subclassing parsers, treebuilders and\n  serializers, by keeping it simple \u2013 this shouldn't require\n  BeautifulSoup) \n\nThis is a problem I've tinkered with for some time and solved in many\ndifferent ways. It seems trivial but gets ridiculous quickly. If you\nhave any suggestions or want to share your experiences with other\ntools, please let me know.\n\n\nInstall\n=======\n\n.. code-block:: shell\n\n    $ pip install frag2text\n\n\nUsage\n=====\n\npython\n------\n\n.. code-block:: python\n\n    >>> from frag2text import frag2text\n    >>> help(frag2text)\n    Help on function frag2text in module frag2text:\n\n    frag2text(endpoint, stype, selector, clean=False, raw=False, verbose=False)\n        returns Markdown text of selected fragment.\n\n        Args:\n            endpoint: URL, file, or HTML string\n            stype: { 'css' | 'xpath' }\n            selector: CSS selector or XPath expression\n        Returns:\n            Markdown text\n        Options:\n            clean: cleans fragment (lxml.html.clean defaults)\n            raw: returns raw HTML fragment\n            verbose: show http status, encoding, headers\n\nshell\n-----\n\n.. code-block:: shell\n\n    $ frag2text.py -h\n    usage: frag2text.py [-h] [-c] [-r] [-v] endpoint {css,xpath} selector\n\n    reverse Markdown (html2text) HTML fragments.\n\n    positional arguments:\n      endpoint       URL, file, or HTML string\n      {css,xpath}    fragment selector type\n      selector       CSS select statement or XPath expression\n\n    optional arguments:\n      -h, --help     show this help message and exit\n      -c, --clean    clean fragment (lxml.html.clean defaults)\n      -r, --raw      output raw fragment\n      -v, --verbose  print status, encoding, headers\n\n\nExamples\n========\n\npython\n------\n\n.. code-block:: python\n\n    from frag2text import frag2text\n\n    info = frag2text('http://wikipedia.org/wiki/Amanita', 'css', '.infobox')\n\n\nshell\n-----\n\n.. code-block:: shell\n\n    $ frag2text.py \"<ht?+><borkt><h1>hello\" xpath //h1\n    ...\n    # hello\n\n\nCSS select\n----------\n\n.. code-block:: shell\n\n    $ frag2text.py http://wikipedia.org/wiki/Amanita css .infobox\n    _Amanita_\n    ---\n    ![Fliegenpilz-1.jpg](//upload.wikimedia.org/wikipedia/commons/thumb/d/d1\n    /Fliegenpilz-1.jpg/230px-Fliegenpilz-1.jpg)\n    _[Amanita muscaria](/wiki/Amanita_muscaria)_\n    Albin Schmalfu\u00df, 1897\n    [Scientific classification](/wiki/Biological_classification)\n    Kingdom: | [Fungi](/wiki/Fungi)\n    Division: | [Basidiomycota](/wiki/Basidiomycota)\n    Class: | [Agaricomycetes](/wiki/Agaricomycetes)\n    Order: | [Agaricales](/wiki/Agaricales)\n    Family: | [Amanitaceae](/wiki/Amanitaceae)\n    Genus: | _**Amanita**_\n    [Pers.](/wiki/Christian_Hendrik_Persoon) (1794)\n    [Type species](/wiki/Type_species)\n    _[Amanita muscaria](/wiki/Amanita_muscaria)_\n    ([L.](/wiki/Linnaeus)) [Lam.](/wiki/Lam.) (1783)\n    [Diversity](/wiki/Biodiversity)\n    [c.600 species](/wiki/List_of_Amanita_species)\n\n\nXPath expression\n----------------\n\n.. code-block:: shell\n\n    $ frag2text.py http://en.wikipedia.org/wiki/Amanita xpath '//p[1]'\n\n    The [genus](/wiki/Genus) _**Amanita**_ contains about 600 [species](/wik\n    i/Species) of [agarics](/wiki/Agarics) including some of the most [toxic\n    ](/wiki/Toxic) known [mushrooms](/wiki/Mushrooms) found worldwide, as we\n    ll as some well-regarded edible species. This genus is responsible for a\n    pproximately 95% of the fatalities resulting from [mushroom poisoning](/\n    wiki/Mushroom_poisoning), with the [death cap](/wiki/Death_cap) accounti\n    ng for about 50% on its own. The most potent toxin present in these mush\n    rooms is \u03b1[-amanitin](/wiki/%CE%91-amanitin).\n\n\n.. _Markdown: https://github.com/waylan/Python-Markdown\n.. _html2text: https://github.com/Alir3z4/html2text/\n\n\n.. :changelog:\n\nRelease History\n---------------\n\n0.0.5 (2015-02-18)\n++++++++++++++++++\n\n* handle XPathEvalError, SelectorSyntaxError and Nothing found.\n* join list of selected fragments, was only returning first.\n* do not exit early on error.\n\n0.0.1 (2015-01-14)\n++++++++++++++++++\n\n* It seems to work!", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/siznax/frag2text/", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "frag2text", "package_url": "https://pypi.org/project/frag2text/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/frag2text/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/siznax/frag2text/"}, "release_url": "https://pypi.org/project/frag2text/0.0.6/", "requires_dist": null, "requires_python": null, "summary": "Select and reverse-Markdown (html2text) web page fragments.", "version": "0.0.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"frag2text\">\n<h2>frag2text</h2>\n<a href=\"https://pypi.python.org/pypi/frag2text/\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/frag2text.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/82d878a7901fdcf16ec5e0d284dd11de3c866842/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6672616732746578742e737667\"></a>\n<p><a href=\"https://github.com/waylan/Python-Markdown\" rel=\"nofollow\">Markdown</a> gives you HTML from plain text and <a href=\"https://github.com/Alir3z4/html2text/\" rel=\"nofollow\">html2text</a> reverses the\nprocess. If you want the plain text version of <em>a specific section</em> of\na web page (an HTML fragment), you would normally do the selecting\n(parsing) first, then generate the Markdown text to preserve some\nformatting.</p>\n<p>I made <em>frag2text</em> to:</p>\n<ul>\n<li>easily select a web page fragment by CSS selector or XPath\nexpression</li>\n<li>get the plain text of the fragment with some formatting intact for\nlater use with Markdown</li>\n<li>not shell out to a another program (like lynx -dump)</li>\n<li>not parse HTML or text directly</li>\n<li>use html5lib for robust parsing</li>\n<li>have a simple python module that is easy to maintain (encapsulating\nthe tricky business of subclassing parsers, treebuilders and\nserializers, by keeping it simple \u2013 this shouldn\u2019t require\nBeautifulSoup)</li>\n</ul>\n<p>This is a problem I\u2019ve tinkered with for some time and solved in many\ndifferent ways. It seems trivial but gets ridiculous quickly. If you\nhave any suggestions or want to share your experiences with other\ntools, please let me know.</p>\n</div>\n<div id=\"install\">\n<h2>Install</h2>\n<pre>$ pip install frag2text\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div id=\"python\">\n<h3>python</h3>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">frag2text</span> <span class=\"kn\">import</span> <span class=\"n\">frag2text</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">help</span><span class=\"p\">(</span><span class=\"n\">frag2text</span><span class=\"p\">)</span>\n<span class=\"n\">Help</span> <span class=\"n\">on</span> <span class=\"n\">function</span> <span class=\"n\">frag2text</span> <span class=\"ow\">in</span> <span class=\"n\">module</span> <span class=\"n\">frag2text</span><span class=\"p\">:</span>\n\n<span class=\"n\">frag2text</span><span class=\"p\">(</span><span class=\"n\">endpoint</span><span class=\"p\">,</span> <span class=\"n\">stype</span><span class=\"p\">,</span> <span class=\"n\">selector</span><span class=\"p\">,</span> <span class=\"n\">clean</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">raw</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"n\">returns</span> <span class=\"n\">Markdown</span> <span class=\"n\">text</span> <span class=\"n\">of</span> <span class=\"n\">selected</span> <span class=\"n\">fragment</span><span class=\"o\">.</span>\n\n    <span class=\"n\">Args</span><span class=\"p\">:</span>\n        <span class=\"n\">endpoint</span><span class=\"p\">:</span> <span class=\"n\">URL</span><span class=\"p\">,</span> <span class=\"n\">file</span><span class=\"p\">,</span> <span class=\"ow\">or</span> <span class=\"n\">HTML</span> <span class=\"n\">string</span>\n        <span class=\"n\">stype</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"s1\">'css'</span> <span class=\"o\">|</span> <span class=\"s1\">'xpath'</span> <span class=\"p\">}</span>\n        <span class=\"n\">selector</span><span class=\"p\">:</span> <span class=\"n\">CSS</span> <span class=\"n\">selector</span> <span class=\"ow\">or</span> <span class=\"n\">XPath</span> <span class=\"n\">expression</span>\n    <span class=\"n\">Returns</span><span class=\"p\">:</span>\n        <span class=\"n\">Markdown</span> <span class=\"n\">text</span>\n    <span class=\"n\">Options</span><span class=\"p\">:</span>\n        <span class=\"n\">clean</span><span class=\"p\">:</span> <span class=\"n\">cleans</span> <span class=\"n\">fragment</span> <span class=\"p\">(</span><span class=\"n\">lxml</span><span class=\"o\">.</span><span class=\"n\">html</span><span class=\"o\">.</span><span class=\"n\">clean</span> <span class=\"n\">defaults</span><span class=\"p\">)</span>\n        <span class=\"n\">raw</span><span class=\"p\">:</span> <span class=\"n\">returns</span> <span class=\"n\">raw</span> <span class=\"n\">HTML</span> <span class=\"n\">fragment</span>\n        <span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"n\">show</span> <span class=\"n\">http</span> <span class=\"n\">status</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"p\">,</span> <span class=\"n\">headers</span>\n</pre>\n</div>\n<div id=\"shell\">\n<h3>shell</h3>\n<pre>$ frag2text.py -h\nusage: frag2text.py <span class=\"o\">[</span>-h<span class=\"o\">]</span> <span class=\"o\">[</span>-c<span class=\"o\">]</span> <span class=\"o\">[</span>-r<span class=\"o\">]</span> <span class=\"o\">[</span>-v<span class=\"o\">]</span> endpoint <span class=\"o\">{</span>css,xpath<span class=\"o\">}</span> selector\n\nreverse Markdown <span class=\"o\">(</span>html2text<span class=\"o\">)</span> HTML fragments.\n\npositional arguments:\n  endpoint       URL, file, or HTML string\n  <span class=\"o\">{</span>css,xpath<span class=\"o\">}</span>    fragment selector <span class=\"nb\">type</span>\n  selector       CSS <span class=\"k\">select</span> statement or XPath expression\n\noptional arguments:\n  -h, --help     show this <span class=\"nb\">help</span> message and <span class=\"nb\">exit</span>\n  -c, --clean    clean fragment <span class=\"o\">(</span>lxml.html.clean defaults<span class=\"o\">)</span>\n  -r, --raw      output raw fragment\n  -v, --verbose  print status, encoding, headers\n</pre>\n</div>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<div id=\"id1\">\n<h3>python</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">frag2text</span> <span class=\"kn\">import</span> <span class=\"n\">frag2text</span>\n\n<span class=\"n\">info</span> <span class=\"o\">=</span> <span class=\"n\">frag2text</span><span class=\"p\">(</span><span class=\"s1\">'http://wikipedia.org/wiki/Amanita'</span><span class=\"p\">,</span> <span class=\"s1\">'css'</span><span class=\"p\">,</span> <span class=\"s1\">'.infobox'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"id2\">\n<h3>shell</h3>\n<pre>$ frag2text.py <span class=\"s2\">\"&lt;ht?+&gt;&lt;borkt&gt;&lt;h1&gt;hello\"</span> xpath //h1\n...\n<span class=\"c1\"># hello</span>\n</pre>\n</div>\n<div id=\"css-select\">\n<h3>CSS select</h3>\n<pre>$ frag2text.py http://wikipedia.org/wiki/Amanita css .infobox\n_Amanita_\n---\n!<span class=\"o\">[</span>Fliegenpilz-1.jpg<span class=\"o\">](</span>//upload.wikimedia.org/wikipedia/commons/thumb/d/d1\n/Fliegenpilz-1.jpg/230px-Fliegenpilz-1.jpg<span class=\"o\">)</span>\n_<span class=\"o\">[</span>Amanita muscaria<span class=\"o\">](</span>/wiki/Amanita_muscaria<span class=\"o\">)</span>_\nAlbin Schmalfu\u00df, <span class=\"m\">1897</span>\n<span class=\"o\">[</span>Scientific classification<span class=\"o\">](</span>/wiki/Biological_classification<span class=\"o\">)</span>\nKingdom: <span class=\"p\">|</span> <span class=\"o\">[</span>Fungi<span class=\"o\">](</span>/wiki/Fungi<span class=\"o\">)</span>\nDivision: <span class=\"p\">|</span> <span class=\"o\">[</span>Basidiomycota<span class=\"o\">](</span>/wiki/Basidiomycota<span class=\"o\">)</span>\nClass: <span class=\"p\">|</span> <span class=\"o\">[</span>Agaricomycetes<span class=\"o\">](</span>/wiki/Agaricomycetes<span class=\"o\">)</span>\nOrder: <span class=\"p\">|</span> <span class=\"o\">[</span>Agaricales<span class=\"o\">](</span>/wiki/Agaricales<span class=\"o\">)</span>\nFamily: <span class=\"p\">|</span> <span class=\"o\">[</span>Amanitaceae<span class=\"o\">](</span>/wiki/Amanitaceae<span class=\"o\">)</span>\nGenus: <span class=\"p\">|</span> _**Amanita**_\n<span class=\"o\">[</span>Pers.<span class=\"o\">](</span>/wiki/Christian_Hendrik_Persoon<span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"m\">1794</span><span class=\"o\">)</span>\n<span class=\"o\">[</span>Type species<span class=\"o\">](</span>/wiki/Type_species<span class=\"o\">)</span>\n_<span class=\"o\">[</span>Amanita muscaria<span class=\"o\">](</span>/wiki/Amanita_muscaria<span class=\"o\">)</span>_\n<span class=\"o\">([</span>L.<span class=\"o\">](</span>/wiki/Linnaeus<span class=\"o\">))</span> <span class=\"o\">[</span>Lam.<span class=\"o\">](</span>/wiki/Lam.<span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"m\">1783</span><span class=\"o\">)</span>\n<span class=\"o\">[</span>Diversity<span class=\"o\">](</span>/wiki/Biodiversity<span class=\"o\">)</span>\n<span class=\"o\">[</span>c.600 species<span class=\"o\">](</span>/wiki/List_of_Amanita_species<span class=\"o\">)</span>\n</pre>\n</div>\n<div id=\"xpath-expression\">\n<h3>XPath expression</h3>\n<pre>$ frag2text.py http://en.wikipedia.org/wiki/Amanita xpath <span class=\"s1\">'//p[1]'</span>\n\nThe <span class=\"o\">[</span>genus<span class=\"o\">](</span>/wiki/Genus<span class=\"o\">)</span> _**Amanita**_ contains about <span class=\"m\">600</span> <span class=\"o\">[</span>species<span class=\"o\">](</span>/wik\ni/Species<span class=\"o\">)</span> of <span class=\"o\">[</span>agarics<span class=\"o\">](</span>/wiki/Agarics<span class=\"o\">)</span> including some of the most <span class=\"o\">[</span>toxic\n<span class=\"o\">](</span>/wiki/Toxic<span class=\"o\">)</span> known <span class=\"o\">[</span>mushrooms<span class=\"o\">](</span>/wiki/Mushrooms<span class=\"o\">)</span> found worldwide, as we\nll as some well-regarded edible species. This genus is responsible <span class=\"k\">for</span> a\npproximately <span class=\"m\">95</span>% of the fatalities resulting from <span class=\"o\">[</span>mushroom poisoning<span class=\"o\">](</span>/\nwiki/Mushroom_poisoning<span class=\"o\">)</span>, with the <span class=\"o\">[</span>death cap<span class=\"o\">](</span>/wiki/Death_cap<span class=\"o\">)</span> accounti\nng <span class=\"k\">for</span> about <span class=\"m\">50</span>% on its own. The most potent toxin present in these mush\nrooms is \u03b1<span class=\"o\">[</span>-amanitin<span class=\"o\">](</span>/wiki/%CE%91-amanitin<span class=\"o\">)</span>.\n</pre>\n</div>\n<div id=\"release-history\">\n<h3>Release History</h3>\n<div id=\"id3\">\n<h4>0.0.5 (2015-02-18)</h4>\n<ul>\n<li>handle XPathEvalError, SelectorSyntaxError and Nothing found.</li>\n<li>join list of selected fragments, was only returning first.</li>\n<li>do not exit early on error.</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h4>0.0.1 (2015-01-14)</h4>\n<ul>\n<li>It seems to work!</li>\n</ul>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2247956, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "860f476d4619de0bcc1b92acbb7cbe62", "sha256": "c9ca17249a4b00cb5e58df996e122e5bdc6c2e9bd442e3fc0e7b53446b1b6ceb"}, "downloads": -1, "filename": "frag2text-0.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "860f476d4619de0bcc1b92acbb7cbe62", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 7443, "upload_time": "2015-01-17T00:24:57", "upload_time_iso_8601": "2015-01-17T00:24:57.159070Z", "url": "https://files.pythonhosted.org/packages/91/d3/697705ae0303bb8b7ca6476494e97e020c368e41d2058996caf97ca804dc/frag2text-0.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "913ec71850aa2e9771245fb8781bd58d", "sha256": "1d110634ae10c3fcb8f56b74759177cc3911dfc69eee3f216c3f79733182493a"}, "downloads": -1, "filename": "frag2text-0.0.1.tar.gz", "has_sig": false, "md5_digest": "913ec71850aa2e9771245fb8781bd58d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6014, "upload_time": "2015-01-17T00:24:40", "upload_time_iso_8601": "2015-01-17T00:24:40.411385Z", "url": "https://files.pythonhosted.org/packages/76/27/6040ff205737c5e9af76f471a71b6b2dc7ab1c85b359391555dec0037861/frag2text-0.0.1.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "979b98960eeb5ce90b58686e30941673", "sha256": "8338af5b147d34ffc4b6be31b74fbdd0e3c4ebf63f99bb7c99e41be5a30cd81f"}, "downloads": -1, "filename": "frag2text-0.0.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "979b98960eeb5ce90b58686e30941673", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 7984, "upload_time": "2015-02-18T23:45:26", "upload_time_iso_8601": "2015-02-18T23:45:26.824017Z", "url": "https://files.pythonhosted.org/packages/f4/63/c8a0f8d2e60a167bd4a9474d17baef664d6dfa73a8ce92877178dde0671c/frag2text-0.0.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5aed1c286bc22b30a5c36db67ff974ae", "sha256": "c5ee2187cd2afd76d5cbcef0e7b8269e8ac4ccfa42d3f7372a886967fce68179"}, "downloads": -1, "filename": "frag2text-0.0.5.tar.gz", "has_sig": false, "md5_digest": "5aed1c286bc22b30a5c36db67ff974ae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5936, "upload_time": "2015-02-18T23:45:12", "upload_time_iso_8601": "2015-02-18T23:45:12.079340Z", "url": "https://files.pythonhosted.org/packages/f1/26/18d793bb42f5e4ffe790433873593389b0776b7a5c117a2cfc60db232096/frag2text-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "61a0d8e060b91dceade455a032798d44", "sha256": "b4daa48bff6b330936770b989d1097613bb5474df382f28fa1a8819e745bf3db"}, "downloads": -1, "filename": "frag2text-0.0.6-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "61a0d8e060b91dceade455a032798d44", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 7981, "upload_time": "2016-07-28T00:15:24", "upload_time_iso_8601": "2016-07-28T00:15:24.695549Z", "url": "https://files.pythonhosted.org/packages/30/98/59afb67a88780104af7e89852eed8e9f46be39f641e35f492670a0ae5e49/frag2text-0.0.6-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "77c7188590e8787756dd9c42714c3d7d", "sha256": "04d8d112d1d91bc8ebd3ed2c370691c3c00e7806d973c24a23ae543cb7c4a4e1"}, "downloads": -1, "filename": "frag2text-0.0.6.tar.gz", "has_sig": false, "md5_digest": "77c7188590e8787756dd9c42714c3d7d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5942, "upload_time": "2016-07-28T00:14:59", "upload_time_iso_8601": "2016-07-28T00:14:59.643744Z", "url": "https://files.pythonhosted.org/packages/b8/7e/c5b43da730280f131c15ef2933dac64628970bcd14702f7af2f91239d520/frag2text-0.0.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "61a0d8e060b91dceade455a032798d44", "sha256": "b4daa48bff6b330936770b989d1097613bb5474df382f28fa1a8819e745bf3db"}, "downloads": -1, "filename": "frag2text-0.0.6-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "61a0d8e060b91dceade455a032798d44", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 7981, "upload_time": "2016-07-28T00:15:24", "upload_time_iso_8601": "2016-07-28T00:15:24.695549Z", "url": "https://files.pythonhosted.org/packages/30/98/59afb67a88780104af7e89852eed8e9f46be39f641e35f492670a0ae5e49/frag2text-0.0.6-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "77c7188590e8787756dd9c42714c3d7d", "sha256": "04d8d112d1d91bc8ebd3ed2c370691c3c00e7806d973c24a23ae543cb7c4a4e1"}, "downloads": -1, "filename": "frag2text-0.0.6.tar.gz", "has_sig": false, "md5_digest": "77c7188590e8787756dd9c42714c3d7d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5942, "upload_time": "2016-07-28T00:14:59", "upload_time_iso_8601": "2016-07-28T00:14:59.643744Z", "url": "https://files.pythonhosted.org/packages/b8/7e/c5b43da730280f131c15ef2933dac64628970bcd14702f7af2f91239d520/frag2text-0.0.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 01:00:35 2020"}