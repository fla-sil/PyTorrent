{"info": {"author": "Samuel Li", "author_email": "sli@projreality.com", "bugtrack_url": null, "classifiers": [], "description": "WebHist\n=======\n\n.. contents:: Table of Contents\n  :local:\n\nWebHist indexes a collection of saved webpages and provides an interface to search the index.\n\nWebHist can handle the following archive file types:\n\n- MAFF files generated by Mozilla Archive Format, with MHT and Faithful Save\n- HTML files generated by Save Page WE\n\nInstallation\n------------\n\nPackage is uploaded on `PyPI <https://pypi.org/project/webhist>`_.\n\nYou can install it with pip::\n\n  $ pip install webhist\n\nUsage\n-----\n\nCreate an index of archived webpages\n\n.. code:: python\n\n  i = webhist.Index(\"/path/to/index\")\n\nIndex a single file\n\n.. code:: python\n\n  i.add(\"/path/to/file\")\n\nA file will not be re-indexed unless explicitly requested. Files are tracked by the path string passed to the add() function, so an absolute path and a relative path will be considered two different files.\n\nThe code below will update the file in the index\n\n.. code:: python\n\n  i.add(\"/path/to/file\", update=True)\n\nAdd all files in a specified directory (note that it does not search within subdirectories)\n\n.. code:: python\n\n  i.add_path(\"/path/to/directory\")\n\nAgain, you can specify :literal:`update=True` to re-index files. You can also specify :literal:`verbose=True` to print information about whether or not files were indexed\n\n.. code:: python\n\n  i.add_path(\"/path/to/directory\", verbose=True)\n\nThe output will look something like::\n\n  file1\n  - file2 (already in index)\n  - file3 (exception type: error message)\n\nIn the example output above:\n\n- file1 was indexed correctly\n- file2 was already in the index, and was not re-indexed\n- file3 had a problem and was not indexed (python exception message shown)\n\nAfter adding files, the changes to the index need to be committed\n\n.. code:: python\n\n  i.commit()\n\nYou can also cancel the changes\n\n.. code:: python\n\n  i.cancel()\n\nOnce an index has been populated, you can run search queries against it. The syntax follows the Whoosh default query language. More information can be found `here <https://whoosh.readthedocs.io/en/latest/querylang.html>`_.\n\nThe code below searches for webpage archives that contain \"webhist\" and \"installation\"\n\n.. code:: python\n\n  results = i.search(\"webhist installation\")\n\nThe field searched by default is the :literal:`content` field. The following fields are indexed and searchable:\n\n- title (title of page)\n- content (content of page)\n- url (full URL of page)\n- fqdn (fully qualified domain name, e.g. packaging.python.org)\n- dn (domain name, e.g. python.org)\n- date (the date the webpage archive was saved)\n\nFor example, you can search the title field for webpages saved from example.com\n\n.. code:: python\n\n  results = i.search(\"title:webhist dn:example.com\")\n\nShell Interface\n---------------\n\nA simple shell interface to a WebHist index is provided in :literal:`examples/shell.py`. You can clone the webhist repo and run it from the repo root::\n\n  $ python examples/shell.py /path/to/archive -i /path/to/index\n\nThe :literal:`-i` parameter is optional. The default index location is :literal:`/path/to/archive/index`.\n\nRun a search query::\n\n  webhist> search title:webhist dn:example.com\n\nThe output will look something like::\n\n  0: [2010-01-02 12:30:01] Title of page\n  1: [2011-02-03 16:20:25] Another page\n  2: [2013-06-12 00:00:01] Yet another page\n\nTo open page #2 from the search results::\n\n  webhist> open 2\n\nTo get more help::\n\n  webhist> help\n\nTo exit the shell::\n\n  webhist> exit\n\nLicense\n-------\n\nWebHist is released under the GNU Lesser General Public License, Version 3.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/projreality/webhist", "keywords": "", "license": "https://www.gnu.org/licenses/lgpl.html", "maintainer": "", "maintainer_email": "", "name": "webhist", "package_url": "https://pypi.org/project/webhist/", "platform": "", "project_url": "https://pypi.org/project/webhist/", "project_urls": {"Homepage": "https://github.com/projreality/webhist"}, "release_url": "https://pypi.org/project/webhist/1.0.0/", "requires_dist": ["bs4", "python-dateutil", "maflib", "tld", "whoosh"], "requires_python": "", "summary": "Saved webpage index and search", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"table-of-contents\">\n<p>Table of Contents</p>\n<ul>\n<li><a href=\"#installation\" id=\"id1\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#usage\" id=\"id2\" rel=\"nofollow\">Usage</a></li>\n<li><a href=\"#shell-interface\" id=\"id3\" rel=\"nofollow\">Shell Interface</a></li>\n<li><a href=\"#license\" id=\"id4\" rel=\"nofollow\">License</a></li>\n</ul>\n</div>\n<p>WebHist indexes a collection of saved webpages and provides an interface to search the index.</p>\n<p>WebHist can handle the following archive file types:</p>\n<ul>\n<li>MAFF files generated by Mozilla Archive Format, with MHT and Faithful Save</li>\n<li>HTML files generated by Save Page WE</li>\n</ul>\n<div id=\"installation\">\n<h2><a href=\"#id1\" rel=\"nofollow\">Installation</a></h2>\n<p>Package is uploaded on <a href=\"https://pypi.org/project/webhist\" rel=\"nofollow\">PyPI</a>.</p>\n<p>You can install it with pip:</p>\n<pre>$ pip install webhist\n</pre>\n</div>\n<div id=\"usage\">\n<h2><a href=\"#id2\" rel=\"nofollow\">Usage</a></h2>\n<p>Create an index of archived webpages</p>\n<pre><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">webhist</span><span class=\"o\">.</span><span class=\"n\">Index</span><span class=\"p\">(</span><span class=\"s2\">\"/path/to/index\"</span><span class=\"p\">)</span>\n</pre>\n<p>Index a single file</p>\n<pre><span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"/path/to/file\"</span><span class=\"p\">)</span>\n</pre>\n<p>A file will not be re-indexed unless explicitly requested. Files are tracked by the path string passed to the add() function, so an absolute path and a relative path will be considered two different files.</p>\n<p>The code below will update the file in the index</p>\n<pre><span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"/path/to/file\"</span><span class=\"p\">,</span> <span class=\"n\">update</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>Add all files in a specified directory (note that it does not search within subdirectories)</p>\n<pre><span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">add_path</span><span class=\"p\">(</span><span class=\"s2\">\"/path/to/directory\"</span><span class=\"p\">)</span>\n</pre>\n<p>Again, you can specify <tt>update=True</tt> to re-index files. You can also specify <tt>verbose=True</tt> to print information about whether or not files were indexed</p>\n<pre><span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">add_path</span><span class=\"p\">(</span><span class=\"s2\">\"/path/to/directory\"</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>The output will look something like:</p>\n<pre>file1\n- file2 (already in index)\n- file3 (exception type: error message)\n</pre>\n<p>In the example output above:</p>\n<ul>\n<li>file1 was indexed correctly</li>\n<li>file2 was already in the index, and was not re-indexed</li>\n<li>file3 had a problem and was not indexed (python exception message shown)</li>\n</ul>\n<p>After adding files, the changes to the index need to be committed</p>\n<pre><span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">commit</span><span class=\"p\">()</span>\n</pre>\n<p>You can also cancel the changes</p>\n<pre><span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">cancel</span><span class=\"p\">()</span>\n</pre>\n<p>Once an index has been populated, you can run search queries against it. The syntax follows the Whoosh default query language. More information can be found <a href=\"https://whoosh.readthedocs.io/en/latest/querylang.html\" rel=\"nofollow\">here</a>.</p>\n<p>The code below searches for webpage archives that contain \u201cwebhist\u201d and \u201cinstallation\u201d</p>\n<pre><span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"s2\">\"webhist installation\"</span><span class=\"p\">)</span>\n</pre>\n<p>The field searched by default is the <tt>content</tt> field. The following fields are indexed and searchable:</p>\n<ul>\n<li>title (title of page)</li>\n<li>content (content of page)</li>\n<li>url (full URL of page)</li>\n<li>fqdn (fully qualified domain name, e.g. packaging.python.org)</li>\n<li>dn (domain name, e.g. python.org)</li>\n<li>date (the date the webpage archive was saved)</li>\n</ul>\n<p>For example, you can search the title field for webpages saved from example.com</p>\n<pre><span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"s2\">\"title:webhist dn:example.com\"</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"shell-interface\">\n<h2><a href=\"#id3\" rel=\"nofollow\">Shell Interface</a></h2>\n<p>A simple shell interface to a WebHist index is provided in <tt>examples/shell.py</tt>. You can clone the webhist repo and run it from the repo root:</p>\n<pre>$ python examples/shell.py /path/to/archive -i /path/to/index\n</pre>\n<p>The <tt><span class=\"pre\">-i</span></tt> parameter is optional. The default index location is <tt>/path/to/archive/index</tt>.</p>\n<p>Run a search query:</p>\n<pre>webhist&gt; search title:webhist dn:example.com\n</pre>\n<p>The output will look something like:</p>\n<pre>0: [2010-01-02 12:30:01] Title of page\n1: [2011-02-03 16:20:25] Another page\n2: [2013-06-12 00:00:01] Yet another page\n</pre>\n<p>To open page #2 from the search results:</p>\n<pre>webhist&gt; open 2\n</pre>\n<p>To get more help:</p>\n<pre>webhist&gt; help\n</pre>\n<p>To exit the shell:</p>\n<pre>webhist&gt; exit\n</pre>\n</div>\n<div id=\"license\">\n<h2><a href=\"#id4\" rel=\"nofollow\">License</a></h2>\n<p>WebHist is released under the GNU Lesser General Public License, Version 3.</p>\n</div>\n\n          </div>"}, "last_serial": 4967080, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "22e2a4d04a717f272c4399de8af96a5c", "sha256": "2016ad076f202994949269d6c2f019fb3e070e98043a18615ec3fa8d0568fc6c"}, "downloads": -1, "filename": "webhist-1.0.0-py2-none-any.whl", "has_sig": false, "md5_digest": "22e2a4d04a717f272c4399de8af96a5c", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 20834, "upload_time": "2019-03-21T08:27:39", "upload_time_iso_8601": "2019-03-21T08:27:39.675516Z", "url": "https://files.pythonhosted.org/packages/72/c2/4002385e64b13af721b3909546252f4ab7b9db827ef74929be319c3a18a9/webhist-1.0.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7f36ebdbf04b8b5bce13879ba771d38b", "sha256": "cb097f9ad13c9e9e43786e2a045f67c10315bb30ad18493bdbc1eb5ba42ea326"}, "downloads": -1, "filename": "webhist-1.0.0.tar.gz", "has_sig": false, "md5_digest": "7f36ebdbf04b8b5bce13879ba771d38b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4770, "upload_time": "2019-03-21T08:27:41", "upload_time_iso_8601": "2019-03-21T08:27:41.716415Z", "url": "https://files.pythonhosted.org/packages/a5/f0/0b9ff7dd25ce9bb5fb6bab972560a6a740dfbe5cb2a7e5566a1e9e8c092f/webhist-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "22e2a4d04a717f272c4399de8af96a5c", "sha256": "2016ad076f202994949269d6c2f019fb3e070e98043a18615ec3fa8d0568fc6c"}, "downloads": -1, "filename": "webhist-1.0.0-py2-none-any.whl", "has_sig": false, "md5_digest": "22e2a4d04a717f272c4399de8af96a5c", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 20834, "upload_time": "2019-03-21T08:27:39", "upload_time_iso_8601": "2019-03-21T08:27:39.675516Z", "url": "https://files.pythonhosted.org/packages/72/c2/4002385e64b13af721b3909546252f4ab7b9db827ef74929be319c3a18a9/webhist-1.0.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7f36ebdbf04b8b5bce13879ba771d38b", "sha256": "cb097f9ad13c9e9e43786e2a045f67c10315bb30ad18493bdbc1eb5ba42ea326"}, "downloads": -1, "filename": "webhist-1.0.0.tar.gz", "has_sig": false, "md5_digest": "7f36ebdbf04b8b5bce13879ba771d38b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4770, "upload_time": "2019-03-21T08:27:41", "upload_time_iso_8601": "2019-03-21T08:27:41.716415Z", "url": "https://files.pythonhosted.org/packages/a5/f0/0b9ff7dd25ce9bb5fb6bab972560a6a740dfbe5cb2a7e5566a1e9e8c092f/webhist-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:31:05 2020"}