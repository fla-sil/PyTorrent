{"info": {"author": "Maciej Matraszek", "author_email": "matraszek.maciej@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# img2unicode\nA tool to display images as Unicode in your terminal.\nThe library is currently optimized for Ubuntu Mono font rendered by libvte (Gnome Terminal, Terminator etc.) i.e. it works on stock Ubuntu.\n\n````bash\npip install img2unicode\nimgcat image.jpg\n````\n\n\n## Usage\n\n```python\nimport img2unicode\n# Use Unicode Block Elements\noptimizer = img2unicode.FastGenericDualOptimizer(\"block\")\nrenderer = img2unicode.Renderer(default_optimizer=optimizer, max_h=60, max_w=160)\nrenderer.render_terminal('examples/obama.jpg', 'obama-block.txt')\n\n# Pair Renderer to Optimizer\noptimizer = img2unicode.FastGammaOptimizer(\"no_block\")\nrenderer = img2unicode.GammaRenderer(default_optimizer=optimizer, max_h=60, max_w=160)\nrenderer.render_terminal('examples/obama.jpg', 'obama-noblock.txt')\n\npil_image = renderer.prerender('examples/obama.jpg')\npil_image.save('obama-rendered.png')\n\n# Use own mask: it may be name from common masks (see source), slice or numpy bool array.\nascii_optimizer = img2unicode.FastGammaOptimizer(slice(32, 127), use_color=False)\n# Get the characters, foreground and background colors. Use non-default optimizer.\nchars, fores, backs = renderer.render_numpy('examples/obama.jpg', optimizer=ascii_optimizer)\n```\n\n## Optimizers\nHere is a quick comparison of the most usable optimizers:\n\n| FastQuadDualOptimizer() |  FastGenericDualOptimizer (\"block\") | FastGammaOptimizer (charmask=\"no_block\") | FastGammaOptimizer (charmask=\"no_block\", use_color=False) |\n| --- | --- | --- | ---\n| Choses from 4-pixel characters like \u259a | Optimizes foreground/background for whole [Unicode Block Elements](https://en.wikipedia.org/wiki/Block_Elements). | Optimizes foreground color for all Unicode rendered in single cell. | Same, but does't use terminal colors. |\n| ![](examples/obama/dual/quad.png) | ![](examples/obama/dual/fast-block.png) | ![](examples/obama/gamma/fast-noblock.png) | ![](examples/obama/gamma/fast-noblock-bw.png) |\n| ![](examples/matplotlib/dual/quad.png) | ![](examples/matplotlib/dual/fast-block.png) | ![](examples/matplotlib/gamma/fast-noblock.png)  |  ![](examples/matplotlib/gamma/fast-noblock-bw.png) |\n| Good color representation | Good color and crisper image | Crisp edges with black | Pure art, no color. |\n| Foreground & background    | Foreground & background | Just foreground | No color |\n| ~5Hz | ~4Hz | ~1Hz | ~2Hz |\n| O(S*T), T=7 | O(S*T), T=24 | O(S*log(T)), T=5553 | O(S*log(T)), T=5553 |\n\nWhere `S` is the number of 16x8 pixel samples to optimize for and `T` is the number of templates.\n\n## See it yourself\n\nUse the included `termview` script to browse images with all renderers:\n\n```bash\ntermview examples/obama.jpg\n```\n![termview demo](examples/termview.gif)\n\nor use `imgcat` to display an image in your terminal:\n\n```bash\nimgcat examples/obama.jpg\n```\n\n\n## More samples\nTo see how other optimizers compare to each other, see [examples/README.md](examples/README.md).\n\nTo see more eyecandy of photos, videos and plots, see the [matrach/img2unicode-deoms repo](https://github.com/matrach/img2unicode-demos)\n\n# TODO\n\n  - [ ] write more docs, document code\n  - [ ] describe how it works in readme\n  - [ ] solve foreground & background optimization sublinear in templates\n  - [ ] add support for Unicode 13 Legacy Computing block\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/matrach/img2unicode", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "img2unicode", "package_url": "https://pypi.org/project/img2unicode/", "platform": "", "project_url": "https://pypi.org/project/img2unicode/", "project_urls": {"Homepage": "https://github.com/matrach/img2unicode"}, "release_url": "https://pypi.org/project/img2unicode/0.1a6/", "requires_dist": ["numpy", "pandas", "scikit-image", "pillow", "sklearn", "n2", "cython", "urwid", "click", "pytest ; extra == 'develop'", "pytest-cov ; extra == 'develop'", "sphinx ; extra == 'develop'", "sphinx-autodoc-typehints ; extra == 'develop'"], "requires_python": ">=3.6", "summary": "Convert images to unicode based on font templates. Especially usable in terminal.", "version": "0.1a6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>img2unicode</h1>\n<p>A tool to display images as Unicode in your terminal.\nThe library is currently optimized for Ubuntu Mono font rendered by libvte (Gnome Terminal, Terminator etc.) i.e. it works on stock Ubuntu.</p>\n<pre>pip install img2unicode\nimgcat image.jpg\n</pre>\n<h2>Usage</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">img2unicode</span>\n<span class=\"c1\"># Use Unicode Block Elements</span>\n<span class=\"n\">optimizer</span> <span class=\"o\">=</span> <span class=\"n\">img2unicode</span><span class=\"o\">.</span><span class=\"n\">FastGenericDualOptimizer</span><span class=\"p\">(</span><span class=\"s2\">\"block\"</span><span class=\"p\">)</span>\n<span class=\"n\">renderer</span> <span class=\"o\">=</span> <span class=\"n\">img2unicode</span><span class=\"o\">.</span><span class=\"n\">Renderer</span><span class=\"p\">(</span><span class=\"n\">default_optimizer</span><span class=\"o\">=</span><span class=\"n\">optimizer</span><span class=\"p\">,</span> <span class=\"n\">max_h</span><span class=\"o\">=</span><span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"n\">max_w</span><span class=\"o\">=</span><span class=\"mi\">160</span><span class=\"p\">)</span>\n<span class=\"n\">renderer</span><span class=\"o\">.</span><span class=\"n\">render_terminal</span><span class=\"p\">(</span><span class=\"s1\">'examples/obama.jpg'</span><span class=\"p\">,</span> <span class=\"s1\">'obama-block.txt'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Pair Renderer to Optimizer</span>\n<span class=\"n\">optimizer</span> <span class=\"o\">=</span> <span class=\"n\">img2unicode</span><span class=\"o\">.</span><span class=\"n\">FastGammaOptimizer</span><span class=\"p\">(</span><span class=\"s2\">\"no_block\"</span><span class=\"p\">)</span>\n<span class=\"n\">renderer</span> <span class=\"o\">=</span> <span class=\"n\">img2unicode</span><span class=\"o\">.</span><span class=\"n\">GammaRenderer</span><span class=\"p\">(</span><span class=\"n\">default_optimizer</span><span class=\"o\">=</span><span class=\"n\">optimizer</span><span class=\"p\">,</span> <span class=\"n\">max_h</span><span class=\"o\">=</span><span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"n\">max_w</span><span class=\"o\">=</span><span class=\"mi\">160</span><span class=\"p\">)</span>\n<span class=\"n\">renderer</span><span class=\"o\">.</span><span class=\"n\">render_terminal</span><span class=\"p\">(</span><span class=\"s1\">'examples/obama.jpg'</span><span class=\"p\">,</span> <span class=\"s1\">'obama-noblock.txt'</span><span class=\"p\">)</span>\n\n<span class=\"n\">pil_image</span> <span class=\"o\">=</span> <span class=\"n\">renderer</span><span class=\"o\">.</span><span class=\"n\">prerender</span><span class=\"p\">(</span><span class=\"s1\">'examples/obama.jpg'</span><span class=\"p\">)</span>\n<span class=\"n\">pil_image</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"s1\">'obama-rendered.png'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Use own mask: it may be name from common masks (see source), slice or numpy bool array.</span>\n<span class=\"n\">ascii_optimizer</span> <span class=\"o\">=</span> <span class=\"n\">img2unicode</span><span class=\"o\">.</span><span class=\"n\">FastGammaOptimizer</span><span class=\"p\">(</span><span class=\"nb\">slice</span><span class=\"p\">(</span><span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"mi\">127</span><span class=\"p\">),</span> <span class=\"n\">use_color</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"c1\"># Get the characters, foreground and background colors. Use non-default optimizer.</span>\n<span class=\"n\">chars</span><span class=\"p\">,</span> <span class=\"n\">fores</span><span class=\"p\">,</span> <span class=\"n\">backs</span> <span class=\"o\">=</span> <span class=\"n\">renderer</span><span class=\"o\">.</span><span class=\"n\">render_numpy</span><span class=\"p\">(</span><span class=\"s1\">'examples/obama.jpg'</span><span class=\"p\">,</span> <span class=\"n\">optimizer</span><span class=\"o\">=</span><span class=\"n\">ascii_optimizer</span><span class=\"p\">)</span>\n</pre>\n<h2>Optimizers</h2>\n<p>Here is a quick comparison of the most usable optimizers:</p>\n<table>\n<thead>\n<tr>\n<th>FastQuadDualOptimizer()</th>\n<th>FastGenericDualOptimizer (\"block\")</th>\n<th>FastGammaOptimizer (charmask=\"no_block\")</th>\n<th>FastGammaOptimizer (charmask=\"no_block\", use_color=False)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Choses from 4-pixel characters like \u259a</td>\n<td>Optimizes foreground/background for whole <a href=\"https://en.wikipedia.org/wiki/Block_Elements\" rel=\"nofollow\">Unicode Block Elements</a>.</td>\n<td>Optimizes foreground color for all Unicode rendered in single cell.</td>\n<td>Same, but does't use terminal colors.</td>\n</tr>\n<tr>\n<td><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/79bb99e6cb1a21a71d73e68e549eef790dc3f368/6578616d706c65732f6f62616d612f6475616c2f717561642e706e67\"></td>\n<td><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/34357b7a446dd5b96a1103837074b6b20f84861e/6578616d706c65732f6f62616d612f6475616c2f666173742d626c6f636b2e706e67\"></td>\n<td><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9ec841fabdfcb5441354006a2d8450881b6140ef/6578616d706c65732f6f62616d612f67616d6d612f666173742d6e6f626c6f636b2e706e67\"></td>\n<td><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5b653831b7a48a711a19e3559ea8327681cbf3d1/6578616d706c65732f6f62616d612f67616d6d612f666173742d6e6f626c6f636b2d62772e706e67\"></td>\n</tr>\n<tr>\n<td><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/acbac3e8f11ee89b7a8682e9b3da18b19ab08b3b/6578616d706c65732f6d6174706c6f746c69622f6475616c2f717561642e706e67\"></td>\n<td><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8bda7c79bda1ecc933574a1e9a9c3af0dc5a9180/6578616d706c65732f6d6174706c6f746c69622f6475616c2f666173742d626c6f636b2e706e67\"></td>\n<td><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/60844eb4610edaaf30f01378f0295bfa91abd502/6578616d706c65732f6d6174706c6f746c69622f67616d6d612f666173742d6e6f626c6f636b2e706e67\"></td>\n<td><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/acd5b2114c46a11d1efd8fd3076c2ab47737da93/6578616d706c65732f6d6174706c6f746c69622f67616d6d612f666173742d6e6f626c6f636b2d62772e706e67\"></td>\n</tr>\n<tr>\n<td>Good color representation</td>\n<td>Good color and crisper image</td>\n<td>Crisp edges with black</td>\n<td>Pure art, no color.</td>\n</tr>\n<tr>\n<td>Foreground &amp; background</td>\n<td>Foreground &amp; background</td>\n<td>Just foreground</td>\n<td>No color</td>\n</tr>\n<tr>\n<td>~5Hz</td>\n<td>~4Hz</td>\n<td>~1Hz</td>\n<td>~2Hz</td>\n</tr>\n<tr>\n<td>O(S*T), T=7</td>\n<td>O(S*T), T=24</td>\n<td>O(S*log(T)), T=5553</td>\n<td>O(S*log(T)), T=5553</td>\n</tr></tbody></table>\n<p>Where <code>S</code> is the number of 16x8 pixel samples to optimize for and <code>T</code> is the number of templates.</p>\n<h2>See it yourself</h2>\n<p>Use the included <code>termview</code> script to browse images with all renderers:</p>\n<pre>termview examples/obama.jpg\n</pre>\n<p><img alt=\"termview demo\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/380f527dc0b7843c6e9e2ae54b80b87fd7820c4b/6578616d706c65732f7465726d766965772e676966\"></p>\n<p>or use <code>imgcat</code> to display an image in your terminal:</p>\n<pre>imgcat examples/obama.jpg\n</pre>\n<h2>More samples</h2>\n<p>To see how other optimizers compare to each other, see <a href=\"examples/README.md\" rel=\"nofollow\">examples/README.md</a>.</p>\n<p>To see more eyecandy of photos, videos and plots, see the <a href=\"https://github.com/matrach/img2unicode-demos\" rel=\"nofollow\">matrach/img2unicode-deoms repo</a></p>\n<h1>TODO</h1>\n<ul>\n<li>[ ] write more docs, document code</li>\n<li>[ ] describe how it works in readme</li>\n<li>[ ] solve foreground &amp; background optimization sublinear in templates</li>\n<li>[ ] add support for Unicode 13 Legacy Computing block</li>\n</ul>\n\n          </div>"}, "last_serial": 7166551, "releases": {"0.1a1": [{"comment_text": "", "digests": {"md5": "89d48fb0bc33fa834890eb586c24e845", "sha256": "e7aca89459b16f9f0b3caf5c84b5314eec7c8b2655af412c5bd07012ce460e60"}, "downloads": -1, "filename": "img2unicode-0.1a1-py3-none-any.whl", "has_sig": false, "md5_digest": "89d48fb0bc33fa834890eb586c24e845", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 20876004, "upload_time": "2020-04-30T22:46:54", "upload_time_iso_8601": "2020-04-30T22:46:54.931860Z", "url": "https://files.pythonhosted.org/packages/d8/c9/8fec4066a2422fcef673112f5345af64bc8b3e05ef92bf08a07b3042296e/img2unicode-0.1a1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6ff10d905894427e1be3cc38bee54a27", "sha256": "65f1a5e8298f5071ce86229b5d44b2985ff23af1b9faaabffbd514c4cff14d92"}, "downloads": -1, "filename": "img2unicode-0.1a1.tar.gz", "has_sig": false, "md5_digest": "6ff10d905894427e1be3cc38bee54a27", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 20874061, "upload_time": "2020-04-30T22:48:37", "upload_time_iso_8601": "2020-04-30T22:48:37.010971Z", "url": "https://files.pythonhosted.org/packages/78/ff/482e43cfa03c1aeb8bc7aca911f9d9419198ded337062bdccc85884e2d46/img2unicode-0.1a1.tar.gz", "yanked": false}], "0.1a2": [{"comment_text": "", "digests": {"md5": "1668329740b73f8fc68610bd3b69b59a", "sha256": "bf3a81c3b62f7a227dbd793336c81b5536a98409d9459300c35877395e6fc77c"}, "downloads": -1, "filename": "img2unicode-0.1a2-py3-none-any.whl", "has_sig": false, "md5_digest": "1668329740b73f8fc68610bd3b69b59a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 20877384, "upload_time": "2020-04-30T23:46:21", "upload_time_iso_8601": "2020-04-30T23:46:21.302551Z", "url": "https://files.pythonhosted.org/packages/aa/38/052a3bd7c1e6dfa81d34e6a6663dba9547ed0b715f81c01f55f727c3349a/img2unicode-0.1a2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "69912b5ad53c4974f5ee3c1981a8dd4a", "sha256": "98bb7724b5ca01349f7cfb3bf221703c06588413833b436d7ef1057c3896a9fd"}, "downloads": -1, "filename": "img2unicode-0.1a2.tar.gz", "has_sig": false, "md5_digest": "69912b5ad53c4974f5ee3c1981a8dd4a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 20876582, "upload_time": "2020-04-30T23:46:33", "upload_time_iso_8601": "2020-04-30T23:46:33.843319Z", "url": "https://files.pythonhosted.org/packages/37/b6/d4df7458fadc77268c1a0ad5aa3e06e177656e991c522c500187ed2fa0ad/img2unicode-0.1a2.tar.gz", "yanked": false}], "0.1a3": [{"comment_text": "", "digests": {"md5": "9b0e551e4d5ee7cb70a847ee89f09a97", "sha256": "cd69cc1e5c3be69c6347067baf727fd6fbf3bcf0385a304949566528eac2ef44"}, "downloads": -1, "filename": "img2unicode-0.1a3-py3-none-any.whl", "has_sig": false, "md5_digest": "9b0e551e4d5ee7cb70a847ee89f09a97", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 19784932, "upload_time": "2020-05-03T21:12:49", "upload_time_iso_8601": "2020-05-03T21:12:49.950622Z", "url": "https://files.pythonhosted.org/packages/e1/4b/6466168e4e40077ccc642308297ca924120e39d76085cf51cd507a4ec289/img2unicode-0.1a3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c19d6b82f7935a23eb75f9708beedf90", "sha256": "2b72011bce10583e2925bcd93b13b5bfd7a722ec2093f4741317161a57d5467b"}, "downloads": -1, "filename": "img2unicode-0.1a3.tar.gz", "has_sig": false, "md5_digest": "c19d6b82f7935a23eb75f9708beedf90", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 19785919, "upload_time": "2020-05-03T21:13:04", "upload_time_iso_8601": "2020-05-03T21:13:04.728630Z", "url": "https://files.pythonhosted.org/packages/50/48/db83850d1f2e44cab19bbca4584cd38aedc63ea449f548d4c50991f84bc5/img2unicode-0.1a3.tar.gz", "yanked": false}], "0.1a4": [{"comment_text": "", "digests": {"md5": "a999200165aeee15b64d2b7daee74dee", "sha256": "3b8d690f1844d67a0fdf35cec5a54a3b0b32404d6ce7106d4a01a222f359a3b1"}, "downloads": -1, "filename": "img2unicode-0.1a4-py3-none-any.whl", "has_sig": false, "md5_digest": "a999200165aeee15b64d2b7daee74dee", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 19784953, "upload_time": "2020-05-04T09:27:05", "upload_time_iso_8601": "2020-05-04T09:27:05.765967Z", "url": "https://files.pythonhosted.org/packages/4b/c2/a04178dcf7ee081c3e432bed15a914aaec942538b6069cd18059519defa1/img2unicode-0.1a4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "257c2b36d18ecda3ae0ab0b9a5744274", "sha256": "0b179c1407bd97c3cd9a6d2d5dc5cec03f462b0ebab2d4faed554b783665f958"}, "downloads": -1, "filename": "img2unicode-0.1a4.tar.gz", "has_sig": false, "md5_digest": "257c2b36d18ecda3ae0ab0b9a5744274", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 19785971, "upload_time": "2020-05-04T09:27:23", "upload_time_iso_8601": "2020-05-04T09:27:23.140871Z", "url": "https://files.pythonhosted.org/packages/03/5d/1bebb83ff9a447e372df7e5ca7e0b9d0c13b87b4a15a321f7c6607ff783f/img2unicode-0.1a4.tar.gz", "yanked": false}], "0.1a5": [{"comment_text": "", "digests": {"md5": "7fbf54eb188ba8de535f99d8420e410f", "sha256": "ddb98d3a0717cef47aa5a640e8a9d5ce7e92f4edc0b1284b55a6de98aadbd57f"}, "downloads": -1, "filename": "img2unicode-0.1a5-py3-none-any.whl", "has_sig": false, "md5_digest": "7fbf54eb188ba8de535f99d8420e410f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 19784976, "upload_time": "2020-05-04T17:59:34", "upload_time_iso_8601": "2020-05-04T17:59:34.433368Z", "url": "https://files.pythonhosted.org/packages/5f/16/15272534a2b79bd09d1c8d19e60f40407223f5b38329dd68de5a4e65102c/img2unicode-0.1a5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "24c8099426344ee0092fd5473201c696", "sha256": "dd0616611e5839153f6c619bff21bed32cb699df7257a87a300195a0ea760f38"}, "downloads": -1, "filename": "img2unicode-0.1a5.tar.gz", "has_sig": false, "md5_digest": "24c8099426344ee0092fd5473201c696", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 19786000, "upload_time": "2020-05-04T18:00:00", "upload_time_iso_8601": "2020-05-04T18:00:00.252692Z", "url": "https://files.pythonhosted.org/packages/48/c6/e212b4ab298001f7ce7584247bfa3b31d10946cc06c60713c53c14139eab/img2unicode-0.1a5.tar.gz", "yanked": false}], "0.1a6": [{"comment_text": "", "digests": {"md5": "2a27bd00289cbfb84ad46e5640a4b64e", "sha256": "34823802e801c550effd233938b2def2191ab7fd90e2e308acfa2c8b3c27c417"}, "downloads": -1, "filename": "img2unicode-0.1a6-py3-none-any.whl", "has_sig": false, "md5_digest": "2a27bd00289cbfb84ad46e5640a4b64e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 19784992, "upload_time": "2020-05-04T18:44:25", "upload_time_iso_8601": "2020-05-04T18:44:25.283279Z", "url": "https://files.pythonhosted.org/packages/49/61/06dda53b6e7e42f4a8b3edeb391b88eff9f427247bb0e2854f2f6ad9fec0/img2unicode-0.1a6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "43bfde061ca5fbdad124fadb34b0f7a4", "sha256": "d74bfe2d9a2e6d7a7bee92f60898a92484abb06e816b3f29385ef6e74a6015a6"}, "downloads": -1, "filename": "img2unicode-0.1a6.tar.gz", "has_sig": false, "md5_digest": "43bfde061ca5fbdad124fadb34b0f7a4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 19786001, "upload_time": "2020-05-04T18:44:33", "upload_time_iso_8601": "2020-05-04T18:44:33.443624Z", "url": "https://files.pythonhosted.org/packages/ad/08/70662db4108cd09573aec557b5752cb6d7c7d36d94b544500c4b9b87a16b/img2unicode-0.1a6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2a27bd00289cbfb84ad46e5640a4b64e", "sha256": "34823802e801c550effd233938b2def2191ab7fd90e2e308acfa2c8b3c27c417"}, "downloads": -1, "filename": "img2unicode-0.1a6-py3-none-any.whl", "has_sig": false, "md5_digest": "2a27bd00289cbfb84ad46e5640a4b64e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 19784992, "upload_time": "2020-05-04T18:44:25", "upload_time_iso_8601": "2020-05-04T18:44:25.283279Z", "url": "https://files.pythonhosted.org/packages/49/61/06dda53b6e7e42f4a8b3edeb391b88eff9f427247bb0e2854f2f6ad9fec0/img2unicode-0.1a6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "43bfde061ca5fbdad124fadb34b0f7a4", "sha256": "d74bfe2d9a2e6d7a7bee92f60898a92484abb06e816b3f29385ef6e74a6015a6"}, "downloads": -1, "filename": "img2unicode-0.1a6.tar.gz", "has_sig": false, "md5_digest": "43bfde061ca5fbdad124fadb34b0f7a4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 19786001, "upload_time": "2020-05-04T18:44:33", "upload_time_iso_8601": "2020-05-04T18:44:33.443624Z", "url": "https://files.pythonhosted.org/packages/ad/08/70662db4108cd09573aec557b5752cb6d7c7d36d94b544500c4b9b87a16b/img2unicode-0.1a6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:56:43 2020"}