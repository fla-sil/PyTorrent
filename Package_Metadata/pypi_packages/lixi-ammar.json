{"info": {"author": "Ammar Khan", "author_email": "lixilab@lixi.org.au", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3"], "description": "LIXI\n====\n\n``lixi`` is a python package that simplifies working with the LIXI data standards and with messages that are based on the LIXI standards. \n\n[LIXI Limited]([https://lixi.org.au/) has been facilitating collaboration within the Australian Lending industry for almost two decades, by managing a suite of data standards (for both XML & JSON) used across the industry to improve the efficiency of B2B electronic messaging.\n\n# Table of Contents\n\n[TOC]\n\nInstallation\n============\n\nRequirements\n------------\n\nThe installation of the ``lixi`` package requires [pip]( https://pypi.org/project/pip/ ) to be installed for package installation with your Python installation.\n\nThe ``lixi`` package is not supported by Python 2.\n\nThe installation of the ``lixi`` using pip will install the following libraries as required dependencies:\n\n* [boto3](https://github.com/boto/boto3)\n* [isodate](https://github.com/gweis/isodate/)\n* [jsonschema](https://github.com/Julian/jsonschema)\n* [lxml](https://lxml.de/)\n* [xmljson](https://github.com/sanand0/xmljson)\n\nInstallation with pip\n----------------\nOpen a command prompt or a bash window on your PC and type the following command. \n\n```python\npip install lixi-ammar\n```\n\nNow to use the ``lixi`` package, simply import the library into your Python project, like so:\n\n```python\nimport lixi\n```\n\nand that's it! You're ready to go.\n\nAssumptions\n-----------\n\nThe ``lixi`` package requires you to have access to the required LIXI schemas. Members and Licensees of LIXI can access these through the LIXI website or via an API provided by LIXI (contact LIXI for more details if you would like to use this API retrieval mechanism).\n\n# Quickstart Guide \n\n## Validate a sample XML file\n\nThe simplest way to get started is to create a new python file ``lixi-quickstart-demo.py`` in a new folder. In the same directory copy a LIXI sample message and the corresponding LIXI schema. In this case, we have a sample message ``sample-message.xml`` and the schema ``LIXI-CAL-2.6.23.xsd``.\n\nIn the python file, import the new package, along with the ``os`` library.\n\nUsing paths relative to the ``lixi-quickstart-demo.py`` file it is trivial to read the message, which also validates the message against the schema.\n\n```python\nimport lixi, os \n\ndir = os.path.dirname(__file__)\n\nxml_obj = lixi.read_message(message_path=os.path.join(dir, 'sample-message.xml'), \n                  schema_path=os.path.join(dir, 'LIXI-CAL-2_6_23.xsd'))      \n```\n\nIf the sample xml message is not well formed or is invalid against the ``LIXI-CAL-2_6_23.xsd`` schema, and error will be thrown indicating the problem.\n\nIf the sample xml message is a well formed and validates against the ``LIXI-CAL-2_6_23.xsd`` schema, the execution of the ``lixi.read_message()`` function will succeed silently. \n\n## Serialise XML to String or Print to Console\n\nNow that we have loaded the ``sample-message.xml`` into the ``xml_obj`` variable, we can print it to the console:\n\n```python\nxml_obj.pretty_print()\n```\n\nOr serialise the object to a string: \n\n```python\nxml_string = xml_obj.to_string()\n```\n\n## Convert from XML to JSON\n\nWe can now use the ``.to_json(to_return)`` function on the object to return the equivalent message in JSON format:\n\n```python\njson_obj = xml_obj.to_json(to_return=True)\n```\n\n## Serialise JSON to String or Print to Console\n\nWe can also print the JSON object to the console:\n\n```\njson_obj.pretty_print()\n```\n\nOr convert it to a string:\n\n```python\njson_string = json_obj.to_string()\n```\n\n## Convert from JSON to XML\n\nWe can also use the ``.to_xml(to_return)`` function on the object based on the JSON message to return the equivalent message in XML format:\n\n```python\nxml_obj_2 = json_obj.to_xml(to_return=True)\n```\n\n\n\nUsing the LIXI package\n==========\n\n\n\nFetching a LIXI schema\n----------------------\n\nAll good things in LIXI start with your own copy of a LIXI schema. You can obtain a LIXI schema from the website.  \n\nAlternatively, you can message the LIXI team to obtain LIXI access and secret key to automatically obtain your own copy of schema online. Which you can use to obtain schemas like so.\n```python\nlixi.set_credentials('######', '######')\n```\n\nHaving specified the source (folder or credentials), you can fetch the schema for use in tool by:\n```python\nxml_schema = lixi.get_xml_schema(lixi_transaction_type='CAL')\n```\nOr:\n```python\njson_schema = lixi.get_json_schema(lixi_transaction_type='CAL')\n```\n\nYou can use the same function to **convert** a schema to JSON or XSD.\n```python\nxml_schema = lixi.get_xml_schema(schema_string=json_schema_string)\n```\nOr:\n```python\njson_schema = lixi.get_json_schema(schema_string=xml_schema_string)\n```\n\n**Note:** It should be noted that for all functionality in this package you would need to use the Annotated version of the XML schema.\n\nReferencing the LIXI schema\n-------------------\n\nTo be able to work with the schema, the package requires you to specify the location of the schema,\n\nAs a path to the schema in the appropriate function :\n```python\nlixi.read_message(schema_path='C:/Path/to/Schema-Annotated.xsd')\n```\n\nOr, as a path to the folder that contains the schema (this instruction is used before using any functions that use a schema):\n```python\nlixi.set_schema_folder('C:/Path/to/Schema/Folder')\n```\n\nReading a LIXI message\n-------------------\n\nYou can read a LIXI message (XML or JSON) from a string:\n```python\ntest_message = lixi.read_message(message=xml)\n```\n\nIf you have a LIXI message on file you can read like so:\n```python\ntest_message = lixi.read_message(message_path='C:/Path/to/Message.xml')\n```\n\nConverting a message\n------------------\n\nAfter reading a LIXI XML message, you can convert it to an equivalent JSON like so:\n```python\ntest_message.to_json()\n```\n\nOr if you started reading a LIXI JSON message, you can convert it to XML:\n```python\ntest_message.to_xml()\n```\n\n\nGetting element paths\n-------------\n\nElement Paths are the XML paths of an item in the LIXI schema: So Person Applicant has the following element path in the LIXI Schema:\n\n``Package.Content.Application.PersonApplicant``\n\nAn element path can be used to automate modification of an element, to generate a [customised schema](https://standards.lixi.org.au/lixi2/CustomisationByRestriction) and it can be searched on the [LIXI schema documentation](https://smedia.lixi.org.au/standards-docs.html?standard=master&version=current&component=element&item=Package) to get a host of information like definition, correct use, etc among other things. \n\n\nAfter reading a LIXI message, you can get a list of its element paths:\n```python\npaths = test_message.get_message_paths()\n```\n\nYou can save these element paths to a file:\n```python\ntest_message.get_message_paths(output_path='C:/Path/to/Element_Paths.txt')\n```\n\nYou can also get a list of all element paths of the schema:\n```python\ntest_message.get_schema_paths()\n```\n\nOr if you don't want to read a message but want to obtain all schema element paths:\n```python\nlixi.get_schema_paths('CAL','2.6.19')\n```\n\nGetting a customized subschema\n---------------------\n\nLIXI provides its members a [tool](https://standards.lixi.org.au/lixi2/CustomisationByRestriction) to derive a subschema that only uses sub set of elements available in the full LIXI schema.\n\nThe above tool utilises a instructions file which the library can provide.\n\nAfter reading a message, you can derive a customisation instructions file from a sample correct message by:\n```python\ninstructions_xml = test_message.get_restriction_paths_for_schema()\n```\n\nOr, you can output the same to a file by specifying the output path:\n```python\ntest_message.get_restriction_paths_for_schema(output_path=\"C:/Path/to/Customisation_instructions.xml'\")\n```\n\nThe generated instructions_xml is used to generate a customisation instructions. You can now use it generate your own set of customised subschemas:\n```python\nlixi.get_custom_schema(instructions=instructions_xml, schema_path='Path/To/Schema_Annotated.xsd', output_name='DEMO_CAL', output_folder='C:/Store/It/Here')\n```\n\nFinally, a message can also be used to generate a custom schema. This would use the element paths of the message to derive a restricted version of the schema:\n```python\ncustomised_schema = test_message.generate_custom_schema()\n```\n\nValidating with Schematron\n---------------------\n\n[Schematron](http://schematron.com/) is a rule-based validation tool for making business rules assertions. LIXI messages can easily be validated with schematron provided the proper business rules schema is specified.\n```python\nvalid, message = test_message.validate_schematron(schematron_schema_text=schematron_as_string)\n```\n\nTransforming message to a different version\n---------------------\n\nYou can transform the message to bring it up to date/or down grade with a different version through the package:\n```python\ntest_message.transform_message(to_version='2.6.24')\n```\n\nif you don't specify a TO version, the most updated version is automatically chosen:\n```python\ntest_message.transform_message()\n```\n\nAs expected this transformation is not loss-less, you can a list of items removed per version jump in warnings file:\n```python\ntest_message.get_transform_warnings(to_version='2.6.15', output_path=path)\n```\n\nSaving and pretty printing\n------------\n\nYou can save a message any time by:\n```python\ntest_message.save()\n```\n\nAnd finally, you can pretty print a message at any time with:\n```python\ntest_message.pretty_print()\n```\n\nBug reports\n===========\n\nPlease report bugs and feature requests at\n(lixilab@lixi.org.au).\n\n\nContributing\n============\n\nYou can contribute to the project in multiple ways:\n\n* Suggest new features\n* Implement features\n* Fix bugs\n* Add unit and functional tests\n* Everything else you can think of!", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://standards.lixi.org.au/lixi-tech/lixi-pypi", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "lixi-ammar", "package_url": "https://pypi.org/project/lixi-ammar/", "platform": "", "project_url": "https://pypi.org/project/lixi-ammar/", "project_urls": {"Homepage": "https://standards.lixi.org.au/lixi-tech/lixi-pypi"}, "release_url": "https://pypi.org/project/lixi-ammar/0.0.29/", "requires_dist": null, "requires_python": "", "summary": "lixi is a python package to manipulate a valid LIXI message and schema.", "version": "0.0.29", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>LIXI</h1>\n<p><code>lixi</code> is a python package that simplifies working with the LIXI data standards and with messages that are based on the LIXI standards.</p>\n<p><a href=\"%5Bhttps://lixi.org.au/\" rel=\"nofollow\">LIXI Limited</a> has been facilitating collaboration within the Australian Lending industry for almost two decades, by managing a suite of data standards (for both XML &amp; JSON) used across the industry to improve the efficiency of B2B electronic messaging.</p>\n<h1>Table of Contents</h1>\n<p>[TOC]</p>\n<h1>Installation</h1>\n<h2>Requirements</h2>\n<p>The installation of the <code>lixi</code> package requires <a href=\"https://pypi.org/project/pip/\" rel=\"nofollow\">pip</a> to be installed for package installation with your Python installation.</p>\n<p>The <code>lixi</code> package is not supported by Python 2.</p>\n<p>The installation of the <code>lixi</code> using pip will install the following libraries as required dependencies:</p>\n<ul>\n<li><a href=\"https://github.com/boto/boto3\" rel=\"nofollow\">boto3</a></li>\n<li><a href=\"https://github.com/gweis/isodate/\" rel=\"nofollow\">isodate</a></li>\n<li><a href=\"https://github.com/Julian/jsonschema\" rel=\"nofollow\">jsonschema</a></li>\n<li><a href=\"https://lxml.de/\" rel=\"nofollow\">lxml</a></li>\n<li><a href=\"https://github.com/sanand0/xmljson\" rel=\"nofollow\">xmljson</a></li>\n</ul>\n<h2>Installation with pip</h2>\n<p>Open a command prompt or a bash window on your PC and type the following command.</p>\n<pre><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">lixi</span><span class=\"o\">-</span><span class=\"n\">ammar</span>\n</pre>\n<p>Now to use the <code>lixi</code> package, simply import the library into your Python project, like so:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">lixi</span>\n</pre>\n<p>and that's it! You're ready to go.</p>\n<h2>Assumptions</h2>\n<p>The <code>lixi</code> package requires you to have access to the required LIXI schemas. Members and Licensees of LIXI can access these through the LIXI website or via an API provided by LIXI (contact LIXI for more details if you would like to use this API retrieval mechanism).</p>\n<h1>Quickstart Guide</h1>\n<h2>Validate a sample XML file</h2>\n<p>The simplest way to get started is to create a new python file <code>lixi-quickstart-demo.py</code> in a new folder. In the same directory copy a LIXI sample message and the corresponding LIXI schema. In this case, we have a sample message <code>sample-message.xml</code> and the schema <code>LIXI-CAL-2.6.23.xsd</code>.</p>\n<p>In the python file, import the new package, along with the <code>os</code> library.</p>\n<p>Using paths relative to the <code>lixi-quickstart-demo.py</code> file it is trivial to read the message, which also validates the message against the schema.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">lixi</span><span class=\"o\">,</span> <span class=\"nn\">os</span> \n\n<span class=\"nb\">dir</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">)</span>\n\n<span class=\"n\">xml_obj</span> <span class=\"o\">=</span> <span class=\"n\">lixi</span><span class=\"o\">.</span><span class=\"n\">read_message</span><span class=\"p\">(</span><span class=\"n\">message_path</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"nb\">dir</span><span class=\"p\">,</span> <span class=\"s1\">'sample-message.xml'</span><span class=\"p\">),</span> \n                  <span class=\"n\">schema_path</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"nb\">dir</span><span class=\"p\">,</span> <span class=\"s1\">'LIXI-CAL-2_6_23.xsd'</span><span class=\"p\">))</span>      \n</pre>\n<p>If the sample xml message is not well formed or is invalid against the <code>LIXI-CAL-2_6_23.xsd</code> schema, and error will be thrown indicating the problem.</p>\n<p>If the sample xml message is a well formed and validates against the <code>LIXI-CAL-2_6_23.xsd</code> schema, the execution of the <code>lixi.read_message()</code> function will succeed silently.</p>\n<h2>Serialise XML to String or Print to Console</h2>\n<p>Now that we have loaded the <code>sample-message.xml</code> into the <code>xml_obj</code> variable, we can print it to the console:</p>\n<pre><span class=\"n\">xml_obj</span><span class=\"o\">.</span><span class=\"n\">pretty_print</span><span class=\"p\">()</span>\n</pre>\n<p>Or serialise the object to a string:</p>\n<pre><span class=\"n\">xml_string</span> <span class=\"o\">=</span> <span class=\"n\">xml_obj</span><span class=\"o\">.</span><span class=\"n\">to_string</span><span class=\"p\">()</span>\n</pre>\n<h2>Convert from XML to JSON</h2>\n<p>We can now use the <code>.to_json(to_return)</code> function on the object to return the equivalent message in JSON format:</p>\n<pre><span class=\"n\">json_obj</span> <span class=\"o\">=</span> <span class=\"n\">xml_obj</span><span class=\"o\">.</span><span class=\"n\">to_json</span><span class=\"p\">(</span><span class=\"n\">to_return</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<h2>Serialise JSON to String or Print to Console</h2>\n<p>We can also print the JSON object to the console:</p>\n<pre><code>json_obj.pretty_print()\n</code></pre>\n<p>Or convert it to a string:</p>\n<pre><span class=\"n\">json_string</span> <span class=\"o\">=</span> <span class=\"n\">json_obj</span><span class=\"o\">.</span><span class=\"n\">to_string</span><span class=\"p\">()</span>\n</pre>\n<h2>Convert from JSON to XML</h2>\n<p>We can also use the <code>.to_xml(to_return)</code> function on the object based on the JSON message to return the equivalent message in XML format:</p>\n<pre><span class=\"n\">xml_obj_2</span> <span class=\"o\">=</span> <span class=\"n\">json_obj</span><span class=\"o\">.</span><span class=\"n\">to_xml</span><span class=\"p\">(</span><span class=\"n\">to_return</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<h1>Using the LIXI package</h1>\n<h2>Fetching a LIXI schema</h2>\n<p>All good things in LIXI start with your own copy of a LIXI schema. You can obtain a LIXI schema from the website.</p>\n<p>Alternatively, you can message the LIXI team to obtain LIXI access and secret key to automatically obtain your own copy of schema online. Which you can use to obtain schemas like so.</p>\n<pre><span class=\"n\">lixi</span><span class=\"o\">.</span><span class=\"n\">set_credentials</span><span class=\"p\">(</span><span class=\"s1\">'######'</span><span class=\"p\">,</span> <span class=\"s1\">'######'</span><span class=\"p\">)</span>\n</pre>\n<p>Having specified the source (folder or credentials), you can fetch the schema for use in tool by:</p>\n<pre><span class=\"n\">xml_schema</span> <span class=\"o\">=</span> <span class=\"n\">lixi</span><span class=\"o\">.</span><span class=\"n\">get_xml_schema</span><span class=\"p\">(</span><span class=\"n\">lixi_transaction_type</span><span class=\"o\">=</span><span class=\"s1\">'CAL'</span><span class=\"p\">)</span>\n</pre>\n<p>Or:</p>\n<pre><span class=\"n\">json_schema</span> <span class=\"o\">=</span> <span class=\"n\">lixi</span><span class=\"o\">.</span><span class=\"n\">get_json_schema</span><span class=\"p\">(</span><span class=\"n\">lixi_transaction_type</span><span class=\"o\">=</span><span class=\"s1\">'CAL'</span><span class=\"p\">)</span>\n</pre>\n<p>You can use the same function to <strong>convert</strong> a schema to JSON or XSD.</p>\n<pre><span class=\"n\">xml_schema</span> <span class=\"o\">=</span> <span class=\"n\">lixi</span><span class=\"o\">.</span><span class=\"n\">get_xml_schema</span><span class=\"p\">(</span><span class=\"n\">schema_string</span><span class=\"o\">=</span><span class=\"n\">json_schema_string</span><span class=\"p\">)</span>\n</pre>\n<p>Or:</p>\n<pre><span class=\"n\">json_schema</span> <span class=\"o\">=</span> <span class=\"n\">lixi</span><span class=\"o\">.</span><span class=\"n\">get_json_schema</span><span class=\"p\">(</span><span class=\"n\">schema_string</span><span class=\"o\">=</span><span class=\"n\">xml_schema_string</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Note:</strong> It should be noted that for all functionality in this package you would need to use the Annotated version of the XML schema.</p>\n<h2>Referencing the LIXI schema</h2>\n<p>To be able to work with the schema, the package requires you to specify the location of the schema,</p>\n<p>As a path to the schema in the appropriate function :</p>\n<pre><span class=\"n\">lixi</span><span class=\"o\">.</span><span class=\"n\">read_message</span><span class=\"p\">(</span><span class=\"n\">schema_path</span><span class=\"o\">=</span><span class=\"s1\">'C:/Path/to/Schema-Annotated.xsd'</span><span class=\"p\">)</span>\n</pre>\n<p>Or, as a path to the folder that contains the schema (this instruction is used before using any functions that use a schema):</p>\n<pre><span class=\"n\">lixi</span><span class=\"o\">.</span><span class=\"n\">set_schema_folder</span><span class=\"p\">(</span><span class=\"s1\">'C:/Path/to/Schema/Folder'</span><span class=\"p\">)</span>\n</pre>\n<h2>Reading a LIXI message</h2>\n<p>You can read a LIXI message (XML or JSON) from a string:</p>\n<pre><span class=\"n\">test_message</span> <span class=\"o\">=</span> <span class=\"n\">lixi</span><span class=\"o\">.</span><span class=\"n\">read_message</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"o\">=</span><span class=\"n\">xml</span><span class=\"p\">)</span>\n</pre>\n<p>If you have a LIXI message on file you can read like so:</p>\n<pre><span class=\"n\">test_message</span> <span class=\"o\">=</span> <span class=\"n\">lixi</span><span class=\"o\">.</span><span class=\"n\">read_message</span><span class=\"p\">(</span><span class=\"n\">message_path</span><span class=\"o\">=</span><span class=\"s1\">'C:/Path/to/Message.xml'</span><span class=\"p\">)</span>\n</pre>\n<h2>Converting a message</h2>\n<p>After reading a LIXI XML message, you can convert it to an equivalent JSON like so:</p>\n<pre><span class=\"n\">test_message</span><span class=\"o\">.</span><span class=\"n\">to_json</span><span class=\"p\">()</span>\n</pre>\n<p>Or if you started reading a LIXI JSON message, you can convert it to XML:</p>\n<pre><span class=\"n\">test_message</span><span class=\"o\">.</span><span class=\"n\">to_xml</span><span class=\"p\">()</span>\n</pre>\n<h2>Getting element paths</h2>\n<p>Element Paths are the XML paths of an item in the LIXI schema: So Person Applicant has the following element path in the LIXI Schema:</p>\n<p><code>Package.Content.Application.PersonApplicant</code></p>\n<p>An element path can be used to automate modification of an element, to generate a <a href=\"https://standards.lixi.org.au/lixi2/CustomisationByRestriction\" rel=\"nofollow\">customised schema</a> and it can be searched on the <a href=\"https://smedia.lixi.org.au/standards-docs.html?standard=master&amp;version=current&amp;component=element&amp;item=Package\" rel=\"nofollow\">LIXI schema documentation</a> to get a host of information like definition, correct use, etc among other things.</p>\n<p>After reading a LIXI message, you can get a list of its element paths:</p>\n<pre><span class=\"n\">paths</span> <span class=\"o\">=</span> <span class=\"n\">test_message</span><span class=\"o\">.</span><span class=\"n\">get_message_paths</span><span class=\"p\">()</span>\n</pre>\n<p>You can save these element paths to a file:</p>\n<pre><span class=\"n\">test_message</span><span class=\"o\">.</span><span class=\"n\">get_message_paths</span><span class=\"p\">(</span><span class=\"n\">output_path</span><span class=\"o\">=</span><span class=\"s1\">'C:/Path/to/Element_Paths.txt'</span><span class=\"p\">)</span>\n</pre>\n<p>You can also get a list of all element paths of the schema:</p>\n<pre><span class=\"n\">test_message</span><span class=\"o\">.</span><span class=\"n\">get_schema_paths</span><span class=\"p\">()</span>\n</pre>\n<p>Or if you don't want to read a message but want to obtain all schema element paths:</p>\n<pre><span class=\"n\">lixi</span><span class=\"o\">.</span><span class=\"n\">get_schema_paths</span><span class=\"p\">(</span><span class=\"s1\">'CAL'</span><span class=\"p\">,</span><span class=\"s1\">'2.6.19'</span><span class=\"p\">)</span>\n</pre>\n<h2>Getting a customized subschema</h2>\n<p>LIXI provides its members a <a href=\"https://standards.lixi.org.au/lixi2/CustomisationByRestriction\" rel=\"nofollow\">tool</a> to derive a subschema that only uses sub set of elements available in the full LIXI schema.</p>\n<p>The above tool utilises a instructions file which the library can provide.</p>\n<p>After reading a message, you can derive a customisation instructions file from a sample correct message by:</p>\n<pre><span class=\"n\">instructions_xml</span> <span class=\"o\">=</span> <span class=\"n\">test_message</span><span class=\"o\">.</span><span class=\"n\">get_restriction_paths_for_schema</span><span class=\"p\">()</span>\n</pre>\n<p>Or, you can output the same to a file by specifying the output path:</p>\n<pre><span class=\"n\">test_message</span><span class=\"o\">.</span><span class=\"n\">get_restriction_paths_for_schema</span><span class=\"p\">(</span><span class=\"n\">output_path</span><span class=\"o\">=</span><span class=\"s2\">\"C:/Path/to/Customisation_instructions.xml'\"</span><span class=\"p\">)</span>\n</pre>\n<p>The generated instructions_xml is used to generate a customisation instructions. You can now use it generate your own set of customised subschemas:</p>\n<pre><span class=\"n\">lixi</span><span class=\"o\">.</span><span class=\"n\">get_custom_schema</span><span class=\"p\">(</span><span class=\"n\">instructions</span><span class=\"o\">=</span><span class=\"n\">instructions_xml</span><span class=\"p\">,</span> <span class=\"n\">schema_path</span><span class=\"o\">=</span><span class=\"s1\">'Path/To/Schema_Annotated.xsd'</span><span class=\"p\">,</span> <span class=\"n\">output_name</span><span class=\"o\">=</span><span class=\"s1\">'DEMO_CAL'</span><span class=\"p\">,</span> <span class=\"n\">output_folder</span><span class=\"o\">=</span><span class=\"s1\">'C:/Store/It/Here'</span><span class=\"p\">)</span>\n</pre>\n<p>Finally, a message can also be used to generate a custom schema. This would use the element paths of the message to derive a restricted version of the schema:</p>\n<pre><span class=\"n\">customised_schema</span> <span class=\"o\">=</span> <span class=\"n\">test_message</span><span class=\"o\">.</span><span class=\"n\">generate_custom_schema</span><span class=\"p\">()</span>\n</pre>\n<h2>Validating with Schematron</h2>\n<p><a href=\"http://schematron.com/\" rel=\"nofollow\">Schematron</a> is a rule-based validation tool for making business rules assertions. LIXI messages can easily be validated with schematron provided the proper business rules schema is specified.</p>\n<pre><span class=\"n\">valid</span><span class=\"p\">,</span> <span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"n\">test_message</span><span class=\"o\">.</span><span class=\"n\">validate_schematron</span><span class=\"p\">(</span><span class=\"n\">schematron_schema_text</span><span class=\"o\">=</span><span class=\"n\">schematron_as_string</span><span class=\"p\">)</span>\n</pre>\n<h2>Transforming message to a different version</h2>\n<p>You can transform the message to bring it up to date/or down grade with a different version through the package:</p>\n<pre><span class=\"n\">test_message</span><span class=\"o\">.</span><span class=\"n\">transform_message</span><span class=\"p\">(</span><span class=\"n\">to_version</span><span class=\"o\">=</span><span class=\"s1\">'2.6.24'</span><span class=\"p\">)</span>\n</pre>\n<p>if you don't specify a TO version, the most updated version is automatically chosen:</p>\n<pre><span class=\"n\">test_message</span><span class=\"o\">.</span><span class=\"n\">transform_message</span><span class=\"p\">()</span>\n</pre>\n<p>As expected this transformation is not loss-less, you can a list of items removed per version jump in warnings file:</p>\n<pre><span class=\"n\">test_message</span><span class=\"o\">.</span><span class=\"n\">get_transform_warnings</span><span class=\"p\">(</span><span class=\"n\">to_version</span><span class=\"o\">=</span><span class=\"s1\">'2.6.15'</span><span class=\"p\">,</span> <span class=\"n\">output_path</span><span class=\"o\">=</span><span class=\"n\">path</span><span class=\"p\">)</span>\n</pre>\n<h2>Saving and pretty printing</h2>\n<p>You can save a message any time by:</p>\n<pre><span class=\"n\">test_message</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n</pre>\n<p>And finally, you can pretty print a message at any time with:</p>\n<pre><span class=\"n\">test_message</span><span class=\"o\">.</span><span class=\"n\">pretty_print</span><span class=\"p\">()</span>\n</pre>\n<h1>Bug reports</h1>\n<p>Please report bugs and feature requests at\n(<a href=\"mailto:lixilab@lixi.org.au\">lixilab@lixi.org.au</a>).</p>\n<h1>Contributing</h1>\n<p>You can contribute to the project in multiple ways:</p>\n<ul>\n<li>Suggest new features</li>\n<li>Implement features</li>\n<li>Fix bugs</li>\n<li>Add unit and functional tests</li>\n<li>Everything else you can think of!</li>\n</ul>\n\n          </div>"}, "last_serial": 6535222, "releases": {"0.0.21": [{"comment_text": "", "digests": {"md5": "bae02512f637f76b4404127debb6b8fc", "sha256": "cdd818956b617d9dda5801563d8254dcb3be60e719a40384eab6ec43e436ee43"}, "downloads": -1, "filename": "lixi-ammar-0.0.21.tar.gz", "has_sig": false, "md5_digest": "bae02512f637f76b4404127debb6b8fc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41663, "upload_time": "2019-12-30T02:50:50", "upload_time_iso_8601": "2019-12-30T02:50:50.999858Z", "url": "https://files.pythonhosted.org/packages/8e/c9/5d01f06e5364e6fbfd5f4449e962525a2ba5eec3982baea0349471bc5d4d/lixi-ammar-0.0.21.tar.gz", "yanked": false}], "0.0.22": [{"comment_text": "", "digests": {"md5": "863bc3900bf181e0e4111039daca4d28", "sha256": "bcd98c6f55857ef1fc1af0a7162b1d7661ef84f82cd65d950acc66b9d470c460"}, "downloads": -1, "filename": "lixi-ammar-0.0.22.tar.gz", "has_sig": false, "md5_digest": "863bc3900bf181e0e4111039daca4d28", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 46056, "upload_time": "2020-01-13T22:50:54", "upload_time_iso_8601": "2020-01-13T22:50:54.508234Z", "url": "https://files.pythonhosted.org/packages/18/1f/28a244e4da4e92f20aa7e921819a7f23fa7c20b64d4b0850b5199fe35f75/lixi-ammar-0.0.22.tar.gz", "yanked": false}], "0.0.23": [{"comment_text": "", "digests": {"md5": "293f351a93d4dd3cfd0800f35d46ae50", "sha256": "a4f4a9d9833f07f6421aff3159aa0759ce786e395f6b8ed93d074b77c25867e4"}, "downloads": -1, "filename": "lixi-ammar-0.0.23.tar.gz", "has_sig": false, "md5_digest": "293f351a93d4dd3cfd0800f35d46ae50", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 49124, "upload_time": "2020-01-16T00:05:06", "upload_time_iso_8601": "2020-01-16T00:05:06.166783Z", "url": "https://files.pythonhosted.org/packages/88/33/0073ef11ebb87babd825b8393bd21b0569d1c6a643e9cc7f746341439e65/lixi-ammar-0.0.23.tar.gz", "yanked": false}], "0.0.24": [{"comment_text": "", "digests": {"md5": "4312545124a2143ddc2f2161e1a477a1", "sha256": "f2600533c030ddfb968be3b2d0a36c28614949a3f4807ff4d8f2f286d87d21ce"}, "downloads": -1, "filename": "lixi-ammar-0.0.24.tar.gz", "has_sig": false, "md5_digest": "4312545124a2143ddc2f2161e1a477a1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 824307, "upload_time": "2020-01-16T23:43:25", "upload_time_iso_8601": "2020-01-16T23:43:25.937824Z", "url": "https://files.pythonhosted.org/packages/09/f2/6ef668e3ab2a98719f76f874b11b22e925e05b3c91129110a6719ec78537/lixi-ammar-0.0.24.tar.gz", "yanked": false}], "0.0.25": [{"comment_text": "", "digests": {"md5": "9d607d1cdaa50aa9bba9a425039b0f38", "sha256": "afc88867c02d8d5dcbcfe6729038821681245690403c502d0d488b97f22b59fc"}, "downloads": -1, "filename": "lixi-ammar-0.0.25.tar.gz", "has_sig": false, "md5_digest": "9d607d1cdaa50aa9bba9a425039b0f38", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 824454, "upload_time": "2020-01-17T01:44:25", "upload_time_iso_8601": "2020-01-17T01:44:25.139866Z", "url": "https://files.pythonhosted.org/packages/23/32/37340a58673df4c1cd9eea7e2e7f62a333b99a00fb0164efa397bc00be45/lixi-ammar-0.0.25.tar.gz", "yanked": false}], "0.0.26": [{"comment_text": "", "digests": {"md5": "ad63d3ac6dd82c71a1a34bf5e30e3313", "sha256": "cdb0625d3ced3d627e39458895225e4f821a972effe87bc79d085ca69051e73d"}, "downloads": -1, "filename": "lixi-ammar-0.0.26.tar.gz", "has_sig": false, "md5_digest": "ad63d3ac6dd82c71a1a34bf5e30e3313", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 824479, "upload_time": "2020-01-17T02:13:48", "upload_time_iso_8601": "2020-01-17T02:13:48.033767Z", "url": "https://files.pythonhosted.org/packages/e6/14/8dec0d02ea1c82094ce14e0f1e6c3d18c60761a1a7f03bc79f39762d6ba2/lixi-ammar-0.0.26.tar.gz", "yanked": false}], "0.0.27": [{"comment_text": "", "digests": {"md5": "e30c114d6a3b0f797dc0db76e7dc8efb", "sha256": "c9cf0e5519dba7844ebd395691299edc270170f6b601702e697cf5ad96837b9c"}, "downloads": -1, "filename": "lixi-ammar-0.0.27.tar.gz", "has_sig": false, "md5_digest": "e30c114d6a3b0f797dc0db76e7dc8efb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 824921, "upload_time": "2020-01-20T03:27:51", "upload_time_iso_8601": "2020-01-20T03:27:51.738785Z", "url": "https://files.pythonhosted.org/packages/e4/e8/b834dcd69cdc6f92d7e04b0ede3b16d7e7d4b16f5c8a61c2e72077cb9674/lixi-ammar-0.0.27.tar.gz", "yanked": false}], "0.0.28": [{"comment_text": "", "digests": {"md5": "cad31f5cca27d991481e94b82c5a072a", "sha256": "d32da840cfea7c0228f3028bb32e1529dfeba15a024deeb981195de61720800c"}, "downloads": -1, "filename": "lixi-ammar-0.0.28.tar.gz", "has_sig": false, "md5_digest": "cad31f5cca27d991481e94b82c5a072a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 825085, "upload_time": "2020-01-21T02:19:25", "upload_time_iso_8601": "2020-01-21T02:19:25.239625Z", "url": "https://files.pythonhosted.org/packages/6f/27/fa965a2df022b99b8f5ca71131ec1fcaeeaf3f32ef7079a6ca44ff338a24/lixi-ammar-0.0.28.tar.gz", "yanked": false}], "0.0.29": [{"comment_text": "", "digests": {"md5": "a140b2fccf2df8422c76bf9e6a1b3831", "sha256": "835bb56efcaa24f7adcd0d02913b60d5add8cd39dcac04002ee94024045c77cc"}, "downloads": -1, "filename": "lixi-ammar-0.0.29.tar.gz", "has_sig": false, "md5_digest": "a140b2fccf2df8422c76bf9e6a1b3831", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 825130, "upload_time": "2020-01-21T04:55:50", "upload_time_iso_8601": "2020-01-21T04:55:50.831316Z", "url": "https://files.pythonhosted.org/packages/43/4d/aced579da52c768458ecb5d34d23e0659bec7ca6d127506ef42f7513d3ff/lixi-ammar-0.0.29.tar.gz", "yanked": false}], "0.0.29.dev20200112122005": [{"comment_text": "", "digests": {"md5": "6a274255f86922bbe17a8f438ddfbb9d", "sha256": "74d7f8cf67be58a436b55a2997064bd83dcf01f4f836435339427c90a03a1d55"}, "downloads": -1, "filename": "lixi-ammar-0.0.29.dev20200112122005.tar.gz", "has_sig": false, "md5_digest": "6a274255f86922bbe17a8f438ddfbb9d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1237057, "upload_time": "2020-01-29T00:08:13", "upload_time_iso_8601": "2020-01-29T00:08:13.834393Z", "url": "https://files.pythonhosted.org/packages/cd/d1/acd5cdf1e59916297b1af8d99bd3e9972595447ebf4ae46a15db83eb3f69/lixi-ammar-0.0.29.dev20200112122005.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a140b2fccf2df8422c76bf9e6a1b3831", "sha256": "835bb56efcaa24f7adcd0d02913b60d5add8cd39dcac04002ee94024045c77cc"}, "downloads": -1, "filename": "lixi-ammar-0.0.29.tar.gz", "has_sig": false, "md5_digest": "a140b2fccf2df8422c76bf9e6a1b3831", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 825130, "upload_time": "2020-01-21T04:55:50", "upload_time_iso_8601": "2020-01-21T04:55:50.831316Z", "url": "https://files.pythonhosted.org/packages/43/4d/aced579da52c768458ecb5d34d23e0659bec7ca6d127506ef42f7513d3ff/lixi-ammar-0.0.29.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:01 2020"}