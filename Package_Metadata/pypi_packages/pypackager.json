{"info": {"author": "Benoit HERVIER", "author_email": "khertan@khertan.net", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License (GPL)", "Operating System :: POSIX :: Linux", "Programming Language :: Python", "Topic :: Software Development :: Build Tools"], "description": "PyPackager\n==========\n\n**Licence :** GPLv3\n**Source :** [GitHub Repository](https://github.com/khertan/pypackager)\n**Download (Maemo):** [PyPackager on Maemo Repository](http://maemo.org/packages/view/pypackager/)\n**Download (Meego):** [PyPackager on MeeGo Repository](http://repo.pub.meego.com/home:/khertan/Harmattan/armel/)\n**Bugs Tracker :** [PyPackager Bug Tracker](https://github.com/khertan/pypackager/issues)\n**Plateform :** Maemo Diablo, Maemo Fremantle\n\nPyPackager is an onboard developpers tools which is usefull to create sources\nand binary Maemo package.\n\n![PyPackager Source screenshot](http://khertan.net/medias/pypackager.jpg)\n\n## PyPackager HowTo\n\nOn the maemo platform, software is distributed using the Debian package\nsystem. If you don't develop in Scratchbox, but directly on the device, you\nneed a tool to properly put together your software for distribution as such a\n.deb package. To solve this, i've created PyPackager. PyPackager 3.x.x is the\nsame as Py2Deb, except that with the same script you can prepare package to be\nuploaded to the extras maemo builder or build a debian package for maemo\ndirectly on your device.\n\n## Install PyPackager\n\nLast version of pypackager is available in Maemo Extras-devel, so you can\ninstall it with the application Manager.\n\n## Prerequisites\n\nCreate a folder /myapp under your home folder (e.g. \u201d/home/user/myapp\u201d). Then\nadd the following files and folders: * A subfolder /src that contains all your\nsource files in a folder structure which represents the way your app files\nwill install on the device - and with the correct permissions set (so do not\nuse the fat partition ~/MyDocs)! * The icon for your software package (e.g.\nmyapp.png, 48\u00d748 pixels), the one that will be visible for your package in the\napplication manager. * And the make.py file\n\n## programs and libraries with distutils\n\nIf you want to package a python program or library that is set up correctly\nwith distutils, you can use\n\n    \n    $ python setup.py bdist_dumb\n\nto compile and generate a .tar.gz package in dist/ subdirectory. Just unpack\nthat package in the src/ folder and add the hildon desktop integration files\n(see below) there.\n\n## Example /src folder structure\n\nFiles needed for the Hildon desktop integration:\n\n    \n    /src/usr/share/applications/hildon/myapp.desktop\n    /src/usr/share/dbus-1/services/myapp.service\n    /src/usr/share/icons/hicolor/48x48/hildon/myapp.png\n    /src/usr/share/icons/hicolor/scalable/hildon/myapp.png (64x64 pixel)\n\n## myapp.desktop file\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n    [Desktop Entry]\n    Version=1.0.0\n    Encoding=UTF-8\n    Name=myApp\n    Comment=Clock & day/night map\n    Exec=/opt/myApp/myApp.py\n    Icon=myapp\n    X-Icon-path=/usr/share/icons\n    X-Window-Icon=myapp\n    Type=Application\n    X-Osso-Service=net.khertan.myapp\n    X-Osso-Type=application/x-executable\n    StartupWMClass=myApp\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n*Version* is version of the desktop file, NOT of the app. Keep it at 1.0.0\n*Name* is Name of the app as seen in Menu\n*Description* is Description of the app as seen as subtitle in Menu in Finger\nmode\n*Exec* is link to the app\n*Icon* is Name of our icon file, without the trailing .png part\n*X-Icon-path* is Path to the icon\n*X-Window-Icon* is Name of our icon file, without the trailing .png part\n*StartupWMClass* is only needed because if it programs use direct screen\nrendering librairy like PyGame, XLib or OpenGL.\n\nNote that you need the X-Osso-Service line only if you actually use osso\nservices. Including that line in the .desktop file without proper handling of\nosso events in the application will result in the application being terminated\nshortly after startup.\n\n##myapp.service\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n    [D-BUS Service]\n    Name=net.khertan.myapp\n    Exec=/opt/myApp/myApp.py Link to the app\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n## Files of the application itself\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n    /src/opt/myApp\n    /src/opt/myApp/myApp.py\n    /src/opt/myApp/myApp_other_class.py\n    /src/opt/myApp/datas/myApp_image.png\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nmyApp.py should begin with:\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n    #!/usr/bin/env python\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nand be executable\n\n## Setup the build_myapp.py code\n\nCopy the following code to create your own build_myapp.py, then edit according\nto your needs:\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n    #!/usr/bin/python\n    # -*- coding: utf-8 -*-\n    ## This program is free software; you can redistribute it and/or modify\n    ## it under the terms of the GNU General Public License as published\n    ## by the Free Software Foundation; version 2 only.\n    ##\n    ## This program is distributed in the hope that it will be useful,\n    ## but WITHOUT ANY WARRANTY; without even the implied warranty of\n    ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    ## GNU General Public License for more details.\n    ##\n    import pypackager\n    import os\n     \n    if __name__ == \"__main__\":\n        try:\n            os.chdir(os.path.dirname(sys.argv[0]))\n        except:\n            pass\n     \n        p=pypackager.PyPackager(\"khteditor\")\n        p.version='0.0.1'\n        p.buildversion='1'\n        p.display_name='KhtEditor'\n        p.description=\"KhtEditor is a source code editor specially designed for devices running Maemo and Meego Handset.\"\n        p.author=\"Beno\u00eet HERVIER\"\n        p.maintainer=\"Khertan\"\n        p.email=\"khertan@khertan.net\"\n        p.depends = \"python2.5-qt4-gui,python2.5-qt4-core, python2.5-qt4-maemo5\"\n        p.suggests = \"pylint\"\n        p.section=\"user/development\"\n        p.arch=\"armel\"\n        p.urgency=\"low\"\n        p.bugtracker='http://khertan.net/flyspray/index.php?project=7'\n        p.distribution=\"fremantle\"\n        p.repository=\"extras-devel\"\n        p.icon='khteditor.png'\n        p[\"/usr/bin\"] = [\"khteditor_launch.py\",]\n        p[\"/usr/share/dbus-1/services\"] = [\"khteditor.service\",]\n        p[\"/usr/share/pixmaps\"] = [\"khteditor.png\",]\n        p[\"/usr/share/applications/hildon\"] = [\"khteditor.desktop\",]\n        #Specific flags for meego\n        p.maemo_flags = 'visible'\n        p.meego_desktop_entry_filename = ''\n        p.createDigsigsums = True\n        p.aegisManifest = '''<aegis name=\"...\">\n          <provide></provide>\n          <constraint></constraint>\n          <account></account>\n          <request></request>\n          <domain></domain>\n          <docstring></docstring>\n        </aegis>'''\n        files = []\n     \n        #Src\n        for root, dirs, fs in os.walk('/home/user/MyDocs/Projects/khteditor/khteditor'):\n          for f in fs:\n            #print os.path.basename(root),dirs,f\n            prefix = 'khteditor/'\n            if os.path.basename(root) != 'khteditor':\n                prefix = prefix + os.path.basename(root) + '/'\n            files.append(prefix+os.path.basename(f))\n        print files\n     \n     \n        p[\"/usr/lib/python2.5/site-packages\"] = files\n     \n        p.postinst = \"\"\"#!/bin/sh\n    chmod +x /usr/bin/khteditor_launch.py\n    python -m compileall /usr/lib/python2.5/site-packages/khteditor\"\"\"\n     \n        p.changelog=\"\"\"First Release\n    \"\"\"\n     \n    print p.generate(build_binary=False,build_src=True)\n    #print p.generate(build_binary=True,build_src=True)\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n## Run your make.py code\n\nOpen \u201cX Terminal\u201d on your device and change directory into your folder (e.g.\n\u201ccd /home/user/myapp\u201d). Then run your code using \u201cpython2.5 make.py\u201d in Xterm.\nPyPackager will now package your files. Once this is done successfully,\ndepending on build option your ~/myapp folder will contain new files ready to\nbe uploaded to Maemo Auto Builder or ready to be upload to your own repository\n  * myapp_0.5.6-1.changes (the changelog)\n  * myapp_0.5.6-1.dsc (the package\ndescription)\n  * myapp_0.5.6-1.tar.gz (the packed source files)\n\nThis article is derivate from the [http://wiki.maemo.org/Py2Deb](http://wiki.maemo.org/Py2Deb) page.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://khertan.net/pypackager", "keywords": "package debian maemo", "license": "GPL", "maintainer": null, "maintainer_email": null, "name": "pypackager", "package_url": "https://pypi.org/project/pypackager/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pypackager/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://khertan.net/pypackager"}, "release_url": "https://pypi.org/project/pypackager/4.0.1/", "requires_dist": null, "requires_python": null, "summary": "PyPackager is an onboard developpers toolswhich is usefull to create sources and binaryMaemo/Harmattan/MeeGo package.", "version": "4.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            PyPackager<br>==========<br><br>**Licence :** GPLv3<br>**Source :** [GitHub Repository](https://github.com/khertan/pypackager)<br>**Download (Maemo):** [PyPackager on Maemo Repository](http://maemo.org/packages/view/pypackager/)<br>**Download (Meego):** [PyPackager on MeeGo Repository](http://repo.pub.meego.com/home:/khertan/Harmattan/armel/)<br>**Bugs Tracker :** [PyPackager Bug Tracker](https://github.com/khertan/pypackager/issues)<br>**Plateform :** Maemo Diablo, Maemo Fremantle<br><br>PyPackager is an onboard developpers tools which is usefull to create sources<br>and binary Maemo package.<br><br>![PyPackager Source screenshot](http://khertan.net/medias/pypackager.jpg)<br><br>## PyPackager HowTo<br><br>On the maemo platform, software is distributed using the Debian package<br>system. If you don't develop in Scratchbox, but directly on the device, you<br>need a tool to properly put together your software for distribution as such a<br>.deb package. To solve this, i've created PyPackager. PyPackager 3.x.x is the<br>same as Py2Deb, except that with the same script you can prepare package to be<br>uploaded to the extras maemo builder or build a debian package for maemo<br>directly on your device.<br><br>## Install PyPackager<br><br>Last version of pypackager is available in Maemo Extras-devel, so you can<br>install it with the application Manager.<br><br>## Prerequisites<br><br>Create a folder /myapp under your home folder (e.g. \u201d/home/user/myapp\u201d). Then<br>add the following files and folders: * A subfolder /src that contains all your<br>source files in a folder structure which represents the way your app files<br>will install on the device - and with the correct permissions set (so do not<br>use the fat partition ~/MyDocs)! * The icon for your software package (e.g.<br>myapp.png, 48\u00d748 pixels), the one that will be visible for your package in the<br>application manager. * And the make.py file<br><br>## programs and libraries with distutils<br><br>If you want to package a python program or library that is set up correctly<br>with distutils, you can use<br><br>    <br>    $ python setup.py bdist_dumb<br><br>to compile and generate a .tar.gz package in dist/ subdirectory. Just unpack<br>that package in the src/ folder and add the hildon desktop integration files<br>(see below) there.<br><br>## Example /src folder structure<br><br>Files needed for the Hildon desktop integration:<br><br>    <br>    /src/usr/share/applications/hildon/myapp.desktop<br>    /src/usr/share/dbus-1/services/myapp.service<br>    /src/usr/share/icons/hicolor/48x48/hildon/myapp.png<br>    /src/usr/share/icons/hicolor/scalable/hildon/myapp.png (64x64 pixel)<br><br>## myapp.desktop file<br><br>~~~~~~~~~~~~~~~~~~~~~~~~~~<br>    [Desktop Entry]<br>    Version=1.0.0<br>    Encoding=UTF-8<br>    Name=myApp<br>    Comment=Clock &amp; day/night map<br>    Exec=/opt/myApp/myApp.py<br>    Icon=myapp<br>    X-Icon-path=/usr/share/icons<br>    X-Window-Icon=myapp<br>    Type=Application<br>    X-Osso-Service=net.khertan.myapp<br>    X-Osso-Type=application/x-executable<br>    StartupWMClass=myApp<br>~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>*Version* is version of the desktop file, NOT of the app. Keep it at 1.0.0<br>*Name* is Name of the app as seen in Menu<br>*Description* is Description of the app as seen as subtitle in Menu in Finger<br>mode<br>*Exec* is link to the app<br>*Icon* is Name of our icon file, without the trailing .png part<br>*X-Icon-path* is Path to the icon<br>*X-Window-Icon* is Name of our icon file, without the trailing .png part<br>*StartupWMClass* is only needed because if it programs use direct screen<br>rendering librairy like PyGame, XLib or OpenGL.<br><br>Note that you need the X-Osso-Service line only if you actually use osso<br>services. Including that line in the .desktop file without proper handling of<br>osso events in the application will result in the application being terminated<br>shortly after startup.<br><br>##myapp.service<br>~~~~~~~~~~~~~~~~~~~~~~~~~~<br>    [D-BUS Service]<br>    Name=net.khertan.myapp<br>    Exec=/opt/myApp/myApp.py Link to the app<br>~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>## Files of the application itself<br><br>~~~~~~~~~~~~~~~~~~~~~~~~~~<br>    /src/opt/myApp<br>    /src/opt/myApp/myApp.py<br>    /src/opt/myApp/myApp_other_class.py<br>    /src/opt/myApp/datas/myApp_image.png<br>~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>myApp.py should begin with:<br><br>~~~~~~~~~~~~~~~~~~~~~~~~~~<br>    #!/usr/bin/env python<br>~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>and be executable<br><br>## Setup the build_myapp.py code<br><br>Copy the following code to create your own build_myapp.py, then edit according<br>to your needs:<br><br>~~~~~~~~~~~~~~~~~~~~~~~~~~<br>    #!/usr/bin/python<br>    # -*- coding: utf-8 -*-<br>    ## This program is free software; you can redistribute it and/or modify<br>    ## it under the terms of the GNU General Public License as published<br>    ## by the Free Software Foundation; version 2 only.<br>    ##<br>    ## This program is distributed in the hope that it will be useful,<br>    ## but WITHOUT ANY WARRANTY; without even the implied warranty of<br>    ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br>    ## GNU General Public License for more details.<br>    ##<br>    import pypackager<br>    import os<br>     <br>    if __name__ == \"__main__\":<br>        try:<br>            os.chdir(os.path.dirname(sys.argv[0]))<br>        except:<br>            pass<br>     <br>        p=pypackager.PyPackager(\"khteditor\")<br>        p.version='0.0.1'<br>        p.buildversion='1'<br>        p.display_name='KhtEditor'<br>        p.description=\"KhtEditor is a source code editor specially designed for devices running Maemo and Meego Handset.\"<br>        p.author=\"Beno\u00eet HERVIER\"<br>        p.maintainer=\"Khertan\"<br>        p.email=\"khertan@khertan.net\"<br>        p.depends = \"python2.5-qt4-gui,python2.5-qt4-core, python2.5-qt4-maemo5\"<br>        p.suggests = \"pylint\"<br>        p.section=\"user/development\"<br>        p.arch=\"armel\"<br>        p.urgency=\"low\"<br>        p.bugtracker='http://khertan.net/flyspray/index.php?project=7'<br>        p.distribution=\"fremantle\"<br>        p.repository=\"extras-devel\"<br>        p.icon='khteditor.png'<br>        p[\"/usr/bin\"] = [\"khteditor_launch.py\",]<br>        p[\"/usr/share/dbus-1/services\"] = [\"khteditor.service\",]<br>        p[\"/usr/share/pixmaps\"] = [\"khteditor.png\",]<br>        p[\"/usr/share/applications/hildon\"] = [\"khteditor.desktop\",]<br>        #Specific flags for meego<br>        p.maemo_flags = 'visible'<br>        p.meego_desktop_entry_filename = ''<br>        p.createDigsigsums = True<br>        p.aegisManifest = '''&lt;aegis name=\"...\"&gt;<br>          &lt;provide&gt;&lt;/provide&gt;<br>          &lt;constraint&gt;&lt;/constraint&gt;<br>          &lt;account&gt;&lt;/account&gt;<br>          &lt;request&gt;&lt;/request&gt;<br>          &lt;domain&gt;&lt;/domain&gt;<br>          &lt;docstring&gt;&lt;/docstring&gt;<br>        &lt;/aegis&gt;'''<br>        files = []<br>     <br>        #Src<br>        for root, dirs, fs in os.walk('/home/user/MyDocs/Projects/khteditor/khteditor'):<br>          for f in fs:<br>            #print os.path.basename(root),dirs,f<br>            prefix = 'khteditor/'<br>            if os.path.basename(root) != 'khteditor':<br>                prefix = prefix + os.path.basename(root) + '/'<br>            files.append(prefix+os.path.basename(f))<br>        print files<br>     <br>     <br>        p[\"/usr/lib/python2.5/site-packages\"] = files<br>     <br>        p.postinst = \"\"\"#!/bin/sh<br>    chmod +x /usr/bin/khteditor_launch.py<br>    python -m compileall /usr/lib/python2.5/site-packages/khteditor\"\"\"<br>     <br>        p.changelog=\"\"\"First Release<br>    \"\"\"<br>     <br>    print p.generate(build_binary=False,build_src=True)<br>    #print p.generate(build_binary=True,build_src=True)<br>~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>## Run your make.py code<br><br>Open \u201cX Terminal\u201d on your device and change directory into your folder (e.g.<br>\u201ccd /home/user/myapp\u201d). Then run your code using \u201cpython2.5 make.py\u201d in Xterm.<br>PyPackager will now package your files. Once this is done successfully,<br>depending on build option your ~/myapp folder will contain new files ready to<br>be uploaded to Maemo Auto Builder or ready to be upload to your own repository<br>  * myapp_0.5.6-1.changes (the changelog)<br>  * myapp_0.5.6-1.dsc (the package<br>description)<br>  * myapp_0.5.6-1.tar.gz (the packed source files)<br><br>This article is derivate from the [http://wiki.maemo.org/Py2Deb](http://wiki.maemo.org/Py2Deb) page.\n          </div>"}, "last_serial": 797504, "releases": {"3.0.18": [], "3.0.19": [], "3.0.20": [], "3.3.0": [], "3.7.1": [], "3.7.3": [], "4.0.0": [{"comment_text": "", "digests": {"md5": "870e65f8b8ddf46e070599b0ae497925", "sha256": "3fbeb664e4a11f75b25fe92ad925673c198813d1c9fb73d2c4d5e3b0cecc02cf"}, "downloads": -1, "filename": "pypackager-4.0.0.tar.gz", "has_sig": false, "md5_digest": "870e65f8b8ddf46e070599b0ae497925", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21852, "upload_time": "2012-12-06T14:05:59", "upload_time_iso_8601": "2012-12-06T14:05:59.683917Z", "url": "https://files.pythonhosted.org/packages/39/da/85a0488e8b7fe9a780664616568cc57bcdaff4305d5fef73199e0864d8ab/pypackager-4.0.0.tar.gz", "yanked": false}], "4.0.1": [{"comment_text": "", "digests": {"md5": "70288e3873c5297fc882bc4eb119c926", "sha256": "e66a8580536672e1929eac9a38e43b69398ae6d6fff3dfb2ff95e3cff951b69d"}, "downloads": -1, "filename": "pypackager-4.0.1.tar.gz", "has_sig": false, "md5_digest": "70288e3873c5297fc882bc4eb119c926", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22671, "upload_time": "2012-12-06T14:11:25", "upload_time_iso_8601": "2012-12-06T14:11:25.562959Z", "url": "https://files.pythonhosted.org/packages/d7/e9/9e3491a90f69a279bb0dc2448244f6b899db2ec8f642ec12631ee8c45ae2/pypackager-4.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "70288e3873c5297fc882bc4eb119c926", "sha256": "e66a8580536672e1929eac9a38e43b69398ae6d6fff3dfb2ff95e3cff951b69d"}, "downloads": -1, "filename": "pypackager-4.0.1.tar.gz", "has_sig": false, "md5_digest": "70288e3873c5297fc882bc4eb119c926", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22671, "upload_time": "2012-12-06T14:11:25", "upload_time_iso_8601": "2012-12-06T14:11:25.562959Z", "url": "https://files.pythonhosted.org/packages/d7/e9/9e3491a90f69a279bb0dc2448244f6b899db2ec8f642ec12631ee8c45ae2/pypackager-4.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:00:00 2020"}