{"info": {"author": "Danny McDonald", "author_email": "mcddjx@gmail.com", "bugtrack_url": null, "classifiers": ["Topic :: Utilities"], "description": "# depgrep\n\nDependency parse searching for CONLL-U DataFrames\n\n<!--- Don't edit the version line below manually. Let bump2version do it for you. -->\n> Version 0.1.3\n\n> Note: this tool currently doesn't have tests, CI, etc. It is not yet advised to use this tool outside of the depgrep methods provided by the `buzz` library.\n\n## Installation\n\n```bash\npip install depgrep\n```\n\n## Usage\n\nThe tool is designed to work with corpora made from CONLL-U files and parsed into DataFrames by *buzz*. The best thing to do is use *buzz* to model corpora, and then use its *depgrep* method.\n\n```bash\npip install buzz\n```\n\nThen, in Python:\n\n```python\nfrom buzz import Corpus\ncorpus = Corpus('path/to/conll/files')\nquery = 'l\"have\"'  # match the lemma \"have\"\n```\n\n## Syntax\n\ndepgrep searches work through a combination of *nodes* and *relations*, just like Tgrep2, on which this tool is based.\n\n### Nodes\n\nA node targets one token feature (word, lemma, POS, wordclass, dependency role, etc). It may be specified as a regular expression or a simple string match: `f/amod|nsubj/` will match tokens filling the *nsubj* or *amod* role; `l\"be\"` will match the lemma, *be*.\n\nThe first part of the node query chooses which token attribute is to be searched. It can be any of:\n\n```\nw : word\nl : lemma\np : part of speech tag\nx : wordclass / XPOS\nf : dependency role\ni : index in sentence\ns : sentence number\n```\n\nCase sensitivity is controlled by the case of the attribute you are searching: `p/VB/` is case-insensitive, and `P/VB/` is case sensitive. Therefore, the following query matches words ending in *ing*, *ING*, *Ing*, etc:\n\n```\nw/ing$/\n```\n\nFor case-insensitivity across the query, use the `case_sensitive=False` keyword argument.\n\n### Relations\n\nRelations specify the relationship between nodes. For example, we can use `f\"nsubj\" <- f\"ROOT\"` to locate nominal subjects governed by nodes in the role of *ROOT*. The thing you want to find is the leftmost node in the query. So, while the above query finds nominal subject tokens, you could use inverse relation, `f\"ROOT\" -> f\"nsubj\"` to return the ROOT tokens.\n\nAvailable relations:\n\n```\na = b   : a and b are the same node\na & b   : a and b are the same node (same as =)\n\na <- b  : a is a dependent of b\na <<- b : a is a descendent of b, with any distance in between\na <-: b : a is the only dependent of b\na <-N b : a is descendent of b by N generations\n\na -> b  : a is the governor of a\na ->> b : a is an ancestor of b, with any distance in between\na ->: b : a is the only governor of b (as is normal in many grammars)\na ->N b : a is ancestor of b by N generations\n\na + b   : a is immediately to the left of b\na +N b  : a is N places to the left of b\na <| b  : a is left of b, with any distance in between\n\na - b   : a is immediately to the right of b\na -N b  : a is n places to the right of b\na |> b  : a is right of b, with any distance in between\n\na $ b   : a and b share a governor (i.e. are sisters)\n\na $> b  : a is a sister of and to the right of b.\na $< b  : a is a sister of and to the left of b.\n\n```\n\n### Negation\n\nAdd `!` before a relation to negate it: `f\"ROOT\" != x\"VERB\"` will find non-verbal ROOT nodes.\n\n### Brackets\n\nBrackets can be used to make more complex queries:\n\n```\nf\"amod\" = l/^[abc]/ <- (f/nsubj/ != x/NOUN/)\n```\n\nThe above translates to *match adjectival modifiers starting with a, b or c, which are governed by nominal subjects that are not nouns*\n\nNote that **without** brackets, each relation/node refers to the leftmost node. In the following, the plural noun must be the same node as the *nsubj*, not the *ROOT*:\n\n```\nf\"nsubj\" <- f\"ROOT\" = p\"NNS\"\n```\n\n### *Or* expressions\n\nYou can use the pipe (`|`) to create an *OR* expression.\n\n```\n# match all kinds of modifiers\nx\"ADJ\" | f\"amod\" | f\"appos\" | p/^JJ/\nx\"NOUN\" <- f\"ROOT\" | = p\"NNS\"\n```\n\n\nAbove, we match nouns that are either governed by *ROOT*, or are plural.\n\n### Wildcard\n\nYou can use `__` or `*` to stand in for any token. To match any token that is the governor of a verb, do:\n\n```\n__ -> x\"VERB\"\n```\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/interrogator/depgrep", "keywords": "linguistics nlp dependencies conll", "license": "", "maintainer": "", "maintainer_email": "", "name": "depgrep", "package_url": "https://pypi.org/project/depgrep/", "platform": "", "project_url": "https://pypi.org/project/depgrep/", "project_urls": {"Homepage": "https://github.com/interrogator/depgrep"}, "release_url": "https://pypi.org/project/depgrep/0.1.3/", "requires_dist": ["pandas", "pyparsing", "nltk"], "requires_python": ">=3.6", "summary": "Dependency parse searching", "version": "0.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>depgrep</h1>\n<p>Dependency parse searching for CONLL-U DataFrames</p>\n\n<blockquote>\n<p>Version 0.1.3</p>\n</blockquote>\n<blockquote>\n<p>Note: this tool currently doesn't have tests, CI, etc. It is not yet advised to use this tool outside of the depgrep methods provided by the <code>buzz</code> library.</p>\n</blockquote>\n<h2>Installation</h2>\n<pre>pip install depgrep\n</pre>\n<h2>Usage</h2>\n<p>The tool is designed to work with corpora made from CONLL-U files and parsed into DataFrames by <em>buzz</em>. The best thing to do is use <em>buzz</em> to model corpora, and then use its <em>depgrep</em> method.</p>\n<pre>pip install buzz\n</pre>\n<p>Then, in Python:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">buzz</span> <span class=\"kn\">import</span> <span class=\"n\">Corpus</span>\n<span class=\"n\">corpus</span> <span class=\"o\">=</span> <span class=\"n\">Corpus</span><span class=\"p\">(</span><span class=\"s1\">'path/to/conll/files'</span><span class=\"p\">)</span>\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"s1\">'l\"have\"'</span>  <span class=\"c1\"># match the lemma \"have\"</span>\n</pre>\n<h2>Syntax</h2>\n<p>depgrep searches work through a combination of <em>nodes</em> and <em>relations</em>, just like Tgrep2, on which this tool is based.</p>\n<h3>Nodes</h3>\n<p>A node targets one token feature (word, lemma, POS, wordclass, dependency role, etc). It may be specified as a regular expression or a simple string match: <code>f/amod|nsubj/</code> will match tokens filling the <em>nsubj</em> or <em>amod</em> role; <code>l\"be\"</code> will match the lemma, <em>be</em>.</p>\n<p>The first part of the node query chooses which token attribute is to be searched. It can be any of:</p>\n<pre><code>w : word\nl : lemma\np : part of speech tag\nx : wordclass / XPOS\nf : dependency role\ni : index in sentence\ns : sentence number\n</code></pre>\n<p>Case sensitivity is controlled by the case of the attribute you are searching: <code>p/VB/</code> is case-insensitive, and <code>P/VB/</code> is case sensitive. Therefore, the following query matches words ending in <em>ing</em>, <em>ING</em>, <em>Ing</em>, etc:</p>\n<pre><code>w/ing$/\n</code></pre>\n<p>For case-insensitivity across the query, use the <code>case_sensitive=False</code> keyword argument.</p>\n<h3>Relations</h3>\n<p>Relations specify the relationship between nodes. For example, we can use <code>f\"nsubj\" &lt;- f\"ROOT\"</code> to locate nominal subjects governed by nodes in the role of <em>ROOT</em>. The thing you want to find is the leftmost node in the query. So, while the above query finds nominal subject tokens, you could use inverse relation, <code>f\"ROOT\" -&gt; f\"nsubj\"</code> to return the ROOT tokens.</p>\n<p>Available relations:</p>\n<pre><code>a = b   : a and b are the same node\na &amp; b   : a and b are the same node (same as =)\n\na &lt;- b  : a is a dependent of b\na &lt;&lt;- b : a is a descendent of b, with any distance in between\na &lt;-: b : a is the only dependent of b\na &lt;-N b : a is descendent of b by N generations\n\na -&gt; b  : a is the governor of a\na -&gt;&gt; b : a is an ancestor of b, with any distance in between\na -&gt;: b : a is the only governor of b (as is normal in many grammars)\na -&gt;N b : a is ancestor of b by N generations\n\na + b   : a is immediately to the left of b\na +N b  : a is N places to the left of b\na &lt;| b  : a is left of b, with any distance in between\n\na - b   : a is immediately to the right of b\na -N b  : a is n places to the right of b\na |&gt; b  : a is right of b, with any distance in between\n\na $ b   : a and b share a governor (i.e. are sisters)\n\na $&gt; b  : a is a sister of and to the right of b.\na $&lt; b  : a is a sister of and to the left of b.\n\n</code></pre>\n<h3>Negation</h3>\n<p>Add <code>!</code> before a relation to negate it: <code>f\"ROOT\" != x\"VERB\"</code> will find non-verbal ROOT nodes.</p>\n<h3>Brackets</h3>\n<p>Brackets can be used to make more complex queries:</p>\n<pre><code>f\"amod\" = l/^[abc]/ &lt;- (f/nsubj/ != x/NOUN/)\n</code></pre>\n<p>The above translates to <em>match adjectival modifiers starting with a, b or c, which are governed by nominal subjects that are not nouns</em></p>\n<p>Note that <strong>without</strong> brackets, each relation/node refers to the leftmost node. In the following, the plural noun must be the same node as the <em>nsubj</em>, not the <em>ROOT</em>:</p>\n<pre><code>f\"nsubj\" &lt;- f\"ROOT\" = p\"NNS\"\n</code></pre>\n<h3><em>Or</em> expressions</h3>\n<p>You can use the pipe (<code>|</code>) to create an <em>OR</em> expression.</p>\n<pre><code># match all kinds of modifiers\nx\"ADJ\" | f\"amod\" | f\"appos\" | p/^JJ/\nx\"NOUN\" &lt;- f\"ROOT\" | = p\"NNS\"\n</code></pre>\n<p>Above, we match nouns that are either governed by <em>ROOT</em>, or are plural.</p>\n<h3>Wildcard</h3>\n<p>You can use <code>__</code> or <code>*</code> to stand in for any token. To match any token that is the governor of a verb, do:</p>\n<pre><code>__ -&gt; x\"VERB\"\n</code></pre>\n\n          </div>"}, "last_serial": 5702164, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "3c2195cd484a4363669d471ca3ede654", "sha256": "109a2e83cdccb87a5edddc1b9ebeea7937fbf87b137148a8b82c54b4624813e0"}, "downloads": -1, "filename": "depgrep-0.0.1-py3.6.egg", "has_sig": false, "md5_digest": "3c2195cd484a4363669d471ca3ede654", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": ">=3.6", "size": 18991, "upload_time": "2019-06-11T15:34:41", "upload_time_iso_8601": "2019-06-11T15:34:41.323540Z", "url": "https://files.pythonhosted.org/packages/e6/34/a6b35f5d3471cba686dd22cb844d66eae832ad4018c59a8feccb13a3e25f/depgrep-0.0.1-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "b8e2ebeaddf18de415af88f0cf070a05", "sha256": "028b929e02aaead3afbc439820907ae18aa9e0e04ea25d8ee78d26516e4fb43c"}, "downloads": -1, "filename": "depgrep-0.0.1.tar.gz", "has_sig": false, "md5_digest": "b8e2ebeaddf18de415af88f0cf070a05", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9443, "upload_time": "2019-06-11T15:34:43", "upload_time_iso_8601": "2019-06-11T15:34:43.715757Z", "url": "https://files.pythonhosted.org/packages/eb/65/4d8b5a30ef3c2f88bd1a23ba81a65172ecf97576b8f5a13ec63095528be7/depgrep-0.0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "1fa099cfd99045f2a93b8e4b01b4354e", "sha256": "7146761a3115cc9827a71beb5c3f29e4a022a0e58207ef0b913eb2c6ea669f04"}, "downloads": -1, "filename": "depgrep-0.1.1-py3.7.egg", "has_sig": false, "md5_digest": "1fa099cfd99045f2a93b8e4b01b4354e", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": ">=3.6", "size": 19001, "upload_time": "2019-08-09T12:00:19", "upload_time_iso_8601": "2019-08-09T12:00:19.421963Z", "url": "https://files.pythonhosted.org/packages/cb/1c/96d5e9531ae55f4e9e98e1c0340114855c2ca3703e186f39881d9cf89bdf/depgrep-0.1.1-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "61d572cc152a19196c0ac2c34c412a3f", "sha256": "b636063e8eb7773781521e13aa2c5a7c0f6801fca9a0fc443a508ef5bca522a1"}, "downloads": -1, "filename": "depgrep-0.1.1.tar.gz", "has_sig": false, "md5_digest": "61d572cc152a19196c0ac2c34c412a3f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9447, "upload_time": "2019-08-09T12:00:21", "upload_time_iso_8601": "2019-08-09T12:00:21.272907Z", "url": "https://files.pythonhosted.org/packages/72/d5/b7802011e987297122b5ef42c37b51fe29032996ed0f52d2fc5aac9a88dd/depgrep-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "70b4000fce564a21466c0cb970374c51", "sha256": "2ab47b5bb1eaf5704fb86fbf88aefd216200ea9e6b90b3fe765821e4cfb12b20"}, "downloads": -1, "filename": "depgrep-0.1.2-py3.7.egg", "has_sig": false, "md5_digest": "70b4000fce564a21466c0cb970374c51", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": ">=3.6", "size": 18955, "upload_time": "2019-08-09T18:59:45", "upload_time_iso_8601": "2019-08-09T18:59:45.136519Z", "url": "https://files.pythonhosted.org/packages/0d/90/5aec95324a044f74595ca6777b497dab85eb00883ce1db9c5fb3af9e3d87/depgrep-0.1.2-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "6f0f15da5c944af827f9dc752a851d51", "sha256": "a553e6b7446edfe350ce7c508c52e03988050f89006fe1b9427574818f0d9697"}, "downloads": -1, "filename": "depgrep-0.1.2.tar.gz", "has_sig": false, "md5_digest": "6f0f15da5c944af827f9dc752a851d51", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9426, "upload_time": "2019-08-09T18:59:46", "upload_time_iso_8601": "2019-08-09T18:59:46.702958Z", "url": "https://files.pythonhosted.org/packages/35/91/230c8efea8dba40f056200beaf98618864ec869d9535dd547a85701b3d5d/depgrep-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "0ebf54179beaebf6db75b15f9580657e", "sha256": "06d4f136ed8bdfa2e6264d0b1de7023d3a01afc7f930572413266825262bbaaf"}, "downloads": -1, "filename": "depgrep-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "0ebf54179beaebf6db75b15f9580657e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 10791, "upload_time": "2019-08-20T08:46:08", "upload_time_iso_8601": "2019-08-20T08:46:08.690781Z", "url": "https://files.pythonhosted.org/packages/f1/89/36076afd0e1bb7adbe93991b91bccf244f11d2c37124fe04a69ec08c95e1/depgrep-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5faf625ad4410a9a32008457c403d2fa", "sha256": "dc0ca8e8be4f4645b8a9e3eec19e71092144a8da32aa8bd93d7874e21c480acf"}, "downloads": -1, "filename": "depgrep-0.1.3.tar.gz", "has_sig": false, "md5_digest": "5faf625ad4410a9a32008457c403d2fa", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12564, "upload_time": "2019-08-20T08:46:10", "upload_time_iso_8601": "2019-08-20T08:46:10.581241Z", "url": "https://files.pythonhosted.org/packages/87/48/85b55230d0a6e0f11b5843fcafdb899f96ed7e5f815425837bd11e681ec2/depgrep-0.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0ebf54179beaebf6db75b15f9580657e", "sha256": "06d4f136ed8bdfa2e6264d0b1de7023d3a01afc7f930572413266825262bbaaf"}, "downloads": -1, "filename": "depgrep-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "0ebf54179beaebf6db75b15f9580657e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 10791, "upload_time": "2019-08-20T08:46:08", "upload_time_iso_8601": "2019-08-20T08:46:08.690781Z", "url": "https://files.pythonhosted.org/packages/f1/89/36076afd0e1bb7adbe93991b91bccf244f11d2c37124fe04a69ec08c95e1/depgrep-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5faf625ad4410a9a32008457c403d2fa", "sha256": "dc0ca8e8be4f4645b8a9e3eec19e71092144a8da32aa8bd93d7874e21c480acf"}, "downloads": -1, "filename": "depgrep-0.1.3.tar.gz", "has_sig": false, "md5_digest": "5faf625ad4410a9a32008457c403d2fa", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12564, "upload_time": "2019-08-20T08:46:10", "upload_time_iso_8601": "2019-08-20T08:46:10.581241Z", "url": "https://files.pythonhosted.org/packages/87/48/85b55230d0a6e0f11b5843fcafdb899f96ed7e5f815425837bd11e681ec2/depgrep-0.1.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:39:04 2020"}