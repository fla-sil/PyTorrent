{"info": {"author": "Reecetech", "author_email": "opensource@reecetech.com.au", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Scientific/Engineering", "Topic :: Software Development"], "description": "Django InformixDB\n==================\n\nA database driver for Django to connect to an Informix database via pyodbc.\n\n**Some limitations**:\n\n- Does not support default values\n- Informix automatically creates indexes on foreign keys, but Django attempts to do that\n  manually; the current implementation here just attempts to catch the error on index\n  creation. It may unintentionally catch other index creation errors where the index\n  already exists.\n\n\nConfigure local environment\n---------------------------\n\nThe following environment variables should exist:\n\nINFORMIXDIR\n    The path to the Informix client install directory\n\nINFORMIXSERVER\n    The name of the Informix service to which we need to connect\n\nINFORMIXSQLHOSTS\n    The path to the ``sqlhosts`` file that the Informix driver should use\n\nLD_LIBRARY_PATH\n    The path(s) to the various Informix library files: Usually\n    ``$INFORIMIXDIR/lib:$INFORMIXDIR/lib/cli:$IMFORMIXDIR/lib/esql``\n\nDB_LOCALE\n    In case of ``Database locale information mismatch.`` error during connection,\n    you should specify your database locale, e.g. ``DB_LOCALE=en_US.8859-15``\n\nYou will also need to add an entry within your ``sqlhosts`` file for each remote/local Informix\nserver connection in the following format::\n\n    <INFORMIX_SERVER_NAME>    onsoctcp     <INFORMIX_HOST_NAME>    <INFORMIX_SERVICE_NAME>\n\nFor example::\n\n    dev    onsoctcp    localhost    9088\n\nYou may alternatively use a symbolic name in that line in place of the port number, typically ``sqlexec`` and\nthen configure the port number in the ``/etc/services`` file::\n\n    sqlexec    9088/tcp\n\n\nConfigure settings.py\n---------------------\n\nDjango\u2019s settings.py uses the following to connect to an Informix database:\n\n.. code-block:: python\n\n    'default': {\n        'ENGINE': 'django_informixdb',\n        'NAME': 'myproject',\n        'SERVER': 'ifxserver',\n        'USER' : 'testuser',\n        'PASSWORD': 'passw0rd',\n        'OPTIONS': {\n            'DRIVER': '/path/to/iclit09b.so'. # Or iclit09b.dylib on macOS\n            'CPTIMEOUT': 120,\n            'CONN_TIMEOUT': 120,\n            'ISOLATION_LEVEL': 'READ_UNCOMMITTED',\n            'LOCK_MODE_WAIT': 0,\n            'VALIDATE_CONNECTION': True,\n        },\n        'CONNECTION_RETRY': {\n            'MAX_ATTEMPTS': 10,\n        },\n        'TEST': {\n            'NAME': 'myproject',\n            'CREATE_DB': False\n        }\n    }\n\nCPTIMEOUT\n    This will set connection pooling timeout.\n    Possible values::\n\n        0 - Turn off connection pooling\n        nn - timeout set nn seconds\n\nCONN_TIMEOUT\n    This will set timeout for operations on connections (connection, ??closing??, we're not sure).\n    Possible values::\n\n        0 - Default timeout to the database (which could mean no timeout)\n        nn - timeout set nn seconds\n\nISOLATION_LEVEL\n    This will set database isolation level at connection level\n    Possible values::\n\n        READ_COMMITED\n        READ_UNCOMMITTED\n        SERIALIZABLE\n\nLOCK_MODE_WAIT\n    This will set database LOCK MODE WAIT at connection level\n    Application can use this property to override the default server\n    process for accessing a locked row or table.\n    The default value is 0 (do not wait for the lock).\n    Possible values::\n\n        -1 - WAIT until the lock is released.\n        0 - DO NOT WAIT, end the operation, and return with error.\n        nn - WAIT for nn seconds for the lock to be released.\n\nVALIDATE_CONNECTION\n    Whether existing connections should be validated at the start of the request. Defaults to\n    `False`.\n\nVALIDATION_INTERVAL\n    How often in seconds to revalidate connections if `VALIDATE_CONNECTION` is enabled. Defaults to\n    `300` (5 minutes).\n\nVALIDATION_QUERY\n    Query used to validate whether a connection is usable. Defaults to\n    `\"SELECT 1 FROM sysmaster:sysdual\"`.\n\nCONNECTION_RETRY\n    When opening a new connection to the database, automatically retry up to ``MAX_ATTEMPTS`` times\n    in the case of errors. Only error codes in ``ERRORS`` will trigger a retry. The wait time\n    between retries is calculated using an exponential backoff with jitter formula::\n\n        random_between(WAIT_MIN, min(WAIT_MAX, WAIT_MULTIPLIER * WAIT_EXP_BASE ** (attempt - 1)))\n\n    Defaults (wait times are in milliseconds)::\n\n        MAX_ATTEMPTS: 1  # this implies no retries\n        WAIT_MIN: 0\n        WAIT_MAX: 1000\n        WAIT_MULTIPLIER: 25\n        WAIT_EXP_BASE: 2\n        ERRORS: ['-908', '-930', '-27001']\n\n    Each of these settings can be overridden in the ``CONNECTION_RETRY`` section of the database\n    configuration in ``settings.py``. For example::\n\n        DATABASES = {\n           'default': {\n               'ENGINE': 'django_informixdb',\n               'CONNECTION_RETRY': {\n                   'MAX_ATTEMPTS': 10,\n                   'WAIT_MIN': 0,\n                   'WAIT_MAX': 500,\n               },\n               # ...\n            },\n         }\n\n    The error codes that are retried by default correspond to the following errors:\n\n    * ``-908 Attempt to connect to database server (servername) failed``\n    * ``-930 Cannot connect to database server servername``\n    * ``-27001 Read error occurred during connection attempt``\n\n    These errors are often seen when the database server is too busy, too many clients are\n    attempting to connect at the same time or a network firewall has chopped the connection.\n\n\n.. note:\n    The ``DRIVER`` option is optional, default locations will be used per platform if it is not provided.\n\n.. note:\n    The ``TEST`` option sets test parametes.  Use ``NAME`` to override the name of the test database\n    and set ``CREATE_DB`` to ``False`` to prevent Django from attempting to create a new test\n    database.\n\nUsing with the Docker Informix Dev Database\n-------------------------------------------\n\nThe docker image from IBM for the Informix developer database image behaves a little differently compared to other images. As such it needs a little extra handling, and doesn't seem to work with docker-compose\n\nFirstly we need to download and getting it running:\n\n.. code-block:: bash\n\n    $ docker run -itd --name iif_developer_edition --privileged -p 9088:9088 -p 9089:9089 -p 27017:27017 \\\n    -p 27018:27018 -p 27883:27883 -e LICENSE=accept ibmcom/informix-developer-database:latest\n\nThis will download the image if it doesn't exist, and then run it with the name ``iif_developer_edition``. The first time this run, the image will do a bunch of initial setup stuff. As we used the ``-d`` option, it will run in the background as a detached process. So don't be concerned that you do not see anything in the output.\n\nYou can stop and restart the container with:\n\n.. code-block:: bash\n\n    $ docker stop iif_developer_edition\n    $ docker start iif_developer_edition\n\nIt seems that the Informix ODBC driver does not currently support creating databases. So we will need to do\nthat manually, by attaching to the running container\n\n.. code-block:: bash\n\n    $ docker attach iif_developer_edition\n\n\nThis will give you a shell on the running container, and you can therefore use dbaccess to create your database.\nYou can exit this shell using ``Ctrl-p`` ``Ctrl-q`` without shutting down the whole container.\n\nThis Django database adaptor for Informix requires transaction support to be enabled in our database.\nThis is not the default within the Informix Developer image.  So you need to enable it on a per database basis:\n\n.. code-block:: bash\n\n    $ docker attach iif_developer_edition\n    $ ontape -s -B <DB_NAME>\n\nAgain, you can detach using ``Ctrl-p`` ``Ctrl-q``.\n\nFinally you need to ensure that our local dev database is included in the ``sqlhosts`` file. e.g.:\n\n.. code-block:: bash\n\n    dev    onsoctcp    localhost    9088\n\nYou should now be able to point Django to our local test database using the syntax detailed above.\n\n\nUsing Django InformixDB with docker-compose\n-------------------------------------------\n\nIt is possible to use the Informix developer docker image with docker-compose with a little effort.\n\nExample docker-compose.yml\n\n.. code-block:: yaml\n\n    version: '3'\n\n    services:\n        db:\n            image: ibmcom/informix-developer-database\n            tty: true # Needed to ensure container doesn't self terminate\n            environment:\n                LICENSE: accept\n            privileged: true\n            ports:\n                - \"9088:9088\"\n                - \"9089:9089\"\n                - \"27017:27017\"\n                - \"27018:27018\"\n                - \"27883:27883\"\n\n\nThe key entry in the compose file which is out of the ordinary is `tty: true`. This allocates a (virtual) TTY to the container. The Informix developer database container expects a `tty` and terminates without one when run inside docker-compose.\n\nOnce it is up and running with `docker-compose up` you can run a `bash` shell on the running container with:\n\n.. code-block:: bash\n\n    docker exec -it informix_db_1 bash\n\n\nWhere `informix_db_1` is the name of the running container. From this shell you can create your DB with `dbaccess` etc.\n\n.. warning::\n\n    This approach still requires the SDK to installed locally and the appropriate environmental variables to be set up. Along with entries in `sqlhosts` and `/etc/services`\n\n\nTesting against an Informix Database\n------------------------------------\n\nDue to a bug in the Informix ODBC driver, it is not currently possible to run Django tests normally. Specifically, it is not possible for Django to create a test database. As such, you will need to do it manually. By default Django will attempt to create a database with a name equal to the default database name with a ``test_`` prefix. e.g. if you database name is ``my_database``, the test database name would be ``test_my_database``.  This can be overridden with the ``NAME`` option under ``TEST``.\n\nTo prevent Django from attempting to create a test database, set the ``CREATE_DB`` option\nunder ``TEST`` to ``False``: see 'Configure settings.py' above.\n\nYou can follow the steps above, in the section on using Informix locally with Docker to create a test database. Then when running the test you can tell Django to re-use an existing database, rather than trying to create a new one with the ``-k`` parameter:\n\n.. code-block:: bash\n\n    ./manage.py test -k\n\n\nFor django_informixdb Developers\n--------------------------------\n\nTo run the django_informixdb test suite, you need to set the INFORMIXDIR environment variable, and the tests\nexpect an Informix database at host \"informix\". Change that host in `test/conftest.py` if you need to.\nThen run the test suite with:\n\n    tox\n\nThis will run the tests under Django 1 and 2.\n\n\nRelease History\n---------------\n\nVersion 1.9.0\n\n- Enable setting a validation interval.\n\nVersion 1.8.0\n\n- Enable validating connections at start of request.\n\nVersion 1.7.0\n\n- Add CONN_TIMEOUT setting.\n\nVersion 1.5.0\n\n- Enable retrying if get connection fails.\n\nVersion 1.3.3\n\n- Compability fix for Django 2+ to remove old \"context\" argument from\n  custom fields\n\nVersion 1.3.0\n\n- Addressing deprecation warning for conversion functions in Django 2+\n- Detect incorrect INFORMIXSQLHOSTS setting earlier for better error message\n\nVersion 1.2.0\n\n- Fix bug in DecimalField handling under Django 2+\n\nVersion 1.1.0\n\n- Added LOCK_MODE_WAIT option\n\nVersion 1.0.0\n\n- Initial public release\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/reecetech/django_informixdb", "keywords": "django informix", "license": "APLv2", "maintainer": "", "maintainer_email": "", "name": "django-informixdb", "package_url": "https://pypi.org/project/django-informixdb/", "platform": "", "project_url": "https://pypi.org/project/django-informixdb/", "project_urls": {"Homepage": "https://github.com/reecetech/django_informixdb"}, "release_url": "https://pypi.org/project/django-informixdb/1.9.0/", "requires_dist": ["django (>=1.9.6)", "pyodbc (>=4.0.21)", "check-manifest ; extra == 'dev'", "coverage ; extra == 'test'"], "requires_python": "", "summary": "A database driver for Django to connect to an Informix db via ODBC", "version": "1.9.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A database driver for Django to connect to an Informix database via pyodbc.</p>\n<p><strong>Some limitations</strong>:</p>\n<ul>\n<li>Does not support default values</li>\n<li>Informix automatically creates indexes on foreign keys, but Django attempts to do that\nmanually; the current implementation here just attempts to catch the error on index\ncreation. It may unintentionally catch other index creation errors where the index\nalready exists.</li>\n</ul>\n<div id=\"configure-local-environment\">\n<h2>Configure local environment</h2>\n<p>The following environment variables should exist:</p>\n<dl>\n<dt>INFORMIXDIR</dt>\n<dd>The path to the Informix client install directory</dd>\n<dt>INFORMIXSERVER</dt>\n<dd>The name of the Informix service to which we need to connect</dd>\n<dt>INFORMIXSQLHOSTS</dt>\n<dd>The path to the <tt>sqlhosts</tt> file that the Informix driver should use</dd>\n<dt>LD_LIBRARY_PATH</dt>\n<dd>The path(s) to the various Informix library files: Usually\n<tt><span class=\"pre\">$INFORIMIXDIR/lib:$INFORMIXDIR/lib/cli:$IMFORMIXDIR/lib/esql</span></tt></dd>\n<dt>DB_LOCALE</dt>\n<dd>In case of <tt>Database locale information mismatch.</tt> error during connection,\nyou should specify your database locale, e.g. <tt><span class=\"pre\">DB_LOCALE=en_US.8859-15</span></tt></dd>\n</dl>\n<p>You will also need to add an entry within your <tt>sqlhosts</tt> file for each remote/local Informix\nserver connection in the following format:</p>\n<pre>&lt;INFORMIX_SERVER_NAME&gt;    onsoctcp     &lt;INFORMIX_HOST_NAME&gt;    &lt;INFORMIX_SERVICE_NAME&gt;\n</pre>\n<p>For example:</p>\n<pre>dev    onsoctcp    localhost    9088\n</pre>\n<p>You may alternatively use a symbolic name in that line in place of the port number, typically <tt>sqlexec</tt> and\nthen configure the port number in the <tt>/etc/services</tt> file:</p>\n<pre>sqlexec    9088/tcp\n</pre>\n</div>\n<div id=\"configure-settings-py\">\n<h2>Configure settings.py</h2>\n<p>Django\u2019s settings.py uses the following to connect to an Informix database:</p>\n<pre><span class=\"s1\">'default'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'ENGINE'</span><span class=\"p\">:</span> <span class=\"s1\">'django_informixdb'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'NAME'</span><span class=\"p\">:</span> <span class=\"s1\">'myproject'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'SERVER'</span><span class=\"p\">:</span> <span class=\"s1\">'ifxserver'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'USER'</span> <span class=\"p\">:</span> <span class=\"s1\">'testuser'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'PASSWORD'</span><span class=\"p\">:</span> <span class=\"s1\">'passw0rd'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'OPTIONS'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'DRIVER'</span><span class=\"p\">:</span> <span class=\"s1\">'/path/to/iclit09b.so'</span><span class=\"o\">.</span> <span class=\"c1\"># Or iclit09b.dylib on macOS</span>\n        <span class=\"s1\">'CPTIMEOUT'</span><span class=\"p\">:</span> <span class=\"mi\">120</span><span class=\"p\">,</span>\n        <span class=\"s1\">'CONN_TIMEOUT'</span><span class=\"p\">:</span> <span class=\"mi\">120</span><span class=\"p\">,</span>\n        <span class=\"s1\">'ISOLATION_LEVEL'</span><span class=\"p\">:</span> <span class=\"s1\">'READ_UNCOMMITTED'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'LOCK_MODE_WAIT'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"s1\">'VALIDATE_CONNECTION'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n    <span class=\"s1\">'CONNECTION_RETRY'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'MAX_ATTEMPTS'</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n    <span class=\"s1\">'TEST'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'NAME'</span><span class=\"p\">:</span> <span class=\"s1\">'myproject'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'CREATE_DB'</span><span class=\"p\">:</span> <span class=\"kc\">False</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<dl>\n<dt>CPTIMEOUT</dt>\n<dd><p>This will set connection pooling timeout.\nPossible values:</p>\n<pre>0 - Turn off connection pooling\nnn - timeout set nn seconds\n</pre>\n</dd>\n<dt>CONN_TIMEOUT</dt>\n<dd><p>This will set timeout for operations on connections (connection, ??closing??, we\u2019re not sure).\nPossible values:</p>\n<pre>0 - Default timeout to the database (which could mean no timeout)\nnn - timeout set nn seconds\n</pre>\n</dd>\n<dt>ISOLATION_LEVEL</dt>\n<dd><p>This will set database isolation level at connection level\nPossible values:</p>\n<pre>READ_COMMITED\nREAD_UNCOMMITTED\nSERIALIZABLE\n</pre>\n</dd>\n<dt>LOCK_MODE_WAIT</dt>\n<dd><p>This will set database LOCK MODE WAIT at connection level\nApplication can use this property to override the default server\nprocess for accessing a locked row or table.\nThe default value is 0 (do not wait for the lock).\nPossible values:</p>\n<pre>-1 - WAIT until the lock is released.\n0 - DO NOT WAIT, end the operation, and return with error.\nnn - WAIT for nn seconds for the lock to be released.\n</pre>\n</dd>\n<dt>VALIDATE_CONNECTION</dt>\n<dd>Whether existing connections should be validated at the start of the request. Defaults to\n<cite>False</cite>.</dd>\n<dt>VALIDATION_INTERVAL</dt>\n<dd>How often in seconds to revalidate connections if <cite>VALIDATE_CONNECTION</cite> is enabled. Defaults to\n<cite>300</cite> (5 minutes).</dd>\n<dt>VALIDATION_QUERY</dt>\n<dd>Query used to validate whether a connection is usable. Defaults to\n<cite>\u201cSELECT 1 FROM sysmaster:sysdual\u201d</cite>.</dd>\n<dt>CONNECTION_RETRY</dt>\n<dd><p>When opening a new connection to the database, automatically retry up to <tt>MAX_ATTEMPTS</tt> times\nin the case of errors. Only error codes in <tt>ERRORS</tt> will trigger a retry. The wait time\nbetween retries is calculated using an exponential backoff with jitter formula:</p>\n<pre>random_between(WAIT_MIN, min(WAIT_MAX, WAIT_MULTIPLIER * WAIT_EXP_BASE ** (attempt - 1)))\n</pre>\n<p>Defaults (wait times are in milliseconds):</p>\n<pre>MAX_ATTEMPTS: 1  # this implies no retries\nWAIT_MIN: 0\nWAIT_MAX: 1000\nWAIT_MULTIPLIER: 25\nWAIT_EXP_BASE: 2\nERRORS: ['-908', '-930', '-27001']\n</pre>\n<p>Each of these settings can be overridden in the <tt>CONNECTION_RETRY</tt> section of the database\nconfiguration in <tt>settings.py</tt>. For example:</p>\n<pre>DATABASES = {\n   'default': {\n       'ENGINE': 'django_informixdb',\n       'CONNECTION_RETRY': {\n           'MAX_ATTEMPTS': 10,\n           'WAIT_MIN': 0,\n           'WAIT_MAX': 500,\n       },\n       # ...\n    },\n }\n</pre>\n<p>The error codes that are retried by default correspond to the following errors:</p>\n<ul>\n<li><tt><span class=\"pre\">-908</span> Attempt to connect to database server (servername) failed</tt></li>\n<li><tt><span class=\"pre\">-930</span> Cannot connect to database server servername</tt></li>\n<li><tt><span class=\"pre\">-27001</span> Read error occurred during connection attempt</tt></li>\n</ul>\n<p>These errors are often seen when the database server is too busy, too many clients are\nattempting to connect at the same time or a network firewall has chopped the connection.</p>\n</dd>\n</dl>\n</div>\n<div id=\"using-with-the-docker-informix-dev-database\">\n<h2>Using with the Docker Informix Dev Database</h2>\n<p>The docker image from IBM for the Informix developer database image behaves a little differently compared to other images. As such it needs a little extra handling, and doesn\u2019t seem to work with docker-compose</p>\n<p>Firstly we need to download and getting it running:</p>\n<pre>$ docker run -itd --name iif_developer_edition --privileged -p <span class=\"m\">9088</span>:9088 -p <span class=\"m\">9089</span>:9089 -p <span class=\"m\">27017</span>:27017 <span class=\"se\">\\\n</span>-p <span class=\"m\">27018</span>:27018 -p <span class=\"m\">27883</span>:27883 -e <span class=\"nv\">LICENSE</span><span class=\"o\">=</span>accept ibmcom/informix-developer-database:latest\n</pre>\n<p>This will download the image if it doesn\u2019t exist, and then run it with the name <tt>iif_developer_edition</tt>. The first time this run, the image will do a bunch of initial setup stuff. As we used the <tt><span class=\"pre\">-d</span></tt> option, it will run in the background as a detached process. So don\u2019t be concerned that you do not see anything in the output.</p>\n<p>You can stop and restart the container with:</p>\n<pre>$ docker stop iif_developer_edition\n$ docker start iif_developer_edition\n</pre>\n<p>It seems that the Informix ODBC driver does not currently support creating databases. So we will need to do\nthat manually, by attaching to the running container</p>\n<pre>$ docker attach iif_developer_edition\n</pre>\n<p>This will give you a shell on the running container, and you can therefore use dbaccess to create your database.\nYou can exit this shell using <tt><span class=\"pre\">Ctrl-p</span></tt> <tt><span class=\"pre\">Ctrl-q</span></tt> without shutting down the whole container.</p>\n<p>This Django database adaptor for Informix requires transaction support to be enabled in our database.\nThis is not the default within the Informix Developer image.  So you need to enable it on a per database basis:</p>\n<pre>$ docker attach iif_developer_edition\n$ ontape -s -B &lt;DB_NAME&gt;\n</pre>\n<p>Again, you can detach using <tt><span class=\"pre\">Ctrl-p</span></tt> <tt><span class=\"pre\">Ctrl-q</span></tt>.</p>\n<p>Finally you need to ensure that our local dev database is included in the <tt>sqlhosts</tt> file. e.g.:</p>\n<pre>dev    onsoctcp    localhost    <span class=\"m\">9088</span>\n</pre>\n<p>You should now be able to point Django to our local test database using the syntax detailed above.</p>\n</div>\n<div id=\"using-django-informixdb-with-docker-compose\">\n<h2>Using Django InformixDB with docker-compose</h2>\n<p>It is possible to use the Informix developer docker image with docker-compose with a little effort.</p>\n<p>Example docker-compose.yml</p>\n<pre><span class=\"nt\">version</span><span class=\"p\">:</span> <span class=\"s\">'3'</span>\n\n<span class=\"nt\">services</span><span class=\"p\">:</span>\n    <span class=\"nt\">db</span><span class=\"p\">:</span>\n        <span class=\"nt\">image</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">ibmcom/informix-developer-database</span>\n        <span class=\"nt\">tty</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">true</span> <span class=\"c1\"># Needed to ensure container doesn't self terminate</span>\n        <span class=\"nt\">environment</span><span class=\"p\">:</span>\n            <span class=\"nt\">LICENSE</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">accept</span>\n        <span class=\"nt\">privileged</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">true</span>\n        <span class=\"nt\">ports</span><span class=\"p\">:</span>\n            <span class=\"p-Indicator\">-</span> <span class=\"s\">\"9088:9088\"</span>\n            <span class=\"p-Indicator\">-</span> <span class=\"s\">\"9089:9089\"</span>\n            <span class=\"p-Indicator\">-</span> <span class=\"s\">\"27017:27017\"</span>\n            <span class=\"p-Indicator\">-</span> <span class=\"s\">\"27018:27018\"</span>\n            <span class=\"p-Indicator\">-</span> <span class=\"s\">\"27883:27883\"</span>\n</pre>\n<p>The key entry in the compose file which is out of the ordinary is <cite>tty: true</cite>. This allocates a (virtual) TTY to the container. The Informix developer database container expects a <cite>tty</cite> and terminates without one when run inside docker-compose.</p>\n<p>Once it is up and running with <cite>docker-compose up</cite> you can run a <cite>bash</cite> shell on the running container with:</p>\n<pre>docker <span class=\"nb\">exec</span> -it informix_db_1 bash\n</pre>\n<p>Where <cite>informix_db_1</cite> is the name of the running container. From this shell you can create your DB with <cite>dbaccess</cite> etc.</p>\n<div>\n<p>Warning</p>\n<p>This approach still requires the SDK to installed locally and the appropriate environmental variables to be set up. Along with entries in <cite>sqlhosts</cite> and <cite>/etc/services</cite></p>\n</div>\n</div>\n<div id=\"testing-against-an-informix-database\">\n<h2>Testing against an Informix Database</h2>\n<p>Due to a bug in the Informix ODBC driver, it is not currently possible to run Django tests normally. Specifically, it is not possible for Django to create a test database. As such, you will need to do it manually. By default Django will attempt to create a database with a name equal to the default database name with a <tt>test_</tt> prefix. e.g. if you database name is <tt>my_database</tt>, the test database name would be <tt>test_my_database</tt>.  This can be overridden with the <tt>NAME</tt> option under <tt>TEST</tt>.</p>\n<p>To prevent Django from attempting to create a test database, set the <tt>CREATE_DB</tt> option\nunder <tt>TEST</tt> to <tt>False</tt>: see \u2018Configure settings.py\u2019 above.</p>\n<p>You can follow the steps above, in the section on using Informix locally with Docker to create a test database. Then when running the test you can tell Django to re-use an existing database, rather than trying to create a new one with the <tt><span class=\"pre\">-k</span></tt> parameter:</p>\n<pre>./manage.py <span class=\"nb\">test</span> -k\n</pre>\n</div>\n<div id=\"for-django-informixdb-developers\">\n<h2>For django_informixdb Developers</h2>\n<p>To run the django_informixdb test suite, you need to set the INFORMIXDIR environment variable, and the tests\nexpect an Informix database at host \u201cinformix\u201d. Change that host in <cite>test/conftest.py</cite> if you need to.\nThen run the test suite with:</p>\n<blockquote>\ntox</blockquote>\n<p>This will run the tests under Django 1 and 2.</p>\n</div>\n<div id=\"release-history\">\n<h2>Release History</h2>\n<p>Version 1.9.0</p>\n<ul>\n<li>Enable setting a validation interval.</li>\n</ul>\n<p>Version 1.8.0</p>\n<ul>\n<li>Enable validating connections at start of request.</li>\n</ul>\n<p>Version 1.7.0</p>\n<ul>\n<li>Add CONN_TIMEOUT setting.</li>\n</ul>\n<p>Version 1.5.0</p>\n<ul>\n<li>Enable retrying if get connection fails.</li>\n</ul>\n<p>Version 1.3.3</p>\n<ul>\n<li>Compability fix for Django 2+ to remove old \u201ccontext\u201d argument from\ncustom fields</li>\n</ul>\n<p>Version 1.3.0</p>\n<ul>\n<li>Addressing deprecation warning for conversion functions in Django 2+</li>\n<li>Detect incorrect INFORMIXSQLHOSTS setting earlier for better error message</li>\n</ul>\n<p>Version 1.2.0</p>\n<ul>\n<li>Fix bug in DecimalField handling under Django 2+</li>\n</ul>\n<p>Version 1.1.0</p>\n<ul>\n<li>Added LOCK_MODE_WAIT option</li>\n</ul>\n<p>Version 1.0.0</p>\n<ul>\n<li>Initial public release</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 5612031, "releases": {"0.1.1": [], "0.1.2": [{"comment_text": "", "digests": {"md5": "28cce2fff42aba71b217714e4a39382d", "sha256": "da5cb56a7e111299fa67f66ac5ebe07ac012e3a27fab3338ba2cdbcfc5959068"}, "downloads": -1, "filename": "django_informixdb-0.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "28cce2fff42aba71b217714e4a39382d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 13273, "upload_time": "2016-05-27T01:59:18", "upload_time_iso_8601": "2016-05-27T01:59:18.478513Z", "url": "https://files.pythonhosted.org/packages/56/9e/9a8cad5fdaa2bc6d4af23400c44a45a88747d41878ad5bacd4a14216e0a6/django_informixdb-0.1.2-py2.py3-none-any.whl", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "ad1c61129d2f36bd40d7aa07ffee7fef", "sha256": "5733981a49a99c5cbfe7379a9aa14818a8371c38cf95c11fcf2837bd7f0ca678"}, "downloads": -1, "filename": "django_informixdb-0.1.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ad1c61129d2f36bd40d7aa07ffee7fef", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 13349, "upload_time": "2016-05-27T11:07:25", "upload_time_iso_8601": "2016-05-27T11:07:25.236704Z", "url": "https://files.pythonhosted.org/packages/e0/04/e043c001b36ed3c44b97d0e1279ec7e5c69092e1b95b203f4007241c4f69/django_informixdb-0.1.3-py2.py3-none-any.whl", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "637814e4666a395e09f84480335b8cb2", "sha256": "304f3b590ea1ae414fc504c586aef8c42a33b82c56baeacb68675716a339f2e5"}, "downloads": -1, "filename": "django_informixdb-1.0.0.tar.gz", "has_sig": false, "md5_digest": "637814e4666a395e09f84480335b8cb2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18694, "upload_time": "2018-05-27T23:26:01", "upload_time_iso_8601": "2018-05-27T23:26:01.119365Z", "url": "https://files.pythonhosted.org/packages/b0/03/506f38c3bbf49f8ae97ecb1e3306b719379fe1c31a65535cc65d4052e4e9/django_informixdb-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "a8c728ed6f0b9b34b2cfa885dab30a03", "sha256": "3e6dc7a023f910ec2e28db3080391b09f78db74163954a91f85a599ef1c07945"}, "downloads": -1, "filename": "django_informixdb-1.1.0.tar.gz", "has_sig": false, "md5_digest": "a8c728ed6f0b9b34b2cfa885dab30a03", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19568, "upload_time": "2018-08-08T06:09:57", "upload_time_iso_8601": "2018-08-08T06:09:57.627317Z", "url": "https://files.pythonhosted.org/packages/fd/3b/77fe19f36de4deb4a11dd774f01b1fad189f3633218de696b4dd11e93595/django_informixdb-1.1.0.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "655fad732b02b9b96d621aca39f6e256", "sha256": "cda2e876035b35bff1c70153b3a73a55dcb9d46a97f0f21ac55755b205d67c48"}, "downloads": -1, "filename": "django_informixdb-1.2.0.tar.gz", "has_sig": false, "md5_digest": "655fad732b02b9b96d621aca39f6e256", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22117, "upload_time": "2018-10-02T22:52:46", "upload_time_iso_8601": "2018-10-02T22:52:46.786428Z", "url": "https://files.pythonhosted.org/packages/a8/7e/adc813a4a9ea0540763cf4051b4abefe81ff5257eca839bfb70f88a1a2e4/django_informixdb-1.2.0.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "06ea613a276762da34da21e865a2e808", "sha256": "77d5e56ccf34b6f51f7191bcb069fb773d57871a2cc7bcbe1de9b3e15baa0562"}, "downloads": -1, "filename": "django_informixdb-1.2.1.tar.gz", "has_sig": false, "md5_digest": "06ea613a276762da34da21e865a2e808", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22115, "upload_time": "2018-10-02T22:57:41", "upload_time_iso_8601": "2018-10-02T22:57:41.279246Z", "url": "https://files.pythonhosted.org/packages/0a/2c/33000ba859dfa4688e988db6d08c28da5547a9f9935ba838e427603bfef6/django_informixdb-1.2.1.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "94980a4f271cdf98c6377dbedcb7ea0f", "sha256": "d2194d8589bff43fb30b9ccf3419db105cd68a8c0331fb89445d7e807cd19f9d"}, "downloads": -1, "filename": "django_informixdb-1.3.0.tar.gz", "has_sig": false, "md5_digest": "94980a4f271cdf98c6377dbedcb7ea0f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22359, "upload_time": "2018-10-12T00:58:59", "upload_time_iso_8601": "2018-10-12T00:58:59.685332Z", "url": "https://files.pythonhosted.org/packages/44/9a/00b18659d4bb3bc044e7e9e95e6ebc04fd74dbcd874374ffbb2c15084dd0/django_informixdb-1.3.0.tar.gz", "yanked": false}], "1.3.1": [{"comment_text": "", "digests": {"md5": "ea04b2c651d4f9752e44a5994ff297fe", "sha256": "7cac3888e84ee1fffef8ec019511c059edc7d6d3dc5a0c7ad0f31d7126ba35f2"}, "downloads": -1, "filename": "django_informixdb-1.3.1.tar.gz", "has_sig": false, "md5_digest": "ea04b2c651d4f9752e44a5994ff297fe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22420, "upload_time": "2018-10-16T04:58:08", "upload_time_iso_8601": "2018-10-16T04:58:08.496984Z", "url": "https://files.pythonhosted.org/packages/5d/b6/f6aaac580cbb0dfe09d1fc7d39b2ec1625fc6db1e67e9d7cd8cdf26aa524/django_informixdb-1.3.1.tar.gz", "yanked": false}], "1.3.2": [{"comment_text": "", "digests": {"md5": "1334544f7610dc1a9f6c9c5483fafb0d", "sha256": "b1ec045e64480386585b33a577bc933b7170cc155e3157b11bb8f518ab9b18f3"}, "downloads": -1, "filename": "django_informixdb-1.3.2.tar.gz", "has_sig": false, "md5_digest": "1334544f7610dc1a9f6c9c5483fafb0d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22426, "upload_time": "2018-11-16T03:28:42", "upload_time_iso_8601": "2018-11-16T03:28:42.212450Z", "url": "https://files.pythonhosted.org/packages/7e/ee/86d2118acb6070bcc908111d64c112a164c6de0c04f69fe1957d83608167/django_informixdb-1.3.2.tar.gz", "yanked": false}], "1.3.3": [{"comment_text": "", "digests": {"md5": "8152520e99d1c157f8fa28708d99a7ca", "sha256": "736f30f53028f7f9f63b402d4bc262d93579e7e1c6054b2a8b6c7ebedbcab8c7"}, "downloads": -1, "filename": "django_informixdb-1.3.3.tar.gz", "has_sig": false, "md5_digest": "8152520e99d1c157f8fa28708d99a7ca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22532, "upload_time": "2018-11-19T00:36:38", "upload_time_iso_8601": "2018-11-19T00:36:38.737972Z", "url": "https://files.pythonhosted.org/packages/7e/4b/0add3b07e7c1afdea63b86c623abb322b2bb1bdf568db89da4849b5a93ae/django_informixdb-1.3.3.tar.gz", "yanked": false}], "1.4.0": [{"comment_text": "", "digests": {"md5": "ff9bb104991c0e872df2a4c9aaf880aa", "sha256": "1ca94d1306ecf4a5357d8c3b70c31b3a655b5acc2e10e2cd570321f64afd4a26"}, "downloads": -1, "filename": "django_informixdb-1.4.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ff9bb104991c0e872df2a4c9aaf880aa", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 24512, "upload_time": "2019-01-08T05:57:49", "upload_time_iso_8601": "2019-01-08T05:57:49.767937Z", "url": "https://files.pythonhosted.org/packages/7a/e0/0244d0a173d5e1bbe5ce009f1b97b6b76ca7ff129a8318ba2c01b573d0ad/django_informixdb-1.4.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "41c8d86a58515db7f42c5d24a245d922", "sha256": "1e1d4b86b01ac95983644a8101d312882f6a0ed90c4b576fb7dee8d7ce39bdcc"}, "downloads": -1, "filename": "django_informixdb-1.4.0.tar.gz", "has_sig": false, "md5_digest": "41c8d86a58515db7f42c5d24a245d922", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20862, "upload_time": "2019-01-08T05:57:51", "upload_time_iso_8601": "2019-01-08T05:57:51.307385Z", "url": "https://files.pythonhosted.org/packages/eb/a9/c19a7e06a596d49aaa79012215f9395aa6ad4d896e8610f7e6f99d6686cc/django_informixdb-1.4.0.tar.gz", "yanked": false}], "1.5.0": [{"comment_text": "", "digests": {"md5": "78a182486aa98c36b263c432e8ba136f", "sha256": "4460290e9e9fb05242dedcc4352ee7924a85797a49b16c086bababac62714e0d"}, "downloads": -1, "filename": "django_informixdb-1.5.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "78a182486aa98c36b263c432e8ba136f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 25530, "upload_time": "2019-05-14T00:14:47", "upload_time_iso_8601": "2019-05-14T00:14:47.171320Z", "url": "https://files.pythonhosted.org/packages/8e/68/db986fd137a0812a25804e36e2da43ec10d2b6cf28b5a3d3ee47680acf39/django_informixdb-1.5.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "274b4af78f42b6bac176ffc5b3fcf8ca", "sha256": "f9e9c411469af4bd219cc1b5075a9443f2903c8555b0ef7038799d40f5b6d86b"}, "downloads": -1, "filename": "django_informixdb-1.5.0.tar.gz", "has_sig": false, "md5_digest": "274b4af78f42b6bac176ffc5b3fcf8ca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23435, "upload_time": "2019-05-14T00:14:49", "upload_time_iso_8601": "2019-05-14T00:14:49.313483Z", "url": "https://files.pythonhosted.org/packages/3d/e7/e58d1157850c906994e4dd927f790713e0bf5c2e02691ff906d550511b53/django_informixdb-1.5.0.tar.gz", "yanked": false}], "1.6.0": [{"comment_text": "", "digests": {"md5": "86e851406cc7a2cd9376ff34874fb37e", "sha256": "972a042f82c607a42016aab1506459d490029546446f299fe544599c771b8dfd"}, "downloads": -1, "filename": "django_informixdb-1.6.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "86e851406cc7a2cd9376ff34874fb37e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 25553, "upload_time": "2019-05-16T11:25:24", "upload_time_iso_8601": "2019-05-16T11:25:24.880203Z", "url": "https://files.pythonhosted.org/packages/d1/0f/d1044fad18be493bc1b990634f5d4d4425e71e4630e101f132455bcb40f9/django_informixdb-1.6.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9b267e1925acabb49e0625227069b71c", "sha256": "6a5fc6071addf58afac2e5382110e6c2f8198c990ddaf9b31e2bf290f6a04018"}, "downloads": -1, "filename": "django_informixdb-1.6.0.tar.gz", "has_sig": false, "md5_digest": "9b267e1925acabb49e0625227069b71c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23486, "upload_time": "2019-05-16T11:25:27", "upload_time_iso_8601": "2019-05-16T11:25:27.469816Z", "url": "https://files.pythonhosted.org/packages/bb/fd/91b669efe90710ff8d90638e1afc3c5e00737f15cecf35b2a2024bd09884/django_informixdb-1.6.0.tar.gz", "yanked": false}], "1.7.0": [{"comment_text": "", "digests": {"md5": "187a12a901b67c144176b34bf2c4a6fd", "sha256": "8906a1e21b302de3ab8f2b6bcecc649146c88fd50d4036acfb4b3746dcf95068"}, "downloads": -1, "filename": "django_informixdb-1.7.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "187a12a901b67c144176b34bf2c4a6fd", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 26054, "upload_time": "2019-06-29T12:02:59", "upload_time_iso_8601": "2019-06-29T12:02:59.733165Z", "url": "https://files.pythonhosted.org/packages/29/c1/941f74cb556bbbec48b593a69bca4486b634bd8ffecd2b0d5f62a3f95977/django_informixdb-1.7.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "34256cadcc0f770c78f678a6bc268f20", "sha256": "383cba50dea3013f3d82eb80a6ad87fe88f02fcd5f1b6e881e8237507fe86968"}, "downloads": -1, "filename": "django_informixdb-1.7.0.tar.gz", "has_sig": false, "md5_digest": "34256cadcc0f770c78f678a6bc268f20", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24139, "upload_time": "2019-06-29T12:03:03", "upload_time_iso_8601": "2019-06-29T12:03:03.499290Z", "url": "https://files.pythonhosted.org/packages/1a/7c/eea18bf42b37328dd7d542e3e9d80cc34e2f410af007e6f0d1fe5694fde3/django_informixdb-1.7.0.tar.gz", "yanked": false}], "1.8.0": [{"comment_text": "", "digests": {"md5": "cd78fba813967d48c93c7a77b8d65366", "sha256": "949001492bc842768ff7a8073ea7f04838d88a5dc54aca705b52f22d4ed9a604"}, "downloads": -1, "filename": "django_informixdb-1.8.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "cd78fba813967d48c93c7a77b8d65366", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 31873, "upload_time": "2019-07-18T03:32:29", "upload_time_iso_8601": "2019-07-18T03:32:29.032595Z", "url": "https://files.pythonhosted.org/packages/3c/bb/9436d4af4368d840f8940c3590736c17e1bd0f7fef66f1c811a73ef5b088/django_informixdb-1.8.0-py2.py3-none-any.whl", "yanked": false}], "1.8.0.dev1": [{"comment_text": "", "digests": {"md5": "c190301de590a05121c08936173187de", "sha256": "2e049291a8aada110286c807b467868479d97fc3885541e44e96f74aabcd4c38"}, "downloads": -1, "filename": "django_informixdb-1.8.0.dev1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c190301de590a05121c08936173187de", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 31403, "upload_time": "2019-07-16T21:47:50", "upload_time_iso_8601": "2019-07-16T21:47:50.775170Z", "url": "https://files.pythonhosted.org/packages/12/dd/8e031e477dd7c6eb9a588022aa4480046bc4a1a9c908a49f2b2f06254014/django_informixdb-1.8.0.dev1-py2.py3-none-any.whl", "yanked": false}], "1.9.0": [{"comment_text": "", "digests": {"md5": "aa36475a9c7a2928d445f6963a5fae7c", "sha256": "8f687fc3bed027e71d61489b4a9bc9148b1f47a403ab4aafee9745a599d7af00"}, "downloads": -1, "filename": "django_informixdb-1.9.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "aa36475a9c7a2928d445f6963a5fae7c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 31831, "upload_time": "2019-07-31T07:29:58", "upload_time_iso_8601": "2019-07-31T07:29:58.126469Z", "url": "https://files.pythonhosted.org/packages/9b/f5/1a0df3e3d423814529b82f4ecce5ca15ce2f46847eea57b1f814b8d29387/django_informixdb-1.9.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e031975c18c0dd7d5b4d776f8f9155ad", "sha256": "abcfa189c4c37b4a6a85516b2d6e52c496a7baa186efcb19bb722697a3f8f4ba"}, "downloads": -1, "filename": "django_informixdb-1.9.0.tar.gz", "has_sig": false, "md5_digest": "e031975c18c0dd7d5b4d776f8f9155ad", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27443, "upload_time": "2019-07-31T07:30:01", "upload_time_iso_8601": "2019-07-31T07:30:01.728834Z", "url": "https://files.pythonhosted.org/packages/10/c3/1e26afe0b6ded76c40dc233c7ea82ca1a0cf27a6059608b0493dd21b6517/django_informixdb-1.9.0.tar.gz", "yanked": false}], "1.9.0rc1": [{"comment_text": "", "digests": {"md5": "8de3a7a60999baeb19fe29a340ea4404", "sha256": "ba1d91b8edb39b2452cd559f760909b310cf43ad3c33467a760fb8245842baaa"}, "downloads": -1, "filename": "django_informixdb-1.9.0rc1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8de3a7a60999baeb19fe29a340ea4404", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 31871, "upload_time": "2019-07-29T02:01:42", "upload_time_iso_8601": "2019-07-29T02:01:42.208916Z", "url": "https://files.pythonhosted.org/packages/c0/a4/21868661082278191a6b11008c7910ebbae4c7ec12d9ba062a82e15e6e6d/django_informixdb-1.9.0rc1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6c8e6b8babf539c1a482355916459cef", "sha256": "6a84e817e19326d07a729631c1ec5e1472bcbecc1fb786192707a0997762ed3a"}, "downloads": -1, "filename": "django_informixdb-1.9.0rc1.tar.gz", "has_sig": false, "md5_digest": "6c8e6b8babf539c1a482355916459cef", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27467, "upload_time": "2019-07-29T02:01:44", "upload_time_iso_8601": "2019-07-29T02:01:44.087539Z", "url": "https://files.pythonhosted.org/packages/de/40/8c878689d9288d4950029fdfbeec453a07eb7562fa5768393d5f432ae7c4/django_informixdb-1.9.0rc1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "aa36475a9c7a2928d445f6963a5fae7c", "sha256": "8f687fc3bed027e71d61489b4a9bc9148b1f47a403ab4aafee9745a599d7af00"}, "downloads": -1, "filename": "django_informixdb-1.9.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "aa36475a9c7a2928d445f6963a5fae7c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 31831, "upload_time": "2019-07-31T07:29:58", "upload_time_iso_8601": "2019-07-31T07:29:58.126469Z", "url": "https://files.pythonhosted.org/packages/9b/f5/1a0df3e3d423814529b82f4ecce5ca15ce2f46847eea57b1f814b8d29387/django_informixdb-1.9.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e031975c18c0dd7d5b4d776f8f9155ad", "sha256": "abcfa189c4c37b4a6a85516b2d6e52c496a7baa186efcb19bb722697a3f8f4ba"}, "downloads": -1, "filename": "django_informixdb-1.9.0.tar.gz", "has_sig": false, "md5_digest": "e031975c18c0dd7d5b4d776f8f9155ad", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27443, "upload_time": "2019-07-31T07:30:01", "upload_time_iso_8601": "2019-07-31T07:30:01.728834Z", "url": "https://files.pythonhosted.org/packages/10/c3/1e26afe0b6ded76c40dc233c7ea82ca1a0cf27a6059608b0493dd21b6517/django_informixdb-1.9.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:35:36 2020"}