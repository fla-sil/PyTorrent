{"info": {"author": "Stefan Foulis", "author_email": "stefan@foulis.ch", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Internet :: WWW/HTTP"], "description": "###################\naldryn-boilerplates\n###################\n\n.. image:: https://travis-ci.org/aldryn/aldryn-boilerplates.svg?branch=develop\n    :target: https://travis-ci.org/aldryn/aldryn-boilerplates\n\n.. image:: https://img.shields.io/coveralls/aldryn/aldryn-boilerplates.svg\n  :target: https://coveralls.io/r/aldryn/aldryn-boilerplates\n\n\n***********\nThe concept\n***********\n\nAldryn Boilerplates aims to solve a familiar Django problem. Sometimes re-usable applications need\nto provide their own templates and staticfiles, but in order to be useful, these need to commit\nthemselves to particular frontend expectations - thereby obliging the adopter to override these\nfiles in order to adapt the application to other frontends, or create a new fork of the project\naimed at a different frontend setup.\n\nIt's especially difficult to provide a rich and complete frontend for a re-usable application,\nbecause there's a conflict between creating a *useful* frontend and creating an *agnostic* one.\n\nThe solution is to build in provision for different, switchable, frontend expectations into the\nre-usable application, and this is what Aldryn Boilerplates does.\n\nOn the `Aldryn <http://aldryn.com>`_ platform, a *Boilerplate* is a complete set of frontend\nexpectations, assumptions, opinions, conventions, frameworks, templates, static files and more - a\nstandard way of working for frontend development.\n\nMany developers do in fact work with their own preferred standard sets of frontend tools and code\nfor all their projects; in effect, with their own Boilerplates, even if they don't use that name.\nAldryn Boilerplates is intended to make it easier to provide support for multiple Boilerplates in\nres-usable applications, and to switch between them.\n\nIf users of a particular frontend framework or system would like to use it with a certain re-usable\napplication, they now no longer need to rip out and replace the existing one, or override it at the\nproject level every single time. Instead with Aldryn Boilerplates they can simply *add* the\nfrontend files to the application, alongside the ones for existing supported Boilerplates.\n\nA simple setting in the project tells applications that support Aldryn Boilerplates which one to\nuse.\n\n\n*************************\nUsing Aldryn Boilerplates\n*************************\n\nAldryn Boilerplates doesn't change the way regular files in ``templates`` and ``static`` are\ndiscovered - a re-usable application that supports Aldryn Boilerplates can also work perfectly well\nin a project that doesn't have it installed.\n\nHowever, to support Aldryn Boilerplates, your application should place Boilerplate-specific\nfrontend files in ``boilerplates/my-boilerplate-name/templates/`` and\n``boilerplates/my-boilerplate-name/static/``.\n\nFor example, to add support for the Standard Aldryn Boilerplate (`aldryn-boilerplate-bootstrap3`_)\nto your application, place the files in ``boilerplates/bootstrap3/templates/`` and\n``boilerplates/bootstrap3/static/``.\n\n.. hint::\n    don't forget to add ``boilerplates`` to ``Manifest.in``, alongside ``static`` and ``templates``\n    when creating Python packages.\n\n.. note::\n    The convention is to prefix the github repository name with ``aldryn-boilerplate-``. Your\n    Boilerplate could be called something like ``aldryn-boilerplate-mycompany-awesome``. To use it\n    in a project, you'd set ``ALDRYN_BOILERPLATE_NAME = 'mycompany-awesome'`` and put templates\n    and static files into ``boilerplates/mycompany-awesome/`` in Addons.\n    ``ALDRYN_BOILERPLATE_NAME`` is set automatically on Aldryn based on\n    ``\"identifier\": \"mycompany-awesome\"`` in ``boilerplate.json`` when submitting a boilerplate to\n    Aldryn.\n\n\n************\nInstallation\n************\n\n.. note::\n    aldryn-boilerplates comes pre-installed on the Aldryn Platform and\n    ``ALDRYN_BOILERPLATE_NAME`` is set automatically.\n\n::\n\n    pip install aldryn-boilerplates\n\n\n*************\nConfiguration\n*************\n\nDjango 1.8+\n-----------\n\nIn general configuration stays the same but you should respect changes that\nwere introduced by django 1.8.\nIn particular in Django 1.8 context processors were moved from ``django.core``\nto ``django.template``.\n\nBe sure to include ``aldryn_boilerplates`` to ``INSTALLED_APPS``, adjust\n``STATICFILES_FINDERS`` and finally configure ``TEMPLATES``.\n\nFor ``TEMPLATES`` you need to add\n``aldryn_boilerplates.context_processors.boilerplate`` to ``context_processors``\nand alter ``loaders`` in the same way as we do it for Django versions prior\nto 1.8.\n\n**Note** that in the example below we are altering the default values,\nso if you are using something that is custom - don't forget to add that too.\n\nHere is an example of a simple configuration:\n\n::\n\n    INSTALLED_APPS = [\n        ...\n        'aldryn_boilerplates',\n        ...\n    ]\n\n    STATICFILES_FINDERS = (\n        'django.contrib.staticfiles.finders.FileSystemFinder',\n        'aldryn_boilerplates.staticfile_finders.AppDirectoriesFinder',\n        'django.contrib.staticfiles.finders.AppDirectoriesFinder',\n    )\n\n    TEMPLATES = [\n        {\n            'BACKEND': 'django.template.backends.django.DjangoTemplates',\n            'OPTIONS': {\n                'context_processors': [\n                    'django.contrib.auth.context_processors.auth',\n                    'django.contrib.messages.context_processors.messages',\n                    'django.template.context_processors.i18n',\n                    'django.template.context_processors.debug',\n                    'django.template.context_processors.request',\n                    'django.template.context_processors.media',\n                    'django.template.context_processors.csrf',\n                    'django.template.context_processors.tz',\n                    'sekizai.context_processors.sekizai',\n                    'django.template.context_processors.static',\n                    'cms.context_processors.cms_settings',\n                    'aldryn_boilerplates.context_processors.boilerplate',\n                ],\n                'loaders': [\n                    'django.template.loaders.filesystem.Loader',\n                    'aldryn_boilerplates.template_loaders.AppDirectoriesLoader',\n                    'django.template.loaders.app_directories.Loader',\n                ],\n            },\n        },\n    ]\n\n\n******************************************************\nAdding aldryn-boilerplate support to existing packages\n******************************************************\n\nThe recommended approach is to add a dependency to aldryn-boilerplates and to move existing\n``static`` and ``template`` files to a boilerplate folder (completely remove ``static`` and\n``templates``). If you're in the process of re-factoring your existing templates with something\nnew, put them into the ``legacy`` boilerplate folder and set ``ALDRYN_BOILERPLATE_NAME='legacy'``\non projects that are still using the old templates.\nThe new and shiny project can then use ``ALDRYN_BOILERPLATE_NAME='bootstrap3'`` to use the new\nAldryn Bootstrap Boilerplate (`aldryn-boilerplate-bootstrap3`_). Or any other\nboilerplate for that matter.\n\nRemoving ``static`` and ``templates`` has the benefit of removing likely deprecated templates\nfrom the very prominent location, that will confuse newcomers. It also prevents having not-relevant\ntemplates and static files messing up your setup.\n\n\n.. _aldryn-boilerplate-bootstrap3: https://github.com/aldryn/aldryn-boilerplate-standard", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/aldryn/aldryn-boilerplates/", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "aldryn-boilerplates", "package_url": "https://pypi.org/project/aldryn-boilerplates/", "platform": "OS Independent", "project_url": "https://pypi.org/project/aldryn-boilerplates/", "project_urls": {"Homepage": "https://github.com/aldryn/aldryn-boilerplates/"}, "release_url": "https://pypi.org/project/aldryn-boilerplates/0.8.0/", "requires_dist": null, "requires_python": "", "summary": "An extension that allows re-usable apps to provide sets of templates and staticfiles for different boilerplates.", "version": "0.8.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/aldryn/aldryn-boilerplates\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/aldryn/aldryn-boilerplates.svg?branch=develop\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9c76839beb87a68f291b12184aa570d687102ab4/68747470733a2f2f7472617669732d63692e6f72672f616c6472796e2f616c6472796e2d626f696c6572706c617465732e7376673f6272616e63683d646576656c6f70\"></a>\n<a href=\"https://coveralls.io/r/aldryn/aldryn-boilerplates\" rel=\"nofollow\"><img alt=\"https://img.shields.io/coveralls/aldryn/aldryn-boilerplates.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/71c9d1b81b0f6e2973797ae98a5d7c43a8eb6786/68747470733a2f2f696d672e736869656c64732e696f2f636f766572616c6c732f616c6472796e2f616c6472796e2d626f696c6572706c617465732e737667\"></a>\n<div id=\"the-concept\">\n<h2>The concept</h2>\n<p>Aldryn Boilerplates aims to solve a familiar Django problem. Sometimes re-usable applications need\nto provide their own templates and staticfiles, but in order to be useful, these need to commit\nthemselves to particular frontend expectations - thereby obliging the adopter to override these\nfiles in order to adapt the application to other frontends, or create a new fork of the project\naimed at a different frontend setup.</p>\n<p>It\u2019s especially difficult to provide a rich and complete frontend for a re-usable application,\nbecause there\u2019s a conflict between creating a <em>useful</em> frontend and creating an <em>agnostic</em> one.</p>\n<p>The solution is to build in provision for different, switchable, frontend expectations into the\nre-usable application, and this is what Aldryn Boilerplates does.</p>\n<p>On the <a href=\"http://aldryn.com\" rel=\"nofollow\">Aldryn</a> platform, a <em>Boilerplate</em> is a complete set of frontend\nexpectations, assumptions, opinions, conventions, frameworks, templates, static files and more - a\nstandard way of working for frontend development.</p>\n<p>Many developers do in fact work with their own preferred standard sets of frontend tools and code\nfor all their projects; in effect, with their own Boilerplates, even if they don\u2019t use that name.\nAldryn Boilerplates is intended to make it easier to provide support for multiple Boilerplates in\nres-usable applications, and to switch between them.</p>\n<p>If users of a particular frontend framework or system would like to use it with a certain re-usable\napplication, they now no longer need to rip out and replace the existing one, or override it at the\nproject level every single time. Instead with Aldryn Boilerplates they can simply <em>add</em> the\nfrontend files to the application, alongside the ones for existing supported Boilerplates.</p>\n<p>A simple setting in the project tells applications that support Aldryn Boilerplates which one to\nuse.</p>\n</div>\n<div id=\"using-aldryn-boilerplates\">\n<h2>Using Aldryn Boilerplates</h2>\n<p>Aldryn Boilerplates doesn\u2019t change the way regular files in <tt>templates</tt> and <tt>static</tt> are\ndiscovered - a re-usable application that supports Aldryn Boilerplates can also work perfectly well\nin a project that doesn\u2019t have it installed.</p>\n<p>However, to support Aldryn Boilerplates, your application should place Boilerplate-specific\nfrontend files in <tt><span class=\"pre\">boilerplates/my-boilerplate-name/templates/</span></tt> and\n<tt><span class=\"pre\">boilerplates/my-boilerplate-name/static/</span></tt>.</p>\n<p>For example, to add support for the Standard Aldryn Boilerplate (<a href=\"https://github.com/aldryn/aldryn-boilerplate-standard\" rel=\"nofollow\">aldryn-boilerplate-bootstrap3</a>)\nto your application, place the files in <tt>boilerplates/bootstrap3/templates/</tt> and\n<tt>boilerplates/bootstrap3/static/</tt>.</p>\n<div>\n<p>Hint</p>\n<p>don\u2019t forget to add <tt>boilerplates</tt> to <tt>Manifest.in</tt>, alongside <tt>static</tt> and <tt>templates</tt>\nwhen creating Python packages.</p>\n</div>\n<div>\n<p>Note</p>\n<p>The convention is to prefix the github repository name with <tt><span class=\"pre\">aldryn-boilerplate-</span></tt>. Your\nBoilerplate could be called something like <tt><span class=\"pre\">aldryn-boilerplate-mycompany-awesome</span></tt>. To use it\nin a project, you\u2019d set <tt>ALDRYN_BOILERPLATE_NAME = <span class=\"pre\">'mycompany-awesome'</span></tt> and put templates\nand static files into <tt><span class=\"pre\">boilerplates/mycompany-awesome/</span></tt> in Addons.\n<tt>ALDRYN_BOILERPLATE_NAME</tt> is set automatically on Aldryn based on\n<tt>\"identifier\": <span class=\"pre\">\"mycompany-awesome\"</span></tt> in <tt>boilerplate.json</tt> when submitting a boilerplate to\nAldryn.</p>\n</div>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<div>\n<p>Note</p>\n<p>aldryn-boilerplates comes pre-installed on the Aldryn Platform and\n<tt>ALDRYN_BOILERPLATE_NAME</tt> is set automatically.</p>\n</div>\n<pre>pip install aldryn-boilerplates\n</pre>\n</div>\n<div id=\"configuration\">\n<h2>Configuration</h2>\n<h2 id=\"django-1-8\"><span class=\"section-subtitle\">Django 1.8+</span></h2>\n<p>In general configuration stays the same but you should respect changes that\nwere introduced by django 1.8.\nIn particular in Django 1.8 context processors were moved from <tt>django.core</tt>\nto <tt>django.template</tt>.</p>\n<p>Be sure to include <tt>aldryn_boilerplates</tt> to <tt>INSTALLED_APPS</tt>, adjust\n<tt>STATICFILES_FINDERS</tt> and finally configure <tt>TEMPLATES</tt>.</p>\n<p>For <tt>TEMPLATES</tt> you need to add\n<tt>aldryn_boilerplates.context_processors.boilerplate</tt> to <tt>context_processors</tt>\nand alter <tt>loaders</tt> in the same way as we do it for Django versions prior\nto 1.8.</p>\n<p><strong>Note</strong> that in the example below we are altering the default values,\nso if you are using something that is custom - don\u2019t forget to add that too.</p>\n<p>Here is an example of a simple configuration:</p>\n<pre>INSTALLED_APPS = [\n    ...\n    'aldryn_boilerplates',\n    ...\n]\n\nSTATICFILES_FINDERS = (\n    'django.contrib.staticfiles.finders.FileSystemFinder',\n    'aldryn_boilerplates.staticfile_finders.AppDirectoriesFinder',\n    'django.contrib.staticfiles.finders.AppDirectoriesFinder',\n)\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'OPTIONS': {\n            'context_processors': [\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n                'django.template.context_processors.i18n',\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.template.context_processors.media',\n                'django.template.context_processors.csrf',\n                'django.template.context_processors.tz',\n                'sekizai.context_processors.sekizai',\n                'django.template.context_processors.static',\n                'cms.context_processors.cms_settings',\n                'aldryn_boilerplates.context_processors.boilerplate',\n            ],\n            'loaders': [\n                'django.template.loaders.filesystem.Loader',\n                'aldryn_boilerplates.template_loaders.AppDirectoriesLoader',\n                'django.template.loaders.app_directories.Loader',\n            ],\n        },\n    },\n]\n</pre>\n</div>\n<div id=\"adding-aldryn-boilerplate-support-to-existing-packages\">\n<h2>Adding aldryn-boilerplate support to existing packages</h2>\n<p>The recommended approach is to add a dependency to aldryn-boilerplates and to move existing\n<tt>static</tt> and <tt>template</tt> files to a boilerplate folder (completely remove <tt>static</tt> and\n<tt>templates</tt>). If you\u2019re in the process of re-factoring your existing templates with something\nnew, put them into the <tt>legacy</tt> boilerplate folder and set <tt><span class=\"pre\">ALDRYN_BOILERPLATE_NAME='legacy'</span></tt>\non projects that are still using the old templates.\nThe new and shiny project can then use <tt><span class=\"pre\">ALDRYN_BOILERPLATE_NAME='bootstrap3'</span></tt> to use the new\nAldryn Bootstrap Boilerplate (<a href=\"https://github.com/aldryn/aldryn-boilerplate-standard\" rel=\"nofollow\">aldryn-boilerplate-bootstrap3</a>). Or any other\nboilerplate for that matter.</p>\n<p>Removing <tt>static</tt> and <tt>templates</tt> has the benefit of removing likely deprecated templates\nfrom the very prominent location, that will confuse newcomers. It also prevents having not-relevant\ntemplates and static files messing up your setup.</p>\n</div>\n\n          </div>"}, "last_serial": 4538528, "releases": {"0.3": [{"comment_text": "", "digests": {"md5": "ae88172f2883456147da3b405f94e1ed", "sha256": "70f5577c3cdf7c618060e920eda98616292ba74039238ac95692d79e0c3bcb01"}, "downloads": -1, "filename": "aldryn-boilerplates-0.3.tar.gz", "has_sig": false, "md5_digest": "ae88172f2883456147da3b405f94e1ed", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4547, "upload_time": "2014-12-16T15:32:48", "upload_time_iso_8601": "2014-12-16T15:32:48.576324Z", "url": "https://files.pythonhosted.org/packages/cd/59/923373bc06d7c5d6f7928fceda50e67632ee8f63e87a26030562c11c0907/aldryn-boilerplates-0.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "ffc539c57c5e1ed4314cf38e64b953ad", "sha256": "bc4d46facf1c43c540c1d65d914c066225990b354fb4812922687efe0f4f214a"}, "downloads": -1, "filename": "aldryn-boilerplates-0.4.tar.gz", "has_sig": false, "md5_digest": "ffc539c57c5e1ed4314cf38e64b953ad", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5060, "upload_time": "2015-01-28T08:18:45", "upload_time_iso_8601": "2015-01-28T08:18:45.244025Z", "url": "https://files.pythonhosted.org/packages/54/56/8d0ff22b0c6b5b708abbb8bceedc4bfa7065a668452d9a6588801a7de48e/aldryn-boilerplates-0.4.tar.gz", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "63da452c6a6eb395758846fcf4208fb2", "sha256": "ee29fb066ea1021d33b776fd64495b879170cf89827d82ca5f3e96021fecf3fb"}, "downloads": -1, "filename": "aldryn-boilerplates-0.5.tar.gz", "has_sig": false, "md5_digest": "63da452c6a6eb395758846fcf4208fb2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5598, "upload_time": "2015-01-28T09:52:51", "upload_time_iso_8601": "2015-01-28T09:52:51.058930Z", "url": "https://files.pythonhosted.org/packages/62/88/bad8c69d363017b5f76b95a5147ffc4bfa813c4cc8232fbd9eed0d5365e5/aldryn-boilerplates-0.5.tar.gz", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "96bf8a6fca253f116c7b93dfe6346dcd", "sha256": "ea794769cd1a79a54b535b37a1a5f480a095564ebf5c5feb10a6f88c892efcf3"}, "downloads": -1, "filename": "aldryn-boilerplates-0.6.tar.gz", "has_sig": false, "md5_digest": "96bf8a6fca253f116c7b93dfe6346dcd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7083, "upload_time": "2015-02-02T17:30:51", "upload_time_iso_8601": "2015-02-02T17:30:51.918708Z", "url": "https://files.pythonhosted.org/packages/ab/99/b76111d1b6f0bdbd66daa22a93adbe0ac0c7cc4429c8b9b35422104cb802/aldryn-boilerplates-0.6.tar.gz", "yanked": false}], "0.7": [{"comment_text": "", "digests": {"md5": "e32043a496a54dfbe14a6c28b790a853", "sha256": "715129398f794942c0f27988b82a4b97c1ec5ad9521b30bb4ea2d62ecf73cbef"}, "downloads": -1, "filename": "aldryn-boilerplates-0.7.tar.gz", "has_sig": false, "md5_digest": "e32043a496a54dfbe14a6c28b790a853", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7127, "upload_time": "2015-04-26T12:07:22", "upload_time_iso_8601": "2015-04-26T12:07:22.308482Z", "url": "https://files.pythonhosted.org/packages/85/c4/6be00d0bd2599b75618a3055080fc6e0475f5e4e2a9343387aaab5aa78a8/aldryn-boilerplates-0.7.tar.gz", "yanked": false}], "0.7.1": [{"comment_text": "", "digests": {"md5": "0759da3e2f7ffe63b6cf6733266aefdb", "sha256": "98a9661b67f891126d0b09fb9e719aeb72b5869a63dc496b63e5738d744f6802"}, "downloads": -1, "filename": "aldryn-boilerplates-0.7.1.tar.gz", "has_sig": false, "md5_digest": "0759da3e2f7ffe63b6cf6733266aefdb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7195, "upload_time": "2015-06-18T12:51:15", "upload_time_iso_8601": "2015-06-18T12:51:15.555609Z", "url": "https://files.pythonhosted.org/packages/07/90/4d10b8f2035beda1ed9ed08c983a714e2fef5afaa772cbda490554a92f7e/aldryn-boilerplates-0.7.1.tar.gz", "yanked": false}], "0.7.2": [{"comment_text": "", "digests": {"md5": "fc74fb0465fd08ecf312bc48d78794eb", "sha256": "9545f0019fc8066b40491278e0c1bd3d85a9ae31a70107318d5128a5de54d4c7"}, "downloads": -1, "filename": "aldryn-boilerplates-0.7.2.tar.gz", "has_sig": false, "md5_digest": "fc74fb0465fd08ecf312bc48d78794eb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7947, "upload_time": "2015-08-19T19:00:38", "upload_time_iso_8601": "2015-08-19T19:00:38.390980Z", "url": "https://files.pythonhosted.org/packages/09/4e/8ad7559c8d97c5dde6551d5ce59acd5a7d3bc0e1cafe658cc29555a3d7d2/aldryn-boilerplates-0.7.2.tar.gz", "yanked": false}], "0.7.3": [{"comment_text": "", "digests": {"md5": "0e6e5569f4fb08f5002ffc265b0bca27", "sha256": "76610923e2df508f57dff3f8acd4f6466561412ae200733ed1b840522485454a"}, "downloads": -1, "filename": "aldryn-boilerplates-0.7.3.tar.gz", "has_sig": false, "md5_digest": "0e6e5569f4fb08f5002ffc265b0bca27", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8618, "upload_time": "2015-10-29T10:29:14", "upload_time_iso_8601": "2015-10-29T10:29:14.444883Z", "url": "https://files.pythonhosted.org/packages/b5/21/66dbefa1594720ddf712d75911479e890eb4ca4f7516967f34e82cdcd599/aldryn-boilerplates-0.7.3.tar.gz", "yanked": false}], "0.7.4": [{"comment_text": "", "digests": {"md5": "82c13dce6df2235bfe64b9ff0eb5ee8b", "sha256": "bd182b251179131cfd815e26f88c9e531dd3e9d00e7a3715ba9b2a00b6772691"}, "downloads": -1, "filename": "aldryn_boilerplates-0.7.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "82c13dce6df2235bfe64b9ff0eb5ee8b", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 17353, "upload_time": "2016-01-27T13:12:48", "upload_time_iso_8601": "2016-01-27T13:12:48.020436Z", "url": "https://files.pythonhosted.org/packages/0e/ea/23880874483ae7bb2ced9cc7f87cbcef7c6cc68ed7be65420acb135dcaea/aldryn_boilerplates-0.7.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e9aea54f0ef10fb0368957ae8e048f47", "sha256": "f520d7ddb4c656912a9ca31bddc11827b95cb8cd4799c9aef2e065b514db31a2"}, "downloads": -1, "filename": "aldryn-boilerplates-0.7.4.tar.gz", "has_sig": false, "md5_digest": "e9aea54f0ef10fb0368957ae8e048f47", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8860, "upload_time": "2016-01-27T13:08:40", "upload_time_iso_8601": "2016-01-27T13:08:40.254923Z", "url": "https://files.pythonhosted.org/packages/9b/a5/de3eaf49724c7a68b3bb1fd3996db8dcca31bb69fea1f6e6622e7c3f0b5a/aldryn-boilerplates-0.7.4.tar.gz", "yanked": false}], "0.7.5": [{"comment_text": "", "digests": {"md5": "61da8108d8d7383b06de46230c820811", "sha256": "d3af38ae43d168992c2a14f113c92979a206cab8435c3684ce2cf3b53ffe8bb9"}, "downloads": -1, "filename": "aldryn_boilerplates-0.7.5-py2-none-any.whl", "has_sig": false, "md5_digest": "61da8108d8d7383b06de46230c820811", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 17032, "upload_time": "2017-02-28T13:35:24", "upload_time_iso_8601": "2017-02-28T13:35:24.460063Z", "url": "https://files.pythonhosted.org/packages/9b/d4/8f03d87b678386977f55ae3991d131a263066e0f9fe96e26341ca42140b0/aldryn_boilerplates-0.7.5-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bcb7f0cb9ffcd9b81f265a078d4788ea", "sha256": "c4ac45b0c76d23cec1f014523e0ab3e74a8c1aa3aa77acf984d493813669ba95"}, "downloads": -1, "filename": "aldryn-boilerplates-0.7.5.tar.gz", "has_sig": false, "md5_digest": "bcb7f0cb9ffcd9b81f265a078d4788ea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8550, "upload_time": "2017-02-28T13:35:22", "upload_time_iso_8601": "2017-02-28T13:35:22.632792Z", "url": "https://files.pythonhosted.org/packages/0a/99/50d315856183378d698466e9f51d2e3a417b2da1f7273b2c3f1eb8f0520e/aldryn-boilerplates-0.7.5.tar.gz", "yanked": false}], "0.7.7": [{"comment_text": "", "digests": {"md5": "0ebe77327536854d5aed2237be78d964", "sha256": "2f72db91392c492ac336e0a78443c5c55dc4c00b247b77ebc7dad207c5f6ef53"}, "downloads": -1, "filename": "aldryn_boilerplates-0.7.7-py2-none-any.whl", "has_sig": false, "md5_digest": "0ebe77327536854d5aed2237be78d964", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 17075, "upload_time": "2018-02-20T16:54:44", "upload_time_iso_8601": "2018-02-20T16:54:44.463314Z", "url": "https://files.pythonhosted.org/packages/9f/13/4938a978460d560585beead14e564c2c7c511b9c9f63e26761d570544bb1/aldryn_boilerplates-0.7.7-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5d4a6be33ccab9209fd3eaf90d41f9c4", "sha256": "fb6298942e7ad2de9264a73088b708cb6d791e32984e4bc7b162bb26f5fe410f"}, "downloads": -1, "filename": "aldryn-boilerplates-0.7.7.tar.gz", "has_sig": false, "md5_digest": "5d4a6be33ccab9209fd3eaf90d41f9c4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8570, "upload_time": "2018-02-20T16:54:42", "upload_time_iso_8601": "2018-02-20T16:54:42.481731Z", "url": "https://files.pythonhosted.org/packages/db/d6/31ecadd7dc17305a321a1d781bb0fbf4d4bd1773ae34c5fc888ffd144ba3/aldryn-boilerplates-0.7.7.tar.gz", "yanked": false}], "0.8.0": [{"comment_text": "", "digests": {"md5": "4542a751635ef2ac3a12c91535286257", "sha256": "9ba59810ff9de12125226f4ee6586c3bae7cab19e979bbece3876a123b4c03ca"}, "downloads": -1, "filename": "aldryn-boilerplates-0.8.0.tar.gz", "has_sig": false, "md5_digest": "4542a751635ef2ac3a12c91535286257", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11118, "upload_time": "2018-11-28T13:18:17", "upload_time_iso_8601": "2018-11-28T13:18:17.833888Z", "url": "https://files.pythonhosted.org/packages/ea/cb/a89e12228dc45b8e6c400803789227f33f113030ed79925b011a03d1889d/aldryn-boilerplates-0.8.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4542a751635ef2ac3a12c91535286257", "sha256": "9ba59810ff9de12125226f4ee6586c3bae7cab19e979bbece3876a123b4c03ca"}, "downloads": -1, "filename": "aldryn-boilerplates-0.8.0.tar.gz", "has_sig": false, "md5_digest": "4542a751635ef2ac3a12c91535286257", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11118, "upload_time": "2018-11-28T13:18:17", "upload_time_iso_8601": "2018-11-28T13:18:17.833888Z", "url": "https://files.pythonhosted.org/packages/ea/cb/a89e12228dc45b8e6c400803789227f33f113030ed79925b011a03d1889d/aldryn-boilerplates-0.8.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:20:00 2020"}