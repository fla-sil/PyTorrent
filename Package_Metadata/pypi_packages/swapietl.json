{"info": {"author": "David Gara\u00f1a", "author_email": "", "bugtrack_url": null, "classifiers": ["Programming Language :: Python :: 3.7"], "description": "Star Wars API ETL\n=================\n\nUsing the Star Wars API:\n\n1. Find the ten characters who appear in the most Star Wars films\n2. Sort those ten characters by height in descending order (i.e., tallest first)\n3. Produce a CSV with the following columns: name, species, height, appearances\n4. Send the CSV to httpbin.org\n5. Create automated tests that validate your code\n\n\nExecute the exercise\n--------------------\nAfter installing the app (instructions bellow), you can execute the full code and see the result with:\n\"`swapietl execute_exercise`\" command.\n\nIf you want to see\nthe full logs, execute it with `-v` : \"`swapietl execute_exercise -v`\"\n\nTo execute the tests (unit tests) you will need:\n\n- python 3.x\n- pip: `pip3` if your machine has `pip` for Python2.7 already installed.\n- tox: Can be installed through pip3\n\nTox has the next jobs defined:\n\n- `flake8`: Execute a flake8 code-check\n- `py{version}`: Where `version` is the python version, for example `py37`.\n\n*NOTE*: This solution does not provide integration tests for now.\n\n\nHow to install the app\n======================\nThe application is packaged using python setuptools. All the requirements are directly\ndefined inside the `setup.py` file except those needed for executing the tests (note\nthat the test files are not packaged within the application, so it doesn't make sense\nhaving the `test_require` definition on the setup file).\n\nInstall the application following one of these methods:\n\nNon development mode\n--------------------\n- Using pip without cloning the repository:\n   `pip install ./`\n\n- Using oficial remote pip server:\n   `pip install swapietl`\n\n- With python setuptools from source files:\n   `python setup.py install`\n\nDevelopment mode\n----------------\n- With pip using editable mode:\n   `pip install ./ -e`\n\n- With python setuptools using development mode:\n   `python setup.py develop`\n\n\nHow to run the app\n==================\nOnce you've installed the application, you can start executing commands from bash.\nThe application has one *console_script* created: `swapietl` if you want to enable debug logs execute it with `-v` flag (`swapietl -v`)\n\nThe application can be executed in two different modes explained bellow.\n\nRun the application in command line mode\n----------------------------------------\nUsing the \"`swapietl $command $arg1 $arg2`\" where `$command` is the function you want to execute and `$arg1` and `$arg2` the arguments.\n\nSo, for example, if you want to get the top ten characters that appeared in films, you can execute:\n`swapietl get_top_characters top=10`\n\nAnd, if you want to get them sorted and export the results to a csv you can:\n`swapietl get_top_characters top=10 and sort_by height and export_to_csv`\n\nNOTE: You can execute multiple commands by using the \"*and*\" special word.\n\nRun the application in REPL mode\n--------------------------------\nThe `swapietl` with no commands will bring you a REPL mode (interactive) where you can execute one by one\nthe possible commands with different parameters. It also brings you extra functionality as for example: autocomplete,\nsuggestions (in case of misspelled command).\n\nList of available commands\n==========================\nHere's the list of possible commands you can execute with `swapietl` (also listed with `swapietl help`):\n\n- `get_top_characters`: Retrieve the results from the exercise and save them into the app context.\n- `sort_by attribute='height' reverse=True`: Sort previous results by a given attribute.\n- `export_to_csv filename=\"~/results.csv\"`: Export the results from the app context into a file.\n  By default the filename is \"~/results.csv\".\n- `upload_file_to filename=\"~/results.csv\" url=\"http://httpbin.org/post\"`: Upload the file using requests library\n- `execute_exercise`: Execute the full exercise.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/dgarana/swapietl", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "swapietl", "package_url": "https://pypi.org/project/swapietl/", "platform": "", "project_url": "https://pypi.org/project/swapietl/", "project_urls": {"Homepage": "https://github.com/dgarana/swapietl"}, "release_url": "https://pypi.org/project/swapietl/0.0.1/", "requires_dist": null, "requires_python": "", "summary": "Star Wars API ETL - YouGov", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Star Wars API ETL</h1>\n<p>Using the Star Wars API:</p>\n<ol>\n<li>Find the ten characters who appear in the most Star Wars films</li>\n<li>Sort those ten characters by height in descending order (i.e., tallest first)</li>\n<li>Produce a CSV with the following columns: name, species, height, appearances</li>\n<li>Send the CSV to httpbin.org</li>\n<li>Create automated tests that validate your code</li>\n</ol>\n<h2>Execute the exercise</h2>\n<p>After installing the app (instructions bellow), you can execute the full code and see the result with:\n\"<code>swapietl execute_exercise</code>\" command.</p>\n<p>If you want to see\nthe full logs, execute it with <code>-v</code> : \"<code>swapietl execute_exercise -v</code>\"</p>\n<p>To execute the tests (unit tests) you will need:</p>\n<ul>\n<li>python 3.x</li>\n<li>pip: <code>pip3</code> if your machine has <code>pip</code> for Python2.7 already installed.</li>\n<li>tox: Can be installed through pip3</li>\n</ul>\n<p>Tox has the next jobs defined:</p>\n<ul>\n<li><code>flake8</code>: Execute a flake8 code-check</li>\n<li><code>py{version}</code>: Where <code>version</code> is the python version, for example <code>py37</code>.</li>\n</ul>\n<p><em>NOTE</em>: This solution does not provide integration tests for now.</p>\n<h1>How to install the app</h1>\n<p>The application is packaged using python setuptools. All the requirements are directly\ndefined inside the <code>setup.py</code> file except those needed for executing the tests (note\nthat the test files are not packaged within the application, so it doesn't make sense\nhaving the <code>test_require</code> definition on the setup file).</p>\n<p>Install the application following one of these methods:</p>\n<h2>Non development mode</h2>\n<ul>\n<li>\n<p>Using pip without cloning the repository:\n<code>pip install ./</code></p>\n</li>\n<li>\n<p>Using oficial remote pip server:\n<code>pip install swapietl</code></p>\n</li>\n<li>\n<p>With python setuptools from source files:\n<code>python setup.py install</code></p>\n</li>\n</ul>\n<h2>Development mode</h2>\n<ul>\n<li>\n<p>With pip using editable mode:\n<code>pip install ./ -e</code></p>\n</li>\n<li>\n<p>With python setuptools using development mode:\n<code>python setup.py develop</code></p>\n</li>\n</ul>\n<h1>How to run the app</h1>\n<p>Once you've installed the application, you can start executing commands from bash.\nThe application has one <em>console_script</em> created: <code>swapietl</code> if you want to enable debug logs execute it with <code>-v</code> flag (<code>swapietl -v</code>)</p>\n<p>The application can be executed in two different modes explained bellow.</p>\n<h2>Run the application in command line mode</h2>\n<p>Using the \"<code>swapietl $command $arg1 $arg2</code>\" where <code>$command</code> is the function you want to execute and <code>$arg1</code> and <code>$arg2</code> the arguments.</p>\n<p>So, for example, if you want to get the top ten characters that appeared in films, you can execute:\n<code>swapietl get_top_characters top=10</code></p>\n<p>And, if you want to get them sorted and export the results to a csv you can:\n<code>swapietl get_top_characters top=10 and sort_by height and export_to_csv</code></p>\n<p>NOTE: You can execute multiple commands by using the \"<em>and</em>\" special word.</p>\n<h2>Run the application in REPL mode</h2>\n<p>The <code>swapietl</code> with no commands will bring you a REPL mode (interactive) where you can execute one by one\nthe possible commands with different parameters. It also brings you extra functionality as for example: autocomplete,\nsuggestions (in case of misspelled command).</p>\n<h1>List of available commands</h1>\n<p>Here's the list of possible commands you can execute with <code>swapietl</code> (also listed with <code>swapietl help</code>):</p>\n<ul>\n<li><code>get_top_characters</code>: Retrieve the results from the exercise and save them into the app context.</li>\n<li><code>sort_by attribute='height' reverse=True</code>: Sort previous results by a given attribute.</li>\n<li><code>export_to_csv filename=\"~/results.csv\"</code>: Export the results from the app context into a file.\nBy default the filename is \"~/results.csv\".</li>\n<li><code>upload_file_to filename=\"~/results.csv\" url=\"http://httpbin.org/post\"</code>: Upload the file using requests library</li>\n<li><code>execute_exercise</code>: Execute the full exercise.</li>\n</ul>\n\n          </div>"}, "last_serial": 6593318, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "e63addbaa62cc065cdda6e4bcea4fbd7", "sha256": "92af8ad1348568683e9e7638e7ce647d257bd54d0963b8d3193a9cf32f3184ef"}, "downloads": -1, "filename": "swapietl-0.0.1.tar.gz", "has_sig": false, "md5_digest": "e63addbaa62cc065cdda6e4bcea4fbd7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6064, "upload_time": "2020-02-08T10:50:52", "upload_time_iso_8601": "2020-02-08T10:50:52.653655Z", "url": "https://files.pythonhosted.org/packages/4e/62/7a03ee0c61557b65c49690c6bbabe0c8c20dc935f3c0822d9cd36d6609b0/swapietl-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e63addbaa62cc065cdda6e4bcea4fbd7", "sha256": "92af8ad1348568683e9e7638e7ce647d257bd54d0963b8d3193a9cf32f3184ef"}, "downloads": -1, "filename": "swapietl-0.0.1.tar.gz", "has_sig": false, "md5_digest": "e63addbaa62cc065cdda6e4bcea4fbd7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6064, "upload_time": "2020-02-08T10:50:52", "upload_time_iso_8601": "2020-02-08T10:50:52.653655Z", "url": "https://files.pythonhosted.org/packages/4e/62/7a03ee0c61557b65c49690c6bbabe0c8c20dc935f3c0822d9cd36d6609b0/swapietl-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:59:41 2020"}