{"info": {"author": "Eduard Konanau", "author_email": "aduard.kononov@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Overview\n\nThe library allows you to get a string representation of a class at **RUNTIME**, without overloading ```__repr__```, ```__str__```\nor defining your own specific ```get_repr() -> str``` (or even several for different cases).  \nThe library provides a *lightweight* API using which you can _in a minute_ add a pattern processing function\n```stringify(pattern: str) -> str``` to any class.  \n\nThis tool is more **intended to help developers** that want to **allow users specify their own\ndata representation patterns**.\n\n# Motivation  \nYou're a developer. Let's assume that ```song_downloader``` is a library you wrote using ```strify```. ```song_downloader.search_in_web()``` searchs for a song \non the Internet and returns an instance of ```Song``` class that allows to download the song using\n```Song.download_mp3()```  \n\n```python\n>>> from song_downloader import search_in_web\n>>> song = search_in_web(title='Loosing My Mind', artist='Falling In Reverse')\n>>> print(song)\nSong(Loosing My Mind, Falling In Reverse, 2018)\n>>> song.download_mp3('[artist] \u2014 [title] ([year])')\n```\n\nThe code will download the mp3 and save it as \"Falling In Reverse \u2014 Loosing My Mind (2018).mp3\".\n\nYou may ask: \"**why should I use ```strify```** if I could do that like \\*the code below\\*?\"\n```python\n>>> from song_downloader import search_in_web\n>>> song = search_in_web(title='Loosing My Mind', artist='Falling In Reverse')\n>>> print(song)\nSong(Loosing My Mind, Falling In Reverse, 2018)\n>>> song.download_mp3(f'{song.artist} \u2014 {song.title} ({song.year})')\n```\n\nYou definitely can. But there is *no flexibility* for the end user that can't change sources;\nusually, he/she just is not assumed to do that, it's not a good practice.\n\n```strify```'s approach is to **ask a user to enter whatever pattern he/she wants** and supply it to\nthe program in any way (args, json, data base etc.) \nand just use the value in the script. That's the power: **it's not necessary to define a pattern in the source code**.\n\nNow we can change the example and save it as ```download_mp3.py```:\n```python\nfrom song_downloader import search_in_web\nargs = parse_args()\nsong = search_in_web(title=args['title'], artist=args['artist'])\nsong.download_mp3(args['mp3_name_pattern'])\n```\n\nThen run it like this:\n```\npython3 download_mp3.py --title='loosing my mind' --artist='falling in reverse' --mp3-name-pattern='[artist] \u2014 [title] ([year])'\n```\nAnd check what's happened:\n```shell script\nuser@computer:~/$ ls -1\n...\ndownload_mp3.py\nFalling In Reverse \u2014 Loosing My Mind (2018).mp3\n...\nuser@computer:~/$\n```\n\n# Usage Guide\nLet's continue with our Song class:\n```python\nfrom random import randrange\n\nclass Song:\n    def __init__(self, title, artist):\n        self.title = title\n        self.artist = artist\n\n    def get_year(self):\n        year = randrange(1960, 2020)\n        return year\n```\n**Notice**: ```Song.get_year()``` is a mock. In a real code it has to connect to the net and\nfind all the data there using ```self.title``` and ```self.artist```.\n\n### Diving in\nFirst of all, you need to take a look at the terminology:\n* **stringification** \u2014 process of building class instance representation (according to a **pattern**)   \n* **pattern** \u2014 a string with **markers**. After **stringification** all the markers \nwill be replaced with **marker values** (or ```final_marker_value```, see **preprocessing function**)\n* **marker** \u2014 ```f'[{marker_name}]'```\n* **marker attribute** \u2014 name of a class instance attribute which value is used during **stringification**.  \n* **marker value**: the way ```strify``` gets **marker value** looks like this:\n```python\nimport inspect\ndef get_marker_value(class_instance, marker_attribute):\n    marker_value = getattr(class_instance, marker_attribute)\n    if inspect.ismethod(marker_value):\n        marker_value = marker_value()\n    return str(marker_value)\n```\n* **preprocessing function**:\n```python\ndef preprocessing_function(marker_value: str) -> str:\n    final_marker_value = whatever_magic_you_want(marker_value)\n    return final_marker_value\n```\n\n\n#### Way #1: use ```stringifyable``` and ```StringifyInfo```\n\n```stringifyable``` gets list of ```StringifyInfo``` and adds ```stringify(pattern: str) -> str```\nmethod to the class it decorates.  \nOne ```StringifyInfo``` in the list describes one **marker**.\n\nSignature:  \n```StringifyInfo(marker_name, marker_attribute=None, preprocessing_function=None)```  \nIf ```marker_attribute``` isn't passed to the constructor (i.e. is ```None```) then\nit's assumed to be the same as passed ```marker_name```.\n\n```python\nfrom strify import stringifyable, StringifyInfo\n\nfrom random import randrange\n\n# transforms 'tHis striNg' into 'This String'\ndef format_proper_name(string):\n    return ' '.join(word[0].upper() + word[1:].lower() for word in string.split(' '))\n\n@stringifyable([\n    StringifyInfo('title', None, format_proper_name),\n    StringifyInfo('artist', 'artist', format_proper_name),\n    StringifyInfo('year', 'get_year'),\n])\nclass Song:\n    def __init__(self, title, artist):\n        self.title = title\n        self.artist = artist\n\n    def get_year(self):\n        year = randrange(1960, 2020)\n        return year\n```\n\nNow, the following is possible:\n```python\n>>> song = Song('loosing my mind', 'falling in reverse')\n>>> song.stringify('[artist] \u2014 [title] ([year])')\nFalling In Reverse \u2014 Loosing My Mind (2018)\n>>> song.stringify('[title]: [artist], [year]')\nLoosing My Mind: Falling In Reverse, 2018\n```\n\n#### Way #2: use ```stringifyable``` and ```stringify```\n\nSignature:  \n```stringify(preprocessing_func=None, marker_name=None)```  \nIf ```marker_name``` equals ```None``` (i.e. not passed) then it's assumed\nthat ```marker_name == func.__name__```  \n\n```python\nfrom strify import stringifyable, stringify\n\nfrom random import randrange\n\n# transforms 'tHis striNg' into 'This String'\ndef format_proper_name(string):\n    return ' '.join(word[0].upper() + word[1:].lower() for word in string.split(' '))\n\n@stringifyable()\nclass Song:\n    def __init__(self, title, artist):\n        self._title = title\n        self._artist = artist\n\n    @stringify(format_proper_name)\n    def artist(self):\n        return self._artist\n\n    @stringify(format_proper_name)\n    def title(self):\n        return self._title\n\n    @stringify(marker_name='year')\n    def get_year(self):\n        year = randrange(1960, 2020)\n        return year\n```\n\n**Notice**: it would be more usual to make properties.\nIn this case, ```stringify``` **must** be the first decorator that's applied to the function.\n```python\n@property\n@stringify(format_proper_name)\ndef title(self):\n    return self._title\n```\n\nNow you can test the code we ran at the end of **Way #1** and ensure that we achieved the same interface and results:\n```python\n>>> song = Song('loosing my mind', 'falling in reverse')\n>>> song.stringify('[artist] \u2014 [title] ([year])')\nFalling In Reverse \u2014 Loosing My Mind (2018)\n>>> song.stringify('[title]: [artist], [year]')\nLoosing My Mind: Falling In Reverse, 2018\n```\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/aduard.kononov/strify", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "strify", "package_url": "https://pypi.org/project/strify/", "platform": "", "project_url": "https://pypi.org/project/strify/", "project_urls": {"Homepage": "https://gitlab.com/aduard.kononov/strify"}, "release_url": "https://pypi.org/project/strify/1.0.1/", "requires_dist": null, "requires_python": ">=3.6", "summary": "The library provides a lightweight API using which you can in a minute add a pattern processing function \"stringify(pattern: str) -> str\" to any class.", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Overview</h1>\n<p>The library allows you to get a string representation of a class at <strong>RUNTIME</strong>, without overloading <code>__repr__</code>, <code>__str__</code>\nor defining your own specific <code>get_repr() -&gt; str</code> (or even several for different cases).<br>\nThe library provides a <em>lightweight</em> API using which you can <em>in a minute</em> add a pattern processing function\n<code>stringify(pattern: str) -&gt; str</code> to any class.</p>\n<p>This tool is more <strong>intended to help developers</strong> that want to <strong>allow users specify their own\ndata representation patterns</strong>.</p>\n<h1>Motivation</h1>\n<p>You're a developer. Let's assume that <code>song_downloader</code> is a library you wrote using <code>strify</code>. <code>song_downloader.search_in_web()</code> searchs for a song\non the Internet and returns an instance of <code>Song</code> class that allows to download the song using\n<code>Song.download_mp3()</code></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">song_downloader</span> <span class=\"kn\">import</span> <span class=\"n\">search_in_web</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">song</span> <span class=\"o\">=</span> <span class=\"n\">search_in_web</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s1\">'Loosing My Mind'</span><span class=\"p\">,</span> <span class=\"n\">artist</span><span class=\"o\">=</span><span class=\"s1\">'Falling In Reverse'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">song</span><span class=\"p\">)</span>\n<span class=\"n\">Song</span><span class=\"p\">(</span><span class=\"n\">Loosing</span> <span class=\"n\">My</span> <span class=\"n\">Mind</span><span class=\"p\">,</span> <span class=\"n\">Falling</span> <span class=\"n\">In</span> <span class=\"n\">Reverse</span><span class=\"p\">,</span> <span class=\"mi\">2018</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">song</span><span class=\"o\">.</span><span class=\"n\">download_mp3</span><span class=\"p\">(</span><span class=\"s1\">'[artist] \u2014 [title] ([year])'</span><span class=\"p\">)</span>\n</pre>\n<p>The code will download the mp3 and save it as \"Falling In Reverse \u2014 Loosing My Mind (2018).mp3\".</p>\n<p>You may ask: \"<strong>why should I use <code>strify</code></strong> if I could do that like *the code below*?\"</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">song_downloader</span> <span class=\"kn\">import</span> <span class=\"n\">search_in_web</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">song</span> <span class=\"o\">=</span> <span class=\"n\">search_in_web</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s1\">'Loosing My Mind'</span><span class=\"p\">,</span> <span class=\"n\">artist</span><span class=\"o\">=</span><span class=\"s1\">'Falling In Reverse'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">song</span><span class=\"p\">)</span>\n<span class=\"n\">Song</span><span class=\"p\">(</span><span class=\"n\">Loosing</span> <span class=\"n\">My</span> <span class=\"n\">Mind</span><span class=\"p\">,</span> <span class=\"n\">Falling</span> <span class=\"n\">In</span> <span class=\"n\">Reverse</span><span class=\"p\">,</span> <span class=\"mi\">2018</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">song</span><span class=\"o\">.</span><span class=\"n\">download_mp3</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'</span><span class=\"si\">{</span><span class=\"n\">song</span><span class=\"o\">.</span><span class=\"n\">artist</span><span class=\"si\">}</span><span class=\"s1\"> \u2014 </span><span class=\"si\">{</span><span class=\"n\">song</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"si\">}</span><span class=\"s1\"> (</span><span class=\"si\">{</span><span class=\"n\">song</span><span class=\"o\">.</span><span class=\"n\">year</span><span class=\"si\">}</span><span class=\"s1\">)'</span><span class=\"p\">)</span>\n</pre>\n<p>You definitely can. But there is <em>no flexibility</em> for the end user that can't change sources;\nusually, he/she just is not assumed to do that, it's not a good practice.</p>\n<p><code>strify</code>'s approach is to <strong>ask a user to enter whatever pattern he/she wants</strong> and supply it to\nthe program in any way (args, json, data base etc.)\nand just use the value in the script. That's the power: <strong>it's not necessary to define a pattern in the source code</strong>.</p>\n<p>Now we can change the example and save it as <code>download_mp3.py</code>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">song_downloader</span> <span class=\"kn\">import</span> <span class=\"n\">search_in_web</span>\n<span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"n\">parse_args</span><span class=\"p\">()</span>\n<span class=\"n\">song</span> <span class=\"o\">=</span> <span class=\"n\">search_in_web</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"s1\">'title'</span><span class=\"p\">],</span> <span class=\"n\">artist</span><span class=\"o\">=</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"s1\">'artist'</span><span class=\"p\">])</span>\n<span class=\"n\">song</span><span class=\"o\">.</span><span class=\"n\">download_mp3</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"s1\">'mp3_name_pattern'</span><span class=\"p\">])</span>\n</pre>\n<p>Then run it like this:</p>\n<pre><code>python3 download_mp3.py --title='loosing my mind' --artist='falling in reverse' --mp3-name-pattern='[artist] \u2014 [title] ([year])'\n</code></pre>\n<p>And check what's happened:</p>\n<pre>user@computer:~/$ ls -1\n...\ndownload_mp3.py\nFalling In Reverse \u2014 Loosing My Mind <span class=\"o\">(</span><span class=\"m\">2018</span><span class=\"o\">)</span>.mp3\n...\nuser@computer:~/$\n</pre>\n<h1>Usage Guide</h1>\n<p>Let's continue with our Song class:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">random</span> <span class=\"kn\">import</span> <span class=\"n\">randrange</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Song</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">title</span><span class=\"p\">,</span> <span class=\"n\">artist</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">title</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">artist</span> <span class=\"o\">=</span> <span class=\"n\">artist</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_year</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">year</span> <span class=\"o\">=</span> <span class=\"n\">randrange</span><span class=\"p\">(</span><span class=\"mi\">1960</span><span class=\"p\">,</span> <span class=\"mi\">2020</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">year</span>\n</pre>\n<p><strong>Notice</strong>: <code>Song.get_year()</code> is a mock. In a real code it has to connect to the net and\nfind all the data there using <code>self.title</code> and <code>self.artist</code>.</p>\n<h3>Diving in</h3>\n<p>First of all, you need to take a look at the terminology:</p>\n<ul>\n<li><strong>stringification</strong> \u2014 process of building class instance representation (according to a <strong>pattern</strong>)</li>\n<li><strong>pattern</strong> \u2014 a string with <strong>markers</strong>. After <strong>stringification</strong> all the markers\nwill be replaced with <strong>marker values</strong> (or <code>final_marker_value</code>, see <strong>preprocessing function</strong>)</li>\n<li><strong>marker</strong> \u2014 <code>f'[{marker_name}]'</code></li>\n<li><strong>marker attribute</strong> \u2014 name of a class instance attribute which value is used during <strong>stringification</strong>.</li>\n<li><strong>marker value</strong>: the way <code>strify</code> gets <strong>marker value</strong> looks like this:</li>\n</ul>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">inspect</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_marker_value</span><span class=\"p\">(</span><span class=\"n\">class_instance</span><span class=\"p\">,</span> <span class=\"n\">marker_attribute</span><span class=\"p\">):</span>\n    <span class=\"n\">marker_value</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">class_instance</span><span class=\"p\">,</span> <span class=\"n\">marker_attribute</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">inspect</span><span class=\"o\">.</span><span class=\"n\">ismethod</span><span class=\"p\">(</span><span class=\"n\">marker_value</span><span class=\"p\">):</span>\n        <span class=\"n\">marker_value</span> <span class=\"o\">=</span> <span class=\"n\">marker_value</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">marker_value</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li><strong>preprocessing function</strong>:</li>\n</ul>\n<pre><span class=\"k\">def</span> <span class=\"nf\">preprocessing_function</span><span class=\"p\">(</span><span class=\"n\">marker_value</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n    <span class=\"n\">final_marker_value</span> <span class=\"o\">=</span> <span class=\"n\">whatever_magic_you_want</span><span class=\"p\">(</span><span class=\"n\">marker_value</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">final_marker_value</span>\n</pre>\n<h4>Way #1: use <code>stringifyable</code> and <code>StringifyInfo</code></h4>\n<p><code>stringifyable</code> gets list of <code>StringifyInfo</code> and adds <code>stringify(pattern: str) -&gt; str</code>\nmethod to the class it decorates.<br>\nOne <code>StringifyInfo</code> in the list describes one <strong>marker</strong>.</p>\n<p>Signature:<br>\n<code>StringifyInfo(marker_name, marker_attribute=None, preprocessing_function=None)</code><br>\nIf <code>marker_attribute</code> isn't passed to the constructor (i.e. is <code>None</code>) then\nit's assumed to be the same as passed <code>marker_name</code>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">strify</span> <span class=\"kn\">import</span> <span class=\"n\">stringifyable</span><span class=\"p\">,</span> <span class=\"n\">StringifyInfo</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">random</span> <span class=\"kn\">import</span> <span class=\"n\">randrange</span>\n\n<span class=\"c1\"># transforms 'tHis striNg' into 'This String'</span>\n<span class=\"k\">def</span> <span class=\"nf\">format_proper_name</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"s1\">' '</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">word</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">word</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:]</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">word</span> <span class=\"ow\">in</span> <span class=\"n\">string</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">' '</span><span class=\"p\">))</span>\n\n<span class=\"nd\">@stringifyable</span><span class=\"p\">([</span>\n    <span class=\"n\">StringifyInfo</span><span class=\"p\">(</span><span class=\"s1\">'title'</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">format_proper_name</span><span class=\"p\">),</span>\n    <span class=\"n\">StringifyInfo</span><span class=\"p\">(</span><span class=\"s1\">'artist'</span><span class=\"p\">,</span> <span class=\"s1\">'artist'</span><span class=\"p\">,</span> <span class=\"n\">format_proper_name</span><span class=\"p\">),</span>\n    <span class=\"n\">StringifyInfo</span><span class=\"p\">(</span><span class=\"s1\">'year'</span><span class=\"p\">,</span> <span class=\"s1\">'get_year'</span><span class=\"p\">),</span>\n<span class=\"p\">])</span>\n<span class=\"k\">class</span> <span class=\"nc\">Song</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">title</span><span class=\"p\">,</span> <span class=\"n\">artist</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">title</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">artist</span> <span class=\"o\">=</span> <span class=\"n\">artist</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_year</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">year</span> <span class=\"o\">=</span> <span class=\"n\">randrange</span><span class=\"p\">(</span><span class=\"mi\">1960</span><span class=\"p\">,</span> <span class=\"mi\">2020</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">year</span>\n</pre>\n<p>Now, the following is possible:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">song</span> <span class=\"o\">=</span> <span class=\"n\">Song</span><span class=\"p\">(</span><span class=\"s1\">'loosing my mind'</span><span class=\"p\">,</span> <span class=\"s1\">'falling in reverse'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">song</span><span class=\"o\">.</span><span class=\"n\">stringify</span><span class=\"p\">(</span><span class=\"s1\">'[artist] \u2014 [title] ([year])'</span><span class=\"p\">)</span>\n<span class=\"n\">Falling</span> <span class=\"n\">In</span> <span class=\"n\">Reverse</span> <span class=\"err\">\u2014</span> <span class=\"n\">Loosing</span> <span class=\"n\">My</span> <span class=\"n\">Mind</span> <span class=\"p\">(</span><span class=\"mi\">2018</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">song</span><span class=\"o\">.</span><span class=\"n\">stringify</span><span class=\"p\">(</span><span class=\"s1\">'[title]: [artist], [year]'</span><span class=\"p\">)</span>\n<span class=\"n\">Loosing</span> <span class=\"n\">My</span> <span class=\"n\">Mind</span><span class=\"p\">:</span> <span class=\"n\">Falling</span> <span class=\"n\">In</span> <span class=\"n\">Reverse</span><span class=\"p\">,</span> <span class=\"mi\">2018</span>\n</pre>\n<h4>Way #2: use <code>stringifyable</code> and <code>stringify</code></h4>\n<p>Signature:<br>\n<code>stringify(preprocessing_func=None, marker_name=None)</code><br>\nIf <code>marker_name</code> equals <code>None</code> (i.e. not passed) then it's assumed\nthat <code>marker_name == func.__name__</code></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">strify</span> <span class=\"kn\">import</span> <span class=\"n\">stringifyable</span><span class=\"p\">,</span> <span class=\"n\">stringify</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">random</span> <span class=\"kn\">import</span> <span class=\"n\">randrange</span>\n\n<span class=\"c1\"># transforms 'tHis striNg' into 'This String'</span>\n<span class=\"k\">def</span> <span class=\"nf\">format_proper_name</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"s1\">' '</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">word</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">word</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:]</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">word</span> <span class=\"ow\">in</span> <span class=\"n\">string</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">' '</span><span class=\"p\">))</span>\n\n<span class=\"nd\">@stringifyable</span><span class=\"p\">()</span>\n<span class=\"k\">class</span> <span class=\"nc\">Song</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">title</span><span class=\"p\">,</span> <span class=\"n\">artist</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_title</span> <span class=\"o\">=</span> <span class=\"n\">title</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_artist</span> <span class=\"o\">=</span> <span class=\"n\">artist</span>\n\n    <span class=\"nd\">@stringify</span><span class=\"p\">(</span><span class=\"n\">format_proper_name</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">artist</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_artist</span>\n\n    <span class=\"nd\">@stringify</span><span class=\"p\">(</span><span class=\"n\">format_proper_name</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">title</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_title</span>\n\n    <span class=\"nd\">@stringify</span><span class=\"p\">(</span><span class=\"n\">marker_name</span><span class=\"o\">=</span><span class=\"s1\">'year'</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_year</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">year</span> <span class=\"o\">=</span> <span class=\"n\">randrange</span><span class=\"p\">(</span><span class=\"mi\">1960</span><span class=\"p\">,</span> <span class=\"mi\">2020</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">year</span>\n</pre>\n<p><strong>Notice</strong>: it would be more usual to make properties.\nIn this case, <code>stringify</code> <strong>must</strong> be the first decorator that's applied to the function.</p>\n<pre><span class=\"nd\">@property</span>\n<span class=\"nd\">@stringify</span><span class=\"p\">(</span><span class=\"n\">format_proper_name</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">title</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_title</span>\n</pre>\n<p>Now you can test the code we ran at the end of <strong>Way #1</strong> and ensure that we achieved the same interface and results:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">song</span> <span class=\"o\">=</span> <span class=\"n\">Song</span><span class=\"p\">(</span><span class=\"s1\">'loosing my mind'</span><span class=\"p\">,</span> <span class=\"s1\">'falling in reverse'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">song</span><span class=\"o\">.</span><span class=\"n\">stringify</span><span class=\"p\">(</span><span class=\"s1\">'[artist] \u2014 [title] ([year])'</span><span class=\"p\">)</span>\n<span class=\"n\">Falling</span> <span class=\"n\">In</span> <span class=\"n\">Reverse</span> <span class=\"err\">\u2014</span> <span class=\"n\">Loosing</span> <span class=\"n\">My</span> <span class=\"n\">Mind</span> <span class=\"p\">(</span><span class=\"mi\">2018</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">song</span><span class=\"o\">.</span><span class=\"n\">stringify</span><span class=\"p\">(</span><span class=\"s1\">'[title]: [artist], [year]'</span><span class=\"p\">)</span>\n<span class=\"n\">Loosing</span> <span class=\"n\">My</span> <span class=\"n\">Mind</span><span class=\"p\">:</span> <span class=\"n\">Falling</span> <span class=\"n\">In</span> <span class=\"n\">Reverse</span><span class=\"p\">,</span> <span class=\"mi\">2018</span>\n</pre>\n\n          </div>"}, "last_serial": 6528201, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "b79b7cc860d3db19521db65559feaeb3", "sha256": "99e8b87e753525db7cf8614def395b6847a23426969c40aa8801940a7b244e90"}, "downloads": -1, "filename": "strify-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b79b7cc860d3db19521db65559feaeb3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 13563, "upload_time": "2020-01-26T20:58:12", "upload_time_iso_8601": "2020-01-26T20:58:12.920234Z", "url": "https://files.pythonhosted.org/packages/19/f9/f4bec673fe2359bd746d4572b08bc3d700af59665fd42675920b4f13a234/strify-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "434a34178dbd6bad2a87c0d126b8231c", "sha256": "9a11e97bcd26194735bc498a932dc7fea52bbb69c53432c1e9f6591865395d36"}, "downloads": -1, "filename": "strify-1.0.0.tar.gz", "has_sig": false, "md5_digest": "434a34178dbd6bad2a87c0d126b8231c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9617, "upload_time": "2020-01-26T20:58:16", "upload_time_iso_8601": "2020-01-26T20:58:16.188295Z", "url": "https://files.pythonhosted.org/packages/17/46/b0879032e67ce688c86507f3c4763bde07fee6034d6602e6bd113453f67c/strify-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "26f5226824c64dd340b630145aa9542b", "sha256": "5b177afdac7d1bce444f709557fff5e44db8b09fba17f5bd26b87b04b9652b73"}, "downloads": -1, "filename": "strify-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "26f5226824c64dd340b630145aa9542b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 13846, "upload_time": "2020-01-27T19:42:49", "upload_time_iso_8601": "2020-01-27T19:42:49.834782Z", "url": "https://files.pythonhosted.org/packages/21/b5/2b222cf22f24de1e9c479d6b056b340fde770c4f6adeb18a9d603b22a3fd/strify-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8dd682d9fad78ffa2b4d3269bc9c93eb", "sha256": "1cc8020be15d328eb7eca58e7c8bb62dc90bd6b4bcab37a264226f3f0ba18457"}, "downloads": -1, "filename": "strify-1.0.1.tar.gz", "has_sig": false, "md5_digest": "8dd682d9fad78ffa2b4d3269bc9c93eb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9892, "upload_time": "2020-01-27T19:42:52", "upload_time_iso_8601": "2020-01-27T19:42:52.278779Z", "url": "https://files.pythonhosted.org/packages/86/ab/3205dc8a1dc3f11b1415b678c656b4d90fcfeccd1c472b03f3f05d5a4f0f/strify-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "26f5226824c64dd340b630145aa9542b", "sha256": "5b177afdac7d1bce444f709557fff5e44db8b09fba17f5bd26b87b04b9652b73"}, "downloads": -1, "filename": "strify-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "26f5226824c64dd340b630145aa9542b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 13846, "upload_time": "2020-01-27T19:42:49", "upload_time_iso_8601": "2020-01-27T19:42:49.834782Z", "url": "https://files.pythonhosted.org/packages/21/b5/2b222cf22f24de1e9c479d6b056b340fde770c4f6adeb18a9d603b22a3fd/strify-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8dd682d9fad78ffa2b4d3269bc9c93eb", "sha256": "1cc8020be15d328eb7eca58e7c8bb62dc90bd6b4bcab37a264226f3f0ba18457"}, "downloads": -1, "filename": "strify-1.0.1.tar.gz", "has_sig": false, "md5_digest": "8dd682d9fad78ffa2b4d3269bc9c93eb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9892, "upload_time": "2020-01-27T19:42:52", "upload_time_iso_8601": "2020-01-27T19:42:52.278779Z", "url": "https://files.pythonhosted.org/packages/86/ab/3205dc8a1dc3f11b1415b678c656b4d90fcfeccd1c472b03f3f05d5a4f0f/strify-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:01:13 2020"}