{"info": {"author": "Werner Robitza", "author_email": "werner.robitza@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Multimedia :: Video"], "description": "FFmpeg Bitrate Stats\n====================\n\n|PyPI version|\n\nSimple script for calculating bitrate statistics using FFmpeg.\n\nAuthor: Werner Robitza werner.robitza@gmail.com\n\nContents:\n\n-  `Requirements <#requirements>`__\n-  `Installation <#installation>`__\n-  `Usage <#usage>`__\n-  `Output <#output>`__\n-  `License <#license>`__\n\n--------------\n\nRequirements\n------------\n\n-  Python 3.6\n-  FFmpeg:\n\n   -  download a static build from `their\n      website <http://ffmpeg.org/download.html>`__\n   -  put the ``ffprobe`` executable in your ``$PATH``\n\n-  ``pip3 install -r requirements.txt``\n\nInstallation\n------------\n\n::\n\n   pip install ffmpeg_bitrate_stats\n\nOr clone this repository, then run the tool with\n``python -m ffmpeg_bitrate_stats``\n\nUsage\n-----\n\nThe script outputs a bunch of bitrate statistics, including aggregations\nfor pre-defined windows. These windows can either be time-based or\nGOP-based (for video streams). When choosing a time-based window, you\ncan specify the size of the chunks in seconds.\n\nOutput is to STDOUT so you can redirect that to a file or another\nscript.\n\nSee ``ffmpeg_bitrate_stats -h``:\n\n::\n\n   usage: ffmpeg_bitrate_stats [-h] [-n] [-v] [-s {video,audio}]\n                                  [-a {time,gop}] [-c CHUNK_SIZE]\n                                  [-of {json,csv}]\n                                  input\n\n   positional arguments:\n     input                 input file\n\n   optional arguments:\n     -h, --help            show this help message and exit\n     -n, --dry-run         Do not run command, just show what would be done\n                           (default: False)\n     -v, --verbose         Show verbose output (default: False)\n     -s {video,audio}, --stream-type {video,audio}\n                           Stream type to analyze (default: video)\n     -a {time,gop}, --aggregation {time,gop}\n                           Window for aggregating statistics, either time-based\n                           (per-second) or per GOP (default: time)\n     -c CHUNK_SIZE, --chunk-size CHUNK_SIZE\n                           Custom aggregation window size in seconds (default:\n                           1.0)\n     -of {json,csv}, --output-format {json,csv}\n                           output in which format (default: json)\n\nOutput\n------\n\nThe output can be JSON, which includes individual fields for each chunk,\nor CSV, which repeats each line for each chunk. The CSV adheres to the\n\u201ctidy\u201d data concept, so it\u2019s a little redundant.\n\nRates are given in kilobit per second, using SI prefixes (i.e., kilo =\n1000).\n\nExplanation of the fields:\n\n-  ``input_file``: Path to the input file\n-  ``stream_type``: Type of stream used (video, audio)\n-  ``avg_fps``: Average FPS (number of frames divided by duration)\n-  ``num_frames``: Number of frames\n-  ``avg_bitrate``: Average bitrate\n-  ``avg_bitrate_over_chunks``: Average bitrate calculated over the\n   chunks\n-  ``max_bitrate``: Maximum bitrate calculated over the chunks\n-  ``min_bitrate``: Minimum bitrate calculated over the chunks\n-  ``max_bitrate_factor``: Relation between peak and average\n-  ``bitrate_per_chunk``: Individual bitrates for each chunk\n-  ``aggregation``: Type of aggregation used\n-  ``chunk_size``: Size of the chunk (when aggregation is \u201ctime\u201d)\n-  ``duration``: Total duration of the stream (last frame DTS minus\n   first DTS)\n\nJSON example:\n\n::\n\n   \u279c ffmpeg_bitrate_stats -a time -c 30 -of json BigBuckBunny.mp4\n   {\n       \"input_file\": \"BigBuckBunny.mp4\",\n       \"stream_type\": \"video\",\n       \"avg_fps\": 60.002,\n       \"num_frames\": 38072,\n       \"avg_bitrate\": 8002.859,\n       \"avg_bitrate_over_chunks\": 7849.263,\n       \"max_bitrate\": 14565.117,\n       \"min_bitrate\": 3876.533,\n       \"max_bitrate_factor\": 1.82,\n       \"bitrate_per_chunk\": [\n           8960.89,\n           8036.678,\n           6099.959,\n           4247.879,\n           7276.979,\n           5738.383,\n           7740.339,\n           7881.705,\n           7572.594,\n           8387.719,\n           9634.343,\n           9939.488,\n           9365.104,\n           5061.071,\n           14565.117,\n           9725.483,\n           4573.873,\n           7765.041,\n           9796.135,\n           12524.024,\n           3876.533,\n           3914.455\n       ],\n       \"aggregation\": \"time\",\n       \"chunk_size\": 30.0,\n       \"duration\": 634.517\n   }\n\nCSV example:\n\n::\n\n   \u279c  ffmpeg_bitrate_stats -a time -c 30 -of csv BigBuckBunny.mp4\n   input_file,chunk_index,stream_type,avg_fps,num_frames,avg_bitrate,avg_bitrate_over_chunks,max_bitrate,min_bitrate,max_bitrate_factor,bitrate_per_chunk,aggregation,chunk_size,duration\n   BigBuckBunny.mp4,0,video,60.002,38072,8002.859,7849.263,14565.117,3876.533,1.82,8960.89,time,30.0,634.517\n   BigBuckBunny.mp4,1,video,60.002,38072,8002.859,7849.263,14565.117,3876.533,1.82,8036.678,time,30.0,634.517\n   BigBuckBunny.mp4,2,video,60.002,38072,8002.859,7849.263,14565.117,3876.533,1.82,6099.959,time,30.0,634.517\n   BigBuckBunny.mp4,3,video,60.002,38072,8002.859,7849.263,14565.117,3876.533,1.82,4247.879,time,30.0,634.517\n   BigBuckBunny.mp4,4,video,60.002,38072,8002.859,7849.263,14565.117,3876.533,1.82,7276.979,time,30.0,634.517\n   BigBuckBunny.mp4,5,video,60.002,38072,8002.859,7849.263,14565.117,3876.533,1.82,5738.383,time,30.0,634.517\n   BigBuckBunny.mp4,6,video,60.002,38072,8002.859,7849.263,14565.117,3876.533,1.82,7740.339,time,30.0,634.517\n   BigBuckBunny.mp4,7,video,60.002,38072,8002.859,7849.263,14565.117,3876.533,1.82,7881.705,time,30.0,634.517\n   BigBuckBunny.mp4,8,video,60.002,38072,8002.859,7849.263,14565.117,3876.533,1.82,7572.594,time,30.0,634.517\n   BigBuckBunny.mp4,9,video,60.002,38072,8002.859,7849.263,14565.117,3876.533,1.82,8387.719,time,30.0,634.517\n   BigBuckBunny.mp4,10,video,60.002,38072,8002.859,7849.263,14565.117,3876.533,1.82,9634.343,time,30.0,634.517\n   BigBuckBunny.mp4,11,video,60.002,38072,8002.859,7849.263,14565.117,3876.533,1.82,9939.488,time,30.0,634.517\n   BigBuckBunny.mp4,12,video,60.002,38072,8002.859,7849.263,14565.117,3876.533,1.82,9365.104,time,30.0,634.517\n   BigBuckBunny.mp4,13,video,60.002,38072,8002.859,7849.263,14565.117,3876.533,1.82,5061.071,time,30.0,634.517\n   BigBuckBunny.mp4,14,video,60.002,38072,8002.859,7849.263,14565.117,3876.533,1.82,14565.117,time,30.0,634.517\n   BigBuckBunny.mp4,15,video,60.002,38072,8002.859,7849.263,14565.117,3876.533,1.82,9725.483,time,30.0,634.517\n   BigBuckBunny.mp4,16,video,60.002,38072,8002.859,7849.263,14565.117,3876.533,1.82,4573.873,time,30.0,634.517\n   BigBuckBunny.mp4,17,video,60.002,38072,8002.859,7849.263,14565.117,3876.533,1.82,7765.041,time,30.0,634.517\n   BigBuckBunny.mp4,18,video,60.002,38072,8002.859,7849.263,14565.117,3876.533,1.82,9796.135,time,30.0,634.517\n   BigBuckBunny.mp4,19,video,60.002,38072,8002.859,7849.263,14565.117,3876.533,1.82,12524.024,time,30.0,634.517\n   BigBuckBunny.mp4,20,video,60.002,38072,8002.859,7849.263,14565.117,3876.533,1.82,3876.533,time,30.0,634.517\n   BigBuckBunny.mp4,21,video,60.002,38072,8002.859,7849.263,14565.117,3876.533,1.82,3914.455,time,30.0,634.517\n\nLicense\n-------\n\nffmpeg_bitrate_stats, Copyright (c) 2019 Werner Robitza\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the\n\u201cSoftware\u201d), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n.. |PyPI version| image:: https://badge.fury.io/py/ffmpeg_bitrate_stats.svg\n   :target: https://badge.fury.io/py/ffmpeg_bitrate_stats\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/slhck/ffmpeg-bitrate-stats", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "ffmpeg-bitrate-stats", "package_url": "https://pypi.org/project/ffmpeg-bitrate-stats/", "platform": "", "project_url": "https://pypi.org/project/ffmpeg-bitrate-stats/", "project_urls": {"Homepage": "https://github.com/slhck/ffmpeg-bitrate-stats"}, "release_url": "https://pypi.org/project/ffmpeg-bitrate-stats/0.2.0/", "requires_dist": null, "requires_python": "", "summary": "Calculate bitrate statistics using FFmpeg", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://badge.fury.io/py/ffmpeg_bitrate_stats\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/26316fd61bfdfae2f11540ab73ff01e37967e5e1/68747470733a2f2f62616467652e667572792e696f2f70792f66666d7065675f626974726174655f73746174732e737667\"></a></p>\n<p>Simple script for calculating bitrate statistics using FFmpeg.</p>\n<p>Author: Werner Robitza <a href=\"mailto:werner.robitza%40gmail.com\">werner<span>.</span>robitza<span>@</span>gmail<span>.</span>com</a></p>\n<p>Contents:</p>\n<ul>\n<li><a href=\"#requirements\" rel=\"nofollow\">Requirements</a></li>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#usage\" rel=\"nofollow\">Usage</a></li>\n<li><a href=\"#output\" rel=\"nofollow\">Output</a></li>\n<li><a href=\"#license\" rel=\"nofollow\">License</a></li>\n</ul>\n<hr class=\"docutils\">\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<ul>\n<li>Python 3.6</li>\n<li>FFmpeg:<ul>\n<li>download a static build from <a href=\"http://ffmpeg.org/download.html\" rel=\"nofollow\">their\nwebsite</a></li>\n<li>put the <tt>ffprobe</tt> executable in your <tt>$PATH</tt></li>\n</ul>\n</li>\n<li><tt>pip3 install <span class=\"pre\">-r</span> requirements.txt</tt></li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>pip install ffmpeg_bitrate_stats\n</pre>\n<p>Or clone this repository, then run the tool with\n<tt>python <span class=\"pre\">-m</span> ffmpeg_bitrate_stats</tt></p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>The script outputs a bunch of bitrate statistics, including aggregations\nfor pre-defined windows. These windows can either be time-based or\nGOP-based (for video streams). When choosing a time-based window, you\ncan specify the size of the chunks in seconds.</p>\n<p>Output is to STDOUT so you can redirect that to a file or another\nscript.</p>\n<p>See <tt>ffmpeg_bitrate_stats <span class=\"pre\">-h</span></tt>:</p>\n<pre>usage: ffmpeg_bitrate_stats [-h] [-n] [-v] [-s {video,audio}]\n                               [-a {time,gop}] [-c CHUNK_SIZE]\n                               [-of {json,csv}]\n                               input\n\npositional arguments:\n  input                 input file\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -n, --dry-run         Do not run command, just show what would be done\n                        (default: False)\n  -v, --verbose         Show verbose output (default: False)\n  -s {video,audio}, --stream-type {video,audio}\n                        Stream type to analyze (default: video)\n  -a {time,gop}, --aggregation {time,gop}\n                        Window for aggregating statistics, either time-based\n                        (per-second) or per GOP (default: time)\n  -c CHUNK_SIZE, --chunk-size CHUNK_SIZE\n                        Custom aggregation window size in seconds (default:\n                        1.0)\n  -of {json,csv}, --output-format {json,csv}\n                        output in which format (default: json)\n</pre>\n</div>\n<div id=\"output\">\n<h2>Output</h2>\n<p>The output can be JSON, which includes individual fields for each chunk,\nor CSV, which repeats each line for each chunk. The CSV adheres to the\n\u201ctidy\u201d data concept, so it\u2019s a little redundant.</p>\n<p>Rates are given in kilobit per second, using SI prefixes (i.e., kilo =\n1000).</p>\n<p>Explanation of the fields:</p>\n<ul>\n<li><tt>input_file</tt>: Path to the input file</li>\n<li><tt>stream_type</tt>: Type of stream used (video, audio)</li>\n<li><tt>avg_fps</tt>: Average FPS (number of frames divided by duration)</li>\n<li><tt>num_frames</tt>: Number of frames</li>\n<li><tt>avg_bitrate</tt>: Average bitrate</li>\n<li><tt>avg_bitrate_over_chunks</tt>: Average bitrate calculated over the\nchunks</li>\n<li><tt>max_bitrate</tt>: Maximum bitrate calculated over the chunks</li>\n<li><tt>min_bitrate</tt>: Minimum bitrate calculated over the chunks</li>\n<li><tt>max_bitrate_factor</tt>: Relation between peak and average</li>\n<li><tt>bitrate_per_chunk</tt>: Individual bitrates for each chunk</li>\n<li><tt>aggregation</tt>: Type of aggregation used</li>\n<li><tt>chunk_size</tt>: Size of the chunk (when aggregation is \u201ctime\u201d)</li>\n<li><tt>duration</tt>: Total duration of the stream (last frame DTS minus\nfirst DTS)</li>\n</ul>\n<p>JSON example:</p>\n<pre>\u279c ffmpeg_bitrate_stats -a time -c 30 -of json BigBuckBunny.mp4\n{\n    \"input_file\": \"BigBuckBunny.mp4\",\n    \"stream_type\": \"video\",\n    \"avg_fps\": 60.002,\n    \"num_frames\": 38072,\n    \"avg_bitrate\": 8002.859,\n    \"avg_bitrate_over_chunks\": 7849.263,\n    \"max_bitrate\": 14565.117,\n    \"min_bitrate\": 3876.533,\n    \"max_bitrate_factor\": 1.82,\n    \"bitrate_per_chunk\": [\n        8960.89,\n        8036.678,\n        6099.959,\n        4247.879,\n        7276.979,\n        5738.383,\n        7740.339,\n        7881.705,\n        7572.594,\n        8387.719,\n        9634.343,\n        9939.488,\n        9365.104,\n        5061.071,\n        14565.117,\n        9725.483,\n        4573.873,\n        7765.041,\n        9796.135,\n        12524.024,\n        3876.533,\n        3914.455\n    ],\n    \"aggregation\": \"time\",\n    \"chunk_size\": 30.0,\n    \"duration\": 634.517\n}\n</pre>\n<p>CSV example:</p>\n<pre>\u279c  ffmpeg_bitrate_stats -a time -c 30 -of csv BigBuckBunny.mp4\ninput_file,chunk_index,stream_type,avg_fps,num_frames,avg_bitrate,avg_bitrate_over_chunks,max_bitrate,min_bitrate,max_bitrate_factor,bitrate_per_chunk,aggregation,chunk_size,duration\nBigBuckBunny.mp4,0,video,60.002,38072,8002.859,7849.263,14565.117,3876.533,1.82,8960.89,time,30.0,634.517\nBigBuckBunny.mp4,1,video,60.002,38072,8002.859,7849.263,14565.117,3876.533,1.82,8036.678,time,30.0,634.517\nBigBuckBunny.mp4,2,video,60.002,38072,8002.859,7849.263,14565.117,3876.533,1.82,6099.959,time,30.0,634.517\nBigBuckBunny.mp4,3,video,60.002,38072,8002.859,7849.263,14565.117,3876.533,1.82,4247.879,time,30.0,634.517\nBigBuckBunny.mp4,4,video,60.002,38072,8002.859,7849.263,14565.117,3876.533,1.82,7276.979,time,30.0,634.517\nBigBuckBunny.mp4,5,video,60.002,38072,8002.859,7849.263,14565.117,3876.533,1.82,5738.383,time,30.0,634.517\nBigBuckBunny.mp4,6,video,60.002,38072,8002.859,7849.263,14565.117,3876.533,1.82,7740.339,time,30.0,634.517\nBigBuckBunny.mp4,7,video,60.002,38072,8002.859,7849.263,14565.117,3876.533,1.82,7881.705,time,30.0,634.517\nBigBuckBunny.mp4,8,video,60.002,38072,8002.859,7849.263,14565.117,3876.533,1.82,7572.594,time,30.0,634.517\nBigBuckBunny.mp4,9,video,60.002,38072,8002.859,7849.263,14565.117,3876.533,1.82,8387.719,time,30.0,634.517\nBigBuckBunny.mp4,10,video,60.002,38072,8002.859,7849.263,14565.117,3876.533,1.82,9634.343,time,30.0,634.517\nBigBuckBunny.mp4,11,video,60.002,38072,8002.859,7849.263,14565.117,3876.533,1.82,9939.488,time,30.0,634.517\nBigBuckBunny.mp4,12,video,60.002,38072,8002.859,7849.263,14565.117,3876.533,1.82,9365.104,time,30.0,634.517\nBigBuckBunny.mp4,13,video,60.002,38072,8002.859,7849.263,14565.117,3876.533,1.82,5061.071,time,30.0,634.517\nBigBuckBunny.mp4,14,video,60.002,38072,8002.859,7849.263,14565.117,3876.533,1.82,14565.117,time,30.0,634.517\nBigBuckBunny.mp4,15,video,60.002,38072,8002.859,7849.263,14565.117,3876.533,1.82,9725.483,time,30.0,634.517\nBigBuckBunny.mp4,16,video,60.002,38072,8002.859,7849.263,14565.117,3876.533,1.82,4573.873,time,30.0,634.517\nBigBuckBunny.mp4,17,video,60.002,38072,8002.859,7849.263,14565.117,3876.533,1.82,7765.041,time,30.0,634.517\nBigBuckBunny.mp4,18,video,60.002,38072,8002.859,7849.263,14565.117,3876.533,1.82,9796.135,time,30.0,634.517\nBigBuckBunny.mp4,19,video,60.002,38072,8002.859,7849.263,14565.117,3876.533,1.82,12524.024,time,30.0,634.517\nBigBuckBunny.mp4,20,video,60.002,38072,8002.859,7849.263,14565.117,3876.533,1.82,3876.533,time,30.0,634.517\nBigBuckBunny.mp4,21,video,60.002,38072,8002.859,7849.263,14565.117,3876.533,1.82,3914.455,time,30.0,634.517\n</pre>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>ffmpeg_bitrate_stats, Copyright (c) 2019 Werner Robitza</p>\n<p>Permission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the\n\u201cSoftware\u201d), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:</p>\n<p>The above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.</p>\n<p>THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>\n</div>\n\n          </div>"}, "last_serial": 6588906, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "9e66abe9a99593e74c26647ccd46ab6c", "sha256": "9e2b6a3b128223dba6f9f0e742a9389e0c8b03830071d293c2d6b384478aeeb0"}, "downloads": -1, "filename": "ffmpeg_bitrate_stats-0.1.tar.gz", "has_sig": false, "md5_digest": "9e66abe9a99593e74c26647ccd46ab6c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8903, "upload_time": "2019-05-25T11:46:09", "upload_time_iso_8601": "2019-05-25T11:46:09.728077Z", "url": "https://files.pythonhosted.org/packages/16/d6/b357e1493f2f7ef881afa2e874051df083f93083913676e8329ee8007af7/ffmpeg_bitrate_stats-0.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "90d807d632f091f2cb7ad351919d90ea", "sha256": "1fc17050ce080543f9ffb22b50f2caff92ef816eb8140bff849d05c836a074e0"}, "downloads": -1, "filename": "ffmpeg_bitrate_stats-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "90d807d632f091f2cb7ad351919d90ea", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7706, "upload_time": "2020-01-14T18:57:44", "upload_time_iso_8601": "2020-01-14T18:57:44.634441Z", "url": "https://files.pythonhosted.org/packages/6b/bb/cc0e9c25b65993413a24c3439621f7a312d070efbc1c85237a8a8cb9e902/ffmpeg_bitrate_stats-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "227383fd8cb1d5b98fac45641ececdcf", "sha256": "762970f2327c89ad40890d3943b64019d51e64706a9e250ff46dba37822fab1a"}, "downloads": -1, "filename": "ffmpeg_bitrate_stats-0.1.2.tar.gz", "has_sig": false, "md5_digest": "227383fd8cb1d5b98fac45641ececdcf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9320, "upload_time": "2020-01-14T18:57:46", "upload_time_iso_8601": "2020-01-14T18:57:46.632419Z", "url": "https://files.pythonhosted.org/packages/51/d7/14559aaa5a3037ab8324f76e292db0cc69828b5698260911e4bae4e6eb42/ffmpeg_bitrate_stats-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "a8efa07d84869f6b71d93ae34fbaaba7", "sha256": "17bfd3c6e8ee70ac12cf8203b034602fa355bee33a6228db46c72e57b81172e7"}, "downloads": -1, "filename": "ffmpeg_bitrate_stats-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "a8efa07d84869f6b71d93ae34fbaaba7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7681, "upload_time": "2020-01-16T08:53:22", "upload_time_iso_8601": "2020-01-16T08:53:22.938354Z", "url": "https://files.pythonhosted.org/packages/c3/b7/354473039af8a462368b15cde3f94c8bcdc6233a33ac7edfe7fd26aec703/ffmpeg_bitrate_stats-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "10de37fb01c458131ebdaa9a5186dc13", "sha256": "b160b78aa4e36de77a881fa1435221812ac186183122997a72e5f9c2227c89c9"}, "downloads": -1, "filename": "ffmpeg_bitrate_stats-0.1.3.tar.gz", "has_sig": false, "md5_digest": "10de37fb01c458131ebdaa9a5186dc13", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9266, "upload_time": "2020-01-16T08:53:24", "upload_time_iso_8601": "2020-01-16T08:53:24.846788Z", "url": "https://files.pythonhosted.org/packages/d4/c9/34550e139f45d178b840729f0b92f0cef06c11dc973c9dc28db1a50a8960/ffmpeg_bitrate_stats-0.1.3.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "5c359d990f754d7ef9b3139322afe696", "sha256": "a38dee12b3545e706f37db6e04216987e887463cfba9d96698591863e4baabb5"}, "downloads": -1, "filename": "ffmpeg_bitrate_stats-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "5c359d990f754d7ef9b3139322afe696", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7845, "upload_time": "2020-02-07T15:16:13", "upload_time_iso_8601": "2020-02-07T15:16:13.780199Z", "url": "https://files.pythonhosted.org/packages/45/01/7dd56a7864d4f9a2ecf8b7b4e29cf49097eea06586255fe2a339b3f82cfc/ffmpeg_bitrate_stats-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "eb4c0ddbec4a8a836804bbb0f2bd84ef", "sha256": "0e6f407b594983c689cf0672caf8303214e9ec79cafbb09c31a9734b183ca3dc"}, "downloads": -1, "filename": "ffmpeg_bitrate_stats-0.2.0.tar.gz", "has_sig": false, "md5_digest": "eb4c0ddbec4a8a836804bbb0f2bd84ef", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9565, "upload_time": "2020-02-07T15:16:15", "upload_time_iso_8601": "2020-02-07T15:16:15.951585Z", "url": "https://files.pythonhosted.org/packages/af/af/34ac0eabb881276b82a95a1e11dcd7ae82ec25ab0786dfee30e42cb18bbf/ffmpeg_bitrate_stats-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5c359d990f754d7ef9b3139322afe696", "sha256": "a38dee12b3545e706f37db6e04216987e887463cfba9d96698591863e4baabb5"}, "downloads": -1, "filename": "ffmpeg_bitrate_stats-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "5c359d990f754d7ef9b3139322afe696", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7845, "upload_time": "2020-02-07T15:16:13", "upload_time_iso_8601": "2020-02-07T15:16:13.780199Z", "url": "https://files.pythonhosted.org/packages/45/01/7dd56a7864d4f9a2ecf8b7b4e29cf49097eea06586255fe2a339b3f82cfc/ffmpeg_bitrate_stats-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "eb4c0ddbec4a8a836804bbb0f2bd84ef", "sha256": "0e6f407b594983c689cf0672caf8303214e9ec79cafbb09c31a9734b183ca3dc"}, "downloads": -1, "filename": "ffmpeg_bitrate_stats-0.2.0.tar.gz", "has_sig": false, "md5_digest": "eb4c0ddbec4a8a836804bbb0f2bd84ef", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9565, "upload_time": "2020-02-07T15:16:15", "upload_time_iso_8601": "2020-02-07T15:16:15.951585Z", "url": "https://files.pythonhosted.org/packages/af/af/34ac0eabb881276b82a95a1e11dcd7ae82ec25ab0786dfee30e42cb18bbf/ffmpeg_bitrate_stats-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:42:48 2020"}