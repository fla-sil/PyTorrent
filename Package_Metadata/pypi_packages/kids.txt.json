{"info": {"author": "Valentin Lab", "author_email": "valentin.lab@kalysto.org", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Programming Language :: Python", "Topic :: Software Development", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "=========================\r\nkids.txt\r\n=========================\r\n\r\n.. image:: http://img.shields.io/pypi/v/kids.txt.svg?style=flat\r\n   :target: https://pypi.python.org/pypi/kids.txt/\r\n   :alt: Latest PyPI version\r\n\r\n.. image:: http://img.shields.io/pypi/dm/kids.txt.svg?style=flat\r\n   :target: https://pypi.python.org/pypi/kids.txt/\r\n   :alt: Number of PyPI downloads\r\n\r\n.. image:: http://img.shields.io/travis/0k/kids.txt/master.svg?style=flat\r\n   :target: https://travis-ci.org/0k/kids.txt/\r\n   :alt: Travis CI build status\r\n\r\n.. image:: http://img.shields.io/coveralls/0k/kids.txt/master.svg?style=flat\r\n   :target: https://coveralls.io/r/0k/kids.txt\r\n   :alt: Test coverage\r\n\r\n\r\n``kids.txt`` is a Python library providing helpers to manage text.\r\nIt's part of 'Kids' (for Keep It Dead Simple) library.\r\n\r\nIt is, for now, a very humble package.\r\n\r\n\r\nFeatures\r\n========\r\n\r\nusing ``kids.txt``:\r\n\r\n- You'll have a ``indent`` / ``dedent`` / ``shorten`` command also in python 2.\r\n- You'll be able to ``wrap`` text keeping the paragraph separated.\r\n- minor helper like ``ucfirst`` function.\r\n- produce unified diffs between 2 strings easily with ``udiff``.\r\n\r\n\r\nInstallation\r\n============\r\n\r\nYou don't need to download the GIT version of the code as ``kids.txt`` is\r\navailable on the PyPI. So you should be able to run::\r\n\r\n    pip install kids.txt\r\n\r\nIf you have downloaded the GIT sources, then you could add install\r\nthe current version via traditional::\r\n\r\n    python setup.py install\r\n\r\nAnd if you don't have the GIT sources but would like to get the latest\r\nmaster or branch from github, you could also::\r\n\r\n    pip install git+https://github.com/0k/kids.txt\r\n\r\nOr even select a specific revision (branch/tag/commit)::\r\n\r\n    pip install git+https://github.com/0k/kids.txt@master\r\n\r\n\r\nUsage\r\n=====\r\n\r\n\r\nindent\r\n------\r\n\r\nYou can easily indent text with::\r\n\r\n    >>> from __future__ import print_function\r\n    >>> from kids import txt\r\n\r\n    >>> string = 'This is first line.\\nThis is second line\\n'\r\n\r\n    >>> print(txt.indent(string, prefix=\"| \"))\r\n    | This is first line.\r\n    | This is second line\r\n    |\r\n\r\n\r\ndedent\r\n------\r\n\r\nYou can also dedent text::\r\n\r\n    >>> print(txt.dedent(\r\n    ...    '''This is a doc\r\n    ...\r\n    ...       with fancy indentation, that should just work also.\r\n    ...       Without removing too much neither as:\r\n    ...          - more space.'''))\r\n    This is a doc\r\n    <BLANKLINE>\r\n    with fancy indentation, that should just work also.\r\n    Without removing too much neither as:\r\n       - more space.\r\n\r\n\r\nparagrap_wrap\r\n-------------\r\n\r\nWrap paragraph separately::\r\n\r\n    >>> string = 'This is first paragraph which is quite long don\\'t you \\\r\n    ... think ? Well, I think so.\\n\\nThis is second paragraph\\n'\r\n\r\n    >>> print(txt.paragraph_wrap(string))\r\n    This is first paragraph which is quite long don't you think ? Well, I\r\n    think so.\r\n    This is second paragraph\r\n\r\n    Notice that that each paragraph has been wrapped separately.\r\n\r\n\r\nucfirst\r\n-------\r\n\r\nThis function will return the given string with the first character forced to\r\nuppercase::\r\n\r\n    >>> txt.ucfirst('foo')\r\n    'Foo'\r\n\r\n\r\nshorten\r\n-------\r\n\r\nThis function will truncate the given string to the given length, if necessary. It'll\r\nreplace the last 2 characters by a '..' to indicate truncation::\r\n\r\n    >>> txt.shorten('fool', l=5)\r\n    'fool'\r\n    >>> txt.shorten('supercalifragilisticexpialidocious', l=5)\r\n    'sup..'\r\n\r\n\r\nudiff\r\n-----\r\n\r\nShows the unified diff between to text::\r\n\r\n    >>> print(txt.udiff('a\\n\\nc', 'b\\n\\nc'))\r\n    --- None\r\n    +++ None\r\n    @@ -1,3 +1,3 @@\r\n    -a\r\n    +b\r\n    <BLANKLINE>\r\n     c\r\n    <BLANKLINE>\r\n\r\n\r\nContributing\r\n============\r\n\r\nAny suggestion or issue is welcome. Push request are very welcome,\r\nplease check out the guidelines.\r\n\r\n\r\nPush Request Guidelines\r\n-----------------------\r\n\r\nYou can send any code. I'll look at it and will integrate it myself in\r\nthe code base and leave you as the author. This process can take time and\r\nit'll take less time if you follow the following guidelines:\r\n\r\n- check your code with PEP8 or pylint. Try to stick to 80 columns wide.\r\n- separate your commits per smallest concern.\r\n- each commit should pass the tests (to allow easy bisect)\r\n- each functionality/bugfix commit should contain the code, tests,\r\n  and doc.\r\n- prior minor commit with typographic or code cosmetic changes are\r\n  very welcome. These should be tagged in their commit summary with\r\n  ``!minor``.\r\n- the commit message should follow gitchangelog rules (check the git\r\n  log to get examples)\r\n- if the commit fixes an issue or finished the implementation of a\r\n  feature, please mention it in the summary.\r\n\r\nIf you have some questions about guidelines which is not answered here,\r\nplease check the current ``git log``, you might find previous commit that\r\nwould show you how to deal with your issue.\r\n\r\n\r\nLicense\r\n=======\r\n\r\nCopyright (c) 2015 Valentin Lab.\r\n\r\nLicensed under the `BSD License`_.\r\n\r\n.. _BSD License: http://raw.github.com/0k/kids.txt/master/LICENSE\r\n\r\nChangelog\r\n=========\r\n\r\n0.0.2 (2015-02-04)\r\n------------------\r\n\r\nNew\r\n~~~\r\n\r\n- Added ``udiff`` to get unified diffs of strings. [Valentin Lab]\r\n\r\n- Added ``ucfirst`` and ``shorten``. [Valentin Lab]\r\n\r\n- Added a ``dedent()`` function. [Valentin Lab]\r\n\r\nFix\r\n~~~\r\n\r\n- ``indent`` would ignore ``first`` set to empty string. [Valentin Lab]\r\n\r\n\r\n0.0.1 (2014-05-13)\r\n------------------\r\n\r\n- First import. [Valentin Lab]", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/0k/kids.txt", "keywords": "", "license": "UNKNOWN", "maintainer": "", "maintainer_email": "", "name": "kids.txt", "package_url": "https://pypi.org/project/kids.txt/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/kids.txt/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/0k/kids.txt"}, "release_url": "https://pypi.org/project/kids.txt/0.0.2/", "requires_dist": null, "requires_python": null, "summary": "Kids text manipulation helpers.", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.python.org/pypi/kids.txt/\" rel=\"nofollow\"><img alt=\"Latest PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4c5ddcc551a14c001418e39fd0b02e7543bb049e/687474703a2f2f696d672e736869656c64732e696f2f707970692f762f6b6964732e7478742e7376673f7374796c653d666c6174\"></a>\n<a href=\"https://pypi.python.org/pypi/kids.txt/\" rel=\"nofollow\"><img alt=\"Number of PyPI downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f99b2f5f7ccc87335021d0a7e6b628de246a1ce6/687474703a2f2f696d672e736869656c64732e696f2f707970692f646d2f6b6964732e7478742e7376673f7374796c653d666c6174\"></a>\n<a href=\"https://travis-ci.org/0k/kids.txt/\" rel=\"nofollow\"><img alt=\"Travis CI build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c77953fd4f57181ebdaa0081c2ccc2631602d572/687474703a2f2f696d672e736869656c64732e696f2f7472617669732f306b2f6b6964732e7478742f6d61737465722e7376673f7374796c653d666c6174\"></a>\n<a href=\"https://coveralls.io/r/0k/kids.txt\" rel=\"nofollow\"><img alt=\"Test coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c15885f03b03f6e829b4f0f36b6363eca9882011/687474703a2f2f696d672e736869656c64732e696f2f636f766572616c6c732f306b2f6b6964732e7478742f6d61737465722e7376673f7374796c653d666c6174\"></a>\n<p><tt>kids.txt</tt> is a Python library providing helpers to manage text.\nIt\u2019s part of \u2018Kids\u2019 (for Keep It Dead Simple) library.</p>\n<p>It is, for now, a very humble package.</p>\n<div id=\"features\">\n<h2>Features</h2>\n<p>using <tt>kids.txt</tt>:</p>\n<ul>\n<li>You\u2019ll have a <tt>indent</tt> / <tt>dedent</tt> / <tt>shorten</tt> command also in python 2.</li>\n<li>You\u2019ll be able to <tt>wrap</tt> text keeping the paragraph separated.</li>\n<li>minor helper like <tt>ucfirst</tt> function.</li>\n<li>produce unified diffs between 2 strings easily with <tt>udiff</tt>.</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>You don\u2019t need to download the GIT version of the code as <tt>kids.txt</tt> is\navailable on the PyPI. So you should be able to run:</p>\n<pre>pip install kids.txt\n</pre>\n<p>If you have downloaded the GIT sources, then you could add install\nthe current version via traditional:</p>\n<pre>python setup.py install\n</pre>\n<p>And if you don\u2019t have the GIT sources but would like to get the latest\nmaster or branch from github, you could also:</p>\n<pre>pip install git+https://github.com/0k/kids.txt\n</pre>\n<p>Or even select a specific revision (branch/tag/commit):</p>\n<pre>pip install git+https://github.com/0k/kids.txt@master\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div id=\"indent\">\n<h3>indent</h3>\n<p>You can easily indent text with:</p>\n<pre>&gt;&gt;&gt; from __future__ import print_function\n&gt;&gt;&gt; from kids import txt\n\n&gt;&gt;&gt; string = 'This is first line.\\nThis is second line\\n'\n\n&gt;&gt;&gt; print(txt.indent(string, prefix=\"| \"))\n| This is first line.\n| This is second line\n|\n</pre>\n</div>\n<div id=\"dedent\">\n<h3>dedent</h3>\n<p>You can also dedent text:</p>\n<pre>&gt;&gt;&gt; print(txt.dedent(\n...    '''This is a doc\n...\n...       with fancy indentation, that should just work also.\n...       Without removing too much neither as:\n...          - more space.'''))\nThis is a doc\n&lt;BLANKLINE&gt;\nwith fancy indentation, that should just work also.\nWithout removing too much neither as:\n   - more space.\n</pre>\n</div>\n<div id=\"paragrap-wrap\">\n<h3>paragrap_wrap</h3>\n<p>Wrap paragraph separately:</p>\n<pre>&gt;&gt;&gt; string = 'This is first paragraph which is quite long don\\'t you \\\n... think ? Well, I think so.\\n\\nThis is second paragraph\\n'\n\n&gt;&gt;&gt; print(txt.paragraph_wrap(string))\nThis is first paragraph which is quite long don't you think ? Well, I\nthink so.\nThis is second paragraph\n\nNotice that that each paragraph has been wrapped separately.\n</pre>\n</div>\n<div id=\"ucfirst\">\n<h3>ucfirst</h3>\n<p>This function will return the given string with the first character forced to\nuppercase:</p>\n<pre>&gt;&gt;&gt; txt.ucfirst('foo')\n'Foo'\n</pre>\n</div>\n<div id=\"shorten\">\n<h3>shorten</h3>\n<p>This function will truncate the given string to the given length, if necessary. It\u2019ll\nreplace the last 2 characters by a \u2018..\u2019 to indicate truncation:</p>\n<pre>&gt;&gt;&gt; txt.shorten('fool', l=5)\n'fool'\n&gt;&gt;&gt; txt.shorten('supercalifragilisticexpialidocious', l=5)\n'sup..'\n</pre>\n</div>\n<div id=\"udiff\">\n<h3>udiff</h3>\n<p>Shows the unified diff between to text:</p>\n<pre>&gt;&gt;&gt; print(txt.udiff('a\\n\\nc', 'b\\n\\nc'))\n--- None\n+++ None\n@@ -1,3 +1,3 @@\n-a\n+b\n&lt;BLANKLINE&gt;\n c\n&lt;BLANKLINE&gt;\n</pre>\n</div>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<p>Any suggestion or issue is welcome. Push request are very welcome,\nplease check out the guidelines.</p>\n<div id=\"push-request-guidelines\">\n<h3>Push Request Guidelines</h3>\n<p>You can send any code. I\u2019ll look at it and will integrate it myself in\nthe code base and leave you as the author. This process can take time and\nit\u2019ll take less time if you follow the following guidelines:</p>\n<ul>\n<li>check your code with PEP8 or pylint. Try to stick to 80 columns wide.</li>\n<li>separate your commits per smallest concern.</li>\n<li>each commit should pass the tests (to allow easy bisect)</li>\n<li>each functionality/bugfix commit should contain the code, tests,\nand doc.</li>\n<li>prior minor commit with typographic or code cosmetic changes are\nvery welcome. These should be tagged in their commit summary with\n<tt>!minor</tt>.</li>\n<li>the commit message should follow gitchangelog rules (check the git\nlog to get examples)</li>\n<li>if the commit fixes an issue or finished the implementation of a\nfeature, please mention it in the summary.</li>\n</ul>\n<p>If you have some questions about guidelines which is not answered here,\nplease check the current <tt>git log</tt>, you might find previous commit that\nwould show you how to deal with your issue.</p>\n</div>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>Copyright (c) 2015 Valentin Lab.</p>\n<p>Licensed under the <a href=\"http://raw.github.com/0k/kids.txt/master/LICENSE\" rel=\"nofollow\">BSD License</a>.</p>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<div id=\"id1\">\n<h3>0.0.2 (2015-02-04)</h3>\n<div id=\"new\">\n<h4>New</h4>\n<ul>\n<li>Added <tt>udiff</tt> to get unified diffs of strings. [Valentin Lab]</li>\n<li>Added <tt>ucfirst</tt> and <tt>shorten</tt>. [Valentin Lab]</li>\n<li>Added a <tt>dedent()</tt> function. [Valentin Lab]</li>\n</ul>\n</div>\n<div id=\"fix\">\n<h4>Fix</h4>\n<ul>\n<li><tt>indent</tt> would ignore <tt>first</tt> set to empty string. [Valentin Lab]</li>\n</ul>\n</div>\n</div>\n<div id=\"id2\">\n<h3>0.0.1 (2014-05-13)</h3>\n<ul>\n<li>First import. [Valentin Lab]</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1409350, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "9077a44cf64fecb872c13fb3dfe7c684", "sha256": "99d04dd54e94df8189cd78db3d4affa30a812ec9698d71cb1e3a98fc153a0300"}, "downloads": -1, "filename": "kids.txt-0.0.1.tar.gz", "has_sig": false, "md5_digest": "9077a44cf64fecb872c13fb3dfe7c684", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3317, "upload_time": "2014-05-13T21:32:40", "upload_time_iso_8601": "2014-05-13T21:32:40.849117Z", "url": "https://files.pythonhosted.org/packages/58/b3/c04b38f5984279dc0a2f6b00c4c9ea367d69cad6c6f6820a100a663de4b2/kids.txt-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "28581aabc3aaa11932615814d1a4d5c5", "sha256": "231d8a2f00ba24f71f818c0d417efaa711b0694a9d38ccd9e34c2f022888a75d"}, "downloads": -1, "filename": "kids.txt-0.0.2.tar.gz", "has_sig": false, "md5_digest": "28581aabc3aaa11932615814d1a4d5c5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6109, "upload_time": "2015-02-04T12:29:31", "upload_time_iso_8601": "2015-02-04T12:29:31.126529Z", "url": "https://files.pythonhosted.org/packages/af/ad/fb29638e8325170496492d3ccfacd4215162b076a52a5ba63e0f10669082/kids.txt-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "28581aabc3aaa11932615814d1a4d5c5", "sha256": "231d8a2f00ba24f71f818c0d417efaa711b0694a9d38ccd9e34c2f022888a75d"}, "downloads": -1, "filename": "kids.txt-0.0.2.tar.gz", "has_sig": false, "md5_digest": "28581aabc3aaa11932615814d1a4d5c5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6109, "upload_time": "2015-02-04T12:29:31", "upload_time_iso_8601": "2015-02-04T12:29:31.126529Z", "url": "https://files.pythonhosted.org/packages/af/ad/fb29638e8325170496492d3ccfacd4215162b076a52a5ba63e0f10669082/kids.txt-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:49:46 2020"}