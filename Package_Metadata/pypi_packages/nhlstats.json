{"info": {"author": "Tom Caruso", "author_email": "carusot42@gmail.com", "bugtrack_url": null, "classifiers": ["Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: Implementation :: CPython"], "description": "\n### nhlstats\n\nA library and CLI tool for collecting stats from the NHL web API. \n\nCurrently, supported data types include event data such as shots / goals / hits / etc, shift information and general scheduling information.\n\nAll data is accessible identically through the Python API or command-line tool.\n\n\n#### Install\n\nCompatible with Python3.5+.\n\nUse `pip`:\n\n```bash\npython3 -m pip install nhlstats\n```\n\nOr from source:\n\n```bash\ngit clone https://github.com/tomplex/nhlstats.git ~/dev/nhlstats\npython3 -m pip install ~/dev/nhlstats\n# or\npython3 ~/dev/nhlstats/setup.py install\n```\n\nThis will add a new command to your system, `nhl`.\n\n#### What this is (and isn't)\n\nThis is meant to be a tool to help obtain data about hockey games. I aim to make it easy to download data which people \nwho are more statistically inclined than I can use to make pretty pictures and graphs. I am also trying to, generally, \nnormalize and flatten the data so it easier to use in software which processes tabular data. \n\nIt's *not* meant to be a data model of all of the data available about the NHL. I'm not trying to create models for\n teams, rosters, players, events, etc. and all the hierarchies therein.  If that's what you want, then there is an excellent \n [library that already does that.](https://github.com/mhostetter/nhl)\n\n#### The GameID\n\nThe key to NHL stats data is the \"gameid\", an ID which uniquely identifies every game. \nIt's a 10-digit numeric code which is formatted like so:\n\n    2019020565\n\n\nThis tool uses the gameid to obtain data for specific games. You can use the `list_games` python function or the `list-games` CLI \ncommand to get game ID's which you can then use to drill down and get information for the games you care about.\n\n\n#### Usage - library\n\nLet's say you want to write a script which you'll run once a day, which will find all games played on the given day and download all play-by-play data for each game into a CSV file, labelled with the game's ID.\n\n```python\nfrom nhlstats import list_games, list_plays\nfrom nhlstats.formatters import csv\n\n# List all games today and write all plays from each as a csv file named like the game_id\nfor game in list_games():  # No args will list all games today\n    game_id = game['game_id']\n    plays = list_plays(game_id)  # get plays, normalized\n\n    with open('{}.csv'.format(game_id), 'w') as f:\n        csv.dump(plays, f)\n\n```\n\nIf you use Pandas, then you can create a dataframe directly from the data which comes back from list_plays or list_shifts:\n\n```python\nfrom nhlstats import list_plays, list_shifts\nimport pandas as pd\n\ngameid = \"2019020418\"\n\nplays = pd.DataFrame(list_plays(gameid))\nshifts = pd.DataFrame(list_shifts(gameid))\n\nplays.head()\nshifts.head()\n\n``` \n\nIf you use [petl](https://petl.readthedocs.io/en/stable/), then you can use `petl.fromdicts()` to create a `TableContainer`:\n\n```python\nfrom nhlstats import list_plays\nimport petl as etl\n\ngameid = \"2019020418\"\n\npipeline = etl.fromdicts(list_plays(gameid))\n\nprint(pipeline)\n```\n\n##### Formatters\n\nThe formatters package formats data into different types of output, for example CSV, JSON, or a \ntext-based table. Each formatter has a `dump` and `dumps` function which work similarly to Python's `json` module. \nIf you want to save your data as JSON, for example:\n\n```python\nfrom nhlstats import list_plays\nfrom nhlstats.formatters import json\n\nplays = list_plays('gameid')\nwith open('file.json', 'w') as f:\n    json.dump(plays, f)\n\n```\n\nMore detailed examples of the formatters are available below.\n\n\n#### Usage - CLI\n\n```\n$ nhl --help\nUsage: nhl [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  list-games   List all games from START_DATE to END_DATE.\n  list-plays   List all play events which occurred in the given GAME_ID.\n  list-shifts  List all shifts which occurred in the given GAME_ID.\n  list-shots   List all shot events which occurred in the given GAME_ID.\n```\n\nUse the `--output-format` option to specify how to display the collected data. This option is available with all commands. \nThe default is `text`, which will pretty-print the data as a table. Other options include `csv`, `json`, \nwhich will output a nested JSON like `{\"data\": [...]}`. The data from these commands will always be printed to stdout.\nOn Linux, MacOS or Windows you can use the `>` to redirect stdout to a new file \n(will overwrite the contents if it exists), or `>>` to append to a file, like so:\n\n```bash\nnhl list-plays 2019020406 --output-format csv > 2019020406.csv  # create a new file\nnhl list-plays 2019020406 --output-format csv >> plays.csv  # append result to plays.csv\n```\n\n\n##### list-games\n\n```bash\n$ nhl list-games --help\nUsage: nhl list-games [OPTIONS] [START_DATE] [END_DATE]\n\n  List all games from START_DATE to END_DATE. Dates should be of the form\n  YYYY-MM-DD. Both date arguments default to \"today\" by system time, so you\n  can omit the final argument to get a range from the first date to today.\n\nOptions:\n  --output-format [text|csv|json]\n  --help                          Show this message and exit.\n```\n\n##### list-plays\n\n```bash\n$ nhl list-plays --help\nUsage: nhl list-plays [OPTIONS] GAME_ID\n\n  List all play events which occurred in the given GAME_ID.\n\nOptions:\n  --output-format [text|csv|json]\n  --help                          Show this message and exit.\n```\n\n##### list-shifts\n\n```bash\nnhl list-shifts --help\nUsage: nhl list-shifts [OPTIONS] GAME_ID\n\n  List all shot events which occurred in the given GAME_ID.\n\nOptions:\n  --output-format [text|csv|json]\n  --help                          Show this message and exit.\n\n```\n\n### Data schema\n\nThe raw event data from the NHL is highly nested, and doesn't always contain all keys. I flatten, normalize and cull the \ndata a bit to make it easier to display as tabular data and remove bits which didn't initially strike me as important.\nI could always be convinced to add in more.\n\nThe initial events, as received from the NHL, look like this:\n\n```json\n{\n  \"players\": [\n    {\n      \"player\": {\n        \"id\": 8474189,\n        \"fullName\": \"Lars Eller\",\n        \"link\": \"/api/v1/people/8474189\"\n      },\n      \"playerType\": \"Winner\"\n    },\n    {\n      \"player\": {\n        \"id\": 8470144,\n        \"fullName\": \"Frans Nielsen\",\n        \"link\": \"/api/v1/people/8470144\"\n      },\n      \"playerType\": \"Loser\"\n    }\n  ],\n  \"result\": {\n    \"event\": \"Faceoff\",\n    \"eventCode\": \"DET52\",\n    \"eventTypeId\": \"FACEOFF\",\n    \"description\": \"Lars Eller faceoff won against Frans Nielsen\"\n  },\n  \"about\": {\n    \"eventIdx\": 3,\n    \"eventId\": 52,\n    \"period\": 1,\n    \"periodType\": \"REGULAR\",\n    \"ordinalNum\": \"1st\",\n    \"periodTime\": \"00:00\",\n    \"periodTimeRemaining\": \"20:00\",\n    \"dateTime\": \"2019-12-01T00:08:26Z\",\n    \"goals\": {\n      \"away\": 0,\n      \"home\": 0\n    }\n  },\n  \"coordinates\": {\n    \"x\": 0,\n    \"y\": 0\n  },\n  \"team\": {\n    \"id\": 15,\n    \"name\": \"Washington Capitals\",\n    \"link\": \"/api/v1/teams/15\",\n    \"triCode\": \"WSH\"\n  }\n}\n```\n\nthe same event, \"normalized\", looks like this:\n\n```json\n{\n  \"datetime\": \"2019-12-01T00:08:26Z\", \n  \"period\": 1, \n  \"period_time\": \"00:00\", \n  \"period_time_remaining\": \"20:00\", \n  \"period_type\": \"REGULAR\", \n  \"x\": 0.0, \n  \"y\": 0.0, \n  \"event_type\": \"FACEOFF\", \n  \"event_secondary_type\": null, \n  \"event_description\": \"Lars Eller faceoff won against Frans Nielsen\", \n  \"team_for\": \"WSH\", \n  \"player_1\": \"Lars Eller\", \n  \"player_1_type\": \"Winner\", \n  \"player_1_id\": 8474189, \n  \"player_2\": \"Frans Nielsen\", \n  \"player_2_type\": \"Loser\",\n  \"player_2_id\": 8470144\n}\n```\n\n### Formatters\n\nThe currently available formatters are `csv`, `json`, and `text`.\n\nUsing the `text` output format, we get a pretty-printed table with the data:\n\n```\ndatetime                period  period_time    period_time_remaining    period_type      x    y  event_type       event_secondary_type     event_description                                                                 team_for    player_1             player_1_type      player_1_id  player_2             player_2_type      player_2_id  player_3          player_3_type      player_3_id  player_4          player_4_type      player_4_id\n--------------------  --------  -------------  -----------------------  -------------  ---  ---  ---------------  -----------------------  --------------------------------------------------------------------------------  ----------  -------------------  ---------------  -------------  -------------------  ---------------  -------------  ----------------  ---------------  -------------  ----------------  ---------------  -------------\n2019-11-30T23:00:31Z         1  00:00          20:00                    REGULAR                  GAME_SCHEDULED                            Game Scheduled\n2019-12-01T00:08:21Z         1  00:00          20:00                    REGULAR                  PERIOD_READY                              Period Ready\n2019-12-01T00:08:26Z         1  00:00          20:00                    REGULAR                  PERIOD_START                              Period Start\n2019-12-01T00:08:26Z         1  00:00          20:00                    REGULAR          0    0  FACEOFF                                   Lars Eller faceoff won against Frans Nielsen                                      WSH         Lars Eller           Winner                 8474189  Frans Nielsen        Loser                  8470144\n2019-12-01T00:09:03Z         1  00:20          19:40                    REGULAR         80    8  SHOT             Tip-In                   T.J. Oshie Tip-In saved by Jonathan Bernier                                       WSH         T.J. Oshie           Shooter                8471698  Jonathan Bernier     Goalie                 8473541\n2019-12-01T00:09:09Z         1  00:26          19:34                    REGULAR         78  -34  HIT                                       T.J. Oshie hit Darren Helm                                                        WSH         T.J. Oshie           Hitter                 8471698  Darren Helm          Hittee                 8471794\n2019-12-01T00:09:45Z         1  01:02          18:58                    REGULAR        -88   29  TAKEAWAY                                  Takeaway by Michal Kempny                                                         WSH         Michal Kempny        PlayerID               8479482\n```\n\n\nUsing the `csv` formatter, we get csv-like output:\n\n\n```csv\ndatetime,period,period_time,period_time_remaining,period_type,x,y,event_type,event_secondary_type,event_description,team_for,player_1,player_1_type,player_1_id,player_2,player_2_type,player_2_id,player_3,player_3_type,player_3_id,player_4,player_4_type,player_4_id\n2019-12-02T01:42:03Z,1,00:00,20:00,REGULAR,,,GAME_SCHEDULED,,Game Scheduled,,,,,,,,,,,,,\n2019-12-02T03:07:47Z,1,00:00,20:00,REGULAR,,,PERIOD_READY,,Period Ready,,,,,,,,,,,,,\n2019-12-02T03:07:53Z,1,00:00,20:00,REGULAR,,,PERIOD_START,,Period Start,,,,,,,,,,,,,\n2019-12-02T03:07:53Z,1,00:00,20:00,REGULAR,0.0,0.0,FACEOFF,,Leon Draisaitl faceoff won against Bo Horvat,EDM,Leon Draisaitl,Winner,8477934,Bo Horvat,Loser,8477500,,,,,,\n2019-12-02T03:08:27Z,1,00:12,19:48,REGULAR,97.0,-19.0,HIT,,Bo Horvat hit Leon Draisaitl,VAN,Bo Horvat,Hitter,8477500,Leon Draisaitl,Hittee,8477934,,,,,,\n2019-12-02T03:08:45Z,1,00:30,19:30,REGULAR,51.0,-36.0,TAKEAWAY,,Takeaway by Jordie Benn,VAN,Jordie Benn,PlayerID,8474818,,,,,,,,,\n2019-12-02T03:09:16Z,1,01:01,18:59,REGULAR,-58.0,0.0,BLOCKED_SHOT,,Elias Pettersson shot blocked shot by Darnell Nurse,EDM,Darnell Nurse,Blocker,8477498,Elias Pettersson,Shooter,8480012,,,,,,\n2019-12-02T03:11:13Z,1,02:58,17:02,REGULAR,76.0,-17.0,SHOT,Backhand,Joakim Nygard Backhand saved by Jacob Markstrom,EDM,Joakim Nygard,Shooter,8481638,Jacob Markstrom,Goalie,8474593,,,,,,\n2019-12-02T03:11:24Z,1,03:09,16:51,REGULAR,7.0,-3.0,TAKEAWAY,,Takeaway by Tanner Pearson,VAN,Tanner Pearson,PlayerID,8476871,,,,,,,,,\n```\n\nthe `json` formatter returns JSON identical to the normalized event above.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/tomplex/nhlstats", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "nhlstats", "package_url": "https://pypi.org/project/nhlstats/", "platform": "", "project_url": "https://pypi.org/project/nhlstats/", "project_urls": {"Homepage": "https://github.com/tomplex/nhlstats"}, "release_url": "https://pypi.org/project/nhlstats/0.3.0/", "requires_dist": ["click", "requests", "tabulate"], "requires_python": "", "summary": "Tools for collecting NHL play-by-play stats.", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h3>nhlstats</h3>\n<p>A library and CLI tool for collecting stats from the NHL web API.</p>\n<p>Currently, supported data types include event data such as shots / goals / hits / etc, shift information and general scheduling information.</p>\n<p>All data is accessible identically through the Python API or command-line tool.</p>\n<h4>Install</h4>\n<p>Compatible with Python3.5+.</p>\n<p>Use <code>pip</code>:</p>\n<pre>python3 -m pip install nhlstats\n</pre>\n<p>Or from source:</p>\n<pre>git clone https://github.com/tomplex/nhlstats.git ~/dev/nhlstats\npython3 -m pip install ~/dev/nhlstats\n<span class=\"c1\"># or</span>\npython3 ~/dev/nhlstats/setup.py install\n</pre>\n<p>This will add a new command to your system, <code>nhl</code>.</p>\n<h4>What this is (and isn't)</h4>\n<p>This is meant to be a tool to help obtain data about hockey games. I aim to make it easy to download data which people\nwho are more statistically inclined than I can use to make pretty pictures and graphs. I am also trying to, generally,\nnormalize and flatten the data so it easier to use in software which processes tabular data.</p>\n<p>It's <em>not</em> meant to be a data model of all of the data available about the NHL. I'm not trying to create models for\nteams, rosters, players, events, etc. and all the hierarchies therein.  If that's what you want, then there is an excellent\n<a href=\"https://github.com/mhostetter/nhl\" rel=\"nofollow\">library that already does that.</a></p>\n<h4>The GameID</h4>\n<p>The key to NHL stats data is the \"gameid\", an ID which uniquely identifies every game.\nIt's a 10-digit numeric code which is formatted like so:</p>\n<pre><code>2019020565\n</code></pre>\n<p>This tool uses the gameid to obtain data for specific games. You can use the <code>list_games</code> python function or the <code>list-games</code> CLI\ncommand to get game ID's which you can then use to drill down and get information for the games you care about.</p>\n<h4>Usage - library</h4>\n<p>Let's say you want to write a script which you'll run once a day, which will find all games played on the given day and download all play-by-play data for each game into a CSV file, labelled with the game's ID.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">nhlstats</span> <span class=\"kn\">import</span> <span class=\"n\">list_games</span><span class=\"p\">,</span> <span class=\"n\">list_plays</span>\n<span class=\"kn\">from</span> <span class=\"nn\">nhlstats.formatters</span> <span class=\"kn\">import</span> <span class=\"n\">csv</span>\n\n<span class=\"c1\"># List all games today and write all plays from each as a csv file named like the game_id</span>\n<span class=\"k\">for</span> <span class=\"n\">game</span> <span class=\"ow\">in</span> <span class=\"n\">list_games</span><span class=\"p\">():</span>  <span class=\"c1\"># No args will list all games today</span>\n    <span class=\"n\">game_id</span> <span class=\"o\">=</span> <span class=\"n\">game</span><span class=\"p\">[</span><span class=\"s1\">'game_id'</span><span class=\"p\">]</span>\n    <span class=\"n\">plays</span> <span class=\"o\">=</span> <span class=\"n\">list_plays</span><span class=\"p\">(</span><span class=\"n\">game_id</span><span class=\"p\">)</span>  <span class=\"c1\"># get plays, normalized</span>\n\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"si\">{}</span><span class=\"s1\">.csv'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">game_id</span><span class=\"p\">),</span> <span class=\"s1\">'w'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n        <span class=\"n\">csv</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">(</span><span class=\"n\">plays</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">)</span>\n</pre>\n<p>If you use Pandas, then you can create a dataframe directly from the data which comes back from list_plays or list_shifts:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">nhlstats</span> <span class=\"kn\">import</span> <span class=\"n\">list_plays</span><span class=\"p\">,</span> <span class=\"n\">list_shifts</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n\n<span class=\"n\">gameid</span> <span class=\"o\">=</span> <span class=\"s2\">\"2019020418\"</span>\n\n<span class=\"n\">plays</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">list_plays</span><span class=\"p\">(</span><span class=\"n\">gameid</span><span class=\"p\">))</span>\n<span class=\"n\">shifts</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">list_shifts</span><span class=\"p\">(</span><span class=\"n\">gameid</span><span class=\"p\">))</span>\n\n<span class=\"n\">plays</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">()</span>\n<span class=\"n\">shifts</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">()</span>\n</pre>\n<p>If you use <a href=\"https://petl.readthedocs.io/en/stable/\" rel=\"nofollow\">petl</a>, then you can use <code>petl.fromdicts()</code> to create a <code>TableContainer</code>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">nhlstats</span> <span class=\"kn\">import</span> <span class=\"n\">list_plays</span>\n<span class=\"kn\">import</span> <span class=\"nn\">petl</span> <span class=\"k\">as</span> <span class=\"nn\">etl</span>\n\n<span class=\"n\">gameid</span> <span class=\"o\">=</span> <span class=\"s2\">\"2019020418\"</span>\n\n<span class=\"n\">pipeline</span> <span class=\"o\">=</span> <span class=\"n\">etl</span><span class=\"o\">.</span><span class=\"n\">fromdicts</span><span class=\"p\">(</span><span class=\"n\">list_plays</span><span class=\"p\">(</span><span class=\"n\">gameid</span><span class=\"p\">))</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">pipeline</span><span class=\"p\">)</span>\n</pre>\n<h5>Formatters</h5>\n<p>The formatters package formats data into different types of output, for example CSV, JSON, or a\ntext-based table. Each formatter has a <code>dump</code> and <code>dumps</code> function which work similarly to Python's <code>json</code> module.\nIf you want to save your data as JSON, for example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">nhlstats</span> <span class=\"kn\">import</span> <span class=\"n\">list_plays</span>\n<span class=\"kn\">from</span> <span class=\"nn\">nhlstats.formatters</span> <span class=\"kn\">import</span> <span class=\"n\">json</span>\n\n<span class=\"n\">plays</span> <span class=\"o\">=</span> <span class=\"n\">list_plays</span><span class=\"p\">(</span><span class=\"s1\">'gameid'</span><span class=\"p\">)</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'file.json'</span><span class=\"p\">,</span> <span class=\"s1\">'w'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">(</span><span class=\"n\">plays</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">)</span>\n</pre>\n<p>More detailed examples of the formatters are available below.</p>\n<h4>Usage - CLI</h4>\n<pre><code>$ nhl --help\nUsage: nhl [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  list-games   List all games from START_DATE to END_DATE.\n  list-plays   List all play events which occurred in the given GAME_ID.\n  list-shifts  List all shifts which occurred in the given GAME_ID.\n  list-shots   List all shot events which occurred in the given GAME_ID.\n</code></pre>\n<p>Use the <code>--output-format</code> option to specify how to display the collected data. This option is available with all commands.\nThe default is <code>text</code>, which will pretty-print the data as a table. Other options include <code>csv</code>, <code>json</code>,\nwhich will output a nested JSON like <code>{\"data\": [...]}</code>. The data from these commands will always be printed to stdout.\nOn Linux, MacOS or Windows you can use the <code>&gt;</code> to redirect stdout to a new file\n(will overwrite the contents if it exists), or <code>&gt;&gt;</code> to append to a file, like so:</p>\n<pre>nhl list-plays <span class=\"m\">2019020406</span> --output-format csv &gt; <span class=\"m\">2019020406</span>.csv  <span class=\"c1\"># create a new file</span>\nnhl list-plays <span class=\"m\">2019020406</span> --output-format csv &gt;&gt; plays.csv  <span class=\"c1\"># append result to plays.csv</span>\n</pre>\n<h5>list-games</h5>\n<pre>$ nhl list-games --help\nUsage: nhl list-games <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> <span class=\"o\">[</span>START_DATE<span class=\"o\">]</span> <span class=\"o\">[</span>END_DATE<span class=\"o\">]</span>\n\n  List all games from START_DATE to END_DATE. Dates should be of the form\n  YYYY-MM-DD. Both date arguments default to <span class=\"s2\">\"today\"</span> by system time, so you\n  can omit the final argument to get a range from the first date to today.\n\nOptions:\n  --output-format <span class=\"o\">[</span>text<span class=\"p\">|</span>csv<span class=\"p\">|</span>json<span class=\"o\">]</span>\n  --help                          Show this message and exit.\n</pre>\n<h5>list-plays</h5>\n<pre>$ nhl list-plays --help\nUsage: nhl list-plays <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> GAME_ID\n\n  List all play events which occurred in the given GAME_ID.\n\nOptions:\n  --output-format <span class=\"o\">[</span>text<span class=\"p\">|</span>csv<span class=\"p\">|</span>json<span class=\"o\">]</span>\n  --help                          Show this message and exit.\n</pre>\n<h5>list-shifts</h5>\n<pre>nhl list-shifts --help\nUsage: nhl list-shifts <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> GAME_ID\n\n  List all shot events which occurred in the given GAME_ID.\n\nOptions:\n  --output-format <span class=\"o\">[</span>text<span class=\"p\">|</span>csv<span class=\"p\">|</span>json<span class=\"o\">]</span>\n  --help                          Show this message and exit.\n</pre>\n<h3>Data schema</h3>\n<p>The raw event data from the NHL is highly nested, and doesn't always contain all keys. I flatten, normalize and cull the\ndata a bit to make it easier to display as tabular data and remove bits which didn't initially strike me as important.\nI could always be convinced to add in more.</p>\n<p>The initial events, as received from the NHL, look like this:</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"players\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n      <span class=\"nt\">\"player\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"id\"</span><span class=\"p\">:</span> <span class=\"mi\">8474189</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"fullName\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Lars Eller\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"link\"</span><span class=\"p\">:</span> <span class=\"s2\">\"/api/v1/people/8474189\"</span>\n      <span class=\"p\">},</span>\n      <span class=\"nt\">\"playerType\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Winner\"</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n      <span class=\"nt\">\"player\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"id\"</span><span class=\"p\">:</span> <span class=\"mi\">8470144</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"fullName\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Frans Nielsen\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"link\"</span><span class=\"p\">:</span> <span class=\"s2\">\"/api/v1/people/8470144\"</span>\n      <span class=\"p\">},</span>\n      <span class=\"nt\">\"playerType\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Loser\"</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">],</span>\n  <span class=\"nt\">\"result\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"event\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Faceoff\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"eventCode\"</span><span class=\"p\">:</span> <span class=\"s2\">\"DET52\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"eventTypeId\"</span><span class=\"p\">:</span> <span class=\"s2\">\"FACEOFF\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"description\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Lars Eller faceoff won against Frans Nielsen\"</span>\n  <span class=\"p\">},</span>\n  <span class=\"nt\">\"about\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"eventIdx\"</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"eventId\"</span><span class=\"p\">:</span> <span class=\"mi\">52</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"period\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"periodType\"</span><span class=\"p\">:</span> <span class=\"s2\">\"REGULAR\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"ordinalNum\"</span><span class=\"p\">:</span> <span class=\"s2\">\"1st\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"periodTime\"</span><span class=\"p\">:</span> <span class=\"s2\">\"00:00\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"periodTimeRemaining\"</span><span class=\"p\">:</span> <span class=\"s2\">\"20:00\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"dateTime\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2019-12-01T00:08:26Z\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"goals\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"nt\">\"away\"</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"home\"</span><span class=\"p\">:</span> <span class=\"mi\">0</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">},</span>\n  <span class=\"nt\">\"coordinates\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"x\"</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"y\"</span><span class=\"p\">:</span> <span class=\"mi\">0</span>\n  <span class=\"p\">},</span>\n  <span class=\"nt\">\"team\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"id\"</span><span class=\"p\">:</span> <span class=\"mi\">15</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Washington Capitals\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"link\"</span><span class=\"p\">:</span> <span class=\"s2\">\"/api/v1/teams/15\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"triCode\"</span><span class=\"p\">:</span> <span class=\"s2\">\"WSH\"</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>the same event, \"normalized\", looks like this:</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"datetime\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2019-12-01T00:08:26Z\"</span><span class=\"p\">,</span> \n  <span class=\"nt\">\"period\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> \n  <span class=\"nt\">\"period_time\"</span><span class=\"p\">:</span> <span class=\"s2\">\"00:00\"</span><span class=\"p\">,</span> \n  <span class=\"nt\">\"period_time_remaining\"</span><span class=\"p\">:</span> <span class=\"s2\">\"20:00\"</span><span class=\"p\">,</span> \n  <span class=\"nt\">\"period_type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"REGULAR\"</span><span class=\"p\">,</span> \n  <span class=\"nt\">\"x\"</span><span class=\"p\">:</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> \n  <span class=\"nt\">\"y\"</span><span class=\"p\">:</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> \n  <span class=\"nt\">\"event_type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"FACEOFF\"</span><span class=\"p\">,</span> \n  <span class=\"nt\">\"event_secondary_type\"</span><span class=\"p\">:</span> <span class=\"kc\">null</span><span class=\"p\">,</span> \n  <span class=\"nt\">\"event_description\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Lars Eller faceoff won against Frans Nielsen\"</span><span class=\"p\">,</span> \n  <span class=\"nt\">\"team_for\"</span><span class=\"p\">:</span> <span class=\"s2\">\"WSH\"</span><span class=\"p\">,</span> \n  <span class=\"nt\">\"player_1\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Lars Eller\"</span><span class=\"p\">,</span> \n  <span class=\"nt\">\"player_1_type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Winner\"</span><span class=\"p\">,</span> \n  <span class=\"nt\">\"player_1_id\"</span><span class=\"p\">:</span> <span class=\"mi\">8474189</span><span class=\"p\">,</span> \n  <span class=\"nt\">\"player_2\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Frans Nielsen\"</span><span class=\"p\">,</span> \n  <span class=\"nt\">\"player_2_type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Loser\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"player_2_id\"</span><span class=\"p\">:</span> <span class=\"mi\">8470144</span>\n<span class=\"p\">}</span>\n</pre>\n<h3>Formatters</h3>\n<p>The currently available formatters are <code>csv</code>, <code>json</code>, and <code>text</code>.</p>\n<p>Using the <code>text</code> output format, we get a pretty-printed table with the data:</p>\n<pre><code>datetime                period  period_time    period_time_remaining    period_type      x    y  event_type       event_secondary_type     event_description                                                                 team_for    player_1             player_1_type      player_1_id  player_2             player_2_type      player_2_id  player_3          player_3_type      player_3_id  player_4          player_4_type      player_4_id\n--------------------  --------  -------------  -----------------------  -------------  ---  ---  ---------------  -----------------------  --------------------------------------------------------------------------------  ----------  -------------------  ---------------  -------------  -------------------  ---------------  -------------  ----------------  ---------------  -------------  ----------------  ---------------  -------------\n2019-11-30T23:00:31Z         1  00:00          20:00                    REGULAR                  GAME_SCHEDULED                            Game Scheduled\n2019-12-01T00:08:21Z         1  00:00          20:00                    REGULAR                  PERIOD_READY                              Period Ready\n2019-12-01T00:08:26Z         1  00:00          20:00                    REGULAR                  PERIOD_START                              Period Start\n2019-12-01T00:08:26Z         1  00:00          20:00                    REGULAR          0    0  FACEOFF                                   Lars Eller faceoff won against Frans Nielsen                                      WSH         Lars Eller           Winner                 8474189  Frans Nielsen        Loser                  8470144\n2019-12-01T00:09:03Z         1  00:20          19:40                    REGULAR         80    8  SHOT             Tip-In                   T.J. Oshie Tip-In saved by Jonathan Bernier                                       WSH         T.J. Oshie           Shooter                8471698  Jonathan Bernier     Goalie                 8473541\n2019-12-01T00:09:09Z         1  00:26          19:34                    REGULAR         78  -34  HIT                                       T.J. Oshie hit Darren Helm                                                        WSH         T.J. Oshie           Hitter                 8471698  Darren Helm          Hittee                 8471794\n2019-12-01T00:09:45Z         1  01:02          18:58                    REGULAR        -88   29  TAKEAWAY                                  Takeaway by Michal Kempny                                                         WSH         Michal Kempny        PlayerID               8479482\n</code></pre>\n<p>Using the <code>csv</code> formatter, we get csv-like output:</p>\n<pre>datetime,period,period_time,period_time_remaining,period_type,x,y,event_type,event_secondary_type,event_description,team_for,player_1,player_1_type,player_1_id,player_2,player_2_type,player_2_id,player_3,player_3_type,player_3_id,player_4,player_4_type,player_4_id\n2019-12-02T01:42:03Z,1,00:00,20:00,REGULAR,,,GAME_SCHEDULED,,Game Scheduled,,,,,,,,,,,,,\n2019-12-02T03:07:47Z,1,00:00,20:00,REGULAR,,,PERIOD_READY,,Period Ready,,,,,,,,,,,,,\n2019-12-02T03:07:53Z,1,00:00,20:00,REGULAR,,,PERIOD_START,,Period Start,,,,,,,,,,,,,\n2019-12-02T03:07:53Z,1,00:00,20:00,REGULAR,0.0,0.0,FACEOFF,,Leon Draisaitl faceoff won against Bo Horvat,EDM,Leon Draisaitl,Winner,8477934,Bo Horvat,Loser,8477500,,,,,,\n2019-12-02T03:08:27Z,1,00:12,19:48,REGULAR,97.0,-19.0,HIT,,Bo Horvat hit Leon Draisaitl,VAN,Bo Horvat,Hitter,8477500,Leon Draisaitl,Hittee,8477934,,,,,,\n2019-12-02T03:08:45Z,1,00:30,19:30,REGULAR,51.0,-36.0,TAKEAWAY,,Takeaway by Jordie Benn,VAN,Jordie Benn,PlayerID,8474818,,,,,,,,,\n2019-12-02T03:09:16Z,1,01:01,18:59,REGULAR,-58.0,0.0,BLOCKED_SHOT,,Elias Pettersson shot blocked shot by Darnell Nurse,EDM,Darnell Nurse,Blocker,8477498,Elias Pettersson,Shooter,8480012,,,,,,\n2019-12-02T03:11:13Z,1,02:58,17:02,REGULAR,76.0,-17.0,SHOT,Backhand,Joakim Nygard Backhand saved by Jacob Markstrom,EDM,Joakim Nygard,Shooter,8481638,Jacob Markstrom,Goalie,8474593,,,,,,\n2019-12-02T03:11:24Z,1,03:09,16:51,REGULAR,7.0,-3.0,TAKEAWAY,,Takeaway by Tanner Pearson,VAN,Tanner Pearson,PlayerID,8476871,,,,,,,,,\n</pre>\n<p>the <code>json</code> formatter returns JSON identical to the normalized event above.</p>\n\n          </div>"}, "last_serial": 6348419, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "1c40e9006bce198600b5539603758ec2", "sha256": "988cbc4cee755a5a6d105427e7c92e58f3b99a0135a245736066fb8f8bc8ec9e"}, "downloads": -1, "filename": "nhlstats-0.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1c40e9006bce198600b5539603758ec2", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 8813, "upload_time": "2019-12-02T04:12:24", "upload_time_iso_8601": "2019-12-02T04:12:24.552791Z", "url": "https://files.pythonhosted.org/packages/f7/5a/b51de7db902861f8b5940198e4a5a8715d03e1b1a187a195626ffbe03354/nhlstats-0.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2a9d6b797879926d651d41b52b615cbc", "sha256": "092e63e3b4104b790e819ed404c87989f3b6d7c38cce29ddac81197bf7c8f35e"}, "downloads": -1, "filename": "nhlstats-0.0.1.tar.gz", "has_sig": false, "md5_digest": "2a9d6b797879926d651d41b52b615cbc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5211, "upload_time": "2019-12-02T04:12:33", "upload_time_iso_8601": "2019-12-02T04:12:33.474902Z", "url": "https://files.pythonhosted.org/packages/b6/ef/55e715d82a2922718a6859383e8ee7476c842c7d90ac08375ea28bdf4906/nhlstats-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "bd28ac9d31be422b9fb9c348f83fa2b4", "sha256": "622d10abd37304fe88c1360e04dca3a5b222dc4d0c06823f3cca738b3c1bac95"}, "downloads": -1, "filename": "nhlstats-0.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "bd28ac9d31be422b9fb9c348f83fa2b4", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9919, "upload_time": "2019-12-02T05:03:59", "upload_time_iso_8601": "2019-12-02T05:03:59.782834Z", "url": "https://files.pythonhosted.org/packages/8c/13/3a335a47d8215a05ff42b86ac6ffcf0a552844693b207eeff56f4f944fc8/nhlstats-0.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f4fcf28d336bbf00bef00e74bbfd6b1a", "sha256": "e1a6745462d174323cccba7fee882a2517e23686f4669dabee3163484497b2d9"}, "downloads": -1, "filename": "nhlstats-0.0.2.tar.gz", "has_sig": false, "md5_digest": "f4fcf28d336bbf00bef00e74bbfd6b1a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9894, "upload_time": "2019-12-02T05:04:01", "upload_time_iso_8601": "2019-12-02T05:04:01.210331Z", "url": "https://files.pythonhosted.org/packages/81/22/4cdae8af4bb58889691f8efd51a5cfb4dc4b88a290dfc11cfb165691fa49/nhlstats-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "ef978e1c109e815ad2e45d0726c284ab", "sha256": "4eb4bb182c3b14aef86017e9d8a329c013ebdff28a3cb3ddf8fd40bb004d155f"}, "downloads": -1, "filename": "nhlstats-0.0.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ef978e1c109e815ad2e45d0726c284ab", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 11716, "upload_time": "2019-12-02T05:33:16", "upload_time_iso_8601": "2019-12-02T05:33:16.149099Z", "url": "https://files.pythonhosted.org/packages/da/69/f4751b96ec6d5dfa4004b5f38881e537badd4ce7a600826151d4c7cb7514/nhlstats-0.0.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0d5fabc5e8e846f958dce80ec6c1e57f", "sha256": "fb2ab26892900fd8f7b3e49f89538de62ec59fbe6408ee5806b13b39e392727c"}, "downloads": -1, "filename": "nhlstats-0.0.3.tar.gz", "has_sig": false, "md5_digest": "0d5fabc5e8e846f958dce80ec6c1e57f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13292, "upload_time": "2019-12-02T05:33:17", "upload_time_iso_8601": "2019-12-02T05:33:17.773121Z", "url": "https://files.pythonhosted.org/packages/7e/18/71147f214c48877909c3cd18aa5b5ac6b46bb17cff67bfe4ad6dc1deb7d7/nhlstats-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "5f5b2eca2b2de8c04a7b2e8084a28129", "sha256": "c8961e37fc041910349322fd7f4fceb55587ba9181199438c43ee18d558c49e0"}, "downloads": -1, "filename": "nhlstats-0.0.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5f5b2eca2b2de8c04a7b2e8084a28129", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 13037, "upload_time": "2019-12-02T08:01:46", "upload_time_iso_8601": "2019-12-02T08:01:46.158123Z", "url": "https://files.pythonhosted.org/packages/a5/73/5af0388e2dc7fa902c4fa448716cb234a93619014a119918080d91ef0304/nhlstats-0.0.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5bcde2a5376813020fc0268fb59d62a4", "sha256": "90c7a20ef5502c889f5f7d650cbd77a19bddd6d34e00156f1008e08510be77b8"}, "downloads": -1, "filename": "nhlstats-0.0.4.tar.gz", "has_sig": false, "md5_digest": "5bcde2a5376813020fc0268fb59d62a4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14723, "upload_time": "2019-12-02T08:01:47", "upload_time_iso_8601": "2019-12-02T08:01:47.537892Z", "url": "https://files.pythonhosted.org/packages/b6/1f/1e51ed906275ad42604b12f57b0d1d8ce66e9d543802e3ce66f9edb3e35a/nhlstats-0.0.4.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "076bb9fac2b518740712c27dcf03a36c", "sha256": "80747c3d8a6646f466283ff053c1d88d580a911ef5aa594cd4dec03b1fca9b95"}, "downloads": -1, "filename": "nhlstats-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "076bb9fac2b518740712c27dcf03a36c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 13936, "upload_time": "2019-12-03T03:37:21", "upload_time_iso_8601": "2019-12-03T03:37:21.442508Z", "url": "https://files.pythonhosted.org/packages/63/f4/5bd9a3b55e2d0d429d428f976c304f2e67885b17d65148b6e19318f076dd/nhlstats-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d5df6fe024ebef72673b663088bb2117", "sha256": "bc102521bff584e4d9c869879f32cf389fe5a55f8fd6845d8467fdbc35b4d993"}, "downloads": -1, "filename": "nhlstats-0.1.0.tar.gz", "has_sig": false, "md5_digest": "d5df6fe024ebef72673b663088bb2117", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16592, "upload_time": "2019-12-03T03:37:22", "upload_time_iso_8601": "2019-12-03T03:37:22.852424Z", "url": "https://files.pythonhosted.org/packages/2c/cf/5125206dd1936dbe506c8570456296df1700bdafb2dbe25f5549ba3c0d7d/nhlstats-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "0a4bd8fa79c7511776cfaf5ebe6e176c", "sha256": "bb4e919eb0a9f725d660bce47313da3147b2b564f4c306338a13755da410d793"}, "downloads": -1, "filename": "nhlstats-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0a4bd8fa79c7511776cfaf5ebe6e176c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 14339, "upload_time": "2019-12-22T15:21:41", "upload_time_iso_8601": "2019-12-22T15:21:41.326353Z", "url": "https://files.pythonhosted.org/packages/f6/0c/7dc8f8e4fce9f84b378166da4cf0f7a82afb34749d222ab97822f49bdecd/nhlstats-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "94ea6c25f50e8ebaa785128a25d8bb85", "sha256": "11d52902cab87b5d36bc6a5417f45dae1400a453acfe30ea12baa983187b46b4"}, "downloads": -1, "filename": "nhlstats-0.2.0.tar.gz", "has_sig": false, "md5_digest": "94ea6c25f50e8ebaa785128a25d8bb85", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16962, "upload_time": "2019-12-22T15:21:42", "upload_time_iso_8601": "2019-12-22T15:21:42.502530Z", "url": "https://files.pythonhosted.org/packages/2a/99/66946d87cd831d72a30f1559af224ad3b93feb0ebb5d85d7a3052eab358a/nhlstats-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "30a0137516652bb11ca47ed7a6823f74", "sha256": "9d67be5299c9856d3e6ce06b1ba9fb687e06b4f235596422644cd1fa436c45b4"}, "downloads": -1, "filename": "nhlstats-0.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "30a0137516652bb11ca47ed7a6823f74", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 15371, "upload_time": "2019-12-22T20:57:33", "upload_time_iso_8601": "2019-12-22T20:57:33.270730Z", "url": "https://files.pythonhosted.org/packages/33/3d/37d75ead2103832bb30a2797915d84b2fd2cfbad3a83af6ed1dae00519b4/nhlstats-0.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9af6eca0e08e891844929da6f179301e", "sha256": "c17f649a6b97f256362a7bbc0343794ef313b4203865ad2e3b61fc50e064c65b"}, "downloads": -1, "filename": "nhlstats-0.3.0.tar.gz", "has_sig": false, "md5_digest": "9af6eca0e08e891844929da6f179301e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18383, "upload_time": "2019-12-22T20:57:34", "upload_time_iso_8601": "2019-12-22T20:57:34.947975Z", "url": "https://files.pythonhosted.org/packages/7a/3f/9e312b2b4b4420c519692515f44e44de302f57357aeea392c8fb29be34f3/nhlstats-0.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "30a0137516652bb11ca47ed7a6823f74", "sha256": "9d67be5299c9856d3e6ce06b1ba9fb687e06b4f235596422644cd1fa436c45b4"}, "downloads": -1, "filename": "nhlstats-0.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "30a0137516652bb11ca47ed7a6823f74", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 15371, "upload_time": "2019-12-22T20:57:33", "upload_time_iso_8601": "2019-12-22T20:57:33.270730Z", "url": "https://files.pythonhosted.org/packages/33/3d/37d75ead2103832bb30a2797915d84b2fd2cfbad3a83af6ed1dae00519b4/nhlstats-0.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9af6eca0e08e891844929da6f179301e", "sha256": "c17f649a6b97f256362a7bbc0343794ef313b4203865ad2e3b61fc50e064c65b"}, "downloads": -1, "filename": "nhlstats-0.3.0.tar.gz", "has_sig": false, "md5_digest": "9af6eca0e08e891844929da6f179301e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18383, "upload_time": "2019-12-22T20:57:34", "upload_time_iso_8601": "2019-12-22T20:57:34.947975Z", "url": "https://files.pythonhosted.org/packages/7a/3f/9e312b2b4b4420c519692515f44e44de302f57357aeea392c8fb29be34f3/nhlstats-0.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:27 2020"}