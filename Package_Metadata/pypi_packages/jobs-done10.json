{"info": {"author": "ESSS", "author_email": "dev@esss.com.br", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6", "Topic :: Software Development"], "description": "Job's Done\n===========\n\n[![link](https://img.shields.io/pypi/v/jobs_done10.svg)](https://pypi.org/project/jobs_done10)\n[![link](https://img.shields.io/pypi/pyversions/jobs_done10.svg)](https://pypi.org/project/jobs_done10)\n[![link](https://travis-ci.com/ESSS/jobs_done10.svg?branch=master)](https://travis-ci.com/ESSS/jobs_done10)\n[![link](https://img.shields.io/github/license/ESSS/jobs_done10.svg)](https://img.shields.io/github/license/ESSS/jobs_done10.svg)\n\n# About #\n\nJob's Done is a tool heavily inspired by [Travis](https://travis-ci.org/), and works in the same way \nin that configuring a `.jobs_done.yaml` file in your repository's root to create and trigger Continuous Integration jobs.\n\nExample of a `.jobs_done.yaml` file:\n\n```yaml\nmatrix:\n  platform:\n  - \"win64\"\n  - \"redhat64\"\n\nplatform-win64:build_batch_commands:\n- | \n  python -m venv .env3   || goto eof\n  call .env3\\Scripts\\activate   || goto eof\n  pytest --junitxml=tests-{platform}.xml  \n\nplatform-redhat64:build_shell_commands:\n- |\n  python3 -m venv .env3\n  source .env3/bin/activate\n  pytest --junitxml=tests-{platform}.xml  \n\njunit_patterns:\n- \"tests.*.xml\"\n```\n\nConsidering this file is in the root of repository `myproject` and was pushed to branch `feat-71`, this will generate two Jenkins jobs:\n\n* `myproject-feat-71-win64`\n* `myproject-feat-71-linux64`\n\n\n## Command-line ###\n\nJobs done can be executed in the command-line. \n\nTo use it, from the repository's folder that you want to create jobs for, execute:\n\n```console\n$ jobs_done jenkins --username USER https://example.com/jenkins \n```\n\nThis will create/update existing jobs.\n\nBelow are the possible installation options.\n\n### PyPI ###\n\n1. Create a virtual environment using Python 3 and activate it:\n\n   ```console\n   $ python -m venv .env\n   $ .env\\Scripts\\activate  # Windows\n   $ source .env/bin/activate  # Linux\n   ```\n\n3. Install jobs_done10:\n\n   ```console\n   $ pip install jobs_done10\n   ```\n\n### Development ###\n\n1. Clone the repository:\n\n   ```console\n   git clone git@github.com:ESSS/jobs_done10.git\n   cd jobs_done10\n   ```\n\n2. Create a virtual environment using Python 3 and activate it:\n\n   ```console\n   $ python -m venv .env\n   $ .env\\Scripts\\activate  # Windows\n   $ source .env/bin/activate  # Linux\n   ```\n\n3. Install dependencies:\n\n   ```console\n   $ pip install -e .[testing]\n   ```\n\n\n## Server ##\n\njobs done includes a `flask` end point in `jobs_done10.server` which can be deployed using [Docker](https://www.docker.com/). \n\nThis end point is tailored to receive the push event from a Webhook of a BitBucket Server instance. A post without any\njson data will return the installed version, useful to check the installed version and that the end point is correct.\n\n### Configuration ###\n\nConfiguration is done by having a `.env` file (cortesy of [python-dotenv](https://github.com/theskumar/python-dotenv))\nin the root of this repository with the following variables:\n\n```ini\nJD_JENKINS_URL=https://example.com/jenkins\nJD_JENKINS_USERNAME=jenkins-user\nJD_JENKINS_PASSWORD=some password\n\nJD_STASH_URL=https://example.com/stash\nJD_STASH_USERNAME=stash-user\nJD_STASH_PASSWORD=some password\n\nJD_EMAIL_USER=mail-sender@example.com\nJD_EMAIL_FROM=JobsDone Bot <mail-sender@example.com>\nJD_EMAIL_PASSWORD=email password\nJD_EMAIL_SERVER=smtp.example.com\nJD_EMAIL_PORT=587\n``` \n\n### Build ###\n\nClone the repository and checkout the tag:\n\n```console\n$ git clone https://github.com/ESSS/jobs_done10.git\n$ cd jobs_done10\n$ git checkout <VERSION> \n``` \n\nBuild a docker image:\n\n```console\n$ docker build . --tag jobsdone:<VERSION> --build-arg SETUPTOOLS_SCM_PRETEND_VERSION=<VERSION>\n```\n\n### Run server ###\n\n```console\n$ docker run --publish 5000:5000 jobsdone:<VERSION>\n```\n\n# Hello World #\n\nThis is an example of a Job's Done file, and what you might expect of its contents.\n\n```yaml\nbuild_batch_commands:\n- \"echo MESSAGE: Hello, world!\"\n\ndescription_regex: \"MESSAGE\\\\:(.*)\"\n```\n\nAdding this file to a repository hooked into our CI system will create a single job that when executed run a \nWindows batch command, and later on catches the message echoed and sets that as the build description.\n\n\n# Tests #\n\nThis is an example of a simple application with tests:\n\n```yaml\n\nbuild_batch_commands:\n- \"pytest --junitxml=pytest_results.xml\"\n\njunit_patterns:\n- \"pytest_results.xml\"\n```\n\nThis jobs runs pytest in the repository and outputs test results to a file. We also configure the job to look for that \nfile, and present test results to us at then end of the build.\n\n# Multiple platforms #\n\n\nThe same application as above, but now running on multiple platforms.\n\n```yaml\n\nplatform-win64:build_batch_commands:\n- \"pytest --junitxml=pytest_results-{platform}.xml\"\n\nplatform-redhat64:build_shell_commands:\n- \"pytest --junitxml=pytest_results-{platform}.xml\"\n\njunit_patterns:\n- \"pytest_results.*.xml\"\n\nmatrix:\n  platform:\n  - \"win64\"\n  - \"redhat64\"\n```\n\nHere we add a **matrix** section to define variations of this job. In this case, we have the platform variable, \nwith two possible values, `win64` and `redhat64`.\n\nOne job will be created for each possible combination in the matrix (only two jobs in this case).\n\nSince we can't run batch commands in linux, we add another builder section, `build_shell_commands`. Using some flags \nbefore defining sections we can choose which one will be available in each job.\n\nValues from the matrix can also be used as variables, in this case, `{platform}` will be replaced by the platform used \nin that job (`win64` or `redhat64`).\n\n\n## Branch patterns ##\n\nBranch patterns are used to filter which branches will produce jobs. This list of regular expressions \n(using Python syntax), ensures that a branch will only produce jobs if at least one of the regular \nexpressions matches the name of the branch.\n\nHere's an example that filter only `master` and feature branches:\n\n```yaml\n\nbranch_patterns:\n- \"master\"\n- \"fb-*\"\n```\n\nIf this section is not defined in the file, all branches will produce jobs.\n\n## Job Matrix ##\n\nAs shown in the examples above, the job matrix can be used to create multiple variations of a job. \nOne job for each combination of entries in this matrix is created.\n\n```yaml\nmatrix:\n  mode:\n  - \"app\"\n  - \"cases\"\n  platform:\n  - \"win64\"\n  - \"linux64\"\n```\n\nIn this case 4 jobs will be generated:\n\n* `app-win64`\n* `app-linux64`\n* `cases-win64`\n* `cases-linux64`\n\nNote that you can use any variables you need, Job's done has no idea what `mode` or `platform` means.\n\nThere's an `exclude` clause which can be used to remove particular entries from the matrix:\n\n\n```yaml\nmatrix:\n  mode:\n  - \"app\"\n  - \"cases\"\n  platform:\n  - \"win64\"\n  - \"linux64\"\n\nmode-cases:platform-win.*:exclude: \"yes\"  \n```\n\nThis will exclude all cases jobs from windows.\n\n## String replacement ##\n\nVariables defined in the job matrix can be used to replace strings in the job file.\n\nOn top of matrix variables, there are a few special string templates that can be used in any job:\n\n* `name` - Name of the repository\n* `branch` - Branch being built\n\n\n```yaml\nmatrix:\n  platform:\n  - \"win64\"\n  - \"linux64\"\n\nplatform-win.*:build_batch_commands:\n- \"echo Building project {name} in branch {branch} on platform {platform}\"  \n```\n\nNote that we use Python's format syntax, so if you need an actual `{` or `}` use double braces: `{{`, `}}`.\n\n\n## Condition Flags ##\n\nVariables defined in your job matrix can also be used to control some of the contents in your job file. \nA common example here is using different builder for windows (bash) and linux (shell).\n\nThis is done by adding a prefix to sections of the YAML file, with the variable name and value necessary to use it:\n\n```yaml\nplatform-win.*:build_batch_commands:\n- \"dir .\"\n\nplatform-linux.*:build_shell_commands:\n- \"ls -la .\"\n\nmatrix:\n  platform:\n  - \"win32\"\n  - \"linux64\"\n```\n\nMatrix variables can also define aliases, useful to reduce duplication when using such flags. \nTo add aliases, simply use commas to separate additional names for matrix values:\n\n```yaml\nplatform-windows:build_batch_commands:\n- \"dir .\"\n\nplatform-linux:build_shell_commands:\n- \"ls -la .\"\n\nmatrix:\n  platform:\n  - \"win32,windows\"\n  - \"win64,windows\"\n  - \"linux64,linux\"\n```\n\nOn top of that you can use a special variable `branch` that's always available, and points to your branch:\n\n```yaml\nbranch-master:build_batch_commands:\n- \"echo Build\"\n\nbranch-deploy:build_batch_commands:\n- \"echo Build + Deploy\"\n```\n\nCondition values can use Python regex syntax for extra flexibility:\n\n```yaml\nbranch-master:build_batch_commands:\n- \"echo Build\"\n\nbranch-fb.*:build_batch_commands:\n- \"echo Feature branch!\"\n\nbranch-rb.*:build_batch_commands:\n- \"echo Release branch!\"\n```\n\n# Development #\n\nCreate a virtual environment and install it in development mode:\n\n```console\n$ python -m virtualenv .env36\n$ source .env36/bin/activate\n$ pip install -e .[testing]\n```\n\nRun tests:\n\n```console\n$ pytest src\n```\n\n## Deploy to PyPI ##\n\nJobs done can be deployed to PyPI. Open a PR updating the CHANGELOG and after it passes, push a tag to the repository;\nTravis will see the tag and publish the package to PyPI automatically.\n\n# All options #\n\n### additional_repositories ###\n\nAdditional repositories to be checked out in this job.\n\nThe repository where this .jobs_done file is included by default.\n\nRequires [Multiple SCMs Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Multiple+SCMs+Plugin) and [Git Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Git+Plugin).\n\nUses same options as `git`.\n\n```yaml\nadditional_repositories:\n- git:\n    url: \"https://project.git\"\n    branch: \"{branch}\"\n```\n\n### auth_token ###\n\nJob authentication token required to triggers builds remotely.\n\n```yaml\nauth_token: \"my_token\"\n```\n\n### boosttest_patterns ###\n\nList of boosttest file patterns to look for test results.\n\nRequires the [xUnit Plugin](https://wiki.jenkins-ci.org/display/JENKINS/xUnit+Plugin).\n\n```yaml\nboosttest_patterns:\n- \"*.xml\"\n```\n\n\n### branch_patterns ###\n\nList of regexes used to match branch names.\nOnly branches that match one of these will create\njobs.\n\n```yaml\nbranch_patterns:\n- \"master\"\n- \"fb-*\"\n```\n\n### build_batch_commands ###\nList of Windows batch commands used to build the job.\nIf errorcode is not 0 after any command, the build fails.\n\n```yaml\nbuild_batch_commands:\n- \"pytest src\"\n- \"echo Finished\"\n```\n\n### build_shell_commands ###\n\nList of shell commands used to build the job.\nIf errorcode is not 0 after any command, the build fails.\n\n```yaml\nbuild_shell_commands:\n- \"pytest src\"\n- \"echo Finished\"\n```\n\n### build_python_commands ###\n\nList of python commands used to build the job.\n\nRequires [Python Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Python+Plugin).\n\n```yaml\nbuild_python_commands:\n- \"print(5)\"\n```\n\n### console_color ###\n\nEnable support for ANSI escape sequences, including color, to Console Output.\n\nRequires [AnsiColor Plugin](https://wiki.jenkins-ci.org/display/JENKINS/AnsiColor+Plugin).\n\nAccepted values: \n* `xterm` (default)\n* `vga`\n* `css`\n* `gnome-terminal`\n\n```yaml\nconsole_color: \"css\"\n```\n\n### coverage ###\n\n\nEnables code coverage report.\n\nRequire [Cobertura Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Cobertura+Plugin).\n\nOptions:\n\n* `report_pattern`: mandatory, pattern where XML coverage files are searched. These XML files are usually in\n  [Cobertura](http://cobertura.github.io/cobertura) format, which is also format by \n  [pytest-cov](https://pypi.python.org/pypi/pytest-cov) XML output (because pytest-cov uses coverage library).\n* `healthy`: optional, specifies desired method, line and conditional metric. Any omitted metric defaults to `80`.\n* `unhealthy`: optional, specifies desired method, line and conditional metric. Any omitted metric defaults to `0`. Builds below these thresholds are marked as unhealthy.\n* `failing`: optional, specifies desired method, line and conditional metric. Any omitted metric defaults to `0`. Builds below these thresholds are marked as failed.\n\n```yaml\ncoverage:\n  report_pattern: \"**/build/coverage/*.xml\"\n  healthy:\n    method: 100\n    line: 100\n    conditional: 90\n  unhealthy:\n    method: 95\n    line: 95\n    conditional: 85\n  failing:\n    method: 90\n    line: 90\n    conditional: 80\n```\n\n### cron ###\n\nSchedules to build to run periodically.\n\n```yaml\ncron: |\n  # Everyday at 22pm\n  * 22 * * *\n```\n\n### custom_workspace ###\n\nDefines a custom workspace directory for the job. To maintain the same base directory as the default workspace directories prefix it with `\"workspace/\"`.\n\n```yaml\ncustom_workspace: \"workspace/devspace-user\"\n```\n\n### description_regex ###\n\nRegular expression for searching job output for a description.\nIf a match is found, the contents of the first group will be set as the description.\n\nRequires [Description Setter Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Description+Setter+Plugin).\n\n```yaml\ndescription_regex: \"OUTPUT: (.*)\"\n```\n\n### display_name ###\n\nConfigures the display name of the job.\n\n```yaml\ndisplay_name: \"{branch} {name}\"\n```\n\n### email_notification ###\n\nSends emails for failed builds.\n\n```yaml\nemail_notification: \"email1@example.com email2@example.com\"\n\n# or\n\nemail_notification:\n  recipients: \"email1@example.com email2@example.com\" \n  notify_every_build: true\n  notify_individuals: true\n```\n\n### exclude ###\n\nExcludes a job from the matrix.\n\n```yaml\nplatform-linux64:exclude: \"yes\"\n```\n\n### git ###\n\nAdditional git options for the main project.\n\nRequires [Git Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Git+Plugin).\n\nOptions available here are shared with `additional_repositories`.\n\n```yaml\ngit:  \n  target_dir: \"\"\n  recursive_submodules: \"true\"\n  reference: \"/path/to/ref_repos\"\n```\n\n### jsunit_patterns ###\n\nList of jsunit file patterns to look for test results.\n\nRequires [JSUnit Plugin](https://wiki.jenkins-ci.org/display/JENKINS/JSUnit+plugin).\n\n```yaml\njsunit_patterns:\n- \"*.xml\"\n```\n\n### junit_patterns ###\n\nList of junit file patterns to look for test results.\n\nRequires [xUnit Plugin](https://wiki.jenkins-ci.org/display/JENKINS/xUnit+Plugin).\n\n```yaml\njunit_patterns:\n- \"*.xml\"\n```\n\n### label_expression ###\n\nConfigures the label expression of the job.\n\nThe label-expression is used to determine which workers can run the job.\n\n```yaml\nlabel_expression: \"{platform}\"\n```\n\n### matrix ###\n\nConfigures variations of a job.\n\n```yaml\nmatrix:\n  python:\n  - \"27\"\n  - \"36\"\n```\n\n### notify_stash ###\n\nNotifies a Stash instance when the build passes.\n\nWhen no parameters are given, uses configurations set in the Jenkins instance.\n\nRequires [StashNotifier Plugin](https://wiki.jenkins-ci.org/display/JENKINS/StashNotifier+Plugin).\n\n```yaml\nnotify_stash:\n  url: \"example.com/stash\"\n  username: \"user\"\n  password: \"pass\"\n\n# Using default from Jenkins\nnotify_stash:  \n```\n\n### parameters ###\n\nJob parameters for Jenkins jobs.\n\nCurrently, only `choice` and `string` are implemented.\n\n```yaml\nparameters:\n  - choice:\n      name: \"PARAM_BIRD\"\n      choices:\n        - \"African\"\n        - \"European\"\n      description: \"Area where the bird is from\"\n  - string:\n      name: \"PARAM_VERSION\"\n      default: \"dev\"\n      description: \"App version\"\n```\n\n### scm_poll ###\n\nSchedules to periodically poll SCM for changes, and trigger builds.\n\n```yaml\nscm_poll: |\n  # Everyday at 22pm\n  * 22 * * *\n```\n\n### slack ###\n\nConfigure notification with slack.\n\n1. Configure your Jenkins integration on Slack\n2. Obtain the token\n3. Configure your job to notify slack using this option.\n\n```yaml\nslack:\n  team: esss\n  channel: dev\n  token: XXX\n  url: https://example.com/jenkins\n```\n\n### timeout ###\n\nJob timeout in minutes.\n\n```yaml\ntimeout: 60\n```\n\n### timestamps ###\n\nShow timestamps on the left side of the console output. \n\nRequires the [Timestamper Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Timestamper).\n\n```yaml\ntimestamps:\n```\n\n### trigger_jobs ###\n\nTrigger other jobs after the current job finishes. Parameters are optional.\n\n```yaml\ntrigger_jobs:\n  names:\n    - myrepo-{branch}-synthetic-{platform}\n  condition: SUCCESS  # can be one of: SUCCESS, UNSTABLE, FAILED, ALWAYS. Defaults to SUCCESS.\n  parameters:  # optional\n    - PARAM1=VALUE1\n    - PARAM2=VALUE2\n```\n\n### warnings ###\n\nConfigures parsing of warnings and static analysis in a CI job.\n\nRequires [Warnings Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Warnings+Plugin).\n\n```yaml\nwarnings:\n  console:\n    - parser: Clang (LLCM based)\n    - parser: PyLint\n  file:\n    - parser: CppLint\n      file_pattern: *.cpplint\n    - parser: CodeAnalysis\n      file_pattern: *.codeanalysis\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ESSS/jobs_done10", "keywords": "jenkins continuous integration ci jobs job build", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "jobs-done10", "package_url": "https://pypi.org/project/jobs-done10/", "platform": "", "project_url": "https://pypi.org/project/jobs-done10/", "project_urls": {"Homepage": "https://github.com/ESSS/jobs_done10"}, "release_url": "https://pypi.org/project/jobs-done10/1.2.1/", "requires_dist": ["click", "flask", "mailer", "pygments", "python-dotenv", "python-jenkins", "pyyaml", "requests-mock", "pytest ; extra == 'testing'", "pytest-mock ; extra == 'testing'"], "requires_python": "", "summary": "Job's Done uses a .jobs_done.yaml file in your repository to create Continuous Integration jobs on Jenkins.", "version": "1.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Job's Done</h1>\n<p><a href=\"https://pypi.org/project/jobs_done10\" rel=\"nofollow\"><img alt=\"link\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f31641c6b16c6a9df4cfa7fca70404de06e0b218/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6a6f62735f646f6e6531302e737667\"></a>\n<a href=\"https://pypi.org/project/jobs_done10\" rel=\"nofollow\"><img alt=\"link\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/260958fdabc4551b862acc3f6329a2c81a7e91b9/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f6a6f62735f646f6e6531302e737667\"></a>\n<a href=\"https://travis-ci.com/ESSS/jobs_done10\" rel=\"nofollow\"><img alt=\"link\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6c8d7bc8bfb45679414ba3bd1cd12a51d87ce290/68747470733a2f2f7472617669732d63692e636f6d2f455353532f6a6f62735f646f6e6531302e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://img.shields.io/github/license/ESSS/jobs_done10.svg\" rel=\"nofollow\"><img alt=\"link\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1288d9639d830e16b5db8a89f82b528000c588c2/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f455353532f6a6f62735f646f6e6531302e737667\"></a></p>\n<h1>About</h1>\n<p>Job's Done is a tool heavily inspired by <a href=\"https://travis-ci.org/\" rel=\"nofollow\">Travis</a>, and works in the same way\nin that configuring a <code>.jobs_done.yaml</code> file in your repository's root to create and trigger Continuous Integration jobs.</p>\n<p>Example of a <code>.jobs_done.yaml</code> file:</p>\n<pre><span class=\"nt\">matrix</span><span class=\"p\">:</span>\n  <span class=\"nt\">platform</span><span class=\"p\">:</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"s\">\"win64\"</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"s\">\"redhat64\"</span>\n\n<span class=\"l l-Scalar l-Scalar-Plain\">platform-win64:build_batch_commands</span><span class=\"p p-Indicator\">:</span>\n<span class=\"p p-Indicator\">-</span> <span class=\"p p-Indicator\">|</span> \n  <span class=\"no\">python -m venv .env3   || goto eof</span>\n  <span class=\"no\">call .env3\\Scripts\\activate   || goto eof</span>\n  <span class=\"no\">pytest --junitxml=tests-{platform}.xml  </span>\n\n<span class=\"l l-Scalar l-Scalar-Plain\">platform-redhat64:build_shell_commands</span><span class=\"p p-Indicator\">:</span>\n<span class=\"p p-Indicator\">-</span> <span class=\"p p-Indicator\">|</span>\n  <span class=\"no\">python3 -m venv .env3</span>\n  <span class=\"no\">source .env3/bin/activate</span>\n  <span class=\"no\">pytest --junitxml=tests-{platform}.xml  </span>\n\n<span class=\"nt\">junit_patterns</span><span class=\"p\">:</span>\n<span class=\"p p-Indicator\">-</span> <span class=\"s\">\"tests.*.xml\"</span>\n</pre>\n<p>Considering this file is in the root of repository <code>myproject</code> and was pushed to branch <code>feat-71</code>, this will generate two Jenkins jobs:</p>\n<ul>\n<li><code>myproject-feat-71-win64</code></li>\n<li><code>myproject-feat-71-linux64</code></li>\n</ul>\n<h2>Command-line</h2>\n<p>Jobs done can be executed in the command-line.</p>\n<p>To use it, from the repository's folder that you want to create jobs for, execute:</p>\n<pre><span class=\"gp\">$</span> jobs_done jenkins --username USER https://example.com/jenkins \n</pre>\n<p>This will create/update existing jobs.</p>\n<p>Below are the possible installation options.</p>\n<h3>PyPI</h3>\n<ol>\n<li>\n<p>Create a virtual environment using Python 3 and activate it:</p>\n<pre><span class=\"gp\">$</span> python -m venv .env\n<span class=\"gp\">$</span> .env<span class=\"se\">\\S</span>cripts<span class=\"se\">\\a</span>ctivate  <span class=\"c1\"># Windows</span>\n<span class=\"gp\">$</span> <span class=\"nb\">source</span> .env/bin/activate  <span class=\"c1\"># Linux</span>\n</pre>\n</li>\n<li>\n<p>Install jobs_done10:</p>\n<pre><span class=\"gp\">$</span> pip install jobs_done10\n</pre>\n</li>\n</ol>\n<h3>Development</h3>\n<ol>\n<li>\n<p>Clone the repository:</p>\n<pre><span class=\"go\">git clone git@github.com:ESSS/jobs_done10.git</span>\n<span class=\"go\">cd jobs_done10</span>\n</pre>\n</li>\n<li>\n<p>Create a virtual environment using Python 3 and activate it:</p>\n<pre><span class=\"gp\">$</span> python -m venv .env\n<span class=\"gp\">$</span> .env<span class=\"se\">\\S</span>cripts<span class=\"se\">\\a</span>ctivate  <span class=\"c1\"># Windows</span>\n<span class=\"gp\">$</span> <span class=\"nb\">source</span> .env/bin/activate  <span class=\"c1\"># Linux</span>\n</pre>\n</li>\n<li>\n<p>Install dependencies:</p>\n<pre><span class=\"gp\">$</span> pip install -e .<span class=\"o\">[</span>testing<span class=\"o\">]</span>\n</pre>\n</li>\n</ol>\n<h2>Server</h2>\n<p>jobs done includes a <code>flask</code> end point in <code>jobs_done10.server</code> which can be deployed using <a href=\"https://www.docker.com/\" rel=\"nofollow\">Docker</a>.</p>\n<p>This end point is tailored to receive the push event from a Webhook of a BitBucket Server instance. A post without any\njson data will return the installed version, useful to check the installed version and that the end point is correct.</p>\n<h3>Configuration</h3>\n<p>Configuration is done by having a <code>.env</code> file (cortesy of <a href=\"https://github.com/theskumar/python-dotenv\" rel=\"nofollow\">python-dotenv</a>)\nin the root of this repository with the following variables:</p>\n<pre><span class=\"na\">JD_JENKINS_URL</span><span class=\"o\">=</span><span class=\"s\">https://example.com/jenkins</span>\n<span class=\"na\">JD_JENKINS_USERNAME</span><span class=\"o\">=</span><span class=\"s\">jenkins-user</span>\n<span class=\"na\">JD_JENKINS_PASSWORD</span><span class=\"o\">=</span><span class=\"s\">some password</span>\n\n<span class=\"na\">JD_STASH_URL</span><span class=\"o\">=</span><span class=\"s\">https://example.com/stash</span>\n<span class=\"na\">JD_STASH_USERNAME</span><span class=\"o\">=</span><span class=\"s\">stash-user</span>\n<span class=\"na\">JD_STASH_PASSWORD</span><span class=\"o\">=</span><span class=\"s\">some password</span>\n\n<span class=\"na\">JD_EMAIL_USER</span><span class=\"o\">=</span><span class=\"s\">mail-sender@example.com</span>\n<span class=\"na\">JD_EMAIL_FROM</span><span class=\"o\">=</span><span class=\"s\">JobsDone Bot &lt;mail-sender@example.com&gt;</span>\n<span class=\"na\">JD_EMAIL_PASSWORD</span><span class=\"o\">=</span><span class=\"s\">email password</span>\n<span class=\"na\">JD_EMAIL_SERVER</span><span class=\"o\">=</span><span class=\"s\">smtp.example.com</span>\n<span class=\"na\">JD_EMAIL_PORT</span><span class=\"o\">=</span><span class=\"s\">587</span>\n</pre>\n<h3>Build</h3>\n<p>Clone the repository and checkout the tag:</p>\n<pre><span class=\"gp\">$</span> git clone https://github.com/ESSS/jobs_done10.git\n<span class=\"gp\">$</span> <span class=\"nb\">cd</span> jobs_done10\n<span class=\"gp\">$</span> git checkout &lt;VERSION&gt; \n</pre>\n<p>Build a docker image:</p>\n<pre><span class=\"gp\">$</span> docker build . --tag jobsdone:&lt;VERSION&gt; --build-arg <span class=\"nv\">SETUPTOOLS_SCM_PRETEND_VERSION</span><span class=\"o\">=</span>&lt;VERSION&gt;\n</pre>\n<h3>Run server</h3>\n<pre><span class=\"gp\">$</span> docker run --publish <span class=\"m\">5000</span>:5000 jobsdone:&lt;VERSION&gt;\n</pre>\n<h1>Hello World</h1>\n<p>This is an example of a Job's Done file, and what you might expect of its contents.</p>\n<pre><span class=\"nt\">build_batch_commands</span><span class=\"p\">:</span>\n<span class=\"p p-Indicator\">-</span> <span class=\"s\">\"echo</span><span class=\"nv\"> </span><span class=\"s\">MESSAGE:</span><span class=\"nv\"> </span><span class=\"s\">Hello,</span><span class=\"nv\"> </span><span class=\"s\">world!\"</span>\n\n<span class=\"nt\">description_regex</span><span class=\"p\">:</span> <span class=\"s\">\"MESSAGE\\\\:(.*)\"</span>\n</pre>\n<p>Adding this file to a repository hooked into our CI system will create a single job that when executed run a\nWindows batch command, and later on catches the message echoed and sets that as the build description.</p>\n<h1>Tests</h1>\n<p>This is an example of a simple application with tests:</p>\n<pre><span class=\"nt\">build_batch_commands</span><span class=\"p\">:</span>\n<span class=\"p p-Indicator\">-</span> <span class=\"s\">\"pytest</span><span class=\"nv\"> </span><span class=\"s\">--junitxml=pytest_results.xml\"</span>\n\n<span class=\"nt\">junit_patterns</span><span class=\"p\">:</span>\n<span class=\"p p-Indicator\">-</span> <span class=\"s\">\"pytest_results.xml\"</span>\n</pre>\n<p>This jobs runs pytest in the repository and outputs test results to a file. We also configure the job to look for that\nfile, and present test results to us at then end of the build.</p>\n<h1>Multiple platforms</h1>\n<p>The same application as above, but now running on multiple platforms.</p>\n<pre><span class=\"l l-Scalar l-Scalar-Plain\">platform-win64:build_batch_commands</span><span class=\"p p-Indicator\">:</span>\n<span class=\"p p-Indicator\">-</span> <span class=\"s\">\"pytest</span><span class=\"nv\"> </span><span class=\"s\">--junitxml=pytest_results-{platform}.xml\"</span>\n\n<span class=\"l l-Scalar l-Scalar-Plain\">platform-redhat64:build_shell_commands</span><span class=\"p p-Indicator\">:</span>\n<span class=\"p p-Indicator\">-</span> <span class=\"s\">\"pytest</span><span class=\"nv\"> </span><span class=\"s\">--junitxml=pytest_results-{platform}.xml\"</span>\n\n<span class=\"nt\">junit_patterns</span><span class=\"p\">:</span>\n<span class=\"p p-Indicator\">-</span> <span class=\"s\">\"pytest_results.*.xml\"</span>\n\n<span class=\"nt\">matrix</span><span class=\"p\">:</span>\n  <span class=\"nt\">platform</span><span class=\"p\">:</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"s\">\"win64\"</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"s\">\"redhat64\"</span>\n</pre>\n<p>Here we add a <strong>matrix</strong> section to define variations of this job. In this case, we have the platform variable,\nwith two possible values, <code>win64</code> and <code>redhat64</code>.</p>\n<p>One job will be created for each possible combination in the matrix (only two jobs in this case).</p>\n<p>Since we can't run batch commands in linux, we add another builder section, <code>build_shell_commands</code>. Using some flags\nbefore defining sections we can choose which one will be available in each job.</p>\n<p>Values from the matrix can also be used as variables, in this case, <code>{platform}</code> will be replaced by the platform used\nin that job (<code>win64</code> or <code>redhat64</code>).</p>\n<h2>Branch patterns</h2>\n<p>Branch patterns are used to filter which branches will produce jobs. This list of regular expressions\n(using Python syntax), ensures that a branch will only produce jobs if at least one of the regular\nexpressions matches the name of the branch.</p>\n<p>Here's an example that filter only <code>master</code> and feature branches:</p>\n<pre><span class=\"nt\">branch_patterns</span><span class=\"p\">:</span>\n<span class=\"p p-Indicator\">-</span> <span class=\"s\">\"master\"</span>\n<span class=\"p p-Indicator\">-</span> <span class=\"s\">\"fb-*\"</span>\n</pre>\n<p>If this section is not defined in the file, all branches will produce jobs.</p>\n<h2>Job Matrix</h2>\n<p>As shown in the examples above, the job matrix can be used to create multiple variations of a job.\nOne job for each combination of entries in this matrix is created.</p>\n<pre><span class=\"nt\">matrix</span><span class=\"p\">:</span>\n  <span class=\"nt\">mode</span><span class=\"p\">:</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"s\">\"app\"</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"s\">\"cases\"</span>\n  <span class=\"nt\">platform</span><span class=\"p\">:</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"s\">\"win64\"</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"s\">\"linux64\"</span>\n</pre>\n<p>In this case 4 jobs will be generated:</p>\n<ul>\n<li><code>app-win64</code></li>\n<li><code>app-linux64</code></li>\n<li><code>cases-win64</code></li>\n<li><code>cases-linux64</code></li>\n</ul>\n<p>Note that you can use any variables you need, Job's done has no idea what <code>mode</code> or <code>platform</code> means.</p>\n<p>There's an <code>exclude</code> clause which can be used to remove particular entries from the matrix:</p>\n<pre><span class=\"nt\">matrix</span><span class=\"p\">:</span>\n  <span class=\"nt\">mode</span><span class=\"p\">:</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"s\">\"app\"</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"s\">\"cases\"</span>\n  <span class=\"nt\">platform</span><span class=\"p\">:</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"s\">\"win64\"</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"s\">\"linux64\"</span>\n\n<span class=\"l l-Scalar l-Scalar-Plain\">mode-cases:platform-win.*:exclude</span><span class=\"p p-Indicator\">:</span> <span class=\"s\">\"yes\"</span>  \n</pre>\n<p>This will exclude all cases jobs from windows.</p>\n<h2>String replacement</h2>\n<p>Variables defined in the job matrix can be used to replace strings in the job file.</p>\n<p>On top of matrix variables, there are a few special string templates that can be used in any job:</p>\n<ul>\n<li><code>name</code> - Name of the repository</li>\n<li><code>branch</code> - Branch being built</li>\n</ul>\n<pre><span class=\"nt\">matrix</span><span class=\"p\">:</span>\n  <span class=\"nt\">platform</span><span class=\"p\">:</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"s\">\"win64\"</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"s\">\"linux64\"</span>\n\n<span class=\"l l-Scalar l-Scalar-Plain\">platform-win.*:build_batch_commands</span><span class=\"p p-Indicator\">:</span>\n<span class=\"p p-Indicator\">-</span> <span class=\"s\">\"echo</span><span class=\"nv\"> </span><span class=\"s\">Building</span><span class=\"nv\"> </span><span class=\"s\">project</span><span class=\"nv\"> </span><span class=\"s\">{name}</span><span class=\"nv\"> </span><span class=\"s\">in</span><span class=\"nv\"> </span><span class=\"s\">branch</span><span class=\"nv\"> </span><span class=\"s\">{branch}</span><span class=\"nv\"> </span><span class=\"s\">on</span><span class=\"nv\"> </span><span class=\"s\">platform</span><span class=\"nv\"> </span><span class=\"s\">{platform}\"</span>  \n</pre>\n<p>Note that we use Python's format syntax, so if you need an actual <code>{</code> or <code>}</code> use double braces: <code>{{</code>, <code>}}</code>.</p>\n<h2>Condition Flags</h2>\n<p>Variables defined in your job matrix can also be used to control some of the contents in your job file.\nA common example here is using different builder for windows (bash) and linux (shell).</p>\n<p>This is done by adding a prefix to sections of the YAML file, with the variable name and value necessary to use it:</p>\n<pre><span class=\"l l-Scalar l-Scalar-Plain\">platform-win.*:build_batch_commands</span><span class=\"p p-Indicator\">:</span>\n<span class=\"p p-Indicator\">-</span> <span class=\"s\">\"dir</span><span class=\"nv\"> </span><span class=\"s\">.\"</span>\n\n<span class=\"l l-Scalar l-Scalar-Plain\">platform-linux.*:build_shell_commands</span><span class=\"p p-Indicator\">:</span>\n<span class=\"p p-Indicator\">-</span> <span class=\"s\">\"ls</span><span class=\"nv\"> </span><span class=\"s\">-la</span><span class=\"nv\"> </span><span class=\"s\">.\"</span>\n\n<span class=\"nt\">matrix</span><span class=\"p\">:</span>\n  <span class=\"nt\">platform</span><span class=\"p\">:</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"s\">\"win32\"</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"s\">\"linux64\"</span>\n</pre>\n<p>Matrix variables can also define aliases, useful to reduce duplication when using such flags.\nTo add aliases, simply use commas to separate additional names for matrix values:</p>\n<pre><span class=\"l l-Scalar l-Scalar-Plain\">platform-windows:build_batch_commands</span><span class=\"p p-Indicator\">:</span>\n<span class=\"p p-Indicator\">-</span> <span class=\"s\">\"dir</span><span class=\"nv\"> </span><span class=\"s\">.\"</span>\n\n<span class=\"l l-Scalar l-Scalar-Plain\">platform-linux:build_shell_commands</span><span class=\"p p-Indicator\">:</span>\n<span class=\"p p-Indicator\">-</span> <span class=\"s\">\"ls</span><span class=\"nv\"> </span><span class=\"s\">-la</span><span class=\"nv\"> </span><span class=\"s\">.\"</span>\n\n<span class=\"nt\">matrix</span><span class=\"p\">:</span>\n  <span class=\"nt\">platform</span><span class=\"p\">:</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"s\">\"win32,windows\"</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"s\">\"win64,windows\"</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"s\">\"linux64,linux\"</span>\n</pre>\n<p>On top of that you can use a special variable <code>branch</code> that's always available, and points to your branch:</p>\n<pre><span class=\"l l-Scalar l-Scalar-Plain\">branch-master:build_batch_commands</span><span class=\"p p-Indicator\">:</span>\n<span class=\"p p-Indicator\">-</span> <span class=\"s\">\"echo</span><span class=\"nv\"> </span><span class=\"s\">Build\"</span>\n\n<span class=\"l l-Scalar l-Scalar-Plain\">branch-deploy:build_batch_commands</span><span class=\"p p-Indicator\">:</span>\n<span class=\"p p-Indicator\">-</span> <span class=\"s\">\"echo</span><span class=\"nv\"> </span><span class=\"s\">Build</span><span class=\"nv\"> </span><span class=\"s\">+</span><span class=\"nv\"> </span><span class=\"s\">Deploy\"</span>\n</pre>\n<p>Condition values can use Python regex syntax for extra flexibility:</p>\n<pre><span class=\"l l-Scalar l-Scalar-Plain\">branch-master:build_batch_commands</span><span class=\"p p-Indicator\">:</span>\n<span class=\"p p-Indicator\">-</span> <span class=\"s\">\"echo</span><span class=\"nv\"> </span><span class=\"s\">Build\"</span>\n\n<span class=\"l l-Scalar l-Scalar-Plain\">branch-fb.*:build_batch_commands</span><span class=\"p p-Indicator\">:</span>\n<span class=\"p p-Indicator\">-</span> <span class=\"s\">\"echo</span><span class=\"nv\"> </span><span class=\"s\">Feature</span><span class=\"nv\"> </span><span class=\"s\">branch!\"</span>\n\n<span class=\"l l-Scalar l-Scalar-Plain\">branch-rb.*:build_batch_commands</span><span class=\"p p-Indicator\">:</span>\n<span class=\"p p-Indicator\">-</span> <span class=\"s\">\"echo</span><span class=\"nv\"> </span><span class=\"s\">Release</span><span class=\"nv\"> </span><span class=\"s\">branch!\"</span>\n</pre>\n<h1>Development</h1>\n<p>Create a virtual environment and install it in development mode:</p>\n<pre><span class=\"gp\">$</span> python -m virtualenv .env36\n<span class=\"gp\">$</span> <span class=\"nb\">source</span> .env36/bin/activate\n<span class=\"gp\">$</span> pip install -e .<span class=\"o\">[</span>testing<span class=\"o\">]</span>\n</pre>\n<p>Run tests:</p>\n<pre><span class=\"gp\">$</span> pytest src\n</pre>\n<h2>Deploy to PyPI</h2>\n<p>Jobs done can be deployed to PyPI. Open a PR updating the CHANGELOG and after it passes, push a tag to the repository;\nTravis will see the tag and publish the package to PyPI automatically.</p>\n<h1>All options</h1>\n<h3>additional_repositories</h3>\n<p>Additional repositories to be checked out in this job.</p>\n<p>The repository where this .jobs_done file is included by default.</p>\n<p>Requires <a href=\"https://wiki.jenkins-ci.org/display/JENKINS/Multiple+SCMs+Plugin\" rel=\"nofollow\">Multiple SCMs Plugin</a> and <a href=\"https://wiki.jenkins-ci.org/display/JENKINS/Git+Plugin\" rel=\"nofollow\">Git Plugin</a>.</p>\n<p>Uses same options as <code>git</code>.</p>\n<pre><span class=\"nt\">additional_repositories</span><span class=\"p\">:</span>\n<span class=\"p p-Indicator\">-</span> <span class=\"nt\">git</span><span class=\"p\">:</span>\n    <span class=\"nt\">url</span><span class=\"p\">:</span> <span class=\"s\">\"https://project.git\"</span>\n    <span class=\"nt\">branch</span><span class=\"p\">:</span> <span class=\"s\">\"{branch}\"</span>\n</pre>\n<h3>auth_token</h3>\n<p>Job authentication token required to triggers builds remotely.</p>\n<pre><span class=\"nt\">auth_token</span><span class=\"p\">:</span> <span class=\"s\">\"my_token\"</span>\n</pre>\n<h3>boosttest_patterns</h3>\n<p>List of boosttest file patterns to look for test results.</p>\n<p>Requires the <a href=\"https://wiki.jenkins-ci.org/display/JENKINS/xUnit+Plugin\" rel=\"nofollow\">xUnit Plugin</a>.</p>\n<pre><span class=\"nt\">boosttest_patterns</span><span class=\"p\">:</span>\n<span class=\"p p-Indicator\">-</span> <span class=\"s\">\"*.xml\"</span>\n</pre>\n<h3>branch_patterns</h3>\n<p>List of regexes used to match branch names.\nOnly branches that match one of these will create\njobs.</p>\n<pre><span class=\"nt\">branch_patterns</span><span class=\"p\">:</span>\n<span class=\"p p-Indicator\">-</span> <span class=\"s\">\"master\"</span>\n<span class=\"p p-Indicator\">-</span> <span class=\"s\">\"fb-*\"</span>\n</pre>\n<h3>build_batch_commands</h3>\n<p>List of Windows batch commands used to build the job.\nIf errorcode is not 0 after any command, the build fails.</p>\n<pre><span class=\"nt\">build_batch_commands</span><span class=\"p\">:</span>\n<span class=\"p p-Indicator\">-</span> <span class=\"s\">\"pytest</span><span class=\"nv\"> </span><span class=\"s\">src\"</span>\n<span class=\"p p-Indicator\">-</span> <span class=\"s\">\"echo</span><span class=\"nv\"> </span><span class=\"s\">Finished\"</span>\n</pre>\n<h3>build_shell_commands</h3>\n<p>List of shell commands used to build the job.\nIf errorcode is not 0 after any command, the build fails.</p>\n<pre><span class=\"nt\">build_shell_commands</span><span class=\"p\">:</span>\n<span class=\"p p-Indicator\">-</span> <span class=\"s\">\"pytest</span><span class=\"nv\"> </span><span class=\"s\">src\"</span>\n<span class=\"p p-Indicator\">-</span> <span class=\"s\">\"echo</span><span class=\"nv\"> </span><span class=\"s\">Finished\"</span>\n</pre>\n<h3>build_python_commands</h3>\n<p>List of python commands used to build the job.</p>\n<p>Requires <a href=\"https://wiki.jenkins-ci.org/display/JENKINS/Python+Plugin\" rel=\"nofollow\">Python Plugin</a>.</p>\n<pre><span class=\"nt\">build_python_commands</span><span class=\"p\">:</span>\n<span class=\"p p-Indicator\">-</span> <span class=\"s\">\"print(5)\"</span>\n</pre>\n<h3>console_color</h3>\n<p>Enable support for ANSI escape sequences, including color, to Console Output.</p>\n<p>Requires <a href=\"https://wiki.jenkins-ci.org/display/JENKINS/AnsiColor+Plugin\" rel=\"nofollow\">AnsiColor Plugin</a>.</p>\n<p>Accepted values:</p>\n<ul>\n<li><code>xterm</code> (default)</li>\n<li><code>vga</code></li>\n<li><code>css</code></li>\n<li><code>gnome-terminal</code></li>\n</ul>\n<pre><span class=\"nt\">console_color</span><span class=\"p\">:</span> <span class=\"s\">\"css\"</span>\n</pre>\n<h3>coverage</h3>\n<p>Enables code coverage report.</p>\n<p>Require <a href=\"https://wiki.jenkins-ci.org/display/JENKINS/Cobertura+Plugin\" rel=\"nofollow\">Cobertura Plugin</a>.</p>\n<p>Options:</p>\n<ul>\n<li><code>report_pattern</code>: mandatory, pattern where XML coverage files are searched. These XML files are usually in\n<a href=\"http://cobertura.github.io/cobertura\" rel=\"nofollow\">Cobertura</a> format, which is also format by\n<a href=\"https://pypi.python.org/pypi/pytest-cov\" rel=\"nofollow\">pytest-cov</a> XML output (because pytest-cov uses coverage library).</li>\n<li><code>healthy</code>: optional, specifies desired method, line and conditional metric. Any omitted metric defaults to <code>80</code>.</li>\n<li><code>unhealthy</code>: optional, specifies desired method, line and conditional metric. Any omitted metric defaults to <code>0</code>. Builds below these thresholds are marked as unhealthy.</li>\n<li><code>failing</code>: optional, specifies desired method, line and conditional metric. Any omitted metric defaults to <code>0</code>. Builds below these thresholds are marked as failed.</li>\n</ul>\n<pre><span class=\"nt\">coverage</span><span class=\"p\">:</span>\n  <span class=\"nt\">report_pattern</span><span class=\"p\">:</span> <span class=\"s\">\"**/build/coverage/*.xml\"</span>\n  <span class=\"nt\">healthy</span><span class=\"p\">:</span>\n    <span class=\"nt\">method</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">100</span>\n    <span class=\"nt\">line</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">100</span>\n    <span class=\"nt\">conditional</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">90</span>\n  <span class=\"nt\">unhealthy</span><span class=\"p\">:</span>\n    <span class=\"nt\">method</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">95</span>\n    <span class=\"nt\">line</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">95</span>\n    <span class=\"nt\">conditional</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">85</span>\n  <span class=\"nt\">failing</span><span class=\"p\">:</span>\n    <span class=\"nt\">method</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">90</span>\n    <span class=\"nt\">line</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">90</span>\n    <span class=\"nt\">conditional</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">80</span>\n</pre>\n<h3>cron</h3>\n<p>Schedules to build to run periodically.</p>\n<pre><span class=\"nt\">cron</span><span class=\"p\">:</span> <span class=\"p p-Indicator\">|</span>\n  <span class=\"no\"># Everyday at 22pm</span>\n  <span class=\"no\">* 22 * * *</span>\n</pre>\n<h3>custom_workspace</h3>\n<p>Defines a custom workspace directory for the job. To maintain the same base directory as the default workspace directories prefix it with <code>\"workspace/\"</code>.</p>\n<pre><span class=\"nt\">custom_workspace</span><span class=\"p\">:</span> <span class=\"s\">\"workspace/devspace-user\"</span>\n</pre>\n<h3>description_regex</h3>\n<p>Regular expression for searching job output for a description.\nIf a match is found, the contents of the first group will be set as the description.</p>\n<p>Requires <a href=\"https://wiki.jenkins-ci.org/display/JENKINS/Description+Setter+Plugin\" rel=\"nofollow\">Description Setter Plugin</a>.</p>\n<pre><span class=\"nt\">description_regex</span><span class=\"p\">:</span> <span class=\"s\">\"OUTPUT:</span><span class=\"nv\"> </span><span class=\"s\">(.*)\"</span>\n</pre>\n<h3>display_name</h3>\n<p>Configures the display name of the job.</p>\n<pre><span class=\"nt\">display_name</span><span class=\"p\">:</span> <span class=\"s\">\"{branch}</span><span class=\"nv\"> </span><span class=\"s\">{name}\"</span>\n</pre>\n<h3>email_notification</h3>\n<p>Sends emails for failed builds.</p>\n<pre><span class=\"nt\">email_notification</span><span class=\"p\">:</span> <span class=\"s\">\"email1@example.com</span><span class=\"nv\"> </span><span class=\"s\">email2@example.com\"</span>\n\n<span class=\"c1\"># or</span>\n\n<span class=\"nt\">email_notification</span><span class=\"p\">:</span>\n  <span class=\"nt\">recipients</span><span class=\"p\">:</span> <span class=\"s\">\"email1@example.com</span><span class=\"nv\"> </span><span class=\"s\">email2@example.com\"</span> \n  <span class=\"nt\">notify_every_build</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">true</span>\n  <span class=\"nt\">notify_individuals</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">true</span>\n</pre>\n<h3>exclude</h3>\n<p>Excludes a job from the matrix.</p>\n<pre><span class=\"l l-Scalar l-Scalar-Plain\">platform-linux64:exclude</span><span class=\"p p-Indicator\">:</span> <span class=\"s\">\"yes\"</span>\n</pre>\n<h3>git</h3>\n<p>Additional git options for the main project.</p>\n<p>Requires <a href=\"https://wiki.jenkins-ci.org/display/JENKINS/Git+Plugin\" rel=\"nofollow\">Git Plugin</a>.</p>\n<p>Options available here are shared with <code>additional_repositories</code>.</p>\n<pre><span class=\"nt\">git</span><span class=\"p\">:</span>  \n  <span class=\"nt\">target_dir</span><span class=\"p\">:</span> <span class=\"s\">\"\"</span>\n  <span class=\"nt\">recursive_submodules</span><span class=\"p\">:</span> <span class=\"s\">\"true\"</span>\n  <span class=\"nt\">reference</span><span class=\"p\">:</span> <span class=\"s\">\"/path/to/ref_repos\"</span>\n</pre>\n<h3>jsunit_patterns</h3>\n<p>List of jsunit file patterns to look for test results.</p>\n<p>Requires <a href=\"https://wiki.jenkins-ci.org/display/JENKINS/JSUnit+plugin\" rel=\"nofollow\">JSUnit Plugin</a>.</p>\n<pre><span class=\"nt\">jsunit_patterns</span><span class=\"p\">:</span>\n<span class=\"p p-Indicator\">-</span> <span class=\"s\">\"*.xml\"</span>\n</pre>\n<h3>junit_patterns</h3>\n<p>List of junit file patterns to look for test results.</p>\n<p>Requires <a href=\"https://wiki.jenkins-ci.org/display/JENKINS/xUnit+Plugin\" rel=\"nofollow\">xUnit Plugin</a>.</p>\n<pre><span class=\"nt\">junit_patterns</span><span class=\"p\">:</span>\n<span class=\"p p-Indicator\">-</span> <span class=\"s\">\"*.xml\"</span>\n</pre>\n<h3>label_expression</h3>\n<p>Configures the label expression of the job.</p>\n<p>The label-expression is used to determine which workers can run the job.</p>\n<pre><span class=\"nt\">label_expression</span><span class=\"p\">:</span> <span class=\"s\">\"{platform}\"</span>\n</pre>\n<h3>matrix</h3>\n<p>Configures variations of a job.</p>\n<pre><span class=\"nt\">matrix</span><span class=\"p\">:</span>\n  <span class=\"nt\">python</span><span class=\"p\">:</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"s\">\"27\"</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"s\">\"36\"</span>\n</pre>\n<h3>notify_stash</h3>\n<p>Notifies a Stash instance when the build passes.</p>\n<p>When no parameters are given, uses configurations set in the Jenkins instance.</p>\n<p>Requires <a href=\"https://wiki.jenkins-ci.org/display/JENKINS/StashNotifier+Plugin\" rel=\"nofollow\">StashNotifier Plugin</a>.</p>\n<pre><span class=\"nt\">notify_stash</span><span class=\"p\">:</span>\n  <span class=\"nt\">url</span><span class=\"p\">:</span> <span class=\"s\">\"example.com/stash\"</span>\n  <span class=\"nt\">username</span><span class=\"p\">:</span> <span class=\"s\">\"user\"</span>\n  <span class=\"nt\">password</span><span class=\"p\">:</span> <span class=\"s\">\"pass\"</span>\n\n<span class=\"c1\"># Using default from Jenkins</span>\n<span class=\"nt\">notify_stash</span><span class=\"p\">:</span>  \n</pre>\n<h3>parameters</h3>\n<p>Job parameters for Jenkins jobs.</p>\n<p>Currently, only <code>choice</code> and <code>string</code> are implemented.</p>\n<pre><span class=\"nt\">parameters</span><span class=\"p\">:</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"nt\">choice</span><span class=\"p\">:</span>\n      <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"s\">\"PARAM_BIRD\"</span>\n      <span class=\"nt\">choices</span><span class=\"p\">:</span>\n        <span class=\"p p-Indicator\">-</span> <span class=\"s\">\"African\"</span>\n        <span class=\"p p-Indicator\">-</span> <span class=\"s\">\"European\"</span>\n      <span class=\"nt\">description</span><span class=\"p\">:</span> <span class=\"s\">\"Area</span><span class=\"nv\"> </span><span class=\"s\">where</span><span class=\"nv\"> </span><span class=\"s\">the</span><span class=\"nv\"> </span><span class=\"s\">bird</span><span class=\"nv\"> </span><span class=\"s\">is</span><span class=\"nv\"> </span><span class=\"s\">from\"</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"nt\">string</span><span class=\"p\">:</span>\n      <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"s\">\"PARAM_VERSION\"</span>\n      <span class=\"nt\">default</span><span class=\"p\">:</span> <span class=\"s\">\"dev\"</span>\n      <span class=\"nt\">description</span><span class=\"p\">:</span> <span class=\"s\">\"App</span><span class=\"nv\"> </span><span class=\"s\">version\"</span>\n</pre>\n<h3>scm_poll</h3>\n<p>Schedules to periodically poll SCM for changes, and trigger builds.</p>\n<pre><span class=\"nt\">scm_poll</span><span class=\"p\">:</span> <span class=\"p p-Indicator\">|</span>\n  <span class=\"no\"># Everyday at 22pm</span>\n  <span class=\"no\">* 22 * * *</span>\n</pre>\n<h3>slack</h3>\n<p>Configure notification with slack.</p>\n<ol>\n<li>Configure your Jenkins integration on Slack</li>\n<li>Obtain the token</li>\n<li>Configure your job to notify slack using this option.</li>\n</ol>\n<pre><span class=\"nt\">slack</span><span class=\"p\">:</span>\n  <span class=\"nt\">team</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">esss</span>\n  <span class=\"nt\">channel</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">dev</span>\n  <span class=\"nt\">token</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">XXX</span>\n  <span class=\"nt\">url</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">https://example.com/jenkins</span>\n</pre>\n<h3>timeout</h3>\n<p>Job timeout in minutes.</p>\n<pre><span class=\"nt\">timeout</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">60</span>\n</pre>\n<h3>timestamps</h3>\n<p>Show timestamps on the left side of the console output.</p>\n<p>Requires the <a href=\"https://wiki.jenkins-ci.org/display/JENKINS/Timestamper\" rel=\"nofollow\">Timestamper Plugin</a>.</p>\n<pre><span class=\"nt\">timestamps</span><span class=\"p\">:</span>\n</pre>\n<h3>trigger_jobs</h3>\n<p>Trigger other jobs after the current job finishes. Parameters are optional.</p>\n<pre><span class=\"nt\">trigger_jobs</span><span class=\"p\">:</span>\n  <span class=\"nt\">names</span><span class=\"p\">:</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">myrepo-{branch}-synthetic-{platform}</span>\n  <span class=\"nt\">condition</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">SUCCESS</span>  <span class=\"c1\"># can be one of: SUCCESS, UNSTABLE, FAILED, ALWAYS. Defaults to SUCCESS.</span>\n  <span class=\"nt\">parameters</span><span class=\"p\">:</span>  <span class=\"c1\"># optional</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">PARAM1=VALUE1</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">PARAM2=VALUE2</span>\n</pre>\n<h3>warnings</h3>\n<p>Configures parsing of warnings and static analysis in a CI job.</p>\n<p>Requires <a href=\"https://wiki.jenkins-ci.org/display/JENKINS/Warnings+Plugin\" rel=\"nofollow\">Warnings Plugin</a>.</p>\n<pre><span class=\"nt\">warnings</span><span class=\"p\">:</span>\n  <span class=\"nt\">console</span><span class=\"p\">:</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"nt\">parser</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">Clang (LLCM based)</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"nt\">parser</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">PyLint</span>\n  <span class=\"nt\">file</span><span class=\"p\">:</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"nt\">parser</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">CppLint</span>\n      <span class=\"nt\">file_pattern</span><span class=\"p\">:</span> <span class=\"err\">*</span><span class=\"l l-Scalar l-Scalar-Plain\">.cpplint</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"nt\">parser</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">CodeAnalysis</span>\n      <span class=\"nt\">file_pattern</span><span class=\"p\">:</span> <span class=\"err\">*</span><span class=\"l l-Scalar l-Scalar-Plain\">.codeanalysis</span>\n</pre>\n\n          </div>"}, "last_serial": 7078097, "releases": {"1.0.2": [{"comment_text": "", "digests": {"md5": "a927c5749c0612dd9ebcc4c7f6eb1ea1", "sha256": "eb348f8a983ced99506f4adc0b49f139e222b9f6bc7054a32f6a9143854f1fe4"}, "downloads": -1, "filename": "jobs_done10-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "a927c5749c0612dd9ebcc4c7f6eb1ea1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 50480, "upload_time": "2018-06-26T11:24:07", "upload_time_iso_8601": "2018-06-26T11:24:07.328954Z", "url": "https://files.pythonhosted.org/packages/ab/96/f3bb4749098a0bda8936ef41ceecde7bb376ad56cbc918b183e3b091f13e/jobs_done10-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1a25c53599aedfb06e97006b2fb9e34f", "sha256": "23ebb37b6c75e8c7e74bba0c346a040c7bfffb0b2bd06bc7f0c2db9b5979cb27"}, "downloads": -1, "filename": "jobs_done10-1.0.2.tar.gz", "has_sig": false, "md5_digest": "1a25c53599aedfb06e97006b2fb9e34f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 51524, "upload_time": "2018-06-26T11:24:08", "upload_time_iso_8601": "2018-06-26T11:24:08.616575Z", "url": "https://files.pythonhosted.org/packages/ae/e0/8d7f404ad39c24b54f5c8c59748fb0d209bb9eb62c5d2abb205eabdb4d54/jobs_done10-1.0.2.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "011096a0d4784e5cf4ea3e9afe8f626b", "sha256": "01e4e71b27f7e8cfc74017ccff91d3bb9d4c4a30a90d6a7e533f3c74cbc41d5c"}, "downloads": -1, "filename": "jobs_done10-1.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "011096a0d4784e5cf4ea3e9afe8f626b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 55250, "upload_time": "2018-06-26T11:43:11", "upload_time_iso_8601": "2018-06-26T11:43:11.228973Z", "url": "https://files.pythonhosted.org/packages/f3/01/749798ebf8f570ad43761b7a584eb93ec9c5237439ea501c12c55d3cf420/jobs_done10-1.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "086b1f1029c800993fcb379ccebde56d", "sha256": "2caf9febf539bbd8e8252d286e4b745a12c0f864e212779294ac8356daeca45f"}, "downloads": -1, "filename": "jobs_done10-1.0.4.tar.gz", "has_sig": false, "md5_digest": "086b1f1029c800993fcb379ccebde56d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 57738, "upload_time": "2018-06-26T11:43:12", "upload_time_iso_8601": "2018-06-26T11:43:12.425095Z", "url": "https://files.pythonhosted.org/packages/4b/77/31c04e71302c4252d5db8e54c082dad864424e8367b38ff277e9d4188ca4/jobs_done10-1.0.4.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "f2d21860c5970d2bd2552591baf2b8a7", "sha256": "fac1977b3932c8b7f9a7f935291e1f6b97154c18d1e79de9f2d414cb84354304"}, "downloads": -1, "filename": "jobs_done10-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f2d21860c5970d2bd2552591baf2b8a7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 55717, "upload_time": "2018-06-27T11:50:54", "upload_time_iso_8601": "2018-06-27T11:50:54.514981Z", "url": "https://files.pythonhosted.org/packages/61/ec/6c986654b9c24e44d87dbb2480057811d30e9e1697546f9cc89b044f77c7/jobs_done10-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e123085e12d72dfca7809c9af9ec24aa", "sha256": "a2e67a09ac500c19574e1a9c438620b3378ab73480fbd650555da27369b282c7"}, "downloads": -1, "filename": "jobs_done10-1.1.0.tar.gz", "has_sig": false, "md5_digest": "e123085e12d72dfca7809c9af9ec24aa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 58629, "upload_time": "2018-06-27T11:50:55", "upload_time_iso_8601": "2018-06-27T11:50:55.873828Z", "url": "https://files.pythonhosted.org/packages/43/cd/cada5c1cff62db9cb347de1acef0031786aea379d754ce46e11b51ff3ef7/jobs_done10-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "6637ec689f54d80f0739fe0840e2ded8", "sha256": "aadd9a9508b5882bf617ed7f6fb0807d8e619d0382769a3e19de39930060e7af"}, "downloads": -1, "filename": "jobs_done10-1.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "6637ec689f54d80f0739fe0840e2ded8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 55760, "upload_time": "2018-09-01T01:16:46", "upload_time_iso_8601": "2018-09-01T01:16:46.977887Z", "url": "https://files.pythonhosted.org/packages/9a/fe/f357b42e05d185e4e4fb4278375ce603880e2ac85b5a38398d80f57c7e84/jobs_done10-1.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6be4991e223070d877ccf0263a96ac52", "sha256": "3712b9da1fa8c71e4e946184503529a1d1b4529beb46b0b96080a81f69ca3e5f"}, "downloads": -1, "filename": "jobs_done10-1.1.1.tar.gz", "has_sig": false, "md5_digest": "6be4991e223070d877ccf0263a96ac52", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 58780, "upload_time": "2018-09-01T01:16:48", "upload_time_iso_8601": "2018-09-01T01:16:48.161475Z", "url": "https://files.pythonhosted.org/packages/b5/97/3659b5740de0ab0268a20c73daefdc10b969422af947f96fbaf3341303ac/jobs_done10-1.1.1.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "6b02f8c4b8d9ad9f2d19a71fda038f10", "sha256": "553a95f894acd15f917ec6d4a5ae4cf9f412d71149658acfb7c032899bc1d656"}, "downloads": -1, "filename": "jobs_done10-1.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6b02f8c4b8d9ad9f2d19a71fda038f10", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 57538, "upload_time": "2019-09-11T17:08:12", "upload_time_iso_8601": "2019-09-11T17:08:12.582778Z", "url": "https://files.pythonhosted.org/packages/d2/5c/493cb213868c2fa25ed4e7c5d852a2a6183b586954a3a09f47915d7c6fa5/jobs_done10-1.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2b0f0093c693ac2c4946e6cc8efea795", "sha256": "6f454412abde0e070712238ff1f2db1c93f94453cfad8240a14bd8a924b6b82d"}, "downloads": -1, "filename": "jobs_done10-1.2.0.tar.gz", "has_sig": false, "md5_digest": "2b0f0093c693ac2c4946e6cc8efea795", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 56642, "upload_time": "2019-09-11T17:08:14", "upload_time_iso_8601": "2019-09-11T17:08:14.587927Z", "url": "https://files.pythonhosted.org/packages/d5/f5/1ed39377bf8e56bc89740273782fb9898950c518a7e0641e33c738079783/jobs_done10-1.2.0.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "7fed4932dce8a43f932ef5d75d828617", "sha256": "bc6651588664caa369efbedfd175314a8abcd9e271c86e551ee10ce2b2e1f88f"}, "downloads": -1, "filename": "jobs_done10-1.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "7fed4932dce8a43f932ef5d75d828617", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 56942, "upload_time": "2020-04-22T17:12:33", "upload_time_iso_8601": "2020-04-22T17:12:33.439420Z", "url": "https://files.pythonhosted.org/packages/28/28/ca50b161e8ce81f693a94382b71de7ae6317f63c8719734e8900a66f4b43/jobs_done10-1.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2adfe89bbfa9b0c6acc0eb143cc6c38d", "sha256": "8755109e01dfdcc901e52b34d7a9ae510002b14dea94ee7aeac79b58fe823782"}, "downloads": -1, "filename": "jobs_done10-1.2.1.tar.gz", "has_sig": false, "md5_digest": "2adfe89bbfa9b0c6acc0eb143cc6c38d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 56542, "upload_time": "2020-04-22T17:12:34", "upload_time_iso_8601": "2020-04-22T17:12:34.996497Z", "url": "https://files.pythonhosted.org/packages/9f/58/45c152059d2c42c8ca6dce86fa7f85f2763446d23c4506a948d93e39cd90/jobs_done10-1.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7fed4932dce8a43f932ef5d75d828617", "sha256": "bc6651588664caa369efbedfd175314a8abcd9e271c86e551ee10ce2b2e1f88f"}, "downloads": -1, "filename": "jobs_done10-1.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "7fed4932dce8a43f932ef5d75d828617", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 56942, "upload_time": "2020-04-22T17:12:33", "upload_time_iso_8601": "2020-04-22T17:12:33.439420Z", "url": "https://files.pythonhosted.org/packages/28/28/ca50b161e8ce81f693a94382b71de7ae6317f63c8719734e8900a66f4b43/jobs_done10-1.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2adfe89bbfa9b0c6acc0eb143cc6c38d", "sha256": "8755109e01dfdcc901e52b34d7a9ae510002b14dea94ee7aeac79b58fe823782"}, "downloads": -1, "filename": "jobs_done10-1.2.1.tar.gz", "has_sig": false, "md5_digest": "2adfe89bbfa9b0c6acc0eb143cc6c38d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 56542, "upload_time": "2020-04-22T17:12:34", "upload_time_iso_8601": "2020-04-22T17:12:34.996497Z", "url": "https://files.pythonhosted.org/packages/9f/58/45c152059d2c42c8ca6dce86fa7f85f2763446d23c4506a948d93e39cd90/jobs_done10-1.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:18 2020"}