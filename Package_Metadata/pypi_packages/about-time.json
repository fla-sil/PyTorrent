{"info": {"author": "Rog\u00e9rio Sampaio de Almeida", "author_email": "rsalmei@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "[![Coverage](https://img.shields.io/badge/coverage-100%25-green.svg)]()\n[![Maintenance](https://img.shields.io/badge/Maintained%3F-yes-green.svg)](https://GitHub.com/rsalmei/about-time/graphs/commit-activity)\n[![PyPI version](https://img.shields.io/pypi/v/about-time.svg)](https://pypi.python.org/pypi/about-time/)\n[![PyPI pyversions](https://img.shields.io/pypi/pyversions/about-time.svg)](https://pypi.python.org/pypi/about-time/)\n[![PyPI status](https://img.shields.io/pypi/status/about-time.svg)](https://pypi.python.org/pypi/about-time/)\n\n\n# about-time\n## Easily measure timing and throughput of code blocks, with beautiful human friendly representations.\n\n\n## What does it do?\n\nDid you ever need to log the duration of an operation? Yeah, this is easy, but:\n- log the duration of two or more operations at the same time, including the whole duration?\n- instrument a code to retrieve time metrics to send to a log or time series database?\n- easily see durations with units like *us* microseconds and *ms* milliseconds?\n- easily see the throughput of a bottleneck in items/second to benchmark a refactoring?\n\nYes, it can get kinda complex, and even while doable, it will for sure taint your code and make you lose focus.\n\nI have the solution, behold!\n\n```python\nimport time\nfrom about_time import about_time\n\ndef func():\n    time.sleep(85e-3)\n    return True\n\nwith about_time() as at1:\n    at2 = about_time(func)\n\n    at3 = about_time(x * 2 for x in range(5))\n    data = [x for x in at3]\n\n\nprint('total:', at1.duration_human)\nprint(' func:', at2.duration_human, '->', at2.result)\nprint(' iter:', at3.duration_human, 'count:', at3.count, '@', at3.throughput_human, '->', data)\n```\n\nThis prints:\n```\ntotal: 85.12ms\n func: 85.04ms -> True\n iter: 6.68us count: 5 @ 748614.98/s -> [0, 2, 4, 6, 8]\n```\n\nHow cool is that? \ud83d\ude32\n\nIt's much nicer to see `85.12ms` instead of this right?\n\n```\nIn [7]: at1.duration\nOut[7]: 0.08511673200064251\n```\n\nSo, `about_time` measures code blocks, both time and throughput, and converts to beautiful human friendly representations! \ud83d\udc4f\n\n\n## Install it\n\nJust do in your python venv:\n\n```bash\n$ pip install about-time\n```\n\n\n## Use it\n\nThere's three modes of operation: context manager, callable and throughput. Let's dive in.\n\n\n### 1. Use it like a context manager:\n\n```python\nfrom about_time import about_time\n\nwith about_time() as at:\n    # the code to be measured...\n\nprint('The whole block took:', at.duration_human)\n```\n\nThis way you can nicely wrap any amount of code.\n\n> In this mode, there are the basic fields `duration` and `duration_human`.\n\n\n### 2. Use it with a callable:\n\n```python\nfrom about_time import about_time\n\nat = about_time(some_func)\n\nprint('The result was:', at.result, 'and took:', at.duration_human)\n```\n\nThis way you have a one liner, and do not need to increase the indent of your code.\n\n> In this mode, there is the field `result`, in addition to the basic ones.\n\n\n### 3. Use it with an iterable or generator:\n\n```python\nfrom about_time import about_time\n\nat = about_time(iterable)\nfor item in at:\n    # process item.\n\nprint('The whole block took:', at.duration_human)\nprint('Total items processed:', at.count)\nprint('Throughput:', at.throughput_human)\n```\n\nThis way `about_time` can extract iterations info, and together with the duration info, calculates the throughput of the whole loop! Specially useful with generators, which do not have length.\n\n> In this mode, there are the fields `count` and `throughput_human`, in addition to the basic ones.\n\nNote:\n- you can send even generator expressions, anything that is iterable to python!\n- you can consume not only in a `for` loop, but also in comprehensions, `map()`s, `filter()`s, `sum()`s, `max()`s, `list()`s, etc, thus any function that expects an iterator!\n\n> Cool tricks under the hood:\n> - the timer only triggers when the first element is queried, so you can initialize whatever you need before entering the loop!\n> - the `count` and `throughput_human` methods are updated in *real time*, so you can use them even inside the loop!\n\n\n## Humans are first class citizens :)\n\n### duration\n\nI've considered two key concepts in designing the human friendly features: `3.44s` is more meaningful than `3.43584783784s`, and `14.12us` is much nicer than `.0000141233333s`. So what I do is: round values to at most two decimal places, and find the best scale unit to represent them, minimizing resulting values smaller than `1`.\n\n> The search for the best unit considers even the rounding been applied! So for example `0.999999` does not end up like `999.99us` (truncate) nor `1000.0us` (bad unit), but is auto-upgraded to the next unit `1.0ms`!\n\nThe `duration_human` ranges seamlessly from nanoseconds to hours. Values smaller than 60 seconds are rendered with at most two decimal digits as \"DDD.D[D]xs\", and above 1 minute it changes to \"hours:minutes:seconds.M\".\n\nMuch more humanly humm? ;)\n\nduration (float seconds) | duration_human\n:---: | :---:\n.00000000185 | '1.85ns'\n.000000999996 | '1.0us'\n.00001 | '10.0us'\n.0000156 | '15.6us'\n.01 | '10.0ms'\n.0141233333333 | '14.12ms'\n.1099999 | '110.0ms'\n.1599999 | '160.0ms'\n.8015 | '801.5ms'\n3.434999 | '3.43s'\n59.999 | '0:01:00'\n68.5 | '0:01:08.5'\n125.825 | '0:02:05.8'\n4488.395 | '1:14:48.4'\n\n\n### throughput\n\nI've made the `throughput_human` with a similar logic. It is funny how much trickier \"throughput\" is to the human brain! For example if something took \"1165263 seconds\" to handle \"123 items\", how fast did it go? It's not obvious...\n\nEven dividing the duration by the number of items, we get \"9473 seconds/item\", which also do not mean much. To make some sense of it we need to divide again by 3600 (seconds in an hour) to finally get \"2.63 hours/item\", which is much better. But throughput is the inverse of that (items/time), so `about_time` nicely returns it as `0.38/h`... Now we know how fast was that process!\n\n> `about_time` has per-second, per-minute and per-hour units.\n\nduration (float seconds) | number of elements | throughput_human\n:---: | :---: | :---:\n1\\. | 10 | '10.0/s'\n1\\. | 2500 | '2500.0/s'\n2\\. | 1 | '30.0/m'\n2\\. | 10 | '5.0/s'\n1.981981981981982 | 11 | '5.55/s'\n100\\. | 10 | '6.0/m'\n1600\\. | 3 | '6.75/h'\n.99 | 1 | '1.01/s'\n1165263\\. | 123 | '0.38/h'\n\n\n### Accuracy\n\n`about_time` supports all versions of python, but in pythons >= `3.3` it performs better with much higher resolution and smaller propagating of errors, thanks to the new `time.perf_counter`. In older versions, it uses `time.time` as usual.\n\n\n## Changelog highlights:\n- 3.0.0: greatly improved the counter/throughput mode, with a single argument and working in real time\n- 2.0.0: feature complete, addition of callable and throughput modes\n- 1.0.0: first public release, context manager mode\n\n\n## License\nThis software is licensed under the MIT License. See the LICENSE file in the top distribution directory for the full license text.\n\n\n## Nice huh?\n\nThank you for your interest!\n\nI've put much \u2764\ufe0f and effort into this.\n\nI wish you have fun using this tool! :)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/rsalmei/about-time", "keywords": "python,track,tracker,time,code,blocks,statistics,analytics", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "about-time", "package_url": "https://pypi.org/project/about-time/", "platform": "", "project_url": "https://pypi.org/project/about-time/", "project_urls": {"Homepage": "https://github.com/rsalmei/about-time"}, "release_url": "https://pypi.org/project/about-time/3.0.0/", "requires_dist": null, "requires_python": "", "summary": "Easily measure timing and throughput of code blocks, with beautiful human friendly representations.", "version": "3.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"\" rel=\"nofollow\"><img alt=\"Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e5fb2a969fc838da897b1188eda6dc0ca8f283d4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f7665726167652d3130302532352d677265656e2e737667\"></a>\n<a href=\"https://GitHub.com/rsalmei/about-time/graphs/commit-activity\" rel=\"nofollow\"><img alt=\"Maintenance\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/90bf1b2a4d99698c4dffbc494b9734690a777fec/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4d61696e7461696e65642533462d7965732d677265656e2e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/about-time/\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/70d660833d538dfa410313b889e5adc5c6bd3ed6/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f61626f75742d74696d652e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/about-time/\" rel=\"nofollow\"><img alt=\"PyPI pyversions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f5d7a4c4b8ad63641c7f9d4f4eea77ec736b7eb8/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f61626f75742d74696d652e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/about-time/\" rel=\"nofollow\"><img alt=\"PyPI status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7de8dc771b9f3c1c79bd45dacf64e021d79903f9/68747470733a2f2f696d672e736869656c64732e696f2f707970692f7374617475732f61626f75742d74696d652e737667\"></a></p>\n<h1>about-time</h1>\n<h2>Easily measure timing and throughput of code blocks, with beautiful human friendly representations.</h2>\n<h2>What does it do?</h2>\n<p>Did you ever need to log the duration of an operation? Yeah, this is easy, but:</p>\n<ul>\n<li>log the duration of two or more operations at the same time, including the whole duration?</li>\n<li>instrument a code to retrieve time metrics to send to a log or time series database?</li>\n<li>easily see durations with units like <em>us</em> microseconds and <em>ms</em> milliseconds?</li>\n<li>easily see the throughput of a bottleneck in items/second to benchmark a refactoring?</li>\n</ul>\n<p>Yes, it can get kinda complex, and even while doable, it will for sure taint your code and make you lose focus.</p>\n<p>I have the solution, behold!</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">from</span> <span class=\"nn\">about_time</span> <span class=\"kn\">import</span> <span class=\"n\">about_time</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">():</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">85e-3</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n<span class=\"k\">with</span> <span class=\"n\">about_time</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">at1</span><span class=\"p\">:</span>\n    <span class=\"n\">at2</span> <span class=\"o\">=</span> <span class=\"n\">about_time</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">)</span>\n\n    <span class=\"n\">at3</span> <span class=\"o\">=</span> <span class=\"n\">about_time</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"mi\">2</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">))</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">x</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">at3</span><span class=\"p\">]</span>\n\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'total:'</span><span class=\"p\">,</span> <span class=\"n\">at1</span><span class=\"o\">.</span><span class=\"n\">duration_human</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">' func:'</span><span class=\"p\">,</span> <span class=\"n\">at2</span><span class=\"o\">.</span><span class=\"n\">duration_human</span><span class=\"p\">,</span> <span class=\"s1\">'-&gt;'</span><span class=\"p\">,</span> <span class=\"n\">at2</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">' iter:'</span><span class=\"p\">,</span> <span class=\"n\">at3</span><span class=\"o\">.</span><span class=\"n\">duration_human</span><span class=\"p\">,</span> <span class=\"s1\">'count:'</span><span class=\"p\">,</span> <span class=\"n\">at3</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">,</span> <span class=\"s1\">'@'</span><span class=\"p\">,</span> <span class=\"n\">at3</span><span class=\"o\">.</span><span class=\"n\">throughput_human</span><span class=\"p\">,</span> <span class=\"s1\">'-&gt;'</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">)</span>\n</pre>\n<p>This prints:</p>\n<pre><code>total: 85.12ms\n func: 85.04ms -&gt; True\n iter: 6.68us count: 5 @ 748614.98/s -&gt; [0, 2, 4, 6, 8]\n</code></pre>\n<p>How cool is that? \ud83d\ude32</p>\n<p>It's much nicer to see <code>85.12ms</code> instead of this right?</p>\n<pre><code>In [7]: at1.duration\nOut[7]: 0.08511673200064251\n</code></pre>\n<p>So, <code>about_time</code> measures code blocks, both time and throughput, and converts to beautiful human friendly representations! \ud83d\udc4f</p>\n<h2>Install it</h2>\n<p>Just do in your python venv:</p>\n<pre>$ pip install about-time\n</pre>\n<h2>Use it</h2>\n<p>There's three modes of operation: context manager, callable and throughput. Let's dive in.</p>\n<h3>1. Use it like a context manager:</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">about_time</span> <span class=\"kn\">import</span> <span class=\"n\">about_time</span>\n\n<span class=\"k\">with</span> <span class=\"n\">about_time</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">at</span><span class=\"p\">:</span>\n    <span class=\"c1\"># the code to be measured...</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'The whole block took:'</span><span class=\"p\">,</span> <span class=\"n\">at</span><span class=\"o\">.</span><span class=\"n\">duration_human</span><span class=\"p\">)</span>\n</pre>\n<p>This way you can nicely wrap any amount of code.</p>\n<blockquote>\n<p>In this mode, there are the basic fields <code>duration</code> and <code>duration_human</code>.</p>\n</blockquote>\n<h3>2. Use it with a callable:</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">about_time</span> <span class=\"kn\">import</span> <span class=\"n\">about_time</span>\n\n<span class=\"n\">at</span> <span class=\"o\">=</span> <span class=\"n\">about_time</span><span class=\"p\">(</span><span class=\"n\">some_func</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'The result was:'</span><span class=\"p\">,</span> <span class=\"n\">at</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"s1\">'and took:'</span><span class=\"p\">,</span> <span class=\"n\">at</span><span class=\"o\">.</span><span class=\"n\">duration_human</span><span class=\"p\">)</span>\n</pre>\n<p>This way you have a one liner, and do not need to increase the indent of your code.</p>\n<blockquote>\n<p>In this mode, there is the field <code>result</code>, in addition to the basic ones.</p>\n</blockquote>\n<h3>3. Use it with an iterable or generator:</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">about_time</span> <span class=\"kn\">import</span> <span class=\"n\">about_time</span>\n\n<span class=\"n\">at</span> <span class=\"o\">=</span> <span class=\"n\">about_time</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">at</span><span class=\"p\">:</span>\n    <span class=\"c1\"># process item.</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'The whole block took:'</span><span class=\"p\">,</span> <span class=\"n\">at</span><span class=\"o\">.</span><span class=\"n\">duration_human</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Total items processed:'</span><span class=\"p\">,</span> <span class=\"n\">at</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Throughput:'</span><span class=\"p\">,</span> <span class=\"n\">at</span><span class=\"o\">.</span><span class=\"n\">throughput_human</span><span class=\"p\">)</span>\n</pre>\n<p>This way <code>about_time</code> can extract iterations info, and together with the duration info, calculates the throughput of the whole loop! Specially useful with generators, which do not have length.</p>\n<blockquote>\n<p>In this mode, there are the fields <code>count</code> and <code>throughput_human</code>, in addition to the basic ones.</p>\n</blockquote>\n<p>Note:</p>\n<ul>\n<li>you can send even generator expressions, anything that is iterable to python!</li>\n<li>you can consume not only in a <code>for</code> loop, but also in comprehensions, <code>map()</code>s, <code>filter()</code>s, <code>sum()</code>s, <code>max()</code>s, <code>list()</code>s, etc, thus any function that expects an iterator!</li>\n</ul>\n<blockquote>\n<p>Cool tricks under the hood:</p>\n<ul>\n<li>the timer only triggers when the first element is queried, so you can initialize whatever you need before entering the loop!</li>\n<li>the <code>count</code> and <code>throughput_human</code> methods are updated in <em>real time</em>, so you can use them even inside the loop!</li>\n</ul>\n</blockquote>\n<h2>Humans are first class citizens :)</h2>\n<h3>duration</h3>\n<p>I've considered two key concepts in designing the human friendly features: <code>3.44s</code> is more meaningful than <code>3.43584783784s</code>, and <code>14.12us</code> is much nicer than <code>.0000141233333s</code>. So what I do is: round values to at most two decimal places, and find the best scale unit to represent them, minimizing resulting values smaller than <code>1</code>.</p>\n<blockquote>\n<p>The search for the best unit considers even the rounding been applied! So for example <code>0.999999</code> does not end up like <code>999.99us</code> (truncate) nor <code>1000.0us</code> (bad unit), but is auto-upgraded to the next unit <code>1.0ms</code>!</p>\n</blockquote>\n<p>The <code>duration_human</code> ranges seamlessly from nanoseconds to hours. Values smaller than 60 seconds are rendered with at most two decimal digits as \"DDD.D[D]xs\", and above 1 minute it changes to \"hours:minutes:seconds.M\".</p>\n<p>Much more humanly humm? ;)</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">duration (float seconds)</th>\n<th align=\"center\">duration_human</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">.00000000185</td>\n<td align=\"center\">'1.85ns'</td>\n</tr>\n<tr>\n<td align=\"center\">.000000999996</td>\n<td align=\"center\">'1.0us'</td>\n</tr>\n<tr>\n<td align=\"center\">.00001</td>\n<td align=\"center\">'10.0us'</td>\n</tr>\n<tr>\n<td align=\"center\">.0000156</td>\n<td align=\"center\">'15.6us'</td>\n</tr>\n<tr>\n<td align=\"center\">.01</td>\n<td align=\"center\">'10.0ms'</td>\n</tr>\n<tr>\n<td align=\"center\">.0141233333333</td>\n<td align=\"center\">'14.12ms'</td>\n</tr>\n<tr>\n<td align=\"center\">.1099999</td>\n<td align=\"center\">'110.0ms'</td>\n</tr>\n<tr>\n<td align=\"center\">.1599999</td>\n<td align=\"center\">'160.0ms'</td>\n</tr>\n<tr>\n<td align=\"center\">.8015</td>\n<td align=\"center\">'801.5ms'</td>\n</tr>\n<tr>\n<td align=\"center\">3.434999</td>\n<td align=\"center\">'3.43s'</td>\n</tr>\n<tr>\n<td align=\"center\">59.999</td>\n<td align=\"center\">'0:01:00'</td>\n</tr>\n<tr>\n<td align=\"center\">68.5</td>\n<td align=\"center\">'0:01:08.5'</td>\n</tr>\n<tr>\n<td align=\"center\">125.825</td>\n<td align=\"center\">'0:02:05.8'</td>\n</tr>\n<tr>\n<td align=\"center\">4488.395</td>\n<td align=\"center\">'1:14:48.4'</td>\n</tr></tbody></table>\n<h3>throughput</h3>\n<p>I've made the <code>throughput_human</code> with a similar logic. It is funny how much trickier \"throughput\" is to the human brain! For example if something took \"1165263 seconds\" to handle \"123 items\", how fast did it go? It's not obvious...</p>\n<p>Even dividing the duration by the number of items, we get \"9473 seconds/item\", which also do not mean much. To make some sense of it we need to divide again by 3600 (seconds in an hour) to finally get \"2.63 hours/item\", which is much better. But throughput is the inverse of that (items/time), so <code>about_time</code> nicely returns it as <code>0.38/h</code>... Now we know how fast was that process!</p>\n<blockquote>\n<p><code>about_time</code> has per-second, per-minute and per-hour units.</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"center\">duration (float seconds)</th>\n<th align=\"center\">number of elements</th>\n<th align=\"center\">throughput_human</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">1.</td>\n<td align=\"center\">10</td>\n<td align=\"center\">'10.0/s'</td>\n</tr>\n<tr>\n<td align=\"center\">1.</td>\n<td align=\"center\">2500</td>\n<td align=\"center\">'2500.0/s'</td>\n</tr>\n<tr>\n<td align=\"center\">2.</td>\n<td align=\"center\">1</td>\n<td align=\"center\">'30.0/m'</td>\n</tr>\n<tr>\n<td align=\"center\">2.</td>\n<td align=\"center\">10</td>\n<td align=\"center\">'5.0/s'</td>\n</tr>\n<tr>\n<td align=\"center\">1.981981981981982</td>\n<td align=\"center\">11</td>\n<td align=\"center\">'5.55/s'</td>\n</tr>\n<tr>\n<td align=\"center\">100.</td>\n<td align=\"center\">10</td>\n<td align=\"center\">'6.0/m'</td>\n</tr>\n<tr>\n<td align=\"center\">1600.</td>\n<td align=\"center\">3</td>\n<td align=\"center\">'6.75/h'</td>\n</tr>\n<tr>\n<td align=\"center\">.99</td>\n<td align=\"center\">1</td>\n<td align=\"center\">'1.01/s'</td>\n</tr>\n<tr>\n<td align=\"center\">1165263.</td>\n<td align=\"center\">123</td>\n<td align=\"center\">'0.38/h'</td>\n</tr></tbody></table>\n<h3>Accuracy</h3>\n<p><code>about_time</code> supports all versions of python, but in pythons &gt;= <code>3.3</code> it performs better with much higher resolution and smaller propagating of errors, thanks to the new <code>time.perf_counter</code>. In older versions, it uses <code>time.time</code> as usual.</p>\n<h2>Changelog highlights:</h2>\n<ul>\n<li>3.0.0: greatly improved the counter/throughput mode, with a single argument and working in real time</li>\n<li>2.0.0: feature complete, addition of callable and throughput modes</li>\n<li>1.0.0: first public release, context manager mode</li>\n</ul>\n<h2>License</h2>\n<p>This software is licensed under the MIT License. See the LICENSE file in the top distribution directory for the full license text.</p>\n<h2>Nice huh?</h2>\n<p>Thank you for your interest!</p>\n<p>I've put much \u2764\ufe0f and effort into this.</p>\n<p>I wish you have fun using this tool! :)</p>\n\n          </div>"}, "last_serial": 6789896, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "8bbfe9bf7d55f496f874d2df81b3159f", "sha256": "62c89a11a6f95e76a086a2affa1733e063a62c8253a7abf514803dab576bfcb5"}, "downloads": -1, "filename": "about_time-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "8bbfe9bf7d55f496f874d2df81b3159f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3278, "upload_time": "2018-08-21T01:32:06", "upload_time_iso_8601": "2018-08-21T01:32:06.043160Z", "url": "https://files.pythonhosted.org/packages/a6/43/7f16965f10fa3c1fc0c9e1b41e68b2b1f22a15c6c7a2c66c7b0af6c7b441/about_time-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7d3c48558ee15abbb2affcd29db4d19f", "sha256": "a753f93acfe67b280e2a074e24528654b262a58d1bf3ff82c00aa23984490725"}, "downloads": -1, "filename": "about-time-1.0.0.tar.gz", "has_sig": false, "md5_digest": "7d3c48558ee15abbb2affcd29db4d19f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3091, "upload_time": "2018-08-21T01:32:07", "upload_time_iso_8601": "2018-08-21T01:32:07.149546Z", "url": "https://files.pythonhosted.org/packages/1a/2c/1710aaf95374b9137a0a747bca91d26cfd2c443252820a82f517e65945ec/about-time-1.0.0.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "32feb68c69b1ee249e95b587ac3648cd", "sha256": "c86ff8b3c7fa64ee29c0e0a5cc44b25f1bd75dfd214c7ed8b17d8915cc95fc14"}, "downloads": -1, "filename": "about_time-2.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "32feb68c69b1ee249e95b587ac3648cd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5458, "upload_time": "2018-08-26T22:48:01", "upload_time_iso_8601": "2018-08-26T22:48:01.908113Z", "url": "https://files.pythonhosted.org/packages/27/36/240f58d780065f7ad6d410d3adc6207c9a6e18e88f33ecb19311baf59c57/about_time-2.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "acf4026ece5a058da485564647e49f41", "sha256": "256b5c0b6e808ea47a771bc4dde1de42afa967f8441cedba3e4d81f6b8ad0258"}, "downloads": -1, "filename": "about-time-2.0.0.tar.gz", "has_sig": false, "md5_digest": "acf4026ece5a058da485564647e49f41", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5271, "upload_time": "2018-08-26T22:48:03", "upload_time_iso_8601": "2018-08-26T22:48:03.336789Z", "url": "https://files.pythonhosted.org/packages/88/5e/ccb7a0de0ced3ba23d4f0888c191ca7fb840385ad575491a2c8f82fba702/about-time-2.0.0.tar.gz", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "728272e1aab3f111fb6900d752cfacbb", "sha256": "63e0337630950d4f0fd46b5eae72c310f70363ed516ce1824b3e55ca80d47b0d"}, "downloads": -1, "filename": "about_time-2.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "728272e1aab3f111fb6900d752cfacbb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5500, "upload_time": "2018-08-26T23:36:26", "upload_time_iso_8601": "2018-08-26T23:36:26.277241Z", "url": "https://files.pythonhosted.org/packages/a5/f0/454cfffc872564c81f385ee4959f7cf6b867e4a25a460cb4ef52a3c7d3cd/about_time-2.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f6d77e5ac21e5d3d9f413c3764159645", "sha256": "08818a4d47e7ffc5a0b1a82f48638a8eafc2c7898df26defaeeac41b61adc497"}, "downloads": -1, "filename": "about-time-2.0.1.tar.gz", "has_sig": false, "md5_digest": "f6d77e5ac21e5d3d9f413c3764159645", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5308, "upload_time": "2018-08-26T23:36:27", "upload_time_iso_8601": "2018-08-26T23:36:27.663016Z", "url": "https://files.pythonhosted.org/packages/0c/a5/2bb512eb30aab119b9181ca6d8d44a9ea01eab9029092801ad815e57591c/about-time-2.0.1.tar.gz", "yanked": false}], "2.0.2": [{"comment_text": "", "digests": {"md5": "791877e91f694cf1eb54d91ec1eeec30", "sha256": "6ff5d2eaca2fb5070f35503a3fffc396cad49c60bf7b63ffd9af6d54765e5542"}, "downloads": -1, "filename": "about_time-2.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "791877e91f694cf1eb54d91ec1eeec30", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5523, "upload_time": "2018-08-27T00:10:45", "upload_time_iso_8601": "2018-08-27T00:10:45.331931Z", "url": "https://files.pythonhosted.org/packages/13/63/165dd8768f4d29d729869bb90372e8459f4023e3addf8f1551b54fda1bef/about_time-2.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "52bc5b6b482c46b496c0d681c273c3d0", "sha256": "9b4cc9caf874ae596493e99e474ba4b348bf8ab937dbca664927d8038e431b42"}, "downloads": -1, "filename": "about-time-2.0.2.tar.gz", "has_sig": false, "md5_digest": "52bc5b6b482c46b496c0d681c273c3d0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5316, "upload_time": "2018-08-27T00:10:46", "upload_time_iso_8601": "2018-08-27T00:10:46.872077Z", "url": "https://files.pythonhosted.org/packages/16/b9/f9106f953c594dc0cb82811c3494f9aaa3ec11a154e2266ef3059b642bf8/about-time-2.0.2.tar.gz", "yanked": false}], "2.0.3": [{"comment_text": "", "digests": {"md5": "d52d4fd02ad41b838b695e7fb3b373f7", "sha256": "f049148caf6b057c8d6c701598f8206aaf04a82645a2dd7834361b08fa60445a"}, "downloads": -1, "filename": "about_time-2.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "d52d4fd02ad41b838b695e7fb3b373f7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5532, "upload_time": "2018-08-27T00:28:15", "upload_time_iso_8601": "2018-08-27T00:28:15.031542Z", "url": "https://files.pythonhosted.org/packages/fe/02/fe9119e09e440ce9752f7a65110b372ba1bdb5a65d87138ae700a5fc50e2/about_time-2.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bd881fc57c9d650ce276e2f93bce1ba7", "sha256": "711777f958dc1a3dd3be940b758946f2f12787dd0554c0414213165223b0637f"}, "downloads": -1, "filename": "about-time-2.0.3.tar.gz", "has_sig": false, "md5_digest": "bd881fc57c9d650ce276e2f93bce1ba7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5330, "upload_time": "2018-08-27T00:28:16", "upload_time_iso_8601": "2018-08-27T00:28:16.670584Z", "url": "https://files.pythonhosted.org/packages/0f/16/999db6adf76a9fb32bec1d7b7bee5695fac98f751351e2c77a6886939d51/about-time-2.0.3.tar.gz", "yanked": false}], "2.0.4": [{"comment_text": "", "digests": {"md5": "3a621eb315dfdf839a937e90f9d8b241", "sha256": "f943e04f0cce774eeda0d77280fc346bd4a9a10d0a12d2ba16e4de02484f911a"}, "downloads": -1, "filename": "about_time-2.0.4-py2-none-any.whl", "has_sig": false, "md5_digest": "3a621eb315dfdf839a937e90f9d8b241", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 5532, "upload_time": "2018-08-27T00:55:32", "upload_time_iso_8601": "2018-08-27T00:55:32.091237Z", "url": "https://files.pythonhosted.org/packages/a1/2d/455910a45124d6797141648a2e0d37509f13f84fdb4025d56f649848df64/about_time-2.0.4-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1aef99f0b20ee2d8f4817fdf71eaba5c", "sha256": "f667adfa350dff845606a0dad142e55ae267bbdad82f4b73cdc24157cef9408b"}, "downloads": -1, "filename": "about-time-2.0.4.tar.gz", "has_sig": false, "md5_digest": "1aef99f0b20ee2d8f4817fdf71eaba5c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5337, "upload_time": "2018-08-27T00:55:33", "upload_time_iso_8601": "2018-08-27T00:55:33.992568Z", "url": "https://files.pythonhosted.org/packages/46/b3/8fc2bb89f23cdeca9e8e3beab65e724cd4d120128c66c1605c0b6e3da2cf/about-time-2.0.4.tar.gz", "yanked": false}], "2.0.5": [{"comment_text": "", "digests": {"md5": "ffcb0400d1110423c4340d811c722226", "sha256": "460cb6bded44d0f2c750e446e5b0809334b49d7078c4751ad265633acbc5bffb"}, "downloads": -1, "filename": "about_time-2.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "ffcb0400d1110423c4340d811c722226", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5831, "upload_time": "2018-10-25T03:17:27", "upload_time_iso_8601": "2018-10-25T03:17:27.594644Z", "url": "https://files.pythonhosted.org/packages/c7/83/ccbc4bf91dfa5c3e740a59c494ed07a23c8f5165d5cc0600fd74579eecc1/about_time-2.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c07c169566e9a04b49d4e3a26e52afbc", "sha256": "99931c505a9166910b6639a91fd6f90d24ccc87fa82030a05a4e2628ecddac5d"}, "downloads": -1, "filename": "about-time-2.0.5.tar.gz", "has_sig": false, "md5_digest": "c07c169566e9a04b49d4e3a26e52afbc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5699, "upload_time": "2018-10-25T03:17:29", "upload_time_iso_8601": "2018-10-25T03:17:29.344874Z", "url": "https://files.pythonhosted.org/packages/0b/51/5b1e954bbc3a27c7e5c5492d775fccba45288d6b781135d039d1882bfee0/about-time-2.0.5.tar.gz", "yanked": false}], "3.0.0": [{"comment_text": "", "digests": {"md5": "667d56342644d7df2ab173a5652d0e63", "sha256": "a4ff6f43e3f8285b552176b89852d230590dd37a318ccec0e185d085c5798c01"}, "downloads": -1, "filename": "about_time-3.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "667d56342644d7df2ab173a5652d0e63", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7071, "upload_time": "2020-03-11T05:53:36", "upload_time_iso_8601": "2020-03-11T05:53:36.376070Z", "url": "https://files.pythonhosted.org/packages/8d/99/30627697b5bfbc991a02f2dd56c9d0f080ec873efd0d9878c8d5b6313f6c/about_time-3.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6c353d9a702c1bab48581616aa994034", "sha256": "b64729d04440f2ccc04d9d097e75865e7dc8376622e1781dcf07016fbc336a2e"}, "downloads": -1, "filename": "about-time-3.0.0.tar.gz", "has_sig": false, "md5_digest": "6c353d9a702c1bab48581616aa994034", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6488, "upload_time": "2020-03-11T05:53:37", "upload_time_iso_8601": "2020-03-11T05:53:37.857166Z", "url": "https://files.pythonhosted.org/packages/07/1b/19621bc5ccf6bf7d92fc0fb277142dd823f9a091835d513d7197bee954c0/about-time-3.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "667d56342644d7df2ab173a5652d0e63", "sha256": "a4ff6f43e3f8285b552176b89852d230590dd37a318ccec0e185d085c5798c01"}, "downloads": -1, "filename": "about_time-3.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "667d56342644d7df2ab173a5652d0e63", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7071, "upload_time": "2020-03-11T05:53:36", "upload_time_iso_8601": "2020-03-11T05:53:36.376070Z", "url": "https://files.pythonhosted.org/packages/8d/99/30627697b5bfbc991a02f2dd56c9d0f080ec873efd0d9878c8d5b6313f6c/about_time-3.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6c353d9a702c1bab48581616aa994034", "sha256": "b64729d04440f2ccc04d9d097e75865e7dc8376622e1781dcf07016fbc336a2e"}, "downloads": -1, "filename": "about-time-3.0.0.tar.gz", "has_sig": false, "md5_digest": "6c353d9a702c1bab48581616aa994034", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6488, "upload_time": "2020-03-11T05:53:37", "upload_time_iso_8601": "2020-03-11T05:53:37.857166Z", "url": "https://files.pythonhosted.org/packages/07/1b/19621bc5ccf6bf7d92fc0fb277142dd823f9a091835d513d7197bee954c0/about-time-3.0.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:25:00 2020"}