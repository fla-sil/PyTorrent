{"info": {"author": "Paul Glass", "author_email": "pnglass@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# Overview\n\nThis is a Python 3 implementation of a (3x3) Rubik's Cube solver.\n\nIt contains:\n\n- A simple implementation of the cube\n- A solver that follows a fixed algorithm\n- An unintelligent solution sequence optimizer\n- A decent set of test cases\n\n## Installation\n\nThe package is hosted on PyPI.\n\n```\npip install rubik-cube\n```\n\nImport from the `rubik` package,\n\n```python\n>>> from rubik.cube import Cube\n>>> c = Cube(\"OOOOOOOOOYYYWWWGGGBBBYYYWWWGGGBBBYYYWWWGGGBBBRRRRRRRRR\")\n>>> print(c)\n    OOO\n    OOO\n    OOO\nYYY WWW GGG BBB\nYYY WWW GGG BBB\nYYY WWW GGG BBB\n    RRR\n    RRR\n    RRR\n```\n\n## Implementation\n\n### Piece\n\nThe cornerstone of this implementation is the Piece class. A Piece stores two\npieces of information:\n\n1. An integer `position` vector `(x, y, z)` where each component is in {-1, 0,\n1}:\n    - `(0, 0, 0)` is the center of the cube\n    - the positive x-axis points to the right face\n    - the positive y-axis points to the up face\n    - the positive z-axis points to the front face\n\n2. A `colors` vector `(cx, cy, cz)`, giving the color of the sticker along each\naxis. Null values are place whenever that Piece has less than three sides. For\nexample, a Piece with `colors=('Orange', None, 'Red')` is an edge piece with an\n`'Orange'` sticker facing the x-direction and a `'Red'` sticker facing the\nz-direction. The Piece doesn't know or care which direction along the x-axis\nthe `'Orange'` sticker is facing, just that it is facing in the x-direction and\nnot the y- or z- directions.\n\nUsing the combination of `position` and `color` vectors makes it easy to\nidentify any Piece by its absolute position or by its unique combination of\ncolors.\n\nA Piece provides a method `Piece.rotate(matrix)`, which accepts a (90 degree)\nrotation matrix. A matrix-vector multiplication is done to update the Piece's\n`position` vector. Then we update the `colors` vector, by swapping exactly two\nentries in the `colors` vector:\n\n- For example, a corner Piece has three stickers of different colors. After a\n  90 degree rotation of the Piece, one sticker remains facing down the same\n  axis, while the other two stickers swap axes. This corresponds to swapping the\n  positions of two entries in the Piece\u2019s `colors` vector.\n- For an edge or face piece, the argument is the same as above, although we may\n  swap around one or more null entries.\n\n### Cube\n\nThe Cube class is built on top of the Piece class. The Cube stores a list of\nPieces and provides nice methods for flipping slices of the cube, as well as\nmethods for querying the current state. (I followed standard [Rubik's Cube\nnotation](http://ruwix.com/the-rubiks-cube/notation/))\n\nBecause the Piece class encapsulates all of the rotation logic, implementing\nrotations in the Cube class is dead simple - just apply the appropriate\nrotation matrix to all Pieces involved in the rotation. An example: To\nimplement `Cube.L()` - a clockwise rotation of the left face - do the\nfollowing:\n\n1. Construct the appropriate [rotation matrix](\nhttp://en.wikipedia.org/wiki/Rotation_matrix) for a 90 degree rotation in the\n`x = -1` plane.\n2. Select all Pieces satisfying `position.x == -1`.\n3. Apply the rotation matrix to each of these Pieces.\n\nTo implement `Cube.X()` - a clockwise rotation of the entire cube around the\npositive x-axis - just apply a rotation matrix to all Pieces stored in the\nCube.\n\n### Solver\n\nThe solver implements the algorithm described\n[here](http://peter.stillhq.com/jasmine/rubikscubesolution.html) and\n[here](http://www.chessandpoker.com/rubiks-cube-solution.html). It is a\nlayer-by-layer solution. First the front-face (the `z = 1` plane) is solved,\nthen the middle layer (`z = 0`), and finally the back layer (`z = -1`). When\nthe solver is done, `Solver.moves` is a list representing the solution\nsequence.\n\nMy first correct-looking implementation of the solver average 252.5 moves per\nsolution sequence on 135000 randomly-generated cubes (with no failures).\nImplementing a dumb optimizer reduced the average number of moves to 192.7 on\n67000 randomly-generated cubes. The optimizer does the following:\n\n1. Eliminate full-cube rotations by \"unrotating\" the moves (Z U L D Zi becomes\nL D R)\n2. Eliminate moves followed by their inverse (R R Ri Ri is gone)\n3. Replace moves repeated three times with a single turn in the opposite\ndirection (R R R becomes Ri)\n\nThe solver is not particularly fast. On my machine (a 4.0 Ghz i7), it takes\nabout 0.06 seconds per solve on CPython, which is roughly 16.7 solves/second.\nOn PyPy, this is reduced to about 0.013 seconds per solve, or about 76\nsolves/second.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/pglass/cube", "keywords": "rubik cube solver", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "rubik-cube", "package_url": "https://pypi.org/project/rubik-cube/", "platform": "", "project_url": "https://pypi.org/project/rubik-cube/", "project_urls": {"Homepage": "https://github.com/pglass/cube"}, "release_url": "https://pypi.org/project/rubik-cube/0.0.1/", "requires_dist": null, "requires_python": "", "summary": "A basic, pure-Python Rubik's cube solver", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Overview</h1>\n<p>This is a Python 3 implementation of a (3x3) Rubik's Cube solver.</p>\n<p>It contains:</p>\n<ul>\n<li>A simple implementation of the cube</li>\n<li>A solver that follows a fixed algorithm</li>\n<li>An unintelligent solution sequence optimizer</li>\n<li>A decent set of test cases</li>\n</ul>\n<h2>Installation</h2>\n<p>The package is hosted on PyPI.</p>\n<pre><code>pip install rubik-cube\n</code></pre>\n<p>Import from the <code>rubik</code> package,</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">rubik.cube</span> <span class=\"kn\">import</span> <span class=\"n\">Cube</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">Cube</span><span class=\"p\">(</span><span class=\"s2\">\"OOOOOOOOOYYYWWWGGGBBBYYYWWWGGGBBBYYYWWWGGGBBBRRRRRRRRR\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span>\n    <span class=\"n\">OOO</span>\n    <span class=\"n\">OOO</span>\n    <span class=\"n\">OOO</span>\n<span class=\"n\">YYY</span> <span class=\"n\">WWW</span> <span class=\"n\">GGG</span> <span class=\"n\">BBB</span>\n<span class=\"n\">YYY</span> <span class=\"n\">WWW</span> <span class=\"n\">GGG</span> <span class=\"n\">BBB</span>\n<span class=\"n\">YYY</span> <span class=\"n\">WWW</span> <span class=\"n\">GGG</span> <span class=\"n\">BBB</span>\n    <span class=\"n\">RRR</span>\n    <span class=\"n\">RRR</span>\n    <span class=\"n\">RRR</span>\n</pre>\n<h2>Implementation</h2>\n<h3>Piece</h3>\n<p>The cornerstone of this implementation is the Piece class. A Piece stores two\npieces of information:</p>\n<ol>\n<li>\n<p>An integer <code>position</code> vector <code>(x, y, z)</code> where each component is in {-1, 0,\n1}:</p>\n<ul>\n<li><code>(0, 0, 0)</code> is the center of the cube</li>\n<li>the positive x-axis points to the right face</li>\n<li>the positive y-axis points to the up face</li>\n<li>the positive z-axis points to the front face</li>\n</ul>\n</li>\n<li>\n<p>A <code>colors</code> vector <code>(cx, cy, cz)</code>, giving the color of the sticker along each\naxis. Null values are place whenever that Piece has less than three sides. For\nexample, a Piece with <code>colors=('Orange', None, 'Red')</code> is an edge piece with an\n<code>'Orange'</code> sticker facing the x-direction and a <code>'Red'</code> sticker facing the\nz-direction. The Piece doesn't know or care which direction along the x-axis\nthe <code>'Orange'</code> sticker is facing, just that it is facing in the x-direction and\nnot the y- or z- directions.</p>\n</li>\n</ol>\n<p>Using the combination of <code>position</code> and <code>color</code> vectors makes it easy to\nidentify any Piece by its absolute position or by its unique combination of\ncolors.</p>\n<p>A Piece provides a method <code>Piece.rotate(matrix)</code>, which accepts a (90 degree)\nrotation matrix. A matrix-vector multiplication is done to update the Piece's\n<code>position</code> vector. Then we update the <code>colors</code> vector, by swapping exactly two\nentries in the <code>colors</code> vector:</p>\n<ul>\n<li>For example, a corner Piece has three stickers of different colors. After a\n90 degree rotation of the Piece, one sticker remains facing down the same\naxis, while the other two stickers swap axes. This corresponds to swapping the\npositions of two entries in the Piece\u2019s <code>colors</code> vector.</li>\n<li>For an edge or face piece, the argument is the same as above, although we may\nswap around one or more null entries.</li>\n</ul>\n<h3>Cube</h3>\n<p>The Cube class is built on top of the Piece class. The Cube stores a list of\nPieces and provides nice methods for flipping slices of the cube, as well as\nmethods for querying the current state. (I followed standard <a href=\"http://ruwix.com/the-rubiks-cube/notation/\" rel=\"nofollow\">Rubik's Cube\nnotation</a>)</p>\n<p>Because the Piece class encapsulates all of the rotation logic, implementing\nrotations in the Cube class is dead simple - just apply the appropriate\nrotation matrix to all Pieces involved in the rotation. An example: To\nimplement <code>Cube.L()</code> - a clockwise rotation of the left face - do the\nfollowing:</p>\n<ol>\n<li>Construct the appropriate <a href=\"http://en.wikipedia.org/wiki/Rotation_matrix\" rel=\"nofollow\">rotation matrix</a> for a 90 degree rotation in the\n<code>x = -1</code> plane.</li>\n<li>Select all Pieces satisfying <code>position.x == -1</code>.</li>\n<li>Apply the rotation matrix to each of these Pieces.</li>\n</ol>\n<p>To implement <code>Cube.X()</code> - a clockwise rotation of the entire cube around the\npositive x-axis - just apply a rotation matrix to all Pieces stored in the\nCube.</p>\n<h3>Solver</h3>\n<p>The solver implements the algorithm described\n<a href=\"http://peter.stillhq.com/jasmine/rubikscubesolution.html\" rel=\"nofollow\">here</a> and\n<a href=\"http://www.chessandpoker.com/rubiks-cube-solution.html\" rel=\"nofollow\">here</a>. It is a\nlayer-by-layer solution. First the front-face (the <code>z = 1</code> plane) is solved,\nthen the middle layer (<code>z = 0</code>), and finally the back layer (<code>z = -1</code>). When\nthe solver is done, <code>Solver.moves</code> is a list representing the solution\nsequence.</p>\n<p>My first correct-looking implementation of the solver average 252.5 moves per\nsolution sequence on 135000 randomly-generated cubes (with no failures).\nImplementing a dumb optimizer reduced the average number of moves to 192.7 on\n67000 randomly-generated cubes. The optimizer does the following:</p>\n<ol>\n<li>Eliminate full-cube rotations by \"unrotating\" the moves (Z U L D Zi becomes\nL D R)</li>\n<li>Eliminate moves followed by their inverse (R R Ri Ri is gone)</li>\n<li>Replace moves repeated three times with a single turn in the opposite\ndirection (R R R becomes Ri)</li>\n</ol>\n<p>The solver is not particularly fast. On my machine (a 4.0 Ghz i7), it takes\nabout 0.06 seconds per solve on CPython, which is roughly 16.7 solves/second.\nOn PyPy, this is reduced to about 0.013 seconds per solve, or about 76\nsolves/second.</p>\n\n          </div>"}, "last_serial": 6394245, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "8abca71ff2f803a9ae74c00c1a4e96ac", "sha256": "3f48973e252e4e4adead580a87d06976419a51c3f502e291736d60a70d0eccbf"}, "downloads": -1, "filename": "rubik_cube-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "8abca71ff2f803a9ae74c00c1a4e96ac", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14087, "upload_time": "2020-01-04T07:53:28", "upload_time_iso_8601": "2020-01-04T07:53:28.434108Z", "url": "https://files.pythonhosted.org/packages/ad/dc/c978b38e72e94414d2aff27bc18957a936a65ac3362f7ee574f4246360fd/rubik_cube-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "34b68f6f7a317c1558de3f1d3e86be21", "sha256": "9b4cba55e1a344460b6c50a809deff1816415afc77dbda9de433d71704d2d7bd"}, "downloads": -1, "filename": "rubik-cube-0.0.1.tar.gz", "has_sig": false, "md5_digest": "34b68f6f7a317c1558de3f1d3e86be21", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12278, "upload_time": "2020-01-04T07:53:30", "upload_time_iso_8601": "2020-01-04T07:53:30.803469Z", "url": "https://files.pythonhosted.org/packages/b8/63/3b8b04df7adc57182cccb67783e4a9cf637c12091908021aa63fb7ec248a/rubik-cube-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8abca71ff2f803a9ae74c00c1a4e96ac", "sha256": "3f48973e252e4e4adead580a87d06976419a51c3f502e291736d60a70d0eccbf"}, "downloads": -1, "filename": "rubik_cube-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "8abca71ff2f803a9ae74c00c1a4e96ac", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14087, "upload_time": "2020-01-04T07:53:28", "upload_time_iso_8601": "2020-01-04T07:53:28.434108Z", "url": "https://files.pythonhosted.org/packages/ad/dc/c978b38e72e94414d2aff27bc18957a936a65ac3362f7ee574f4246360fd/rubik_cube-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "34b68f6f7a317c1558de3f1d3e86be21", "sha256": "9b4cba55e1a344460b6c50a809deff1816415afc77dbda9de433d71704d2d7bd"}, "downloads": -1, "filename": "rubik-cube-0.0.1.tar.gz", "has_sig": false, "md5_digest": "34b68f6f7a317c1558de3f1d3e86be21", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12278, "upload_time": "2020-01-04T07:53:30", "upload_time_iso_8601": "2020-01-04T07:53:30.803469Z", "url": "https://files.pythonhosted.org/packages/b8/63/3b8b04df7adc57182cccb67783e4a9cf637c12091908021aa63fb7ec248a/rubik-cube-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:00:11 2020"}