{"info": {"author": "Stefan Agner", "author_email": "stefan@agner.ch", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: Implementation :: MicroPython"], "description": "# Sensirion SCD30 CO\u00b2 Sensor I2C driver for MicroPython\n\nSensirion SCD30 is a CO\u00b2, Humidity and Temperature sensor on a module. This is\na I2C driver written in Python 3 for MicroPython.\n\n## Getting Started\n\n### Prerequisites\n\n* Sensirion SCD30 Sensor Module\n* MicroPython board with I2C interface\n\n### Wiring\n\nWire the I2C bus to the I2C bus on your MicroPython board. This is an example\nusing the Pyboard D:\n\n| Pyboard       | SCD30         |\n| ------------- |---------------|\n| X15 (3V3)     | VDD           |\n| X14 (GND)     | GND           |\n| X9            | TX/SCL        |\n| X10           | RX/SDA        |\n\n### Usage\n\nThis example reads the measurements in a continous loop:\n\n```\nimport time\nfrom machine import I2C, Pin\nfrom scd30 import SCD30\n\ni2cbus = I2C(1)\nscd30 = SCD30(i2c, 0x61)\n\nwhile True:\n    # Wait for sensor data to be ready to read (by default every 2 seconds)\n    while scd30.get_status_ready() != 1:\n        time.sleep_ms(200)\n    scd30.read_measurement()\n```\n\nNote that the CO\u00b2 sensor needs some time to stabilize. Therefor the sensor\nshould be kept powered to achieve a reasonable measurement interval (e.g. <5\nminutes). To save power the sensors measurement inverval can be tweaked. See\nalso the [Low Power Mode for SCD30](https://docs-emea.rs-online.com/webdocs/16c9/0900766b816c9dc7.pdf)\napplication note.\n\n### Calibration\n\nThe CO\u00b2 sensor has two modes of calibration: FRC (Forced Recalibration) or ASC\n(Automatic Self-Calibration). This only describes the former.\n\nEssentially the sensor is already calibrated at factory. However, when setting a\nnew measurement interval recalibration might be necessary. The process is to\nbring the sensor into a controlled environment (e.g. outside) and set the known\nvalue at that environment (e.g. 400ppm). From what I understand ASC does\nessentially the same, just assumes that the lowest values over a certain periode\nare \"outside values\"...\n\nAlso note that the temperature sensor suffers from heating effects on the PCB.\nWhen the sensor operates in 2 second interval the heating is about 3\u00b0C. I\nusually run the sensor at 30 seconds interval and observed a heating of 2\u00b0C. The\noffset is subtracted from the measured temperature! To set a new offset, take\nthe old offset into account!\n\n## Built With\n\n* [MicroPython](http://micropython.org/)\n* [SCD30 Sensor Module](https://www.sensirion.com/en/environmental-sensors/carbon-dioxide-sensors-co2/)\n\n## License\n\nThis project is licensed under the MIT License - see the\n[LICENSE](LICENSE) file for details", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/agners/micropython-scd30", "keywords": "scd30,co2,temperature,humidity,micropython,i2c", "license": "MIT", "maintainer": "Stefan Agner", "maintainer_email": "stefan@agner.ch", "name": "micropython-scd30", "package_url": "https://pypi.org/project/micropython-scd30/", "platform": "", "project_url": "https://pypi.org/project/micropython-scd30/", "project_urls": {"Homepage": "https://github.com/agners/micropython-scd30"}, "release_url": "https://pypi.org/project/micropython-scd30/0.2.0/", "requires_dist": null, "requires_python": "", "summary": "MicroPython I2C driver for SCD30 CO2 sensor module", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Sensirion SCD30 CO\u00b2 Sensor I2C driver for MicroPython</h1>\n<p>Sensirion SCD30 is a CO\u00b2, Humidity and Temperature sensor on a module. This is\na I2C driver written in Python 3 for MicroPython.</p>\n<h2>Getting Started</h2>\n<h3>Prerequisites</h3>\n<ul>\n<li>Sensirion SCD30 Sensor Module</li>\n<li>MicroPython board with I2C interface</li>\n</ul>\n<h3>Wiring</h3>\n<p>Wire the I2C bus to the I2C bus on your MicroPython board. This is an example\nusing the Pyboard D:</p>\n<table>\n<thead>\n<tr>\n<th>Pyboard</th>\n<th>SCD30</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>X15 (3V3)</td>\n<td>VDD</td>\n</tr>\n<tr>\n<td>X14 (GND)</td>\n<td>GND</td>\n</tr>\n<tr>\n<td>X9</td>\n<td>TX/SCL</td>\n</tr>\n<tr>\n<td>X10</td>\n<td>RX/SDA</td>\n</tr></tbody></table>\n<h3>Usage</h3>\n<p>This example reads the measurements in a continous loop:</p>\n<pre><code>import time\nfrom machine import I2C, Pin\nfrom scd30 import SCD30\n\ni2cbus = I2C(1)\nscd30 = SCD30(i2c, 0x61)\n\nwhile True:\n    # Wait for sensor data to be ready to read (by default every 2 seconds)\n    while scd30.get_status_ready() != 1:\n        time.sleep_ms(200)\n    scd30.read_measurement()\n</code></pre>\n<p>Note that the CO\u00b2 sensor needs some time to stabilize. Therefor the sensor\nshould be kept powered to achieve a reasonable measurement interval (e.g. &lt;5\nminutes). To save power the sensors measurement inverval can be tweaked. See\nalso the <a href=\"https://docs-emea.rs-online.com/webdocs/16c9/0900766b816c9dc7.pdf\" rel=\"nofollow\">Low Power Mode for SCD30</a>\napplication note.</p>\n<h3>Calibration</h3>\n<p>The CO\u00b2 sensor has two modes of calibration: FRC (Forced Recalibration) or ASC\n(Automatic Self-Calibration). This only describes the former.</p>\n<p>Essentially the sensor is already calibrated at factory. However, when setting a\nnew measurement interval recalibration might be necessary. The process is to\nbring the sensor into a controlled environment (e.g. outside) and set the known\nvalue at that environment (e.g. 400ppm). From what I understand ASC does\nessentially the same, just assumes that the lowest values over a certain periode\nare \"outside values\"...</p>\n<p>Also note that the temperature sensor suffers from heating effects on the PCB.\nWhen the sensor operates in 2 second interval the heating is about 3\u00b0C. I\nusually run the sensor at 30 seconds interval and observed a heating of 2\u00b0C. The\noffset is subtracted from the measured temperature! To set a new offset, take\nthe old offset into account!</p>\n<h2>Built With</h2>\n<ul>\n<li><a href=\"http://micropython.org/\" rel=\"nofollow\">MicroPython</a></li>\n<li><a href=\"https://www.sensirion.com/en/environmental-sensors/carbon-dioxide-sensors-co2/\" rel=\"nofollow\">SCD30 Sensor Module</a></li>\n</ul>\n<h2>License</h2>\n<p>This project is licensed under the MIT License - see the\n<a href=\"LICENSE\" rel=\"nofollow\">LICENSE</a> file for details</p>\n\n          </div>"}, "last_serial": 5727996, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "dcc6643124e6d2e6404849f826bec2d3", "sha256": "29494d5188c827f3c807bd855cf91f914ed792d73b72e6b12cde3169db09cf96"}, "downloads": -1, "filename": "micropython-scd30-0.1.0.tar.gz", "has_sig": false, "md5_digest": "dcc6643124e6d2e6404849f826bec2d3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4362, "upload_time": "2019-07-12T22:36:50", "upload_time_iso_8601": "2019-07-12T22:36:50.506462Z", "url": "https://files.pythonhosted.org/packages/6a/eb/9d3b07b4a2503f34452fcb3bf9de5feedd7c66edaf92bf48752b051fe4e1/micropython-scd30-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "9410d9323ddcedb1b4fa636f326bacbf", "sha256": "3aba91cac53b98f65c39d61f1d3cf3687a161d334d691c7db1447d1636859eb6"}, "downloads": -1, "filename": "micropython-scd30-0.2.0.tar.gz", "has_sig": false, "md5_digest": "9410d9323ddcedb1b4fa636f326bacbf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4472, "upload_time": "2019-08-25T20:58:45", "upload_time_iso_8601": "2019-08-25T20:58:45.644308Z", "url": "https://files.pythonhosted.org/packages/3b/78/f4b0659a50555a53fa06b6435912ebc747793e94fe2ed40bc8db4382ba2a/micropython-scd30-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9410d9323ddcedb1b4fa636f326bacbf", "sha256": "3aba91cac53b98f65c39d61f1d3cf3687a161d334d691c7db1447d1636859eb6"}, "downloads": -1, "filename": "micropython-scd30-0.2.0.tar.gz", "has_sig": false, "md5_digest": "9410d9323ddcedb1b4fa636f326bacbf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4472, "upload_time": "2019-08-25T20:58:45", "upload_time_iso_8601": "2019-08-25T20:58:45.644308Z", "url": "https://files.pythonhosted.org/packages/3b/78/f4b0659a50555a53fa06b6435912ebc747793e94fe2ed40bc8db4382ba2a/micropython-scd30-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:55:02 2020"}