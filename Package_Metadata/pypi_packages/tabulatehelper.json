{"info": {"author": "Peter Zagubisalo", "author_email": "peter.zagubisalo@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Build Tools"], "description": "# Tabulate Helper\n\nConverts tabular data like Pandas dataframe to GitHub Flavored Markdown pipe table (wrapper around [tabulate](https://pypi.org/project/tabulate/) module). I use it with  [Pandoctools/Knitty](https://github.com/kiwi0fruit/pandoctools).\n\n\n# Contents\n\n* [Tabulate Helper](#tabulate-helper)\n* [Contents](#contents)\n* [Install](#install)\n* [Differences from tabulate module](#differences-from-tabulate-module)\n* [Usage example](#usage-example)\n* [Converting to other formats](#converting-to-other-formats)\n* [API](#api)\n\n\n# Install\n\nVia conda:\n\n```\nconda install -c defaults -c conda-forge tabulatehelper\n```\n\nVia pip:\n\n```\npip install tabulatehelper\n```\n\n\n# Differences from tabulate module\n\n* With defaults: auto-headers for Pandas data frames,\n* With defaults: auto-empty headers for GitHub compatibility,\n* Special function that prints header only (useful at the end of long tables),\n* Doesn't show index by default,\n* `formats` argument can be set that selectively overrides automatic align format.\n\nExample:\n```py\nimport numpy as np\nimport pandas as pd\nfrom tabulate import tabulate\nimport tabulatehelper as th\n\ndf = pd.DataFrame(np.random.random(16).reshape(4, 4), columns=('a', 'b', 'c', 'd'))\n\n# tabulate wtithout wrapper:\ntbl = tabulate(df, df.columns, tablefmt='pipe', showindex=False)\n\n# tabulate helper with overriding align format:\ntbl = th.md_table(df, formats={-1: 'c'})\n\nprint(tbl)\n```\n\nOutput:\n```\n|        a |        b |        c |        d |\n|---------:|---------:|---------:|:--------:|\n| 0.413284 | 0.932373 | 0.277797 | 0.646333 |\n| 0.552731 | 0.381826 | 0.141727 | 0.2483   |\n| 0.779889 | 0.012458 | 0.308352 | 0.650859 |\n| 0.301109 | 0.982111 | 0.994024 | 0.43551  |\n```\n\n\n## Usage example\n\nMain functions are `tabulatehelper.md_table(...)` and `tabulatehelper.md_header(...)`. Usage example that works both in Atom+Hydrogen and in Pandoctools+Knitty:\n\n```py\nfrom IPython.display import Markdown\nimport pandas as pd\nimport numpy as np\nimport tabulatehelper as th\n\ndf = pd.DataFrame(np.random.random(16).reshape(4, 4))\n\n# appended header is useful when very long table\n# (can display `df.iloc[[0]]` in hydrogen)\nMarkdown(f\"\"\"\n\n{th.md_table(df)}\n\n: Table {{#tbl:table1}}\n\n{th.md_header(df)}\n\n\"\"\")\n```\n\n\n# Converting to other formats\n\nTabulate can convert to other formats but I prefer using [pypandoc](https://pypi.org/project/pypandoc/) on `th.md_table` output as it can convert to any Pandoc supported [output format](https://pandoc.org/MANUAL.html#general-options).\n\n\n# API\n\nFrom [tabulate_helper.py](https://github.com/kiwi0fruit/tabulatehelper/tree/master/tabulatehelper/tabulate_helper.py):\n\n```py\ndef md_table(tabular_data: Union[pd.DataFrame, object],\n             headers: tuple = None,\n             showindex: Union[bool, None] = False,\n             formats: Union[dict, str, Iterable[str]] = None,\n             return_headers_only: bool = False,\n             **kwargs) -> str:\n    \"\"\"\n    Converts tabular data like Pandas dataframe to\n    GitHub Flavored Markdown pipe table.\n\n    Markdown table ``formats`` examples:\n\n    * ``dict(foo='-:', bar=':-:', **{-1: 'c'})``,\n    * ``'--|-:|:-:'`` or ``'|--|-:|:-:|'`` or ``-rc``,\n    * ``['--', '-:', 'C']``\n\n    Parameters\n    ----------\n    tabular_data :\n        tabulate.tabulate(tabular_data[,...]) argument\n    headers :\n        tabulate.tabulate(..., headers[,...]) optional argument.\n        If None and tabular_data is pd.DataFrame then default is\n        tabular_data.columns converted to Tuple[str, ...].\n        If None then use tabulate.tabulate(...) default\n        (but in this particular case if it's absent in the output\n        then add blank header).\n    showindex :\n        tabulate.tabulate(..., showindex[,...]) optional argument.\n    formats :\n        GitHub Flavored Markdown table align formats: dict, str or list / iterable.\n        '-' mean lack of align format, 'l'/'L'/':-' mean left align,\n        'r'/'R'/'-:' mean right align, 'c'/'C'/':-:' mean center align.\n        dict keys are for tabulate output headers so they should be str.\n        int keys mean column number.\n    return_headers_only :\n        returns only table header + empty row.\n        If header is absent then returns empty string.\n    kwargs :\n        Other tabulate.tabulate(...) optional keyword arguments\n\n    Returns\n    -------\n    md :\n        Markdown table\n    \"\"\"\n    ...\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kiwi0fruit/tabulatehelper", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "tabulatehelper", "package_url": "https://pypi.org/project/tabulatehelper/", "platform": "", "project_url": "https://pypi.org/project/tabulatehelper/", "project_urls": {"Homepage": "https://github.com/kiwi0fruit/tabulatehelper"}, "release_url": "https://pypi.org/project/tabulatehelper/0.0.7/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Converts tabular data like Pandas dataframe to GitHub Flavored Markdown table (wrapper around tabulate module).", "version": "0.0.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Tabulate Helper</h1>\n<p>Converts tabular data like Pandas dataframe to GitHub Flavored Markdown pipe table (wrapper around <a href=\"https://pypi.org/project/tabulate/\" rel=\"nofollow\">tabulate</a> module). I use it with  <a href=\"https://github.com/kiwi0fruit/pandoctools\" rel=\"nofollow\">Pandoctools/Knitty</a>.</p>\n<h1>Contents</h1>\n<ul>\n<li><a href=\"#tabulate-helper\" rel=\"nofollow\">Tabulate Helper</a></li>\n<li><a href=\"#contents\" rel=\"nofollow\">Contents</a></li>\n<li><a href=\"#install\" rel=\"nofollow\">Install</a></li>\n<li><a href=\"#differences-from-tabulate-module\" rel=\"nofollow\">Differences from tabulate module</a></li>\n<li><a href=\"#usage-example\" rel=\"nofollow\">Usage example</a></li>\n<li><a href=\"#converting-to-other-formats\" rel=\"nofollow\">Converting to other formats</a></li>\n<li><a href=\"#api\" rel=\"nofollow\">API</a></li>\n</ul>\n<h1>Install</h1>\n<p>Via conda:</p>\n<pre><code>conda install -c defaults -c conda-forge tabulatehelper\n</code></pre>\n<p>Via pip:</p>\n<pre><code>pip install tabulatehelper\n</code></pre>\n<h1>Differences from tabulate module</h1>\n<ul>\n<li>With defaults: auto-headers for Pandas data frames,</li>\n<li>With defaults: auto-empty headers for GitHub compatibility,</li>\n<li>Special function that prints header only (useful at the end of long tables),</li>\n<li>Doesn't show index by default,</li>\n<li><code>formats</code> argument can be set that selectively overrides automatic align format.</li>\n</ul>\n<p>Example:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"kn\">from</span> <span class=\"nn\">tabulate</span> <span class=\"kn\">import</span> <span class=\"n\">tabulate</span>\n<span class=\"kn\">import</span> <span class=\"nn\">tabulatehelper</span> <span class=\"k\">as</span> <span class=\"nn\">th</span>\n\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">reshape</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">,</span> <span class=\"s1\">'d'</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># tabulate wtithout wrapper:</span>\n<span class=\"n\">tbl</span> <span class=\"o\">=</span> <span class=\"n\">tabulate</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">columns</span><span class=\"p\">,</span> <span class=\"n\">tablefmt</span><span class=\"o\">=</span><span class=\"s1\">'pipe'</span><span class=\"p\">,</span> <span class=\"n\">showindex</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># tabulate helper with overriding align format:</span>\n<span class=\"n\">tbl</span> <span class=\"o\">=</span> <span class=\"n\">th</span><span class=\"o\">.</span><span class=\"n\">md_table</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">formats</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"s1\">'c'</span><span class=\"p\">})</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">tbl</span><span class=\"p\">)</span>\n</pre>\n<p>Output:</p>\n<pre><code>|        a |        b |        c |        d |\n|---------:|---------:|---------:|:--------:|\n| 0.413284 | 0.932373 | 0.277797 | 0.646333 |\n| 0.552731 | 0.381826 | 0.141727 | 0.2483   |\n| 0.779889 | 0.012458 | 0.308352 | 0.650859 |\n| 0.301109 | 0.982111 | 0.994024 | 0.43551  |\n</code></pre>\n<h2>Usage example</h2>\n<p>Main functions are <code>tabulatehelper.md_table(...)</code> and <code>tabulatehelper.md_header(...)</code>. Usage example that works both in Atom+Hydrogen and in Pandoctools+Knitty:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">IPython.display</span> <span class=\"kn\">import</span> <span class=\"n\">Markdown</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">tabulatehelper</span> <span class=\"k\">as</span> <span class=\"nn\">th</span>\n\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">reshape</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># appended header is useful when very long table</span>\n<span class=\"c1\"># (can display `df.iloc[[0]]` in hydrogen)</span>\n<span class=\"n\">Markdown</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"\"\"</span>\n\n<span class=\"si\">{</span><span class=\"n\">th</span><span class=\"o\">.</span><span class=\"n\">md_table</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s2\"></span>\n\n<span class=\"s2\">: Table </span><span class=\"se\">{{</span><span class=\"s2\">#tbl:table1</span><span class=\"se\">}}</span><span class=\"s2\"></span>\n\n<span class=\"si\">{</span><span class=\"n\">th</span><span class=\"o\">.</span><span class=\"n\">md_header</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s2\"></span>\n\n<span class=\"s2\">\"\"\"</span><span class=\"p\">)</span>\n</pre>\n<h1>Converting to other formats</h1>\n<p>Tabulate can convert to other formats but I prefer using <a href=\"https://pypi.org/project/pypandoc/\" rel=\"nofollow\">pypandoc</a> on <code>th.md_table</code> output as it can convert to any Pandoc supported <a href=\"https://pandoc.org/MANUAL.html#general-options\" rel=\"nofollow\">output format</a>.</p>\n<h1>API</h1>\n<p>From <a href=\"https://github.com/kiwi0fruit/tabulatehelper/tree/master/tabulatehelper/tabulate_helper.py\" rel=\"nofollow\">tabulate_helper.py</a>:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">md_table</span><span class=\"p\">(</span><span class=\"n\">tabular_data</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">,</span> <span class=\"nb\">object</span><span class=\"p\">],</span>\n             <span class=\"n\">headers</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n             <span class=\"n\">showindex</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n             <span class=\"n\">formats</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n             <span class=\"n\">return_headers_only</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n             <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    Converts tabular data like Pandas dataframe to</span>\n<span class=\"sd\">    GitHub Flavored Markdown pipe table.</span>\n\n<span class=\"sd\">    Markdown table ``formats`` examples:</span>\n\n<span class=\"sd\">    * ``dict(foo='-:', bar=':-:', **{-1: 'c'})``,</span>\n<span class=\"sd\">    * ``'--|-:|:-:'`` or ``'|--|-:|:-:|'`` or ``-rc``,</span>\n<span class=\"sd\">    * ``['--', '-:', 'C']``</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    tabular_data :</span>\n<span class=\"sd\">        tabulate.tabulate(tabular_data[,...]) argument</span>\n<span class=\"sd\">    headers :</span>\n<span class=\"sd\">        tabulate.tabulate(..., headers[,...]) optional argument.</span>\n<span class=\"sd\">        If None and tabular_data is pd.DataFrame then default is</span>\n<span class=\"sd\">        tabular_data.columns converted to Tuple[str, ...].</span>\n<span class=\"sd\">        If None then use tabulate.tabulate(...) default</span>\n<span class=\"sd\">        (but in this particular case if it's absent in the output</span>\n<span class=\"sd\">        then add blank header).</span>\n<span class=\"sd\">    showindex :</span>\n<span class=\"sd\">        tabulate.tabulate(..., showindex[,...]) optional argument.</span>\n<span class=\"sd\">    formats :</span>\n<span class=\"sd\">        GitHub Flavored Markdown table align formats: dict, str or list / iterable.</span>\n<span class=\"sd\">        '-' mean lack of align format, 'l'/'L'/':-' mean left align,</span>\n<span class=\"sd\">        'r'/'R'/'-:' mean right align, 'c'/'C'/':-:' mean center align.</span>\n<span class=\"sd\">        dict keys are for tabulate output headers so they should be str.</span>\n<span class=\"sd\">        int keys mean column number.</span>\n<span class=\"sd\">    return_headers_only :</span>\n<span class=\"sd\">        returns only table header + empty row.</span>\n<span class=\"sd\">        If header is absent then returns empty string.</span>\n<span class=\"sd\">    kwargs :</span>\n<span class=\"sd\">        Other tabulate.tabulate(...) optional keyword arguments</span>\n\n<span class=\"sd\">    Returns</span>\n<span class=\"sd\">    -------</span>\n<span class=\"sd\">    md :</span>\n<span class=\"sd\">        Markdown table</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"o\">...</span>\n</pre>\n\n          </div>"}, "last_serial": 4725142, "releases": {"0.0.6": [{"comment_text": "", "digests": {"md5": "dbaf7650f5b954091dcd30c73c0cafc4", "sha256": "5d75662daca8043d7ce32fa552e0792c5794f4c2405b726ced0d1ac0ac5e593d"}, "downloads": -1, "filename": "tabulatehelper-0.0.6.tar.gz", "has_sig": false, "md5_digest": "dbaf7650f5b954091dcd30c73c0cafc4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 21774, "upload_time": "2019-01-22T09:28:22", "upload_time_iso_8601": "2019-01-22T09:28:22.326801Z", "url": "https://files.pythonhosted.org/packages/20/22/bff476f359fef57112eff85ec0eb6f82d2151d003b9f2d78beb55afbbcf7/tabulatehelper-0.0.6.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "eefc5753842ce355a0cde20fbbca1a6c", "sha256": "2c9add9b3349dbad2dc875797713d901a22151f67a66d7157d282267ad3199d7"}, "downloads": -1, "filename": "tabulatehelper-0.0.7.tar.gz", "has_sig": false, "md5_digest": "eefc5753842ce355a0cde20fbbca1a6c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 21780, "upload_time": "2019-01-22T09:35:46", "upload_time_iso_8601": "2019-01-22T09:35:46.812945Z", "url": "https://files.pythonhosted.org/packages/f0/63/3c3ea3a28821bdc620b205cbc66c57437ed894bbd9a77970973ad7cd81bd/tabulatehelper-0.0.7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "eefc5753842ce355a0cde20fbbca1a6c", "sha256": "2c9add9b3349dbad2dc875797713d901a22151f67a66d7157d282267ad3199d7"}, "downloads": -1, "filename": "tabulatehelper-0.0.7.tar.gz", "has_sig": false, "md5_digest": "eefc5753842ce355a0cde20fbbca1a6c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 21780, "upload_time": "2019-01-22T09:35:46", "upload_time_iso_8601": "2019-01-22T09:35:46.812945Z", "url": "https://files.pythonhosted.org/packages/f0/63/3c3ea3a28821bdc620b205cbc66c57437ed894bbd9a77970973ad7cd81bd/tabulatehelper-0.0.7.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:34 2020"}