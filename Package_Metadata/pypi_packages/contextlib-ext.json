{"info": {"author": "Nikolay Bryskin", "author_email": "nbryskin@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Build Tools"], "description": "# contextlib-ext - extensions for contextlib\n\n[![Build Status](https://cloud.drone.io/api/badges/nikicat/contextlib-ext/status.svg)](https://cloud.drone.io/nikicat/contextlib-ext)\n\n`contextlib-ext` is a complimentary library for `contextlib`, it provides a following helpers:\n\n## `suppress` as a decorator\n`suppress` can be used as a decorator\n\n```python\nfrom contextlib_ext import suppress\n\n@suppress(Exception)\ndef phony_func():\n    raise ValueError\n\nphony_func()\nprint(\"No exceptions\")\n```\n\n## `@asynccontextmanager` creates decorator\n`@asynccontextmanager` creates context manager that can be used as a decorator (`contextlib.contextmanager` already supports it)\n\n```python\nfrom contextlib_ext import asynccontextmanager\n\n@asynccontextmanager\nasync def mymanager():\n    yield\n\n# The same as contextlib.asynccontextmanager\nasync with mymanager():\n    pass\n\n# This also works\n@mymanager\nasync def myfunc():\n    pass\n```\n\n## `async_suppress`\n`async_suppress` - the same as `suppress`, but async\n\n```python\nfrom contextlib_ext import async_suppress\n\ntry:\n  async with async_suppress(Exception):\n      raise ValueError\nexcept Exception:\n  assert False  # never happens\nelse:\n  print(\"No exceptions\")\n\n# Works as decorator too\n\n@async_suppress(Exception)\nasync def phony_func():\n    raise ValueError\n\nphony_func()\nprint(\"No exceptions\")\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/nikicat/contextlib-ext", "keywords": "contextlib async development", "license": "", "maintainer": "", "maintainer_email": "", "name": "contextlib-ext", "package_url": "https://pypi.org/project/contextlib-ext/", "platform": "", "project_url": "https://pypi.org/project/contextlib-ext/", "project_urls": {"Bug Reports": "https://github.com/nikicat/contextlib-ext/issues", "Homepage": "https://github.com/nikicat/contextlib-ext", "Source": "https://github.com/nikicat/contextlib-ext/"}, "release_url": "https://pypi.org/project/contextlib-ext/0.0.0/", "requires_dist": null, "requires_python": ">=3.7, <4", "summary": "Extensions for contextlib", "version": "0.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>contextlib-ext - extensions for contextlib</h1>\n<p><a href=\"https://cloud.drone.io/nikicat/contextlib-ext\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a6bf80817805a84628537f2c4db97ae1a2bcca02/68747470733a2f2f636c6f75642e64726f6e652e696f2f6170692f6261646765732f6e696b696361742f636f6e746578746c69622d6578742f7374617475732e737667\"></a></p>\n<p><code>contextlib-ext</code> is a complimentary library for <code>contextlib</code>, it provides a following helpers:</p>\n<h2><code>suppress</code> as a decorator</h2>\n<p><code>suppress</code> can be used as a decorator</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">contextlib_ext</span> <span class=\"kn\">import</span> <span class=\"n\">suppress</span>\n\n<span class=\"nd\">@suppress</span><span class=\"p\">(</span><span class=\"ne\">Exception</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">phony_func</span><span class=\"p\">():</span>\n    <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span>\n\n<span class=\"n\">phony_func</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"No exceptions\"</span><span class=\"p\">)</span>\n</pre>\n<h2><code>@asynccontextmanager</code> creates decorator</h2>\n<p><code>@asynccontextmanager</code> creates context manager that can be used as a decorator (<code>contextlib.contextmanager</code> already supports it)</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">contextlib_ext</span> <span class=\"kn\">import</span> <span class=\"n\">asynccontextmanager</span>\n\n<span class=\"nd\">@asynccontextmanager</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">mymanager</span><span class=\"p\">():</span>\n    <span class=\"k\">yield</span>\n\n<span class=\"c1\"># The same as contextlib.asynccontextmanager</span>\n<span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">mymanager</span><span class=\"p\">():</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"c1\"># This also works</span>\n<span class=\"nd\">@mymanager</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">myfunc</span><span class=\"p\">():</span>\n    <span class=\"k\">pass</span>\n</pre>\n<h2><code>async_suppress</code></h2>\n<p><code>async_suppress</code> - the same as <code>suppress</code>, but async</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">contextlib_ext</span> <span class=\"kn\">import</span> <span class=\"n\">async_suppress</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n  <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">async_suppress</span><span class=\"p\">(</span><span class=\"ne\">Exception</span><span class=\"p\">):</span>\n      <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span>\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span><span class=\"p\">:</span>\n  <span class=\"k\">assert</span> <span class=\"kc\">False</span>  <span class=\"c1\"># never happens</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n  <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"No exceptions\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Works as decorator too</span>\n\n<span class=\"nd\">@async_suppress</span><span class=\"p\">(</span><span class=\"ne\">Exception</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">phony_func</span><span class=\"p\">():</span>\n    <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span>\n\n<span class=\"n\">phony_func</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"No exceptions\"</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 6999430, "releases": {"0.0.0": [{"comment_text": "", "digests": {"md5": "cfdd835969acc5846d0aa9ab1c1aecf2", "sha256": "115ab1a9ae858725bd586f917496acec764761533219338a426f8f3bc27ba66b"}, "downloads": -1, "filename": "contextlib-ext-0.0.0.tar.gz", "has_sig": false, "md5_digest": "cfdd835969acc5846d0aa9ab1c1aecf2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7, <4", "size": 2345, "upload_time": "2020-04-11T12:54:33", "upload_time_iso_8601": "2020-04-11T12:54:33.832039Z", "url": "https://files.pythonhosted.org/packages/5e/f5/ce0f732fd534e89740e7d70078a97618f6be039f959e1bf53bf175591969/contextlib-ext-0.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "cfdd835969acc5846d0aa9ab1c1aecf2", "sha256": "115ab1a9ae858725bd586f917496acec764761533219338a426f8f3bc27ba66b"}, "downloads": -1, "filename": "contextlib-ext-0.0.0.tar.gz", "has_sig": false, "md5_digest": "cfdd835969acc5846d0aa9ab1c1aecf2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7, <4", "size": 2345, "upload_time": "2020-04-11T12:54:33", "upload_time_iso_8601": "2020-04-11T12:54:33.832039Z", "url": "https://files.pythonhosted.org/packages/5e/f5/ce0f732fd534e89740e7d70078a97618f6be039f959e1bf53bf175591969/contextlib-ext-0.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:33 2020"}