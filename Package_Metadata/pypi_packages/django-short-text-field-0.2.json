{"info": {"author": "Andrew Foote", "author_email": "footeandrew1@gmail.com", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Framework :: Django", "Framework :: Django :: 2.1", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3.7", "Topic :: Internet :: WWW/HTTP", "Topic :: Internet :: WWW/HTTP :: Dynamic Content"], "description": "# Short Text Field for Django\n\nA very simple Django app that adds a `ShortTextField` model field class, which\nis treated like a `TextField` in the database (i.e. the data is stored in the\ndatabase with the `text` rather than the `varchar` type, and the developer does\nnot need to specify a `max_length`), but like a `CharField` in forms (i.e. it\nuses a single-line input). This is ideal for PostgreSQL, which recommends the\n'text' type in a wider variety of circumstances than other commonly-used\ndatabase backends (see the [PostgreSQL docs]\n(https://www.postgresql.org/docs/9.1/static/datatype-character.html)).\n\n## Usage\n\n1. Add `'short_text_field'` to your `INSTALLED_APPS` setting like this:\n\n       INSTALLED_APPS = [\n           ...\n    \t     'short_text_field',\n       ]\n\n2. Add a `ShortTextField` to a model like this:\n\n       from short_text_field.models import ShortTextField\n\n       ...\n\n\t     class ExampleModel(models.Model):\n\t\t       ...\n\t\t       example_field = ShortTextField\n\n3. A model with a `ShortTextField` should be registered in the admin site using\n   `short_text_field.admin.ModelAdmin`.\n\n       admin.site.register(ExampleModel, short_text_field.admin.ModelAdmin)\n\n    A subclass of this class will also work:\n\n       class ExampleModelAdmin(short_text_field.admin.ModelAdmin):\n           model = ExampleModel\n           ...\n\n       admin.site.register(ExampleModel, ExampleModelAdmin)\n\n   If you have a hierarchy of `ModelAdmin` subclasses, you can still\n   incorporate `short_text_field.admin.ModelAdmin` easily as a mixin:\n\n       class ExampleModelAdmin2(short_text_field.admin.ModelAdmin, ExampleModelAdmin1):\n           model = ExampleModel\n           ...\n\n       admin.site.register(ExampleModel, ExampleModelAdmin)\n\n   You can also use a subclass of `short_text_field.admin.AdminSite` for the\n   site, which will make `short_text_field.admin.ModelAdmin` the default\n   `ModelAdmin` subclass to use for registering. In the simplest case, you can\n   just set the `default_site` attribute of the `AdminConfig` class and then\n   register all of your models in the normal way:\n\n       from django.contrib.admin import apps\n       import short_text_field.admin.AdminSite\n\n       ...\n\n       class ExampleAdminConfig(apps.AdminConfig):\n           ...\n           default_site = short_text_field.admin.AdminSite\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://www.example.com/", "keywords": "", "license": "BSD License", "maintainer": "", "maintainer_email": "", "name": "django-short-text-field-0.2", "package_url": "https://pypi.org/project/django-short-text-field-0.2/", "platform": "", "project_url": "https://pypi.org/project/django-short-text-field-0.2/", "project_urls": {"Homepage": "https://www.example.com/"}, "release_url": "https://pypi.org/project/django-short-text-field-0.2/0.2/", "requires_dist": null, "requires_python": "", "summary": "A Django app which adds a ShortTextField model field, whichis like a TextField in the database and like a CharField informs.", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Short Text Field for Django</h1>\n<p>A very simple Django app that adds a <code>ShortTextField</code> model field class, which\nis treated like a <code>TextField</code> in the database (i.e. the data is stored in the\ndatabase with the <code>text</code> rather than the <code>varchar</code> type, and the developer does\nnot need to specify a <code>max_length</code>), but like a <code>CharField</code> in forms (i.e. it\nuses a single-line input). This is ideal for PostgreSQL, which recommends the\n'text' type in a wider variety of circumstances than other commonly-used\ndatabase backends (see the [PostgreSQL docs]\n(<a href=\"https://www.postgresql.org/docs/9.1/static/datatype-character.html\" rel=\"nofollow\">https://www.postgresql.org/docs/9.1/static/datatype-character.html</a>)).</p>\n<h2>Usage</h2>\n<ol>\n<li>\n<p>Add <code>'short_text_field'</code> to your <code>INSTALLED_APPS</code> setting like this:</p>\n<pre><code>INSTALLED_APPS = [\n    ...\n      'short_text_field',\n]\n</code></pre>\n</li>\n<li>\n<p>Add a <code>ShortTextField</code> to a model like this:</p>\n<pre><code>from short_text_field.models import ShortTextField\n\n...\n\n  class ExampleModel(models.Model):\n        ...\n        example_field = ShortTextField\n</code></pre>\n</li>\n<li>\n<p>A model with a <code>ShortTextField</code> should be registered in the admin site using\n<code>short_text_field.admin.ModelAdmin</code>.</p>\n<pre><code>admin.site.register(ExampleModel, short_text_field.admin.ModelAdmin)\n</code></pre>\n<p>A subclass of this class will also work:</p>\n<pre><code>class ExampleModelAdmin(short_text_field.admin.ModelAdmin):\n    model = ExampleModel\n    ...\n\nadmin.site.register(ExampleModel, ExampleModelAdmin)\n</code></pre>\n<p>If you have a hierarchy of <code>ModelAdmin</code> subclasses, you can still\nincorporate <code>short_text_field.admin.ModelAdmin</code> easily as a mixin:</p>\n<pre><code>class ExampleModelAdmin2(short_text_field.admin.ModelAdmin, ExampleModelAdmin1):\n    model = ExampleModel\n    ...\n\nadmin.site.register(ExampleModel, ExampleModelAdmin)\n</code></pre>\n<p>You can also use a subclass of <code>short_text_field.admin.AdminSite</code> for the\nsite, which will make <code>short_text_field.admin.ModelAdmin</code> the default\n<code>ModelAdmin</code> subclass to use for registering. In the simplest case, you can\njust set the <code>default_site</code> attribute of the <code>AdminConfig</code> class and then\nregister all of your models in the normal way:</p>\n<pre><code>from django.contrib.admin import apps\nimport short_text_field.admin.AdminSite\n\n...\n\nclass ExampleAdminConfig(apps.AdminConfig):\n    ...\n    default_site = short_text_field.admin.AdminSite\n</code></pre>\n</li>\n</ol>\n\n          </div>"}, "last_serial": 4375697, "releases": {"0.2": [{"comment_text": "", "digests": {"md5": "b92539d99ff0bd9edac54b154062e24b", "sha256": "2252dfdbfd9a3b9b5f49eb1c8efb896e1235ec423987ef292e0b192e0668a63e"}, "downloads": -1, "filename": "django_short_text_field_0.2-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "b92539d99ff0bd9edac54b154062e24b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7275, "upload_time": "2018-10-14T23:44:36", "upload_time_iso_8601": "2018-10-14T23:44:36.658988Z", "url": "https://files.pythonhosted.org/packages/a7/06/f09d2dd339e09b8c910c12011732cfcec10af8435baadbe0604959e94611/django_short_text_field_0.2-0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "130ccb9a1f25c3ea5d9ddc4b6a62e4b0", "sha256": "46a98bdb5a94b15d35c820bef92791ab43ea0233248bdfc6c3bd5341c123dd9a"}, "downloads": -1, "filename": "django-short-text-field-0.2-0.2.tar.gz", "has_sig": false, "md5_digest": "130ccb9a1f25c3ea5d9ddc4b6a62e4b0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3698, "upload_time": "2018-10-14T23:44:38", "upload_time_iso_8601": "2018-10-14T23:44:38.975415Z", "url": "https://files.pythonhosted.org/packages/49/90/33efdebd6dcdb907ce40e42ae009001bf818078e4f4446e65dc3607a28f4/django-short-text-field-0.2-0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b92539d99ff0bd9edac54b154062e24b", "sha256": "2252dfdbfd9a3b9b5f49eb1c8efb896e1235ec423987ef292e0b192e0668a63e"}, "downloads": -1, "filename": "django_short_text_field_0.2-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "b92539d99ff0bd9edac54b154062e24b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7275, "upload_time": "2018-10-14T23:44:36", "upload_time_iso_8601": "2018-10-14T23:44:36.658988Z", "url": "https://files.pythonhosted.org/packages/a7/06/f09d2dd339e09b8c910c12011732cfcec10af8435baadbe0604959e94611/django_short_text_field_0.2-0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "130ccb9a1f25c3ea5d9ddc4b6a62e4b0", "sha256": "46a98bdb5a94b15d35c820bef92791ab43ea0233248bdfc6c3bd5341c123dd9a"}, "downloads": -1, "filename": "django-short-text-field-0.2-0.2.tar.gz", "has_sig": false, "md5_digest": "130ccb9a1f25c3ea5d9ddc4b6a62e4b0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3698, "upload_time": "2018-10-14T23:44:38", "upload_time_iso_8601": "2018-10-14T23:44:38.975415Z", "url": "https://files.pythonhosted.org/packages/49/90/33efdebd6dcdb907ce40e42ae009001bf818078e4f4446e65dc3607a28f4/django-short-text-field-0.2-0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:53:29 2020"}