{"info": {"author": "Alekey Osadchuk", "author_email": "osdalex@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Build Tools"], "description": "# ConfJ\n\nPackage is used to load config from json files. Path to config can lead either\nto directory with a bunch of json files, or to a single json file. Contents is\nparsed and stored into config object, allowing attribute-based access to \ndifferent options.\n\n[![Build Status](https://travis-ci.com/aleosd/confj.svg?branch=master)](https://travis-ci.com/aleosd/confj)\n[![Say Thanks!](https://img.shields.io/badge/Say%20Thanks-!-1EAEDB.svg)](https://saythanks.io/to/aleosd)\n\n## Installation\n\nPackage can be installed with pip:\n\n```bash\npip install confj\n```\n\n## Usage\n\nUsage of this utility is very simple: import `Config` class and load your config\nwith `load` method. Path to configs might be set via environment variable\n`JSON_CONFIG_PATH` or passed directly to the `load` call:\n\n```python\nfrom confj import Config\n\n\nconfig = Config()\nconfig.load('/path/to/config')\n```\n\nIf path to config is a directory, each file will be available as an attribute\nof `config` object. Otherwise, if path is a file, `config` object will store\nparsed json from given file, allowing access to data via attributes.\n\nConfig can be loaded during initialization step, just set `autoload` parameter\nto `True`. Optionally path to load configs from might be passed during\ninitialization.\n\n```python\nfrom confj import Config\n\n\nconfig = Config(default_config_path='/path/to/config', autoload=True)\n```\n\nAfter config is loaded, it's options are accessible via attributes of `config`\nobject, ot `dict`-like syntax:\n\n```python\n>>> config.username\n'user'\n\n>>> config['username']\n'user'\n\n>>> config.get('username')\n'user'\n``` \n\n### Config search precedence\n\n1. If you directly call `load` method with `config_path` passed as parameter,\nthen this path is used.\n2. If no `config_path` provided or `autoload` option was used,\nthen `default_config_path` from initialization step is used.\n3. The last option is to set `JSON_CONFIG_PATH` environment value. If the search\nis failed on all three steps, then `ConfigException` is raised.\n\n\n### Load from python object\n\nConfig may be loaded from python object:\n\n```python\nfrom confj import Config\n\n\nconfig = Config()\ndata = {'username': 'user', 'password': 'pass'}\n\n\nconfig.load_from_obj(data)\n\nassert config.username == 'username'\nassert config.password == 'pass'\n```\n\n### Set/change config data\n\nConfig data may be changed or added to current config with `set` method:\n\n```python\nfrom confj import Config\n\n\nconfig = Config()\ndata = {'username': 'user', 'password': 'pass'}\n\n\nconfig.load_from_obj(data)\nconfig.set('connection', {'port': 5432, 'host': 'localhost'})\n\nassert config.connetcion.port == 5432\nassert config.connection.host == 'localhost'\n```\n\n### Available methods\n\nAll `config` object's method names are starting with `c_`, to avoid possible\nclash with possible config options\n\n* `c_format` returns pretty formatted sting representing config;\n* `c_pprint` outputs formatted config to stdout;\n* `c_validate` validates config against given json schema. See `Validation`\nsection below.\n\n### Validation\n\nConfig must be a valid json object, so we can validate it against provided\njson schema. To use config validation `jsonschema` package must be installed.\nIt might be done as a separate step as\n\n```bash\npip install jsonschema\n```\n\nor during `confj` installation time:\n\n```bash\npip install confj[validation]\n```\n\nThen config validation can be done with `c_validate` method:\n\n```python\nfrom confj import Config\n\nconfig = Config(default_config_path='/path/to/config', autoload=True)\nschema = {\"type\": \"object\"}\nis_valid = config.c_validate(schema)\n```\n\nBy default `c_validate` will return either `True` of `False`. To see actual\nvalidation error just pass `do_raise=True` as additional parameter, and catch\n`ValidationError` later:\n\n```python\nfrom confj import Config\nfrom jsonschema import ValidationError\n\nconfig = Config(default_config_path='/path/to/config', autoload=True)\nschema = {\"type\": \"object\"}\n\ntry:\n    config.c_validate(schema, do_raise=True)\nexcept ValidationError as err:\n    print(f'Looks like config is invalid: {err}')\n```\n\nTo read more on json validation one can at\n[json-schema.org](https://json-schema.org/understanding-json-schema/index.html)", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/aleosd/confj", "keywords": "json configs loader", "license": "", "maintainer": "", "maintainer_email": "", "name": "confj", "package_url": "https://pypi.org/project/confj/", "platform": "", "project_url": "https://pypi.org/project/confj/", "project_urls": {"Bug Reports": "https://github.com/aleosd/confj/issues", "Homepage": "https://github.com/aleosd/confj", "Say Thanks!": "https://saythanks.io/to/aleosd", "Source": "https://github.com/aleosd/confj/"}, "release_url": "https://pypi.org/project/confj/0.2.4/", "requires_dist": null, "requires_python": ">=3.5, <4", "summary": "Load configs from json files", "version": "0.2.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>ConfJ</h1>\n<p>Package is used to load config from json files. Path to config can lead either\nto directory with a bunch of json files, or to a single json file. Contents is\nparsed and stored into config object, allowing attribute-based access to\ndifferent options.</p>\n<p><a href=\"https://travis-ci.com/aleosd/confj\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/899fc6f19dc26aa61ecf6c3b202da1edf8a0c68b/68747470733a2f2f7472617669732d63692e636f6d2f616c656f73642f636f6e666a2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://saythanks.io/to/aleosd\" rel=\"nofollow\"><img alt=\"Say Thanks!\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/51b7f145f134a99621f186ddcdb0af646a24c8aa/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f5361792532305468616e6b732d212d3145414544422e737667\"></a></p>\n<h2>Installation</h2>\n<p>Package can be installed with pip:</p>\n<pre>pip install confj\n</pre>\n<h2>Usage</h2>\n<p>Usage of this utility is very simple: import <code>Config</code> class and load your config\nwith <code>load</code> method. Path to configs might be set via environment variable\n<code>JSON_CONFIG_PATH</code> or passed directly to the <code>load</code> call:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">confj</span> <span class=\"kn\">import</span> <span class=\"n\">Config</span>\n\n\n<span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">Config</span><span class=\"p\">()</span>\n<span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s1\">'/path/to/config'</span><span class=\"p\">)</span>\n</pre>\n<p>If path to config is a directory, each file will be available as an attribute\nof <code>config</code> object. Otherwise, if path is a file, <code>config</code> object will store\nparsed json from given file, allowing access to data via attributes.</p>\n<p>Config can be loaded during initialization step, just set <code>autoload</code> parameter\nto <code>True</code>. Optionally path to load configs from might be passed during\ninitialization.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">confj</span> <span class=\"kn\">import</span> <span class=\"n\">Config</span>\n\n\n<span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">Config</span><span class=\"p\">(</span><span class=\"n\">default_config_path</span><span class=\"o\">=</span><span class=\"s1\">'/path/to/config'</span><span class=\"p\">,</span> <span class=\"n\">autoload</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>After config is loaded, it's options are accessible via attributes of <code>config</code>\nobject, ot <code>dict</code>-like syntax:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">username</span>\n<span class=\"s1\">'user'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s1\">'username'</span><span class=\"p\">]</span>\n<span class=\"s1\">'user'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'username'</span><span class=\"p\">)</span>\n<span class=\"s1\">'user'</span>\n</pre>\n<h3>Config search precedence</h3>\n<ol>\n<li>If you directly call <code>load</code> method with <code>config_path</code> passed as parameter,\nthen this path is used.</li>\n<li>If no <code>config_path</code> provided or <code>autoload</code> option was used,\nthen <code>default_config_path</code> from initialization step is used.</li>\n<li>The last option is to set <code>JSON_CONFIG_PATH</code> environment value. If the search\nis failed on all three steps, then <code>ConfigException</code> is raised.</li>\n</ol>\n<h3>Load from python object</h3>\n<p>Config may be loaded from python object:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">confj</span> <span class=\"kn\">import</span> <span class=\"n\">Config</span>\n\n\n<span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">Config</span><span class=\"p\">()</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'username'</span><span class=\"p\">:</span> <span class=\"s1\">'user'</span><span class=\"p\">,</span> <span class=\"s1\">'password'</span><span class=\"p\">:</span> <span class=\"s1\">'pass'</span><span class=\"p\">}</span>\n\n\n<span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">load_from_obj</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">username</span> <span class=\"o\">==</span> <span class=\"s1\">'username'</span>\n<span class=\"k\">assert</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">password</span> <span class=\"o\">==</span> <span class=\"s1\">'pass'</span>\n</pre>\n<h3>Set/change config data</h3>\n<p>Config data may be changed or added to current config with <code>set</code> method:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">confj</span> <span class=\"kn\">import</span> <span class=\"n\">Config</span>\n\n\n<span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">Config</span><span class=\"p\">()</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'username'</span><span class=\"p\">:</span> <span class=\"s1\">'user'</span><span class=\"p\">,</span> <span class=\"s1\">'password'</span><span class=\"p\">:</span> <span class=\"s1\">'pass'</span><span class=\"p\">}</span>\n\n\n<span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">load_from_obj</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s1\">'connection'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'port'</span><span class=\"p\">:</span> <span class=\"mi\">5432</span><span class=\"p\">,</span> <span class=\"s1\">'host'</span><span class=\"p\">:</span> <span class=\"s1\">'localhost'</span><span class=\"p\">})</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">connetcion</span><span class=\"o\">.</span><span class=\"n\">port</span> <span class=\"o\">==</span> <span class=\"mi\">5432</span>\n<span class=\"k\">assert</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">host</span> <span class=\"o\">==</span> <span class=\"s1\">'localhost'</span>\n</pre>\n<h3>Available methods</h3>\n<p>All <code>config</code> object's method names are starting with <code>c_</code>, to avoid possible\nclash with possible config options</p>\n<ul>\n<li><code>c_format</code> returns pretty formatted sting representing config;</li>\n<li><code>c_pprint</code> outputs formatted config to stdout;</li>\n<li><code>c_validate</code> validates config against given json schema. See <code>Validation</code>\nsection below.</li>\n</ul>\n<h3>Validation</h3>\n<p>Config must be a valid json object, so we can validate it against provided\njson schema. To use config validation <code>jsonschema</code> package must be installed.\nIt might be done as a separate step as</p>\n<pre>pip install jsonschema\n</pre>\n<p>or during <code>confj</code> installation time:</p>\n<pre>pip install confj<span class=\"o\">[</span>validation<span class=\"o\">]</span>\n</pre>\n<p>Then config validation can be done with <code>c_validate</code> method:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">confj</span> <span class=\"kn\">import</span> <span class=\"n\">Config</span>\n\n<span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">Config</span><span class=\"p\">(</span><span class=\"n\">default_config_path</span><span class=\"o\">=</span><span class=\"s1\">'/path/to/config'</span><span class=\"p\">,</span> <span class=\"n\">autoload</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"object\"</span><span class=\"p\">}</span>\n<span class=\"n\">is_valid</span> <span class=\"o\">=</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">c_validate</span><span class=\"p\">(</span><span class=\"n\">schema</span><span class=\"p\">)</span>\n</pre>\n<p>By default <code>c_validate</code> will return either <code>True</code> of <code>False</code>. To see actual\nvalidation error just pass <code>do_raise=True</code> as additional parameter, and catch\n<code>ValidationError</code> later:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">confj</span> <span class=\"kn\">import</span> <span class=\"n\">Config</span>\n<span class=\"kn\">from</span> <span class=\"nn\">jsonschema</span> <span class=\"kn\">import</span> <span class=\"n\">ValidationError</span>\n\n<span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">Config</span><span class=\"p\">(</span><span class=\"n\">default_config_path</span><span class=\"o\">=</span><span class=\"s1\">'/path/to/config'</span><span class=\"p\">,</span> <span class=\"n\">autoload</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"object\"</span><span class=\"p\">}</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">c_validate</span><span class=\"p\">(</span><span class=\"n\">schema</span><span class=\"p\">,</span> <span class=\"n\">do_raise</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">except</span> <span class=\"n\">ValidationError</span> <span class=\"k\">as</span> <span class=\"n\">err</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'Looks like config is invalid: </span><span class=\"si\">{</span><span class=\"n\">err</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n</pre>\n<p>To read more on json validation one can at\n<a href=\"https://json-schema.org/understanding-json-schema/index.html\" rel=\"nofollow\">json-schema.org</a></p>\n\n          </div>"}, "last_serial": 7004182, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "f5afaa4dd308064c6516418235a2fb98", "sha256": "331249350b2edb3c503b18e97af8411fb80f52ee3b1c6f945326f97db80a335e"}, "downloads": -1, "filename": "confj-0.1.0.tar.gz", "has_sig": false, "md5_digest": "f5afaa4dd308064c6516418235a2fb98", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5, <4", "size": 2962, "upload_time": "2019-04-22T01:40:59", "upload_time_iso_8601": "2019-04-22T01:40:59.784648Z", "url": "https://files.pythonhosted.org/packages/ea/c5/3364c09a2b8b8091fe136e77f6c9ad39570790449e2f05cd39b69f0c2f33/confj-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "1925d76b8eefc8a9982f78130ccf1c9d", "sha256": "f3589c037b19daff58871f46c2e06717e6a820b9dcc2dd83486d6902620809e2"}, "downloads": -1, "filename": "confj-0.1.1.tar.gz", "has_sig": false, "md5_digest": "1925d76b8eefc8a9982f78130ccf1c9d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5, <4", "size": 3012, "upload_time": "2019-04-22T03:13:15", "upload_time_iso_8601": "2019-04-22T03:13:15.271118Z", "url": "https://files.pythonhosted.org/packages/8e/f0/cd75a4db632f1d513b7c40b2f733aeaf2e00ef5905c76277fc83a960df71/confj-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "e53cd088da4635117cea6d5d59f3ca2f", "sha256": "e3d5f0ca3a20ce660d8cdcb79804e7e86a69b6c7134ec1a08b26eeddca8a89b6"}, "downloads": -1, "filename": "confj-0.1.2.tar.gz", "has_sig": false, "md5_digest": "e53cd088da4635117cea6d5d59f3ca2f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5, <4", "size": 3473, "upload_time": "2019-04-28T08:20:39", "upload_time_iso_8601": "2019-04-28T08:20:39.726779Z", "url": "https://files.pythonhosted.org/packages/39/98/a62e6b2f68249bee38949b56ca8bdf87121844e9f97962ccff9d19d21084/confj-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "1915296c748ba4042545120ef2ca5bdd", "sha256": "63e27b4f5df6f1c50148095ba828d04916bc215f05579a56c2e0b2cf91251cd1"}, "downloads": -1, "filename": "confj-0.1.3.tar.gz", "has_sig": false, "md5_digest": "1915296c748ba4042545120ef2ca5bdd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5, <4", "size": 4759, "upload_time": "2019-06-01T11:09:52", "upload_time_iso_8601": "2019-06-01T11:09:52.572444Z", "url": "https://files.pythonhosted.org/packages/aa/56/9b5008fc57bf13e56864665cb94fa2bc4d8c54bc36b14ce53b1f68b0626b/confj-0.1.3.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "45a5d27d3c7e26196a911045656064cc", "sha256": "17e6ea2c4c27be609ed2b1200bb43c2d8931685107b811d1478fca78e7296b13"}, "downloads": -1, "filename": "confj-0.2.0.tar.gz", "has_sig": false, "md5_digest": "45a5d27d3c7e26196a911045656064cc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5, <4", "size": 4975, "upload_time": "2019-06-23T07:43:38", "upload_time_iso_8601": "2019-06-23T07:43:38.010790Z", "url": "https://files.pythonhosted.org/packages/d5/66/81f8bfbd1a0d00372d244a2d72a712ad5ff7f51c27f18cf8a7a2c750eca3/confj-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "81c79a1934ba274cac753dd08c8bd33a", "sha256": "8341c9fddd97571e80f220f596d858935e297d6c66c029c8bf952dd787cdab63"}, "downloads": -1, "filename": "confj-0.2.1.tar.gz", "has_sig": false, "md5_digest": "81c79a1934ba274cac753dd08c8bd33a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5, <4", "size": 4992, "upload_time": "2019-07-26T02:18:08", "upload_time_iso_8601": "2019-07-26T02:18:08.658863Z", "url": "https://files.pythonhosted.org/packages/c5/e1/055352568921f0d4fe3c0ce18a4e885e1e5346dc37cf3b23f449a017e8c6/confj-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "f10359c244f2f4de6ff6e93b83caa6c7", "sha256": "4a6b3a14f9f7f3de9f16a4278a0c4c0c8141edcc5178c337922a089ec56bb7ce"}, "downloads": -1, "filename": "confj-0.2.2.tar.gz", "has_sig": false, "md5_digest": "f10359c244f2f4de6ff6e93b83caa6c7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5, <4", "size": 5408, "upload_time": "2019-08-03T03:31:35", "upload_time_iso_8601": "2019-08-03T03:31:35.336367Z", "url": "https://files.pythonhosted.org/packages/60/8f/02108bc351459c00074a1910c4ffae475702ab5af6d63d902fe341cd388f/confj-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "daeb7a64f2a9c4abf17ae841ec32c47c", "sha256": "0eae3d252c6be0067d12dd080a8959fb4e99ce474c982d8dda1eb01f88bb2c07"}, "downloads": -1, "filename": "confj-0.2.3.tar.gz", "has_sig": false, "md5_digest": "daeb7a64f2a9c4abf17ae841ec32c47c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5, <4", "size": 5409, "upload_time": "2019-08-16T15:44:42", "upload_time_iso_8601": "2019-08-16T15:44:42.211069Z", "url": "https://files.pythonhosted.org/packages/bd/88/ec7713aca77082e45c7751435f43a9405c0df43df91189ec3908895c9e74/confj-0.2.3.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "c1ec383e1173018a195289e4a24e0be1", "sha256": "342711edcdab3cd13911c86d54d408c91f8ff18b4dbb00687192796e8e1cf518"}, "downloads": -1, "filename": "confj-0.2.4.tar.gz", "has_sig": false, "md5_digest": "c1ec383e1173018a195289e4a24e0be1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5, <4", "size": 5437, "upload_time": "2020-04-12T12:18:55", "upload_time_iso_8601": "2020-04-12T12:18:55.916967Z", "url": "https://files.pythonhosted.org/packages/16/fb/c0dfac5bd5ad7a8dd96e52e63542e6025182f1d93bd9653b6f7651d574be/confj-0.2.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c1ec383e1173018a195289e4a24e0be1", "sha256": "342711edcdab3cd13911c86d54d408c91f8ff18b4dbb00687192796e8e1cf518"}, "downloads": -1, "filename": "confj-0.2.4.tar.gz", "has_sig": false, "md5_digest": "c1ec383e1173018a195289e4a24e0be1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5, <4", "size": 5437, "upload_time": "2020-04-12T12:18:55", "upload_time_iso_8601": "2020-04-12T12:18:55.916967Z", "url": "https://files.pythonhosted.org/packages/16/fb/c0dfac5bd5ad7a8dd96e52e63542e6025182f1d93bd9653b6f7651d574be/confj-0.2.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:50 2020"}