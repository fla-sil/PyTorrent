{"info": {"author": "Sebastian Schaffer", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "======\njsoner\n======\n\n.. image:: https://img.shields.io/travis/sschaffer92/jsoner.svg\n        :target: https://travis-ci.org/sschaffer92/jsoner\n\n.. image:: https://readthedocs.org/projects/jsoner/badge/?version=latest\n        :target: https://jsoner.readthedocs.io/en/latest/?badge=latest\n        :alt: Documentation Status\n\n.. image:: https://coveralls.io/repos/github/sschaffer92/jsoner/badge.svg\n        :target: https://coveralls.io/github/sschaffer92/jsoner\n        :alt: Coverage\n\n* Free software: MIT license\n\n* Documentation: https://jsoner.readthedocs.io.\n\n*Jsoner* is a package aiming for making conversion to and from json easier.\n\n\nInstallation\n------------\n\n\nStable release\n~~~~~~~~~~~~~~\n\nTo install jsoner, run this command in your terminal:\n\n.. code-block:: console\n\n    $ pip install jsoner\n\nThis is the preferred method to install jsoner, as it will always install the most recent stable release.\n\n\nFrom sources\n~~~~~~~~~~~~\n\nThe sources for jsoner can be downloaded from the `Github repo`_.\n\nYou can either clone the public repository:\n\n.. code-block:: console\n\n    $ git clone git://github.com/sschaffer92/jsoner\n\nOr download the `tarball`_:\n\n.. code-block:: console\n\n    $ curl  -OL https://github.com/sschaffer92/jsoner/tarball/master\n\nOnce you have a copy of the source, you can install it with:\n\n.. code-block:: console\n\n    $ python setup.py install\n\n\n.. _Github repo: https://github.com/sschaffer92/jsoner\n.. _tarball: https://github.com/sschaffer92/jsoner/tarball/master\n\n\nUsage\n-----\n\n*Jsoner* builds on the builtin *json* python package. Since you cannot serialize object to json by\ndefault it can be useful to have a nice way for doing so. This package provides three different ways to\nachieve this:\n\n- provide an ``to_dict`` and ``from_dict`` method:\n\n.. code-block:: python\n\n    from jsoner import dumps, loads\n    class A:\n        def __init__(self, a):\n            self.a = a\n\n        def to_dict(self) -> dict:\n            return {'a': self.a}\n\n        @classmethod\n        def from_dict(cls, data: dict) -> 'A':\n            return A(**data)\n\n    a = A(42)\n    data = dumps(a)\n    a = loads(data)\n\n\n- or provide an ``to_str`` and ``from_str`` method:\n\n.. code-block:: python\n\n    from jsoner import dumps, loads\n    class A:\n        def __init__(self, a):\n            self.a = a\n\n        def to_str(self) -> str:\n            return str(self.a)\n\n        @classmethod\n        def from_str(cls, data: str) -> 'A':\n            return A(data)\n\n    a = A('foo')\n    data = dumps(a)\n    a = loads(data)\n\n\n- or implement a conversion function pair (This way is especially useful if\n  you don't have direct access to the class definition):\n\n.. code-block:: python\n\n    from jsoner import dumps, loads\n    from jsoner import encoders, decoders\n    class A:\n        def __init__(self, a):\n            self.a = a\n\n    @encoders.register(A)\n    def encode_a(a: 'A') -> str:\n        return a.a\n\n    @decoders.register(A)\n    def decode_a(data: str) -> str:\n        return A(data)\n\n    a = A('foo')\n    data = dumps(a)\n    a = loads(data)\n\n*Jsoner* can also deal with nested objects as long they are also serializable as described above.\n\n\n*Celery* and *Django*\n~~~~~~~~~~~~~~~~~~~~~\n\nOne good use case for the *Jsoner* package is the *Celery* serialization of tasks and task results.\n\nTo make *Celery* use *Jsoner* you can apply the following settings:\n\n.. code-block:: python\n\n    from celery import app\n    from kombu import serialization\n\n    from jsoner import dumps, loads\n\n    # register Jsoner\n    serialization.register('jsoner', dumps, loads, content_type='application/json')\n\n    app = Celery('Test')\n\n    # tell celery to use Jsoner\n    app.conf.update(\n        accept_content=['jsoner'],\n        task_serializer='jsoner',\n        result_serializer='jsoner',\n        result_backend='rpc'\n    )\n\n    # Celery can now serialize objects which can be serialized by Jsoner.\n    class A:\n        def __init__(self, foo):\n            self.foo = foo\n\n        @classmethod\n        def from_dict(cls, data: dict) -> 'A':\n            return A(**data)\n\n        def to_dict(self):\n            return {'foo': self.foo}\n\n    a = A('bar')\n\n    @app.task\n    def task(obj: A) -> 'A':\n        ...\n        return obj\n\n    a = task.delay(a).get()\n\n\nThis way you can easily serialize django model instances and pass them to the\n*Celery* task.\n\n.. code-block:: python\n   :name: models.py\n\n    from django.db import models\n\n    class Person(models.Model):\n        first_name = models.CharField(max_length=30)\n        last_name = models.CharField(max_length=30)\n\n\nThen you can just pass the model to the celery task directly:\n\n.. code-block:: python\n\n    from django.db.models import Model\n    from jsoner import encoders, decoders\n\n    from .models import Person\n\n    # Create a conversion function pair which just saved the primary key.\n    @encoders.register(Model)\n    def to_primary_key(model: Model) -> int:\n        return model.pk\n\n    # Load object from the primary key.\n    @decoders.register(Model)\n    def from_primary_key(pk: int, model_cls: Model) -> Model:\n        return model_cls.objects.get(pk=pk)\n\n    p = Person(first_name=\"Foo\", last_name=\"Bar\")\n    p = task.delay(p).get()\n\n\nSimilar you could create a conversion function pair for querysets.\n\n\n=======\nHistory\n=======\n\n0.1.0 (2019-02-18)\n------------------\n\n* First release on PyPI.", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/sschaffer92/jsoner", "keywords": "jsoner json celery django serialization", "license": "MIT license", "maintainer": "", "maintainer_email": "", "name": "jsoner", "package_url": "https://pypi.org/project/jsoner/", "platform": "", "project_url": "https://pypi.org/project/jsoner/", "project_urls": {"Documentation": "https://jsoner.readthedocs.io/en/latest/", "Homepage": "https://github.com/sschaffer92/jsoner", "Source": "https://github.com/sschaffer92/jsoner/", "Tracker": "https://github.com/sschaffer92/jsoner/issues"}, "release_url": "https://pypi.org/project/jsoner/0.2.0/", "requires_dist": null, "requires_python": ">=3.4", "summary": "Jsoner allows you to easily convert your classes to json and back.", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"jsoner\">\n<h2>jsoner</h2>\n<a href=\"https://travis-ci.org/sschaffer92/jsoner\" rel=\"nofollow\"><img alt=\"https://img.shields.io/travis/sschaffer92/jsoner.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bdfd602ccb877a2275b492c781d142cc7d5d3060/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f73736368616666657239322f6a736f6e65722e737667\"></a>\n<a href=\"https://jsoner.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/be61213a0d62213a73dba9fc9bceb2f44fc3bdb9/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f6a736f6e65722f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://coveralls.io/github/sschaffer92/jsoner\" rel=\"nofollow\"><img alt=\"Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8514a2d05e001f5265cd6d23f82a7b64b642f828/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f73736368616666657239322f6a736f6e65722f62616467652e737667\"></a>\n<ul>\n<li>Free software: MIT license</li>\n<li>Documentation: <a href=\"https://jsoner.readthedocs.io\" rel=\"nofollow\">https://jsoner.readthedocs.io</a>.</li>\n</ul>\n<p><em>Jsoner</em> is a package aiming for making conversion to and from json easier.</p>\n<div id=\"installation\">\n<h3>Installation</h3>\n<div id=\"stable-release\">\n<h4>Stable release</h4>\n<p>To install jsoner, run this command in your terminal:</p>\n<pre><span class=\"gp\">$</span> pip install jsoner\n</pre>\n<p>This is the preferred method to install jsoner, as it will always install the most recent stable release.</p>\n</div>\n<div id=\"from-sources\">\n<h4>From sources</h4>\n<p>The sources for jsoner can be downloaded from the <a href=\"https://github.com/sschaffer92/jsoner\" rel=\"nofollow\">Github repo</a>.</p>\n<p>You can either clone the public repository:</p>\n<pre><span class=\"gp\">$</span> git clone git://github.com/sschaffer92/jsoner\n</pre>\n<p>Or download the <a href=\"https://github.com/sschaffer92/jsoner/tarball/master\" rel=\"nofollow\">tarball</a>:</p>\n<pre><span class=\"gp\">$</span> curl  -OL https://github.com/sschaffer92/jsoner/tarball/master\n</pre>\n<p>Once you have a copy of the source, you can install it with:</p>\n<pre><span class=\"gp\">$</span> python setup.py install\n</pre>\n</div>\n</div>\n<div id=\"usage\">\n<h3>Usage</h3>\n<p><em>Jsoner</em> builds on the builtin <em>json</em> python package. Since you cannot serialize object to json by\ndefault it can be useful to have a nice way for doing so. This package provides three different ways to\nachieve this:</p>\n<ul>\n<li>provide an <tt>to_dict</tt> and <tt>from_dict</tt> method:</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">jsoner</span> <span class=\"kn\">import</span> <span class=\"n\">dumps</span><span class=\"p\">,</span> <span class=\"n\">loads</span>\n<span class=\"k\">class</span> <span class=\"nc\">A</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">a</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">to_dict</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">dict</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">a</span><span class=\"p\">}</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">from_dict</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"s1\">'A'</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">A</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">data</span><span class=\"p\">)</span>\n\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">A</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">)</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>or provide an <tt>to_str</tt> and <tt>from_str</tt> method:</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">jsoner</span> <span class=\"kn\">import</span> <span class=\"n\">dumps</span><span class=\"p\">,</span> <span class=\"n\">loads</span>\n<span class=\"k\">class</span> <span class=\"nc\">A</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">a</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">to_str</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">a</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">from_str</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"s1\">'A'</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">A</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">A</span><span class=\"p\">(</span><span class=\"s1\">'foo'</span><span class=\"p\">)</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>or implement a conversion function pair (This way is especially useful if\nyou don\u2019t have direct access to the class definition):</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">jsoner</span> <span class=\"kn\">import</span> <span class=\"n\">dumps</span><span class=\"p\">,</span> <span class=\"n\">loads</span>\n<span class=\"kn\">from</span> <span class=\"nn\">jsoner</span> <span class=\"kn\">import</span> <span class=\"n\">encoders</span><span class=\"p\">,</span> <span class=\"n\">decoders</span>\n<span class=\"k\">class</span> <span class=\"nc\">A</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">a</span>\n\n<span class=\"nd\">@encoders</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">encode_a</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"s1\">'A'</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">a</span>\n\n<span class=\"nd\">@decoders</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">decode_a</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"n\">A</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">A</span><span class=\"p\">(</span><span class=\"s1\">'foo'</span><span class=\"p\">)</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n</pre>\n<p><em>Jsoner</em> can also deal with nested objects as long they are also serializable as described above.</p>\n<div id=\"celery-and-django\">\n<h4><em>Celery</em> and <em>Django</em></h4>\n<p>One good use case for the <em>Jsoner</em> package is the <em>Celery</em> serialization of tasks and task results.</p>\n<p>To make <em>Celery</em> use <em>Jsoner</em> you can apply the following settings:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">celery</span> <span class=\"kn\">import</span> <span class=\"n\">app</span>\n<span class=\"kn\">from</span> <span class=\"nn\">kombu</span> <span class=\"kn\">import</span> <span class=\"n\">serialization</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">jsoner</span> <span class=\"kn\">import</span> <span class=\"n\">dumps</span><span class=\"p\">,</span> <span class=\"n\">loads</span>\n\n<span class=\"c1\"># register Jsoner</span>\n<span class=\"n\">serialization</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"s1\">'jsoner'</span><span class=\"p\">,</span> <span class=\"n\">dumps</span><span class=\"p\">,</span> <span class=\"n\">loads</span><span class=\"p\">,</span> <span class=\"n\">content_type</span><span class=\"o\">=</span><span class=\"s1\">'application/json'</span><span class=\"p\">)</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Celery</span><span class=\"p\">(</span><span class=\"s1\">'Test'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># tell celery to use Jsoner</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">conf</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span>\n    <span class=\"n\">accept_content</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'jsoner'</span><span class=\"p\">],</span>\n    <span class=\"n\">task_serializer</span><span class=\"o\">=</span><span class=\"s1\">'jsoner'</span><span class=\"p\">,</span>\n    <span class=\"n\">result_serializer</span><span class=\"o\">=</span><span class=\"s1\">'jsoner'</span><span class=\"p\">,</span>\n    <span class=\"n\">result_backend</span><span class=\"o\">=</span><span class=\"s1\">'rpc'</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># Celery can now serialize objects which can be serialized by Jsoner.</span>\n<span class=\"k\">class</span> <span class=\"nc\">A</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">foo</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"n\">foo</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">from_dict</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"s1\">'A'</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">A</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">data</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">to_dict</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'foo'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">foo</span><span class=\"p\">}</span>\n\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">A</span><span class=\"p\">(</span><span class=\"s1\">'bar'</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">task</span>\n<span class=\"k\">def</span> <span class=\"nf\">task</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">:</span> <span class=\"n\">A</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"s1\">'A'</span><span class=\"p\">:</span>\n    <span class=\"o\">...</span>\n    <span class=\"k\">return</span> <span class=\"n\">obj</span>\n\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">delay</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n</pre>\n<p>This way you can easily serialize django model instances and pass them to the\n<em>Celery</em> task.</p>\n<pre id=\"models-py\"> <span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n <span class=\"k\">class</span> <span class=\"nc\">Person</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n     <span class=\"n\">first_name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n     <span class=\"n\">last_name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n</pre>\n<p>Then you can just pass the model to the celery task directly:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.db.models</span> <span class=\"kn\">import</span> <span class=\"n\">Model</span>\n<span class=\"kn\">from</span> <span class=\"nn\">jsoner</span> <span class=\"kn\">import</span> <span class=\"n\">encoders</span><span class=\"p\">,</span> <span class=\"n\">decoders</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">.models</span> <span class=\"kn\">import</span> <span class=\"n\">Person</span>\n\n<span class=\"c1\"># Create a conversion function pair which just saved the primary key.</span>\n<span class=\"nd\">@encoders</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">Model</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">to_primary_key</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">Model</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">pk</span>\n\n<span class=\"c1\"># Load object from the primary key.</span>\n<span class=\"nd\">@decoders</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">Model</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">from_primary_key</span><span class=\"p\">(</span><span class=\"n\">pk</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">model_cls</span><span class=\"p\">:</span> <span class=\"n\">Model</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Model</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"n\">model_cls</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">pk</span><span class=\"o\">=</span><span class=\"n\">pk</span><span class=\"p\">)</span>\n\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">Person</span><span class=\"p\">(</span><span class=\"n\">first_name</span><span class=\"o\">=</span><span class=\"s2\">\"Foo\"</span><span class=\"p\">,</span> <span class=\"n\">last_name</span><span class=\"o\">=</span><span class=\"s2\">\"Bar\"</span><span class=\"p\">)</span>\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">delay</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n</pre>\n<p>Similar you could create a conversion function pair for querysets.</p>\n</div>\n</div>\n</div>\n<div id=\"history\">\n<h2>History</h2>\n<h2 id=\"id1\"><span class=\"section-subtitle\">0.1.0 (2019-02-18)</span></h2>\n<ul>\n<li>First release on PyPI.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 5005211, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "64110a3e0243aa8cf6127094e931a628", "sha256": "d838411db82ff0bf5674e04852664762158b3a4c61144d318005e0fd3828f2ce"}, "downloads": -1, "filename": "jsoner-0.2.0.tar.gz", "has_sig": false, "md5_digest": "64110a3e0243aa8cf6127094e931a628", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 26105, "upload_time": "2019-03-29T21:49:56", "upload_time_iso_8601": "2019-03-29T21:49:56.527937Z", "url": "https://files.pythonhosted.org/packages/8b/f1/b9154c7bb3fd86dc1c4de6484f378d25acdc0c05fcb0f3411bcbcc98eefe/jsoner-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "64110a3e0243aa8cf6127094e931a628", "sha256": "d838411db82ff0bf5674e04852664762158b3a4c61144d318005e0fd3828f2ce"}, "downloads": -1, "filename": "jsoner-0.2.0.tar.gz", "has_sig": false, "md5_digest": "64110a3e0243aa8cf6127094e931a628", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 26105, "upload_time": "2019-03-29T21:49:56", "upload_time_iso_8601": "2019-03-29T21:49:56.527937Z", "url": "https://files.pythonhosted.org/packages/8b/f1/b9154c7bb3fd86dc1c4de6484f378d25acdc0c05fcb0f3411bcbcc98eefe/jsoner-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:49 2020"}