{"info": {"author": "City of Austin", "author_email": "transportation.data@austintexas.gov", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: Public Domain", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# atd-mds-client\nA Python utility to interact data endpoints compliant with the [Mobility Data Specification](https://github.com/openmobilityfoundation/mobility-data-specification/tree/master/provider), as designed by the Open Mobility Foundation.\n\nThis client was inspired by the [City of Santa Monica MDS Provider Client](https://github.com/CityofSantaMonica/mds-provider).\n\n## Installation\n\nInstall the library:\n\n```python\npip install atd-mds-client\n```\n\nOr the development branch:\n```python\npip install atd-mds-client-dev\n```\n\n## Getting started\n\n```python\n# Import standard libraies:\nimport json\nfrom datetime import datetime\n\n# Import the MDS Library:\nfrom mds import *\n\n# Provider Configuration\nprovider_configuration = {\n    # Authentication type: \"OAuth\", \"Bearer\", \"Basic\" or \"Custom\"\n    \"auth_type\": \"Bearer\",\n    # If you have a Bearer authentication, provide the token:\n    \"token\": \"...secret...token...here\",\n    # Provide the URL endpoint of the provider:\n    \"mds_api_url\": \"https://mds.your-scooter-company.com/api/endpoint/v1\",\n    # (Optional) The Provider ID\n    \"provider_id\": \"...mds...provider...id\",\n    # Any additional HTTP Headers:\n    \"headers\": {\n        \"App-Version\": \"3.0.0\"\n    },\n    # Any additional settings:\n    \"time_format\": \"unix\",\n    \"delay\": 1, # Delay in seconds per http request\n    \"max_attempts\": 3, # Max attempts if the http request fails\n    \"paging\": True, # Enable/Disable pagination\n    \"timeout\": 10, # Maximum time allowed for an HTTP request in seconds\n    \"version\": \"0.3.0\", # MDS Version: \"0.2.0\", \"0.3.0\" or \"0.4.0\" or remove for custom driver\n}\n\n# Builds a time-zone aware date time range\nmy_time = MDSTimeZone(\n    date_time_now=datetime(2020, 1, 1, 20), # Either Now or any date as specified by datetime, becomes end_time\n    offset=3600,             # Subtract 1 hour from date_time_now and becomes start_time\n    time_zone=\"US/Central\",  # US/Central\n)\n\n # Initialize the MDS Client\nmds_client = MDSClient(config=provider_configuration, provider=\"amazing scooters\")\n\n# Get trips\ntrips = mds_client.get_trips(\n    # First the start time for the query\n    start_time=my_time.get_time_start(\n        utc=True, # Transforms local time into UTC\n        unix=True # Transforms format from ISO into Unix Epoch time\n    ),\n    # Now the end time:\n    end_time=my_time.get_time_end(\n        utc=True, # Transforms local time into UTC\n        unix=True # Transforms format from ISO into Unix Epoch time\n    )\n)\n\nprint(json.dumps(trips))\n```\n\n# CD/CI\n\nWe make use of CircleCI for our deployments, you can see the build script in the `.circleci` folder in this repo. The basic process consists of a couple steps:\n\n1. Generate basic variables based on the current branch\n2. Change the package name based on the current branch\n3. Builds the package\n4. Deploys with twine \n\n**In short, the only way to deploy a package is to change it's version number manually in `setup.py`.** If the changes were made in the master branch, the deployment will go into production, for the dev branch, a postfix will be added to the name of the package before it is deployed to pypi. \n\n# Development\n\nWe currently have two branches: master and dev. The master branch is used in production, our dev is meant for development and testing. \n\n### Dev & Master Postfix\n\nFor the dev branch, the build script will attach a post fix `\"-dev\"` to the package name specified in `setup.py`. For example, in the dev branch file `setup.py` we see the package name is `name=\"atd-mds-client\"` and the current version was `0.0.X`, if you were to change the version number and commit to the dev branch, the deployment script will deploy to pypi as `atd-mds-client-dev` with the new version.\n\n### Pull Requests & Local Development\n\nPull requests are ignored by the CD/CI pipeline, meaning they do not get built. If you need a package built for dev testing:\n\n- Test your script locally\n- Create a PR against the dev branch, make sure you change the version number in setup.py\n- Merge your PR branch to the dev branch\n\nHow about local development?\n\nAt the moment, local development is open-ended. You may use any python mechanism or style when including source python packages in your development and local tests.\n\n# License\n\nThe package is distributed under the GPL 3.0 license.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/cityofaustin/atd-mds-client/tree/atd-mds-client", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "atd-mds-client-dev", "package_url": "https://pypi.org/project/atd-mds-client-dev/", "platform": "", "project_url": "https://pypi.org/project/atd-mds-client-dev/", "project_urls": {"Homepage": "https://github.com/cityofaustin/atd-mds-client/tree/atd-mds-client"}, "release_url": "https://pypi.org/project/atd-mds-client-dev/0.0.3/", "requires_dist": ["requests", "pytz"], "requires_python": "", "summary": "A Python utility to interact data endpoints compliant with the Mobility Data Specification, as designed by the Open Mobility Foundation", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>atd-mds-client</h1>\n<p>A Python utility to interact data endpoints compliant with the <a href=\"https://github.com/openmobilityfoundation/mobility-data-specification/tree/master/provider\" rel=\"nofollow\">Mobility Data Specification</a>, as designed by the Open Mobility Foundation.</p>\n<p>This client was inspired by the <a href=\"https://github.com/CityofSantaMonica/mds-provider\" rel=\"nofollow\">City of Santa Monica MDS Provider Client</a>.</p>\n<h2>Installation</h2>\n<p>Install the library:</p>\n<pre><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">atd</span><span class=\"o\">-</span><span class=\"n\">mds</span><span class=\"o\">-</span><span class=\"n\">client</span>\n</pre>\n<p>Or the development branch:</p>\n<pre><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">atd</span><span class=\"o\">-</span><span class=\"n\">mds</span><span class=\"o\">-</span><span class=\"n\">client</span><span class=\"o\">-</span><span class=\"n\">dev</span>\n</pre>\n<h2>Getting started</h2>\n<pre><span class=\"c1\"># Import standard libraies:</span>\n<span class=\"kn\">import</span> <span class=\"nn\">json</span>\n<span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">datetime</span>\n\n<span class=\"c1\"># Import the MDS Library:</span>\n<span class=\"kn\">from</span> <span class=\"nn\">mds</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"c1\"># Provider Configuration</span>\n<span class=\"n\">provider_configuration</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"c1\"># Authentication type: \"OAuth\", \"Bearer\", \"Basic\" or \"Custom\"</span>\n    <span class=\"s2\">\"auth_type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Bearer\"</span><span class=\"p\">,</span>\n    <span class=\"c1\"># If you have a Bearer authentication, provide the token:</span>\n    <span class=\"s2\">\"token\"</span><span class=\"p\">:</span> <span class=\"s2\">\"...secret...token...here\"</span><span class=\"p\">,</span>\n    <span class=\"c1\"># Provide the URL endpoint of the provider:</span>\n    <span class=\"s2\">\"mds_api_url\"</span><span class=\"p\">:</span> <span class=\"s2\">\"https://mds.your-scooter-company.com/api/endpoint/v1\"</span><span class=\"p\">,</span>\n    <span class=\"c1\"># (Optional) The Provider ID</span>\n    <span class=\"s2\">\"provider_id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"...mds...provider...id\"</span><span class=\"p\">,</span>\n    <span class=\"c1\"># Any additional HTTP Headers:</span>\n    <span class=\"s2\">\"headers\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"App-Version\"</span><span class=\"p\">:</span> <span class=\"s2\">\"3.0.0\"</span>\n    <span class=\"p\">},</span>\n    <span class=\"c1\"># Any additional settings:</span>\n    <span class=\"s2\">\"time_format\"</span><span class=\"p\">:</span> <span class=\"s2\">\"unix\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"delay\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"c1\"># Delay in seconds per http request</span>\n    <span class=\"s2\">\"max_attempts\"</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"c1\"># Max attempts if the http request fails</span>\n    <span class=\"s2\">\"paging\"</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"c1\"># Enable/Disable pagination</span>\n    <span class=\"s2\">\"timeout\"</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"c1\"># Maximum time allowed for an HTTP request in seconds</span>\n    <span class=\"s2\">\"version\"</span><span class=\"p\">:</span> <span class=\"s2\">\"0.3.0\"</span><span class=\"p\">,</span> <span class=\"c1\"># MDS Version: \"0.2.0\", \"0.3.0\" or \"0.4.0\" or remove for custom driver</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># Builds a time-zone aware date time range</span>\n<span class=\"n\">my_time</span> <span class=\"o\">=</span> <span class=\"n\">MDSTimeZone</span><span class=\"p\">(</span>\n    <span class=\"n\">date_time_now</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2020</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">),</span> <span class=\"c1\"># Either Now or any date as specified by datetime, becomes end_time</span>\n    <span class=\"n\">offset</span><span class=\"o\">=</span><span class=\"mi\">3600</span><span class=\"p\">,</span>             <span class=\"c1\"># Subtract 1 hour from date_time_now and becomes start_time</span>\n    <span class=\"n\">time_zone</span><span class=\"o\">=</span><span class=\"s2\">\"US/Central\"</span><span class=\"p\">,</span>  <span class=\"c1\"># US/Central</span>\n<span class=\"p\">)</span>\n\n <span class=\"c1\"># Initialize the MDS Client</span>\n<span class=\"n\">mds_client</span> <span class=\"o\">=</span> <span class=\"n\">MDSClient</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"o\">=</span><span class=\"n\">provider_configuration</span><span class=\"p\">,</span> <span class=\"n\">provider</span><span class=\"o\">=</span><span class=\"s2\">\"amazing scooters\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Get trips</span>\n<span class=\"n\">trips</span> <span class=\"o\">=</span> <span class=\"n\">mds_client</span><span class=\"o\">.</span><span class=\"n\">get_trips</span><span class=\"p\">(</span>\n    <span class=\"c1\"># First the start time for the query</span>\n    <span class=\"n\">start_time</span><span class=\"o\">=</span><span class=\"n\">my_time</span><span class=\"o\">.</span><span class=\"n\">get_time_start</span><span class=\"p\">(</span>\n        <span class=\"n\">utc</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"c1\"># Transforms local time into UTC</span>\n        <span class=\"n\">unix</span><span class=\"o\">=</span><span class=\"kc\">True</span> <span class=\"c1\"># Transforms format from ISO into Unix Epoch time</span>\n    <span class=\"p\">),</span>\n    <span class=\"c1\"># Now the end time:</span>\n    <span class=\"n\">end_time</span><span class=\"o\">=</span><span class=\"n\">my_time</span><span class=\"o\">.</span><span class=\"n\">get_time_end</span><span class=\"p\">(</span>\n        <span class=\"n\">utc</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"c1\"># Transforms local time into UTC</span>\n        <span class=\"n\">unix</span><span class=\"o\">=</span><span class=\"kc\">True</span> <span class=\"c1\"># Transforms format from ISO into Unix Epoch time</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">trips</span><span class=\"p\">))</span>\n</pre>\n<h1>CD/CI</h1>\n<p>We make use of CircleCI for our deployments, you can see the build script in the <code>.circleci</code> folder in this repo. The basic process consists of a couple steps:</p>\n<ol>\n<li>Generate basic variables based on the current branch</li>\n<li>Change the package name based on the current branch</li>\n<li>Builds the package</li>\n<li>Deploys with twine</li>\n</ol>\n<p><strong>In short, the only way to deploy a package is to change it's version number manually in <code>setup.py</code>.</strong> If the changes were made in the master branch, the deployment will go into production, for the dev branch, a postfix will be added to the name of the package before it is deployed to pypi.</p>\n<h1>Development</h1>\n<p>We currently have two branches: master and dev. The master branch is used in production, our dev is meant for development and testing.</p>\n<h3>Dev &amp; Master Postfix</h3>\n<p>For the dev branch, the build script will attach a post fix <code>\"-dev\"</code> to the package name specified in <code>setup.py</code>. For example, in the dev branch file <code>setup.py</code> we see the package name is <code>name=\"atd-mds-client\"</code> and the current version was <code>0.0.X</code>, if you were to change the version number and commit to the dev branch, the deployment script will deploy to pypi as <code>atd-mds-client-dev</code> with the new version.</p>\n<h3>Pull Requests &amp; Local Development</h3>\n<p>Pull requests are ignored by the CD/CI pipeline, meaning they do not get built. If you need a package built for dev testing:</p>\n<ul>\n<li>Test your script locally</li>\n<li>Create a PR against the dev branch, make sure you change the version number in setup.py</li>\n<li>Merge your PR branch to the dev branch</li>\n</ul>\n<p>How about local development?</p>\n<p>At the moment, local development is open-ended. You may use any python mechanism or style when including source python packages in your development and local tests.</p>\n<h1>License</h1>\n<p>The package is distributed under the GPL 3.0 license.</p>\n\n          </div>"}, "last_serial": 6534421, "releases": {"0.0.3": [{"comment_text": "", "digests": {"md5": "0a523d72399115bd39cb4918770fb6b9", "sha256": "25c8c14ca743eec07b988bd6b528e2a432ef89a95464fa28a80d5b3e4397934d"}, "downloads": -1, "filename": "atd_mds_client_dev-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "0a523d72399115bd39cb4918770fb6b9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 28622, "upload_time": "2020-01-28T20:58:35", "upload_time_iso_8601": "2020-01-28T20:58:35.668698Z", "url": "https://files.pythonhosted.org/packages/e5/2a/4a32907d84731e24cc1a291bd5c6d7df04fa93ac06bff1d9cccc58cda790/atd_mds_client_dev-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "519898bb75c0e576ff04f11724335a60", "sha256": "0cc170de1aae94a475cfc3e5932c4b86d7215ae92dfcb679423d325a0d908519"}, "downloads": -1, "filename": "atd-mds-client-dev-0.0.3.tar.gz", "has_sig": false, "md5_digest": "519898bb75c0e576ff04f11724335a60", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10234, "upload_time": "2020-01-28T20:58:38", "upload_time_iso_8601": "2020-01-28T20:58:38.060422Z", "url": "https://files.pythonhosted.org/packages/4d/57/c1adcdd0fbe955d7d6f76f39bb0badb15dcfd22b1d1e8d93dada6d05dcea/atd-mds-client-dev-0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0a523d72399115bd39cb4918770fb6b9", "sha256": "25c8c14ca743eec07b988bd6b528e2a432ef89a95464fa28a80d5b3e4397934d"}, "downloads": -1, "filename": "atd_mds_client_dev-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "0a523d72399115bd39cb4918770fb6b9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 28622, "upload_time": "2020-01-28T20:58:35", "upload_time_iso_8601": "2020-01-28T20:58:35.668698Z", "url": "https://files.pythonhosted.org/packages/e5/2a/4a32907d84731e24cc1a291bd5c6d7df04fa93ac06bff1d9cccc58cda790/atd_mds_client_dev-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "519898bb75c0e576ff04f11724335a60", "sha256": "0cc170de1aae94a475cfc3e5932c4b86d7215ae92dfcb679423d325a0d908519"}, "downloads": -1, "filename": "atd-mds-client-dev-0.0.3.tar.gz", "has_sig": false, "md5_digest": "519898bb75c0e576ff04f11724335a60", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10234, "upload_time": "2020-01-28T20:58:38", "upload_time_iso_8601": "2020-01-28T20:58:38.060422Z", "url": "https://files.pythonhosted.org/packages/4d/57/c1adcdd0fbe955d7d6f76f39bb0badb15dcfd22b1d1e8d93dada6d05dcea/atd-mds-client-dev-0.0.3.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:16:37 2020"}