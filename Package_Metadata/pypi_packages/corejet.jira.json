{"info": {"author": "Martin Aspeli", "author_email": "optilude@gmail.com", "bugtrack_url": null, "classifiers": ["Programming Language :: Python"], "description": "CoreJet test runner JIRA integration\n====================================\n\nThis package provides a requirements catalogue source for\n`corejet.testrunner`_ that can fetch requirements from JIRA.\n\nTo use it, make sure it is installed in the working set of the testrunner.\nIf using Buildout, you can do this with::\n\n    [test]\n    recipe = corejet.testrunner\n    eggs = \n        corejet.jira\n        <other packages>\n    defaults = ['--auto-color', '--auto-progress']\n\nHere is an example command line invocation::\n\n  ./bin/test -s corejet.core --corejet=\"jira,url=https://acme.jira.com,username=corejet,password=secret,project=Acme Corp,filter=10151,pointsField=10060,epicField=10061,acceptanceCriteriaField=10088\"\n\nThe ``--corejet`` option must start with ``jira,`` followed by a set of\nparameters that indicate how to connect to JIRA. The parameters are:\n\n``url=<url>``\n    URL of JIRA instance\n``username=<username>``\n    username to use to connect\n``password=<password>``\n    password to use to connect\n``project=<name>``\n    Name of project\n``filter=<id>``\n    Numeric id of filter that returns stories\n``pointsField=<id>``\n    Numeric id of field containing story points\n``epicField=<id>``\n    Numeric id of field indicating epic for a story\n``acceptanceCriteriaField=<id>``\n    Numeric id of field containing acceptance criteria (scenarios)\n\nThis presumes JIRA is set up with a filter that returns all stories you want\nto include (e.g. return all valid issues of type ``Story`` in the project, if\nusing GreenHopper). The various field ids describe the fields that provide\nstory points, epic/theme (either a string or a reference to another issue),\nand a field with acceptance criteria.\n\nThe first two are standard GreenHopper fields. The acceptance criteria field\nmust be added manually. It should be a plain text field containing scenarios\nin simple Gherkin syntax, e.g.::\n\n    Scenario: First scenario\n    Given a precondition\n      And another precondition\n    When something happens\n      And something else happens\n    Then a result is expected\n      And another result is expected\n    \n    Scenario: Second scenario\n    Given another precondition\n    When something else happens\n    Then a different result is expected\n\nThe parser is relatively forgiving, but note:\n\n * The parser is case-insensitive\n * Zero or more scenarios may be present\n * Scenarios must start with \"Scenario: \" followed by a name\n * The \"Given\" clause is optional, but must come first in a scenario\n * The \"When\" clause is required, and must come before the \"Then\" clause\n * The \"Then\"\" clause is also required\n * An \"And\" clause can come after any \"Given\", \"When\" or \"Then\", but not\n   first.\n\n.. _corejet.testrunner: http://pypi.python.org/pypi/corejet.testrunner\n\nChangelog\n=========\n\n1.0a3\n-----\n\n- Fix broken package\n\n1.0a1\n-----\n\n- First release\n  [optilude]", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://corejet.org", "keywords": "corejet JIRA", "license": "ZPL 2.1", "maintainer": null, "maintainer_email": null, "name": "corejet.jira", "package_url": "https://pypi.org/project/corejet.jira/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/corejet.jira/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://corejet.org"}, "release_url": "https://pypi.org/project/corejet.jira/1.0a3/", "requires_dist": null, "requires_python": null, "summary": "JIRA data source for corejet.testrunner", "version": "1.0a3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"corejet-test-runner-jira-integration\">\n<h2>CoreJet test runner JIRA integration</h2>\n<p>This package provides a requirements catalogue source for\n<a href=\"http://pypi.python.org/pypi/corejet.testrunner\" rel=\"nofollow\">corejet.testrunner</a> that can fetch requirements from JIRA.</p>\n<p>To use it, make sure it is installed in the working set of the testrunner.\nIf using Buildout, you can do this with:</p>\n<pre>[test]\nrecipe = corejet.testrunner\neggs =\n    corejet.jira\n    &lt;other packages&gt;\ndefaults = ['--auto-color', '--auto-progress']\n</pre>\n<p>Here is an example command line invocation:</p>\n<pre>./bin/test -s corejet.core --corejet=\"jira,url=https://acme.jira.com,username=corejet,password=secret,project=Acme Corp,filter=10151,pointsField=10060,epicField=10061,acceptanceCriteriaField=10088\"\n</pre>\n<p>The <tt><span class=\"pre\">--corejet</span></tt> option must start with <tt>jira,</tt> followed by a set of\nparameters that indicate how to connect to JIRA. The parameters are:</p>\n<dl>\n<dt><tt><span class=\"pre\">url=&lt;url&gt;</span></tt></dt>\n<dd>URL of JIRA instance</dd>\n<dt><tt><span class=\"pre\">username=&lt;username&gt;</span></tt></dt>\n<dd>username to use to connect</dd>\n<dt><tt><span class=\"pre\">password=&lt;password&gt;</span></tt></dt>\n<dd>password to use to connect</dd>\n<dt><tt><span class=\"pre\">project=&lt;name&gt;</span></tt></dt>\n<dd>Name of project</dd>\n<dt><tt><span class=\"pre\">filter=&lt;id&gt;</span></tt></dt>\n<dd>Numeric id of filter that returns stories</dd>\n<dt><tt><span class=\"pre\">pointsField=&lt;id&gt;</span></tt></dt>\n<dd>Numeric id of field containing story points</dd>\n<dt><tt><span class=\"pre\">epicField=&lt;id&gt;</span></tt></dt>\n<dd>Numeric id of field indicating epic for a story</dd>\n<dt><tt><span class=\"pre\">acceptanceCriteriaField=&lt;id&gt;</span></tt></dt>\n<dd>Numeric id of field containing acceptance criteria (scenarios)</dd>\n</dl>\n<p>This presumes JIRA is set up with a filter that returns all stories you want\nto include (e.g. return all valid issues of type <tt>Story</tt> in the project, if\nusing GreenHopper). The various field ids describe the fields that provide\nstory points, epic/theme (either a string or a reference to another issue),\nand a field with acceptance criteria.</p>\n<p>The first two are standard GreenHopper fields. The acceptance criteria field\nmust be added manually. It should be a plain text field containing scenarios\nin simple Gherkin syntax, e.g.:</p>\n<pre>Scenario: First scenario\nGiven a precondition\n  And another precondition\nWhen something happens\n  And something else happens\nThen a result is expected\n  And another result is expected\n\nScenario: Second scenario\nGiven another precondition\nWhen something else happens\nThen a different result is expected\n</pre>\n<p>The parser is relatively forgiving, but note:</p>\n<blockquote>\n<ul>\n<li>The parser is case-insensitive</li>\n<li>Zero or more scenarios may be present</li>\n<li>Scenarios must start with \u201cScenario: \u201d followed by a name</li>\n<li>The \u201cGiven\u201d clause is optional, but must come first in a scenario</li>\n<li>The \u201cWhen\u201d clause is required, and must come before the \u201cThen\u201d clause</li>\n<li>The \u201cThen\u201d\u201d clause is also required</li>\n<li>An \u201cAnd\u201d clause can come after any \u201cGiven\u201d, \u201cWhen\u201d or \u201cThen\u201d, but not\nfirst.</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<div id=\"a3\">\n<h3>1.0a3</h3>\n<ul>\n<li>Fix broken package</li>\n</ul>\n</div>\n<div id=\"a1\">\n<h3>1.0a1</h3>\n<ul>\n<li>First release\n[optilude]</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 788450, "releases": {"1.0a1": [{"comment_text": "", "digests": {"md5": "e6e9a18c9290648cd277b377c87c6715", "sha256": "31b7d5c688d5a54dd7c713ca2710c6449ef64739aaa0f6dbc2bdb1727d757a21"}, "downloads": -1, "filename": "corejet.jira-1.0a1.tar.gz", "has_sig": false, "md5_digest": "e6e9a18c9290648cd277b377c87c6715", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4556, "upload_time": "2011-05-16T02:05:09", "upload_time_iso_8601": "2011-05-16T02:05:09.896974Z", "url": "https://files.pythonhosted.org/packages/1c/2e/988aea70dbddbb84c19573a1ce86f099e49cc5d036c8c50b3bbc4e8a399b/corejet.jira-1.0a1.tar.gz", "yanked": false}], "1.0a3": [{"comment_text": "", "digests": {"md5": "74c66e1f3cc4caddb6deb33466e0cb82", "sha256": "d9037f5f286198e5f0894862f212e3b46f272191ad9162501312874f6209e468"}, "downloads": -1, "filename": "corejet.jira-1.0a3.zip", "has_sig": false, "md5_digest": "74c66e1f3cc4caddb6deb33466e0cb82", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9210, "upload_time": "2011-05-20T00:40:02", "upload_time_iso_8601": "2011-05-20T00:40:02.502432Z", "url": "https://files.pythonhosted.org/packages/58/1b/d396660eb8422137862fe860cb2f3ebd1f7671e076b874c37d7b3593228b/corejet.jira-1.0a3.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "74c66e1f3cc4caddb6deb33466e0cb82", "sha256": "d9037f5f286198e5f0894862f212e3b46f272191ad9162501312874f6209e468"}, "downloads": -1, "filename": "corejet.jira-1.0a3.zip", "has_sig": false, "md5_digest": "74c66e1f3cc4caddb6deb33466e0cb82", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9210, "upload_time": "2011-05-20T00:40:02", "upload_time_iso_8601": "2011-05-20T00:40:02.502432Z", "url": "https://files.pythonhosted.org/packages/58/1b/d396660eb8422137862fe860cb2f3ebd1f7671e076b874c37d7b3593228b/corejet.jira-1.0a3.zip", "yanked": false}], "timestamp": "Fri May  8 00:43:13 2020"}