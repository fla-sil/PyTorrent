{"info": {"author": "nekoumei", "author_email": "nekoumei@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: MacOS X", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.6", "Topic :: Scientific/Engineering :: Artificial Intelligence"], "description": "# USBaggingClassifier\n# Overview\nBagging Classifier with Under Sampling.  \nThis approach is good for classification imbalanced data.  \nYou can use both of Binary or Multi-Class Classification.  \nMethods could use looks like sci-kit learn's APIs.  \nOnly use in python 3.x\n# Usage\n## Parameters\n* base_estimator : object    \nClassifier looks like sklearn.XXClassifier.  \nClassifier must have methods [fit(X, y), predict(X)].  \nIt is not nesessary predict_proba(X), but if it has this method,  \nyou could select 'soft voting' option and get predict probability.  \n* n_estimators : int (default=10)  \nThe number of base estimators.  \n* voting : str {'hard','soft'} (default='hard')  \nhard : use majority rule voting  \nsoft : argmax of the sums of prediction probabilities  \n* n_jobs : int (default=1)  \nnumber of jobs to run in parallel for fit.  \nIf -1, equals to number of cores.  \n## methods\n* fit(X, y)  \nX : pandas.DataFrame  \ny : pandas.Series  \nreturn : None  \n* predict(X)  \nX : pandas.DataFrame  \nreturn : predicted y : numpy.array  \n* predict_proba(X)  \nX : pandas.DataFrame\nreturn : predicted probabilities (mean of all bagged models)\n\n# LICENSE\nThis software is released under the MIT License, see [LICENSE](/LICENSE)\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/nekoumei/usbclassifier", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "usbclassifier", "package_url": "https://pypi.org/project/usbclassifier/", "platform": "", "project_url": "https://pypi.org/project/usbclassifier/", "project_urls": {"Homepage": "https://github.com/nekoumei/usbclassifier"}, "release_url": "https://pypi.org/project/usbclassifier/0.1.3/", "requires_dist": ["pandas"], "requires_python": "", "summary": "Bagging Classifier with Under Sampling", "version": "0.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p># USBaggingClassifier\n# Overview\nBagging Classifier with Under Sampling.\nThis approach is good for classification imbalanced data.\nYou can use both of Binary or Multi-Class Classification.\nMethods could use looks like sci-kit learn\u2019s APIs.\nOnly use in python 3.x\n# Usage\n## Parameters\n* base_estimator : object\nClassifier looks like sklearn.XXClassifier.\nClassifier must have methods [fit(X, y), predict(X)].\nIt is not nesessary predict_proba(X), but if it has this method,\nyou could select \u2018soft voting\u2019 option and get predict probability.\n* n_estimators : int (default=10)\nThe number of base estimators.\n* voting : str {\u2018hard\u2019,\u2019soft\u2019} (default=\u2019hard\u2019)\nhard : use majority rule voting\nsoft : argmax of the sums of prediction probabilities\n* n_jobs : int (default=1)\nnumber of jobs to run in parallel for fit.\nIf -1, equals to number of cores.\n## methods\n* fit(X, y)\nX : pandas.DataFrame\ny : pandas.Series\nreturn : None\n* predict(X)\nX : pandas.DataFrame\nreturn : predicted y : numpy.array\n* predict_proba(X)\nX : pandas.DataFrame\nreturn : predicted probabilities (mean of all bagged models)</p>\n<p># LICENSE\nThis software is released under the MIT License, see [LICENSE](/LICENSE)</p>\n\n          </div>"}, "last_serial": 3765008, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "4c5c41b039f2ed3256454ac57b4783b8", "sha256": "bbf59f4a7e85399379c46945369ce9eff434dd56c8197762caa33d9330821455"}, "downloads": -1, "filename": "usbclassifier-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "4c5c41b039f2ed3256454ac57b4783b8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3126, "upload_time": "2018-04-14T19:15:20", "upload_time_iso_8601": "2018-04-14T19:15:20.154836Z", "url": "https://files.pythonhosted.org/packages/fc/5d/d08a916ed65f1a4142c71a8cef4b95b9e8e8860d3129c31815a957f38398/usbclassifier-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "428845c24618573dc7af7977525509d6", "sha256": "6d1d184805ca38f022362fa08b24596fbc5b788f462060dedfe832aec9eae3fb"}, "downloads": -1, "filename": "usbclassifier-0.1.1.tar.gz", "has_sig": false, "md5_digest": "428845c24618573dc7af7977525509d6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3644, "upload_time": "2018-04-14T19:15:22", "upload_time_iso_8601": "2018-04-14T19:15:22.374988Z", "url": "https://files.pythonhosted.org/packages/f0/69/4c7e2ab8077b1cfebd5fc206c722a872bdd2a07a587b92874e84a195895a/usbclassifier-0.1.1.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "f240000dcd2cad7ae07030c928572346", "sha256": "5590b57b601dfefe0cb58003ccb66a019e228370ed3a757653ce89c7e4ad2f0c"}, "downloads": -1, "filename": "usbclassifier-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "f240000dcd2cad7ae07030c928572346", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3128, "upload_time": "2018-04-14T19:15:21", "upload_time_iso_8601": "2018-04-14T19:15:21.245797Z", "url": "https://files.pythonhosted.org/packages/1b/46/0fa0b3727258f55654ba01ef826c4e769f8c327bbd28a00ec09aebc4d2a0/usbclassifier-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4f344bf1cb04b77c5e68cd0d5c7eb8e9", "sha256": "c26abd3c7b8c32267bc44462831588715234dc28dfe7088e2836248dd035be50"}, "downloads": -1, "filename": "usbclassifier-0.1.3.tar.gz", "has_sig": false, "md5_digest": "4f344bf1cb04b77c5e68cd0d5c7eb8e9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3644, "upload_time": "2018-04-14T19:15:23", "upload_time_iso_8601": "2018-04-14T19:15:23.397557Z", "url": "https://files.pythonhosted.org/packages/c9/10/23050c2ec39b2df132ab1d28af485d05a96a2c9f0112ffc06ac6b458d2a4/usbclassifier-0.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f240000dcd2cad7ae07030c928572346", "sha256": "5590b57b601dfefe0cb58003ccb66a019e228370ed3a757653ce89c7e4ad2f0c"}, "downloads": -1, "filename": "usbclassifier-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "f240000dcd2cad7ae07030c928572346", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3128, "upload_time": "2018-04-14T19:15:21", "upload_time_iso_8601": "2018-04-14T19:15:21.245797Z", "url": "https://files.pythonhosted.org/packages/1b/46/0fa0b3727258f55654ba01ef826c4e769f8c327bbd28a00ec09aebc4d2a0/usbclassifier-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4f344bf1cb04b77c5e68cd0d5c7eb8e9", "sha256": "c26abd3c7b8c32267bc44462831588715234dc28dfe7088e2836248dd035be50"}, "downloads": -1, "filename": "usbclassifier-0.1.3.tar.gz", "has_sig": false, "md5_digest": "4f344bf1cb04b77c5e68cd0d5c7eb8e9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3644, "upload_time": "2018-04-14T19:15:23", "upload_time_iso_8601": "2018-04-14T19:15:23.397557Z", "url": "https://files.pythonhosted.org/packages/c9/10/23050c2ec39b2df132ab1d28af485d05a96a2c9f0112ffc06ac6b458d2a4/usbclassifier-0.1.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:39:12 2020"}