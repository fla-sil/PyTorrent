{"info": {"author": "MIT Data To AI Lab", "author_email": "dailabmit@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "<p align=\"left\">\n<img width=\"15%\" src=\"https://dai.lids.mit.edu/wp-content/uploads/2018/06/Logo_DAI_highres.png\" alt=\"BTB\" />\n<i>An open source project from Data to AI Lab at MIT.</i>\n</p>\n\n![](https://raw.githubusercontent.com/HDI-Project/BTB/master/docs/images/BTB-Icon-small.png)\n\nA simple, extensible backend for developing auto-tuning systems.\n\n[![Development Status](https://img.shields.io/badge/Development%20Status-2%20--%20Pre--Alpha-yellow)](https://pypi.org/search/?c=Development+Status+%3A%3A+2+-+Pre-Alpha)\n[![PyPi Shield](https://img.shields.io/pypi/v/baytune.svg)](https://pypi.python.org/pypi/baytune)\n[![Travis CI Shield](https://travis-ci.org/HDI-Project/BTB.svg?branch=master)](https://travis-ci.org/HDI-Project/BTB)\n[![Coverage Status](https://codecov.io/gh/HDI-Project/BTB/branch/master/graph/badge.svg)](https://codecov.io/gh/HDI-Project/BTB)\n[![Downloads](https://pepy.tech/badge/baytune)](https://pepy.tech/project/baytune)\n\n* License: [MIT](https://github.com/HDI-Project/BTB/blob/master/LICENSE)\n* Development Status: [Pre-Alpha](https://pypi.org/search/?c=Development+Status+%3A%3A+2+-+Pre-Alpha)\n* Documentation: https://HDI-Project.github.io/BTB\n* Homepage: https://github.com/HDI-Project/BTB\n\n# Overview\n\nBTB (\"Bayesian Tuning and Bandits\") is a simple, extensible backend for developing auto-tuning\nsystems such as AutoML systems. It provides an easy-to-use interface for *tuning* and *selection*.\n\nIt is currently being used in several AutoML systems:\n- [ATM](https://github.com/HDI-Project/ATM), distributed, multi-tenant AutoML system for\nclassifier tuning\n- [mit-d3m-ta2](https://github.com/HDI-Project/mit-d3m-ta2/), MIT's system for the DARPA\n[Data-driven discovery of models](https://www.darpa.mil/program/data-driven-discovery-of-models) (D3M) program\n- [AutoBazaar](https://github.com/HDI-Project/AutoBazaar), a flexible, general-purpose\nAutoML system\n\n# Install\n\n## Requirements\n\n**BTB** has been developed and tested on [Python 3.5, 3.6 and 3.7](https://www.python.org/downloads/)\n\nAlso, although it is not strictly required, the usage of a\n[virtualenv](https://virtualenv.pypa.io/en/latest/) is highly recommended in order to avoid\ninterfering with other software installed in the system where **BTB** is run.\n\n## Install with pip\n\nThe easiest and recommended way to install **BTB** is using [pip](\nhttps://pip.pypa.io/en/stable/):\n\n```bash\npip install baytune\n```\n\nThis will pull and install the latest stable release from [PyPi](https://pypi.org/).\n\nIf you want to install from source or contribute to the project please read the\n[Contributing Guide](https://hdi-project.github.io/BTB/contributing.html#get-started).\n\n# Quickstart\n\nIn this short tutorial we will guide you through the necessary steps to get started using BTB\nto select and tune the best model to solve a Machine Learning problem.\n\nIn particular, in this example we will be using ``BTBSession`` to perform solve the [Boston](\nhttp://lib.stat.cmu.edu/datasets/boston) regression problem by selecting between the\n`ExtraTreesRegressor` and the `RandomForestRegressor` models from [scikit-learn](\nhttps://scikit-learn.org/) while also searching for their best Hyperparameter configuration.\n\n## Prepare a scoring function\n\nThe first step in order to use the `BTBSession` class is to develop a scoring function.\n\nThis is a Python function that, given a model name and a hyperparameter configuration,\nevaluates the performance of the model on your data and returns a score.\n\n```python3\nfrom sklearn.datasets import load_boston\nfrom sklearn.ensemble import ExtraTreesRegressor, RandomForestRegressor\nfrom sklearn.metrics import make_scorer, r2_score\nfrom sklearn.model_selection import cross_val_score\n\ndataset = load_boston()\nmodels = {\n    'random_forest': RandomForestRegressor,\n    'extra_trees': ExtraTreesRegressor,\n}\n\ndef scoring_function(model_name, hyperparameter_values):\n    model_class = models[model_name]\n    model_instance = model_class(**hyperparameter_values)\n    scores = cross_val_score(\n        estimator=model_instance,\n        X=dataset.data,\n        y=dataset.target,\n        scoring=make_scorer(r2_score)\n    )\n    return scores.mean()\n```\n\n## Define the tunable hyperparameters\n\nThe second step is to define the hyperparameters that we want to tune for each model as `Tunables`.\n\n```python3\nfrom btb.tuning import Tunable\nfrom btb.tuning.hyperparams import CategoricalHyperParam, IntHyperParam\n\ntunables = {\n    'random_forest': Tunable({\n        'max_features': CategoricalHyperParam(choices=[None, 'auto', 'log2', 'sqrt']),\n        'min_samples_split': IntHyperParam(min=2, max=20, default=2),\n        'min_samples_leaf': IntHyperParam(min=1, max=20, default=2)\n    }),\n    'extra_trees': Tunable({\n        'max_features': CategoricalHyperParam(choices=[None, 'auto', 'log2', 'sqrt']),\n        'min_samples_split': IntHyperParam(min=2, max=20, default=2),\n        'min_samples_leaf': IntHyperParam(min=1, max=20, default=2)\n    })\n}\n```\n\n## Start the searching process\n\nOnce you have defined a scoring function and the tunable hyperparameters specification of your\nmodels, you can start the searching for the best model and hyperparameter configuration by using\nthe `btb.BTBSession`.\n\nAll you need to do is create an instance passing the tunable hyperparameters scpecification\nand the scoring function.\n\n```python3\nfrom btb import BTBSession\n\nsession = BTBSession(\n    tunables=tunables,\n    scorer=scoring_function\n)\n```\n\nAnd then call the `run` method indicating how many tunable iterations you want the Session to\nperform:\n\n\n```python3\nbest_proposal = session.run(20)\n```\n\nThe result will be a dictionary indicating the name of the best model that could be found\nand the hyperparameter configuration that was used:\n\n```\n{\n    'id': 'd85262197592bd00c8cd9e87164e18c8',\n    'name': 'extra_trees',\n    'config': {\n        'max_features': None,\n        'min_samples_split': 17,\n        'min_samples_leaf': 1\n    },\n    'score': 0.6056926625119803\n}\n ```\n\n# How does BTB perform?\n\nWe have a comprehensive [benchmarking framework](https://github.com/HDI-Project/BTB/tree/master/benchmark)\nthat we use to evaluate the performance of our `Tuners`. For every release, we perform benchmarking\nagainst 100's of challenges, comparing tuners against each other in terms of number of wins.\nWe present the latest leaderboard from latest release below:\n\n## Number of Wins per Version\n\n| tuner                   | with ties | without ties |\n|-------------------------|-----------|--------------|\n| `BTB.GPEiTuner`         |    **35** |            7 |\n| `BTB.GPTuner`           |    33     |        **8** |\n| `BTB.UniformTuner`      |    29     |            2 |\n| `HyperOpt.rand.suggest` |    28     |            0 |\n| `HyperOpt.tpe.suggest`  |    32     |            5 |\n\n- Detailed results from which this summary emerged are available [here](https://docs.google.com/spreadsheets/d/1E0fSSfqOuDhazccdsx7eG1aLCJagdpj1OKYhdOohZOg/).\n- If you want to compare your own tuner, follow the steps in our benchmarking framework [here](https://github.com/HDI-Project/BTB/tree/master/benchmark).\n- If you have a proposal for tuner that we should include in our benchmarking get in touch\nwith us at [dailabmit@gmail.com](mailto:dailabmit@gmail.com).\n\n> :warning: **Note**: In release v0.3.7, we are currently only doing 50 ML challenges. Our next release for\nbenchmarking will have results from 422 datasets and 3 optimization challenges. To check out what\nwill be included in our benchmarking efforts - you can check [here](https://github.com/HDI-Project/BTB/projects).\n\n# What's next?\n\nFor more details about **BTB** and all its possibilities and features, please check the\n[project documentation site](https://HDI-Project.github.io/BTB/)!\n\nAlso do not forget to have a look at the [notebook tutorials](notebooks).\n\n# Citing BTB\n\nIf you use BTB, please consider citing our related paper:\n\n  Micah J. Smith, Carles Sala, James Max Kanter, and Kalyan Veeramachaneni. [\"The Machine Learning Bazaar: Harnessing the ML Ecosystem for Effective System Development.\"](https://arxiv.org/abs/1905.08942) arXiv Preprint 1905.08942. 2019.\n\n  ```bibtex\n  @article{smith2019mlbazaar,\n    author = {Smith, Micah J. and Sala, Carles and Kanter, James Max and Veeramachaneni, Kalyan},\n    title = {The Machine Learning Bazaar: Harnessing the ML Ecosystem for Effective System Development},\n    journal = {arXiv e-prints},\n    year = {2019},\n    eid = {arXiv:1905.08942},\n    pages = {arXiv:1905.08942},\n    archivePrefix = {arXiv},\n    eprint = {1905.08942},\n  }\n  ```\n\n\n# History\n\n## 0.3.7 - 2020-04-15\n\nThis release brings a new `benchmark` framework with public leaderboard.\nAs part of our benchmarking efforts we will run the framework at every release and make the results\npublic. In each run we compare it to other tuners and optimizer libraries. We are constantly adding\nnew libraries for comparison. If you have suggestions for a tuner library we should include in our\ncompraison, please contact us via email at [dailabmit@gmail.com](mailto:dailabmit@gmail.com).\n\n\n### Resolved Issues\n\n* Issue #159: Implement more `MLChallenges` and generate a public leaderboard.\n* Issue #180: Update BTB Benchmarking module.\n* Issue #182: Integrate HyperOPT with benchmarking.\n* Issue #184: Integrate dask to bencharking.\n\n## 0.3.6 - 2020-03-04\n\nThis release improves `BTBSession` error handling and allows `Tunables` with cardinality\nequal to 1 to be scored with `BTBSession`. Also, we provide a new documentation for\nthis version of `BTB`.\n\n### Internal Improvements\n\nImproved documentation, unittests and integration tests.\n\n### Resolved Issues\n\n* Issue #164: Improve documentation for `v0.3.5+`.\n* Issue #166: Wrong erro raised by BTBSession on too many errors.\n* Issue #170: Tuner has no scores attribute until record is run once.\n* Issue #175: BTBSession crashes when record is not performed.\n* Issue #176: BTBSession fails to select a proper Tunable when normalized_scores becomse None.\n\n## 0.3.5 - 2020-01-21\n\nWith this release we are improving `BTBSession` by adding private attributes, or not intended to\nbe public / modified by the user and also improving the documentation of it.\n\n### Internal Improvements\n\nImproved docstrings, unittests and public interface of `BTBSession`.\n\n### Resolved Issues\n\n* Issue #162: Fix session with the given comments on PR 156.\n\n## 0.3.4 - 2019-12-24\n\nWith this release we introduce a `BTBSession` class. This class represents the process of selecting\nand tuning several tunables until the best possible configuration fo a specific `scorer` is found.\nWe also have improved and fixed some minor bugs arround the code (described in the issues below).\n\n### New Features\n\n* `BTBSession` that makes `BTB` more user friendly.\n\n### Internal Improvements\n\nImproved unittests, removed old dependencies, added more `MLChallenges` and fixed an issue with\nthe bound methods.\n\n### Resolved Issues\n\n* Issue #145: Implement `BTBSession`.\n* Issue #155: Set defaut to `None` for `CategoricalHyperParam` is not possible.\n* Issue #157: Metamodel `_MODEL_KWARGS_DEFAULT` becomes mutable.\n* Issue #158: Remove `mock` dependency from the package.\n* Issue #160: Add more Machine Learning Challenges and more estimators.\n\n\n## 0.3.3 - 2019-12-11\n\nFix a bug where creating an instance of `Tuner` ends in an error.\n\n### Internal Improvements\n\nImprove unittests to use `spec_set` in order to detect errors while mocking an object.\n\n### Resolved Issues\n\n* Issue #153: Bug with tunner logger message that avoids creating the Tunner.\n\n## 0.3.2 - 2019-12-10\n\nWith this release we add the new `benchmark` challenge `MLChallenge` which allows users to\nperform benchmarking over datasets with machine learning estimators, and also some new\nfeatures to make the workflow easier.\n\n### New Features\n\n* New `MLChallenge` challenge that allows performing crossvalidation over datasets and machine\nlearning estimators.\n* New `from_dict` function for `Tunable` class in order to instantiate from a dictionary that\ncontains information over hyperparameters.\n* New `default` value for each hyperparameter type.\n\n### Resolved Issues\n\n* Issue #68: Remove `btb.tuning.constants` module.\n* Issue #120: Tuner repr not helpful.\n* Issue #121: HyperParameter repr not helpful.\n* Issue #141: Imlement propper logging to the tuning section.\n* Issue #150: Implement Tunable `from_dict`.\n* Issue #151: Add default value for hyperparameters.\n* Issue #152: Support `None` as a choice in `CategoricalHyperPrameters`.\n\n## 0.3.1 - 2019-11-25\n\nWith this release we introduce a `benchmark` module for `BTB` which allows the users to perform\na benchmark over a series of `challenges`.\n\n### New Features\n\n* New `benchmark` module.\n* New submodule named `challenges` to work toghether with `benchmark` module.\n\n### Resolved Issues\n\n* Issue #139: Implement a Benchmark for BTB\n\n## 0.3.0 - 2019-11-11\n\nWith this release we introduce an improved `BTB` that has a major reorganization of the project\nwith emphasis on an easier way of interacting with `BTB` and an easy way of developing, testing and\ncontributing new acquisition functions, metamodels, tuners  and hyperparameters.\n\n### New project structure\n\nThe new major reorganization comes with the `btb.tuning` module. This module provides everything\nneeded for the `tuning` process and comes with three new additions `Acquisition`, `Metamodel` and\n`Tunable`. Also there is an update to the `Hyperparamters` and `Tuners`. This changes are meant\nto help developers and contributors to easily develop, test and contribute new `Tuners`.\n\n### New API\n\nThere is a slightly new way of using `BTB` as the new `Tunable` class is introduced, that is meant\nto be the only requiered object to instantiate a `Tuner`. This `Tunable` class represents a\ncollection of `HyperParams` that need to be tuned as a whole, at once. Now, in order to create a\n`Tuner`, a `Tunable` instance must be created first with the `hyperparameters` of the\n`objective function`.\n\n### New Features\n\n* New `Hyperparameters` that allow an easier interaction for the final user.\n* New `Tunable` class that manages a collection of `Hyperparameters`.\n* New `Tuner` class that is a python mixin that requieres of `Acquisition` and `Metamodel` as\nparents. Also now works with a single `Tunable` object.\n* New `Acquisition` class, meant to implement an acquisition function to be inherit by a `Tuner`.\n* New `Metamodel` class, meant to implement everything that a certain `model` needs and be inherit\nby the `Tuner`.\n* Reorganization of the `selection` module to follow a similar `API` to `tuning`.\n\n### Resolved Issues\n\n* Issue #131: Reorganize the project structure.\n* Issue #133: Implement Tunable class to control a list of hyperparameters.\n* Issue #134: Implementation of Tuners for the new structure.\n* Issue #140: Reorganize selectors.\n\n## 0.2.5\n\n### Bug Fixes\n\n* Issue #115: HyperParameter subclass instantiation not working properly\n\n## 0.2.4\n\n### Internal Improvements\n\n* Issue #62: Test for `None` in `HyperParameter.cast` instead of `HyperParameter.__init__`\n\n### Bug fixes\n\n* Issue #98: Categorical hyperparameters do not support `None` as input\n* Issue #89: Fix the computation of `avg_rewards` in `BestKReward`\n\n## 0.2.3\n\n### Bug Fixes\n\n* Issue #84: Error in GP tuning when only one parameter is present bug\n* Issue #96: Fix pickling of HyperParameters\n* Issue #98: Fix implementation of the GPEi tuner\n\n## 0.2.2\n\n### Internal Improvements\n\n* Updated documentation\n\n### Bug Fixes\n\n* Issue #94: Fix unicode `param_type` caused error on python 2.\n\n## 0.2.1\n\n### Bug fixes\n\n* Issue #74: `ParamTypes.STRING` tunables do not work\n\n## 0.2.0\n\n### New Features\n\n* New Recommendation module\n* New HyperParameter types\n* Improved documentation and examples\n* Fully tested Python 2.7, 3.4, 3.5 and 3.6 compatibility\n* HyperParameter copy and deepcopy support\n* Replace print statements with logging\n\n### Internal Improvements\n\n* Integrated with Travis-CI\n* Exhaustive unit testing\n* New implementation of HyperParameter\n* Tuner builds a grid of real values instead of indices\n* Resolve Issue #29: Make args explicit in `__init__` methods\n* Resolve Issue #34: make all imports explicit\n\n### Bug Fixes\n\n* Fix error from mixing string/numerical hyperparameters\n* Inverse transform for categorical hyperparameter returns single item\n\n## 0.1.2\n\n* Issue #47: Add missing requirements in v0.1.1 setup.py\n* Issue #46: Error on v0.1.1: 'GP' object has no attribute 'X'\n\n## 0.1.1\n\n* First release.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/HDI-Project/BTB", "keywords": "machine learning hyperparameters tuning classification", "license": "MIT license", "maintainer": "", "maintainer_email": "", "name": "baytune", "package_url": "https://pypi.org/project/baytune/", "platform": "", "project_url": "https://pypi.org/project/baytune/", "project_urls": {"Homepage": "https://github.com/HDI-Project/BTB"}, "release_url": "https://pypi.org/project/baytune/0.3.7/", "requires_dist": ["docutils (<0.16,>=0.10)", "boto3 (<1.10,>=1.9.18)", "numpy (<1.18.0,>=1.14.0)", "scikit-learn (<0.22.0,>=0.20.0)", "scipy (<1.4.0,>=1.0.1)", "pandas (<0.26.0,>=0.21.0)", "tqdm (<4.50.0,>=4.36.1)", "bumpversion (>=0.5.3) ; extra == 'dev'", "pip (>=9.0.1) ; extra == 'dev'", "watchdog (>=0.8.3) ; extra == 'dev'", "autodocsumm (>=0.1.10) ; extra == 'dev'", "ipython (>=6.5.0) ; extra == 'dev'", "m2r (>=0.2.0) ; extra == 'dev'", "Sphinx (<2.4,>=1.7.1) ; extra == 'dev'", "sphinx-rtd-theme (>=0.2.4) ; extra == 'dev'", "flake8 (>=3.7.7) ; extra == 'dev'", "isort (>=4.3.4) ; extra == 'dev'", "autoflake (>=1.2) ; extra == 'dev'", "autopep8 (>=1.4.3) ; extra == 'dev'", "twine (>=1.10.0) ; extra == 'dev'", "wheel (>=0.30.0) ; extra == 'dev'", "tox (>=2.9.1) ; extra == 'dev'", "coverage (>=4.5.1) ; extra == 'dev'", "pytest (>=3.4.2) ; extra == 'dev'", "pytest-cov (>=2.6.0) ; extra == 'dev'", "jupyter (>=1.0.0) ; extra == 'examples'", "matplotlib (>=3.1.1) ; extra == 'examples'", "pytest (>=3.4.2) ; extra == 'test'", "pytest-cov (>=2.6.0) ; extra == 'test'"], "requires_python": ">=3.5", "summary": "Bayesian Tuning and Bandits", "version": "0.3.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p align=\"left\">\n<img alt=\"BTB\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/80df0970db0e9e95cce463bc9fa595caf90dd1c7/68747470733a2f2f6461692e6c6964732e6d69742e6564752f77702d636f6e74656e742f75706c6f6164732f323031382f30362f4c6f676f5f4441495f686967687265732e706e67\" width=\"15%\">\n<i>An open source project from Data to AI Lab at MIT.</i>\n</p>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/349c0ea0046677430593e78512ba765c8b25f34d/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f4844492d50726f6a6563742f4254422f6d61737465722f646f63732f696d616765732f4254422d49636f6e2d736d616c6c2e706e67\"></p>\n<p>A simple, extensible backend for developing auto-tuning systems.</p>\n<p><a href=\"https://pypi.org/search/?c=Development+Status+%3A%3A+2+-+Pre-Alpha\" rel=\"nofollow\"><img alt=\"Development Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/127dddfac365abf943ba0c998fa192a73323a022/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f446576656c6f706d656e742532305374617475732d322532302d2d2532305072652d2d416c7068612d79656c6c6f77\"></a>\n<a href=\"https://pypi.python.org/pypi/baytune\" rel=\"nofollow\"><img alt=\"PyPi Shield\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ca7bf39c427e66491d423344b1016090a4717352/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f62617974756e652e737667\"></a>\n<a href=\"https://travis-ci.org/HDI-Project/BTB\" rel=\"nofollow\"><img alt=\"Travis CI Shield\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7ddfe6b0ebe47ea88b0af1873c8d85c0b22c53b9/68747470733a2f2f7472617669732d63692e6f72672f4844492d50726f6a6563742f4254422e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/HDI-Project/BTB\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/91c493cf4cabcdcd74773c9dd6941c97c7f0e311/68747470733a2f2f636f6465636f762e696f2f67682f4844492d50726f6a6563742f4254422f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://pepy.tech/project/baytune\" rel=\"nofollow\"><img alt=\"Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a91fa5c8be387de21b0b81201bde3e9748ed08f2/68747470733a2f2f706570792e746563682f62616467652f62617974756e65\"></a></p>\n<ul>\n<li>License: <a href=\"https://github.com/HDI-Project/BTB/blob/master/LICENSE\" rel=\"nofollow\">MIT</a></li>\n<li>Development Status: <a href=\"https://pypi.org/search/?c=Development+Status+%3A%3A+2+-+Pre-Alpha\" rel=\"nofollow\">Pre-Alpha</a></li>\n<li>Documentation: <a href=\"https://HDI-Project.github.io/BTB\" rel=\"nofollow\">https://HDI-Project.github.io/BTB</a></li>\n<li>Homepage: <a href=\"https://github.com/HDI-Project/BTB\" rel=\"nofollow\">https://github.com/HDI-Project/BTB</a></li>\n</ul>\n<h1>Overview</h1>\n<p>BTB (\"Bayesian Tuning and Bandits\") is a simple, extensible backend for developing auto-tuning\nsystems such as AutoML systems. It provides an easy-to-use interface for <em>tuning</em> and <em>selection</em>.</p>\n<p>It is currently being used in several AutoML systems:</p>\n<ul>\n<li><a href=\"https://github.com/HDI-Project/ATM\" rel=\"nofollow\">ATM</a>, distributed, multi-tenant AutoML system for\nclassifier tuning</li>\n<li><a href=\"https://github.com/HDI-Project/mit-d3m-ta2/\" rel=\"nofollow\">mit-d3m-ta2</a>, MIT's system for the DARPA\n<a href=\"https://www.darpa.mil/program/data-driven-discovery-of-models\" rel=\"nofollow\">Data-driven discovery of models</a> (D3M) program</li>\n<li><a href=\"https://github.com/HDI-Project/AutoBazaar\" rel=\"nofollow\">AutoBazaar</a>, a flexible, general-purpose\nAutoML system</li>\n</ul>\n<h1>Install</h1>\n<h2>Requirements</h2>\n<p><strong>BTB</strong> has been developed and tested on <a href=\"https://www.python.org/downloads/\" rel=\"nofollow\">Python 3.5, 3.6 and 3.7</a></p>\n<p>Also, although it is not strictly required, the usage of a\n<a href=\"https://virtualenv.pypa.io/en/latest/\" rel=\"nofollow\">virtualenv</a> is highly recommended in order to avoid\ninterfering with other software installed in the system where <strong>BTB</strong> is run.</p>\n<h2>Install with pip</h2>\n<p>The easiest and recommended way to install <strong>BTB</strong> is using <a href=\"https://pip.pypa.io/en/stable/\" rel=\"nofollow\">pip</a>:</p>\n<pre>pip install baytune\n</pre>\n<p>This will pull and install the latest stable release from <a href=\"https://pypi.org/\" rel=\"nofollow\">PyPi</a>.</p>\n<p>If you want to install from source or contribute to the project please read the\n<a href=\"https://hdi-project.github.io/BTB/contributing.html#get-started\" rel=\"nofollow\">Contributing Guide</a>.</p>\n<h1>Quickstart</h1>\n<p>In this short tutorial we will guide you through the necessary steps to get started using BTB\nto select and tune the best model to solve a Machine Learning problem.</p>\n<p>In particular, in this example we will be using <code>BTBSession</code> to perform solve the <a href=\"http://lib.stat.cmu.edu/datasets/boston\" rel=\"nofollow\">Boston</a> regression problem by selecting between the\n<code>ExtraTreesRegressor</code> and the <code>RandomForestRegressor</code> models from <a href=\"https://scikit-learn.org/\" rel=\"nofollow\">scikit-learn</a> while also searching for their best Hyperparameter configuration.</p>\n<h2>Prepare a scoring function</h2>\n<p>The first step in order to use the <code>BTBSession</code> class is to develop a scoring function.</p>\n<p>This is a Python function that, given a model name and a hyperparameter configuration,\nevaluates the performance of the model on your data and returns a score.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sklearn.datasets</span> <span class=\"kn\">import</span> <span class=\"n\">load_boston</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.ensemble</span> <span class=\"kn\">import</span> <span class=\"n\">ExtraTreesRegressor</span><span class=\"p\">,</span> <span class=\"n\">RandomForestRegressor</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.metrics</span> <span class=\"kn\">import</span> <span class=\"n\">make_scorer</span><span class=\"p\">,</span> <span class=\"n\">r2_score</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.model_selection</span> <span class=\"kn\">import</span> <span class=\"n\">cross_val_score</span>\n\n<span class=\"n\">dataset</span> <span class=\"o\">=</span> <span class=\"n\">load_boston</span><span class=\"p\">()</span>\n<span class=\"n\">models</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'random_forest'</span><span class=\"p\">:</span> <span class=\"n\">RandomForestRegressor</span><span class=\"p\">,</span>\n    <span class=\"s1\">'extra_trees'</span><span class=\"p\">:</span> <span class=\"n\">ExtraTreesRegressor</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">scoring_function</span><span class=\"p\">(</span><span class=\"n\">model_name</span><span class=\"p\">,</span> <span class=\"n\">hyperparameter_values</span><span class=\"p\">):</span>\n    <span class=\"n\">model_class</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"p\">[</span><span class=\"n\">model_name</span><span class=\"p\">]</span>\n    <span class=\"n\">model_instance</span> <span class=\"o\">=</span> <span class=\"n\">model_class</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">hyperparameter_values</span><span class=\"p\">)</span>\n    <span class=\"n\">scores</span> <span class=\"o\">=</span> <span class=\"n\">cross_val_score</span><span class=\"p\">(</span>\n        <span class=\"n\">estimator</span><span class=\"o\">=</span><span class=\"n\">model_instance</span><span class=\"p\">,</span>\n        <span class=\"n\">X</span><span class=\"o\">=</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">,</span>\n        <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">target</span><span class=\"p\">,</span>\n        <span class=\"n\">scoring</span><span class=\"o\">=</span><span class=\"n\">make_scorer</span><span class=\"p\">(</span><span class=\"n\">r2_score</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">scores</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">()</span>\n</pre>\n<h2>Define the tunable hyperparameters</h2>\n<p>The second step is to define the hyperparameters that we want to tune for each model as <code>Tunables</code>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">btb.tuning</span> <span class=\"kn\">import</span> <span class=\"n\">Tunable</span>\n<span class=\"kn\">from</span> <span class=\"nn\">btb.tuning.hyperparams</span> <span class=\"kn\">import</span> <span class=\"n\">CategoricalHyperParam</span><span class=\"p\">,</span> <span class=\"n\">IntHyperParam</span>\n\n<span class=\"n\">tunables</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'random_forest'</span><span class=\"p\">:</span> <span class=\"n\">Tunable</span><span class=\"p\">({</span>\n        <span class=\"s1\">'max_features'</span><span class=\"p\">:</span> <span class=\"n\">CategoricalHyperParam</span><span class=\"p\">(</span><span class=\"n\">choices</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">'auto'</span><span class=\"p\">,</span> <span class=\"s1\">'log2'</span><span class=\"p\">,</span> <span class=\"s1\">'sqrt'</span><span class=\"p\">]),</span>\n        <span class=\"s1\">'min_samples_split'</span><span class=\"p\">:</span> <span class=\"n\">IntHyperParam</span><span class=\"p\">(</span><span class=\"nb\">min</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"nb\">max</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">),</span>\n        <span class=\"s1\">'min_samples_leaf'</span><span class=\"p\">:</span> <span class=\"n\">IntHyperParam</span><span class=\"p\">(</span><span class=\"nb\">min</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nb\">max</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"p\">}),</span>\n    <span class=\"s1\">'extra_trees'</span><span class=\"p\">:</span> <span class=\"n\">Tunable</span><span class=\"p\">({</span>\n        <span class=\"s1\">'max_features'</span><span class=\"p\">:</span> <span class=\"n\">CategoricalHyperParam</span><span class=\"p\">(</span><span class=\"n\">choices</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">'auto'</span><span class=\"p\">,</span> <span class=\"s1\">'log2'</span><span class=\"p\">,</span> <span class=\"s1\">'sqrt'</span><span class=\"p\">]),</span>\n        <span class=\"s1\">'min_samples_split'</span><span class=\"p\">:</span> <span class=\"n\">IntHyperParam</span><span class=\"p\">(</span><span class=\"nb\">min</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"nb\">max</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">),</span>\n        <span class=\"s1\">'min_samples_leaf'</span><span class=\"p\">:</span> <span class=\"n\">IntHyperParam</span><span class=\"p\">(</span><span class=\"nb\">min</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nb\">max</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"p\">})</span>\n<span class=\"p\">}</span>\n</pre>\n<h2>Start the searching process</h2>\n<p>Once you have defined a scoring function and the tunable hyperparameters specification of your\nmodels, you can start the searching for the best model and hyperparameter configuration by using\nthe <code>btb.BTBSession</code>.</p>\n<p>All you need to do is create an instance passing the tunable hyperparameters scpecification\nand the scoring function.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">btb</span> <span class=\"kn\">import</span> <span class=\"n\">BTBSession</span>\n\n<span class=\"n\">session</span> <span class=\"o\">=</span> <span class=\"n\">BTBSession</span><span class=\"p\">(</span>\n    <span class=\"n\">tunables</span><span class=\"o\">=</span><span class=\"n\">tunables</span><span class=\"p\">,</span>\n    <span class=\"n\">scorer</span><span class=\"o\">=</span><span class=\"n\">scoring_function</span>\n<span class=\"p\">)</span>\n</pre>\n<p>And then call the <code>run</code> method indicating how many tunable iterations you want the Session to\nperform:</p>\n<pre><span class=\"n\">best_proposal</span> <span class=\"o\">=</span> <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">)</span>\n</pre>\n<p>The result will be a dictionary indicating the name of the best model that could be found\nand the hyperparameter configuration that was used:</p>\n<pre><code>{\n    'id': 'd85262197592bd00c8cd9e87164e18c8',\n    'name': 'extra_trees',\n    'config': {\n        'max_features': None,\n        'min_samples_split': 17,\n        'min_samples_leaf': 1\n    },\n    'score': 0.6056926625119803\n}\n</code></pre>\n<h1>How does BTB perform?</h1>\n<p>We have a comprehensive <a href=\"https://github.com/HDI-Project/BTB/tree/master/benchmark\" rel=\"nofollow\">benchmarking framework</a>\nthat we use to evaluate the performance of our <code>Tuners</code>. For every release, we perform benchmarking\nagainst 100's of challenges, comparing tuners against each other in terms of number of wins.\nWe present the latest leaderboard from latest release below:</p>\n<h2>Number of Wins per Version</h2>\n<table>\n<thead>\n<tr>\n<th>tuner</th>\n<th>with ties</th>\n<th>without ties</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>BTB.GPEiTuner</code></td>\n<td><strong>35</strong></td>\n<td>7</td>\n</tr>\n<tr>\n<td><code>BTB.GPTuner</code></td>\n<td>33</td>\n<td><strong>8</strong></td>\n</tr>\n<tr>\n<td><code>BTB.UniformTuner</code></td>\n<td>29</td>\n<td>2</td>\n</tr>\n<tr>\n<td><code>HyperOpt.rand.suggest</code></td>\n<td>28</td>\n<td>0</td>\n</tr>\n<tr>\n<td><code>HyperOpt.tpe.suggest</code></td>\n<td>32</td>\n<td>5</td>\n</tr></tbody></table>\n<ul>\n<li>Detailed results from which this summary emerged are available <a href=\"https://docs.google.com/spreadsheets/d/1E0fSSfqOuDhazccdsx7eG1aLCJagdpj1OKYhdOohZOg/\" rel=\"nofollow\">here</a>.</li>\n<li>If you want to compare your own tuner, follow the steps in our benchmarking framework <a href=\"https://github.com/HDI-Project/BTB/tree/master/benchmark\" rel=\"nofollow\">here</a>.</li>\n<li>If you have a proposal for tuner that we should include in our benchmarking get in touch\nwith us at <a href=\"mailto:dailabmit@gmail.com\">dailabmit@gmail.com</a>.</li>\n</ul>\n<blockquote>\n<p>:warning: <strong>Note</strong>: In release v0.3.7, we are currently only doing 50 ML challenges. Our next release for\nbenchmarking will have results from 422 datasets and 3 optimization challenges. To check out what\nwill be included in our benchmarking efforts - you can check <a href=\"https://github.com/HDI-Project/BTB/projects\" rel=\"nofollow\">here</a>.</p>\n</blockquote>\n<h1>What's next?</h1>\n<p>For more details about <strong>BTB</strong> and all its possibilities and features, please check the\n<a href=\"https://HDI-Project.github.io/BTB/\" rel=\"nofollow\">project documentation site</a>!</p>\n<p>Also do not forget to have a look at the <a href=\"notebooks\" rel=\"nofollow\">notebook tutorials</a>.</p>\n<h1>Citing BTB</h1>\n<p>If you use BTB, please consider citing our related paper:</p>\n<p>Micah J. Smith, Carles Sala, James Max Kanter, and Kalyan Veeramachaneni. <a href=\"https://arxiv.org/abs/1905.08942\" rel=\"nofollow\">\"The Machine Learning Bazaar: Harnessing the ML Ecosystem for Effective System Development.\"</a> arXiv Preprint 1905.08942. 2019.</p>\n<pre><span class=\"nc\">@article</span><span class=\"p\">{</span><span class=\"nl\">smith2019mlbazaar</span><span class=\"p\">,</span>\n  <span class=\"na\">author</span> <span class=\"p\">=</span> <span class=\"s\">{Smith, Micah J. and Sala, Carles and Kanter, James Max and Veeramachaneni, Kalyan}</span><span class=\"p\">,</span>\n  <span class=\"na\">title</span> <span class=\"p\">=</span> <span class=\"s\">{The Machine Learning Bazaar: Harnessing the ML Ecosystem for Effective System Development}</span><span class=\"p\">,</span>\n  <span class=\"na\">journal</span> <span class=\"p\">=</span> <span class=\"s\">{arXiv e-prints}</span><span class=\"p\">,</span>\n  <span class=\"na\">year</span> <span class=\"p\">=</span> <span class=\"s\">{2019}</span><span class=\"p\">,</span>\n  <span class=\"na\">eid</span> <span class=\"p\">=</span> <span class=\"s\">{arXiv:1905.08942}</span><span class=\"p\">,</span>\n  <span class=\"na\">pages</span> <span class=\"p\">=</span> <span class=\"s\">{arXiv:1905.08942}</span><span class=\"p\">,</span>\n  <span class=\"na\">archivePrefix</span> <span class=\"p\">=</span> <span class=\"s\">{arXiv}</span><span class=\"p\">,</span>\n  <span class=\"na\">eprint</span> <span class=\"p\">=</span> <span class=\"s\">{1905.08942}</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</pre>\n<h1>History</h1>\n<h2>0.3.7 - 2020-04-15</h2>\n<p>This release brings a new <code>benchmark</code> framework with public leaderboard.\nAs part of our benchmarking efforts we will run the framework at every release and make the results\npublic. In each run we compare it to other tuners and optimizer libraries. We are constantly adding\nnew libraries for comparison. If you have suggestions for a tuner library we should include in our\ncompraison, please contact us via email at <a href=\"mailto:dailabmit@gmail.com\">dailabmit@gmail.com</a>.</p>\n<h3>Resolved Issues</h3>\n<ul>\n<li>Issue #159: Implement more <code>MLChallenges</code> and generate a public leaderboard.</li>\n<li>Issue #180: Update BTB Benchmarking module.</li>\n<li>Issue #182: Integrate HyperOPT with benchmarking.</li>\n<li>Issue #184: Integrate dask to bencharking.</li>\n</ul>\n<h2>0.3.6 - 2020-03-04</h2>\n<p>This release improves <code>BTBSession</code> error handling and allows <code>Tunables</code> with cardinality\nequal to 1 to be scored with <code>BTBSession</code>. Also, we provide a new documentation for\nthis version of <code>BTB</code>.</p>\n<h3>Internal Improvements</h3>\n<p>Improved documentation, unittests and integration tests.</p>\n<h3>Resolved Issues</h3>\n<ul>\n<li>Issue #164: Improve documentation for <code>v0.3.5+</code>.</li>\n<li>Issue #166: Wrong erro raised by BTBSession on too many errors.</li>\n<li>Issue #170: Tuner has no scores attribute until record is run once.</li>\n<li>Issue #175: BTBSession crashes when record is not performed.</li>\n<li>Issue #176: BTBSession fails to select a proper Tunable when normalized_scores becomse None.</li>\n</ul>\n<h2>0.3.5 - 2020-01-21</h2>\n<p>With this release we are improving <code>BTBSession</code> by adding private attributes, or not intended to\nbe public / modified by the user and also improving the documentation of it.</p>\n<h3>Internal Improvements</h3>\n<p>Improved docstrings, unittests and public interface of <code>BTBSession</code>.</p>\n<h3>Resolved Issues</h3>\n<ul>\n<li>Issue #162: Fix session with the given comments on PR 156.</li>\n</ul>\n<h2>0.3.4 - 2019-12-24</h2>\n<p>With this release we introduce a <code>BTBSession</code> class. This class represents the process of selecting\nand tuning several tunables until the best possible configuration fo a specific <code>scorer</code> is found.\nWe also have improved and fixed some minor bugs arround the code (described in the issues below).</p>\n<h3>New Features</h3>\n<ul>\n<li><code>BTBSession</code> that makes <code>BTB</code> more user friendly.</li>\n</ul>\n<h3>Internal Improvements</h3>\n<p>Improved unittests, removed old dependencies, added more <code>MLChallenges</code> and fixed an issue with\nthe bound methods.</p>\n<h3>Resolved Issues</h3>\n<ul>\n<li>Issue #145: Implement <code>BTBSession</code>.</li>\n<li>Issue #155: Set defaut to <code>None</code> for <code>CategoricalHyperParam</code> is not possible.</li>\n<li>Issue #157: Metamodel <code>_MODEL_KWARGS_DEFAULT</code> becomes mutable.</li>\n<li>Issue #158: Remove <code>mock</code> dependency from the package.</li>\n<li>Issue #160: Add more Machine Learning Challenges and more estimators.</li>\n</ul>\n<h2>0.3.3 - 2019-12-11</h2>\n<p>Fix a bug where creating an instance of <code>Tuner</code> ends in an error.</p>\n<h3>Internal Improvements</h3>\n<p>Improve unittests to use <code>spec_set</code> in order to detect errors while mocking an object.</p>\n<h3>Resolved Issues</h3>\n<ul>\n<li>Issue #153: Bug with tunner logger message that avoids creating the Tunner.</li>\n</ul>\n<h2>0.3.2 - 2019-12-10</h2>\n<p>With this release we add the new <code>benchmark</code> challenge <code>MLChallenge</code> which allows users to\nperform benchmarking over datasets with machine learning estimators, and also some new\nfeatures to make the workflow easier.</p>\n<h3>New Features</h3>\n<ul>\n<li>New <code>MLChallenge</code> challenge that allows performing crossvalidation over datasets and machine\nlearning estimators.</li>\n<li>New <code>from_dict</code> function for <code>Tunable</code> class in order to instantiate from a dictionary that\ncontains information over hyperparameters.</li>\n<li>New <code>default</code> value for each hyperparameter type.</li>\n</ul>\n<h3>Resolved Issues</h3>\n<ul>\n<li>Issue #68: Remove <code>btb.tuning.constants</code> module.</li>\n<li>Issue #120: Tuner repr not helpful.</li>\n<li>Issue #121: HyperParameter repr not helpful.</li>\n<li>Issue #141: Imlement propper logging to the tuning section.</li>\n<li>Issue #150: Implement Tunable <code>from_dict</code>.</li>\n<li>Issue #151: Add default value for hyperparameters.</li>\n<li>Issue #152: Support <code>None</code> as a choice in <code>CategoricalHyperPrameters</code>.</li>\n</ul>\n<h2>0.3.1 - 2019-11-25</h2>\n<p>With this release we introduce a <code>benchmark</code> module for <code>BTB</code> which allows the users to perform\na benchmark over a series of <code>challenges</code>.</p>\n<h3>New Features</h3>\n<ul>\n<li>New <code>benchmark</code> module.</li>\n<li>New submodule named <code>challenges</code> to work toghether with <code>benchmark</code> module.</li>\n</ul>\n<h3>Resolved Issues</h3>\n<ul>\n<li>Issue #139: Implement a Benchmark for BTB</li>\n</ul>\n<h2>0.3.0 - 2019-11-11</h2>\n<p>With this release we introduce an improved <code>BTB</code> that has a major reorganization of the project\nwith emphasis on an easier way of interacting with <code>BTB</code> and an easy way of developing, testing and\ncontributing new acquisition functions, metamodels, tuners  and hyperparameters.</p>\n<h3>New project structure</h3>\n<p>The new major reorganization comes with the <code>btb.tuning</code> module. This module provides everything\nneeded for the <code>tuning</code> process and comes with three new additions <code>Acquisition</code>, <code>Metamodel</code> and\n<code>Tunable</code>. Also there is an update to the <code>Hyperparamters</code> and <code>Tuners</code>. This changes are meant\nto help developers and contributors to easily develop, test and contribute new <code>Tuners</code>.</p>\n<h3>New API</h3>\n<p>There is a slightly new way of using <code>BTB</code> as the new <code>Tunable</code> class is introduced, that is meant\nto be the only requiered object to instantiate a <code>Tuner</code>. This <code>Tunable</code> class represents a\ncollection of <code>HyperParams</code> that need to be tuned as a whole, at once. Now, in order to create a\n<code>Tuner</code>, a <code>Tunable</code> instance must be created first with the <code>hyperparameters</code> of the\n<code>objective function</code>.</p>\n<h3>New Features</h3>\n<ul>\n<li>New <code>Hyperparameters</code> that allow an easier interaction for the final user.</li>\n<li>New <code>Tunable</code> class that manages a collection of <code>Hyperparameters</code>.</li>\n<li>New <code>Tuner</code> class that is a python mixin that requieres of <code>Acquisition</code> and <code>Metamodel</code> as\nparents. Also now works with a single <code>Tunable</code> object.</li>\n<li>New <code>Acquisition</code> class, meant to implement an acquisition function to be inherit by a <code>Tuner</code>.</li>\n<li>New <code>Metamodel</code> class, meant to implement everything that a certain <code>model</code> needs and be inherit\nby the <code>Tuner</code>.</li>\n<li>Reorganization of the <code>selection</code> module to follow a similar <code>API</code> to <code>tuning</code>.</li>\n</ul>\n<h3>Resolved Issues</h3>\n<ul>\n<li>Issue #131: Reorganize the project structure.</li>\n<li>Issue #133: Implement Tunable class to control a list of hyperparameters.</li>\n<li>Issue #134: Implementation of Tuners for the new structure.</li>\n<li>Issue #140: Reorganize selectors.</li>\n</ul>\n<h2>0.2.5</h2>\n<h3>Bug Fixes</h3>\n<ul>\n<li>Issue #115: HyperParameter subclass instantiation not working properly</li>\n</ul>\n<h2>0.2.4</h2>\n<h3>Internal Improvements</h3>\n<ul>\n<li>Issue #62: Test for <code>None</code> in <code>HyperParameter.cast</code> instead of <code>HyperParameter.__init__</code></li>\n</ul>\n<h3>Bug fixes</h3>\n<ul>\n<li>Issue #98: Categorical hyperparameters do not support <code>None</code> as input</li>\n<li>Issue #89: Fix the computation of <code>avg_rewards</code> in <code>BestKReward</code></li>\n</ul>\n<h2>0.2.3</h2>\n<h3>Bug Fixes</h3>\n<ul>\n<li>Issue #84: Error in GP tuning when only one parameter is present bug</li>\n<li>Issue #96: Fix pickling of HyperParameters</li>\n<li>Issue #98: Fix implementation of the GPEi tuner</li>\n</ul>\n<h2>0.2.2</h2>\n<h3>Internal Improvements</h3>\n<ul>\n<li>Updated documentation</li>\n</ul>\n<h3>Bug Fixes</h3>\n<ul>\n<li>Issue #94: Fix unicode <code>param_type</code> caused error on python 2.</li>\n</ul>\n<h2>0.2.1</h2>\n<h3>Bug fixes</h3>\n<ul>\n<li>Issue #74: <code>ParamTypes.STRING</code> tunables do not work</li>\n</ul>\n<h2>0.2.0</h2>\n<h3>New Features</h3>\n<ul>\n<li>New Recommendation module</li>\n<li>New HyperParameter types</li>\n<li>Improved documentation and examples</li>\n<li>Fully tested Python 2.7, 3.4, 3.5 and 3.6 compatibility</li>\n<li>HyperParameter copy and deepcopy support</li>\n<li>Replace print statements with logging</li>\n</ul>\n<h3>Internal Improvements</h3>\n<ul>\n<li>Integrated with Travis-CI</li>\n<li>Exhaustive unit testing</li>\n<li>New implementation of HyperParameter</li>\n<li>Tuner builds a grid of real values instead of indices</li>\n<li>Resolve Issue #29: Make args explicit in <code>__init__</code> methods</li>\n<li>Resolve Issue #34: make all imports explicit</li>\n</ul>\n<h3>Bug Fixes</h3>\n<ul>\n<li>Fix error from mixing string/numerical hyperparameters</li>\n<li>Inverse transform for categorical hyperparameter returns single item</li>\n</ul>\n<h2>0.1.2</h2>\n<ul>\n<li>Issue #47: Add missing requirements in v0.1.1 setup.py</li>\n<li>Issue #46: Error on v0.1.1: 'GP' object has no attribute 'X'</li>\n</ul>\n<h2>0.1.1</h2>\n<ul>\n<li>First release.</li>\n</ul>\n\n          </div>"}, "last_serial": 7024090, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "da6e1fedefe8e90f1670dd3587916d4e", "sha256": "cdac652e88998441647439f2e7d8f502cb1b54e04ea4fc3b702faae20861098d"}, "downloads": -1, "filename": "baytune-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "da6e1fedefe8e90f1670dd3587916d4e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18960, "upload_time": "2018-04-26T16:06:04", "upload_time_iso_8601": "2018-04-26T16:06:04.294247Z", "url": "https://files.pythonhosted.org/packages/4d/ee/1af0048418f21d7ee5fd8541426e2689d9e328af2818dee7181ff1cc9dd1/baytune-0.1.0-py3-none-any.whl", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "636dad1ce45a7c09622bf3af87bc1408", "sha256": "7f68587b7f9845bcf989c83a5a9442b5f58196c73d5e11478f93b5c0c6e9bcee"}, "downloads": -1, "filename": "baytune-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "636dad1ce45a7c09622bf3af87bc1408", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18953, "upload_time": "2018-04-28T18:34:54", "upload_time_iso_8601": "2018-04-28T18:34:54.013041Z", "url": "https://files.pythonhosted.org/packages/c1/c5/a5a6d7f27d73b2159c3fd0bee9623c19194e833a7bc17739cb3aedcd4a9d/baytune-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "565cbf474d9242e7eb0acf776fd7ea35", "sha256": "98e36ff4d07c60aaae4a4680a2a11ea7c089051e9e13b680b9bb0f0cb9190a3d"}, "downloads": -1, "filename": "baytune-0.1.1.tar.gz", "has_sig": false, "md5_digest": "565cbf474d9242e7eb0acf776fd7ea35", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12049, "upload_time": "2018-04-28T18:34:57", "upload_time_iso_8601": "2018-04-28T18:34:57.934902Z", "url": "https://files.pythonhosted.org/packages/a5/e6/b88b68b8372dca315a6336b87e23cc04d7ff07b1c5beac008a0acde7481f/baytune-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "9c7467ad687cc5b3392550e971815ca3", "sha256": "38a98fb7d910ea6482299094536efa6021357a38e23fa20ca440a15f81f631d1"}, "downloads": -1, "filename": "baytune-0.1.2-py2-none-any.whl", "has_sig": false, "md5_digest": "9c7467ad687cc5b3392550e971815ca3", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 19016, "upload_time": "2018-05-03T15:18:56", "upload_time_iso_8601": "2018-05-03T15:18:56.818805Z", "url": "https://files.pythonhosted.org/packages/f1/5a/0fab73f1023127d75fddc751c862622741339b8593747eeb63ddf7928a34/baytune-0.1.2-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2692ca2d3de95b465c05a505c0701d76", "sha256": "a94499e558643046e33494b30ae6cdb840c3e9804e09b112ca28678842fe9587"}, "downloads": -1, "filename": "baytune-0.1.2.tar.gz", "has_sig": false, "md5_digest": "2692ca2d3de95b465c05a505c0701d76", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12144, "upload_time": "2018-05-03T15:18:58", "upload_time_iso_8601": "2018-05-03T15:18:58.483950Z", "url": "https://files.pythonhosted.org/packages/11/70/299743fe3691cff8f9a78910dd1b16c5434e7217dd58f887beff3a8969b5/baytune-0.1.2.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "b16ae7ad0ec8673833522bccc6ca62bd", "sha256": "607a60c52a30372a980e53ab5556fc57e28fdb3abbd4c3b6ec221b4f57190102"}, "downloads": -1, "filename": "baytune-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b16ae7ad0ec8673833522bccc6ca62bd", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 26765, "upload_time": "2018-06-04T19:46:29", "upload_time_iso_8601": "2018-06-04T19:46:29.954108Z", "url": "https://files.pythonhosted.org/packages/56/d4/238459d1a7e71408405b1d0de0bedaad3a6dcb30b015344872e5f801aa12/baytune-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "84735d34e4a7e92354cc43c3028bd349", "sha256": "dc707d3e934c5ffabf85d5cc39486f1395dea453f32d5f1a74bb6ec21e4ecae1"}, "downloads": -1, "filename": "baytune-0.2.0.tar.gz", "has_sig": false, "md5_digest": "84735d34e4a7e92354cc43c3028bd349", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37690, "upload_time": "2018-06-04T19:46:31", "upload_time_iso_8601": "2018-06-04T19:46:31.944436Z", "url": "https://files.pythonhosted.org/packages/e3/26/3cf60909c854bd56e844c525c5932e87c7b90a7fad8d45b716dafa6e93c7/baytune-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "adcdf6b4ab799b50c4569a9465ecbba9", "sha256": "9c840c72dc647de31fcef53ae02acf6c58bc111eb3cebc10525254ce6c12a7e9"}, "downloads": -1, "filename": "baytune-0.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "adcdf6b4ab799b50c4569a9465ecbba9", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 26994, "upload_time": "2018-06-05T20:00:34", "upload_time_iso_8601": "2018-06-05T20:00:34.507008Z", "url": "https://files.pythonhosted.org/packages/db/67/67537ebf9d6406f66161578d02227f153422ad407ab23f0ecf7831ab4c22/baytune-0.2.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e248ac21bccbb2f9bc2614fdcabb6c20", "sha256": "2a3ae485e7c570349d1557d3d2cd80f7e70a765da17784ff7396b83a0598ad80"}, "downloads": -1, "filename": "baytune-0.2.1.tar.gz", "has_sig": false, "md5_digest": "e248ac21bccbb2f9bc2614fdcabb6c20", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38009, "upload_time": "2018-06-05T20:00:35", "upload_time_iso_8601": "2018-06-05T20:00:35.423841Z", "url": "https://files.pythonhosted.org/packages/87/25/3da9a3639a3e436cb65530949f180d6484dcebe3e141268cc39d8d243571/baytune-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "252d65dcd2f7b7110534c3e81fa2200c", "sha256": "04a79ce95cdb74166840fac267365b9ea0b6afebecbf96ecb224a81a54fb03a4"}, "downloads": -1, "filename": "baytune-0.2.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "252d65dcd2f7b7110534c3e81fa2200c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 27332, "upload_time": "2018-10-11T19:27:23", "upload_time_iso_8601": "2018-10-11T19:27:23.017839Z", "url": "https://files.pythonhosted.org/packages/b2/74/8a9047574f8460dedd74a542b26fc08ed6fb9f072ae6c90e561c70d15ffd/baytune-0.2.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d274c761d195d2201c00229961f1c345", "sha256": "1b67ec72a97d8506f78fdda96dfb485363089ef1f4677b9a5cb59477e4391af4"}, "downloads": -1, "filename": "baytune-0.2.2.tar.gz", "has_sig": false, "md5_digest": "d274c761d195d2201c00229961f1c345", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 55555, "upload_time": "2018-10-11T19:27:24", "upload_time_iso_8601": "2018-10-11T19:27:24.351348Z", "url": "https://files.pythonhosted.org/packages/b6/26/f61c1afff37a47e4793f0ec67faed8c08ac7c03be86f6206d414cd461f77/baytune-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "c78eaec35d80aee52877ba17ecff020d", "sha256": "3a93bf40d12df9083f6657bd72117f8591c2b930ecac2ba2b9dbbb5efe4ac7d1"}, "downloads": -1, "filename": "baytune-0.2.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c78eaec35d80aee52877ba17ecff020d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 27471, "upload_time": "2018-11-14T03:45:19", "upload_time_iso_8601": "2018-11-14T03:45:19.859507Z", "url": "https://files.pythonhosted.org/packages/7f/0c/4a9fc81d9d3c75232808bc23bc2fcde8eef30a53a39fd7b30f8dddee98a7/baytune-0.2.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e505ec4d8cd198fd69ab64a7ecaae371", "sha256": "e23fc362d029b069f9e8c60c3157788a27aea5b21faeb68120efda3b6018b2bd"}, "downloads": -1, "filename": "baytune-0.2.3.tar.gz", "has_sig": false, "md5_digest": "e505ec4d8cd198fd69ab64a7ecaae371", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 55160, "upload_time": "2018-11-14T03:45:21", "upload_time_iso_8601": "2018-11-14T03:45:21.311542Z", "url": "https://files.pythonhosted.org/packages/53/e1/578137f8c188547f1b5d2226526c54f5e13ce9af81a0c01ef8c6907c9f9d/baytune-0.2.3.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "3f8750b386b2b4b830d3db1a3ae54dea", "sha256": "e0e4dad42acdaf65b5d266d1949b8f69728902f98035df39afe29b682dd09e7f"}, "downloads": -1, "filename": "baytune-0.2.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3f8750b386b2b4b830d3db1a3ae54dea", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 27876, "upload_time": "2019-01-21T19:22:06", "upload_time_iso_8601": "2019-01-21T19:22:06.155246Z", "url": "https://files.pythonhosted.org/packages/45/7d/2f749e2f87449ea77b8ac37498030e31a2e0add41b69e70ac4e89d95a769/baytune-0.2.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e42793264bf6a7686fcb5ad46981e819", "sha256": "bd85d5868e246f546ab0a694afe548f9c7ec9bc136578020c0d57d1607b3cbb0"}, "downloads": -1, "filename": "baytune-0.2.4.tar.gz", "has_sig": false, "md5_digest": "e42793264bf6a7686fcb5ad46981e819", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 54506, "upload_time": "2019-01-21T19:22:07", "upload_time_iso_8601": "2019-01-21T19:22:07.622311Z", "url": "https://files.pythonhosted.org/packages/45/eb/4daa8b8569be3b1b0dd201e7cc16a7067545dcfe09e6d5521ceb1b68711d/baytune-0.2.4.tar.gz", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "cfd2eff498b57fce6f0a49a0a5f18dc2", "sha256": "9a761e55b6ade3e3704fc64419b0df4c6fa976b12938969a2d87aecad23958e7"}, "downloads": -1, "filename": "baytune-0.2.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "cfd2eff498b57fce6f0a49a0a5f18dc2", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 28137, "upload_time": "2019-03-15T17:52:50", "upload_time_iso_8601": "2019-03-15T17:52:50.617806Z", "url": "https://files.pythonhosted.org/packages/47/c8/3107ad844a656ffb703492e8687e9ce0f2bd0cec9ab5dae20c533c56cd3c/baytune-0.2.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7d3c1c1eef2d964717cc9b887bc2ff09", "sha256": "aecfd10f90e0c2f807e4143ef82915d4bd7553407073e6ea35858cd068af76f7"}, "downloads": -1, "filename": "baytune-0.2.5.tar.gz", "has_sig": false, "md5_digest": "7d3c1c1eef2d964717cc9b887bc2ff09", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 54990, "upload_time": "2019-03-15T17:52:53", "upload_time_iso_8601": "2019-03-15T17:52:53.708395Z", "url": "https://files.pythonhosted.org/packages/2f/ba/c505d27a6b8498b417a887d0d4b85ffccfd2fac8687613affaf431bade35/baytune-0.2.5.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "edd8594508b1b5e1906d089aa1968a02", "sha256": "0c090203efd5095e7aa9713f61f66198c40f595ff899668f73140a47e8238442"}, "downloads": -1, "filename": "baytune-0.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "edd8594508b1b5e1906d089aa1968a02", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 34679, "upload_time": "2019-11-12T01:06:34", "upload_time_iso_8601": "2019-11-12T01:06:34.956896Z", "url": "https://files.pythonhosted.org/packages/e3/64/e8afc99a2c64a2ff7ff5931021ed2beccb78df7864aa3e27136ca2e5716c/baytune-0.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2f2f5399d3cdab2b1254529d6eff38cd", "sha256": "2476b0985c34790eb383145ae5b9bc06c62bdfb189258e7800aea2abce402592"}, "downloads": -1, "filename": "baytune-0.3.0.tar.gz", "has_sig": false, "md5_digest": "2f2f5399d3cdab2b1254529d6eff38cd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 91874, "upload_time": "2019-11-12T01:06:37", "upload_time_iso_8601": "2019-11-12T01:06:37.359292Z", "url": "https://files.pythonhosted.org/packages/43/2e/9226d1a91f6dd65623aa596bfb28173f4f8ac7c4527e99c8049ebb2d7e9e/baytune-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "95774087e56664f987ac312480b112ce", "sha256": "99a1104f8386563b20f5da477f57aa7df491581b1c6cce00a34679c61f8ee89f"}, "downloads": -1, "filename": "baytune-0.3.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "95774087e56664f987ac312480b112ce", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 40631, "upload_time": "2019-11-25T18:51:18", "upload_time_iso_8601": "2019-11-25T18:51:18.498471Z", "url": "https://files.pythonhosted.org/packages/b5/5a/806900af267d55ed7c886cb2b97645f9c415c04947f19ec0260d8170943b/baytune-0.3.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b9e25cf0887a5cf8ada1a88c9760dfa6", "sha256": "c6a10c756d2eec9fdfff5bf1e4e444fed2be80cf596a58182722ef58dbd30b43"}, "downloads": -1, "filename": "baytune-0.3.1.tar.gz", "has_sig": false, "md5_digest": "b9e25cf0887a5cf8ada1a88c9760dfa6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 96615, "upload_time": "2019-11-25T18:51:20", "upload_time_iso_8601": "2019-11-25T18:51:20.184092Z", "url": "https://files.pythonhosted.org/packages/33/0f/742617ec655493b21d95dc26b6ee3352a805dbe1b59b79f373fe4a785a99/baytune-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "fe16e2f6e20ad5afa005d13dc033662d", "sha256": "347d52ff42eccdf9c99e8f8eeed81e83f2973bbc678280aca7ebdaf3f77e732d"}, "downloads": -1, "filename": "baytune-0.3.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "fe16e2f6e20ad5afa005d13dc033662d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 44408, "upload_time": "2019-12-10T20:14:54", "upload_time_iso_8601": "2019-12-10T20:14:54.165793Z", "url": "https://files.pythonhosted.org/packages/a8/42/21760fb3260999a23ebebf28c5db7a511c70f0c7785cf4056321788f9022/baytune-0.3.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "388a047470c5e3e0fd4b696d1d89adac", "sha256": "9e0588fc36d703b6fa542b94ba7f4d5e49f524fac05c7dbd4f8b57cacba2c86e"}, "downloads": -1, "filename": "baytune-0.3.2.tar.gz", "has_sig": false, "md5_digest": "388a047470c5e3e0fd4b696d1d89adac", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 100977, "upload_time": "2019-12-10T20:14:56", "upload_time_iso_8601": "2019-12-10T20:14:56.466888Z", "url": "https://files.pythonhosted.org/packages/b5/53/b7c2e91cbe5125e2543dcf857b82cda2ebc2faed57566752654bceff01a5/baytune-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "d11afdae174925572d9defe22000bdb0", "sha256": "c8ca8dbc56750e1945c85c567141ccc1fba6d69b8610de43dff070136746de8c"}, "downloads": -1, "filename": "baytune-0.3.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d11afdae174925572d9defe22000bdb0", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 44526, "upload_time": "2019-12-11T16:25:27", "upload_time_iso_8601": "2019-12-11T16:25:27.519431Z", "url": "https://files.pythonhosted.org/packages/e9/ff/32704282de9039ad2d11ef434c5a587b2fae67c984e9d4045e3546f79c8a/baytune-0.3.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fe1ca568132a266a207dc363efad3114", "sha256": "6782b73b441f6defcec76e7f12cc4c03cd485314d69882064deb38f26757e2e8"}, "downloads": -1, "filename": "baytune-0.3.3.tar.gz", "has_sig": false, "md5_digest": "fe1ca568132a266a207dc363efad3114", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 103197, "upload_time": "2019-12-11T16:25:30", "upload_time_iso_8601": "2019-12-11T16:25:30.231222Z", "url": "https://files.pythonhosted.org/packages/ef/95/c19ca3eb9ed17626494c3f84f80a7745a926501c07219f01840211268051/baytune-0.3.3.tar.gz", "yanked": false}], "0.3.4": [{"comment_text": "", "digests": {"md5": "7a4a4ac8764e7c09048f0df5baba318a", "sha256": "18bfd3a93671baab93b8cd83f1aaff95b300ac1eabb88e9676cdf75c65ac623a"}, "downloads": -1, "filename": "baytune-0.3.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "7a4a4ac8764e7c09048f0df5baba318a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 51110, "upload_time": "2019-12-24T16:44:46", "upload_time_iso_8601": "2019-12-24T16:44:46.062230Z", "url": "https://files.pythonhosted.org/packages/36/a8/783bc4241595a64206176b323a8fa4bff354926e1f9853de99019cfaa1af/baytune-0.3.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c0dc92e3fd8c04268912ce9dc4771a07", "sha256": "f18f0eac71780dd6de6a13997e8c3eb308f9600df6cd55b878f08722e2d5ec95"}, "downloads": -1, "filename": "baytune-0.3.4.tar.gz", "has_sig": false, "md5_digest": "c0dc92e3fd8c04268912ce9dc4771a07", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 113235, "upload_time": "2019-12-24T16:44:48", "upload_time_iso_8601": "2019-12-24T16:44:48.101620Z", "url": "https://files.pythonhosted.org/packages/1f/5c/259fa21e9fd7d3b9c7f46ead5334d35b70b22fb04a03ca4ea4da4b70be57/baytune-0.3.4.tar.gz", "yanked": false}], "0.3.5": [{"comment_text": "", "digests": {"md5": "1e6b8a806890267de56b84a3d4557339", "sha256": "f23e04fbd95362cb760de20196bd5084f1f28b0f61b2f588fff66f836d70a528"}, "downloads": -1, "filename": "baytune-0.3.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1e6b8a806890267de56b84a3d4557339", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 51550, "upload_time": "2020-01-21T17:02:10", "upload_time_iso_8601": "2020-01-21T17:02:10.090268Z", "url": "https://files.pythonhosted.org/packages/06/21/f0bd2c04b3bb85f195c5f4872b064039bbe78f9352dfdbae473cd8a6f95e/baytune-0.3.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "be1d1c378dec4c04055e64357d345e38", "sha256": "85fd0e0a797f401b956a43048002c5b0a8163cff5e672438c35e4dc1dc6df47f"}, "downloads": -1, "filename": "baytune-0.3.5.tar.gz", "has_sig": false, "md5_digest": "be1d1c378dec4c04055e64357d345e38", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 112886, "upload_time": "2020-01-21T17:02:12", "upload_time_iso_8601": "2020-01-21T17:02:12.654148Z", "url": "https://files.pythonhosted.org/packages/c8/dc/2cbebf273421fe202629dcc279c4776f12b6faf8b4270da7251ee5d0cdf5/baytune-0.3.5.tar.gz", "yanked": false}], "0.3.6": [{"comment_text": "", "digests": {"md5": "4b85745603205d83bb8cac8a63a62589", "sha256": "066fd7c8ba7da50d1ab5a094c52b488b1e339d85e880e7327be2adcc1c95d3c3"}, "downloads": -1, "filename": "baytune-0.3.6-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4b85745603205d83bb8cac8a63a62589", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 51325, "upload_time": "2020-03-04T09:08:38", "upload_time_iso_8601": "2020-03-04T09:08:38.475576Z", "url": "https://files.pythonhosted.org/packages/0a/66/97e1ada5d94fc633e475946200eed8926d4a473c424fa7cff05de31ccfbf/baytune-0.3.6-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ee5c20933023e03c0edc335f9c60fc8d", "sha256": "9bb2fbbcc75f01c2a8f4f3424a119300de12b4eb9b48bfc6327ced2124208183"}, "downloads": -1, "filename": "baytune-0.3.6.tar.gz", "has_sig": false, "md5_digest": "ee5c20933023e03c0edc335f9c60fc8d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 116291, "upload_time": "2020-03-04T09:08:40", "upload_time_iso_8601": "2020-03-04T09:08:40.163137Z", "url": "https://files.pythonhosted.org/packages/5c/13/d0bf38dd8c33c0ef3ee65c82c538254a41b9192b743d0cd16ca5e9d86a2f/baytune-0.3.6.tar.gz", "yanked": false}], "0.3.6.dev0": [{"comment_text": "", "digests": {"md5": "081b61238178b8b1d3902e423e4c3bed", "sha256": "c267c0e7ee794f4e3136fa56e21b2c995e16d31adec7bd0089833e20bfcdf945"}, "downloads": -1, "filename": "baytune-0.3.6.dev0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "081b61238178b8b1d3902e423e4c3bed", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 51237, "upload_time": "2020-02-12T03:06:40", "upload_time_iso_8601": "2020-02-12T03:06:40.519213Z", "url": "https://files.pythonhosted.org/packages/79/1d/5803e13003f57ad83987d5632ad07a3c0928837652bd56ca886e29f23b8f/baytune-0.3.6.dev0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d205c4ce51203aa30b565f98512b4c41", "sha256": "22e9270c3a582452daab93e4d73a9d4c7b631a48ec3217829178e0674da0b807"}, "downloads": -1, "filename": "baytune-0.3.6.dev0.tar.gz", "has_sig": false, "md5_digest": "d205c4ce51203aa30b565f98512b4c41", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 115068, "upload_time": "2020-02-12T03:06:42", "upload_time_iso_8601": "2020-02-12T03:06:42.356035Z", "url": "https://files.pythonhosted.org/packages/9e/17/1a03c3b92ec549fe29c3b7fba0fc6e27799259fb09715401e180eb4680af/baytune-0.3.6.dev0.tar.gz", "yanked": false}], "0.3.6.dev1": [{"comment_text": "", "digests": {"md5": "6343c598db7b790160b9f04891f37b55", "sha256": "f09d88c0847db3ff803cc046d53723834b097b9d7df4a532e45cd7fa83430170"}, "downloads": -1, "filename": "baytune-0.3.6.dev1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6343c598db7b790160b9f04891f37b55", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 51632, "upload_time": "2020-02-25T20:27:31", "upload_time_iso_8601": "2020-02-25T20:27:31.164411Z", "url": "https://files.pythonhosted.org/packages/91/bd/23cd5d3bc5ea4266ea616a36946750626e5d1452d6f8b86219c237a0f70a/baytune-0.3.6.dev1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6c21a9507bbe2c557e38d9b3020bed4f", "sha256": "87c0fa1018326e68ed7156b09c948deeea896b5a107129ecb3e9d08edfcc3c26"}, "downloads": -1, "filename": "baytune-0.3.6.dev1.tar.gz", "has_sig": false, "md5_digest": "6c21a9507bbe2c557e38d9b3020bed4f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 116740, "upload_time": "2020-02-25T20:27:32", "upload_time_iso_8601": "2020-02-25T20:27:32.567912Z", "url": "https://files.pythonhosted.org/packages/bb/6b/0889ef1c6e4094b4c97b4cce77cca794fab5bcacf195637aca75aa4e9501/baytune-0.3.6.dev1.tar.gz", "yanked": false}], "0.3.7": [{"comment_text": "", "digests": {"md5": "c43def455a402ea90480ff1ac0cd0f9d", "sha256": "123fe047fa2da3d2566f1b805ef6a3b2a17ab8d508d1de186cedc21cfa3a4a36"}, "downloads": -1, "filename": "baytune-0.3.7-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c43def455a402ea90480ff1ac0cd0f9d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 41484, "upload_time": "2020-04-15T11:40:02", "upload_time_iso_8601": "2020-04-15T11:40:02.615647Z", "url": "https://files.pythonhosted.org/packages/08/fe/77b0ca04a645a71053c16caf222223d9ae437b66440acb2685d05ad50c48/baytune-0.3.7-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c24bb9418d6a2e26080425f5f05e0684", "sha256": "a477c549b7ef0eec9eb95798d70aacd91d102ad6209820c2c8762b324987fd8f"}, "downloads": -1, "filename": "baytune-0.3.7.tar.gz", "has_sig": false, "md5_digest": "c24bb9418d6a2e26080425f5f05e0684", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 111202, "upload_time": "2020-04-15T11:40:04", "upload_time_iso_8601": "2020-04-15T11:40:04.141454Z", "url": "https://files.pythonhosted.org/packages/81/17/fc3b594f8721f33d3149d24b65ae02ec83956c992edbb62ba4b44f638f43/baytune-0.3.7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c43def455a402ea90480ff1ac0cd0f9d", "sha256": "123fe047fa2da3d2566f1b805ef6a3b2a17ab8d508d1de186cedc21cfa3a4a36"}, "downloads": -1, "filename": "baytune-0.3.7-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c43def455a402ea90480ff1ac0cd0f9d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 41484, "upload_time": "2020-04-15T11:40:02", "upload_time_iso_8601": "2020-04-15T11:40:02.615647Z", "url": "https://files.pythonhosted.org/packages/08/fe/77b0ca04a645a71053c16caf222223d9ae437b66440acb2685d05ad50c48/baytune-0.3.7-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c24bb9418d6a2e26080425f5f05e0684", "sha256": "a477c549b7ef0eec9eb95798d70aacd91d102ad6209820c2c8762b324987fd8f"}, "downloads": -1, "filename": "baytune-0.3.7.tar.gz", "has_sig": false, "md5_digest": "c24bb9418d6a2e26080425f5f05e0684", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 111202, "upload_time": "2020-04-15T11:40:04", "upload_time_iso_8601": "2020-04-15T11:40:04.141454Z", "url": "https://files.pythonhosted.org/packages/81/17/fc3b594f8721f33d3149d24b65ae02ec83956c992edbb62ba4b44f638f43/baytune-0.3.7.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:14:40 2020"}