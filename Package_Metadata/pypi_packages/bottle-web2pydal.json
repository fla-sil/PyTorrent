{"info": {"author": "Martin Mulone", "author_email": "martin@tecnodoc.com.ar", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: GNU Library or Lesser General Public License (LGPL)", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Internet :: WWW/HTTP :: Dynamic Content", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Bottle-DAL is a plugin that integrates Web2py DAL Database Abstraction Layer\nwith your Bottle application. It automatically connects to a database at the\nbeginning of a request, passes the database handle to the route callback and\ncloses the connection afterwards.\n\nTo automatically detect routes that need a database connection, the plugin\nsearches for route callbacks that require a `db` keyword argument\n(configurable) and skips routes that do not. This removes any overhead for\nroutes that don't need a database connection.\n\nUsage Example::\n\nfrom bottle import route, view, run, debug, install\nfrom bottle_dal import DALPlugin, Field\n\ndef define_tables(db):\n    \"\"\"My tables definitions here\"\"\"\n    db.define_table('person',Field('name','string'))\n\ninstall(DALPlugin('sqlite://storage.sqlite',\n                  define_tables = lambda db: define_tables(db)))\n\n@route('/')\ndef index(db):\n    \"\"\" Index Example \"\"\"\n\n    if db(db.person.id>0).count()==0:\n        db.person.insert(name='James')\n        db.person.insert(name='Michael')\n        db.person.insert(name='Steve')\n        db.person.insert(name='Robert')\n        db.commit()\n\n    persons = db(db.person.id>0).select()\n\n    return dict(persons=persons.json())\n\nif __name__ == '__main__':\n    debug(True)\n    run(host='localhost', port=8080)", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://bottleweb2py.tecnodoc.com.ar", "keywords": null, "license": "LGPL v3.0", "maintainer": null, "maintainer_email": null, "name": "bottle-web2pydal", "package_url": "https://pypi.org/project/bottle-web2pydal/", "platform": "any", "project_url": "https://pypi.org/project/bottle-web2pydal/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://bottleweb2py.tecnodoc.com.ar"}, "release_url": "https://pypi.org/project/bottle-web2pydal/0.0.1/", "requires_dist": null, "requires_python": null, "summary": "Web2py Dal integration for Bottle.", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            Bottle-DAL is a plugin that integrates Web2py DAL Database Abstraction Layer<br>with your Bottle application. It automatically connects to a database at the<br>beginning of a request, passes the database handle to the route callback and<br>closes the connection afterwards.<br><br>To automatically detect routes that need a database connection, the plugin<br>searches for route callbacks that require a `db` keyword argument<br>(configurable) and skips routes that do not. This removes any overhead for<br>routes that don't need a database connection.<br><br>Usage Example::<br><br>from bottle import route, view, run, debug, install<br>from bottle_dal import DALPlugin, Field<br><br>def define_tables(db):<br>    \"\"\"My tables definitions here\"\"\"<br>    db.define_table('person',Field('name','string'))<br><br>install(DALPlugin('sqlite://storage.sqlite',<br>                  define_tables = lambda db: define_tables(db)))<br><br>@route('/')<br>def index(db):<br>    \"\"\" Index Example \"\"\"<br><br>    if db(db.person.id&gt;0).count()==0:<br>        db.person.insert(name='James')<br>        db.person.insert(name='Michael')<br>        db.person.insert(name='Steve')<br>        db.person.insert(name='Robert')<br>        db.commit()<br><br>    persons = db(db.person.id&gt;0).select()<br><br>    return dict(persons=persons.json())<br><br>if __name__ == '__main__':<br>    debug(True)<br>    run(host='localhost', port=8080)\n          </div>"}, "last_serial": 787010, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "9fea53e706814926a8bca223416d79ad", "sha256": "fd86bf3e805b993c840a5c9e807b993fe7d21af7c56af534574dfbfb1dc31ef2"}, "downloads": -1, "filename": "bottle-web2pydal-0.0.1.tar.gz", "has_sig": false, "md5_digest": "9fea53e706814926a8bca223416d79ad", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 124444, "upload_time": "2011-10-13T23:08:14", "upload_time_iso_8601": "2011-10-13T23:08:14.933414Z", "url": "https://files.pythonhosted.org/packages/1d/f5/112cb583a3d452fabbdb5a13a854143326f1a7d6e01ff9fda6bf6e819d9a/bottle-web2pydal-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9fea53e706814926a8bca223416d79ad", "sha256": "fd86bf3e805b993c840a5c9e807b993fe7d21af7c56af534574dfbfb1dc31ef2"}, "downloads": -1, "filename": "bottle-web2pydal-0.0.1.tar.gz", "has_sig": false, "md5_digest": "9fea53e706814926a8bca223416d79ad", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 124444, "upload_time": "2011-10-13T23:08:14", "upload_time_iso_8601": "2011-10-13T23:08:14.933414Z", "url": "https://files.pythonhosted.org/packages/1d/f5/112cb583a3d452fabbdb5a13a854143326f1a7d6e01ff9fda6bf6e819d9a/bottle-web2pydal-0.0.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:36:32 2020"}