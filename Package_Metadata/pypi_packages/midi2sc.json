{"info": {"author": "Daniel Nouri", "author_email": "daniel.nouri@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: MIT License", "Topic :: Multimedia :: Sound/Audio :: MIDI", "Topic :: Multimedia :: Sound/Audio :: Sound Synthesis"], "description": "=======\r\nmidi2sc\r\n=======\r\n\r\nInstallation\r\n============\r\n\r\nYou can install ``midi2sc`` with ``easy_install``::\r\n\r\n  $ easy_install midi2sc\r\n\r\nHowever, you also need to install pkaudio_ and its dependencies.\r\n\r\n.. _pkaudio: http://trac2.assembla.com/pkaudio\r\n\r\n\r\nUsage\r\n=====\r\n\r\n``midi2sc`` allows you to assign MIDI controllers to SuperCollider_\r\n``SynthDefs``.\r\n\r\n.. _SuperCollider: http://supercollider.sourceforge.net\r\n\r\nConfiguration\r\n-------------\r\n\r\nAn example configuration::\r\n\r\n  [SOSkick]\r\n  midi_channel = 01\r\n  001 = amp_mul=            AbsoluteControl(min=0.0, max=1.27, start_vel=100.0)\r\n  106 = mod_freq=           IDC(min=2.0, max=20.0, steps=50, value=2.0)\r\n  107 = mod_index=          IDC(min=2.0, max=20.0, steps=50, value=2.0)\r\n  108 = beater_noise_level= IDC(min=2.0, max=20.0, steps=50, value=18.0)\r\n  109 = decay=              IDC(min=0.05, max=1.0, steps=70, value=0.3)\r\n  noteon_args = out=18\r\n\r\nThis configuration will create and assign 7 controls: one of type\r\n``AbsoluteControl``, four of type ``IDC`` (IncDecControl).  The two\r\ncontrols implicitly created are a ``NoteOnControl`` and a\r\n``NoteOffControl``.\r\n\r\nThe ``001`` midi controller is usually the modulation wheel.  Here\r\nit's bound to the ``amp_mul`` parameter of an ``SOSkick`` SynthDef.\r\n``min`` is the value sent to the SuperCollider Synth when the wheel is\r\nat its lowest position, ``max`` the value at its highest position.\r\n\r\nThe ``106`` midi controller is bound to an endless encoder that sends\r\nrelative values between ``01 to 64`` for increment and ``127 to 065``\r\nfor decrement.  There's 50 ``steps`` between the ``min`` and ``max``\r\nvalue.  And the value at which we start is ``2.0``.  This corresponds\r\nto what the M-Audio Axiom User Guide calls ``2's Complement from 0 /\r\nRelative (2's Complement)``.\r\n\r\nThere's also dedicated controls for pitch bend and after touch.\r\n\r\nSuperCollider\r\n-------------\r\n\r\nThis is how a SynthDef could look like that uses the configuration\r\nfrom before::\r\n\r\n  SynthDef(\"SOSkick\", {\r\n    arg out = 0, freq = 50, mod_freq = 6.5, mod_index = 19.5,\r\n    decay = 0.1, amp = 0.8, beater_noise_level = 0.001, amp_mul = 1.0;\r\n    var x;\r\n\r\n    // do stuff...\r\n    Out.ar(out, x);\r\n  });\r\n\r\nMake sure you have your SuperCollider server up and SynthDefs loaded\r\nbefore you start ``midi2sc``.\r\n\r\nStarting midi2sc\r\n----------------\r\n\r\nOn the command-line, ``midi2sc`` is run like this::\r\n\r\n  $ midi2sc\r\n\r\nThis assumes that you have a ``midi2sc.ini`` configuration file in the\r\ncurrent working directory.  You can also provide this filename as an\r\noption on the command-line.  Refer to the built-in help for more\r\noptions::\r\n\r\n  $ midi2sc --help\r\n\r\n``midi2sc`` will ask you for a MIDI port to bind to, and then it'll\r\nstart a GUI that shows sliders for all controls and finally drop you\r\ninto an interactive shell with access to variables like dictionary of\r\ncontrol ``handlers`` and the ``save_presets`` and ``load_presets``\r\nfunctions.  To save presets (values from all controllers) from a file\r\non the Python shell and then load them again later, you write::\r\n\r\n  >>> save_presets('presets1.pickle', midi_in)\r\n  >>> # ... time passes\r\n  >>> load_presets('presets0.pickle', midi_in)\r\n\r\nYou can also load a new ``midi2sc.ini`` configuration::\r\n\r\n  >>> handlers.update(configure.read('midi2sc2.ini'))\r\n\r\nScreenshot\r\n----------\r\n\r\nThe top left window is the ``midi2sc`` Python shell.  Below is the\r\n``midi2sc`` GUI with a column of sliders for each synth.  On the right\r\nare QJackCtl_ connections and Seq24_:\r\n\r\n.. image:: http://danielnouri.org/media/midi2sc-01.png\r\n   :alt: Screenshot of midi2sc\r\n\r\n.. _QJackCtl: http://qjackctl.sourceforge.net/\r\n.. _Seq24: http://www.filter24.org/seq24/\r\n\r\nDevelopment Status\r\n==================\r\n\r\n``midi2sc`` is somewhat mature, and I use it.  At the same time it's a\r\nbig hack and probably not thread-safe.\r\n\r\nChange Log\r\n----------\r\n\r\n0.1 - 2009-06-30\r\n````````````````\r\n\r\n  - First release.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pypi.python.org/pypi/midi2sc", "keywords": "supercollider midi gui", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "midi2sc", "package_url": "https://pypi.org/project/midi2sc/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/midi2sc/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://pypi.python.org/pypi/midi2sc"}, "release_url": "https://pypi.org/project/midi2sc/0.1/", "requires_dist": null, "requires_python": null, "summary": "Control SuperCollider Synths with MIDI", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"installation\">\n<h2>Installation</h2>\n<p>You can install <tt>midi2sc</tt> with <tt>easy_install</tt>:</p>\n<pre>$ easy_install midi2sc\n</pre>\n<p>However, you also need to install <a href=\"http://trac2.assembla.com/pkaudio\" rel=\"nofollow\">pkaudio</a> and its dependencies.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p><tt>midi2sc</tt> allows you to assign MIDI controllers to <a href=\"http://supercollider.sourceforge.net\" rel=\"nofollow\">SuperCollider</a>\n<tt>SynthDefs</tt>.</p>\n<div id=\"configuration\">\n<h3>Configuration</h3>\n<p>An example configuration:</p>\n<pre>[SOSkick]\nmidi_channel = 01\n001 = amp_mul=            AbsoluteControl(min=0.0, max=1.27, start_vel=100.0)\n106 = mod_freq=           IDC(min=2.0, max=20.0, steps=50, value=2.0)\n107 = mod_index=          IDC(min=2.0, max=20.0, steps=50, value=2.0)\n108 = beater_noise_level= IDC(min=2.0, max=20.0, steps=50, value=18.0)\n109 = decay=              IDC(min=0.05, max=1.0, steps=70, value=0.3)\nnoteon_args = out=18\n</pre>\n<p>This configuration will create and assign 7 controls: one of type\n<tt>AbsoluteControl</tt>, four of type <tt>IDC</tt> (IncDecControl).  The two\ncontrols implicitly created are a <tt>NoteOnControl</tt> and a\n<tt>NoteOffControl</tt>.</p>\n<p>The <tt>001</tt> midi controller is usually the modulation wheel.  Here\nit\u2019s bound to the <tt>amp_mul</tt> parameter of an <tt>SOSkick</tt> SynthDef.\n<tt>min</tt> is the value sent to the SuperCollider Synth when the wheel is\nat its lowest position, <tt>max</tt> the value at its highest position.</p>\n<p>The <tt>106</tt> midi controller is bound to an endless encoder that sends\nrelative values between <tt>01 to 64</tt> for increment and <tt>127 to 065</tt>\nfor decrement.  There\u2019s 50 <tt>steps</tt> between the <tt>min</tt> and <tt>max</tt>\nvalue.  And the value at which we start is <tt>2.0</tt>.  This corresponds\nto what the M-Audio Axiom User Guide calls <tt>2's Complement from 0 /\nRelative (2's Complement)</tt>.</p>\n<p>There\u2019s also dedicated controls for pitch bend and after touch.</p>\n</div>\n<div id=\"id1\">\n<h3>SuperCollider</h3>\n<p>This is how a SynthDef could look like that uses the configuration\nfrom before:</p>\n<pre>SynthDef(\"SOSkick\", {\n  arg out = 0, freq = 50, mod_freq = 6.5, mod_index = 19.5,\n  decay = 0.1, amp = 0.8, beater_noise_level = 0.001, amp_mul = 1.0;\n  var x;\n\n  // do stuff...\n  Out.ar(out, x);\n});\n</pre>\n<p>Make sure you have your SuperCollider server up and SynthDefs loaded\nbefore you start <tt>midi2sc</tt>.</p>\n</div>\n<div id=\"starting-midi2sc\">\n<h3>Starting midi2sc</h3>\n<p>On the command-line, <tt>midi2sc</tt> is run like this:</p>\n<pre>$ midi2sc\n</pre>\n<p>This assumes that you have a <tt>midi2sc.ini</tt> configuration file in the\ncurrent working directory.  You can also provide this filename as an\noption on the command-line.  Refer to the built-in help for more\noptions:</p>\n<pre>$ midi2sc --help\n</pre>\n<p><tt>midi2sc</tt> will ask you for a MIDI port to bind to, and then it\u2019ll\nstart a GUI that shows sliders for all controls and finally drop you\ninto an interactive shell with access to variables like dictionary of\ncontrol <tt>handlers</tt> and the <tt>save_presets</tt> and <tt>load_presets</tt>\nfunctions.  To save presets (values from all controllers) from a file\non the Python shell and then load them again later, you write:</p>\n<pre>&gt;&gt;&gt; save_presets('presets1.pickle', midi_in)\n&gt;&gt;&gt; # ... time passes\n&gt;&gt;&gt; load_presets('presets0.pickle', midi_in)\n</pre>\n<p>You can also load a new <tt>midi2sc.ini</tt> configuration:</p>\n<pre>&gt;&gt;&gt; handlers.update(configure.read('midi2sc2.ini'))\n</pre>\n</div>\n<div id=\"screenshot\">\n<h3>Screenshot</h3>\n<p>The top left window is the <tt>midi2sc</tt> Python shell.  Below is the\n<tt>midi2sc</tt> GUI with a column of sliders for each synth.  On the right\nare <a href=\"http://qjackctl.sourceforge.net/\" rel=\"nofollow\">QJackCtl</a> connections and <a href=\"http://www.filter24.org/seq24/\" rel=\"nofollow\">Seq24</a>:</p>\n<img alt=\"Screenshot of midi2sc\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f3bb7282810ae41a5f2319ba174d996bf7b0a710/687474703a2f2f64616e69656c6e6f7572692e6f72672f6d656469612f6d6964693273632d30312e706e67\">\n</div>\n</div>\n<div id=\"development-status\">\n<h2>Development Status</h2>\n<p><tt>midi2sc</tt> is somewhat mature, and I use it.  At the same time it\u2019s a\nbig hack and probably not thread-safe.</p>\n<div id=\"change-log\">\n<h3>Change Log</h3>\n<h3 id=\"id2\"><span class=\"section-subtitle\">0.1 - 2009-06-30</span></h3>\n<blockquote>\n<ul>\n<li>First release.</li>\n</ul>\n</blockquote>\n</div>\n</div>\n\n          </div>"}, "last_serial": 794777, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "90e941f9d4a9a93ac4954be29da2f962", "sha256": "cce902ac23b1d75253e863097fea3962491fe7bad09033b16c3e0467c057f196"}, "downloads": -1, "filename": "midi2sc-0.1.tar.gz", "has_sig": false, "md5_digest": "90e941f9d4a9a93ac4954be29da2f962", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12197, "upload_time": "2009-06-21T00:20:25", "upload_time_iso_8601": "2009-06-21T00:20:25.188397Z", "url": "https://files.pythonhosted.org/packages/c2/14/e425a42df1d2ab94d84ce7a6b57d5b43531086b9fe30e49d48514e545508/midi2sc-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "90e941f9d4a9a93ac4954be29da2f962", "sha256": "cce902ac23b1d75253e863097fea3962491fe7bad09033b16c3e0467c057f196"}, "downloads": -1, "filename": "midi2sc-0.1.tar.gz", "has_sig": false, "md5_digest": "90e941f9d4a9a93ac4954be29da2f962", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12197, "upload_time": "2009-06-21T00:20:25", "upload_time_iso_8601": "2009-06-21T00:20:25.188397Z", "url": "https://files.pythonhosted.org/packages/c2/14/e425a42df1d2ab94d84ce7a6b57d5b43531086b9fe30e49d48514e545508/midi2sc-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:51 2020"}