{"info": {"author": "Elisha Fitch-Cook", "author_email": "elisha@cooper.com", "bugtrack_url": null, "classifiers": ["Development Status :: 1 - Planning", "Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Programming Language :: Python", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Topic :: Internet :: WWW/HTTP :: WSGI", "Topic :: Software Development :: Libraries :: Application Frameworks"], "description": "Hammock\n=======\n\n|Build Status| |Coverage Status|\n\nHammock is a framework for building ReST APIs mostly declaratively. It includes data modeling, data storage, authentication, authorization, serialization and interface protocols. It aims to dramatically reduce the effort involved in creating CRUD APIs, including integrating the bits that are specific to your application.\n\nHighlights\n~~~~~~~~~~\n\nData modeling\n+++++++++++++\n\n\n\nProject Status\n~~~~~~~~~~~~~~\n\nHammock is in the planning and pre-alpha stages. There are high expectations of open source projects these days and that's a good thing. However, good software does not spring, fully formed from the forehead of a sleep deprived genius. Rather, it is (or should be, in this person's humble opinion) the result of continuous design and testing. The whole messy business, starting from day one, is on display here as an invitation to get your hands dirty.\n\nTrack progress here: https://www.pivotaltracker.com/n/projects/1158082\n\nPlanned Feature Overview\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nWe want to create a powerful library for developing ReST APIs that supports a lot of use cases. Here is what we think that needs to look like.\n\nDeclarative API\n+++++++++++++++\n\nMost everything is defined declaratively. That includes the data model, endpoints, filters, sorting and authorization.\n\nEasily extensible\n+++++++++++++++++\n\nData storage, authentication, authorization, serializaton and exchange format are strictly decoupled. Extending functionality in one of these areas requires implementing a small, targeted API.\n\nSelf-documenting\n++++++++++++++++\n\nBy using one of the hypermedia exchange formats and/or a generated spec.\n\nBatteries included\n++++++++++++++++++\n\nComes with quite a few options:\n\n* **Data storage:** MongoDB and SQLAlchemy\n* **Authentication:** Basic, HMAC and Token\n* **Serialization:** JSON, MessagePack, XML\n* **Exchange formats:** A custom, minimalist format as well as the Siren and HAL hypermedia formats.\n* **HTTP Caching:** ETags and If-Modified-Since\n\n\nAcknowledgements\n~~~~~~~~~~~~~~~~\nThis project makes heavy use of `falcon <http://falconframework.org/>`_. Massive credit to that team. As well, `Eve <http://python-eve.org/>`_ was a big inspiration, philosophically and to a lesser extent `flask-mongorest <https://github.com/elasticsales/flask-mongorest>`_.\n\n.. |Build Status| image:: https://travis-ci.org/cooper-software/hammock.svg\n   :target: https://travis-ci.org/cooper-software/hammock\n\n.. |Coverage Status| image:: https://img.shields.io/coveralls/cooper-software/hammock.svg\n   :target: https://coveralls.io/r/cooper-software/hammock", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/cooper-software/hammock", "keywords": "wsgi web api framework rest http cloud", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "hammock-builder", "package_url": "https://pypi.org/project/hammock-builder/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/hammock-builder/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/cooper-software/hammock"}, "release_url": "https://pypi.org/project/hammock-builder/0.1.0/", "requires_dist": null, "requires_python": null, "summary": "Create ReST APIs how you've always wanted.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/cooper-software/hammock\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/902ce06d311e5d45ba7392421c39266c1380a033/68747470733a2f2f7472617669732d63692e6f72672f636f6f7065722d736f6674776172652f68616d6d6f636b2e737667\"></a> <a href=\"https://coveralls.io/r/cooper-software/hammock\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d4864acbfba38330a283d19fc24e24a55e4126f8/68747470733a2f2f696d672e736869656c64732e696f2f636f766572616c6c732f636f6f7065722d736f6674776172652f68616d6d6f636b2e737667\"></a></p>\n<p>Hammock is a framework for building ReST APIs mostly declaratively. It includes data modeling, data storage, authentication, authorization, serialization and interface protocols. It aims to dramatically reduce the effort involved in creating CRUD APIs, including integrating the bits that are specific to your application.</p>\n<div id=\"highlights\">\n<h2>Highlights</h2>\n<h2 id=\"data-modeling\"><span class=\"section-subtitle\">Data modeling</span></h2>\n</div>\n<div id=\"project-status\">\n<h2>Project Status</h2>\n<p>Hammock is in the planning and pre-alpha stages. There are high expectations of open source projects these days and that\u2019s a good thing. However, good software does not spring, fully formed from the forehead of a sleep deprived genius. Rather, it is (or should be, in this person\u2019s humble opinion) the result of continuous design and testing. The whole messy business, starting from day one, is on display here as an invitation to get your hands dirty.</p>\n<p>Track progress here: <a href=\"https://www.pivotaltracker.com/n/projects/1158082\" rel=\"nofollow\">https://www.pivotaltracker.com/n/projects/1158082</a></p>\n</div>\n<div id=\"planned-feature-overview\">\n<h2>Planned Feature Overview</h2>\n<p>We want to create a powerful library for developing ReST APIs that supports a lot of use cases. Here is what we think that needs to look like.</p>\n<div id=\"declarative-api\">\n<h3>Declarative API</h3>\n<p>Most everything is defined declaratively. That includes the data model, endpoints, filters, sorting and authorization.</p>\n</div>\n<div id=\"easily-extensible\">\n<h3>Easily extensible</h3>\n<p>Data storage, authentication, authorization, serializaton and exchange format are strictly decoupled. Extending functionality in one of these areas requires implementing a small, targeted API.</p>\n</div>\n<div id=\"self-documenting\">\n<h3>Self-documenting</h3>\n<p>By using one of the hypermedia exchange formats and/or a generated spec.</p>\n</div>\n<div id=\"batteries-included\">\n<h3>Batteries included</h3>\n<p>Comes with quite a few options:</p>\n<ul>\n<li><strong>Data storage:</strong> MongoDB and SQLAlchemy</li>\n<li><strong>Authentication:</strong> Basic, HMAC and Token</li>\n<li><strong>Serialization:</strong> JSON, MessagePack, XML</li>\n<li><strong>Exchange formats:</strong> A custom, minimalist format as well as the Siren and HAL hypermedia formats.</li>\n<li><strong>HTTP Caching:</strong> ETags and If-Modified-Since</li>\n</ul>\n</div>\n</div>\n<div id=\"acknowledgements\">\n<h2>Acknowledgements</h2>\n<p>This project makes heavy use of <a href=\"http://falconframework.org/\" rel=\"nofollow\">falcon</a>. Massive credit to that team. As well, <a href=\"http://python-eve.org/\" rel=\"nofollow\">Eve</a> was a big inspiration, philosophically and to a lesser extent <a href=\"https://github.com/elasticsales/flask-mongorest\" rel=\"nofollow\">flask-mongorest</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 1233578, "releases": {"0.1.0": []}, "urls": [], "timestamp": "Fri May  8 00:52:39 2020"}