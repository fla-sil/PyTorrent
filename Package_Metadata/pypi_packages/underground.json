{"info": {"author": "Nolan Conaway", "author_email": "nolanbconaway@gmail.com", "bugtrack_url": null, "classifiers": ["Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "# Python MTA Utilities\n\n[![badge](https://github.com/nolanbconaway/underground/workflows/Push/badge.svg)](https://github.com/nolanbconaway/underground/actions)\n[![codecov](https://codecov.io/gh/nolanbconaway/underground/branch/master/graph/badge.svg)](https://codecov.io/gh/nolanbconaway/underground)\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/underground)](https://pypi.org/project/underground/)\n[![PyPI](https://img.shields.io/pypi/v/underground)](https://pypi.org/project/underground/)\n\nThis is a set of Python utilities that I use to deal with [real-time NYC subway data](https://datamine.mta.info/).\n\nI usually want to know when trains are going to depart a specific stop along a specific train line, so right now the tools are mostly for that. But I tried to write them to support arbitrary functionality.\n\n## Install\n\n``` sh\npip install underground\n```\n\nOr if you'd like to live dangerously:\n\n``` sh\npip install git+https://github.com/nolanbconaway/underground.git#egg=underground\n```\n\nTo request data from the MTA, you'll also need a free API key.\n[Register here](https://api.mta.info/).\n\n### Version 0.2.7.4 vs 0.3.0\n\nOn May 1 2020, the MTA is sunsetting the [datamine.mta.info](http://datamine.mta.info/) service. The new API ([api.mta.info](https://api.mta.info/)) provides identical data but with a new request API. \n\nUsers of 0.2.x will need to migrate by doing the following:\n\n1. **Get a new API key at [api.mta.info](https://api.mta.info/).** This key is longer than the one provided by the datamine API. Underground understands this key in the same way as the old one.\n2. **Replace all feed IDs with route IDs or URLs.** The feed IDs have changed for the new API, and not all feeds have IDs any more. Version 0.3 of Underground was built with a `route_or_url` concept for feed selection. Users may provide the URL for the feed they want (see [this page](https://api.mta.info/#/subwayRealTimeFeeds)), or they may provide a route ID (in which case the appropriate URL is then selected).\n\nCode from v0.2.x such as this:\n\n```python\nfeed = SubwayFeed.get(metadata.get_feed_id('Q'))\n```\n\nNow becomes in v0.3:\n\n```python\n# under the hood, the correct URL is selected.\nfeed = SubwayFeed.get('Q')\n\n# or \nurl = 'https://api-endpoint.mta.info/Dataservice/mtagtfsfeeds/nyct%2Fgtfs-nqrw'\nfeed = SubwayFeed.get(url)\n```\n\n## Python API\n\nOnce you have your API key, use the Python API like:\n\n``` python\nimport os\n\nfrom underground import metadata, SubwayFeed\n\nAPI_KEY = os.getenv('MTA_API_KEY')\nROUTE = 'Q'\nfeed = SubwayFeed.get(ROUTE, api_key=API_KEY)\n\n# request will read from $MTA_API_KEY if a key is not provided\nfeed = SubwayFeed.get(ROUTE)\n\n# under the hood, the Q route is mapped to a URL. This call is equivalent:\nURL = 'https://api-endpoint.mta.info/Dataservice/mtagtfsfeeds/nyct%2Fgtfs-nqrw'\nfeed = SubwayFeed.get(URL)\n\n# or\nURL = metadata.resolve_url(ROUTE)\nfeed = SubwayFeed.get(URL)\n```\n\n### List train stops on each line\n\n`feed.extract_stop_dict` will return a dictionary of dictionaries, like:\n\n```python\n>>> feed.extract_stop_dict()\n\n{\n\n  \"route_1\": {\n    \"stop_1\": [datetime.datetime(...), datetime.datetime(...)], \n    \"stop_2\": [datetime.datetime(...), datetime.datetime(...)], \n    ...\n  }, \n  \"route_2\": {\n    \"stop_1\": [datetime.datetime(...), datetime.datetime(...)], \n    \"stop_2\": [datetime.datetime(...), datetime.datetime(...)], \n    ...\n  }\n\n}\n```\n\n## CLI\n\nThe `underground` command line tool is also installed with the package.\n\n```\n$ underground --help\nUsage: underground [OPTIONS] COMMAND [ARGS]...\n\n  Command line handlers for MTA realtime data.\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  feed       Request an MTA feed.\n  findstops  Find your stop ID.\n  stops      Print out train departure times for all stops on a subway line.\n  version    Print the underground version.\n```\n\n### `feed` \n```\n$ underground feed --help\nUsage: underground feed [OPTIONS] ROUTE_OR_URL\n\n  Request an MTA feed via a route or URL.\n\n  ROUTE_OR_URL may be either a feed URL or a route (which will be used to\n  look up the feed url).\n\n  Examples (both access the same feed):\n\n      underground feed Q --json > feed_nrqw.json\n\n      URL='https://api-endpoint.mta.info/Dataservice/mtagtfsfeeds/nyct%2Fgtfs-nqrw' &&\n      underground feed $URL --json > feed_nrqw.json\n\nOptions:\n  --api-key TEXT         MTA API key. Will be read from $MTA_API_KEY if not\n                         provided.\n\n  --json                 Option to output the feed data as JSON. Otherwise\n                         output will be bytes.\n\n  -r, --retries INTEGER  Retry attempts in case of API connection failure.\n                         Default 100.\n\n  --help                 Show this message and exit.\n```\n\n### `stops` \n\n```\n$ underground stops --help\nUsage: underground stops [OPTIONS] [H|M|D|1|Z|A|N|GS|SI|J|G|Q|L|B|R|F|E|2|7|W|\n                          6|4|C|5|FS]\n\n  Print out train departure times for all stops on a subway line.\n\nOptions:\n\n  -f, --format TEXT      strftime format for stop times. Use `epoch` for a\n                          unix timestamp.\n  -r, --retries INTEGER  Retry attempts in case of API connection failure.\n                          Default 100.\n  --api-key TEXT         MTA API key. Will be read from $MTA_API_KEY if not\n                          provided.\n  -t, --timezone TEXT    Output timezone. Ignored if --epoch. Default to NYC\n                          time.\n  --help                 Show this message and exit.\n```\n\nStops are printed to stdout in the format `stop_id t1 t2 ... tn` .\n\n``` sh\n$ export MTA_API_KEY='...'\n$ underground stops Q | tail -2\nQ05S 19:01 19:09 19:16 19:25 19:34 19:44 19:51 19:58\nQ04S 19:03 19:11 19:18 19:27 19:36 19:46 19:53 20:00\n```\n\nIf you know your stop id (stop IDs can be found in [stops.txt](http://web.mta.info/developers/data/nyct/subway/google_transit.zip)), you can grep the results:\n\n``` sh\n$ underground stops Q | grep Q05S\nQ05S 19:09 19:16 19:25 19:34 19:44 19:51 19:58\n```\n\nIf you don't know your stop, see below for a handy tool!\n\n### `findstops` \n\n```\n$ underground findstops --help\nUsage: underground findstops [OPTIONS] QUERY...\n\n  Find your stop ID.\n\n  Query a location and look for your stop ID, like:\n\n  $ underground findstops parkside av\n\nOptions:\n\n  --json  Option to output the data as JSON. Otherwise will be human readable\n          table.\n\n  --help  Show this message and exit.\n```\n\nEnter the name of your stop and a table of stops with matching names will be returned.\n\n```\n$ underground findstops parkside\nID: D27N    Direction: NORTH    Lat/Lon: 40.655292, -73.961495    Name: PARKSIDE AV\nID: D27S    Direction: SOUTH    Lat/Lon: 40.655292, -73.961495    Name: PARKSIDE AV\n```\n\nSome names are ambiguous (try \"fulton st\"), for these you'll have to dig into the [metadata](http://web.mta.info/developers/data/nyct/subway/google_transit.zip) more carefully.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/nolanbconaway/underground", "keywords": "nyc,transit,subway,command-line,cli", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "underground", "package_url": "https://pypi.org/project/underground/", "platform": "", "project_url": "https://pypi.org/project/underground/", "project_urls": {"Homepage": "https://github.com/nolanbconaway/underground"}, "release_url": "https://pypi.org/project/underground/0.3.0/", "requires_dist": ["requests (>=2.22)", "google (>=2.0)", "gtfs-realtime-bindings (>=0.0.6)", "protobuf3-to-dict (>=0.1.5)", "click (>=7.0)", "pydantic (>=0.31.1)", "pytz (>=2019.2)", "pytest (>=5.0) ; extra == 'dev'", "tox (>=3.13) ; extra == 'dev'", "black (>=19.10b0) ; extra == 'dev'", "pytest-cov (>=2.8) ; extra == 'dev'", "codecov (>=2.0) ; extra == 'dev'", "requests-mock (>=1.7.0) ; extra == 'dev'"], "requires_python": "", "summary": "Utilities for NYC's realtime MTA data feeds.", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Python MTA Utilities</h1>\n<p><a href=\"https://github.com/nolanbconaway/underground/actions\" rel=\"nofollow\"><img alt=\"badge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/64041d57cdb07ecfa75e9e4c77524904d1c13957/68747470733a2f2f6769746875622e636f6d2f6e6f6c616e62636f6e617761792f756e64657267726f756e642f776f726b666c6f77732f507573682f62616467652e737667\"></a>\n<a href=\"https://codecov.io/gh/nolanbconaway/underground\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b91fc377ee9e5e3d7bd2f88948732a1b8989c631/68747470733a2f2f636f6465636f762e696f2f67682f6e6f6c616e62636f6e617761792f756e64657267726f756e642f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://pypi.org/project/underground/\" rel=\"nofollow\"><img alt=\"PyPI - Python Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c4d8e14a6d8b280c8c455769ffca4782a23d7ae9/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f756e64657267726f756e64\"></a>\n<a href=\"https://pypi.org/project/underground/\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/dde4f3ebc855106feb9e95d8040aa1747c629eb7/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f756e64657267726f756e64\"></a></p>\n<p>This is a set of Python utilities that I use to deal with <a href=\"https://datamine.mta.info/\" rel=\"nofollow\">real-time NYC subway data</a>.</p>\n<p>I usually want to know when trains are going to depart a specific stop along a specific train line, so right now the tools are mostly for that. But I tried to write them to support arbitrary functionality.</p>\n<h2>Install</h2>\n<pre>pip install underground\n</pre>\n<p>Or if you'd like to live dangerously:</p>\n<pre>pip install git+https://github.com/nolanbconaway/underground.git#egg<span class=\"o\">=</span>underground\n</pre>\n<p>To request data from the MTA, you'll also need a free API key.\n<a href=\"https://api.mta.info/\" rel=\"nofollow\">Register here</a>.</p>\n<h3>Version 0.2.7.4 vs 0.3.0</h3>\n<p>On May 1 2020, the MTA is sunsetting the <a href=\"http://datamine.mta.info/\" rel=\"nofollow\">datamine.mta.info</a> service. The new API (<a href=\"https://api.mta.info/\" rel=\"nofollow\">api.mta.info</a>) provides identical data but with a new request API.</p>\n<p>Users of 0.2.x will need to migrate by doing the following:</p>\n<ol>\n<li><strong>Get a new API key at <a href=\"https://api.mta.info/\" rel=\"nofollow\">api.mta.info</a>.</strong> This key is longer than the one provided by the datamine API. Underground understands this key in the same way as the old one.</li>\n<li><strong>Replace all feed IDs with route IDs or URLs.</strong> The feed IDs have changed for the new API, and not all feeds have IDs any more. Version 0.3 of Underground was built with a <code>route_or_url</code> concept for feed selection. Users may provide the URL for the feed they want (see <a href=\"https://api.mta.info/#/subwayRealTimeFeeds\" rel=\"nofollow\">this page</a>), or they may provide a route ID (in which case the appropriate URL is then selected).</li>\n</ol>\n<p>Code from v0.2.x such as this:</p>\n<pre><span class=\"n\">feed</span> <span class=\"o\">=</span> <span class=\"n\">SubwayFeed</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">metadata</span><span class=\"o\">.</span><span class=\"n\">get_feed_id</span><span class=\"p\">(</span><span class=\"s1\">'Q'</span><span class=\"p\">))</span>\n</pre>\n<p>Now becomes in v0.3:</p>\n<pre><span class=\"c1\"># under the hood, the correct URL is selected.</span>\n<span class=\"n\">feed</span> <span class=\"o\">=</span> <span class=\"n\">SubwayFeed</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'Q'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># or </span>\n<span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s1\">'https://api-endpoint.mta.info/Dataservice/mtagtfsfeeds/nyct</span><span class=\"si\">%2F</span><span class=\"s1\">gtfs-nqrw'</span>\n<span class=\"n\">feed</span> <span class=\"o\">=</span> <span class=\"n\">SubwayFeed</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span>\n</pre>\n<h2>Python API</h2>\n<p>Once you have your API key, use the Python API like:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">underground</span> <span class=\"kn\">import</span> <span class=\"n\">metadata</span><span class=\"p\">,</span> <span class=\"n\">SubwayFeed</span>\n\n<span class=\"n\">API_KEY</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getenv</span><span class=\"p\">(</span><span class=\"s1\">'MTA_API_KEY'</span><span class=\"p\">)</span>\n<span class=\"n\">ROUTE</span> <span class=\"o\">=</span> <span class=\"s1\">'Q'</span>\n<span class=\"n\">feed</span> <span class=\"o\">=</span> <span class=\"n\">SubwayFeed</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">ROUTE</span><span class=\"p\">,</span> <span class=\"n\">api_key</span><span class=\"o\">=</span><span class=\"n\">API_KEY</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># request will read from $MTA_API_KEY if a key is not provided</span>\n<span class=\"n\">feed</span> <span class=\"o\">=</span> <span class=\"n\">SubwayFeed</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">ROUTE</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># under the hood, the Q route is mapped to a URL. This call is equivalent:</span>\n<span class=\"n\">URL</span> <span class=\"o\">=</span> <span class=\"s1\">'https://api-endpoint.mta.info/Dataservice/mtagtfsfeeds/nyct</span><span class=\"si\">%2F</span><span class=\"s1\">gtfs-nqrw'</span>\n<span class=\"n\">feed</span> <span class=\"o\">=</span> <span class=\"n\">SubwayFeed</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">URL</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># or</span>\n<span class=\"n\">URL</span> <span class=\"o\">=</span> <span class=\"n\">metadata</span><span class=\"o\">.</span><span class=\"n\">resolve_url</span><span class=\"p\">(</span><span class=\"n\">ROUTE</span><span class=\"p\">)</span>\n<span class=\"n\">feed</span> <span class=\"o\">=</span> <span class=\"n\">SubwayFeed</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">URL</span><span class=\"p\">)</span>\n</pre>\n<h3>List train stops on each line</h3>\n<p><code>feed.extract_stop_dict</code> will return a dictionary of dictionaries, like:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">feed</span><span class=\"o\">.</span><span class=\"n\">extract_stop_dict</span><span class=\"p\">()</span>\n\n<span class=\"p\">{</span>\n\n  <span class=\"s2\">\"route_1\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"stop_1\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">),</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)],</span> \n    <span class=\"s2\">\"stop_2\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">),</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)],</span> \n    <span class=\"o\">...</span>\n  <span class=\"p\">},</span> \n  <span class=\"s2\">\"route_2\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"stop_1\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">),</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)],</span> \n    <span class=\"s2\">\"stop_2\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">),</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)],</span> \n    <span class=\"o\">...</span>\n  <span class=\"p\">}</span>\n\n<span class=\"p\">}</span>\n</pre>\n<h2>CLI</h2>\n<p>The <code>underground</code> command line tool is also installed with the package.</p>\n<pre><code>$ underground --help\nUsage: underground [OPTIONS] COMMAND [ARGS]...\n\n  Command line handlers for MTA realtime data.\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  feed       Request an MTA feed.\n  findstops  Find your stop ID.\n  stops      Print out train departure times for all stops on a subway line.\n  version    Print the underground version.\n</code></pre>\n<h3><code>feed</code></h3>\n<pre><code>$ underground feed --help\nUsage: underground feed [OPTIONS] ROUTE_OR_URL\n\n  Request an MTA feed via a route or URL.\n\n  ROUTE_OR_URL may be either a feed URL or a route (which will be used to\n  look up the feed url).\n\n  Examples (both access the same feed):\n\n      underground feed Q --json &gt; feed_nrqw.json\n\n      URL='https://api-endpoint.mta.info/Dataservice/mtagtfsfeeds/nyct%2Fgtfs-nqrw' &amp;&amp;\n      underground feed $URL --json &gt; feed_nrqw.json\n\nOptions:\n  --api-key TEXT         MTA API key. Will be read from $MTA_API_KEY if not\n                         provided.\n\n  --json                 Option to output the feed data as JSON. Otherwise\n                         output will be bytes.\n\n  -r, --retries INTEGER  Retry attempts in case of API connection failure.\n                         Default 100.\n\n  --help                 Show this message and exit.\n</code></pre>\n<h3><code>stops</code></h3>\n<pre><code>$ underground stops --help\nUsage: underground stops [OPTIONS] [H|M|D|1|Z|A|N|GS|SI|J|G|Q|L|B|R|F|E|2|7|W|\n                          6|4|C|5|FS]\n\n  Print out train departure times for all stops on a subway line.\n\nOptions:\n\n  -f, --format TEXT      strftime format for stop times. Use `epoch` for a\n                          unix timestamp.\n  -r, --retries INTEGER  Retry attempts in case of API connection failure.\n                          Default 100.\n  --api-key TEXT         MTA API key. Will be read from $MTA_API_KEY if not\n                          provided.\n  -t, --timezone TEXT    Output timezone. Ignored if --epoch. Default to NYC\n                          time.\n  --help                 Show this message and exit.\n</code></pre>\n<p>Stops are printed to stdout in the format <code>stop_id t1 t2 ... tn</code> .</p>\n<pre>$ <span class=\"nb\">export</span> <span class=\"nv\">MTA_API_KEY</span><span class=\"o\">=</span><span class=\"s1\">'...'</span>\n$ underground stops Q <span class=\"p\">|</span> tail -2\nQ05S <span class=\"m\">19</span>:01 <span class=\"m\">19</span>:09 <span class=\"m\">19</span>:16 <span class=\"m\">19</span>:25 <span class=\"m\">19</span>:34 <span class=\"m\">19</span>:44 <span class=\"m\">19</span>:51 <span class=\"m\">19</span>:58\nQ04S <span class=\"m\">19</span>:03 <span class=\"m\">19</span>:11 <span class=\"m\">19</span>:18 <span class=\"m\">19</span>:27 <span class=\"m\">19</span>:36 <span class=\"m\">19</span>:46 <span class=\"m\">19</span>:53 <span class=\"m\">20</span>:00\n</pre>\n<p>If you know your stop id (stop IDs can be found in <a href=\"http://web.mta.info/developers/data/nyct/subway/google_transit.zip\" rel=\"nofollow\">stops.txt</a>), you can grep the results:</p>\n<pre>$ underground stops Q <span class=\"p\">|</span> grep Q05S\nQ05S <span class=\"m\">19</span>:09 <span class=\"m\">19</span>:16 <span class=\"m\">19</span>:25 <span class=\"m\">19</span>:34 <span class=\"m\">19</span>:44 <span class=\"m\">19</span>:51 <span class=\"m\">19</span>:58\n</pre>\n<p>If you don't know your stop, see below for a handy tool!</p>\n<h3><code>findstops</code></h3>\n<pre><code>$ underground findstops --help\nUsage: underground findstops [OPTIONS] QUERY...\n\n  Find your stop ID.\n\n  Query a location and look for your stop ID, like:\n\n  $ underground findstops parkside av\n\nOptions:\n\n  --json  Option to output the data as JSON. Otherwise will be human readable\n          table.\n\n  --help  Show this message and exit.\n</code></pre>\n<p>Enter the name of your stop and a table of stops with matching names will be returned.</p>\n<pre><code>$ underground findstops parkside\nID: D27N    Direction: NORTH    Lat/Lon: 40.655292, -73.961495    Name: PARKSIDE AV\nID: D27S    Direction: SOUTH    Lat/Lon: 40.655292, -73.961495    Name: PARKSIDE AV\n</code></pre>\n<p>Some names are ambiguous (try \"fulton st\"), for these you'll have to dig into the <a href=\"http://web.mta.info/developers/data/nyct/subway/google_transit.zip\" rel=\"nofollow\">metadata</a> more carefully.</p>\n\n          </div>"}, "last_serial": 6958477, "releases": {"0.2.7": [{"comment_text": "", "digests": {"md5": "c4cf4ad0d57977c410afa8dad519d61b", "sha256": "f564980236c1a2b495dbb80426638b08ad7a2583a632593e23b65c771b21e500"}, "downloads": -1, "filename": "underground-0.2.7-py3-none-any.whl", "has_sig": false, "md5_digest": "c4cf4ad0d57977c410afa8dad519d61b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 10623, "upload_time": "2019-10-05T17:42:04", "upload_time_iso_8601": "2019-10-05T17:42:04.679799Z", "url": "https://files.pythonhosted.org/packages/69/60/dcd75ca299f4373d355c1dbee4fe24ea1d73270abc19c3ade9a1afec695f/underground-0.2.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "45fb09c2dd065c1e922cdc7504b26df5", "sha256": "d2f4fae66b33f6d37263684961afc6f50006f2fb2340219e82bf2531cec7a5b7"}, "downloads": -1, "filename": "underground-0.2.7.tar.gz", "has_sig": false, "md5_digest": "45fb09c2dd065c1e922cdc7504b26df5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 7606, "upload_time": "2019-10-05T17:42:06", "upload_time_iso_8601": "2019-10-05T17:42:06.849960Z", "url": "https://files.pythonhosted.org/packages/b2/76/b1cb972bca1080f383bc1ae9a28ae67d8ce38820071d7b48eeafb1e8d190/underground-0.2.7.tar.gz", "yanked": false}], "0.2.7.1": [{"comment_text": "", "digests": {"md5": "5dbdb0e1fc8b190428340e7be382b750", "sha256": "9626badcdb88bace22b6be14fa9f4ec7fa4669a106b90f98d4ae06f7b817d5fa"}, "downloads": -1, "filename": "underground-0.2.7.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5dbdb0e1fc8b190428340e7be382b750", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 12913, "upload_time": "2019-10-05T18:01:59", "upload_time_iso_8601": "2019-10-05T18:01:59.476054Z", "url": "https://files.pythonhosted.org/packages/0b/56/bc2423f9e379a94c16127a897dca586d5bd1ec85412e34f03435480d10ed/underground-0.2.7.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f2269a031757445fd9451e9f717765c9", "sha256": "1f4c8f2889f1999aaf15b069078baa9ae1ac13ea2b170dbf2b82890a588d8c72"}, "downloads": -1, "filename": "underground-0.2.7.1.tar.gz", "has_sig": false, "md5_digest": "f2269a031757445fd9451e9f717765c9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 11835, "upload_time": "2019-10-05T18:02:08", "upload_time_iso_8601": "2019-10-05T18:02:08.806781Z", "url": "https://files.pythonhosted.org/packages/ab/bf/2fc5f2dff84e74893ccae4a4bca0e2cdcc7c1b52407c772b0f90fb6928c8/underground-0.2.7.1.tar.gz", "yanked": false}], "0.2.7.2": [{"comment_text": "", "digests": {"md5": "c1c0d83afdfc00b2a38424522e001c51", "sha256": "196299a9286c00d3b117997c6daa3ec50b7e5b19cceec2f5493636e3607bad84"}, "downloads": -1, "filename": "underground-0.2.7.2-py3-none-any.whl", "has_sig": false, "md5_digest": "c1c0d83afdfc00b2a38424522e001c51", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 12882, "upload_time": "2019-10-05T18:04:31", "upload_time_iso_8601": "2019-10-05T18:04:31.543200Z", "url": "https://files.pythonhosted.org/packages/7f/38/582f61798a1531df38a10f5087872afe356d8b4e7f1482589ee50492ce80/underground-0.2.7.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9d67ddc7d8b898b8451ba90d4f599cee", "sha256": "ac77214ae6defc1810cc34e165c59e3be5e9de610c33a423751727dc539b6478"}, "downloads": -1, "filename": "underground-0.2.7.2.tar.gz", "has_sig": false, "md5_digest": "9d67ddc7d8b898b8451ba90d4f599cee", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 11789, "upload_time": "2019-10-05T18:04:41", "upload_time_iso_8601": "2019-10-05T18:04:41.146777Z", "url": "https://files.pythonhosted.org/packages/40/88/f4f0c05fc262ac92653aefa75faefb357c674a15244619f95e7d8c41c080/underground-0.2.7.2.tar.gz", "yanked": false}], "0.2.7.3": [{"comment_text": "", "digests": {"md5": "1a54009cb9692aeeff3cabc3fbb9ed36", "sha256": "bd89e062fd1d2be113da9d824e7293088ff4c41497c55b6f7cdb38f1ec25d5b4"}, "downloads": -1, "filename": "underground-0.2.7.3-py3-none-any.whl", "has_sig": false, "md5_digest": "1a54009cb9692aeeff3cabc3fbb9ed36", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 12942, "upload_time": "2019-10-05T18:51:28", "upload_time_iso_8601": "2019-10-05T18:51:28.739315Z", "url": "https://files.pythonhosted.org/packages/c1/d1/a54b06d392a18a22e0836a488c8e776d521ebd4a36622845e76a368a0f8f/underground-0.2.7.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "951ec712254039be669fa19dd1a4e6af", "sha256": "3771e918c68eca5665ed78b641f793fc457e4fa2843f282a3e32634744fe4154"}, "downloads": -1, "filename": "underground-0.2.7.3.tar.gz", "has_sig": false, "md5_digest": "951ec712254039be669fa19dd1a4e6af", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 11791, "upload_time": "2019-10-05T18:51:30", "upload_time_iso_8601": "2019-10-05T18:51:30.135102Z", "url": "https://files.pythonhosted.org/packages/53/ae/330dd9279e087b3556a3da6b059ad03e5e61434fb4cb3fe58b421c2fe476/underground-0.2.7.3.tar.gz", "yanked": false}], "0.2.7.4": [{"comment_text": "", "digests": {"md5": "29329863786d5d95a0ca7de17dea2bf0", "sha256": "6fd20505fa0de2975d616fa02b36f4c5b33c485b2c4ba1927842b66c7cfe6420"}, "downloads": -1, "filename": "underground-0.2.7.4-py3-none-any.whl", "has_sig": false, "md5_digest": "29329863786d5d95a0ca7de17dea2bf0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 13797, "upload_time": "2019-11-20T16:32:57", "upload_time_iso_8601": "2019-11-20T16:32:57.717500Z", "url": "https://files.pythonhosted.org/packages/1f/f7/2b8d8233d250bf619fdf4e6443c6c6531f209491fb29d7937013fa081ef5/underground-0.2.7.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "63bf2e63cf467aac2db85265786009b3", "sha256": "6fa5ae1e11f107e42e774c9eafff39088315fb24ebb580931b7f54040ffae160"}, "downloads": -1, "filename": "underground-0.2.7.4.tar.gz", "has_sig": false, "md5_digest": "63bf2e63cf467aac2db85265786009b3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 12725, "upload_time": "2019-11-20T16:32:59", "upload_time_iso_8601": "2019-11-20T16:32:59.056417Z", "url": "https://files.pythonhosted.org/packages/ca/42/9b0572cc77e537d3b0ff74daaf6b18fdd7252fb899159ca8f06b7e20ed3c/underground-0.2.7.4.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "dc73d25f63c6c898c6f6d9d19613383c", "sha256": "0af088b7c32bb8bdb050da21ac9bec68c8ccc3233dc35e7443edf2fe870d9219"}, "downloads": -1, "filename": "underground-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "dc73d25f63c6c898c6f6d9d19613383c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14600, "upload_time": "2020-04-06T01:01:24", "upload_time_iso_8601": "2020-04-06T01:01:24.537567Z", "url": "https://files.pythonhosted.org/packages/26/5e/bf9b0ba05d3b243c43b828b93a38f4cd01212d145995bc74df2110b0b06c/underground-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bf2665bea4b13fa72b2d10989bd01930", "sha256": "4a568589fded967e6cf2e2894418f955ba0ea31afac3660b57c2ab12c99bf8ee"}, "downloads": -1, "filename": "underground-0.3.0.tar.gz", "has_sig": false, "md5_digest": "bf2665bea4b13fa72b2d10989bd01930", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15809, "upload_time": "2020-04-06T01:01:25", "upload_time_iso_8601": "2020-04-06T01:01:25.798653Z", "url": "https://files.pythonhosted.org/packages/57/a2/b1653212bf51d6aa20ccd4914de811bb67ab37cbeba7e7817ca6afcc0b77/underground-0.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "dc73d25f63c6c898c6f6d9d19613383c", "sha256": "0af088b7c32bb8bdb050da21ac9bec68c8ccc3233dc35e7443edf2fe870d9219"}, "downloads": -1, "filename": "underground-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "dc73d25f63c6c898c6f6d9d19613383c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14600, "upload_time": "2020-04-06T01:01:24", "upload_time_iso_8601": "2020-04-06T01:01:24.537567Z", "url": "https://files.pythonhosted.org/packages/26/5e/bf9b0ba05d3b243c43b828b93a38f4cd01212d145995bc74df2110b0b06c/underground-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bf2665bea4b13fa72b2d10989bd01930", "sha256": "4a568589fded967e6cf2e2894418f955ba0ea31afac3660b57c2ab12c99bf8ee"}, "downloads": -1, "filename": "underground-0.3.0.tar.gz", "has_sig": false, "md5_digest": "bf2665bea4b13fa72b2d10989bd01930", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15809, "upload_time": "2020-04-06T01:01:25", "upload_time_iso_8601": "2020-04-06T01:01:25.798653Z", "url": "https://files.pythonhosted.org/packages/57/a2/b1653212bf51d6aa20ccd4914de811bb67ab37cbeba7e7817ca6afcc0b77/underground-0.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:40:52 2020"}