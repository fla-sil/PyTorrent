{"info": {"author": "Yahia KERIM", "author_email": "yahiakerim@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# KerasGA\nA simple and easy-to-use implementation of Genetic Algorithm for Keras NN models in Python.\n\n## Features\n* create an initial population (of size: `population_size`) of randomly initialized chromosomes (i.e model weights).\n* You can adjust the `selection_rate` & the `mutation_rate`.\n* Perform the different GA operations (i.e Selection, Crossover, & Mutation).\n\n## Examples\nHere are a few projects based on this package:\n* [yahiakr/FlappyAI](https://github.com/yahiakr/FlappyAI)\n* [yahiakr/SnakeAI](https://github.com/yahiakr/SnakeAI)\n\n## Usage\n* Install `KerasGA` :\n```\n$ pip install KerasGA\n```\n\n* import `GeneticAlgorithm` from `KerasGA` and initiate an object :\n```python\nfrom KerasGA import GeneticAlgorithm\n\npopulation_size =  10\nGA = GeneticAlgorithm(model, population_size = population_size, selection_rate = 0.1, mutation_rate = 0.2)\n```\n\n**PS:** `model` is a Keras model.\n\n* Generate the initial population:\n```python\npopulation = GA.initial_population()\n```\n* To set the wights of a model you can use `.set_weights()` built-in function:\n```python\nfor chromosome in population:\n\tmodel.set_weights(chromosome)\n\t# then evaluate the chromosome (i.e assign its final score)\n```\n\n* After calculating the scores for each chromosome, it's time to select the top-performers:\n```python\n# Selection:\n# 'scores' is a list of length = population_size\n# 'top_performers' is a list of tuples: (chromosome, it's score)\ntop_performers = GA.strongest_parents(population,scores)\n\n# Make pairs:\n# 'GA.pair' return a tuple of type: (chromosome, it's score)\npairs = []\nwhile len(pairs) != GA.population_size:\n\tpairs.append( GA.pair(top_performers) )\n\n# Crossover:\nbase_offsprings =  []\nfor pair in pairs:\n\toffsprings = GA.crossover(pair[0][0], pair[1][0])\n\t# 'offsprings' contains two chromosomes\n\tbase_offsprings.append(offsprings[-1])\n\n# Mutation:\nnew_population = GA.mutation(base_offsprings)\n```\nAnd that's it :)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/yahiakr/KerasGA", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "KerasGA", "package_url": "https://pypi.org/project/KerasGA/", "platform": "", "project_url": "https://pypi.org/project/KerasGA/", "project_urls": {"Homepage": "https://github.com/yahiakr/KerasGA"}, "release_url": "https://pypi.org/project/KerasGA/1.0.0/", "requires_dist": null, "requires_python": ">=3", "summary": "A simple and easy-to-use implementation of Genetic Algorithm for Keras NN models in Python.", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>KerasGA</h1>\n<p>A simple and easy-to-use implementation of Genetic Algorithm for Keras NN models in Python.</p>\n<h2>Features</h2>\n<ul>\n<li>create an initial population (of size: <code>population_size</code>) of randomly initialized chromosomes (i.e model weights).</li>\n<li>You can adjust the <code>selection_rate</code> &amp; the <code>mutation_rate</code>.</li>\n<li>Perform the different GA operations (i.e Selection, Crossover, &amp; Mutation).</li>\n</ul>\n<h2>Examples</h2>\n<p>Here are a few projects based on this package:</p>\n<ul>\n<li><a href=\"https://github.com/yahiakr/FlappyAI\" rel=\"nofollow\">yahiakr/FlappyAI</a></li>\n<li><a href=\"https://github.com/yahiakr/SnakeAI\" rel=\"nofollow\">yahiakr/SnakeAI</a></li>\n</ul>\n<h2>Usage</h2>\n<ul>\n<li>Install <code>KerasGA</code> :</li>\n</ul>\n<pre><code>$ pip install KerasGA\n</code></pre>\n<ul>\n<li>import <code>GeneticAlgorithm</code> from <code>KerasGA</code> and initiate an object :</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">KerasGA</span> <span class=\"kn\">import</span> <span class=\"n\">GeneticAlgorithm</span>\n\n<span class=\"n\">population_size</span> <span class=\"o\">=</span>  <span class=\"mi\">10</span>\n<span class=\"n\">GA</span> <span class=\"o\">=</span> <span class=\"n\">GeneticAlgorithm</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">population_size</span> <span class=\"o\">=</span> <span class=\"n\">population_size</span><span class=\"p\">,</span> <span class=\"n\">selection_rate</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">mutation_rate</span> <span class=\"o\">=</span> <span class=\"mf\">0.2</span><span class=\"p\">)</span>\n</pre>\n<p><strong>PS:</strong> <code>model</code> is a Keras model.</p>\n<ul>\n<li>Generate the initial population:</li>\n</ul>\n<pre><span class=\"n\">population</span> <span class=\"o\">=</span> <span class=\"n\">GA</span><span class=\"o\">.</span><span class=\"n\">initial_population</span><span class=\"p\">()</span>\n</pre>\n<ul>\n<li>To set the wights of a model you can use <code>.set_weights()</code> built-in function:</li>\n</ul>\n<pre><span class=\"k\">for</span> <span class=\"n\">chromosome</span> <span class=\"ow\">in</span> <span class=\"n\">population</span><span class=\"p\">:</span>\n\t<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">set_weights</span><span class=\"p\">(</span><span class=\"n\">chromosome</span><span class=\"p\">)</span>\n\t<span class=\"c1\"># then evaluate the chromosome (i.e assign its final score)</span>\n</pre>\n<ul>\n<li>After calculating the scores for each chromosome, it's time to select the top-performers:</li>\n</ul>\n<pre><span class=\"c1\"># Selection:</span>\n<span class=\"c1\"># 'scores' is a list of length = population_size</span>\n<span class=\"c1\"># 'top_performers' is a list of tuples: (chromosome, it's score)</span>\n<span class=\"n\">top_performers</span> <span class=\"o\">=</span> <span class=\"n\">GA</span><span class=\"o\">.</span><span class=\"n\">strongest_parents</span><span class=\"p\">(</span><span class=\"n\">population</span><span class=\"p\">,</span><span class=\"n\">scores</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Make pairs:</span>\n<span class=\"c1\"># 'GA.pair' return a tuple of type: (chromosome, it's score)</span>\n<span class=\"n\">pairs</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"k\">while</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">pairs</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"n\">GA</span><span class=\"o\">.</span><span class=\"n\">population_size</span><span class=\"p\">:</span>\n\t<span class=\"n\">pairs</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span> <span class=\"n\">GA</span><span class=\"o\">.</span><span class=\"n\">pair</span><span class=\"p\">(</span><span class=\"n\">top_performers</span><span class=\"p\">)</span> <span class=\"p\">)</span>\n\n<span class=\"c1\"># Crossover:</span>\n<span class=\"n\">base_offsprings</span> <span class=\"o\">=</span>  <span class=\"p\">[]</span>\n<span class=\"k\">for</span> <span class=\"n\">pair</span> <span class=\"ow\">in</span> <span class=\"n\">pairs</span><span class=\"p\">:</span>\n\t<span class=\"n\">offsprings</span> <span class=\"o\">=</span> <span class=\"n\">GA</span><span class=\"o\">.</span><span class=\"n\">crossover</span><span class=\"p\">(</span><span class=\"n\">pair</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">pair</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n\t<span class=\"c1\"># 'offsprings' contains two chromosomes</span>\n\t<span class=\"n\">base_offsprings</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">offsprings</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># Mutation:</span>\n<span class=\"n\">new_population</span> <span class=\"o\">=</span> <span class=\"n\">GA</span><span class=\"o\">.</span><span class=\"n\">mutation</span><span class=\"p\">(</span><span class=\"n\">base_offsprings</span><span class=\"p\">)</span>\n</pre>\n<p>And that's it :)</p>\n\n          </div>"}, "last_serial": 6406041, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "75f5e11adaa2d80ffbdfc5f70a982da7", "sha256": "23328ecd82987ade9a32ec297358b6385a90fe48baa44ffcb262f05852164894"}, "downloads": -1, "filename": "KerasGA-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "75f5e11adaa2d80ffbdfc5f70a982da7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 16488, "upload_time": "2020-01-07T01:23:31", "upload_time_iso_8601": "2020-01-07T01:23:31.102634Z", "url": "https://files.pythonhosted.org/packages/ad/98/c306410360532b70d968e9ca3d9974a14221be2a9ca1f179a33f2787f0be/KerasGA-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9b5cf9ecac22f89fa5bdb65af3de6c51", "sha256": "6389a07626e7758ad4cccd57dd63c00c52b0e7ae6584e32446937bd3e8ddd364"}, "downloads": -1, "filename": "KerasGA-1.0.0.tar.gz", "has_sig": false, "md5_digest": "9b5cf9ecac22f89fa5bdb65af3de6c51", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 3126, "upload_time": "2020-01-07T01:23:33", "upload_time_iso_8601": "2020-01-07T01:23:33.846781Z", "url": "https://files.pythonhosted.org/packages/8c/a6/d2e64b8a9347d5dda712b617da5c72eb6e106d9be9cd5b2dca916e15e7f0/KerasGA-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "75f5e11adaa2d80ffbdfc5f70a982da7", "sha256": "23328ecd82987ade9a32ec297358b6385a90fe48baa44ffcb262f05852164894"}, "downloads": -1, "filename": "KerasGA-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "75f5e11adaa2d80ffbdfc5f70a982da7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 16488, "upload_time": "2020-01-07T01:23:31", "upload_time_iso_8601": "2020-01-07T01:23:31.102634Z", "url": "https://files.pythonhosted.org/packages/ad/98/c306410360532b70d968e9ca3d9974a14221be2a9ca1f179a33f2787f0be/KerasGA-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9b5cf9ecac22f89fa5bdb65af3de6c51", "sha256": "6389a07626e7758ad4cccd57dd63c00c52b0e7ae6584e32446937bd3e8ddd364"}, "downloads": -1, "filename": "KerasGA-1.0.0.tar.gz", "has_sig": false, "md5_digest": "9b5cf9ecac22f89fa5bdb65af3de6c51", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 3126, "upload_time": "2020-01-07T01:23:33", "upload_time_iso_8601": "2020-01-07T01:23:33.846781Z", "url": "https://files.pythonhosted.org/packages/8c/a6/d2e64b8a9347d5dda712b617da5c72eb6e106d9be9cd5b2dca916e15e7f0/KerasGA-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:12 2020"}