{"info": {"author": "Kevin Hill", "author_email": "kah.kevin.hill@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# QueueUp - A simple and easy queue interface for all of your needs\n\n\n**QueueUp** -- Is an entirely integrated queue interface over kombu to completely include all settings inside of a single object.\n\nThe reason we use `kombu` and AMQP as a whole is to allow for complex objects and delivery guaruntees we normally wouldn't get with much newer platforms.\n\n\n\n\n## Differences from QueueUp and Queue\n\nYou'd use the `QueueUp` library in the exact way you'd use the `queue.Queue` library. Let's look at the difference.\n\n**An example for python's `queue`**\n```py\nimport time\nimport random\nimport threading\nfrom queue import Queue\n\n\n# We're starting two threading daemons, \n# 1. one that pushes information into a queue, \n# 2. the other that reads information from the queue then publishes it\n\n\n\ndef queue_pusher(q):\n    while True:\n        q.put(random.randint(0, 1000))\n        time.sleep(0.05)\n\n\ndef queue_reciever(q):\n    while True:\n        qitem = q.get(block=True)\n        print(f\"Printing {item}\")\n        time.sleep(0.05)\n\nif __name__ == \"__main__\":\n    common_queue = Queue()\n    threading.Thread(target=queue_pusher, daemon=True, args=(common_queue,)).start()\n    threading.Thread(target=queue_reciever, daemon=True, args=(common_queue,)).start()\n\n    # Now the two queues will communicate with each other.\n\n    while True:\n        time.sleep(5)\n```\n\n**An example for `QueueUp`**\n\n\n```py\nimport time\nimport random\nimport threading\nfrom queueup import Queue\n\n\n# We're starting two threading daemons, \n# 1. one that pushes information into a queue, \n# 2. the other that reads information from the queue then publishes it\n\n\n\ndef queue_pusher(q):\n    while True:\n        q.put(random.randint(0, 1000))\n        time.sleep(0.05)\n\n\ndef queue_reciever(q):\n    while True:\n        qitem = q.get(block=True)\n        print(f\"Printing {item}\")\n        time.sleep(0.05)\n\nif __name__ == \"__main__\":\n    common_queue = Queue() # w/o parameters it returns a multiprocessing.Queue()\n    threading.Thread(target=queue_pusher, daemon=True, args=(common_queue,)).start()\n    threading.Thread(target=queue_reciever, daemon=True, args=(common_queue,)).start()\n\n    # Now the two queues will communicate with each other.\n\n    while True:\n        time.sleep(5)\n```\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "queueup", "package_url": "https://pypi.org/project/queueup/", "platform": "", "project_url": "https://pypi.org/project/queueup/", "project_urls": null, "release_url": "https://pypi.org/project/queueup/0.1/", "requires_dist": ["kombu", "arangodb", "auth", "brotli", "eventlet", "gevent", "librabbitmq", "pymongo", "msgpack", "redis", "sqlalchemy"], "requires_python": "", "summary": "A distributed queue library layered over kombu", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>QueueUp - A simple and easy queue interface for all of your needs</h1>\n<p><strong>QueueUp</strong> -- Is an entirely integrated queue interface over kombu to completely include all settings inside of a single object.</p>\n<p>The reason we use <code>kombu</code> and AMQP as a whole is to allow for complex objects and delivery guaruntees we normally wouldn't get with much newer platforms.</p>\n<h2>Differences from QueueUp and Queue</h2>\n<p>You'd use the <code>QueueUp</code> library in the exact way you'd use the <code>queue.Queue</code> library. Let's look at the difference.</p>\n<p><strong>An example for python's <code>queue</code></strong></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">import</span> <span class=\"nn\">random</span>\n<span class=\"kn\">import</span> <span class=\"nn\">threading</span>\n<span class=\"kn\">from</span> <span class=\"nn\">queue</span> <span class=\"kn\">import</span> <span class=\"n\">Queue</span>\n\n\n<span class=\"c1\"># We're starting two threading daemons, </span>\n<span class=\"c1\"># 1. one that pushes information into a queue, </span>\n<span class=\"c1\"># 2. the other that reads information from the queue then publishes it</span>\n\n\n\n<span class=\"k\">def</span> <span class=\"nf\">queue_pusher</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">):</span>\n    <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n        <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">))</span>\n        <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.05</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">queue_reciever</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">):</span>\n    <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n        <span class=\"n\">qitem</span> <span class=\"o\">=</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">block</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"Printing </span><span class=\"si\">{</span><span class=\"n\">item</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.05</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">common_queue</span> <span class=\"o\">=</span> <span class=\"n\">Queue</span><span class=\"p\">()</span>\n    <span class=\"n\">threading</span><span class=\"o\">.</span><span class=\"n\">Thread</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"n\">queue_pusher</span><span class=\"p\">,</span> <span class=\"n\">daemon</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">common_queue</span><span class=\"p\">,))</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n    <span class=\"n\">threading</span><span class=\"o\">.</span><span class=\"n\">Thread</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"n\">queue_reciever</span><span class=\"p\">,</span> <span class=\"n\">daemon</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">common_queue</span><span class=\"p\">,))</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># Now the two queues will communicate with each other.</span>\n\n    <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n        <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n</pre>\n<p><strong>An example for <code>QueueUp</code></strong></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">import</span> <span class=\"nn\">random</span>\n<span class=\"kn\">import</span> <span class=\"nn\">threading</span>\n<span class=\"kn\">from</span> <span class=\"nn\">queueup</span> <span class=\"kn\">import</span> <span class=\"n\">Queue</span>\n\n\n<span class=\"c1\"># We're starting two threading daemons, </span>\n<span class=\"c1\"># 1. one that pushes information into a queue, </span>\n<span class=\"c1\"># 2. the other that reads information from the queue then publishes it</span>\n\n\n\n<span class=\"k\">def</span> <span class=\"nf\">queue_pusher</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">):</span>\n    <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n        <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">))</span>\n        <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.05</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">queue_reciever</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">):</span>\n    <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n        <span class=\"n\">qitem</span> <span class=\"o\">=</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">block</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"Printing </span><span class=\"si\">{</span><span class=\"n\">item</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.05</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">common_queue</span> <span class=\"o\">=</span> <span class=\"n\">Queue</span><span class=\"p\">()</span> <span class=\"c1\"># w/o parameters it returns a multiprocessing.Queue()</span>\n    <span class=\"n\">threading</span><span class=\"o\">.</span><span class=\"n\">Thread</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"n\">queue_pusher</span><span class=\"p\">,</span> <span class=\"n\">daemon</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">common_queue</span><span class=\"p\">,))</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n    <span class=\"n\">threading</span><span class=\"o\">.</span><span class=\"n\">Thread</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"n\">queue_reciever</span><span class=\"p\">,</span> <span class=\"n\">daemon</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">common_queue</span><span class=\"p\">,))</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># Now the two queues will communicate with each other.</span>\n\n    <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n        <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 5822188, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "cf7d1c3a49522b7c779d4264d737ed69", "sha256": "10c6c557eb5682ba5e4c2f9faacfbbce69fff147d0a043de6727b3c7019dfb51"}, "downloads": -1, "filename": "queueup-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "cf7d1c3a49522b7c779d4264d737ed69", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 2872, "upload_time": "2019-09-12T19:41:24", "upload_time_iso_8601": "2019-09-12T19:41:24.358695Z", "url": "https://files.pythonhosted.org/packages/a4/72/b5e848e709289ce50177380030531b2854253f3848ba8ae24b6a489a939f/queueup-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1cc0e40443de1ab07ec3f890d28dffa9", "sha256": "3222dfdff4accefb13e5a333449fa51e96740f1896f57aaa73587f0d79cc6290"}, "downloads": -1, "filename": "queueup-0.1.tar.gz", "has_sig": false, "md5_digest": "1cc0e40443de1ab07ec3f890d28dffa9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3238, "upload_time": "2019-09-12T19:41:26", "upload_time_iso_8601": "2019-09-12T19:41:26.333405Z", "url": "https://files.pythonhosted.org/packages/f6/21/17da90b00d9083e6ba969d395369fc5123e7c3d4f46748cf0d5e9a8df253/queueup-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "cf7d1c3a49522b7c779d4264d737ed69", "sha256": "10c6c557eb5682ba5e4c2f9faacfbbce69fff147d0a043de6727b3c7019dfb51"}, "downloads": -1, "filename": "queueup-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "cf7d1c3a49522b7c779d4264d737ed69", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 2872, "upload_time": "2019-09-12T19:41:24", "upload_time_iso_8601": "2019-09-12T19:41:24.358695Z", "url": "https://files.pythonhosted.org/packages/a4/72/b5e848e709289ce50177380030531b2854253f3848ba8ae24b6a489a939f/queueup-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1cc0e40443de1ab07ec3f890d28dffa9", "sha256": "3222dfdff4accefb13e5a333449fa51e96740f1896f57aaa73587f0d79cc6290"}, "downloads": -1, "filename": "queueup-0.1.tar.gz", "has_sig": false, "md5_digest": "1cc0e40443de1ab07ec3f890d28dffa9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3238, "upload_time": "2019-09-12T19:41:26", "upload_time_iso_8601": "2019-09-12T19:41:26.333405Z", "url": "https://files.pythonhosted.org/packages/f6/21/17da90b00d9083e6ba969d395369fc5123e7c3d4f46748cf0d5e9a8df253/queueup-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:08:34 2020"}