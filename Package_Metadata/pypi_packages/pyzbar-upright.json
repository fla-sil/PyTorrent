{"info": {"author": "Lawrence Hudson", "author_email": "quicklizard@googlemail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Utilities"], "description": "pyzbar\n======\n\n.. image:: https://img.shields.io/badge/python-2.7%2C%203.4%2C%203.5%2C%203.6-blue.svg\n    :target: https://github.com/NaturalHistoryMuseum/pyzbar\n\n.. image:: https://badge.fury.io/py/pyzbar.svg\n    :target: https://pypi.python.org/pypi/pyzbar\n\n.. image:: https://travis-ci.org/NaturalHistoryMuseum/pyzbar.svg?branch=master\n    :target: https://travis-ci.org/NaturalHistoryMuseum/pyzbar\n\n.. image:: https://coveralls.io/repos/github/NaturalHistoryMuseum/pyzbar/badge.svg?branch=master\n    :target: https://coveralls.io/github/NaturalHistoryMuseum/pyzbar?branch=master\n\nRead one-dimensional barcodes and QR codes from Python 2 and 3 using the\n`zbar <http://zbar.sourceforge.net/>`__ library.\n\n-  Pure python\n-  Works with PIL / Pillow images, OpenCV / numpy ``ndarray``\\ s, and raw bytes\n-  Decodes locations of barcodes\n-  No dependencies, other than the zbar library itself\n-  Tested on Python 2.7, and Python 3.4 to 3.6\n\nThe older `zbar <https://sourceforge.net/p/zbar/code/ci/default/tree/python/>`__\npackage is stuck in Python 2.x-land.\nThe `zbarlight <https://github.com/Polyconseil/zbarlight/>`__ package does not\nprovide support for Windows and depends upon Pillow.\n\nInstallation\n------------\n\nThe ``zbar`` ``DLL``\\ s are included with the Windows Python wheels.\nOn other operating systems, you will need to install the ``zbar`` shared\nlibrary.\n\nMac OS X:\n\n::\n\n   brew install zbar\n\nLinux:\n\n::\n\n   sudo apt-get install libzbar0\n\nInstall this Python wrapper; use the second form to install dependencies of the\ncommand-line scripts:\n\n::\n\n   pip install pyzbar\n   pip install pyzbar[scripts]\n\nExample usage\n-------------\n\nThe ``decode`` function accepts instances of ``PIL.Image``.\n\n::\n\n   >>> from pyzbar.pyzbar import decode\n   >>> from PIL import Image\n   >>> decode(Image.open('pyzbar/tests/code128.png'))\n   [\n       Decoded(\n           data=b'Foramenifera', type='CODE128',\n           rect=Rect(left=37, top=550, width=324, height=76),\n           polygon=[\n               Point(x=37, y=551), Point(x=37, y=625), Point(x=361, y=626),\n               Point(x=361, y=550)\n           ]\n       )\n       Decoded(\n           data=b'Rana temporaria', type='CODE128',\n           rect=Rect(left=4, top=0, width=390, height=76),\n           polygon=[\n               Point(x=4, y=1), Point(x=4, y=75), Point(x=394, y=76),\n               Point(x=394, y=0)\n           ]\n       )\n   ]\n\nIt also accepts instances of ``numpy.ndarray``, which might come from loading\nimages using `OpenCV <http://opencv.org/>`__.\n\n::\n\n   >>> import cv2\n   >>> decode(cv2.imread('pyzbar/tests/code128.png'))\n   [\n       Decoded(\n           data=b'Foramenifera', type='CODE128',\n           rect=Rect(left=37, top=550, width=324, height=76),\n           polygon=[\n               Point(x=37, y=551), Point(x=37, y=625), Point(x=361, y=626),\n               Point(x=361, y=550)\n           ]\n       )\n       Decoded(\n           data=b'Rana temporaria', type='CODE128',\n           rect=Rect(left=4, top=0, width=390, height=76),\n           polygon=[\n               Point(x=4, y=1), Point(x=4, y=75), Point(x=394, y=76),\n               Point(x=394, y=0)\n           ]\n       )\n   ]\n\nYou can also provide a tuple ``(pixels, width, height)``, where the image data\nis eight bits-per-pixel.\n\n::\n\n   >>> image = cv2.imread('pyzbar/tests/code128.png')\n   >>> height, width = image.shape[:2]\n\n   >>> # 8 bpp by considering just the blue channel\n   >>> decode((image[:, :, 0].astype('uint8').tobytes(), width, height))\n   [\n       Decoded(\n           data=b'Foramenifera', type='CODE128',\n           rect=Rect(left=37, top=550, width=324, height=76),\n           polygon=[\n               Point(x=37, y=551), Point(x=37, y=625), Point(x=361, y=626),\n               Point(x=361, y=550)\n           ]\n       )\n       Decoded(\n           data=b'Rana temporaria', type='CODE128',\n           rect=Rect(left=4, top=0, width=390, height=76),\n           polygon=[\n               Point(x=4, y=1), Point(x=4, y=75), Point(x=394, y=76),\n               Point(x=394, y=0)\n           ]\n       )\n   ]\n\n   >>> # 8 bpp by converting image to greyscale\n   >>> grey = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n   >>> decode((grey.tobytes(), width, height))\n   [\n       Decoded(\n           data=b'Foramenifera', type='CODE128',\n           rect=Rect(left=37, top=550, width=324, height=76),\n           polygon=[\n               Point(x=37, y=551), Point(x=37, y=625), Point(x=361, y=626),\n               Point(x=361, y=550)\n           ]\n       )\n       Decoded(\n           data=b'Rana temporaria', type='CODE128',\n           rect=Rect(left=4, top=0, width=390, height=76),\n           polygon=[\n               Point(x=4, y=1), Point(x=4, y=75), Point(x=394, y=76),\n               Point(x=394, y=0)\n           ]\n       )\n   ]\n\n   >>> # If you don't provide 8 bpp\n   >>> decode((image.tobytes(), width, height))\n   Traceback (most recent call last):\n     File \"<stdin>\", line 1, in <module>\n     File \"/Users/lawh/projects/pyzbar/pyzbar/pyzbar.py\", line 102, in decode\n       raise PyZbarError('Unsupported bits-per-pixel [{0}]'.format(bpp))\n   pyzbar.pyzbar_error.PyZbarError: Unsupported bits-per-pixel [24]\n\nThe default behaviour is to decode all symbol types. You can look for just your\nsymbol types\n\n::\n\n   >>> from pyzbar.pyzbar import ZBarSymbol\n   >>> # Look for just qrcode\n   >>> decode(Image.open('pyzbar/tests/qrcode.png'), symbols=[ZBarSymbol.QRCODE])\n   [\n       Decoded(\n           data=b'Thalassiodracon', type='QRCODE',\n           rect=Rect(left=27, top=27, width=145, height=145),\n           polygon=[\n               Point(x=27, y=27), Point(x=27, y=172), Point(x=172, y=172),\n               Point(x=172, y=27)\n           ]\n       )\n   ]\n\n\n   >>> # If we look for just code128, the qrcodes in the image will not be detected\n   >>> decode(Image.open('pyzbar/tests/qrcode.png'), symbols=[ZBarSymbol.CODE128])\n   []\n\nBounding boxes and polygons\n---------------------------\n\nThe blue and pink boxes show ``rect`` and ``polygon``, respectively, for\nbarcodes in ``pyzbar/tests/qrcode.png`` (see\n`bounding_box_and_polygon.py <https://github.com/NaturalHistoryMuseum/pyzbar/blob/master/bounding_box_and_polygon.py>`__).\n\n.. figure:: https://github.com/NaturalHistoryMuseum/pyzbar/raw/master/bounding_box_and_polygon.png\n   :alt: Two barcodes with bounding boxes and polygons\n\nWindows error message\n---------------------\n\nIf you see an ugly ``ImportError`` when importing ``pyzbar`` on Windows\nyou will most likely need the `Visual C++ Redistributable Packages for Visual\nStudio 2013\n<https://www.microsoft.com/en-US/download/details.aspx?id=40784>`__.\nInstall ``vcredist_x64.exe`` if using 64-bit Python, ``vcredist_x86.exe`` if\nusing 32-bit Python.\n\nContributors\n------------\n\n-  Alex (@globophobe) - first implementation of barcode locations\n\nLicense\n-------\n\n``pyzbar`` is distributed under the MIT license (see ``LICENCE.txt``).\nThe ``zbar`` shared library is distributed under the GNU Lesser General\nPublic License, version 2.1 (see ``zbar-LICENCE.txt``).\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/NaturalHistoryMuseum/pyzbar/", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pyzbar-upright", "package_url": "https://pypi.org/project/pyzbar-upright/", "platform": "", "project_url": "https://pypi.org/project/pyzbar-upright/", "project_urls": {"Homepage": "https://github.com/NaturalHistoryMuseum/pyzbar/"}, "release_url": "https://pypi.org/project/pyzbar-upright/0.1.8/", "requires_dist": ["enum34 (>=1.1.6) ; python_version==\"2.7\"", "pathlib (>=1.0.1) ; python_version==\"2.7\"", "Pillow (>=3.2.0) ; extra == 'scripts'"], "requires_python": "", "summary": "Read one-dimensional barcodes and QR codes from Python 2 and 3.", "version": "0.1.8", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://github.com/NaturalHistoryMuseum/pyzbar\" rel=\"nofollow\"><img alt=\"https://img.shields.io/badge/python-2.7%2C%203.4%2C%203.5%2C%203.6-blue.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8d238b023876becf86a8b972dc67f0591bc0ebe7/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f707974686f6e2d322e37253243253230332e34253243253230332e35253243253230332e362d626c75652e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/pyzbar\" rel=\"nofollow\"><img alt=\"https://badge.fury.io/py/pyzbar.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/114f068324b2c7326278a2042bb85f5b76e9614d/68747470733a2f2f62616467652e667572792e696f2f70792f70797a6261722e737667\"></a>\n<a href=\"https://travis-ci.org/NaturalHistoryMuseum/pyzbar\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/NaturalHistoryMuseum/pyzbar.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1e0af866db65e0030f97e9896750c21690becef6/68747470733a2f2f7472617669732d63692e6f72672f4e61747572616c486973746f72794d757365756d2f70797a6261722e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/NaturalHistoryMuseum/pyzbar?branch=master\" rel=\"nofollow\"><img alt=\"https://coveralls.io/repos/github/NaturalHistoryMuseum/pyzbar/badge.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/75d3a1c65e42522289dc8150b3a35deb2b934ff9/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4e61747572616c486973746f72794d757365756d2f70797a6261722f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<p>Read one-dimensional barcodes and QR codes from Python 2 and 3 using the\n<a href=\"http://zbar.sourceforge.net/\" rel=\"nofollow\">zbar</a> library.</p>\n<ul>\n<li>Pure python</li>\n<li>Works with PIL / Pillow images, OpenCV / numpy <tt>ndarray</tt>s, and raw bytes</li>\n<li>Decodes locations of barcodes</li>\n<li>No dependencies, other than the zbar library itself</li>\n<li>Tested on Python 2.7, and Python 3.4 to 3.6</li>\n</ul>\n<p>The older <a href=\"https://sourceforge.net/p/zbar/code/ci/default/tree/python/\" rel=\"nofollow\">zbar</a>\npackage is stuck in Python 2.x-land.\nThe <a href=\"https://github.com/Polyconseil/zbarlight/\" rel=\"nofollow\">zbarlight</a> package does not\nprovide support for Windows and depends upon Pillow.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>The <tt>zbar</tt> <tt>DLL</tt>s are included with the Windows Python wheels.\nOn other operating systems, you will need to install the <tt>zbar</tt> shared\nlibrary.</p>\n<p>Mac OS X:</p>\n<pre>brew install zbar\n</pre>\n<p>Linux:</p>\n<pre>sudo apt-get install libzbar0\n</pre>\n<p>Install this Python wrapper; use the second form to install dependencies of the\ncommand-line scripts:</p>\n<pre>pip install pyzbar\npip install pyzbar[scripts]\n</pre>\n</div>\n<div id=\"example-usage\">\n<h2>Example usage</h2>\n<p>The <tt>decode</tt> function accepts instances of <tt>PIL.Image</tt>.</p>\n<pre>&gt;&gt;&gt; from pyzbar.pyzbar import decode\n&gt;&gt;&gt; from PIL import Image\n&gt;&gt;&gt; decode(Image.open('pyzbar/tests/code128.png'))\n[\n    Decoded(\n        data=b'Foramenifera', type='CODE128',\n        rect=Rect(left=37, top=550, width=324, height=76),\n        polygon=[\n            Point(x=37, y=551), Point(x=37, y=625), Point(x=361, y=626),\n            Point(x=361, y=550)\n        ]\n    )\n    Decoded(\n        data=b'Rana temporaria', type='CODE128',\n        rect=Rect(left=4, top=0, width=390, height=76),\n        polygon=[\n            Point(x=4, y=1), Point(x=4, y=75), Point(x=394, y=76),\n            Point(x=394, y=0)\n        ]\n    )\n]\n</pre>\n<p>It also accepts instances of <tt>numpy.ndarray</tt>, which might come from loading\nimages using <a href=\"http://opencv.org/\" rel=\"nofollow\">OpenCV</a>.</p>\n<pre>&gt;&gt;&gt; import cv2\n&gt;&gt;&gt; decode(cv2.imread('pyzbar/tests/code128.png'))\n[\n    Decoded(\n        data=b'Foramenifera', type='CODE128',\n        rect=Rect(left=37, top=550, width=324, height=76),\n        polygon=[\n            Point(x=37, y=551), Point(x=37, y=625), Point(x=361, y=626),\n            Point(x=361, y=550)\n        ]\n    )\n    Decoded(\n        data=b'Rana temporaria', type='CODE128',\n        rect=Rect(left=4, top=0, width=390, height=76),\n        polygon=[\n            Point(x=4, y=1), Point(x=4, y=75), Point(x=394, y=76),\n            Point(x=394, y=0)\n        ]\n    )\n]\n</pre>\n<p>You can also provide a tuple <tt>(pixels, width, height)</tt>, where the image data\nis eight bits-per-pixel.</p>\n<pre>&gt;&gt;&gt; image = cv2.imread('pyzbar/tests/code128.png')\n&gt;&gt;&gt; height, width = image.shape[:2]\n\n&gt;&gt;&gt; # 8 bpp by considering just the blue channel\n&gt;&gt;&gt; decode((image[:, :, 0].astype('uint8').tobytes(), width, height))\n[\n    Decoded(\n        data=b'Foramenifera', type='CODE128',\n        rect=Rect(left=37, top=550, width=324, height=76),\n        polygon=[\n            Point(x=37, y=551), Point(x=37, y=625), Point(x=361, y=626),\n            Point(x=361, y=550)\n        ]\n    )\n    Decoded(\n        data=b'Rana temporaria', type='CODE128',\n        rect=Rect(left=4, top=0, width=390, height=76),\n        polygon=[\n            Point(x=4, y=1), Point(x=4, y=75), Point(x=394, y=76),\n            Point(x=394, y=0)\n        ]\n    )\n]\n\n&gt;&gt;&gt; # 8 bpp by converting image to greyscale\n&gt;&gt;&gt; grey = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n&gt;&gt;&gt; decode((grey.tobytes(), width, height))\n[\n    Decoded(\n        data=b'Foramenifera', type='CODE128',\n        rect=Rect(left=37, top=550, width=324, height=76),\n        polygon=[\n            Point(x=37, y=551), Point(x=37, y=625), Point(x=361, y=626),\n            Point(x=361, y=550)\n        ]\n    )\n    Decoded(\n        data=b'Rana temporaria', type='CODE128',\n        rect=Rect(left=4, top=0, width=390, height=76),\n        polygon=[\n            Point(x=4, y=1), Point(x=4, y=75), Point(x=394, y=76),\n            Point(x=394, y=0)\n        ]\n    )\n]\n\n&gt;&gt;&gt; # If you don't provide 8 bpp\n&gt;&gt;&gt; decode((image.tobytes(), width, height))\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"/Users/lawh/projects/pyzbar/pyzbar/pyzbar.py\", line 102, in decode\n    raise PyZbarError('Unsupported bits-per-pixel [{0}]'.format(bpp))\npyzbar.pyzbar_error.PyZbarError: Unsupported bits-per-pixel [24]\n</pre>\n<p>The default behaviour is to decode all symbol types. You can look for just your\nsymbol types</p>\n<pre>&gt;&gt;&gt; from pyzbar.pyzbar import ZBarSymbol\n&gt;&gt;&gt; # Look for just qrcode\n&gt;&gt;&gt; decode(Image.open('pyzbar/tests/qrcode.png'), symbols=[ZBarSymbol.QRCODE])\n[\n    Decoded(\n        data=b'Thalassiodracon', type='QRCODE',\n        rect=Rect(left=27, top=27, width=145, height=145),\n        polygon=[\n            Point(x=27, y=27), Point(x=27, y=172), Point(x=172, y=172),\n            Point(x=172, y=27)\n        ]\n    )\n]\n\n\n&gt;&gt;&gt; # If we look for just code128, the qrcodes in the image will not be detected\n&gt;&gt;&gt; decode(Image.open('pyzbar/tests/qrcode.png'), symbols=[ZBarSymbol.CODE128])\n[]\n</pre>\n</div>\n<div id=\"bounding-boxes-and-polygons\">\n<h2>Bounding boxes and polygons</h2>\n<p>The blue and pink boxes show <tt>rect</tt> and <tt>polygon</tt>, respectively, for\nbarcodes in <tt>pyzbar/tests/qrcode.png</tt> (see\n<a href=\"https://github.com/NaturalHistoryMuseum/pyzbar/blob/master/bounding_box_and_polygon.py\" rel=\"nofollow\">bounding_box_and_polygon.py</a>).</p>\n<div>\n<img alt=\"Two barcodes with bounding boxes and polygons\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0cd6c3cebd8c8eeddb626651f46364b870c2af6a/68747470733a2f2f6769746875622e636f6d2f4e61747572616c486973746f72794d757365756d2f70797a6261722f7261772f6d61737465722f626f756e64696e675f626f785f616e645f706f6c79676f6e2e706e67\">\n</div>\n</div>\n<div id=\"windows-error-message\">\n<h2>Windows error message</h2>\n<p>If you see an ugly <tt>ImportError</tt> when importing <tt>pyzbar</tt> on Windows\nyou will most likely need the <a href=\"https://www.microsoft.com/en-US/download/details.aspx?id=40784\" rel=\"nofollow\">Visual C++ Redistributable Packages for Visual\nStudio 2013</a>.\nInstall <tt>vcredist_x64.exe</tt> if using 64-bit Python, <tt>vcredist_x86.exe</tt> if\nusing 32-bit Python.</p>\n</div>\n<div id=\"contributors\">\n<h2>Contributors</h2>\n<ul>\n<li>Alex (@globophobe) - first implementation of barcode locations</li>\n</ul>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p><tt>pyzbar</tt> is distributed under the MIT license (see <tt>LICENCE.txt</tt>).\nThe <tt>zbar</tt> shared library is distributed under the GNU Lesser General\nPublic License, version 2.1 (see <tt><span class=\"pre\">zbar-LICENCE.txt</span></tt>).</p>\n</div>\n\n          </div>"}, "last_serial": 7179875, "releases": {"0.1.8": [{"comment_text": "", "digests": {"md5": "d774f9eb782975a91d36e7890732586d", "sha256": "78bcc86729871c607a013a6dece5ce050c8928cf8e0cfa43c008adca5bd29245"}, "downloads": -1, "filename": "pyzbar_upright-0.1.8-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d774f9eb782975a91d36e7890732586d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 17510, "upload_time": "2020-05-06T12:18:06", "upload_time_iso_8601": "2020-05-06T12:18:06.106232Z", "url": "https://files.pythonhosted.org/packages/c8/ba/d7cc97baa6974cc3990fa3e988fc55b543c0a0713926b7fe9cb007132a8b/pyzbar_upright-0.1.8-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4a2a3df6e4e638c656f1a85779c0d63d", "sha256": "2af2a3fb4be222c3a7aeee1157fe2719f5da53f358d6015d4973ade872d6d165"}, "downloads": -1, "filename": "pyzbar-upright-0.1.8.tar.gz", "has_sig": false, "md5_digest": "4a2a3df6e4e638c656f1a85779c0d63d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14843, "upload_time": "2020-05-06T12:18:08", "upload_time_iso_8601": "2020-05-06T12:18:08.370813Z", "url": "https://files.pythonhosted.org/packages/93/b6/73110e88ff56ce93e03b685c431d94d0821099f9db246fc52d3d676106f0/pyzbar-upright-0.1.8.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d774f9eb782975a91d36e7890732586d", "sha256": "78bcc86729871c607a013a6dece5ce050c8928cf8e0cfa43c008adca5bd29245"}, "downloads": -1, "filename": "pyzbar_upright-0.1.8-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d774f9eb782975a91d36e7890732586d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 17510, "upload_time": "2020-05-06T12:18:06", "upload_time_iso_8601": "2020-05-06T12:18:06.106232Z", "url": "https://files.pythonhosted.org/packages/c8/ba/d7cc97baa6974cc3990fa3e988fc55b543c0a0713926b7fe9cb007132a8b/pyzbar_upright-0.1.8-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4a2a3df6e4e638c656f1a85779c0d63d", "sha256": "2af2a3fb4be222c3a7aeee1157fe2719f5da53f358d6015d4973ade872d6d165"}, "downloads": -1, "filename": "pyzbar-upright-0.1.8.tar.gz", "has_sig": false, "md5_digest": "4a2a3df6e4e638c656f1a85779c0d63d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14843, "upload_time": "2020-05-06T12:18:08", "upload_time_iso_8601": "2020-05-06T12:18:08.370813Z", "url": "https://files.pythonhosted.org/packages/93/b6/73110e88ff56ce93e03b685c431d94d0821099f9db246fc52d3d676106f0/pyzbar-upright-0.1.8.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:10:40 2020"}