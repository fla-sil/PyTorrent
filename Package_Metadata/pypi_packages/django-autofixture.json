{"info": {"author": "Gregor M\u00fcllegger", "author_email": "gregor@muellegger.de", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Django", "Framework :: Django :: 1.4", "Framework :: Django :: 1.5", "Framework :: Django :: 1.6", "Framework :: Django :: 1.7", "Framework :: Django :: 1.8", "Framework :: Django :: 1.9", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5"], "description": "==================\ndjango-autofixture\n==================\n\n|build| |package|\n\nThis app aims to provide a simple way of loading masses of randomly generated\ntest data into your development database. You can use a management command to\nload test data through command line.\n\nIt is named *autofixture* because it is based on  django's fixtures. Without\n*autofixture* you add test data through the admin to see how the non-static\npages on your site look. You export data by using ``dumpdata`` to\nsend it to your colleagues or to preserve it before you make a ``manage.py\nreset app`` and so on. As your site grows in complexity the process of adding\nand re-adding data becomes more and more annoying.\n\nThis is where autofixtures will help!\n\n\nRequirements\n============\n\n* We require and support Django 1.4 to 1.9\n\n\nInstallation\n============\n\nYou must make the ``autofixture`` package available on your python path.\nEither drop it into your project directory or install it from the python\npackage index with ``pip install django-autofixture``. You can also use\n``easy_install django-autofixture`` if you don't have pip available.\n\nTo use the management command you must add ``'autofixture'`` to the\n``INSTALLED_APPS`` setting in your django settings file. You don't need to do\nthis if you want to use the ``autofixture`` package only as library.\n\n\nManagement command\n==================\n\nThe ``loadtestdata`` accepts the following syntax::\n\n    python manage.py loadtestdata [options] app.Model:# [app.Model:# ...]\n\nIt's nearly self explanatory. Supply names of models, prefixed with its app\nname. After that, place a colon and tell the command how many objects you want\nto create. Here is an example of how to create three categories and twenty\nentries for your blogging app::\n\n    python manage.py loadtestdata blog.Category:3 blog.Entry:20\n\nVoila! You have ready-to-use testing data populated to your database. The\nmodel fields are filled with data by producing randomly generated values\ndepending on the type of the field. E.g. text fields are filled with lorem\nipsum dummies, date fields are populated with random dates from the last\nyear etc.\n\nThere are a few command line options available. Mainly to control the\nbehavior of related fields. If foreingkey or many to many fields should be\npopulated with existing data or if the related models are also generated on\nthe fly. Please have a look at the help page of the command for more\ninformation::\n\n    python manage.py help loadtestdata\n\n\nUsing autofixtures as a tool for unittests\n==========================================\n\nTesting the behavior of complex models has always bugged me. Sometimes models\nhave many restrictions or many related objects which they depend on. One\nsolution would be to use traditional fixtures dumped from your production\ndatabase. But while in development when database schemes are changing\nfrequently, it can be time consuming and sometimes difficult to deep track of\nchanges and what each dump contains.\n\nAutofixtures to the rescue!\n\nLet's start with the basics. We create an ``AutoFixture`` instance for the\n``Entry`` model and tell it to create ten model instances::\n\n    >>> from autofixture import AutoFixture\n    >>> fixture = AutoFixture(Entry)\n    >>> entries = fixture.create(10)\n\nHere are further examples for newer developers.\n\nI have a ``Listing`` model and I want it populated with 10 objects.\n\n::\n\n    >>> from autofixture import AutoFixture\n    >>> fixture = AutoFixture(Listing)\n    >>> entries = fixture.create(10)\n\nHere I've added field values which allow you to default a field to a certain\nvalue rather than the random entries supplied by *autofixture*.\n\nGeneric Example including field_values:\n\n::\n\n    from <yourapp>.models import <your model>\n    fixture = AutoFixture(<your model>, field_values={'<your field name>':<value>})\n\nSpecific example::\n\n    from main.models import Listing\n    fixture = AutoFixture(Listing, field_values={'needed_players': randint(2,10)})\n    entries=fixture.create(30)\n\nIn the above, I wanted the ``'needed_players'`` (in the Session model) to have\nonly numbers between 2 and 10, but I could have put ``{'needed_players': 5}``\nif I had wanted all ``'needed_players'`` instances to be ``5``.\n\n========================================\n\nNow you can play around and test your blog entries. By default, dependencies\nof foreignkeys and many to many relations are populated by randomly selecting\nan already existing object of the related model. But, what if you don't have\none yet?  You can provide the ``generate_fk`` attribute which allows the\nautofixture instance to follow foreignkeys by generating new related models::\n\n    fixture = AutoFixture(Entry, generate_fk=True)\n\nThis generates new instances for *all* foreignkey fields of ``Entry``. Unless\nthe model has a foreign key reference to itself, wherein the field will be set\nto None if allowed or raise a ``CreateInstanceError``. This is to prevent max\nrecursion depth errors. It's possible to limit this behaviour to single\nfields::\n\n    fixture = AutoFixture(Entry, generate_fk=['author'])\n\nThis will only create new authors automatically and doesn't touch other\ntables. The same is possible with many to many fields. But you need to\nadditionally specify how many objects should be created for the m2m relation::\n\n    fixture = AutoFixture(Entry, generate_m2m={'categories': (1,3)})\n\nAll created entry models get one to three new categories assigned.\n\nSetting custom values for fields\n--------------------------------\n\nAs shown the the examples above, it's often necessary to have a specific field\ncontain a specific value. This is easily achieved with the ``field_values``\nattribute of ``AutoFixture``::\n\n    fixture = AutoFixture(Entry,\n        field_values={'pub_date': datetime(2010, 2, 1)})\n\n\nLimiting the set of models assigned to a ForeignKey field\n----------------------------------------------------------\n\nYou could, for example, limit the Users assigned to a foreignkey field to only\nnon-staff Users. Or create Entries for all Blogs not belonging to Yoko Ono.\nUse the same construction as ForeignKey.limit_choices_to_ attribute::\n\n    from autofixture import AutoFixture, generators\n    fixture = AutoFixture(Entry, field_values={\n        'blog': generators.InstanceSelector(\n            Blog,\n            limit_choices_to={'name__ne':\"Yoko Ono's blog\"})\n    })\n\n\nCustom autofixtures\n===================\n\nTo have custom autofixtures for your model, you can easily subclass\n``AutoFixture`` somewhere (e.g. in myapp/autofixtures.py) ::\n\n    from models import MyModel\n    from autofixture import generators, register, AutoFixture\n\n    class MyModelAutoFixture(AutoFixture):\n        field_values = {\n            'name': generators.StaticGenerator('this_is_my_static_name'),\n        }\n\n    register(MyModel, MyModelAutoFixture)\n\n\nThen, ``loadtestdata`` will automatically use your custom fixtures. ::\n\n    python manage.py loadtestdata app.MyModel:10\n\nYou can load all ``autofixtures.py`` files of your installed apps\nautomatically like you can do with the admin autodiscover. Do so by running\n``autofixture.autodiscover()`` somewhere in the code, preferably in the\n``urls.py``.\n\n\nMore\n====\n\nThere is so much more to explore which might be useful to you and your\nprojects:\n\n* There are ways to register custom ``AutoFixture`` subclasses with models\n  that are automatically used when calling ``loadtestdata`` on the model.\n* More control for related models, even with relations of related models...\n  (e.g. by using ``generate_fk=['author', 'author__user']``)\n* Custom constraints that are used to ensure that created models are\n  valid (e.g. ``unique`` and ``unique_together`` constraints, which are\n  already handled by default)\n\n\nContribute\n==========\n\nYou can find the latest development version on github_. Get there and fork it,\nfile bugs or send me nice wishes.\n\nTo start developing, make sure the test suite passes::\n\n    virtualenv .env\n    source .env/bin/activate\n    pip install -r requirements/tests.txt\n    python setup.py test\n\nNow go, do some coding.\n\nFeel free to drop me a message about critiques or feature requests. You can get\nin touch with me by mail_ or twitter_.\n\nHappy autofixturing!\n\n.. _github: https://github.com/gregmuellegger/django-autofixture\n.. _mail: mailto:gregor@muellegger.de\n.. _twitter: http://twitter.com/gregmuellegger\n.. _ForeignKey.limit_choices_to: http://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.ForeignKey.limit_choices_to\n\n.. |build| image:: https://travis-ci.org/gregmuellegger/django-autofixture.svg?branch=master\n    :alt: Build Status\n    :scale: 100%\n    :target: https://travis-ci.org/gregmuellegger/django-autofixture\n\n.. |package| image:: https://badge.fury.io/py/django-autofixture.svg\n    :alt: Package Version\n    :scale: 100%\n    :target: http://badge.fury.io/py/django-autofixture\n\n\nChangelog\n=========\n\n0.12.1\n------\n\n* `#85`_: Better examples in README. Thanks to Dan Hitt for the patch.\n* `#86`_: Less deprecation warnings when using django-autofixture on Python\n  3.5. Thanks to Nick Timkovich for the patch.\n* `#87`_: Closing files properly, so you should see less ``ResourceWarnings``\n  while using django-autofixture. Thanks to Nick Timkovich for the patch.\n\n.. _#85: https://github.com/gregmuellegger/django-autofixture/pull/85\n.. _#86: https://github.com/gregmuellegger/django-autofixture/pull/86\n.. _#87: https://github.com/gregmuellegger/django-autofixture/pull/87\n\n0.12.0\n------\n\n* `#81`_: Add support for UUID fields. Thanks to @jungornti for the patch.\n* `#77`_: Fixing a very rare crash in cases when a generated email in the\n  ``UserFixture`` already exists. Thanks to Tien Nguyen for the patch.\n\n.. _#77: https://github.com/gregmuellegger/django-autofixture/pull/77\n.. _#81: https://github.com/gregmuellegger/django-autofixture/pull/81\n\n0.11.0\n------\n\n* `#75`_: Support for Django 1.9. Thanks to Adam Dobrawy for the patch.\n* `#67`_: If many to many relations are created in a autofixture, we now make sure\n  that a registered autofixture is used for this if there is any. Thanks to\n  Andrew Lewisohn for the patch.\n\n.. _#75: https://github.com/gregmuellegger/django-autofixture/pull/75\n.. _#67: https://github.com/gregmuellegger/django-autofixture/pull/67\n\n0.10.1\n------\n\n* Fixing unique constraint checks for multiple ``None`` values. Thanks to\n  Andrew Lewisohn for the patch. See `#66`_.\n\n.. _#66: https://github.com/gregmuellegger/django-autofixture/pull/66\n\n0.10.0\n------\n\n* Supporting Django 1.7 style app configs in ``settings.INSTALLED_APPS``\n  when auto-importing autofixture definitions with\n  ``autofixture.autodiscover``.\n* Adding ``autofixture.generators.PositiveDecimalGenerator``.\n\n0.9.2\n-----\n\n* Fixed ``UserFixture`` that generated usernames with more than 30 characters.\n\n0.9.1\n-----\n\n* Fixed unique constraint for models that have multiple unique_togethers set.\n\n0.9\n---\n* Make ``ImageGenerator`` consider the given file storage. Thanks to Andrew\n  Pashkin for the patch.\n* Fixing check for unique constraint during data generation if the field\n  allows to be nullable. Thanks for Andrew Pashkin for the report and fix.\n\n0.8.0\n-----\n\n* Adding support for django's ``ImageField``. Thanks to Visgean Skeloru for\n  the patch.\n\n0.7.0\n-----\n\n* Adding ``AutoFixture.pre_process_instance`` method.\n* Allow arbitrary keyword arguments for ``AutoFixture.create`` method.\n* Fixing ``autofixture.unregister`` function.\n* Fixing ``UserFixture.post_process_instance``.\n\n0.6.3\n-----\n\n* Fixing long stated issue with GenericRelation fields. Thanks to StillNewb\n  for the patch.\n\n0.6.2\n-----\n\n* Supporting Django 1.6.\n\n0.6.1\n-----\n\n* Fixing issue with models that have a selfreferencing ForeignKey field.\n  Thanks to Josh Fyne for the patch.\n\n0.6.0\n-----\n\n* Adding ``generators.WeightedGenerator`` for propabilistic selection of\n  values. Thanks to Jonathan Tien for the idea and patch.\n* Supporting model inheritance. Thanks to Josh Fyne for the patch.\n\n0.5.0\n-----\n\n* Adding ``FirstNameGenerator`` and ``LastNameGenerator``. Thanks to Jonathan\n  Tien for the initial patch.\n* Registered Autofixtures are used for models that are created for foreignkeys\n  and many to many relations. Thanks to Theo Spears for the report.\n\n0.4.0\n-----\n\n* Python 3 support! Though we had to drop Python 2.5 support. If you cannot\n  upgrade to Python 2.6 by yet, please consider using the 0.3.x versions of\n  django-autofixture.\n  By the way: by Python 3 support, I mean, that the test suite is running\n  without any errors. I have not tested yet the library in production for\n  Python 3. So please test and submit bug reports if you encounter any.\n\n0.3.2\n-----\n\n* ``DateTimeField`` receive timezone aware datetime objects now. Thanks to\n  Scott Woodall for the report and patch.\n* Adding ``static_domain`` parameter to ``EmailGenerator`` to allow the\n  production of emails that will always have the same domain. Thanks to\n  mvdwaeter for the initial patch.\n\n0.3.1\n-----\n\n* ``field_values`` were not picked up if there was a default value assigned to\n  the field. Thanks to sirex for the report.\n\n0.3.0\n-----\n\n* Adding better support for subclassing ``AutoFixture`` through merging of\n  nested ``Values`` classes.\n* Renamed attribute and argument ``none_chance`` to better matching name ``empty_p`` for generators\n  and ``none_p`` for ``AutoFixture``.\n* Fixed some issues with management command options. Thanks Mikko Hellsing for\n  his hard work.\n* Fixed issues in unregister(). Thanks Mikko Hellsing for the report.\n* Adding support for ``FloatField``. Thanks to Jyr Gaxiola for the report.\n\n0.2.5\n-----\n\n* Fixing issue with ``--generate-fk`` option in management command. Thanks\n  Mikko Hellsing for the `report and fix`_.\n\n.. _report and fix: http://github.com/gregmuellegger/django-autofixture/issues/issue/1/\n\n0.2.4\n-----\n\n* Using ``Autofixture.Values`` for defining initial values in ``Autofixture``\n  subclasses.\n\n* Making autodiscover more robust. Don't break if some module can't be\n  imported or throws any other exception.\n\n0.2.3\n-----\n\n* Fixing bug when a ``CharField`` with ``max_length`` smaller than 15 is used.\n\n* ``AutoFixture.field_values`` accepts callables as values.", "description_content_type": null, "docs_url": "https://pythonhosted.org/django-autofixture/", "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/gregmuellegger/django-autofixture", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "django-autofixture", "package_url": "https://pypi.org/project/django-autofixture/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-autofixture/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/gregmuellegger/django-autofixture"}, "release_url": "https://pypi.org/project/django-autofixture/0.12.1/", "requires_dist": null, "requires_python": "", "summary": "Provides tools to auto generate test data.", "version": "0.12.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/gregmuellegger/django-autofixture\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4078a5e2d7917997a2038d3c3be64240288a1798/68747470733a2f2f7472617669732d63692e6f72672f677265676d75656c6c65676765722f646a616e676f2d6175746f666978747572652e7376673f6272616e63683d6d6173746572\"></a> <a href=\"http://badge.fury.io/py/django-autofixture\" rel=\"nofollow\"><img alt=\"Package Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/22dd993ab804949c6fe2957d51129fa9941a1a9b/68747470733a2f2f62616467652e667572792e696f2f70792f646a616e676f2d6175746f666978747572652e737667\"></a></p>\n<p>This app aims to provide a simple way of loading masses of randomly generated\ntest data into your development database. You can use a management command to\nload test data through command line.</p>\n<p>It is named <em>autofixture</em> because it is based on  django\u2019s fixtures. Without\n<em>autofixture</em> you add test data through the admin to see how the non-static\npages on your site look. You export data by using <tt>dumpdata</tt> to\nsend it to your colleagues or to preserve it before you make a <tt>manage.py\nreset app</tt> and so on. As your site grows in complexity the process of adding\nand re-adding data becomes more and more annoying.</p>\n<p>This is where autofixtures will help!</p>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<ul>\n<li>We require and support Django 1.4 to 1.9</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>You must make the <tt>autofixture</tt> package available on your python path.\nEither drop it into your project directory or install it from the python\npackage index with <tt>pip install <span class=\"pre\">django-autofixture</span></tt>. You can also use\n<tt>easy_install <span class=\"pre\">django-autofixture</span></tt> if you don\u2019t have pip available.</p>\n<p>To use the management command you must add <tt>'autofixture'</tt> to the\n<tt>INSTALLED_APPS</tt> setting in your django settings file. You don\u2019t need to do\nthis if you want to use the <tt>autofixture</tt> package only as library.</p>\n</div>\n<div id=\"management-command\">\n<h2>Management command</h2>\n<p>The <tt>loadtestdata</tt> accepts the following syntax:</p>\n<pre>python manage.py loadtestdata [options] app.Model:# [app.Model:# ...]\n</pre>\n<p>It\u2019s nearly self explanatory. Supply names of models, prefixed with its app\nname. After that, place a colon and tell the command how many objects you want\nto create. Here is an example of how to create three categories and twenty\nentries for your blogging app:</p>\n<pre>python manage.py loadtestdata blog.Category:3 blog.Entry:20\n</pre>\n<p>Voila! You have ready-to-use testing data populated to your database. The\nmodel fields are filled with data by producing randomly generated values\ndepending on the type of the field. E.g. text fields are filled with lorem\nipsum dummies, date fields are populated with random dates from the last\nyear etc.</p>\n<p>There are a few command line options available. Mainly to control the\nbehavior of related fields. If foreingkey or many to many fields should be\npopulated with existing data or if the related models are also generated on\nthe fly. Please have a look at the help page of the command for more\ninformation:</p>\n<pre>python manage.py help loadtestdata\n</pre>\n</div>\n<div id=\"using-autofixtures-as-a-tool-for-unittests\">\n<h2>Using autofixtures as a tool for unittests</h2>\n<p>Testing the behavior of complex models has always bugged me. Sometimes models\nhave many restrictions or many related objects which they depend on. One\nsolution would be to use traditional fixtures dumped from your production\ndatabase. But while in development when database schemes are changing\nfrequently, it can be time consuming and sometimes difficult to deep track of\nchanges and what each dump contains.</p>\n<p>Autofixtures to the rescue!</p>\n<p>Let\u2019s start with the basics. We create an <tt>AutoFixture</tt> instance for the\n<tt>Entry</tt> model and tell it to create ten model instances:</p>\n<pre>&gt;&gt;&gt; from autofixture import AutoFixture\n&gt;&gt;&gt; fixture = AutoFixture(Entry)\n&gt;&gt;&gt; entries = fixture.create(10)\n</pre>\n<p>Here are further examples for newer developers.</p>\n<p>I have a <tt>Listing</tt> model and I want it populated with 10 objects.</p>\n<pre>&gt;&gt;&gt; from autofixture import AutoFixture\n&gt;&gt;&gt; fixture = AutoFixture(Listing)\n&gt;&gt;&gt; entries = fixture.create(10)\n</pre>\n<p>Here I\u2019ve added field values which allow you to default a field to a certain\nvalue rather than the random entries supplied by <em>autofixture</em>.</p>\n<p>Generic Example including field_values:</p>\n<pre>from &lt;yourapp&gt;.models import &lt;your model&gt;\nfixture = AutoFixture(&lt;your model&gt;, field_values={'&lt;your field name&gt;':&lt;value&gt;})\n</pre>\n<p>Specific example:</p>\n<pre>from main.models import Listing\nfixture = AutoFixture(Listing, field_values={'needed_players': randint(2,10)})\nentries=fixture.create(30)\n</pre>\n<p>In the above, I wanted the <tt>'needed_players'</tt> (in the Session model) to have\nonly numbers between 2 and 10, but I could have put <tt>{'needed_players': 5}</tt>\nif I had wanted all <tt>'needed_players'</tt> instances to be <tt>5</tt>.</p>\n<hr class=\"docutils\">\n<p>Now you can play around and test your blog entries. By default, dependencies\nof foreignkeys and many to many relations are populated by randomly selecting\nan already existing object of the related model. But, what if you don\u2019t have\none yet?  You can provide the <tt>generate_fk</tt> attribute which allows the\nautofixture instance to follow foreignkeys by generating new related models:</p>\n<pre>fixture = AutoFixture(Entry, generate_fk=True)\n</pre>\n<p>This generates new instances for <em>all</em> foreignkey fields of <tt>Entry</tt>. Unless\nthe model has a foreign key reference to itself, wherein the field will be set\nto None if allowed or raise a <tt>CreateInstanceError</tt>. This is to prevent max\nrecursion depth errors. It\u2019s possible to limit this behaviour to single\nfields:</p>\n<pre>fixture = AutoFixture(Entry, generate_fk=['author'])\n</pre>\n<p>This will only create new authors automatically and doesn\u2019t touch other\ntables. The same is possible with many to many fields. But you need to\nadditionally specify how many objects should be created for the m2m relation:</p>\n<pre>fixture = AutoFixture(Entry, generate_m2m={'categories': (1,3)})\n</pre>\n<p>All created entry models get one to three new categories assigned.</p>\n<div id=\"setting-custom-values-for-fields\">\n<h3>Setting custom values for fields</h3>\n<p>As shown the the examples above, it\u2019s often necessary to have a specific field\ncontain a specific value. This is easily achieved with the <tt>field_values</tt>\nattribute of <tt>AutoFixture</tt>:</p>\n<pre>fixture = AutoFixture(Entry,\n    field_values={'pub_date': datetime(2010, 2, 1)})\n</pre>\n</div>\n<div id=\"limiting-the-set-of-models-assigned-to-a-foreignkey-field\">\n<h3>Limiting the set of models assigned to a ForeignKey field</h3>\n<p>You could, for example, limit the Users assigned to a foreignkey field to only\nnon-staff Users. Or create Entries for all Blogs not belonging to Yoko Ono.\nUse the same construction as <a href=\"http://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.ForeignKey.limit_choices_to\" rel=\"nofollow\">ForeignKey.limit_choices_to</a> attribute:</p>\n<pre>from autofixture import AutoFixture, generators\nfixture = AutoFixture(Entry, field_values={\n    'blog': generators.InstanceSelector(\n        Blog,\n        limit_choices_to={'name__ne':\"Yoko Ono's blog\"})\n})\n</pre>\n</div>\n</div>\n<div id=\"custom-autofixtures\">\n<h2>Custom autofixtures</h2>\n<p>To have custom autofixtures for your model, you can easily subclass\n<tt>AutoFixture</tt> somewhere (e.g. in myapp/autofixtures.py)</p>\n<pre>from models import MyModel\nfrom autofixture import generators, register, AutoFixture\n\nclass MyModelAutoFixture(AutoFixture):\n    field_values = {\n        'name': generators.StaticGenerator('this_is_my_static_name'),\n    }\n\nregister(MyModel, MyModelAutoFixture)\n</pre>\n<p>Then, <tt>loadtestdata</tt> will automatically use your custom fixtures.</p>\n<pre>python manage.py loadtestdata app.MyModel:10\n</pre>\n<p>You can load all <tt>autofixtures.py</tt> files of your installed apps\nautomatically like you can do with the admin autodiscover. Do so by running\n<tt>autofixture.autodiscover()</tt> somewhere in the code, preferably in the\n<tt>urls.py</tt>.</p>\n</div>\n<div id=\"more\">\n<h2>More</h2>\n<p>There is so much more to explore which might be useful to you and your\nprojects:</p>\n<ul>\n<li>There are ways to register custom <tt>AutoFixture</tt> subclasses with models\nthat are automatically used when calling <tt>loadtestdata</tt> on the model.</li>\n<li>More control for related models, even with relations of related models\u2026\n(e.g. by using <tt><span class=\"pre\">generate_fk=['author',</span> 'author__user']</tt>)</li>\n<li>Custom constraints that are used to ensure that created models are\nvalid (e.g. <tt>unique</tt> and <tt>unique_together</tt> constraints, which are\nalready handled by default)</li>\n</ul>\n</div>\n<div id=\"contribute\">\n<h2>Contribute</h2>\n<p>You can find the latest development version on <a href=\"https://github.com/gregmuellegger/django-autofixture\" rel=\"nofollow\">github</a>. Get there and fork it,\nfile bugs or send me nice wishes.</p>\n<p>To start developing, make sure the test suite passes:</p>\n<pre>virtualenv .env\nsource .env/bin/activate\npip install -r requirements/tests.txt\npython setup.py test\n</pre>\n<p>Now go, do some coding.</p>\n<p>Feel free to drop me a message about critiques or feature requests. You can get\nin touch with me by <a href=\"mailto:gregor%40muellegger.de\">mail</a> or <a href=\"http://twitter.com/gregmuellegger\" rel=\"nofollow\">twitter</a>.</p>\n<p>Happy autofixturing!</p>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<div id=\"id1\">\n<h3>0.12.1</h3>\n<ul>\n<li><a href=\"https://github.com/gregmuellegger/django-autofixture/pull/85\" rel=\"nofollow\">#85</a>: Better examples in README. Thanks to Dan Hitt for the patch.</li>\n<li><a href=\"https://github.com/gregmuellegger/django-autofixture/pull/86\" rel=\"nofollow\">#86</a>: Less deprecation warnings when using django-autofixture on Python\n3.5. Thanks to Nick Timkovich for the patch.</li>\n<li><a href=\"https://github.com/gregmuellegger/django-autofixture/pull/87\" rel=\"nofollow\">#87</a>: Closing files properly, so you should see less <tt>ResourceWarnings</tt>\nwhile using django-autofixture. Thanks to Nick Timkovich for the patch.</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3>0.12.0</h3>\n<ul>\n<li><a href=\"https://github.com/gregmuellegger/django-autofixture/pull/81\" rel=\"nofollow\">#81</a>: Add support for UUID fields. Thanks to @jungornti for the patch.</li>\n<li><a href=\"https://github.com/gregmuellegger/django-autofixture/pull/77\" rel=\"nofollow\">#77</a>: Fixing a very rare crash in cases when a generated email in the\n<tt>UserFixture</tt> already exists. Thanks to Tien Nguyen for the patch.</li>\n</ul>\n</div>\n<div id=\"id8\">\n<h3>0.11.0</h3>\n<ul>\n<li><a href=\"https://github.com/gregmuellegger/django-autofixture/pull/75\" rel=\"nofollow\">#75</a>: Support for Django 1.9. Thanks to Adam Dobrawy for the patch.</li>\n<li><a href=\"https://github.com/gregmuellegger/django-autofixture/pull/67\" rel=\"nofollow\">#67</a>: If many to many relations are created in a autofixture, we now make sure\nthat a registered autofixture is used for this if there is any. Thanks to\nAndrew Lewisohn for the patch.</li>\n</ul>\n</div>\n<div id=\"id11\">\n<h3>0.10.1</h3>\n<ul>\n<li>Fixing unique constraint checks for multiple <tt>None</tt> values. Thanks to\nAndrew Lewisohn for the patch. See <a href=\"https://github.com/gregmuellegger/django-autofixture/pull/66\" rel=\"nofollow\">#66</a>.</li>\n</ul>\n</div>\n<div id=\"id13\">\n<h3>0.10.0</h3>\n<ul>\n<li>Supporting Django 1.7 style app configs in <tt>settings.INSTALLED_APPS</tt>\nwhen auto-importing autofixture definitions with\n<tt>autofixture.autodiscover</tt>.</li>\n<li>Adding <tt>autofixture.generators.PositiveDecimalGenerator</tt>.</li>\n</ul>\n</div>\n<div id=\"id14\">\n<h3>0.9.2</h3>\n<ul>\n<li>Fixed <tt>UserFixture</tt> that generated usernames with more than 30 characters.</li>\n</ul>\n</div>\n<div id=\"id15\">\n<h3>0.9.1</h3>\n<ul>\n<li>Fixed unique constraint for models that have multiple unique_togethers set.</li>\n</ul>\n</div>\n<div id=\"id16\">\n<h3>0.9</h3>\n<ul>\n<li>Make <tt>ImageGenerator</tt> consider the given file storage. Thanks to Andrew\nPashkin for the patch.</li>\n<li>Fixing check for unique constraint during data generation if the field\nallows to be nullable. Thanks for Andrew Pashkin for the report and fix.</li>\n</ul>\n</div>\n<div id=\"id17\">\n<h3>0.8.0</h3>\n<ul>\n<li>Adding support for django\u2019s <tt>ImageField</tt>. Thanks to Visgean Skeloru for\nthe patch.</li>\n</ul>\n</div>\n<div id=\"id18\">\n<h3>0.7.0</h3>\n<ul>\n<li>Adding <tt>AutoFixture.pre_process_instance</tt> method.</li>\n<li>Allow arbitrary keyword arguments for <tt>AutoFixture.create</tt> method.</li>\n<li>Fixing <tt>autofixture.unregister</tt> function.</li>\n<li>Fixing <tt>UserFixture.post_process_instance</tt>.</li>\n</ul>\n</div>\n<div id=\"id19\">\n<h3>0.6.3</h3>\n<ul>\n<li>Fixing long stated issue with GenericRelation fields. Thanks to StillNewb\nfor the patch.</li>\n</ul>\n</div>\n<div id=\"id20\">\n<h3>0.6.2</h3>\n<ul>\n<li>Supporting Django 1.6.</li>\n</ul>\n</div>\n<div id=\"id21\">\n<h3>0.6.1</h3>\n<ul>\n<li>Fixing issue with models that have a selfreferencing ForeignKey field.\nThanks to Josh Fyne for the patch.</li>\n</ul>\n</div>\n<div id=\"id22\">\n<h3>0.6.0</h3>\n<ul>\n<li>Adding <tt>generators.WeightedGenerator</tt> for propabilistic selection of\nvalues. Thanks to Jonathan Tien for the idea and patch.</li>\n<li>Supporting model inheritance. Thanks to Josh Fyne for the patch.</li>\n</ul>\n</div>\n<div id=\"id23\">\n<h3>0.5.0</h3>\n<ul>\n<li>Adding <tt>FirstNameGenerator</tt> and <tt>LastNameGenerator</tt>. Thanks to Jonathan\nTien for the initial patch.</li>\n<li>Registered Autofixtures are used for models that are created for foreignkeys\nand many to many relations. Thanks to Theo Spears for the report.</li>\n</ul>\n</div>\n<div id=\"id24\">\n<h3>0.4.0</h3>\n<ul>\n<li>Python 3 support! Though we had to drop Python 2.5 support. If you cannot\nupgrade to Python 2.6 by yet, please consider using the 0.3.x versions of\ndjango-autofixture.\nBy the way: by Python 3 support, I mean, that the test suite is running\nwithout any errors. I have not tested yet the library in production for\nPython 3. So please test and submit bug reports if you encounter any.</li>\n</ul>\n</div>\n<div id=\"id25\">\n<h3>0.3.2</h3>\n<ul>\n<li><tt>DateTimeField</tt> receive timezone aware datetime objects now. Thanks to\nScott Woodall for the report and patch.</li>\n<li>Adding <tt>static_domain</tt> parameter to <tt>EmailGenerator</tt> to allow the\nproduction of emails that will always have the same domain. Thanks to\nmvdwaeter for the initial patch.</li>\n</ul>\n</div>\n<div id=\"id26\">\n<h3>0.3.1</h3>\n<ul>\n<li><tt>field_values</tt> were not picked up if there was a default value assigned to\nthe field. Thanks to sirex for the report.</li>\n</ul>\n</div>\n<div id=\"id27\">\n<h3>0.3.0</h3>\n<ul>\n<li>Adding better support for subclassing <tt>AutoFixture</tt> through merging of\nnested <tt>Values</tt> classes.</li>\n<li>Renamed attribute and argument <tt>none_chance</tt> to better matching name <tt>empty_p</tt> for generators\nand <tt>none_p</tt> for <tt>AutoFixture</tt>.</li>\n<li>Fixed some issues with management command options. Thanks Mikko Hellsing for\nhis hard work.</li>\n<li>Fixed issues in unregister(). Thanks Mikko Hellsing for the report.</li>\n<li>Adding support for <tt>FloatField</tt>. Thanks to Jyr Gaxiola for the report.</li>\n</ul>\n</div>\n<div id=\"id28\">\n<h3>0.2.5</h3>\n<ul>\n<li>Fixing issue with <tt><span class=\"pre\">--generate-fk</span></tt> option in management command. Thanks\nMikko Hellsing for the <a href=\"http://github.com/gregmuellegger/django-autofixture/issues/issue/1/\" rel=\"nofollow\">report and fix</a>.</li>\n</ul>\n</div>\n<div id=\"id29\">\n<h3>0.2.4</h3>\n<ul>\n<li>Using <tt>Autofixture.Values</tt> for defining initial values in <tt>Autofixture</tt>\nsubclasses.</li>\n<li>Making autodiscover more robust. Don\u2019t break if some module can\u2019t be\nimported or throws any other exception.</li>\n</ul>\n</div>\n<div id=\"id30\">\n<h3>0.2.3</h3>\n<ul>\n<li>Fixing bug when a <tt>CharField</tt> with <tt>max_length</tt> smaller than 15 is used.</li>\n<li><tt>AutoFixture.field_values</tt> accepts callables as values.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2052969, "releases": {"0.10.0": [{"comment_text": "", "digests": {"md5": "e3a888b02420b5b2aa7c48ec480a6b19", "sha256": "32ab97852362b394ec8fd6c957481ba4f515a4451e81966b04e7e65216ec6cf7"}, "downloads": -1, "filename": "django-autofixture-0.10.0.tar.gz", "has_sig": false, "md5_digest": "e3a888b02420b5b2aa7c48ec480a6b19", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28317, "upload_time": "2015-04-09T13:29:39", "upload_time_iso_8601": "2015-04-09T13:29:39.296419Z", "url": "https://files.pythonhosted.org/packages/93/61/471e2fcee9774384948d966a8f2cf80818d168a4886fbeecd23eae400867/django-autofixture-0.10.0.tar.gz", "yanked": false}], "0.10.1": [{"comment_text": "", "digests": {"md5": "03faf9926a9769feb425ebf593c031f2", "sha256": "a5b71ad4b20a9fa5b6921f14452f8d189504ccbf2241a95356d40c325cd47218"}, "downloads": -1, "filename": "django-autofixture-0.10.1.tar.gz", "has_sig": false, "md5_digest": "03faf9926a9769feb425ebf593c031f2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30097, "upload_time": "2015-06-19T08:28:17", "upload_time_iso_8601": "2015-06-19T08:28:17.714325Z", "url": "https://files.pythonhosted.org/packages/db/b2/5e5408a4fdcffe36f8bd5af7ca7eda40302e0b68ef1c942b318194f8146d/django-autofixture-0.10.1.tar.gz", "yanked": false}], "0.11.0": [{"comment_text": "", "digests": {"md5": "202437048f60a17a707c366512fda52f", "sha256": "8ac301ecf7c80c5dca68d472a73f017403dc6f0292cc314248540024df82b6da"}, "downloads": -1, "filename": "django-autofixture-0.11.0.tar.gz", "has_sig": false, "md5_digest": "202437048f60a17a707c366512fda52f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28983, "upload_time": "2015-11-25T21:37:37", "upload_time_iso_8601": "2015-11-25T21:37:37.480575Z", "url": "https://files.pythonhosted.org/packages/3a/67/2bb4ae31fc0ea16eda7e5ad1016c089404a3e387c6f1589fe0e66d19dab2/django-autofixture-0.11.0.tar.gz", "yanked": false}], "0.12.0": [{"comment_text": "", "digests": {"md5": "db4db6bd3e36572511b6d504f18af1df", "sha256": "7550a8d2367e1876c8317bc862f4fc0fa9360fa1bf08cefbe97a58a561085a63"}, "downloads": -1, "filename": "django-autofixture-0.12.0.tar.gz", "has_sig": false, "md5_digest": "db4db6bd3e36572511b6d504f18af1df", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29149, "upload_time": "2016-02-01T09:10:46", "upload_time_iso_8601": "2016-02-01T09:10:46.973320Z", "url": "https://files.pythonhosted.org/packages/92/20/d568d2936e369440d4d7027734aab121a7d7af96a982edcaf8c537593cd7/django-autofixture-0.12.0.tar.gz", "yanked": false}], "0.12.1": [{"comment_text": "", "digests": {"md5": "232f8fc5f18081796cfe45c3a40bc159", "sha256": "32588b80814cdff3a8aab7cf3859fc9330d38abe37a9cc16e53d24dd1b1fcd86"}, "downloads": -1, "filename": "django-autofixture-0.12.1.tar.gz", "has_sig": false, "md5_digest": "232f8fc5f18081796cfe45c3a40bc159", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29767, "upload_time": "2016-04-08T07:46:35", "upload_time_iso_8601": "2016-04-08T07:46:35.623832Z", "url": "https://files.pythonhosted.org/packages/29/49/34d6022891fdb26ef42500b748321ef76a05e99ea6d51881c4aeda29275f/django-autofixture-0.12.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "26a64a327f2c5e7e0b2ef04a644b08dd", "sha256": "dfc6688d5ac4d4c7acdedb5192ee6f2e208237ebe054680faf2ba049febe7008"}, "downloads": -1, "filename": "django-autofixture-0.2.0.tar.gz", "has_sig": false, "md5_digest": "26a64a327f2c5e7e0b2ef04a644b08dd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20285, "upload_time": "2010-03-06T02:13:19", "upload_time_iso_8601": "2010-03-06T02:13:19.942163Z", "url": "https://files.pythonhosted.org/packages/33/b0/88e0878c6b9f37c7386d0872f2a7c1e9eeb3ef09ba016ad4af08c90f91b0/django-autofixture-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "c933d61fddb0df2dc30a0fe4470244d6", "sha256": "ee5040d34f6d941515a69cc59c995bf89de855ad5f03b9a3439e71aa3d61c2c8"}, "downloads": -1, "filename": "django-autofixture-0.2.1.tar.gz", "has_sig": false, "md5_digest": "c933d61fddb0df2dc30a0fe4470244d6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20469, "upload_time": "2010-03-06T19:05:21", "upload_time_iso_8601": "2010-03-06T19:05:21.262664Z", "url": "https://files.pythonhosted.org/packages/da/0a/fce2eb8f333bd652a79e9476df60202a9007250f72037d95483ada2266cc/django-autofixture-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "667029a83a7d3ccd7bf946080b888a05", "sha256": "47a4f9042081517631192f9cfb9858d28e58f04164b20796d1e243938d7ad03e"}, "downloads": -1, "filename": "django-autofixture-0.2.2.tar.gz", "has_sig": false, "md5_digest": "667029a83a7d3ccd7bf946080b888a05", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20485, "upload_time": "2010-03-08T11:45:57", "upload_time_iso_8601": "2010-03-08T11:45:57.716900Z", "url": "https://files.pythonhosted.org/packages/e1/72/0c55da7568b843953d17110af2ec83f6afb3b0f3e1ea4cacaaabc0611a24/django-autofixture-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "bcaabd6e3cab1fe8bb88041abc4b956b", "sha256": "31921057dec6ee1090731a7ae65beb1ccd446356b2b993f439334dfcb4f3efcc"}, "downloads": -1, "filename": "django-autofixture-0.2.3.tar.gz", "has_sig": false, "md5_digest": "bcaabd6e3cab1fe8bb88041abc4b956b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23376, "upload_time": "2010-06-09T11:49:02", "upload_time_iso_8601": "2010-06-09T11:49:02.591141Z", "url": "https://files.pythonhosted.org/packages/30/9b/08be5f5c0422288ce7ba0e5ef2ca45b927f468f5bdd1381de24a45a9ff51/django-autofixture-0.2.3.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "36f9fbb0f8675766c49d8e919c39dd39", "sha256": "b6f34ba2662a8f6eb40dddc2fd011be0004a476efde890ecfe58c5fce9ea468f"}, "downloads": -1, "filename": "django-autofixture-0.2.4.tar.gz", "has_sig": false, "md5_digest": "36f9fbb0f8675766c49d8e919c39dd39", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20797, "upload_time": "2010-09-02T16:35:00", "upload_time_iso_8601": "2010-09-02T16:35:00.346470Z", "url": "https://files.pythonhosted.org/packages/0a/28/0329e3ebe34a17a750d21f3ef8c1e845734dee0c281001fe3fc9a2291b59/django-autofixture-0.2.4.tar.gz", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "85ddc980dc4faa590ec1bafec33411f6", "sha256": "758d83a1b5d79521e47ff37bf05b666c27fbfef2675d874f4de9b797aedfc9fe"}, "downloads": -1, "filename": "django-autofixture-0.2.5.tar.gz", "has_sig": false, "md5_digest": "85ddc980dc4faa590ec1bafec33411f6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20989, "upload_time": "2010-10-13T13:48:00", "upload_time_iso_8601": "2010-10-13T13:48:00.221357Z", "url": "https://files.pythonhosted.org/packages/a3/3f/0daa90311374c8ed04be75da13d210cce84784e5278495135317e279a06f/django-autofixture-0.2.5.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "b095a51ae56eb4be41993ace00f1b4d0", "sha256": "7b766182e0b265130380a2da890a4d93c141cfb764d1a604be467bf3681e426d"}, "downloads": -1, "filename": "django-autofixture-0.3.0.tar.gz", "has_sig": false, "md5_digest": "b095a51ae56eb4be41993ace00f1b4d0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20086, "upload_time": "2013-02-14T22:26:59", "upload_time_iso_8601": "2013-02-14T22:26:59.442311Z", "url": "https://files.pythonhosted.org/packages/15/fa/d69799eeee0a200c08eb3efcfdc85ddd7057ecd1c48d35b4f811c5131da3/django-autofixture-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "97a4f597f45f369535eb9a6eaaf6cbaa", "sha256": "9d8373c1cf483c116948e1e6c8a2df3fa88c9f9972c358c363342fcc8b97be7b"}, "downloads": -1, "filename": "django-autofixture-0.3.1.tar.gz", "has_sig": false, "md5_digest": "97a4f597f45f369535eb9a6eaaf6cbaa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20209, "upload_time": "2013-05-09T14:02:45", "upload_time_iso_8601": "2013-05-09T14:02:45.057800Z", "url": "https://files.pythonhosted.org/packages/b8/5b/589d93aad648cb04c5e1984cea685b4809ef2308e82cdc776c6a5e2123e0/django-autofixture-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "2318ec37cdd0cf2143645e1221d1438b", "sha256": "8a0c3da329f7d880f9acde9c6bcdfcae54928ba315a26069c534fca7fe4b3183"}, "downloads": -1, "filename": "django-autofixture-0.3.2.tar.gz", "has_sig": false, "md5_digest": "2318ec37cdd0cf2143645e1221d1438b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20903, "upload_time": "2013-10-01T20:08:37", "upload_time_iso_8601": "2013-10-01T20:08:37.065141Z", "url": "https://files.pythonhosted.org/packages/93/dd/edf6c8da79251464eadb0e2115d900cc7fc12bf32bc3d6af75f6b71a5aba/django-autofixture-0.3.2.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "65d3510d58794d3bb2a8b1fdc8849463", "sha256": "8a79969e539b61a0a3b312742bea359f0728af09cc82c2f7fbf87e80cac5ab8d"}, "downloads": -1, "filename": "django-autofixture-0.4.0.tar.gz", "has_sig": false, "md5_digest": "65d3510d58794d3bb2a8b1fdc8849463", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21196, "upload_time": "2013-10-01T20:13:37", "upload_time_iso_8601": "2013-10-01T20:13:37.274033Z", "url": "https://files.pythonhosted.org/packages/42/8d/44f7d9c1e6df47641ac7506eff07b1cc2ca129d927154f657be99f732abb/django-autofixture-0.4.0.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "428a36ca2c48b181f3fcb15ab5317bf1", "sha256": "5fa3f8c6bfc3f76d068ec0e8fa24e9ab8f8bf2baa72c3116e16732312d9bdf79"}, "downloads": -1, "filename": "django-autofixture-0.5.0.tar.gz", "has_sig": false, "md5_digest": "428a36ca2c48b181f3fcb15ab5317bf1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22209, "upload_time": "2013-10-09T12:35:53", "upload_time_iso_8601": "2013-10-09T12:35:53.134428Z", "url": "https://files.pythonhosted.org/packages/e8/d8/68c7a75965ad6af3367f703b6e99b12dbf1ff1b0000141e35957e0d5f00a/django-autofixture-0.5.0.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "101fca7cc07a33739b7e80b63c308030", "sha256": "144a7c3ad0fc7bec16bcaaf230251f9a06d5ff1ddac71c12874facdf2b27bc5b"}, "downloads": -1, "filename": "django-autofixture-0.6.0.tar.gz", "has_sig": false, "md5_digest": "101fca7cc07a33739b7e80b63c308030", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22530, "upload_time": "2013-10-30T21:21:59", "upload_time_iso_8601": "2013-10-30T21:21:59.900818Z", "url": "https://files.pythonhosted.org/packages/41/11/2d887125ebce8b2b5dbbdc211ffb1bb0672f54e9e8d7ce52f5a0f060fc3e/django-autofixture-0.6.0.tar.gz", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "0e3f79e5e8bc690c8373a65db279e121", "sha256": "8ff37c9a449a78f7c30dd276b1cac60650b06a4f6450bef4855d356969f58cbb"}, "downloads": -1, "filename": "django-autofixture-0.6.1.tar.gz", "has_sig": false, "md5_digest": "0e3f79e5e8bc690c8373a65db279e121", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23172, "upload_time": "2013-10-31T15:38:08", "upload_time_iso_8601": "2013-10-31T15:38:08.416878Z", "url": "https://files.pythonhosted.org/packages/86/e7/8494f34999a7a82c48fdfc97bd23d6ed174310cf5a88d246c0fe85790885/django-autofixture-0.6.1.tar.gz", "yanked": false}], "0.6.2": [{"comment_text": "", "digests": {"md5": "3ebe61cf36007aa2c65490e3ae63067d", "sha256": "4d8080d457eedff48147e516cf781274a25e592efda47ce3d4ac91f1e8d4fe73"}, "downloads": -1, "filename": "django-autofixture-0.6.2.tar.gz", "has_sig": false, "md5_digest": "3ebe61cf36007aa2c65490e3ae63067d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23224, "upload_time": "2013-11-12T20:50:19", "upload_time_iso_8601": "2013-11-12T20:50:19.244778Z", "url": "https://files.pythonhosted.org/packages/c6/c0/6c2cde8c2b374dd78dd861c9d679bdea2489bcce6d6347e2bdaf090d29f1/django-autofixture-0.6.2.tar.gz", "yanked": false}], "0.6.3": [{"comment_text": "", "digests": {"md5": "252e7ac62c0c01d3a54059b392a1d588", "sha256": "7ccfd8a99f2096f2a41feed7ba9194fe62b77e01961b85ca1cd87a416950c4a0"}, "downloads": -1, "filename": "django-autofixture-0.6.3.tar.gz", "has_sig": false, "md5_digest": "252e7ac62c0c01d3a54059b392a1d588", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23568, "upload_time": "2013-12-10T15:31:11", "upload_time_iso_8601": "2013-12-10T15:31:11.049744Z", "url": "https://files.pythonhosted.org/packages/d1/63/5d75596233b05af2e665d37a56f7c1de37cbf0ce36883f91ce208326a0af/django-autofixture-0.6.3.tar.gz", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "48242931db6f122643d5225db622d013", "sha256": "2a777f06af322e1730b749b2682c2f751d036636a218f40fa0496c7678d543be"}, "downloads": -1, "filename": "django-autofixture-0.7.0.tar.gz", "has_sig": false, "md5_digest": "48242931db6f122643d5225db622d013", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24217, "upload_time": "2014-04-28T20:53:46", "upload_time_iso_8601": "2014-04-28T20:53:46.933217Z", "url": "https://files.pythonhosted.org/packages/3b/b2/83e1f40bbf4d246c35a9839248ebb75b4abe8644a44e27e67597e45fa210/django-autofixture-0.7.0.tar.gz", "yanked": false}], "0.8.0": [{"comment_text": "", "digests": {"md5": "ca3a73f773c7d0e928d095f15bf1bda4", "sha256": "65e6f4ca1dc0f02392c0a62e860cc92639ab33c3393d102ff007e1676c83ab1c"}, "downloads": -1, "filename": "django-autofixture-0.8.0.tar.gz", "has_sig": false, "md5_digest": "ca3a73f773c7d0e928d095f15bf1bda4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24804, "upload_time": "2014-05-08T21:38:02", "upload_time_iso_8601": "2014-05-08T21:38:02.436856Z", "url": "https://files.pythonhosted.org/packages/1d/36/f7273ef8b20d80091e57ba2ab952529e8f68dae1c6e7d64628820c1a0abb/django-autofixture-0.8.0.tar.gz", "yanked": false}], "0.9.0": [{"comment_text": "", "digests": {"md5": "74c171abda75194941333944bf80c05b", "sha256": "1ec4ded2fb336d3a4e401a57a360dfff753bfdf436aa451d2f55930386e121c1"}, "downloads": -1, "filename": "django-autofixture-0.9.0.tar.gz", "has_sig": false, "md5_digest": "74c171abda75194941333944bf80c05b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25942, "upload_time": "2014-07-22T23:12:49", "upload_time_iso_8601": "2014-07-22T23:12:49.023328Z", "url": "https://files.pythonhosted.org/packages/93/4b/cb48487ec7e80c93c729adbae0fe59aaf61bfca5aa8d45c1bbd5a907f90b/django-autofixture-0.9.0.tar.gz", "yanked": false}], "0.9.1": [{"comment_text": "", "digests": {"md5": "39d6f629da85513dc97938427907024f", "sha256": "6edf8ac58ab57be69d9306d6aa008c255986aaf287d4f88b4c72dbd312ea60b3"}, "downloads": -1, "filename": "django-autofixture-0.9.1.tar.gz", "has_sig": false, "md5_digest": "39d6f629da85513dc97938427907024f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25994, "upload_time": "2014-07-23T21:01:08", "upload_time_iso_8601": "2014-07-23T21:01:08.562161Z", "url": "https://files.pythonhosted.org/packages/a3/ad/1cc7c363263358a8b4e62a340f78f6adbe772ff49e8f76f9395eb954f987/django-autofixture-0.9.1.tar.gz", "yanked": false}], "0.9.2": [{"comment_text": "", "digests": {"md5": "16323fa41ad6e74a645b8e5dfe03c757", "sha256": "0a349779efaa4ffbadb47bf370f7f2febf455bfd57de06da6fab0a52d3d9acbe"}, "downloads": -1, "filename": "django-autofixture-0.9.2.tar.gz", "has_sig": false, "md5_digest": "16323fa41ad6e74a645b8e5dfe03c757", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27660, "upload_time": "2014-12-04T11:52:59", "upload_time_iso_8601": "2014-12-04T11:52:59.318200Z", "url": "https://files.pythonhosted.org/packages/21/a9/a469beda85850c9fab7f88dc92177a2eea25eca3639af83d98c3282dc0e9/django-autofixture-0.9.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "232f8fc5f18081796cfe45c3a40bc159", "sha256": "32588b80814cdff3a8aab7cf3859fc9330d38abe37a9cc16e53d24dd1b1fcd86"}, "downloads": -1, "filename": "django-autofixture-0.12.1.tar.gz", "has_sig": false, "md5_digest": "232f8fc5f18081796cfe45c3a40bc159", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29767, "upload_time": "2016-04-08T07:46:35", "upload_time_iso_8601": "2016-04-08T07:46:35.623832Z", "url": "https://files.pythonhosted.org/packages/29/49/34d6022891fdb26ef42500b748321ef76a05e99ea6d51881c4aeda29275f/django-autofixture-0.12.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:37:31 2020"}