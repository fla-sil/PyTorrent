{"info": {"author": "Bruno Messias; Thomas K. Peron", "author_email": "messias.physics@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Topic :: Scientific/Engineering :: Information Analysis", "Topic :: Scientific/Engineering :: Mathematics", "Topic :: Scientific/Engineering :: Physics"], "description": "# ![](docs/source/imgs/stdog.png) \n# Structure and Dynamics on Graphs (Beta)\n\nThe main goal of StDoG is to provide a package which can be used to study\ndynamical and structural properties (like spectra) on graphs with a large\nnumber of vertices. The modules of StDoG are being built by\ncombining codes written in *Tensorflow* + *CUDA* and *C++*.\n\n## 1 - Install\n\n```\npip install stdog\n```\n\n## 2 - Examples\n\n### 2.1 - Dynamics\n\n#### 2.1.1 - Kuramoto\n\n##### Tensorflow\n```python\nimport numpy as np\nimport igraph as ig\nfrom stdog.utils.misc import ig2sparse  #Function to convert igraph format to sparse matrix\n\n\nnum_couplings = 40\nN = 20480\n\nG = ig.Graph.Erdos_Renyi(N, 3/N)\nadj = ig2sparse(G)\n\nomegas = np.random.normal(size= N).astype(\"float32\")\ncouplings = np.linspace(0.0,4.,num_couplings)\nphases =  np.array([\n    np.random.uniform(-np.pi,np.pi,N)\n    for i_l in range(num_couplings)\n\n],dtype=np.float32)\n\n\nprecision =32\n\ndt = 0.01\nnum_temps = 50000\ntotal_time = dt*num_temps\ntotal_time_transient = total_time\ntransient = False\n```\n\n```python\nfrom stdog.dynamics.kuramoto import Heuns\n\nheuns_0 = Heuns(adj, phases, omegas, couplings, total_time, dt,         \n    device=\"/gpu:0\", # or /cpu:\n    precision=precision, transient=transient)\n\nheuns_0.run()\nheuns_0.transient = True\nheuns_0.total_time = total_time_transient\nheuns_0.run()\norder_parameter_list = heuns_0.order_parameter_list # (num_couplings, total_time//dt)\n```\n```python\nimport matplotlib.pyplot as plt\n\nr = np.mean(order_parameter_list, axis=1)\nstdr = np.std(order_parameter_list, axis=1)\n\nplt.ion()\nfig, ax1 = plt.subplots()\nax1.plot(couplings,r,'.-')\nax2 = ax1.twinx()\nax2.plot(couplings,stdr,'r.-')\nplt.show()\n```\n![](docs/imgs/heuns_tf.png)\n\n#### CUDA - Faster than Tensorflow implementation\n\nIf CUDA is available. You can install our another package,\n[stdogpkg/cukuramoto](https://github.com/stdogpkg/cukuramoto) (C)\n```\npip install cukuramoto\n```\n\n```python\nfrom stdog.dynamics.kuramoto.cuheuns import CUHeuns as cuHeuns\n\nheuns_0 = cuHeuns(adj, phases, omegas,  couplings,\n    total_time, dt, block_size = 1024, transient = False)\n\nheuns_0.run()\n\nheuns_0.transient = True\nheuns_0.total_time = total_time_transient\nheuns_0.run()\norder_parameter_list = heuns_0.order_parameter_list #\n```\n### 2.2 Spectral \n\n#### Spectral Density\n\nThe Kernel Polynomial Method [1] can\u00a0estimate the spectral density of large sparse Hermitan matrices with a computational cost almost linear. This method combines three key ingredients: the Chebyshev expansion + the stochastic trace estimator [2] + kernel smoothing.\n\n```python\nimport igraph as ig\nimport numpy as np\n\nN = 3000\nG = ig.Graph.Erdos_Renyi(N, 3/N)\n\nW = np.array(G.get_adjacency().data, dtype=np.float64)\nvals = np.linalg.eigvalsh(W).real\n```\n\n```python\nimport stdog.spectra as spectra\nfrom stdog.utils.misc import ig2sparse \n\nW = ig2sparse(G)\nnum_moments = 300\nnum_vecs = 200\nextra_points = 10\nek, rho = spectra.dos.kpm(W, num_moments, num_vecs, extra_points, device=\"/gpu:0\")\n```\n\n```python\nimport matplotlib.pyplot as plt\nplt.hist(vals, density=True, bins=100, alpha=.9, color=\"steelblue\")\nplt.scatter(ek, rho, c=\"tomato\", zorder=999, alpha=0.9, marker=\"d\")\nplt.ylim(0, 1)\nplt.show()\n```\n![kpm](docs/imgs/kpm_dos.png)\n#### Trace Functions through Stochastic Lanczos Quadrature (SLQ)[3]\n\n\n##### Computing custom trace functions\n\n```python\nfrom stdog.spectra.trace_function import slq\nimport tensorflow as tf\n\ndef trace_function(eig_vals):\n    return tf.exp(eig_vals)\n\nnum_vecs = 100\nnum_steps = 50\napproximated_estrada_index, _ = slq(L_sparse, num_vecs, num_steps,  trace_function, device=\"/gpu:0\")\nexact_estrada_index =  np.sum(np.exp(vals_laplacian))\napproximated_estrada_index, exact_estrada_index\n```\nThe above code returns\n\n```\n(3058.012, 3063.16457163222)\n```\n##### Entropy\n```python\nimport scipy\nimport scipy.sparse\nfrom stdog.spectra.trace_function import entropy as slq_entropy\n\ndef entropy(eig_vals):\n  s = 0.\n  for val in eig_vals:\n    if val > 0:\n      s += -val*np.log(val)\n  return s\n\nL = np.array(G.laplacian(normalized=True), dtype=np.float64)\nvals_laplacian = np.linalg.eigvalsh(L).real\n\nexact_entropy =  entropy(vals_laplacian)\n\nL_sparse = scipy.sparse.coo_matrix(L)\n    \nnum_vecs = 100\nnum_steps = 50\napproximated_entropy = slq_entropy(\n    L_sparse, num_vecs, num_steps, device=\"/cpu:0\")\n\napproximated_entropy, exact_entropy\n```\n```\n(-509.46283, -512.5283224633046)\n```\n\n## References\n\n1 -  Wang, L.W., 1994. Calculating the density of states and\noptical-absorption spectra of large quantum systems by the plane-wave moments\nmethod. Physical Review B, 49(15), p.10154.\n\n2 - Hutchinson, M.F., 1990. A stochastic estimator of the trace of the\ninfluence matrix for laplacian smoothing splines. Communications in\nStatistics-Simulation and Computation, 19(2), pp.433-450.\n\n3 - Ubaru, S., Chen, J., & Saad, Y. (2017). Fast Estimation of tr(f(A)) via Stochastic Lanczos Quadrature. \nSIAM Journal on Matrix Analysis and Applications, 38(4), 1075-1099.\n\n\n## 3 - How to cite\n\n[Thomas Peron](https://tkdmperon.github.io/), [Bruno Messias](http://brunomessias.com/), Ang\u00e9lica S. Mata, [Francisco A. Rodrigues](http://conteudo.icmc.usp.br/pessoas/francisco/), and [Yamir Moreno](http://cosnet.bifi.es/people/yamir-moreno/). On the onset of synchronization of Kuramoto oscillators in scale-free networks. [arXiv:1905.02256](https://arxiv.org/abs/1905.02256) (2019).\n\n## 4 - Acknowledgements\n\nThis work has been supported also by FAPESP grants  11/50761-2  and  2015/22308-2.   Research  carriedout using the computational resources of the Center forMathematical  Sciences  Applied  to  Industry  (CeMEAI)funded by FAPESP (grant 2013/07375-0).\n \n### Responsible authors\n\n[@devmessias](https://github.com/devmessias), [@tkdmperon](https://github.com/tkdmperon)", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/stdogpkg/stdog/archive/v1.0.4.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/stdogpkg/stdog", "keywords": "gpu,science,complex-networks,graphs,dynamics,tensorflow,kuramoto", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "stdog", "package_url": "https://pypi.org/project/stdog/", "platform": "", "project_url": "https://pypi.org/project/stdog/", "project_urls": {"Download": "https://github.com/stdogpkg/stdog/archive/v1.0.4.tar.gz", "Homepage": "https://github.com/stdogpkg/stdog"}, "release_url": "https://pypi.org/project/stdog/1.0.4/", "requires_dist": null, "requires_python": "", "summary": "Structure and Dynamics on Graphs", "version": "1.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b4225f417f2d1bf08de0a593c0846ce812c51139/646f63732f736f757263652f696d67732f7374646f672e706e67\"></h1>\n<h1>Structure and Dynamics on Graphs (Beta)</h1>\n<p>The main goal of StDoG is to provide a package which can be used to study\ndynamical and structural properties (like spectra) on graphs with a large\nnumber of vertices. The modules of StDoG are being built by\ncombining codes written in <em>Tensorflow</em> + <em>CUDA</em> and <em>C++</em>.</p>\n<h2>1 - Install</h2>\n<pre><code>pip install stdog\n</code></pre>\n<h2>2 - Examples</h2>\n<h3>2.1 - Dynamics</h3>\n<h4>2.1.1 - Kuramoto</h4>\n<h5>Tensorflow</h5>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">igraph</span> <span class=\"k\">as</span> <span class=\"nn\">ig</span>\n<span class=\"kn\">from</span> <span class=\"nn\">stdog.utils.misc</span> <span class=\"kn\">import</span> <span class=\"n\">ig2sparse</span>  <span class=\"c1\">#Function to convert igraph format to sparse matrix</span>\n\n\n<span class=\"n\">num_couplings</span> <span class=\"o\">=</span> <span class=\"mi\">40</span>\n<span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"mi\">20480</span>\n\n<span class=\"n\">G</span> <span class=\"o\">=</span> <span class=\"n\">ig</span><span class=\"o\">.</span><span class=\"n\">Graph</span><span class=\"o\">.</span><span class=\"n\">Erdos_Renyi</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"o\">/</span><span class=\"n\">N</span><span class=\"p\">)</span>\n<span class=\"n\">adj</span> <span class=\"o\">=</span> <span class=\"n\">ig2sparse</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"p\">)</span>\n\n<span class=\"n\">omegas</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">normal</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"o\">=</span> <span class=\"n\">N</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"s2\">\"float32\"</span><span class=\"p\">)</span>\n<span class=\"n\">couplings</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"p\">,</span><span class=\"mf\">4.</span><span class=\"p\">,</span><span class=\"n\">num_couplings</span><span class=\"p\">)</span>\n<span class=\"n\">phases</span> <span class=\"o\">=</span>  <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span>\n    <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">uniform</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">pi</span><span class=\"p\">,</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">pi</span><span class=\"p\">,</span><span class=\"n\">N</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">i_l</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">num_couplings</span><span class=\"p\">)</span>\n\n<span class=\"p\">],</span><span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">float32</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">precision</span> <span class=\"o\">=</span><span class=\"mi\">32</span>\n\n<span class=\"n\">dt</span> <span class=\"o\">=</span> <span class=\"mf\">0.01</span>\n<span class=\"n\">num_temps</span> <span class=\"o\">=</span> <span class=\"mi\">50000</span>\n<span class=\"n\">total_time</span> <span class=\"o\">=</span> <span class=\"n\">dt</span><span class=\"o\">*</span><span class=\"n\">num_temps</span>\n<span class=\"n\">total_time_transient</span> <span class=\"o\">=</span> <span class=\"n\">total_time</span>\n<span class=\"n\">transient</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n</pre>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">stdog.dynamics.kuramoto</span> <span class=\"kn\">import</span> <span class=\"n\">Heuns</span>\n\n<span class=\"n\">heuns_0</span> <span class=\"o\">=</span> <span class=\"n\">Heuns</span><span class=\"p\">(</span><span class=\"n\">adj</span><span class=\"p\">,</span> <span class=\"n\">phases</span><span class=\"p\">,</span> <span class=\"n\">omegas</span><span class=\"p\">,</span> <span class=\"n\">couplings</span><span class=\"p\">,</span> <span class=\"n\">total_time</span><span class=\"p\">,</span> <span class=\"n\">dt</span><span class=\"p\">,</span>         \n    <span class=\"n\">device</span><span class=\"o\">=</span><span class=\"s2\">\"/gpu:0\"</span><span class=\"p\">,</span> <span class=\"c1\"># or /cpu:</span>\n    <span class=\"n\">precision</span><span class=\"o\">=</span><span class=\"n\">precision</span><span class=\"p\">,</span> <span class=\"n\">transient</span><span class=\"o\">=</span><span class=\"n\">transient</span><span class=\"p\">)</span>\n\n<span class=\"n\">heuns_0</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n<span class=\"n\">heuns_0</span><span class=\"o\">.</span><span class=\"n\">transient</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n<span class=\"n\">heuns_0</span><span class=\"o\">.</span><span class=\"n\">total_time</span> <span class=\"o\">=</span> <span class=\"n\">total_time_transient</span>\n<span class=\"n\">heuns_0</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n<span class=\"n\">order_parameter_list</span> <span class=\"o\">=</span> <span class=\"n\">heuns_0</span><span class=\"o\">.</span><span class=\"n\">order_parameter_list</span> <span class=\"c1\"># (num_couplings, total_time//dt)</span>\n</pre>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n\n<span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">order_parameter_list</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">stdr</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">std</span><span class=\"p\">(</span><span class=\"n\">order_parameter_list</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">ion</span><span class=\"p\">()</span>\n<span class=\"n\">fig</span><span class=\"p\">,</span> <span class=\"n\">ax1</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplots</span><span class=\"p\">()</span>\n<span class=\"n\">ax1</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">couplings</span><span class=\"p\">,</span><span class=\"n\">r</span><span class=\"p\">,</span><span class=\"s1\">'.-'</span><span class=\"p\">)</span>\n<span class=\"n\">ax2</span> <span class=\"o\">=</span> <span class=\"n\">ax1</span><span class=\"o\">.</span><span class=\"n\">twinx</span><span class=\"p\">()</span>\n<span class=\"n\">ax2</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">couplings</span><span class=\"p\">,</span><span class=\"n\">stdr</span><span class=\"p\">,</span><span class=\"s1\">'r.-'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/185612cdc9e7c830235221912db28874e0d92eb9/646f63732f696d67732f6865756e735f74662e706e67\"></p>\n<h4>CUDA - Faster than Tensorflow implementation</h4>\n<p>If CUDA is available. You can install our another package,\n<a href=\"https://github.com/stdogpkg/cukuramoto\" rel=\"nofollow\">stdogpkg/cukuramoto</a> (C)</p>\n<pre><code>pip install cukuramoto\n</code></pre>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">stdog.dynamics.kuramoto.cuheuns</span> <span class=\"kn\">import</span> <span class=\"n\">CUHeuns</span> <span class=\"k\">as</span> <span class=\"n\">cuHeuns</span>\n\n<span class=\"n\">heuns_0</span> <span class=\"o\">=</span> <span class=\"n\">cuHeuns</span><span class=\"p\">(</span><span class=\"n\">adj</span><span class=\"p\">,</span> <span class=\"n\">phases</span><span class=\"p\">,</span> <span class=\"n\">omegas</span><span class=\"p\">,</span>  <span class=\"n\">couplings</span><span class=\"p\">,</span>\n    <span class=\"n\">total_time</span><span class=\"p\">,</span> <span class=\"n\">dt</span><span class=\"p\">,</span> <span class=\"n\">block_size</span> <span class=\"o\">=</span> <span class=\"mi\">1024</span><span class=\"p\">,</span> <span class=\"n\">transient</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n\n<span class=\"n\">heuns_0</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n\n<span class=\"n\">heuns_0</span><span class=\"o\">.</span><span class=\"n\">transient</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n<span class=\"n\">heuns_0</span><span class=\"o\">.</span><span class=\"n\">total_time</span> <span class=\"o\">=</span> <span class=\"n\">total_time_transient</span>\n<span class=\"n\">heuns_0</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n<span class=\"n\">order_parameter_list</span> <span class=\"o\">=</span> <span class=\"n\">heuns_0</span><span class=\"o\">.</span><span class=\"n\">order_parameter_list</span> <span class=\"c1\">#</span>\n</pre>\n<h3>2.2 Spectral</h3>\n<h4>Spectral Density</h4>\n<p>The Kernel Polynomial Method [1] can\u00a0estimate the spectral density of large sparse Hermitan matrices with a computational cost almost linear. This method combines three key ingredients: the Chebyshev expansion + the stochastic trace estimator [2] + kernel smoothing.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">igraph</span> <span class=\"k\">as</span> <span class=\"nn\">ig</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"mi\">3000</span>\n<span class=\"n\">G</span> <span class=\"o\">=</span> <span class=\"n\">ig</span><span class=\"o\">.</span><span class=\"n\">Graph</span><span class=\"o\">.</span><span class=\"n\">Erdos_Renyi</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"o\">/</span><span class=\"n\">N</span><span class=\"p\">)</span>\n\n<span class=\"n\">W</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"o\">.</span><span class=\"n\">get_adjacency</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">float64</span><span class=\"p\">)</span>\n<span class=\"n\">vals</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linalg</span><span class=\"o\">.</span><span class=\"n\">eigvalsh</span><span class=\"p\">(</span><span class=\"n\">W</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">real</span>\n</pre>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">stdog.spectra</span> <span class=\"k\">as</span> <span class=\"nn\">spectra</span>\n<span class=\"kn\">from</span> <span class=\"nn\">stdog.utils.misc</span> <span class=\"kn\">import</span> <span class=\"n\">ig2sparse</span> \n\n<span class=\"n\">W</span> <span class=\"o\">=</span> <span class=\"n\">ig2sparse</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"p\">)</span>\n<span class=\"n\">num_moments</span> <span class=\"o\">=</span> <span class=\"mi\">300</span>\n<span class=\"n\">num_vecs</span> <span class=\"o\">=</span> <span class=\"mi\">200</span>\n<span class=\"n\">extra_points</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n<span class=\"n\">ek</span><span class=\"p\">,</span> <span class=\"n\">rho</span> <span class=\"o\">=</span> <span class=\"n\">spectra</span><span class=\"o\">.</span><span class=\"n\">dos</span><span class=\"o\">.</span><span class=\"n\">kpm</span><span class=\"p\">(</span><span class=\"n\">W</span><span class=\"p\">,</span> <span class=\"n\">num_moments</span><span class=\"p\">,</span> <span class=\"n\">num_vecs</span><span class=\"p\">,</span> <span class=\"n\">extra_points</span><span class=\"p\">,</span> <span class=\"n\">device</span><span class=\"o\">=</span><span class=\"s2\">\"/gpu:0\"</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">hist</span><span class=\"p\">(</span><span class=\"n\">vals</span><span class=\"p\">,</span> <span class=\"n\">density</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">bins</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"o\">=.</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s2\">\"steelblue\"</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">scatter</span><span class=\"p\">(</span><span class=\"n\">ek</span><span class=\"p\">,</span> <span class=\"n\">rho</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s2\">\"tomato\"</span><span class=\"p\">,</span> <span class=\"n\">zorder</span><span class=\"o\">=</span><span class=\"mi\">999</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"o\">=</span><span class=\"mf\">0.9</span><span class=\"p\">,</span> <span class=\"n\">marker</span><span class=\"o\">=</span><span class=\"s2\">\"d\"</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">ylim</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n<p><img alt=\"kpm\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b42c72bd3b4662028796afabf37c25060e3628f2/646f63732f696d67732f6b706d5f646f732e706e67\"></p>\n<h4>Trace Functions through Stochastic Lanczos Quadrature (SLQ)[3]</h4>\n<h5>Computing custom trace functions</h5>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">stdog.spectra.trace_function</span> <span class=\"kn\">import</span> <span class=\"n\">slq</span>\n<span class=\"kn\">import</span> <span class=\"nn\">tensorflow</span> <span class=\"k\">as</span> <span class=\"nn\">tf</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">trace_function</span><span class=\"p\">(</span><span class=\"n\">eig_vals</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"n\">eig_vals</span><span class=\"p\">)</span>\n\n<span class=\"n\">num_vecs</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>\n<span class=\"n\">num_steps</span> <span class=\"o\">=</span> <span class=\"mi\">50</span>\n<span class=\"n\">approximated_estrada_index</span><span class=\"p\">,</span> <span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">slq</span><span class=\"p\">(</span><span class=\"n\">L_sparse</span><span class=\"p\">,</span> <span class=\"n\">num_vecs</span><span class=\"p\">,</span> <span class=\"n\">num_steps</span><span class=\"p\">,</span>  <span class=\"n\">trace_function</span><span class=\"p\">,</span> <span class=\"n\">device</span><span class=\"o\">=</span><span class=\"s2\">\"/gpu:0\"</span><span class=\"p\">)</span>\n<span class=\"n\">exact_estrada_index</span> <span class=\"o\">=</span>  <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"n\">vals_laplacian</span><span class=\"p\">))</span>\n<span class=\"n\">approximated_estrada_index</span><span class=\"p\">,</span> <span class=\"n\">exact_estrada_index</span>\n</pre>\n<p>The above code returns</p>\n<pre><code>(3058.012, 3063.16457163222)\n</code></pre>\n<h5>Entropy</h5>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">scipy</span>\n<span class=\"kn\">import</span> <span class=\"nn\">scipy.sparse</span>\n<span class=\"kn\">from</span> <span class=\"nn\">stdog.spectra.trace_function</span> <span class=\"kn\">import</span> <span class=\"n\">entropy</span> <span class=\"k\">as</span> <span class=\"n\">slq_entropy</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">entropy</span><span class=\"p\">(</span><span class=\"n\">eig_vals</span><span class=\"p\">):</span>\n  <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"mf\">0.</span>\n  <span class=\"k\">for</span> <span class=\"n\">val</span> <span class=\"ow\">in</span> <span class=\"n\">eig_vals</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"n\">val</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n      <span class=\"n\">s</span> <span class=\"o\">+=</span> <span class=\"o\">-</span><span class=\"n\">val</span><span class=\"o\">*</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">)</span>\n  <span class=\"k\">return</span> <span class=\"n\">s</span>\n\n<span class=\"n\">L</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"o\">.</span><span class=\"n\">laplacian</span><span class=\"p\">(</span><span class=\"n\">normalized</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">),</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">float64</span><span class=\"p\">)</span>\n<span class=\"n\">vals_laplacian</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linalg</span><span class=\"o\">.</span><span class=\"n\">eigvalsh</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">real</span>\n\n<span class=\"n\">exact_entropy</span> <span class=\"o\">=</span>  <span class=\"n\">entropy</span><span class=\"p\">(</span><span class=\"n\">vals_laplacian</span><span class=\"p\">)</span>\n\n<span class=\"n\">L_sparse</span> <span class=\"o\">=</span> <span class=\"n\">scipy</span><span class=\"o\">.</span><span class=\"n\">sparse</span><span class=\"o\">.</span><span class=\"n\">coo_matrix</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">)</span>\n    \n<span class=\"n\">num_vecs</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>\n<span class=\"n\">num_steps</span> <span class=\"o\">=</span> <span class=\"mi\">50</span>\n<span class=\"n\">approximated_entropy</span> <span class=\"o\">=</span> <span class=\"n\">slq_entropy</span><span class=\"p\">(</span>\n    <span class=\"n\">L_sparse</span><span class=\"p\">,</span> <span class=\"n\">num_vecs</span><span class=\"p\">,</span> <span class=\"n\">num_steps</span><span class=\"p\">,</span> <span class=\"n\">device</span><span class=\"o\">=</span><span class=\"s2\">\"/cpu:0\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">approximated_entropy</span><span class=\"p\">,</span> <span class=\"n\">exact_entropy</span>\n</pre>\n<pre><code>(-509.46283, -512.5283224633046)\n</code></pre>\n<h2>References</h2>\n<p>1 -  Wang, L.W., 1994. Calculating the density of states and\noptical-absorption spectra of large quantum systems by the plane-wave moments\nmethod. Physical Review B, 49(15), p.10154.</p>\n<p>2 - Hutchinson, M.F., 1990. A stochastic estimator of the trace of the\ninfluence matrix for laplacian smoothing splines. Communications in\nStatistics-Simulation and Computation, 19(2), pp.433-450.</p>\n<p>3 - Ubaru, S., Chen, J., &amp; Saad, Y. (2017). Fast Estimation of tr(f(A)) via Stochastic Lanczos Quadrature.\nSIAM Journal on Matrix Analysis and Applications, 38(4), 1075-1099.</p>\n<h2>3 - How to cite</h2>\n<p><a href=\"https://tkdmperon.github.io/\" rel=\"nofollow\">Thomas Peron</a>, <a href=\"http://brunomessias.com/\" rel=\"nofollow\">Bruno Messias</a>, Ang\u00e9lica S. Mata, <a href=\"http://conteudo.icmc.usp.br/pessoas/francisco/\" rel=\"nofollow\">Francisco A. Rodrigues</a>, and <a href=\"http://cosnet.bifi.es/people/yamir-moreno/\" rel=\"nofollow\">Yamir Moreno</a>. On the onset of synchronization of Kuramoto oscillators in scale-free networks. <a href=\"https://arxiv.org/abs/1905.02256\" rel=\"nofollow\">arXiv:1905.02256</a> (2019).</p>\n<h2>4 - Acknowledgements</h2>\n<p>This work has been supported also by FAPESP grants  11/50761-2  and  2015/22308-2.   Research  carriedout using the computational resources of the Center forMathematical  Sciences  Applied  to  Industry  (CeMEAI)funded by FAPESP (grant 2013/07375-0).</p>\n<h3>Responsible authors</h3>\n<p><a href=\"https://github.com/devmessias\" rel=\"nofollow\">@devmessias</a>, <a href=\"https://github.com/tkdmperon\" rel=\"nofollow\">@tkdmperon</a></p>\n\n          </div>"}, "last_serial": 5842052, "releases": {"1.0.1": [{"comment_text": "", "digests": {"md5": "21e670ae4803d9d51cc226531c026da2", "sha256": "f7f5506aba23403eeab296302b19413b4e7597211f36d6c7f9cfdf8bf7e28888"}, "downloads": -1, "filename": "stdog-1.0.1.tar.gz", "has_sig": false, "md5_digest": "21e670ae4803d9d51cc226531c026da2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7812, "upload_time": "2019-09-02T22:38:22", "upload_time_iso_8601": "2019-09-02T22:38:22.473813Z", "url": "https://files.pythonhosted.org/packages/d8/81/a50885522adc19d596920384354ce25e3a637a62501aee13b68973d7176c/stdog-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "a20aa01e4f16629b76f1a984cac938f0", "sha256": "3d72ce343d30886d6fb9cf52b9eb67997565580be0365072dbe7f27e4ab3116d"}, "downloads": -1, "filename": "stdog-1.0.2.tar.gz", "has_sig": false, "md5_digest": "a20aa01e4f16629b76f1a984cac938f0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8153, "upload_time": "2019-09-03T19:25:47", "upload_time_iso_8601": "2019-09-03T19:25:47.885803Z", "url": "https://files.pythonhosted.org/packages/c2/01/1e1a4ce7cd6134c15f7904c7ad6f355617b58b38ef1ee112624514b974d3/stdog-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "44bb5de6e8a5a63df3ad20c5955100b3", "sha256": "05f9727eba7b1116a46568dc97bb94f5ca12f8c65d341b4be0a9e5bb9884e39d"}, "downloads": -1, "filename": "stdog-1.0.3.tar.gz", "has_sig": false, "md5_digest": "44bb5de6e8a5a63df3ad20c5955100b3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12318, "upload_time": "2019-09-11T23:42:32", "upload_time_iso_8601": "2019-09-11T23:42:32.273627Z", "url": "https://files.pythonhosted.org/packages/ce/b0/c2a31688a2e9cfc3a3c5afdc0b81c98fc5b664599e7b21629c6ffb7f318b/stdog-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "6dca2e23cf209ae505326d9669788fdf", "sha256": "8cff1759ec437e8ec9ed4043c1fc6c874e8d2938d7234af8b5a9d4a72908cf21"}, "downloads": -1, "filename": "stdog-1.0.4.tar.gz", "has_sig": false, "md5_digest": "6dca2e23cf209ae505326d9669788fdf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35571, "upload_time": "2019-09-17T14:38:01", "upload_time_iso_8601": "2019-09-17T14:38:01.693677Z", "url": "https://files.pythonhosted.org/packages/88/38/62d757768272ebab45689f1ac2565694bf734eca29fb8893d5d35e412c13/stdog-1.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6dca2e23cf209ae505326d9669788fdf", "sha256": "8cff1759ec437e8ec9ed4043c1fc6c874e8d2938d7234af8b5a9d4a72908cf21"}, "downloads": -1, "filename": "stdog-1.0.4.tar.gz", "has_sig": false, "md5_digest": "6dca2e23cf209ae505326d9669788fdf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35571, "upload_time": "2019-09-17T14:38:01", "upload_time_iso_8601": "2019-09-17T14:38:01.693677Z", "url": "https://files.pythonhosted.org/packages/88/38/62d757768272ebab45689f1ac2565694bf734eca29fb8893d5d35e412c13/stdog-1.0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:02:15 2020"}