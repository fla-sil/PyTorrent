{"info": {"author": "eterna2", "author_email": "eterna2@hotmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "Natural Language :: English", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "# kfx\n\n[![PyPI version](https://badge.fury.io/py/kfx.svg)](https://badge.fury.io/py/kfx)\n[![Build Status](https://travis-ci.org/e2fyi/kfx.svg?branch=master)](https://travis-ci.org/e2fyi/kfx)\n[![Coverage Status](https://coveralls.io/repos/github/e2fyi/kfx/badge.svg?branch=master)](https://coveralls.io/github/e2fyi/kfx?branch=master)\n[![Documentation Status](https://readthedocs.org/projects/kfx/badge/?version=latest)](https://kfx.readthedocs.io/en/latest/?badge=latest)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n[![Downloads](https://pepy.tech/badge/kfx/month)](https://pepy.tech/project/kfx/month)\n\n`kfx` is a python package with the namespace `kfx`. Currently, it provides the\nfollowing sub-packages\n\n- `kfx.lib.dsl` - Extensions to the kubeflow pipeline dsl.\n\n- `kfx.lib.vis` - Data models and helpers to help generate the  `mlpipeline-metrics.json` and `mlpipeline-ui-metadata.json` required to render visualization in the kubeflow pipeline UI. See also https://www.kubeflow.org/docs/pipelines/sdk/pipelines-metrics/ and https://www.kubeflow.org/docs/pipelines/sdk/output-viewer/\n\n> - Documentation: [https://kfx.readthedocs.io](https://kfx.readthedocs.io).\n> - Repo: [https://github.com/e2fyi/kfx](https://github.com/e2fyi/kfx)\n\n> ### NOTE this is currently alpha\n>\n> There will likely to have breaking changes, and feel free to do a feature request\n>\n> ### Known issues\n>\n> - `kfx.vis.vega.vega_web_app` and `KfpArtifact` does not work well together (see example) because of CORs - the web app is hosted inside an iFrame which prevents it from accessing the `ml-pipeline-ui` API server.\n> - `kfx.vis.vega.vega_web_app` is only supported in the latest kubeflow pipeline UI (as inline is only supported after `0.2.5`)\n\n### Changelog\n\nRefer to [CHANGELOG.md](./CHANGELOG.md).\n\n## Quick start\n\nInstallation\n\n```bash\npip install kfx\n```\n\n## Usage\n\nExample: Using `ContainerOpTransform` to configure the internal k8s properties\nof kubeflow pipelines tasks.\n\n> `kfx.dsl.ContainerOpTransform` is a helper to modify the interal k8s properties\n> (e.g. resources, environment variables, etc) of kubeflow pipeline tasks.\n\n```python\nimport kfp.components\nimport kfp.dsl\nimport kfx.dsl\n\ntransforms = (\n    kfx.dsl.ContainerOpTransform()\n    .set_resources(cpu=\"500m\", memory=(\"1G\", \"4G\"))\n    .set_image_pull_policy(\"Always\")\n    .set_env_vars({\"ENV\": \"production\"})\n    .set_env_var_from_secret(\"AWS_ACCESS_KEY\", secret_name=\"aws\", secret_key=\"access_key\")\n    .set_annotations({\"iam.amazonaws.com/role\": \"some-arn\"})\n)\n\n\n@kfp.dsl.components.func_to_container_op\ndef echo(text: str) -> str:\n    print(text)\n    return text\n\n\n@kfp.dsl.pipeline(name=\"demo\")\ndef pipeline(text: str):\n    op1 = echo(text)\n    op2 = echo(\"%s-%s\" % text)\n\n    # u can apply the transform on op1 only\n    # op1.apply(transforms)\n\n    # or apply on all ops in the pipeline\n    kfp.dsl.get_pipeline_conf().add_op_transformer(transforms)\n\n```\n\nExample: Using `ArtifactLocationHelper` and `KfpArtifact` to determine the\nuri of your data artifact generated by the kubeflow pipeline task.\n\n> `kfx.dsl.ArtifactLocationHelper` is a helper to modify the kubeflow pipeline task\n> so that you can use `kfx.dsl.KfpArtifact` to represent the artifact generated\n> inside the task.\n\n```python\nimport kfp.components\nimport kfp.dsl\nimport kfx.dsl\n\n\n# creates the helper that has the argo configs (tells you how artifacts will be stored)\n# see https://github.com/argoproj/argo/blob/master/docs/workflow-controller-configmap.yaml\nhelper = kfx.dsl.ArtifactLocationHelper(\n    scheme=\"minio\", bucket=\"mlpipeline\", key_prefix=\"artifacts/\"\n)\n\n@kfp.components.func_to_container_op\ndef test_op(\n    mlpipeline_ui_metadata: OutputTextFile(str), markdown_data_file: OutputTextFile(str)\n):\n    \"A test kubeflow pipeline task.\"\n\n    import json\n\n    import kfx.dsl\n    import kfx.vis\n    import kfx.vis.vega\n\n    # `KfpArtifact` provides the reference to data artifact created\n    # inside this task\n    spec = {\n        \"$schema\": \"https://vega.github.io/schema/vega-lite/v4.json\",\n        \"description\": \"A simple bar chart\",\n        \"data\": {\n            \"values\": [\n                {\"a\": \"A\", \"b\": 28},\n                {\"a\": \"B\", \"b\": 55},\n                {\"a\": \"C\", \"b\": 43},\n                {\"a\": \"D\", \"b\": 91},\n                {\"a\": \"E\", \"b\": 81},\n                {\"a\": \"F\", \"b\": 53},\n                {\"a\": \"G\", \"b\": 19},\n                {\"a\": \"H\", \"b\": 87},\n                {\"a\": \"I\", \"b\": 52},\n            ]\n        },\n        \"mark\": \"bar\",\n        \"encoding\": {\n            \"x\": {\"field\": \"a\", \"type\": \"ordinal\"},\n            \"y\": {\"field\": \"b\", \"type\": \"quantitative\"},\n        },\n    }\n\n    # write the markdown to the `markdown-data` artifact\n    markdown_data_file.write(\"### hello world\")\n\n    # creates an ui metadata object\n    ui_metadata = kfx.vis.kfp_ui_metadata(\n        # Describes the vis to generate in the kubeflow pipeline UI.\n        [\n            # markdown vis from a markdown artifact.\n            # `KfpArtifact` provides the reference to data artifact created\n            # inside this task\n            kfx.vis.markdown(kfx.dsl.KfpArtifact(\"markdown_data_file\")),\n            # a vega web app from the vega data artifact.\n            kfx.vis.vega.vega_web_app(spec),\n        ]\n    )\n\n    # writes the ui metadata object as the `mlpipeline-ui-metadata` artifact\n    mlpipeline_ui_metadata.write(kfx.vis.asjson(ui_metadata))\n\n    # prints the uri to the markdown artifact\n    print(ui_metadata.outputs[0].source)\n\n\n@kfp.dsl.pipeline()\ndef test_pipeline():\n    \"A test kubeflow pipeline\"\n\n    op: kfp.dsl.ContainerOp = test_op()\n\n    # modify kfp operator with artifact location metadata through env vars\n    op.apply(helper.set_envs())\n\n```\n\nExample: Using `pydantic` data models to generate `mlpipeline-metrics.json` and\n`mlpipeline-ui-metadata.json`.\n\n(See also https://www.kubeflow.org/docs/pipelines/sdk/output-viewer/ and\nhttps://www.kubeflow.org/docs/pipelines/sdk/pipelines-metrics/).\n\n> `kfx.vis` has helper functions (with corresponding hints) to describe and\n> create `mlpipeline-metrics.json` and `mlpipeline-ui-metadata.json` files\n> (required by kubeflow pipeline UI to render any metrics or visualizations).\n\n```python\nimport functools\n\nimport kfp.components\n\n\n# install kfx\nkfx_component = functools.partial(kfp.components.func_to_container_op, packages_to_install=[\"kfx\"])\n\n\n@kfx_component\ndef some_op(\n    # mlpipeline_metrics is a path - i.e. open(mlpipeline_metrics, \"w\")\n    mlpipeline_metrics: kfp.components.OutputPath(str),\n    # mlpipeline_ui_metadata is a FileLike obj - i.e. mlpipeline_ui_metadata.write(\"something\")\n    mlpipeline_ui_metadata: kfp.components.OutputTextFile(str),\n):\n    \"kfp operator that provides metrics and metadata for visualizations.\"\n\n    # import inside kfp task\n    import kfx.vis\n\n    # output metrics to mlpipeline_metrics path\n    kfx.vis.kfp_metrics([\n        # render as percent\n        kfx.vis.kfp_metric(\"recall-score\", 0.9, percent=true),\n        # override metric format with custom value\n        kfx.vis.kfp_metric(name=\"percision-score\", value=0.8, metric_format=\"PERCENTAGE\"),\n        # render raw score\n        kfx.vis.kfp_metric(\"raw-score\", 123.45),\n    ]).write_to(mlpipeline_metrics)\n\n    # output visualization metadata to mlpipeline_ui_metadata obj\n    kfx.vis.kfp_ui_metadata(\n        [\n            # creates a confusion matrix vis\n            kfx.vis.confusion_matrix(\n                source=\"gs://your_project/your_bucket/your_cm_file\",\n                labels=[\"True\", \"False\"],\n            ),\n            # creates a markdown with inline source\n            kfx.vis.markdown(\n                \"# Inline Markdown: [A link](https://www.kubeflow.org/)\",\n                storage=\"inline\",\n            ),\n            # creates a markdown with a remote source\n            kfx.vis.markdown(\n                \"gs://your_project/your_bucket/your_markdown_file\",\n            ),\n            # creates a ROC curve with a remote source\n            kfx.vis.roc(\n                \"gs://your_project/your_bucket/your_roc_file\",\n            ),\n            # creates a Table with a remote source\n            kfx.vis.table(\n                \"gs://your_project/your_bucket/your_csv_file\",\n                header=[\"col1\", \"col2\"],\n            ),\n            # creates a tensorboard viewer\n            kfx.vis.tensorboard(\n                \"gs://your_project/your_bucket/logs/*\",\n            ),\n            # creates a custom web app from a remote html file\n            kfx.vis.web_app(\n                \"gs://your_project/your_bucket/your_html_file\",\n            ),\n            # creates a Vega-Lite vis as a web app\n            kfx.vis.vega_web_app(spec={\n                \"$schema\": \"https://vega.github.io/schema/vega-lite/v4.json\",\n                \"description\": \"A simple bar chart with embedded data.\",\n                \"data\": {\n                    \"values\": [\n                        {\"a\": \"A\", \"b\": 28}, {\"a\": \"B\", \"b\": 55}, {\"a\": \"C\", \"b\": 43},\n                        {\"a\": \"D\", \"b\": 91}, {\"a\": \"E\", \"b\": 81}, {\"a\": \"F\", \"b\": 53},\n                        {\"a\": \"G\", \"b\": 19}, {\"a\": \"H\", \"b\": 87}, {\"a\": \"I\", \"b\": 52}\n                    ]\n                },\n                \"mark\": \"bar\",\n                \"encoding\": {\n                    \"x\": {\"field\": \"a\", \"type\": \"ordinal\"},\n                    \"y\": {\"field\": \"b\", \"type\": \"quantitative\"}\n                }\n            })\n        ]\n    ).write_to(mlpipeline_ui_metadata)\n```\n\n## Developer guide\n\nThis project used:\n\n- isort: to manage import order\n- pylint: to manage general coding best practices\n- flake8: to manage code complexity and coding best practices\n- black: to manage formats and styles\n- pydocstyle: to manage docstr style/format\n- pytest/coverage: to manage unit tests and code coverage\n- bandit: to find common security issues\n- pyenv: to manage dev env: python version (3.6)\n- pipenv: to manage dev env: python packages\n\nConvention for unit tests are to suffix with `_test` and colocate with the actual\npython module - i.e. `<module_name>_test.py`.\n\nThe version of the package is read from `version.txt` - i.e. please update the\nappropriate semantic version (major -> breaking changes, minor -> new features, patch -> bug fix, postfix -> pre-release/post-release).\n\n### `Makefile`:\n\n```bash\n# autoformat codes with docformatter, isort, and black\nmake format\n\n# check style, formats, and code complexity\nmake check\n\n# check style, formats, code complexity, and run unit tests\nmake test\n\n# test everything including building the package and check the sdist\nmake test-all\n\n# run unit test only\nmake test-only\n\n# generate and update the requirements.txt and requirements-dev.txt\nmake requirements\n\n# generate the docs with sphinx and autoapi extension\nmake docs\n\n# generate distributions\nmake dists\n\n# publish to pypi with twine (twine must be configured)\nmake publish\n```\n\n## Changelog\n\n**v0.1.0.a7**\n\n> New features\n>\n> - `kfx.dsl.ContainerOpTransform` helps modify internal k8s properties of a kubeflow pipeline task.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/e2fyi/kfx", "keywords": "kfx,kubeflow,pipelines,contrib,sdk", "license": "", "maintainer": "", "maintainer_email": "", "name": "kfx", "package_url": "https://pypi.org/project/kfx/", "platform": "", "project_url": "https://pypi.org/project/kfx/", "project_urls": {"Homepage": "https://github.com/e2fyi/kfx"}, "release_url": "https://pypi.org/project/kfx/0.1.0a7/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Extensions for kubeflow pipeline sdk.", "version": "0.1.0a7", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>kfx</h1>\n<p><a href=\"https://badge.fury.io/py/kfx\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4a8dc686475c85aca7f0ea1ce75cd37c79699edd/68747470733a2f2f62616467652e667572792e696f2f70792f6b66782e737667\"></a>\n<a href=\"https://travis-ci.org/e2fyi/kfx\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5b472ddea5100a57114a575e91a1ddba4c000db2/68747470733a2f2f7472617669732d63692e6f72672f65326679692f6b66782e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/e2fyi/kfx?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f297f55c4a5d88eb8e200b574f8f94d4ee4993b4/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f65326679692f6b66782f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://kfx.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b866ee93d7c7989b4148579b9fd9a5c4c8c62ed2/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f6b66782f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://github.com/psf/black\" rel=\"nofollow\"><img alt=\"Code style: black\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbfdc7754183ecf079bc71ddeabaf88f6cbc5c00/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667\"></a>\n<a href=\"https://pepy.tech/project/kfx/month\" rel=\"nofollow\"><img alt=\"Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/37b10eb5f9acb07a51e9589b4d1a7512d8d8b355/68747470733a2f2f706570792e746563682f62616467652f6b66782f6d6f6e7468\"></a></p>\n<p><code>kfx</code> is a python package with the namespace <code>kfx</code>. Currently, it provides the\nfollowing sub-packages</p>\n<ul>\n<li>\n<p><code>kfx.lib.dsl</code> - Extensions to the kubeflow pipeline dsl.</p>\n</li>\n<li>\n<p><code>kfx.lib.vis</code> - Data models and helpers to help generate the  <code>mlpipeline-metrics.json</code> and <code>mlpipeline-ui-metadata.json</code> required to render visualization in the kubeflow pipeline UI. See also <a href=\"https://www.kubeflow.org/docs/pipelines/sdk/pipelines-metrics/\" rel=\"nofollow\">https://www.kubeflow.org/docs/pipelines/sdk/pipelines-metrics/</a> and <a href=\"https://www.kubeflow.org/docs/pipelines/sdk/output-viewer/\" rel=\"nofollow\">https://www.kubeflow.org/docs/pipelines/sdk/output-viewer/</a></p>\n</li>\n</ul>\n<blockquote>\n<ul>\n<li>Documentation: <a href=\"https://kfx.readthedocs.io\" rel=\"nofollow\">https://kfx.readthedocs.io</a>.</li>\n<li>Repo: <a href=\"https://github.com/e2fyi/kfx\" rel=\"nofollow\">https://github.com/e2fyi/kfx</a></li>\n</ul>\n</blockquote>\n<blockquote>\n<h3>NOTE this is currently alpha</h3>\n<p>There will likely to have breaking changes, and feel free to do a feature request</p>\n<h3>Known issues</h3>\n<ul>\n<li><code>kfx.vis.vega.vega_web_app</code> and <code>KfpArtifact</code> does not work well together (see example) because of CORs - the web app is hosted inside an iFrame which prevents it from accessing the <code>ml-pipeline-ui</code> API server.</li>\n<li><code>kfx.vis.vega.vega_web_app</code> is only supported in the latest kubeflow pipeline UI (as inline is only supported after <code>0.2.5</code>)</li>\n</ul>\n</blockquote>\n<h3>Changelog</h3>\n<p>Refer to <a href=\"./CHANGELOG.md\" rel=\"nofollow\">CHANGELOG.md</a>.</p>\n<h2>Quick start</h2>\n<p>Installation</p>\n<pre>pip install kfx\n</pre>\n<h2>Usage</h2>\n<p>Example: Using <code>ContainerOpTransform</code> to configure the internal k8s properties\nof kubeflow pipelines tasks.</p>\n<blockquote>\n<p><code>kfx.dsl.ContainerOpTransform</code> is a helper to modify the interal k8s properties\n(e.g. resources, environment variables, etc) of kubeflow pipeline tasks.</p>\n</blockquote>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">kfp.components</span>\n<span class=\"kn\">import</span> <span class=\"nn\">kfp.dsl</span>\n<span class=\"kn\">import</span> <span class=\"nn\">kfx.dsl</span>\n\n<span class=\"n\">transforms</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"n\">kfx</span><span class=\"o\">.</span><span class=\"n\">dsl</span><span class=\"o\">.</span><span class=\"n\">ContainerOpTransform</span><span class=\"p\">()</span>\n    <span class=\"o\">.</span><span class=\"n\">set_resources</span><span class=\"p\">(</span><span class=\"n\">cpu</span><span class=\"o\">=</span><span class=\"s2\">\"500m\"</span><span class=\"p\">,</span> <span class=\"n\">memory</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s2\">\"1G\"</span><span class=\"p\">,</span> <span class=\"s2\">\"4G\"</span><span class=\"p\">))</span>\n    <span class=\"o\">.</span><span class=\"n\">set_image_pull_policy</span><span class=\"p\">(</span><span class=\"s2\">\"Always\"</span><span class=\"p\">)</span>\n    <span class=\"o\">.</span><span class=\"n\">set_env_vars</span><span class=\"p\">({</span><span class=\"s2\">\"ENV\"</span><span class=\"p\">:</span> <span class=\"s2\">\"production\"</span><span class=\"p\">})</span>\n    <span class=\"o\">.</span><span class=\"n\">set_env_var_from_secret</span><span class=\"p\">(</span><span class=\"s2\">\"AWS_ACCESS_KEY\"</span><span class=\"p\">,</span> <span class=\"n\">secret_name</span><span class=\"o\">=</span><span class=\"s2\">\"aws\"</span><span class=\"p\">,</span> <span class=\"n\">secret_key</span><span class=\"o\">=</span><span class=\"s2\">\"access_key\"</span><span class=\"p\">)</span>\n    <span class=\"o\">.</span><span class=\"n\">set_annotations</span><span class=\"p\">({</span><span class=\"s2\">\"iam.amazonaws.com/role\"</span><span class=\"p\">:</span> <span class=\"s2\">\"some-arn\"</span><span class=\"p\">})</span>\n<span class=\"p\">)</span>\n\n\n<span class=\"nd\">@kfp</span><span class=\"o\">.</span><span class=\"n\">dsl</span><span class=\"o\">.</span><span class=\"n\">components</span><span class=\"o\">.</span><span class=\"n\">func_to_container_op</span>\n<span class=\"k\">def</span> <span class=\"nf\">echo</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">text</span>\n\n\n<span class=\"nd\">@kfp</span><span class=\"o\">.</span><span class=\"n\">dsl</span><span class=\"o\">.</span><span class=\"n\">pipeline</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"demo\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">pipeline</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n    <span class=\"n\">op1</span> <span class=\"o\">=</span> <span class=\"n\">echo</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">)</span>\n    <span class=\"n\">op2</span> <span class=\"o\">=</span> <span class=\"n\">echo</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"si\">%s</span><span class=\"s2\">-</span><span class=\"si\">%s</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"n\">text</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># u can apply the transform on op1 only</span>\n    <span class=\"c1\"># op1.apply(transforms)</span>\n\n    <span class=\"c1\"># or apply on all ops in the pipeline</span>\n    <span class=\"n\">kfp</span><span class=\"o\">.</span><span class=\"n\">dsl</span><span class=\"o\">.</span><span class=\"n\">get_pipeline_conf</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">add_op_transformer</span><span class=\"p\">(</span><span class=\"n\">transforms</span><span class=\"p\">)</span>\n</pre>\n<p>Example: Using <code>ArtifactLocationHelper</code> and <code>KfpArtifact</code> to determine the\nuri of your data artifact generated by the kubeflow pipeline task.</p>\n<blockquote>\n<p><code>kfx.dsl.ArtifactLocationHelper</code> is a helper to modify the kubeflow pipeline task\nso that you can use <code>kfx.dsl.KfpArtifact</code> to represent the artifact generated\ninside the task.</p>\n</blockquote>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">kfp.components</span>\n<span class=\"kn\">import</span> <span class=\"nn\">kfp.dsl</span>\n<span class=\"kn\">import</span> <span class=\"nn\">kfx.dsl</span>\n\n\n<span class=\"c1\"># creates the helper that has the argo configs (tells you how artifacts will be stored)</span>\n<span class=\"c1\"># see https://github.com/argoproj/argo/blob/master/docs/workflow-controller-configmap.yaml</span>\n<span class=\"n\">helper</span> <span class=\"o\">=</span> <span class=\"n\">kfx</span><span class=\"o\">.</span><span class=\"n\">dsl</span><span class=\"o\">.</span><span class=\"n\">ArtifactLocationHelper</span><span class=\"p\">(</span>\n    <span class=\"n\">scheme</span><span class=\"o\">=</span><span class=\"s2\">\"minio\"</span><span class=\"p\">,</span> <span class=\"n\">bucket</span><span class=\"o\">=</span><span class=\"s2\">\"mlpipeline\"</span><span class=\"p\">,</span> <span class=\"n\">key_prefix</span><span class=\"o\">=</span><span class=\"s2\">\"artifacts/\"</span>\n<span class=\"p\">)</span>\n\n<span class=\"nd\">@kfp</span><span class=\"o\">.</span><span class=\"n\">components</span><span class=\"o\">.</span><span class=\"n\">func_to_container_op</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_op</span><span class=\"p\">(</span>\n    <span class=\"n\">mlpipeline_ui_metadata</span><span class=\"p\">:</span> <span class=\"n\">OutputTextFile</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">),</span> <span class=\"n\">markdown_data_file</span><span class=\"p\">:</span> <span class=\"n\">OutputTextFile</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">)</span>\n<span class=\"p\">):</span>\n    <span class=\"s2\">\"A test kubeflow pipeline task.\"</span>\n\n    <span class=\"kn\">import</span> <span class=\"nn\">json</span>\n\n    <span class=\"kn\">import</span> <span class=\"nn\">kfx.dsl</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">kfx.vis</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">kfx.vis.vega</span>\n\n    <span class=\"c1\"># `KfpArtifact` provides the reference to data artifact created</span>\n    <span class=\"c1\"># inside this task</span>\n    <span class=\"n\">spec</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"$schema\"</span><span class=\"p\">:</span> <span class=\"s2\">\"https://vega.github.io/schema/vega-lite/v4.json\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"description\"</span><span class=\"p\">:</span> <span class=\"s2\">\"A simple bar chart\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"data\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s2\">\"values\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                <span class=\"p\">{</span><span class=\"s2\">\"a\"</span><span class=\"p\">:</span> <span class=\"s2\">\"A\"</span><span class=\"p\">,</span> <span class=\"s2\">\"b\"</span><span class=\"p\">:</span> <span class=\"mi\">28</span><span class=\"p\">},</span>\n                <span class=\"p\">{</span><span class=\"s2\">\"a\"</span><span class=\"p\">:</span> <span class=\"s2\">\"B\"</span><span class=\"p\">,</span> <span class=\"s2\">\"b\"</span><span class=\"p\">:</span> <span class=\"mi\">55</span><span class=\"p\">},</span>\n                <span class=\"p\">{</span><span class=\"s2\">\"a\"</span><span class=\"p\">:</span> <span class=\"s2\">\"C\"</span><span class=\"p\">,</span> <span class=\"s2\">\"b\"</span><span class=\"p\">:</span> <span class=\"mi\">43</span><span class=\"p\">},</span>\n                <span class=\"p\">{</span><span class=\"s2\">\"a\"</span><span class=\"p\">:</span> <span class=\"s2\">\"D\"</span><span class=\"p\">,</span> <span class=\"s2\">\"b\"</span><span class=\"p\">:</span> <span class=\"mi\">91</span><span class=\"p\">},</span>\n                <span class=\"p\">{</span><span class=\"s2\">\"a\"</span><span class=\"p\">:</span> <span class=\"s2\">\"E\"</span><span class=\"p\">,</span> <span class=\"s2\">\"b\"</span><span class=\"p\">:</span> <span class=\"mi\">81</span><span class=\"p\">},</span>\n                <span class=\"p\">{</span><span class=\"s2\">\"a\"</span><span class=\"p\">:</span> <span class=\"s2\">\"F\"</span><span class=\"p\">,</span> <span class=\"s2\">\"b\"</span><span class=\"p\">:</span> <span class=\"mi\">53</span><span class=\"p\">},</span>\n                <span class=\"p\">{</span><span class=\"s2\">\"a\"</span><span class=\"p\">:</span> <span class=\"s2\">\"G\"</span><span class=\"p\">,</span> <span class=\"s2\">\"b\"</span><span class=\"p\">:</span> <span class=\"mi\">19</span><span class=\"p\">},</span>\n                <span class=\"p\">{</span><span class=\"s2\">\"a\"</span><span class=\"p\">:</span> <span class=\"s2\">\"H\"</span><span class=\"p\">,</span> <span class=\"s2\">\"b\"</span><span class=\"p\">:</span> <span class=\"mi\">87</span><span class=\"p\">},</span>\n                <span class=\"p\">{</span><span class=\"s2\">\"a\"</span><span class=\"p\">:</span> <span class=\"s2\">\"I\"</span><span class=\"p\">,</span> <span class=\"s2\">\"b\"</span><span class=\"p\">:</span> <span class=\"mi\">52</span><span class=\"p\">},</span>\n            <span class=\"p\">]</span>\n        <span class=\"p\">},</span>\n        <span class=\"s2\">\"mark\"</span><span class=\"p\">:</span> <span class=\"s2\">\"bar\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"encoding\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s2\">\"x\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"field\"</span><span class=\"p\">:</span> <span class=\"s2\">\"a\"</span><span class=\"p\">,</span> <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"ordinal\"</span><span class=\"p\">},</span>\n            <span class=\"s2\">\"y\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"field\"</span><span class=\"p\">:</span> <span class=\"s2\">\"b\"</span><span class=\"p\">,</span> <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"quantitative\"</span><span class=\"p\">},</span>\n        <span class=\"p\">},</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\"># write the markdown to the `markdown-data` artifact</span>\n    <span class=\"n\">markdown_data_file</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s2\">\"### hello world\"</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># creates an ui metadata object</span>\n    <span class=\"n\">ui_metadata</span> <span class=\"o\">=</span> <span class=\"n\">kfx</span><span class=\"o\">.</span><span class=\"n\">vis</span><span class=\"o\">.</span><span class=\"n\">kfp_ui_metadata</span><span class=\"p\">(</span>\n        <span class=\"c1\"># Describes the vis to generate in the kubeflow pipeline UI.</span>\n        <span class=\"p\">[</span>\n            <span class=\"c1\"># markdown vis from a markdown artifact.</span>\n            <span class=\"c1\"># `KfpArtifact` provides the reference to data artifact created</span>\n            <span class=\"c1\"># inside this task</span>\n            <span class=\"n\">kfx</span><span class=\"o\">.</span><span class=\"n\">vis</span><span class=\"o\">.</span><span class=\"n\">markdown</span><span class=\"p\">(</span><span class=\"n\">kfx</span><span class=\"o\">.</span><span class=\"n\">dsl</span><span class=\"o\">.</span><span class=\"n\">KfpArtifact</span><span class=\"p\">(</span><span class=\"s2\">\"markdown_data_file\"</span><span class=\"p\">)),</span>\n            <span class=\"c1\"># a vega web app from the vega data artifact.</span>\n            <span class=\"n\">kfx</span><span class=\"o\">.</span><span class=\"n\">vis</span><span class=\"o\">.</span><span class=\"n\">vega</span><span class=\"o\">.</span><span class=\"n\">vega_web_app</span><span class=\"p\">(</span><span class=\"n\">spec</span><span class=\"p\">),</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"c1\"># writes the ui metadata object as the `mlpipeline-ui-metadata` artifact</span>\n    <span class=\"n\">mlpipeline_ui_metadata</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">kfx</span><span class=\"o\">.</span><span class=\"n\">vis</span><span class=\"o\">.</span><span class=\"n\">asjson</span><span class=\"p\">(</span><span class=\"n\">ui_metadata</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># prints the uri to the markdown artifact</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ui_metadata</span><span class=\"o\">.</span><span class=\"n\">outputs</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"p\">)</span>\n\n\n<span class=\"nd\">@kfp</span><span class=\"o\">.</span><span class=\"n\">dsl</span><span class=\"o\">.</span><span class=\"n\">pipeline</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_pipeline</span><span class=\"p\">():</span>\n    <span class=\"s2\">\"A test kubeflow pipeline\"</span>\n\n    <span class=\"n\">op</span><span class=\"p\">:</span> <span class=\"n\">kfp</span><span class=\"o\">.</span><span class=\"n\">dsl</span><span class=\"o\">.</span><span class=\"n\">ContainerOp</span> <span class=\"o\">=</span> <span class=\"n\">test_op</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># modify kfp operator with artifact location metadata through env vars</span>\n    <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">apply</span><span class=\"p\">(</span><span class=\"n\">helper</span><span class=\"o\">.</span><span class=\"n\">set_envs</span><span class=\"p\">())</span>\n</pre>\n<p>Example: Using <code>pydantic</code> data models to generate <code>mlpipeline-metrics.json</code> and\n<code>mlpipeline-ui-metadata.json</code>.</p>\n<p>(See also <a href=\"https://www.kubeflow.org/docs/pipelines/sdk/output-viewer/\" rel=\"nofollow\">https://www.kubeflow.org/docs/pipelines/sdk/output-viewer/</a> and\n<a href=\"https://www.kubeflow.org/docs/pipelines/sdk/pipelines-metrics/\" rel=\"nofollow\">https://www.kubeflow.org/docs/pipelines/sdk/pipelines-metrics/</a>).</p>\n<blockquote>\n<p><code>kfx.vis</code> has helper functions (with corresponding hints) to describe and\ncreate <code>mlpipeline-metrics.json</code> and <code>mlpipeline-ui-metadata.json</code> files\n(required by kubeflow pipeline UI to render any metrics or visualizations).</p>\n</blockquote>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">functools</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">kfp.components</span>\n\n\n<span class=\"c1\"># install kfx</span>\n<span class=\"n\">kfx_component</span> <span class=\"o\">=</span> <span class=\"n\">functools</span><span class=\"o\">.</span><span class=\"n\">partial</span><span class=\"p\">(</span><span class=\"n\">kfp</span><span class=\"o\">.</span><span class=\"n\">components</span><span class=\"o\">.</span><span class=\"n\">func_to_container_op</span><span class=\"p\">,</span> <span class=\"n\">packages_to_install</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"kfx\"</span><span class=\"p\">])</span>\n\n\n<span class=\"nd\">@kfx_component</span>\n<span class=\"k\">def</span> <span class=\"nf\">some_op</span><span class=\"p\">(</span>\n    <span class=\"c1\"># mlpipeline_metrics is a path - i.e. open(mlpipeline_metrics, \"w\")</span>\n    <span class=\"n\">mlpipeline_metrics</span><span class=\"p\">:</span> <span class=\"n\">kfp</span><span class=\"o\">.</span><span class=\"n\">components</span><span class=\"o\">.</span><span class=\"n\">OutputPath</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">),</span>\n    <span class=\"c1\"># mlpipeline_ui_metadata is a FileLike obj - i.e. mlpipeline_ui_metadata.write(\"something\")</span>\n    <span class=\"n\">mlpipeline_ui_metadata</span><span class=\"p\">:</span> <span class=\"n\">kfp</span><span class=\"o\">.</span><span class=\"n\">components</span><span class=\"o\">.</span><span class=\"n\">OutputTextFile</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">),</span>\n<span class=\"p\">):</span>\n    <span class=\"s2\">\"kfp operator that provides metrics and metadata for visualizations.\"</span>\n\n    <span class=\"c1\"># import inside kfp task</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">kfx.vis</span>\n\n    <span class=\"c1\"># output metrics to mlpipeline_metrics path</span>\n    <span class=\"n\">kfx</span><span class=\"o\">.</span><span class=\"n\">vis</span><span class=\"o\">.</span><span class=\"n\">kfp_metrics</span><span class=\"p\">([</span>\n        <span class=\"c1\"># render as percent</span>\n        <span class=\"n\">kfx</span><span class=\"o\">.</span><span class=\"n\">vis</span><span class=\"o\">.</span><span class=\"n\">kfp_metric</span><span class=\"p\">(</span><span class=\"s2\">\"recall-score\"</span><span class=\"p\">,</span> <span class=\"mf\">0.9</span><span class=\"p\">,</span> <span class=\"n\">percent</span><span class=\"o\">=</span><span class=\"n\">true</span><span class=\"p\">),</span>\n        <span class=\"c1\"># override metric format with custom value</span>\n        <span class=\"n\">kfx</span><span class=\"o\">.</span><span class=\"n\">vis</span><span class=\"o\">.</span><span class=\"n\">kfp_metric</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"percision-score\"</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"mf\">0.8</span><span class=\"p\">,</span> <span class=\"n\">metric_format</span><span class=\"o\">=</span><span class=\"s2\">\"PERCENTAGE\"</span><span class=\"p\">),</span>\n        <span class=\"c1\"># render raw score</span>\n        <span class=\"n\">kfx</span><span class=\"o\">.</span><span class=\"n\">vis</span><span class=\"o\">.</span><span class=\"n\">kfp_metric</span><span class=\"p\">(</span><span class=\"s2\">\"raw-score\"</span><span class=\"p\">,</span> <span class=\"mf\">123.45</span><span class=\"p\">),</span>\n    <span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">write_to</span><span class=\"p\">(</span><span class=\"n\">mlpipeline_metrics</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># output visualization metadata to mlpipeline_ui_metadata obj</span>\n    <span class=\"n\">kfx</span><span class=\"o\">.</span><span class=\"n\">vis</span><span class=\"o\">.</span><span class=\"n\">kfp_ui_metadata</span><span class=\"p\">(</span>\n        <span class=\"p\">[</span>\n            <span class=\"c1\"># creates a confusion matrix vis</span>\n            <span class=\"n\">kfx</span><span class=\"o\">.</span><span class=\"n\">vis</span><span class=\"o\">.</span><span class=\"n\">confusion_matrix</span><span class=\"p\">(</span>\n                <span class=\"n\">source</span><span class=\"o\">=</span><span class=\"s2\">\"gs://your_project/your_bucket/your_cm_file\"</span><span class=\"p\">,</span>\n                <span class=\"n\">labels</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"True\"</span><span class=\"p\">,</span> <span class=\"s2\">\"False\"</span><span class=\"p\">],</span>\n            <span class=\"p\">),</span>\n            <span class=\"c1\"># creates a markdown with inline source</span>\n            <span class=\"n\">kfx</span><span class=\"o\">.</span><span class=\"n\">vis</span><span class=\"o\">.</span><span class=\"n\">markdown</span><span class=\"p\">(</span>\n                <span class=\"s2\">\"# Inline Markdown: [A link](https://www.kubeflow.org/)\"</span><span class=\"p\">,</span>\n                <span class=\"n\">storage</span><span class=\"o\">=</span><span class=\"s2\">\"inline\"</span><span class=\"p\">,</span>\n            <span class=\"p\">),</span>\n            <span class=\"c1\"># creates a markdown with a remote source</span>\n            <span class=\"n\">kfx</span><span class=\"o\">.</span><span class=\"n\">vis</span><span class=\"o\">.</span><span class=\"n\">markdown</span><span class=\"p\">(</span>\n                <span class=\"s2\">\"gs://your_project/your_bucket/your_markdown_file\"</span><span class=\"p\">,</span>\n            <span class=\"p\">),</span>\n            <span class=\"c1\"># creates a ROC curve with a remote source</span>\n            <span class=\"n\">kfx</span><span class=\"o\">.</span><span class=\"n\">vis</span><span class=\"o\">.</span><span class=\"n\">roc</span><span class=\"p\">(</span>\n                <span class=\"s2\">\"gs://your_project/your_bucket/your_roc_file\"</span><span class=\"p\">,</span>\n            <span class=\"p\">),</span>\n            <span class=\"c1\"># creates a Table with a remote source</span>\n            <span class=\"n\">kfx</span><span class=\"o\">.</span><span class=\"n\">vis</span><span class=\"o\">.</span><span class=\"n\">table</span><span class=\"p\">(</span>\n                <span class=\"s2\">\"gs://your_project/your_bucket/your_csv_file\"</span><span class=\"p\">,</span>\n                <span class=\"n\">header</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"col1\"</span><span class=\"p\">,</span> <span class=\"s2\">\"col2\"</span><span class=\"p\">],</span>\n            <span class=\"p\">),</span>\n            <span class=\"c1\"># creates a tensorboard viewer</span>\n            <span class=\"n\">kfx</span><span class=\"o\">.</span><span class=\"n\">vis</span><span class=\"o\">.</span><span class=\"n\">tensorboard</span><span class=\"p\">(</span>\n                <span class=\"s2\">\"gs://your_project/your_bucket/logs/*\"</span><span class=\"p\">,</span>\n            <span class=\"p\">),</span>\n            <span class=\"c1\"># creates a custom web app from a remote html file</span>\n            <span class=\"n\">kfx</span><span class=\"o\">.</span><span class=\"n\">vis</span><span class=\"o\">.</span><span class=\"n\">web_app</span><span class=\"p\">(</span>\n                <span class=\"s2\">\"gs://your_project/your_bucket/your_html_file\"</span><span class=\"p\">,</span>\n            <span class=\"p\">),</span>\n            <span class=\"c1\"># creates a Vega-Lite vis as a web app</span>\n            <span class=\"n\">kfx</span><span class=\"o\">.</span><span class=\"n\">vis</span><span class=\"o\">.</span><span class=\"n\">vega_web_app</span><span class=\"p\">(</span><span class=\"n\">spec</span><span class=\"o\">=</span><span class=\"p\">{</span>\n                <span class=\"s2\">\"$schema\"</span><span class=\"p\">:</span> <span class=\"s2\">\"https://vega.github.io/schema/vega-lite/v4.json\"</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"description\"</span><span class=\"p\">:</span> <span class=\"s2\">\"A simple bar chart with embedded data.\"</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"data\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                    <span class=\"s2\">\"values\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                        <span class=\"p\">{</span><span class=\"s2\">\"a\"</span><span class=\"p\">:</span> <span class=\"s2\">\"A\"</span><span class=\"p\">,</span> <span class=\"s2\">\"b\"</span><span class=\"p\">:</span> <span class=\"mi\">28</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s2\">\"a\"</span><span class=\"p\">:</span> <span class=\"s2\">\"B\"</span><span class=\"p\">,</span> <span class=\"s2\">\"b\"</span><span class=\"p\">:</span> <span class=\"mi\">55</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s2\">\"a\"</span><span class=\"p\">:</span> <span class=\"s2\">\"C\"</span><span class=\"p\">,</span> <span class=\"s2\">\"b\"</span><span class=\"p\">:</span> <span class=\"mi\">43</span><span class=\"p\">},</span>\n                        <span class=\"p\">{</span><span class=\"s2\">\"a\"</span><span class=\"p\">:</span> <span class=\"s2\">\"D\"</span><span class=\"p\">,</span> <span class=\"s2\">\"b\"</span><span class=\"p\">:</span> <span class=\"mi\">91</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s2\">\"a\"</span><span class=\"p\">:</span> <span class=\"s2\">\"E\"</span><span class=\"p\">,</span> <span class=\"s2\">\"b\"</span><span class=\"p\">:</span> <span class=\"mi\">81</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s2\">\"a\"</span><span class=\"p\">:</span> <span class=\"s2\">\"F\"</span><span class=\"p\">,</span> <span class=\"s2\">\"b\"</span><span class=\"p\">:</span> <span class=\"mi\">53</span><span class=\"p\">},</span>\n                        <span class=\"p\">{</span><span class=\"s2\">\"a\"</span><span class=\"p\">:</span> <span class=\"s2\">\"G\"</span><span class=\"p\">,</span> <span class=\"s2\">\"b\"</span><span class=\"p\">:</span> <span class=\"mi\">19</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s2\">\"a\"</span><span class=\"p\">:</span> <span class=\"s2\">\"H\"</span><span class=\"p\">,</span> <span class=\"s2\">\"b\"</span><span class=\"p\">:</span> <span class=\"mi\">87</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s2\">\"a\"</span><span class=\"p\">:</span> <span class=\"s2\">\"I\"</span><span class=\"p\">,</span> <span class=\"s2\">\"b\"</span><span class=\"p\">:</span> <span class=\"mi\">52</span><span class=\"p\">}</span>\n                    <span class=\"p\">]</span>\n                <span class=\"p\">},</span>\n                <span class=\"s2\">\"mark\"</span><span class=\"p\">:</span> <span class=\"s2\">\"bar\"</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"encoding\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                    <span class=\"s2\">\"x\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"field\"</span><span class=\"p\">:</span> <span class=\"s2\">\"a\"</span><span class=\"p\">,</span> <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"ordinal\"</span><span class=\"p\">},</span>\n                    <span class=\"s2\">\"y\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"field\"</span><span class=\"p\">:</span> <span class=\"s2\">\"b\"</span><span class=\"p\">,</span> <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"quantitative\"</span><span class=\"p\">}</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">})</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">write_to</span><span class=\"p\">(</span><span class=\"n\">mlpipeline_ui_metadata</span><span class=\"p\">)</span>\n</pre>\n<h2>Developer guide</h2>\n<p>This project used:</p>\n<ul>\n<li>isort: to manage import order</li>\n<li>pylint: to manage general coding best practices</li>\n<li>flake8: to manage code complexity and coding best practices</li>\n<li>black: to manage formats and styles</li>\n<li>pydocstyle: to manage docstr style/format</li>\n<li>pytest/coverage: to manage unit tests and code coverage</li>\n<li>bandit: to find common security issues</li>\n<li>pyenv: to manage dev env: python version (3.6)</li>\n<li>pipenv: to manage dev env: python packages</li>\n</ul>\n<p>Convention for unit tests are to suffix with <code>_test</code> and colocate with the actual\npython module - i.e. <code>&lt;module_name&gt;_test.py</code>.</p>\n<p>The version of the package is read from <code>version.txt</code> - i.e. please update the\nappropriate semantic version (major -&gt; breaking changes, minor -&gt; new features, patch -&gt; bug fix, postfix -&gt; pre-release/post-release).</p>\n<h3><code>Makefile</code>:</h3>\n<pre><span class=\"c1\"># autoformat codes with docformatter, isort, and black</span>\nmake format\n\n<span class=\"c1\"># check style, formats, and code complexity</span>\nmake check\n\n<span class=\"c1\"># check style, formats, code complexity, and run unit tests</span>\nmake <span class=\"nb\">test</span>\n\n<span class=\"c1\"># test everything including building the package and check the sdist</span>\nmake test-all\n\n<span class=\"c1\"># run unit test only</span>\nmake test-only\n\n<span class=\"c1\"># generate and update the requirements.txt and requirements-dev.txt</span>\nmake requirements\n\n<span class=\"c1\"># generate the docs with sphinx and autoapi extension</span>\nmake docs\n\n<span class=\"c1\"># generate distributions</span>\nmake dists\n\n<span class=\"c1\"># publish to pypi with twine (twine must be configured)</span>\nmake publish\n</pre>\n<h2>Changelog</h2>\n<p><strong>v0.1.0.a7</strong></p>\n<blockquote>\n<p>New features</p>\n<ul>\n<li><code>kfx.dsl.ContainerOpTransform</code> helps modify internal k8s properties of a kubeflow pipeline task.</li>\n</ul>\n</blockquote>\n\n          </div>"}, "last_serial": 7084344, "releases": {"0.1.0a1": [{"comment_text": "", "digests": {"md5": "b5e5218866e50c94dda5aaef078b7629", "sha256": "24e3bea254b5454d165c3b4bd492766448a39b4b7af4cbfe47599f178fbdf048"}, "downloads": -1, "filename": "kfx-0.1.0a1.tar.gz", "has_sig": false, "md5_digest": "b5e5218866e50c94dda5aaef078b7629", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12698, "upload_time": "2020-02-29T04:04:25", "upload_time_iso_8601": "2020-02-29T04:04:25.525307Z", "url": "https://files.pythonhosted.org/packages/ca/30/a1479c43fc0ae3593bd9e93e3f36d803f1e6e021b61aa584001d2fad2786/kfx-0.1.0a1.tar.gz", "yanked": false}], "0.1.0a2": [{"comment_text": "", "digests": {"md5": "d92c47b7a90dc21b006cc69cca5e75ca", "sha256": "5bb7ee7914b815859dfcb0a8d3aa38bdc0418f9aab79fda8475f8c08eee55ce9"}, "downloads": -1, "filename": "kfx-0.1.0a2.tar.gz", "has_sig": false, "md5_digest": "d92c47b7a90dc21b006cc69cca5e75ca", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 15123, "upload_time": "2020-03-01T13:25:27", "upload_time_iso_8601": "2020-03-01T13:25:27.146789Z", "url": "https://files.pythonhosted.org/packages/48/9b/e476f83e483beb7e14292790facbfb44e7df72f07f1f65e1b7e962ce1a39/kfx-0.1.0a2.tar.gz", "yanked": false}], "0.1.0a3": [{"comment_text": "", "digests": {"md5": "21364e39fa78b84466cf6f59d05d7cd0", "sha256": "ce93c6a0a6675c264ba75a580c060395f13777d059001929861b3f3cde7f16f1"}, "downloads": -1, "filename": "kfx-0.1.0a3.tar.gz", "has_sig": false, "md5_digest": "21364e39fa78b84466cf6f59d05d7cd0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 17656, "upload_time": "2020-03-02T13:27:41", "upload_time_iso_8601": "2020-03-02T13:27:41.677213Z", "url": "https://files.pythonhosted.org/packages/e3/ce/460f6a0a6007d1d4b34e7bd6789162bad33663f96bcc5e557247e7866e07/kfx-0.1.0a3.tar.gz", "yanked": false}], "0.1.0a4": [{"comment_text": "", "digests": {"md5": "76f907b27d88187766cfee41e779fe0b", "sha256": "946e1a8f186ed9f76af6c4b76790f5d8bbd11918f4d93aa82a644916b8a1a058"}, "downloads": -1, "filename": "kfx-0.1.0a4.tar.gz", "has_sig": false, "md5_digest": "76f907b27d88187766cfee41e779fe0b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 18451, "upload_time": "2020-03-02T16:25:17", "upload_time_iso_8601": "2020-03-02T16:25:17.871298Z", "url": "https://files.pythonhosted.org/packages/de/a2/b46f410bdef0fa05cdb31116d903db06b1b378da3333221af3ac4ae40978/kfx-0.1.0a4.tar.gz", "yanked": false}], "0.1.0a5": [{"comment_text": "", "digests": {"md5": "b0ec00edaf8c64b974c037c31592800f", "sha256": "81ac61a03282bd20f811914ef29080143e66f0a6eba9bb92ed45b441f69b0d93"}, "downloads": -1, "filename": "kfx-0.1.0a5.tar.gz", "has_sig": false, "md5_digest": "b0ec00edaf8c64b974c037c31592800f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 19804, "upload_time": "2020-03-23T04:30:45", "upload_time_iso_8601": "2020-03-23T04:30:45.767887Z", "url": "https://files.pythonhosted.org/packages/4e/94/ae75f88139acef73dd5d17196e59028d6df20bae511d4f969e822cae6fbf/kfx-0.1.0a5.tar.gz", "yanked": false}], "0.1.0a6": [{"comment_text": "", "digests": {"md5": "e1903ed92342a758a34787d44c83f406", "sha256": "d01c171bf084c586960c4a3bc1a3a6e73c5cde1031ad0349ca3d3e2fc96f1291"}, "downloads": -1, "filename": "kfx-0.1.0a6.tar.gz", "has_sig": false, "md5_digest": "e1903ed92342a758a34787d44c83f406", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 20325, "upload_time": "2020-03-23T10:38:21", "upload_time_iso_8601": "2020-03-23T10:38:21.880034Z", "url": "https://files.pythonhosted.org/packages/d6/0a/5af26ac7181fd97f7e59dd6c09e17905e12f2e6cad28363250602ac62514/kfx-0.1.0a6.tar.gz", "yanked": false}], "0.1.0a7": [{"comment_text": "", "digests": {"md5": "6c18f7c968b2ae3bf95305c375df858b", "sha256": "2f7f3e0c946e703cad5c0742f3376fe4162102ed5faf90c1aadd191bae2f9727"}, "downloads": -1, "filename": "kfx-0.1.0a7.tar.gz", "has_sig": false, "md5_digest": "6c18f7c968b2ae3bf95305c375df858b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 24145, "upload_time": "2020-04-23T13:04:54", "upload_time_iso_8601": "2020-04-23T13:04:54.775276Z", "url": "https://files.pythonhosted.org/packages/fe/10/3dc8b2ed72f13e44dcfb9a008644f1fdbd25cb98fbbe8d7f0478a5b5a1f3/kfx-0.1.0a7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6c18f7c968b2ae3bf95305c375df858b", "sha256": "2f7f3e0c946e703cad5c0742f3376fe4162102ed5faf90c1aadd191bae2f9727"}, "downloads": -1, "filename": "kfx-0.1.0a7.tar.gz", "has_sig": false, "md5_digest": "6c18f7c968b2ae3bf95305c375df858b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 24145, "upload_time": "2020-04-23T13:04:54", "upload_time_iso_8601": "2020-04-23T13:04:54.775276Z", "url": "https://files.pythonhosted.org/packages/fe/10/3dc8b2ed72f13e44dcfb9a008644f1fdbd25cb98fbbe8d7f0478a5b5a1f3/kfx-0.1.0a7.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:49:53 2020"}