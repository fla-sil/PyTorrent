{"info": {"author": "Man AHL Technology", "author_email": "ManAHLTech@ahl.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Framework :: Flask", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Topic :: Scientific/Engineering", "Topic :: Scientific/Engineering :: Visualization", "Topic :: Utilities"], "description": "## Pynorama\nPynorama is a tool for visualizing intricate datasets for which a simple table format is not suitable. It was created with Natural Language Processing applications in mind.\n\n[TODO: Screenshot]\n\nPynorama lets you define *views* in **python** that are rendered as interactive web applications, letting you browse, analyse and understand your data.\n\nPynorama is **open and extensible.**\nPynorama has a clean and simple architecture.\nIt makes little assumptions about your data source or data format.\nRead in the [documentation](https://pynorama.readthedocs.io) about developing extensions.\n\n## Quickstart\n\n### Install Pynorama\n\nFor a minimal install run:  \n```\npip install pynorama\n```\n\n### Using Pynorama\n\nTo create a *view*:\n * define a table describing your data records, currently supported sources are pandas dataframe and mongo queries.\n * define different stages of your data pipeline.\n * return a particular records for a given stage.\n * configure the UI\n\nIn python this would look similar to this:\n```python\nfrom pynorama import View\nfrom pynorama.table import PandasTable\n\nclass ExampleView(View):\n    def __init__(self, name, description=''):\n        super(ExampleView, self).__init__(name, description)\n        setup_data()\n\n    def get_pipeline(self):\n        return {\n            'raw_stage': {'viewer': 'raw'},\n            'tokenized': {'viewer': 'json', 'parents': ['raw_stage']}\n        }\n\n    def get_record(self, key, stage):\n        if stage == 'raw_stage':\n            return get_html(key)\n        else:\n            return get_processed_data(key)\n\n    def get_table(self):\n        return PandasTable(get_dataframe())\n```\n\nNext, register the view with pynorama:\n```python\nfrom pynorama import register_view\n\nregister_view(ExampleView('example'))\n```\n\nFinally, let Pynorama set up a *flask* server for you and start it:\n```python\nfrom pynorama import make_server\n\napp = make_server()\napp.run(host='localhost', port='5000')\n```\n\nNow just run your python script! The view should be accessible at *http://localhost:5000/view/example*.\n\nFor more information check the [examples](examples) and the [documentation](https://pynorama.readthedocs.io)!\n\n## Acknowledgements\n\nPynorama was developed at [Man AHL](http://www.ahl.com/).\n\nOriginal concept and implementation: [Alexander Wettig](https://github.com/CodeCreator)\n\nContributors from AHL Tech team:\n\n * [Slavi Marinov](https://github.com/slavi)\n * [Nikolai Matiushev](https://github.com/egao1980)\n\nContributions welcome!\n\n## License\n\nPynorama is licensed under the GNU LGPL v2.1.  A copy of which is included in [LICENSE](LICENSE)\n\nChangelog\n\n### 1.0.0\n\n  * Initial public release\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/manahl/pynorama", "keywords": "ahl,visualization,NLP,data discovery", "license": "LGPL-2.1", "maintainer": "", "maintainer_email": "", "name": "pynorama", "package_url": "https://pypi.org/project/pynorama/", "platform": "", "project_url": "https://pypi.org/project/pynorama/", "project_urls": {"Homepage": "https://github.com/manahl/pynorama"}, "release_url": "https://pypi.org/project/pynorama/0.4.2/", "requires_dist": ["flask", "numpy", "pandas", "pypandoc; extra == 'docs'", "sphinx; extra == 'docs'", "nbsphinx; extra == 'docs'", "sphinxcontrib-napoleon; extra == 'docs'", "nltk; extra == 'examples'", "pymongo; extra == 'mongo'"], "requires_python": "", "summary": "Natural Language Processing Visualization Tool", "version": "0.4.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            ## Pynorama<br>Pynorama is a tool for visualizing intricate datasets for which a simple table format is not suitable. It was created with Natural Language Processing applications in mind.<br><br>[TODO: Screenshot]<br><br>Pynorama lets you define *views* in **python** that are rendered as interactive web applications, letting you browse, analyse and understand your data.<br><br>Pynorama is **open and extensible.**<br>Pynorama has a clean and simple architecture.<br>It makes little assumptions about your data source or data format.<br>Read in the [documentation](https://pynorama.readthedocs.io) about developing extensions.<br><br>## Quickstart<br><br>### Install Pynorama<br><br>For a minimal install run:  <br>```<br>pip install pynorama<br>```<br><br>### Using Pynorama<br><br>To create a *view*:<br> * define a table describing your data records, currently supported sources are pandas dataframe and mongo queries.<br> * define different stages of your data pipeline.<br> * return a particular records for a given stage.<br> * configure the UI<br><br>In python this would look similar to this:<br>```python<br>from pynorama import View<br>from pynorama.table import PandasTable<br><br>class ExampleView(View):<br>    def __init__(self, name, description=''):<br>        super(ExampleView, self).__init__(name, description)<br>        setup_data()<br><br>    def get_pipeline(self):<br>        return {<br>            'raw_stage': {'viewer': 'raw'},<br>            'tokenized': {'viewer': 'json', 'parents': ['raw_stage']}<br>        }<br><br>    def get_record(self, key, stage):<br>        if stage == 'raw_stage':<br>            return get_html(key)<br>        else:<br>            return get_processed_data(key)<br><br>    def get_table(self):<br>        return PandasTable(get_dataframe())<br>```<br><br>Next, register the view with pynorama:<br>```python<br>from pynorama import register_view<br><br>register_view(ExampleView('example'))<br>```<br><br>Finally, let Pynorama set up a *flask* server for you and start it:<br>```python<br>from pynorama import make_server<br><br>app = make_server()<br>app.run(host='localhost', port='5000')<br>```<br><br>Now just run your python script! The view should be accessible at *http://localhost:5000/view/example*.<br><br>For more information check the [examples](examples) and the [documentation](https://pynorama.readthedocs.io)!<br><br>## Acknowledgements<br><br>Pynorama was developed at [Man AHL](http://www.ahl.com/).<br><br>Original concept and implementation: [Alexander Wettig](https://github.com/CodeCreator)<br><br>Contributors from AHL Tech team:<br><br> * [Slavi Marinov](https://github.com/slavi)<br> * [Nikolai Matiushev](https://github.com/egao1980)<br><br>Contributions welcome!<br><br>## License<br><br>Pynorama is licensed under the GNU LGPL v2.1.  A copy of which is included in [LICENSE](LICENSE)<br><br>Changelog<br><br>### 1.0.0<br><br>  * Initial public release<br><br><br>\n          </div>"}, "last_serial": 3817774, "releases": {"0.4.2": [{"comment_text": "", "digests": {"md5": "1d220c05f3db40978f5d7622f34ab18b", "sha256": "8823fd06fd02bc0be6fbed1b55eee10c39ca818ddaf2e295eb0c6ffc951f3c19"}, "downloads": -1, "filename": "pynorama-0.4.2-py2-none-any.whl", "has_sig": false, "md5_digest": "1d220c05f3db40978f5d7622f34ab18b", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 2807431, "upload_time": "2018-04-28T22:50:09", "upload_time_iso_8601": "2018-04-28T22:50:09.575221Z", "url": "https://files.pythonhosted.org/packages/24/51/ce79faa6b201dca9bf27bcce8d0cbf87e75deebdfa5da5b2236559f4589f/pynorama-0.4.2-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fa9575ff76b496748be1b06191bfa7c0", "sha256": "d8a0a98b0bbaa83cc3a14b433338f6094d1b86dd57cdae8a724aa950a5b7552e"}, "downloads": -1, "filename": "pynorama-0.4.2.tar.gz", "has_sig": false, "md5_digest": "fa9575ff76b496748be1b06191bfa7c0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2793309, "upload_time": "2018-04-28T22:50:13", "upload_time_iso_8601": "2018-04-28T22:50:13.681353Z", "url": "https://files.pythonhosted.org/packages/08/fb/6e3fcc28e1aceff6975aabcf8efc3484667df601d336d3118613f47137dc/pynorama-0.4.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1d220c05f3db40978f5d7622f34ab18b", "sha256": "8823fd06fd02bc0be6fbed1b55eee10c39ca818ddaf2e295eb0c6ffc951f3c19"}, "downloads": -1, "filename": "pynorama-0.4.2-py2-none-any.whl", "has_sig": false, "md5_digest": "1d220c05f3db40978f5d7622f34ab18b", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 2807431, "upload_time": "2018-04-28T22:50:09", "upload_time_iso_8601": "2018-04-28T22:50:09.575221Z", "url": "https://files.pythonhosted.org/packages/24/51/ce79faa6b201dca9bf27bcce8d0cbf87e75deebdfa5da5b2236559f4589f/pynorama-0.4.2-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fa9575ff76b496748be1b06191bfa7c0", "sha256": "d8a0a98b0bbaa83cc3a14b433338f6094d1b86dd57cdae8a724aa950a5b7552e"}, "downloads": -1, "filename": "pynorama-0.4.2.tar.gz", "has_sig": false, "md5_digest": "fa9575ff76b496748be1b06191bfa7c0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2793309, "upload_time": "2018-04-28T22:50:13", "upload_time_iso_8601": "2018-04-28T22:50:13.681353Z", "url": "https://files.pythonhosted.org/packages/08/fb/6e3fcc28e1aceff6975aabcf8efc3484667df601d336d3118613f47137dc/pynorama-0.4.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:01:04 2020"}