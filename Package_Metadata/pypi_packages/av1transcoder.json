{"info": {"author": "Thomas Hess", "author_email": "thomas.hess@udo.edu", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only", "Topic :: Multimedia :: Video :: Conversion"], "description": "av1transcoder\n=============\n\nEncode AV1 videos with ffmpeg and libaom-av1.\n\nThis tool takes input videos and encodes them to AV1, using the libaom-av1 encoder.\nAt the time of writing this, the reference encoder is still very slow and can\u2019t fully utilize modern multi-core CPUs.\nTo mitigate this issue, this program splits the input at scene cuts and encodes multiple scenes in parallel,\nallowing full CPU utilization and therefore faster encode times.\n\nThis is a command line application only. There is no GUI.\n\nHow is the overall encoding process done?\n-----------------------------------------\n\nThis program takes multiple passes over each input file:\n\n1. First, it uses the ffmpeg scene cut filter to determine the scene cuts.\n   This is done to avoid splitting the video in the middle of a scene,\n   because such a split causes an artificial and unnecessary bitrate spike.\n2. It then merges all short scenes below the minimum length threshold,\n   so that the overall scene length falls between some acceptable lower and upper bound.\n   (Beware: Upper bounds are currently not implemented!)\n3. It will then start an ffmpeg instance for each found scene, encoding the scenes independently in parallel.\n   Only a limited, configurable number of instances will run at any time to not overload the system.\n   Each running scene encoding will be performed outputting into a temporary directory,\n   and moved into a central scene repository directory on completion.\n   This ensures that only completed scene encodes are kept, making the process fully stoppable and resumable at any time.\n   Incomplete and aborted or otherwise failing encodes will be thrown away.\n\n   On resume, the program picks up any finished work, like finished\n   scenes in the scene repository and skips redoing them, thus avoiding duplicate work.\n\n4. When all scenes are encoded, the ffmpeg ``concat`` demuxer is used to join all scenes into a single video file.\n\n\nRequirements\n------------\n\n- Python >= 3.7 (3.6 may work, but is untested)\n- recent ffmpeg with recent and enabled libaom-av1\n  (git master builds from around November 2019 for both ffmpeg and libaom-av1 work.)\n- (A somewhat fast CPU and some gigabytes of free and writable disk space.\n  The encoding process requires about the size of the final result for temporary data during the encoding process.)\n\n\nInstall\n-------\n\nInstall from PyPI using :code:`pip3 install av1transcoder`\n\nAlternatively, to install the latest version from a local repository checkout,\nopen a terminal at the root level of your checkout (contains ``setup.py`` and this README) and run:\n:code:`pip3 install .` (Note the dot indicating the current directory).\n\nAs a third alternative, you can run the program directly from the repository checkout without installation.\nThe repository contains a simple runner script (named ``av1transcoder-runner.py``) that can be used for this purpose.\n\nCurrently, there is no setup.exe or directly executable Python bundle for Windows platforms.\n\nUsage\n-----\n\nExecute :code:`av1transcoder` after installation or run :code:`./av1transcoder-runner.py` from the source tree,\nif you have cloned the development repository.\nThe program expects one or more video files as positional arguments. Each given video file will be transcoded to AV1.\nThe encoding process can be controlled using several optional command line switches.\nUse the ``--help`` switch to view all possible parameters with explanations. A copy of the output is included below.\nPlease read the notes about limitations and issues below (See point \"Important notes\")!\n\nFull ``--help`` output\n++++++++++++++++++++++\n\nFor reference, here is the ``--help`` output:\n\n::\n\n  $ av1transcoder -h\n    usage: av1transcoder [-h] [-o OUTPUT_DIR] [-t TEMP_DIR] [-k] [-f] [-s SCENE_CUT_THRESHOLD] [-m SECONDS] [-1]\n                               [--crop TOP BOTTOM LEFT RIGHT] [-e STRING] [-g STRING]\n                               [-c MAX_CONCURRENT_ENCODES] [--dump-commands {yes,no,only}] [--deinterlace]\n                               [-L NUMBER] [-v] [-V] [--cutelog-integration] [--ffmpeg EXECUTABLE_NAME]\n                               [--ffprobe EXECUTABLE_NAME] [--ffmpeg-base DIRECTORY]\n                               input_file [input_file ...]\n\n    Transcode video files to AV1. This program takes input video files and transcodes the video track to the AV1 format\n    using the libaom-av1 reference encoder.\n\n    positional arguments:\n      input_file            Input video files. All given video files will be transcoded to AV1.\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -o OUTPUT_DIR, --output-dir OUTPUT_DIR\n                            Store the result in this directory. If set and --temp-dir is unset, also store the temporary\n                            data here. If unset, results are stored alongside the input file.\n      -t TEMP_DIR, --temp-dir TEMP_DIR\n                            Store temporary data in this directory. If unset, use the output directory set by --output-\n                            dir. If that is unset, store the temporary data alongside the input data.\n      -k, --keep-temp       Keep temporary data after the transcoding process finished. May help in resolving transcoding\n                            issues.\n      -f, --force-overwrite\n                            Force overwriting existing data. If unset and filename collisions are detected, the affected\n                            input files are skipped. If set, existing files will be overwritten.\n      -s SCENE_CUT_THRESHOLD, --scene-cut-threshold SCENE_CUT_THRESHOLD\n                            Define the threshold value for the scene cut detection filter. Accepts a decimal number in\n                            the range (0,1]. Defaults to 0.300000\n      -m SECONDS, --min-scene-length SECONDS\n                            Minimal allowed scene duration in seconds. Adjacent detected scenes are combined to have at\n                            least this duration, if possible. This is not a hard limit. It prevents splitting the input\n                            video into many small and independent encoding tasks to improve encoding efficiency. Defaults\n                            to 30\n      -1, --single-pass     Use Single-Pass encoding instead of Two-Pass encoding. Various sources indicate that this is\n                            neither recommended for libaom-av1 nor saves much time compared to Two-Pass encoding.\n      --crop TOP BOTTOM LEFT RIGHT\n                            Crop the given number of pixels from the input videos. You can specify the option multiple\n                            times to give each input file their own individual crop parameters. If more input files are\n                            given than --crop instances, the last given set of crop values will be used for all remaining\n                            input files. BEWARE: This uses an ffmpeg video filter, thus is incompatible with additional\n                            custom video filters given using --encoder-parameters. Trying to use --crop and a custom\n                            video filter at the same time will cause ffmpeg to fail.\n      -e STRING, --encoder-parameters STRING\n                            Add custom encoder parameters to the encoding process. Add all parameters as a single, quoted\n                            string. These parameters will be passed directly to all ffmpeg processes doing the encoding\n                            work. As an example, the default value is '-pix_fmt yuv420p10le -cpu-used 4 -crf 15 -frame-\n                            parallel 0 -threads 1 -auto-alt-ref 1 -lag-in-frames 8 -enable-cdef 1 -enable-global-motion 1\n                            -enable-intrabc 1', which is tuned for high quality encodes of SD material, for example from\n                            DVD sources. BEWARE: Due to a bug in Python argument parser\n                            (https://bugs.python.org/issue9334), the parameters MUST NOT begin with a dash (-) when used\n                            as --encoder-parameters \"<parameters>\". You MUST begin the quoted custom parameter string\n                            with a space character or use = to specify the string, like --encoder-parameters=\"-your-\n                            parameters-here\".\n      -g STRING, --global-parameters STRING\n                            Add custom global parameters to all ffmpeg processes. These are passed in as the first\n                            arguments to ffmpeg before the input file and can be used to enable hardware acceleration or\n                            similar global switches. Example: '-hwaccel cuvid'. When using this to enable hardware\n                            decoding, ensure that the HW decoder can handle at least --max-concurrent-encodes parallel\n                            decoder instances. Default is to not add parameters at all, leaving everything at the default\n                            settings. BEWARE: The issue described for --encoder-parameters applies here, too.\n      -c MAX_CONCURRENT_ENCODES, --max-concurrent-encodes MAX_CONCURRENT_ENCODES\n                            Run up to this many ffmpeg instances in parallel. Takes a positive integer, defaults to 8\n      --dump-commands {yes,no,only}\n                            Dump executed ffmpeg commands in text files for later examination or manual execution. The\n                            files will be placed in the temporary directory. If set to 'only', this program will only\n                            dump the command lines but not actually execute encoding tasks. The scene detection will\n                            always be executed even if set to 'only', because the later steps require the data to be\n                            present. Defaults to 'no'. Setting to a non-default value implies setting '--keep-temp'.\n      --deinterlace         Deinterlace the interlaced input video using the yadif video filter. BEWARE: This uses an\n                            ffmpeg video filter, thus is incompatible with additional custom video filters given using\n                            --encoder-parameters. If you use custom video filters or require another deinterlacer, like\n                            IVTC, add the de-interlace filter to your filter chain instead of using this option.\n      -L NUMBER, --limit-encodes NUMBER\n                            Stop after encoding this number of scenes. Useful, if you plan to split the encoding process\n                            over multiple sessions. If given, this program will encode this NUMBER of previously not\n                            encoded scenes. Only if all scenes are finished, the final result will be assembled from\n                            scenes. Default is to not limit the number of encodes. For the sake of this option, the two\n                            encodes needed for a Two-Pass encode count as one encode towards this limit. For now, setting\n                            this option implies --keep-temp.\n      -v, --version         show program's version number and exit\n      -V, --verbose         Increase output verbosity. Also show debug messages on the standard output.\n      --cutelog-integration\n                            Connect to a running cutelog instance with default settings to display the full program log.\n                            See https://github.com/busimus/cutelog for details.\n      --ffmpeg EXECUTABLE_NAME\n                            Specify the ffmpeg executable name. Can be a relative or absolute path or a simple name (i.e.\n                            an executable name without path separators). If given a simple name, the system PATH variable\n                            will be searched. Defaults to \"ffmpeg\"\n      --ffprobe EXECUTABLE_NAME\n                            Specify the ffprobe executable name. Can be a relative or absolute path or a simple name\n                            (i.e. an executable name without path separators). If given a simple name, the system PATH\n                            variable will be searched. Defaults to \"ffprobe\"\n      --ffmpeg-base DIRECTORY\n                            Specify the path to a custom ffmpeg installation, for example \"/opt/ffmpeg/bin\". If given,\n                            both --ffmpeg and --ffprobe arguments are treated as a path relative to this path. Not set by\n                            default.\n\n    The resulting files are named like <input_file_name>.AV1.mkv and are placed alongside the input file, or into the\n    output directory given by --output-dir. During the encoding process, each input file will have it\u2019s own temporary\n    directory named <input_file_name_with_extension>.temp. The temporary directory is placed according to the placement\n    rules, preferring --temp-dir over --output-dir over the input file\u2019s directory. The output files will only contain\n    video tracks. You have to add back other tracks yourself, like audio or subtitles, and mux them into the container of\n    your choice. Files with multiple video tracks are untested and probably won\u2019t work. File names that contain esoteric\n    characters like newlines will probably break the ffmpeg concat demuxer and will likely cause failures. Long arguments\n    can be abbreviated, as long as the abbreviation is unambiguous. Don\u2019t use this feature in scripts, because new\n    argument switches might break previously valid abbreviations. Arguments can be loaded from files using the\n    @-Notation. Use \"@/path/to/file\" to load arguments from the specified file. The file must contain one argument per\n    line. It may be useful to load a set of common arguments from a file instead of typing them out on the command line,\n    when you can re-use the same set of arguments multiple times.\n\n\n\n\nImportant notes\n---------------\n\nDue to a bug in the Python argument parser module (https://bugs.python.org/issue9334),\nThe values given for ``--global-parameters`` and ``--encoder-parameters`` MUST NOT begin with a dash.\nFor example ``--encoder-parameters \"-pix_fmt yuv420p\"`` is NOT ALLOWED, and will cause an error during the parsing\nstep. This can\u2019t be fixed from my side.\n\nBut since ffmpeg always begin with a dash, you\u2019ll run into this issue.\nAs a workaround, begin the custom ffmpeg parameters with a space,\nfor example ``\" -pix_fmt yuv420p\"`` (note the space between ``\"`` and ``-``)\nor use ``=`` to join the option and it\u2019s value like this:\n``--encoder-parameters=\"-cpu-used 3\"``\n\n\nCropping and de-interlacing\n+++++++++++++++++++++++++++\n\nSpecifying cropping parameters using ``--crop`` or using ``--deinterlace`` is incompatible with custom encoder\nsettings that contain ffmpeg video filters like ``-vf some_filter=values``.\nTrying to use both will result in ffmpeg complaining and aborting.\n\nIf you want to use a custom video filter, do not use the mentioned options.\nInstead add the filters to your custom filter chain as needed yourself.\n\n\nLoading arguments from files\n++++++++++++++++++++++++++++\n\nArguments for this program can be loaded from files.\nUse ``@/path/to/file`` as a parameter to load the parameters in the given file.\nIn the argument file, write one option per line. When setting paths,\nfor example for ``--temp-dir`` or ``--output-dir``, you do not need to put the path\nin quotation marks.\nFor best results (and long-term readability), use long style options and join the option and value with =, like:\n``--temp-dir=/path/to/temp/directory``\n\n\nTwo-Pass mode: Technical details\n++++++++++++++++++++++++++++++++\n\nTwo-Pass mode uses a simple scheduler to ensure high load throughout the encoding process, avoiding single, long running\nencoding processes remaining at the end of the encoding process and artificially delaying the whole process.\n\nThis is done by doing all first pass encodes first and then use the first pass log file size as simple metric to estimate\nthe second-pass runtime and schedule the second passes accordingly.\nThe used metric assumes that there is a linear correlation between first-pass log file size and second-pass encoding time.\nWhen the encoding tasks are sorted by the log file size and therefore by the assumed relative run time, the program will\nstart encoding long running scenes first. This will result in better multicore usage at the end of the processing.\nIt avoids starting long scenes, like the ending credits, at the end of the processs, and therefore lessens the impact of\na single, long encode delaying the whole process. With this scheduling approach, it is way more likely that the\nlast running encodings will be encoding short and easy scenes and therefore having less overall delay.\n\n\nAbout\n-----\n\nCopyright (C) 2019, Thomas Hess\n\nThis program is licensed under the GNU GENERAL PUBLIC LICENSE Version 3.\nSee the LICENSE file for details.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/luziferius/av1transcoder", "keywords": "", "license": "GPL v3+", "maintainer": "", "maintainer_email": "", "name": "av1transcoder", "package_url": "https://pypi.org/project/av1transcoder/", "platform": "", "project_url": "https://pypi.org/project/av1transcoder/", "project_urls": {"Homepage": "https://github.com/luziferius/av1transcoder"}, "release_url": "https://pypi.org/project/av1transcoder/0.4.1/", "requires_dist": null, "requires_python": "", "summary": "Transcode video files to the AV1 format using ffmpeg and libaom-av1.", "version": "0.4.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Encode AV1 videos with ffmpeg and libaom-av1.</p>\n<p>This tool takes input videos and encodes them to AV1, using the libaom-av1 encoder.\nAt the time of writing this, the reference encoder is still very slow and can\u2019t fully utilize modern multi-core CPUs.\nTo mitigate this issue, this program splits the input at scene cuts and encodes multiple scenes in parallel,\nallowing full CPU utilization and therefore faster encode times.</p>\n<p>This is a command line application only. There is no GUI.</p>\n<div id=\"how-is-the-overall-encoding-process-done\">\n<h2>How is the overall encoding process done?</h2>\n<p>This program takes multiple passes over each input file:</p>\n<ol>\n<li><p>First, it uses the ffmpeg scene cut filter to determine the scene cuts.\nThis is done to avoid splitting the video in the middle of a scene,\nbecause such a split causes an artificial and unnecessary bitrate spike.</p>\n</li>\n<li><p>It then merges all short scenes below the minimum length threshold,\nso that the overall scene length falls between some acceptable lower and upper bound.\n(Beware: Upper bounds are currently not implemented!)</p>\n</li>\n<li><p>It will then start an ffmpeg instance for each found scene, encoding the scenes independently in parallel.\nOnly a limited, configurable number of instances will run at any time to not overload the system.\nEach running scene encoding will be performed outputting into a temporary directory,\nand moved into a central scene repository directory on completion.\nThis ensures that only completed scene encodes are kept, making the process fully stoppable and resumable at any time.\nIncomplete and aborted or otherwise failing encodes will be thrown away.</p>\n<p>On resume, the program picks up any finished work, like finished\nscenes in the scene repository and skips redoing them, thus avoiding duplicate work.</p>\n</li>\n<li><p>When all scenes are encoded, the ffmpeg <tt>concat</tt> demuxer is used to join all scenes into a single video file.</p>\n</li>\n</ol>\n</div>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<ul>\n<li>Python &gt;= 3.7 (3.6 may work, but is untested)</li>\n<li>recent ffmpeg with recent and enabled libaom-av1\n(git master builds from around November 2019 for both ffmpeg and libaom-av1 work.)</li>\n<li>(A somewhat fast CPU and some gigabytes of free and writable disk space.\nThe encoding process requires about the size of the final result for temporary data during the encoding process.)</li>\n</ul>\n</div>\n<div id=\"install\">\n<h2>Install</h2>\n<p>Install from PyPI using <code>pip3 install av1transcoder</code></p>\n<p>Alternatively, to install the latest version from a local repository checkout,\nopen a terminal at the root level of your checkout (contains <tt>setup.py</tt> and this README) and run:\n<code>pip3 install .</code> (Note the dot indicating the current directory).</p>\n<p>As a third alternative, you can run the program directly from the repository checkout without installation.\nThe repository contains a simple runner script (named <tt><span class=\"pre\">av1transcoder-runner.py</span></tt>) that can be used for this purpose.</p>\n<p>Currently, there is no setup.exe or directly executable Python bundle for Windows platforms.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Execute <code>av1transcoder</code> after installation or run <code>./av1transcoder-runner.py</code> from the source tree,\nif you have cloned the development repository.\nThe program expects one or more video files as positional arguments. Each given video file will be transcoded to AV1.\nThe encoding process can be controlled using several optional command line switches.\nUse the <tt><span class=\"pre\">--help</span></tt> switch to view all possible parameters with explanations. A copy of the output is included below.\nPlease read the notes about limitations and issues below (See point \u201cImportant notes\u201d)!</p>\n<div id=\"full-help-output\">\n<h3>Full <tt><span class=\"pre\">--help</span></tt> output</h3>\n<p>For reference, here is the <tt><span class=\"pre\">--help</span></tt> output:</p>\n<pre>$ av1transcoder -h\n  usage: av1transcoder [-h] [-o OUTPUT_DIR] [-t TEMP_DIR] [-k] [-f] [-s SCENE_CUT_THRESHOLD] [-m SECONDS] [-1]\n                             [--crop TOP BOTTOM LEFT RIGHT] [-e STRING] [-g STRING]\n                             [-c MAX_CONCURRENT_ENCODES] [--dump-commands {yes,no,only}] [--deinterlace]\n                             [-L NUMBER] [-v] [-V] [--cutelog-integration] [--ffmpeg EXECUTABLE_NAME]\n                             [--ffprobe EXECUTABLE_NAME] [--ffmpeg-base DIRECTORY]\n                             input_file [input_file ...]\n\n  Transcode video files to AV1. This program takes input video files and transcodes the video track to the AV1 format\n  using the libaom-av1 reference encoder.\n\n  positional arguments:\n    input_file            Input video files. All given video files will be transcoded to AV1.\n\n  optional arguments:\n    -h, --help            show this help message and exit\n    -o OUTPUT_DIR, --output-dir OUTPUT_DIR\n                          Store the result in this directory. If set and --temp-dir is unset, also store the temporary\n                          data here. If unset, results are stored alongside the input file.\n    -t TEMP_DIR, --temp-dir TEMP_DIR\n                          Store temporary data in this directory. If unset, use the output directory set by --output-\n                          dir. If that is unset, store the temporary data alongside the input data.\n    -k, --keep-temp       Keep temporary data after the transcoding process finished. May help in resolving transcoding\n                          issues.\n    -f, --force-overwrite\n                          Force overwriting existing data. If unset and filename collisions are detected, the affected\n                          input files are skipped. If set, existing files will be overwritten.\n    -s SCENE_CUT_THRESHOLD, --scene-cut-threshold SCENE_CUT_THRESHOLD\n                          Define the threshold value for the scene cut detection filter. Accepts a decimal number in\n                          the range (0,1]. Defaults to 0.300000\n    -m SECONDS, --min-scene-length SECONDS\n                          Minimal allowed scene duration in seconds. Adjacent detected scenes are combined to have at\n                          least this duration, if possible. This is not a hard limit. It prevents splitting the input\n                          video into many small and independent encoding tasks to improve encoding efficiency. Defaults\n                          to 30\n    -1, --single-pass     Use Single-Pass encoding instead of Two-Pass encoding. Various sources indicate that this is\n                          neither recommended for libaom-av1 nor saves much time compared to Two-Pass encoding.\n    --crop TOP BOTTOM LEFT RIGHT\n                          Crop the given number of pixels from the input videos. You can specify the option multiple\n                          times to give each input file their own individual crop parameters. If more input files are\n                          given than --crop instances, the last given set of crop values will be used for all remaining\n                          input files. BEWARE: This uses an ffmpeg video filter, thus is incompatible with additional\n                          custom video filters given using --encoder-parameters. Trying to use --crop and a custom\n                          video filter at the same time will cause ffmpeg to fail.\n    -e STRING, --encoder-parameters STRING\n                          Add custom encoder parameters to the encoding process. Add all parameters as a single, quoted\n                          string. These parameters will be passed directly to all ffmpeg processes doing the encoding\n                          work. As an example, the default value is '-pix_fmt yuv420p10le -cpu-used 4 -crf 15 -frame-\n                          parallel 0 -threads 1 -auto-alt-ref 1 -lag-in-frames 8 -enable-cdef 1 -enable-global-motion 1\n                          -enable-intrabc 1', which is tuned for high quality encodes of SD material, for example from\n                          DVD sources. BEWARE: Due to a bug in Python argument parser\n                          (https://bugs.python.org/issue9334), the parameters MUST NOT begin with a dash (-) when used\n                          as --encoder-parameters \"&lt;parameters&gt;\". You MUST begin the quoted custom parameter string\n                          with a space character or use = to specify the string, like --encoder-parameters=\"-your-\n                          parameters-here\".\n    -g STRING, --global-parameters STRING\n                          Add custom global parameters to all ffmpeg processes. These are passed in as the first\n                          arguments to ffmpeg before the input file and can be used to enable hardware acceleration or\n                          similar global switches. Example: '-hwaccel cuvid'. When using this to enable hardware\n                          decoding, ensure that the HW decoder can handle at least --max-concurrent-encodes parallel\n                          decoder instances. Default is to not add parameters at all, leaving everything at the default\n                          settings. BEWARE: The issue described for --encoder-parameters applies here, too.\n    -c MAX_CONCURRENT_ENCODES, --max-concurrent-encodes MAX_CONCURRENT_ENCODES\n                          Run up to this many ffmpeg instances in parallel. Takes a positive integer, defaults to 8\n    --dump-commands {yes,no,only}\n                          Dump executed ffmpeg commands in text files for later examination or manual execution. The\n                          files will be placed in the temporary directory. If set to 'only', this program will only\n                          dump the command lines but not actually execute encoding tasks. The scene detection will\n                          always be executed even if set to 'only', because the later steps require the data to be\n                          present. Defaults to 'no'. Setting to a non-default value implies setting '--keep-temp'.\n    --deinterlace         Deinterlace the interlaced input video using the yadif video filter. BEWARE: This uses an\n                          ffmpeg video filter, thus is incompatible with additional custom video filters given using\n                          --encoder-parameters. If you use custom video filters or require another deinterlacer, like\n                          IVTC, add the de-interlace filter to your filter chain instead of using this option.\n    -L NUMBER, --limit-encodes NUMBER\n                          Stop after encoding this number of scenes. Useful, if you plan to split the encoding process\n                          over multiple sessions. If given, this program will encode this NUMBER of previously not\n                          encoded scenes. Only if all scenes are finished, the final result will be assembled from\n                          scenes. Default is to not limit the number of encodes. For the sake of this option, the two\n                          encodes needed for a Two-Pass encode count as one encode towards this limit. For now, setting\n                          this option implies --keep-temp.\n    -v, --version         show program's version number and exit\n    -V, --verbose         Increase output verbosity. Also show debug messages on the standard output.\n    --cutelog-integration\n                          Connect to a running cutelog instance with default settings to display the full program log.\n                          See https://github.com/busimus/cutelog for details.\n    --ffmpeg EXECUTABLE_NAME\n                          Specify the ffmpeg executable name. Can be a relative or absolute path or a simple name (i.e.\n                          an executable name without path separators). If given a simple name, the system PATH variable\n                          will be searched. Defaults to \"ffmpeg\"\n    --ffprobe EXECUTABLE_NAME\n                          Specify the ffprobe executable name. Can be a relative or absolute path or a simple name\n                          (i.e. an executable name without path separators). If given a simple name, the system PATH\n                          variable will be searched. Defaults to \"ffprobe\"\n    --ffmpeg-base DIRECTORY\n                          Specify the path to a custom ffmpeg installation, for example \"/opt/ffmpeg/bin\". If given,\n                          both --ffmpeg and --ffprobe arguments are treated as a path relative to this path. Not set by\n                          default.\n\n  The resulting files are named like &lt;input_file_name&gt;.AV1.mkv and are placed alongside the input file, or into the\n  output directory given by --output-dir. During the encoding process, each input file will have it\u2019s own temporary\n  directory named &lt;input_file_name_with_extension&gt;.temp. The temporary directory is placed according to the placement\n  rules, preferring --temp-dir over --output-dir over the input file\u2019s directory. The output files will only contain\n  video tracks. You have to add back other tracks yourself, like audio or subtitles, and mux them into the container of\n  your choice. Files with multiple video tracks are untested and probably won\u2019t work. File names that contain esoteric\n  characters like newlines will probably break the ffmpeg concat demuxer and will likely cause failures. Long arguments\n  can be abbreviated, as long as the abbreviation is unambiguous. Don\u2019t use this feature in scripts, because new\n  argument switches might break previously valid abbreviations. Arguments can be loaded from files using the\n  @-Notation. Use \"@/path/to/file\" to load arguments from the specified file. The file must contain one argument per\n  line. It may be useful to load a set of common arguments from a file instead of typing them out on the command line,\n  when you can re-use the same set of arguments multiple times.\n</pre>\n</div>\n</div>\n<div id=\"important-notes\">\n<h2>Important notes</h2>\n<p>Due to a bug in the Python argument parser module (<a href=\"https://bugs.python.org/issue9334\" rel=\"nofollow\">https://bugs.python.org/issue9334</a>),\nThe values given for <tt><span class=\"pre\">--global-parameters</span></tt> and <tt><span class=\"pre\">--encoder-parameters</span></tt> MUST NOT begin with a dash.\nFor example <tt><span class=\"pre\">--encoder-parameters</span> <span class=\"pre\">\"-pix_fmt</span> yuv420p\"</tt> is NOT ALLOWED, and will cause an error during the parsing\nstep. This can\u2019t be fixed from my side.</p>\n<p>But since ffmpeg always begin with a dash, you\u2019ll run into this issue.\nAs a workaround, begin the custom ffmpeg parameters with a space,\nfor example <tt>\" <span class=\"pre\">-pix_fmt</span> yuv420p\"</tt> (note the space between <tt>\"</tt> and <tt>-</tt>)\nor use <tt>=</tt> to join the option and it\u2019s value like this:\n<tt><span class=\"pre\">--encoder-parameters=\"-cpu-used</span> 3\"</tt></p>\n<div id=\"cropping-and-de-interlacing\">\n<h3>Cropping and de-interlacing</h3>\n<p>Specifying cropping parameters using <tt><span class=\"pre\">--crop</span></tt> or using <tt><span class=\"pre\">--deinterlace</span></tt> is incompatible with custom encoder\nsettings that contain ffmpeg video filters like <tt><span class=\"pre\">-vf</span> some_filter=values</tt>.\nTrying to use both will result in ffmpeg complaining and aborting.</p>\n<p>If you want to use a custom video filter, do not use the mentioned options.\nInstead add the filters to your custom filter chain as needed yourself.</p>\n</div>\n<div id=\"loading-arguments-from-files\">\n<h3>Loading arguments from files</h3>\n<p>Arguments for this program can be loaded from files.\nUse <tt>@/path/to/file</tt> as a parameter to load the parameters in the given file.\nIn the argument file, write one option per line. When setting paths,\nfor example for <tt><span class=\"pre\">--temp-dir</span></tt> or <tt><span class=\"pre\">--output-dir</span></tt>, you do not need to put the path\nin quotation marks.\nFor best results (and long-term readability), use long style options and join the option and value with =, like:\n<tt><span class=\"pre\">--temp-dir=/path/to/temp/directory</span></tt></p>\n</div>\n<div id=\"two-pass-mode-technical-details\">\n<h3>Two-Pass mode: Technical details</h3>\n<p>Two-Pass mode uses a simple scheduler to ensure high load throughout the encoding process, avoiding single, long running\nencoding processes remaining at the end of the encoding process and artificially delaying the whole process.</p>\n<p>This is done by doing all first pass encodes first and then use the first pass log file size as simple metric to estimate\nthe second-pass runtime and schedule the second passes accordingly.\nThe used metric assumes that there is a linear correlation between first-pass log file size and second-pass encoding time.\nWhen the encoding tasks are sorted by the log file size and therefore by the assumed relative run time, the program will\nstart encoding long running scenes first. This will result in better multicore usage at the end of the processing.\nIt avoids starting long scenes, like the ending credits, at the end of the processs, and therefore lessens the impact of\na single, long encode delaying the whole process. With this scheduling approach, it is way more likely that the\nlast running encodings will be encoding short and easy scenes and therefore having less overall delay.</p>\n</div>\n</div>\n<div id=\"about\">\n<h2>About</h2>\n<p>Copyright (C) 2019, Thomas Hess</p>\n<p>This program is licensed under the GNU GENERAL PUBLIC LICENSE Version 3.\nSee the LICENSE file for details.</p>\n</div>\n\n          </div>"}, "last_serial": 7136112, "releases": {"0.3.2": [{"comment_text": "", "digests": {"md5": "46131bcccbf4cf9acee0b8d96d82e52f", "sha256": "470d1a2c2db3202af29c64dac88ed9dbeb8bbb66c6c344ab4046b8ec41e8f12c"}, "downloads": -1, "filename": "av1transcoder-0.3.2-py3-none-any.whl", "has_sig": false, "md5_digest": "46131bcccbf4cf9acee0b8d96d82e52f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 51017, "upload_time": "2019-11-28T17:35:30", "upload_time_iso_8601": "2019-11-28T17:35:30.624843Z", "url": "https://files.pythonhosted.org/packages/8b/28/1dcc293d0251529784b8d28a8d46c6e864f109407269239b95eceac1181c/av1transcoder-0.3.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b5d2f3c8157cae49ddf8f5d6aead171d", "sha256": "2dc2f1c251d9015493b998ad2ee3b25643d2e0f8f102ab0fc01b31c3c701cb75"}, "downloads": -1, "filename": "av1transcoder-0.3.2.tar.gz", "has_sig": false, "md5_digest": "b5d2f3c8157cae49ddf8f5d6aead171d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 45698, "upload_time": "2019-11-28T17:35:33", "upload_time_iso_8601": "2019-11-28T17:35:33.712402Z", "url": "https://files.pythonhosted.org/packages/07/7e/e8f2cc7b0a12c3ee2c2132736a894cf85f32b3478f0bb5569a3c0e7364a2/av1transcoder-0.3.2.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "65bee4c91d1061bdf7865af5b5c321e5", "sha256": "281f1b09103f019e539d1b513a6e1ba058275b20735cc522b11ba68363c8b518"}, "downloads": -1, "filename": "av1transcoder-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "65bee4c91d1061bdf7865af5b5c321e5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 51238, "upload_time": "2019-12-04T13:17:20", "upload_time_iso_8601": "2019-12-04T13:17:20.791142Z", "url": "https://files.pythonhosted.org/packages/96/24/bdc00cf7336bdb2ca5ff12f5c3b89a21c86ec08c63988f302a048842d3ec/av1transcoder-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c4237eebf31d7433e0c75442db3e9203", "sha256": "f4b106254ca0557af106a417a2f9ee6ca729074bdca3d87f51259255ca55138f"}, "downloads": -1, "filename": "av1transcoder-0.4.0.tar.gz", "has_sig": false, "md5_digest": "c4237eebf31d7433e0c75442db3e9203", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 45888, "upload_time": "2019-12-04T13:17:23", "upload_time_iso_8601": "2019-12-04T13:17:23.186789Z", "url": "https://files.pythonhosted.org/packages/6d/40/abe8ed532aab6bb6ab962b999d9293d020875b8352b48fc8f2d3496e7f28/av1transcoder-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "54d0a051f228eb055b33db18114b124a", "sha256": "483ea7298b202d61d56863ee5e811a3e077c6bacb1be94e082baac5d4c72fb1a"}, "downloads": -1, "filename": "av1transcoder-0.4.1-py3-none-any.whl", "has_sig": false, "md5_digest": "54d0a051f228eb055b33db18114b124a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 51301, "upload_time": "2020-04-30T09:32:29", "upload_time_iso_8601": "2020-04-30T09:32:29.644593Z", "url": "https://files.pythonhosted.org/packages/bb/d9/b642532936443d50c4fb698aee137ab81c05444f6985264e658963bb1ae6/av1transcoder-0.4.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "61a470d2fb318883804bc2c5c9e0de3c", "sha256": "dbd7de919dd29288654631d262d0b662c22c320e6e2393aaf03fa60d64935768"}, "downloads": -1, "filename": "av1transcoder-0.4.1.tar.gz", "has_sig": false, "md5_digest": "61a470d2fb318883804bc2c5c9e0de3c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 46380, "upload_time": "2020-04-30T09:32:32", "upload_time_iso_8601": "2020-04-30T09:32:32.148080Z", "url": "https://files.pythonhosted.org/packages/c4/b2/1d6f88168761a17a3b920afc1d920cf634f3c5a4c70a3b0cef955389c9fa/av1transcoder-0.4.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "54d0a051f228eb055b33db18114b124a", "sha256": "483ea7298b202d61d56863ee5e811a3e077c6bacb1be94e082baac5d4c72fb1a"}, "downloads": -1, "filename": "av1transcoder-0.4.1-py3-none-any.whl", "has_sig": false, "md5_digest": "54d0a051f228eb055b33db18114b124a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 51301, "upload_time": "2020-04-30T09:32:29", "upload_time_iso_8601": "2020-04-30T09:32:29.644593Z", "url": "https://files.pythonhosted.org/packages/bb/d9/b642532936443d50c4fb698aee137ab81c05444f6985264e658963bb1ae6/av1transcoder-0.4.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "61a470d2fb318883804bc2c5c9e0de3c", "sha256": "dbd7de919dd29288654631d262d0b662c22c320e6e2393aaf03fa60d64935768"}, "downloads": -1, "filename": "av1transcoder-0.4.1.tar.gz", "has_sig": false, "md5_digest": "61a470d2fb318883804bc2c5c9e0de3c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 46380, "upload_time": "2020-04-30T09:32:32", "upload_time_iso_8601": "2020-04-30T09:32:32.148080Z", "url": "https://files.pythonhosted.org/packages/c4/b2/1d6f88168761a17a3b920afc1d920cf634f3c5a4c70a3b0cef955389c9fa/av1transcoder-0.4.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:16:06 2020"}