{"info": {"author": "Rasmus Scholer Sorensen", "author_email": "rasmusscholer@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: End Users/Desktop", "Intended Audience :: Science/Research", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: MacOS", "Operating System :: Microsoft", "Operating System :: POSIX :: Linux", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Build Tools"], "description": "# git-status-checker\n\nYet another git status checker, in python. \nBecause none of the bash-based ones were working on my Windows box with git-bash...\n\n\n## What it does:\n\nThis is just a script that\n(1) finds git repositories given a list of base directories, and\n(2) checks if any of the repositories have uncommitted changes or needs to be updated with origin, i.e. if \nit has changes that have not been pushed, or if origin has changes that have not been pulled.\n\n\n## Installation:\n\nYou can install git-status-checker with pip:\n\n```shell\n> pip install git-status-checker\n```\n\nBy default, this will get you the most recent release from PyPI.\n\nIf you want to use the most recent developer version from GitHub,\ne.g. if you want to make changes to how git-status-checker works,\nyou can download or clone the git-status-checker repository, and then \nadd a `-e` flag when installing with `pip` to install in \"editable\" mode:\n`pip install -e git-status-checker`.\n\n\nInstallation is not strictly required, it is perfectly possible to use \ngit-status-checker by running `git_status_checker.py` as a plain python script.\nThe only requirement is that you have `pyyaml` installed (is used to save script configuration files).\nJust download the `git_status_checker.py` script (or clone the whole repository),\nand run the script using whatever Python interpreter you have (Python 3+ only, no legacy python), e.g.:\n\n```\n> python /path/to/git-status-checker/git_status_checker/git_status_checker.py\n```\n\nHowever, the advantage of installing git-status-checker with pip is that you don't have\nto remember where you placed the script, you can always just run it using\neither `> python -m git_status_checker` or simply `> git-status-checker`.\n\n\n\n## Recommended use, examples:\n\n\n### Basic usage:\n\nOpen your command prompt / terminal and navigate to where you keep your git repositories, e.g.:\n\n```\ncd ~/Dev\n```\n\nIf you have *installed* git-status-checker, you can then just type:\n\n```\n~/Dev>  python -m git_status_checker\n```\n\nAlternatively, if you have simply downloaded `git_status_checker`, then just\nrun `git_status_checker.py` as a python script:\n\n```\n~/Dev>  python /path/to/git_status_checker.py\n```\n\n\nThat's it! `git-status-checker` will look in all sub-folders, searching for\ngit repositories, and for every repository it finds, it will check to see if it has outstanding \nchanges to be committed, or commits that have not been pushed to origin, \nand display the results in the terminal.\n\n* NOTE: Many of the examples below assumes git-status-checker is installed. \nIf you are running `git_status_checker.py` as a script, rather than as an installed module,\njust replace `python -m git_status_checker` with `python /path/to/git_status_checker.py`.\n\nThe installation process will also install `git-status-checker` as a directly-executable \nprogram, so instead of typing `python -m git_status_checker`, you can also type:\n\n```\n~/Dev>  git-status-checker\n```\n\n\n### Specifying directories to search for git repositories:\n\nIt is possible to tell git-status-checker where to search for git repositories,\njust add the base directories as arguments:\n\n```\n> python -m git_status_checker ~/Dev ~/Documents\n```\n\nThe script will walk each of the given directories (`~/Dev` and `~/Documents`) searching for git \nrepositories, then print the status for all repositories with outstanding commits or that can be \npushed or fetched to/from origin.\n\nAnd yes, you can use \"~\" and \"*\" to specify files and folders, even on Windows.\n\n\n### Using a file containing all the base-dirs\n\nIf you have a lot of git repositories scattered in multiple locations, you may want to create a file\ncontaining each location, and then just load that file with `git_status_checker.py`,\ninstead of having to type all locations as arguments every time you run `git-status-checker`:\n\nFirst, produce a list of places (\"base-dirs\") where you have git repositories and save it to a file.\nThese are just \"top level\" folders, and might look something like:\n\n```\n~/Dev/src-repos\n~/Documents/Work-projects\n~/Documents/Personal-projects\n```\n\nThen run git_status_checker.py with:\n\n```\n> python -m git_status_checker -f <file-with-list-of-basedirs>\n```\n\n\n\n### Running on a schedule, Windows:\n\nIt is convenient to run `git-status-checker` on a regular schedule, \ne.g. once a week or every afternoon, and display a message if any uncommitted changes \nor outstanding commits where found.\n\nOne way to do this in Windows is to use Task Scheduler to run `git_status_checker`. \nTo do this:\n\n1. Open Task Scheduler \n2. Optionally create a Task Library folder to store your own tasks in, \nso they are not mixed with all the other Task Scheduler tasks.\n3. Select \"Create Basic Task...\" (e.g. from the \"Action(s)\" panel or menu item, or right-click the folder).\n4. Under name, type something like \"Git status checker of Dev and Projects folders\", \n   and under description something like \"Run git_status_checker.py script on ~/Dev and ~/Documents/Projects folders\".\n   (adapt name and description according to where your git repositories are located).\n5. Under \"Trigger\", select \"Daily\" (or weekly, etc). You can adjust this afterwards.\n6. Under the next tab, select when you would like the task to run.\n7. Under \"Action\", select \"Start a program\".\n8. Under \"Start a Program\", the Program/script should be the python interpreter to use, e.g. `python`,\n   and \"Add arguments\" should be `-m git_status_checker` (to run git-status-checker), \n   followed by the git-status-checker arguments needed, e.g.:\n   `-m git_status_checker --wait --ignore-untracked \"~/Dev\" \"~/Documents/Projects\"`\n   to run git-status-checker for all git repositories inside `~/Dev` and `~/Documents/Projects`,\n   ignoring untracked files. We add the `--wait` flag so the command prompt window will stay open \n   if outstanding commits or pushes are found. \n    * OBS: It is a good idea to copy/paste the values you just entered above into a command prompt,\n      and check that git-status-checker runs correctly before saving your task.\n9. On the \"Finish\" screen, review your scheduled task and press \"Finish\".\n10. Test that your program works, by right-clicking your task and select \"Run\".\n\n\n\n\n\n\n### Running in a batch script:\n\nIn some circumstances you may want to run `git_status_checker.py` from within batch script.\n\nSee batch script examples in the `examples/` folder.\n\n\n\n## Variations\n\nThe script provides for a range of choices on how you use it:\n* You can provide base-dirs directly at the command line\n* You can use multiple base-dirs-files.\n* You can provide a --config file with command line args (if you don't want to specify them on the command line).\n* You can use --no-recursive command line argument to disable recursive walking (it is then assumed that all \"basedirs\" are git repositories).\n* You can use the --ignorefile argument to provide glob filters to exclude directories from scanning.\n* If --ignorefile is not given but the current directory contains a file \".git_checker_ignore\", this is used as ignorefile. (Similar to how git automatically ignores files in .gitignore).\n\n\n## Exit codes:\n\nThe program will exit with the following exit codes:\n\n* `0` \u2192 Indicating that NO \"dirty\" repositories were found (repositories with outstanding \n  changes to be committed or commits to be pushed/pulled).\n* `1` \u2192 Indicating that \"dirty\" repositories were found.\n* Other exit codes indicates that there was an error running the program,\n  e.g. bad arguments.\n\n\n## Command line reference:\n\nYou can always run git-status-checker with the `--help` flag to see a quick reference on \nthe various options and arguments that can be used with git-status-checker:\n\n<!-- OBS: Set window width to 90 chars before running git-status-checker --help -->\n\n```\n> git-status-checker --help\n\nusage: git-status-checker [-h] [--verbose] [--testing] [--loglevel LOGLEVEL]\n                          [--recursive] [--no-recursive] [--followlinks]\n                          [--no-followlinks] [--ignore-untracked]\n                          [--no-check-remote-tracking-branch] [--check-fetch] [--wait]\n                          [--config CONFIG] [--dirfile DIRFILE [DIRFILE ...]]\n                          [--ignorefile IGNOREFILE]\n                          [basedir [basedir ...]]\n\nGit status checker script.\n\npositional arguments:\n  basedir               One or more base directories to scan. A directory can be either\n                        a git repository, or a directory containing one or more git\n                        repositories. Basically it just scans recursively, considering\n                        all directories with a '.git' subfolder a git repository. If no\n                        basedirs are given, the current working directory is used.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --verbose, -v         Increase verbosity.\n  --testing             Run app in simple test mode.\n  --loglevel LOGLEVEL   Set logging output threshold level.\n  --recursive           Scan the given basedirs recursively. This is the default.\n  --no-recursive        Disable recursive scanning. This implies that all the given\n                        basedirs are git repositories, since sub-directories are not\n                        traversed.\n  --followlinks         Follow symbolic links when walking/scanning the basedirs.\n  --no-followlinks\n  --ignore-untracked    Ignore untracked files.\n  --no-check-remote-tracking-branch\n                        Do not check if remote tracking branches have been configured\n                        for the currently checked-out worktree. Default is to report\n                        missing remote tracking branches, to ensure that a all work is\n                        committed and pushed.\n  --check-fetch         Check if origin has changes that can be fetched. This is\n                        disabled by default, since it requires making a lot of remote\n                        requests which could be expensive.\n  --wait                If changes are found, wait for input before continuing. This is\n                        typically used to prevent the command prompt from closing when\n                        executing as e.g. a scheduled task.\n  --config CONFIG, -c CONFIG\n                        Instead of providing command line arguments at the command line,\n                        you can write arguments in a yaml file (as a dictionary).\n  --dirfile DIRFILE [DIRFILE ...], -f DIRFILE [DIRFILE ...]\n                        Instead of listing basedirs on the command line, you can list\n                        them in a file.\n  --ignorefile IGNOREFILE\n                        File with directories to ignore (glob patterns). Note: Basedirs\n                        are NEVER ignored by glob patterns in the ignorefile, the\n                        exclusion only appplies to sub-directories a given basedir.\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/scholer/git_status_checker/archive/master.zip", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/scholer/git-status-checker", "keywords": "Git,Version control,Development tools", "license": "GNU General Public License v3 (GPLv3)", "maintainer": "", "maintainer_email": "", "name": "git-status-checker", "package_url": "https://pypi.org/project/git-status-checker/", "platform": "", "project_url": "https://pypi.org/project/git-status-checker/", "project_urls": {"Bug Tracker": "https://github.com/scholer/git-status-checker/issues", "Download": "https://github.com/scholer/git_status_checker/archive/master.zip", "Homepage": "https://github.com/scholer/git-status-checker", "Source Code": "https://github.com/scholer/git-status-checker"}, "release_url": "https://pypi.org/project/git-status-checker/2020.4.14/", "requires_dist": ["pyyaml"], "requires_python": "", "summary": "Check git repositories for uncommitted or unpushed changes.", "version": "2020.4.14", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>git-status-checker</h1>\n<p>Yet another git status checker, in python.\nBecause none of the bash-based ones were working on my Windows box with git-bash...</p>\n<h2>What it does:</h2>\n<p>This is just a script that\n(1) finds git repositories given a list of base directories, and\n(2) checks if any of the repositories have uncommitted changes or needs to be updated with origin, i.e. if\nit has changes that have not been pushed, or if origin has changes that have not been pulled.</p>\n<h2>Installation:</h2>\n<p>You can install git-status-checker with pip:</p>\n<pre>&gt; pip install git-status-checker\n</pre>\n<p>By default, this will get you the most recent release from PyPI.</p>\n<p>If you want to use the most recent developer version from GitHub,\ne.g. if you want to make changes to how git-status-checker works,\nyou can download or clone the git-status-checker repository, and then\nadd a <code>-e</code> flag when installing with <code>pip</code> to install in \"editable\" mode:\n<code>pip install -e git-status-checker</code>.</p>\n<p>Installation is not strictly required, it is perfectly possible to use\ngit-status-checker by running <code>git_status_checker.py</code> as a plain python script.\nThe only requirement is that you have <code>pyyaml</code> installed (is used to save script configuration files).\nJust download the <code>git_status_checker.py</code> script (or clone the whole repository),\nand run the script using whatever Python interpreter you have (Python 3+ only, no legacy python), e.g.:</p>\n<pre><code>&gt; python /path/to/git-status-checker/git_status_checker/git_status_checker.py\n</code></pre>\n<p>However, the advantage of installing git-status-checker with pip is that you don't have\nto remember where you placed the script, you can always just run it using\neither <code>&gt; python -m git_status_checker</code> or simply <code>&gt; git-status-checker</code>.</p>\n<h2>Recommended use, examples:</h2>\n<h3>Basic usage:</h3>\n<p>Open your command prompt / terminal and navigate to where you keep your git repositories, e.g.:</p>\n<pre><code>cd ~/Dev\n</code></pre>\n<p>If you have <em>installed</em> git-status-checker, you can then just type:</p>\n<pre><code>~/Dev&gt;  python -m git_status_checker\n</code></pre>\n<p>Alternatively, if you have simply downloaded <code>git_status_checker</code>, then just\nrun <code>git_status_checker.py</code> as a python script:</p>\n<pre><code>~/Dev&gt;  python /path/to/git_status_checker.py\n</code></pre>\n<p>That's it! <code>git-status-checker</code> will look in all sub-folders, searching for\ngit repositories, and for every repository it finds, it will check to see if it has outstanding\nchanges to be committed, or commits that have not been pushed to origin,\nand display the results in the terminal.</p>\n<ul>\n<li>NOTE: Many of the examples below assumes git-status-checker is installed.\nIf you are running <code>git_status_checker.py</code> as a script, rather than as an installed module,\njust replace <code>python -m git_status_checker</code> with <code>python /path/to/git_status_checker.py</code>.</li>\n</ul>\n<p>The installation process will also install <code>git-status-checker</code> as a directly-executable\nprogram, so instead of typing <code>python -m git_status_checker</code>, you can also type:</p>\n<pre><code>~/Dev&gt;  git-status-checker\n</code></pre>\n<h3>Specifying directories to search for git repositories:</h3>\n<p>It is possible to tell git-status-checker where to search for git repositories,\njust add the base directories as arguments:</p>\n<pre><code>&gt; python -m git_status_checker ~/Dev ~/Documents\n</code></pre>\n<p>The script will walk each of the given directories (<code>~/Dev</code> and <code>~/Documents</code>) searching for git\nrepositories, then print the status for all repositories with outstanding commits or that can be\npushed or fetched to/from origin.</p>\n<p>And yes, you can use \"~\" and \"*\" to specify files and folders, even on Windows.</p>\n<h3>Using a file containing all the base-dirs</h3>\n<p>If you have a lot of git repositories scattered in multiple locations, you may want to create a file\ncontaining each location, and then just load that file with <code>git_status_checker.py</code>,\ninstead of having to type all locations as arguments every time you run <code>git-status-checker</code>:</p>\n<p>First, produce a list of places (\"base-dirs\") where you have git repositories and save it to a file.\nThese are just \"top level\" folders, and might look something like:</p>\n<pre><code>~/Dev/src-repos\n~/Documents/Work-projects\n~/Documents/Personal-projects\n</code></pre>\n<p>Then run git_status_checker.py with:</p>\n<pre><code>&gt; python -m git_status_checker -f &lt;file-with-list-of-basedirs&gt;\n</code></pre>\n<h3>Running on a schedule, Windows:</h3>\n<p>It is convenient to run <code>git-status-checker</code> on a regular schedule,\ne.g. once a week or every afternoon, and display a message if any uncommitted changes\nor outstanding commits where found.</p>\n<p>One way to do this in Windows is to use Task Scheduler to run <code>git_status_checker</code>.\nTo do this:</p>\n<ol>\n<li>Open Task Scheduler</li>\n<li>Optionally create a Task Library folder to store your own tasks in,\nso they are not mixed with all the other Task Scheduler tasks.</li>\n<li>Select \"Create Basic Task...\" (e.g. from the \"Action(s)\" panel or menu item, or right-click the folder).</li>\n<li>Under name, type something like \"Git status checker of Dev and Projects folders\",\nand under description something like \"Run git_status_checker.py script on ~/Dev and ~/Documents/Projects folders\".\n(adapt name and description according to where your git repositories are located).</li>\n<li>Under \"Trigger\", select \"Daily\" (or weekly, etc). You can adjust this afterwards.</li>\n<li>Under the next tab, select when you would like the task to run.</li>\n<li>Under \"Action\", select \"Start a program\".</li>\n<li>Under \"Start a Program\", the Program/script should be the python interpreter to use, e.g. <code>python</code>,\nand \"Add arguments\" should be <code>-m git_status_checker</code> (to run git-status-checker),\nfollowed by the git-status-checker arguments needed, e.g.:\n<code>-m git_status_checker --wait --ignore-untracked \"~/Dev\" \"~/Documents/Projects\"</code>\nto run git-status-checker for all git repositories inside <code>~/Dev</code> and <code>~/Documents/Projects</code>,\nignoring untracked files. We add the <code>--wait</code> flag so the command prompt window will stay open\nif outstanding commits or pushes are found.\n<ul>\n<li>OBS: It is a good idea to copy/paste the values you just entered above into a command prompt,\nand check that git-status-checker runs correctly before saving your task.</li>\n</ul>\n</li>\n<li>On the \"Finish\" screen, review your scheduled task and press \"Finish\".</li>\n<li>Test that your program works, by right-clicking your task and select \"Run\".</li>\n</ol>\n<h3>Running in a batch script:</h3>\n<p>In some circumstances you may want to run <code>git_status_checker.py</code> from within batch script.</p>\n<p>See batch script examples in the <code>examples/</code> folder.</p>\n<h2>Variations</h2>\n<p>The script provides for a range of choices on how you use it:</p>\n<ul>\n<li>You can provide base-dirs directly at the command line</li>\n<li>You can use multiple base-dirs-files.</li>\n<li>You can provide a --config file with command line args (if you don't want to specify them on the command line).</li>\n<li>You can use --no-recursive command line argument to disable recursive walking (it is then assumed that all \"basedirs\" are git repositories).</li>\n<li>You can use the --ignorefile argument to provide glob filters to exclude directories from scanning.</li>\n<li>If --ignorefile is not given but the current directory contains a file \".git_checker_ignore\", this is used as ignorefile. (Similar to how git automatically ignores files in .gitignore).</li>\n</ul>\n<h2>Exit codes:</h2>\n<p>The program will exit with the following exit codes:</p>\n<ul>\n<li><code>0</code> \u2192 Indicating that NO \"dirty\" repositories were found (repositories with outstanding\nchanges to be committed or commits to be pushed/pulled).</li>\n<li><code>1</code> \u2192 Indicating that \"dirty\" repositories were found.</li>\n<li>Other exit codes indicates that there was an error running the program,\ne.g. bad arguments.</li>\n</ul>\n<h2>Command line reference:</h2>\n<p>You can always run git-status-checker with the <code>--help</code> flag to see a quick reference on\nthe various options and arguments that can be used with git-status-checker:</p>\n\n<pre><code>&gt; git-status-checker --help\n\nusage: git-status-checker [-h] [--verbose] [--testing] [--loglevel LOGLEVEL]\n                          [--recursive] [--no-recursive] [--followlinks]\n                          [--no-followlinks] [--ignore-untracked]\n                          [--no-check-remote-tracking-branch] [--check-fetch] [--wait]\n                          [--config CONFIG] [--dirfile DIRFILE [DIRFILE ...]]\n                          [--ignorefile IGNOREFILE]\n                          [basedir [basedir ...]]\n\nGit status checker script.\n\npositional arguments:\n  basedir               One or more base directories to scan. A directory can be either\n                        a git repository, or a directory containing one or more git\n                        repositories. Basically it just scans recursively, considering\n                        all directories with a '.git' subfolder a git repository. If no\n                        basedirs are given, the current working directory is used.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --verbose, -v         Increase verbosity.\n  --testing             Run app in simple test mode.\n  --loglevel LOGLEVEL   Set logging output threshold level.\n  --recursive           Scan the given basedirs recursively. This is the default.\n  --no-recursive        Disable recursive scanning. This implies that all the given\n                        basedirs are git repositories, since sub-directories are not\n                        traversed.\n  --followlinks         Follow symbolic links when walking/scanning the basedirs.\n  --no-followlinks\n  --ignore-untracked    Ignore untracked files.\n  --no-check-remote-tracking-branch\n                        Do not check if remote tracking branches have been configured\n                        for the currently checked-out worktree. Default is to report\n                        missing remote tracking branches, to ensure that a all work is\n                        committed and pushed.\n  --check-fetch         Check if origin has changes that can be fetched. This is\n                        disabled by default, since it requires making a lot of remote\n                        requests which could be expensive.\n  --wait                If changes are found, wait for input before continuing. This is\n                        typically used to prevent the command prompt from closing when\n                        executing as e.g. a scheduled task.\n  --config CONFIG, -c CONFIG\n                        Instead of providing command line arguments at the command line,\n                        you can write arguments in a yaml file (as a dictionary).\n  --dirfile DIRFILE [DIRFILE ...], -f DIRFILE [DIRFILE ...]\n                        Instead of listing basedirs on the command line, you can list\n                        them in a file.\n  --ignorefile IGNOREFILE\n                        File with directories to ignore (glob patterns). Note: Basedirs\n                        are NEVER ignored by glob patterns in the ignorefile, the\n                        exclusion only appplies to sub-directories a given basedir.\n</code></pre>\n\n          </div>"}, "last_serial": 7017557, "releases": {"2020.3.2": [{"comment_text": "", "digests": {"md5": "0ab15091c4b582dcc74396d6daa38bec", "sha256": "6fc4841bce5e7adadf7e9b7bb0b8b2195d96074daa5a059cabfca8a6191589db"}, "downloads": -1, "filename": "git_status_checker-2020.3.2-py3-none-any.whl", "has_sig": false, "md5_digest": "0ab15091c4b582dcc74396d6daa38bec", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23538, "upload_time": "2020-03-02T16:30:23", "upload_time_iso_8601": "2020-03-02T16:30:23.146806Z", "url": "https://files.pythonhosted.org/packages/0d/a9/b7f7e8e2c01528b9ad9c77897f68202b742cb77f283eb284147ca5bb379d/git_status_checker-2020.3.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9c1d5197adf6e1fc71de9e5a666b5fdd", "sha256": "f272ff2dfeb88fe7562a96c7b53d3c5b928d6b6968e483cb935fecf088da1a60"}, "downloads": -1, "filename": "git-status-checker-2020.3.2.tar.gz", "has_sig": false, "md5_digest": "9c1d5197adf6e1fc71de9e5a666b5fdd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25017, "upload_time": "2020-03-02T16:30:26", "upload_time_iso_8601": "2020-03-02T16:30:26.980772Z", "url": "https://files.pythonhosted.org/packages/df/ac/e06cf993faeea6ff4f1f2e0817ed0505ea35e999aa6b0e397af8bba4634d/git-status-checker-2020.3.2.tar.gz", "yanked": false}], "2020.3.27": [{"comment_text": "", "digests": {"md5": "183c4ff354547e0fd6d3855f422db964", "sha256": "6b14322165536394cfaacfb0b7a3a9d1ddf7f7c25f357b6696493c95da6b6de4"}, "downloads": -1, "filename": "git_status_checker-2020.3.27-py3-none-any.whl", "has_sig": false, "md5_digest": "183c4ff354547e0fd6d3855f422db964", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 24200, "upload_time": "2020-03-31T11:42:34", "upload_time_iso_8601": "2020-03-31T11:42:34.799810Z", "url": "https://files.pythonhosted.org/packages/de/33/a529a3ba13226f51ee2b805f761fbf26241e01951c1348f18d47d4cd5aa5/git_status_checker-2020.3.27-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "69b17e6e9ed0dcdfdb1235ed1cdf43be", "sha256": "42bd69dfe46096db0dce1073df38bffffab54653115eed90ecb4792c40b8aa83"}, "downloads": -1, "filename": "git-status-checker-2020.3.27.tar.gz", "has_sig": false, "md5_digest": "69b17e6e9ed0dcdfdb1235ed1cdf43be", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28300, "upload_time": "2020-03-31T11:42:36", "upload_time_iso_8601": "2020-03-31T11:42:36.145980Z", "url": "https://files.pythonhosted.org/packages/f7/b0/f0aca0c9d4714f7e7896c05320c9f8f4f8d1cf2b884dc7123e2c133189fc/git-status-checker-2020.3.27.tar.gz", "yanked": false}], "2020.3.31": [{"comment_text": "", "digests": {"md5": "0a810a49de4d59c5bc4166b4fb0a69d8", "sha256": "c24e7d3c7947f51834eb09a5ab3d3b1419f4afa7b9557f7dc273ec3f1f24b679"}, "downloads": -1, "filename": "git_status_checker-2020.3.31-py3-none-any.whl", "has_sig": false, "md5_digest": "0a810a49de4d59c5bc4166b4fb0a69d8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 24654, "upload_time": "2020-03-31T12:43:59", "upload_time_iso_8601": "2020-03-31T12:43:59.232919Z", "url": "https://files.pythonhosted.org/packages/45/91/2bbd00f1345fae2be3a42cd101a59fdcddd67ea2aa90cc9023c6077b38a6/git_status_checker-2020.3.31-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "74ce53956777875b6f63da8570c2462e", "sha256": "5adf3b7f5d84463091b019cd8a8d6cc3ab2d19a983808b37fe91786171fa2b74"}, "downloads": -1, "filename": "git-status-checker-2020.3.31.tar.gz", "has_sig": false, "md5_digest": "74ce53956777875b6f63da8570c2462e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28689, "upload_time": "2020-03-31T12:44:00", "upload_time_iso_8601": "2020-03-31T12:44:00.362423Z", "url": "https://files.pythonhosted.org/packages/11/62/5f058d6a7090bb907c2957d1c8bd64c93a931ab41bb754dd721ca229f56a/git-status-checker-2020.3.31.tar.gz", "yanked": false}], "2020.4.14": [{"comment_text": "", "digests": {"md5": "924d329df94a13ab94003f7c7ec68311", "sha256": "ba5fd6e3f15f2f96e9894e6eb08f48c141b7bcc55d7ddb7ba11141fb6ed367a8"}, "downloads": -1, "filename": "git_status_checker-2020.4.14-py3-none-any.whl", "has_sig": false, "md5_digest": "924d329df94a13ab94003f7c7ec68311", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 24955, "upload_time": "2020-04-14T14:40:00", "upload_time_iso_8601": "2020-04-14T14:40:00.627415Z", "url": "https://files.pythonhosted.org/packages/36/31/57a57576a1b13815ef9488cc83118737aa428232742e79b6db178d134393/git_status_checker-2020.4.14-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "47cdb412436f307938afd57bbb4f6622", "sha256": "6ba97958c41bae8a05cdc89cb5bbbf03154d9fc5eda1ce960a036569d51c6fde"}, "downloads": -1, "filename": "git-status-checker-2020.4.14.tar.gz", "has_sig": false, "md5_digest": "47cdb412436f307938afd57bbb4f6622", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29165, "upload_time": "2020-04-14T14:40:01", "upload_time_iso_8601": "2020-04-14T14:40:01.615062Z", "url": "https://files.pythonhosted.org/packages/a7/5c/b0920dc4b76858009e811534798c25d896e61e59c6dc0e442ab323d5cd9e/git-status-checker-2020.4.14.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "924d329df94a13ab94003f7c7ec68311", "sha256": "ba5fd6e3f15f2f96e9894e6eb08f48c141b7bcc55d7ddb7ba11141fb6ed367a8"}, "downloads": -1, "filename": "git_status_checker-2020.4.14-py3-none-any.whl", "has_sig": false, "md5_digest": "924d329df94a13ab94003f7c7ec68311", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 24955, "upload_time": "2020-04-14T14:40:00", "upload_time_iso_8601": "2020-04-14T14:40:00.627415Z", "url": "https://files.pythonhosted.org/packages/36/31/57a57576a1b13815ef9488cc83118737aa428232742e79b6db178d134393/git_status_checker-2020.4.14-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "47cdb412436f307938afd57bbb4f6622", "sha256": "6ba97958c41bae8a05cdc89cb5bbbf03154d9fc5eda1ce960a036569d51c6fde"}, "downloads": -1, "filename": "git-status-checker-2020.4.14.tar.gz", "has_sig": false, "md5_digest": "47cdb412436f307938afd57bbb4f6622", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29165, "upload_time": "2020-04-14T14:40:01", "upload_time_iso_8601": "2020-04-14T14:40:01.615062Z", "url": "https://files.pythonhosted.org/packages/a7/5c/b0920dc4b76858009e811534798c25d896e61e59c6dc0e442ab323d5cd9e/git-status-checker-2020.4.14.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:56:46 2020"}