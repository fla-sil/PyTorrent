{"info": {"author": "216 Software, LLC", "author_email": "info@216software.com", "bugtrack_url": null, "classifiers": [], "description": "+++++++++++++++++\nLog to PostgreSQL\n+++++++++++++++++\n\n.. image:: https://travis-ci.org/216software/logtopg.svg?branch=master\n    :target: https://travis-ci.org/216software/logtopg\n\n.. image:: https://circleci.com/gh/216software/logtopg.png?circle-token=389fee16249541b4b1df6e8a7f8edb1401be66de\n   :target:https://circleci.com/gh/216software/logtopg\n\nInstall\n=======\n\nGrab the code with pip::\n\n    $ pip install logtopg\n\nBut you also have to install the ltree contrib module into your\ndatabase::\n\n    $ sudo -u postgres psql -c \"create extension ltree;\"\n\nTry it out\n==========\n\nThe code in `docs/example.py`_ shows how to set up your logging configs\nwith this handler.\n\n.. _`docs/example.py`: https://github.com/216software/logtopg/blob/master/docs/example.py\n\n.. include:: docs/example.py\n    :number-lines:\n    :code: python\n\n\nContribute to logtopg\n=====================\n\nGet a copy of the code::\n\n    $ git clone --origin github https://github.com/216software/logtopg.git\n\nInstall it like this::\n\n    $ cd logtopg\n    $ pip install -e .\n\nCreate test user and test database::\n\n    $ sudo -u postgres createuser logtopg\n    $ sudo -u postgres createdb --owner logtopg logtopg_tests\n    $ sudo -u postgres psql -c \"create extension ltree;\" -d logtopg_tests\n\nThen run the tests like this::\n\n    $ python setup.py --quiet test\n    .....\n    ----------------------------------------------------------------------\n    Ran 5 tests in 0.379s\n\n    OK\n\nHopefully it works!\n\n\nStuff to do\n===========\n\n*   Fill out classifiers in setup.py.\n\n*   Somehow block updates to the table.  Maybe a trigger is the right\n    way.  Maybe there's a much simpler trick that I'm not aware of.\n\n*   Create a few views for typical queries.\n\n*   Test performance with many connected processes and tons of logging\n    messages.  Make sure that logging doesn't compete with real\n    application work for database resources.  Is there a way to say\n    something like\n\n        \"Hey postgresql, take your time with this stuff, and deal with\n        other stuff first!\"\n\n    In other words, a \"nice\" command for queries.\n\n*   Allow people to easily write their own SQL to create the logging\n    table and to insert records to it.  The queries could be returned\n    from properties, so people would just need to subclass the PGHandler\n    and then redefine those properties.\n\n*   Write some documentation:\n\n    *   installation\n    *   typical queries\n    *   tweak log table columns or indexes\n    *   discuss performance issues\n\n*   Set up a readthedocs page for logtopg for that documentation.\n\n*   Experiment with what happens when the emit(...) function call takes\n    a long time.  For example, say somebody is logging to a PG server\n    across the internet, will calls to log.debug(...) slow down  the\n    local app?  I imagine so.\n\n*   I just found out that the ltree column type (that I use for logger\n    names) can not handle logger names like \"dazzle.insert-stuff\".  That\n    dash in there is invalid syntax.\n\n    I hope there is a way to raise an exception as soon as somebody uses\n    an invalid logger name.\n\n    Or, maybe I need to convert the invalid name to a valid name, by\n    maybe substituting any of a set of characters with something else.\n\n*   Set up table partitioning so that when there are millions or logs,\n    they are dealt with sanely.\n\n    This is a query that shows logs by day and log level::\n\n        select to_char(date_trunc('day', inserted), 'YYYY-MM-DD'),\n        log_level, count(*)\n\n        from dazzlelogs\n\n        group by 1, 2\n\n        order by 1, 2;\n\n.. vim: set syntax=rst:\n", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/216software/logtopg/", "keywords": null, "license": "BSD License", "maintainer": null, "maintainer_email": null, "name": "LogToPG", "package_url": "https://pypi.org/project/LogToPG/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/LogToPG/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/216software/logtopg/"}, "release_url": "https://pypi.org/project/LogToPG/0.1.1/", "requires_dist": null, "requires_python": null, "summary": "Python logging handler that stores logs in postgresql", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            +++++++++++++++++<br>Log to PostgreSQL<br>+++++++++++++++++<br><br>.. image:: https://travis-ci.org/216software/logtopg.svg?branch=master<br>    :target: https://travis-ci.org/216software/logtopg<br><br>.. image:: https://circleci.com/gh/216software/logtopg.png?circle-token=389fee16249541b4b1df6e8a7f8edb1401be66de<br>   :target:https://circleci.com/gh/216software/logtopg<br><br>Install<br>=======<br><br>Grab the code with pip::<br><br>    $ pip install logtopg<br><br>But you also have to install the ltree contrib module into your<br>database::<br><br>    $ sudo -u postgres psql -c \"create extension ltree;\"<br><br>Try it out<br>==========<br><br>The code in `docs/example.py`_ shows how to set up your logging configs<br>with this handler.<br><br>.. _`docs/example.py`: https://github.com/216software/logtopg/blob/master/docs/example.py<br><br>.. include:: docs/example.py<br>    :number-lines:<br>    :code: python<br><br><br>Contribute to logtopg<br>=====================<br><br>Get a copy of the code::<br><br>    $ git clone --origin github https://github.com/216software/logtopg.git<br><br>Install it like this::<br><br>    $ cd logtopg<br>    $ pip install -e .<br><br>Create test user and test database::<br><br>    $ sudo -u postgres createuser logtopg<br>    $ sudo -u postgres createdb --owner logtopg logtopg_tests<br>    $ sudo -u postgres psql -c \"create extension ltree;\" -d logtopg_tests<br><br>Then run the tests like this::<br><br>    $ python setup.py --quiet test<br>    .....<br>    ----------------------------------------------------------------------<br>    Ran 5 tests in 0.379s<br><br>    OK<br><br>Hopefully it works!<br><br><br>Stuff to do<br>===========<br><br>*   Fill out classifiers in setup.py.<br><br>*   Somehow block updates to the table.  Maybe a trigger is the right<br>    way.  Maybe there's a much simpler trick that I'm not aware of.<br><br>*   Create a few views for typical queries.<br><br>*   Test performance with many connected processes and tons of logging<br>    messages.  Make sure that logging doesn't compete with real<br>    application work for database resources.  Is there a way to say<br>    something like<br><br>        \"Hey postgresql, take your time with this stuff, and deal with<br>        other stuff first!\"<br><br>    In other words, a \"nice\" command for queries.<br><br>*   Allow people to easily write their own SQL to create the logging<br>    table and to insert records to it.  The queries could be returned<br>    from properties, so people would just need to subclass the PGHandler<br>    and then redefine those properties.<br><br>*   Write some documentation:<br><br>    *   installation<br>    *   typical queries<br>    *   tweak log table columns or indexes<br>    *   discuss performance issues<br><br>*   Set up a readthedocs page for logtopg for that documentation.<br><br>*   Experiment with what happens when the emit(...) function call takes<br>    a long time.  For example, say somebody is logging to a PG server<br>    across the internet, will calls to log.debug(...) slow down  the<br>    local app?  I imagine so.<br><br>*   I just found out that the ltree column type (that I use for logger<br>    names) can not handle logger names like \"dazzle.insert-stuff\".  That<br>    dash in there is invalid syntax.<br><br>    I hope there is a way to raise an exception as soon as somebody uses<br>    an invalid logger name.<br><br>    Or, maybe I need to convert the invalid name to a valid name, by<br>    maybe substituting any of a set of characters with something else.<br><br>*   Set up table partitioning so that when there are millions or logs,<br>    they are dealt with sanely.<br><br>    This is a query that shows logs by day and log level::<br><br>        select to_char(date_trunc('day', inserted), 'YYYY-MM-DD'),<br>        log_level, count(*)<br><br>        from dazzlelogs<br><br>        group by 1, 2<br><br>        order by 1, 2;<br><br>.. vim: set syntax=rst:<br>\n          </div>"}, "last_serial": 1631819, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "2f864ea50f2598d985c4fed26eede382", "sha256": "e69fdea34680e67cd5c81643b34e0e085dbc62e4dc441b0ac34757cd36e12f43"}, "downloads": -1, "filename": "LogToPG-0.0.1.tar.gz", "has_sig": false, "md5_digest": "2f864ea50f2598d985c4fed26eede382", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2167, "upload_time": "2014-12-22T20:40:56", "upload_time_iso_8601": "2014-12-22T20:40:56.775033Z", "url": "https://files.pythonhosted.org/packages/0d/d4/fa330955dfcbcaaf6fc8db51b8defba10a67285c9f73c4402ee1c7f06107/LogToPG-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "d21e560c68c92fbd1ffea3d9dbe9ebd2", "sha256": "c7243dfcb8b0debe419619fba28236ba05791d349a1e5ed7c210713c3f9b8fed"}, "downloads": -1, "filename": "LogToPG-0.0.2.tar.gz", "has_sig": false, "md5_digest": "d21e560c68c92fbd1ffea3d9dbe9ebd2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2246, "upload_time": "2014-12-22T21:06:42", "upload_time_iso_8601": "2014-12-22T21:06:42.299789Z", "url": "https://files.pythonhosted.org/packages/72/4f/84e64a6a7cef84a2cb56c1e72e6373ae105a01b3a71b2c4ecb5ece6b5c24/LogToPG-0.0.2.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "70c7d3fbd373d5859a50e25eb65be729", "sha256": "2bd44cdafac929170aeb2119790d396f368213a23b389ba749b761864eb0f949"}, "downloads": -1, "filename": "LogToPG-0.0.5.tar.gz", "has_sig": false, "md5_digest": "70c7d3fbd373d5859a50e25eb65be729", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2738, "upload_time": "2014-12-23T16:12:25", "upload_time_iso_8601": "2014-12-23T16:12:25.696185Z", "url": "https://files.pythonhosted.org/packages/b2/dc/d87023894f8648b3042d2cf8f3300217f857a9688dd8155fe54d9f4ac444/LogToPG-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "f777e1e365df5bd9ea6bf7cb4bad19ac", "sha256": "0ccf793cb6a6a2e9ca6fc38a6ab0ebcdd0b6a0d48c182f8084b7446f5efd1013"}, "downloads": -1, "filename": "LogToPG-0.0.6.tar.gz", "has_sig": false, "md5_digest": "f777e1e365df5bd9ea6bf7cb4bad19ac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4619, "upload_time": "2015-01-07T18:00:48", "upload_time_iso_8601": "2015-01-07T18:00:48.639889Z", "url": "https://files.pythonhosted.org/packages/f1/b4/450e86a1530ac3fa745bd7abef21cb462690298c44bf2b5a0f5018cf3e3d/LogToPG-0.0.6.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "9971761d61abb4b5ea8ad192a37ebe1f", "sha256": "a0e2924acd971a1035ea47a17eeb96f7043e90ecd5f986c1a449b8b8edbff818"}, "downloads": -1, "filename": "LogToPG-0.0.7.tar.gz", "has_sig": false, "md5_digest": "9971761d61abb4b5ea8ad192a37ebe1f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6388, "upload_time": "2015-01-20T17:26:35", "upload_time_iso_8601": "2015-01-20T17:26:35.227856Z", "url": "https://files.pythonhosted.org/packages/68/d2/be1cf162232580c84de459bdacbdf0eb6376539adf2d9f20fb8af85c305c/LogToPG-0.0.7.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "1ad89459ad5c767a402f866f1b739453", "sha256": "7892c9b41421b501bf12717c9f2f72233342a70a910b8f583cfe9b85710454f0"}, "downloads": -1, "filename": "LogToPG-0.1.0.tar.gz", "has_sig": false, "md5_digest": "1ad89459ad5c767a402f866f1b739453", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6506, "upload_time": "2015-03-19T19:45:19", "upload_time_iso_8601": "2015-03-19T19:45:19.968470Z", "url": "https://files.pythonhosted.org/packages/2c/3a/b35a67702a51c88c2c7bd6e1846c0d2e4a58620bdf464e4bc5f835267f67/LogToPG-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "71524c1175539a2a3eed640f155f73c1", "sha256": "bbfe6b8ea21e2a06898feab1b99bcffcbaa7c2d790a951b9c35c6f5b4e787542"}, "downloads": -1, "filename": "LogToPG-0.1.1.tar.gz", "has_sig": false, "md5_digest": "71524c1175539a2a3eed640f155f73c1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6567, "upload_time": "2015-07-13T20:04:37", "upload_time_iso_8601": "2015-07-13T20:04:37.500648Z", "url": "https://files.pythonhosted.org/packages/a1/57/b0b34af3d5e6fca3bc5dc1b4a1ca60661e262f233f1b21f242d3e2bc6a42/LogToPG-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "71524c1175539a2a3eed640f155f73c1", "sha256": "bbfe6b8ea21e2a06898feab1b99bcffcbaa7c2d790a951b9c35c6f5b4e787542"}, "downloads": -1, "filename": "LogToPG-0.1.1.tar.gz", "has_sig": false, "md5_digest": "71524c1175539a2a3eed640f155f73c1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6567, "upload_time": "2015-07-13T20:04:37", "upload_time_iso_8601": "2015-07-13T20:04:37.500648Z", "url": "https://files.pythonhosted.org/packages/a1/57/b0b34af3d5e6fca3bc5dc1b4a1ca60661e262f233f1b21f242d3e2bc6a42/LogToPG-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:05 2020"}