{"info": {"author": "Gordon Wrigley", "author_email": "gordon.wrigley@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# django-auto-prefetch\nAutomatically prefetch foreign key values as needed.\n\n## Purpose\n\nWhen accessing a ForeignKey or OneToOneField (including in reverse) on a model instance, if the field's value has not yet been loaded then auto-prefetch will prefetch the field for all model instances loaded by the same queryset as the current model instance.\nThis is enabled at the model level and totally automatic and transparent for users of the model.\n\n## Usage\n\nEverywhere you use Model, QuerySet, Manager, ForeignKey or OneToOneField from django.db.models instead use them from auto_prefetch. No other changes are required.\n\n## Background & Rationale\n\nCurrently when accessing an uncached foreign key field, Django will automatically fetch the missing value from the Database. When this occurs in a loop it creates 1+N query problems. Consider the following snippet:\n```python\nfor choice in Choice.objects.all():\n    print(choice.question.question_text, ':', choice.choice_text)\n```\nThis will do one query for the choices and then one query per choice to get that choice's question.\nThis behavior can be avoided with correct application of prefetch_related like this:\n```python\nfor choice in Choice.objects.prefetch_related('question'):\n    print(choice.question.question_text, ':', choice.choice_text)\n```\nThis has several usability issues, notably:\n- Less experienced users are generally not aware that it's necessary.\n- Cosmetic seeming changes to things like templates can change the fields that should be prefetched.\n- Related to that the code that requires the prefetch_related (template for example) may be quite removed from where the prefetch_related needs to be applied (view for example).\n- Subsequently finding where prefetch_related calls are missing is non trivial and needs to be done on an ongoing basis.\n- Excess fields in prefetch_related calls are even harder to find and result in unnecessary database queries.\n- It is very difficult for libraries like the admin and Django Rest Framework to automatically generate correct prefetch_related clauses.\n\nOn the first iteration of the loop in the example above, when we first access a choice's question field, instead of fetching the question for just that choice, auto-prefetch will speculatively fetch the questions for all the choices returned by the queryset.\nThis change results in the first snippet having the same database behavior as the second while reducing or eliminating all of the noted usability issues.\n\nSome important points:\n- ManyToMany fields are not changed at all.\n- Because these are foreign key and one2one fields the generated queries can't have more result rows than the original query and may have less. This eliminates any concern about a multiplicative query size explosion.\n- This feature will never result in more database queries as a prefetch will only be issued where the ORM was already going to fetch a related object.\n- Because it is triggered by fetching missing related objects it will not at all change the DB behavior of code which is fully covered by prefetch_related and/or select_related calls.\n- This will inherently chain across relations like choice.question.author, the conditions above still hold under such chaining.\n- In some rare situations it may result in larger data transfer between the database and Django (see below).\nAn example of that last point is:\n```python\nqs = Choice.objects.all()\nlist(qs)[0].question\n```\nSuch examples generally seem to be rarer and more likely to be visible during code inspection (vs {{choice.question}} in a template). And larger queries are usually a better failure mode than producing hundreds of queries.\nFor this to actually produce inferior behavior in practice you need to:\n- fetch a large number of choices\n- filter out basically all of them\n- in a way that prevents garbage collection of the unfiltered ones\n\nIf any of those aren't true then automatic prefetching will still produce equivalent or better database behavior than without.\n\n## See Also\n\n* https://secure.phabricator.com/book/phabcontrib/article/n_plus_one/\n* https://groups.google.com/forum/m/#!topic/django-developers/EplZGj-ejvg\n* https://pypi.org/project/nplusone/\n\n## p.s.\nIf you have concerns go look at the code, it's all in [`auto_prefetch/__init__.py`](auto_prefetch/__init__.py) and is fairly short.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/tolomea/django-auto-prefetch", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "django-auto-prefetch", "package_url": "https://pypi.org/project/django-auto-prefetch/", "platform": "", "project_url": "https://pypi.org/project/django-auto-prefetch/", "project_urls": {"Homepage": "https://github.com/tolomea/django-auto-prefetch"}, "release_url": "https://pypi.org/project/django-auto-prefetch/0.0.5/", "requires_dist": null, "requires_python": ">=3.5", "summary": "git@github.com:tolomea/django-auto-prefetch.git", "version": "0.0.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>django-auto-prefetch</h1>\n<p>Automatically prefetch foreign key values as needed.</p>\n<h2>Purpose</h2>\n<p>When accessing a ForeignKey or OneToOneField (including in reverse) on a model instance, if the field's value has not yet been loaded then auto-prefetch will prefetch the field for all model instances loaded by the same queryset as the current model instance.\nThis is enabled at the model level and totally automatic and transparent for users of the model.</p>\n<h2>Usage</h2>\n<p>Everywhere you use Model, QuerySet, Manager, ForeignKey or OneToOneField from django.db.models instead use them from auto_prefetch. No other changes are required.</p>\n<h2>Background &amp; Rationale</h2>\n<p>Currently when accessing an uncached foreign key field, Django will automatically fetch the missing value from the Database. When this occurs in a loop it creates 1+N query problems. Consider the following snippet:</p>\n<pre><span class=\"k\">for</span> <span class=\"n\">choice</span> <span class=\"ow\">in</span> <span class=\"n\">Choice</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">choice</span><span class=\"o\">.</span><span class=\"n\">question</span><span class=\"o\">.</span><span class=\"n\">question_text</span><span class=\"p\">,</span> <span class=\"s1\">':'</span><span class=\"p\">,</span> <span class=\"n\">choice</span><span class=\"o\">.</span><span class=\"n\">choice_text</span><span class=\"p\">)</span>\n</pre>\n<p>This will do one query for the choices and then one query per choice to get that choice's question.\nThis behavior can be avoided with correct application of prefetch_related like this:</p>\n<pre><span class=\"k\">for</span> <span class=\"n\">choice</span> <span class=\"ow\">in</span> <span class=\"n\">Choice</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">prefetch_related</span><span class=\"p\">(</span><span class=\"s1\">'question'</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">choice</span><span class=\"o\">.</span><span class=\"n\">question</span><span class=\"o\">.</span><span class=\"n\">question_text</span><span class=\"p\">,</span> <span class=\"s1\">':'</span><span class=\"p\">,</span> <span class=\"n\">choice</span><span class=\"o\">.</span><span class=\"n\">choice_text</span><span class=\"p\">)</span>\n</pre>\n<p>This has several usability issues, notably:</p>\n<ul>\n<li>Less experienced users are generally not aware that it's necessary.</li>\n<li>Cosmetic seeming changes to things like templates can change the fields that should be prefetched.</li>\n<li>Related to that the code that requires the prefetch_related (template for example) may be quite removed from where the prefetch_related needs to be applied (view for example).</li>\n<li>Subsequently finding where prefetch_related calls are missing is non trivial and needs to be done on an ongoing basis.</li>\n<li>Excess fields in prefetch_related calls are even harder to find and result in unnecessary database queries.</li>\n<li>It is very difficult for libraries like the admin and Django Rest Framework to automatically generate correct prefetch_related clauses.</li>\n</ul>\n<p>On the first iteration of the loop in the example above, when we first access a choice's question field, instead of fetching the question for just that choice, auto-prefetch will speculatively fetch the questions for all the choices returned by the queryset.\nThis change results in the first snippet having the same database behavior as the second while reducing or eliminating all of the noted usability issues.</p>\n<p>Some important points:</p>\n<ul>\n<li>ManyToMany fields are not changed at all.</li>\n<li>Because these are foreign key and one2one fields the generated queries can't have more result rows than the original query and may have less. This eliminates any concern about a multiplicative query size explosion.</li>\n<li>This feature will never result in more database queries as a prefetch will only be issued where the ORM was already going to fetch a related object.</li>\n<li>Because it is triggered by fetching missing related objects it will not at all change the DB behavior of code which is fully covered by prefetch_related and/or select_related calls.</li>\n<li>This will inherently chain across relations like choice.question.author, the conditions above still hold under such chaining.</li>\n<li>In some rare situations it may result in larger data transfer between the database and Django (see below).\nAn example of that last point is:</li>\n</ul>\n<pre><span class=\"n\">qs</span> <span class=\"o\">=</span> <span class=\"n\">Choice</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n<span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">qs</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">question</span>\n</pre>\n<p>Such examples generally seem to be rarer and more likely to be visible during code inspection (vs {{choice.question}} in a template). And larger queries are usually a better failure mode than producing hundreds of queries.\nFor this to actually produce inferior behavior in practice you need to:</p>\n<ul>\n<li>fetch a large number of choices</li>\n<li>filter out basically all of them</li>\n<li>in a way that prevents garbage collection of the unfiltered ones</li>\n</ul>\n<p>If any of those aren't true then automatic prefetching will still produce equivalent or better database behavior than without.</p>\n<h2>See Also</h2>\n<ul>\n<li><a href=\"https://secure.phabricator.com/book/phabcontrib/article/n_plus_one/\" rel=\"nofollow\">https://secure.phabricator.com/book/phabcontrib/article/n_plus_one/</a></li>\n<li><a href=\"https://groups.google.com/forum/m/#!topic/django-developers/EplZGj-ejvg\" rel=\"nofollow\">https://groups.google.com/forum/m/#!topic/django-developers/EplZGj-ejvg</a></li>\n<li><a href=\"https://pypi.org/project/nplusone/\" rel=\"nofollow\">https://pypi.org/project/nplusone/</a></li>\n</ul>\n<h2>p.s.</h2>\n<p>If you have concerns go look at the code, it's all in <a href=\"auto_prefetch/__init__.py\" rel=\"nofollow\"><code>auto_prefetch/__init__.py</code></a> and is fairly short.</p>\n\n          </div>"}, "last_serial": 6954519, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "ad27845cab8be1a520db71e9cc852a3d", "sha256": "07600651cd7bd22a04df44b82ad874f9e9343310a38c1c332dc5b53182124ad9"}, "downloads": -1, "filename": "django_auto_prefetch-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "ad27845cab8be1a520db71e9cc852a3d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6615, "upload_time": "2020-03-24T23:06:14", "upload_time_iso_8601": "2020-03-24T23:06:14.432198Z", "url": "https://files.pythonhosted.org/packages/93/e5/4ee6d0e532b3bdeca5cadbe9a2dbe1fe09785b1b3c9320e42f1866cdb906/django_auto_prefetch-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ce2910a20d55829397ab1f6117ef8baf", "sha256": "133c0fac88e1272a8ca83b92029ae13c68941680f0f20fe023fd377ae71d8770"}, "downloads": -1, "filename": "django-auto-prefetch-0.0.1.tar.gz", "has_sig": false, "md5_digest": "ce2910a20d55829397ab1f6117ef8baf", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5095, "upload_time": "2020-03-24T23:06:16", "upload_time_iso_8601": "2020-03-24T23:06:16.710501Z", "url": "https://files.pythonhosted.org/packages/e1/16/8daa5de893070aeaadb2035ea8f288ac9c55835687dcda0bce5bd1f1c1f6/django-auto-prefetch-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "4a252b645ba9bf5494adb9d62adb038d", "sha256": "bc432262068b921e82811afd32989ea7d7b64327d93fafa9659223dd7cf81c5a"}, "downloads": -1, "filename": "django_auto_prefetch-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "4a252b645ba9bf5494adb9d62adb038d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7149, "upload_time": "2020-03-25T23:22:29", "upload_time_iso_8601": "2020-03-25T23:22:29.475288Z", "url": "https://files.pythonhosted.org/packages/b9/68/dc1aec7a197c5fcfeeae7bad03580b6e349a4e16ef609044a16378521435/django_auto_prefetch-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2e64dad0d203a339596b2ad2759a0702", "sha256": "41768072d8a30dc20211a1d1a08bb85fd386d7f447836844dfbc0641661272c9"}, "downloads": -1, "filename": "django-auto-prefetch-0.0.2.tar.gz", "has_sig": false, "md5_digest": "2e64dad0d203a339596b2ad2759a0702", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5589, "upload_time": "2020-03-25T23:22:31", "upload_time_iso_8601": "2020-03-25T23:22:31.505158Z", "url": "https://files.pythonhosted.org/packages/7b/29/82993057adc9f130279b70a74339e0f19c140c061342cf34bce7ceebec58/django-auto-prefetch-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "8e63ac6e5aee1203bc3095a38c6a0f02", "sha256": "8b3f7df3093c09dff6da70d8b7a569efef74057247d49dbb23e9fa6c7faef2b0"}, "downloads": -1, "filename": "django_auto_prefetch-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "8e63ac6e5aee1203bc3095a38c6a0f02", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 7130, "upload_time": "2020-03-26T15:26:45", "upload_time_iso_8601": "2020-03-26T15:26:45.949510Z", "url": "https://files.pythonhosted.org/packages/4c/9e/d1053e43ec0ebb0537766a8f48944b0120b5269635c85bc00a4b9ec7dc0e/django_auto_prefetch-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2f7f097f4a3b9bd40d13738a271286c8", "sha256": "a0b8e80ff73d55270b28b8f3724ad13b0ac6648dbd95a7faffd49a5e9c6724fb"}, "downloads": -1, "filename": "django-auto-prefetch-0.0.3.tar.gz", "has_sig": false, "md5_digest": "2f7f097f4a3b9bd40d13738a271286c8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 5572, "upload_time": "2020-03-26T15:26:48", "upload_time_iso_8601": "2020-03-26T15:26:48.168495Z", "url": "https://files.pythonhosted.org/packages/2e/9c/083fbc163b5fb9c3963e8f2f9a27ab5347f99702c5020c4ea780546f5d27/django-auto-prefetch-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "1f54e94077e13cc20fb20065fd18c48e", "sha256": "21632e3dba9a1ba005d2b8273cfa0ce530220ba473f08522b50d00828aa864a9"}, "downloads": -1, "filename": "django_auto_prefetch-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "1f54e94077e13cc20fb20065fd18c48e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 7277, "upload_time": "2020-03-26T16:45:57", "upload_time_iso_8601": "2020-03-26T16:45:57.021413Z", "url": "https://files.pythonhosted.org/packages/e0/92/1591c93a184c4807ef80830fb8bf8075cd03aec83221d703fda8da001fea/django_auto_prefetch-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ed8087c37a382e2eec391b3d03bc1d7d", "sha256": "b12377b7a1cf24cd4c31de8060e9fa0b8a84f6cef86ec57bb3ab8f1b234a5303"}, "downloads": -1, "filename": "django-auto-prefetch-0.0.4.tar.gz", "has_sig": false, "md5_digest": "ed8087c37a382e2eec391b3d03bc1d7d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 5698, "upload_time": "2020-03-26T16:45:58", "upload_time_iso_8601": "2020-03-26T16:45:58.676163Z", "url": "https://files.pythonhosted.org/packages/ac/eb/66c5fc78269b6ba6a82abdad3a0576357d0340363c59010dcb110241de32/django-auto-prefetch-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "2f1656798804ed9d5eb4962eeed05873", "sha256": "ff881c3f5012dc8b6a3c1e8fcc2805b4bc0ba76e1bd64cd95ad53c5fc079655d"}, "downloads": -1, "filename": "django_auto_prefetch-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "2f1656798804ed9d5eb4962eeed05873", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 7271, "upload_time": "2020-04-05T08:08:21", "upload_time_iso_8601": "2020-04-05T08:08:21.411352Z", "url": "https://files.pythonhosted.org/packages/27/e2/bdca4e2db98855ae79aa4df9d00e13896f2355ad4d9b9400939930a1d901/django_auto_prefetch-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "56ac159f2b16c7931a08f4cc8b90f903", "sha256": "261ee94044f00164209555c0512e175242b3d01ac0fb700dee13f10bfd3227d2"}, "downloads": -1, "filename": "django-auto-prefetch-0.0.5.tar.gz", "has_sig": false, "md5_digest": "56ac159f2b16c7931a08f4cc8b90f903", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 5384, "upload_time": "2020-04-05T08:08:23", "upload_time_iso_8601": "2020-04-05T08:08:23.188653Z", "url": "https://files.pythonhosted.org/packages/5c/9f/20d11a6e8a150c494a08d4ba21415bb227e41f910f3a7eee47d37fdbc442/django-auto-prefetch-0.0.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2f1656798804ed9d5eb4962eeed05873", "sha256": "ff881c3f5012dc8b6a3c1e8fcc2805b4bc0ba76e1bd64cd95ad53c5fc079655d"}, "downloads": -1, "filename": "django_auto_prefetch-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "2f1656798804ed9d5eb4962eeed05873", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 7271, "upload_time": "2020-04-05T08:08:21", "upload_time_iso_8601": "2020-04-05T08:08:21.411352Z", "url": "https://files.pythonhosted.org/packages/27/e2/bdca4e2db98855ae79aa4df9d00e13896f2355ad4d9b9400939930a1d901/django_auto_prefetch-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "56ac159f2b16c7931a08f4cc8b90f903", "sha256": "261ee94044f00164209555c0512e175242b3d01ac0fb700dee13f10bfd3227d2"}, "downloads": -1, "filename": "django-auto-prefetch-0.0.5.tar.gz", "has_sig": false, "md5_digest": "56ac159f2b16c7931a08f4cc8b90f903", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 5384, "upload_time": "2020-04-05T08:08:23", "upload_time_iso_8601": "2020-04-05T08:08:23.188653Z", "url": "https://files.pythonhosted.org/packages/5c/9f/20d11a6e8a150c494a08d4ba21415bb227e41f910f3a7eee47d37fdbc442/django-auto-prefetch-0.0.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:37:31 2020"}