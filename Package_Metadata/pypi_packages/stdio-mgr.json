{"info": {"author": "Brian Skinn", "author_email": "bskinn@alum.mit.edu", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3 :: Only", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Software Development :: Testing"], "description": "stdio Manager: Context manager for mocking/wrapping ``stdin``/``stdout``/``stderr``\n===================================================================================\n\n**Current Development Version:**\n\n.. image:: https://travis-ci.org/bskinn/stdio-mgr.svg?branch=dev\n    :target: https://travis-ci.org/bskinn/stdio-mgr\n\n.. image:: https://codecov.io/gh/bskinn/stdio-mgr/branch/dev/graph/badge.svg\n    :target: https://codecov.io/gh/bskinn/stdio-mgr\n\n**Most Recent Stable Release:**\n\n.. image:: https://img.shields.io/pypi/v/stdio_mgr.svg\n    :target: https://pypi.org/project/stdio-mgr\n\n.. image:: https://img.shields.io/pypi/pyversions/stdio-mgr.svg\n\n**Info:**\n\n.. image:: https://img.shields.io/github/license/mashape/apistatus.svg\n    :target: https://github.com/bskinn/stdio-mgr/blob/master/LICENSE.txt\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://github.com/ambv/black\n\n----\n\n**Have a CLI Python application?**\n\n**Want to automate testing of the actual console input & output\nof your user-facing components?**\n\n`stdio Manager` can help.\n\nWhile some functionality here is more or less duplicative of\n``redirect_stdout`` and ``redirect_stderr`` in ``contextlib``\n`within the standard library <https://docs.python.org/3/library/contextlib.html#contextlib.redirect_stdout>`__,\nit provides (i) a much more concise way to mock both ``stdout`` and ``stderr`` at the same time,\nand (ii) a mechanism for mocking ``stdin``, which is not available in ``contextlib``.\n\n**First, install:**\n\n.. code::\n\n    $ pip install stdio-mgr\n\nThen use!\n\nAll of the below examples assume ``stdio_mgr`` has already\nbeen imported via:\n\n.. code::\n\n    from stdio_mgr import stdio_mgr\n\n**Mock** ``stdout``\\ **:**\n\n.. code::\n\n    >>> with stdio_mgr() as (in_, out_, err_):\n    ...     print('foobar')\n    ...     out_cap = out_.getvalue()\n    >>> out_cap\n    'foobar\\n'\n    >>> in_.closed and out_.closed and err_.closed\n    True\n\nBy default ``print``\n`appends a newline <https://docs.python.org/3/library/functions.html#print>`__\nafter each argument, which is why ``out_cap`` is ``'foobar\\n'``\nand not just ``'foobar'``.\n\nAs currently implemented, ``stdio_mgr`` closes all three mocked streams\nupon exiting the managed context.\n\n\n**Mock** ``stderr``\\ **:**\n\n.. code ::\n\n    >>> import warnings\n    >>> with stdio_mgr() as (in_, out_, err_):\n    ...     warnings.warn(\"'foo' has no 'bar'\")\n    ...     err_cap = err_.getvalue()\n    >>> err_cap\n    \"...UserWarning: 'foo' has no 'bar'\\n...\"\n\n\n**Mock** ``stdin``\\ **:**\n\nThe simulated user input has to be pre-loaded to the mocked stream.\n**Be sure to include newlines in the input to correspond to\neach mocked** `Enter` **keypress!**\nOtherwise, ``input`` will hang, waiting for a newline\nthat will never come.\n\nIf the entirety of the input is known in advance,\nit can just be provided as an argument to ``stdio_mgr``.\nOtherwise, ``.append()`` mocked input to ``in_``\nwithin the managed context as needed:\n\n.. code::\n\n    >>> with stdio_mgr('foobar\\n') as (in_, out_, err_):\n    ...     print('baz')\n    ...     in_cap = input('??? ')\n    ...\n    ...     _ = in_.append(in_cap[:3] + '\\n')\n    ...     in_cap2 = input('??? ')\n    ...\n    ...     out_cap = out_.getvalue()\n    >>> in_cap\n    'foobar'\n    >>> in_cap2\n    'foo'\n    >>> out_cap\n    'baz\\n??? foobar\\n??? foo\\n'\n\nThe ``_ =`` assignment suppresses ``print``\\ ing of the return value\nfrom the ``in_.append()`` call--otherwise, it would be interleaved\nin ``out_cap``, since this example is shown for an interactive context.\nFor non-interactive execution, as with ``unittest``, ``pytest``, etc.,\nthese 'muting' assignments should not be necessary.\n\n**Both** the ``'??? '`` prompts for ``input``\n**and** the mocked input strings\nare echoed to ``out_``, mimicking what a CLI user would see.\n\nA subtlety: While the trailing newline on, e.g., ``'foobar\\n'`` is stripped\nby ``input``, it is *retained* in ``out_``.\nThis is because ``in_`` tees the content read from it to ``out_``\n*before* that content is passed to ``input``.\n\n\n**Want to modify internal** ``print`` **calls\nwithin a function or method?**\n\nIn addition to mocking, ``stdio_mgr`` can also be used to\nwrap functions that directly output to ``stdout``/``stderr``. A ``stdout`` example:\n\n.. code::\n\n    >>> def emboxen(func):\n    ...     def func_wrapper(s):\n    ...         from stdio_mgr import stdio_mgr\n    ...\n    ...         with stdio_mgr() as (in_, out_, err_):\n    ...             func(s)\n    ...             content = out_.getvalue()\n    ...\n    ...         max_len = max(map(len, content.splitlines()))\n    ...         fmt_str = '| {{: <{0}}} |\\n'.format(max_len)\n    ...\n    ...         newcontent = '=' * (max_len + 4) + '\\n'\n    ...         for line in content.splitlines():\n    ...             newcontent += fmt_str.format(line)\n    ...         newcontent += '=' * (max_len + 4)\n    ...\n    ...         print(newcontent)\n    ...\n    ...     return func_wrapper\n\n    >>> @emboxen\n    ... def testfunc(s):\n    ...     print(s)\n\n    >>> testfunc(\"\"\"\\\n    ... Foo bar baz quux.\n    ... Lorem ipsum dolor sit amet.\"\"\")\n    ===============================\n    | Foo bar baz quux.           |\n    | Lorem ipsum dolor sit amet. |\n    ===============================\n\n----\n\nAvailable on `PyPI <https://pypi.python.org/pypi/stdio-mgr>`__\n(``pip install stdio-mgr``).\n\nSource on `GitHub <https://github.com/bskinn/stdio-mgr>`__.  Bug reports\nand feature requests are welcomed at the\n`Issues <https://github.com/bskinn/stdio-mgr/issues>`__ page there.\n\nCopyright \\(c) 2018-2019 Brian Skinn\n\nLicense: The MIT License. See `LICENSE.txt <https://github.com/bskinn/stdio-mgr/blob/master/LICENSE.txt>`__\nfor full license terms.\n\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://www.github.com/bskinn/stdio-mgr", "keywords": "", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "stdio-mgr", "package_url": "https://pypi.org/project/stdio-mgr/", "platform": "", "project_url": "https://pypi.org/project/stdio-mgr/", "project_urls": {"Homepage": "https://www.github.com/bskinn/stdio-mgr"}, "release_url": "https://pypi.org/project/stdio-mgr/1.0.1/", "requires_dist": ["attrs (>=17.1)"], "requires_python": ">=3", "summary": "Context manager for mocking/wrapping stdin/stdout/stderr", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><strong>Current Development Version:</strong></p>\n<a href=\"https://travis-ci.org/bskinn/stdio-mgr\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/bskinn/stdio-mgr.svg?branch=dev\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/17b0aa09d9da4471dba4183c0a455c70576f3a46/68747470733a2f2f7472617669732d63692e6f72672f62736b696e6e2f737464696f2d6d67722e7376673f6272616e63683d646576\"></a>\n<a href=\"https://codecov.io/gh/bskinn/stdio-mgr\" rel=\"nofollow\"><img alt=\"https://codecov.io/gh/bskinn/stdio-mgr/branch/dev/graph/badge.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3692d7d2058a317789f80a4d0b6057b50ddec885/68747470733a2f2f636f6465636f762e696f2f67682f62736b696e6e2f737464696f2d6d67722f6272616e63682f6465762f67726170682f62616467652e737667\"></a>\n<p><strong>Most Recent Stable Release:</strong></p>\n<a href=\"https://pypi.org/project/stdio-mgr\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/stdio_mgr.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/596be3c020f097d4c7e6b6155e54577801b92152/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f737464696f5f6d67722e737667\"></a>\n<img alt=\"https://img.shields.io/pypi/pyversions/stdio-mgr.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/16d492d52cbb1133e972d572d131b041553fcff9/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f737464696f2d6d67722e737667\">\n<p><strong>Info:</strong></p>\n<a href=\"https://github.com/bskinn/stdio-mgr/blob/master/LICENSE.txt\" rel=\"nofollow\"><img alt=\"https://img.shields.io/github/license/mashape/apistatus.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/36686084675cebbeff3809cb9d8291b8e6ebd672/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f6d6173686170652f6170697374617475732e737667\"></a>\n<a href=\"https://github.com/ambv/black\" rel=\"nofollow\"><img alt=\"https://img.shields.io/badge/code%20style-black-000000.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbfdc7754183ecf079bc71ddeabaf88f6cbc5c00/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667\"></a>\n<hr class=\"docutils\">\n<p><strong>Have a CLI Python application?</strong></p>\n<p><strong>Want to automate testing of the actual console input &amp; output\nof your user-facing components?</strong></p>\n<p><cite>stdio Manager</cite> can help.</p>\n<p>While some functionality here is more or less duplicative of\n<tt>redirect_stdout</tt> and <tt>redirect_stderr</tt> in <tt>contextlib</tt>\n<a href=\"https://docs.python.org/3/library/contextlib.html#contextlib.redirect_stdout\" rel=\"nofollow\">within the standard library</a>,\nit provides (i) a much more concise way to mock both <tt>stdout</tt> and <tt>stderr</tt> at the same time,\nand (ii) a mechanism for mocking <tt>stdin</tt>, which is not available in <tt>contextlib</tt>.</p>\n<p><strong>First, install:</strong></p>\n<pre>$ pip install stdio-mgr\n</pre>\n<p>Then use!</p>\n<p>All of the below examples assume <tt>stdio_mgr</tt> has already\nbeen imported via:</p>\n<pre>from stdio_mgr import stdio_mgr\n</pre>\n<p><strong>Mock</strong> <tt>stdout</tt><strong>:</strong></p>\n<pre>&gt;&gt;&gt; with stdio_mgr() as (in_, out_, err_):\n...     print('foobar')\n...     out_cap = out_.getvalue()\n&gt;&gt;&gt; out_cap\n'foobar\\n'\n&gt;&gt;&gt; in_.closed and out_.closed and err_.closed\nTrue\n</pre>\n<p>By default <tt>print</tt>\n<a href=\"https://docs.python.org/3/library/functions.html#print\" rel=\"nofollow\">appends a newline</a>\nafter each argument, which is why <tt>out_cap</tt> is <tt>'foobar\\n'</tt>\nand not just <tt>'foobar'</tt>.</p>\n<p>As currently implemented, <tt>stdio_mgr</tt> closes all three mocked streams\nupon exiting the managed context.</p>\n<p><strong>Mock</strong> <tt>stderr</tt><strong>:</strong></p>\n<pre>&gt;&gt;&gt; import warnings\n&gt;&gt;&gt; with stdio_mgr() as (in_, out_, err_):\n...     warnings.warn(\"'foo' has no 'bar'\")\n...     err_cap = err_.getvalue()\n&gt;&gt;&gt; err_cap\n\"...UserWarning: 'foo' has no 'bar'\\n...\"\n</pre>\n<p><strong>Mock</strong> <tt>stdin</tt><strong>:</strong></p>\n<p>The simulated user input has to be pre-loaded to the mocked stream.\n<strong>Be sure to include newlines in the input to correspond to\neach mocked</strong> <cite>Enter</cite> <strong>keypress!</strong>\nOtherwise, <tt>input</tt> will hang, waiting for a newline\nthat will never come.</p>\n<p>If the entirety of the input is known in advance,\nit can just be provided as an argument to <tt>stdio_mgr</tt>.\nOtherwise, <tt>.append()</tt> mocked input to <tt>in_</tt>\nwithin the managed context as needed:</p>\n<pre>&gt;&gt;&gt; with stdio_mgr('foobar\\n') as (in_, out_, err_):\n...     print('baz')\n...     in_cap = input('??? ')\n...\n...     _ = in_.append(in_cap[:3] + '\\n')\n...     in_cap2 = input('??? ')\n...\n...     out_cap = out_.getvalue()\n&gt;&gt;&gt; in_cap\n'foobar'\n&gt;&gt;&gt; in_cap2\n'foo'\n&gt;&gt;&gt; out_cap\n'baz\\n??? foobar\\n??? foo\\n'\n</pre>\n<p>The <tt>_ =</tt> assignment suppresses <tt>print</tt>ing of the return value\nfrom the <tt>in_.append()</tt> call\u2013otherwise, it would be interleaved\nin <tt>out_cap</tt>, since this example is shown for an interactive context.\nFor non-interactive execution, as with <tt>unittest</tt>, <tt>pytest</tt>, etc.,\nthese \u2018muting\u2019 assignments should not be necessary.</p>\n<p><strong>Both</strong> the <tt><span class=\"pre\">'???</span> '</tt> prompts for <tt>input</tt>\n<strong>and</strong> the mocked input strings\nare echoed to <tt>out_</tt>, mimicking what a CLI user would see.</p>\n<p>A subtlety: While the trailing newline on, e.g., <tt>'foobar\\n'</tt> is stripped\nby <tt>input</tt>, it is <em>retained</em> in <tt>out_</tt>.\nThis is because <tt>in_</tt> tees the content read from it to <tt>out_</tt>\n<em>before</em> that content is passed to <tt>input</tt>.</p>\n<p><strong>Want to modify internal</strong> <tt>print</tt> <strong>calls\nwithin a function or method?</strong></p>\n<p>In addition to mocking, <tt>stdio_mgr</tt> can also be used to\nwrap functions that directly output to <tt>stdout</tt>/<tt>stderr</tt>. A <tt>stdout</tt> example:</p>\n<pre>&gt;&gt;&gt; def emboxen(func):\n...     def func_wrapper(s):\n...         from stdio_mgr import stdio_mgr\n...\n...         with stdio_mgr() as (in_, out_, err_):\n...             func(s)\n...             content = out_.getvalue()\n...\n...         max_len = max(map(len, content.splitlines()))\n...         fmt_str = '| {{: &lt;{0}}} |\\n'.format(max_len)\n...\n...         newcontent = '=' * (max_len + 4) + '\\n'\n...         for line in content.splitlines():\n...             newcontent += fmt_str.format(line)\n...         newcontent += '=' * (max_len + 4)\n...\n...         print(newcontent)\n...\n...     return func_wrapper\n\n&gt;&gt;&gt; @emboxen\n... def testfunc(s):\n...     print(s)\n\n&gt;&gt;&gt; testfunc(\"\"\"\\\n... Foo bar baz quux.\n... Lorem ipsum dolor sit amet.\"\"\")\n===============================\n| Foo bar baz quux.           |\n| Lorem ipsum dolor sit amet. |\n===============================\n</pre>\n<hr class=\"docutils\">\n<p>Available on <a href=\"https://pypi.python.org/pypi/stdio-mgr\" rel=\"nofollow\">PyPI</a>\n(<tt>pip install <span class=\"pre\">stdio-mgr</span></tt>).</p>\n<p>Source on <a href=\"https://github.com/bskinn/stdio-mgr\" rel=\"nofollow\">GitHub</a>.  Bug reports\nand feature requests are welcomed at the\n<a href=\"https://github.com/bskinn/stdio-mgr/issues\" rel=\"nofollow\">Issues</a> page there.</p>\n<p>Copyright (c) 2018-2019 Brian Skinn</p>\n<p>License: The MIT License. See <a href=\"https://github.com/bskinn/stdio-mgr/blob/master/LICENSE.txt\" rel=\"nofollow\">LICENSE.txt</a>\nfor full license terms.</p>\n\n          </div>"}, "last_serial": 4808144, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "a6208cb9319a435c0cf4ab7643136987", "sha256": "ec8da381a000f42bcaea699508fc0631bbe7f1965e2b8d9820d339af35a289f3"}, "downloads": -1, "filename": "stdio_mgr-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a6208cb9319a435c0cf4ab7643136987", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 8826, "upload_time": "2018-04-02T03:29:48", "upload_time_iso_8601": "2018-04-02T03:29:48.854577Z", "url": "https://files.pythonhosted.org/packages/a9/3c/90b6e7e957a6ad8d134b4d4687cb639539172a32611bf7c8dc4937be46f7/stdio_mgr-1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5c9a5dfbab4e5422d5e8ed128273b7fe", "sha256": "3e8398ebba9e22c69d373b02676fba618172ea418ea57c1f2a72e45d62361d6d"}, "downloads": -1, "filename": "stdio-mgr-1.0.tar.gz", "has_sig": false, "md5_digest": "5c9a5dfbab4e5422d5e8ed128273b7fe", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 6723, "upload_time": "2018-04-02T03:29:59", "upload_time_iso_8601": "2018-04-02T03:29:59.355705Z", "url": "https://files.pythonhosted.org/packages/ea/c4/744db436f530b5d7e9a7c96e6e7e8c0684a1a26c90dbac92419a68ea6c11/stdio-mgr-1.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "81625e1bbacb2b0e4016330f93838f40", "sha256": "c8e6c9568709560dfc3e57fa322fe6d72c505ac7e666b12f22aea1589006da95"}, "downloads": -1, "filename": "stdio_mgr-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "81625e1bbacb2b0e4016330f93838f40", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 7386, "upload_time": "2019-02-11T22:01:13", "upload_time_iso_8601": "2019-02-11T22:01:13.560521Z", "url": "https://files.pythonhosted.org/packages/f5/49/5a7e6b42fb3b2bca6cc3dedc6e935f224bf0e4ac9fdd1e368d16d540fa7f/stdio_mgr-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "027b7e83918676ce44698883cab3d37c", "sha256": "781c3b51632a5e098ecad316e1fa64959ae540e1d66d8ea8a9db9c9b7b9f4186"}, "downloads": -1, "filename": "stdio-mgr-1.0.1.tar.gz", "has_sig": false, "md5_digest": "027b7e83918676ce44698883cab3d37c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 7222, "upload_time": "2019-02-11T22:01:24", "upload_time_iso_8601": "2019-02-11T22:01:24.124763Z", "url": "https://files.pythonhosted.org/packages/dc/e2/5a1e907d5ecdcadaca69663d50426a19e513dc1cdbaefbfab9e6212009b4/stdio-mgr-1.0.1.tar.gz", "yanked": false}], "1.0rc1": [{"comment_text": "", "digests": {"md5": "08f3bc37b58692f7c1150119ab578de1", "sha256": "53905e5d41dad9a2ca75304d0fc2de7a63c941243b75901107f46ca053b4d64a"}, "downloads": -1, "filename": "stdio_mgr-1.0rc1-py3-none-any.whl", "has_sig": false, "md5_digest": "08f3bc37b58692f7c1150119ab578de1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 5289, "upload_time": "2018-03-26T19:59:45", "upload_time_iso_8601": "2018-03-26T19:59:45.850301Z", "url": "https://files.pythonhosted.org/packages/1a/af/8d2bb815d9993747a8946d2977fba86b1a1542c1012181a0d7eea4166a87/stdio_mgr-1.0rc1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "606147327144e6cad9ed4ca7ebff79cf", "sha256": "45cf1c5ff5b912d7ca516419c71797f47ec7b1bf83d9ea53bba41c17c7855d4d"}, "downloads": -1, "filename": "stdio-mgr-1.0rc1.tar.gz", "has_sig": false, "md5_digest": "606147327144e6cad9ed4ca7ebff79cf", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 4136, "upload_time": "2018-03-26T19:59:55", "upload_time_iso_8601": "2018-03-26T19:59:55.615233Z", "url": "https://files.pythonhosted.org/packages/04/cb/4970e115d29a46e21578193c50d5b69fa6a7dac04fea5ca931bffe0dc869/stdio-mgr-1.0rc1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "81625e1bbacb2b0e4016330f93838f40", "sha256": "c8e6c9568709560dfc3e57fa322fe6d72c505ac7e666b12f22aea1589006da95"}, "downloads": -1, "filename": "stdio_mgr-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "81625e1bbacb2b0e4016330f93838f40", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 7386, "upload_time": "2019-02-11T22:01:13", "upload_time_iso_8601": "2019-02-11T22:01:13.560521Z", "url": "https://files.pythonhosted.org/packages/f5/49/5a7e6b42fb3b2bca6cc3dedc6e935f224bf0e4ac9fdd1e368d16d540fa7f/stdio_mgr-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "027b7e83918676ce44698883cab3d37c", "sha256": "781c3b51632a5e098ecad316e1fa64959ae540e1d66d8ea8a9db9c9b7b9f4186"}, "downloads": -1, "filename": "stdio-mgr-1.0.1.tar.gz", "has_sig": false, "md5_digest": "027b7e83918676ce44698883cab3d37c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 7222, "upload_time": "2019-02-11T22:01:24", "upload_time_iso_8601": "2019-02-11T22:01:24.124763Z", "url": "https://files.pythonhosted.org/packages/dc/e2/5a1e907d5ecdcadaca69663d50426a19e513dc1cdbaefbfab9e6212009b4/stdio-mgr-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:02:14 2020"}