{"info": {"author": "Andr\u00e9 Gaul", "author_email": "gaul@web-yard.de", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Topic :: Scientific/Engineering :: Mathematics"], "description": "# KryPy\n\n[![Build Status](https://travis-ci.org/andrenarchy/krypy.png?branch=master)](https://travis-ci.org/andrenarchy/krypy)\n[![Documentation Status](https://readthedocs.org/projects/krypy/badge/?version=latest)](http://krypy.readthedocs.org/en/latest/?badge=latest)\n[![doi](https://zenodo.org/badge/doi/10.5281/zenodo.10283.png)](https://zenodo.org/record/10283)\n[![Pypi version](https://img.shields.io/pypi/v/krypy.svg)](https://pypi.python.org/pypi/krypy)\n[![Pypi downloads](https://img.shields.io/pypi/dm/krypy.svg)](https://pypi.python.org/pypi/krypy)\n\nKryPy is a Python 3 module for Krylov subspace methods for the solution of linear algebraic systems. This includes enhanced versions of CG, MINRES and GMRES as well as methods for the efficient solution of sequences of linear systems.\n\n# Features\n\nKryPy gives you an easy-to-use yet flexible interface to Krylov subspace methods for linear algebraic systems. Compared to the implementations in [SciPy](http://docs.scipy.org/doc/scipy/reference/sparse.linalg.html) (or MATLAB), KryPy allows you to supply additional arguments that may help you to tune the solver for the specific problem you want to solve. The additional arguments may also be of interest if you are doing research on Krylov subspace methods. \n\nSome features of KryPy are:\n\n*  **User-defined inner products** - useful when solving a linear algebraic system whose operator is self-adjoined in a non-Euclidean inner-product. This way, CG or MINRES can be applied to self-adjoined (but non-symmetric/non-Hermitian) operators easily.\n*  **Full control of preconditioners** - the order of applying preconditioners matters. This is why you can supply two left preconditioners (one of whom implicitly changes the inner product and thus has to be positive definite) and one right preconditioner. Take a look at the arguments ```M```, ```Ml``` and ```Mr```.\n*  **Get the Arnoldi/Lanczos basis and Hessenberg matrix** - you want to extract further information from the generated vectors (e.g. recycling)? Just pass the optional argument ```store_arnoldi=True```.\n*  **Explicitly computed residuals on demand** - if you do research on Krylov subspace methods or preconditioners, then you sometimes want to know the explicitly computed residual in each iteration (in contrast to an updated residual which can be obtained implicitly). Then you should pass the optional argument ```explicit_residual=True```.\n*  **Compute errors** - if you have (for research purposes) the exact solution at hand and want to monitor the error in each iteration instead of the residual, you can supply the optional argument ```exact_solution=x_exact``` to the ```LinearSystem```.\n\n# Usage\n\n### Documentation\nThe documentation is hosted at\n[krypy.readthedocs.org](http://krypy.readthedocs.org).\n\n### Example\n![](https://raw.githubusercontent.com/nschloe/krypy/master/example.png)\n\nThe above convergence history is obtained with the following example where the\n[Gmres](http://krypy.readthedocs.org/en/latest/krypy.linsys.html#krypy.linsys.Gmres)\nmethod is used to solve the linear system `A*x=b` with the diagonal matrix\n`A=diag(1e-3,2,...,100)` and right hand side `b=[1,...,1]`.\n```python\nimport numpy\nimport krypy\n\nA = numpy.diag([1.0e-3] + list(range(2, 101)))\nb = numpy.ones(100)\n\n# sol, out = krypy.cg(A, b)\n# sol, out = krypy.minres(A, b)\nsol, out = krypy.gmres(A, b)\n\n# sol is None if no solution has been found\n# out.resnorms the relative residual norms and some more data\n\n# plot residuals\nimport matplotlib.pyplot as plt\nplt.semilogy(out.resnorms)\nplt.show()\n```\nOf course, this is just a toy example where you would not use GMRES in\npractice. KryPy can handle arbitrary large matrices - as long as the (hopefully\nsparse) matrices and the generated basis of the Krylov subspace fit into your\nmemory. ;)\nFurthermore, in actual applications, you definitely want to adjust\n[Gmres](http://krypy.readthedocs.org/en/latest/krypy.linsys.html#krypy.linsys.Gmres)'\nparameters such as the residual tolerance.\n\n### Help\n\nHelp can be optained via Python's builtin help system. For example, you can use\nthe `?` in `ipython`:\n```python\nfrom krypy.linsys import Gmres\n?Gmres\n```\n\n# Installing\n### pip / PyPi\nSimply run ```pip install krypy```.\n\n### Ubuntu\nThere's an [Ubuntu PPA](https://launchpad.net/~andrenarchy/+archive/python) with packages for Python 2 and Python 3.\n\n### Installing from source\nKryPy has the following dependencies:\n* NumPy\n* SciPy\n\n# Development\n\nKryPy is currently maintained by [Andr\u00e9 Gaul](http://www.math.tu-berlin.de/~gaul/). Feel free to contact Andr\u00e9. Please submit feature requests and bugs as github issues.\n\nKryPy is developed with continuous integration. Current status: [![Build Status](https://travis-ci.org/andrenarchy/krypy.png?branch=master)](https://travis-ci.org/andrenarchy/krypy)\n\n### Distribution\n\nTo create a new release\n\n1. bump the `__version__` number,\n\n2. create a Git tag,\n    ```\n    $ git tag -a v0.3.1\n    $ git push --tags\n    ```\n    and\n\n3. upload to PyPi:\n    ```\n    $ make upload\n    ```\n\n\n# License\n\nKryPy is free software licensed under the [MIT License](http://opensource.org/licenses/mit-license.php).\n\n# References\n\nKryPy evolved from the [PyNosh](https://github.com/nschloe/pynosh) package (Python framework for nonlinear Schr\u00f6dinger equations; joint work with [Nico Schl\u00f6mer](https://github.com/nschloe)) which was used for experiments in the following publication:\n* [Preconditioned Recycling Krylov subspace methods for self-adjoint problems, A. Gaul and N. Schl\u00f6mer, arxiv: 1208.0264, 2012](http://arxiv.org/abs/1208.0264)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/andrenarchy/krypy", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "krypy", "package_url": "https://pypi.org/project/krypy/", "platform": "", "project_url": "https://pypi.org/project/krypy/", "project_urls": {"Homepage": "https://github.com/andrenarchy/krypy"}, "release_url": "https://pypi.org/project/krypy/2.2.0/", "requires_dist": ["numpy (>=1.11)", "scipy (>=0.17)"], "requires_python": ">=3.6", "summary": "Krylov subspace methods for linear systems", "version": "2.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>KryPy</h1>\n<p><a href=\"https://travis-ci.org/andrenarchy/krypy\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/dc0034167e579d72566ed6b06d05e736fe5f45c2/68747470733a2f2f7472617669732d63692e6f72672f616e6472656e61726368792f6b727970792e706e673f6272616e63683d6d6173746572\"></a>\n<a href=\"http://krypy.readthedocs.org/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/db7c6795da4b2bdaca9a44d332c0076df15b037a/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f6b727970792f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://zenodo.org/record/10283\" rel=\"nofollow\"><img alt=\"doi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/62705f44fd54a9a1813131620fc13f4e9b91e26d/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f646f692f31302e353238312f7a656e6f646f2e31303238332e706e67\"></a>\n<a href=\"https://pypi.python.org/pypi/krypy\" rel=\"nofollow\"><img alt=\"Pypi version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e032183210e7cf435a80e1e86c158e40d0f6232f/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6b727970792e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/krypy\" rel=\"nofollow\"><img alt=\"Pypi downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4eeb3686d4be3c94102295bee8bb4f16656c66d8/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f6b727970792e737667\"></a></p>\n<p>KryPy is a Python 3 module for Krylov subspace methods for the solution of linear algebraic systems. This includes enhanced versions of CG, MINRES and GMRES as well as methods for the efficient solution of sequences of linear systems.</p>\n<h1>Features</h1>\n<p>KryPy gives you an easy-to-use yet flexible interface to Krylov subspace methods for linear algebraic systems. Compared to the implementations in <a href=\"http://docs.scipy.org/doc/scipy/reference/sparse.linalg.html\" rel=\"nofollow\">SciPy</a> (or MATLAB), KryPy allows you to supply additional arguments that may help you to tune the solver for the specific problem you want to solve. The additional arguments may also be of interest if you are doing research on Krylov subspace methods.</p>\n<p>Some features of KryPy are:</p>\n<ul>\n<li><strong>User-defined inner products</strong> - useful when solving a linear algebraic system whose operator is self-adjoined in a non-Euclidean inner-product. This way, CG or MINRES can be applied to self-adjoined (but non-symmetric/non-Hermitian) operators easily.</li>\n<li><strong>Full control of preconditioners</strong> - the order of applying preconditioners matters. This is why you can supply two left preconditioners (one of whom implicitly changes the inner product and thus has to be positive definite) and one right preconditioner. Take a look at the arguments <code>M</code>, <code>Ml</code> and <code>Mr</code>.</li>\n<li><strong>Get the Arnoldi/Lanczos basis and Hessenberg matrix</strong> - you want to extract further information from the generated vectors (e.g. recycling)? Just pass the optional argument <code>store_arnoldi=True</code>.</li>\n<li><strong>Explicitly computed residuals on demand</strong> - if you do research on Krylov subspace methods or preconditioners, then you sometimes want to know the explicitly computed residual in each iteration (in contrast to an updated residual which can be obtained implicitly). Then you should pass the optional argument <code>explicit_residual=True</code>.</li>\n<li><strong>Compute errors</strong> - if you have (for research purposes) the exact solution at hand and want to monitor the error in each iteration instead of the residual, you can supply the optional argument <code>exact_solution=x_exact</code> to the <code>LinearSystem</code>.</li>\n</ul>\n<h1>Usage</h1>\n<h3>Documentation</h3>\n<p>The documentation is hosted at\n<a href=\"http://krypy.readthedocs.org\" rel=\"nofollow\">krypy.readthedocs.org</a>.</p>\n<h3>Example</h3>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d09fc906136a1cae62227603c3587ee80664ee98/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6e7363686c6f652f6b727970792f6d61737465722f6578616d706c652e706e67\"></p>\n<p>The above convergence history is obtained with the following example where the\n<a href=\"http://krypy.readthedocs.org/en/latest/krypy.linsys.html#krypy.linsys.Gmres\" rel=\"nofollow\">Gmres</a>\nmethod is used to solve the linear system <code>A*x=b</code> with the diagonal matrix\n<code>A=diag(1e-3,2,...,100)</code> and right hand side <code>b=[1,...,1]</code>.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span>\n<span class=\"kn\">import</span> <span class=\"nn\">krypy</span>\n\n<span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">diag</span><span class=\"p\">([</span><span class=\"mf\">1.0e-3</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">101</span><span class=\"p\">)))</span>\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># sol, out = krypy.cg(A, b)</span>\n<span class=\"c1\"># sol, out = krypy.minres(A, b)</span>\n<span class=\"n\">sol</span><span class=\"p\">,</span> <span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"n\">krypy</span><span class=\"o\">.</span><span class=\"n\">gmres</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># sol is None if no solution has been found</span>\n<span class=\"c1\"># out.resnorms the relative residual norms and some more data</span>\n\n<span class=\"c1\"># plot residuals</span>\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">semilogy</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"o\">.</span><span class=\"n\">resnorms</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n<p>Of course, this is just a toy example where you would not use GMRES in\npractice. KryPy can handle arbitrary large matrices - as long as the (hopefully\nsparse) matrices and the generated basis of the Krylov subspace fit into your\nmemory. ;)\nFurthermore, in actual applications, you definitely want to adjust\n<a href=\"http://krypy.readthedocs.org/en/latest/krypy.linsys.html#krypy.linsys.Gmres\" rel=\"nofollow\">Gmres</a>'\nparameters such as the residual tolerance.</p>\n<h3>Help</h3>\n<p>Help can be optained via Python's builtin help system. For example, you can use\nthe <code>?</code> in <code>ipython</code>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">krypy.linsys</span> <span class=\"kn\">import</span> <span class=\"n\">Gmres</span>\n<span class=\"err\">?</span><span class=\"n\">Gmres</span>\n</pre>\n<h1>Installing</h1>\n<h3>pip / PyPi</h3>\n<p>Simply run <code>pip install krypy</code>.</p>\n<h3>Ubuntu</h3>\n<p>There's an <a href=\"https://launchpad.net/%7Eandrenarchy/+archive/python\" rel=\"nofollow\">Ubuntu PPA</a> with packages for Python 2 and Python 3.</p>\n<h3>Installing from source</h3>\n<p>KryPy has the following dependencies:</p>\n<ul>\n<li>NumPy</li>\n<li>SciPy</li>\n</ul>\n<h1>Development</h1>\n<p>KryPy is currently maintained by <a href=\"http://www.math.tu-berlin.de/%7Egaul/\" rel=\"nofollow\">Andr\u00e9 Gaul</a>. Feel free to contact Andr\u00e9. Please submit feature requests and bugs as github issues.</p>\n<p>KryPy is developed with continuous integration. Current status: <a href=\"https://travis-ci.org/andrenarchy/krypy\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/dc0034167e579d72566ed6b06d05e736fe5f45c2/68747470733a2f2f7472617669732d63692e6f72672f616e6472656e61726368792f6b727970792e706e673f6272616e63683d6d6173746572\"></a></p>\n<h3>Distribution</h3>\n<p>To create a new release</p>\n<ol>\n<li>\n<p>bump the <code>__version__</code> number,</p>\n</li>\n<li>\n<p>create a Git tag,</p>\n<pre><code>$ git tag -a v0.3.1\n$ git push --tags\n</code></pre>\n<p>and</p>\n</li>\n<li>\n<p>upload to PyPi:</p>\n<pre><code>$ make upload\n</code></pre>\n</li>\n</ol>\n<h1>License</h1>\n<p>KryPy is free software licensed under the <a href=\"http://opensource.org/licenses/mit-license.php\" rel=\"nofollow\">MIT License</a>.</p>\n<h1>References</h1>\n<p>KryPy evolved from the <a href=\"https://github.com/nschloe/pynosh\" rel=\"nofollow\">PyNosh</a> package (Python framework for nonlinear Schr\u00f6dinger equations; joint work with <a href=\"https://github.com/nschloe\" rel=\"nofollow\">Nico Schl\u00f6mer</a>) which was used for experiments in the following publication:</p>\n<ul>\n<li><a href=\"http://arxiv.org/abs/1208.0264\" rel=\"nofollow\">Preconditioned Recycling Krylov subspace methods for self-adjoint problems, A. Gaul and N. Schl\u00f6mer, arxiv: 1208.0264, 2012</a></li>\n</ul>\n\n          </div>"}, "last_serial": 7084812, "releases": {"2.0.0": [{"comment_text": "", "digests": {"md5": "b7d3bb1be6cf3d9f037b88dfc93fe900", "sha256": "e438ca6ad8eafe2ca7550ed038b92ef5da8ea371558c564399f36bce8eeffbe5"}, "downloads": -1, "filename": "krypy-2.0.0.tar.gz", "has_sig": false, "md5_digest": "b7d3bb1be6cf3d9f037b88dfc93fe900", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37471, "upload_time": "2014-03-14T13:42:41", "upload_time_iso_8601": "2014-03-14T13:42:41.834628Z", "url": "https://files.pythonhosted.org/packages/f6/00/4a197e6d9ffd187c3788191487927ccb5409313d45325ec14ce866aceada/krypy-2.0.0.tar.gz", "yanked": false}], "2.0.0b1": [{"comment_text": "", "digests": {"md5": "5368393ed6cb384be308545e33541f3b", "sha256": "96be9786522a247b48d23578c670a2b15d35ac6203f87985ba4126619108e954"}, "downloads": -1, "filename": "krypy-2.0.0b1.tar.gz", "has_sig": false, "md5_digest": "5368393ed6cb384be308545e33541f3b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36014, "upload_time": "2014-03-13T10:29:55", "upload_time_iso_8601": "2014-03-13T10:29:55.792637Z", "url": "https://files.pythonhosted.org/packages/2b/41/294cee24eed7eb972fc924952b35f574002cae4cc76964211120583b1e5b/krypy-2.0.0b1.tar.gz", "yanked": false}], "2.1.0": [{"comment_text": "", "digests": {"md5": "d19d25791385d244a0f57820154bb715", "sha256": "95bc74ae735d3645940e322874b72d975c6ed668a9f4b84bbb64e55a12780833"}, "downloads": -1, "filename": "krypy-2.1.0.tar.gz", "has_sig": false, "md5_digest": "d19d25791385d244a0f57820154bb715", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44411, "upload_time": "2014-04-11T12:18:30", "upload_time_iso_8601": "2014-04-11T12:18:30.855818Z", "url": "https://files.pythonhosted.org/packages/9b/96/8dbbd3d9a4e47cb534e0f421c2a42d98262396b7faf99a5604a3ae1c97ee/krypy-2.1.0.tar.gz", "yanked": false}], "2.1.1": [{"comment_text": "", "digests": {"md5": "d9f1d11a5521378bfd127fb5e219a015", "sha256": "43160596d6d84cf3cea3430cd9b5f9501ceeae5fae39dbbac36871c118bdcd31"}, "downloads": -1, "filename": "krypy-2.1.1.tar.gz", "has_sig": false, "md5_digest": "d9f1d11a5521378bfd127fb5e219a015", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44819, "upload_time": "2014-04-17T08:05:44", "upload_time_iso_8601": "2014-04-17T08:05:44.561363Z", "url": "https://files.pythonhosted.org/packages/2d/3f/3e43d3c8debfa5f257a3d3073f8ee5f1dab0844082e1d7f89a256b35fde7/krypy-2.1.1.tar.gz", "yanked": false}], "2.1.2": [{"comment_text": "", "digests": {"md5": "e827113271659ffe2ab6f86cc114e1b1", "sha256": "2db08c069477eb615d60eec5cec9fd36359980cea53ec2b30354e014d74d1aba"}, "downloads": -1, "filename": "krypy-2.1.2.tar.gz", "has_sig": false, "md5_digest": "e827113271659ffe2ab6f86cc114e1b1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44750, "upload_time": "2015-08-16T17:00:52", "upload_time_iso_8601": "2015-08-16T17:00:52.148712Z", "url": "https://files.pythonhosted.org/packages/e0/93/ebbd7791dfeb6a64b4e0a465f3b5c6b1155e4dc165555028712b4053db58/krypy-2.1.2.tar.gz", "yanked": false}], "2.1.3": [{"comment_text": "", "digests": {"md5": "df75ad325c41baaa22ebd08c50d3d872", "sha256": "432769f85dc18829c9b637a68d585ea8ba9714c60cf5d87ef2b61ea482257ebe"}, "downloads": -1, "filename": "krypy-2.1.3.tar.gz", "has_sig": true, "md5_digest": "df75ad325c41baaa22ebd08c50d3d872", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 45544, "upload_time": "2015-10-18T15:27:17", "upload_time_iso_8601": "2015-10-18T15:27:17.356708Z", "url": "https://files.pythonhosted.org/packages/3d/39/eaec9ab5c6da2a79c9181ca04a9dd65bec959eae95bd0ff91a9c75733760/krypy-2.1.3.tar.gz", "yanked": false}], "2.1.4": [{"comment_text": "", "digests": {"md5": "c829fb203840884715a1e8dd06694830", "sha256": "8bed4f021c5053f159225b82df063bb30b103a31c67cbfe8e2b75482c37d7706"}, "downloads": -1, "filename": "krypy-2.1.4.tar.gz", "has_sig": true, "md5_digest": "c829fb203840884715a1e8dd06694830", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 45577, "upload_time": "2015-10-18T16:23:17", "upload_time_iso_8601": "2015-10-18T16:23:17.295784Z", "url": "https://files.pythonhosted.org/packages/cf/7b/155b47c92a71c8aff5d15c891e32477daa794ac09bff8b9ab2363d10ea7b/krypy-2.1.4.tar.gz", "yanked": false}], "2.1.5": [{"comment_text": "", "digests": {"md5": "29f259faad1e6e2e86ce0e481acf4880", "sha256": "3ae73d7251690dd833a4668077b69670bf6745ca9080afb38863aa5137cfcc36"}, "downloads": -1, "filename": "krypy-2.1.5.tar.gz", "has_sig": true, "md5_digest": "29f259faad1e6e2e86ce0e481acf4880", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 45336, "upload_time": "2016-03-22T09:43:59", "upload_time_iso_8601": "2016-03-22T09:43:59.148914Z", "url": "https://files.pythonhosted.org/packages/f1/19/c094b3571c2d6308ae2e013a8986be72206ddce9b9de2434350ea9538e9b/krypy-2.1.5.tar.gz", "yanked": false}], "2.1.6": [{"comment_text": "", "digests": {"md5": "96d49d991bdfd0b3aff8225e640c3099", "sha256": "8eff4fa07b7a590c3e186bd4e2f69d7288bb9fdeb35d4270ee0b2c9b7650a468"}, "downloads": -1, "filename": "krypy-2.1.6.tar.gz", "has_sig": true, "md5_digest": "96d49d991bdfd0b3aff8225e640c3099", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 46318, "upload_time": "2017-06-06T11:18:10", "upload_time_iso_8601": "2017-06-06T11:18:10.664694Z", "url": "https://files.pythonhosted.org/packages/44/e7/b774a83c23a667195ba1facab230da3664889d9240ec398b9d648a3bb473/krypy-2.1.6.tar.gz", "yanked": false}], "2.1.7": [{"comment_text": "", "digests": {"md5": "c11c8f0b2fe7496296fe4cf412506184", "sha256": "4651fab0c800b124d27b438ca5be471f547fabc765243adf1fc9f23c4cc6c89a"}, "downloads": -1, "filename": "krypy-2.1.7.tar.gz", "has_sig": true, "md5_digest": "c11c8f0b2fe7496296fe4cf412506184", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 45311, "upload_time": "2018-01-18T11:54:34", "upload_time_iso_8601": "2018-01-18T11:54:34.729410Z", "url": "https://files.pythonhosted.org/packages/e2/84/8de0afa3d6a969c170c7bafb91d3bd19b29b67c35e4ba53ccf275440f8be/krypy-2.1.7.tar.gz", "yanked": false}], "2.2.0": [{"comment_text": "", "digests": {"md5": "a65c441e7f3e05a5befa8b847e22a794", "sha256": "0aad87bced5afb1d2035920fae733b4858917d5254d4f67c4cf488290ac5a8cc"}, "downloads": -1, "filename": "krypy-2.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a65c441e7f3e05a5befa8b847e22a794", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 49327, "upload_time": "2020-04-23T14:25:09", "upload_time_iso_8601": "2020-04-23T14:25:09.419667Z", "url": "https://files.pythonhosted.org/packages/db/94/e99d97e309ea1ca94d9271529f2ba5366c7c7aa935f3c016599df101ca52/krypy-2.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8460dcdf91d77f5997843249d0bae26f", "sha256": "957ae3e0076d73e3ca7c23dcc375b0485b3ff71127673be2160c5f560b9c2925"}, "downloads": -1, "filename": "krypy-2.2.0.tar.gz", "has_sig": false, "md5_digest": "8460dcdf91d77f5997843249d0bae26f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 48026, "upload_time": "2020-04-23T14:25:11", "upload_time_iso_8601": "2020-04-23T14:25:11.025857Z", "url": "https://files.pythonhosted.org/packages/7f/f0/40ddca159f312b86435c4d96469844d5b0228fff5b8839c00829317465f3/krypy-2.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a65c441e7f3e05a5befa8b847e22a794", "sha256": "0aad87bced5afb1d2035920fae733b4858917d5254d4f67c4cf488290ac5a8cc"}, "downloads": -1, "filename": "krypy-2.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a65c441e7f3e05a5befa8b847e22a794", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 49327, "upload_time": "2020-04-23T14:25:09", "upload_time_iso_8601": "2020-04-23T14:25:09.419667Z", "url": "https://files.pythonhosted.org/packages/db/94/e99d97e309ea1ca94d9271529f2ba5366c7c7aa935f3c016599df101ca52/krypy-2.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8460dcdf91d77f5997843249d0bae26f", "sha256": "957ae3e0076d73e3ca7c23dcc375b0485b3ff71127673be2160c5f560b9c2925"}, "downloads": -1, "filename": "krypy-2.2.0.tar.gz", "has_sig": false, "md5_digest": "8460dcdf91d77f5997843249d0bae26f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 48026, "upload_time": "2020-04-23T14:25:11", "upload_time_iso_8601": "2020-04-23T14:25:11.025857Z", "url": "https://files.pythonhosted.org/packages/7f/f0/40ddca159f312b86435c4d96469844d5b0228fff5b8839c00829317465f3/krypy-2.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:48:45 2020"}