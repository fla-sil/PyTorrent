{"info": {"author": "Santiago C Paredes", "author_email": "santiago.paredes2012@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Topic :: Software Development :: Build Tools"], "description": "# spychronous\nA simple synchronous job runner for parallel processing tasks.\n\n## spychronous in action\nTL;DR Here's a quick example:\n```python\nfrom spychronous import SynchronousJob as Job\n\ndef get_plus_one(num):\n    return num + 1\n\nnums = [1, 2, 3]\nplus_one_job = Job(func=get_plus_one, items=nums)\n\nprint plus_one_job.run_multi_processed()\n# OUTPUT\n# [2, 3, 4]\n```\n## Working with spychronous\nSay you've written a function that will be repeatedly called to transform a list:\n```python\n>>> def get_plus_one(item):\n...     return item + 1\n...\n>>> items = [1, 2, 3]\n>>> for item in items:\n...     get_plus_one(item)\n...\n2\n3\n4\n```\nUsing a spychronous `Job` instead, you can _parallel process_ the list-transformation (and repeatedly apply your function to each item in your list):\n```python\n>>> from spychronous import SynchronousJob as Job\n>>> plus_one_job = Job(func=get_plus_one, items=items)\n>>> plus_one_job.run_multi_processed()\n[2, 3, 4]\n```\nNow imagine your function changes to require _more_ arguments than simply an item from your list, like a `multiplier`:\n``` python\n>>> from time import sleep\n>>> from random import random\n>>> \n>>> def get_number(item, multiplier):\n...    sleep(random()*5) # your function executes at variable speed\n...    return item * multiplier\n```\n_Notice the first parameter will hold a single `item` from `Job`'s `items` and additional parameters (like `multiplier`) are listed in the signature afterwards._\n\n`Job` accounts for this by using `args`:\n``` python\n>>>\tmultiplier = 2\n>>>\tadditional_function_args = [multiplier]\n>>>\tnumbers_job = Job(func=get_number, items=items, args=additional_function_args)\n>>>\tnumbers_job.run_multi_processed()\n[8, 4, 6]\n```\n_Notice there's no guaranteed order of the output. See [Coupling output to input](#coupling-output-to-input) for tips on working with this behavior._\n#### Important Configurable Features\nIf you need to set process pool size, set worker timeouts, handle Ctrl-C, or run your job single-processed (to debug, for instance), the following features come in handy.\n###### Process Pool Size\n```python\nJob(...processes=20) # default is 4\n```\n###### Worker Timeouts\n```python\nminutes = 60\nJob(...timeout=5*minutes)\n```\n###### Non-Daemonic Process Pool\nThe default `multiprocessing.pool.Pool` disallows spawning processes within processes.  This can be properly circumvented with the `no_daemon` attribute.\n```python\nJob(...no_daemon=True)\n```\n###### Child-Exception Suppression\nIf you don't want a `Job`'s children (i.e. workers) to die if another raises an exception i.e. you want remaining items in your list to be processed, you can suppress those exceptions and log them instead.\n```python\nJob(...suppress_worker_exceptions=True)\n```\n###### Predictable Ctrl-C Handling\n`Job` also handles `SIGINT` gracefully by intentionally killing its workers ASAP, and then killing itself afterwards:\n```python\n>>> from time import sleep, strftime, gmtime\n>>> from random import random\n>>> def print_item(item):\n...     sleep(random()*50)\n...     print strftime(\"%H:%M:%S\", gmtime()), item\n...\n>>> printing_job = Job(func=print_item, items=items)\n>>> items = [1, 2, 3]\n>>> # GOAL: print the following: 1) item and item's timestamp 2) Ctrl-C's timestamp\n>>> try:\n...     printing_job.run_multi_processed()\n... finally:\n...     from time import gmtime, strftime, sleep\n...     print '', strftime(\"%H:%M:%S\", gmtime()), 'user issued Ctrl-C'\n...\n20:39:50 3\n20:39:52 1\n^C 20:41:53 user issued Ctrl-C\nTraceback (most recent call last):\n... Your typical stacktrace here ...\nKeyboardInterrupt\n```\n###### Run Job with Single Process (for dev-ing, debugging, etc.)\nWhen you plan to parallelize a job, it's helpful to develop with single-processed job execution first (and debug likewise) and then switch to multi-processed job execution when you're ready.  The spychronous `Job` can facilitate this with the `run_single_processed` instance method.\n\n_Utilizing run_single_processed: A Use Case..._\n\n* The following example illustrates the aforementioned proposal for development, debugging, and deployment with `run_single_processed`.\n* Illustrated using 3 different iterations of the same program:\n```python\n# 1st iteration: Development\nfrom spychronous import SynchronousJob as Job\ndef get_plus_one(num):\n    return num + 1/0\n\nnums = [1, 2, 3]\njob = Job(func=get_plus_one, items=nums)\njob.run_single_processed()\n# OUTPUT\n# Traceback (most recent call last):\n#   File \"<stdin>\", line 1, in <module>\n#   File \"spychronous.py\", line 33, in run_single_processed\n#     raise e\n# ZeroDivisionError: integer division or modulo by zero\n```\n```python\n# 2nd iteration: Debugging\nfrom spychronous import SynchronousJob as Job\ndef get_plus_one(num):\n    import pdb;pdb.set_trace()\n    return num + 1/0\n\nnums = [1, 2, 3]\njob = Job(func=get_plus_one, items=nums)\njob.run_single_processed()\n# OUTPUT\n# <stdin>(5)get_plus_one()\n# (Pdb) print item\n# 3\n```\n```python\n# 3rd iteration: Multiprocessing the Job\nfrom spychronous import SynchronousJob as Job\ndef get_plus_one(num):\n    return num\n\nnums = [1, 2, 3]\njob = Job(func=get_plus_one, items=nums)\njob.run_multi_processed() # notice method name changed from 'single' to 'multi'\n# OUTPUT\n# [1, 3, 2]\n```\n\n#### Working with instance methods\nIn order to call an instance method on a list of objects, simply wrap the instance method call in a trivial method:\n```python\n>>> class Cat(object):\n...     def __init__(self, name):\n...         self.name = name\n...     def meow(self):\n...         print 'meow, my name is', self.name\n... \n>>> def make_cat_meow(cat):\n...     cat.meow()\n...\n>>> dave = Cat('Dave')\n>>> meow_job = Job(func=make_cat_meow, items=[dave])\n>>> meow_job.run_multi_processed()\nmeow, my name is Dave\n```\n\n#### Coupling output to input\nIn order to preserve a relationship between input and output, simply wrap your function in one that couples the IO:\n```python\n>>> def get_num_times_2(num):\n...     return num * 2\n...\n>>> def double_num(num): # this is the coupling function.\n... \treturn (num, get_num_times_2(num))\n...\n>>> doubling_job = Job(func=double_num, items=[5])\n>>> doubling_job.run_multi_processed()\n[(5, 10)]\n```\n\n## TODO: AsynchronousJob, Thread Pools\nThe next step for spychronous is an asynchrounous job runner.  This is being developed in the develop branch.  After that, thread pools will be implemented as an alternative to process pools.\n\n## Why spychronous?\nI made spychronous because I wanted a clean out-of-the-box solution to quickly replace loops that I wanted to parallel process.  I wanted to hide burdensome configuration and process management from the user. I wanted a solution that would gracefully handle `SIGINT`.\n\nLastly, it was a fun programming exercise for me.\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/scparedes/spychronous/releases/download/1.0.post4/spychronous-1.0.post4.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/scparedes/spychronous", "keywords": "multiprocessing,multiprocess,multi,process,synchronous,job,runner,simple", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "spychronous", "package_url": "https://pypi.org/project/spychronous/", "platform": "", "project_url": "https://pypi.org/project/spychronous/", "project_urls": {"Download": "https://github.com/scparedes/spychronous/releases/download/1.0.post4/spychronous-1.0.post4.tar.gz", "Homepage": "https://github.com/scparedes/spychronous"}, "release_url": "https://pypi.org/project/spychronous/1.0.post4/", "requires_dist": null, "requires_python": "", "summary": "A simple synchronous job runner for parallel processing tasks in Python.", "version": "1.0.post4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>spychronous</h1>\n<p>A simple synchronous job runner for parallel processing tasks.</p>\n<h2>spychronous in action</h2>\n<p>TL;DR Here's a quick example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">spychronous</span> <span class=\"kn\">import</span> <span class=\"n\">SynchronousJob</span> <span class=\"k\">as</span> <span class=\"n\">Job</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">get_plus_one</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">num</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"n\">nums</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"n\">plus_one_job</span> <span class=\"o\">=</span> <span class=\"n\">Job</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"o\">=</span><span class=\"n\">get_plus_one</span><span class=\"p\">,</span> <span class=\"n\">items</span><span class=\"o\">=</span><span class=\"n\">nums</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span> <span class=\"n\">plus_one_job</span><span class=\"o\">.</span><span class=\"n\">run_multi_processed</span><span class=\"p\">()</span>\n<span class=\"c1\"># OUTPUT</span>\n<span class=\"c1\"># [2, 3, 4]</span>\n</pre>\n<h2>Working with spychronous</h2>\n<p>Say you've written a function that will be repeatedly called to transform a list:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">get_plus_one</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">return</span> <span class=\"n\">item</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">items</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"n\">get_plus_one</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"mi\">2</span>\n<span class=\"mi\">3</span>\n<span class=\"mi\">4</span>\n</pre>\n<p>Using a spychronous <code>Job</code> instead, you can <em>parallel process</em> the list-transformation (and repeatedly apply your function to each item in your list):</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">spychronous</span> <span class=\"kn\">import</span> <span class=\"n\">SynchronousJob</span> <span class=\"k\">as</span> <span class=\"n\">Job</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">plus_one_job</span> <span class=\"o\">=</span> <span class=\"n\">Job</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"o\">=</span><span class=\"n\">get_plus_one</span><span class=\"p\">,</span> <span class=\"n\">items</span><span class=\"o\">=</span><span class=\"n\">items</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">plus_one_job</span><span class=\"o\">.</span><span class=\"n\">run_multi_processed</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n</pre>\n<p>Now imagine your function changes to require <em>more</em> arguments than simply an item from your list, like a <code>multiplier</code>:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"kn\">import</span> <span class=\"n\">sleep</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">random</span> <span class=\"kn\">import</span> <span class=\"n\">random</span>\n<span class=\"o\">&gt;&gt;&gt;</span> \n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">get_number</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">,</span> <span class=\"n\">multiplier</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>    <span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"n\">random</span><span class=\"p\">()</span><span class=\"o\">*</span><span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"c1\"># your function executes at variable speed</span>\n<span class=\"o\">...</span>    <span class=\"k\">return</span> <span class=\"n\">item</span> <span class=\"o\">*</span> <span class=\"n\">multiplier</span>\n</pre>\n<p><em>Notice the first parameter will hold a single <code>item</code> from <code>Job</code>'s <code>items</code> and additional parameters (like <code>multiplier</code>) are listed in the signature afterwards.</em></p>\n<p><code>Job</code> accounts for this by using <code>args</code>:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span>\t<span class=\"n\">multiplier</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\t<span class=\"n\">additional_function_args</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">multiplier</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\t<span class=\"n\">numbers_job</span> <span class=\"o\">=</span> <span class=\"n\">Job</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"o\">=</span><span class=\"n\">get_number</span><span class=\"p\">,</span> <span class=\"n\">items</span><span class=\"o\">=</span><span class=\"n\">items</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"n\">additional_function_args</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\t<span class=\"n\">numbers_job</span><span class=\"o\">.</span><span class=\"n\">run_multi_processed</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]</span>\n</pre>\n<p><em>Notice there's no guaranteed order of the output. See <a href=\"#coupling-output-to-input\" rel=\"nofollow\">Coupling output to input</a> for tips on working with this behavior.</em></p>\n<h4>Important Configurable Features</h4>\n<p>If you need to set process pool size, set worker timeouts, handle Ctrl-C, or run your job single-processed (to debug, for instance), the following features come in handy.</p>\n<h6>Process Pool Size</h6>\n<pre><span class=\"n\">Job</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"n\">processes</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">)</span> <span class=\"c1\"># default is 4</span>\n</pre>\n<h6>Worker Timeouts</h6>\n<pre><span class=\"n\">minutes</span> <span class=\"o\">=</span> <span class=\"mi\">60</span>\n<span class=\"n\">Job</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"o\">*</span><span class=\"n\">minutes</span><span class=\"p\">)</span>\n</pre>\n<h6>Non-Daemonic Process Pool</h6>\n<p>The default <code>multiprocessing.pool.Pool</code> disallows spawning processes within processes.  This can be properly circumvented with the <code>no_daemon</code> attribute.</p>\n<pre><span class=\"n\">Job</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"n\">no_daemon</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<h6>Child-Exception Suppression</h6>\n<p>If you don't want a <code>Job</code>'s children (i.e. workers) to die if another raises an exception i.e. you want remaining items in your list to be processed, you can suppress those exceptions and log them instead.</p>\n<pre><span class=\"n\">Job</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"n\">suppress_worker_exceptions</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<h6>Predictable Ctrl-C Handling</h6>\n<p><code>Job</code> also handles <code>SIGINT</code> gracefully by intentionally killing its workers ASAP, and then killing itself afterwards:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"kn\">import</span> <span class=\"n\">sleep</span><span class=\"p\">,</span> <span class=\"n\">strftime</span><span class=\"p\">,</span> <span class=\"n\">gmtime</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">random</span> <span class=\"kn\">import</span> <span class=\"n\">random</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">print_item</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"n\">random</span><span class=\"p\">()</span><span class=\"o\">*</span><span class=\"mi\">50</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>     <span class=\"nb\">print</span> <span class=\"n\">strftime</span><span class=\"p\">(</span><span class=\"s2\">\"%H:%M:%S\"</span><span class=\"p\">,</span> <span class=\"n\">gmtime</span><span class=\"p\">()),</span> <span class=\"n\">item</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">printing_job</span> <span class=\"o\">=</span> <span class=\"n\">Job</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"o\">=</span><span class=\"n\">print_item</span><span class=\"p\">,</span> <span class=\"n\">items</span><span class=\"o\">=</span><span class=\"n\">items</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># GOAL: print the following: 1) item and item's timestamp 2) Ctrl-C's timestamp</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">try</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"n\">printing_job</span><span class=\"o\">.</span><span class=\"n\">run_multi_processed</span><span class=\"p\">()</span>\n<span class=\"o\">...</span> <span class=\"k\">finally</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"kn\">import</span> <span class=\"n\">gmtime</span><span class=\"p\">,</span> <span class=\"n\">strftime</span><span class=\"p\">,</span> <span class=\"n\">sleep</span>\n<span class=\"o\">...</span>     <span class=\"nb\">print</span> <span class=\"s1\">''</span><span class=\"p\">,</span> <span class=\"n\">strftime</span><span class=\"p\">(</span><span class=\"s2\">\"%H:%M:%S\"</span><span class=\"p\">,</span> <span class=\"n\">gmtime</span><span class=\"p\">()),</span> <span class=\"s1\">'user issued Ctrl-C'</span>\n<span class=\"o\">...</span>\n<span class=\"mi\">20</span><span class=\"p\">:</span><span class=\"mi\">39</span><span class=\"p\">:</span><span class=\"mi\">50</span> <span class=\"mi\">3</span>\n<span class=\"mi\">20</span><span class=\"p\">:</span><span class=\"mi\">39</span><span class=\"p\">:</span><span class=\"mi\">52</span> <span class=\"mi\">1</span>\n<span class=\"o\">^</span><span class=\"n\">C</span> <span class=\"mi\">20</span><span class=\"p\">:</span><span class=\"mi\">41</span><span class=\"p\">:</span><span class=\"mi\">53</span> <span class=\"n\">user</span> <span class=\"n\">issued</span> <span class=\"n\">Ctrl</span><span class=\"o\">-</span><span class=\"n\">C</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n<span class=\"o\">...</span> <span class=\"n\">Your</span> <span class=\"n\">typical</span> <span class=\"n\">stacktrace</span> <span class=\"n\">here</span> <span class=\"o\">...</span>\n<span class=\"ne\">KeyboardInterrupt</span>\n</pre>\n<h6>Run Job with Single Process (for dev-ing, debugging, etc.)</h6>\n<p>When you plan to parallelize a job, it's helpful to develop with single-processed job execution first (and debug likewise) and then switch to multi-processed job execution when you're ready.  The spychronous <code>Job</code> can facilitate this with the <code>run_single_processed</code> instance method.</p>\n<p><em>Utilizing run_single_processed: A Use Case...</em></p>\n<ul>\n<li>The following example illustrates the aforementioned proposal for development, debugging, and deployment with <code>run_single_processed</code>.</li>\n<li>Illustrated using 3 different iterations of the same program:</li>\n</ul>\n<pre><span class=\"c1\"># 1st iteration: Development</span>\n<span class=\"kn\">from</span> <span class=\"nn\">spychronous</span> <span class=\"kn\">import</span> <span class=\"n\">SynchronousJob</span> <span class=\"k\">as</span> <span class=\"n\">Job</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_plus_one</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">num</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">/</span><span class=\"mi\">0</span>\n\n<span class=\"n\">nums</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"n\">job</span> <span class=\"o\">=</span> <span class=\"n\">Job</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"o\">=</span><span class=\"n\">get_plus_one</span><span class=\"p\">,</span> <span class=\"n\">items</span><span class=\"o\">=</span><span class=\"n\">nums</span><span class=\"p\">)</span>\n<span class=\"n\">job</span><span class=\"o\">.</span><span class=\"n\">run_single_processed</span><span class=\"p\">()</span>\n<span class=\"c1\"># OUTPUT</span>\n<span class=\"c1\"># Traceback (most recent call last):</span>\n<span class=\"c1\">#   File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;</span>\n<span class=\"c1\">#   File \"spychronous.py\", line 33, in run_single_processed</span>\n<span class=\"c1\">#     raise e</span>\n<span class=\"c1\"># ZeroDivisionError: integer division or modulo by zero</span>\n</pre>\n<pre><span class=\"c1\"># 2nd iteration: Debugging</span>\n<span class=\"kn\">from</span> <span class=\"nn\">spychronous</span> <span class=\"kn\">import</span> <span class=\"n\">SynchronousJob</span> <span class=\"k\">as</span> <span class=\"n\">Job</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_plus_one</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">):</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">pdb</span><span class=\"p\">;</span><span class=\"n\">pdb</span><span class=\"o\">.</span><span class=\"n\">set_trace</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"n\">num</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">/</span><span class=\"mi\">0</span>\n\n<span class=\"n\">nums</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"n\">job</span> <span class=\"o\">=</span> <span class=\"n\">Job</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"o\">=</span><span class=\"n\">get_plus_one</span><span class=\"p\">,</span> <span class=\"n\">items</span><span class=\"o\">=</span><span class=\"n\">nums</span><span class=\"p\">)</span>\n<span class=\"n\">job</span><span class=\"o\">.</span><span class=\"n\">run_single_processed</span><span class=\"p\">()</span>\n<span class=\"c1\"># OUTPUT</span>\n<span class=\"c1\"># &lt;stdin&gt;(5)get_plus_one()</span>\n<span class=\"c1\"># (Pdb) print item</span>\n<span class=\"c1\"># 3</span>\n</pre>\n<pre><span class=\"c1\"># 3rd iteration: Multiprocessing the Job</span>\n<span class=\"kn\">from</span> <span class=\"nn\">spychronous</span> <span class=\"kn\">import</span> <span class=\"n\">SynchronousJob</span> <span class=\"k\">as</span> <span class=\"n\">Job</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_plus_one</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">num</span>\n\n<span class=\"n\">nums</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"n\">job</span> <span class=\"o\">=</span> <span class=\"n\">Job</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"o\">=</span><span class=\"n\">get_plus_one</span><span class=\"p\">,</span> <span class=\"n\">items</span><span class=\"o\">=</span><span class=\"n\">nums</span><span class=\"p\">)</span>\n<span class=\"n\">job</span><span class=\"o\">.</span><span class=\"n\">run_multi_processed</span><span class=\"p\">()</span> <span class=\"c1\"># notice method name changed from 'single' to 'multi'</span>\n<span class=\"c1\"># OUTPUT</span>\n<span class=\"c1\"># [1, 3, 2]</span>\n</pre>\n<h4>Working with instance methods</h4>\n<p>In order to call an instance method on a list of objects, simply wrap the instance method call in a trivial method:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">Cat</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>         <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"nf\">meow</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>         <span class=\"nb\">print</span> <span class=\"s1\">'meow, my name is'</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span>\n<span class=\"o\">...</span> \n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">make_cat_meow</span><span class=\"p\">(</span><span class=\"n\">cat</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"n\">cat</span><span class=\"o\">.</span><span class=\"n\">meow</span><span class=\"p\">()</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dave</span> <span class=\"o\">=</span> <span class=\"n\">Cat</span><span class=\"p\">(</span><span class=\"s1\">'Dave'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">meow_job</span> <span class=\"o\">=</span> <span class=\"n\">Job</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"o\">=</span><span class=\"n\">make_cat_meow</span><span class=\"p\">,</span> <span class=\"n\">items</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">dave</span><span class=\"p\">])</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">meow_job</span><span class=\"o\">.</span><span class=\"n\">run_multi_processed</span><span class=\"p\">()</span>\n<span class=\"n\">meow</span><span class=\"p\">,</span> <span class=\"n\">my</span> <span class=\"n\">name</span> <span class=\"ow\">is</span> <span class=\"n\">Dave</span>\n</pre>\n<h4>Coupling output to input</h4>\n<p>In order to preserve a relationship between input and output, simply wrap your function in one that couples the IO:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">get_num_times_2</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">return</span> <span class=\"n\">num</span> <span class=\"o\">*</span> <span class=\"mi\">2</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">double_num</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">):</span> <span class=\"c1\"># this is the coupling function.</span>\n<span class=\"o\">...</span> \t<span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">,</span> <span class=\"n\">get_num_times_2</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">))</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">doubling_job</span> <span class=\"o\">=</span> <span class=\"n\">Job</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"o\">=</span><span class=\"n\">double_num</span><span class=\"p\">,</span> <span class=\"n\">items</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">])</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">doubling_job</span><span class=\"o\">.</span><span class=\"n\">run_multi_processed</span><span class=\"p\">()</span>\n<span class=\"p\">[(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)]</span>\n</pre>\n<h2>TODO: AsynchronousJob, Thread Pools</h2>\n<p>The next step for spychronous is an asynchrounous job runner.  This is being developed in the develop branch.  After that, thread pools will be implemented as an alternative to process pools.</p>\n<h2>Why spychronous?</h2>\n<p>I made spychronous because I wanted a clean out-of-the-box solution to quickly replace loops that I wanted to parallel process.  I wanted to hide burdensome configuration and process management from the user. I wanted a solution that would gracefully handle <code>SIGINT</code>.</p>\n<p>Lastly, it was a fun programming exercise for me.</p>\n\n          </div>"}, "last_serial": 5368229, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "86822a17bb86d5e6ff3948bd53464387", "sha256": "48be874b2caa7b70eb964e494a77dbbc1daf535bfcea672c644ec2ec3d8f78ee"}, "downloads": -1, "filename": "spychronous-1.0.tar.gz", "has_sig": false, "md5_digest": "86822a17bb86d5e6ff3948bd53464387", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2764, "upload_time": "2019-06-03T02:27:44", "upload_time_iso_8601": "2019-06-03T02:27:44.901254Z", "url": "https://files.pythonhosted.org/packages/c5/70/ddfdfd8982b09a40af32b94b02e5e2b82ab6e4c2d158c2b11381839d4f23/spychronous-1.0.tar.gz", "yanked": false}], "1.0.post1": [{"comment_text": "", "digests": {"md5": "36a8ee654a7ff27fe47ddd7d59954287", "sha256": "f2d99415f972f62ef3f5e538898dfa5073f7aca86b0a208cf552d11c55bc557f"}, "downloads": -1, "filename": "spychronous-1.0.post1-py2-none-any.whl", "has_sig": false, "md5_digest": "36a8ee654a7ff27fe47ddd7d59954287", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 6744, "upload_time": "2019-06-04T13:29:30", "upload_time_iso_8601": "2019-06-04T13:29:30.871335Z", "url": "https://files.pythonhosted.org/packages/34/03/9b61a449d781433ee24b700a736a5a10fbb7156f08d06a0040160e22d210/spychronous-1.0.post1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8645c80014f9ffb773142ae715de61ea", "sha256": "8535ff8e91420233731284310c03d76024e2677d3c02641f87d8c97a08edbcd8"}, "downloads": -1, "filename": "spychronous-1.0.post1.tar.gz", "has_sig": false, "md5_digest": "8645c80014f9ffb773142ae715de61ea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2769, "upload_time": "2019-06-03T02:50:13", "upload_time_iso_8601": "2019-06-03T02:50:13.500884Z", "url": "https://files.pythonhosted.org/packages/83/36/663cf503bc45f3b1c4c45cfb5278436d32b40a567c7c1f46fcc1610db75e/spychronous-1.0.post1.tar.gz", "yanked": false}], "1.0.post2": [{"comment_text": "", "digests": {"md5": "0167729605fe45c004ac8ca6cc530ad7", "sha256": "43a5401360f3a73f7f0e259bc3bd1b3e33d339a70577a1bf64aeb88fab1fec91"}, "downloads": -1, "filename": "spychronous-1.0.post2-py2-none-any.whl", "has_sig": false, "md5_digest": "0167729605fe45c004ac8ca6cc530ad7", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 6749, "upload_time": "2019-06-04T13:29:32", "upload_time_iso_8601": "2019-06-04T13:29:32.530972Z", "url": "https://files.pythonhosted.org/packages/f3/8b/50302db67deec0246468074682d9f469160ff94b63cb3b77fc3d890e4bad/spychronous-1.0.post2-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0806cc6e3dadb3e460478e8818f329e5", "sha256": "58303d6b7be9166ab0cef96cf9144bbf2446dd597827a6edec4c959794cb16fe"}, "downloads": -1, "filename": "spychronous-1.0.post2.tar.gz", "has_sig": false, "md5_digest": "0806cc6e3dadb3e460478e8818f329e5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10163, "upload_time": "2019-06-04T13:36:48", "upload_time_iso_8601": "2019-06-04T13:36:48.807681Z", "url": "https://files.pythonhosted.org/packages/e6/14/bd04aedeefcca55334ef9f8a1415de701cabf45f052174f83e2dd9584ac2/spychronous-1.0.post2.tar.gz", "yanked": false}], "1.0.post3": [{"comment_text": "", "digests": {"md5": "3f9515c3b0f53243fa72f3dd58d32119", "sha256": "b3a7b43714950a44cec535e618a7892a51182dc4cd0b542d1320c319130fbb22"}, "downloads": -1, "filename": "spychronous-1.0.post3-py2-none-any.whl", "has_sig": false, "md5_digest": "3f9515c3b0f53243fa72f3dd58d32119", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 6757, "upload_time": "2019-06-04T15:02:41", "upload_time_iso_8601": "2019-06-04T15:02:41.086962Z", "url": "https://files.pythonhosted.org/packages/18/14/69ef174d5e28ed692aa5009eaba8b336bc2d48e0f2ec2a7e1d335c65535b/spychronous-1.0.post3-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "09d17ce8e1f82441db42ed11eda901d4", "sha256": "3228d9fded1ab51df79899ec2912576a3a7f3cd1d69fb2b279f243c115adac68"}, "downloads": -1, "filename": "spychronous-1.0.post3.tar.gz", "has_sig": false, "md5_digest": "09d17ce8e1f82441db42ed11eda901d4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10161, "upload_time": "2019-06-04T15:02:42", "upload_time_iso_8601": "2019-06-04T15:02:42.701177Z", "url": "https://files.pythonhosted.org/packages/e8/70/b14769dccb44afcca6cef111f58b411469c95e08e41e9431dd8a0b1d0816/spychronous-1.0.post3.tar.gz", "yanked": false}], "1.0.post4": [{"comment_text": "", "digests": {"md5": "a855a2c77b9988645a09570d47e243aa", "sha256": "fa53ca100e0b425e3c1175df891a6e109ab0c4380207bc9598b9c03e2b9f6153"}, "downloads": -1, "filename": "spychronous-1.0.post4-py2-none-any.whl", "has_sig": false, "md5_digest": "a855a2c77b9988645a09570d47e243aa", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 7649, "upload_time": "2019-06-06T17:13:25", "upload_time_iso_8601": "2019-06-06T17:13:25.372610Z", "url": "https://files.pythonhosted.org/packages/0e/2f/bfc0a2218d138fe1acd4e49f1ee9d2a31c5f986421237fc3a337c88594d0/spychronous-1.0.post4-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cd4488af663c2e1612c25caa76bb0a10", "sha256": "196cab6fba098d83bed36eb6f226427909837db7a69f50ad66611dfb60862905"}, "downloads": -1, "filename": "spychronous-1.0.post4.tar.gz", "has_sig": false, "md5_digest": "cd4488af663c2e1612c25caa76bb0a10", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10272, "upload_time": "2019-06-06T17:13:28", "upload_time_iso_8601": "2019-06-06T17:13:28.849769Z", "url": "https://files.pythonhosted.org/packages/f6/cf/eb1ea055cf872967e22eaa5a38381f59112f3bdffc2b24ea89f2c6bbe330/spychronous-1.0.post4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a855a2c77b9988645a09570d47e243aa", "sha256": "fa53ca100e0b425e3c1175df891a6e109ab0c4380207bc9598b9c03e2b9f6153"}, "downloads": -1, "filename": "spychronous-1.0.post4-py2-none-any.whl", "has_sig": false, "md5_digest": "a855a2c77b9988645a09570d47e243aa", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 7649, "upload_time": "2019-06-06T17:13:25", "upload_time_iso_8601": "2019-06-06T17:13:25.372610Z", "url": "https://files.pythonhosted.org/packages/0e/2f/bfc0a2218d138fe1acd4e49f1ee9d2a31c5f986421237fc3a337c88594d0/spychronous-1.0.post4-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cd4488af663c2e1612c25caa76bb0a10", "sha256": "196cab6fba098d83bed36eb6f226427909837db7a69f50ad66611dfb60862905"}, "downloads": -1, "filename": "spychronous-1.0.post4.tar.gz", "has_sig": false, "md5_digest": "cd4488af663c2e1612c25caa76bb0a10", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10272, "upload_time": "2019-06-06T17:13:28", "upload_time_iso_8601": "2019-06-06T17:13:28.849769Z", "url": "https://files.pythonhosted.org/packages/f6/cf/eb1ea055cf872967e22eaa5a38381f59112f3bdffc2b24ea89f2c6bbe330/spychronous-1.0.post4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:04:10 2020"}