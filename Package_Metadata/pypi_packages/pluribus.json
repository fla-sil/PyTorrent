{"info": {"author": "James Socol", "author_email": "me@jamessocol.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Utilities"], "description": "========\npluribus\n========\n\nHaving just finished reading the original Google `MapReduce paper`_, I\nobviously felt the need to try to implement such a system in Python.\n\nMy goals are to implement enough of the functionality described in the\npaper to be usable, though I strongly warn against ever using this code\nfor anything real.\n\nSince one of the goals (see Goals, below) is simplicity from an end-user\nstandpoint, I am following some of Kenneth Reitz's advice_ and starting\nwith a readme and documentation.\n\n\nExamples\n========\n\nThe canonical word-count example::\n\n    # myjob.py\n    from pluribus import job\n\n\n    @job.map_\n    def emit_words(key, value):\n        # key: document name\n        # value: document contents\n        for word in value.split():\n            yield word, 1\n\n\n    @job.reduce_\n    def sum_occurences(key, values):\n        # key: a word\n        # values: a list of counts\n        return sum(values)\n\n\nAssuming you're running everything on one host, you can ignore the\nnetwork connection information.\n\nStart a pluribus **master**::\n\n    $ pluribus master\n\nStart a pluribus **worker** (or several hundred)::\n\n    $ pluribus worker\n\nOn the master or on another machine that can talk to the master::\n\n    $ pluribus job myjob\n    # ... wait\n    <results>\n\n\nGoals\n=====\n\nExplicit goals are:\n\n* Simple to use, both as an administrator and end-user.\n* Well-documented.\n* Robust to worker failure.\n* Fast-enough.\n* Use only the Python (2.7+) standard library (at least to run).\n\nExplicit non-goals are:\n\n* Be a filesystem.\n* Robust to master failure.\n\n\n.. _MapReduce paper: http://research.google.com/archive/mapreduce.html\n.. _advice: http://docs.writethedocs.org/en/2013/conference/talks.html#kenneth-reitz", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jsocol/pluribus", "keywords": null, "license": "Apache v2.0", "maintainer": null, "maintainer_email": null, "name": "pluribus", "package_url": "https://pypi.org/project/pluribus/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pluribus/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/jsocol/pluribus"}, "release_url": "https://pypi.org/project/pluribus/0.0.1/", "requires_dist": null, "requires_python": null, "summary": "A pure-python highly-distributed MapReduce cluster.", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Having just finished reading the original Google <a href=\"http://research.google.com/archive/mapreduce.html\" rel=\"nofollow\">MapReduce paper</a>, I\nobviously felt the need to try to implement such a system in Python.</p>\n<p>My goals are to implement enough of the functionality described in the\npaper to be usable, though I strongly warn against ever using this code\nfor anything real.</p>\n<p>Since one of the goals (see Goals, below) is simplicity from an end-user\nstandpoint, I am following some of Kenneth Reitz\u2019s <a href=\"http://docs.writethedocs.org/en/2013/conference/talks.html#kenneth-reitz\" rel=\"nofollow\">advice</a> and starting\nwith a readme and documentation.</p>\n<div id=\"examples\">\n<h2>Examples</h2>\n<p>The canonical word-count example:</p>\n<pre># myjob.py\nfrom pluribus import job\n\n\n@job.map_\ndef emit_words(key, value):\n    # key: document name\n    # value: document contents\n    for word in value.split():\n        yield word, 1\n\n\n@job.reduce_\ndef sum_occurences(key, values):\n    # key: a word\n    # values: a list of counts\n    return sum(values)\n</pre>\n<p>Assuming you\u2019re running everything on one host, you can ignore the\nnetwork connection information.</p>\n<p>Start a pluribus <strong>master</strong>:</p>\n<pre>$ pluribus master\n</pre>\n<p>Start a pluribus <strong>worker</strong> (or several hundred):</p>\n<pre>$ pluribus worker\n</pre>\n<p>On the master or on another machine that can talk to the master:</p>\n<pre>$ pluribus job myjob\n# ... wait\n&lt;results&gt;\n</pre>\n</div>\n<div id=\"goals\">\n<h2>Goals</h2>\n<p>Explicit goals are:</p>\n<ul>\n<li>Simple to use, both as an administrator and end-user.</li>\n<li>Well-documented.</li>\n<li>Robust to worker failure.</li>\n<li>Fast-enough.</li>\n<li>Use only the Python (2.7+) standard library (at least to run).</li>\n</ul>\n<p>Explicit non-goals are:</p>\n<ul>\n<li>Be a filesystem.</li>\n<li>Robust to master failure.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 675854, "releases": {"0.0.1": []}, "urls": [], "timestamp": "Fri May  8 02:52:24 2020"}