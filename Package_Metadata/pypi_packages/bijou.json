{"info": {"author": "hitlic", "author_email": "liuchen.lic@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# bijou\n\nA lightweight freamwork based on [fastai course](https://course.fast.ai) for training pytorch models conveniently. In particular, it is compatible with datasets and models of [pytorch_geometric](https://github.com/rusty1s/pytorch_geometric) and [DGL](https://docs.dgl.ai/en/latest/) for [Graph Neural Networks](https://arxiv.org/pdf/1812.08434.pdf).\n\n## Features\n- Compatible with PyG and DGL for GNN\n  - Graph level learning: It is compatible with [pytorch_geometric](https://github.com/rusty1s/pytorch_geometric) and [DGL](https://docs.dgl.ai/en/latest/) for Graph Neural Networks of graph classification and other graph level learning.\n  - Node level learning: It can be used in node classification or other node level learning with dataset of single [pytorch_geometric Data](https://pytorch-geometric.readthedocs.io/en/latest/modules/data.html) or [DGLGraph](https://docs.dgl.ai/en/latest/api/python/graph.html).\n- Easy to Use\n    - It likes [FastAI](https://docs.fast.ai) but far more lightweight. \n\n## Install\n\n- `pip install bijou`\n\n### Dependencies\n\n  - Pytorch\n  - Matplotlib\n  - Numpy\n  - tqdm\n  - Networkx\n  - torch-geometric   (Optional)\n  - dgl               (Optional)\n\n## Using\n\nSee following examples, and more examples are [here](https://github.com/hitlic/bijou/tree/master/examples).\n\n## Examples\n\n### a. MNIST classification\n\n```python\nimport torch.nn as nn, torch.nn.functional as F, torch.optim as optim\nfrom bijou.learner import Learner\nfrom bijou.data import Dataset, DataLoader, DataBunch\nfrom bijou.metrics import accuracy\nfrom bijou.datasets import mnist\nimport matplotlib.pyplot as plt\n\n# 1. dataset\nx_train, y_train, x_valid, y_valid, x_test, y_test = mnist()\ntrain_ds, valid_ds, test_ds = Dataset(x_train, y_train), Dataset(x_valid, y_valid), Dataset(x_test, y_test)\ntrain_dl = DataLoader(train_ds, batch_size=128, shuffle=True)\nvalid_dl = DataLoader(valid_ds, batch_size=128)\ntest_dl = DataLoader(test_ds, batch_size=128)\n# train_dl, valid_dl, test_dl = DataLoader.loaders(train_ds, valid_ds, test_ds, 128)\ntrain_db = DataBunch(train_dl, valid_dl)\n\n# 2. model and optimizer\nin_dim = train_db.train_ds.x.shape[1]\nout_dim = y_train.max().item()+1\nmodel = nn.Sequential(nn.Linear(in_dim, 64), nn.ReLU(), nn.Linear(64, out_dim))\nopt = optim.SGD(model.parameters(), lr=0.35)\n\n# 3. learner\nloss_func = F.cross_entropy\nlearner = Learner(model, opt, loss_func, train_db, metrics=[accuracy])\n\n# 4. fit\nlearner.fit(10)\n\n# 5. test\nlearner.test(valid_dl)\n\n# 6. predict\npred = learner.predict(x_valid)\nprint(pred.size())\n\n# 7.  plot\nlearner.recorder.plot_metrics()\nplt.show()\n```\n\n### b. Graph Classification with PyG\n\nNOTE: Performance of this GNN model's is not good, as the dataset is highly unbalanced.\n\n```python\nimport torch, torch.nn as nn, torch.nn.functional as F, torch.optim as optim\nfrom torch_geometric.nn import global_max_pool, TopKPooling, GCNConv\nfrom bijou.learner import Learner\nfrom bijou.datasets import pyg_yoochoose_10k\nfrom bijou.data import DataBunch, PyGDataLoader\nfrom bijou.metrics import accuracy\nfrom examples.pyg_dataset import YooChooseBinaryDataset\nimport matplotlib.pyplot as plt\n\n# 1. dataset\ndataset = YooChooseBinaryDataset(root=pyg_yoochoose_10k()).shuffle()\ntrain_ds, val_ds, test_ds = dataset[:8000], dataset[8000:9000], dataset[9000:]\ntrain_dl = PyGDataLoader(train_ds, batch_size=64, shuffle=True)\nval_dl = PyGDataLoader(val_ds, batch_size=64)\ntest_dl = PyGDataLoader(test_ds, batch_size=64)\n# train_dl, val_dl, test_dl = PyGDataLoader.loaders(train_ds, val_ds, test_ds, 64)\ntrain_db = DataBunch(train_dl, val_dl)\n\n# 2. mode and optimizer\nclass Model(nn.Module):\n    def __init__(self, feature_dim, class_num, embed_dim=64, gcn_dims=(32, 32), dense_dim=64):\n        super().__init__()\n        self.embedding = torch.nn.Embedding(num_embeddings=feature_dim, embedding_dim=embed_dim)\n        self.gcns = nn.ModuleList()\n        in_dim = embed_dim\n        for dim in gcn_dims:\n            self.gcns.append(GCNConv(in_dim, dim))\n            in_dim = dim\n        self.graph_pooling = TopKPooling(gcn_dims[-1], ratio=0.8)\n        self.dense = nn.Linear(gcn_dims[-1], dense_dim)\n        self.out = nn.Linear(dense_dim, class_num)\n\n    def forward(self, data):\n        x, edge_index, batch = data.x, data.edge_index, data.batch\n        x = self.embedding(x)\n        x = x.squeeze(1)\n        for gcn in self.gcns:\n            x = gcn(x, edge_index)\n            x = F.relu(x)\n        x, _, _, batch, _, _ = self.graph_pooling(x, edge_index, None, batch)\n        x = global_max_pool(x, batch)\n        outputs = self.dense(x)\n        outputs = F.relu(outputs)\n        outputs = self.out(outputs)\n        return outputs\n\nmodel = Model(dataset.item_num, 2)\nopt = optim.SGD(model.parameters(), lr=0.5)\n\n# 3. learner\nlearner = Learner(model, opt, F.cross_entropy, train_db, metrics=[accuracy])\n\n# 4. fit\nlearner.fit(3)\n\n# 5. test\nlearner.test(test_dl)\n\n# 6. predict\npred = learner.predict(test_dl)\nprint(pred.size())\n\n# 7. plot\nlearner.recorder.plot_metrics()\nplt.show()\n```\n\n### c. Node Classification with PyG\n\n```python\nfrom torch_geometric.datasets import Planetoid\nimport torch.nn as nn, torch.nn.functional as F, torch.optim as optim\nfrom torch_geometric.nn import GCNConv\nfrom bijou.data import PyGGraphLoader, DataBunch\nfrom bijou.learner import Learner\nfrom bijou.metrics import masked_cross_entropy, masked_accuracy\nfrom bijou.datasets import pyg_cora\nimport matplotlib.pyplot as plt\n\n# 1. dataset\ndataset = Planetoid(root=pyg_cora(), name='Cora')\ntrain_dl = PyGGraphLoader(dataset, 'train')\nval_dl = PyGGraphLoader(dataset, 'val')\ntest_dl = PyGGraphLoader(dataset, 'test')\n# train_dl, val_dl, test_dl = PyGGraphLoader.loaders(dataset)\ndata = DataBunch(train_dl, val_dl)\n\n# 2. model and optimizer\nclass Model(nn.Module):\n    def __init__(self, feature_num, class_num):\n        super().__init__()\n        self.conv1 = GCNConv(feature_num, 16)\n        self.conv2 = GCNConv(16, class_num)\n\n    def forward(self, data):\n        x, edge_index = data.x, data.edge_index\n        x = self.conv1(x, edge_index)\n        x = F.relu(x)\n        x = self.conv2(x, edge_index)\n        outputs = F.relu(x)\n        return outputs\n\nmodel = Model(dataset.num_node_features, dataset.num_classes)\nopt = optim.SGD(model.parameters(), lr=0.5, weight_decay=0.01)\n\n# 3. learner\nlearner = Learner(model, opt, masked_cross_entropy, data, metrics=[masked_accuracy])\n\n# 4. fit\nlearner.fit(100)\n\n# 5. test\nlearner.test(test_dl)\n\n# 6. predict\npred = learner.predict(dataset[0])\nprint(pred.size())\n\n# 7. plot\nlearner.recorder.plot_metrics()\nplt.show()\n```\n\n### d. Graph Classification with DGL\n```python\nimport torch, torch.nn as nn, torch.nn.functional as F, torch.optim as optim\nimport dgl\nimport dgl.function as fn\nfrom dgl.data import MiniGCDataset\nfrom bijou.data import DGLDataLoader, DataBunch\nfrom bijou.metrics import accuracy\nfrom bijou.learner import Learner\nimport matplotlib.pyplot as plt\n\n# 1. dataset\ntrain_ds = MiniGCDataset(320, 10, 20)\nval_ds = MiniGCDataset(100, 10, 20)\ntest_ds = MiniGCDataset(80, 10, 20)\n\ntrain_dl = DGLDataLoader(train_ds, batch_size=32, shuffle=True)\nval_dl = DGLDataLoader(val_ds, batch_size=32, shuffle=False)\ntest_dl = DGLDataLoader(test_ds, batch_size=32, shuffle=False)\n\ndata = DataBunch(train_dl, val_dl)\n\n# 2. mode and optimizer\nmsg = fn.copy_src(src='h', out='m')  # Sends a message of node feature h.\n\ndef reduce(nodes):\n    \"\"\"Take an average over all neighbor node features hu and use it to\n    overwrite the original node feature.\"\"\"\n    accum = torch.mean(nodes.mailbox['m'], 1)\n    return {'h': accum}\n\nclass NodeApplyModule(nn.Module):\n    \"\"\"Update the node feature hv with ReLU(Whv+b).\"\"\"\n    def __init__(self, in_feats, out_feats, activation):\n        super().__init__()\n        self.linear = nn.Linear(in_feats, out_feats)\n        self.activation = activation\n\n    def forward(self, node):\n        h = self.linear(node.data['h'])\n        h = self.activation(h)\n        return {'h' : h}\n\nclass GCN(nn.Module):\n    def __init__(self, in_feats, out_feats, activation):\n        super().__init__()\n        self.apply_mod = NodeApplyModule(in_feats, out_feats, activation)\n\n    def forward(self, g, feature):\n        # Initialize the node features with h.\n        g.ndata['h'] = feature\n        g.update_all(msg, reduce)\n        g.apply_nodes(func=self.apply_mod)\n        return g.ndata.pop('h')\n\nclass Classifier(nn.Module):\n    def __init__(self, in_dim, hidden_dim, n_classes):\n        super(Classifier, self).__init__()\n\n        self.layers = nn.ModuleList([\n            GCN(in_dim, hidden_dim, F.relu),\n            GCN(hidden_dim, hidden_dim, F.relu)])\n        self.classify = nn.Linear(hidden_dim, n_classes)\n\n    def forward(self, g):\n        # For undirected graphs, in_degree is the same as\n        # out_degree.\n        h = g.in_degrees().view(-1, 1).float()\n        for conv in self.layers:\n            h = conv(g, h)\n        g.ndata['h'] = h\n        hg = dgl.mean_nodes(g, 'h')\n        return self.classify(hg)\n\nmodel = Classifier(1, 256, train_ds.num_classes) \noptimizer = optim.Adam(model.parameters(), lr=0.001)\n\n\n# 3. learne\nloss_func = nn.CrossEntropyLoss()\nlearner = Learner(model, optimizer, loss_func, data, metrics=accuracy)\n\n# 4. fit\nlearner.fit(80)\n\n# 5. test\nlearner.test(test_dl)\n\n# 6. predict\nlearner.predict(test_dl)\n\n# 7. plot\nlearner.recorder.plot_metrics()\nplt.show()\n```\n\n### e. Node Classification with DGL\n```python\nimport torch.nn.functional as F, torch.nn as nn, torch as th\nimport dgl.function as fn\nfrom dgl import DGLGraph\nfrom dgl.data import citation_graph as citegrh\nfrom bijou.learner import Learner\nfrom bijou.data import GraphLoader, DataBunch\nfrom bijou.metrics import masked_accuracy, masked_cross_entropy\nimport matplotlib.pyplot as plt\nimport networkx as nx\n\n\n# 1. dataset\ndef load_cora_data():\n    data = citegrh.load_cora()\n    features = th.FloatTensor(data.features)\n    labels = th.LongTensor(data.labels)\n    train_mask = th.BoolTensor(data.train_mask)\n    val_mask = th.BoolTensor(data.val_mask)\n    test_mask = th.BoolTensor(data.test_mask)\n    g = data.graph\n    # add self loop\n    g.remove_edges_from(nx.selfloop_edges(g))\n    g = DGLGraph(g)\n    g.add_edges(g.nodes(), g.nodes())\n    return g, features, labels, train_mask, val_mask, test_mask\n\ng, features, labels, train_mask, val_mask, test_mask = load_cora_data()\ntrain_dl = GraphLoader(g, features=features, labels=labels, mask=train_mask)\nval_dl = GraphLoader(g, features=features, labels=labels, mask=val_mask)\ntest_dl = GraphLoader(g, features=features, labels=labels, mask=test_mask)\ndata = DataBunch(train_dl, val_dl)\n\n\n# 2. model and optimizer\ngcn_msg = fn.copy_src(src='h', out='m')\ngcn_reduce = fn.sum(msg='m', out='h')\n\nclass NodeApplyModule(nn.Module):\n    def __init__(self, in_feats, out_feats, activation):\n        super(NodeApplyModule, self).__init__()\n        self.linear = nn.Linear(in_feats, out_feats)\n        self.activation = activation\n\n    def forward(self, node):\n        h = self.linear(node.data['h'])\n        if self.activation is not None:\n            h = self.activation(h)\n        return {'h': h}\n\nclass GCN(nn.Module):\n    def __init__(self, in_feats, out_feats, activation):\n        super(GCN, self).__init__()\n        self.apply_mod = NodeApplyModule(in_feats, out_feats, activation)\n\n    def forward(self, g, feature):\n        g.ndata['h'] = feature\n        g.update_all(gcn_msg, gcn_reduce)\n        g.apply_nodes(func=self.apply_mod)\n        return g.ndata.pop('h')\n\nclass Net(nn.Module):\n    def __init__(self):\n        super(Net, self).__init__()\n        self.gcn1 = GCN(1433, 16, F.relu)\n        self.gcn2 = GCN(16, 7, None)\n\n    def forward(self, g, features):\n        x = self.gcn1(g, features)\n        x = self.gcn2(g, x)\n        return x\n\nnet = Net()\noptimizer = th.optim.Adam(net.parameters(), lr=1e-3)\n\n\n# 3. learner\nlearner = Learner(net, optimizer, masked_cross_entropy, data, metrics=masked_accuracy)\n\n# 4. fit\nlearner.fit(50)\n\n# 5. test\nlearner.test(test_dl)\n\n# 6. predict\nlearner.predict(test_dl)\n\n# 7. plot\nlearner.recorder.plot_metrics()\nplt.show()\n```\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/hitlic/bijou", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "bijou", "package_url": "https://pypi.org/project/bijou/", "platform": "", "project_url": "https://pypi.org/project/bijou/", "project_urls": {"Homepage": "https://github.com/hitlic/bijou"}, "release_url": "https://pypi.org/project/bijou/0.1.2/", "requires_dist": ["torch (>1.1)", "tqdm (>4.40)", "matplotlib (>3.1)", "networkx (>=2.3)", "requests (>2.20.0)"], "requires_python": ">=3.5", "summary": "A fastai-like framework for training, tuning and probing pytorch models, which is compatible with pytorch_geometric.", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>bijou</h1>\n<p>A lightweight freamwork based on <a href=\"https://course.fast.ai\" rel=\"nofollow\">fastai course</a> for training pytorch models conveniently. In particular, it is compatible with datasets and models of <a href=\"https://github.com/rusty1s/pytorch_geometric\" rel=\"nofollow\">pytorch_geometric</a> and <a href=\"https://docs.dgl.ai/en/latest/\" rel=\"nofollow\">DGL</a> for <a href=\"https://arxiv.org/pdf/1812.08434.pdf\" rel=\"nofollow\">Graph Neural Networks</a>.</p>\n<h2>Features</h2>\n<ul>\n<li>Compatible with PyG and DGL for GNN\n<ul>\n<li>Graph level learning: It is compatible with <a href=\"https://github.com/rusty1s/pytorch_geometric\" rel=\"nofollow\">pytorch_geometric</a> and <a href=\"https://docs.dgl.ai/en/latest/\" rel=\"nofollow\">DGL</a> for Graph Neural Networks of graph classification and other graph level learning.</li>\n<li>Node level learning: It can be used in node classification or other node level learning with dataset of single <a href=\"https://pytorch-geometric.readthedocs.io/en/latest/modules/data.html\" rel=\"nofollow\">pytorch_geometric Data</a> or <a href=\"https://docs.dgl.ai/en/latest/api/python/graph.html\" rel=\"nofollow\">DGLGraph</a>.</li>\n</ul>\n</li>\n<li>Easy to Use\n<ul>\n<li>It likes <a href=\"https://docs.fast.ai\" rel=\"nofollow\">FastAI</a> but far more lightweight.</li>\n</ul>\n</li>\n</ul>\n<h2>Install</h2>\n<ul>\n<li><code>pip install bijou</code></li>\n</ul>\n<h3>Dependencies</h3>\n<ul>\n<li>Pytorch</li>\n<li>Matplotlib</li>\n<li>Numpy</li>\n<li>tqdm</li>\n<li>Networkx</li>\n<li>torch-geometric   (Optional)</li>\n<li>dgl               (Optional)</li>\n</ul>\n<h2>Using</h2>\n<p>See following examples, and more examples are <a href=\"https://github.com/hitlic/bijou/tree/master/examples\" rel=\"nofollow\">here</a>.</p>\n<h2>Examples</h2>\n<h3>a. MNIST classification</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">torch.nn</span> <span class=\"k\">as</span> <span class=\"nn\">nn</span><span class=\"o\">,</span> <span class=\"nn\">torch.nn.functional</span> <span class=\"k\">as</span> <span class=\"nn\">F</span><span class=\"o\">,</span> <span class=\"nn\">torch.optim</span> <span class=\"k\">as</span> <span class=\"nn\">optim</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bijou.learner</span> <span class=\"kn\">import</span> <span class=\"n\">Learner</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bijou.data</span> <span class=\"kn\">import</span> <span class=\"n\">Dataset</span><span class=\"p\">,</span> <span class=\"n\">DataLoader</span><span class=\"p\">,</span> <span class=\"n\">DataBunch</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bijou.metrics</span> <span class=\"kn\">import</span> <span class=\"n\">accuracy</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bijou.datasets</span> <span class=\"kn\">import</span> <span class=\"n\">mnist</span>\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n\n<span class=\"c1\"># 1. dataset</span>\n<span class=\"n\">x_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">x_valid</span><span class=\"p\">,</span> <span class=\"n\">y_valid</span><span class=\"p\">,</span> <span class=\"n\">x_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">mnist</span><span class=\"p\">()</span>\n<span class=\"n\">train_ds</span><span class=\"p\">,</span> <span class=\"n\">valid_ds</span><span class=\"p\">,</span> <span class=\"n\">test_ds</span> <span class=\"o\">=</span> <span class=\"n\">Dataset</span><span class=\"p\">(</span><span class=\"n\">x_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">),</span> <span class=\"n\">Dataset</span><span class=\"p\">(</span><span class=\"n\">x_valid</span><span class=\"p\">,</span> <span class=\"n\">y_valid</span><span class=\"p\">),</span> <span class=\"n\">Dataset</span><span class=\"p\">(</span><span class=\"n\">x_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">)</span>\n<span class=\"n\">train_dl</span> <span class=\"o\">=</span> <span class=\"n\">DataLoader</span><span class=\"p\">(</span><span class=\"n\">train_ds</span><span class=\"p\">,</span> <span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"n\">shuffle</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">valid_dl</span> <span class=\"o\">=</span> <span class=\"n\">DataLoader</span><span class=\"p\">(</span><span class=\"n\">valid_ds</span><span class=\"p\">,</span> <span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"mi\">128</span><span class=\"p\">)</span>\n<span class=\"n\">test_dl</span> <span class=\"o\">=</span> <span class=\"n\">DataLoader</span><span class=\"p\">(</span><span class=\"n\">test_ds</span><span class=\"p\">,</span> <span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"mi\">128</span><span class=\"p\">)</span>\n<span class=\"c1\"># train_dl, valid_dl, test_dl = DataLoader.loaders(train_ds, valid_ds, test_ds, 128)</span>\n<span class=\"n\">train_db</span> <span class=\"o\">=</span> <span class=\"n\">DataBunch</span><span class=\"p\">(</span><span class=\"n\">train_dl</span><span class=\"p\">,</span> <span class=\"n\">valid_dl</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 2. model and optimizer</span>\n<span class=\"n\">in_dim</span> <span class=\"o\">=</span> <span class=\"n\">train_db</span><span class=\"o\">.</span><span class=\"n\">train_ds</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">out_dim</span> <span class=\"o\">=</span> <span class=\"n\">y_train</span><span class=\"o\">.</span><span class=\"n\">max</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">item</span><span class=\"p\">()</span><span class=\"o\">+</span><span class=\"mi\">1</span>\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">Sequential</span><span class=\"p\">(</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">Linear</span><span class=\"p\">(</span><span class=\"n\">in_dim</span><span class=\"p\">,</span> <span class=\"mi\">64</span><span class=\"p\">),</span> <span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">ReLU</span><span class=\"p\">(),</span> <span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">Linear</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"n\">out_dim</span><span class=\"p\">))</span>\n<span class=\"n\">opt</span> <span class=\"o\">=</span> <span class=\"n\">optim</span><span class=\"o\">.</span><span class=\"n\">SGD</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">parameters</span><span class=\"p\">(),</span> <span class=\"n\">lr</span><span class=\"o\">=</span><span class=\"mf\">0.35</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 3. learner</span>\n<span class=\"n\">loss_func</span> <span class=\"o\">=</span> <span class=\"n\">F</span><span class=\"o\">.</span><span class=\"n\">cross_entropy</span>\n<span class=\"n\">learner</span> <span class=\"o\">=</span> <span class=\"n\">Learner</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">opt</span><span class=\"p\">,</span> <span class=\"n\">loss_func</span><span class=\"p\">,</span> <span class=\"n\">train_db</span><span class=\"p\">,</span> <span class=\"n\">metrics</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">accuracy</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># 4. fit</span>\n<span class=\"n\">learner</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 5. test</span>\n<span class=\"n\">learner</span><span class=\"o\">.</span><span class=\"n\">test</span><span class=\"p\">(</span><span class=\"n\">valid_dl</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 6. predict</span>\n<span class=\"n\">pred</span> <span class=\"o\">=</span> <span class=\"n\">learner</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">x_valid</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">pred</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">())</span>\n\n<span class=\"c1\"># 7.  plot</span>\n<span class=\"n\">learner</span><span class=\"o\">.</span><span class=\"n\">recorder</span><span class=\"o\">.</span><span class=\"n\">plot_metrics</span><span class=\"p\">()</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n<h3>b. Graph Classification with PyG</h3>\n<p>NOTE: Performance of this GNN model's is not good, as the dataset is highly unbalanced.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">torch</span><span class=\"o\">,</span> <span class=\"nn\">torch.nn</span> <span class=\"k\">as</span> <span class=\"nn\">nn</span><span class=\"o\">,</span> <span class=\"nn\">torch.nn.functional</span> <span class=\"k\">as</span> <span class=\"nn\">F</span><span class=\"o\">,</span> <span class=\"nn\">torch.optim</span> <span class=\"k\">as</span> <span class=\"nn\">optim</span>\n<span class=\"kn\">from</span> <span class=\"nn\">torch_geometric.nn</span> <span class=\"kn\">import</span> <span class=\"n\">global_max_pool</span><span class=\"p\">,</span> <span class=\"n\">TopKPooling</span><span class=\"p\">,</span> <span class=\"n\">GCNConv</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bijou.learner</span> <span class=\"kn\">import</span> <span class=\"n\">Learner</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bijou.datasets</span> <span class=\"kn\">import</span> <span class=\"n\">pyg_yoochoose_10k</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bijou.data</span> <span class=\"kn\">import</span> <span class=\"n\">DataBunch</span><span class=\"p\">,</span> <span class=\"n\">PyGDataLoader</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bijou.metrics</span> <span class=\"kn\">import</span> <span class=\"n\">accuracy</span>\n<span class=\"kn\">from</span> <span class=\"nn\">examples.pyg_dataset</span> <span class=\"kn\">import</span> <span class=\"n\">YooChooseBinaryDataset</span>\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n\n<span class=\"c1\"># 1. dataset</span>\n<span class=\"n\">dataset</span> <span class=\"o\">=</span> <span class=\"n\">YooChooseBinaryDataset</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"o\">=</span><span class=\"n\">pyg_yoochoose_10k</span><span class=\"p\">())</span><span class=\"o\">.</span><span class=\"n\">shuffle</span><span class=\"p\">()</span>\n<span class=\"n\">train_ds</span><span class=\"p\">,</span> <span class=\"n\">val_ds</span><span class=\"p\">,</span> <span class=\"n\">test_ds</span> <span class=\"o\">=</span> <span class=\"n\">dataset</span><span class=\"p\">[:</span><span class=\"mi\">8000</span><span class=\"p\">],</span> <span class=\"n\">dataset</span><span class=\"p\">[</span><span class=\"mi\">8000</span><span class=\"p\">:</span><span class=\"mi\">9000</span><span class=\"p\">],</span> <span class=\"n\">dataset</span><span class=\"p\">[</span><span class=\"mi\">9000</span><span class=\"p\">:]</span>\n<span class=\"n\">train_dl</span> <span class=\"o\">=</span> <span class=\"n\">PyGDataLoader</span><span class=\"p\">(</span><span class=\"n\">train_ds</span><span class=\"p\">,</span> <span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"n\">shuffle</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">val_dl</span> <span class=\"o\">=</span> <span class=\"n\">PyGDataLoader</span><span class=\"p\">(</span><span class=\"n\">val_ds</span><span class=\"p\">,</span> <span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"mi\">64</span><span class=\"p\">)</span>\n<span class=\"n\">test_dl</span> <span class=\"o\">=</span> <span class=\"n\">PyGDataLoader</span><span class=\"p\">(</span><span class=\"n\">test_ds</span><span class=\"p\">,</span> <span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"mi\">64</span><span class=\"p\">)</span>\n<span class=\"c1\"># train_dl, val_dl, test_dl = PyGDataLoader.loaders(train_ds, val_ds, test_ds, 64)</span>\n<span class=\"n\">train_db</span> <span class=\"o\">=</span> <span class=\"n\">DataBunch</span><span class=\"p\">(</span><span class=\"n\">train_dl</span><span class=\"p\">,</span> <span class=\"n\">val_dl</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 2. mode and optimizer</span>\n<span class=\"k\">class</span> <span class=\"nc\">Model</span><span class=\"p\">(</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">Module</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">feature_dim</span><span class=\"p\">,</span> <span class=\"n\">class_num</span><span class=\"p\">,</span> <span class=\"n\">embed_dim</span><span class=\"o\">=</span><span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"n\">gcn_dims</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"mi\">32</span><span class=\"p\">),</span> <span class=\"n\">dense_dim</span><span class=\"o\">=</span><span class=\"mi\">64</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">embedding</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">Embedding</span><span class=\"p\">(</span><span class=\"n\">num_embeddings</span><span class=\"o\">=</span><span class=\"n\">feature_dim</span><span class=\"p\">,</span> <span class=\"n\">embedding_dim</span><span class=\"o\">=</span><span class=\"n\">embed_dim</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">gcns</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">ModuleList</span><span class=\"p\">()</span>\n        <span class=\"n\">in_dim</span> <span class=\"o\">=</span> <span class=\"n\">embed_dim</span>\n        <span class=\"k\">for</span> <span class=\"n\">dim</span> <span class=\"ow\">in</span> <span class=\"n\">gcn_dims</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">gcns</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">GCNConv</span><span class=\"p\">(</span><span class=\"n\">in_dim</span><span class=\"p\">,</span> <span class=\"n\">dim</span><span class=\"p\">))</span>\n            <span class=\"n\">in_dim</span> <span class=\"o\">=</span> <span class=\"n\">dim</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">graph_pooling</span> <span class=\"o\">=</span> <span class=\"n\">TopKPooling</span><span class=\"p\">(</span><span class=\"n\">gcn_dims</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">ratio</span><span class=\"o\">=</span><span class=\"mf\">0.8</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dense</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">Linear</span><span class=\"p\">(</span><span class=\"n\">gcn_dims</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">dense_dim</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">Linear</span><span class=\"p\">(</span><span class=\"n\">dense_dim</span><span class=\"p\">,</span> <span class=\"n\">class_num</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">forward</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">):</span>\n        <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">edge_index</span><span class=\"p\">,</span> <span class=\"n\">batch</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">edge_index</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">batch</span>\n        <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">embedding</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">squeeze</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">gcn</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">gcns</span><span class=\"p\">:</span>\n            <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">gcn</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">edge_index</span><span class=\"p\">)</span>\n            <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">F</span><span class=\"o\">.</span><span class=\"n\">relu</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">batch</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">graph_pooling</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">edge_index</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">batch</span><span class=\"p\">)</span>\n        <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">global_max_pool</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">batch</span><span class=\"p\">)</span>\n        <span class=\"n\">outputs</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dense</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">outputs</span> <span class=\"o\">=</span> <span class=\"n\">F</span><span class=\"o\">.</span><span class=\"n\">relu</span><span class=\"p\">(</span><span class=\"n\">outputs</span><span class=\"p\">)</span>\n        <span class=\"n\">outputs</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">out</span><span class=\"p\">(</span><span class=\"n\">outputs</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">outputs</span>\n\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Model</span><span class=\"p\">(</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">item_num</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">opt</span> <span class=\"o\">=</span> <span class=\"n\">optim</span><span class=\"o\">.</span><span class=\"n\">SGD</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">parameters</span><span class=\"p\">(),</span> <span class=\"n\">lr</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 3. learner</span>\n<span class=\"n\">learner</span> <span class=\"o\">=</span> <span class=\"n\">Learner</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">opt</span><span class=\"p\">,</span> <span class=\"n\">F</span><span class=\"o\">.</span><span class=\"n\">cross_entropy</span><span class=\"p\">,</span> <span class=\"n\">train_db</span><span class=\"p\">,</span> <span class=\"n\">metrics</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">accuracy</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># 4. fit</span>\n<span class=\"n\">learner</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 5. test</span>\n<span class=\"n\">learner</span><span class=\"o\">.</span><span class=\"n\">test</span><span class=\"p\">(</span><span class=\"n\">test_dl</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 6. predict</span>\n<span class=\"n\">pred</span> <span class=\"o\">=</span> <span class=\"n\">learner</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">test_dl</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">pred</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">())</span>\n\n<span class=\"c1\"># 7. plot</span>\n<span class=\"n\">learner</span><span class=\"o\">.</span><span class=\"n\">recorder</span><span class=\"o\">.</span><span class=\"n\">plot_metrics</span><span class=\"p\">()</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n<h3>c. Node Classification with PyG</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">torch_geometric.datasets</span> <span class=\"kn\">import</span> <span class=\"n\">Planetoid</span>\n<span class=\"kn\">import</span> <span class=\"nn\">torch.nn</span> <span class=\"k\">as</span> <span class=\"nn\">nn</span><span class=\"o\">,</span> <span class=\"nn\">torch.nn.functional</span> <span class=\"k\">as</span> <span class=\"nn\">F</span><span class=\"o\">,</span> <span class=\"nn\">torch.optim</span> <span class=\"k\">as</span> <span class=\"nn\">optim</span>\n<span class=\"kn\">from</span> <span class=\"nn\">torch_geometric.nn</span> <span class=\"kn\">import</span> <span class=\"n\">GCNConv</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bijou.data</span> <span class=\"kn\">import</span> <span class=\"n\">PyGGraphLoader</span><span class=\"p\">,</span> <span class=\"n\">DataBunch</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bijou.learner</span> <span class=\"kn\">import</span> <span class=\"n\">Learner</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bijou.metrics</span> <span class=\"kn\">import</span> <span class=\"n\">masked_cross_entropy</span><span class=\"p\">,</span> <span class=\"n\">masked_accuracy</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bijou.datasets</span> <span class=\"kn\">import</span> <span class=\"n\">pyg_cora</span>\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n\n<span class=\"c1\"># 1. dataset</span>\n<span class=\"n\">dataset</span> <span class=\"o\">=</span> <span class=\"n\">Planetoid</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"o\">=</span><span class=\"n\">pyg_cora</span><span class=\"p\">(),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'Cora'</span><span class=\"p\">)</span>\n<span class=\"n\">train_dl</span> <span class=\"o\">=</span> <span class=\"n\">PyGGraphLoader</span><span class=\"p\">(</span><span class=\"n\">dataset</span><span class=\"p\">,</span> <span class=\"s1\">'train'</span><span class=\"p\">)</span>\n<span class=\"n\">val_dl</span> <span class=\"o\">=</span> <span class=\"n\">PyGGraphLoader</span><span class=\"p\">(</span><span class=\"n\">dataset</span><span class=\"p\">,</span> <span class=\"s1\">'val'</span><span class=\"p\">)</span>\n<span class=\"n\">test_dl</span> <span class=\"o\">=</span> <span class=\"n\">PyGGraphLoader</span><span class=\"p\">(</span><span class=\"n\">dataset</span><span class=\"p\">,</span> <span class=\"s1\">'test'</span><span class=\"p\">)</span>\n<span class=\"c1\"># train_dl, val_dl, test_dl = PyGGraphLoader.loaders(dataset)</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">DataBunch</span><span class=\"p\">(</span><span class=\"n\">train_dl</span><span class=\"p\">,</span> <span class=\"n\">val_dl</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 2. model and optimizer</span>\n<span class=\"k\">class</span> <span class=\"nc\">Model</span><span class=\"p\">(</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">Module</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">feature_num</span><span class=\"p\">,</span> <span class=\"n\">class_num</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">conv1</span> <span class=\"o\">=</span> <span class=\"n\">GCNConv</span><span class=\"p\">(</span><span class=\"n\">feature_num</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">conv2</span> <span class=\"o\">=</span> <span class=\"n\">GCNConv</span><span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"n\">class_num</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">forward</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">):</span>\n        <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">edge_index</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">edge_index</span>\n        <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">conv1</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">edge_index</span><span class=\"p\">)</span>\n        <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">F</span><span class=\"o\">.</span><span class=\"n\">relu</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">conv2</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">edge_index</span><span class=\"p\">)</span>\n        <span class=\"n\">outputs</span> <span class=\"o\">=</span> <span class=\"n\">F</span><span class=\"o\">.</span><span class=\"n\">relu</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">outputs</span>\n\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Model</span><span class=\"p\">(</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">num_node_features</span><span class=\"p\">,</span> <span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">num_classes</span><span class=\"p\">)</span>\n<span class=\"n\">opt</span> <span class=\"o\">=</span> <span class=\"n\">optim</span><span class=\"o\">.</span><span class=\"n\">SGD</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">parameters</span><span class=\"p\">(),</span> <span class=\"n\">lr</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"n\">weight_decay</span><span class=\"o\">=</span><span class=\"mf\">0.01</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 3. learner</span>\n<span class=\"n\">learner</span> <span class=\"o\">=</span> <span class=\"n\">Learner</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">opt</span><span class=\"p\">,</span> <span class=\"n\">masked_cross_entropy</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">metrics</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">masked_accuracy</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># 4. fit</span>\n<span class=\"n\">learner</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 5. test</span>\n<span class=\"n\">learner</span><span class=\"o\">.</span><span class=\"n\">test</span><span class=\"p\">(</span><span class=\"n\">test_dl</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 6. predict</span>\n<span class=\"n\">pred</span> <span class=\"o\">=</span> <span class=\"n\">learner</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">dataset</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">pred</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">())</span>\n\n<span class=\"c1\"># 7. plot</span>\n<span class=\"n\">learner</span><span class=\"o\">.</span><span class=\"n\">recorder</span><span class=\"o\">.</span><span class=\"n\">plot_metrics</span><span class=\"p\">()</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n<h3>d. Graph Classification with DGL</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">torch</span><span class=\"o\">,</span> <span class=\"nn\">torch.nn</span> <span class=\"k\">as</span> <span class=\"nn\">nn</span><span class=\"o\">,</span> <span class=\"nn\">torch.nn.functional</span> <span class=\"k\">as</span> <span class=\"nn\">F</span><span class=\"o\">,</span> <span class=\"nn\">torch.optim</span> <span class=\"k\">as</span> <span class=\"nn\">optim</span>\n<span class=\"kn\">import</span> <span class=\"nn\">dgl</span>\n<span class=\"kn\">import</span> <span class=\"nn\">dgl.function</span> <span class=\"k\">as</span> <span class=\"nn\">fn</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dgl.data</span> <span class=\"kn\">import</span> <span class=\"n\">MiniGCDataset</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bijou.data</span> <span class=\"kn\">import</span> <span class=\"n\">DGLDataLoader</span><span class=\"p\">,</span> <span class=\"n\">DataBunch</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bijou.metrics</span> <span class=\"kn\">import</span> <span class=\"n\">accuracy</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bijou.learner</span> <span class=\"kn\">import</span> <span class=\"n\">Learner</span>\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n\n<span class=\"c1\"># 1. dataset</span>\n<span class=\"n\">train_ds</span> <span class=\"o\">=</span> <span class=\"n\">MiniGCDataset</span><span class=\"p\">(</span><span class=\"mi\">320</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">)</span>\n<span class=\"n\">val_ds</span> <span class=\"o\">=</span> <span class=\"n\">MiniGCDataset</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">)</span>\n<span class=\"n\">test_ds</span> <span class=\"o\">=</span> <span class=\"n\">MiniGCDataset</span><span class=\"p\">(</span><span class=\"mi\">80</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">)</span>\n\n<span class=\"n\">train_dl</span> <span class=\"o\">=</span> <span class=\"n\">DGLDataLoader</span><span class=\"p\">(</span><span class=\"n\">train_ds</span><span class=\"p\">,</span> <span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"n\">shuffle</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">val_dl</span> <span class=\"o\">=</span> <span class=\"n\">DGLDataLoader</span><span class=\"p\">(</span><span class=\"n\">val_ds</span><span class=\"p\">,</span> <span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"n\">shuffle</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">test_dl</span> <span class=\"o\">=</span> <span class=\"n\">DGLDataLoader</span><span class=\"p\">(</span><span class=\"n\">test_ds</span><span class=\"p\">,</span> <span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"n\">shuffle</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">DataBunch</span><span class=\"p\">(</span><span class=\"n\">train_dl</span><span class=\"p\">,</span> <span class=\"n\">val_dl</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 2. mode and optimizer</span>\n<span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"n\">fn</span><span class=\"o\">.</span><span class=\"n\">copy_src</span><span class=\"p\">(</span><span class=\"n\">src</span><span class=\"o\">=</span><span class=\"s1\">'h'</span><span class=\"p\">,</span> <span class=\"n\">out</span><span class=\"o\">=</span><span class=\"s1\">'m'</span><span class=\"p\">)</span>  <span class=\"c1\"># Sends a message of node feature h.</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">reduce</span><span class=\"p\">(</span><span class=\"n\">nodes</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Take an average over all neighbor node features hu and use it to</span>\n<span class=\"sd\">    overwrite the original node feature.\"\"\"</span>\n    <span class=\"n\">accum</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">nodes</span><span class=\"o\">.</span><span class=\"n\">mailbox</span><span class=\"p\">[</span><span class=\"s1\">'m'</span><span class=\"p\">],</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'h'</span><span class=\"p\">:</span> <span class=\"n\">accum</span><span class=\"p\">}</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">NodeApplyModule</span><span class=\"p\">(</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">Module</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Update the node feature hv with ReLU(Whv+b).\"\"\"</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">in_feats</span><span class=\"p\">,</span> <span class=\"n\">out_feats</span><span class=\"p\">,</span> <span class=\"n\">activation</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">linear</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">Linear</span><span class=\"p\">(</span><span class=\"n\">in_feats</span><span class=\"p\">,</span> <span class=\"n\">out_feats</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">activation</span> <span class=\"o\">=</span> <span class=\"n\">activation</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">forward</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">node</span><span class=\"p\">):</span>\n        <span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">linear</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'h'</span><span class=\"p\">])</span>\n        <span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">activation</span><span class=\"p\">(</span><span class=\"n\">h</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'h'</span> <span class=\"p\">:</span> <span class=\"n\">h</span><span class=\"p\">}</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">GCN</span><span class=\"p\">(</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">Module</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">in_feats</span><span class=\"p\">,</span> <span class=\"n\">out_feats</span><span class=\"p\">,</span> <span class=\"n\">activation</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">apply_mod</span> <span class=\"o\">=</span> <span class=\"n\">NodeApplyModule</span><span class=\"p\">(</span><span class=\"n\">in_feats</span><span class=\"p\">,</span> <span class=\"n\">out_feats</span><span class=\"p\">,</span> <span class=\"n\">activation</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">forward</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">g</span><span class=\"p\">,</span> <span class=\"n\">feature</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Initialize the node features with h.</span>\n        <span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">ndata</span><span class=\"p\">[</span><span class=\"s1\">'h'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">feature</span>\n        <span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">update_all</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">,</span> <span class=\"n\">reduce</span><span class=\"p\">)</span>\n        <span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">apply_nodes</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">apply_mod</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">ndata</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s1\">'h'</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Classifier</span><span class=\"p\">(</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">Module</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">in_dim</span><span class=\"p\">,</span> <span class=\"n\">hidden_dim</span><span class=\"p\">,</span> <span class=\"n\">n_classes</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">Classifier</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">()</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">layers</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">ModuleList</span><span class=\"p\">([</span>\n            <span class=\"n\">GCN</span><span class=\"p\">(</span><span class=\"n\">in_dim</span><span class=\"p\">,</span> <span class=\"n\">hidden_dim</span><span class=\"p\">,</span> <span class=\"n\">F</span><span class=\"o\">.</span><span class=\"n\">relu</span><span class=\"p\">),</span>\n            <span class=\"n\">GCN</span><span class=\"p\">(</span><span class=\"n\">hidden_dim</span><span class=\"p\">,</span> <span class=\"n\">hidden_dim</span><span class=\"p\">,</span> <span class=\"n\">F</span><span class=\"o\">.</span><span class=\"n\">relu</span><span class=\"p\">)])</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">classify</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">Linear</span><span class=\"p\">(</span><span class=\"n\">hidden_dim</span><span class=\"p\">,</span> <span class=\"n\">n_classes</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">forward</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">g</span><span class=\"p\">):</span>\n        <span class=\"c1\"># For undirected graphs, in_degree is the same as</span>\n        <span class=\"c1\"># out_degree.</span>\n        <span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">in_degrees</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">float</span><span class=\"p\">()</span>\n        <span class=\"k\">for</span> <span class=\"n\">conv</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">layers</span><span class=\"p\">:</span>\n            <span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"n\">conv</span><span class=\"p\">(</span><span class=\"n\">g</span><span class=\"p\">,</span> <span class=\"n\">h</span><span class=\"p\">)</span>\n        <span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">ndata</span><span class=\"p\">[</span><span class=\"s1\">'h'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">h</span>\n        <span class=\"n\">hg</span> <span class=\"o\">=</span> <span class=\"n\">dgl</span><span class=\"o\">.</span><span class=\"n\">mean_nodes</span><span class=\"p\">(</span><span class=\"n\">g</span><span class=\"p\">,</span> <span class=\"s1\">'h'</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">classify</span><span class=\"p\">(</span><span class=\"n\">hg</span><span class=\"p\">)</span>\n\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Classifier</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">256</span><span class=\"p\">,</span> <span class=\"n\">train_ds</span><span class=\"o\">.</span><span class=\"n\">num_classes</span><span class=\"p\">)</span> \n<span class=\"n\">optimizer</span> <span class=\"o\">=</span> <span class=\"n\">optim</span><span class=\"o\">.</span><span class=\"n\">Adam</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">parameters</span><span class=\"p\">(),</span> <span class=\"n\">lr</span><span class=\"o\">=</span><span class=\"mf\">0.001</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># 3. learne</span>\n<span class=\"n\">loss_func</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">CrossEntropyLoss</span><span class=\"p\">()</span>\n<span class=\"n\">learner</span> <span class=\"o\">=</span> <span class=\"n\">Learner</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">optimizer</span><span class=\"p\">,</span> <span class=\"n\">loss_func</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">metrics</span><span class=\"o\">=</span><span class=\"n\">accuracy</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 4. fit</span>\n<span class=\"n\">learner</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"mi\">80</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 5. test</span>\n<span class=\"n\">learner</span><span class=\"o\">.</span><span class=\"n\">test</span><span class=\"p\">(</span><span class=\"n\">test_dl</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 6. predict</span>\n<span class=\"n\">learner</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">test_dl</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 7. plot</span>\n<span class=\"n\">learner</span><span class=\"o\">.</span><span class=\"n\">recorder</span><span class=\"o\">.</span><span class=\"n\">plot_metrics</span><span class=\"p\">()</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n<h3>e. Node Classification with DGL</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">torch.nn.functional</span> <span class=\"k\">as</span> <span class=\"nn\">F</span><span class=\"o\">,</span> <span class=\"nn\">torch.nn</span> <span class=\"k\">as</span> <span class=\"nn\">nn</span><span class=\"o\">,</span> <span class=\"nn\">torch</span> <span class=\"k\">as</span> <span class=\"nn\">th</span>\n<span class=\"kn\">import</span> <span class=\"nn\">dgl.function</span> <span class=\"k\">as</span> <span class=\"nn\">fn</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dgl</span> <span class=\"kn\">import</span> <span class=\"n\">DGLGraph</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dgl.data</span> <span class=\"kn\">import</span> <span class=\"n\">citation_graph</span> <span class=\"k\">as</span> <span class=\"n\">citegrh</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bijou.learner</span> <span class=\"kn\">import</span> <span class=\"n\">Learner</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bijou.data</span> <span class=\"kn\">import</span> <span class=\"n\">GraphLoader</span><span class=\"p\">,</span> <span class=\"n\">DataBunch</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bijou.metrics</span> <span class=\"kn\">import</span> <span class=\"n\">masked_accuracy</span><span class=\"p\">,</span> <span class=\"n\">masked_cross_entropy</span>\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n<span class=\"kn\">import</span> <span class=\"nn\">networkx</span> <span class=\"k\">as</span> <span class=\"nn\">nx</span>\n\n\n<span class=\"c1\"># 1. dataset</span>\n<span class=\"k\">def</span> <span class=\"nf\">load_cora_data</span><span class=\"p\">():</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">citegrh</span><span class=\"o\">.</span><span class=\"n\">load_cora</span><span class=\"p\">()</span>\n    <span class=\"n\">features</span> <span class=\"o\">=</span> <span class=\"n\">th</span><span class=\"o\">.</span><span class=\"n\">FloatTensor</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">features</span><span class=\"p\">)</span>\n    <span class=\"n\">labels</span> <span class=\"o\">=</span> <span class=\"n\">th</span><span class=\"o\">.</span><span class=\"n\">LongTensor</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">labels</span><span class=\"p\">)</span>\n    <span class=\"n\">train_mask</span> <span class=\"o\">=</span> <span class=\"n\">th</span><span class=\"o\">.</span><span class=\"n\">BoolTensor</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">train_mask</span><span class=\"p\">)</span>\n    <span class=\"n\">val_mask</span> <span class=\"o\">=</span> <span class=\"n\">th</span><span class=\"o\">.</span><span class=\"n\">BoolTensor</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">val_mask</span><span class=\"p\">)</span>\n    <span class=\"n\">test_mask</span> <span class=\"o\">=</span> <span class=\"n\">th</span><span class=\"o\">.</span><span class=\"n\">BoolTensor</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">test_mask</span><span class=\"p\">)</span>\n    <span class=\"n\">g</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">graph</span>\n    <span class=\"c1\"># add self loop</span>\n    <span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">remove_edges_from</span><span class=\"p\">(</span><span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">selfloop_edges</span><span class=\"p\">(</span><span class=\"n\">g</span><span class=\"p\">))</span>\n    <span class=\"n\">g</span> <span class=\"o\">=</span> <span class=\"n\">DGLGraph</span><span class=\"p\">(</span><span class=\"n\">g</span><span class=\"p\">)</span>\n    <span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">add_edges</span><span class=\"p\">(</span><span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">nodes</span><span class=\"p\">(),</span> <span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">nodes</span><span class=\"p\">())</span>\n    <span class=\"k\">return</span> <span class=\"n\">g</span><span class=\"p\">,</span> <span class=\"n\">features</span><span class=\"p\">,</span> <span class=\"n\">labels</span><span class=\"p\">,</span> <span class=\"n\">train_mask</span><span class=\"p\">,</span> <span class=\"n\">val_mask</span><span class=\"p\">,</span> <span class=\"n\">test_mask</span>\n\n<span class=\"n\">g</span><span class=\"p\">,</span> <span class=\"n\">features</span><span class=\"p\">,</span> <span class=\"n\">labels</span><span class=\"p\">,</span> <span class=\"n\">train_mask</span><span class=\"p\">,</span> <span class=\"n\">val_mask</span><span class=\"p\">,</span> <span class=\"n\">test_mask</span> <span class=\"o\">=</span> <span class=\"n\">load_cora_data</span><span class=\"p\">()</span>\n<span class=\"n\">train_dl</span> <span class=\"o\">=</span> <span class=\"n\">GraphLoader</span><span class=\"p\">(</span><span class=\"n\">g</span><span class=\"p\">,</span> <span class=\"n\">features</span><span class=\"o\">=</span><span class=\"n\">features</span><span class=\"p\">,</span> <span class=\"n\">labels</span><span class=\"o\">=</span><span class=\"n\">labels</span><span class=\"p\">,</span> <span class=\"n\">mask</span><span class=\"o\">=</span><span class=\"n\">train_mask</span><span class=\"p\">)</span>\n<span class=\"n\">val_dl</span> <span class=\"o\">=</span> <span class=\"n\">GraphLoader</span><span class=\"p\">(</span><span class=\"n\">g</span><span class=\"p\">,</span> <span class=\"n\">features</span><span class=\"o\">=</span><span class=\"n\">features</span><span class=\"p\">,</span> <span class=\"n\">labels</span><span class=\"o\">=</span><span class=\"n\">labels</span><span class=\"p\">,</span> <span class=\"n\">mask</span><span class=\"o\">=</span><span class=\"n\">val_mask</span><span class=\"p\">)</span>\n<span class=\"n\">test_dl</span> <span class=\"o\">=</span> <span class=\"n\">GraphLoader</span><span class=\"p\">(</span><span class=\"n\">g</span><span class=\"p\">,</span> <span class=\"n\">features</span><span class=\"o\">=</span><span class=\"n\">features</span><span class=\"p\">,</span> <span class=\"n\">labels</span><span class=\"o\">=</span><span class=\"n\">labels</span><span class=\"p\">,</span> <span class=\"n\">mask</span><span class=\"o\">=</span><span class=\"n\">test_mask</span><span class=\"p\">)</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">DataBunch</span><span class=\"p\">(</span><span class=\"n\">train_dl</span><span class=\"p\">,</span> <span class=\"n\">val_dl</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># 2. model and optimizer</span>\n<span class=\"n\">gcn_msg</span> <span class=\"o\">=</span> <span class=\"n\">fn</span><span class=\"o\">.</span><span class=\"n\">copy_src</span><span class=\"p\">(</span><span class=\"n\">src</span><span class=\"o\">=</span><span class=\"s1\">'h'</span><span class=\"p\">,</span> <span class=\"n\">out</span><span class=\"o\">=</span><span class=\"s1\">'m'</span><span class=\"p\">)</span>\n<span class=\"n\">gcn_reduce</span> <span class=\"o\">=</span> <span class=\"n\">fn</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"o\">=</span><span class=\"s1\">'m'</span><span class=\"p\">,</span> <span class=\"n\">out</span><span class=\"o\">=</span><span class=\"s1\">'h'</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">NodeApplyModule</span><span class=\"p\">(</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">Module</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">in_feats</span><span class=\"p\">,</span> <span class=\"n\">out_feats</span><span class=\"p\">,</span> <span class=\"n\">activation</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">NodeApplyModule</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">linear</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">Linear</span><span class=\"p\">(</span><span class=\"n\">in_feats</span><span class=\"p\">,</span> <span class=\"n\">out_feats</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">activation</span> <span class=\"o\">=</span> <span class=\"n\">activation</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">forward</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">node</span><span class=\"p\">):</span>\n        <span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">linear</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'h'</span><span class=\"p\">])</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">activation</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">activation</span><span class=\"p\">(</span><span class=\"n\">h</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'h'</span><span class=\"p\">:</span> <span class=\"n\">h</span><span class=\"p\">}</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">GCN</span><span class=\"p\">(</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">Module</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">in_feats</span><span class=\"p\">,</span> <span class=\"n\">out_feats</span><span class=\"p\">,</span> <span class=\"n\">activation</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">GCN</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">apply_mod</span> <span class=\"o\">=</span> <span class=\"n\">NodeApplyModule</span><span class=\"p\">(</span><span class=\"n\">in_feats</span><span class=\"p\">,</span> <span class=\"n\">out_feats</span><span class=\"p\">,</span> <span class=\"n\">activation</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">forward</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">g</span><span class=\"p\">,</span> <span class=\"n\">feature</span><span class=\"p\">):</span>\n        <span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">ndata</span><span class=\"p\">[</span><span class=\"s1\">'h'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">feature</span>\n        <span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">update_all</span><span class=\"p\">(</span><span class=\"n\">gcn_msg</span><span class=\"p\">,</span> <span class=\"n\">gcn_reduce</span><span class=\"p\">)</span>\n        <span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">apply_nodes</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">apply_mod</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">ndata</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s1\">'h'</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Net</span><span class=\"p\">(</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">Module</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">Net</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">gcn1</span> <span class=\"o\">=</span> <span class=\"n\">GCN</span><span class=\"p\">(</span><span class=\"mi\">1433</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"n\">F</span><span class=\"o\">.</span><span class=\"n\">relu</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">gcn2</span> <span class=\"o\">=</span> <span class=\"n\">GCN</span><span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">forward</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">g</span><span class=\"p\">,</span> <span class=\"n\">features</span><span class=\"p\">):</span>\n        <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">gcn1</span><span class=\"p\">(</span><span class=\"n\">g</span><span class=\"p\">,</span> <span class=\"n\">features</span><span class=\"p\">)</span>\n        <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">gcn2</span><span class=\"p\">(</span><span class=\"n\">g</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">x</span>\n\n<span class=\"n\">net</span> <span class=\"o\">=</span> <span class=\"n\">Net</span><span class=\"p\">()</span>\n<span class=\"n\">optimizer</span> <span class=\"o\">=</span> <span class=\"n\">th</span><span class=\"o\">.</span><span class=\"n\">optim</span><span class=\"o\">.</span><span class=\"n\">Adam</span><span class=\"p\">(</span><span class=\"n\">net</span><span class=\"o\">.</span><span class=\"n\">parameters</span><span class=\"p\">(),</span> <span class=\"n\">lr</span><span class=\"o\">=</span><span class=\"mf\">1e-3</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># 3. learner</span>\n<span class=\"n\">learner</span> <span class=\"o\">=</span> <span class=\"n\">Learner</span><span class=\"p\">(</span><span class=\"n\">net</span><span class=\"p\">,</span> <span class=\"n\">optimizer</span><span class=\"p\">,</span> <span class=\"n\">masked_cross_entropy</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">metrics</span><span class=\"o\">=</span><span class=\"n\">masked_accuracy</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 4. fit</span>\n<span class=\"n\">learner</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 5. test</span>\n<span class=\"n\">learner</span><span class=\"o\">.</span><span class=\"n\">test</span><span class=\"p\">(</span><span class=\"n\">test_dl</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 6. predict</span>\n<span class=\"n\">learner</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">test_dl</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 7. plot</span>\n<span class=\"n\">learner</span><span class=\"o\">.</span><span class=\"n\">recorder</span><span class=\"o\">.</span><span class=\"n\">plot_metrics</span><span class=\"p\">()</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n\n          </div>"}, "last_serial": 6617343, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "36deb7f169ec7dff2f2c6bc816037b94", "sha256": "ddb7ca095d394dbaf4b74c1fca3cf6cbb0b1dca7f031a258d3a371868e004688"}, "downloads": -1, "filename": "bijou-0.0.1-py3.7.egg", "has_sig": false, "md5_digest": "36deb7f169ec7dff2f2c6bc816037b94", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 26230, "upload_time": "2020-01-28T05:12:01", "upload_time_iso_8601": "2020-01-28T05:12:01.729692Z", "url": "https://files.pythonhosted.org/packages/f8/9e/2da55b6f4af8fd810b68d963d20353cf4485e4f8d1a8d99bde07b3951180/bijou-0.0.1-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "897986d4a5c37cad5518b5e120c549b7", "sha256": "78d00cf6b279d81b6cef5ad148db29d6248031de8bdc413424532964fb9e2c0d"}, "downloads": -1, "filename": "bijou-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "897986d4a5c37cad5518b5e120c549b7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10787, "upload_time": "2020-01-28T05:11:59", "upload_time_iso_8601": "2020-01-28T05:11:59.145868Z", "url": "https://files.pythonhosted.org/packages/67/47/08b0f8eaf1a60e9696b37b27f4971dac9803a834bca3c1d450cf3340d3c4/bijou-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d1febd9b5402517fa3ae6a248b88b705", "sha256": "f421fc59fa93502343c4fb2489f7a7ce63cece035c76fed39ac733a78a926741"}, "downloads": -1, "filename": "bijou-0.0.1.tar.gz", "has_sig": false, "md5_digest": "d1febd9b5402517fa3ae6a248b88b705", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8060, "upload_time": "2020-01-28T05:12:03", "upload_time_iso_8601": "2020-01-28T05:12:03.254942Z", "url": "https://files.pythonhosted.org/packages/43/ff/74b851c040e4280da69b9f41fda0f3c8ef0431422239aac86a41226580d7/bijou-0.0.1.tar.gz", "yanked": false}], "0.0.2.1": [{"comment_text": "", "digests": {"md5": "555eca3077f49037f7888ea0e83274bb", "sha256": "5de3ffb9bba46b7caa671028270c18470a1dd947afe2356a21cbb2f383e32cdf"}, "downloads": -1, "filename": "bijou-0.0.2.1-py3.7.egg", "has_sig": false, "md5_digest": "555eca3077f49037f7888ea0e83274bb", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": ">=3.5", "size": 10683, "upload_time": "2020-01-29T14:06:28", "upload_time_iso_8601": "2020-01-29T14:06:28.076185Z", "url": "https://files.pythonhosted.org/packages/6a/69/dd22f20d7709f8a7065e05683ee02654b5d2a204b4d5246497881d2ccd67/bijou-0.0.2.1-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "fea6ee28e212e8525eb603e99280bd36", "sha256": "f4c42fc6daebb19f693dd92727d315fb34c44f759c1132861a69bac5d42b300f"}, "downloads": -1, "filename": "bijou-0.0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "fea6ee28e212e8525eb603e99280bd36", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 11958, "upload_time": "2020-01-29T14:06:26", "upload_time_iso_8601": "2020-01-29T14:06:26.861292Z", "url": "https://files.pythonhosted.org/packages/f4/55/63e7d20d463a795df363bf7ac3c252b2b5acd89777b2c9a4f3ff9f96e3b8/bijou-0.0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9bb8e38212362c1e7887c4ceb237701a", "sha256": "a7de75045fb5c6ea8a09269f752cbf0ce5f7a983a1906a195f8bdd04c4586fbb"}, "downloads": -1, "filename": "bijou-0.0.2.1.tar.gz", "has_sig": false, "md5_digest": "9bb8e38212362c1e7887c4ceb237701a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 9424, "upload_time": "2020-01-29T14:06:29", "upload_time_iso_8601": "2020-01-29T14:06:29.744931Z", "url": "https://files.pythonhosted.org/packages/f4/fc/f8f3852a4996790f2bf9eb8ff93d020c08043bb20e490e34ad0fe392cf17/bijou-0.0.2.1.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "e9d588aa60d13f4489ef8e152bf6ffc8", "sha256": "8f95cf7a33ea00f30a4c6974ca31d503f97c974a86bf2bc549487f82eae7dbe0"}, "downloads": -1, "filename": "bijou-0.0.3.0-py3.7.egg", "has_sig": false, "md5_digest": "e9d588aa60d13f4489ef8e152bf6ffc8", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": ">=3.5", "size": 22808, "upload_time": "2020-02-01T03:54:59", "upload_time_iso_8601": "2020-02-01T03:54:59.086000Z", "url": "https://files.pythonhosted.org/packages/83/6e/dd33e5a595346e283917eb57c42fe1c58c194085ea8d2fb778936330c124/bijou-0.0.3.0-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "036ea258216ca217720a8358cb9dc4e6", "sha256": "69d8467f57efa08b4e0c857ab3c502ac6e497a3a3775de9a0f1c548fd2d2168e"}, "downloads": -1, "filename": "bijou-0.0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "036ea258216ca217720a8358cb9dc4e6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 24423, "upload_time": "2020-02-01T03:54:57", "upload_time_iso_8601": "2020-02-01T03:54:57.583476Z", "url": "https://files.pythonhosted.org/packages/58/a9/a2240f7b3ed36567a66debf0f645a0f4036a4b93bb4b0301ed39537e58bc/bijou-0.0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f013fdbebe91f0717babe4f996a577cf", "sha256": "630dfb3b06879a2a9a33a680667ad23cf74fcdffb2605555df478c95f68e04a5"}, "downloads": -1, "filename": "bijou-0.0.3-py3.7.egg", "has_sig": false, "md5_digest": "f013fdbebe91f0717babe4f996a577cf", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": ">=3.5", "size": 11479, "upload_time": "2020-01-30T15:44:30", "upload_time_iso_8601": "2020-01-30T15:44:30.356247Z", "url": "https://files.pythonhosted.org/packages/b9/68/a1a5adc7042fca3405e8e88f42b1085aad2b63176b3266f69eb6ab8bd073/bijou-0.0.3-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "1e07e1490113bf43a986ddc9443cac61", "sha256": "81ccbc0491ef05784f0e8c0b6cc5c832c23e6b4f726180daa01774e291337645"}, "downloads": -1, "filename": "bijou-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "1e07e1490113bf43a986ddc9443cac61", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 12733, "upload_time": "2020-01-30T15:44:28", "upload_time_iso_8601": "2020-01-30T15:44:28.552973Z", "url": "https://files.pythonhosted.org/packages/2d/fb/8e6906356f2253b7f002d6784aa541d412f294788724e41f5a389fb4a9a1/bijou-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7ef22d8446a7a637539d0c26f4103e2d", "sha256": "4a9bd40d90af941d9aaa7a34e431feac33a0cc13f9fa8d2021ea22797bb55e91"}, "downloads": -1, "filename": "bijou-0.0.3.tar.gz", "has_sig": false, "md5_digest": "7ef22d8446a7a637539d0c26f4103e2d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 10087, "upload_time": "2020-01-30T15:44:32", "upload_time_iso_8601": "2020-01-30T15:44:32.436797Z", "url": "https://files.pythonhosted.org/packages/4b/8d/e2b4ff01881b5a903a2f937533f44d1791b2e67bd68ac5678c5ec7c41d85/bijou-0.0.3.tar.gz", "yanked": false}], "0.0.3.1": [{"comment_text": "", "digests": {"md5": "fbbc9382beffede4ba69bfd2279e7cc7", "sha256": "0076203019475dfd03cf789c9a1cf6d56162ab1b56e63eb7aa224adc41bb957e"}, "downloads": -1, "filename": "bijou-0.0.3.1-py3.7.egg", "has_sig": false, "md5_digest": "fbbc9382beffede4ba69bfd2279e7cc7", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": ">=3.5", "size": 11484, "upload_time": "2020-01-31T04:31:20", "upload_time_iso_8601": "2020-01-31T04:31:20.230782Z", "url": "https://files.pythonhosted.org/packages/f2/20/af8765a7ccf9c72b101b5f7a6e55c32104c041cd64a44e825c904abb394c/bijou-0.0.3.1-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "84676e329e289e0f3a8a10ceb40a9ba0", "sha256": "b8fe55ccfe5d3cfdcf81146e92794d00894ab1ccc830c3db21d5dec53e57f0df"}, "downloads": -1, "filename": "bijou-0.0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "84676e329e289e0f3a8a10ceb40a9ba0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 12759, "upload_time": "2020-01-31T04:31:18", "upload_time_iso_8601": "2020-01-31T04:31:18.241442Z", "url": "https://files.pythonhosted.org/packages/da/d9/946a81023f441b051b1404c7fd7a24797c6aebc9e575e37131951af1e634/bijou-0.0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d797d1e29e2571bdb99d65416e8c9dcd", "sha256": "07be964bf28febf5326f0194cceec60a06197163ce2ec1b088c7f5ffd43cb06f"}, "downloads": -1, "filename": "bijou-0.0.3.1.tar.gz", "has_sig": false, "md5_digest": "d797d1e29e2571bdb99d65416e8c9dcd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 10093, "upload_time": "2020-01-31T04:31:22", "upload_time_iso_8601": "2020-01-31T04:31:22.090829Z", "url": "https://files.pythonhosted.org/packages/99/9f/6dcbcdb17926ea5c7f2be3baed640e2a265f55d1d432cc4028cc3340e2e6/bijou-0.0.3.1.tar.gz", "yanked": false}], "0.0.3.2": [{"comment_text": "", "digests": {"md5": "eec0b75b998c4c56c3f72c38004a208f", "sha256": "e0f425fbf3fcd53ed0c178b8ff31649426b3eb779abf2cc4af4139acde317aea"}, "downloads": -1, "filename": "bijou-0.0.3.2-py3.7.egg", "has_sig": false, "md5_digest": "eec0b75b998c4c56c3f72c38004a208f", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": ">=3.5", "size": 11481, "upload_time": "2020-01-31T15:09:48", "upload_time_iso_8601": "2020-01-31T15:09:48.182780Z", "url": "https://files.pythonhosted.org/packages/27/55/1a4faaba6822b860f4f16691548f05a0c8cdb45d5f1cb775432cde5457a8/bijou-0.0.3.2-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "cf1300b92a63e4d864f44f7e9c28f3b8", "sha256": "cabd59e5050d6c9f8547ab0e40da93d93320779cb216849cb2b91c40b6095175"}, "downloads": -1, "filename": "bijou-0.0.3.2-py3-none-any.whl", "has_sig": false, "md5_digest": "cf1300b92a63e4d864f44f7e9c28f3b8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 12758, "upload_time": "2020-01-31T15:09:46", "upload_time_iso_8601": "2020-01-31T15:09:46.223809Z", "url": "https://files.pythonhosted.org/packages/93/bb/cea99913b6e94ca4aa6a3c60f016d6fa918b2a4407d8533b3e70d013abcf/bijou-0.0.3.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cdd5d69318fc387e6063f3f661fc0b2f", "sha256": "ac43fe0fd5b82ed24c66c20196bb1c2b608368c4d2000af15ea7120d3f09afa0"}, "downloads": -1, "filename": "bijou-0.0.3.2.tar.gz", "has_sig": false, "md5_digest": "cdd5d69318fc387e6063f3f661fc0b2f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 10105, "upload_time": "2020-01-31T15:09:49", "upload_time_iso_8601": "2020-01-31T15:09:49.429102Z", "url": "https://files.pythonhosted.org/packages/42/cb/38214dc9b70c44c0241ee431bfb59ce3934f40f61d3948c1c08e428cba08/bijou-0.0.3.2.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "5f52c4ac19daeb0bb37cc46c5d8e8e7e", "sha256": "77654a89b2ba23c542e1e50588c9c8205145e3ce4ab16a91d43f807ed8461649"}, "downloads": -1, "filename": "bijou-0.0.4-py3.7.egg", "has_sig": false, "md5_digest": "5f52c4ac19daeb0bb37cc46c5d8e8e7e", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": ">=3.5", "size": 13210, "upload_time": "2020-02-01T15:59:23", "upload_time_iso_8601": "2020-02-01T15:59:23.850697Z", "url": "https://files.pythonhosted.org/packages/a1/5b/d4d7d0db1d1ac1cfd82d30afd204f2bcec2667a7d3593f2e14a894a76c7a/bijou-0.0.4-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "bc75d31aa420b0ca861c1b0dbb134e1e", "sha256": "ec8e8d8625dc7a48ceb1dc56e5f08bf01138422530acbd1deefc7bdda0b03ec4"}, "downloads": -1, "filename": "bijou-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "bc75d31aa420b0ca861c1b0dbb134e1e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 14339, "upload_time": "2020-02-01T15:59:21", "upload_time_iso_8601": "2020-02-01T15:59:21.276173Z", "url": "https://files.pythonhosted.org/packages/e6/20/7a56d3e0bec8cbbe00dbd03f4bf5067d0edf5555eaae99469948b6cf6ba1/bijou-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3909109e36b11d2fcbab462ebe43809f", "sha256": "aa2984709d2687c0b33500084988c20a56bd91c78dfc4e291d8fd6b7ffaca286"}, "downloads": -1, "filename": "bijou-0.0.4.tar.gz", "has_sig": false, "md5_digest": "3909109e36b11d2fcbab462ebe43809f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 11648, "upload_time": "2020-02-01T15:59:25", "upload_time_iso_8601": "2020-02-01T15:59:25.449029Z", "url": "https://files.pythonhosted.org/packages/5a/89/cbdebc046b6707acb75a132749f53573a2db7ab968a588cf31b2c2ac7912/bijou-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "50721d0c771e4b1bc8fb460f9f5387e2", "sha256": "3bf3e91e5e5cb4ce93229c99f01f18999d580a5b4f30916128fe0f93607ea205"}, "downloads": -1, "filename": "bijou-0.0.5-py3.7.egg", "has_sig": false, "md5_digest": "50721d0c771e4b1bc8fb460f9f5387e2", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": ">=3.5", "size": 17450, "upload_time": "2020-02-02T18:59:51", "upload_time_iso_8601": "2020-02-02T18:59:51.925377Z", "url": "https://files.pythonhosted.org/packages/18/0c/f27df1e2f2a4a13c80f5da7a93c751f0d32d712b66553cbf00ea6d7c3750/bijou-0.0.5-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "6614563d5d3e2ef7f56a9165ddc8c4a0", "sha256": "81058298d89050a9a9fc742d1988195b305d890e34c4d0ec39c87214879a3d92"}, "downloads": -1, "filename": "bijou-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "6614563d5d3e2ef7f56a9165ddc8c4a0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 18620, "upload_time": "2020-02-02T18:59:49", "upload_time_iso_8601": "2020-02-02T18:59:49.813116Z", "url": "https://files.pythonhosted.org/packages/29/cd/a14179328b40c4392a6a5c2cdee0b354fb072ca8bb18d76afd04188b2fe4/bijou-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "73306149f83c13149fb2e55a98923697", "sha256": "e22b121735f869ed441b394ec45bf1863ba6cc972ddbe1353356dd03fa21ddef"}, "downloads": -1, "filename": "bijou-0.0.5.tar.gz", "has_sig": false, "md5_digest": "73306149f83c13149fb2e55a98923697", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 15481, "upload_time": "2020-02-02T18:59:53", "upload_time_iso_8601": "2020-02-02T18:59:53.661776Z", "url": "https://files.pythonhosted.org/packages/ad/c6/63626300464d405221896cb6858f25c656eb17c4a98ec30f92b734123d10/bijou-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "d327eabf46ccff982375bde699ece2ca", "sha256": "3af911b6921df799181cab9ceecb73f74c50b53411274b7a0501fc9d199be675"}, "downloads": -1, "filename": "bijou-0.0.6-py3.7.egg", "has_sig": false, "md5_digest": "d327eabf46ccff982375bde699ece2ca", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": ">=3.5", "size": 33815, "upload_time": "2020-02-03T16:50:06", "upload_time_iso_8601": "2020-02-03T16:50:06.287016Z", "url": "https://files.pythonhosted.org/packages/9a/68/806785c336e9f7288a1172dd7d39b0700698309601729ea0b4fe44f7138f/bijou-0.0.6-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "1b4c28ddb52d7601b50f7e7be7f6b2f0", "sha256": "eac968908586991cd4fedffb53b4664c37d80a810165e4e3eaf46e06ae192557"}, "downloads": -1, "filename": "bijou-0.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "1b4c28ddb52d7601b50f7e7be7f6b2f0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 35763, "upload_time": "2020-02-03T16:50:04", "upload_time_iso_8601": "2020-02-03T16:50:04.540651Z", "url": "https://files.pythonhosted.org/packages/97/db/a4ac902facc8638f715b9ae21396d23f62751f7d1ddf9f00a7f7996020cf/bijou-0.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9f2011a83fe577a496828c5ae615e375", "sha256": "827f90a5035132b7c3e1b032085f0a5d358779daa50c9ddd145faf1bfa138ccc"}, "downloads": -1, "filename": "bijou-0.0.6.tar.gz", "has_sig": false, "md5_digest": "9f2011a83fe577a496828c5ae615e375", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 19741, "upload_time": "2020-02-03T16:50:08", "upload_time_iso_8601": "2020-02-03T16:50:08.612652Z", "url": "https://files.pythonhosted.org/packages/dd/f5/98b0558dc97307c2a7145cfb8c030e84ba449c469483577535cec76716f8/bijou-0.0.6.tar.gz", "yanked": false}], "0.0.6.1": [{"comment_text": "", "digests": {"md5": "05c2f8f531b2738018fc95cc47b225bb", "sha256": "9b8f1677a1be5d9cf96b59e71d088094c705e53d75850545d4e52463b44a0371"}, "downloads": -1, "filename": "bijou-0.0.6.1-py3.7.egg", "has_sig": false, "md5_digest": "05c2f8f531b2738018fc95cc47b225bb", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": ">=3.5", "size": 33705, "upload_time": "2020-02-03T17:24:56", "upload_time_iso_8601": "2020-02-03T17:24:56.962787Z", "url": "https://files.pythonhosted.org/packages/75/20/df51caef07699b4434366a835e6610b24dd548afd1bf8187be8034eb7fa8/bijou-0.0.6.1-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "b365ee45c8b28ccced09647a0269f798", "sha256": "87af7e05d7ce697d34efb16d2219a71d0542bec9f18d9135ed5abdfd3ddc6ea0"}, "downloads": -1, "filename": "bijou-0.0.6.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b365ee45c8b28ccced09647a0269f798", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 35666, "upload_time": "2020-02-03T17:24:55", "upload_time_iso_8601": "2020-02-03T17:24:55.111083Z", "url": "https://files.pythonhosted.org/packages/c8/7a/57c7c6a16f7549cd2dc1afdf203025e9db9cbafb68e2f5d361459c640e17/bijou-0.0.6.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b216ae4f39759f695d95f43090981f3d", "sha256": "16d06e0b00862eea661dfef05759985a087ad3d03d7ce7776cabb6d8bcac52ee"}, "downloads": -1, "filename": "bijou-0.0.6.1.tar.gz", "has_sig": false, "md5_digest": "b216ae4f39759f695d95f43090981f3d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 19718, "upload_time": "2020-02-03T17:24:59", "upload_time_iso_8601": "2020-02-03T17:24:59.193062Z", "url": "https://files.pythonhosted.org/packages/fb/44/4415a5cd415be487c169fe219bbb43eb85617c3f133d34d67d325687b91f/bijou-0.0.6.1.tar.gz", "yanked": false}], "0.0.6.2": [{"comment_text": "", "digests": {"md5": "7e526419e4aa000333930ca56793349f", "sha256": "27159286a437d507258d839240c889832e24ea1db0e11ba2616915c9bdc445e1"}, "downloads": -1, "filename": "bijou-0.0.6.2-py3.7.egg", "has_sig": false, "md5_digest": "7e526419e4aa000333930ca56793349f", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": ">=3.5", "size": 33703, "upload_time": "2020-02-04T03:17:40", "upload_time_iso_8601": "2020-02-04T03:17:40.744893Z", "url": "https://files.pythonhosted.org/packages/8e/f5/d99552e83cc1e21d1c1602a568a27eecdde2c84352868dfc0fd3cdbe5bad/bijou-0.0.6.2-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "8692b538b3202fdedf3287c32f8ebcea", "sha256": "29651af53a52b71f995901539fcbccffadb8b21525878c4ac549b28612d81e33"}, "downloads": -1, "filename": "bijou-0.0.6.2-py3-none-any.whl", "has_sig": false, "md5_digest": "8692b538b3202fdedf3287c32f8ebcea", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 35667, "upload_time": "2020-02-04T03:17:39", "upload_time_iso_8601": "2020-02-04T03:17:39.096559Z", "url": "https://files.pythonhosted.org/packages/6f/71/05cfbe80a26a172422e644cf471049204a919a92d708ce65f39f613f1b54/bijou-0.0.6.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "502e9f2e42650d3b628a10e4a06b3f33", "sha256": "2b2388a0989250043b98e30ba5479b70f32c5c7519b904b9509e33f1b582942c"}, "downloads": -1, "filename": "bijou-0.0.6.2.tar.gz", "has_sig": false, "md5_digest": "502e9f2e42650d3b628a10e4a06b3f33", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 19720, "upload_time": "2020-02-04T03:17:42", "upload_time_iso_8601": "2020-02-04T03:17:42.726023Z", "url": "https://files.pythonhosted.org/packages/9f/d4/b95985f34b2945434f22bf2c63621d4382dad4700c0a260ebf00d81da58d/bijou-0.0.6.2.tar.gz", "yanked": false}], "0.1": [{"comment_text": "", "digests": {"md5": "6559d2e29600d66fff4191b27398c446", "sha256": "b41017a782980844724558d83fbb6e40e6305a7a2b29dd8d8da5a6469b1f345b"}, "downloads": -1, "filename": "bijou-0.1-py3.7.egg", "has_sig": false, "md5_digest": "6559d2e29600d66fff4191b27398c446", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": ">=3.5", "size": 21079, "upload_time": "2020-02-04T15:07:38", "upload_time_iso_8601": "2020-02-04T15:07:38.300095Z", "url": "https://files.pythonhosted.org/packages/ea/11/1b3e6ad5bbf4d8d78875b8daa7a18714756bda0cf7e38cf09d9f14c6eac7/bijou-0.1-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "40a8647b3a729ed3d70c510fd465b085", "sha256": "1e4394ec0b6e45b3d829d5407d187a0b04c1ad79831ee86b1cf8477d803d8d6d"}, "downloads": -1, "filename": "bijou-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "40a8647b3a729ed3d70c510fd465b085", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 22319, "upload_time": "2020-02-04T15:07:36", "upload_time_iso_8601": "2020-02-04T15:07:36.188314Z", "url": "https://files.pythonhosted.org/packages/cd/7a/5fab7da22bf92d64d99d2972d224be726a8e7b4258d348d5112df313b0b5/bijou-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f7b46df7fc298b9518fbb13edea7ad3c", "sha256": "f1d98cada398a64fbbe478d1111f282378710886f41eb6cf45c4af816fffaf70"}, "downloads": -1, "filename": "bijou-0.1.tar.gz", "has_sig": false, "md5_digest": "f7b46df7fc298b9518fbb13edea7ad3c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 20010, "upload_time": "2020-02-04T15:07:39", "upload_time_iso_8601": "2020-02-04T15:07:39.778276Z", "url": "https://files.pythonhosted.org/packages/14/47/59dedbe53746bf1d2bfdc6905aa08c25ed8e810fe1ce3debffe6c08ca466/bijou-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "39d89541b19d3096fb3bbf0873c7c866", "sha256": "49c2d71fc62a7eec0ce81f794581a43bf61dc1594559031edfe7d4695fc259d8"}, "downloads": -1, "filename": "bijou-0.1.1-py3.7.egg", "has_sig": false, "md5_digest": "39d89541b19d3096fb3bbf0873c7c866", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": ">=3.5", "size": 22916, "upload_time": "2020-02-05T15:47:25", "upload_time_iso_8601": "2020-02-05T15:47:25.079070Z", "url": "https://files.pythonhosted.org/packages/1d/1b/c2c3601c25bf46b32485e685082897ee46886cca81946ad737da97dda925/bijou-0.1.1-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "33a444d0b7358f65adfc1b919ae951d7", "sha256": "d9e95a7557092d6d5202fb37cb008c8eb05decae007938c7c4046b51d1d60792"}, "downloads": -1, "filename": "bijou-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "33a444d0b7358f65adfc1b919ae951d7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 24298, "upload_time": "2020-02-05T15:47:23", "upload_time_iso_8601": "2020-02-05T15:47:23.328514Z", "url": "https://files.pythonhosted.org/packages/b5/9d/e2a32f201cd0d1aec04c9889d7bb3abe3758218ca4e4e861bf2df6e9fda6/bijou-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8d954ced7c0f3caa3295e51a4baf4ec3", "sha256": "796c0541b48346f2d3ba97ac7d1901b33ead2c14ac8f8b872fb32ff719ff1d25"}, "downloads": -1, "filename": "bijou-0.1.1.tar.gz", "has_sig": false, "md5_digest": "8d954ced7c0f3caa3295e51a4baf4ec3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 20290, "upload_time": "2020-02-05T15:47:26", "upload_time_iso_8601": "2020-02-05T15:47:26.971244Z", "url": "https://files.pythonhosted.org/packages/bd/f5/bf51763673bac3590f2849a41ddeb868636049cd432008a5a3b65318960f/bijou-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "0795d57f8c3db91ea93232219f5c5147", "sha256": "344a29216250beb482a8d918c1893ba1b2ba89f151b44939c8aff71620c4d425"}, "downloads": -1, "filename": "bijou-0.1.2-py3.7.egg", "has_sig": false, "md5_digest": "0795d57f8c3db91ea93232219f5c5147", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": ">=3.5", "size": 27218, "upload_time": "2020-02-12T16:38:20", "upload_time_iso_8601": "2020-02-12T16:38:20.547897Z", "url": "https://files.pythonhosted.org/packages/8b/ab/7f4bcef2fa9d0dc5034f9afcf54c3a9e08590ec8d1e79be10e978d65193d/bijou-0.1.2-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "8a471a37a875e81a606f4f1fe52ab68f", "sha256": "f18a7cb3c2748cdce42f8985efa4155a2444549c0dc8fc7eb6c452fbac910ef0"}, "downloads": -1, "filename": "bijou-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "8a471a37a875e81a606f4f1fe52ab68f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 31372, "upload_time": "2020-02-12T16:38:15", "upload_time_iso_8601": "2020-02-12T16:38:15.131338Z", "url": "https://files.pythonhosted.org/packages/69/75/175c9746c293ae9a52341c30461e69460b4ee21bc10ea691313c55cd85e7/bijou-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ea0643f35e84c7cd1fcd43cf8ed59b68", "sha256": "f844b4f47f51f72933c3d4558c40e102902215477f343051b1a650d77002b3d2"}, "downloads": -1, "filename": "bijou-0.1.2.tar.gz", "has_sig": false, "md5_digest": "ea0643f35e84c7cd1fcd43cf8ed59b68", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 24342, "upload_time": "2020-02-12T16:38:22", "upload_time_iso_8601": "2020-02-12T16:38:22.474046Z", "url": "https://files.pythonhosted.org/packages/e5/7c/4cfd8a4bb2290d6bb5873f2b032d1d204c9c3ec16451701087a1b7b14484/bijou-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0795d57f8c3db91ea93232219f5c5147", "sha256": "344a29216250beb482a8d918c1893ba1b2ba89f151b44939c8aff71620c4d425"}, "downloads": -1, "filename": "bijou-0.1.2-py3.7.egg", "has_sig": false, "md5_digest": "0795d57f8c3db91ea93232219f5c5147", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": ">=3.5", "size": 27218, "upload_time": "2020-02-12T16:38:20", "upload_time_iso_8601": "2020-02-12T16:38:20.547897Z", "url": "https://files.pythonhosted.org/packages/8b/ab/7f4bcef2fa9d0dc5034f9afcf54c3a9e08590ec8d1e79be10e978d65193d/bijou-0.1.2-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "8a471a37a875e81a606f4f1fe52ab68f", "sha256": "f18a7cb3c2748cdce42f8985efa4155a2444549c0dc8fc7eb6c452fbac910ef0"}, "downloads": -1, "filename": "bijou-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "8a471a37a875e81a606f4f1fe52ab68f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 31372, "upload_time": "2020-02-12T16:38:15", "upload_time_iso_8601": "2020-02-12T16:38:15.131338Z", "url": "https://files.pythonhosted.org/packages/69/75/175c9746c293ae9a52341c30461e69460b4ee21bc10ea691313c55cd85e7/bijou-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ea0643f35e84c7cd1fcd43cf8ed59b68", "sha256": "f844b4f47f51f72933c3d4558c40e102902215477f343051b1a650d77002b3d2"}, "downloads": -1, "filename": "bijou-0.1.2.tar.gz", "has_sig": false, "md5_digest": "ea0643f35e84c7cd1fcd43cf8ed59b68", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 24342, "upload_time": "2020-02-12T16:38:22", "upload_time_iso_8601": "2020-02-12T16:38:22.474046Z", "url": "https://files.pythonhosted.org/packages/e5/7c/4cfd8a4bb2290d6bb5873f2b032d1d204c9c3ec16451701087a1b7b14484/bijou-0.1.2.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:37:32 2020"}