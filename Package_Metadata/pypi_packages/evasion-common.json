{"info": {"author": "Oisin Mulvihill", "author_email": "oisinmulvihill at gmail dot com", "bugtrack_url": null, "classifiers": [], "description": "Evasion Common\n==============\n\n.. contents::\n\nEvasionProject code documentation\n---------------------------------\n\n  * http://www.evasionproject.com/apidocs/\n\n\nEvasionProject Wiki\n-------------------\n\n  * http://www.evasionproject.com/\n\n\nIntroduction\n------------\n\nThis package provides \"evasion.common\". This is a collection of useful functions\nand other utilities.\n\n\nevasion.common.net\n------------------\n\nget_free_port\n~~~~~~~~~~~~~\n\nFind a TCP port locally that is not in use and return it. This finds a random\nport in the range 2000 - 10000. It tests if it is available by binding to it. It\nthe closed the socket and return the port.\n\nThis is quite handy for getting a free port to run a service on while acceptance\ntesting.\n\nExample usage::\n\n    from evasion.common import net\n\n    # Get a free port:\n    port1 = net.get_free_port()\n\n    # Get another free port excluding the first port from the list\n    port1 = net.get_free_port(exclude_ports=[port1])\n\n\nwait_for_ready\n~~~~~~~~~~~~~~\n\nCalled to wait for a web application to respond to normal requests. This is\nuseful when you want to know a web app is not just bound to a socket, but is\nactually responding 200 OK to root page downloads.\n\nExample usage from unit tests::\n\n    from evasion.common import net\n    from evasion.common import webhelpers\n\n    port1 = net.get_free_port()\n\n    # Run the web app and wait for ready should connect:\n    web = webhelpers.BasicWeb(port=port1)\n    web.start()\n\n    result = net.wait_for_ready(web.uri)\n    assert result\n\n    web.stop()\n\n\nwait_for_service\n~~~~~~~~~~~~~~~~\n\nCalled to wait until a socket connection can be made to a remote service.\n\n\nExample usage from unit tests::\n\n    from evasion.common import net\n    from evasion.common import webhelpers\n\n    port1 = net.get_free_port()\n\n    # Run the web app and wait for ready should connect:\n    web = webhelpers.BasicWeb(port=port1)\n    web.start()\n\n    result = net.wait_for_service('localhost', port1)\n    assert result\n\n    web.stop()", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/oisinmulvihill/evasion-common/tarball/master#egg=evasion_common", "keywords": null, "license": "Evasion Project CDDL License", "maintainer": null, "maintainer_email": null, "name": "evasion-common", "package_url": "https://pypi.org/project/evasion-common/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/evasion-common/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/oisinmulvihill/evasion-common/tarball/master#egg=evasion_common"}, "release_url": "https://pypi.org/project/evasion-common/1.0.3/", "requires_dist": null, "requires_python": null, "summary": "Helper functions collected together from other evasion modules to aid reuse such as get_free_port() and wait_for_ready().", "version": "1.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#evasionproject-code-documentation\" id=\"id1\" rel=\"nofollow\">EvasionProject code documentation</a></li>\n<li><a href=\"#evasionproject-wiki\" id=\"id2\" rel=\"nofollow\">EvasionProject Wiki</a></li>\n<li><a href=\"#introduction\" id=\"id3\" rel=\"nofollow\">Introduction</a></li>\n<li><a href=\"#evasion-common-net\" id=\"id4\" rel=\"nofollow\">evasion.common.net</a><ul>\n<li><a href=\"#get-free-port\" id=\"id5\" rel=\"nofollow\">get_free_port</a></li>\n<li><a href=\"#wait-for-ready\" id=\"id6\" rel=\"nofollow\">wait_for_ready</a></li>\n<li><a href=\"#wait-for-service\" id=\"id7\" rel=\"nofollow\">wait_for_service</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"evasionproject-code-documentation\">\n<h2><a href=\"#id1\" rel=\"nofollow\">EvasionProject code documentation</a></h2>\n<blockquote>\n<ul>\n<li><a href=\"http://www.evasionproject.com/apidocs/\" rel=\"nofollow\">http://www.evasionproject.com/apidocs/</a></li>\n</ul>\n</blockquote>\n</div>\n<div id=\"evasionproject-wiki\">\n<h2><a href=\"#id2\" rel=\"nofollow\">EvasionProject Wiki</a></h2>\n<blockquote>\n<ul>\n<li><a href=\"http://www.evasionproject.com/\" rel=\"nofollow\">http://www.evasionproject.com/</a></li>\n</ul>\n</blockquote>\n</div>\n<div id=\"introduction\">\n<h2><a href=\"#id3\" rel=\"nofollow\">Introduction</a></h2>\n<p>This package provides \u201cevasion.common\u201d. This is a collection of useful functions\nand other utilities.</p>\n</div>\n<div id=\"evasion-common-net\">\n<h2><a href=\"#id4\" rel=\"nofollow\">evasion.common.net</a></h2>\n<div id=\"get-free-port\">\n<h3><a href=\"#id5\" rel=\"nofollow\">get_free_port</a></h3>\n<p>Find a TCP port locally that is not in use and return it. This finds a random\nport in the range 2000 - 10000. It tests if it is available by binding to it. It\nthe closed the socket and return the port.</p>\n<p>This is quite handy for getting a free port to run a service on while acceptance\ntesting.</p>\n<p>Example usage:</p>\n<pre>from evasion.common import net\n\n# Get a free port:\nport1 = net.get_free_port()\n\n# Get another free port excluding the first port from the list\nport1 = net.get_free_port(exclude_ports=[port1])\n</pre>\n</div>\n<div id=\"wait-for-ready\">\n<h3><a href=\"#id6\" rel=\"nofollow\">wait_for_ready</a></h3>\n<p>Called to wait for a web application to respond to normal requests. This is\nuseful when you want to know a web app is not just bound to a socket, but is\nactually responding 200 OK to root page downloads.</p>\n<p>Example usage from unit tests:</p>\n<pre>from evasion.common import net\nfrom evasion.common import webhelpers\n\nport1 = net.get_free_port()\n\n# Run the web app and wait for ready should connect:\nweb = webhelpers.BasicWeb(port=port1)\nweb.start()\n\nresult = net.wait_for_ready(web.uri)\nassert result\n\nweb.stop()\n</pre>\n</div>\n<div id=\"wait-for-service\">\n<h3><a href=\"#id7\" rel=\"nofollow\">wait_for_service</a></h3>\n<p>Called to wait until a socket connection can be made to a remote service.</p>\n<p>Example usage from unit tests:</p>\n<pre>from evasion.common import net\nfrom evasion.common import webhelpers\n\nport1 = net.get_free_port()\n\n# Run the web app and wait for ready should connect:\nweb = webhelpers.BasicWeb(port=port1)\nweb.start()\n\nresult = net.wait_for_service('localhost', port1)\nassert result\n\nweb.stop()\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 862582, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "5e8b329641b5f11eb186a6421c7c593d", "sha256": "0f62eabfebfc2d5420156c9fbd8e0402442251533df20362290d963f38a103ef"}, "downloads": -1, "filename": "evasion_common-1.0.0-py2.7.egg", "has_sig": false, "md5_digest": "5e8b329641b5f11eb186a6421c7c593d", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 9178, "upload_time": "2012-01-20T11:53:55", "upload_time_iso_8601": "2012-01-20T11:53:55.721128Z", "url": "https://files.pythonhosted.org/packages/d6/94/cb4fe9ec40ed65ec74d502a7ddfac7af224231c122a2431bc47617c7c71c/evasion_common-1.0.0-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "85309f169f03acf9c64e650f56e53e5f", "sha256": "f6cf53a886850941c67da237d757490bcdb499ff004b8f536929a706fac070fd"}, "downloads": -1, "filename": "evasion-common-1.0.0.tar.gz", "has_sig": false, "md5_digest": "85309f169f03acf9c64e650f56e53e5f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3843, "upload_time": "2012-01-20T11:53:55", "upload_time_iso_8601": "2012-01-20T11:53:55.423166Z", "url": "https://files.pythonhosted.org/packages/d7/4f/38749b0331195289a1b5b45e4864405f5aa74b4e9eef23c200c605431e58/evasion-common-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "6635d92cd043c0aa00d4aa3ce8164c64", "sha256": "7350835b99b1929772b1853ad04059e24760739ef6b55ff93373e80e0b924650"}, "downloads": -1, "filename": "evasion_common-1.0.1-py2.7.egg", "has_sig": false, "md5_digest": "6635d92cd043c0aa00d4aa3ce8164c64", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 18390, "upload_time": "2012-01-27T17:52:53", "upload_time_iso_8601": "2012-01-27T17:52:53.010472Z", "url": "https://files.pythonhosted.org/packages/38/da/377e476230b0ea119d8840a29da5356868a09e08cb94fa9c67136f4c583b/evasion_common-1.0.1-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "0a09e8f5809dfaa4f7868e8cea3b6a4b", "sha256": "f1f436be97a8959cbbda64e00c33cba227be614b462bc5b37f6a5e781fe2e67e"}, "downloads": -1, "filename": "evasion-common-1.0.1.tar.gz", "has_sig": false, "md5_digest": "0a09e8f5809dfaa4f7868e8cea3b6a4b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6877, "upload_time": "2012-01-27T17:52:52", "upload_time_iso_8601": "2012-01-27T17:52:52.199184Z", "url": "https://files.pythonhosted.org/packages/96/b0/8f9636302fc1540f7182aad2e63b038ce08805f87e03475fb6890a8245ba/evasion-common-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "6e43210d16d04e92f8867cabecea0382", "sha256": "8199d549ad960df7438ffa851c441116b1833c505b06e638e5ee85929bc6aebe"}, "downloads": -1, "filename": "evasion-common-1.0.2.tar.gz", "has_sig": false, "md5_digest": "6e43210d16d04e92f8867cabecea0382", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6913, "upload_time": "2012-11-08T10:17:04", "upload_time_iso_8601": "2012-11-08T10:17:04.632778Z", "url": "https://files.pythonhosted.org/packages/af/a8/d8f1f11f5ca608ca287b46b9bf491866fcec8f285ccf348780955cf8744b/evasion-common-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "a563dcb2d4897436b4c64fe481093892", "sha256": "f677bab3b83b25470af091a39db247aa395c55d44fdd9651f71c5eba4b0c3138"}, "downloads": -1, "filename": "evasion-common-1.0.3.tar.gz", "has_sig": false, "md5_digest": "a563dcb2d4897436b4c64fe481093892", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7084, "upload_time": "2013-09-11T10:18:20", "upload_time_iso_8601": "2013-09-11T10:18:20.265360Z", "url": "https://files.pythonhosted.org/packages/fa/94/8948120dc09a3cb8d0ef618ab1a96810ab614a0b14765817d46c94d17fc5/evasion-common-1.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a563dcb2d4897436b4c64fe481093892", "sha256": "f677bab3b83b25470af091a39db247aa395c55d44fdd9651f71c5eba4b0c3138"}, "downloads": -1, "filename": "evasion-common-1.0.3.tar.gz", "has_sig": false, "md5_digest": "a563dcb2d4897436b4c64fe481093892", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7084, "upload_time": "2013-09-11T10:18:20", "upload_time_iso_8601": "2013-09-11T10:18:20.265360Z", "url": "https://files.pythonhosted.org/packages/fa/94/8948120dc09a3cb8d0ef618ab1a96810ab614a0b14765817d46c94d17fc5/evasion-common-1.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:17 2020"}