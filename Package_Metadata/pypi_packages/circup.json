{"info": {"author": "Adafruit Industries", "author_email": "ntoll@ntoll.org", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: Education", "License :: OSI Approved :: MIT License", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Education", "Topic :: Software Development :: Embedded Systems", "Topic :: System :: Software Distribution"], "description": "CircUp\n======\n\nA tool to manage and update libraries (modules) on a CircuitPython device.\n\n.. contents::\n\nInstallation\n------------\n\nCircup requires Python 3.5 or higher.\n\nIn a `virtualenv <https://virtualenv.pypa.io/en/latest/>`_,\n``pip install circup`` should do the trick. This is the simplest way to make it\nwork.\n\nIf you have no idea what a virtualenv is, try the following command,\n``pip3 install --user circup``.\n\n.. note::\n\n    If you use the ``pip3`` command to install CircUp you must make sure that\n    your path contains the directory into which the script will be installed.\n    To discover this path,\n\n    * On Unix-like systems, type ``python3 -m site --user-base`` and append\n      ``bin`` to the resulting path.\n    * On Windows, type the same command, but append ``Scripts`` to the\n      resulting path.\n\nWhat?\n-----\n\nEach CircuitPython library on the device (``.py``, *NOT* ``.mpy`` at this time)\nusually has a version number as metadata within the module.\n\nThis utility looks at all the libraries on the device and checks if they are\nthe most recent (compared to the versions found in the most recent version of\nthe Adafruit CircuitPython Bundle). If the libraries are out of date, the\nutility helps you update them.\n\nThe Adafruit CircuitPython Bundle can be found here:\n\nhttps://github.com/adafruit/Adafruit_CircuitPython_Bundle/releases/latest\n\nFull details of these libraries, what they're for and how to get them, can be\nfound here:\n\nhttps://circuitpython.org/libraries\n\nUsage\n-----\n\nFirst, plug in a device running CircuiPython. This should appear as a mounted\nstorage device called ``CIRCUITPYTHON``.\n\nTo get help, just type the command::\n\n    $ circup\n    Usage: circup [OPTIONS] COMMAND [ARGS]...\n\n      A tool to manage and update libraries on a CircuitPython device.\n\n    Options:\n      --verbose         Comprehensive logging is sent to stdout.\n      --version         Show the version and exit.\n      --help            Show this message and exit.\n      -r --requirement  Supports requirements.txt tracking of library\n                        requirements with freeze and install commands.\n\n    Commands:\n      freeze     Output details of all the modules found on the connected...\n      install    Install a named module onto the device.\n      list       Lists all out of date modules found on the connected...\n      show       Show a list of available modules in the bundle.\n      uninstall  Uninstall a named module(s) from the connected device.\n      update     Update modules on the device. Use --all to automatically update\n                 all modules.\n\n\nTo show version information for all the modules currently on a connected\nCIRCUITPYTHON device::\n\n    $ circup freeze\n    adafruit_binascii==v1.0\n    adafruit_bme280==2.3.1\n    adafruit_ble==1.0.2\n\nWith :code:`$ circup freeze -r`, Circup will save, in the current working directory,\na requirements.txt file with a list of all modules currently installed on the\nconnected device.\n\nTo list all the modules that require an update::\n\n    $ circup list\n    The following modules are out of date or probably need an update.\n\n    Module             Version  Latest   \n    ------------------ -------- -------- \n    adafruit_binascii  v1.0     1.0.1    \n    adafruit_ble       1.0.2    4.0\n\nTo interactively update the out-of-date modules::\n\n    $ circup update\n    Found 3 module[s] needing update.\n    Please indicate which modules you wish to update:\n\n    Update 'adafruit_binascii'? [y/N]: Y\n    OK\n    Update 'adafruit_ble'? [y/N]: Y\n    OK\n\nInstall a module onto the connected device with::\n\n    $ circup install adafruit_thermal_printer\n    Installed 'adafruit_thermal_printer'.\n\nYou can also install a list of modules from a requirements.txt file in\nthe current working directory with::\n\n    $ circup install -r requirements.txt\n    Installed 'adafruit_bmp280'.\n    Installed 'adafruit_lis3mdl'.\n    Installed 'adafruit_lsm6ds'.\n    Installed 'adafruit_sht31d'.\n    Installed 'neopixel'.\n\nUninstall a module like this::\n\n    $ circup uninstall adafruit_thermal_printer\n    Uninstalled 'adafruit_thermal_printer'.\n\nUse the ``--verbose`` flag to see the logs as the command is working::\n\n    $ circup --verbose freeze\n    Logging to /home/ntoll/.cache/circup/log/circup.log\n\n    INFO: Started 2019-09-05 13:13:41.031822\n    INFO: Freeze\n    INFO: Found device: /media/ntoll/CIRCUITPY\n    ... etc ...\n\nFinally, the ``--version`` flag will tell you the current version of the\n``circup`` command itself::\n\n    $ circup --version\n    CircUp, A CircuitPython module updater. Version 0.0.1\n\nThat's it!\n\n.. note::\n\n    If you find a bug, or you want to suggest an enhancement or new feature\n    feel free to create an issue or submit a pull request here:\n\n    https://github.com/adafruit/circup\n\nDeveloper Setup\n---------------\n\n.. note::\n\n    Please try to use Python 3.6+ while developing CircUp. This is so we can\n    use the\n    `Black code formatter <https://black.readthedocs.io/en/stable/index.html>`_\n    (which only works with Python 3.6+).\n\nClone the repository then make a virtualenv. From the root of the project,\ninstall the requirements::\n\n    pip install -e \".[dev]\"\n\nRun the test suite::\n\n    make check\n\n.. warning::\n\n    Whenever you run ``make check``, to ensure the test suite starts from a\n    known clean state, all auto-generated assets are deleted. This includes\n    assets generated by running ``pip install -e \".[dev]\"``, including the\n    ``circup`` command itself. Simply re-run ``pip`` to re-generate the\n    assets.\n\nThere is a Makefile that helps with most of the common workflows associated\nwith development. Typing \"make\" on its own will list the options thus::\n\n    $ make\n\n    There is no default Makefile target right now. Try:\n\n    make clean - reset the project and remove auto-generated assets.\n    make pyflakes - run the PyFlakes code checker.\n    make pycodestyle - run the PEP8 style checker.\n    make test - run the test suite.\n    make coverage - view a report on test coverage.\n    make tidy - tidy code with the 'black' formatter.\n    make check - run all the checkers and tests.\n    make dist - make a dist/wheel for the project.\n    make publish-test - publish the project to PyPI test instance.\n    make publish-live - publish the project to PyPI production.\n    make docs - run sphinx to create project documentation.\n\n.. note::\n\n    On Windows there is a ``make.cmd`` file that calls ``make.py``: a script\n    that works in a similar way to the ``make`` command on Unix-like operating\n    systems. Typing ``make`` will display help for the various commands it\n    provides that are equivalent of those in the Unix Makefile.\n\nHow?\n####\n\nThe ``circup`` tool checks for a connected CircuitPython device by\ninterrogating the local filesystem to find a path to a directory which ends\nwith ``\"CIRCUITPYTHON\"`` (the name under which a CircuitPython device is\nmounted by the host operating system). This is handled in the ``find_device``\nfunction.\n\nA Python module on a connected device is represented by an instance of the\n``Module`` class. This class provides useful methods for discerning if the\nmodule is out of date, returning useful representations of it in order to\ndisplay information to the user, or updating the module on the connected\ndevice with whatever the version is in the latest Adafruit CircuitPython\nBundle.\n\nAll of the libraries included in the Adafruit CircuitPython Bundle contain,\nsomewhere within their code, two metadata objects called ``__version__`` and\n``__repo__``.\n\nThe ``__repo__`` object is a string containing the GitHub repository URL, as\nused to clone the project.\n\nThe ``__version__`` object is interesting because *within the source code in\nGit* the value is **always** the string ``\"0.0.0-auto.0\"``. When a new release\nis made of the bundle, this value is automatically replaced by the build\nscripts to the correct version information, which will always conform to the\n`semver standard <https://semver.org/>`_.\n\nGiven this context, the ``circup`` tool will check a configuration file\nto discern what *it* thinks is the latest version of the bundle. If there is\nno configuration file (for example, on first run), then the bundle version is\nassumed to be ``\"0\"``.\n\nNext, it checks GitHub for the tag value (denoting the version) of the very\nlatest bundle release. Bundle versions are based upon the date of release, for\ninstance ``\"20190904\"``. If the latest version on GitHub is later than the\nversion ``circup`` currently has, then the latest version of the bundle\nis automatically downloaded and cached away somewhere.\n\nIn this way, the ``circup`` tool is able to have available to it both a path\nto a connected CIRCUITPYTHON devce and a copy of the latest version, including\nthe all important version information, of the Adafruit CircuitPython Bundle.\n\nExactly the same function (``get_modules``) is used to extract the metadata\nfrom the modules on both the connected device and in the bundle cache. This\nmetadata is used to instantiate instances of the ``Module`` class which is\nsubsequently used to facilitate the various commands the tool makes available.\n\nThese commands are defined at the very end of the ``circup.py`` code.\n\nUnit tests can be found in the ``tests`` directory. CircUp uses\n`pytest <http://www.pytest.org/en/latest/>`_ style testing conventions. Test\nfunctions should include a comment to describe its *intention*. We currently\nhave 100% unit test coverage for all the core functionality (excluding\nfunctions used to define the CLI commands).\n\nTo run the full test suite, type::\n\n    make check\n\nAll code is formatted using the stylistic conventions enforced by\n`black <https://black.readthedocs.io/en/stable/>`_. The tidying of code\nformatting is part of the ``make check`` process, but you can also just use::\n\n    make tidy\n\nPlease see the output from ``make`` for more information about the various\navailable options to help you work with the code base. TL;DR ``make check``\nruns everything.\n\nBefore submitting a PR, please remember to ``make check``. ;-)\n\nCircUp uses the `Click <https://click.palletsprojects.com/en/7.x/>`_ module to\nrun command-line interaction. The\n`AppDirs <https://pypi.org/project/appdirs/>`_ module is used to determine\nwhere to store user-specific assets created by the tool in such a way that\nmeets the host operating system's usual conventions. The\n`python-semver <https://github.com/k-bx/python-semver>`_ package is used to\nvalidate and compare the semver values associated with modules. The ubiquitous\n`requests <http://python-requests.org/>`_ module is used for HTTP activity.\n\nDocumentation, generated by `Sphinx <http://www.sphinx-doc.org/en/master/>`_,\nis based on this README and assembled by assets in the ``doc`` subdirectory.\nThe latest version of the docs will be found on\n`Read the Docs <https://circup.readthedocs.io/>`_.\n\nDiscussion of this tool happens on the Adafruit CircuitPython\n`Discord channel <https://discord.gg/rqrKDjU>`_.\n\n\nRelease History\n===============\n\n0.0.8\n-----\n\n* Added requirements.txt support to both freeze and install commands. Many thanks to Steven Abadie for this really useful feature.\n\n0.0.7\n-----\n\nTwo new features contributed from the community:\n\n* Run circup via ``python -m circup``. Thank you to Joe DeVivo for this contribution.\n* Add an uninstall command. Thank you to Steven Abadie for this new feature.\n\n0.0.6\n-----\n\nThis release includes a security fix\n\n\n0.0.5\n-----\n\nFixed error message when Bundle Unavailable\n\n* Error message when bundle unavailable is better\n* Fixed a couple types\n\n\n0.0.4\n-----\n\nAdded install and show commands\n\n* Circup now has an install command to install a CircuitPython library onto your device.\n* It also has a show command to show you what is available.\n\n0.0.3\n-----\n\nAutomated Release Deployment Bug Fix\n\n* Fix missing PyPI egg dependency\n\n0.0.2\n-----\n\nInitial PyPI Release Automation w/ TravisCI\n\n* Add Continuous Integration with TravisCI\n* Deploy ``circup`` releases to PyPI automatically with TravisCI\n\n0.0.1\n-----\n\nInitial release.\n\n* Core project scaffolding.\n* ``circup freeze`` - lists version details for all modules found on the\n  connected CIRCUITPYTHON device.\n* ``circup list`` - lists all modules requiring an update found on the the\n  connected CIRCUITPYTHON device.\n* ``circup update`` - interactively update out-of-date modules found on the\n  connected CIRCUITPYTHON device.\n* 100% test coverage.\n* Documentation.", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/adafruit/circup", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "circup", "package_url": "https://pypi.org/project/circup/", "platform": "", "project_url": "https://pypi.org/project/circup/", "project_urls": {"Homepage": "https://github.com/adafruit/circup"}, "release_url": "https://pypi.org/project/circup/0.1.0/", "requires_dist": null, "requires_python": "", "summary": "A tool to manage/update libraries on CircuitPython devices.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"circup\">\n<h2><a href=\"#id9\" rel=\"nofollow\">CircUp</a></h2>\n<p>A tool to manage and update libraries (modules) on a CircuitPython device.</p>\n<div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#circup\" id=\"id9\" rel=\"nofollow\">CircUp</a><ul>\n<li><a href=\"#installation\" id=\"id10\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#what\" id=\"id11\" rel=\"nofollow\">What?</a></li>\n<li><a href=\"#usage\" id=\"id12\" rel=\"nofollow\">Usage</a></li>\n<li><a href=\"#developer-setup\" id=\"id13\" rel=\"nofollow\">Developer Setup</a><ul>\n<li><a href=\"#how\" id=\"id14\" rel=\"nofollow\">How?</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#release-history\" id=\"id15\" rel=\"nofollow\">Release History</a><ul>\n<li><a href=\"#id1\" id=\"id16\" rel=\"nofollow\">0.0.8</a></li>\n<li><a href=\"#id2\" id=\"id17\" rel=\"nofollow\">0.0.7</a></li>\n<li><a href=\"#id3\" id=\"id18\" rel=\"nofollow\">0.0.6</a></li>\n<li><a href=\"#id4\" id=\"id19\" rel=\"nofollow\">0.0.5</a></li>\n<li><a href=\"#id5\" id=\"id20\" rel=\"nofollow\">0.0.4</a></li>\n<li><a href=\"#id6\" id=\"id21\" rel=\"nofollow\">0.0.3</a></li>\n<li><a href=\"#id7\" id=\"id22\" rel=\"nofollow\">0.0.2</a></li>\n<li><a href=\"#id8\" id=\"id23\" rel=\"nofollow\">0.0.1</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h3><a href=\"#id10\" rel=\"nofollow\">Installation</a></h3>\n<p>Circup requires Python 3.5 or higher.</p>\n<p>In a <a href=\"https://virtualenv.pypa.io/en/latest/\" rel=\"nofollow\">virtualenv</a>,\n<tt>pip install circup</tt> should do the trick. This is the simplest way to make it\nwork.</p>\n<p>If you have no idea what a virtualenv is, try the following command,\n<tt>pip3 install <span class=\"pre\">--user</span> circup</tt>.</p>\n<div>\n<p>Note</p>\n<p>If you use the <tt>pip3</tt> command to install CircUp you must make sure that\nyour path contains the directory into which the script will be installed.\nTo discover this path,</p>\n<ul>\n<li>On Unix-like systems, type <tt>python3 <span class=\"pre\">-m</span> site <span class=\"pre\">--user-base</span></tt> and append\n<tt>bin</tt> to the resulting path.</li>\n<li>On Windows, type the same command, but append <tt>Scripts</tt> to the\nresulting path.</li>\n</ul>\n</div>\n</div>\n<div id=\"what\">\n<h3><a href=\"#id11\" rel=\"nofollow\">What?</a></h3>\n<p>Each CircuitPython library on the device (<tt>.py</tt>, <em>NOT</em> <tt>.mpy</tt> at this time)\nusually has a version number as metadata within the module.</p>\n<p>This utility looks at all the libraries on the device and checks if they are\nthe most recent (compared to the versions found in the most recent version of\nthe Adafruit CircuitPython Bundle). If the libraries are out of date, the\nutility helps you update them.</p>\n<p>The Adafruit CircuitPython Bundle can be found here:</p>\n<p><a href=\"https://github.com/adafruit/Adafruit_CircuitPython_Bundle/releases/latest\" rel=\"nofollow\">https://github.com/adafruit/Adafruit_CircuitPython_Bundle/releases/latest</a></p>\n<p>Full details of these libraries, what they\u2019re for and how to get them, can be\nfound here:</p>\n<p><a href=\"https://circuitpython.org/libraries\" rel=\"nofollow\">https://circuitpython.org/libraries</a></p>\n</div>\n<div id=\"usage\">\n<h3><a href=\"#id12\" rel=\"nofollow\">Usage</a></h3>\n<p>First, plug in a device running CircuiPython. This should appear as a mounted\nstorage device called <tt>CIRCUITPYTHON</tt>.</p>\n<p>To get help, just type the command:</p>\n<pre>$ circup\nUsage: circup [OPTIONS] COMMAND [ARGS]...\n\n  A tool to manage and update libraries on a CircuitPython device.\n\nOptions:\n  --verbose         Comprehensive logging is sent to stdout.\n  --version         Show the version and exit.\n  --help            Show this message and exit.\n  -r --requirement  Supports requirements.txt tracking of library\n                    requirements with freeze and install commands.\n\nCommands:\n  freeze     Output details of all the modules found on the connected...\n  install    Install a named module onto the device.\n  list       Lists all out of date modules found on the connected...\n  show       Show a list of available modules in the bundle.\n  uninstall  Uninstall a named module(s) from the connected device.\n  update     Update modules on the device. Use --all to automatically update\n             all modules.\n</pre>\n<p>To show version information for all the modules currently on a connected\nCIRCUITPYTHON device:</p>\n<pre>$ circup freeze\nadafruit_binascii==v1.0\nadafruit_bme280==2.3.1\nadafruit_ble==1.0.2\n</pre>\n<p>With <code>$ circup freeze -r</code>, Circup will save, in the current working directory,\na requirements.txt file with a list of all modules currently installed on the\nconnected device.</p>\n<p>To list all the modules that require an update:</p>\n<pre>$ circup list\nThe following modules are out of date or probably need an update.\n\nModule             Version  Latest\n------------------ -------- --------\nadafruit_binascii  v1.0     1.0.1\nadafruit_ble       1.0.2    4.0\n</pre>\n<p>To interactively update the out-of-date modules:</p>\n<pre>$ circup update\nFound 3 module[s] needing update.\nPlease indicate which modules you wish to update:\n\nUpdate 'adafruit_binascii'? [y/N]: Y\nOK\nUpdate 'adafruit_ble'? [y/N]: Y\nOK\n</pre>\n<p>Install a module onto the connected device with:</p>\n<pre>$ circup install adafruit_thermal_printer\nInstalled 'adafruit_thermal_printer'.\n</pre>\n<p>You can also install a list of modules from a requirements.txt file in\nthe current working directory with:</p>\n<pre>$ circup install -r requirements.txt\nInstalled 'adafruit_bmp280'.\nInstalled 'adafruit_lis3mdl'.\nInstalled 'adafruit_lsm6ds'.\nInstalled 'adafruit_sht31d'.\nInstalled 'neopixel'.\n</pre>\n<p>Uninstall a module like this:</p>\n<pre>$ circup uninstall adafruit_thermal_printer\nUninstalled 'adafruit_thermal_printer'.\n</pre>\n<p>Use the <tt><span class=\"pre\">--verbose</span></tt> flag to see the logs as the command is working:</p>\n<pre>$ circup --verbose freeze\nLogging to /home/ntoll/.cache/circup/log/circup.log\n\nINFO: Started 2019-09-05 13:13:41.031822\nINFO: Freeze\nINFO: Found device: /media/ntoll/CIRCUITPY\n... etc ...\n</pre>\n<p>Finally, the <tt><span class=\"pre\">--version</span></tt> flag will tell you the current version of the\n<tt>circup</tt> command itself:</p>\n<pre>$ circup --version\nCircUp, A CircuitPython module updater. Version 0.0.1\n</pre>\n<p>That\u2019s it!</p>\n<div>\n<p>Note</p>\n<p>If you find a bug, or you want to suggest an enhancement or new feature\nfeel free to create an issue or submit a pull request here:</p>\n<p><a href=\"https://github.com/adafruit/circup\" rel=\"nofollow\">https://github.com/adafruit/circup</a></p>\n</div>\n</div>\n<div id=\"developer-setup\">\n<h3><a href=\"#id13\" rel=\"nofollow\">Developer Setup</a></h3>\n<div>\n<p>Note</p>\n<p>Please try to use Python 3.6+ while developing CircUp. This is so we can\nuse the\n<a href=\"https://black.readthedocs.io/en/stable/index.html\" rel=\"nofollow\">Black code formatter</a>\n(which only works with Python 3.6+).</p>\n</div>\n<p>Clone the repository then make a virtualenv. From the root of the project,\ninstall the requirements:</p>\n<pre>pip install -e \".[dev]\"\n</pre>\n<p>Run the test suite:</p>\n<pre>make check\n</pre>\n<div>\n<p>Warning</p>\n<p>Whenever you run <tt>make check</tt>, to ensure the test suite starts from a\nknown clean state, all auto-generated assets are deleted. This includes\nassets generated by running <tt>pip install <span class=\"pre\">-e</span> <span class=\"pre\">\".[dev]\"</span></tt>, including the\n<tt>circup</tt> command itself. Simply re-run <tt>pip</tt> to re-generate the\nassets.</p>\n</div>\n<p>There is a Makefile that helps with most of the common workflows associated\nwith development. Typing \u201cmake\u201d on its own will list the options thus:</p>\n<pre>$ make\n\nThere is no default Makefile target right now. Try:\n\nmake clean - reset the project and remove auto-generated assets.\nmake pyflakes - run the PyFlakes code checker.\nmake pycodestyle - run the PEP8 style checker.\nmake test - run the test suite.\nmake coverage - view a report on test coverage.\nmake tidy - tidy code with the 'black' formatter.\nmake check - run all the checkers and tests.\nmake dist - make a dist/wheel for the project.\nmake publish-test - publish the project to PyPI test instance.\nmake publish-live - publish the project to PyPI production.\nmake docs - run sphinx to create project documentation.\n</pre>\n<div>\n<p>Note</p>\n<p>On Windows there is a <tt>make.cmd</tt> file that calls <tt>make.py</tt>: a script\nthat works in a similar way to the <tt>make</tt> command on Unix-like operating\nsystems. Typing <tt>make</tt> will display help for the various commands it\nprovides that are equivalent of those in the Unix Makefile.</p>\n</div>\n<div id=\"how\">\n<h4><a href=\"#id14\" rel=\"nofollow\">How?</a></h4>\n<p>The <tt>circup</tt> tool checks for a connected CircuitPython device by\ninterrogating the local filesystem to find a path to a directory which ends\nwith <tt>\"CIRCUITPYTHON\"</tt> (the name under which a CircuitPython device is\nmounted by the host operating system). This is handled in the <tt>find_device</tt>\nfunction.</p>\n<p>A Python module on a connected device is represented by an instance of the\n<tt>Module</tt> class. This class provides useful methods for discerning if the\nmodule is out of date, returning useful representations of it in order to\ndisplay information to the user, or updating the module on the connected\ndevice with whatever the version is in the latest Adafruit CircuitPython\nBundle.</p>\n<p>All of the libraries included in the Adafruit CircuitPython Bundle contain,\nsomewhere within their code, two metadata objects called <tt>__version__</tt> and\n<tt>__repo__</tt>.</p>\n<p>The <tt>__repo__</tt> object is a string containing the GitHub repository URL, as\nused to clone the project.</p>\n<p>The <tt>__version__</tt> object is interesting because <em>within the source code in\nGit</em> the value is <strong>always</strong> the string <tt><span class=\"pre\">\"0.0.0-auto.0\"</span></tt>. When a new release\nis made of the bundle, this value is automatically replaced by the build\nscripts to the correct version information, which will always conform to the\n<a href=\"https://semver.org/\" rel=\"nofollow\">semver standard</a>.</p>\n<p>Given this context, the <tt>circup</tt> tool will check a configuration file\nto discern what <em>it</em> thinks is the latest version of the bundle. If there is\nno configuration file (for example, on first run), then the bundle version is\nassumed to be <tt>\"0\"</tt>.</p>\n<p>Next, it checks GitHub for the tag value (denoting the version) of the very\nlatest bundle release. Bundle versions are based upon the date of release, for\ninstance <tt>\"20190904\"</tt>. If the latest version on GitHub is later than the\nversion <tt>circup</tt> currently has, then the latest version of the bundle\nis automatically downloaded and cached away somewhere.</p>\n<p>In this way, the <tt>circup</tt> tool is able to have available to it both a path\nto a connected CIRCUITPYTHON devce and a copy of the latest version, including\nthe all important version information, of the Adafruit CircuitPython Bundle.</p>\n<p>Exactly the same function (<tt>get_modules</tt>) is used to extract the metadata\nfrom the modules on both the connected device and in the bundle cache. This\nmetadata is used to instantiate instances of the <tt>Module</tt> class which is\nsubsequently used to facilitate the various commands the tool makes available.</p>\n<p>These commands are defined at the very end of the <tt>circup.py</tt> code.</p>\n<p>Unit tests can be found in the <tt>tests</tt> directory. CircUp uses\n<a href=\"http://www.pytest.org/en/latest/\" rel=\"nofollow\">pytest</a> style testing conventions. Test\nfunctions should include a comment to describe its <em>intention</em>. We currently\nhave 100% unit test coverage for all the core functionality (excluding\nfunctions used to define the CLI commands).</p>\n<p>To run the full test suite, type:</p>\n<pre>make check\n</pre>\n<p>All code is formatted using the stylistic conventions enforced by\n<a href=\"https://black.readthedocs.io/en/stable/\" rel=\"nofollow\">black</a>. The tidying of code\nformatting is part of the <tt>make check</tt> process, but you can also just use:</p>\n<pre>make tidy\n</pre>\n<p>Please see the output from <tt>make</tt> for more information about the various\navailable options to help you work with the code base. TL;DR <tt>make check</tt>\nruns everything.</p>\n<p>Before submitting a PR, please remember to <tt>make check</tt>. ;-)</p>\n<p>CircUp uses the <a href=\"https://click.palletsprojects.com/en/7.x/\" rel=\"nofollow\">Click</a> module to\nrun command-line interaction. The\n<a href=\"https://pypi.org/project/appdirs/\" rel=\"nofollow\">AppDirs</a> module is used to determine\nwhere to store user-specific assets created by the tool in such a way that\nmeets the host operating system\u2019s usual conventions. The\n<a href=\"https://github.com/k-bx/python-semver\" rel=\"nofollow\">python-semver</a> package is used to\nvalidate and compare the semver values associated with modules. The ubiquitous\n<a href=\"http://python-requests.org/\" rel=\"nofollow\">requests</a> module is used for HTTP activity.</p>\n<p>Documentation, generated by <a href=\"http://www.sphinx-doc.org/en/master/\" rel=\"nofollow\">Sphinx</a>,\nis based on this README and assembled by assets in the <tt>doc</tt> subdirectory.\nThe latest version of the docs will be found on\n<a href=\"https://circup.readthedocs.io/\" rel=\"nofollow\">Read the Docs</a>.</p>\n<p>Discussion of this tool happens on the Adafruit CircuitPython\n<a href=\"https://discord.gg/rqrKDjU\" rel=\"nofollow\">Discord channel</a>.</p>\n</div>\n</div>\n</div>\n<div id=\"release-history\">\n<h2><a href=\"#id15\" rel=\"nofollow\">Release History</a></h2>\n<div id=\"id1\">\n<h3><a href=\"#id16\" rel=\"nofollow\">0.0.8</a></h3>\n<ul>\n<li>Added requirements.txt support to both freeze and install commands. Many thanks to Steven Abadie for this really useful feature.</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3><a href=\"#id17\" rel=\"nofollow\">0.0.7</a></h3>\n<p>Two new features contributed from the community:</p>\n<ul>\n<li>Run circup via <tt>python <span class=\"pre\">-m</span> circup</tt>. Thank you to Joe DeVivo for this contribution.</li>\n<li>Add an uninstall command. Thank you to Steven Abadie for this new feature.</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3><a href=\"#id18\" rel=\"nofollow\">0.0.6</a></h3>\n<p>This release includes a security fix</p>\n</div>\n<div id=\"id4\">\n<h3><a href=\"#id19\" rel=\"nofollow\">0.0.5</a></h3>\n<p>Fixed error message when Bundle Unavailable</p>\n<ul>\n<li>Error message when bundle unavailable is better</li>\n<li>Fixed a couple types</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3><a href=\"#id20\" rel=\"nofollow\">0.0.4</a></h3>\n<p>Added install and show commands</p>\n<ul>\n<li>Circup now has an install command to install a CircuitPython library onto your device.</li>\n<li>It also has a show command to show you what is available.</li>\n</ul>\n</div>\n<div id=\"id6\">\n<h3><a href=\"#id21\" rel=\"nofollow\">0.0.3</a></h3>\n<p>Automated Release Deployment Bug Fix</p>\n<ul>\n<li>Fix missing PyPI egg dependency</li>\n</ul>\n</div>\n<div id=\"id7\">\n<h3><a href=\"#id22\" rel=\"nofollow\">0.0.2</a></h3>\n<p>Initial PyPI Release Automation w/ TravisCI</p>\n<ul>\n<li>Add Continuous Integration with TravisCI</li>\n<li>Deploy <tt>circup</tt> releases to PyPI automatically with TravisCI</li>\n</ul>\n</div>\n<div id=\"id8\">\n<h3><a href=\"#id23\" rel=\"nofollow\">0.0.1</a></h3>\n<p>Initial release.</p>\n<ul>\n<li>Core project scaffolding.</li>\n<li><tt>circup freeze</tt> - lists version details for all modules found on the\nconnected CIRCUITPYTHON device.</li>\n<li><tt>circup list</tt> - lists all modules requiring an update found on the the\nconnected CIRCUITPYTHON device.</li>\n<li><tt>circup update</tt> - interactively update out-of-date modules found on the\nconnected CIRCUITPYTHON device.</li>\n<li>100% test coverage.</li>\n<li>Documentation.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 7044416, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "754c56497891dcdc7c850ee4c11571ca", "sha256": "13555ac4b0ffd3bd9fac2ab38b9c2f2971094e7c3065da47dbe63f49f33b5c0c"}, "downloads": -1, "filename": "circup-0.0.1.tar.gz", "has_sig": false, "md5_digest": "754c56497891dcdc7c850ee4c11571ca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14238, "upload_time": "2019-10-04T17:45:21", "upload_time_iso_8601": "2019-10-04T17:45:21.178319Z", "url": "https://files.pythonhosted.org/packages/67/94/fb0526baa550ddfc503b49edbe4932c7e1999e8aa1488cc30f1057cc0547/circup-0.0.1.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "cbe372f2f2e5f2e7f403449c0f97e6e6", "sha256": "6b866b8adce5e67446eb4d76105dceccb3c95f5fb5484e1953dfc0347f9f99c8"}, "downloads": -1, "filename": "circup-0.0.3.tar.gz", "has_sig": false, "md5_digest": "cbe372f2f2e5f2e7f403449c0f97e6e6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14523, "upload_time": "2019-10-04T22:15:24", "upload_time_iso_8601": "2019-10-04T22:15:24.342628Z", "url": "https://files.pythonhosted.org/packages/29/e1/d6b758935b29e4834547790ca7fe97393ba44aab435b4b35771cee38594a/circup-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "18c2f4a2d77dd7c0c1baf9f5923981b1", "sha256": "4816f57d687e1db0de17676e18054b4b17bf754c775a6d153d8e9c5380acfa32"}, "downloads": -1, "filename": "circup-0.0.4.tar.gz", "has_sig": false, "md5_digest": "18c2f4a2d77dd7c0c1baf9f5923981b1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15237, "upload_time": "2019-10-07T14:58:22", "upload_time_iso_8601": "2019-10-07T14:58:22.360250Z", "url": "https://files.pythonhosted.org/packages/cb/91/0ba0efee4cab745f09b6807d0005070b9bf79a1a995eed86d6fd970b2ef9/circup-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "e7f6706cfc62d5dfa3405d5b227d520e", "sha256": "187137e771237e002781b998c9e5f39275bd21afd6ce0051d8d65303d46f6d7c"}, "downloads": -1, "filename": "circup-0.0.5.tar.gz", "has_sig": false, "md5_digest": "e7f6706cfc62d5dfa3405d5b227d520e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15486, "upload_time": "2019-10-31T16:24:53", "upload_time_iso_8601": "2019-10-31T16:24:53.210416Z", "url": "https://files.pythonhosted.org/packages/ed/fa/6d8b0cbc0512f5b4a34b6b3a0155a199b0cf2f89676038d802e6f72d2a0d/circup-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "4ba8a0a873cd391576fc014f34e12226", "sha256": "73b6da7917d09b528da1a51ad3b0b629f74b870446b6cba30323916de7eda953"}, "downloads": -1, "filename": "circup-0.0.6.tar.gz", "has_sig": false, "md5_digest": "4ba8a0a873cd391576fc014f34e12226", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15512, "upload_time": "2020-02-24T19:31:34", "upload_time_iso_8601": "2020-02-24T19:31:34.653122Z", "url": "https://files.pythonhosted.org/packages/0c/b8/12cfb87d28ff710f0b14712d301242d6443ca762ce7e0a92b66a169707fb/circup-0.0.6.tar.gz", "yanked": false}], "0.0.8": [{"comment_text": "", "digests": {"md5": "94f00fa932cd04533a6d4ff74f9860ff", "sha256": "f713ac5cb6b062b95cc3c807df022f883a9246e0301aeee60fe77a9b1a0ce8bf"}, "downloads": -1, "filename": "circup-0.0.8.tar.gz", "has_sig": false, "md5_digest": "94f00fa932cd04533a6d4ff74f9860ff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16984, "upload_time": "2020-03-30T14:57:02", "upload_time_iso_8601": "2020-03-30T14:57:02.140104Z", "url": "https://files.pythonhosted.org/packages/bc/15/7bcc25724ada4bbf705ac3ff8bf2d5c0ec899c218702afb80f457b2260b4/circup-0.0.8.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "3ef46b29144476fb818b3be0a54e4ecc", "sha256": "2cc434284fee270825f94ecab1064a669949ba0b693c29ae295004b9ebc77232"}, "downloads": -1, "filename": "circup-0.1.0.tar.gz", "has_sig": false, "md5_digest": "3ef46b29144476fb818b3be0a54e4ecc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17609, "upload_time": "2020-04-17T21:40:31", "upload_time_iso_8601": "2020-04-17T21:40:31.691783Z", "url": "https://files.pythonhosted.org/packages/62/74/7ab01f664be5b9e209b0db7a3a52c3252a71a7190360c27a0f94f3688d83/circup-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3ef46b29144476fb818b3be0a54e4ecc", "sha256": "2cc434284fee270825f94ecab1064a669949ba0b693c29ae295004b9ebc77232"}, "downloads": -1, "filename": "circup-0.1.0.tar.gz", "has_sig": false, "md5_digest": "3ef46b29144476fb818b3be0a54e4ecc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17609, "upload_time": "2020-04-17T21:40:31", "upload_time_iso_8601": "2020-04-17T21:40:31.691783Z", "url": "https://files.pythonhosted.org/packages/62/74/7ab01f664be5b9e209b0db7a3a52c3252a71a7190360c27a0f94f3688d83/circup-0.1.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:19:20 2020"}