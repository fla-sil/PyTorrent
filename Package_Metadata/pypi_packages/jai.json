{"info": {"author": "Jia Geng", "author_email": "gengjia0214@hotmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: BSD License", "Programming Language :: Python", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Scientific/Engineering", "Topic :: Scientific/Engineering :: Artificial Intelligence", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# jai - Just Assemble It!\n\nAuthor: Jia Geng\n\nEmail: jxg570@miami.edu | gjia0214@hotmail.com\n\nPyPI: https://pypi.org/project/jai/\n\n## Introduction\n\n*Deep learning is fun. What not fun is the pipeline digging and rigging. Why can't we just enjoy the process\n of exploring all kinds of SOTA techniques with interesting dataset instead of wasting our coffee on boring things like implementing the sockets for it.*\n\n**jai** is a LEGO-style PyTorch-based Deep Learning Library. \nThe main idea behind **jai** is to reduce the amount of time spent on building all sort of pipelines or sockets to plugin those fancy deep learning tricks. This project also tend to create some handy toolkits for Kaggle.\n\n## Dev. Plan\n\nImplement anything popped up in my head when I got time and coffee...\n\n## Installation\n\n`pip install jai` \n\nThe library is still in early stage. A lot more of functions and tools will be implemented and tested soon and in the future.\n\n## Library Walk Through \n\n`jai.dataset.py` provides abstract dataset classes that inherit the PyTorch DataSet class. \nThe difference is that jai.dataset supports data augmentation and processing.\n\n`jai.improc.py` provides some handy image processing functions, which can be injected to the jai dataset as image\n preprocessing functions or to the augmentation classes as data augmentation functions. \n\n`jai.augments.py` provides the augmentation classes that can be attached to the jai dataset classes. \nIt (will) also provide implementations of some advanced augmentation techniques.\n\n`jai.trainer.py` provide a trainer class that supports classic PyTorch style deep learning training pipeline.\nIt has some specific requirements on the implementation of the dataset object. \n\n`jai.logger.py` provides the result/performance logger classes. \nThese logger classes can be attached to the trainer during the training stage and able to export, report all kinds of\n model performance related metrics.\n\n`jai.arch.py` (will) provide handy way to modify popular and vanilla deep learning architectures to make the\n architecture compatible with the jai framework.\n\n`jai.kaggler` (will) provide data pipelining solutions, toolbox for general or selected Kaggle project development.\nIt will also collect some useful tools/models from the kagglers.\n\n `jai.sota` (will) provide some state-of-the-art techniques such as optmizers, schedulers, etc. that is compatible with the jai framework.\n\n## Things Need to be Prepared before Use (not fully tested)\n\n0. **Learn how to use `partial()` as it is crucial for this library.**\n\n    ```\n    from functiontools import partial\n    ```\n\n1. **Prepare/Implement you architecture and loss function.** Some examples can be found in `jai.kaggler.from_kagglers`.\nBoth need to be in `torch.nn.Module` style. \nIf you only need to use the vanilla architectures, just grab a model from the `torchvision.models` and loss function\n from `torch`. \n    E.g.\n    ```\n    import torchvision.models as model\n    import torch.nn as nn\n\n    arch = model.resnet18()\n    loss = nn.CrossEntropyLoss()\n    ```\n\n2. **Implement the dataset class.** Some examples can be found in `jai.kaggler.kaggle_data`. \nThe key thing is to inherit the `jai.dataset.JaiDataset`\nclass and include the following code at the end of the `__getitem()__` method.\nThe `JaiDataset` constructor can receive two args for preprocessing and augmentation: `tsfms=` `augments=`\n\n    ```\n    # do whatever necessary to get the input, and ground truth with input idx\n    # img_id is not necessary. but if you have it, the logger will be able to collect false classification during\n    evaluation\n    # img and t need to be converted to Tensor in correct dimensions\n    # img dim: CxHxW; y dim: Bx1 (single output) or BxK (multiple output if you need to predict different things) \n\n    (whatever you implemented) ...\n    -> img_id, img, y  \n\n    # prepocess the image \n    img = self.prepro(img)\n\n    # augment the image during training time\n    img = self.augment(img)\n\n    # The output need to be dictionary as follow\n    # id can be omit\n    return {\"id\": img_id, \"x\": img, \"y\": y}\n    ```\n\n3. **Prepare preprocessing and augmentation.**\nFor preprocessing, just use a list to wrap the functions from `jai.improc`. \nThe list must contain the `to_tensor` method at the end. \nThe wrapped elements must be functions not the function calls. \nMost functions only takes an image input. \nFor some functions that takes hyper-parameters, you need to use `paritial(func)` to specify the hyper-parameters.\n\n    E.g.\n    ```\n    from jai.improc import * \n\n    tsfms = [denoise, partial(threshold, low=15, adaptive_ksize=(13, 13), C=-10), centralize_object, \n             rescale, standardize, to_tensor]\n    ```\n\n    For augmentation, create a `jai.augments.FuncAugmentator` object. \n    The `FuncAugmentator` takes a starting probability and a max probability for applying augmentation during training\n     time.\n    It also takes an augmentation function that process the image. \n    The `func=` also only takes in function instead of function call. \n    And the function should only have one required arg, i.e., the input data. \n    Use `partial()` to wrap the hyper-parameter. `jai.augments.AugF` (will) provide some advanced augmentation.\n    E.g:\n    ```\n    from jai.augments import * \n\n    gridmask = FuncAugmentator(p_start=0.1, p_end=1, func=partial(AugF.grid_mask, d1=96, d2=244))\n    ```\n\n4. **Prepare the optimizer and scheduler.** The easiest way is just to grab the optimizer and scheduler from PyTorch. \nYou can also implement your own. But make sure use the PyTorch style. Also, prepare them in partial function if you need to specify the hyperparameters!\n\n    E.g.\n    ```\n    from torch.optim.adamw import AdamW\n    from torch.optim.lr_scheduler import CosineAnnealingLR\n\n    optimizer = partial(AdamW, betas=(0.9, 0.999))\n    scheduler = partial(CosineAnnealingLR, T_max=100)\n    ```\n\n5. **Prepare the `jai.dataset.Evaluator`.** This is for the purpose of generating logs using specified encoding and score system.\n    - `names=` is for hashing the predictors\n    - `n_classes=` indicates how many possible classes for each predictor.\n    - `criteria=` indicates which criteria will be used for caculating scores (precision, recall, accurarcy)\n    - `avg=` indicates how to average the scores across different classes (micro, macro)\n    - `weights=` is used when you have multiple output node in your models and how do you want to combine the scores for each predictor.   \n\n    E.g. if your model is trying to predict the type of dog and whether the dog is walked by a human in an image.\n   ```\n   from jai.dataset import *\n\n   # say your training data have 10 types of dog and binary output for whether human in it or not\n   # you want to use macro precision and more concerned about has_human\n   evaluator = Evaluator(names=['dog_type', 'has_human'], n_classes=[10, 2], criteria='precision', avg='macro', weights=[1, 2])\n   ``` \n\n6. **Prepare the Logger.** You need to prepare a clean directory for receiving log files, \na prefix string for identifying your trial, and a `Evaluator` \n`resume=False` will tell the lib that you are training a new model so it will create a batch of new log files.\n`resume=True` will tell the lib that you are continue training your model, it will write on the old log files\n`keep='one_best` and it will only export the best model and overwrite. \n`keep='all_best'` will export all encountered best models.\n\n    E.g.\n    ```\n    from jai.logger import *\n\n    # keep all best models along the training process\n    logger = BasicLogger(log_dst, prefix, evaluator,resume=False, keep='all_best')\n    ```\n\n## Just Assemble It!\n\nNow we have all we need. Next is just assemble it!\n\nWe have\n```\n# model\nmodel = model.resnet18()\nloss = nn.CrossEntropyLoss()\n\n# dataset\ntsfms = [denoise, partial(threshold, low=15, adaptive_ksize=(13, 13), C=-10), centralize_object, rescale, standardize, to_tensor]\ngridmask = FuncAugmentator(p_start=0.1, p_end=1, func=partial(AugF.grid_mask, d1=96, d2=244))\ndataset = YourJaiDataset(*args, tsfms=tsfms, augments=gridmask)\n\n# optimzer\noptimizer = partial(AdamW, betas=(0.9, 0.999))\nscheduler = partial(CosineAnnealingLR, T_max=100)\n\n# logger and predictor encoder\nclass_dict = DataClassDict(names=['dog_type'], n_classes=[10])\nlogger = BasicLogger(log_dst, prefix, evaluator, resume=False, keep='all_best')\n```\n\nTo Train Your Model:\n\n```\nfrom jai.trainer import *\n\ntrain_set, eval_set = dataset.split(train_ratio=0.8, seed=2020)  # split to 0.8 : 0.2 with seed 2020\ntrain_loader = DataLoader(train_set, batch_size=32, shuffle=True)\neval_loader = DataLoader(eval_Set, batch_size=32, shuffle=False)\ntrainer = BasicTrainer(model, optimizer, scheduler)\n\ntrainer.initialize()\n\ntrainer.train(train_loader, eval_loader, epochs=50, loss_func=loss, logger=logger)\n```\n\nNow you are:\n- training your deep learning model with AdamW and CosineAnnealing Scheduler\n- using image preprocessing and the GridMask augmentation\n- searching for the best model based on the evaluation performance\n- recording and exporting the training logs such as\n    - batch loss\n    - epoch loss and model train/eval accuracy    \n    - confusion matrix of your best model(s)\n    - export model parameters and optimizer & scheduler state when find better model\n    - export the best model's failed detection during eval phase \n\nAfter the training is done. You can do: `logger.plot('loss')` to check your training progress.\n\n\n## Just Re-Assemble It!\n\nOften you might want to continue the training process. You can do it by\n\n```\n# read all the state dict (find it under your log_dst/model)\nmodel_state = torch.load(model_path)\noptimizer_state = torch.load(optimizer_path)\nscheduler_state = torch.load(scheduler_path)\n\n# load the check points\ntrainer.load_model_state(model_state)\ntrainer.initialize(optimizer_state, scheduler_state)\n\n# prepare a logger with same log_dst but set the resume to True\nlogger = BasicLogger(log_dst, prefix, evaluator, resume=True, keep='all_best')\n\n# train your model\ntrainer.train(train_loader, eval_loader, epochs=50, loss_func=loss, logger=logger)\n```\n\n\n\n\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/gengjia0214/jai.git", "keywords": "", "license": "BSD 3-Clause License", "maintainer": "", "maintainer_email": "", "name": "jai", "package_url": "https://pypi.org/project/jai/", "platform": "", "project_url": "https://pypi.org/project/jai/", "project_urls": {"Homepage": "https://github.com/gengjia0214/jai.git"}, "release_url": "https://pypi.org/project/jai/0.0.9.81/", "requires_dist": ["tqdm", "torch (>>)", "torchvision (>>)", "numpy", "pandas", "opencv-python", "fastai", "scikit-learn", "scikit-image", "matplotlib", "pillow"], "requires_python": ">=3.6", "summary": "Just Assemble IT! - A LEGO-style & PyTorch-based Deep Learning Library", "version": "0.0.9.81", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>jai - Just Assemble It!</h1>\n<p>Author: Jia Geng</p>\n<p>Email: <a href=\"mailto:jxg570@miami.edu\">jxg570@miami.edu</a> | <a href=\"mailto:gjia0214@hotmail.com\">gjia0214@hotmail.com</a></p>\n<p>PyPI: <a href=\"https://pypi.org/project/jai/\" rel=\"nofollow\">https://pypi.org/project/jai/</a></p>\n<h2>Introduction</h2>\n<p><em>Deep learning is fun. What not fun is the pipeline digging and rigging. Why can't we just enjoy the process\nof exploring all kinds of SOTA techniques with interesting dataset instead of wasting our coffee on boring things like implementing the sockets for it.</em></p>\n<p><strong>jai</strong> is a LEGO-style PyTorch-based Deep Learning Library.\nThe main idea behind <strong>jai</strong> is to reduce the amount of time spent on building all sort of pipelines or sockets to plugin those fancy deep learning tricks. This project also tend to create some handy toolkits for Kaggle.</p>\n<h2>Dev. Plan</h2>\n<p>Implement anything popped up in my head when I got time and coffee...</p>\n<h2>Installation</h2>\n<p><code>pip install jai</code></p>\n<p>The library is still in early stage. A lot more of functions and tools will be implemented and tested soon and in the future.</p>\n<h2>Library Walk Through</h2>\n<p><code>jai.dataset.py</code> provides abstract dataset classes that inherit the PyTorch DataSet class.\nThe difference is that jai.dataset supports data augmentation and processing.</p>\n<p><code>jai.improc.py</code> provides some handy image processing functions, which can be injected to the jai dataset as image\npreprocessing functions or to the augmentation classes as data augmentation functions.</p>\n<p><code>jai.augments.py</code> provides the augmentation classes that can be attached to the jai dataset classes.\nIt (will) also provide implementations of some advanced augmentation techniques.</p>\n<p><code>jai.trainer.py</code> provide a trainer class that supports classic PyTorch style deep learning training pipeline.\nIt has some specific requirements on the implementation of the dataset object.</p>\n<p><code>jai.logger.py</code> provides the result/performance logger classes.\nThese logger classes can be attached to the trainer during the training stage and able to export, report all kinds of\nmodel performance related metrics.</p>\n<p><code>jai.arch.py</code> (will) provide handy way to modify popular and vanilla deep learning architectures to make the\narchitecture compatible with the jai framework.</p>\n<p><code>jai.kaggler</code> (will) provide data pipelining solutions, toolbox for general or selected Kaggle project development.\nIt will also collect some useful tools/models from the kagglers.</p>\n<p><code>jai.sota</code> (will) provide some state-of-the-art techniques such as optmizers, schedulers, etc. that is compatible with the jai framework.</p>\n<h2>Things Need to be Prepared before Use (not fully tested)</h2>\n<ol>\n<li>\n<p><strong>Learn how to use <code>partial()</code> as it is crucial for this library.</strong></p>\n<pre><code>from functiontools import partial\n</code></pre>\n</li>\n<li>\n<p><strong>Prepare/Implement you architecture and loss function.</strong> Some examples can be found in <code>jai.kaggler.from_kagglers</code>.\nBoth need to be in <code>torch.nn.Module</code> style.\nIf you only need to use the vanilla architectures, just grab a model from the <code>torchvision.models</code> and loss function\nfrom <code>torch</code>.\nE.g.</p>\n<pre><code>import torchvision.models as model\nimport torch.nn as nn\n\narch = model.resnet18()\nloss = nn.CrossEntropyLoss()\n</code></pre>\n</li>\n<li>\n<p><strong>Implement the dataset class.</strong> Some examples can be found in <code>jai.kaggler.kaggle_data</code>.\nThe key thing is to inherit the <code>jai.dataset.JaiDataset</code>\nclass and include the following code at the end of the <code>__getitem()__</code> method.\nThe <code>JaiDataset</code> constructor can receive two args for preprocessing and augmentation: <code>tsfms=</code> <code>augments=</code></p>\n<pre><code># do whatever necessary to get the input, and ground truth with input idx\n# img_id is not necessary. but if you have it, the logger will be able to collect false classification during\nevaluation\n# img and t need to be converted to Tensor in correct dimensions\n# img dim: CxHxW; y dim: Bx1 (single output) or BxK (multiple output if you need to predict different things) \n\n(whatever you implemented) ...\n-&gt; img_id, img, y  \n\n# prepocess the image \nimg = self.prepro(img)\n\n# augment the image during training time\nimg = self.augment(img)\n\n# The output need to be dictionary as follow\n# id can be omit\nreturn {\"id\": img_id, \"x\": img, \"y\": y}\n</code></pre>\n</li>\n<li>\n<p><strong>Prepare preprocessing and augmentation.</strong>\nFor preprocessing, just use a list to wrap the functions from <code>jai.improc</code>.\nThe list must contain the <code>to_tensor</code> method at the end.\nThe wrapped elements must be functions not the function calls.\nMost functions only takes an image input.\nFor some functions that takes hyper-parameters, you need to use <code>paritial(func)</code> to specify the hyper-parameters.</p>\n<p>E.g.</p>\n<pre><code>from jai.improc import * \n\ntsfms = [denoise, partial(threshold, low=15, adaptive_ksize=(13, 13), C=-10), centralize_object, \n         rescale, standardize, to_tensor]\n</code></pre>\n<p>For augmentation, create a <code>jai.augments.FuncAugmentator</code> object.\nThe <code>FuncAugmentator</code> takes a starting probability and a max probability for applying augmentation during training\ntime.\nIt also takes an augmentation function that process the image.\nThe <code>func=</code> also only takes in function instead of function call.\nAnd the function should only have one required arg, i.e., the input data.\nUse <code>partial()</code> to wrap the hyper-parameter. <code>jai.augments.AugF</code> (will) provide some advanced augmentation.\nE.g:</p>\n<pre><code>from jai.augments import * \n\ngridmask = FuncAugmentator(p_start=0.1, p_end=1, func=partial(AugF.grid_mask, d1=96, d2=244))\n</code></pre>\n</li>\n<li>\n<p><strong>Prepare the optimizer and scheduler.</strong> The easiest way is just to grab the optimizer and scheduler from PyTorch.\nYou can also implement your own. But make sure use the PyTorch style. Also, prepare them in partial function if you need to specify the hyperparameters!</p>\n<p>E.g.</p>\n<pre><code>from torch.optim.adamw import AdamW\nfrom torch.optim.lr_scheduler import CosineAnnealingLR\n\noptimizer = partial(AdamW, betas=(0.9, 0.999))\nscheduler = partial(CosineAnnealingLR, T_max=100)\n</code></pre>\n</li>\n<li>\n<p><strong>Prepare the <code>jai.dataset.Evaluator</code>.</strong> This is for the purpose of generating logs using specified encoding and score system.</p>\n<ul>\n<li><code>names=</code> is for hashing the predictors</li>\n<li><code>n_classes=</code> indicates how many possible classes for each predictor.</li>\n<li><code>criteria=</code> indicates which criteria will be used for caculating scores (precision, recall, accurarcy)</li>\n<li><code>avg=</code> indicates how to average the scores across different classes (micro, macro)</li>\n<li><code>weights=</code> is used when you have multiple output node in your models and how do you want to combine the scores for each predictor.</li>\n</ul>\n<p>E.g. if your model is trying to predict the type of dog and whether the dog is walked by a human in an image.</p>\n<pre><code>from jai.dataset import *\n\n# say your training data have 10 types of dog and binary output for whether human in it or not\n# you want to use macro precision and more concerned about has_human\nevaluator = Evaluator(names=['dog_type', 'has_human'], n_classes=[10, 2], criteria='precision', avg='macro', weights=[1, 2])\n</code></pre>\n</li>\n<li>\n<p><strong>Prepare the Logger.</strong> You need to prepare a clean directory for receiving log files,\na prefix string for identifying your trial, and a <code>Evaluator</code>\n<code>resume=False</code> will tell the lib that you are training a new model so it will create a batch of new log files.\n<code>resume=True</code> will tell the lib that you are continue training your model, it will write on the old log files\n<code>keep='one_best</code> and it will only export the best model and overwrite.\n<code>keep='all_best'</code> will export all encountered best models.</p>\n<p>E.g.</p>\n<pre><code>from jai.logger import *\n\n# keep all best models along the training process\nlogger = BasicLogger(log_dst, prefix, evaluator,resume=False, keep='all_best')\n</code></pre>\n</li>\n</ol>\n<h2>Just Assemble It!</h2>\n<p>Now we have all we need. Next is just assemble it!</p>\n<p>We have</p>\n<pre><code># model\nmodel = model.resnet18()\nloss = nn.CrossEntropyLoss()\n\n# dataset\ntsfms = [denoise, partial(threshold, low=15, adaptive_ksize=(13, 13), C=-10), centralize_object, rescale, standardize, to_tensor]\ngridmask = FuncAugmentator(p_start=0.1, p_end=1, func=partial(AugF.grid_mask, d1=96, d2=244))\ndataset = YourJaiDataset(*args, tsfms=tsfms, augments=gridmask)\n\n# optimzer\noptimizer = partial(AdamW, betas=(0.9, 0.999))\nscheduler = partial(CosineAnnealingLR, T_max=100)\n\n# logger and predictor encoder\nclass_dict = DataClassDict(names=['dog_type'], n_classes=[10])\nlogger = BasicLogger(log_dst, prefix, evaluator, resume=False, keep='all_best')\n</code></pre>\n<p>To Train Your Model:</p>\n<pre><code>from jai.trainer import *\n\ntrain_set, eval_set = dataset.split(train_ratio=0.8, seed=2020)  # split to 0.8 : 0.2 with seed 2020\ntrain_loader = DataLoader(train_set, batch_size=32, shuffle=True)\neval_loader = DataLoader(eval_Set, batch_size=32, shuffle=False)\ntrainer = BasicTrainer(model, optimizer, scheduler)\n\ntrainer.initialize()\n\ntrainer.train(train_loader, eval_loader, epochs=50, loss_func=loss, logger=logger)\n</code></pre>\n<p>Now you are:</p>\n<ul>\n<li>training your deep learning model with AdamW and CosineAnnealing Scheduler</li>\n<li>using image preprocessing and the GridMask augmentation</li>\n<li>searching for the best model based on the evaluation performance</li>\n<li>recording and exporting the training logs such as\n<ul>\n<li>batch loss</li>\n<li>epoch loss and model train/eval accuracy</li>\n<li>confusion matrix of your best model(s)</li>\n<li>export model parameters and optimizer &amp; scheduler state when find better model</li>\n<li>export the best model's failed detection during eval phase</li>\n</ul>\n</li>\n</ul>\n<p>After the training is done. You can do: <code>logger.plot('loss')</code> to check your training progress.</p>\n<h2>Just Re-Assemble It!</h2>\n<p>Often you might want to continue the training process. You can do it by</p>\n<pre><code># read all the state dict (find it under your log_dst/model)\nmodel_state = torch.load(model_path)\noptimizer_state = torch.load(optimizer_path)\nscheduler_state = torch.load(scheduler_path)\n\n# load the check points\ntrainer.load_model_state(model_state)\ntrainer.initialize(optimizer_state, scheduler_state)\n\n# prepare a logger with same log_dst but set the resume to True\nlogger = BasicLogger(log_dst, prefix, evaluator, resume=True, keep='all_best')\n\n# train your model\ntrainer.train(train_loader, eval_loader, epochs=50, loss_func=loss, logger=logger)\n</code></pre>\n\n          </div>"}, "last_serial": 6909866, "releases": {"0.0.0": [{"comment_text": "", "digests": {"md5": "7d50db449c2011240f25a162279a9bf2", "sha256": "f4ca9476c11c956b7fb385ee350f5f09525a53eb0d21cd0b656d8ca339a92227"}, "downloads": -1, "filename": "jai-0.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "7d50db449c2011240f25a162279a9bf2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 3231, "upload_time": "2020-02-17T21:49:04", "upload_time_iso_8601": "2020-02-17T21:49:04.325356Z", "url": "https://files.pythonhosted.org/packages/f5/b2/f9578ac68b16df15bfaa8ed4153e0357e5e19127a244feafa71413554379/jai-0.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "87da3bb29010f56781b3dd1244945811", "sha256": "89f8991ca58753d9d379fa10a0a1deea097883ee8e791ef6729cafabcf290c95"}, "downloads": -1, "filename": "jai-0.0.0.tar.gz", "has_sig": false, "md5_digest": "87da3bb29010f56781b3dd1244945811", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 1599, "upload_time": "2020-02-17T21:49:06", "upload_time_iso_8601": "2020-02-17T21:49:06.738306Z", "url": "https://files.pythonhosted.org/packages/9b/a8/498e7300f45284e40589f48408d9e995e53044622d0c3b4aacd3b6ac2709/jai-0.0.0.tar.gz", "yanked": false}], "0.0.1": [{"comment_text": "", "digests": {"md5": "ce6f6736a24f653c293ba3f60799cb15", "sha256": "930a6c281d794963ea5b362a4fde1a98f3ec585d1b63ec9aa6815bd227b1d3b0"}, "downloads": -1, "filename": "jai-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "ce6f6736a24f653c293ba3f60799cb15", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 8608, "upload_time": "2020-02-20T02:07:51", "upload_time_iso_8601": "2020-02-20T02:07:51.314024Z", "url": "https://files.pythonhosted.org/packages/26/1a/026f1af687525fa6c624c8413260aae4684f82e75c8a3e9cb9156a31e0f7/jai-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8ed3868edc079d4a430890d0c9a2c862", "sha256": "942e21b5a8b979ec771a455ba208c0716ccbd450a31fe3d484d07c6da47f62a8"}, "downloads": -1, "filename": "jai-0.0.1.tar.gz", "has_sig": false, "md5_digest": "8ed3868edc079d4a430890d0c9a2c862", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 6223, "upload_time": "2020-02-20T02:07:52", "upload_time_iso_8601": "2020-02-20T02:07:52.799000Z", "url": "https://files.pythonhosted.org/packages/65/39/836ffdcd80917954b6e41db7f7e8c950b2cc35a24bb153321d977d5c6fcd/jai-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "7f8541f13300e347d1f2f0170d745da3", "sha256": "bce69a8967e8b5c31e8bca3acce8a9581fa2eafdb1232eb3722f6915bb4176c3"}, "downloads": -1, "filename": "jai-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "7f8541f13300e347d1f2f0170d745da3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 16633, "upload_time": "2020-02-20T09:42:09", "upload_time_iso_8601": "2020-02-20T09:42:09.053703Z", "url": "https://files.pythonhosted.org/packages/07/c8/f7302f27604ab4efb338cb164e15f210a2f2fff6f5c8d48dde30c0176a9c/jai-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6f0426b5cb1bdd755fa9ceb5edc472db", "sha256": "cd1de53441c6ebcc51808094c37be9e86f9f2a63e6573a97cba33c1edb707d71"}, "downloads": -1, "filename": "jai-0.0.2.tar.gz", "has_sig": false, "md5_digest": "6f0426b5cb1bdd755fa9ceb5edc472db", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 13286, "upload_time": "2020-02-20T09:42:10", "upload_time_iso_8601": "2020-02-20T09:42:10.619803Z", "url": "https://files.pythonhosted.org/packages/0b/8b/bbf9d556dbf8ce15655b1896c7c7cfb80d4161f3b15d1ca4e01beca4ce44/jai-0.0.2.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "c6ff462f405d506d86dbc5b523ef985e", "sha256": "06b1bc502ceab724eb14e530ffb8baf950e67d96114848bf4f5d219590fa5318"}, "downloads": -1, "filename": "jai-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "c6ff462f405d506d86dbc5b523ef985e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 16672, "upload_time": "2020-02-20T09:56:56", "upload_time_iso_8601": "2020-02-20T09:56:56.284472Z", "url": "https://files.pythonhosted.org/packages/65/65/37207922a54ff8ab0661f7f252fdc7fa0ff3cba0c8202e36082a015099ec/jai-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c4772fbe0d6a17e27457f7c450172b66", "sha256": "9e2c37e3f3ea8e4ea989beb3a4eb2f96c68826d670a69dadbfefef9a9132a2eb"}, "downloads": -1, "filename": "jai-0.0.4.tar.gz", "has_sig": false, "md5_digest": "c4772fbe0d6a17e27457f7c450172b66", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 13332, "upload_time": "2020-02-20T09:56:57", "upload_time_iso_8601": "2020-02-20T09:56:57.509614Z", "url": "https://files.pythonhosted.org/packages/e0/00/dc0e8eaf98134a931f9be48a16623cc47359dbcc98c720761b37d15771a9/jai-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "f14d6c2c3af8816a919c585287f0cfc1", "sha256": "7bdb83333fd25cc336b0a58582727aed5fcc9939bc7c7564540750bd154cbb21"}, "downloads": -1, "filename": "jai-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "f14d6c2c3af8816a919c585287f0cfc1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 17222, "upload_time": "2020-02-20T21:43:42", "upload_time_iso_8601": "2020-02-20T21:43:42.537292Z", "url": "https://files.pythonhosted.org/packages/6b/0c/dd20dfd8b2dea83df079055eae08580ca5ae8eb0ee9a2d376ca524cdd599/jai-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "67c6207383c0a6cacb4d2ded9af0e926", "sha256": "13b97823faeabe8450b99bfe34585683c8110efb24c8031ee9177cc153867adc"}, "downloads": -1, "filename": "jai-0.0.5.tar.gz", "has_sig": false, "md5_digest": "67c6207383c0a6cacb4d2ded9af0e926", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 14004, "upload_time": "2020-02-20T21:43:43", "upload_time_iso_8601": "2020-02-20T21:43:43.708576Z", "url": "https://files.pythonhosted.org/packages/ae/f1/ad5f879240e232fe45af6cc246126eb549c20d456cab417a5a20ef4b9fe8/jai-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "ecf2990215482028596f4477ac27da2b", "sha256": "eeb99f6e9f4e00363af92b7a57668f554392482ebd5ed3aa34d47074c7871421"}, "downloads": -1, "filename": "jai-0.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "ecf2990215482028596f4477ac27da2b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 17224, "upload_time": "2020-02-20T22:06:14", "upload_time_iso_8601": "2020-02-20T22:06:14.614581Z", "url": "https://files.pythonhosted.org/packages/02/c2/bb3c827af66f43aab4245b41e31677c330c62df7917917404dfad2ac1112/jai-0.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7260c34f5e308589545ad6ad292ee008", "sha256": "5db446b1c7814e6ed43c15534377e1808ad669fa3f32628d8a4c98681fc0287c"}, "downloads": -1, "filename": "jai-0.0.6.tar.gz", "has_sig": false, "md5_digest": "7260c34f5e308589545ad6ad292ee008", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 14004, "upload_time": "2020-02-20T22:06:15", "upload_time_iso_8601": "2020-02-20T22:06:15.848682Z", "url": "https://files.pythonhosted.org/packages/84/ef/cd3f6102ab6f634ea6dce47ca36db6e4b4de6d927441805f461875274dcb/jai-0.0.6.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "e5e0e4fbdb96c8c3b4d63df02540f4bf", "sha256": "94070cffe24d0d1f0ce6b555fc7dd94ffefac7eca1f9bbfb2b154bc8210585f7"}, "downloads": -1, "filename": "jai-0.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "e5e0e4fbdb96c8c3b4d63df02540f4bf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 18908, "upload_time": "2020-02-21T01:36:05", "upload_time_iso_8601": "2020-02-21T01:36:05.412693Z", "url": "https://files.pythonhosted.org/packages/0a/8a/419a2dfa0a3bcb02b30526914d783a91ae38258601f204f2cfd87e93e21b/jai-0.0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "74d08c3bb756cb97f99b7d18b180e61e", "sha256": "482b936173719486bc744332d881e95d88bb816a15cdd67c136070432496b0b3"}, "downloads": -1, "filename": "jai-0.0.7.tar.gz", "has_sig": false, "md5_digest": "74d08c3bb756cb97f99b7d18b180e61e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 15379, "upload_time": "2020-02-21T01:36:06", "upload_time_iso_8601": "2020-02-21T01:36:06.804048Z", "url": "https://files.pythonhosted.org/packages/83/39/0e9e83800d9b4664e25b8e77b254f5829dd4228fdd143e87f3ac00220977/jai-0.0.7.tar.gz", "yanked": false}], "0.0.8": [{"comment_text": "", "digests": {"md5": "16fbad6d6f6d0a7a0857ba799f0d4ee9", "sha256": "4c7c38fea22a7150b052a9932acb03c61271dabd364bded583e79bed63502076"}, "downloads": -1, "filename": "jai-0.0.8-py3-none-any.whl", "has_sig": false, "md5_digest": "16fbad6d6f6d0a7a0857ba799f0d4ee9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 21687, "upload_time": "2020-02-21T04:08:00", "upload_time_iso_8601": "2020-02-21T04:08:00.076013Z", "url": "https://files.pythonhosted.org/packages/e0/b7/69a290148e55ba0c4d6d3b392b767fd8e77e0fbe84064073949deacc9c50/jai-0.0.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2aad4db23298189eaf1321257ae26f4d", "sha256": "22e72023f211d3cc4f3f1727ea4dafb0b06fbad5986d31500d75e80f89d42bd2"}, "downloads": -1, "filename": "jai-0.0.8.tar.gz", "has_sig": false, "md5_digest": "2aad4db23298189eaf1321257ae26f4d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 21562, "upload_time": "2020-02-21T04:08:01", "upload_time_iso_8601": "2020-02-21T04:08:01.886640Z", "url": "https://files.pythonhosted.org/packages/44/4a/cec49c54df3dd58c8b7f3b3f9063716243faf5f3f733b8c5bd5141c5a11d/jai-0.0.8.tar.gz", "yanked": false}], "0.0.8.1": [{"comment_text": "", "digests": {"md5": "dd1530729e2e4f17bb877555c0697a40", "sha256": "b3351becf6d618a5ca588e5d054dc5c1a8e3fe3d3bccf80c60d62f5d2d661c7d"}, "downloads": -1, "filename": "jai-0.0.8.1-py3-none-any.whl", "has_sig": false, "md5_digest": "dd1530729e2e4f17bb877555c0697a40", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 21661, "upload_time": "2020-02-21T04:30:49", "upload_time_iso_8601": "2020-02-21T04:30:49.497194Z", "url": "https://files.pythonhosted.org/packages/74/8b/133fe0c2c6ee817adb96480787b440a4467c141843ea1e52671ce7749a31/jai-0.0.8.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "173eb0e1c2150bd8d90eeb401ea28788", "sha256": "abb348d7253c03740c92b9935dd2efea346b065d4757844cbf2358ffeefb3a77"}, "downloads": -1, "filename": "jai-0.0.8.1.tar.gz", "has_sig": false, "md5_digest": "173eb0e1c2150bd8d90eeb401ea28788", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 21540, "upload_time": "2020-02-21T04:30:50", "upload_time_iso_8601": "2020-02-21T04:30:50.977125Z", "url": "https://files.pythonhosted.org/packages/9d/14/e8c61a81523e44958906d0af67fedf5d52b28854df0e599ca10f7f4eafda/jai-0.0.8.1.tar.gz", "yanked": false}], "0.0.8.2": [{"comment_text": "", "digests": {"md5": "27482334174c32eeceb01957dd9af660", "sha256": "e116141bb1b5b2a36a25e00c02112dae13b696b0547bc7ad337117001c2051e8"}, "downloads": -1, "filename": "jai-0.0.8.2-py3-none-any.whl", "has_sig": false, "md5_digest": "27482334174c32eeceb01957dd9af660", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 21689, "upload_time": "2020-02-21T08:01:11", "upload_time_iso_8601": "2020-02-21T08:01:11.048309Z", "url": "https://files.pythonhosted.org/packages/a1/95/c45b37c0fd848594ed3137ab06d42319da29b3c6d043fdb18b9781cb8c29/jai-0.0.8.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "26a9b07f753a5f871063e14ed62d5ef0", "sha256": "a979b5f0a976ed24632db9ba7d1dca0616ea327a97283552ce95bb2f1c62796f"}, "downloads": -1, "filename": "jai-0.0.8.2.tar.gz", "has_sig": false, "md5_digest": "26a9b07f753a5f871063e14ed62d5ef0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 21597, "upload_time": "2020-02-21T08:01:12", "upload_time_iso_8601": "2020-02-21T08:01:12.474152Z", "url": "https://files.pythonhosted.org/packages/7b/45/aebd105ee7365ca280095189eb93f6debb46eee8febb4640730c91830fc9/jai-0.0.8.2.tar.gz", "yanked": false}], "0.0.8.3": [{"comment_text": "", "digests": {"md5": "ebd7899f9914e1c1535caba384d23299", "sha256": "aabed93726ba07f85e311b6315789cf7e356f7e9b099dd1868ec577e44c2e350"}, "downloads": -1, "filename": "jai-0.0.8.3-py3-none-any.whl", "has_sig": false, "md5_digest": "ebd7899f9914e1c1535caba384d23299", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 22491, "upload_time": "2020-02-21T19:50:38", "upload_time_iso_8601": "2020-02-21T19:50:38.400466Z", "url": "https://files.pythonhosted.org/packages/14/da/dd6c41e756bcdb705b48405ca428069cc058485511908500a8adccf3d123/jai-0.0.8.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5459e6e160fd1c4513c843580671c27f", "sha256": "d23504dbca4e5ac111e77e69c97348dbc053164ef305a8db6a66b9cc87d0543d"}, "downloads": -1, "filename": "jai-0.0.8.3.tar.gz", "has_sig": false, "md5_digest": "5459e6e160fd1c4513c843580671c27f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 22359, "upload_time": "2020-02-21T19:50:39", "upload_time_iso_8601": "2020-02-21T19:50:39.837169Z", "url": "https://files.pythonhosted.org/packages/6c/26/08792577e33018a5dfa486da1f76435b92b6695c705dc7596e574b3791a3/jai-0.0.8.3.tar.gz", "yanked": false}], "0.0.8.4": [{"comment_text": "", "digests": {"md5": "9a74fb308d464b7efad7a2fa585b75c4", "sha256": "88f1b53035a9c47fb97f608ad9307ef132a0636afe3a9824379de575bef4cd25"}, "downloads": -1, "filename": "jai-0.0.8.4-py3-none-any.whl", "has_sig": false, "md5_digest": "9a74fb308d464b7efad7a2fa585b75c4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 17850, "upload_time": "2020-02-22T00:27:23", "upload_time_iso_8601": "2020-02-22T00:27:23.115346Z", "url": "https://files.pythonhosted.org/packages/ef/5e/e62bdc47fce7c3cb2ae3514b3c8b2a547192b8a211de7efc98bce95671d2/jai-0.0.8.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bbafe1d091c0388501469bf9b9f2ba58", "sha256": "92b18757b67a349a264a10ef39b9a6288ac1c7bfc468e5f1c842f756e784a560"}, "downloads": -1, "filename": "jai-0.0.8.4.tar.gz", "has_sig": false, "md5_digest": "bbafe1d091c0388501469bf9b9f2ba58", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 18851, "upload_time": "2020-02-22T00:27:24", "upload_time_iso_8601": "2020-02-22T00:27:24.598782Z", "url": "https://files.pythonhosted.org/packages/b9/1b/32d2bee1dedf4cafcd3bd537624c4cc454b556fade81c424752de5274c90/jai-0.0.8.4.tar.gz", "yanked": false}], "0.0.8.5": [{"comment_text": "", "digests": {"md5": "7d253aa1a016e46d33af1985a2079ad7", "sha256": "f7161c46d5b6a1e83d0fb32b73aa582724c8b58a61d511f3d3898451705f7298"}, "downloads": -1, "filename": "jai-0.0.8.5-py3-none-any.whl", "has_sig": false, "md5_digest": "7d253aa1a016e46d33af1985a2079ad7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 23297, "upload_time": "2020-02-22T00:33:13", "upload_time_iso_8601": "2020-02-22T00:33:13.078310Z", "url": "https://files.pythonhosted.org/packages/5c/aa/ebfa44a6fe31adc86677632ca0e27f9135b1e62661702a7d40b603d10670/jai-0.0.8.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ca74e27d00304eb72d02de48a4230671", "sha256": "b2ac244a5fca4551abcd7b57b5edfe496cf6bbf8caebbfcc597cf48af2cf6257"}, "downloads": -1, "filename": "jai-0.0.8.5.tar.gz", "has_sig": false, "md5_digest": "ca74e27d00304eb72d02de48a4230671", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 22676, "upload_time": "2020-02-22T00:33:15", "upload_time_iso_8601": "2020-02-22T00:33:15.580914Z", "url": "https://files.pythonhosted.org/packages/83/a8/05cc33a6d62400bd0945b5133697af919355a42c476b0ed79314b7b7d669/jai-0.0.8.5.tar.gz", "yanked": false}], "0.0.8.6": [{"comment_text": "", "digests": {"md5": "aa030cd8bb464c0657e414fd81047778", "sha256": "97756bf14b4a4373d18eca3b157b3edf88da38ca92f961cd1a8c5bd939496f54"}, "downloads": -1, "filename": "jai-0.0.8.6-py3-none-any.whl", "has_sig": false, "md5_digest": "aa030cd8bb464c0657e414fd81047778", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 26035, "upload_time": "2020-02-22T03:25:56", "upload_time_iso_8601": "2020-02-22T03:25:56.917243Z", "url": "https://files.pythonhosted.org/packages/4d/ef/c814691019f775a54a54b398208b9b7b0133c4bf27a12b2c6e10d75bbe09/jai-0.0.8.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0d79b5714ffb9d03b13a0c461da3cfcd", "sha256": "9399a5295947faa03d521817549c183b9f3d0e75d22446ce42737ec085ce0743"}, "downloads": -1, "filename": "jai-0.0.8.6.tar.gz", "has_sig": false, "md5_digest": "0d79b5714ffb9d03b13a0c461da3cfcd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 25059, "upload_time": "2020-02-22T03:25:58", "upload_time_iso_8601": "2020-02-22T03:25:58.347220Z", "url": "https://files.pythonhosted.org/packages/a6/ef/caf8d82463ddc9f52241de2d0322e1c38fe1eccdf68a933b216d8b86070b/jai-0.0.8.6.tar.gz", "yanked": false}], "0.0.8.7": [{"comment_text": "", "digests": {"md5": "ca54ada99a7821c6206b72abd22046d8", "sha256": "dcda7b54f7ba25574e5906a9926bfc1866f387fba0ca8b9eb5b5ea9e9505f99e"}, "downloads": -1, "filename": "jai-0.0.8.7-py3-none-any.whl", "has_sig": false, "md5_digest": "ca54ada99a7821c6206b72abd22046d8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 25987, "upload_time": "2020-02-22T03:41:04", "upload_time_iso_8601": "2020-02-22T03:41:04.551555Z", "url": "https://files.pythonhosted.org/packages/41/6d/12804ba7539b372c171ea5261820e2e7a8f34728310715177098758a0956/jai-0.0.8.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9e632980c7b45edbb356a1dd16a13f3b", "sha256": "ce55a0cb2c22783895712b34985243fc0bd03f638637c4692a285817da3236eb"}, "downloads": -1, "filename": "jai-0.0.8.7.tar.gz", "has_sig": false, "md5_digest": "9e632980c7b45edbb356a1dd16a13f3b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 25025, "upload_time": "2020-02-22T03:41:06", "upload_time_iso_8601": "2020-02-22T03:41:06.027882Z", "url": "https://files.pythonhosted.org/packages/dc/87/059dd313480d817259d4721bc44a911279371f5a5313edf2ac2e4078801d/jai-0.0.8.7.tar.gz", "yanked": false}], "0.0.8.8": [{"comment_text": "", "digests": {"md5": "dfce424e47e6d8bb51c39cb388efd94f", "sha256": "101e0c97f2e6736a6cf93d33aeb9fbf3788295c1d61d3c7359fd3d211651a216"}, "downloads": -1, "filename": "jai-0.0.8.8-py3-none-any.whl", "has_sig": false, "md5_digest": "dfce424e47e6d8bb51c39cb388efd94f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 25987, "upload_time": "2020-02-22T04:17:50", "upload_time_iso_8601": "2020-02-22T04:17:50.373471Z", "url": "https://files.pythonhosted.org/packages/09/59/c22288b328f2c1716a70fda6e03cf4ea0a6d06eb7d6870ecd6b5a1ed6cff/jai-0.0.8.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "05469a29b64e365f7b8c251326031cbe", "sha256": "292867c559ab4ddce20c2301821c59c2fe79e1972185ca15c7140470c0d64116"}, "downloads": -1, "filename": "jai-0.0.8.8.tar.gz", "has_sig": false, "md5_digest": "05469a29b64e365f7b8c251326031cbe", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 25019, "upload_time": "2020-02-22T04:17:51", "upload_time_iso_8601": "2020-02-22T04:17:51.947774Z", "url": "https://files.pythonhosted.org/packages/cf/50/20b70ddc04c1a438832db61c89998adfb65705449efa8c463dbd3075673c/jai-0.0.8.8.tar.gz", "yanked": false}], "0.0.8.9": [{"comment_text": "", "digests": {"md5": "dc2f553682031602019880a2b09f9a22", "sha256": "41d419f4a8ffa73b3053f13b24dac3019bf6fc6d69be2c2b0d61259de9a5d366"}, "downloads": -1, "filename": "jai-0.0.8.9-py3-none-any.whl", "has_sig": false, "md5_digest": "dc2f553682031602019880a2b09f9a22", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 25984, "upload_time": "2020-02-22T04:24:16", "upload_time_iso_8601": "2020-02-22T04:24:16.388375Z", "url": "https://files.pythonhosted.org/packages/4e/f7/336d88aa8e50979bd7427cd077430065fb9015c426d2f634043f34ae0ce0/jai-0.0.8.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "86e14f2c6d09de190ad3fb61b46ed697", "sha256": "6ac5b093fd2edff292fed37e86d1bd2784591970daec7d262ae4c92709dbe3c1"}, "downloads": -1, "filename": "jai-0.0.8.9.tar.gz", "has_sig": false, "md5_digest": "86e14f2c6d09de190ad3fb61b46ed697", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 25014, "upload_time": "2020-02-22T04:24:17", "upload_time_iso_8601": "2020-02-22T04:24:17.872866Z", "url": "https://files.pythonhosted.org/packages/cb/14/37323ebe391b1c2856008bf156c4b6e666f5ac3c30c9e12e5c2c3dfeb22e/jai-0.0.8.9.tar.gz", "yanked": false}], "0.0.9": [{"comment_text": "", "digests": {"md5": "7cf0dedf40720fe5356556790cfeb025", "sha256": "a74b4209e91e1d5d2c7e6226b7593ac000b89b5e6bb57ccf0135a2233eb743aa"}, "downloads": -1, "filename": "jai-0.0.9-py3-none-any.whl", "has_sig": false, "md5_digest": "7cf0dedf40720fe5356556790cfeb025", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 25983, "upload_time": "2020-02-22T05:08:08", "upload_time_iso_8601": "2020-02-22T05:08:08.399692Z", "url": "https://files.pythonhosted.org/packages/fb/57/ca9e8d7677d27902d60ee8b617c25f5d9a6142855746425be07875ff0133/jai-0.0.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b59cc416c3c3b63401cd657f40c34ad6", "sha256": "15533fb098c9966775e610454b9a201d62407dc172c975c5874d968a065a975f"}, "downloads": -1, "filename": "jai-0.0.9.tar.gz", "has_sig": false, "md5_digest": "b59cc416c3c3b63401cd657f40c34ad6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 25023, "upload_time": "2020-02-22T05:08:10", "upload_time_iso_8601": "2020-02-22T05:08:10.004219Z", "url": "https://files.pythonhosted.org/packages/5f/d5/c4f4fb100a2c963dedefbe080f426a11e9fe98164024e4a887940f33a577/jai-0.0.9.tar.gz", "yanked": false}], "0.0.9.1": [{"comment_text": "", "digests": {"md5": "47a35d00fdbf6e02e5580ce73a23e296", "sha256": "e5e2fdcee153973522e1f7afce309568a5947936f94e803790bf0a9a0c8d368a"}, "downloads": -1, "filename": "jai-0.0.9.1-py3-none-any.whl", "has_sig": false, "md5_digest": "47a35d00fdbf6e02e5580ce73a23e296", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 26323, "upload_time": "2020-02-22T18:29:48", "upload_time_iso_8601": "2020-02-22T18:29:48.783085Z", "url": "https://files.pythonhosted.org/packages/03/3b/2ffb70eef84069f15265803853e6e83a5190ca121f8dc5b749f179681817/jai-0.0.9.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0458eb476c40add5854bc668bc83ac0d", "sha256": "d220a6ec4ce41ff6121b175c668e544e4797edd71e147207b635f2336efdcb87"}, "downloads": -1, "filename": "jai-0.0.9.1.tar.gz", "has_sig": false, "md5_digest": "0458eb476c40add5854bc668bc83ac0d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 25561, "upload_time": "2020-02-22T18:29:50", "upload_time_iso_8601": "2020-02-22T18:29:50.335863Z", "url": "https://files.pythonhosted.org/packages/1b/aa/3dfa62dae8dd204abe7c4d3afd0dbc3c82839443d42162fa927a02109bc4/jai-0.0.9.1.tar.gz", "yanked": false}], "0.0.9.2": [{"comment_text": "", "digests": {"md5": "c74915f2baa685e2645eda5f4fc74738", "sha256": "4f9b214c77e187c358f6fa7f348fce43de09a673a08e0beffa854c073db07de1"}, "downloads": -1, "filename": "jai-0.0.9.2-py3-none-any.whl", "has_sig": false, "md5_digest": "c74915f2baa685e2645eda5f4fc74738", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 26336, "upload_time": "2020-02-22T18:56:01", "upload_time_iso_8601": "2020-02-22T18:56:01.818160Z", "url": "https://files.pythonhosted.org/packages/c2/4e/f656c6289310a303c3bc067fb54b856744363a603c9948e771f077cf0f61/jai-0.0.9.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1f7955f0ce1da808665fa3d0ca1e11d5", "sha256": "fb6c521bf2df90f45fc85fbd95cd688b204215cfa9242e20ecbea95dd0ca62b1"}, "downloads": -1, "filename": "jai-0.0.9.2.tar.gz", "has_sig": false, "md5_digest": "1f7955f0ce1da808665fa3d0ca1e11d5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 25584, "upload_time": "2020-02-22T18:56:03", "upload_time_iso_8601": "2020-02-22T18:56:03.154576Z", "url": "https://files.pythonhosted.org/packages/05/b5/bb4856f00e52fcbb11452a81092ce26486283f4c9122772ba60ad6657c26/jai-0.0.9.2.tar.gz", "yanked": false}], "0.0.9.3": [{"comment_text": "", "digests": {"md5": "5d4da9c134eff142491011459e90897b", "sha256": "6fabed70993ddae8e8dd939cba64bbcf9872b51a78797709b7243bad44998434"}, "downloads": -1, "filename": "jai-0.0.9.3-py3-none-any.whl", "has_sig": false, "md5_digest": "5d4da9c134eff142491011459e90897b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 26673, "upload_time": "2020-02-22T19:58:27", "upload_time_iso_8601": "2020-02-22T19:58:27.634789Z", "url": "https://files.pythonhosted.org/packages/78/31/cc6a064cb1f0261caa572b351801d670b0af77fe7469a380dc47974f1b50/jai-0.0.9.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fc62e7da96877d3fa2d75dd4801875e9", "sha256": "10e348d98e7254fb8db13074fba769caaab9076765ae16a8487ea8fde6583224"}, "downloads": -1, "filename": "jai-0.0.9.3.tar.gz", "has_sig": false, "md5_digest": "fc62e7da96877d3fa2d75dd4801875e9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 26316, "upload_time": "2020-02-22T19:58:29", "upload_time_iso_8601": "2020-02-22T19:58:29.119350Z", "url": "https://files.pythonhosted.org/packages/11/23/d76f1fc618f84ef847751150d88dd3644a1a9c5b9cce3fdf3baadc12f43c/jai-0.0.9.3.tar.gz", "yanked": false}], "0.0.9.4": [{"comment_text": "", "digests": {"md5": "e48df5e8a1ccd1d36149b6d3d2da173b", "sha256": "fb6f25024edc470fa95126a7e6edee3e776538fb9ca2d260d381a5e6b16331b1"}, "downloads": -1, "filename": "jai-0.0.9.4-py3-none-any.whl", "has_sig": false, "md5_digest": "e48df5e8a1ccd1d36149b6d3d2da173b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 26679, "upload_time": "2020-02-23T06:23:35", "upload_time_iso_8601": "2020-02-23T06:23:35.515283Z", "url": "https://files.pythonhosted.org/packages/63/46/b6ea12ca429bf4971d22ddb979b6ee7fb2f199c6478c08fc176a225a1112/jai-0.0.9.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7dd793304a755db5f627dd47a8076cc5", "sha256": "890971af0a5f83ba87da6990c42eb7d92143e3e7d003d74dfd40b9b0f41de466"}, "downloads": -1, "filename": "jai-0.0.9.4.tar.gz", "has_sig": false, "md5_digest": "7dd793304a755db5f627dd47a8076cc5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 26332, "upload_time": "2020-02-23T06:23:36", "upload_time_iso_8601": "2020-02-23T06:23:36.949140Z", "url": "https://files.pythonhosted.org/packages/5f/67/f2bdcc7395b45e263db1b1ed0cc5f99667799d83fe5f147a656d211e0e48/jai-0.0.9.4.tar.gz", "yanked": false}], "0.0.9.5": [{"comment_text": "", "digests": {"md5": "c2754c0d399f28f329420122a08fe025", "sha256": "35fa4299f767a6e2d9a9191ab16b937f8b30c94c489b5eccd199504c60140036"}, "downloads": -1, "filename": "jai-0.0.9.5-py3-none-any.whl", "has_sig": false, "md5_digest": "c2754c0d399f28f329420122a08fe025", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 27890, "upload_time": "2020-02-24T04:12:51", "upload_time_iso_8601": "2020-02-24T04:12:51.753669Z", "url": "https://files.pythonhosted.org/packages/8f/2f/201039b774ab2d00b775c78c3ad315356448294ad5351b26fc44c7380df5/jai-0.0.9.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2415b12344b36fde70866a7e322ddffe", "sha256": "428f46bd4535702bfb915b603a867209bb41fb9b03b3118da8f42cabcdf2e40e"}, "downloads": -1, "filename": "jai-0.0.9.5.tar.gz", "has_sig": false, "md5_digest": "2415b12344b36fde70866a7e322ddffe", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 26976, "upload_time": "2020-02-24T04:12:53", "upload_time_iso_8601": "2020-02-24T04:12:53.193018Z", "url": "https://files.pythonhosted.org/packages/9b/58/9abe3f154f6e1d1a8bb039a22e0c6e27ab088a0048118a9a5c78f3367800/jai-0.0.9.5.tar.gz", "yanked": false}], "0.0.9.6": [{"comment_text": "", "digests": {"md5": "2c8f8e9d42045207e15f498970f90015", "sha256": "13d3aaa563191b30a8f71c0a29cb5e7663fb6499f317956db86c2c1140fcfa6f"}, "downloads": -1, "filename": "jai-0.0.9.6-py3-none-any.whl", "has_sig": false, "md5_digest": "2c8f8e9d42045207e15f498970f90015", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 28027, "upload_time": "2020-03-25T05:33:19", "upload_time_iso_8601": "2020-03-25T05:33:19.527314Z", "url": "https://files.pythonhosted.org/packages/50/e6/28c1878eec24cf763423f6467148f4e623e1ff9dc18018f621fc56d196dd/jai-0.0.9.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "afc31df8e0c588cbb5629e4acb21ad75", "sha256": "d9796928f162946789f78e6b4fc5f941ec566e1418e4c4a154b2cda928cf833a"}, "downloads": -1, "filename": "jai-0.0.9.6.tar.gz", "has_sig": false, "md5_digest": "afc31df8e0c588cbb5629e4acb21ad75", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 27117, "upload_time": "2020-03-25T05:33:21", "upload_time_iso_8601": "2020-03-25T05:33:21.177222Z", "url": "https://files.pythonhosted.org/packages/0c/f4/c9bf6918dccc298deabbf5ed6c79cb6758e317ff3cfc7300834dcf4d1353/jai-0.0.9.6.tar.gz", "yanked": false}], "0.0.9.7": [{"comment_text": "", "digests": {"md5": "5948860a745cd7641f2ebe9de02372b9", "sha256": "96296c6881ee88a58ee94c913c8591cc207dbb49fdf4f6717fff0362b920a547"}, "downloads": -1, "filename": "jai-0.0.9.7-py3-none-any.whl", "has_sig": false, "md5_digest": "5948860a745cd7641f2ebe9de02372b9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 28066, "upload_time": "2020-03-25T05:52:47", "upload_time_iso_8601": "2020-03-25T05:52:47.443509Z", "url": "https://files.pythonhosted.org/packages/45/5c/2ebbc1743c3740d1754ec00abef2ecb9ea984b3d4de92452f1d32a304c34/jai-0.0.9.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "096552b08a0274f55c3eee113a405d71", "sha256": "7fef1821ff263f4e4867ab95d11586f7da02505490586e8c6b6a76a494040b70"}, "downloads": -1, "filename": "jai-0.0.9.7.tar.gz", "has_sig": false, "md5_digest": "096552b08a0274f55c3eee113a405d71", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 27149, "upload_time": "2020-03-25T05:52:48", "upload_time_iso_8601": "2020-03-25T05:52:48.780472Z", "url": "https://files.pythonhosted.org/packages/2a/a9/a81e8876500cb511d3ed9bd2c7e7ca3d827b0f9fd0e22b66677495a5c581/jai-0.0.9.7.tar.gz", "yanked": false}], "0.0.9.8": [{"comment_text": "", "digests": {"md5": "58744e0b5c52a46e34d12de2fb6ed5b1", "sha256": "05982207826f86a7f26139695c99deeb3d5511c6482c1e6d933d6eafda5f679f"}, "downloads": -1, "filename": "jai-0.0.9.8-py3-none-any.whl", "has_sig": false, "md5_digest": "58744e0b5c52a46e34d12de2fb6ed5b1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 29456, "upload_time": "2020-03-30T02:42:49", "upload_time_iso_8601": "2020-03-30T02:42:49.296366Z", "url": "https://files.pythonhosted.org/packages/1d/e6/0e9e63904224da80686d2083846f65a90bab44b03065c3f3d5170e9a95ff/jai-0.0.9.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c638f6c096949cffe1588c3a8383c20d", "sha256": "161fddbf89906658052fc2202f888d8c24b16502c15c487d5a844b1ecd76aedb"}, "downloads": -1, "filename": "jai-0.0.9.8.tar.gz", "has_sig": false, "md5_digest": "c638f6c096949cffe1588c3a8383c20d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 28608, "upload_time": "2020-03-30T02:42:50", "upload_time_iso_8601": "2020-03-30T02:42:50.798122Z", "url": "https://files.pythonhosted.org/packages/91/08/a40e79ce785c76eea5e05a53c3bb832a8f89754c89a52d9f9ddfb6ae1e95/jai-0.0.9.8.tar.gz", "yanked": false}], "0.0.9.81": [{"comment_text": "", "digests": {"md5": "5afeeba2d2f8ebda87cbb2f7720ed8d2", "sha256": "464c1bb14fdf0757de19cfe781be182f8a0c4ff08e4620c9780f6d36437a47e2"}, "downloads": -1, "filename": "jai-0.0.9.81-py3-none-any.whl", "has_sig": false, "md5_digest": "5afeeba2d2f8ebda87cbb2f7720ed8d2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 28854, "upload_time": "2020-03-30T02:49:46", "upload_time_iso_8601": "2020-03-30T02:49:46.991171Z", "url": "https://files.pythonhosted.org/packages/a8/f2/271a9dd946bb66bd8d1c376981b582f14bf718bbbd1de34ce4a687d95336/jai-0.0.9.81-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4e93116b3e8b3328bf14342092a58db6", "sha256": "616fa8816f291cfffedeaf1dc31a83ce3cfaebb88d89174e447f110c4154f6bc"}, "downloads": -1, "filename": "jai-0.0.9.81.tar.gz", "has_sig": false, "md5_digest": "4e93116b3e8b3328bf14342092a58db6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 28236, "upload_time": "2020-03-30T02:49:48", "upload_time_iso_8601": "2020-03-30T02:49:48.205902Z", "url": "https://files.pythonhosted.org/packages/01/09/6a528295cb2f0921489b8d6fa77948879539d4e7699047baaca0d7d73a89/jai-0.0.9.81.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5afeeba2d2f8ebda87cbb2f7720ed8d2", "sha256": "464c1bb14fdf0757de19cfe781be182f8a0c4ff08e4620c9780f6d36437a47e2"}, "downloads": -1, "filename": "jai-0.0.9.81-py3-none-any.whl", "has_sig": false, "md5_digest": "5afeeba2d2f8ebda87cbb2f7720ed8d2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 28854, "upload_time": "2020-03-30T02:49:46", "upload_time_iso_8601": "2020-03-30T02:49:46.991171Z", "url": "https://files.pythonhosted.org/packages/a8/f2/271a9dd946bb66bd8d1c376981b582f14bf718bbbd1de34ce4a687d95336/jai-0.0.9.81-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4e93116b3e8b3328bf14342092a58db6", "sha256": "616fa8816f291cfffedeaf1dc31a83ce3cfaebb88d89174e447f110c4154f6bc"}, "downloads": -1, "filename": "jai-0.0.9.81.tar.gz", "has_sig": false, "md5_digest": "4e93116b3e8b3328bf14342092a58db6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 28236, "upload_time": "2020-03-30T02:49:48", "upload_time_iso_8601": "2020-03-30T02:49:48.205902Z", "url": "https://files.pythonhosted.org/packages/01/09/6a528295cb2f0921489b8d6fa77948879539d4e7699047baaca0d7d73a89/jai-0.0.9.81.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:53:21 2020"}