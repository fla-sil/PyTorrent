{"info": {"author": "G-Two", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Internet"], "description": "\n# subarulink\nA python package for interacting with the Subaru Starlink remote vehicle services API.  The API is useful to obtain information about a vehicle as well as actuate exposed features such as locks, horn, lights and remote start.\n\nThis package was developed primarily for enabling Home-Assistant integration, however it may also be used for standalone applications.  A basic python console application is included as an example.\n\nThis package only supports Subaru Starlink equipped vehicles with active Starlink subscriptions.  New PHEV Crosstreks include a 10 year subscription.  Your [MySubaru](https://www.mysubaru.com) account must be setup prior to using this package.\n\n**NOTE:** The functionality of this package has only been tested on a 2019 Subaru Crosstrek PHEV.  Newer (g2 API) vehicles should also work.  Older (g1 API) vehicles have not been tested.  Subaru has no official API; therefore, this library may stop working at any time without warning.  Use at your own risk.\n\n\n## Credits\n\nBased upon the [teslajsonpy](https://github.com/zabuldon/teslajsonpy) package developed by @zabuldon, licensed under Apache 2.0.\n\n\n## Home Assistant Integration\nDevelopment of a Home Assistant integration is in progress (using the Tesla integration as a template, credit to @zabuldon).  Once completed, a PR will be submitted to add the integration into the main Home Assistant repo.  Until then, it is available [here](https://github.com/G-Two/home-assistant/tree/subaru). \n\n## Installation\nOnce Home Assistant integration is complete, this package will be automatically installed as a dependency.  For those that would like to try the console application or use the package in their own application, install from PyPI:\n\n    $ pip install subarulink\n\n## Usage\nThe PyPI installation includes a basic interactive console application.  \n\n```\nusage: subarulink [-h] [-v {0,1,2}] [-r]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -v {0,1,2}, --verbosity {0,1,2}\n                        Verbosity Level: 0=Error[default] 2=Info 2=Debug\n  -r, --reset           Reset saved account information\n```\n\n\n## Known Issues\n### Battery Discharge\nAggressively polling the vehicle location with subarulink.Controller.update(vin) may discharge the auxiliary battery (in a PHEV).  Intermittent use isn't a problem, but polling at 5 minute intervals will drain the auxiliary battery fully after a few consecutive non-driving days.  The vehicle does report the auxiliary battery voltage with every update, so this can be avoided.  \n\nEffects of aggressive polling on the battery of a gasoline-only vehicle are unknown.\n\n### Erroneous data\nThe data returned by the Subaru API is sometimes invalid.\n* Tire Pressure returns invalid values unless queried immediately after vehicle is turned off.\n* EV Range is invalid immediately after vehicle is driven and turned off (vehicle seems to report a value that is near the hybrid drive range).\n* Data fields are sometimes omitted.\n\n### Incomplete data\nSome of the fields that would be useful are always reported back as \"UNKNOWN\".  Examples include door lock state, window state, etc.\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/G-Two/subarulink", "keywords": "", "license": "Apache-2.0", "maintainer": "", "maintainer_email": "", "name": "subarulink", "package_url": "https://pypi.org/project/subarulink/", "platform": "", "project_url": "https://pypi.org/project/subarulink/", "project_urls": {"Homepage": "https://github.com/G-Two/subarulink"}, "release_url": "https://pypi.org/project/subarulink/0.1.0/", "requires_dist": ["aiohttp", "stdiomask"], "requires_python": ">=3.6", "summary": "A package for interacting with Subaru Starlink Remote Services API.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>subarulink</h1>\n<p>A python package for interacting with the Subaru Starlink remote vehicle services API.  The API is useful to obtain information about a vehicle as well as actuate exposed features such as locks, horn, lights and remote start.</p>\n<p>This package was developed primarily for enabling Home-Assistant integration, however it may also be used for standalone applications.  A basic python console application is included as an example.</p>\n<p>This package only supports Subaru Starlink equipped vehicles with active Starlink subscriptions.  New PHEV Crosstreks include a 10 year subscription.  Your <a href=\"https://www.mysubaru.com\" rel=\"nofollow\">MySubaru</a> account must be setup prior to using this package.</p>\n<p><strong>NOTE:</strong> The functionality of this package has only been tested on a 2019 Subaru Crosstrek PHEV.  Newer (g2 API) vehicles should also work.  Older (g1 API) vehicles have not been tested.  Subaru has no official API; therefore, this library may stop working at any time without warning.  Use at your own risk.</p>\n<h2>Credits</h2>\n<p>Based upon the <a href=\"https://github.com/zabuldon/teslajsonpy\" rel=\"nofollow\">teslajsonpy</a> package developed by @zabuldon, licensed under Apache 2.0.</p>\n<h2>Home Assistant Integration</h2>\n<p>Development of a Home Assistant integration is in progress (using the Tesla integration as a template, credit to @zabuldon).  Once completed, a PR will be submitted to add the integration into the main Home Assistant repo.  Until then, it is available <a href=\"https://github.com/G-Two/home-assistant/tree/subaru\" rel=\"nofollow\">here</a>.</p>\n<h2>Installation</h2>\n<p>Once Home Assistant integration is complete, this package will be automatically installed as a dependency.  For those that would like to try the console application or use the package in their own application, install from PyPI:</p>\n<pre><code>$ pip install subarulink\n</code></pre>\n<h2>Usage</h2>\n<p>The PyPI installation includes a basic interactive console application.</p>\n<pre><code>usage: subarulink [-h] [-v {0,1,2}] [-r]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -v {0,1,2}, --verbosity {0,1,2}\n                        Verbosity Level: 0=Error[default] 2=Info 2=Debug\n  -r, --reset           Reset saved account information\n</code></pre>\n<h2>Known Issues</h2>\n<h3>Battery Discharge</h3>\n<p>Aggressively polling the vehicle location with subarulink.Controller.update(vin) may discharge the auxiliary battery (in a PHEV).  Intermittent use isn't a problem, but polling at 5 minute intervals will drain the auxiliary battery fully after a few consecutive non-driving days.  The vehicle does report the auxiliary battery voltage with every update, so this can be avoided.</p>\n<p>Effects of aggressive polling on the battery of a gasoline-only vehicle are unknown.</p>\n<h3>Erroneous data</h3>\n<p>The data returned by the Subaru API is sometimes invalid.</p>\n<ul>\n<li>Tire Pressure returns invalid values unless queried immediately after vehicle is turned off.</li>\n<li>EV Range is invalid immediately after vehicle is driven and turned off (vehicle seems to report a value that is near the hybrid drive range).</li>\n<li>Data fields are sometimes omitted.</li>\n</ul>\n<h3>Incomplete data</h3>\n<p>Some of the fields that would be useful are always reported back as \"UNKNOWN\".  Examples include door lock state, window state, etc.</p>\n\n          </div>"}, "last_serial": 7006435, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "55f2e29167de6b56398dc6777c0cd921", "sha256": "dc57161eb3e0b0b07b5f82f7ead2ab6aa55ec945b59760fa8b87ba4abc51ba03"}, "downloads": -1, "filename": "subarulink-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "55f2e29167de6b56398dc6777c0cd921", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 79006, "upload_time": "2020-04-12T21:36:42", "upload_time_iso_8601": "2020-04-12T21:36:42.654598Z", "url": "https://files.pythonhosted.org/packages/50/6a/a106580f1c495f025d8217a17d6d4b90a609aa7ae8e60d70bbfcc193e803/subarulink-0.1.0-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "55f2e29167de6b56398dc6777c0cd921", "sha256": "dc57161eb3e0b0b07b5f82f7ead2ab6aa55ec945b59760fa8b87ba4abc51ba03"}, "downloads": -1, "filename": "subarulink-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "55f2e29167de6b56398dc6777c0cd921", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 79006, "upload_time": "2020-04-12T21:36:42", "upload_time_iso_8601": "2020-04-12T21:36:42.654598Z", "url": "https://files.pythonhosted.org/packages/50/6a/a106580f1c495f025d8217a17d6d4b90a609aa7ae8e60d70bbfcc193e803/subarulink-0.1.0-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:00:46 2020"}