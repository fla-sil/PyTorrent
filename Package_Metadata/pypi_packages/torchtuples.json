{"info": {"author": "Haavard Kvamme", "author_email": "haavard.kvamme@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "# torchtuples \n\n[![Python package](https://github.com/havakv/torchtuples/workflows/Python%20package/badge.svg)](https://github.com/havakv/torchtuples/actions)\n[![PyPI](https://img.shields.io/pypi/v/torchtuples.svg)](https://pypi.org/project/torchtuples/)\n![PyPI - Python Version](https://img.shields.io/pypi/pyversions/torchtuples.svg)\n[![License](https://img.shields.io/badge/License-BSD%202--Clause-orange.svg)](https://github.com/havakv/torchtuples/blob/master/LICENSE)\n\n**torchtuples** is a small python package for training PyTorch models.\nIt works equally well for `numpy arrays` and `torch tensors`.\nOne of the main benefits of **torchtuples** is that it handles data in the form of nested tuples (see [example below](#example)).\n\n\n## Installation\n\n**torchtuples** depends on [PyTorch](https://pytorch.org/get-started/locally/) which should be installed from [HERE](https://pytorch.org/get-started/locally/).\n\nNext, **torchtuples** can be installed with pip:\n```bash\npip install torchtuples\n```\nFor the bleeding edge version, install directly from github (consider adding `--force-reinstall`):\n```bash\npip install git+git://github.com/havakv/torchtuples.git\n```\nor by cloning the repo:\n```bash\ngit clone https://github.com/havakv/torchtuples.git\ncd torchtuples\npython setup.py install\n```\n\n## Example\n\n```python\nimport torch\nfrom torch import nn\nfrom torchtuples import Model, optim\n```\nMake a data set with three sets of covariates `x0`, `x1` and `x2`, and a target `y`.\nThe covariates are structured in a nested tuple `x`.\n```python\nn = 500\nx0, x1, x2 = [torch.randn(n, 3) for _ in range(3)]\ny = torch.randn(n, 1)\nx = (x0, (x0, x1, x2))\n```\nCreate a simple ReLU net that takes as input the tensor `x_tensor` and the tuple `x_tuple`. Note that `x_tuple` can be of arbitrary length. The tensors in `x_tuple` are passed through a layer `lin_tuple`, averaged, and concatenated with `x_tensor`.\nWe then pass our new tensor through the layer `lin_cat`.\n```python\nclass Net(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.lin_tuple = nn.Linear(3, 2)\n        self.lin_cat = nn.Linear(5, 1)\n        self.relu = nn.ReLU()\n\n    def forward(self, x_tensor, x_tuple):\n        x = [self.relu(self.lin_tuple(xi)) for xi in x_tuple]\n        x = torch.stack(x).mean(0)\n        x = torch.cat([x, x_tensor], dim=1)\n        return self.lin_cat(x)\n\n    def predict(self, x_tensor, x_tuple):\n        x = self.forward(x_tensor, x_tuple)\n        return torch.sigmoid(x)\n```\n\nWe can now fit the model with\n```python\nmodel = Model(Net(), nn.MSELoss(), optim.SGD(0.01))\nlog = model.fit(x, y, batch_size=64, epochs=5)\n```\nand make predictions with either the `Net.predict` method\n```python\npreds = model.predict(x)\n```\nor with the `Net.forward` method\n```python\npreds = model.predict_net(x)\n```\n\nFor more examples, see the [examples folder](https://github.com/havakv/torchtuples/tree/master/examples).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/havakv/torchtuples", "keywords": "torchtuples", "license": "BSD license", "maintainer": "", "maintainer_email": "", "name": "torchtuples", "package_url": "https://pypi.org/project/torchtuples/", "platform": "", "project_url": "https://pypi.org/project/torchtuples/", "project_urls": {"Homepage": "https://github.com/havakv/torchtuples"}, "release_url": "https://pypi.org/project/torchtuples/0.2.0/", "requires_dist": ["numpy (>=1.15.4)", "pandas (>=0.24.2)", "matplotlib (>=3.0.3)"], "requires_python": ">=3.6", "summary": "Training neural networks in PyTorch", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>torchtuples</h1>\n<p><a href=\"https://github.com/havakv/torchtuples/actions\" rel=\"nofollow\"><img alt=\"Python package\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8f2c6e9a85a8c8147e5de1275f495c3eca7fce06/68747470733a2f2f6769746875622e636f6d2f686176616b762f746f7263687475706c65732f776f726b666c6f77732f507974686f6e2532307061636b6167652f62616467652e737667\"></a>\n<a href=\"https://pypi.org/project/torchtuples/\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/20c4249885de9f33995eb9a14d0c1f9f2ff0c529/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f746f7263687475706c65732e737667\"></a>\n<img alt=\"PyPI - Python Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8ac09782556e9c1f66e7e660185b2f39d560305d/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f746f7263687475706c65732e737667\">\n<a href=\"https://github.com/havakv/torchtuples/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7113cf74173470380bf04b021010808d24630d65/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d425344253230322d2d436c617573652d6f72616e67652e737667\"></a></p>\n<p><strong>torchtuples</strong> is a small python package for training PyTorch models.\nIt works equally well for <code>numpy arrays</code> and <code>torch tensors</code>.\nOne of the main benefits of <strong>torchtuples</strong> is that it handles data in the form of nested tuples (see <a href=\"#example\" rel=\"nofollow\">example below</a>).</p>\n<h2>Installation</h2>\n<p><strong>torchtuples</strong> depends on <a href=\"https://pytorch.org/get-started/locally/\" rel=\"nofollow\">PyTorch</a> which should be installed from <a href=\"https://pytorch.org/get-started/locally/\" rel=\"nofollow\">HERE</a>.</p>\n<p>Next, <strong>torchtuples</strong> can be installed with pip:</p>\n<pre>pip install torchtuples\n</pre>\n<p>For the bleeding edge version, install directly from github (consider adding <code>--force-reinstall</code>):</p>\n<pre>pip install git+git://github.com/havakv/torchtuples.git\n</pre>\n<p>or by cloning the repo:</p>\n<pre>git clone https://github.com/havakv/torchtuples.git\n<span class=\"nb\">cd</span> torchtuples\npython setup.py install\n</pre>\n<h2>Example</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">torch</span>\n<span class=\"kn\">from</span> <span class=\"nn\">torch</span> <span class=\"kn\">import</span> <span class=\"n\">nn</span>\n<span class=\"kn\">from</span> <span class=\"nn\">torchtuples</span> <span class=\"kn\">import</span> <span class=\"n\">Model</span><span class=\"p\">,</span> <span class=\"n\">optim</span>\n</pre>\n<p>Make a data set with three sets of covariates <code>x0</code>, <code>x1</code> and <code>x2</code>, and a target <code>y</code>.\nThe covariates are structured in a nested tuple <code>x</code>.</p>\n<pre><span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"mi\">500</span>\n<span class=\"n\">x0</span><span class=\"p\">,</span> <span class=\"n\">x1</span><span class=\"p\">,</span> <span class=\"n\">x2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)]</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">x0</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">x0</span><span class=\"p\">,</span> <span class=\"n\">x1</span><span class=\"p\">,</span> <span class=\"n\">x2</span><span class=\"p\">))</span>\n</pre>\n<p>Create a simple ReLU net that takes as input the tensor <code>x_tensor</code> and the tuple <code>x_tuple</code>. Note that <code>x_tuple</code> can be of arbitrary length. The tensors in <code>x_tuple</code> are passed through a layer <code>lin_tuple</code>, averaged, and concatenated with <code>x_tensor</code>.\nWe then pass our new tensor through the layer <code>lin_cat</code>.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Net</span><span class=\"p\">(</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">Module</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lin_tuple</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">Linear</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lin_cat</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">Linear</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">relu</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">ReLU</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">forward</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">x_tensor</span><span class=\"p\">,</span> <span class=\"n\">x_tuple</span><span class=\"p\">):</span>\n        <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">relu</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lin_tuple</span><span class=\"p\">(</span><span class=\"n\">xi</span><span class=\"p\">))</span> <span class=\"k\">for</span> <span class=\"n\">xi</span> <span class=\"ow\">in</span> <span class=\"n\">x_tuple</span><span class=\"p\">]</span>\n        <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">stack</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">cat</span><span class=\"p\">([</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">x_tensor</span><span class=\"p\">],</span> <span class=\"n\">dim</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lin_cat</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">predict</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">x_tensor</span><span class=\"p\">,</span> <span class=\"n\">x_tuple</span><span class=\"p\">):</span>\n        <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">forward</span><span class=\"p\">(</span><span class=\"n\">x_tensor</span><span class=\"p\">,</span> <span class=\"n\">x_tuple</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">sigmoid</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n</pre>\n<p>We can now fit the model with</p>\n<pre><span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Model</span><span class=\"p\">(</span><span class=\"n\">Net</span><span class=\"p\">(),</span> <span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">MSELoss</span><span class=\"p\">(),</span> <span class=\"n\">optim</span><span class=\"o\">.</span><span class=\"n\">SGD</span><span class=\"p\">(</span><span class=\"mf\">0.01</span><span class=\"p\">))</span>\n<span class=\"n\">log</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"n\">epochs</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n</pre>\n<p>and make predictions with either the <code>Net.predict</code> method</p>\n<pre><span class=\"n\">preds</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n</pre>\n<p>or with the <code>Net.forward</code> method</p>\n<pre><span class=\"n\">preds</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">predict_net</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n</pre>\n<p>For more examples, see the <a href=\"https://github.com/havakv/torchtuples/tree/master/examples\" rel=\"nofollow\">examples folder</a>.</p>\n\n          </div>"}, "last_serial": 6316497, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "f1027c44f0cf3c561df12d99f9d80f43", "sha256": "743cd12b2d66059b16987159ad8d7df51b809df72c65072c4af06390cf3da1a2"}, "downloads": -1, "filename": "torchtuples-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "f1027c44f0cf3c561df12d99f9d80f43", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 39480, "upload_time": "2019-11-24T14:03:23", "upload_time_iso_8601": "2019-11-24T14:03:23.258519Z", "url": "https://files.pythonhosted.org/packages/e8/c8/6f3568d8378ff07c2a0253c37f39b60ef34e37a8e3cdcb3be42cec8cb07a/torchtuples-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1b95913ed069caf9f2f7776d71dd407b", "sha256": "f1bb82b8e39210d27cb23c6ee1f52b22b2c73d0fc894fdb05fda9ce40b5101f8"}, "downloads": -1, "filename": "torchtuples-0.1.1.tar.gz", "has_sig": false, "md5_digest": "1b95913ed069caf9f2f7776d71dd407b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 35527, "upload_time": "2019-11-24T14:03:25", "upload_time_iso_8601": "2019-11-24T14:03:25.427223Z", "url": "https://files.pythonhosted.org/packages/f8/d4/9c1155a1adf5e1ae0388a7f04cb8dbb870be984ed72808911b99ae2fc776/torchtuples-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "a125d43c65efbe1a123486f88defb0ff", "sha256": "165267f8db221904635524bdef5e0bd0ddcf942bc9f087a672dce6339c69433a"}, "downloads": -1, "filename": "torchtuples-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "a125d43c65efbe1a123486f88defb0ff", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 40544, "upload_time": "2019-11-24T14:51:47", "upload_time_iso_8601": "2019-11-24T14:51:47.159634Z", "url": "https://files.pythonhosted.org/packages/01/4b/2c02c5c8cc3735d538fd39c957ac3fb8f4330f7d96401cf0e3974fcbd27a/torchtuples-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a0e00c1163f876029349e2345777a4ca", "sha256": "92e1e1fd7cbd8a11315e5c8c68e15f1bbe417134a1a665ec093a342a81393474"}, "downloads": -1, "filename": "torchtuples-0.1.2.tar.gz", "has_sig": false, "md5_digest": "a0e00c1163f876029349e2345777a4ca", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 36890, "upload_time": "2019-11-24T14:51:48", "upload_time_iso_8601": "2019-11-24T14:51:48.477685Z", "url": "https://files.pythonhosted.org/packages/a1/b8/016bff677128cbf7546bb081fbabc000615e0dca00bf41f9e7d585b58b1b/torchtuples-0.1.2.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "beeafd7e19342c9a812a52a4a1ce5caa", "sha256": "8ec9425663a184efead5af77bb17217bdcfcfc5926bcb089e41fd751e45ea16c"}, "downloads": -1, "filename": "torchtuples-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "beeafd7e19342c9a812a52a4a1ce5caa", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 41652, "upload_time": "2019-12-17T10:26:04", "upload_time_iso_8601": "2019-12-17T10:26:04.259565Z", "url": "https://files.pythonhosted.org/packages/95/70/93eb42c0a46ef94b3885b8e5611a8019d00522a9ab7343d4ca25033afd44/torchtuples-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a6c76cafa8957f00826f7a34059b501a", "sha256": "e4ee59891e3689faaa46b68d77753243ad2d71a52751b375478367cbfdd650db"}, "downloads": -1, "filename": "torchtuples-0.2.0.tar.gz", "has_sig": false, "md5_digest": "a6c76cafa8957f00826f7a34059b501a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 38029, "upload_time": "2019-12-17T10:26:05", "upload_time_iso_8601": "2019-12-17T10:26:05.623692Z", "url": "https://files.pythonhosted.org/packages/3a/36/df87d5b0a07990944b6e158508e55d8d6c3030178a70cb0474932074c29e/torchtuples-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "beeafd7e19342c9a812a52a4a1ce5caa", "sha256": "8ec9425663a184efead5af77bb17217bdcfcfc5926bcb089e41fd751e45ea16c"}, "downloads": -1, "filename": "torchtuples-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "beeafd7e19342c9a812a52a4a1ce5caa", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 41652, "upload_time": "2019-12-17T10:26:04", "upload_time_iso_8601": "2019-12-17T10:26:04.259565Z", "url": "https://files.pythonhosted.org/packages/95/70/93eb42c0a46ef94b3885b8e5611a8019d00522a9ab7343d4ca25033afd44/torchtuples-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a6c76cafa8957f00826f7a34059b501a", "sha256": "e4ee59891e3689faaa46b68d77753243ad2d71a52751b375478367cbfdd650db"}, "downloads": -1, "filename": "torchtuples-0.2.0.tar.gz", "has_sig": false, "md5_digest": "a6c76cafa8957f00826f7a34059b501a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 38029, "upload_time": "2019-12-17T10:26:05", "upload_time_iso_8601": "2019-12-17T10:26:05.623692Z", "url": "https://files.pythonhosted.org/packages/3a/36/df87d5b0a07990944b6e158508e55d8d6c3030178a70cb0474932074c29e/torchtuples-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:50:05 2020"}