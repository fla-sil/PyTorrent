{"info": {"author": "Szymon Maszke", "author_email": "szymon.maszke@protonmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Scientific/Engineering", "Topic :: Scientific/Engineering :: Artificial Intelligence", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "![torchlayers Logo](https://github.com/szymonmaszke/torchlayers/blob/master/assets/banner.png)\n\n--------------------------------------------------------------------------------\n\n\n| Version | Docs | Tests | Coverage | Style | PyPI | Python | PyTorch | Docker |\n|---------|------|-------|----------|-------|------|--------|---------|--------|\n| [![Version](https://img.shields.io/static/v1?label=&message=0.1.1&color=377EF0&style=for-the-badge)](https://github.com/szymonmaszke/torchlayers/releases) | [![Documentation](https://img.shields.io/static/v1?label=&message=docs&color=EE4C2C&style=for-the-badge)](https://szymonmaszke.github.io/torchlayers/)  | ![Tests](https://img.shields.io/github/workflow/status/szymonmaszke/torchlayers/test?label=%20&style=for-the-badge) | [![codecov](https://codecov.io/gh/szymonmaszke/torchlayers/branch/master/graph/badge.svg?token=GbZmdqbTWM)](https://codecov.io/gh/szymonmaszke/torchlayers) | [![codebeat badge](https://codebeat.co/badges/0e3d33b0-95a4-429c-8692-881a4ffeac6b)](https://codebeat.co/projects/github-com-szymonmaszke-torchlayers-master) | [![PyPI](https://img.shields.io/static/v1?label=&message=PyPI&color=377EF0&style=for-the-badge)](https://pypi.org/project/torchlayers/) | [![Python](https://img.shields.io/static/v1?label=&message=>=3.7&color=377EF0&style=for-the-badge&logo=python&logoColor=F8C63D)](https://www.python.org/) | [![PyTorch](https://img.shields.io/static/v1?label=&message=>=1.3.0&color=EE4C2C&style=for-the-badge)](https://pytorch.org/) | [![Docker](https://img.shields.io/static/v1?label=&message=docker&color=309cef&style=for-the-badge)](https://hub.docker.com/r/szymonmaszke/torchlayers) |\n\n[__torchlayers__](https://szymonmaszke.github.io/torchlayers/) is a library based on [__PyTorch__](https://pytorch.org/)\nproviding __automatic shape and dimensionality inference of `torch.nn` layers__ + additional\nbuilding blocks featured in current SOTA architectures (e.g. [Efficient-Net](https://arxiv.org/abs/1905.11946)).\n\nAbove requires no user intervention (except single call to `torchlayers.build`)\nsimilarly to the one seen in [__Keras__](https://www.tensorflow.org/guide/keras).\n\n### Main functionalities:\n\n* __Shape inference__ for most of `torch.nn` module (__convolutional, recurrent, transformer, attention and linear layers__)\n* __Dimensionality inference__ (e.g. `torchlayers.Conv` working as `torch.nn.Conv1d/2d/3d` based on `input shape`)\n* __Shape inference of custom modules__ (see examples section)\n* __Additional [Keras-like](https://www.tensorflow.org/guide/keras) layers__ (e.g. `torchlayers.Reshape` or `torchlayers.StandardNormalNoise`)\n* __Additional SOTA layers__ mostly from ImageNet competitions\n(e.g. [PolyNet](https://arxiv.org/abs/1608.06993),\n[Squeeze-And-Excitation](https://arxiv.org/abs/1709.01507),\n[StochasticDepth](www.arxiv.org/abs/1512.03385>))\n* __Useful defaults__ (`\"same\"` padding and default `kernel_size=3` for `Conv`, dropout rates etc.)\n* __Zero overhead and [torchscript](https://pytorch.org/docs/stable/jit.html) support__\n\n__Keep in mind this library works almost exactly like PyTorch originally__.\nWhat that means is you can use `Sequential`, __define your own networks of any complexity using\n`torch.nn.Module`__, create new layers with shape inference etc.\n\n_See below to get some intuition about library_.\n\n# Examples\n\nFor full functionality please check [__torchlayers documentation__](https://szymonmaszke.github.io/torchlayers/).\nBelow examples should introduce all necessary concepts you should know.\n\n## Basic classifier\n\n__All__ `torch.nn` modules can be used through `torchlayers` and __each module with input shape__\nwill be appropriately modified with it's input inferable counterpart.\n\n\n```python\nimport torchlayers as tl\n\n\nclass Classifier(tl.Module):\n    def __init__(self):\n        super().__init__()\n        self.conv1 = tl.Conv2d(64, kernel_size=6)\n        self.conv2 = tl.Conv2d(128, kernel_size=3)\n        self.conv3 = tl.Conv2d(256, kernel_size=3, padding=1)\n        # New layer, more on that in the next example\n        self.pooling = tl.GlobalMaxPool()\n        self.dense = tl.Linear(10)\n\n    def forward(self, x):\n        x = torch.relu(self.conv1(x))\n        x = torch.relu(self.conv2(x))\n        x = torch.relu(self.conv3(x))\n        return self.dense(self.pooling(x))\n\n# Pass model and any example inputs afterwards\nclf = tl.build(Classifier(), torch.randn(1, 3, 32, 32))\n```\n\nAbove `torchlayers.Linear(out_features=10)` is used. It is \"equivalent\" to\noriginal PyTorch's `torch.nn.Linear(in_features=?, out_features=10)` where `in_features`\nwill be inferred from example input input during `torchlayers.build` call.\n\nSame thing happens with `torch.nn.Conv2d(in_channels, out_channels, kernel_size, ...)`\nwhich can be replaced directly by `tl.Conv2d(out_channels, kernel_size, ...)`.\n\n__Just remember to pass example input through the network!__\n\n## Simple image and text classifier in one!\n\n* We will use single \"model\" for both tasks.\nFirstly let's define it using `torch.nn` and `torchlayers`:\n\n```python\nimport torch\nimport torchlayers as tl\n\n# torch.nn and torchlayers can be mixed easily\nmodel = torch.nn.Sequential(\n    tl.Conv(64),  # specify ONLY out_channels\n    torch.nn.ReLU(),  # use torch.nn wherever you wish\n    tl.BatchNorm(),  # BatchNormNd inferred from input\n    tl.Conv(128),  # Default kernel_size equal to 3\n    tl.ReLU(),\n    tl.Conv(256, kernel_size=11),  # \"same\" padding as default\n    tl.GlobalMaxPool(),  # Known from Keras\n    tl.Linear(10),  # Output for 10 classes\n)\n\nprint(model)\n```\n\nAbove would give you model's summary like this (__notice question marks for not yet inferred values__):\n\n```python\nSequential(\n  (0): Conv(in_channels=?, out_channels=64, kernel_size=3, stride=1, padding=same, dilation=1, groups=1, bias=True, padding_mode=zeros)\n  (1): ReLU()\n  (2): BatchNorm(num_features=?, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n  (3): Conv(in_channels=?, out_channels=128, kernel_size=3, stride=1, padding=same, dilation=1, groups=1, bias=True, padding_mode=zeros)\n  (4): ReLU()\n  (5): Conv(in_channels=?, out_channels=256, kernel_size=11, stride=1, padding=same, dilation=1, groups=1, bias=True, padding_mode=zeros)\n  (6): GlobalMaxPool()\n  (7): Linear(in_features=?, out_features=10, bias=True)\n)\n```\n\n* Now you can __build__/instantiate your model with example input (in this case MNIST-like):\n\n```python\nmnist_model = tl.build(model, torch.randn(1, 3, 28, 28))\n```\n\n* Or if it's text classification you are after, same model could be built with different\n`input shape` (e.g. for text classification using `300` dimensional pretrained embedding):\n\n```python\n# [batch, embedding, timesteps], first dimension > 1 for BatchNorm1d to work\ntext_model = tl.build(model, torch.randn(2, 300, 1))\n```\n\n* Finally, you can `print` both models after instantiation, provided below side\nby-side for readability (__notice different dimenstionality, e.g. `Conv2d` vs `Conv1d` after `torchlayers.build`__):\n\n```python\n                # TEXT CLASSIFIER                 MNIST CLASSIFIER\n\n                Sequential(                       Sequential(\n                  (0): Conv1d(300, 64)              (0): Conv2d(3, 64)\n                  (1): ReLU()                       (1): ReLU()\n                  (2): BatchNorm1d(64)              (2): BatchNorm2d(64)\n                  (3): Conv1d(64, 128)              (3): Conv2d(64, 128)\n                  (4): ReLU()                       (4): ReLU()\n                  (5): Conv1d(128, 256)             (5): Conv2d(128, 256)\n                  (6): GlobalMaxPool()              (6): GlobalMaxPool()\n                  (7): Linear(256, 10)              (7): Linear(256, 10)\n                )                                 )\n```\n\nAs you can see both modules \"compiled\" into original `pytorch` layers.\n\n## Custom modules with shape inference capabilities\n\nUser can define any module and make it shape inferable with `torchlayers.infer`\nfunction:\n\n```python\n # Class defined with in_features\n # It might be a good practice to use _ prefix and Impl as postfix\n # to differentiate from shape inferable version\nclass _MyLinearImpl(torch.nn.Module):\n    def __init__(self, in_features: int, out_features: int):\n        super().__init__()\n        self.weight = torch.nn.Parameter(torch.randn(out_features, in_features))\n        self.bias = torch.nn.Parameter(torch.randn(out_features))\n\n    def forward(self, inputs):\n        return torch.nn.functional.linear(inputs, self.weight, self.bias)\n\nMyLinear = tl.infer(_MyLinearImpl)\n\n# Build and use just like any other layer in this library\nlayer =tl.build(MyLinear(out_features=32), torch.randn(1, 64))\nlayer(torch.randn(1, 64))\n```\n\nBy default `inputs.shape[1]` will be used as `in_features` value\nduring initial `forward` pass. If you wish to use different `index` (e.g. to infer using\n`inputs.shape[3]`) use `MyLayer = tl.infer(_MyLayerImpl, index=3)` as a decorator.\n\n## Autoencoder with inverted residual bottleneck and pixel shuffle\n\nPlease check code comments and [__documentation__](https://szymonmaszke.github.io/torchlayers/)\nif needed. If you are unsure what autoencoder is you could see\n[__this example blog post__](https://towardsdatascience.com/auto-encoder-what-is-it-and-what-is-it-used-for-part-1-3e5c6f017726).\n\nBelow is a convolutional denoising autoencoder example for `ImageNet`-like images.\nThink of it like a demonstration of capabilities of different layers\nand building blocks provided by `torchlayers`.\n\n\n```python\n# Input - 3 x 256 x 256 for ImageNet reconstruction\nclass AutoEncoder(torch.nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.encoder = tl.Sequential(\n            tl.StandardNormalNoise(),  # Apply noise to input images\n            tl.Conv(64, kernel_size=7),\n            tl.activations.Swish(),  # Direct access to module .activations\n            tl.InvertedResidualBottleneck(squeeze_excitation=False),\n            tl.AvgPool(),  # shape 64 x 128 x 128, kernel_size=2 by default\n            tl.HardSwish(),  # Access simply through tl\n            tl.SeparableConv(128),  # Up number of channels to 128\n            tl.InvertedResidualBottleneck(),  # Default with squeeze excitation\n            torch.nn.ReLU(),\n            tl.AvgPool(),  # shape 128 x 64 x 64, kernel_size=2 by default\n            tl.DepthwiseConv(256),  # DepthwiseConv easier to use\n            # Pass input thrice through the same weights like in PolyNet\n            tl.Poly(tl.InvertedResidualBottleneck(), order=3),\n            tl.ReLU(),  # all torch.nn can be accessed via tl\n            tl.MaxPool(),  # shape 256 x 32 x 32\n            tl.Fire(out_channels=512),  # shape 512 x 32 x 32\n            tl.SqueezeExcitation(hidden=64),\n            tl.InvertedResidualBottleneck(),\n            tl.MaxPool(),  # shape 512 x 16 x 16\n            tl.InvertedResidualBottleneck(squeeze_excitation=False),\n            # Randomly switch off the last two layers with 0.5 probability\n            tl.StochasticDepth(\n                torch.nn.Sequential(\n                    tl.InvertedResidualBottleneck(squeeze_excitation=False),\n                    tl.InvertedResidualBottleneck(squeeze_excitation=False),\n                ),\n                p=0.5,\n            ),\n            tl.AvgPool(),  # shape 512 x 8 x 8\n        )\n\n        # This one is more \"standard\"\n        self.decoder = tl.Sequential(\n            tl.Poly(tl.InvertedResidualBottleneck(), order=2),\n            # Has ICNR initialization by default after calling `build`\n            tl.ConvPixelShuffle(out_channels=512, upscale_factor=2),\n            # Shape 512 x 16 x 16 after PixelShuffle\n            tl.Poly(tl.InvertedResidualBottleneck(), order=3),\n            tl.ConvPixelShuffle(out_channels=256, upscale_factor=2),\n            # Shape 256 x 32 x 32\n            tl.Poly(tl.InvertedResidualBottleneck(), order=3),\n            tl.ConvPixelShuffle(out_channels=128, upscale_factor=2),\n            # Shape 128 x 64 x 64\n            tl.Poly(tl.InvertedResidualBottleneck(), order=4),\n            tl.ConvPixelShuffle(out_channels=64, upscale_factor=2),\n            # Shape 64 x 128 x 128\n            tl.InvertedResidualBottleneck(),\n            tl.Conv(256),\n            tl.Dropout(),  # Defaults to 0.5 and Dropout2d for images\n            tl.Swish(),\n            tl.InstanceNorm(),\n            tl.ConvPixelShuffle(out_channels=32, upscale_factor=2),\n            # Shape 32 x 256 x 256\n            tl.Conv(16),\n            tl.Swish(),\n            tl.Conv(3),\n            # Shape 3 x 256 x 256\n        )\n\n    def forward(self, inputs):\n        return self.decoder(self.encoder(inputs))\n```\n\nNow one can instantiate the module and use it with `torch.nn.MSELoss` as per usual.\n\n```python\nautoencoder = tl.build(AutoEncoder(), torch.randn(1, 3, 256, 256))\n```\n\n# Installation\n\n## [pip](<https://pypi.org/project/torchlayers/>)\n\n### Latest release:\n\n```shell\npip install --user torchlayers\n```\n\n### Nightly:\n\n```shell\npip install --user torchlayers-nightly\n```\n\n## [Docker](https://hub.docker.com/r/szymonmaszke/torchlayers)\n\n__CPU standalone__ and various versions of __GPU enabled__ images are available\nat [dockerhub](https://hub.docker.com/r/szymonmaszke/torchlayers/tags).\n\nFor CPU quickstart, issue:\n\n```shell\ndocker pull szymonmaszke/torchlayers:18.04\n```\n\nNightly builds are also available, just prefix tag with `nightly_`. If you are going for `GPU` image make sure you have\n[nvidia/docker](https://github.com/NVIDIA/nvidia-docker) installed and it's runtime set.\n\n# Contributing\n\nIf you find issue or would like to see some functionality (or implement one), please [open new Issue](https://help.github.com/en/articles/creating-an-issue) or [create Pull Request](https://help.github.com/en/articles/creating-a-pull-request-from-a-fork).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/pypa/torchlayers", "keywords": "pytorch keras input inference automatic shape layers sota custom imagenet resnet efficientnet", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "torchlayers-nightly", "package_url": "https://pypi.org/project/torchlayers-nightly/", "platform": "", "project_url": "https://pypi.org/project/torchlayers-nightly/", "project_urls": {"Documentation": "https://szymonmaszke.github.io/torchlayers/#torchlayers", "Homepage": "https://github.com/pypa/torchlayers", "Issues": "https://github.com/szymonmaszke/torchlayers/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc", "Website": "https://szymonmaszke.github.io/torchlayers"}, "release_url": "https://pypi.org/project/torchlayers-nightly/1588896286/", "requires_dist": ["torch (>=1.3.0)"], "requires_python": ">=3.7", "summary": "Input shape inference and SOTA custom layers for PyTorch.", "version": "1588896286", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><img alt=\"torchlayers Logo\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/dd4c4c93cbb6270eea9812fb7af662715bd5b71d/68747470733a2f2f6769746875622e636f6d2f737a796d6f6e6d61737a6b652f746f7263686c61796572732f626c6f622f6d61737465722f6173736574732f62616e6e65722e706e67\"></p>\n<hr>\n<table>\n<thead>\n<tr>\n<th>Version</th>\n<th>Docs</th>\n<th>Tests</th>\n<th>Coverage</th>\n<th>Style</th>\n<th>PyPI</th>\n<th>Python</th>\n<th>PyTorch</th>\n<th>Docker</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/szymonmaszke/torchlayers/releases\" rel=\"nofollow\"><img alt=\"Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3f6b5ce473a6927500ca9c3ac8e20df046106bb6/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f6c6162656c3d266d6573736167653d302e312e3126636f6c6f723d333737454630267374796c653d666f722d7468652d6261646765\"></a></td>\n<td><a href=\"https://szymonmaszke.github.io/torchlayers/\" rel=\"nofollow\"><img alt=\"Documentation\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/611e23036e6193a0da20bfe66381e1f1c7ff1a62/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f6c6162656c3d266d6573736167653d646f637326636f6c6f723d454534433243267374796c653d666f722d7468652d6261646765\"></a></td>\n<td><img alt=\"Tests\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8f4c0864e22dbd8c402c3a805f25854c3b632c43/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f776f726b666c6f772f7374617475732f737a796d6f6e6d61737a6b652f746f7263686c61796572732f746573743f6c6162656c3d253230267374796c653d666f722d7468652d6261646765\"></td>\n<td><a href=\"https://codecov.io/gh/szymonmaszke/torchlayers\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ec31769c9cedd0eb2f5b8ffe329c4b437c50293c/68747470733a2f2f636f6465636f762e696f2f67682f737a796d6f6e6d61737a6b652f746f7263686c61796572732f6272616e63682f6d61737465722f67726170682f62616467652e7376673f746f6b656e3d47625a6d64716254574d\"></a></td>\n<td><a href=\"https://codebeat.co/projects/github-com-szymonmaszke-torchlayers-master\" rel=\"nofollow\"><img alt=\"codebeat badge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fdc871012e063d5495e3712b98efe35f023b511c/68747470733a2f2f636f6465626561742e636f2f6261646765732f30653364333362302d393561342d343239632d383639322d383831613466666561633662\"></a></td>\n<td><a href=\"https://pypi.org/project/torchlayers/\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8215dcd37002b6dcc738f2b879bfe91408b52b43/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f6c6162656c3d266d6573736167653d5079504926636f6c6f723d333737454630267374796c653d666f722d7468652d6261646765\"></a></td>\n<td><a href=\"https://www.python.org/\" rel=\"nofollow\"><img alt=\"Python\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a30b1b56ad502322578a21315c4d7122638b8bf6/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f6c6162656c3d266d6573736167653d2533453d332e3726636f6c6f723d333737454630267374796c653d666f722d7468652d6261646765266c6f676f3d707974686f6e266c6f676f436f6c6f723d463843363344\"></a></td>\n<td><a href=\"https://pytorch.org/\" rel=\"nofollow\"><img alt=\"PyTorch\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8fdfc6038c71671a2da2f77af4d8dbf8b3a4709f/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f6c6162656c3d266d6573736167653d2533453d312e332e3026636f6c6f723d454534433243267374796c653d666f722d7468652d6261646765\"></a></td>\n<td><a href=\"https://hub.docker.com/r/szymonmaszke/torchlayers\" rel=\"nofollow\"><img alt=\"Docker\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/72872e5a621755bfa1dcadaa1447fb18ac0ad0e8/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f6c6162656c3d266d6573736167653d646f636b657226636f6c6f723d333039636566267374796c653d666f722d7468652d6261646765\"></a></td>\n</tr></tbody></table>\n<p><a href=\"https://szymonmaszke.github.io/torchlayers/\" rel=\"nofollow\"><strong>torchlayers</strong></a> is a library based on <a href=\"https://pytorch.org/\" rel=\"nofollow\"><strong>PyTorch</strong></a>\nproviding <strong>automatic shape and dimensionality inference of <code>torch.nn</code> layers</strong> + additional\nbuilding blocks featured in current SOTA architectures (e.g. <a href=\"https://arxiv.org/abs/1905.11946\" rel=\"nofollow\">Efficient-Net</a>).</p>\n<p>Above requires no user intervention (except single call to <code>torchlayers.build</code>)\nsimilarly to the one seen in <a href=\"https://www.tensorflow.org/guide/keras\" rel=\"nofollow\"><strong>Keras</strong></a>.</p>\n<h3>Main functionalities:</h3>\n<ul>\n<li><strong>Shape inference</strong> for most of <code>torch.nn</code> module (<strong>convolutional, recurrent, transformer, attention and linear layers</strong>)</li>\n<li><strong>Dimensionality inference</strong> (e.g. <code>torchlayers.Conv</code> working as <code>torch.nn.Conv1d/2d/3d</code> based on <code>input shape</code>)</li>\n<li><strong>Shape inference of custom modules</strong> (see examples section)</li>\n<li><strong>Additional <a href=\"https://www.tensorflow.org/guide/keras\" rel=\"nofollow\">Keras-like</a> layers</strong> (e.g. <code>torchlayers.Reshape</code> or <code>torchlayers.StandardNormalNoise</code>)</li>\n<li><strong>Additional SOTA layers</strong> mostly from ImageNet competitions\n(e.g. <a href=\"https://arxiv.org/abs/1608.06993\" rel=\"nofollow\">PolyNet</a>,\n<a href=\"https://arxiv.org/abs/1709.01507\" rel=\"nofollow\">Squeeze-And-Excitation</a>,\n<a href=\"www.arxiv.org/abs/1512.03385%3E\" rel=\"nofollow\">StochasticDepth</a>)</li>\n<li><strong>Useful defaults</strong> (<code>\"same\"</code> padding and default <code>kernel_size=3</code> for <code>Conv</code>, dropout rates etc.)</li>\n<li><strong>Zero overhead and <a href=\"https://pytorch.org/docs/stable/jit.html\" rel=\"nofollow\">torchscript</a> support</strong></li>\n</ul>\n<p><strong>Keep in mind this library works almost exactly like PyTorch originally</strong>.\nWhat that means is you can use <code>Sequential</code>, <strong>define your own networks of any complexity using\n<code>torch.nn.Module</code></strong>, create new layers with shape inference etc.</p>\n<p><em>See below to get some intuition about library</em>.</p>\n<h1>Examples</h1>\n<p>For full functionality please check <a href=\"https://szymonmaszke.github.io/torchlayers/\" rel=\"nofollow\"><strong>torchlayers documentation</strong></a>.\nBelow examples should introduce all necessary concepts you should know.</p>\n<h2>Basic classifier</h2>\n<p><strong>All</strong> <code>torch.nn</code> modules can be used through <code>torchlayers</code> and <strong>each module with input shape</strong>\nwill be appropriately modified with it's input inferable counterpart.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">torchlayers</span> <span class=\"k\">as</span> <span class=\"nn\">tl</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Classifier</span><span class=\"p\">(</span><span class=\"n\">tl</span><span class=\"o\">.</span><span class=\"n\">Module</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">conv1</span> <span class=\"o\">=</span> <span class=\"n\">tl</span><span class=\"o\">.</span><span class=\"n\">Conv2d</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"mi\">6</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">conv2</span> <span class=\"o\">=</span> <span class=\"n\">tl</span><span class=\"o\">.</span><span class=\"n\">Conv2d</span><span class=\"p\">(</span><span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">conv3</span> <span class=\"o\">=</span> <span class=\"n\">tl</span><span class=\"o\">.</span><span class=\"n\">Conv2d</span><span class=\"p\">(</span><span class=\"mi\">256</span><span class=\"p\">,</span> <span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"c1\"># New layer, more on that in the next example</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pooling</span> <span class=\"o\">=</span> <span class=\"n\">tl</span><span class=\"o\">.</span><span class=\"n\">GlobalMaxPool</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dense</span> <span class=\"o\">=</span> <span class=\"n\">tl</span><span class=\"o\">.</span><span class=\"n\">Linear</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">forward</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">):</span>\n        <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">relu</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">conv1</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span>\n        <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">relu</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">conv2</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span>\n        <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">relu</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">conv3</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dense</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pooling</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Pass model and any example inputs afterwards</span>\n<span class=\"n\">clf</span> <span class=\"o\">=</span> <span class=\"n\">tl</span><span class=\"o\">.</span><span class=\"n\">build</span><span class=\"p\">(</span><span class=\"n\">Classifier</span><span class=\"p\">(),</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"mi\">32</span><span class=\"p\">))</span>\n</pre>\n<p>Above <code>torchlayers.Linear(out_features=10)</code> is used. It is \"equivalent\" to\noriginal PyTorch's <code>torch.nn.Linear(in_features=?, out_features=10)</code> where <code>in_features</code>\nwill be inferred from example input input during <code>torchlayers.build</code> call.</p>\n<p>Same thing happens with <code>torch.nn.Conv2d(in_channels, out_channels, kernel_size, ...)</code>\nwhich can be replaced directly by <code>tl.Conv2d(out_channels, kernel_size, ...)</code>.</p>\n<p><strong>Just remember to pass example input through the network!</strong></p>\n<h2>Simple image and text classifier in one!</h2>\n<ul>\n<li>We will use single \"model\" for both tasks.\nFirstly let's define it using <code>torch.nn</code> and <code>torchlayers</code>:</li>\n</ul>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">torch</span>\n<span class=\"kn\">import</span> <span class=\"nn\">torchlayers</span> <span class=\"k\">as</span> <span class=\"nn\">tl</span>\n\n<span class=\"c1\"># torch.nn and torchlayers can be mixed easily</span>\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">Sequential</span><span class=\"p\">(</span>\n    <span class=\"n\">tl</span><span class=\"o\">.</span><span class=\"n\">Conv</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">),</span>  <span class=\"c1\"># specify ONLY out_channels</span>\n    <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">ReLU</span><span class=\"p\">(),</span>  <span class=\"c1\"># use torch.nn wherever you wish</span>\n    <span class=\"n\">tl</span><span class=\"o\">.</span><span class=\"n\">BatchNorm</span><span class=\"p\">(),</span>  <span class=\"c1\"># BatchNormNd inferred from input</span>\n    <span class=\"n\">tl</span><span class=\"o\">.</span><span class=\"n\">Conv</span><span class=\"p\">(</span><span class=\"mi\">128</span><span class=\"p\">),</span>  <span class=\"c1\"># Default kernel_size equal to 3</span>\n    <span class=\"n\">tl</span><span class=\"o\">.</span><span class=\"n\">ReLU</span><span class=\"p\">(),</span>\n    <span class=\"n\">tl</span><span class=\"o\">.</span><span class=\"n\">Conv</span><span class=\"p\">(</span><span class=\"mi\">256</span><span class=\"p\">,</span> <span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"mi\">11</span><span class=\"p\">),</span>  <span class=\"c1\"># \"same\" padding as default</span>\n    <span class=\"n\">tl</span><span class=\"o\">.</span><span class=\"n\">GlobalMaxPool</span><span class=\"p\">(),</span>  <span class=\"c1\"># Known from Keras</span>\n    <span class=\"n\">tl</span><span class=\"o\">.</span><span class=\"n\">Linear</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">),</span>  <span class=\"c1\"># Output for 10 classes</span>\n<span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">)</span>\n</pre>\n<p>Above would give you model's summary like this (<strong>notice question marks for not yet inferred values</strong>):</p>\n<pre><span class=\"n\">Sequential</span><span class=\"p\">(</span>\n  <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"n\">Conv</span><span class=\"p\">(</span><span class=\"n\">in_channels</span><span class=\"o\">=</span><span class=\"err\">?</span><span class=\"p\">,</span> <span class=\"n\">out_channels</span><span class=\"o\">=</span><span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"n\">same</span><span class=\"p\">,</span> <span class=\"n\">dilation</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">groups</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">padding_mode</span><span class=\"o\">=</span><span class=\"n\">zeros</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">):</span> <span class=\"n\">ReLU</span><span class=\"p\">()</span>\n  <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">):</span> <span class=\"n\">BatchNorm</span><span class=\"p\">(</span><span class=\"n\">num_features</span><span class=\"o\">=</span><span class=\"err\">?</span><span class=\"p\">,</span> <span class=\"n\">eps</span><span class=\"o\">=</span><span class=\"mf\">1e-05</span><span class=\"p\">,</span> <span class=\"n\">momentum</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">track_running_stats</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">):</span> <span class=\"n\">Conv</span><span class=\"p\">(</span><span class=\"n\">in_channels</span><span class=\"o\">=</span><span class=\"err\">?</span><span class=\"p\">,</span> <span class=\"n\">out_channels</span><span class=\"o\">=</span><span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"n\">same</span><span class=\"p\">,</span> <span class=\"n\">dilation</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">groups</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">padding_mode</span><span class=\"o\">=</span><span class=\"n\">zeros</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">):</span> <span class=\"n\">ReLU</span><span class=\"p\">()</span>\n  <span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">):</span> <span class=\"n\">Conv</span><span class=\"p\">(</span><span class=\"n\">in_channels</span><span class=\"o\">=</span><span class=\"err\">?</span><span class=\"p\">,</span> <span class=\"n\">out_channels</span><span class=\"o\">=</span><span class=\"mi\">256</span><span class=\"p\">,</span> <span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"n\">same</span><span class=\"p\">,</span> <span class=\"n\">dilation</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">groups</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">padding_mode</span><span class=\"o\">=</span><span class=\"n\">zeros</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">):</span> <span class=\"n\">GlobalMaxPool</span><span class=\"p\">()</span>\n  <span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">):</span> <span class=\"n\">Linear</span><span class=\"p\">(</span><span class=\"n\">in_features</span><span class=\"o\">=</span><span class=\"err\">?</span><span class=\"p\">,</span> <span class=\"n\">out_features</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</pre>\n<ul>\n<li>Now you can <strong>build</strong>/instantiate your model with example input (in this case MNIST-like):</li>\n</ul>\n<pre><span class=\"n\">mnist_model</span> <span class=\"o\">=</span> <span class=\"n\">tl</span><span class=\"o\">.</span><span class=\"n\">build</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">28</span><span class=\"p\">,</span> <span class=\"mi\">28</span><span class=\"p\">))</span>\n</pre>\n<ul>\n<li>Or if it's text classification you are after, same model could be built with different\n<code>input shape</code> (e.g. for text classification using <code>300</code> dimensional pretrained embedding):</li>\n</ul>\n<pre><span class=\"c1\"># [batch, embedding, timesteps], first dimension &gt; 1 for BatchNorm1d to work</span>\n<span class=\"n\">text_model</span> <span class=\"o\">=</span> <span class=\"n\">tl</span><span class=\"o\">.</span><span class=\"n\">build</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n</pre>\n<ul>\n<li>Finally, you can <code>print</code> both models after instantiation, provided below side\nby-side for readability (<strong>notice different dimenstionality, e.g. <code>Conv2d</code> vs <code>Conv1d</code> after <code>torchlayers.build</code></strong>):</li>\n</ul>\n<pre>                <span class=\"c1\"># TEXT CLASSIFIER                 MNIST CLASSIFIER</span>\n\n                <span class=\"n\">Sequential</span><span class=\"p\">(</span>                       <span class=\"n\">Sequential</span><span class=\"p\">(</span>\n                  <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"n\">Conv1d</span><span class=\"p\">(</span><span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"mi\">64</span><span class=\"p\">)</span>              <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"n\">Conv2d</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">64</span><span class=\"p\">)</span>\n                  <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">):</span> <span class=\"n\">ReLU</span><span class=\"p\">()</span>                       <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">):</span> <span class=\"n\">ReLU</span><span class=\"p\">()</span>\n                  <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">):</span> <span class=\"n\">BatchNorm1d</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">)</span>              <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">):</span> <span class=\"n\">BatchNorm2d</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">)</span>\n                  <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">):</span> <span class=\"n\">Conv1d</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"mi\">128</span><span class=\"p\">)</span>              <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">):</span> <span class=\"n\">Conv2d</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"mi\">128</span><span class=\"p\">)</span>\n                  <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">):</span> <span class=\"n\">ReLU</span><span class=\"p\">()</span>                       <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">):</span> <span class=\"n\">ReLU</span><span class=\"p\">()</span>\n                  <span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">):</span> <span class=\"n\">Conv1d</span><span class=\"p\">(</span><span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"mi\">256</span><span class=\"p\">)</span>             <span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">):</span> <span class=\"n\">Conv2d</span><span class=\"p\">(</span><span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"mi\">256</span><span class=\"p\">)</span>\n                  <span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">):</span> <span class=\"n\">GlobalMaxPool</span><span class=\"p\">()</span>              <span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">):</span> <span class=\"n\">GlobalMaxPool</span><span class=\"p\">()</span>\n                  <span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">):</span> <span class=\"n\">Linear</span><span class=\"p\">(</span><span class=\"mi\">256</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>              <span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">):</span> <span class=\"n\">Linear</span><span class=\"p\">(</span><span class=\"mi\">256</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n                <span class=\"p\">)</span>                                 <span class=\"p\">)</span>\n</pre>\n<p>As you can see both modules \"compiled\" into original <code>pytorch</code> layers.</p>\n<h2>Custom modules with shape inference capabilities</h2>\n<p>User can define any module and make it shape inferable with <code>torchlayers.infer</code>\nfunction:</p>\n<pre> <span class=\"c1\"># Class defined with in_features</span>\n <span class=\"c1\"># It might be a good practice to use _ prefix and Impl as postfix</span>\n <span class=\"c1\"># to differentiate from shape inferable version</span>\n<span class=\"k\">class</span> <span class=\"nc\">_MyLinearImpl</span><span class=\"p\">(</span><span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">Module</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">in_features</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">out_features</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">weight</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">Parameter</span><span class=\"p\">(</span><span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"n\">out_features</span><span class=\"p\">,</span> <span class=\"n\">in_features</span><span class=\"p\">))</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">bias</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">Parameter</span><span class=\"p\">(</span><span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"n\">out_features</span><span class=\"p\">))</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">forward</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">inputs</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">functional</span><span class=\"o\">.</span><span class=\"n\">linear</span><span class=\"p\">(</span><span class=\"n\">inputs</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">weight</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">bias</span><span class=\"p\">)</span>\n\n<span class=\"n\">MyLinear</span> <span class=\"o\">=</span> <span class=\"n\">tl</span><span class=\"o\">.</span><span class=\"n\">infer</span><span class=\"p\">(</span><span class=\"n\">_MyLinearImpl</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Build and use just like any other layer in this library</span>\n<span class=\"n\">layer</span> <span class=\"o\">=</span><span class=\"n\">tl</span><span class=\"o\">.</span><span class=\"n\">build</span><span class=\"p\">(</span><span class=\"n\">MyLinear</span><span class=\"p\">(</span><span class=\"n\">out_features</span><span class=\"o\">=</span><span class=\"mi\">32</span><span class=\"p\">),</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">64</span><span class=\"p\">))</span>\n<span class=\"n\">layer</span><span class=\"p\">(</span><span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">64</span><span class=\"p\">))</span>\n</pre>\n<p>By default <code>inputs.shape[1]</code> will be used as <code>in_features</code> value\nduring initial <code>forward</code> pass. If you wish to use different <code>index</code> (e.g. to infer using\n<code>inputs.shape[3]</code>) use <code>MyLayer = tl.infer(_MyLayerImpl, index=3)</code> as a decorator.</p>\n<h2>Autoencoder with inverted residual bottleneck and pixel shuffle</h2>\n<p>Please check code comments and <a href=\"https://szymonmaszke.github.io/torchlayers/\" rel=\"nofollow\"><strong>documentation</strong></a>\nif needed. If you are unsure what autoencoder is you could see\n<a href=\"https://towardsdatascience.com/auto-encoder-what-is-it-and-what-is-it-used-for-part-1-3e5c6f017726\" rel=\"nofollow\"><strong>this example blog post</strong></a>.</p>\n<p>Below is a convolutional denoising autoencoder example for <code>ImageNet</code>-like images.\nThink of it like a demonstration of capabilities of different layers\nand building blocks provided by <code>torchlayers</code>.</p>\n<pre><span class=\"c1\"># Input - 3 x 256 x 256 for ImageNet reconstruction</span>\n<span class=\"k\">class</span> <span class=\"nc\">AutoEncoder</span><span class=\"p\">(</span><span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">Module</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">encoder</span> <span class=\"o\">=</span> <span class=\"n\">tl</span><span class=\"o\">.</span><span class=\"n\">Sequential</span><span class=\"p\">(</span>\n            <span class=\"n\">tl</span><span class=\"o\">.</span><span class=\"n\">StandardNormalNoise</span><span class=\"p\">(),</span>  <span class=\"c1\"># Apply noise to input images</span>\n            <span class=\"n\">tl</span><span class=\"o\">.</span><span class=\"n\">Conv</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"mi\">7</span><span class=\"p\">),</span>\n            <span class=\"n\">tl</span><span class=\"o\">.</span><span class=\"n\">activations</span><span class=\"o\">.</span><span class=\"n\">Swish</span><span class=\"p\">(),</span>  <span class=\"c1\"># Direct access to module .activations</span>\n            <span class=\"n\">tl</span><span class=\"o\">.</span><span class=\"n\">InvertedResidualBottleneck</span><span class=\"p\">(</span><span class=\"n\">squeeze_excitation</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">),</span>\n            <span class=\"n\">tl</span><span class=\"o\">.</span><span class=\"n\">AvgPool</span><span class=\"p\">(),</span>  <span class=\"c1\"># shape 64 x 128 x 128, kernel_size=2 by default</span>\n            <span class=\"n\">tl</span><span class=\"o\">.</span><span class=\"n\">HardSwish</span><span class=\"p\">(),</span>  <span class=\"c1\"># Access simply through tl</span>\n            <span class=\"n\">tl</span><span class=\"o\">.</span><span class=\"n\">SeparableConv</span><span class=\"p\">(</span><span class=\"mi\">128</span><span class=\"p\">),</span>  <span class=\"c1\"># Up number of channels to 128</span>\n            <span class=\"n\">tl</span><span class=\"o\">.</span><span class=\"n\">InvertedResidualBottleneck</span><span class=\"p\">(),</span>  <span class=\"c1\"># Default with squeeze excitation</span>\n            <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">ReLU</span><span class=\"p\">(),</span>\n            <span class=\"n\">tl</span><span class=\"o\">.</span><span class=\"n\">AvgPool</span><span class=\"p\">(),</span>  <span class=\"c1\"># shape 128 x 64 x 64, kernel_size=2 by default</span>\n            <span class=\"n\">tl</span><span class=\"o\">.</span><span class=\"n\">DepthwiseConv</span><span class=\"p\">(</span><span class=\"mi\">256</span><span class=\"p\">),</span>  <span class=\"c1\"># DepthwiseConv easier to use</span>\n            <span class=\"c1\"># Pass input thrice through the same weights like in PolyNet</span>\n            <span class=\"n\">tl</span><span class=\"o\">.</span><span class=\"n\">Poly</span><span class=\"p\">(</span><span class=\"n\">tl</span><span class=\"o\">.</span><span class=\"n\">InvertedResidualBottleneck</span><span class=\"p\">(),</span> <span class=\"n\">order</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">),</span>\n            <span class=\"n\">tl</span><span class=\"o\">.</span><span class=\"n\">ReLU</span><span class=\"p\">(),</span>  <span class=\"c1\"># all torch.nn can be accessed via tl</span>\n            <span class=\"n\">tl</span><span class=\"o\">.</span><span class=\"n\">MaxPool</span><span class=\"p\">(),</span>  <span class=\"c1\"># shape 256 x 32 x 32</span>\n            <span class=\"n\">tl</span><span class=\"o\">.</span><span class=\"n\">Fire</span><span class=\"p\">(</span><span class=\"n\">out_channels</span><span class=\"o\">=</span><span class=\"mi\">512</span><span class=\"p\">),</span>  <span class=\"c1\"># shape 512 x 32 x 32</span>\n            <span class=\"n\">tl</span><span class=\"o\">.</span><span class=\"n\">SqueezeExcitation</span><span class=\"p\">(</span><span class=\"n\">hidden</span><span class=\"o\">=</span><span class=\"mi\">64</span><span class=\"p\">),</span>\n            <span class=\"n\">tl</span><span class=\"o\">.</span><span class=\"n\">InvertedResidualBottleneck</span><span class=\"p\">(),</span>\n            <span class=\"n\">tl</span><span class=\"o\">.</span><span class=\"n\">MaxPool</span><span class=\"p\">(),</span>  <span class=\"c1\"># shape 512 x 16 x 16</span>\n            <span class=\"n\">tl</span><span class=\"o\">.</span><span class=\"n\">InvertedResidualBottleneck</span><span class=\"p\">(</span><span class=\"n\">squeeze_excitation</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">),</span>\n            <span class=\"c1\"># Randomly switch off the last two layers with 0.5 probability</span>\n            <span class=\"n\">tl</span><span class=\"o\">.</span><span class=\"n\">StochasticDepth</span><span class=\"p\">(</span>\n                <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">Sequential</span><span class=\"p\">(</span>\n                    <span class=\"n\">tl</span><span class=\"o\">.</span><span class=\"n\">InvertedResidualBottleneck</span><span class=\"p\">(</span><span class=\"n\">squeeze_excitation</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">),</span>\n                    <span class=\"n\">tl</span><span class=\"o\">.</span><span class=\"n\">InvertedResidualBottleneck</span><span class=\"p\">(</span><span class=\"n\">squeeze_excitation</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">),</span>\n                <span class=\"p\">),</span>\n                <span class=\"n\">p</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">,</span>\n            <span class=\"p\">),</span>\n            <span class=\"n\">tl</span><span class=\"o\">.</span><span class=\"n\">AvgPool</span><span class=\"p\">(),</span>  <span class=\"c1\"># shape 512 x 8 x 8</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"c1\"># This one is more \"standard\"</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">decoder</span> <span class=\"o\">=</span> <span class=\"n\">tl</span><span class=\"o\">.</span><span class=\"n\">Sequential</span><span class=\"p\">(</span>\n            <span class=\"n\">tl</span><span class=\"o\">.</span><span class=\"n\">Poly</span><span class=\"p\">(</span><span class=\"n\">tl</span><span class=\"o\">.</span><span class=\"n\">InvertedResidualBottleneck</span><span class=\"p\">(),</span> <span class=\"n\">order</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">),</span>\n            <span class=\"c1\"># Has ICNR initialization by default after calling `build`</span>\n            <span class=\"n\">tl</span><span class=\"o\">.</span><span class=\"n\">ConvPixelShuffle</span><span class=\"p\">(</span><span class=\"n\">out_channels</span><span class=\"o\">=</span><span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"n\">upscale_factor</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">),</span>\n            <span class=\"c1\"># Shape 512 x 16 x 16 after PixelShuffle</span>\n            <span class=\"n\">tl</span><span class=\"o\">.</span><span class=\"n\">Poly</span><span class=\"p\">(</span><span class=\"n\">tl</span><span class=\"o\">.</span><span class=\"n\">InvertedResidualBottleneck</span><span class=\"p\">(),</span> <span class=\"n\">order</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">),</span>\n            <span class=\"n\">tl</span><span class=\"o\">.</span><span class=\"n\">ConvPixelShuffle</span><span class=\"p\">(</span><span class=\"n\">out_channels</span><span class=\"o\">=</span><span class=\"mi\">256</span><span class=\"p\">,</span> <span class=\"n\">upscale_factor</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">),</span>\n            <span class=\"c1\"># Shape 256 x 32 x 32</span>\n            <span class=\"n\">tl</span><span class=\"o\">.</span><span class=\"n\">Poly</span><span class=\"p\">(</span><span class=\"n\">tl</span><span class=\"o\">.</span><span class=\"n\">InvertedResidualBottleneck</span><span class=\"p\">(),</span> <span class=\"n\">order</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">),</span>\n            <span class=\"n\">tl</span><span class=\"o\">.</span><span class=\"n\">ConvPixelShuffle</span><span class=\"p\">(</span><span class=\"n\">out_channels</span><span class=\"o\">=</span><span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"n\">upscale_factor</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">),</span>\n            <span class=\"c1\"># Shape 128 x 64 x 64</span>\n            <span class=\"n\">tl</span><span class=\"o\">.</span><span class=\"n\">Poly</span><span class=\"p\">(</span><span class=\"n\">tl</span><span class=\"o\">.</span><span class=\"n\">InvertedResidualBottleneck</span><span class=\"p\">(),</span> <span class=\"n\">order</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">),</span>\n            <span class=\"n\">tl</span><span class=\"o\">.</span><span class=\"n\">ConvPixelShuffle</span><span class=\"p\">(</span><span class=\"n\">out_channels</span><span class=\"o\">=</span><span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"n\">upscale_factor</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">),</span>\n            <span class=\"c1\"># Shape 64 x 128 x 128</span>\n            <span class=\"n\">tl</span><span class=\"o\">.</span><span class=\"n\">InvertedResidualBottleneck</span><span class=\"p\">(),</span>\n            <span class=\"n\">tl</span><span class=\"o\">.</span><span class=\"n\">Conv</span><span class=\"p\">(</span><span class=\"mi\">256</span><span class=\"p\">),</span>\n            <span class=\"n\">tl</span><span class=\"o\">.</span><span class=\"n\">Dropout</span><span class=\"p\">(),</span>  <span class=\"c1\"># Defaults to 0.5 and Dropout2d for images</span>\n            <span class=\"n\">tl</span><span class=\"o\">.</span><span class=\"n\">Swish</span><span class=\"p\">(),</span>\n            <span class=\"n\">tl</span><span class=\"o\">.</span><span class=\"n\">InstanceNorm</span><span class=\"p\">(),</span>\n            <span class=\"n\">tl</span><span class=\"o\">.</span><span class=\"n\">ConvPixelShuffle</span><span class=\"p\">(</span><span class=\"n\">out_channels</span><span class=\"o\">=</span><span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"n\">upscale_factor</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">),</span>\n            <span class=\"c1\"># Shape 32 x 256 x 256</span>\n            <span class=\"n\">tl</span><span class=\"o\">.</span><span class=\"n\">Conv</span><span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">),</span>\n            <span class=\"n\">tl</span><span class=\"o\">.</span><span class=\"n\">Swish</span><span class=\"p\">(),</span>\n            <span class=\"n\">tl</span><span class=\"o\">.</span><span class=\"n\">Conv</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">),</span>\n            <span class=\"c1\"># Shape 3 x 256 x 256</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">forward</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">inputs</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">decoder</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">encoder</span><span class=\"p\">(</span><span class=\"n\">inputs</span><span class=\"p\">))</span>\n</pre>\n<p>Now one can instantiate the module and use it with <code>torch.nn.MSELoss</code> as per usual.</p>\n<pre><span class=\"n\">autoencoder</span> <span class=\"o\">=</span> <span class=\"n\">tl</span><span class=\"o\">.</span><span class=\"n\">build</span><span class=\"p\">(</span><span class=\"n\">AutoEncoder</span><span class=\"p\">(),</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">256</span><span class=\"p\">,</span> <span class=\"mi\">256</span><span class=\"p\">))</span>\n</pre>\n<h1>Installation</h1>\n<h2><a href=\"https://pypi.org/project/torchlayers/\" rel=\"nofollow\">pip</a></h2>\n<h3>Latest release:</h3>\n<pre>pip install --user torchlayers\n</pre>\n<h3>Nightly:</h3>\n<pre>pip install --user torchlayers-nightly\n</pre>\n<h2><a href=\"https://hub.docker.com/r/szymonmaszke/torchlayers\" rel=\"nofollow\">Docker</a></h2>\n<p><strong>CPU standalone</strong> and various versions of <strong>GPU enabled</strong> images are available\nat <a href=\"https://hub.docker.com/r/szymonmaszke/torchlayers/tags\" rel=\"nofollow\">dockerhub</a>.</p>\n<p>For CPU quickstart, issue:</p>\n<pre>docker pull szymonmaszke/torchlayers:18.04\n</pre>\n<p>Nightly builds are also available, just prefix tag with <code>nightly_</code>. If you are going for <code>GPU</code> image make sure you have\n<a href=\"https://github.com/NVIDIA/nvidia-docker\" rel=\"nofollow\">nvidia/docker</a> installed and it's runtime set.</p>\n<h1>Contributing</h1>\n<p>If you find issue or would like to see some functionality (or implement one), please <a href=\"https://help.github.com/en/articles/creating-an-issue\" rel=\"nofollow\">open new Issue</a> or <a href=\"https://help.github.com/en/articles/creating-a-pull-request-from-a-fork\" rel=\"nofollow\">create Pull Request</a>.</p>\n\n          </div>"}, "last_serial": 7193171, "releases": {"1584749077": [{"comment_text": "", "digests": {"md5": "032fd7e26dd343829d7f556ec02734b9", "sha256": "a46fc67fd2442e63ef0cb4e1ae03b73d9e3e37d2480276b6b722b512ecfd3c99"}, "downloads": -1, "filename": "torchlayers_nightly-1584749077-py3-none-any.whl", "has_sig": false, "md5_digest": "032fd7e26dd343829d7f556ec02734b9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 36246, "upload_time": "2020-03-21T00:04:46", "upload_time_iso_8601": "2020-03-21T00:04:46.194547Z", "url": "https://files.pythonhosted.org/packages/73/29/9bead1dc86ddaadd5c73a26ebf907aa3be6b33dffe424183f861b5bec23b/torchlayers_nightly-1584749077-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "37f4c14cba6634867697889e5ac95c9f", "sha256": "f4b8eb7817fb5eb89ec548f3f00e884ff497f5d316d5217ec9c945d92ef5f8cf"}, "downloads": -1, "filename": "torchlayers-nightly-1584749077.tar.gz", "has_sig": false, "md5_digest": "37f4c14cba6634867697889e5ac95c9f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 30346, "upload_time": "2020-03-21T00:04:47", "upload_time_iso_8601": "2020-03-21T00:04:47.507659Z", "url": "https://files.pythonhosted.org/packages/05/b0/6678cce5fa06fabf2d07bbd3460d0ce72921f232a046cb7f5ff78344c642/torchlayers-nightly-1584749077.tar.gz", "yanked": false}], "1584835478": [{"comment_text": "", "digests": {"md5": "d337befd9b60feb92560f025a9812831", "sha256": "16384cbdd526a17fe8555d7c13febf937f9d2c6cf4deea1851cf62305a4ac74f"}, "downloads": -1, "filename": "torchlayers_nightly-1584835478-py3-none-any.whl", "has_sig": false, "md5_digest": "d337befd9b60feb92560f025a9812831", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 36246, "upload_time": "2020-03-22T00:04:45", "upload_time_iso_8601": "2020-03-22T00:04:45.231402Z", "url": "https://files.pythonhosted.org/packages/a4/54/e1e32074998d8530302c8bdab0f64f4895d8520bc21490601dd3a09db3fe/torchlayers_nightly-1584835478-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "27add17d6d9a11c327b6afcdf2fd8166", "sha256": "e4abc95e899510a963458ad09cca1209bcd104c1ad99b3f88a5b3541390a3889"}, "downloads": -1, "filename": "torchlayers-nightly-1584835478.tar.gz", "has_sig": false, "md5_digest": "27add17d6d9a11c327b6afcdf2fd8166", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 30351, "upload_time": "2020-03-22T00:04:46", "upload_time_iso_8601": "2020-03-22T00:04:46.722952Z", "url": "https://files.pythonhosted.org/packages/c4/41/ee4dae70149f42ee9c365b7c0229867a46053161622274fc43febc776978/torchlayers-nightly-1584835478.tar.gz", "yanked": false}], "1584921868": [{"comment_text": "", "digests": {"md5": "3e638adc1ace9bb3e9a97480a3e96f3f", "sha256": "39a9b08885c5c3faf9b1f0ecd2b5aab3843a5aa2a60fab1b0e859d3ae63f8f2d"}, "downloads": -1, "filename": "torchlayers_nightly-1584921868-py3-none-any.whl", "has_sig": false, "md5_digest": "3e638adc1ace9bb3e9a97480a3e96f3f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 36246, "upload_time": "2020-03-23T00:04:34", "upload_time_iso_8601": "2020-03-23T00:04:34.929636Z", "url": "https://files.pythonhosted.org/packages/4e/2f/e89d897c14a3a32465f08320a3317141e036ee87a01b558f3581f22c7b70/torchlayers_nightly-1584921868-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "659300a1e03e49c4d1f188471f079685", "sha256": "aaa20e633e3945b09216d21ab311dea796cd0d3d8e5fe8189e4093c002f3ca0f"}, "downloads": -1, "filename": "torchlayers-nightly-1584921868.tar.gz", "has_sig": false, "md5_digest": "659300a1e03e49c4d1f188471f079685", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 30348, "upload_time": "2020-03-23T00:04:36", "upload_time_iso_8601": "2020-03-23T00:04:36.241284Z", "url": "https://files.pythonhosted.org/packages/f9/3e/5a9dcc40ed82d1a4375e9691570ff625751ec8096debcfcd099745cfd4cc/torchlayers-nightly-1584921868.tar.gz", "yanked": false}], "1585008276": [{"comment_text": "", "digests": {"md5": "bc71b6a95ca3e31f31e51e57eb6e9527", "sha256": "4eb7520464bdb7509764c9fdada113fda188c0a928ce0d2c6822495db1db5b5a"}, "downloads": -1, "filename": "torchlayers_nightly-1585008276-py3-none-any.whl", "has_sig": false, "md5_digest": "bc71b6a95ca3e31f31e51e57eb6e9527", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 36245, "upload_time": "2020-03-24T00:04:44", "upload_time_iso_8601": "2020-03-24T00:04:44.278386Z", "url": "https://files.pythonhosted.org/packages/13/f3/7a1f91c81118c377cce3c735a1efb42840991b583f0c36124da5d465ed73/torchlayers_nightly-1585008276-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1cf5b7ba345f6f4385e5185ce9cdbca9", "sha256": "ce6b60027792b04fe1d8aec8cf1f29bfc9a3d0e4bd31b9a0335b8dae56d6058f"}, "downloads": -1, "filename": "torchlayers-nightly-1585008276.tar.gz", "has_sig": false, "md5_digest": "1cf5b7ba345f6f4385e5185ce9cdbca9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 30341, "upload_time": "2020-03-24T00:04:45", "upload_time_iso_8601": "2020-03-24T00:04:45.768619Z", "url": "https://files.pythonhosted.org/packages/9b/8b/e0c65815709bd21e4e48ef4bfb0aedaa1adf5e546c034622c4dc103c7061/torchlayers-nightly-1585008276.tar.gz", "yanked": false}], "1585094667": [{"comment_text": "", "digests": {"md5": "a0b138b0291a8795b422e37645ff18e7", "sha256": "a4383c66c970db763d2c97707f42cba0e8d42ee4020af4e842c9c72231e0538a"}, "downloads": -1, "filename": "torchlayers_nightly-1585094667-py3-none-any.whl", "has_sig": false, "md5_digest": "a0b138b0291a8795b422e37645ff18e7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 36271, "upload_time": "2020-03-25T00:04:30", "upload_time_iso_8601": "2020-03-25T00:04:30.543334Z", "url": "https://files.pythonhosted.org/packages/96/55/fbe4fc6c97b6c5e90d1115516d08975c05b3a58b9db19fc08da93a1611a5/torchlayers_nightly-1585094667-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cb00960507f515541520bd2a63a3bc2e", "sha256": "7bc4380bd1eca56cb82d57e5d00261c4aaa3720f37a4124547aee65a08be9b16"}, "downloads": -1, "filename": "torchlayers-nightly-1585094667.tar.gz", "has_sig": false, "md5_digest": "cb00960507f515541520bd2a63a3bc2e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 30408, "upload_time": "2020-03-25T00:04:32", "upload_time_iso_8601": "2020-03-25T00:04:32.061136Z", "url": "https://files.pythonhosted.org/packages/19/5a/97c823edce005de2bbbc13542fdc6ce418f9f47fc821134a50b393f87b9c/torchlayers-nightly-1585094667.tar.gz", "yanked": false}], "1585181071": [{"comment_text": "", "digests": {"md5": "af947cd9a0161c0c1bcea636081e8681", "sha256": "cc6de51aa268461b75ff08315f34c5897bcd861391f14d961a4af655bd67c89d"}, "downloads": -1, "filename": "torchlayers_nightly-1585181071-py3-none-any.whl", "has_sig": false, "md5_digest": "af947cd9a0161c0c1bcea636081e8681", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 36272, "upload_time": "2020-03-26T00:04:40", "upload_time_iso_8601": "2020-03-26T00:04:40.148088Z", "url": "https://files.pythonhosted.org/packages/b8/54/c5294715c1770133410b13c03599297c344a7068a3967e32d11d9b374ea5/torchlayers_nightly-1585181071-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d84d458f847b213376c4b71d909385d3", "sha256": "dccd37e53b1754ec4d09f9d549e23ca943f398577162dd6c7d96ead6a5cba754"}, "downloads": -1, "filename": "torchlayers-nightly-1585181071.tar.gz", "has_sig": false, "md5_digest": "d84d458f847b213376c4b71d909385d3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 30408, "upload_time": "2020-03-26T00:04:41", "upload_time_iso_8601": "2020-03-26T00:04:41.496568Z", "url": "https://files.pythonhosted.org/packages/3a/5e/d63504ed27d1d33b58829d233e43f013e9ee84f81150a873e89e6367cc93/torchlayers-nightly-1585181071.tar.gz", "yanked": false}], "1585267485": [{"comment_text": "", "digests": {"md5": "c64c05620148fa25f9dfad9221dd8404", "sha256": "088c60da80cd26e76769a5e148740c7f8df4645aad7b2a1ec030b9be3e110d60"}, "downloads": -1, "filename": "torchlayers_nightly-1585267485-py3-none-any.whl", "has_sig": false, "md5_digest": "c64c05620148fa25f9dfad9221dd8404", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 36271, "upload_time": "2020-03-27T00:04:52", "upload_time_iso_8601": "2020-03-27T00:04:52.223364Z", "url": "https://files.pythonhosted.org/packages/0c/b0/38aa1d462479ed1063df69a8a20ac89272f28862f1fd13178b71c163d46a/torchlayers_nightly-1585267485-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "04864d483a2811345008a25af9a36d00", "sha256": "96869c5d983cf62526580406e38ec4f4b2b2577d82baf5068af922af0e96ec92"}, "downloads": -1, "filename": "torchlayers-nightly-1585267485.tar.gz", "has_sig": false, "md5_digest": "04864d483a2811345008a25af9a36d00", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 30416, "upload_time": "2020-03-27T00:04:53", "upload_time_iso_8601": "2020-03-27T00:04:53.681878Z", "url": "https://files.pythonhosted.org/packages/52/a0/1a1f7c9db1d02f5f5f8a7da41565d78246605fb8be3e7d609f0c9d42de74/torchlayers-nightly-1585267485.tar.gz", "yanked": false}], "1585353878": [{"comment_text": "", "digests": {"md5": "98fa83d41db05edcc3e5294370ebcb79", "sha256": "40a073f2efc923c382e64f4ec2c72a237c0ab26dab56a2d03a49f3c0b679ab17"}, "downloads": -1, "filename": "torchlayers_nightly-1585353878-py3-none-any.whl", "has_sig": false, "md5_digest": "98fa83d41db05edcc3e5294370ebcb79", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 36356, "upload_time": "2020-03-28T00:04:47", "upload_time_iso_8601": "2020-03-28T00:04:47.819342Z", "url": "https://files.pythonhosted.org/packages/c7/a5/f6827191d50e6fa598ea46edb627af4ac6820fafb0f2ed6e36c3f7d6b4e6/torchlayers_nightly-1585353878-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "12fbbe2ddd50f2a078774e461e369c36", "sha256": "38c5d5707cdb019da9781d7b717628e82e1ced34f1cde7052f6f4790037d07cd"}, "downloads": -1, "filename": "torchlayers-nightly-1585353878.tar.gz", "has_sig": false, "md5_digest": "12fbbe2ddd50f2a078774e461e369c36", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 30583, "upload_time": "2020-03-28T00:04:49", "upload_time_iso_8601": "2020-03-28T00:04:49.084738Z", "url": "https://files.pythonhosted.org/packages/ea/8f/c8d747e5ce93736a2a754ebfe5e1307c06e0edd5f495eb27337d77407c05/torchlayers-nightly-1585353878.tar.gz", "yanked": false}], "1585440289": [{"comment_text": "", "digests": {"md5": "90515888b415b7d889c9955da6d004f1", "sha256": "edd658b3bb3b1028f5cd6f2ecd12856321fedf0326d0479cd8053f0e611db0a0"}, "downloads": -1, "filename": "torchlayers_nightly-1585440289-py3-none-any.whl", "has_sig": false, "md5_digest": "90515888b415b7d889c9955da6d004f1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 36344, "upload_time": "2020-03-29T00:04:56", "upload_time_iso_8601": "2020-03-29T00:04:56.498937Z", "url": "https://files.pythonhosted.org/packages/09/26/e476f0b764937ad1acd67fa4f0dab2dc7f7e4aa8ac02f751d473bc0456ed/torchlayers_nightly-1585440289-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b85f374d2c983db5e7191109a9f9ddc8", "sha256": "76ab13e8d5355c239f26995c94be6a356af4b9435ec49a6cc14b1fc4b6830512"}, "downloads": -1, "filename": "torchlayers-nightly-1585440289.tar.gz", "has_sig": false, "md5_digest": "b85f374d2c983db5e7191109a9f9ddc8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 30514, "upload_time": "2020-03-29T00:04:57", "upload_time_iso_8601": "2020-03-29T00:04:57.636030Z", "url": "https://files.pythonhosted.org/packages/1b/9e/dd64cdff6d1dc20fc2f3c29b2d299bb4a96b41b59e964422b195b2f1d607/torchlayers-nightly-1585440289.tar.gz", "yanked": false}], "1585526689": [{"comment_text": "", "digests": {"md5": "e3c438fe0b70419d714e291e62ef3f25", "sha256": "63174f8706c88f0cc72b548162d8b8e7c183be1e57580c09d359725bf5467949"}, "downloads": -1, "filename": "torchlayers_nightly-1585526689-py3-none-any.whl", "has_sig": false, "md5_digest": "e3c438fe0b70419d714e291e62ef3f25", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 36344, "upload_time": "2020-03-30T00:04:56", "upload_time_iso_8601": "2020-03-30T00:04:56.954103Z", "url": "https://files.pythonhosted.org/packages/a9/ca/bcbb1d1e723f2b4421dcc74c93fcd663d95d4cf2ab7bc7c71ba094f87918/torchlayers_nightly-1585526689-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "50fb219850ebbb0bafbbe18a43462d04", "sha256": "1fd99d667541853359713255c46806f3d827f48507436c7707efaf2e3ff9ceff"}, "downloads": -1, "filename": "torchlayers-nightly-1585526689.tar.gz", "has_sig": false, "md5_digest": "50fb219850ebbb0bafbbe18a43462d04", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 30508, "upload_time": "2020-03-30T00:04:58", "upload_time_iso_8601": "2020-03-30T00:04:58.426747Z", "url": "https://files.pythonhosted.org/packages/0f/ee/3a0fe8bc65caaf88aad6e7988c12e0f9a3bace3c569764348fa487ffca13/torchlayers-nightly-1585526689.tar.gz", "yanked": false}], "1585613082": [{"comment_text": "", "digests": {"md5": "5249feee3dff505823edb5de23e06dd5", "sha256": "71d77c3dd66f9070883a8861329f25c6cd4b35bf95c9a15e35ddf09e7645295f"}, "downloads": -1, "filename": "torchlayers_nightly-1585613082-py3-none-any.whl", "has_sig": false, "md5_digest": "5249feee3dff505823edb5de23e06dd5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 36344, "upload_time": "2020-03-31T00:04:50", "upload_time_iso_8601": "2020-03-31T00:04:50.611489Z", "url": "https://files.pythonhosted.org/packages/1a/37/74cd6d0e885735bbd3796286110133061704a3f3b4c82df18b26f599e9b9/torchlayers_nightly-1585613082-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "67da0efce9786058bf7f6774296d57e1", "sha256": "41107b2856f9ab558a733214a5ff813f3a3c72ecf86c2551aae56f8679bfa320"}, "downloads": -1, "filename": "torchlayers-nightly-1585613082.tar.gz", "has_sig": false, "md5_digest": "67da0efce9786058bf7f6774296d57e1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 30513, "upload_time": "2020-03-31T00:04:51", "upload_time_iso_8601": "2020-03-31T00:04:51.933605Z", "url": "https://files.pythonhosted.org/packages/fc/45/79acb5eb8dc0531e3899678e4ea0989783e3902434f85978f45059e0326f/torchlayers-nightly-1585613082.tar.gz", "yanked": false}], "1585699497": [{"comment_text": "", "digests": {"md5": "c8751ae42adb8049605d3fd1efc0f683", "sha256": "7ab87549fbca7dfe2418cb8236b996367c07fc111220c4d428a79e146706ca9c"}, "downloads": -1, "filename": "torchlayers_nightly-1585699497-py3-none-any.whl", "has_sig": false, "md5_digest": "c8751ae42adb8049605d3fd1efc0f683", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 37540, "upload_time": "2020-04-01T00:05:05", "upload_time_iso_8601": "2020-04-01T00:05:05.343076Z", "url": "https://files.pythonhosted.org/packages/61/d4/3d705701ca5cd93d6dbb5d59db4839025a0435a4f0e6e0d91f88feba17d0/torchlayers_nightly-1585699497-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "68a15b6110398f18ec73250fbab9af1e", "sha256": "b1749a7a5a2e55433c9772be336809546ed27bb0d6fc55a55ef56415623f517a"}, "downloads": -1, "filename": "torchlayers-nightly-1585699497.tar.gz", "has_sig": false, "md5_digest": "68a15b6110398f18ec73250fbab9af1e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 32580, "upload_time": "2020-04-01T00:05:06", "upload_time_iso_8601": "2020-04-01T00:05:06.808921Z", "url": "https://files.pythonhosted.org/packages/47/b4/43cc516627d63c4661df9260d8f68b55832fcdd140f2c51699c81f27bf2b/torchlayers-nightly-1585699497.tar.gz", "yanked": false}], "1585785889": [{"comment_text": "", "digests": {"md5": "0ea6900eb34a8c1816be00c71ac0b24a", "sha256": "763e58c5d4c7209bedbeeb96be08f26f76f248127d2656edd9ddae826b810918"}, "downloads": -1, "filename": "torchlayers_nightly-1585785889-py3-none-any.whl", "has_sig": false, "md5_digest": "0ea6900eb34a8c1816be00c71ac0b24a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 37541, "upload_time": "2020-04-02T00:04:56", "upload_time_iso_8601": "2020-04-02T00:04:56.758701Z", "url": "https://files.pythonhosted.org/packages/5c/e0/f63d74c5645b328975194c8b25e35cdf67017950126543a4b66835d81287/torchlayers_nightly-1585785889-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "895bae491e3f7ac1066873f1fa1984c4", "sha256": "b2e70c7ff1ca1b9d4004c9395cbf8df8c2ab32a5149f41b7b830f1c75548d50e"}, "downloads": -1, "filename": "torchlayers-nightly-1585785889.tar.gz", "has_sig": false, "md5_digest": "895bae491e3f7ac1066873f1fa1984c4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 32594, "upload_time": "2020-04-02T00:04:58", "upload_time_iso_8601": "2020-04-02T00:04:58.114730Z", "url": "https://files.pythonhosted.org/packages/7b/7e/ed1acbaa94a816a7426f87725b666341b73163034c119ae2c2156d4ab0ee/torchlayers-nightly-1585785889.tar.gz", "yanked": false}], "1585872276": [{"comment_text": "", "digests": {"md5": "0a67630a1afbd0071e9888e7959bedaa", "sha256": "00c676e8172de09f417558857fa65500d251099e87228f7d1bb503f96613ac0b"}, "downloads": -1, "filename": "torchlayers_nightly-1585872276-py3-none-any.whl", "has_sig": false, "md5_digest": "0a67630a1afbd0071e9888e7959bedaa", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 37539, "upload_time": "2020-04-03T00:04:39", "upload_time_iso_8601": "2020-04-03T00:04:39.133210Z", "url": "https://files.pythonhosted.org/packages/80/c7/02a8d541fa5a64ed16a85673090677f6d6ff2177b696b2003aea9e3528dd/torchlayers_nightly-1585872276-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "93bde9565860990b1b671dbccac244c6", "sha256": "b114b19c4a005fed47cb1729c87484dd2fe306cd9991e13b21851a4fcd25c9f1"}, "downloads": -1, "filename": "torchlayers-nightly-1585872276.tar.gz", "has_sig": false, "md5_digest": "93bde9565860990b1b671dbccac244c6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 32590, "upload_time": "2020-04-03T00:04:40", "upload_time_iso_8601": "2020-04-03T00:04:40.591385Z", "url": "https://files.pythonhosted.org/packages/94/82/e974770d068d71561f2aea3fdf6707943a2a25d3d3f32468796d22d1f00c/torchlayers-nightly-1585872276.tar.gz", "yanked": false}], "1585958676": [{"comment_text": "", "digests": {"md5": "7d52100f1cf42a8aa7442dfd14bead32", "sha256": "beb43ee1868139d9939f9aac049a77aecaaa8b7889d5b3e95c601a7250736129"}, "downloads": -1, "filename": "torchlayers_nightly-1585958676-py3-none-any.whl", "has_sig": false, "md5_digest": "7d52100f1cf42a8aa7442dfd14bead32", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 37552, "upload_time": "2020-04-04T00:04:43", "upload_time_iso_8601": "2020-04-04T00:04:43.604646Z", "url": "https://files.pythonhosted.org/packages/53/6b/c9f6187df38fb083d854396c3ad85d85e1d129aca604059d664ba35e7043/torchlayers_nightly-1585958676-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2ad1fda7852dc9e391b2855663bd2e9f", "sha256": "43e65a2ecf3e7fb068797fd56cca7323f382064e635716868a2ab1d7e320072f"}, "downloads": -1, "filename": "torchlayers-nightly-1585958676.tar.gz", "has_sig": false, "md5_digest": "2ad1fda7852dc9e391b2855663bd2e9f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 32613, "upload_time": "2020-04-04T00:04:44", "upload_time_iso_8601": "2020-04-04T00:04:44.806397Z", "url": "https://files.pythonhosted.org/packages/2d/08/da7c534bd05380edef58982f5934d31e6f179026ef021d9f176ffdb19f80/torchlayers-nightly-1585958676.tar.gz", "yanked": false}], "1586045052": [{"comment_text": "", "digests": {"md5": "b563d166474bc3cf8ef7a09b1c8fa533", "sha256": "e1f11fb6c95c62c5808894f4b46457a6202782106d0d208afa55b992cae63af2"}, "downloads": -1, "filename": "torchlayers_nightly-1586045052-py3-none-any.whl", "has_sig": false, "md5_digest": "b563d166474bc3cf8ef7a09b1c8fa533", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 37553, "upload_time": "2020-04-05T00:04:22", "upload_time_iso_8601": "2020-04-05T00:04:22.934111Z", "url": "https://files.pythonhosted.org/packages/79/7a/aa172a7b9417de6818f2993b3e081f6e65d9e9a0fe35eb151ca990876120/torchlayers_nightly-1586045052-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "58bcb7dada1e57c36fecab075208f651", "sha256": "e15397368ac86e2f890bec7aa3bdf6d122ea69761915c86d3d6db4724bfdc518"}, "downloads": -1, "filename": "torchlayers-nightly-1586045052.tar.gz", "has_sig": false, "md5_digest": "58bcb7dada1e57c36fecab075208f651", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 32606, "upload_time": "2020-04-05T00:04:24", "upload_time_iso_8601": "2020-04-05T00:04:24.243700Z", "url": "https://files.pythonhosted.org/packages/1c/19/5bdf5b1a1a1ba02ab9e4f8f78f5f0a25c2ec6b38f36d07653448482237d6/torchlayers-nightly-1586045052.tar.gz", "yanked": false}], "1586131461": [{"comment_text": "", "digests": {"md5": "5834c700b239a3ec7389f62dfc7f403e", "sha256": "817aee13af2281e178d66da49b87da889a9403620dac69b0377d403233cd82f0"}, "downloads": -1, "filename": "torchlayers_nightly-1586131461-py3-none-any.whl", "has_sig": false, "md5_digest": "5834c700b239a3ec7389f62dfc7f403e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 37552, "upload_time": "2020-04-06T00:04:28", "upload_time_iso_8601": "2020-04-06T00:04:28.504706Z", "url": "https://files.pythonhosted.org/packages/42/85/5b2dc6f3fa43d7576c554f6f05bd853c7eba843e3dc1891fb56fb8a74d05/torchlayers_nightly-1586131461-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e726a8c93295e11488368cbfa3610d1c", "sha256": "55a89e4265ac8f455fc0db47517f159058de6e8e6c3714086abb60611f1f759e"}, "downloads": -1, "filename": "torchlayers-nightly-1586131461.tar.gz", "has_sig": false, "md5_digest": "e726a8c93295e11488368cbfa3610d1c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 32611, "upload_time": "2020-04-06T00:04:29", "upload_time_iso_8601": "2020-04-06T00:04:29.521269Z", "url": "https://files.pythonhosted.org/packages/44/75/27a3ee2d26fe9cd7b0b3a5dc9e2c92eb7201ddce7b5e6c1b52b80698712e/torchlayers-nightly-1586131461.tar.gz", "yanked": false}], "1586217870": [{"comment_text": "", "digests": {"md5": "c2c4c595575590a49e8399814c6c0df9", "sha256": "76329fecd4978e5da7427d7a209c73a258f60a806c7dca1e3e0403a931717bd2"}, "downloads": -1, "filename": "torchlayers_nightly-1586217870-py3-none-any.whl", "has_sig": false, "md5_digest": "c2c4c595575590a49e8399814c6c0df9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 37552, "upload_time": "2020-04-07T00:04:33", "upload_time_iso_8601": "2020-04-07T00:04:33.369799Z", "url": "https://files.pythonhosted.org/packages/53/40/faeacb3504f9aaf82e48c7255fc55619185bf9398827a1de9469e2ea5ebc/torchlayers_nightly-1586217870-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d75697a93b5cab180a52e0f4e403f2a5", "sha256": "41d320e325619213b54c6ab0e0c9a35e87ec232a47c28a79d471ef80a2d97bb2"}, "downloads": -1, "filename": "torchlayers-nightly-1586217870.tar.gz", "has_sig": false, "md5_digest": "d75697a93b5cab180a52e0f4e403f2a5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 32614, "upload_time": "2020-04-07T00:04:34", "upload_time_iso_8601": "2020-04-07T00:04:34.748970Z", "url": "https://files.pythonhosted.org/packages/f5/95/8005d433851b424c93b7fe505d34398987d53c8bbe6ce00449c77e4fc8af/torchlayers-nightly-1586217870.tar.gz", "yanked": false}], "1586304295": [{"comment_text": "", "digests": {"md5": "7424a96446c38bdcf8ab17996da2bf23", "sha256": "b13b74645694256bcb4c9fbd0b7a5a6a14df2cff22ff2d92838e7aa5b9393cf6"}, "downloads": -1, "filename": "torchlayers_nightly-1586304295-py3-none-any.whl", "has_sig": false, "md5_digest": "7424a96446c38bdcf8ab17996da2bf23", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 37551, "upload_time": "2020-04-08T00:05:07", "upload_time_iso_8601": "2020-04-08T00:05:07.402738Z", "url": "https://files.pythonhosted.org/packages/ac/30/ad740c6ca3227b7a167aa723964b648c6c0b2ae1d39ddb47e7970b549ad8/torchlayers_nightly-1586304295-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "eb6bdc746500c02e5a1a837793718936", "sha256": "01a761fd1eadddd4bc0e9b70d835f2775f5be1d701c5d7485c8f3ab8803de6a5"}, "downloads": -1, "filename": "torchlayers-nightly-1586304295.tar.gz", "has_sig": false, "md5_digest": "eb6bdc746500c02e5a1a837793718936", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 32608, "upload_time": "2020-04-08T00:05:08", "upload_time_iso_8601": "2020-04-08T00:05:08.846859Z", "url": "https://files.pythonhosted.org/packages/45/d0/ecce22ef82c88867a9c62b631f20ec91aaeb4427eebd20889b473f2122cb/torchlayers-nightly-1586304295.tar.gz", "yanked": false}], "1586390674": [{"comment_text": "", "digests": {"md5": "34a5c44fb0278292315faf8f82189dc6", "sha256": "411a365d24c64faf8105f5ad8bf2958597934e80005232842d15370649fe1f8e"}, "downloads": -1, "filename": "torchlayers_nightly-1586390674-py3-none-any.whl", "has_sig": false, "md5_digest": "34a5c44fb0278292315faf8f82189dc6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 37550, "upload_time": "2020-04-09T00:04:41", "upload_time_iso_8601": "2020-04-09T00:04:41.933482Z", "url": "https://files.pythonhosted.org/packages/1e/d3/6b386aa74fd136c335cee3ddbd9ce09c401fa99cdc94e8758d0a24a780fd/torchlayers_nightly-1586390674-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "29e15da37abf8276c66d08dc20c36aec", "sha256": "9be68e601e37619630756181397d486d06e7d840904fab2175103132c45018bd"}, "downloads": -1, "filename": "torchlayers-nightly-1586390674.tar.gz", "has_sig": false, "md5_digest": "29e15da37abf8276c66d08dc20c36aec", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 32609, "upload_time": "2020-04-09T00:04:43", "upload_time_iso_8601": "2020-04-09T00:04:43.102383Z", "url": "https://files.pythonhosted.org/packages/63/f7/1de82d684f6afacb6aec0ac6659a3c2c0946f91b80b920d830cfee4586a9/torchlayers-nightly-1586390674.tar.gz", "yanked": false}], "1586477123": [{"comment_text": "", "digests": {"md5": "4f8d8d8940ed68f29f68924d88a2d08f", "sha256": "6299c379f43fff09c24e737ed30460dff2278c91cf816aed44726c03dd38eabc"}, "downloads": -1, "filename": "torchlayers_nightly-1586477123-py3-none-any.whl", "has_sig": false, "md5_digest": "4f8d8d8940ed68f29f68924d88a2d08f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 37551, "upload_time": "2020-04-10T00:05:31", "upload_time_iso_8601": "2020-04-10T00:05:31.037153Z", "url": "https://files.pythonhosted.org/packages/6b/47/8b749c678df1322f34e07959c205f484f91ecda2494391801f910ddae878/torchlayers_nightly-1586477123-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6e1bea0b739b7d6fdfa065245c2b628f", "sha256": "4dd1b8a98e1cd799e456764ce5722184a49d1df2c142b39e75fe91a016e9721d"}, "downloads": -1, "filename": "torchlayers-nightly-1586477123.tar.gz", "has_sig": false, "md5_digest": "6e1bea0b739b7d6fdfa065245c2b628f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 32610, "upload_time": "2020-04-10T00:05:32", "upload_time_iso_8601": "2020-04-10T00:05:32.247149Z", "url": "https://files.pythonhosted.org/packages/a9/19/4acb94f7a2ed9366f4d4957fba08196f16ecaa3df253010386449605ed6a/torchlayers-nightly-1586477123.tar.gz", "yanked": false}], "1586563481": [{"comment_text": "", "digests": {"md5": "70a6a358c6ec1ed27bc8d2393a7aae2f", "sha256": "9e6ca1c83354c7a6a024a88a1da8e6303ef6b9eec3d4ed1af6629bafd1e0ff73"}, "downloads": -1, "filename": "torchlayers_nightly-1586563481-py3-none-any.whl", "has_sig": false, "md5_digest": "70a6a358c6ec1ed27bc8d2393a7aae2f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 37551, "upload_time": "2020-04-11T00:04:45", "upload_time_iso_8601": "2020-04-11T00:04:45.209341Z", "url": "https://files.pythonhosted.org/packages/ad/fd/41c61f1585fe9ad2a2a3541831dcd85001c8326802182add692475987b8e/torchlayers_nightly-1586563481-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a1af972e1d9d5280f41141cf87c636c2", "sha256": "5d7d57900a7f82d41ab00d14ae36b31e31c7c6cfeda80b4d68fd378c8a5eaba0"}, "downloads": -1, "filename": "torchlayers-nightly-1586563481.tar.gz", "has_sig": false, "md5_digest": "a1af972e1d9d5280f41141cf87c636c2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 32605, "upload_time": "2020-04-11T00:04:46", "upload_time_iso_8601": "2020-04-11T00:04:46.634439Z", "url": "https://files.pythonhosted.org/packages/66/df/60ce0db6487e214b4a0c2af4aedb05269dea4f7f56bb5e9086809e7b7ba3/torchlayers-nightly-1586563481.tar.gz", "yanked": false}], "1586649893": [{"comment_text": "", "digests": {"md5": "4ad72676e3fa88aef07e5bee6cc363a0", "sha256": "1c0ebadaaa7cc7d2614277238dd49ee61054bacc1d5339d620d3f1741ae85c8e"}, "downloads": -1, "filename": "torchlayers_nightly-1586649893-py3-none-any.whl", "has_sig": false, "md5_digest": "4ad72676e3fa88aef07e5bee6cc363a0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 37553, "upload_time": "2020-04-12T00:04:59", "upload_time_iso_8601": "2020-04-12T00:04:59.681288Z", "url": "https://files.pythonhosted.org/packages/b5/ef/1631b674bf0d217cd8839b69813bd5addf94df04ec162cfbc36dce0a5e3a/torchlayers_nightly-1586649893-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6cee6d056133cd360f4e05ec0f57b216", "sha256": "6704cec1e370b799dc14ae8dbade49f908a5c16074be7e7a9b90627046a614d9"}, "downloads": -1, "filename": "torchlayers-nightly-1586649893.tar.gz", "has_sig": false, "md5_digest": "6cee6d056133cd360f4e05ec0f57b216", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 32613, "upload_time": "2020-04-12T00:05:01", "upload_time_iso_8601": "2020-04-12T00:05:01.172757Z", "url": "https://files.pythonhosted.org/packages/aa/07/aa7ba1443f2b2b31119187ed44db6c67231e00d5e70d8aba1b82ff4a77f3/torchlayers-nightly-1586649893.tar.gz", "yanked": false}], "1586736280": [{"comment_text": "", "digests": {"md5": "b3975c4c2bcd1a1ddd7d709ea4e4d7e6", "sha256": "000f54c0350ae8034b1ab08b8536d87d784e8699d80afc43eb8050d84c3bdc01"}, "downloads": -1, "filename": "torchlayers_nightly-1586736280-py3-none-any.whl", "has_sig": false, "md5_digest": "b3975c4c2bcd1a1ddd7d709ea4e4d7e6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 37552, "upload_time": "2020-04-13T00:04:47", "upload_time_iso_8601": "2020-04-13T00:04:47.442925Z", "url": "https://files.pythonhosted.org/packages/b1/40/0a3f30f18571e4ff0375750400802b5537402c67accc89369e026c823471/torchlayers_nightly-1586736280-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9122d919b75161085fd506b5123a258b", "sha256": "1b12294fb7d449b616ec26d27931ae0dfd1de70f5f34746c375cce7adb959e08"}, "downloads": -1, "filename": "torchlayers-nightly-1586736280.tar.gz", "has_sig": false, "md5_digest": "9122d919b75161085fd506b5123a258b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 32601, "upload_time": "2020-04-13T00:04:48", "upload_time_iso_8601": "2020-04-13T00:04:48.597811Z", "url": "https://files.pythonhosted.org/packages/51/65/3df35fc3bb3b92d5cbcb067eb0a4c6d3510f171926408a40481e7f806f2b/torchlayers-nightly-1586736280.tar.gz", "yanked": false}], "1586822901": [{"comment_text": "", "digests": {"md5": "a01d50e7abb884f28bd255b735f683ba", "sha256": "761286447474965543ad738b757a1a74ccbd5ca6a810ce8e856d2adc25466ad0"}, "downloads": -1, "filename": "torchlayers_nightly-1586822901-py3-none-any.whl", "has_sig": false, "md5_digest": "a01d50e7abb884f28bd255b735f683ba", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 37552, "upload_time": "2020-04-14T00:08:27", "upload_time_iso_8601": "2020-04-14T00:08:27.879787Z", "url": "https://files.pythonhosted.org/packages/b4/f0/e216295c1a89b7a6087c5c337fcdb0ed779730446405ddab26d9efd24510/torchlayers_nightly-1586822901-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7c988e26794c1f4ea48a17f8af4ee96a", "sha256": "445a24d4cd44c8b1a43dfa6b65d307ad512ab59a358456fa899407314888b936"}, "downloads": -1, "filename": "torchlayers-nightly-1586822901.tar.gz", "has_sig": false, "md5_digest": "7c988e26794c1f4ea48a17f8af4ee96a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 32610, "upload_time": "2020-04-14T00:08:29", "upload_time_iso_8601": "2020-04-14T00:08:29.343891Z", "url": "https://files.pythonhosted.org/packages/1c/0c/a8f1cb6df7863de4a4fc0a450ba97d8df09daf00038b1d40d84367754edc/torchlayers-nightly-1586822901.tar.gz", "yanked": false}], "1586909099": [{"comment_text": "", "digests": {"md5": "b4ed3c4c3cd2cb73de387d94791df4f0", "sha256": "84151ac3c1667055302792cb4fd316b9593791e0661d95d489a0ded9b6813f50"}, "downloads": -1, "filename": "torchlayers_nightly-1586909099-py3-none-any.whl", "has_sig": false, "md5_digest": "b4ed3c4c3cd2cb73de387d94791df4f0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 37548, "upload_time": "2020-04-15T00:05:04", "upload_time_iso_8601": "2020-04-15T00:05:04.638347Z", "url": "https://files.pythonhosted.org/packages/3f/9a/e66e8fdc33d44bd14ad49e37ebecae61479f60b171cf8413df0ccd261d54/torchlayers_nightly-1586909099-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "04962a9e6e3e01365bf53c525ce753ac", "sha256": "00bcd3c438177e233d0e140703996f842e52035191dff972fd3ba1bbdf2c9538"}, "downloads": -1, "filename": "torchlayers-nightly-1586909099.tar.gz", "has_sig": false, "md5_digest": "04962a9e6e3e01365bf53c525ce753ac", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 32604, "upload_time": "2020-04-15T00:05:05", "upload_time_iso_8601": "2020-04-15T00:05:05.784511Z", "url": "https://files.pythonhosted.org/packages/a3/a2/4245d2da3e783edccc9fb6cea02e14fd3032bd3aa944b8ed6aa8ee5a1cef/torchlayers-nightly-1586909099.tar.gz", "yanked": false}], "1586995478": [{"comment_text": "", "digests": {"md5": "6a033b83e4eeab057ab5791b1a755f67", "sha256": "36f6b894996c10895b56c034c49f3fc40c43ebe21802f1e8d864939384a4018c"}, "downloads": -1, "filename": "torchlayers_nightly-1586995478-py3-none-any.whl", "has_sig": false, "md5_digest": "6a033b83e4eeab057ab5791b1a755f67", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 37551, "upload_time": "2020-04-16T00:04:46", "upload_time_iso_8601": "2020-04-16T00:04:46.273996Z", "url": "https://files.pythonhosted.org/packages/38/2a/2791501d4cd74a9b779353563eabbe56c42a7a4bec3f2e592eef14fcb5e2/torchlayers_nightly-1586995478-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e3d359c293addd058012b724ab75cab2", "sha256": "c65da40728f708f62de915594f69d97feb0725de2fccd4d4cba9d4e17545567d"}, "downloads": -1, "filename": "torchlayers-nightly-1586995478.tar.gz", "has_sig": false, "md5_digest": "e3d359c293addd058012b724ab75cab2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 32602, "upload_time": "2020-04-16T00:04:47", "upload_time_iso_8601": "2020-04-16T00:04:47.838660Z", "url": "https://files.pythonhosted.org/packages/9c/57/6119ed213e1957392adb7aabf4c007f89ee3d35a50b6878d07714cae944e/torchlayers-nightly-1586995478.tar.gz", "yanked": false}], "1587081870": [{"comment_text": "", "digests": {"md5": "549981b0c7902b7e81f9ced29385e91e", "sha256": "3d0c70e4a6f23d107c6c7640ea99b958892704a53156fe56376c1ca50bda0574"}, "downloads": -1, "filename": "torchlayers_nightly-1587081870-py3-none-any.whl", "has_sig": false, "md5_digest": "549981b0c7902b7e81f9ced29385e91e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 37548, "upload_time": "2020-04-17T00:04:37", "upload_time_iso_8601": "2020-04-17T00:04:37.675242Z", "url": "https://files.pythonhosted.org/packages/55/35/f6ed8d4d398419ffc683d60f4c83768b6dd5f90fc3686889363d16cbad2d/torchlayers_nightly-1587081870-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "48b2bbbdfb3d8122af1ac290da9ccaa7", "sha256": "df009f60787993a11007d4553efabcb30a7819ee487b506cf8c2cf55efa724c4"}, "downloads": -1, "filename": "torchlayers-nightly-1587081870.tar.gz", "has_sig": false, "md5_digest": "48b2bbbdfb3d8122af1ac290da9ccaa7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 32605, "upload_time": "2020-04-17T00:04:39", "upload_time_iso_8601": "2020-04-17T00:04:39.116005Z", "url": "https://files.pythonhosted.org/packages/63/24/97bf68e047088ae73379ae316d00bf10c0d51d3103d906574652a218f05d/torchlayers-nightly-1587081870.tar.gz", "yanked": false}], "1587168277": [{"comment_text": "", "digests": {"md5": "7e20178ae827631c3a12b25af0246ebd", "sha256": "80bfab801a710577ae804f9c4fba9c1db2cbccd15a1cf4661df1681588f06407"}, "downloads": -1, "filename": "torchlayers_nightly-1587168277-py3-none-any.whl", "has_sig": false, "md5_digest": "7e20178ae827631c3a12b25af0246ebd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 37553, "upload_time": "2020-04-18T00:04:40", "upload_time_iso_8601": "2020-04-18T00:04:40.426567Z", "url": "https://files.pythonhosted.org/packages/61/f2/53da743682120853dfe66d18d718390d928b3df12ccf4c23baddb8d98cf7/torchlayers_nightly-1587168277-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b38d590010cad0520e088beb1befd9c4", "sha256": "8c47a25d19e377c3e3b4ed4d22b6f5e6d9296d479fce3a3bebc2fb20551a5696"}, "downloads": -1, "filename": "torchlayers-nightly-1587168277.tar.gz", "has_sig": false, "md5_digest": "b38d590010cad0520e088beb1befd9c4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 32605, "upload_time": "2020-04-18T00:04:41", "upload_time_iso_8601": "2020-04-18T00:04:41.942051Z", "url": "https://files.pythonhosted.org/packages/80/3d/b79df9fd68bfac6000c4d579941ca07828d7df90e723310d770e9c2f415f/torchlayers-nightly-1587168277.tar.gz", "yanked": false}], "1587254684": [{"comment_text": "", "digests": {"md5": "52d172628f3b9916ba4fd6de5d12375f", "sha256": "1ad775c3fc3c9f91460fbc415ae48e29e12829c995f78641bc93bf3d6ba133bc"}, "downloads": -1, "filename": "torchlayers_nightly-1587254684-py3-none-any.whl", "has_sig": false, "md5_digest": "52d172628f3b9916ba4fd6de5d12375f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 37553, "upload_time": "2020-04-19T00:04:49", "upload_time_iso_8601": "2020-04-19T00:04:49.449519Z", "url": "https://files.pythonhosted.org/packages/8d/42/c64d90adeac750a6eb5d6b601d6dea8c3208ff4f41c4843ca79f224cb6b2/torchlayers_nightly-1587254684-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7c52351b5cba71436165755bba3c69a7", "sha256": "a3c23738af4a00117a6509b8537a9a50ee137dbd85afe86dd08ad89e5127452e"}, "downloads": -1, "filename": "torchlayers-nightly-1587254684.tar.gz", "has_sig": false, "md5_digest": "7c52351b5cba71436165755bba3c69a7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 32607, "upload_time": "2020-04-19T00:04:50", "upload_time_iso_8601": "2020-04-19T00:04:50.996991Z", "url": "https://files.pythonhosted.org/packages/79/a9/65cf574b0b01732e27f7593b44fc029d12781663f6a87495e8279a2fdb48/torchlayers-nightly-1587254684.tar.gz", "yanked": false}], "1587341086": [{"comment_text": "", "digests": {"md5": "15a94dd05b1dc7d75a2e18ccac9cf69f", "sha256": "6bfc5ef6466a567b6c2d8ea81ce81f65fc8b50990471a0af2150d8ed1d081a88"}, "downloads": -1, "filename": "torchlayers_nightly-1587341086-py3-none-any.whl", "has_sig": false, "md5_digest": "15a94dd05b1dc7d75a2e18ccac9cf69f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 37554, "upload_time": "2020-04-20T00:04:54", "upload_time_iso_8601": "2020-04-20T00:04:54.626122Z", "url": "https://files.pythonhosted.org/packages/53/04/5d9f627fc1df52c9d657633bd11d626d7af0f26dcd07629047ea79791e4e/torchlayers_nightly-1587341086-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e3b6bc53adeba10425376f1896c5cb86", "sha256": "338c1085da9651055ab58b4d8b0df2fadd735d3df3b304b8170d7a413fbc0e10"}, "downloads": -1, "filename": "torchlayers-nightly-1587341086.tar.gz", "has_sig": false, "md5_digest": "e3b6bc53adeba10425376f1896c5cb86", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 32606, "upload_time": "2020-04-20T00:04:56", "upload_time_iso_8601": "2020-04-20T00:04:56.609448Z", "url": "https://files.pythonhosted.org/packages/25/c6/929645f0ed468fe30ffec8174887e657e20fdd807fef0e0cf6325c594c3d/torchlayers-nightly-1587341086.tar.gz", "yanked": false}], "1587427491": [{"comment_text": "", "digests": {"md5": "a4934ecc44858f6cf537a425d2b65fd9", "sha256": "10f535932545f8a2ea6f10ff59728f1bf958eadea4fae613ef48db364d858021"}, "downloads": -1, "filename": "torchlayers_nightly-1587427491-py3-none-any.whl", "has_sig": false, "md5_digest": "a4934ecc44858f6cf537a425d2b65fd9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 38016, "upload_time": "2020-04-21T00:05:02", "upload_time_iso_8601": "2020-04-21T00:05:02.151544Z", "url": "https://files.pythonhosted.org/packages/bb/66/3773d1729a3206f3db250140c401c713bdcfb7b6396edfde2f2cab7b48a8/torchlayers_nightly-1587427491-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "65845832c988c988e241e0ca15ed75df", "sha256": "254f29b9d9f36e062678838f2dcdc13213f9630ad7ffc78d9047a05c5e11dcb4"}, "downloads": -1, "filename": "torchlayers-nightly-1587427491.tar.gz", "has_sig": false, "md5_digest": "65845832c988c988e241e0ca15ed75df", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 33216, "upload_time": "2020-04-21T00:05:03", "upload_time_iso_8601": "2020-04-21T00:05:03.951025Z", "url": "https://files.pythonhosted.org/packages/2e/e6/457f80e719fc8ab744cfbc4493fb645d0386d0d37ac234f9af741dcc6400/torchlayers-nightly-1587427491.tar.gz", "yanked": false}], "1587513886": [{"comment_text": "", "digests": {"md5": "c2a0e0e53becaac32077622f3b90d422", "sha256": "73f4367d80fbd648e734bbf4a0741f8fcd07556a638459b68a88d1e2450a2c69"}, "downloads": -1, "filename": "torchlayers_nightly-1587513886-py3-none-any.whl", "has_sig": false, "md5_digest": "c2a0e0e53becaac32077622f3b90d422", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 38015, "upload_time": "2020-04-22T00:04:54", "upload_time_iso_8601": "2020-04-22T00:04:54.716240Z", "url": "https://files.pythonhosted.org/packages/77/92/db5ec9183bd2c4bbe203e125ac70dd5e61633cb4f76b3732713ecc31fed6/torchlayers_nightly-1587513886-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e75657f90d83713c6983a2ec7e911d36", "sha256": "50a8fec8d797c5b7cf9eb9fa7e8abc97515ddf0fc278d0e475921fecc2c4fcad"}, "downloads": -1, "filename": "torchlayers-nightly-1587513886.tar.gz", "has_sig": false, "md5_digest": "e75657f90d83713c6983a2ec7e911d36", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 33216, "upload_time": "2020-04-22T00:04:56", "upload_time_iso_8601": "2020-04-22T00:04:56.077611Z", "url": "https://files.pythonhosted.org/packages/b6/57/0bb4d68b5da6e90e5152f7806eae0f763a4394996f5eae311430716c8dd0/torchlayers-nightly-1587513886.tar.gz", "yanked": false}], "1587600281": [{"comment_text": "", "digests": {"md5": "9c4ab3a24d1ed8f75242bdfa56b1762c", "sha256": "6c409e63ceb062ec788d070fe4d53b101b61ad0b99e0f1ad8ed792af48ca3dc1"}, "downloads": -1, "filename": "torchlayers_nightly-1587600281-py3-none-any.whl", "has_sig": false, "md5_digest": "9c4ab3a24d1ed8f75242bdfa56b1762c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 37616, "upload_time": "2020-04-23T00:04:48", "upload_time_iso_8601": "2020-04-23T00:04:48.302025Z", "url": "https://files.pythonhosted.org/packages/40/2c/9f450b9e59aadb3d3f2944eee82103b68a5d1608b8948a1b209d1f5e87ca/torchlayers_nightly-1587600281-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "53c81974f8fd7fd0be059aaecc46a307", "sha256": "1807c3827f035ae057e552804eed5a8c8314152c79020835dca43ac77934007c"}, "downloads": -1, "filename": "torchlayers-nightly-1587600281.tar.gz", "has_sig": false, "md5_digest": "53c81974f8fd7fd0be059aaecc46a307", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 33195, "upload_time": "2020-04-23T00:04:49", "upload_time_iso_8601": "2020-04-23T00:04:49.743141Z", "url": "https://files.pythonhosted.org/packages/45/e5/889b8d9f3231279bdde5fc4b1819cfb66c1f8e3ed0e143286dd2a140aa3d/torchlayers-nightly-1587600281.tar.gz", "yanked": false}], "1587686685": [{"comment_text": "", "digests": {"md5": "57e9d221f3c4e23113b3f993ee828e7e", "sha256": "e4b4cf17bda2d9f6936e5d1d2e2cb99e7bddf6ee938fc8bb302347947be69eb0"}, "downloads": -1, "filename": "torchlayers_nightly-1587686685-py3-none-any.whl", "has_sig": false, "md5_digest": "57e9d221f3c4e23113b3f993ee828e7e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 37617, "upload_time": "2020-04-24T00:04:48", "upload_time_iso_8601": "2020-04-24T00:04:48.104833Z", "url": "https://files.pythonhosted.org/packages/6b/28/78f538bb11b1a255823b820fea48ec4a426eae0506701604ab533bd62fff/torchlayers_nightly-1587686685-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "efd75d892c19840546ba55a2ad631b60", "sha256": "7e66e0aa4b91c190633e3f0a420f9a703b4395eccb4886339a3423ded7d31d22"}, "downloads": -1, "filename": "torchlayers-nightly-1587686685.tar.gz", "has_sig": false, "md5_digest": "efd75d892c19840546ba55a2ad631b60", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 33208, "upload_time": "2020-04-24T00:04:49", "upload_time_iso_8601": "2020-04-24T00:04:49.262730Z", "url": "https://files.pythonhosted.org/packages/41/1c/ce595ec22b33f48ff331d3a03826191ddcb5ac7e2de93df2429a8034f264/torchlayers-nightly-1587686685.tar.gz", "yanked": false}], "1587773074": [{"comment_text": "", "digests": {"md5": "d73bf266a6d7c035dc68823ac9146768", "sha256": "0a5cd26872e0bfe4d9bc4cdc2154df92034329bcf810d16d7eb6f439669ca4e6"}, "downloads": -1, "filename": "torchlayers_nightly-1587773074-py3-none-any.whl", "has_sig": false, "md5_digest": "d73bf266a6d7c035dc68823ac9146768", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 37617, "upload_time": "2020-04-25T00:04:44", "upload_time_iso_8601": "2020-04-25T00:04:44.343170Z", "url": "https://files.pythonhosted.org/packages/f1/46/806e154ff1778c7b956b4a9fddbf999675f7d27cb2694522537ba2c6e39a/torchlayers_nightly-1587773074-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a4c7b466c5ef58562e1e6b63a2b57c3b", "sha256": "10adb096bb08a62534daaea288d192821b13d6903ebfd01018859e44fb01f464"}, "downloads": -1, "filename": "torchlayers-nightly-1587773074.tar.gz", "has_sig": false, "md5_digest": "a4c7b466c5ef58562e1e6b63a2b57c3b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 33210, "upload_time": "2020-04-25T00:04:45", "upload_time_iso_8601": "2020-04-25T00:04:45.503455Z", "url": "https://files.pythonhosted.org/packages/e2/e1/6411fac97ea2bdf1c67f471e3c3c4e7888a1c37e925aa6f800770668ed55/torchlayers-nightly-1587773074.tar.gz", "yanked": false}], "1587859471": [{"comment_text": "", "digests": {"md5": "eb909edb9eb41437cdd85bf51291e706", "sha256": "64abb7003e831296391859c8965d2bcabee32235bbb0acac2cb0be285f968a82"}, "downloads": -1, "filename": "torchlayers_nightly-1587859471-py3-none-any.whl", "has_sig": false, "md5_digest": "eb909edb9eb41437cdd85bf51291e706", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 37616, "upload_time": "2020-04-26T00:04:38", "upload_time_iso_8601": "2020-04-26T00:04:38.856006Z", "url": "https://files.pythonhosted.org/packages/2e/f6/3232de897f8576fdcd7ac8dffbec38acf3eb629953e5dc48650af49621f6/torchlayers_nightly-1587859471-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3cba482849ae90fb7d2619088beac918", "sha256": "87f3d25c797c61ba7b4e69cc4a87fd7f3f7f2a8b349f9c940be81f13bae31110"}, "downloads": -1, "filename": "torchlayers-nightly-1587859471.tar.gz", "has_sig": false, "md5_digest": "3cba482849ae90fb7d2619088beac918", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 33195, "upload_time": "2020-04-26T00:04:39", "upload_time_iso_8601": "2020-04-26T00:04:39.891190Z", "url": "https://files.pythonhosted.org/packages/89/0c/002711c97995520357fe33e293ef9e10cc0315cbdf9e01fa7a812290897e/torchlayers-nightly-1587859471.tar.gz", "yanked": false}], "1587945892": [{"comment_text": "", "digests": {"md5": "785ed619ae884e6471a8af541b7a2ba3", "sha256": "65c3ff979c10910c23f593a7178fd8dac2072e2e84cc1e3564a15cb3b052a411"}, "downloads": -1, "filename": "torchlayers_nightly-1587945892-py3-none-any.whl", "has_sig": false, "md5_digest": "785ed619ae884e6471a8af541b7a2ba3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 37616, "upload_time": "2020-04-27T00:04:59", "upload_time_iso_8601": "2020-04-27T00:04:59.709909Z", "url": "https://files.pythonhosted.org/packages/fa/9c/2e6ffda1afbe8fc87cd952c860fae95b48e870e71c83b2ff6503935344ca/torchlayers_nightly-1587945892-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cf70010eb3175eba0cbd1e997b59d20c", "sha256": "4b9bc8469f9b9620a96052e2d59679aae78d03b6b86dcd88d3e48cae9a222525"}, "downloads": -1, "filename": "torchlayers-nightly-1587945892.tar.gz", "has_sig": false, "md5_digest": "cf70010eb3175eba0cbd1e997b59d20c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 33203, "upload_time": "2020-04-27T00:05:00", "upload_time_iso_8601": "2020-04-27T00:05:00.912898Z", "url": "https://files.pythonhosted.org/packages/cc/6c/d77f9aeaa7c418f77efb736ee2dd09fa00983ddb05731262dac18fee71d0/torchlayers-nightly-1587945892.tar.gz", "yanked": false}], "1588032285": [{"comment_text": "", "digests": {"md5": "5039f183ec12ed91774c8c82f062a49c", "sha256": "24f5e297f009465e05049bb797cf881a971b4862df071a6a8f07705cfb399010"}, "downloads": -1, "filename": "torchlayers_nightly-1588032285-py3-none-any.whl", "has_sig": false, "md5_digest": "5039f183ec12ed91774c8c82f062a49c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 37616, "upload_time": "2020-04-28T00:04:47", "upload_time_iso_8601": "2020-04-28T00:04:47.852889Z", "url": "https://files.pythonhosted.org/packages/c7/7c/3d8a597fda7e287c7394be1f1f594d29074bad0c97b4d650831eaf416f91/torchlayers_nightly-1588032285-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1e506a4a75130cac03655e7c099add9f", "sha256": "f2dce9a2b58ccd2ce887d4e4063bb3ecb22ec7431a2be526675f83cb847b3187"}, "downloads": -1, "filename": "torchlayers-nightly-1588032285.tar.gz", "has_sig": false, "md5_digest": "1e506a4a75130cac03655e7c099add9f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 33205, "upload_time": "2020-04-28T00:04:49", "upload_time_iso_8601": "2020-04-28T00:04:49.082918Z", "url": "https://files.pythonhosted.org/packages/e1/cd/76234668b496e4625b26515059fa7d59eb16d4e50c1ef4cb15e3369a649e/torchlayers-nightly-1588032285.tar.gz", "yanked": false}], "1588118680": [{"comment_text": "", "digests": {"md5": "ade2cd90d8081e550d2c6dee025cf2bd", "sha256": "7ec73299dd7dc167643be856752e86a9c47d6e47718e6dbf1a8febdba27b0eb9"}, "downloads": -1, "filename": "torchlayers_nightly-1588118680-py3-none-any.whl", "has_sig": false, "md5_digest": "ade2cd90d8081e550d2c6dee025cf2bd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 37614, "upload_time": "2020-04-29T00:04:44", "upload_time_iso_8601": "2020-04-29T00:04:44.601012Z", "url": "https://files.pythonhosted.org/packages/fa/e7/ab79e5ca8cbb134994f8d3472b43f86e7d0f20c9dae3ecee6beac917f3ee/torchlayers_nightly-1588118680-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5b386f5e314bfce123a54b18b2f3d628", "sha256": "9559bed7d77072be4fe3b836f61490a09a2662581359dbe7b10d82812c1ef49b"}, "downloads": -1, "filename": "torchlayers-nightly-1588118680.tar.gz", "has_sig": false, "md5_digest": "5b386f5e314bfce123a54b18b2f3d628", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 33209, "upload_time": "2020-04-29T00:04:45", "upload_time_iso_8601": "2020-04-29T00:04:45.867906Z", "url": "https://files.pythonhosted.org/packages/0e/eb/1eb4387ed41b48f59862bcda4d549a4117bd9ff076a1c78eb973721938bd/torchlayers-nightly-1588118680.tar.gz", "yanked": false}], "1588205077": [{"comment_text": "", "digests": {"md5": "b1435c986a5bccf59f32dd68708498bc", "sha256": "487a1221f262f76305133e59fc0becf57c94aa4fc365f78a909f71422ec05bba"}, "downloads": -1, "filename": "torchlayers_nightly-1588205077-py3-none-any.whl", "has_sig": false, "md5_digest": "b1435c986a5bccf59f32dd68708498bc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 37616, "upload_time": "2020-04-30T00:04:42", "upload_time_iso_8601": "2020-04-30T00:04:42.125515Z", "url": "https://files.pythonhosted.org/packages/63/23/35c67be1012b047e4d328445e23854bb7adc653275d4f499b2fce2eeeb1f/torchlayers_nightly-1588205077-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "438560efb273ca83518f1e6b848131eb", "sha256": "aeb4fe0fcea8364ad5a3598e3e2587bcfdc412979c270d17e4cf9da7c32f6d21"}, "downloads": -1, "filename": "torchlayers-nightly-1588205077.tar.gz", "has_sig": false, "md5_digest": "438560efb273ca83518f1e6b848131eb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 33203, "upload_time": "2020-04-30T00:04:43", "upload_time_iso_8601": "2020-04-30T00:04:43.185551Z", "url": "https://files.pythonhosted.org/packages/87/07/743425171839e098b85edc1a4cccc94557ac4a666bf63b518d9c0dabd0ec/torchlayers-nightly-1588205077.tar.gz", "yanked": false}], "1588291500": [{"comment_text": "", "digests": {"md5": "ce18cef6063bb2cc96da5da50eafd345", "sha256": "f633f56c0a3dee0e7cebedf21ee236bad96105f201f95f5596dbbe3e7c4b813e"}, "downloads": -1, "filename": "torchlayers_nightly-1588291500-py3-none-any.whl", "has_sig": false, "md5_digest": "ce18cef6063bb2cc96da5da50eafd345", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 37614, "upload_time": "2020-05-01T00:05:08", "upload_time_iso_8601": "2020-05-01T00:05:08.860727Z", "url": "https://files.pythonhosted.org/packages/b0/d5/0696f731efe3bcae3ec5e7fcc424184d3a26a9a0b75ef1b3be072eb891e0/torchlayers_nightly-1588291500-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "51d881f4fd726aa2f6764148619ac7a2", "sha256": "66856984e91a38ce0eac411dae9eb7e17a618f0e9771a3b4e54428795a7eb5cb"}, "downloads": -1, "filename": "torchlayers-nightly-1588291500.tar.gz", "has_sig": false, "md5_digest": "51d881f4fd726aa2f6764148619ac7a2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 33208, "upload_time": "2020-05-01T00:05:10", "upload_time_iso_8601": "2020-05-01T00:05:10.312716Z", "url": "https://files.pythonhosted.org/packages/3c/86/d20765a9b71175ba164015fa4aca355c867b94746ed99357d3a3a90ab8e4/torchlayers-nightly-1588291500.tar.gz", "yanked": false}], "1588377895": [{"comment_text": "", "digests": {"md5": "d2a2d38bdad35f26196f79a09f5d63d1", "sha256": "eead5eb3426936c9d93694639450eeb7d6936bef589ce88fc725cb1a85779b69"}, "downloads": -1, "filename": "torchlayers_nightly-1588377895-py3-none-any.whl", "has_sig": false, "md5_digest": "d2a2d38bdad35f26196f79a09f5d63d1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 37616, "upload_time": "2020-05-02T00:05:05", "upload_time_iso_8601": "2020-05-02T00:05:05.504951Z", "url": "https://files.pythonhosted.org/packages/e3/60/1cafada3a76d9d9f5fbdd159698a287f72539cc72c3270484ce30d0a564f/torchlayers_nightly-1588377895-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "18cea2688ade1133e646165b8e373904", "sha256": "42b57113a605a46b0238cb8362d8f432443dc4324f92d6726340448ae59d6009"}, "downloads": -1, "filename": "torchlayers-nightly-1588377895.tar.gz", "has_sig": false, "md5_digest": "18cea2688ade1133e646165b8e373904", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 33207, "upload_time": "2020-05-02T00:05:06", "upload_time_iso_8601": "2020-05-02T00:05:06.839587Z", "url": "https://files.pythonhosted.org/packages/6f/4b/d8e4f588f6b2a4f9840a312d1fbfe70c93447332c500d2a7eefa36b20070/torchlayers-nightly-1588377895.tar.gz", "yanked": false}], "1588464297": [{"comment_text": "", "digests": {"md5": "dd4ca2185864d7dd6bce07c1b7e04748", "sha256": "e50c620b89671645958d69a324ec0702341ceec5d2bb5de20c9726f6b887f028"}, "downloads": -1, "filename": "torchlayers_nightly-1588464297-py3-none-any.whl", "has_sig": false, "md5_digest": "dd4ca2185864d7dd6bce07c1b7e04748", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 37613, "upload_time": "2020-05-03T00:05:05", "upload_time_iso_8601": "2020-05-03T00:05:05.814710Z", "url": "https://files.pythonhosted.org/packages/17/57/09192b990797b3549a4189b6a5583a02f1336de4e1e20679c25aadb1fad7/torchlayers_nightly-1588464297-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "91cc9308908a8d0a59124cd1e3ad83ef", "sha256": "c91afe80db1ce5fcb057bb63781af4cd18c7900df08011336f41e60bfdf758bd"}, "downloads": -1, "filename": "torchlayers-nightly-1588464297.tar.gz", "has_sig": false, "md5_digest": "91cc9308908a8d0a59124cd1e3ad83ef", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 33205, "upload_time": "2020-05-03T00:05:07", "upload_time_iso_8601": "2020-05-03T00:05:07.125546Z", "url": "https://files.pythonhosted.org/packages/01/39/5e8688841e2fc875a16b4550b9ca08513965239d09301789f5f4ad5fc3f9/torchlayers-nightly-1588464297.tar.gz", "yanked": false}], "1588550692": [{"comment_text": "", "digests": {"md5": "638dbd4464ce47f28f90b2a9679b9a38", "sha256": "cfe7db70b396dd22115bdbc1b1f119dac8c7f3d21490a30f75ec55c531b51537"}, "downloads": -1, "filename": "torchlayers_nightly-1588550692-py3-none-any.whl", "has_sig": false, "md5_digest": "638dbd4464ce47f28f90b2a9679b9a38", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 37617, "upload_time": "2020-05-04T00:05:02", "upload_time_iso_8601": "2020-05-04T00:05:02.366826Z", "url": "https://files.pythonhosted.org/packages/cf/3b/f625453cce63951354aa13872d728270a36c33df9b928bf1775c261e49f7/torchlayers_nightly-1588550692-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f076a915029bfd52b9e587e16e5ca3cb", "sha256": "f94472f237148c579458f41d315fdabf500a985491b020bdde2613edb0a3f9dd"}, "downloads": -1, "filename": "torchlayers-nightly-1588550692.tar.gz", "has_sig": false, "md5_digest": "f076a915029bfd52b9e587e16e5ca3cb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 33197, "upload_time": "2020-05-04T00:05:03", "upload_time_iso_8601": "2020-05-04T00:05:03.673986Z", "url": "https://files.pythonhosted.org/packages/75/f2/7cd12f23182a466ac6e4cc59202ace0b055ca2f2d8973b45e073af54b099/torchlayers-nightly-1588550692.tar.gz", "yanked": false}], "1588637136": [{"comment_text": "", "digests": {"md5": "30742692435e45adbf62362bc7cf27b1", "sha256": "21c6de9be3a930512ffab14b247a75a3f1bf527ff2a5596ee9f2f9b7159c6386"}, "downloads": -1, "filename": "torchlayers_nightly-1588637136-py3-none-any.whl", "has_sig": false, "md5_digest": "30742692435e45adbf62362bc7cf27b1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 37616, "upload_time": "2020-05-05T00:05:46", "upload_time_iso_8601": "2020-05-05T00:05:46.843647Z", "url": "https://files.pythonhosted.org/packages/87/83/5eb8b71cfa7cad8eb15356b9a1cd87568500d010e87c54120ac9c3b7cf8f/torchlayers_nightly-1588637136-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d0097203be97138228c49387d216a79f", "sha256": "126974dba8db42530367a0f05e99e8f034764e1b158187a5b74671a21de7bdda"}, "downloads": -1, "filename": "torchlayers-nightly-1588637136.tar.gz", "has_sig": false, "md5_digest": "d0097203be97138228c49387d216a79f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 33199, "upload_time": "2020-05-05T00:05:48", "upload_time_iso_8601": "2020-05-05T00:05:48.204097Z", "url": "https://files.pythonhosted.org/packages/e8/2a/1583772d4111a11d889ad7f9860c37f06ad833195c2d37187858ed12dbf0/torchlayers-nightly-1588637136.tar.gz", "yanked": false}], "1588723497": [{"comment_text": "", "digests": {"md5": "bc9296e72a5340e19799df530dc067f6", "sha256": "3ec4f3bd6bc02cf48c91c1bc1793ba1dc0c350363ca515d004ffdb6dd63b863a"}, "downloads": -1, "filename": "torchlayers_nightly-1588723497-py3-none-any.whl", "has_sig": false, "md5_digest": "bc9296e72a5340e19799df530dc067f6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 37618, "upload_time": "2020-05-06T00:05:08", "upload_time_iso_8601": "2020-05-06T00:05:08.609921Z", "url": "https://files.pythonhosted.org/packages/4e/2c/fc1b4e5c612aba1c85a09fb68ef0a5af6bd04b9822fdcffa34027c2a9642/torchlayers_nightly-1588723497-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "00348676fc9d2737feae38cd0502d44d", "sha256": "222ef80504fa021ac95ad9766a8c335d48ea8c44a257c979c6e12317c31b8b1d"}, "downloads": -1, "filename": "torchlayers-nightly-1588723497.tar.gz", "has_sig": false, "md5_digest": "00348676fc9d2737feae38cd0502d44d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 33204, "upload_time": "2020-05-06T00:05:09", "upload_time_iso_8601": "2020-05-06T00:05:09.914150Z", "url": "https://files.pythonhosted.org/packages/c7/19/fc52eea67f6aa85f40b2505b59f4ce82fd82df0a7806701adb12c1ac64de/torchlayers-nightly-1588723497.tar.gz", "yanked": false}], "1588809902": [{"comment_text": "", "digests": {"md5": "563370c540290c7c2c3f7fcd6ab1494c", "sha256": "3a2709643f717df267277ebe8adffa7c9d1595762c0c436dc7688c87b87a9062"}, "downloads": -1, "filename": "torchlayers_nightly-1588809902-py3-none-any.whl", "has_sig": false, "md5_digest": "563370c540290c7c2c3f7fcd6ab1494c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 37617, "upload_time": "2020-05-07T00:05:13", "upload_time_iso_8601": "2020-05-07T00:05:13.510971Z", "url": "https://files.pythonhosted.org/packages/ae/6a/7607a828f7a56b4a272ce0368745772ff1a6018fae687aeeb3b5f4408140/torchlayers_nightly-1588809902-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2700f4a5a068445dfe5af974dde536b3", "sha256": "84619ce263be8fb23cf8b4ff3178ae088ac4162a7900055d766dd61b1471aa8a"}, "downloads": -1, "filename": "torchlayers-nightly-1588809902.tar.gz", "has_sig": false, "md5_digest": "2700f4a5a068445dfe5af974dde536b3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 33212, "upload_time": "2020-05-07T00:05:14", "upload_time_iso_8601": "2020-05-07T00:05:14.968998Z", "url": "https://files.pythonhosted.org/packages/5b/59/260877060ad943fb59d4e838a0e6cacfbbc61b136068c35956c2227b6137/torchlayers-nightly-1588809902.tar.gz", "yanked": false}], "1588896286": [{"comment_text": "", "digests": {"md5": "0f8cde0f3191852b480fd08cfead5e89", "sha256": "49d4b128f5e1cb8fc719b418d13a9f710eb6a2dae7a6e3d10384dfd9af9f1647"}, "downloads": -1, "filename": "torchlayers_nightly-1588896286-py3-none-any.whl", "has_sig": false, "md5_digest": "0f8cde0f3191852b480fd08cfead5e89", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 37616, "upload_time": "2020-05-08T00:04:51", "upload_time_iso_8601": "2020-05-08T00:04:51.213003Z", "url": "https://files.pythonhosted.org/packages/47/03/27e0f8a214131407b96559c2a10ca22dfac0a8c2991efd2ca602d39aabfd/torchlayers_nightly-1588896286-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9cb3d95c179447a698f8c4268344aeb4", "sha256": "65006aae4cfc7eb3604c46ec330c0e7a04d29bd82111c65f87b75e6b059300e8"}, "downloads": -1, "filename": "torchlayers-nightly-1588896286.tar.gz", "has_sig": false, "md5_digest": "9cb3d95c179447a698f8c4268344aeb4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 33208, "upload_time": "2020-05-08T00:04:52", "upload_time_iso_8601": "2020-05-08T00:04:52.367524Z", "url": "https://files.pythonhosted.org/packages/e7/55/5061a3a20fc665c350bb20282aed4acdc07c2c04247ac19b01cd8c8dc765/torchlayers-nightly-1588896286.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0f8cde0f3191852b480fd08cfead5e89", "sha256": "49d4b128f5e1cb8fc719b418d13a9f710eb6a2dae7a6e3d10384dfd9af9f1647"}, "downloads": -1, "filename": "torchlayers_nightly-1588896286-py3-none-any.whl", "has_sig": false, "md5_digest": "0f8cde0f3191852b480fd08cfead5e89", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 37616, "upload_time": "2020-05-08T00:04:51", "upload_time_iso_8601": "2020-05-08T00:04:51.213003Z", "url": "https://files.pythonhosted.org/packages/47/03/27e0f8a214131407b96559c2a10ca22dfac0a8c2991efd2ca602d39aabfd/torchlayers_nightly-1588896286-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9cb3d95c179447a698f8c4268344aeb4", "sha256": "65006aae4cfc7eb3604c46ec330c0e7a04d29bd82111c65f87b75e6b059300e8"}, "downloads": -1, "filename": "torchlayers-nightly-1588896286.tar.gz", "has_sig": false, "md5_digest": "9cb3d95c179447a698f8c4268344aeb4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 33208, "upload_time": "2020-05-08T00:04:52", "upload_time_iso_8601": "2020-05-08T00:04:52.367524Z", "url": "https://files.pythonhosted.org/packages/e7/55/5061a3a20fc665c350bb20282aed4acdc07c2c04247ac19b01cd8c8dc765/torchlayers-nightly-1588896286.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:50:17 2020"}