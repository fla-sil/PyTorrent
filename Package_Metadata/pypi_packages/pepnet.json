{"info": {"author": "Alex Rubinsteyn", "author_email": "alex.rubinsteyn@mssm.edu", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: Science/Research", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Scientific/Engineering :: Bio-Informatics"], "description": "|Build Status|\n\npepnet\n======\n\nNeural networks for amino acid sequences\n\nPredictor API\n-------------\n\nSequence and model construction can both be handled for you by pepnet's\n``Predictor``:\n\n.. code:: python\n\n    from pepnet import Predictor, SequenceInput, NumericInput, Output\n    predictor = Predictor(\n        inputs=[\n            SequenceInput(length=4, name=\"x1\", variable_length=True),\n            NumericInput(dim=30, name=\"x2\")],\n        outputs=[Output(name=\"y\", dim=1, activation=\"sigmoid\")],\n        dense_layer_sizes=[30],\n        dense_activation=\"relu\")\n    sequences = [\"ACAD\", \"ACAA\", \"ACA\"]\n    vectors = np.random.normal(10, 100, (3, 30))\n    y = numpy.array([0, 1, 0])\n    predictor.fit({\"x1\": sequences, \"x2\": vectors}, y)\n    y_pred = predictor.predict({\"x1\": sequences, \"x2\": vectors})[\"y\"]\n\nConvolutional sequence filtering\n--------------------------------\n\nThis model takes an amino acid sequence (of up to length 50) and applies\nto it two layers of 9mer convolution with 3x maxpooling and 2x\ndownsampling in between. The second layer's activations are then pooled\nacross all sequence positions (using both mean and max pooling) and\npassed to a single dense output node called \"y\".\n\n.. code:: python\n\n    peptide = \n    predictor = Predictor(\n        inputs=[SequenceInput(\n            length=50, name=\"peptide\", encoding=\"index\", variable_length=True,\n            conv_filter_sizes=[9],\n            conv_output_dim=8,\n            n_conv_layers=2,\n            global_pooling=True)\n        ],\n        outputs=[Output(name=\"y\", dim=1, activation=\"sigmoid\")])\n\nManual index encoding of peptides\n---------------------------------\n\nRepresent every amino acid with a number between 1-21 (0 is reserved for\npadding)\n\n.. code:: python\n\n    from pepnet.encoder import Encoder\n    encoder = Encoder()\n    X_index = encoder.encode_index_array([\"SYF\", \"GLYCI\"], max_peptide_length=9)\n\nManual one-hot encoding of peptides\n-----------------------------------\n\nRepresent every amino acid with a binary vector where only one entry is\n1 and the rest are 0.\n\n.. code:: python\n\n    from pepnet.encoder import Encoder\n    encoder = Encoder()\n    X_binary = encoder.encode_onehot([\"SYF\", \"GLYCI\"], max_peptide_length=9)\n\nFOFE encoding of peptides\n-------------------------\n\nImplementation of FOFE encoding from `A Fixed-Size Encoding Method for\nVariable-Length Sequences with its Application to Neural Network\nLanguage Models <https://arxiv.org/abs/1505.01504>`__\n\n.. code:: python\n\n    from pepnet.encoder import Encoder\n    encoder = Encoder()\n    X_binary = encoder.encode_FOFE([\"SYF\", \"GLYCI\"], bidirectional=True)\n\nExample network\n---------------\n\nSchematic of a convolutional model: |image1|\n\n.. |Build Status| image:: https://travis-ci.org/hammerlab/pepnet.svg?branch=master\n   :target: https://travis-ci.org/hammerlab/pepnet\n.. |image1| image:: conv_large.png\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/hammerlab/pepnet", "keywords": "", "license": "http://www.apache.org/licenses/LICENSE-2.0.html", "maintainer": "", "maintainer_email": "", "name": "pepnet", "package_url": "https://pypi.org/project/pepnet/", "platform": "", "project_url": "https://pypi.org/project/pepnet/", "project_urls": {"Homepage": "https://github.com/hammerlab/pepnet"}, "release_url": "https://pypi.org/project/pepnet/0.3.2/", "requires_dist": null, "requires_python": "", "summary": "Neural networks for amino acid sequences", "version": "0.3.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/hammerlab/pepnet\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4ef7ac53c2435809d0d51ac7e12b3c50e708a5a8/68747470733a2f2f7472617669732d63692e6f72672f68616d6d65726c61622f7065706e65742e7376673f6272616e63683d6d6173746572\"></a></p>\n<div id=\"pepnet\">\n<h2>pepnet</h2>\n<p>Neural networks for amino acid sequences</p>\n<div id=\"predictor-api\">\n<h3>Predictor API</h3>\n<p>Sequence and model construction can both be handled for you by pepnet\u2019s\n<tt>Predictor</tt>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pepnet</span> <span class=\"kn\">import</span> <span class=\"n\">Predictor</span><span class=\"p\">,</span> <span class=\"n\">SequenceInput</span><span class=\"p\">,</span> <span class=\"n\">NumericInput</span><span class=\"p\">,</span> <span class=\"n\">Output</span>\n<span class=\"n\">predictor</span> <span class=\"o\">=</span> <span class=\"n\">Predictor</span><span class=\"p\">(</span>\n    <span class=\"n\">inputs</span><span class=\"o\">=</span><span class=\"p\">[</span>\n        <span class=\"n\">SequenceInput</span><span class=\"p\">(</span><span class=\"n\">length</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"x1\"</span><span class=\"p\">,</span> <span class=\"n\">variable_length</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">),</span>\n        <span class=\"n\">NumericInput</span><span class=\"p\">(</span><span class=\"n\">dim</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"x2\"</span><span class=\"p\">)],</span>\n    <span class=\"n\">outputs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">Output</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"y\"</span><span class=\"p\">,</span> <span class=\"n\">dim</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">activation</span><span class=\"o\">=</span><span class=\"s2\">\"sigmoid\"</span><span class=\"p\">)],</span>\n    <span class=\"n\">dense_layer_sizes</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">30</span><span class=\"p\">],</span>\n    <span class=\"n\">dense_activation</span><span class=\"o\">=</span><span class=\"s2\">\"relu\"</span><span class=\"p\">)</span>\n<span class=\"n\">sequences</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"ACAD\"</span><span class=\"p\">,</span> <span class=\"s2\">\"ACAA\"</span><span class=\"p\">,</span> <span class=\"s2\">\"ACA\"</span><span class=\"p\">]</span>\n<span class=\"n\">vectors</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">normal</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">))</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"n\">predictor</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">({</span><span class=\"s2\">\"x1\"</span><span class=\"p\">:</span> <span class=\"n\">sequences</span><span class=\"p\">,</span> <span class=\"s2\">\"x2\"</span><span class=\"p\">:</span> <span class=\"n\">vectors</span><span class=\"p\">},</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"n\">y_pred</span> <span class=\"o\">=</span> <span class=\"n\">predictor</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">({</span><span class=\"s2\">\"x1\"</span><span class=\"p\">:</span> <span class=\"n\">sequences</span><span class=\"p\">,</span> <span class=\"s2\">\"x2\"</span><span class=\"p\">:</span> <span class=\"n\">vectors</span><span class=\"p\">})[</span><span class=\"s2\">\"y\"</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"convolutional-sequence-filtering\">\n<h3>Convolutional sequence filtering</h3>\n<p>This model takes an amino acid sequence (of up to length 50) and applies\nto it two layers of 9mer convolution with 3x maxpooling and 2x\ndownsampling in between. The second layer\u2019s activations are then pooled\nacross all sequence positions (using both mean and max pooling) and\npassed to a single dense output node called \u201cy\u201d.</p>\n<pre><span class=\"n\">peptide</span> <span class=\"o\">=</span>\n<span class=\"n\">predictor</span> <span class=\"o\">=</span> <span class=\"n\">Predictor</span><span class=\"p\">(</span>\n    <span class=\"n\">inputs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">SequenceInput</span><span class=\"p\">(</span>\n        <span class=\"n\">length</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"peptide\"</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s2\">\"index\"</span><span class=\"p\">,</span> <span class=\"n\">variable_length</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">conv_filter_sizes</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">],</span>\n        <span class=\"n\">conv_output_dim</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">,</span>\n        <span class=\"n\">n_conv_layers</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span>\n        <span class=\"n\">global_pooling</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"p\">],</span>\n    <span class=\"n\">outputs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">Output</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"y\"</span><span class=\"p\">,</span> <span class=\"n\">dim</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">activation</span><span class=\"o\">=</span><span class=\"s2\">\"sigmoid\"</span><span class=\"p\">)])</span>\n</pre>\n</div>\n<div id=\"manual-index-encoding-of-peptides\">\n<h3>Manual index encoding of peptides</h3>\n<p>Represent every amino acid with a number between 1-21 (0 is reserved for\npadding)</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pepnet.encoder</span> <span class=\"kn\">import</span> <span class=\"n\">Encoder</span>\n<span class=\"n\">encoder</span> <span class=\"o\">=</span> <span class=\"n\">Encoder</span><span class=\"p\">()</span>\n<span class=\"n\">X_index</span> <span class=\"o\">=</span> <span class=\"n\">encoder</span><span class=\"o\">.</span><span class=\"n\">encode_index_array</span><span class=\"p\">([</span><span class=\"s2\">\"SYF\"</span><span class=\"p\">,</span> <span class=\"s2\">\"GLYCI\"</span><span class=\"p\">],</span> <span class=\"n\">max_peptide_length</span><span class=\"o\">=</span><span class=\"mi\">9</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"manual-one-hot-encoding-of-peptides\">\n<h3>Manual one-hot encoding of peptides</h3>\n<p>Represent every amino acid with a binary vector where only one entry is\n1 and the rest are 0.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pepnet.encoder</span> <span class=\"kn\">import</span> <span class=\"n\">Encoder</span>\n<span class=\"n\">encoder</span> <span class=\"o\">=</span> <span class=\"n\">Encoder</span><span class=\"p\">()</span>\n<span class=\"n\">X_binary</span> <span class=\"o\">=</span> <span class=\"n\">encoder</span><span class=\"o\">.</span><span class=\"n\">encode_onehot</span><span class=\"p\">([</span><span class=\"s2\">\"SYF\"</span><span class=\"p\">,</span> <span class=\"s2\">\"GLYCI\"</span><span class=\"p\">],</span> <span class=\"n\">max_peptide_length</span><span class=\"o\">=</span><span class=\"mi\">9</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"fofe-encoding-of-peptides\">\n<h3>FOFE encoding of peptides</h3>\n<p>Implementation of FOFE encoding from <a href=\"https://arxiv.org/abs/1505.01504\" rel=\"nofollow\">A Fixed-Size Encoding Method for\nVariable-Length Sequences with its Application to Neural Network\nLanguage Models</a></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pepnet.encoder</span> <span class=\"kn\">import</span> <span class=\"n\">Encoder</span>\n<span class=\"n\">encoder</span> <span class=\"o\">=</span> <span class=\"n\">Encoder</span><span class=\"p\">()</span>\n<span class=\"n\">X_binary</span> <span class=\"o\">=</span> <span class=\"n\">encoder</span><span class=\"o\">.</span><span class=\"n\">encode_FOFE</span><span class=\"p\">([</span><span class=\"s2\">\"SYF\"</span><span class=\"p\">,</span> <span class=\"s2\">\"GLYCI\"</span><span class=\"p\">],</span> <span class=\"n\">bidirectional</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"example-network\">\n<h3>Example network</h3>\n<p>Schematic of a convolutional model: <img alt=\"image1\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7a27b74a12d6a9712a4d71a6b528c59859140b79/636f6e765f6c617267652e706e67\"></p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 3465567, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "3f13f567f232939be23083d6810fd0cf", "sha256": "0e08e003e3e1e806993dc39661d71734fd4da32d9a9e99bbec035fc7612e42a9"}, "downloads": -1, "filename": "pepnet-0.1.0.tar.gz", "has_sig": false, "md5_digest": "3f13f567f232939be23083d6810fd0cf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4829, "upload_time": "2017-04-03T23:29:03", "upload_time_iso_8601": "2017-04-03T23:29:03.526661Z", "url": "https://files.pythonhosted.org/packages/6e/02/a83ae2f2fc9720d9009fd3d4996156539f8d8d4aa7fa0ec575d3025b1eee/pepnet-0.1.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "c75442d7c016f3da764ae2f203c32868", "sha256": "0ac2b32a726151dfacf03a17eed0cf993308b6f2accc48a1e0a11f9afc4f1db3"}, "downloads": -1, "filename": "pepnet-0.3.1.tar.gz", "has_sig": false, "md5_digest": "c75442d7c016f3da764ae2f203c32868", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19475, "upload_time": "2017-06-12T20:13:45", "upload_time_iso_8601": "2017-06-12T20:13:45.456700Z", "url": "https://files.pythonhosted.org/packages/fd/b2/703dd196b26a42f2a3a32bc7948b189190323c39b80380b8002b54e8e29b/pepnet-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "34943227c4294e359a42b6f77a873ef5", "sha256": "8a8e30e92c63384ee2e3e579988143820a4414c29ccce6e6356f6c4d8a923edf"}, "downloads": -1, "filename": "pepnet-0.3.2.tar.gz", "has_sig": false, "md5_digest": "34943227c4294e359a42b6f77a873ef5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21422, "upload_time": "2017-07-19T18:35:00", "upload_time_iso_8601": "2017-07-19T18:35:00.618012Z", "url": "https://files.pythonhosted.org/packages/6d/65/28a0d16f644f65502f1c7247d938d0c0cab70107f5fdc9364eaee01de1cb/pepnet-0.3.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "34943227c4294e359a42b6f77a873ef5", "sha256": "8a8e30e92c63384ee2e3e579988143820a4414c29ccce6e6356f6c4d8a923edf"}, "downloads": -1, "filename": "pepnet-0.3.2.tar.gz", "has_sig": false, "md5_digest": "34943227c4294e359a42b6f77a873ef5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21422, "upload_time": "2017-07-19T18:35:00", "upload_time_iso_8601": "2017-07-19T18:35:00.618012Z", "url": "https://files.pythonhosted.org/packages/6d/65/28a0d16f644f65502f1c7247d938d0c0cab70107f5fdc9364eaee01de1cb/pepnet-0.3.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:56:25 2020"}