{"info": {"author": "Luca Cappelletti", "author_email": "cappelletti.luca94@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3"], "description": "keras_synthetic_genome_sequence\n=========================================================================================\n|travis| |sonar_quality| |sonar_maintainability| |codacy|\n|code_climate_maintainability| |pip| |downloads|\n\nPython package to lazily generate synthetic genomic sequences for training of Keras models.\n\nHow do I install this package?\n----------------------------------------------\nAs usual, just download it using pip:\n\n.. code:: shell\n\n    pip install keras_synthetic_genome_sequence\n\nTests Coverage\n----------------------------------------------\nSince some software handling coverages sometime\nget slightly different results, here's three of them:\n\n|coveralls| |sonar_coverage| |code_climate_coverage|\n\n\nUsage examples\n-------------------------\nTo use GapSequence to train your keras model you\nwill need to obtain statistical metrics for the\nbiological gaps you intend to mimic in your synthetic gaps.\n\nTo achieve this, this package offers an utility called\nget_gaps_statistics, which allows you to obtain the\nmean and covariance of gaps in a given genomic assembly.\n\nThe genomic assembly is automatically downloaded from UCSC\nusing `ucsc_genomes_downloader <https://github.com/LucaCappelletti94/ucsc_genomes_downloader>`__,\nthen the gaps contained within are extracted and their windows\nis expanded to the given one, after filtering for the given\nmax_gap_size, as you might want to limit the gaps size to\na relatively small one (gaps can get in the tens of thousands\nof nucleotides, for instance in the telomeres).\n\nLet's start by listing all the important parameters:\n\n.. code:: python\n\n    assembly = \"hg19\"\n    window_size = 200\n    batch_size = 128\n\nNow we can start by retrieving the gaps statistics:\n\n.. code:: python\n\n    from keras_synthetic_genome_sequence.utils import get_gaps_statistics\n\n    number, mean, covariance = get_gaps_statistics(\n        assembly=assembly,\n        max_gap_size=100,\n        window_size=window_size\n    )\n\n    print(\"I have identified {number} gaps!\".format(number=number))\n\nNow you must choose the ground truth on which to apply the\nsynthetic gaps, for instance the regions without gaps in\nthe genomic assembly hg19, chromosome chr1.\nThese regions will have to be tasselized into smaller\nchunks that are compatible with the shape you have chosen for\nthe gap statistics window_size.\nWe can retrieve these regions as follows:\n\n.. code:: python\n\n    from ucsc_genomes_downloader import Genome\n    from ucsc_genomes_downloader.utils import tessellate_bed\n\n    genome = Genome(assembly, chromosomes=[\"chr1\"])\n    ground_truth = tessellate_bed(genome.filled(), window_size=window_size)\n\nThe obtained pandas DataFrame will have a bed-like format\nand look as follows:\n\n+----+---------+--------------+------------+\n|    | chrom   |   chromStart |   chromEnd |\n+====+=========+==============+============+\n|  0 | chr1    |        10000 |      10200 |\n+----+---------+--------------+------------+\n|  1 | chr1    |        10200 |      10400 |\n+----+---------+--------------+------------+\n|  2 | chr1    |        10400 |      10600 |\n+----+---------+--------------+------------+\n|  3 | chr1    |        10600 |      10800 |\n+----+---------+--------------+------------+\n|  4 | chr1    |        10800 |      11000 |\n+----+---------+--------------+------------+\n\nNow we are ready to actually create the GapSequence:\n\n.. code:: python\n\n    from keras_synthetic_genome_sequence import GapSequence\n\n    gap_sequence = GapSequence(\n        assembly=assembly,\n        bed=ground_truth,\n        gaps_mean=mean,\n        gaps_covariance=covariance,\n        batch_size=batch_size\n    )\n\nNow, having a model that receives as\ninput and output shape (batch_size, window_size, 4),\nwe can train it as follows:\n\n.. code:: python\n\n    model = build_my_denoiser()\n    model.fit_generator(\n        gap_sequence,\n        steps_per_epoch=gap_sequence.steps_per_epoch,\n        epochs=2,\n        shuffle=True\n    )\n\nHappy denoising!\n\nComparison between biological and synthetic distributions\n----------------------------------------------------------\nThe following images refer to the biological and synthetic distributions\nof gaps in the hg19, hg38, mm9 and mm10 genomic assembly, considering\ngaps with length to up 100 nucleotides and total window size 1000.\nThe threshold used to convert to integer the multivariate gaussian distribution\nis 0.4, the default value used within the python package.\n\n.. image:: https://github.com/LucaCappelletti94/keras_synthetic_genome_sequence/blob/master/distributions/hg19.png?raw=true\n.. image:: https://github.com/LucaCappelletti94/keras_synthetic_genome_sequence/blob/master/distributions/hg38.png?raw=true\n.. image:: https://github.com/LucaCappelletti94/keras_synthetic_genome_sequence/blob/master/distributions/mm9.png?raw=true\n.. image:: https://github.com/LucaCappelletti94/keras_synthetic_genome_sequence/blob/master/distributions/mm10.png?raw=true\n\n\n.. |travis| image:: https://travis-ci.org/LucaCappelletti94/keras_synthetic_genome_sequence.png\n   :target: https://travis-ci.org/LucaCappelletti94/keras_synthetic_genome_sequence\n   :alt: Travis CI build\n\n.. |sonar_quality| image:: https://sonarcloud.io/api/project_badges/measure?project=LucaCappelletti94_keras_synthetic_genome_sequence&metric=alert_status\n    :target: https://sonarcloud.io/dashboard/index/LucaCappelletti94_keras_synthetic_genome_sequence\n    :alt: SonarCloud Quality\n\n.. |sonar_maintainability| image:: https://sonarcloud.io/api/project_badges/measure?project=LucaCappelletti94_keras_synthetic_genome_sequence&metric=sqale_rating\n    :target: https://sonarcloud.io/dashboard/index/LucaCappelletti94_keras_synthetic_genome_sequence\n    :alt: SonarCloud Maintainability\n\n.. |sonar_coverage| image:: https://sonarcloud.io/api/project_badges/measure?project=LucaCappelletti94_keras_synthetic_genome_sequence&metric=coverage\n    :target: https://sonarcloud.io/dashboard/index/LucaCappelletti94_keras_synthetic_genome_sequence\n    :alt: SonarCloud Coverage\n\n.. |coveralls| image:: https://coveralls.io/repos/github/LucaCappelletti94/keras_synthetic_genome_sequence/badge.svg?branch=master\n    :target: https://coveralls.io/github/LucaCappelletti94/keras_synthetic_genome_sequence?branch=master\n    :alt: Coveralls Coverage\n\n.. |pip| image:: https://badge.fury.io/py/keras-synthetic-genome-sequence.svg\n    :target: https://badge.fury.io/py/keras-synthetic-genome-sequence\n    :alt: Pypi project\n\n.. |downloads| image:: https://pepy.tech/badge/keras-synthetic-genome-sequence\n    :target: https://pepy.tech/badge/keras-synthetic-genome-sequence\n    :alt: Pypi total project downloads\n\n.. |codacy| image:: https://api.codacy.com/project/badge/Grade/7f2c4e2947834c05b5a869a9445482d0\n    :target: https://www.codacy.com/manual/LucaCappelletti94/keras_synthetic_genome_sequence?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=LucaCappelletti94/keras_synthetic_genome_sequence&amp;utm_campaign=Badge_Grade\n    :alt: Codacy Maintainability\n\n.. |code_climate_maintainability| image:: https://api.codeclimate.com/v1/badges/b89f6bd0ddc58cc93e89/maintainability\n    :target: https://codeclimate.com/github/LucaCappelletti94/keras_synthetic_genome_sequence/maintainability\n    :alt: Maintainability\n\n.. |code_climate_coverage| image:: https://api.codeclimate.com/v1/badges/b89f6bd0ddc58cc93e89/test_coverage\n    :target: https://codeclimate.com/github/LucaCappelletti94/keras_synthetic_genome_sequence/test_coverage\n    :alt: Code Climate Coverate", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/LucaCappelletti94/keras_synthetic_genome_sequence", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "keras-synthetic-genome-sequence", "package_url": "https://pypi.org/project/keras-synthetic-genome-sequence/", "platform": "", "project_url": "https://pypi.org/project/keras-synthetic-genome-sequence/", "project_urls": {"Homepage": "https://github.com/LucaCappelletti94/keras_synthetic_genome_sequence"}, "release_url": "https://pypi.org/project/keras-synthetic-genome-sequence/1.1.4/", "requires_dist": null, "requires_python": "", "summary": "Python package to lazily generate synthetic genomic sequences for training od Keras models.", "version": "1.1.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/LucaCappelletti94/keras_synthetic_genome_sequence\" rel=\"nofollow\"><img alt=\"Travis CI build\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/20577f5a47d06233717990a315648026527c545b/68747470733a2f2f7472617669732d63692e6f72672f4c75636143617070656c6c6574746939342f6b657261735f73796e7468657469635f67656e6f6d655f73657175656e63652e706e67\"></a> <a href=\"https://sonarcloud.io/dashboard/index/LucaCappelletti94_keras_synthetic_genome_sequence\" rel=\"nofollow\"><img alt=\"SonarCloud Quality\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/95badc7f76e3b81d237c1c075bcf2606e76bf3a9/68747470733a2f2f736f6e6172636c6f75642e696f2f6170692f70726f6a6563745f6261646765732f6d6561737572653f70726f6a6563743d4c75636143617070656c6c6574746939345f6b657261735f73796e7468657469635f67656e6f6d655f73657175656e6365266d65747269633d616c6572745f737461747573\"></a> <a href=\"https://sonarcloud.io/dashboard/index/LucaCappelletti94_keras_synthetic_genome_sequence\" rel=\"nofollow\"><img alt=\"SonarCloud Maintainability\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/40ed76e2af0978737a7c7b51a785ccb3233ada43/68747470733a2f2f736f6e6172636c6f75642e696f2f6170692f70726f6a6563745f6261646765732f6d6561737572653f70726f6a6563743d4c75636143617070656c6c6574746939345f6b657261735f73796e7468657469635f67656e6f6d655f73657175656e6365266d65747269633d7371616c655f726174696e67\"></a> <a href=\"https://www.codacy.com/manual/LucaCappelletti94/keras_synthetic_genome_sequence?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=LucaCappelletti94/keras_synthetic_genome_sequence&amp;amp;utm_campaign=Badge_Grade\" rel=\"nofollow\"><img alt=\"Codacy Maintainability\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f5c233146cf6608f67412d5dfb971fc8c6c4d642/68747470733a2f2f6170692e636f646163792e636f6d2f70726f6a6563742f62616467652f47726164652f3766326334653239343738333463303562356138363961393434353438326430\"></a>\n<a href=\"https://codeclimate.com/github/LucaCappelletti94/keras_synthetic_genome_sequence/maintainability\" rel=\"nofollow\"><img alt=\"Maintainability\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fd6bba5c2bdeebc0d4bada0c49743f7e032b74bd/68747470733a2f2f6170692e636f6465636c696d6174652e636f6d2f76312f6261646765732f62383966366264306464633538636339336538392f6d61696e7461696e6162696c697479\"></a> <a href=\"https://badge.fury.io/py/keras-synthetic-genome-sequence\" rel=\"nofollow\"><img alt=\"Pypi project\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5631760f61d3d73c5d7ca0b0c8fd46450186f036/68747470733a2f2f62616467652e667572792e696f2f70792f6b657261732d73796e7468657469632d67656e6f6d652d73657175656e63652e737667\"></a> <a href=\"https://pepy.tech/badge/keras-synthetic-genome-sequence\" rel=\"nofollow\"><img alt=\"Pypi total project downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/17ad64cf1aed64cda69c2733e39442cdc75bbb95/68747470733a2f2f706570792e746563682f62616467652f6b657261732d73796e7468657469632d67656e6f6d652d73657175656e6365\"></a></p>\n<p>Python package to lazily generate synthetic genomic sequences for training of Keras models.</p>\n<div id=\"how-do-i-install-this-package\">\n<h2>How do I install this package?</h2>\n<p>As usual, just download it using pip:</p>\n<pre>pip install keras_synthetic_genome_sequence\n</pre>\n</div>\n<div id=\"tests-coverage\">\n<h2>Tests Coverage</h2>\n<p>Since some software handling coverages sometime\nget slightly different results, here\u2019s three of them:</p>\n<p><a href=\"https://coveralls.io/github/LucaCappelletti94/keras_synthetic_genome_sequence?branch=master\" rel=\"nofollow\"><img alt=\"Coveralls Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/686492279d705a16297af29529014fcc01bb8f11/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4c75636143617070656c6c6574746939342f6b657261735f73796e7468657469635f67656e6f6d655f73657175656e63652f62616467652e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://sonarcloud.io/dashboard/index/LucaCappelletti94_keras_synthetic_genome_sequence\" rel=\"nofollow\"><img alt=\"SonarCloud Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6b3e52c4c1b4f152e218d825544a54e287bb800b/68747470733a2f2f736f6e6172636c6f75642e696f2f6170692f70726f6a6563745f6261646765732f6d6561737572653f70726f6a6563743d4c75636143617070656c6c6574746939345f6b657261735f73796e7468657469635f67656e6f6d655f73657175656e6365266d65747269633d636f766572616765\"></a> <a href=\"https://codeclimate.com/github/LucaCappelletti94/keras_synthetic_genome_sequence/test_coverage\" rel=\"nofollow\"><img alt=\"Code Climate Coverate\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/97bf59e3ed64d8c83bda95d331e9a5ea6632c849/68747470733a2f2f6170692e636f6465636c696d6174652e636f6d2f76312f6261646765732f62383966366264306464633538636339336538392f746573745f636f766572616765\"></a></p>\n</div>\n<div id=\"usage-examples\">\n<h2>Usage examples</h2>\n<p>To use GapSequence to train your keras model you\nwill need to obtain statistical metrics for the\nbiological gaps you intend to mimic in your synthetic gaps.</p>\n<p>To achieve this, this package offers an utility called\nget_gaps_statistics, which allows you to obtain the\nmean and covariance of gaps in a given genomic assembly.</p>\n<p>The genomic assembly is automatically downloaded from UCSC\nusing <a href=\"https://github.com/LucaCappelletti94/ucsc_genomes_downloader\" rel=\"nofollow\">ucsc_genomes_downloader</a>,\nthen the gaps contained within are extracted and their windows\nis expanded to the given one, after filtering for the given\nmax_gap_size, as you might want to limit the gaps size to\na relatively small one (gaps can get in the tens of thousands\nof nucleotides, for instance in the telomeres).</p>\n<p>Let\u2019s start by listing all the important parameters:</p>\n<pre><span class=\"n\">assembly</span> <span class=\"o\">=</span> <span class=\"s2\">\"hg19\"</span>\n<span class=\"n\">window_size</span> <span class=\"o\">=</span> <span class=\"mi\">200</span>\n<span class=\"n\">batch_size</span> <span class=\"o\">=</span> <span class=\"mi\">128</span>\n</pre>\n<p>Now we can start by retrieving the gaps statistics:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">keras_synthetic_genome_sequence.utils</span> <span class=\"kn\">import</span> <span class=\"n\">get_gaps_statistics</span>\n\n<span class=\"n\">number</span><span class=\"p\">,</span> <span class=\"n\">mean</span><span class=\"p\">,</span> <span class=\"n\">covariance</span> <span class=\"o\">=</span> <span class=\"n\">get_gaps_statistics</span><span class=\"p\">(</span>\n    <span class=\"n\">assembly</span><span class=\"o\">=</span><span class=\"n\">assembly</span><span class=\"p\">,</span>\n    <span class=\"n\">max_gap_size</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span>\n    <span class=\"n\">window_size</span><span class=\"o\">=</span><span class=\"n\">window_size</span>\n<span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"I have identified </span><span class=\"si\">{number}</span><span class=\"s2\"> gaps!\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">number</span><span class=\"o\">=</span><span class=\"n\">number</span><span class=\"p\">))</span>\n</pre>\n<p>Now you must choose the ground truth on which to apply the\nsynthetic gaps, for instance the regions without gaps in\nthe genomic assembly hg19, chromosome chr1.\nThese regions will have to be tasselized into smaller\nchunks that are compatible with the shape you have chosen for\nthe gap statistics window_size.\nWe can retrieve these regions as follows:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ucsc_genomes_downloader</span> <span class=\"kn\">import</span> <span class=\"n\">Genome</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ucsc_genomes_downloader.utils</span> <span class=\"kn\">import</span> <span class=\"n\">tessellate_bed</span>\n\n<span class=\"n\">genome</span> <span class=\"o\">=</span> <span class=\"n\">Genome</span><span class=\"p\">(</span><span class=\"n\">assembly</span><span class=\"p\">,</span> <span class=\"n\">chromosomes</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"chr1\"</span><span class=\"p\">])</span>\n<span class=\"n\">ground_truth</span> <span class=\"o\">=</span> <span class=\"n\">tessellate_bed</span><span class=\"p\">(</span><span class=\"n\">genome</span><span class=\"o\">.</span><span class=\"n\">filled</span><span class=\"p\">(),</span> <span class=\"n\">window_size</span><span class=\"o\">=</span><span class=\"n\">window_size</span><span class=\"p\">)</span>\n</pre>\n<p>The obtained pandas DataFrame will have a bed-like format\nand look as follows:</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>\u00a0</th>\n<th>chrom</th>\n<th>chromStart</th>\n<th>chromEnd</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>0</td>\n<td>chr1</td>\n<td>10000</td>\n<td>10200</td>\n</tr>\n<tr><td>1</td>\n<td>chr1</td>\n<td>10200</td>\n<td>10400</td>\n</tr>\n<tr><td>2</td>\n<td>chr1</td>\n<td>10400</td>\n<td>10600</td>\n</tr>\n<tr><td>3</td>\n<td>chr1</td>\n<td>10600</td>\n<td>10800</td>\n</tr>\n<tr><td>4</td>\n<td>chr1</td>\n<td>10800</td>\n<td>11000</td>\n</tr>\n</tbody>\n</table>\n<p>Now we are ready to actually create the GapSequence:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">keras_synthetic_genome_sequence</span> <span class=\"kn\">import</span> <span class=\"n\">GapSequence</span>\n\n<span class=\"n\">gap_sequence</span> <span class=\"o\">=</span> <span class=\"n\">GapSequence</span><span class=\"p\">(</span>\n    <span class=\"n\">assembly</span><span class=\"o\">=</span><span class=\"n\">assembly</span><span class=\"p\">,</span>\n    <span class=\"n\">bed</span><span class=\"o\">=</span><span class=\"n\">ground_truth</span><span class=\"p\">,</span>\n    <span class=\"n\">gaps_mean</span><span class=\"o\">=</span><span class=\"n\">mean</span><span class=\"p\">,</span>\n    <span class=\"n\">gaps_covariance</span><span class=\"o\">=</span><span class=\"n\">covariance</span><span class=\"p\">,</span>\n    <span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"n\">batch_size</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Now, having a model that receives as\ninput and output shape (batch_size, window_size, 4),\nwe can train it as follows:</p>\n<pre><span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">build_my_denoiser</span><span class=\"p\">()</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">fit_generator</span><span class=\"p\">(</span>\n    <span class=\"n\">gap_sequence</span><span class=\"p\">,</span>\n    <span class=\"n\">steps_per_epoch</span><span class=\"o\">=</span><span class=\"n\">gap_sequence</span><span class=\"o\">.</span><span class=\"n\">steps_per_epoch</span><span class=\"p\">,</span>\n    <span class=\"n\">epochs</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span>\n    <span class=\"n\">shuffle</span><span class=\"o\">=</span><span class=\"kc\">True</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Happy denoising!</p>\n</div>\n<div id=\"comparison-between-biological-and-synthetic-distributions\">\n<h2>Comparison between biological and synthetic distributions</h2>\n<p>The following images refer to the biological and synthetic distributions\nof gaps in the hg19, hg38, mm9 and mm10 genomic assembly, considering\ngaps with length to up 100 nucleotides and total window size 1000.\nThe threshold used to convert to integer the multivariate gaussian distribution\nis 0.4, the default value used within the python package.</p>\n<img alt=\"https://github.com/LucaCappelletti94/keras_synthetic_genome_sequence/blob/master/distributions/hg19.png?raw=true\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/215b046c7b4ba3b52b684d1f8beec247962a73af/68747470733a2f2f6769746875622e636f6d2f4c75636143617070656c6c6574746939342f6b657261735f73796e7468657469635f67656e6f6d655f73657175656e63652f626c6f622f6d61737465722f646973747269627574696f6e732f686731392e706e673f7261773d74727565\">\n<img alt=\"https://github.com/LucaCappelletti94/keras_synthetic_genome_sequence/blob/master/distributions/hg38.png?raw=true\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/83560427cd1ce9b96f6b1bb0f43256cc675cf816/68747470733a2f2f6769746875622e636f6d2f4c75636143617070656c6c6574746939342f6b657261735f73796e7468657469635f67656e6f6d655f73657175656e63652f626c6f622f6d61737465722f646973747269627574696f6e732f686733382e706e673f7261773d74727565\">\n<img alt=\"https://github.com/LucaCappelletti94/keras_synthetic_genome_sequence/blob/master/distributions/mm9.png?raw=true\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/297cbdf3a88289ecd8e011967ee8c56144000f5e/68747470733a2f2f6769746875622e636f6d2f4c75636143617070656c6c6574746939342f6b657261735f73796e7468657469635f67656e6f6d655f73657175656e63652f626c6f622f6d61737465722f646973747269627574696f6e732f6d6d392e706e673f7261773d74727565\">\n<img alt=\"https://github.com/LucaCappelletti94/keras_synthetic_genome_sequence/blob/master/distributions/mm10.png?raw=true\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3aa3434514b900f2a8617147140687b4ba55ea2c/68747470733a2f2f6769746875622e636f6d2f4c75636143617070656c6c6574746939342f6b657261735f73796e7468657469635f67656e6f6d655f73657175656e63652f626c6f622f6d61737465722f646973747269627574696f6e732f6d6d31302e706e673f7261773d74727565\">\n</div>\n\n          </div>"}, "last_serial": 6907964, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "65d27a6e404974eee4b3395684c4504f", "sha256": "0f0fe2ad1e69531115e3c2c270bf5117671895df7233a6737777f5be33fb74fe"}, "downloads": -1, "filename": "keras_synthetic_genome_sequence-1.0.0.tar.gz", "has_sig": false, "md5_digest": "65d27a6e404974eee4b3395684c4504f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8154, "upload_time": "2020-01-30T12:48:05", "upload_time_iso_8601": "2020-01-30T12:48:05.522696Z", "url": "https://files.pythonhosted.org/packages/09/79/3a9c7bba90b6bce107f5b0892b9c298077d41710bcc3345f3f2ff97f2123/keras_synthetic_genome_sequence-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "f2a76e5e4ba6080b6508f4ce90218634", "sha256": "c8bdc7edc32974514e58e81a5979bd2aded54bf85df4d74b20c9951883035ea7"}, "downloads": -1, "filename": "keras_synthetic_genome_sequence-1.0.1.tar.gz", "has_sig": false, "md5_digest": "f2a76e5e4ba6080b6508f4ce90218634", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8168, "upload_time": "2020-01-30T18:49:53", "upload_time_iso_8601": "2020-01-30T18:49:53.094488Z", "url": "https://files.pythonhosted.org/packages/11/9d/18eaa4ce8459747010d6a5879dc62e11314e1daa511acbe87c5ae150b624/keras_synthetic_genome_sequence-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "70b1907517dc846f0f5ad538e8f37490", "sha256": "fbba8e77cb5edb74a1c48dd56185687ffd842a6a35f10aee913aee827b3b9259"}, "downloads": -1, "filename": "keras_synthetic_genome_sequence-1.0.2.tar.gz", "has_sig": false, "md5_digest": "70b1907517dc846f0f5ad538e8f37490", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8170, "upload_time": "2020-02-01T18:38:12", "upload_time_iso_8601": "2020-02-01T18:38:12.113049Z", "url": "https://files.pythonhosted.org/packages/e4/54/56e1f7a4f68f3563aa2fc07972bb90f0d73e858e75035b1dc33d95f50e96/keras_synthetic_genome_sequence-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "73da090123d6735488aab3c4d5bfc986", "sha256": "b9d78277326bb2d91067ac437aa64c431fb467a5d5b901bab29862d72d36df1f"}, "downloads": -1, "filename": "keras_synthetic_genome_sequence-1.0.3.tar.gz", "has_sig": false, "md5_digest": "73da090123d6735488aab3c4d5bfc986", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9118, "upload_time": "2020-02-20T18:14:10", "upload_time_iso_8601": "2020-02-20T18:14:10.834490Z", "url": "https://files.pythonhosted.org/packages/bc/a8/e13d438d979110770df4407b7dd55620bfe9026cfc82e7c0a125aa782c53/keras_synthetic_genome_sequence-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "7d99e9913407877d8a0c3ae50a1c1c55", "sha256": "1fd06244d608164fc32b72ce624b593c682ac2f1d4253459e5c5c853f95e5b05"}, "downloads": -1, "filename": "keras_synthetic_genome_sequence-1.0.4.tar.gz", "has_sig": false, "md5_digest": "7d99e9913407877d8a0c3ae50a1c1c55", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9119, "upload_time": "2020-02-20T20:17:24", "upload_time_iso_8601": "2020-02-20T20:17:24.068718Z", "url": "https://files.pythonhosted.org/packages/26/ed/242ce896f1f4db2118d43402cfc6b3f5b737eb44200110f20bca457289c9/keras_synthetic_genome_sequence-1.0.4.tar.gz", "yanked": false}], "1.0.6": [{"comment_text": "", "digests": {"md5": "104434dd5020e0c1e30c61e4e7404cf6", "sha256": "2aa5b431e60347806ca363c01bd720e793b0a2006f00c768e015c64e9a3791be"}, "downloads": -1, "filename": "keras_synthetic_genome_sequence-1.0.6.tar.gz", "has_sig": false, "md5_digest": "104434dd5020e0c1e30c61e4e7404cf6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9133, "upload_time": "2020-02-20T21:55:53", "upload_time_iso_8601": "2020-02-20T21:55:53.230777Z", "url": "https://files.pythonhosted.org/packages/09/0c/be72c9497b6f8c144351af444a22ec0c30bd4244c12e803390345bac3a50/keras_synthetic_genome_sequence-1.0.6.tar.gz", "yanked": false}], "1.0.7": [{"comment_text": "", "digests": {"md5": "58af9928fc8c32cae80fdab495e50bd9", "sha256": "39bd5ef35e05ff2f7d332b824b03037de4c1d7b32538e48570e560946c901d21"}, "downloads": -1, "filename": "keras_synthetic_genome_sequence-1.0.7.tar.gz", "has_sig": false, "md5_digest": "58af9928fc8c32cae80fdab495e50bd9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9341, "upload_time": "2020-02-21T14:13:16", "upload_time_iso_8601": "2020-02-21T14:13:16.811484Z", "url": "https://files.pythonhosted.org/packages/e5/7c/701f0b6801b146c6b406b7761322a3ad5344f0404ee5f545a01bebd01383/keras_synthetic_genome_sequence-1.0.7.tar.gz", "yanked": false}], "1.0.9": [{"comment_text": "", "digests": {"md5": "131a23973cc702334d72ae5357567a29", "sha256": "a47f2d4f93a2a0583cb82c9c58d2d0dcbeec021ff28e9d4e7b67c031c1365367"}, "downloads": -1, "filename": "keras_synthetic_genome_sequence-1.0.9.tar.gz", "has_sig": false, "md5_digest": "131a23973cc702334d72ae5357567a29", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9986, "upload_time": "2020-02-22T17:27:03", "upload_time_iso_8601": "2020-02-22T17:27:03.571627Z", "url": "https://files.pythonhosted.org/packages/9a/97/5d7c91e3f4ffe7ce9c0a27d5d469b3774d4344140e434db9accc46088525/keras_synthetic_genome_sequence-1.0.9.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "cf89c09f4a23cf9cdbccad7a54af44d0", "sha256": "73004386a54ca140749eb28158aeaf622e0373a2ea2a0029ed58aa395152b85b"}, "downloads": -1, "filename": "keras_synthetic_genome_sequence-1.1.0.tar.gz", "has_sig": false, "md5_digest": "cf89c09f4a23cf9cdbccad7a54af44d0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10005, "upload_time": "2020-03-01T15:06:13", "upload_time_iso_8601": "2020-03-01T15:06:13.190823Z", "url": "https://files.pythonhosted.org/packages/04/ad/ba91ac595ffce206314c5499cf98d02e0e749eb9d461aec3a26e7e640900/keras_synthetic_genome_sequence-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "141e663421458209995213889f3d85da", "sha256": "65a25c57be5cbdfb940f1ed04ef382c0cb59c48152f4aa2940fff177ffe65f13"}, "downloads": -1, "filename": "keras_synthetic_genome_sequence-1.1.1.tar.gz", "has_sig": false, "md5_digest": "141e663421458209995213889f3d85da", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9990, "upload_time": "2020-03-01T16:57:48", "upload_time_iso_8601": "2020-03-01T16:57:48.419435Z", "url": "https://files.pythonhosted.org/packages/91/15/eb1fcf77506b84830f7ec591122f08d35e323deb00b0c0dcbd1c55129b54/keras_synthetic_genome_sequence-1.1.1.tar.gz", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "f8752d1e7e12df5b3141ca83875705cb", "sha256": "75fe62ea7beb7b3d6beef209f99fe0b42f30e7eb6cc3fb7d67a557b77b6f5bff"}, "downloads": -1, "filename": "keras_synthetic_genome_sequence-1.1.2.tar.gz", "has_sig": false, "md5_digest": "f8752d1e7e12df5b3141ca83875705cb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10051, "upload_time": "2020-03-01T20:27:23", "upload_time_iso_8601": "2020-03-01T20:27:23.823737Z", "url": "https://files.pythonhosted.org/packages/35/e4/9b67b51bc911ce7c39598dfcca391481b9a8c0db4e0565377e78a9017004/keras_synthetic_genome_sequence-1.1.2.tar.gz", "yanked": false}], "1.1.3": [{"comment_text": "", "digests": {"md5": "b914fc5541c258712fc85c9ceee45c02", "sha256": "bc5fd15693a506cca3bf7f17076d05abb4624bfb6d9e4f7082f6a3d80f374cc4"}, "downloads": -1, "filename": "keras_synthetic_genome_sequence-1.1.3.tar.gz", "has_sig": false, "md5_digest": "b914fc5541c258712fc85c9ceee45c02", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10146, "upload_time": "2020-03-01T21:41:40", "upload_time_iso_8601": "2020-03-01T21:41:40.255783Z", "url": "https://files.pythonhosted.org/packages/35/4c/0d610f8bd1f264ec48de0cc9eef2f952a649ae92e1c760a969e1dbc97a27/keras_synthetic_genome_sequence-1.1.3.tar.gz", "yanked": false}], "1.1.4": [{"comment_text": "", "digests": {"md5": "1c8577d5ede1482217b821ce74cf9fcf", "sha256": "b54d05c0cd1818357d6ebfdcf65aba13a5bf9ac360a3170654e6fc47771357bf"}, "downloads": -1, "filename": "keras_synthetic_genome_sequence-1.1.4.tar.gz", "has_sig": false, "md5_digest": "1c8577d5ede1482217b821ce74cf9fcf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10233, "upload_time": "2020-03-29T18:13:44", "upload_time_iso_8601": "2020-03-29T18:13:44.945311Z", "url": "https://files.pythonhosted.org/packages/3a/ff/ee98e41f735d95926c55fdc9b50f21fa406321e3773eb295d1a283b71403/keras_synthetic_genome_sequence-1.1.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1c8577d5ede1482217b821ce74cf9fcf", "sha256": "b54d05c0cd1818357d6ebfdcf65aba13a5bf9ac360a3170654e6fc47771357bf"}, "downloads": -1, "filename": "keras_synthetic_genome_sequence-1.1.4.tar.gz", "has_sig": false, "md5_digest": "1c8577d5ede1482217b821ce74cf9fcf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10233, "upload_time": "2020-03-29T18:13:44", "upload_time_iso_8601": "2020-03-29T18:13:44.945311Z", "url": "https://files.pythonhosted.org/packages/3a/ff/ee98e41f735d95926c55fdc9b50f21fa406321e3773eb295d1a283b71403/keras_synthetic_genome_sequence-1.1.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:09 2020"}