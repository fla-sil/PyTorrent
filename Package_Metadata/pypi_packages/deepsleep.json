{"info": {"author": "Ami Beuret", "author_email": "amibeuret@icloud.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# DeepSleep\n\nThis is a simple framework to preprocess and classify sleep stages based on \nrecorded EEG/EMG/EOG data. It replicates and extends on top of the [Spindle \nmethod](https://sleeplearning.ethz.ch). \n\n## Installation\nFirst make a new python virtual environment and then install the package using pip:\n\n```\npip install deepsleep\n```\n\n\n## Spindle sleep scoring\n\nYou could use both preprocessing routines and CNN network for the classification \ndemonstrated in the [paper](https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1006968) \n\n\n### Spindle preprocessing routine\nBelow is an example of how to use the preprocessing routine:\n\n```python\nimport numpy as np\nfrom deepsleep.data.utils import load_pyedf\nfrom deepsleep.data import SpindlePreproc\nfrom deepsleep.utils import setup_logger_to_std\n\n\n# Set the logger to print to stdout. You could skip this and ignore logs.\nsetup_logger_to_std()\n\n# Adapt this for your own .edf data\neeg_file = '/path/to/eeg.edf'\n\n# preprocessing parameters. Below are defaults used as in the paper\nSPINDLE_PREPROCESSING_PARAMS = {\n    'name': 'SpindlePreproc',\n    'target_srate': 128,\n    'spectrogram-stride': 16,\n    'time_interval': 4,\n    'num_neighbors': 4,\n    'EEG-filtering': {'lfreq': 0.5, 'hfreq': 12},\n    'EMG-filtering': {'lfreq': 2, 'hfreq': 30}\n}\n\nprint(\"Loading EEG/EMG...\")\nall_signals, srate = load_pyedf(eeg_file)\n\n\nprint(\"Preprocessing data...\")\npreprocessing = SpindlePreproc(SPINDLE_PREPROCESSING_PARAMS)\ndata = preprocessing(all_signals, srate, np.array([0, 1]), np.array([]), np.array([2]))\n\n```\n\n### Spindle CNN network\n\nYou could import the pytorch CNN network for training:\n```python\nfrom deepsleep.models import SpindleGraph\n\nmyGraph = SpindleGraph(input_dim=(3, 24, 160), nb_class=3, dropout_rate=0.5)\n```\n\n### Making prediction with Spindle\n\nThere are two ways of making predictions with our pretrained model, either by \nimporting the model, preprocessing routine etc. from the library, or simply \nusing the terminal and commandline: \n\n#### Predictions using command line\n\n\nIn the terminal you could simply provide the path to your `.edf` file, a path \nwhere you would like to save predictions `.csv`s, and the path to the directory \nwhere the pre-trained weights are stored as demonstrated below:\n\n```bash\npredict.py /path/to/my/AWESOME_EEG.edf --predictions /path/to/csv_folder/ --weight_dir /path/to/weights/\n\n```\n\nTwo `.csv` files `/path/to/csv_folder/AWESOME_EEG_ad_predictions_prob.csv` and \n`/path/to/csv_folder/AWESOME_EEG_predictions_without_artifacts.csv` will be \nstored as a result.\n\nThe directory `/path/to/weights/` should contain two provided weights named \n`checkpoint_replicatePaperAD_1563189723.278988epoch3.pth` and \n`checkpoint_replicatePaperSS_1563188754.9532504epoch10.pth`\n\n#### Predictions by importing the library\n\nVery similar to `predict.py`, you could follow this example: (Make sure you set all the paths)\n\n```python\nfrom pathlib import Path\n\nfrom deepsleep.data import SpindlePreproc\nfrom deepsleep.data import ProdData\nfrom deepsleep.models import SpindlePredictModel\nfrom deepsleep.utils import setup_logger_to_std\nfrom deepsleep.utils import set_up_paths\n\n\n# Set parameters for preprocessing\nSPINDLE_PREPROCESSING_PARAMS = {\n    'name': 'SpindlePreproc',\n    'target_srate': 128,\n    'spectrogram-stride': 16,\n    'time_interval': 4,\n    'num_neighbors': 4,\n    'EEG-filtering': {'lfreq': 0.5, 'hfreq': 12},\n    'EMG-filtering': {'lfreq': 2, 'hfreq': 30}\n}\n\n# Set parameters for pytorch data loader\nDATALOADER_PARAMS = {\n    'num_workers': 4,\n    'batch_size': 100,\n    'do_shuffle': False,\n    'batch_prefetch': 10,\n    'hdf5': '',\n    'folds': ['fold1']\n}\n\n# Set parameters to set up the Spindle model\nMODEL_PARAMS = {\n    'name': 'SpindlePredictModel',\n    'artefact_threshold': 0.5,  # The probability threshold more than which the sample is considered as a noise sample\n    'weights': ['checkpoint_replicatePaperAD_1563189723.278988epoch3.pth',\n                'checkpoint_replicatePaperSS_1563188754.9532504epoch10.pth']\n}\n\n# Set the logger to print to stdout\nsetup_logger_to_std()\n\n# Set the required paths\nroot_path = Path('/path/to/my/results_folder')\ndata_path = Path('/path/to/eeg.pdf')  # Set this to your input .edf file\nweights_path = Path('/path/to/weights/')  # Set this to the folder in which weights are located\nset_up_paths(root_path=root_path, data_path=data_path, weights_path=weights_path)\n\n# Load data and preprocess\npreprocessing = SpindlePreproc(SPINDLE_PREPROCESSING_PARAMS)\npred_handlers = ProdData(DATALOADER_PARAMS, preprocessing)\n\n# Make model\nparams = dict({'model': MODEL_PARAMS})\nparams['model']['predictions_path'] = Path('/path/to/csv_folder/preds_')  #  Set this to the folder in which .csv prediction files will be saved\nmodel = SpindlePredictModel(params)\n\n# Set inputs and predict\nmodel.set_inputs(prediction=[pred_handlers])\nmodel.prediction()\n\n```\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://sleeplearning.ethz.ch", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "deepsleep", "package_url": "https://pypi.org/project/deepsleep/", "platform": "", "project_url": "https://pypi.org/project/deepsleep/", "project_urls": {"Homepage": "https://sleeplearning.ethz.ch"}, "release_url": "https://pypi.org/project/deepsleep/1.0.1/", "requires_dist": ["torch (==1.3.1)", "numpy (==1.18.1)", "pandas (==0.25.3)", "Pillow (==6.2.2)", "scipy (==1.4.1)", "sklearn (==0.0)", "torchvision (==0.4.2)", "matplotlib (==3.1.2)", "mne (==0.19.2)", "pyEDFlib (==0.1.15)", "PyYAML (==5.3)", "h5py (==2.10.0)", "mlflow (==1.5.0)", "hmmlearn (==0.2.3)"], "requires_python": ">=3.6", "summary": "Sleep EEG classification", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>DeepSleep</h1>\n<p>This is a simple framework to preprocess and classify sleep stages based on\nrecorded EEG/EMG/EOG data. It replicates and extends on top of the <a href=\"https://sleeplearning.ethz.ch\" rel=\"nofollow\">Spindle\nmethod</a>.</p>\n<h2>Installation</h2>\n<p>First make a new python virtual environment and then install the package using pip:</p>\n<pre><code>pip install deepsleep\n</code></pre>\n<h2>Spindle sleep scoring</h2>\n<p>You could use both preprocessing routines and CNN network for the classification\ndemonstrated in the <a href=\"https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1006968\" rel=\"nofollow\">paper</a></p>\n<h3>Spindle preprocessing routine</h3>\n<p>Below is an example of how to use the preprocessing routine:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">deepsleep.data.utils</span> <span class=\"kn\">import</span> <span class=\"n\">load_pyedf</span>\n<span class=\"kn\">from</span> <span class=\"nn\">deepsleep.data</span> <span class=\"kn\">import</span> <span class=\"n\">SpindlePreproc</span>\n<span class=\"kn\">from</span> <span class=\"nn\">deepsleep.utils</span> <span class=\"kn\">import</span> <span class=\"n\">setup_logger_to_std</span>\n\n\n<span class=\"c1\"># Set the logger to print to stdout. You could skip this and ignore logs.</span>\n<span class=\"n\">setup_logger_to_std</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Adapt this for your own .edf data</span>\n<span class=\"n\">eeg_file</span> <span class=\"o\">=</span> <span class=\"s1\">'/path/to/eeg.edf'</span>\n\n<span class=\"c1\"># preprocessing parameters. Below are defaults used as in the paper</span>\n<span class=\"n\">SPINDLE_PREPROCESSING_PARAMS</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'SpindlePreproc'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'target_srate'</span><span class=\"p\">:</span> <span class=\"mi\">128</span><span class=\"p\">,</span>\n    <span class=\"s1\">'spectrogram-stride'</span><span class=\"p\">:</span> <span class=\"mi\">16</span><span class=\"p\">,</span>\n    <span class=\"s1\">'time_interval'</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">,</span>\n    <span class=\"s1\">'num_neighbors'</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">,</span>\n    <span class=\"s1\">'EEG-filtering'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'lfreq'</span><span class=\"p\">:</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"s1\">'hfreq'</span><span class=\"p\">:</span> <span class=\"mi\">12</span><span class=\"p\">},</span>\n    <span class=\"s1\">'EMG-filtering'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'lfreq'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">'hfreq'</span><span class=\"p\">:</span> <span class=\"mi\">30</span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Loading EEG/EMG...\"</span><span class=\"p\">)</span>\n<span class=\"n\">all_signals</span><span class=\"p\">,</span> <span class=\"n\">srate</span> <span class=\"o\">=</span> <span class=\"n\">load_pyedf</span><span class=\"p\">(</span><span class=\"n\">eeg_file</span><span class=\"p\">)</span>\n\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Preprocessing data...\"</span><span class=\"p\">)</span>\n<span class=\"n\">preprocessing</span> <span class=\"o\">=</span> <span class=\"n\">SpindlePreproc</span><span class=\"p\">(</span><span class=\"n\">SPINDLE_PREPROCESSING_PARAMS</span><span class=\"p\">)</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">preprocessing</span><span class=\"p\">(</span><span class=\"n\">all_signals</span><span class=\"p\">,</span> <span class=\"n\">srate</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]),</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([]),</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">2</span><span class=\"p\">]))</span>\n</pre>\n<h3>Spindle CNN network</h3>\n<p>You could import the pytorch CNN network for training:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">deepsleep.models</span> <span class=\"kn\">import</span> <span class=\"n\">SpindleGraph</span>\n\n<span class=\"n\">myGraph</span> <span class=\"o\">=</span> <span class=\"n\">SpindleGraph</span><span class=\"p\">(</span><span class=\"n\">input_dim</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">24</span><span class=\"p\">,</span> <span class=\"mi\">160</span><span class=\"p\">),</span> <span class=\"n\">nb_class</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">dropout_rate</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n</pre>\n<h3>Making prediction with Spindle</h3>\n<p>There are two ways of making predictions with our pretrained model, either by\nimporting the model, preprocessing routine etc. from the library, or simply\nusing the terminal and commandline:</p>\n<h4>Predictions using command line</h4>\n<p>In the terminal you could simply provide the path to your <code>.edf</code> file, a path\nwhere you would like to save predictions <code>.csv</code>s, and the path to the directory\nwhere the pre-trained weights are stored as demonstrated below:</p>\n<pre>predict.py /path/to/my/AWESOME_EEG.edf --predictions /path/to/csv_folder/ --weight_dir /path/to/weights/\n</pre>\n<p>Two <code>.csv</code> files <code>/path/to/csv_folder/AWESOME_EEG_ad_predictions_prob.csv</code> and\n<code>/path/to/csv_folder/AWESOME_EEG_predictions_without_artifacts.csv</code> will be\nstored as a result.</p>\n<p>The directory <code>/path/to/weights/</code> should contain two provided weights named\n<code>checkpoint_replicatePaperAD_1563189723.278988epoch3.pth</code> and\n<code>checkpoint_replicatePaperSS_1563188754.9532504epoch10.pth</code></p>\n<h4>Predictions by importing the library</h4>\n<p>Very similar to <code>predict.py</code>, you could follow this example: (Make sure you set all the paths)</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pathlib</span> <span class=\"kn\">import</span> <span class=\"n\">Path</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">deepsleep.data</span> <span class=\"kn\">import</span> <span class=\"n\">SpindlePreproc</span>\n<span class=\"kn\">from</span> <span class=\"nn\">deepsleep.data</span> <span class=\"kn\">import</span> <span class=\"n\">ProdData</span>\n<span class=\"kn\">from</span> <span class=\"nn\">deepsleep.models</span> <span class=\"kn\">import</span> <span class=\"n\">SpindlePredictModel</span>\n<span class=\"kn\">from</span> <span class=\"nn\">deepsleep.utils</span> <span class=\"kn\">import</span> <span class=\"n\">setup_logger_to_std</span>\n<span class=\"kn\">from</span> <span class=\"nn\">deepsleep.utils</span> <span class=\"kn\">import</span> <span class=\"n\">set_up_paths</span>\n\n\n<span class=\"c1\"># Set parameters for preprocessing</span>\n<span class=\"n\">SPINDLE_PREPROCESSING_PARAMS</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'SpindlePreproc'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'target_srate'</span><span class=\"p\">:</span> <span class=\"mi\">128</span><span class=\"p\">,</span>\n    <span class=\"s1\">'spectrogram-stride'</span><span class=\"p\">:</span> <span class=\"mi\">16</span><span class=\"p\">,</span>\n    <span class=\"s1\">'time_interval'</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">,</span>\n    <span class=\"s1\">'num_neighbors'</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">,</span>\n    <span class=\"s1\">'EEG-filtering'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'lfreq'</span><span class=\"p\">:</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"s1\">'hfreq'</span><span class=\"p\">:</span> <span class=\"mi\">12</span><span class=\"p\">},</span>\n    <span class=\"s1\">'EMG-filtering'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'lfreq'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">'hfreq'</span><span class=\"p\">:</span> <span class=\"mi\">30</span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># Set parameters for pytorch data loader</span>\n<span class=\"n\">DATALOADER_PARAMS</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'num_workers'</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">,</span>\n    <span class=\"s1\">'batch_size'</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"p\">,</span>\n    <span class=\"s1\">'do_shuffle'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"s1\">'batch_prefetch'</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span>\n    <span class=\"s1\">'hdf5'</span><span class=\"p\">:</span> <span class=\"s1\">''</span><span class=\"p\">,</span>\n    <span class=\"s1\">'folds'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'fold1'</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># Set parameters to set up the Spindle model</span>\n<span class=\"n\">MODEL_PARAMS</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'SpindlePredictModel'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'artefact_threshold'</span><span class=\"p\">:</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span>  <span class=\"c1\"># The probability threshold more than which the sample is considered as a noise sample</span>\n    <span class=\"s1\">'weights'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'checkpoint_replicatePaperAD_1563189723.278988epoch3.pth'</span><span class=\"p\">,</span>\n                <span class=\"s1\">'checkpoint_replicatePaperSS_1563188754.9532504epoch10.pth'</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># Set the logger to print to stdout</span>\n<span class=\"n\">setup_logger_to_std</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Set the required paths</span>\n<span class=\"n\">root_path</span> <span class=\"o\">=</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"s1\">'/path/to/my/results_folder'</span><span class=\"p\">)</span>\n<span class=\"n\">data_path</span> <span class=\"o\">=</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"s1\">'/path/to/eeg.pdf'</span><span class=\"p\">)</span>  <span class=\"c1\"># Set this to your input .edf file</span>\n<span class=\"n\">weights_path</span> <span class=\"o\">=</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"s1\">'/path/to/weights/'</span><span class=\"p\">)</span>  <span class=\"c1\"># Set this to the folder in which weights are located</span>\n<span class=\"n\">set_up_paths</span><span class=\"p\">(</span><span class=\"n\">root_path</span><span class=\"o\">=</span><span class=\"n\">root_path</span><span class=\"p\">,</span> <span class=\"n\">data_path</span><span class=\"o\">=</span><span class=\"n\">data_path</span><span class=\"p\">,</span> <span class=\"n\">weights_path</span><span class=\"o\">=</span><span class=\"n\">weights_path</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Load data and preprocess</span>\n<span class=\"n\">preprocessing</span> <span class=\"o\">=</span> <span class=\"n\">SpindlePreproc</span><span class=\"p\">(</span><span class=\"n\">SPINDLE_PREPROCESSING_PARAMS</span><span class=\"p\">)</span>\n<span class=\"n\">pred_handlers</span> <span class=\"o\">=</span> <span class=\"n\">ProdData</span><span class=\"p\">(</span><span class=\"n\">DATALOADER_PARAMS</span><span class=\"p\">,</span> <span class=\"n\">preprocessing</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Make model</span>\n<span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">({</span><span class=\"s1\">'model'</span><span class=\"p\">:</span> <span class=\"n\">MODEL_PARAMS</span><span class=\"p\">})</span>\n<span class=\"n\">params</span><span class=\"p\">[</span><span class=\"s1\">'model'</span><span class=\"p\">][</span><span class=\"s1\">'predictions_path'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"s1\">'/path/to/csv_folder/preds_'</span><span class=\"p\">)</span>  <span class=\"c1\">#  Set this to the folder in which .csv prediction files will be saved</span>\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">SpindlePredictModel</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Set inputs and predict</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">set_inputs</span><span class=\"p\">(</span><span class=\"n\">prediction</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">pred_handlers</span><span class=\"p\">])</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">prediction</span><span class=\"p\">()</span>\n</pre>\n\n          </div>"}, "last_serial": 6927368, "releases": {"0.0.6": [{"comment_text": "", "digests": {"md5": "8a825070b2ea1b5667dd99348b7d2801", "sha256": "5f0c998679a01fb5d5e2b5b7f6a3a19194d1bed74a1248d5df2350bc580e9301"}, "downloads": -1, "filename": "deepsleep-0.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "8a825070b2ea1b5667dd99348b7d2801", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 40225, "upload_time": "2020-01-15T13:37:36", "upload_time_iso_8601": "2020-01-15T13:37:36.099846Z", "url": "https://files.pythonhosted.org/packages/cd/a0/bc8dd7f40b8a0b99c79f32f119fd21cc93d2fe468c7bea4f7ae15cad59e1/deepsleep-0.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3477ef0c703476c23eea413c9e56fc72", "sha256": "9699300e5a8f67aa415a93ca9458d5c39506862ee824371bc6a4b6e82858e0ad"}, "downloads": -1, "filename": "deepsleep-0.0.6.tar.gz", "has_sig": false, "md5_digest": "3477ef0c703476c23eea413c9e56fc72", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 28284, "upload_time": "2020-01-15T13:37:38", "upload_time_iso_8601": "2020-01-15T13:37:38.965154Z", "url": "https://files.pythonhosted.org/packages/d4/b6/190cf3126e49d64a3032635e632837bf2b7c2ed3dc450d9f863b3dcd6c5f/deepsleep-0.0.6.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "a992607f0b497e3506b2236933e0d065", "sha256": "ae60d0921a2f1238d13d3f9e6bfc35274877c8afc975f3a85a6fefac3592a96d"}, "downloads": -1, "filename": "deepsleep-0.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "a992607f0b497e3506b2236933e0d065", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 40805, "upload_time": "2020-01-15T13:57:43", "upload_time_iso_8601": "2020-01-15T13:57:43.833188Z", "url": "https://files.pythonhosted.org/packages/69/1d/43abae0b72b40a44b8a607d93f5338feb13ecccc7a82438ac85538780d42/deepsleep-0.0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "69a00011dffda86d553a721e9852e77e", "sha256": "843ec4ee54aa434724b905821f71b9b3f78ce847e66389d1c995b041da8e74d6"}, "downloads": -1, "filename": "deepsleep-0.0.7.tar.gz", "has_sig": false, "md5_digest": "69a00011dffda86d553a721e9852e77e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 28564, "upload_time": "2020-01-15T13:57:45", "upload_time_iso_8601": "2020-01-15T13:57:45.814013Z", "url": "https://files.pythonhosted.org/packages/c9/5c/802d02080681f4fb72c11d30ec9f475375da46528a844cfe0c853156e834/deepsleep-0.0.7.tar.gz", "yanked": false}], "0.0.8": [{"comment_text": "", "digests": {"md5": "dd815456366b4db8549270ce084a35b5", "sha256": "e57b8ae3ad959e3e3a5136d43e1a7c9ce4aa582a2a6893933d2d03a9df221bbd"}, "downloads": -1, "filename": "deepsleep-0.0.8-py3-none-any.whl", "has_sig": false, "md5_digest": "dd815456366b4db8549270ce084a35b5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 40769, "upload_time": "2020-01-15T15:11:46", "upload_time_iso_8601": "2020-01-15T15:11:46.933677Z", "url": "https://files.pythonhosted.org/packages/01/c8/59fe2fd1f3ee17cf55736b73a2634176ebaeaaa2132527d764fcb1b2cca8/deepsleep-0.0.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dda5f1d06fcbbceee1b82dccb7f105bf", "sha256": "d227cdf6fa1250c99acd1052e35dfcac76c61d196e73b5a7aee449a7c89897e0"}, "downloads": -1, "filename": "deepsleep-0.0.8.tar.gz", "has_sig": false, "md5_digest": "dda5f1d06fcbbceee1b82dccb7f105bf", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 28569, "upload_time": "2020-01-15T15:11:48", "upload_time_iso_8601": "2020-01-15T15:11:48.573000Z", "url": "https://files.pythonhosted.org/packages/39/62/0f1d28fdc0688c395c5c931f13852a10e433b9532c06f40fab4cdd75f9f5/deepsleep-0.0.8.tar.gz", "yanked": false}], "0.0.9": [{"comment_text": "", "digests": {"md5": "5d9440bdf7e382c7a647cf8632d7800e", "sha256": "0d960759cc96ccd8668cddd5b37e59786bb608a682ab975300099c9b747ffc01"}, "downloads": -1, "filename": "deepsleep-0.0.9-py3-none-any.whl", "has_sig": false, "md5_digest": "5d9440bdf7e382c7a647cf8632d7800e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 42485, "upload_time": "2020-02-20T21:31:20", "upload_time_iso_8601": "2020-02-20T21:31:20.930839Z", "url": "https://files.pythonhosted.org/packages/a3/c2/796b7398ad08703d8e2c6eb79594f2f0f5ea00031908738adb0d33b00cd2/deepsleep-0.0.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "471351dd7ecb62cb1095fc5960afa211", "sha256": "17365c8280048cd3d0ec0dcf0c5d6670119ec609fcc173b610dc54fd4ebe2212"}, "downloads": -1, "filename": "deepsleep-0.0.9.tar.gz", "has_sig": false, "md5_digest": "471351dd7ecb62cb1095fc5960afa211", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 30136, "upload_time": "2020-02-20T21:31:22", "upload_time_iso_8601": "2020-02-20T21:31:22.464001Z", "url": "https://files.pythonhosted.org/packages/da/02/826db3fcf92d1c2438fa0233ecffd95223fb2680492f7b8bdeea2c356840/deepsleep-0.0.9.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "77c84ee6c26cbc90fde9584c7664c063", "sha256": "197b1668031dbc815589637d1dc4e050de7fa32b5650a07b3a8631eb34a42a5a"}, "downloads": -1, "filename": "deepsleep-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "77c84ee6c26cbc90fde9584c7664c063", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 42692, "upload_time": "2020-03-31T15:38:46", "upload_time_iso_8601": "2020-03-31T15:38:46.342341Z", "url": "https://files.pythonhosted.org/packages/7b/75/63380a2feddebfb56ea11c28aa003237a1f695b371be690d7545e5af8346/deepsleep-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6f7b9a9b277fbe2b2d6629938a1fe366", "sha256": "4269fbccfb7684e97b88d5253a60c02c47f03f2a30ee970b0befe555b310ca74"}, "downloads": -1, "filename": "deepsleep-1.0.0.tar.gz", "has_sig": false, "md5_digest": "6f7b9a9b277fbe2b2d6629938a1fe366", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 30329, "upload_time": "2020-03-31T15:38:48", "upload_time_iso_8601": "2020-03-31T15:38:48.575666Z", "url": "https://files.pythonhosted.org/packages/8a/dc/aafe74d0b006e448305613f1b162794fe77333257c08790fc65f1943c9ab/deepsleep-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "818cc2e11d0ff876a2be978fa5662025", "sha256": "e561fc619e65acb8d75c9e060a1d3f25b92beb77b0777262438296d73ab61b7e"}, "downloads": -1, "filename": "deepsleep-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "818cc2e11d0ff876a2be978fa5662025", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 42792, "upload_time": "2020-04-01T12:36:52", "upload_time_iso_8601": "2020-04-01T12:36:52.828823Z", "url": "https://files.pythonhosted.org/packages/d8/81/e3852071bc96c5d70ff1815f3e29aeb7b434ccca798b3a7f1c07ad3ba9e2/deepsleep-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "63f556912b14a3507f6f295a5c5237aa", "sha256": "c9241cf0170a5d9d1e0923c50fd04f4d7cd7ff73c2b118512266d5274f8b19bc"}, "downloads": -1, "filename": "deepsleep-1.0.1.tar.gz", "has_sig": false, "md5_digest": "63f556912b14a3507f6f295a5c5237aa", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 30349, "upload_time": "2020-04-01T12:36:56", "upload_time_iso_8601": "2020-04-01T12:36:56.715943Z", "url": "https://files.pythonhosted.org/packages/56/fe/9fef3e430a598a502cafee0aca51ec1f11bd8a9c54a15642e09c133a3378/deepsleep-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "818cc2e11d0ff876a2be978fa5662025", "sha256": "e561fc619e65acb8d75c9e060a1d3f25b92beb77b0777262438296d73ab61b7e"}, "downloads": -1, "filename": "deepsleep-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "818cc2e11d0ff876a2be978fa5662025", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 42792, "upload_time": "2020-04-01T12:36:52", "upload_time_iso_8601": "2020-04-01T12:36:52.828823Z", "url": "https://files.pythonhosted.org/packages/d8/81/e3852071bc96c5d70ff1815f3e29aeb7b434ccca798b3a7f1c07ad3ba9e2/deepsleep-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "63f556912b14a3507f6f295a5c5237aa", "sha256": "c9241cf0170a5d9d1e0923c50fd04f4d7cd7ff73c2b118512266d5274f8b19bc"}, "downloads": -1, "filename": "deepsleep-1.0.1.tar.gz", "has_sig": false, "md5_digest": "63f556912b14a3507f6f295a5c5237aa", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 30349, "upload_time": "2020-04-01T12:36:56", "upload_time_iso_8601": "2020-04-01T12:36:56.715943Z", "url": "https://files.pythonhosted.org/packages/56/fe/9fef3e430a598a502cafee0aca51ec1f11bd8a9c54a15642e09c133a3378/deepsleep-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:39:21 2020"}