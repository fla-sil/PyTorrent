{"info": {"author": "Teriks", "author_email": "Teriks@users.noreply.github.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Operating System :: OS Independent", "Topic :: Software Development :: Libraries"], "description": "About dschema\n=============\n\n.. |codecov| image:: https://codecov.io/gh/Teriks/dschema/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/Teriks/dschema\n\n.. |Master Documentation Status| image:: https://readthedocs.org/projects/dschema/badge/?version=latest\n   :target: http://dschema.readthedocs.io/en/latest/?badge=latest\n\n.. |pypi| image:: https://badge.fury.io/py/dschema.svg\n   :target: https://badge.fury.io/py/dschema\n\n|pypi| |Master Documentation Status| |codecov|\n\ndschema is a small library for validating the content of python dictionary objects against a schema.\n\nThe schema can be defined in code or entirely as text (parsed from json generally)\n\ndschema was mainly made for validating config files written in JSON.\n\n\nExample\n=======\n\nSee documentation link for more examples\n\n.. code-block:: python\n\n    import re\n    import phonenumbers\n    import dschema\n\n\n    # https://github.com/daviddrysdale/python-phonenumbers\n    # pip install phonenumbers\n\n\n    def phone_type(number):\n        # Exceptions are validation errors\n        # Very similar design to the \"argparse\" module\n        return phonenumbers.parse(number)\n\n\n    def ssn_type(ssn):\n        if re.match('^\\d{3}-?\\d{2}-?\\d{4}$', ssn):\n            return ssn\n        else:\n            raise ValueError('\"{}\" is not a valid SSN.')\n\n\n    schema = {\n        'person': {\n            'first_name': dschema.prop(required=True),\n            'last_name': dschema.prop(required=True),\n            'phone': dschema.prop(required=True, type=phone_type),\n            'ssn': dschema.prop(required=True, type='ssn_type'),\n\n            dschema.Required: True\n            # \"person\" namespace is required, you must specify\n            # even if \"person\" itself contains required properties\n        },\n\n        # Allow a raw dictionary value to pass through\n\n        'other_info': dschema.prop(default=dict(), dict=True),\n\n        # default to False if not present\n\n        'subscribed': dschema.prop(default=False, type=bool)\n    }\n\n    validator = dschema.Validator(schema)\n\n    # you can use this to add types that are recognized by name.\n    # which is useful if you want your schema to be entirely textual\n\n    validator.add_type('ssn_type', ssn_type)\n\n    # you will need to define default types on your own\n    # if you want to reference them by name\n\n    # validator.add_type('int', int)\n\n\n    data = {\n        'person': {\n            'first_name': \"John\",\n            'last_name': \"Smith\",\n            'phone': '+1 234 5678 9000',\n            'ssn': '123-45-6789'\n        },\n\n        'other_info': {\n            'website': 'www.johnsmith.com',\n        }\n    }\n\n    # If namespace is left False, a plain dictionary is returned\n\n    result = validator.validate(data, namespace=True)\n\n    print(result)\n\n    # Prints: (un-indented)\n\n    # Namespace(\n    #     person=Namespace(\n    #         first_name='John',\n    #         last_name='Smith',\n    #         phone=PhoneNumber(...),\n    #         ssn='123-45-6789'),\n    #     other_info={'website': 'www.johnsmith.com'},\n    #     subscribed=False\n    # )\n\n\n    # Each Namespace is just a dynamic object\n\n    print(result.person.first_name)  # -> John\n    print(result.person.last_name)  # -> Smith\n\n    print(result.person.phone)\n    # - > Country Code: 1 National Number: 23456789000\n\n    print(result.person.ssn)  # -> 123-45-6789\n\n    print(result.other_info)  # -> {'website': 'www.johnsmith.com'}\n\n    print(result.subscribed)  # -> False (default)", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Teriks/dschema", "keywords": "", "license": "BSD 3-Clause", "maintainer": "", "maintainer_email": "", "name": "dschema", "package_url": "https://pypi.org/project/dschema/", "platform": "", "project_url": "https://pypi.org/project/dschema/", "project_urls": {"Homepage": "https://github.com/Teriks/dschema"}, "release_url": "https://pypi.org/project/dschema/0.3.1.3a1/", "requires_dist": null, "requires_python": ">=3.4", "summary": "Python dictionary validation by schema.", "version": "0.3.1.3a1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"about-dschema\">\n<h2>About dschema</h2>\n<p><a href=\"https://badge.fury.io/py/dschema\" rel=\"nofollow\"><img alt=\"pypi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7cc8428fa611cf86dea0770f2524c96ff8453927/68747470733a2f2f62616467652e667572792e696f2f70792f64736368656d612e737667\"></a> <a href=\"http://dschema.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Master Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/56bbb13ae32ee24b8e7e62a040c456f77615f2af/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f64736368656d612f62616467652f3f76657273696f6e3d6c6174657374\"></a> <a href=\"https://codecov.io/gh/Teriks/dschema\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c5f80bdc4bf687e79a20266e5a4a5b2f2bbf9d31/68747470733a2f2f636f6465636f762e696f2f67682f546572696b732f64736368656d612f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a></p>\n<p>dschema is a small library for validating the content of python dictionary objects against a schema.</p>\n<p>The schema can be defined in code or entirely as text (parsed from json generally)</p>\n<p>dschema was mainly made for validating config files written in JSON.</p>\n</div>\n<div id=\"example\">\n<h2>Example</h2>\n<p>See documentation link for more examples</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">re</span>\n<span class=\"kn\">import</span> <span class=\"nn\">phonenumbers</span>\n<span class=\"kn\">import</span> <span class=\"nn\">dschema</span>\n\n\n<span class=\"c1\"># https://github.com/daviddrysdale/python-phonenumbers</span>\n<span class=\"c1\"># pip install phonenumbers</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">phone_type</span><span class=\"p\">(</span><span class=\"n\">number</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Exceptions are validation errors</span>\n    <span class=\"c1\"># Very similar design to the \"argparse\" module</span>\n    <span class=\"k\">return</span> <span class=\"n\">phonenumbers</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"n\">number</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">ssn_type</span><span class=\"p\">(</span><span class=\"n\">ssn</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"s1\">'^\\d</span><span class=\"si\">{3}</span><span class=\"s1\">-?\\d</span><span class=\"si\">{2}</span><span class=\"s1\">-?\\d</span><span class=\"si\">{4}</span><span class=\"s1\">$'</span><span class=\"p\">,</span> <span class=\"n\">ssn</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">ssn</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s1\">'\"</span><span class=\"si\">{}</span><span class=\"s1\">\" is not a valid SSN.'</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'person'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'first_name'</span><span class=\"p\">:</span> <span class=\"n\">dschema</span><span class=\"o\">.</span><span class=\"n\">prop</span><span class=\"p\">(</span><span class=\"n\">required</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">),</span>\n        <span class=\"s1\">'last_name'</span><span class=\"p\">:</span> <span class=\"n\">dschema</span><span class=\"o\">.</span><span class=\"n\">prop</span><span class=\"p\">(</span><span class=\"n\">required</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">),</span>\n        <span class=\"s1\">'phone'</span><span class=\"p\">:</span> <span class=\"n\">dschema</span><span class=\"o\">.</span><span class=\"n\">prop</span><span class=\"p\">(</span><span class=\"n\">required</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"n\">phone_type</span><span class=\"p\">),</span>\n        <span class=\"s1\">'ssn'</span><span class=\"p\">:</span> <span class=\"n\">dschema</span><span class=\"o\">.</span><span class=\"n\">prop</span><span class=\"p\">(</span><span class=\"n\">required</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s1\">'ssn_type'</span><span class=\"p\">),</span>\n\n        <span class=\"n\">dschema</span><span class=\"o\">.</span><span class=\"n\">Required</span><span class=\"p\">:</span> <span class=\"kc\">True</span>\n        <span class=\"c1\"># \"person\" namespace is required, you must specify</span>\n        <span class=\"c1\"># even if \"person\" itself contains required properties</span>\n    <span class=\"p\">},</span>\n\n    <span class=\"c1\"># Allow a raw dictionary value to pass through</span>\n\n    <span class=\"s1\">'other_info'</span><span class=\"p\">:</span> <span class=\"n\">dschema</span><span class=\"o\">.</span><span class=\"n\">prop</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"nb\">dict</span><span class=\"p\">(),</span> <span class=\"nb\">dict</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">),</span>\n\n    <span class=\"c1\"># default to False if not present</span>\n\n    <span class=\"s1\">'subscribed'</span><span class=\"p\">:</span> <span class=\"n\">dschema</span><span class=\"o\">.</span><span class=\"n\">prop</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"nb\">bool</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">validator</span> <span class=\"o\">=</span> <span class=\"n\">dschema</span><span class=\"o\">.</span><span class=\"n\">Validator</span><span class=\"p\">(</span><span class=\"n\">schema</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># you can use this to add types that are recognized by name.</span>\n<span class=\"c1\"># which is useful if you want your schema to be entirely textual</span>\n\n<span class=\"n\">validator</span><span class=\"o\">.</span><span class=\"n\">add_type</span><span class=\"p\">(</span><span class=\"s1\">'ssn_type'</span><span class=\"p\">,</span> <span class=\"n\">ssn_type</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># you will need to define default types on your own</span>\n<span class=\"c1\"># if you want to reference them by name</span>\n\n<span class=\"c1\"># validator.add_type('int', int)</span>\n\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'person'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'first_name'</span><span class=\"p\">:</span> <span class=\"s2\">\"John\"</span><span class=\"p\">,</span>\n        <span class=\"s1\">'last_name'</span><span class=\"p\">:</span> <span class=\"s2\">\"Smith\"</span><span class=\"p\">,</span>\n        <span class=\"s1\">'phone'</span><span class=\"p\">:</span> <span class=\"s1\">'+1 234 5678 9000'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'ssn'</span><span class=\"p\">:</span> <span class=\"s1\">'123-45-6789'</span>\n    <span class=\"p\">},</span>\n\n    <span class=\"s1\">'other_info'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'website'</span><span class=\"p\">:</span> <span class=\"s1\">'www.johnsmith.com'</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># If namespace is left False, a plain dictionary is returned</span>\n\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">validator</span><span class=\"o\">.</span><span class=\"n\">validate</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">namespace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Prints: (un-indented)</span>\n\n<span class=\"c1\"># Namespace(</span>\n<span class=\"c1\">#     person=Namespace(</span>\n<span class=\"c1\">#         first_name='John',</span>\n<span class=\"c1\">#         last_name='Smith',</span>\n<span class=\"c1\">#         phone=PhoneNumber(...),</span>\n<span class=\"c1\">#         ssn='123-45-6789'),</span>\n<span class=\"c1\">#     other_info={'website': 'www.johnsmith.com'},</span>\n<span class=\"c1\">#     subscribed=False</span>\n<span class=\"c1\"># )</span>\n\n\n<span class=\"c1\"># Each Namespace is just a dynamic object</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">person</span><span class=\"o\">.</span><span class=\"n\">first_name</span><span class=\"p\">)</span>  <span class=\"c1\"># -&gt; John</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">person</span><span class=\"o\">.</span><span class=\"n\">last_name</span><span class=\"p\">)</span>  <span class=\"c1\"># -&gt; Smith</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">person</span><span class=\"o\">.</span><span class=\"n\">phone</span><span class=\"p\">)</span>\n<span class=\"c1\"># - &gt; Country Code: 1 National Number: 23456789000</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">person</span><span class=\"o\">.</span><span class=\"n\">ssn</span><span class=\"p\">)</span>  <span class=\"c1\"># -&gt; 123-45-6789</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">other_info</span><span class=\"p\">)</span>  <span class=\"c1\"># -&gt; {'website': 'www.johnsmith.com'}</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">subscribed</span><span class=\"p\">)</span>  <span class=\"c1\"># -&gt; False (default)</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 5719685, "releases": {"0.3.1.3a1": [{"comment_text": "", "digests": {"md5": "ba43e4a972525e298445080e9dddc2db", "sha256": "68088c2f342d192c30c737b80c5e2fde9a54f73f79dc63513ac4da5bef346ebc"}, "downloads": -1, "filename": "dschema-0.3.1.3a1.tar.gz", "has_sig": false, "md5_digest": "ba43e4a972525e298445080e9dddc2db", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 8122, "upload_time": "2019-08-23T09:08:36", "upload_time_iso_8601": "2019-08-23T09:08:36.519094Z", "url": "https://files.pythonhosted.org/packages/64/94/1d0d8c671a73d42e355365538130da27260539a22bb1b7c6aa988ecff190/dschema-0.3.1.3a1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ba43e4a972525e298445080e9dddc2db", "sha256": "68088c2f342d192c30c737b80c5e2fde9a54f73f79dc63513ac4da5bef346ebc"}, "downloads": -1, "filename": "dschema-0.3.1.3a1.tar.gz", "has_sig": false, "md5_digest": "ba43e4a972525e298445080e9dddc2db", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 8122, "upload_time": "2019-08-23T09:08:36", "upload_time_iso_8601": "2019-08-23T09:08:36.519094Z", "url": "https://files.pythonhosted.org/packages/64/94/1d0d8c671a73d42e355365538130da27260539a22bb1b7c6aa988ecff190/dschema-0.3.1.3a1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:49:25 2020"}