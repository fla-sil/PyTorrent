{"info": {"author": "Pedro Bur\u00f3n", "author_email": "hi@pedroburon.info", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "===============\npython-envtools\n===============\n\n.. image:: https://travis-ci.org/pedroburon/python-envtools.svg?branch=master\n   :target: https://travis-ci.org/pedroburon/python-envtools\n\n.. image:: https://coveralls.io/repos/github/pedroburon/python-envtools/badge.svg?branch=master\n   :target: https://coveralls.io/github/pedroburon/python-envtools?branch=master\n\nUseful environment toolchain for python\n\n********************\noverride_environment\n********************\n\nContext Processor that overrides environment vars.\n\n::\n\n    >>> @override_environment(DEBUG=False, FOO=\"Bar\")\n    >>> def foo():\n    >>>     print(os.getenv(\"FOO\"))\n    >>>     return os.getenv(\"DEBUG\")\n    >>> foo()\n    FOO\n    \"DEBUG\"\n\n\n::\n\n    >>> with override_environment(DEBUG=\"False\", FOO=\"Bar\"):\n    >>>     print(os.getenv(\"FOO\"))\n    >>>     os.getenv(\"DEBUG\")\n    FOO\n    \"DEBUG\"\n\n\n*****************\nconfigure_logging\n*****************\n\nWrap a `configDict` inside configure_logging, then logging level could be controlled by environment variables\n\n::\n\n    LOGGING = configure_logging({\n        \"loggers\": {\n            \"module\": {\n                \"handlers\": [\"console\"],\n                \"level\": \"INFO\",\n            },\n        }\n    })\n\nFor this example, environment variable must be set as `LOGGING_LEVEL_module=DEBUG`.\n\n\n*******\nget_env\n*******\n\nSimilar to `os.getenv()` but evaluates string content (default) into simple python types.\n\n::\n\n    >>> os.environ['FOO'] = \"1\"\n    >>> os.getenv('FOO')\n    \"1\"\n    >>> get_env('FOO')\n    1\n\n    >>> os.environ['FOO'] = \"bar\"\n    >>> get_env('FOO')\n    \"bar\"\n\n    >>> os.environ['FOO'] = \"True\"\n    >>> os.getenv('FOO')\n    \"True\"\n    >>> get_env('FOO')\n    True\n\n    >>> os.environ['FOO'] = \"[1,2,3]\"\n    >>> os.getenv('FOO')\n    \"[1,2,3]\"\n    >>> get_env('FOO')\n    [1, 2, 3]\n\n\nit works for list, tuples, dictionaries, numbers, booleans and strings. And is safe!", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/pedroburon/python-envtools", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "python-envtools", "package_url": "https://pypi.org/project/python-envtools/", "platform": "", "project_url": "https://pypi.org/project/python-envtools/", "project_urls": {"Homepage": "https://github.com/pedroburon/python-envtools"}, "release_url": "https://pypi.org/project/python-envtools/0.0.1rc1/", "requires_dist": null, "requires_python": "", "summary": "Python environment toolchain", "version": "0.0.1rc1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/pedroburon/python-envtools\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/pedroburon/python-envtools.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6eabb85c97cff0b2d9d42231f85de46bb6fd951b/68747470733a2f2f7472617669732d63692e6f72672f706564726f6275726f6e2f707974686f6e2d656e76746f6f6c732e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/pedroburon/python-envtools?branch=master\" rel=\"nofollow\"><img alt=\"https://coveralls.io/repos/github/pedroburon/python-envtools/badge.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/faa3ff22af3fc592ae5920312a93ba296cc85135/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f706564726f6275726f6e2f707974686f6e2d656e76746f6f6c732f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<p>Useful environment toolchain for python</p>\n<div id=\"override-environment\">\n<h2>override_environment</h2>\n<p>Context Processor that overrides environment vars.</p>\n<pre>&gt;&gt;&gt; @override_environment(DEBUG=False, FOO=\"Bar\")\n&gt;&gt;&gt; def foo():\n&gt;&gt;&gt;     print(os.getenv(\"FOO\"))\n&gt;&gt;&gt;     return os.getenv(\"DEBUG\")\n&gt;&gt;&gt; foo()\nFOO\n\"DEBUG\"\n</pre>\n<pre>&gt;&gt;&gt; with override_environment(DEBUG=\"False\", FOO=\"Bar\"):\n&gt;&gt;&gt;     print(os.getenv(\"FOO\"))\n&gt;&gt;&gt;     os.getenv(\"DEBUG\")\nFOO\n\"DEBUG\"\n</pre>\n</div>\n<div id=\"configure-logging\">\n<h2>configure_logging</h2>\n<p>Wrap a <cite>configDict</cite> inside configure_logging, then logging level could be controlled by environment variables</p>\n<pre>LOGGING = configure_logging({\n    \"loggers\": {\n        \"module\": {\n            \"handlers\": [\"console\"],\n            \"level\": \"INFO\",\n        },\n    }\n})\n</pre>\n<p>For this example, environment variable must be set as <cite>LOGGING_LEVEL_module=DEBUG</cite>.</p>\n</div>\n<div id=\"get-env\">\n<h2>get_env</h2>\n<p>Similar to <cite>os.getenv()</cite> but evaluates string content (default) into simple python types.</p>\n<pre>&gt;&gt;&gt; os.environ['FOO'] = \"1\"\n&gt;&gt;&gt; os.getenv('FOO')\n\"1\"\n&gt;&gt;&gt; get_env('FOO')\n1\n\n&gt;&gt;&gt; os.environ['FOO'] = \"bar\"\n&gt;&gt;&gt; get_env('FOO')\n\"bar\"\n\n&gt;&gt;&gt; os.environ['FOO'] = \"True\"\n&gt;&gt;&gt; os.getenv('FOO')\n\"True\"\n&gt;&gt;&gt; get_env('FOO')\nTrue\n\n&gt;&gt;&gt; os.environ['FOO'] = \"[1,2,3]\"\n&gt;&gt;&gt; os.getenv('FOO')\n\"[1,2,3]\"\n&gt;&gt;&gt; get_env('FOO')\n[1, 2, 3]\n</pre>\n<p>it works for list, tuples, dictionaries, numbers, booleans and strings. And is safe!</p>\n</div>\n\n          </div>"}, "last_serial": 3398242, "releases": {"0.0.1.dev1": [{"comment_text": "", "digests": {"md5": "eccba903774ac1e124a558b9322a983a", "sha256": "e6f1dc922d4b489ba74c0d10353df632c18fdec9673f1b1facebc668889afe48"}, "downloads": -1, "filename": "python_envtools-0.0.1.dev1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "eccba903774ac1e124a558b9322a983a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 7990, "upload_time": "2017-12-02T04:01:08", "upload_time_iso_8601": "2017-12-02T04:01:08.420613Z", "url": "https://files.pythonhosted.org/packages/11/b9/a1c454b9b67b2513385d663ca47392d7a55f7db0ed50ff637f0ed9f1b4d5/python_envtools-0.0.1.dev1-py2.py3-none-any.whl", "yanked": false}], "0.0.1rc1": [{"comment_text": "", "digests": {"md5": "2e97140789bdcfd64f12777e1d773079", "sha256": "542043415dece01bace1d626bae7e512b227548454ffb2e794976d835814cab5"}, "downloads": -1, "filename": "python-envtools-0.0.1rc1.tar.gz", "has_sig": false, "md5_digest": "2e97140789bdcfd64f12777e1d773079", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5481, "upload_time": "2017-12-07T17:13:06", "upload_time_iso_8601": "2017-12-07T17:13:06.413565Z", "url": "https://files.pythonhosted.org/packages/65/0a/ab7a5a44dca60669859f74cf5c68ccb8bbd2d3b5ed90d738f825046d881e/python-envtools-0.0.1rc1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2e97140789bdcfd64f12777e1d773079", "sha256": "542043415dece01bace1d626bae7e512b227548454ffb2e794976d835814cab5"}, "downloads": -1, "filename": "python-envtools-0.0.1rc1.tar.gz", "has_sig": false, "md5_digest": "2e97140789bdcfd64f12777e1d773079", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5481, "upload_time": "2017-12-07T17:13:06", "upload_time_iso_8601": "2017-12-07T17:13:06.413565Z", "url": "https://files.pythonhosted.org/packages/65/0a/ab7a5a44dca60669859f74cf5c68ccb8bbd2d3b5ed90d738f825046d881e/python-envtools-0.0.1rc1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:17:49 2020"}