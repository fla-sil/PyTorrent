{"info": {"author": "Piotr Roszatycki", "author_email": "piotr.roszatycki@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: Artistic License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5"], "description": ".. image:: https://img.shields.io/pypi/v/Pyjo-Reactor-Asyncio.png\r\n   :target: https://pypi.python.org/pypi/Pyjo-Reactor-Asyncio\r\n.. image:: https://travis-ci.org/dex4er/Pyjo-Reactor-Asyncio.png?branch=master\r\n   :target: https://travis-ci.org/dex4er/Pyjo-Reactor-Asyncio\r\n.. image:: https://readthedocs.org/projects/pyjo-reactor-asyncio/badge/?version=latest\r\n   :target: http://pyjo-reactor-asyncio.readthedocs.org/en/latest/\r\n\r\nPyjo-Reactor-Asyncio\r\n====================\r\n\r\nLow level event reactor with asyncio support for Pyjoyment.\r\n\r\n\r\nPyjoyment\r\n=========\r\n\r\nAn asynchronous, event driver web framework for the Python programming language.\r\n\r\nPyjoyment provides own reactor which handles I/O and timer events in its own\r\nmain event loop but it supports other loops, ie. *libev* or *asyncio*.\r\n\r\nSee http://www.pyjoyment.net/\r\n\r\n\r\nasyncio\r\n=======\r\n\r\nThis module provides infrastructure for writing single-threaded concurrent code\r\nusing coroutines, multiplexing I/O access over sockets and other resources,\r\nrunning network clients and servers, and other related primitives.\r\n\r\nThe asyncio module was designed in PEP3156_. For a motivational primer on\r\ntransports and protocols, see PEP3153_.\r\n\r\nSee http://asyncio.org/\r\n\r\n.. _PEP3153: https://www.python.org/dev/peps/pep-3153/\r\n.. _PEP3156: https://www.python.org/dev/peps/pep-3156/\r\n\r\n\r\nTrollius\r\n========\r\n\r\nTrollius is a portage of the asyncio project (PEP3156_) on Python 2.\r\nTrollius works on Python 2.6-3.5.\r\n\r\nSee https://trollius.readthedocs.org/\r\n\r\n\r\nExamples\r\n========\r\n\r\nNon-blocking TCP client/server\r\n------------------------------\r\n\r\n.. code-block:: python\r\n\r\n   import Pyjo.Reactor.Asyncio\r\n   import Pyjo.IOLoop\r\n\r\n\r\n   # Listen on port 3000\r\n   @Pyjo.IOLoop.server(port=3000)\r\n   def server(loop, stream, cid):\r\n\r\n       @stream.on\r\n       def read(stream, chunk):\r\n           # Process input chunk\r\n           print(\"Server: {0}\".format(chunk.decode('utf-8')))\r\n\r\n           # Write response\r\n           stream.write(b\"HTTP/1.1 200 OK\\x0d\\x0a\\x0d\\x0a\")\r\n\r\n           # Disconnect client\r\n           stream.close_gracefully()\r\n\r\n\r\n   # Connect to port 3000\r\n   @Pyjo.IOLoop.client(port=3000)\r\n   def client(loop, err, stream):\r\n\r\n       @stream.on\r\n       def read(stream, chunk):\r\n           # Process input\r\n           print(\"Client: {0}\".format(chunk.decode('utf-8')))\r\n\r\n       # Write request\r\n       stream.write(b\"GET / HTTP/1.1\\x0d\\x0a\\x0d\\x0a\")\r\n\r\n\r\n   # Add a timer\r\n   @Pyjo.IOLoop.timer(3)\r\n   def timeouter(loop):\r\n       print(\"Timeout\")\r\n       # Shutdown server\r\n       loop.remove(server)\r\n\r\n\r\n   # Start event loop\r\n   Pyjo.IOLoop.start()", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/dex4er/Pyjo-Reactor-Asyncio/archive/master.zip", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/dex4er/Pyjo-Reactor-Asyncio", "keywords": "async asyncio mojo mojolicious pyjo pyjoyment reactor", "license": "Artistic", "maintainer": "", "maintainer_email": "", "name": "Pyjo-Reactor-Asyncio", "package_url": "https://pypi.org/project/Pyjo-Reactor-Asyncio/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/Pyjo-Reactor-Asyncio/", "project_urls": {"Download": "https://github.com/dex4er/Pyjo-Reactor-Asyncio/archive/master.zip", "Homepage": "http://github.com/dex4er/Pyjo-Reactor-Asyncio"}, "release_url": "https://pypi.org/project/Pyjo-Reactor-Asyncio/0.0.1/", "requires_dist": null, "requires_python": null, "summary": "Low level event reactor for Pyjoyment with asyncio support.", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.python.org/pypi/Pyjo-Reactor-Asyncio\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/Pyjo-Reactor-Asyncio.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6adb70dd66663dd4610d49fc5c5212a5db9239b8/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f50796a6f2d52656163746f722d4173796e63696f2e706e67\"></a>\n<a href=\"https://travis-ci.org/dex4er/Pyjo-Reactor-Asyncio\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/dex4er/Pyjo-Reactor-Asyncio.png?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f2db3f35389d49285d55d15b1692a46774247aae/68747470733a2f2f7472617669732d63692e6f72672f6465783465722f50796a6f2d52656163746f722d4173796e63696f2e706e673f6272616e63683d6d6173746572\"></a>\n<a href=\"http://pyjo-reactor-asyncio.readthedocs.org/en/latest/\" rel=\"nofollow\"><img alt=\"https://readthedocs.org/projects/pyjo-reactor-asyncio/badge/?version=latest\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4e26df8db43229cd12f27ef856d7603e49a3fb63/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f70796a6f2d72656163746f722d6173796e63696f2f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<div id=\"pyjo-reactor-asyncio\">\n<h2>Pyjo-Reactor-Asyncio</h2>\n<p>Low level event reactor with asyncio support for Pyjoyment.</p>\n</div>\n<div id=\"pyjoyment\">\n<h2>Pyjoyment</h2>\n<p>An asynchronous, event driver web framework for the Python programming language.</p>\n<p>Pyjoyment provides own reactor which handles I/O and timer events in its own\nmain event loop but it supports other loops, ie. <em>libev</em> or <em>asyncio</em>.</p>\n<p>See <a href=\"http://www.pyjoyment.net/\" rel=\"nofollow\">http://www.pyjoyment.net/</a></p>\n</div>\n<div id=\"asyncio\">\n<h2>asyncio</h2>\n<p>This module provides infrastructure for writing single-threaded concurrent code\nusing coroutines, multiplexing I/O access over sockets and other resources,\nrunning network clients and servers, and other related primitives.</p>\n<p>The asyncio module was designed in <a href=\"https://www.python.org/dev/peps/pep-3156/\" rel=\"nofollow\">PEP3156</a>. For a motivational primer on\ntransports and protocols, see <a href=\"https://www.python.org/dev/peps/pep-3153/\" rel=\"nofollow\">PEP3153</a>.</p>\n<p>See <a href=\"http://asyncio.org/\" rel=\"nofollow\">http://asyncio.org/</a></p>\n</div>\n<div id=\"trollius\">\n<h2>Trollius</h2>\n<p>Trollius is a portage of the asyncio project (<a href=\"https://www.python.org/dev/peps/pep-3156/\" rel=\"nofollow\">PEP3156</a>) on Python 2.\nTrollius works on Python 2.6-3.5.</p>\n<p>See <a href=\"https://trollius.readthedocs.org/\" rel=\"nofollow\">https://trollius.readthedocs.org/</a></p>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<h2 id=\"non-blocking-tcp-client-server\"><span class=\"section-subtitle\">Non-blocking TCP client/server</span></h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">Pyjo.Reactor.Asyncio</span>\n<span class=\"kn\">import</span> <span class=\"nn\">Pyjo.IOLoop</span>\n\n\n<span class=\"c1\"># Listen on port 3000</span>\n<span class=\"nd\">@Pyjo</span><span class=\"o\">.</span><span class=\"n\">IOLoop</span><span class=\"o\">.</span><span class=\"n\">server</span><span class=\"p\">(</span><span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">3000</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">server</span><span class=\"p\">(</span><span class=\"n\">loop</span><span class=\"p\">,</span> <span class=\"n\">stream</span><span class=\"p\">,</span> <span class=\"n\">cid</span><span class=\"p\">):</span>\n\n    <span class=\"nd\">@stream</span><span class=\"o\">.</span><span class=\"n\">on</span>\n    <span class=\"k\">def</span> <span class=\"nf\">read</span><span class=\"p\">(</span><span class=\"n\">stream</span><span class=\"p\">,</span> <span class=\"n\">chunk</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Process input chunk</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Server: </span><span class=\"si\">{0}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">chunk</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"s1\">'utf-8'</span><span class=\"p\">)))</span>\n\n        <span class=\"c1\"># Write response</span>\n        <span class=\"n\">stream</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s2\">\"HTTP/1.1 200 OK</span><span class=\"se\">\\x0d\\x0a\\x0d\\x0a</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Disconnect client</span>\n        <span class=\"n\">stream</span><span class=\"o\">.</span><span class=\"n\">close_gracefully</span><span class=\"p\">()</span>\n\n\n<span class=\"c1\"># Connect to port 3000</span>\n<span class=\"nd\">@Pyjo</span><span class=\"o\">.</span><span class=\"n\">IOLoop</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"p\">(</span><span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">3000</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">client</span><span class=\"p\">(</span><span class=\"n\">loop</span><span class=\"p\">,</span> <span class=\"n\">err</span><span class=\"p\">,</span> <span class=\"n\">stream</span><span class=\"p\">):</span>\n\n    <span class=\"nd\">@stream</span><span class=\"o\">.</span><span class=\"n\">on</span>\n    <span class=\"k\">def</span> <span class=\"nf\">read</span><span class=\"p\">(</span><span class=\"n\">stream</span><span class=\"p\">,</span> <span class=\"n\">chunk</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Process input</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Client: </span><span class=\"si\">{0}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">chunk</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"s1\">'utf-8'</span><span class=\"p\">)))</span>\n\n    <span class=\"c1\"># Write request</span>\n    <span class=\"n\">stream</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s2\">\"GET / HTTP/1.1</span><span class=\"se\">\\x0d\\x0a\\x0d\\x0a</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># Add a timer</span>\n<span class=\"nd\">@Pyjo</span><span class=\"o\">.</span><span class=\"n\">IOLoop</span><span class=\"o\">.</span><span class=\"n\">timer</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">timeouter</span><span class=\"p\">(</span><span class=\"n\">loop</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Timeout\"</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Shutdown server</span>\n    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"n\">server</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># Start event loop</span>\n<span class=\"n\">Pyjo</span><span class=\"o\">.</span><span class=\"n\">IOLoop</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 2029831, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "b31818d3a5118c480d6389119d850d55", "sha256": "fe0c1b2fb14a518eed73d57e00e1d36ab9682b3c0a058baff41ebf7a7c2437b5"}, "downloads": -1, "filename": "Pyjo_Reactor_Asyncio-0.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b31818d3a5118c480d6389119d850d55", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 7666, "upload_time": "2016-03-27T14:01:24", "upload_time_iso_8601": "2016-03-27T14:01:24.657950Z", "url": "https://files.pythonhosted.org/packages/74/4f/3b32edd7bb940c921ae228fed68c5b6861230865d2ef34192bc0486d04cb/Pyjo_Reactor_Asyncio-0.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "54cc33976d2a2ba47aa34dd8bd7359a6", "sha256": "289da0cceb271f23b27cb2b6cc8f9ce3311acc361e98ba13f240481d825cbac3"}, "downloads": -1, "filename": "Pyjo-Reactor-Asyncio-0.0.1.tar.gz", "has_sig": false, "md5_digest": "54cc33976d2a2ba47aa34dd8bd7359a6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5231, "upload_time": "2016-03-27T14:01:30", "upload_time_iso_8601": "2016-03-27T14:01:30.584897Z", "url": "https://files.pythonhosted.org/packages/e4/be/e70cbb7cf044de743701380abcb2304874d298184e10233ac4f52c8a431e/Pyjo-Reactor-Asyncio-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b31818d3a5118c480d6389119d850d55", "sha256": "fe0c1b2fb14a518eed73d57e00e1d36ab9682b3c0a058baff41ebf7a7c2437b5"}, "downloads": -1, "filename": "Pyjo_Reactor_Asyncio-0.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b31818d3a5118c480d6389119d850d55", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 7666, "upload_time": "2016-03-27T14:01:24", "upload_time_iso_8601": "2016-03-27T14:01:24.657950Z", "url": "https://files.pythonhosted.org/packages/74/4f/3b32edd7bb940c921ae228fed68c5b6861230865d2ef34192bc0486d04cb/Pyjo_Reactor_Asyncio-0.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "54cc33976d2a2ba47aa34dd8bd7359a6", "sha256": "289da0cceb271f23b27cb2b6cc8f9ce3311acc361e98ba13f240481d825cbac3"}, "downloads": -1, "filename": "Pyjo-Reactor-Asyncio-0.0.1.tar.gz", "has_sig": false, "md5_digest": "54cc33976d2a2ba47aa34dd8bd7359a6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5231, "upload_time": "2016-03-27T14:01:30", "upload_time_iso_8601": "2016-03-27T14:01:30.584897Z", "url": "https://files.pythonhosted.org/packages/e4/be/e70cbb7cf044de743701380abcb2304874d298184e10233ac4f52c8a431e/Pyjo-Reactor-Asyncio-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:03:44 2020"}