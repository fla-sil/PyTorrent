{"info": {"author": "Marko Ristin", "author_email": "marko.ristin@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6"], "description": "pyicontract-lint\n================\n.. image:: https://travis-ci.com/Parquery/pyicontract-lint.svg?branch=master\n    :target: https://travis-ci.com/Parquery/pyicontract-lint\n    :alt: Build status\n\n.. image:: https://coveralls.io/repos/github/Parquery/pyicontract-lint/badge.svg?branch=master\n    :target: https://coveralls.io/github/Parquery/pyicontract-lint\n    :alt: Test coverage\n\n.. image:: https://readthedocs.org/projects/pyicontract-lint/badge/?version=latest\n    :target: https://pyicontract-lint.readthedocs.io/en/latest/?badge=latest\n    :alt: Documentation status\n\n.. image:: https://badge.fury.io/py/pyicontract-lint.svg\n    :target: https://badge.fury.io/py/pyicontract-lint\n    :alt: PyPI - version\n\n.. image:: https://img.shields.io/pypi/pyversions/pyicontract-lint.svg\n    :alt: PyPI - Python Version\n\npyicontract-lint lints contracts in Python code defined with\n`icontract library <https://github.com/Parquery/icontract>`_.\n\nThe following checks are performed:\n\n+---------------------------------------------------------------------------------------+----------------------+\n| Description                                                                           | Identifier           |\n+=======================================================================================+======================+\n| A preconditions expects a subset of function's arguments.                             | pre-invalid-arg      |\n+---------------------------------------------------------------------------------------+----------------------+\n| A snapshot expects at most an argument element of the function's arguments.           | snapshot-invalid-arg |\n+---------------------------------------------------------------------------------------+----------------------+\n| If a snapshot is defined on a function, a postcondition must be defined as well.      | snapshot-wo-post     |\n+---------------------------------------------------------------------------------------+----------------------+\n| A ``capture`` function must be defined in the contract.                               | snapshot-wo-capture  |\n+---------------------------------------------------------------------------------------+----------------------+\n| A postcondition expects a subset of function's arguments.                             | post-invalid-arg     |\n+---------------------------------------------------------------------------------------+----------------------+\n| If a function returns None, a postcondition should not expect ``result`` as argument. | post-result-none     |\n+---------------------------------------------------------------------------------------+----------------------+\n| If a postcondition expects ``result`` argument, the function should not expect it.    | post-result-conflict |\n+---------------------------------------------------------------------------------------+----------------------+\n| If a postcondition expects ``OLD`` argument, the function should not expect it.       | post-old-conflict    |\n+---------------------------------------------------------------------------------------+----------------------+\n| An invariant should only expect ``self`` argument.                                    | inv-invalid-arg      |\n+---------------------------------------------------------------------------------------+----------------------+\n| A ``condition`` must be defined in the contract.                                      | no-condition         |\n+---------------------------------------------------------------------------------------+----------------------+\n| File must be valid Python code.                                                       | invalid-syntax       |\n+---------------------------------------------------------------------------------------+----------------------+\n\nUsage\n=====\nPyicontract-lint parses the code and tries to infer the imported modules and functions using\n`astroid library <https://github.com/PyCQA/astroid>`_. Hence you need to make sure that imported modules are on your\n``PYTHONPATH`` before you invoke pyicontract-lint.\n\nOnce you set up the environment, invoke pyicontract-lint with a list of positional arguments as paths:\n\n.. code-block:: bash\n\n    pyicontract-lint \\\n        /path/to/some/directory/some-file.py \\\n        /path/to/some/directory/another-file.py\n\nYou can also invoke it on directories. Pyicontract-lint will recursively search for ``*.py`` files (including the\nsubdirectories) and verify the files:\n\n.. code-block:: bash\n\n    pyicontract-lint \\\n        /path/to/some/directory\n\nBy default, pyicontract-lint outputs the errors in a verbose, human-readable format. If you prefer JSON, supply it\n``--format`` argument:\n\n.. code-block:: bash\n\n    pyicontract-lint \\\n        --format json \\\n        /path/to/some/directory\n\nIf one or more checks fail, the return code will be non-zero. You can specify ``--dont_panic`` argument if you want\nto have a zero return code even though one or more checks failed:\n\n.. code-block:: bash\n\n    pyicontract-lint \\\n        --dont_panic \\\n        /path/to/some/directory\n\nTo disable any pyicontract-lint checks on a file, add ``# pyicontract-lint: disabled`` on a separate line to the file.\nThis is useful when you recursively lint files in a directory and want to exclude certain files.\n\nModule ``icontract_lint``\n-------------------------\nThe API is provided in the ``icontract_lint`` module if you want to use pycontract-lint programmatically.\n\nThe main points of entry in ``icontract_line`` module are:\n\n* ``check_file(...)``: lint a single file,\n* ``check_recursively(...)``: lint a directory and\n* ``check_paths(...)``: lint files and directories.\n\nThe output is produced by functions ``output_verbose(...)`` and ``output_json(...)``.\n\nHere is an example code that lints a list of given paths and produces a verbose output:\n\n.. code-block:: python\n\n    import pathlib\n    import sys\n\n    import icontract_lint\n\n    errors = icontract_lint.check_paths(paths=[\n        pathlib.Path('/some/directory/file.py'),\n        pathlib.Path('/yet/yet/another/directory'),\n        pathlib.Path('/another/directory/another_file.py'),\n        pathlib.Path('/yet/another/directory'),\n    ])\n\n    output_verbose(errors=errors, stream=sys.stdout)\n\nThe full documentation of the module is available on\n`readthedocs <https://pyicontract-lint.readthedocs.io/en/latest/>`_.\n\nInstallation\n============\n\n* Install pyicontract-lint with pip:\n\n.. code-block:: bash\n\n    pip3 install pyicontract-lint\n\nDevelopment\n===========\n\n* Check out the repository.\n\n* In the repository root, create the virtual environment:\n\n.. code-block:: bash\n\n    python3 -m venv venv3\n\n* Activate the virtual environment:\n\n.. code-block:: bash\n\n    source venv3/bin/activate\n\n* Install the development dependencies:\n\n.. code-block:: bash\n\n    pip3 install -e .[dev]\n\n* We use tox for testing and packaging the distribution. Run:\n\n.. code-block:: bash\n\n    tox\n\n* We also provide a set of pre-commit checks that lint and check code for formatting. Run them locally from an activated\n  virtual environment with development dependencies:\n\n.. code-block:: bash\n\n    ./precommit.py\n\n* The pre-commit script can also automatically format the code:\n\n.. code-block:: bash\n\n    ./precommit.py  --overwrite\n\nVersioning\n==========\nWe follow `Semantic Versioning <http://semver.org/spec/v1.0.0.html>`_. The version X.Y.Z indicates:\n\n* X is the major version (backward-incompatible),\n* Y is the minor version (backward-compatible), and\n* Z is the patch version (backward-compatible bug fix).", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Parquery/pyicontract-lint", "keywords": "design-by-contract precondition postcondition validation lint", "license": "License :: OSI Approved :: MIT License", "maintainer": "", "maintainer_email": "", "name": "pyicontract-lint", "package_url": "https://pypi.org/project/pyicontract-lint/", "platform": "", "project_url": "https://pypi.org/project/pyicontract-lint/", "project_urls": {"Homepage": "https://github.com/Parquery/pyicontract-lint"}, "release_url": "https://pypi.org/project/pyicontract-lint/2.0.0/", "requires_dist": null, "requires_python": "", "summary": "Lint contracts defined with icontract library.", "version": "2.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"pyicontract-lint\">\n<h2>pyicontract-lint</h2>\n<a href=\"https://travis-ci.com/Parquery/pyicontract-lint\" rel=\"nofollow\"><img alt=\"Build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cc91938766dcb970a3dfe823326abc33eef429ea/68747470733a2f2f7472617669732d63692e636f6d2f50617271756572792f707969636f6e74726163742d6c696e742e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/Parquery/pyicontract-lint\" rel=\"nofollow\"><img alt=\"Test coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a2b6434e48827e144763f1490208475b32645cdd/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f50617271756572792f707969636f6e74726163742d6c696e742f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pyicontract-lint.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0ed79eb280ba98bcb90325dfd4ccb4bda075a45a/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f707969636f6e74726163742d6c696e742f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://badge.fury.io/py/pyicontract-lint\" rel=\"nofollow\"><img alt=\"PyPI - version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7d3d06603c7d30b23ff550252b50c3bf3f725b7e/68747470733a2f2f62616467652e667572792e696f2f70792f707969636f6e74726163742d6c696e742e737667\"></a>\n<img alt=\"PyPI - Python Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1fa315665ef2baacb126dcf487b6b0d759f78c13/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f707969636f6e74726163742d6c696e742e737667\">\n<p>pyicontract-lint lints contracts in Python code defined with\n<a href=\"https://github.com/Parquery/icontract\" rel=\"nofollow\">icontract library</a>.</p>\n<p>The following checks are performed:</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Description</th>\n<th>Identifier</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>A preconditions expects a subset of function\u2019s arguments.</td>\n<td>pre-invalid-arg</td>\n</tr>\n<tr><td>A snapshot expects at most an argument element of the function\u2019s arguments.</td>\n<td>snapshot-invalid-arg</td>\n</tr>\n<tr><td>If a snapshot is defined on a function, a postcondition must be defined as well.</td>\n<td>snapshot-wo-post</td>\n</tr>\n<tr><td>A <tt>capture</tt> function must be defined in the contract.</td>\n<td>snapshot-wo-capture</td>\n</tr>\n<tr><td>A postcondition expects a subset of function\u2019s arguments.</td>\n<td>post-invalid-arg</td>\n</tr>\n<tr><td>If a function returns None, a postcondition should not expect <tt>result</tt> as argument.</td>\n<td>post-result-none</td>\n</tr>\n<tr><td>If a postcondition expects <tt>result</tt> argument, the function should not expect it.</td>\n<td>post-result-conflict</td>\n</tr>\n<tr><td>If a postcondition expects <tt>OLD</tt> argument, the function should not expect it.</td>\n<td>post-old-conflict</td>\n</tr>\n<tr><td>An invariant should only expect <tt>self</tt> argument.</td>\n<td>inv-invalid-arg</td>\n</tr>\n<tr><td>A <tt>condition</tt> must be defined in the contract.</td>\n<td>no-condition</td>\n</tr>\n<tr><td>File must be valid Python code.</td>\n<td>invalid-syntax</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Pyicontract-lint parses the code and tries to infer the imported modules and functions using\n<a href=\"https://github.com/PyCQA/astroid\" rel=\"nofollow\">astroid library</a>. Hence you need to make sure that imported modules are on your\n<tt>PYTHONPATH</tt> before you invoke pyicontract-lint.</p>\n<p>Once you set up the environment, invoke pyicontract-lint with a list of positional arguments as paths:</p>\n<pre>pyicontract-lint <span class=\"se\">\\\n</span>    /path/to/some/directory/some-file.py <span class=\"se\">\\\n</span>    /path/to/some/directory/another-file.py\n</pre>\n<p>You can also invoke it on directories. Pyicontract-lint will recursively search for <tt>*.py</tt> files (including the\nsubdirectories) and verify the files:</p>\n<pre>pyicontract-lint <span class=\"se\">\\\n</span>    /path/to/some/directory\n</pre>\n<p>By default, pyicontract-lint outputs the errors in a verbose, human-readable format. If you prefer JSON, supply it\n<tt><span class=\"pre\">--format</span></tt> argument:</p>\n<pre>pyicontract-lint <span class=\"se\">\\\n</span>    --format json <span class=\"se\">\\\n</span>    /path/to/some/directory\n</pre>\n<p>If one or more checks fail, the return code will be non-zero. You can specify <tt><span class=\"pre\">--dont_panic</span></tt> argument if you want\nto have a zero return code even though one or more checks failed:</p>\n<pre>pyicontract-lint <span class=\"se\">\\\n</span>    --dont_panic <span class=\"se\">\\\n</span>    /path/to/some/directory\n</pre>\n<p>To disable any pyicontract-lint checks on a file, add <tt># <span class=\"pre\">pyicontract-lint:</span> disabled</tt> on a separate line to the file.\nThis is useful when you recursively lint files in a directory and want to exclude certain files.</p>\n<div id=\"module-icontract-lint\">\n<h3>Module <tt>icontract_lint</tt></h3>\n<p>The API is provided in the <tt>icontract_lint</tt> module if you want to use pycontract-lint programmatically.</p>\n<p>The main points of entry in <tt>icontract_line</tt> module are:</p>\n<ul>\n<li><tt><span class=\"pre\">check_file(...)</span></tt>: lint a single file,</li>\n<li><tt><span class=\"pre\">check_recursively(...)</span></tt>: lint a directory and</li>\n<li><tt><span class=\"pre\">check_paths(...)</span></tt>: lint files and directories.</li>\n</ul>\n<p>The output is produced by functions <tt><span class=\"pre\">output_verbose(...)</span></tt> and <tt><span class=\"pre\">output_json(...)</span></tt>.</p>\n<p>Here is an example code that lints a list of given paths and produces a verbose output:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pathlib</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">icontract_lint</span>\n\n<span class=\"n\">errors</span> <span class=\"o\">=</span> <span class=\"n\">icontract_lint</span><span class=\"o\">.</span><span class=\"n\">check_paths</span><span class=\"p\">(</span><span class=\"n\">paths</span><span class=\"o\">=</span><span class=\"p\">[</span>\n    <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"s1\">'/some/directory/file.py'</span><span class=\"p\">),</span>\n    <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"s1\">'/yet/yet/another/directory'</span><span class=\"p\">),</span>\n    <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"s1\">'/another/directory/another_file.py'</span><span class=\"p\">),</span>\n    <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"s1\">'/yet/another/directory'</span><span class=\"p\">),</span>\n<span class=\"p\">])</span>\n\n<span class=\"n\">output_verbose</span><span class=\"p\">(</span><span class=\"n\">errors</span><span class=\"o\">=</span><span class=\"n\">errors</span><span class=\"p\">,</span> <span class=\"n\">stream</span><span class=\"o\">=</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"p\">)</span>\n</pre>\n<p>The full documentation of the module is available on\n<a href=\"https://pyicontract-lint.readthedocs.io/en/latest/\" rel=\"nofollow\">readthedocs</a>.</p>\n</div>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<ul>\n<li>Install pyicontract-lint with pip:</li>\n</ul>\n<pre>pip3 install pyicontract-lint\n</pre>\n</div>\n<div id=\"development\">\n<h2>Development</h2>\n<ul>\n<li>Check out the repository.</li>\n<li>In the repository root, create the virtual environment:</li>\n</ul>\n<pre>python3 -m venv venv3\n</pre>\n<ul>\n<li>Activate the virtual environment:</li>\n</ul>\n<pre><span class=\"nb\">source</span> venv3/bin/activate\n</pre>\n<ul>\n<li>Install the development dependencies:</li>\n</ul>\n<pre>pip3 install -e .<span class=\"o\">[</span>dev<span class=\"o\">]</span>\n</pre>\n<ul>\n<li>We use tox for testing and packaging the distribution. Run:</li>\n</ul>\n<pre>tox\n</pre>\n<ul>\n<li>We also provide a set of pre-commit checks that lint and check code for formatting. Run them locally from an activated\nvirtual environment with development dependencies:</li>\n</ul>\n<pre>./precommit.py\n</pre>\n<ul>\n<li>The pre-commit script can also automatically format the code:</li>\n</ul>\n<pre>./precommit.py  --overwrite\n</pre>\n</div>\n<div id=\"versioning\">\n<h2>Versioning</h2>\n<p>We follow <a href=\"http://semver.org/spec/v1.0.0.html\" rel=\"nofollow\">Semantic Versioning</a>. The version X.Y.Z indicates:</p>\n<ul>\n<li>X is the major version (backward-incompatible),</li>\n<li>Y is the minor version (backward-compatible), and</li>\n<li>Z is the patch version (backward-compatible bug fix).</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 6548208, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "4f8d8e841a773dc790b7f5deca32d8d2", "sha256": "7f9a705a3cf12be05c9e4048ca8a09f395901e5fc7b75181717e398bd9e8ead7"}, "downloads": -1, "filename": "pyicontract-lint-1.0.0.tar.gz", "has_sig": false, "md5_digest": "4f8d8e841a773dc790b7f5deca32d8d2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7734, "upload_time": "2018-09-20T20:37:29", "upload_time_iso_8601": "2018-09-20T20:37:29.410365Z", "url": "https://files.pythonhosted.org/packages/ca/48/10fb96b02aba688fa5b23184be100ae8e640fdf2b2a12a4b989ffca60f15/pyicontract-lint-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "7ddf0fa31c4d6bee07f7c736b93fac7f", "sha256": "16a5ab6524cb45bb23c734858ecc39c775b897876f64a446620a4c4fac978945"}, "downloads": -1, "filename": "pyicontract-lint-1.0.1.tar.gz", "has_sig": false, "md5_digest": "7ddf0fa31c4d6bee07f7c736b93fac7f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8011, "upload_time": "2018-09-21T06:55:09", "upload_time_iso_8601": "2018-09-21T06:55:09.136112Z", "url": "https://files.pythonhosted.org/packages/da/e6/4f36393ed2b8fedd24e271662074690b92603f4c91f0f9fe682cc56161d0/pyicontract-lint-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "ee80bed31e29b03ad343c6de43bafd8d", "sha256": "b3d36024ddca4257df269bc4abc2ae6d45c1a171b6bda9ec4efc34181d33f952"}, "downloads": -1, "filename": "pyicontract-lint-1.0.2.tar.gz", "has_sig": false, "md5_digest": "ee80bed31e29b03ad343c6de43bafd8d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9659, "upload_time": "2018-09-21T07:13:58", "upload_time_iso_8601": "2018-09-21T07:13:58.835479Z", "url": "https://files.pythonhosted.org/packages/53/e0/22026013cb136c0a8cb0f004293b9f3605e92e156ec89313eeb8354cd119/pyicontract-lint-1.0.2.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "6a2e26b8dfd369262017c16475b166f1", "sha256": "8bcd47398c35b0a35a46a2fa21889c60726017ac30951224189a3b4e86c781e7"}, "downloads": -1, "filename": "pyicontract-lint-1.1.0.tar.gz", "has_sig": false, "md5_digest": "6a2e26b8dfd369262017c16475b166f1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10005, "upload_time": "2018-09-21T07:43:31", "upload_time_iso_8601": "2018-09-21T07:43:31.088237Z", "url": "https://files.pythonhosted.org/packages/e5/fd/4ed0112ab79411138443fe6bdcd521bce888c39e2ba1bba0c8470fd1ce5a/pyicontract-lint-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "f601d5212db9c0e48dbfed57789b9578", "sha256": "4782801f5a12696f7ecfbb14c8cff78438eaa3d9007f73b7a2caeb8b93d9a97a"}, "downloads": -1, "filename": "pyicontract-lint-1.1.1.tar.gz", "has_sig": false, "md5_digest": "f601d5212db9c0e48dbfed57789b9578", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10028, "upload_time": "2018-09-22T07:31:06", "upload_time_iso_8601": "2018-09-22T07:31:06.501772Z", "url": "https://files.pythonhosted.org/packages/7d/ef/e7798ff102c0257aca745f1556f953a0edeb6ee89cc331a2422664e7aa35/pyicontract-lint-1.1.1.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "003d6c9a81ab3dd1f02a8d66f81e5693", "sha256": "08c61c22be7fc5c7ebd296c125e33e6c92ed5e606824b21d0b38b012f0b5125c"}, "downloads": -1, "filename": "pyicontract-lint-1.2.0.tar.gz", "has_sig": false, "md5_digest": "003d6c9a81ab3dd1f02a8d66f81e5693", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11151, "upload_time": "2018-10-20T07:08:20", "upload_time_iso_8601": "2018-10-20T07:08:20.962246Z", "url": "https://files.pythonhosted.org/packages/34/81/288f5386689cb3417162940f59900d07115eefbd818ecd111152a739def2/pyicontract-lint-1.2.0.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "e78f1aa13503dbcbb2c06b158753caf7", "sha256": "c6d33081dfda7c722e31525ad3ec196afb8a5e0456cb75b1a2d7c195e69450b4"}, "downloads": -1, "filename": "pyicontract-lint-1.2.1.tar.gz", "has_sig": false, "md5_digest": "e78f1aa13503dbcbb2c06b158753caf7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11165, "upload_time": "2018-10-21T05:43:58", "upload_time_iso_8601": "2018-10-21T05:43:58.841729Z", "url": "https://files.pythonhosted.org/packages/3c/39/616465ae167b146eb07907b65db0e64dd72dc52146e6ba52f6d7a04a6bbd/pyicontract-lint-1.2.1.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "c35fe350197e8004745888e67ad7229f", "sha256": "a1e9591ab19deeb48b16b239d9254bfb95a2af6ecad780596131f767c4dd73ee"}, "downloads": -1, "filename": "pyicontract-lint-2.0.0.tar.gz", "has_sig": false, "md5_digest": "c35fe350197e8004745888e67ad7229f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11160, "upload_time": "2018-10-24T05:24:30", "upload_time_iso_8601": "2018-10-24T05:24:30.945996Z", "url": "https://files.pythonhosted.org/packages/98/27/3e3a2482cc244804e254e2da0afe396cbd02d965bab93c271d4569f1d818/pyicontract-lint-2.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c35fe350197e8004745888e67ad7229f", "sha256": "a1e9591ab19deeb48b16b239d9254bfb95a2af6ecad780596131f767c4dd73ee"}, "downloads": -1, "filename": "pyicontract-lint-2.0.0.tar.gz", "has_sig": false, "md5_digest": "c35fe350197e8004745888e67ad7229f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11160, "upload_time": "2018-10-24T05:24:30", "upload_time_iso_8601": "2018-10-24T05:24:30.945996Z", "url": "https://files.pythonhosted.org/packages/98/27/3e3a2482cc244804e254e2da0afe396cbd02d965bab93c271d4569f1d818/pyicontract-lint-2.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:04:10 2020"}