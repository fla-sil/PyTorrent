{"info": {"author": "Patrik Hudak", "author_email": "pato.hudak@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy"], "description": "\n# :cyclone: dnsgen (DNS generator)\n\nThis tool generates a combination of domain names from the provided input. Combinations are created based on wordlist. Custom words are extracted per execution. Refer to [Techniques](#techniques) section to learn more.\n\n`dnsgen` is very similar to [altdns](https://github.com/infosec-au/altdns). It does not contain DNS resolver. You should use [massdns](https://github.com/blechschmidt/massdns) for DNS resolution.\n\n![dnsgen](https://0xpatrik.com/content/images/2019/09/dnsgen-1.png)\n\n## Installation\n\n```pip3 install dnsgen```\n\n..or from GitHub directly:\n\n```\ngit clone https://github.com/ProjectAnte/dnsgen\ncd dnsgen\npip3 install -r requirements.txt\npython3 setup.py install\n```\n\n## Usage\n\n```$ dnsgen domains.txt``` (`domains.txt` contains a list of active domain names)\n\n* `-l` / `--wordlen`: minimum size of custom words to be extracted\n* `-w` / `--wordlist`: path to custom wordlist\n* `-f` / `--fast`: Generate lower amount of domains with most probable words only\n* `filename`: required parameter for an input list of domains. The input file should contain domain names separated by newline character (`\\n`). You can also use STDIN as an input method, providing `-` to this argument.\n\n**Combination with massdns:**\n\n`$ cat domains.txt | dnsgen - | massdns -r /path/to/resolvers.txt -t A -o J --flush 2>/dev/null`\n\n## Techniques\n\n*(For demo purposes, let's say that wordlist contains just one word: `stage`)*\n\n* **Insert word on every index** \u2014 Creates new subdomain levels by inserting the words between existing levels. `foo.example.com` -> `stage.foo.example.com`, `foo.stage.example.com`\n\n* **Increase/Decrease num found** \u2014 *(In development)* If number is found in an existing subdomain, increase/decrease this number without any other alteration. `foo01.example.com` -> `foo02.example.com`, `foo03.example.com`, `...`\n\n* **Prepend word on every index** \u2014 On every subdomain level, prepend existing content with `WORD` and `WORD-`. `foo.example.com` -> `stagefoo.example.com`, `stage-foo.example.com`\n\n* **Append word on every index** \u2014 On every subdomain level, append existing content with `WORD` and `WORD-`. `foo.example.com` -> `foostage.example.com`, `foo-stage.example.com`\n\n* **Replace the word with word** \u2014 If word longer than 3 is found in an existing subdomain, replace it with other words from the wordlist. *(If we have more words than one in our wordlist)*. `stage.foo.example.com` -> `otherword.foo.example.com`, `anotherword.foo.example.com`, `...`\n\n* **Extract custom words** \u2014 Extend the wordlist based on target's domain naming conventions. Such words are either whole subdomain levels, or `-` is used for a split on some subdomain level. For instance `mapp1-current.datastream.example.com` has `mapp1`, `current`, `datastream` words. To prevent the overflow, user-defined *word length* is used for word extraction. The default value is set to **6**. This means that only words strictly longer than **5** characters are included (from the previous example, `mapp1` does not satisfy this condition). \n\n## Resources\n\n- [Subdomain Enumeration: 2019 Workflow](https://0xpatrik.com/subdomain-enumeration-2019/)\n- [Subdomain Enumeration: Doing it a Bit Smarter](https://0xpatrik.com/subdomain-enumeration-smarter/)\n\n## TO DO\n\n- Improve README\n- Tests\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/me/myproject", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "dnsgen", "package_url": "https://pypi.org/project/dnsgen/", "platform": "", "project_url": "https://pypi.org/project/dnsgen/", "project_urls": {"Homepage": "https://github.com/me/myproject"}, "release_url": "https://pypi.org/project/dnsgen/1.0.4/", "requires_dist": ["Click", "tldextract"], "requires_python": ">=3.6.0", "summary": "Generates DNS possibilities from existing domain names.", "version": "1.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>:cyclone: dnsgen (DNS generator)</h1>\n<p>This tool generates a combination of domain names from the provided input. Combinations are created based on wordlist. Custom words are extracted per execution. Refer to <a href=\"#techniques\" rel=\"nofollow\">Techniques</a> section to learn more.</p>\n<p><code>dnsgen</code> is very similar to <a href=\"https://github.com/infosec-au/altdns\" rel=\"nofollow\">altdns</a>. It does not contain DNS resolver. You should use <a href=\"https://github.com/blechschmidt/massdns\" rel=\"nofollow\">massdns</a> for DNS resolution.</p>\n<p><img alt=\"dnsgen\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/34f884da26e2b7aa4e3d6c0ee71d09350bf34141/68747470733a2f2f307870617472696b2e636f6d2f636f6e74656e742f696d616765732f323031392f30392f646e7367656e2d312e706e67\"></p>\n<h2>Installation</h2>\n<p><code>pip3 install dnsgen</code></p>\n<p>..or from GitHub directly:</p>\n<pre><code>git clone https://github.com/ProjectAnte/dnsgen\ncd dnsgen\npip3 install -r requirements.txt\npython3 setup.py install\n</code></pre>\n<h2>Usage</h2>\n<p><code>$ dnsgen domains.txt</code> (<code>domains.txt</code> contains a list of active domain names)</p>\n<ul>\n<li><code>-l</code> / <code>--wordlen</code>: minimum size of custom words to be extracted</li>\n<li><code>-w</code> / <code>--wordlist</code>: path to custom wordlist</li>\n<li><code>-f</code> / <code>--fast</code>: Generate lower amount of domains with most probable words only</li>\n<li><code>filename</code>: required parameter for an input list of domains. The input file should contain domain names separated by newline character (<code>\\n</code>). You can also use STDIN as an input method, providing <code>-</code> to this argument.</li>\n</ul>\n<p><strong>Combination with massdns:</strong></p>\n<p><code>$ cat domains.txt | dnsgen - | massdns -r /path/to/resolvers.txt -t A -o J --flush 2&gt;/dev/null</code></p>\n<h2>Techniques</h2>\n<p><em>(For demo purposes, let's say that wordlist contains just one word: <code>stage</code>)</em></p>\n<ul>\n<li>\n<p><strong>Insert word on every index</strong> \u2014 Creates new subdomain levels by inserting the words between existing levels. <code>foo.example.com</code> -&gt; <code>stage.foo.example.com</code>, <code>foo.stage.example.com</code></p>\n</li>\n<li>\n<p><strong>Increase/Decrease num found</strong> \u2014 <em>(In development)</em> If number is found in an existing subdomain, increase/decrease this number without any other alteration. <code>foo01.example.com</code> -&gt; <code>foo02.example.com</code>, <code>foo03.example.com</code>, <code>...</code></p>\n</li>\n<li>\n<p><strong>Prepend word on every index</strong> \u2014 On every subdomain level, prepend existing content with <code>WORD</code> and <code>WORD-</code>. <code>foo.example.com</code> -&gt; <code>stagefoo.example.com</code>, <code>stage-foo.example.com</code></p>\n</li>\n<li>\n<p><strong>Append word on every index</strong> \u2014 On every subdomain level, append existing content with <code>WORD</code> and <code>WORD-</code>. <code>foo.example.com</code> -&gt; <code>foostage.example.com</code>, <code>foo-stage.example.com</code></p>\n</li>\n<li>\n<p><strong>Replace the word with word</strong> \u2014 If word longer than 3 is found in an existing subdomain, replace it with other words from the wordlist. <em>(If we have more words than one in our wordlist)</em>. <code>stage.foo.example.com</code> -&gt; <code>otherword.foo.example.com</code>, <code>anotherword.foo.example.com</code>, <code>...</code></p>\n</li>\n<li>\n<p><strong>Extract custom words</strong> \u2014 Extend the wordlist based on target's domain naming conventions. Such words are either whole subdomain levels, or <code>-</code> is used for a split on some subdomain level. For instance <code>mapp1-current.datastream.example.com</code> has <code>mapp1</code>, <code>current</code>, <code>datastream</code> words. To prevent the overflow, user-defined <em>word length</em> is used for word extraction. The default value is set to <strong>6</strong>. This means that only words strictly longer than <strong>5</strong> characters are included (from the previous example, <code>mapp1</code> does not satisfy this condition).</p>\n</li>\n</ul>\n<h2>Resources</h2>\n<ul>\n<li><a href=\"https://0xpatrik.com/subdomain-enumeration-2019/\" rel=\"nofollow\">Subdomain Enumeration: 2019 Workflow</a></li>\n<li><a href=\"https://0xpatrik.com/subdomain-enumeration-smarter/\" rel=\"nofollow\">Subdomain Enumeration: Doing it a Bit Smarter</a></li>\n</ul>\n<h2>TO DO</h2>\n<ul>\n<li>Improve README</li>\n<li>Tests</li>\n</ul>\n\n          </div>"}, "last_serial": 6751422, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "70e6807b7642553de717dfcfc3293395", "sha256": "7ee2447cfde4dc0811823d336213a0f584e43cda80ed96c79d4ba4fca5c49053"}, "downloads": -1, "filename": "dnsgen-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "70e6807b7642553de717dfcfc3293395", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.0", "size": 6572, "upload_time": "2019-09-29T16:10:30", "upload_time_iso_8601": "2019-09-29T16:10:30.175682Z", "url": "https://files.pythonhosted.org/packages/bd/9a/c21730cb94a29c9cf98ae7cb80ccaca3e10e58bac5c7f3f11428dc2423db/dnsgen-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c1a349afff2b4bf3fa1cde34abe5043b", "sha256": "d90497ba3f13c2f60332e29731b78d9a6c957531ede4e22fda93576a3a10424e"}, "downloads": -1, "filename": "dnsgen-1.0.0.tar.gz", "has_sig": false, "md5_digest": "c1a349afff2b4bf3fa1cde34abe5043b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 6606, "upload_time": "2019-09-29T16:10:32", "upload_time_iso_8601": "2019-09-29T16:10:32.580538Z", "url": "https://files.pythonhosted.org/packages/91/0e/c58b2d3a87700e46cbcaf980cb82e16f72780e1cf3f8f54ae91aac2c86a3/dnsgen-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "e6400f0be9adc3d80b9fa3718b2cde78", "sha256": "924adfa3408862722c29ba853ee9e174cf9ac975645c1990f21ef83ed62a5313"}, "downloads": -1, "filename": "dnsgen-1.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e6400f0be9adc3d80b9fa3718b2cde78", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.0", "size": 6686, "upload_time": "2019-09-30T17:05:23", "upload_time_iso_8601": "2019-09-30T17:05:23.990792Z", "url": "https://files.pythonhosted.org/packages/8b/0c/d2bd60d61561f46030519cf7ada16b9becc34cceb85314b9ca0fd4867980/dnsgen-1.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5c665ac03154a49306ebbd7a4904e790", "sha256": "d74f872fea4be5e56aa490d614372a7676ddf3797fbcc41335d4dfca790d262b"}, "downloads": -1, "filename": "dnsgen-1.0.1.tar.gz", "has_sig": false, "md5_digest": "5c665ac03154a49306ebbd7a4904e790", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 6718, "upload_time": "2019-09-30T17:05:26", "upload_time_iso_8601": "2019-09-30T17:05:26.562149Z", "url": "https://files.pythonhosted.org/packages/e1/27/d131ac4fb53db1d988862728d0a192da7f1df0b4c2bcb892709348be9aed/dnsgen-1.0.1.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "ce4be5388687491e8f7a14f8b203f1c5", "sha256": "1269a7fb5a5195e996142045504b0072bd7d47b952ccfedc8e2baf2a83aed70c"}, "downloads": -1, "filename": "dnsgen-1.0.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ce4be5388687491e8f7a14f8b203f1c5", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.0", "size": 6933, "upload_time": "2020-03-04T22:38:49", "upload_time_iso_8601": "2020-03-04T22:38:49.945368Z", "url": "https://files.pythonhosted.org/packages/09/e2/0022d0e6c3fa892ef378185d01fc1d3482910528664e5214342d26967be7/dnsgen-1.0.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fde21e8ba2b85abee22b1b4b6fa2a7f1", "sha256": "1087e9e5c323918aa3511e592759716116a208012aee024ffdbeac5fce573a0c"}, "downloads": -1, "filename": "dnsgen-1.0.4.tar.gz", "has_sig": false, "md5_digest": "fde21e8ba2b85abee22b1b4b6fa2a7f1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 6945, "upload_time": "2020-03-04T22:38:51", "upload_time_iso_8601": "2020-03-04T22:38:51.296732Z", "url": "https://files.pythonhosted.org/packages/5f/e1/1c7d86f51da5b93f3f99ac99e3ad051ed82234147ddd869f77a3959e6abc/dnsgen-1.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ce4be5388687491e8f7a14f8b203f1c5", "sha256": "1269a7fb5a5195e996142045504b0072bd7d47b952ccfedc8e2baf2a83aed70c"}, "downloads": -1, "filename": "dnsgen-1.0.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ce4be5388687491e8f7a14f8b203f1c5", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.0", "size": 6933, "upload_time": "2020-03-04T22:38:49", "upload_time_iso_8601": "2020-03-04T22:38:49.945368Z", "url": "https://files.pythonhosted.org/packages/09/e2/0022d0e6c3fa892ef378185d01fc1d3482910528664e5214342d26967be7/dnsgen-1.0.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fde21e8ba2b85abee22b1b4b6fa2a7f1", "sha256": "1087e9e5c323918aa3511e592759716116a208012aee024ffdbeac5fce573a0c"}, "downloads": -1, "filename": "dnsgen-1.0.4.tar.gz", "has_sig": false, "md5_digest": "fde21e8ba2b85abee22b1b4b6fa2a7f1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 6945, "upload_time": "2020-03-04T22:38:51", "upload_time_iso_8601": "2020-03-04T22:38:51.296732Z", "url": "https://files.pythonhosted.org/packages/5f/e1/1c7d86f51da5b93f3f99ac99e3ad051ed82234147ddd869f77a3959e6abc/dnsgen-1.0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:06 2020"}