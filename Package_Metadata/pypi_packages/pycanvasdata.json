{"info": {"author": "Kajigga dev", "author_email": "kajigga+dev@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Topic :: Software Development :: Libraries :: Application Frameworks"], "description": "CanvasData Utilities\n=======================\n\n.. image:: https://travis-ci.org/kajigga/py_canvas_data.svg\n\nFull documentation \n\nThis python module is designed to make it easy to access Canvas Data files.\n\nCurrently, this module makes it possible to:\n\n  - Convert downloaded Canvas Data files to CSV files with headers\n  - export SQL table creation statements \n  - list files for a table\n  - download all files or files for a specific table\n  - view the Canvas Data schema (fields, field types, etc)\n  - connect to a database (uses sqlalchemy) to create tables, import data, run SQL queries\n\n\n----\n\nModule Usage\n------------\n\nThis module can be used programatically in other scripts and software. An\nexample of creating a canvas_data object is found below.::\n  \n  from canvas_data_utils.canvas_data_auth import CanvasData\n\n  canvas_data_object = CanvasData(\n      API_KEY=YOUR_API_KEY ,\n      API_SECRET=YOUR_API_SECRET, \n      base_folder = YOUR_BASE_DIR,\n      data_folder = YOUR_DATA_DIR)\n\n  \nOnce you have that object created, you can...\n\ngenerate mysql table creation statements\n\n::\n\n  mysql_table_creation_statement = canvas_data_object.table_creation_statement('mysql')\n\ngenerate sqlite table creation statements\n\n::\n\n  sqlite_table_creation_statement = canvas_data_object.table_creation_statement('sqlite')\n\ngenerate postgres table creation statements\n\n::\n\n  postgres_table_creation_statement = canvas_data_object.table_creation_statement('postgres')\n\ncreate tables in a database given by a connection string\n\n::\n\n  canvas_data_object.create_tables('sqlite:///{}'.format(db_filename))\n\nfetch the current schema (as json)\n\n::\n\n  schema = canvas_data_object.fetch_schema()\n\nget a list of columns in a table\n\n::\n\n  user_dim_columns = canvas_data_object.get_schema_columns( 'user_dim')\n\nconvert an text file download from TSV (Tab Separated Values) to CSV\n\n::\n\n  canvas_data_object.convert_tsv_to_csv(tsv_filepath)\n\nlist all the tables in the schema\n\n::\n\n  table_list = canvas_data_object.table_list()\n\ndownload and convert all files to CSV\n\n::\n\n  canvas_data_object.convert_all_to_csv()\n\nlist all downloadable files for a table\n\n::\n\n  file_list = canvas_data_object.list_all_files('user_dim')\n\n----\n\nConfig File\n------------\nYou need to create a config file somewhere. This config file is a typical .INI\nfile. It should look something like the following example.\n\n::\n\n  [config]\n  API_SECRET = replace_with_api_secret_from_canvas_data\n  API_KEY = replace_with_api_key_from_canvas_data\n\n  base_folder = /path/to/base/folder/for/downloads/\n  data_folder = %(base_folder)s/test2\n\n  connection_string = sqlite:///%(base_folder)s/sample.db\n\n\nNote: The connection_string configuration follows the connection pattern needed\nby SQLAlchemy at http://docs.sqlalchemy.org/en/rel_1_0/core/engines.html.\n\nThis library supports any database type than SQLAlchemy does.\n\n----\n\nCommand-line Tool\n-----------------\n\nThis library includes a command line utility called `canvasdata`.\n\nUsage\n-----\n\n::\n\n  canvasdata [-h] [--config CONFIG] [-t TABLE] [--offline OFFLINE]\n                  {convert_to_csv,import,create_tables,reset,sql_create_statement,list_files,download,sample_queries,schema}\n\n  optional arguments:\n    -h, --help            show this help message and exit\n    --config CONFIG       path to the configuration file\n    -t TABLE              specify a specific table\n    --offline OFFLINE     run in offline mode", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "UNKNOWN", "keywords": "database canvasdata development", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "pycanvasdata", "package_url": "https://pypi.org/project/pycanvasdata/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pycanvasdata/", "project_urls": {"Download": "UNKNOWN", "Homepage": "UNKNOWN"}, "release_url": "https://pypi.org/project/pycanvasdata/0.0.3/", "requires_dist": null, "requires_python": null, "summary": "Python utilities for working with Canvas Data", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <img alt=\"https://travis-ci.org/kajigga/py_canvas_data.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1986559265a2aa7e656a382526491c47fdeb9e4b/68747470733a2f2f7472617669732d63692e6f72672f6b616a696767612f70795f63616e7661735f646174612e737667\">\n<p>Full documentation</p>\n<p>This python module is designed to make it easy to access Canvas Data files.</p>\n<p>Currently, this module makes it possible to:</p>\n<blockquote>\n<ul>\n<li>Convert downloaded Canvas Data files to CSV files with headers</li>\n<li>export SQL table creation statements</li>\n<li>list files for a table</li>\n<li>download all files or files for a specific table</li>\n<li>view the Canvas Data schema (fields, field types, etc)</li>\n<li>connect to a database (uses sqlalchemy) to create tables, import data, run SQL queries</li>\n</ul>\n</blockquote>\n<hr class=\"docutils\">\n<div id=\"module-usage\">\n<h2>Module Usage</h2>\n<p>This module can be used programatically in other scripts and software. An\nexample of creating a canvas_data object is found below.:</p>\n<pre>from canvas_data_utils.canvas_data_auth import CanvasData\n\ncanvas_data_object = CanvasData(\n    API_KEY=YOUR_API_KEY ,\n    API_SECRET=YOUR_API_SECRET,\n    base_folder = YOUR_BASE_DIR,\n    data_folder = YOUR_DATA_DIR)\n</pre>\n<p>Once you have that object created, you can\u2026</p>\n<p>generate mysql table creation statements</p>\n<pre>mysql_table_creation_statement = canvas_data_object.table_creation_statement('mysql')\n</pre>\n<p>generate sqlite table creation statements</p>\n<pre>sqlite_table_creation_statement = canvas_data_object.table_creation_statement('sqlite')\n</pre>\n<p>generate postgres table creation statements</p>\n<pre>postgres_table_creation_statement = canvas_data_object.table_creation_statement('postgres')\n</pre>\n<p>create tables in a database given by a connection string</p>\n<pre>canvas_data_object.create_tables('sqlite:///{}'.format(db_filename))\n</pre>\n<p>fetch the current schema (as json)</p>\n<pre>schema = canvas_data_object.fetch_schema()\n</pre>\n<p>get a list of columns in a table</p>\n<pre>user_dim_columns = canvas_data_object.get_schema_columns( 'user_dim')\n</pre>\n<p>convert an text file download from TSV (Tab Separated Values) to CSV</p>\n<pre>canvas_data_object.convert_tsv_to_csv(tsv_filepath)\n</pre>\n<p>list all the tables in the schema</p>\n<pre>table_list = canvas_data_object.table_list()\n</pre>\n<p>download and convert all files to CSV</p>\n<pre>canvas_data_object.convert_all_to_csv()\n</pre>\n<p>list all downloadable files for a table</p>\n<pre>file_list = canvas_data_object.list_all_files('user_dim')\n</pre>\n</div>\n<hr class=\"docutils\">\n<div id=\"config-file\">\n<h2>Config File</h2>\n<p>You need to create a config file somewhere. This config file is a typical .INI\nfile. It should look something like the following example.</p>\n<pre>[config]\nAPI_SECRET = replace_with_api_secret_from_canvas_data\nAPI_KEY = replace_with_api_key_from_canvas_data\n\nbase_folder = /path/to/base/folder/for/downloads/\ndata_folder = %(base_folder)s/test2\n\nconnection_string = sqlite:///%(base_folder)s/sample.db\n</pre>\n<p>Note: The connection_string configuration follows the connection pattern needed\nby SQLAlchemy at <a href=\"http://docs.sqlalchemy.org/en/rel_1_0/core/engines.html\" rel=\"nofollow\">http://docs.sqlalchemy.org/en/rel_1_0/core/engines.html</a>.</p>\n<p>This library supports any database type than SQLAlchemy does.</p>\n</div>\n<hr class=\"docutils\">\n<div id=\"command-line-tool\">\n<h2>Command-line Tool</h2>\n<p>This library includes a command line utility called <cite>canvasdata</cite>.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<pre>canvasdata [-h] [--config CONFIG] [-t TABLE] [--offline OFFLINE]\n                {convert_to_csv,import,create_tables,reset,sql_create_statement,list_files,download,sample_queries,schema}\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --config CONFIG       path to the configuration file\n  -t TABLE              specify a specific table\n  --offline OFFLINE     run in offline mode\n</pre>\n</div>\n\n          </div>"}, "last_serial": 2069819, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "1236568f39abe00e99a101fb868ed62e", "sha256": "0984cbf2528f4d3441eb798aa0b171a2f66e047df16d3728db45721564ae62c8"}, "downloads": -1, "filename": "pycanvasdata-0.0.1.tar.gz", "has_sig": false, "md5_digest": "1236568f39abe00e99a101fb868ed62e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11889, "upload_time": "2016-04-14T20:32:40", "upload_time_iso_8601": "2016-04-14T20:32:40.255745Z", "url": "https://files.pythonhosted.org/packages/d5/74/ddd6f6d089c968aa168233f366462c67f879b89ffa41b5e1650a02c2e79f/pycanvasdata-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "947212cebfd1e8281c3f093e45b4beef", "sha256": "58ee8d08dc73644b1c25520943d5fe1af332ddfc32948f897d0ee5680e91e156"}, "downloads": -1, "filename": "pycanvasdata-0.0.2.tar.gz", "has_sig": false, "md5_digest": "947212cebfd1e8281c3f093e45b4beef", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12135, "upload_time": "2016-04-18T15:09:28", "upload_time_iso_8601": "2016-04-18T15:09:28.439845Z", "url": "https://files.pythonhosted.org/packages/75/a4/13903ac86abaa1463f749c7fc0c3beec7f40a018fa29940fef92aaa9b976/pycanvasdata-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "aff7e6df602d9d6438f6920324eb31ff", "sha256": "5ee7fae59ba68c66ee9f739a4d3e48ec22f2afe473afea0948990da7fbf3219c"}, "downloads": -1, "filename": "pycanvasdata-0.0.3.tar.gz", "has_sig": false, "md5_digest": "aff7e6df602d9d6438f6920324eb31ff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12117, "upload_time": "2016-04-18T17:03:45", "upload_time_iso_8601": "2016-04-18T17:03:45.832279Z", "url": "https://files.pythonhosted.org/packages/37/6a/91b09639d711fdba06586e9fcced16653b963b644081d030ead17e3e9a88/pycanvasdata-0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "aff7e6df602d9d6438f6920324eb31ff", "sha256": "5ee7fae59ba68c66ee9f739a4d3e48ec22f2afe473afea0948990da7fbf3219c"}, "downloads": -1, "filename": "pycanvasdata-0.0.3.tar.gz", "has_sig": false, "md5_digest": "aff7e6df602d9d6438f6920324eb31ff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12117, "upload_time": "2016-04-18T17:03:45", "upload_time_iso_8601": "2016-04-18T17:03:45.832279Z", "url": "https://files.pythonhosted.org/packages/37/6a/91b09639d711fdba06586e9fcced16653b963b644081d030ead17e3e9a88/pycanvasdata-0.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:08:48 2020"}