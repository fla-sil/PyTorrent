{"info": {"author": "Marko Ristin", "author_email": "marko@parquery.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.5"], "description": "posixfs\n=======\n\nposixfs provides context managers and functions to manipulate files on a POSIX file system with atomicity and\ndurability. The module is intended to be simple and straightforward to use.\n\nThe module is written in Python 3 with types annotated and using ``pathlib.Path``.\n\nRelated Projects\n================\nThere are many modules and projects which already provide this functionality. We give below a non-exhaustive list:\n\n* https://github.com/abarnert/fatomic\n* https://github.com/untitaker/python-atomicwrites\n* https://github.com/mitsuhiko/python-atomicfile\n* https://github.com/sashka/atomicfile\n* https://boltons.readthedocs.io/en/latest/fileutils.html#boltons.fileutils.atomic_save\n\nUnfortunately, none of them provides durable writes (only atomic ones), they lack type annotations and they all use\n``str`` instead of ``pathlib.Path`` to deal with file paths.\n\nWe particularly found type annotations to be crucial for a\nmodule which is widely used, such as for writing and reading files, in a large code base that requires static checks and\ngood readability. Moreover, we do not want to give away the manipulation capabilities of ``pathlib`` and be forced to\nsprinkle ``.as_posix()`` all over the code.\n\nFor more information on atomic and durable writes on POSIX file systems, see\nhttp://blog.httrack.com/blog/2013/11/15/everything-you-always-wanted-to-know-about-fsync\n\nUsage\n=====\n.. code-block:: python\n\n    import pathlib\n\n    import posixfs\n\n    # write bytes to a file atomically and durably\n    pth = pathlib.Path(\"/some/file.txt\")\n    posixfs.atomic_write_bytes(path=pth, data=b\"hello\", durable=True)\n\n    # write text to a file atomically and durably\n    posixfs.atomic_write_bytes(path=pth, text=\"hello\", durable=True)\n\n    # use context manager\n    with posixfs.AtomicWritingText(path=pth, durable=True) as file:\n        file.write('hello\\n')\n        file.write('how do you do?\\n')\n\nInstallation\n============\n\n* Create a virtual environment:\n\n.. code-block:: bash\n\n    python3 -m venv venv3\n\n* Activate it:\n\n.. code-block:: bash\n\n    source venv3/bin/activate\n\n* Install posixfs with pip:\n\n.. code-block:: bash\n\n    pip3 install posixfs\n\nDevelopment\n===========\n\n* Check out the repository.\n\n* In the repository root, create the virtual environment:\n\n.. code-block:: bash\n\n    python3 -m venv venv3\n\n* Activate the virtual environment:\n\n.. code-block:: bash\n\n    source venv3/bin/activate\n\n* Install the development dependencies:\n\n.. code-block:: bash\n\n    pip3 install -e .[dev]\n\n* We use tox for testing and packaging the distribution. Assuming that the virtual environment has been activated and\n  the development dependencies have been installed, run:\n\n.. code-block:: bash\n\n    tox\n\n* We also provide a set of pre-commit checks that lint and check code for formatting. Run them locally from an activated\n  virtual environment with development dependencies:\n\n.. code-block:: bash\n\n    ./precommit.py\n\n* The pre-commit script can also automatically format the code:\n\n.. code-block:: bash\n\n    ./precommit.py  --overwrite\n\nVersioning\n==========\nWe follow `Semantic Versioning <http://semver.org/spec/v1.0.0.html>`_. The version X.Y.Z indicates:\n\n* X is the major version (backward-incompatible),\n* Y is the minor version (backward-compatible), and\n* Z is the patch version (backward-compatible bug fix).", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Parquery/posixfs", "keywords": "posix file system atomic durable write", "license": "", "maintainer": "", "maintainer_email": "", "name": "posixfs", "package_url": "https://pypi.org/project/posixfs/", "platform": "", "project_url": "https://pypi.org/project/posixfs/", "project_urls": {"Homepage": "https://github.com/Parquery/posixfs"}, "release_url": "https://pypi.org/project/posixfs/1.0.1/", "requires_dist": null, "requires_python": "", "summary": "provides atomic and durable writes on a posix file system.", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"posixfs\">\n<h2>posixfs</h2>\n<p>posixfs provides context managers and functions to manipulate files on a POSIX file system with atomicity and\ndurability. The module is intended to be simple and straightforward to use.</p>\n<p>The module is written in Python 3 with types annotated and using <tt>pathlib.Path</tt>.</p>\n</div>\n<div id=\"related-projects\">\n<h2>Related Projects</h2>\n<p>There are many modules and projects which already provide this functionality. We give below a non-exhaustive list:</p>\n<ul>\n<li><a href=\"https://github.com/abarnert/fatomic\" rel=\"nofollow\">https://github.com/abarnert/fatomic</a></li>\n<li><a href=\"https://github.com/untitaker/python-atomicwrites\" rel=\"nofollow\">https://github.com/untitaker/python-atomicwrites</a></li>\n<li><a href=\"https://github.com/mitsuhiko/python-atomicfile\" rel=\"nofollow\">https://github.com/mitsuhiko/python-atomicfile</a></li>\n<li><a href=\"https://github.com/sashka/atomicfile\" rel=\"nofollow\">https://github.com/sashka/atomicfile</a></li>\n<li><a href=\"https://boltons.readthedocs.io/en/latest/fileutils.html#boltons.fileutils.atomic_save\" rel=\"nofollow\">https://boltons.readthedocs.io/en/latest/fileutils.html#boltons.fileutils.atomic_save</a></li>\n</ul>\n<p>Unfortunately, none of them provides durable writes (only atomic ones), they lack type annotations and they all use\n<tt>str</tt> instead of <tt>pathlib.Path</tt> to deal with file paths.</p>\n<p>We particularly found type annotations to be crucial for a\nmodule which is widely used, such as for writing and reading files, in a large code base that requires static checks and\ngood readability. Moreover, we do not want to give away the manipulation capabilities of <tt>pathlib</tt> and be forced to\nsprinkle <tt>.as_posix()</tt> all over the code.</p>\n<p>For more information on atomic and durable writes on POSIX file systems, see\n<a href=\"http://blog.httrack.com/blog/2013/11/15/everything-you-always-wanted-to-know-about-fsync\" rel=\"nofollow\">http://blog.httrack.com/blog/2013/11/15/everything-you-always-wanted-to-know-about-fsync</a></p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pathlib</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">posixfs</span>\n\n<span class=\"c1\"># write bytes to a file atomically and durably</span>\n<span class=\"n\">pth</span> <span class=\"o\">=</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"s2\">\"/some/file.txt\"</span><span class=\"p\">)</span>\n<span class=\"n\">posixfs</span><span class=\"o\">.</span><span class=\"n\">atomic_write_bytes</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"n\">pth</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"sa\">b</span><span class=\"s2\">\"hello\"</span><span class=\"p\">,</span> <span class=\"n\">durable</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># write text to a file atomically and durably</span>\n<span class=\"n\">posixfs</span><span class=\"o\">.</span><span class=\"n\">atomic_write_bytes</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"n\">pth</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s2\">\"hello\"</span><span class=\"p\">,</span> <span class=\"n\">durable</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># use context manager</span>\n<span class=\"k\">with</span> <span class=\"n\">posixfs</span><span class=\"o\">.</span><span class=\"n\">AtomicWritingText</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"n\">pth</span><span class=\"p\">,</span> <span class=\"n\">durable</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">file</span><span class=\"p\">:</span>\n    <span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s1\">'hello</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n    <span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s1\">'how do you do?</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<ul>\n<li>Create a virtual environment:</li>\n</ul>\n<pre>python3 -m venv venv3\n</pre>\n<ul>\n<li>Activate it:</li>\n</ul>\n<pre><span class=\"nb\">source</span> venv3/bin/activate\n</pre>\n<ul>\n<li>Install posixfs with pip:</li>\n</ul>\n<pre>pip3 install posixfs\n</pre>\n</div>\n<div id=\"development\">\n<h2>Development</h2>\n<ul>\n<li>Check out the repository.</li>\n<li>In the repository root, create the virtual environment:</li>\n</ul>\n<pre>python3 -m venv venv3\n</pre>\n<ul>\n<li>Activate the virtual environment:</li>\n</ul>\n<pre><span class=\"nb\">source</span> venv3/bin/activate\n</pre>\n<ul>\n<li>Install the development dependencies:</li>\n</ul>\n<pre>pip3 install -e .<span class=\"o\">[</span>dev<span class=\"o\">]</span>\n</pre>\n<ul>\n<li>We use tox for testing and packaging the distribution. Assuming that the virtual environment has been activated and\nthe development dependencies have been installed, run:</li>\n</ul>\n<pre>tox\n</pre>\n<ul>\n<li>We also provide a set of pre-commit checks that lint and check code for formatting. Run them locally from an activated\nvirtual environment with development dependencies:</li>\n</ul>\n<pre>./precommit.py\n</pre>\n<ul>\n<li>The pre-commit script can also automatically format the code:</li>\n</ul>\n<pre>./precommit.py  --overwrite\n</pre>\n</div>\n<div id=\"versioning\">\n<h2>Versioning</h2>\n<p>We follow <a href=\"http://semver.org/spec/v1.0.0.html\" rel=\"nofollow\">Semantic Versioning</a>. The version X.Y.Z indicates:</p>\n<ul>\n<li>X is the major version (backward-incompatible),</li>\n<li>Y is the minor version (backward-compatible), and</li>\n<li>Z is the patch version (backward-compatible bug fix).</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 6548223, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "3b70e3e4028f8988f22884301cddd1ed", "sha256": "17f6a91d246b7afe23f342704f0b27ceca5787df1dfeb1fe052761f9197708df"}, "downloads": -1, "filename": "posixfs-1.0.0.tar.gz", "has_sig": false, "md5_digest": "3b70e3e4028f8988f22884301cddd1ed", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4047, "upload_time": "2018-05-05T06:34:38", "upload_time_iso_8601": "2018-05-05T06:34:38.568649Z", "url": "https://files.pythonhosted.org/packages/1f/43/976d2938f902466729f43c64f5dcfc544367ff44f1d0ccfd2f7b4c8ae613/posixfs-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "1791a6c6791ff59503a07b1cc32734b1", "sha256": "059b7a7de8c98190f11a01c8aafa1f05991563658b8f5b8fa1f7ef6b0041b006"}, "downloads": -1, "filename": "posixfs-1.0.1.tar.gz", "has_sig": false, "md5_digest": "1791a6c6791ff59503a07b1cc32734b1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4244, "upload_time": "2018-08-03T15:05:30", "upload_time_iso_8601": "2018-08-03T15:05:30.375731Z", "url": "https://files.pythonhosted.org/packages/e8/f4/2edb327e9ae00bb006207858175fcf5c40f583f2718129cd602a335477db/posixfs-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1791a6c6791ff59503a07b1cc32734b1", "sha256": "059b7a7de8c98190f11a01c8aafa1f05991563658b8f5b8fa1f7ef6b0041b006"}, "downloads": -1, "filename": "posixfs-1.0.1.tar.gz", "has_sig": false, "md5_digest": "1791a6c6791ff59503a07b1cc32734b1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4244, "upload_time": "2018-08-03T15:05:30", "upload_time_iso_8601": "2018-08-03T15:05:30.375731Z", "url": "https://files.pythonhosted.org/packages/e8/f4/2edb327e9ae00bb006207858175fcf5c40f583f2718129cd602a335477db/posixfs-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:51:23 2020"}