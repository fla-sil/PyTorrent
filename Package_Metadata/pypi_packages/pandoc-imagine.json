{"info": {"author": "hertogp", "author_email": "git.hertogp@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: End Users/Desktop", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.5", "Topic :: Text Processing :: Filters"], "description": "``` \n                                          \\\\\\///\n                                         / _  _ \\\n                                       (| (.)(.) |)\n                .--------------------.OOOo--()--oOOO.-------------------.\n                |                                                       |\n                |        ____                          _                |\n                |       /  _/____ ___   ____ _ ____ _ (_)____   ___     |\n                |       / / / __ `__ \\ / __ `// __ `// // __ \\ / _ \\    |\n                |     _/ / / / / / / // /_/ // /_/ // // / / //  __/    |\n                |    /___//_/ /_/ /_/ \\__,_/ \\__, //_//_/ /_/ \\___/     |\n                |                           /____/                      |\n                |                                                       |\n                '-------------------.oooO-------------------------------'\n                                     (   )   Oooo.\n                                      \\ (    (   )\n                                       \\_)    ) /\n                                             (_/\n```\n\n## A pandoc filter to process codeblocks into images and/or ascii art\n\nImagine is a pandoc filter that will turn codeblocks tagged with certain\nclasses into images or ascii art. The following are currently supported:\n\n    actdiag, asy, asymptote, blockdiag, boxes, circo, ctioga2, ditaa, dot, fdp,\n    figlet, flydraw, gle, gnuplot, graph, graphviz, gri, imagine, mermaid, mscgen,\n    neato, nwdiag, octave, packetdiag, pic, pic2plot, plantuml, plot, ploticus,\n    protocol, pyxplot, rackdiag, seqdiag, sfdp, shebang, twopi\n\n## Examples\n\n### [Mscgen](http://www.mcternan.me.uk/mscgen/)\n\n![](https://raw.githubusercontent.com/hertogp/imagine/master/pd-images/3472ea8b47f0b7d2d2f30565851e320f39b5e3a9.png)\n\n    ```{.mscgen im_out=\"img,fcb\" im_fmt=\"png\"}\n    msc {\n     hscale=\"1.3\", arcgradient = \"8\";\n    \n     a [label=\"Client\"],b [label=\"Server\"];\n    \n     a=>b [label=\"data1\"];\n     a-xb [label=\"data2\"];\n     a=>b [label=\"data3\"];\n     a<=b [label=\"ack1, nack2\"];\n     a=>b [label=\"data2\", arcskip=\"1\"];\n     |||;\n     a<=b [label=\"ack3\"];\n     |||;\n    }\n    ```\n\n### [Mermaid](https://github.com/mermaidjs/mermaid.cli)\n\n![](https://raw.githubusercontent.com/hertogp/imagine/master/pd-images/cc321a3330d39327fcaffac5dc39397e6166edc7.png)\n\n    ```{.mermaid im_opt=\"-H 300\" im_fmt=\"png\" im_out=\"img,fcb\"}\n    sequenceDiagram\n        Alice ->> Bob: Hello Bob, how are you?\n        Bob-->>John: How about you John?\n        Bob--x Alice: I am good thanks!\n        Bob-x John: I am good thanks!\n        Note right of John: Bob thinks a long<br/>long time, so long<br/>that the text does<br/>not fit on a row.\n    \n        Bob-->Alice: Checking with John...\n        Alice->John: Yes... John, how are you?\n    ```\n\n### [Gnuplot](http://www.gnuplot.info)\n\n![](https://raw.githubusercontent.com/hertogp/imagine/master/pd-images/5f64cf6a4cf0b4b737fd2d07f0e3cc035475aca6.png)\n\n    ```{.gnuplot im_fmt=\"png\" im_out=\"img,fcb\"}\n    set terminal png\n    set dummy u,v\n    set key bmargin center horizontal Right noreverse enhanced autotitles nobox\n    set parametric\n    set view 50, 30, 1, 1\n    set isosamples 50, 20\n    set hidden3d back offset 1 trianglepattern 3 undefined 1 altdiagonal bentover\n    set ticslevel 0\n    set title \"Interlocking Tori\"\n    set urange [ -3.14159 : 3.14159 ] noreverse nowriteback\n    set vrange [ -3.14159 : 3.14159 ] noreverse nowriteback\n    splot cos(u)+.5*cos(u)*cos(v),sin(u)+.5*sin(u)*cos(v),.5*sin(v) with lines,\\\n    1+cos(u)+.5*cos(u)*cos(v),.5*sin(v),sin(u)+.5*sin(u)*cos(v) with lines\n    ```\n\n### [Shebang](http://www.google.com/search?q=linux+shebang) using Python & Pygal\n\n![](https://raw.githubusercontent.com/hertogp/imagine/master/pd-images/4d647b61c07fe8c3935def2b57796c0780ff38bd.png)\n\n    ```{.shebang im_fmt=\"png\" im_out=\"img,fcb\"}\n    #!/usr/bin/env python3\n    import sys\n    import pygal\n    from math import cos\n    xy_chart = pygal.XY()\n    xy_chart.title = 'XY Cosinus'\n    xy_chart.add('x = cos(y)', [(cos(x / 10.), x / 10.) for x in range(-50, 50, 5)])\n    xy_chart.add('y = cos(x)', [(x / 10., cos(x / 10.)) for x in range(-50, 50, 5)])\n    xy_chart.render_to_png(sys.argv[-1])\n    ```\n\n### [boxes](http://boxes.thomasjensen.com)\n\n    /*       _\\|/_\n             (o o)\n     +----oOO-{_}-OOo------------------------------+\n     |    #!/bin/bash                              |\n     |    # I seem to have got myself boxed in!    |\n     |    cat $0 | boxes -d peek -p h4             |\n     +--------------------------------------------*/\n\n    ```{.shebang im_out=\"stdout,fcb\"}\n    #!/bin/bash\n    # I seem to have got myself boxed in!\n    cat $0 | boxes -d peek -p h4\n    ```\n\nMore examples on\n[github](https://github.com/hertogp/imagine/tree/master/examples), which\nalso includes formats other than `png`.\n\n## Documentation\n\n    Imagine\n      A pandoc filter to turn fenced codeblocks into graphics or ascii art by\n      wrapping some external command line utilities, such as:\n    \n        actdiag, asy, asymptote, blockdiag, boxes, circo, ctioga2, ditaa, dot,\n        fdp, figlet, flydraw, gle, gnuplot, graph, graphviz, gri, imagine,\n        mermaid, mscgen, neato, nwdiag, octave, packetdiag, pic, pic2plot,\n        plantuml, plot, ploticus, protocol, pyxplot, rackdiag, seqdiag, sfdp,\n        shebang, twopi\n    \n    \n    Installation\n    \n        % sudo -H pip install pandoc-imagine\n    \n        or simply save `pandoc_imagine.py` anywhere along python's sys.path\n    \n    \n    Dependencies\n    \n        % sudo -H pip install pandocfilters six\n    \n        and one (or more) of the packages that provide above utilities.\n    \n    \n    Pandoc usage\n    \n        % pandoc --filter pandoc-imagine document.md -o document.pdf\n    \n    \n    Markdown usage\n    \n        ```cmd\n        code\n        ```\n    \n      Alternate, longer form:\n    \n        ```{.cmd im_opt=\"..\" ...}\n        code\n        ```\n    \n      which will run `cmd` (if known) to proces the `code` into an image and\n      replaces the fenced code block with an Image in a paragraph of its own or any\n      ascii art in its own CodeBlock.\n    \n      If the command fails, the original fenced code block is retained unchanged.\n      Usually, only errors are printed to stderr but you can get more info by\n      setting the `im_log` option (see below).\n    \n      If the command succeeds but produces no image, a line reporting the missing\n      image is included in the output document.\n    \n    \n    Imagine options\n    \n      Imagine's behaviour can be influenced by setting these options:\n    \n      - im_opt=\"\" or any cli-options to pass in on the command line.\n        Some classes already provide some defaults (as required by the command).\n    \n      - im_out=\"img\", or ordered csv-list of keywords indicating what to produce:\n        - img     an image-link in a paragraph\n        - fcb     anonymous codeblock containing the original codeblock\n        - stdout, anonymous codeblock containing captured stdout (if any)\n        - stderr, anonymous codeblock containing captured stderr (if any)\n    \n        Some workers ignore 'img' by necessity since they donot produce graphical\n        data that can be linked to, e.g. `figlet` or `protocol`, while others the\n        'stdout' will ignored because that's were they produce their graphical\n        data.\n    \n      - im_prg=None, or a cli-cmd name to override class-to-command map.\n        Normally, the class on the code block is mapped to a command line tool to\n        use. For example,\n        ```gri\n        ..\n        ```\n        maps gri to `gri`, but that can be changed by `{.gri im_prg=\"gri2\"} to use\n        `gri2` instead of `gri`.\n    \n      - im_fmt=\"png\", or another output format of your choosing depending on the\n        command line tool used.  Some tools donot derive their output image format\n        from an intended output file name extension, but instead require it to be\n        set in the tool's codeblock containing its instructions.  Be sure the code\n        in the codeblock matches `im_fmt` or pandoc may have trouble assembling the\n        final document.\n    \n      - im_dir=\"pd\", or antoher absolute or relative (to the working directory)\n        path in which input/output files are to be stored during processing.\n        Note that an \"-images\" is still tacked onto the end of the path though.\n    \n      - im_log=0, which defaults to printing only errors caught during processing.\n        Set it to -1 to completely silence Imagine, or as high as 4 for debug level\n        output if somethings goes wrong and you need more information on what is\n        going on.\n    \n      Option values are resolved in order of most to least specific:\n    \n      1. {.klass im_xyz=\"..\"}       codeblock specific\n      2. imagine.klass.im_xyz: ..   metadata, klass specific\n      3. imagine.im_xyz: ..         metadata, imagine specific\n      4. class variable             hardcoded default\n    \n      Notes:\n      - filenames are based on a hash of the codeblock + its attributes\n      - uses subdir `{im_dir}-images` to store any input/output files\n      - there's no clean up of files stored there\n      - if an output filename exists, it is not regenerated but simply linked to.\n      - `packetdiag`'s underlying library seems to have some problems.\n    \n      Some commands follow a slightly different pattern:\n      - 'img' directive is ignored by commands that only produce ascii\n      - ctioga2 defaults to pdf instead of png\n      - flydraw produces a gif, not png\n      - gle also creates a .gle subdir inside the images-dir\n      - gri produces a ps, which is `convert`ed to png\n      - imagine reads its code as help-topics, returns codeblocks with help-info\n      - plot reads its codeblock as the relative path to the file to process\n      - pyxplot will have `set terminal` & `set output` prepended to its `code`\n      - shebang runs its codeblock as a script with <fname>.{im_fmt} as its argument.\n        - use {.shebang im_out=\"stdout\"} for text instead of an png\n    \n    \n    Security\n    \n      Imagine just hands the fenced codeblocks to plotting tools to process or\n      simply runs them as system scripts, as-is.\n    \n      Shebang's are inherently unsafe and most of the plotting tools implement\n      their own 'little' languages, which can create beautiful images, but can also\n      cause harm.\n    \n      There is no way to check for 'side effects' in advance, so make sure to check\n      the fenced codeblocks before running them through the filter.\n    \n    \n    Imagine class\n    \n    The imagine class puts documentation of topics at your fingertips, like so:\n    \n        ```imagine\n        klass\n        ```\n    \n      Use `imagine` as klass to get the module's docstring (ie this text) and/or\n      one or more of the commands you're interested in, each on a separate line.\n    \n    \n    Thanks for feedback:\n    \n      amietn, chdemko, heyrict, priiduonu, K4zuki\n\n## Individual Classes\n\n``` \nAsy\n\n    sudo-apt-get install asymptote\n\n    See http://asymptote.sourceforge.net/\n    \n    Runs asy -o <fname>.{im_fmt} {im_opt} <fname>.asy\n    Wraps:\n    -  'asy' -> asy\n    -  'asymptote' -> asy\n\nBlockDiag\n\n    sudo pip install blockdiag nwdiag actdiag seqdiag\n    http://blockdiag.com/\n    \n    Runs {im_prg} {im_opt} -T {im_fmt} <fname>.{im_fmt} -o <fname>.{im_prg}\n    Wraps:\n    -  'blockdiag' -> blockdiag\n    -  'seqdiag' -> seqdiag\n    -  'rackdiag' -> rackdiag\n    -  'nwdiag' -> nwdiag\n    -  'packetdiag' -> packetdiag\n    -  'actdiag' -> actdiag\n\nBoxes\n\n    sudo apt-get install boxes\n    http://boxes.thomasjensen.com\n    \n    Runs boxes {im_opt} <fname>.boxes\n    Wraps:\n    -  'boxes' -> boxes\n\nCtioga2\n\n    sudo apt-get install ctioga2\n    http://ctioga2.sourceforge.net\n    \n    Runs ctioga2 {im_opt} -f <fname>.ctioga2\n    Wraps:\n    -  'ctioga2' -> ctioga2\n\nDitaa\n\n    sudo apt-get install ditaa\n    http://ditaa.sourceforge.net\n    \n    Runs ditaa <fname>.ditaa <fname>.{im_fmt} {im_opt}\n    Wraps:\n    -  'ditaa' -> ditaa\n\nFiglet\n\n    sudo apt-get install figlet\n    http://www.figlet.org\n    \n    Runs figlet {im_opt} < code-text\n    Wraps:\n    -  'figlet' -> figlet\n\nFlydraw\n\n    sudo apt-get install flydraw\n    http://manpages.ubuntu.com/manpages/precise/man1/flydraw.1.html\n    notes:\n    - graphic data is printed to stdout\n    - so 'stdout' in im_out option is silently ignored\n    \n    Runs flydraw {im_opt} < code-text\n    Wraps:\n    -  'flydraw' -> flydraw\n\nGle\n\n    sudo apt-get install gle-graphics\n    http://glx.sourceforge.net\n    \n    Runs gle {im_opt} -verbosity 0 -output <fname>.{im_fmt} <fname>.gle\n    Wraps:\n    -  'gle' -> gle\n\nGnuPlot\n\n    sudo apt-get install gnuplot\n    http://www.gnuplot.info\n    notes:\n    - graphic data is printed to stdout\n    - so 'stdout' in im_out option is silently ignored\n    \n    Runs gnuplot {im_opt} <fname>.gnuplot > <fname>.{im_fmt}\n    Wraps:\n    -  'gnuplot' -> gnuplot\n\nGraph\n\n    sudo apt-get install plotutils\n    https://www.gnu.org/software/plotutils\n    notes:\n    - graphic data is printed to stdout\n    - so 'stdout' in im_out option is silently ignored\n    \n    Runs graph -T png {im_opt} <fname>.graph\n    Wraps:\n    -  'graph' -> graph\n\nGraphviz\n\n    sudo apt-get install graphviz\n    http://graphviz.org\n    \n    Runs {im_prg} {im_opt} -T{im_fmt} <fname>.{im_prg} <fname>.{im_fmt}\n    Wraps:\n    -  'dot' -> dot\n    -  'neato' -> neato\n    -  'twopi' -> twopi\n    -  'circo' -> circo\n    -  'fdp' -> fdp\n    -  'sfdp' -> sfdp\n    -  'graphviz' -> dot\n\nGri\n\n    sudo apt-get install gri imagemagick\n    http://gri.sourceforge.net\n    Notes\n    - insists on creating a <fname>.ps in current working directory\n    - requires `convert` from imagemagick\n    - ImageMagick's security policy might need massaging\n    \n    Runs gri {im_opt} -c 0 -b <fname>.gri\n    Wraps:\n    -  'gri' -> gri\n\nImagine\n\n    pip install pandoc-imagine\n    https://github.com/hertogp/imagine\n    \n    Runs returns documentation in a CodeBlock\n    Wraps:\n    -  'imagine' -> imagine\n\nMermaid\n\n    sudo npm install mermaid.cli\n    https://github.com/mermaidjs/mermaid.cli\n    \n    Runs mmdc -i <fname>.mermaid -o <fname>.<fmt> {im_opt}\n    Wraps:\n    -  'mermaid' -> mmdc\n\nMscGen\n\n    sudo apt-get install mscgen\n    http://www.mcternan.me.uk/mscgen\n    \n    Runs mscgen -T {im_fmt} -o <fname>.{im_fmt} <fname>.mscgen\n    Wraps:\n    -  'mscgen' -> mscgen\n\nOctave\n\n    sudo apt-get install octave\n    https://www.gnu.org/software/octave\n    \n    Runs octage --no-gui -q {im_opt} <fname>.octave <fname>.{im_fmt}\n    Wraps:\n    -  'octave' -> octave\n\nPic2Plot\n\n    sudo apt-get install plotutils\n    https://www.gnu.org/software/plotutils\n    notes:\n    - graphic data is printed to stdout\n    - so 'stdout' in im_out option is silently ignored\n    \n    Runs pic2plot -T png {im_opt} <fname>.pic2plot\n    Wraps:\n    -  'pic2plot' -> pic2plot\n    -  'pic' -> pic2plot\n\nPlantUml\n\n    sudo apt-get install plantuml\n    http://plantuml.com\n    \n    Runs plantuml -t{im_fmt} <fname>.plantuml {im_opt}\n    Wraps:\n    -  'plantuml' -> plantuml\n\nPlot\n\n    sudo apt-get install plotutils\n    https://www.gnu.org/software/plotutils\n    notes:\n    - graphic data is printed to stdout\n    - so 'stdout' in im_out option is silently ignored\n    \n    Runs plot -T {im_fmt} {im_opt} <code-text-as-filename>\n    Wraps:\n    -  'plot' -> plot\n\nPloticus\n\n    sudo apt-get install ploticus\n    http://ploticus.sourceforge.net/doc/welcome.html\n    \n    Runs ploticus -{im_fmt} -o <fname>.{im_fmt} {im_opt} <fname>.ploticus\n    Wraps:\n    -  'ploticus' -> ploticus\n\nProtocol\n\n    cd ~/installs/git-repos\n    git clone https://github.com/luismartingarcia/protocol.git\n    python setup install\n    https://github.com/luismartingarcia/protocol.git\n    \n    Runs protocol {im_opt} code-text\n    Wraps:\n    -  'protocol' -> protocol\n\nPyxPlot\n\n    sudo apt-get install pyxplot\n    http://pyxplot.org.uk\n    \n    Runs pyxplot {im_opt} <fname>.pyxplot\n    Wraps:\n    -  'pyxplot' -> pyxplot\n\nSheBang\n\n    http://www.google.com/search?q=shebang+line\n    \n    Runs <fname>.shebang {im_opt} <fname>.{im_fmt}\n    Wraps:\n    -  'shebang' -> shebang\n\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/hertogp/imagine", "keywords": "pandoc,filter,codeblock,image,ascii-art", "license": "", "maintainer": "", "maintainer_email": "", "name": "pandoc-imagine", "package_url": "https://pypi.org/project/pandoc-imagine/", "platform": "", "project_url": "https://pypi.org/project/pandoc-imagine/", "project_urls": {"Homepage": "https://github.com/hertogp/imagine"}, "release_url": "https://pypi.org/project/pandoc-imagine/0.1.6/", "requires_dist": null, "requires_python": "", "summary": "A filter to process codeblocks into images or ascii art", "version": "0.1.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <pre><code>                                          \\\\\\///\n                                         / _  _ \\\n                                       (| (.)(.) |)\n                .--------------------.OOOo--()--oOOO.-------------------.\n                |                                                       |\n                |        ____                          _                |\n                |       /  _/____ ___   ____ _ ____ _ (_)____   ___     |\n                |       / / / __ `__ \\ / __ `// __ `// // __ \\ / _ \\    |\n                |     _/ / / / / / / // /_/ // /_/ // // / / //  __/    |\n                |    /___//_/ /_/ /_/ \\__,_/ \\__, //_//_/ /_/ \\___/     |\n                |                           /____/                      |\n                |                                                       |\n                '-------------------.oooO-------------------------------'\n                                     (   )   Oooo.\n                                      \\ (    (   )\n                                       \\_)    ) /\n                                             (_/\n</code></pre>\n<h2>A pandoc filter to process codeblocks into images and/or ascii art</h2>\n<p>Imagine is a pandoc filter that will turn codeblocks tagged with certain\nclasses into images or ascii art. The following are currently supported:</p>\n<pre><code>actdiag, asy, asymptote, blockdiag, boxes, circo, ctioga2, ditaa, dot, fdp,\nfiglet, flydraw, gle, gnuplot, graph, graphviz, gri, imagine, mermaid, mscgen,\nneato, nwdiag, octave, packetdiag, pic, pic2plot, plantuml, plot, ploticus,\nprotocol, pyxplot, rackdiag, seqdiag, sfdp, shebang, twopi\n</code></pre>\n<h2>Examples</h2>\n<h3><a href=\"http://www.mcternan.me.uk/mscgen/\" rel=\"nofollow\">Mscgen</a></h3>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6de104b44bbeb6a282fd4b453bff74a589d900ae/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f686572746f67702f696d6167696e652f6d61737465722f70642d696d616765732f333437326561386234376630623764326432663330353635383531653332306633396235653361392e706e67\"></p>\n<pre><code>```{.mscgen im_out=\"img,fcb\" im_fmt=\"png\"}\nmsc {\n hscale=\"1.3\", arcgradient = \"8\";\n\n a [label=\"Client\"],b [label=\"Server\"];\n\n a=&gt;b [label=\"data1\"];\n a-xb [label=\"data2\"];\n a=&gt;b [label=\"data3\"];\n a&lt;=b [label=\"ack1, nack2\"];\n a=&gt;b [label=\"data2\", arcskip=\"1\"];\n |||;\n a&lt;=b [label=\"ack3\"];\n |||;\n}\n```\n</code></pre>\n<h3><a href=\"https://github.com/mermaidjs/mermaid.cli\" rel=\"nofollow\">Mermaid</a></h3>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8766eb4ecfe0378d44792de3bfbec1b4c00e13e4/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f686572746f67702f696d6167696e652f6d61737465722f70642d696d616765732f636333323161333333306433393332376663616666616335646333393339376536313636656463372e706e67\"></p>\n<pre><code>```{.mermaid im_opt=\"-H 300\" im_fmt=\"png\" im_out=\"img,fcb\"}\nsequenceDiagram\n    Alice -&gt;&gt; Bob: Hello Bob, how are you?\n    Bob--&gt;&gt;John: How about you John?\n    Bob--x Alice: I am good thanks!\n    Bob-x John: I am good thanks!\n    Note right of John: Bob thinks a long&lt;br/&gt;long time, so long&lt;br/&gt;that the text does&lt;br/&gt;not fit on a row.\n\n    Bob--&gt;Alice: Checking with John...\n    Alice-&gt;John: Yes... John, how are you?\n```\n</code></pre>\n<h3><a href=\"http://www.gnuplot.info\" rel=\"nofollow\">Gnuplot</a></h3>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c2c3f74d107090719f3abb1ad2201ea1802ea2ad/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f686572746f67702f696d6167696e652f6d61737465722f70642d696d616765732f356636346366366134636630623462373337666432643037663065336363303335343735616361362e706e67\"></p>\n<pre><code>```{.gnuplot im_fmt=\"png\" im_out=\"img,fcb\"}\nset terminal png\nset dummy u,v\nset key bmargin center horizontal Right noreverse enhanced autotitles nobox\nset parametric\nset view 50, 30, 1, 1\nset isosamples 50, 20\nset hidden3d back offset 1 trianglepattern 3 undefined 1 altdiagonal bentover\nset ticslevel 0\nset title \"Interlocking Tori\"\nset urange [ -3.14159 : 3.14159 ] noreverse nowriteback\nset vrange [ -3.14159 : 3.14159 ] noreverse nowriteback\nsplot cos(u)+.5*cos(u)*cos(v),sin(u)+.5*sin(u)*cos(v),.5*sin(v) with lines,\\\n1+cos(u)+.5*cos(u)*cos(v),.5*sin(v),sin(u)+.5*sin(u)*cos(v) with lines\n```\n</code></pre>\n<h3><a href=\"http://www.google.com/search?q=linux+shebang\" rel=\"nofollow\">Shebang</a> using Python &amp; Pygal</h3>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/dc47cf2971a457b0955ec250578be7717e39aab9/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f686572746f67702f696d6167696e652f6d61737465722f70642d696d616765732f346436343762363163303766653863333933356465663262353737393663303738306666333862642e706e67\"></p>\n<pre><code>```{.shebang im_fmt=\"png\" im_out=\"img,fcb\"}\n#!/usr/bin/env python3\nimport sys\nimport pygal\nfrom math import cos\nxy_chart = pygal.XY()\nxy_chart.title = 'XY Cosinus'\nxy_chart.add('x = cos(y)', [(cos(x / 10.), x / 10.) for x in range(-50, 50, 5)])\nxy_chart.add('y = cos(x)', [(x / 10., cos(x / 10.)) for x in range(-50, 50, 5)])\nxy_chart.render_to_png(sys.argv[-1])\n```\n</code></pre>\n<h3><a href=\"http://boxes.thomasjensen.com\" rel=\"nofollow\">boxes</a></h3>\n<pre><code>/*       _\\|/_\n         (o o)\n +----oOO-{_}-OOo------------------------------+\n |    #!/bin/bash                              |\n |    # I seem to have got myself boxed in!    |\n |    cat $0 | boxes -d peek -p h4             |\n +--------------------------------------------*/\n\n```{.shebang im_out=\"stdout,fcb\"}\n#!/bin/bash\n# I seem to have got myself boxed in!\ncat $0 | boxes -d peek -p h4\n```\n</code></pre>\n<p>More examples on\n<a href=\"https://github.com/hertogp/imagine/tree/master/examples\" rel=\"nofollow\">github</a>, which\nalso includes formats other than <code>png</code>.</p>\n<h2>Documentation</h2>\n<pre><code>Imagine\n  A pandoc filter to turn fenced codeblocks into graphics or ascii art by\n  wrapping some external command line utilities, such as:\n\n    actdiag, asy, asymptote, blockdiag, boxes, circo, ctioga2, ditaa, dot,\n    fdp, figlet, flydraw, gle, gnuplot, graph, graphviz, gri, imagine,\n    mermaid, mscgen, neato, nwdiag, octave, packetdiag, pic, pic2plot,\n    plantuml, plot, ploticus, protocol, pyxplot, rackdiag, seqdiag, sfdp,\n    shebang, twopi\n\n\nInstallation\n\n    % sudo -H pip install pandoc-imagine\n\n    or simply save `pandoc_imagine.py` anywhere along python's sys.path\n\n\nDependencies\n\n    % sudo -H pip install pandocfilters six\n\n    and one (or more) of the packages that provide above utilities.\n\n\nPandoc usage\n\n    % pandoc --filter pandoc-imagine document.md -o document.pdf\n\n\nMarkdown usage\n\n    ```cmd\n    code\n    ```\n\n  Alternate, longer form:\n\n    ```{.cmd im_opt=\"..\" ...}\n    code\n    ```\n\n  which will run `cmd` (if known) to proces the `code` into an image and\n  replaces the fenced code block with an Image in a paragraph of its own or any\n  ascii art in its own CodeBlock.\n\n  If the command fails, the original fenced code block is retained unchanged.\n  Usually, only errors are printed to stderr but you can get more info by\n  setting the `im_log` option (see below).\n\n  If the command succeeds but produces no image, a line reporting the missing\n  image is included in the output document.\n\n\nImagine options\n\n  Imagine's behaviour can be influenced by setting these options:\n\n  - im_opt=\"\" or any cli-options to pass in on the command line.\n    Some classes already provide some defaults (as required by the command).\n\n  - im_out=\"img\", or ordered csv-list of keywords indicating what to produce:\n    - img     an image-link in a paragraph\n    - fcb     anonymous codeblock containing the original codeblock\n    - stdout, anonymous codeblock containing captured stdout (if any)\n    - stderr, anonymous codeblock containing captured stderr (if any)\n\n    Some workers ignore 'img' by necessity since they donot produce graphical\n    data that can be linked to, e.g. `figlet` or `protocol`, while others the\n    'stdout' will ignored because that's were they produce their graphical\n    data.\n\n  - im_prg=None, or a cli-cmd name to override class-to-command map.\n    Normally, the class on the code block is mapped to a command line tool to\n    use. For example,\n    ```gri\n    ..\n    ```\n    maps gri to `gri`, but that can be changed by `{.gri im_prg=\"gri2\"} to use\n    `gri2` instead of `gri`.\n\n  - im_fmt=\"png\", or another output format of your choosing depending on the\n    command line tool used.  Some tools donot derive their output image format\n    from an intended output file name extension, but instead require it to be\n    set in the tool's codeblock containing its instructions.  Be sure the code\n    in the codeblock matches `im_fmt` or pandoc may have trouble assembling the\n    final document.\n\n  - im_dir=\"pd\", or antoher absolute or relative (to the working directory)\n    path in which input/output files are to be stored during processing.\n    Note that an \"-images\" is still tacked onto the end of the path though.\n\n  - im_log=0, which defaults to printing only errors caught during processing.\n    Set it to -1 to completely silence Imagine, or as high as 4 for debug level\n    output if somethings goes wrong and you need more information on what is\n    going on.\n\n  Option values are resolved in order of most to least specific:\n\n  1. {.klass im_xyz=\"..\"}       codeblock specific\n  2. imagine.klass.im_xyz: ..   metadata, klass specific\n  3. imagine.im_xyz: ..         metadata, imagine specific\n  4. class variable             hardcoded default\n\n  Notes:\n  - filenames are based on a hash of the codeblock + its attributes\n  - uses subdir `{im_dir}-images` to store any input/output files\n  - there's no clean up of files stored there\n  - if an output filename exists, it is not regenerated but simply linked to.\n  - `packetdiag`'s underlying library seems to have some problems.\n\n  Some commands follow a slightly different pattern:\n  - 'img' directive is ignored by commands that only produce ascii\n  - ctioga2 defaults to pdf instead of png\n  - flydraw produces a gif, not png\n  - gle also creates a .gle subdir inside the images-dir\n  - gri produces a ps, which is `convert`ed to png\n  - imagine reads its code as help-topics, returns codeblocks with help-info\n  - plot reads its codeblock as the relative path to the file to process\n  - pyxplot will have `set terminal` &amp; `set output` prepended to its `code`\n  - shebang runs its codeblock as a script with &lt;fname&gt;.{im_fmt} as its argument.\n    - use {.shebang im_out=\"stdout\"} for text instead of an png\n\n\nSecurity\n\n  Imagine just hands the fenced codeblocks to plotting tools to process or\n  simply runs them as system scripts, as-is.\n\n  Shebang's are inherently unsafe and most of the plotting tools implement\n  their own 'little' languages, which can create beautiful images, but can also\n  cause harm.\n\n  There is no way to check for 'side effects' in advance, so make sure to check\n  the fenced codeblocks before running them through the filter.\n\n\nImagine class\n\nThe imagine class puts documentation of topics at your fingertips, like so:\n\n    ```imagine\n    klass\n    ```\n\n  Use `imagine` as klass to get the module's docstring (ie this text) and/or\n  one or more of the commands you're interested in, each on a separate line.\n\n\nThanks for feedback:\n\n  amietn, chdemko, heyrict, priiduonu, K4zuki\n</code></pre>\n<h2>Individual Classes</h2>\n<pre><code>Asy\n\n    sudo-apt-get install asymptote\n\n    See http://asymptote.sourceforge.net/\n    \n    Runs asy -o &lt;fname&gt;.{im_fmt} {im_opt} &lt;fname&gt;.asy\n    Wraps:\n    -  'asy' -&gt; asy\n    -  'asymptote' -&gt; asy\n\nBlockDiag\n\n    sudo pip install blockdiag nwdiag actdiag seqdiag\n    http://blockdiag.com/\n    \n    Runs {im_prg} {im_opt} -T {im_fmt} &lt;fname&gt;.{im_fmt} -o &lt;fname&gt;.{im_prg}\n    Wraps:\n    -  'blockdiag' -&gt; blockdiag\n    -  'seqdiag' -&gt; seqdiag\n    -  'rackdiag' -&gt; rackdiag\n    -  'nwdiag' -&gt; nwdiag\n    -  'packetdiag' -&gt; packetdiag\n    -  'actdiag' -&gt; actdiag\n\nBoxes\n\n    sudo apt-get install boxes\n    http://boxes.thomasjensen.com\n    \n    Runs boxes {im_opt} &lt;fname&gt;.boxes\n    Wraps:\n    -  'boxes' -&gt; boxes\n\nCtioga2\n\n    sudo apt-get install ctioga2\n    http://ctioga2.sourceforge.net\n    \n    Runs ctioga2 {im_opt} -f &lt;fname&gt;.ctioga2\n    Wraps:\n    -  'ctioga2' -&gt; ctioga2\n\nDitaa\n\n    sudo apt-get install ditaa\n    http://ditaa.sourceforge.net\n    \n    Runs ditaa &lt;fname&gt;.ditaa &lt;fname&gt;.{im_fmt} {im_opt}\n    Wraps:\n    -  'ditaa' -&gt; ditaa\n\nFiglet\n\n    sudo apt-get install figlet\n    http://www.figlet.org\n    \n    Runs figlet {im_opt} &lt; code-text\n    Wraps:\n    -  'figlet' -&gt; figlet\n\nFlydraw\n\n    sudo apt-get install flydraw\n    http://manpages.ubuntu.com/manpages/precise/man1/flydraw.1.html\n    notes:\n    - graphic data is printed to stdout\n    - so 'stdout' in im_out option is silently ignored\n    \n    Runs flydraw {im_opt} &lt; code-text\n    Wraps:\n    -  'flydraw' -&gt; flydraw\n\nGle\n\n    sudo apt-get install gle-graphics\n    http://glx.sourceforge.net\n    \n    Runs gle {im_opt} -verbosity 0 -output &lt;fname&gt;.{im_fmt} &lt;fname&gt;.gle\n    Wraps:\n    -  'gle' -&gt; gle\n\nGnuPlot\n\n    sudo apt-get install gnuplot\n    http://www.gnuplot.info\n    notes:\n    - graphic data is printed to stdout\n    - so 'stdout' in im_out option is silently ignored\n    \n    Runs gnuplot {im_opt} &lt;fname&gt;.gnuplot &gt; &lt;fname&gt;.{im_fmt}\n    Wraps:\n    -  'gnuplot' -&gt; gnuplot\n\nGraph\n\n    sudo apt-get install plotutils\n    https://www.gnu.org/software/plotutils\n    notes:\n    - graphic data is printed to stdout\n    - so 'stdout' in im_out option is silently ignored\n    \n    Runs graph -T png {im_opt} &lt;fname&gt;.graph\n    Wraps:\n    -  'graph' -&gt; graph\n\nGraphviz\n\n    sudo apt-get install graphviz\n    http://graphviz.org\n    \n    Runs {im_prg} {im_opt} -T{im_fmt} &lt;fname&gt;.{im_prg} &lt;fname&gt;.{im_fmt}\n    Wraps:\n    -  'dot' -&gt; dot\n    -  'neato' -&gt; neato\n    -  'twopi' -&gt; twopi\n    -  'circo' -&gt; circo\n    -  'fdp' -&gt; fdp\n    -  'sfdp' -&gt; sfdp\n    -  'graphviz' -&gt; dot\n\nGri\n\n    sudo apt-get install gri imagemagick\n    http://gri.sourceforge.net\n    Notes\n    - insists on creating a &lt;fname&gt;.ps in current working directory\n    - requires `convert` from imagemagick\n    - ImageMagick's security policy might need massaging\n    \n    Runs gri {im_opt} -c 0 -b &lt;fname&gt;.gri\n    Wraps:\n    -  'gri' -&gt; gri\n\nImagine\n\n    pip install pandoc-imagine\n    https://github.com/hertogp/imagine\n    \n    Runs returns documentation in a CodeBlock\n    Wraps:\n    -  'imagine' -&gt; imagine\n\nMermaid\n\n    sudo npm install mermaid.cli\n    https://github.com/mermaidjs/mermaid.cli\n    \n    Runs mmdc -i &lt;fname&gt;.mermaid -o &lt;fname&gt;.&lt;fmt&gt; {im_opt}\n    Wraps:\n    -  'mermaid' -&gt; mmdc\n\nMscGen\n\n    sudo apt-get install mscgen\n    http://www.mcternan.me.uk/mscgen\n    \n    Runs mscgen -T {im_fmt} -o &lt;fname&gt;.{im_fmt} &lt;fname&gt;.mscgen\n    Wraps:\n    -  'mscgen' -&gt; mscgen\n\nOctave\n\n    sudo apt-get install octave\n    https://www.gnu.org/software/octave\n    \n    Runs octage --no-gui -q {im_opt} &lt;fname&gt;.octave &lt;fname&gt;.{im_fmt}\n    Wraps:\n    -  'octave' -&gt; octave\n\nPic2Plot\n\n    sudo apt-get install plotutils\n    https://www.gnu.org/software/plotutils\n    notes:\n    - graphic data is printed to stdout\n    - so 'stdout' in im_out option is silently ignored\n    \n    Runs pic2plot -T png {im_opt} &lt;fname&gt;.pic2plot\n    Wraps:\n    -  'pic2plot' -&gt; pic2plot\n    -  'pic' -&gt; pic2plot\n\nPlantUml\n\n    sudo apt-get install plantuml\n    http://plantuml.com\n    \n    Runs plantuml -t{im_fmt} &lt;fname&gt;.plantuml {im_opt}\n    Wraps:\n    -  'plantuml' -&gt; plantuml\n\nPlot\n\n    sudo apt-get install plotutils\n    https://www.gnu.org/software/plotutils\n    notes:\n    - graphic data is printed to stdout\n    - so 'stdout' in im_out option is silently ignored\n    \n    Runs plot -T {im_fmt} {im_opt} &lt;code-text-as-filename&gt;\n    Wraps:\n    -  'plot' -&gt; plot\n\nPloticus\n\n    sudo apt-get install ploticus\n    http://ploticus.sourceforge.net/doc/welcome.html\n    \n    Runs ploticus -{im_fmt} -o &lt;fname&gt;.{im_fmt} {im_opt} &lt;fname&gt;.ploticus\n    Wraps:\n    -  'ploticus' -&gt; ploticus\n\nProtocol\n\n    cd ~/installs/git-repos\n    git clone https://github.com/luismartingarcia/protocol.git\n    python setup install\n    https://github.com/luismartingarcia/protocol.git\n    \n    Runs protocol {im_opt} code-text\n    Wraps:\n    -  'protocol' -&gt; protocol\n\nPyxPlot\n\n    sudo apt-get install pyxplot\n    http://pyxplot.org.uk\n    \n    Runs pyxplot {im_opt} &lt;fname&gt;.pyxplot\n    Wraps:\n    -  'pyxplot' -&gt; pyxplot\n\nSheBang\n\n    http://www.google.com/search?q=shebang+line\n    \n    Runs &lt;fname&gt;.shebang {im_opt} &lt;fname&gt;.{im_fmt}\n    Wraps:\n    -  'shebang' -&gt; shebang\n\n</code></pre>\n\n          </div>"}, "last_serial": 6244307, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "2d7c23cea36e817de5ec3a2c743df042", "sha256": "60dba7318baecdb9ff73d9a6b1eeaa9a9ddc80d9a8bfc3695a221e6c2ed1fa4e"}, "downloads": -1, "filename": "pandoc-imagine-0.1.1.tar.gz", "has_sig": false, "md5_digest": "2d7c23cea36e817de5ec3a2c743df042", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16523, "upload_time": "2017-05-02T19:48:37", "upload_time_iso_8601": "2017-05-02T19:48:37.002078Z", "url": "https://files.pythonhosted.org/packages/29/17/3a71cb915fce524d9157215cc56f2980c69901cadb01b23ad6ae9fe9cd31/pandoc-imagine-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "a39d7cbaf1a9d3e29163ead30bf763f7", "sha256": "f93e541686500a67d5499fe9900a4941c7d0176abfe0af1f754f68fb7905a014"}, "downloads": -1, "filename": "pandoc-imagine-0.1.2.tar.gz", "has_sig": false, "md5_digest": "a39d7cbaf1a9d3e29163ead30bf763f7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16530, "upload_time": "2017-05-02T20:15:23", "upload_time_iso_8601": "2017-05-02T20:15:23.003098Z", "url": "https://files.pythonhosted.org/packages/14/ea/db819d9687a78d4f53fb5bc23f21a454d7758ad2b8efc1b6d561a857aed3/pandoc-imagine-0.1.2.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "c7325c81839f004c212ad29b7b9ba452", "sha256": "abb813438cb2d9ea6f4ce9f3feff2384adfd5ad00600f362cd61874a7353c891"}, "downloads": -1, "filename": "pandoc-imagine-0.1.4.tar.gz", "has_sig": false, "md5_digest": "c7325c81839f004c212ad29b7b9ba452", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17266, "upload_time": "2017-05-05T20:57:59", "upload_time_iso_8601": "2017-05-05T20:57:59.064661Z", "url": "https://files.pythonhosted.org/packages/8e/bd/4f1808f04e0745b66a54e87f82a48c46778803e82366fa95f89f3d3a80ca/pandoc-imagine-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "0f745b6af79c2961cd165f73b0911d1e", "sha256": "0e99fea5e2ee7ff756e482ba6bf04b37ff4366e4f4ed8d8d1b54c8a75cd5870d"}, "downloads": -1, "filename": "pandoc-imagine-0.1.5.tar.gz", "has_sig": false, "md5_digest": "0f745b6af79c2961cd165f73b0911d1e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17219, "upload_time": "2017-05-14T22:09:29", "upload_time_iso_8601": "2017-05-14T22:09:29.197406Z", "url": "https://files.pythonhosted.org/packages/f5/f7/5df8af03bd1b533edd62915b0b6b81c74a247e5c5feb25a110ff8e3fc1d6/pandoc-imagine-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "0729b2012a37dd44904750b4e1b91e35", "sha256": "b1dda8372482fe856f3d73d3173e71808e90f38acfc7cb781654478d6045b5bd"}, "downloads": -1, "filename": "pandoc-imagine-0.1.6.tar.gz", "has_sig": false, "md5_digest": "0729b2012a37dd44904750b4e1b91e35", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16770, "upload_time": "2019-12-04T23:27:21", "upload_time_iso_8601": "2019-12-04T23:27:21.587035Z", "url": "https://files.pythonhosted.org/packages/7f/30/89d438d7bdce2e4acd3bc692514578289218bf90ca80abe8494ef72b9749/pandoc-imagine-0.1.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0729b2012a37dd44904750b4e1b91e35", "sha256": "b1dda8372482fe856f3d73d3173e71808e90f38acfc7cb781654478d6045b5bd"}, "downloads": -1, "filename": "pandoc-imagine-0.1.6.tar.gz", "has_sig": false, "md5_digest": "0729b2012a37dd44904750b4e1b91e35", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16770, "upload_time": "2019-12-04T23:27:21", "upload_time_iso_8601": "2019-12-04T23:27:21.587035Z", "url": "https://files.pythonhosted.org/packages/7f/30/89d438d7bdce2e4acd3bc692514578289218bf90ca80abe8494ef72b9749/pandoc-imagine-0.1.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:59:23 2020"}