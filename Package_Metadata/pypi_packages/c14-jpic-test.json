{"info": {"author": "Yanis Guenane", "author_email": "yanis@guenane.org", "bugtrack_url": null, "classifiers": ["Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: Information Technology", "License :: OSI Approved :: Apache Software License", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 2.7"], "description": "C14 Python Wrapper\n==================\n\nThis module is a python wrapper around the Online.net `C14`_ storage solution.\n\nThis module implements every publicly made available by Online.net API calls.\n\n.. _C14: https://www.online.net/en/c14\n\n\nUsage\n-----\n\n.. code-block::\n\n  from c14 import C14\n\n  token = 'thisismyprivatetoken'\n\n  c14api = C14(token)\n\n  # Create a safe\n  c14api.create_safe('My Safe', 'This is the description of my safe')\n\n  # List all safes\n  c14api.list_safes()\n\n\nList of available methods\n-------------------------\n\n``def list_platforms(self)``: Get a list of links to the platforms.\n\n``def get_platform(self, id)``: Get information on a platform.\n\n- ``id``: ID of the platform.\n\n``def list_protocols(self)`` Get a list of available file transfer protocols.\n\n``def create_safe(self, name, description=None)``: Create a safe.\n\n- ``name``: Name of the safe.\n- ``description``: Description of the safe.\n\n``def get_safe(self, uuid)``: Get information on a safe.\n\n- ``uuid``: Id of the safe.\n\n``def update_safe(self, uuid, name=None, description=None)``: Edit a safe.\n\n- ``uuid``: Id of the safe.\n- ``name``: Name of the safe.\n- ``description``: Description of the safe.\n\n``def list_safes(self)``: Get a list of links to the user's safes.\"\"\"\n\n``def delete_safe(self, uuid)``: Delete a safe.\n\n- ``uuid``: Id of the safe.\n\n``def create_archive(self, safe_id, name, description, protocols, platforms, parity=None, ssh_keys=None, days=None)``: Create an archive.\n\n- ``safe_id``: Id of the safe.\n- ``name``: Name of the archive.\n- ``description``: Description of the archive.\n- ``protocols``: File transfer protocols used.\n- ``platforms``: Ids of platforms where the archive will be stored.\n- ``parity``: Parity (standard, or enterprise; default: standard).\n- ``ssh_keys``: UUIDs of SSH keys.\n- ``days``: Number of days until the files are archived automatically (2, 5, or 7; default: 7).\n\n\n``def get_archive(self, safe_id, uuid)``: Get information on an Archive.\n\n-  ``safe_id``: Id of the safe.\n-  ``uuid``: Id of the archive.\n\n``def update_archive(self, uuid, name=None, description=None)``: Edit an archive.\n\n-  ``safe_id``: Id of the safe.\n-  ``uuid``: Id of the archive.\n-  ``name``: Name of the archive.\n-  ``description``: Description of the archive.\n\n``def list_archives(self, safe_id)``: Get a list of archives in the user's safe.\n\n-  ``safe_id``: Id of the safe.\n\n``def delete_archive(self, safe_id, uuid)``: Delete an archive.\n\n-  ``safe_id``: Id of the safe.\n-  ``uuid``: Id of the archive.\n\n``def archive_archive(self, safe_id, uuid)``: Archive files from temporary storage.\n\n-  ``safe_id``: Id of the safe.\n-  ``uuid``: Id of the archive.\n\n``def archive_informations(self, safe_id, uuid)``: Get information on an archive's temporary storage.\n\n-  ``safe_id``: Id of the safe.\n-  ``uuid``: Id of the archive.\n\n``def archive_list_jobs(self, safe_id, uuid)``: Get list of archive jobs.\n\n-  ``safe_id``: Id of the safe.\n-  ``uuid: Id`` of the archive.\n\n``def archive_get_job(self, safe_id, uuid, job_id)``: Get informations of a job.\n\n-  ``safe_id``: Id of the safe.\n-  ``uuid: Id`` of the archive.\n-  ``job_id``: Id of the job.\n\n``def archive_get_encryption_key(self, safe_id, uuid)``: Get an archive's encryption key.\n\n-  ``safe_id``: Id of the safe.\n-  ``uuid``: Id of the archive.\n\n``def archive_set_encryption_key(self, safe_id, uuid, key)``: Set an archive's encryption key.\n\n-  ``safe_id``: Id of the safe.\n-  ``uuid``: Id of the archive.\n-  ``key``: Encryption key.\n\n``def archive_delete_encryption_key(self, safe_id, uuid)``: Delete an archive's encryption key.\n\n-  ``safe_id``: Id of the safe.\n-  ``uuid``: Id of the archive.\n\n``def archive_list_locations(self, safe_id, uuid)``: Get a list of locations on the user's archive.\n\n-  ``safe_id``: Id of the safe.\n-  ``uuid``: Id of the archive.\n\n``def archive_get_location(self, safe_id, uuid, location_id)``: Get information on an archive location.\n\n-  ``safe_id``: Id of the safe.\n-  ``uuid``: Id of the archive.\n\n``def verify_archive(self, safe_id, uuid, location_id)``: Verify the files on an archive's location.\n\n-  ``safe_id``: Id of the safe.\n-  ``uuid``: Id of the archive.\n-  ``location_id``: Id of the location.\n\n``def unarchive(self, safe_id, uuid, location_id, protocols, rearchive=None, key=None, ssh_keys=None)``: Unarchive files into temporary storage.\n\n-  ``safe_id``: Id of the safe.\n-  ``uuid``: Id of the archive.\n-  ``location_id``: Id of the location.\n-  ``protocols``: File transfer protocols used.\n-  ``rearchive``: Rearchive the data after 7 days (default: true).\n-  ``key``: Encryption key.\n-  ``ssh_keys``: UUIDs of SSH keys.", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Spredzy/python-c14", "keywords": "", "license": "Apache 2.0", "maintainer": "", "maintainer_email": "", "name": "c14-jpic-test", "package_url": "https://pypi.org/project/c14-jpic-test/", "platform": "", "project_url": "https://pypi.org/project/c14-jpic-test/", "project_urls": {"Homepage": "https://github.com/Spredzy/python-c14"}, "release_url": "https://pypi.org/project/c14-jpic-test/0.0.2/", "requires_dist": null, "requires_python": "", "summary": "C14 Python Wrapper", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This module is a python wrapper around the Online.net <a href=\"https://www.online.net/en/c14\" rel=\"nofollow\">C14</a> storage solution.</p>\n<p>This module implements every publicly made available by Online.net API calls.</p>\n<div id=\"usage\">\n<h2>Usage</h2>\n<pre>from c14 import C14\n\ntoken = 'thisismyprivatetoken'\n\nc14api = C14(token)\n\n# Create a safe\nc14api.create_safe('My Safe', 'This is the description of my safe')\n\n# List all safes\nc14api.list_safes()\n</pre>\n</div>\n<div id=\"list-of-available-methods\">\n<h2>List of available methods</h2>\n<p><tt>def list_platforms(self)</tt>: Get a list of links to the platforms.</p>\n<p><tt>def get_platform(self, id)</tt>: Get information on a platform.</p>\n<ul>\n<li><tt>id</tt>: ID of the platform.</li>\n</ul>\n<p><tt>def list_protocols(self)</tt> Get a list of available file transfer protocols.</p>\n<p><tt>def create_safe(self, name, description=None)</tt>: Create a safe.</p>\n<ul>\n<li><tt>name</tt>: Name of the safe.</li>\n<li><tt>description</tt>: Description of the safe.</li>\n</ul>\n<p><tt>def get_safe(self, uuid)</tt>: Get information on a safe.</p>\n<ul>\n<li><tt>uuid</tt>: Id of the safe.</li>\n</ul>\n<p><tt>def update_safe(self, uuid, name=None, description=None)</tt>: Edit a safe.</p>\n<ul>\n<li><tt>uuid</tt>: Id of the safe.</li>\n<li><tt>name</tt>: Name of the safe.</li>\n<li><tt>description</tt>: Description of the safe.</li>\n</ul>\n<p><tt>def list_safes(self)</tt>: Get a list of links to the user\u2019s safes.\u201d\u201d\u201d</p>\n<p><tt>def delete_safe(self, uuid)</tt>: Delete a safe.</p>\n<ul>\n<li><tt>uuid</tt>: Id of the safe.</li>\n</ul>\n<p><tt>def create_archive(self, safe_id, name, description, protocols, platforms, parity=None, ssh_keys=None, days=None)</tt>: Create an archive.</p>\n<ul>\n<li><tt>safe_id</tt>: Id of the safe.</li>\n<li><tt>name</tt>: Name of the archive.</li>\n<li><tt>description</tt>: Description of the archive.</li>\n<li><tt>protocols</tt>: File transfer protocols used.</li>\n<li><tt>platforms</tt>: Ids of platforms where the archive will be stored.</li>\n<li><tt>parity</tt>: Parity (standard, or enterprise; default: standard).</li>\n<li><tt>ssh_keys</tt>: UUIDs of SSH keys.</li>\n<li><tt>days</tt>: Number of days until the files are archived automatically (2, 5, or 7; default: 7).</li>\n</ul>\n<p><tt>def get_archive(self, safe_id, uuid)</tt>: Get information on an Archive.</p>\n<ul>\n<li><tt>safe_id</tt>: Id of the safe.</li>\n<li><tt>uuid</tt>: Id of the archive.</li>\n</ul>\n<p><tt>def update_archive(self, uuid, name=None, description=None)</tt>: Edit an archive.</p>\n<ul>\n<li><tt>safe_id</tt>: Id of the safe.</li>\n<li><tt>uuid</tt>: Id of the archive.</li>\n<li><tt>name</tt>: Name of the archive.</li>\n<li><tt>description</tt>: Description of the archive.</li>\n</ul>\n<p><tt>def list_archives(self, safe_id)</tt>: Get a list of archives in the user\u2019s safe.</p>\n<ul>\n<li><tt>safe_id</tt>: Id of the safe.</li>\n</ul>\n<p><tt>def delete_archive(self, safe_id, uuid)</tt>: Delete an archive.</p>\n<ul>\n<li><tt>safe_id</tt>: Id of the safe.</li>\n<li><tt>uuid</tt>: Id of the archive.</li>\n</ul>\n<p><tt>def archive_archive(self, safe_id, uuid)</tt>: Archive files from temporary storage.</p>\n<ul>\n<li><tt>safe_id</tt>: Id of the safe.</li>\n<li><tt>uuid</tt>: Id of the archive.</li>\n</ul>\n<p><tt>def archive_informations(self, safe_id, uuid)</tt>: Get information on an archive\u2019s temporary storage.</p>\n<ul>\n<li><tt>safe_id</tt>: Id of the safe.</li>\n<li><tt>uuid</tt>: Id of the archive.</li>\n</ul>\n<p><tt>def archive_list_jobs(self, safe_id, uuid)</tt>: Get list of archive jobs.</p>\n<ul>\n<li><tt>safe_id</tt>: Id of the safe.</li>\n<li><tt>uuid: Id</tt> of the archive.</li>\n</ul>\n<p><tt>def archive_get_job(self, safe_id, uuid, job_id)</tt>: Get informations of a job.</p>\n<ul>\n<li><tt>safe_id</tt>: Id of the safe.</li>\n<li><tt>uuid: Id</tt> of the archive.</li>\n<li><tt>job_id</tt>: Id of the job.</li>\n</ul>\n<p><tt>def archive_get_encryption_key(self, safe_id, uuid)</tt>: Get an archive\u2019s encryption key.</p>\n<ul>\n<li><tt>safe_id</tt>: Id of the safe.</li>\n<li><tt>uuid</tt>: Id of the archive.</li>\n</ul>\n<p><tt>def archive_set_encryption_key(self, safe_id, uuid, key)</tt>: Set an archive\u2019s encryption key.</p>\n<ul>\n<li><tt>safe_id</tt>: Id of the safe.</li>\n<li><tt>uuid</tt>: Id of the archive.</li>\n<li><tt>key</tt>: Encryption key.</li>\n</ul>\n<p><tt>def archive_delete_encryption_key(self, safe_id, uuid)</tt>: Delete an archive\u2019s encryption key.</p>\n<ul>\n<li><tt>safe_id</tt>: Id of the safe.</li>\n<li><tt>uuid</tt>: Id of the archive.</li>\n</ul>\n<p><tt>def archive_list_locations(self, safe_id, uuid)</tt>: Get a list of locations on the user\u2019s archive.</p>\n<ul>\n<li><tt>safe_id</tt>: Id of the safe.</li>\n<li><tt>uuid</tt>: Id of the archive.</li>\n</ul>\n<p><tt>def archive_get_location(self, safe_id, uuid, location_id)</tt>: Get information on an archive location.</p>\n<ul>\n<li><tt>safe_id</tt>: Id of the safe.</li>\n<li><tt>uuid</tt>: Id of the archive.</li>\n</ul>\n<p><tt>def verify_archive(self, safe_id, uuid, location_id)</tt>: Verify the files on an archive\u2019s location.</p>\n<ul>\n<li><tt>safe_id</tt>: Id of the safe.</li>\n<li><tt>uuid</tt>: Id of the archive.</li>\n<li><tt>location_id</tt>: Id of the location.</li>\n</ul>\n<p><tt>def unarchive(self, safe_id, uuid, location_id, protocols, rearchive=None, key=None, ssh_keys=None)</tt>: Unarchive files into temporary storage.</p>\n<ul>\n<li><tt>safe_id</tt>: Id of the safe.</li>\n<li><tt>uuid</tt>: Id of the archive.</li>\n<li><tt>location_id</tt>: Id of the location.</li>\n<li><tt>protocols</tt>: File transfer protocols used.</li>\n<li><tt>rearchive</tt>: Rearchive the data after 7 days (default: true).</li>\n<li><tt>key</tt>: Encryption key.</li>\n<li><tt>ssh_keys</tt>: UUIDs of SSH keys.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 4686580, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "0937c09c247caf33913349ab1f975b47", "sha256": "c7d05e804d95917f137a1b35107e4cfdf5044a275498d756dce8c2836ce9d44d"}, "downloads": -1, "filename": "c14-jpic-test-0.0.2.tar.gz", "has_sig": false, "md5_digest": "0937c09c247caf33913349ab1f975b47", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4371, "upload_time": "2019-01-11T18:44:34", "upload_time_iso_8601": "2019-01-11T18:44:34.540035Z", "url": "https://files.pythonhosted.org/packages/c9/b5/9109979be99923ac7b40dc611015830fac1a0852b0dec02fde08ed467a36/c14-jpic-test-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0937c09c247caf33913349ab1f975b47", "sha256": "c7d05e804d95917f137a1b35107e4cfdf5044a275498d756dce8c2836ce9d44d"}, "downloads": -1, "filename": "c14-jpic-test-0.0.2.tar.gz", "has_sig": false, "md5_digest": "0937c09c247caf33913349ab1f975b47", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4371, "upload_time": "2019-01-11T18:44:34", "upload_time_iso_8601": "2019-01-11T18:44:34.540035Z", "url": "https://files.pythonhosted.org/packages/c9/b5/9109979be99923ac7b40dc611015830fac1a0852b0dec02fde08ed467a36/c14-jpic-test-0.0.2.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:35:49 2020"}