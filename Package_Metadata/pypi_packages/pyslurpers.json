{"info": {"author": "Sergey Yanzin", "author_email": "yanzinsg@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "## Python slurpers for XML, JSON, configs (or .ini) and so on\n\n> Inspired by Groovy's XmlSlurper\n\nSlurper is a object that encapsulates access to structured document file using its dynamic fields as file tags.\n\n### JSON example:\n\nJson document:\n\n```json\n{\n\t\"name\": \"Joan\",\n\t\"surname\": \"Baez\",\n\t\"born\": 1941,\n\t\"albums\": [\n\t\t{\n\t\t\t\"name\": \"Folksingers 'Round Harvard Square\",\n\t\t\t\"year\": 1959,\n\t\t\t\"number-of-tracks\": 18\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Joan Baez\",\n\t\t\t\"year\": 1960,\n\t\t\t\"number-of-tracks\": 16\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Joan Baez, Vol. 2\",\n\t\t\t\"year\": 1961,\n\t\t\t\"number-of-tracks\": 17\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Joan Baez/5\",\n\t\t\t\"year\": 1964,\n\t\t\t\"number-of-tracks\": 14\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Farewell, Angelina\",\n\t\t\t\"year\": 1965,\n\t\t\t\"number-of-tracks\": 14\n\t\t}\n\t]\n}\n```\n\ncode:\n\n```python\njson = JsonSlurper.create(file_name = \"testdata/baez.json\", illegal_chars = Constants.STRIP_CAPITALIZE)\nself.assertEqual(\"Joan\", json.name)\nself.assertEqual(\"Baez\", json.surname)\nself.assertEqual(1941, json.born)\nself.assertEqual(5, len(json.albums))\nself.assertEqual(\"Farewell, Angelina\", json.albums[4].name)\nself.assertEqual(14, json.albums[4].numberOfTracks)\n```\n\n### Config example:\n\nSample config file:\n\n```ini\n[Database]\nhost: mysql.google.com\ndatabase: search_index\n\n[Security]\nauth provider: google\n\n# and so on...\n```\n\ncode:\n\n```python\nconfig = ConfigSlurper.create(file_name = \"testdata/google.config\", illegal_chars = Constants.REPLACE_WITH_UNDERSCORES)\nself.assertEqual(\"mysql.google.com\", config.Database.host)\nself.assertEqual(\"google\", config.Security.auth_provider)\n```\n\n### XML example:\n\nXml document (see in `testdata/test1.xml`):\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<beatles>\n  <man>\n    <name>John</name>\n    <name>Winston</name>\n    <surname>Lennon</surname>\n    <born>\n        <place>Liverpool</place>\n        <year>1940</year>\n    </born>\n  </man>\n  <man>\n    <name>James</name>\n    <name>Paul</name>\n    <surname>McCartney</surname>\n    <born>\n        <place>Liverpool</place>\n        <year>1942</year>\n    </born>\n  </man>\n  <man>\n    <name>Ringo</name>\n    <surname>Starr</surname>\n    <born>\n        <place>Liverpool</place>\n        <year>1940</year>\n    </born>\n  </man>\n  <man>\n    <name>George</name>\n    <surname>Harrison</surname>\n    <born>\n        <place>Liverpool</place>\n        <year>1943</year>\n    </born>\n  </man>\n</beatles>\n```\n\nPython code:\n```python\nxml = XmlSlurper.create('testdata/test1.xml')\nfor man in xml.man:\n    print('{} {} born at {} in {}'.format(' '.join(man.name), man.surname, man.born.year, man.born.place))\n```\n\nOutput:\n```\nJohn Winston Lennon born at 1940 in Liverpool\nJames Paul McCartney born at 1942 in Liverpool\nR i n g o Starr born at 1940 in Liverpool\nG e o r g e Harrison born at 1943 in Liverpool\n```\nStarr and Harrison don't have second name, so `man.name` for them is a single string, so `' '.join()` concatenates each char in it.\n\nLennon and McCartney are *doublenamed*, so `man.name` for them is list.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/xuthus/pyslurpers", "keywords": "pyslurpers xml json config cfg ini parse processing", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "pyslurpers", "package_url": "https://pypi.org/project/pyslurpers/", "platform": "any", "project_url": "https://pypi.org/project/pyslurpers/", "project_urls": {"Homepage": "https://github.com/xuthus/pyslurpers"}, "release_url": "https://pypi.org/project/pyslurpers/0.1.0/", "requires_dist": ["configparser"], "requires_python": ">=3.4", "summary": "Python slurpers package for simple XML, JSON, config, etc. processing", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>Python slurpers for XML, JSON, configs (or .ini) and so on</h2>\n<blockquote>\n<p>Inspired by Groovy's XmlSlurper</p>\n</blockquote>\n<p>Slurper is a object that encapsulates access to structured document file using its dynamic fields as file tags.</p>\n<h3>JSON example:</h3>\n<p>Json document:</p>\n<pre><span class=\"p\">{</span>\n\t<span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Joan\"</span><span class=\"p\">,</span>\n\t<span class=\"nt\">\"surname\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Baez\"</span><span class=\"p\">,</span>\n\t<span class=\"nt\">\"born\"</span><span class=\"p\">:</span> <span class=\"mi\">1941</span><span class=\"p\">,</span>\n\t<span class=\"nt\">\"albums\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n\t\t<span class=\"p\">{</span>\n\t\t\t<span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Folksingers 'Round Harvard Square\"</span><span class=\"p\">,</span>\n\t\t\t<span class=\"nt\">\"year\"</span><span class=\"p\">:</span> <span class=\"mi\">1959</span><span class=\"p\">,</span>\n\t\t\t<span class=\"nt\">\"number-of-tracks\"</span><span class=\"p\">:</span> <span class=\"mi\">18</span>\n\t\t<span class=\"p\">},</span>\n\t\t<span class=\"p\">{</span>\n\t\t\t<span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Joan Baez\"</span><span class=\"p\">,</span>\n\t\t\t<span class=\"nt\">\"year\"</span><span class=\"p\">:</span> <span class=\"mi\">1960</span><span class=\"p\">,</span>\n\t\t\t<span class=\"nt\">\"number-of-tracks\"</span><span class=\"p\">:</span> <span class=\"mi\">16</span>\n\t\t<span class=\"p\">},</span>\n\t\t<span class=\"p\">{</span>\n\t\t\t<span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Joan Baez, Vol. 2\"</span><span class=\"p\">,</span>\n\t\t\t<span class=\"nt\">\"year\"</span><span class=\"p\">:</span> <span class=\"mi\">1961</span><span class=\"p\">,</span>\n\t\t\t<span class=\"nt\">\"number-of-tracks\"</span><span class=\"p\">:</span> <span class=\"mi\">17</span>\n\t\t<span class=\"p\">},</span>\n\t\t<span class=\"p\">{</span>\n\t\t\t<span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Joan Baez/5\"</span><span class=\"p\">,</span>\n\t\t\t<span class=\"nt\">\"year\"</span><span class=\"p\">:</span> <span class=\"mi\">1964</span><span class=\"p\">,</span>\n\t\t\t<span class=\"nt\">\"number-of-tracks\"</span><span class=\"p\">:</span> <span class=\"mi\">14</span>\n\t\t<span class=\"p\">},</span>\n\t\t<span class=\"p\">{</span>\n\t\t\t<span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Farewell, Angelina\"</span><span class=\"p\">,</span>\n\t\t\t<span class=\"nt\">\"year\"</span><span class=\"p\">:</span> <span class=\"mi\">1965</span><span class=\"p\">,</span>\n\t\t\t<span class=\"nt\">\"number-of-tracks\"</span><span class=\"p\">:</span> <span class=\"mi\">14</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</pre>\n<p>code:</p>\n<pre><span class=\"n\">json</span> <span class=\"o\">=</span> <span class=\"n\">JsonSlurper</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">file_name</span> <span class=\"o\">=</span> <span class=\"s2\">\"testdata/baez.json\"</span><span class=\"p\">,</span> <span class=\"n\">illegal_chars</span> <span class=\"o\">=</span> <span class=\"n\">Constants</span><span class=\"o\">.</span><span class=\"n\">STRIP_CAPITALIZE</span><span class=\"p\">)</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"s2\">\"Joan\"</span><span class=\"p\">,</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"s2\">\"Baez\"</span><span class=\"p\">,</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">surname</span><span class=\"p\">)</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"mi\">1941</span><span class=\"p\">,</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">born</span><span class=\"p\">)</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">albums</span><span class=\"p\">))</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"s2\">\"Farewell, Angelina\"</span><span class=\"p\">,</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">albums</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">albums</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">numberOfTracks</span><span class=\"p\">)</span>\n</pre>\n<h3>Config example:</h3>\n<p>Sample config file:</p>\n<pre><span class=\"k\">[Database]</span>\n<span class=\"na\">host: mysql.google.com</span>\n<span class=\"na\">database: search_index</span>\n\n<span class=\"k\">[Security]</span>\n<span class=\"na\">auth provider: google</span>\n\n<span class=\"c1\"># and so on...</span>\n</pre>\n<p>code:</p>\n<pre><span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">ConfigSlurper</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">file_name</span> <span class=\"o\">=</span> <span class=\"s2\">\"testdata/google.config\"</span><span class=\"p\">,</span> <span class=\"n\">illegal_chars</span> <span class=\"o\">=</span> <span class=\"n\">Constants</span><span class=\"o\">.</span><span class=\"n\">REPLACE_WITH_UNDERSCORES</span><span class=\"p\">)</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"s2\">\"mysql.google.com\"</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">Database</span><span class=\"o\">.</span><span class=\"n\">host</span><span class=\"p\">)</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"s2\">\"google\"</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">Security</span><span class=\"o\">.</span><span class=\"n\">auth_provider</span><span class=\"p\">)</span>\n</pre>\n<h3>XML example:</h3>\n<p>Xml document (see in <code>testdata/test1.xml</code>):</p>\n<pre><span class=\"cp\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span>\n<span class=\"nt\">&lt;beatles&gt;</span>\n  <span class=\"nt\">&lt;man&gt;</span>\n    <span class=\"nt\">&lt;name&gt;</span>John<span class=\"nt\">&lt;/name&gt;</span>\n    <span class=\"nt\">&lt;name&gt;</span>Winston<span class=\"nt\">&lt;/name&gt;</span>\n    <span class=\"nt\">&lt;surname&gt;</span>Lennon<span class=\"nt\">&lt;/surname&gt;</span>\n    <span class=\"nt\">&lt;born&gt;</span>\n        <span class=\"nt\">&lt;place&gt;</span>Liverpool<span class=\"nt\">&lt;/place&gt;</span>\n        <span class=\"nt\">&lt;year&gt;</span>1940<span class=\"nt\">&lt;/year&gt;</span>\n    <span class=\"nt\">&lt;/born&gt;</span>\n  <span class=\"nt\">&lt;/man&gt;</span>\n  <span class=\"nt\">&lt;man&gt;</span>\n    <span class=\"nt\">&lt;name&gt;</span>James<span class=\"nt\">&lt;/name&gt;</span>\n    <span class=\"nt\">&lt;name&gt;</span>Paul<span class=\"nt\">&lt;/name&gt;</span>\n    <span class=\"nt\">&lt;surname&gt;</span>McCartney<span class=\"nt\">&lt;/surname&gt;</span>\n    <span class=\"nt\">&lt;born&gt;</span>\n        <span class=\"nt\">&lt;place&gt;</span>Liverpool<span class=\"nt\">&lt;/place&gt;</span>\n        <span class=\"nt\">&lt;year&gt;</span>1942<span class=\"nt\">&lt;/year&gt;</span>\n    <span class=\"nt\">&lt;/born&gt;</span>\n  <span class=\"nt\">&lt;/man&gt;</span>\n  <span class=\"nt\">&lt;man&gt;</span>\n    <span class=\"nt\">&lt;name&gt;</span>Ringo<span class=\"nt\">&lt;/name&gt;</span>\n    <span class=\"nt\">&lt;surname&gt;</span>Starr<span class=\"nt\">&lt;/surname&gt;</span>\n    <span class=\"nt\">&lt;born&gt;</span>\n        <span class=\"nt\">&lt;place&gt;</span>Liverpool<span class=\"nt\">&lt;/place&gt;</span>\n        <span class=\"nt\">&lt;year&gt;</span>1940<span class=\"nt\">&lt;/year&gt;</span>\n    <span class=\"nt\">&lt;/born&gt;</span>\n  <span class=\"nt\">&lt;/man&gt;</span>\n  <span class=\"nt\">&lt;man&gt;</span>\n    <span class=\"nt\">&lt;name&gt;</span>George<span class=\"nt\">&lt;/name&gt;</span>\n    <span class=\"nt\">&lt;surname&gt;</span>Harrison<span class=\"nt\">&lt;/surname&gt;</span>\n    <span class=\"nt\">&lt;born&gt;</span>\n        <span class=\"nt\">&lt;place&gt;</span>Liverpool<span class=\"nt\">&lt;/place&gt;</span>\n        <span class=\"nt\">&lt;year&gt;</span>1943<span class=\"nt\">&lt;/year&gt;</span>\n    <span class=\"nt\">&lt;/born&gt;</span>\n  <span class=\"nt\">&lt;/man&gt;</span>\n<span class=\"nt\">&lt;/beatles&gt;</span>\n</pre>\n<p>Python code:</p>\n<pre><span class=\"n\">xml</span> <span class=\"o\">=</span> <span class=\"n\">XmlSlurper</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"s1\">'testdata/test1.xml'</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">man</span> <span class=\"ow\">in</span> <span class=\"n\">xml</span><span class=\"o\">.</span><span class=\"n\">man</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"si\">{}</span><span class=\"s1\"> </span><span class=\"si\">{}</span><span class=\"s1\"> born at </span><span class=\"si\">{}</span><span class=\"s1\"> in </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"s1\">' '</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">man</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">),</span> <span class=\"n\">man</span><span class=\"o\">.</span><span class=\"n\">surname</span><span class=\"p\">,</span> <span class=\"n\">man</span><span class=\"o\">.</span><span class=\"n\">born</span><span class=\"o\">.</span><span class=\"n\">year</span><span class=\"p\">,</span> <span class=\"n\">man</span><span class=\"o\">.</span><span class=\"n\">born</span><span class=\"o\">.</span><span class=\"n\">place</span><span class=\"p\">))</span>\n</pre>\n<p>Output:</p>\n<pre><code>John Winston Lennon born at 1940 in Liverpool\nJames Paul McCartney born at 1942 in Liverpool\nR i n g o Starr born at 1940 in Liverpool\nG e o r g e Harrison born at 1943 in Liverpool\n</code></pre>\n<p>Starr and Harrison don't have second name, so <code>man.name</code> for them is a single string, so <code>' '.join()</code> concatenates each char in it.</p>\n<p>Lennon and McCartney are <em>doublenamed</em>, so <code>man.name</code> for them is list.</p>\n\n          </div>"}, "last_serial": 6398909, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "b3824a90c6d01d805fa8c833e0207ca0", "sha256": "f436d5603becf80c794d122e8051cedc5423cd3fff26c75485a4f51da1217012"}, "downloads": -1, "filename": "pyslurpers-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b3824a90c6d01d805fa8c833e0207ca0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 12984, "upload_time": "2020-01-05T17:23:54", "upload_time_iso_8601": "2020-01-05T17:23:54.154788Z", "url": "https://files.pythonhosted.org/packages/d4/9a/c02a68b00b47d425ddba1e3d663ad1ddf75856b8b4a2373d805b97516a1c/pyslurpers-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4c29ea64983290a6db5dacc2f6cabd34", "sha256": "331cf01f540b03c08dd5084b4f95401cf0db642ccf7e8131dcf5d36cb6e7a264"}, "downloads": -1, "filename": "pyslurpers-0.1.0.tar.gz", "has_sig": false, "md5_digest": "4c29ea64983290a6db5dacc2f6cabd34", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 8552, "upload_time": "2020-01-05T17:23:56", "upload_time_iso_8601": "2020-01-05T17:23:56.689745Z", "url": "https://files.pythonhosted.org/packages/98/69/1b3433a4f266429b689d8122288a7ea7b033036f572ca02b4ad2d8d5412e/pyslurpers-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b3824a90c6d01d805fa8c833e0207ca0", "sha256": "f436d5603becf80c794d122e8051cedc5423cd3fff26c75485a4f51da1217012"}, "downloads": -1, "filename": "pyslurpers-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b3824a90c6d01d805fa8c833e0207ca0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 12984, "upload_time": "2020-01-05T17:23:54", "upload_time_iso_8601": "2020-01-05T17:23:54.154788Z", "url": "https://files.pythonhosted.org/packages/d4/9a/c02a68b00b47d425ddba1e3d663ad1ddf75856b8b4a2373d805b97516a1c/pyslurpers-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4c29ea64983290a6db5dacc2f6cabd34", "sha256": "331cf01f540b03c08dd5084b4f95401cf0db642ccf7e8131dcf5d36cb6e7a264"}, "downloads": -1, "filename": "pyslurpers-0.1.0.tar.gz", "has_sig": false, "md5_digest": "4c29ea64983290a6db5dacc2f6cabd34", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 8552, "upload_time": "2020-01-05T17:23:56", "upload_time_iso_8601": "2020-01-05T17:23:56.689745Z", "url": "https://files.pythonhosted.org/packages/98/69/1b3433a4f266429b689d8122288a7ea7b033036f572ca02b4ad2d8d5412e/pyslurpers-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:56:35 2020"}