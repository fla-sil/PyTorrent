{"info": {"author": "A. Roebel", "author_email": "axel.dot.roebel@ircam.dot.fr", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "License :: OSI Approved :: GNU General Public License (GPL)", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "py_find_1st\n===========\n\npy_find_1st is a numpy extension that allows to find the first index\ninto an 1D-array that validates a boolean condition that can consist of\na comparison operator and a limit value.\n\nFunctionality\n-------------\n\nThis extension solves the very frequent problem of finding first indices\nwithout requiring to read the full array.\n\nThe call sequence\n\n::\n\n   import numpy as np\n   import utils_find_1st as utf1st\n\n   limit = 0.\n   rr= np.random.randn(100)\n   ind = utf1st.find_1st(rr < limit, True, utf1st.cmp_equal)\n\nand more efficiently\n\n::\n\n   ind = utf1st.find_1st(rr, limit, utf1st.cmp_smaller)\n\nis equivalent to\n\n::\n\n   import numpy as np\n   limit = 0.\n   rr= np.random.randn(100)\n   ind = np.flatnonzero(rr < limit)\n   if len(ind) :\n       ret = ind[0]\n   else:\n       ret = -1\n\nImplementation details\n----------------------\n\npy_find_1st is written as a numpy extension making use of a templated\nimplementation of the find_1st function that currently supports\noperating on arrays of dtypes:\n\n::\n\n   [np.float64, np.float32, np.int64, np.int32, np.bool]\n\nComparison operators are selected using integer opcodes with the\nfollowing meaning:\n\n::\n\n   opcode == utils_find_1st.cmp_smaller    ->  comp op: <\n   opcode == utils_find_1st.cmp_smaller_eq ->  comp op: <=\n   opcode == utils_find_1st.cmp_equal      ->  comp op: ==\n   opcode == utils_find_1st.cmp_not_equal  ->  comp op: !=\n   opcode == utils_find_1st.cmp_larger     ->  comp op: <\n   opcode == utils_find_1st.cmp_larger_eq  ->  comp op: <=\n\nPerformance\n-----------\n\nThe runtime difference is strongly depending on the number of true cases\nin the array. If the condition is never valid runtime is the same - both\nimplementations do not produce a valid index and need to compare the\nfull array - but on case that there are matches np.flatnonzero needs to\nrun through the full array and needs to create a result array with size\nthat depends o the number of matches while find_1st only produces a\nscalar result and only needs to compare the array until the first match\nis found.\n\nDepending on the size of the array and the number of matches the speed\ndifference can be very significant (easily > factor 10)\n\ntest\n----\n\nrun test/test_find_1st.py which should display \"all tests passed!\"\n\nBenchmarking\n~~~~~~~~~~~~\n\nWe can easily compare the runtime using the three lines\n\n::\n\n   In [6]: timeit ind = np.flatnonzero(rr < limit)[0]\n   1.69 $\\mu$s $\\pm$ 24.5 ns per loop (mean $\\pm$ std. dev. of 7 runs, 1000000 loops each)\n\n   In [4]: timeit ind = utf1st.find_1st(rr < limit, True, utf1st.cmp_equal)\n   1.13 $\\mu$s $\\pm$ 18.9 ns per loop (mean $\\pm$  std. dev. of 7 runs, 1000000 loops each)\n\n   In [5]: timeit ind = utf1st.find_1st(rr, limit, utf1st.cmp_smaller)\n   270 ns $\\pm$ 5.57 ns per loop (mean $\\pm$ std. dev. of 7 runs, 1000000 loops each)\n\nWhich shows the rather significant improvement obtained by the last\nversion that does not require to perform all comparisons of the 100\nelements. In the above case the second element is tested positive. In\nthe worst case, where no valid element is present all comparisons have\nto be performed and flatnonzero does not need to create a results array,\nand therefore performance should be similar. For the small array sizes\nwe used so far the overhead of np.flanonzero is dominating the costs as\ncan be seen in the following.\n\n::\n\n   In [9]: limit = -1000.\n   In [10]: timeit ind = np.flatnonzero(rr < limit)\n   1.56 $\\mu$s $\\pm$ 13.8 ns per loop (mean $\\pm$ std. dev. of 7 runs, 1000000 loops each)\n\n   In [11]: timeit ind = utf1st.find_1st(rr<limit, True, utf1st.cmp_equal)\n   1.16 $\\mu$s $\\pm$ 7.07 ns per loop (mean $\\pm$ std. dev. of 7 runs, 1000000 loops each)\n\n   In [12]: timeit ind = utf1st.find_1st(rr, limit, utf1st.cmp_smaller)\n   314 ns $\\pm$ 3.36 ns per loop (mean $\\pm$ std. dev. of 7 runs, 1000000 loops each)\n\nFor a significantly larger array size costs become more comparable\n\n::\n\n   rr= np.random.randn(10000)\n   In [13]: timeit ind = np.flatnonzero(rr < limit)\n   4.87 $\\mu$s $\\pm$ 101 ns per loop (mean $\\pm$ std. dev. of 7 runs, 100000 loops each)\n\n   In [14]: timeit ind = utf1st.find_1st(rr<limit, True, utf1st.cmp_equal)\n   8.95 $\\mu$s $\\pm$ 497 ns per loop (mean $\\pm$ std. dev. of 7 runs, 100000 loops each)\n\n   In [15]: timeit ind = utf1st.find_1st(rr, limit, utf1st.cmp_smaller)\n   4.4 $\\mu$s $\\pm$ 47.9 ns per loop (mean $\\pm$ std. dev. of 7 runs, 100000 loops each)\n\nWhich demonstrates that even in this case the find_1st extension is more\nefficient besides if the boolean intermediate array is used in line 14.\n\nThis result is a bit astonishing as the overhead involved in passing the\nboolean intermediate array into the find_1st extension seems rather\nlarge compared to the simple boolean comparison\n\n::\n\n   In [35]: timeit ind = rr < limit\n   3.31 $\\mu$s $\\pm$ 47.3 ns per loop (mean $\\pm$ std. dev. of 7 runs, 100000 loops each)\n\nThe clarification of this remaining issue needs further investigation.\nAny comments are welcome.\n\nChanges\n-------\n\nVersion 1.1.4.rc0 (2019-08-04)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n-  added support for automatic installation of requirements\n-  add and support pre-release tags in the version number\n-  use hashlib to calculate the README checksum.\n-  support testing via ``make check``\n\nVersion 1.1.3 (2018-10-05)\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n-  Removed setting stdlib for clang in setup.py - the default should do\n   just fine.\n\nVersion 1.1.2 (2018-09-28)\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n-  Removed ez_setup.py that seems to be no longer maintained by\n   setuptools maintainers.\n\nVersion 1.1.1 (2017-09-19)\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n-  Use NPY_INT64/NPY_INT32 instead of NPY_INT/NPY_LONG such that the\n   test does not rely on the compiler specific int sizes.\n\nVersion 1.1.0 (2017-09-18)\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n-  fixed bug in cmp operator values that were not coherent on the python\n   and C++ side\n-  support arbitrary strides for one dimensional arrays\n-  Added test script\n\nVersion 1.0.7 (2017-09-18)\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n-  Changed compiler test to hopefully work for MSVC under windows.\n\nVersion 1.0.6 (2017-05-31)\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n-  Removed more non ascii elements in README.\n\nVersion 1.0.5 (2017-05-31)\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n-  Fixed non ascii elements in README that led to problems with some\n   python configurations.\n\nVersion 1.0.4 (2017-05-31)\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n-  Fixed setup.py problems: on the fly generation of LONG_DESCRPTION\n   file.\n\nVersion 1.0.3 (2017-05-31)\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n-  Moved to github\n\nVersion 1.0.2 (2017-05-31)\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n-  Force using c++ compiler\n\nVersion 1.0.1 (2017-05-31)\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n-  initial release\n\nCopyright\n---------\n\nCopyright (C) 2017 IRCAM\n\nLicense\n-------\n\nGPL see file Copying.txt\n\nAuthor\n------\n\nAxel Roebel", "description_content_type": "", "docs_url": null, "download_url": "https://github.com/roebel/py_find_1st/archive/v1.1.4.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/roebel/py_find_1st", "keywords": "numpy,extension,find", "license": "GPL", "maintainer": "", "maintainer_email": "", "name": "py-find-1st", "package_url": "https://pypi.org/project/py-find-1st/", "platform": "", "project_url": "https://pypi.org/project/py-find-1st/", "project_urls": {"Download": "https://github.com/roebel/py_find_1st/archive/v1.1.4.tar.gz", "Homepage": "http://github.com/roebel/py_find_1st"}, "release_url": "https://pypi.org/project/py-find-1st/1.1.4/", "requires_dist": null, "requires_python": "", "summary": "Numpy extension module for efficient search of first array index that compares true", "version": "1.1.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>py_find_1st is a numpy extension that allows to find the first index\ninto an 1D-array that validates a boolean condition that can consist of\na comparison operator and a limit value.</p>\n<div id=\"functionality\">\n<h2>Functionality</h2>\n<p>This extension solves the very frequent problem of finding first indices\nwithout requiring to read the full array.</p>\n<p>The call sequence</p>\n<pre>import numpy as np\nimport utils_find_1st as utf1st\n\nlimit = 0.\nrr= np.random.randn(100)\nind = utf1st.find_1st(rr &lt; limit, True, utf1st.cmp_equal)\n</pre>\n<p>and more efficiently</p>\n<pre>ind = utf1st.find_1st(rr, limit, utf1st.cmp_smaller)\n</pre>\n<p>is equivalent to</p>\n<pre>import numpy as np\nlimit = 0.\nrr= np.random.randn(100)\nind = np.flatnonzero(rr &lt; limit)\nif len(ind) :\n    ret = ind[0]\nelse:\n    ret = -1\n</pre>\n</div>\n<div id=\"implementation-details\">\n<h2>Implementation details</h2>\n<p>py_find_1st is written as a numpy extension making use of a templated\nimplementation of the find_1st function that currently supports\noperating on arrays of dtypes:</p>\n<pre>[np.float64, np.float32, np.int64, np.int32, np.bool]\n</pre>\n<p>Comparison operators are selected using integer opcodes with the\nfollowing meaning:</p>\n<pre>opcode == utils_find_1st.cmp_smaller    -&gt;  comp op: &lt;\nopcode == utils_find_1st.cmp_smaller_eq -&gt;  comp op: &lt;=\nopcode == utils_find_1st.cmp_equal      -&gt;  comp op: ==\nopcode == utils_find_1st.cmp_not_equal  -&gt;  comp op: !=\nopcode == utils_find_1st.cmp_larger     -&gt;  comp op: &lt;\nopcode == utils_find_1st.cmp_larger_eq  -&gt;  comp op: &lt;=\n</pre>\n</div>\n<div id=\"performance\">\n<h2>Performance</h2>\n<p>The runtime difference is strongly depending on the number of true cases\nin the array. If the condition is never valid runtime is the same - both\nimplementations do not produce a valid index and need to compare the\nfull array - but on case that there are matches np.flatnonzero needs to\nrun through the full array and needs to create a result array with size\nthat depends o the number of matches while find_1st only produces a\nscalar result and only needs to compare the array until the first match\nis found.</p>\n<p>Depending on the size of the array and the number of matches the speed\ndifference can be very significant (easily &gt; factor 10)</p>\n</div>\n<div id=\"test\">\n<h2>test</h2>\n<p>run test/test_find_1st.py which should display \u201call tests passed!\u201d</p>\n<div id=\"benchmarking\">\n<h3>Benchmarking</h3>\n<p>We can easily compare the runtime using the three lines</p>\n<pre>In [6]: timeit ind = np.flatnonzero(rr &lt; limit)[0]\n1.69 $\\mu$s $\\pm$ 24.5 ns per loop (mean $\\pm$ std. dev. of 7 runs, 1000000 loops each)\n\nIn [4]: timeit ind = utf1st.find_1st(rr &lt; limit, True, utf1st.cmp_equal)\n1.13 $\\mu$s $\\pm$ 18.9 ns per loop (mean $\\pm$  std. dev. of 7 runs, 1000000 loops each)\n\nIn [5]: timeit ind = utf1st.find_1st(rr, limit, utf1st.cmp_smaller)\n270 ns $\\pm$ 5.57 ns per loop (mean $\\pm$ std. dev. of 7 runs, 1000000 loops each)\n</pre>\n<p>Which shows the rather significant improvement obtained by the last\nversion that does not require to perform all comparisons of the 100\nelements. In the above case the second element is tested positive. In\nthe worst case, where no valid element is present all comparisons have\nto be performed and flatnonzero does not need to create a results array,\nand therefore performance should be similar. For the small array sizes\nwe used so far the overhead of np.flanonzero is dominating the costs as\ncan be seen in the following.</p>\n<pre>In [9]: limit = -1000.\nIn [10]: timeit ind = np.flatnonzero(rr &lt; limit)\n1.56 $\\mu$s $\\pm$ 13.8 ns per loop (mean $\\pm$ std. dev. of 7 runs, 1000000 loops each)\n\nIn [11]: timeit ind = utf1st.find_1st(rr&lt;limit, True, utf1st.cmp_equal)\n1.16 $\\mu$s $\\pm$ 7.07 ns per loop (mean $\\pm$ std. dev. of 7 runs, 1000000 loops each)\n\nIn [12]: timeit ind = utf1st.find_1st(rr, limit, utf1st.cmp_smaller)\n314 ns $\\pm$ 3.36 ns per loop (mean $\\pm$ std. dev. of 7 runs, 1000000 loops each)\n</pre>\n<p>For a significantly larger array size costs become more comparable</p>\n<pre>rr= np.random.randn(10000)\nIn [13]: timeit ind = np.flatnonzero(rr &lt; limit)\n4.87 $\\mu$s $\\pm$ 101 ns per loop (mean $\\pm$ std. dev. of 7 runs, 100000 loops each)\n\nIn [14]: timeit ind = utf1st.find_1st(rr&lt;limit, True, utf1st.cmp_equal)\n8.95 $\\mu$s $\\pm$ 497 ns per loop (mean $\\pm$ std. dev. of 7 runs, 100000 loops each)\n\nIn [15]: timeit ind = utf1st.find_1st(rr, limit, utf1st.cmp_smaller)\n4.4 $\\mu$s $\\pm$ 47.9 ns per loop (mean $\\pm$ std. dev. of 7 runs, 100000 loops each)\n</pre>\n<p>Which demonstrates that even in this case the find_1st extension is more\nefficient besides if the boolean intermediate array is used in line 14.</p>\n<p>This result is a bit astonishing as the overhead involved in passing the\nboolean intermediate array into the find_1st extension seems rather\nlarge compared to the simple boolean comparison</p>\n<pre>In [35]: timeit ind = rr &lt; limit\n3.31 $\\mu$s $\\pm$ 47.3 ns per loop (mean $\\pm$ std. dev. of 7 runs, 100000 loops each)\n</pre>\n<p>The clarification of this remaining issue needs further investigation.\nAny comments are welcome.</p>\n</div>\n</div>\n<div id=\"changes\">\n<h2>Changes</h2>\n<div id=\"version-1-1-4-rc0-2019-08-04\">\n<h3>Version 1.1.4.rc0 (2019-08-04)</h3>\n<ul>\n<li>added support for automatic installation of requirements</li>\n<li>add and support pre-release tags in the version number</li>\n<li>use hashlib to calculate the README checksum.</li>\n<li>support testing via <tt>make check</tt></li>\n</ul>\n</div>\n<div id=\"version-1-1-3-2018-10-05\">\n<h3>Version 1.1.3 (2018-10-05)</h3>\n<ul>\n<li>Removed setting stdlib for clang in setup.py - the default should do\njust fine.</li>\n</ul>\n</div>\n<div id=\"version-1-1-2-2018-09-28\">\n<h3>Version 1.1.2 (2018-09-28)</h3>\n<ul>\n<li>Removed ez_setup.py that seems to be no longer maintained by\nsetuptools maintainers.</li>\n</ul>\n</div>\n<div id=\"version-1-1-1-2017-09-19\">\n<h3>Version 1.1.1 (2017-09-19)</h3>\n<ul>\n<li>Use NPY_INT64/NPY_INT32 instead of NPY_INT/NPY_LONG such that the\ntest does not rely on the compiler specific int sizes.</li>\n</ul>\n</div>\n<div id=\"version-1-1-0-2017-09-18\">\n<h3>Version 1.1.0 (2017-09-18)</h3>\n<ul>\n<li>fixed bug in cmp operator values that were not coherent on the python\nand C++ side</li>\n<li>support arbitrary strides for one dimensional arrays</li>\n<li>Added test script</li>\n</ul>\n</div>\n<div id=\"version-1-0-7-2017-09-18\">\n<h3>Version 1.0.7 (2017-09-18)</h3>\n<ul>\n<li>Changed compiler test to hopefully work for MSVC under windows.</li>\n</ul>\n</div>\n<div id=\"version-1-0-6-2017-05-31\">\n<h3>Version 1.0.6 (2017-05-31)</h3>\n<ul>\n<li>Removed more non ascii elements in README.</li>\n</ul>\n</div>\n<div id=\"version-1-0-5-2017-05-31\">\n<h3>Version 1.0.5 (2017-05-31)</h3>\n<ul>\n<li>Fixed non ascii elements in README that led to problems with some\npython configurations.</li>\n</ul>\n</div>\n<div id=\"version-1-0-4-2017-05-31\">\n<h3>Version 1.0.4 (2017-05-31)</h3>\n<ul>\n<li>Fixed setup.py problems: on the fly generation of LONG_DESCRPTION\nfile.</li>\n</ul>\n</div>\n<div id=\"version-1-0-3-2017-05-31\">\n<h3>Version 1.0.3 (2017-05-31)</h3>\n<ul>\n<li>Moved to github</li>\n</ul>\n</div>\n<div id=\"version-1-0-2-2017-05-31\">\n<h3>Version 1.0.2 (2017-05-31)</h3>\n<ul>\n<li>Force using c++ compiler</li>\n</ul>\n</div>\n<div id=\"version-1-0-1-2017-05-31\">\n<h3>Version 1.0.1 (2017-05-31)</h3>\n<ul>\n<li>initial release</li>\n</ul>\n</div>\n</div>\n<div id=\"copyright\">\n<h2>Copyright</h2>\n<p>Copyright (C) 2017 IRCAM</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>GPL see file Copying.txt</p>\n</div>\n<div id=\"author\">\n<h2>Author</h2>\n<p>Axel Roebel</p>\n</div>\n\n          </div>"}, "last_serial": 5630907, "releases": {"1.0.1": [{"comment_text": "", "digests": {"md5": "804fdf18f9e36d45c4c5c229b851937e", "sha256": "36a14007b1dceef8daf90b9796860a816ef69b3052151f68a8a723adb2eb637d"}, "downloads": -1, "filename": "py_find_1st-1.0.1.tar.gz", "has_sig": false, "md5_digest": "804fdf18f9e36d45c4c5c229b851937e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9571, "upload_time": "2017-05-31T15:21:40", "upload_time_iso_8601": "2017-05-31T15:21:40.087835Z", "url": "https://files.pythonhosted.org/packages/ed/cf/42acbdcfb3aaf3dd8c0c8c4a8cf47c1b37e3b1ea16a5e9c4a4de448881df/py_find_1st-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "8e19a31de9603018926ac675f0ec68f4", "sha256": "9e0bdba17717920b309eb057977013a350c44b31a40a228263c17ce8132a897a"}, "downloads": -1, "filename": "py_find_1st-1.0.2.tar.gz", "has_sig": false, "md5_digest": "8e19a31de9603018926ac675f0ec68f4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9431, "upload_time": "2017-05-31T16:05:39", "upload_time_iso_8601": "2017-05-31T16:05:39.363931Z", "url": "https://files.pythonhosted.org/packages/a2/a1/a06168d5c1e2595be213b2ffa5dfd3cc40344f44140a88504e9fad56c47c/py_find_1st-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "146c7dec02cbaf0caae51f1bace7da57", "sha256": "016eab9bf24c3735a0139b8d3d24df6403a600568bc91d33dce12e6c438e5977"}, "downloads": -1, "filename": "py_find_1st-1.0.3.tar.gz", "has_sig": false, "md5_digest": "146c7dec02cbaf0caae51f1bace7da57", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9445, "upload_time": "2017-05-31T16:25:19", "upload_time_iso_8601": "2017-05-31T16:25:19.263049Z", "url": "https://files.pythonhosted.org/packages/c2/f1/717a6f6ee19be68b17c7839e4b9973f72ecbe27dcf06f736d70a2165ec11/py_find_1st-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "007778050be64f907dd9c575ea4eebda", "sha256": "85839267813db2818060219536c6109de313c13c3f9ebecfe449b389ffcbcf95"}, "downloads": -1, "filename": "py_find_1st-1.0.4.tar.gz", "has_sig": false, "md5_digest": "007778050be64f907dd9c575ea4eebda", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9646, "upload_time": "2017-05-31T16:39:23", "upload_time_iso_8601": "2017-05-31T16:39:23.886783Z", "url": "https://files.pythonhosted.org/packages/f0/aa/8f13041ad4b476512462fc95ca14bc4bd991c6bb40fe3030e734bd5c2e57/py_find_1st-1.0.4.tar.gz", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "864a436806af2ee0290a0cd786eb0f6b", "sha256": "e2bf2ac2e6fdd368463d355c0f4e8559d8e0069ac9897dcab44223373abf0190"}, "downloads": -1, "filename": "py_find_1st-1.0.5.tar.gz", "has_sig": false, "md5_digest": "864a436806af2ee0290a0cd786eb0f6b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9706, "upload_time": "2017-05-31T17:10:52", "upload_time_iso_8601": "2017-05-31T17:10:52.208666Z", "url": "https://files.pythonhosted.org/packages/d3/3a/4fa859df27e893c1c7a45a667d4b9e628d8cbdb97f1144b03b7a6f54f926/py_find_1st-1.0.5.tar.gz", "yanked": false}], "1.0.6": [{"comment_text": "", "digests": {"md5": "20f64f548ae8a5bd5a7dfcb1e33c6d70", "sha256": "18e78a345a39c54bfe163d6958773426e563b9cdb74866deaf0ac3e256fb405f"}, "downloads": -1, "filename": "py_find_1st-1.0.6.tar.gz", "has_sig": false, "md5_digest": "20f64f548ae8a5bd5a7dfcb1e33c6d70", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9765, "upload_time": "2017-05-31T17:30:21", "upload_time_iso_8601": "2017-05-31T17:30:21.790794Z", "url": "https://files.pythonhosted.org/packages/4f/90/6a2d99bc2ea1f136f089931364ed9100d74a188db38af703603dbaf523aa/py_find_1st-1.0.6.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "08798656a93b4947da06b2ca604abf72", "sha256": "405046e46036f31cabd37adaa320dd5bd8f029f16427c3effc464540a4561824"}, "downloads": -1, "filename": "py_find_1st-1.1.0.tar.gz", "has_sig": false, "md5_digest": "08798656a93b4947da06b2ca604abf72", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10532, "upload_time": "2017-09-18T09:41:20", "upload_time_iso_8601": "2017-09-18T09:41:20.834009Z", "url": "https://files.pythonhosted.org/packages/08/64/7b591121b07b9fedf8750da1e89fac8a4082fce56fd54687fbbbba9f4c50/py_find_1st-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "9eb6437056e08c903c75889f76dfa101", "sha256": "46c58d2e2929f9c57174f7b4f1cba7215570fd5147ad52b90a97caf1fcc6cf67"}, "downloads": -1, "filename": "py_find_1st-1.1.1.tar.gz", "has_sig": false, "md5_digest": "9eb6437056e08c903c75889f76dfa101", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10654, "upload_time": "2017-09-20T10:30:08", "upload_time_iso_8601": "2017-09-20T10:30:08.732618Z", "url": "https://files.pythonhosted.org/packages/c8/fb/a2eea0d30db671849e784465841752dfb176f4daf93c27ba4323fe5349d3/py_find_1st-1.1.1.tar.gz", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "b60628d5f03f9ca451e2b5d184115aab", "sha256": "d23461d2d87ce518aaecfe13f7cf356c9ac9d3032dd5dcc78b7076cbd20954c3"}, "downloads": -1, "filename": "py_find_1st-1.1.2.tar.gz", "has_sig": false, "md5_digest": "b60628d5f03f9ca451e2b5d184115aab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7502, "upload_time": "2018-09-27T22:02:49", "upload_time_iso_8601": "2018-09-27T22:02:49.768007Z", "url": "https://files.pythonhosted.org/packages/0b/5b/f144a046669098bce7f455462c8f27a5742271a81dd34f50024bfe3baa21/py_find_1st-1.1.2.tar.gz", "yanked": false}], "1.1.3": [{"comment_text": "", "digests": {"md5": "d37c5070aefd1a8dd423aa578276d4c1", "sha256": "c7edc8454d967ec64b5c81340b8efc0466708b7b06f498484b881175db984380"}, "downloads": -1, "filename": "py_find_1st-1.1.3.tar.gz", "has_sig": false, "md5_digest": "d37c5070aefd1a8dd423aa578276d4c1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7570, "upload_time": "2018-10-05T08:05:20", "upload_time_iso_8601": "2018-10-05T08:05:20.066102Z", "url": "https://files.pythonhosted.org/packages/16/20/813b0578790487874bb58d92591c72e1b019edb3ef4439793815c034a39b/py_find_1st-1.1.3.tar.gz", "yanked": false}], "1.1.4": [{"comment_text": "", "digests": {"md5": "967b46540eba4291eb22a2bb171185d0", "sha256": "5e2f406f5f5b54e57f8eb0bd4d364739962cf1c9e3b81110ce654fad37935ef3"}, "downloads": -1, "filename": "py_find_1st-1.1.4.tar.gz", "has_sig": false, "md5_digest": "967b46540eba4291eb22a2bb171185d0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8687, "upload_time": "2019-08-04T15:40:36", "upload_time_iso_8601": "2019-08-04T15:40:36.361417Z", "url": "https://files.pythonhosted.org/packages/25/e1/5e274480390df4d2d5b2d46a72ee1abba8de8e883c6f1b32f0c68652880c/py_find_1st-1.1.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "967b46540eba4291eb22a2bb171185d0", "sha256": "5e2f406f5f5b54e57f8eb0bd4d364739962cf1c9e3b81110ce654fad37935ef3"}, "downloads": -1, "filename": "py_find_1st-1.1.4.tar.gz", "has_sig": false, "md5_digest": "967b46540eba4291eb22a2bb171185d0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8687, "upload_time": "2019-08-04T15:40:36", "upload_time_iso_8601": "2019-08-04T15:40:36.361417Z", "url": "https://files.pythonhosted.org/packages/25/e1/5e274480390df4d2d5b2d46a72ee1abba8de8e883c6f1b32f0c68652880c/py_find_1st-1.1.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:05:48 2020"}