{"info": {"author": "jeeva", "author_email": "jeeva@helixta.com.au", "bugtrack_url": null, "classifiers": [], "description": "# ABA Parser/Reporter in Python #\n\nABA (Australian Bankers Association or Cemtext file format) is the standard format all Australian online banks accept. This is an archaic fixed file format, and it's hard to eye-ball for correctness.\n\nThis script serves currently serves 2 purposes\n\n 1. A python library to parse ABA files.\n 2. A basic command line report of all the debit transactions in the ABA file (I use this to sanity check payments out of Xero)\n\n## Usage ##\n`\n$ python abaparser.py < path/to/FILE.ABA\n`\n\nThe output will be something like this\n\n```\nContractors\n012-327\t293353749\tJohn Doe\tContractor Payment\t1220.00\n082-406\t598209320\tJane Doe\tContractor Payment\t6600.00\n```", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/helix-collective/abaparser", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "abaparser", "package_url": "https://pypi.org/project/abaparser/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/abaparser/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/helix-collective/abaparser"}, "release_url": "https://pypi.org/project/abaparser/0.1/", "requires_dist": null, "requires_python": null, "summary": "UNKNOWN", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p># ABA Parser/Reporter in Python #</p>\n<p>ABA (Australian Bankers Association or Cemtext file format) is the standard format all Australian online banks accept. This is an archaic fixed file format, and it\u2019s hard to eye-ball for correctness.</p>\n<p>This script serves currently serves 2 purposes</p>\n<blockquote>\n<ol>\n<li>A python library to parse ABA files.</li>\n<li>A basic command line report of all the debit transactions in the ABA file (I use this to sanity check payments out of Xero)</li>\n</ol>\n</blockquote>\n<p>## Usage ##\n`\n$ python abaparser.py &lt; path/to/FILE.ABA\n`</p>\n<p>The output will be something like this</p>\n<p><tt>`\nContractors\n<span class=\"pre\">012-327</span> 293353749\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 John Doe\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Contractor Payment\u00a0\u00a0\u00a0\u00a0\u00a0 1220.00\n<span class=\"pre\">082-406</span> 598209320\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Jane Doe\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Contractor Payment\u00a0\u00a0\u00a0\u00a0\u00a0 6600.00\n`</tt></p>\n\n          </div>"}, "last_serial": 1492279, "releases": {"0.1": []}, "urls": [], "timestamp": "Thu May  7 15:55:21 2020"}