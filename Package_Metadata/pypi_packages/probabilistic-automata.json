{"info": {"author": "Marcell Vazquez-Chanlatte", "author_email": "mvc@linux.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# Probabilistic Automata\n\n[![Build Status](https://cloud.drone.io/api/badges/mvcisback/probabilistic_automata/status.svg)](https://cloud.drone.io/mvcisback/probabilistic_automata)\n[![Docs](https://img.shields.io/badge/API-link-color)](https://mvcisback.github.io/probabilistic_automata)\n[![codecov](https://codecov.io/gh/mvcisback/probabilistic_automata/branch/master/graph/badge.svg)](https://codecov.io/gh/mvcisback/probabilistic_automata)\n[![PyPI version](https://badge.fury.io/py/probabilistic-automata.svg)](https://badge.fury.io/py/probabilistic-automata)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\nPython library for manipulating Probabilistic Automata. This library\nbuilds upon the [`dfa`](https://github.com/mvcisback/dfa) package.\n\n<!-- markdown-toc start - Don't edit this section. Run M-x markdown-toc-generate-toc again -->\n**Table of Contents**\n\n- [Probabilistic Automata](#probabilistic-automata)\n- [Installation](#installation)\n- [Usage](#usage)\n    - [Dict <-> PDFA](#dict---pdfa)\n    - [DFA to PDFA](#dfa-to-pdfa)\n    - [Composition](#composition)\n\n<!-- markdown-toc end -->\n\n\n\n# Installation\n\nIf you just need to use `probabilistic_automata`, you can just run:\n\n`$ pip install probabilistic_automata`\n\nFor developers, note that this project uses the\n[poetry](https://poetry.eustace.io/) python package/dependency\nmanagement tool. Please familarize yourself with it and then\nrun:\n\n`$ poetry install`\n\n# Usage\n\nThe `probabilistic_automata` library centers around the `PDFA` object\nwhich models a finite probabilistic transition system, e.g., a Markov\nDecision Process, as a `DFA` or Moore Machine over a product alphabet\nover the system's actions and the environment's stochastic action.\n\n```python\nimport probabilistic_automata as PA\n\ndef transition(state, composite_action):\n    sys_action, env_action = composite_action\n    return (state + sys_action + env_action) % 2\n\ndef env_dist(state, sys_action):\n    \"\"\"Based on state and the system action, what are the probabilities \n    of the environment's action.\"\"\"\n\n    return {0: 1/2, 1: 1/2}  # Always a coin flip.\n\nnoisy_parity = PA.pdfa(\n    start=0,\n    label=bool,\n    inputs={0, 1},\n    env_inputs={0, 1},\n    outputs={0, 1},\n    transition=transition,\n    env_dist=env_dist,   # Equivalently, PA.uniform({0, 1}).\n)\n```\n\nThe support and transition probabilities can easily calculated:\n\n```python\nassert noisy_parity.support(0, 0) == {0, 1}\nassert noisy_parity.transition_probs(0, 0) == {0: 1/2, 1: 1/2}\nassert noisy_parity.prob(start=0, action=0, end=0) == 1/2\n```\n\n## Dict <-> PDFA\n\nNote that `pdfa` provides helper functions for going from a dictionary\nbased representation of a probabilistic transition system to a `PDFA`\nobject and back.\n\n```python\nimport probabilistic_automata as PA\n\nmapping = {\n    \"s1\": (True, {\n        'a': {'s1': 0.5, 's2': 0.5},\n    }),\n    \"s2\": (False, {\n        'a': {'s1': 1},\n    }),\n}\n\nstart = \"s1\"\npdfa = PA.dict2pdfa(mapping=mapping, start=start)\nassert pdfa.inputs == {'a'}\n\nmapping2, start2 = PA.pdfa2dict(pdfa)\nassert start == start2\nassert mapping2 == mapping\n```\n\n\n## DFA to PDFA\n\nThe `probabilistic_automata` library has two convenience methods for\ntransforming a Deterministic Finite Automaton (`dfa.DFA`) into a\n`PDFA`.\n\n- The `lift` function simply creates a `PDFA` whose transitions are\n  deterministic and match the original `dfa.DFA`.\n\n```python\nimport probabilistic_automata as PA\nfrom dfa import DFA\n\nparity = DFA(\n    start=0,\n    inputs={0, 1},\n    label=bool,\n    transition=lambda s, c: (s + c) & 1,\n)\n\nparity_pdfa = lift(parity)\n\nassert pdfa.inputs == parity.inputs\nassert pdfa.env_inputs == {None}\n```\n\n- The `randomize` function takes a `DFA` and returns a `PDFA` modeling\n  the actions of the `DFA` being selected uniformly at random.\n\n```\nnoisy_parity = PA.randomize(parity)\n\nassert noisy_parity.inputs == {None}\nassert noisy_parity.env_inputs == noisy_parity.inputs\n```\n\n## Composition\n\nLike their deterministic variants `PDFA` objects can be combined in\ntwo ways:\n\n1. (Synchronous) Cascading Composition: Feed outputs of one `PDFA` into another.\n\n```python\nmachine = noisy_parity >> noisy_parity\n\nassert machine.inputs == noisy_parity.inputs\nassert machine.outputs == noisy_parity.outputs\nassert machine.start == (0, 0)\n\nassert machine.support((0, 0), 0) == {(0, 0), (0, 1), (1, 0), (1, 1)}\n```\n\n2. (Synchronous) Parallel Composition: Run two `PDFA`s in parallel.\n\n```python\nmachine = noisy_parity | noisy_parity\n\nassert machine.inputs.left == noisy_parity.inputs\nassert machine.inputs.right == noisy_parity.inputs\n\nassert machine.outputs.left == noisy_parity.outputs\nassert machine.outputs.right == noisy_parity.outputs\n\nassert machine.env_inputs.left == noisy_parity.env_inputs\nassert machine.env_inputs.right == noisy_parity.env_inputs\n\nassert machine.start == (0, 0)\nassert machine.support((0, 0), (0, 0)) == {(0, 0), (0, 1), (1, 0), (1, 1)}\n```\n\n**Note** Parallel composition results in a `PDFA` with\n`dfa.ProductAlphabet` input and output alphabets.\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mvcisback/probabilistic_automata", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "probabilistic-automata", "package_url": "https://pypi.org/project/probabilistic-automata/", "platform": "", "project_url": "https://pypi.org/project/probabilistic-automata/", "project_urls": {"Homepage": "https://github.com/mvcisback/probabilistic_automata", "Repository": "https://github.com/mvcisback/probabilistic_automata"}, "release_url": "https://pypi.org/project/probabilistic-automata/0.4.0/", "requires_dist": ["funcy (>=1.14,<2.0)", "dfa (>=2.0.0,<3.0.0)", "attrs (>=19.3.0,<20.0.0)", "lenses (>=0.5.0,<0.6.0)"], "requires_python": ">=3.7,<4.0", "summary": "Python library for manipulating probabilistic automata.", "version": "0.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Probabilistic Automata</h1>\n<p><a href=\"https://cloud.drone.io/mvcisback/probabilistic_automata\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e6e23d58666e4babf1ef44bfce7379f168c0864c/68747470733a2f2f636c6f75642e64726f6e652e696f2f6170692f6261646765732f6d766369736261636b2f70726f626162696c69737469635f6175746f6d6174612f7374617475732e737667\"></a>\n<a href=\"https://mvcisback.github.io/probabilistic_automata\" rel=\"nofollow\"><img alt=\"Docs\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/63f99f0443ee8d7c48a4f4339d8c1a366ba95d71/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4150492d6c696e6b2d636f6c6f72\"></a>\n<a href=\"https://codecov.io/gh/mvcisback/probabilistic_automata\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bc396d6a548065714dff150c5c7493f110042d9d/68747470733a2f2f636f6465636f762e696f2f67682f6d766369736261636b2f70726f626162696c69737469635f6175746f6d6174612f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://badge.fury.io/py/probabilistic-automata\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bd0c3bb28b32f85e0284ddd3870f4db544e92088/68747470733a2f2f62616467652e667572792e696f2f70792f70726f626162696c69737469632d6175746f6d6174612e737667\"></a>\n<a href=\"https://opensource.org/licenses/MIT\" rel=\"nofollow\"><img alt=\"License: MIT\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8645b002dd7ec1b54275a80574942e7a318e03c6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d79656c6c6f772e737667\"></a></p>\n<p>Python library for manipulating Probabilistic Automata. This library\nbuilds upon the <a href=\"https://github.com/mvcisback/dfa\" rel=\"nofollow\"><code>dfa</code></a> package.</p>\n\n<p><strong>Table of Contents</strong></p>\n<ul>\n<li><a href=\"#probabilistic-automata\" rel=\"nofollow\">Probabilistic Automata</a></li>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#usage\" rel=\"nofollow\">Usage</a>\n<ul>\n<li><a href=\"#dict---pdfa\" rel=\"nofollow\">Dict &lt;-&gt; PDFA</a></li>\n<li><a href=\"#dfa-to-pdfa\" rel=\"nofollow\">DFA to PDFA</a></li>\n<li><a href=\"#composition\" rel=\"nofollow\">Composition</a></li>\n</ul>\n</li>\n</ul>\n\n<h1>Installation</h1>\n<p>If you just need to use <code>probabilistic_automata</code>, you can just run:</p>\n<p><code>$ pip install probabilistic_automata</code></p>\n<p>For developers, note that this project uses the\n<a href=\"https://poetry.eustace.io/\" rel=\"nofollow\">poetry</a> python package/dependency\nmanagement tool. Please familarize yourself with it and then\nrun:</p>\n<p><code>$ poetry install</code></p>\n<h1>Usage</h1>\n<p>The <code>probabilistic_automata</code> library centers around the <code>PDFA</code> object\nwhich models a finite probabilistic transition system, e.g., a Markov\nDecision Process, as a <code>DFA</code> or Moore Machine over a product alphabet\nover the system's actions and the environment's stochastic action.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">probabilistic_automata</span> <span class=\"k\">as</span> <span class=\"nn\">PA</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">transition</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">,</span> <span class=\"n\">composite_action</span><span class=\"p\">):</span>\n    <span class=\"n\">sys_action</span><span class=\"p\">,</span> <span class=\"n\">env_action</span> <span class=\"o\">=</span> <span class=\"n\">composite_action</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">state</span> <span class=\"o\">+</span> <span class=\"n\">sys_action</span> <span class=\"o\">+</span> <span class=\"n\">env_action</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"mi\">2</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">env_dist</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">,</span> <span class=\"n\">sys_action</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Based on state and the system action, what are the probabilities </span>\n<span class=\"sd\">    of the environment's action.\"\"\"</span>\n\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">}</span>  <span class=\"c1\"># Always a coin flip.</span>\n\n<span class=\"n\">noisy_parity</span> <span class=\"o\">=</span> <span class=\"n\">PA</span><span class=\"o\">.</span><span class=\"n\">pdfa</span><span class=\"p\">(</span>\n    <span class=\"n\">start</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n    <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"nb\">bool</span><span class=\"p\">,</span>\n    <span class=\"n\">inputs</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">},</span>\n    <span class=\"n\">env_inputs</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">},</span>\n    <span class=\"n\">outputs</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">},</span>\n    <span class=\"n\">transition</span><span class=\"o\">=</span><span class=\"n\">transition</span><span class=\"p\">,</span>\n    <span class=\"n\">env_dist</span><span class=\"o\">=</span><span class=\"n\">env_dist</span><span class=\"p\">,</span>   <span class=\"c1\"># Equivalently, PA.uniform({0, 1}).</span>\n<span class=\"p\">)</span>\n</pre>\n<p>The support and transition probabilities can easily calculated:</p>\n<pre><span class=\"k\">assert</span> <span class=\"n\">noisy_parity</span><span class=\"o\">.</span><span class=\"n\">support</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">}</span>\n<span class=\"k\">assert</span> <span class=\"n\">noisy_parity</span><span class=\"o\">.</span><span class=\"n\">transition_probs</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">}</span>\n<span class=\"k\">assert</span> <span class=\"n\">noisy_parity</span><span class=\"o\">.</span><span class=\"n\">prob</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">action</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"o\">/</span><span class=\"mi\">2</span>\n</pre>\n<h2>Dict &lt;-&gt; PDFA</h2>\n<p>Note that <code>pdfa</code> provides helper functions for going from a dictionary\nbased representation of a probabilistic transition system to a <code>PDFA</code>\nobject and back.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">probabilistic_automata</span> <span class=\"k\">as</span> <span class=\"nn\">PA</span>\n\n<span class=\"n\">mapping</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"s1\"</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'s1'</span><span class=\"p\">:</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"s1\">'s2'</span><span class=\"p\">:</span> <span class=\"mf\">0.5</span><span class=\"p\">},</span>\n    <span class=\"p\">}),</span>\n    <span class=\"s2\">\"s2\"</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'s1'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">},</span>\n    <span class=\"p\">}),</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"s2\">\"s1\"</span>\n<span class=\"n\">pdfa</span> <span class=\"o\">=</span> <span class=\"n\">PA</span><span class=\"o\">.</span><span class=\"n\">dict2pdfa</span><span class=\"p\">(</span><span class=\"n\">mapping</span><span class=\"o\">=</span><span class=\"n\">mapping</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"o\">=</span><span class=\"n\">start</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">pdfa</span><span class=\"o\">.</span><span class=\"n\">inputs</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"s1\">'a'</span><span class=\"p\">}</span>\n\n<span class=\"n\">mapping2</span><span class=\"p\">,</span> <span class=\"n\">start2</span> <span class=\"o\">=</span> <span class=\"n\">PA</span><span class=\"o\">.</span><span class=\"n\">pdfa2dict</span><span class=\"p\">(</span><span class=\"n\">pdfa</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">start</span> <span class=\"o\">==</span> <span class=\"n\">start2</span>\n<span class=\"k\">assert</span> <span class=\"n\">mapping2</span> <span class=\"o\">==</span> <span class=\"n\">mapping</span>\n</pre>\n<h2>DFA to PDFA</h2>\n<p>The <code>probabilistic_automata</code> library has two convenience methods for\ntransforming a Deterministic Finite Automaton (<code>dfa.DFA</code>) into a\n<code>PDFA</code>.</p>\n<ul>\n<li>The <code>lift</code> function simply creates a <code>PDFA</code> whose transitions are\ndeterministic and match the original <code>dfa.DFA</code>.</li>\n</ul>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">probabilistic_automata</span> <span class=\"k\">as</span> <span class=\"nn\">PA</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dfa</span> <span class=\"kn\">import</span> <span class=\"n\">DFA</span>\n\n<span class=\"n\">parity</span> <span class=\"o\">=</span> <span class=\"n\">DFA</span><span class=\"p\">(</span>\n    <span class=\"n\">start</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n    <span class=\"n\">inputs</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">},</span>\n    <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"nb\">bool</span><span class=\"p\">,</span>\n    <span class=\"n\">transition</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">s</span> <span class=\"o\">+</span> <span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">parity_pdfa</span> <span class=\"o\">=</span> <span class=\"n\">lift</span><span class=\"p\">(</span><span class=\"n\">parity</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">pdfa</span><span class=\"o\">.</span><span class=\"n\">inputs</span> <span class=\"o\">==</span> <span class=\"n\">parity</span><span class=\"o\">.</span><span class=\"n\">inputs</span>\n<span class=\"k\">assert</span> <span class=\"n\">pdfa</span><span class=\"o\">.</span><span class=\"n\">env_inputs</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"kc\">None</span><span class=\"p\">}</span>\n</pre>\n<ul>\n<li>The <code>randomize</code> function takes a <code>DFA</code> and returns a <code>PDFA</code> modeling\nthe actions of the <code>DFA</code> being selected uniformly at random.</li>\n</ul>\n<pre><code>noisy_parity = PA.randomize(parity)\n\nassert noisy_parity.inputs == {None}\nassert noisy_parity.env_inputs == noisy_parity.inputs\n</code></pre>\n<h2>Composition</h2>\n<p>Like their deterministic variants <code>PDFA</code> objects can be combined in\ntwo ways:</p>\n<ol>\n<li>(Synchronous) Cascading Composition: Feed outputs of one <code>PDFA</code> into another.</li>\n</ol>\n<pre><span class=\"n\">machine</span> <span class=\"o\">=</span> <span class=\"n\">noisy_parity</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">noisy_parity</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">machine</span><span class=\"o\">.</span><span class=\"n\">inputs</span> <span class=\"o\">==</span> <span class=\"n\">noisy_parity</span><span class=\"o\">.</span><span class=\"n\">inputs</span>\n<span class=\"k\">assert</span> <span class=\"n\">machine</span><span class=\"o\">.</span><span class=\"n\">outputs</span> <span class=\"o\">==</span> <span class=\"n\">noisy_parity</span><span class=\"o\">.</span><span class=\"n\">outputs</span>\n<span class=\"k\">assert</span> <span class=\"n\">machine</span><span class=\"o\">.</span><span class=\"n\">start</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">machine</span><span class=\"o\">.</span><span class=\"n\">support</span><span class=\"p\">((</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"p\">{(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)}</span>\n</pre>\n<ol>\n<li>(Synchronous) Parallel Composition: Run two <code>PDFA</code>s in parallel.</li>\n</ol>\n<pre><span class=\"n\">machine</span> <span class=\"o\">=</span> <span class=\"n\">noisy_parity</span> <span class=\"o\">|</span> <span class=\"n\">noisy_parity</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">machine</span><span class=\"o\">.</span><span class=\"n\">inputs</span><span class=\"o\">.</span><span class=\"n\">left</span> <span class=\"o\">==</span> <span class=\"n\">noisy_parity</span><span class=\"o\">.</span><span class=\"n\">inputs</span>\n<span class=\"k\">assert</span> <span class=\"n\">machine</span><span class=\"o\">.</span><span class=\"n\">inputs</span><span class=\"o\">.</span><span class=\"n\">right</span> <span class=\"o\">==</span> <span class=\"n\">noisy_parity</span><span class=\"o\">.</span><span class=\"n\">inputs</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">machine</span><span class=\"o\">.</span><span class=\"n\">outputs</span><span class=\"o\">.</span><span class=\"n\">left</span> <span class=\"o\">==</span> <span class=\"n\">noisy_parity</span><span class=\"o\">.</span><span class=\"n\">outputs</span>\n<span class=\"k\">assert</span> <span class=\"n\">machine</span><span class=\"o\">.</span><span class=\"n\">outputs</span><span class=\"o\">.</span><span class=\"n\">right</span> <span class=\"o\">==</span> <span class=\"n\">noisy_parity</span><span class=\"o\">.</span><span class=\"n\">outputs</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">machine</span><span class=\"o\">.</span><span class=\"n\">env_inputs</span><span class=\"o\">.</span><span class=\"n\">left</span> <span class=\"o\">==</span> <span class=\"n\">noisy_parity</span><span class=\"o\">.</span><span class=\"n\">env_inputs</span>\n<span class=\"k\">assert</span> <span class=\"n\">machine</span><span class=\"o\">.</span><span class=\"n\">env_inputs</span><span class=\"o\">.</span><span class=\"n\">right</span> <span class=\"o\">==</span> <span class=\"n\">noisy_parity</span><span class=\"o\">.</span><span class=\"n\">env_inputs</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">machine</span><span class=\"o\">.</span><span class=\"n\">start</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">machine</span><span class=\"o\">.</span><span class=\"n\">support</span><span class=\"p\">((</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"p\">{(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)}</span>\n</pre>\n<p><strong>Note</strong> Parallel composition results in a <code>PDFA</code> with\n<code>dfa.ProductAlphabet</code> input and output alphabets.</p>\n\n          </div>"}, "last_serial": 6794542, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "ee92c59eb21aefa6717eee9488f104d3", "sha256": "317afd8ad4ff72747daeeeb9ae10db3ed760edc2f04132c0ae0bcfd1071476a9"}, "downloads": -1, "filename": "probabilistic_automata-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ee92c59eb21aefa6717eee9488f104d3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 7912, "upload_time": "2020-03-03T21:19:07", "upload_time_iso_8601": "2020-03-03T21:19:07.858618Z", "url": "https://files.pythonhosted.org/packages/c5/b2/2b602402fd3dd4e3815ef0f875d477788da03656b98751f11044d2f5ef60/probabilistic_automata-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cb004748a3064b8896a48a4c0fc06e00", "sha256": "6c8fee121c520431de959f4434a91b55115ae224ea5c338dc38b4df3a19edefc"}, "downloads": -1, "filename": "probabilistic_automata-0.1.0.tar.gz", "has_sig": false, "md5_digest": "cb004748a3064b8896a48a4c0fc06e00", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 7509, "upload_time": "2020-03-03T21:19:10", "upload_time_iso_8601": "2020-03-03T21:19:10.125017Z", "url": "https://files.pythonhosted.org/packages/81/f6/d5dd87885a846c89d592761e812b46300cd2c260771a9e0a4c4afd49ed3e/probabilistic_automata-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "1d4e21f7042a8d063571d12122cc1c66", "sha256": "57ac436bc0164deae54b54176d4950c9df710285390f045fb27ce6c74e72d0f5"}, "downloads": -1, "filename": "probabilistic_automata-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "1d4e21f7042a8d063571d12122cc1c66", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 7921, "upload_time": "2020-03-06T19:35:06", "upload_time_iso_8601": "2020-03-06T19:35:06.131119Z", "url": "https://files.pythonhosted.org/packages/83/28/7cbd4367ef7fcaa306c86b01a13bcdb60cc05abe44f87124b36a6388fb35/probabilistic_automata-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "30045db36a8b40be9ad60d79dbe5495b", "sha256": "5fb0a09c3aa6749deed1b0a93189c9931ec1a9431c5d1c842214c763b404d113"}, "downloads": -1, "filename": "probabilistic_automata-0.1.1.tar.gz", "has_sig": false, "md5_digest": "30045db36a8b40be9ad60d79dbe5495b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 7528, "upload_time": "2020-03-06T19:35:07", "upload_time_iso_8601": "2020-03-06T19:35:07.331872Z", "url": "https://files.pythonhosted.org/packages/49/d3/d9bb493ffffb8f42af11da8a537d27e9d17fdedff2613e0bc99a29826f88/probabilistic_automata-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "77861485ef3c8c0ef3ce3c1c5341c395", "sha256": "5448c4194b464e6f23ad504c477ee9a33451444650d9e97206c7abd1fcea8a82"}, "downloads": -1, "filename": "probabilistic_automata-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "77861485ef3c8c0ef3ce3c1c5341c395", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 8652, "upload_time": "2020-03-07T23:51:15", "upload_time_iso_8601": "2020-03-07T23:51:15.341548Z", "url": "https://files.pythonhosted.org/packages/87/56/214b5c1d17fc62180d96bfc1375398dee32464874f2ba0623b6f165542c9/probabilistic_automata-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "487484f684e85d265c25a5519b633583", "sha256": "d193ab27447aca9040ffb6fe6344a0a4364c35767de9e4e49b97f78aa6ae5045"}, "downloads": -1, "filename": "probabilistic_automata-0.2.0.tar.gz", "has_sig": false, "md5_digest": "487484f684e85d265c25a5519b633583", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 8484, "upload_time": "2020-03-07T23:51:16", "upload_time_iso_8601": "2020-03-07T23:51:16.808077Z", "url": "https://files.pythonhosted.org/packages/b0/55/f01966b7e8664d258208e00f5694d194af60a58c8caea977bd7efe7ca5db/probabilistic_automata-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "dfef3fa3ece7d565308b599cb508b351", "sha256": "d2fdc8340554ce54a495974ad92e1f6a620df8b5556b319da4569f0d7f5a814d"}, "downloads": -1, "filename": "probabilistic_automata-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "dfef3fa3ece7d565308b599cb508b351", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 9032, "upload_time": "2020-03-08T05:55:36", "upload_time_iso_8601": "2020-03-08T05:55:36.680080Z", "url": "https://files.pythonhosted.org/packages/d4/13/5b61abe000cd8804fa7f4cae0ae9eea1e62015c132f64b5e6af412b5e305/probabilistic_automata-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2e4a059a9b369cc795de416a7deac1d0", "sha256": "b173568d551709df4ea68d941571e6b46f9ca027aa4f19b3cef1b3210888b1e3"}, "downloads": -1, "filename": "probabilistic_automata-0.3.0.tar.gz", "has_sig": false, "md5_digest": "2e4a059a9b369cc795de416a7deac1d0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 8772, "upload_time": "2020-03-08T05:55:37", "upload_time_iso_8601": "2020-03-08T05:55:37.925755Z", "url": "https://files.pythonhosted.org/packages/3f/27/7a7b9b5ee70c4edb75b76048f228c66ca15624c22d97ec001670866849ef/probabilistic_automata-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "7cb63b4643ac6b8df823be9b794edc9a", "sha256": "5bb8bae5fbafc9298599b4a32559a76c2482ffaf7ac207caca366bab0a94e24c"}, "downloads": -1, "filename": "probabilistic_automata-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "7cb63b4643ac6b8df823be9b794edc9a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 9640, "upload_time": "2020-03-11T19:17:04", "upload_time_iso_8601": "2020-03-11T19:17:04.615970Z", "url": "https://files.pythonhosted.org/packages/64/f6/690a7897c4ff4c7453ffb1b8c5c06c880fd05b405a568af2f5890ebf0dd4/probabilistic_automata-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0f0327a9e5214e202e59410f60a09e47", "sha256": "f5a9d66b3aad7c753a718c4741cc6434df749e0354a299c124c417c62015868f"}, "downloads": -1, "filename": "probabilistic_automata-0.4.0.tar.gz", "has_sig": false, "md5_digest": "0f0327a9e5214e202e59410f60a09e47", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 10175, "upload_time": "2020-03-11T19:17:05", "upload_time_iso_8601": "2020-03-11T19:17:05.942957Z", "url": "https://files.pythonhosted.org/packages/bb/01/ddd8798d0a9530ffa472f1c629e1530fc020ea4ba02030bec538f4ad4044/probabilistic_automata-0.4.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7cb63b4643ac6b8df823be9b794edc9a", "sha256": "5bb8bae5fbafc9298599b4a32559a76c2482ffaf7ac207caca366bab0a94e24c"}, "downloads": -1, "filename": "probabilistic_automata-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "7cb63b4643ac6b8df823be9b794edc9a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 9640, "upload_time": "2020-03-11T19:17:04", "upload_time_iso_8601": "2020-03-11T19:17:04.615970Z", "url": "https://files.pythonhosted.org/packages/64/f6/690a7897c4ff4c7453ffb1b8c5c06c880fd05b405a568af2f5890ebf0dd4/probabilistic_automata-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0f0327a9e5214e202e59410f60a09e47", "sha256": "f5a9d66b3aad7c753a718c4741cc6434df749e0354a299c124c417c62015868f"}, "downloads": -1, "filename": "probabilistic_automata-0.4.0.tar.gz", "has_sig": false, "md5_digest": "0f0327a9e5214e202e59410f60a09e47", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 10175, "upload_time": "2020-03-11T19:17:05", "upload_time_iso_8601": "2020-03-11T19:17:05.942957Z", "url": "https://files.pythonhosted.org/packages/bb/01/ddd8798d0a9530ffa472f1c629e1530fc020ea4ba02030bec538f4ad4044/probabilistic_automata-0.4.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:19:02 2020"}