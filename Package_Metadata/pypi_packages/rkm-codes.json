{"info": {"author": "Ken Kundert", "author_email": "rkm_codes@nurdletech.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Natural Language :: English", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Utilities"], "description": ".. initialize RKM codes\n\n    >>> from rkm_codes import set_prefs\n    >>> set_prefs(\n    ...     rkm_maps=None, units_to_rkm_base_code=None, map_sf=None,\n    ...     show_units=None, strip_zeros=None, minus_sign=None, prec=None\n    ... )\n\nRKM codes\n=========\n\n| Version: 0.5.0\n| Released: 2020-03-03\n|\n\n.. image:: https://img.shields.io/travis/KenKundert/rkm_codes/master.svg\n    :target: https://travis-ci.org/KenKundert/rkm_codes\n\n.. image:: https://img.shields.io/coveralls/KenKundert/rkm_codes.svg\n    :target: https://coveralls.io/r/KenKundert/rkm_codes\n\n.. image:: https://img.shields.io/pypi/v/rkm_codes.svg\n    :target: https://pypi.python.org/pypi/rkm_codes\n\n.. image:: https://img.shields.io/pypi/pyversions/rkm_codes.svg\n    :target: https://pypi.python.org/pypi/rkm_codes/\n\nRKM codes are used to represent electrical quantities in labels, particularly on\nschematics and on the components themselves.  They are standardized in various\nnational and international standards, including: IEC 60062 (1952) (formerly IEC 62),\nDIN 40825 (1973), BS 1852 (1974), IS 8186 (1976) and EN 60062 (1993).\nIEC-60062 was significantly updated in 2016.\n\nRKM codes were originally used as part marking codes.  This shorthand\nnotation is widely used in electrical engineering to denote the values of\nresistors and capacitors in circuit diagrams and in the production of electronic\ncircuits (for example in bills of material and in silk screens). This method\navoids overlooking the decimal separator, which may not be rendered reliably on\ncomponents or when duplicating documents.  They also provide the benefit that\nthe characters within a RKM code are either letters or digits, and so can be\nembedded within identifiers without introducing invalid characters.\n\nIEC 60062 is described in https://en.wikipedia.org/wiki/RKM_code.\n\nEssentially an RKM version of a number is the number with a scale factor where\nthe decimal point replaced by the scale factor. For example, a resistance of\n4.7k\u03a9 becomes 4k7. If there is no scale factor, the decimal point is replaced by\na letter that signifies the type of the component.  For example, a resistance of\n4.7\u03a9 becomes 4r7.\n\nResistance examples:\n\n    | R47 \u2192 0.47 \u03a9\n    | 4R7 \u2192 4.7 \u03a9\n    | 470R \u2192 470 \u03a9\n    | 4K7 \u2192 4.7 k\u03a9\n    | 47K \u2192 47 k\u03a9\n    | 47K3 \u2192 47.3 k\u03a9\n    | 470K \u2192 470 k\u03a9\n    | 4M7 \u2192 4.7 M\u03a9\n\nIn the standard, large values are assumed to be resistances and small values are\nassumed to be capacitances.  So 4k7 is a resistance and 2n5 is a capacitance.\nHowever, this package also supports a version of RKM codes where the units are\nnot implied by the value, making RKM codes suitable for a wider variety of value\ntypes, such as voltage, current, and inductance.\n\n\nInstalling\n----------\n\nThis package converts RKM codes to `QuantiPhy Quantities\n<https://quantiphy.readthedocs.io>`_ and Quantities to RKM codes.\n\nInstall with::\n\n    pip3 install --user rkm_codes\n\nRequires Python3.4 or better.\n\n\nConverting to and from RKM Codes\n--------------------------------\n\nThe following is a simple example of how to convert back and forth between RKM\ncodes and Quantities::\n\n    >>> from rkm_codes import from_rkm, to_rkm\n    >>> r = from_rkm('6K8')\n    >>> r\n    Quantity('6.8k')\n\n    >>> to_rkm(r)\n    '6K8'\n\nNotice that in this case the quantity does not include units. That is because by\ndefault *rkm_codes* assumes unitless numbers. You can change this behavior.  Out\nof the box *rkm_codes* supports two kinds of numbers, unitless and those that\nfollow the IEC60062 standard. You can switch between those two kinds of numbers\nusing something like this::\n\n    >>> from rkm_codes import set_prefs, IEC60062_MAPS, UNITLESS_MAPS\n    >>> r = from_rkm('6k8')\n    >>> r\n    Quantity('6.8k')\n\n    >>> set_prefs(rkm_maps=IEC60062_MAPS)\n    >>> from_rkm('6k8')\n    Quantity('6.8 k\u03a9')\n\n    >>> set_prefs(rkm_maps=UNITLESS_MAPS)\n    >>> from_rkm('6k8')\n    Quantity('6.8k')\n\nIn either case, *rkm_codes* allows you to explicitly specify the units, which\nalways overrides any implied units::\n\n    >>> set_prefs(rkm_maps=UNITLESS_MAPS)\n    >>> from_rkm('6k\u03a98')\n    Quantity('6.8 k\u03a9')\n\n    >>> i = from_rkm('2uA5')\n    >>> i\n    Quantity('2.5 uA')\n\nThe primary argument for *to_rkm* can be a string, a float, or a quantity::\n\n    >>> print(to_rkm('12.5 nA', prec=2))\n    12n5\n\n    >>> print(to_rkm(12.5e-9, prec=2))\n    12n5\n\n    >>> from quantiphy import Quantity\n    >>> print(to_rkm(Quantity('12.5 nA'), prec=2))\n    12n5\n\nWhen converting to an RKM code, you can instruct that the units be included::\n\n    >>> to_rkm(i, show_units=True)\n    '2\u00b5A5'\n\nYou can also indicate how many digits should be included::\n\n    >>> to_rkm(i.add(1e-9), prec=5, show_units=True)\n    '2\u00b5A501'\n\nNormally, any excess zeros are removed, but you can change that too::\n\n    >>> to_rkm(i.add(1e-9), prec=5, show_units=True, strip_zeros=False)\n    '2\u00b5A50100'\n\nTo shorten the output code it is possible to remove the base code when it is\nextraneous::\n\n    >>> from quantiphy import Quantity\n    >>> to_rkm(Quantity('470\u03a9'), show_units=False)\n    '470'\n\n    >>> to_rkm(Quantity('470\u03a9'), show_units=False, strip_code=False)\n    '470r'\n\nHere is a short program that illustrates some of the options of *to_rkm*::\n\n    >>> from rkm_codes import from_rkm, to_rkm, set_prefs, IEC60062_MAPS\n\n    >>> set_prefs(prec=4)\n\n    >>> q = from_rkm('0\u03bc\u03a947')\n    >>> while q < 1e6:\n    ...     vals = [\n    ...         q,\n    ...         to_rkm(q),\n    ...         to_rkm(q, strip_code=False),\n    ...         to_rkm(q, show_units=True),\n    ...         to_rkm(q, strip_zeros=False)\n    ...     ]\n    ...     print(' '.join(['  {:<9}'.format(v) for v in vals]).strip())\n    ...     q = q.scale(10)\n    470 n\u03a9      470n        470n        470n\u03a9       470n00\n    4.7 u\u03a9      4\u00b57         4\u00b57         4\u00b5\u03a97        4\u00b57000\n    47 u\u03a9       47\u00b5         47\u00b5         47\u00b5\u03a9        47\u00b5000\n    470 u\u03a9      470\u00b5        470\u00b5        470\u00b5\u03a9       470\u00b500\n    4.7 m\u03a9      4m7         4m7         4m\u03a97        4m7000\n    47 m\u03a9       47m         47m         47m\u03a9        47m000\n    470 m\u03a9      470m        470m        470m\u03a9       470m00\n    4.7 \u03a9       4r7         4r7         4\u03a97         4r7000\n    47 \u03a9        47          47r         47\u03a9         47r000\n    470 \u03a9       470         470r        470\u03a9        470r00\n    4.7 k\u03a9      4K7         4K7         4K\u03a97        4K7000\n    47 k\u03a9       47K         47K         47K\u03a9        47K000\n    470 k\u03a9      470K        470K        470K\u03a9       470K00\n\nIf you prefer not to use the small SI scale factors, which would be more in\nkeeping with IEC60062 for resistors, you can specify that ``quantiphy.Quantity``\nuse a restricted ``output_sf``::\n\n    >>> q = from_rkm('0\u03bc\u03a947')\n    >>> q.output_sf = 'TGMk'   # this line is new\n    >>> while q < 1e6:\n    ...     vals = [\n    ...         q,\n    ...         to_rkm(q),\n    ...         to_rkm(q, strip_code=False),\n    ...         to_rkm(q, show_units=True),\n    ...         to_rkm(q, strip_zeros=False)\n    ...     ]\n    ...     print(' '.join(['  {:<9}'.format(v) for v in vals]).strip())\n    ...     q = q.scale(10)\n    470e-9 \u03a9    0           0r          0\u03a9          r0000\n    4.7e-6 \u03a9    0           0r          0\u03a9          r0000\n    47e-6 \u03a9     0           0r          0\u03a9          r0000\n    470e-6 \u03a9    r0005       r0005       \u03a90005       r0005\n    4.7e-3 \u03a9    r0047       r0047       \u03a90047       r0047\n    47e-3 \u03a9     r047        r047        \u03a9047        r0470\n    470e-3 \u03a9    r47         r47         \u03a947         r4700\n    4.7 \u03a9       4r7         4r7         4\u03a97         4r7000\n    47 \u03a9        47          47r         47\u03a9         47r000\n    470 \u03a9       470         470r        470\u03a9        470r00\n    4.7 k\u03a9      4K7         4K7         4K\u03a97        4K7000\n    47 k\u03a9       47K         47K         47K\u03a9        47K000\n    470 k\u03a9      470K        470K        470K\u03a9       470K00\n\nYou can create your own maps by passing in a dictionary that maps a RKM base\ncode character into a scale factor and units. For example, you could create\na map that uses 'd' or 'D' to represent the decimal point in numbers without\nscale factors rather than 'r', 'c', etc.  For example::\n\n    >>> set_prefs(rkm_maps=dict(d=('', ''), D=('', '')))\n    >>> from_rkm('6d8')\n    Quantity('6.8')\n\n    >>> from_rkm('2d5')\n    Quantity('2.5')\n\nPassing *None* for the value of a map returns it to its default value.\n\nIf *rkm_codes* encounters a RKM base code character that is not in the map, it\nsimply uses that character. In this way, scale factors are handled::\n\n    >>> from_rkm('6k8')\n    Quantity('6.8k')\n\nWhen converting from Quantities to RKM codes, you can override the default\nmappings from units to RKM base code characters. The default mapping maps '\u03a9'\nand 'Ohm' to 'r', 'F' to 'c', 'H' to 'l', 'V' to 'v', and 'A' to 'i'.  However,\nyou may prefer uppercase base characters, which is more in alignment with the\noriginal standard. To get that, you can use something like this::\n\n    >>> rkm_base_code_mappings = {\n    ...     '\u03a9': 'R',\n    ...     'Ohm': 'R',\n    ...     'F': 'C',\n    ...     'H': 'L',\n    ...     'V': 'V',\n    ...     'A': 'I',\n    ... }\n    >>> set_prefs(rkm_maps=IEC60062_MAPS, units_to_rkm_base_code=rkm_base_code_mappings)\n    >>> r = from_rkm('k0012')\n    >>> to_rkm(r)\n    '1R2'\n\nYou can control the scale factors used by to_rkm() by setting *map_sf* using\n*set_prefs*. The default maps 'u' to '\u03bc' and 'k' to 'K'. You might wish to\nprevent the use of '\u03bc' while retaining the use of 'K', which you can do with::\n\n    >>> set_prefs(map_sf=dict(u='\u00b5'))\n    >>> c = from_rkm('5u')\n    >>> to_rkm(c)\n    '5\u00b5'\n\n\nFinding RKM Codes\n-----------------\n\n*find_rkm* is available for finding the RKM codes embedded in text strings.\nUsing it, you can iterate through all the numbers specified using RKM:\n\n    >>> from rkm_codes import find_rkm\n\n    >>> text = '''\n    ...     An RKM code that may include explicitly specified. Examples of\n    ...     acceptable RKM codes for resistance include:   R47 (0.47 \u03a9), 4R7\n    ...     (4.7 \u03a9), 470R (470 \u03a9), 4K7 (4.7 k\u03a9), 47K (47 k\u03a9), 47K3 (47.3 k\u03a9),\n    ...     470K (470 k\u03a9), and 4M7 (4.7 M\u03a9).\n    ... '''\n    >>> for num in find_rkm(text):\n    ...     print(num)\n    470 m\u03a9\n    4.7 \u03a9\n    470 \u03a9\n    4.7 k\u03a9\n    47 k\u03a9\n    47.3 k\u03a9\n    470 k\u03a9\n    4.7 M\u03a9\n\nWhen the RKM code is not isolated by punctuation or spaces it can get confused\nby leading and trailing text.  You can often resolve this issue by restricting\nthe matches to either the leading or trailing digit forms of the RKM code. Do so\nby specifying either 'ld' or 'td' as a second argument.  For example:\n\n    >>> for num in find_rkm('sink200nA'):\n    ...     print(num)\n    200 msink\n\n    >>> for num in find_rkm('sink200nA', 'ld'):\n    ...     print(num)\n    200 nA\n\n\nPin Name Generator Example\n--------------------------\n\nAs a practical example of the use of RKM codes, imagine wanting a program that\ncreates pin names for an electrical circuit based on a naming convention.  It\nwould take a table of pin characteristics that are used to create the names.\nFor example::\n\n    >>> from quantiphy import Quantity\n    >>> from rkm_codes import to_rkm, set_prefs as set_rkm_prefs\n\n    >>> pins = [\n    ...     dict(kind='ibias', direction='out', polarity='sink', dest='dac', value='250nA'),\n    ...     dict(kind='ibias', direction='out', polarity='src', dest='rampgen', value='2.5\u03bcA'),\n    ...     dict(kind='vref', direction='out', dest='dac', value='1.25V'),\n    ...     dict(kind='vdda', direction='in', value='2.5V'),\n    ... ]\n    >>> set_rkm_prefs(map_sf={}, units_to_rkm_base_code=None, show_units=True, prec=2)\n\n    >>> for pin in pins:\n    ...     components = []\n    ...     if 'value' in pin:\n    ...         pin['VALUE'] = to_rkm(Quantity(pin['value']))\n    ...     for name in ['dest', 'kind', 'direction', 'VALUE', 'polarity']:\n    ...         if name in pin:\n    ...             components.append(pin[name])\n    ...     print('_'.join(components))\n    dac_ibias_out_250nA_sink\n    rampgen_ibias_out_2uA5_src\n    dac_vref_out_1V25\n    vdda_in_2V5\n\n\nReleases\n--------\n\n**Latest development release**:\n    | Version: 0.5.0\n    | Released: 2020-03-03\n\n**0.5 (2020-02-01)**:\n    - Allow argument to *to_rkm()* to be a string or simple number\n    - Added *strip_code* preference\n    - With small numbers show 0 rather than exponent\n\n**0.4 (2019-08-29)**:\n    - added *find_rkm()*\n\n**0.3 (2019-08-23)**:\n    - move the units to the middle of the number with the scale factor\n    - added support for signed numbers\n    - added *show_units*, *strip_zeros*, *minus_sign*, and *prec* to preferences\n    - this release is not backward compatible; units at the end of the number\n      are no longer supported\n\n**0.2 (2018-09-14)**:\n    - fixed issue in *set_prefs()*\n\n**0.1 (2018-09-12)**:\n    - initial release", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "https://github.com/kenkundert/rkm_codes/tarball/master", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://nurdletech.com/linux-utilities/rkm_codes", "keywords": "rkm codes,quantiphy", "license": "GPLv3+", "maintainer": "", "maintainer_email": "", "name": "rkm-codes", "package_url": "https://pypi.org/project/rkm-codes/", "platform": "", "project_url": "https://pypi.org/project/rkm-codes/", "project_urls": {"Download": "https://github.com/kenkundert/rkm_codes/tarball/master", "Homepage": "https://nurdletech.com/linux-utilities/rkm_codes"}, "release_url": "https://pypi.org/project/rkm-codes/0.5.0/", "requires_dist": null, "requires_python": "", "summary": "QuantiPhy support for RKM codes.", "version": "0.5.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div>\n<div>Version: 0.5.0</div>\n<div>Released: 2020-03-03</div>\n<div><br></div>\n</div>\n<a href=\"https://travis-ci.org/KenKundert/rkm_codes\" rel=\"nofollow\"><img alt=\"https://img.shields.io/travis/KenKundert/rkm_codes/master.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c5daec8e743cda1dddf74873b931498e3e103898/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f4b656e4b756e646572742f726b6d5f636f6465732f6d61737465722e737667\"></a>\n<a href=\"https://coveralls.io/r/KenKundert/rkm_codes\" rel=\"nofollow\"><img alt=\"https://img.shields.io/coveralls/KenKundert/rkm_codes.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e555a6a1424500b272b75ae85a46666539fc3404/68747470733a2f2f696d672e736869656c64732e696f2f636f766572616c6c732f4b656e4b756e646572742f726b6d5f636f6465732e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/rkm_codes\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/rkm_codes.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3107d13205c29bc962b922ebf7fb6728be4d7e8f/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f726b6d5f636f6465732e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/rkm_codes/\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/pyversions/rkm_codes.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/37c046a231f04ad338fbff0fe8b1d297bd224382/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f726b6d5f636f6465732e737667\"></a>\n<p>RKM codes are used to represent electrical quantities in labels, particularly on\nschematics and on the components themselves.  They are standardized in various\nnational and international standards, including: IEC 60062 (1952) (formerly IEC 62),\nDIN 40825 (1973), BS 1852 (1974), IS 8186 (1976) and EN 60062 (1993).\nIEC-60062 was significantly updated in 2016.</p>\n<p>RKM codes were originally used as part marking codes.  This shorthand\nnotation is widely used in electrical engineering to denote the values of\nresistors and capacitors in circuit diagrams and in the production of electronic\ncircuits (for example in bills of material and in silk screens). This method\navoids overlooking the decimal separator, which may not be rendered reliably on\ncomponents or when duplicating documents.  They also provide the benefit that\nthe characters within a RKM code are either letters or digits, and so can be\nembedded within identifiers without introducing invalid characters.</p>\n<p>IEC 60062 is described in <a href=\"https://en.wikipedia.org/wiki/RKM_code\" rel=\"nofollow\">https://en.wikipedia.org/wiki/RKM_code</a>.</p>\n<p>Essentially an RKM version of a number is the number with a scale factor where\nthe decimal point replaced by the scale factor. For example, a resistance of\n4.7k\u03a9 becomes 4k7. If there is no scale factor, the decimal point is replaced by\na letter that signifies the type of the component.  For example, a resistance of\n4.7\u03a9 becomes 4r7.</p>\n<p>Resistance examples:</p>\n<blockquote>\n<div>\n<div>R47 \u2192 0.47 \u03a9</div>\n<div>4R7 \u2192 4.7 \u03a9</div>\n<div>470R \u2192 470 \u03a9</div>\n<div>4K7 \u2192 4.7 k\u03a9</div>\n<div>47K \u2192 47 k\u03a9</div>\n<div>47K3 \u2192 47.3 k\u03a9</div>\n<div>470K \u2192 470 k\u03a9</div>\n<div>4M7 \u2192 4.7 M\u03a9</div>\n</div>\n</blockquote>\n<p>In the standard, large values are assumed to be resistances and small values are\nassumed to be capacitances.  So 4k7 is a resistance and 2n5 is a capacitance.\nHowever, this package also supports a version of RKM codes where the units are\nnot implied by the value, making RKM codes suitable for a wider variety of value\ntypes, such as voltage, current, and inductance.</p>\n<div id=\"installing\">\n<h2>Installing</h2>\n<p>This package converts RKM codes to <a href=\"https://quantiphy.readthedocs.io\" rel=\"nofollow\">QuantiPhy Quantities</a> and Quantities to RKM codes.</p>\n<p>Install with:</p>\n<pre>pip3 install --user rkm_codes\n</pre>\n<p>Requires Python3.4 or better.</p>\n</div>\n<div id=\"converting-to-and-from-rkm-codes\">\n<h2>Converting to and from RKM Codes</h2>\n<p>The following is a simple example of how to convert back and forth between RKM\ncodes and Quantities:</p>\n<pre>&gt;&gt;&gt; from rkm_codes import from_rkm, to_rkm\n&gt;&gt;&gt; r = from_rkm('6K8')\n&gt;&gt;&gt; r\nQuantity('6.8k')\n\n&gt;&gt;&gt; to_rkm(r)\n'6K8'\n</pre>\n<p>Notice that in this case the quantity does not include units. That is because by\ndefault <em>rkm_codes</em> assumes unitless numbers. You can change this behavior.  Out\nof the box <em>rkm_codes</em> supports two kinds of numbers, unitless and those that\nfollow the IEC60062 standard. You can switch between those two kinds of numbers\nusing something like this:</p>\n<pre>&gt;&gt;&gt; from rkm_codes import set_prefs, IEC60062_MAPS, UNITLESS_MAPS\n&gt;&gt;&gt; r = from_rkm('6k8')\n&gt;&gt;&gt; r\nQuantity('6.8k')\n\n&gt;&gt;&gt; set_prefs(rkm_maps=IEC60062_MAPS)\n&gt;&gt;&gt; from_rkm('6k8')\nQuantity('6.8 k\u03a9')\n\n&gt;&gt;&gt; set_prefs(rkm_maps=UNITLESS_MAPS)\n&gt;&gt;&gt; from_rkm('6k8')\nQuantity('6.8k')\n</pre>\n<p>In either case, <em>rkm_codes</em> allows you to explicitly specify the units, which\nalways overrides any implied units:</p>\n<pre>&gt;&gt;&gt; set_prefs(rkm_maps=UNITLESS_MAPS)\n&gt;&gt;&gt; from_rkm('6k\u03a98')\nQuantity('6.8 k\u03a9')\n\n&gt;&gt;&gt; i = from_rkm('2uA5')\n&gt;&gt;&gt; i\nQuantity('2.5 uA')\n</pre>\n<p>The primary argument for <em>to_rkm</em> can be a string, a float, or a quantity:</p>\n<pre>&gt;&gt;&gt; print(to_rkm('12.5 nA', prec=2))\n12n5\n\n&gt;&gt;&gt; print(to_rkm(12.5e-9, prec=2))\n12n5\n\n&gt;&gt;&gt; from quantiphy import Quantity\n&gt;&gt;&gt; print(to_rkm(Quantity('12.5 nA'), prec=2))\n12n5\n</pre>\n<p>When converting to an RKM code, you can instruct that the units be included:</p>\n<pre>&gt;&gt;&gt; to_rkm(i, show_units=True)\n'2\u00b5A5'\n</pre>\n<p>You can also indicate how many digits should be included:</p>\n<pre>&gt;&gt;&gt; to_rkm(i.add(1e-9), prec=5, show_units=True)\n'2\u00b5A501'\n</pre>\n<p>Normally, any excess zeros are removed, but you can change that too:</p>\n<pre>&gt;&gt;&gt; to_rkm(i.add(1e-9), prec=5, show_units=True, strip_zeros=False)\n'2\u00b5A50100'\n</pre>\n<p>To shorten the output code it is possible to remove the base code when it is\nextraneous:</p>\n<pre>&gt;&gt;&gt; from quantiphy import Quantity\n&gt;&gt;&gt; to_rkm(Quantity('470\u03a9'), show_units=False)\n'470'\n\n&gt;&gt;&gt; to_rkm(Quantity('470\u03a9'), show_units=False, strip_code=False)\n'470r'\n</pre>\n<p>Here is a short program that illustrates some of the options of <em>to_rkm</em>:</p>\n<pre>&gt;&gt;&gt; from rkm_codes import from_rkm, to_rkm, set_prefs, IEC60062_MAPS\n\n&gt;&gt;&gt; set_prefs(prec=4)\n\n&gt;&gt;&gt; q = from_rkm('0\u03bc\u03a947')\n&gt;&gt;&gt; while q &lt; 1e6:\n...     vals = [\n...         q,\n...         to_rkm(q),\n...         to_rkm(q, strip_code=False),\n...         to_rkm(q, show_units=True),\n...         to_rkm(q, strip_zeros=False)\n...     ]\n...     print(' '.join(['  {:&lt;9}'.format(v) for v in vals]).strip())\n...     q = q.scale(10)\n470 n\u03a9      470n        470n        470n\u03a9       470n00\n4.7 u\u03a9      4\u00b57         4\u00b57         4\u00b5\u03a97        4\u00b57000\n47 u\u03a9       47\u00b5         47\u00b5         47\u00b5\u03a9        47\u00b5000\n470 u\u03a9      470\u00b5        470\u00b5        470\u00b5\u03a9       470\u00b500\n4.7 m\u03a9      4m7         4m7         4m\u03a97        4m7000\n47 m\u03a9       47m         47m         47m\u03a9        47m000\n470 m\u03a9      470m        470m        470m\u03a9       470m00\n4.7 \u03a9       4r7         4r7         4\u03a97         4r7000\n47 \u03a9        47          47r         47\u03a9         47r000\n470 \u03a9       470         470r        470\u03a9        470r00\n4.7 k\u03a9      4K7         4K7         4K\u03a97        4K7000\n47 k\u03a9       47K         47K         47K\u03a9        47K000\n470 k\u03a9      470K        470K        470K\u03a9       470K00\n</pre>\n<p>If you prefer not to use the small SI scale factors, which would be more in\nkeeping with IEC60062 for resistors, you can specify that <tt>quantiphy.Quantity</tt>\nuse a restricted <tt>output_sf</tt>:</p>\n<pre>&gt;&gt;&gt; q = from_rkm('0\u03bc\u03a947')\n&gt;&gt;&gt; q.output_sf = 'TGMk'   # this line is new\n&gt;&gt;&gt; while q &lt; 1e6:\n...     vals = [\n...         q,\n...         to_rkm(q),\n...         to_rkm(q, strip_code=False),\n...         to_rkm(q, show_units=True),\n...         to_rkm(q, strip_zeros=False)\n...     ]\n...     print(' '.join(['  {:&lt;9}'.format(v) for v in vals]).strip())\n...     q = q.scale(10)\n470e-9 \u03a9    0           0r          0\u03a9          r0000\n4.7e-6 \u03a9    0           0r          0\u03a9          r0000\n47e-6 \u03a9     0           0r          0\u03a9          r0000\n470e-6 \u03a9    r0005       r0005       \u03a90005       r0005\n4.7e-3 \u03a9    r0047       r0047       \u03a90047       r0047\n47e-3 \u03a9     r047        r047        \u03a9047        r0470\n470e-3 \u03a9    r47         r47         \u03a947         r4700\n4.7 \u03a9       4r7         4r7         4\u03a97         4r7000\n47 \u03a9        47          47r         47\u03a9         47r000\n470 \u03a9       470         470r        470\u03a9        470r00\n4.7 k\u03a9      4K7         4K7         4K\u03a97        4K7000\n47 k\u03a9       47K         47K         47K\u03a9        47K000\n470 k\u03a9      470K        470K        470K\u03a9       470K00\n</pre>\n<p>You can create your own maps by passing in a dictionary that maps a RKM base\ncode character into a scale factor and units. For example, you could create\na map that uses \u2018d\u2019 or \u2018D\u2019 to represent the decimal point in numbers without\nscale factors rather than \u2018r\u2019, \u2018c\u2019, etc.  For example:</p>\n<pre>&gt;&gt;&gt; set_prefs(rkm_maps=dict(d=('', ''), D=('', '')))\n&gt;&gt;&gt; from_rkm('6d8')\nQuantity('6.8')\n\n&gt;&gt;&gt; from_rkm('2d5')\nQuantity('2.5')\n</pre>\n<p>Passing <em>None</em> for the value of a map returns it to its default value.</p>\n<p>If <em>rkm_codes</em> encounters a RKM base code character that is not in the map, it\nsimply uses that character. In this way, scale factors are handled:</p>\n<pre>&gt;&gt;&gt; from_rkm('6k8')\nQuantity('6.8k')\n</pre>\n<p>When converting from Quantities to RKM codes, you can override the default\nmappings from units to RKM base code characters. The default mapping maps \u2018\u03a9\u2019\nand \u2018Ohm\u2019 to \u2018r\u2019, \u2018F\u2019 to \u2018c\u2019, \u2018H\u2019 to \u2018l\u2019, \u2018V\u2019 to \u2018v\u2019, and \u2018A\u2019 to \u2018i\u2019.  However,\nyou may prefer uppercase base characters, which is more in alignment with the\noriginal standard. To get that, you can use something like this:</p>\n<pre>&gt;&gt;&gt; rkm_base_code_mappings = {\n...     '\u03a9': 'R',\n...     'Ohm': 'R',\n...     'F': 'C',\n...     'H': 'L',\n...     'V': 'V',\n...     'A': 'I',\n... }\n&gt;&gt;&gt; set_prefs(rkm_maps=IEC60062_MAPS, units_to_rkm_base_code=rkm_base_code_mappings)\n&gt;&gt;&gt; r = from_rkm('k0012')\n&gt;&gt;&gt; to_rkm(r)\n'1R2'\n</pre>\n<p>You can control the scale factors used by to_rkm() by setting <em>map_sf</em> using\n<em>set_prefs</em>. The default maps \u2018u\u2019 to \u2018\u03bc\u2019 and \u2018k\u2019 to \u2018K\u2019. You might wish to\nprevent the use of \u2018\u03bc\u2019 while retaining the use of \u2018K\u2019, which you can do with:</p>\n<pre>&gt;&gt;&gt; set_prefs(map_sf=dict(u='\u00b5'))\n&gt;&gt;&gt; c = from_rkm('5u')\n&gt;&gt;&gt; to_rkm(c)\n'5\u00b5'\n</pre>\n</div>\n<div id=\"finding-rkm-codes\">\n<h2>Finding RKM Codes</h2>\n<p><em>find_rkm</em> is available for finding the RKM codes embedded in text strings.\nUsing it, you can iterate through all the numbers specified using RKM:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from rkm_codes import find_rkm\n</pre>\n<pre>&gt;&gt;&gt; text = '''\n...     An RKM code that may include explicitly specified. Examples of\n...     acceptable RKM codes for resistance include:   R47 (0.47 \u03a9), 4R7\n...     (4.7 \u03a9), 470R (470 \u03a9), 4K7 (4.7 k\u03a9), 47K (47 k\u03a9), 47K3 (47.3 k\u03a9),\n...     470K (470 k\u03a9), and 4M7 (4.7 M\u03a9).\n... '''\n&gt;&gt;&gt; for num in find_rkm(text):\n...     print(num)\n470 m\u03a9\n4.7 \u03a9\n470 \u03a9\n4.7 k\u03a9\n47 k\u03a9\n47.3 k\u03a9\n470 k\u03a9\n4.7 M\u03a9\n</pre>\n</blockquote>\n<p>When the RKM code is not isolated by punctuation or spaces it can get confused\nby leading and trailing text.  You can often resolve this issue by restricting\nthe matches to either the leading or trailing digit forms of the RKM code. Do so\nby specifying either \u2018ld\u2019 or \u2018td\u2019 as a second argument.  For example:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; for num in find_rkm('sink200nA'):\n...     print(num)\n200 msink\n</pre>\n<pre>&gt;&gt;&gt; for num in find_rkm('sink200nA', 'ld'):\n...     print(num)\n200 nA\n</pre>\n</blockquote>\n</div>\n<div id=\"pin-name-generator-example\">\n<h2>Pin Name Generator Example</h2>\n<p>As a practical example of the use of RKM codes, imagine wanting a program that\ncreates pin names for an electrical circuit based on a naming convention.  It\nwould take a table of pin characteristics that are used to create the names.\nFor example:</p>\n<pre>&gt;&gt;&gt; from quantiphy import Quantity\n&gt;&gt;&gt; from rkm_codes import to_rkm, set_prefs as set_rkm_prefs\n\n&gt;&gt;&gt; pins = [\n...     dict(kind='ibias', direction='out', polarity='sink', dest='dac', value='250nA'),\n...     dict(kind='ibias', direction='out', polarity='src', dest='rampgen', value='2.5\u03bcA'),\n...     dict(kind='vref', direction='out', dest='dac', value='1.25V'),\n...     dict(kind='vdda', direction='in', value='2.5V'),\n... ]\n&gt;&gt;&gt; set_rkm_prefs(map_sf={}, units_to_rkm_base_code=None, show_units=True, prec=2)\n\n&gt;&gt;&gt; for pin in pins:\n...     components = []\n...     if 'value' in pin:\n...         pin['VALUE'] = to_rkm(Quantity(pin['value']))\n...     for name in ['dest', 'kind', 'direction', 'VALUE', 'polarity']:\n...         if name in pin:\n...             components.append(pin[name])\n...     print('_'.join(components))\ndac_ibias_out_250nA_sink\nrampgen_ibias_out_2uA5_src\ndac_vref_out_1V25\nvdda_in_2V5\n</pre>\n</div>\n<div id=\"releases\">\n<h2>Releases</h2>\n<dl>\n<dt><strong>Latest development release</strong>:</dt>\n<dd><div>\n<div>Version: 0.5.0</div>\n<div>Released: 2020-03-03</div>\n</div>\n</dd>\n<dt><strong>0.5 (2020-02-01)</strong>:</dt>\n<dd><ul>\n<li>Allow argument to <em>to_rkm()</em> to be a string or simple number</li>\n<li>Added <em>strip_code</em> preference</li>\n<li>With small numbers show 0 rather than exponent</li>\n</ul>\n</dd>\n<dt><strong>0.4 (2019-08-29)</strong>:</dt>\n<dd><ul>\n<li>added <em>find_rkm()</em></li>\n</ul>\n</dd>\n<dt><strong>0.3 (2019-08-23)</strong>:</dt>\n<dd><ul>\n<li>move the units to the middle of the number with the scale factor</li>\n<li>added support for signed numbers</li>\n<li>added <em>show_units</em>, <em>strip_zeros</em>, <em>minus_sign</em>, and <em>prec</em> to preferences</li>\n<li>this release is not backward compatible; units at the end of the number\nare no longer supported</li>\n</ul>\n</dd>\n<dt><strong>0.2 (2018-09-14)</strong>:</dt>\n<dd><ul>\n<li>fixed issue in <em>set_prefs()</em></li>\n</ul>\n</dd>\n<dt><strong>0.1 (2018-09-12)</strong>:</dt>\n<dd><ul>\n<li>initial release</li>\n</ul>\n</dd>\n</dl>\n</div>\n\n          </div>"}, "last_serial": 6745839, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "9e6f73b0059f35e951529ae8481db418", "sha256": "037a4b69ceffb231e02a64bd782f357e69d5defbd4d0ada821c19cfba8feca60"}, "downloads": -1, "filename": "rkm_codes-0.1.0.tar.gz", "has_sig": true, "md5_digest": "9e6f73b0059f35e951529ae8481db418", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6956, "upload_time": "2018-09-13T01:58:20", "upload_time_iso_8601": "2018-09-13T01:58:20.741152Z", "url": "https://files.pythonhosted.org/packages/41/6f/e64b95bb84643b876cf9ba7e6cfcd573b78006ba50069f412bb4fdabf61e/rkm_codes-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "1b4cb1636d3f9a2e3264b84615e1a322", "sha256": "0047a78e17b19e2c9bf05042235939dc3d770e27eaaed56e75c8fb663f7f64de"}, "downloads": -1, "filename": "rkm_codes-0.2.0.tar.gz", "has_sig": true, "md5_digest": "1b4cb1636d3f9a2e3264b84615e1a322", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7583, "upload_time": "2018-09-14T14:32:10", "upload_time_iso_8601": "2018-09-14T14:32:10.892908Z", "url": "https://files.pythonhosted.org/packages/cc/02/89768dd139255dad1eb9cd1c5505166beb320227762e6b08a8e24867ea94/rkm_codes-0.2.0.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "4f57bc47b21b4b51d059f67340228607", "sha256": "dc719867b1d1f6329703c8d5dd576fb610f279b964569ca613cec1f41b80c0a3"}, "downloads": -1, "filename": "rkm_codes-0.5.0.tar.gz", "has_sig": false, "md5_digest": "4f57bc47b21b4b51d059f67340228607", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13758, "upload_time": "2020-03-04T06:55:00", "upload_time_iso_8601": "2020-03-04T06:55:00.339194Z", "url": "https://files.pythonhosted.org/packages/5d/55/c4f82ae6562d6c1d1431aa12e23c8df385343c33612b3ad30ea57caff325/rkm_codes-0.5.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4f57bc47b21b4b51d059f67340228607", "sha256": "dc719867b1d1f6329703c8d5dd576fb610f279b964569ca613cec1f41b80c0a3"}, "downloads": -1, "filename": "rkm_codes-0.5.0.tar.gz", "has_sig": false, "md5_digest": "4f57bc47b21b4b51d059f67340228607", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13758, "upload_time": "2020-03-04T06:55:00", "upload_time_iso_8601": "2020-03-04T06:55:00.339194Z", "url": "https://files.pythonhosted.org/packages/5d/55/c4f82ae6562d6c1d1431aa12e23c8df385343c33612b3ad30ea57caff325/rkm_codes-0.5.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:02:20 2020"}