{"info": {"author": "", "author_email": "pydavid@baguette.io", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Intended Audience :: System Administrators", "License :: OSI Approved :: BSD License", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.6"], "description": "==============\nbaguette-olite\n==============\n\n.. image:: https://travis-ci.org/baguette-io/baguette-olite.svg?branch=master\n    :target: https://travis-ci.org/baguette-io/baguette-olite\n\nPython wrapper for gitolite. Fork from https://github.com/PressLabs/pyolite.\n\nEasy and simple to user, just `pip install baguette-olite`.\n\nGitolite Setup Prereqs\n======================\n\nUsing Pyolite is very easy, but requires some initial set up. First, your **gitolite-admin** repo must contain a directory called `repos` and another one called \n`groups`, and all `.conf` files in these directories should be included in your `gitolite.conf` file. For example, your **gitolite-admin** repo might have the following structure:\n\n::\n\n    \u251c\u2500\u2500 gitolite.conf\n    \u2514\u2500\u2500 repos\n        \u2514\u2500\u2500 [ empty ]\n    \u2514\u2500\u2500 groups\n        \u2514\u2500\u2500 [ empty ]\n\nAnd your `gitolite.conf` file might look like this:\n\n::\n\n    repo gitolite-admin\n        RW+     =   admin\n\n    repo testing\n        RW+     =   @all\n\n    include\t    \"repos/*.conf\"\n    include\t    \"groups/*.conf\"\n\nThis is required because Pyolite makes changes to files only inside the **repos** and **groups** directories.\n\nRepository API\n==============\n\nFirst, we need to initialize a `pyolite` object with the path to `gitolite`'s repository.\n\n::\n\n    from pyolite import Pyolite\n\n    # initial olite object\n    admin_repository = '/home/absolute/path/to/gitolite/repo/'\n    olite = Pyolite(admin_repository=admin_repository)\n\nAfter that, we can create and get a repo using `create` and `get` methods.\n\n::\n\n    # create a repo\n    repo = olite.repos.get('my_repo')\n    repo = olite.repos.create('ydo')\n\n    # List existing Pyolite repos\n    repos = olite.repos.all()\n    for repo_it in repos:\n        print(repo_it.name)\n\n\nEvery repo has an `users` object, in order to facilitate basic operations: adding, editing and removing users from a repository.\n\n::\n\n    print(\"Repo's users: %s\" % repo.users)\n    # list a repo's users\n    users_as_list = repo.users.list()\n\n    # add a new user\n    user = olite.users.create(name='bob', key_path=\"~/.ssh/third_rsa.pub\")\n    repo.users.add(olite.users.get('admin'), permission='W+')\n    repo.users.add('bob', permission='R')\n\n    # change user's permissions\n    repo.users.edit(olite.users.get('admin'), permission='WR+')\n    repo.users.edit('bob', permission='RCW')\n\n    # remove user\n    repo.users.remove('admin')\n\nUsers API\n=========\n\nYou an easly manipulate `users` aswell, using allmost the same API.\n\n::\n\n    from pyolite import Pyolite\n\n    # initial olite object\n    admin_repository = '/home/absolute/path/to/gitolite/repo/'\n    olite = Pyolite(admin_repository=admin_repository)\n\n    # create user object\n    vlad = olite.users.create(name='bob',\n                          key_path='~/.ssh/second_rsa.pub')\n\n    # get user by name\n    vlad = olite.users.get(name='admin')\n\n    # add new key to user\n    vlad.keys.append('/path/to/key')\n    vlad.keys.append('just put the key here')\n\n    # check if user is admin or not\n    print(vlad.is_admin)\n\n    # list user's keys and repos\n    keys_as_list = vlad.list_keys()\n    repos_as_list = vlad.list_repos()\n\n    # delete a user by name\n    deleted_user = olite.users.delete('username')\n    print(deleted_user)\n\nGroups API\n==========\n\nYou an easly manipulate `groups` aswell, using allmost the same API.\n\n::\n\n    from pyolite import Pyolite\n\n    # initial olite object\n    admin_repository = '/home/absolute/path/to/gitolite/repo/'\n    olite = Pyolite(admin_repository=admin_repository)\n\n    # create group object\n    group1 = olite.groups.create('group1')\n    # create is idempotent\n    group1 = olite.groups.create('group1')\n\n    #get or create( `create()` wrapper)\n    group2 = olite.groups.get_or_create('group2')\n    group2 = olite.groups.get_or_create('group2')\n\n    # get group by name\n    group1 = olite.groups.get('group1')\n\n    # list all groups\n    olite.groups.all()\n\n    # delete a group by name\n    olite.groups.delete('group1')\n\n    # add an user to the gorup\n    olite.groups.user_add('group1', 'user1')\n\n    # delete an user from a group\n    olite.groups.user_delete('group1', 'user1')\n\n    # add a group to a repo\n    olite.groups.repo_add('group1', 'repo1', 'RW')\n\n    # delete a group from a repo\n    olite.groups.repo_delete('group1', 'repo1')\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/baguette-io/baguette-olite/", "keywords": "git", "license": "", "maintainer": "", "maintainer_email": "", "name": "baguette-olite", "package_url": "https://pypi.org/project/baguette-olite/", "platform": "", "project_url": "https://pypi.org/project/baguette-olite/", "project_urls": {"Homepage": "https://github.com/baguette-io/baguette-olite/"}, "release_url": "https://pypi.org/project/baguette-olite/0.13/", "requires_dist": null, "requires_python": "", "summary": "Python wrapper for gitolite", "version": "0.13", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/baguette-io/baguette-olite\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/baguette-io/baguette-olite.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3f0b4478b8b6ef78a5cc5df865cdb8c29659d15d/68747470733a2f2f7472617669732d63692e6f72672f62616775657474652d696f2f62616775657474652d6f6c6974652e7376673f6272616e63683d6d6173746572\"></a>\n<p>Python wrapper for gitolite. Fork from <a href=\"https://github.com/PressLabs/pyolite\" rel=\"nofollow\">https://github.com/PressLabs/pyolite</a>.</p>\n<p>Easy and simple to user, just <cite>pip install baguette-olite</cite>.</p>\n<div id=\"gitolite-setup-prereqs\">\n<h2>Gitolite Setup Prereqs</h2>\n<p>Using Pyolite is very easy, but requires some initial set up. First, your <strong>gitolite-admin</strong> repo must contain a directory called <cite>repos</cite> and another one called\n<cite>groups</cite>, and all <cite>.conf</cite> files in these directories should be included in your <cite>gitolite.conf</cite> file. For example, your <strong>gitolite-admin</strong> repo might have the following structure:</p>\n<pre>\u251c\u2500\u2500 gitolite.conf\n\u2514\u2500\u2500 repos\n    \u2514\u2500\u2500 [ empty ]\n\u2514\u2500\u2500 groups\n    \u2514\u2500\u2500 [ empty ]\n</pre>\n<p>And your <cite>gitolite.conf</cite> file might look like this:</p>\n<pre>repo gitolite-admin\n    RW+     =   admin\n\nrepo testing\n    RW+     =   @all\n\ninclude         \"repos/*.conf\"\ninclude         \"groups/*.conf\"\n</pre>\n<p>This is required because Pyolite makes changes to files only inside the <strong>repos</strong> and <strong>groups</strong> directories.</p>\n</div>\n<div id=\"repository-api\">\n<h2>Repository API</h2>\n<p>First, we need to initialize a <cite>pyolite</cite> object with the path to <cite>gitolite</cite>\u2019s repository.</p>\n<pre>from pyolite import Pyolite\n\n# initial olite object\nadmin_repository = '/home/absolute/path/to/gitolite/repo/'\nolite = Pyolite(admin_repository=admin_repository)\n</pre>\n<p>After that, we can create and get a repo using <cite>create</cite> and <cite>get</cite> methods.</p>\n<pre># create a repo\nrepo = olite.repos.get('my_repo')\nrepo = olite.repos.create('ydo')\n\n# List existing Pyolite repos\nrepos = olite.repos.all()\nfor repo_it in repos:\n    print(repo_it.name)\n</pre>\n<p>Every repo has an <cite>users</cite> object, in order to facilitate basic operations: adding, editing and removing users from a repository.</p>\n<pre>print(\"Repo's users: %s\" % repo.users)\n# list a repo's users\nusers_as_list = repo.users.list()\n\n# add a new user\nuser = olite.users.create(name='bob', key_path=\"~/.ssh/third_rsa.pub\")\nrepo.users.add(olite.users.get('admin'), permission='W+')\nrepo.users.add('bob', permission='R')\n\n# change user's permissions\nrepo.users.edit(olite.users.get('admin'), permission='WR+')\nrepo.users.edit('bob', permission='RCW')\n\n# remove user\nrepo.users.remove('admin')\n</pre>\n</div>\n<div id=\"users-api\">\n<h2>Users API</h2>\n<p>You an easly manipulate <cite>users</cite> aswell, using allmost the same API.</p>\n<pre>from pyolite import Pyolite\n\n# initial olite object\nadmin_repository = '/home/absolute/path/to/gitolite/repo/'\nolite = Pyolite(admin_repository=admin_repository)\n\n# create user object\nvlad = olite.users.create(name='bob',\n                      key_path='~/.ssh/second_rsa.pub')\n\n# get user by name\nvlad = olite.users.get(name='admin')\n\n# add new key to user\nvlad.keys.append('/path/to/key')\nvlad.keys.append('just put the key here')\n\n# check if user is admin or not\nprint(vlad.is_admin)\n\n# list user's keys and repos\nkeys_as_list = vlad.list_keys()\nrepos_as_list = vlad.list_repos()\n\n# delete a user by name\ndeleted_user = olite.users.delete('username')\nprint(deleted_user)\n</pre>\n</div>\n<div id=\"groups-api\">\n<h2>Groups API</h2>\n<p>You an easly manipulate <cite>groups</cite> aswell, using allmost the same API.</p>\n<pre>from pyolite import Pyolite\n\n# initial olite object\nadmin_repository = '/home/absolute/path/to/gitolite/repo/'\nolite = Pyolite(admin_repository=admin_repository)\n\n# create group object\ngroup1 = olite.groups.create('group1')\n# create is idempotent\ngroup1 = olite.groups.create('group1')\n\n#get or create( `create()` wrapper)\ngroup2 = olite.groups.get_or_create('group2')\ngroup2 = olite.groups.get_or_create('group2')\n\n# get group by name\ngroup1 = olite.groups.get('group1')\n\n# list all groups\nolite.groups.all()\n\n# delete a group by name\nolite.groups.delete('group1')\n\n# add an user to the gorup\nolite.groups.user_add('group1', 'user1')\n\n# delete an user from a group\nolite.groups.user_delete('group1', 'user1')\n\n# add a group to a repo\nolite.groups.repo_add('group1', 'repo1', 'RW')\n\n# delete a group from a repo\nolite.groups.repo_delete('group1', 'repo1')\n</pre>\n</div>\n\n          </div>"}, "last_serial": 3055971, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "a570dcd66e0e43be9509512c872f4201", "sha256": "40f50e53f61839067a88785070b416c96e49f873bcff846896291e323aa7a0de"}, "downloads": -1, "filename": "baguette-olite-0.1.tar.gz", "has_sig": false, "md5_digest": "a570dcd66e0e43be9509512c872f4201", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12283, "upload_time": "2017-07-25T09:35:11", "upload_time_iso_8601": "2017-07-25T09:35:11.599443Z", "url": "https://files.pythonhosted.org/packages/e3/89/a55a31785f7f99fcd7b98ba13937a75bbedd05cb1feb6a98ab7813941909/baguette-olite-0.1.tar.gz", "yanked": false}], "0.11": [{"comment_text": "", "digests": {"md5": "37449bdf8d3b3d25898f95bea6025ea1", "sha256": "63fd4095a0c2ca9a8f45c1b5e1f51616f09e77147d00c4a4b56d2a4c20392e88"}, "downloads": -1, "filename": "baguette-olite-0.11.tar.gz", "has_sig": false, "md5_digest": "37449bdf8d3b3d25898f95bea6025ea1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14412, "upload_time": "2017-07-27T20:50:56", "upload_time_iso_8601": "2017-07-27T20:50:56.452971Z", "url": "https://files.pythonhosted.org/packages/34/e1/aa94201b269af7966e059be0badc9d69ee619ff8b02c9c6c4633a9748aeb/baguette-olite-0.11.tar.gz", "yanked": false}], "0.12": [{"comment_text": "", "digests": {"md5": "15889c14e8c143994c3b4930d5a08ece", "sha256": "835998fe21ee3b2197137e6baaaa741e2a85afdbd960e79eeea3e56c653ed455"}, "downloads": -1, "filename": "baguette-olite-0.12.tar.gz", "has_sig": false, "md5_digest": "15889c14e8c143994c3b4930d5a08ece", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14419, "upload_time": "2017-07-28T09:47:38", "upload_time_iso_8601": "2017-07-28T09:47:38.358827Z", "url": "https://files.pythonhosted.org/packages/95/c0/76be72773f5c5b8ba573b8d99d9c5b3100723195338a4dea3cabdf5e1d53/baguette-olite-0.12.tar.gz", "yanked": false}], "0.13": [{"comment_text": "", "digests": {"md5": "6c3a9dfd7eabcdbe22e62658a4b837c3", "sha256": "2345689e45a07bb00a82daaee1c5c205c6a5928c1e2ca5441d16aafb5455e261"}, "downloads": -1, "filename": "baguette-olite-0.13.tar.gz", "has_sig": false, "md5_digest": "6c3a9dfd7eabcdbe22e62658a4b837c3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14731, "upload_time": "2017-07-28T15:20:57", "upload_time_iso_8601": "2017-07-28T15:20:57.576549Z", "url": "https://files.pythonhosted.org/packages/5f/c1/4da7b7af677838cf961d5dc99983874328c4aa4566d5fd8925e789481b5a/baguette-olite-0.13.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6c3a9dfd7eabcdbe22e62658a4b837c3", "sha256": "2345689e45a07bb00a82daaee1c5c205c6a5928c1e2ca5441d16aafb5455e261"}, "downloads": -1, "filename": "baguette-olite-0.13.tar.gz", "has_sig": false, "md5_digest": "6c3a9dfd7eabcdbe22e62658a4b837c3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14731, "upload_time": "2017-07-28T15:20:57", "upload_time_iso_8601": "2017-07-28T15:20:57.576549Z", "url": "https://files.pythonhosted.org/packages/5f/c1/4da7b7af677838cf961d5dc99983874328c4aa4566d5fd8925e789481b5a/baguette-olite-0.13.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:15:03 2020"}