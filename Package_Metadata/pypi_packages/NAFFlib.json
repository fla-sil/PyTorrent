{"info": {"author": "Konstantinos Paraschou", "author_email": "konstantinos.paraschou@cern.ch", "bugtrack_url": null, "classifiers": [], "description": "# NAFFlib\nAuthors:  \n* **Sofia Kostoglou**  \n* **Konstantinos Paraschou**\n* **Dario Pellegrini** \n\nMaintained by **Konstantinos Paraschou**.\n\nNAFFlib is a library written in C and wrapped in \nPython which includes an implementation of the NAFF \nalgorithm. \n[[1]](https://www.sciencedirect.com/science/article/pii/001910359090084M) \n[[2]](http://jacow.org/ipac2017/papers/thpab044.pdf)\n\n## Installation\n### Automatic\n```\n$ pip install NAFFlib\n```\nDepending on the OS, you might need to \n```\n$ pip3 install NAFFlib\n```\nfor Python3 support.\n\n### Local Installation\n```\n$ git clone git@github.com:PyCOMPLETE/NAFFlib.git\n$ cd NAFFlib\n$ make\n$ cd ..\n```\nto compile NAFFlib_c.so (Python3) and NAFFlib2_c.so (Python2) shared objects.\nIf either of Python2 or Python3 is not supported in the OS, the line\n```\n$ make\n```\nshould be replaced with either\n```\n$ make py2\n```\nfor Python2 support or\n```\n$ make py3\n```\nfor Python3 support.\n\n***\nThe NAFFlib module can be imported by:\n\n```\nimport NAFFlib\n```\n\n### Functions in NAFFlib:\n1. ```q = NAFFlib.get_tune(x, order, interpolation)```\nwhere:  \n- ```x``` is the (complex or real) input signal in the form of a one-dimensional non-empty numpy array.\n- ```order``` is the value of the Hann's window order parameter to be used with 0 corresponding to no window. This variable is optional and its default value is equal to 2.\n- ```interpolation``` is a boolean variable denoting whether the 7-point Newton-Cotes integration rule should be used. This variable is optional and its default value is equal to 0. It is not recommended that this is set 1.\n\nreturns the single positive frequency ```q``` that is dominant in the Fourier spectrum.\n\n\n2. ```Q, A, B = NAFFlib.get_tunes(x, N, order, interpolation)```\nwhere:  \n- ```x``` is the (complex or real) input signal in the form of a one-dimensional non-empty numpy array.\n- ```N``` is the number of frequencies to be found in the signal. This variable is optional and by default is set to 1.\n- ```order``` is the value of the Hann's window order parameter to be used with 0 corresponding to no window. This variable is optional and its default value is equal to 2.\n- ```interpolation``` is a boolean variable denoting whether the 7-point Newton-Cotes integration rule should be used. This variable is optional and its default value is equal to 0. It is not recommended that this is set 1.\n\nreturns three one-dimensional numpy arrays ```Q, A, B``` of size N with the first (being real-valued) containing the most dominant positive frequencies in the Fourier spectrum, the second containing the complex-valued amplitudes of the corresponding frequency and the third containing the complex-valued amplitudes of the negative of the corresponding frequency. It is recommended that this function is used with a real-valued input where the Fourier power spectrum is guaranteed to be an even function.\n\n\n3. ```Q, A = NAFFlib.get_tunes_all(x, N, order, interpolation)```\nwhere:  \n- ```x``` is the (complex or real) input signal in the form of a one-dimensional non-empty numpy array.\n- ```N``` is the number of frequencies to be found in the signal. This variable is optional and by default is set to 1.\n- ```order``` is the value of the Hann's window order parameter to be used with 0 corresponding to no window. This variable is optional and its default value is equal to 2.\n- ```interpolation``` is a boolean variable denoting whether the 7-point Newton-Cotes integration rule should be used. This variable is optional and its default value is equal to 0. It is not recommended that this is set 1.\n\nreturns two one-dimensional numpy arrays ```Q, A``` of size ```N``` with the first (being real-valued) containing the most dominant (positive or negative) frequencies in the Fourier spectrum and the second containing the complex-valued amplitudes of the corresponding frequency. It is recommended that this function is used with a complex-valued input where the Fourier power spectrum is not necessarily an even function. It should be emphasized that *positive and negative frequencies are treated separately*. \n\n4. ```Q = NAFFlib.multiparticle_tunes(x, order, interpolation)```\nwhere:  \n- ```x``` is an array of (complex or real) input signals in the form of a two-dimensional non-empty numpy array. The first axis should correspond to the id of each different track while the second axis should correspond to the turn number.\n- ```order``` is the value of the Hann's window order parameter to be used with 0 corresponding to no window. This variable is optional and its default value is equal to 2.\n- ```interpolation``` is a boolean variable denoting whether the 7-point Newton-Cotes integration rule should be used. This variable is optional and its default value is equal to 0. It is not recommended that this is set 1.\n\nreturns a one-dimensional numpy array ```Q``` of size ```len(x)``` which contains the single most dominant frequency of the different tracks.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/PyCOMPLETE/NAFFlib", "keywords": "frequency analysis naff", "license": "LGPLv2.1", "maintainer": "", "maintainer_email": "", "name": "NAFFlib", "package_url": "https://pypi.org/project/NAFFlib/", "platform": "", "project_url": "https://pypi.org/project/NAFFlib/", "project_urls": {"Homepage": "https://github.com/PyCOMPLETE/NAFFlib"}, "release_url": "https://pypi.org/project/NAFFlib/1.0.2/", "requires_dist": null, "requires_python": "", "summary": "A Python-wrapped C library which implements the NAFF algorithm", "version": "1.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>NAFFlib</h1>\n<p>Authors:</p>\n<ul>\n<li><strong>Sofia Kostoglou</strong></li>\n<li><strong>Konstantinos Paraschou</strong></li>\n<li><strong>Dario Pellegrini</strong></li>\n</ul>\n<p>Maintained by <strong>Konstantinos Paraschou</strong>.</p>\n<p>NAFFlib is a library written in C and wrapped in\nPython which includes an implementation of the NAFF\nalgorithm.\n<a href=\"https://www.sciencedirect.com/science/article/pii/001910359090084M\" rel=\"nofollow\">[1]</a>\n<a href=\"http://jacow.org/ipac2017/papers/thpab044.pdf\" rel=\"nofollow\">[2]</a></p>\n<h2>Installation</h2>\n<h3>Automatic</h3>\n<pre><code>$ pip install NAFFlib\n</code></pre>\n<p>Depending on the OS, you might need to</p>\n<pre><code>$ pip3 install NAFFlib\n</code></pre>\n<p>for Python3 support.</p>\n<h3>Local Installation</h3>\n<pre><code>$ git clone git@github.com:PyCOMPLETE/NAFFlib.git\n$ cd NAFFlib\n$ make\n$ cd ..\n</code></pre>\n<p>to compile NAFFlib_c.so (Python3) and NAFFlib2_c.so (Python2) shared objects.\nIf either of Python2 or Python3 is not supported in the OS, the line</p>\n<pre><code>$ make\n</code></pre>\n<p>should be replaced with either</p>\n<pre><code>$ make py2\n</code></pre>\n<p>for Python2 support or</p>\n<pre><code>$ make py3\n</code></pre>\n<p>for Python3 support.</p>\n<hr>\n<p>The NAFFlib module can be imported by:</p>\n<pre><code>import NAFFlib\n</code></pre>\n<h3>Functions in NAFFlib:</h3>\n<ol>\n<li><code>q = NAFFlib.get_tune(x, order, interpolation)</code>\nwhere:</li>\n</ol>\n<ul>\n<li><code>x</code> is the (complex or real) input signal in the form of a one-dimensional non-empty numpy array.</li>\n<li><code>order</code> is the value of the Hann's window order parameter to be used with 0 corresponding to no window. This variable is optional and its default value is equal to 2.</li>\n<li><code>interpolation</code> is a boolean variable denoting whether the 7-point Newton-Cotes integration rule should be used. This variable is optional and its default value is equal to 0. It is not recommended that this is set 1.</li>\n</ul>\n<p>returns the single positive frequency <code>q</code> that is dominant in the Fourier spectrum.</p>\n<ol>\n<li><code>Q, A, B = NAFFlib.get_tunes(x, N, order, interpolation)</code>\nwhere:</li>\n</ol>\n<ul>\n<li><code>x</code> is the (complex or real) input signal in the form of a one-dimensional non-empty numpy array.</li>\n<li><code>N</code> is the number of frequencies to be found in the signal. This variable is optional and by default is set to 1.</li>\n<li><code>order</code> is the value of the Hann's window order parameter to be used with 0 corresponding to no window. This variable is optional and its default value is equal to 2.</li>\n<li><code>interpolation</code> is a boolean variable denoting whether the 7-point Newton-Cotes integration rule should be used. This variable is optional and its default value is equal to 0. It is not recommended that this is set 1.</li>\n</ul>\n<p>returns three one-dimensional numpy arrays <code>Q, A, B</code> of size N with the first (being real-valued) containing the most dominant positive frequencies in the Fourier spectrum, the second containing the complex-valued amplitudes of the corresponding frequency and the third containing the complex-valued amplitudes of the negative of the corresponding frequency. It is recommended that this function is used with a real-valued input where the Fourier power spectrum is guaranteed to be an even function.</p>\n<ol>\n<li><code>Q, A = NAFFlib.get_tunes_all(x, N, order, interpolation)</code>\nwhere:</li>\n</ol>\n<ul>\n<li><code>x</code> is the (complex or real) input signal in the form of a one-dimensional non-empty numpy array.</li>\n<li><code>N</code> is the number of frequencies to be found in the signal. This variable is optional and by default is set to 1.</li>\n<li><code>order</code> is the value of the Hann's window order parameter to be used with 0 corresponding to no window. This variable is optional and its default value is equal to 2.</li>\n<li><code>interpolation</code> is a boolean variable denoting whether the 7-point Newton-Cotes integration rule should be used. This variable is optional and its default value is equal to 0. It is not recommended that this is set 1.</li>\n</ul>\n<p>returns two one-dimensional numpy arrays <code>Q, A</code> of size <code>N</code> with the first (being real-valued) containing the most dominant (positive or negative) frequencies in the Fourier spectrum and the second containing the complex-valued amplitudes of the corresponding frequency. It is recommended that this function is used with a complex-valued input where the Fourier power spectrum is not necessarily an even function. It should be emphasized that <em>positive and negative frequencies are treated separately</em>.</p>\n<ol>\n<li><code>Q = NAFFlib.multiparticle_tunes(x, order, interpolation)</code>\nwhere:</li>\n</ol>\n<ul>\n<li><code>x</code> is an array of (complex or real) input signals in the form of a two-dimensional non-empty numpy array. The first axis should correspond to the id of each different track while the second axis should correspond to the turn number.</li>\n<li><code>order</code> is the value of the Hann's window order parameter to be used with 0 corresponding to no window. This variable is optional and its default value is equal to 2.</li>\n<li><code>interpolation</code> is a boolean variable denoting whether the 7-point Newton-Cotes integration rule should be used. This variable is optional and its default value is equal to 0. It is not recommended that this is set 1.</li>\n</ul>\n<p>returns a one-dimensional numpy array <code>Q</code> of size <code>len(x)</code> which contains the single most dominant frequency of the different tracks.</p>\n\n          </div>"}, "last_serial": 6934909, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "b17c21746c1a38f6fb3f13f61ea51017", "sha256": "5edbd1b3faa4f3969b127b4ea0e98128b5c389ff1dab8f1077eceed9b9b2b61c"}, "downloads": -1, "filename": "NAFFlib-1.0.0.tar.gz", "has_sig": false, "md5_digest": "b17c21746c1a38f6fb3f13f61ea51017", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9090, "upload_time": "2018-12-04T16:19:24", "upload_time_iso_8601": "2018-12-04T16:19:24.102345Z", "url": "https://files.pythonhosted.org/packages/a7/86/444ac39b9b4a605a186ab681b63fe92ccf320fa27227392b4d57d9e8386c/NAFFlib-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "2da678ec0ccd84d07704f87bef847bd0", "sha256": "73d6d3fa376da5f07100f2a1af86958e7218b7e3891d468d8e096c8008f59e67"}, "downloads": -1, "filename": "NAFFlib-1.0.1.tar.gz", "has_sig": false, "md5_digest": "2da678ec0ccd84d07704f87bef847bd0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9085, "upload_time": "2018-12-11T09:46:36", "upload_time_iso_8601": "2018-12-11T09:46:36.406740Z", "url": "https://files.pythonhosted.org/packages/3b/06/6c1d375f7e70c36e4113b326c348be6068389efdc8d7e68ac23088df4102/NAFFlib-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "2f9336d444ad7d1cb8a128ae9434fd15", "sha256": "4295f7048bde966bde7450737159b346f59b2e1a6baab1491d9b5302b8ab3141"}, "downloads": -1, "filename": "NAFFlib-1.0.2.tar.gz", "has_sig": false, "md5_digest": "2f9336d444ad7d1cb8a128ae9434fd15", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9136, "upload_time": "2020-04-02T11:12:25", "upload_time_iso_8601": "2020-04-02T11:12:25.129092Z", "url": "https://files.pythonhosted.org/packages/26/3c/435e73321464ed246291811adf59f6837daef109012f6361d10ff30554db/NAFFlib-1.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2f9336d444ad7d1cb8a128ae9434fd15", "sha256": "4295f7048bde966bde7450737159b346f59b2e1a6baab1491d9b5302b8ab3141"}, "downloads": -1, "filename": "NAFFlib-1.0.2.tar.gz", "has_sig": false, "md5_digest": "2f9336d444ad7d1cb8a128ae9434fd15", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9136, "upload_time": "2020-04-02T11:12:25", "upload_time_iso_8601": "2020-04-02T11:12:25.129092Z", "url": "https://files.pythonhosted.org/packages/26/3c/435e73321464ed246291811adf59f6837daef109012f6361d10ff30554db/NAFFlib-1.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:47:53 2020"}