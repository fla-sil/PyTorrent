{"info": {"author": "Acrisel Team", "author_email": "support@acrisel.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Other Environment", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Libraries :: Application Frameworks"], "description": "=======\nEventor\n=======\n\n--------------------------------------------------------\nProgramming interface to use events to synchronize tasks\n--------------------------------------------------------\n\n.. contents:: Table of Contents\n   :depth: 1\n\nOverview\n========\n\n    *Eventor* provides programmer with interface to create events, steps and associations of these artifacts with to create a flow.\n\n    It would be easier to show an example.\n\nSimple Example\n--------------\n\n    .. code:: python\n        :number-lines:\n\n        import eventor as evr\n        import logging\n        from acrilib import LoggerAddHostFilter\n        \n        appname = os.path.basename(__file__)\n        logger = logging.getLogger(appname)\n\n        def construct_and_run():\n\n            def prog(progname):\n                logger.info(\"doing what %s is doing\" % progname)\n                return progname\n\n            ev = evr.Eventor(name=appname)\n\n            ev1s = ev.add_event('run_step1')\n            ev2s = ev.add_event('run_step2')\n            ev3s = ev.add_event('run_step3')\n\n            s1 = ev.add_step('s1', func=prog, kwargs={'progname': 'prog1'},\n                           triggers={evr.StepStatus.success: (ev2s,),})\n            s2 = ev.add_step('s2', func=prog, kwargs={'progname': 'prog2'},\n                           triggers={evr.StepStatus.success: (ev3s,), })\n            s3 = ev.add_step('s3', func=prog, kwargs={'progname': 'prog3'},)\n\n            ev.add_assoc(ev1s, s1)\n            ev.add_assoc(ev2s, s2)\n            ev.add_assoc(ev3s, s3)\n\n            ev.trigger_event(ev1s, 1)\n            ev.run()\n            ev.close()\n\n\n        if __name__ == '__main__':\n            construct_and_run()\n\nExample Output\n--------------\n\n    The above example with provide the following log output.\n\n    .. code::\n\n        [ 2016-11-30 10:07:48,612 ][ INFO ][ Running step s1[1] ][ main.task_wrapper ]\n        [ 2016-11-30 10:07:48,612 ][ INFO ][ Step completed s1[1], status: success, result 'prog1' ][ main.task_wrapper ]\n        [ 2016-11-30 10:07:50,649 ][ INFO ][ Running step s2[1] ][ main.task_wrapper ]\n        [ 2016-11-30 10:07:50,649 ][ INFO ][ Step completed s2[1], status: success, result 'prog2' ][ main.task_wrapper ]\n        [ 2016-11-30 10:07:52,688 ][ INFO ][ Running step s3[1] ][ main.task_wrapper ]\n        [ 2016-11-30 10:07:52,689 ][ INFO ][ Step completed s3[1], status: success, result 'prog3' ][ main.task_wrapper ]\n        [ 2016-11-30 10:07:53,700 ][ INFO ][ Processing finished with: success ][ main.loop_session_start ]\n\n    Note: actual logging includes *hostname* and and *procname*, e.g., \"[ mbp02 ][ MainProcess ]\". These information was omitted from logging herein.\n\nExample Highlights\n------------------\n\n    *Eventor* (line 10) defines eventor using default database configuration (see bellow).\n\n    *add_event* (e.g., line 12) adds an event named **run_step1** to the respective eventor object.\n\n    *add_step* (e.g., line 16) adds step **s1** which when triggered would run predefined function **prog** with key words parameters **progname='prog1'**.\n    Additionally, when step would end, if successful, it would trigger event **evs2**\n\n    *add_assoc* (e.g., line 22) links event **evs1** and step **s1**.\n\n    *trigger_event* (line 26) marks event **evs1**; when triggers, event is associated with sequence. This would allow multiple invocation.\n\n    *ev()* (line 27) invoke Eventor process that would looks for triggers and tasks to act upon. It ends when there is nothing to do.\n    \n    *logger* and *Eventor* names (lines 6 and 14), Eventor is using hierarchical logger based on Eventor name argument. As such naming convention needs to be aligned among all the files participating with the run.\n\nProgram Run File\n================\n\n    One important artifact used in Eventor is program's runner file.  Runner file database (sqlite) will be created at execution, if not directed otherwise, at the location of the run (UNIX's pwd).\n    This file contains information on tasks and triggers that are used in the run and in recovery.\n\nEventor Interface\n=================\n\nEventor Class Initiator\n-----------------------\n\n    .. code-block:: python\n\n        Eventor(name='', store='', run_mode=RUM_RESTART, recovery_run=None, run_id='', config={})\n\nArgs\n````\n\n    *name*: string id for Eventor object initiated.\n\n    *store*: Eventor mechanism is built to work with SQLAlchemy. If store is provided, Eventor first check if store is a tag within config under **EVENTOR.DATABASE** (or whatever the environment variables *EVENTOR_CONFIG_TAG* and *EVENTOR_DB_CONFIG_TAG* points to) section. If the tag exists, it will pick its configuration as database configuration. If store is empty, Eventor will try to look for *default* database configuration. Otherwise, *store* will be considered as a path to file that would store runnable (sqlite) information; If not provided, calling module path and name will be used with '.db' extension instead of '.py'.\n\n    *run_mode*: can be either *RUN_RESTART* (default) or *RUN_RECOVER*; in restart, new instance or the run will be created. In recovery, if *shared_db* is set, run_id or the recovered program must be provided.\n\n    *recovery_run*: if *RUN_RECOVER* is used, *recovery_run* will indicate specific instance of previously recovery run that would be executed.If not provided, latest run would be used.\n\n    *run_id*: unique ID for the program run (excluding recovery_run).  It is mandatory in *shared_db* mode, and if not provided, will be generated.\n\n    config: keyword dictionary of default configurations.  Available keywords and their default values:\n\n        +---------------------+---------------+--------------------------------------------------+\n        | Name                | Default       | Description                                      |\n        |                     | Value         |                                                  |\n        +=====================+===============+==================================================+\n        | workdir             | /tmp          | place to create necessary artifacts (not in use) |\n        +---------------------+---------------+--------------------------------------------------+\n        | logdir              | /tmp          | place to create debug and error log files        |\n        +---------------------+---------------+--------------------------------------------------+\n        | task_construct      | mp.Process    | method to use for execution of steps             |\n        +---------------------+---------------+--------------------------------------------------+\n        | max_concurrent      | 1             | maximum concurrent processing, if value <1, no   |\n        |                     |               | limit will be pose                               |\n        +---------------------+---------------+--------------------------------------------------+\n        | stop_on_exception   | True          | if an exception occurs in a step, stop           |\n        |                     |               | all processes.  If True, new processes will not  |\n        |                     |               | start.  But running processes will be permitted  |\n        |                     |               | to finish                                        |\n        +---------------------+---------------+--------------------------------------------------+\n        | sleep_between_loops | 1             | seconds to sleep between iteration of checking   |\n        |                     |               | triggers and tasks                               |\n        +---------------------+---------------+--------------------------------------------------+\n        | shared_db           | False         | if set, db must not be in memory. signals that   |\n        |                     |               | multiple programs will use the same database     |\n        |                     |               | tables.                                          |\n        +---------------------+---------------+--------------------------------------------------+\n        | envvar_prefix       | EVENTOR_      | | set prefix for naming environment variable     |\n        |                     |               | | defined for each step:                         |\n        |                     |               | |    {envvar_prefix}STEP_NAME                    |\n        |                     |               | |    {envvar_prefix}STEP_SEQUENCE                |\n        |                     |               | |    {envvar_prefix}STEP_RECOVERY                |\n        |                     |               | |    {envvar_prefix}LOGGER_NAME                  |\n        +---------------------+---------------+--------------------------------------------------+\n        | ssh_config          | ~/.ssh/config | SSH configuration file to use with SSH remote    |\n        |                     |               |    Invocation of steps.                          |\n        +---------------------+---------------+--------------------------------------------------+\n        | ssh_host            |               | SSH host configuration name prime host.          |\n        +---------------------+---------------+--------------------------------------------------+\n        | ssh_port            |               | SSH port to use for SSH connectivity             |\n        +---------------------+---------------+--------------------------------------------------+\n        | LOGGING             |               | dictionary of logging configurations.            |\n        +---------------------+---------------+--------------------------------------------------+\n        | DATABASES           |               | dictionary of database configurations.           |\n        +---------------------+---------------+--------------------------------------------------+\n\nConfiguration file example\n``````````````````````````\n    .. code::\n\n        EVENTOR:\n           debug: False\n           task_construct: process\n           envvar_prefix: EVENTOR_\n           max_concurrent: -1\n           stop_on_exception: True\n           sleep_between_loops: 0.25\n           sequence_arg_name: None\n           day_to_keep_db: 5\n           remote_method: ssh\n           pass_logger_to_task: False\n           shared_db: False\n\n            DATABASES:\n\n                sqfile1:\n                    dialect: sqlite\n                    database: /tmp/runly.db\n\n                pgdb1:\n                    dialect:  postgresql\n                    drivername :  psycopg2\n                    username: pgusername\n                    password: pgpassword\n                    host:     ubuntu-guest-02\n                    port:     5433\n                    database: pyground\n                    schema: play\n\n            LOGGING:\n                logging_level: 10\n                logdir: /var/log/eventor\n                level_formats:\n                    10: ('[ %(asctime)-15s ][ %(host)s ][ %(processName)-11s ][ %(levelname)-7s ]'\n                         '[ %(message)s ][ %(module)s.%(funcName)s(%(lineno)d) ]')\n                    default: ('[ %(asctime)-15s ][ %(host)s ][ %(processName)-11s ]'\n                              '[ %(levelname)-7s ][ %(message)s ]')\n                consolidate: False\n                console: True\n                file_prefix: ''\n                file_suffix: ''\n                file_mode: 'a'\n                maxBytes: 0\n                backupCount: 0\n                encoding: 'utf8'\n                delay: False\n                when: 'h'\n                interval: 1\n                utc: False\n                atTime: 86400\n                \nDatabase Notes\n``````````````\n\n    It is possible to create configuration for sqlite memory with cache=shared. However, SQLAlchemy will not work with it well in threaded and multiprocessing environment.  Hence, at this point, *Eventor* does not support it.\n\n\nEventor *add_event* method\n--------------------------\n\n    .. code-block:: python\n\n        add_event(name, expr=None)\n\nArgs\n````\n\n    *name*: string unique id for event\n\n    *expr*: logical expression 'sqlalchemy' style to automatically raise this expression.\n        syntax:\n\n        .. code ::\n\n            expr : (expr, expr, ...)\n                 | or_(expr, expr, ...)\n                 | event\n\n        - if expression is of the first style, logical *and* will apply.\n        - the second expression will apply logical *or*.\n        - the basic atom in expression is *even* which is the product of *add_event*.\n\nReturns\n```````\n\n    Event object to use in other *add_event* expressions, *add_assoc* methods, or with *add_step* triggers.\n\nEventor *add_step* method\n-------------------------\n\n    .. code-block:: python\n\n        add_step(name, func, args=(), kwargs={}, triggers={}, acquires=[], releases=None, recovery={}, config={})\n\nArgs\n````\n\n    *name*: string unique id for step\n\n    *func*: callable object that would be call at time if step execution\n\n    *args*: tuple of values that will be passed to *func* at calling\n\n    *kwargs*: keywords arguments that will be passed to *func* at calling\n\n    *triggers*: mapping of step statuses to set of events to be triggered as in the following table:\n\n        +---------------+-------------------------------------------+\n        | status        | description                               |\n        +===============+===========================================+\n        | STEP_READY    | set when task is ready to run (triggered) |\n        +---------------+-------------------------------------------+\n        | STEP_ACTIVE   | set when task is running                  |\n        +---------------+-------------------------------------------+\n        | STEP_SUCCESS  | set when task is successful               |\n        +---------------+-------------------------------------------+\n        | STEP_FAILURE  | set when task fails                       |\n        +---------------+-------------------------------------------+\n        | STEP_COMPLETE | stands for success or failure of task     |\n        +---------------+-------------------------------------------+\n\n    *acquires*: list of tuples of resource pool and amount of resources to acquire before starting.\n\n    *releases*: list of tuples of resources pool and amount of resources to release once completed. If None, defaults to *acquires*.  If set to empty list, none of the acquired resources would be released.\n\n    *recovery*: mapping of state status to how step should be handled in recovery:\n\n        +---------------+------------------+------------------------------------------------------+\n        | status        | default          | description                                          |\n        +===============+==================+======================================================+\n        | STEP_READY    | StepReplay.rerun | if in recovery and previous status is ready, rerun   |\n        +---------------+------------------+------------------------------------------------------+\n        | STEP_ACTIVE   | StepReplay.rerun | if in recovery and previous status is active, rerun  |\n        +---------------+------------------+------------------------------------------------------+\n        | STEP_FAILURE  | StepReplay.rerun | if in recovery and previous status is failure, rerun |\n        +---------------+------------------+------------------------------------------------------+\n        | STEP_SUCCESS  | StepReplay.skip  | if in recovery and previous status is success, skip  |\n        +---------------+------------------+------------------------------------------------------+\n\n    *config*: keywords mapping overrides for step configuration.\n\n        +-------------------+------------------+---------------------------------------+\n        | name              | default          | description                           |\n        +===================+==================+=======================================+\n        | stop_on_exception | True             | stop flow if step ends with Exception |\n        +-------------------+------------------+---------------------------------------+\n\nReturns\n```````\n\n    Step object to use in add_assoc method.\n\nEventor *add_assoc* method\n--------------------------\n\n    .. code-block:: python\n\n        add_assoc(event, *assocs, delay=0)\n\nArgs\n````\n\n    *event*: event objects as provided by add_event.\n\n    *assocs*: list of associations objects.  List is composed from either events (as returned by add_event) or steps (as returned by add_step)\n\n    *delay*: seconds to wait, once event is triggered, before engaging its associations\n\nReturns\n```````\n\n    N/A\n\nEventor *trigger_event* method\n------------------------------\n\n    .. code-block:: python\n\n        trigger_event(event, sequence=None)\n\nArgs\n````\n\n    *event*: event objects as provided by add_event.\n\n    *sequence*: unique association of triggered event.  Event can be triggered only once per sequence.  All derivative triggers will carry the same sequence.\n\nReturns\n```````\n\n    N/A\n\nEventor *run* method\n---------------------\n\n    .. code-block:: python\n\n        run(max_loops=-1)\n\nwhen calling *run*, information is built and loops evaluating events and task starts are executed.\nIn each loop events are raised and tasks are performed.  max_loops parameters allows control of how many\nloops to execute.\n\nIn simple example, **ev.run()** engage Eventor's *run()* method.\n\nArgs\n````\n\n    *max_loops*: max_loops: number of loops to run.  If positive, limits number of loops.\n                 defaults to negative, which would run loops until there are no events to raise and\n                 no task to run.\n\nReturns\n```````\n\n    If there was a failure that was not followed by event triggered, result will be False.\n\n\nEventor *close* method\n----------------------\n\n    .. code-block:: python\n\n        close()\n\nwhen calling *close*, Eventor object will close its open artifacts.  This is similar to close method on multiprocessing Pool.\n\nIn simple example, **ev.close()** engage Eventor's *close()* method.\n\nArgs\n````\n\n    N/A.\n\nReturns\n```````\n\n    N/A.\n\n\nRecovery\n========\n\n    When running in recovery, unless indicated otherwise, latest run (initial or recovery) would be used.\n\n    Note that when running a program with the intent to use its recovery capabilities, in-memory store **cannot** be use.\n    Instead, physical storage must be used.\n\n    Here is an example for recovery program and run.\n\nRecovery Example\n----------------\n\n    .. code:: python\n        :number-lines:\n\n        import eventor as evr\n        import logging\n        import math\n        from acrilib import LoggerAddHostFilter\n\n        appname = os.path.basename(__file__)\n        logger = logging.getLogger(appname)\n\n        def square(x):\n            y = x*x\n            logger.info(\"Square of %s is %s\" % (x, y))\n            return y\n\n\n        def square_root(x):\n            y = math.sqrt(x)\n            logger.info(\"Square root of %s is %s\" % (x, y))\n            return y\n\n\n        def divide(x, y):\n            z = x/y\n            logger.info(\"dividing %s by %s is %s\" % (x, y, z))\n            return z\n\n        def build_flow(run_mode=evr.RUN_RESTART, param=9, run_id=None):\n            ev = evr.Eventor(name=appname, run_mode=run_mode, run_id=run_id,\n                             config={'LOGGING':\n                                     {'logging_level': logging.INFO}},))\n\n            ev1s = ev.add_event('run_step1')\n            ev1d = ev.add_event('done_step1')\n            ev2s = ev.add_event('run_step2')\n            ev2d = ev.add_event('done_step2')\n            ev3s = ev.add_event('run_step3', expr=(ev1d, ev2d))\n\n            s1 = ev.add_step('s1', func=square, kwargs={'x': 3},\n                           triggers={evr.STEP_SUCCESS: (ev1d, ev2s,)},)\n            s2 = ev.add_step('s2', square_root, kwargs={'x': param},\n                             triggers={evr.STEP_SUCCESS: (ev2d,), },\n                             recovery={evr.STEP_FAILURE: evr.STEP_RERUN,\n                                       evr.STEP_SUCCESS: evr.STEP_SKIP})\n            s3 = ev.add_step('s3', divide, kwargs={'x': 9, 'y': 3},)\n\n            ev.add_assoc(ev1s, s1)\n            ev.add_assoc(ev2s, s2)\n            ev.add_assoc(ev3s, s3)\n            ev.trigger_event(ev1s, 3)\n            return ev\n\n\n        def construct_and_run():\n            # start regularly; it would fail in step 2\n            ev = build_eventor(param=-9)\n            run_id = ev.run_id\n            ev.run()\n            ev.close()\n\n            # rerun in recovery\n            ev = build_eventor(evr.RUN_RECOVER, param=9, run_id=run_id)\n            ev.run()\n            ev.close()\n\n\n        if __name__ == '__main__':\n            construct_and_run()\n\nExample Output\n--------------\n\n    .. code::\n        :number-lines:\n\n        [ 2016-12-07 08:37:53,541 ][ INFO ][ Eventor store file: /eventor/example/runly03.run.db ]\n        [ 2016-12-07 08:37:53,586 ][ INFO ][ [ Step s1/3 ] Trying to run ]\n        [ 2016-12-07 08:37:53,588 ][ INFO ][ Square of 3 is 9 ]\n        [ 2016-12-07 08:37:53,588 ][ INFO ][ [ Step s1/3 ] Completed, status: TaskStatus.success ]\n        [ 2016-12-07 08:37:55,644 ][ INFO ][ [ Step s2/3 ] Trying to run ]\n        [ 2016-12-07 08:37:55,647 ][ INFO ][ [ Step s2/3 ] Completed, status: TaskStatus.failure ]\n        [ 2016-12-07 08:37:56,663 ][ ERROR ][ Exception in run_action:\n            <Task(id='2', step_id='s2', sequence='3', recovery='0', pid='8112', status='TaskStatus.failure', created='2016-12-07 14:37:55.625870', updated='2016-12-07 14:37:55.633819')> ]\n        [ 2016-12-07 08:37:56,663 ][ ERROR ][ ValueError('math domain error',) ]\n        [ 2016-12-07 08:37:56,663 ][ ERROR ][ File \"/sand/eventor/eventor/main.py\", line 62, in task_wrapper\n                    result=step(seq_path=task.sequence)\n        File \"/sand/eventor/eventor/step.py\", line 82, in __call__\n                    result=func(*func_args, **func_kwargs)\n        File \"/eventor/example/runly03.py\", line 66, in square_root\n                y=math.sqrt(x) ]\n        [ 2016-12-07 08:37:56,663 ][ INFO ][ Stopping running processes ]\n        [ 2016-12-07 08:37:56,667 ][ INFO ][ Processing finished with: failure ]\n        [ 2016-12-07 08:37:56,670 ][ INFO ][ Eventor store file: /eventor/example/runly03.run.db ]\n        [ 2016-12-07 08:37:57,736 ][ INFO ][ [ Step s2/3 ] Trying to run ]\n        [ 2016-12-07 08:37:57,739 ][ INFO ][ Square root of 9 is 3.0 ]\n        [ 2016-12-07 08:37:57,739 ][ INFO ][ [ Step s2/3 ] Completed, status: TaskStatus.success ]\n        [ 2016-12-07 08:38:00,798 ][ INFO ][ [ Step s3/3 ] Trying to run ]\n        [ 2016-12-07 08:38:00,800 ][ INFO ][ dividing 9 by 3 is 3.0 ]\n        [ 2016-12-07 08:38:00,800 ][ INFO ][ [ Step s3/3 ] Completed, status: TaskStatus.success ]\n        [ 2016-12-07 08:38:01,824 ][ INFO ][ Processing finished with: success ]\n\nExample Highlights\n------------------\n\n    The function *build_flow* (code line 24) build an Eventor flow using three functions defined in advance.\n    Since no specific store is provided in Eventor instantiation, a default runner store is assigned (code line 25).\n    In this build, step *s2* (lines 30-35) is being set with recovery directives.\n\n    The first build and run is done in lines 47-48.  In this run, a parameter that would cause the second\n    step to fail is being passed.  As a result, flow fails.  Output lines 1-17 is associated with the first run.\n\n    The second build and run is then initiated.  In this run, parameter is set to a value that would pass\n    step *s2* and run mode is set to recovery (code lines 51-52). Eventor skips successful steps and start\n    executing from failed steps onwards.  Output lines 18-25 reflects successful second run.\n\nDelayed Associations\n====================\n\n    There are situations in which it is desire to hold off activating a task.  This behavior is captured in Eventor as a delayed association.\n\n    Associations can be made delayed.  Assuming source event is associated to target event with time delay.  When source event is triggered, Eventor will wait time delay seconds before triggering target event.\n\n    In such situations, it sometimes desire to run Eventor engine in specific period on a time line instead of continuously.  For example, if Eventor is synchronizing activities that has 6 hours association delay.  Instead of running Eventor continuously, it can be set to run every 5 minutes, and save computing resources on the side.\n\n    With *delayed associations*, Eventor can run in *continue* run mode (*RunMode.continue_*).  When running in *continue*, Eventor will pick up from where it left last run.\n\n    The following example present *delayed association* with *continue* run mode.\n\n\nDelay Example\n-------------\n\n    .. code::\n        :number-lines:\n\n        import eventor as evr\n        import logging\n        import os\n        import time\n\n        appname = os.path.basename(__file__)\n        logger = logging.getLogger(appname)\n\n        def prog(progname):\n            logger.info(\"doing what %s is doing\" % progname)\n            logger.info(\"EVENTOR_STEP_SEQUENCE: %s\" % os.getenv(\"EVENTOR_STEP_SEQUENCE\"))\n            return progname\n            \n\n        def build_flow(run_mode):\n            ev = evr.Eventor(name=appname, run_mode=run_mode,)\n\n            ev1s = ev.add_event('run_step1')\n            ev2s = ev.add_event('run_step2')\n            ev3s = ev.add_event('run_step3')\n\n            s1 = ev.add_step('s1', func=prog, kwargs={'progname': 'prog1'}, triggers={evr.STEP_SUCCESS: (ev2s,)})\n            s2 = ev.add_step('s2', func=prog, kwargs={'progname': 'prog2'}, triggers={evr.STEP_SUCCESS: (ev3s,)})\n            s3 = ev.add_step('s3', func=prog, kwargs={'progname': 'prog3'},)\n\n            ev.add_assoc(ev1s, s1, delay=0)\n            ev.add_assoc(ev2s, s2, delay=10)\n            ev.add_assoc(ev3s, s3, delay=10)\n\n            ev.trigger_event(ev1s, 1)\n            return ev\n\n\n        def construct_and_run():\n            ev = build_flow(run_mode=evr.RUN_RESTART)\n            ev.run()\n            ev.close()\n\n        if __name__ == '__main__':\n            construct_and_run()\n\nExample Output\n--------------\n\n    .. code::\n        :number-lines:\n\n        [ 2017-08-16,16:31:29.277048 ][ Task-s1(1)  ][ INFO    ][ [ Step s1/1 ] Trying to run ]\n        [ 2017-08-16,16:31:29.277903 ][ Task-s1(1)  ][ INFO    ][ doing what prog1 is doing ]\n        [ 2017-08-16,16:31:29.278114 ][ Task-s1(1)  ][ INFO    ][ EVENTOR_STEP_SEQUENCE: 1 ]\n        [ 2017-08-16,16:31:29.278360 ][ Task-s1(1)  ][ INFO    ][ [ Step s1/1 ] Completed, status: TaskStatus.success ]\n        [ 2017-08-16,16:31:41.028196 ][ Task-s2(1)  ][ INFO    ][ [ Step s2/1 ] Trying to run ]\n        [ 2017-08-16,16:31:41.029191 ][ Task-s2(1)  ][ INFO    ][ doing what prog2 is doing ]\n        [ 2017-08-16,16:31:41.029429 ][ Task-s2(1)  ][ INFO    ][ EVENTOR_STEP_SEQUENCE: 1 ]\n        [ 2017-08-16,16:31:41.029697 ][ Task-s2(1)  ][ INFO    ][ [ Step s2/1 ] Completed, status: TaskStatus.success ]\n        [ 2017-08-16,16:32:02.931265 ][ Task-s3(1)  ][ INFO    ][ [ Step s3/1 ] Trying to run ]\n        [ 2017-08-16,16:32:02.932407 ][ Task-s3(1)  ][ INFO    ][ doing what prog3 is doing ]\n        [ 2017-08-16,16:32:02.932661 ][ Task-s3(1)  ][ INFO    ][ EVENTOR_STEP_SEQUENCE: 1 ]\n        [ 2017-08-16,16:32:02.932940 ][ Task-s3(1)  ][ INFO    ][ [ Step s3/1 ] Completed, status: TaskStatus.success ]\n        [ 2017-08-16,16:32:03.014584 ][ MainProcess ][ INFO    ][ Processing finished with: success; outstanding tasks: 0 ]\n\nExample Highlights\n------------------\n\n   The example program builds and runs Eventor sequence 4 times.  The build involves three tasks that would run sequentially.  They are associated to each other with delay of 10 seconds each (lines 26 and 28.)\n\n\n   The first time, sequence is build with *restart* run mode (line 35).  In this case, the sequence is initiated.  The next four runs are in *continue* run mode (line 48).  Each of those run continue its preceding run.  To have it show the point, a varying delay is introduced between runs (lines 46-47).\n\n   Each run limits the number of loop to a single loop (lines 40 and 50).  A single loop entails Eventor executing triggers and tasks until there is none to execute.  It may be though that there are still outstanding delayed association to act upon.\n\n   This behavior is different than continuous run (using max_loops=-1), which is the default.  In such run, Eventor will continue to loop until there are no triggers, tasks, and delayed association to process.\n\n   Eventor runs can be observed in example output lines 1-5, 6, 7-11, 12, and 13-17 each.  Note that the second and forth runs had not trigger to execute on.  The associated tasks' delays was not yet matured.\n\nResources\n=========\n\n    *add_step* allows association of step with resources.  If acquires argument is provided, before step starts, *Eventor*\n    will attempt to reserve resources.  Step will be executed only when resources are secured.\n\n    When *release* argument is provided, resources resources listed as its value will be released when step is done.  If\n    release is None, whatever resources stated by *acquires* would be released.  If the empty list is set as value, no\n    resource would be released.\n\n    To use resources, program to use Resource and ResourcePool from acris.virtual_resource_pool.  Example for such definitions are below.\n\nExample for resources definitions\n---------------------------------\n\n    .. code:: python\n        :number-lines:\n\n        import eventor as evr\n        from acris import virtual_resource_pool as vrp\n\n        class Resources1(vrp.Resource): pass\n        class Resources2(vrp.Resource): pass\n\n        rp1 = vrp.ResourcePool('RP1', resource_cls=Resources1, policy={'resource_limit': 2, }).load()\n        rp2 = vrp.ResourcePool('RP2', resource_cls=Resources2, policy={'resource_limit': 2, }).load()\n\n        ev = evr.Eventor()\n\n        s1 = ev.add_step('s0.s00.s1', func=prog, kwargs={'progname': 'prog1'}, acquires=[(rp2, 1), ],)\n\n\nDistributed Steps\n=================\n\nEventor program can work in a clustered environment.  In this arrangement, steps can be defined to run on different nodes in the cluster.  This is possible granted:\n\n    1. SSH is defined among cluster nodes.\n    #. Eventor DB is shared among cluster nodes.\n    #. Program environment is the *seamlessly-the-same* among cluster nodes.\n\nHow it works\n------------\n\nEventor will be launched from one host, *server*.  It will then start the same program on every associated host relevant to program, *clients*.  *Client* programs will skip *starting* steps (steps with no )\n\nCluster SSH access\n------------------\n\nWhen working on distributed environment, Eventor assumes that ssh is set properly among participating hosts.\n\nTo allow ssh run command with .profile (or .bash_profile) are not automatically executed, add the following before RSA key in .ssh/authorizedkeys\n\n    .. code:: python\n\n        command \"if [[ \\\"x${SSH_ORIGINAL_COMMAND}x\\\" != \\\"xx\\\" ]]; then source ~/.profile; eval \\\"${SSH_ORIGINAL_COMMAND}\\\"; else /bin/bash --login; fi;\" <key>\n\nDatabase\n--------\n\nEventor program would be launched on all cluster nodes relevant to the program.\n\nTODOs\n=====\n\n    The following is some of the major tasks intended to be completed into this product.\n\n    1. asynchronous tasks: embed mechanism to launch asynchronous tasks.\n    #. remote callback mechanisms: allow remote asynchronous tasks communicate with Eventor (TCP/IP, HTTP, etc.)\n    #. virtual resources shared across distributed environment.\n    #. improve SSHPipe to better indicate SSH channel was established.\n\nChange log\n==========\n\n5.0\n---\n\n    1. added database configuration allowing the use of SqlAlchemy database engines.\n    #. added shared_db to indicate db is shared among multiple programs and runs.\n    #. added run_id as unique identifier for program run (not to be confused with recovery).\n    #. improved documentation to reflect the need for mp.freeze_support() and mp.set_start_method('spawn').\n    #. added dependency on namedlist, and PyYAML, packages.\n    #. bug fix in delay.\n\n5.1\n---\n\n    1. SSH remote invocation of steps.\n    #. use of socket based logging.\n    #. centralized logging of remote agents in prime server.\n    #. Added {envvar_prefix}LOGGER_NAME to allow step logger to be set appropriately.\n\n.. _`Eventor github project`: https://github.com/Acrisel/eventor\n.. _`SSH Pipe`: https://acrisel.github.io/posts/2017/09/ssh-pipe-with-python-subprocess_multiprocessing/\n\nAdditional Information\n======================\n\n    1. Eventor github project (`Eventor github project`_) has additional examples with more complicated flows.\n    #. `SSH Pipe`_ blog clarifying the mechanism using by Eventor for remote steps and centralized logging.", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Acrisel/eventor", "keywords": "project,virtualenv,parameters", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "eventor", "package_url": "https://pypi.org/project/eventor/", "platform": "", "project_url": "https://pypi.org/project/eventor/", "project_urls": {"Homepage": "https://github.com/Acrisel/eventor"}, "release_url": "https://pypi.org/project/eventor/5.1.9/", "requires_dist": null, "requires_python": "", "summary": "eventor is a python programming facility to program event based sequence of activities", "version": "5.1.9", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"table-of-contents\">\n<p>Table of Contents</p>\n<ul>\n<li><a href=\"#overview\" id=\"id18\" rel=\"nofollow\">Overview</a></li>\n<li><a href=\"#program-run-file\" id=\"id19\" rel=\"nofollow\">Program Run File</a></li>\n<li><a href=\"#eventor-interface\" id=\"id20\" rel=\"nofollow\">Eventor Interface</a></li>\n<li><a href=\"#recovery\" id=\"id21\" rel=\"nofollow\">Recovery</a></li>\n<li><a href=\"#delayed-associations\" id=\"id22\" rel=\"nofollow\">Delayed Associations</a></li>\n<li><a href=\"#resources\" id=\"id23\" rel=\"nofollow\">Resources</a></li>\n<li><a href=\"#distributed-steps\" id=\"id24\" rel=\"nofollow\">Distributed Steps</a></li>\n<li><a href=\"#todos\" id=\"id25\" rel=\"nofollow\">TODOs</a></li>\n<li><a href=\"#change-log\" id=\"id26\" rel=\"nofollow\">Change log</a></li>\n<li><a href=\"#additional-information\" id=\"id27\" rel=\"nofollow\">Additional Information</a></li>\n</ul>\n</div>\n<div id=\"overview\">\n<h2><a href=\"#id18\" rel=\"nofollow\">Overview</a></h2>\n<blockquote>\n<p><em>Eventor</em> provides programmer with interface to create events, steps and associations of these artifacts with to create a flow.</p>\n<p>It would be easier to show an example.</p>\n</blockquote>\n<div id=\"simple-example\">\n<h3>Simple Example</h3>\n<blockquote>\n<pre><span class=\"ln\"> 1 </span><span class=\"kn\">import</span> <span class=\"nn\">eventor</span> <span class=\"k\">as</span> <span class=\"nn\">evr</span>\n<span class=\"ln\"> 2 </span><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"ln\"> 3 </span><span class=\"kn\">from</span> <span class=\"nn\">acrilib</span> <span class=\"kn\">import</span> <span class=\"n\">LoggerAddHostFilter</span>\n<span class=\"ln\"> 4 </span>\n<span class=\"ln\"> 5 </span><span class=\"n\">appname</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">basename</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">)</span>\n<span class=\"ln\"> 6 </span><span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"n\">appname</span><span class=\"p\">)</span>\n<span class=\"ln\"> 7 </span>\n<span class=\"ln\"> 8 </span><span class=\"k\">def</span> <span class=\"nf\">construct_and_run</span><span class=\"p\">():</span>\n<span class=\"ln\"> 9 </span>\n<span class=\"ln\">10 </span>    <span class=\"k\">def</span> <span class=\"nf\">prog</span><span class=\"p\">(</span><span class=\"n\">progname</span><span class=\"p\">):</span>\n<span class=\"ln\">11 </span>        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">\"doing what </span><span class=\"si\">%s</span><span class=\"s2\"> is doing\"</span> <span class=\"o\">%</span> <span class=\"n\">progname</span><span class=\"p\">)</span>\n<span class=\"ln\">12 </span>        <span class=\"k\">return</span> <span class=\"n\">progname</span>\n<span class=\"ln\">13 </span>\n<span class=\"ln\">14 </span>    <span class=\"n\">ev</span> <span class=\"o\">=</span> <span class=\"n\">evr</span><span class=\"o\">.</span><span class=\"n\">Eventor</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">appname</span><span class=\"p\">)</span>\n<span class=\"ln\">15 </span>\n<span class=\"ln\">16 </span>    <span class=\"n\">ev1s</span> <span class=\"o\">=</span> <span class=\"n\">ev</span><span class=\"o\">.</span><span class=\"n\">add_event</span><span class=\"p\">(</span><span class=\"s1\">'run_step1'</span><span class=\"p\">)</span>\n<span class=\"ln\">17 </span>    <span class=\"n\">ev2s</span> <span class=\"o\">=</span> <span class=\"n\">ev</span><span class=\"o\">.</span><span class=\"n\">add_event</span><span class=\"p\">(</span><span class=\"s1\">'run_step2'</span><span class=\"p\">)</span>\n<span class=\"ln\">18 </span>    <span class=\"n\">ev3s</span> <span class=\"o\">=</span> <span class=\"n\">ev</span><span class=\"o\">.</span><span class=\"n\">add_event</span><span class=\"p\">(</span><span class=\"s1\">'run_step3'</span><span class=\"p\">)</span>\n<span class=\"ln\">19 </span>\n<span class=\"ln\">20 </span>    <span class=\"n\">s1</span> <span class=\"o\">=</span> <span class=\"n\">ev</span><span class=\"o\">.</span><span class=\"n\">add_step</span><span class=\"p\">(</span><span class=\"s1\">'s1'</span><span class=\"p\">,</span> <span class=\"n\">func</span><span class=\"o\">=</span><span class=\"n\">prog</span><span class=\"p\">,</span> <span class=\"n\">kwargs</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'progname'</span><span class=\"p\">:</span> <span class=\"s1\">'prog1'</span><span class=\"p\">},</span>\n<span class=\"ln\">21 </span>                   <span class=\"n\">triggers</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"n\">evr</span><span class=\"o\">.</span><span class=\"n\">StepStatus</span><span class=\"o\">.</span><span class=\"n\">success</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">ev2s</span><span class=\"p\">,),})</span>\n<span class=\"ln\">22 </span>    <span class=\"n\">s2</span> <span class=\"o\">=</span> <span class=\"n\">ev</span><span class=\"o\">.</span><span class=\"n\">add_step</span><span class=\"p\">(</span><span class=\"s1\">'s2'</span><span class=\"p\">,</span> <span class=\"n\">func</span><span class=\"o\">=</span><span class=\"n\">prog</span><span class=\"p\">,</span> <span class=\"n\">kwargs</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'progname'</span><span class=\"p\">:</span> <span class=\"s1\">'prog2'</span><span class=\"p\">},</span>\n<span class=\"ln\">23 </span>                   <span class=\"n\">triggers</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"n\">evr</span><span class=\"o\">.</span><span class=\"n\">StepStatus</span><span class=\"o\">.</span><span class=\"n\">success</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">ev3s</span><span class=\"p\">,),</span> <span class=\"p\">})</span>\n<span class=\"ln\">24 </span>    <span class=\"n\">s3</span> <span class=\"o\">=</span> <span class=\"n\">ev</span><span class=\"o\">.</span><span class=\"n\">add_step</span><span class=\"p\">(</span><span class=\"s1\">'s3'</span><span class=\"p\">,</span> <span class=\"n\">func</span><span class=\"o\">=</span><span class=\"n\">prog</span><span class=\"p\">,</span> <span class=\"n\">kwargs</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'progname'</span><span class=\"p\">:</span> <span class=\"s1\">'prog3'</span><span class=\"p\">},)</span>\n<span class=\"ln\">25 </span>\n<span class=\"ln\">26 </span>    <span class=\"n\">ev</span><span class=\"o\">.</span><span class=\"n\">add_assoc</span><span class=\"p\">(</span><span class=\"n\">ev1s</span><span class=\"p\">,</span> <span class=\"n\">s1</span><span class=\"p\">)</span>\n<span class=\"ln\">27 </span>    <span class=\"n\">ev</span><span class=\"o\">.</span><span class=\"n\">add_assoc</span><span class=\"p\">(</span><span class=\"n\">ev2s</span><span class=\"p\">,</span> <span class=\"n\">s2</span><span class=\"p\">)</span>\n<span class=\"ln\">28 </span>    <span class=\"n\">ev</span><span class=\"o\">.</span><span class=\"n\">add_assoc</span><span class=\"p\">(</span><span class=\"n\">ev3s</span><span class=\"p\">,</span> <span class=\"n\">s3</span><span class=\"p\">)</span>\n<span class=\"ln\">29 </span>\n<span class=\"ln\">30 </span>    <span class=\"n\">ev</span><span class=\"o\">.</span><span class=\"n\">trigger_event</span><span class=\"p\">(</span><span class=\"n\">ev1s</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"ln\">31 </span>    <span class=\"n\">ev</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n<span class=\"ln\">32 </span>    <span class=\"n\">ev</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n<span class=\"ln\">33 </span>\n<span class=\"ln\">34 </span>\n<span class=\"ln\">35 </span><span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n<span class=\"ln\">36 </span>    <span class=\"n\">construct_and_run</span><span class=\"p\">()</span>\n</pre>\n</blockquote>\n</div>\n<div id=\"example-output\">\n<h3>Example Output</h3>\n<blockquote>\n<p>The above example with provide the following log output.</p>\n<pre>[ 2016-11-30 10:07:48,612 ][ INFO ][ Running step s1[1] ][ main.task_wrapper ]\n[ 2016-11-30 10:07:48,612 ][ INFO ][ Step completed s1[1], status: success, result 'prog1' ][ main.task_wrapper ]\n[ 2016-11-30 10:07:50,649 ][ INFO ][ Running step s2[1] ][ main.task_wrapper ]\n[ 2016-11-30 10:07:50,649 ][ INFO ][ Step completed s2[1], status: success, result 'prog2' ][ main.task_wrapper ]\n[ 2016-11-30 10:07:52,688 ][ INFO ][ Running step s3[1] ][ main.task_wrapper ]\n[ 2016-11-30 10:07:52,689 ][ INFO ][ Step completed s3[1], status: success, result 'prog3' ][ main.task_wrapper ]\n[ 2016-11-30 10:07:53,700 ][ INFO ][ Processing finished with: success ][ main.loop_session_start ]\n</pre>\n<p>Note: actual logging includes <em>hostname</em> and and <em>procname</em>, e.g., \u201c[ mbp02 ][ MainProcess ]\u201d. These information was omitted from logging herein.</p>\n</blockquote>\n</div>\n<div id=\"example-highlights\">\n<h3>Example Highlights</h3>\n<blockquote>\n<p><em>Eventor</em> (line 10) defines eventor using default database configuration (see bellow).</p>\n<p><em>add_event</em> (e.g., line 12) adds an event named <strong>run_step1</strong> to the respective eventor object.</p>\n<p><em>add_step</em> (e.g., line 16) adds step <strong>s1</strong> which when triggered would run predefined function <strong>prog</strong> with key words parameters <strong>progname=\u2019prog1\u2019</strong>.\nAdditionally, when step would end, if successful, it would trigger event <strong>evs2</strong></p>\n<p><em>add_assoc</em> (e.g., line 22) links event <strong>evs1</strong> and step <strong>s1</strong>.</p>\n<p><em>trigger_event</em> (line 26) marks event <strong>evs1</strong>; when triggers, event is associated with sequence. This would allow multiple invocation.</p>\n<p><em>ev()</em> (line 27) invoke Eventor process that would looks for triggers and tasks to act upon. It ends when there is nothing to do.</p>\n<p><em>logger</em> and <em>Eventor</em> names (lines 6 and 14), Eventor is using hierarchical logger based on Eventor name argument. As such naming convention needs to be aligned among all the files participating with the run.</p>\n</blockquote>\n</div>\n</div>\n<div id=\"program-run-file\">\n<h2><a href=\"#id19\" rel=\"nofollow\">Program Run File</a></h2>\n<blockquote>\nOne important artifact used in Eventor is program\u2019s runner file.  Runner file database (sqlite) will be created at execution, if not directed otherwise, at the location of the run (UNIX\u2019s pwd).\nThis file contains information on tasks and triggers that are used in the run and in recovery.</blockquote>\n</div>\n<div id=\"eventor-interface\">\n<h2><a href=\"#id20\" rel=\"nofollow\">Eventor Interface</a></h2>\n<div id=\"eventor-class-initiator\">\n<h3>Eventor Class Initiator</h3>\n<blockquote>\n<pre><span class=\"n\">Eventor</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">''</span><span class=\"p\">,</span> <span class=\"n\">store</span><span class=\"o\">=</span><span class=\"s1\">''</span><span class=\"p\">,</span> <span class=\"n\">run_mode</span><span class=\"o\">=</span><span class=\"n\">RUM_RESTART</span><span class=\"p\">,</span> <span class=\"n\">recovery_run</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">run_id</span><span class=\"o\">=</span><span class=\"s1\">''</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"p\">{})</span>\n</pre>\n</blockquote>\n<div id=\"args\">\n<h4>Args</h4>\n<blockquote>\n<p><em>name</em>: string id for Eventor object initiated.</p>\n<p><em>store</em>: Eventor mechanism is built to work with SQLAlchemy. If store is provided, Eventor first check if store is a tag within config under <strong>EVENTOR.DATABASE</strong> (or whatever the environment variables <em>EVENTOR_CONFIG_TAG</em> and <em>EVENTOR_DB_CONFIG_TAG</em> points to) section. If the tag exists, it will pick its configuration as database configuration. If store is empty, Eventor will try to look for <em>default</em> database configuration. Otherwise, <em>store</em> will be considered as a path to file that would store runnable (sqlite) information; If not provided, calling module path and name will be used with \u2018.db\u2019 extension instead of \u2018.py\u2019.</p>\n<p><em>run_mode</em>: can be either <em>RUN_RESTART</em> (default) or <em>RUN_RECOVER</em>; in restart, new instance or the run will be created. In recovery, if <em>shared_db</em> is set, run_id or the recovered program must be provided.</p>\n<p><em>recovery_run</em>: if <em>RUN_RECOVER</em> is used, <em>recovery_run</em> will indicate specific instance of previously recovery run that would be executed.If not provided, latest run would be used.</p>\n<p><em>run_id</em>: unique ID for the program run (excluding recovery_run).  It is mandatory in <em>shared_db</em> mode, and if not provided, will be generated.</p>\n<p>config: keyword dictionary of default configurations.  Available keywords and their default values:</p>\n<blockquote>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Name</th>\n<th>Default\nValue</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>workdir</td>\n<td>/tmp</td>\n<td>place to create necessary artifacts (not in use)</td>\n</tr>\n<tr><td>logdir</td>\n<td>/tmp</td>\n<td>place to create debug and error log files</td>\n</tr>\n<tr><td>task_construct</td>\n<td>mp.Process</td>\n<td>method to use for execution of steps</td>\n</tr>\n<tr><td>max_concurrent</td>\n<td>1</td>\n<td>maximum concurrent processing, if value &lt;1, no\nlimit will be pose</td>\n</tr>\n<tr><td>stop_on_exception</td>\n<td>True</td>\n<td>if an exception occurs in a step, stop\nall processes.  If True, new processes will not\nstart.  But running processes will be permitted\nto finish</td>\n</tr>\n<tr><td>sleep_between_loops</td>\n<td>1</td>\n<td>seconds to sleep between iteration of checking\ntriggers and tasks</td>\n</tr>\n<tr><td>shared_db</td>\n<td>False</td>\n<td>if set, db must not be in memory. signals that\nmultiple programs will use the same database\ntables.</td>\n</tr>\n<tr><td>envvar_prefix</td>\n<td><a href=\"#eventor\" rel=\"nofollow\">EVENTOR</a></td>\n<td><div>\n<div>set prefix for naming environment variable</div>\n<div>defined for each step:</div>\n<div>\n<div>{envvar_prefix}STEP_NAME</div>\n<div>{envvar_prefix}STEP_SEQUENCE</div>\n<div>{envvar_prefix}STEP_RECOVERY</div>\n<div>{envvar_prefix}LOGGER_NAME</div>\n</div>\n</div>\n</td>\n</tr>\n<tr><td>ssh_config</td>\n<td>~/.ssh/config</td>\n<td><dl>\n<dt>SSH configuration file to use with SSH remote</dt>\n<dd>Invocation of steps.</dd>\n</dl>\n</td>\n</tr>\n<tr><td>ssh_host</td>\n<td>\u00a0</td>\n<td>SSH host configuration name prime host.</td>\n</tr>\n<tr><td>ssh_port</td>\n<td>\u00a0</td>\n<td>SSH port to use for SSH connectivity</td>\n</tr>\n<tr><td>LOGGING</td>\n<td>\u00a0</td>\n<td>dictionary of logging configurations.</td>\n</tr>\n<tr><td>DATABASES</td>\n<td>\u00a0</td>\n<td>dictionary of database configurations.</td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n</blockquote>\n</div>\n<div id=\"configuration-file-example\">\n<h4>Configuration file example</h4>\n<blockquote>\n<pre>EVENTOR:\n   debug: False\n   task_construct: process\n   envvar_prefix: EVENTOR_\n   max_concurrent: -1\n   stop_on_exception: True\n   sleep_between_loops: 0.25\n   sequence_arg_name: None\n   day_to_keep_db: 5\n   remote_method: ssh\n   pass_logger_to_task: False\n   shared_db: False\n\n    DATABASES:\n\n        sqfile1:\n            dialect: sqlite\n            database: /tmp/runly.db\n\n        pgdb1:\n            dialect:  postgresql\n            drivername :  psycopg2\n            username: pgusername\n            password: pgpassword\n            host:     ubuntu-guest-02\n            port:     5433\n            database: pyground\n            schema: play\n\n    LOGGING:\n        logging_level: 10\n        logdir: /var/log/eventor\n        level_formats:\n            10: ('[ %(asctime)-15s ][ %(host)s ][ %(processName)-11s ][ %(levelname)-7s ]'\n                 '[ %(message)s ][ %(module)s.%(funcName)s(%(lineno)d) ]')\n            default: ('[ %(asctime)-15s ][ %(host)s ][ %(processName)-11s ]'\n                      '[ %(levelname)-7s ][ %(message)s ]')\n        consolidate: False\n        console: True\n        file_prefix: ''\n        file_suffix: ''\n        file_mode: 'a'\n        maxBytes: 0\n        backupCount: 0\n        encoding: 'utf8'\n        delay: False\n        when: 'h'\n        interval: 1\n        utc: False\n        atTime: 86400\n</pre>\n</blockquote>\n</div>\n<div id=\"database-notes\">\n<h4>Database Notes</h4>\n<blockquote>\nIt is possible to create configuration for sqlite memory with cache=shared. However, SQLAlchemy will not work with it well in threaded and multiprocessing environment.  Hence, at this point, <em>Eventor</em> does not support it.</blockquote>\n</div>\n</div>\n<div id=\"eventor-add-event-method\">\n<h3>Eventor <em>add_event</em> method</h3>\n<blockquote>\n<pre><span class=\"n\">add_event</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">expr</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</pre>\n</blockquote>\n<div id=\"id1\">\n<h4>Args</h4>\n<blockquote>\n<p><em>name</em>: string unique id for event</p>\n<dl>\n<dt><em>expr</em>: logical expression \u2018sqlalchemy\u2019 style to automatically raise this expression.</dt>\n<dd><p>syntax:</p>\n<pre>expr : (expr, expr, ...)\n     | or_(expr, expr, ...)\n     | event\n</pre>\n<ul>\n<li>if expression is of the first style, logical <em>and</em> will apply.</li>\n<li>the second expression will apply logical <em>or</em>.</li>\n<li>the basic atom in expression is <em>even</em> which is the product of <em>add_event</em>.</li>\n</ul>\n</dd>\n</dl>\n</blockquote>\n</div>\n<div id=\"returns\">\n<h4>Returns</h4>\n<blockquote>\nEvent object to use in other <em>add_event</em> expressions, <em>add_assoc</em> methods, or with <em>add_step</em> triggers.</blockquote>\n</div>\n</div>\n<div id=\"eventor-add-step-method\">\n<h3>Eventor <em>add_step</em> method</h3>\n<blockquote>\n<pre><span class=\"n\">add_step</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">(),</span> <span class=\"n\">kwargs</span><span class=\"o\">=</span><span class=\"p\">{},</span> <span class=\"n\">triggers</span><span class=\"o\">=</span><span class=\"p\">{},</span> <span class=\"n\">acquires</span><span class=\"o\">=</span><span class=\"p\">[],</span> <span class=\"n\">releases</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">recovery</span><span class=\"o\">=</span><span class=\"p\">{},</span> <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"p\">{})</span>\n</pre>\n</blockquote>\n<div id=\"id2\">\n<h4>Args</h4>\n<blockquote>\n<p><em>name</em>: string unique id for step</p>\n<p><em>func</em>: callable object that would be call at time if step execution</p>\n<p><em>args</em>: tuple of values that will be passed to <em>func</em> at calling</p>\n<p><em>kwargs</em>: keywords arguments that will be passed to <em>func</em> at calling</p>\n<p><em>triggers</em>: mapping of step statuses to set of events to be triggered as in the following table:</p>\n<blockquote>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>status</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>STEP_READY</td>\n<td>set when task is ready to run (triggered)</td>\n</tr>\n<tr><td>STEP_ACTIVE</td>\n<td>set when task is running</td>\n</tr>\n<tr><td>STEP_SUCCESS</td>\n<td>set when task is successful</td>\n</tr>\n<tr><td>STEP_FAILURE</td>\n<td>set when task fails</td>\n</tr>\n<tr><td>STEP_COMPLETE</td>\n<td>stands for success or failure of task</td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n<p><em>acquires</em>: list of tuples of resource pool and amount of resources to acquire before starting.</p>\n<p><em>releases</em>: list of tuples of resources pool and amount of resources to release once completed. If None, defaults to <em>acquires</em>.  If set to empty list, none of the acquired resources would be released.</p>\n<p><em>recovery</em>: mapping of state status to how step should be handled in recovery:</p>\n<blockquote>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>status</th>\n<th>default</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>STEP_READY</td>\n<td>StepReplay.rerun</td>\n<td>if in recovery and previous status is ready, rerun</td>\n</tr>\n<tr><td>STEP_ACTIVE</td>\n<td>StepReplay.rerun</td>\n<td>if in recovery and previous status is active, rerun</td>\n</tr>\n<tr><td>STEP_FAILURE</td>\n<td>StepReplay.rerun</td>\n<td>if in recovery and previous status is failure, rerun</td>\n</tr>\n<tr><td>STEP_SUCCESS</td>\n<td>StepReplay.skip</td>\n<td>if in recovery and previous status is success, skip</td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n<p><em>config</em>: keywords mapping overrides for step configuration.</p>\n<blockquote>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>name</th>\n<th>default</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>stop_on_exception</td>\n<td>True</td>\n<td>stop flow if step ends with Exception</td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n</blockquote>\n</div>\n<div id=\"id3\">\n<h4>Returns</h4>\n<blockquote>\nStep object to use in add_assoc method.</blockquote>\n</div>\n</div>\n<div id=\"eventor-add-assoc-method\">\n<h3>Eventor <em>add_assoc</em> method</h3>\n<blockquote>\n<pre><span class=\"n\">add_assoc</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">assocs</span><span class=\"p\">,</span> <span class=\"n\">delay</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n</pre>\n</blockquote>\n<div id=\"id4\">\n<h4>Args</h4>\n<blockquote>\n<p><em>event</em>: event objects as provided by add_event.</p>\n<p><em>assocs</em>: list of associations objects.  List is composed from either events (as returned by add_event) or steps (as returned by add_step)</p>\n<p><em>delay</em>: seconds to wait, once event is triggered, before engaging its associations</p>\n</blockquote>\n</div>\n<div id=\"id5\">\n<h4>Returns</h4>\n<blockquote>\nN/A</blockquote>\n</div>\n</div>\n<div id=\"eventor-trigger-event-method\">\n<h3>Eventor <em>trigger_event</em> method</h3>\n<blockquote>\n<pre><span class=\"n\">trigger_event</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">sequence</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</pre>\n</blockquote>\n<div id=\"id6\">\n<h4>Args</h4>\n<blockquote>\n<p><em>event</em>: event objects as provided by add_event.</p>\n<p><em>sequence</em>: unique association of triggered event.  Event can be triggered only once per sequence.  All derivative triggers will carry the same sequence.</p>\n</blockquote>\n</div>\n<div id=\"id7\">\n<h4>Returns</h4>\n<blockquote>\nN/A</blockquote>\n</div>\n</div>\n<div id=\"eventor-run-method\">\n<h3>Eventor <em>run</em> method</h3>\n<blockquote>\n<pre><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">max_loops</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre>\n</blockquote>\n<p>when calling <em>run</em>, information is built and loops evaluating events and task starts are executed.\nIn each loop events are raised and tasks are performed.  max_loops parameters allows control of how many\nloops to execute.</p>\n<p>In simple example, <strong>ev.run()</strong> engage Eventor\u2019s <em>run()</em> method.</p>\n<div id=\"id8\">\n<h4>Args</h4>\n<blockquote>\n<dl>\n<dt><em>max_loops</em>: max_loops: number of loops to run.  If positive, limits number of loops.</dt>\n<dd>defaults to negative, which would run loops until there are no events to raise and\nno task to run.</dd>\n</dl>\n</blockquote>\n</div>\n<div id=\"id9\">\n<h4>Returns</h4>\n<blockquote>\nIf there was a failure that was not followed by event triggered, result will be False.</blockquote>\n</div>\n</div>\n<div id=\"eventor-close-method\">\n<h3>Eventor <em>close</em> method</h3>\n<blockquote>\n<pre><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre>\n</blockquote>\n<p>when calling <em>close</em>, Eventor object will close its open artifacts.  This is similar to close method on multiprocessing Pool.</p>\n<p>In simple example, <strong>ev.close()</strong> engage Eventor\u2019s <em>close()</em> method.</p>\n<div id=\"id10\">\n<h4>Args</h4>\n<blockquote>\nN/A.</blockquote>\n</div>\n<div id=\"id11\">\n<h4>Returns</h4>\n<blockquote>\nN/A.</blockquote>\n</div>\n</div>\n</div>\n<div id=\"recovery\">\n<h2><a href=\"#id21\" rel=\"nofollow\">Recovery</a></h2>\n<blockquote>\n<p>When running in recovery, unless indicated otherwise, latest run (initial or recovery) would be used.</p>\n<p>Note that when running a program with the intent to use its recovery capabilities, in-memory store <strong>cannot</strong> be use.\nInstead, physical storage must be used.</p>\n<p>Here is an example for recovery program and run.</p>\n</blockquote>\n<div id=\"recovery-example\">\n<h3>Recovery Example</h3>\n<blockquote>\n<pre><span class=\"ln\"> 1 </span><span class=\"kn\">import</span> <span class=\"nn\">eventor</span> <span class=\"k\">as</span> <span class=\"nn\">evr</span>\n<span class=\"ln\"> 2 </span><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"ln\"> 3 </span><span class=\"kn\">import</span> <span class=\"nn\">math</span>\n<span class=\"ln\"> 4 </span><span class=\"kn\">from</span> <span class=\"nn\">acrilib</span> <span class=\"kn\">import</span> <span class=\"n\">LoggerAddHostFilter</span>\n<span class=\"ln\"> 5 </span>\n<span class=\"ln\"> 6 </span><span class=\"n\">appname</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">basename</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">)</span>\n<span class=\"ln\"> 7 </span><span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"n\">appname</span><span class=\"p\">)</span>\n<span class=\"ln\"> 8 </span>\n<span class=\"ln\"> 9 </span><span class=\"k\">def</span> <span class=\"nf\">square</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n<span class=\"ln\">10 </span>    <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"o\">*</span><span class=\"n\">x</span>\n<span class=\"ln\">11 </span>    <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">\"Square of </span><span class=\"si\">%s</span><span class=\"s2\"> is </span><span class=\"si\">%s</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">))</span>\n<span class=\"ln\">12 </span>    <span class=\"k\">return</span> <span class=\"n\">y</span>\n<span class=\"ln\">13 </span>\n<span class=\"ln\">14 </span>\n<span class=\"ln\">15 </span><span class=\"k\">def</span> <span class=\"nf\">square_root</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n<span class=\"ln\">16 </span>    <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"ln\">17 </span>    <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">\"Square root of </span><span class=\"si\">%s</span><span class=\"s2\"> is </span><span class=\"si\">%s</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">))</span>\n<span class=\"ln\">18 </span>    <span class=\"k\">return</span> <span class=\"n\">y</span>\n<span class=\"ln\">19 </span>\n<span class=\"ln\">20 </span>\n<span class=\"ln\">21 </span><span class=\"k\">def</span> <span class=\"nf\">divide</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n<span class=\"ln\">22 </span>    <span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"o\">/</span><span class=\"n\">y</span>\n<span class=\"ln\">23 </span>    <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">\"dividing </span><span class=\"si\">%s</span><span class=\"s2\"> by </span><span class=\"si\">%s</span><span class=\"s2\"> is </span><span class=\"si\">%s</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">))</span>\n<span class=\"ln\">24 </span>    <span class=\"k\">return</span> <span class=\"n\">z</span>\n<span class=\"ln\">25 </span>\n<span class=\"ln\">26 </span><span class=\"k\">def</span> <span class=\"nf\">build_flow</span><span class=\"p\">(</span><span class=\"n\">run_mode</span><span class=\"o\">=</span><span class=\"n\">evr</span><span class=\"o\">.</span><span class=\"n\">RUN_RESTART</span><span class=\"p\">,</span> <span class=\"n\">param</span><span class=\"o\">=</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"n\">run_id</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n<span class=\"ln\">27 </span>    <span class=\"n\">ev</span> <span class=\"o\">=</span> <span class=\"n\">evr</span><span class=\"o\">.</span><span class=\"n\">Eventor</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">appname</span><span class=\"p\">,</span> <span class=\"n\">run_mode</span><span class=\"o\">=</span><span class=\"n\">run_mode</span><span class=\"p\">,</span> <span class=\"n\">run_id</span><span class=\"o\">=</span><span class=\"n\">run_id</span><span class=\"p\">,</span>\n<span class=\"ln\">28 </span>                     <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'LOGGING'</span><span class=\"p\">:</span>\n<span class=\"ln\">29 </span>                             <span class=\"p\">{</span><span class=\"s1\">'logging_level'</span><span class=\"p\">:</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">INFO</span><span class=\"p\">}},))</span>\n<span class=\"ln\">30 </span>\n<span class=\"ln\">31 </span>    <span class=\"n\">ev1s</span> <span class=\"o\">=</span> <span class=\"n\">ev</span><span class=\"o\">.</span><span class=\"n\">add_event</span><span class=\"p\">(</span><span class=\"s1\">'run_step1'</span><span class=\"p\">)</span>\n<span class=\"ln\">32 </span>    <span class=\"n\">ev1d</span> <span class=\"o\">=</span> <span class=\"n\">ev</span><span class=\"o\">.</span><span class=\"n\">add_event</span><span class=\"p\">(</span><span class=\"s1\">'done_step1'</span><span class=\"p\">)</span>\n<span class=\"ln\">33 </span>    <span class=\"n\">ev2s</span> <span class=\"o\">=</span> <span class=\"n\">ev</span><span class=\"o\">.</span><span class=\"n\">add_event</span><span class=\"p\">(</span><span class=\"s1\">'run_step2'</span><span class=\"p\">)</span>\n<span class=\"ln\">34 </span>    <span class=\"n\">ev2d</span> <span class=\"o\">=</span> <span class=\"n\">ev</span><span class=\"o\">.</span><span class=\"n\">add_event</span><span class=\"p\">(</span><span class=\"s1\">'done_step2'</span><span class=\"p\">)</span>\n<span class=\"ln\">35 </span>    <span class=\"n\">ev3s</span> <span class=\"o\">=</span> <span class=\"n\">ev</span><span class=\"o\">.</span><span class=\"n\">add_event</span><span class=\"p\">(</span><span class=\"s1\">'run_step3'</span><span class=\"p\">,</span> <span class=\"n\">expr</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">ev1d</span><span class=\"p\">,</span> <span class=\"n\">ev2d</span><span class=\"p\">))</span>\n<span class=\"ln\">36 </span>\n<span class=\"ln\">37 </span>    <span class=\"n\">s1</span> <span class=\"o\">=</span> <span class=\"n\">ev</span><span class=\"o\">.</span><span class=\"n\">add_step</span><span class=\"p\">(</span><span class=\"s1\">'s1'</span><span class=\"p\">,</span> <span class=\"n\">func</span><span class=\"o\">=</span><span class=\"n\">square</span><span class=\"p\">,</span> <span class=\"n\">kwargs</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'x'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">},</span>\n<span class=\"ln\">38 </span>                   <span class=\"n\">triggers</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"n\">evr</span><span class=\"o\">.</span><span class=\"n\">STEP_SUCCESS</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">ev1d</span><span class=\"p\">,</span> <span class=\"n\">ev2s</span><span class=\"p\">,)},)</span>\n<span class=\"ln\">39 </span>    <span class=\"n\">s2</span> <span class=\"o\">=</span> <span class=\"n\">ev</span><span class=\"o\">.</span><span class=\"n\">add_step</span><span class=\"p\">(</span><span class=\"s1\">'s2'</span><span class=\"p\">,</span> <span class=\"n\">square_root</span><span class=\"p\">,</span> <span class=\"n\">kwargs</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'x'</span><span class=\"p\">:</span> <span class=\"n\">param</span><span class=\"p\">},</span>\n<span class=\"ln\">40 </span>                     <span class=\"n\">triggers</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"n\">evr</span><span class=\"o\">.</span><span class=\"n\">STEP_SUCCESS</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">ev2d</span><span class=\"p\">,),</span> <span class=\"p\">},</span>\n<span class=\"ln\">41 </span>                     <span class=\"n\">recovery</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"n\">evr</span><span class=\"o\">.</span><span class=\"n\">STEP_FAILURE</span><span class=\"p\">:</span> <span class=\"n\">evr</span><span class=\"o\">.</span><span class=\"n\">STEP_RERUN</span><span class=\"p\">,</span>\n<span class=\"ln\">42 </span>                               <span class=\"n\">evr</span><span class=\"o\">.</span><span class=\"n\">STEP_SUCCESS</span><span class=\"p\">:</span> <span class=\"n\">evr</span><span class=\"o\">.</span><span class=\"n\">STEP_SKIP</span><span class=\"p\">})</span>\n<span class=\"ln\">43 </span>    <span class=\"n\">s3</span> <span class=\"o\">=</span> <span class=\"n\">ev</span><span class=\"o\">.</span><span class=\"n\">add_step</span><span class=\"p\">(</span><span class=\"s1\">'s3'</span><span class=\"p\">,</span> <span class=\"n\">divide</span><span class=\"p\">,</span> <span class=\"n\">kwargs</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'x'</span><span class=\"p\">:</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"s1\">'y'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">},)</span>\n<span class=\"ln\">44 </span>\n<span class=\"ln\">45 </span>    <span class=\"n\">ev</span><span class=\"o\">.</span><span class=\"n\">add_assoc</span><span class=\"p\">(</span><span class=\"n\">ev1s</span><span class=\"p\">,</span> <span class=\"n\">s1</span><span class=\"p\">)</span>\n<span class=\"ln\">46 </span>    <span class=\"n\">ev</span><span class=\"o\">.</span><span class=\"n\">add_assoc</span><span class=\"p\">(</span><span class=\"n\">ev2s</span><span class=\"p\">,</span> <span class=\"n\">s2</span><span class=\"p\">)</span>\n<span class=\"ln\">47 </span>    <span class=\"n\">ev</span><span class=\"o\">.</span><span class=\"n\">add_assoc</span><span class=\"p\">(</span><span class=\"n\">ev3s</span><span class=\"p\">,</span> <span class=\"n\">s3</span><span class=\"p\">)</span>\n<span class=\"ln\">48 </span>    <span class=\"n\">ev</span><span class=\"o\">.</span><span class=\"n\">trigger_event</span><span class=\"p\">(</span><span class=\"n\">ev1s</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"ln\">49 </span>    <span class=\"k\">return</span> <span class=\"n\">ev</span>\n<span class=\"ln\">50 </span>\n<span class=\"ln\">51 </span>\n<span class=\"ln\">52 </span><span class=\"k\">def</span> <span class=\"nf\">construct_and_run</span><span class=\"p\">():</span>\n<span class=\"ln\">53 </span>    <span class=\"c1\"># start regularly; it would fail in step 2</span>\n<span class=\"ln\">54 </span>    <span class=\"n\">ev</span> <span class=\"o\">=</span> <span class=\"n\">build_eventor</span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"o\">=-</span><span class=\"mi\">9</span><span class=\"p\">)</span>\n<span class=\"ln\">55 </span>    <span class=\"n\">run_id</span> <span class=\"o\">=</span> <span class=\"n\">ev</span><span class=\"o\">.</span><span class=\"n\">run_id</span>\n<span class=\"ln\">56 </span>    <span class=\"n\">ev</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n<span class=\"ln\">57 </span>    <span class=\"n\">ev</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n<span class=\"ln\">58 </span>\n<span class=\"ln\">59 </span>    <span class=\"c1\"># rerun in recovery</span>\n<span class=\"ln\">60 </span>    <span class=\"n\">ev</span> <span class=\"o\">=</span> <span class=\"n\">build_eventor</span><span class=\"p\">(</span><span class=\"n\">evr</span><span class=\"o\">.</span><span class=\"n\">RUN_RECOVER</span><span class=\"p\">,</span> <span class=\"n\">param</span><span class=\"o\">=</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"n\">run_id</span><span class=\"o\">=</span><span class=\"n\">run_id</span><span class=\"p\">)</span>\n<span class=\"ln\">61 </span>    <span class=\"n\">ev</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n<span class=\"ln\">62 </span>    <span class=\"n\">ev</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n<span class=\"ln\">63 </span>\n<span class=\"ln\">64 </span>\n<span class=\"ln\">65 </span><span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n<span class=\"ln\">66 </span>    <span class=\"n\">construct_and_run</span><span class=\"p\">()</span>\n</pre>\n</blockquote>\n</div>\n<div id=\"id12\">\n<h3>Example Output</h3>\n<blockquote>\n<pre><span class=\"ln\"> 1 </span>[ 2016-12-07 08:37:53,541 ][ INFO ][ Eventor store file: /eventor/example/runly03.run.db ]\n<span class=\"ln\"> 2 </span>[ 2016-12-07 08:37:53,586 ][ INFO ][ [ Step s1/3 ] Trying to run ]\n<span class=\"ln\"> 3 </span>[ 2016-12-07 08:37:53,588 ][ INFO ][ Square of 3 is 9 ]\n<span class=\"ln\"> 4 </span>[ 2016-12-07 08:37:53,588 ][ INFO ][ [ Step s1/3 ] Completed, status: TaskStatus.success ]\n<span class=\"ln\"> 5 </span>[ 2016-12-07 08:37:55,644 ][ INFO ][ [ Step s2/3 ] Trying to run ]\n<span class=\"ln\"> 6 </span>[ 2016-12-07 08:37:55,647 ][ INFO ][ [ Step s2/3 ] Completed, status: TaskStatus.failure ]\n<span class=\"ln\"> 7 </span>[ 2016-12-07 08:37:56,663 ][ ERROR ][ Exception in run_action:\n<span class=\"ln\"> 8 </span>    &lt;Task(id='2', step_id='s2', sequence='3', recovery='0', pid='8112', status='TaskStatus.failure', created='2016-12-07 14:37:55.625870', updated='2016-12-07 14:37:55.633819')&gt; ]\n<span class=\"ln\"> 9 </span>[ 2016-12-07 08:37:56,663 ][ ERROR ][ ValueError('math domain error',) ]\n<span class=\"ln\">10 </span>[ 2016-12-07 08:37:56,663 ][ ERROR ][ File \"/sand/eventor/eventor/main.py\", line 62, in task_wrapper\n<span class=\"ln\">11 </span>            result=step(seq_path=task.sequence)\n<span class=\"ln\">12 </span>File \"/sand/eventor/eventor/step.py\", line 82, in __call__\n<span class=\"ln\">13 </span>            result=func(*func_args, **func_kwargs)\n<span class=\"ln\">14 </span>File \"/eventor/example/runly03.py\", line 66, in square_root\n<span class=\"ln\">15 </span>        y=math.sqrt(x) ]\n<span class=\"ln\">16 </span>[ 2016-12-07 08:37:56,663 ][ INFO ][ Stopping running processes ]\n<span class=\"ln\">17 </span>[ 2016-12-07 08:37:56,667 ][ INFO ][ Processing finished with: failure ]\n<span class=\"ln\">18 </span>[ 2016-12-07 08:37:56,670 ][ INFO ][ Eventor store file: /eventor/example/runly03.run.db ]\n<span class=\"ln\">19 </span>[ 2016-12-07 08:37:57,736 ][ INFO ][ [ Step s2/3 ] Trying to run ]\n<span class=\"ln\">20 </span>[ 2016-12-07 08:37:57,739 ][ INFO ][ Square root of 9 is 3.0 ]\n<span class=\"ln\">21 </span>[ 2016-12-07 08:37:57,739 ][ INFO ][ [ Step s2/3 ] Completed, status: TaskStatus.success ]\n<span class=\"ln\">22 </span>[ 2016-12-07 08:38:00,798 ][ INFO ][ [ Step s3/3 ] Trying to run ]\n<span class=\"ln\">23 </span>[ 2016-12-07 08:38:00,800 ][ INFO ][ dividing 9 by 3 is 3.0 ]\n<span class=\"ln\">24 </span>[ 2016-12-07 08:38:00,800 ][ INFO ][ [ Step s3/3 ] Completed, status: TaskStatus.success ]\n<span class=\"ln\">25 </span>[ 2016-12-07 08:38:01,824 ][ INFO ][ Processing finished with: success ]\n</pre>\n</blockquote>\n</div>\n<div id=\"id13\">\n<h3>Example Highlights</h3>\n<blockquote>\n<p>The function <em>build_flow</em> (code line 24) build an Eventor flow using three functions defined in advance.\nSince no specific store is provided in Eventor instantiation, a default runner store is assigned (code line 25).\nIn this build, step <em>s2</em> (lines 30-35) is being set with recovery directives.</p>\n<p>The first build and run is done in lines 47-48.  In this run, a parameter that would cause the second\nstep to fail is being passed.  As a result, flow fails.  Output lines 1-17 is associated with the first run.</p>\n<p>The second build and run is then initiated.  In this run, parameter is set to a value that would pass\nstep <em>s2</em> and run mode is set to recovery (code lines 51-52). Eventor skips successful steps and start\nexecuting from failed steps onwards.  Output lines 18-25 reflects successful second run.</p>\n</blockquote>\n</div>\n</div>\n<div id=\"delayed-associations\">\n<h2><a href=\"#id22\" rel=\"nofollow\">Delayed Associations</a></h2>\n<blockquote>\n<p>There are situations in which it is desire to hold off activating a task.  This behavior is captured in Eventor as a delayed association.</p>\n<p>Associations can be made delayed.  Assuming source event is associated to target event with time delay.  When source event is triggered, Eventor will wait time delay seconds before triggering target event.</p>\n<p>In such situations, it sometimes desire to run Eventor engine in specific period on a time line instead of continuously.  For example, if Eventor is synchronizing activities that has 6 hours association delay.  Instead of running Eventor continuously, it can be set to run every 5 minutes, and save computing resources on the side.</p>\n<p>With <em>delayed associations</em>, Eventor can run in <em>continue</em> run mode (<em>RunMode.continue_</em>).  When running in <em>continue</em>, Eventor will pick up from where it left last run.</p>\n<p>The following example present <em>delayed association</em> with <em>continue</em> run mode.</p>\n</blockquote>\n<div id=\"delay-example\">\n<h3>Delay Example</h3>\n<blockquote>\n<pre><span class=\"ln\"> 1 </span>import eventor as evr\n<span class=\"ln\"> 2 </span>import logging\n<span class=\"ln\"> 3 </span>import os\n<span class=\"ln\"> 4 </span>import time\n<span class=\"ln\"> 5 </span>\n<span class=\"ln\"> 6 </span>appname = os.path.basename(__file__)\n<span class=\"ln\"> 7 </span>logger = logging.getLogger(appname)\n<span class=\"ln\"> 8 </span>\n<span class=\"ln\"> 9 </span>def prog(progname):\n<span class=\"ln\">10 </span>    logger.info(\"doing what %s is doing\" % progname)\n<span class=\"ln\">11 </span>    logger.info(\"EVENTOR_STEP_SEQUENCE: %s\" % os.getenv(\"EVENTOR_STEP_SEQUENCE\"))\n<span class=\"ln\">12 </span>    return progname\n<span class=\"ln\">13 </span>\n<span class=\"ln\">14 </span>\n<span class=\"ln\">15 </span>def build_flow(run_mode):\n<span class=\"ln\">16 </span>    ev = evr.Eventor(name=appname, run_mode=run_mode,)\n<span class=\"ln\">17 </span>\n<span class=\"ln\">18 </span>    ev1s = ev.add_event('run_step1')\n<span class=\"ln\">19 </span>    ev2s = ev.add_event('run_step2')\n<span class=\"ln\">20 </span>    ev3s = ev.add_event('run_step3')\n<span class=\"ln\">21 </span>\n<span class=\"ln\">22 </span>    s1 = ev.add_step('s1', func=prog, kwargs={'progname': 'prog1'}, triggers={evr.STEP_SUCCESS: (ev2s,)})\n<span class=\"ln\">23 </span>    s2 = ev.add_step('s2', func=prog, kwargs={'progname': 'prog2'}, triggers={evr.STEP_SUCCESS: (ev3s,)})\n<span class=\"ln\">24 </span>    s3 = ev.add_step('s3', func=prog, kwargs={'progname': 'prog3'},)\n<span class=\"ln\">25 </span>\n<span class=\"ln\">26 </span>    ev.add_assoc(ev1s, s1, delay=0)\n<span class=\"ln\">27 </span>    ev.add_assoc(ev2s, s2, delay=10)\n<span class=\"ln\">28 </span>    ev.add_assoc(ev3s, s3, delay=10)\n<span class=\"ln\">29 </span>\n<span class=\"ln\">30 </span>    ev.trigger_event(ev1s, 1)\n<span class=\"ln\">31 </span>    return ev\n<span class=\"ln\">32 </span>\n<span class=\"ln\">33 </span>\n<span class=\"ln\">34 </span>def construct_and_run():\n<span class=\"ln\">35 </span>    ev = build_flow(run_mode=evr.RUN_RESTART)\n<span class=\"ln\">36 </span>    ev.run()\n<span class=\"ln\">37 </span>    ev.close()\n<span class=\"ln\">38 </span>\n<span class=\"ln\">39 </span>if __name__ == '__main__':\n<span class=\"ln\">40 </span>    construct_and_run()\n</pre>\n</blockquote>\n</div>\n<div id=\"id14\">\n<h3>Example Output</h3>\n<blockquote>\n<pre><span class=\"ln\"> 1 </span>[ 2017-08-16,16:31:29.277048 ][ Task-s1(1)  ][ INFO    ][ [ Step s1/1 ] Trying to run ]\n<span class=\"ln\"> 2 </span>[ 2017-08-16,16:31:29.277903 ][ Task-s1(1)  ][ INFO    ][ doing what prog1 is doing ]\n<span class=\"ln\"> 3 </span>[ 2017-08-16,16:31:29.278114 ][ Task-s1(1)  ][ INFO    ][ EVENTOR_STEP_SEQUENCE: 1 ]\n<span class=\"ln\"> 4 </span>[ 2017-08-16,16:31:29.278360 ][ Task-s1(1)  ][ INFO    ][ [ Step s1/1 ] Completed, status: TaskStatus.success ]\n<span class=\"ln\"> 5 </span>[ 2017-08-16,16:31:41.028196 ][ Task-s2(1)  ][ INFO    ][ [ Step s2/1 ] Trying to run ]\n<span class=\"ln\"> 6 </span>[ 2017-08-16,16:31:41.029191 ][ Task-s2(1)  ][ INFO    ][ doing what prog2 is doing ]\n<span class=\"ln\"> 7 </span>[ 2017-08-16,16:31:41.029429 ][ Task-s2(1)  ][ INFO    ][ EVENTOR_STEP_SEQUENCE: 1 ]\n<span class=\"ln\"> 8 </span>[ 2017-08-16,16:31:41.029697 ][ Task-s2(1)  ][ INFO    ][ [ Step s2/1 ] Completed, status: TaskStatus.success ]\n<span class=\"ln\"> 9 </span>[ 2017-08-16,16:32:02.931265 ][ Task-s3(1)  ][ INFO    ][ [ Step s3/1 ] Trying to run ]\n<span class=\"ln\">10 </span>[ 2017-08-16,16:32:02.932407 ][ Task-s3(1)  ][ INFO    ][ doing what prog3 is doing ]\n<span class=\"ln\">11 </span>[ 2017-08-16,16:32:02.932661 ][ Task-s3(1)  ][ INFO    ][ EVENTOR_STEP_SEQUENCE: 1 ]\n<span class=\"ln\">12 </span>[ 2017-08-16,16:32:02.932940 ][ Task-s3(1)  ][ INFO    ][ [ Step s3/1 ] Completed, status: TaskStatus.success ]\n<span class=\"ln\">13 </span>[ 2017-08-16,16:32:03.014584 ][ MainProcess ][ INFO    ][ Processing finished with: success; outstanding tasks: 0 ]\n</pre>\n</blockquote>\n</div>\n<div id=\"id15\">\n<h3>Example Highlights</h3>\n<blockquote>\n<p>The example program builds and runs Eventor sequence 4 times.  The build involves three tasks that would run sequentially.  They are associated to each other with delay of 10 seconds each (lines 26 and 28.)</p>\n<p>The first time, sequence is build with <em>restart</em> run mode (line 35).  In this case, the sequence is initiated.  The next four runs are in <em>continue</em> run mode (line 48).  Each of those run continue its preceding run.  To have it show the point, a varying delay is introduced between runs (lines 46-47).</p>\n<p>Each run limits the number of loop to a single loop (lines 40 and 50).  A single loop entails Eventor executing triggers and tasks until there is none to execute.  It may be though that there are still outstanding delayed association to act upon.</p>\n<p>This behavior is different than continuous run (using max_loops=-1), which is the default.  In such run, Eventor will continue to loop until there are no triggers, tasks, and delayed association to process.</p>\n<p>Eventor runs can be observed in example output lines 1-5, 6, 7-11, 12, and 13-17 each.  Note that the second and forth runs had not trigger to execute on.  The associated tasks\u2019 delays was not yet matured.</p>\n</blockquote>\n</div>\n</div>\n<div id=\"resources\">\n<h2><a href=\"#id23\" rel=\"nofollow\">Resources</a></h2>\n<blockquote>\n<p><em>add_step</em> allows association of step with resources.  If acquires argument is provided, before step starts, <em>Eventor</em>\nwill attempt to reserve resources.  Step will be executed only when resources are secured.</p>\n<p>When <em>release</em> argument is provided, resources resources listed as its value will be released when step is done.  If\nrelease is None, whatever resources stated by <em>acquires</em> would be released.  If the empty list is set as value, no\nresource would be released.</p>\n<p>To use resources, program to use Resource and ResourcePool from acris.virtual_resource_pool.  Example for such definitions are below.</p>\n</blockquote>\n<div id=\"example-for-resources-definitions\">\n<h3>Example for resources definitions</h3>\n<blockquote>\n<pre><span class=\"ln\"> 1 </span><span class=\"kn\">import</span> <span class=\"nn\">eventor</span> <span class=\"k\">as</span> <span class=\"nn\">evr</span>\n<span class=\"ln\"> 2 </span><span class=\"kn\">from</span> <span class=\"nn\">acris</span> <span class=\"kn\">import</span> <span class=\"n\">virtual_resource_pool</span> <span class=\"k\">as</span> <span class=\"n\">vrp</span>\n<span class=\"ln\"> 3 </span>\n<span class=\"ln\"> 4 </span><span class=\"k\">class</span> <span class=\"nc\">Resources1</span><span class=\"p\">(</span><span class=\"n\">vrp</span><span class=\"o\">.</span><span class=\"n\">Resource</span><span class=\"p\">):</span> <span class=\"k\">pass</span>\n<span class=\"ln\"> 5 </span><span class=\"k\">class</span> <span class=\"nc\">Resources2</span><span class=\"p\">(</span><span class=\"n\">vrp</span><span class=\"o\">.</span><span class=\"n\">Resource</span><span class=\"p\">):</span> <span class=\"k\">pass</span>\n<span class=\"ln\"> 6 </span>\n<span class=\"ln\"> 7 </span><span class=\"n\">rp1</span> <span class=\"o\">=</span> <span class=\"n\">vrp</span><span class=\"o\">.</span><span class=\"n\">ResourcePool</span><span class=\"p\">(</span><span class=\"s1\">'RP1'</span><span class=\"p\">,</span> <span class=\"n\">resource_cls</span><span class=\"o\">=</span><span class=\"n\">Resources1</span><span class=\"p\">,</span> <span class=\"n\">policy</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'resource_limit'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"p\">})</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">()</span>\n<span class=\"ln\"> 8 </span><span class=\"n\">rp2</span> <span class=\"o\">=</span> <span class=\"n\">vrp</span><span class=\"o\">.</span><span class=\"n\">ResourcePool</span><span class=\"p\">(</span><span class=\"s1\">'RP2'</span><span class=\"p\">,</span> <span class=\"n\">resource_cls</span><span class=\"o\">=</span><span class=\"n\">Resources2</span><span class=\"p\">,</span> <span class=\"n\">policy</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'resource_limit'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"p\">})</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">()</span>\n<span class=\"ln\"> 9 </span>\n<span class=\"ln\">10 </span><span class=\"n\">ev</span> <span class=\"o\">=</span> <span class=\"n\">evr</span><span class=\"o\">.</span><span class=\"n\">Eventor</span><span class=\"p\">()</span>\n<span class=\"ln\">11 </span>\n<span class=\"ln\">12 </span><span class=\"n\">s1</span> <span class=\"o\">=</span> <span class=\"n\">ev</span><span class=\"o\">.</span><span class=\"n\">add_step</span><span class=\"p\">(</span><span class=\"s1\">'s0.s00.s1'</span><span class=\"p\">,</span> <span class=\"n\">func</span><span class=\"o\">=</span><span class=\"n\">prog</span><span class=\"p\">,</span> <span class=\"n\">kwargs</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'progname'</span><span class=\"p\">:</span> <span class=\"s1\">'prog1'</span><span class=\"p\">},</span> <span class=\"n\">acquires</span><span class=\"o\">=</span><span class=\"p\">[(</span><span class=\"n\">rp2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">],)</span>\n</pre>\n</blockquote>\n</div>\n</div>\n<div id=\"distributed-steps\">\n<h2><a href=\"#id24\" rel=\"nofollow\">Distributed Steps</a></h2>\n<p>Eventor program can work in a clustered environment.  In this arrangement, steps can be defined to run on different nodes in the cluster.  This is possible granted:</p>\n<blockquote>\n<ol>\n<li>SSH is defined among cluster nodes.</li>\n<li>Eventor DB is shared among cluster nodes.</li>\n<li>Program environment is the <em>seamlessly-the-same</em> among cluster nodes.</li>\n</ol>\n</blockquote>\n<div id=\"how-it-works\">\n<h3>How it works</h3>\n<p>Eventor will be launched from one host, <em>server</em>.  It will then start the same program on every associated host relevant to program, <em>clients</em>.  <em>Client</em> programs will skip <em>starting</em> steps (steps with no )</p>\n</div>\n<div id=\"cluster-ssh-access\">\n<h3>Cluster SSH access</h3>\n<p>When working on distributed environment, Eventor assumes that ssh is set properly among participating hosts.</p>\n<p>To allow ssh run command with .profile (or .bash_profile) are not automatically executed, add the following before RSA key in .ssh/authorizedkeys</p>\n<blockquote>\n<pre><span class=\"n\">command</span> <span class=\"s2\">\"if [[ </span><span class=\"se\">\\\"</span><span class=\"s2\">x$</span><span class=\"si\">{SSH_ORIGINAL_COMMAND}</span><span class=\"s2\">x</span><span class=\"se\">\\\"</span><span class=\"s2\"> != </span><span class=\"se\">\\\"</span><span class=\"s2\">xx</span><span class=\"se\">\\\"</span><span class=\"s2\"> ]]; then source ~/.profile; eval </span><span class=\"se\">\\\"</span><span class=\"s2\">$</span><span class=\"si\">{SSH_ORIGINAL_COMMAND}</span><span class=\"se\">\\\"</span><span class=\"s2\">; else /bin/bash --login; fi;\"</span> <span class=\"o\">&lt;</span><span class=\"n\">key</span><span class=\"o\">&gt;</span>\n</pre>\n</blockquote>\n</div>\n<div id=\"database\">\n<h3>Database</h3>\n<p>Eventor program would be launched on all cluster nodes relevant to the program.</p>\n</div>\n</div>\n<div id=\"todos\">\n<h2><a href=\"#id25\" rel=\"nofollow\">TODOs</a></h2>\n<blockquote>\n<p>The following is some of the major tasks intended to be completed into this product.</p>\n<ol>\n<li>asynchronous tasks: embed mechanism to launch asynchronous tasks.</li>\n<li>remote callback mechanisms: allow remote asynchronous tasks communicate with Eventor (TCP/IP, HTTP, etc.)</li>\n<li>virtual resources shared across distributed environment.</li>\n<li>improve SSHPipe to better indicate SSH channel was established.</li>\n</ol>\n</blockquote>\n</div>\n<div id=\"change-log\">\n<h2><a href=\"#id26\" rel=\"nofollow\">Change log</a></h2>\n<div id=\"id16\">\n<h3>5.0</h3>\n<blockquote>\n<ol>\n<li>added database configuration allowing the use of SqlAlchemy database engines.</li>\n<li>added shared_db to indicate db is shared among multiple programs and runs.</li>\n<li>added run_id as unique identifier for program run (not to be confused with recovery).</li>\n<li>improved documentation to reflect the need for mp.freeze_support() and mp.set_start_method(\u2018spawn\u2019).</li>\n<li>added dependency on namedlist, and PyYAML, packages.</li>\n<li>bug fix in delay.</li>\n</ol>\n</blockquote>\n</div>\n<div id=\"id17\">\n<h3>5.1</h3>\n<blockquote>\n<ol>\n<li>SSH remote invocation of steps.</li>\n<li>use of socket based logging.</li>\n<li>centralized logging of remote agents in prime server.</li>\n<li>Added {envvar_prefix}LOGGER_NAME to allow step logger to be set appropriately.</li>\n</ol>\n</blockquote>\n</div>\n</div>\n<div id=\"additional-information\">\n<h2><a href=\"#id27\" rel=\"nofollow\">Additional Information</a></h2>\n<blockquote>\n<ol>\n<li>Eventor github project (<a href=\"https://github.com/Acrisel/eventor\" rel=\"nofollow\">Eventor github project</a>) has additional examples with more complicated flows.</li>\n<li><a href=\"https://acrisel.github.io/posts/2017/09/ssh-pipe-with-python-subprocess_multiprocessing/\" rel=\"nofollow\">SSH Pipe</a> blog clarifying the mechanism using by Eventor for remote steps and centralized logging.</li>\n</ol>\n</blockquote>\n</div>\n\n          </div>"}, "last_serial": 3593941, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "518f75fd388497f51cadceb94282c0d1", "sha256": "2d4b1c39fa6459919caf7befaddaa828326e0409ba000683691a0c29248aad39"}, "downloads": -1, "filename": "eventor-1.0.0.tar.gz", "has_sig": false, "md5_digest": "518f75fd388497f51cadceb94282c0d1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19823, "upload_time": "2016-12-01T00:14:36", "upload_time_iso_8601": "2016-12-01T00:14:36.066257Z", "url": "https://files.pythonhosted.org/packages/72/c8/a0df75b435c743c79f6f681919253c48008f03caee2a548f08fddd3ca950/eventor-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "4638ba5f3edfb3bd76daf0b9b50b0ec2", "sha256": "1e28c9bb91d248c30f9387c25421c0dede4e4d7ce72db2f9ad185372e93f0fc3"}, "downloads": -1, "filename": "eventor-1.0.1.tar.gz", "has_sig": false, "md5_digest": "4638ba5f3edfb3bd76daf0b9b50b0ec2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19879, "upload_time": "2016-12-01T22:31:52", "upload_time_iso_8601": "2016-12-01T22:31:52.226968Z", "url": "https://files.pythonhosted.org/packages/dc/a2/03ee6f8e9cb9c93065b019d3cf79fdc173cc10221cd51017dfce58b5b448/eventor-1.0.1.tar.gz", "yanked": false}], "1.0.10": [{"comment_text": "", "digests": {"md5": "6ae1a1e75f470053949eab34d23e1c07", "sha256": "b586732f5c44f9010607d5a2ce8da5d9b3552bc30dbd59c20303ec0aaa2b1ddf"}, "downloads": -1, "filename": "eventor-1.0.10.tar.gz", "has_sig": false, "md5_digest": "6ae1a1e75f470053949eab34d23e1c07", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24921, "upload_time": "2016-12-12T03:49:17", "upload_time_iso_8601": "2016-12-12T03:49:17.330991Z", "url": "https://files.pythonhosted.org/packages/85/3a/db1ee1881004e3d1c426d3a273e02cde3582feb54e80291a7afcbc3fc2ce/eventor-1.0.10.tar.gz", "yanked": false}], "1.0.11": [{"comment_text": "", "digests": {"md5": "2ff04ee7843bac25ae7d133c5248fc5f", "sha256": "57cdaedd3691d5551c4073a0a347efc157d830bf6cdd126a1c257b62791d2ba4"}, "downloads": -1, "filename": "eventor-1.0.11.tar.gz", "has_sig": false, "md5_digest": "2ff04ee7843bac25ae7d133c5248fc5f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27610, "upload_time": "2016-12-20T00:50:56", "upload_time_iso_8601": "2016-12-20T00:50:56.983883Z", "url": "https://files.pythonhosted.org/packages/e2/0e/6c9ac9ff9b34280e269f938e33de9655cf2a62bd5605dba40b9be89e1c98/eventor-1.0.11.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "856af8e4b4edcb312e5e3a08e18283ce", "sha256": "632c5db374d0e747f91c2c008a1018f7b6d40788479158c9372e1011ce2c26dd"}, "downloads": -1, "filename": "eventor-1.0.2.tar.gz", "has_sig": false, "md5_digest": "856af8e4b4edcb312e5e3a08e18283ce", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20433, "upload_time": "2016-12-02T21:42:27", "upload_time_iso_8601": "2016-12-02T21:42:27.193428Z", "url": "https://files.pythonhosted.org/packages/a5/5f/58267f1b99ae0acaa3869c1e52088bd8e8619b01e1c741cf5710433fc694/eventor-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "f7e0caf86dbc99ce19f7d107ee60cc04", "sha256": "efabe8c319069ffd3413656f2fffa613e8045cf92c687304eb592df58d8d1ea3"}, "downloads": -1, "filename": "eventor-1.0.3.tar.gz", "has_sig": false, "md5_digest": "f7e0caf86dbc99ce19f7d107ee60cc04", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21093, "upload_time": "2016-12-04T01:05:52", "upload_time_iso_8601": "2016-12-04T01:05:52.632622Z", "url": "https://files.pythonhosted.org/packages/a1/ef/fa00f08abe25627cc7bd24b879ef78c83246500d58ddd03231bb498732e1/eventor-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "79014ab103774dd10abac8978fd26223", "sha256": "e3e8ede6ba409dfabd2f0202d634b980034eabd656f4ac769fc9d677c439ff24"}, "downloads": -1, "filename": "eventor-1.0.4.tar.gz", "has_sig": false, "md5_digest": "79014ab103774dd10abac8978fd26223", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21158, "upload_time": "2016-12-04T02:58:19", "upload_time_iso_8601": "2016-12-04T02:58:19.733911Z", "url": "https://files.pythonhosted.org/packages/0d/5e/5b3b5d1456e441d67cbe311b290f24cf8a33a249aa0fce935e5c9773e44c/eventor-1.0.4.tar.gz", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "6a23ef3b275a8412c9eb17b76ab89b5e", "sha256": "9c63c78dfdf9d8fa4b8593c7947f3d4ae916b3fcfdd15e6209b27254200afb35"}, "downloads": -1, "filename": "eventor-1.0.5.tar.gz", "has_sig": false, "md5_digest": "6a23ef3b275a8412c9eb17b76ab89b5e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21539, "upload_time": "2016-12-05T05:51:08", "upload_time_iso_8601": "2016-12-05T05:51:08.695833Z", "url": "https://files.pythonhosted.org/packages/cd/8b/303729445203bccabe1ec4010462f9114bd22ea6590356c8f2aa97d928b1/eventor-1.0.5.tar.gz", "yanked": false}], "1.0.6": [{"comment_text": "", "digests": {"md5": "01b1ff5e01b304170b3e55ae125003b7", "sha256": "495da0f6f2b5c3dc9d426c899f181ee7077755c0b77bdee99bc6ef990eee40bf"}, "downloads": -1, "filename": "eventor-1.0.6.tar.gz", "has_sig": false, "md5_digest": "01b1ff5e01b304170b3e55ae125003b7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21777, "upload_time": "2016-12-05T17:06:42", "upload_time_iso_8601": "2016-12-05T17:06:42.879375Z", "url": "https://files.pythonhosted.org/packages/01/bc/3a9b8435a09392522705bcf60dc5640962d522ca13eed0d9babd328a7dec/eventor-1.0.6.tar.gz", "yanked": false}], "1.0.7": [{"comment_text": "", "digests": {"md5": "c6a815a2aff7244fb0e531a5f37423ff", "sha256": "4b4c78d2b5344aee552df3bd4852e70dccc88955d87d6d6d2fb3bb11ae26f415"}, "downloads": -1, "filename": "eventor-1.0.7.tar.gz", "has_sig": false, "md5_digest": "c6a815a2aff7244fb0e531a5f37423ff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24533, "upload_time": "2016-12-07T14:56:26", "upload_time_iso_8601": "2016-12-07T14:56:26.909519Z", "url": "https://files.pythonhosted.org/packages/4b/31/d01edbe62ee3f8c1007ef5043a1e9cc3f95519fa7134e4234fc6e48aaa84/eventor-1.0.7.tar.gz", "yanked": false}], "1.0.8": [{"comment_text": "", "digests": {"md5": "622532f45fef178c8fdffacefb79cc6e", "sha256": "6def5f40c31601ea330445b562237a19d5fa85115c3bdbe6c6d574b8a30132a1"}, "downloads": -1, "filename": "eventor-1.0.8.tar.gz", "has_sig": false, "md5_digest": "622532f45fef178c8fdffacefb79cc6e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24545, "upload_time": "2016-12-07T15:09:56", "upload_time_iso_8601": "2016-12-07T15:09:56.279014Z", "url": "https://files.pythonhosted.org/packages/4b/ce/99a8e95b37c91be5f41f9dace02346b445c808dd331529671ed9b31df37d/eventor-1.0.8.tar.gz", "yanked": false}], "1.0.9": [{"comment_text": "", "digests": {"md5": "d2163bb583e48418f9596c2e663140c1", "sha256": "3a6f1b20c0112e55b2ed7daa335cdd8942211dc42068dbc626b46777252ec266"}, "downloads": -1, "filename": "eventor-1.0.9.tar.gz", "has_sig": false, "md5_digest": "d2163bb583e48418f9596c2e663140c1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24589, "upload_time": "2016-12-07T22:00:27", "upload_time_iso_8601": "2016-12-07T22:00:27.875703Z", "url": "https://files.pythonhosted.org/packages/0c/f1/b81361489148ad0d35090af219e593f0466772667a0299cf764686807ff8/eventor-1.0.9.tar.gz", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "7be4adad7d2a5cbd1fda6486efd58aa4", "sha256": "4fa881b8f978180510bbf1bbc1c203d02f474267c5a407a64db375448931fb02"}, "downloads": -1, "filename": "eventor-2.0.1.tar.gz", "has_sig": false, "md5_digest": "7be4adad7d2a5cbd1fda6486efd58aa4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27604, "upload_time": "2017-01-12T23:33:46", "upload_time_iso_8601": "2017-01-12T23:33:46.840982Z", "url": "https://files.pythonhosted.org/packages/9c/59/4c8ee6b74dd1b1609f5a3c751e55ff7bcbeb502e39996c6b61f9441fc6b0/eventor-2.0.1.tar.gz", "yanked": false}], "3.0.1": [{"comment_text": "", "digests": {"md5": "7284a479af0f55919acb868aaa80253c", "sha256": "c3e8ba0b22760f3cb9a0dec327be1701180ff940306f42230bde18ca3ef8c3ec"}, "downloads": -1, "filename": "eventor-3.0.1.tar.gz", "has_sig": false, "md5_digest": "7284a479af0f55919acb868aaa80253c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38899, "upload_time": "2017-01-30T20:42:35", "upload_time_iso_8601": "2017-01-30T20:42:35.560432Z", "url": "https://files.pythonhosted.org/packages/bc/a6/8bd3771a20397185c09a2c5417120d3d3e5b4b204de883aa1a63fa9b0c19/eventor-3.0.1.tar.gz", "yanked": false}], "3.0.2": [{"comment_text": "", "digests": {"md5": "f2f93cf38507edd4ddf444b3cdc5a6e4", "sha256": "1dc26fd1933a371bf8bf31a3afa37286ed2c556d92a163c45d21e150278df415"}, "downloads": -1, "filename": "eventor-3.0.2.tar.gz", "has_sig": false, "md5_digest": "f2f93cf38507edd4ddf444b3cdc5a6e4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38879, "upload_time": "2017-02-13T15:57:50", "upload_time_iso_8601": "2017-02-13T15:57:50.602552Z", "url": "https://files.pythonhosted.org/packages/05/33/81bdb93d64e567858f43180c253c323c0f4cbeed3054911d313a90e6823f/eventor-3.0.2.tar.gz", "yanked": false}], "3.0.3": [{"comment_text": "", "digests": {"md5": "a163deb4883c192c9095f644fe44a523", "sha256": "9f78bbb8edff66faee03188fcdddf4a084891133b88ce88b4f90f4397d91a232"}, "downloads": -1, "filename": "eventor-3.0.3.tar.gz", "has_sig": false, "md5_digest": "a163deb4883c192c9095f644fe44a523", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38906, "upload_time": "2017-02-13T16:08:23", "upload_time_iso_8601": "2017-02-13T16:08:23.662827Z", "url": "https://files.pythonhosted.org/packages/11/80/fae6823f98f5ef424bc42e827c51ce268c2632807c6a330709d9943b0742/eventor-3.0.3.tar.gz", "yanked": false}], "3.0.4": [{"comment_text": "", "digests": {"md5": "80b710fea3f60ef7055254ac62a5295e", "sha256": "53717e2ecd8053d7421e6eade26e099b3a67ebd440ebda20c65b6b5b8e0bac10"}, "downloads": -1, "filename": "eventor-3.0.4.tar.gz", "has_sig": false, "md5_digest": "80b710fea3f60ef7055254ac62a5295e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38978, "upload_time": "2017-02-13T16:30:12", "upload_time_iso_8601": "2017-02-13T16:30:12.205494Z", "url": "https://files.pythonhosted.org/packages/61/b7/190ef5780ba8eb6c289d7b311d17d33552f17234db07365534f84e08cf4f/eventor-3.0.4.tar.gz", "yanked": false}], "3.0.5": [{"comment_text": "", "digests": {"md5": "ecd79512b2f7b9136fdfac09d856d5a1", "sha256": "1a8230484f30191aab9c15686e236dd48304b889708f905fabd3e4144bd87805"}, "downloads": -1, "filename": "eventor-3.0.5.tar.gz", "has_sig": false, "md5_digest": "ecd79512b2f7b9136fdfac09d856d5a1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39320, "upload_time": "2017-02-14T16:07:58", "upload_time_iso_8601": "2017-02-14T16:07:58.064133Z", "url": "https://files.pythonhosted.org/packages/9f/ae/3437215c47eede6426123773c119b4085445aa983a96dc3881de0d7ae51f/eventor-3.0.5.tar.gz", "yanked": false}], "4.0.0": [{"comment_text": "", "digests": {"md5": "0f341cbb4fd331eb2c38152395f247e1", "sha256": "ee05b81c0c415f0915aba56ae4a5f9f3b4968af3a4e7b6fe3852c8704c576b13"}, "downloads": -1, "filename": "eventor-4.0.0.tar.gz", "has_sig": false, "md5_digest": "0f341cbb4fd331eb2c38152395f247e1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39996, "upload_time": "2017-02-15T00:07:05", "upload_time_iso_8601": "2017-02-15T00:07:05.553646Z", "url": "https://files.pythonhosted.org/packages/6c/eb/e4fcb925682cd258b2cde6420f2710c15a7c23f5c63513ac314f98f8481e/eventor-4.0.0.tar.gz", "yanked": false}], "4.0.1": [{"comment_text": "", "digests": {"md5": "c5af72b764c53793e6f82b5aab4982de", "sha256": "71d74ca9e3593c1fbdf953a5235b15ec224d1d2053a382de1c04ce4a8e8ab6c0"}, "downloads": -1, "filename": "eventor-4.0.1.tar.gz", "has_sig": false, "md5_digest": "c5af72b764c53793e6f82b5aab4982de", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39988, "upload_time": "2017-02-15T00:28:23", "upload_time_iso_8601": "2017-02-15T00:28:23.668720Z", "url": "https://files.pythonhosted.org/packages/f2/60/aedabb3cab85862cd60bf6dbc1540dddeec0b553f466b32d01478c3fe8f4/eventor-4.0.1.tar.gz", "yanked": false}], "4.0.2": [{"comment_text": "", "digests": {"md5": "d57a92684701fdb28bb97d340ba526bb", "sha256": "919d528a4a4a7a63850aca4c240282293adcf9006f1b55f6985e9190bbed1be1"}, "downloads": -1, "filename": "eventor-4.0.2.tar.gz", "has_sig": false, "md5_digest": "d57a92684701fdb28bb97d340ba526bb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39968, "upload_time": "2017-02-22T15:16:23", "upload_time_iso_8601": "2017-02-22T15:16:23.286670Z", "url": "https://files.pythonhosted.org/packages/8a/9b/4ad56cffd08bd2807f0d9d8493c03f6d9626a5143ee42a8c55fec19d9a97/eventor-4.0.2.tar.gz", "yanked": false}], "4.0.3": [{"comment_text": "", "digests": {"md5": "2bb7c48dbd29d7fcd9ec5ff5db9016bf", "sha256": "77c22cc8f1a59e5b86ea6a4099d3098150b92ce016fc048ad0d2d52eae310f4a"}, "downloads": -1, "filename": "eventor-4.0.3.tar.gz", "has_sig": false, "md5_digest": "2bb7c48dbd29d7fcd9ec5ff5db9016bf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40138, "upload_time": "2017-05-24T13:45:15", "upload_time_iso_8601": "2017-05-24T13:45:15.585783Z", "url": "https://files.pythonhosted.org/packages/5f/d6/5b7993d048d6f423d0a58c89e7316bd26eff3d2c3858234333fe882b4c3b/eventor-4.0.3.tar.gz", "yanked": false}], "4.0.4": [{"comment_text": "", "digests": {"md5": "ab672c1d0d0783d941fb9224ebfc4430", "sha256": "1a589e21c8681275738d1e373cf1a488ae85b10626d17461482a48dd25f907f6"}, "downloads": -1, "filename": "eventor-4.0.4.tar.gz", "has_sig": false, "md5_digest": "ab672c1d0d0783d941fb9224ebfc4430", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40193, "upload_time": "2017-05-28T18:38:31", "upload_time_iso_8601": "2017-05-28T18:38:31.785825Z", "url": "https://files.pythonhosted.org/packages/76/35/ed66f8d1bcd32c0a1fc0c6f2e28e438ace50118e24920720308f70ea3220/eventor-4.0.4.tar.gz", "yanked": false}], "5.0.1": [{"comment_text": "", "digests": {"md5": "3096c9a9ee2dd8207fa11c1bcde84abc", "sha256": "ea7348bc2bc5fcb40a72dc921c00166cfcf91b2220b5858717acb1c2bdfb61a7"}, "downloads": -1, "filename": "eventor-5.0.1.tar.gz", "has_sig": true, "md5_digest": "3096c9a9ee2dd8207fa11c1bcde84abc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47245, "upload_time": "2017-08-16T21:54:52", "upload_time_iso_8601": "2017-08-16T21:54:52.613489Z", "url": "https://files.pythonhosted.org/packages/a6/01/2ea2ae9ce58d5c0f799e79e47a2018e2cd9a39a0612ca189fd6837d48ea9/eventor-5.0.1.tar.gz", "yanked": false}], "5.0.2": [{"comment_text": "", "digests": {"md5": "321cb0152bca1f6346c7c60c74bd344d", "sha256": "89f3c7d732dce4dd4b2e71182371f5b72f279ef800a3f00fdc5b238ceb61805c"}, "downloads": -1, "filename": "eventor-5.0.2.tar.gz", "has_sig": true, "md5_digest": "321cb0152bca1f6346c7c60c74bd344d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47324, "upload_time": "2017-08-16T22:09:59", "upload_time_iso_8601": "2017-08-16T22:09:59.461120Z", "url": "https://files.pythonhosted.org/packages/10/21/d5b7c9450f3917a4dbe1d65c0530db98497ed8da299c79aca15287e32387/eventor-5.0.2.tar.gz", "yanked": false}], "5.0.3": [{"comment_text": "", "digests": {"md5": "582822c3feb37d4c1c8874acf54a485c", "sha256": "c8626d086a217ac1c398335b18176d72443207987e6b40cb5d431598dfa60178"}, "downloads": -1, "filename": "eventor-5.0.3.tar.gz", "has_sig": true, "md5_digest": "582822c3feb37d4c1c8874acf54a485c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 56238, "upload_time": "2017-08-17T14:43:00", "upload_time_iso_8601": "2017-08-17T14:43:00.964646Z", "url": "https://files.pythonhosted.org/packages/59/09/71a15179bafd844b91df164470d3f41e33bd2083a83055386ea064a830c6/eventor-5.0.3.tar.gz", "yanked": false}], "5.0.4": [{"comment_text": "", "digests": {"md5": "49b79c07b2d9d30c6f1e6f6dcdf21f15", "sha256": "92c2bbacc651fe19bf944d84fcec4a559fa7b1acae681ded0720a4c0501d33b1"}, "downloads": -1, "filename": "eventor-5.0.4.tar.gz", "has_sig": true, "md5_digest": "49b79c07b2d9d30c6f1e6f6dcdf21f15", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 56101, "upload_time": "2017-08-23T03:05:41", "upload_time_iso_8601": "2017-08-23T03:05:41.363775Z", "url": "https://files.pythonhosted.org/packages/4f/56/1471b916a610f63c88fa5c21b8037d785b0ca35b173df1a9a8ac54f54562/eventor-5.0.4.tar.gz", "yanked": false}], "5.0.5": [{"comment_text": "", "digests": {"md5": "3f367e93caea59305b84f0aeff7e3a89", "sha256": "7c81af1bf87e7484067cbcfbc7b2ea753be1a07f4ca0c7e279a67da54a49fdcb"}, "downloads": -1, "filename": "eventor-5.0.5.tar.gz", "has_sig": true, "md5_digest": "3f367e93caea59305b84f0aeff7e3a89", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 56155, "upload_time": "2017-09-02T23:50:26", "upload_time_iso_8601": "2017-09-02T23:50:26.410570Z", "url": "https://files.pythonhosted.org/packages/39/7e/0972f57737324bb89b34c7d8a491323f59d362f8198801c3afdb07bc3050/eventor-5.0.5.tar.gz", "yanked": false}], "5.1.0": [{"comment_text": "", "digests": {"md5": "64b54d3088f419d2cef92dd52a21b7a2", "sha256": "cc18aac430866457edb84f5876136c362ac0fee7e7615d5349725e09d195c9f3"}, "downloads": -1, "filename": "eventor-5.1.0.tar.gz", "has_sig": true, "md5_digest": "64b54d3088f419d2cef92dd52a21b7a2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 86750, "upload_time": "2018-01-02T01:54:49", "upload_time_iso_8601": "2018-01-02T01:54:49.364101Z", "url": "https://files.pythonhosted.org/packages/23/78/70589731a52145505755676d91030c26a9c2cd44f9ebfa362386c36da202/eventor-5.1.0.tar.gz", "yanked": false}], "5.1.1": [{"comment_text": "", "digests": {"md5": "a7fc0bddbd3f184b9e46ea85f0ea7bf1", "sha256": "3d1013da231e6b9da47183b4424849f9292d31ad16b77e6a4402a64b3534d7dd"}, "downloads": -1, "filename": "eventor-5.1.1.tar.gz", "has_sig": true, "md5_digest": "a7fc0bddbd3f184b9e46ea85f0ea7bf1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 86938, "upload_time": "2018-01-03T02:17:24", "upload_time_iso_8601": "2018-01-03T02:17:24.971625Z", "url": "https://files.pythonhosted.org/packages/5c/86/3fba67f50ccc92a3d74045630cbbd9c23301be9738fcee446385430f1a41/eventor-5.1.1.tar.gz", "yanked": false}], "5.1.2": [{"comment_text": "", "digests": {"md5": "7dfa40183fde768cf527424b9a4ba3e7", "sha256": "142dc6ec13eff390b095edc5ad64116637c9ad2d37abfeef9386fa65abbf9e9a"}, "downloads": -1, "filename": "eventor-5.1.2.tar.gz", "has_sig": true, "md5_digest": "7dfa40183fde768cf527424b9a4ba3e7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 86529, "upload_time": "2018-01-03T15:01:44", "upload_time_iso_8601": "2018-01-03T15:01:44.963693Z", "url": "https://files.pythonhosted.org/packages/5a/c7/258fcd4c014077cc2ef865b943ea6d46e783f1631bb2c4ae79dae4f0773c/eventor-5.1.2.tar.gz", "yanked": false}], "5.1.3": [{"comment_text": "", "digests": {"md5": "fac1141e0954c809e82d49f65fc785d8", "sha256": "770397f1d1fcef31e23a5a3fe6feee84c6dd7b8fc9077cf8566fc0db521a8a6d"}, "downloads": -1, "filename": "eventor-5.1.3.tar.gz", "has_sig": false, "md5_digest": "fac1141e0954c809e82d49f65fc785d8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 86643, "upload_time": "2018-01-04T20:40:05", "upload_time_iso_8601": "2018-01-04T20:40:05.296614Z", "url": "https://files.pythonhosted.org/packages/3f/ac/e92720c5c87ad0775f7de2000e345256605d0b8f925e7eced47177a64521/eventor-5.1.3.tar.gz", "yanked": false}], "5.1.4": [{"comment_text": "", "digests": {"md5": "e7838b3fba35689e86e50c4b9e68c367", "sha256": "ad95a7548e472973107368b09088e22556be9df5ec7ebb2f4de07eb64172ade5"}, "downloads": -1, "filename": "eventor-5.1.4.tar.gz", "has_sig": true, "md5_digest": "e7838b3fba35689e86e50c4b9e68c367", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 87121, "upload_time": "2018-01-05T03:53:48", "upload_time_iso_8601": "2018-01-05T03:53:48.214134Z", "url": "https://files.pythonhosted.org/packages/07/de/0d25e9be23e449de87b484484da92a41d39943f3641489874dad27e9d3ad/eventor-5.1.4.tar.gz", "yanked": false}], "5.1.5": [{"comment_text": "", "digests": {"md5": "9da1d85ba9aa749cf98d59f48ea772ce", "sha256": "8d1e6c5b47805405edfa45229a519601f915d2ac570247f006b9f372419752c3"}, "downloads": -1, "filename": "eventor-5.1.5.tar.gz", "has_sig": true, "md5_digest": "9da1d85ba9aa749cf98d59f48ea772ce", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 87112, "upload_time": "2018-01-05T19:05:22", "upload_time_iso_8601": "2018-01-05T19:05:22.542354Z", "url": "https://files.pythonhosted.org/packages/ac/dd/8414610145e90417270737d3b90779ae3921340f03d4c6757ac3992afdb4/eventor-5.1.5.tar.gz", "yanked": false}], "5.1.6": [{"comment_text": "", "digests": {"md5": "e77f4601d87e0ea287b66c719bc83426", "sha256": "9fe9621e15dd27f882d743899267b88b9990aaf80407ecdbf86229fd5f48ce7d"}, "downloads": -1, "filename": "eventor-5.1.6.tar.gz", "has_sig": true, "md5_digest": "e77f4601d87e0ea287b66c719bc83426", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36913, "upload_time": "2018-01-21T00:31:17", "upload_time_iso_8601": "2018-01-21T00:31:17.848087Z", "url": "https://files.pythonhosted.org/packages/88/11/c07310e0bff861b0c96199f6e34295c627ccb4eecfaa483250855f675867/eventor-5.1.6.tar.gz", "yanked": false}], "5.1.7": [{"comment_text": "", "digests": {"md5": "ae5d26b56fc4eb1e4f77d7df9ed6e8d9", "sha256": "90c056686f66698ffcacbea47f79a16cbb46dc0c73e0d8a3023485a0b575cf3c"}, "downloads": -1, "filename": "eventor-5.1.7.tar.gz", "has_sig": true, "md5_digest": "ae5d26b56fc4eb1e4f77d7df9ed6e8d9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 93494, "upload_time": "2018-01-21T00:53:35", "upload_time_iso_8601": "2018-01-21T00:53:35.514122Z", "url": "https://files.pythonhosted.org/packages/9b/a4/bc29040368acd2c144dde123775ba43ebb712e22fbcc7ac024aadcb17abd/eventor-5.1.7.tar.gz", "yanked": false}], "5.1.8": [{"comment_text": "", "digests": {"md5": "61f4bc175969c478eb92b51f1ee90782", "sha256": "8b7008ad82048a717fb5b1b844feb3812b58fce13773ba7c752a2f508e6ba2a1"}, "downloads": -1, "filename": "eventor-5.1.8.tar.gz", "has_sig": true, "md5_digest": "61f4bc175969c478eb92b51f1ee90782", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 93562, "upload_time": "2018-01-21T01:10:05", "upload_time_iso_8601": "2018-01-21T01:10:05.115012Z", "url": "https://files.pythonhosted.org/packages/14/09/2e7db2889ccecbe024f695271dc132584f918b56b528ead2b85338c57ea5/eventor-5.1.8.tar.gz", "yanked": false}], "5.1.9": [{"comment_text": "", "digests": {"md5": "eb9c198c7ceb12d211344dca2384c4f8", "sha256": "d2ea5fe959086849d54d7e1bc7d1ccab06720414087d77eecd032a782780aec9"}, "downloads": -1, "filename": "eventor-5.1.9.tar.gz", "has_sig": true, "md5_digest": "eb9c198c7ceb12d211344dca2384c4f8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 86188, "upload_time": "2018-02-18T18:52:34", "upload_time_iso_8601": "2018-02-18T18:52:34.430566Z", "url": "https://files.pythonhosted.org/packages/9a/52/bfaa23b721b066b26e0f7684f82e4a5fe476d786f32707786480ccfa28f3/eventor-5.1.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "eb9c198c7ceb12d211344dca2384c4f8", "sha256": "d2ea5fe959086849d54d7e1bc7d1ccab06720414087d77eecd032a782780aec9"}, "downloads": -1, "filename": "eventor-5.1.9.tar.gz", "has_sig": true, "md5_digest": "eb9c198c7ceb12d211344dca2384c4f8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 86188, "upload_time": "2018-02-18T18:52:34", "upload_time_iso_8601": "2018-02-18T18:52:34.430566Z", "url": "https://files.pythonhosted.org/packages/9a/52/bfaa23b721b066b26e0f7684f82e4a5fe476d786f32707786480ccfa28f3/eventor-5.1.9.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:12 2020"}