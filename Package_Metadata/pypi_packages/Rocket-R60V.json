{"info": {"author": "confirm IT solutions", "author_email": "", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "Rocket R 60V - Python API\n=========================\n\nPurpose\n-------\n\nThis is a Python API for the `Rocket R 60V <https://rocket-espresso.com/r-60v.html>`_.\n\nIt provides a proper API and a CLI tool to read & write settings on the machine.\n\nWhy this API\n------------\n\nRocket provides its own `iOS <https://apps.apple.com/us/app/rocket-r60v/id1073102815>`_ & `Android <https://play.google.com/store/apps/details?id=com.gicar.Rocket_R60V>`_ apps. However, IMHO the apps are complete rubbish (bad engineering par excellence) and don't work properly. The app reviews tell the same story.\n\nAnnoyed and frustrated by the origin apps, I did some research & reverse engineering.\n\nWhy Python\n----------\n\nI use Python simply because I like it and it allows me to get shit done. \n\nUsage\n=====\n\nInstallation\n------------\n\nThe Rocket R 60V API can either installed from source (i.e. downloading or cloning this repository) or via ``pip``:\n\n.. code-block:: bash\n\n    pip install rocket-r60v\n\nCLI command\n-----------\n\nThis package provides a CLI command called ``rocket-r60v`` to communicate with the machine.\nTo display the available commands, use the ``--help`` flag:\n\n.. code-block::\n\n    rocket-r60v --help\n    usage: rocket-r60v [-h] [-v] [-f LOGFILE]\n                       {active-profile,auto-off,auto-on,brew-boiler-temperature,current-brew-boiler-temperature,current-brew-time,current-service-boiler-temperature,date-time,display,language,profile-a,profile-b,profile-c,service-boiler,service-boiler-temperature,standby,temperature-unit,total-coffee-count,water-feed,addresses,monitor-brew-time,read,write}\n                       ...\n\n    Remote control the Rocket R 60V.\n\n    positional arguments:\n      {active-profile,auto-off,auto-on,brew-boiler-temperature,current-brew-boiler-temperature,current-brew-time,current-service-boiler-temperature,date-time,display,language,profile-a,profile-b,profile-c,service-boiler,service-boiler-temperature,standby,temperature-unit,total-coffee-count,water-feed,addresses,monitor-brew-time,read,write}\n        active-profile                      the active pressure profile\n        auto-off                            the auto off (standby) time\n        auto-on                             the auto on time\n        brew-boiler-temperature             the desired temperature of the brew boiler\n        current-brew-boiler-temperature     the current temperature of the brew boiler\n        current-brew-time                   the current brew time, taken from the display\n        current-service-boiler-temperature  the current temperature of the service boiler\n        date-time                           the date & time (clock) of the machine\n        display                             the display content\n        language                            the language of the machine\n        profile-a                           the pressure profile A\n        profile-b                           the pressure profile B\n        profile-c                           the pressure profile C\n        service-boiler                      the state of the service boiler\n        service-boiler-temperature          the desired temperature of the service boiler\n        standby                             the standby state of the machine\n        temperature-unit                    the temperature unit\n        total-coffee-count                  the coffee cycles\n        water-feed                          the source of the water feed\n        addresses                           display all implemented memory addresses / settings (debugging)\n        monitor-brew-time                   continously monitor brew time\n        read                                manually read memory data (debugging)\n        write                               manually write memory data (debugging)\n\n    optional arguments:\n      -h, --help                            show this help message and exit\n      -v, --verbose                         verbose mode (-v for error, -vv for warning, -vvv for info, -vvvv for debug)\n      -f LOGFILE, --logfile LOGFILE         the filename of the logfile\n\nYou can also display the help for a single action:\n\n.. code-block::\n\n    rocket-r60v language --help\n    usage: rocket-r60v language [-h] [{English,German,French,Italian}]\n\n    positional arguments:\n      {English,German,French,Italian}\n\n    optional arguments:\n      -h, --help            show this help message and exit\n\n\nFor example, to query the language you can use:\n\n.. code-block:: bash\n\n    rocket-r60v language\n\nIf you want to change the language, you can use:\n\n.. code-block:: bash\n\n    rocket-r60v language English\n\nPython API\n----------\n\nThe Python API can be used like this:\n\n.. code-block:: python\n\n    from rocket_r60v.machine import Machine\n\n    machine = Machine()\n    machine.connect()\n\n    # Get language from machine.\n    print(machine.language)\n\n    # Set language on machine.\n    machine.language = 'English'\n\nAll available settings can be displayed via CLI command ``rocket-r60v --help`` or by inspecting the `settings module <rocket_r60v/settings/__init__.py>`_.\n\nNetworking\n----------\n\nThe Rocket R 60V machine will open a wireless network:\n\n- SSID: ``RocketEspresso``\n- Passphrase: ``RocketR60V``\n\nA wireless client can then connect to the wireless network and should get a DHCP lease in the ``192.168.1.0/24`` subnet. \nFrom there on, you should be able to use the API.\n\nReverse Engineering\n===================\n\nIf you're interested how I developed the API and how I reverse engineered the protocol, have a look at the `Reverse Engineering Guide <REVERSE_ENGINEERING.rst>`_.", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/confirm/Rocket-R60V", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "Rocket-R60V", "package_url": "https://pypi.org/project/Rocket-R60V/", "platform": "", "project_url": "https://pypi.org/project/Rocket-R60V/", "project_urls": {"Homepage": "https://github.com/confirm/Rocket-R60V"}, "release_url": "https://pypi.org/project/Rocket-R60V/1.2.1/", "requires_dist": null, "requires_python": ">=3.7", "summary": "Python API for the Rocket R 60V", "version": "1.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"rocket-r-60v-python-api\">\n<h2>Rocket R 60V - Python API</h2>\n<div id=\"purpose\">\n<h3>Purpose</h3>\n<p>This is a Python API for the <a href=\"https://rocket-espresso.com/r-60v.html\" rel=\"nofollow\">Rocket R 60V</a>.</p>\n<p>It provides a proper API and a CLI tool to read &amp; write settings on the machine.</p>\n</div>\n<div id=\"why-this-api\">\n<h3>Why this API</h3>\n<p>Rocket provides its own <a href=\"https://apps.apple.com/us/app/rocket-r60v/id1073102815\" rel=\"nofollow\">iOS</a> &amp; <a href=\"https://play.google.com/store/apps/details?id=com.gicar.Rocket_R60V\" rel=\"nofollow\">Android</a> apps. However, IMHO the apps are complete rubbish (bad engineering par excellence) and don\u2019t work properly. The app reviews tell the same story.</p>\n<p>Annoyed and frustrated by the origin apps, I did some research &amp; reverse engineering.</p>\n</div>\n<div id=\"why-python\">\n<h3>Why Python</h3>\n<p>I use Python simply because I like it and it allows me to get shit done.</p>\n</div>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>The Rocket R 60V API can either installed from source (i.e. downloading or cloning this repository) or via <tt>pip</tt>:</p>\n<pre>pip install rocket-r60v\n</pre>\n</div>\n<div id=\"cli-command\">\n<h3>CLI command</h3>\n<p>This package provides a CLI command called <tt><span class=\"pre\">rocket-r60v</span></tt> to communicate with the machine.\nTo display the available commands, use the <tt><span class=\"pre\">--help</span></tt> flag:</p>\n<pre>rocket-r60v --help\nusage: rocket-r60v [-h] [-v] [-f LOGFILE]\n                   {active-profile,auto-off,auto-on,brew-boiler-temperature,current-brew-boiler-temperature,current-brew-time,current-service-boiler-temperature,date-time,display,language,profile-a,profile-b,profile-c,service-boiler,service-boiler-temperature,standby,temperature-unit,total-coffee-count,water-feed,addresses,monitor-brew-time,read,write}\n                   ...\n\nRemote control the Rocket R 60V.\n\npositional arguments:\n  {active-profile,auto-off,auto-on,brew-boiler-temperature,current-brew-boiler-temperature,current-brew-time,current-service-boiler-temperature,date-time,display,language,profile-a,profile-b,profile-c,service-boiler,service-boiler-temperature,standby,temperature-unit,total-coffee-count,water-feed,addresses,monitor-brew-time,read,write}\n    active-profile                      the active pressure profile\n    auto-off                            the auto off (standby) time\n    auto-on                             the auto on time\n    brew-boiler-temperature             the desired temperature of the brew boiler\n    current-brew-boiler-temperature     the current temperature of the brew boiler\n    current-brew-time                   the current brew time, taken from the display\n    current-service-boiler-temperature  the current temperature of the service boiler\n    date-time                           the date &amp; time (clock) of the machine\n    display                             the display content\n    language                            the language of the machine\n    profile-a                           the pressure profile A\n    profile-b                           the pressure profile B\n    profile-c                           the pressure profile C\n    service-boiler                      the state of the service boiler\n    service-boiler-temperature          the desired temperature of the service boiler\n    standby                             the standby state of the machine\n    temperature-unit                    the temperature unit\n    total-coffee-count                  the coffee cycles\n    water-feed                          the source of the water feed\n    addresses                           display all implemented memory addresses / settings (debugging)\n    monitor-brew-time                   continously monitor brew time\n    read                                manually read memory data (debugging)\n    write                               manually write memory data (debugging)\n\noptional arguments:\n  -h, --help                            show this help message and exit\n  -v, --verbose                         verbose mode (-v for error, -vv for warning, -vvv for info, -vvvv for debug)\n  -f LOGFILE, --logfile LOGFILE         the filename of the logfile\n</pre>\n<p>You can also display the help for a single action:</p>\n<pre>rocket-r60v language --help\nusage: rocket-r60v language [-h] [{English,German,French,Italian}]\n\npositional arguments:\n  {English,German,French,Italian}\n\noptional arguments:\n  -h, --help            show this help message and exit\n</pre>\n<p>For example, to query the language you can use:</p>\n<pre>rocket-r60v language\n</pre>\n<p>If you want to change the language, you can use:</p>\n<pre>rocket-r60v language English\n</pre>\n</div>\n<div id=\"python-api\">\n<h3>Python API</h3>\n<p>The Python API can be used like this:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">rocket_r60v.machine</span> <span class=\"kn\">import</span> <span class=\"n\">Machine</span>\n\n<span class=\"n\">machine</span> <span class=\"o\">=</span> <span class=\"n\">Machine</span><span class=\"p\">()</span>\n<span class=\"n\">machine</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Get language from machine.</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">machine</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Set language on machine.</span>\n<span class=\"n\">machine</span><span class=\"o\">.</span><span class=\"n\">language</span> <span class=\"o\">=</span> <span class=\"s1\">'English'</span>\n</pre>\n<p>All available settings can be displayed via CLI command <tt><span class=\"pre\">rocket-r60v</span> <span class=\"pre\">--help</span></tt> or by inspecting the <a href=\"rocket_r60v/settings/__init__.py\" rel=\"nofollow\">settings module</a>.</p>\n</div>\n<div id=\"networking\">\n<h3>Networking</h3>\n<p>The Rocket R 60V machine will open a wireless network:</p>\n<ul>\n<li>SSID: <tt>RocketEspresso</tt></li>\n<li>Passphrase: <tt>RocketR60V</tt></li>\n</ul>\n<p>A wireless client can then connect to the wireless network and should get a DHCP lease in the <tt>192.168.1.0/24</tt> subnet.\nFrom there on, you should be able to use the API.</p>\n</div>\n</div>\n<div id=\"reverse-engineering\">\n<h2>Reverse Engineering</h2>\n<p>If you\u2019re interested how I developed the API and how I reverse engineered the protocol, have a look at the <a href=\"REVERSE_ENGINEERING.rst\" rel=\"nofollow\">Reverse Engineering Guide</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 6663652, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "22be33cdb7fc621b7ce36dcccc1c8e09", "sha256": "8b7dd453315530810b12ea1aaa6c2ec349b8775d392e251dae682045bdfbc049"}, "downloads": -1, "filename": "Rocket-R60V-1.0.0.tar.gz", "has_sig": false, "md5_digest": "22be33cdb7fc621b7ce36dcccc1c8e09", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 21979, "upload_time": "2019-12-27T17:28:31", "upload_time_iso_8601": "2019-12-27T17:28:31.081446Z", "url": "https://files.pythonhosted.org/packages/45/a0/4b3fb7a0b50f7352d52054d37a35d013b170ac5c7b28565dc38551be5743/Rocket-R60V-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "ce52d8bf6742ff04541bf4c0cde105b7", "sha256": "fbf8e639c4f05bbc00700c6450992cf9d0edc02821ff5aec79c28095d9fdfd93"}, "downloads": -1, "filename": "Rocket-R60V-1.1.0.tar.gz", "has_sig": false, "md5_digest": "ce52d8bf6742ff04541bf4c0cde105b7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 22888, "upload_time": "2020-02-19T19:36:45", "upload_time_iso_8601": "2020-02-19T19:36:45.305533Z", "url": "https://files.pythonhosted.org/packages/01/b0/019118e30b7f7d8067970319d6fb8c4197d6830eddb508bbd89bc159fa8d/Rocket-R60V-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "56eaf21801212372cd2c4ff1ca96b592", "sha256": "988d96d2d48b50b71b83c0ed5e0e8b2039b3aa6172c42e965c6c881023cf6952"}, "downloads": -1, "filename": "Rocket-R60V-1.1.1.tar.gz", "has_sig": false, "md5_digest": "56eaf21801212372cd2c4ff1ca96b592", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 22887, "upload_time": "2020-02-19T19:40:53", "upload_time_iso_8601": "2020-02-19T19:40:53.809798Z", "url": "https://files.pythonhosted.org/packages/cf/14/ca64aaa807d4376c70978cf1e354079bcca99f95ff6549d10139bab1b9a4/Rocket-R60V-1.1.1.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "751ce9536377c2bd9a698bb9ad31984a", "sha256": "3181b64402d76ae8cce398bf0e4a83db3e3d41b1d06122b3962b517e0ff3e89d"}, "downloads": -1, "filename": "Rocket-R60V-1.2.0.tar.gz", "has_sig": false, "md5_digest": "751ce9536377c2bd9a698bb9ad31984a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 23707, "upload_time": "2020-02-19T21:21:44", "upload_time_iso_8601": "2020-02-19T21:21:44.212926Z", "url": "https://files.pythonhosted.org/packages/68/39/178493a12c78dffa5c9981d9cfc8ed20b39bed8cac99283a37fac6c72b09/Rocket-R60V-1.2.0.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "28bca145a9bb8d6f26289c0972c21caa", "sha256": "1965953985c23f3d846d71c4214d2ffea37f5cd2cd14e7222c1f53d929cf643b"}, "downloads": -1, "filename": "Rocket-R60V-1.2.1.tar.gz", "has_sig": false, "md5_digest": "28bca145a9bb8d6f26289c0972c21caa", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 23824, "upload_time": "2020-02-19T21:37:43", "upload_time_iso_8601": "2020-02-19T21:37:43.198497Z", "url": "https://files.pythonhosted.org/packages/18/0c/4a8fce4a3ec0c2624519fda4d706d4316f72108075a62fce0fef47085281/Rocket-R60V-1.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "28bca145a9bb8d6f26289c0972c21caa", "sha256": "1965953985c23f3d846d71c4214d2ffea37f5cd2cd14e7222c1f53d929cf643b"}, "downloads": -1, "filename": "Rocket-R60V-1.2.1.tar.gz", "has_sig": false, "md5_digest": "28bca145a9bb8d6f26289c0972c21caa", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 23824, "upload_time": "2020-02-19T21:37:43", "upload_time_iso_8601": "2020-02-19T21:37:43.198497Z", "url": "https://files.pythonhosted.org/packages/18/0c/4a8fce4a3ec0c2624519fda4d706d4316f72108075a62fce0fef47085281/Rocket-R60V-1.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:01:34 2020"}