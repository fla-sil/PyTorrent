{"info": {"author": "Luis Pedro Coelho", "author_email": "luis@luispedro.org", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6"], "description": "# NIX-ML : Easy, reproducible, environments with Nix + YAML\n\nSimple, perfectly reproducible, environments with [nix](https://nixos.org)\nspecified using an YAML file.\n\nExample, write to a file called `env.nml`:\n\n    nixml: v0.0\n    snapshot: stable-19.03\n    packages:\n      - lang: python\n        version: 2\n        modules:\n          - numpy\n          - scipy\n          - matplotlib\n          - mahotas\n          - jupyter\n          - scikitlearn\n\nNow, run\n\n```bash\nnixml shell\n```\n\nand you will be dropped into an environment containing the packages listed\nabove, as was up to date in March 2019. Conceptually, the environment will\nalways be generated from scratch, but caching means that the first time will\ntake significantly longer (including, it will download all dependencies).\nAfterwards, it should take a few seconds at most.\n\nThis environment will be like a typical _conda/pip/virtualenv/..._ environment:\nif will place the corresponding binaries at the front of the `PATH` so that\nthey are picked with high priority, but, alternatively, you can generate a\n_pure environment_, which will contain **only the packages that you specify**.\nThis avoids accidental use of packages that are not part of the environment:\n\n```bash\nnixml shell --pure\n```\n\nFinally, you can run\n\n```bash\nnixml generate\n```\n\nto just create the `nixml.nix` corresponding to the enviroment.\n\n## Dependencies\n\n- Python\n- [nix](https://nixos.org)\n\n## NIXML Format\n\nIt's a YaML file\n\n`nixml`: version of nixml to use. Currently, only `v0.0` is supported.\n\n`snapshot`: This is the package version to use. Currently, only `stable-19.03`\nis available, but general syntax is `{stable,unstable}-{year}.{month}`.\n\n`packages`: A list of packages, which are grouped into language blocks.\nCurrently supported:\n\n- `python`: Python language environment, specify the version (`version`) and `modules`.\n- `texlive`: Texlive packages\n- `nix`: Generic packages (i.e., `vim` or `bash`)\n\n## Author\n\n- [Luis Pedro Coelho](http://luispedro.org) (email: [luis@luispedro.org](mailto:luis@luispedro.org) on twitter: [@luispedrocoelho](https://twitter.com/luispedrocoelho))", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "nixml", "package_url": "https://pypi.org/project/nixml/", "platform": "Any", "project_url": "https://pypi.org/project/nixml/", "project_urls": null, "release_url": "https://pypi.org/project/nixml/0.2/", "requires_dist": null, "requires_python": "", "summary": "NixML: reproducible environments with nix + YAML", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>NIX-ML : Easy, reproducible, environments with Nix + YAML</h1>\n<p>Simple, perfectly reproducible, environments with <a href=\"https://nixos.org\" rel=\"nofollow\">nix</a>\nspecified using an YAML file.</p>\n<p>Example, write to a file called <code>env.nml</code>:</p>\n<pre><code>nixml: v0.0\nsnapshot: stable-19.03\npackages:\n  - lang: python\n    version: 2\n    modules:\n      - numpy\n      - scipy\n      - matplotlib\n      - mahotas\n      - jupyter\n      - scikitlearn\n</code></pre>\n<p>Now, run</p>\n<pre>nixml shell\n</pre>\n<p>and you will be dropped into an environment containing the packages listed\nabove, as was up to date in March 2019. Conceptually, the environment will\nalways be generated from scratch, but caching means that the first time will\ntake significantly longer (including, it will download all dependencies).\nAfterwards, it should take a few seconds at most.</p>\n<p>This environment will be like a typical <em>conda/pip/virtualenv/...</em> environment:\nif will place the corresponding binaries at the front of the <code>PATH</code> so that\nthey are picked with high priority, but, alternatively, you can generate a\n<em>pure environment</em>, which will contain <strong>only the packages that you specify</strong>.\nThis avoids accidental use of packages that are not part of the environment:</p>\n<pre>nixml shell --pure\n</pre>\n<p>Finally, you can run</p>\n<pre>nixml generate\n</pre>\n<p>to just create the <code>nixml.nix</code> corresponding to the enviroment.</p>\n<h2>Dependencies</h2>\n<ul>\n<li>Python</li>\n<li><a href=\"https://nixos.org\" rel=\"nofollow\">nix</a></li>\n</ul>\n<h2>NIXML Format</h2>\n<p>It's a YaML file</p>\n<p><code>nixml</code>: version of nixml to use. Currently, only <code>v0.0</code> is supported.</p>\n<p><code>snapshot</code>: This is the package version to use. Currently, only <code>stable-19.03</code>\nis available, but general syntax is <code>{stable,unstable}-{year}.{month}</code>.</p>\n<p><code>packages</code>: A list of packages, which are grouped into language blocks.\nCurrently supported:</p>\n<ul>\n<li><code>python</code>: Python language environment, specify the version (<code>version</code>) and <code>modules</code>.</li>\n<li><code>texlive</code>: Texlive packages</li>\n<li><code>nix</code>: Generic packages (i.e., <code>vim</code> or <code>bash</code>)</li>\n</ul>\n<h2>Author</h2>\n<ul>\n<li><a href=\"http://luispedro.org\" rel=\"nofollow\">Luis Pedro Coelho</a> (email: <a href=\"mailto:luis@luispedro.org\">luis@luispedro.org</a> on twitter: <a href=\"https://twitter.com/luispedrocoelho\" rel=\"nofollow\">@luispedrocoelho</a>)</li>\n</ul>\n\n          </div>"}, "last_serial": 6810946, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "31a881d092f8348ffdd88d95012545fb", "sha256": "5a1f9c58fb0808d49ea49e713310a4dadbc6eea138529c9e61ae851738a17242"}, "downloads": -1, "filename": "nixml-0.1.tar.gz", "has_sig": false, "md5_digest": "31a881d092f8348ffdd88d95012545fb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5222, "upload_time": "2019-03-26T06:50:37", "upload_time_iso_8601": "2019-03-26T06:50:37.160129Z", "url": "https://files.pythonhosted.org/packages/db/82/2ef4f1ebbac71ca20c42ffc4b22eae9e480e23bc4b31d3a4d0e63db9db03/nixml-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "dc5e1083a57d2431541ff1f52c910b23", "sha256": "137bb2ef96c0832d9b38fabe2aa6616a30797c2012ec35f503887163f13aa442"}, "downloads": -1, "filename": "nixml-0.2.tar.gz", "has_sig": false, "md5_digest": "dc5e1083a57d2431541ff1f52c910b23", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8378, "upload_time": "2020-03-14T10:33:28", "upload_time_iso_8601": "2020-03-14T10:33:28.644627Z", "url": "https://files.pythonhosted.org/packages/eb/62/3bf55953ae8655dcaf1dd7da35e7f88078e1bd79bd573548f25a3d274ea9/nixml-0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "dc5e1083a57d2431541ff1f52c910b23", "sha256": "137bb2ef96c0832d9b38fabe2aa6616a30797c2012ec35f503887163f13aa442"}, "downloads": -1, "filename": "nixml-0.2.tar.gz", "has_sig": false, "md5_digest": "dc5e1083a57d2431541ff1f52c910b23", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8378, "upload_time": "2020-03-14T10:33:28", "upload_time_iso_8601": "2020-03-14T10:33:28.644627Z", "url": "https://files.pythonhosted.org/packages/eb/62/3bf55953ae8655dcaf1dd7da35e7f88078e1bd79bd573548f25a3d274ea9/nixml-0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:14 2020"}