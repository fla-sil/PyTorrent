{"info": {"author": "Nipun Talukdar", "author_email": "nipunmlist@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Datachunkpy\n============\nDataChunk is an useful library for proessing messages in a stream where messages are sent in\na stream as shown below:\n<msg-size><msg-bytes><msg-size><msg-bytes><msg-size>....\nmsg-size is a 4 byte integer (little-endian)\nwhenever a complete message is read, DataChunk calls the handle_msg method of the handler.\n\nA message may come in fragments. Sometimes many messages may come in a single data packet. \nAll we need to do is to call process_chunk method of DataChunk and DataChunk object will take care \nof re-assembling the messages as and when needed.\n\n\nBasic example\n-------------\n\n\n    .. code:: python\n\n        from __future__ import print_function\n        from struct import pack\n        import random\n        from datachunkpy.datachunk import DataChunk, MessageHandler\n\n        # A message handler class \n        class MyMsgHandler(MessageHandler):\n            def __init__(self):\n                self.msg_processed = 0\n                self.bytes_processed = 0\n\n            def handle_msg(self, data):\n                print('I am handling', data)\n                self.msg_processed += 1\n                self.bytes_processed += len(data)\n\n        \n        datach = DataChunk(MyMsgHandler())\n\n        i = 0\n        random.seed()\n        mydata = b''\n        total_bytes = 0\n        while i < 10000:\n            i += 1\n            j = random.randint(1,50)\n            mydata += pack('i', j)\n            mydata += b'a' * j\n            total_bytes += j\n        datach.process_chunk(mydata)", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/nipuntalukdar/datachunkpy", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "datachunkpy", "package_url": "https://pypi.org/project/datachunkpy/", "platform": "all", "project_url": "https://pypi.org/project/datachunkpy/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/nipuntalukdar/datachunkpy"}, "release_url": "https://pypi.org/project/datachunkpy/1.0.0/", "requires_dist": null, "requires_python": null, "summary": "An utility library for separating individual messages in a stream", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>DataChunk is an useful library for proessing messages in a stream where messages are sent in\na stream as shown below:\n&lt;msg-size&gt;&lt;msg-bytes&gt;&lt;msg-size&gt;&lt;msg-bytes&gt;&lt;msg-size&gt;\u2026.\nmsg-size is a 4 byte integer (little-endian)\nwhenever a complete message is read, DataChunk calls the handle_msg method of the handler.</p>\n<p>A message may come in fragments. Sometimes many messages may come in a single data packet.\nAll we need to do is to call process_chunk method of DataChunk and DataChunk object will take care\nof re-assembling the messages as and when needed.</p>\n<div id=\"basic-example\">\n<h2>Basic example</h2>\n<blockquote>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"n\">print_function</span>\n<span class=\"kn\">from</span> <span class=\"nn\">struct</span> <span class=\"kn\">import</span> <span class=\"n\">pack</span>\n<span class=\"kn\">import</span> <span class=\"nn\">random</span>\n<span class=\"kn\">from</span> <span class=\"nn\">datachunkpy.datachunk</span> <span class=\"kn\">import</span> <span class=\"n\">DataChunk</span><span class=\"p\">,</span> <span class=\"n\">MessageHandler</span>\n\n<span class=\"c1\"># A message handler class</span>\n<span class=\"k\">class</span> <span class=\"nc\">MyMsgHandler</span><span class=\"p\">(</span><span class=\"n\">MessageHandler</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">msg_processed</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">bytes_processed</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">handle_msg</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'I am handling'</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">msg_processed</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">bytes_processed</span> <span class=\"o\">+=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">datach</span> <span class=\"o\">=</span> <span class=\"n\">DataChunk</span><span class=\"p\">(</span><span class=\"n\">MyMsgHandler</span><span class=\"p\">())</span>\n\n<span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">seed</span><span class=\"p\">()</span>\n<span class=\"n\">mydata</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"s1\">''</span>\n<span class=\"n\">total_bytes</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"k\">while</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">10000</span><span class=\"p\">:</span>\n    <span class=\"n\">i</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n    <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">50</span><span class=\"p\">)</span>\n    <span class=\"n\">mydata</span> <span class=\"o\">+=</span> <span class=\"n\">pack</span><span class=\"p\">(</span><span class=\"s1\">'i'</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">)</span>\n    <span class=\"n\">mydata</span> <span class=\"o\">+=</span> <span class=\"sa\">b</span><span class=\"s1\">'a'</span> <span class=\"o\">*</span> <span class=\"n\">j</span>\n    <span class=\"n\">total_bytes</span> <span class=\"o\">+=</span> <span class=\"n\">j</span>\n<span class=\"n\">datach</span><span class=\"o\">.</span><span class=\"n\">process_chunk</span><span class=\"p\">(</span><span class=\"n\">mydata</span><span class=\"p\">)</span>\n</pre>\n</blockquote>\n</div>\n\n          </div>"}, "last_serial": 2335856, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "4432bfb137266ba37ff794146758a3b7", "sha256": "d1bbf648ab0309fef6697e3ac88a0b15902585196fa3f7623ea08a731a9a2673"}, "downloads": -1, "filename": "datachunkpy-1.0.0.tar.gz", "has_sig": false, "md5_digest": "4432bfb137266ba37ff794146758a3b7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3127, "upload_time": "2016-09-11T06:24:00", "upload_time_iso_8601": "2016-09-11T06:24:00.364261Z", "url": "https://files.pythonhosted.org/packages/2b/84/690f69310fd526dc4a6c8756926762d21ebf16c510c17c779b83c5b37454/datachunkpy-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4432bfb137266ba37ff794146758a3b7", "sha256": "d1bbf648ab0309fef6697e3ac88a0b15902585196fa3f7623ea08a731a9a2673"}, "downloads": -1, "filename": "datachunkpy-1.0.0.tar.gz", "has_sig": false, "md5_digest": "4432bfb137266ba37ff794146758a3b7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3127, "upload_time": "2016-09-11T06:24:00", "upload_time_iso_8601": "2016-09-11T06:24:00.364261Z", "url": "https://files.pythonhosted.org/packages/2b/84/690f69310fd526dc4a6c8756926762d21ebf16c510c17c779b83c5b37454/datachunkpy-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:40:28 2020"}