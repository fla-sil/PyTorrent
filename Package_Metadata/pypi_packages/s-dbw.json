{"info": {"author": "Alexander Lashkov, Sergey Rubinsky, Polina Eistrikh-Heller", "author_email": "alashkov83@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved", "Operating System :: MacOS", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Operating System :: Unix", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.4", "Topic :: Scientific/Engineering", "Topic :: Software Development"], "description": "# S_Dbw\n###Compute the S_Dbw or SD validity index  \n\n####S_Dbw validity index is defined by equation:\n##### S_Dbw = Scatt + Dens_bw\nwhere Scatt - means average scattering for clusters and Dens_bw - inter-cluster density.  \n**Lower value -> better clustering.**\n\n####SD validity index is defined by equation:\n##### SD = k*Scatt + distance\nwhere distance - distances between cluster centers, k - weighting coefficient equal to distance(Cmax).  \n**Lower value -> better clustering.**\n\nInstallation\n------------\n\n```shell\npip install --upgrade s-dbw\n```\n\nUsage\n-----\n```python\nfrom s_dbw import S_Dbw\nscore = S_Dbw(X, labels, centers_id=None, method='Tong', alg_noise='bind',\ncentr='mean', nearest_centr=True, metric='euclidean')\n\n```\n#####OR\n```python\nfrom s_dbw import SD\nscore = SD(X, labels, k=1.0, centers_id=None,  alg_noise='bind',centr='mean', nearest_centr=True, metric='euclidean')\n\n```\n\n### Parameters:\n* X : array-like, shape (n_samples, n_features)  \n    List of n_features-dimensional data points. Each row corresponds to a single data point.  \n* labels : array-like, shape (n_samples,)  \n    Predicted labels for each sample (-1 - for noise).  \n* centers_id : array-like, shape (n_samples,)  \n    The center_id of each cluster's center. If None - cluster's center calculate automatically.  \n* alg_noise : str,  \n    Algorithm for recording noise points.  \n    'comb' - combining all noise points into one cluster (default)  \n    'sep' - definition of each noise point as a separate cluster  \n    'bind' -  binding of each noise point to the cluster nearest from it  \n    'filter' - filtering noise points  \n* centr : str,  \n    cluster center calculation method (mean (default) or median)  \n* nearest_centr : bool,  \n    The centroid corresponds to the cluster point closest to the geometric center (default: True).  \n* metric : str,  \n    The distance metric, can be \u2018braycurtis\u2019, \u2018canberra\u2019, \u2018chebyshev\u2019, \u2018cityblock\u2019, \u2018correlation\u2019,  \n    \u2018cosine\u2019, \u2018dice\u2019, \u2018euclidean\u2019, \u2018hamming\u2019, \u2018jaccard\u2019, \u2018kulsinski\u2019, \u2018mahalanobis\u2019, \u2018matching\u2019, \u2018minkowski\u2019,  \n    \u2018rogerstanimoto\u2019, \u2018russellrao\u2019, \u2018seuclidean\u2019, \u2018sokalmichener\u2019, \u2018sokalsneath\u2019, \u2018sqeuclidean\u2019, \u2018wminkowski\u2019,\u2018yule\u2019.  \n    Default is \u2018euclidean\u2019.  \n#####For S_Dbw:\n* method : str,  \n    S_Dbw calc method:  \n    'Halkidi' - original paper \\[1]  \n    'Kim' - see \\[2]  \n    'Tong' - see \\[3]  \n#####For SD:\n* k: float,\n    The weighting coefficient equal to distance(Cmax). It is necessary for evaluating solutions with vary number of clusters because distance(C) depends on number of clusters \\[4].\n\n### Returns\nscore : float  \n    The resulting S_Dbw or SD score.  \n\nReferences:\n-----------\n1. M. Halkidi and M. Vazirgiannis, \u201cClustering validity assessment: Finding the optimal partitioning of a data set,\u201d in ICDM, Washington, DC, USA, 2001, pp. 187\u2013194.\n2. Youngok Kim and Soowon Lee. A clustering validity assessment Index. PAKDD\u20192003, Seoul, Korea, April 30\u2013May 2, 2003, LNAI 2637, 602\u2013608\n3. Tong, J. & Tan, H. J. Electron.(China) (2009) 26: 258. https://doi.org/10.1007/s11767-007-0151-8\n4. Halkidi, Maria & Vazirgiannis, Michalis & Batistakis, Yannis. (2000). Quality Scheme Assessment in the Clustering Process. LNCS (LNAI). 1910. 265-276. 10.1007/3-540-45372-5_26. \n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/alashkov83/S_Dbw", "keywords": "clustering,cluster analysis,cluster validation", "license": "MIT License", "maintainer": "Alexander Lashkov", "maintainer_email": "", "name": "s-dbw", "package_url": "https://pypi.org/project/s-dbw/", "platform": "any", "project_url": "https://pypi.org/project/s-dbw/", "project_urls": {"Homepage": "https://github.com/alashkov83/S_Dbw"}, "release_url": "https://pypi.org/project/s-dbw/0.4.0/", "requires_dist": ["scipy", "numpy (>=1.14.2)"], "requires_python": ">=2.7", "summary": "Compute the S_Dbw validity index", "version": "0.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>S_Dbw</h1>\n<p>###Compute the S_Dbw or SD validity index</p>\n<p>####S_Dbw validity index is defined by equation:</p>\n<h5>S_Dbw = Scatt + Dens_bw</h5>\n<p>where Scatt - means average scattering for clusters and Dens_bw - inter-cluster density.<br>\n<strong>Lower value -&gt; better clustering.</strong></p>\n<p>####SD validity index is defined by equation:</p>\n<h5>SD = k*Scatt + distance</h5>\n<p>where distance - distances between cluster centers, k - weighting coefficient equal to distance(Cmax).<br>\n<strong>Lower value -&gt; better clustering.</strong></p>\n<h2>Installation</h2>\n<pre>pip install --upgrade s-dbw\n</pre>\n<h2>Usage</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">s_dbw</span> <span class=\"kn\">import</span> <span class=\"n\">S_Dbw</span>\n<span class=\"n\">score</span> <span class=\"o\">=</span> <span class=\"n\">S_Dbw</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">labels</span><span class=\"p\">,</span> <span class=\"n\">centers_id</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">'Tong'</span><span class=\"p\">,</span> <span class=\"n\">alg_noise</span><span class=\"o\">=</span><span class=\"s1\">'bind'</span><span class=\"p\">,</span>\n<span class=\"n\">centr</span><span class=\"o\">=</span><span class=\"s1\">'mean'</span><span class=\"p\">,</span> <span class=\"n\">nearest_centr</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">metric</span><span class=\"o\">=</span><span class=\"s1\">'euclidean'</span><span class=\"p\">)</span>\n</pre>\n<p>#####OR</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">s_dbw</span> <span class=\"kn\">import</span> <span class=\"n\">SD</span>\n<span class=\"n\">score</span> <span class=\"o\">=</span> <span class=\"n\">SD</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">labels</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"o\">=</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"n\">centers_id</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>  <span class=\"n\">alg_noise</span><span class=\"o\">=</span><span class=\"s1\">'bind'</span><span class=\"p\">,</span><span class=\"n\">centr</span><span class=\"o\">=</span><span class=\"s1\">'mean'</span><span class=\"p\">,</span> <span class=\"n\">nearest_centr</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">metric</span><span class=\"o\">=</span><span class=\"s1\">'euclidean'</span><span class=\"p\">)</span>\n</pre>\n<h3>Parameters:</h3>\n<ul>\n<li>X : array-like, shape (n_samples, n_features)<br>\nList of n_features-dimensional data points. Each row corresponds to a single data point.</li>\n<li>labels : array-like, shape (n_samples,)<br>\nPredicted labels for each sample (-1 - for noise).</li>\n<li>centers_id : array-like, shape (n_samples,)<br>\nThe center_id of each cluster's center. If None - cluster's center calculate automatically.</li>\n<li>alg_noise : str,<br>\nAlgorithm for recording noise points.<br>\n'comb' - combining all noise points into one cluster (default)<br>\n'sep' - definition of each noise point as a separate cluster<br>\n'bind' -  binding of each noise point to the cluster nearest from it<br>\n'filter' - filtering noise points</li>\n<li>centr : str,<br>\ncluster center calculation method (mean (default) or median)</li>\n<li>nearest_centr : bool,<br>\nThe centroid corresponds to the cluster point closest to the geometric center (default: True).</li>\n<li>metric : str,<br>\nThe distance metric, can be \u2018braycurtis\u2019, \u2018canberra\u2019, \u2018chebyshev\u2019, \u2018cityblock\u2019, \u2018correlation\u2019,<br>\n\u2018cosine\u2019, \u2018dice\u2019, \u2018euclidean\u2019, \u2018hamming\u2019, \u2018jaccard\u2019, \u2018kulsinski\u2019, \u2018mahalanobis\u2019, \u2018matching\u2019, \u2018minkowski\u2019,<br>\n\u2018rogerstanimoto\u2019, \u2018russellrao\u2019, \u2018seuclidean\u2019, \u2018sokalmichener\u2019, \u2018sokalsneath\u2019, \u2018sqeuclidean\u2019, \u2018wminkowski\u2019,\u2018yule\u2019.<br>\nDefault is \u2018euclidean\u2019.<br>\n#####For S_Dbw:</li>\n<li>method : str,<br>\nS_Dbw calc method:<br>\n'Halkidi' - original paper [1]<br>\n'Kim' - see [2]<br>\n'Tong' - see [3]<br>\n#####For SD:</li>\n<li>k: float,\nThe weighting coefficient equal to distance(Cmax). It is necessary for evaluating solutions with vary number of clusters because distance(C) depends on number of clusters [4].</li>\n</ul>\n<h3>Returns</h3>\n<p>score : float<br>\nThe resulting S_Dbw or SD score.</p>\n<h2>References:</h2>\n<ol>\n<li>M. Halkidi and M. Vazirgiannis, \u201cClustering validity assessment: Finding the optimal partitioning of a data set,\u201d in ICDM, Washington, DC, USA, 2001, pp. 187\u2013194.</li>\n<li>Youngok Kim and Soowon Lee. A clustering validity assessment Index. PAKDD\u20192003, Seoul, Korea, April 30\u2013May 2, 2003, LNAI 2637, 602\u2013608</li>\n<li>Tong, J. &amp; Tan, H. J. Electron.(China) (2009) 26: 258. <a href=\"https://doi.org/10.1007/s11767-007-0151-8\" rel=\"nofollow\">https://doi.org/10.1007/s11767-007-0151-8</a></li>\n<li>Halkidi, Maria &amp; Vazirgiannis, Michalis &amp; Batistakis, Yannis. (2000). Quality Scheme Assessment in the Clustering Process. LNCS (LNAI). 1910. 265-276. 10.1007/3-540-45372-5_26.</li>\n</ol>\n\n          </div>"}, "last_serial": 4991213, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "0469d98683e8d2824a219384a48b8fa3", "sha256": "8bf86122757df4ebb1e5809217ec03fa4201ac1887ca49ef1ec4a755885f1167"}, "downloads": -1, "filename": "s_dbw-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0469d98683e8d2824a219384a48b8fa3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 5540, "upload_time": "2018-11-06T11:00:16", "upload_time_iso_8601": "2018-11-06T11:00:16.222917Z", "url": "https://files.pythonhosted.org/packages/ee/63/9efd74e0914d48e7f9dbde3797dfb3563daa0608b6460289b69547832f01/s_dbw-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "57194475d85c595dc0454df0e1433400", "sha256": "a45c09ab16fda4cf3bd7562e3345821f6034116581a29eb8eaeb8bc70b1322fe"}, "downloads": -1, "filename": "s_dbw-0.2.0.tar.gz", "has_sig": false, "md5_digest": "57194475d85c595dc0454df0e1433400", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 4782, "upload_time": "2018-11-06T11:00:18", "upload_time_iso_8601": "2018-11-06T11:00:18.310454Z", "url": "https://files.pythonhosted.org/packages/79/4c/b0ea8871c642147904236d5c21e96e63b9d058053332d41dfd5ba48d3c93/s_dbw-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "417d1061f31381eff78883c02a543b4f", "sha256": "f9a4fe7319c4cf4491b0dd306052c27a0eb3e49bc45a1c9025ea4b76aeb101df"}, "downloads": -1, "filename": "s_dbw-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "417d1061f31381eff78883c02a543b4f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 6834, "upload_time": "2018-11-09T13:04:17", "upload_time_iso_8601": "2018-11-09T13:04:17.413311Z", "url": "https://files.pythonhosted.org/packages/66/b2/51d3807a553cab4e2f77001e581157899dad61d1ecb36b9ad5659e713eeb/s_dbw-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0328de3766a02db1f541ac812d3264b5", "sha256": "26b4aaaaedd800a95342e601c42ea37156ce3cd81135bd4ef6039e4bfa138e9c"}, "downloads": -1, "filename": "s_dbw-0.3.0.tar.gz", "has_sig": false, "md5_digest": "0328de3766a02db1f541ac812d3264b5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 5926, "upload_time": "2018-11-09T13:04:18", "upload_time_iso_8601": "2018-11-09T13:04:18.851184Z", "url": "https://files.pythonhosted.org/packages/de/10/6637bc7a4f2e09721e9e54eef096434630c317b07f2925dc4fc59cb3f270/s_dbw-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "14c19d6b3bb22a3c40668cd29a788717", "sha256": "f72473e0c1ab4d180f5971158b7cedff6b2c23c5f9ee5329483fcf6bc01d4930"}, "downloads": -1, "filename": "s_dbw-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "14c19d6b3bb22a3c40668cd29a788717", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 7128, "upload_time": "2019-01-23T08:16:21", "upload_time_iso_8601": "2019-01-23T08:16:21.040330Z", "url": "https://files.pythonhosted.org/packages/c5/0c/dde1455d68cb7474ec38f18d466772d8212235551ef238d3785bdfc0ce5b/s_dbw-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "587ba07f5e47cf6744cd0ca54e40be42", "sha256": "de352939639463c66211378f6bce6432f5fc980c703330d653993fe9bcb00119"}, "downloads": -1, "filename": "s_dbw-0.3.1.tar.gz", "has_sig": false, "md5_digest": "587ba07f5e47cf6744cd0ca54e40be42", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 6256, "upload_time": "2019-01-23T08:16:22", "upload_time_iso_8601": "2019-01-23T08:16:22.410204Z", "url": "https://files.pythonhosted.org/packages/ff/77/3669722959f27aad4fb3df36aeba0fc9382999f6f1687281509dddb45568/s_dbw-0.3.1.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "dc9f95482f5f69c24c8385fe26384729", "sha256": "aac5310afa988e31ef7c098952566609659b5a649f02359b93efbc68bc712030"}, "downloads": -1, "filename": "s_dbw-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "dc9f95482f5f69c24c8385fe26384729", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 8021, "upload_time": "2019-03-27T07:48:14", "upload_time_iso_8601": "2019-03-27T07:48:14.613353Z", "url": "https://files.pythonhosted.org/packages/0e/3d/bd5788d448ab18d92dc38b10cccb6629eb89525a4c543ce38a0c5d12feb2/s_dbw-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ca5703f43650e314dcb142e6ecca63f4", "sha256": "8cead4094d6fec5225ad98f9127ee2b1a141b1afe2c55194cdfd9fcc8be1f494"}, "downloads": -1, "filename": "s_dbw-0.4.0.tar.gz", "has_sig": false, "md5_digest": "ca5703f43650e314dcb142e6ecca63f4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 7221, "upload_time": "2019-03-27T07:48:16", "upload_time_iso_8601": "2019-03-27T07:48:16.205796Z", "url": "https://files.pythonhosted.org/packages/8d/46/85d6c7875e6dad25e81f9e47d30e648446e0b0e31469be32f5c5bdfa12c2/s_dbw-0.4.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "dc9f95482f5f69c24c8385fe26384729", "sha256": "aac5310afa988e31ef7c098952566609659b5a649f02359b93efbc68bc712030"}, "downloads": -1, "filename": "s_dbw-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "dc9f95482f5f69c24c8385fe26384729", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 8021, "upload_time": "2019-03-27T07:48:14", "upload_time_iso_8601": "2019-03-27T07:48:14.613353Z", "url": "https://files.pythonhosted.org/packages/0e/3d/bd5788d448ab18d92dc38b10cccb6629eb89525a4c543ce38a0c5d12feb2/s_dbw-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ca5703f43650e314dcb142e6ecca63f4", "sha256": "8cead4094d6fec5225ad98f9127ee2b1a141b1afe2c55194cdfd9fcc8be1f494"}, "downloads": -1, "filename": "s_dbw-0.4.0.tar.gz", "has_sig": false, "md5_digest": "ca5703f43650e314dcb142e6ecca63f4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 7221, "upload_time": "2019-03-27T07:48:16", "upload_time_iso_8601": "2019-03-27T07:48:16.205796Z", "url": "https://files.pythonhosted.org/packages/8d/46/85d6c7875e6dad25e81f9e47d30e648446e0b0e31469be32f5c5bdfa12c2/s_dbw-0.4.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:56:20 2020"}