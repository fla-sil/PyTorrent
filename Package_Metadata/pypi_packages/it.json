{"info": {"author": "thg", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": "# InspectorTiger\n![CI](https://github.com/thg-consulting/inspectortiger/workflows/CI/badge.svg)\n![codecov.io](http://codecov.io/github/thg-consulting/inspectortiger/coverage.svg?branch=master)\n![PyPI version](https://badge.fury.io/py/inspectortiger.svg)\n![black](https://img.shields.io/badge/code%20style-black-000000.svg)\n![Python 3.7+](https://img.shields.io/badge/python-3.7+-blue.svg)\n![Dependicy Free](https://img.shields.io/static/v1?label=dependicy&message=free&color=success)\n\nInspectorTiger is a modern python code review tool / framework. It comes with bunch of pre-defined handlers which warns you about improvements and possible bugs. Beside these handlers, you can write your own or use community ones.\n\n```py\nALPHABET = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\n\nclass Foo(SomeObjects):\n    def bar(self, x=[], y: Union[int, None] = None):\n        x.append(1)\n        for _ in range(3):\n            try:\n                super(bla, bla).foo_baz()\n            except Exception:\n                print(\"An exception\")\n            except AttributeError:\n                print(\"An attribute error\")\n            finally:\n                continue\n\n        my_iterable = list(token[0] for token in tokens)\n        for a in my_iterable:\n            yield a\n\n        my_other_iterable = list(map(itemgetter(0), tokens))\n        for a in range(len(my_other_iterable)):\n            print(a, \"=>\", my_other_iterable[a])\n\n```\nThink about this piece of code, you see some bugs or improvements, don't you? But what if there were hundreds of lines code in this form inside your big codebase. How would you find these patterns? By writing regex queries? LOL, of course not.\n```console\n$ inspectortiger ../t.py\n[Inspector Tiger] INFO - InspectorTiger inspected \ud83d\udd0e and found these problems;\n[Inspector Tiger] INFO - \n[upgrade]\n  - ../t.py:1:0     => ALPHABET_CONSTANT\n  - ../t.py:5:27    => OPTIONAL\n  - ../t.py:9:16    => SUPER_ARGS\n  - ../t.py:17:22   => USE_COMPREHENSION\n  - ../t.py:18:8    => YIELD_FROM\n  - ../t.py:21:28   => MAP_USE_COMPREHENSION\n  - ../t.py:22:8    => BUILTIN_ENUMERATE\n[general]\n  - ../t.py:5:4     => DEFAULT_MUTABLE_ARG\n  - ../t.py:8:12    => CONTROL_FLOW_INSIDE_FINALLY\n  - ../t.py:8:12    => UNREACHABLE_EXCEPT\n```\n\n## Tutorials\n- [Inspecting python with Inspector Tiger](https://dev.to/btaskaya/inspecting-python-with-inspector-tiger-3hfb)\n\n## API\nAlso you can use free API (inspector.herokuapp.com) to try our functions out\n```console\n(.venv) [  6:02PM  ]  [  isidentical@x200  ]\n$ curl -s https://inspector.herokuapp.com -d '{\"source\": \"Union[MyType, None]\"}' | jq\n{\n  \"status\": \"success\",\n  \"result\": {\n    \"upgradeable\": [\n      {\n        \"code\": \"OPTIONAL\",\n        \"column\": 0,\n        \"lineno\": 1,\n        \"filename\": \"<unknown>\"\n      }\n    ]\n  }\n}\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/thg-consulting/inspectortiger", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "it", "package_url": "https://pypi.org/project/it/", "platform": "", "project_url": "https://pypi.org/project/it/", "project_urls": {"Homepage": "https://github.com/thg-consulting/inspectortiger"}, "release_url": "https://pypi.org/project/it/0.9.0/", "requires_dist": null, "requires_python": ">=3.7", "summary": "Modern python code review tool / framework", "version": "0.9.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>InspectorTiger</h1>\n<p><img alt=\"CI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6e24b1a1d7aecf55e6528d8458116f93b74da4f5/68747470733a2f2f6769746875622e636f6d2f7468672d636f6e73756c74696e672f696e73706563746f7274696765722f776f726b666c6f77732f43492f62616467652e737667\">\n<img alt=\"codecov.io\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/322d93eb1fd70400df7e2a2262bd442ebd7338d5/687474703a2f2f636f6465636f762e696f2f6769746875622f7468672d636f6e73756c74696e672f696e73706563746f7274696765722f636f7665726167652e7376673f6272616e63683d6d6173746572\">\n<img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/be16cf048b23113f72884ff2eb4b99e11c122fc6/68747470733a2f2f62616467652e667572792e696f2f70792f696e73706563746f7274696765722e737667\">\n<img alt=\"black\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbfdc7754183ecf079bc71ddeabaf88f6cbc5c00/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667\">\n<img alt=\"Python 3.7+\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d7ca45f98bb42530c497ea344d405f84abf0cb71/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f707974686f6e2d332e372b2d626c75652e737667\">\n<img alt=\"Dependicy Free\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/57be623ac2139ed3374b3d87216f68dd26ecb716/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f6c6162656c3d646570656e64696379266d6573736167653d6672656526636f6c6f723d73756363657373\"></p>\n<p>InspectorTiger is a modern python code review tool / framework. It comes with bunch of pre-defined handlers which warns you about improvements and possible bugs. Beside these handlers, you can write your own or use community ones.</p>\n<pre><span class=\"n\">ALPHABET</span> <span class=\"o\">=</span> <span class=\"s2\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Foo</span><span class=\"p\">(</span><span class=\"n\">SomeObjects</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">bar</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"o\">=</span><span class=\"p\">[],</span> <span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">):</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">bla</span><span class=\"p\">,</span> <span class=\"n\">bla</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">foo_baz</span><span class=\"p\">()</span>\n            <span class=\"k\">except</span> <span class=\"ne\">Exception</span><span class=\"p\">:</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"An exception\"</span><span class=\"p\">)</span>\n            <span class=\"k\">except</span> <span class=\"ne\">AttributeError</span><span class=\"p\">:</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"An attribute error\"</span><span class=\"p\">)</span>\n            <span class=\"k\">finally</span><span class=\"p\">:</span>\n                <span class=\"k\">continue</span>\n\n        <span class=\"n\">my_iterable</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">token</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">token</span> <span class=\"ow\">in</span> <span class=\"n\">tokens</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">a</span> <span class=\"ow\">in</span> <span class=\"n\">my_iterable</span><span class=\"p\">:</span>\n            <span class=\"k\">yield</span> <span class=\"n\">a</span>\n\n        <span class=\"n\">my_other_iterable</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"n\">itemgetter</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">tokens</span><span class=\"p\">))</span>\n        <span class=\"k\">for</span> <span class=\"n\">a</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">my_other_iterable</span><span class=\"p\">)):</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"s2\">\"=&gt;\"</span><span class=\"p\">,</span> <span class=\"n\">my_other_iterable</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">])</span>\n</pre>\n<p>Think about this piece of code, you see some bugs or improvements, don't you? But what if there were hundreds of lines code in this form inside your big codebase. How would you find these patterns? By writing regex queries? LOL, of course not.</p>\n<pre><span class=\"gp\">$</span> inspectortiger ../t.py\n<span class=\"go\">[Inspector Tiger] INFO - InspectorTiger inspected \ud83d\udd0e and found these problems;</span>\n<span class=\"go\">[Inspector Tiger] INFO - </span>\n<span class=\"go\">[upgrade]</span>\n<span class=\"go\">  - ../t.py:1:0     =&gt; ALPHABET_CONSTANT</span>\n<span class=\"go\">  - ../t.py:5:27    =&gt; OPTIONAL</span>\n<span class=\"go\">  - ../t.py:9:16    =&gt; SUPER_ARGS</span>\n<span class=\"go\">  - ../t.py:17:22   =&gt; USE_COMPREHENSION</span>\n<span class=\"go\">  - ../t.py:18:8    =&gt; YIELD_FROM</span>\n<span class=\"go\">  - ../t.py:21:28   =&gt; MAP_USE_COMPREHENSION</span>\n<span class=\"go\">  - ../t.py:22:8    =&gt; BUILTIN_ENUMERATE</span>\n<span class=\"go\">[general]</span>\n<span class=\"go\">  - ../t.py:5:4     =&gt; DEFAULT_MUTABLE_ARG</span>\n<span class=\"go\">  - ../t.py:8:12    =&gt; CONTROL_FLOW_INSIDE_FINALLY</span>\n<span class=\"go\">  - ../t.py:8:12    =&gt; UNREACHABLE_EXCEPT</span>\n</pre>\n<h2>Tutorials</h2>\n<ul>\n<li><a href=\"https://dev.to/btaskaya/inspecting-python-with-inspector-tiger-3hfb\" rel=\"nofollow\">Inspecting python with Inspector Tiger</a></li>\n</ul>\n<h2>API</h2>\n<p>Also you can use free API (inspector.herokuapp.com) to try our functions out</p>\n<pre><span class=\"gp gp-VirtualEnv\">(.venv)</span> <span class=\"go\">[  6:02PM  ]  [  isidentical@x200  ]</span>\n<span class=\"gp\">$</span> curl -s https://inspector.herokuapp.com -d <span class=\"s1\">'{\"source\": \"Union[MyType, None]\"}'</span> <span class=\"p\">|</span> jq\n<span class=\"go\">{</span>\n<span class=\"go\">  \"status\": \"success\",</span>\n<span class=\"go\">  \"result\": {</span>\n<span class=\"go\">    \"upgradeable\": [</span>\n<span class=\"go\">      {</span>\n<span class=\"go\">        \"code\": \"OPTIONAL\",</span>\n<span class=\"go\">        \"column\": 0,</span>\n<span class=\"go\">        \"lineno\": 1,</span>\n<span class=\"go\">        \"filename\": \"&lt;unknown&gt;\"</span>\n<span class=\"go\">      }</span>\n<span class=\"go\">    ]</span>\n<span class=\"go\">  }</span>\n<span class=\"go\">}</span>\n</pre>\n\n          </div>"}, "last_serial": 6432917, "releases": {"0.0.2": [], "0.9.0": [{"comment_text": "", "digests": {"md5": "da4e962660a699e4d6307ff4dfa3032b", "sha256": "3d815378e434377dac8fa9ba291d20ddfc70291d7a462b8d2038da213e4f4118"}, "downloads": -1, "filename": "it-0.9.0.tar.gz", "has_sig": false, "md5_digest": "da4e962660a699e4d6307ff4dfa3032b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 14663, "upload_time": "2020-01-10T20:54:16", "upload_time_iso_8601": "2020-01-10T20:54:16.711065Z", "url": "https://files.pythonhosted.org/packages/aa/25/04fd8548516f6b7d7d8949d40e36ddac7fc2df114537d8f3649bf7f493ad/it-0.9.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "da4e962660a699e4d6307ff4dfa3032b", "sha256": "3d815378e434377dac8fa9ba291d20ddfc70291d7a462b8d2038da213e4f4118"}, "downloads": -1, "filename": "it-0.9.0.tar.gz", "has_sig": false, "md5_digest": "da4e962660a699e4d6307ff4dfa3032b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 14663, "upload_time": "2020-01-10T20:54:16", "upload_time_iso_8601": "2020-01-10T20:54:16.711065Z", "url": "https://files.pythonhosted.org/packages/aa/25/04fd8548516f6b7d7d8949d40e36ddac7fc2df114537d8f3649bf7f493ad/it-0.9.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:53:52 2020"}