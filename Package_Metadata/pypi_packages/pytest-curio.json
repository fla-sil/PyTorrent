{"info": {"author": "Xavier Barbosa", "author_email": "clint.northwood@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Programming Language :: Python :: 3.5", "Topic :: Software Development :: Testing"], "description": "pytest-curio: pytest support for curio\n======================================\n\ncurio_ code is written in the form of async/await, which makes it slightly more\ndifficult to test using normal testing tools. pytest-curio provides useful\nfixtures and markers to make testing easier.\n\n.. code-block:: python\n\n    @pytest.mark.curio\n    async def test_some_curio_code():\n        res = await library.do_something()\n        assert b'expected result' == res\n\npytest-curio has been strongly influenced by pytest-asyncio_.\n\n.. _curio: https://github.com/dabeaz/curio\n.. _pytest-asyncio: https://github.com/pytest-dev/pytest-asyncio\n\nFeatures\n--------\n\n- fixtures for creating and injecting versions of the curio kernel\n- fixtures for injecting unused tcp ports\n- pytest markers for treating tests as curio coroutines\n\n\nInstallation\n------------\n\nTo install pytest-curio, simply:\n\n.. code-block:: bash\n\n    $ pip install pytest-curio\n\nThis is enough for pytest to pick up pytest-curio.\n\nFixtures\n--------\n\n``kernel``\n~~~~~~~~~~\nCreates and injects a new instance of the default curio kernel. The kernel\nwill be stoped at the end of the test.\n\nNote that just using the ``kernel`` fixture won't make your test function a\ncoroutine. You'll need to interact with the kernel directly, using methods\nlike ``kernel.run``. See the ``pytest.mark.curio`` marker for treating test\nfunctions like coroutines.\n\n.. code-block:: python\n\n    def test_http_client(kernel):\n        result = []\n        async def my_coroutine(obj):\n            result.append(obj)\n        url = 'http://httpbin.org/get'\n        task = kernel.run(my_coroutine(url))\n        assert url in result\n\nMarkers\n-------\n\n``pytest.mark.curio``\n~~~~~~~~~~~~~~~~~~~~~\nMark your test coroutine with this marker and pytest will execute it as an\ncurio task using the kernel provided by the ``kernel`` fixture. See the\nintroductory section for an example.\n", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/johnnoone/pytest-curio", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "pytest-curio", "package_url": "https://pypi.org/project/pytest-curio/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pytest-curio/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/johnnoone/pytest-curio"}, "release_url": "https://pypi.org/project/pytest-curio/0.1.0/", "requires_dist": null, "requires_python": null, "summary": "Pytest support for curio.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://github.com/dabeaz/curio\" rel=\"nofollow\">curio</a> code is written in the form of async/await, which makes it slightly more\ndifficult to test using normal testing tools. pytest-curio provides useful\nfixtures and markers to make testing easier.</p>\n<pre><span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">mark</span><span class=\"o\">.</span><span class=\"n\">curio</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">test_some_curio_code</span><span class=\"p\">():</span>\n    <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">do_something</span><span class=\"p\">()</span>\n    <span class=\"k\">assert</span> <span class=\"sa\">b</span><span class=\"s1\">'expected result'</span> <span class=\"o\">==</span> <span class=\"n\">res</span>\n</pre>\n<p>pytest-curio has been strongly influenced by <a href=\"https://github.com/pytest-dev/pytest-asyncio\" rel=\"nofollow\">pytest-asyncio</a>.</p>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>fixtures for creating and injecting versions of the curio kernel</li>\n<li>fixtures for injecting unused tcp ports</li>\n<li>pytest markers for treating tests as curio coroutines</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>To install pytest-curio, simply:</p>\n<pre>$ pip install pytest-curio\n</pre>\n<p>This is enough for pytest to pick up pytest-curio.</p>\n</div>\n<div id=\"fixtures\">\n<h2>Fixtures</h2>\n<h2 id=\"kernel\"><span class=\"section-subtitle\"><tt>kernel</tt></span></h2>\n<p>Creates and injects a new instance of the default curio kernel. The kernel\nwill be stoped at the end of the test.</p>\n<p>Note that just using the <tt>kernel</tt> fixture won\u2019t make your test function a\ncoroutine. You\u2019ll need to interact with the kernel directly, using methods\nlike <tt>kernel.run</tt>. See the <tt>pytest.mark.curio</tt> marker for treating test\nfunctions like coroutines.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">test_http_client</span><span class=\"p\">(</span><span class=\"n\">kernel</span><span class=\"p\">):</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">my_coroutine</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">):</span>\n        <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">)</span>\n    <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s1\">'http://httpbin.org/get'</span>\n    <span class=\"n\">task</span> <span class=\"o\">=</span> <span class=\"n\">kernel</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">my_coroutine</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">))</span>\n    <span class=\"k\">assert</span> <span class=\"n\">url</span> <span class=\"ow\">in</span> <span class=\"n\">result</span>\n</pre>\n</div>\n<div id=\"markers\">\n<h2>Markers</h2>\n<h2 id=\"pytest-mark-curio\"><span class=\"section-subtitle\"><tt>pytest.mark.curio</tt></span></h2>\n<p>Mark your test coroutine with this marker and pytest will execute it as an\ncurio task using the kernel provided by the <tt>kernel</tt> fixture. See the\nintroductory section for an example.</p>\n</div>\n\n          </div>"}, "last_serial": 1900669, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "4ca1e003f0a5d70df73358e670fc4f8f", "sha256": "b3b870501ca55d61e9e1f8972669dc5f341fd25f559dd10a6a7239da7b73fca0"}, "downloads": -1, "filename": "pytest_curio-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "4ca1e003f0a5d70df73358e670fc4f8f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3851, "upload_time": "2016-01-12T11:30:12", "upload_time_iso_8601": "2016-01-12T11:30:12.552137Z", "url": "https://files.pythonhosted.org/packages/3a/14/cc4664ae47ea6523d06854ee46c02bf7735dd4c9784812e3bdc0d8044bcb/pytest_curio-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "293ef3c5fa2042fa210299a11f7c40a7", "sha256": "a5969ac515ac3e41de4399bd4b6f9f00c815500eef5f90e96432ce456dcd513d"}, "downloads": -1, "filename": "pytest-curio-0.1.0.tar.gz", "has_sig": false, "md5_digest": "293ef3c5fa2042fa210299a11f7c40a7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17640, "upload_time": "2016-01-12T11:30:37", "upload_time_iso_8601": "2016-01-12T11:30:37.767309Z", "url": "https://files.pythonhosted.org/packages/66/a1/ef64ed8bf855a825573b0b69f30bb52f69f8f37258996742cb158bcf4c5a/pytest-curio-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4ca1e003f0a5d70df73358e670fc4f8f", "sha256": "b3b870501ca55d61e9e1f8972669dc5f341fd25f559dd10a6a7239da7b73fca0"}, "downloads": -1, "filename": "pytest_curio-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "4ca1e003f0a5d70df73358e670fc4f8f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3851, "upload_time": "2016-01-12T11:30:12", "upload_time_iso_8601": "2016-01-12T11:30:12.552137Z", "url": "https://files.pythonhosted.org/packages/3a/14/cc4664ae47ea6523d06854ee46c02bf7735dd4c9784812e3bdc0d8044bcb/pytest_curio-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "293ef3c5fa2042fa210299a11f7c40a7", "sha256": "a5969ac515ac3e41de4399bd4b6f9f00c815500eef5f90e96432ce456dcd513d"}, "downloads": -1, "filename": "pytest-curio-0.1.0.tar.gz", "has_sig": false, "md5_digest": "293ef3c5fa2042fa210299a11f7c40a7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17640, "upload_time": "2016-01-12T11:30:37", "upload_time_iso_8601": "2016-01-12T11:30:37.767309Z", "url": "https://files.pythonhosted.org/packages/66/a1/ef64ed8bf855a825573b0b69f30bb52f69f8f37258996742cb158bcf4c5a/pytest-curio-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:17 2020"}