{"info": {"author": "David Khudaverdyan", "author_email": "khudaverdyan.david@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Utilities"], "description": "# ImpSort\nImprobably bad sorting for lists in Python.\n\n\n## Why?\nThere was a conversation at a coffee shop about how terrible Bogo Sort is, so the question became can we use that concept to make even worse algorithms.\n\n\n## What?\nThis library has implementations of some terrible sorting algorithms with some added \"niceties\" such as:\n* Keeping track of metadata\n* Having iterable (generator) versions of the algorithms\n* Having equally terrible comparisons\n* Timeouts for sanity's sake\n\n\n## Algorithms\nThese are the algorithms currently implemented in ImpSort.\n\n### Bogo Sort\nThis is the sorting algorithm that started this whole project.\n\nIt works by randomly re-sorting the entire list then checking if the new order is sorted.\n\n### Random Swap Sort\nThis is like Bogo Sort... but worse.\n\nIt works by randomly picking two items in the list, then swapping them. It then checks to see if the whole list is sorted. It is also able to pick the same item, which would result in no change to the list at all!\n\n### Recompile Sort\nThis is based on the old adage that states that if your code doesn't compile on the first try, it might on the next try....\n\nSo basically this goes through the whole list and sets each item to the same value it had, then checks if the list is now sorted. I believe Einstein would call this pure madness.\n\n### Stalin Sort\nThis is a sorting algorithm that always completes in one step. That is that it operates at O(N).\n\nIt works by iterating through each item in the list. If an item is not in order, it is eliminated. The end result is guaranteed to be sorted, but you are not guaranteed to still have all the same items you started with...\n\n## Installation\nUse pip to install:\n\n`pip install ImpSort`\n\n## Usage\nBasic usage:\n\n```python\n# ImpSort objects are used to perform sorting operations\n# TimeOutException can be used to detect timeouts\nfrom ImpSort import (ImpSort, TimeOutException)\n\n# The default algorithm is 'rand_swap'\n# You can alternatively set it as 'bogo' or 'recompile'\n# You can also provide a random to use (such as a random.SystemRandom instance)\nsorter = ImpSort()\n\nunsorted_list = [24, 106, 2, 42]  # This is a sample unsorted list\n\n# To simply sort the list:\nsorter.sort(unsorted_list)\n\n# To get metadata about the most recent run, use the meta attribute:\nprint(sorter.meta)\n\n# To get each iteration as the sort progresses, use the sort_generator method to get an iterable\nfor u in sorter.sort_generator(unsorted_list):\n    print(u)\n\n# To set a timeout, use the timeout argument:\ntry:\n    # This will time out if it hasn't returned in 10 seconds\n    sorter.sort(unsorted_list, timeout=10)\nexcept TimeOutException as e:\n    # You can catch a TimeOutException\n    print(e)  # The exception includes some statistics about the failed run\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/thedeltaflyer/ImpSort", "keywords": "sorting bogo rand_swap", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "ImpSort", "package_url": "https://pypi.org/project/ImpSort/", "platform": "", "project_url": "https://pypi.org/project/ImpSort/", "project_urls": {"Homepage": "http://github.com/thedeltaflyer/ImpSort"}, "release_url": "https://pypi.org/project/ImpSort/0.0.2/", "requires_dist": ["coverage ; extra == 'test'", "pytest ; extra == 'test'", "pytest-cov ; extra == 'test'"], "requires_python": "", "summary": "A python library for interacting with some very terrible sorting algorithms", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>ImpSort</h1>\n<p>Improbably bad sorting for lists in Python.</p>\n<h2>Why?</h2>\n<p>There was a conversation at a coffee shop about how terrible Bogo Sort is, so the question became can we use that concept to make even worse algorithms.</p>\n<h2>What?</h2>\n<p>This library has implementations of some terrible sorting algorithms with some added \"niceties\" such as:</p>\n<ul>\n<li>Keeping track of metadata</li>\n<li>Having iterable (generator) versions of the algorithms</li>\n<li>Having equally terrible comparisons</li>\n<li>Timeouts for sanity's sake</li>\n</ul>\n<h2>Algorithms</h2>\n<p>These are the algorithms currently implemented in ImpSort.</p>\n<h3>Bogo Sort</h3>\n<p>This is the sorting algorithm that started this whole project.</p>\n<p>It works by randomly re-sorting the entire list then checking if the new order is sorted.</p>\n<h3>Random Swap Sort</h3>\n<p>This is like Bogo Sort... but worse.</p>\n<p>It works by randomly picking two items in the list, then swapping them. It then checks to see if the whole list is sorted. It is also able to pick the same item, which would result in no change to the list at all!</p>\n<h3>Recompile Sort</h3>\n<p>This is based on the old adage that states that if your code doesn't compile on the first try, it might on the next try....</p>\n<p>So basically this goes through the whole list and sets each item to the same value it had, then checks if the list is now sorted. I believe Einstein would call this pure madness.</p>\n<h3>Stalin Sort</h3>\n<p>This is a sorting algorithm that always completes in one step. That is that it operates at O(N).</p>\n<p>It works by iterating through each item in the list. If an item is not in order, it is eliminated. The end result is guaranteed to be sorted, but you are not guaranteed to still have all the same items you started with...</p>\n<h2>Installation</h2>\n<p>Use pip to install:</p>\n<p><code>pip install ImpSort</code></p>\n<h2>Usage</h2>\n<p>Basic usage:</p>\n<pre><span class=\"c1\"># ImpSort objects are used to perform sorting operations</span>\n<span class=\"c1\"># TimeOutException can be used to detect timeouts</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ImpSort</span> <span class=\"kn\">import</span> <span class=\"p\">(</span><span class=\"n\">ImpSort</span><span class=\"p\">,</span> <span class=\"n\">TimeOutException</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># The default algorithm is 'rand_swap'</span>\n<span class=\"c1\"># You can alternatively set it as 'bogo' or 'recompile'</span>\n<span class=\"c1\"># You can also provide a random to use (such as a random.SystemRandom instance)</span>\n<span class=\"n\">sorter</span> <span class=\"o\">=</span> <span class=\"n\">ImpSort</span><span class=\"p\">()</span>\n\n<span class=\"n\">unsorted_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">24</span><span class=\"p\">,</span> <span class=\"mi\">106</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">42</span><span class=\"p\">]</span>  <span class=\"c1\"># This is a sample unsorted list</span>\n\n<span class=\"c1\"># To simply sort the list:</span>\n<span class=\"n\">sorter</span><span class=\"o\">.</span><span class=\"n\">sort</span><span class=\"p\">(</span><span class=\"n\">unsorted_list</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># To get metadata about the most recent run, use the meta attribute:</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sorter</span><span class=\"o\">.</span><span class=\"n\">meta</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># To get each iteration as the sort progresses, use the sort_generator method to get an iterable</span>\n<span class=\"k\">for</span> <span class=\"n\">u</span> <span class=\"ow\">in</span> <span class=\"n\">sorter</span><span class=\"o\">.</span><span class=\"n\">sort_generator</span><span class=\"p\">(</span><span class=\"n\">unsorted_list</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># To set a timeout, use the timeout argument:</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"c1\"># This will time out if it hasn't returned in 10 seconds</span>\n    <span class=\"n\">sorter</span><span class=\"o\">.</span><span class=\"n\">sort</span><span class=\"p\">(</span><span class=\"n\">unsorted_list</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"k\">except</span> <span class=\"n\">TimeOutException</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"c1\"># You can catch a TimeOutException</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span>  <span class=\"c1\"># The exception includes some statistics about the failed run</span>\n</pre>\n\n          </div>"}, "last_serial": 6694086, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "89102cbd09574dc4d7873f1678b3ea90", "sha256": "da6df235321ef070729632e5443aa6e8b43c4dcf8c6c959e4ef9b03fc68edd42"}, "downloads": -1, "filename": "ImpSort-0.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "89102cbd09574dc4d7873f1678b3ea90", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 8232, "upload_time": "2020-02-24T00:38:40", "upload_time_iso_8601": "2020-02-24T00:38:40.986862Z", "url": "https://files.pythonhosted.org/packages/cb/8b/b32232d591d13861672b7e6758d931354ef91162c44f0013207afff1fe1b/ImpSort-0.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "36e0fac64dd268055c8cf10679f8870d", "sha256": "40a885b78e440be8d9d23af8965a3b11ef6594f61d6b8b4967e22daf274d0798"}, "downloads": -1, "filename": "ImpSort-0.0.1.tar.gz", "has_sig": false, "md5_digest": "36e0fac64dd268055c8cf10679f8870d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9536, "upload_time": "2020-02-24T00:38:43", "upload_time_iso_8601": "2020-02-24T00:38:43.162784Z", "url": "https://files.pythonhosted.org/packages/a5/da/916e88fb5c6dd99afa1d28126ec7ef9d4544eefd8443e00b4302d9daf073/ImpSort-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "0ea09e697d31c67448f45999296de9e5", "sha256": "28c1adaeb99ffc3a792f100ea865c60d50c98a8de7e876a45fee2af4857eeb17"}, "downloads": -1, "filename": "ImpSort-0.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0ea09e697d31c67448f45999296de9e5", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 8857, "upload_time": "2020-02-25T03:41:22", "upload_time_iso_8601": "2020-02-25T03:41:22.550210Z", "url": "https://files.pythonhosted.org/packages/98/6c/86fe8917a97c73520d8346942c7a25d1e28549c81f94c10291b9f4389f53/ImpSort-0.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3b72651df12a3927eb19e8b78872ab97", "sha256": "efc776c7518ad23bdc69c7b72ccaced9cbdd670d3f8bc4ae293e6a62f5d3e104"}, "downloads": -1, "filename": "ImpSort-0.0.2.tar.gz", "has_sig": false, "md5_digest": "3b72651df12a3927eb19e8b78872ab97", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10098, "upload_time": "2020-02-25T03:41:24", "upload_time_iso_8601": "2020-02-25T03:41:24.180722Z", "url": "https://files.pythonhosted.org/packages/20/84/0193dddaa142138e8318a7a8677a2dce9d21efdd144797c3bed10e12bbd4/ImpSort-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0ea09e697d31c67448f45999296de9e5", "sha256": "28c1adaeb99ffc3a792f100ea865c60d50c98a8de7e876a45fee2af4857eeb17"}, "downloads": -1, "filename": "ImpSort-0.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0ea09e697d31c67448f45999296de9e5", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 8857, "upload_time": "2020-02-25T03:41:22", "upload_time_iso_8601": "2020-02-25T03:41:22.550210Z", "url": "https://files.pythonhosted.org/packages/98/6c/86fe8917a97c73520d8346942c7a25d1e28549c81f94c10291b9f4389f53/ImpSort-0.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3b72651df12a3927eb19e8b78872ab97", "sha256": "efc776c7518ad23bdc69c7b72ccaced9cbdd670d3f8bc4ae293e6a62f5d3e104"}, "downloads": -1, "filename": "ImpSort-0.0.2.tar.gz", "has_sig": false, "md5_digest": "3b72651df12a3927eb19e8b78872ab97", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10098, "upload_time": "2020-02-25T03:41:24", "upload_time_iso_8601": "2020-02-25T03:41:24.180722Z", "url": "https://files.pythonhosted.org/packages/20/84/0193dddaa142138e8318a7a8677a2dce9d21efdd144797c3bed10e12bbd4/ImpSort-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:56:29 2020"}