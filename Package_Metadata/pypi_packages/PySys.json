{"info": {"author": "Moray Grieve, Ben Spiller", "author_email": "pysys-dev@googlegroups.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: Education", "License :: OSI Approved :: GNU Lesser General Public License v2 (LGPLv2)", "Natural Language :: English", "Operating System :: MacOS", "Operating System :: Microsoft :: Windows", "Operating System :: OS Independent", "Operating System :: POSIX :: Linux", "Operating System :: POSIX :: SunOS/Solaris", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: Implementation :: CPython", "Topic :: Education :: Testing", "Topic :: Software Development :: Quality Assurance", "Topic :: Software Development :: Testing"], "description": "Welcome to PySys!\n=================\n\nPySys is an easy-to-use cross-platform framework for writing and orchestrating \nall your system/integration tests, combined seamlessly with your unit and \nmanual tests. \n\nIt provides a comprehensive package of methods to make all the common \nsystem/integration testing operations a breeze, as well as the flexibility to \nadd whatever test execution and validation logic you need using the full power \nof the Python language. \n\nWhatever language the application you're testing is written in, and whatever \nplatforms it needs to run on, PySys can help!\n\nKey features include:\n\n- A comprehensive library of assertion methods appropriate for system-level \n  testing, such as checking for error/success messages in log files and \n  comparing the contents of output files.\n- A comprehensive library of methods to automate platform-independent process \n  starting, orchestration, and cleanup, for both Windows and Unix-based \n  systems. Includes common operations such as:\n\n   * dynamic port allocation, \n   * waiting until a server is running on a specified port\n   * waiting until a file contains a specified message, \n   * aborting early if an error message is detected\n\n- Support for executing tests in parallel to significantly speed up execution \n  time, with a flexible mechanism for controlling execution order.\n- Support for executing the same test in several modes during your test \n  run (for example against different web browsers, databases, etc). \n- A process memory monitoring framework to check for memory leaks when soak \n  testing your application.\n- A performance monitoring framework for recording and aggregating latency, \n  throughput and other performance metrics.\n\n- A pluggable \"writers\" framework for recording test outcomes in any format, \n  including a standard JUnit-compatible XML results writer in the box, and \n  support for running tests under Travis CI.\n- Integrated support for running PyUnit tests and doctests, in case your \n  application is also written in Python.\n- Integrated support for executing manual/interactively driven test cases.\n- Test categorization and selective include/exclude execution, using per-test \n  classification groups.\n- Support for Windows, Linux, macOS and Solaris. \n\nPySys was created by Moray Grieve. The current maintainer is Ben Spiller. \nThis is a community project so we welcome your contributions, whether \nenhancement issues or GitHub pull requests! \n\nProject Links\n=============\n.. image:: https://travis-ci.com/pysys-test/pysys-test.svg?branch=master\n\t:target: https://travis-ci.com/pysys-test/pysys-test\n\n.. image:: https://codecov.io/gh/pysys-test/pysys-test/branch/master/graph/badge.svg\n\t:target: https://codecov.io/gh/pysys-test/pysys-test\n\n- Documentation: https://pysys-test.github.io/pysys-test\n- Download releases, including sample testcases: https://github.com/pysys-test/pysys-test/releases\n- Stack Overflow tag for questions: https://stackoverflow.com/questions/ask?tags=pysys\n- Bug/enhancement issue tracker: https://github.com/pysys-test/pysys-test/issues\n- Source repository: https://github.com/pysys-test/pysys-test\n\n.. inclusion-marker-section-start-installation\n\nInstallation\n============\n\nPySys can be installed into Python 3.8 (recommended), 3.7/3.6/3.5 or Python 2.7 \n(though note that Python 2.7 will soon be out of support from the Python team). \n\nThe best way to install PySys is using the standard ``pip`` installer which \ndownloads and install the binary package for the current PySys \nrelease, by executing::\n\n\t> python -m pip install PySys\n\nAlternatively, you can download the binary ``.whl`` package from \nhttps://github.com/pysys-test/pysys-test/releases and use \n``python -m pip install PySys-<VERSION>.whl`` instead. \n\nMake sure you have an up-to-date pip using ``python -m pip install --upgrade pip``.\nSee https://packaging.python.org/tutorials/installing-packages for \nmore information about using ``pip``.\n\nWindows\n-------\nOn Windows, pip will automatically install the \n`pywin32 <https://pypi.org/project/pywin32/>`_ and \n`colorama <https://pypi.org/project/colorama/>`_ \nlibraries that PySys depends upon.\n\nThe executable launcher script ``pysys.py`` is installed into the ``Scripts\\`` \ndirectory of the Python installation, e.g. ``c:\\Python\\Scripts\\pysys.py``. \nTo allow easy invocation of PySys from any test directory you may wish to add \nthe Scripts directory to your ``PATH`` or copy the script to a location that is \nalready on ``PATH``. Alternatively you can run PySys using ``python -m pysys``.\n\n\nUnix\n----\nThe executable launcher script ``pysys.py`` is installed into Python's binary \ndirectory, e.g. ``/usr/local/bin``, and hence should be on the current user's \n``PATH`` automatically; if not, just add it. Alternatively you can run PySys \nusing ``python -m pysys``.\n\nThose wishing to use the manual tester should ensure they have \ninstalled the tcl/tk libraries on the host machine and are using a Python \nversion that was compiled with tcl/tk support.\n\n.. inclusion-marker-section-start-getting-started\n\nGetting Started\n===============\nAfter installation, to see the available options to the pysys.py script use::\n\n\t> pysys.py --help\n\nThe script has four main commands: \n\n  - ``makeproject`` to create your top-level testing project configuration file, \n  - ``make`` to create individual testcases, \n  - ``run`` to execute them, and \n  - ``clean`` to delete testcase output after execution.\n\nFor detailed information, see the ``--help`` command line. \n\nTo get started, create a new directory to hold your tests. Then run the \n``makeproject`` command from that directory to add a ``pysysproject.xml`` \nfile which will hold default settings your all your tests::\n\n\t> mkdir tests\n\t> cd tests\n\t> pysys.py makeproject\n\nThen to create your first test, run::\n\n\t> pysys.py make MyApplication_001\n\nThis will create a ``MyApplication_001`` subdirectory with a ``pysystest.xml`` \nfile holding metadata about the test such as its title, and a ``run.py`` \nwhere you can add the logic to ``execute`` your test, and to ``validate`` that \nthe results are as expected. \n\nTo run your testcases, simply execute::\n\n\t> pysys.py run\n\nNow take a look at `pysys.basetest` to begin exploring all the functionality \nPySys provides to help you implement your own ``run.py`` test classes. \n\nYou might also want to take a look at our sample testcases. \nThese can be downloaded as a ``.tar.gz`` containing files with Unix \nline endings, or a ``.zip`` using Windows line endings from \nhttps://github.com/pysys-test/pysys-test/releases. The ``fibonacci`` \ndirectory is a good place to start. \n\n.. inclusion-marker-section-start-license\n\nLicense\n=======\n\nPySys System Test Framework\n\nCopyright (C) 2006-2020 M.B. Grieve\n\nThis library is free software; you can redistribute it and/or\nmodify it under the terms of the GNU Lesser General Public\nLicense as published by the Free Software Foundation; either\nversion 2.1 of the License, or (at your option) any later version.\n\nThis library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nLesser General Public License for more details.\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/pysys-test/pysys-test", "keywords": "testing,qa,system testing,integration testing,unit testing", "license": "GNU Lesser General Public License", "maintainer": "Ben Spiller", "maintainer_email": "pysys-dev@googlegroups.com", "name": "PySys", "package_url": "https://pypi.org/project/PySys/", "platform": "Operating System :: Microsoft :: Windows", "project_url": "https://pypi.org/project/PySys/", "project_urls": {"Ask a Question": "https://stackoverflow.com/questions/ask?tags=pysys", "Change Log": "https://pysys-test.github.io/pysys-test/ChangeLog.html", "Documentation": "https://pysys-test.github.io/pysys-test", "Download Samples": "https://github.com/pysys-test/pysys-test/releases", "Homepage": "https://github.com/pysys-test/pysys-test", "Repository": "https://github.com/pysys-test/pysys-test", "Tracker": "https://github.com/pysys-test/pysys-test/issues"}, "release_url": "https://pypi.org/project/PySys/1.5.1/", "requires_dist": ["pywin32 ; sys_platform == \"win32\"", "colorama ; sys_platform == \"win32\""], "requires_python": ">=2.7, <4", "summary": "Python System Test Framework", "version": "1.5.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"welcome-to-pysys\">\n<h2>Welcome to PySys!</h2>\n<p>PySys is an easy-to-use cross-platform framework for writing and orchestrating\nall your system/integration tests, combined seamlessly with your unit and\nmanual tests.</p>\n<p>It provides a comprehensive package of methods to make all the common\nsystem/integration testing operations a breeze, as well as the flexibility to\nadd whatever test execution and validation logic you need using the full power\nof the Python language.</p>\n<p>Whatever language the application you\u2019re testing is written in, and whatever\nplatforms it needs to run on, PySys can help!</p>\n<p>Key features include:</p>\n<ul>\n<li><p>A comprehensive library of assertion methods appropriate for system-level\ntesting, such as checking for error/success messages in log files and\ncomparing the contents of output files.</p>\n</li>\n<li><p>A comprehensive library of methods to automate platform-independent process\nstarting, orchestration, and cleanup, for both Windows and Unix-based\nsystems. Includes common operations such as:</p>\n<blockquote>\n<ul>\n<li>dynamic port allocation,</li>\n<li>waiting until a server is running on a specified port</li>\n<li>waiting until a file contains a specified message,</li>\n<li>aborting early if an error message is detected</li>\n</ul>\n</blockquote>\n</li>\n<li><p>Support for executing tests in parallel to significantly speed up execution\ntime, with a flexible mechanism for controlling execution order.</p>\n</li>\n<li><p>Support for executing the same test in several modes during your test\nrun (for example against different web browsers, databases, etc).</p>\n</li>\n<li><p>A process memory monitoring framework to check for memory leaks when soak\ntesting your application.</p>\n</li>\n<li><p>A performance monitoring framework for recording and aggregating latency,\nthroughput and other performance metrics.</p>\n</li>\n<li><p>A pluggable \u201cwriters\u201d framework for recording test outcomes in any format,\nincluding a standard JUnit-compatible XML results writer in the box, and\nsupport for running tests under Travis CI.</p>\n</li>\n<li><p>Integrated support for running PyUnit tests and doctests, in case your\napplication is also written in Python.</p>\n</li>\n<li><p>Integrated support for executing manual/interactively driven test cases.</p>\n</li>\n<li><p>Test categorization and selective include/exclude execution, using per-test\nclassification groups.</p>\n</li>\n<li><p>Support for Windows, Linux, macOS and Solaris.</p>\n</li>\n</ul>\n<p>PySys was created by Moray Grieve. The current maintainer is Ben Spiller.\nThis is a community project so we welcome your contributions, whether\nenhancement issues or GitHub pull requests!</p>\n</div>\n<div id=\"project-links\">\n<h2>Project Links</h2>\n<a href=\"https://travis-ci.com/pysys-test/pysys-test\" rel=\"nofollow\"><img alt=\"https://travis-ci.com/pysys-test/pysys-test.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/dbfa787904704dd92ea3862af5f284c42421eada/68747470733a2f2f7472617669732d63692e636f6d2f70797379732d746573742f70797379732d746573742e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/pysys-test/pysys-test\" rel=\"nofollow\"><img alt=\"https://codecov.io/gh/pysys-test/pysys-test/branch/master/graph/badge.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6f71b25e57ce9240c723cb6b8c3a545d5259d726/68747470733a2f2f636f6465636f762e696f2f67682f70797379732d746573742f70797379732d746573742f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<ul>\n<li>Documentation: <a href=\"https://pysys-test.github.io/pysys-test\" rel=\"nofollow\">https://pysys-test.github.io/pysys-test</a></li>\n<li>Download releases, including sample testcases: <a href=\"https://github.com/pysys-test/pysys-test/releases\" rel=\"nofollow\">https://github.com/pysys-test/pysys-test/releases</a></li>\n<li>Stack Overflow tag for questions: <a href=\"https://stackoverflow.com/questions/ask?tags=pysys\" rel=\"nofollow\">https://stackoverflow.com/questions/ask?tags=pysys</a></li>\n<li>Bug/enhancement issue tracker: <a href=\"https://github.com/pysys-test/pysys-test/issues\" rel=\"nofollow\">https://github.com/pysys-test/pysys-test/issues</a></li>\n<li>Source repository: <a href=\"https://github.com/pysys-test/pysys-test\" rel=\"nofollow\">https://github.com/pysys-test/pysys-test</a></li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>PySys can be installed into Python 3.8 (recommended), 3.7/3.6/3.5 or Python 2.7\n(though note that Python 2.7 will soon be out of support from the Python team).</p>\n<p>The best way to install PySys is using the standard <tt>pip</tt> installer which\ndownloads and install the binary package for the current PySys\nrelease, by executing:</p>\n<pre>&gt; python -m pip install PySys\n</pre>\n<p>Alternatively, you can download the binary <tt>.whl</tt> package from\n<a href=\"https://github.com/pysys-test/pysys-test/releases\" rel=\"nofollow\">https://github.com/pysys-test/pysys-test/releases</a> and use\n<tt>python <span class=\"pre\">-m</span> pip install <span class=\"pre\">PySys-&lt;VERSION&gt;.whl</span></tt> instead.</p>\n<p>Make sure you have an up-to-date pip using <tt>python <span class=\"pre\">-m</span> pip install <span class=\"pre\">--upgrade</span> pip</tt>.\nSee <a href=\"https://packaging.python.org/tutorials/installing-packages\" rel=\"nofollow\">https://packaging.python.org/tutorials/installing-packages</a> for\nmore information about using <tt>pip</tt>.</p>\n<div id=\"windows\">\n<h3>Windows</h3>\n<p>On Windows, pip will automatically install the\n<a href=\"https://pypi.org/project/pywin32/\" rel=\"nofollow\">pywin32</a> and\n<a href=\"https://pypi.org/project/colorama/\" rel=\"nofollow\">colorama</a>\nlibraries that PySys depends upon.</p>\n<p>The executable launcher script <tt>pysys.py</tt> is installed into the <tt>Scripts\\</tt>\ndirectory of the Python installation, e.g. <tt><span class=\"pre\">c:\\Python\\Scripts\\pysys.py</span></tt>.\nTo allow easy invocation of PySys from any test directory you may wish to add\nthe Scripts directory to your <tt>PATH</tt> or copy the script to a location that is\nalready on <tt>PATH</tt>. Alternatively you can run PySys using <tt>python <span class=\"pre\">-m</span> pysys</tt>.</p>\n</div>\n<div id=\"unix\">\n<h3>Unix</h3>\n<p>The executable launcher script <tt>pysys.py</tt> is installed into Python\u2019s binary\ndirectory, e.g. <tt>/usr/local/bin</tt>, and hence should be on the current user\u2019s\n<tt>PATH</tt> automatically; if not, just add it. Alternatively you can run PySys\nusing <tt>python <span class=\"pre\">-m</span> pysys</tt>.</p>\n<p>Those wishing to use the manual tester should ensure they have\ninstalled the tcl/tk libraries on the host machine and are using a Python\nversion that was compiled with tcl/tk support.</p>\n</div>\n</div>\n<div id=\"getting-started\">\n<h2>Getting Started</h2>\n<p>After installation, to see the available options to the pysys.py script use:</p>\n<pre>&gt; pysys.py --help\n</pre>\n<p>The script has four main commands:</p>\n<blockquote>\n<ul>\n<li><tt>makeproject</tt> to create your top-level testing project configuration file,</li>\n<li><tt>make</tt> to create individual testcases,</li>\n<li><tt>run</tt> to execute them, and</li>\n<li><tt>clean</tt> to delete testcase output after execution.</li>\n</ul>\n</blockquote>\n<p>For detailed information, see the <tt><span class=\"pre\">--help</span></tt> command line.</p>\n<p>To get started, create a new directory to hold your tests. Then run the\n<tt>makeproject</tt> command from that directory to add a <tt>pysysproject.xml</tt>\nfile which will hold default settings your all your tests:</p>\n<pre>&gt; mkdir tests\n&gt; cd tests\n&gt; pysys.py makeproject\n</pre>\n<p>Then to create your first test, run:</p>\n<pre>&gt; pysys.py make MyApplication_001\n</pre>\n<p>This will create a <tt>MyApplication_001</tt> subdirectory with a <tt>pysystest.xml</tt>\nfile holding metadata about the test such as its title, and a <tt>run.py</tt>\nwhere you can add the logic to <tt>execute</tt> your test, and to <tt>validate</tt> that\nthe results are as expected.</p>\n<p>To run your testcases, simply execute:</p>\n<pre>&gt; pysys.py run\n</pre>\n<p>Now take a look at <cite>pysys.basetest</cite> to begin exploring all the functionality\nPySys provides to help you implement your own <tt>run.py</tt> test classes.</p>\n<p>You might also want to take a look at our sample testcases.\nThese can be downloaded as a <tt>.tar.gz</tt> containing files with Unix\nline endings, or a <tt>.zip</tt> using Windows line endings from\n<a href=\"https://github.com/pysys-test/pysys-test/releases\" rel=\"nofollow\">https://github.com/pysys-test/pysys-test/releases</a>. The <tt>fibonacci</tt>\ndirectory is a good place to start.</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>PySys System Test Framework</p>\n<p>Copyright (C) 2006-2020 M.B. Grieve</p>\n<p>This library is free software; you can redistribute it and/or\nmodify it under the terms of the GNU Lesser General Public\nLicense as published by the Free Software Foundation; either\nversion 2.1 of the License, or (at your option) any later version.</p>\n<p>This library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nLesser General Public License for more details.</p>\n</div>\n\n          </div>"}, "last_serial": 7181855, "releases": {"0.9.0": [{"comment_text": "", "digests": {"md5": "0da9ac93d2ef949f115814a1605d690d", "sha256": "b7cafa97d62ade71911d0887799584ac34222935615542a219ea31db120573ab"}, "downloads": -1, "filename": "PySys-0.9.0.win32.exe", "has_sig": false, "md5_digest": "0da9ac93d2ef949f115814a1605d690d", "packagetype": "bdist_wininst", "python_version": "any", "requires_python": null, "size": 304129, "upload_time": "2012-10-27T16:14:36", "upload_time_iso_8601": "2012-10-27T16:14:36.226072Z", "url": "https://files.pythonhosted.org/packages/48/34/106b1d28fbb1942cb91b78626988d3f9f07234cde4fc606ef6c8bfef58ee/PySys-0.9.0.win32.exe", "yanked": false}, {"comment_text": "", "digests": {"md5": "9eb7cd3404e811856307363fbd55449a", "sha256": "e12637b097290e3dd7e016d1f98e3995ec12d4d41ddc4a2d5499d76595d1c12c"}, "downloads": -1, "filename": "PySys-0.9.0.zip", "has_sig": false, "md5_digest": "9eb7cd3404e811856307363fbd55449a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 109120, "upload_time": "2012-10-27T16:13:29", "upload_time_iso_8601": "2012-10-27T16:13:29.924067Z", "url": "https://files.pythonhosted.org/packages/6d/4d/b536d1f4e2f68b3cc5282624622c20827fbedb4998eb0a1cc80dfd42754a/PySys-0.9.0.zip", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "6f1252fd076e1110ef75c5f34c2357f4", "sha256": "e0c74b3872bd3bbc087670262b22a9acf1684b82c9c223ca0c7cef9ea7ef5459"}, "downloads": -1, "filename": "PySys-1.2.0.tar.gz", "has_sig": false, "md5_digest": "6f1252fd076e1110ef75c5f34c2357f4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 84178, "upload_time": "2017-04-28T20:46:35", "upload_time_iso_8601": "2017-04-28T20:46:35.176599Z", "url": "https://files.pythonhosted.org/packages/4b/a6/65a9427d378bfe52e28d3e2c7b67c855e3132308c6a96d13be488dcf03c6/PySys-1.2.0.tar.gz", "yanked": false}], "1.4.0": [{"comment_text": "", "digests": {"md5": "e1da95db80cc53bffdb90a700c3b334d", "sha256": "913feac6bdd077f458b86befd7b2b4d44e936bb7dea08230e8f7f16a91e031a3"}, "downloads": -1, "filename": "PySys-1.4.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e1da95db80cc53bffdb90a700c3b334d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, <4", "size": 189794, "upload_time": "2019-04-02T11:39:45", "upload_time_iso_8601": "2019-04-02T11:39:45.899009Z", "url": "https://files.pythonhosted.org/packages/2f/40/7ca7228131b08e8fb6dc365bd2012f988f65ce4eb8e6bcb80625aea88495/PySys-1.4.0-py2.py3-none-any.whl", "yanked": false}], "1.5.0": [{"comment_text": "", "digests": {"md5": "910b5ce050c1dd30ac29b567866cd459", "sha256": "6dca15023a1c3c243387fb044733776c44fd9f6af8c6bcccfda1413c22655dc3"}, "downloads": -1, "filename": "PySys-1.5.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "910b5ce050c1dd30ac29b567866cd459", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, <4", "size": 231297, "upload_time": "2019-07-29T15:02:15", "upload_time_iso_8601": "2019-07-29T15:02:15.810791Z", "url": "https://files.pythonhosted.org/packages/98/f5/e886f410db0417dd0fde2fd9e566ee06788471929fa4d92060499d5c69ac/PySys-1.5.0-py2.py3-none-any.whl", "yanked": false}], "1.5.1": [{"comment_text": "", "digests": {"md5": "f7482e046b05be02f7c0d9a9643de68c", "sha256": "25ff9e8464f18664b3209beaed6b6737e8fc7f3d93af713da317b7a2c2fc3b8c"}, "downloads": -1, "filename": "PySys-1.5.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f7482e046b05be02f7c0d9a9643de68c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, <4", "size": 267024, "upload_time": "2020-05-06T17:34:19", "upload_time_iso_8601": "2020-05-06T17:34:19.682999Z", "url": "https://files.pythonhosted.org/packages/7b/18/cbf59761f742cd417d294ae7a5d0d05946f31725bd79b8dacd6afbd2d434/PySys-1.5.1-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f7482e046b05be02f7c0d9a9643de68c", "sha256": "25ff9e8464f18664b3209beaed6b6737e8fc7f3d93af713da317b7a2c2fc3b8c"}, "downloads": -1, "filename": "PySys-1.5.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f7482e046b05be02f7c0d9a9643de68c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, <4", "size": 267024, "upload_time": "2020-05-06T17:34:19", "upload_time_iso_8601": "2020-05-06T17:34:19.682999Z", "url": "https://files.pythonhosted.org/packages/7b/18/cbf59761f742cd417d294ae7a5d0d05946f31725bd79b8dacd6afbd2d434/PySys-1.5.1-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 02:55:43 2020"}