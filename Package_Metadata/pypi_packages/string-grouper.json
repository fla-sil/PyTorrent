{"info": {"author": "Chris van den Berg", "author_email": "fake_email@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "\n# string_grouper\n\n*string_grouper* is a library that makes finding groups of similar strings within a single or within multiple lists of strings easy. *string_grouper* uses **tf-idf** to calculate **cosine similarities** within a single list or between two lists of strings. The full process is described in the blog [Super Fast String Matching in Python](https://bergvca.github.io/2017/10/14/super-fast-string-matching.html).\n\nThe library contains 3 high level functions that can be used directly, and 1 class that allows for a more iterative approach. The three functions are:\n\n* **match_strings**(**master**: pd.Series, **duplicates**: Optional[pd.Series] = None, \\**kwargs) -> pd.DataFrame:\nReturns all highly similar strings. If only 'master' is given, it will return highly similar strings within master.\n    This can be seen as an self-join. If both master and duplicates is given, it will return highly similar strings\n    between master and duplicates. This can be seen as an inner-join.\n\n\n* **match_most_similar**(**master**: pd.Series, **duplicates**: pd.Series, \\**kwargs) -> pd.Series:     Returns a series of strings of the same length as *'duplicates'* where for each string in duplicates the most similar\n    string in **'master'** is returned. If there are no similar strings in master for a given string in duplicates\n    (there is no potential match where the cosine similarity is above the threshold (default: 0.8)) \n    the original string in duplicates is returned.\n\n   For example the input series `[foooo, bar, baz]` (master) and `[foooob, bar, new]` will return:\n    `[foooo, bar, new]`\n\n\n* **group_similar_strings**(**strings_to_group**: pandas.Series, \\**kwargs) -> pandas.Series: Takes a single series of strings and groups these together by picking a single string in each group of similar strings, and return this as output. \n\n   For example the input series: `[foooo, foooob, bar]` will return `[foooo, foooo, bar]`. Here `foooo` and `foooob` are grouped together into group `foooo` because they are found to be similar.\n\nAll functions are build using a class **StringGrouper**. This class can be used directly as well to allow for a more an more iterative approach where matches can be added or removed if needed. \n\n### kwargs\n\nAll keyword arguments not mentioned in the function definition are used to update the default settings. The following optional arguments can be used:\n\n* ***ngram_size***: The amount of characters in each n-gram. Optional. Default is `3`\n* ***regex***: The regex string used to cleanup the input string. Optional. Default is `[,-./]|\\s`\n* ***max_n_matches***: The maximum number of matches allowed per string. Default is `20`.\n* ***min_similarity***: The minium cossine similarity for two strings to be considered a match.\n    Defaults to `0.8`\n* ***number_of_processes***: The number of processes used by the cosine similarity calculation. Defaults to\n    `1 - number of cores on a machine.`\n\n## Installing\n\ntodo\n\n## Examples\n\nIn this section we will cover a few use cases for which string_grouper may be used. We will use the same dataset of company names as used in: [Super Fast String Matching in Python](https://bergvca.github.io/2017/10/14/super-fast-string-matching.html).\n\n### Find all matches within a single dataset\n\n\n```python\nimport pandas as pd\nimport numpy as np\nfrom string_grouper import match_strings, match_most_similar, group_similar_strings, StringGrouper\n```\n\n\n```python\ncompany_names = '/media/chris/data/dev/name_matching/data/sec_edgar_company_info.csv'\n# We only look at the first 50k as an example\ncompanies = pd.read_csv(company_names)[0:50000]\n# Create all matches:\nmatches = match_strings(companies['Company Name'])\n# Look at only the non-exact matches:\nmatches[matches.left_side != matches.right_side].head()\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>left_side</th>\n      <th>right_side</th>\n      <th>similarity</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>15</th>\n      <td>0210, LLC</td>\n      <td>90210 LLC</td>\n      <td>0.870291</td>\n    </tr>\n    <tr>\n      <th>167</th>\n      <td>1 800 MUTUALS ADVISOR SERIES</td>\n      <td>1 800 MUTUALS ADVISORS SERIES</td>\n      <td>0.931616</td>\n    </tr>\n    <tr>\n      <th>169</th>\n      <td>1 800 MUTUALS ADVISORS SERIES</td>\n      <td>1 800 MUTUALS ADVISOR SERIES</td>\n      <td>0.931616</td>\n    </tr>\n    <tr>\n      <th>171</th>\n      <td>1 800 RADIATOR FRANCHISE INC</td>\n      <td>1-800-RADIATOR FRANCHISE INC.</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>178</th>\n      <td>1 FINANCIAL MARKETPLACE SECURITIES LLC        ...</td>\n      <td>1 FINANCIAL MARKETPLACE SECURITIES, LLC</td>\n      <td>0.949364</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n### Find all matches in between two datasets. \nThe match_string function allows to find similar items between two datasets as well. This can be seen as an inner join between two datasets:\n\n\n\n```python\n# Create a small set of artifical company names\nduplicates = pd.Series(['S MEDIA GROUP', '012 SMILE.COMMUNICATIONS', 'foo bar', 'B4UTRADE COM CORP'])\n# Create all matches:\nmatches = match_strings(companies['Company Name'], duplicates)\nmatches\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>left_side</th>\n      <th>right_side</th>\n      <th>similarity</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>012 SMILE.COMMUNICATIONS LTD</td>\n      <td>012 SMILE.COMMUNICATIONS</td>\n      <td>0.944092</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>B.A.S. MEDIA GROUP</td>\n      <td>S MEDIA GROUP</td>\n      <td>0.854383</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>B4UTRADE COM CORP</td>\n      <td>B4UTRADE COM CORP</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>B4UTRADE COM INC</td>\n      <td>B4UTRADE COM CORP</td>\n      <td>0.810217</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>B4UTRADE CORP</td>\n      <td>B4UTRADE COM CORP</td>\n      <td>0.878276</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\nOut ouf the 4 company names in `duplicates`, 3 companies are found in the original company dataset. One company is found 3 times.\n\n### For a second dataset, find only the most similar match\nIn the example above, it's possible that multiple matches are found for a single string. Sometimes we just want a string to match with a single most similar string. If there are no similar strings found, the original string should be returned:\n\n\n\n```python\n# Create a small set of artifical company names\nnew_companies = pd.Series(['S MEDIA GROUP', '012 SMILE.COMMUNICATIONS', 'foo bar', 'B4UTRADE COM CORP'])\n# Create all matches:\nmatches = match_most_similar(companies['Company Name'], new_companies)\n# Display the results:\npd.DataFrame({'new_companies': new_companies, 'duplicates': matches})\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>new_companies</th>\n      <th>duplicates</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>S MEDIA GROUP</td>\n      <td>B.A.S. MEDIA GROUP</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>012 SMILE.COMMUNICATIONS</td>\n      <td>012 SMILE.COMMUNICATIONS LTD</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>foo bar</td>\n      <td>foo bar</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>B4UTRADE COM CORP</td>\n      <td>B4UTRADE COM CORP</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n### Deduplicate a single dataset and show items with most duplicates\n\nThe `group_similar_strings` functions groups strings that are similar using a single linkage clustering algorithm. That is, if item A and item B are similar, and item B and item C are similar but the similarity between A and C is below the threshold, all three items are grouped together. \n\n\n```python\n# Add the grouped strings\ncompanies['deduplicated_name'] = group_similar_strings(companies['Company Name'])\n# Show items with most duplicates\ncompanies.groupby('deduplicated_name').count().sort_values('Line Number', ascending=False).head(10)['Line Number']\n\n```\n\n\n\n\n    deduplicated_name\n    ADVISORS DISCIPLINED TRUST 1100                        188\n    ACE SECURITIES CORP HOME EQUITY LOAN TRUST 2005-HE4     32\n    AMERCREDIT AUTOMOBILE RECEIVABLES TRUST 2010-1          28\n    ADVENT LATIN AMERICAN PRIVATE EQUITY FUND II-A CV       25\n    ALLSTATE LIFE GLOBAL FUNDING TRUST 2004-1               24\n    ADVENT INTERNATIONAL GPE VII LIMITED PARTNERSHIP        24\n    7ADVISORS DISCIPLINED TRUST 1197                        23\n    AMERICREDIT AUTOMOBILE RECEIVABLES TRUST  2002 - D      23\n    ALLY AUTO RECEIVABLES TRUST 2010-1                      23\n    ANDERSON DAVID  A                                       23\n    Name: Line Number, dtype: int64\n\n\n\n## The StringGrouper class\n\nThe three functions mentioned above all create a `StringGrouper` object behind the scenes and call different functions on it. The `StringGrouper` class keeps track of all tuples of similar strings and creates the groups out of these. Since matches are often not perfect, a common workflow is to:\n\n1. Create matches\n2. Manually inspect the results\n3. Add and remove matches were neccesary\n4. Create groups of similar Strings\n\nThe `StringGrouper` allows for this without having to re-calculate the cosine similarity matrix. See below for an example. \n\n\n```python\ncompany_names = '/media/chris/data/dev/name_matching/data/sec_edgar_company_info.csv'\n# We only look at the first 50k as an example\ncompanies = pd.read_csv(company_names)\n```\n\n1. Create matches\n\n\n```python\n# Create a new StringGrouper\nstring_grouper = StringGrouper(companies['Company Name'])\n# Check if the ngram function does what we expect:\nstring_grouper.n_grams('McDonalds')\n```\n\n\n\n\n    ['McD', 'cDo', 'Don', 'ona', 'nal', 'ald', 'lds']\n\n\n\n\n```python\n# Now fit the StringGrouper - this will take a while since we are calculating cosine similarities on 600k strings\nstring_grouper = string_grouper.fit()\n```\n\n\n```python\n# Add the grouped strings\ncompanies['deduplicated_name'] = string_grouper.get_groups()\n```\n\n\n```python\npd.set_option('display.max_colwidth', -1)\n```\n\nSuppose we know that PWC HOLDING CORP and PRICEWATERHOUSECOOPERS LLP are the same company. The StringGrouper will not match these, since they are not similar enough. \n\n\n```python\ncompanies[companies.deduplicated_name.str.contains('PRICEWATERHOUSECOOPERS LLP')]\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Line Number</th>\n      <th>Company Name</th>\n      <th>Company CIK Key</th>\n      <th>deduplicated_name</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>478441</th>\n      <td>478442</td>\n      <td>PRICEWATERHOUSECOOPERS LLP                              /TA</td>\n      <td>1064284</td>\n      <td>PRICEWATERHOUSECOOPERS LLP                              /TA</td>\n    </tr>\n    <tr>\n      <th>478442</th>\n      <td>478443</td>\n      <td>PRICEWATERHOUSECOOPERS LLP</td>\n      <td>1186612</td>\n      <td>PRICEWATERHOUSECOOPERS LLP                              /TA</td>\n    </tr>\n    <tr>\n      <th>478443</th>\n      <td>478444</td>\n      <td>PRICEWATERHOUSECOOPERS SECURITIES LLC</td>\n      <td>1018444</td>\n      <td>PRICEWATERHOUSECOOPERS LLP                              /TA</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n```python\ncompanies[companies.deduplicated_name.str.contains('PWC')]\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Line Number</th>\n      <th>Company Name</th>\n      <th>Company CIK Key</th>\n      <th>deduplicated_name</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>485535</th>\n      <td>485536</td>\n      <td>PWC CAPITAL INC.</td>\n      <td>1690640</td>\n      <td>PWC CAPITAL INC.</td>\n    </tr>\n    <tr>\n      <th>485536</th>\n      <td>485537</td>\n      <td>PWC HOLDING CORP</td>\n      <td>1456450</td>\n      <td>PWC HOLDING CORP</td>\n    </tr>\n    <tr>\n      <th>485537</th>\n      <td>485538</td>\n      <td>PWC INVESTORS, LLC</td>\n      <td>1480311</td>\n      <td>PWC INVESTORS, LLC</td>\n    </tr>\n    <tr>\n      <th>485538</th>\n      <td>485539</td>\n      <td>PWC REAL ESTATE VALUE FUND I LLC</td>\n      <td>1668928</td>\n      <td>PWC REAL ESTATE VALUE FUND I LLC</td>\n    </tr>\n    <tr>\n      <th>485539</th>\n      <td>485540</td>\n      <td>PWC SECURITIES CORP                                     /BD</td>\n      <td>1023989</td>\n      <td>PWC SECURITIES CORP                                     /BD</td>\n    </tr>\n    <tr>\n      <th>485540</th>\n      <td>485541</td>\n      <td>PWC SECURITIES CORPORATION</td>\n      <td>1023989</td>\n      <td>PWC SECURITIES CORPORATION</td>\n    </tr>\n    <tr>\n      <th>485541</th>\n      <td>485542</td>\n      <td>PWCC LTD</td>\n      <td>1172241</td>\n      <td>PWCC LTD</td>\n    </tr>\n    <tr>\n      <th>485542</th>\n      <td>485543</td>\n      <td>PWCG BROKERAGE, INC.</td>\n      <td>67301</td>\n      <td>PWCG BROKERAGE, INC.</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\nWe can add these with the add function:\n\n\n```python\nstring_grouper = string_grouper.add_match('PRICEWATERHOUSECOOPERS LLP', 'PWC HOLDING CORP')\ncompanies['deduplicated_name'] = string_grouper.get_groups()\n# Now lets check again:\n\ncompanies[companies.deduplicated_name.str.contains('PRICEWATERHOUSECOOPERS LLP')]\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Line Number</th>\n      <th>Company Name</th>\n      <th>Company CIK Key</th>\n      <th>deduplicated_name</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>478441</th>\n      <td>478442</td>\n      <td>PRICEWATERHOUSECOOPERS LLP                              /TA</td>\n      <td>1064284</td>\n      <td>PRICEWATERHOUSECOOPERS LLP                              /TA</td>\n    </tr>\n    <tr>\n      <th>478442</th>\n      <td>478443</td>\n      <td>PRICEWATERHOUSECOOPERS LLP</td>\n      <td>1186612</td>\n      <td>PRICEWATERHOUSECOOPERS LLP                              /TA</td>\n    </tr>\n    <tr>\n      <th>478443</th>\n      <td>478444</td>\n      <td>PRICEWATERHOUSECOOPERS SECURITIES LLC</td>\n      <td>1018444</td>\n      <td>PRICEWATERHOUSECOOPERS LLP                              /TA</td>\n    </tr>\n    <tr>\n      <th>485536</th>\n      <td>485537</td>\n      <td>PWC HOLDING CORP</td>\n      <td>1456450</td>\n      <td>PRICEWATERHOUSECOOPERS LLP                              /TA</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\nThis can also be used to merge two groups:\n\n\n```python\nstring_grouper = string_grouper.add_match('PRICEWATERHOUSECOOPERS LLP', 'ZUCKER MICHAEL')\ncompanies['deduplicated_name'] = string_grouper.get_groups()\n\n# Now lets check again:\ncompanies[companies.deduplicated_name.str.contains('PRICEWATERHOUSECOOPERS LLP')]\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Line Number</th>\n      <th>Company Name</th>\n      <th>Company CIK Key</th>\n      <th>deduplicated_name</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>478441</th>\n      <td>478442</td>\n      <td>PRICEWATERHOUSECOOPERS LLP                              /TA</td>\n      <td>1064284</td>\n      <td>PRICEWATERHOUSECOOPERS LLP                              /TA</td>\n    </tr>\n    <tr>\n      <th>478442</th>\n      <td>478443</td>\n      <td>PRICEWATERHOUSECOOPERS LLP</td>\n      <td>1186612</td>\n      <td>PRICEWATERHOUSECOOPERS LLP                              /TA</td>\n    </tr>\n    <tr>\n      <th>478443</th>\n      <td>478444</td>\n      <td>PRICEWATERHOUSECOOPERS SECURITIES LLC</td>\n      <td>1018444</td>\n      <td>PRICEWATERHOUSECOOPERS LLP                              /TA</td>\n    </tr>\n    <tr>\n      <th>485536</th>\n      <td>485537</td>\n      <td>PWC HOLDING CORP</td>\n      <td>1456450</td>\n      <td>PRICEWATERHOUSECOOPERS LLP                              /TA</td>\n    </tr>\n    <tr>\n      <th>662585</th>\n      <td>662586</td>\n      <td>ZUCKER MICHAEL</td>\n      <td>1629018</td>\n      <td>PRICEWATERHOUSECOOPERS LLP                              /TA</td>\n    </tr>\n    <tr>\n      <th>662604</th>\n      <td>662605</td>\n      <td>ZUCKERMAN MICHAEL</td>\n      <td>1303321</td>\n      <td>PRICEWATERHOUSECOOPERS LLP                              /TA</td>\n    </tr>\n    <tr>\n      <th>662605</th>\n      <td>662606</td>\n      <td>ZUCKERMAN MICHAEL</td>\n      <td>1496366</td>\n      <td>PRICEWATERHOUSECOOPERS LLP                              /TA</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\nWe can remove strings from groups in the same way:\n\n\n\n```python\nstring_grouper = string_grouper.remove_match('PRICEWATERHOUSECOOPERS LLP', 'ZUCKER MICHAEL')\ncompanies['deduplicated_name'] = string_grouper.get_groups()\n\n# Now lets check again:\ncompanies[companies.deduplicated_name.str.contains('PRICEWATERHOUSECOOPERS LLP')]\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Line Number</th>\n      <th>Company Name</th>\n      <th>Company CIK Key</th>\n      <th>deduplicated_name</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>478441</th>\n      <td>478442</td>\n      <td>PRICEWATERHOUSECOOPERS LLP                              /TA</td>\n      <td>1064284</td>\n      <td>PRICEWATERHOUSECOOPERS LLP                              /TA</td>\n    </tr>\n    <tr>\n      <th>478442</th>\n      <td>478443</td>\n      <td>PRICEWATERHOUSECOOPERS LLP</td>\n      <td>1186612</td>\n      <td>PRICEWATERHOUSECOOPERS LLP                              /TA</td>\n    </tr>\n    <tr>\n      <th>478443</th>\n      <td>478444</td>\n      <td>PRICEWATERHOUSECOOPERS SECURITIES LLC</td>\n      <td>1018444</td>\n      <td>PRICEWATERHOUSECOOPERS LLP                              /TA</td>\n    </tr>\n    <tr>\n      <th>485536</th>\n      <td>485537</td>\n      <td>PWC HOLDING CORP</td>\n      <td>1456450</td>\n      <td>PRICEWATERHOUSECOOPERS LLP                              /TA</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Bergvca/string_grouper", "keywords": "", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "string-grouper", "package_url": "https://pypi.org/project/string-grouper/", "platform": "", "project_url": "https://pypi.org/project/string-grouper/", "project_urls": {"Homepage": "https://github.com/Bergvca/string_grouper"}, "release_url": "https://pypi.org/project/string-grouper/0.1.0/", "requires_dist": ["pandas (>=0.25.3)", "scipy", "sklearn", "sparse-dot-topn (>=0.2.6)"], "requires_python": ">3.7", "summary": "String grouper contains functions to do string matching using TF-IDF and the cossine similarity. Based on https://bergvca.github.io/2017/10/14/super-fast-string-matching.html", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>string_grouper</h1>\n<p><em>string_grouper</em> is a library that makes finding groups of similar strings within a single or within multiple lists of strings easy. <em>string_grouper</em> uses <strong>tf-idf</strong> to calculate <strong>cosine similarities</strong> within a single list or between two lists of strings. The full process is described in the blog <a href=\"https://bergvca.github.io/2017/10/14/super-fast-string-matching.html\" rel=\"nofollow\">Super Fast String Matching in Python</a>.</p>\n<p>The library contains 3 high level functions that can be used directly, and 1 class that allows for a more iterative approach. The three functions are:</p>\n<ul>\n<li>\n<p><strong>match_strings</strong>(<strong>master</strong>: pd.Series, <strong>duplicates</strong>: Optional[pd.Series] = None, **kwargs) -&gt; pd.DataFrame:\nReturns all highly similar strings. If only 'master' is given, it will return highly similar strings within master.\nThis can be seen as an self-join. If both master and duplicates is given, it will return highly similar strings\nbetween master and duplicates. This can be seen as an inner-join.</p>\n</li>\n<li>\n<p><strong>match_most_similar</strong>(<strong>master</strong>: pd.Series, <strong>duplicates</strong>: pd.Series, **kwargs) -&gt; pd.Series:     Returns a series of strings of the same length as <em>'duplicates'</em> where for each string in duplicates the most similar\nstring in <strong>'master'</strong> is returned. If there are no similar strings in master for a given string in duplicates\n(there is no potential match where the cosine similarity is above the threshold (default: 0.8))\nthe original string in duplicates is returned.</p>\n<p>For example the input series <code>[foooo, bar, baz]</code> (master) and <code>[foooob, bar, new]</code> will return:\n<code>[foooo, bar, new]</code></p>\n</li>\n<li>\n<p><strong>group_similar_strings</strong>(<strong>strings_to_group</strong>: pandas.Series, **kwargs) -&gt; pandas.Series: Takes a single series of strings and groups these together by picking a single string in each group of similar strings, and return this as output.</p>\n<p>For example the input series: <code>[foooo, foooob, bar]</code> will return <code>[foooo, foooo, bar]</code>. Here <code>foooo</code> and <code>foooob</code> are grouped together into group <code>foooo</code> because they are found to be similar.</p>\n</li>\n</ul>\n<p>All functions are build using a class <strong>StringGrouper</strong>. This class can be used directly as well to allow for a more an more iterative approach where matches can be added or removed if needed.</p>\n<h3>kwargs</h3>\n<p>All keyword arguments not mentioned in the function definition are used to update the default settings. The following optional arguments can be used:</p>\n<ul>\n<li><em><strong>ngram_size</strong></em>: The amount of characters in each n-gram. Optional. Default is <code>3</code></li>\n<li><em><strong>regex</strong></em>: The regex string used to cleanup the input string. Optional. Default is <code>[,-./]|\\s</code></li>\n<li><em><strong>max_n_matches</strong></em>: The maximum number of matches allowed per string. Default is <code>20</code>.</li>\n<li><em><strong>min_similarity</strong></em>: The minium cossine similarity for two strings to be considered a match.\nDefaults to <code>0.8</code></li>\n<li><em><strong>number_of_processes</strong></em>: The number of processes used by the cosine similarity calculation. Defaults to\n<code>1 - number of cores on a machine.</code></li>\n</ul>\n<h2>Installing</h2>\n<p>todo</p>\n<h2>Examples</h2>\n<p>In this section we will cover a few use cases for which string_grouper may be used. We will use the same dataset of company names as used in: <a href=\"https://bergvca.github.io/2017/10/14/super-fast-string-matching.html\" rel=\"nofollow\">Super Fast String Matching in Python</a>.</p>\n<h3>Find all matches within a single dataset</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">string_grouper</span> <span class=\"kn\">import</span> <span class=\"n\">match_strings</span><span class=\"p\">,</span> <span class=\"n\">match_most_similar</span><span class=\"p\">,</span> <span class=\"n\">group_similar_strings</span><span class=\"p\">,</span> <span class=\"n\">StringGrouper</span>\n</pre>\n<pre><span class=\"n\">company_names</span> <span class=\"o\">=</span> <span class=\"s1\">'/media/chris/data/dev/name_matching/data/sec_edgar_company_info.csv'</span>\n<span class=\"c1\"># We only look at the first 50k as an example</span>\n<span class=\"n\">companies</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"n\">company_names</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">50000</span><span class=\"p\">]</span>\n<span class=\"c1\"># Create all matches:</span>\n<span class=\"n\">matches</span> <span class=\"o\">=</span> <span class=\"n\">match_strings</span><span class=\"p\">(</span><span class=\"n\">companies</span><span class=\"p\">[</span><span class=\"s1\">'Company Name'</span><span class=\"p\">])</span>\n<span class=\"c1\"># Look at only the non-exact matches:</span>\n<span class=\"n\">matches</span><span class=\"p\">[</span><span class=\"n\">matches</span><span class=\"o\">.</span><span class=\"n\">left_side</span> <span class=\"o\">!=</span> <span class=\"n\">matches</span><span class=\"o\">.</span><span class=\"n\">right_side</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">()</span>\n</pre>\n<div>\n&lt;style scoped&gt;\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n<pre><code>.dataframe tbody tr th {\n    vertical-align: top;\n}\n\n.dataframe thead th {\n    text-align: right;\n}\n</code></pre>\n&lt;/style&gt;\n<table>\n  <thead>\n    <tr>\n      <th></th>\n      <th>left_side</th>\n      <th>right_side</th>\n      <th>similarity</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>15</th>\n      <td>0210, LLC</td>\n      <td>90210 LLC</td>\n      <td>0.870291</td>\n    </tr>\n    <tr>\n      <th>167</th>\n      <td>1 800 MUTUALS ADVISOR SERIES</td>\n      <td>1 800 MUTUALS ADVISORS SERIES</td>\n      <td>0.931616</td>\n    </tr>\n    <tr>\n      <th>169</th>\n      <td>1 800 MUTUALS ADVISORS SERIES</td>\n      <td>1 800 MUTUALS ADVISOR SERIES</td>\n      <td>0.931616</td>\n    </tr>\n    <tr>\n      <th>171</th>\n      <td>1 800 RADIATOR FRANCHISE INC</td>\n      <td>1-800-RADIATOR FRANCHISE INC.</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>178</th>\n      <td>1 FINANCIAL MARKETPLACE SECURITIES LLC        ...</td>\n      <td>1 FINANCIAL MARKETPLACE SECURITIES, LLC</td>\n      <td>0.949364</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n<h3>Find all matches in between two datasets.</h3>\n<p>The match_string function allows to find similar items between two datasets as well. This can be seen as an inner join between two datasets:</p>\n<pre><span class=\"c1\"># Create a small set of artifical company names</span>\n<span class=\"n\">duplicates</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"s1\">'S MEDIA GROUP'</span><span class=\"p\">,</span> <span class=\"s1\">'012 SMILE.COMMUNICATIONS'</span><span class=\"p\">,</span> <span class=\"s1\">'foo bar'</span><span class=\"p\">,</span> <span class=\"s1\">'B4UTRADE COM CORP'</span><span class=\"p\">])</span>\n<span class=\"c1\"># Create all matches:</span>\n<span class=\"n\">matches</span> <span class=\"o\">=</span> <span class=\"n\">match_strings</span><span class=\"p\">(</span><span class=\"n\">companies</span><span class=\"p\">[</span><span class=\"s1\">'Company Name'</span><span class=\"p\">],</span> <span class=\"n\">duplicates</span><span class=\"p\">)</span>\n<span class=\"n\">matches</span>\n</pre>\n<div>\n&lt;style scoped&gt;\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n<pre><code>.dataframe tbody tr th {\n    vertical-align: top;\n}\n\n.dataframe thead th {\n    text-align: right;\n}\n</code></pre>\n&lt;/style&gt;\n<table>\n  <thead>\n    <tr>\n      <th></th>\n      <th>left_side</th>\n      <th>right_side</th>\n      <th>similarity</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>012 SMILE.COMMUNICATIONS LTD</td>\n      <td>012 SMILE.COMMUNICATIONS</td>\n      <td>0.944092</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>B.A.S. MEDIA GROUP</td>\n      <td>S MEDIA GROUP</td>\n      <td>0.854383</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>B4UTRADE COM CORP</td>\n      <td>B4UTRADE COM CORP</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>B4UTRADE COM INC</td>\n      <td>B4UTRADE COM CORP</td>\n      <td>0.810217</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>B4UTRADE CORP</td>\n      <td>B4UTRADE COM CORP</td>\n      <td>0.878276</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n<p>Out ouf the 4 company names in <code>duplicates</code>, 3 companies are found in the original company dataset. One company is found 3 times.</p>\n<h3>For a second dataset, find only the most similar match</h3>\n<p>In the example above, it's possible that multiple matches are found for a single string. Sometimes we just want a string to match with a single most similar string. If there are no similar strings found, the original string should be returned:</p>\n<pre><span class=\"c1\"># Create a small set of artifical company names</span>\n<span class=\"n\">new_companies</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"s1\">'S MEDIA GROUP'</span><span class=\"p\">,</span> <span class=\"s1\">'012 SMILE.COMMUNICATIONS'</span><span class=\"p\">,</span> <span class=\"s1\">'foo bar'</span><span class=\"p\">,</span> <span class=\"s1\">'B4UTRADE COM CORP'</span><span class=\"p\">])</span>\n<span class=\"c1\"># Create all matches:</span>\n<span class=\"n\">matches</span> <span class=\"o\">=</span> <span class=\"n\">match_most_similar</span><span class=\"p\">(</span><span class=\"n\">companies</span><span class=\"p\">[</span><span class=\"s1\">'Company Name'</span><span class=\"p\">],</span> <span class=\"n\">new_companies</span><span class=\"p\">)</span>\n<span class=\"c1\"># Display the results:</span>\n<span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">'new_companies'</span><span class=\"p\">:</span> <span class=\"n\">new_companies</span><span class=\"p\">,</span> <span class=\"s1\">'duplicates'</span><span class=\"p\">:</span> <span class=\"n\">matches</span><span class=\"p\">})</span>\n</pre>\n<div>\n&lt;style scoped&gt;\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n<pre><code>.dataframe tbody tr th {\n    vertical-align: top;\n}\n\n.dataframe thead th {\n    text-align: right;\n}\n</code></pre>\n&lt;/style&gt;\n<table>\n  <thead>\n    <tr>\n      <th></th>\n      <th>new_companies</th>\n      <th>duplicates</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>S MEDIA GROUP</td>\n      <td>B.A.S. MEDIA GROUP</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>012 SMILE.COMMUNICATIONS</td>\n      <td>012 SMILE.COMMUNICATIONS LTD</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>foo bar</td>\n      <td>foo bar</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>B4UTRADE COM CORP</td>\n      <td>B4UTRADE COM CORP</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n<h3>Deduplicate a single dataset and show items with most duplicates</h3>\n<p>The <code>group_similar_strings</code> functions groups strings that are similar using a single linkage clustering algorithm. That is, if item A and item B are similar, and item B and item C are similar but the similarity between A and C is below the threshold, all three items are grouped together.</p>\n<pre><span class=\"c1\"># Add the grouped strings</span>\n<span class=\"n\">companies</span><span class=\"p\">[</span><span class=\"s1\">'deduplicated_name'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">group_similar_strings</span><span class=\"p\">(</span><span class=\"n\">companies</span><span class=\"p\">[</span><span class=\"s1\">'Company Name'</span><span class=\"p\">])</span>\n<span class=\"c1\"># Show items with most duplicates</span>\n<span class=\"n\">companies</span><span class=\"o\">.</span><span class=\"n\">groupby</span><span class=\"p\">(</span><span class=\"s1\">'deduplicated_name'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">sort_values</span><span class=\"p\">(</span><span class=\"s1\">'Line Number'</span><span class=\"p\">,</span> <span class=\"n\">ascending</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)[</span><span class=\"s1\">'Line Number'</span><span class=\"p\">]</span>\n</pre>\n<pre><code>deduplicated_name\nADVISORS DISCIPLINED TRUST 1100                        188\nACE SECURITIES CORP HOME EQUITY LOAN TRUST 2005-HE4     32\nAMERCREDIT AUTOMOBILE RECEIVABLES TRUST 2010-1          28\nADVENT LATIN AMERICAN PRIVATE EQUITY FUND II-A CV       25\nALLSTATE LIFE GLOBAL FUNDING TRUST 2004-1               24\nADVENT INTERNATIONAL GPE VII LIMITED PARTNERSHIP        24\n7ADVISORS DISCIPLINED TRUST 1197                        23\nAMERICREDIT AUTOMOBILE RECEIVABLES TRUST  2002 - D      23\nALLY AUTO RECEIVABLES TRUST 2010-1                      23\nANDERSON DAVID  A                                       23\nName: Line Number, dtype: int64\n</code></pre>\n<h2>The StringGrouper class</h2>\n<p>The three functions mentioned above all create a <code>StringGrouper</code> object behind the scenes and call different functions on it. The <code>StringGrouper</code> class keeps track of all tuples of similar strings and creates the groups out of these. Since matches are often not perfect, a common workflow is to:</p>\n<ol>\n<li>Create matches</li>\n<li>Manually inspect the results</li>\n<li>Add and remove matches were neccesary</li>\n<li>Create groups of similar Strings</li>\n</ol>\n<p>The <code>StringGrouper</code> allows for this without having to re-calculate the cosine similarity matrix. See below for an example.</p>\n<pre><span class=\"n\">company_names</span> <span class=\"o\">=</span> <span class=\"s1\">'/media/chris/data/dev/name_matching/data/sec_edgar_company_info.csv'</span>\n<span class=\"c1\"># We only look at the first 50k as an example</span>\n<span class=\"n\">companies</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"n\">company_names</span><span class=\"p\">)</span>\n</pre>\n<ol>\n<li>Create matches</li>\n</ol>\n<pre><span class=\"c1\"># Create a new StringGrouper</span>\n<span class=\"n\">string_grouper</span> <span class=\"o\">=</span> <span class=\"n\">StringGrouper</span><span class=\"p\">(</span><span class=\"n\">companies</span><span class=\"p\">[</span><span class=\"s1\">'Company Name'</span><span class=\"p\">])</span>\n<span class=\"c1\"># Check if the ngram function does what we expect:</span>\n<span class=\"n\">string_grouper</span><span class=\"o\">.</span><span class=\"n\">n_grams</span><span class=\"p\">(</span><span class=\"s1\">'McDonalds'</span><span class=\"p\">)</span>\n</pre>\n<pre><code>['McD', 'cDo', 'Don', 'ona', 'nal', 'ald', 'lds']\n</code></pre>\n<pre><span class=\"c1\"># Now fit the StringGrouper - this will take a while since we are calculating cosine similarities on 600k strings</span>\n<span class=\"n\">string_grouper</span> <span class=\"o\">=</span> <span class=\"n\">string_grouper</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">()</span>\n</pre>\n<pre><span class=\"c1\"># Add the grouped strings</span>\n<span class=\"n\">companies</span><span class=\"p\">[</span><span class=\"s1\">'deduplicated_name'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">string_grouper</span><span class=\"o\">.</span><span class=\"n\">get_groups</span><span class=\"p\">()</span>\n</pre>\n<pre><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">set_option</span><span class=\"p\">(</span><span class=\"s1\">'display.max_colwidth'</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre>\n<p>Suppose we know that PWC HOLDING CORP and PRICEWATERHOUSECOOPERS LLP are the same company. The StringGrouper will not match these, since they are not similar enough.</p>\n<pre><span class=\"n\">companies</span><span class=\"p\">[</span><span class=\"n\">companies</span><span class=\"o\">.</span><span class=\"n\">deduplicated_name</span><span class=\"o\">.</span><span class=\"n\">str</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"s1\">'PRICEWATERHOUSECOOPERS LLP'</span><span class=\"p\">)]</span>\n</pre>\n<div>\n&lt;style scoped&gt;\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n<pre><code>.dataframe tbody tr th {\n    vertical-align: top;\n}\n\n.dataframe thead th {\n    text-align: right;\n}\n</code></pre>\n&lt;/style&gt;\n<table>\n  <thead>\n    <tr>\n      <th></th>\n      <th>Line Number</th>\n      <th>Company Name</th>\n      <th>Company CIK Key</th>\n      <th>deduplicated_name</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>478441</th>\n      <td>478442</td>\n      <td>PRICEWATERHOUSECOOPERS LLP                              /TA</td>\n      <td>1064284</td>\n      <td>PRICEWATERHOUSECOOPERS LLP                              /TA</td>\n    </tr>\n    <tr>\n      <th>478442</th>\n      <td>478443</td>\n      <td>PRICEWATERHOUSECOOPERS LLP</td>\n      <td>1186612</td>\n      <td>PRICEWATERHOUSECOOPERS LLP                              /TA</td>\n    </tr>\n    <tr>\n      <th>478443</th>\n      <td>478444</td>\n      <td>PRICEWATERHOUSECOOPERS SECURITIES LLC</td>\n      <td>1018444</td>\n      <td>PRICEWATERHOUSECOOPERS LLP                              /TA</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n<pre><span class=\"n\">companies</span><span class=\"p\">[</span><span class=\"n\">companies</span><span class=\"o\">.</span><span class=\"n\">deduplicated_name</span><span class=\"o\">.</span><span class=\"n\">str</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"s1\">'PWC'</span><span class=\"p\">)]</span>\n</pre>\n<div>\n&lt;style scoped&gt;\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n<pre><code>.dataframe tbody tr th {\n    vertical-align: top;\n}\n\n.dataframe thead th {\n    text-align: right;\n}\n</code></pre>\n&lt;/style&gt;\n<table>\n  <thead>\n    <tr>\n      <th></th>\n      <th>Line Number</th>\n      <th>Company Name</th>\n      <th>Company CIK Key</th>\n      <th>deduplicated_name</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>485535</th>\n      <td>485536</td>\n      <td>PWC CAPITAL INC.</td>\n      <td>1690640</td>\n      <td>PWC CAPITAL INC.</td>\n    </tr>\n    <tr>\n      <th>485536</th>\n      <td>485537</td>\n      <td>PWC HOLDING CORP</td>\n      <td>1456450</td>\n      <td>PWC HOLDING CORP</td>\n    </tr>\n    <tr>\n      <th>485537</th>\n      <td>485538</td>\n      <td>PWC INVESTORS, LLC</td>\n      <td>1480311</td>\n      <td>PWC INVESTORS, LLC</td>\n    </tr>\n    <tr>\n      <th>485538</th>\n      <td>485539</td>\n      <td>PWC REAL ESTATE VALUE FUND I LLC</td>\n      <td>1668928</td>\n      <td>PWC REAL ESTATE VALUE FUND I LLC</td>\n    </tr>\n    <tr>\n      <th>485539</th>\n      <td>485540</td>\n      <td>PWC SECURITIES CORP                                     /BD</td>\n      <td>1023989</td>\n      <td>PWC SECURITIES CORP                                     /BD</td>\n    </tr>\n    <tr>\n      <th>485540</th>\n      <td>485541</td>\n      <td>PWC SECURITIES CORPORATION</td>\n      <td>1023989</td>\n      <td>PWC SECURITIES CORPORATION</td>\n    </tr>\n    <tr>\n      <th>485541</th>\n      <td>485542</td>\n      <td>PWCC LTD</td>\n      <td>1172241</td>\n      <td>PWCC LTD</td>\n    </tr>\n    <tr>\n      <th>485542</th>\n      <td>485543</td>\n      <td>PWCG BROKERAGE, INC.</td>\n      <td>67301</td>\n      <td>PWCG BROKERAGE, INC.</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n<p>We can add these with the add function:</p>\n<pre><span class=\"n\">string_grouper</span> <span class=\"o\">=</span> <span class=\"n\">string_grouper</span><span class=\"o\">.</span><span class=\"n\">add_match</span><span class=\"p\">(</span><span class=\"s1\">'PRICEWATERHOUSECOOPERS LLP'</span><span class=\"p\">,</span> <span class=\"s1\">'PWC HOLDING CORP'</span><span class=\"p\">)</span>\n<span class=\"n\">companies</span><span class=\"p\">[</span><span class=\"s1\">'deduplicated_name'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">string_grouper</span><span class=\"o\">.</span><span class=\"n\">get_groups</span><span class=\"p\">()</span>\n<span class=\"c1\"># Now lets check again:</span>\n\n<span class=\"n\">companies</span><span class=\"p\">[</span><span class=\"n\">companies</span><span class=\"o\">.</span><span class=\"n\">deduplicated_name</span><span class=\"o\">.</span><span class=\"n\">str</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"s1\">'PRICEWATERHOUSECOOPERS LLP'</span><span class=\"p\">)]</span>\n</pre>\n<div>\n&lt;style scoped&gt;\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n<pre><code>.dataframe tbody tr th {\n    vertical-align: top;\n}\n\n.dataframe thead th {\n    text-align: right;\n}\n</code></pre>\n&lt;/style&gt;\n<table>\n  <thead>\n    <tr>\n      <th></th>\n      <th>Line Number</th>\n      <th>Company Name</th>\n      <th>Company CIK Key</th>\n      <th>deduplicated_name</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>478441</th>\n      <td>478442</td>\n      <td>PRICEWATERHOUSECOOPERS LLP                              /TA</td>\n      <td>1064284</td>\n      <td>PRICEWATERHOUSECOOPERS LLP                              /TA</td>\n    </tr>\n    <tr>\n      <th>478442</th>\n      <td>478443</td>\n      <td>PRICEWATERHOUSECOOPERS LLP</td>\n      <td>1186612</td>\n      <td>PRICEWATERHOUSECOOPERS LLP                              /TA</td>\n    </tr>\n    <tr>\n      <th>478443</th>\n      <td>478444</td>\n      <td>PRICEWATERHOUSECOOPERS SECURITIES LLC</td>\n      <td>1018444</td>\n      <td>PRICEWATERHOUSECOOPERS LLP                              /TA</td>\n    </tr>\n    <tr>\n      <th>485536</th>\n      <td>485537</td>\n      <td>PWC HOLDING CORP</td>\n      <td>1456450</td>\n      <td>PRICEWATERHOUSECOOPERS LLP                              /TA</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n<p>This can also be used to merge two groups:</p>\n<pre><span class=\"n\">string_grouper</span> <span class=\"o\">=</span> <span class=\"n\">string_grouper</span><span class=\"o\">.</span><span class=\"n\">add_match</span><span class=\"p\">(</span><span class=\"s1\">'PRICEWATERHOUSECOOPERS LLP'</span><span class=\"p\">,</span> <span class=\"s1\">'ZUCKER MICHAEL'</span><span class=\"p\">)</span>\n<span class=\"n\">companies</span><span class=\"p\">[</span><span class=\"s1\">'deduplicated_name'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">string_grouper</span><span class=\"o\">.</span><span class=\"n\">get_groups</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Now lets check again:</span>\n<span class=\"n\">companies</span><span class=\"p\">[</span><span class=\"n\">companies</span><span class=\"o\">.</span><span class=\"n\">deduplicated_name</span><span class=\"o\">.</span><span class=\"n\">str</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"s1\">'PRICEWATERHOUSECOOPERS LLP'</span><span class=\"p\">)]</span>\n</pre>\n<div>\n&lt;style scoped&gt;\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n<pre><code>.dataframe tbody tr th {\n    vertical-align: top;\n}\n\n.dataframe thead th {\n    text-align: right;\n}\n</code></pre>\n&lt;/style&gt;\n<table>\n  <thead>\n    <tr>\n      <th></th>\n      <th>Line Number</th>\n      <th>Company Name</th>\n      <th>Company CIK Key</th>\n      <th>deduplicated_name</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>478441</th>\n      <td>478442</td>\n      <td>PRICEWATERHOUSECOOPERS LLP                              /TA</td>\n      <td>1064284</td>\n      <td>PRICEWATERHOUSECOOPERS LLP                              /TA</td>\n    </tr>\n    <tr>\n      <th>478442</th>\n      <td>478443</td>\n      <td>PRICEWATERHOUSECOOPERS LLP</td>\n      <td>1186612</td>\n      <td>PRICEWATERHOUSECOOPERS LLP                              /TA</td>\n    </tr>\n    <tr>\n      <th>478443</th>\n      <td>478444</td>\n      <td>PRICEWATERHOUSECOOPERS SECURITIES LLC</td>\n      <td>1018444</td>\n      <td>PRICEWATERHOUSECOOPERS LLP                              /TA</td>\n    </tr>\n    <tr>\n      <th>485536</th>\n      <td>485537</td>\n      <td>PWC HOLDING CORP</td>\n      <td>1456450</td>\n      <td>PRICEWATERHOUSECOOPERS LLP                              /TA</td>\n    </tr>\n    <tr>\n      <th>662585</th>\n      <td>662586</td>\n      <td>ZUCKER MICHAEL</td>\n      <td>1629018</td>\n      <td>PRICEWATERHOUSECOOPERS LLP                              /TA</td>\n    </tr>\n    <tr>\n      <th>662604</th>\n      <td>662605</td>\n      <td>ZUCKERMAN MICHAEL</td>\n      <td>1303321</td>\n      <td>PRICEWATERHOUSECOOPERS LLP                              /TA</td>\n    </tr>\n    <tr>\n      <th>662605</th>\n      <td>662606</td>\n      <td>ZUCKERMAN MICHAEL</td>\n      <td>1496366</td>\n      <td>PRICEWATERHOUSECOOPERS LLP                              /TA</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n<p>We can remove strings from groups in the same way:</p>\n<pre><span class=\"n\">string_grouper</span> <span class=\"o\">=</span> <span class=\"n\">string_grouper</span><span class=\"o\">.</span><span class=\"n\">remove_match</span><span class=\"p\">(</span><span class=\"s1\">'PRICEWATERHOUSECOOPERS LLP'</span><span class=\"p\">,</span> <span class=\"s1\">'ZUCKER MICHAEL'</span><span class=\"p\">)</span>\n<span class=\"n\">companies</span><span class=\"p\">[</span><span class=\"s1\">'deduplicated_name'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">string_grouper</span><span class=\"o\">.</span><span class=\"n\">get_groups</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Now lets check again:</span>\n<span class=\"n\">companies</span><span class=\"p\">[</span><span class=\"n\">companies</span><span class=\"o\">.</span><span class=\"n\">deduplicated_name</span><span class=\"o\">.</span><span class=\"n\">str</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"s1\">'PRICEWATERHOUSECOOPERS LLP'</span><span class=\"p\">)]</span>\n</pre>\n<div>\n&lt;style scoped&gt;\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n<pre><code>.dataframe tbody tr th {\n    vertical-align: top;\n}\n\n.dataframe thead th {\n    text-align: right;\n}\n</code></pre>\n&lt;/style&gt;\n<table>\n  <thead>\n    <tr>\n      <th></th>\n      <th>Line Number</th>\n      <th>Company Name</th>\n      <th>Company CIK Key</th>\n      <th>deduplicated_name</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>478441</th>\n      <td>478442</td>\n      <td>PRICEWATERHOUSECOOPERS LLP                              /TA</td>\n      <td>1064284</td>\n      <td>PRICEWATERHOUSECOOPERS LLP                              /TA</td>\n    </tr>\n    <tr>\n      <th>478442</th>\n      <td>478443</td>\n      <td>PRICEWATERHOUSECOOPERS LLP</td>\n      <td>1186612</td>\n      <td>PRICEWATERHOUSECOOPERS LLP                              /TA</td>\n    </tr>\n    <tr>\n      <th>478443</th>\n      <td>478444</td>\n      <td>PRICEWATERHOUSECOOPERS SECURITIES LLC</td>\n      <td>1018444</td>\n      <td>PRICEWATERHOUSECOOPERS LLP                              /TA</td>\n    </tr>\n    <tr>\n      <th>485536</th>\n      <td>485537</td>\n      <td>PWC HOLDING CORP</td>\n      <td>1456450</td>\n      <td>PRICEWATERHOUSECOOPERS LLP                              /TA</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n          </div>"}, "last_serial": 6386640, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "8744e9e7f92f907153b94b6693ddaa61", "sha256": "619b506d688f12b985e69bd8054164676984a2382427f4af5da0a92b2bf5ab5c"}, "downloads": -1, "filename": "string_grouper-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "8744e9e7f92f907153b94b6693ddaa61", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.7", "size": 11282, "upload_time": "2020-01-02T16:02:04", "upload_time_iso_8601": "2020-01-02T16:02:04.408137Z", "url": "https://files.pythonhosted.org/packages/49/2e/c5a209d0a6ede7bcaea26a0d7849009fd0dfa8d89e5b756680d3ddea8288/string_grouper-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6a15129c492648b52eafd63b34cc625b", "sha256": "452d398f0dd7b6f88f171dda7a07d71692d61d65b8a0e55155bcfdd42fc5a962"}, "downloads": -1, "filename": "string_grouper-0.1.0.tar.gz", "has_sig": false, "md5_digest": "6a15129c492648b52eafd63b34cc625b", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.7", "size": 14192, "upload_time": "2020-01-02T16:02:07", "upload_time_iso_8601": "2020-01-02T16:02:07.067875Z", "url": "https://files.pythonhosted.org/packages/84/8f/18a7a12b57ac84c979f081dc3351b254e1c2806e2d6c6e4f751e02e0b44d/string_grouper-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8744e9e7f92f907153b94b6693ddaa61", "sha256": "619b506d688f12b985e69bd8054164676984a2382427f4af5da0a92b2bf5ab5c"}, "downloads": -1, "filename": "string_grouper-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "8744e9e7f92f907153b94b6693ddaa61", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.7", "size": 11282, "upload_time": "2020-01-02T16:02:04", "upload_time_iso_8601": "2020-01-02T16:02:04.408137Z", "url": "https://files.pythonhosted.org/packages/49/2e/c5a209d0a6ede7bcaea26a0d7849009fd0dfa8d89e5b756680d3ddea8288/string_grouper-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6a15129c492648b52eafd63b34cc625b", "sha256": "452d398f0dd7b6f88f171dda7a07d71692d61d65b8a0e55155bcfdd42fc5a962"}, "downloads": -1, "filename": "string_grouper-0.1.0.tar.gz", "has_sig": false, "md5_digest": "6a15129c492648b52eafd63b34cc625b", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.7", "size": 14192, "upload_time": "2020-01-02T16:02:07", "upload_time_iso_8601": "2020-01-02T16:02:07.067875Z", "url": "https://files.pythonhosted.org/packages/84/8f/18a7a12b57ac84c979f081dc3351b254e1c2806e2d6c6e4f751e02e0b44d/string_grouper-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:01:11 2020"}