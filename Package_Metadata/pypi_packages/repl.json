{"info": {"author": "Marc Brinkmann", "author_email": "git@marcbrinkmann.de", "bugtrack_url": null, "classifiers": ["Programming Language :: Python :: 2", "Programming Language :: Python :: 3"], "description": "repl\n====\n\n.. image:: repl-demo.gif\n\nRuns a command in a `REPL <https://en.wikipedia.org/wiki/Read-eval-\nprint_loop>`_. It comes in very handy when dealing with applications that do\nnot ship with a REPL, but could benefit greatly from one (such as git_).\n\nTab completion is available and completes filenames.\n\nReal productivity\n-----------------\n\nSet an alias in your shell's start-up file:\n\n    alias rg=\"repl git\"\n\nInstead of typing ``git ...``, type ``rg`` once. You'll never go back.\n\n\nInstallation\n------------\n\n``repl`` must be installed from PyPI_\n\n.. _git: https://git-scm.com\n.. _PyPI: http://pypi.python.org.\n\n\nDetailed usage\n--------------\n\nRunning ``repl COMMAND ARG1 ARG2...`` will start the loop. Any line entered\nwill now be appended to ``COMMAND ARG1 ARG2...`` and executed. The result is\ndisplayed and ``repl`` will wait for the next line to be entered.\n\nTry ``repl --help`` for a list of options.\n\n\nExiting\n~~~~~~~\n\nTo quit the REPL, send an ``EOF`` symbol (usually done with ``Ctrl-d`` on *nix\nsystems, ``Ctrl-z`` on Windows).\n\n\nCommand substitution\n~~~~~~~~~~~~~~~~~~~~\n\nIf you run into a command that needs arguments passed somewhere in between\nother arguments by passing ``{}`` as the argument. It will be replaced with\n``\u2026`` in the prompt.\n\n.. code-block:: sh\n\n    $ repl echo Hello, {} - Nice to meet you!\n    echo Hello, \u2026 - Nice to meet you!>> Alice\n    Hello, Alice - Nice to meet you!\n    echo Hello, \u2026 - Nice to meet you!>> Bob\n    Hello, Bob - Nice to meet you!\n    echo Hello, \u2026 - Nice to meet you!>>\n\n\nCredits\n-------\n\nIdea stolen from https://github.com/defunkt/repl, which unfortunately is\nunmaintained. Originally rewritten because I had issues with stdin/stdout; now\nit boasts a few extra features (and does not require ruby)", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mbr/repl", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "repl", "package_url": "https://pypi.org/project/repl/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/repl/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/mbr/repl"}, "release_url": "https://pypi.org/project/repl/1.0/", "requires_dist": null, "requires_python": null, "summary": "Run command as REPL-environment (useful for git!).", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            repl<br>====<br><br>.. image:: repl-demo.gif<br><br>Runs a command in a `REPL &lt;https://en.wikipedia.org/wiki/Read-eval-<br>print_loop&gt;`_. It comes in very handy when dealing with applications that do<br>not ship with a REPL, but could benefit greatly from one (such as git_).<br><br>Tab completion is available and completes filenames.<br><br>Real productivity<br>-----------------<br><br>Set an alias in your shell's start-up file:<br><br>    alias rg=\"repl git\"<br><br>Instead of typing ``git ...``, type ``rg`` once. You'll never go back.<br><br><br>Installation<br>------------<br><br>``repl`` must be installed from PyPI_<br><br>.. _git: https://git-scm.com<br>.. _PyPI: http://pypi.python.org.<br><br><br>Detailed usage<br>--------------<br><br>Running ``repl COMMAND ARG1 ARG2...`` will start the loop. Any line entered<br>will now be appended to ``COMMAND ARG1 ARG2...`` and executed. The result is<br>displayed and ``repl`` will wait for the next line to be entered.<br><br>Try ``repl --help`` for a list of options.<br><br><br>Exiting<br>~~~~~~~<br><br>To quit the REPL, send an ``EOF`` symbol (usually done with ``Ctrl-d`` on *nix<br>systems, ``Ctrl-z`` on Windows).<br><br><br>Command substitution<br>~~~~~~~~~~~~~~~~~~~~<br><br>If you run into a command that needs arguments passed somewhere in between<br>other arguments by passing ``{}`` as the argument. It will be replaced with<br>``\u2026`` in the prompt.<br><br>.. code-block:: sh<br><br>    $ repl echo Hello, {} - Nice to meet you!<br>    echo Hello, \u2026 - Nice to meet you!&gt;&gt; Alice<br>    Hello, Alice - Nice to meet you!<br>    echo Hello, \u2026 - Nice to meet you!&gt;&gt; Bob<br>    Hello, Bob - Nice to meet you!<br>    echo Hello, \u2026 - Nice to meet you!&gt;&gt;<br><br><br>Credits<br>-------<br><br>Idea stolen from https://github.com/defunkt/repl, which unfortunately is<br>unmaintained. Originally rewritten because I had issues with stdin/stdout; now<br>it boasts a few extra features (and does not require ruby)\n          </div>"}, "last_serial": 1708798, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "f232b69975e07f7e3a3025f9c63f466a", "sha256": "1fb1b30605383b8b868fde14faf92dc7f654d9c2612fa02e0102dfa55104bc11"}, "downloads": -1, "filename": "repl-1.0.tar.gz", "has_sig": true, "md5_digest": "f232b69975e07f7e3a3025f9c63f466a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5112, "upload_time": "2015-09-04T22:54:15", "upload_time_iso_8601": "2015-09-04T22:54:15.258505Z", "url": "https://files.pythonhosted.org/packages/88/98/05e853fed4d6876998bef3b7ede21c008cab7ecfe247e789e7b00c3c4664/repl-1.0.tar.gz", "yanked": false}], "1.0.dev1": []}, "urls": [{"comment_text": "", "digests": {"md5": "f232b69975e07f7e3a3025f9c63f466a", "sha256": "1fb1b30605383b8b868fde14faf92dc7f654d9c2612fa02e0102dfa55104bc11"}, "downloads": -1, "filename": "repl-1.0.tar.gz", "has_sig": true, "md5_digest": "f232b69975e07f7e3a3025f9c63f466a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5112, "upload_time": "2015-09-04T22:54:15", "upload_time_iso_8601": "2015-09-04T22:54:15.258505Z", "url": "https://files.pythonhosted.org/packages/88/98/05e853fed4d6876998bef3b7ede21c008cab7ecfe247e789e7b00c3c4664/repl-1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:04:40 2020"}