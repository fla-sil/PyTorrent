{"info": {"author": "Carlos Palol", "author_email": "carlos.palol@awarepixel.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.3", "Topic :: Software Development :: Libraries"], "description": "\n\n==================\nDjango Money Field\n==================\n\n\nDjango model field for monetary amounts.\n\n\nInstallation\n============\n\n::\n\n    pip install django-moneyfield\n\nMoneyfield requires:\n\n+ Python ==3.3\n+ Django ==1.5 (still working on 1.6 compatibility)\n+ `Money <https://pypi.python.org/pypi/money>`_\n+ `Babel <https://pypi.python.org/pypi/Babel>`_ (if you need currency formatting)\n\nBasic usage\n===========\n\n.. code:: python\n    \n    from django.db import Models\n    from moneyfield import MoneyField\n    \n    class Book(models.Model):\n        name = models.CharField(blank=True, max_length=100)\n        price = MoneyField(decimal_places=2, max_digits=8)\n\nThe field ``price`` will be created in the database as two columns: ``price_amount``, and ``price_currency``. You may use any name ``<fieldname>``, resulting in columns ``<fieldname>_amount`` and ``<fieldname>_currency``.\n\n.. code:: sql\n\n    CREATE TABLE \"myapp_book\" (\n        \"id\" integer NOT NULL PRIMARY KEY,\n        \"name\" varchar(100) NOT NULL,\n        \"price_amount\" decimal NOT NULL,\n        \"price_currency\" varchar(3) NOT NULL\n    );\n\nThe attribute ``price`` is only a convenience python descriptor that accepts and returns Money objects, and will be available only when working with a model instance.\n\n.. code:: python\n\n    >>> book = Book.objects.get(id=1)\n    >>> book.price\n    USD 19.99\n    >>> book.price = Money(\"9.99\", \"USD\")\n    >>> book.save()\n    >>> book.price\n    USD 9.99\n\nFor any operation using Managers and QuerySets, the amount and the currency must be addressed separately, using ``price_amount`` and ``price_currency`` in this case. This allows for maximum flexibility and unambiguity.\n\n.. code:: python\n\n    new_book = Book.objects.create(\n        name=\"The new book\",\n        price_amount=Decimal(\"29.99\"),\n        price_currency=\"USD\"\n    )\n    \n    books_in_usd = Book.objects.filter(price_currency=\"USD\")\n    \n    cheap_books = Book.objects.filter(price_amount__lt=Decimal('2'))\n    \n    cheap_books_eur = Book.objects.filter(\n        price_amount__lt=Decimal('2'),\n        price_currency=\"EUR\"\n    )\n\n\nDefaults and choices\n--------------------\n\nYou can provide separate defaults for the amount and the currency as Decimal and the three letter currency code string, respectively:\n\n.. code:: python\n    \n    class Book(models.Model):\n        name = models.CharField(blank=True, max_length=100)\n        price = MoneyField(decimal_places=2, max_digits=8, \n                           amount_default=Decimal(\"0\"),\n                           currency_default=\"USD\")\n\n\nor a default Money value:\n\n.. code:: python\n    \n    class Book(models.Model):\n        name = models.CharField(blank=True, max_length=100)\n        price = MoneyField(decimal_places=2, max_digits=8, \n                           default=Money(\"0\", \"USD\"))\n\nYou can also set currency choices with ``currency_choices`` and a currency default with ``currency_default``:\n\n.. code:: python\n    \n    class Book(models.Model):\n        CURRENCY_CHOICES = (\n            ('EUR', 'EUR'),\n            ('USD', 'USD')\n        )\n        CURRENCY_DEFAULT = 'EUR'\n        \n        name = models.CharField(blank=True, max_length=100)\n        price = MoneyField(decimal_places=2, max_digits=8, \n                           currency_choices=CURRENCY_CHOICES,\n                           currency_default=CURRENCY_DEFAULT)\n\n\nFixed currency\n--------------\n\nIf you don't need to handle different currencies but want to benefit from using the Money class instead of just Decimals, you may want to set a fixed currency for your monetary field:\n\n.. code:: python\n\n    class Book(models.Model):\n        name = models.CharField(blank=True, max_length=100)\n        price = MoneyField(decimal_places=2, max_digits=12, currency='USD')\n\nIn this case, the attribute ``price`` will only accept and return Money objects with currency \"USD\". **The database representation of this field will be** ``price_amount``, **with no currency column**. This is consistent with the multi-currency case, and allows for maximum flexibility while making schema migrations.\n\n\nMoneyField options\n==================\n\nMoneyField.max_digits\n    Same as DecimalField: The maximum number of digits allowed in the number. Note that this number must be greater than or equal to ``decimal_places``.\n\nMoneyField.decimal_places\n    Same as DecimalField: The number of decimal places to store with the number.\n\nMoneyField.currency\n    Fixed currency for this field. This will omit the creation of a ``<name>_currency`` column in the database.\n\nMoneyField.default\n    Default Money value for this field (both amount and currency).\n\nMoneyField.currency_default\n    Default currency value.\n\nMoneyField.amount_default\n    Default amount value.\n\nMoneyField.currency_choices\n    Regular Django choices iterable, e.g.::\n    \n        CURRENCY_CHOICES = (\n            ('EUR', 'Euros'),\n            ('USD', 'US Dollars')\n        )\n\n\nForms\n=====\n\nA base model form class ``MoneyModelForm`` is included to show the monetary fields as just one field in forms, instead of separate amount and currency fields.\n\n.. code:: python\n\n    from django.contrib import admin\n    from moneyfield import MoneyModelForm\n    from myapp.models import Book\n\n    class BookAdmin(admin.ModelAdmin):\n        list_display = ['id', 'name', 'price']\n        form = MoneyModelForm\n    \n    admin.site.register(Book, BookAdmin)\n\n\nUsing ``MoneyModelForm`` is optional. You may also include it in the base classes of your custom model form class.\n\n\n\n.. figure:: https://raw.github.com/carlospalol/django-moneyfield/master/docs/static/img/form-choices.png\n    \n    **Using currency choices**\n\n.. figure:: https://raw.github.com/carlospalol/django-moneyfield/master/docs/static/img/form-fixed.png\n        \n    **Using fixed currency**\n\n.. figure:: https://raw.github.com/carlospalol/django-moneyfield/master/docs/static/img/form-free.png\n    \n    **Using free currency**\n\n\nContributions\n=============\n\nContributions are welcome. You can use the `regular github mechanisms <https://help.github.com/>`_.\n\nTo run the tests, sit on the package root (by setup.py) and run:\n\n::\n\n    python tests/runtests.py\n\n\nLicense\n=======\n\ndjango-moneyfield is released under the **MIT license**, which can be found in the file ``LICENSE``.\n\n\n\n", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/carlospalol/django-moneyfield", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "django-moneyfield", "package_url": "https://pypi.org/project/django-moneyfield/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-moneyfield/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/carlospalol/django-moneyfield"}, "release_url": "https://pypi.org/project/django-moneyfield/0.2.1/", "requires_dist": null, "requires_python": null, "summary": "Django Money Model Field", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Django model field for monetary amounts.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>pip install django-moneyfield\n</pre>\n<p>Moneyfield requires:</p>\n<ul>\n<li>Python ==3.3</li>\n<li>Django ==1.5 (still working on 1.6 compatibility)</li>\n<li><a href=\"https://pypi.python.org/pypi/money\" rel=\"nofollow\">Money</a></li>\n<li><a href=\"https://pypi.python.org/pypi/Babel\" rel=\"nofollow\">Babel</a> (if you need currency formatting)</li>\n</ul>\n</div>\n<div id=\"basic-usage\">\n<h2>Basic usage</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">Models</span>\n<span class=\"kn\">from</span> <span class=\"nn\">moneyfield</span> <span class=\"kn\">import</span> <span class=\"n\">MoneyField</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Book</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">blank</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n    <span class=\"n\">price</span> <span class=\"o\">=</span> <span class=\"n\">MoneyField</span><span class=\"p\">(</span><span class=\"n\">decimal_places</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">max_digits</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">)</span>\n</pre>\n<p>The field <tt>price</tt> will be created in the database as two columns: <tt>price_amount</tt>, and <tt>price_currency</tt>. You may use any name <tt>&lt;fieldname&gt;</tt>, resulting in columns <tt>&lt;fieldname&gt;_amount</tt> and <tt>&lt;fieldname&gt;_currency</tt>.</p>\n<pre><span class=\"k\">CREATE</span> <span class=\"k\">TABLE</span> <span class=\"ss\">\"myapp_book\"</span> <span class=\"p\">(</span>\n    <span class=\"ss\">\"id\"</span> <span class=\"nb\">integer</span> <span class=\"k\">NOT</span> <span class=\"k\">NULL</span> <span class=\"k\">PRIMARY</span> <span class=\"k\">KEY</span><span class=\"p\">,</span>\n    <span class=\"ss\">\"name\"</span> <span class=\"nb\">varchar</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">)</span> <span class=\"k\">NOT</span> <span class=\"k\">NULL</span><span class=\"p\">,</span>\n    <span class=\"ss\">\"price_amount\"</span> <span class=\"nb\">decimal</span> <span class=\"k\">NOT</span> <span class=\"k\">NULL</span><span class=\"p\">,</span>\n    <span class=\"ss\">\"price_currency\"</span> <span class=\"nb\">varchar</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"k\">NOT</span> <span class=\"k\">NULL</span>\n<span class=\"p\">);</span>\n</pre>\n<p>The attribute <tt>price</tt> is only a convenience python descriptor that accepts and returns Money objects, and will be available only when working with a model instance.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">book</span> <span class=\"o\">=</span> <span class=\"n\">Book</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">book</span><span class=\"o\">.</span><span class=\"n\">price</span>\n<span class=\"n\">USD</span> <span class=\"mf\">19.99</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">book</span><span class=\"o\">.</span><span class=\"n\">price</span> <span class=\"o\">=</span> <span class=\"n\">Money</span><span class=\"p\">(</span><span class=\"s2\">\"9.99\"</span><span class=\"p\">,</span> <span class=\"s2\">\"USD\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">book</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">book</span><span class=\"o\">.</span><span class=\"n\">price</span>\n<span class=\"n\">USD</span> <span class=\"mf\">9.99</span>\n</pre>\n<p>For any operation using Managers and QuerySets, the amount and the currency must be addressed separately, using <tt>price_amount</tt> and <tt>price_currency</tt> in this case. This allows for maximum flexibility and unambiguity.</p>\n<pre><span class=\"n\">new_book</span> <span class=\"o\">=</span> <span class=\"n\">Book</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"The new book\"</span><span class=\"p\">,</span>\n    <span class=\"n\">price_amount</span><span class=\"o\">=</span><span class=\"n\">Decimal</span><span class=\"p\">(</span><span class=\"s2\">\"29.99\"</span><span class=\"p\">),</span>\n    <span class=\"n\">price_currency</span><span class=\"o\">=</span><span class=\"s2\">\"USD\"</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">books_in_usd</span> <span class=\"o\">=</span> <span class=\"n\">Book</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">price_currency</span><span class=\"o\">=</span><span class=\"s2\">\"USD\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">cheap_books</span> <span class=\"o\">=</span> <span class=\"n\">Book</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">price_amount__lt</span><span class=\"o\">=</span><span class=\"n\">Decimal</span><span class=\"p\">(</span><span class=\"s1\">'2'</span><span class=\"p\">))</span>\n\n<span class=\"n\">cheap_books_eur</span> <span class=\"o\">=</span> <span class=\"n\">Book</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span>\n    <span class=\"n\">price_amount__lt</span><span class=\"o\">=</span><span class=\"n\">Decimal</span><span class=\"p\">(</span><span class=\"s1\">'2'</span><span class=\"p\">),</span>\n    <span class=\"n\">price_currency</span><span class=\"o\">=</span><span class=\"s2\">\"EUR\"</span>\n<span class=\"p\">)</span>\n</pre>\n<div id=\"defaults-and-choices\">\n<h3>Defaults and choices</h3>\n<p>You can provide separate defaults for the amount and the currency as Decimal and the three letter currency code string, respectively:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Book</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">blank</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n    <span class=\"n\">price</span> <span class=\"o\">=</span> <span class=\"n\">MoneyField</span><span class=\"p\">(</span><span class=\"n\">decimal_places</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">max_digits</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">,</span>\n                       <span class=\"n\">amount_default</span><span class=\"o\">=</span><span class=\"n\">Decimal</span><span class=\"p\">(</span><span class=\"s2\">\"0\"</span><span class=\"p\">),</span>\n                       <span class=\"n\">currency_default</span><span class=\"o\">=</span><span class=\"s2\">\"USD\"</span><span class=\"p\">)</span>\n</pre>\n<p>or a default Money value:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Book</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">blank</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n    <span class=\"n\">price</span> <span class=\"o\">=</span> <span class=\"n\">MoneyField</span><span class=\"p\">(</span><span class=\"n\">decimal_places</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">max_digits</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">,</span>\n                       <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">Money</span><span class=\"p\">(</span><span class=\"s2\">\"0\"</span><span class=\"p\">,</span> <span class=\"s2\">\"USD\"</span><span class=\"p\">))</span>\n</pre>\n<p>You can also set currency choices with <tt>currency_choices</tt> and a currency default with <tt>currency_default</tt>:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Book</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">CURRENCY_CHOICES</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n        <span class=\"p\">(</span><span class=\"s1\">'EUR'</span><span class=\"p\">,</span> <span class=\"s1\">'EUR'</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"s1\">'USD'</span><span class=\"p\">,</span> <span class=\"s1\">'USD'</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">CURRENCY_DEFAULT</span> <span class=\"o\">=</span> <span class=\"s1\">'EUR'</span>\n\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">blank</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n    <span class=\"n\">price</span> <span class=\"o\">=</span> <span class=\"n\">MoneyField</span><span class=\"p\">(</span><span class=\"n\">decimal_places</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">max_digits</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">,</span>\n                       <span class=\"n\">currency_choices</span><span class=\"o\">=</span><span class=\"n\">CURRENCY_CHOICES</span><span class=\"p\">,</span>\n                       <span class=\"n\">currency_default</span><span class=\"o\">=</span><span class=\"n\">CURRENCY_DEFAULT</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"fixed-currency\">\n<h3>Fixed currency</h3>\n<p>If you don\u2019t need to handle different currencies but want to benefit from using the Money class instead of just Decimals, you may want to set a fixed currency for your monetary field:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Book</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">blank</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n    <span class=\"n\">price</span> <span class=\"o\">=</span> <span class=\"n\">MoneyField</span><span class=\"p\">(</span><span class=\"n\">decimal_places</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">max_digits</span><span class=\"o\">=</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"n\">currency</span><span class=\"o\">=</span><span class=\"s1\">'USD'</span><span class=\"p\">)</span>\n</pre>\n<p>In this case, the attribute <tt>price</tt> will only accept and return Money objects with currency \u201cUSD\u201d. <strong>The database representation of this field will be</strong> <tt>price_amount</tt>, <strong>with no currency column</strong>. This is consistent with the multi-currency case, and allows for maximum flexibility while making schema migrations.</p>\n</div>\n</div>\n<div id=\"moneyfield-options\">\n<h2>MoneyField options</h2>\n<dl>\n<dt>MoneyField.max_digits</dt>\n<dd>Same as DecimalField: The maximum number of digits allowed in the number. Note that this number must be greater than or equal to <tt>decimal_places</tt>.</dd>\n<dt>MoneyField.decimal_places</dt>\n<dd>Same as DecimalField: The number of decimal places to store with the number.</dd>\n<dt>MoneyField.currency</dt>\n<dd>Fixed currency for this field. This will omit the creation of a <tt>&lt;name&gt;_currency</tt> column in the database.</dd>\n<dt>MoneyField.default</dt>\n<dd>Default Money value for this field (both amount and currency).</dd>\n<dt>MoneyField.currency_default</dt>\n<dd>Default currency value.</dd>\n<dt>MoneyField.amount_default</dt>\n<dd>Default amount value.</dd>\n<dt>MoneyField.currency_choices</dt>\n<dd><p>Regular Django choices iterable, e.g.:</p>\n<pre>CURRENCY_CHOICES = (\n    ('EUR', 'Euros'),\n    ('USD', 'US Dollars')\n)\n</pre>\n</dd>\n</dl>\n</div>\n<div id=\"forms\">\n<h2>Forms</h2>\n<p>A base model form class <tt>MoneyModelForm</tt> is included to show the monetary fields as just one field in forms, instead of separate amount and currency fields.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.contrib</span> <span class=\"kn\">import</span> <span class=\"n\">admin</span>\n<span class=\"kn\">from</span> <span class=\"nn\">moneyfield</span> <span class=\"kn\">import</span> <span class=\"n\">MoneyModelForm</span>\n<span class=\"kn\">from</span> <span class=\"nn\">myapp.models</span> <span class=\"kn\">import</span> <span class=\"n\">Book</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">BookAdmin</span><span class=\"p\">(</span><span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">ModelAdmin</span><span class=\"p\">):</span>\n    <span class=\"n\">list_display</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'id'</span><span class=\"p\">,</span> <span class=\"s1\">'name'</span><span class=\"p\">,</span> <span class=\"s1\">'price'</span><span class=\"p\">]</span>\n    <span class=\"n\">form</span> <span class=\"o\">=</span> <span class=\"n\">MoneyModelForm</span>\n\n<span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">site</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">Book</span><span class=\"p\">,</span> <span class=\"n\">BookAdmin</span><span class=\"p\">)</span>\n</pre>\n<p>Using <tt>MoneyModelForm</tt> is optional. You may also include it in the base classes of your custom model form class.</p>\n<div>\n<img alt=\"https://raw.github.com/carlospalol/django-moneyfield/master/docs/static/img/form-choices.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b2c613f284ecc1f4d335d4764370bfec128d4feb/68747470733a2f2f7261772e6769746875622e636f6d2f6361726c6f7370616c6f6c2f646a616e676f2d6d6f6e65796669656c642f6d61737465722f646f63732f7374617469632f696d672f666f726d2d63686f696365732e706e67\">\n<p><strong>Using currency choices</strong></p>\n</div>\n<div>\n<img alt=\"https://raw.github.com/carlospalol/django-moneyfield/master/docs/static/img/form-fixed.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c4bb56364d7116615a700b1d8c4eab444d531fd7/68747470733a2f2f7261772e6769746875622e636f6d2f6361726c6f7370616c6f6c2f646a616e676f2d6d6f6e65796669656c642f6d61737465722f646f63732f7374617469632f696d672f666f726d2d66697865642e706e67\">\n<p><strong>Using fixed currency</strong></p>\n</div>\n<div>\n<img alt=\"https://raw.github.com/carlospalol/django-moneyfield/master/docs/static/img/form-free.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a4222c968ce5e2eec6773a2e9536f483ca113d4c/68747470733a2f2f7261772e6769746875622e636f6d2f6361726c6f7370616c6f6c2f646a616e676f2d6d6f6e65796669656c642f6d61737465722f646f63732f7374617469632f696d672f666f726d2d667265652e706e67\">\n<p><strong>Using free currency</strong></p>\n</div>\n</div>\n<div id=\"contributions\">\n<h2>Contributions</h2>\n<p>Contributions are welcome. You can use the <a href=\"https://help.github.com/\" rel=\"nofollow\">regular github mechanisms</a>.</p>\n<p>To run the tests, sit on the package root (by setup.py) and run:</p>\n<pre>python tests/runtests.py\n</pre>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>django-moneyfield is released under the <strong>MIT license</strong>, which can be found in the file <tt>LICENSE</tt>.</p>\n</div>\n\n          </div>"}, "last_serial": 934809, "releases": {"0.2": [{"comment_text": "", "digests": {"md5": "132e12097db272d8d58e9bdb3d363970", "sha256": "793f0b2a0986435aa36a166edb54f682505a1383457a4d18483964e8121558fc"}, "downloads": -1, "filename": "django-moneyfield-0.2.tar.gz", "has_sig": false, "md5_digest": "132e12097db272d8d58e9bdb3d363970", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6601, "upload_time": "2013-11-25T14:40:20", "upload_time_iso_8601": "2013-11-25T14:40:20.106630Z", "url": "https://files.pythonhosted.org/packages/ef/e5/afca457885e5d24418f87af426fd96020b3bf5f88980c3ff0a4e0aa3285a/django-moneyfield-0.2.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "104f2bcf8e782934594e61379b098fa9", "sha256": "72f129f573adc5d05a05cfbc4ba7b46fc76320dac510f6b4731ac243e76db484"}, "downloads": -1, "filename": "django-moneyfield-0.2.1.tar.gz", "has_sig": false, "md5_digest": "104f2bcf8e782934594e61379b098fa9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6639, "upload_time": "2013-12-03T16:00:45", "upload_time_iso_8601": "2013-12-03T16:00:45.319783Z", "url": "https://files.pythonhosted.org/packages/aa/25/91c3dad4a7f05a94c858e04ca208026c0e4e1e90da013662602dfe1fbfa3/django-moneyfield-0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "104f2bcf8e782934594e61379b098fa9", "sha256": "72f129f573adc5d05a05cfbc4ba7b46fc76320dac510f6b4731ac243e76db484"}, "downloads": -1, "filename": "django-moneyfield-0.2.1.tar.gz", "has_sig": false, "md5_digest": "104f2bcf8e782934594e61379b098fa9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6639, "upload_time": "2013-12-03T16:00:45", "upload_time_iso_8601": "2013-12-03T16:00:45.319783Z", "url": "https://files.pythonhosted.org/packages/aa/25/91c3dad4a7f05a94c858e04ca208026c0e4e1e90da013662602dfe1fbfa3/django-moneyfield-0.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:34:59 2020"}