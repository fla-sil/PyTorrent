{"info": {"author": "Harshit Budhraja", "author_email": "harshitbudhraja1301@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "beeply\n======\n\nA python package that helps you produce musical notes using your\ncomputer's characteristic beep sounds. Written in Python.\n\nDependencies\n------------\n\n``winsound`` python package is required. This package is present by\ndefault, if you use python on windows. Due to this dependency, \n``beeply-win`` will ONLY work on windows platforms.\n\nInstallation\n------------\n\n``pip install beeply``\n\nUsage\n-----\n\n-  Import beeply in your python code as ``from beeply import notes``.\n-  Create an object of a class \"beeps\" as ``mybeep = notes.beeps()``.\n   You can also set the default time period (in milliseconds) for which\n   the note plays by passing it as an argument during object creation\n   like ``mybeep = notes.beeps(400)``. If you do not specify anything,\n   it takes a default value of 900ms.\n-  Use this object to hear the musical notes. For example -\n   ``mybeep.hear('C')``. You can also play a certain note for a time\n   period other than the default period by specifying it in the\n   arguments like ``mybeep.hear('C',2000)`` [Plays the C note for 2\n   seconds].\n\nYou can use C, D, E... for notes in the middle scale i.e. Scale 0 while\nadding a ``_`` after the note raises it to the next scale i.e. Scale 1.\nFor example, using ``mybeep.hear('C_')`` will produce the C note in the\nScale 1.", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/harshitbudhraja/beeply", "keywords": "windows python winsound beep music notes command-line CLI", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "beeply", "package_url": "https://pypi.org/project/beeply/", "platform": "", "project_url": "https://pypi.org/project/beeply/", "project_urls": {"Homepage": "https://github.com/harshitbudhraja/beeply"}, "release_url": "https://pypi.org/project/beeply/1.0.2/", "requires_dist": null, "requires_python": "", "summary": "A python module that helps you produce musical notes using your computer's characteristic beep sounds", "version": "1.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A python package that helps you produce musical notes using your\ncomputer\u2019s characteristic beep sounds. Written in Python.</p>\n<div id=\"dependencies\">\n<h2>Dependencies</h2>\n<p><tt>winsound</tt> python package is required. This package is present by\ndefault, if you use python on windows. Due to this dependency,\n<tt><span class=\"pre\">beeply-win</span></tt> will ONLY work on windows platforms.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p><tt>pip install beeply</tt></p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<ul>\n<li>Import beeply in your python code as <tt>from beeply import notes</tt>.</li>\n<li>Create an object of a class \u201cbeeps\u201d as <tt>mybeep = notes.beeps()</tt>.\nYou can also set the default time period (in milliseconds) for which\nthe note plays by passing it as an argument during object creation\nlike <tt>mybeep = notes.beeps(400)</tt>. If you do not specify anything,\nit takes a default value of 900ms.</li>\n<li>Use this object to hear the musical notes. For example -\n<tt><span class=\"pre\">mybeep.hear('C')</span></tt>. You can also play a certain note for a time\nperiod other than the default period by specifying it in the\narguments like <tt><span class=\"pre\">mybeep.hear('C',2000)</span></tt> [Plays the C note for 2\nseconds].</li>\n</ul>\n<p>You can use C, D, E\u2026 for notes in the middle scale i.e. Scale 0 while\nadding a <tt>_</tt> after the note raises it to the next scale i.e. Scale 1.\nFor example, using <tt><span class=\"pre\">mybeep.hear('C_')</span></tt> will produce the C note in the\nScale 1.</p>\n</div>\n\n          </div>"}, "last_serial": 3357658, "releases": {"1.0.1": [{"comment_text": "", "digests": {"md5": "b102095764d4f4bf8603eeb6acc2a083", "sha256": "6affc0620fd48e58b2f6b0d3abeace26abc47114a86c489742a9478b9ed62b80"}, "downloads": -1, "filename": "beeply-1.0.1.tar.gz", "has_sig": false, "md5_digest": "b102095764d4f4bf8603eeb6acc2a083", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2177, "upload_time": "2017-11-23T00:45:43", "upload_time_iso_8601": "2017-11-23T00:45:43.870912Z", "url": "https://files.pythonhosted.org/packages/ef/09/674472e7797f52e47f723c6bf5a63b299b7f69e4b18b999813f4d6e2957d/beeply-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "878adcae148d367c3a9a36a656b5cee8", "sha256": "3ce32a8b206e5b16357c3dbefa2ce41fae34b8321256443fc1f0b1d11f18d320"}, "downloads": -1, "filename": "beeply-1.0.2.tar.gz", "has_sig": false, "md5_digest": "878adcae148d367c3a9a36a656b5cee8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2234, "upload_time": "2017-11-23T08:15:05", "upload_time_iso_8601": "2017-11-23T08:15:05.290279Z", "url": "https://files.pythonhosted.org/packages/e4/7a/4e896996cee67325bd745f7c05445e10316f77955a17914f41608c66557f/beeply-1.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "878adcae148d367c3a9a36a656b5cee8", "sha256": "3ce32a8b206e5b16357c3dbefa2ce41fae34b8321256443fc1f0b1d11f18d320"}, "downloads": -1, "filename": "beeply-1.0.2.tar.gz", "has_sig": false, "md5_digest": "878adcae148d367c3a9a36a656b5cee8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2234, "upload_time": "2017-11-23T08:15:05", "upload_time_iso_8601": "2017-11-23T08:15:05.290279Z", "url": "https://files.pythonhosted.org/packages/e4/7a/4e896996cee67325bd745f7c05445e10316f77955a17914f41608c66557f/beeply-1.0.2.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:37:53 2020"}