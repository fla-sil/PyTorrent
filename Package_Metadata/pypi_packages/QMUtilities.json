{"info": {"author": "Suman Kumar", "author_email": "sumkumar@quotient.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Build Tools"], "description": "QMUtilities\n=============\n\nIts a generic Utils library from where you can import various modules. Below are the modules and their installation steps with usage description\n\npypi library link: https://pypi.org/project/QMUtilities/\n\nIP Validate and OKTA token Validate\n=============\n\n1. IP Validate\n-------------\n\nThis is a simple security module to check whether client IP is allowed to access the flask`s backend APIs.\n\nBefore every endpoint is served, it will check for the remote IP if it exists in the list of white listed IPs and it also checks if it has valid okta token, if it meets both the conditions, it passes through firewall to access API otherwise it throws abort error:\n\n```\nHTTPErr: 403 Abort\n```\n\n2. Validate Token\n------------\nIt also validates okta token in incoming header, when request type is POST.\n\nAuthentication header format:\n\n    Authentication: agency <id> user <id>  <assertid>\n\nSetup\n----------\n\n```\n1. Create VirtualENV\n2. source VirtualENV\n3. Install dependent libraries, please ignore if already installed. \n                boto3, pymemcache (pip install)\n4. pip install QMUtilities\n5. create a stored secret at secret manager and store below keys and correspoding values of memcache server\n    \n    aws_elastic_cache_hostname : <hostname of memcache server>\n    port : <port details>\n6. Add below blocks to the \"view\" file of the app\n\n```\n\n``` python\nfrom flask import Flask\nfrom security.validate import ValidateHeader\n\n@centrifuge.before_request\ndef validate_header():\n    ip_list = <list of IPs or import from config> \n    secret_name = <secret name or import from config>\n    validate_object = ValidateHeader(ip_list, secret_name)\n    validate_object.check_whitelisting() #for ip validation\n    validate_object.check_okta_token() #for okta token validation\n\n```\n\n\nNginx Routing\n====\n\nBy default headers of the incoming request gets updated with localhost IP when it is passed to the backend Nginx server.\nIn order to get the real IP of the client/LAN, we need to do following configurations in the nginx config:\n\n```\nserver {\n    real_ip_recursive on;\n}\n\nlocation / {\n    proxy_set_header  Host $host;\n    proxy_set_header  X-Real-IP $remote_addr;\n    proxy_set_header  X-Forwarded-For $remote_addr;\n    proxy_set_header  X-Forwarded-Host $remote_addr;\n   }\n   \n```\n\n**sample incoming request header dict after naking above changes in Nginx**\n```\n{'wsgi.version': (1, 0), 'wsgi.url_scheme': 'http', \n'wsgi.input': '<_io.BufferedReader name=5>', 'wsgi.errors': <_io.TextIOWrapper name='<stderr>' mode='w' encoding='UTF-8'>,\n'wsgi.multithread': True, \n'wsgi.multiprocess': False, 'wsgi.run_once': False, \n'werkzeug.server.shutdown': <function WSGIRequestHandler.make_environ.<locals>.shutdown_server at 0x7fba5d1bd598>, \n'SERVER_SOFTWARE': 'Werkzeug/0.14.1', 'REQUEST_METHOD': 'GET', 'SCRIPT_NAME': '', 'PATH_INFO': '/', 'QUERY_STRING': '', 'REMOTE_ADDR': '127.0.0.1', 'REMOTE_PORT': 39534, 'SERVER_NAME': '127.0.0.1', 'SERVER_PORT': '8002', 'SERVER_PROTOCOL': 'HTTP/1.0', \n'HTTP_HOST': '172.30.1.23', \n'HTTP_X_REAL_IP': '10.21.120.11', \n'HTTP_X_FORWARDED_FOR': '10.21.120.11', \n'HTTP_X_FORWARDED_HOST': '10.21.120.11', \n'HTTP_CONNECTION': 'close', 'HTTP_PRAGMA': 'no-cache', \n'HTTP_CACHE_CONTROL': 'no-cache', 'HTTP_UPGRADE_INSECURE_REQUESTS': '1', \n'HTTP_USER_AGENT': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.157 Safari/537.36', \nHTTP_ACCEPT': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3', \n'HTTP_ACCEPT_ENCODING': 'gzip, deflate', 'HTTP_ACCEPT_LANGUAGE': 'en-GB,en-US;q=0.9,en;q=0.8', 'werkzeug.request': <Request 'http://10.21.120.11/' [GET]>}\n\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "QMUtilities", "package_url": "https://pypi.org/project/QMUtilities/", "platform": "", "project_url": "https://pypi.org/project/QMUtilities/", "project_urls": null, "release_url": "https://pypi.org/project/QMUtilities/0.0.4/", "requires_dist": null, "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4", "summary": "ip whitelisting security module and okta token validator", "version": "0.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>QMUtilities</h1>\n<p>Its a generic Utils library from where you can import various modules. Below are the modules and their installation steps with usage description</p>\n<p>pypi library link: <a href=\"https://pypi.org/project/QMUtilities/\" rel=\"nofollow\">https://pypi.org/project/QMUtilities/</a></p>\n<h1>IP Validate and OKTA token Validate</h1>\n<ol>\n<li>IP Validate</li>\n</ol>\n<hr>\n<p>This is a simple security module to check whether client IP is allowed to access the flask`s backend APIs.</p>\n<p>Before every endpoint is served, it will check for the remote IP if it exists in the list of white listed IPs and it also checks if it has valid okta token, if it meets both the conditions, it passes through firewall to access API otherwise it throws abort error:</p>\n<pre><code>HTTPErr: 403 Abort\n</code></pre>\n<ol>\n<li>Validate Token</li>\n</ol>\n<hr>\n<p>It also validates okta token in incoming header, when request type is POST.</p>\n<p>Authentication header format:</p>\n<pre><code>Authentication: agency &lt;id&gt; user &lt;id&gt;  &lt;assertid&gt;\n</code></pre>\n<h2>Setup</h2>\n<pre><code>1. Create VirtualENV\n2. source VirtualENV\n3. Install dependent libraries, please ignore if already installed. \n                boto3, pymemcache (pip install)\n4. pip install QMUtilities\n5. create a stored secret at secret manager and store below keys and correspoding values of memcache server\n    \n    aws_elastic_cache_hostname : &lt;hostname of memcache server&gt;\n    port : &lt;port details&gt;\n6. Add below blocks to the \"view\" file of the app\n\n</code></pre>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">Flask</span>\n<span class=\"kn\">from</span> <span class=\"nn\">security.validate</span> <span class=\"kn\">import</span> <span class=\"n\">ValidateHeader</span>\n\n<span class=\"nd\">@centrifuge</span><span class=\"o\">.</span><span class=\"n\">before_request</span>\n<span class=\"k\">def</span> <span class=\"nf\">validate_header</span><span class=\"p\">():</span>\n    <span class=\"n\">ip_list</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"nb\">list</span> <span class=\"n\">of</span> <span class=\"n\">IPs</span> <span class=\"ow\">or</span> <span class=\"kn\">import</span> <span class=\"nn\">from</span> <span class=\"n\">config</span><span class=\"o\">&gt;</span> \n    <span class=\"n\">secret_name</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">secret</span> <span class=\"n\">name</span> <span class=\"ow\">or</span> <span class=\"kn\">import</span> <span class=\"nn\">from</span> <span class=\"n\">config</span><span class=\"o\">&gt;</span>\n    <span class=\"n\">validate_object</span> <span class=\"o\">=</span> <span class=\"n\">ValidateHeader</span><span class=\"p\">(</span><span class=\"n\">ip_list</span><span class=\"p\">,</span> <span class=\"n\">secret_name</span><span class=\"p\">)</span>\n    <span class=\"n\">validate_object</span><span class=\"o\">.</span><span class=\"n\">check_whitelisting</span><span class=\"p\">()</span> <span class=\"c1\">#for ip validation</span>\n    <span class=\"n\">validate_object</span><span class=\"o\">.</span><span class=\"n\">check_okta_token</span><span class=\"p\">()</span> <span class=\"c1\">#for okta token validation</span>\n</pre>\n<h1>Nginx Routing</h1>\n<p>By default headers of the incoming request gets updated with localhost IP when it is passed to the backend Nginx server.\nIn order to get the real IP of the client/LAN, we need to do following configurations in the nginx config:</p>\n<pre><code>server {\n    real_ip_recursive on;\n}\n\nlocation / {\n    proxy_set_header  Host $host;\n    proxy_set_header  X-Real-IP $remote_addr;\n    proxy_set_header  X-Forwarded-For $remote_addr;\n    proxy_set_header  X-Forwarded-Host $remote_addr;\n   }\n   \n</code></pre>\n<p><strong>sample incoming request header dict after naking above changes in Nginx</strong></p>\n<pre><code>{'wsgi.version': (1, 0), 'wsgi.url_scheme': 'http', \n'wsgi.input': '&lt;_io.BufferedReader name=5&gt;', 'wsgi.errors': &lt;_io.TextIOWrapper name='&lt;stderr&gt;' mode='w' encoding='UTF-8'&gt;,\n'wsgi.multithread': True, \n'wsgi.multiprocess': False, 'wsgi.run_once': False, \n'werkzeug.server.shutdown': &lt;function WSGIRequestHandler.make_environ.&lt;locals&gt;.shutdown_server at 0x7fba5d1bd598&gt;, \n'SERVER_SOFTWARE': 'Werkzeug/0.14.1', 'REQUEST_METHOD': 'GET', 'SCRIPT_NAME': '', 'PATH_INFO': '/', 'QUERY_STRING': '', 'REMOTE_ADDR': '127.0.0.1', 'REMOTE_PORT': 39534, 'SERVER_NAME': '127.0.0.1', 'SERVER_PORT': '8002', 'SERVER_PROTOCOL': 'HTTP/1.0', \n'HTTP_HOST': '172.30.1.23', \n'HTTP_X_REAL_IP': '10.21.120.11', \n'HTTP_X_FORWARDED_FOR': '10.21.120.11', \n'HTTP_X_FORWARDED_HOST': '10.21.120.11', \n'HTTP_CONNECTION': 'close', 'HTTP_PRAGMA': 'no-cache', \n'HTTP_CACHE_CONTROL': 'no-cache', 'HTTP_UPGRADE_INSECURE_REQUESTS': '1', \n'HTTP_USER_AGENT': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.157 Safari/537.36', \nHTTP_ACCEPT': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3', \n'HTTP_ACCEPT_ENCODING': 'gzip, deflate', 'HTTP_ACCEPT_LANGUAGE': 'en-GB,en-US;q=0.9,en;q=0.8', 'werkzeug.request': &lt;Request 'http://10.21.120.11/' [GET]&gt;}\n\n</code></pre>\n\n          </div>"}, "last_serial": 6415095, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "dbf2c35706b037290de99ba054e439b3", "sha256": "228d94e6ad2dd1338e040c3b725ea2691da7659b1ec9e0e7e9d1f510552f88cc"}, "downloads": -1, "filename": "QMUtilities-0.0.1.tar.gz", "has_sig": false, "md5_digest": "dbf2c35706b037290de99ba054e439b3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4", "size": 5471, "upload_time": "2019-06-27T11:42:22", "upload_time_iso_8601": "2019-06-27T11:42:22.131526Z", "url": "https://files.pythonhosted.org/packages/1d/2e/5c5aa6dcc41a4a5c9f8ab380d5b19b5b9ffba1eca54cfc824c8ee56b7708/QMUtilities-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "1420bd373aa0552db05450fd5251873a", "sha256": "0dcde1fde032b70bf05b3803d6b2db32ee198d9c3a0e06df565792246256822c"}, "downloads": -1, "filename": "QMUtilities-0.0.2.tar.gz", "has_sig": false, "md5_digest": "1420bd373aa0552db05450fd5251873a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4", "size": 6988, "upload_time": "2019-08-31T07:26:42", "upload_time_iso_8601": "2019-08-31T07:26:42.513399Z", "url": "https://files.pythonhosted.org/packages/f6/f0/128141483acdc9e6d941707a56a660e9e4d811edc2ae17680fd959df4f80/QMUtilities-0.0.2.tar.gz", "yanked": false}], "0.0.2.dev0": [{"comment_text": "", "digests": {"md5": "6aa3c020297cda5bb1333e41280ce297", "sha256": "a3d525b3c5ab09715f5a9e8cd1ded728c9fc64148d9597ad5dab7b9adc376475"}, "downloads": -1, "filename": "QMUtilities-0.0.2.dev0.tar.gz", "has_sig": false, "md5_digest": "6aa3c020297cda5bb1333e41280ce297", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4", "size": 6824, "upload_time": "2019-08-23T19:24:17", "upload_time_iso_8601": "2019-08-23T19:24:17.842649Z", "url": "https://files.pythonhosted.org/packages/58/be/af9e2c7fdeeca58c43723c1c346dd1afb3e12ba05e8d090c28a295872e6e/QMUtilities-0.0.2.dev0.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "8059b8caf84dff3120f9c2d4650f8f9b", "sha256": "ea7f6f76117ef437188528f6e2fc23f39c3b2d0cd2e120d9e3d2683db80fc295"}, "downloads": -1, "filename": "QMUtilities-0.0.3.tar.gz", "has_sig": false, "md5_digest": "8059b8caf84dff3120f9c2d4650f8f9b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4", "size": 7015, "upload_time": "2020-01-08T13:01:29", "upload_time_iso_8601": "2020-01-08T13:01:29.915538Z", "url": "https://files.pythonhosted.org/packages/4c/7e/c5ba4bd349242cf0020b3c136f6f417f62146893b33638080f1a6af1abf2/QMUtilities-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "abb7458cde61961dab0c77e6115eeb93", "sha256": "4b7c6b1b66e0f3a6abadb78db126a779b7315dcc8db990b44c3e99b66b53a22f"}, "downloads": -1, "filename": "QMUtilities-0.0.4.tar.gz", "has_sig": false, "md5_digest": "abb7458cde61961dab0c77e6115eeb93", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4", "size": 7018, "upload_time": "2020-01-08T13:07:17", "upload_time_iso_8601": "2020-01-08T13:07:17.619942Z", "url": "https://files.pythonhosted.org/packages/8a/b4/b2908029c147a449fc5d7aca583c5e552712cfa2bb0dd09e8f402df9d5b2/QMUtilities-0.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "abb7458cde61961dab0c77e6115eeb93", "sha256": "4b7c6b1b66e0f3a6abadb78db126a779b7315dcc8db990b44c3e99b66b53a22f"}, "downloads": -1, "filename": "QMUtilities-0.0.4.tar.gz", "has_sig": false, "md5_digest": "abb7458cde61961dab0c77e6115eeb93", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4", "size": 7018, "upload_time": "2020-01-08T13:07:17", "upload_time_iso_8601": "2020-01-08T13:07:17.619942Z", "url": "https://files.pythonhosted.org/packages/8a/b4/b2908029c147a449fc5d7aca583c5e552712cfa2bb0dd09e8f402df9d5b2/QMUtilities-0.0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:09:24 2020"}