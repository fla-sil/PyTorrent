{"info": {"author": "Alex Piskun", "author_email": "piskun.aleksey@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Database Communication Manager\n\nCollection of wrappers for communication with database. Supports following databases: \n\n* SQLite\n* PostgreSQL\n\n## Installation\n\nTo install the package, simply use pip.\n\n```\n$ pip install db_commuter\n```\n\n## SQLite\n\nTo create a new commuter instance, you need to set path to SQLite database file. \n\n```python\nfrom db_commuter.commuters import SQLiteCommuter\ncommuter = SQLiteCommuter(path2db)\n```\n\nSelect data from table and return Pandas.DataFrame. \n\n```python\nage = 55\nsalary = 1000\ndata = commuter.select('select * from people where age > %s and salary > %s' % (age, salary))\n```\n\nInsert from DataFrame to database table.\n\n```python\ncommuter.insert('people', data)\n```\n\nExecute an SQL statement.\n\n```python\nwho = 'Yeltsin'\nage = 72\ncommuter.execute('insert into people values (?, ?)', vars=(who, age)) \n```\n\nTo execute multiple SQL statements with one call, use `executescript`.\n\n```python\ncommuter.execute_script(path2script)\n```\n\n## PostgreSQL\n\n#### Setting the commuter\n\nTo initialize a new commuter with PostgreSQL database, you need to set the basic connection parameters, which are\n`host`, `port`, `user`, `password`, `db_name`. Any other connection parameter can be passed as a keyword.\nThe list of the supported parameters [can be seen here](https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-PARAMKEYWORDS).\n\n```python\nfrom db_commuter.commuters import PgCommuter\n\nconn_params = {\n    'host': 'localhost',\n    'port': '5432',\n    'user': 'postgres',\n    'password': 'password',\n    'db_name': 'test_db'\n}\n\ncommuter = PgCommuter(**conn_params)\n```\n\n#### Basic usage\n\nBasic operations are provided with `select`, `insert` and `execute` methods.\n\n```python\ndata = commuter.select('select * from people where age > %s and salary > %s' % (55, 1000))\ncommuter.insert('people', data)\ncommuter.execute('insert into people values (%s, %s)', vars=('Yeltsin', 72)) \n```   \n\nTo execute multiple SQL statements with one call, use `executescript`.\n\n```python\ncommuter.execute_script(path2script)\n```\n\n#### Setting schema in constructor \n\nIf you operate only on tables within the specific schema, it could make sense to specify the name of database schema \nwhen you create the commuter instance.\n\n```python\nfrom db_commuter.commuters import PgCommuter\ncommuter = PgCommuter(host, port, user, password, db_name, schema='model')\n```\n\n#### Insert row and return serial key \n\nUse `insert_return` method to insert a new row to the table and return the serial key of the newly inserted row.\n\n```python\ncmd = 'INSERT INTO people (name, age) VALUES (%s, %s)'\nvalues = ('Yeltsin', '72')\npid = commuter.insert_return(cmd, values=values, return_id='person_id')\n```\n\nIn the example above the table `people` should contain a serial key `person_id`. \n\n#### Insert row\n\nAlternatively, you can use `insert_row` method to insert one new row.\n\n```python\nfrom datetime import datetime\n\ncommuter.insert_row(\n    table_name='people', \n    name='Yeltsin', \n    age='72',\n    birth_date=datetime(1931, 2, 1))\n```\n\nIt also supports the returning of the serial key. \n\n```python\npid = commuter.insert_row(\n    table_name='people', \n    return_id='person_id', \n    name='Yeltsin', \n    age='72')\n```\n\n#### copy_from\n\nIn contrast to `insert` method which, in turn, uses pandas `to_sql` machinery, the `copy_from` method \nefficiently copies data from DataFrame to database employing PostgreSQL `copy_from` command. \n\n```python\ncommuter.copy_from(table_name='people', data=data)\n```\n\nAs compared to `insert`, this method works much more effective on the large dataframes.\nYou can also set `format_data` parameter as `True` to allow automatically format your \nDataFrame before calling `copy_from` command.   \n\n```python\ncommuter.copy_from(table_name='people', data=df, format_data=True)\n```\n\n#### Delete table\n\n```python\ncommuter.delete_table(table_name='people', schema='my_schema')\n```\n\n#### Check if table exists\n\nReturn `True` if table exists, otherwise return `False`.\n\n```python\nis_exist = commuter.is_table_exist(table_name='people', schema='my_schema')\n```\n\n#### Column names\n\nReturn list of the column names of the given table.\n\n```python\ncolumns = commuter.get_column_names(table_name='people', schema='my_schema')\n```\n\n#### Amount of connections to database\n\nReturn the amount of active connections to the database.\n\n```python\nn_connections = commuter.get_connections_count()\n```\n\n#### Resolve primary conflicts\n\nThis method can be used when you want to apply `copy_from` and the DataFrame contains \nrows conflicting with the primary key (duplicates). To remove conflicted rows \nfrom the DataFrame you can use `resolve_primary_conflicts`.\n\n```python\ndf = commuter.resolve_primary_conflicts(\n    table_name='payments',\n    data=df,\n    p_key=['payment_date', 'payment_type'],\n    filter_col='payment_date',\n    schema='my_schema')\n```\n\nIt selects data from the `table_name` where value in `filter_col` is greater or equal \nthe minimal found value in `filter_col` of the given DataFrame. Rows having primary \nkey which is already presented in selected data are deleted from the DataFrame.\n\nYou need to specify parameter `p_key` with the list of column names representing the primary key.\n\n#### Resolve foreign conflicts\n\nThis method selects data from `parent_table_name` where value in `filter_parent` column\nis greater or equal the minimal found value in `filter_child` column of the given DataFrame.\nRows having foreign key which is already presented in selected data are deleted from DataFrame.\n\n```python\ndf = commuter.resolve_foreign_conflicts(\n    parent_table_name='people',\n    data=df,\n    f_key='person_id',\n    filter_parent='person_id',\n    filter_child='person_id',\n    schema='my_schema')\n```\n\nParameter `f_key` should be specified with the list of column names represented the foreign key. \n\n## License\n\nPackage is released under [MIT License](https://github.com/viktorsapozhok/db-commuter/blob/master/LICENSE).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/viktorsapozhok/db-commuter", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "db-commuter", "package_url": "https://pypi.org/project/db-commuter/", "platform": "", "project_url": "https://pypi.org/project/db-commuter/", "project_urls": {"Homepage": "https://github.com/viktorsapozhok/db-commuter"}, "release_url": "https://pypi.org/project/db-commuter/0.1.13/", "requires_dist": ["pandas (>=0.24.0)", "sqlalchemy (>=1.3.3)", "psycopg2-binary (>=2.7.7)"], "requires_python": ">=3.6", "summary": "Database communication manager", "version": "0.1.13", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Database Communication Manager</h1>\n<p>Collection of wrappers for communication with database. Supports following databases:</p>\n<ul>\n<li>SQLite</li>\n<li>PostgreSQL</li>\n</ul>\n<h2>Installation</h2>\n<p>To install the package, simply use pip.</p>\n<pre><code>$ pip install db_commuter\n</code></pre>\n<h2>SQLite</h2>\n<p>To create a new commuter instance, you need to set path to SQLite database file.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">db_commuter.commuters</span> <span class=\"kn\">import</span> <span class=\"n\">SQLiteCommuter</span>\n<span class=\"n\">commuter</span> <span class=\"o\">=</span> <span class=\"n\">SQLiteCommuter</span><span class=\"p\">(</span><span class=\"n\">path2db</span><span class=\"p\">)</span>\n</pre>\n<p>Select data from table and return Pandas.DataFrame.</p>\n<pre><span class=\"n\">age</span> <span class=\"o\">=</span> <span class=\"mi\">55</span>\n<span class=\"n\">salary</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">commuter</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"s1\">'select * from people where age &gt; </span><span class=\"si\">%s</span><span class=\"s1\"> and salary &gt; </span><span class=\"si\">%s</span><span class=\"s1\">'</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">age</span><span class=\"p\">,</span> <span class=\"n\">salary</span><span class=\"p\">))</span>\n</pre>\n<p>Insert from DataFrame to database table.</p>\n<pre><span class=\"n\">commuter</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"s1\">'people'</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">)</span>\n</pre>\n<p>Execute an SQL statement.</p>\n<pre><span class=\"n\">who</span> <span class=\"o\">=</span> <span class=\"s1\">'Yeltsin'</span>\n<span class=\"n\">age</span> <span class=\"o\">=</span> <span class=\"mi\">72</span>\n<span class=\"n\">commuter</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s1\">'insert into people values (?, ?)'</span><span class=\"p\">,</span> <span class=\"nb\">vars</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">who</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"p\">))</span> \n</pre>\n<p>To execute multiple SQL statements with one call, use <code>executescript</code>.</p>\n<pre><span class=\"n\">commuter</span><span class=\"o\">.</span><span class=\"n\">execute_script</span><span class=\"p\">(</span><span class=\"n\">path2script</span><span class=\"p\">)</span>\n</pre>\n<h2>PostgreSQL</h2>\n<h4>Setting the commuter</h4>\n<p>To initialize a new commuter with PostgreSQL database, you need to set the basic connection parameters, which are\n<code>host</code>, <code>port</code>, <code>user</code>, <code>password</code>, <code>db_name</code>. Any other connection parameter can be passed as a keyword.\nThe list of the supported parameters <a href=\"https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-PARAMKEYWORDS\" rel=\"nofollow\">can be seen here</a>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">db_commuter.commuters</span> <span class=\"kn\">import</span> <span class=\"n\">PgCommuter</span>\n\n<span class=\"n\">conn_params</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'host'</span><span class=\"p\">:</span> <span class=\"s1\">'localhost'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'port'</span><span class=\"p\">:</span> <span class=\"s1\">'5432'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'user'</span><span class=\"p\">:</span> <span class=\"s1\">'postgres'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'password'</span><span class=\"p\">:</span> <span class=\"s1\">'password'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'db_name'</span><span class=\"p\">:</span> <span class=\"s1\">'test_db'</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">commuter</span> <span class=\"o\">=</span> <span class=\"n\">PgCommuter</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">conn_params</span><span class=\"p\">)</span>\n</pre>\n<h4>Basic usage</h4>\n<p>Basic operations are provided with <code>select</code>, <code>insert</code> and <code>execute</code> methods.</p>\n<pre><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">commuter</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"s1\">'select * from people where age &gt; </span><span class=\"si\">%s</span><span class=\"s1\"> and salary &gt; </span><span class=\"si\">%s</span><span class=\"s1\">'</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"mi\">55</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">))</span>\n<span class=\"n\">commuter</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"s1\">'people'</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"n\">commuter</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s1\">'insert into people values (</span><span class=\"si\">%s</span><span class=\"s1\">, </span><span class=\"si\">%s</span><span class=\"s1\">)'</span><span class=\"p\">,</span> <span class=\"nb\">vars</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">'Yeltsin'</span><span class=\"p\">,</span> <span class=\"mi\">72</span><span class=\"p\">))</span> \n</pre>\n<p>To execute multiple SQL statements with one call, use <code>executescript</code>.</p>\n<pre><span class=\"n\">commuter</span><span class=\"o\">.</span><span class=\"n\">execute_script</span><span class=\"p\">(</span><span class=\"n\">path2script</span><span class=\"p\">)</span>\n</pre>\n<h4>Setting schema in constructor</h4>\n<p>If you operate only on tables within the specific schema, it could make sense to specify the name of database schema\nwhen you create the commuter instance.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">db_commuter.commuters</span> <span class=\"kn\">import</span> <span class=\"n\">PgCommuter</span>\n<span class=\"n\">commuter</span> <span class=\"o\">=</span> <span class=\"n\">PgCommuter</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"p\">,</span> <span class=\"n\">user</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">db_name</span><span class=\"p\">,</span> <span class=\"n\">schema</span><span class=\"o\">=</span><span class=\"s1\">'model'</span><span class=\"p\">)</span>\n</pre>\n<h4>Insert row and return serial key</h4>\n<p>Use <code>insert_return</code> method to insert a new row to the table and return the serial key of the newly inserted row.</p>\n<pre><span class=\"n\">cmd</span> <span class=\"o\">=</span> <span class=\"s1\">'INSERT INTO people (name, age) VALUES (</span><span class=\"si\">%s</span><span class=\"s1\">, </span><span class=\"si\">%s</span><span class=\"s1\">)'</span>\n<span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">'Yeltsin'</span><span class=\"p\">,</span> <span class=\"s1\">'72'</span><span class=\"p\">)</span>\n<span class=\"n\">pid</span> <span class=\"o\">=</span> <span class=\"n\">commuter</span><span class=\"o\">.</span><span class=\"n\">insert_return</span><span class=\"p\">(</span><span class=\"n\">cmd</span><span class=\"p\">,</span> <span class=\"n\">values</span><span class=\"o\">=</span><span class=\"n\">values</span><span class=\"p\">,</span> <span class=\"n\">return_id</span><span class=\"o\">=</span><span class=\"s1\">'person_id'</span><span class=\"p\">)</span>\n</pre>\n<p>In the example above the table <code>people</code> should contain a serial key <code>person_id</code>.</p>\n<h4>Insert row</h4>\n<p>Alternatively, you can use <code>insert_row</code> method to insert one new row.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">datetime</span>\n\n<span class=\"n\">commuter</span><span class=\"o\">.</span><span class=\"n\">insert_row</span><span class=\"p\">(</span>\n    <span class=\"n\">table_name</span><span class=\"o\">=</span><span class=\"s1\">'people'</span><span class=\"p\">,</span> \n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'Yeltsin'</span><span class=\"p\">,</span> \n    <span class=\"n\">age</span><span class=\"o\">=</span><span class=\"s1\">'72'</span><span class=\"p\">,</span>\n    <span class=\"n\">birth_date</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">1931</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n</pre>\n<p>It also supports the returning of the serial key.</p>\n<pre><span class=\"n\">pid</span> <span class=\"o\">=</span> <span class=\"n\">commuter</span><span class=\"o\">.</span><span class=\"n\">insert_row</span><span class=\"p\">(</span>\n    <span class=\"n\">table_name</span><span class=\"o\">=</span><span class=\"s1\">'people'</span><span class=\"p\">,</span> \n    <span class=\"n\">return_id</span><span class=\"o\">=</span><span class=\"s1\">'person_id'</span><span class=\"p\">,</span> \n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'Yeltsin'</span><span class=\"p\">,</span> \n    <span class=\"n\">age</span><span class=\"o\">=</span><span class=\"s1\">'72'</span><span class=\"p\">)</span>\n</pre>\n<h4>copy_from</h4>\n<p>In contrast to <code>insert</code> method which, in turn, uses pandas <code>to_sql</code> machinery, the <code>copy_from</code> method\nefficiently copies data from DataFrame to database employing PostgreSQL <code>copy_from</code> command.</p>\n<pre><span class=\"n\">commuter</span><span class=\"o\">.</span><span class=\"n\">copy_from</span><span class=\"p\">(</span><span class=\"n\">table_name</span><span class=\"o\">=</span><span class=\"s1\">'people'</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">)</span>\n</pre>\n<p>As compared to <code>insert</code>, this method works much more effective on the large dataframes.\nYou can also set <code>format_data</code> parameter as <code>True</code> to allow automatically format your\nDataFrame before calling <code>copy_from</code> command.</p>\n<pre><span class=\"n\">commuter</span><span class=\"o\">.</span><span class=\"n\">copy_from</span><span class=\"p\">(</span><span class=\"n\">table_name</span><span class=\"o\">=</span><span class=\"s1\">'people'</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">format_data</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<h4>Delete table</h4>\n<pre><span class=\"n\">commuter</span><span class=\"o\">.</span><span class=\"n\">delete_table</span><span class=\"p\">(</span><span class=\"n\">table_name</span><span class=\"o\">=</span><span class=\"s1\">'people'</span><span class=\"p\">,</span> <span class=\"n\">schema</span><span class=\"o\">=</span><span class=\"s1\">'my_schema'</span><span class=\"p\">)</span>\n</pre>\n<h4>Check if table exists</h4>\n<p>Return <code>True</code> if table exists, otherwise return <code>False</code>.</p>\n<pre><span class=\"n\">is_exist</span> <span class=\"o\">=</span> <span class=\"n\">commuter</span><span class=\"o\">.</span><span class=\"n\">is_table_exist</span><span class=\"p\">(</span><span class=\"n\">table_name</span><span class=\"o\">=</span><span class=\"s1\">'people'</span><span class=\"p\">,</span> <span class=\"n\">schema</span><span class=\"o\">=</span><span class=\"s1\">'my_schema'</span><span class=\"p\">)</span>\n</pre>\n<h4>Column names</h4>\n<p>Return list of the column names of the given table.</p>\n<pre><span class=\"n\">columns</span> <span class=\"o\">=</span> <span class=\"n\">commuter</span><span class=\"o\">.</span><span class=\"n\">get_column_names</span><span class=\"p\">(</span><span class=\"n\">table_name</span><span class=\"o\">=</span><span class=\"s1\">'people'</span><span class=\"p\">,</span> <span class=\"n\">schema</span><span class=\"o\">=</span><span class=\"s1\">'my_schema'</span><span class=\"p\">)</span>\n</pre>\n<h4>Amount of connections to database</h4>\n<p>Return the amount of active connections to the database.</p>\n<pre><span class=\"n\">n_connections</span> <span class=\"o\">=</span> <span class=\"n\">commuter</span><span class=\"o\">.</span><span class=\"n\">get_connections_count</span><span class=\"p\">()</span>\n</pre>\n<h4>Resolve primary conflicts</h4>\n<p>This method can be used when you want to apply <code>copy_from</code> and the DataFrame contains\nrows conflicting with the primary key (duplicates). To remove conflicted rows\nfrom the DataFrame you can use <code>resolve_primary_conflicts</code>.</p>\n<pre><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">commuter</span><span class=\"o\">.</span><span class=\"n\">resolve_primary_conflicts</span><span class=\"p\">(</span>\n    <span class=\"n\">table_name</span><span class=\"o\">=</span><span class=\"s1\">'payments'</span><span class=\"p\">,</span>\n    <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">df</span><span class=\"p\">,</span>\n    <span class=\"n\">p_key</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'payment_date'</span><span class=\"p\">,</span> <span class=\"s1\">'payment_type'</span><span class=\"p\">],</span>\n    <span class=\"n\">filter_col</span><span class=\"o\">=</span><span class=\"s1\">'payment_date'</span><span class=\"p\">,</span>\n    <span class=\"n\">schema</span><span class=\"o\">=</span><span class=\"s1\">'my_schema'</span><span class=\"p\">)</span>\n</pre>\n<p>It selects data from the <code>table_name</code> where value in <code>filter_col</code> is greater or equal\nthe minimal found value in <code>filter_col</code> of the given DataFrame. Rows having primary\nkey which is already presented in selected data are deleted from the DataFrame.</p>\n<p>You need to specify parameter <code>p_key</code> with the list of column names representing the primary key.</p>\n<h4>Resolve foreign conflicts</h4>\n<p>This method selects data from <code>parent_table_name</code> where value in <code>filter_parent</code> column\nis greater or equal the minimal found value in <code>filter_child</code> column of the given DataFrame.\nRows having foreign key which is already presented in selected data are deleted from DataFrame.</p>\n<pre><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">commuter</span><span class=\"o\">.</span><span class=\"n\">resolve_foreign_conflicts</span><span class=\"p\">(</span>\n    <span class=\"n\">parent_table_name</span><span class=\"o\">=</span><span class=\"s1\">'people'</span><span class=\"p\">,</span>\n    <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">df</span><span class=\"p\">,</span>\n    <span class=\"n\">f_key</span><span class=\"o\">=</span><span class=\"s1\">'person_id'</span><span class=\"p\">,</span>\n    <span class=\"n\">filter_parent</span><span class=\"o\">=</span><span class=\"s1\">'person_id'</span><span class=\"p\">,</span>\n    <span class=\"n\">filter_child</span><span class=\"o\">=</span><span class=\"s1\">'person_id'</span><span class=\"p\">,</span>\n    <span class=\"n\">schema</span><span class=\"o\">=</span><span class=\"s1\">'my_schema'</span><span class=\"p\">)</span>\n</pre>\n<p>Parameter <code>f_key</code> should be specified with the list of column names represented the foreign key.</p>\n<h2>License</h2>\n<p>Package is released under <a href=\"https://github.com/viktorsapozhok/db-commuter/blob/master/LICENSE\" rel=\"nofollow\">MIT License</a>.</p>\n\n          </div>"}, "last_serial": 6292512, "releases": {"0.1.10": [{"comment_text": "", "digests": {"md5": "73ab4c5ce80c7cd9768ab88bd86d3f33", "sha256": "4d796e269bf73b7cd2936ceea38f511847c48bd9eb54dead473fe4c055ddd694"}, "downloads": -1, "filename": "db_commuter-0.1.10-py3-none-any.whl", "has_sig": false, "md5_digest": "73ab4c5ce80c7cd9768ab88bd86d3f33", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8863, "upload_time": "2019-12-08T16:12:44", "upload_time_iso_8601": "2019-12-08T16:12:44.582886Z", "url": "https://files.pythonhosted.org/packages/a3/ce/390ed0666d11bd2722c2f1968dc87c6ceefa906881512d159e739f43cb57/db_commuter-0.1.10-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3efa1387cc1950933ad8a465f9f70e62", "sha256": "0195502d694b7139a7d222b08b53dbfe195c9d9b9c328e9869e092e238bfc144"}, "downloads": -1, "filename": "db-commuter-0.1.10.tar.gz", "has_sig": false, "md5_digest": "3efa1387cc1950933ad8a465f9f70e62", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8292, "upload_time": "2019-12-08T16:12:46", "upload_time_iso_8601": "2019-12-08T16:12:46.594987Z", "url": "https://files.pythonhosted.org/packages/b8/ce/73931fecc054e4c0e04d3f76a87b65f2554bda980f5f285eebce56039bf5/db-commuter-0.1.10.tar.gz", "yanked": false}], "0.1.11": [{"comment_text": "", "digests": {"md5": "6010811635b187eebedff24255db4f84", "sha256": "50d43dd90bd3d84d817f19d2c8ad403a0f9b26fcff16cdedcd9c461a9cca8352"}, "downloads": -1, "filename": "db_commuter-0.1.11-py3-none-any.whl", "has_sig": false, "md5_digest": "6010811635b187eebedff24255db4f84", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 9948, "upload_time": "2019-12-09T22:20:44", "upload_time_iso_8601": "2019-12-09T22:20:44.949684Z", "url": "https://files.pythonhosted.org/packages/35/11/c4ec64b99fc22d9154cee59911b973cbf827fd32ca3a84547f8ac9ceb3ec/db_commuter-0.1.11-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a97b0660e1c08965cb6d9c505c9844db", "sha256": "d33afadda792378c76418d280c1bdb2c504d9718af7584b6cdf38b3b5bd68945"}, "downloads": -1, "filename": "db-commuter-0.1.11.tar.gz", "has_sig": false, "md5_digest": "a97b0660e1c08965cb6d9c505c9844db", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9914, "upload_time": "2019-12-09T22:20:46", "upload_time_iso_8601": "2019-12-09T22:20:46.788406Z", "url": "https://files.pythonhosted.org/packages/6f/5d/f398c2e9b8b1eb301d8448508f6f2e7bfa38b1128b6fad99935464bb6a3e/db-commuter-0.1.11.tar.gz", "yanked": false}], "0.1.12": [{"comment_text": "", "digests": {"md5": "33445291c5b280896b8f79e9b32e5d70", "sha256": "47cb75a9b89a274221213fcd733df0f7df937bc85ccf2c47cb586c574c5e6344"}, "downloads": -1, "filename": "db_commuter-0.1.12-py3-none-any.whl", "has_sig": false, "md5_digest": "33445291c5b280896b8f79e9b32e5d70", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 9956, "upload_time": "2019-12-09T22:47:31", "upload_time_iso_8601": "2019-12-09T22:47:31.401337Z", "url": "https://files.pythonhosted.org/packages/73/fc/34d9636efc79b26f1a4005aa2c6711a54d1f8ffc2a24419334bb9bccad1d/db_commuter-0.1.12-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c39eb66db11713838ad87741e95d2a6a", "sha256": "f2ab406642afdc3dca1ae6624a1a9d128e21073405ff1318777d6a127f374b0f"}, "downloads": -1, "filename": "db-commuter-0.1.12.tar.gz", "has_sig": false, "md5_digest": "c39eb66db11713838ad87741e95d2a6a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9901, "upload_time": "2019-12-09T22:47:32", "upload_time_iso_8601": "2019-12-09T22:47:32.886671Z", "url": "https://files.pythonhosted.org/packages/b7/bb/c601185ca22bdfe922d7708b6c8a82f7adc56727cecde4b1277e5185c142/db-commuter-0.1.12.tar.gz", "yanked": false}], "0.1.13": [{"comment_text": "", "digests": {"md5": "ee55169dcedbb71e8f0a6e9d2209db0a", "sha256": "019bfeebcbed90d34c87d286fc64fc23873dca9f2cfba53a6431202624ecc3c1"}, "downloads": -1, "filename": "db_commuter-0.1.13-py3-none-any.whl", "has_sig": false, "md5_digest": "ee55169dcedbb71e8f0a6e9d2209db0a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 10272, "upload_time": "2019-12-13T12:38:25", "upload_time_iso_8601": "2019-12-13T12:38:25.699245Z", "url": "https://files.pythonhosted.org/packages/06/53/623f9386e75e8fa99d63958b36a96c76f81cbe18c6eca212aa3e85539924/db_commuter-0.1.13-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fefbe279052b888f2723538f495607bf", "sha256": "4d7f10a9c7f3dc94ea3556a4378d220f83cff773ebdca4c06b2387af03b0eef2"}, "downloads": -1, "filename": "db-commuter-0.1.13.tar.gz", "has_sig": false, "md5_digest": "fefbe279052b888f2723538f495607bf", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10344, "upload_time": "2019-12-13T12:38:27", "upload_time_iso_8601": "2019-12-13T12:38:27.750798Z", "url": "https://files.pythonhosted.org/packages/3a/62/1203cebf3bc219b7e19a4a753e03b5af8cf577073f92454f1741aebe51be/db-commuter-0.1.13.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "31f6158a22e36cc204349cb6663d7516", "sha256": "8dc0c950c57ad0c75b0b0baf469fd12ffbe4dc5afa94fe539ccc4936cf3e579e"}, "downloads": -1, "filename": "db_commuter-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "31f6158a22e36cc204349cb6663d7516", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6641, "upload_time": "2019-05-22T21:10:01", "upload_time_iso_8601": "2019-05-22T21:10:01.444131Z", "url": "https://files.pythonhosted.org/packages/e3/2a/36f2a1820c5e87de5cc2024dfbf9126bedf0924ebc44bb601d24d311acfa/db_commuter-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cc52e7cf6131d0a257de5aefdd95b71d", "sha256": "8b94a4001ad642ce091aff3362aa136a2e32ae6468c6c02bf9a6e0a031e47cba"}, "downloads": -1, "filename": "db-commuter-0.1.2.tar.gz", "has_sig": false, "md5_digest": "cc52e7cf6131d0a257de5aefdd95b71d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5220, "upload_time": "2019-05-22T21:10:02", "upload_time_iso_8601": "2019-05-22T21:10:02.934582Z", "url": "https://files.pythonhosted.org/packages/a3/81/236bad0cb1d3a56e72417133a8884a9f4724bb882f53249b28510b6c7e36/db-commuter-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "662dd30bacc1168f20e44eaa57f056c3", "sha256": "f5673f5be37d75ea03c3be4d865f0ce69689be4e1715b71398891fe8e6def8f6"}, "downloads": -1, "filename": "db_commuter-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "662dd30bacc1168f20e44eaa57f056c3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6649, "upload_time": "2019-06-05T13:45:56", "upload_time_iso_8601": "2019-06-05T13:45:56.169831Z", "url": "https://files.pythonhosted.org/packages/eb/d0/846a26bd951c58267a810de6a972387f0e5ff133d6510c9e8d0152b43523/db_commuter-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0f0b4740a998784fd1014e2ead1e86ae", "sha256": "e40a1f2a5e4bd9d519e0a07ce21bc1ddfc32f56e1fb9a4b3229e3c3a795e6f10"}, "downloads": -1, "filename": "db-commuter-0.1.3.tar.gz", "has_sig": false, "md5_digest": "0f0b4740a998784fd1014e2ead1e86ae", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5218, "upload_time": "2019-06-05T13:45:57", "upload_time_iso_8601": "2019-06-05T13:45:57.385287Z", "url": "https://files.pythonhosted.org/packages/e9/56/c7f67c7b7946fa7ea89adf48bcaa4bd1682aa53ee07e32a6310076ef6be0/db-commuter-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "41cf2411034b0a5e205f218f13464256", "sha256": "065603e18acb483b1594f925206eaadf59b433994d575374007e594609807634"}, "downloads": -1, "filename": "db_commuter-0.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "41cf2411034b0a5e205f218f13464256", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6647, "upload_time": "2019-06-13T12:24:11", "upload_time_iso_8601": "2019-06-13T12:24:11.176858Z", "url": "https://files.pythonhosted.org/packages/2c/4f/b99e3c99ff3c282c8c6cf1b39a53eb3d60e04523a736ef89811e248c507f/db_commuter-0.1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "85ba0171f8f87b30c0902e7ff090e6ab", "sha256": "8edbbb369678d956526023abfdb003df8d0e9faacb0529a17be180a002df955f"}, "downloads": -1, "filename": "db-commuter-0.1.4.tar.gz", "has_sig": false, "md5_digest": "85ba0171f8f87b30c0902e7ff090e6ab", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5217, "upload_time": "2019-06-13T12:24:12", "upload_time_iso_8601": "2019-06-13T12:24:12.771419Z", "url": "https://files.pythonhosted.org/packages/36/0a/b8ac63dbf426df57652d17125dc9e627f247b6c62064bfd58d35cd5c0c8c/db-commuter-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "2930127d1edb3f101c8501711c53de52", "sha256": "f86d6dbbc5c7a81f93241332bfd528713e909ccc5dcb825f2f6206ea84f2ade5"}, "downloads": -1, "filename": "db_commuter-0.1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "2930127d1edb3f101c8501711c53de52", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6943, "upload_time": "2019-07-30T09:28:23", "upload_time_iso_8601": "2019-07-30T09:28:23.007097Z", "url": "https://files.pythonhosted.org/packages/97/34/d5455c780fbe41a658d10aa2181c5e1d76b4e8e0608892f5305cd2e19b59/db_commuter-0.1.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f46fd37cd32ba215db3281a1a64071e3", "sha256": "4a7b6811b8a39e715501bdf4c738dfdd2d0d2799634fe640f5c4007eddd5cc58"}, "downloads": -1, "filename": "db-commuter-0.1.5.tar.gz", "has_sig": false, "md5_digest": "f46fd37cd32ba215db3281a1a64071e3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5378, "upload_time": "2019-07-30T09:28:24", "upload_time_iso_8601": "2019-07-30T09:28:24.198889Z", "url": "https://files.pythonhosted.org/packages/7f/6b/b49d831b7140e55e78ae43eb228013bc507c3273ba2cedfc31fcb4c48411/db-commuter-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "df97cb80236ca9df937a3135e2fc7b78", "sha256": "17e36707cd5532b2ee2bb1ec4cb6a2bd2bcd0dc39fafff5451a09af8ae8d6988"}, "downloads": -1, "filename": "db_commuter-0.1.6-py3-none-any.whl", "has_sig": false, "md5_digest": "df97cb80236ca9df937a3135e2fc7b78", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6953, "upload_time": "2019-07-30T11:20:34", "upload_time_iso_8601": "2019-07-30T11:20:34.122872Z", "url": "https://files.pythonhosted.org/packages/36/c1/3b630bf7dc0591b386c3f8a92af2d1a3b51f5745fcdbf138ee7acc7db2fd/db_commuter-0.1.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "143c8c00542af60ccec7a2621abb56b9", "sha256": "927fb93000a79b27a70e5ed1721ad52399530f55fc931f3ec5a80405cc6712f9"}, "downloads": -1, "filename": "db-commuter-0.1.6.tar.gz", "has_sig": false, "md5_digest": "143c8c00542af60ccec7a2621abb56b9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5413, "upload_time": "2019-07-30T11:20:35", "upload_time_iso_8601": "2019-07-30T11:20:35.232916Z", "url": "https://files.pythonhosted.org/packages/6b/f3/3bf2601820193b9be3c76b3ed78e389484847ef319d6c652776ed55322ac/db-commuter-0.1.6.tar.gz", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "24a2debdbf6c150e09d79727da910683", "sha256": "3419e992be8b3c541a6c482e7d1823c9a701db644bd59ffdb05a0b83d6ffc69c"}, "downloads": -1, "filename": "db_commuter-0.1.7-py3-none-any.whl", "has_sig": false, "md5_digest": "24a2debdbf6c150e09d79727da910683", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6966, "upload_time": "2019-08-01T19:57:03", "upload_time_iso_8601": "2019-08-01T19:57:03.847878Z", "url": "https://files.pythonhosted.org/packages/03/5b/0e0b2eb9a244094865385888693ca5d1b073909482973a319ec4b30f1471/db_commuter-0.1.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "36a00d9cf294e0721feac7db1d50a7fd", "sha256": "9fa5973d312e775188950baf2dc00bfe5d368d39f077357ba4a66222abee4619"}, "downloads": -1, "filename": "db-commuter-0.1.7.tar.gz", "has_sig": false, "md5_digest": "36a00d9cf294e0721feac7db1d50a7fd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5418, "upload_time": "2019-08-01T19:57:05", "upload_time_iso_8601": "2019-08-01T19:57:05.770002Z", "url": "https://files.pythonhosted.org/packages/72/03/6b551a334c24a7029e82dd46d54f883ea9449045acfd9e5c3d72436dbdb6/db-commuter-0.1.7.tar.gz", "yanked": false}], "0.1.8": [{"comment_text": "", "digests": {"md5": "e60a8529792cf9f38a67c1b7cad1c4ea", "sha256": "caf54e89866f8862581079821c6d721c5afbbae92d6af18044b509cb1a257818"}, "downloads": -1, "filename": "db_commuter-0.1.8-py3-none-any.whl", "has_sig": false, "md5_digest": "e60a8529792cf9f38a67c1b7cad1c4ea", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7748, "upload_time": "2019-10-24T11:43:19", "upload_time_iso_8601": "2019-10-24T11:43:19.711751Z", "url": "https://files.pythonhosted.org/packages/02/79/0ffe4d8d4bb97de21c7a34d441becddacfc1fcbe39b314f92784ed36841d/db_commuter-0.1.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dd83508147d390fbb0f3a674e78ab073", "sha256": "e147b5f5bf77b9ac1682eb43e9ecea25c41591039e5c179c7590a9a3e61e9d75"}, "downloads": -1, "filename": "db-commuter-0.1.8.tar.gz", "has_sig": false, "md5_digest": "dd83508147d390fbb0f3a674e78ab073", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6217, "upload_time": "2019-10-24T11:43:21", "upload_time_iso_8601": "2019-10-24T11:43:21.183361Z", "url": "https://files.pythonhosted.org/packages/18/d0/99c8e92184a64d2a49e9d956f8ccac3f57c54bdac0970855aaf436d6926f/db-commuter-0.1.8.tar.gz", "yanked": false}], "0.1.9": [{"comment_text": "", "digests": {"md5": "b50700f25b922a9dadaf0a8b248d48b4", "sha256": "ba96e9d3e0ee4386f8ae6deb8c10500c53e926ea2f9893139d06904355f12c61"}, "downloads": -1, "filename": "db_commuter-0.1.9-py3-none-any.whl", "has_sig": false, "md5_digest": "b50700f25b922a9dadaf0a8b248d48b4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8060, "upload_time": "2019-11-04T22:23:43", "upload_time_iso_8601": "2019-11-04T22:23:43.770349Z", "url": "https://files.pythonhosted.org/packages/5c/e5/55a9b81b35051328e72e6c6ddbc8a7eb3e4bdb1bea762732d4d4e5d73033/db_commuter-0.1.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7af3fe63cd5f12ba9b5a4ccb96143f93", "sha256": "8e0a9ce941d23c5b2501eacded1fe6ef84a2ce21a63866e1d73a97f9212f54d9"}, "downloads": -1, "filename": "db-commuter-0.1.9.tar.gz", "has_sig": false, "md5_digest": "7af3fe63cd5f12ba9b5a4ccb96143f93", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6779, "upload_time": "2019-11-04T22:23:45", "upload_time_iso_8601": "2019-11-04T22:23:45.888436Z", "url": "https://files.pythonhosted.org/packages/27/fb/7b97d999b2c0764082d834f98ef61215969b630fefd8a76de2e382ccab20/db-commuter-0.1.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ee55169dcedbb71e8f0a6e9d2209db0a", "sha256": "019bfeebcbed90d34c87d286fc64fc23873dca9f2cfba53a6431202624ecc3c1"}, "downloads": -1, "filename": "db_commuter-0.1.13-py3-none-any.whl", "has_sig": false, "md5_digest": "ee55169dcedbb71e8f0a6e9d2209db0a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 10272, "upload_time": "2019-12-13T12:38:25", "upload_time_iso_8601": "2019-12-13T12:38:25.699245Z", "url": "https://files.pythonhosted.org/packages/06/53/623f9386e75e8fa99d63958b36a96c76f81cbe18c6eca212aa3e85539924/db_commuter-0.1.13-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fefbe279052b888f2723538f495607bf", "sha256": "4d7f10a9c7f3dc94ea3556a4378d220f83cff773ebdca4c06b2387af03b0eef2"}, "downloads": -1, "filename": "db-commuter-0.1.13.tar.gz", "has_sig": false, "md5_digest": "fefbe279052b888f2723538f495607bf", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10344, "upload_time": "2019-12-13T12:38:27", "upload_time_iso_8601": "2019-12-13T12:38:27.750798Z", "url": "https://files.pythonhosted.org/packages/3a/62/1203cebf3bc219b7e19a4a753e03b5af8cf577073f92454f1741aebe51be/db-commuter-0.1.13.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:39:58 2020"}