{"info": {"author": "Travis Bauer", "author_email": "tlbauer@sandia.gov", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Description\n\ngalen-view is a visualizer for exploring the CORD-19 dataset on a stand-alone \ndesktop computer.  The code is intended to be small and straight-forward, \nenabling researchers to expand and modify the code.\n\nThis software was written as part of an effort at Sandia National\nLaboratories described\n[here](https://github.com/sandialabs/galen-view/blob/master/SAND2020-4510-RapidResponseDataScienceForCOVID-19.pdf)\n\nThis code is named after Galen, a second century Greek physician who\ndocumented the Antonine Plague in the Roman Empire.\n\n# Installation \n\n## Create a python 3 environment\n\ngalen-view was written and tested in python 3 and uses syntax specific to \npython 3.  To get started, create a python 3 environment.\n\nFor example, if you are using anaconda, you can execute the following:\n\n```python\nconda create -n galenenv python=3\nconda activate galenenv\n```\n\n## Install the wheel file\n\nInstalling the wheel file will install galen-view along with it's various\ndependencies.  galen-view is based on holoviews, so there are a large number\nof dependencies.\n\nThis can be done using:\n\n```bash\npip install galen_view-0.0.1-py3-none-any.whl\n```\n\n# Data Download and Configuration\n\nThe module sandia.galen.dataprep contains several methods for downloading, \nanalyzing, and indexing the cord-19 dataset.  For convenience, the module\ncan be executed as an \"all-in-one\" call do perform all these funcions and\nprepare the data for galen-view.  \n\nIf you are behind a proxy, you will need to set the environment variables\nin order to download the data.  This can be accomplished by setting the \nhttp_proxy and https_proxy environment variables.  If the\n\"pip install\" step above worked, it is highly likely that you already have\nthem set properly. Note that this is only necessary for the \ndownload and not for galen-view to work after that.  \n\nThis will download files and create more.  It is recommended to do this\nin a fresh directory.\n\nFor example:\n\n```bash\nmkdir galen_data\ncd galen_data\npython3 -m sandia.galen.dataprep\n```\n\nThis can take up to two hours to run.  You will see progress during\neach step.  You should see something similar to the following:\n\n```\n$ python3 -m sandia.galen.dataprep\nInitializing Data in Current Directory\nChecking for Data in this Directory\nDownloading the metadata file\nDownloading the CORD-19 Dataset\nProcessing https://path/to/biorxiv_medrxiv.tar.gz ... Done.\nProcessing https://path/to/comm_use_subset.tar.gz ... Done.\nProcessing https://path/to/noncomm_use_subset.tar.gz ... Done.\nProcessing https://path/to/pmc_custom_license.tar.gz ... Done.\nProcessing https:///custom_license.tar.gz ... Done.\nProcessing https:///cord19_specter_embeddings_2020-04-03.tar.gz ... Done.\nProcessing https:///cord19_specter_embeddings_2020-04-10.tar.gz ... Done.\n========\nMaking the Coordinates to Visualize the Data\n========\nBuilding a searchable index from the documents\n..........\n..........\n..........\n[There will be more lines like this]\n..........\n..........\n..........\nDone. Committing Index\nDone Indexing\n========\nDone.  Run \"jupyter-notebook GalenView.ipynb\" and run all cells to explore the data.\n```\n\n# Usage\n\nsandia.galen.dataprep's final step is to copy a jupyter notebook\ninto the directory that can be used to view and explore the data.\nYou can open this notebook in a variety of ways, but the following\nwill open it directly:\n\n```bash\njupyter-notebook GalenView.ipynb\n```\n\nAfter executing this, a web browser should open with the jupyter\nnotebook.  You still have to run all the cells in the notebook to\nactivate and use the visualization.\n\n<table style=\"width:100%\">\n\n<tr>\n<td><img src=\"https://raw.githubusercontent.com/sandialabs/galen-view/master/other/20200422-GalenView_RunNotebookMenu.png\" alt=\"Run Notebook Menu\">\n<td>After the notebook loads, click \"Restart & Runn All\" from the menu at the top of the page.</td>\n</tr>\n\n<tr>\n<td><img src=\"https://raw.githubusercontent.com/sandialabs/galen-view/master/other/20200422-GalenView_RunNotebookButton.png\" alt=\"Run Notebook Button\">\n<td>A window will appear prompting you to restart the notebook.  Click the red button.</td>\n</tr>\n\n</table>\n\nOn the page, you will now see the full interface.  Each point in the\ngraph represents a document.  Hovering your mouse over a point or\ngroup of points will display the title.  Clicking on a point will\ncause the title and first 1500 characters (if full text is included in\nthe CORD19 dataset) on the right hand side.  Clicking on the\n\"Document\" tab will show the full text of the document.  \n\n<table style=\"width:100%\">\n<tr>\n<td><img src=\"https://raw.githubusercontent.com/sandialabs/galen-view/master/other/20200422-GalenView_Controls.png\" alt=\"Controls\"></td>\n<td>This interface lets you explore the various clusters of data by panning \nand zooming.  The individual controls are described at the left.</td>\n</tr>\n</table>\n\nYou can type in a query in the Search box and press enter.  The points\ncorresponding to the matching documents will turn into red triangles.\nNote that the documents are indexed using a python library called\n\"whoosh\" which contains a query language that lets you use advanced\nsyntax such as boolean and proximity queries.  More information on\nthat query syntax can be found\n[here](https://whoosh.readthedocs.io/en/latest/querylang.html).\n\nThis following is a short description of each part of the user interface:\n\n<img src=\"https://raw.githubusercontent.com/sandialabs/galen-view/master/other/20200422-GalenView_InterfaceExplanation.png\" alt=\"interface explanation\">\n\nIn the above example, the user has searched for the term \"mers.\"  The\ndocuments that reference \"mers\" are mostly found in a particular\ncluster at the lower left.  Note that because of how the layout\nalgorithm works, the cluster in your interface may be different.  By\nusing the controls, the user can zoom in on that cluster.  The\nfollowing image shows what that might look like.  Note that the \"mers\"\nmatches are in a cluster, but you can see similar clusters nearby.\nThrough hovering, zomming, panning, and clicking, the user can explore\nthe data set.\n\n<img src=\"https://raw.githubusercontent.com/sandialabs/galen-view/master/other/20200422-GalenView_InterfaceZoomed.png\" alt=\"zoomed interface\">\n\n# Coloring\n\n(Note: This section requres python development expertise)\n\nIn the paper associated with this codebase, compression-based\nanalytics were used to color the documents according to how well they\nmatched snippets of text provided by subject matter experts.  The code\nto perform the compression-based analytics is not included in this\ncodebase.  However, it is possible to score documents in many\ndifferent ways (even by something like year of publication).  If you\nhave a methodology for scoring the documents, you can get them into \nthe visualization using the following steps:\n\n1. Run the \"Data Download and Configuration\" step above.  When it\nfinishes, there will be a file called \"metadata.df.pickle.\" in the\ndata directory.  This is a pandas DataFrame that can be read using \npandas.read_pickle.  The index (and integer) corresponds with the \ninteger used by cotools in the cord-19-tools and is how the tool \nidentifies the documents.  \n\n2. Create a score per document using whatever means is useful for \nyour subject matter experts.\n\n3. Append those scores as a new column to the DataFrame from step 1.  \nWrite it back out to metadata.df.pickle.\n\n4. Create a Jupyter Notebook and create the visualization using the \nfollowing code (where \"myscore\" is the name of column you added):\n\n```python\nfrom sandia.galen.viewer import DocumentSetExplorer\ndisplay(HTML(\"<style>.container { width:100% !important; }</style>\"))\nhv.extension('bokeh')\nd = DocumentSetExplorer(scoring_cols=[\"myscore\"])\nd.main_viz()\n```\n\nIf you want to test how this works before trying your own score,\nyou can skip steps 2 and 3 and use \"X\" in place of \"myscore.\"  This will\nsimply color the points according to their X value.\n\n# Notes and TOOD\n\n* A large percentage of the documents do not have associated with\n  them.  All documents are arranged in the 2D space using both the\n  title and content.  But the search only searches the content unless\n  you explicitly specify the title (using title:query).  This is by\n  design but can be confusing when navigating the space.  This could\n  be changed in a future version.\n\n* There currently is no way to set aside a document.  This is entirely\n  possible within the holoviews framework but is not yet impelemented.\n\n* It would be useful to include author, date published, journal, and\n  other fields in the metadata.  This information for many of the\n  documents are in the metadata file and could be incorporated in the\n  hover and visualization.\n\n* Links to the original documents that include tables and figures is\n  important.  For the documents that contain pubmed ids in the\n  metadata, this is straight forward to do.\n\n* Implement better parsing of the documents, especially adding an\n  ability to jump directly to different sections, depending on the\n  specific question being asked.  Sometimes, for example, it would be\n  helpful to jump directly to the abstract.  In other cases, jumping\n  directly to the \"methods\" section would be best.  Parsing research\n  papers in this way is hard, but to the extent it can be done, the\n  right hand summary pane could be customizable.\n\n* Add in paragraph spacing to increase readability.  Right now, the\n  document display used that cotools returns.  But the underlying text\n  is generally stored in a way that is better broken up and could be\n  displayed with better paragraph breaks.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/sandialabs/galen-view", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "galen-view", "package_url": "https://pypi.org/project/galen-view/", "platform": "", "project_url": "https://pypi.org/project/galen-view/", "project_urls": {"Homepage": "https://github.com/sandialabs/galen-view"}, "release_url": "https://pypi.org/project/galen-view/0.0.1/", "requires_dist": ["holoviews[recommended]", "whoosh", "cord-19-tools", "scikit-learn", "requests"], "requires_python": ">=3.6", "summary": "A utility for viewing and exploring the cord-19 dataset", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Description</h1>\n<p>galen-view is a visualizer for exploring the CORD-19 dataset on a stand-alone\ndesktop computer.  The code is intended to be small and straight-forward,\nenabling researchers to expand and modify the code.</p>\n<p>This software was written as part of an effort at Sandia National\nLaboratories described\n<a href=\"https://github.com/sandialabs/galen-view/blob/master/SAND2020-4510-RapidResponseDataScienceForCOVID-19.pdf\" rel=\"nofollow\">here</a></p>\n<p>This code is named after Galen, a second century Greek physician who\ndocumented the Antonine Plague in the Roman Empire.</p>\n<h1>Installation</h1>\n<h2>Create a python 3 environment</h2>\n<p>galen-view was written and tested in python 3 and uses syntax specific to\npython 3.  To get started, create a python 3 environment.</p>\n<p>For example, if you are using anaconda, you can execute the following:</p>\n<pre><span class=\"n\">conda</span> <span class=\"n\">create</span> <span class=\"o\">-</span><span class=\"n\">n</span> <span class=\"n\">galenenv</span> <span class=\"n\">python</span><span class=\"o\">=</span><span class=\"mi\">3</span>\n<span class=\"n\">conda</span> <span class=\"n\">activate</span> <span class=\"n\">galenenv</span>\n</pre>\n<h2>Install the wheel file</h2>\n<p>Installing the wheel file will install galen-view along with it's various\ndependencies.  galen-view is based on holoviews, so there are a large number\nof dependencies.</p>\n<p>This can be done using:</p>\n<pre>pip install galen_view-0.0.1-py3-none-any.whl\n</pre>\n<h1>Data Download and Configuration</h1>\n<p>The module sandia.galen.dataprep contains several methods for downloading,\nanalyzing, and indexing the cord-19 dataset.  For convenience, the module\ncan be executed as an \"all-in-one\" call do perform all these funcions and\nprepare the data for galen-view.</p>\n<p>If you are behind a proxy, you will need to set the environment variables\nin order to download the data.  This can be accomplished by setting the\nhttp_proxy and https_proxy environment variables.  If the\n\"pip install\" step above worked, it is highly likely that you already have\nthem set properly. Note that this is only necessary for the\ndownload and not for galen-view to work after that.</p>\n<p>This will download files and create more.  It is recommended to do this\nin a fresh directory.</p>\n<p>For example:</p>\n<pre>mkdir galen_data\n<span class=\"nb\">cd</span> galen_data\npython3 -m sandia.galen.dataprep\n</pre>\n<p>This can take up to two hours to run.  You will see progress during\neach step.  You should see something similar to the following:</p>\n<pre><code>$ python3 -m sandia.galen.dataprep\nInitializing Data in Current Directory\nChecking for Data in this Directory\nDownloading the metadata file\nDownloading the CORD-19 Dataset\nProcessing https://path/to/biorxiv_medrxiv.tar.gz ... Done.\nProcessing https://path/to/comm_use_subset.tar.gz ... Done.\nProcessing https://path/to/noncomm_use_subset.tar.gz ... Done.\nProcessing https://path/to/pmc_custom_license.tar.gz ... Done.\nProcessing https:///custom_license.tar.gz ... Done.\nProcessing https:///cord19_specter_embeddings_2020-04-03.tar.gz ... Done.\nProcessing https:///cord19_specter_embeddings_2020-04-10.tar.gz ... Done.\n========\nMaking the Coordinates to Visualize the Data\n========\nBuilding a searchable index from the documents\n..........\n..........\n..........\n[There will be more lines like this]\n..........\n..........\n..........\nDone. Committing Index\nDone Indexing\n========\nDone.  Run \"jupyter-notebook GalenView.ipynb\" and run all cells to explore the data.\n</code></pre>\n<h1>Usage</h1>\n<p>sandia.galen.dataprep's final step is to copy a jupyter notebook\ninto the directory that can be used to view and explore the data.\nYou can open this notebook in a variety of ways, but the following\nwill open it directly:</p>\n<pre>jupyter-notebook GalenView.ipynb\n</pre>\n<p>After executing this, a web browser should open with the jupyter\nnotebook.  You still have to run all the cells in the notebook to\nactivate and use the visualization.</p>\n<table>\n<tr>\n<td><img alt=\"Run Notebook Menu\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/128085f08cc39b1f49ed798713d74452c9e3b8fc/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f73616e6469616c6162732f67616c656e2d766965772f6d61737465722f6f746865722f32303230303432322d47616c656e566965775f52756e4e6f7465626f6f6b4d656e752e706e67\">\n</td><td>After the notebook loads, click \"Restart &amp; Runn All\" from the menu at the top of the page.</td>\n</tr>\n<tr>\n<td><img alt=\"Run Notebook Button\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/32c1b0ec2a0da4426e141f16adcf0bd933d77381/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f73616e6469616c6162732f67616c656e2d766965772f6d61737465722f6f746865722f32303230303432322d47616c656e566965775f52756e4e6f7465626f6f6b427574746f6e2e706e67\">\n</td><td>A window will appear prompting you to restart the notebook.  Click the red button.</td>\n</tr>\n</table>\n<p>On the page, you will now see the full interface.  Each point in the\ngraph represents a document.  Hovering your mouse over a point or\ngroup of points will display the title.  Clicking on a point will\ncause the title and first 1500 characters (if full text is included in\nthe CORD19 dataset) on the right hand side.  Clicking on the\n\"Document\" tab will show the full text of the document.</p>\n<table>\n<tr>\n<td><img alt=\"Controls\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/19a0fc21ca9610661a3d347febe627cff812a83d/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f73616e6469616c6162732f67616c656e2d766965772f6d61737465722f6f746865722f32303230303432322d47616c656e566965775f436f6e74726f6c732e706e67\"></td>\n<td>This interface lets you explore the various clusters of data by panning \nand zooming.  The individual controls are described at the left.</td>\n</tr>\n</table>\n<p>You can type in a query in the Search box and press enter.  The points\ncorresponding to the matching documents will turn into red triangles.\nNote that the documents are indexed using a python library called\n\"whoosh\" which contains a query language that lets you use advanced\nsyntax such as boolean and proximity queries.  More information on\nthat query syntax can be found\n<a href=\"https://whoosh.readthedocs.io/en/latest/querylang.html\" rel=\"nofollow\">here</a>.</p>\n<p>This following is a short description of each part of the user interface:</p>\n<img alt=\"interface explanation\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/eec21ab923e320724a0024bedbfa89f547ae7ad6/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f73616e6469616c6162732f67616c656e2d766965772f6d61737465722f6f746865722f32303230303432322d47616c656e566965775f496e746572666163654578706c616e6174696f6e2e706e67\">\n<p>In the above example, the user has searched for the term \"mers.\"  The\ndocuments that reference \"mers\" are mostly found in a particular\ncluster at the lower left.  Note that because of how the layout\nalgorithm works, the cluster in your interface may be different.  By\nusing the controls, the user can zoom in on that cluster.  The\nfollowing image shows what that might look like.  Note that the \"mers\"\nmatches are in a cluster, but you can see similar clusters nearby.\nThrough hovering, zomming, panning, and clicking, the user can explore\nthe data set.</p>\n<img alt=\"zoomed interface\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/51bee601c47d44d5c5151f33d05e7b019940725c/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f73616e6469616c6162732f67616c656e2d766965772f6d61737465722f6f746865722f32303230303432322d47616c656e566965775f496e746572666163655a6f6f6d65642e706e67\">\n<h1>Coloring</h1>\n<p>(Note: This section requres python development expertise)</p>\n<p>In the paper associated with this codebase, compression-based\nanalytics were used to color the documents according to how well they\nmatched snippets of text provided by subject matter experts.  The code\nto perform the compression-based analytics is not included in this\ncodebase.  However, it is possible to score documents in many\ndifferent ways (even by something like year of publication).  If you\nhave a methodology for scoring the documents, you can get them into\nthe visualization using the following steps:</p>\n<ol>\n<li>\n<p>Run the \"Data Download and Configuration\" step above.  When it\nfinishes, there will be a file called \"metadata.df.pickle.\" in the\ndata directory.  This is a pandas DataFrame that can be read using\npandas.read_pickle.  The index (and integer) corresponds with the\ninteger used by cotools in the cord-19-tools and is how the tool\nidentifies the documents.</p>\n</li>\n<li>\n<p>Create a score per document using whatever means is useful for\nyour subject matter experts.</p>\n</li>\n<li>\n<p>Append those scores as a new column to the DataFrame from step 1.<br>\nWrite it back out to metadata.df.pickle.</p>\n</li>\n<li>\n<p>Create a Jupyter Notebook and create the visualization using the\nfollowing code (where \"myscore\" is the name of column you added):</p>\n</li>\n</ol>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sandia.galen.viewer</span> <span class=\"kn\">import</span> <span class=\"n\">DocumentSetExplorer</span>\n<span class=\"n\">display</span><span class=\"p\">(</span><span class=\"n\">HTML</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;style&gt;.container { width:100% !important; }&lt;/style&gt;\"</span><span class=\"p\">))</span>\n<span class=\"n\">hv</span><span class=\"o\">.</span><span class=\"n\">extension</span><span class=\"p\">(</span><span class=\"s1\">'bokeh'</span><span class=\"p\">)</span>\n<span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">DocumentSetExplorer</span><span class=\"p\">(</span><span class=\"n\">scoring_cols</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"myscore\"</span><span class=\"p\">])</span>\n<span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">main_viz</span><span class=\"p\">()</span>\n</pre>\n<p>If you want to test how this works before trying your own score,\nyou can skip steps 2 and 3 and use \"X\" in place of \"myscore.\"  This will\nsimply color the points according to their X value.</p>\n<h1>Notes and TOOD</h1>\n<ul>\n<li>\n<p>A large percentage of the documents do not have associated with\nthem.  All documents are arranged in the 2D space using both the\ntitle and content.  But the search only searches the content unless\nyou explicitly specify the title (using title:query).  This is by\ndesign but can be confusing when navigating the space.  This could\nbe changed in a future version.</p>\n</li>\n<li>\n<p>There currently is no way to set aside a document.  This is entirely\npossible within the holoviews framework but is not yet impelemented.</p>\n</li>\n<li>\n<p>It would be useful to include author, date published, journal, and\nother fields in the metadata.  This information for many of the\ndocuments are in the metadata file and could be incorporated in the\nhover and visualization.</p>\n</li>\n<li>\n<p>Links to the original documents that include tables and figures is\nimportant.  For the documents that contain pubmed ids in the\nmetadata, this is straight forward to do.</p>\n</li>\n<li>\n<p>Implement better parsing of the documents, especially adding an\nability to jump directly to different sections, depending on the\nspecific question being asked.  Sometimes, for example, it would be\nhelpful to jump directly to the abstract.  In other cases, jumping\ndirectly to the \"methods\" section would be best.  Parsing research\npapers in this way is hard, but to the extent it can be done, the\nright hand summary pane could be customizable.</p>\n</li>\n<li>\n<p>Add in paragraph spacing to increase readability.  Right now, the\ndocument display used that cotools returns.  But the underlying text\nis generally stored in a way that is better broken up and could be\ndisplayed with better paragraph breaks.</p>\n</li>\n</ul>\n\n          </div>"}, "last_serial": 7122704, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "f4a9c64188fd0fb128dd57f937d7e6fa", "sha256": "9a8df6bd7635e6fa4b3f775c1b2b6b8068dbba1a70ef2e9df8e35ae0579522c4"}, "downloads": -1, "filename": "galen_view-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "f4a9c64188fd0fb128dd57f937d7e6fa", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 828762, "upload_time": "2020-04-28T19:56:46", "upload_time_iso_8601": "2020-04-28T19:56:46.772164Z", "url": "https://files.pythonhosted.org/packages/0c/33/302e949afb2f7dcea5048a043b42e183d8bc5bbdeb8bbb15f68425b1b86e/galen_view-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c8e18ac4dd69bcb57daf3f24eaea182b", "sha256": "241028b0cbe462bf5e8b43617195fa4b0579f0a382f06c279f31ad53db6f1d71"}, "downloads": -1, "filename": "galen-view-0.0.1.tar.gz", "has_sig": false, "md5_digest": "c8e18ac4dd69bcb57daf3f24eaea182b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 826501, "upload_time": "2020-04-28T19:56:51", "upload_time_iso_8601": "2020-04-28T19:56:51.516365Z", "url": "https://files.pythonhosted.org/packages/e2/b4/ad5172c1b00e1147e8e022207531de1980ea50e0474198e81168a5d61eea/galen-view-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f4a9c64188fd0fb128dd57f937d7e6fa", "sha256": "9a8df6bd7635e6fa4b3f775c1b2b6b8068dbba1a70ef2e9df8e35ae0579522c4"}, "downloads": -1, "filename": "galen_view-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "f4a9c64188fd0fb128dd57f937d7e6fa", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 828762, "upload_time": "2020-04-28T19:56:46", "upload_time_iso_8601": "2020-04-28T19:56:46.772164Z", "url": "https://files.pythonhosted.org/packages/0c/33/302e949afb2f7dcea5048a043b42e183d8bc5bbdeb8bbb15f68425b1b86e/galen_view-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c8e18ac4dd69bcb57daf3f24eaea182b", "sha256": "241028b0cbe462bf5e8b43617195fa4b0579f0a382f06c279f31ad53db6f1d71"}, "downloads": -1, "filename": "galen-view-0.0.1.tar.gz", "has_sig": false, "md5_digest": "c8e18ac4dd69bcb57daf3f24eaea182b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 826501, "upload_time": "2020-04-28T19:56:51", "upload_time_iso_8601": "2020-04-28T19:56:51.516365Z", "url": "https://files.pythonhosted.org/packages/e2/b4/ad5172c1b00e1147e8e022207531de1980ea50e0474198e81168a5d61eea/galen-view-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:59:17 2020"}