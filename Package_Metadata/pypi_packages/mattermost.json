{"info": {"author": "someone", "author_email": "someone@somenet.org", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# [Mattermost API](https://api.mattermost.com/) bindings\nIn productive use on a 5k+ users E10 instance at https://mattermost.fsinf.at\n+ Used to manage channels, users and everything.\n+ Not all api-endpoints handled (yet).\n+ E20-only endpoints are out of scope.\n+ Beware: I love to rebase git.\n\n\n## Setup\n``pip3 install --user --upgrade mattermost``\n\n\n## Usage\n```\nimport mattermost\n\n# login\nmm = mattermost.MMApi(\"https://mattermost.example.com/api\")\nmm.login(\"user@example.com\", \"my-pw\")\n# alternatively use a personal-access-token/bot-token.\n# mm.login(bearer=\"my-personal-access-token\")\n\n\n# do stuff (print info about your user)\nimport pprint\npprint.pprint(mm.get_user())\n\n\n# do other stuff (print info about an not-existing user)\ntry:\n    pprint.pprint(mm.get_user(\"not-existing-user-id\", exc=True))\nexcept mattermost.ApiException as e:\n    print(e)\n\n\n# custom endpoint call (get server config)\ncfg = mm._get(\"/v4/config\")\n\n# do something (enable plugins)\ncfg[\"PluginSettings\"][\"Enable\"] = True\n\n# custom endpoint call (put server config)\nmm._put(\"/v4/config\", cfg)\n\n\n# logout\nmm.revoke_user_session()\n```\n\n\n### Websocket usage\n```\nimport mattermost\nimport mattermost.ws\n\n# login\nmm = mattermost.MMApi(\"https://mattermost.example.com/api\")\nmm.login(\"user@example.com\", \"my-pw\")\n\n\n# define a websocket handler\ndef webs_handler(mmws, event_data):\n    import pprint\n    pprint.pprint(mmws)\n    pprint.pprint(event_data)\n\n# connect to websocket and start processing events\nmmws = mattermost.ws.MMws(webs_handler, mm, \"wss://mattermost.example.com/api/v4/websocket\")\n```\n\nTo close the websocket connection - there is no way to restart, create a new instance of MMws:\n+ ``mmws.close_websocket()``\n\n\n### Manually calling the API\nSome endpoints are not handled (yet). You can manually call these endpoints. Available private functions:\n+ ``_get(endpoint, raw=False, exc=False)``\n+ ``_put(endpoint, data=None, exc=False)``\n+ ``_post(endpoint, data=None, multipart_formdata=None, exc=False)``\n+ ``_delete(endpoint, data=None, exc=False)``\n\n\n### stdin2channel\nYou can pipe ``STDIN`` to a channel:\n+ ``echo \"message\" | python3 -m mattermost.stdin2channel https://localhost:8065/api 'user@example.com' 'my-pw' 'channel_id'``\n\n\n## Endpoints\nOrdered by https://api.mattermost.com/\n+ ``login(login_id=None, password=None, token=None, bearer=None)``\n+ ``logout(**kwargs)``\n+ ``get_users(**kwargs)``\n+ ``get_users_by_usernames(usernames, **kwargs)``\n+ ``get_user(user_id=None, **kwargs)``\n+ ``patch_user(user_id, props={}, **kwargs)``\n+ ``get_user_by_username(username, **kwargs)``\n+ ``demote_a_user(user_id, **kwargs)``\n+ ``promote_a_guest(user_id, **kwargs)``\n+ ``get_user_sessions(user_id=None, **kwargs)``\n+ ``revoke_user_session(user_id=None, session_id=None, **kwargs)``\n+ ``get_teams(**kwargs)``\n+ ``get_team(team_id, **kwargs)``\n+ ``get_team_members(team_id, **kwargs)``\n+ ``add_user_to_team(team_id, user_id, **kwargs)``\n+ ``get_team_member(team_id, user_id, **kwargs)``\n+ ``remove_user_from_team(team_id, user_id, **kwargs)``\n+ ``update_team_members_scheme_roles(team_id, user_id, props, **kwargs)``\n+ ``get_team_channels(team_id, **kwargs)``\n+ ``create_channel(team_id, name, display_name, purpose=\"\", header=\"\", type=\"O\", **kwargs)``\n+ ``create_dm_channel_with(other_user_id, **kwargs)``\n+ ``get_channel(channel_id, **kwargs)``\n+ ``update_channel(channel_id, props, **kwargs)``\n+ ``patch_channel(channel_id, props, **kwargs)``\n+ ``get_channel_posts_pinned(channel_id, **kwargs)``\n+ ``search_channel(team_id, term, **kwargs)``\n+ ``get_channel_by_name(team_id, channel_name, **kwargs)``\n+ ``get_channel_members(channel_id, **kwargs)``\n+ ``get_channel_member(channel_id, user_id, **kwargs)``\n+ ``add_user_to_channel(channel_id, user_id, **kwargs)``\n+ ``remove_user_from_channel(channel_id, user_id, **kwargs)``\n+ ``get_channel_members_for_user(user_id, team_id, **kwargs)``\n+ ``get_channels_for_user(user_id, team_id, **kwargs)``\n+ ``update_channel_members_scheme_roles(channel_id, user_id, props, **kwargs)``\n+ ``create_post(channel_id, message, props={\"from_webhook\":\"true\"}, filepaths=[], root_id=None, **kwargs)``\n+ ``create_ephemeral_post(channel_id, message, user_id, **kwargs)``\n+ ``get_post(post_id, **kwargs)``\n+ ``delete_post(post_id, **kwargs)``\n+ ``patch_post(post_id, message, props, **kwargs)``\n+ ``get_posts_for_channel(channel_id, **kwargs)``\n+ ``upload_file(channel_id, filepath, **kwargs)``\n+ ``get_file(file_id, **kwargs)``\n+ ``create_reaction(user_id, post_id, emoji_name, **kwargs)``\n+ ``create_outgoing_hook(team_id, channel_id, description=\"\", display_name=\"\", trigger_words=[], trigger_when=0, callback_urls=[], **kwargs)``\n+ ``list_outgoing_hooks(team_id, channel_id, **kwargs)``\n+ ``delete_outgoing_hook(hook_id, **kwargs)``\n+ ``create_slash_command(team_id, command, url, **kwargs)``\n+ ``list_custom_slash_commands_per_team(team_id, **kwargs)``\n+ ``update_slash_command(data, **kwargs)``\n+ ``delete_slash_command(command_id, **kwargs)``\n+ ``open_dialog(trigger_id, response_url, dialog, **kwargs)``\n\n\n## If you find this stuff useful, you can buy me a beer/club-mate :)\n+ ``btc: bc1q9vxqzd58683ky9c2yaddaxx3wrxakggfa0dmdt``\n+ ``eth: 0x839326860d74cf61f03719c5c63db3ae5d2b443f``\n+ ``bch: qqxpm8py3flkaqdt4ehatzvx250634fuvgsgvft6z4``\n+ ``doge: DLeQq2u7gdnidaNwEtj9fYrstUaU4banNg``\n+ ``xmr: 47WwuQssrZRHLXYBRoEPmqhyG8e4PxorwWn1Xvyg6QShKAjZ83UHWJmYd9PFkpH6vPQFgNbnKvaRz1EzoQHSeeQvEGQ6ihA``", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://git.somenet.org/pub/jan/mattermost_api.git", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "mattermost", "package_url": "https://pypi.org/project/mattermost/", "platform": "", "project_url": "https://pypi.org/project/mattermost/", "project_urls": {"Homepage": "http://git.somenet.org/pub/jan/mattermost_api.git"}, "release_url": "https://pypi.org/project/mattermost/5.21.4/", "requires_dist": null, "requires_python": ">=3.7", "summary": "Mattermost API bindings", "version": "5.21.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1><a href=\"https://api.mattermost.com/\" rel=\"nofollow\">Mattermost API</a> bindings</h1>\n<p>In productive use on a 5k+ users E10 instance at <a href=\"https://mattermost.fsinf.at\" rel=\"nofollow\">https://mattermost.fsinf.at</a></p>\n<ul>\n<li>Used to manage channels, users and everything.</li>\n<li>Not all api-endpoints handled (yet).</li>\n<li>E20-only endpoints are out of scope.</li>\n<li>Beware: I love to rebase git.</li>\n</ul>\n<h2>Setup</h2>\n<p><code>pip3 install --user --upgrade mattermost</code></p>\n<h2>Usage</h2>\n<pre><code>import mattermost\n\n# login\nmm = mattermost.MMApi(\"https://mattermost.example.com/api\")\nmm.login(\"user@example.com\", \"my-pw\")\n# alternatively use a personal-access-token/bot-token.\n# mm.login(bearer=\"my-personal-access-token\")\n\n\n# do stuff (print info about your user)\nimport pprint\npprint.pprint(mm.get_user())\n\n\n# do other stuff (print info about an not-existing user)\ntry:\n    pprint.pprint(mm.get_user(\"not-existing-user-id\", exc=True))\nexcept mattermost.ApiException as e:\n    print(e)\n\n\n# custom endpoint call (get server config)\ncfg = mm._get(\"/v4/config\")\n\n# do something (enable plugins)\ncfg[\"PluginSettings\"][\"Enable\"] = True\n\n# custom endpoint call (put server config)\nmm._put(\"/v4/config\", cfg)\n\n\n# logout\nmm.revoke_user_session()\n</code></pre>\n<h3>Websocket usage</h3>\n<pre><code>import mattermost\nimport mattermost.ws\n\n# login\nmm = mattermost.MMApi(\"https://mattermost.example.com/api\")\nmm.login(\"user@example.com\", \"my-pw\")\n\n\n# define a websocket handler\ndef webs_handler(mmws, event_data):\n    import pprint\n    pprint.pprint(mmws)\n    pprint.pprint(event_data)\n\n# connect to websocket and start processing events\nmmws = mattermost.ws.MMws(webs_handler, mm, \"wss://mattermost.example.com/api/v4/websocket\")\n</code></pre>\n<p>To close the websocket connection - there is no way to restart, create a new instance of MMws:</p>\n<ul>\n<li><code>mmws.close_websocket()</code></li>\n</ul>\n<h3>Manually calling the API</h3>\n<p>Some endpoints are not handled (yet). You can manually call these endpoints. Available private functions:</p>\n<ul>\n<li><code>_get(endpoint, raw=False, exc=False)</code></li>\n<li><code>_put(endpoint, data=None, exc=False)</code></li>\n<li><code>_post(endpoint, data=None, multipart_formdata=None, exc=False)</code></li>\n<li><code>_delete(endpoint, data=None, exc=False)</code></li>\n</ul>\n<h3>stdin2channel</h3>\n<p>You can pipe <code>STDIN</code> to a channel:</p>\n<ul>\n<li><code>echo \"message\" | python3 -m mattermost.stdin2channel https://localhost:8065/api 'user@example.com' 'my-pw' 'channel_id'</code></li>\n</ul>\n<h2>Endpoints</h2>\n<p>Ordered by <a href=\"https://api.mattermost.com/\" rel=\"nofollow\">https://api.mattermost.com/</a></p>\n<ul>\n<li><code>login(login_id=None, password=None, token=None, bearer=None)</code></li>\n<li><code>logout(**kwargs)</code></li>\n<li><code>get_users(**kwargs)</code></li>\n<li><code>get_users_by_usernames(usernames, **kwargs)</code></li>\n<li><code>get_user(user_id=None, **kwargs)</code></li>\n<li><code>patch_user(user_id, props={}, **kwargs)</code></li>\n<li><code>get_user_by_username(username, **kwargs)</code></li>\n<li><code>demote_a_user(user_id, **kwargs)</code></li>\n<li><code>promote_a_guest(user_id, **kwargs)</code></li>\n<li><code>get_user_sessions(user_id=None, **kwargs)</code></li>\n<li><code>revoke_user_session(user_id=None, session_id=None, **kwargs)</code></li>\n<li><code>get_teams(**kwargs)</code></li>\n<li><code>get_team(team_id, **kwargs)</code></li>\n<li><code>get_team_members(team_id, **kwargs)</code></li>\n<li><code>add_user_to_team(team_id, user_id, **kwargs)</code></li>\n<li><code>get_team_member(team_id, user_id, **kwargs)</code></li>\n<li><code>remove_user_from_team(team_id, user_id, **kwargs)</code></li>\n<li><code>update_team_members_scheme_roles(team_id, user_id, props, **kwargs)</code></li>\n<li><code>get_team_channels(team_id, **kwargs)</code></li>\n<li><code>create_channel(team_id, name, display_name, purpose=\"\", header=\"\", type=\"O\", **kwargs)</code></li>\n<li><code>create_dm_channel_with(other_user_id, **kwargs)</code></li>\n<li><code>get_channel(channel_id, **kwargs)</code></li>\n<li><code>update_channel(channel_id, props, **kwargs)</code></li>\n<li><code>patch_channel(channel_id, props, **kwargs)</code></li>\n<li><code>get_channel_posts_pinned(channel_id, **kwargs)</code></li>\n<li><code>search_channel(team_id, term, **kwargs)</code></li>\n<li><code>get_channel_by_name(team_id, channel_name, **kwargs)</code></li>\n<li><code>get_channel_members(channel_id, **kwargs)</code></li>\n<li><code>get_channel_member(channel_id, user_id, **kwargs)</code></li>\n<li><code>add_user_to_channel(channel_id, user_id, **kwargs)</code></li>\n<li><code>remove_user_from_channel(channel_id, user_id, **kwargs)</code></li>\n<li><code>get_channel_members_for_user(user_id, team_id, **kwargs)</code></li>\n<li><code>get_channels_for_user(user_id, team_id, **kwargs)</code></li>\n<li><code>update_channel_members_scheme_roles(channel_id, user_id, props, **kwargs)</code></li>\n<li><code>create_post(channel_id, message, props={\"from_webhook\":\"true\"}, filepaths=[], root_id=None, **kwargs)</code></li>\n<li><code>create_ephemeral_post(channel_id, message, user_id, **kwargs)</code></li>\n<li><code>get_post(post_id, **kwargs)</code></li>\n<li><code>delete_post(post_id, **kwargs)</code></li>\n<li><code>patch_post(post_id, message, props, **kwargs)</code></li>\n<li><code>get_posts_for_channel(channel_id, **kwargs)</code></li>\n<li><code>upload_file(channel_id, filepath, **kwargs)</code></li>\n<li><code>get_file(file_id, **kwargs)</code></li>\n<li><code>create_reaction(user_id, post_id, emoji_name, **kwargs)</code></li>\n<li><code>create_outgoing_hook(team_id, channel_id, description=\"\", display_name=\"\", trigger_words=[], trigger_when=0, callback_urls=[], **kwargs)</code></li>\n<li><code>list_outgoing_hooks(team_id, channel_id, **kwargs)</code></li>\n<li><code>delete_outgoing_hook(hook_id, **kwargs)</code></li>\n<li><code>create_slash_command(team_id, command, url, **kwargs)</code></li>\n<li><code>list_custom_slash_commands_per_team(team_id, **kwargs)</code></li>\n<li><code>update_slash_command(data, **kwargs)</code></li>\n<li><code>delete_slash_command(command_id, **kwargs)</code></li>\n<li><code>open_dialog(trigger_id, response_url, dialog, **kwargs)</code></li>\n</ul>\n<h2>If you find this stuff useful, you can buy me a beer/club-mate :)</h2>\n<ul>\n<li><code>btc: bc1q9vxqzd58683ky9c2yaddaxx3wrxakggfa0dmdt</code></li>\n<li><code>eth: 0x839326860d74cf61f03719c5c63db3ae5d2b443f</code></li>\n<li><code>bch: qqxpm8py3flkaqdt4ehatzvx250634fuvgsgvft6z4</code></li>\n<li><code>doge: DLeQq2u7gdnidaNwEtj9fYrstUaU4banNg</code></li>\n<li><code>xmr: 47WwuQssrZRHLXYBRoEPmqhyG8e4PxorwWn1Xvyg6QShKAjZ83UHWJmYd9PFkpH6vPQFgNbnKvaRz1EzoQHSeeQvEGQ6ihA</code></li>\n</ul>\n\n          </div>"}, "last_serial": 6985311, "releases": {"5.21.4": [{"comment_text": "", "digests": {"md5": "493d02afe7a2b52b5066b6a4add3b09e", "sha256": "7ebd495600de1990917d44af89bac16f42a137a2688955c14638df2f3a17ed93"}, "downloads": -1, "filename": "mattermost-5.21.4.tar.gz", "has_sig": false, "md5_digest": "493d02afe7a2b52b5066b6a4add3b09e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 7906, "upload_time": "2020-04-09T11:55:11", "upload_time_iso_8601": "2020-04-09T11:55:11.440783Z", "url": "https://files.pythonhosted.org/packages/b7/69/465c223ba0254640e3588ce058dfad66ab31dcbd46a01545878564604aa4/mattermost-5.21.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "493d02afe7a2b52b5066b6a4add3b09e", "sha256": "7ebd495600de1990917d44af89bac16f42a137a2688955c14638df2f3a17ed93"}, "downloads": -1, "filename": "mattermost-5.21.4.tar.gz", "has_sig": false, "md5_digest": "493d02afe7a2b52b5066b6a4add3b09e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 7906, "upload_time": "2020-04-09T11:55:11", "upload_time_iso_8601": "2020-04-09T11:55:11.440783Z", "url": "https://files.pythonhosted.org/packages/b7/69/465c223ba0254640e3588ce058dfad66ab31dcbd46a01545878564604aa4/mattermost-5.21.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:57:12 2020"}