{"info": {"author": "Markus Juenemann", "author_email": "markus@juenemann.net", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Operating System :: Unix", "Programming Language :: C", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Topic :: Software Development :: Libraries", "Topic :: System :: Networking :: Time Synchronization"], "description": "python-ntpdshm\n**************\n\nOverview\n========\n\n*python-ntpdshm* provides a Python interface to *ntpd's* shared memory `driver 28`_. A single\nclass ``NtpdShm`` exposes the fields of the shared memory structure as attributes that can be read and written.\nIn addition there are properties to set the clock and receive timestamps from float values. There is also a convenience ``update()`` function for setting the time related fields in a single step.\n\n*python-ntpdshm* is implemented using Swig_.\n\n.. _Swig: http://www.swig.org/Doc1.3/Python.html\n\n*python-ntpdshm* works with the following Python versions.\n\n* Python 2.6\n* Python 2.7\n* Python 3.3\n* Python 3.4\n* Python 3.5\n* PyPy (but not PyPy3!)\n\nExample\n=======\n\n.. code-block:: python\n\n   import ntpdshm\n   \n   ntpd_shm = ntpdshm.NtpdShm(unit=0)\n\nThe members of the C struct can be accessed by their original names. These have **not**\nbeen converted into PEP-8 compliant names.\n\n.. code-block:: python\n   \n   print ntpd_shm.mode\n   print ntpd_shm.clockTimeStampSec\n   print ntpd_shm.clockTimeStampUSec\n   print ntpd_shm.clockTimeStampNSec      # only ntpd 4.2.7p303 or later, probably random value otherwise\n   print ntpd_shm.receiveTimeStampSec\n   print ntpd_shm.receiveTimeStampUSec\n   print ntpd_shm.receiveTimeStampNSec    # only ntpd 4.2.7p303 or later, probably random value otherwise\n   print ntpd_shm.leap\n   print ntpd_shm.precision\n   print ntpd_shm.valid\n\nIn addition there are two pseudo properties that combine the second and microsecond attributes into \n\"float\" timestamps. These don't support nanosecond precision as (as far as I know) it is not possible\nto detect whether *ntpd* does support nanosecond resolution.\n\n.. code-block:: python\n\n   print ntpd_shm.clockTimeStamp          # clockTimeStampSec.clockTimeStampUSec\n   print ntpd_shm.receiveTimeStamp        # receiveTimeStampSec.receiveTimeStampUSec\n\nThe process to feed *ntpd* an external reference time is shown below.\n\n.. code-block:: python\n\n   import time\n   \n   clock_time = get_clock_time()          # `get_clock_time` must be implemented somewhere else and\n                                          # return a float.\n   recev_time = time.time()\n   ntpd_shm.valid = 0                     # don't use Python boolean\n   ntpd_shm.clockTimeStamp = clock_time   \n   ntpd_shm.receiveTimeStamp = recv_time  \n   ntpd_shm.precision = -5                # 2^-5 = 0.03125 seconds in this case\n   ntpd_shm.count += 1\n   ntpd_shm.valid = 1\n     \nAs this is somewhat cumbersome, there is a convenience method ``update()`` that achieves the same in \na single line. It requires the ``clock_time`` as mandatory argument and accepts several optional\narguments.\n\n.. code-block:: python\n\n   ntpd_shm.update(clock_time, recv_time=recv_time, precision=-5)\n   \n   # Or simply, if no other fields are to be changed. The receive timestamp is set\n   # automatically.\n   ntpd_shm.update(clock_time)\n\n.. _`driver 28`: http://doc.ntp.org/4.2.8/drivers/driver28.html\n\n\nApplications\n============\n\n\"Off by one second\" reference time\n----------------------------------\n\nA just for fun example of using *python-ntpdshm* is to implement an \"off by one second\" reference time source for *ntpd*. While this example makes no sense at all for practical purposes it provides a useful template for how it all fits together.\n\nFirst we write the code for the reference clock.\n\n.. code-block:: python\n\n   import time\n   import ntpdshm\n   \n   def get_clock_time():\n       return time.time() - 1.0     # always be exactly one second behind.\n       \n   def main():\n       ntpd_shm = ntpdshm.NtpdShm(unit=2)\n       ntpd_shm.mode = 0            # set mode\n       ntpd_shm.precision = -6      # set precision once\n       ntpd_shm.leap = 0            # how would we know about leap seconds?\n       \n       while True:\n           clock_time = get_clock_time()\n           ntpd_shm.update(clock_time)\n           time.sleep(1.0)\n           \n   if __name__ == '__main__':\n       main()\n       \nThen add the shared memory reference clock to ``ntp.conf``:: \n\n  # ntp.conf\n  ...\n  server 127.127.28.2 noselect     # unit=2, never select this reference\n  fudge 127.127.28.2 refid PYTH stratum 10\n\nRestart *ntpd* and monitor the output of ``ntpq -pn``. The offset should be exactly -1000 msec:\n\n.. code-block:: console\n\n   $ ntpq -pn\n        remote           refid      st t when poll reach   delay   offset  jitter\n   ==============================================================================\n   ...\n    127.127.28.2    .PYTH.          10 l    9   16  377    0.000  -1000.0   0.017\n\n\n\n\nHistory\n=======\n\n0.1.0 (15-Dec-2015)\n---------------------\n\n* Initial version", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mjuenema/python-ntpdshm", "keywords": "ntp,shared memory", "license": "BSD License", "maintainer": "", "maintainer_email": "", "name": "ntpdshm", "package_url": "https://pypi.org/project/ntpdshm/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/ntpdshm/", "project_urls": {"Homepage": "https://github.com/mjuenema/python-ntpdshm"}, "release_url": "https://pypi.org/project/ntpdshm/0.2.1/", "requires_dist": null, "requires_python": "", "summary": "Python interface to NTP Shared Memory", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"overview\">\n<h2>Overview</h2>\n<p><em>python-ntpdshm</em> provides a Python interface to <em>ntpd\u2019s</em> shared memory <a href=\"http://doc.ntp.org/4.2.8/drivers/driver28.html\" rel=\"nofollow\">driver 28</a>. A single\nclass <tt>NtpdShm</tt> exposes the fields of the shared memory structure as attributes that can be read and written.\nIn addition there are properties to set the clock and receive timestamps from float values. There is also a convenience <tt>update()</tt> function for setting the time related fields in a single step.</p>\n<p><em>python-ntpdshm</em> is implemented using <a href=\"http://www.swig.org/Doc1.3/Python.html\" rel=\"nofollow\">Swig</a>.</p>\n<p><em>python-ntpdshm</em> works with the following Python versions.</p>\n<ul>\n<li>Python 2.6</li>\n<li>Python 2.7</li>\n<li>Python 3.3</li>\n<li>Python 3.4</li>\n<li>Python 3.5</li>\n<li>PyPy (but not PyPy3!)</li>\n</ul>\n</div>\n<div id=\"example\">\n<h2>Example</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">ntpdshm</span>\n\n<span class=\"n\">ntpd_shm</span> <span class=\"o\">=</span> <span class=\"n\">ntpdshm</span><span class=\"o\">.</span><span class=\"n\">NtpdShm</span><span class=\"p\">(</span><span class=\"n\">unit</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n</pre>\n<p>The members of the C struct can be accessed by their original names. These have <strong>not</strong>\nbeen converted into PEP-8 compliant names.</p>\n<pre><span class=\"nb\">print</span> <span class=\"n\">ntpd_shm</span><span class=\"o\">.</span><span class=\"n\">mode</span>\n<span class=\"nb\">print</span> <span class=\"n\">ntpd_shm</span><span class=\"o\">.</span><span class=\"n\">clockTimeStampSec</span>\n<span class=\"nb\">print</span> <span class=\"n\">ntpd_shm</span><span class=\"o\">.</span><span class=\"n\">clockTimeStampUSec</span>\n<span class=\"nb\">print</span> <span class=\"n\">ntpd_shm</span><span class=\"o\">.</span><span class=\"n\">clockTimeStampNSec</span>      <span class=\"c1\"># only ntpd 4.2.7p303 or later, probably random value otherwise</span>\n<span class=\"nb\">print</span> <span class=\"n\">ntpd_shm</span><span class=\"o\">.</span><span class=\"n\">receiveTimeStampSec</span>\n<span class=\"nb\">print</span> <span class=\"n\">ntpd_shm</span><span class=\"o\">.</span><span class=\"n\">receiveTimeStampUSec</span>\n<span class=\"nb\">print</span> <span class=\"n\">ntpd_shm</span><span class=\"o\">.</span><span class=\"n\">receiveTimeStampNSec</span>    <span class=\"c1\"># only ntpd 4.2.7p303 or later, probably random value otherwise</span>\n<span class=\"nb\">print</span> <span class=\"n\">ntpd_shm</span><span class=\"o\">.</span><span class=\"n\">leap</span>\n<span class=\"nb\">print</span> <span class=\"n\">ntpd_shm</span><span class=\"o\">.</span><span class=\"n\">precision</span>\n<span class=\"nb\">print</span> <span class=\"n\">ntpd_shm</span><span class=\"o\">.</span><span class=\"n\">valid</span>\n</pre>\n<p>In addition there are two pseudo properties that combine the second and microsecond attributes into\n\u201cfloat\u201d timestamps. These don\u2019t support nanosecond precision as (as far as I know) it is not possible\nto detect whether <em>ntpd</em> does support nanosecond resolution.</p>\n<pre><span class=\"nb\">print</span> <span class=\"n\">ntpd_shm</span><span class=\"o\">.</span><span class=\"n\">clockTimeStamp</span>          <span class=\"c1\"># clockTimeStampSec.clockTimeStampUSec</span>\n<span class=\"nb\">print</span> <span class=\"n\">ntpd_shm</span><span class=\"o\">.</span><span class=\"n\">receiveTimeStamp</span>        <span class=\"c1\"># receiveTimeStampSec.receiveTimeStampUSec</span>\n</pre>\n<p>The process to feed <em>ntpd</em> an external reference time is shown below.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">time</span>\n\n<span class=\"n\">clock_time</span> <span class=\"o\">=</span> <span class=\"n\">get_clock_time</span><span class=\"p\">()</span>          <span class=\"c1\"># `get_clock_time` must be implemented somewhere else and</span>\n                                       <span class=\"c1\"># return a float.</span>\n<span class=\"n\">recev_time</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"n\">ntpd_shm</span><span class=\"o\">.</span><span class=\"n\">valid</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>                     <span class=\"c1\"># don't use Python boolean</span>\n<span class=\"n\">ntpd_shm</span><span class=\"o\">.</span><span class=\"n\">clockTimeStamp</span> <span class=\"o\">=</span> <span class=\"n\">clock_time</span>\n<span class=\"n\">ntpd_shm</span><span class=\"o\">.</span><span class=\"n\">receiveTimeStamp</span> <span class=\"o\">=</span> <span class=\"n\">recv_time</span>\n<span class=\"n\">ntpd_shm</span><span class=\"o\">.</span><span class=\"n\">precision</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">5</span>                <span class=\"c1\"># 2^-5 = 0.03125 seconds in this case</span>\n<span class=\"n\">ntpd_shm</span><span class=\"o\">.</span><span class=\"n\">count</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n<span class=\"n\">ntpd_shm</span><span class=\"o\">.</span><span class=\"n\">valid</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n</pre>\n<p>As this is somewhat cumbersome, there is a convenience method <tt>update()</tt> that achieves the same in\na single line. It requires the <tt>clock_time</tt> as mandatory argument and accepts several optional\narguments.</p>\n<pre><span class=\"n\">ntpd_shm</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">clock_time</span><span class=\"p\">,</span> <span class=\"n\">recv_time</span><span class=\"o\">=</span><span class=\"n\">recv_time</span><span class=\"p\">,</span> <span class=\"n\">precision</span><span class=\"o\">=-</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Or simply, if no other fields are to be changed. The receive timestamp is set</span>\n<span class=\"c1\"># automatically.</span>\n<span class=\"n\">ntpd_shm</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">clock_time</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"applications\">\n<h2>Applications</h2>\n<h2 id=\"off-by-one-second-reference-time\"><span class=\"section-subtitle\">\u201cOff by one second\u201d reference time</span></h2>\n<p>A just for fun example of using <em>python-ntpdshm</em> is to implement an \u201coff by one second\u201d reference time source for <em>ntpd</em>. While this example makes no sense at all for practical purposes it provides a useful template for how it all fits together.</p>\n<p>First we write the code for the reference clock.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">import</span> <span class=\"nn\">ntpdshm</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">get_clock_time</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"mf\">1.0</span>     <span class=\"c1\"># always be exactly one second behind.</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">ntpd_shm</span> <span class=\"o\">=</span> <span class=\"n\">ntpdshm</span><span class=\"o\">.</span><span class=\"n\">NtpdShm</span><span class=\"p\">(</span><span class=\"n\">unit</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"n\">ntpd_shm</span><span class=\"o\">.</span><span class=\"n\">mode</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>            <span class=\"c1\"># set mode</span>\n    <span class=\"n\">ntpd_shm</span><span class=\"o\">.</span><span class=\"n\">precision</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">6</span>      <span class=\"c1\"># set precision once</span>\n    <span class=\"n\">ntpd_shm</span><span class=\"o\">.</span><span class=\"n\">leap</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>            <span class=\"c1\"># how would we know about leap seconds?</span>\n\n    <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n        <span class=\"n\">clock_time</span> <span class=\"o\">=</span> <span class=\"n\">get_clock_time</span><span class=\"p\">()</span>\n        <span class=\"n\">ntpd_shm</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">clock_time</span><span class=\"p\">)</span>\n        <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">main</span><span class=\"p\">()</span>\n</pre>\n<p>Then add the shared memory reference clock to <tt>ntp.conf</tt>:</p>\n<pre># ntp.conf\n...\nserver 127.127.28.2 noselect     # unit=2, never select this reference\nfudge 127.127.28.2 refid PYTH stratum 10\n</pre>\n<p>Restart <em>ntpd</em> and monitor the output of <tt>ntpq <span class=\"pre\">-pn</span></tt>. The offset should be exactly -1000 msec:</p>\n<pre><span class=\"gp\">$</span> ntpq -pn\n<span class=\"go\">     remote           refid      st t when poll reach   delay   offset  jitter\n==============================================================================\n...\n 127.127.28.2    .PYTH.          10 l    9   16  377    0.000  -1000.0   0.017</span>\n</pre>\n</div>\n<div id=\"history\">\n<h2>History</h2>\n<h2 id=\"dec-2015\"><span class=\"section-subtitle\">0.1.0 (15-Dec-2015)</span></h2>\n<ul>\n<li>Initial version</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 2456008, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "82c09ff0dd55da02633d2c78efd3d566", "sha256": "0521f789ecc1ca76e8d3a4ae219636cdcbab8bf4fca4d179babb3137071a77e1"}, "downloads": -1, "filename": "ntpdshm-0.1.0.tar.gz", "has_sig": false, "md5_digest": "82c09ff0dd55da02633d2c78efd3d566", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39028, "upload_time": "2015-12-15T03:40:53", "upload_time_iso_8601": "2015-12-15T03:40:53.629267Z", "url": "https://files.pythonhosted.org/packages/8b/d6/d7b898f0cd3c5b05b96f8a9939c3603c2d063d6f32743680ed6bd9e2da74/ntpdshm-0.1.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "77ee5b84039bad2a406e1686e999a9f6", "sha256": "b8c51773ea03789a1697e124b01a43ca4e0e77f2bacdd6858bccfb0b174309e2"}, "downloads": -1, "filename": "ntpdshm-0.2.1.tar.gz", "has_sig": false, "md5_digest": "77ee5b84039bad2a406e1686e999a9f6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42268, "upload_time": "2016-11-12T01:15:23", "upload_time_iso_8601": "2016-11-12T01:15:23.230329Z", "url": "https://files.pythonhosted.org/packages/41/b3/eca2a32f63252b5fb95898200a99fb4af1a5fc6559ebbd35e35bd29e2bf6/ntpdshm-0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "77ee5b84039bad2a406e1686e999a9f6", "sha256": "b8c51773ea03789a1697e124b01a43ca4e0e77f2bacdd6858bccfb0b174309e2"}, "downloads": -1, "filename": "ntpdshm-0.2.1.tar.gz", "has_sig": false, "md5_digest": "77ee5b84039bad2a406e1686e999a9f6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42268, "upload_time": "2016-11-12T01:15:23", "upload_time_iso_8601": "2016-11-12T01:15:23.230329Z", "url": "https://files.pythonhosted.org/packages/41/b3/eca2a32f63252b5fb95898200a99fb4af1a5fc6559ebbd35e35bd29e2bf6/ntpdshm-0.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:21 2020"}