{"info": {"author": "Mikael Honkala", "author_email": "mikael.honkala@gmail.com", "bugtrack_url": null, "classifiers": ["Operating System :: iOS"], "description": "# multipeer\n\nMultipeer connectivity for the Pythonista iOS app\n\n# Multipeer\n\nThis is a [Pythonista](http://omz-software.com/pythonista/) wrapper around iOS\n[Multipeer Connectivity](https://developer.apple.com/documentation/multipeerconnectivity?language=objc).\n\nMultipeer connectivity allows you to find and exchange information between\n2-8 iOS and Mac devices in the same network neighborhood (same wifi or\nbluetooth), without going through some server.\n\nSample use cases include games, chats, file exchange (like AirDrop) and so on.\n\n## Installation\n\nCopy the `multipeer.py` file from Github to your site-packages, or just:\n  \n    pip install pythonista-multipeer\n    \nin [Stash](https://github.com/ywangd/stash).\n\n## Usage\n\nHere's a minimal usage example, a line-based chat. You need to be running\nthe same code on all devices participating in the chat.\n\n    import multipeer\n\n    my_name = input('Name: ')\n\n    mc = multipeer.MultipeerConnectivity(display_name=my_name,\n      service_type='chat')\n\n    try:\n      while True:\n        chat_message = input('Message: ')\n        mc.send(chat_message)\n    finally:\n      mc.end_all()\n\nThis example is functional, even though the prompts and incoming messages\ntend to get mixed up. You can try it out by running the `multipeer.py` file.\nThere is also a cleaner Pythonista UI version of the chat in `multipeer_chat`.\n\nHere are the things to note when starting to use this library:\n\n## Peer-to-peer, not client-server\n\nThis wrapper around the MC framework makes no assumptions regarding the\nrelationships between peers. If you need client-server roles, you can build\nthem on top.\n\n## Expected usage\n\n1. Create a subclass of `MultipeerCommunications` to handle messages from\nthe framework (see separate topic, below).\n2. Instantiate the subclass with your service type, peer display name and\noptional initial context data (see the class description).\n3. Wait for peers to connect (see the `peer_added` and `get_peers` methods).\n4. Optionally, have each participating peer stop accepting further peers,\ne.g. for the duration of a game (see the `stop_looking_for_peers` method).\n5. Send and receive messages (see a separate topic, below).\n6. Potentially react to additions and removal of peers.\n7. Optionally, start accepting peers again, e.g. after a previous\ngame ends (see the `start_looking_for_peers` method).\n8. Before your app exits, call the `end_all` method to make sure there are\nno lingering connections.\n\n## What's in a message?\n\nMessages passed between peers are UTF-8 encoded text. This wrapper\nJSON-serializes the message you give to the `send` method (probably a str or\na dict), then encodes it in bytes. Receiving peers reconstitute the message\nand pass it to the `receive` callback.\n\n## Streaming\n\nThere are methods to use streaming instead of simple messages. Streamed data\nis received in 1024 byte chunks. There is a constructor option\n`initialize_streams` that can be used to set up a stream with each connected\npeer; otherwise, the streams are initialized when needed.\n\n## Performance\n\nPythonista forum user `mithrendal` ran some ping tests with very small data\npayload and 1000 repeats. Observed average times for a two-way messages were:\n\n* 11.85 ms - `send` method with `reliable=False`\n* 11.94 ms - `send` method with `reliable=True` (the default)\n* 6.19 ms - `stream` method\n\nTentative conclusions from these results:\n\n* Connections are likely to be good enough that reliable messaging is not a\nperformance concern.\n* Streaming may be significantly better if\ncommunications delay is an issue.\n\n## What is a peer ID?\n\nPeer IDs passed around by the wrapper have a `display_name` member that\ngives you the display name of that peer. There is no guarantee that these\nnames are unique between peers.\n\nThe IDs act also as identifier objects for specific peers, and can be used\nto `send` messages to individual peers.\n\nYou cannot create peer IDs for remote peers manually.\n\n## Why do I need to subclass?\n\nThis wrapper chooses to handle callbacks via subclassing rather than\nrequiring a separate delegate class. Subclass should define the following\nmethods; see the API for the method signatures:\n\n* `peer_added`\n* `peer_removed`\n* `receive`\n* `stream_receive`\n\nThe versions of these methods in the `MultipeerConnectivity` class just\nprint out the information received.\n\nNote that if these method update the UI, you should decorate them with\n`objc_util.on_main_thread`.\n\n## Additional details\n\n* This implementation uses automatic invite of all peer\u25cas (until you call\n`stop_looking_for_peers`). Future version may include a callback for making\ndecisions on which peers to accept.\n* Related to the previous point, including discovery info while browsing for\npeers is not currently supported.\n* Also, there is no way to explicitly kick a specific peer out of a session.\nThis seems to be a limitation of the Apple framework.\n* Following defaults are used and are not currently configurable without\nresorting to ObjC:\n* Secure - Encryption is required on all connections.\n* Not secure - A specific security identity cannot be set.\n\n## Version history\n\n* 1.0 - first version submitted to PyPi\n* 0.9 - first functional version\n\n# API\n\n* [Class: MultipeerConnectivity](#class-multipeerconnectivity)\n  * [Methods](#methods)\n* [Functions](#functions)\n\n\n## Class: MultipeerConnectivity\n\nMultipeer communications. Subclass this class to define how you want\nto react to added or removed peers, and to process incoming messages\nfrom peers.\n\nConstructor:\n\n    mc = MultipeerConnectivity(display_name='Peer', service_type='dev-srv')\n\nArguments:\n\n* `display_name` - This peer's display name (e.g. a player name). Must\nnot be None or an empty string, and must be at most 63 bytes long\n(UTF-8 encoded).\n* `service_type` - String that must match with that of the peers in\norder for a connection to be established. Must be 1-15 characters in\nlength and contain only a-z, 0-9, or '-'.\n* `initial_data` - Any JSON-serializable data that can be requested by\npeers with a call to `get_initial_data()`.\n* `initialize_streams` - If True, a stream is set up to any peer that\nconnects.\n\nCreated object will immediately start advertising and browsing for peers.\n\n## Methods\n\n\n#### `peer_added(self, peer_id)`\n\n  Override handling of new peers in a subclass. \n\n#### `peer_removed(self, peer_id)`\n\n  Override handling of lost peers in a subclass. \n\n#### `get_peers(self)`\n\n  Get a list of peers currently connected. \n\n#### `get_initial_data(self, peer_id)`\n\n  Returns initial context data provided by the peer, or None. \n\n#### `start_looking_for_peers(self)`\n\n  Start conmecting to available peers. \n\n#### `stop_looking_for_peers(self)`\n\n  Stop advertising for new connections, e.g. when you have all the\n  players and start a game, and do not want new players joining in the\n  middle. \n\n#### `send(self, message, to_peer=None, reliable=True)`\n\n  Send a message to some or all peers.\n  \n  * `message` - to be sent to the peer(s). Must be JSON-serializable.\n  * `to_peer` - receiver peer IDs. Can be a single peer ID, a list of peer\n  IDs, or left out (None) for sending to all connected peers.\n  * `reliable` - indicates whether delivery of data should be guaranteed\n  (enqueueing and retransmitting data as needed, and ensuring in-order\n  delivery). Default is True, but can be set to False for performance\n  reasons.\n\n#### `stream(self, byte_data, to_peer=None)`\n\n  Stream message string to some or all peers. Stream per receiver will\n  be set up on first call. See constructor parameters for the option to have\n  streams per peer initialized on connection.\n  \n  * `byte_data` - data to be sent to the peer(s). If you are sending a\n  string, call its `encode()` method and pass the result to this method.\n  * `to_peer` - receiver peer IDs. Can be a single peer ID, a list of peer\n  IDs, or left out (None) for sending to all connected peers.\n\n#### `receive(self, message, from_peer)`\n\n  Override in a subclass to handle incoming messages. \n\n#### `stream_receive(self, byte_data, from_peer)`\n\n  Override in a subclass to handle incoming streamed data.\n  `byte_data` is a `bytearray`; call its `decode()` method if you expect a\n  string.\n\n#### `disconnect(self)`\n\n  End your games or similar sessions by calling this method. \n\n#### `end_all(self)`\n\n  Disconnects from the multipeer session and removes internal references.\n  Further communications will require instantiating a new\n  MultipeerCommunications (sub)class. \n# Functions\n\n\n#### `get_self(manager_object)`\n\n  Expects a 'manager object', i.e. one of session, advertiser or\n  browser, and uses the contained peer ID to locate the right Python manager\n  object. \n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mikaelho/multipeer", "keywords": "", "license": "TheUnlicense", "maintainer": "", "maintainer_email": "", "name": "pythonista-multipeer", "package_url": "https://pypi.org/project/pythonista-multipeer/", "platform": "", "project_url": "https://pypi.org/project/pythonista-multipeer/", "project_urls": {"Homepage": "https://github.com/mikaelho/multipeer"}, "release_url": "https://pypi.org/project/pythonista-multipeer/1.0.1/", "requires_dist": null, "requires_python": "", "summary": "Multipeer connectivity for the Pythonista iOS app", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>multipeer</h1>\n<p>Multipeer connectivity for the Pythonista iOS app</p>\n<h1>Multipeer</h1>\n<p>This is a <a href=\"http://omz-software.com/pythonista/\" rel=\"nofollow\">Pythonista</a> wrapper around iOS\n<a href=\"https://developer.apple.com/documentation/multipeerconnectivity?language=objc\" rel=\"nofollow\">Multipeer Connectivity</a>.</p>\n<p>Multipeer connectivity allows you to find and exchange information between\n2-8 iOS and Mac devices in the same network neighborhood (same wifi or\nbluetooth), without going through some server.</p>\n<p>Sample use cases include games, chats, file exchange (like AirDrop) and so on.</p>\n<h2>Installation</h2>\n<p>Copy the <code>multipeer.py</code> file from Github to your site-packages, or just:</p>\n<pre><code>pip install pythonista-multipeer\n</code></pre>\n<p>in <a href=\"https://github.com/ywangd/stash\" rel=\"nofollow\">Stash</a>.</p>\n<h2>Usage</h2>\n<p>Here's a minimal usage example, a line-based chat. You need to be running\nthe same code on all devices participating in the chat.</p>\n<pre><code>import multipeer\n\nmy_name = input('Name: ')\n\nmc = multipeer.MultipeerConnectivity(display_name=my_name,\n  service_type='chat')\n\ntry:\n  while True:\n    chat_message = input('Message: ')\n    mc.send(chat_message)\nfinally:\n  mc.end_all()\n</code></pre>\n<p>This example is functional, even though the prompts and incoming messages\ntend to get mixed up. You can try it out by running the <code>multipeer.py</code> file.\nThere is also a cleaner Pythonista UI version of the chat in <code>multipeer_chat</code>.</p>\n<p>Here are the things to note when starting to use this library:</p>\n<h2>Peer-to-peer, not client-server</h2>\n<p>This wrapper around the MC framework makes no assumptions regarding the\nrelationships between peers. If you need client-server roles, you can build\nthem on top.</p>\n<h2>Expected usage</h2>\n<ol>\n<li>Create a subclass of <code>MultipeerCommunications</code> to handle messages from\nthe framework (see separate topic, below).</li>\n<li>Instantiate the subclass with your service type, peer display name and\noptional initial context data (see the class description).</li>\n<li>Wait for peers to connect (see the <code>peer_added</code> and <code>get_peers</code> methods).</li>\n<li>Optionally, have each participating peer stop accepting further peers,\ne.g. for the duration of a game (see the <code>stop_looking_for_peers</code> method).</li>\n<li>Send and receive messages (see a separate topic, below).</li>\n<li>Potentially react to additions and removal of peers.</li>\n<li>Optionally, start accepting peers again, e.g. after a previous\ngame ends (see the <code>start_looking_for_peers</code> method).</li>\n<li>Before your app exits, call the <code>end_all</code> method to make sure there are\nno lingering connections.</li>\n</ol>\n<h2>What's in a message?</h2>\n<p>Messages passed between peers are UTF-8 encoded text. This wrapper\nJSON-serializes the message you give to the <code>send</code> method (probably a str or\na dict), then encodes it in bytes. Receiving peers reconstitute the message\nand pass it to the <code>receive</code> callback.</p>\n<h2>Streaming</h2>\n<p>There are methods to use streaming instead of simple messages. Streamed data\nis received in 1024 byte chunks. There is a constructor option\n<code>initialize_streams</code> that can be used to set up a stream with each connected\npeer; otherwise, the streams are initialized when needed.</p>\n<h2>Performance</h2>\n<p>Pythonista forum user <code>mithrendal</code> ran some ping tests with very small data\npayload and 1000 repeats. Observed average times for a two-way messages were:</p>\n<ul>\n<li>11.85 ms - <code>send</code> method with <code>reliable=False</code></li>\n<li>11.94 ms - <code>send</code> method with <code>reliable=True</code> (the default)</li>\n<li>6.19 ms - <code>stream</code> method</li>\n</ul>\n<p>Tentative conclusions from these results:</p>\n<ul>\n<li>Connections are likely to be good enough that reliable messaging is not a\nperformance concern.</li>\n<li>Streaming may be significantly better if\ncommunications delay is an issue.</li>\n</ul>\n<h2>What is a peer ID?</h2>\n<p>Peer IDs passed around by the wrapper have a <code>display_name</code> member that\ngives you the display name of that peer. There is no guarantee that these\nnames are unique between peers.</p>\n<p>The IDs act also as identifier objects for specific peers, and can be used\nto <code>send</code> messages to individual peers.</p>\n<p>You cannot create peer IDs for remote peers manually.</p>\n<h2>Why do I need to subclass?</h2>\n<p>This wrapper chooses to handle callbacks via subclassing rather than\nrequiring a separate delegate class. Subclass should define the following\nmethods; see the API for the method signatures:</p>\n<ul>\n<li><code>peer_added</code></li>\n<li><code>peer_removed</code></li>\n<li><code>receive</code></li>\n<li><code>stream_receive</code></li>\n</ul>\n<p>The versions of these methods in the <code>MultipeerConnectivity</code> class just\nprint out the information received.</p>\n<p>Note that if these method update the UI, you should decorate them with\n<code>objc_util.on_main_thread</code>.</p>\n<h2>Additional details</h2>\n<ul>\n<li>This implementation uses automatic invite of all peer\u25cas (until you call\n<code>stop_looking_for_peers</code>). Future version may include a callback for making\ndecisions on which peers to accept.</li>\n<li>Related to the previous point, including discovery info while browsing for\npeers is not currently supported.</li>\n<li>Also, there is no way to explicitly kick a specific peer out of a session.\nThis seems to be a limitation of the Apple framework.</li>\n<li>Following defaults are used and are not currently configurable without\nresorting to ObjC:</li>\n<li>Secure - Encryption is required on all connections.</li>\n<li>Not secure - A specific security identity cannot be set.</li>\n</ul>\n<h2>Version history</h2>\n<ul>\n<li>1.0 - first version submitted to PyPi</li>\n<li>0.9 - first functional version</li>\n</ul>\n<h1>API</h1>\n<ul>\n<li><a href=\"#class-multipeerconnectivity\" rel=\"nofollow\">Class: MultipeerConnectivity</a>\n<ul>\n<li><a href=\"#methods\" rel=\"nofollow\">Methods</a></li>\n</ul>\n</li>\n<li><a href=\"#functions\" rel=\"nofollow\">Functions</a></li>\n</ul>\n<h2>Class: MultipeerConnectivity</h2>\n<p>Multipeer communications. Subclass this class to define how you want\nto react to added or removed peers, and to process incoming messages\nfrom peers.</p>\n<p>Constructor:</p>\n<pre><code>mc = MultipeerConnectivity(display_name='Peer', service_type='dev-srv')\n</code></pre>\n<p>Arguments:</p>\n<ul>\n<li><code>display_name</code> - This peer's display name (e.g. a player name). Must\nnot be None or an empty string, and must be at most 63 bytes long\n(UTF-8 encoded).</li>\n<li><code>service_type</code> - String that must match with that of the peers in\norder for a connection to be established. Must be 1-15 characters in\nlength and contain only a-z, 0-9, or '-'.</li>\n<li><code>initial_data</code> - Any JSON-serializable data that can be requested by\npeers with a call to <code>get_initial_data()</code>.</li>\n<li><code>initialize_streams</code> - If True, a stream is set up to any peer that\nconnects.</li>\n</ul>\n<p>Created object will immediately start advertising and browsing for peers.</p>\n<h2>Methods</h2>\n<h4><code>peer_added(self, peer_id)</code></h4>\n<p>Override handling of new peers in a subclass.</p>\n<h4><code>peer_removed(self, peer_id)</code></h4>\n<p>Override handling of lost peers in a subclass.</p>\n<h4><code>get_peers(self)</code></h4>\n<p>Get a list of peers currently connected.</p>\n<h4><code>get_initial_data(self, peer_id)</code></h4>\n<p>Returns initial context data provided by the peer, or None.</p>\n<h4><code>start_looking_for_peers(self)</code></h4>\n<p>Start conmecting to available peers.</p>\n<h4><code>stop_looking_for_peers(self)</code></h4>\n<p>Stop advertising for new connections, e.g. when you have all the\nplayers and start a game, and do not want new players joining in the\nmiddle.</p>\n<h4><code>send(self, message, to_peer=None, reliable=True)</code></h4>\n<p>Send a message to some or all peers.</p>\n<ul>\n<li><code>message</code> - to be sent to the peer(s). Must be JSON-serializable.</li>\n<li><code>to_peer</code> - receiver peer IDs. Can be a single peer ID, a list of peer\nIDs, or left out (None) for sending to all connected peers.</li>\n<li><code>reliable</code> - indicates whether delivery of data should be guaranteed\n(enqueueing and retransmitting data as needed, and ensuring in-order\ndelivery). Default is True, but can be set to False for performance\nreasons.</li>\n</ul>\n<h4><code>stream(self, byte_data, to_peer=None)</code></h4>\n<p>Stream message string to some or all peers. Stream per receiver will\nbe set up on first call. See constructor parameters for the option to have\nstreams per peer initialized on connection.</p>\n<ul>\n<li><code>byte_data</code> - data to be sent to the peer(s). If you are sending a\nstring, call its <code>encode()</code> method and pass the result to this method.</li>\n<li><code>to_peer</code> - receiver peer IDs. Can be a single peer ID, a list of peer\nIDs, or left out (None) for sending to all connected peers.</li>\n</ul>\n<h4><code>receive(self, message, from_peer)</code></h4>\n<p>Override in a subclass to handle incoming messages.</p>\n<h4><code>stream_receive(self, byte_data, from_peer)</code></h4>\n<p>Override in a subclass to handle incoming streamed data.\n<code>byte_data</code> is a <code>bytearray</code>; call its <code>decode()</code> method if you expect a\nstring.</p>\n<h4><code>disconnect(self)</code></h4>\n<p>End your games or similar sessions by calling this method.</p>\n<h4><code>end_all(self)</code></h4>\n<p>Disconnects from the multipeer session and removes internal references.\nFurther communications will require instantiating a new\nMultipeerCommunications (sub)class.</p>\n<h1>Functions</h1>\n<h4><code>get_self(manager_object)</code></h4>\n<p>Expects a 'manager object', i.e. one of session, advertiser or\nbrowser, and uses the contained peer ID to locate the right Python manager\nobject.</p>\n\n          </div>"}, "last_serial": 6905446, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "77f10338e1e67380b380e989160160f4", "sha256": "39dea7807b4b7515dddb040ea3067348bd4badef9e945e70df3e2532b43d3c76"}, "downloads": -1, "filename": "pythonista_multipeer-1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "77f10338e1e67380b380e989160160f4", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 11984, "upload_time": "2020-02-29T18:57:09", "upload_time_iso_8601": "2020-02-29T18:57:09.747815Z", "url": "https://files.pythonhosted.org/packages/f1/70/030dcaca01558cf35814e84ef9acc29e6c72126e2afe4c70ec4e68a5f1dc/pythonista_multipeer-1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fee73088f349750b1e7d5c2d5ef6e4df", "sha256": "4102820203f1dd23e2152556919118f27657a1fa6a831f37681892101c46f0ea"}, "downloads": -1, "filename": "pythonista-multipeer-1.0.tar.gz", "has_sig": false, "md5_digest": "fee73088f349750b1e7d5c2d5ef6e4df", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14798, "upload_time": "2020-02-29T18:57:13", "upload_time_iso_8601": "2020-02-29T18:57:13.030097Z", "url": "https://files.pythonhosted.org/packages/b5/2d/6e0381023c31404bd647fd1d443f95854daeacce31d8e445861cf9cda224/pythonista-multipeer-1.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "92fd04c816c47f31c30568e6709d0981", "sha256": "285b4bb661a86a254d42f104cbbd52a3b2b78127a0afddca12c2015c6f0e9f91"}, "downloads": -1, "filename": "pythonista_multipeer-1.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "92fd04c816c47f31c30568e6709d0981", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 12012, "upload_time": "2020-03-29T07:34:38", "upload_time_iso_8601": "2020-03-29T07:34:38.194551Z", "url": "https://files.pythonhosted.org/packages/e9/e2/e4d94d8a2e374b0c90eb2eeb008541e7f06610fa0440c3a91baa076d3464/pythonista_multipeer-1.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "11571a866c4c239645fb37c07d150252", "sha256": "7a8ff06add19029fe56272b6c2d141c23b7222a1f768c0e75329e275a0e3dbee"}, "downloads": -1, "filename": "pythonista-multipeer-1.0.1.tar.gz", "has_sig": false, "md5_digest": "11571a866c4c239645fb37c07d150252", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14841, "upload_time": "2020-03-29T07:35:00", "upload_time_iso_8601": "2020-03-29T07:35:00.882063Z", "url": "https://files.pythonhosted.org/packages/02/6e/34a5efa75e6cb8258e1bbfd213ac24fbce6b8ce4bf3e6508cfc9d35eaa8c/pythonista-multipeer-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "92fd04c816c47f31c30568e6709d0981", "sha256": "285b4bb661a86a254d42f104cbbd52a3b2b78127a0afddca12c2015c6f0e9f91"}, "downloads": -1, "filename": "pythonista_multipeer-1.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "92fd04c816c47f31c30568e6709d0981", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 12012, "upload_time": "2020-03-29T07:34:38", "upload_time_iso_8601": "2020-03-29T07:34:38.194551Z", "url": "https://files.pythonhosted.org/packages/e9/e2/e4d94d8a2e374b0c90eb2eeb008541e7f06610fa0440c3a91baa076d3464/pythonista_multipeer-1.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "11571a866c4c239645fb37c07d150252", "sha256": "7a8ff06add19029fe56272b6c2d141c23b7222a1f768c0e75329e275a0e3dbee"}, "downloads": -1, "filename": "pythonista-multipeer-1.0.1.tar.gz", "has_sig": false, "md5_digest": "11571a866c4c239645fb37c07d150252", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14841, "upload_time": "2020-03-29T07:35:00", "upload_time_iso_8601": "2020-03-29T07:35:00.882063Z", "url": "https://files.pythonhosted.org/packages/02/6e/34a5efa75e6cb8258e1bbfd213ac24fbce6b8ce4bf3e6508cfc9d35eaa8c/pythonista-multipeer-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:17:08 2020"}