{"info": {"author": "Nexedi SA", "author_email": "neo-dev@erp5.org", "bugtrack_url": null, "classifiers": ["Framework :: ZODB", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License (GPL)", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 2.7", "Topic :: Database", "Topic :: Software Development :: Libraries :: Python Modules"], "description": ".. contents::\n\nNEO is a distributed, redundant and scalable implementation of ZODB API.\nNEO stands for Nexedi Enterprise Object.\n\nOverview\n========\n\nA NEO cluster is composed of the following types of nodes:\n\n- \"master\" nodes (mandatory, 1 or more)\n\n  Takes care of transactionality. Only one master node is really active\n  (the active master node is called \"primary master\") at any given time,\n  extra masters are spares (they are called \"secondary masters\").\n\n- \"storage\" nodes (mandatory, 1 or more)\n\n  Stores data, preserving history. All available storage nodes are in use\n  simultaneously. This offers redundancy and data distribution.\n  Available backends: MySQL (InnoDB, RocksDB or TokuDB), SQLite\n\n- \"admin\" nodes (mandatory for startup, optional after)\n\n  Accepts commands from neoctl tool and transmits them to the\n  primary master, and monitors cluster state.\n\n- \"client\" nodes\n\n  Well... Something needing to store/load data in a NEO cluster.\n\nZODB API is fully implemented except:\n\n- pack: only old revisions of objects are removed (it should be possible\n  to use `zc.zodbdgc <https://pypi.python.org/pypi/zc.zodbdgc>`_\n  for garbage collection)\n- blobs: not implemented (not considered yet)\n\nAny ZODB like FileStorage can be converted to NEO instantaneously,\nwhich means the database is operational before all data are imported.\nThere's also a tool to convert back to FileStorage.\n\nFor more detailed information about features related to scalability,\nsee the `Architecture and Characteristics` section of https://neo.nexedi.com/.\n\nRequirements\n============\n\n- Linux 2.6 or later\n\n- Python 2.7.x (2.7.9 or later for SSL support)\n\n- For storage nodes using MySQL backend:\n\n  - MySQLdb: https://github.com/PyMySQL/mysqlclient-python\n\n- For client nodes: ZODB 3.10.x or later\n\nInstallation\n============\n\na. NEO can be installed like any other egg (see setup.py). Or you can simply\n   make `neo` directory available for Python to import (for example, by\n   adding its container directory to the PYTHONPATH environment variable).\n\nb. Write a neo.conf file like the example provided. If you use MySQL,\n   you'll also need create 1 database per storage node.\n\nc. Start all required nodes::\n\n    $ neomaster -f neo.conf\n    $ neostorage -f neo.conf -s storage1\n    $ neostorage -f neo.conf -s storage2\n    $ neoadmin -f neo.conf\n\nd. Tell the cluster to initialize storage nodes::\n\n    $ neoctl -a <admin> start\n\ne. Clients can connect when the cluster is in RUNNING state::\n\n    $ neoctl -a <admin> print cluster\n    RUNNING\n\nf. See `importer.conf` file to import an existing database,\n   or `neoctl` command for more administrative tasks.\n\nAlternatively, you can use `neosimple` command to quickly setup a cluster for\ntesting.\n\nHow to use\n==========\n\nFirst make sure Python can import 'neo.client' package.\n\nIn zope\n-------\n\na. Edit your zope.conf, add a neo import and edit the `zodb_db` section by\n   replacing its filestorage subsection by a NEOStorage one.\n   It should look like::\n\n    %import neo.client\n    <zodb_db main>\n        <NEOStorage>\n            master_nodes 127.0.0.1:10000\n            name <cluster name>\n        </NEOStorage>\n        mount-point /\n    </zodb_db>\n\nb. Start zope\n\nIn a Python script\n------------------\n\nJust create the storage object and play with it::\n\n  from neo.client.Storage import Storage\n  s = Storage(master_nodes=\"127.0.0.1:10010\", name=\"main\")\n  ...\n\n\"name\" and \"master_nodes\" parameters have the same meaning as in\nconfiguration file.\n\nShutting down\n-------------\n\nBefore shutting down NEO, all clients like Zope instances should be stopped,\nso that cluster become idle. This is required for multi-DB setups, to prevent\ncritical failures in second phase of TPC.\n\nA cluster (i.e. masters+storages+admin) can be stopped gracefully by putting it\nin STOPPING state using neoctl::\n\n  neoctl -a <admin> set cluster STOPPING\n\nThis can also be done manually, which helps if your cluster is in bad state:\n\n- Stop all master nodes first with a SIGINT or SIGTERM, so that storage nodes\n  don't become in OUT_OF_DATE state.\n- Next stop remaining nodes with a SIGINT or SIGTERM.\n\nMaster-slave asynchronous replication\n-------------------------------------\n\nThis is the recommanded way to backup a NEO cluster.\nOnce a cluster with appropriate `upstream_cluster` & `upstream_masters`\nconfiguration is started, you can switch it into backup mode\nusing::\n\n  neoctl -a <admin> set cluster STARTING_BACKUP\n\nIt remembers it is in such mode when it is stopped, and it can be put back into\nnormal mode (RUNNING)  by setting it into STOPPING_BACKUP state.\n\nPacks are currently not replicated, which means packing should always be done\nup to a TID that is already fully replicated, so that the backup cluster has a\nfull history (and not random holes).\n\nSSL support\n-----------\n\nIn addition to any external solution like OpenVPN, NEO has builtin SSL support\nto authenticate and encrypt communications between nodes.\n\nAll commands and configuration files have options to specify a CA certificate,\nthe node certificate and the node private key. A certificate can be shared\nby several nodes.\n\nNEO always uses the latest SSL protocol supported by the Python interpreter,\nwithout fallback to older versions. A \"SSL: WRONG_VERSION_NUMBER\" error means\nthat a node runs in an older environment (Python + OpenSSL) than others.\n\nNote also that you can't mix non-SSL nodes and SSL nodes, even between a\nupstream cluster and a backup one. In doing so, connections can get stuck,\nor fail with malformed packets or SSL handshake errors.\n\nDeployment\n==========\n\nNEO has no built-in deployment features such as process daemonization. We use\n`supervisor <http://supervisord.org/>`_ with configuration like below::\n\n  [group:neo]\n  programs=master_01,storage_01,admin\n\n  [program:storage_01]\n  priority=10\n  command=neostorage -s storage_01 -f /neo/neo.conf\n\n  [program:master_01]\n  priority=20\n  command=neomaster -s master_01 -f /neo/neo.conf\n\n  [program:admin]\n  priority=20\n  command=neoadmin -s admin -f /neo/neo.conf\n\nDevelopers\n==========\n\nDevelopers interested in NEO may refer to\n`NEO Web site <https://neo.nexedi.com/>`_ and subscribe to following mailing\nlists:\n\n- `neo-users <https://mail.tiolive.com/mailman/listinfo/neo-users>`_:\n  users discussion\n- `neo-dev <https://mail.tiolive.com/mailman/listinfo/neo-dev>`_:\n  developers discussion\n\nAutomated test results are published at\nhttps://www.erp5.com/quality/integration/P-ERP5.Com.Unit%20Tests/Base_viewListMode?proxy_form_id=WebSection_viewERP5UnitTestForm&proxy_field_id=listbox&proxy_field_selection_name=WebSection_viewERP5UnitTestForm_listbox_selection&reset=1&listbox_title=NEO-%25\n\nCommercial Support\n==================\n\nNexedi provides commercial support for NEO: https://www.nexedi.com/\n\nChange History\n==============\n\n1.12 (2019-04-28)\n-----------------\n\nMost changes in this version focus on the ability to migrate efficiently\nand reliably a big ZODB to NEO, which required changes in the protocol.\nSee testSplitAndMakeResilientUsingClone for an example of scenario.\n\nBetter cluster management:\n\n- New --new-nid storage option for fast cloning.\n- The number of wanted replicas is now a property of the database, which is\n  modifiable when the cluster is running, and reported by `neoctl print pt`.\n- Better error reporting from the master to neoctl for denied requests.\n- tweak: do not touch cells of nodes that are intended to be dropped.\n- tweak: do not crash when trying to remove all nodes.\n- tweak: new neoctl option to ask the master to simulate.\n- neoctl: better display of full partition tables.\n- master: reject drop/tweak commands that could lead to unwanted status.\n\nImporter:\n\n- Fix possible data loss on writeback.\n- v1.9 broke replication (as source) once the import is finished.\n- Speed up startup when the import is already finished.\n- Fix closure of ZODB, and also do it when the import is finished.\n- Fix hidden \"maximum recursion depth exceeded\" at startup.\n- Fix resumption when using SQLite.\n- v1.10 broke resumption when there are new transactions since the import\n  started.\n\nMySQL:\n\n- Better support of RocksDB by specifying column families.\n- Fix handling of connection strings (--database) without credentials.\n\n1.11 (2019-03-11)\n-----------------\n\nThis release continues the work in v1.8 to stabilize NEO. A new 'stress'\ntool was added: it kills storage nodes and resets TCP connections randomly,\nwhile causing high concurrency activity. It revealed many bugs of all kinds,\nincluding crashes and corruptions. Most of them happened after network\ndisconnection. In order to fix them all, several improvements have also been\ndone to logging:\n\n- New neoctl command to flush the logs of all nodes in the cluster.\n- In logs, dump the partition table in a more compact and readable way.\n- client: log_flush most exceptions raised from Application to ZODB\n- More RTMIN+2 (log) information for clients and connections.\n- New log format to show node id (and optionally cluster name) in node column.\n- neolog: add support for zstd-compressed logs.\n- neolog: do not die when a table is corrupted.\n\nOther changes:\n\n- sqlite: optimize storage of metadata (the speed up in v1.9 about indexing\n  'obj' primarily by 'oid' was only effective for MySQL).\n- Fix error handling when setting up a listening connector.\n- The command line parsing of all executables has been completely rewritten,\n  fixing a few minor bugs.\n\n1.10 (2018-07-16)\n-----------------\n\nA important performance improvement is that the replication now remembers where\nit was interrupted: a storage node that gets disconnected for a short time now\ngets fully operational quite instantaneously because it only has to replicate\nthe new data. Before, the time to recover depended on the size of the DB, just\nto verify that most of the data are already transferred.\n\nAs a small optimization, an empty transaction extension is now serialized with\nan empty string.\n\nThe above 2 changes required a bump of the protocol version, as well as an\nupgrade of the storage format. Once upgraded (this is done automatically as\nusual), databases can't be opened anymore by older versions of NEO.\n\nOther general changes:\n\n- Add support for custom compression levels.\n- Maximize resiliency by taking into account the topology of storage nodes.\n- Fix a few issues with ZODB5. Note however that merging several DB with the\n  Importer backend only works if they were only used with ZODB < 5.\n\nMaster:\n\n- Automatically discard feeding cells that get out-of-date.\n\nClient:\n\n- Fix partial import from a source storage.\n- Store uncompressed if compressed size is equal.\n\nStorage:\n\n- Fixed v1.9 code that sped up the replication by sending bigger network\n  packets.\n- Fix replication of creation undone.\n- Stop logging 'Abort TXN' for txn that have been locked.\n- Clarify log about data deletion of discarded cells.\n\nMySQL backend:\n\n- Fix replication of big OIDs (> 16M).\n- Do not full-scan for duplicates of big OIDs if deduplication is disabled.\n- Fix remaining places where a server disconnection was not catched.\n\nSQlite backend:\n\n- Fix indexes of upgraded databases.\n\nImporter backend:\n\n- Fetch and process the data to import in a separate process. It is even\n  usually free to use the best compression level.\n- New option to write back new transactions to the source database.\n  See 'importer.conf' for more information.\n- Give a title to the 'import' and 'writeback' subprocesses,\n  if the 'setproctitle' egg is installed.\n- Log when the transaction index for FileStorage DB is built.\n- Open imported database in read-only whenever possible.\n- Do not trigger speedupFileStorageTxnLookup uselessly.\n- Do not checksum data twice.\n- Fix NameError when recovering during tpc_finish.\n\n1.9 (2018-03-13)\n----------------\n\nA lot of performance improvements have been done on storage nodes for this\nrelease, and some of them required changes in the storage format. In short,\nthe migration is done automatically, but you may want to read UPGRADE notes\nfor more details.\n\nPerformance:\n\n- Speed up replication by sending bigger network packets,\n  and by not getting object next_serial for nothing.\n- Speed up reads by indexing 'obj' primarily by 'oid' (instead of 'tid').\n- Optimize storage layout of raw data for replication.\n\nOther storage changes:\n\n- Disable data deduplication by default. --dedup option added.\n- importer: do not crash if a backup cluster tries to replicate.\n- importer: preserve 'packed' flag.\n\nMaster:\n\n- Fix possible failure when reading data in a backup cluster with replicas.\n- Fix generation of TID.\n- Fix resumption of backup replication (internal or not).\n\nClient:\n\n- New 'cache-size' Storage option.\n- Cache hit/miss statistics.\n- Fix accounting of cache size.\n- Preserve 'packed' flag on iteration.\n- At startup, or after nodes are back, full load balancing could be prevented\n  until some data are written.\n\nOther:\n\n- neolog: --from option now also tries to parse with `dateutil`_.\n- neolog: add support for xz-compressed logs, using external xzcat commands.\n\n.. _dateutil: https://dateutil.readthedocs.io/\n\n1.8.1 (2017-11-07)\n------------------\n\n- Add support for OpenSSL >= 1.1.\n- storage: fix possible crash when delaying replication requests.\n- mysql: fix performance issues on read operations by using more index hints.\n\n1.8 (2017-07-04)\n----------------\n\nThis release mainly stabilizes NEO when it is used with several storage nodes,\nfixing many race conditions involving events like transactional operations\n(read/write, conflict resolution...), replication, partition table tweaking,\nand all kinds of failures (node crashes, network cuts...). This includes a\nrework of conflict resolution, to implement the long-awaited deadlock avoidance\n(it was a limitation caused by object-level locking).\n\nSimilarly, having spare master nodes is not an experimental feature anymore:\nthe `election` (of the primary master) has been reimplemented, and it now\nhappens during the RECOVERING phase. This comes with a change about node\nstates: BROKEN/HIDDEN/UNKNOWN are removed, DOWN is renamed into UNKNOWN,\nand TEMPORARILY_DOWN into DOWN.\n\nAnd still for more resiliency, the new algorithm to tweak the partition table\nis better at minimizing the amount of replication, and it does not discard\nreadable cells too quickly anymore: a partition can now have multiple FEEDING\ncells, to avoid going below the wanted level of replication.\n\nOther changes:\n\n- General:\n\n  - Packet timeouts have been removed.\n    TCP keepalives are used instead of applicative pings.\n  - Connection handshake between nodes is reviewed to make sure that they\n    speak the same protocol before doing anything else, and report clearer\n    error messages otherwise. A dangerous bug was that there was no protocol\n    version check between neoctl and the admin node.\n  - Proper handling of incoming packets for closed/aborted connections.\n  - An exception while processing an answer could leave the handler switcher\n    in the bad state.\n  - In STOPPING cluster state, really wait for all transactions to be finished.\n  - Several issues when undoing transactions with conflict resolutions\n    have been fixed.\n  - Delayed connection acceptation when the storage node is ready.\n\n- Client:\n\n  - Added support for `zodburi`_.\n  - Fix load error during conflict resolution in case of late invalidation.\n  - Do not wait tpc_vote to start resolving conflicts.\n  - Fix harmless 'unexpected ... AnswerRequestIdentification' exceptions.\n\n- Storage:\n\n  - New --disable-drop-partitions option, which is useful for big databases\n    because the current code to delete data of discarded cells is inefficient\n    (this option should disappear in the future).\n  - Prevent 2 nodes from working with the same database.\n  - Discard answers from aborted replications.\n    In some cases, this led to data corruption or crashes.\n\n- MySQL backend:\n\n  - Added support for RocksDB.\n  - Do not flood logs when retrying to connect non-stop.\n  - Do not retry a failing query forever.\n  - By default, do not retry to connect to the server automatically.\n\n- Tools:\n\n  - neolog: new --decompress option.\n  - neolog: new option to hide the node column.\n  - neoctl: make the identification of the primary master easier with\n    'print node'.\n\n- A lot of improvements for developers and debugging.\n\n.. _zodburi: https://docs.pylonsproject.org/projects/zodburi\n\n1.7.1 (2017-01-18)\n------------------\n\n- Replication:\n\n  - Fixed possibly wrong knowledge of cells' backup_tid when resuming backup.\n    In such case, 'neoctl print ids' gave false impression that the backup\n    cluster was up-to-date. This also resulted in an inconsistent database\n    when leaving backup mode before that the issue resolved by itself.\n  - Storage nodes now select the partition which is furthest behind. Previous\n    criterion was such that in case of high upstream activity, the backup could\n    even be stuck looping on a subset of partitions.\n  - Fixed replication of unfinished imported transactions.\n\n- Fixed abort before vote, to free the storage space used by the transaction.\n  A new 'prune_orphan' neoctl command was added to delete unreferenced raw data\n  in the database.\n\n- Removed short storage option -R to reset the db.\n  Help is reworded to clarify that --reset exits once done.\n\n- The application receiving buffer size has been increased.\n  This speeds up transfer of big packets.\n\n- The master raised AttributeError at exit during recovery.\n\n- At startup, the importer storage backend connected twice to the destination\n  database.\n\n1.7.0 (2016-12-19)\n------------------\n\n- Identification issues, mainly caused by id conflicts, are fixed:\n\n  - Storage nodes now only accept clients that are known by the master.\n  - When reconnecting to a master, a client get a new id if the previous id is\n    already reallocated to another client.\n  - The consequences were either crashes or clients being unable to connect.\n\n- Added support for the latest versions of ZODB (4.4.4 & 5.0.1). A notable\n  change is that lastTransaction() does not ping the master anymore (but it\n  still causes a connection to the master if the client is disconnected).\n\n- A cluster in BACKUPING state can now serve regular clients in read-only mode.\n  But without invalidation yet, so clients must reconnect whenever they want\n  to see newer data.\n\n- Fixed crash of client nodes (including backup master) while trying to process\n  notifications before complete initialization, instead of ignoring them.\n\n- Client:\n\n  - Fix race condition leading to invalid mapping between internal connection\n    objects and their file descriptors. This resulted in KeyError exceptions.\n  - Fix item eviction from cache, which could break loading from storage.\n  - Better exception handling in tpc_abort.\n  - Do not limit the number of open connections to storage nodes.\n\n- Storage:\n\n  - Fix crash when a client loses connection to the master just before voting.\n  - MySQL: Force index for a few queries. Unfortunately, this is not perfect\n    because sometimes MySQL still ignores our hints.\n  - MySQL: Do not use unsafe TRUNCATE statement.\n\n- Make 'neoctl print ids' display time of TIDs.\n- Various neoctl/neolog formatting improvements/fixes.\n- Plus a few other changes for debugging and developers, as well as small\n  optimizations.\n\n1.6.3 (2016-06-15)\n------------------\n\n- Added support for ZODB 4.x\n\n- Clients are now able to recover from failures during tpc_finish when the\n  transaction got successfully committed.\n\n- Other fixes related to node disconnection:\n\n  - storage: fix crash when a client disconnects just after it requested to\n    finish a transaction\n  - storage: fix crash when trying to replicate from an unreachable node\n  - master: do never abort a prepared transaction (for example,\n    a client disconnecting during tpc_finish could cause a crash)\n  - client: fix invalidation issues when reconnecting to the master\n\n- Client:\n\n  - fix abort for storages where only current serials were checked\n  - fix the count of history items in the cache\n\n- neoctl: better error message when connection to admin fails\n\n1.6.2 (2016-03-09)\n------------------\n\n- storage: switch to a maintained fork of MySQL-python (mysqlclient)\n- storage: for better performance, the backend commit after an unlocked\n  transaction is deferred by 1 second, with the hope it's merged by a\n  subsequent commit (in case of a crash, the transaction is unlocked again),\n  so there are only 2 commits per transaction during high activity\n- client: optimize cache by not keeping items with counter=0 in history queue\n- client: fix possible assertion failure on load in case of a late invalidation\n\n1.6.1 (2016-01-25)\n------------------\n\nNEO repository has moved to https://lab.nexedi.com/nexedi/neoppod.git\n\n- client: fix spurious connection timeouts\n- client: add cache stats to information dumped on SIGRTMIN+2\n- storage: when using the Importer backend, allow truncation after the last\n  tid to import, during or after the import\n- neoctl: don't print 'None' on successful check/truncate commands\n- neolog: fix crash on unknown packets\n- plus a few other changes for debugging and developers\n\n1.6 (2015-12-02)\n----------------\n\nThis release has changes in storage format. The upgrade is done automatically,\nbut only if the cluster was stopped cleanly: see UPGRADE notes for more\ninformation.\n\n- NEO did not ensure that all data and metadata were written on disk before\n  tpc_finish, and it was for example vulnerable to ENOSPC errors. In order to\n  minimize the risk of failures during tpc_finish, the writing of metadata to\n  temporary tables is now done in tpc_vote. See commit `7eb7cf1`_ for more\n  information about possible changes on performance side.\n\n  This change comes with a new algorithm to verify unfinished data, which also\n  fixes a bug discarding transactions with objects for which readCurrent was\n  called.\n\n- The RECOVERING/VERIFYING phases, as well as transitions from/to other states,\n  have been completely reviewed, to fix many bugs:\n\n  - Possible corruption of partition table.\n  - The cluster could be stuck in RECOVERING or VERIFYING state.\n  - The probability to have cells out-of-date when restarting several storage\n    nodes simultaneously has been reduced.\n  - During recovery, a newly elected master now always waits all the storage\n    nodes with readable cells to be pending, in order to avoid a split of the\n    database.\n  - The last tid/oid could be wrong in several cases, for example after\n    transactions are recovered during VERIFYING phase.\n\n- neoctl gets a new command to truncate the database at an arbitrary TID.\n  Internally, NEO was already able to truncate the database, because this was\n  necessary to make the database consistent when leaving the backup mode.\n  However, there were several bugs that caused the database to be partially\n  truncated:\n\n  - The master now first stores persistently the decision to truncate,\n    so that it can recover from any kind of connection failure.\n  - The cluster goes back to RUNNING state only after an acknowledgment from\n    all storage nodes (including those without any readable cell) that they\n    truncated.\n\n- Storage:\n\n  - As a workaround to fix holes if replication is interrupted after new data\n    is committed, outdated cells always restart to replicate from the beginning.\n  - The deletion of partial transactions during verification didn't try to free\n    the associated raw data.\n  - The MySQL backend didn't drop the 'bigdata' table when erasing the database.\n\n- Handshaking SSL connections could be stuck when they're aborted.\n\n- 'neoctl print ids' displays a new value in backup mode: the highest common TID\n  up to which all readable cells have replicated, i.e. the TID at which the\n  database would be truncated when leaving the backup mode.\n\n.. _7eb7cf1: https://lab.nexedi.com/nexedi/neoppod/commit/7eb7cf1\n\n1.5.1 (2015-10-26)\n------------------\n\nSeveral bugs and performance issues have been fixed in this release, mainly\nin the storage node.\n\n- Importer storage backend:\n\n  - Fix retrieval of an object from ZODB when next serial in NEO.\n  - Fix crash of storage nodes when a transaction is aborted.\n  - Faster resumption when many transactions\n    have already been imported to MySQL.\n\n- MySQL storage backend:\n\n  - Refuse to start if max_allowed_packet is too small.\n  - Faster commit of transaction metadata.\n\n- Replication & checking of replicas:\n\n  - Fix crash when a corruption is found while checking TIDs.\n    2 other issues remain unfixed: see BUGS.rst file.\n  - Speed up checking of replicas, at the cost of storage nodes being\n    less responsive to other events.\n\n- The master wrongly sent invalidations for objects on which only readCurrent\n  was called, which caused invalid entries in client caches, or assertion\n  failures in Connection._setstate_noncurrent.\n\n1.5 (2015-10-05)\n----------------\n\nIn this version, the connectivity between nodes has been greatly improved:\n\n- Added SSL support.\n- IPv4 & IPv6 can be mixed: some nodes can have an IPv4 binding address,\n  whereas other listen on IPv6.\n- Version 1.4 fixed several cases where nodes could reconnect too quickly,\n  using 100% CPU and flooding logs. This is now fixed completely, for example\n  when a backup storage node was rejected because the upstream cluster was not\n  ready.\n- Tickless poll loop, for lower latency and CPU usage: nodes don't wake up\n  every second anymore to check if a timeout has expired.\n- Connections could be wrongly processed before being polled (for reading or\n  writing). This happened if a file descriptor number was reallocated by the\n  kernel for a connection, just after a connection was closed.\n\nOther changes are:\n\n- IStorage: history() did not wait the oid to be unlocked. This means that the\n  latest version of an object could be missing from the result.\n- Log files can now be specified in configuration files.\n- ~(user) construction are expanded for all paths in configuration (file or\n  command line). This does not concern non-daemon executables like neoctl.\n- For neoctl, -l option now logs everything on disk automatically.\n- The admin node do not reset anymore the list of known masters from\n  configuration when reconnecting, for consistency with client nodes.\n- Code refactoring and improvements to logging and debugging.\n- An notable change in the test suite is that the occasional deadlocks that\n  affected threaded tests have been fixed.\n\n1.4 (2015-07-13)\n----------------\n\nThis version comes with a change in the SQL tables format, to fix a potential\ncrash of storage nodes when storing values that only differ by the compression\nflag. See UPGRADE notes if you think your application may be affected by this\nbug.\n\n- Performance and features:\n\n  - 'Importer' storage backend has been significantly sped up.\n\n  - Support for TokuDB has been added to MySQL storage backend. The engine is\n    still InnoDB by default, and it can be selected via a new 'neostorage'\n    option.\n\n  - A 'neomaster' option has been added to automatically start a new cluster\n    if the number of pending storage nodes is greater than or equal to the\n    specified value.\n\n- Bugfixes:\n\n  - Storage crashed when reading empty transactions. We still need to decide\n    whether NEO should:\n\n    - continue to store such transactions;\n    - ignore them on commit, like other ZODB implementation;\n    - or fail on commit.\n\n  - Storage crashed when a client tries to \"steal\" the UUID of another client.\n\n  - Client could get stuck forever on unreadable cells when not connected to the\n    master.\n\n  - Client could only instantiate NEOStorage from the main thread, and the\n    RTMIN+2 signal displayed logs for only 1 NEOStorage. Now, RTMIN+2 & RTMIN+3\n    are setup when neo.client module is imported.\n\n- Plus fixes and improvements to logging and debugging.\n\n1.3 (2015-01-13)\n----------------\n\n- Version 1.2 added a new 'Importer' storage backend but it had 2 bugs.\n\n  - An interrupted migration could not be resumed.\n  - Merging several ZODB only worked if NEO could import all classes used by\n    the application. This has been fixed by repickling without loading any\n    object.\n\n- Logging has been improved for a better integration with the environment:\n\n  - RTMIN+1 signal was changed to reopen logs. RTMIN+1 & RTMIN+2 signals, which\n    were previously used for debugging, have been remapped to RTMIN+2 & RTMIN+3\n  - In Zope, client registers automatically for log rotation (USR2).\n  - NEO logs are SQLite DB that are not open anymore with a persistent journal,\n    because this is incompatible with the rename+reopen way to rotate logs,\n    and we want to support logrotate.\n  - 'neolog' can now open gzip/bz2 compressed logs transparently.\n  - 'neolog' does not spam the console anymore when piped to a process that\n    exits prematurely.\n\n- MySQL backend has been updated to work with recent MariaDB (>=10).\n- 2 'neomaster' command-line options were added to set upstream cluster/masters.\n\n1.2 (2014-07-30)\n----------------\n\nThe most important changes in this version are the work about conversion of\ndatabases from/to NEO:\n\n- A new 'Importer' storage backend has been implemented and this is now the\n  recommended way to migrate existing Zope databases. See 'importer.conf'\n  example file for more information.\n- 'neomigrate' command refused to run since version 1.0\n- Exported data serials by NEO iterator were wrong. There are still differences\n  with FileStorage:\n\n  - NEO always resolves to original serial, to avoid any indirection\n    (which slightly speeds up undo at the expense of a more complex pack code)\n  - NEO does not make any difference between object deletion and creation undone\n    (data serial always null in storage)\n\n  Apart from that, conversion of database back from NEO should be fixed.\n\nOther changes are:\n\n- A warning was added in 'neo.conf' about a possible misuse of replicas.\n- Compatibility with Python 2.6 has been dropped.\n- Support for recent version of SQlite has been added.\n- A memory leak has been fixed in replication.\n- MySQL backend now fails instead of silently reconnecting if there is any\n  pending change, which could cause data loss.\n- Optimization and minor bugfixes.\n\n1.1 (2014-01-07)\n----------------\n\n- Client failed at reconnecting properly to master. It could kill the master\n  (during tpc_finish!) or end up with invalid caches (i.e. possible data\n  corruption). Now, connection to master is even optional between\n  transaction.begin() and tpc_begin, as long as partition table contains\n  up-to-date data.\n- Compatibility with ZODB 3.9 has been dropped. Only 3.10.x branch is supported.\n- checkCurrentSerialInTransaction was not working.\n- Optimization and minor bugfixes.\n\n1.0 (2012-08-28)\n----------------\n\nThis version mainly comes with stabilized SQL tables format and efficient backup\nfeature, relying on replication, which has been fully reimplemented:\n\n- It is now incremental, instead of being done on whole partitions.\n  Schema of MySQL tables have been changed in order to optimize storage layout,\n  for good partial replication performance.\n- It runs at lowest priority not to degrade performance for client nodes.\n- A cluster in the new BACKINGUP state is a client to a normal cluster and all\n  its storage nodes are notified of invalidations and replicate from upstream\n  nodes.\n\nOther changes are:\n\n- Compatibility with Python < 2.6 and ZODB < 3.9 has been dropped.\n- Cluster is now automatically started when all storage nodes of UP_TO_DATE\n  cells are available, similarly to ``mdadm assemble --no-degraded`` behaviour.\n- NEO learned to check replicas, to detect data corruption or bugs during\n  replication. When done on a backup cluster, upstream data is used as\n  reference. This is still limited to data indexes (tid & oid/serial).\n- NEO logs now are SQLite DB that always contain all debugging information\n  including exchanged packets. Records are first kept in RAM, at most 16 MB by\n  default, and there are flushed to disk only upon RTMIN signal or any important\n  record. A 'neolog' script has been written to help reading such DB.\n- Master addresses must be separated by spaces. '/' can't be used anymore.\n- Adding and removing master nodes is now easier: unknown incoming master nodes\n  are now accepted instead of rejected, and nodes can be given a path to a file\n  that maintains a list of known master nodes.\n- Node UUIDs have been shortened from 16 to 4 bytes, for better performance and\n  easier debugging.\n\nAlso contains code clean-ups and bugfixes.\n\n0.10.1 (2012-03-13)\n-------------------\n\n- Client didn't limit its memory usage when committing big transactions.\n- Master failed to disconnect clients when cluster leaves RUNNING state.\n\n0.10 (2011-10-17)\n-----------------\n\n- Storage was unable or slow to process large-sized transactions.\n  This required to change protocol and MySQL tables format.\n- NEO learned to store empty values (although it's useless when managed by\n  a ZODB Connection).\n\n0.9.2 (2011-10-17)\n------------------\n\n- storage: a specific socket can be given to MySQL backend\n- storage: a ConflictError could happen when client is much faster than master\n- 'verbose' command line option of 'neomigrate' did not work\n- client: ZODB monkey-patch randomly raised a NameError\n\n0.9.1 (2011-09-24)\n------------------\n\n- client: method to retrieve history of persistent objects was incompatible\n  with recent ZODB and needlessly asked all storages systematically.\n- neoctl: 'print node' command (to get list of all nodes) raised an\n  AssertionError.\n- 'neomigrate' raised a TypeError when converting NEO DB back to FileStorage.\n\n0.9 (2011-09-12)\n----------------\n\nInitial release.\n\nNEO is considered stable enough to replace existing ZEO setups, except that:\n\n- there's no backup mechanism (aka efficient snapshoting): there's only\n  replication and underlying MySQL tools\n\n- MySQL tables format may change in the future\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://neo.nexedi.com/", "keywords": "", "license": "GPL 2+", "maintainer": "", "maintainer_email": "", "name": "neoppod", "package_url": "https://pypi.org/project/neoppod/", "platform": "any", "project_url": "https://pypi.org/project/neoppod/", "project_urls": {"Homepage": "https://neo.nexedi.com/"}, "release_url": "https://pypi.org/project/neoppod/1.12.0/", "requires_dist": null, "requires_python": "", "summary": "Distributed, redundant and transactional storage for ZODB", "version": "1.12.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#overview\" id=\"id25\" rel=\"nofollow\">Overview</a></li>\n<li><a href=\"#requirements\" id=\"id26\" rel=\"nofollow\">Requirements</a></li>\n<li><a href=\"#installation\" id=\"id27\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#how-to-use\" id=\"id28\" rel=\"nofollow\">How to use</a><ul>\n<li><a href=\"#in-zope\" id=\"id29\" rel=\"nofollow\">In zope</a></li>\n<li><a href=\"#in-a-python-script\" id=\"id30\" rel=\"nofollow\">In a Python script</a></li>\n<li><a href=\"#shutting-down\" id=\"id31\" rel=\"nofollow\">Shutting down</a></li>\n<li><a href=\"#master-slave-asynchronous-replication\" id=\"id32\" rel=\"nofollow\">Master-slave asynchronous replication</a></li>\n<li><a href=\"#ssl-support\" id=\"id33\" rel=\"nofollow\">SSL support</a></li>\n</ul>\n</li>\n<li><a href=\"#deployment\" id=\"id34\" rel=\"nofollow\">Deployment</a></li>\n<li><a href=\"#developers\" id=\"id35\" rel=\"nofollow\">Developers</a></li>\n<li><a href=\"#commercial-support\" id=\"id36\" rel=\"nofollow\">Commercial Support</a></li>\n<li><a href=\"#change-history\" id=\"id37\" rel=\"nofollow\">Change History</a><ul>\n<li><a href=\"#id1\" id=\"id38\" rel=\"nofollow\">1.12 (2019-04-28)</a></li>\n<li><a href=\"#id2\" id=\"id39\" rel=\"nofollow\">1.11 (2019-03-11)</a></li>\n<li><a href=\"#id3\" id=\"id40\" rel=\"nofollow\">1.10 (2018-07-16)</a></li>\n<li><a href=\"#id4\" id=\"id41\" rel=\"nofollow\">1.9 (2018-03-13)</a></li>\n<li><a href=\"#id5\" id=\"id42\" rel=\"nofollow\">1.8.1 (2017-11-07)</a></li>\n<li><a href=\"#id6\" id=\"id43\" rel=\"nofollow\">1.8 (2017-07-04)</a></li>\n<li><a href=\"#id7\" id=\"id44\" rel=\"nofollow\">1.7.1 (2017-01-18)</a></li>\n<li><a href=\"#id8\" id=\"id45\" rel=\"nofollow\">1.7.0 (2016-12-19)</a></li>\n<li><a href=\"#id9\" id=\"id46\" rel=\"nofollow\">1.6.3 (2016-06-15)</a></li>\n<li><a href=\"#id10\" id=\"id47\" rel=\"nofollow\">1.6.2 (2016-03-09)</a></li>\n<li><a href=\"#id11\" id=\"id48\" rel=\"nofollow\">1.6.1 (2016-01-25)</a></li>\n<li><a href=\"#id12\" id=\"id49\" rel=\"nofollow\">1.6 (2015-12-02)</a></li>\n<li><a href=\"#id13\" id=\"id50\" rel=\"nofollow\">1.5.1 (2015-10-26)</a></li>\n<li><a href=\"#id14\" id=\"id51\" rel=\"nofollow\">1.5 (2015-10-05)</a></li>\n<li><a href=\"#id15\" id=\"id52\" rel=\"nofollow\">1.4 (2015-07-13)</a></li>\n<li><a href=\"#id16\" id=\"id53\" rel=\"nofollow\">1.3 (2015-01-13)</a></li>\n<li><a href=\"#id17\" id=\"id54\" rel=\"nofollow\">1.2 (2014-07-30)</a></li>\n<li><a href=\"#id18\" id=\"id55\" rel=\"nofollow\">1.1 (2014-01-07)</a></li>\n<li><a href=\"#id19\" id=\"id56\" rel=\"nofollow\">1.0 (2012-08-28)</a></li>\n<li><a href=\"#id20\" id=\"id57\" rel=\"nofollow\">0.10.1 (2012-03-13)</a></li>\n<li><a href=\"#id21\" id=\"id58\" rel=\"nofollow\">0.10 (2011-10-17)</a></li>\n<li><a href=\"#id22\" id=\"id59\" rel=\"nofollow\">0.9.2 (2011-10-17)</a></li>\n<li><a href=\"#id23\" id=\"id60\" rel=\"nofollow\">0.9.1 (2011-09-24)</a></li>\n<li><a href=\"#id24\" id=\"id61\" rel=\"nofollow\">0.9 (2011-09-12)</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<p>NEO is a distributed, redundant and scalable implementation of ZODB API.\nNEO stands for Nexedi Enterprise Object.</p>\n<div id=\"overview\">\n<h2><a href=\"#id25\" rel=\"nofollow\">Overview</a></h2>\n<p>A NEO cluster is composed of the following types of nodes:</p>\n<ul>\n<li><p>\u201cmaster\u201d nodes (mandatory, 1 or more)</p>\n<p>Takes care of transactionality. Only one master node is really active\n(the active master node is called \u201cprimary master\u201d) at any given time,\nextra masters are spares (they are called \u201csecondary masters\u201d).</p>\n</li>\n<li><p>\u201cstorage\u201d nodes (mandatory, 1 or more)</p>\n<p>Stores data, preserving history. All available storage nodes are in use\nsimultaneously. This offers redundancy and data distribution.\nAvailable backends: MySQL (InnoDB, RocksDB or TokuDB), SQLite</p>\n</li>\n<li><p>\u201cadmin\u201d nodes (mandatory for startup, optional after)</p>\n<p>Accepts commands from neoctl tool and transmits them to the\nprimary master, and monitors cluster state.</p>\n</li>\n<li><p>\u201cclient\u201d nodes</p>\n<p>Well\u2026 Something needing to store/load data in a NEO cluster.</p>\n</li>\n</ul>\n<p>ZODB API is fully implemented except:</p>\n<ul>\n<li>pack: only old revisions of objects are removed (it should be possible\nto use <a href=\"https://pypi.python.org/pypi/zc.zodbdgc\" rel=\"nofollow\">zc.zodbdgc</a>\nfor garbage collection)</li>\n<li>blobs: not implemented (not considered yet)</li>\n</ul>\n<p>Any ZODB like FileStorage can be converted to NEO instantaneously,\nwhich means the database is operational before all data are imported.\nThere\u2019s also a tool to convert back to FileStorage.</p>\n<p>For more detailed information about features related to scalability,\nsee the <cite>Architecture and Characteristics</cite> section of <a href=\"https://neo.nexedi.com/\" rel=\"nofollow\">https://neo.nexedi.com/</a>.</p>\n</div>\n<div id=\"requirements\">\n<h2><a href=\"#id26\" rel=\"nofollow\">Requirements</a></h2>\n<ul>\n<li>Linux 2.6 or later</li>\n<li>Python 2.7.x (2.7.9 or later for SSL support)</li>\n<li>For storage nodes using MySQL backend:<ul>\n<li>MySQLdb: <a href=\"https://github.com/PyMySQL/mysqlclient-python\" rel=\"nofollow\">https://github.com/PyMySQL/mysqlclient-python</a></li>\n</ul>\n</li>\n<li>For client nodes: ZODB 3.10.x or later</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2><a href=\"#id27\" rel=\"nofollow\">Installation</a></h2>\n<ol>\n<li><p>NEO can be installed like any other egg (see setup.py). Or you can simply\nmake <cite>neo</cite> directory available for Python to import (for example, by\nadding its container directory to the PYTHONPATH environment variable).</p>\n</li>\n<li><p>Write a neo.conf file like the example provided. If you use MySQL,\nyou\u2019ll also need create 1 database per storage node.</p>\n</li>\n<li><p>Start all required nodes:</p>\n<pre>$ neomaster -f neo.conf\n$ neostorage -f neo.conf -s storage1\n$ neostorage -f neo.conf -s storage2\n$ neoadmin -f neo.conf\n</pre>\n</li>\n<li><p>Tell the cluster to initialize storage nodes:</p>\n<pre>$ neoctl -a &lt;admin&gt; start\n</pre>\n</li>\n<li><p>Clients can connect when the cluster is in RUNNING state:</p>\n<pre>$ neoctl -a &lt;admin&gt; print cluster\nRUNNING\n</pre>\n</li>\n<li><p>See <cite>importer.conf</cite> file to import an existing database,\nor <cite>neoctl</cite> command for more administrative tasks.</p>\n</li>\n</ol>\n<p>Alternatively, you can use <cite>neosimple</cite> command to quickly setup a cluster for\ntesting.</p>\n</div>\n<div id=\"how-to-use\">\n<h2><a href=\"#id28\" rel=\"nofollow\">How to use</a></h2>\n<p>First make sure Python can import \u2018neo.client\u2019 package.</p>\n<div id=\"in-zope\">\n<h3><a href=\"#id29\" rel=\"nofollow\">In zope</a></h3>\n<ol>\n<li><p>Edit your zope.conf, add a neo import and edit the <cite>zodb_db</cite> section by\nreplacing its filestorage subsection by a NEOStorage one.\nIt should look like:</p>\n<pre>%import neo.client\n&lt;zodb_db main&gt;\n    &lt;NEOStorage&gt;\n        master_nodes 127.0.0.1:10000\n        name &lt;cluster name&gt;\n    &lt;/NEOStorage&gt;\n    mount-point /\n&lt;/zodb_db&gt;\n</pre>\n</li>\n<li><p>Start zope</p>\n</li>\n</ol>\n</div>\n<div id=\"in-a-python-script\">\n<h3><a href=\"#id30\" rel=\"nofollow\">In a Python script</a></h3>\n<p>Just create the storage object and play with it:</p>\n<pre>from neo.client.Storage import Storage\ns = Storage(master_nodes=\"127.0.0.1:10010\", name=\"main\")\n...\n</pre>\n<p>\u201cname\u201d and \u201cmaster_nodes\u201d parameters have the same meaning as in\nconfiguration file.</p>\n</div>\n<div id=\"shutting-down\">\n<h3><a href=\"#id31\" rel=\"nofollow\">Shutting down</a></h3>\n<p>Before shutting down NEO, all clients like Zope instances should be stopped,\nso that cluster become idle. This is required for multi-DB setups, to prevent\ncritical failures in second phase of TPC.</p>\n<p>A cluster (i.e. masters+storages+admin) can be stopped gracefully by putting it\nin STOPPING state using neoctl:</p>\n<pre>neoctl -a &lt;admin&gt; set cluster STOPPING\n</pre>\n<p>This can also be done manually, which helps if your cluster is in bad state:</p>\n<ul>\n<li>Stop all master nodes first with a SIGINT or SIGTERM, so that storage nodes\ndon\u2019t become in OUT_OF_DATE state.</li>\n<li>Next stop remaining nodes with a SIGINT or SIGTERM.</li>\n</ul>\n</div>\n<div id=\"master-slave-asynchronous-replication\">\n<h3><a href=\"#id32\" rel=\"nofollow\">Master-slave asynchronous replication</a></h3>\n<p>This is the recommanded way to backup a NEO cluster.\nOnce a cluster with appropriate <cite>upstream_cluster</cite> &amp; <cite>upstream_masters</cite>\nconfiguration is started, you can switch it into backup mode\nusing:</p>\n<pre>neoctl -a &lt;admin&gt; set cluster STARTING_BACKUP\n</pre>\n<p>It remembers it is in such mode when it is stopped, and it can be put back into\nnormal mode (RUNNING)  by setting it into STOPPING_BACKUP state.</p>\n<p>Packs are currently not replicated, which means packing should always be done\nup to a TID that is already fully replicated, so that the backup cluster has a\nfull history (and not random holes).</p>\n</div>\n<div id=\"ssl-support\">\n<h3><a href=\"#id33\" rel=\"nofollow\">SSL support</a></h3>\n<p>In addition to any external solution like OpenVPN, NEO has builtin SSL support\nto authenticate and encrypt communications between nodes.</p>\n<p>All commands and configuration files have options to specify a CA certificate,\nthe node certificate and the node private key. A certificate can be shared\nby several nodes.</p>\n<p>NEO always uses the latest SSL protocol supported by the Python interpreter,\nwithout fallback to older versions. A \u201cSSL: WRONG_VERSION_NUMBER\u201d error means\nthat a node runs in an older environment (Python + OpenSSL) than others.</p>\n<p>Note also that you can\u2019t mix non-SSL nodes and SSL nodes, even between a\nupstream cluster and a backup one. In doing so, connections can get stuck,\nor fail with malformed packets or SSL handshake errors.</p>\n</div>\n</div>\n<div id=\"deployment\">\n<h2><a href=\"#id34\" rel=\"nofollow\">Deployment</a></h2>\n<p>NEO has no built-in deployment features such as process daemonization. We use\n<a href=\"http://supervisord.org/\" rel=\"nofollow\">supervisor</a> with configuration like below:</p>\n<pre>[group:neo]\nprograms=master_01,storage_01,admin\n\n[program:storage_01]\npriority=10\ncommand=neostorage -s storage_01 -f /neo/neo.conf\n\n[program:master_01]\npriority=20\ncommand=neomaster -s master_01 -f /neo/neo.conf\n\n[program:admin]\npriority=20\ncommand=neoadmin -s admin -f /neo/neo.conf\n</pre>\n</div>\n<div id=\"developers\">\n<h2><a href=\"#id35\" rel=\"nofollow\">Developers</a></h2>\n<p>Developers interested in NEO may refer to\n<a href=\"https://neo.nexedi.com/\" rel=\"nofollow\">NEO Web site</a> and subscribe to following mailing\nlists:</p>\n<ul>\n<li><a href=\"https://mail.tiolive.com/mailman/listinfo/neo-users\" rel=\"nofollow\">neo-users</a>:\nusers discussion</li>\n<li><a href=\"https://mail.tiolive.com/mailman/listinfo/neo-dev\" rel=\"nofollow\">neo-dev</a>:\ndevelopers discussion</li>\n</ul>\n<p>Automated test results are published at\n<a href=\"https://www.erp5.com/quality/integration/P-ERP5.Com.Unit%20Tests/Base_viewListMode?proxy_form_id=WebSection_viewERP5UnitTestForm&amp;proxy_field_id=listbox&amp;proxy_field_selection_name=WebSection_viewERP5UnitTestForm_listbox_selection&amp;reset=1&amp;listbox_title=NEO-%25\" rel=\"nofollow\">https://www.erp5.com/quality/integration/P-ERP5.Com.Unit%20Tests/Base_viewListMode?proxy_form_id=WebSection_viewERP5UnitTestForm&amp;proxy_field_id=listbox&amp;proxy_field_selection_name=WebSection_viewERP5UnitTestForm_listbox_selection&amp;reset=1&amp;listbox_title=NEO-%25</a></p>\n</div>\n<div id=\"commercial-support\">\n<h2><a href=\"#id36\" rel=\"nofollow\">Commercial Support</a></h2>\n<p>Nexedi provides commercial support for NEO: <a href=\"https://www.nexedi.com/\" rel=\"nofollow\">https://www.nexedi.com/</a></p>\n</div>\n<div id=\"change-history\">\n<h2><a href=\"#id37\" rel=\"nofollow\">Change History</a></h2>\n<div id=\"id1\">\n<h3><a href=\"#id38\" rel=\"nofollow\">1.12 (2019-04-28)</a></h3>\n<p>Most changes in this version focus on the ability to migrate efficiently\nand reliably a big ZODB to NEO, which required changes in the protocol.\nSee testSplitAndMakeResilientUsingClone for an example of scenario.</p>\n<p>Better cluster management:</p>\n<ul>\n<li>New \u2013new-nid storage option for fast cloning.</li>\n<li>The number of wanted replicas is now a property of the database, which is\nmodifiable when the cluster is running, and reported by <cite>neoctl print pt</cite>.</li>\n<li>Better error reporting from the master to neoctl for denied requests.</li>\n<li>tweak: do not touch cells of nodes that are intended to be dropped.</li>\n<li>tweak: do not crash when trying to remove all nodes.</li>\n<li>tweak: new neoctl option to ask the master to simulate.</li>\n<li>neoctl: better display of full partition tables.</li>\n<li>master: reject drop/tweak commands that could lead to unwanted status.</li>\n</ul>\n<p>Importer:</p>\n<ul>\n<li>Fix possible data loss on writeback.</li>\n<li>v1.9 broke replication (as source) once the import is finished.</li>\n<li>Speed up startup when the import is already finished.</li>\n<li>Fix closure of ZODB, and also do it when the import is finished.</li>\n<li>Fix hidden \u201cmaximum recursion depth exceeded\u201d at startup.</li>\n<li>Fix resumption when using SQLite.</li>\n<li>v1.10 broke resumption when there are new transactions since the import\nstarted.</li>\n</ul>\n<p>MySQL:</p>\n<ul>\n<li>Better support of RocksDB by specifying column families.</li>\n<li>Fix handling of connection strings (\u2013database) without credentials.</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3><a href=\"#id39\" rel=\"nofollow\">1.11 (2019-03-11)</a></h3>\n<p>This release continues the work in v1.8 to stabilize NEO. A new \u2018stress\u2019\ntool was added: it kills storage nodes and resets TCP connections randomly,\nwhile causing high concurrency activity. It revealed many bugs of all kinds,\nincluding crashes and corruptions. Most of them happened after network\ndisconnection. In order to fix them all, several improvements have also been\ndone to logging:</p>\n<ul>\n<li>New neoctl command to flush the logs of all nodes in the cluster.</li>\n<li>In logs, dump the partition table in a more compact and readable way.</li>\n<li>client: log_flush most exceptions raised from Application to ZODB</li>\n<li>More RTMIN+2 (log) information for clients and connections.</li>\n<li>New log format to show node id (and optionally cluster name) in node column.</li>\n<li>neolog: add support for zstd-compressed logs.</li>\n<li>neolog: do not die when a table is corrupted.</li>\n</ul>\n<p>Other changes:</p>\n<ul>\n<li>sqlite: optimize storage of metadata (the speed up in v1.9 about indexing\n\u2018obj\u2019 primarily by \u2018oid\u2019 was only effective for MySQL).</li>\n<li>Fix error handling when setting up a listening connector.</li>\n<li>The command line parsing of all executables has been completely rewritten,\nfixing a few minor bugs.</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3><a href=\"#id40\" rel=\"nofollow\">1.10 (2018-07-16)</a></h3>\n<p>A important performance improvement is that the replication now remembers where\nit was interrupted: a storage node that gets disconnected for a short time now\ngets fully operational quite instantaneously because it only has to replicate\nthe new data. Before, the time to recover depended on the size of the DB, just\nto verify that most of the data are already transferred.</p>\n<p>As a small optimization, an empty transaction extension is now serialized with\nan empty string.</p>\n<p>The above 2 changes required a bump of the protocol version, as well as an\nupgrade of the storage format. Once upgraded (this is done automatically as\nusual), databases can\u2019t be opened anymore by older versions of NEO.</p>\n<p>Other general changes:</p>\n<ul>\n<li>Add support for custom compression levels.</li>\n<li>Maximize resiliency by taking into account the topology of storage nodes.</li>\n<li>Fix a few issues with ZODB5. Note however that merging several DB with the\nImporter backend only works if they were only used with ZODB &lt; 5.</li>\n</ul>\n<p>Master:</p>\n<ul>\n<li>Automatically discard feeding cells that get out-of-date.</li>\n</ul>\n<p>Client:</p>\n<ul>\n<li>Fix partial import from a source storage.</li>\n<li>Store uncompressed if compressed size is equal.</li>\n</ul>\n<p>Storage:</p>\n<ul>\n<li>Fixed v1.9 code that sped up the replication by sending bigger network\npackets.</li>\n<li>Fix replication of creation undone.</li>\n<li>Stop logging \u2018Abort TXN\u2019 for txn that have been locked.</li>\n<li>Clarify log about data deletion of discarded cells.</li>\n</ul>\n<p>MySQL backend:</p>\n<ul>\n<li>Fix replication of big OIDs (&gt; 16M).</li>\n<li>Do not full-scan for duplicates of big OIDs if deduplication is disabled.</li>\n<li>Fix remaining places where a server disconnection was not catched.</li>\n</ul>\n<p>SQlite backend:</p>\n<ul>\n<li>Fix indexes of upgraded databases.</li>\n</ul>\n<p>Importer backend:</p>\n<ul>\n<li>Fetch and process the data to import in a separate process. It is even\nusually free to use the best compression level.</li>\n<li>New option to write back new transactions to the source database.\nSee \u2018importer.conf\u2019 for more information.</li>\n<li>Give a title to the \u2018import\u2019 and \u2018writeback\u2019 subprocesses,\nif the \u2018setproctitle\u2019 egg is installed.</li>\n<li>Log when the transaction index for FileStorage DB is built.</li>\n<li>Open imported database in read-only whenever possible.</li>\n<li>Do not trigger speedupFileStorageTxnLookup uselessly.</li>\n<li>Do not checksum data twice.</li>\n<li>Fix NameError when recovering during tpc_finish.</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3><a href=\"#id41\" rel=\"nofollow\">1.9 (2018-03-13)</a></h3>\n<p>A lot of performance improvements have been done on storage nodes for this\nrelease, and some of them required changes in the storage format. In short,\nthe migration is done automatically, but you may want to read UPGRADE notes\nfor more details.</p>\n<p>Performance:</p>\n<ul>\n<li>Speed up replication by sending bigger network packets,\nand by not getting object next_serial for nothing.</li>\n<li>Speed up reads by indexing \u2018obj\u2019 primarily by \u2018oid\u2019 (instead of \u2018tid\u2019).</li>\n<li>Optimize storage layout of raw data for replication.</li>\n</ul>\n<p>Other storage changes:</p>\n<ul>\n<li>Disable data deduplication by default. \u2013dedup option added.</li>\n<li>importer: do not crash if a backup cluster tries to replicate.</li>\n<li>importer: preserve \u2018packed\u2019 flag.</li>\n</ul>\n<p>Master:</p>\n<ul>\n<li>Fix possible failure when reading data in a backup cluster with replicas.</li>\n<li>Fix generation of TID.</li>\n<li>Fix resumption of backup replication (internal or not).</li>\n</ul>\n<p>Client:</p>\n<ul>\n<li>New \u2018cache-size\u2019 Storage option.</li>\n<li>Cache hit/miss statistics.</li>\n<li>Fix accounting of cache size.</li>\n<li>Preserve \u2018packed\u2019 flag on iteration.</li>\n<li>At startup, or after nodes are back, full load balancing could be prevented\nuntil some data are written.</li>\n</ul>\n<p>Other:</p>\n<ul>\n<li>neolog: \u2013from option now also tries to parse with <a href=\"https://dateutil.readthedocs.io/\" rel=\"nofollow\">dateutil</a>.</li>\n<li>neolog: add support for xz-compressed logs, using external xzcat commands.</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3><a href=\"#id42\" rel=\"nofollow\">1.8.1 (2017-11-07)</a></h3>\n<ul>\n<li>Add support for OpenSSL &gt;= 1.1.</li>\n<li>storage: fix possible crash when delaying replication requests.</li>\n<li>mysql: fix performance issues on read operations by using more index hints.</li>\n</ul>\n</div>\n<div id=\"id6\">\n<h3><a href=\"#id43\" rel=\"nofollow\">1.8 (2017-07-04)</a></h3>\n<p>This release mainly stabilizes NEO when it is used with several storage nodes,\nfixing many race conditions involving events like transactional operations\n(read/write, conflict resolution\u2026), replication, partition table tweaking,\nand all kinds of failures (node crashes, network cuts\u2026). This includes a\nrework of conflict resolution, to implement the long-awaited deadlock avoidance\n(it was a limitation caused by object-level locking).</p>\n<p>Similarly, having spare master nodes is not an experimental feature anymore:\nthe <cite>election</cite> (of the primary master) has been reimplemented, and it now\nhappens during the RECOVERING phase. This comes with a change about node\nstates: BROKEN/HIDDEN/UNKNOWN are removed, DOWN is renamed into UNKNOWN,\nand TEMPORARILY_DOWN into DOWN.</p>\n<p>And still for more resiliency, the new algorithm to tweak the partition table\nis better at minimizing the amount of replication, and it does not discard\nreadable cells too quickly anymore: a partition can now have multiple FEEDING\ncells, to avoid going below the wanted level of replication.</p>\n<p>Other changes:</p>\n<ul>\n<li>General:<ul>\n<li>Packet timeouts have been removed.\nTCP keepalives are used instead of applicative pings.</li>\n<li>Connection handshake between nodes is reviewed to make sure that they\nspeak the same protocol before doing anything else, and report clearer\nerror messages otherwise. A dangerous bug was that there was no protocol\nversion check between neoctl and the admin node.</li>\n<li>Proper handling of incoming packets for closed/aborted connections.</li>\n<li>An exception while processing an answer could leave the handler switcher\nin the bad state.</li>\n<li>In STOPPING cluster state, really wait for all transactions to be finished.</li>\n<li>Several issues when undoing transactions with conflict resolutions\nhave been fixed.</li>\n<li>Delayed connection acceptation when the storage node is ready.</li>\n</ul>\n</li>\n<li>Client:<ul>\n<li>Added support for <a href=\"https://docs.pylonsproject.org/projects/zodburi\" rel=\"nofollow\">zodburi</a>.</li>\n<li>Fix load error during conflict resolution in case of late invalidation.</li>\n<li>Do not wait tpc_vote to start resolving conflicts.</li>\n<li>Fix harmless \u2018unexpected \u2026 AnswerRequestIdentification\u2019 exceptions.</li>\n</ul>\n</li>\n<li>Storage:<ul>\n<li>New \u2013disable-drop-partitions option, which is useful for big databases\nbecause the current code to delete data of discarded cells is inefficient\n(this option should disappear in the future).</li>\n<li>Prevent 2 nodes from working with the same database.</li>\n<li>Discard answers from aborted replications.\nIn some cases, this led to data corruption or crashes.</li>\n</ul>\n</li>\n<li>MySQL backend:<ul>\n<li>Added support for RocksDB.</li>\n<li>Do not flood logs when retrying to connect non-stop.</li>\n<li>Do not retry a failing query forever.</li>\n<li>By default, do not retry to connect to the server automatically.</li>\n</ul>\n</li>\n<li>Tools:<ul>\n<li>neolog: new \u2013decompress option.</li>\n<li>neolog: new option to hide the node column.</li>\n<li>neoctl: make the identification of the primary master easier with\n\u2018print node\u2019.</li>\n</ul>\n</li>\n<li>A lot of improvements for developers and debugging.</li>\n</ul>\n</div>\n<div id=\"id7\">\n<h3><a href=\"#id44\" rel=\"nofollow\">1.7.1 (2017-01-18)</a></h3>\n<ul>\n<li>Replication:<ul>\n<li>Fixed possibly wrong knowledge of cells\u2019 backup_tid when resuming backup.\nIn such case, \u2018neoctl print ids\u2019 gave false impression that the backup\ncluster was up-to-date. This also resulted in an inconsistent database\nwhen leaving backup mode before that the issue resolved by itself.</li>\n<li>Storage nodes now select the partition which is furthest behind. Previous\ncriterion was such that in case of high upstream activity, the backup could\neven be stuck looping on a subset of partitions.</li>\n<li>Fixed replication of unfinished imported transactions.</li>\n</ul>\n</li>\n<li>Fixed abort before vote, to free the storage space used by the transaction.\nA new \u2018prune_orphan\u2019 neoctl command was added to delete unreferenced raw data\nin the database.</li>\n<li>Removed short storage option -R to reset the db.\nHelp is reworded to clarify that \u2013reset exits once done.</li>\n<li>The application receiving buffer size has been increased.\nThis speeds up transfer of big packets.</li>\n<li>The master raised AttributeError at exit during recovery.</li>\n<li>At startup, the importer storage backend connected twice to the destination\ndatabase.</li>\n</ul>\n</div>\n<div id=\"id8\">\n<h3><a href=\"#id45\" rel=\"nofollow\">1.7.0 (2016-12-19)</a></h3>\n<ul>\n<li>Identification issues, mainly caused by id conflicts, are fixed:<ul>\n<li>Storage nodes now only accept clients that are known by the master.</li>\n<li>When reconnecting to a master, a client get a new id if the previous id is\nalready reallocated to another client.</li>\n<li>The consequences were either crashes or clients being unable to connect.</li>\n</ul>\n</li>\n<li>Added support for the latest versions of ZODB (4.4.4 &amp; 5.0.1). A notable\nchange is that lastTransaction() does not ping the master anymore (but it\nstill causes a connection to the master if the client is disconnected).</li>\n<li>A cluster in BACKUPING state can now serve regular clients in read-only mode.\nBut without invalidation yet, so clients must reconnect whenever they want\nto see newer data.</li>\n<li>Fixed crash of client nodes (including backup master) while trying to process\nnotifications before complete initialization, instead of ignoring them.</li>\n<li>Client:<ul>\n<li>Fix race condition leading to invalid mapping between internal connection\nobjects and their file descriptors. This resulted in KeyError exceptions.</li>\n<li>Fix item eviction from cache, which could break loading from storage.</li>\n<li>Better exception handling in tpc_abort.</li>\n<li>Do not limit the number of open connections to storage nodes.</li>\n</ul>\n</li>\n<li>Storage:<ul>\n<li>Fix crash when a client loses connection to the master just before voting.</li>\n<li>MySQL: Force index for a few queries. Unfortunately, this is not perfect\nbecause sometimes MySQL still ignores our hints.</li>\n<li>MySQL: Do not use unsafe TRUNCATE statement.</li>\n</ul>\n</li>\n<li>Make \u2018neoctl print ids\u2019 display time of TIDs.</li>\n<li>Various neoctl/neolog formatting improvements/fixes.</li>\n<li>Plus a few other changes for debugging and developers, as well as small\noptimizations.</li>\n</ul>\n</div>\n<div id=\"id9\">\n<h3><a href=\"#id46\" rel=\"nofollow\">1.6.3 (2016-06-15)</a></h3>\n<ul>\n<li>Added support for ZODB 4.x</li>\n<li>Clients are now able to recover from failures during tpc_finish when the\ntransaction got successfully committed.</li>\n<li>Other fixes related to node disconnection:<ul>\n<li>storage: fix crash when a client disconnects just after it requested to\nfinish a transaction</li>\n<li>storage: fix crash when trying to replicate from an unreachable node</li>\n<li>master: do never abort a prepared transaction (for example,\na client disconnecting during tpc_finish could cause a crash)</li>\n<li>client: fix invalidation issues when reconnecting to the master</li>\n</ul>\n</li>\n<li>Client:<ul>\n<li>fix abort for storages where only current serials were checked</li>\n<li>fix the count of history items in the cache</li>\n</ul>\n</li>\n<li>neoctl: better error message when connection to admin fails</li>\n</ul>\n</div>\n<div id=\"id10\">\n<h3><a href=\"#id47\" rel=\"nofollow\">1.6.2 (2016-03-09)</a></h3>\n<ul>\n<li>storage: switch to a maintained fork of MySQL-python (mysqlclient)</li>\n<li>storage: for better performance, the backend commit after an unlocked\ntransaction is deferred by 1 second, with the hope it\u2019s merged by a\nsubsequent commit (in case of a crash, the transaction is unlocked again),\nso there are only 2 commits per transaction during high activity</li>\n<li>client: optimize cache by not keeping items with counter=0 in history queue</li>\n<li>client: fix possible assertion failure on load in case of a late invalidation</li>\n</ul>\n</div>\n<div id=\"id11\">\n<h3><a href=\"#id48\" rel=\"nofollow\">1.6.1 (2016-01-25)</a></h3>\n<p>NEO repository has moved to <a href=\"https://lab.nexedi.com/nexedi/neoppod.git\" rel=\"nofollow\">https://lab.nexedi.com/nexedi/neoppod.git</a></p>\n<ul>\n<li>client: fix spurious connection timeouts</li>\n<li>client: add cache stats to information dumped on SIGRTMIN+2</li>\n<li>storage: when using the Importer backend, allow truncation after the last\ntid to import, during or after the import</li>\n<li>neoctl: don\u2019t print \u2018None\u2019 on successful check/truncate commands</li>\n<li>neolog: fix crash on unknown packets</li>\n<li>plus a few other changes for debugging and developers</li>\n</ul>\n</div>\n<div id=\"id12\">\n<h3><a href=\"#id49\" rel=\"nofollow\">1.6 (2015-12-02)</a></h3>\n<p>This release has changes in storage format. The upgrade is done automatically,\nbut only if the cluster was stopped cleanly: see UPGRADE notes for more\ninformation.</p>\n<ul>\n<li><p>NEO did not ensure that all data and metadata were written on disk before\ntpc_finish, and it was for example vulnerable to ENOSPC errors. In order to\nminimize the risk of failures during tpc_finish, the writing of metadata to\ntemporary tables is now done in tpc_vote. See commit <a href=\"https://lab.nexedi.com/nexedi/neoppod/commit/7eb7cf1\" rel=\"nofollow\">7eb7cf1</a> for more\ninformation about possible changes on performance side.</p>\n<p>This change comes with a new algorithm to verify unfinished data, which also\nfixes a bug discarding transactions with objects for which readCurrent was\ncalled.</p>\n</li>\n<li><p>The RECOVERING/VERIFYING phases, as well as transitions from/to other states,\nhave been completely reviewed, to fix many bugs:</p>\n<ul>\n<li>Possible corruption of partition table.</li>\n<li>The cluster could be stuck in RECOVERING or VERIFYING state.</li>\n<li>The probability to have cells out-of-date when restarting several storage\nnodes simultaneously has been reduced.</li>\n<li>During recovery, a newly elected master now always waits all the storage\nnodes with readable cells to be pending, in order to avoid a split of the\ndatabase.</li>\n<li>The last tid/oid could be wrong in several cases, for example after\ntransactions are recovered during VERIFYING phase.</li>\n</ul>\n</li>\n<li><p>neoctl gets a new command to truncate the database at an arbitrary TID.\nInternally, NEO was already able to truncate the database, because this was\nnecessary to make the database consistent when leaving the backup mode.\nHowever, there were several bugs that caused the database to be partially\ntruncated:</p>\n<ul>\n<li>The master now first stores persistently the decision to truncate,\nso that it can recover from any kind of connection failure.</li>\n<li>The cluster goes back to RUNNING state only after an acknowledgment from\nall storage nodes (including those without any readable cell) that they\ntruncated.</li>\n</ul>\n</li>\n<li><p>Storage:</p>\n<ul>\n<li>As a workaround to fix holes if replication is interrupted after new data\nis committed, outdated cells always restart to replicate from the beginning.</li>\n<li>The deletion of partial transactions during verification didn\u2019t try to free\nthe associated raw data.</li>\n<li>The MySQL backend didn\u2019t drop the \u2018bigdata\u2019 table when erasing the database.</li>\n</ul>\n</li>\n<li><p>Handshaking SSL connections could be stuck when they\u2019re aborted.</p>\n</li>\n<li><p>\u2018neoctl print ids\u2019 displays a new value in backup mode: the highest common TID\nup to which all readable cells have replicated, i.e. the TID at which the\ndatabase would be truncated when leaving the backup mode.</p>\n</li>\n</ul>\n</div>\n<div id=\"id13\">\n<h3><a href=\"#id50\" rel=\"nofollow\">1.5.1 (2015-10-26)</a></h3>\n<p>Several bugs and performance issues have been fixed in this release, mainly\nin the storage node.</p>\n<ul>\n<li>Importer storage backend:<ul>\n<li>Fix retrieval of an object from ZODB when next serial in NEO.</li>\n<li>Fix crash of storage nodes when a transaction is aborted.</li>\n<li>Faster resumption when many transactions\nhave already been imported to MySQL.</li>\n</ul>\n</li>\n<li>MySQL storage backend:<ul>\n<li>Refuse to start if max_allowed_packet is too small.</li>\n<li>Faster commit of transaction metadata.</li>\n</ul>\n</li>\n<li>Replication &amp; checking of replicas:<ul>\n<li>Fix crash when a corruption is found while checking TIDs.\n2 other issues remain unfixed: see BUGS.rst file.</li>\n<li>Speed up checking of replicas, at the cost of storage nodes being\nless responsive to other events.</li>\n</ul>\n</li>\n<li>The master wrongly sent invalidations for objects on which only readCurrent\nwas called, which caused invalid entries in client caches, or assertion\nfailures in Connection._setstate_noncurrent.</li>\n</ul>\n</div>\n<div id=\"id14\">\n<h3><a href=\"#id51\" rel=\"nofollow\">1.5 (2015-10-05)</a></h3>\n<p>In this version, the connectivity between nodes has been greatly improved:</p>\n<ul>\n<li>Added SSL support.</li>\n<li>IPv4 &amp; IPv6 can be mixed: some nodes can have an IPv4 binding address,\nwhereas other listen on IPv6.</li>\n<li>Version 1.4 fixed several cases where nodes could reconnect too quickly,\nusing 100% CPU and flooding logs. This is now fixed completely, for example\nwhen a backup storage node was rejected because the upstream cluster was not\nready.</li>\n<li>Tickless poll loop, for lower latency and CPU usage: nodes don\u2019t wake up\nevery second anymore to check if a timeout has expired.</li>\n<li>Connections could be wrongly processed before being polled (for reading or\nwriting). This happened if a file descriptor number was reallocated by the\nkernel for a connection, just after a connection was closed.</li>\n</ul>\n<p>Other changes are:</p>\n<ul>\n<li>IStorage: history() did not wait the oid to be unlocked. This means that the\nlatest version of an object could be missing from the result.</li>\n<li>Log files can now be specified in configuration files.</li>\n<li>~(user) construction are expanded for all paths in configuration (file or\ncommand line). This does not concern non-daemon executables like neoctl.</li>\n<li>For neoctl, -l option now logs everything on disk automatically.</li>\n<li>The admin node do not reset anymore the list of known masters from\nconfiguration when reconnecting, for consistency with client nodes.</li>\n<li>Code refactoring and improvements to logging and debugging.</li>\n<li>An notable change in the test suite is that the occasional deadlocks that\naffected threaded tests have been fixed.</li>\n</ul>\n</div>\n<div id=\"id15\">\n<h3><a href=\"#id52\" rel=\"nofollow\">1.4 (2015-07-13)</a></h3>\n<p>This version comes with a change in the SQL tables format, to fix a potential\ncrash of storage nodes when storing values that only differ by the compression\nflag. See UPGRADE notes if you think your application may be affected by this\nbug.</p>\n<ul>\n<li>Performance and features:<ul>\n<li>\u2018Importer\u2019 storage backend has been significantly sped up.</li>\n<li>Support for TokuDB has been added to MySQL storage backend. The engine is\nstill InnoDB by default, and it can be selected via a new \u2018neostorage\u2019\noption.</li>\n<li>A \u2018neomaster\u2019 option has been added to automatically start a new cluster\nif the number of pending storage nodes is greater than or equal to the\nspecified value.</li>\n</ul>\n</li>\n<li>Bugfixes:<ul>\n<li>Storage crashed when reading empty transactions. We still need to decide\nwhether NEO should:<ul>\n<li>continue to store such transactions;</li>\n<li>ignore them on commit, like other ZODB implementation;</li>\n<li>or fail on commit.</li>\n</ul>\n</li>\n<li>Storage crashed when a client tries to \u201csteal\u201d the UUID of another client.</li>\n<li>Client could get stuck forever on unreadable cells when not connected to the\nmaster.</li>\n<li>Client could only instantiate NEOStorage from the main thread, and the\nRTMIN+2 signal displayed logs for only 1 NEOStorage. Now, RTMIN+2 &amp; RTMIN+3\nare setup when neo.client module is imported.</li>\n</ul>\n</li>\n<li>Plus fixes and improvements to logging and debugging.</li>\n</ul>\n</div>\n<div id=\"id16\">\n<h3><a href=\"#id53\" rel=\"nofollow\">1.3 (2015-01-13)</a></h3>\n<ul>\n<li>Version 1.2 added a new \u2018Importer\u2019 storage backend but it had 2 bugs.<ul>\n<li>An interrupted migration could not be resumed.</li>\n<li>Merging several ZODB only worked if NEO could import all classes used by\nthe application. This has been fixed by repickling without loading any\nobject.</li>\n</ul>\n</li>\n<li>Logging has been improved for a better integration with the environment:<ul>\n<li>RTMIN+1 signal was changed to reopen logs. RTMIN+1 &amp; RTMIN+2 signals, which\nwere previously used for debugging, have been remapped to RTMIN+2 &amp; RTMIN+3</li>\n<li>In Zope, client registers automatically for log rotation (USR2).</li>\n<li>NEO logs are SQLite DB that are not open anymore with a persistent journal,\nbecause this is incompatible with the rename+reopen way to rotate logs,\nand we want to support logrotate.</li>\n<li>\u2018neolog\u2019 can now open gzip/bz2 compressed logs transparently.</li>\n<li>\u2018neolog\u2019 does not spam the console anymore when piped to a process that\nexits prematurely.</li>\n</ul>\n</li>\n<li>MySQL backend has been updated to work with recent MariaDB (&gt;=10).</li>\n<li>2 \u2018neomaster\u2019 command-line options were added to set upstream cluster/masters.</li>\n</ul>\n</div>\n<div id=\"id17\">\n<h3><a href=\"#id54\" rel=\"nofollow\">1.2 (2014-07-30)</a></h3>\n<p>The most important changes in this version are the work about conversion of\ndatabases from/to NEO:</p>\n<ul>\n<li><p>A new \u2018Importer\u2019 storage backend has been implemented and this is now the\nrecommended way to migrate existing Zope databases. See \u2018importer.conf\u2019\nexample file for more information.</p>\n</li>\n<li><p>\u2018neomigrate\u2019 command refused to run since version 1.0</p>\n</li>\n<li><p>Exported data serials by NEO iterator were wrong. There are still differences\nwith FileStorage:</p>\n<ul>\n<li>NEO always resolves to original serial, to avoid any indirection\n(which slightly speeds up undo at the expense of a more complex pack code)</li>\n<li>NEO does not make any difference between object deletion and creation undone\n(data serial always null in storage)</li>\n</ul>\n<p>Apart from that, conversion of database back from NEO should be fixed.</p>\n</li>\n</ul>\n<p>Other changes are:</p>\n<ul>\n<li>A warning was added in \u2018neo.conf\u2019 about a possible misuse of replicas.</li>\n<li>Compatibility with Python 2.6 has been dropped.</li>\n<li>Support for recent version of SQlite has been added.</li>\n<li>A memory leak has been fixed in replication.</li>\n<li>MySQL backend now fails instead of silently reconnecting if there is any\npending change, which could cause data loss.</li>\n<li>Optimization and minor bugfixes.</li>\n</ul>\n</div>\n<div id=\"id18\">\n<h3><a href=\"#id55\" rel=\"nofollow\">1.1 (2014-01-07)</a></h3>\n<ul>\n<li>Client failed at reconnecting properly to master. It could kill the master\n(during tpc_finish!) or end up with invalid caches (i.e. possible data\ncorruption). Now, connection to master is even optional between\ntransaction.begin() and tpc_begin, as long as partition table contains\nup-to-date data.</li>\n<li>Compatibility with ZODB 3.9 has been dropped. Only 3.10.x branch is supported.</li>\n<li>checkCurrentSerialInTransaction was not working.</li>\n<li>Optimization and minor bugfixes.</li>\n</ul>\n</div>\n<div id=\"id19\">\n<h3><a href=\"#id56\" rel=\"nofollow\">1.0 (2012-08-28)</a></h3>\n<p>This version mainly comes with stabilized SQL tables format and efficient backup\nfeature, relying on replication, which has been fully reimplemented:</p>\n<ul>\n<li>It is now incremental, instead of being done on whole partitions.\nSchema of MySQL tables have been changed in order to optimize storage layout,\nfor good partial replication performance.</li>\n<li>It runs at lowest priority not to degrade performance for client nodes.</li>\n<li>A cluster in the new BACKINGUP state is a client to a normal cluster and all\nits storage nodes are notified of invalidations and replicate from upstream\nnodes.</li>\n</ul>\n<p>Other changes are:</p>\n<ul>\n<li>Compatibility with Python &lt; 2.6 and ZODB &lt; 3.9 has been dropped.</li>\n<li>Cluster is now automatically started when all storage nodes of UP_TO_DATE\ncells are available, similarly to <tt>mdadm assemble <span class=\"pre\">--no-degraded</span></tt> behaviour.</li>\n<li>NEO learned to check replicas, to detect data corruption or bugs during\nreplication. When done on a backup cluster, upstream data is used as\nreference. This is still limited to data indexes (tid &amp; oid/serial).</li>\n<li>NEO logs now are SQLite DB that always contain all debugging information\nincluding exchanged packets. Records are first kept in RAM, at most 16 MB by\ndefault, and there are flushed to disk only upon RTMIN signal or any important\nrecord. A \u2018neolog\u2019 script has been written to help reading such DB.</li>\n<li>Master addresses must be separated by spaces. \u2018/\u2019 can\u2019t be used anymore.</li>\n<li>Adding and removing master nodes is now easier: unknown incoming master nodes\nare now accepted instead of rejected, and nodes can be given a path to a file\nthat maintains a list of known master nodes.</li>\n<li>Node UUIDs have been shortened from 16 to 4 bytes, for better performance and\neasier debugging.</li>\n</ul>\n<p>Also contains code clean-ups and bugfixes.</p>\n</div>\n<div id=\"id20\">\n<h3><a href=\"#id57\" rel=\"nofollow\">0.10.1 (2012-03-13)</a></h3>\n<ul>\n<li>Client didn\u2019t limit its memory usage when committing big transactions.</li>\n<li>Master failed to disconnect clients when cluster leaves RUNNING state.</li>\n</ul>\n</div>\n<div id=\"id21\">\n<h3><a href=\"#id58\" rel=\"nofollow\">0.10 (2011-10-17)</a></h3>\n<ul>\n<li>Storage was unable or slow to process large-sized transactions.\nThis required to change protocol and MySQL tables format.</li>\n<li>NEO learned to store empty values (although it\u2019s useless when managed by\na ZODB Connection).</li>\n</ul>\n</div>\n<div id=\"id22\">\n<h3><a href=\"#id59\" rel=\"nofollow\">0.9.2 (2011-10-17)</a></h3>\n<ul>\n<li>storage: a specific socket can be given to MySQL backend</li>\n<li>storage: a ConflictError could happen when client is much faster than master</li>\n<li>\u2018verbose\u2019 command line option of \u2018neomigrate\u2019 did not work</li>\n<li>client: ZODB monkey-patch randomly raised a NameError</li>\n</ul>\n</div>\n<div id=\"id23\">\n<h3><a href=\"#id60\" rel=\"nofollow\">0.9.1 (2011-09-24)</a></h3>\n<ul>\n<li>client: method to retrieve history of persistent objects was incompatible\nwith recent ZODB and needlessly asked all storages systematically.</li>\n<li>neoctl: \u2018print node\u2019 command (to get list of all nodes) raised an\nAssertionError.</li>\n<li>\u2018neomigrate\u2019 raised a TypeError when converting NEO DB back to FileStorage.</li>\n</ul>\n</div>\n<div id=\"id24\">\n<h3><a href=\"#id61\" rel=\"nofollow\">0.9 (2011-09-12)</a></h3>\n<p>Initial release.</p>\n<p>NEO is considered stable enough to replace existing ZEO setups, except that:</p>\n<ul>\n<li>there\u2019s no backup mechanism (aka efficient snapshoting): there\u2019s only\nreplication and underlying MySQL tools</li>\n<li>MySQL tables format may change in the future</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 5198190, "releases": {"0.10": [{"comment_text": "", "digests": {"md5": "ef13a4e9741789da2cd6959efa449bf9", "sha256": "21f2bc2df13dbdc5c7c3c1fd3688231ffe76108522a29af501c44356e5b0edd1"}, "downloads": -1, "filename": "neoppod-0.10.tar.gz", "has_sig": true, "md5_digest": "ef13a4e9741789da2cd6959efa449bf9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 245999, "upload_time": "2011-10-17T18:31:29", "upload_time_iso_8601": "2011-10-17T18:31:29.261948Z", "url": "https://files.pythonhosted.org/packages/39/6c/d35947c5718c9109f004bd65fa5809454bbfab036fbc984cc39bdb8ff382/neoppod-0.10.tar.gz", "yanked": false}], "0.10.1": [{"comment_text": "", "digests": {"md5": "217c97b03b21ff899d3df3762b1d85ba", "sha256": "448d4b74d23130e472f0b97f55882dd0d5145b32e2cc7fa08808314b88d99f66"}, "downloads": -1, "filename": "neoppod-0.10.1.tar.gz", "has_sig": true, "md5_digest": "217c97b03b21ff899d3df3762b1d85ba", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 246187, "upload_time": "2012-08-27T12:06:32", "upload_time_iso_8601": "2012-08-27T12:06:32.666918Z", "url": "https://files.pythonhosted.org/packages/b7/16/969dabce91fc306be6406dc1a9d2059079efa001beeb1b40a2d6e63824bd/neoppod-0.10.1.tar.gz", "yanked": false}], "0.9": [{"comment_text": "", "digests": {"md5": "45f0030005905f783178b9119b2d0929", "sha256": "7302bd6d848869fff2f29f494b0db06a1f1dcf005ad49fd689eb1e40c6d2e39c"}, "downloads": -1, "filename": "neoppod-0.9.tar.gz", "has_sig": true, "md5_digest": "45f0030005905f783178b9119b2d0929", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 240695, "upload_time": "2011-09-12T14:18:12", "upload_time_iso_8601": "2011-09-12T14:18:12.820135Z", "url": "https://files.pythonhosted.org/packages/c4/6d/2c1111896d63439447985c08065e8a1f938305f10c318993b522be3ee02d/neoppod-0.9.tar.gz", "yanked": false}], "0.9.1": [{"comment_text": "", "digests": {"md5": "3db9e596dc68be1334ee0f7897fe5fed", "sha256": "2e7f748a9ff024d498bd354d98c0e1a272bc3b18c8e60b6069170e52e28c978a"}, "downloads": -1, "filename": "neoppod-0.9.1.tar.gz", "has_sig": true, "md5_digest": "3db9e596dc68be1334ee0f7897fe5fed", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 243193, "upload_time": "2011-09-24T19:44:14", "upload_time_iso_8601": "2011-09-24T19:44:14.009595Z", "url": "https://files.pythonhosted.org/packages/b6/84/7b6ebd752781cf914e01b748e5a551ab08cc13b1701b141081858b0084b0/neoppod-0.9.1.tar.gz", "yanked": false}], "0.9.2": [{"comment_text": "", "digests": {"md5": "88d65001e842df4a08bac1ea0be1538d", "sha256": "dd5d9f373ae7727ca5d01a0e6d44a0f503c695ec02bbf2a18377369a609f79ae"}, "downloads": -1, "filename": "neoppod-0.9.2.tar.gz", "has_sig": true, "md5_digest": "88d65001e842df4a08bac1ea0be1538d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 245578, "upload_time": "2011-10-17T18:31:11", "upload_time_iso_8601": "2011-10-17T18:31:11.267394Z", "url": "https://files.pythonhosted.org/packages/d2/51/01499d7a2c2e1a97f40a62b7f37c24fd45dda805bd89ec15fba4ca87c1c8/neoppod-0.9.2.tar.gz", "yanked": false}], "1.0": [{"comment_text": "", "digests": {"md5": "ce6d4e14c28b44ae5ab4723c1fac779d", "sha256": "6e47ba3a2967f5aae9cb56f35cd9033a98e86bdff7110ed20d129f93a201ae58"}, "downloads": -1, "filename": "neoppod-1.0.tar.gz", "has_sig": true, "md5_digest": "ce6d4e14c28b44ae5ab4723c1fac779d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 250612, "upload_time": "2012-08-27T12:03:43", "upload_time_iso_8601": "2012-08-27T12:03:43.734347Z", "url": "https://files.pythonhosted.org/packages/86/92/c21fdc6d525a2e0d74cc4106f213938294c3f12aa7ef2a8633cd9e110108/neoppod-1.0.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "b5636606eccb541759203ca0fb8d94cb", "sha256": "ef80075c670d69735761bb28ef2df674c65b3eba92c02141d2aa7171c5260eba"}, "downloads": -1, "filename": "neoppod-1.1.tar.gz", "has_sig": true, "md5_digest": "b5636606eccb541759203ca0fb8d94cb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 251272, "upload_time": "2014-01-07T15:45:31", "upload_time_iso_8601": "2014-01-07T15:45:31.974128Z", "url": "https://files.pythonhosted.org/packages/13/19/2c2b94467bef4f5fc2a76c7aefa004f36a3a6a91b88746ee8e3f62c00297/neoppod-1.1.tar.gz", "yanked": false}], "1.10": [{"comment_text": "", "digests": {"md5": "0ab38369889ea8ec42b3c5dbd9c253fc", "sha256": "d1c61a2e3293f92247a6fd241ac2c26aaec40a5171a49c2b50dcfde34a06ecd0"}, "downloads": -1, "filename": "neoppod-1.10.tar.gz", "has_sig": true, "md5_digest": "0ab38369889ea8ec42b3c5dbd9c253fc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 320627, "upload_time": "2018-07-16T09:24:49", "upload_time_iso_8601": "2018-07-16T09:24:49.171998Z", "url": "https://files.pythonhosted.org/packages/02/c4/fc58a50ff0aec5ffe3c3c8834b1620224118d7492291732f0294e50ea04e/neoppod-1.10.tar.gz", "yanked": false}], "1.11": [{"comment_text": "", "digests": {"md5": "731d8348e230fa6131d3d4c81e894a3e", "sha256": "aa5815c37e068b22543c29b28e8a41e0ce714d8527c5c4907d911ad1650c7095"}, "downloads": -1, "filename": "neoppod-1.11.tar.gz", "has_sig": true, "md5_digest": "731d8348e230fa6131d3d4c81e894a3e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 341223, "upload_time": "2019-03-11T18:31:58", "upload_time_iso_8601": "2019-03-11T18:31:58.030092Z", "url": "https://files.pythonhosted.org/packages/27/75/cf25e811bd39b23a69456fa9c4e5d227e42cf352be41737c73e3d640f3f0/neoppod-1.11.tar.gz", "yanked": false}], "1.12.0": [{"comment_text": "", "digests": {"md5": "a4635884e6b62825c74c259064661d78", "sha256": "5dcf663d741479ec1732b33bd0255ae2c39125fb61ef1e8c1d6aaba475a5473f"}, "downloads": -1, "filename": "neoppod-1.12.0.tar.gz", "has_sig": true, "md5_digest": "a4635884e6b62825c74c259064661d78", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 346089, "upload_time": "2019-04-28T00:01:14", "upload_time_iso_8601": "2019-04-28T00:01:14.778782Z", "url": "https://files.pythonhosted.org/packages/32/8a/1dd3ed9ca719b50f32b5d85a0a08327bcfc89d131ab72ea6b4d1bda53430/neoppod-1.12.0.tar.gz", "yanked": false}], "1.2": [{"comment_text": "", "digests": {"md5": "9dae2ea1f5fc350039bb7aa531c7697f", "sha256": "cacb8ec3d988b8f8beb2321f75708cfcbeb415a210db9160ce383954f007fa0e"}, "downloads": -1, "filename": "neoppod-1.2.tar.gz", "has_sig": true, "md5_digest": "9dae2ea1f5fc350039bb7aa531c7697f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 259569, "upload_time": "2014-07-30T12:43:30", "upload_time_iso_8601": "2014-07-30T12:43:30.881280Z", "url": "https://files.pythonhosted.org/packages/95/e6/2805bb8ad7c31febd1e54761508c2fea5ef05003d0aae6074435f8d9159b/neoppod-1.2.tar.gz", "yanked": false}], "1.3": [{"comment_text": "", "digests": {"md5": "6b8d91e191c96bfec46c81aadd7505a5", "sha256": "a5b4c32152963481a28c2d9a24155b7a5a96d812b5d2a96dcfe697a1c2bda375"}, "downloads": -1, "filename": "neoppod-1.3.tar.gz", "has_sig": true, "md5_digest": "6b8d91e191c96bfec46c81aadd7505a5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 263550, "upload_time": "2015-01-13T18:37:45", "upload_time_iso_8601": "2015-01-13T18:37:45.097487Z", "url": "https://files.pythonhosted.org/packages/9a/19/afc06e9ae76d1b2a6955990c349c15f9303d9e0bf049226a949f18b45901/neoppod-1.3.tar.gz", "yanked": false}], "1.4.0": [{"comment_text": "", "digests": {"md5": "981d95b46efa01e07ff1aa955a661947", "sha256": "4e8113a6bed6f24431fc69545e2399b6247e3b9e29761c10651427454d40e669"}, "downloads": -1, "filename": "neoppod-1.4.0.tar.gz", "has_sig": true, "md5_digest": "981d95b46efa01e07ff1aa955a661947", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 268531, "upload_time": "2015-07-13T17:59:03", "upload_time_iso_8601": "2015-07-13T17:59:03.645409Z", "url": "https://files.pythonhosted.org/packages/6e/de/b8f2e9002347cd72db3c69270c165d3796c9d1c6a600b120a3171e3e2dd5/neoppod-1.4.0.tar.gz", "yanked": false}], "1.5": [{"comment_text": "", "digests": {"md5": "1fa4c797b8c1a81c8ef38f9e196c2678", "sha256": "6f290ae2e1173c70df04042d5f953d4be04f93e221497481e12a68691f653e6c"}, "downloads": -1, "filename": "neoppod-1.5.tar.gz", "has_sig": true, "md5_digest": "1fa4c797b8c1a81c8ef38f9e196c2678", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 268355, "upload_time": "2015-10-05T17:46:24", "upload_time_iso_8601": "2015-10-05T17:46:24.921574Z", "url": "https://files.pythonhosted.org/packages/ab/28/02c8a63cf858bf1bcdf0908eda0de62884a90b2227aa769ee9749416b7dc/neoppod-1.5.tar.gz", "yanked": false}], "1.5.1": [{"comment_text": "", "digests": {"md5": "af3168ba1407d81c292cbb863efc369b", "sha256": "65b90554def612b04f50144cc5cad1d421433a7d11111567e9d549d004405f50"}, "downloads": -1, "filename": "neoppod-1.5.1.tar.gz", "has_sig": true, "md5_digest": "af3168ba1407d81c292cbb863efc369b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 272417, "upload_time": "2015-10-26T18:26:22", "upload_time_iso_8601": "2015-10-26T18:26:22.782903Z", "url": "https://files.pythonhosted.org/packages/dc/16/d4cc5120b2e6d38c65d57dbab447d2436a094cb1e6b8f1bd91d6e0355619/neoppod-1.5.1.tar.gz", "yanked": false}], "1.6": [{"comment_text": "", "digests": {"md5": "85c52eb5cd1aec05e708b7ce841d0915", "sha256": "62b7c55e382807af8dcec443a0e5f4e5f89c28422647ace1255a37ffdd6a5ea4"}, "downloads": -1, "filename": "neoppod-1.6.tar.gz", "has_sig": true, "md5_digest": "85c52eb5cd1aec05e708b7ce841d0915", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 276366, "upload_time": "2015-12-02T15:04:58", "upload_time_iso_8601": "2015-12-02T15:04:58.970628Z", "url": "https://files.pythonhosted.org/packages/3d/05/c5c631fb8a9ee725c89805d99d2035b358aa8bc7ad9502939d4fea32b841/neoppod-1.6.tar.gz", "yanked": false}], "1.6.1": [{"comment_text": "", "digests": {"md5": "f2dcf100844edbebfc73b75db50abc11", "sha256": "dc26af648e1ad048c7b692e5823c5c5f861675c71fccb1ace9094b0b2b059760"}, "downloads": -1, "filename": "neoppod-1.6.1.tar.gz", "has_sig": true, "md5_digest": "f2dcf100844edbebfc73b75db50abc11", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 278231, "upload_time": "2016-01-25T20:40:04", "upload_time_iso_8601": "2016-01-25T20:40:04.022943Z", "url": "https://files.pythonhosted.org/packages/ad/87/0ef4ff62b3b735f7c02ae7cbd850865aa996732d5fb64b19458f262b7ccc/neoppod-1.6.1.tar.gz", "yanked": false}], "1.6.2": [{"comment_text": "", "digests": {"md5": "77492fdc17cefb20e7610fd1e2ebfd45", "sha256": "d3008ff0a528bea923831021d135d2926ffad623db9771a456869af43d9f37be"}, "downloads": -1, "filename": "neoppod-1.6.2.tar.gz", "has_sig": true, "md5_digest": "77492fdc17cefb20e7610fd1e2ebfd45", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 280781, "upload_time": "2016-03-09T17:33:06", "upload_time_iso_8601": "2016-03-09T17:33:06.393891Z", "url": "https://files.pythonhosted.org/packages/92/66/627b95254025881f622f3c2f48a792f77bbbbd51e7273ddb3c96106a662f/neoppod-1.6.2.tar.gz", "yanked": false}], "1.6.3": [{"comment_text": "", "digests": {"md5": "029b39c1a58c524f1e93953417cf5181", "sha256": "cdf03e3d292d97204c9bcf9a6e289b768d3d6075ca2c4c3e7d4c64c7738a5615"}, "downloads": -1, "filename": "neoppod-1.6.3.tar.gz", "has_sig": true, "md5_digest": "029b39c1a58c524f1e93953417cf5181", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 282435, "upload_time": "2016-06-15T20:00:28", "upload_time_iso_8601": "2016-06-15T20:00:28.528082Z", "url": "https://files.pythonhosted.org/packages/bd/c5/5c7ebf64abe058bb4e9ae22029c2f21e2c974aedc4c3a86847d5d7042d23/neoppod-1.6.3.tar.gz", "yanked": false}], "1.7.0": [{"comment_text": "", "digests": {"md5": "b3f892665c9aab455ad69c7b1e9bdaa5", "sha256": "c7952de4f7e9f9eb754a4935d03bcbf84dc11fca65c23111e79f36de8fad77bf"}, "downloads": -1, "filename": "neoppod-1.7.0.tar.gz", "has_sig": true, "md5_digest": "b3f892665c9aab455ad69c7b1e9bdaa5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 279920, "upload_time": "2016-12-19T18:29:38", "upload_time_iso_8601": "2016-12-19T18:29:38.220077Z", "url": "https://files.pythonhosted.org/packages/ae/f6/b8b377f0eaaa4e4da0a443c409a18a91cf559df7c06bcc251dfc164c5480/neoppod-1.7.0.tar.gz", "yanked": false}], "1.7.1": [{"comment_text": "", "digests": {"md5": "61d1ec090c48d37d4004f5a268aeb176", "sha256": "33864abb0ce66b145b833bf0644fe9a2c2e339c8f8c6ed9a0a816325cf2e845f"}, "downloads": -1, "filename": "neoppod-1.7.1.tar.gz", "has_sig": true, "md5_digest": "61d1ec090c48d37d4004f5a268aeb176", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 280261, "upload_time": "2017-01-18T14:43:07", "upload_time_iso_8601": "2017-01-18T14:43:07.340083Z", "url": "https://files.pythonhosted.org/packages/ad/64/1a1fd0e1758d033be5625819585f78d8cd2e48f6afcc133f3870eef82f07/neoppod-1.7.1.tar.gz", "yanked": false}], "1.8": [{"comment_text": "", "digests": {"md5": "679e8d9d172b87fa7561bc7192a9bbb3", "sha256": "455fb6c2b9a1c6dabeb961e7d7a4c5c7e4a87adcb4fd9d97b439759f40a95f58"}, "downloads": -1, "filename": "neoppod-1.8.tar.gz", "has_sig": true, "md5_digest": "679e8d9d172b87fa7561bc7192a9bbb3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 297970, "upload_time": "2017-07-04T14:08:08", "upload_time_iso_8601": "2017-07-04T14:08:08.759908Z", "url": "https://files.pythonhosted.org/packages/3b/39/fb560e3b3a20288bf72923a681ce1a6d6eac50f81157d23a187d46c71ec2/neoppod-1.8.tar.gz", "yanked": false}], "1.8.1": [{"comment_text": "", "digests": {"md5": "7c802d94a46142dfa6c74d5aedaebf26", "sha256": "b4cf4b6d9191a71faeffa67b4a38809f5503f91f7b7790765427b4e4cbaea9f8"}, "downloads": -1, "filename": "neoppod-1.8.1.tar.gz", "has_sig": true, "md5_digest": "7c802d94a46142dfa6c74d5aedaebf26", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 298800, "upload_time": "2017-11-07T09:49:10", "upload_time_iso_8601": "2017-11-07T09:49:10.585834Z", "url": "https://files.pythonhosted.org/packages/fc/76/0919e0ab8be0106b23454e47a6cc4670cbfb7598cfc9d4b69bb058761f93/neoppod-1.8.1.tar.gz", "yanked": false}], "1.9": [{"comment_text": "", "digests": {"md5": "ca49053c6a42e296206711ebcb02d653", "sha256": "cde1904d1b8a24e2bed94d86d6be62825150c34b1800e6b5b9f8f6848e7f1c58"}, "downloads": -1, "filename": "neoppod-1.9.tar.gz", "has_sig": true, "md5_digest": "ca49053c6a42e296206711ebcb02d653", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 304174, "upload_time": "2018-03-13T18:12:23", "upload_time_iso_8601": "2018-03-13T18:12:23.919522Z", "url": "https://files.pythonhosted.org/packages/18/53/2d8204a76f7152045f1ed97bba4016669194c43693d53d1a5a5591516d56/neoppod-1.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a4635884e6b62825c74c259064661d78", "sha256": "5dcf663d741479ec1732b33bd0255ae2c39125fb61ef1e8c1d6aaba475a5473f"}, "downloads": -1, "filename": "neoppod-1.12.0.tar.gz", "has_sig": true, "md5_digest": "a4635884e6b62825c74c259064661d78", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 346089, "upload_time": "2019-04-28T00:01:14", "upload_time_iso_8601": "2019-04-28T00:01:14.778782Z", "url": "https://files.pythonhosted.org/packages/32/8a/1dd3ed9ca719b50f32b5d85a0a08327bcfc89d131ab72ea6b4d1bda53430/neoppod-1.12.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:46:28 2020"}