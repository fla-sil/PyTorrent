{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": "airsspy\n---------\n[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gl/bz1%2Fairsspy/master)\n\nA package to help working with the Ab initio Random Structure Searching ([AIRSS](https://www.mtg.msm.cam.ac.uk/Codes/AIRSS))\nusing Atomic simulation environment ([ase](https://wiki.fysik.dtu.dk/ase/)).\nSupports building a search seed for AIRSS in a interactive python environments.\nOne of the important steps for performing a successful search with AIRSS is to have sensible seed for generating \nrandom structures, which are subsequently relaxed using the method of choice.\nIn general, AIRSS only relies on a few simple parameters to generate random structure, such as numbers of atoms,\nnumbers of species and cell volume.\nHowever, for complicated search involving surfaces and/or interfaces, hand-building seed files becomes a\ntedious or impossible job to do.\nASE has a suite of tools for manipulate atomic structure which can be very helpful for building structures,\nand here, for building search seeds.\n\nAIRSS is a open source code licensed under GPLv2, \nthis package does not contain any source code of AIRSS nor links to it.\n\n\nWhat this does\n--------------\n* Allow preparing seed for AIRSS using ASE's `atoms` interface\n* Allow ase's calculators to be used in AIRSS to do relaxations\n\nTry interactively\n-----------------\nInteractive jupyter notebook examples can be found in the `examples` folder.\nClick the *binder* badge above to launch these examples in a pre-built environment and try it in your browser!\n\nRequirements\n-----------\n* [ase](https://wiki.fysik.dtu.dk/ase/): The atomic simulation environment\n* [castepinput](https://gitlab.com/bz1/castepinput): A light weight writer/reader for the input files of [CASTEP](www.caste.org).\n\nUsage\n-----\nAssuming you are familiar with `ase`, python and has some basic knowledge of AIRSS.\nTo prepare a seed for generating a *sensible* random structure:\n```\nfrom airsspy import SeedAtoms\nseed = SeedAtoms('C6')\nseed.buiid.varvol = 20\nseed.build.symmops = (2, 4)\n\n# Can also access per `atom` tags/ketwords just like in ASE\nfor i in range(0, 6, 2):\n    atom = seed[i]\n    atom.tagname = 'CX'\n    atom.posamp = 2\n```\n\nTo write the seed file onto the disk:\n```\natoms.write_seed('C6.cell')\n# With IPython\n# Use the buildcell executable to generate the file\n!buildcell < C6.cell > C6-rand.cell\n```\n\nTo generate a cell we can create a `Buildcell` instance,\nwhich is helping wrapper to the `buildcell` program of AIRSS:\n\n```\nfrom airsspy import Buildcell\nbuidcell = Buildcell(seed)\nrandom_atoms = builcell.generate()\n```\n\nA shortcut is also available as an method of the `SeedAtoms`:\n```\nrandom_atoms = seed.build_random_atoms()\n```\n\nLimitations\n-----------\nDue to the lack of `timeout` argument of `Popen.communicate` in python 2.7,\ncommunication with the `buildcell` is not available. Hence, direct generation and \nretrieval of the random structure are not supported in python. However, it is \nstill possible to write the seed out and call the program externally.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://www.gitlab.com/bz1/airsspy", "keywords": "", "license": "", "maintainer": "Bonan Zhu", "maintainer_email": "bon.zhu@protonmail.com", "name": "airsspy", "package_url": "https://pypi.org/project/airsspy/", "platform": "", "project_url": "https://pypi.org/project/airsspy/", "project_urls": {"Homepage": "https://www.gitlab.com/bz1/airsspy"}, "release_url": "https://pypi.org/project/airsspy/0.1.2/", "requires_dist": null, "requires_python": "", "summary": "A wrapper for using AIRSS with python and ase.", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>airsspy</h2>\n<p><a href=\"https://mybinder.org/v2/gl/bz1%2Fairsspy/master\" rel=\"nofollow\"><img alt=\"Binder\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/85e91bbb928104e4ce317951541520c6b9c170e1/68747470733a2f2f6d7962696e6465722e6f72672f62616467655f6c6f676f2e737667\"></a></p>\n<p>A package to help working with the Ab initio Random Structure Searching (<a href=\"https://www.mtg.msm.cam.ac.uk/Codes/AIRSS\" rel=\"nofollow\">AIRSS</a>)\nusing Atomic simulation environment (<a href=\"https://wiki.fysik.dtu.dk/ase/\" rel=\"nofollow\">ase</a>).\nSupports building a search seed for AIRSS in a interactive python environments.\nOne of the important steps for performing a successful search with AIRSS is to have sensible seed for generating\nrandom structures, which are subsequently relaxed using the method of choice.\nIn general, AIRSS only relies on a few simple parameters to generate random structure, such as numbers of atoms,\nnumbers of species and cell volume.\nHowever, for complicated search involving surfaces and/or interfaces, hand-building seed files becomes a\ntedious or impossible job to do.\nASE has a suite of tools for manipulate atomic structure which can be very helpful for building structures,\nand here, for building search seeds.</p>\n<p>AIRSS is a open source code licensed under GPLv2,\nthis package does not contain any source code of AIRSS nor links to it.</p>\n<h2>What this does</h2>\n<ul>\n<li>Allow preparing seed for AIRSS using ASE's <code>atoms</code> interface</li>\n<li>Allow ase's calculators to be used in AIRSS to do relaxations</li>\n</ul>\n<h2>Try interactively</h2>\n<p>Interactive jupyter notebook examples can be found in the <code>examples</code> folder.\nClick the <em>binder</em> badge above to launch these examples in a pre-built environment and try it in your browser!</p>\n<h2>Requirements</h2>\n<ul>\n<li><a href=\"https://wiki.fysik.dtu.dk/ase/\" rel=\"nofollow\">ase</a>: The atomic simulation environment</li>\n<li><a href=\"https://gitlab.com/bz1/castepinput\" rel=\"nofollow\">castepinput</a>: A light weight writer/reader for the input files of <a href=\"www.caste.org\" rel=\"nofollow\">CASTEP</a>.</li>\n</ul>\n<h2>Usage</h2>\n<p>Assuming you are familiar with <code>ase</code>, python and has some basic knowledge of AIRSS.\nTo prepare a seed for generating a <em>sensible</em> random structure:</p>\n<pre><code>from airsspy import SeedAtoms\nseed = SeedAtoms('C6')\nseed.buiid.varvol = 20\nseed.build.symmops = (2, 4)\n\n# Can also access per `atom` tags/ketwords just like in ASE\nfor i in range(0, 6, 2):\n    atom = seed[i]\n    atom.tagname = 'CX'\n    atom.posamp = 2\n</code></pre>\n<p>To write the seed file onto the disk:</p>\n<pre><code>atoms.write_seed('C6.cell')\n# With IPython\n# Use the buildcell executable to generate the file\n!buildcell &lt; C6.cell &gt; C6-rand.cell\n</code></pre>\n<p>To generate a cell we can create a <code>Buildcell</code> instance,\nwhich is helping wrapper to the <code>buildcell</code> program of AIRSS:</p>\n<pre><code>from airsspy import Buildcell\nbuidcell = Buildcell(seed)\nrandom_atoms = builcell.generate()\n</code></pre>\n<p>A shortcut is also available as an method of the <code>SeedAtoms</code>:</p>\n<pre><code>random_atoms = seed.build_random_atoms()\n</code></pre>\n<h2>Limitations</h2>\n<p>Due to the lack of <code>timeout</code> argument of <code>Popen.communicate</code> in python 2.7,\ncommunication with the <code>buildcell</code> is not available. Hence, direct generation and\nretrieval of the random structure are not supported in python. However, it is\nstill possible to write the seed out and call the program externally.</p>\n\n          </div>"}, "last_serial": 5874501, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "eae08362820309f8a19d7628b22698bd", "sha256": "148adaedd8941c2592f483b0001e6f9da437eda1463a8937a1bfea926544e9bc"}, "downloads": -1, "filename": "airsspy-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "eae08362820309f8a19d7628b22698bd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 24722, "upload_time": "2019-05-23T11:41:12", "upload_time_iso_8601": "2019-05-23T11:41:12.726489Z", "url": "https://files.pythonhosted.org/packages/0a/6f/1b2e222993bf228b22be8e14b523dc81cd0b856a8425a05240acb71a09f3/airsspy-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "109792b515a7a775cde4474238d94892", "sha256": "d1a4c3cab161e75962910e183bc918f1020a0c9165dd128bb47b9fa5613485fb"}, "downloads": -1, "filename": "airsspy-0.1.0.tar.gz", "has_sig": false, "md5_digest": "109792b515a7a775cde4474238d94892", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12702, "upload_time": "2019-05-23T11:41:14", "upload_time_iso_8601": "2019-05-23T11:41:14.765952Z", "url": "https://files.pythonhosted.org/packages/c2/c0/a6df452d3c136fdccd5a5c9dc295389e44d04709af0f413cc698c6fda5a2/airsspy-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "614a13889626931d0853f40c51321973", "sha256": "18c2f02df9cef3354b1ec20de0265b8298a7fda5d9168dde8d9ec8a49edf2483"}, "downloads": -1, "filename": "airsspy-0.1.1.tar.gz", "has_sig": false, "md5_digest": "614a13889626931d0853f40c51321973", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12702, "upload_time": "2019-05-23T11:58:45", "upload_time_iso_8601": "2019-05-23T11:58:45.718111Z", "url": "https://files.pythonhosted.org/packages/54/39/3f6004539cb0f33cfd0431c3bea2ab40e1eae52ff646ac1e6018e10a192c/airsspy-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "caa690860f0d989ffffdcc6f2120bc5e", "sha256": "bdba051db44da99f96b4b657e4511d8a07c0e9e5efca873889144da95902ca7c"}, "downloads": -1, "filename": "airsspy-0.1.2.tar.gz", "has_sig": false, "md5_digest": "caa690860f0d989ffffdcc6f2120bc5e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12232, "upload_time": "2019-09-23T15:53:14", "upload_time_iso_8601": "2019-09-23T15:53:14.445403Z", "url": "https://files.pythonhosted.org/packages/9e/c4/5eaabd807fae2d00c6f16ff5050711ec1175b54f7574f7a7b391a2c497a7/airsspy-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "caa690860f0d989ffffdcc6f2120bc5e", "sha256": "bdba051db44da99f96b4b657e4511d8a07c0e9e5efca873889144da95902ca7c"}, "downloads": -1, "filename": "airsspy-0.1.2.tar.gz", "has_sig": false, "md5_digest": "caa690860f0d989ffffdcc6f2120bc5e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12232, "upload_time": "2019-09-23T15:53:14", "upload_time_iso_8601": "2019-09-23T15:53:14.445403Z", "url": "https://files.pythonhosted.org/packages/9e/c4/5eaabd807fae2d00c6f16ff5050711ec1175b54f7574f7a7b391a2c497a7/airsspy-0.1.2.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:20:26 2020"}