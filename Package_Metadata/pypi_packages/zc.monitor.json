{"info": {"author": "Jim Fulton", "author_email": "jim@zope.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: Zope Public License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: Implementation :: CPython", "Topic :: Internet :: WWW/HTTP"], "description": "==============\nMonitor Server\n==============\n\nThe monitor server is a server that provides a command-line interface to\nrequest various bits of information.  The server is zc.ngi based, so we can use\nthe zc.ngi testing infrastructure to demonstrate it.\n\n    >>> import zc.ngi.testing\n    >>> import zc.monitor\n\n    >>> connection = zc.ngi.testing.TextConnection()\n    >>> server = zc.monitor.Server(connection)\n\nThe server supports an extensible set of commands.  It looks up\ncommands as named zc.monitor.interfaces.IMonitorPlugin \"utilities\", as defined\nby the zope.component package.\n\nTo see this, we'll create a hello plugin:\n\n    >>> def hello(connection, name='world'):\n    ...     \"\"\"Say hello\n    ...\n    ...     Provide a name if you're not the world.\n    ...     \"\"\"\n    ...     connection.write(\"Hi %s, nice to meet ya!\\n\" % name)\n\nand register it:\n\n    >>> zc.monitor.register(hello)\n\nWhen we register a command, we can provide a name. To see this, we'll\nregister ``hello`` again:\n\n    >>> zc.monitor.register(hello, 'hi')\n\nNow we can give the hello command to the server:\n\n    >>> connection.test_input('hi\\n')\n    Hi world, nice to meet ya!\n    -> CLOSE\n\nWe can pass a name:\n\n    >>> connection = zc.ngi.testing.TextConnection()\n    >>> server = zc.monitor.Server(connection)\n    >>> connection.test_input('hello Jim\\n')\n    Hi Jim, nice to meet ya!\n    -> CLOSE\n\nThe server comes with a few basic commands.  Let's register\nthem so we can see what they do.  We'll use the simplfied registration\ninterface:\n\n    >>> zc.monitor.register_basics()\n\nThe first is the help command.  Giving help without input, gives a\nlist of available commands:\n\n    >>> connection = zc.ngi.testing.TextConnection()\n    >>> server = zc.monitor.Server(connection)\n    >>> connection.test_input('help\\n')\n    Supported commands:\n      hello -- Say hello\n      help -- Get help about server commands\n      hi -- Say hello\n      interactive -- Turn on monitor's interactive mode\n      quit -- Quit the monitor\n    -> CLOSE\n\nWe can get detailed help by specifying a command name:\n\n    >>> connection = zc.ngi.testing.TextConnection()\n    >>> server = zc.monitor.Server(connection)\n    >>> connection.test_input('help help\\n')\n    Help for help:\n    <BLANKLINE>\n    Get help about server commands\n    <BLANKLINE>\n        By default, a list of commands and summaries is printed.  Provide\n        a command name to get detailed documentation for a command.\n    <BLANKLINE>\n    -> CLOSE\n\n    >>> connection = zc.ngi.testing.TextConnection()\n    >>> server = zc.monitor.Server(connection)\n    >>> connection.test_input('help hello\\n')\n    Help for hello:\n    <BLANKLINE>\n    Say hello\n    <BLANKLINE>\n        Provide a name if you're not the world.\n    <BLANKLINE>\n    -> CLOSE\n\nThe ``interactive`` command switches the monitor into interactive mode.  As\nseen above, the monitor usually responds to a single command and then closes\nthe connection.  In \"interactive mode\", the connection is not closed until\nthe ``quit`` command is used.  This can be useful when accessing the monitor\nvia telnet for diagnostics.\n\n    >>> connection = zc.ngi.testing.TextConnection()\n    >>> server = zc.monitor.Server(connection)\n    >>> connection.test_input('interactive\\n')\n    Interactive mode on.  Use \"quit\" To exit.\n    >>> connection.test_input('help interactive\\n')\n    Help for interactive:\n    <BLANKLINE>\n    Turn on monitor's interactive mode\n    <BLANKLINE>\n        Normally, the monitor releases the connection after a single command.\n        By entering the interactive mode, the monitor will not end the connection\n        until you enter the \"quit\" command.\n    <BLANKLINE>\n        In interactive mode, an empty line repeats the last command.\n    <BLANKLINE>\n    >>> connection.test_input('help quit\\n')\n    Help for quit:\n    <BLANKLINE>\n    Quit the monitor\n    <BLANKLINE>\n        This is only really useful in interactive mode (see the \"interactive\"\n        command).\n    <BLANKLINE>\n\nNotice that the result of the commands did not end with \"-> CLOSE\", which would\nhave indicated a closed connection.\n\nAlso notice that the interactive mode allows you to repeat commands.\n\n    >>> connection.test_input('hello\\n')\n    Hi world, nice to meet ya!\n    >>> connection.test_input('\\n')\n    Hi world, nice to meet ya!\n    >>> connection.test_input('hello Jim\\n')\n    Hi Jim, nice to meet ya!\n    >>> connection.test_input('\\n')\n    Hi Jim, nice to meet ya!\n\nNow we will use ``quit`` to close the connection.\n\n    >>> connection.test_input('quit\\n')\n    Goodbye.\n    -> CLOSE\n\nFinally, it's worth noting that exceptions will generate a\ntraceback on the connection.\n\n    >>> connection = zc.ngi.testing.TextConnection()\n    >>> server = zc.monitor.Server(connection)\n    >>> connection.test_input('hello Jim 42\\n') # doctest: +ELLIPSIS\n    Traceback (most recent call last):\n    ...\n    TypeError: hello() takes at most 2 arguments (3 given)\n    <BLANKLINE>\n    -> CLOSE\n\n.. Edge cases\n\n   Closing the connection:\n\n   >>> connection.test_close('test')\n\n\nCommand loops\n-------------\n\nUsing the \"MORE\" mode, commands can signal that they want to claim all future\nuser input.  We'll implement a silly example to demonstrate how it works.\n\nHere's a command that implements a calculator.\n\n    >>> PROMPT = '.'\n    >>> def calc(connection, *args):\n    ...     if args and args[0] == 'quit':\n    ...         return zc.monitor.QUIT_MARKER\n    ...\n    ...     if args:\n    ...         connection.write(str(eval(''.join(args))))\n    ...         connection.write('\\n')\n    ...\n    ...     connection.write(PROMPT)\n    ...     return zc.monitor.MORE_MARKER\n\nIf we register this command...\n\n    >>> zc.monitor.register(calc)\n\n...we can invoke it and we get a prompt.\n\n    >>> connection = zc.ngi.testing.TextConnection()\n    >>> server = zc.monitor.Server(connection)\n    >>> connection.test_input('calc\\n')\n    .\n\nIf we then give it more input we get the result plus another prompt.\n\n    >>> connection.test_input('2+2\\n')\n    4\n    .\n\n    >>> connection.test_input('4*2\\n')\n    8\n    .\n\nOnce we're done we can tell the calculator to let us go.\n\n    >>> connection.test_input('quit\\n')\n    -> CLOSE\n\nStart server\n------------\n\n    >>> import time\n    >>> import zope.testing.loggingsupport, logging\n    >>> loghandler = zope.testing.loggingsupport.InstalledHandler(\n    ...                  None, level=logging.INFO)\n\n\n    >>> zc.monitor.start(9644)\n    ('', 9644)\n\n    >>> print loghandler\n    zc.ngi.async.server INFO\n      listening on ('', 9644)\n\n    >>> zc.monitor.last_listener.close()\n    >>> zc.monitor.last_listener = None\n    >>> time.sleep(0.1)\n\n    >>> loghandler.clear()\n\n    >>> zc.monitor.start(('127.0.0.1', 9644))\n    ('127.0.0.1', 9644)\n\n    >>> print loghandler\n    zc.ngi.async.server INFO\n      listening on ('127.0.0.1', 9644)\n\n    >>> zc.monitor.last_listener.close()\n    >>> zc.monitor.last_listener = None\n    >>> time.sleep(0.1)\n\nBind to port 0:\n\n    >>> addr = zc.monitor.start(0)\n    >>> addr == zc.monitor.last_listener.address\n    True\n\n    >>> zc.monitor.last_listener.close()\n    >>> zc.monitor.last_listener = None\n    >>> time.sleep(0.1)\n\nTrying to rebind to a port in use:\n\n    >>> loghandler.clear()\n\n    >>> zc.monitor.start(('127.0.0.1', 9644))\n    ('127.0.0.1', 9644)\n\n    >>> zc.monitor.start(('127.0.0.1', 9644))\n    False\n\n    >>> print loghandler\n    zc.ngi.async.server INFO\n      listening on ('127.0.0.1', 9644)\n    zc.ngi.async.server WARNING\n      unable to listen on ('127.0.0.1', 9644)\n    root WARNING\n      unable to start zc.monitor server because the address ('127.0.0.1', 9644) is in use.\n\n    >>> zc.monitor.last_listener.close()\n    >>> zc.monitor.last_listener = None\n    >>> time.sleep(0.1)\n\n    >>> loghandler.uninstall()\n\n\n==============\nChange History\n==============\n\n0.4.0.post1 (2019-12-06)\n------------------------\n\n- Fix change log on PyPI.\n\n\n0.4.0 (2019-12-06)\n------------------\n\n- Use new Python 2.6/3.x compatible exception syntax. (This does not mean that\n  this package is already Python 3 compatible.)\n\n\n0.3.1 (2012-04-27)\n------------------\n\n- When binding the monitor to a Unix-domain socket, remove an existing\n  socket at the same path so the bind is successful.  This may affect\n  existing usage with respect to zopectl debug behavior, but will be\n  more predictable.\n\n\n0.3.0 (2011-12-12)\n------------------\n\n- Added a simplified registration interface.\n\n\n0.2.1 (2011-12-10)\n------------------\n\n- Added an ``address`` option to ``start`` to be able to specify an adapter\n  to bind to.\n\n- ``start`` now returns the address being listened on, which is useful\n  when binding to port 0.\n\n- Using Python's ``doctest`` module instead of depreacted\n  ``zope.testing.doctest``.\n\n\n0.2.0 (2009-10-28)\n------------------\n\n- Add the \"MORE\" mode so commands can co-opt user interaction\n\n\n0.1.2 (2008-09-15)\n------------------\n\n- Bugfix: The z3monitor server lacked a handle_close method, which\n  caused errors to get logged when users closed connections before\n  giving commands.\n\n\n0.1.1 (2008-09-14)\n------------------\n\n- Bugfix: fixed and added test for regression in displaying tracebacks.\n\n\n0.1.0 (2008-09-14)\n------------------\n\nInitial release", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/zopefoundation/zc.monitor", "keywords": "zope3", "license": "ZPL 2.1", "maintainer": "", "maintainer_email": "", "name": "zc.monitor", "package_url": "https://pypi.org/project/zc.monitor/", "platform": "", "project_url": "https://pypi.org/project/zc.monitor/", "project_urls": {"Homepage": "https://github.com/zopefoundation/zc.monitor"}, "release_url": "https://pypi.org/project/zc.monitor/0.4.0.post1/", "requires_dist": null, "requires_python": "", "summary": "A network-accessible command-line monitoring interface.", "version": "0.4.0.post1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"monitor-server\">\n<h2>Monitor Server</h2>\n<p>The monitor server is a server that provides a command-line interface to\nrequest various bits of information.  The server is zc.ngi based, so we can use\nthe zc.ngi testing infrastructure to demonstrate it.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; import zc.ngi.testing\n&gt;&gt;&gt; import zc.monitor\n</pre>\n<pre>&gt;&gt;&gt; connection = zc.ngi.testing.TextConnection()\n&gt;&gt;&gt; server = zc.monitor.Server(connection)\n</pre>\n</blockquote>\n<p>The server supports an extensible set of commands.  It looks up\ncommands as named zc.monitor.interfaces.IMonitorPlugin \u201cutilities\u201d, as defined\nby the zope.component package.</p>\n<p>To see this, we\u2019ll create a hello plugin:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; def hello(connection, name='world'):\n...     \"\"\"Say hello\n...\n...     Provide a name if you're not the world.\n...     \"\"\"\n...     connection.write(\"Hi %s, nice to meet ya!\\n\" % name)\n</pre>\n</blockquote>\n<p>and register it:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; zc.monitor.register(hello)\n</pre>\n</blockquote>\n<p>When we register a command, we can provide a name. To see this, we\u2019ll\nregister <tt>hello</tt> again:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; zc.monitor.register(hello, 'hi')\n</pre>\n</blockquote>\n<p>Now we can give the hello command to the server:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; connection.test_input('hi\\n')\nHi world, nice to meet ya!\n-&gt; CLOSE\n</pre>\n</blockquote>\n<p>We can pass a name:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; connection = zc.ngi.testing.TextConnection()\n&gt;&gt;&gt; server = zc.monitor.Server(connection)\n&gt;&gt;&gt; connection.test_input('hello Jim\\n')\nHi Jim, nice to meet ya!\n-&gt; CLOSE\n</pre>\n</blockquote>\n<p>The server comes with a few basic commands.  Let\u2019s register\nthem so we can see what they do.  We\u2019ll use the simplfied registration\ninterface:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; zc.monitor.register_basics()\n</pre>\n</blockquote>\n<p>The first is the help command.  Giving help without input, gives a\nlist of available commands:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; connection = zc.ngi.testing.TextConnection()\n&gt;&gt;&gt; server = zc.monitor.Server(connection)\n&gt;&gt;&gt; connection.test_input('help\\n')\nSupported commands:\n  hello -- Say hello\n  help -- Get help about server commands\n  hi -- Say hello\n  interactive -- Turn on monitor's interactive mode\n  quit -- Quit the monitor\n-&gt; CLOSE\n</pre>\n</blockquote>\n<p>We can get detailed help by specifying a command name:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; connection = zc.ngi.testing.TextConnection()\n&gt;&gt;&gt; server = zc.monitor.Server(connection)\n&gt;&gt;&gt; connection.test_input('help help\\n')\nHelp for help:\n&lt;BLANKLINE&gt;\nGet help about server commands\n&lt;BLANKLINE&gt;\n    By default, a list of commands and summaries is printed.  Provide\n    a command name to get detailed documentation for a command.\n&lt;BLANKLINE&gt;\n-&gt; CLOSE\n</pre>\n<pre>&gt;&gt;&gt; connection = zc.ngi.testing.TextConnection()\n&gt;&gt;&gt; server = zc.monitor.Server(connection)\n&gt;&gt;&gt; connection.test_input('help hello\\n')\nHelp for hello:\n&lt;BLANKLINE&gt;\nSay hello\n&lt;BLANKLINE&gt;\n    Provide a name if you're not the world.\n&lt;BLANKLINE&gt;\n-&gt; CLOSE\n</pre>\n</blockquote>\n<p>The <tt>interactive</tt> command switches the monitor into interactive mode.  As\nseen above, the monitor usually responds to a single command and then closes\nthe connection.  In \u201cinteractive mode\u201d, the connection is not closed until\nthe <tt>quit</tt> command is used.  This can be useful when accessing the monitor\nvia telnet for diagnostics.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; connection = zc.ngi.testing.TextConnection()\n&gt;&gt;&gt; server = zc.monitor.Server(connection)\n&gt;&gt;&gt; connection.test_input('interactive\\n')\nInteractive mode on.  Use \"quit\" To exit.\n&gt;&gt;&gt; connection.test_input('help interactive\\n')\nHelp for interactive:\n&lt;BLANKLINE&gt;\nTurn on monitor's interactive mode\n&lt;BLANKLINE&gt;\n    Normally, the monitor releases the connection after a single command.\n    By entering the interactive mode, the monitor will not end the connection\n    until you enter the \"quit\" command.\n&lt;BLANKLINE&gt;\n    In interactive mode, an empty line repeats the last command.\n&lt;BLANKLINE&gt;\n&gt;&gt;&gt; connection.test_input('help quit\\n')\nHelp for quit:\n&lt;BLANKLINE&gt;\nQuit the monitor\n&lt;BLANKLINE&gt;\n    This is only really useful in interactive mode (see the \"interactive\"\n    command).\n&lt;BLANKLINE&gt;\n</pre>\n</blockquote>\n<p>Notice that the result of the commands did not end with \u201c-&gt; CLOSE\u201d, which would\nhave indicated a closed connection.</p>\n<p>Also notice that the interactive mode allows you to repeat commands.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; connection.test_input('hello\\n')\nHi world, nice to meet ya!\n&gt;&gt;&gt; connection.test_input('\\n')\nHi world, nice to meet ya!\n&gt;&gt;&gt; connection.test_input('hello Jim\\n')\nHi Jim, nice to meet ya!\n&gt;&gt;&gt; connection.test_input('\\n')\nHi Jim, nice to meet ya!\n</pre>\n</blockquote>\n<p>Now we will use <tt>quit</tt> to close the connection.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; connection.test_input('quit\\n')\nGoodbye.\n-&gt; CLOSE\n</pre>\n</blockquote>\n<p>Finally, it\u2019s worth noting that exceptions will generate a\ntraceback on the connection.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; connection = zc.ngi.testing.TextConnection()\n&gt;&gt;&gt; server = zc.monitor.Server(connection)\n&gt;&gt;&gt; connection.test_input('hello Jim 42\\n') # doctest: +ELLIPSIS\nTraceback (most recent call last):\n...\nTypeError: hello() takes at most 2 arguments (3 given)\n&lt;BLANKLINE&gt;\n-&gt; CLOSE\n</pre>\n</blockquote>\n<div id=\"command-loops\">\n<h3>Command loops</h3>\n<p>Using the \u201cMORE\u201d mode, commands can signal that they want to claim all future\nuser input.  We\u2019ll implement a silly example to demonstrate how it works.</p>\n<p>Here\u2019s a command that implements a calculator.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; PROMPT = '.'\n&gt;&gt;&gt; def calc(connection, *args):\n...     if args and args[0] == 'quit':\n...         return zc.monitor.QUIT_MARKER\n...\n...     if args:\n...         connection.write(str(eval(''.join(args))))\n...         connection.write('\\n')\n...\n...     connection.write(PROMPT)\n...     return zc.monitor.MORE_MARKER\n</pre>\n</blockquote>\n<p>If we register this command\u2026</p>\n<blockquote>\n<pre>&gt;&gt;&gt; zc.monitor.register(calc)\n</pre>\n</blockquote>\n<p>\u2026we can invoke it and we get a prompt.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; connection = zc.ngi.testing.TextConnection()\n&gt;&gt;&gt; server = zc.monitor.Server(connection)\n&gt;&gt;&gt; connection.test_input('calc\\n')\n.\n</pre>\n</blockquote>\n<p>If we then give it more input we get the result plus another prompt.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; connection.test_input('2+2\\n')\n4\n.\n</pre>\n<pre>&gt;&gt;&gt; connection.test_input('4*2\\n')\n8\n.\n</pre>\n</blockquote>\n<p>Once we\u2019re done we can tell the calculator to let us go.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; connection.test_input('quit\\n')\n-&gt; CLOSE\n</pre>\n</blockquote>\n</div>\n<div id=\"start-server\">\n<h3>Start server</h3>\n<blockquote>\n<pre>&gt;&gt;&gt; import time\n&gt;&gt;&gt; import zope.testing.loggingsupport, logging\n&gt;&gt;&gt; loghandler = zope.testing.loggingsupport.InstalledHandler(\n...                  None, level=logging.INFO)\n</pre>\n<pre>&gt;&gt;&gt; zc.monitor.start(9644)\n('', 9644)\n</pre>\n<pre>&gt;&gt;&gt; print loghandler\nzc.ngi.async.server INFO\n  listening on ('', 9644)\n</pre>\n<pre>&gt;&gt;&gt; zc.monitor.last_listener.close()\n&gt;&gt;&gt; zc.monitor.last_listener = None\n&gt;&gt;&gt; time.sleep(0.1)\n</pre>\n<pre>&gt;&gt;&gt; loghandler.clear()\n</pre>\n<pre>&gt;&gt;&gt; zc.monitor.start(('127.0.0.1', 9644))\n('127.0.0.1', 9644)\n</pre>\n<pre>&gt;&gt;&gt; print loghandler\nzc.ngi.async.server INFO\n  listening on ('127.0.0.1', 9644)\n</pre>\n<pre>&gt;&gt;&gt; zc.monitor.last_listener.close()\n&gt;&gt;&gt; zc.monitor.last_listener = None\n&gt;&gt;&gt; time.sleep(0.1)\n</pre>\n</blockquote>\n<p>Bind to port 0:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; addr = zc.monitor.start(0)\n&gt;&gt;&gt; addr == zc.monitor.last_listener.address\nTrue\n</pre>\n<pre>&gt;&gt;&gt; zc.monitor.last_listener.close()\n&gt;&gt;&gt; zc.monitor.last_listener = None\n&gt;&gt;&gt; time.sleep(0.1)\n</pre>\n</blockquote>\n<p>Trying to rebind to a port in use:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; loghandler.clear()\n</pre>\n<pre>&gt;&gt;&gt; zc.monitor.start(('127.0.0.1', 9644))\n('127.0.0.1', 9644)\n</pre>\n<pre>&gt;&gt;&gt; zc.monitor.start(('127.0.0.1', 9644))\nFalse\n</pre>\n<pre>&gt;&gt;&gt; print loghandler\nzc.ngi.async.server INFO\n  listening on ('127.0.0.1', 9644)\nzc.ngi.async.server WARNING\n  unable to listen on ('127.0.0.1', 9644)\nroot WARNING\n  unable to start zc.monitor server because the address ('127.0.0.1', 9644) is in use.\n</pre>\n<pre>&gt;&gt;&gt; zc.monitor.last_listener.close()\n&gt;&gt;&gt; zc.monitor.last_listener = None\n&gt;&gt;&gt; time.sleep(0.1)\n</pre>\n<pre>&gt;&gt;&gt; loghandler.uninstall()\n</pre>\n</blockquote>\n</div>\n</div>\n<div id=\"change-history\">\n<h2>Change History</h2>\n<div id=\"post1-2019-12-06\">\n<h3>0.4.0.post1 (2019-12-06)</h3>\n<ul>\n<li>Fix change log on PyPI.</li>\n</ul>\n</div>\n<div id=\"id1\">\n<h3>0.4.0 (2019-12-06)</h3>\n<ul>\n<li>Use new Python 2.6/3.x compatible exception syntax. (This does not mean that\nthis package is already Python 3 compatible.)</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>0.3.1 (2012-04-27)</h3>\n<ul>\n<li>When binding the monitor to a Unix-domain socket, remove an existing\nsocket at the same path so the bind is successful.  This may affect\nexisting usage with respect to zopectl debug behavior, but will be\nmore predictable.</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>0.3.0 (2011-12-12)</h3>\n<ul>\n<li>Added a simplified registration interface.</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3>0.2.1 (2011-12-10)</h3>\n<ul>\n<li>Added an <tt>address</tt> option to <tt>start</tt> to be able to specify an adapter\nto bind to.</li>\n<li><tt>start</tt> now returns the address being listened on, which is useful\nwhen binding to port 0.</li>\n<li>Using Python\u2019s <tt>doctest</tt> module instead of depreacted\n<tt>zope.testing.doctest</tt>.</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3>0.2.0 (2009-10-28)</h3>\n<ul>\n<li>Add the \u201cMORE\u201d mode so commands can co-opt user interaction</li>\n</ul>\n</div>\n<div id=\"id6\">\n<h3>0.1.2 (2008-09-15)</h3>\n<ul>\n<li>Bugfix: The z3monitor server lacked a handle_close method, which\ncaused errors to get logged when users closed connections before\ngiving commands.</li>\n</ul>\n</div>\n<div id=\"id7\">\n<h3>0.1.1 (2008-09-14)</h3>\n<ul>\n<li>Bugfix: fixed and added test for regression in displaying tracebacks.</li>\n</ul>\n</div>\n<div id=\"id8\">\n<h3>0.1.0 (2008-09-14)</h3>\n<p>Initial release</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6254491, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "ce3f54f92bf067975472e62a6a814bba", "sha256": "5bf4448d45a365045127ffb9acd015dcb4657ff1b6a8b1715f2a67ffe531af7b"}, "downloads": -1, "filename": "zc.monitor-0.1.0.tar.gz", "has_sig": false, "md5_digest": "ce3f54f92bf067975472e62a6a814bba", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6312, "upload_time": "2008-09-14T19:27:00", "upload_time_iso_8601": "2008-09-14T19:27:00Z", "url": "https://files.pythonhosted.org/packages/e1/41/104c81188486a1f728d2b5be98016b3357c4b3431083556f01dfa7f9856c/zc.monitor-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "da6bacb9eb455db18b0b49abadc08101", "sha256": "b6608d45a6ac867d2a93552063b6e7fbd69197c3050b494a9081d4ab4794af07"}, "downloads": -1, "filename": "zc.monitor-0.1.1.tar.gz", "has_sig": false, "md5_digest": "da6bacb9eb455db18b0b49abadc08101", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6593, "upload_time": "2008-09-15T01:56:20", "upload_time_iso_8601": "2008-09-15T01:56:20Z", "url": "https://files.pythonhosted.org/packages/b8/b9/d84ecad9a2da691f052fd870011c996d5152785990a0451aa67b2771e309/zc.monitor-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "1cfb24e880ef6e9d9ba5487bd830c508", "sha256": "22190c6b79da586ee481f5012ef44c786362ab6d65a524ce21c4f070b2d039be"}, "downloads": -1, "filename": "zc.monitor-0.1.2.tar.gz", "has_sig": false, "md5_digest": "1cfb24e880ef6e9d9ba5487bd830c508", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6077, "upload_time": "2008-09-15T22:25:18", "upload_time_iso_8601": "2008-09-15T22:25:18Z", "url": "https://files.pythonhosted.org/packages/e5/69/1a0bca8a3b72c82bb638708af28ec32bd62d000d9d845e5a206c3cb8c366/zc.monitor-0.1.2.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "e406ff70ec077b31e7358c9d938b3c8c", "sha256": "dd315f2e99f5a80ff201735e48f768f4ef9228b6e21099646db304f1a8cdcb5d"}, "downloads": -1, "filename": "zc.monitor-0.2.0.tar.gz", "has_sig": false, "md5_digest": "e406ff70ec077b31e7358c9d938b3c8c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6691, "upload_time": "2009-10-29T13:58:10", "upload_time_iso_8601": "2009-10-29T13:58:10.805184Z", "url": "https://files.pythonhosted.org/packages/8d/a1/cdc5839824e202e666f8be358df2291835e629af703f193522a19eb9f6aa/zc.monitor-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "54d061a7c1a41c4a97c5c87409d5e4f4", "sha256": "81a0c241784531a67cd6f1f784c33a6f1835b16e4bce69842ae85e08bfe7020f"}, "downloads": -1, "filename": "zc.monitor-0.2.1.tar.gz", "has_sig": false, "md5_digest": "54d061a7c1a41c4a97c5c87409d5e4f4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11162, "upload_time": "2011-12-10T18:46:51", "upload_time_iso_8601": "2011-12-10T18:46:51.906463Z", "url": "https://files.pythonhosted.org/packages/67/5c/af2972cfded88f2abea299d6baa3e24272fe237ab7555a1094d33451883a/zc.monitor-0.2.1.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "7de7a83be6f386e3f3545b1488eecbc7", "sha256": "2b2b46acb9e667d757930aca92b4393fa75c991b00327129182d2c6e16f0ed78"}, "downloads": -1, "filename": "zc.monitor-0.3.0.tar.gz", "has_sig": false, "md5_digest": "7de7a83be6f386e3f3545b1488eecbc7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11265, "upload_time": "2011-12-12T12:58:46", "upload_time_iso_8601": "2011-12-12T12:58:46.015095Z", "url": "https://files.pythonhosted.org/packages/fc/a2/396bffa77294d0db40375b501b840f0b2d2a7686dc52addcabfbfd43923e/zc.monitor-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "55cd4a5a3cc8c0b5745d2dbfbe9823ee", "sha256": "612df49257353a68b13eab126dabe95e02b14615d48e18406db65a85cb64e904"}, "downloads": -1, "filename": "zc.monitor-0.3.1.tar.gz", "has_sig": false, "md5_digest": "55cd4a5a3cc8c0b5745d2dbfbe9823ee", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11521, "upload_time": "2012-04-27T18:19:26", "upload_time_iso_8601": "2012-04-27T18:19:26.029764Z", "url": "https://files.pythonhosted.org/packages/56/c9/0de736fea00ec7e4087c3dd26d0ff831edf58feb4b93c1bce64ede1a1753/zc.monitor-0.3.1.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "5d1fd648254550a7dec88c5acff00e42", "sha256": "447152795975ab3c6925b7f58e9c5b4bde122b8e8ec76b9b4f5e79d4288242d9"}, "downloads": -1, "filename": "zc.monitor-0.4.0.tar.gz", "has_sig": false, "md5_digest": "5d1fd648254550a7dec88c5acff00e42", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12608, "upload_time": "2019-12-06T14:40:51", "upload_time_iso_8601": "2019-12-06T14:40:51.754788Z", "url": "https://files.pythonhosted.org/packages/e1/2a/bc6a6337a5e10eed11f0921c2e6ef7dec4beb854616206f956e74eb79889/zc.monitor-0.4.0.tar.gz", "yanked": false}], "0.4.0.post1": [{"comment_text": "", "digests": {"md5": "a50410d185bfd53ff2db3f5ea325ede7", "sha256": "80412fd4b5045ca3b35566a867f19d56adacb8d306653dbf80e0dbeba7948389"}, "downloads": -1, "filename": "zc.monitor-0.4.0.post1.tar.gz", "has_sig": false, "md5_digest": "a50410d185bfd53ff2db3f5ea325ede7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12717, "upload_time": "2019-12-06T14:47:45", "upload_time_iso_8601": "2019-12-06T14:47:45.046170Z", "url": "https://files.pythonhosted.org/packages/01/11/f8a130f1cea0b22e8c9d2aaa10bbc519eba2bbce42656769e3de802bf922/zc.monitor-0.4.0.post1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a50410d185bfd53ff2db3f5ea325ede7", "sha256": "80412fd4b5045ca3b35566a867f19d56adacb8d306653dbf80e0dbeba7948389"}, "downloads": -1, "filename": "zc.monitor-0.4.0.post1.tar.gz", "has_sig": false, "md5_digest": "a50410d185bfd53ff2db3f5ea325ede7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12717, "upload_time": "2019-12-06T14:47:45", "upload_time_iso_8601": "2019-12-06T14:47:45.046170Z", "url": "https://files.pythonhosted.org/packages/01/11/f8a130f1cea0b22e8c9d2aaa10bbc519eba2bbce42656769e3de802bf922/zc.monitor-0.4.0.post1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:19:17 2020"}