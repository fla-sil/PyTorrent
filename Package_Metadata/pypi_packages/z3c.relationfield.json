{"info": {"author": "Martijn Faassen", "author_email": "faassen@startifact.com", "bugtrack_url": null, "classifiers": ["Development Status :: 6 - Mature", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6"], "description": "z3c.relationfield\n*****************\n\nIntroduction\n============\n\nThis package implements a new schema field Relation, and the\nRelationValue objects that store actual relations. It can index these\nrelations using the ``zc.relation`` infractructure, and using these\nindexes can efficiently answer questions about the relations.\n\nThe package `z3c.relationfieldui`_ in addition provides a widget to\nedit and display Relation fields.\n\n.. _`z3c.relationfieldui`: http://pypi.python.org/pypi/z3c.relationfieldui\n\nSetup\n=====\n\n``z3c.relationfield.Relation`` is a schema field that can be used to\nexpress relations. Let's define a schema IItem that uses a relation\nfield:\n\n.. code-block:: python\n\n  >>> from z3c.relationfield import Relation\n  >>> from zope.interface import Interface\n  >>> class IItem(Interface):\n  ...   rel = Relation(title=u\"Relation\")\n\nWe also define a class ``Item`` that implements both ``IItem``\nand the special ``z3c.relationfield.interfaces.IHasRelations``\ninterface:\n\n.. code-block:: python\n\n  >>> from z3c.relationfield.interfaces import IHasRelations\n  >>> from persistent import Persistent\n  >>> from zope.interface import implementer\n  >>> @implementer(IItem, IHasRelations)\n  ... class Item(Persistent):\n  ...\n  ...   def __init__(self):\n  ...     self.rel = None\n\nThe ``IHasRelations`` marker interface is needed to let the relations\non ``Item`` be cataloged (when they are put in a container and removed\nfrom it, for instance). It is in fact a combination of\n``IHasIncomingRelations`` and ``IHasOutgoingRelations``, which is fine\nas we want items to support both.\n\nFinally we need a test application:\n\n.. code-block:: python\n\n  >>> from zope.site.site import SiteManagerContainer\n  >>> from zope.container.btree import BTreeContainer\n  >>> class TestApp(SiteManagerContainer, BTreeContainer):\n  ...   pass\n\nWe set up the test application:\n\n.. code-block:: python\n\n  >>> from ZODB.MappingStorage import DB\n  >>> db = DB()\n  >>> conn = db.open()\n  >>> root = conn.root()['root'] = TestApp()\n  >>> conn.add(root)\n\nWe make sure that this is the current site, so we can look up local\nutilities in it and so on. Normally this is done automatically by\nZope's traversal mechanism:\n\n.. code-block:: python\n\n  >>> from zope.site.site import LocalSiteManager\n  >>> root.setSiteManager(LocalSiteManager(root))\n  >>> from zope.component.hooks import setSite\n  >>> setSite(root)\n\nFor this site to work with ``z3c.relationship``, we need to set up two\nutilities. Firstly, an ``IIntIds`` that tracks unique ids for objects\nin the ZODB:\n\n.. code-block:: python\n\n  >>> from zope.intid import IntIds\n  >>> from zope.intid.interfaces import IIntIds\n  >>> root['intids'] = intids = IntIds()\n  >>> sm = root.getSiteManager()\n  >>> sm.registerUtility(intids, provided=IIntIds)\n\nAnd secondly a relation catalog that actually indexes the relations:\n\n.. code-block:: python\n\n  >>> from z3c.relationfield import RelationCatalog\n  >>> from zc.relation.interfaces import ICatalog\n  >>> root['catalog'] = catalog = RelationCatalog()\n  >>> sm.registerUtility(catalog, provided=ICatalog)\n\nUsing the relation field\n========================\n\nWe'll add an item ``a`` to our application:\n\n.. code-block:: python\n\n  >>> root['a'] = Item()\n\nAll items, including the one we just created, should have unique int\nids as this is required to link to them:\n\n.. code-block:: python\n\n  >>> from zope import component\n  >>> from zope.intid.interfaces import IIntIds\n  >>> intids = component.getUtility(IIntIds)\n  >>> a_id = intids.getId(root['a'])\n  >>> a_id >= 0\n  True\n\nThe relation is currently ``None``:\n\n.. code-block:: python\n\n  >>> root['a'].rel is None\n  True\n\nNow we can create an item ``b`` that links to item ``a`` (through its\nint id):\n\n.. code-block:: python\n\n  >>> from z3c.relationfield import RelationValue\n  >>> b = Item()\n  >>> b.rel = RelationValue(a_id)\n\nWe now store the ``b`` object in a container, which will also set up\nits relation (as an ``IObjectAddedEvent`` will be fired):\n\n.. code-block:: python\n\n  >>> root['b'] = b\n\nLet's examine the relation. First we'll check which attribute of the\npointing object ('b') this relation is pointing from:\n\n.. code-block:: python\n\n  >>> root['b'].rel.from_attribute\n  'rel'\n\nWe can ask for the object it is pointing at:\n\n.. code-block:: python\n\n  >>> to_object = root['b'].rel.to_object\n  >>> to_object.__name__\n  u'a'\n\nWe can also get the object that is doing the pointing; since we\nsupplied the ``IHasRelations`` interface, the event system took care\nof setting this:\n\n.. code-block:: python\n\n  >>> from_object = root['b'].rel.from_object\n  >>> from_object.__name__\n  u'b'\n\nThis object is also known as the ``__parent__``; again the event\nsytem took care of setting this:\n\n.. code-block:: python\n\n  >>> parent_object = root['b'].rel.__parent__\n  >>> parent_object is from_object\n  True\n\nThe relation also knows about the interfaces of both the pointing object\nand the object that is being pointed at:\n\n.. code-block:: python\n\n  >>> from pprint import pprint\n  >>> pprint(sorted(root['b'].rel.from_interfaces))\n  [<InterfaceClass zope.location.interfaces.IContained>,\n   <InterfaceClass z3c.relationfield.interfaces.IHasRelations>,\n   <InterfaceClass __builtin__.IItem>,\n   <InterfaceClass persistent.interfaces.IPersistent>]\n\n  >>> pprint(sorted(root['b'].rel.to_interfaces))\n  [<InterfaceClass zope.location.interfaces.IContained>,\n   <InterfaceClass z3c.relationfield.interfaces.IHasRelations>,\n   <InterfaceClass __builtin__.IItem>,\n   <InterfaceClass persistent.interfaces.IPersistent>]\n\nWe can also get the interfaces in flattened form:\n\n.. code-block:: python\n\n  >>> pprint(sorted(root['b'].rel.from_interfaces_flattened))\n  [<InterfaceClass zope.location.interfaces.IContained>,\n   <InterfaceClass z3c.relationfield.interfaces.IHasIncomingRelations>,\n   <InterfaceClass z3c.relationfield.interfaces.IHasOutgoingRelations>,\n   <InterfaceClass z3c.relationfield.interfaces.IHasRelations>,\n   <InterfaceClass __builtin__.IItem>,\n   <InterfaceClass zope.location.interfaces.ILocation>,\n   <InterfaceClass persistent.interfaces.IPersistent>,\n   <InterfaceClass zope.interface.Interface>]\n\n  >>> pprint(sorted(root['b'].rel.to_interfaces_flattened))\n  [<InterfaceClass zope.location.interfaces.IContained>,\n   <InterfaceClass z3c.relationfield.interfaces.IHasIncomingRelations>,\n   <InterfaceClass z3c.relationfield.interfaces.IHasOutgoingRelations>,\n   <InterfaceClass z3c.relationfield.interfaces.IHasRelations>,\n   <InterfaceClass __builtin__.IItem>,\n   <InterfaceClass zope.location.interfaces.ILocation>,\n   <InterfaceClass persistent.interfaces.IPersistent>,\n   <InterfaceClass zope.interface.Interface>]\n\nPaths\n=====\n\nWe can also obtain the path of the relation (both from where it is\npointing as well as to where it is pointing). The path should be a\nhuman-readable reference to the object we are pointing at, suitable\nfor serialization. In order to work with paths, we first need to set\nup an ``IObjectPath`` utility.\n\nSince in this example we only place objects into a single flat root\ncontainer, the paths in this demonstration can be extremely simple:\njust the name of the object we point to. In more sophisticated\napplications a path would typically be a slash separated path, like\n``/foo/bar``:\n\n.. code-block:: python\n\n  >>> from zope.interface import Interface\n  >>> from zope.interface import implementer\n  >>> from z3c.objpath.interfaces import IObjectPath\n\n\n  >>> @implementer(IObjectPath)\n  ... class ObjectPath(object):\n  ...\n  ...     def path(self, obj):\n  ...         return obj.__name__\n  ...     def resolve(self, path):\n  ...         try:\n  ...             return root[path]\n  ...         except KeyError:\n  ...             raise ValueError(\"Cannot resolve path %s\" % path)\n\n  >>> from zope.component import getGlobalSiteManager\n  >>> gsm = getGlobalSiteManager()\n\n  >>> op = ObjectPath()\n  >>> gsm.registerUtility(op)\n\n\nAfter this, we can get the path of the object the relation points to:\n\n.. code-block:: python\n\n  >>> root['b'].rel.to_path\n  u'a'\n\nWe can also get the path of the object that is doing the pointing:\n\n.. code-block:: python\n\n  >>> root['b'].rel.from_path\n  u'b'\n\nComparing and sorting relations\n===============================\n\nLet's create a bunch of ``RelationValue`` objects and compare them:\n\n.. code-block:: python\n\n  >>> rel_to_a = RelationValue(a_id)\n  >>> b_id = intids.getId(root['b'])\n  >>> rel_to_b = RelationValue(b_id)\n  >>> rel_to_a == rel_to_b\n  False\n\nRelations of course are equal to themselves:\n\n.. code-block:: python\n\n  >>> rel_to_a == rel_to_a\n  True\n\nA relation that is stored is equal to a relation that isn't stored yet:\n\n.. code-block:: python\n\n  >>> root['b'].rel == rel_to_a\n  True\n\nWe can also sort relations:\n\n.. code-block:: python\n\n  >>> expected = [('', u'a'), ('', u'b'), (u'b', u'a')]\n  >>> observed = [(rel.from_path, rel.to_path) for rel in\n  ...  sorted([root['b'].rel, rel_to_a, rel_to_b])]\n  >>> expected == observed\n  True\n\n\nRelation queries\n================\n\nNow that we have set up and indexed a relationship between ``a`` and\n``b``, we can issue queries using the relation catalog. Let's first\nget the catalog:\n\n.. code-block:: python\n\n  >>> from zc.relation.interfaces import ICatalog\n  >>> catalog = component.getUtility(ICatalog)\n\nLet's ask the catalog about the relation from ``b`` to ``a``:\n\n.. code-block:: python\n\n  >>> l = sorted(catalog.findRelations({'to_id': intids.getId(root['a'])}))\n  >>> l\n  [<...RelationValue object at ...>]\n\nWe look at this relation object again. We indeed go the right one:\n\n.. code-block:: python\n\n  >>> rel = l[0]\n  >>> rel.from_object.__name__\n  u'b'\n  >>> rel.to_object.__name__\n  u'a'\n  >>> rel.from_path\n  u'b'\n  >>> rel.to_path\n  u'a'\n\nAsking for relations to ``b`` will result in an empty list, as no such\nrelations have been set up:\n\n.. code-block:: python\n\n  >>> sorted(catalog.findRelations({'to_id': intids.getId(root['b'])}))\n  []\n\nWe can also issue more specific queries, restricting it on the\nattribute used for the relation field and the interfaces provided by\nthe related objects. Here we look for all relations between ``b`` and\n``a`` that are stored in object attribute ``rel`` and are pointing\nfrom an object with interface ``IItem`` to another object with the\ninterface ``IItem``:\n\n.. code-block:: python\n\n  >>> sorted(catalog.findRelations({\n  ...   'to_id': intids.getId(root['a']),\n  ...   'from_attribute': 'rel',\n  ...   'from_interfaces_flattened': IItem,\n  ...   'to_interfaces_flattened': IItem}))\n  [<...RelationValue object at ...>]\n\nThere are no relations stored for another attribute:\n\n.. code-block:: python\n\n  >>> sorted(catalog.findRelations({\n  ...   'to_id': intids.getId(root['a']),\n  ...   'from_attribute': 'foo'}))\n  []\n\nThere are also no relations stored for a new interface we'll introduce\nhere:\n\n.. code-block:: python\n\n  >>> class IFoo(IItem):\n  ...   pass\n\n  >>> sorted(catalog.findRelations({\n  ...   'to_id': intids.getId(root['a']),\n  ...   'from_interfaces_flattened': IItem,\n  ...   'to_interfaces_flattened': IFoo}))\n  []\n\nChanging the relation\n=====================\n\nLet's create a new object ``c``:\n\n.. code-block:: python\n\n  >>> root['c'] = Item()\n  >>> c_id = intids.getId(root['c'])\n\nNothing points to ``c`` yet:\n\n.. code-block:: python\n\n  >>> sorted(catalog.findRelations({'to_id': c_id}))\n  []\n\nWe currently have a relation from ``b`` to ``a``:\n\n.. code-block:: python\n\n  >>> sorted(catalog.findRelations({'to_id': intids.getId(root['a'])}))\n  [<...RelationValue object at ...>]\n\nWe can change the relation to point at a new object ``c``:\n\n.. code-block:: python\n\n  >>> root['b'].rel = RelationValue(c_id)\n\nWe need to send an ``IObjectModifiedEvent`` to let the catalog know we\nhave changed the relations:\n\n.. code-block:: python\n\n  >>> from zope.event import notify\n  >>> from zope.lifecycleevent import ObjectModifiedEvent\n  >>> notify(ObjectModifiedEvent(root['b']))\n\nWe should find now a single relation from ``b`` to ``c``:\n\n.. code-block:: python\n\n  >>> sorted(catalog.findRelations({'to_id': c_id}))\n  [<...RelationValue object at ...>]\n\nThe relation to ``a`` should now be gone:\n\n.. code-block:: python\n\n  >>> sorted(catalog.findRelations({'to_id': intids.getId(root['a'])}))\n  []\n\n\nIf we store the relation in a non schema field it should persist\nthe ObjectModifiedEvent.\n\n.. code-block:: python\n\n  >>> from z3c.relationfield.event import _setRelation\n  >>> _setRelation(root['b'], 'my-fancy-relation', rel_to_a)\n  >>> sorted(catalog.findRelations({'to_id': intids.getId(root['a'])}))\n  [<...RelationValue object at ...>]\n\n  >>> notify(ObjectModifiedEvent(root['b']))\n  >>> rel = sorted(catalog.findRelations({'to_id': intids.getId(root['a'])}))\n  >>> rel\n  [<...RelationValue object at ...>]\n\n  >>> catalog.unindex(rel[0])\n\nRemoving the relation\n=====================\n\nWe have a relation from ``b`` to ``c`` right now:\n\n.. code-block:: python\n\n  >>> sorted(catalog.findRelations({'to_id': c_id}))\n  [<...RelationValue object at ...>]\n\nWe can clean up an existing relation from ``b`` to ``c`` by setting it\nto ``None``:\n\n.. code-block:: python\n\n  >>> root['b'].rel = None\n\nWe need to send an ``IObjectModifiedEvent`` to let the catalog know we\nhave changed the relations:\n\n.. code-block:: python\n\n  >>> notify(ObjectModifiedEvent(root['b']))\n\nSetting the relation on ``b`` to ``None`` should remove that relation\nfrom the relation catalog, so we shouldn't be able to find it anymore:\n\n.. code-block:: python\n\n  >>> sorted(catalog.findRelations({'to_id': intids.getId(root['c'])}))\n  []\n\nLet's reestablish the removed relation:\n\n.. code-block:: python\n\n  >>> root['b'].rel = RelationValue(c_id)\n  >>> notify(ObjectModifiedEvent(root['b']))\n\n  >>> sorted(catalog.findRelations({'to_id': c_id}))\n  [<...RelationValue object at ...>]\n\n\nCopying an object with relations\n================================\n\nLet's copy an object with relations:\n\n.. code-block:: python\n\n  >>> from zope.copypastemove.interfaces import IObjectCopier\n  >>> IObjectCopier(root['b']).copyTo(root)\n  u'b-2'\n  >>> u'b-2' in root\n  True\n\nTwo relations to ``c`` can now be found, one from the original, and\nthe other from the copy:\n\n.. code-block:: python\n\n  >>> l = sorted(catalog.findRelations({'to_id': c_id}))\n  >>> len(l)\n  2\n  >>> l[0].from_path\n  u'b'\n  >>> l[1].from_path\n  u'b-2'\n\n\nRelations are sortable\n======================\n\nRelations are sorted by default on a combination of the relation name,\nthe path of the object the relation is one and the path of the object\nthe relation is pointing to.\n\nLet's query all relations availble right now and sort them:\n\n.. code-block:: python\n\n  >>> l = sorted(catalog.findRelations())\n  >>> len(l)\n  2\n  >>> l[0].from_attribute\n  'rel'\n  >>> l[1].from_attribute\n  'rel'\n  >>> l[0].from_path\n  u'b'\n  >>> l[1].from_path\n  u'b-2'\n\n\nRemoving an object with relations\n=================================\n\nWe will remove ``b-2`` again. Its relation should automatically be remove\nfrom the catalog:\n\n.. code-block:: python\n\n  >>> del root['b-2']\n  >>> l = sorted(catalog.findRelations({'to_id': c_id}))\n  >>> len(l)\n  1\n  >>> l[0].from_path\n  u'b'\n\n\nBreaking a relation\n===================\n\nWe have a relation from ``b`` to ``c`` right now:\n\n.. code-block:: python\n\n  >>> sorted(catalog.findRelations({'to_id': c_id}))\n  [<...RelationValue object at ...>]\n\nWe have no broken relations:\n\n.. code-block:: python\n\n  >>> sorted(catalog.findRelations({'to_id': None}))\n  []\n\nThe relation isn't broken:\n\n.. code-block:: python\n\n  >>> b.rel.isBroken()\n  False\n\nWe are now going to break this relation by removing ``c``:\n\n.. code-block:: python\n\n  >>> del root['c']\n\nThe relation is broken now:\n\n.. code-block:: python\n\n  >>> b.rel.isBroken()\n  True\n\nThe original relation still has a ``to_path``:\n\n.. code-block:: python\n\n  >>> b.rel.to_path\n  u'c'\n\nIt's broken however as there is no ``to_object``:\n\n.. code-block:: python\n\n  >>> b.rel.to_object is None\n  True\n\nThe ``to_id`` is also gone:\n\n.. code-block:: python\n\n  >>> b.rel.to_id is None\n  True\n\nWe cannot find the broken relation in the catalog this way as it's not\npointing to ``c_id`` anymore:\n\n.. code-block:: python\n\n  >>> sorted(catalog.findRelations({'to_id': c_id}))\n  []\n\nWe can however find it by searching for relations that have a\n``to_id`` of ``None``:\n\n.. code-block:: python\n\n  >>> sorted(catalog.findRelations({'to_id': None}))\n  [<...RelationValue object at ...>]\n\nA broken relation isn't equal to ``None`` (this was a bug):\n\n.. code-block:: python\n\n  >>> b.rel == None\n  False\n\n\nRelationChoice\n==============\n\nA ``RelationChoice`` field is much like an ordinary ``Relation`` field\nbut can be used to render a special widget that allows a choice of\nselections.\n\nWe will first demonstrate a ``RelationChoice`` field has the same effect\nas a ``Relation`` field itself:\n\n.. code-block:: python\n\n  >>> from z3c.relationfield import RelationChoice\n  >>> class IChoiceItem(Interface):\n  ...   rel = RelationChoice(title=u\"Relation\", values=[])\n  >>> @implementer(IChoiceItem, IHasRelations)\n  ... class ChoiceItem(Persistent):\n  ...\n  ...   def __init__(self):\n  ...     self.rel = None\n\nLet's create an object to point the relation to:\n\n.. code-block:: python\n\n  >>> root['some_object'] = Item()\n  >>> some_object_id = intids.getId(root['some_object'])\n\nAnd let's establish the relation:\n\n:.. code-block:: python\n\n  >>> choice_item = ChoiceItem()\n  >>> choice_item.rel = RelationValue(some_object_id)\n  >>> root['choice_item'] = choice_item\n\nWe can query for this relation now:\n\n.. code-block:: python\n\n  >>> l = sorted(catalog.findRelations({'to_id': some_object_id}))\n  >>> l\n  [<...RelationValue object at ...>]\n\nRelationList\n============\n\nLet's now experiment with the ``RelationList`` field which can be used\nto maintain a list of relations:\n\n.. code-block:: python\n\n  >>> from z3c.relationfield import RelationList\n  >>> class IMultiItem(Interface):\n  ...   rel = RelationList(title=u\"Relation\")\n\nWe also define a class ``MultiItem`` that implements both\n``IMultiItem`` and the special\n``z3c.relationfield.interfaces.IHasRelations`` interface:\n\n.. code-block:: python\n\n  >>> @implementer(IMultiItem, IHasRelations)\n  ... class MultiItem(Persistent):\n  ...\n  ...   def __init__(self):\n  ...     self.rel = None\n\nWe set up a few object we can then create relations between:\n\n.. code-block:: python\n\n  >>> root['multi1'] = MultiItem()\n  >>> root['multi2'] = MultiItem()\n  >>> root['multi3'] = MultiItem()\n\nLet's create a relation from ``multi1`` to both ``multi2`` and\n``multi3``:\n\n.. code-block:: python\n\n  >>> multi1_id = intids.getId(root['multi1'])\n  >>> multi2_id = intids.getId(root['multi2'])\n  >>> multi3_id = intids.getId(root['multi3'])\n\n  >>> root['multi1'].rel = [RelationValue(multi2_id),\n  ...                       RelationValue(multi3_id)]\n\nWe need to notify that we modified the ObjectModifiedEvent\n\n.. code-block:: python\n\n  >>> notify(ObjectModifiedEvent(root['multi1']))\n\nNow that this is set up, let's verify whether we can find the\nproper relations in in the catalog:\n\n.. code-block:: python\n\n  >>> len(list(catalog.findRelations({'to_id': multi2_id})))\n  1\n  >>> len(list(catalog.findRelations({'to_id': multi3_id})))\n  1\n  >>> len(list(catalog.findRelations({'from_id': multi1_id})))\n  2\n\n\nTemporary relations\n===================\n\nIf we have an import procedure where we import relations from some\nexternal source such as an XML file, it may be that we read a relation\nthat points to an object that does not yet exist as it is yet to be\nimported. We provide a special ``TemporaryRelationValue`` for this\ncase.  A ``TemporaryRelationValue`` just contains the path of what it\nis pointing to, but does not resolve it yet. Let's use\n``TemporaryRelationValue`` in a new object, creating a relation to\n``a``:\n\n.. code-block:: python\n\n  >>> from z3c.relationfield import TemporaryRelationValue\n  >>> root['d'] = Item()\n  >>> root['d'].rel = TemporaryRelationValue('a')\n\nA modification event does not actually get this relation cataloged:\n\n.. code-block:: python\n\n  >>> before = sorted(catalog.findRelations({'to_id': a_id}))\n  >>> notify(ObjectModifiedEvent(root['d']))\n  >>> after = sorted(catalog.findRelations({'to_id': a_id}))\n  >>> len(before) == len(after)\n  True\n\nWe will now convert all temporary relations on ``d`` to real ones:\n\n.. code-block:: python\n\n  >>> from z3c.relationfield import realize_relations\n  >>> realize_relations(root['d'])\n  >>> notify(ObjectModifiedEvent(root['d']))\n\nWe can see the real relation object now:\n\n.. code-block:: python\n\n  >>> root['d'].rel\n  <...RelationValue object at ...>\n\nThe relation will also now show up in the catalog:\n\n.. code-block:: python\n\n  >>> after2 = sorted(catalog.findRelations({'to_id': a_id}))\n  >>> len(after2) > len(before)\n  True\n\nTemporary relation values also work with ``RelationList`` objects:\n\n.. code-block:: python\n\n  >>> root['multi_temp'] = MultiItem()\n  >>> root['multi_temp'].rel = [TemporaryRelationValue('a')]\n\nLet's convert this to a real relation:\n\n.. code-block:: python\n\n  >>> realize_relations(root['multi_temp'])\n  >>> notify(ObjectModifiedEvent(root['multi_temp']))\n\nAgain we can see the real relation object when we look at it:\n\n.. code-block:: python\n\n  >>> root['multi_temp'].rel\n  [<...RelationValue object at ...>]\n\nAnd we will now see this new relation appear in the catalog:\n\n.. code-block:: python\n\n  >>> after3 = sorted(catalog.findRelations({'to_id': a_id}))\n  >>> len(after3) > len(after2)\n  True\n\nBroken temporary relations\n==========================\n\nLet's create another temporary relation, this time a broken one that\ncannot be resolved:\n\n.. code-block:: python\n\n  >>> root['e'] = Item()\n  >>> root['e'].rel = TemporaryRelationValue('nonexistent')\n\nLet's try realizing this relation:\n\n.. code-block:: python\n\n  >>> realize_relations(root['e'])\n\nWe end up with a broken relation:\n\n.. code-block:: python\n\n  >>> root['e'].rel.isBroken()\n  True\n\nIt's pointing to the nonexistent path:\n\n.. code-block:: python\n\n  >>> root['e'].rel.to_path\n  'nonexistent'\n\nSetting up a releation catalog\n==============================\n\nThis package provides a RelationCatalog initialized with a set of indexes commonly useful for queries on RelationValue objects.\nThe default indexes are `from_id`, `to_id`, `from_attribute`, `from_interfaces_flattened` and `to_interfaces_flattened`.\n\nSometimes it is needed to define custom indexes or use less than the default ones.\nThe `zc.relationfield.index.RelationCatalog` class can be initialized with a list of dicts with keys `element` and `kwargs` to be passed to RelationCatalog `addValueIndex` method.\nAs `element` in general the attribute on the `IRelationValue` like `IRelationValue['from_id']` is expected.\nHowever, if theres a subclass of `IRelationValue` is used with additional fields, those fields can be added here as indexes.\n\nCHANGES\n*******\n\n0.9.0 (2019-09-15)\n==================\n\nNew features:\n\n- Provide IRelationBrokenEvent to be able to distinguish the event when\n  subscribing to IObjectModifiedEvent\n  [vangheem]\n\n\n0.8.0 (2019-02-13)\n==================\n\nNew features:\n\n- Adresses `Still uses BTrees wrongly, screws up people changing Interfaces <https://github.com/zopefoundation/z3c.relationfield/issues/4>`_, allows third party software to define which indexes are used.\n  [jensens]\n\nBug fixes:\n\n- Fix DeprecationWarnings in ``tests.py``.\n  [jensens]\n\n\n0.7.1 (2018-11-08)\n==================\n\n- Python 3 compatibility: use the implementer decorator and fix ordering\n  [ale-rt]\n\n- Python 3 compatibility: Make ``RelationValue`` hashable. [sallner]\n\n- Renamed ``README.txt``to ``README.rst`` and ``CHANGES.txt`` to\n  ``CHANGES.rst``.\n  [thet]\n\n- Update buildout / travis config\n  [tomgross]\n\n- Fix issue where relations are cleared on modify if they are not stored as\n  an class attribute. Usecase see https://github.com/plone/Products.CMFPlone/issues/2384\n  [tomgross]\n\n0.7 (2015-03-13)\n================\n\n- Remove dependencies on zope.app.*\n  [davisagli]\n\n\n0.6.3 (2014-04-15)\n==================\n\n* Remove dependency on grok.\n  [pbauer, jensens]\n\n\n0.6.2 (2012-12-06)\n==================\n\n* Updated test setup and test to run with current versions of dependent\n  packages, thus running with Python 2.6, too.\n\n* Added missing (test) dependencies.\n\n* Rename __neq__ method to __ne__ since __neq__ is not the right builtin\n  name for != handlers.\n\n\n0.6.1 (2009-10-11)\n==================\n\n* Fixes broken release.\n\n0.6 (2009-10-11)\n================\n\n* Ensure that the value_type of a RelationList is not overwritten to be 'None'\n  when the field is constructed.\n\n0.5 (2009-06-30)\n================\n\n* Move lxml and schema2xml dependencies to an [xml] extra so that people can\n  use this package without having to install lxml, which still causes issues\n  on some platforms. If z3c.schema2xml and lxml are not importable, the\n  relevant adapters will not be defined, but everything else will still work.\n\n* Subscribe to IIntIdAddedEvent instead of IObjectAddedEvent to prevent\n  errors due to subscriber ordering.\n\n\n0.4.3 (2009-06-04)\n==================\n\n* Add missing dependency for lxml.\n\n\n0.4.2 (2009-04-22)\n==================\n\n* Prevent the event failures from failing when utilities are missing or when\n  objects do not implement IContained.\n\n\n0.4.1 (2009-02-12)\n==================\n\n* Don't handle ``IObjectModified`` events for objects that do not yet\n  have a parent. There is no need to do so anyway, as these objects cannot\n  have outgoing relations indexed.\n\n0.4 (2009-02-10)\n================\n\n* Introduce a ``RelationChoice`` field that behaves like\n  ``schema.Choice`` but tracks relations. In combination with a source\n  (such as created by ``RelationSourceFactory`` provided by\n  ``z3c.relationfieldui``) this can be used to create drop-down\n  selections for relations.\n\n* Clarify the way comparing and sorting of ``RelationValue`` objects is\n  done in order to better support choice support.\n\n0.3.2 (2009-01-21)\n==================\n\n* When a relation is broken, properly re-catalog things.\n\n0.3.1 (2009-01-20)\n==================\n\n* Introduce sensible sort order for relations, based on a\n  ``(from_attribute, from_path, to_path)`` tuple.\n\n* Relations will now never compare to ``None``.\n\n0.3 (2009-01-19)\n================\n\n* Introduce two new interfaces: ``IHasOutgoingRelations`` and\n  ``IHasIncomingRelations``. ``IHasOutgoingRelations`` should be provided\n  by objects that actually have relations set on them, so that\n  they can be properly cataloged. ``IHasIncomingRelations`` should be\n  set on objects that can be related to, so that broken relations\n  can be properly tracked. ``IHasRelations`` now extends both,\n  so if you provide those on your object you have an object that can\n  have both outgoing as well as incoming relations.\n\n* Improve broken relations support. When you now break a relation (by\n  removing the relation target), ``to_id`` and ``to_object`` become\n  ``None``. ``to_path`` however will remain the path that the relation\n  last pointed to. ``TemporaryRelation`` objects that when realized\n  are broken relations can also be created.\n\n  You can also for broken status by calling ``isBroken`` on a\n  relation.\n\n* The signature of the top-level function ``create_relation``\n  changed. It used to take the object to which the relation was to be\n  created, but should now get the path (in ``IObjectPath`` terms).\n  ``create_relation`` will now create a broken relation object if the\n  path cannot be resolved.\n\n0.2 (2009-01-08)\n================\n\n* Added support for ``RelationList`` fields. This allows one to\n  maintain a list of ``RelationValue`` objects that will be cataloged\n  like the regular ``Relation`` fields.\n\n* Get rid of ``IRelationInfo`` adapter requirement. Just define a\n  ``create_relation`` function that does the same work.\n\n* When looking for relations on an object be more tolerant if those\n  cannot be found (just skip them) - this can happen when a schema is\n  changed.\n\n0.1 (2008-12-05)\n================\n\n* Initial public release.\n\nDownload\n********\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/zopefoundation/z3c.relationfield", "keywords": "relation field", "license": "ZPL 2.1", "maintainer": "", "maintainer_email": "", "name": "z3c.relationfield", "package_url": "https://pypi.org/project/z3c.relationfield/", "platform": "", "project_url": "https://pypi.org/project/z3c.relationfield/", "project_urls": {"Homepage": "https://github.com/zopefoundation/z3c.relationfield"}, "release_url": "https://pypi.org/project/z3c.relationfield/0.9.0/", "requires_dist": ["setuptools", "z3c.objpath", "zc.relation (>=1.0)", "zope.intid", "zope.container ; extra == 'test'", "zope.copypastemove ; extra == 'test'", "zope.site ; extra == 'test'", "z3c.schema2xml (>=1.0) ; extra == 'xml'", "lxml ; extra == 'xml'"], "requires_python": "", "summary": "A relation field framework for Zope 3.", "version": "0.9.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"z3c-relationfield\">\n<h2>z3c.relationfield</h2>\n<div id=\"introduction\">\n<h3>Introduction</h3>\n<p>This package implements a new schema field Relation, and the\nRelationValue objects that store actual relations. It can index these\nrelations using the <tt>zc.relation</tt> infractructure, and using these\nindexes can efficiently answer questions about the relations.</p>\n<p>The package <a href=\"http://pypi.python.org/pypi/z3c.relationfieldui\" rel=\"nofollow\">z3c.relationfieldui</a> in addition provides a widget to\nedit and display Relation fields.</p>\n</div>\n<div id=\"setup\">\n<h3>Setup</h3>\n<p><tt>z3c.relationfield.Relation</tt> is a schema field that can be used to\nexpress relations. Let\u2019s define a schema IItem that uses a relation\nfield:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">z3c.relationfield</span> <span class=\"kn\">import</span> <span class=\"n\">Relation</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">zope.interface</span> <span class=\"kn\">import</span> <span class=\"n\">Interface</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">IItem</span><span class=\"p\">(</span><span class=\"n\">Interface</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>   <span class=\"n\">rel</span> <span class=\"o\">=</span> <span class=\"n\">Relation</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s2\">\"Relation\"</span><span class=\"p\">)</span>\n</pre>\n<p>We also define a class <tt>Item</tt> that implements both <tt>IItem</tt>\nand the special <tt>z3c.relationfield.interfaces.IHasRelations</tt>\ninterface:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">z3c.relationfield.interfaces</span> <span class=\"kn\">import</span> <span class=\"n\">IHasRelations</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">persistent</span> <span class=\"kn\">import</span> <span class=\"n\">Persistent</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">zope.interface</span> <span class=\"kn\">import</span> <span class=\"n\">implementer</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@implementer</span><span class=\"p\">(</span><span class=\"n\">IItem</span><span class=\"p\">,</span> <span class=\"n\">IHasRelations</span><span class=\"p\">)</span>\n<span class=\"o\">...</span> <span class=\"k\">class</span> <span class=\"nc\">Item</span><span class=\"p\">(</span><span class=\"n\">Persistent</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>   <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rel</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n</pre>\n<p>The <tt>IHasRelations</tt> marker interface is needed to let the relations\non <tt>Item</tt> be cataloged (when they are put in a container and removed\nfrom it, for instance). It is in fact a combination of\n<tt>IHasIncomingRelations</tt> and <tt>IHasOutgoingRelations</tt>, which is fine\nas we want items to support both.</p>\n<p>Finally we need a test application:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">zope.site.site</span> <span class=\"kn\">import</span> <span class=\"n\">SiteManagerContainer</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">zope.container.btree</span> <span class=\"kn\">import</span> <span class=\"n\">BTreeContainer</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">TestApp</span><span class=\"p\">(</span><span class=\"n\">SiteManagerContainer</span><span class=\"p\">,</span> <span class=\"n\">BTreeContainer</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>   <span class=\"k\">pass</span>\n</pre>\n<p>We set up the test application:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">ZODB.MappingStorage</span> <span class=\"kn\">import</span> <span class=\"n\">DB</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">db</span> <span class=\"o\">=</span> <span class=\"n\">DB</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">conn</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">root</span><span class=\"p\">()[</span><span class=\"s1\">'root'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">TestApp</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">)</span>\n</pre>\n<p>We make sure that this is the current site, so we can look up local\nutilities in it and so on. Normally this is done automatically by\nZope\u2019s traversal mechanism:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">zope.site.site</span> <span class=\"kn\">import</span> <span class=\"n\">LocalSiteManager</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">setSiteManager</span><span class=\"p\">(</span><span class=\"n\">LocalSiteManager</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">zope.component.hooks</span> <span class=\"kn\">import</span> <span class=\"n\">setSite</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">setSite</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">)</span>\n</pre>\n<p>For this site to work with <tt>z3c.relationship</tt>, we need to set up two\nutilities. Firstly, an <tt>IIntIds</tt> that tracks unique ids for objects\nin the ZODB:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">zope.intid</span> <span class=\"kn\">import</span> <span class=\"n\">IntIds</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">zope.intid.interfaces</span> <span class=\"kn\">import</span> <span class=\"n\">IIntIds</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span><span class=\"p\">[</span><span class=\"s1\">'intids'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">intids</span> <span class=\"o\">=</span> <span class=\"n\">IntIds</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">sm</span> <span class=\"o\">=</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">getSiteManager</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">sm</span><span class=\"o\">.</span><span class=\"n\">registerUtility</span><span class=\"p\">(</span><span class=\"n\">intids</span><span class=\"p\">,</span> <span class=\"n\">provided</span><span class=\"o\">=</span><span class=\"n\">IIntIds</span><span class=\"p\">)</span>\n</pre>\n<p>And secondly a relation catalog that actually indexes the relations:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">z3c.relationfield</span> <span class=\"kn\">import</span> <span class=\"n\">RelationCatalog</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">zc.relation.interfaces</span> <span class=\"kn\">import</span> <span class=\"n\">ICatalog</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span><span class=\"p\">[</span><span class=\"s1\">'catalog'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">catalog</span> <span class=\"o\">=</span> <span class=\"n\">RelationCatalog</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">sm</span><span class=\"o\">.</span><span class=\"n\">registerUtility</span><span class=\"p\">(</span><span class=\"n\">catalog</span><span class=\"p\">,</span> <span class=\"n\">provided</span><span class=\"o\">=</span><span class=\"n\">ICatalog</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"using-the-relation-field\">\n<h3>Using the relation field</h3>\n<p>We\u2019ll add an item <tt>a</tt> to our application:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span><span class=\"p\">[</span><span class=\"s1\">'a'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Item</span><span class=\"p\">()</span>\n</pre>\n<p>All items, including the one we just created, should have unique int\nids as this is required to link to them:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">zope</span> <span class=\"kn\">import</span> <span class=\"n\">component</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">zope.intid.interfaces</span> <span class=\"kn\">import</span> <span class=\"n\">IIntIds</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">intids</span> <span class=\"o\">=</span> <span class=\"n\">component</span><span class=\"o\">.</span><span class=\"n\">getUtility</span><span class=\"p\">(</span><span class=\"n\">IIntIds</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">a_id</span> <span class=\"o\">=</span> <span class=\"n\">intids</span><span class=\"o\">.</span><span class=\"n\">getId</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">[</span><span class=\"s1\">'a'</span><span class=\"p\">])</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">a_id</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span>\n<span class=\"kc\">True</span>\n</pre>\n<p>The relation is currently <tt>None</tt>:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span><span class=\"p\">[</span><span class=\"s1\">'a'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">rel</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span>\n<span class=\"kc\">True</span>\n</pre>\n<p>Now we can create an item <tt>b</tt> that links to item <tt>a</tt> (through its\nint id):</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">z3c.relationfield</span> <span class=\"kn\">import</span> <span class=\"n\">RelationValue</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">Item</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">rel</span> <span class=\"o\">=</span> <span class=\"n\">RelationValue</span><span class=\"p\">(</span><span class=\"n\">a_id</span><span class=\"p\">)</span>\n</pre>\n<p>We now store the <tt>b</tt> object in a container, which will also set up\nits relation (as an <tt>IObjectAddedEvent</tt> will be fired):</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span><span class=\"p\">[</span><span class=\"s1\">'b'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">b</span>\n</pre>\n<p>Let\u2019s examine the relation. First we\u2019ll check which attribute of the\npointing object (\u2018b\u2019) this relation is pointing from:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span><span class=\"p\">[</span><span class=\"s1\">'b'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">rel</span><span class=\"o\">.</span><span class=\"n\">from_attribute</span>\n<span class=\"s1\">'rel'</span>\n</pre>\n<p>We can ask for the object it is pointing at:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">to_object</span> <span class=\"o\">=</span> <span class=\"n\">root</span><span class=\"p\">[</span><span class=\"s1\">'b'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">rel</span><span class=\"o\">.</span><span class=\"n\">to_object</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">to_object</span><span class=\"o\">.</span><span class=\"vm\">__name__</span>\n<span class=\"sa\">u</span><span class=\"s1\">'a'</span>\n</pre>\n<p>We can also get the object that is doing the pointing; since we\nsupplied the <tt>IHasRelations</tt> interface, the event system took care\nof setting this:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">from_object</span> <span class=\"o\">=</span> <span class=\"n\">root</span><span class=\"p\">[</span><span class=\"s1\">'b'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">rel</span><span class=\"o\">.</span><span class=\"n\">from_object</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">from_object</span><span class=\"o\">.</span><span class=\"vm\">__name__</span>\n<span class=\"sa\">u</span><span class=\"s1\">'b'</span>\n</pre>\n<p>This object is also known as the <tt>__parent__</tt>; again the event\nsytem took care of setting this:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">parent_object</span> <span class=\"o\">=</span> <span class=\"n\">root</span><span class=\"p\">[</span><span class=\"s1\">'b'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">rel</span><span class=\"o\">.</span><span class=\"n\">__parent__</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">parent_object</span> <span class=\"ow\">is</span> <span class=\"n\">from_object</span>\n<span class=\"kc\">True</span>\n</pre>\n<p>The relation also knows about the interfaces of both the pointing object\nand the object that is being pointed at:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">pprint</span> <span class=\"kn\">import</span> <span class=\"n\">pprint</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pprint</span><span class=\"p\">(</span><span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">[</span><span class=\"s1\">'b'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">rel</span><span class=\"o\">.</span><span class=\"n\">from_interfaces</span><span class=\"p\">))</span>\n<span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">InterfaceClass</span> <span class=\"n\">zope</span><span class=\"o\">.</span><span class=\"n\">location</span><span class=\"o\">.</span><span class=\"n\">interfaces</span><span class=\"o\">.</span><span class=\"n\">IContained</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n <span class=\"o\">&lt;</span><span class=\"n\">InterfaceClass</span> <span class=\"n\">z3c</span><span class=\"o\">.</span><span class=\"n\">relationfield</span><span class=\"o\">.</span><span class=\"n\">interfaces</span><span class=\"o\">.</span><span class=\"n\">IHasRelations</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n <span class=\"o\">&lt;</span><span class=\"n\">InterfaceClass</span> <span class=\"n\">__builtin__</span><span class=\"o\">.</span><span class=\"n\">IItem</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n <span class=\"o\">&lt;</span><span class=\"n\">InterfaceClass</span> <span class=\"n\">persistent</span><span class=\"o\">.</span><span class=\"n\">interfaces</span><span class=\"o\">.</span><span class=\"n\">IPersistent</span><span class=\"o\">&gt;</span><span class=\"p\">]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pprint</span><span class=\"p\">(</span><span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">[</span><span class=\"s1\">'b'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">rel</span><span class=\"o\">.</span><span class=\"n\">to_interfaces</span><span class=\"p\">))</span>\n<span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">InterfaceClass</span> <span class=\"n\">zope</span><span class=\"o\">.</span><span class=\"n\">location</span><span class=\"o\">.</span><span class=\"n\">interfaces</span><span class=\"o\">.</span><span class=\"n\">IContained</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n <span class=\"o\">&lt;</span><span class=\"n\">InterfaceClass</span> <span class=\"n\">z3c</span><span class=\"o\">.</span><span class=\"n\">relationfield</span><span class=\"o\">.</span><span class=\"n\">interfaces</span><span class=\"o\">.</span><span class=\"n\">IHasRelations</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n <span class=\"o\">&lt;</span><span class=\"n\">InterfaceClass</span> <span class=\"n\">__builtin__</span><span class=\"o\">.</span><span class=\"n\">IItem</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n <span class=\"o\">&lt;</span><span class=\"n\">InterfaceClass</span> <span class=\"n\">persistent</span><span class=\"o\">.</span><span class=\"n\">interfaces</span><span class=\"o\">.</span><span class=\"n\">IPersistent</span><span class=\"o\">&gt;</span><span class=\"p\">]</span>\n</pre>\n<p>We can also get the interfaces in flattened form:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pprint</span><span class=\"p\">(</span><span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">[</span><span class=\"s1\">'b'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">rel</span><span class=\"o\">.</span><span class=\"n\">from_interfaces_flattened</span><span class=\"p\">))</span>\n<span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">InterfaceClass</span> <span class=\"n\">zope</span><span class=\"o\">.</span><span class=\"n\">location</span><span class=\"o\">.</span><span class=\"n\">interfaces</span><span class=\"o\">.</span><span class=\"n\">IContained</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n <span class=\"o\">&lt;</span><span class=\"n\">InterfaceClass</span> <span class=\"n\">z3c</span><span class=\"o\">.</span><span class=\"n\">relationfield</span><span class=\"o\">.</span><span class=\"n\">interfaces</span><span class=\"o\">.</span><span class=\"n\">IHasIncomingRelations</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n <span class=\"o\">&lt;</span><span class=\"n\">InterfaceClass</span> <span class=\"n\">z3c</span><span class=\"o\">.</span><span class=\"n\">relationfield</span><span class=\"o\">.</span><span class=\"n\">interfaces</span><span class=\"o\">.</span><span class=\"n\">IHasOutgoingRelations</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n <span class=\"o\">&lt;</span><span class=\"n\">InterfaceClass</span> <span class=\"n\">z3c</span><span class=\"o\">.</span><span class=\"n\">relationfield</span><span class=\"o\">.</span><span class=\"n\">interfaces</span><span class=\"o\">.</span><span class=\"n\">IHasRelations</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n <span class=\"o\">&lt;</span><span class=\"n\">InterfaceClass</span> <span class=\"n\">__builtin__</span><span class=\"o\">.</span><span class=\"n\">IItem</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n <span class=\"o\">&lt;</span><span class=\"n\">InterfaceClass</span> <span class=\"n\">zope</span><span class=\"o\">.</span><span class=\"n\">location</span><span class=\"o\">.</span><span class=\"n\">interfaces</span><span class=\"o\">.</span><span class=\"n\">ILocation</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n <span class=\"o\">&lt;</span><span class=\"n\">InterfaceClass</span> <span class=\"n\">persistent</span><span class=\"o\">.</span><span class=\"n\">interfaces</span><span class=\"o\">.</span><span class=\"n\">IPersistent</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n <span class=\"o\">&lt;</span><span class=\"n\">InterfaceClass</span> <span class=\"n\">zope</span><span class=\"o\">.</span><span class=\"n\">interface</span><span class=\"o\">.</span><span class=\"n\">Interface</span><span class=\"o\">&gt;</span><span class=\"p\">]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pprint</span><span class=\"p\">(</span><span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">[</span><span class=\"s1\">'b'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">rel</span><span class=\"o\">.</span><span class=\"n\">to_interfaces_flattened</span><span class=\"p\">))</span>\n<span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">InterfaceClass</span> <span class=\"n\">zope</span><span class=\"o\">.</span><span class=\"n\">location</span><span class=\"o\">.</span><span class=\"n\">interfaces</span><span class=\"o\">.</span><span class=\"n\">IContained</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n <span class=\"o\">&lt;</span><span class=\"n\">InterfaceClass</span> <span class=\"n\">z3c</span><span class=\"o\">.</span><span class=\"n\">relationfield</span><span class=\"o\">.</span><span class=\"n\">interfaces</span><span class=\"o\">.</span><span class=\"n\">IHasIncomingRelations</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n <span class=\"o\">&lt;</span><span class=\"n\">InterfaceClass</span> <span class=\"n\">z3c</span><span class=\"o\">.</span><span class=\"n\">relationfield</span><span class=\"o\">.</span><span class=\"n\">interfaces</span><span class=\"o\">.</span><span class=\"n\">IHasOutgoingRelations</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n <span class=\"o\">&lt;</span><span class=\"n\">InterfaceClass</span> <span class=\"n\">z3c</span><span class=\"o\">.</span><span class=\"n\">relationfield</span><span class=\"o\">.</span><span class=\"n\">interfaces</span><span class=\"o\">.</span><span class=\"n\">IHasRelations</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n <span class=\"o\">&lt;</span><span class=\"n\">InterfaceClass</span> <span class=\"n\">__builtin__</span><span class=\"o\">.</span><span class=\"n\">IItem</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n <span class=\"o\">&lt;</span><span class=\"n\">InterfaceClass</span> <span class=\"n\">zope</span><span class=\"o\">.</span><span class=\"n\">location</span><span class=\"o\">.</span><span class=\"n\">interfaces</span><span class=\"o\">.</span><span class=\"n\">ILocation</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n <span class=\"o\">&lt;</span><span class=\"n\">InterfaceClass</span> <span class=\"n\">persistent</span><span class=\"o\">.</span><span class=\"n\">interfaces</span><span class=\"o\">.</span><span class=\"n\">IPersistent</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n <span class=\"o\">&lt;</span><span class=\"n\">InterfaceClass</span> <span class=\"n\">zope</span><span class=\"o\">.</span><span class=\"n\">interface</span><span class=\"o\">.</span><span class=\"n\">Interface</span><span class=\"o\">&gt;</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"paths\">\n<h3>Paths</h3>\n<p>We can also obtain the path of the relation (both from where it is\npointing as well as to where it is pointing). The path should be a\nhuman-readable reference to the object we are pointing at, suitable\nfor serialization. In order to work with paths, we first need to set\nup an <tt>IObjectPath</tt> utility.</p>\n<p>Since in this example we only place objects into a single flat root\ncontainer, the paths in this demonstration can be extremely simple:\njust the name of the object we point to. In more sophisticated\napplications a path would typically be a slash separated path, like\n<tt>/foo/bar</tt>:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">zope.interface</span> <span class=\"kn\">import</span> <span class=\"n\">Interface</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">zope.interface</span> <span class=\"kn\">import</span> <span class=\"n\">implementer</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">z3c.objpath.interfaces</span> <span class=\"kn\">import</span> <span class=\"n\">IObjectPath</span>\n\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@implementer</span><span class=\"p\">(</span><span class=\"n\">IObjectPath</span><span class=\"p\">)</span>\n<span class=\"o\">...</span> <span class=\"k\">class</span> <span class=\"nc\">ObjectPath</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"nf\">path</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>         <span class=\"k\">return</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"vm\">__name__</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"nf\">resolve</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>         <span class=\"k\">try</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>             <span class=\"k\">return</span> <span class=\"n\">root</span><span class=\"p\">[</span><span class=\"n\">path</span><span class=\"p\">]</span>\n<span class=\"o\">...</span>         <span class=\"k\">except</span> <span class=\"ne\">KeyError</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>             <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">\"Cannot resolve path </span><span class=\"si\">%s</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"n\">path</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">zope.component</span> <span class=\"kn\">import</span> <span class=\"n\">getGlobalSiteManager</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">gsm</span> <span class=\"o\">=</span> <span class=\"n\">getGlobalSiteManager</span><span class=\"p\">()</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">op</span> <span class=\"o\">=</span> <span class=\"n\">ObjectPath</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">gsm</span><span class=\"o\">.</span><span class=\"n\">registerUtility</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">)</span>\n</pre>\n<p>After this, we can get the path of the object the relation points to:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span><span class=\"p\">[</span><span class=\"s1\">'b'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">rel</span><span class=\"o\">.</span><span class=\"n\">to_path</span>\n<span class=\"sa\">u</span><span class=\"s1\">'a'</span>\n</pre>\n<p>We can also get the path of the object that is doing the pointing:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span><span class=\"p\">[</span><span class=\"s1\">'b'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">rel</span><span class=\"o\">.</span><span class=\"n\">from_path</span>\n<span class=\"sa\">u</span><span class=\"s1\">'b'</span>\n</pre>\n</div>\n<div id=\"comparing-and-sorting-relations\">\n<h3>Comparing and sorting relations</h3>\n<p>Let\u2019s create a bunch of <tt>RelationValue</tt> objects and compare them:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">rel_to_a</span> <span class=\"o\">=</span> <span class=\"n\">RelationValue</span><span class=\"p\">(</span><span class=\"n\">a_id</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">b_id</span> <span class=\"o\">=</span> <span class=\"n\">intids</span><span class=\"o\">.</span><span class=\"n\">getId</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">[</span><span class=\"s1\">'b'</span><span class=\"p\">])</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">rel_to_b</span> <span class=\"o\">=</span> <span class=\"n\">RelationValue</span><span class=\"p\">(</span><span class=\"n\">b_id</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">rel_to_a</span> <span class=\"o\">==</span> <span class=\"n\">rel_to_b</span>\n<span class=\"kc\">False</span>\n</pre>\n<p>Relations of course are equal to themselves:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">rel_to_a</span> <span class=\"o\">==</span> <span class=\"n\">rel_to_a</span>\n<span class=\"kc\">True</span>\n</pre>\n<p>A relation that is stored is equal to a relation that isn\u2019t stored yet:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span><span class=\"p\">[</span><span class=\"s1\">'b'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">rel</span> <span class=\"o\">==</span> <span class=\"n\">rel_to_a</span>\n<span class=\"kc\">True</span>\n</pre>\n<p>We can also sort relations:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">expected</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s1\">''</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s1\">'a'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">''</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s1\">'b'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"sa\">u</span><span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s1\">'a'</span><span class=\"p\">)]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">observed</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"n\">rel</span><span class=\"o\">.</span><span class=\"n\">from_path</span><span class=\"p\">,</span> <span class=\"n\">rel</span><span class=\"o\">.</span><span class=\"n\">to_path</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">rel</span> <span class=\"ow\">in</span>\n<span class=\"o\">...</span>  <span class=\"nb\">sorted</span><span class=\"p\">([</span><span class=\"n\">root</span><span class=\"p\">[</span><span class=\"s1\">'b'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">rel</span><span class=\"p\">,</span> <span class=\"n\">rel_to_a</span><span class=\"p\">,</span> <span class=\"n\">rel_to_b</span><span class=\"p\">])]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">expected</span> <span class=\"o\">==</span> <span class=\"n\">observed</span>\n<span class=\"kc\">True</span>\n</pre>\n</div>\n<div id=\"relation-queries\">\n<h3>Relation queries</h3>\n<p>Now that we have set up and indexed a relationship between <tt>a</tt> and\n<tt>b</tt>, we can issue queries using the relation catalog. Let\u2019s first\nget the catalog:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">zc.relation.interfaces</span> <span class=\"kn\">import</span> <span class=\"n\">ICatalog</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">catalog</span> <span class=\"o\">=</span> <span class=\"n\">component</span><span class=\"o\">.</span><span class=\"n\">getUtility</span><span class=\"p\">(</span><span class=\"n\">ICatalog</span><span class=\"p\">)</span>\n</pre>\n<p>Let\u2019s ask the catalog about the relation from <tt>b</tt> to <tt>a</tt>:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">catalog</span><span class=\"o\">.</span><span class=\"n\">findRelations</span><span class=\"p\">({</span><span class=\"s1\">'to_id'</span><span class=\"p\">:</span> <span class=\"n\">intids</span><span class=\"o\">.</span><span class=\"n\">getId</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">[</span><span class=\"s1\">'a'</span><span class=\"p\">])}))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">l</span>\n<span class=\"p\">[</span><span class=\"o\">&lt;...</span><span class=\"n\">RelationValue</span> <span class=\"nb\">object</span> <span class=\"n\">at</span> <span class=\"o\">...&gt;</span><span class=\"p\">]</span>\n</pre>\n<p>We look at this relation object again. We indeed go the right one:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">rel</span> <span class=\"o\">=</span> <span class=\"n\">l</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">rel</span><span class=\"o\">.</span><span class=\"n\">from_object</span><span class=\"o\">.</span><span class=\"vm\">__name__</span>\n<span class=\"sa\">u</span><span class=\"s1\">'b'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">rel</span><span class=\"o\">.</span><span class=\"n\">to_object</span><span class=\"o\">.</span><span class=\"vm\">__name__</span>\n<span class=\"sa\">u</span><span class=\"s1\">'a'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">rel</span><span class=\"o\">.</span><span class=\"n\">from_path</span>\n<span class=\"sa\">u</span><span class=\"s1\">'b'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">rel</span><span class=\"o\">.</span><span class=\"n\">to_path</span>\n<span class=\"sa\">u</span><span class=\"s1\">'a'</span>\n</pre>\n<p>Asking for relations to <tt>b</tt> will result in an empty list, as no such\nrelations have been set up:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">catalog</span><span class=\"o\">.</span><span class=\"n\">findRelations</span><span class=\"p\">({</span><span class=\"s1\">'to_id'</span><span class=\"p\">:</span> <span class=\"n\">intids</span><span class=\"o\">.</span><span class=\"n\">getId</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">[</span><span class=\"s1\">'b'</span><span class=\"p\">])}))</span>\n<span class=\"p\">[]</span>\n</pre>\n<p>We can also issue more specific queries, restricting it on the\nattribute used for the relation field and the interfaces provided by\nthe related objects. Here we look for all relations between <tt>b</tt> and\n<tt>a</tt> that are stored in object attribute <tt>rel</tt> and are pointing\nfrom an object with interface <tt>IItem</tt> to another object with the\ninterface <tt>IItem</tt>:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">catalog</span><span class=\"o\">.</span><span class=\"n\">findRelations</span><span class=\"p\">({</span>\n<span class=\"o\">...</span>   <span class=\"s1\">'to_id'</span><span class=\"p\">:</span> <span class=\"n\">intids</span><span class=\"o\">.</span><span class=\"n\">getId</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">[</span><span class=\"s1\">'a'</span><span class=\"p\">]),</span>\n<span class=\"o\">...</span>   <span class=\"s1\">'from_attribute'</span><span class=\"p\">:</span> <span class=\"s1\">'rel'</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>   <span class=\"s1\">'from_interfaces_flattened'</span><span class=\"p\">:</span> <span class=\"n\">IItem</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>   <span class=\"s1\">'to_interfaces_flattened'</span><span class=\"p\">:</span> <span class=\"n\">IItem</span><span class=\"p\">}))</span>\n<span class=\"p\">[</span><span class=\"o\">&lt;...</span><span class=\"n\">RelationValue</span> <span class=\"nb\">object</span> <span class=\"n\">at</span> <span class=\"o\">...&gt;</span><span class=\"p\">]</span>\n</pre>\n<p>There are no relations stored for another attribute:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">catalog</span><span class=\"o\">.</span><span class=\"n\">findRelations</span><span class=\"p\">({</span>\n<span class=\"o\">...</span>   <span class=\"s1\">'to_id'</span><span class=\"p\">:</span> <span class=\"n\">intids</span><span class=\"o\">.</span><span class=\"n\">getId</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">[</span><span class=\"s1\">'a'</span><span class=\"p\">]),</span>\n<span class=\"o\">...</span>   <span class=\"s1\">'from_attribute'</span><span class=\"p\">:</span> <span class=\"s1\">'foo'</span><span class=\"p\">}))</span>\n<span class=\"p\">[]</span>\n</pre>\n<p>There are also no relations stored for a new interface we\u2019ll introduce\nhere:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">IFoo</span><span class=\"p\">(</span><span class=\"n\">IItem</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>   <span class=\"k\">pass</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">catalog</span><span class=\"o\">.</span><span class=\"n\">findRelations</span><span class=\"p\">({</span>\n<span class=\"o\">...</span>   <span class=\"s1\">'to_id'</span><span class=\"p\">:</span> <span class=\"n\">intids</span><span class=\"o\">.</span><span class=\"n\">getId</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">[</span><span class=\"s1\">'a'</span><span class=\"p\">]),</span>\n<span class=\"o\">...</span>   <span class=\"s1\">'from_interfaces_flattened'</span><span class=\"p\">:</span> <span class=\"n\">IItem</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>   <span class=\"s1\">'to_interfaces_flattened'</span><span class=\"p\">:</span> <span class=\"n\">IFoo</span><span class=\"p\">}))</span>\n<span class=\"p\">[]</span>\n</pre>\n</div>\n<div id=\"changing-the-relation\">\n<h3>Changing the relation</h3>\n<p>Let\u2019s create a new object <tt>c</tt>:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span><span class=\"p\">[</span><span class=\"s1\">'c'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Item</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">c_id</span> <span class=\"o\">=</span> <span class=\"n\">intids</span><span class=\"o\">.</span><span class=\"n\">getId</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">[</span><span class=\"s1\">'c'</span><span class=\"p\">])</span>\n</pre>\n<p>Nothing points to <tt>c</tt> yet:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">catalog</span><span class=\"o\">.</span><span class=\"n\">findRelations</span><span class=\"p\">({</span><span class=\"s1\">'to_id'</span><span class=\"p\">:</span> <span class=\"n\">c_id</span><span class=\"p\">}))</span>\n<span class=\"p\">[]</span>\n</pre>\n<p>We currently have a relation from <tt>b</tt> to <tt>a</tt>:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">catalog</span><span class=\"o\">.</span><span class=\"n\">findRelations</span><span class=\"p\">({</span><span class=\"s1\">'to_id'</span><span class=\"p\">:</span> <span class=\"n\">intids</span><span class=\"o\">.</span><span class=\"n\">getId</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">[</span><span class=\"s1\">'a'</span><span class=\"p\">])}))</span>\n<span class=\"p\">[</span><span class=\"o\">&lt;...</span><span class=\"n\">RelationValue</span> <span class=\"nb\">object</span> <span class=\"n\">at</span> <span class=\"o\">...&gt;</span><span class=\"p\">]</span>\n</pre>\n<p>We can change the relation to point at a new object <tt>c</tt>:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span><span class=\"p\">[</span><span class=\"s1\">'b'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">rel</span> <span class=\"o\">=</span> <span class=\"n\">RelationValue</span><span class=\"p\">(</span><span class=\"n\">c_id</span><span class=\"p\">)</span>\n</pre>\n<p>We need to send an <tt>IObjectModifiedEvent</tt> to let the catalog know we\nhave changed the relations:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">zope.event</span> <span class=\"kn\">import</span> <span class=\"n\">notify</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">zope.lifecycleevent</span> <span class=\"kn\">import</span> <span class=\"n\">ObjectModifiedEvent</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">notify</span><span class=\"p\">(</span><span class=\"n\">ObjectModifiedEvent</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">[</span><span class=\"s1\">'b'</span><span class=\"p\">]))</span>\n</pre>\n<p>We should find now a single relation from <tt>b</tt> to <tt>c</tt>:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">catalog</span><span class=\"o\">.</span><span class=\"n\">findRelations</span><span class=\"p\">({</span><span class=\"s1\">'to_id'</span><span class=\"p\">:</span> <span class=\"n\">c_id</span><span class=\"p\">}))</span>\n<span class=\"p\">[</span><span class=\"o\">&lt;...</span><span class=\"n\">RelationValue</span> <span class=\"nb\">object</span> <span class=\"n\">at</span> <span class=\"o\">...&gt;</span><span class=\"p\">]</span>\n</pre>\n<p>The relation to <tt>a</tt> should now be gone:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">catalog</span><span class=\"o\">.</span><span class=\"n\">findRelations</span><span class=\"p\">({</span><span class=\"s1\">'to_id'</span><span class=\"p\">:</span> <span class=\"n\">intids</span><span class=\"o\">.</span><span class=\"n\">getId</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">[</span><span class=\"s1\">'a'</span><span class=\"p\">])}))</span>\n<span class=\"p\">[]</span>\n</pre>\n<p>If we store the relation in a non schema field it should persist\nthe ObjectModifiedEvent.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">z3c.relationfield.event</span> <span class=\"kn\">import</span> <span class=\"n\">_setRelation</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">_setRelation</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">[</span><span class=\"s1\">'b'</span><span class=\"p\">],</span> <span class=\"s1\">'my-fancy-relation'</span><span class=\"p\">,</span> <span class=\"n\">rel_to_a</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">catalog</span><span class=\"o\">.</span><span class=\"n\">findRelations</span><span class=\"p\">({</span><span class=\"s1\">'to_id'</span><span class=\"p\">:</span> <span class=\"n\">intids</span><span class=\"o\">.</span><span class=\"n\">getId</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">[</span><span class=\"s1\">'a'</span><span class=\"p\">])}))</span>\n<span class=\"p\">[</span><span class=\"o\">&lt;...</span><span class=\"n\">RelationValue</span> <span class=\"nb\">object</span> <span class=\"n\">at</span> <span class=\"o\">...&gt;</span><span class=\"p\">]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">notify</span><span class=\"p\">(</span><span class=\"n\">ObjectModifiedEvent</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">[</span><span class=\"s1\">'b'</span><span class=\"p\">]))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">rel</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">catalog</span><span class=\"o\">.</span><span class=\"n\">findRelations</span><span class=\"p\">({</span><span class=\"s1\">'to_id'</span><span class=\"p\">:</span> <span class=\"n\">intids</span><span class=\"o\">.</span><span class=\"n\">getId</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">[</span><span class=\"s1\">'a'</span><span class=\"p\">])}))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">rel</span>\n<span class=\"p\">[</span><span class=\"o\">&lt;...</span><span class=\"n\">RelationValue</span> <span class=\"nb\">object</span> <span class=\"n\">at</span> <span class=\"o\">...&gt;</span><span class=\"p\">]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">catalog</span><span class=\"o\">.</span><span class=\"n\">unindex</span><span class=\"p\">(</span><span class=\"n\">rel</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n</pre>\n</div>\n<div id=\"removing-the-relation\">\n<h3>Removing the relation</h3>\n<p>We have a relation from <tt>b</tt> to <tt>c</tt> right now:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">catalog</span><span class=\"o\">.</span><span class=\"n\">findRelations</span><span class=\"p\">({</span><span class=\"s1\">'to_id'</span><span class=\"p\">:</span> <span class=\"n\">c_id</span><span class=\"p\">}))</span>\n<span class=\"p\">[</span><span class=\"o\">&lt;...</span><span class=\"n\">RelationValue</span> <span class=\"nb\">object</span> <span class=\"n\">at</span> <span class=\"o\">...&gt;</span><span class=\"p\">]</span>\n</pre>\n<p>We can clean up an existing relation from <tt>b</tt> to <tt>c</tt> by setting it\nto <tt>None</tt>:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span><span class=\"p\">[</span><span class=\"s1\">'b'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">rel</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n</pre>\n<p>We need to send an <tt>IObjectModifiedEvent</tt> to let the catalog know we\nhave changed the relations:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">notify</span><span class=\"p\">(</span><span class=\"n\">ObjectModifiedEvent</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">[</span><span class=\"s1\">'b'</span><span class=\"p\">]))</span>\n</pre>\n<p>Setting the relation on <tt>b</tt> to <tt>None</tt> should remove that relation\nfrom the relation catalog, so we shouldn\u2019t be able to find it anymore:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">catalog</span><span class=\"o\">.</span><span class=\"n\">findRelations</span><span class=\"p\">({</span><span class=\"s1\">'to_id'</span><span class=\"p\">:</span> <span class=\"n\">intids</span><span class=\"o\">.</span><span class=\"n\">getId</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">[</span><span class=\"s1\">'c'</span><span class=\"p\">])}))</span>\n<span class=\"p\">[]</span>\n</pre>\n<p>Let\u2019s reestablish the removed relation:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span><span class=\"p\">[</span><span class=\"s1\">'b'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">rel</span> <span class=\"o\">=</span> <span class=\"n\">RelationValue</span><span class=\"p\">(</span><span class=\"n\">c_id</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">notify</span><span class=\"p\">(</span><span class=\"n\">ObjectModifiedEvent</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">[</span><span class=\"s1\">'b'</span><span class=\"p\">]))</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">catalog</span><span class=\"o\">.</span><span class=\"n\">findRelations</span><span class=\"p\">({</span><span class=\"s1\">'to_id'</span><span class=\"p\">:</span> <span class=\"n\">c_id</span><span class=\"p\">}))</span>\n<span class=\"p\">[</span><span class=\"o\">&lt;...</span><span class=\"n\">RelationValue</span> <span class=\"nb\">object</span> <span class=\"n\">at</span> <span class=\"o\">...&gt;</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"copying-an-object-with-relations\">\n<h3>Copying an object with relations</h3>\n<p>Let\u2019s copy an object with relations:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">zope.copypastemove.interfaces</span> <span class=\"kn\">import</span> <span class=\"n\">IObjectCopier</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">IObjectCopier</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">[</span><span class=\"s1\">'b'</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">copyTo</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">)</span>\n<span class=\"sa\">u</span><span class=\"s1\">'b-2'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"sa\">u</span><span class=\"s1\">'b-2'</span> <span class=\"ow\">in</span> <span class=\"n\">root</span>\n<span class=\"kc\">True</span>\n</pre>\n<p>Two relations to <tt>c</tt> can now be found, one from the original, and\nthe other from the copy:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">catalog</span><span class=\"o\">.</span><span class=\"n\">findRelations</span><span class=\"p\">({</span><span class=\"s1\">'to_id'</span><span class=\"p\">:</span> <span class=\"n\">c_id</span><span class=\"p\">}))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">)</span>\n<span class=\"mi\">2</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">l</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">from_path</span>\n<span class=\"sa\">u</span><span class=\"s1\">'b'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">l</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">from_path</span>\n<span class=\"sa\">u</span><span class=\"s1\">'b-2'</span>\n</pre>\n</div>\n<div id=\"relations-are-sortable\">\n<h3>Relations are sortable</h3>\n<p>Relations are sorted by default on a combination of the relation name,\nthe path of the object the relation is one and the path of the object\nthe relation is pointing to.</p>\n<p>Let\u2019s query all relations availble right now and sort them:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">catalog</span><span class=\"o\">.</span><span class=\"n\">findRelations</span><span class=\"p\">())</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">)</span>\n<span class=\"mi\">2</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">l</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">from_attribute</span>\n<span class=\"s1\">'rel'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">l</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">from_attribute</span>\n<span class=\"s1\">'rel'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">l</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">from_path</span>\n<span class=\"sa\">u</span><span class=\"s1\">'b'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">l</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">from_path</span>\n<span class=\"sa\">u</span><span class=\"s1\">'b-2'</span>\n</pre>\n</div>\n<div id=\"removing-an-object-with-relations\">\n<h3>Removing an object with relations</h3>\n<p>We will remove <tt><span class=\"pre\">b-2</span></tt> again. Its relation should automatically be remove\nfrom the catalog:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">del</span> <span class=\"n\">root</span><span class=\"p\">[</span><span class=\"s1\">'b-2'</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">catalog</span><span class=\"o\">.</span><span class=\"n\">findRelations</span><span class=\"p\">({</span><span class=\"s1\">'to_id'</span><span class=\"p\">:</span> <span class=\"n\">c_id</span><span class=\"p\">}))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">)</span>\n<span class=\"mi\">1</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">l</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">from_path</span>\n<span class=\"sa\">u</span><span class=\"s1\">'b'</span>\n</pre>\n</div>\n<div id=\"breaking-a-relation\">\n<h3>Breaking a relation</h3>\n<p>We have a relation from <tt>b</tt> to <tt>c</tt> right now:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">catalog</span><span class=\"o\">.</span><span class=\"n\">findRelations</span><span class=\"p\">({</span><span class=\"s1\">'to_id'</span><span class=\"p\">:</span> <span class=\"n\">c_id</span><span class=\"p\">}))</span>\n<span class=\"p\">[</span><span class=\"o\">&lt;...</span><span class=\"n\">RelationValue</span> <span class=\"nb\">object</span> <span class=\"n\">at</span> <span class=\"o\">...&gt;</span><span class=\"p\">]</span>\n</pre>\n<p>We have no broken relations:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">catalog</span><span class=\"o\">.</span><span class=\"n\">findRelations</span><span class=\"p\">({</span><span class=\"s1\">'to_id'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">}))</span>\n<span class=\"p\">[]</span>\n</pre>\n<p>The relation isn\u2019t broken:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">rel</span><span class=\"o\">.</span><span class=\"n\">isBroken</span><span class=\"p\">()</span>\n<span class=\"kc\">False</span>\n</pre>\n<p>We are now going to break this relation by removing <tt>c</tt>:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">del</span> <span class=\"n\">root</span><span class=\"p\">[</span><span class=\"s1\">'c'</span><span class=\"p\">]</span>\n</pre>\n<p>The relation is broken now:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">rel</span><span class=\"o\">.</span><span class=\"n\">isBroken</span><span class=\"p\">()</span>\n<span class=\"kc\">True</span>\n</pre>\n<p>The original relation still has a <tt>to_path</tt>:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">rel</span><span class=\"o\">.</span><span class=\"n\">to_path</span>\n<span class=\"sa\">u</span><span class=\"s1\">'c'</span>\n</pre>\n<p>It\u2019s broken however as there is no <tt>to_object</tt>:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">rel</span><span class=\"o\">.</span><span class=\"n\">to_object</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span>\n<span class=\"kc\">True</span>\n</pre>\n<p>The <tt>to_id</tt> is also gone:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">rel</span><span class=\"o\">.</span><span class=\"n\">to_id</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span>\n<span class=\"kc\">True</span>\n</pre>\n<p>We cannot find the broken relation in the catalog this way as it\u2019s not\npointing to <tt>c_id</tt> anymore:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">catalog</span><span class=\"o\">.</span><span class=\"n\">findRelations</span><span class=\"p\">({</span><span class=\"s1\">'to_id'</span><span class=\"p\">:</span> <span class=\"n\">c_id</span><span class=\"p\">}))</span>\n<span class=\"p\">[]</span>\n</pre>\n<p>We can however find it by searching for relations that have a\n<tt>to_id</tt> of <tt>None</tt>:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">catalog</span><span class=\"o\">.</span><span class=\"n\">findRelations</span><span class=\"p\">({</span><span class=\"s1\">'to_id'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">}))</span>\n<span class=\"p\">[</span><span class=\"o\">&lt;...</span><span class=\"n\">RelationValue</span> <span class=\"nb\">object</span> <span class=\"n\">at</span> <span class=\"o\">...&gt;</span><span class=\"p\">]</span>\n</pre>\n<p>A broken relation isn\u2019t equal to <tt>None</tt> (this was a bug):</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">rel</span> <span class=\"o\">==</span> <span class=\"kc\">None</span>\n<span class=\"kc\">False</span>\n</pre>\n</div>\n<div id=\"relationchoice\">\n<h3>RelationChoice</h3>\n<p>A <tt>RelationChoice</tt> field is much like an ordinary <tt>Relation</tt> field\nbut can be used to render a special widget that allows a choice of\nselections.</p>\n<p>We will first demonstrate a <tt>RelationChoice</tt> field has the same effect\nas a <tt>Relation</tt> field itself:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">z3c.relationfield</span> <span class=\"kn\">import</span> <span class=\"n\">RelationChoice</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">IChoiceItem</span><span class=\"p\">(</span><span class=\"n\">Interface</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>   <span class=\"n\">rel</span> <span class=\"o\">=</span> <span class=\"n\">RelationChoice</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s2\">\"Relation\"</span><span class=\"p\">,</span> <span class=\"n\">values</span><span class=\"o\">=</span><span class=\"p\">[])</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@implementer</span><span class=\"p\">(</span><span class=\"n\">IChoiceItem</span><span class=\"p\">,</span> <span class=\"n\">IHasRelations</span><span class=\"p\">)</span>\n<span class=\"o\">...</span> <span class=\"k\">class</span> <span class=\"nc\">ChoiceItem</span><span class=\"p\">(</span><span class=\"n\">Persistent</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>   <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rel</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n</pre>\n<p>Let\u2019s create an object to point the relation to:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span><span class=\"p\">[</span><span class=\"s1\">'some_object'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Item</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">some_object_id</span> <span class=\"o\">=</span> <span class=\"n\">intids</span><span class=\"o\">.</span><span class=\"n\">getId</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">[</span><span class=\"s1\">'some_object'</span><span class=\"p\">])</span>\n</pre>\n<p>And let\u2019s establish the relation:</p>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>.. code-block::</th><td><p>python</p>\n<pre>\n&gt;&gt;&gt; choice_item = ChoiceItem()\n&gt;&gt;&gt; choice_item.rel = RelationValue(some_object_id)\n&gt;&gt;&gt; root['choice_item'] = choice_item\n</pre>\n</td>\n</tr>\n</tbody>\n</table>\n<p>We can query for this relation now:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">catalog</span><span class=\"o\">.</span><span class=\"n\">findRelations</span><span class=\"p\">({</span><span class=\"s1\">'to_id'</span><span class=\"p\">:</span> <span class=\"n\">some_object_id</span><span class=\"p\">}))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">l</span>\n<span class=\"p\">[</span><span class=\"o\">&lt;...</span><span class=\"n\">RelationValue</span> <span class=\"nb\">object</span> <span class=\"n\">at</span> <span class=\"o\">...&gt;</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"relationlist\">\n<h3>RelationList</h3>\n<p>Let\u2019s now experiment with the <tt>RelationList</tt> field which can be used\nto maintain a list of relations:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">z3c.relationfield</span> <span class=\"kn\">import</span> <span class=\"n\">RelationList</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">IMultiItem</span><span class=\"p\">(</span><span class=\"n\">Interface</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>   <span class=\"n\">rel</span> <span class=\"o\">=</span> <span class=\"n\">RelationList</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s2\">\"Relation\"</span><span class=\"p\">)</span>\n</pre>\n<p>We also define a class <tt>MultiItem</tt> that implements both\n<tt>IMultiItem</tt> and the special\n<tt>z3c.relationfield.interfaces.IHasRelations</tt> interface:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@implementer</span><span class=\"p\">(</span><span class=\"n\">IMultiItem</span><span class=\"p\">,</span> <span class=\"n\">IHasRelations</span><span class=\"p\">)</span>\n<span class=\"o\">...</span> <span class=\"k\">class</span> <span class=\"nc\">MultiItem</span><span class=\"p\">(</span><span class=\"n\">Persistent</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>   <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rel</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n</pre>\n<p>We set up a few object we can then create relations between:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span><span class=\"p\">[</span><span class=\"s1\">'multi1'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">MultiItem</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span><span class=\"p\">[</span><span class=\"s1\">'multi2'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">MultiItem</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span><span class=\"p\">[</span><span class=\"s1\">'multi3'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">MultiItem</span><span class=\"p\">()</span>\n</pre>\n<p>Let\u2019s create a relation from <tt>multi1</tt> to both <tt>multi2</tt> and\n<tt>multi3</tt>:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">multi1_id</span> <span class=\"o\">=</span> <span class=\"n\">intids</span><span class=\"o\">.</span><span class=\"n\">getId</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">[</span><span class=\"s1\">'multi1'</span><span class=\"p\">])</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">multi2_id</span> <span class=\"o\">=</span> <span class=\"n\">intids</span><span class=\"o\">.</span><span class=\"n\">getId</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">[</span><span class=\"s1\">'multi2'</span><span class=\"p\">])</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">multi3_id</span> <span class=\"o\">=</span> <span class=\"n\">intids</span><span class=\"o\">.</span><span class=\"n\">getId</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">[</span><span class=\"s1\">'multi3'</span><span class=\"p\">])</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span><span class=\"p\">[</span><span class=\"s1\">'multi1'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">rel</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">RelationValue</span><span class=\"p\">(</span><span class=\"n\">multi2_id</span><span class=\"p\">),</span>\n<span class=\"o\">...</span>                       <span class=\"n\">RelationValue</span><span class=\"p\">(</span><span class=\"n\">multi3_id</span><span class=\"p\">)]</span>\n</pre>\n<p>We need to notify that we modified the ObjectModifiedEvent</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">notify</span><span class=\"p\">(</span><span class=\"n\">ObjectModifiedEvent</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">[</span><span class=\"s1\">'multi1'</span><span class=\"p\">]))</span>\n</pre>\n<p>Now that this is set up, let\u2019s verify whether we can find the\nproper relations in in the catalog:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">catalog</span><span class=\"o\">.</span><span class=\"n\">findRelations</span><span class=\"p\">({</span><span class=\"s1\">'to_id'</span><span class=\"p\">:</span> <span class=\"n\">multi2_id</span><span class=\"p\">})))</span>\n<span class=\"mi\">1</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">catalog</span><span class=\"o\">.</span><span class=\"n\">findRelations</span><span class=\"p\">({</span><span class=\"s1\">'to_id'</span><span class=\"p\">:</span> <span class=\"n\">multi3_id</span><span class=\"p\">})))</span>\n<span class=\"mi\">1</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">catalog</span><span class=\"o\">.</span><span class=\"n\">findRelations</span><span class=\"p\">({</span><span class=\"s1\">'from_id'</span><span class=\"p\">:</span> <span class=\"n\">multi1_id</span><span class=\"p\">})))</span>\n<span class=\"mi\">2</span>\n</pre>\n</div>\n<div id=\"temporary-relations\">\n<h3>Temporary relations</h3>\n<p>If we have an import procedure where we import relations from some\nexternal source such as an XML file, it may be that we read a relation\nthat points to an object that does not yet exist as it is yet to be\nimported. We provide a special <tt>TemporaryRelationValue</tt> for this\ncase.  A <tt>TemporaryRelationValue</tt> just contains the path of what it\nis pointing to, but does not resolve it yet. Let\u2019s use\n<tt>TemporaryRelationValue</tt> in a new object, creating a relation to\n<tt>a</tt>:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">z3c.relationfield</span> <span class=\"kn\">import</span> <span class=\"n\">TemporaryRelationValue</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span><span class=\"p\">[</span><span class=\"s1\">'d'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Item</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span><span class=\"p\">[</span><span class=\"s1\">'d'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">rel</span> <span class=\"o\">=</span> <span class=\"n\">TemporaryRelationValue</span><span class=\"p\">(</span><span class=\"s1\">'a'</span><span class=\"p\">)</span>\n</pre>\n<p>A modification event does not actually get this relation cataloged:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">before</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">catalog</span><span class=\"o\">.</span><span class=\"n\">findRelations</span><span class=\"p\">({</span><span class=\"s1\">'to_id'</span><span class=\"p\">:</span> <span class=\"n\">a_id</span><span class=\"p\">}))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">notify</span><span class=\"p\">(</span><span class=\"n\">ObjectModifiedEvent</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">[</span><span class=\"s1\">'d'</span><span class=\"p\">]))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">after</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">catalog</span><span class=\"o\">.</span><span class=\"n\">findRelations</span><span class=\"p\">({</span><span class=\"s1\">'to_id'</span><span class=\"p\">:</span> <span class=\"n\">a_id</span><span class=\"p\">}))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">before</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">after</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n</pre>\n<p>We will now convert all temporary relations on <tt>d</tt> to real ones:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">z3c.relationfield</span> <span class=\"kn\">import</span> <span class=\"n\">realize_relations</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">realize_relations</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">[</span><span class=\"s1\">'d'</span><span class=\"p\">])</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">notify</span><span class=\"p\">(</span><span class=\"n\">ObjectModifiedEvent</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">[</span><span class=\"s1\">'d'</span><span class=\"p\">]))</span>\n</pre>\n<p>We can see the real relation object now:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span><span class=\"p\">[</span><span class=\"s1\">'d'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">rel</span>\n<span class=\"o\">&lt;...</span><span class=\"n\">RelationValue</span> <span class=\"nb\">object</span> <span class=\"n\">at</span> <span class=\"o\">...&gt;</span>\n</pre>\n<p>The relation will also now show up in the catalog:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">after2</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">catalog</span><span class=\"o\">.</span><span class=\"n\">findRelations</span><span class=\"p\">({</span><span class=\"s1\">'to_id'</span><span class=\"p\">:</span> <span class=\"n\">a_id</span><span class=\"p\">}))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">after2</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">before</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n</pre>\n<p>Temporary relation values also work with <tt>RelationList</tt> objects:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span><span class=\"p\">[</span><span class=\"s1\">'multi_temp'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">MultiItem</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span><span class=\"p\">[</span><span class=\"s1\">'multi_temp'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">rel</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">TemporaryRelationValue</span><span class=\"p\">(</span><span class=\"s1\">'a'</span><span class=\"p\">)]</span>\n</pre>\n<p>Let\u2019s convert this to a real relation:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">realize_relations</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">[</span><span class=\"s1\">'multi_temp'</span><span class=\"p\">])</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">notify</span><span class=\"p\">(</span><span class=\"n\">ObjectModifiedEvent</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">[</span><span class=\"s1\">'multi_temp'</span><span class=\"p\">]))</span>\n</pre>\n<p>Again we can see the real relation object when we look at it:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span><span class=\"p\">[</span><span class=\"s1\">'multi_temp'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">rel</span>\n<span class=\"p\">[</span><span class=\"o\">&lt;...</span><span class=\"n\">RelationValue</span> <span class=\"nb\">object</span> <span class=\"n\">at</span> <span class=\"o\">...&gt;</span><span class=\"p\">]</span>\n</pre>\n<p>And we will now see this new relation appear in the catalog:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">after3</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">catalog</span><span class=\"o\">.</span><span class=\"n\">findRelations</span><span class=\"p\">({</span><span class=\"s1\">'to_id'</span><span class=\"p\">:</span> <span class=\"n\">a_id</span><span class=\"p\">}))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">after3</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">after2</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n</pre>\n</div>\n<div id=\"broken-temporary-relations\">\n<h3>Broken temporary relations</h3>\n<p>Let\u2019s create another temporary relation, this time a broken one that\ncannot be resolved:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span><span class=\"p\">[</span><span class=\"s1\">'e'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Item</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span><span class=\"p\">[</span><span class=\"s1\">'e'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">rel</span> <span class=\"o\">=</span> <span class=\"n\">TemporaryRelationValue</span><span class=\"p\">(</span><span class=\"s1\">'nonexistent'</span><span class=\"p\">)</span>\n</pre>\n<p>Let\u2019s try realizing this relation:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">realize_relations</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">[</span><span class=\"s1\">'e'</span><span class=\"p\">])</span>\n</pre>\n<p>We end up with a broken relation:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span><span class=\"p\">[</span><span class=\"s1\">'e'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">rel</span><span class=\"o\">.</span><span class=\"n\">isBroken</span><span class=\"p\">()</span>\n<span class=\"kc\">True</span>\n</pre>\n<p>It\u2019s pointing to the nonexistent path:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span><span class=\"p\">[</span><span class=\"s1\">'e'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">rel</span><span class=\"o\">.</span><span class=\"n\">to_path</span>\n<span class=\"s1\">'nonexistent'</span>\n</pre>\n</div>\n<div id=\"setting-up-a-releation-catalog\">\n<h3>Setting up a releation catalog</h3>\n<p>This package provides a RelationCatalog initialized with a set of indexes commonly useful for queries on RelationValue objects.\nThe default indexes are <cite>from_id</cite>, <cite>to_id</cite>, <cite>from_attribute</cite>, <cite>from_interfaces_flattened</cite> and <cite>to_interfaces_flattened</cite>.</p>\n<p>Sometimes it is needed to define custom indexes or use less than the default ones.\nThe <cite>zc.relationfield.index.RelationCatalog</cite> class can be initialized with a list of dicts with keys <cite>element</cite> and <cite>kwargs</cite> to be passed to RelationCatalog <cite>addValueIndex</cite> method.\nAs <cite>element</cite> in general the attribute on the <cite>IRelationValue</cite> like <cite>IRelationValue[\u2018from_id\u2019]</cite> is expected.\nHowever, if theres a subclass of <cite>IRelationValue</cite> is used with additional fields, those fields can be added here as indexes.</p>\n</div>\n</div>\n<div id=\"changes\">\n<h2>CHANGES</h2>\n<div id=\"id1\">\n<h3>0.9.0 (2019-09-15)</h3>\n<p>New features:</p>\n<ul>\n<li>Provide IRelationBrokenEvent to be able to distinguish the event when\nsubscribing to IObjectModifiedEvent\n[vangheem]</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>0.8.0 (2019-02-13)</h3>\n<p>New features:</p>\n<ul>\n<li>Adresses <a href=\"https://github.com/zopefoundation/z3c.relationfield/issues/4\" rel=\"nofollow\">Still uses BTrees wrongly, screws up people changing Interfaces</a>, allows third party software to define which indexes are used.\n[jensens]</li>\n</ul>\n<p>Bug fixes:</p>\n<ul>\n<li>Fix DeprecationWarnings in <tt>tests.py</tt>.\n[jensens]</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>0.7.1 (2018-11-08)</h3>\n<ul>\n<li>Python 3 compatibility: use the implementer decorator and fix ordering\n[ale-rt]</li>\n<li>Python 3 compatibility: Make <tt>RelationValue</tt> hashable. [sallner]</li>\n<li>Renamed <tt><span class=\"pre\">README.txt``to</span> ``README.rst</tt> and <tt>CHANGES.txt</tt> to\n<tt>CHANGES.rst</tt>.\n[thet]</li>\n<li>Update buildout / travis config\n[tomgross]</li>\n<li>Fix issue where relations are cleared on modify if they are not stored as\nan class attribute. Usecase see <a href=\"https://github.com/plone/Products.CMFPlone/issues/2384\" rel=\"nofollow\">https://github.com/plone/Products.CMFPlone/issues/2384</a>\n[tomgross]</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3>0.7 (2015-03-13)</h3>\n<ul>\n<li>Remove dependencies on zope.app.*\n[davisagli]</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3>0.6.3 (2014-04-15)</h3>\n<ul>\n<li>Remove dependency on grok.\n[pbauer, jensens]</li>\n</ul>\n</div>\n<div id=\"id6\">\n<h3>0.6.2 (2012-12-06)</h3>\n<ul>\n<li>Updated test setup and test to run with current versions of dependent\npackages, thus running with Python 2.6, too.</li>\n<li>Added missing (test) dependencies.</li>\n<li>Rename __neq__ method to __ne__ since __neq__ is not the right builtin\nname for != handlers.</li>\n</ul>\n</div>\n<div id=\"id7\">\n<h3>0.6.1 (2009-10-11)</h3>\n<ul>\n<li>Fixes broken release.</li>\n</ul>\n</div>\n<div id=\"id8\">\n<h3>0.6 (2009-10-11)</h3>\n<ul>\n<li>Ensure that the value_type of a RelationList is not overwritten to be \u2018None\u2019\nwhen the field is constructed.</li>\n</ul>\n</div>\n<div id=\"id9\">\n<h3>0.5 (2009-06-30)</h3>\n<ul>\n<li>Move lxml and schema2xml dependencies to an [xml] extra so that people can\nuse this package without having to install lxml, which still causes issues\non some platforms. If z3c.schema2xml and lxml are not importable, the\nrelevant adapters will not be defined, but everything else will still work.</li>\n<li>Subscribe to IIntIdAddedEvent instead of IObjectAddedEvent to prevent\nerrors due to subscriber ordering.</li>\n</ul>\n</div>\n<div id=\"id10\">\n<h3>0.4.3 (2009-06-04)</h3>\n<ul>\n<li>Add missing dependency for lxml.</li>\n</ul>\n</div>\n<div id=\"id11\">\n<h3>0.4.2 (2009-04-22)</h3>\n<ul>\n<li>Prevent the event failures from failing when utilities are missing or when\nobjects do not implement IContained.</li>\n</ul>\n</div>\n<div id=\"id12\">\n<h3>0.4.1 (2009-02-12)</h3>\n<ul>\n<li>Don\u2019t handle <tt>IObjectModified</tt> events for objects that do not yet\nhave a parent. There is no need to do so anyway, as these objects cannot\nhave outgoing relations indexed.</li>\n</ul>\n</div>\n<div id=\"id13\">\n<h3>0.4 (2009-02-10)</h3>\n<ul>\n<li>Introduce a <tt>RelationChoice</tt> field that behaves like\n<tt>schema.Choice</tt> but tracks relations. In combination with a source\n(such as created by <tt>RelationSourceFactory</tt> provided by\n<tt>z3c.relationfieldui</tt>) this can be used to create drop-down\nselections for relations.</li>\n<li>Clarify the way comparing and sorting of <tt>RelationValue</tt> objects is\ndone in order to better support choice support.</li>\n</ul>\n</div>\n<div id=\"id14\">\n<h3>0.3.2 (2009-01-21)</h3>\n<ul>\n<li>When a relation is broken, properly re-catalog things.</li>\n</ul>\n</div>\n<div id=\"id15\">\n<h3>0.3.1 (2009-01-20)</h3>\n<ul>\n<li>Introduce sensible sort order for relations, based on a\n<tt>(from_attribute, from_path, to_path)</tt> tuple.</li>\n<li>Relations will now never compare to <tt>None</tt>.</li>\n</ul>\n</div>\n<div id=\"id16\">\n<h3>0.3 (2009-01-19)</h3>\n<ul>\n<li><p>Introduce two new interfaces: <tt>IHasOutgoingRelations</tt> and\n<tt>IHasIncomingRelations</tt>. <tt>IHasOutgoingRelations</tt> should be provided\nby objects that actually have relations set on them, so that\nthey can be properly cataloged. <tt>IHasIncomingRelations</tt> should be\nset on objects that can be related to, so that broken relations\ncan be properly tracked. <tt>IHasRelations</tt> now extends both,\nso if you provide those on your object you have an object that can\nhave both outgoing as well as incoming relations.</p>\n</li>\n<li><p>Improve broken relations support. When you now break a relation (by\nremoving the relation target), <tt>to_id</tt> and <tt>to_object</tt> become\n<tt>None</tt>. <tt>to_path</tt> however will remain the path that the relation\nlast pointed to. <tt>TemporaryRelation</tt> objects that when realized\nare broken relations can also be created.</p>\n<p>You can also for broken status by calling <tt>isBroken</tt> on a\nrelation.</p>\n</li>\n<li><p>The signature of the top-level function <tt>create_relation</tt>\nchanged. It used to take the object to which the relation was to be\ncreated, but should now get the path (in <tt>IObjectPath</tt> terms).\n<tt>create_relation</tt> will now create a broken relation object if the\npath cannot be resolved.</p>\n</li>\n</ul>\n</div>\n<div id=\"id17\">\n<h3>0.2 (2009-01-08)</h3>\n<ul>\n<li>Added support for <tt>RelationList</tt> fields. This allows one to\nmaintain a list of <tt>RelationValue</tt> objects that will be cataloged\nlike the regular <tt>Relation</tt> fields.</li>\n<li>Get rid of <tt>IRelationInfo</tt> adapter requirement. Just define a\n<tt>create_relation</tt> function that does the same work.</li>\n<li>When looking for relations on an object be more tolerant if those\ncannot be found (just skip them) - this can happen when a schema is\nchanged.</li>\n</ul>\n</div>\n<div id=\"id18\">\n<h3>0.1 (2008-12-05)</h3>\n<ul>\n<li>Initial public release.</li>\n</ul>\n</div>\n</div>\n<div id=\"download\">\n<h2>Download</h2>\n</div>\n\n          </div>"}, "last_serial": 5832911, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "b22e6117cc865c68ec0c3310883b5380", "sha256": "f1abaece11a54bd2cc14747abe33a42ad6606c4b6989db05d75aad3d4c18f077"}, "downloads": -1, "filename": "z3c.relationfield-0.1.tar.gz", "has_sig": false, "md5_digest": "b22e6117cc865c68ec0c3310883b5380", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11637, "upload_time": "2008-12-05T17:53:18", "upload_time_iso_8601": "2008-12-05T17:53:18Z", "url": "https://files.pythonhosted.org/packages/45/f5/96b350f623906fd1a3d6247eaeed7fb87f1a0954ce93e4c967ce911c0b54/z3c.relationfield-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "763abd864ec46a0407565e57a81b2a61", "sha256": "f602cd2aae4a96b792bcd3d9a3a8b81da246a878241a7b7beac469beceecbcca"}, "downloads": -1, "filename": "z3c.relationfield-0.2.tar.gz", "has_sig": false, "md5_digest": "763abd864ec46a0407565e57a81b2a61", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13045, "upload_time": "2009-01-08T18:43:16", "upload_time_iso_8601": "2009-01-08T18:43:16Z", "url": "https://files.pythonhosted.org/packages/ab/14/bfd7f19d05584eefe138ebe04c0d65807edc0e22d933d34a852da2e44f6c/z3c.relationfield-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "6999716505cc344ea8f26788d9ce2418", "sha256": "c4109085fcd4eca6c92a282da469e6f1d9e9ca2f75ec092ffa4580133afafd41"}, "downloads": -1, "filename": "z3c.relationfield-0.3.tar.gz", "has_sig": false, "md5_digest": "6999716505cc344ea8f26788d9ce2418", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18681, "upload_time": "2009-01-19T20:11:38", "upload_time_iso_8601": "2009-01-19T20:11:38Z", "url": "https://files.pythonhosted.org/packages/2e/d0/c39367c227ec84773607b5530b624edd50106e438c33a3ed2bffa102d050/z3c.relationfield-0.3.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "039c8b6430f1cc4df22c9296ecfd982c", "sha256": "463e5ed2ff4f32d470ae15b67fbaf86f1b689bf522c960df6c9c103c6bdcf009"}, "downloads": -1, "filename": "z3c.relationfield-0.3.1.tar.gz", "has_sig": false, "md5_digest": "039c8b6430f1cc4df22c9296ecfd982c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19184, "upload_time": "2009-01-20T21:13:47", "upload_time_iso_8601": "2009-01-20T21:13:47Z", "url": "https://files.pythonhosted.org/packages/f7/b9/29e8e96e633843d00f291c2bf02d5a465ccb6f1ef80c6cf3780d73c61eba/z3c.relationfield-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "5fdac07d08f5abfae7020978d8cc41b4", "sha256": "0d4e1e2637fe29796a58260f16ec651c0796d1b4547eb9d7f9bc0e44f0fd0028"}, "downloads": -1, "filename": "z3c.relationfield-0.3.2.tar.gz", "has_sig": false, "md5_digest": "5fdac07d08f5abfae7020978d8cc41b4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19552, "upload_time": "2009-01-21T18:21:09", "upload_time_iso_8601": "2009-01-21T18:21:09Z", "url": "https://files.pythonhosted.org/packages/6e/92/c2b72b4f6dfca45ef479bae8a47ed6418c1295f643f9d6478018938dea10/z3c.relationfield-0.3.2.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "4846459b751fd8dc23bcdd00c7a51c90", "sha256": "a7cc9fe320637cd70c37d9dabaf1c7190f3bb7c2922c9fa9f68f141bcec71fc6"}, "downloads": -1, "filename": "z3c.relationfield-0.4.tar.gz", "has_sig": false, "md5_digest": "4846459b751fd8dc23bcdd00c7a51c90", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21307, "upload_time": "2009-02-10T20:38:14", "upload_time_iso_8601": "2009-02-10T20:38:14.181191Z", "url": "https://files.pythonhosted.org/packages/c9/69/2263113937133821500579caebf040e23fd9e2205ca567e2b2536f4030df/z3c.relationfield-0.4.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "493d1374118617bca6e8e65c89b01244", "sha256": "b6bb4673e73349c609d109764863781db18fa1baa2d71d15343cbb919b5eb66e"}, "downloads": -1, "filename": "z3c.relationfield-0.4.1.tar.gz", "has_sig": false, "md5_digest": "493d1374118617bca6e8e65c89b01244", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21559, "upload_time": "2009-02-12T17:20:34", "upload_time_iso_8601": "2009-02-12T17:20:34.034131Z", "url": "https://files.pythonhosted.org/packages/92/33/b848404a3f85eed0487cd7b5ee8d5f0f51129c5dc61342735500af3784cc/z3c.relationfield-0.4.1.tar.gz", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "bcf68352216403586392bb02fa09071e", "sha256": "598c53afee790a5dbc9a3f71415bde3478dfb7e0cbfbd5fdf6687f2d909715f9"}, "downloads": -1, "filename": "z3c.relationfield-0.4.2.tar.gz", "has_sig": false, "md5_digest": "bcf68352216403586392bb02fa09071e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23562, "upload_time": "2009-04-22T15:59:54", "upload_time_iso_8601": "2009-04-22T15:59:54.642799Z", "url": "https://files.pythonhosted.org/packages/f7/b3/5cbf6a354afc3adba0c305fe37608f5f2dc838e248ba65dca8657df5a16c/z3c.relationfield-0.4.2.tar.gz", "yanked": false}], "0.4.3": [{"comment_text": "", "digests": {"md5": "cee2229f738828d7bdb01f13fcf0c421", "sha256": "b761912e937d1695e56fd6debaae8bb8e0fb6f1ff80648fa7f4e71572a8fdf87"}, "downloads": -1, "filename": "z3c.relationfield-0.4.3.tar.gz", "has_sig": false, "md5_digest": "cee2229f738828d7bdb01f13fcf0c421", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23625, "upload_time": "2009-06-04T09:02:39", "upload_time_iso_8601": "2009-06-04T09:02:39.419701Z", "url": "https://files.pythonhosted.org/packages/63/cf/37c0ae2ed7493a4d4e713463bf34465744b4d3843a3ac031f3bd8039dcff/z3c.relationfield-0.4.3.tar.gz", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "91433e534fa38c798d5cee7eb133f0cc", "sha256": "0f0da5d188037ed748c21821c7352a35f6ebd39d2ec75fc1fb4000c5469eb3e3"}, "downloads": -1, "filename": "z3c.relationfield-0.5.tar.gz", "has_sig": false, "md5_digest": "91433e534fa38c798d5cee7eb133f0cc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24528, "upload_time": "2009-06-30T18:04:23", "upload_time_iso_8601": "2009-06-30T18:04:23.575677Z", "url": "https://files.pythonhosted.org/packages/56/df/a7572cda7ff2d0851c2991bf5d8fbc1724fd71a3a4792faef8ffadf759f5/z3c.relationfield-0.5.tar.gz", "yanked": false}], "0.5dev": [{"comment_text": "", "digests": {"md5": "952aef78e0648f9765432604a1b96607", "sha256": "64bb8c27864da96d1dc2547839c0eba84aa9590ad62fffc6036f523b2803fbda"}, "downloads": -1, "filename": "z3c.relationfield-0.5dev.tar.gz", "has_sig": false, "md5_digest": "952aef78e0648f9765432604a1b96607", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24346, "upload_time": "2009-06-30T17:57:16", "upload_time_iso_8601": "2009-06-30T17:57:16.734423Z", "url": "https://files.pythonhosted.org/packages/74/dc/539c81c3a6ee64c4a48214899b484f161eec6b9ac944f91184c0209fd3ce/z3c.relationfield-0.5dev.tar.gz", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "7f1b47698e2dca4999fc2a3eca0d9c4b", "sha256": "57e645fa9a717b2e4825723f49afec97c84df27de99747bc023665e63d1f3904"}, "downloads": -1, "filename": "z3c.relationfield-0.6.tar.gz", "has_sig": false, "md5_digest": "7f1b47698e2dca4999fc2a3eca0d9c4b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18848, "upload_time": "2009-10-11T12:24:03", "upload_time_iso_8601": "2009-10-11T12:24:03.792739Z", "url": "https://files.pythonhosted.org/packages/0b/4e/ea2b134efc7932ceedf69d110dafc4daaea059f70ea5203620167ef32b1a/z3c.relationfield-0.6.tar.gz", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "b805a130d49d5d2a49f1a9333361990c", "sha256": "a44879933340133aa27248100d98d90ece7d2b8750fbed4507812d6d0296539c"}, "downloads": -1, "filename": "z3c.relationfield-0.6.1.tar.gz", "has_sig": false, "md5_digest": "b805a130d49d5d2a49f1a9333361990c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24331, "upload_time": "2009-10-11T14:09:21", "upload_time_iso_8601": "2009-10-11T14:09:21.567032Z", "url": "https://files.pythonhosted.org/packages/82/ea/f485d59f18da59fb7280323672bb4c5eada3690681b70c6cead6e976fa72/z3c.relationfield-0.6.1.tar.gz", "yanked": false}], "0.6.2": [{"comment_text": "", "digests": {"md5": "e34a6230cdfbd4a0bc1c90a77600e0e7", "sha256": "1de65310fb447228034720ef5ce35ef89e6545bf28e60ea67dc222d649fea138"}, "downloads": -1, "filename": "z3c.relationfield-0.6.2.zip", "has_sig": false, "md5_digest": "e34a6230cdfbd4a0bc1c90a77600e0e7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36851, "upload_time": "2012-12-06T18:52:32", "upload_time_iso_8601": "2012-12-06T18:52:32.722742Z", "url": "https://files.pythonhosted.org/packages/5e/cf/735b0cf9ffbdef84a355b86b35ee770020f2de95f5edf7defd910bb1b229/z3c.relationfield-0.6.2.zip", "yanked": false}], "0.6.3": [{"comment_text": "", "digests": {"md5": "916efc122551841bc692d29cdfca2807", "sha256": "6098ab7752b2cfa0c985340aa35157063300c0d90f5042ca7a851bbb133d740c"}, "downloads": -1, "filename": "z3c.relationfield-0.6.3.zip", "has_sig": false, "md5_digest": "916efc122551841bc692d29cdfca2807", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 43392, "upload_time": "2014-04-15T09:24:22", "upload_time_iso_8601": "2014-04-15T09:24:22.806190Z", "url": "https://files.pythonhosted.org/packages/a5/26/f8a6fe213dae0a11e014a26d9ce9bb0dab37a4ff8f47c04981af618d97c4/z3c.relationfield-0.6.3.zip", "yanked": false}], "0.7": [{"comment_text": "", "digests": {"md5": "11ba0295f69e1055e2d6b31a17e712eb", "sha256": "8ae295485deac495ae43a81cc23a0e89e9daa7ad00b9729457e22502960131ff"}, "downloads": -1, "filename": "z3c.relationfield-0.7.zip", "has_sig": false, "md5_digest": "11ba0295f69e1055e2d6b31a17e712eb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 43591, "upload_time": "2015-03-13T14:05:33", "upload_time_iso_8601": "2015-03-13T14:05:33.915640Z", "url": "https://files.pythonhosted.org/packages/da/af/c474423d05d7708b65ae195406e58efd850db724f0643f3f7da219208f1d/z3c.relationfield-0.7.zip", "yanked": false}], "0.7.1": [{"comment_text": "", "digests": {"md5": "087f0b233d7f6b4b63ceea18044a12bc", "sha256": "81c78c1ab9b9b0e808c41f962711cb307865aa266c01ff18e4a06e976ad5410b"}, "downloads": -1, "filename": "z3c.relationfield-0.7.1.tar.gz", "has_sig": false, "md5_digest": "087f0b233d7f6b4b63ceea18044a12bc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34323, "upload_time": "2018-11-08T05:27:18", "upload_time_iso_8601": "2018-11-08T05:27:18.771683Z", "url": "https://files.pythonhosted.org/packages/50/66/cc6b7ec5f343344f691a656068c8ee2a151e598d2a5b245f8a2471a7a98e/z3c.relationfield-0.7.1.tar.gz", "yanked": false}], "0.8.0": [{"comment_text": "", "digests": {"md5": "aacaa10b1e1138b9ec65edd73d5e7973", "sha256": "56eb26c49d15d9b69c366038d66eb173ecba2d3517b0c9ef0c02a82494b29c8e"}, "downloads": -1, "filename": "z3c.relationfield-0.8.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "aacaa10b1e1138b9ec65edd73d5e7973", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 26002, "upload_time": "2019-02-14T00:28:58", "upload_time_iso_8601": "2019-02-14T00:28:58.646744Z", "url": "https://files.pythonhosted.org/packages/25/9c/f36001e8575cee7604e70a5ab2d84e4ed50591c799d7322fca3b122866a4/z3c.relationfield-0.8.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3f446bdccbf3db2a4af502c696b91742", "sha256": "7db5e7c720f858fcb6aaf080e8535cb61c20c97d98091bfba28372e4797ca080"}, "downloads": -1, "filename": "z3c.relationfield-0.8.0.tar.gz", "has_sig": false, "md5_digest": "3f446bdccbf3db2a4af502c696b91742", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36099, "upload_time": "2019-02-14T00:29:00", "upload_time_iso_8601": "2019-02-14T00:29:00.443850Z", "url": "https://files.pythonhosted.org/packages/ae/93/2f044b6bafc233fed5d22372801111ea79daebdf87fe4a75814b140b1677/z3c.relationfield-0.8.0.tar.gz", "yanked": false}], "0.9.0": [{"comment_text": "", "digests": {"md5": "aaffc5cf6400b3b8cd4922616e74859c", "sha256": "3b6de0d934e6f325645d910587c5652005d8d66ef94b5c24a2453620c204687e"}, "downloads": -1, "filename": "z3c.relationfield-0.9.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "aaffc5cf6400b3b8cd4922616e74859c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 26194, "upload_time": "2019-09-15T20:07:34", "upload_time_iso_8601": "2019-09-15T20:07:34.797779Z", "url": "https://files.pythonhosted.org/packages/c0/db/83d20cbd0a8b2091c90081f60cb848ed890d7e3e05882001f65de2ca6739/z3c.relationfield-0.9.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "41813b1c689b461d5fc23e8898857bb8", "sha256": "49da4885c99b42807bbe584f7c2be9c25b814c929ac50f9782c3f92e71434864"}, "downloads": -1, "filename": "z3c.relationfield-0.9.0.tar.gz", "has_sig": false, "md5_digest": "41813b1c689b461d5fc23e8898857bb8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30103, "upload_time": "2019-09-15T20:07:38", "upload_time_iso_8601": "2019-09-15T20:07:38.995020Z", "url": "https://files.pythonhosted.org/packages/8b/77/9461443275bae909f6b1b7e30a35f799b75f37cb06e82d86491b659a1188/z3c.relationfield-0.9.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "aaffc5cf6400b3b8cd4922616e74859c", "sha256": "3b6de0d934e6f325645d910587c5652005d8d66ef94b5c24a2453620c204687e"}, "downloads": -1, "filename": "z3c.relationfield-0.9.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "aaffc5cf6400b3b8cd4922616e74859c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 26194, "upload_time": "2019-09-15T20:07:34", "upload_time_iso_8601": "2019-09-15T20:07:34.797779Z", "url": "https://files.pythonhosted.org/packages/c0/db/83d20cbd0a8b2091c90081f60cb848ed890d7e3e05882001f65de2ca6739/z3c.relationfield-0.9.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "41813b1c689b461d5fc23e8898857bb8", "sha256": "49da4885c99b42807bbe584f7c2be9c25b814c929ac50f9782c3f92e71434864"}, "downloads": -1, "filename": "z3c.relationfield-0.9.0.tar.gz", "has_sig": false, "md5_digest": "41813b1c689b461d5fc23e8898857bb8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30103, "upload_time": "2019-09-15T20:07:38", "upload_time_iso_8601": "2019-09-15T20:07:38.995020Z", "url": "https://files.pythonhosted.org/packages/8b/77/9461443275bae909f6b1b7e30a35f799b75f37cb06e82d86491b659a1188/z3c.relationfield-0.9.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:20:37 2020"}