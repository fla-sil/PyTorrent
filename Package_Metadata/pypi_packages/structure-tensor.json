{"info": {"author": "Niels Jeppesen", "author_email": "niejep@dtu.dk", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Scientific/Engineering :: Artificial Intelligence", "Topic :: Scientific/Engineering :: Image Recognition", "Topic :: Scientific/Engineering :: Mathematics"], "description": "# Structure Tensor for Python\nFast and simple to use 2D and 3D [structure tensor](https://en.wikipedia.org/wiki/Structure_tensor) implementation for Python.\n\n## Installation\nInstall package using ```pip install structure-tensor``` or clone the repository.\n\n### CUDA Support\nFor CUDA support install extra (optional) dependancy [CuPy](https://github.com/cupy/cupy). If CUDA is installed on your system, ```pip install cupy``` should be enough, but may be slow as CuPy will compile code during install. Alternatively use one of the [precompiled packages](https://github.com/cupy/cupy#installation).\n\n## Tiny Examples\nThe parameters for the structure tensor calculations are $\\rho$ (```rho```) and $\\sigma$ (```sigma```), which are scalar values.\n\n### 2D and 3D using NumPy\nThe ```structure_tensor``` package support doing either 2D or 3D structure tensor analysis. Eigenvalues (```val```) are sorted acending.\n\n``` python\nimport numpy as np\nfrom structure_tensor import eig_special_2d, structure_tensor_2d\n\nsigma = 1.5\nrho = 5.5\n\n# Load 2D data.\nimage = np.random.random((128, 128))\n\nS = structure_tensor_3d(image, sigma, rho)\nval, vec = eig_special_3d(S)\n```\n\nFor volume with shape ```(x, y, z)``` the eigenvectors (```vec```) are returned as ```zyx```.\n\n``` python\nimport numpy as np\nfrom structure_tensor import eig_special_3d, structure_tensor_3d\n\nsigma = 1.5\nrho = 5.5\n\n# Load 3D data.\nvolume = np.random.random((128, 128, 128))\n\nS = structure_tensor_3d(volume, sigma, rho)\nval, vec = eig_special_3d(S)\n```\n\n### 3D using CuPy\nCuPy functions are available in the ```structure_tensor.cp``` module. They work similar to their NumPy counterparts, except that they return ```cupy.ndarray```s. The functions will automatically handle moving input data if necessary.\n\n``` python\nimport cupy as cp\nimport numpy as np\nfrom structure_tensor.cp import eig_special_3d, structure_tensor_3d\n\nsigma = 1.5\nrho = 5.5\n\n# Load 3D data.\nvolume = np.random.random((128, 128, 128))\n\nS = structure_tensor_3d(volume, sigma, rho)\nval, vec = eig_special_3d(S)\n\n# Convert from cupy to numpy. Moves data from GPU to CPU.\nval = cp.asnumpy(val)\nvec = cp.asnumpy(vec)\n```\n\n## Contributions\nContributions are welcome, just create an [issue](https://github.com/Skielex/structure-tensor/issues) or a [PR](https://github.com/Skielex/structure-tensor/pulls).\n\n## More information\n- [Wikipedia - Structure tensor](https://en.wikipedia.org/wiki/Structure_tensor)\n- [NumPy](https://numpy.org/)\n- [SciPy](https://www.scipy.org/)\n- [CuPy](https://cupy.chainer.org/)\n\n## License\nMIT License (see LICENSE file).\n\n## Reference\nSee CuPy [reference section](https://github.com/cupy/cupy#reference).", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Skielex/structure-tensor", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "structure-tensor", "package_url": "https://pypi.org/project/structure-tensor/", "platform": "", "project_url": "https://pypi.org/project/structure-tensor/", "project_urls": {"Homepage": "https://github.com/Skielex/structure-tensor"}, "release_url": "https://pypi.org/project/structure-tensor/0.1.0/", "requires_dist": null, "requires_python": "", "summary": "Fast and simple to use 2D and 3D structure tensor implementation for Python.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Structure Tensor for Python</h1>\n<p>Fast and simple to use 2D and 3D <a href=\"https://en.wikipedia.org/wiki/Structure_tensor\" rel=\"nofollow\">structure tensor</a> implementation for Python.</p>\n<h2>Installation</h2>\n<p>Install package using <code>pip install structure-tensor</code> or clone the repository.</p>\n<h3>CUDA Support</h3>\n<p>For CUDA support install extra (optional) dependancy <a href=\"https://github.com/cupy/cupy\" rel=\"nofollow\">CuPy</a>. If CUDA is installed on your system, <code>pip install cupy</code> should be enough, but may be slow as CuPy will compile code during install. Alternatively use one of the <a href=\"https://github.com/cupy/cupy#installation\" rel=\"nofollow\">precompiled packages</a>.</p>\n<h2>Tiny Examples</h2>\n<p>The parameters for the structure tensor calculations are $\\rho$ (<code>rho</code>) and $\\sigma$ (<code>sigma</code>), which are scalar values.</p>\n<h3>2D and 3D using NumPy</h3>\n<p>The <code>structure_tensor</code> package support doing either 2D or 3D structure tensor analysis. Eigenvalues (<code>val</code>) are sorted acending.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">structure_tensor</span> <span class=\"kn\">import</span> <span class=\"n\">eig_special_2d</span><span class=\"p\">,</span> <span class=\"n\">structure_tensor_2d</span>\n\n<span class=\"n\">sigma</span> <span class=\"o\">=</span> <span class=\"mf\">1.5</span>\n<span class=\"n\">rho</span> <span class=\"o\">=</span> <span class=\"mf\">5.5</span>\n\n<span class=\"c1\"># Load 2D data.</span>\n<span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">((</span><span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"mi\">128</span><span class=\"p\">))</span>\n\n<span class=\"n\">S</span> <span class=\"o\">=</span> <span class=\"n\">structure_tensor_3d</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">,</span> <span class=\"n\">sigma</span><span class=\"p\">,</span> <span class=\"n\">rho</span><span class=\"p\">)</span>\n<span class=\"n\">val</span><span class=\"p\">,</span> <span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">eig_special_3d</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"p\">)</span>\n</pre>\n<p>For volume with shape <code>(x, y, z)</code> the eigenvectors (<code>vec</code>) are returned as <code>zyx</code>.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">structure_tensor</span> <span class=\"kn\">import</span> <span class=\"n\">eig_special_3d</span><span class=\"p\">,</span> <span class=\"n\">structure_tensor_3d</span>\n\n<span class=\"n\">sigma</span> <span class=\"o\">=</span> <span class=\"mf\">1.5</span>\n<span class=\"n\">rho</span> <span class=\"o\">=</span> <span class=\"mf\">5.5</span>\n\n<span class=\"c1\"># Load 3D data.</span>\n<span class=\"n\">volume</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">((</span><span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"mi\">128</span><span class=\"p\">))</span>\n\n<span class=\"n\">S</span> <span class=\"o\">=</span> <span class=\"n\">structure_tensor_3d</span><span class=\"p\">(</span><span class=\"n\">volume</span><span class=\"p\">,</span> <span class=\"n\">sigma</span><span class=\"p\">,</span> <span class=\"n\">rho</span><span class=\"p\">)</span>\n<span class=\"n\">val</span><span class=\"p\">,</span> <span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">eig_special_3d</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"p\">)</span>\n</pre>\n<h3>3D using CuPy</h3>\n<p>CuPy functions are available in the <code>structure_tensor.cp</code> module. They work similar to their NumPy counterparts, except that they return <code>cupy.ndarray</code>s. The functions will automatically handle moving input data if necessary.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">cupy</span> <span class=\"k\">as</span> <span class=\"nn\">cp</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">structure_tensor.cp</span> <span class=\"kn\">import</span> <span class=\"n\">eig_special_3d</span><span class=\"p\">,</span> <span class=\"n\">structure_tensor_3d</span>\n\n<span class=\"n\">sigma</span> <span class=\"o\">=</span> <span class=\"mf\">1.5</span>\n<span class=\"n\">rho</span> <span class=\"o\">=</span> <span class=\"mf\">5.5</span>\n\n<span class=\"c1\"># Load 3D data.</span>\n<span class=\"n\">volume</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">((</span><span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"mi\">128</span><span class=\"p\">))</span>\n\n<span class=\"n\">S</span> <span class=\"o\">=</span> <span class=\"n\">structure_tensor_3d</span><span class=\"p\">(</span><span class=\"n\">volume</span><span class=\"p\">,</span> <span class=\"n\">sigma</span><span class=\"p\">,</span> <span class=\"n\">rho</span><span class=\"p\">)</span>\n<span class=\"n\">val</span><span class=\"p\">,</span> <span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">eig_special_3d</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Convert from cupy to numpy. Moves data from GPU to CPU.</span>\n<span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">cp</span><span class=\"o\">.</span><span class=\"n\">asnumpy</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">)</span>\n<span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">cp</span><span class=\"o\">.</span><span class=\"n\">asnumpy</span><span class=\"p\">(</span><span class=\"n\">vec</span><span class=\"p\">)</span>\n</pre>\n<h2>Contributions</h2>\n<p>Contributions are welcome, just create an <a href=\"https://github.com/Skielex/structure-tensor/issues\" rel=\"nofollow\">issue</a> or a <a href=\"https://github.com/Skielex/structure-tensor/pulls\" rel=\"nofollow\">PR</a>.</p>\n<h2>More information</h2>\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Structure_tensor\" rel=\"nofollow\">Wikipedia - Structure tensor</a></li>\n<li><a href=\"https://numpy.org/\" rel=\"nofollow\">NumPy</a></li>\n<li><a href=\"https://www.scipy.org/\" rel=\"nofollow\">SciPy</a></li>\n<li><a href=\"https://cupy.chainer.org/\" rel=\"nofollow\">CuPy</a></li>\n</ul>\n<h2>License</h2>\n<p>MIT License (see LICENSE file).</p>\n<h2>Reference</h2>\n<p>See CuPy <a href=\"https://github.com/cupy/cupy#reference\" rel=\"nofollow\">reference section</a>.</p>\n\n          </div>"}, "last_serial": 6698049, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "b51fb20cb0355b07cd748f47bc31885c", "sha256": "566e5c6484c4d40149da5a5dc58a762d68ca3ce3595d31590b8e7c7fdf015f2a"}, "downloads": -1, "filename": "structure-tensor-0.1.0.tar.gz", "has_sig": false, "md5_digest": "b51fb20cb0355b07cd748f47bc31885c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9101, "upload_time": "2020-02-25T18:15:59", "upload_time_iso_8601": "2020-02-25T18:15:59.182026Z", "url": "https://files.pythonhosted.org/packages/0c/b8/07a80398e28ae5ce482d0308fb81a0010b9398bff99a367bd7843d981813/structure-tensor-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b51fb20cb0355b07cd748f47bc31885c", "sha256": "566e5c6484c4d40149da5a5dc58a762d68ca3ce3595d31590b8e7c7fdf015f2a"}, "downloads": -1, "filename": "structure-tensor-0.1.0.tar.gz", "has_sig": false, "md5_digest": "b51fb20cb0355b07cd748f47bc31885c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9101, "upload_time": "2020-02-25T18:15:59", "upload_time_iso_8601": "2020-02-25T18:15:59.182026Z", "url": "https://files.pythonhosted.org/packages/0c/b8/07a80398e28ae5ce482d0308fb81a0010b9398bff99a367bd7843d981813/structure-tensor-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:01:03 2020"}