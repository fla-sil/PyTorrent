{"info": {"author": "Kurt McKee", "author_email": "contactme@kurtmckee.org", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Framework :: Pelican :: Plugins", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Internet :: WWW/HTTP :: Site Management"], "description": "..  This file is part of the pelican_precompress plugin.\n..  Copyright 2019-2020 Kurt McKee <contactme@kurtmckee.org>\n..  Released under the MIT license.\n\npelican_precompress\n*******************\n\n*Pre-compress your Pelican site using gzip, zopfli, and brotli!*\n\n----\n\nAre you using `Pelican`_, the static site generator? If so, great!\nAre you pre-compressing your static files to have the fastest site possible?\nIf not, install **pelican_precompress** today!\nIt's the plugin that makes your visitors happy and saves you money!\n\n\nInstallation\n============\n\nThere are three steps required to start using static compression:\n\n#.  Install the plugin and any supporting Python packages you want.\n#.  Configure Pelican to use the pelican_precompress plugin.\n#.  Configure your web server to use static, pre-compressed files.\n\n\n1. Install the Python modules\n-----------------------------\n\nAt minimum, you'll need to install the pelican_precompress plugin.\nIt will automatically generate gzip files because gzip is built into the\nPython standard library.\n\nHowever, if you want highly-optimized gzip files you'll need the zopfli module.\nAnd if you want to have the very best compression currently available, you'll\nneed to install the brotli module (which will require extra work in step 3).\n\n..  code-block:: shell-session\n\n    $ pip install pelican_precompress\n    $ pip install zopfli  # This produces smaller gzip'd files. Use it!\n    $ pip install brotli  # This requires extra work in step 3.\n\nFurther reading: `zopfli`_, `brotli`_\n\n\n2. Configure Pelican\n--------------------\n\nYou'll need to import the plugin and add it to the list of active plugins.\nFeel free to copy and paste the code below into your Pelican configuration file.\nJust uncomment and edit the configuration lines to your liking...or leave\nthem alone because the defaults are awesome!\n\n..  code-block:: python3\n\n    import pelican_precompress\n\n    PLUGINS = [pelican_precompress]\n\n    # PRECOMPRESS_GZIP = True or False\n    # PRECOMPRESS_ZOPFLI = True or False\n    # PRECOMPRESS_BROTLI = True or False\n    # PRECOMPRESS_OVERWRITE = False\n    # PRECOMPRESS_TEXT_EXTENSIONS = {\n    #     '.atom',\n    #     '.css',\n    #     '.html',\n    #     '.but-the-default-extensions-are-pretty-comprehensive',\n    # }\n\nFurther reading: `Pelican plugins`_\n\n\n3. Configure nginx\n------------------\n\nnginx supports gzip compression right out of the box.\nTo enable it, add something like this to your nginx configuration file:\n\n..  code-block:: nginx\n\n    http {\n        gzip_static on;\n        gzip_vary on;\n    }\n\nAt the time of writing, nginx doesn't natively support brotli compression.\nTo get it, you'll need to compile the static brotli module as an nginx\ndynamic module, or recompile nginx from scratch. When it's done you'll\nadd something like this to your nginx configuration file:\n\n..  code-block:: nginx\n\n    load_module /usr/lib/nginx/modules/ngx_http_brotli_static_module.so;\n\n    http {\n        brotli_static on;\n    }\n\nFurther reading: `gzip_static`_, `gzip_vary`_, `nginx brotli module`_\n\n\nConfiguration\n=============\n\nThere are a small number of configuration options available.\nYou set them in your Pelican configuration file.\n\n*   ``PRECOMPRESS_GZIP`` (bool, default is True)\n\n    This is always ``True`` unless you set this to ``False``.\n    For example, you might turn this off during development.\n\n*   ``PRECOMPRESS_ZOPFLI`` (bool, default is True if zopfli is installed)\n\n    If the zopfli module is installed this will default to ``True``.\n    You might set this to ``False`` during development.\n    Note that if you try to enable zopfli compression but the module\n    isn't installed then nothing will happen.\n\n*   ``PRECOMPRESS_BROTLI`` (bool, default is True if brotli is installed)\n\n    If the brotli module is installed this will default to ``True``.\n    You might set this to ``False`` during development.\n    Like ``PRECOMPRESS_ZOPFLI``, if you set this to ``True`` when the\n    brotli module isn't installed then nothing will happen.\n\n*   ``PRECOMPRESS_OVERWRITE`` (bool, default is False)\n\n    When pelican_precompress encounters an existing compressed file\n    it will refuse to overwrite it. If you want the plugin to overwrite\n    files you can set this to ``True``.\n\n*   ``PRECOMPRESS_TEXT_EXTENSIONS`` (Set[str])\n\n    This setting controls which file extensions will be pre-compressed.\n\n    If you modify this setting in the Pelican configuration file it will\n    completely replace the default extensions!\n\n\nTesting\n=======\n\n**pelican_precompress** has 100% test coverage. If you'd like to test the\ncode yourself, clone the git repository and run these commands:\n\n..  code-block:: shell\n\n    $ python3 -m venv venv\n    $ source venv/bin/activate\n    (venv) $ python -m pip install tox\n    (venv) $ tox\n\nThe test suite uses tox to setup multiple environments with varying\ndependencies using multiple Python interpreters; pytest allows the\ntest suite to have parametrized tests; pyfakefs creates a fake\nfilesystem that the tests can run against; and coverage keeps track\nof which lines of code (and which branches) have been run.\n\nFurther reading: `tox`_, `venv`_, `pytest`_, `pyfakefs`_, `coverage`_\n\n\n..  Links\n..  =====\n\n..  _Pelican: https://getpelican.com/\n..  _Pelican plugins: https://docs.getpelican.com/en/latest/plugins.html\n..  _zopfli: https://pypi.org/project/zopfli/\n..  _brotli: https://pypi.org/project/Brotli/\n..  _gzip_static: https://nginx.org/en/docs/http/ngx_http_gzip_static_module.html#gzip_static\n..  _gzip_vary: https://nginx.org/en/docs/http/ngx_http_gzip_module.html#gzip_vary\n..  _nginx brotli module: https://github.com/google/ngx_brotli\n..  _tox: https://tox.readthedocs.io/en/latest/\n..  _pytest: https://docs.pytest.org/en/latest/\n..  _pyfakefs: https://jmcgeheeiv.github.io/pyfakefs/release/\n..  _venv: https://docs.python.org/3/library/venv.html\n..  _coverage: https://coverage.readthedocs.io/en/latest/\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kurtmckee/pelican_precompress", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pelican-precompress", "package_url": "https://pypi.org/project/pelican-precompress/", "platform": "", "project_url": "https://pypi.org/project/pelican-precompress/", "project_urls": {"Homepage": "https://github.com/kurtmckee/pelican_precompress"}, "release_url": "https://pypi.org/project/pelican-precompress/1.0.0/", "requires_dist": null, "requires_python": "~=3.6", "summary": "Pre-compress your Pelican site using gzip, zopfli, and brotli!", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><em>Pre-compress your Pelican site using gzip, zopfli, and brotli!</em></p>\n<hr class=\"docutils\">\n<p>Are you using <a href=\"https://getpelican.com/\" rel=\"nofollow\">Pelican</a>, the static site generator? If so, great!\nAre you pre-compressing your static files to have the fastest site possible?\nIf not, install <strong>pelican_precompress</strong> today!\nIt\u2019s the plugin that makes your visitors happy and saves you money!</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>There are three steps required to start using static compression:</p>\n<ol>\n<li>Install the plugin and any supporting Python packages you want.</li>\n<li>Configure Pelican to use the pelican_precompress plugin.</li>\n<li>Configure your web server to use static, pre-compressed files.</li>\n</ol>\n<div id=\"install-the-python-modules\">\n<h3>1. Install the Python modules</h3>\n<p>At minimum, you\u2019ll need to install the pelican_precompress plugin.\nIt will automatically generate gzip files because gzip is built into the\nPython standard library.</p>\n<p>However, if you want highly-optimized gzip files you\u2019ll need the zopfli module.\nAnd if you want to have the very best compression currently available, you\u2019ll\nneed to install the brotli module (which will require extra work in step 3).</p>\n<pre><span class=\"gp\">$</span> pip install pelican_precompress\n<span class=\"gp\">$</span> pip install zopfli  <span class=\"c1\"># This produces smaller gzip'd files. Use it!\n</span><span class=\"gp\">$</span><span class=\"c1\"></span> pip install brotli  <span class=\"c1\"># This requires extra work in step 3.</span>\n</pre>\n<p>Further reading: <a href=\"https://pypi.org/project/zopfli/\" rel=\"nofollow\">zopfli</a>, <a href=\"https://pypi.org/project/Brotli/\" rel=\"nofollow\">brotli</a></p>\n</div>\n<div id=\"configure-pelican\">\n<h3>2. Configure Pelican</h3>\n<p>You\u2019ll need to import the plugin and add it to the list of active plugins.\nFeel free to copy and paste the code below into your Pelican configuration file.\nJust uncomment and edit the configuration lines to your liking\u2026or leave\nthem alone because the defaults are awesome!</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pelican_precompress</span>\n\n<span class=\"n\">PLUGINS</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">pelican_precompress</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># PRECOMPRESS_GZIP = True or False</span>\n<span class=\"c1\"># PRECOMPRESS_ZOPFLI = True or False</span>\n<span class=\"c1\"># PRECOMPRESS_BROTLI = True or False</span>\n<span class=\"c1\"># PRECOMPRESS_OVERWRITE = False</span>\n<span class=\"c1\"># PRECOMPRESS_TEXT_EXTENSIONS = {</span>\n<span class=\"c1\">#     '.atom',</span>\n<span class=\"c1\">#     '.css',</span>\n<span class=\"c1\">#     '.html',</span>\n<span class=\"c1\">#     '.but-the-default-extensions-are-pretty-comprehensive',</span>\n<span class=\"c1\"># }</span>\n</pre>\n<p>Further reading: <a href=\"https://docs.getpelican.com/en/latest/plugins.html\" rel=\"nofollow\">Pelican plugins</a></p>\n</div>\n<div id=\"configure-nginx\">\n<h3>3. Configure nginx</h3>\n<p>nginx supports gzip compression right out of the box.\nTo enable it, add something like this to your nginx configuration file:</p>\n<pre><span class=\"k\">http</span> <span class=\"p\">{</span>\n    <span class=\"kn\">gzip_static</span> <span class=\"no\">on</span><span class=\"p\">;</span>\n    <span class=\"kn\">gzip_vary</span> <span class=\"no\">on</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre>\n<p>At the time of writing, nginx doesn\u2019t natively support brotli compression.\nTo get it, you\u2019ll need to compile the static brotli module as an nginx\ndynamic module, or recompile nginx from scratch. When it\u2019s done you\u2019ll\nadd something like this to your nginx configuration file:</p>\n<pre><span class=\"k\">load_module</span> <span class=\"s\">/usr/lib/nginx/modules/ngx_http_brotli_static_module.so</span><span class=\"p\">;</span>\n\n<span class=\"k\">http</span> <span class=\"p\">{</span>\n    <span class=\"kn\">brotli_static</span> <span class=\"no\">on</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Further reading: <a href=\"https://nginx.org/en/docs/http/ngx_http_gzip_static_module.html#gzip_static\" rel=\"nofollow\">gzip_static</a>, <a href=\"https://nginx.org/en/docs/http/ngx_http_gzip_module.html#gzip_vary\" rel=\"nofollow\">gzip_vary</a>, <a href=\"https://github.com/google/ngx_brotli\" rel=\"nofollow\">nginx brotli module</a></p>\n</div>\n</div>\n<div id=\"configuration\">\n<h2>Configuration</h2>\n<p>There are a small number of configuration options available.\nYou set them in your Pelican configuration file.</p>\n<ul>\n<li><p><tt>PRECOMPRESS_GZIP</tt> (bool, default is True)</p>\n<p>This is always <tt>True</tt> unless you set this to <tt>False</tt>.\nFor example, you might turn this off during development.</p>\n</li>\n<li><p><tt>PRECOMPRESS_ZOPFLI</tt> (bool, default is True if zopfli is installed)</p>\n<p>If the zopfli module is installed this will default to <tt>True</tt>.\nYou might set this to <tt>False</tt> during development.\nNote that if you try to enable zopfli compression but the module\nisn\u2019t installed then nothing will happen.</p>\n</li>\n<li><p><tt>PRECOMPRESS_BROTLI</tt> (bool, default is True if brotli is installed)</p>\n<p>If the brotli module is installed this will default to <tt>True</tt>.\nYou might set this to <tt>False</tt> during development.\nLike <tt>PRECOMPRESS_ZOPFLI</tt>, if you set this to <tt>True</tt> when the\nbrotli module isn\u2019t installed then nothing will happen.</p>\n</li>\n<li><p><tt>PRECOMPRESS_OVERWRITE</tt> (bool, default is False)</p>\n<p>When pelican_precompress encounters an existing compressed file\nit will refuse to overwrite it. If you want the plugin to overwrite\nfiles you can set this to <tt>True</tt>.</p>\n</li>\n<li><p><tt>PRECOMPRESS_TEXT_EXTENSIONS</tt> (Set[str])</p>\n<p>This setting controls which file extensions will be pre-compressed.</p>\n<p>If you modify this setting in the Pelican configuration file it will\ncompletely replace the default extensions!</p>\n</li>\n</ul>\n</div>\n<div id=\"testing\">\n<h2>Testing</h2>\n<p><strong>pelican_precompress</strong> has 100% test coverage. If you\u2019d like to test the\ncode yourself, clone the git repository and run these commands:</p>\n<pre>$ python3 -m venv venv\n$ <span class=\"nb\">source</span> venv/bin/activate\n<span class=\"o\">(</span>venv<span class=\"o\">)</span> $ python -m pip install tox\n<span class=\"o\">(</span>venv<span class=\"o\">)</span> $ tox\n</pre>\n<p>The test suite uses tox to setup multiple environments with varying\ndependencies using multiple Python interpreters; pytest allows the\ntest suite to have parametrized tests; pyfakefs creates a fake\nfilesystem that the tests can run against; and coverage keeps track\nof which lines of code (and which branches) have been run.</p>\n<p>Further reading: <a href=\"https://tox.readthedocs.io/en/latest/\" rel=\"nofollow\">tox</a>, <a href=\"https://docs.python.org/3/library/venv.html\" rel=\"nofollow\">venv</a>, <a href=\"https://docs.pytest.org/en/latest/\" rel=\"nofollow\">pytest</a>, <a href=\"https://jmcgeheeiv.github.io/pyfakefs/release/\" rel=\"nofollow\">pyfakefs</a>, <a href=\"https://coverage.readthedocs.io/en/latest/\" rel=\"nofollow\">coverage</a></p>\n</div>\n\n          </div>"}, "last_serial": 6577870, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "56f5586fb05c3fde98201284b4afb839", "sha256": "90f7c2a75e09e5644d40821222bb86ea524059e454982030fcd95b1ad1a7bf6e"}, "downloads": -1, "filename": "pelican_precompress-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "56f5586fb05c3fde98201284b4afb839", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.6", "size": 6438, "upload_time": "2020-02-05T19:59:21", "upload_time_iso_8601": "2020-02-05T19:59:21.818954Z", "url": "https://files.pythonhosted.org/packages/ab/b9/0449e2378fbc95cd491f7e6b10aebb23f2f93d04394005c10e6bd296e069/pelican_precompress-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d8e4adcb7a5c94245c2f946b9bf9e7ad", "sha256": "df3dc4d9a4a3a78ee4c90f030438742354e750c5a5d98c88bcaecd0f28e798a1"}, "downloads": -1, "filename": "pelican_precompress-1.0.0.tar.gz", "has_sig": false, "md5_digest": "d8e4adcb7a5c94245c2f946b9bf9e7ad", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.6", "size": 5760, "upload_time": "2020-02-05T19:59:24", "upload_time_iso_8601": "2020-02-05T19:59:24.586764Z", "url": "https://files.pythonhosted.org/packages/02/a9/00622ed43c6cfeab4dc1d6ac725806a36769995fa6ce51e16c732ecfe088/pelican_precompress-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "56f5586fb05c3fde98201284b4afb839", "sha256": "90f7c2a75e09e5644d40821222bb86ea524059e454982030fcd95b1ad1a7bf6e"}, "downloads": -1, "filename": "pelican_precompress-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "56f5586fb05c3fde98201284b4afb839", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.6", "size": 6438, "upload_time": "2020-02-05T19:59:21", "upload_time_iso_8601": "2020-02-05T19:59:21.818954Z", "url": "https://files.pythonhosted.org/packages/ab/b9/0449e2378fbc95cd491f7e6b10aebb23f2f93d04394005c10e6bd296e069/pelican_precompress-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d8e4adcb7a5c94245c2f946b9bf9e7ad", "sha256": "df3dc4d9a4a3a78ee4c90f030438742354e750c5a5d98c88bcaecd0f28e798a1"}, "downloads": -1, "filename": "pelican_precompress-1.0.0.tar.gz", "has_sig": false, "md5_digest": "d8e4adcb7a5c94245c2f946b9bf9e7ad", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.6", "size": 5760, "upload_time": "2020-02-05T19:59:24", "upload_time_iso_8601": "2020-02-05T19:59:24.586764Z", "url": "https://files.pythonhosted.org/packages/02/a9/00622ed43c6cfeab4dc1d6ac725806a36769995fa6ce51e16c732ecfe088/pelican_precompress-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:56:38 2020"}