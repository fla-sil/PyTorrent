{"info": {"author": "Ethan Rosenthal", "author_email": "ethanrosenthal@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Topic :: Scientific/Engineering :: Information Analysis"], "description": "# skits\n[![CircleCI](https://circleci.com/gh/EthanRosenthal/skits/tree/master.svg?style=svg)](https://circleci.com/gh/EthanRosenthal/skits/tree/master)\n[![PyPI version](https://badge.fury.io/py/skits.svg)](https://badge.fury.io/py/skits)\n\nA library for\n**S**ci**K**it-learn-**I**nspired **T**ime **S**eries models.\n\nThe primary goal of this library is to allow one to train time series prediction models using a similar API to `scikit-learn`. Consequently, similar to `scikit-learn`, this library consists of `preprocessors`, `feature_extractors`, and `pipelines`. \n\n## Installation\n\nInstall with pip:\n\n```commandline\npip install skits\n```\n\n## Preprocessors\n\nThe preprocessors expect to receive time series data, and then end up storing some data about the time series such that they can fully invert a transform. The following example shows how to create a `DifferenceTransformer` transform data, and then invert it back to its original form. The `DifferenceTransformer` subtracts the point shifted by `period` away from each point.\n\n```python\nimport numpy as np\nfrom skits.preprocessing import DifferenceTransformer\n\ny = np.random.random(10)\n# scikit-learn expects 2D design matrices,\n# so we duplicate the time series.\nX = y[:, np.newaxis] \n\ndt = DifferenceTransformer(period=2)\n\nXt = dt.fit_transform(X,y)\nX_inv = dt.inverse_transform(Xt)\n\nassert np.allclose(X, X_inv)\n```\n\n## Feature Extractors\n\nAfter all preprocessing transformations are completed, multiple features may be built out of the time series. These can be built via feature extractors, which one should combine together into a large `FeatureUnion`. Current features include autoregressive, seasonal, and integrated features (covering the AR and I of ARIMA models).\n\n\n## Pipelines\n\nThere are two types of pipelines. The `ForecasterPipeline` is for forecasting time series (duh). Specifically, one should build this pipeline with a regressor as the final step such that one can make appropriate predictions. The functionality is similar to a regular `scikit-learn` pipeline. Differences include the addition of a `forecast()` method along with a `to_scale` keyword argument to `predict()` such that one can make sure that their prediction is on the same scale as the original data.\n\nThese classes are likely subject to change as they are fairly hacky right now. For example, one must transform both `X` and `y` for all transformations before the introduction of a `DifferenceTransformer`. While the pipeline handles this, one must prefix all of these transformations with `pre_` in the step names.\n\nAnywho, here's an example:\n\n```python\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import FeatureUnion\n\nfrom skits.pipeline import ForecasterPipeline\nfrom skits.preprocessing import ReversibleImputer\nfrom skits.feature_extraction import (AutoregressiveTransformer, \n                                      SeasonalTransformer)\n\nsteps = [\n    ('pre_scaling', StandardScaler()),\n    ('features', FeatureUnion([\n        ('ar_transformer', AutoregressiveTransformer(num_lags=3)),\n        ('seasonal_transformer', SeasonalTransformer(seasonal_period=20)\n    )])),\n    ('post_features_imputer', ReversibleImputer()),\n    ('regressor', LinearRegression(fit_intercept=False))\n]\n\nl = np.linspace(0, 1, 101)\ny = 5*np.sin(2 * np.pi * 5 * l) + np.random.normal(0, 1, size=101)\nX = y[:, np.newaxis]\n\npipeline = ForecasterPipeline(steps)\n\npipeline.fit(X, y)\ny_pred = pipeline.predict(X, to_scale=True, refit=True)\n```\n\nAnd this ends up looking like:\n\n```python\nimport matplotlib.pyplot as plt\n\nplt.plot(y, lw=2)\nplt.plot(y_pred, lw=2)\nplt.legend(['y_true', 'y_pred'], bbox_to_anchor=(1, 1));\n```\n![pred](pred.png)\n\nAnd forecasting looks like\n\n```python\nstart_idx = 70\nplt.plot(y, lw=2);\nplt.plot(pipeline.forecast(y[:, np.newaxis], start_idx=start_idx), lw=2);\nax = plt.gca();\nylim = ax.get_ylim();\nplt.plot((start_idx, start_idx), ylim, lw=4);\nplt.ylim(ylim);\nplt.legend(['y_true', 'y_pred', 'forecast start'], bbox_to_anchor=(1, 1));\n```\n![forecast](forecast.png)\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/EthanRosenthal/skits", "keywords": "machine learning time series forecasting", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "skits", "package_url": "https://pypi.org/project/skits/", "platform": "", "project_url": "https://pypi.org/project/skits/", "project_urls": {"Homepage": "https://github.com/EthanRosenthal/skits"}, "release_url": "https://pypi.org/project/skits/0.1.2/", "requires_dist": ["numpy", "scikit-learn"], "requires_python": "", "summary": "scikit-learn-inspired time series", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>skits</h1>\n<p><a href=\"https://circleci.com/gh/EthanRosenthal/skits/tree/master\" rel=\"nofollow\"><img alt=\"CircleCI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/53c8b49c5641cee0ccc4f9c4efc4da79e65c3269/68747470733a2f2f636972636c6563692e636f6d2f67682f457468616e526f73656e7468616c2f736b6974732f747265652f6d61737465722e7376673f7374796c653d737667\"></a>\n<a href=\"https://badge.fury.io/py/skits\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d8a9948cdf8b67ad5e95ed3edc6c405acc715bd6/68747470733a2f2f62616467652e667572792e696f2f70792f736b6974732e737667\"></a></p>\n<p>A library for\n<strong>S</strong>ci<strong>K</strong>it-learn-<strong>I</strong>nspired <strong>T</strong>ime <strong>S</strong>eries models.</p>\n<p>The primary goal of this library is to allow one to train time series prediction models using a similar API to <code>scikit-learn</code>. Consequently, similar to <code>scikit-learn</code>, this library consists of <code>preprocessors</code>, <code>feature_extractors</code>, and <code>pipelines</code>.</p>\n<h2>Installation</h2>\n<p>Install with pip:</p>\n<pre>pip install skits\n</pre>\n<h2>Preprocessors</h2>\n<p>The preprocessors expect to receive time series data, and then end up storing some data about the time series such that they can fully invert a transform. The following example shows how to create a <code>DifferenceTransformer</code> transform data, and then invert it back to its original form. The <code>DifferenceTransformer</code> subtracts the point shifted by <code>period</code> away from each point.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">skits.preprocessing</span> <span class=\"kn\">import</span> <span class=\"n\">DifferenceTransformer</span>\n\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"c1\"># scikit-learn expects 2D design matrices,</span>\n<span class=\"c1\"># so we duplicate the time series.</span>\n<span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">y</span><span class=\"p\">[:,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">newaxis</span><span class=\"p\">]</span> \n\n<span class=\"n\">dt</span> <span class=\"o\">=</span> <span class=\"n\">DifferenceTransformer</span><span class=\"p\">(</span><span class=\"n\">period</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"n\">Xt</span> <span class=\"o\">=</span> <span class=\"n\">dt</span><span class=\"o\">.</span><span class=\"n\">fit_transform</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span><span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"n\">X_inv</span> <span class=\"o\">=</span> <span class=\"n\">dt</span><span class=\"o\">.</span><span class=\"n\">inverse_transform</span><span class=\"p\">(</span><span class=\"n\">Xt</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">allclose</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">X_inv</span><span class=\"p\">)</span>\n</pre>\n<h2>Feature Extractors</h2>\n<p>After all preprocessing transformations are completed, multiple features may be built out of the time series. These can be built via feature extractors, which one should combine together into a large <code>FeatureUnion</code>. Current features include autoregressive, seasonal, and integrated features (covering the AR and I of ARIMA models).</p>\n<h2>Pipelines</h2>\n<p>There are two types of pipelines. The <code>ForecasterPipeline</code> is for forecasting time series (duh). Specifically, one should build this pipeline with a regressor as the final step such that one can make appropriate predictions. The functionality is similar to a regular <code>scikit-learn</code> pipeline. Differences include the addition of a <code>forecast()</code> method along with a <code>to_scale</code> keyword argument to <code>predict()</code> such that one can make sure that their prediction is on the same scale as the original data.</p>\n<p>These classes are likely subject to change as they are fairly hacky right now. For example, one must transform both <code>X</code> and <code>y</code> for all transformations before the introduction of a <code>DifferenceTransformer</code>. While the pipeline handles this, one must prefix all of these transformations with <code>pre_</code> in the step names.</p>\n<p>Anywho, here's an example:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.linear_model</span> <span class=\"kn\">import</span> <span class=\"n\">LinearRegression</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.preprocessing</span> <span class=\"kn\">import</span> <span class=\"n\">StandardScaler</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.pipeline</span> <span class=\"kn\">import</span> <span class=\"n\">FeatureUnion</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">skits.pipeline</span> <span class=\"kn\">import</span> <span class=\"n\">ForecasterPipeline</span>\n<span class=\"kn\">from</span> <span class=\"nn\">skits.preprocessing</span> <span class=\"kn\">import</span> <span class=\"n\">ReversibleImputer</span>\n<span class=\"kn\">from</span> <span class=\"nn\">skits.feature_extraction</span> <span class=\"kn\">import</span> <span class=\"p\">(</span><span class=\"n\">AutoregressiveTransformer</span><span class=\"p\">,</span> \n                                      <span class=\"n\">SeasonalTransformer</span><span class=\"p\">)</span>\n\n<span class=\"n\">steps</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">(</span><span class=\"s1\">'pre_scaling'</span><span class=\"p\">,</span> <span class=\"n\">StandardScaler</span><span class=\"p\">()),</span>\n    <span class=\"p\">(</span><span class=\"s1\">'features'</span><span class=\"p\">,</span> <span class=\"n\">FeatureUnion</span><span class=\"p\">([</span>\n        <span class=\"p\">(</span><span class=\"s1\">'ar_transformer'</span><span class=\"p\">,</span> <span class=\"n\">AutoregressiveTransformer</span><span class=\"p\">(</span><span class=\"n\">num_lags</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)),</span>\n        <span class=\"p\">(</span><span class=\"s1\">'seasonal_transformer'</span><span class=\"p\">,</span> <span class=\"n\">SeasonalTransformer</span><span class=\"p\">(</span><span class=\"n\">seasonal_period</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">)</span>\n    <span class=\"p\">)])),</span>\n    <span class=\"p\">(</span><span class=\"s1\">'post_features_imputer'</span><span class=\"p\">,</span> <span class=\"n\">ReversibleImputer</span><span class=\"p\">()),</span>\n    <span class=\"p\">(</span><span class=\"s1\">'regressor'</span><span class=\"p\">,</span> <span class=\"n\">LinearRegression</span><span class=\"p\">(</span><span class=\"n\">fit_intercept</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">))</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">101</span><span class=\"p\">)</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"o\">*</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">pi</span> <span class=\"o\">*</span> <span class=\"mi\">5</span> <span class=\"o\">*</span> <span class=\"n\">l</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">normal</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">101</span><span class=\"p\">)</span>\n<span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">y</span><span class=\"p\">[:,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">newaxis</span><span class=\"p\">]</span>\n\n<span class=\"n\">pipeline</span> <span class=\"o\">=</span> <span class=\"n\">ForecasterPipeline</span><span class=\"p\">(</span><span class=\"n\">steps</span><span class=\"p\">)</span>\n\n<span class=\"n\">pipeline</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"n\">y_pred</span> <span class=\"o\">=</span> <span class=\"n\">pipeline</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">to_scale</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">refit</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>And this ends up looking like:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">lw</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">y_pred</span><span class=\"p\">,</span> <span class=\"n\">lw</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">legend</span><span class=\"p\">([</span><span class=\"s1\">'y_true'</span><span class=\"p\">,</span> <span class=\"s1\">'y_pred'</span><span class=\"p\">],</span> <span class=\"n\">bbox_to_anchor</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">));</span>\n</pre>\n<p><img alt=\"pred\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/742e1d16182955c5f6bc6f8ddf5b7a11a739df06/707265642e706e67\"></p>\n<p>And forecasting looks like</p>\n<pre><span class=\"n\">start_idx</span> <span class=\"o\">=</span> <span class=\"mi\">70</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">lw</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">);</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">pipeline</span><span class=\"o\">.</span><span class=\"n\">forecast</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">[:,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">newaxis</span><span class=\"p\">],</span> <span class=\"n\">start_idx</span><span class=\"o\">=</span><span class=\"n\">start_idx</span><span class=\"p\">),</span> <span class=\"n\">lw</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">);</span>\n<span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">gca</span><span class=\"p\">();</span>\n<span class=\"n\">ylim</span> <span class=\"o\">=</span> <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">get_ylim</span><span class=\"p\">();</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">((</span><span class=\"n\">start_idx</span><span class=\"p\">,</span> <span class=\"n\">start_idx</span><span class=\"p\">),</span> <span class=\"n\">ylim</span><span class=\"p\">,</span> <span class=\"n\">lw</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">);</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">ylim</span><span class=\"p\">(</span><span class=\"n\">ylim</span><span class=\"p\">);</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">legend</span><span class=\"p\">([</span><span class=\"s1\">'y_true'</span><span class=\"p\">,</span> <span class=\"s1\">'y_pred'</span><span class=\"p\">,</span> <span class=\"s1\">'forecast start'</span><span class=\"p\">],</span> <span class=\"n\">bbox_to_anchor</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">));</span>\n</pre>\n<p><img alt=\"forecast\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4276704fa2d256dbc60a07d8aa57cd4a699ec287/666f7265636173742e706e67\"></p>\n\n          </div>"}, "last_serial": 6066077, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "7554ac190389a017b2daa5b32e983eb6", "sha256": "35231c8a97fc1996b867bf20bbed2454d5c745d47cf508f451e0732b44d1c07b"}, "downloads": -1, "filename": "skits-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "7554ac190389a017b2daa5b32e983eb6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9768, "upload_time": "2019-11-01T15:26:54", "upload_time_iso_8601": "2019-11-01T15:26:54.885535Z", "url": "https://files.pythonhosted.org/packages/ae/a5/ca821d084bddfaba4ffe67716823025d9b2c9b02d352818f1557d43d4dc4/skits-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ddd06b576461d37573fd059dfa3a85ff", "sha256": "6b0ab75184e13d7b9fb162718fbb29b508d7e22d222d006ced51a654e96f7ee0"}, "downloads": -1, "filename": "skits-0.1.1.tar.gz", "has_sig": false, "md5_digest": "ddd06b576461d37573fd059dfa3a85ff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8178, "upload_time": "2019-11-01T15:26:57", "upload_time_iso_8601": "2019-11-01T15:26:57.246882Z", "url": "https://files.pythonhosted.org/packages/51/24/dd4e7428c3c8035d9ace5a32dabe0165c9864d2c2245526d35154c30e617/skits-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "36b33b2d0a04effbc71a00610e0806c0", "sha256": "1b0d1d527a8ceda2f921ab62a5d194e2b0748fc36f82e29e9695f0d2a8167028"}, "downloads": -1, "filename": "skits-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "36b33b2d0a04effbc71a00610e0806c0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9751, "upload_time": "2019-11-01T20:30:16", "upload_time_iso_8601": "2019-11-01T20:30:16.438063Z", "url": "https://files.pythonhosted.org/packages/57/f7/00648e28f0e8491352f67db46334f9fd51faeecde920ac452ad16e90d7f3/skits-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "827c5f3644503efc3ad595737fcb1285", "sha256": "df5d183c1520c1debb36096a7d46f5e62266c45c372419f7429f95d6245a3b8b"}, "downloads": -1, "filename": "skits-0.1.2.tar.gz", "has_sig": false, "md5_digest": "827c5f3644503efc3ad595737fcb1285", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8112, "upload_time": "2019-11-01T20:30:17", "upload_time_iso_8601": "2019-11-01T20:30:17.938426Z", "url": "https://files.pythonhosted.org/packages/43/2b/4364aa0520373630de4b5689a71570d04bc32b9584139b93118ca1d7c3bd/skits-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "36b33b2d0a04effbc71a00610e0806c0", "sha256": "1b0d1d527a8ceda2f921ab62a5d194e2b0748fc36f82e29e9695f0d2a8167028"}, "downloads": -1, "filename": "skits-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "36b33b2d0a04effbc71a00610e0806c0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9751, "upload_time": "2019-11-01T20:30:16", "upload_time_iso_8601": "2019-11-01T20:30:16.438063Z", "url": "https://files.pythonhosted.org/packages/57/f7/00648e28f0e8491352f67db46334f9fd51faeecde920ac452ad16e90d7f3/skits-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "827c5f3644503efc3ad595737fcb1285", "sha256": "df5d183c1520c1debb36096a7d46f5e62266c45c372419f7429f95d6245a3b8b"}, "downloads": -1, "filename": "skits-0.1.2.tar.gz", "has_sig": false, "md5_digest": "827c5f3644503efc3ad595737fcb1285", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8112, "upload_time": "2019-11-01T20:30:17", "upload_time_iso_8601": "2019-11-01T20:30:17.938426Z", "url": "https://files.pythonhosted.org/packages/43/2b/4364aa0520373630de4b5689a71570d04bc32b9584139b93118ca1d7c3bd/skits-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:08:58 2020"}