{"info": {"author": "chenyiming", "author_email": "cymcpak00@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "# Baidu Map Api\n\n<!-- TOC -->\n\n- [Baidu Map Api](#baidu-map-api)\n    - [Description](#description)\n    - [Get Start](#get-start)\n    - [Handle](#handle)\n        - [Factory Mode](#factory-mode)\n        - [Agent Mode](#agent-mode)\n    - [Object](#object)\n        - [JsonLike](#jsonlike)\n            - [`__init__(json=dict(), **kwargs)`](#__init__jsondict-kwargs)\n            - [`__str__()`](#__str__)\n            - [`is_list()`](#is_list)\n            - [`get_property(p_key, p_default=None)`](#get_propertyp_key-p_defaultnone)\n            - [`get_properties(p_keys, p_defaults=None)`](#get_propertiesp_keys-p_defaultsnone)\n            - [`set_property(p_key, p_value)`](#set_propertyp_key-p_value)\n            - [`keys()`](#keys)\n            - [`from_json(json, **kwargs)`](#from_jsonjson-kwargs)\n            - [`to_json()`](#to_json)\n        - [Location(JsonLike)](#locationjsonlike)\n            - [`__str__()`](#__str__-1)\n        - [BaiduMapObject(JsonLike)](#baidumapobjectjsonlike)\n            - [`from_uid(handle, detail=False)`](#from_uidhandle-detailfalse)\n            - [`from_address(handle, detail=False)`](#from_addresshandle-detailfalse)\n            - [`from_location(handle, detail=False)`](#from_locationhandle-detailfalse)\n    - [Exception](#exception)\n        - [BaiduMapApiException](#baidumapapiexception)\n        - [HandleNotExistsError](#handlenotexistserror)\n        - [NetError](#neterror)\n        - [OtherError](#othererror)\n    - [How to work](#how-to-work)\n        - [core](#core)\n            - [collector](#collector)\n            - [controller](#controller)\n            - [status](#status)\n        - [util](#util)\n            - [dict_tool & list_tool](#dict_tool--list_tool)\n            - [url](#url)\n    - [Log](#log)\n        - [config](#config)\n\n<!-- /TOC -->\n\n## Description\n\nThis module is an python sdk for baidu map. You are only required to write a few code to get an execllent effect. Also, this module may work on another map api after some modification\n\nAuthor: cpak00@github\n\nEmail: cymcpak00@gmail.com\n\n## Get Start\n\n```bash\npip install baidumap\n```\n\ninstall with pip, requestes required only.\n\n test.py\n```python\nfrom baidumap import config\nfrom baidumap.api.handle import get_handle\nfrom baidumap.object import BaiduMapObject\n\nimport logging\n\n# get raw handler\nak_key = 'ZAMW5**********************'\nraw_handler = get_handle(ak_key)\n\n# get logger\nFORMAT = \"%(asctime)s %(thread)d %(message)s\"\nlogging.basicConfig(format=FORMAT, datefmt=\"[%Y-%m-%d %H:%M:%S]\")\nlogger = logging.getLogger()\nlogger.setLevel(logging.DEBUG)\n\nif __name__ == '__main__':\n    # log config(no necessary)\n    config.mode = config.value.DEBUG\n    config.logger = logger\n\n    # Agent Mode\n    print('---\\nAgent Mode:\\n')\n    raw_handler = get_handle(ak_key)\n    thu_main = BaiduMapObject(address='\u5317\u4eac\u5e02\u6e05\u534e\u5927\u5b66\u7d2b\u8346\u56ed\u9910\u5385')\n    thu_main.from_address(raw_handler)\n    print('from address find location: %s' %\n          thu_main.get_property('location')['location'])\n    print('from address find location: %s' % thu_main.get_properties(\n        ['lat', 'lng'], p_defaults={'lat': '-1',\n                                    'lng': '-1'}))\n    thu_main.from_location(raw_handler)\n    print('\\nfrom location find uid: %s' % thu_main.get_property('uid'))\n    print('and its name: %s' % thu_main.get_property('name'))\n\n    find_location = thu_main.get_properties(\n        ['uid', 'name'], p_defaults={'uid': '',\n                                     'name': ''})\n    print('--\\nfrom location find uid and name: %s' % find_location)\n\n    for index in find_location:\n        thu_main.from_json(find_location[index])\n        thu_main.from_uid(raw_handler, detail=True)\n        print('-\\nfrom uid find info:\\n%s' % thu_main)\n\n    # Factory Mode\n    print('---\\nFactory Mode:\\n')\n    iplocer = get_handle(ak_key, 'location/ip')\n    iplocer.set_params()\n    print(\n        iplocer.run(collect_keys=['address', 'content']).get_property(\n            'address')['address'])\n\n    print('---\\n')\n    placeser = get_handle(\n        ak_key,\n        'place/v2/search',\n        is_list=True,\n        query='ATM\u673a',\n        tag='\u94f6\u884c',\n        region='\u5317\u4eac', )\n    print(\n        placeser.run(page_size=20, max_page_num=1, max_result_num=15)\n        .get_property('address'))\n\n    # complex sample\n\n    # get zijing dormitory location from agent mode\n    thu_main = BaiduMapObject(address='\u5317\u4eac\u5e02\u6e05\u534e\u5927\u5b66\u7d2b\u8346\u5bbf\u820d')\n    thu_main.from_address(raw_handler)\n    thu_location = thu_main.get_property('location')['location']\n    print('---\\n\\n\u8d77\u59cb\u5750\u6807: %s' % (thu_location))\n\n    # get circle search handle from factory mode\n    # sort by distance\n    circleser = get_handle(\n        ak_key,\n        'place/v2/search',\n        is_list=True,\n        query='\u706b\u8f66\u7ad9',\n        scope=2,\n        filter='sort_name:distance|sort_rule:1')\n\n    circleser.set_params(radius=10000, location=thu_location)\n    nearest_station = circleser.run(max_result_num=5)['results'][0]\n\n    station_location = nearest_station.get_property('location')['location']\n    print('\u4e07\u7c73\u5185\u6700\u8fd1\u7684\u706b\u8f66\u7ad9: %s' % (nearest_station.get_property('name')['name']))\n\n    # get a handle to find road to hospital\n    router = get_handle(ak_key, 'direction/v2/transit', is_list=True)\n\n    router.set_params(origin=thu_location, destination=station_location)\n\n    result = router.run()\n    # print(repr(result))\n    station = result.get_properties(['on_station', 'off_station'])\n    print('\u63d0\u53d6\u51fa\u5168\u90e8\u7684on_station, off_station\u5c5e\u6027(\u5730\u94c1\u7ad9\u540d)')\n    print(station)\n```\n\n## Handle\n\n### Factory Mode\n\nGet handle from factory function `get_handle`\n```python\nfrom baidumap.api.handle import get_handle\n```\n\nUse name from [baidu map web api](http://lbsyun.baidu.com/index.php?title=webapi)\n\n---\n\nSample\n\nFrom [baidu map web api](http://lbsyun.baidu.com/index.php?title=webapi)\n\n\u884c\u653f\u533a\u5212\u533a\u57df\u68c0\u7d22\n\nhttp://api.map.baidu.com/place/v2/search?query=ATM\u673a&tag=\u94f6\u884c&region=\u5317\u4eac&output=json&ak=\u60a8\u7684ak //GET\u8bf7\u6c42\n\nThe api path is `http://api.map.baidu.com/place/v2/search` (the / in the end or not is very important)\n\nSo this handle's name is `place/v2/search`(just remove the head of the api path)\n\n```python\n# ak_key is the authority key of the baidu map\n# you need to apply for it from ('http://lbsyun.baidu.com/index.php?title=%E9%A6%96%E9%A1%B5')\nak_key = '********************'\n\n# you can set params when get it from factory\n# (the first two is not params, they are ak_key and handle's name)\n# set is_list: true to get multi-page result\nplace_search = get_handle(ak_key, 'place/v2/search', is_list=True)\n\n# then use method set_params() to set request parameter\nplace_search.set_params(query='ATM\u673a', region='\u5317\u4eac')\n\n# use method run to get result\n\n# you can limit the max_page_num(=-1 not limited), page_size(=10, limited by baidu mao), max_result_num(=-1 not limited) and interval(=0 second between each request(too frequently request will be block by baidu map and baidumap.api will raise baidumap.api.exceptions.BaiduMapApiException))\n\n# place_search.run([max_page_num=-1[, max_result_num=-1[, page_size=10[, interval=0]]]])\natm_in_beijing = place_search.run(max_page_num=3, page_size=20, max_result_num=55, interval=0.5)\n\n# get result\nprint(atm_in_beijing)\n# get property(find mode)\n# will return a dict\nprint(atm_in_beijing.get_property('address'))\n```\n\n---\n\n### Agent Mode\n\nYou can also use handle by __agent mode__\n\nfirst. you need to import **BaiduMapObject**\n```python\nfrom baidumap.object import BaiduMapObject\n```\n\nsecond. you need to create a BaiduMapObject with some keys and values\n```python\nthu_main = BaiduMapObject(address='\u5317\u4eac\u5e02\u6e05\u534e\u5927\u5b66\u7d2b\u8346\u5bbf\u820d')\n```\n\nthen. you need to create a raw handle with *ak_key*\n```python\nraw_handle = get_handle(ak_key)\n```\n\nfinally. you just call the agent method to fill the data of **BaiduMapObject**\n```python\n# geography decoder call\n# it will fill Object with location\nthu_main.from_address(handle)\n\n# geography encoder call\n# it will fill Object with address and uid found by location\n# it will create a list-like BaiduMapObject\nthu_main.from_location(handle)\n\n# create a object with uid\nthu_main = BaiduMapObject(uid=thu_main.get_property('uid')[0].uid)\n\n# uid info call\n# it will fill Object with detail info found by uid\nthu_main.from_uid(handle, detail=True)\n```\n\n## Object\n\n### JsonLike\n\n#### `__init__(json=dict(), **kwargs)`\n\n>**JsonLike** object can be inited with **list** or **dict**, you can replace some parameters by decalre *kwargs*\n\n#### `__str__()`\n\n>**JsonLike** object will be transfered as **str** just like **dict**\n\n#### `is_list()`\n\n>**JsonLike** object can be *dict-like* or *list-like* determined by which one init it\n\n#### `get_property(p_key, p_default=None)`\n\n>if you want to read value of **JsonLike**, this method is suggested, it will return a *dict*.\n\n>if there is only one result, it will return *dict* as {key: value}\n\n>if there are more results, it will return a *list-like* *dict* which contains location\n\n#### `get_properties(p_keys, p_defaults=None)`\n\n>you can combine two or more properties in one *list-like* *dict*\n\n#### `set_property(p_key, p_value)`\n\n>you can't set key-value using <**JsonLike**>[key]=value\n\n>you are supposed to set property with this method, if there is no *p_key* in the **JsonLike** object, you can not set it with this method\n\n#### `keys()`\n\n>return the keys in the **JsonLike** object\n\n#### `from_json(json, **kwargs)`\n\n>reconstruct the **JsonLike** object by *dict* or *list*, can replace some properties by *kwargs* \n\n#### `to_json()`\n\n>return *dict* in **JsonLike**\n\n### Location(JsonLike)\n\n#### `__str__()`\n\n>location will be formatted as lat,lng\n\n### BaiduMapObject(JsonLike)\n\n#### `from_uid(handle, detail=False)`\n\n>fill the **BaiduMapObject** by uid\n\n>needs a handle with valid ak_key\n\n#### `from_address(handle, detail=False)`\n\n>fill the **BaiduMapObject** by address\n\n>needs a handle with valid ak_key\n\n#### `from_location(handle, detail=False)`\n\n>fill the **BaiduMapObject** by location\n\n>needs a handle with valid ak_key\n\n## Exception\n\n### BaiduMapApiException\n\n>base exception\n\n>in baidumap.api.exception\n\n### HandleNotExistsError\n\n>inherit from **BaiduMapApiException**\n\n>handle name not valid\n\n>in baidumao.api.exception\n\n### NetError\n\n>inherit from **BaiduMapApiException**\n\n>net connection broken\n\n>in baidumao.api.exception\n\n### OtherError\n\n>inherit from **BaiduMapApiException**\n\n>error which can not be recognized\n\n>in baidumao.api.exception\n\n## How to work\n\n### core\n\n>package baidumap.core\n\n#### collector\n\n#### controller\n\n#### status\n\n### util\n\n>package baidumap.util\n\n#### dict_tool & list_tool\n\nsome safe operation functions\n\n#### url\n\nclass **Url**\n\nmanager the params and url path\n\nuse package *requests* to get json by http request[GET]\n\n## Log\n\n### config\n\n*baidumap.config.mode*\n\nvalue                | description\n---------------------|------------------------\nconfig.value.DEBUG   | log detail information\nconfig.value.INFO    | log important statement\nconfig.value.WARNING | log unsafe statement\nconfig.value.ERROR   | log error\nconfig.value.NONE    | no log\n\n*baidumap.config.filename*\n\nvalue      | description\n-----------|-------------\nNone       | directly record in shell\n**Logger** | use module logging", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/cpak00/baidumap", "keywords": "baidu,map,api,web", "license": "MIT Licence", "maintainer": "", "maintainer_email": "", "name": "baidumap", "package_url": "https://pypi.org/project/baidumap/", "platform": "any", "project_url": "https://pypi.org/project/baidumap/", "project_urls": {"Homepage": "https://github.com/cpak00/baidumap"}, "release_url": "https://pypi.org/project/baidumap/1.2.4/", "requires_dist": null, "requires_python": "", "summary": "api handle for baidu map", "version": "1.2.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Baidu Map Api</h1>\n\n<ul>\n<li><a href=\"#baidu-map-api\" rel=\"nofollow\">Baidu Map Api</a>\n<ul>\n<li><a href=\"#description\" rel=\"nofollow\">Description</a></li>\n<li><a href=\"#get-start\" rel=\"nofollow\">Get Start</a></li>\n<li><a href=\"#handle\" rel=\"nofollow\">Handle</a>\n<ul>\n<li><a href=\"#factory-mode\" rel=\"nofollow\">Factory Mode</a></li>\n<li><a href=\"#agent-mode\" rel=\"nofollow\">Agent Mode</a></li>\n</ul>\n</li>\n<li><a href=\"#object\" rel=\"nofollow\">Object</a>\n<ul>\n<li><a href=\"#jsonlike\" rel=\"nofollow\">JsonLike</a>\n<ul>\n<li><a href=\"#__init__jsondict-kwargs\" rel=\"nofollow\"><code>__init__(json=dict(), **kwargs)</code></a></li>\n<li><a href=\"#__str__\" rel=\"nofollow\"><code>__str__()</code></a></li>\n<li><a href=\"#is_list\" rel=\"nofollow\"><code>is_list()</code></a></li>\n<li><a href=\"#get_propertyp_key-p_defaultnone\" rel=\"nofollow\"><code>get_property(p_key, p_default=None)</code></a></li>\n<li><a href=\"#get_propertiesp_keys-p_defaultsnone\" rel=\"nofollow\"><code>get_properties(p_keys, p_defaults=None)</code></a></li>\n<li><a href=\"#set_propertyp_key-p_value\" rel=\"nofollow\"><code>set_property(p_key, p_value)</code></a></li>\n<li><a href=\"#keys\" rel=\"nofollow\"><code>keys()</code></a></li>\n<li><a href=\"#from_jsonjson-kwargs\" rel=\"nofollow\"><code>from_json(json, **kwargs)</code></a></li>\n<li><a href=\"#to_json\" rel=\"nofollow\"><code>to_json()</code></a></li>\n</ul>\n</li>\n<li><a href=\"#locationjsonlike\" rel=\"nofollow\">Location(JsonLike)</a>\n<ul>\n<li><a href=\"#__str__-1\" rel=\"nofollow\"><code>__str__()</code></a></li>\n</ul>\n</li>\n<li><a href=\"#baidumapobjectjsonlike\" rel=\"nofollow\">BaiduMapObject(JsonLike)</a>\n<ul>\n<li><a href=\"#from_uidhandle-detailfalse\" rel=\"nofollow\"><code>from_uid(handle, detail=False)</code></a></li>\n<li><a href=\"#from_addresshandle-detailfalse\" rel=\"nofollow\"><code>from_address(handle, detail=False)</code></a></li>\n<li><a href=\"#from_locationhandle-detailfalse\" rel=\"nofollow\"><code>from_location(handle, detail=False)</code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#exception\" rel=\"nofollow\">Exception</a>\n<ul>\n<li><a href=\"#baidumapapiexception\" rel=\"nofollow\">BaiduMapApiException</a></li>\n<li><a href=\"#handlenotexistserror\" rel=\"nofollow\">HandleNotExistsError</a></li>\n<li><a href=\"#neterror\" rel=\"nofollow\">NetError</a></li>\n<li><a href=\"#othererror\" rel=\"nofollow\">OtherError</a></li>\n</ul>\n</li>\n<li><a href=\"#how-to-work\" rel=\"nofollow\">How to work</a>\n<ul>\n<li><a href=\"#core\" rel=\"nofollow\">core</a>\n<ul>\n<li><a href=\"#collector\" rel=\"nofollow\">collector</a></li>\n<li><a href=\"#controller\" rel=\"nofollow\">controller</a></li>\n<li><a href=\"#status\" rel=\"nofollow\">status</a></li>\n</ul>\n</li>\n<li><a href=\"#util\" rel=\"nofollow\">util</a>\n<ul>\n<li><a href=\"#dict_tool--list_tool\" rel=\"nofollow\">dict_tool &amp; list_tool</a></li>\n<li><a href=\"#url\" rel=\"nofollow\">url</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#log\" rel=\"nofollow\">Log</a>\n<ul>\n<li><a href=\"#config\" rel=\"nofollow\">config</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n\n<h2>Description</h2>\n<p>This module is an python sdk for baidu map. You are only required to write a few code to get an execllent effect. Also, this module may work on another map api after some modification</p>\n<p>Author: cpak00@github</p>\n<p>Email: <a href=\"mailto:cymcpak00@gmail.com\">cymcpak00@gmail.com</a></p>\n<h2>Get Start</h2>\n<pre>pip install baidumap\n</pre>\n<p>install with pip, requestes required only.</p>\n<p>test.py</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">baidumap</span> <span class=\"kn\">import</span> <span class=\"n\">config</span>\n<span class=\"kn\">from</span> <span class=\"nn\">baidumap.api.handle</span> <span class=\"kn\">import</span> <span class=\"n\">get_handle</span>\n<span class=\"kn\">from</span> <span class=\"nn\">baidumap.object</span> <span class=\"kn\">import</span> <span class=\"n\">BaiduMapObject</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n\n<span class=\"c1\"># get raw handler</span>\n<span class=\"n\">ak_key</span> <span class=\"o\">=</span> <span class=\"s1\">'ZAMW5**********************'</span>\n<span class=\"n\">raw_handler</span> <span class=\"o\">=</span> <span class=\"n\">get_handle</span><span class=\"p\">(</span><span class=\"n\">ak_key</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># get logger</span>\n<span class=\"n\">FORMAT</span> <span class=\"o\">=</span> <span class=\"s2\">\"</span><span class=\"si\">%(asctime)s</span><span class=\"s2\"> </span><span class=\"si\">%(thread)d</span><span class=\"s2\"> </span><span class=\"si\">%(message)s</span><span class=\"s2\">\"</span>\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">basicConfig</span><span class=\"p\">(</span><span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"n\">FORMAT</span><span class=\"p\">,</span> <span class=\"n\">datefmt</span><span class=\"o\">=</span><span class=\"s2\">\"[%Y-%m-</span><span class=\"si\">%d</span><span class=\"s2\"> %H:%M:%S]\"</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">()</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">setLevel</span><span class=\"p\">(</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"c1\"># log config(no necessary)</span>\n    <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">mode</span> <span class=\"o\">=</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span>\n    <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logger</span>\n\n    <span class=\"c1\"># Agent Mode</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'---</span><span class=\"se\">\\n</span><span class=\"s1\">Agent Mode:</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n    <span class=\"n\">raw_handler</span> <span class=\"o\">=</span> <span class=\"n\">get_handle</span><span class=\"p\">(</span><span class=\"n\">ak_key</span><span class=\"p\">)</span>\n    <span class=\"n\">thu_main</span> <span class=\"o\">=</span> <span class=\"n\">BaiduMapObject</span><span class=\"p\">(</span><span class=\"n\">address</span><span class=\"o\">=</span><span class=\"s1\">'\u5317\u4eac\u5e02\u6e05\u534e\u5927\u5b66\u7d2b\u8346\u56ed\u9910\u5385'</span><span class=\"p\">)</span>\n    <span class=\"n\">thu_main</span><span class=\"o\">.</span><span class=\"n\">from_address</span><span class=\"p\">(</span><span class=\"n\">raw_handler</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'from address find location: </span><span class=\"si\">%s</span><span class=\"s1\">'</span> <span class=\"o\">%</span>\n          <span class=\"n\">thu_main</span><span class=\"o\">.</span><span class=\"n\">get_property</span><span class=\"p\">(</span><span class=\"s1\">'location'</span><span class=\"p\">)[</span><span class=\"s1\">'location'</span><span class=\"p\">])</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'from address find location: </span><span class=\"si\">%s</span><span class=\"s1\">'</span> <span class=\"o\">%</span> <span class=\"n\">thu_main</span><span class=\"o\">.</span><span class=\"n\">get_properties</span><span class=\"p\">(</span>\n        <span class=\"p\">[</span><span class=\"s1\">'lat'</span><span class=\"p\">,</span> <span class=\"s1\">'lng'</span><span class=\"p\">],</span> <span class=\"n\">p_defaults</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'lat'</span><span class=\"p\">:</span> <span class=\"s1\">'-1'</span><span class=\"p\">,</span>\n                                    <span class=\"s1\">'lng'</span><span class=\"p\">:</span> <span class=\"s1\">'-1'</span><span class=\"p\">}))</span>\n    <span class=\"n\">thu_main</span><span class=\"o\">.</span><span class=\"n\">from_location</span><span class=\"p\">(</span><span class=\"n\">raw_handler</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"se\">\\n</span><span class=\"s1\">from location find uid: </span><span class=\"si\">%s</span><span class=\"s1\">'</span> <span class=\"o\">%</span> <span class=\"n\">thu_main</span><span class=\"o\">.</span><span class=\"n\">get_property</span><span class=\"p\">(</span><span class=\"s1\">'uid'</span><span class=\"p\">))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'and its name: </span><span class=\"si\">%s</span><span class=\"s1\">'</span> <span class=\"o\">%</span> <span class=\"n\">thu_main</span><span class=\"o\">.</span><span class=\"n\">get_property</span><span class=\"p\">(</span><span class=\"s1\">'name'</span><span class=\"p\">))</span>\n\n    <span class=\"n\">find_location</span> <span class=\"o\">=</span> <span class=\"n\">thu_main</span><span class=\"o\">.</span><span class=\"n\">get_properties</span><span class=\"p\">(</span>\n        <span class=\"p\">[</span><span class=\"s1\">'uid'</span><span class=\"p\">,</span> <span class=\"s1\">'name'</span><span class=\"p\">],</span> <span class=\"n\">p_defaults</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'uid'</span><span class=\"p\">:</span> <span class=\"s1\">''</span><span class=\"p\">,</span>\n                                     <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">''</span><span class=\"p\">})</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'--</span><span class=\"se\">\\n</span><span class=\"s1\">from location find uid and name: </span><span class=\"si\">%s</span><span class=\"s1\">'</span> <span class=\"o\">%</span> <span class=\"n\">find_location</span><span class=\"p\">)</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">index</span> <span class=\"ow\">in</span> <span class=\"n\">find_location</span><span class=\"p\">:</span>\n        <span class=\"n\">thu_main</span><span class=\"o\">.</span><span class=\"n\">from_json</span><span class=\"p\">(</span><span class=\"n\">find_location</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">])</span>\n        <span class=\"n\">thu_main</span><span class=\"o\">.</span><span class=\"n\">from_uid</span><span class=\"p\">(</span><span class=\"n\">raw_handler</span><span class=\"p\">,</span> <span class=\"n\">detail</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'-</span><span class=\"se\">\\n</span><span class=\"s1\">from uid find info:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s1\">'</span> <span class=\"o\">%</span> <span class=\"n\">thu_main</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Factory Mode</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'---</span><span class=\"se\">\\n</span><span class=\"s1\">Factory Mode:</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n    <span class=\"n\">iplocer</span> <span class=\"o\">=</span> <span class=\"n\">get_handle</span><span class=\"p\">(</span><span class=\"n\">ak_key</span><span class=\"p\">,</span> <span class=\"s1\">'location/ip'</span><span class=\"p\">)</span>\n    <span class=\"n\">iplocer</span><span class=\"o\">.</span><span class=\"n\">set_params</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span>\n        <span class=\"n\">iplocer</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">collect_keys</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'address'</span><span class=\"p\">,</span> <span class=\"s1\">'content'</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">get_property</span><span class=\"p\">(</span>\n            <span class=\"s1\">'address'</span><span class=\"p\">)[</span><span class=\"s1\">'address'</span><span class=\"p\">])</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'---</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n    <span class=\"n\">placeser</span> <span class=\"o\">=</span> <span class=\"n\">get_handle</span><span class=\"p\">(</span>\n        <span class=\"n\">ak_key</span><span class=\"p\">,</span>\n        <span class=\"s1\">'place/v2/search'</span><span class=\"p\">,</span>\n        <span class=\"n\">is_list</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">query</span><span class=\"o\">=</span><span class=\"s1\">'ATM\u673a'</span><span class=\"p\">,</span>\n        <span class=\"n\">tag</span><span class=\"o\">=</span><span class=\"s1\">'\u94f6\u884c'</span><span class=\"p\">,</span>\n        <span class=\"n\">region</span><span class=\"o\">=</span><span class=\"s1\">'\u5317\u4eac'</span><span class=\"p\">,</span> <span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span>\n        <span class=\"n\">placeser</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">page_size</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"n\">max_page_num</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">max_result_num</span><span class=\"o\">=</span><span class=\"mi\">15</span><span class=\"p\">)</span>\n        <span class=\"o\">.</span><span class=\"n\">get_property</span><span class=\"p\">(</span><span class=\"s1\">'address'</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># complex sample</span>\n\n    <span class=\"c1\"># get zijing dormitory location from agent mode</span>\n    <span class=\"n\">thu_main</span> <span class=\"o\">=</span> <span class=\"n\">BaiduMapObject</span><span class=\"p\">(</span><span class=\"n\">address</span><span class=\"o\">=</span><span class=\"s1\">'\u5317\u4eac\u5e02\u6e05\u534e\u5927\u5b66\u7d2b\u8346\u5bbf\u820d'</span><span class=\"p\">)</span>\n    <span class=\"n\">thu_main</span><span class=\"o\">.</span><span class=\"n\">from_address</span><span class=\"p\">(</span><span class=\"n\">raw_handler</span><span class=\"p\">)</span>\n    <span class=\"n\">thu_location</span> <span class=\"o\">=</span> <span class=\"n\">thu_main</span><span class=\"o\">.</span><span class=\"n\">get_property</span><span class=\"p\">(</span><span class=\"s1\">'location'</span><span class=\"p\">)[</span><span class=\"s1\">'location'</span><span class=\"p\">]</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'---</span><span class=\"se\">\\n\\n</span><span class=\"s1\">\u8d77\u59cb\u5750\u6807: </span><span class=\"si\">%s</span><span class=\"s1\">'</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">thu_location</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># get circle search handle from factory mode</span>\n    <span class=\"c1\"># sort by distance</span>\n    <span class=\"n\">circleser</span> <span class=\"o\">=</span> <span class=\"n\">get_handle</span><span class=\"p\">(</span>\n        <span class=\"n\">ak_key</span><span class=\"p\">,</span>\n        <span class=\"s1\">'place/v2/search'</span><span class=\"p\">,</span>\n        <span class=\"n\">is_list</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">query</span><span class=\"o\">=</span><span class=\"s1\">'\u706b\u8f66\u7ad9'</span><span class=\"p\">,</span>\n        <span class=\"n\">scope</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span>\n        <span class=\"nb\">filter</span><span class=\"o\">=</span><span class=\"s1\">'sort_name:distance|sort_rule:1'</span><span class=\"p\">)</span>\n\n    <span class=\"n\">circleser</span><span class=\"o\">.</span><span class=\"n\">set_params</span><span class=\"p\">(</span><span class=\"n\">radius</span><span class=\"o\">=</span><span class=\"mi\">10000</span><span class=\"p\">,</span> <span class=\"n\">location</span><span class=\"o\">=</span><span class=\"n\">thu_location</span><span class=\"p\">)</span>\n    <span class=\"n\">nearest_station</span> <span class=\"o\">=</span> <span class=\"n\">circleser</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">max_result_num</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)[</span><span class=\"s1\">'results'</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n    <span class=\"n\">station_location</span> <span class=\"o\">=</span> <span class=\"n\">nearest_station</span><span class=\"o\">.</span><span class=\"n\">get_property</span><span class=\"p\">(</span><span class=\"s1\">'location'</span><span class=\"p\">)[</span><span class=\"s1\">'location'</span><span class=\"p\">]</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'\u4e07\u7c73\u5185\u6700\u8fd1\u7684\u706b\u8f66\u7ad9: </span><span class=\"si\">%s</span><span class=\"s1\">'</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">nearest_station</span><span class=\"o\">.</span><span class=\"n\">get_property</span><span class=\"p\">(</span><span class=\"s1\">'name'</span><span class=\"p\">)[</span><span class=\"s1\">'name'</span><span class=\"p\">]))</span>\n\n    <span class=\"c1\"># get a handle to find road to hospital</span>\n    <span class=\"n\">router</span> <span class=\"o\">=</span> <span class=\"n\">get_handle</span><span class=\"p\">(</span><span class=\"n\">ak_key</span><span class=\"p\">,</span> <span class=\"s1\">'direction/v2/transit'</span><span class=\"p\">,</span> <span class=\"n\">is_list</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n    <span class=\"n\">router</span><span class=\"o\">.</span><span class=\"n\">set_params</span><span class=\"p\">(</span><span class=\"n\">origin</span><span class=\"o\">=</span><span class=\"n\">thu_location</span><span class=\"p\">,</span> <span class=\"n\">destination</span><span class=\"o\">=</span><span class=\"n\">station_location</span><span class=\"p\">)</span>\n\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">router</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n    <span class=\"c1\"># print(repr(result))</span>\n    <span class=\"n\">station</span> <span class=\"o\">=</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">get_properties</span><span class=\"p\">([</span><span class=\"s1\">'on_station'</span><span class=\"p\">,</span> <span class=\"s1\">'off_station'</span><span class=\"p\">])</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'\u63d0\u53d6\u51fa\u5168\u90e8\u7684on_station, off_station\u5c5e\u6027(\u5730\u94c1\u7ad9\u540d)'</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">station</span><span class=\"p\">)</span>\n</pre>\n<h2>Handle</h2>\n<h3>Factory Mode</h3>\n<p>Get handle from factory function <code>get_handle</code></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">baidumap.api.handle</span> <span class=\"kn\">import</span> <span class=\"n\">get_handle</span>\n</pre>\n<p>Use name from <a href=\"http://lbsyun.baidu.com/index.php?title=webapi\" rel=\"nofollow\">baidu map web api</a></p>\n<hr>\n<p>Sample</p>\n<p>From <a href=\"http://lbsyun.baidu.com/index.php?title=webapi\" rel=\"nofollow\">baidu map web api</a></p>\n<p>\u884c\u653f\u533a\u5212\u533a\u57df\u68c0\u7d22</p>\n<p><a href=\"http://api.map.baidu.com/place/v2/search?query=ATM%E6%9C%BA&amp;tag=%E9%93%B6%E8%A1%8C&amp;region=%E5%8C%97%E4%BA%AC&amp;output=json&amp;ak=%E6%82%A8%E7%9A%84ak\" rel=\"nofollow\">http://api.map.baidu.com/place/v2/search?query=ATM\u673a&amp;tag=\u94f6\u884c&amp;region=\u5317\u4eac&amp;output=json&amp;ak=\u60a8\u7684ak</a> //GET\u8bf7\u6c42</p>\n<p>The api path is <code>http://api.map.baidu.com/place/v2/search</code> (the / in the end or not is very important)</p>\n<p>So this handle's name is <code>place/v2/search</code>(just remove the head of the api path)</p>\n<pre><span class=\"c1\"># ak_key is the authority key of the baidu map</span>\n<span class=\"c1\"># you need to apply for it from ('http://lbsyun.baidu.com/index.php?title=%E9%A6%96%E9%A1%B5')</span>\n<span class=\"n\">ak_key</span> <span class=\"o\">=</span> <span class=\"s1\">'********************'</span>\n\n<span class=\"c1\"># you can set params when get it from factory</span>\n<span class=\"c1\"># (the first two is not params, they are ak_key and handle's name)</span>\n<span class=\"c1\"># set is_list: true to get multi-page result</span>\n<span class=\"n\">place_search</span> <span class=\"o\">=</span> <span class=\"n\">get_handle</span><span class=\"p\">(</span><span class=\"n\">ak_key</span><span class=\"p\">,</span> <span class=\"s1\">'place/v2/search'</span><span class=\"p\">,</span> <span class=\"n\">is_list</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># then use method set_params() to set request parameter</span>\n<span class=\"n\">place_search</span><span class=\"o\">.</span><span class=\"n\">set_params</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"o\">=</span><span class=\"s1\">'ATM\u673a'</span><span class=\"p\">,</span> <span class=\"n\">region</span><span class=\"o\">=</span><span class=\"s1\">'\u5317\u4eac'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># use method run to get result</span>\n\n<span class=\"c1\"># you can limit the max_page_num(=-1 not limited), page_size(=10, limited by baidu mao), max_result_num(=-1 not limited) and interval(=0 second between each request(too frequently request will be block by baidu map and baidumap.api will raise baidumap.api.exceptions.BaiduMapApiException))</span>\n\n<span class=\"c1\"># place_search.run([max_page_num=-1[, max_result_num=-1[, page_size=10[, interval=0]]]])</span>\n<span class=\"n\">atm_in_beijing</span> <span class=\"o\">=</span> <span class=\"n\">place_search</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">max_page_num</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">page_size</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"n\">max_result_num</span><span class=\"o\">=</span><span class=\"mi\">55</span><span class=\"p\">,</span> <span class=\"n\">interval</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># get result</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">atm_in_beijing</span><span class=\"p\">)</span>\n<span class=\"c1\"># get property(find mode)</span>\n<span class=\"c1\"># will return a dict</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">atm_in_beijing</span><span class=\"o\">.</span><span class=\"n\">get_property</span><span class=\"p\">(</span><span class=\"s1\">'address'</span><span class=\"p\">))</span>\n</pre>\n<hr>\n<h3>Agent Mode</h3>\n<p>You can also use handle by <strong>agent mode</strong></p>\n<p>first. you need to import <strong>BaiduMapObject</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">baidumap.object</span> <span class=\"kn\">import</span> <span class=\"n\">BaiduMapObject</span>\n</pre>\n<p>second. you need to create a BaiduMapObject with some keys and values</p>\n<pre><span class=\"n\">thu_main</span> <span class=\"o\">=</span> <span class=\"n\">BaiduMapObject</span><span class=\"p\">(</span><span class=\"n\">address</span><span class=\"o\">=</span><span class=\"s1\">'\u5317\u4eac\u5e02\u6e05\u534e\u5927\u5b66\u7d2b\u8346\u5bbf\u820d'</span><span class=\"p\">)</span>\n</pre>\n<p>then. you need to create a raw handle with <em>ak_key</em></p>\n<pre><span class=\"n\">raw_handle</span> <span class=\"o\">=</span> <span class=\"n\">get_handle</span><span class=\"p\">(</span><span class=\"n\">ak_key</span><span class=\"p\">)</span>\n</pre>\n<p>finally. you just call the agent method to fill the data of <strong>BaiduMapObject</strong></p>\n<pre><span class=\"c1\"># geography decoder call</span>\n<span class=\"c1\"># it will fill Object with location</span>\n<span class=\"n\">thu_main</span><span class=\"o\">.</span><span class=\"n\">from_address</span><span class=\"p\">(</span><span class=\"n\">handle</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># geography encoder call</span>\n<span class=\"c1\"># it will fill Object with address and uid found by location</span>\n<span class=\"c1\"># it will create a list-like BaiduMapObject</span>\n<span class=\"n\">thu_main</span><span class=\"o\">.</span><span class=\"n\">from_location</span><span class=\"p\">(</span><span class=\"n\">handle</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># create a object with uid</span>\n<span class=\"n\">thu_main</span> <span class=\"o\">=</span> <span class=\"n\">BaiduMapObject</span><span class=\"p\">(</span><span class=\"n\">uid</span><span class=\"o\">=</span><span class=\"n\">thu_main</span><span class=\"o\">.</span><span class=\"n\">get_property</span><span class=\"p\">(</span><span class=\"s1\">'uid'</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">uid</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># uid info call</span>\n<span class=\"c1\"># it will fill Object with detail info found by uid</span>\n<span class=\"n\">thu_main</span><span class=\"o\">.</span><span class=\"n\">from_uid</span><span class=\"p\">(</span><span class=\"n\">handle</span><span class=\"p\">,</span> <span class=\"n\">detail</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<h2>Object</h2>\n<h3>JsonLike</h3>\n<h4><code>__init__(json=dict(), **kwargs)</code></h4>\n<blockquote>\n<p><strong>JsonLike</strong> object can be inited with <strong>list</strong> or <strong>dict</strong>, you can replace some parameters by decalre <em>kwargs</em></p>\n</blockquote>\n<h4><code>__str__()</code></h4>\n<blockquote>\n<p><strong>JsonLike</strong> object will be transfered as <strong>str</strong> just like <strong>dict</strong></p>\n</blockquote>\n<h4><code>is_list()</code></h4>\n<blockquote>\n<p><strong>JsonLike</strong> object can be <em>dict-like</em> or <em>list-like</em> determined by which one init it</p>\n</blockquote>\n<h4><code>get_property(p_key, p_default=None)</code></h4>\n<blockquote>\n<p>if you want to read value of <strong>JsonLike</strong>, this method is suggested, it will return a <em>dict</em>.</p>\n</blockquote>\n<blockquote>\n<p>if there is only one result, it will return <em>dict</em> as {key: value}</p>\n</blockquote>\n<blockquote>\n<p>if there are more results, it will return a <em>list-like</em> <em>dict</em> which contains location</p>\n</blockquote>\n<h4><code>get_properties(p_keys, p_defaults=None)</code></h4>\n<blockquote>\n<p>you can combine two or more properties in one <em>list-like</em> <em>dict</em></p>\n</blockquote>\n<h4><code>set_property(p_key, p_value)</code></h4>\n<blockquote>\n<p>you can't set key-value using &lt;<strong>JsonLike</strong>&gt;[key]=value</p>\n</blockquote>\n<blockquote>\n<p>you are supposed to set property with this method, if there is no <em>p_key</em> in the <strong>JsonLike</strong> object, you can not set it with this method</p>\n</blockquote>\n<h4><code>keys()</code></h4>\n<blockquote>\n<p>return the keys in the <strong>JsonLike</strong> object</p>\n</blockquote>\n<h4><code>from_json(json, **kwargs)</code></h4>\n<blockquote>\n<p>reconstruct the <strong>JsonLike</strong> object by <em>dict</em> or <em>list</em>, can replace some properties by <em>kwargs</em></p>\n</blockquote>\n<h4><code>to_json()</code></h4>\n<blockquote>\n<p>return <em>dict</em> in <strong>JsonLike</strong></p>\n</blockquote>\n<h3>Location(JsonLike)</h3>\n<h4><code>__str__()</code></h4>\n<blockquote>\n<p>location will be formatted as lat,lng</p>\n</blockquote>\n<h3>BaiduMapObject(JsonLike)</h3>\n<h4><code>from_uid(handle, detail=False)</code></h4>\n<blockquote>\n<p>fill the <strong>BaiduMapObject</strong> by uid</p>\n</blockquote>\n<blockquote>\n<p>needs a handle with valid ak_key</p>\n</blockquote>\n<h4><code>from_address(handle, detail=False)</code></h4>\n<blockquote>\n<p>fill the <strong>BaiduMapObject</strong> by address</p>\n</blockquote>\n<blockquote>\n<p>needs a handle with valid ak_key</p>\n</blockquote>\n<h4><code>from_location(handle, detail=False)</code></h4>\n<blockquote>\n<p>fill the <strong>BaiduMapObject</strong> by location</p>\n</blockquote>\n<blockquote>\n<p>needs a handle with valid ak_key</p>\n</blockquote>\n<h2>Exception</h2>\n<h3>BaiduMapApiException</h3>\n<blockquote>\n<p>base exception</p>\n</blockquote>\n<blockquote>\n<p>in baidumap.api.exception</p>\n</blockquote>\n<h3>HandleNotExistsError</h3>\n<blockquote>\n<p>inherit from <strong>BaiduMapApiException</strong></p>\n</blockquote>\n<blockquote>\n<p>handle name not valid</p>\n</blockquote>\n<blockquote>\n<p>in baidumao.api.exception</p>\n</blockquote>\n<h3>NetError</h3>\n<blockquote>\n<p>inherit from <strong>BaiduMapApiException</strong></p>\n</blockquote>\n<blockquote>\n<p>net connection broken</p>\n</blockquote>\n<blockquote>\n<p>in baidumao.api.exception</p>\n</blockquote>\n<h3>OtherError</h3>\n<blockquote>\n<p>inherit from <strong>BaiduMapApiException</strong></p>\n</blockquote>\n<blockquote>\n<p>error which can not be recognized</p>\n</blockquote>\n<blockquote>\n<p>in baidumao.api.exception</p>\n</blockquote>\n<h2>How to work</h2>\n<h3>core</h3>\n<blockquote>\n<p>package baidumap.core</p>\n</blockquote>\n<h4>collector</h4>\n<h4>controller</h4>\n<h4>status</h4>\n<h3>util</h3>\n<blockquote>\n<p>package baidumap.util</p>\n</blockquote>\n<h4>dict_tool &amp; list_tool</h4>\n<p>some safe operation functions</p>\n<h4>url</h4>\n<p>class <strong>Url</strong></p>\n<p>manager the params and url path</p>\n<p>use package <em>requests</em> to get json by http request[GET]</p>\n<h2>Log</h2>\n<h3>config</h3>\n<p><em>baidumap.config.mode</em></p>\n<table>\n<thead>\n<tr>\n<th>value</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>config.value.DEBUG</td>\n<td>log detail information</td>\n</tr>\n<tr>\n<td>config.value.INFO</td>\n<td>log important statement</td>\n</tr>\n<tr>\n<td>config.value.WARNING</td>\n<td>log unsafe statement</td>\n</tr>\n<tr>\n<td>config.value.ERROR</td>\n<td>log error</td>\n</tr>\n<tr>\n<td>config.value.NONE</td>\n<td>no log</td>\n</tr></tbody></table>\n<p><em>baidumap.config.filename</em></p>\n<table>\n<thead>\n<tr>\n<th>value</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>None</td>\n<td>directly record in shell</td>\n</tr>\n<tr>\n<td><strong>Logger</strong></td>\n<td>use module logging</td>\n</tr></tbody></table>\n\n          </div>"}, "last_serial": 4426687, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "4b654356c4eff77c5750511d2a882f59", "sha256": "491b308d6fb5ec87b70fad42b63b85b1e9bb714115c1a8b7de33971bca8838a4"}, "downloads": -1, "filename": "baidumap-1.0.0.tar.gz", "has_sig": false, "md5_digest": "4b654356c4eff77c5750511d2a882f59", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6310, "upload_time": "2018-10-29T06:52:48", "upload_time_iso_8601": "2018-10-29T06:52:48.715724Z", "url": "https://files.pythonhosted.org/packages/7e/64/92776547ad6c1246ea529e51c0126ab04b4d86030e4851dfb3535594e9ce/baidumap-1.0.0.tar.gz", "yanked": false}], "1.2.4": [{"comment_text": "", "digests": {"md5": "1392732a9aead20ca21be2a0701a8fa6", "sha256": "5a3965fb2126699af7d89f23228b3269f71924509b667ccb41e41222710a8f57"}, "downloads": -1, "filename": "baidumap-1.2.4.tar.gz", "has_sig": false, "md5_digest": "1392732a9aead20ca21be2a0701a8fa6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11329, "upload_time": "2018-10-29T08:31:16", "upload_time_iso_8601": "2018-10-29T08:31:16.392213Z", "url": "https://files.pythonhosted.org/packages/07/c0/2d4abcc5480ff191cfd902e75127e151eeb248b57d90c50bd72fa9b5c96c/baidumap-1.2.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1392732a9aead20ca21be2a0701a8fa6", "sha256": "5a3965fb2126699af7d89f23228b3269f71924509b667ccb41e41222710a8f57"}, "downloads": -1, "filename": "baidumap-1.2.4.tar.gz", "has_sig": false, "md5_digest": "1392732a9aead20ca21be2a0701a8fa6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11329, "upload_time": "2018-10-29T08:31:16", "upload_time_iso_8601": "2018-10-29T08:31:16.392213Z", "url": "https://files.pythonhosted.org/packages/07/c0/2d4abcc5480ff191cfd902e75127e151eeb248b57d90c50bd72fa9b5c96c/baidumap-1.2.4.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:15:03 2020"}