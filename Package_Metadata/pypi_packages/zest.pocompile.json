{"info": {"author": "Maurits van Rees", "author_email": "m.van.rees@zestsoftware.nl", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Framework :: Buildout", "License :: OSI Approved :: GNU General Public License (GPL)", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Internationalization"], "description": "Introduction\n============\n\nThis package compiles po files.\nIt contains a `zest.releaser`_ entrypoint and a stand-alone command line tool.\n\n\nGoal\n====\n\nYou want to release a package that has a ``locales`` dir\n(or ``locale``, or something else as long as it has a ``LC_MESSAGES`` folder somewhere in it)\nwith translations in ``.po`` files.\nYou want to include the compiled ``.mo`` files in your release as well,\nbut you do not want to keep those in a revision control system (like git) as they are binary and can be easily recreated.\nThat is good.\nThis package helps with that.\n\n\nWant ``.mo`` files?  Add a ``MANIFEST.in`` file.\n================================================\n\nWhen you use ``python setup.py sdist`` to create a source distribution, Python does *not* automatically include all files.\nIt might look at the information of the revision control system (RCS), but that may or may not work.\nThis depends on your RCS, your Python version, setuptools, or extra packages like ``setuptools-git``.\n\nSince the compiled ``.mo`` files are best not stored in git (or any other RCS), you need to give a hint on which files to include.\nYou do this by adding a ``MANIFEST.in`` file.\nLet's say your package has roughly these contents (not all files are shown)::\n\n  your.package/setup.py\n  your.package/your/package/locales/nl/LC_MESSAGES/domain.po\n\nThen you need a ``MANIFEST.in`` file like this::\n\n  recursive-include your *\n\nOr with a bigger example::\n\n  recursive-include your *\n  recursive-include docs *\n  include *\n  global-exclude *.pyc\n\nI will explain the lines one by one for clarity.\nAnd yes: I (Maurits) now simply go to this page on PyPI if I want to have an example of a proper ``MANIFEST.in`` file.\nSo this documentation is now getting slightly larger than strictly needed. :-)\n\n``recursive-include your *``\n  This tells distutils to recursively include all (``*``) files and directories within the ``your`` directory.\n  Try it: create a directory structure like the above example with a proper ``setup.py``,\n  copy the ``domain.po`` file to ``domain.mo`` as a silly test,\n  run ``python setup.py sdist``\n  and check that the ``.mo`` file ends up in the created distribution.\n\n``recursive-include docs *``\n  Include files in the ``docs`` directory.\n  If this directory does not exist, you will get a warning, so you may want to remove it then, but leaving it there does not hurt.\n\n``include *``\n  Include unrecognized files in the root directory.\n  Oterwise by default only standard files like ``README.txt``, ``setup.py``, and ``setup.cfg`` are included.\n  So for example a ``CHANGES.txt`` file must be explicitly included (here with ``*``).\n\n``global-exclude *.pyc``\n  This avoids unnecessarily adding compiled python files in the release.\n  When these are not there, for example after a fresh checkout, you will get a harmless warning: ``no previously-included files matching '*.pyc' found anywhere in distribution``.\n\nFor more info on creating a source distribution and how to use ``MANIFEST.in`` see the `Python distutils documentation <http://docs.python.org/distutils/sourcedist.html>`_\nor the `setuptools documentation <https://setuptools.readthedocs.io/en/latest/setuptools.html>`_.\n\nWith this part working, the only thing this ``zest.pocompile`` package needs to do, is to actually find all ``.po`` files and compile them to ``.mo`` files.\nIt simply looks for directories that are named ``LC_MESSAGES`` and compiles all ``.po`` files found in there.\n\n\nCommand line tool\n=================\n\nWhen you ``pip install zest.pocompile`` you get a command line tool ``pocompile``.\nWhen you run it, this walks the current directory, finds all po translation files in a properly formed locales directory, and compiles them into ``.mo`` files.\nYou can also give it a list of directories as arguments instead.\nRun it with the ``--help`` option to get some help.\n\nIn the above example, if you are in the ``your.package`` directory and run ``pocompile`` it will create this file::\n\n  your.package/your/package/locales/nl/LC_MESSAGES/domain.mo\n\n\nzest.releaser entry point\n=========================\n\nYou do not need `zest.releaser`_ for a proper functioning of ``zest.pocompile``.\nBut if you use the two together, in combination with a proper ``MANIFEST.in`` file, releasing a source distribution with compiled ``.mo`` files is made easy.\n\nThe ``release`` (or ``fullrelease``) command of ``zest.releaser`` creates a (git or other) tag and checks out this tag.\nThen it creates a source distribution (``sdist``) and possibly a wheel (``bdist_wheel``) and uploads it to PyPI.\nWhen ``zest.pocompile`` is added to the mix, it compiles the ``.po`` files immediately after checking out the tag.\nThis is right in time for creating the distributions, which should now contain the ``.mo`` files.\n\n\nCredits\n=======\n\nThis package has been cobbled together by Maurits van Rees.\n\nIt depends on the `python-gettext <https://pypi.org/project/python-gettext/>`_ package,.\nThis itself suggests using the `Babel <https://pypi.org/project/Babel/>`_ package.\nBut it does exactly what we need and its releases are stored on PyPI, so we ignore that suggestion.\n\nThe main functions are taken from the ``build_mo`` command of `collective.releaser <https://pypi.org/project/collective.releaser/>`_.\n\nThanks!\n\n\nTo Do\n=====\n\n- Add tests.\n\n\n.. _`zest.releaser`: https://pypi.org/project/zest.releaser/\n\nChangelog\n=========\n\n1.5.0 (2020-01-29)\n------------------\n\n- Claim Python 2 and 3 compatibility.\n  Seems to work fine.\n  [maurits]\n\n\n1.4 (2013-07-05)\n----------------\n\n- Moved to https://github.com/zestsoftware/zest.pocompile.\n  [maurits]\n\n\n1.3 (2011-12-16)\n----------------\n\n- Fixed the example MANIFEST.in.\n  [maurits]\n\n\n1.2 (2011-12-16)\n----------------\n\n- Added a larger example of a MANIFEST.in file in the readme.  Also\n  add a MANIFEST.in in zest.pocompile itself, so the CHANGES.txt is\n  included in the source distribution.\n  [maurits]\n\n\n1.1 (2011-12-15)\n----------------\n\n- Look for ``.po`` files in any ``LC_MESSAGES`` directory.  It no\n  longer matters if this is contained in a language directory within a\n  ``locales`` or ``locale`` directory, as they could also have names\n  like ``plonelocales`` or ``locales_for_version_2_only``.  Note that\n  in Plone ``.po`` files can also be in an i18n directory, but those\n  should not be compiled; this does not have a ``LC_MESSAGES``\n  directory, so we automatically skip it.\n  [maurits]\n\n\n1.0 (2010-10-19)\n----------------\n\n- Initial release\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/zestsoftware/zest.pocompile", "keywords": "i18n locales po compile release", "license": "GPL", "maintainer": "", "maintainer_email": "", "name": "zest.pocompile", "package_url": "https://pypi.org/project/zest.pocompile/", "platform": "", "project_url": "https://pypi.org/project/zest.pocompile/", "project_urls": {"Homepage": "https://github.com/zestsoftware/zest.pocompile"}, "release_url": "https://pypi.org/project/zest.pocompile/1.5.0/", "requires_dist": ["setuptools", "python-gettext"], "requires_python": "", "summary": "Compile po files when releasing a package", "version": "1.5.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"introduction\">\n<h2>Introduction</h2>\n<p>This package compiles po files.\nIt contains a <a href=\"https://pypi.org/project/zest.releaser/\" rel=\"nofollow\">zest.releaser</a> entrypoint and a stand-alone command line tool.</p>\n</div>\n<div id=\"goal\">\n<h2>Goal</h2>\n<p>You want to release a package that has a <tt>locales</tt> dir\n(or <tt>locale</tt>, or something else as long as it has a <tt>LC_MESSAGES</tt> folder somewhere in it)\nwith translations in <tt>.po</tt> files.\nYou want to include the compiled <tt>.mo</tt> files in your release as well,\nbut you do not want to keep those in a revision control system (like git) as they are binary and can be easily recreated.\nThat is good.\nThis package helps with that.</p>\n</div>\n<div id=\"want-mo-files-add-a-manifest-in-file\">\n<h2>Want <tt>.mo</tt> files?  Add a <tt>MANIFEST.in</tt> file.</h2>\n<p>When you use <tt>python setup.py sdist</tt> to create a source distribution, Python does <em>not</em> automatically include all files.\nIt might look at the information of the revision control system (RCS), but that may or may not work.\nThis depends on your RCS, your Python version, setuptools, or extra packages like <tt><span class=\"pre\">setuptools-git</span></tt>.</p>\n<p>Since the compiled <tt>.mo</tt> files are best not stored in git (or any other RCS), you need to give a hint on which files to include.\nYou do this by adding a <tt>MANIFEST.in</tt> file.\nLet\u2019s say your package has roughly these contents (not all files are shown):</p>\n<pre>your.package/setup.py\nyour.package/your/package/locales/nl/LC_MESSAGES/domain.po\n</pre>\n<p>Then you need a <tt>MANIFEST.in</tt> file like this:</p>\n<pre>recursive-include your *\n</pre>\n<p>Or with a bigger example:</p>\n<pre>recursive-include your *\nrecursive-include docs *\ninclude *\nglobal-exclude *.pyc\n</pre>\n<p>I will explain the lines one by one for clarity.\nAnd yes: I (Maurits) now simply go to this page on PyPI if I want to have an example of a proper <tt>MANIFEST.in</tt> file.\nSo this documentation is now getting slightly larger than strictly needed. :-)</p>\n<dl>\n<dt><tt><span class=\"pre\">recursive-include</span> your *</tt></dt>\n<dd>This tells distutils to recursively include all (<tt>*</tt>) files and directories within the <tt>your</tt> directory.\nTry it: create a directory structure like the above example with a proper <tt>setup.py</tt>,\ncopy the <tt>domain.po</tt> file to <tt>domain.mo</tt> as a silly test,\nrun <tt>python setup.py sdist</tt>\nand check that the <tt>.mo</tt> file ends up in the created distribution.</dd>\n<dt><tt><span class=\"pre\">recursive-include</span> docs *</tt></dt>\n<dd>Include files in the <tt>docs</tt> directory.\nIf this directory does not exist, you will get a warning, so you may want to remove it then, but leaving it there does not hurt.</dd>\n<dt><tt>include *</tt></dt>\n<dd>Include unrecognized files in the root directory.\nOterwise by default only standard files like <tt>README.txt</tt>, <tt>setup.py</tt>, and <tt>setup.cfg</tt> are included.\nSo for example a <tt>CHANGES.txt</tt> file must be explicitly included (here with <tt>*</tt>).</dd>\n<dt><tt><span class=\"pre\">global-exclude</span> *.pyc</tt></dt>\n<dd>This avoids unnecessarily adding compiled python files in the release.\nWhen these are not there, for example after a fresh checkout, you will get a harmless warning: <tt>no <span class=\"pre\">previously-included</span> files matching <span class=\"pre\">'*.pyc'</span> found anywhere in distribution</tt>.</dd>\n</dl>\n<p>For more info on creating a source distribution and how to use <tt>MANIFEST.in</tt> see the <a href=\"http://docs.python.org/distutils/sourcedist.html\" rel=\"nofollow\">Python distutils documentation</a>\nor the <a href=\"https://setuptools.readthedocs.io/en/latest/setuptools.html\" rel=\"nofollow\">setuptools documentation</a>.</p>\n<p>With this part working, the only thing this <tt>zest.pocompile</tt> package needs to do, is to actually find all <tt>.po</tt> files and compile them to <tt>.mo</tt> files.\nIt simply looks for directories that are named <tt>LC_MESSAGES</tt> and compiles all <tt>.po</tt> files found in there.</p>\n</div>\n<div id=\"command-line-tool\">\n<h2>Command line tool</h2>\n<p>When you <tt>pip install zest.pocompile</tt> you get a command line tool <tt>pocompile</tt>.\nWhen you run it, this walks the current directory, finds all po translation files in a properly formed locales directory, and compiles them into <tt>.mo</tt> files.\nYou can also give it a list of directories as arguments instead.\nRun it with the <tt><span class=\"pre\">--help</span></tt> option to get some help.</p>\n<p>In the above example, if you are in the <tt>your.package</tt> directory and run <tt>pocompile</tt> it will create this file:</p>\n<pre>your.package/your/package/locales/nl/LC_MESSAGES/domain.mo\n</pre>\n</div>\n<div id=\"zest-releaser-entry-point\">\n<h2>zest.releaser entry point</h2>\n<p>You do not need <a href=\"https://pypi.org/project/zest.releaser/\" rel=\"nofollow\">zest.releaser</a> for a proper functioning of <tt>zest.pocompile</tt>.\nBut if you use the two together, in combination with a proper <tt>MANIFEST.in</tt> file, releasing a source distribution with compiled <tt>.mo</tt> files is made easy.</p>\n<p>The <tt>release</tt> (or <tt>fullrelease</tt>) command of <tt>zest.releaser</tt> creates a (git or other) tag and checks out this tag.\nThen it creates a source distribution (<tt>sdist</tt>) and possibly a wheel (<tt>bdist_wheel</tt>) and uploads it to PyPI.\nWhen <tt>zest.pocompile</tt> is added to the mix, it compiles the <tt>.po</tt> files immediately after checking out the tag.\nThis is right in time for creating the distributions, which should now contain the <tt>.mo</tt> files.</p>\n</div>\n<div id=\"credits\">\n<h2>Credits</h2>\n<p>This package has been cobbled together by Maurits van Rees.</p>\n<p>It depends on the <a href=\"https://pypi.org/project/python-gettext/\" rel=\"nofollow\">python-gettext</a> package,.\nThis itself suggests using the <a href=\"https://pypi.org/project/Babel/\" rel=\"nofollow\">Babel</a> package.\nBut it does exactly what we need and its releases are stored on PyPI, so we ignore that suggestion.</p>\n<p>The main functions are taken from the <tt>build_mo</tt> command of <a href=\"https://pypi.org/project/collective.releaser/\" rel=\"nofollow\">collective.releaser</a>.</p>\n<p>Thanks!</p>\n</div>\n<div id=\"to-do\">\n<h2>To Do</h2>\n<ul>\n<li>Add tests.</li>\n</ul>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<div id=\"id1\">\n<h3>1.5.0 (2020-01-29)</h3>\n<ul>\n<li>Claim Python 2 and 3 compatibility.\nSeems to work fine.\n[maurits]</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>1.4 (2013-07-05)</h3>\n<ul>\n<li>Moved to <a href=\"https://github.com/zestsoftware/zest.pocompile\" rel=\"nofollow\">https://github.com/zestsoftware/zest.pocompile</a>.\n[maurits]</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>1.3 (2011-12-16)</h3>\n<ul>\n<li>Fixed the example MANIFEST.in.\n[maurits]</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3>1.2 (2011-12-16)</h3>\n<ul>\n<li>Added a larger example of a MANIFEST.in file in the readme.  Also\nadd a MANIFEST.in in zest.pocompile itself, so the CHANGES.txt is\nincluded in the source distribution.\n[maurits]</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3>1.1 (2011-12-15)</h3>\n<ul>\n<li>Look for <tt>.po</tt> files in any <tt>LC_MESSAGES</tt> directory.  It no\nlonger matters if this is contained in a language directory within a\n<tt>locales</tt> or <tt>locale</tt> directory, as they could also have names\nlike <tt>plonelocales</tt> or <tt>locales_for_version_2_only</tt>.  Note that\nin Plone <tt>.po</tt> files can also be in an i18n directory, but those\nshould not be compiled; this does not have a <tt>LC_MESSAGES</tt>\ndirectory, so we automatically skip it.\n[maurits]</li>\n</ul>\n</div>\n<div id=\"id6\">\n<h3>1.0 (2010-10-19)</h3>\n<ul>\n<li>Initial release</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6538378, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "40a20051394cb4d4797de6bab5d51804", "sha256": "61ae3e522e9e2bd66efdba489bfc1eb5107139744931e55325758d1cba97c116"}, "downloads": -1, "filename": "zest.pocompile-1.0.tar.gz", "has_sig": false, "md5_digest": "40a20051394cb4d4797de6bab5d51804", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5194, "upload_time": "2010-10-19T00:41:00", "upload_time_iso_8601": "2010-10-19T00:41:00.724470Z", "url": "https://files.pythonhosted.org/packages/71/a7/220bf8f2d91867fb53a72ddb5387b89296b6bd113ca944a2a9918a49ba85/zest.pocompile-1.0.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "f86605f738ba15f2cf87b9a6c4d14d03", "sha256": "3a7ecf42f2af72f7c9447c2a2bfdf1ad88a3d62c212c88176bc490806546731a"}, "downloads": -1, "filename": "zest.pocompile-1.1.tar.gz", "has_sig": false, "md5_digest": "f86605f738ba15f2cf87b9a6c4d14d03", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5550, "upload_time": "2011-12-15T14:51:00", "upload_time_iso_8601": "2011-12-15T14:51:00.180177Z", "url": "https://files.pythonhosted.org/packages/49/42/94470b3d64194d20cfcb508e1a07e9dc8075cd563859f4c16c9e27d90659/zest.pocompile-1.1.tar.gz", "yanked": false}], "1.2": [{"comment_text": "", "digests": {"md5": "4ad3b00a065bf1883b8de0e94b542c3e", "sha256": "4d5a5f419b57ad16b7f38de34ed8a8e67e59f5733eb1c4b028f4b8e487082ddd"}, "downloads": -1, "filename": "zest.pocompile-1.2.tar.gz", "has_sig": false, "md5_digest": "4ad3b00a065bf1883b8de0e94b542c3e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6108, "upload_time": "2011-12-16T14:46:30", "upload_time_iso_8601": "2011-12-16T14:46:30.017524Z", "url": "https://files.pythonhosted.org/packages/8c/72/9232a9c5bf3f7f226dbb3bb4841e6c920451d83e26a0350585b1b665c43f/zest.pocompile-1.2.tar.gz", "yanked": false}], "1.3": [{"comment_text": "", "digests": {"md5": "54de2b1212358108daa7dc5499656cdf", "sha256": "e0332ba2b6f3b38a0f2274c496be49e1834b3f6b81c7e18ab7346a4cb8975046"}, "downloads": -1, "filename": "zest.pocompile-1.3.tar.gz", "has_sig": false, "md5_digest": "54de2b1212358108daa7dc5499656cdf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6140, "upload_time": "2011-12-16T15:33:50", "upload_time_iso_8601": "2011-12-16T15:33:50.248603Z", "url": "https://files.pythonhosted.org/packages/e2/df/32fe46732548bbdf930003c0fcc6cc64440c507b606acee105373e9b4042/zest.pocompile-1.3.tar.gz", "yanked": false}], "1.4": [{"comment_text": "", "digests": {"md5": "a40b0384d2f5dceb374170d7afc8e559", "sha256": "5fef08b6b6e0d2f5255b7ee1be0e9021300f4504b243a6c5a52ca497355230cf"}, "downloads": -1, "filename": "zest.pocompile-1.4.zip", "has_sig": false, "md5_digest": "a40b0384d2f5dceb374170d7afc8e559", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16495, "upload_time": "2013-07-05T17:14:58", "upload_time_iso_8601": "2013-07-05T17:14:58.125029Z", "url": "https://files.pythonhosted.org/packages/44/42/6189f119fa6776c7725da9fbc767886f38ace040297d559785640591f9ad/zest.pocompile-1.4.zip", "yanked": false}], "1.5.0": [{"comment_text": "", "digests": {"md5": "32b71777a5d29945c37132ab69faa7ea", "sha256": "f32b2a9aca0537be88babb84b44b22432e88816df958e9f430f5b09145c65ca3"}, "downloads": -1, "filename": "zest.pocompile-1.5.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "32b71777a5d29945c37132ab69faa7ea", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 6740, "upload_time": "2020-01-29T15:02:00", "upload_time_iso_8601": "2020-01-29T15:02:00.570790Z", "url": "https://files.pythonhosted.org/packages/7f/61/6130eaf55c28168ba25b05b1a6abd11969123af2f79c1dc355855d30df02/zest.pocompile-1.5.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d292067298f038109cb464925f316340", "sha256": "a07226df38837c2ff809b24e1e9d86c3f2ecec9af42099e8605f92db28e4af8f"}, "downloads": -1, "filename": "zest.pocompile-1.5.0.tar.gz", "has_sig": false, "md5_digest": "d292067298f038109cb464925f316340", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6242, "upload_time": "2020-01-29T15:02:02", "upload_time_iso_8601": "2020-01-29T15:02:02.647181Z", "url": "https://files.pythonhosted.org/packages/1f/63/aa52830e73317729b5acdcd3a9788d8daf578fd66a102651d3c23023739c/zest.pocompile-1.5.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "32b71777a5d29945c37132ab69faa7ea", "sha256": "f32b2a9aca0537be88babb84b44b22432e88816df958e9f430f5b09145c65ca3"}, "downloads": -1, "filename": "zest.pocompile-1.5.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "32b71777a5d29945c37132ab69faa7ea", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 6740, "upload_time": "2020-01-29T15:02:00", "upload_time_iso_8601": "2020-01-29T15:02:00.570790Z", "url": "https://files.pythonhosted.org/packages/7f/61/6130eaf55c28168ba25b05b1a6abd11969123af2f79c1dc355855d30df02/zest.pocompile-1.5.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d292067298f038109cb464925f316340", "sha256": "a07226df38837c2ff809b24e1e9d86c3f2ecec9af42099e8605f92db28e4af8f"}, "downloads": -1, "filename": "zest.pocompile-1.5.0.tar.gz", "has_sig": false, "md5_digest": "d292067298f038109cb464925f316340", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6242, "upload_time": "2020-01-29T15:02:02", "upload_time_iso_8601": "2020-01-29T15:02:02.647181Z", "url": "https://files.pythonhosted.org/packages/1f/63/aa52830e73317729b5acdcd3a9788d8daf578fd66a102651d3c23023739c/zest.pocompile-1.5.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:17:30 2020"}