{"info": {"author": "Zope Developers", "author_email": "zodb-dev@zope.org", "bugtrack_url": null, "classifiers": ["Development Status :: 6 - Mature", "Framework :: Zope :: 2", "Framework :: Zope :: 3", "Framework :: Zope :: 4", "License :: OSI Approved :: Zope Public License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: Implementation :: CPython"], "description": "=============================================================\nzodbupdate - Update existing databases to match your software\n=============================================================\n\nThis package provides a tool that automatically identifies and updates\nreferences from persistent objects to classes that are in the process of being\nmoved from one module to another and/or being renamed.\n\nIf a class is being moved or renamed, you need to update all references from\nyour database to the new name before finally deleting the old code.\n\nThis tool looks through all current objects of your database,\nidentifies moved/renamed classes and `touches` objects accordingly. It\ncreates transactions that contains the update of your database (one\ntransaction every 100,000 records).\n\nHaving run this tool, you are then free to delete the old code.\n\n.. contents::\n\nUsage\n=====\n\nInstalling the egg of this tool provides a console script `zodbupdate` which\nyou can call giving either a FileStorage filename or a configuration file\ndefining a storage::\n\n    $ zodbupdate -f Data.fs\n    $ zodbupdate -c zodb.conf\n\nDetailed usage information is available:\n\n    $ zodbupdate -h\n\nCustom software/eggs\n--------------------\n\nIt is important to install this egg in an interpreter/environment where your\nsoftware is installed as well. If you're using a regular Python installation\nor virtualenv, just installing the package using easy_install should be fine.\n\nIf you are using buildout, installing can be done using the egg recipe with\nthis configuration::\n\n    [buildout]\n    parts += zodbupdate\n\n    [zodbupdate]\n    recipe = zc.recipe.egg\n    eggs = zodbupdate\n        <list additional eggs here>\n\nIf you do not install `zodbupdate` together with the necessary software it\nwill report missing classes and not touch your database.\n\nNon-FileStorage configurations\n------------------------------\n\nYou can configure any storage known to your ZODB installation by providing a\nZConfig configuration file (similar to zope.conf). For example you can connect\nto a ZEO server by providing a config file `zeo.conf`::\n\n    <zeoclient>\n        server 127.0.0.1:8100\n        storage 1\n    </zeoclient>\n\nAnd then running `zodbupdate` using:\n\n    $ zodbupdate -c zeo.conf\n\n\nPre-defined rename rules\n------------------------\n\nRename rules can be defined using an entry point called ``zodbupdate``::\n\n    setup(...\n          entry_points = \"\"\"\n          [zodbupdate]\n          renames = mypackage.mymodule:rename_dict\n          \"\"\")\n\nThese can also be defined in python::\n\n    setup(...\n          entry_points={\n            'zodbupdate': ['renames = mypackage.mymodule:rename_dict'],\n          })\n\nThose entry points must points to dictionaries that map old class\nnames to new class names::\n\n    rename_dict = {\n        'mypackage.mymodule ClassName':\n        'otherpackage.othermodule OtherClass'}\n\nAs soon as you have rules defined, you can already remove the old\nimport location mentioned in them.\n\n\nPacking\n-------\n\nThe option ``--pack`` will pack the storage on success. (You tell your\nusers to use that option. If they never pack their storage, it is a good\noccasion).\n\n\nConverting to Python 3\n----------------------\n\n``zodbupdate`` can be used to migrate a database created with a Python\n2 application to be usable with the same application in Python 3. To\naccomplish this, you need to:\n\n1. Stop your application. Nothing should be written to the database\n   while the migration is running.\n\n2. Update your Python 2 application to use the latest ZODB version. It\n   will not work with ZODB 3.\n\n3. With Python 2, run ``zodbupdate --pack --convert-py3``.\n\nIf you use a Data.fs we recommend you to use the ``-f`` option to\nspecify your database. After the conversion the magic header of the\ndatabase will be updated so that you will be able to open the database\nwith Python 3.\n\nIf you use a different storage (like RelStorage), be sure you will be\nconnecting to it using your Python 3 application after the\nmigration. You will still be able to connect to your database and use\nyour application with Python 2 without errors, but then you will need\nto convert it again to Python 3.\n\nWhile the pack is not required, it is highly recommended.\n\nThe conversion will take care of the following tasks:\n\n- Updating stored Python datetime, date and time objects to use\n  Python 3 bytes,\n\n- Updating ZODB references to use Python 3 bytes.\n\n- Optionally convert stored strings to either unicode or bytes pending\n  your configuration.\n\nIf your application expect to use bytes in Python 3, they must be\nstored as such in the database, and all other strings must be stored\nas unicode string, if they contain other characters than ascii characters.\n\nWhen using ``--convert-py3``, ``zodbupdate`` will load a set of\ndecoders from the entry points::\n\n    setup(...\n          entry_points = \"\"\"\n          [zodbupdate.decode]\n          decodes = mypackage.mymodule:decode_dict\n          \"\"\")\n\nDecoders are dictionaries that specifies as keys attributes on\nPersistent classes that must either be encoded as bytes (if the value\nis ``binary``) or decoded to unicode using value as encoding (for\ninstance ``utf-8`` here)::\n\n    decode_dict = {\n       'mypackage.mymodule ClassName attribute': 'binary',\n       'otherpackage.othermodule OtherClass other_attribute': 'utf-8'}\n\nPlease note that for the moment only attributes on Persistent classes\nare supported.\n\nPlease also note that these conversion rules are _only_ selected for the \nclass that is referenced in the pickle, rules for superclasses are _not_ \napplied. This means that you have to push down annotation rules to all \nthe subclasses of a superclass that has a field that needs this annotation.\n\nConverting to Python 3 from within Python 3\n-------------------------------------------\n\n``zodbupdate`` can also be run from within Python 3 to convert a database\ncreated with Python 2 to be usable in Python 3. However this works\nslightly differently than when running the conversion using Python 2.\nIn Python 3 you must specify a default encoding to use while unpickling strings:\n``zodbupdate --pack --convert-py3 --encoding utf-8``.\n\nFor each string in the database, zodbupdate will convert it as follows:\n\n1. If it's an attribute configured explicitly via a decoder as described\n   above, it will be decoded or encoded as specified there.\n2. Otherwise the value will be decoded using the encoding specified\n   on the command line.\n3. If there is an error while decoding using the encoding specified\n   on the command line, the value will be stored as bytes.\n\nProblems and solutions\n----------------------\n\nYour Data.fs has POSKey errors\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf you call `zodbupdate` with ``-f`` and the path to your Data.fs,\nrecords triggering those errors will be ignored.\n\nYou have an another error\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nWe recommend to run zodbupdate with ``-v -d`` to get the\nmaximum of information.\n\nIf you are working on big storages, you can use the option ``-o`` to\nre-run `zodbupdate` at a failing record you previously encountered\nafterward.\n\nChanges\n=======\n\n1.4 (2019-08-23)\n----------------\n- Fail with explanation when opening a Python 2 ZODB with --dry-run on Python 3\n  (`#22 <https://github.com/zopefoundation/zodbupdate/issues/22>`_)\n\n\n1.3 (2019-07-30)\n----------------\n\n- Support converting sets.Set() objects from ancient Python 2 versions.\n  (`issue 23 <https://github.com/zopefoundation/zodbupdate/issue/23>`_)\n\n- Convert set objects to ``builtins.set`` without relying on ZODB.broken.rebuild.\n  (`issue 25 <https://github.com/zopefoundation/zodbupdate/pull/25>`_)\n\n\n1.2 (2019-05-09)\n----------------\n\n- Enable fallback encodings for Python 3 conversion for old/grown ZODBs using\n  the new command line option ``--encoding-fallback``.\n  (`#15 <https://github.com/zopefoundation/zodbupdate/pull/15>`_)\n\n- Switch to use `argparse` as `optparse` is deprecated.\n\n- Add ability to run the Python 3 migration with a default encoding for\n  ``str`` objects.\n  (`#14 <https://github.com/zopefoundation/zodbupdate/pull/14>`_)\n\n- Fix updating records that reference a broken interface\n  when the interface's top-level module is missing.\n\n- Fixed skipping of blob records so that oids in references to blobs\n  are still converted.\n\n- Add support for Python 3.8a3.\n\n- Drop support for Python 3.4.\n\n\n1.1 (2018-10-05)\n----------------\n\n- Skip records for ZODB.blob when migrating database to Python 3 to not break\n  references to blobfiles.\n\n- When migrating databases to Python 3, do not fail when converting\n  attributes containing None.\n\n- Fix tests on Python 2 with ZODB >= 5.4.0, which now uses pickle\n  protocol 3.\n\n- Fix `is_broken` check for old-style class instances.\n\n- Add support for Python 3.7.\n\n- Drop PyPy support.\n\n\n1.0 (2018-02-13)\n----------------\n\n- Support Python 2.7 and 3.4, 3.5 and 3.6 and pypy 3. Drop any older\n  version of Python.\n\n- The option to the select the pickler (``--pickler``) has been\n  removed. This was only useful if you had extension classes with\n  Python 2.5 or less.\n\n- Added an option to convert a database to Python 3.\n\n0.5 (2010-10-07)\n----------------\n\n- More debug logging shows now the currently processed OID\n  (that is helpful to determine which object misses the factory).\n\n- Support for missing factories have been improved: an error used to\n  occur if a pickle needed an update and contained a reference to a\n  missing class (not instance of this class). This case is now fixed.\n\n- Python 2.4 is no longer supported. Please stick to version 0.3 if\n  you need Python 2.4 support.\n\n\n\n0.4 (2010-07-14)\n----------------\n\n- Add an option to debug broken records.\n\n- Add an option to skip records.\n\n- Add an option to use Python unPickler instead of C one. This let you\n  debug records. As well Python unPickler let you update old ExtensionClass\n  records who had a special hack in the past.\n\n- Broken interfaces are well supported now (if you did alsoProvides with them).\n\n\n0.3 (2010-02-02)\n----------------\n\n- Unplickle and re-pickle the code to rename references to moved classes.\n  This make the script works on database created with older versions of\n  ZODB.\n\n- If you are working directly with a FileStorage, POSKeyError are reported\n  but non-fatal.\n\n- Remove superfluous code that tried to prevent commits when no changes\n  happened: ZODB does this all by itself already.\n\n0.2 (2009-06-23)\n----------------\n\n- Add option to store the rename rules into a file.\n\n- Don't commit transactions that have no changes.\n\n- Load rename rules from entry points ``zodbupdate``.\n\n- Compatibility with Python 2.4\n\n- Rename from ``zodbupgrade`` to ``zodbupdate``.\n\n- Add 'verbose' option.\n\n- Improve logging.\n\n- Suppress duplicate log messages (e.g. if the same class is missing in\n  multiple objects).\n\n- Improve the updating process: rewrite pickle opcodes instead of blindly\n  touching a class. This also allows updating pickles that can't be unpickled\n  due to missing classes.\n\n0.1 (2009-06-08)\n----------------\n\n- First release.", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/zopefoundation/zodbupdate/", "keywords": "", "license": "ZPL 2.1", "maintainer": "", "maintainer_email": "", "name": "zodbupdate", "package_url": "https://pypi.org/project/zodbupdate/", "platform": "", "project_url": "https://pypi.org/project/zodbupdate/", "project_urls": {"Homepage": "https://github.com/zopefoundation/zodbupdate/"}, "release_url": "https://pypi.org/project/zodbupdate/1.4/", "requires_dist": null, "requires_python": "", "summary": "Update ZODB class references for moved or renamed classes.", "version": "1.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This package provides a tool that automatically identifies and updates\nreferences from persistent objects to classes that are in the process of being\nmoved from one module to another and/or being renamed.</p>\n<p>If a class is being moved or renamed, you need to update all references from\nyour database to the new name before finally deleting the old code.</p>\n<p>This tool looks through all current objects of your database,\nidentifies moved/renamed classes and <cite>touches</cite> objects accordingly. It\ncreates transactions that contains the update of your database (one\ntransaction every 100,000 records).</p>\n<p>Having run this tool, you are then free to delete the old code.</p>\n<div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#usage\" id=\"id14\" rel=\"nofollow\">Usage</a><ul>\n<li><a href=\"#custom-software-eggs\" id=\"id15\" rel=\"nofollow\">Custom software/eggs</a></li>\n<li><a href=\"#non-filestorage-configurations\" id=\"id16\" rel=\"nofollow\">Non-FileStorage configurations</a></li>\n<li><a href=\"#pre-defined-rename-rules\" id=\"id17\" rel=\"nofollow\">Pre-defined rename rules</a></li>\n<li><a href=\"#packing\" id=\"id18\" rel=\"nofollow\">Packing</a></li>\n<li><a href=\"#converting-to-python-3\" id=\"id19\" rel=\"nofollow\">Converting to Python 3</a></li>\n<li><a href=\"#converting-to-python-3-from-within-python-3\" id=\"id20\" rel=\"nofollow\">Converting to Python 3 from within Python 3</a></li>\n<li><a href=\"#problems-and-solutions\" id=\"id21\" rel=\"nofollow\">Problems and solutions</a><ul>\n<li><a href=\"#your-data-fs-has-poskey-errors\" id=\"id22\" rel=\"nofollow\">Your Data.fs has POSKey errors</a></li>\n<li><a href=\"#you-have-an-another-error\" id=\"id23\" rel=\"nofollow\">You have an another error</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#changes\" id=\"id24\" rel=\"nofollow\">Changes</a><ul>\n<li><a href=\"#id1\" id=\"id25\" rel=\"nofollow\">1.4 (2019-08-23)</a></li>\n<li><a href=\"#id3\" id=\"id26\" rel=\"nofollow\">1.3 (2019-07-30)</a></li>\n<li><a href=\"#id4\" id=\"id27\" rel=\"nofollow\">1.2 (2019-05-09)</a></li>\n<li><a href=\"#id7\" id=\"id28\" rel=\"nofollow\">1.1 (2018-10-05)</a></li>\n<li><a href=\"#id8\" id=\"id29\" rel=\"nofollow\">1.0 (2018-02-13)</a></li>\n<li><a href=\"#id9\" id=\"id30\" rel=\"nofollow\">0.5 (2010-10-07)</a></li>\n<li><a href=\"#id10\" id=\"id31\" rel=\"nofollow\">0.4 (2010-07-14)</a></li>\n<li><a href=\"#id11\" id=\"id32\" rel=\"nofollow\">0.3 (2010-02-02)</a></li>\n<li><a href=\"#id12\" id=\"id33\" rel=\"nofollow\">0.2 (2009-06-23)</a></li>\n<li><a href=\"#id13\" id=\"id34\" rel=\"nofollow\">0.1 (2009-06-08)</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"usage\">\n<h2><a href=\"#id14\" rel=\"nofollow\">Usage</a></h2>\n<p>Installing the egg of this tool provides a console script <cite>zodbupdate</cite> which\nyou can call giving either a FileStorage filename or a configuration file\ndefining a storage:</p>\n<pre>$ zodbupdate -f Data.fs\n$ zodbupdate -c zodb.conf\n</pre>\n<p>Detailed usage information is available:</p>\n<blockquote>\n$ zodbupdate -h</blockquote>\n<div id=\"custom-software-eggs\">\n<h3><a href=\"#id15\" rel=\"nofollow\">Custom software/eggs</a></h3>\n<p>It is important to install this egg in an interpreter/environment where your\nsoftware is installed as well. If you\u2019re using a regular Python installation\nor virtualenv, just installing the package using easy_install should be fine.</p>\n<p>If you are using buildout, installing can be done using the egg recipe with\nthis configuration:</p>\n<pre>[buildout]\nparts += zodbupdate\n\n[zodbupdate]\nrecipe = zc.recipe.egg\neggs = zodbupdate\n    &lt;list additional eggs here&gt;\n</pre>\n<p>If you do not install <cite>zodbupdate</cite> together with the necessary software it\nwill report missing classes and not touch your database.</p>\n</div>\n<div id=\"non-filestorage-configurations\">\n<h3><a href=\"#id16\" rel=\"nofollow\">Non-FileStorage configurations</a></h3>\n<p>You can configure any storage known to your ZODB installation by providing a\nZConfig configuration file (similar to zope.conf). For example you can connect\nto a ZEO server by providing a config file <cite>zeo.conf</cite>:</p>\n<pre>&lt;zeoclient&gt;\n    server 127.0.0.1:8100\n    storage 1\n&lt;/zeoclient&gt;\n</pre>\n<p>And then running <cite>zodbupdate</cite> using:</p>\n<blockquote>\n$ zodbupdate -c zeo.conf</blockquote>\n</div>\n<div id=\"pre-defined-rename-rules\">\n<h3><a href=\"#id17\" rel=\"nofollow\">Pre-defined rename rules</a></h3>\n<p>Rename rules can be defined using an entry point called <tt>zodbupdate</tt>:</p>\n<pre>setup(...\n      entry_points = \"\"\"\n      [zodbupdate]\n      renames = mypackage.mymodule:rename_dict\n      \"\"\")\n</pre>\n<p>These can also be defined in python:</p>\n<pre>setup(...\n      entry_points={\n        'zodbupdate': ['renames = mypackage.mymodule:rename_dict'],\n      })\n</pre>\n<p>Those entry points must points to dictionaries that map old class\nnames to new class names:</p>\n<pre>rename_dict = {\n    'mypackage.mymodule ClassName':\n    'otherpackage.othermodule OtherClass'}\n</pre>\n<p>As soon as you have rules defined, you can already remove the old\nimport location mentioned in them.</p>\n</div>\n<div id=\"packing\">\n<h3><a href=\"#id18\" rel=\"nofollow\">Packing</a></h3>\n<p>The option <tt><span class=\"pre\">--pack</span></tt> will pack the storage on success. (You tell your\nusers to use that option. If they never pack their storage, it is a good\noccasion).</p>\n</div>\n<div id=\"converting-to-python-3\">\n<h3><a href=\"#id19\" rel=\"nofollow\">Converting to Python 3</a></h3>\n<p><tt>zodbupdate</tt> can be used to migrate a database created with a Python\n2 application to be usable with the same application in Python 3. To\naccomplish this, you need to:</p>\n<ol>\n<li>Stop your application. Nothing should be written to the database\nwhile the migration is running.</li>\n<li>Update your Python 2 application to use the latest ZODB version. It\nwill not work with ZODB 3.</li>\n<li>With Python 2, run <tt>zodbupdate <span class=\"pre\">--pack</span> <span class=\"pre\">--convert-py3</span></tt>.</li>\n</ol>\n<p>If you use a Data.fs we recommend you to use the <tt><span class=\"pre\">-f</span></tt> option to\nspecify your database. After the conversion the magic header of the\ndatabase will be updated so that you will be able to open the database\nwith Python 3.</p>\n<p>If you use a different storage (like RelStorage), be sure you will be\nconnecting to it using your Python 3 application after the\nmigration. You will still be able to connect to your database and use\nyour application with Python 2 without errors, but then you will need\nto convert it again to Python 3.</p>\n<p>While the pack is not required, it is highly recommended.</p>\n<p>The conversion will take care of the following tasks:</p>\n<ul>\n<li>Updating stored Python datetime, date and time objects to use\nPython 3 bytes,</li>\n<li>Updating ZODB references to use Python 3 bytes.</li>\n<li>Optionally convert stored strings to either unicode or bytes pending\nyour configuration.</li>\n</ul>\n<p>If your application expect to use bytes in Python 3, they must be\nstored as such in the database, and all other strings must be stored\nas unicode string, if they contain other characters than ascii characters.</p>\n<p>When using <tt><span class=\"pre\">--convert-py3</span></tt>, <tt>zodbupdate</tt> will load a set of\ndecoders from the entry points:</p>\n<pre>setup(...\n      entry_points = \"\"\"\n      [zodbupdate.decode]\n      decodes = mypackage.mymodule:decode_dict\n      \"\"\")\n</pre>\n<p>Decoders are dictionaries that specifies as keys attributes on\nPersistent classes that must either be encoded as bytes (if the value\nis <tt>binary</tt>) or decoded to unicode using value as encoding (for\ninstance <tt><span class=\"pre\">utf-8</span></tt> here):</p>\n<pre>decode_dict = {\n   'mypackage.mymodule ClassName attribute': 'binary',\n   'otherpackage.othermodule OtherClass other_attribute': 'utf-8'}\n</pre>\n<p>Please note that for the moment only attributes on Persistent classes\nare supported.</p>\n<p>Please also note that these conversion rules are _only_ selected for the\nclass that is referenced in the pickle, rules for superclasses are _not_\napplied. This means that you have to push down annotation rules to all\nthe subclasses of a superclass that has a field that needs this annotation.</p>\n</div>\n<div id=\"converting-to-python-3-from-within-python-3\">\n<h3><a href=\"#id20\" rel=\"nofollow\">Converting to Python 3 from within Python 3</a></h3>\n<p><tt>zodbupdate</tt> can also be run from within Python 3 to convert a database\ncreated with Python 2 to be usable in Python 3. However this works\nslightly differently than when running the conversion using Python 2.\nIn Python 3 you must specify a default encoding to use while unpickling strings:\n<tt>zodbupdate <span class=\"pre\">--pack</span> <span class=\"pre\">--convert-py3</span> <span class=\"pre\">--encoding</span> <span class=\"pre\">utf-8</span></tt>.</p>\n<p>For each string in the database, zodbupdate will convert it as follows:</p>\n<ol>\n<li>If it\u2019s an attribute configured explicitly via a decoder as described\nabove, it will be decoded or encoded as specified there.</li>\n<li>Otherwise the value will be decoded using the encoding specified\non the command line.</li>\n<li>If there is an error while decoding using the encoding specified\non the command line, the value will be stored as bytes.</li>\n</ol>\n</div>\n<div id=\"problems-and-solutions\">\n<h3><a href=\"#id21\" rel=\"nofollow\">Problems and solutions</a></h3>\n<div id=\"your-data-fs-has-poskey-errors\">\n<h4><a href=\"#id22\" rel=\"nofollow\">Your Data.fs has POSKey errors</a></h4>\n<p>If you call <cite>zodbupdate</cite> with <tt><span class=\"pre\">-f</span></tt> and the path to your Data.fs,\nrecords triggering those errors will be ignored.</p>\n</div>\n<div id=\"you-have-an-another-error\">\n<h4><a href=\"#id23\" rel=\"nofollow\">You have an another error</a></h4>\n<p>We recommend to run zodbupdate with <tt><span class=\"pre\">-v</span> <span class=\"pre\">-d</span></tt> to get the\nmaximum of information.</p>\n<p>If you are working on big storages, you can use the option <tt><span class=\"pre\">-o</span></tt> to\nre-run <cite>zodbupdate</cite> at a failing record you previously encountered\nafterward.</p>\n</div>\n</div>\n</div>\n<div id=\"changes\">\n<h2><a href=\"#id24\" rel=\"nofollow\">Changes</a></h2>\n<div id=\"id1\">\n<h3><a href=\"#id25\" rel=\"nofollow\">1.4 (2019-08-23)</a></h3>\n<ul>\n<li>Fail with explanation when opening a Python 2 ZODB with \u2013dry-run on Python 3\n(<a href=\"https://github.com/zopefoundation/zodbupdate/issues/22\" rel=\"nofollow\">#22</a>)</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3><a href=\"#id26\" rel=\"nofollow\">1.3 (2019-07-30)</a></h3>\n<ul>\n<li>Support converting sets.Set() objects from ancient Python 2 versions.\n(<a href=\"https://github.com/zopefoundation/zodbupdate/issue/23\" rel=\"nofollow\">issue 23</a>)</li>\n<li>Convert set objects to <tt>builtins.set</tt> without relying on ZODB.broken.rebuild.\n(<a href=\"https://github.com/zopefoundation/zodbupdate/pull/25\" rel=\"nofollow\">issue 25</a>)</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3><a href=\"#id27\" rel=\"nofollow\">1.2 (2019-05-09)</a></h3>\n<ul>\n<li>Enable fallback encodings for Python 3 conversion for old/grown ZODBs using\nthe new command line option <tt><span class=\"pre\">--encoding-fallback</span></tt>.\n(<a href=\"https://github.com/zopefoundation/zodbupdate/pull/15\" rel=\"nofollow\">#15</a>)</li>\n<li>Switch to use <cite>argparse</cite> as <cite>optparse</cite> is deprecated.</li>\n<li>Add ability to run the Python 3 migration with a default encoding for\n<tt>str</tt> objects.\n(<a href=\"https://github.com/zopefoundation/zodbupdate/pull/14\" rel=\"nofollow\">#14</a>)</li>\n<li>Fix updating records that reference a broken interface\nwhen the interface\u2019s top-level module is missing.</li>\n<li>Fixed skipping of blob records so that oids in references to blobs\nare still converted.</li>\n<li>Add support for Python 3.8a3.</li>\n<li>Drop support for Python 3.4.</li>\n</ul>\n</div>\n<div id=\"id7\">\n<h3><a href=\"#id28\" rel=\"nofollow\">1.1 (2018-10-05)</a></h3>\n<ul>\n<li>Skip records for ZODB.blob when migrating database to Python 3 to not break\nreferences to blobfiles.</li>\n<li>When migrating databases to Python 3, do not fail when converting\nattributes containing None.</li>\n<li>Fix tests on Python 2 with ZODB &gt;= 5.4.0, which now uses pickle\nprotocol 3.</li>\n<li>Fix <cite>is_broken</cite> check for old-style class instances.</li>\n<li>Add support for Python 3.7.</li>\n<li>Drop PyPy support.</li>\n</ul>\n</div>\n<div id=\"id8\">\n<h3><a href=\"#id29\" rel=\"nofollow\">1.0 (2018-02-13)</a></h3>\n<ul>\n<li>Support Python 2.7 and 3.4, 3.5 and 3.6 and pypy 3. Drop any older\nversion of Python.</li>\n<li>The option to the select the pickler (<tt><span class=\"pre\">--pickler</span></tt>) has been\nremoved. This was only useful if you had extension classes with\nPython 2.5 or less.</li>\n<li>Added an option to convert a database to Python 3.</li>\n</ul>\n</div>\n<div id=\"id9\">\n<h3><a href=\"#id30\" rel=\"nofollow\">0.5 (2010-10-07)</a></h3>\n<ul>\n<li>More debug logging shows now the currently processed OID\n(that is helpful to determine which object misses the factory).</li>\n<li>Support for missing factories have been improved: an error used to\noccur if a pickle needed an update and contained a reference to a\nmissing class (not instance of this class). This case is now fixed.</li>\n<li>Python 2.4 is no longer supported. Please stick to version 0.3 if\nyou need Python 2.4 support.</li>\n</ul>\n</div>\n<div id=\"id10\">\n<h3><a href=\"#id31\" rel=\"nofollow\">0.4 (2010-07-14)</a></h3>\n<ul>\n<li>Add an option to debug broken records.</li>\n<li>Add an option to skip records.</li>\n<li>Add an option to use Python unPickler instead of C one. This let you\ndebug records. As well Python unPickler let you update old ExtensionClass\nrecords who had a special hack in the past.</li>\n<li>Broken interfaces are well supported now (if you did alsoProvides with them).</li>\n</ul>\n</div>\n<div id=\"id11\">\n<h3><a href=\"#id32\" rel=\"nofollow\">0.3 (2010-02-02)</a></h3>\n<ul>\n<li>Unplickle and re-pickle the code to rename references to moved classes.\nThis make the script works on database created with older versions of\nZODB.</li>\n<li>If you are working directly with a FileStorage, POSKeyError are reported\nbut non-fatal.</li>\n<li>Remove superfluous code that tried to prevent commits when no changes\nhappened: ZODB does this all by itself already.</li>\n</ul>\n</div>\n<div id=\"id12\">\n<h3><a href=\"#id33\" rel=\"nofollow\">0.2 (2009-06-23)</a></h3>\n<ul>\n<li>Add option to store the rename rules into a file.</li>\n<li>Don\u2019t commit transactions that have no changes.</li>\n<li>Load rename rules from entry points <tt>zodbupdate</tt>.</li>\n<li>Compatibility with Python 2.4</li>\n<li>Rename from <tt>zodbupgrade</tt> to <tt>zodbupdate</tt>.</li>\n<li>Add \u2018verbose\u2019 option.</li>\n<li>Improve logging.</li>\n<li>Suppress duplicate log messages (e.g. if the same class is missing in\nmultiple objects).</li>\n<li>Improve the updating process: rewrite pickle opcodes instead of blindly\ntouching a class. This also allows updating pickles that can\u2019t be unpickled\ndue to missing classes.</li>\n</ul>\n</div>\n<div id=\"id13\">\n<h3><a href=\"#id34\" rel=\"nofollow\">0.1 (2009-06-08)</a></h3>\n<ul>\n<li>First release.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 5721316, "releases": {"0.2": [{"comment_text": "", "digests": {"md5": "cc0bb38b07eef525b8ce50c1351d0d4b", "sha256": "4ba39a95e07ef47cccdfd14c187a862c8857189dab477dced7ca72e40475a3a5"}, "downloads": -1, "filename": "zodbupdate-0.2.tar.gz", "has_sig": false, "md5_digest": "cc0bb38b07eef525b8ce50c1351d0d4b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11573, "upload_time": "2009-06-23T16:11:28", "upload_time_iso_8601": "2009-06-23T16:11:28.354297Z", "url": "https://files.pythonhosted.org/packages/95/4b/61dad1ec54be94688b2f173701e481275e7271656312c7acc73822bad7e5/zodbupdate-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "5ab6d68a186e689b944e77b2b4d1bc38", "sha256": "d08710ed714ad6d2571f6163096035d3b0c4a20ef06a58d7565aa7866cc37c64"}, "downloads": -1, "filename": "zodbupdate-0.3.tar.gz", "has_sig": false, "md5_digest": "5ab6d68a186e689b944e77b2b4d1bc38", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11656, "upload_time": "2010-02-02T17:42:40", "upload_time_iso_8601": "2010-02-02T17:42:40.864554Z", "url": "https://files.pythonhosted.org/packages/54/a3/dbf2b47c655a88f6f05e609000b804398120ebd7feb5fc7569a54117ea97/zodbupdate-0.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "e83f3f05f4e774462d11af2b8b6560b6", "sha256": "4bc58023b2ed0c2f2104a87090cafdc7e810f0bed1f64a2bd2dcdbb7c8dd299e"}, "downloads": -1, "filename": "zodbupdate-0.4.tar.gz", "has_sig": false, "md5_digest": "e83f3f05f4e774462d11af2b8b6560b6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12174, "upload_time": "2010-07-14T19:28:48", "upload_time_iso_8601": "2010-07-14T19:28:48.958776Z", "url": "https://files.pythonhosted.org/packages/e9/47/b05740d07afaafb0af5ee44179b2145be1b67c69ad1f4e9b529e6206596c/zodbupdate-0.4.tar.gz", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "9e09fad270741f477f64325d4743551c", "sha256": "495cb40b9a2a521f4c8b701d2c63866a18b065263b1b52579986d8b35a4d0009"}, "downloads": -1, "filename": "zodbupdate-0.5.tar.gz", "has_sig": false, "md5_digest": "9e09fad270741f477f64325d4743551c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13006, "upload_time": "2010-10-07T14:20:19", "upload_time_iso_8601": "2010-10-07T14:20:19.047485Z", "url": "https://files.pythonhosted.org/packages/1e/7b/393d91c76eb3743cfcbe21849c3ebb7a15fd53a6691228e5b0bf68fa2a99/zodbupdate-0.5.tar.gz", "yanked": false}], "1.0": [{"comment_text": "", "digests": {"md5": "4b03893f2c0badee3abe5eb47d39e406", "sha256": "e98c25af9eb0d1148ff9742dd112b68966e5093314f5ae8737998b01ab9e01b7"}, "downloads": -1, "filename": "zodbupdate-1.0.tar.gz", "has_sig": false, "md5_digest": "4b03893f2c0badee3abe5eb47d39e406", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22249, "upload_time": "2018-02-13T10:58:48", "upload_time_iso_8601": "2018-02-13T10:58:48.626165Z", "url": "https://files.pythonhosted.org/packages/e3/b6/333e9781b6cdb4af3c983af2d8f1ac4a9749cb0d2d3aa9972ac055f90acf/zodbupdate-1.0.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "f5e8632f7944e2e753361591b5ad26d4", "sha256": "1ea568e3a2960add08b9ac4ad0d95257ba284da84cac7eccd1daac7866d8bbda"}, "downloads": -1, "filename": "zodbupdate-1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f5e8632f7944e2e753361591b5ad26d4", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 23754, "upload_time": "2018-10-05T14:24:00", "upload_time_iso_8601": "2018-10-05T14:24:00.527502Z", "url": "https://files.pythonhosted.org/packages/ca/cd/981895b4558bebc7bdd70c4b0290e24120ce68b4eb7c9f241396256756e4/zodbupdate-1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "22b1c2961390f40bd5141340570a3f3a", "sha256": "c57444c8646dbaaf01b63382505442e8e486fc29f9c72fa82d4a6d22d5b098f7"}, "downloads": -1, "filename": "zodbupdate-1.1.tar.gz", "has_sig": false, "md5_digest": "22b1c2961390f40bd5141340570a3f3a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21936, "upload_time": "2018-10-05T14:24:02", "upload_time_iso_8601": "2018-10-05T14:24:02.077202Z", "url": "https://files.pythonhosted.org/packages/fb/37/16dccad5e7f21bd80eef0b0150099ead716f519b3277f07da3210fb0d5d5/zodbupdate-1.1.tar.gz", "yanked": false}], "1.2": [{"comment_text": "", "digests": {"md5": "54b004d8e68ddb2b587bf956ca509ca7", "sha256": "d975283ebf065bb3330743c584e34b367df60d7c2d367408f097bdde36709b22"}, "downloads": -1, "filename": "zodbupdate-1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "54b004d8e68ddb2b587bf956ca509ca7", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 27082, "upload_time": "2019-05-09T13:38:31", "upload_time_iso_8601": "2019-05-09T13:38:31.498787Z", "url": "https://files.pythonhosted.org/packages/57/93/745f7f1a1073da2f4aacd7168c12f8fc402d37810a54b90c6aba11e292f4/zodbupdate-1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3d096a049dd4ac82f4f4e4e6bb06a07e", "sha256": "6e727cb54428a1fb1c317d23d3103ac4574de4ccee2b811f51f1a330b1dd6480"}, "downloads": -1, "filename": "zodbupdate-1.2.tar.gz", "has_sig": false, "md5_digest": "3d096a049dd4ac82f4f4e4e6bb06a07e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24878, "upload_time": "2019-05-09T13:38:33", "upload_time_iso_8601": "2019-05-09T13:38:33.058258Z", "url": "https://files.pythonhosted.org/packages/75/de/d2aa14e024ed9f3785c16cc24318efe4f50933da8bb0f6f03abc2a55ceba/zodbupdate-1.2.tar.gz", "yanked": false}], "1.3": [{"comment_text": "", "digests": {"md5": "c290c0c330b62ab21a174f674d38b7be", "sha256": "769a71eff4591018bebe74d7035ded3641705b846d4f70308e10e117c81cacbb"}, "downloads": -1, "filename": "zodbupdate-1.3.tar.gz", "has_sig": false, "md5_digest": "c290c0c330b62ab21a174f674d38b7be", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28391, "upload_time": "2019-07-30T13:40:36", "upload_time_iso_8601": "2019-07-30T13:40:36.986744Z", "url": "https://files.pythonhosted.org/packages/bb/4d/89f3dcbfa561be1127dfa482db50320bd29aab2438f2ec1eb347f20d3901/zodbupdate-1.3.tar.gz", "yanked": false}], "1.4": [{"comment_text": "", "digests": {"md5": "9f7770850defcc1121390c58581167d9", "sha256": "93fc0e12b6b677c63db460c736ab46b1864a0e0b78bf732b81c0bdb267118cb6"}, "downloads": -1, "filename": "zodbupdate-1.4.tar.gz", "has_sig": true, "md5_digest": "9f7770850defcc1121390c58581167d9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28801, "upload_time": "2019-08-23T15:11:12", "upload_time_iso_8601": "2019-08-23T15:11:12.390847Z", "url": "https://files.pythonhosted.org/packages/9d/c0/be27fb3d290eee7b1db4b9b3092f58599dd6d2f5d1cb9348d8680ef70dfd/zodbupdate-1.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9f7770850defcc1121390c58581167d9", "sha256": "93fc0e12b6b677c63db460c736ab46b1864a0e0b78bf732b81c0bdb267118cb6"}, "downloads": -1, "filename": "zodbupdate-1.4.tar.gz", "has_sig": true, "md5_digest": "9f7770850defcc1121390c58581167d9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28801, "upload_time": "2019-08-23T15:11:12", "upload_time_iso_8601": "2019-08-23T15:11:12.390847Z", "url": "https://files.pythonhosted.org/packages/9d/c0/be27fb3d290eee7b1db4b9b3092f58599dd6d2f5d1cb9348d8680ef70dfd/zodbupdate-1.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:15:07 2020"}