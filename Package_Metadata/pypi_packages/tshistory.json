{"info": {"author": "Pythonian", "author_email": "aurelien.campeas@pythonian.fr, arnaud.campeas@pythonian.fr", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Database", "Topic :: Scientific/Engineering", "Topic :: Software Development :: Version Control"], "description": "TSHISTORY\n===========\n\nThis is a library to store/retrieve pandas timeseries to/from a\npostgres database, tracking their successive versions.\n\n# Introduction\n\n## Purpose\n\n`tshistory` is targetted at applications using time series where\n[backtesting][backtesting] and [cross-validation][cross-validation]\nare an essential feature.\n\nIt provides exhaustivity and efficiency of the storage, with a simple\nPython api.\n\nIt can be used as a building block for machine learning, model\noptimization and validation, both for inputs and outputs.\n\n\n## Principles\n\nThere are many ways to represent timeseries in a relational database,\nand `tshistory` provides two things:\n\n* a base python API which abstracts away the underlying storage\n\n* a postgres model, which emphasizes the compact storage of successive\n  states of series\n\nThe core idea of tshistory is to handle successive versions of\ntimeseries as they grow in time, allowing to get older states of any\nseries.\n\n\n# Basic usage\n\n## Starting with a fresh database\n\nYou need a postgresql database. You can create one like this:\n\n```shell\n createdb mydb\n```\n\nThen, initialize the `tshistory` tables, like this:\n\n```python\n tsh init-db postgresql://me:password@localhost/mydb\n```\n\nFrom this you're ready to go !\n\n\n## Creating a series\n\nHowever here's a simple example:\n\n```python\n >>> import pandas as pd\n >>> from tshistory.api import timeseries\n >>>\n >>> tsa = timeseries('postgres://me:password@localhost/mydb')\n >>>\n >>> series = pd.Series([1, 2, 3],\n ...                    pd.date_range(start=pd.Timestamp(2017, 1, 1),\n ...                                  freq='D', periods=3))\n # db insertion\n >>> tsa.update('my_series', series, 'babar@pythonian.fr')\n ...\n 2017-01-01    1.0\n 2017-01-02    2.0\n 2017-01-03    3.0\n Freq: D, Name: my_series, dtype: float64\n\n # note how our integers got turned into floats\n # (there are no provisions to handle integer series as of today)\n\n # retrieval\n >>> tsa.get('my_series')\n ...\n 2017-01-01    1.0\n 2017-01-02    2.0\n 2017-01-03    3.0\n Name: my_series, dtype: float64\n```\n\nNote that we generally adopt the convention to name the time series\napi object `tsa`.\n\n\n## Updating a series\n\nThis is good. Now, let's insert more:\n\n```python\n >>> series = pd.Series([2, 7, 8, 9],\n ...                    pd.date_range(start=pd.Timestamp(2017, 1, 2),\n ...                                  freq='D', periods=4))\n # db insertion\n >>> tsa.update('my_series', series, 'babar@pythonian.fr')\n ...\n 2017-01-03    7.0\n 2017-01-04    8.0\n 2017-01-05    9.0\n Name: my_series, dtype: float64\n\n # you get back the *new information* you put inside\n # and this is why the `2` doesn't appear (it was already put\n # there in the first step)\n\n # db retrieval\n >>> tsa.get('my_series')\n ...\n2017-01-01    1.0\n2017-01-02    2.0\n2017-01-03    7.0\n2017-01-04    8.0\n2017-01-05    9.0\nName: my_series, dtype: float64\n```\n\nIt is important to note that the third value was *replaced*, and the two\nlast values were just *appended*.\n\nAs noted the point at `2017-1-2` wasn't a new information so it was\njust ignored.\n\n\n## Retrieving history\n\nWe can access the whole history (or parts of it) in one call:\n\n```python\n >>> history = tsa.history('my_series')\n ...\n >>>\n >>> for idate, series in history.items(): # it's a dict\n ...     print('insertion date:', idate)\n ...     print(series)\n ...\n insertion date: 2018-09-26 17:10:36.988920+02:00\n 2017-01-01    1.0\n 2017-01-02    2.0\n 2017-01-03    3.0\n Name: my_series, dtype: float64\n insertion date: 2018-09-26 17:12:54.508252+02:00\n 2017-01-01    1.0\n 2017-01-02    2.0\n 2017-01-03    7.0\n 2017-01-04    8.0\n 2017-01-05    9.0\n Name: my_series, dtype: float64\n```\n\nNote how this shows the full serie state for each insertion date.\nAlso the insertion date is timzeone aware.\n\nIt is possible to show the differences only:\n\n```python\n >>> diffs = tsa.history('my_series', diffmode=True)\n ...\n >>> for idate, series in diffs.items():\n ...   print('insertion date:', idate)\n ...   print(series)\n ...\n insertion date: 2018-09-26 17:10:36.988920+02:00\n 2017-01-01    1.0\n 2017-01-02    2.0\n 2017-01-03    3.0\n Name: my_series, dtype: float64\n insertion date: 2018-09-26 17:12:54.508252+02:00\n 2017-01-03    7.0\n 2017-01-04    8.0\n 2017-01-05    9.0\n Name: my_series, dtype: float64\n```\n\nYou can see a series metadata:\n\n```python\n >>> tsa.metadata('series', internal=True)\n {'tzaware': False, 'index_type': 'datetime64[ns]', 'value_type': 'float64',\n 'index_dtype': '<M8[ns]', 'value_dtype': '<f8'}\n```\n\nWe built a series with naive time stamps, but timezone-aware\ntimestamps work well (and it is advised to use them !).\n\n\n# The API object\n\nIn the few examples above we manipulate the time series through an\nobject that talks directly to the postgresql back end.\n\nIt is possible to also talk to a rest api using the same api, like\nshown below and proceed exactly like in the above code examples:\n\n```python\n >>> from tshistory.api import timeseries\n >>>\n >>> tsa = timeseries('http://my.timeseries.info/api')\n```\n\n## Using an HTTP/REST end point\n\nFor this to work, one needs to use the the\n[tshistory_rest][tshistory_rest] and\n[tshistory_client][tshistory_client] packages.\n\nThe client package will be used transparently on a\n`timeseries('http://.../api')` call, nothing more needs to be done\nthan install it.\n\nFor the rest api, you need to build a small [flask][flask] app and set\nup the `tshistory_rest` blueprint like this (in an `app.py` module):\n\n```python\nfrom flask import Flask\n\nfrom tshistory.api import timeseries\nfrom tshistory_rest.blueprint import blueprint as blueprint\n\n\ndef make_app(dburi):\n    app = Flask('my-timeseries-app')\n    app.register_blueprint(\n        blueprint(timeseries(dburi)),\n        url_prefix='/api'\n    )\n    return app\n```\n\nThen, you can start it in development mode like this:\n\n```python\napp = make_app('postgresql://me:password@localhost/mydb')\napp.run('192.168.1.1', 8080)\n```\n\nor just leave it to a wsgi container in e.g. a `wsgi.py` module:\n\n```python\nfrom my_series_app.app import make_app\n\napp = make_app('postgresql://me:password@localhost/mydb')\n```\n\n## API surface\n\nFor now we only provide a list of supported methods.\n\n\n### Information access (read methods)\n\n* catalog\n\n* exists\n\n* get\n\n* history\n\n* interval\n\n* metadata\n\n* staircase\n\n* type\n\n\n### Information update (write methods)\n\n* update\n\n* update_metadata\n\n* replace\n\n* rename\n\n* delete\n\n\n# Command line\n\n## Basic operations\n\nA command line tool is provided, called `tsh`. It provides its usage\nguidelines:\n\n```shell\n $ tsh\n Usage: tsh [OPTIONS] COMMAND [ARGS]...\n\n Options:\n   --help  Show this message and exit.\n\nCommands:\n  check    coherence checks of the db\n  get      show a serie in its current state\n  history  show a serie full history\n  info     show global statistics of the repository\n  init-db  initialize an new db.\n  log      show revision history of entire repository or...\n  view     visualize time series through the web\n```\n\n`Info` provides an overview of the time series repository (number of\ncommitted changes, number and series and their names).\n\n```shell\n $ tsh info postgres://babar:babarpassword@dataserver:5432/banana_studies\n changeset count: 209\n series count:    144\n series names:    banana_spot_price, banana_trades, banana_turnover\n```\n\n`Log` provides the full history of editions to time series in the\nrepository.\n\n```shell\n $ tsh log postgres://babar:babar@dataserver:5432/banana_studies --limit 3\n revision: 206\n author:   BABAR\n date:     2017-06-06 15:32:51.502507\n series:   banana_spot_price\n\n revision: 207\n author:   BABAR\n date:     2017-06-06 15:32:51.676507\n series:   banana_trades\n\n revision: 209\n author:   CELESTE\n date:     2017-06-06 15:32:51.977507\n series:   banana_turnover\n```\n\nAll options of all commands can be obtained by using the `--help`\nswitch:\n\n```shell\n $ tsh log --help\n Usage: tsh log [OPTIONS] DB_URI\n\n Options:\n   -l, --limit TEXT\n   --show-diff\n   -s, --serie TEXT\n   --from-rev TEXT\n   --to-rev TEXT\n   --help            Show this message and exit.\n```\n\n\n## Extensions\n\nIt is possible to augment the `tsh` command with new subcommands (or\naugment, modify existing commands).\n\nAny program doing so must define a new command and declare a setup\ntools entry point named `tshistory:subcommand` as in e.g.:\n\n```python\n\n    entry_points={'tshistory.subcommands': [\n        'view=tsview.command:view'\n    ]}\n```\n\nFor instance, the [tsview][tsview] python package provides such a\n`view` subcommand for generic time series visualisation.\n\n[tsview]: https://bitbucket.org/pythonian/tsview\n[tshistory_rest]: https://bitbucket.org/pythonian/tshistory_rest\n[tshistory_client]: https://bitbucket.org/pythonian/tshistory_client\n[backtesting]: https://en.wikipedia.org/wiki/Backtesting\n[cross-validation]: https://en.wikipedia.org/wiki/Cross-validation_(statistics)\n[flask]: https://www.palletsprojects.com/p/flask/\n\n\n# Status\n\nIt is currently considered `beta` software even though it has been in\nproduction for two years. It is still evolving. Schema/Database\nchanges come with migration procedure using the `tsh` utility.\n\nWhen it is good: if you do mostly appends (and occasional edits in the\npast) it will store data in a very compact way.\n\nReading any version of the series will always be the fastest (io-bound)\noperation.\n\nAlternative backend storage and storage strategies will be considered\nin the future.\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/pythonian/tshistory", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "tshistory", "package_url": "https://pypi.org/project/tshistory/", "platform": "", "project_url": "https://pypi.org/project/tshistory/", "project_urls": {"Homepage": "https://bitbucket.org/pythonian/tshistory"}, "release_url": "https://pypi.org/project/tshistory/0.11.0/", "requires_dist": ["pandas (<0.26,>=0.24)", "dateutils", "sqlalchemy", "sqlhelp", "click", "mock", "inireader", "colorama", "tqdm", "deprecated"], "requires_python": "", "summary": "Timeseries store with version control", "version": "0.11.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>TSHISTORY</h1>\n<p>This is a library to store/retrieve pandas timeseries to/from a\npostgres database, tracking their successive versions.</p>\n<h1>Introduction</h1>\n<h2>Purpose</h2>\n<p><code>tshistory</code> is targetted at applications using time series where\n<a href=\"https://en.wikipedia.org/wiki/Backtesting\" rel=\"nofollow\">backtesting</a> and <a href=\"https://en.wikipedia.org/wiki/Cross-validation_(statistics)\" rel=\"nofollow\">cross-validation</a>\nare an essential feature.</p>\n<p>It provides exhaustivity and efficiency of the storage, with a simple\nPython api.</p>\n<p>It can be used as a building block for machine learning, model\noptimization and validation, both for inputs and outputs.</p>\n<h2>Principles</h2>\n<p>There are many ways to represent timeseries in a relational database,\nand <code>tshistory</code> provides two things:</p>\n<ul>\n<li>\n<p>a base python API which abstracts away the underlying storage</p>\n</li>\n<li>\n<p>a postgres model, which emphasizes the compact storage of successive\nstates of series</p>\n</li>\n</ul>\n<p>The core idea of tshistory is to handle successive versions of\ntimeseries as they grow in time, allowing to get older states of any\nseries.</p>\n<h1>Basic usage</h1>\n<h2>Starting with a fresh database</h2>\n<p>You need a postgresql database. You can create one like this:</p>\n<pre> createdb mydb\n</pre>\n<p>Then, initialize the <code>tshistory</code> tables, like this:</p>\n<pre> <span class=\"n\">tsh</span> <span class=\"n\">init</span><span class=\"o\">-</span><span class=\"n\">db</span> <span class=\"n\">postgresql</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">me</span><span class=\"p\">:</span><span class=\"n\">password</span><span class=\"nd\">@localhost</span><span class=\"o\">/</span><span class=\"n\">mydb</span>\n</pre>\n<p>From this you're ready to go !</p>\n<h2>Creating a series</h2>\n<p>However here's a simple example:</p>\n<pre> <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">tshistory.api</span> <span class=\"kn\">import</span> <span class=\"n\">timeseries</span>\n <span class=\"o\">&gt;&gt;&gt;</span>\n <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tsa</span> <span class=\"o\">=</span> <span class=\"n\">timeseries</span><span class=\"p\">(</span><span class=\"s1\">'postgres://me:password@localhost/mydb'</span><span class=\"p\">)</span>\n <span class=\"o\">&gt;&gt;&gt;</span>\n <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">series</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span>\n <span class=\"o\">...</span>                    <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">date_range</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"o\">=</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Timestamp</span><span class=\"p\">(</span><span class=\"mi\">2017</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span>\n <span class=\"o\">...</span>                                  <span class=\"n\">freq</span><span class=\"o\">=</span><span class=\"s1\">'D'</span><span class=\"p\">,</span> <span class=\"n\">periods</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n <span class=\"c1\"># db insertion</span>\n <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tsa</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"s1\">'my_series'</span><span class=\"p\">,</span> <span class=\"n\">series</span><span class=\"p\">,</span> <span class=\"s1\">'babar@pythonian.fr'</span><span class=\"p\">)</span>\n <span class=\"o\">...</span>\n <span class=\"mi\">2017</span><span class=\"o\">-</span><span class=\"mi\">01</span><span class=\"o\">-</span><span class=\"mi\">01</span>    <span class=\"mf\">1.0</span>\n <span class=\"mi\">2017</span><span class=\"o\">-</span><span class=\"mi\">01</span><span class=\"o\">-</span><span class=\"mi\">02</span>    <span class=\"mf\">2.0</span>\n <span class=\"mi\">2017</span><span class=\"o\">-</span><span class=\"mi\">01</span><span class=\"o\">-</span><span class=\"mi\">03</span>    <span class=\"mf\">3.0</span>\n <span class=\"n\">Freq</span><span class=\"p\">:</span> <span class=\"n\">D</span><span class=\"p\">,</span> <span class=\"n\">Name</span><span class=\"p\">:</span> <span class=\"n\">my_series</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"p\">:</span> <span class=\"n\">float64</span>\n\n <span class=\"c1\"># note how our integers got turned into floats</span>\n <span class=\"c1\"># (there are no provisions to handle integer series as of today)</span>\n\n <span class=\"c1\"># retrieval</span>\n <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tsa</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'my_series'</span><span class=\"p\">)</span>\n <span class=\"o\">...</span>\n <span class=\"mi\">2017</span><span class=\"o\">-</span><span class=\"mi\">01</span><span class=\"o\">-</span><span class=\"mi\">01</span>    <span class=\"mf\">1.0</span>\n <span class=\"mi\">2017</span><span class=\"o\">-</span><span class=\"mi\">01</span><span class=\"o\">-</span><span class=\"mi\">02</span>    <span class=\"mf\">2.0</span>\n <span class=\"mi\">2017</span><span class=\"o\">-</span><span class=\"mi\">01</span><span class=\"o\">-</span><span class=\"mi\">03</span>    <span class=\"mf\">3.0</span>\n <span class=\"n\">Name</span><span class=\"p\">:</span> <span class=\"n\">my_series</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"p\">:</span> <span class=\"n\">float64</span>\n</pre>\n<p>Note that we generally adopt the convention to name the time series\napi object <code>tsa</code>.</p>\n<h2>Updating a series</h2>\n<p>This is good. Now, let's insert more:</p>\n<pre> <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">series</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">],</span>\n <span class=\"o\">...</span>                    <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">date_range</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"o\">=</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Timestamp</span><span class=\"p\">(</span><span class=\"mi\">2017</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span>\n <span class=\"o\">...</span>                                  <span class=\"n\">freq</span><span class=\"o\">=</span><span class=\"s1\">'D'</span><span class=\"p\">,</span> <span class=\"n\">periods</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">))</span>\n <span class=\"c1\"># db insertion</span>\n <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tsa</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"s1\">'my_series'</span><span class=\"p\">,</span> <span class=\"n\">series</span><span class=\"p\">,</span> <span class=\"s1\">'babar@pythonian.fr'</span><span class=\"p\">)</span>\n <span class=\"o\">...</span>\n <span class=\"mi\">2017</span><span class=\"o\">-</span><span class=\"mi\">01</span><span class=\"o\">-</span><span class=\"mi\">03</span>    <span class=\"mf\">7.0</span>\n <span class=\"mi\">2017</span><span class=\"o\">-</span><span class=\"mi\">01</span><span class=\"o\">-</span><span class=\"mi\">04</span>    <span class=\"mf\">8.0</span>\n <span class=\"mi\">2017</span><span class=\"o\">-</span><span class=\"mi\">01</span><span class=\"o\">-</span><span class=\"mi\">05</span>    <span class=\"mf\">9.0</span>\n <span class=\"n\">Name</span><span class=\"p\">:</span> <span class=\"n\">my_series</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"p\">:</span> <span class=\"n\">float64</span>\n\n <span class=\"c1\"># you get back the *new information* you put inside</span>\n <span class=\"c1\"># and this is why the `2` doesn't appear (it was already put</span>\n <span class=\"c1\"># there in the first step)</span>\n\n <span class=\"c1\"># db retrieval</span>\n <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tsa</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'my_series'</span><span class=\"p\">)</span>\n <span class=\"o\">...</span>\n<span class=\"mi\">2017</span><span class=\"o\">-</span><span class=\"mi\">01</span><span class=\"o\">-</span><span class=\"mi\">01</span>    <span class=\"mf\">1.0</span>\n<span class=\"mi\">2017</span><span class=\"o\">-</span><span class=\"mi\">01</span><span class=\"o\">-</span><span class=\"mi\">02</span>    <span class=\"mf\">2.0</span>\n<span class=\"mi\">2017</span><span class=\"o\">-</span><span class=\"mi\">01</span><span class=\"o\">-</span><span class=\"mi\">03</span>    <span class=\"mf\">7.0</span>\n<span class=\"mi\">2017</span><span class=\"o\">-</span><span class=\"mi\">01</span><span class=\"o\">-</span><span class=\"mi\">04</span>    <span class=\"mf\">8.0</span>\n<span class=\"mi\">2017</span><span class=\"o\">-</span><span class=\"mi\">01</span><span class=\"o\">-</span><span class=\"mi\">05</span>    <span class=\"mf\">9.0</span>\n<span class=\"n\">Name</span><span class=\"p\">:</span> <span class=\"n\">my_series</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"p\">:</span> <span class=\"n\">float64</span>\n</pre>\n<p>It is important to note that the third value was <em>replaced</em>, and the two\nlast values were just <em>appended</em>.</p>\n<p>As noted the point at <code>2017-1-2</code> wasn't a new information so it was\njust ignored.</p>\n<h2>Retrieving history</h2>\n<p>We can access the whole history (or parts of it) in one call:</p>\n<pre> <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">history</span> <span class=\"o\">=</span> <span class=\"n\">tsa</span><span class=\"o\">.</span><span class=\"n\">history</span><span class=\"p\">(</span><span class=\"s1\">'my_series'</span><span class=\"p\">)</span>\n <span class=\"o\">...</span>\n <span class=\"o\">&gt;&gt;&gt;</span>\n <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">for</span> <span class=\"n\">idate</span><span class=\"p\">,</span> <span class=\"n\">series</span> <span class=\"ow\">in</span> <span class=\"n\">history</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span> <span class=\"c1\"># it's a dict</span>\n <span class=\"o\">...</span>     <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'insertion date:'</span><span class=\"p\">,</span> <span class=\"n\">idate</span><span class=\"p\">)</span>\n <span class=\"o\">...</span>     <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">series</span><span class=\"p\">)</span>\n <span class=\"o\">...</span>\n <span class=\"n\">insertion</span> <span class=\"n\">date</span><span class=\"p\">:</span> <span class=\"mi\">2018</span><span class=\"o\">-</span><span class=\"mi\">09</span><span class=\"o\">-</span><span class=\"mi\">26</span> <span class=\"mi\">17</span><span class=\"p\">:</span><span class=\"mi\">10</span><span class=\"p\">:</span><span class=\"mf\">36.988920</span><span class=\"o\">+</span><span class=\"mi\">02</span><span class=\"p\">:</span><span class=\"mi\">00</span>\n <span class=\"mi\">2017</span><span class=\"o\">-</span><span class=\"mi\">01</span><span class=\"o\">-</span><span class=\"mi\">01</span>    <span class=\"mf\">1.0</span>\n <span class=\"mi\">2017</span><span class=\"o\">-</span><span class=\"mi\">01</span><span class=\"o\">-</span><span class=\"mi\">02</span>    <span class=\"mf\">2.0</span>\n <span class=\"mi\">2017</span><span class=\"o\">-</span><span class=\"mi\">01</span><span class=\"o\">-</span><span class=\"mi\">03</span>    <span class=\"mf\">3.0</span>\n <span class=\"n\">Name</span><span class=\"p\">:</span> <span class=\"n\">my_series</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"p\">:</span> <span class=\"n\">float64</span>\n <span class=\"n\">insertion</span> <span class=\"n\">date</span><span class=\"p\">:</span> <span class=\"mi\">2018</span><span class=\"o\">-</span><span class=\"mi\">09</span><span class=\"o\">-</span><span class=\"mi\">26</span> <span class=\"mi\">17</span><span class=\"p\">:</span><span class=\"mi\">12</span><span class=\"p\">:</span><span class=\"mf\">54.508252</span><span class=\"o\">+</span><span class=\"mi\">02</span><span class=\"p\">:</span><span class=\"mi\">00</span>\n <span class=\"mi\">2017</span><span class=\"o\">-</span><span class=\"mi\">01</span><span class=\"o\">-</span><span class=\"mi\">01</span>    <span class=\"mf\">1.0</span>\n <span class=\"mi\">2017</span><span class=\"o\">-</span><span class=\"mi\">01</span><span class=\"o\">-</span><span class=\"mi\">02</span>    <span class=\"mf\">2.0</span>\n <span class=\"mi\">2017</span><span class=\"o\">-</span><span class=\"mi\">01</span><span class=\"o\">-</span><span class=\"mi\">03</span>    <span class=\"mf\">7.0</span>\n <span class=\"mi\">2017</span><span class=\"o\">-</span><span class=\"mi\">01</span><span class=\"o\">-</span><span class=\"mi\">04</span>    <span class=\"mf\">8.0</span>\n <span class=\"mi\">2017</span><span class=\"o\">-</span><span class=\"mi\">01</span><span class=\"o\">-</span><span class=\"mi\">05</span>    <span class=\"mf\">9.0</span>\n <span class=\"n\">Name</span><span class=\"p\">:</span> <span class=\"n\">my_series</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"p\">:</span> <span class=\"n\">float64</span>\n</pre>\n<p>Note how this shows the full serie state for each insertion date.\nAlso the insertion date is timzeone aware.</p>\n<p>It is possible to show the differences only:</p>\n<pre> <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">diffs</span> <span class=\"o\">=</span> <span class=\"n\">tsa</span><span class=\"o\">.</span><span class=\"n\">history</span><span class=\"p\">(</span><span class=\"s1\">'my_series'</span><span class=\"p\">,</span> <span class=\"n\">diffmode</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n <span class=\"o\">...</span>\n <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">for</span> <span class=\"n\">idate</span><span class=\"p\">,</span> <span class=\"n\">series</span> <span class=\"ow\">in</span> <span class=\"n\">diffs</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n <span class=\"o\">...</span>   <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'insertion date:'</span><span class=\"p\">,</span> <span class=\"n\">idate</span><span class=\"p\">)</span>\n <span class=\"o\">...</span>   <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">series</span><span class=\"p\">)</span>\n <span class=\"o\">...</span>\n <span class=\"n\">insertion</span> <span class=\"n\">date</span><span class=\"p\">:</span> <span class=\"mi\">2018</span><span class=\"o\">-</span><span class=\"mi\">09</span><span class=\"o\">-</span><span class=\"mi\">26</span> <span class=\"mi\">17</span><span class=\"p\">:</span><span class=\"mi\">10</span><span class=\"p\">:</span><span class=\"mf\">36.988920</span><span class=\"o\">+</span><span class=\"mi\">02</span><span class=\"p\">:</span><span class=\"mi\">00</span>\n <span class=\"mi\">2017</span><span class=\"o\">-</span><span class=\"mi\">01</span><span class=\"o\">-</span><span class=\"mi\">01</span>    <span class=\"mf\">1.0</span>\n <span class=\"mi\">2017</span><span class=\"o\">-</span><span class=\"mi\">01</span><span class=\"o\">-</span><span class=\"mi\">02</span>    <span class=\"mf\">2.0</span>\n <span class=\"mi\">2017</span><span class=\"o\">-</span><span class=\"mi\">01</span><span class=\"o\">-</span><span class=\"mi\">03</span>    <span class=\"mf\">3.0</span>\n <span class=\"n\">Name</span><span class=\"p\">:</span> <span class=\"n\">my_series</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"p\">:</span> <span class=\"n\">float64</span>\n <span class=\"n\">insertion</span> <span class=\"n\">date</span><span class=\"p\">:</span> <span class=\"mi\">2018</span><span class=\"o\">-</span><span class=\"mi\">09</span><span class=\"o\">-</span><span class=\"mi\">26</span> <span class=\"mi\">17</span><span class=\"p\">:</span><span class=\"mi\">12</span><span class=\"p\">:</span><span class=\"mf\">54.508252</span><span class=\"o\">+</span><span class=\"mi\">02</span><span class=\"p\">:</span><span class=\"mi\">00</span>\n <span class=\"mi\">2017</span><span class=\"o\">-</span><span class=\"mi\">01</span><span class=\"o\">-</span><span class=\"mi\">03</span>    <span class=\"mf\">7.0</span>\n <span class=\"mi\">2017</span><span class=\"o\">-</span><span class=\"mi\">01</span><span class=\"o\">-</span><span class=\"mi\">04</span>    <span class=\"mf\">8.0</span>\n <span class=\"mi\">2017</span><span class=\"o\">-</span><span class=\"mi\">01</span><span class=\"o\">-</span><span class=\"mi\">05</span>    <span class=\"mf\">9.0</span>\n <span class=\"n\">Name</span><span class=\"p\">:</span> <span class=\"n\">my_series</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"p\">:</span> <span class=\"n\">float64</span>\n</pre>\n<p>You can see a series metadata:</p>\n<pre> <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tsa</span><span class=\"o\">.</span><span class=\"n\">metadata</span><span class=\"p\">(</span><span class=\"s1\">'series'</span><span class=\"p\">,</span> <span class=\"n\">internal</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n <span class=\"p\">{</span><span class=\"s1\">'tzaware'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"s1\">'index_type'</span><span class=\"p\">:</span> <span class=\"s1\">'datetime64[ns]'</span><span class=\"p\">,</span> <span class=\"s1\">'value_type'</span><span class=\"p\">:</span> <span class=\"s1\">'float64'</span><span class=\"p\">,</span>\n <span class=\"s1\">'index_dtype'</span><span class=\"p\">:</span> <span class=\"s1\">'&lt;M8[ns]'</span><span class=\"p\">,</span> <span class=\"s1\">'value_dtype'</span><span class=\"p\">:</span> <span class=\"s1\">'&lt;f8'</span><span class=\"p\">}</span>\n</pre>\n<p>We built a series with naive time stamps, but timezone-aware\ntimestamps work well (and it is advised to use them !).</p>\n<h1>The API object</h1>\n<p>In the few examples above we manipulate the time series through an\nobject that talks directly to the postgresql back end.</p>\n<p>It is possible to also talk to a rest api using the same api, like\nshown below and proceed exactly like in the above code examples:</p>\n<pre> <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">tshistory.api</span> <span class=\"kn\">import</span> <span class=\"n\">timeseries</span>\n <span class=\"o\">&gt;&gt;&gt;</span>\n <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tsa</span> <span class=\"o\">=</span> <span class=\"n\">timeseries</span><span class=\"p\">(</span><span class=\"s1\">'http://my.timeseries.info/api'</span><span class=\"p\">)</span>\n</pre>\n<h2>Using an HTTP/REST end point</h2>\n<p>For this to work, one needs to use the the\n<a href=\"https://bitbucket.org/pythonian/tshistory_rest\" rel=\"nofollow\">tshistory_rest</a> and\n<a href=\"https://bitbucket.org/pythonian/tshistory_client\" rel=\"nofollow\">tshistory_client</a> packages.</p>\n<p>The client package will be used transparently on a\n<code>timeseries('http://.../api')</code> call, nothing more needs to be done\nthan install it.</p>\n<p>For the rest api, you need to build a small <a href=\"https://www.palletsprojects.com/p/flask/\" rel=\"nofollow\">flask</a> app and set\nup the <code>tshistory_rest</code> blueprint like this (in an <code>app.py</code> module):</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">Flask</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">tshistory.api</span> <span class=\"kn\">import</span> <span class=\"n\">timeseries</span>\n<span class=\"kn\">from</span> <span class=\"nn\">tshistory_rest.blueprint</span> <span class=\"kn\">import</span> <span class=\"n\">blueprint</span> <span class=\"k\">as</span> <span class=\"n\">blueprint</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">make_app</span><span class=\"p\">(</span><span class=\"n\">dburi</span><span class=\"p\">):</span>\n    <span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Flask</span><span class=\"p\">(</span><span class=\"s1\">'my-timeseries-app'</span><span class=\"p\">)</span>\n    <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">register_blueprint</span><span class=\"p\">(</span>\n        <span class=\"n\">blueprint</span><span class=\"p\">(</span><span class=\"n\">timeseries</span><span class=\"p\">(</span><span class=\"n\">dburi</span><span class=\"p\">)),</span>\n        <span class=\"n\">url_prefix</span><span class=\"o\">=</span><span class=\"s1\">'/api'</span>\n    <span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">app</span>\n</pre>\n<p>Then, you can start it in development mode like this:</p>\n<pre><span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">make_app</span><span class=\"p\">(</span><span class=\"s1\">'postgresql://me:password@localhost/mydb'</span><span class=\"p\">)</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"s1\">'192.168.1.1'</span><span class=\"p\">,</span> <span class=\"mi\">8080</span><span class=\"p\">)</span>\n</pre>\n<p>or just leave it to a wsgi container in e.g. a <code>wsgi.py</code> module:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">my_series_app.app</span> <span class=\"kn\">import</span> <span class=\"n\">make_app</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">make_app</span><span class=\"p\">(</span><span class=\"s1\">'postgresql://me:password@localhost/mydb'</span><span class=\"p\">)</span>\n</pre>\n<h2>API surface</h2>\n<p>For now we only provide a list of supported methods.</p>\n<h3>Information access (read methods)</h3>\n<ul>\n<li>\n<p>catalog</p>\n</li>\n<li>\n<p>exists</p>\n</li>\n<li>\n<p>get</p>\n</li>\n<li>\n<p>history</p>\n</li>\n<li>\n<p>interval</p>\n</li>\n<li>\n<p>metadata</p>\n</li>\n<li>\n<p>staircase</p>\n</li>\n<li>\n<p>type</p>\n</li>\n</ul>\n<h3>Information update (write methods)</h3>\n<ul>\n<li>\n<p>update</p>\n</li>\n<li>\n<p>update_metadata</p>\n</li>\n<li>\n<p>replace</p>\n</li>\n<li>\n<p>rename</p>\n</li>\n<li>\n<p>delete</p>\n</li>\n</ul>\n<h1>Command line</h1>\n<h2>Basic operations</h2>\n<p>A command line tool is provided, called <code>tsh</code>. It provides its usage\nguidelines:</p>\n<pre> $ tsh\n Usage: tsh <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> COMMAND <span class=\"o\">[</span>ARGS<span class=\"o\">]</span>...\n\n Options:\n   --help  Show this message and exit.\n\nCommands:\n  check    coherence checks of the db\n  get      show a serie in its current state\n  <span class=\"nb\">history</span>  show a serie full <span class=\"nb\">history</span>\n  info     show global statistics of the repository\n  init-db  initialize an new db.\n  log      show revision <span class=\"nb\">history</span> of entire repository or...\n  view     visualize <span class=\"nb\">time</span> series through the web\n</pre>\n<p><code>Info</code> provides an overview of the time series repository (number of\ncommitted changes, number and series and their names).</p>\n<pre> $ tsh info postgres://babar:babarpassword@dataserver:5432/banana_studies\n changeset count: <span class=\"m\">209</span>\n series count:    <span class=\"m\">144</span>\n series names:    banana_spot_price, banana_trades, banana_turnover\n</pre>\n<p><code>Log</code> provides the full history of editions to time series in the\nrepository.</p>\n<pre> $ tsh log postgres://babar:babar@dataserver:5432/banana_studies --limit <span class=\"m\">3</span>\n revision: <span class=\"m\">206</span>\n author:   BABAR\n date:     <span class=\"m\">2017</span>-06-06 <span class=\"m\">15</span>:32:51.502507\n series:   banana_spot_price\n\n revision: <span class=\"m\">207</span>\n author:   BABAR\n date:     <span class=\"m\">2017</span>-06-06 <span class=\"m\">15</span>:32:51.676507\n series:   banana_trades\n\n revision: <span class=\"m\">209</span>\n author:   CELESTE\n date:     <span class=\"m\">2017</span>-06-06 <span class=\"m\">15</span>:32:51.977507\n series:   banana_turnover\n</pre>\n<p>All options of all commands can be obtained by using the <code>--help</code>\nswitch:</p>\n<pre> $ tsh log --help\n Usage: tsh log <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> DB_URI\n\n Options:\n   -l, --limit TEXT\n   --show-diff\n   -s, --serie TEXT\n   --from-rev TEXT\n   --to-rev TEXT\n   --help            Show this message and exit.\n</pre>\n<h2>Extensions</h2>\n<p>It is possible to augment the <code>tsh</code> command with new subcommands (or\naugment, modify existing commands).</p>\n<p>Any program doing so must define a new command and declare a setup\ntools entry point named <code>tshistory:subcommand</code> as in e.g.:</p>\n<pre>    <span class=\"n\">entry_points</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'tshistory.subcommands'</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"s1\">'view=tsview.command:view'</span>\n    <span class=\"p\">]}</span>\n</pre>\n<p>For instance, the <a href=\"https://bitbucket.org/pythonian/tsview\" rel=\"nofollow\">tsview</a> python package provides such a\n<code>view</code> subcommand for generic time series visualisation.</p>\n<h1>Status</h1>\n<p>It is currently considered <code>beta</code> software even though it has been in\nproduction for two years. It is still evolving. Schema/Database\nchanges come with migration procedure using the <code>tsh</code> utility.</p>\n<p>When it is good: if you do mostly appends (and occasional edits in the\npast) it will store data in a very compact way.</p>\n<p>Reading any version of the series will always be the fastest (io-bound)\noperation.</p>\n<p>Alternative backend storage and storage strategies will be considered\nin the future.</p>\n\n          </div>"}, "last_serial": 6568834, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "f0553bee423f1b83bc542350e7300fa8", "sha256": "bf84232a53a9f005ae16b1e47a79c421ea7fcc4c5b050fc67bce77e7a86b5d3d"}, "downloads": -1, "filename": "tshistory-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f0553bee423f1b83bc542350e7300fa8", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 13527, "upload_time": "2017-11-09T14:29:31", "upload_time_iso_8601": "2017-11-09T14:29:31.766267Z", "url": "https://files.pythonhosted.org/packages/08/d8/46bfc71719129b445259e2b49573749b1a7af74abf3cf4a3bd34f8e2ba26/tshistory-0.1.0-py2.py3-none-any.whl", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "0a14878b83b8ff3e771ba372b541066d", "sha256": "1cb6a7a9aaf7b810e61ccf705fba7859c98764d46538e6470ab774fece4f46df"}, "downloads": -1, "filename": "tshistory-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0a14878b83b8ff3e771ba372b541066d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 13598, "upload_time": "2017-11-17T16:39:16", "upload_time_iso_8601": "2017-11-17T16:39:16.023197Z", "url": "https://files.pythonhosted.org/packages/7d/85/e5107801d9b27801e5e841f9dda0a0b049c44e953d4e4b95f1160a755bde/tshistory-0.1.1-py2.py3-none-any.whl", "yanked": false}], "0.10.0": [{"comment_text": "", "digests": {"md5": "46698e29bc2e02f3d4e6893a0dfa7165", "sha256": "6dbeb770d4ed6ac998fc30c730e053a2dbb630a8f58ef27b0b9394b89f5ad738"}, "downloads": -1, "filename": "tshistory-0.10.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "46698e29bc2e02f3d4e6893a0dfa7165", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 26072, "upload_time": "2019-11-20T14:59:21", "upload_time_iso_8601": "2019-11-20T14:59:21.215376Z", "url": "https://files.pythonhosted.org/packages/94/53/f5a66e5cb24b85fabf730734e3fec5ec3b2ddfca5e63f543eac632231815/tshistory-0.10.0-py2.py3-none-any.whl", "yanked": false}], "0.11.0": [{"comment_text": "", "digests": {"md5": "248be4b0e1da30d1041701accf3c1d92", "sha256": "863541f18c0a79dae84d88fffde0eb2f4503c3957ced390480aacba26045b522"}, "downloads": -1, "filename": "tshistory-0.11.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "248be4b0e1da30d1041701accf3c1d92", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 26715, "upload_time": "2020-02-04T14:09:02", "upload_time_iso_8601": "2020-02-04T14:09:02.926781Z", "url": "https://files.pythonhosted.org/packages/49/75/e09cbda5f1025ceaf61ab690b5ba929de5a7375e409f1c8badc5062b5bd9/tshistory-0.11.0-py2.py3-none-any.whl", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "15347710a2ffc6825f71c2cfaec514da", "sha256": "c80b2b7c0be6b4f8f77aacac5536836aca2a163dfa139d0464abbb3659e7b95b"}, "downloads": -1, "filename": "tshistory-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "15347710a2ffc6825f71c2cfaec514da", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 14484, "upload_time": "2018-03-09T11:34:50", "upload_time_iso_8601": "2018-03-09T11:34:50.897595Z", "url": "https://files.pythonhosted.org/packages/eb/c2/e8f2d3147e5e49e20d5621f45225a52499830338440ab7572afdd40c38d6/tshistory-0.2.0-py2.py3-none-any.whl", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "e2e2915f19ee9c07b342e45afc44d843", "sha256": "6e2a146a5a665c56fb20cc88d873f059be6ae94d5eedecd425260b0b107ac920"}, "downloads": -1, "filename": "tshistory-0.4.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e2e2915f19ee9c07b342e45afc44d843", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 21641, "upload_time": "2018-10-05T10:36:27", "upload_time_iso_8601": "2018-10-05T10:36:27.622050Z", "url": "https://files.pythonhosted.org/packages/bf/57/1def61a8cd595e030393b2e1b94dd3dae0e505c87d5a358099e330699808/tshistory-0.4.0-py2.py3-none-any.whl", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "5316ebe23c4d75241c84326377b04de5", "sha256": "9d02ebc8d3d9168b341ba4238144bd51191f519e9a2fe0a72cc32657decf2312"}, "downloads": -1, "filename": "tshistory-0.5.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5316ebe23c4d75241c84326377b04de5", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 22655, "upload_time": "2018-11-16T16:52:44", "upload_time_iso_8601": "2018-11-16T16:52:44.380755Z", "url": "https://files.pythonhosted.org/packages/64/20/7b71a04a084c9dce1e422f48179a53b3f2f0ba0ce109333ad054bc4cdccf/tshistory-0.5.0-py2.py3-none-any.whl", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "7772398abaa6f51b79845701ba8e3c2e", "sha256": "333e5a899af5c91014662581c95879724efc4700907968c8b2a4abbe4b4f74f4"}, "downloads": -1, "filename": "tshistory-0.6.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "7772398abaa6f51b79845701ba8e3c2e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 22782, "upload_time": "2019-01-11T16:54:00", "upload_time_iso_8601": "2019-01-11T16:54:00.755849Z", "url": "https://files.pythonhosted.org/packages/87/cc/125fb94f04cc62e0955e852b56eaa3895aac6386b90ee273d74698255402/tshistory-0.6.0-py2.py3-none-any.whl", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "9fbca660ed4ab792c4e6b9260a6973aa", "sha256": "d63dd2dbd98be781dba92cb03fbca56002a5b2ff2eb507c7b1fd29a5d270a3b9"}, "downloads": -1, "filename": "tshistory-0.7.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "9fbca660ed4ab792c4e6b9260a6973aa", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 20722, "upload_time": "2019-07-19T11:48:59", "upload_time_iso_8601": "2019-07-19T11:48:59.690845Z", "url": "https://files.pythonhosted.org/packages/e8/24/a8665f2049982c6be5ec2bfd67271db15ed90ef2e68d6e00511c3eddef67/tshistory-0.7.0-py2.py3-none-any.whl", "yanked": false}], "0.8.0": [{"comment_text": "", "digests": {"md5": "de139422cb0b459d4a26e2e7efb59958", "sha256": "f0c66e2f8b865ae76ea151d7ca1d29b83b65d88235a4bd2aaadd3fbb6893d219"}, "downloads": -1, "filename": "tshistory-0.8.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "de139422cb0b459d4a26e2e7efb59958", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 24056, "upload_time": "2019-09-04T16:54:05", "upload_time_iso_8601": "2019-09-04T16:54:05.446338Z", "url": "https://files.pythonhosted.org/packages/d2/81/17709ce596d3a450638bb5990e1bf277e566524773d82a3f5d7e18eb1671/tshistory-0.8.0-py2.py3-none-any.whl", "yanked": false}], "0.9.0": [{"comment_text": "", "digests": {"md5": "ce3dde17c46e4b43b75edc28bb54d234", "sha256": "a9130f16991b1f50a36a4a97856a12032d0d7d3fdc5955154b0b079ea5e625a7"}, "downloads": -1, "filename": "tshistory-0.9.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ce3dde17c46e4b43b75edc28bb54d234", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 25815, "upload_time": "2019-10-28T09:28:20", "upload_time_iso_8601": "2019-10-28T09:28:20.565908Z", "url": "https://files.pythonhosted.org/packages/f6/52/5dbdba25a38b165fae2597d7dc10722e754539685881c3af8e605fee0c2c/tshistory-0.9.0-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "248be4b0e1da30d1041701accf3c1d92", "sha256": "863541f18c0a79dae84d88fffde0eb2f4503c3957ced390480aacba26045b522"}, "downloads": -1, "filename": "tshistory-0.11.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "248be4b0e1da30d1041701accf3c1d92", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 26715, "upload_time": "2020-02-04T14:09:02", "upload_time_iso_8601": "2020-02-04T14:09:02.926781Z", "url": "https://files.pythonhosted.org/packages/49/75/e09cbda5f1025ceaf61ab690b5ba929de5a7375e409f1c8badc5062b5bd9/tshistory-0.11.0-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:45:19 2020"}