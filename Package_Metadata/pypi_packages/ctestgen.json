{"info": {"author": "Vasilkin Vladislav", "author_email": "volandtymim@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6"], "description": "# Ctestgen\n[Russian readme version](./README-ru.md)\n\nPython lib for generating C-programms and running them by your target-program.\nDesigned to assist in automated testing of programs working with C-programms.\n\n## Installation\n\n```shell\npip3 install ctestgen\n```\n\n## Example usage\n\n**Ctestgen** has two main use cases: C-programs generating and \nrunning target program with C-programs as input.\n\n### C-programs generating\n\nTo generating programs, you need to inherit abstract class `ctestgen.generator.TestGenerator`\nand reimplement method `_generate_programs()`, that returns c-programs abstract syntax trees.\nAbstract syntax tree describing in OOP style, more [here](docs/generator_api.md).\nMethod `run()` calls `_generate_programs()` and then stores programs in output dir, \nwhich is defined when creating a class object: `ExampleTestGenerator('example_generator_output')`.\n\nDescribe the class, that generating programs with sum function, that takes from 2 to 5 arguments. \nFull code [here](./examples/example_test_generator.py).\nGenerated code [here](./examples/example_generator_output).\n```python\nfrom ctestgen.generator import TestGenerator\nclass ExampleTestGenerator(TestGenerator):\n    def _generate_programs(self):\n        generated_programs = list()\n        for i in range(2, 6):\n            sum_arguments = [Int('num_' + str(arg_idx)) for arg_idx in range(i)]\n            sum_function = Function('sum_' + str(i) + '_nums', Int, sum_arguments)\n            sum_result = Int('sum')\n            sum_body = CodeBlock(\n                Assignment(VarDeclaration(sum_result), Add(sum_arguments)),\n                Return(sum_result)\n            )\n            sum_function.set_body(sum_body)\n            example_program = Program('sum_' + str(i))\n            example_program.add_function(sum_function)\n            generated_programs.append(example_program)\n        return generated_programs\n\nexample_generator = ExampleTestGenerator('example_generator_output')\nexample_generator.run()\n```\nThis generates, as example `sum_3.c`.\n```c\nint sum_3_nums(int num_0, int num_1, int num_2) {\n  int sum = num_0 + num_1 + num_2;\n  return sum;\n}\n```\n\n**Generator** API documentation [here](docs/generator_api.md).\nIt contains wide OOP tools to describe desired C-programs.\n\n### Tests running\n\nTo running programs, you need to inherit abstract class `ctestgen.runner.TestRunner`\nand reimplement method `_on_test()`, that called on every program in defined directory.\n**TestRunner** designed to run target program with every file, that contained in the target directory \nand its subdirectories\nand have target file extensions, which defines in class object creation, by default it\\`s `.c`.\n\n**TestRunner** method `run()` describes testing pipeline, and class methods designed to override them in subclasses. \n\nTesting pipeline:\n - recursively collect test files in defined directory\n - call `_on_run_start(tests)`\n - for every dir, that contained test files, call `_on_testdir(test_dir, test_filenames)`\n - for every file in that dir, call `_on_test(test_dir, test_filename, env)`, \n that returns object of `TestRunResults` class, that contains run result (SUCCESS or FAIL) \n and output, that may be stored in corresponding files `success.txt` or `fail.txt`, \n which defines by argument `dump_results_to_files` in class object creation. \n - call `_on_run_finish(tests)`\n\n TestRunner collects metrics of successes and fails for every testset, and global metrics, \n that stores in file `metrics.txt`.\n\nIn most cases it\\`s enough to work with abstract class `ctestgen.runner.BasicTestRunner`, \nwhich takes target program arguments by argument `run_args` in class object creation.\nIn `_on_test(test_dir, test_filename, env)` it calls target program as subprocess, \nand pass results to method `_process_program_response(self, test_dir, test_filename, program_response)`.\nSo it\\`s  enough to override this method in subclass.\n\nDescribe the class, that checking word *error* in target program output, test fails if it was found.\nFull code [here](./examples/example_test_runner.py).\n```python\nfrom ctestgen.runner import BasicTestRunner\nclass ExampleTestRunner(BasicTestRunner):\n    def _process_program_response(self, test_dir, test_filename, program_response):\n        if 'error' in program_response[0] or 'error' in program_response[1]:\n            return TestRunResult(TestRunResult.ResultType.FAIL, program_response[0] + program_response[1])\n        return TestRunResult(TestRunResult.ResultType.SUCCESS, program_response[0] + program_response[1])\n\nexample_runner = ExampleTestRunner(['tsar'],\n                                   output_base_dir='runner_output',\n                                   test_filename_extensions=['.c'],\n                                   test_base_dir='example_generator_output',\n                                   runner_name='example_runner')\nexample_runner.run()\n```\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/VolandTymim/ctestgen", "keywords": "python c code-generation code-generator autotesting", "license": "", "maintainer": "", "maintainer_email": "", "name": "ctestgen", "package_url": "https://pypi.org/project/ctestgen/", "platform": "", "project_url": "https://pypi.org/project/ctestgen/", "project_urls": {"Homepage": "https://github.com/VolandTymim/ctestgen"}, "release_url": "https://pypi.org/project/ctestgen/0.1.2/", "requires_dist": null, "requires_python": "", "summary": "https://github.com/VolandTymim/ctestgen", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Ctestgen</h1>\n<p><a href=\"./README-ru.md\" rel=\"nofollow\">Russian readme version</a></p>\n<p>Python lib for generating C-programms and running them by your target-program.\nDesigned to assist in automated testing of programs working with C-programms.</p>\n<h2>Installation</h2>\n<pre>pip3 install ctestgen\n</pre>\n<h2>Example usage</h2>\n<p><strong>Ctestgen</strong> has two main use cases: C-programs generating and\nrunning target program with C-programs as input.</p>\n<h3>C-programs generating</h3>\n<p>To generating programs, you need to inherit abstract class <code>ctestgen.generator.TestGenerator</code>\nand reimplement method <code>_generate_programs()</code>, that returns c-programs abstract syntax trees.\nAbstract syntax tree describing in OOP style, more <a href=\"docs/generator_api.md\" rel=\"nofollow\">here</a>.\nMethod <code>run()</code> calls <code>_generate_programs()</code> and then stores programs in output dir,\nwhich is defined when creating a class object: <code>ExampleTestGenerator('example_generator_output')</code>.</p>\n<p>Describe the class, that generating programs with sum function, that takes from 2 to 5 arguments.\nFull code <a href=\"./examples/example_test_generator.py\" rel=\"nofollow\">here</a>.\nGenerated code <a href=\"./examples/example_generator_output\" rel=\"nofollow\">here</a>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ctestgen.generator</span> <span class=\"kn\">import</span> <span class=\"n\">TestGenerator</span>\n<span class=\"k\">class</span> <span class=\"nc\">ExampleTestGenerator</span><span class=\"p\">(</span><span class=\"n\">TestGenerator</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_generate_programs</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">generated_programs</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">()</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">):</span>\n            <span class=\"n\">sum_arguments</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">Int</span><span class=\"p\">(</span><span class=\"s1\">'num_'</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">arg_idx</span><span class=\"p\">))</span> <span class=\"k\">for</span> <span class=\"n\">arg_idx</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)]</span>\n            <span class=\"n\">sum_function</span> <span class=\"o\">=</span> <span class=\"n\">Function</span><span class=\"p\">(</span><span class=\"s1\">'sum_'</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s1\">'_nums'</span><span class=\"p\">,</span> <span class=\"n\">Int</span><span class=\"p\">,</span> <span class=\"n\">sum_arguments</span><span class=\"p\">)</span>\n            <span class=\"n\">sum_result</span> <span class=\"o\">=</span> <span class=\"n\">Int</span><span class=\"p\">(</span><span class=\"s1\">'sum'</span><span class=\"p\">)</span>\n            <span class=\"n\">sum_body</span> <span class=\"o\">=</span> <span class=\"n\">CodeBlock</span><span class=\"p\">(</span>\n                <span class=\"n\">Assignment</span><span class=\"p\">(</span><span class=\"n\">VarDeclaration</span><span class=\"p\">(</span><span class=\"n\">sum_result</span><span class=\"p\">),</span> <span class=\"n\">Add</span><span class=\"p\">(</span><span class=\"n\">sum_arguments</span><span class=\"p\">)),</span>\n                <span class=\"n\">Return</span><span class=\"p\">(</span><span class=\"n\">sum_result</span><span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">sum_function</span><span class=\"o\">.</span><span class=\"n\">set_body</span><span class=\"p\">(</span><span class=\"n\">sum_body</span><span class=\"p\">)</span>\n            <span class=\"n\">example_program</span> <span class=\"o\">=</span> <span class=\"n\">Program</span><span class=\"p\">(</span><span class=\"s1\">'sum_'</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">))</span>\n            <span class=\"n\">example_program</span><span class=\"o\">.</span><span class=\"n\">add_function</span><span class=\"p\">(</span><span class=\"n\">sum_function</span><span class=\"p\">)</span>\n            <span class=\"n\">generated_programs</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">example_program</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">generated_programs</span>\n\n<span class=\"n\">example_generator</span> <span class=\"o\">=</span> <span class=\"n\">ExampleTestGenerator</span><span class=\"p\">(</span><span class=\"s1\">'example_generator_output'</span><span class=\"p\">)</span>\n<span class=\"n\">example_generator</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n<p>This generates, as example <code>sum_3.c</code>.</p>\n<pre><span class=\"kt\">int</span> <span class=\"nf\">sum_3_nums</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">num_0</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">num_1</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">num_2</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kt\">int</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"n\">num_0</span> <span class=\"o\">+</span> <span class=\"n\">num_1</span> <span class=\"o\">+</span> <span class=\"n\">num_2</span><span class=\"p\">;</span>\n  <span class=\"k\">return</span> <span class=\"n\">sum</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre>\n<p><strong>Generator</strong> API documentation <a href=\"docs/generator_api.md\" rel=\"nofollow\">here</a>.\nIt contains wide OOP tools to describe desired C-programs.</p>\n<h3>Tests running</h3>\n<p>To running programs, you need to inherit abstract class <code>ctestgen.runner.TestRunner</code>\nand reimplement method <code>_on_test()</code>, that called on every program in defined directory.\n<strong>TestRunner</strong> designed to run target program with every file, that contained in the target directory\nand its subdirectories\nand have target file extensions, which defines in class object creation, by default it`s <code>.c</code>.</p>\n<p><strong>TestRunner</strong> method <code>run()</code> describes testing pipeline, and class methods designed to override them in subclasses.</p>\n<p>Testing pipeline:</p>\n<ul>\n<li>recursively collect test files in defined directory</li>\n<li>call <code>_on_run_start(tests)</code></li>\n<li>for every dir, that contained test files, call <code>_on_testdir(test_dir, test_filenames)</code></li>\n<li>for every file in that dir, call <code>_on_test(test_dir, test_filename, env)</code>,\nthat returns object of <code>TestRunResults</code> class, that contains run result (SUCCESS or FAIL)\nand output, that may be stored in corresponding files <code>success.txt</code> or <code>fail.txt</code>,\nwhich defines by argument <code>dump_results_to_files</code> in class object creation.</li>\n<li>call <code>_on_run_finish(tests)</code></li>\n</ul>\n<p>TestRunner collects metrics of successes and fails for every testset, and global metrics,\nthat stores in file <code>metrics.txt</code>.</p>\n<p>In most cases it`s enough to work with abstract class <code>ctestgen.runner.BasicTestRunner</code>,\nwhich takes target program arguments by argument <code>run_args</code> in class object creation.\nIn <code>_on_test(test_dir, test_filename, env)</code> it calls target program as subprocess,\nand pass results to method <code>_process_program_response(self, test_dir, test_filename, program_response)</code>.\nSo it`s  enough to override this method in subclass.</p>\n<p>Describe the class, that checking word <em>error</em> in target program output, test fails if it was found.\nFull code <a href=\"./examples/example_test_runner.py\" rel=\"nofollow\">here</a>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ctestgen.runner</span> <span class=\"kn\">import</span> <span class=\"n\">BasicTestRunner</span>\n<span class=\"k\">class</span> <span class=\"nc\">ExampleTestRunner</span><span class=\"p\">(</span><span class=\"n\">BasicTestRunner</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_process_program_response</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">test_dir</span><span class=\"p\">,</span> <span class=\"n\">test_filename</span><span class=\"p\">,</span> <span class=\"n\">program_response</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"s1\">'error'</span> <span class=\"ow\">in</span> <span class=\"n\">program_response</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"ow\">or</span> <span class=\"s1\">'error'</span> <span class=\"ow\">in</span> <span class=\"n\">program_response</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span>\n            <span class=\"k\">return</span> <span class=\"n\">TestRunResult</span><span class=\"p\">(</span><span class=\"n\">TestRunResult</span><span class=\"o\">.</span><span class=\"n\">ResultType</span><span class=\"o\">.</span><span class=\"n\">FAIL</span><span class=\"p\">,</span> <span class=\"n\">program_response</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">program_response</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n        <span class=\"k\">return</span> <span class=\"n\">TestRunResult</span><span class=\"p\">(</span><span class=\"n\">TestRunResult</span><span class=\"o\">.</span><span class=\"n\">ResultType</span><span class=\"o\">.</span><span class=\"n\">SUCCESS</span><span class=\"p\">,</span> <span class=\"n\">program_response</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">program_response</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n\n<span class=\"n\">example_runner</span> <span class=\"o\">=</span> <span class=\"n\">ExampleTestRunner</span><span class=\"p\">([</span><span class=\"s1\">'tsar'</span><span class=\"p\">],</span>\n                                   <span class=\"n\">output_base_dir</span><span class=\"o\">=</span><span class=\"s1\">'runner_output'</span><span class=\"p\">,</span>\n                                   <span class=\"n\">test_filename_extensions</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'.c'</span><span class=\"p\">],</span>\n                                   <span class=\"n\">test_base_dir</span><span class=\"o\">=</span><span class=\"s1\">'example_generator_output'</span><span class=\"p\">,</span>\n                                   <span class=\"n\">runner_name</span><span class=\"o\">=</span><span class=\"s1\">'example_runner'</span><span class=\"p\">)</span>\n<span class=\"n\">example_runner</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n<h2>License</h2>\n<p>This project is licensed under the MIT License - see the <a href=\"LICENSE\" rel=\"nofollow\">LICENSE</a> file for details.</p>\n\n          </div>"}, "last_serial": 6357206, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "97f1cc18566428a3e79493344692f126", "sha256": "ed0c43282857017ef2a3c622fde0e2868ca7b7fa612bdbc921326cee91dccbc6"}, "downloads": -1, "filename": "ctestgen-0.1.0-py3.6.egg", "has_sig": false, "md5_digest": "97f1cc18566428a3e79493344692f126", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": null, "size": 39553, "upload_time": "2018-12-23T17:49:50", "upload_time_iso_8601": "2018-12-23T17:49:50.293054Z", "url": "https://files.pythonhosted.org/packages/79/14/1186b64341d06a6f901b8c8168600959819716e6197de5c52bdc088071f5/ctestgen-0.1.0-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "d1f3050e548218a362f6b204cce96038", "sha256": "c8b1bad477ea342650dec08c48ac2f369054ae8799a79590f89f3c7d5701c123"}, "downloads": -1, "filename": "ctestgen-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "d1f3050e548218a362f6b204cce96038", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 17393, "upload_time": "2018-12-23T17:49:48", "upload_time_iso_8601": "2018-12-23T17:49:48.204743Z", "url": "https://files.pythonhosted.org/packages/67/45/9f22f99f3d18ce506a6f7d36f6e412161a66397d74da96c1a069e995b8dc/ctestgen-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cdc00937da89563c00831952e12e876c", "sha256": "665d4c188b9eb93fde3d8a4029eb340a26386cd53edfae566d56171ae496c32c"}, "downloads": -1, "filename": "ctestgen-0.1.0.tar.gz", "has_sig": false, "md5_digest": "cdc00937da89563c00831952e12e876c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11591, "upload_time": "2018-12-23T17:49:51", "upload_time_iso_8601": "2018-12-23T17:49:51.571088Z", "url": "https://files.pythonhosted.org/packages/88/c7/24c43c0742625c908f601ef74b699ba4bfe8799a6d0f09c0252d2ed4d775/ctestgen-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "17bb1ce151d4762efe950f49e2d59074", "sha256": "1849cd4898af4f8a2f92b93d8ab4d0542feed290dafb32d26a88f89f1b29a39e"}, "downloads": -1, "filename": "ctestgen-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "17bb1ce151d4762efe950f49e2d59074", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 17920, "upload_time": "2019-11-21T23:08:07", "upload_time_iso_8601": "2019-11-21T23:08:07.328169Z", "url": "https://files.pythonhosted.org/packages/45/14/d7199f81b10ea65d07ae4a3b1a154e15407a2f3d794282d039c61fcf96e0/ctestgen-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a1d1b707ee960e71fd3eeaa13c91c14f", "sha256": "dd74608d60a7823f1d8ff4b763dff4a47d8614290d1a191ece11c6633e1e6f9d"}, "downloads": -1, "filename": "ctestgen-0.1.1.tar.gz", "has_sig": false, "md5_digest": "a1d1b707ee960e71fd3eeaa13c91c14f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13999, "upload_time": "2019-11-21T23:08:09", "upload_time_iso_8601": "2019-11-21T23:08:09.350509Z", "url": "https://files.pythonhosted.org/packages/a6/f4/d5fb54373da8bd9515726b8b4853b19bca6d7eb517aeee6a4b595fdadbfe/ctestgen-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "7be2ca4d3adf4d4969e2d0f9f438862b", "sha256": "534fc39137d10de648bf66a486b3c5b4c5b05a7ad058322f955c46268e002617"}, "downloads": -1, "filename": "ctestgen-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "7be2ca4d3adf4d4969e2d0f9f438862b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 17825, "upload_time": "2019-12-25T02:47:34", "upload_time_iso_8601": "2019-12-25T02:47:34.727350Z", "url": "https://files.pythonhosted.org/packages/b4/f4/00ea683bf07426cb392ba3380041be4da15fd42eed744ee2ab673100488a/ctestgen-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3f43ad9afc6d95d1bdf77c380d8d20d2", "sha256": "b031830ed356a8b8855f45dec8b7d43bb9d4fdfe722f552ded531044c7d7c356"}, "downloads": -1, "filename": "ctestgen-0.1.2.tar.gz", "has_sig": false, "md5_digest": "3f43ad9afc6d95d1bdf77c380d8d20d2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13979, "upload_time": "2019-12-25T02:47:36", "upload_time_iso_8601": "2019-12-25T02:47:36.317973Z", "url": "https://files.pythonhosted.org/packages/ce/4d/b87f33e014752902b982d83e84e1aa48aa801457e126e24d57f284d4dd3f/ctestgen-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7be2ca4d3adf4d4969e2d0f9f438862b", "sha256": "534fc39137d10de648bf66a486b3c5b4c5b05a7ad058322f955c46268e002617"}, "downloads": -1, "filename": "ctestgen-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "7be2ca4d3adf4d4969e2d0f9f438862b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 17825, "upload_time": "2019-12-25T02:47:34", "upload_time_iso_8601": "2019-12-25T02:47:34.727350Z", "url": "https://files.pythonhosted.org/packages/b4/f4/00ea683bf07426cb392ba3380041be4da15fd42eed744ee2ab673100488a/ctestgen-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3f43ad9afc6d95d1bdf77c380d8d20d2", "sha256": "b031830ed356a8b8855f45dec8b7d43bb9d4fdfe722f552ded531044c7d7c356"}, "downloads": -1, "filename": "ctestgen-0.1.2.tar.gz", "has_sig": false, "md5_digest": "3f43ad9afc6d95d1bdf77c380d8d20d2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13979, "upload_time": "2019-12-25T02:47:36", "upload_time_iso_8601": "2019-12-25T02:47:36.317973Z", "url": "https://files.pythonhosted.org/packages/ce/4d/b87f33e014752902b982d83e84e1aa48aa801457e126e24d57f284d4dd3f/ctestgen-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:41:37 2020"}