{"info": {"author": "Jeff Hammel", "author_email": "k0scist@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "commentator\n===========\n\nWSGI commenting middleware\n\nTo use\n------\n\nMake a factory wrapping your app in the commentator middleware.\nCurrently, commentator only pickles comments.  To the constructor of\nCommentator, pass a database (the path to the pickle) and a pattern.\nThe pattern is in the form of\n\n<URL pattern>#<xpath pattern> -> URL\n\nThe URL pattern is a \n`python regular expression <ttp://docs.python.org/library/re.html>`_\nto match against the request's PATH_INFO.  \n\nThe xpath pattern is where you want to place the comments on the\npage.  See http://www.w3schools.com/XPath/ for more about xpath\nexpressions.\n\nThe URL is a \n`python string template <http://docs.python.org/library/string.html>`_\nthat is substituted for groups in the URL regular expression and\nelement attributes in the found nodes.  The element attributes are\nreferenced by name (``${id}``, ``${class}``, etc) and the groups are\nreferenced by number (``${1}``, ...).\n\n\nExample\n-------\n\nA reference implementation is illustrated in the commentator.ini\nfile.  This uses the pattern:\n\n ``commentator.pattern = (.*)#.//div[@id='comment_on_this'] -> ${1}``\n\nWhat this pattern says is\n\n * comment on every PATH_INFO ``(.*)``\n * append the rendered content template to ``div[@id='comment_on_this']``\n * reference the PATH_INFO as the canonical URL ``${1}``\n\nTo comment on every HTML page at the end of the body, you would use\n\n ``commentator.pattern = (.*)#.//body -> ${1}``\n\nA more complex example is in the ``.ini`` file, commented out, for use with\n`bitsyblog <http://k0s.org/hg/bitsyblog>`_ :\n \n  ``commentator.pattern = /blog/.*#.//div[@class='blog-entry'] -> /blog/${id}``\n\nThis pattern says:\n\n * comment on all paths under blog\n * put the comments at the end of each ``div[@class='blog-entry']``\n * get the URI from the ``div``'s id, not from the ``PATH_INFO``\n\n\nTODO\n----\n\nThis is very alpha.  I'd be happy to work more on this if anyone wants\nit.  A few outstanding issues:\n\n * fix weird lxml issue where you have to put .// for elements\n * allow commenting on multiple resources (multiple patterns per instance)\n * locking pickle files\n * fix couch....not sure what's wrong\n * allow use of CSS classes, not just xpath\n\n--\n\nhttp://k0s.org", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://k0s.org/hg/commentator", "keywords": null, "license": "GPL", "maintainer": null, "maintainer_email": null, "name": "commentator", "package_url": "https://pypi.org/project/commentator/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/commentator/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://k0s.org/hg/commentator"}, "release_url": "https://pypi.org/project/commentator/0.1/", "requires_dist": null, "requires_python": null, "summary": "WSGI commenting middleware", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>WSGI commenting middleware</p>\n<div id=\"to-use\">\n<h2>To use</h2>\n<p>Make a factory wrapping your app in the commentator middleware.\nCurrently, commentator only pickles comments.  To the constructor of\nCommentator, pass a database (the path to the pickle) and a pattern.\nThe pattern is in the form of</p>\n<p>&lt;URL pattern&gt;#&lt;xpath pattern&gt; -&gt; URL</p>\n<p>The URL pattern is a\n<a>python regular expression</a>\nto match against the request\u2019s PATH_INFO.</p>\n<p>The xpath pattern is where you want to place the comments on the\npage.  See <a href=\"http://www.w3schools.com/XPath/\" rel=\"nofollow\">http://www.w3schools.com/XPath/</a> for more about xpath\nexpressions.</p>\n<p>The URL is a\n<a href=\"http://docs.python.org/library/string.html\" rel=\"nofollow\">python string template</a>\nthat is substituted for groups in the URL regular expression and\nelement attributes in the found nodes.  The element attributes are\nreferenced by name (<tt>${id}</tt>, <tt>${class}</tt>, etc) and the groups are\nreferenced by number (<tt>${1}</tt>, \u2026).</p>\n</div>\n<div id=\"example\">\n<h2>Example</h2>\n<p>A reference implementation is illustrated in the commentator.ini\nfile.  This uses the pattern:</p>\n<blockquote>\n<tt>commentator.pattern = <span class=\"pre\">(.*)#.//div[@id='comment_on_this']</span> <span class=\"pre\">-&gt;</span> ${1}</tt></blockquote>\n<p>What this pattern says is</p>\n<blockquote>\n<ul>\n<li>comment on every PATH_INFO <tt><span class=\"pre\">(.*)</span></tt></li>\n<li>append the rendered content template to <tt><span class=\"pre\">div[@id='comment_on_this']</span></tt></li>\n<li>reference the PATH_INFO as the canonical URL <tt>${1}</tt></li>\n</ul>\n</blockquote>\n<p>To comment on every HTML page at the end of the body, you would use</p>\n<blockquote>\n<tt>commentator.pattern = <span class=\"pre\">(.*)#.//body</span> <span class=\"pre\">-&gt;</span> ${1}</tt></blockquote>\n<p>A more complex example is in the <tt>.ini</tt> file, commented out, for use with\n<a href=\"http://k0s.org/hg/bitsyblog\" rel=\"nofollow\">bitsyblog</a> :</p>\n<blockquote>\n<tt>commentator.pattern = <span class=\"pre\">/blog/.*#.//div[@class='blog-entry']</span> <span class=\"pre\">-&gt;</span> <span class=\"pre\">/blog/${id}</span></tt></blockquote>\n<p>This pattern says:</p>\n<blockquote>\n<ul>\n<li>comment on all paths under blog</li>\n<li>put the comments at the end of each <tt><span class=\"pre\">div[@class='blog-entry']</span></tt></li>\n<li>get the URI from the <tt>div</tt>\u2019s id, not from the <tt>PATH_INFO</tt></li>\n</ul>\n</blockquote>\n</div>\n<div id=\"todo\">\n<h2>TODO</h2>\n<p>This is very alpha.  I\u2019d be happy to work more on this if anyone wants\nit.  A few outstanding issues:</p>\n<blockquote>\n<ul>\n<li>fix weird lxml issue where you have to put .// for elements</li>\n<li>allow commenting on multiple resources (multiple patterns per instance)</li>\n<li>locking pickle files</li>\n<li>fix couch\u2026.not sure what\u2019s wrong</li>\n<li>allow use of CSS classes, not just xpath</li>\n</ul>\n</blockquote>\n<p>\u2013</p>\n<p><a href=\"http://k0s.org\" rel=\"nofollow\">http://k0s.org</a></p>\n</div>\n\n          </div>"}, "last_serial": 788324, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "48730b75e48be7d8cb9248ff0ba7748e", "sha256": "0898f004849eaab1fab72b0235721961a3df9d82a45b70347258b4cc2f72a950"}, "downloads": -1, "filename": "commentator-0.1.tar.gz", "has_sig": false, "md5_digest": "48730b75e48be7d8cb9248ff0ba7748e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5005, "upload_time": "2010-01-24T23:41:22", "upload_time_iso_8601": "2010-01-24T23:41:22.048292Z", "url": "https://files.pythonhosted.org/packages/d8/8c/9519668b415d9bb7ccd4b56e00ec86d86b3049f7f68e1005b728a269e1c2/commentator-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "48730b75e48be7d8cb9248ff0ba7748e", "sha256": "0898f004849eaab1fab72b0235721961a3df9d82a45b70347258b4cc2f72a950"}, "downloads": -1, "filename": "commentator-0.1.tar.gz", "has_sig": false, "md5_digest": "48730b75e48be7d8cb9248ff0ba7748e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5005, "upload_time": "2010-01-24T23:41:22", "upload_time_iso_8601": "2010-01-24T23:41:22.048292Z", "url": "https://files.pythonhosted.org/packages/d8/8c/9519668b415d9bb7ccd4b56e00ec86d86b3049f7f68e1005b728a269e1c2/commentator-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:23 2020"}