{"info": {"author": "Kevin Noel, Imad E. Bekkouch", "author_email": "brookm291@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Environment :: Web Environment", "Intended Audience :: Developers", "Intended Audience :: End Users/Desktop", "Intended Audience :: Science/Research", "License :: OSI Approved :: Apache Software License", "Operating System :: MacOS :: MacOS X", "Operating System :: POSIX", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Topic :: Scientific/Engineering", "Topic :: Scientific/Engineering :: Artificial Intelligence", "Topic :: Scientific/Engineering :: Information Analysis", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "\nMetrics for evaluating machine learning models or Data Science\n\nInclude :\n   All metrics from SKLEARN.\n   Category based metrics.\n########################################################################\n\n\n```\nfrom metric.metric import *\n\n\n##### Classification metrics\t\n\naccuracy_score(y_true, y_pred,...)\tAccuracy classification score.\nauc(x,y)\tCompute Area Under the Curve (AUC) using the trapezoidal rule\naverage_precision_score(y_true,y_score)\tCompute average precision (AP) from prediction scores\nbalanced_accuracy_score(y_true,y_pred)\tCompute the balanced accuracy\nbrier_score_loss(y_true,y_prob,...)\tCompute the Brier score.\nclassification_report(y_true,y_pred)\tBuild a text report showing the main classification metrics\ncohen_kappa_score(y1,y2,...)\tCohen\u00e2\u20ac\u2122s kappa: a statistic that measures inter-annotator agreement.\nconfusion_matrix(y_true,y_pred,...)\tCompute confusion matrix to evaluate the accuracy of a classification.\ndcg_score(y_true,y_score ,\u00c2\u00a0k,\u00c2\u00a0...  )\tCompute Discounted Cumulative Gain.\nf1_score(y_true,y_pred,...)\tCompute the F1 score, also known as balanced F-score or F-measure\nfbeta_score(y_true,y_pred,\u00c2\u00a0beta,...)\tCompute the F-beta score\nhamming_loss(y_true,y_pred,...)\tCompute the average Hamming loss.\nhinge_loss(y_true,\u00c2\u00a0pred_decision,...)\tAverage hinge loss (non-regularized)\njaccard_score(y_true,y_pred,...)\tJaccard similarity coefficient score\nlog_loss(y_true,y_pred ,\u00c2\u00a0eps,\u00c2\u00a0...  )\tLog loss, aka logistic loss or cross-entropy loss.\nmatthews_corrcoef(y_true,y_pred,...)\tCompute the Matthews correlation coefficient (MCC)\nmultilabel_confusion_matrix(y_true,\u00c2\u00a0...)\tCompute a confusion matrix for each class or sample\nndcg_score(y_true,y_score ,\u00c2\u00a0k,\u00c2\u00a0...  )\tCompute Normalized Discounted Cumulative Gain.\nprecision_recall_curve(y_true,\u00c2\u00a0...)\tCompute precision-recall pairs for different probability thresholds\nprecision_recall_fscore_support(...)\tCompute precision, recall, F-measure and support for each class\nprecision_score(y_true,y_pred,...)\tCompute the precision\nrecall_score(y_true,y_pred,...)\tCompute the recall\nroc_auc_score(y_true,y_score,...)\tCompute Area Under the Receiver Operating Characteristic Curve (ROC AUC) from prediction scores.\nroc_curve(y_true,y_score,...)\tCompute Receiver operating characteristic (ROC)\nzero_one_loss(y_true,y_pred,...)\tZero-one classification loss.\n\n\n\n##### Regression metrics\t\n\nexplained_variance_score(y_true,y_pred)\tExplained variance regression score function\nmax_error(y_true,y_pred)\tmax_error metric calculates the maximum residual error.\nmean_absolute_error(y_true,y_pred)\tMean absolute error regression loss\nmean_squared_error(y_true,y_pred,...)\tMean squared error regression loss\nmean_squared_log_error(y_true,y_pred)\tMean squared logarithmic error regression loss\nmedian_absolute_error(y_true,y_pred)\tMedian absolute error regression loss\nr2_score(y_true,y_pred,...)\tR^2 (coefficient of determination) regression score function.\nmean_poisson_deviance(y_true,y_pred)\tMean Poisson deviance regression loss.\nmean_gamma_deviance(y_true,y_pred)\tMean Gamma deviance regression loss.\nmean_tweedie_deviance(y_true,y_pred)\tMean Tweedie deviance regression loss.\n\n\n\n##### Multilabel ranking metrics\t\n\ncoverage_error(y_true,y_score,...)\tCoverage error measure\nlabel_ranking_average_precision_score(...)\tCompute ranking-based average precision\nlabel_ranking_loss(y_true,y_score)\tCompute Ranking loss measure\n\n\n\n##### Clustering metrics\t\n\nsupervised, which uses a ground truth class values for each sample.\t\nunsupervised, which does not and measures the \u00e2\u20ac\u02dcquality\u00e2\u20ac\u2122 of the model itself.\t\n\nadjusted_mutual_info_score(...,...)\tAdjusted Mutual Information between two clusterings.\nadjusted_rand_score(labels_true,\u00c2\u00a0...)\tRand index adjusted for chance.\ncalinski_harabasz_score(X,\u00c2\u00a0labels)\tCompute the Calinski and Harabasz score.\ndavies_bouldin_score(X,\u00c2\u00a0labels)\tComputes the Davies-Bouldin score.\ncompleteness_score(labels_true,\u00c2\u00a0...)\tCompleteness metric of a cluster labeling given a ground truth.\ncluster.contingency_matrix(...,...)\tBuild a contingency matrix describing the relationship between labels.\nfowlkes_mallows_score(labels_true,\u00c2\u00a0...)\tMeasure the similarity of two clusterings of a set of points.\nhomogeneity_completeness_v_measure(...)\tCompute the homogeneity and completeness and V-Measure scores at once.\nhomogeneity_score(labels_true,\u00c2\u00a0...)\tHomogeneity metric of a cluster labeling given a ground truth.\nmutual_info_score(labels_true,\u00c2\u00a0...)\tMutual Information between two clusterings.\nnormalized_mutual_info_score(...,...)\tNormalized Mutual Information between two clusterings.\nsilhouette_score(X,\u00c2\u00a0labels,...)\tCompute the mean Silhouette Coefficient of all samples.\nsilhouette_samples(X,\u00c2\u00a0labels ,\u00c2\u00a0metric  )\tCompute the Silhouette Coefficient for each sample.\nv_measure_score(labels_true,\u00c2\u00a0labels_pred)\tV-measure cluster labeling given a ground truth.\n\n\nBiclustering metrics\t\n\nconsensus_score(a,\u00c2\u00a0b ,\u00c2\u00a0similarity  )\tThe similarity of two sets of biclusters.\n\n\n\nPairwise metrics\t\n\npairwise.additive_chi2_kernel(X ,y  )\tComputes the additive chi-squared kernel between observations in X and Y\npairwise.chi2_kernel(X ,y,\u00c2\u00a0gamma  )\tComputes the exponential chi-squared kernel X and Y.\npairwise.cosine_similarity(X ,y,\u00c2\u00a0...  )\tCompute cosine similarity between samples in X and Y.\npairwise.cosine_distances(X ,y  )\tCompute cosine distance between samples in X and Y.\npairwise.distance_metrics()\tValid metrics for pairwise_distances.\npairwise.euclidean_distances(X ,y,\u00c2\u00a0...  )\tConsidering the rows of X (and Y=X) as vectors, compute the distance matrix between each pair of vectors.\npairwise.haversine_distances(X ,y  )\tCompute the Haversine distance between samples in X and Y\npairwise.kernel_metrics()\tValid metrics for pairwise_kernels\npairwise.laplacian_kernel(X ,y,\u00c2\u00a0gamma  )\tCompute the laplacian kernel between X and Y.\npairwise.linear_kernel(X ,y,\u00c2\u00a0...  )\tCompute the linear kernel between X and Y.\npairwise.manhattan_distances(X ,y,\u00c2\u00a0...  )\tCompute the L1 distances between the vectors in X and Y.\npairwise.nan_euclidean_distances(X)\tCalculate the euclidean distances in the presence of missing values.\npairwise.pairwise_kernels(X ,y,\u00c2\u00a0...  )\tCompute the kernel between arrays X and optional array Y.\npairwise.polynomial_kernel(X ,y,\u00c2\u00a0...  )\tCompute the polynomial kernel between X and Y.\npairwise.rbf_kernel(X ,y,\u00c2\u00a0gamma  )\tCompute the rbf (gaussian) kernel between X and Y.\npairwise.sigmoid_kernel(X ,y,\u00c2\u00a0...  )\tCompute the sigmoid kernel between X and Y.\npairwise.paired_euclidean_distances(X,y)\tComputes the paired euclidean distances between X and Y\npairwise.paired_manhattan_distances(X,y)\tCompute the L1 distances between the vectors in X and Y.\npairwise.paired_cosine_distances(X,y)\tComputes the paired cosine distances between X and Y\npairwise.paired_distances(X,y ,\u00c2\u00a0metric  )\tComputes the paired distances between X and Y.\npairwise_distances(X ,y,\u00c2\u00a0metric,\u00c2\u00a0...  )\tCompute the distance matrix from a vector array X and optional Y.\npairwise_distances_argmin(X,y,...)\tCompute minimum distances between one point and a set of points.\npairwise_distances_argmin_min(X,y)\tCompute minimum distances between one point and a set of points.\npairwise_distances_chunked(X ,y,\u00c2\u00a0...  )\tGenerate a distance matrix chunk by chunk with optional reduction\n\n\n```\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/arita37/", "keywords": "", "license": "Apache 2.0", "maintainer": "", "maintainer_email": "", "name": "metric", "package_url": "https://pypi.org/project/metric/", "platform": "", "project_url": "https://pypi.org/project/metric/", "project_urls": {"Homepage": "https://github.com/arita37/"}, "release_url": "https://pypi.org/project/metric/0.10.0/", "requires_dist": ["numpy (==1.16.4)", "pandas (==0.24.2)", "scipy (==1.3.0)", "scikit-learn (==0.21.2)", "numexpr (==2.6.8)", "pycm"], "requires_python": ">=3.6.*", "summary": "Metrics for Machine Learning evaluation  Data Science Measurement", "version": "0.10.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Metrics for evaluating machine learning models or Data Science</p>\n<p>Include :\nAll metrics from SKLEARN.\nCategory based metrics.\n########################################################################</p>\n<pre><code>from metric.metric import *\n\n\n##### Classification metrics\t\n\naccuracy_score(y_true, y_pred,...)\tAccuracy classification score.\nauc(x,y)\tCompute Area Under the Curve (AUC) using the trapezoidal rule\naverage_precision_score(y_true,y_score)\tCompute average precision (AP) from prediction scores\nbalanced_accuracy_score(y_true,y_pred)\tCompute the balanced accuracy\nbrier_score_loss(y_true,y_prob,...)\tCompute the Brier score.\nclassification_report(y_true,y_pred)\tBuild a text report showing the main classification metrics\ncohen_kappa_score(y1,y2,...)\tCohen\u00e2\u20ac\u2122s kappa: a statistic that measures inter-annotator agreement.\nconfusion_matrix(y_true,y_pred,...)\tCompute confusion matrix to evaluate the accuracy of a classification.\ndcg_score(y_true,y_score ,\u00c2\u00a0k,\u00c2\u00a0...  )\tCompute Discounted Cumulative Gain.\nf1_score(y_true,y_pred,...)\tCompute the F1 score, also known as balanced F-score or F-measure\nfbeta_score(y_true,y_pred,\u00c2\u00a0beta,...)\tCompute the F-beta score\nhamming_loss(y_true,y_pred,...)\tCompute the average Hamming loss.\nhinge_loss(y_true,\u00c2\u00a0pred_decision,...)\tAverage hinge loss (non-regularized)\njaccard_score(y_true,y_pred,...)\tJaccard similarity coefficient score\nlog_loss(y_true,y_pred ,\u00c2\u00a0eps,\u00c2\u00a0...  )\tLog loss, aka logistic loss or cross-entropy loss.\nmatthews_corrcoef(y_true,y_pred,...)\tCompute the Matthews correlation coefficient (MCC)\nmultilabel_confusion_matrix(y_true,\u00c2\u00a0...)\tCompute a confusion matrix for each class or sample\nndcg_score(y_true,y_score ,\u00c2\u00a0k,\u00c2\u00a0...  )\tCompute Normalized Discounted Cumulative Gain.\nprecision_recall_curve(y_true,\u00c2\u00a0...)\tCompute precision-recall pairs for different probability thresholds\nprecision_recall_fscore_support(...)\tCompute precision, recall, F-measure and support for each class\nprecision_score(y_true,y_pred,...)\tCompute the precision\nrecall_score(y_true,y_pred,...)\tCompute the recall\nroc_auc_score(y_true,y_score,...)\tCompute Area Under the Receiver Operating Characteristic Curve (ROC AUC) from prediction scores.\nroc_curve(y_true,y_score,...)\tCompute Receiver operating characteristic (ROC)\nzero_one_loss(y_true,y_pred,...)\tZero-one classification loss.\n\n\n\n##### Regression metrics\t\n\nexplained_variance_score(y_true,y_pred)\tExplained variance regression score function\nmax_error(y_true,y_pred)\tmax_error metric calculates the maximum residual error.\nmean_absolute_error(y_true,y_pred)\tMean absolute error regression loss\nmean_squared_error(y_true,y_pred,...)\tMean squared error regression loss\nmean_squared_log_error(y_true,y_pred)\tMean squared logarithmic error regression loss\nmedian_absolute_error(y_true,y_pred)\tMedian absolute error regression loss\nr2_score(y_true,y_pred,...)\tR^2 (coefficient of determination) regression score function.\nmean_poisson_deviance(y_true,y_pred)\tMean Poisson deviance regression loss.\nmean_gamma_deviance(y_true,y_pred)\tMean Gamma deviance regression loss.\nmean_tweedie_deviance(y_true,y_pred)\tMean Tweedie deviance regression loss.\n\n\n\n##### Multilabel ranking metrics\t\n\ncoverage_error(y_true,y_score,...)\tCoverage error measure\nlabel_ranking_average_precision_score(...)\tCompute ranking-based average precision\nlabel_ranking_loss(y_true,y_score)\tCompute Ranking loss measure\n\n\n\n##### Clustering metrics\t\n\nsupervised, which uses a ground truth class values for each sample.\t\nunsupervised, which does not and measures the \u00e2\u20ac\u02dcquality\u00e2\u20ac\u2122 of the model itself.\t\n\nadjusted_mutual_info_score(...,...)\tAdjusted Mutual Information between two clusterings.\nadjusted_rand_score(labels_true,\u00c2\u00a0...)\tRand index adjusted for chance.\ncalinski_harabasz_score(X,\u00c2\u00a0labels)\tCompute the Calinski and Harabasz score.\ndavies_bouldin_score(X,\u00c2\u00a0labels)\tComputes the Davies-Bouldin score.\ncompleteness_score(labels_true,\u00c2\u00a0...)\tCompleteness metric of a cluster labeling given a ground truth.\ncluster.contingency_matrix(...,...)\tBuild a contingency matrix describing the relationship between labels.\nfowlkes_mallows_score(labels_true,\u00c2\u00a0...)\tMeasure the similarity of two clusterings of a set of points.\nhomogeneity_completeness_v_measure(...)\tCompute the homogeneity and completeness and V-Measure scores at once.\nhomogeneity_score(labels_true,\u00c2\u00a0...)\tHomogeneity metric of a cluster labeling given a ground truth.\nmutual_info_score(labels_true,\u00c2\u00a0...)\tMutual Information between two clusterings.\nnormalized_mutual_info_score(...,...)\tNormalized Mutual Information between two clusterings.\nsilhouette_score(X,\u00c2\u00a0labels,...)\tCompute the mean Silhouette Coefficient of all samples.\nsilhouette_samples(X,\u00c2\u00a0labels ,\u00c2\u00a0metric  )\tCompute the Silhouette Coefficient for each sample.\nv_measure_score(labels_true,\u00c2\u00a0labels_pred)\tV-measure cluster labeling given a ground truth.\n\n\nBiclustering metrics\t\n\nconsensus_score(a,\u00c2\u00a0b ,\u00c2\u00a0similarity  )\tThe similarity of two sets of biclusters.\n\n\n\nPairwise metrics\t\n\npairwise.additive_chi2_kernel(X ,y  )\tComputes the additive chi-squared kernel between observations in X and Y\npairwise.chi2_kernel(X ,y,\u00c2\u00a0gamma  )\tComputes the exponential chi-squared kernel X and Y.\npairwise.cosine_similarity(X ,y,\u00c2\u00a0...  )\tCompute cosine similarity between samples in X and Y.\npairwise.cosine_distances(X ,y  )\tCompute cosine distance between samples in X and Y.\npairwise.distance_metrics()\tValid metrics for pairwise_distances.\npairwise.euclidean_distances(X ,y,\u00c2\u00a0...  )\tConsidering the rows of X (and Y=X) as vectors, compute the distance matrix between each pair of vectors.\npairwise.haversine_distances(X ,y  )\tCompute the Haversine distance between samples in X and Y\npairwise.kernel_metrics()\tValid metrics for pairwise_kernels\npairwise.laplacian_kernel(X ,y,\u00c2\u00a0gamma  )\tCompute the laplacian kernel between X and Y.\npairwise.linear_kernel(X ,y,\u00c2\u00a0...  )\tCompute the linear kernel between X and Y.\npairwise.manhattan_distances(X ,y,\u00c2\u00a0...  )\tCompute the L1 distances between the vectors in X and Y.\npairwise.nan_euclidean_distances(X)\tCalculate the euclidean distances in the presence of missing values.\npairwise.pairwise_kernels(X ,y,\u00c2\u00a0...  )\tCompute the kernel between arrays X and optional array Y.\npairwise.polynomial_kernel(X ,y,\u00c2\u00a0...  )\tCompute the polynomial kernel between X and Y.\npairwise.rbf_kernel(X ,y,\u00c2\u00a0gamma  )\tCompute the rbf (gaussian) kernel between X and Y.\npairwise.sigmoid_kernel(X ,y,\u00c2\u00a0...  )\tCompute the sigmoid kernel between X and Y.\npairwise.paired_euclidean_distances(X,y)\tComputes the paired euclidean distances between X and Y\npairwise.paired_manhattan_distances(X,y)\tCompute the L1 distances between the vectors in X and Y.\npairwise.paired_cosine_distances(X,y)\tComputes the paired cosine distances between X and Y\npairwise.paired_distances(X,y ,\u00c2\u00a0metric  )\tComputes the paired distances between X and Y.\npairwise_distances(X ,y,\u00c2\u00a0metric,\u00c2\u00a0...  )\tCompute the distance matrix from a vector array X and optional Y.\npairwise_distances_argmin(X,y,...)\tCompute minimum distances between one point and a set of points.\npairwise_distances_argmin_min(X,y)\tCompute minimum distances between one point and a set of points.\npairwise_distances_chunked(X ,y,\u00c2\u00a0...  )\tGenerate a distance matrix chunk by chunk with optional reduction\n\n\n</code></pre>\n\n          </div>"}, "last_serial": 6350062, "releases": {"0.10.0": [{"comment_text": "", "digests": {"md5": "48b7ead8c9ee21a449a13c432978bcbc", "sha256": "c774ea270241688269d4ff162e9fa69588505e5e8b1403aeb6d7afa0555c4652"}, "downloads": -1, "filename": "metric-0.10.0-py3-none-any.whl", "has_sig": false, "md5_digest": "48b7ead8c9ee21a449a13c432978bcbc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.*", "size": 44240, "upload_time": "2019-12-23T09:01:17", "upload_time_iso_8601": "2019-12-23T09:01:17.472303Z", "url": "https://files.pythonhosted.org/packages/b5/29/1f0dcaefa9b72102b24cb124832c033af1b0de5dffede4e9e8e08dc0b35b/metric-0.10.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8bc547d7aa5e8d1afab7f8d77bda04cc", "sha256": "ddf043090bebbdcd8d84a562f7a9f7c4e4c8331fec48bce490a57d2c2436580e"}, "downloads": -1, "filename": "metric-0.10.0.tar.gz", "has_sig": false, "md5_digest": "8bc547d7aa5e8d1afab7f8d77bda04cc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.*", "size": 40135, "upload_time": "2019-12-23T09:01:20", "upload_time_iso_8601": "2019-12-23T09:01:20.310455Z", "url": "https://files.pythonhosted.org/packages/ea/a4/225f17c54dfb9c9ac24d9d5af4c6bee1e489297a86fc4cc0f814d8c82d82/metric-0.10.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "65769916605ce580d7f52ca8d8be0143", "sha256": "c82baebc03f6270bdfce39469025e89290e4fc87e82760764293d125a9b67e58"}, "downloads": -1, "filename": "metric-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "65769916605ce580d7f52ca8d8be0143", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.*", "size": 8070, "upload_time": "2019-12-10T04:44:06", "upload_time_iso_8601": "2019-12-10T04:44:06.298169Z", "url": "https://files.pythonhosted.org/packages/a2/dc/8825c4392ea13d422d2ccc3b3c6de84747806159cd13e5e742aa7db06a1d/metric-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ecb4952c5bdad03abd5d22ea65cfd00e", "sha256": "5557ad53a6d388a59c95cc705666f072b87beaa4a891526bdc5733279dae2a3a"}, "downloads": -1, "filename": "metric-0.3.0.tar.gz", "has_sig": false, "md5_digest": "ecb4952c5bdad03abd5d22ea65cfd00e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.*", "size": 8938, "upload_time": "2019-12-10T04:44:08", "upload_time_iso_8601": "2019-12-10T04:44:08.246298Z", "url": "https://files.pythonhosted.org/packages/ed/00/157d1b02b5a5b7898f042e0c375e19125a3ea35e7798883b8c1963c65c27/metric-0.3.0.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "a6cca5b7df99004bf9367165d66cb304", "sha256": "a06c462381ed7a540b3c2ccbb32b16bcb8e63835c74456e286cc9fbc96725e5d"}, "downloads": -1, "filename": "metric-0.5.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a6cca5b7df99004bf9367165d66cb304", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.*", "size": 45028, "upload_time": "2019-12-10T13:36:53", "upload_time_iso_8601": "2019-12-10T13:36:53.190897Z", "url": "https://files.pythonhosted.org/packages/28/44/ab78b8afc58111952c164f07d6bb0ef7144c92d19fd3175d612c09eca0e4/metric-0.5.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "03cd063cc5421abf3e3b5e7f0e5eb074", "sha256": "b010f61f79e75c4ca529170580c70ab02f9d98458b42347d519d0a5a1d81df8e"}, "downloads": -1, "filename": "metric-0.5.0.tar.gz", "has_sig": false, "md5_digest": "03cd063cc5421abf3e3b5e7f0e5eb074", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.*", "size": 40901, "upload_time": "2019-12-10T13:36:54", "upload_time_iso_8601": "2019-12-10T13:36:54.634875Z", "url": "https://files.pythonhosted.org/packages/31/8e/fe116f425fcaf03f8047eac64e9571864bd5f6bcc99f6563d1bacdc2423c/metric-0.5.0.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "a295da88916342af58ed53f7452bbc43", "sha256": "05d9971a372e05502b97d286cad15235f378756835d7f59f315f80b3e3c64cf0"}, "downloads": -1, "filename": "metric-0.6.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a295da88916342af58ed53f7452bbc43", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.*", "size": 45018, "upload_time": "2019-12-10T13:37:54", "upload_time_iso_8601": "2019-12-10T13:37:54.091198Z", "url": "https://files.pythonhosted.org/packages/0f/4c/7af1471946b5435b2c597075b47be6d7a432604060005bc82921f2df7205/metric-0.6.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "057cbdaa9c088abe7cba2a281a6538ec", "sha256": "fe69fa1cce167c75ada7a63aa5a0a292745ef656dc65495fa762630a45ca6dbe"}, "downloads": -1, "filename": "metric-0.6.0.tar.gz", "has_sig": false, "md5_digest": "057cbdaa9c088abe7cba2a281a6538ec", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.*", "size": 40880, "upload_time": "2019-12-10T13:37:56", "upload_time_iso_8601": "2019-12-10T13:37:56.491179Z", "url": "https://files.pythonhosted.org/packages/31/74/ea3494aae349e9f09181ba955b37c4dd19a9a7ef5b4ed10d99d22be2ad2e/metric-0.6.0.tar.gz", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "f9d437537fb25fde57e8860f11053da5", "sha256": "d0d311b5b5e937decb570fa2c3d62d50e0bae11a010604d89b974e4d55373c49"}, "downloads": -1, "filename": "metric-0.7.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f9d437537fb25fde57e8860f11053da5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.*", "size": 45022, "upload_time": "2019-12-10T13:39:33", "upload_time_iso_8601": "2019-12-10T13:39:33.058371Z", "url": "https://files.pythonhosted.org/packages/33/61/a8ace6b9c89725b5565dde905f60c54413d47b0e1d59c692e1874e1fdf0f/metric-0.7.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "568e6b3df2730c6f9583e29dcb6d725f", "sha256": "449c43fa5534ba629c2c0d2550d43fc6f5b77f72358f7356e0dc53fbcefbb039"}, "downloads": -1, "filename": "metric-0.7.0.tar.gz", "has_sig": false, "md5_digest": "568e6b3df2730c6f9583e29dcb6d725f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.*", "size": 40883, "upload_time": "2019-12-10T13:39:35", "upload_time_iso_8601": "2019-12-10T13:39:35.586109Z", "url": "https://files.pythonhosted.org/packages/36/77/37e69d81c3b37f91688ad8b065038065ffa8dab6dcf65eac2f987eee982e/metric-0.7.0.tar.gz", "yanked": false}], "0.8.0": [{"comment_text": "", "digests": {"md5": "4be7da35c917b18291a6cf12762c8614", "sha256": "90903cd65a8efb46f55fc21930e693db4b899ef4bbacb0842a2ad8a37ecd6369"}, "downloads": -1, "filename": "metric-0.8.0-py3-none-any.whl", "has_sig": false, "md5_digest": "4be7da35c917b18291a6cf12762c8614", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.*", "size": 45010, "upload_time": "2019-12-10T13:41:26", "upload_time_iso_8601": "2019-12-10T13:41:26.004445Z", "url": "https://files.pythonhosted.org/packages/3b/a3/272f005134e9fedbae0282611c6515cf126620a051ba93bcf618aac45c31/metric-0.8.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fb6a54fa7eb72daffe92df84f0d31723", "sha256": "332aa7ec42a48681bb50b7627413af7043a43542c09b13c8e606173cf85769c8"}, "downloads": -1, "filename": "metric-0.8.0.tar.gz", "has_sig": false, "md5_digest": "fb6a54fa7eb72daffe92df84f0d31723", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.*", "size": 40876, "upload_time": "2019-12-10T13:41:27", "upload_time_iso_8601": "2019-12-10T13:41:27.556013Z", "url": "https://files.pythonhosted.org/packages/bf/7c/4efcf609af13c7b1e653a9edbaa0d972395fd4de3e559906a83bbab43d84/metric-0.8.0.tar.gz", "yanked": false}], "0.9.0": [{"comment_text": "", "digests": {"md5": "d79452c876e5b424b2a87de4e08e6e11", "sha256": "824869419761f3987e5051617c21d33e507ce4ed656e67a23113813e78dd7e14"}, "downloads": -1, "filename": "metric-0.9.0-py3-none-any.whl", "has_sig": false, "md5_digest": "d79452c876e5b424b2a87de4e08e6e11", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.*", "size": 45023, "upload_time": "2019-12-10T13:43:08", "upload_time_iso_8601": "2019-12-10T13:43:08.728476Z", "url": "https://files.pythonhosted.org/packages/d8/72/7f26d5672e9f1a10f103da58f62345466343bd69125556799d8a34834993/metric-0.9.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b2d46fab47c9544a1854a06c25db6630", "sha256": "ff0cef76b2acbcf4a811453734522c94f1b1ee695667e1136ee22a436c2c7054"}, "downloads": -1, "filename": "metric-0.9.0.tar.gz", "has_sig": false, "md5_digest": "b2d46fab47c9544a1854a06c25db6630", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.*", "size": 40888, "upload_time": "2019-12-10T13:43:10", "upload_time_iso_8601": "2019-12-10T13:43:10.568559Z", "url": "https://files.pythonhosted.org/packages/88/02/f80e7dc13f93826783bcc139e8d47e687e3d2f18b4da28df9931d1230c40/metric-0.9.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "48b7ead8c9ee21a449a13c432978bcbc", "sha256": "c774ea270241688269d4ff162e9fa69588505e5e8b1403aeb6d7afa0555c4652"}, "downloads": -1, "filename": "metric-0.10.0-py3-none-any.whl", "has_sig": false, "md5_digest": "48b7ead8c9ee21a449a13c432978bcbc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.*", "size": 44240, "upload_time": "2019-12-23T09:01:17", "upload_time_iso_8601": "2019-12-23T09:01:17.472303Z", "url": "https://files.pythonhosted.org/packages/b5/29/1f0dcaefa9b72102b24cb124832c033af1b0de5dffede4e9e8e08dc0b35b/metric-0.10.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8bc547d7aa5e8d1afab7f8d77bda04cc", "sha256": "ddf043090bebbdcd8d84a562f7a9f7c4e4c8331fec48bce490a57d2c2436580e"}, "downloads": -1, "filename": "metric-0.10.0.tar.gz", "has_sig": false, "md5_digest": "8bc547d7aa5e8d1afab7f8d77bda04cc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.*", "size": 40135, "upload_time": "2019-12-23T09:01:20", "upload_time_iso_8601": "2019-12-23T09:01:20.310455Z", "url": "https://files.pythonhosted.org/packages/ea/a4/225f17c54dfb9c9ac24d9d5af4c6bee1e489297a86fc4cc0f814d8c82d82/metric-0.10.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:55:39 2020"}