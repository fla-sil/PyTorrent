{"info": {"author": "Jorge Alpedrinha Ramos", "author_email": "python@uphold.com", "bugtrack_url": null, "classifiers": [], "description": "python-bunyan\r\n=============\r\n\r\nJson logger compatible with\r\n`node-bunyan <https://github.com/trentm/node-bunyan>`__\r\n\r\nGet the code\r\n============\r\n\r\n.. code:: sh\r\n\r\n    git clone git@github.com:uphold/python-bunyan.git\r\n\r\nInstall\r\n=======\r\n\r\n.. code:: sh\r\n\r\n    pip install bunyan\r\n\r\nHow to setup\r\n============\r\n\r\nProgramatically\r\n---------------\r\n\r\nCreate a new log handler and assign a ``BunyanFormatter`` formatter.\r\nRegister the handler on the current logger.\r\n\r\n.. code:: py\r\n\r\n    import bunyan\r\n    import logging\r\n    import sys\r\n\r\n    logger = logging.getLogger()\r\n\r\n    logHandler = logging.StreamHandler(stream = sys.stdout)\r\n    formatter = bunyan.BunyanFormatter()\r\n    logHandler.setFormatter(formatter)\r\n    logger.addHandler(logHandler)\r\n    logger.setLevel(logging.DEBUG)\r\n\r\nUsing dictConfig\r\n----------------\r\n\r\nThis is the same example as defined above, but using a dictionary with\r\n``dictConfig``.\r\n\r\n.. code:: py\r\n\r\n    LOG_CONFIG = {\r\n      'formatters': {\r\n        'bunyan': {\r\n          '()' : 'bunyan.BunyanFormatter'\r\n        }\r\n      },\r\n      'handlers': {\r\n        'debug': {\r\n          'class': 'logging.StreamHandler',\r\n          'formatter': 'bunyan',\r\n          'stream': 'ext://sys.stdout'\r\n        },\r\n      },\r\n\r\n      'root': {\r\n        'level': 'DEBUG',\r\n        'handlers': ['debug']\r\n      },\r\n      'version': 1\r\n    }\r\n\r\n    import logging.config\r\n    logging.config.dictConfig(config)\r\n\r\nHow to use\r\n==========\r\n\r\nAfter setting up your loggers, bunyan allows to log in two different\r\nways: - Traditional - Using a dictionary\r\n\r\nTraditional logging\r\n-------------------\r\n\r\nString message\r\n~~~~~~~~~~~~~~\r\n\r\nTraditionaly logging in python allows to log a string message.\r\n\r\n.. code:: py\r\n\r\n    logger.debug(\"This is a log message\")\r\n\r\nThis will output:\r\n\r\n.. code:: json\r\n\r\n    {\r\n      \"name\": \"root\",\r\n      \"pathname\": \"test.py\",\r\n      \"levelname\": \"DEBUG\",\r\n      \"msg\": \"This is a log message\",\r\n      \"time\": \"2016-03-14T16:34:47Z\",\r\n      \"hostname\": \"jalpedrinha-mbp.local\",\r\n      \"level\": 20,\r\n      \"pid\": 41414,\r\n      \"v\": 0\r\n    }\r\n\r\nString message with extra dictionary\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nThis module extends this functionality by allowing an extra keyword arg,\r\nand passing a dictionary.\r\n\r\n.. code:: py\r\n\r\n    logger.debug(\"This is a log message with extra context\", extra = {'some': 'additional data'})\r\n\r\nAnd the output will include ``some`` key and value:\r\n\r\n.. code:: json\r\n\r\n    {\r\n      \"name\": \"root\",\r\n      \"time\": \"2016-03-14T16:36:12Z\",\r\n      \"some\": \"additional data\",\r\n      \"pathname\": \"test.py\",\r\n      \"msg\": \"This is a log message with extra context\",\r\n      \"levelname\": \"DEBUG\",\r\n      \"hostname\": \"jalpedrinha-mbp.local\",\r\n      \"level\": 20,\r\n      \"pid\": 41495,\r\n      \"v\": 0\r\n    }\r\n\r\nDictionary\r\n----------\r\n\r\nThis method works similarly to using an extra dictionary without the\r\nstring message, but instead of passing a keyword argument extra, you\r\njust pass the first positional argument as a dictionary.\r\n\r\n.. code:: py\r\n\r\n    logger.debug({'some': 'data'})\r\n\r\nWhich results in:\r\n\r\n.. code:: json\r\n\r\n    {\r\n      \"name\": \"root\",\r\n      \"some\": \"data\",\r\n      \"pathname\": \"test.py\",\r\n      \"msg\": \"\",\r\n      \"time\": \"2016-03-14T16:45:23Z\",\r\n      \"levelname\": \"DEBUG\",\r\n      \"hostname\": \"jalpedrinha-mbp.local\",\r\n      \"level\": 20,\r\n      \"pid\": 43263,\r\n      \"v\": 0\r\n    }\r\n\r\nTesting\r\n=======\r\n\r\nDocker-compose and tox\r\n----------------------\r\n\r\nRun tox container:\r\n\r\n.. code:: sh\r\n\r\n    docker-compose up\r\n\r\nNatively\r\n--------\r\n\r\nFirst, install ``dev-requirements``\r\n\r\n.. code:: sh\r\n\r\n    pip install -r dev-requirements.txt\r\n\r\nThen run nose:\r\n\r\n::\r\n\r\n    nosetests tests\r\n\r\n\r\nChangelog\r\n---------\r\n\r\n0.1.0 / 2016-03-15\r\n~~~~~~~~~~~~~~~~~~\r\n\r\n-  `#2 <https://github.com/uphold/python-bunyan/pull/2>`__ Add Bunyan\r\n   Formatter (@jAlpedrinha)", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://www.github.com/uphold/python-bunyan/", "keywords": "", "license": "LICENSE", "maintainer": "", "maintainer_email": "", "name": "bunyan", "package_url": "https://pypi.org/project/bunyan/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/bunyan/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://www.github.com/uphold/python-bunyan/"}, "release_url": "https://pypi.org/project/bunyan/0.1.2/", "requires_dist": null, "requires_python": null, "summary": "Bunyan python logger", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"python-bunyan\">\n<h2>python-bunyan</h2>\n<p>Json logger compatible with\n<a href=\"https://github.com/trentm/node-bunyan\" rel=\"nofollow\">node-bunyan</a></p>\n</div>\n<div id=\"get-the-code\">\n<h2>Get the code</h2>\n<pre>git clone git@github.com:uphold/python-bunyan.git\n</pre>\n</div>\n<div id=\"install\">\n<h2>Install</h2>\n<pre>pip install bunyan\n</pre>\n</div>\n<div id=\"how-to-setup\">\n<h2>How to setup</h2>\n<div id=\"programatically\">\n<h3>Programatically</h3>\n<p>Create a new log handler and assign a <tt>BunyanFormatter</tt> formatter.\nRegister the handler on the current logger.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">bunyan</span>\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">()</span>\n\n<span class=\"n\">logHandler</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">StreamHandler</span><span class=\"p\">(</span><span class=\"n\">stream</span> <span class=\"o\">=</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"p\">)</span>\n<span class=\"n\">formatter</span> <span class=\"o\">=</span> <span class=\"n\">bunyan</span><span class=\"o\">.</span><span class=\"n\">BunyanFormatter</span><span class=\"p\">()</span>\n<span class=\"n\">logHandler</span><span class=\"o\">.</span><span class=\"n\">setFormatter</span><span class=\"p\">(</span><span class=\"n\">formatter</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">addHandler</span><span class=\"p\">(</span><span class=\"n\">logHandler</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">setLevel</span><span class=\"p\">(</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"using-dictconfig\">\n<h3>Using dictConfig</h3>\n<p>This is the same example as defined above, but using a dictionary with\n<tt>dictConfig</tt>.</p>\n<pre><span class=\"n\">LOG_CONFIG</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"s1\">'formatters'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'bunyan'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"s1\">'()'</span> <span class=\"p\">:</span> <span class=\"s1\">'bunyan.BunyanFormatter'</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">},</span>\n  <span class=\"s1\">'handlers'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'debug'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"s1\">'class'</span><span class=\"p\">:</span> <span class=\"s1\">'logging.StreamHandler'</span><span class=\"p\">,</span>\n      <span class=\"s1\">'formatter'</span><span class=\"p\">:</span> <span class=\"s1\">'bunyan'</span><span class=\"p\">,</span>\n      <span class=\"s1\">'stream'</span><span class=\"p\">:</span> <span class=\"s1\">'ext://sys.stdout'</span>\n    <span class=\"p\">},</span>\n  <span class=\"p\">},</span>\n\n  <span class=\"s1\">'root'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'level'</span><span class=\"p\">:</span> <span class=\"s1\">'DEBUG'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'handlers'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'debug'</span><span class=\"p\">]</span>\n  <span class=\"p\">},</span>\n  <span class=\"s1\">'version'</span><span class=\"p\">:</span> <span class=\"mi\">1</span>\n<span class=\"p\">}</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">logging.config</span>\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">dictConfig</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n<div id=\"how-to-use\">\n<h2>How to use</h2>\n<p>After setting up your loggers, bunyan allows to log in two different\nways: - Traditional - Using a dictionary</p>\n<div id=\"traditional-logging\">\n<h3>Traditional logging</h3>\n<div id=\"string-message\">\n<h4>String message</h4>\n<p>Traditionaly logging in python allows to log a string message.</p>\n<pre><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"s2\">\"This is a log message\"</span><span class=\"p\">)</span>\n</pre>\n<p>This will output:</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"root\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"pathname\"</span><span class=\"p\">:</span> <span class=\"s2\">\"test.py\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"levelname\"</span><span class=\"p\">:</span> <span class=\"s2\">\"DEBUG\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"msg\"</span><span class=\"p\">:</span> <span class=\"s2\">\"This is a log message\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"time\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2016-03-14T16:34:47Z\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"hostname\"</span><span class=\"p\">:</span> <span class=\"s2\">\"jalpedrinha-mbp.local\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"level\"</span><span class=\"p\">:</span> <span class=\"mi\">20</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"pid\"</span><span class=\"p\">:</span> <span class=\"mi\">41414</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"v\"</span><span class=\"p\">:</span> <span class=\"mi\">0</span>\n<span class=\"p\">}</span>\n</pre>\n</div>\n<div id=\"string-message-with-extra-dictionary\">\n<h4>String message with extra dictionary</h4>\n<p>This module extends this functionality by allowing an extra keyword arg,\nand passing a dictionary.</p>\n<pre><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"s2\">\"This is a log message with extra context\"</span><span class=\"p\">,</span> <span class=\"n\">extra</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'some'</span><span class=\"p\">:</span> <span class=\"s1\">'additional data'</span><span class=\"p\">})</span>\n</pre>\n<p>And the output will include <tt>some</tt> key and value:</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"root\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"time\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2016-03-14T16:36:12Z\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"some\"</span><span class=\"p\">:</span> <span class=\"s2\">\"additional data\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"pathname\"</span><span class=\"p\">:</span> <span class=\"s2\">\"test.py\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"msg\"</span><span class=\"p\">:</span> <span class=\"s2\">\"This is a log message with extra context\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"levelname\"</span><span class=\"p\">:</span> <span class=\"s2\">\"DEBUG\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"hostname\"</span><span class=\"p\">:</span> <span class=\"s2\">\"jalpedrinha-mbp.local\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"level\"</span><span class=\"p\">:</span> <span class=\"mi\">20</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"pid\"</span><span class=\"p\">:</span> <span class=\"mi\">41495</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"v\"</span><span class=\"p\">:</span> <span class=\"mi\">0</span>\n<span class=\"p\">}</span>\n</pre>\n</div>\n</div>\n<div id=\"dictionary\">\n<h3>Dictionary</h3>\n<p>This method works similarly to using an extra dictionary without the\nstring message, but instead of passing a keyword argument extra, you\njust pass the first positional argument as a dictionary.</p>\n<pre><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">({</span><span class=\"s1\">'some'</span><span class=\"p\">:</span> <span class=\"s1\">'data'</span><span class=\"p\">})</span>\n</pre>\n<p>Which results in:</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"root\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"some\"</span><span class=\"p\">:</span> <span class=\"s2\">\"data\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"pathname\"</span><span class=\"p\">:</span> <span class=\"s2\">\"test.py\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"msg\"</span><span class=\"p\">:</span> <span class=\"s2\">\"\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"time\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2016-03-14T16:45:23Z\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"levelname\"</span><span class=\"p\">:</span> <span class=\"s2\">\"DEBUG\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"hostname\"</span><span class=\"p\">:</span> <span class=\"s2\">\"jalpedrinha-mbp.local\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"level\"</span><span class=\"p\">:</span> <span class=\"mi\">20</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"pid\"</span><span class=\"p\">:</span> <span class=\"mi\">43263</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"v\"</span><span class=\"p\">:</span> <span class=\"mi\">0</span>\n<span class=\"p\">}</span>\n</pre>\n</div>\n</div>\n<div id=\"testing\">\n<h2>Testing</h2>\n<div id=\"docker-compose-and-tox\">\n<h3>Docker-compose and tox</h3>\n<p>Run tox container:</p>\n<pre>docker-compose up\n</pre>\n</div>\n<div id=\"natively\">\n<h3>Natively</h3>\n<p>First, install <tt><span class=\"pre\">dev-requirements</span></tt></p>\n<pre>pip install -r dev-requirements.txt\n</pre>\n<p>Then run nose:</p>\n<pre>nosetests tests\n</pre>\n</div>\n<div id=\"changelog\">\n<h3>Changelog</h3>\n<h3 id=\"id1\"><span class=\"section-subtitle\">0.1.0 / 2016-03-15</span></h3>\n<ul>\n<li><a href=\"https://github.com/uphold/python-bunyan/pull/2\" rel=\"nofollow\">#2</a> Add Bunyan\nFormatter (@jAlpedrinha)</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2014126, "releases": {"0.1.0": [], "0.1.1": [{"comment_text": "", "digests": {"md5": "06bd66beca1927049944417ea393b06b", "sha256": "913fbe01fe0be5eb791e7ffaf1e8332d44da469c07f9c32a63013a4c607d5f8f"}, "downloads": -1, "filename": "bunyan-0.1.1.tar.gz", "has_sig": false, "md5_digest": "06bd66beca1927049944417ea393b06b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7986, "upload_time": "2016-03-18T10:57:35", "upload_time_iso_8601": "2016-03-18T10:57:35.147869Z", "url": "https://files.pythonhosted.org/packages/d2/92/390eb805bb37564b737df951dab0f9e423224426b6c4f01b7343b3d65772/bunyan-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "f410281d26ec62dc61ddd5046998c23a", "sha256": "e49e112b14cffa92c2a4e0e0052eac43a811f6ec594601f871b82355dc66432a"}, "downloads": -1, "filename": "bunyan-0.1.2.tar.gz", "has_sig": false, "md5_digest": "f410281d26ec62dc61ddd5046998c23a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8002, "upload_time": "2016-03-18T11:08:59", "upload_time_iso_8601": "2016-03-18T11:08:59.360140Z", "url": "https://files.pythonhosted.org/packages/be/cd/661e57aca2dc0d1548112c65e6cccf185ea16421d95438bed2d28a0f138f/bunyan-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f410281d26ec62dc61ddd5046998c23a", "sha256": "e49e112b14cffa92c2a4e0e0052eac43a811f6ec594601f871b82355dc66432a"}, "downloads": -1, "filename": "bunyan-0.1.2.tar.gz", "has_sig": false, "md5_digest": "f410281d26ec62dc61ddd5046998c23a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8002, "upload_time": "2016-03-18T11:08:59", "upload_time_iso_8601": "2016-03-18T11:08:59.360140Z", "url": "https://files.pythonhosted.org/packages/be/cd/661e57aca2dc0d1548112c65e6cccf185ea16421d95438bed2d28a0f138f/bunyan-0.1.2.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:35:58 2020"}