{"info": {"author": "Equinox Fitness", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 3.6"], "description": "********************************\nHealth and Monitoring Bot (HAMB)\n********************************\n\nGetting started with HAMB\n\n.. image:: https://img.shields.io/pypi/v/hamb.svg\n   :target: https://pypi.python.org/pypi/hamb\n   :alt: Pypi Version\n.. image:: https://travis-ci.org/readthedocs/hamb.svg?branch=master\n   :target: https://travis-ci.org/readthedocs/hamb\n   :alt: Build Status\n.. image:: https://readthedocs.org/projects/sphinx-rtd-theme/badge/?version=latest\n  :target: http://sphinx-rtd-theme.readthedocs.io/en/latest/?badge=latest\n  :alt: Documentation Status\n\n\nLocal setup\n============\n\nIt is recommended to use the steps below to set up a virtual environment for development:\n\n.. code-block:: console\n\n  python3 -m venv <virtual env name>\n  source <virtual env name>/bin/activate\n  pip install -r requirements.txt\n\n  or\n\n  pip install hamb\n\nSave credentials to ``etl.cfg`` file locally in project directory. See ``sample.etl.cfg`` file provided in root directory.\n\n\nDirectory Structure\n===================\n\nBy default, it will look for manifests folder, etl.cfg and services.yaml in your current working directory.\n\n.. code-block:: console\n\n  hamb/\n  manifests/\n  etl.cfg\n  services.yaml\n\n\nManifests\n=========\n\nThis is about metadata about your test sets, including the sql and diagnostic queries to be run. Manifests files are stored in\n``/manifests``\n\n\nServices\n============\n\n``services.yaml`` This is a global config which stores outbound communication details.\nBasically it says for a given scenerio, what handlers will be used, and with what targets.\n\n\nHandlers\n========\n\nTest results are printed, but handlers are available for other means of notification.\nSee ``/hamb/handlers/``.\n\n.. code-block:: console\n\n  email_handler\n  sftp_handler\n  slack_handler\n  sql_compo_list\n  sql_comp\n  watch_file_handler\n  jenkins_handler\n  sns_handler\n\nExecution walkthru\n===================\n\n* HAMB will be executed from command line for a given manifest (test set): ``hamb -m sample_compare``\n* It will read the tests from the corresponding manifest file into a Python object\n* It will then loop through each test\n* For each test it will execute the appropriate plugin\n* The results from each test will be collected, then as configured in services.yaml the appropriate handler will be evoked\n* Based on the services metadata, the appropriate handler will be evoked with parameters for that service (email list, sns topic, etc)\n\nGo ahead, compose your own and try it out..\n\n\nExamples\n========\n\nCompare two lists wherein it succeeds when the lists are the same and fails when different.\n\nTry running ``hamb -m sample_compare`` or ``python -m hamb.module -m sample_compare``\n\n.. code-block:: console\n\n  Examples:\n\n  a. when lists are the same\n  'script_a_result': [a, b, c]\n  'script_b_result': [a, b, c]\n  'status': 'success'\n  'diff': None\n\n  b. when only a few elements are similar\n  'script_a_result': [a, b, c]\n  'script_b_result': [a, b]\n  'status': 'failure'\n  'diff': [c]\n\n  c. when one list is empty\n  'script_a_result': [a, b, c]\n  'script_b_result': []\n  'status': 'failure'\n  'diff': [a, b, c]\n\n  d. when lists have completely different elements\n  'script_a_result': [a, b, c]\n  'script_b_result': [d, e, f]\n  'status': 'failure'\n  'diff': [a, b, c, d, e, f]\n\n\nIf the manifest is in another folder, you can provide the absolute path\n\n.. code-block:: console\n\n  hamb -m /path/to/sample_compare\n\nIf you want to use AWS secrets, just include --config secret_manager param.\n\n.. code-block:: console\n\n  hamb -m sample_compare --config secret_manager\n\nHamb also supports logging the results to the database. To use this feature, include -t <your_database_table>.\nSee: ``/hamb/ham_run_utility.py``:``save_db_log()`` method for sample table schema.\n\n.. code-block:: console\n\n  hamb -m sample_compare --t public.hambot_history\n\n\nTests\n============\n\nTo run the testing suite, the following commands are required:\n\n.. code-block:: console\n\n  pip install -r requirements-dev.txt\n\n  tox\n\n  or\n\n  python -m unittest discover tests\n\n\nDocumentation\n=============\n\nHAMB documentation is powered by `Sphinx <https://www.sphinx-doc.org/en/master/>`_, a tool that makes documentation easy.\n\nTo build docs locally\n\n.. code-block:: console\n\n  cd docs\n  make html\n\nTo see HAMB documentation, open ``/docs/_build/html/index.html``.\n\nIf you want to make changes, edit ``README.rst`` and build docs again.", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/equinoxfitness/HAMB", "keywords": "", "license": "TBD", "maintainer": "", "maintainer_email": "", "name": "hamb", "package_url": "https://pypi.org/project/hamb/", "platform": "", "project_url": "https://pypi.org/project/hamb/", "project_urls": {"Homepage": "https://github.com/equinoxfitness/HAMB"}, "release_url": "https://pypi.org/project/hamb/0.1.6/", "requires_dist": null, "requires_python": "", "summary": "", "version": "0.1.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Getting started with HAMB</p>\n<a href=\"https://pypi.python.org/pypi/hamb\" rel=\"nofollow\"><img alt=\"Pypi Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e917b30bcfda0e4b77d1d03797a9f0dcbb8f20b6/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f68616d622e737667\"></a>\n<a href=\"https://travis-ci.org/readthedocs/hamb\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/922d031591b08e3193d250b4be83beb1f243bd20/68747470733a2f2f7472617669732d63692e6f72672f72656164746865646f63732f68616d622e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"http://sphinx-rtd-theme.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8d3ee81ff6b5ad61d500326087e1f1658b790a20/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f737068696e782d7274642d7468656d652f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<div id=\"local-setup\">\n<h2>Local setup</h2>\n<p>It is recommended to use the steps below to set up a virtual environment for development:</p>\n<pre><span class=\"go\">python3 -m venv &lt;virtual env name&gt;\nsource &lt;virtual env name&gt;/bin/activate\npip install -r requirements.txt\n\nor\n\npip install hamb</span>\n</pre>\n<p>Save credentials to <tt>etl.cfg</tt> file locally in project directory. See <tt>sample.etl.cfg</tt> file provided in root directory.</p>\n</div>\n<div id=\"directory-structure\">\n<h2>Directory Structure</h2>\n<p>By default, it will look for manifests folder, etl.cfg and services.yaml in your current working directory.</p>\n<pre><span class=\"go\">hamb/\nmanifests/\netl.cfg\nservices.yaml</span>\n</pre>\n</div>\n<div id=\"manifests\">\n<h2>Manifests</h2>\n<p>This is about metadata about your test sets, including the sql and diagnostic queries to be run. Manifests files are stored in\n<tt>/manifests</tt></p>\n</div>\n<div id=\"services\">\n<h2>Services</h2>\n<p><tt>services.yaml</tt> This is a global config which stores outbound communication details.\nBasically it says for a given scenerio, what handlers will be used, and with what targets.</p>\n</div>\n<div id=\"handlers\">\n<h2>Handlers</h2>\n<p>Test results are printed, but handlers are available for other means of notification.\nSee <tt>/hamb/handlers/</tt>.</p>\n<pre><span class=\"go\">email_handler\nsftp_handler\nslack_handler\nsql_compo_list\nsql_comp\nwatch_file_handler\njenkins_handler\nsns_handler</span>\n</pre>\n</div>\n<div id=\"execution-walkthru\">\n<h2>Execution walkthru</h2>\n<ul>\n<li>HAMB will be executed from command line for a given manifest (test set): <tt>hamb <span class=\"pre\">-m</span> sample_compare</tt></li>\n<li>It will read the tests from the corresponding manifest file into a Python object</li>\n<li>It will then loop through each test</li>\n<li>For each test it will execute the appropriate plugin</li>\n<li>The results from each test will be collected, then as configured in services.yaml the appropriate handler will be evoked</li>\n<li>Based on the services metadata, the appropriate handler will be evoked with parameters for that service (email list, sns topic, etc)</li>\n</ul>\n<p>Go ahead, compose your own and try it out..</p>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<p>Compare two lists wherein it succeeds when the lists are the same and fails when different.</p>\n<p>Try running <tt>hamb <span class=\"pre\">-m</span> sample_compare</tt> or <tt>python <span class=\"pre\">-m</span> hamb.module <span class=\"pre\">-m</span> sample_compare</tt></p>\n<pre><span class=\"go\">Examples:\n\na. when lists are the same\n'script_a_result': [a, b, c]\n'script_b_result': [a, b, c]\n'status': 'success'\n'diff': None\n\nb. when only a few elements are similar\n'script_a_result': [a, b, c]\n'script_b_result': [a, b]\n'status': 'failure'\n'diff': [c]\n\nc. when one list is empty\n'script_a_result': [a, b, c]\n'script_b_result': []\n'status': 'failure'\n'diff': [a, b, c]\n\nd. when lists have completely different elements\n'script_a_result': [a, b, c]\n'script_b_result': [d, e, f]\n'status': 'failure'\n'diff': [a, b, c, d, e, f]</span>\n</pre>\n<p>If the manifest is in another folder, you can provide the absolute path</p>\n<pre><span class=\"go\">hamb -m /path/to/sample_compare</span>\n</pre>\n<p>If you want to use AWS secrets, just include \u2013config secret_manager param.</p>\n<pre><span class=\"go\">hamb -m sample_compare --config secret_manager</span>\n</pre>\n<p>Hamb also supports logging the results to the database. To use this feature, include -t &lt;your_database_table&gt;.\nSee: <tt>/hamb/ham_run_utility.py</tt>:<tt>save_db_log()</tt> method for sample table schema.</p>\n<pre><span class=\"go\">hamb -m sample_compare --t public.hambot_history</span>\n</pre>\n</div>\n<div id=\"tests\">\n<h2>Tests</h2>\n<p>To run the testing suite, the following commands are required:</p>\n<pre><span class=\"go\">pip install -r requirements-dev.txt\n\ntox\n\nor\n\npython -m unittest discover tests</span>\n</pre>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p>HAMB documentation is powered by <a href=\"https://www.sphinx-doc.org/en/master/\" rel=\"nofollow\">Sphinx</a>, a tool that makes documentation easy.</p>\n<p>To build docs locally</p>\n<pre><span class=\"go\">cd docs\nmake html</span>\n</pre>\n<p>To see HAMB documentation, open <tt>/docs/_build/html/index.html</tt>.</p>\n<p>If you want to make changes, edit <tt>README.rst</tt> and build docs again.</p>\n</div>\n\n          </div>"}, "last_serial": 6977581, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "841155e1a506b52c5256784619e8f205", "sha256": "e54ff96b2fcc9dd1244d9b975e69a230567a9025296b22799294cb21c2cc6567"}, "downloads": -1, "filename": "hamb-0.1.0.tar.gz", "has_sig": false, "md5_digest": "841155e1a506b52c5256784619e8f205", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12333, "upload_time": "2020-04-02T15:50:59", "upload_time_iso_8601": "2020-04-02T15:50:59.482134Z", "url": "https://files.pythonhosted.org/packages/cd/5c/6330a47b4dab437dcb24d70cb1b6cb733b7bebd8465503ccb68288571901/hamb-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "cbd8e9e78a9bb64c6a1db9c385b6670b", "sha256": "9fe38b0cf82cbc128b790fd7e9be774d8ffb8113f656f220792f995f5106df4d"}, "downloads": -1, "filename": "hamb-0.1.1.tar.gz", "has_sig": false, "md5_digest": "cbd8e9e78a9bb64c6a1db9c385b6670b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12571, "upload_time": "2020-04-02T17:00:56", "upload_time_iso_8601": "2020-04-02T17:00:56.131972Z", "url": "https://files.pythonhosted.org/packages/d2/ae/6bdcd64b535a8d8422e3eee408bd1bdb8c2a7f90b7d65b62ebe83af5432b/hamb-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "ec806933e3785cf9667e2f5a7f55c54f", "sha256": "230c05be3d45cc5404108bfde58d8827e5553257537aa78b945206a91570ee22"}, "downloads": -1, "filename": "hamb-0.1.2.tar.gz", "has_sig": false, "md5_digest": "ec806933e3785cf9667e2f5a7f55c54f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12917, "upload_time": "2020-04-03T11:58:54", "upload_time_iso_8601": "2020-04-03T11:58:54.166247Z", "url": "https://files.pythonhosted.org/packages/24/45/dd7d816fe3087c11fd1e5aba05d045c5fd525ef007ad64ea3996d8941696/hamb-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "d44ca60aa4370913f8d2275b37a98c46", "sha256": "2584b57eccad384bf71112a09f40136da2ac8e6e23c77d8777659893e49dd049"}, "downloads": -1, "filename": "hamb-0.1.3.tar.gz", "has_sig": false, "md5_digest": "d44ca60aa4370913f8d2275b37a98c46", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12930, "upload_time": "2020-04-03T12:15:51", "upload_time_iso_8601": "2020-04-03T12:15:51.469305Z", "url": "https://files.pythonhosted.org/packages/47/f5/5f9978dee8f4c6fea1c224fabba4bfe109151a3b6ecce9bbd0f204f6267d/hamb-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "b540b15c1ac179afe59315effbeef063", "sha256": "b02a5de83007b4a9ed34c4c4cdc05de196f9ed9dc822cb9ee05091b663b61e5d"}, "downloads": -1, "filename": "hamb-0.1.4.tar.gz", "has_sig": false, "md5_digest": "b540b15c1ac179afe59315effbeef063", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14002, "upload_time": "2020-04-03T12:27:19", "upload_time_iso_8601": "2020-04-03T12:27:19.780434Z", "url": "https://files.pythonhosted.org/packages/42/4b/3673e4f8678f5e84bcdf249f1e1f71501613e01cc489a2e846c90c2f9933/hamb-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "7db123553f76804460ef35dd8d5908ab", "sha256": "ad843bdf8417b823d805390d2e4ccc3b9d746553f62c0d434b1dc3a38fe55c2b"}, "downloads": -1, "filename": "hamb-0.1.5.tar.gz", "has_sig": false, "md5_digest": "7db123553f76804460ef35dd8d5908ab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14620, "upload_time": "2020-04-07T11:23:47", "upload_time_iso_8601": "2020-04-07T11:23:47.075823Z", "url": "https://files.pythonhosted.org/packages/d6/e3/213f9f90d13702f00a96d5087d60d975bd22cf45b084e09a35f3b3ad2d14/hamb-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "30533c4f5752813427c59083df749b0d", "sha256": "f870f8b1608debb8fe9b3681dfc98e7f1c217ab197e849776085e9ab7ab11a59"}, "downloads": -1, "filename": "hamb-0.1.6.tar.gz", "has_sig": false, "md5_digest": "30533c4f5752813427c59083df749b0d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14594, "upload_time": "2020-04-08T13:03:50", "upload_time_iso_8601": "2020-04-08T13:03:50.168985Z", "url": "https://files.pythonhosted.org/packages/cb/ae/805758a2bdb59caab563910ca742833c5f068dc4e6dc9ae8ca5576ffe01b/hamb-0.1.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "30533c4f5752813427c59083df749b0d", "sha256": "f870f8b1608debb8fe9b3681dfc98e7f1c217ab197e849776085e9ab7ab11a59"}, "downloads": -1, "filename": "hamb-0.1.6.tar.gz", "has_sig": false, "md5_digest": "30533c4f5752813427c59083df749b0d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14594, "upload_time": "2020-04-08T13:03:50", "upload_time_iso_8601": "2020-04-08T13:03:50.168985Z", "url": "https://files.pythonhosted.org/packages/cb/ae/805758a2bdb59caab563910ca742833c5f068dc4e6dc9ae8ca5576ffe01b/hamb-0.1.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:41 2020"}