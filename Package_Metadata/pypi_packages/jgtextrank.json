{"info": {"author": "Jie Gao", "author_email": "j.gao@sheffield.ac.uk", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Intended Audience :: Education", "Intended Audience :: Information Technology", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3 :: Only", "Topic :: Scientific/Engineering :: Artificial Intelligence", "Topic :: Scientific/Engineering :: Human Machine Interfaces", "Topic :: Scientific/Engineering :: Information Analysis", "Topic :: Text Processing :: Filters", "Topic :: Text Processing :: General", "Topic :: Text Processing :: Indexing", "Topic :: Text Processing :: Linguistic"], "description": "jgTextRank : Yet another Python implementation of TextRank\n==========================================================\n\nThis is a parallelisable and highly customisable implementation of the TextRank algorithm [Mihalcea et al., 2004].\nYou can define your own co-occurrence context, syntactic categories(choose either \"closed\" filters or \"open\" filters),\nstop words, feed your own pre-segmented/pre-tagged data, and many more. You can also\nload co-occurrence graph directly from your text for visual analytics, debug and fine-tuning your custom settings.\nThis implementation can also be applied to large corpus for terminology extraction.\nIt can be applied to short text for supervised learning in order to provide more interesting features than conventional TF-IDF Vectorizer.\n\nTextRank algorithm look into the structure of word co-occurrence networks,\nwhere nodes are word types and edges are word cooccurrence.\n\nImportant words can be thought of as being endorsed by other words,\nand this leads to an interesting phenomenon. Words that are most\nimportant, viz. keywords, emerge as the most central words in the\nresulting network, with high degree and PageRank. The final important\nstep is post-filtering. Extracted phrases are disambiguated and\nnormalized for morpho-syntactic variations and lexical synonymy\n(Csomai and Mihalcea 2007). Adjacent words are also sometimes\ncollapsed into phrases, for a more readable output.\n\n\nMihalcea, R., & Tarau, P. (2004, July). TextRank: Bringing order into texts. Association for Computational Linguistics.\n\nUsage\n-----\n\nSimple examples\n###############\n\nExtract weighted keywords with an undirected graph:\n\n.. code-block:: python\n\n    from jgtextrank import keywords_extraction\n    example_abstract = \"Compatibility of systems of linear constraints over the set of natural numbers. \" \\\n                           \"Criteria of compatibility of a system of linear Diophantine equations, strict inequations, \" \\\n                           \"and nonstrict inequations are considered. Upper bounds for components of a minimal set of \" \\\n                           \"solutions and algorithms of construction of minimal generating sets of solutions for all \" \\\n                           \"types of systems are given. These criteria and the corresponding algorithms for \" \\\n                           \"constructing a minimal supporting set of solutions can be used in solving all the \" \\\n                           \"considered types systems and systems of mixed types.\"\n    keywords_extraction(example_abstract, top_p = 1, directed=False)[0][:15]\n\n    [('linear diophantine equations', 0.18059), ('minimal supporting set', 0.16649), ('minimal set', 0.13201), ('types systems', 0.1194), ('linear constraints', 0.10997), ('strict inequations', 0.08832), ('systems', 0.08351), ('corresponding algorithms', 0.0767), ('nonstrict inequations', 0.07276), ('mixed types', 0.07178), ('set', 0.06674), ('minimal', 0.06527), ('natural numbers', 0.06466), ('algorithms', 0.05479), ('solutions', 0.05085)]\n\nChange syntactic filters to restrict vertices to only noun phrases for addition to the graph:\n\n.. code-block:: python\n\n    custom_categories = {'NNS', 'NNP', 'NN'}\n    keywords_extraction(example_abstract, top_p = 1, top_t=None,\n                            directed=False, syntactic_categories=custom_categories)[0][:15]\n\n    [('types systems', 0.17147), ('diophantine equations', 0.15503), ('supporting set', 0.14256), ('solutions', 0.13119), ('systems', 0.12452), ('algorithms', 0.09188), ('set', 0.09188), ('compatibility', 0.0892), ('construction', 0.05068), ('criteria', 0.04939), ('sets', 0.04878), ('types', 0.04696), ('system', 0.01163), ('constraints', 0.01163), ('components', 0.01163)]\n\nYou can provide an additional stop word list to filter unwanted candidate terms:\n\n.. code-block:: python\n\n    stop_list={'set', 'mixed', 'corresponding', 'supporting'}\n    keywords_extraction(example_abstract, top_p = 1, top_t=None,\n                            directed=False,\n                            syntactic_categories=custom_categories, stop_words=stop_list)[0][:15]\n\n    [('types systems', 0.20312), ('diophantine equations', 0.18348), ('systems', 0.1476), ('algorithms', 0.11909), ('solutions', 0.11909), ('compatibility', 0.10522), ('sets', 0.06439), ('construction', 0.06439), ('criteria', 0.05863), ('types', 0.05552), ('system', 0.01377), ('constraints', 0.01377), ('components', 0.01377), ('numbers', 0.01377), ('upper', 0.01377)]\n\nYou can also use lemmatization (disabled by default) to increase the weight for terms appearing with various inflectional variations:\n\n.. code-block:: python\n\n    keywords_extraction(example_abstract, top_p = 1, top_t=None,\n                            directed=False,\n                            syntactic_categories=custom_categories,\n                            stop_words=stop_list, lemma=True)[0][:15]\n\n    [('type system', 0.2271), ('diophantine equation', 0.20513), ('system', 0.16497), ('algorithm', 0.14999), ('compatibility', 0.11774), ('construction', 0.07885), ('solution', 0.07885), ('criterion', 0.06542),('type', 0.06213), ('component', 0.01538), ('constraint', 0.01538), ('upper', 0.01538), ('inequations', 0.01538), ('number', 0.01538)]\n\nThe co-occurrence window size is 2 by default. You can try with a different number for your data:\n\n.. code-block:: python\n\n    keywords_extraction(example_abstract,  window=5,\n                            top_p = 1, top_t=None, directed=False,\n                            stop_words=stop_list, lemma=True)[0][:15]\n\n    [('linear diophantine equation', 0.19172), ('linear constraint', 0.13484), ('type system', 0.1347), ('strict inequations', 0.12532), ('system', 0.10514), ('nonstrict inequations', 0.09483), ('solution', 0.06903), ('natural number', 0.06711), ('minimal', 0.06346), ('algorithm', 0.05762), ('compatibility', 0.05089), ('construction', 0.04541), ('component', 0.04418), ('criterion', 0.04086), ('type', 0.02956)]\n\nTry with a centrality measures:\n\n.. code-block:: python\n\n    keywords_extraction(example_abstract, solver=\"current_flow_betweenness\",\n                            window=5, top_p = 1, top_t=None,\n                            directed=False, stop_words=stop_list,\n                            lemma=True)[0][:15]\n\n    [('type system', 0.77869), ('system', 0.77869), ('solution', 0.32797), ('linear diophantine equation', 0.30657), ('linear constraint', 0.30657), ('minimal', 0.26052), ('algorithm', 0.21463), ('criterion', 0.19821), ('strict inequations', 0.19651), ('nonstrict inequations', 0.19651), ('compatibility', 0.1927), ('natural number', 0.11111), ('component', 0.11111), ('type', 0.10718), ('construction', 0.10039)]\n\nTuning your graph model as a black box can be problematic.\nYou can try to visualize your co-occurrence network with your sample dataset in order to manually validate your custom parameters:\n\n.. code-block:: python\n\n    from jgtextrank import preprocessing, build_cooccurrence_graph\n    import networkx as nx\n    import matplotlib.pyplot as plt\n    preprocessed_context = preprocessing(example_abstract, stop_words=stop_list, lemma=True)\n    cooccurrence_graph, context_tokens = build_cooccurrence_graph(preprocessed_context, window=2)\n    pos = nx.spring_layout(cooccurrence_graph,k=0.20,iterations=20)\n    nx.draw_networkx(cooccurrence_graph, pos=pos, arrows=True, with_requets labels=True)\n    plt.savefig(\"my_sample_cooccurrence_graph.png\")\n    plt.show()\n\n\nMore examples (e.g., with custom co-occurrence context, how to extract from a corpus of text files,\nfeed your own pre-segmented/pre-tagged data), please see [jgTextRank wiki](https://github.com/jerrygaoLondon/jgtextrank/wiki)\n\nDocumentation\n-------------\n\nFor `jgtextrank` documentation, see:\n\n* [textrank](http://htmlpreview.github.io/?https://github.com/jerrygaoLondon/jgtextrank/blob/master/docs/jgtextrank.html)\n\nInstallation\n-------------\n\nTo install from [PyPi](https://pypi.python.org/pypi/jgtextrank)::\n\n    $ pip install jgtextrank\n\nTo install from github::\n\n    $ pip install git+git://github.com/jerrygaoLondon/jgtextrank.git\n\nor::\n\n    pip install git+https://github.com/jerrygaoLondon/jgtextrank.git\n\nTo install from source::\n\n    python setup.py install\n\nDependencies\n-------------\n\n* [nltk](http://www.nltk.org/)\n\n* [networkx](https://networkx.github.io/)\n\nStatus\n-------------\n\n* Beta release (update)\n\n    * Python implementation of TextRank algorithm for keywords extraction\n\n    * Support directed/undirected and unweighted graph\n\n    * >12 MWTs weighting methods\n\n    * 3 pagerank implementations and >15 additional graph ranking algorithms\n\n    * Parallelisation  of vertices co-occurrence computation (allow to set number of available worker instances)\n\n    * Support various custom settings and parameters (e.g., use of lemmatization,\n       co-occurrence window size, options for two co-occurrence context strategies,\n       use of custom syntactic filters, use of custom stop words)\n\n    * Keywords extraction from pre-processed (pre-segmented or pre PoS tagged) corpus/context\n\n    * Keywords extraction from a given corpus directory of raw text files\n\n    * Export ranked result into 'csv' or 'json' file\n\n    * Support visual analytics of vertices network\n\n\nhistory\n-------------\n* 0.1.2 Beta version - Aug 2018\n    * bug fixes\n    * 15 additional graph ranking algorithms\n* 0.1.1 Alpha version - 1st Jan 2018\n* 0.1.3 Beta version - March, 2019\n    * minor fixes and documentation improvement\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jerrygaoLondon/jgtextrank", "keywords": "textrank,parsing,natural language processing,nlp,keywords extraction,term extraction,text summarisation,text analytics,text mining,feature extraction,machine learning,graph algorithm,computational linguistics", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "jgtextrank", "package_url": "https://pypi.org/project/jgtextrank/", "platform": "", "project_url": "https://pypi.org/project/jgtextrank/", "project_urls": {"Homepage": "https://github.com/jerrygaoLondon/jgtextrank"}, "release_url": "https://pypi.org/project/jgtextrank/0.1.6/", "requires_dist": ["nltk", "networkx", "check-manifest; extra == 'dev'", "matplotlib; extra == 'dev'", "coverage; extra == 'test'", "matplotlib; extra == 'test'", "scipy; extra == 'test'"], "requires_python": ">=3", "summary": "Yet another Python implementation of TextRank: package for the creation, manipulation, and study of TextRank algorithm based keywords extraction and summarisation", "version": "0.1.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This is a parallelisable and highly customisable implementation of the TextRank algorithm [Mihalcea et al., 2004].\nYou can define your own co-occurrence context, syntactic categories(choose either \u201cclosed\u201d filters or \u201copen\u201d filters),\nstop words, feed your own pre-segmented/pre-tagged data, and many more. You can also\nload co-occurrence graph directly from your text for visual analytics, debug and fine-tuning your custom settings.\nThis implementation can also be applied to large corpus for terminology extraction.\nIt can be applied to short text for supervised learning in order to provide more interesting features than conventional TF-IDF Vectorizer.</p>\n<p>TextRank algorithm look into the structure of word co-occurrence networks,\nwhere nodes are word types and edges are word cooccurrence.</p>\n<p>Important words can be thought of as being endorsed by other words,\nand this leads to an interesting phenomenon. Words that are most\nimportant, viz. keywords, emerge as the most central words in the\nresulting network, with high degree and PageRank. The final important\nstep is post-filtering. Extracted phrases are disambiguated and\nnormalized for morpho-syntactic variations and lexical synonymy\n(Csomai and Mihalcea 2007). Adjacent words are also sometimes\ncollapsed into phrases, for a more readable output.</p>\n<p>Mihalcea, R., &amp; Tarau, P. (2004, July). TextRank: Bringing order into texts. Association for Computational Linguistics.</p>\n<div id=\"usage\">\n<h2>Usage</h2>\n<h2 id=\"simple-examples\"><span class=\"section-subtitle\">Simple examples</span></h2>\n<p>Extract weighted keywords with an undirected graph:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">jgtextrank</span> <span class=\"kn\">import</span> <span class=\"n\">keywords_extraction</span>\n<span class=\"n\">example_abstract</span> <span class=\"o\">=</span> <span class=\"s2\">\"Compatibility of systems of linear constraints over the set of natural numbers. \"</span> \\\n                       <span class=\"s2\">\"Criteria of compatibility of a system of linear Diophantine equations, strict inequations, \"</span> \\\n                       <span class=\"s2\">\"and nonstrict inequations are considered. Upper bounds for components of a minimal set of \"</span> \\\n                       <span class=\"s2\">\"solutions and algorithms of construction of minimal generating sets of solutions for all \"</span> \\\n                       <span class=\"s2\">\"types of systems are given. These criteria and the corresponding algorithms for \"</span> \\\n                       <span class=\"s2\">\"constructing a minimal supporting set of solutions can be used in solving all the \"</span> \\\n                       <span class=\"s2\">\"considered types systems and systems of mixed types.\"</span>\n<span class=\"n\">keywords_extraction</span><span class=\"p\">(</span><span class=\"n\">example_abstract</span><span class=\"p\">,</span> <span class=\"n\">top_p</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">directed</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">][:</span><span class=\"mi\">15</span><span class=\"p\">]</span>\n\n<span class=\"p\">[(</span><span class=\"s1\">'linear diophantine equations'</span><span class=\"p\">,</span> <span class=\"mf\">0.18059</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'minimal supporting set'</span><span class=\"p\">,</span> <span class=\"mf\">0.16649</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'minimal set'</span><span class=\"p\">,</span> <span class=\"mf\">0.13201</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'types systems'</span><span class=\"p\">,</span> <span class=\"mf\">0.1194</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'linear constraints'</span><span class=\"p\">,</span> <span class=\"mf\">0.10997</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'strict inequations'</span><span class=\"p\">,</span> <span class=\"mf\">0.08832</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'systems'</span><span class=\"p\">,</span> <span class=\"mf\">0.08351</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'corresponding algorithms'</span><span class=\"p\">,</span> <span class=\"mf\">0.0767</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'nonstrict inequations'</span><span class=\"p\">,</span> <span class=\"mf\">0.07276</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'mixed types'</span><span class=\"p\">,</span> <span class=\"mf\">0.07178</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'set'</span><span class=\"p\">,</span> <span class=\"mf\">0.06674</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'minimal'</span><span class=\"p\">,</span> <span class=\"mf\">0.06527</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'natural numbers'</span><span class=\"p\">,</span> <span class=\"mf\">0.06466</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'algorithms'</span><span class=\"p\">,</span> <span class=\"mf\">0.05479</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'solutions'</span><span class=\"p\">,</span> <span class=\"mf\">0.05085</span><span class=\"p\">)]</span>\n</pre>\n<p>Change syntactic filters to restrict vertices to only noun phrases for addition to the graph:</p>\n<pre><span class=\"n\">custom_categories</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'NNS'</span><span class=\"p\">,</span> <span class=\"s1\">'NNP'</span><span class=\"p\">,</span> <span class=\"s1\">'NN'</span><span class=\"p\">}</span>\n<span class=\"n\">keywords_extraction</span><span class=\"p\">(</span><span class=\"n\">example_abstract</span><span class=\"p\">,</span> <span class=\"n\">top_p</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">top_t</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                        <span class=\"n\">directed</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">syntactic_categories</span><span class=\"o\">=</span><span class=\"n\">custom_categories</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">][:</span><span class=\"mi\">15</span><span class=\"p\">]</span>\n\n<span class=\"p\">[(</span><span class=\"s1\">'types systems'</span><span class=\"p\">,</span> <span class=\"mf\">0.17147</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'diophantine equations'</span><span class=\"p\">,</span> <span class=\"mf\">0.15503</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'supporting set'</span><span class=\"p\">,</span> <span class=\"mf\">0.14256</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'solutions'</span><span class=\"p\">,</span> <span class=\"mf\">0.13119</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'systems'</span><span class=\"p\">,</span> <span class=\"mf\">0.12452</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'algorithms'</span><span class=\"p\">,</span> <span class=\"mf\">0.09188</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'set'</span><span class=\"p\">,</span> <span class=\"mf\">0.09188</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'compatibility'</span><span class=\"p\">,</span> <span class=\"mf\">0.0892</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'construction'</span><span class=\"p\">,</span> <span class=\"mf\">0.05068</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'criteria'</span><span class=\"p\">,</span> <span class=\"mf\">0.04939</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'sets'</span><span class=\"p\">,</span> <span class=\"mf\">0.04878</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'types'</span><span class=\"p\">,</span> <span class=\"mf\">0.04696</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'system'</span><span class=\"p\">,</span> <span class=\"mf\">0.01163</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'constraints'</span><span class=\"p\">,</span> <span class=\"mf\">0.01163</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'components'</span><span class=\"p\">,</span> <span class=\"mf\">0.01163</span><span class=\"p\">)]</span>\n</pre>\n<p>You can provide an additional stop word list to filter unwanted candidate terms:</p>\n<pre><span class=\"n\">stop_list</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'set'</span><span class=\"p\">,</span> <span class=\"s1\">'mixed'</span><span class=\"p\">,</span> <span class=\"s1\">'corresponding'</span><span class=\"p\">,</span> <span class=\"s1\">'supporting'</span><span class=\"p\">}</span>\n<span class=\"n\">keywords_extraction</span><span class=\"p\">(</span><span class=\"n\">example_abstract</span><span class=\"p\">,</span> <span class=\"n\">top_p</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">top_t</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                        <span class=\"n\">directed</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                        <span class=\"n\">syntactic_categories</span><span class=\"o\">=</span><span class=\"n\">custom_categories</span><span class=\"p\">,</span> <span class=\"n\">stop_words</span><span class=\"o\">=</span><span class=\"n\">stop_list</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">][:</span><span class=\"mi\">15</span><span class=\"p\">]</span>\n\n<span class=\"p\">[(</span><span class=\"s1\">'types systems'</span><span class=\"p\">,</span> <span class=\"mf\">0.20312</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'diophantine equations'</span><span class=\"p\">,</span> <span class=\"mf\">0.18348</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'systems'</span><span class=\"p\">,</span> <span class=\"mf\">0.1476</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'algorithms'</span><span class=\"p\">,</span> <span class=\"mf\">0.11909</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'solutions'</span><span class=\"p\">,</span> <span class=\"mf\">0.11909</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'compatibility'</span><span class=\"p\">,</span> <span class=\"mf\">0.10522</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'sets'</span><span class=\"p\">,</span> <span class=\"mf\">0.06439</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'construction'</span><span class=\"p\">,</span> <span class=\"mf\">0.06439</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'criteria'</span><span class=\"p\">,</span> <span class=\"mf\">0.05863</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'types'</span><span class=\"p\">,</span> <span class=\"mf\">0.05552</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'system'</span><span class=\"p\">,</span> <span class=\"mf\">0.01377</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'constraints'</span><span class=\"p\">,</span> <span class=\"mf\">0.01377</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'components'</span><span class=\"p\">,</span> <span class=\"mf\">0.01377</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'numbers'</span><span class=\"p\">,</span> <span class=\"mf\">0.01377</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'upper'</span><span class=\"p\">,</span> <span class=\"mf\">0.01377</span><span class=\"p\">)]</span>\n</pre>\n<p>You can also use lemmatization (disabled by default) to increase the weight for terms appearing with various inflectional variations:</p>\n<pre><span class=\"n\">keywords_extraction</span><span class=\"p\">(</span><span class=\"n\">example_abstract</span><span class=\"p\">,</span> <span class=\"n\">top_p</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">top_t</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                        <span class=\"n\">directed</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                        <span class=\"n\">syntactic_categories</span><span class=\"o\">=</span><span class=\"n\">custom_categories</span><span class=\"p\">,</span>\n                        <span class=\"n\">stop_words</span><span class=\"o\">=</span><span class=\"n\">stop_list</span><span class=\"p\">,</span> <span class=\"n\">lemma</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">][:</span><span class=\"mi\">15</span><span class=\"p\">]</span>\n\n<span class=\"p\">[(</span><span class=\"s1\">'type system'</span><span class=\"p\">,</span> <span class=\"mf\">0.2271</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'diophantine equation'</span><span class=\"p\">,</span> <span class=\"mf\">0.20513</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'system'</span><span class=\"p\">,</span> <span class=\"mf\">0.16497</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'algorithm'</span><span class=\"p\">,</span> <span class=\"mf\">0.14999</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'compatibility'</span><span class=\"p\">,</span> <span class=\"mf\">0.11774</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'construction'</span><span class=\"p\">,</span> <span class=\"mf\">0.07885</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'solution'</span><span class=\"p\">,</span> <span class=\"mf\">0.07885</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'criterion'</span><span class=\"p\">,</span> <span class=\"mf\">0.06542</span><span class=\"p\">),(</span><span class=\"s1\">'type'</span><span class=\"p\">,</span> <span class=\"mf\">0.06213</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'component'</span><span class=\"p\">,</span> <span class=\"mf\">0.01538</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'constraint'</span><span class=\"p\">,</span> <span class=\"mf\">0.01538</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'upper'</span><span class=\"p\">,</span> <span class=\"mf\">0.01538</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'inequations'</span><span class=\"p\">,</span> <span class=\"mf\">0.01538</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'number'</span><span class=\"p\">,</span> <span class=\"mf\">0.01538</span><span class=\"p\">)]</span>\n</pre>\n<p>The co-occurrence window size is 2 by default. You can try with a different number for your data:</p>\n<pre><span class=\"n\">keywords_extraction</span><span class=\"p\">(</span><span class=\"n\">example_abstract</span><span class=\"p\">,</span>  <span class=\"n\">window</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span>\n                        <span class=\"n\">top_p</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">top_t</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">directed</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                        <span class=\"n\">stop_words</span><span class=\"o\">=</span><span class=\"n\">stop_list</span><span class=\"p\">,</span> <span class=\"n\">lemma</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">][:</span><span class=\"mi\">15</span><span class=\"p\">]</span>\n\n<span class=\"p\">[(</span><span class=\"s1\">'linear diophantine equation'</span><span class=\"p\">,</span> <span class=\"mf\">0.19172</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'linear constraint'</span><span class=\"p\">,</span> <span class=\"mf\">0.13484</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'type system'</span><span class=\"p\">,</span> <span class=\"mf\">0.1347</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'strict inequations'</span><span class=\"p\">,</span> <span class=\"mf\">0.12532</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'system'</span><span class=\"p\">,</span> <span class=\"mf\">0.10514</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'nonstrict inequations'</span><span class=\"p\">,</span> <span class=\"mf\">0.09483</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'solution'</span><span class=\"p\">,</span> <span class=\"mf\">0.06903</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'natural number'</span><span class=\"p\">,</span> <span class=\"mf\">0.06711</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'minimal'</span><span class=\"p\">,</span> <span class=\"mf\">0.06346</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'algorithm'</span><span class=\"p\">,</span> <span class=\"mf\">0.05762</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'compatibility'</span><span class=\"p\">,</span> <span class=\"mf\">0.05089</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'construction'</span><span class=\"p\">,</span> <span class=\"mf\">0.04541</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'component'</span><span class=\"p\">,</span> <span class=\"mf\">0.04418</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'criterion'</span><span class=\"p\">,</span> <span class=\"mf\">0.04086</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'type'</span><span class=\"p\">,</span> <span class=\"mf\">0.02956</span><span class=\"p\">)]</span>\n</pre>\n<p>Try with a centrality measures:</p>\n<pre><span class=\"n\">keywords_extraction</span><span class=\"p\">(</span><span class=\"n\">example_abstract</span><span class=\"p\">,</span> <span class=\"n\">solver</span><span class=\"o\">=</span><span class=\"s2\">\"current_flow_betweenness\"</span><span class=\"p\">,</span>\n                        <span class=\"n\">window</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">top_p</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">top_t</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                        <span class=\"n\">directed</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">stop_words</span><span class=\"o\">=</span><span class=\"n\">stop_list</span><span class=\"p\">,</span>\n                        <span class=\"n\">lemma</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">][:</span><span class=\"mi\">15</span><span class=\"p\">]</span>\n\n<span class=\"p\">[(</span><span class=\"s1\">'type system'</span><span class=\"p\">,</span> <span class=\"mf\">0.77869</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'system'</span><span class=\"p\">,</span> <span class=\"mf\">0.77869</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'solution'</span><span class=\"p\">,</span> <span class=\"mf\">0.32797</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'linear diophantine equation'</span><span class=\"p\">,</span> <span class=\"mf\">0.30657</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'linear constraint'</span><span class=\"p\">,</span> <span class=\"mf\">0.30657</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'minimal'</span><span class=\"p\">,</span> <span class=\"mf\">0.26052</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'algorithm'</span><span class=\"p\">,</span> <span class=\"mf\">0.21463</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'criterion'</span><span class=\"p\">,</span> <span class=\"mf\">0.19821</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'strict inequations'</span><span class=\"p\">,</span> <span class=\"mf\">0.19651</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'nonstrict inequations'</span><span class=\"p\">,</span> <span class=\"mf\">0.19651</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'compatibility'</span><span class=\"p\">,</span> <span class=\"mf\">0.1927</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'natural number'</span><span class=\"p\">,</span> <span class=\"mf\">0.11111</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'component'</span><span class=\"p\">,</span> <span class=\"mf\">0.11111</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'type'</span><span class=\"p\">,</span> <span class=\"mf\">0.10718</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'construction'</span><span class=\"p\">,</span> <span class=\"mf\">0.10039</span><span class=\"p\">)]</span>\n</pre>\n<p>Tuning your graph model as a black box can be problematic.\nYou can try to visualize your co-occurrence network with your sample dataset in order to manually validate your custom parameters:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">jgtextrank</span> <span class=\"kn\">import</span> <span class=\"n\">preprocessing</span><span class=\"p\">,</span> <span class=\"n\">build_cooccurrence_graph</span>\n<span class=\"kn\">import</span> <span class=\"nn\">networkx</span> <span class=\"k\">as</span> <span class=\"nn\">nx</span>\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n<span class=\"n\">preprocessed_context</span> <span class=\"o\">=</span> <span class=\"n\">preprocessing</span><span class=\"p\">(</span><span class=\"n\">example_abstract</span><span class=\"p\">,</span> <span class=\"n\">stop_words</span><span class=\"o\">=</span><span class=\"n\">stop_list</span><span class=\"p\">,</span> <span class=\"n\">lemma</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">cooccurrence_graph</span><span class=\"p\">,</span> <span class=\"n\">context_tokens</span> <span class=\"o\">=</span> <span class=\"n\">build_cooccurrence_graph</span><span class=\"p\">(</span><span class=\"n\">preprocessed_context</span><span class=\"p\">,</span> <span class=\"n\">window</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">pos</span> <span class=\"o\">=</span> <span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">spring_layout</span><span class=\"p\">(</span><span class=\"n\">cooccurrence_graph</span><span class=\"p\">,</span><span class=\"n\">k</span><span class=\"o\">=</span><span class=\"mf\">0.20</span><span class=\"p\">,</span><span class=\"n\">iterations</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">)</span>\n<span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">draw_networkx</span><span class=\"p\">(</span><span class=\"n\">cooccurrence_graph</span><span class=\"p\">,</span> <span class=\"n\">pos</span><span class=\"o\">=</span><span class=\"n\">pos</span><span class=\"p\">,</span> <span class=\"n\">arrows</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">with_requets</span> <span class=\"n\">labels</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">savefig</span><span class=\"p\">(</span><span class=\"s2\">\"my_sample_cooccurrence_graph.png\"</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n<p>More examples (e.g., with custom co-occurrence context, how to extract from a corpus of text files,\nfeed your own pre-segmented/pre-tagged data), please see [jgTextRank wiki](<a href=\"https://github.com/jerrygaoLondon/jgtextrank/wiki\" rel=\"nofollow\">https://github.com/jerrygaoLondon/jgtextrank/wiki</a>)</p>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p>For <cite>jgtextrank</cite> documentation, see:</p>\n<ul>\n<li>[textrank](<a href=\"http://htmlpreview.github.io/?https://github.com/jerrygaoLondon/jgtextrank/blob/master/docs/jgtextrank.html\" rel=\"nofollow\">http://htmlpreview.github.io/?https://github.com/jerrygaoLondon/jgtextrank/blob/master/docs/jgtextrank.html</a>)</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>To install from [PyPi](<a href=\"https://pypi.python.org/pypi/jgtextrank\" rel=\"nofollow\">https://pypi.python.org/pypi/jgtextrank</a>):</p>\n<pre>$ pip install jgtextrank\n</pre>\n<p>To install from github:</p>\n<pre>$ pip install git+git://github.com/jerrygaoLondon/jgtextrank.git\n</pre>\n<p>or:</p>\n<pre>pip install git+https://github.com/jerrygaoLondon/jgtextrank.git\n</pre>\n<p>To install from source:</p>\n<pre>python setup.py install\n</pre>\n</div>\n<div id=\"dependencies\">\n<h2>Dependencies</h2>\n<ul>\n<li>[nltk](<a href=\"http://www.nltk.org/\" rel=\"nofollow\">http://www.nltk.org/</a>)</li>\n<li>[networkx](<a href=\"https://networkx.github.io/\" rel=\"nofollow\">https://networkx.github.io/</a>)</li>\n</ul>\n</div>\n<div id=\"status\">\n<h2>Status</h2>\n<ul>\n<li><p>Beta release (update)</p>\n<blockquote>\n<ul>\n<li>Python implementation of TextRank algorithm for keywords extraction</li>\n<li>Support directed/undirected and unweighted graph</li>\n<li>&gt;12 MWTs weighting methods</li>\n<li>3 pagerank implementations and &gt;15 additional graph ranking algorithms</li>\n<li>Parallelisation  of vertices co-occurrence computation (allow to set number of available worker instances)</li>\n<li><dl>\n<dt>Support various custom settings and parameters (e.g., use of lemmatization,</dt>\n<dd>co-occurrence window size, options for two co-occurrence context strategies,\nuse of custom syntactic filters, use of custom stop words)</dd>\n</dl>\n</li>\n<li>Keywords extraction from pre-processed (pre-segmented or pre PoS tagged) corpus/context</li>\n<li>Keywords extraction from a given corpus directory of raw text files</li>\n<li>Export ranked result into \u2018csv\u2019 or \u2018json\u2019 file</li>\n<li>Support visual analytics of vertices network</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n</div>\n<div id=\"history\">\n<h2>history</h2>\n<ul>\n<li><dl>\n<dt>0.1.2 Beta version - Aug 2018</dt>\n<dd><ul>\n<li>bug fixes</li>\n<li>15 additional graph ranking algorithms</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li>0.1.1 Alpha version - 1st Jan 2018</li>\n<li><dl>\n<dt>0.1.3 Beta version - March, 2019</dt>\n<dd><ul>\n<li>minor fixes and documentation improvement</li>\n</ul>\n</dd>\n</dl>\n</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 6207627, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "9c0e1becd72a4c03b00355f9c2c09196", "sha256": "a76c166215bfb78fb5b46771f573c20aa742c5595c0b2afb116cd0a425b59da6"}, "downloads": -1, "filename": "jgtextrank-0.1.1-py3.6.egg", "has_sig": false, "md5_digest": "9c0e1becd72a4c03b00355f9c2c09196", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": null, "size": 31739, "upload_time": "2018-01-01T00:02:14", "upload_time_iso_8601": "2018-01-01T00:02:14.879848Z", "url": "https://files.pythonhosted.org/packages/2d/43/19205b6a31dcc922144d8df0164dd96b0edce45baf075c7558123a80d301/jgtextrank-0.1.1-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "6382f857c903fffc8eae0cca6f4abd4c", "sha256": "51fee402850eda62fc5eabae4477b1abb10a6d1da50528a909f598117b95307d"}, "downloads": -1, "filename": "jgtextrank-0.1.1.tar.gz", "has_sig": false, "md5_digest": "6382f857c903fffc8eae0cca6f4abd4c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26593, "upload_time": "2018-01-01T00:02:16", "upload_time_iso_8601": "2018-01-01T00:02:16.297198Z", "url": "https://files.pythonhosted.org/packages/5b/d7/bb5b6031e1b3a4212ecea7f959de9376f66942c789b46764d8795f44a3d4/jgtextrank-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "1c806bbf44a58d2f7db640a3cfeff8c1", "sha256": "b49b886d8c7f8e17ca262782c1f72a21b0a120edd7e534699e1fb19844e164fc"}, "downloads": -1, "filename": "jgtextrank-0.1.2-py3.6.egg", "has_sig": false, "md5_digest": "1c806bbf44a58d2f7db640a3cfeff8c1", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": null, "size": 70253, "upload_time": "2018-08-30T11:50:10", "upload_time_iso_8601": "2018-08-30T11:50:10.647295Z", "url": "https://files.pythonhosted.org/packages/87/7c/1e33221e983ddb051ee275b8393ba6f47102eedf3e138e146e15d46e9db2/jgtextrank-0.1.2-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "9a4d7564e65b61e69541a925780860f9", "sha256": "361dc45c7085ddb86aa6c19dd09964f7dadd0a10a2e63a4a78ea56978644b1d3"}, "downloads": -1, "filename": "jgtextrank-0.1.2.tar.gz", "has_sig": false, "md5_digest": "9a4d7564e65b61e69541a925780860f9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32842, "upload_time": "2018-08-30T11:50:11", "upload_time_iso_8601": "2018-08-30T11:50:11.983968Z", "url": "https://files.pythonhosted.org/packages/63/f8/f3e0c591b01e0cd3f3d11fb52e09ba19e921727a22f4c849b10f6c438c7c/jgtextrank-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "b30dd6bef2b3ce92de76bcaf5f4e0fc2", "sha256": "c11a5349f670c81aff7a8f023b1eda5ab95b37555d094bbb6fb80178da041a52"}, "downloads": -1, "filename": "jgtextrank-0.1.3-py3.6.egg", "has_sig": false, "md5_digest": "b30dd6bef2b3ce92de76bcaf5f4e0fc2", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": null, "size": 39634, "upload_time": "2019-03-06T17:04:37", "upload_time_iso_8601": "2019-03-06T17:04:37.771502Z", "url": "https://files.pythonhosted.org/packages/ee/72/a5eecc55f26f928f68e43730aa67934c0f2eaeb275ce2484ed2eea368f47/jgtextrank-0.1.3-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "8cb7c7663ca2410c88f3e0fd2e8ceb04", "sha256": "b7c59e63504f351247b121ebb8804b411ea1cdbf963445b75587e59e22dd5cde"}, "downloads": -1, "filename": "jgtextrank-0.1.3.tar.gz", "has_sig": false, "md5_digest": "8cb7c7663ca2410c88f3e0fd2e8ceb04", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35301, "upload_time": "2019-03-06T17:00:27", "upload_time_iso_8601": "2019-03-06T17:00:27.230739Z", "url": "https://files.pythonhosted.org/packages/b3/bd/91d6b9590e8e471138d40b23c60da7db8acf576422977d43646566c0b4a9/jgtextrank-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "5b403d692ade8090beff6f1836191b8c", "sha256": "7d8951fbbcaf16f3b1e47eedc7402e8885f6f161bee621e69b0383b6ddf98482"}, "downloads": -1, "filename": "jgtextrank-0.1.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5b403d692ade8090beff6f1836191b8c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 98924, "upload_time": "2019-11-27T11:31:06", "upload_time_iso_8601": "2019-11-27T11:31:06.102682Z", "url": "https://files.pythonhosted.org/packages/4d/2c/826864a5333a09ee0b7b96e4e17a2e4f2ed4108bf9df1836c210ea957819/jgtextrank-0.1.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2b2ed17e166948257c8137ca747cfd2a", "sha256": "18e05b833e69913cccccb9e3cb5b2d576b63bed0296589a4dec3df82ce9281ac"}, "downloads": -1, "filename": "jgtextrank-0.1.4-py3.6.egg", "has_sig": false, "md5_digest": "2b2ed17e166948257c8137ca747cfd2a", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": null, "size": 40074, "upload_time": "2019-11-26T13:19:37", "upload_time_iso_8601": "2019-11-26T13:19:37.909497Z", "url": "https://files.pythonhosted.org/packages/64/ea/06aaf37c383cf7dc3c85f186862cf7d00135a418c9bb82726c7b9b088ed7/jgtextrank-0.1.4-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "16e085d72d0e9468f63fb52be5c8d1f7", "sha256": "f935a4255da6113b23d46025b84bd99d944989836774dcbfc4ef9e30d2479b4a"}, "downloads": -1, "filename": "jgtextrank-0.1.4.tar.gz", "has_sig": false, "md5_digest": "16e085d72d0e9468f63fb52be5c8d1f7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36735, "upload_time": "2019-11-26T13:19:39", "upload_time_iso_8601": "2019-11-26T13:19:39.845600Z", "url": "https://files.pythonhosted.org/packages/11/e0/ab8425f2e721729fea40a0bc25ddf5964f9e9c9f2468bfa5617098a38f2f/jgtextrank-0.1.4.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "670ce92d7d91c649e8e9921b7aa98572", "sha256": "d4cc0f2669623d9f009862043e9dd3435d8dee8d3d27cd42cf1a1be189f35c8c"}, "downloads": -1, "filename": "jgtextrank-0.1.6-py3.6.egg", "has_sig": false, "md5_digest": "670ce92d7d91c649e8e9921b7aa98572", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": ">=3", "size": 39449, "upload_time": "2019-11-27T11:51:45", "upload_time_iso_8601": "2019-11-27T11:51:45.730485Z", "url": "https://files.pythonhosted.org/packages/a0/a0/b8036a8fd2aff3a1a150e9a74bd9a16e0554e048145b02557261f8e354ea/jgtextrank-0.1.6-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "ab5f1e3ee378f8cf65936310a1eccf60", "sha256": "2eda7cfbd3ecf06142e20fdae8de00127d2918fc0746428b657491bb1008b4dc"}, "downloads": -1, "filename": "jgtextrank-0.1.6.tar.gz", "has_sig": false, "md5_digest": "ab5f1e3ee378f8cf65936310a1eccf60", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 33325, "upload_time": "2019-11-27T11:51:47", "upload_time_iso_8601": "2019-11-27T11:51:47.516551Z", "url": "https://files.pythonhosted.org/packages/af/22/025af13bc6253c1ca43c84cd43b4fb09c05318cff3ceac1a6e82b78c9ac0/jgtextrank-0.1.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "670ce92d7d91c649e8e9921b7aa98572", "sha256": "d4cc0f2669623d9f009862043e9dd3435d8dee8d3d27cd42cf1a1be189f35c8c"}, "downloads": -1, "filename": "jgtextrank-0.1.6-py3.6.egg", "has_sig": false, "md5_digest": "670ce92d7d91c649e8e9921b7aa98572", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": ">=3", "size": 39449, "upload_time": "2019-11-27T11:51:45", "upload_time_iso_8601": "2019-11-27T11:51:45.730485Z", "url": "https://files.pythonhosted.org/packages/a0/a0/b8036a8fd2aff3a1a150e9a74bd9a16e0554e048145b02557261f8e354ea/jgtextrank-0.1.6-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "ab5f1e3ee378f8cf65936310a1eccf60", "sha256": "2eda7cfbd3ecf06142e20fdae8de00127d2918fc0746428b657491bb1008b4dc"}, "downloads": -1, "filename": "jgtextrank-0.1.6.tar.gz", "has_sig": false, "md5_digest": "ab5f1e3ee378f8cf65936310a1eccf60", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 33325, "upload_time": "2019-11-27T11:51:47", "upload_time_iso_8601": "2019-11-27T11:51:47.516551Z", "url": "https://files.pythonhosted.org/packages/af/22/025af13bc6253c1ca43c84cd43b4fb09c05318cff3ceac1a6e82b78c9ac0/jgtextrank-0.1.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:46 2020"}