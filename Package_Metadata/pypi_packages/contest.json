{"info": {"author": "Lnk2past", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": "# contest\n\n[![Build Status](https://github.com/Lnk2past/contest/workflows/Build/badge.svg)](https://github.com/Lnk2past/contest/actions)\n[![PyPI version shields.io](https://img.shields.io/pypi/v/contest.svg)](https://pypi.python.org/pypi/contest/)\n![Python](https://img.shields.io/badge/python-3.6%20%7C%203.7%20%7C%203.8-red)\n![Platforms](https://img.shields.io/badge/platform-windows%20%7C%20mac%20%7C%20linux-yellow)\n\nA `CON`sole application `TEST`er\n\n## Introduction\n\n`contest` is a testing application that exercises a program with configured input and then checks the output with some expected content. Simply: `contest` validates executable output given specific inputs.\n\n### Motivation\n\nI wrote this for a class that I teach to help with grading. Given the configuration driven nature of it (how else should a testing framework/tool work?) `contest` lets me define multiple test cases for particular programs (assignments) so that not only is grading easier for me, but I can integrate assignments into a grading pipeline so that I can do as little work as possible and my students can get immediate feedback on submissions. Assignments here are usually single-file programs that are not necessarily unit-testable without adding in boilderplate and nonstandard language features. Letting students build normal programs and then verify their behavior is the goal.\n\n## Installation\n\n```shell\npip install contest\n```\n\nYou may install from this repo, clone and simply:\n\n```shell\npython setup.py install\n```\n\n## How It Works\n\n### Overview\n\nYAML is the preferred choice of input for `contest` for a few reasons, but most notably for its easy to follow syntax and allowance of multiline strings (sorry JSON). `contest` consumes an input file that specifies at least one executable and then whatever additional information is provided. Check out the test skeleton below to see what can be specified; the main ones though are the input and output streams `stdout`, `stderr`, and `stderr` as well and CLI inputs `argv`. You can specify newly generated files that you expect to be created and even go further and specify custom tests (as `Python` files) that cover the things simple I/O comparisons do not. Lastly, you may also specify environment variables to be set during the execution; and you may also scrub the environment before adding custom keys. Note that scrubbing the environment may prevent your executable from running altogether! For now you are better off allowing your current environment to persist and simply overwrite what needs to be set. Environment variables specified within a test-case take precedence over what is in your current environmnt.\n\n#### Test Skeleton\n\n```yaml\nexecutable:                 # !!str, name of the executable to use for all tests\ntest-cases:                 # !!seq, list of all test cases\n    - name:                 # !!str, name of the test\n      scrub-env:            # !!bool, flag to remove the current environment\n      env:                  # !!map, environment variables to set\n      executable:           # !!str, name of the executable to use for this test case only\n      argv:                 # !!seq, list of arguments to pass to the executable\n      stdin:                # !!str || !!seq inputs to standard input stream\n        # * see below\n      returncode:           # !!int, expected return code\n      stdout:               # !!str || !!seq || !!map, expected output in standard output stream\n        # ** see below\n      stderr:               # !!str || !!seq || !!map, expected output in standard error stream\n        # ** see below\n      ofstreams:            # !!seq, list of files to compare\n            # *** see below\n      extra-tests:          # !!seq, list of additional modules to load for additional tests\n```\n\n\\* The stdin field can either be a block of text (one entry to stdin per line) or can be provided as a list.\n\n\\*\\* These fields can either be text blocks, lists, or dictionaries. As a text block or list, it should be the expected output as is. As dictionaries the following fields are allowed:\n\n```yaml\ntext:         # !!str, expected output as a string\nfile:         # !!str, file containing the text to compare against. useful for keeping the size of these files small if desired\nempty:        # !!bool, flag to explicitly check if a stream is empty or nonempty. all other checks are ignored\nstart:        # !!int, 0-indexed line offset to specify where to start comparisons\ncount:        # !!int, number of lines to compare\n```\n\nAll fields are optional, so long as whatever is (or is not) specified makes sense.\n\n\\*\\*\\* These fields are dictionaries and in addition to the fields specified above, the following fields are allowed:\n\n```yaml\ntest-file:    # !!str, path to file generated, absolute or relative to the executable\nexists:       # !!bool, flag to check if the file exists. all other checks are ignored\nbinary:       # !!bool, flag to indicate the file is binary\n```\n\nOther than `test-file`, each field is optional, so long as whatever is (or is not) specified makes sense.\n\n## Basic Usage\n\nGiven some configuration you can run `contest` using the following:\n\n```shell\ncontest <path to configuration file>\n```\n\nThis will parse the configuration and run the specified test cass(s). In the configuration file each test case is defined under the `test-cases` node in the recipe; simply add a new section as desired. You will just need to make sure each test is named uniquely. Here is an example of a test recipe (taken from `examples/native_console_app`):\n\n```yaml\nexecutable: hello_world.exe\ntest-cases:\n  - name: standard\n    stdin: Lnk2past\n    stdout: |\n      Hello! What is your name?\n      Welcome to the world, Lnk2past!\n```\n\nLet us break down what this is specifying:\n\n1. The name of the `executable` to run is\n    ```\n    hello_world.exe\n    ```\n2. We have a single test-case named\n    ```\n    standard\n    ```\n3. We define the input to `stdin`, which is a single entry:\n    ```\n    Lnk2past\n    ```\n4. We define the output to `stdout`, which is:\n    ```\n    Hello! What is your name?\n    Welcome to the world, Lnk2past!\n    ```\n\nThis is really the equivalent of the following in some shell environment:\n```\n~/project> ./hello_world.exe\nHello! What is your name?\nLnk2past\nWelcome to the world, Lnk2past!\n~/project>\n```\n\nThis means that when running the executable `hello_world.exe` we can expect the input in step 3 to yield the output in step 4. `contest` does this comparison for you! This allows you to write tests that would reflect actual use cases of your executable. Add as many tests as you like to cover various pathways through your program and to cover the various errors your program may encounter.\n\nCheck out the other examples under the `examples` directory.\n\n### Test Directories\n\n`contest` will run each test-case in a separate directory, and will create those directories in the same directory containing the test recipe. This ensures minimal conflict between test cases. For example, if your test recipe contains test cases \"foo\" and \"bar\" and is located in \"C:\\Users\\Lnk2past\\MyProject\", then you can expact the following directory structure:\n\n```\nC:\\Users\\Lnk2past\\MyProject\\\n|---src\\...\n|---include\\...\n|---contest_recipe.yaml\n|---test_output\\\n    |---foo\\...\n    |---bar\\...\n```\n\nEven if your test-case produces no output on disk, the test-output directory will be created.\n\n### Filtering Tests\n\nYou can filter your test-recipes to only run a select few. This may be useful during debugging to only run your new test without needing to run the entire test recipe. You can do this via the `--filter` option. This expects some `regular expression` to filter on. e.g. we can test only those tests that are marked with a specific keyword in their names, say \"tracking\", by doing the following:\n\n```\ncontest test_recipe.yaml --filter \"tracking\"\n```\n\nLikewise, you can exclude specific tests in order if they are problematic or if you are focusing on other tests. simply use the `--exclude-filters` or `--exclude` for short. So long as you know `regex` you can do whatever you like for filtering your tests!\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Lnk2past/contest", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "contest", "package_url": "https://pypi.org/project/contest/", "platform": "", "project_url": "https://pypi.org/project/contest/", "project_urls": {"Homepage": "https://github.com/Lnk2past/contest"}, "release_url": "https://pypi.org/project/contest/2020.1.0/", "requires_dist": ["PyYAML"], "requires_python": "", "summary": "A console application tester.", "version": "2020.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>contest</h1>\n<p><a href=\"https://github.com/Lnk2past/contest/actions\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8bf80e0bd90f8432df4a06f195f6ca9942608194/68747470733a2f2f6769746875622e636f6d2f4c6e6b32706173742f636f6e746573742f776f726b666c6f77732f4275696c642f62616467652e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/contest/\" rel=\"nofollow\"><img alt=\"PyPI version shields.io\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/67bea312d74102b96b9bba65fd15d479bf9a4432/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f636f6e746573742e737667\"></a>\n<img alt=\"Python\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5dbb1ef0e2903d901fea54adaa9a08b4af176440/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f707974686f6e2d332e36253230253743253230332e37253230253743253230332e382d726564\">\n<img alt=\"Platforms\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fdfc623005e2472dd55a18ab870c05f904767575/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f706c6174666f726d2d77696e646f77732532302537432532306d61632532302537432532306c696e75782d79656c6c6f77\"></p>\n<p>A <code>CON</code>sole application <code>TEST</code>er</p>\n<h2>Introduction</h2>\n<p><code>contest</code> is a testing application that exercises a program with configured input and then checks the output with some expected content. Simply: <code>contest</code> validates executable output given specific inputs.</p>\n<h3>Motivation</h3>\n<p>I wrote this for a class that I teach to help with grading. Given the configuration driven nature of it (how else should a testing framework/tool work?) <code>contest</code> lets me define multiple test cases for particular programs (assignments) so that not only is grading easier for me, but I can integrate assignments into a grading pipeline so that I can do as little work as possible and my students can get immediate feedback on submissions. Assignments here are usually single-file programs that are not necessarily unit-testable without adding in boilderplate and nonstandard language features. Letting students build normal programs and then verify their behavior is the goal.</p>\n<h2>Installation</h2>\n<pre>pip install contest\n</pre>\n<p>You may install from this repo, clone and simply:</p>\n<pre>python setup.py install\n</pre>\n<h2>How It Works</h2>\n<h3>Overview</h3>\n<p>YAML is the preferred choice of input for <code>contest</code> for a few reasons, but most notably for its easy to follow syntax and allowance of multiline strings (sorry JSON). <code>contest</code> consumes an input file that specifies at least one executable and then whatever additional information is provided. Check out the test skeleton below to see what can be specified; the main ones though are the input and output streams <code>stdout</code>, <code>stderr</code>, and <code>stderr</code> as well and CLI inputs <code>argv</code>. You can specify newly generated files that you expect to be created and even go further and specify custom tests (as <code>Python</code> files) that cover the things simple I/O comparisons do not. Lastly, you may also specify environment variables to be set during the execution; and you may also scrub the environment before adding custom keys. Note that scrubbing the environment may prevent your executable from running altogether! For now you are better off allowing your current environment to persist and simply overwrite what needs to be set. Environment variables specified within a test-case take precedence over what is in your current environmnt.</p>\n<h4>Test Skeleton</h4>\n<pre><span class=\"nt\">executable</span><span class=\"p\">:</span>                 <span class=\"c1\"># !!str, name of the executable to use for all tests</span>\n<span class=\"nt\">test-cases</span><span class=\"p\">:</span>                 <span class=\"c1\"># !!seq, list of all test cases</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"nt\">name</span><span class=\"p\">:</span>                 <span class=\"c1\"># !!str, name of the test</span>\n      <span class=\"nt\">scrub-env</span><span class=\"p\">:</span>            <span class=\"c1\"># !!bool, flag to remove the current environment</span>\n      <span class=\"nt\">env</span><span class=\"p\">:</span>                  <span class=\"c1\"># !!map, environment variables to set</span>\n      <span class=\"nt\">executable</span><span class=\"p\">:</span>           <span class=\"c1\"># !!str, name of the executable to use for this test case only</span>\n      <span class=\"nt\">argv</span><span class=\"p\">:</span>                 <span class=\"c1\"># !!seq, list of arguments to pass to the executable</span>\n      <span class=\"nt\">stdin</span><span class=\"p\">:</span>                <span class=\"c1\"># !!str || !!seq inputs to standard input stream</span>\n        <span class=\"c1\"># * see below</span>\n      <span class=\"nt\">returncode</span><span class=\"p\">:</span>           <span class=\"c1\"># !!int, expected return code</span>\n      <span class=\"nt\">stdout</span><span class=\"p\">:</span>               <span class=\"c1\"># !!str || !!seq || !!map, expected output in standard output stream</span>\n        <span class=\"c1\"># ** see below</span>\n      <span class=\"nt\">stderr</span><span class=\"p\">:</span>               <span class=\"c1\"># !!str || !!seq || !!map, expected output in standard error stream</span>\n        <span class=\"c1\"># ** see below</span>\n      <span class=\"nt\">ofstreams</span><span class=\"p\">:</span>            <span class=\"c1\"># !!seq, list of files to compare</span>\n            <span class=\"c1\"># *** see below</span>\n      <span class=\"nt\">extra-tests</span><span class=\"p\">:</span>          <span class=\"c1\"># !!seq, list of additional modules to load for additional tests</span>\n</pre>\n<p>* The stdin field can either be a block of text (one entry to stdin per line) or can be provided as a list.</p>\n<p>** These fields can either be text blocks, lists, or dictionaries. As a text block or list, it should be the expected output as is. As dictionaries the following fields are allowed:</p>\n<pre><span class=\"nt\">text</span><span class=\"p\">:</span>         <span class=\"c1\"># !!str, expected output as a string</span>\n<span class=\"nt\">file</span><span class=\"p\">:</span>         <span class=\"c1\"># !!str, file containing the text to compare against. useful for keeping the size of these files small if desired</span>\n<span class=\"nt\">empty</span><span class=\"p\">:</span>        <span class=\"c1\"># !!bool, flag to explicitly check if a stream is empty or nonempty. all other checks are ignored</span>\n<span class=\"nt\">start</span><span class=\"p\">:</span>        <span class=\"c1\"># !!int, 0-indexed line offset to specify where to start comparisons</span>\n<span class=\"nt\">count</span><span class=\"p\">:</span>        <span class=\"c1\"># !!int, number of lines to compare</span>\n</pre>\n<p>All fields are optional, so long as whatever is (or is not) specified makes sense.</p>\n<p>*** These fields are dictionaries and in addition to the fields specified above, the following fields are allowed:</p>\n<pre><span class=\"nt\">test-file</span><span class=\"p\">:</span>    <span class=\"c1\"># !!str, path to file generated, absolute or relative to the executable</span>\n<span class=\"nt\">exists</span><span class=\"p\">:</span>       <span class=\"c1\"># !!bool, flag to check if the file exists. all other checks are ignored</span>\n<span class=\"nt\">binary</span><span class=\"p\">:</span>       <span class=\"c1\"># !!bool, flag to indicate the file is binary</span>\n</pre>\n<p>Other than <code>test-file</code>, each field is optional, so long as whatever is (or is not) specified makes sense.</p>\n<h2>Basic Usage</h2>\n<p>Given some configuration you can run <code>contest</code> using the following:</p>\n<pre>contest &lt;path to configuration file&gt;\n</pre>\n<p>This will parse the configuration and run the specified test cass(s). In the configuration file each test case is defined under the <code>test-cases</code> node in the recipe; simply add a new section as desired. You will just need to make sure each test is named uniquely. Here is an example of a test recipe (taken from <code>examples/native_console_app</code>):</p>\n<pre><span class=\"nt\">executable</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">hello_world.exe</span>\n<span class=\"nt\">test-cases</span><span class=\"p\">:</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">standard</span>\n    <span class=\"nt\">stdin</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">Lnk2past</span>\n    <span class=\"nt\">stdout</span><span class=\"p\">:</span> <span class=\"p p-Indicator\">|</span>\n      <span class=\"no\">Hello! What is your name?</span>\n      <span class=\"no\">Welcome to the world, Lnk2past!</span>\n</pre>\n<p>Let us break down what this is specifying:</p>\n<ol>\n<li>The name of the <code>executable</code> to run is\n<pre><code>hello_world.exe\n</code></pre>\n</li>\n<li>We have a single test-case named\n<pre><code>standard\n</code></pre>\n</li>\n<li>We define the input to <code>stdin</code>, which is a single entry:\n<pre><code>Lnk2past\n</code></pre>\n</li>\n<li>We define the output to <code>stdout</code>, which is:\n<pre><code>Hello! What is your name?\nWelcome to the world, Lnk2past!\n</code></pre>\n</li>\n</ol>\n<p>This is really the equivalent of the following in some shell environment:</p>\n<pre><code>~/project&gt; ./hello_world.exe\nHello! What is your name?\nLnk2past\nWelcome to the world, Lnk2past!\n~/project&gt;\n</code></pre>\n<p>This means that when running the executable <code>hello_world.exe</code> we can expect the input in step 3 to yield the output in step 4. <code>contest</code> does this comparison for you! This allows you to write tests that would reflect actual use cases of your executable. Add as many tests as you like to cover various pathways through your program and to cover the various errors your program may encounter.</p>\n<p>Check out the other examples under the <code>examples</code> directory.</p>\n<h3>Test Directories</h3>\n<p><code>contest</code> will run each test-case in a separate directory, and will create those directories in the same directory containing the test recipe. This ensures minimal conflict between test cases. For example, if your test recipe contains test cases \"foo\" and \"bar\" and is located in \"C:\\Users\\Lnk2past\\MyProject\", then you can expact the following directory structure:</p>\n<pre><code>C:\\Users\\Lnk2past\\MyProject\\\n|---src\\...\n|---include\\...\n|---contest_recipe.yaml\n|---test_output\\\n    |---foo\\...\n    |---bar\\...\n</code></pre>\n<p>Even if your test-case produces no output on disk, the test-output directory will be created.</p>\n<h3>Filtering Tests</h3>\n<p>You can filter your test-recipes to only run a select few. This may be useful during debugging to only run your new test without needing to run the entire test recipe. You can do this via the <code>--filter</code> option. This expects some <code>regular expression</code> to filter on. e.g. we can test only those tests that are marked with a specific keyword in their names, say \"tracking\", by doing the following:</p>\n<pre><code>contest test_recipe.yaml --filter \"tracking\"\n</code></pre>\n<p>Likewise, you can exclude specific tests in order if they are problematic or if you are focusing on other tests. simply use the <code>--exclude-filters</code> or <code>--exclude</code> for short. So long as you know <code>regex</code> you can do whatever you like for filtering your tests!</p>\n\n          </div>"}, "last_serial": 6535576, "releases": {"2019.1.0": [{"comment_text": "", "digests": {"md5": "8c5f5c63287435a0df7e9f2dc3cd84a3", "sha256": "0113bbfe818db9026e6934d102f15f478834b6157d7121575b453f7c077773ec"}, "downloads": -1, "filename": "contest-2019.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "8c5f5c63287435a0df7e9f2dc3cd84a3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9092, "upload_time": "2019-08-11T03:55:40", "upload_time_iso_8601": "2019-08-11T03:55:40.427185Z", "url": "https://files.pythonhosted.org/packages/59/1b/b52f47786e3deb699b27ea6989c94b58bbcc89cc26a58445cc1e023ac44c/contest-2019.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ba6d7b8b8fde5c3dd7b62d7fe5fdf3d7", "sha256": "a5276c4bf77080ec9f528e5fe392e0868e12a12df3fe8f8efbbc1c3c8dd2a032"}, "downloads": -1, "filename": "contest-2019.1.0.tar.gz", "has_sig": false, "md5_digest": "ba6d7b8b8fde5c3dd7b62d7fe5fdf3d7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7672, "upload_time": "2019-08-11T03:55:42", "upload_time_iso_8601": "2019-08-11T03:55:42.777088Z", "url": "https://files.pythonhosted.org/packages/1d/7d/2752339a747c258e19fade2e82c8296eb3ddf8b1fad8371e269cd5c1c975/contest-2019.1.0.tar.gz", "yanked": false}], "2019.1.1": [{"comment_text": "", "digests": {"md5": "4546dadadcb671ff431e5cbef3420fc9", "sha256": "4eb049f0543f319f97b42789ea584b25675153fb30e57ee11f920ed5081cf969"}, "downloads": -1, "filename": "contest-2019.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "4546dadadcb671ff431e5cbef3420fc9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9096, "upload_time": "2019-08-11T14:41:09", "upload_time_iso_8601": "2019-08-11T14:41:09.347162Z", "url": "https://files.pythonhosted.org/packages/a0/ec/dca240523228eb12a988d9c8e5f24d012ce6e29b51cfee80ef8546e27e12/contest-2019.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "81b7cd8f3f2639e8d4ef7ba627630a7c", "sha256": "9927e9435fad323716beae409b1fa0d84a8842c64db54b51a5addf9552472dcf"}, "downloads": -1, "filename": "contest-2019.1.1.tar.gz", "has_sig": false, "md5_digest": "81b7cd8f3f2639e8d4ef7ba627630a7c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7680, "upload_time": "2019-08-11T14:41:10", "upload_time_iso_8601": "2019-08-11T14:41:10.899745Z", "url": "https://files.pythonhosted.org/packages/7a/66/621007659fe51f296b3d49a54b90e0683eca851ffd403bf6001fb3f1d893/contest-2019.1.1.tar.gz", "yanked": false}], "2019.10.2": [{"comment_text": "", "digests": {"md5": "060554c49eafb5a862fa460e7835902b", "sha256": "1a246fd9cca657afeae9224f0bec58171f48cc2019eb67dc0e786628f33da79b"}, "downloads": -1, "filename": "contest-2019.10.2-py3-none-any.whl", "has_sig": false, "md5_digest": "060554c49eafb5a862fa460e7835902b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11035, "upload_time": "2019-10-15T19:45:18", "upload_time_iso_8601": "2019-10-15T19:45:18.502881Z", "url": "https://files.pythonhosted.org/packages/ed/24/ac0293e4791850495dcecff75b1a60e4e5900ceb32ef8dbbac218fd8cfcb/contest-2019.10.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ea992743f20a20cab6351856e517dbe6", "sha256": "94854a6474aa657026204586218632cf77d0da5d5659b0fb1b5977ddf0658523"}, "downloads": -1, "filename": "contest-2019.10.2.tar.gz", "has_sig": false, "md5_digest": "ea992743f20a20cab6351856e517dbe6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9526, "upload_time": "2019-10-15T19:45:20", "upload_time_iso_8601": "2019-10-15T19:45:20.250825Z", "url": "https://files.pythonhosted.org/packages/4f/ff/a313b58aa5ea9d0a2d2d8f14f3779190bad53d1946384d43804f22c44c0e/contest-2019.10.2.tar.gz", "yanked": false}], "2019.9.0": [{"comment_text": "", "digests": {"md5": "0bb5bf0ba85e4f0c4500ad6332b2b9d3", "sha256": "667743e33b8b527c201578526424c4943c1cefa401c92fa52e43ad56e96c7707"}, "downloads": -1, "filename": "contest-2019.9.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0bb5bf0ba85e4f0c4500ad6332b2b9d3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10887, "upload_time": "2019-09-03T01:40:07", "upload_time_iso_8601": "2019-09-03T01:40:07.129362Z", "url": "https://files.pythonhosted.org/packages/76/02/6f4c05c4bd07c6833d8ab7cfcbf3acf46b6c0cd0c3f7eff34f4526f30c4e/contest-2019.9.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8d860ff317fb7962be495bd4274bca11", "sha256": "d2efdcb67bb79ee0023aa14478076489b86342ae2002785a5a0ce95451a047e8"}, "downloads": -1, "filename": "contest-2019.9.0.tar.gz", "has_sig": false, "md5_digest": "8d860ff317fb7962be495bd4274bca11", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8621, "upload_time": "2019-09-03T01:40:08", "upload_time_iso_8601": "2019-09-03T01:40:08.764215Z", "url": "https://files.pythonhosted.org/packages/47/d8/b6b0ce2f4649a21dce5258b2538f847098b043d6efdc52af636ec1e0d1c1/contest-2019.9.0.tar.gz", "yanked": false}], "2019.9.1": [{"comment_text": "", "digests": {"md5": "53c18ad1ea01a6622cc6d44418fc33e8", "sha256": "00dcf47eae3b1e4967b1529539f23465d72506a509ff59f6d1307097ffa2a933"}, "downloads": -1, "filename": "contest-2019.9.1-py3-none-any.whl", "has_sig": false, "md5_digest": "53c18ad1ea01a6622cc6d44418fc33e8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10962, "upload_time": "2019-09-03T17:45:28", "upload_time_iso_8601": "2019-09-03T17:45:28.060179Z", "url": "https://files.pythonhosted.org/packages/a9/69/7ebdb27a08ab8db42d3a89da70f99b4cafa6274d651d118a4f66e711905b/contest-2019.9.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dc02eadc3ebed11090031e0411c225c4", "sha256": "6ba728c58d87e280c2ceed2f9de51a1cc580615ae2ff2d795964f7b405aab207"}, "downloads": -1, "filename": "contest-2019.9.1.tar.gz", "has_sig": false, "md5_digest": "dc02eadc3ebed11090031e0411c225c4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8670, "upload_time": "2019-09-03T17:45:29", "upload_time_iso_8601": "2019-09-03T17:45:29.572744Z", "url": "https://files.pythonhosted.org/packages/d5/4e/029199c7a4c3e151e796e8cbfcead91887887900384078db3bffec80363a/contest-2019.9.1.tar.gz", "yanked": false}], "2019.9.2": [{"comment_text": "", "digests": {"md5": "028628dd984c0c19206c4a4db3e90396", "sha256": "d5e5f03de358aed183ca484f004c4014e4c4eb35a6a8e56adf930288c8d6738e"}, "downloads": -1, "filename": "contest-2019.9.2-py3-none-any.whl", "has_sig": false, "md5_digest": "028628dd984c0c19206c4a4db3e90396", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10963, "upload_time": "2019-09-03T18:04:17", "upload_time_iso_8601": "2019-09-03T18:04:17.357413Z", "url": "https://files.pythonhosted.org/packages/92/92/bf4a386dbe88d7040a22af0850f668b3348b0b472bd519f5b2a87da26e34/contest-2019.9.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e488595ee96d003b48ef293ce0e92215", "sha256": "65b55d87bd2f434ee028eb14df41572f43d989e44926ca242863c6987e4d73dc"}, "downloads": -1, "filename": "contest-2019.9.2.tar.gz", "has_sig": false, "md5_digest": "e488595ee96d003b48ef293ce0e92215", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9467, "upload_time": "2019-09-03T18:04:19", "upload_time_iso_8601": "2019-09-03T18:04:19.254437Z", "url": "https://files.pythonhosted.org/packages/32/b5/4e905402d4bcb169df0ff8bdbffb202936e1ae852123ac2f0a51d425daf2/contest-2019.9.2.tar.gz", "yanked": false}], "2019.9.3": [{"comment_text": "", "digests": {"md5": "f2a13544168bc03ecd59ea7eb23dc2f6", "sha256": "e85062f3cb7c72685e9b775e1d40aeb91035778a3d9b1c66a9bd15c7747a7891"}, "downloads": -1, "filename": "contest-2019.9.3-py3-none-any.whl", "has_sig": false, "md5_digest": "f2a13544168bc03ecd59ea7eb23dc2f6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10951, "upload_time": "2019-09-03T18:35:43", "upload_time_iso_8601": "2019-09-03T18:35:43.811303Z", "url": "https://files.pythonhosted.org/packages/74/6f/c5024e6b40b077d2be676c0aaadcf5bb79b4c0a118f884fd1012166acda9/contest-2019.9.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ad4dff8b7970fc846bf19d3e8fa1cb64", "sha256": "deb4c9d2a0ab83f56430013e3fdcc77354ae2cff27160b1263ff754dcad835c8"}, "downloads": -1, "filename": "contest-2019.9.3.tar.gz", "has_sig": false, "md5_digest": "ad4dff8b7970fc846bf19d3e8fa1cb64", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9448, "upload_time": "2019-09-03T18:35:45", "upload_time_iso_8601": "2019-09-03T18:35:45.004601Z", "url": "https://files.pythonhosted.org/packages/af/26/0225ef4cac38cb71885788f5b0c71a8d7ef70b4e5f36d92cfd3412c4c3c2/contest-2019.9.3.tar.gz", "yanked": false}], "2020.1.0": [{"comment_text": "", "digests": {"md5": "fee8d7637833c0b430cbd6c87ae18f66", "sha256": "b52893a3432590ee69e1cfd19398e4b3a0e6eefe86fa3a1bd05fc1a4b06e44e7"}, "downloads": -1, "filename": "contest-2020.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "fee8d7637833c0b430cbd6c87ae18f66", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12104, "upload_time": "2020-01-29T02:24:15", "upload_time_iso_8601": "2020-01-29T02:24:15.908774Z", "url": "https://files.pythonhosted.org/packages/4f/e0/9dfdf76abd09706de2b6d23ae894b2b983c4ecbd8b395e6657ab681e6442/contest-2020.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9548f8fe7549ad1e5f4769d995bc61fd", "sha256": "b02bc995bcc065f8cfd7b183ea0bffd398af653a8aa9039edd9e838ec2cccdb5"}, "downloads": -1, "filename": "contest-2020.1.0.tar.gz", "has_sig": false, "md5_digest": "9548f8fe7549ad1e5f4769d995bc61fd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13189, "upload_time": "2020-01-29T02:24:16", "upload_time_iso_8601": "2020-01-29T02:24:16.850182Z", "url": "https://files.pythonhosted.org/packages/76/6e/76f622c9cae95e0d143879730f9562987eac765411a3767125bde2e57be1/contest-2020.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "fee8d7637833c0b430cbd6c87ae18f66", "sha256": "b52893a3432590ee69e1cfd19398e4b3a0e6eefe86fa3a1bd05fc1a4b06e44e7"}, "downloads": -1, "filename": "contest-2020.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "fee8d7637833c0b430cbd6c87ae18f66", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12104, "upload_time": "2020-01-29T02:24:15", "upload_time_iso_8601": "2020-01-29T02:24:15.908774Z", "url": "https://files.pythonhosted.org/packages/4f/e0/9dfdf76abd09706de2b6d23ae894b2b983c4ecbd8b395e6657ab681e6442/contest-2020.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9548f8fe7549ad1e5f4769d995bc61fd", "sha256": "b02bc995bcc065f8cfd7b183ea0bffd398af653a8aa9039edd9e838ec2cccdb5"}, "downloads": -1, "filename": "contest-2020.1.0.tar.gz", "has_sig": false, "md5_digest": "9548f8fe7549ad1e5f4769d995bc61fd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13189, "upload_time": "2020-01-29T02:24:16", "upload_time_iso_8601": "2020-01-29T02:24:16.850182Z", "url": "https://files.pythonhosted.org/packages/76/6e/76f622c9cae95e0d143879730f9562987eac765411a3767125bde2e57be1/contest-2020.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:34 2020"}