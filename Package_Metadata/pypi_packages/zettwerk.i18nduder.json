{"info": {"author": "zettwerk GmbH", "author_email": "jk@zettwerk.com", "bugtrack_url": null, "classifiers": ["Framework :: Plone", "Programming Language :: Python"], "description": "Introduction\n============\n\nThe tasks to add translations to a plone product are more or less always the same:\n\n* Creating and registering the locales directory\n* Adding languages\n* Call i18ndude with rebuild-pot command\n* Call i18ndude with sync command\n* Run the last two commands in combination with find-untranslated a couple of times\n* And maybe directly compile the mo files\n\nzettwerk.i18nduder tries to make this a little bit easer, by wrapping the i18ndude commands and avoid the folder and path handling by calling it directly from your buildout home folder. It makes nothing, that you can't do with i18ndude directly, but in our internal usage, it made working with translations a little bit easier and faster.\n\nTo make this work there is only one assumption made, which should be common in a paster created plone product: your translation domain has the same name as your python package.\n\n\nInstallation\n============\n\nPut a i18nduder part to your buildout.cfg and define it like this::\n\n  [i18nduder]\n  recipe = zc.recipe.egg\n  eggs = ${instance:eggs}\n         zettwerk.i18nduder\n\n\nIt is important to include your instance eggs, cause duder gets the path of the package by importing it. Also note, that zettwerk.i18nduder includes a dependency to i18ndude.\n\n\nAvailable commands and usage\n============================\n\nThe generated script is called duder. To see a list of commands use the --help argument::\n\n  > ./bin/duder --help\n  > Usage: duder command -p package.name or --help for details\n  >\n  > Available commands:\n  >   create\t\tCreate the locales folder and/or add given languages\n  >   update\t\tCall rebuild-pot and sync\n  >   mo\t\tCall msgfmt to build the mo files\n  >   find\t\tFind untranslated strings (domain independent)\n  >\n  > Options:\n  >   -h, --help            show this help message and exit\n  >   -p PACKAGE, --package=PACKAGE\n  >                         Name of the package\n  >   -d DOMAIN, --domain=DOMAIN\n  >                         Name of the i18n domain. Only needed if it is different\n  >                         from the package name.\n  >   -l LANGUAGES, --languages=LANGUAGES\n  >                         List of comma-separated names of language strings.\n  >                         Only used for create command. For example: -l en,de\n\nExamples\n========\n\nThe following commands are used against a newly created, and registered in your buildout archetype product with the package name dummy.example\n\nFirst, we create the locales folder and add some languages::\n\n  > ./bin/duder create -p dummy.example -l en,de\n  > Created locales folder at: /home/joerg/Instances/Plone4/src/dummy.example/dummy/example/locales\n  > Don't forget to add this to your configure.zcml:\n  > <i18n:registerTranslations directory=\"locales\" /  >\n  > - en language added\n  > - de language added\n\nTo add another language just call it again::\n\n  > ./bin/duder create -p dummy.example -l nl\n  > Locales folder already exists at: /home/joerg/Instances/Plone4/src/dummy.example/dummy/example/locales\n  > - nl language added\n\nAfter working with dummy.exmaple some translations must be done::\n\n  > ./bin/duder update -p dummy.example\n  > nl/LC_MESSAGES/dummy.example.po: 1 added, 0 removed\n  > en/LC_MESSAGES/dummy.example.po: 1 added, 0 removed\n  > de/LC_MESSAGES/dummy.example.po: 1 added, 0 removed\n\nNote, that the pot/po headers are not manipulated with this. This must be done by hand.\n\nFind-untranslated is also available::\n\n  > ./bin/duder find -p dummy.example\n  > wrote output to: /home/joerg/Instances/Plone4/dummy.example-untranslated\n\nAnd the mo files can be compiled like this::\n\n  > ./bin/duder mo -p dummy.example\n\nThis calls \"msgfmt\", so it must be available on your system.\n\nNotes about domains\n===================\n\nIt is maybe good to now, that i18ndude can't differentiate domains by the MessageFactory. So if you run duder with the domain option will result with the msgids of the given domain (when used explicitly in your template files with i18n:domain) *and* the translations, which are created via the MessageFactory of you default domain.\n\nFeel free to contact us for suggestions and improvments.\n\nChangelog\n=========\n\n\n0.2.1 (2011-04-05)\n------------------\n\n- added full path output after update call\n\n\n0.2 (2011-04-03)\n----------------\n\n- added -d option to add explicit domain name\n- refactored commands\n- pep8 cleanups\n\n\n0.1 (2010-11-13)\n----------------\n\n- Initial release with commands: create, update, find, mo", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://zettwerk.com", "keywords": "plone,i18ndude", "license": "GPL", "maintainer": null, "maintainer_email": null, "name": "zettwerk.i18nduder", "package_url": "https://pypi.org/project/zettwerk.i18nduder/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/zettwerk.i18nduder/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://zettwerk.com"}, "release_url": "https://pypi.org/project/zettwerk.i18nduder/0.2.1/", "requires_dist": null, "requires_python": null, "summary": "A helper/wrapper script for i18ndude to easier working with translation files in a common plone environment.", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"introduction\">\n<h2>Introduction</h2>\n<p>The tasks to add translations to a plone product are more or less always the same:</p>\n<ul>\n<li>Creating and registering the locales directory</li>\n<li>Adding languages</li>\n<li>Call i18ndude with rebuild-pot command</li>\n<li>Call i18ndude with sync command</li>\n<li>Run the last two commands in combination with find-untranslated a couple of times</li>\n<li>And maybe directly compile the mo files</li>\n</ul>\n<p>zettwerk.i18nduder tries to make this a little bit easer, by wrapping the i18ndude commands and avoid the folder and path handling by calling it directly from your buildout home folder. It makes nothing, that you can\u2019t do with i18ndude directly, but in our internal usage, it made working with translations a little bit easier and faster.</p>\n<p>To make this work there is only one assumption made, which should be common in a paster created plone product: your translation domain has the same name as your python package.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Put a i18nduder part to your buildout.cfg and define it like this:</p>\n<pre>[i18nduder]\nrecipe = zc.recipe.egg\neggs = ${instance:eggs}\n       zettwerk.i18nduder\n</pre>\n<p>It is important to include your instance eggs, cause duder gets the path of the package by importing it. Also note, that zettwerk.i18nduder includes a dependency to i18ndude.</p>\n</div>\n<div id=\"available-commands-and-usage\">\n<h2>Available commands and usage</h2>\n<p>The generated script is called duder. To see a list of commands use the \u2013help argument:</p>\n<pre>&gt; ./bin/duder --help\n&gt; Usage: duder command -p package.name or --help for details\n&gt;\n&gt; Available commands:\n&gt;   create            Create the locales folder and/or add given languages\n&gt;   update            Call rebuild-pot and sync\n&gt;   mo                Call msgfmt to build the mo files\n&gt;   find              Find untranslated strings (domain independent)\n&gt;\n&gt; Options:\n&gt;   -h, --help            show this help message and exit\n&gt;   -p PACKAGE, --package=PACKAGE\n&gt;                         Name of the package\n&gt;   -d DOMAIN, --domain=DOMAIN\n&gt;                         Name of the i18n domain. Only needed if it is different\n&gt;                         from the package name.\n&gt;   -l LANGUAGES, --languages=LANGUAGES\n&gt;                         List of comma-separated names of language strings.\n&gt;                         Only used for create command. For example: -l en,de\n</pre>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<p>The following commands are used against a newly created, and registered in your buildout archetype product with the package name dummy.example</p>\n<p>First, we create the locales folder and add some languages:</p>\n<pre>&gt; ./bin/duder create -p dummy.example -l en,de\n&gt; Created locales folder at: /home/joerg/Instances/Plone4/src/dummy.example/dummy/example/locales\n&gt; Don't forget to add this to your configure.zcml:\n&gt; &lt;i18n:registerTranslations directory=\"locales\" /  &gt;\n&gt; - en language added\n&gt; - de language added\n</pre>\n<p>To add another language just call it again:</p>\n<pre>&gt; ./bin/duder create -p dummy.example -l nl\n&gt; Locales folder already exists at: /home/joerg/Instances/Plone4/src/dummy.example/dummy/example/locales\n&gt; - nl language added\n</pre>\n<p>After working with dummy.exmaple some translations must be done:</p>\n<pre>&gt; ./bin/duder update -p dummy.example\n&gt; nl/LC_MESSAGES/dummy.example.po: 1 added, 0 removed\n&gt; en/LC_MESSAGES/dummy.example.po: 1 added, 0 removed\n&gt; de/LC_MESSAGES/dummy.example.po: 1 added, 0 removed\n</pre>\n<p>Note, that the pot/po headers are not manipulated with this. This must be done by hand.</p>\n<p>Find-untranslated is also available:</p>\n<pre>&gt; ./bin/duder find -p dummy.example\n&gt; wrote output to: /home/joerg/Instances/Plone4/dummy.example-untranslated\n</pre>\n<p>And the mo files can be compiled like this:</p>\n<pre>&gt; ./bin/duder mo -p dummy.example\n</pre>\n<p>This calls \u201cmsgfmt\u201d, so it must be available on your system.</p>\n</div>\n<div id=\"notes-about-domains\">\n<h2>Notes about domains</h2>\n<p>It is maybe good to now, that i18ndude can\u2019t differentiate domains by the MessageFactory. So if you run duder with the domain option will result with the msgids of the given domain (when used explicitly in your template files with i18n:domain) <em>and</em> the translations, which are created via the MessageFactory of you default domain.</p>\n<p>Feel free to contact us for suggestions and improvments.</p>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<div id=\"id1\">\n<h3>0.2.1 (2011-04-05)</h3>\n<ul>\n<li>added full path output after update call</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>0.2 (2011-04-03)</h3>\n<ul>\n<li>added -d option to add explicit domain name</li>\n<li>refactored commands</li>\n<li>pep8 cleanups</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>0.1 (2010-11-13)</h3>\n<ul>\n<li>Initial release with commands: create, update, find, mo</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1966520, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "3961cec739a5214ca106b1e9a2c7c1d1", "sha256": "e39dd409e7d3cdd837a170c6a1a57820b616922eb99bd3d02cda261c6decfa5e"}, "downloads": -1, "filename": "zettwerk.i18nduder-0.1.tar.gz", "has_sig": false, "md5_digest": "3961cec739a5214ca106b1e9a2c7c1d1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4437, "upload_time": "2010-11-13T09:27:44", "upload_time_iso_8601": "2010-11-13T09:27:44.933483Z", "url": "https://files.pythonhosted.org/packages/ef/7e/deddeafa37ef5a5e6ee493bb0f23d041a354c4514d0ec388a5df2349dc0a/zettwerk.i18nduder-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "22ee7348f515acb2b1ab2f8906611497", "sha256": "84097d65c60feb4c5ddece68616d8c227a3fd5e790f15cc7a0a814fb11db1933"}, "downloads": -1, "filename": "zettwerk.i18nduder-0.2.tar.gz", "has_sig": false, "md5_digest": "22ee7348f515acb2b1ab2f8906611497", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5293, "upload_time": "2011-04-03T09:33:23", "upload_time_iso_8601": "2011-04-03T09:33:23.476672Z", "url": "https://files.pythonhosted.org/packages/38/a5/023b0199e9b30c8e63edaf3f16a1bb9d1e014fceaf8d1e8bff9c4933aa2b/zettwerk.i18nduder-0.2.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "5e3d0fa8e46270f83925b3d2d7fa1761", "sha256": "14f147d88fb1acffbbe61b45d3af4c5ed858474e723cc64f931e6a096b805abd"}, "downloads": -1, "filename": "zettwerk.i18nduder-0.2.1.tar.gz", "has_sig": false, "md5_digest": "5e3d0fa8e46270f83925b3d2d7fa1761", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5374, "upload_time": "2011-04-05T14:53:40", "upload_time_iso_8601": "2011-04-05T14:53:40.011249Z", "url": "https://files.pythonhosted.org/packages/6a/5c/49c54ce4a429075bb90c59a2216ae760510dbfcf05f52dccf9cd7c094ced/zettwerk.i18nduder-0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5e3d0fa8e46270f83925b3d2d7fa1761", "sha256": "14f147d88fb1acffbbe61b45d3af4c5ed858474e723cc64f931e6a096b805abd"}, "downloads": -1, "filename": "zettwerk.i18nduder-0.2.1.tar.gz", "has_sig": false, "md5_digest": "5e3d0fa8e46270f83925b3d2d7fa1761", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5374, "upload_time": "2011-04-05T14:53:40", "upload_time_iso_8601": "2011-04-05T14:53:40.011249Z", "url": "https://files.pythonhosted.org/packages/6a/5c/49c54ce4a429075bb90c59a2216ae760510dbfcf05f52dccf9cd7c094ced/zettwerk.i18nduder-0.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:17:17 2020"}