{"info": {"author": "MEADez", "author_email": "m3adez@gmail.com", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6", "Topic :: Internet :: WWW/HTTP", "Topic :: Internet :: WWW/HTTP :: Dynamic Content"], "description": "============================\nBTC Sign Manager\n============================\n\nAn application for cryptographic signing of models, files and etc.\n\nDetailed documentation is in the \"docs\" directory.\n\nQuick start\n-----------\n\n1. Add sign manager app to project app list in project settings::\n\n    INSTALLED_APPS = [\n        ...\n        'sign_manager'\n    ]\n\n\n2. Setup simple wizard app (see repo README).\n\n\n3. Add tray template to base template::\n\n    {% include 'sign_manager/tray.html' with tray_id='main_sign_manager' only %}\n\n\n4. Add static files (css and js)::\n\n    <script src=\"{% static 'sign_manager/js/tray.js' %}\"></script>\n    <script src=\"{% static 'sign_manager/js/api.js' %}\"></script>\n\n    <link rel=\"stylesheet\" href=\"{% static 'sign_manager/css/tray.css' %}\">\n\n\n5. Add classes for sign modal::\n\n    class CryptoProWizardStepMixin(SignManagerMixin, WizardModalStepMixin):\n        \"\"\"\n        Common class for CryptoPro modal\n        \"\"\"\n\n        template_name = 'simple_wizard/crypto_pro_sign_modal.html'\n        cache_step = False\n        buttons = [\n            BaseWizardButton(\n                load_step='crypto_pro_step',\n                method='post',\n                always_fetch=True,\n                title='Apply',\n                css_classes=['btn btn-primary', 'js-crypto_pro_start_sign']\n            )\n        ]\n\n        def get_buttons(self) -> list:\n            buttons = super().get_buttons()\n            crypto_pro_debug = getattr(settings, 'CRYPTO_PRO_DEBUG', False)\n            if crypto_pro_debug and len(buttons) == 1:\n                buttons.append(\n                    BaseWizardButton(\n                        load_step='crypto_pro_step',\n                        method='post',\n                        always_fetch=True,\n                        title='Skip sign',\n                        css_classes=['btn btn-primary', 'js-crypto_pro_skip_sign']\n                    )\n                )\n            return buttons\n\n        def set_sign_initial_data(self) -> List[BaseSignatureObject]:\n            # set initial data for create data-formset\n            test_model = TestModel.objects.filter(pk=self.kwargs.get('pk')).first()\n            test_model.set_status()  # status set must be without commit\n            initial_data = [XMLSignatureObject(object_for_sign=test_model)]\n            return initial_data\n\n        def process_view(self) -> None:\n            # make all operations in this method\n            pass\n\n\n    class CryptoProWizardView(WizardBaseView):\n        \"\"\"\n        View for creating wizard with CryptoPro sign\n        \"\"\"\n\n        management_url_pattern = 'test_app:wizard_management'\n        common_title = 'CryptoPro'\n\n        ...  # see simple wizard README\n\n        class ThirdStep(CryptoProWizardStepMixin, TemplateView):\n            \"\"\"\n            CryptoPro modal\n            \"\"\"\n\n            unique_name = 'crypto_pro_step'\n\n            def restore_objects_from_cache(self) -> None:\n                # you can restore cached objects before sign save (in some cases it\n                # necessary because some data can be changed on result save).\n                # put some code here for restoring models states.\n                # you can use built-in CacheManager method - \"deserialize_object()\" -\n                # just call \"save()\" for proxy-object (see method).\n\n                pass\n\n\n6. Prepare your model (add \"AbstractSignManager\" in superclasses). You can create custom \"AbstractSignManager\" through\ndefining variable \"SIGN_MANAGER_ABSTRACT_MODEL_CLASS\" in project settings::\n\n    ...\n\n    AbstractSignManager = get_sign_manager_abstract_model_class()\n\n    ...\n\n    class TestModel(AbstractSignManager):\n\n        ...\n\n        def serialize_for_sign(self) -> Union[bytes, str]:\n            # change serialization if needed\n            xml = super().serialize_for_sign()\n            return base64.b64encode(xml.encode()).decode('utf-8')\n\n        def get_stages_number(self) -> int:\n            # setup chucks total number (here you can check file size if you want\n            # sign file and etc. and recognize optimal stages number)\n            # in this example we will sign just a string in base64 encoding\n            # 10 steps - 10 requests to the server to receive necessary data\n            return 10\n\n        def get_data_chunk(self, stage: int, stages_num: int) -> str:\n            # here you can provide logic for chunks creation.\n            # in this example we use built-in method based on slicing for small simple strings.\n            # for big files use file.read(bytes_to_read) or another approach.\n            # stage - current stage of stages_num - this info can help in data-chucks creation\n            return self.get_data_chunk_for_simple_string(stage, stages_num).\n\n\n7. Setup Queue handler::\n\n    class SignQueue(SignManagerQueueView):\n        \"\"\"\n        Handler-view for sending data for sign to js script\n        \"\"\"\n\n        pass\n\n\n8. Setup queue-handler url and wizard url::\n\n    app_name = 'test_app'\n\n    urlpatterns = [\n        ...\n\n        path('wizard-management/<step_to_load>/test_model/<int:pk>/', CryptoProWizardView.as_view(),\n            name='wizard_management'),\n        path('sign-queue/', SignQueue.as_view(), name='sign_queue')\n    ]\n\n\n9. Initialize js handlers (wizard and signer)::\n\n    const django_modal_wizard = new DjangoModalWizard(\n        '#wizard-modal',\n        '.js-wizard_modal_content',\n        '.js-load_wizard',\n        '.js-close_wizard'\n    );\n    django_modal_wizard.initSignals();\n\n    const sign_manager = new BTCCryptoProClientManager();\n    sign_manager.ask_url = '/test-app/sign-queue/';\n    sign_manager.form_elements_container_selector = '.js-wizard_modal_content';\n    sign_manager.initSignals();\n\n    # fill certificates choices on crypto pro modal load\n    $(document).on('django-wizard:step-loaded', function (event, step_to_load, method_name, data) {\n        if (step_to_load === 'crypto_pro_step') {\n            sign_manager.fillCertificatesSelect();\n            event.preventDefault();\n        }\n    });\n\n    # customize handler if needed - all attributes can be redefined\n\n\n10. Migrate::\n\n    ./manage.py migrate\n\n\n11. For customizing Queue logic you can override \"CacheManager\" class by defining variable\n\"SIGN_MANAGER_CACHE_MANAGER_CLASS\" in project settings::\n\n    class CustomCacheManager(CacheManager):\n        \"\"\"\n        Custom class for queue control (big files serialization and etc.)\n        \"\"\"\n        ...\n\n    # in project settings:\n    ...\n\n    SIGN_MANAGER_CACHE_MANAGER_CLASS = 'test_app.CustomCacheManager'\n\n\nExample\n________\n\n.. image:: https://user-images.githubusercontent.com/33987296/71226909-8fe60a00-22ee-11ea-8c1a-d73b6a91a022.jpg", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/MEADez/btc-sign-manager", "keywords": "", "license": "BSD License", "maintainer": "", "maintainer_email": "", "name": "btc-sign-manager", "package_url": "https://pypi.org/project/btc-sign-manager/", "platform": "", "project_url": "https://pypi.org/project/btc-sign-manager/", "project_urls": {"Homepage": "https://github.com/MEADez/btc-sign-manager"}, "release_url": "https://pypi.org/project/btc-sign-manager/0.8/", "requires_dist": null, "requires_python": "", "summary": "An application for cryptographic signing of models, files and etc.", "version": "0.8", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>An application for cryptographic signing of models, files and etc.</p>\n<p>Detailed documentation is in the \u201cdocs\u201d directory.</p>\n<div id=\"quick-start\">\n<h2>Quick start</h2>\n<ol>\n<li><p>Add sign manager app to project app list in project settings:</p>\n<pre>INSTALLED_APPS = [\n    ...\n    'sign_manager'\n]\n</pre>\n</li>\n<li><p>Setup simple wizard app (see repo README).</p>\n</li>\n<li><p>Add tray template to base template:</p>\n<pre>{% include 'sign_manager/tray.html' with tray_id='main_sign_manager' only %}\n</pre>\n</li>\n<li><p>Add static files (css and js):</p>\n<pre>&lt;script src=\"{% static 'sign_manager/js/tray.js' %}\"&gt;&lt;/script&gt;\n&lt;script src=\"{% static 'sign_manager/js/api.js' %}\"&gt;&lt;/script&gt;\n\n&lt;link rel=\"stylesheet\" href=\"{% static 'sign_manager/css/tray.css' %}\"&gt;\n</pre>\n</li>\n<li><p>Add classes for sign modal:</p>\n<pre>class CryptoProWizardStepMixin(SignManagerMixin, WizardModalStepMixin):\n    \"\"\"\n    Common class for CryptoPro modal\n    \"\"\"\n\n    template_name = 'simple_wizard/crypto_pro_sign_modal.html'\n    cache_step = False\n    buttons = [\n        BaseWizardButton(\n            load_step='crypto_pro_step',\n            method='post',\n            always_fetch=True,\n            title='Apply',\n            css_classes=['btn btn-primary', 'js-crypto_pro_start_sign']\n        )\n    ]\n\n    def get_buttons(self) -&gt; list:\n        buttons = super().get_buttons()\n        crypto_pro_debug = getattr(settings, 'CRYPTO_PRO_DEBUG', False)\n        if crypto_pro_debug and len(buttons) == 1:\n            buttons.append(\n                BaseWizardButton(\n                    load_step='crypto_pro_step',\n                    method='post',\n                    always_fetch=True,\n                    title='Skip sign',\n                    css_classes=['btn btn-primary', 'js-crypto_pro_skip_sign']\n                )\n            )\n        return buttons\n\n    def set_sign_initial_data(self) -&gt; List[BaseSignatureObject]:\n        # set initial data for create data-formset\n        test_model = TestModel.objects.filter(pk=self.kwargs.get('pk')).first()\n        test_model.set_status()  # status set must be without commit\n        initial_data = [XMLSignatureObject(object_for_sign=test_model)]\n        return initial_data\n\n    def process_view(self) -&gt; None:\n        # make all operations in this method\n        pass\n\n\nclass CryptoProWizardView(WizardBaseView):\n    \"\"\"\n    View for creating wizard with CryptoPro sign\n    \"\"\"\n\n    management_url_pattern = 'test_app:wizard_management'\n    common_title = 'CryptoPro'\n\n    ...  # see simple wizard README\n\n    class ThirdStep(CryptoProWizardStepMixin, TemplateView):\n        \"\"\"\n        CryptoPro modal\n        \"\"\"\n\n        unique_name = 'crypto_pro_step'\n\n        def restore_objects_from_cache(self) -&gt; None:\n            # you can restore cached objects before sign save (in some cases it\n            # necessary because some data can be changed on result save).\n            # put some code here for restoring models states.\n            # you can use built-in CacheManager method - \"deserialize_object()\" -\n            # just call \"save()\" for proxy-object (see method).\n\n            pass\n</pre>\n</li>\n</ol>\n<p>6. Prepare your model (add \u201cAbstractSignManager\u201d in superclasses). You can create custom \u201cAbstractSignManager\u201d through\ndefining variable \u201cSIGN_MANAGER_ABSTRACT_MODEL_CLASS\u201d in project settings:</p>\n<pre>...\n\nAbstractSignManager = get_sign_manager_abstract_model_class()\n\n...\n\nclass TestModel(AbstractSignManager):\n\n    ...\n\n    def serialize_for_sign(self) -&gt; Union[bytes, str]:\n        # change serialization if needed\n        xml = super().serialize_for_sign()\n        return base64.b64encode(xml.encode()).decode('utf-8')\n\n    def get_stages_number(self) -&gt; int:\n        # setup chucks total number (here you can check file size if you want\n        # sign file and etc. and recognize optimal stages number)\n        # in this example we will sign just a string in base64 encoding\n        # 10 steps - 10 requests to the server to receive necessary data\n        return 10\n\n    def get_data_chunk(self, stage: int, stages_num: int) -&gt; str:\n        # here you can provide logic for chunks creation.\n        # in this example we use built-in method based on slicing for small simple strings.\n        # for big files use file.read(bytes_to_read) or another approach.\n        # stage - current stage of stages_num - this info can help in data-chucks creation\n        return self.get_data_chunk_for_simple_string(stage, stages_num).\n</pre>\n<ol>\n<li><p>Setup Queue handler:</p>\n<pre>class SignQueue(SignManagerQueueView):\n    \"\"\"\n    Handler-view for sending data for sign to js script\n    \"\"\"\n\n    pass\n</pre>\n</li>\n<li><p>Setup queue-handler url and wizard url:</p>\n<pre>app_name = 'test_app'\n\nurlpatterns = [\n    ...\n\n    path('wizard-management/&lt;step_to_load&gt;/test_model/&lt;int:pk&gt;/', CryptoProWizardView.as_view(),\n        name='wizard_management'),\n    path('sign-queue/', SignQueue.as_view(), name='sign_queue')\n]\n</pre>\n</li>\n<li><p>Initialize js handlers (wizard and signer):</p>\n<pre>const django_modal_wizard = new DjangoModalWizard(\n    '#wizard-modal',\n    '.js-wizard_modal_content',\n    '.js-load_wizard',\n    '.js-close_wizard'\n);\ndjango_modal_wizard.initSignals();\n\nconst sign_manager = new BTCCryptoProClientManager();\nsign_manager.ask_url = '/test-app/sign-queue/';\nsign_manager.form_elements_container_selector = '.js-wizard_modal_content';\nsign_manager.initSignals();\n\n# fill certificates choices on crypto pro modal load\n$(document).on('django-wizard:step-loaded', function (event, step_to_load, method_name, data) {\n    if (step_to_load === 'crypto_pro_step') {\n        sign_manager.fillCertificatesSelect();\n        event.preventDefault();\n    }\n});\n\n# customize handler if needed - all attributes can be redefined\n</pre>\n</li>\n<li><p>Migrate:</p>\n<pre>./manage.py migrate\n</pre>\n</li>\n</ol>\n<p>11. For customizing Queue logic you can override \u201cCacheManager\u201d class by defining variable\n\u201cSIGN_MANAGER_CACHE_MANAGER_CLASS\u201d in project settings:</p>\n<pre>class CustomCacheManager(CacheManager):\n    \"\"\"\n    Custom class for queue control (big files serialization and etc.)\n    \"\"\"\n    ...\n\n# in project settings:\n...\n\nSIGN_MANAGER_CACHE_MANAGER_CLASS = 'test_app.CustomCacheManager'\n</pre>\n<div id=\"example\">\n<h3>Example</h3>\n<img alt=\"https://user-images.githubusercontent.com/33987296/71226909-8fe60a00-22ee-11ea-8c1a-d73b6a91a022.jpg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/824a090ee9149f19c2053799293fa4430e44be65/68747470733a2f2f757365722d696d616765732e67697468756275736572636f6e74656e742e636f6d2f33333938373239362f37313232363930392d38666536306130302d323265652d313165612d386331612d6437336236613931613032322e6a7067\">\n</div>\n</div>\n\n          </div>"}, "last_serial": 7059398, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "ccbf01fb8db62b73946052bfb228a147", "sha256": "bed11c99fa4a2530d2c7292220cd34e4c9b4c794e1eef7381f85e098a59df1d9"}, "downloads": -1, "filename": "btc-sign-manager-0.1.tar.gz", "has_sig": false, "md5_digest": "ccbf01fb8db62b73946052bfb228a147", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21240, "upload_time": "2019-12-24T10:56:52", "upload_time_iso_8601": "2019-12-24T10:56:52.423890Z", "url": "https://files.pythonhosted.org/packages/8f/16/967dd8a98a6a439667f580df45938a60e6d7426647086855d038b55df161/btc-sign-manager-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "72155dac8e9c57bfe7cd567a99f1a38c", "sha256": "e2344776e9439668046fd7fa5ce289a7f0842b8e5495cc62d704d23e356b926c"}, "downloads": -1, "filename": "btc-sign-manager-0.2.tar.gz", "has_sig": false, "md5_digest": "72155dac8e9c57bfe7cd567a99f1a38c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21437, "upload_time": "2020-01-14T03:03:49", "upload_time_iso_8601": "2020-01-14T03:03:49.786777Z", "url": "https://files.pythonhosted.org/packages/7f/e4/82146d244f2c83e217a11f927081d1e20e6ac8aa8b79858b367a5424697a/btc-sign-manager-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "bd1f4e88026bce6303958b700132516b", "sha256": "d9f2bbd4f9a80aee3ce9eac687d4db9d1f8351edea23a40c1dfcdeecbfdfc9d1"}, "downloads": -1, "filename": "btc-sign-manager-0.3.tar.gz", "has_sig": false, "md5_digest": "bd1f4e88026bce6303958b700132516b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22888, "upload_time": "2020-01-15T09:17:07", "upload_time_iso_8601": "2020-01-15T09:17:07.363121Z", "url": "https://files.pythonhosted.org/packages/23/69/5628f2b011869000a09b6cfaabcad2a42e511d2453ce31dcf22ab4294ebe/btc-sign-manager-0.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "0226eb73e0694bac45c54917c6eb6d4a", "sha256": "87b26f1e56c105c11d08bfbbe18148b2e7aba3768e71f0e5221c9ade58429eba"}, "downloads": -1, "filename": "btc-sign-manager-0.4.tar.gz", "has_sig": false, "md5_digest": "0226eb73e0694bac45c54917c6eb6d4a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22921, "upload_time": "2020-01-15T10:12:34", "upload_time_iso_8601": "2020-01-15T10:12:34.551681Z", "url": "https://files.pythonhosted.org/packages/45/0d/490e57edcc20e2d989a2c06121a96ab32212637ac4328867bb7a717790ab/btc-sign-manager-0.4.tar.gz", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "3edd261ce837aeaef408c006952e462c", "sha256": "3f4d2a1c4a5ff55402576435c25d93cc298abd3fd4d290e8553a8be20086f71c"}, "downloads": -1, "filename": "btc-sign-manager-0.5.tar.gz", "has_sig": false, "md5_digest": "3edd261ce837aeaef408c006952e462c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22919, "upload_time": "2020-01-15T13:08:31", "upload_time_iso_8601": "2020-01-15T13:08:31.627396Z", "url": "https://files.pythonhosted.org/packages/00/12/2e792200475b53dea1f99cb73728f08df2444d632e4090eba5752d66ec8f/btc-sign-manager-0.5.tar.gz", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "9fda6b63d497ee6ee08e25a2c5fa8aa0", "sha256": "3f3fb714ce6ac2da1f638ff1817e5e61ce6983f3beb90f902554f238a9a29732"}, "downloads": -1, "filename": "btc-sign-manager-0.6.tar.gz", "has_sig": false, "md5_digest": "9fda6b63d497ee6ee08e25a2c5fa8aa0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23122, "upload_time": "2020-01-16T15:40:47", "upload_time_iso_8601": "2020-01-16T15:40:47.538324Z", "url": "https://files.pythonhosted.org/packages/cf/26/cc15558296050f0bceb84b7d2735216222c4d51f31a71d51246400b2825d/btc-sign-manager-0.6.tar.gz", "yanked": false}], "0.7": [{"comment_text": "", "digests": {"md5": "afbb51a363ffb44bd7ff57e326f245c0", "sha256": "85418557d127f2e564e0a0799fa183d2f0448b812ac0e4a4d255edd36a9d9f2e"}, "downloads": -1, "filename": "btc-sign-manager-0.7.tar.gz", "has_sig": false, "md5_digest": "afbb51a363ffb44bd7ff57e326f245c0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24017, "upload_time": "2020-04-16T10:32:51", "upload_time_iso_8601": "2020-04-16T10:32:51.092402Z", "url": "https://files.pythonhosted.org/packages/fd/8d/c186a191aeeb6cc71b7a2e0f172dd7dd4da882acc2e8da56c00cf4553b21/btc-sign-manager-0.7.tar.gz", "yanked": false}], "0.8": [{"comment_text": "", "digests": {"md5": "4b127abc35525660acfd4b01cf4d48f1", "sha256": "6f2964d90ec5549c8bb90e4893179f3c0cc4f108c6d8993b0e118b21140f48c9"}, "downloads": -1, "filename": "btc-sign-manager-0.8.tar.gz", "has_sig": false, "md5_digest": "4b127abc35525660acfd4b01cf4d48f1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24023, "upload_time": "2020-04-20T11:32:04", "upload_time_iso_8601": "2020-04-20T11:32:04.951699Z", "url": "https://files.pythonhosted.org/packages/4b/e7/22527cb2c613c74214f3a1abe98f7dfc161c39bbe745d62394eea12fd245/btc-sign-manager-0.8.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4b127abc35525660acfd4b01cf4d48f1", "sha256": "6f2964d90ec5549c8bb90e4893179f3c0cc4f108c6d8993b0e118b21140f48c9"}, "downloads": -1, "filename": "btc-sign-manager-0.8.tar.gz", "has_sig": false, "md5_digest": "4b127abc35525660acfd4b01cf4d48f1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24023, "upload_time": "2020-04-20T11:32:04", "upload_time_iso_8601": "2020-04-20T11:32:04.951699Z", "url": "https://files.pythonhosted.org/packages/4b/e7/22527cb2c613c74214f3a1abe98f7dfc161c39bbe745d62394eea12fd245/btc-sign-manager-0.8.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:36:10 2020"}