{"info": {"author": "Henrik Str\u00f6tgen", "author_email": "hstroetgen@synapticon.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: Microsoft :: Windows :: Windows 7", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3", "Topic :: System :: Hardware :: Hardware Drivers"], "description": "SOMANET Test Suite - Controller for EA PSUs\n========================================\n\nLinux\n=====\n\nRecommended step\n----------------\nMove ``99-ea-psu.rules`` to ``/etc/udev/rules.d/`` and restart ``udev`` with ``sudo service udev restart``.\nThis rule will create devices, that look like ``ea-ps-20xx-xx-0`` or ``ea-ps-23xx-xx-0`` with an increasing counter for every\nconnected device.\n\nBefore start\n------------\nTo use ``ttyACMx`` devices without sudo, add your user to the group ``dialout``:\n\n``sudo adduser your_user dialout``\n\n\nWindows\n=======\nWhen connecting the power supply, Windows will install automatically the correct drivers.\n\nInstalling module\n-----------------\n``pip3 install ea_psu_controller``\n\nImport module\n-------------\n``import ea_psu_controller``\n\nCreate object\n-------------\nTo connect to a particular PSU, you can call\n\nLinux: ``psu = PsuEA(comport='ttyACM0')``\n\nWindows: ``psu = PsuEA(comport='COM1')`` or as com port description: ``psu = PsuEA(comport='PS 2000 B')``\n\nIf you added the device rule and you connected only one PSU, there is no need to provide a device name:\n\n``psu = PsuEA()``\n\nAlso possible is:\n\n``psu = PsuEA(comport='ea-ps-20xx-xx-0')``\n\n| If there is more then one PSU connected to the host, the script will connect to the first device found.\n| It is also possible to take the S/N written on the back of the PSU and call (dev rule on Linux needed):\n\n``psu = PsuEA(sn='0123456789')``\n\nor to use the device designator (dev rule on Linux needed):\n\n``psu = PsuEA(desi='PS 2142-10B')``\n\n\nDis/connect to power supply for controlling\n---------------------------\n``psu.remote_on()``\n\n``psu.remote_off()``\n\nFor multi output devices most functions provide a additional output argument:\n\n``psu.remote_on(output_num=0)`` or ``psu.remote_on(output_num=1)``\n\n| It's only necessary to call ``remote_on()``, when you want to control the PSU.\n| If you just want to read device information, you don't need to.\n\nPower on and off output\n-----------------------\n``psu.output_on()``\n\n``psu.output_off()``\n\nor\n\n``psu.output_on(output_num=1)``\n\n``psu.output_off(output_num=1)``\n\nSet parameters\n--------------\nArguments can be int or float.\n\n``psu.set_voltage(24)``\n\n``psu.set_current(0.5)``\n\n``psu.set_ovp(30)``\n\n``psu.set_ocp(8)``\n\nThe script will always set the maximum possible values in dependency of the nominal power.\n\n| For example:\n| Nominal power = 160 W\n| If you set now the voltage to 40 V, it's not possible to set a higher current than 4 A (=160W/40V).\n| If you want to set a higher current, you need to decrease first the voltage.\n\n\nGet parameters\n--------------\nReturn argument: float.\n\n``psu.get_voltage()``\n\n``psu.get_current()``\n\nMaximum sampling rate is ~10 Hz.\n\nGet status\n--------------\nReturn argument: dictionary\n\n``psu.get_status()``\n\nDict contains following keys:\n\n- 'remote on'\n- 'output on'\n- 'controller state' (CV=0, CC=2)\n- 'tracking active'\n- 'OVP activ'\n- 'OCP activ'\n- 'OPP activ'\n- 'OTP activ'\n\nGet device description\n--------------\nReturn argument: tuple (name, SN)\n\n``psu.get_device_description()``\n\n\nClose connection\n--------------\nTo close the connection, call:\n\n``psu.close(remote=False, output=False)``\n\nSet both arguments to True to turn off the output and remote control\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/synapticon/somanet_test_suite/tree/master/psu", "keywords": "power supply unit,psu", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "ea-psu-controller", "package_url": "https://pypi.org/project/ea-psu-controller/", "platform": "", "project_url": "https://pypi.org/project/ea-psu-controller/", "project_urls": {"Homepage": "https://github.com/synapticon/somanet_test_suite/tree/master/psu"}, "release_url": "https://pypi.org/project/ea-psu-controller/1.1.0/", "requires_dist": ["pyserial (>=3.4)"], "requires_python": "", "summary": "Controller for Elektro-Automatik power supplies", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>SOMANET Test Suite - Controller for EA PSUs</h1>\n<h1>Linux</h1>\n<h2>Recommended step</h2>\n<p>Move <code>99-ea-psu.rules</code> to <code>/etc/udev/rules.d/</code> and restart <code>udev</code> with <code>sudo service udev restart</code>.\nThis rule will create devices, that look like <code>ea-ps-20xx-xx-0</code> or <code>ea-ps-23xx-xx-0</code> with an increasing counter for every\nconnected device.</p>\n<h2>Before start</h2>\n<p>To use <code>ttyACMx</code> devices without sudo, add your user to the group <code>dialout</code>:</p>\n<p><code>sudo adduser your_user dialout</code></p>\n<h1>Windows</h1>\n<p>When connecting the power supply, Windows will install automatically the correct drivers.</p>\n<h2>Installing module</h2>\n<p><code>pip3 install ea_psu_controller</code></p>\n<h2>Import module</h2>\n<p><code>import ea_psu_controller</code></p>\n<h2>Create object</h2>\n<p>To connect to a particular PSU, you can call</p>\n<p>Linux: <code>psu = PsuEA(comport='ttyACM0')</code></p>\n<p>Windows: <code>psu = PsuEA(comport='COM1')</code> or as com port description: <code>psu = PsuEA(comport='PS 2000 B')</code></p>\n<p>If you added the device rule and you connected only one PSU, there is no need to provide a device name:</p>\n<p><code>psu = PsuEA()</code></p>\n<p>Also possible is:</p>\n<p><code>psu = PsuEA(comport='ea-ps-20xx-xx-0')</code></p>\n<p>| If there is more then one PSU connected to the host, the script will connect to the first device found.\n| It is also possible to take the S/N written on the back of the PSU and call (dev rule on Linux needed):</p>\n<p><code>psu = PsuEA(sn='0123456789')</code></p>\n<p>or to use the device designator (dev rule on Linux needed):</p>\n<p><code>psu = PsuEA(desi='PS 2142-10B')</code></p>\n<h2>Dis/connect to power supply for controlling</h2>\n<p><code>psu.remote_on()</code></p>\n<p><code>psu.remote_off()</code></p>\n<p>For multi output devices most functions provide a additional output argument:</p>\n<p><code>psu.remote_on(output_num=0)</code> or <code>psu.remote_on(output_num=1)</code></p>\n<p>| It's only necessary to call <code>remote_on()</code>, when you want to control the PSU.\n| If you just want to read device information, you don't need to.</p>\n<h2>Power on and off output</h2>\n<p><code>psu.output_on()</code></p>\n<p><code>psu.output_off()</code></p>\n<p>or</p>\n<p><code>psu.output_on(output_num=1)</code></p>\n<p><code>psu.output_off(output_num=1)</code></p>\n<h2>Set parameters</h2>\n<p>Arguments can be int or float.</p>\n<p><code>psu.set_voltage(24)</code></p>\n<p><code>psu.set_current(0.5)</code></p>\n<p><code>psu.set_ovp(30)</code></p>\n<p><code>psu.set_ocp(8)</code></p>\n<p>The script will always set the maximum possible values in dependency of the nominal power.</p>\n<p>| For example:\n| Nominal power = 160 W\n| If you set now the voltage to 40 V, it's not possible to set a higher current than 4 A (=160W/40V).\n| If you want to set a higher current, you need to decrease first the voltage.</p>\n<h2>Get parameters</h2>\n<p>Return argument: float.</p>\n<p><code>psu.get_voltage()</code></p>\n<p><code>psu.get_current()</code></p>\n<p>Maximum sampling rate is ~10 Hz.</p>\n<h2>Get status</h2>\n<p>Return argument: dictionary</p>\n<p><code>psu.get_status()</code></p>\n<p>Dict contains following keys:</p>\n<ul>\n<li>'remote on'</li>\n<li>'output on'</li>\n<li>'controller state' (CV=0, CC=2)</li>\n<li>'tracking active'</li>\n<li>'OVP activ'</li>\n<li>'OCP activ'</li>\n<li>'OPP activ'</li>\n<li>'OTP activ'</li>\n</ul>\n<h2>Get device description</h2>\n<p>Return argument: tuple (name, SN)</p>\n<p><code>psu.get_device_description()</code></p>\n<h2>Close connection</h2>\n<p>To close the connection, call:</p>\n<p><code>psu.close(remote=False, output=False)</code></p>\n<p>Set both arguments to True to turn off the output and remote control</p>\n\n          </div>"}, "last_serial": 4381850, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "633e17afdd61de616ad70b41497c30ce", "sha256": "6b53fd62063d26d3dd25c4855529e58b236b4b7e85ab1529d67ec71ee5f34d15"}, "downloads": -1, "filename": "ea_psu_controller-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "633e17afdd61de616ad70b41497c30ce", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 2579, "upload_time": "2018-10-15T14:51:12", "upload_time_iso_8601": "2018-10-15T14:51:12.317392Z", "url": "https://files.pythonhosted.org/packages/ac/51/749214dbb051213c9442689f4eeaa8ad1065867844e019995c989ec43a04/ea_psu_controller-1.0.0-py3-none-any.whl", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "ef4a1247795bd143177fc0327d4ea9ed", "sha256": "26ffe8f9e743e609b054c544c0f12d258ead1f4b736d769fafc0db5139dc7691"}, "downloads": -1, "filename": "ea_psu_controller-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ef4a1247795bd143177fc0327d4ea9ed", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8206, "upload_time": "2018-10-16T14:31:03", "upload_time_iso_8601": "2018-10-16T14:31:03.224685Z", "url": "https://files.pythonhosted.org/packages/b7/0f/76f34069442cb00167374c2fc9ebcc03f3403a9cabf879cd0b7629a6fd41/ea_psu_controller-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "56c4c714ebf33ac022951ca902ff357a", "sha256": "69dd13fe03b72abb3d638a2ab2cb01db09edf829b139fdf57ec949caf6b323d3"}, "downloads": -1, "filename": "ea-psu-controller-1.1.0.tar.gz", "has_sig": false, "md5_digest": "56c4c714ebf33ac022951ca902ff357a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7442, "upload_time": "2018-10-16T14:31:04", "upload_time_iso_8601": "2018-10-16T14:31:04.701912Z", "url": "https://files.pythonhosted.org/packages/1c/12/46cea67f35fd5b849ebefda792b43cbd2804e4db6f2e140456e42d9ef127/ea-psu-controller-1.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ef4a1247795bd143177fc0327d4ea9ed", "sha256": "26ffe8f9e743e609b054c544c0f12d258ead1f4b736d769fafc0db5139dc7691"}, "downloads": -1, "filename": "ea_psu_controller-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ef4a1247795bd143177fc0327d4ea9ed", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8206, "upload_time": "2018-10-16T14:31:03", "upload_time_iso_8601": "2018-10-16T14:31:03.224685Z", "url": "https://files.pythonhosted.org/packages/b7/0f/76f34069442cb00167374c2fc9ebcc03f3403a9cabf879cd0b7629a6fd41/ea_psu_controller-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "56c4c714ebf33ac022951ca902ff357a", "sha256": "69dd13fe03b72abb3d638a2ab2cb01db09edf829b139fdf57ec949caf6b323d3"}, "downloads": -1, "filename": "ea-psu-controller-1.1.0.tar.gz", "has_sig": false, "md5_digest": "56c4c714ebf33ac022951ca902ff357a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7442, "upload_time": "2018-10-16T14:31:04", "upload_time_iso_8601": "2018-10-16T14:31:04.701912Z", "url": "https://files.pythonhosted.org/packages/1c/12/46cea67f35fd5b849ebefda792b43cbd2804e4db6f2e140456e42d9ef127/ea-psu-controller-1.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:48:32 2020"}