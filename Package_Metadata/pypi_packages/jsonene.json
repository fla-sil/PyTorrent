{"info": {"author": "Nikhil Rupanawar", "author_email": "conikhil@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# jsonene\nThis library is intended to provide APIs to define JSON schema, create instances from schema, serialize/de-serialize to/from json or dict to Objects. \n\n**Inspired by**\n\n[jsonschema](https://python-jsonschema.readthedocs.io/en/stable/)\n\n[json-schema](https://json-schema.org/draft-07/json-schema-validation.html)\n\nThe basic idea is to provide light weight class based schema defination and data classes\n\n**Installation**\n\npip install jsonene\n\n**Demos**:\n\n\n```python\nimport datetime\nimport json\nfrom jsonene.fields import (\n    Boolean,\n    List,\n    GenericList,\n    Null,\n    Const,\n    Enum,\n    Number,\n    Integer,\n    Schema,\n    GenericSchema,\n    String,\n    Format,\n)\nfrom jsonene.operators import AllOf, AnyOf, OneOf, Not\nfrom jsonene.constraints import RequiredDependency\nfrom jsonene.exceptions import ValidationError\n```\n\n**Define a Schema**\n```python\nclass Person(Schema):\n    name = String(min_len=3)\n    gender = Enum([\"MALE\", \"FEMALE\", \"OTHER\"])\n    emails = List(Format(Format.EMAIL), unique_items=True)\n    contact = String(required=False)\n    age = Integer(required=False)\n    date_of_birth = Format(Format.DATE, name=\"date-of-birth\")  # non python names\n\n    class Meta:\n        # Must provide contact if emails is provided\n        field_dependencies = [RequiredDependency(\"emails\", [\"contact\"])]\n\n\n# Schema Inheritance\nclass Owner(Person):\n    pass\n\n\nclass Broker(Person):\n    brokerage = Integer()  # additional properity\n    is_broker = Const(True)\n\n    class Meta(Person.Meta):\n        field_dependencies = [\n            RequiredDependency(\"emails\", [\"contact\"]),\n            RequiredDependency(\"contact\", [\"emails\"]),\n        ]\n\n\n# Nested schemas\nclass House(Schema):\n    seller = AnyOf(Owner, Broker)  # accepts any of owner or broken\n    address = List(Number, String, String)  # accept list in specific type order.\n    is_ready = Boolean()\n    area = Number()\n    country = Const(\"India\")\n    garden_area = Number(required=False, use_default=0)\n    sqtft_rate = Number(required=False, use_default=0)\n    secrete_key = Number(required=False, name=\"__secrete_key\")  # Private\n    possesion_date = Format(Format.DATE)\n    # Extend instance class and add properties\n    class Instance(Schema.Instance):\n        @property\n        def cost(self):\n            # Safety: fields with required=False should be checked before access.\n            # Optionaly you can provide default value.\n            return self.sqtft_rate * self.area\n\n    # Provide custom meta\n    class Meta:\n        # Must provide area and sqtft_rate if sqtft_rate provided\n        # OR v.v.\n        field_dependencies = [\n            RequiredDependency(\"area\", [\"sqtft_rate\"]),\n            RequiredDependency(\"sqtft_rate\", [\"area\"]),\n        ]\n```\n\n\n**Create and validate instances**\n\n```python\ngeneric = GenericSchema.instance(anything=\"you want\", almost_anything=[1, 2, \"3\"])\nassert len(generic.errors) == 0 # Generic schema never raises errors\nassert generic.anything == \"you want\"\nassert generic.almost_anything == [1, 2, \"3\"]\n\n\n# Create a instances of schema\nowner = Owner.instance(\n    name=\"Test owner\",\n    gender=\"MALE\",\n    emails=[\"test@test.com\"],\n    date_of_birth=\"1989-01-01\",\n)\n\nassert owner.errors == [\"'contact' is a dependency of 'emails'\"]\nassert owner[\"date-of-birth\"] == \"1989-01-01\"\n\ntest = Broker.instance(\n    name=\"Test\",\n    gender=\"MALE\",\n    emails=[\"testtest.com\", \"testtest.com\"], # invalid emails, duplicate emails\n    contact=\"123456\",\n    brokerage=12345,\n    is_broker=True,\n    date_of_birth=\"1989-01-01\",\n)\nassert test.errors == [\n    \"'testtest.com' is not a 'email'\",\n    \"'testtest.com' is not a 'email'\",\n    \"['testtest.com', 'testtest.com'] has non-unique elements\",\n]\n\n# Owner instance\nowner = Owner.instance(\n    name=\"Nikhil Rupanawar\",\n    gender=\"MALE\",\n    emails=[\"conikhil@gmail.com\"],\n    contact=\"4545454545\",\n    date_of_birth=\"1989-09-11\",\n)\n\n# House with owner\nhouse = House.instance()\nhouse.seller = owner\nhouse.address = [123, \"A building\", \"Singad road\"]\nhouse.is_ready = True\nhouse.country = \"India\"\nhouse.area = 7000\nhouse.possesion_date = datetime.datetime.now()\nassert house.cost == 0 # sqtft_rate is 0 as default\nassert len(house.errors) == 0\n\n# House with broker\nanother_house = House.instance(\n    seller=Broker.instance(\n        name=\"Test Rupanwar\",\n        gender=\"MALE\",\n        emails=[\"test@test.com\"],\n        contact=\"123456\",\n        brokerage=12345,\n        is_broker=True,\n        date_of_birth=\"2002-09-08\",\n    ),\n    address=[123, \"A building\", \"Baner road\"],\n    sqtft_rate=5000,\n    area=1100,\n    is_ready=True,\n    country=\"India\",\n    secrete_key=12345,\n    possesion_date=datetime.datetime.now()\n)\nanother_house.validate()\nassert another_house.cost == 5500000\n```\n\n**List basics**\n\n```python\n# Generic list\n>>> l = List.instance([1, 23, 56, \"anything\"])\n>>> l.append(\"wow\")\n>>> l[1:6]  # slice\n>>> l.append(23)\n>>> l.extend([45])\n>>> l[2] = 100\n>>> l.validate()  # No errors!\n```\n\n**List of types**\n```python\nl = List(String).instance([\"only\", \"strings\", \"are\", \"allowed\"])\nassert len(l.errors) == 0  # No errors!\n\nl = List(String).instance([\"only\", \"strings\", 60, 30])\nassert [e.message for e in l.exceptions] == [\n    \"60 is not of type 'string'\",\n    \"30 is not of type 'string'\",\n]\n\n# list of house\nhouses = List(House).instance([house, another_house])\nhouses.validate()\nhouses.to_json()\n```\n\n**Validate any document/dict against the schema**\n\n```python\nHouse().validate(\n    {\n        \"seller\": {\n            \"age\": 22,\n            \"emails\": [\"test@test.com\", \"test2@test.com\"],\n            \"name\": \"nikhil\",\n            \"gender\": \"MALE\",\n            \"contact\": \"1234567\",\n            \"date-of-birth\": \"1978-09-04\",\n        },\n        \"address\": [120, \"Flat A\", \"Sarang\"],\n        \"area\": 1234,\n        \"sqtft_rate\": 2000,\n        \"garden_area\": 123,\n        \"is_ready\": True,\n        \"country\": \"India\",\n        \"possesion_date\": str(datetime.datetime.now()),\n    }\n)\n\n```\n\n\n**Enums and Consts**\n\n```python\n\nConst(2).instance(2).validate()  # won't raise error\n\ntry:\n    Const(2).instance(3).validate()  # raises error\nexcept ValidationError:\n    assert True\n\nassert Enum([1, 2, 3]).instance(3).errors == []  # no error\n\n# Raises error\ntry:\n    Enum([1, 2, \"Three\"])(5).validate()\nexcept ValidationError:\n    assert True\n```\n\n**Construct instance from document/schema**\n```python\nHOUSE_DATA_VALID = json.dumps(\n    {\n        \"seller\": {\n            \"age\": 22,\n            \"emails\": [\"test@test.com\", \"test2@test.com\"],\n            \"name\": \"nikhil\",\n            \"gender\": \"MALE\",\n            \"contact\": \"1234567\",\n            \"date-of-birth\": \"1978-09-04\",\n        },\n        \"address\": [120, \"Flat A\", \"Sarang\"],\n        \"area\": 1234,\n        \"sqtft_rate\": 2000,\n        \"garden_area\": 123,\n        \"is_ready\": True,\n        \"country\": \"India\",\n        \"possesion_date\": \"2020-02-05\",  # str(datetime.datetime.now()),\n    }\n)\n\nh = House.from_json(HOUSE_DATA_VALID)\nh.validate(check_formats=True)\n```\n\n\n**Factory-boy integration**\n```python \nfrom demos import Person, Owner, House, Broker, Gender, List, Schema\nfrom jsonene.factories import SchemaFactory, ListSchemaFactory\nfrom factory import SubFactory, fuzzy, Sequence, Iterator, LazyAttribute\nimport string\nimport datetime\nimport pytz\n\nst_date = pytz.utc.localize(datetime.datetime.now())\nend_date = st_date + datetime.timedelta(days=7)\n\n\nclass EmailsFactory(ListSchemaFactory):\n    email = LazyAttribute(lambda o: f\"{o.factory_parent.name}@example.org\")\n\n    class Meta:\n        model = List\n\n\nclass PersonFactory(SchemaFactory):\n    name = fuzzy.FuzzyText()\n    gender = fuzzy.FuzzyChoice([e.value for e in Gender])\n    emails = SubFactory(EmailsFactory)\n    contact = fuzzy.FuzzyText(chars=[str(n) for n in range(10)])\n    age = fuzzy.FuzzyInteger(low=0, high=100)\n    date_of_birth = fuzzy.FuzzyDateTime(st_date, end_dt=end_date)\n\n    class Meta:\n        model = Person\n\n\nclass OwnerFactory(PersonFactory):\n    class Meta:\n        model = Owner\n\n\nclass AddressFactory(ListSchemaFactory):\n    house_no = fuzzy.FuzzyInteger(low=1, high=100)\n    street_address = fuzzy.FuzzyText(suffix=\" road\")\n    area = fuzzy.FuzzyText()\n\n    class Meta:\n        model = List\n\n\nclass HouseFactory(SchemaFactory):\n    seller = SubFactory(OwnerFactory)\n    address = SubFactory(AddressFactory)\n    is_ready = fuzzy.FuzzyChoice([True, False])\n    area = fuzzy.FuzzyFloat(low=400, high=3000, precision=2)\n    country = \"India\"\n    garden_area = fuzzy.FuzzyFloat(low=400, high=3000, precision=2)\n    sqtft_rate = fuzzy.FuzzyFloat(low=0, high=50000, precision=2)\n    possesion_date = fuzzy.FuzzyDateTime(st_date, end_dt=end_date)\n\n    class Meta:\n        model = House\n\n\nhouse = HouseFactory.create()\nhouse.validate(check_formats=True)\nassert isinstance(house.seller, Schema.Instance)\n\nhouse2 = HouseFactory.create()\ndel house2.seller\nassert house2.errors == [\"'seller' is a required property\"]\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/nikhil-rupanawar/jsonene", "keywords": "json,validation,schema", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "jsonene", "package_url": "https://pypi.org/project/jsonene/", "platform": "", "project_url": "https://pypi.org/project/jsonene/", "project_urls": {"Homepage": "https://github.com/nikhil-rupanawar/jsonene"}, "release_url": "https://pypi.org/project/jsonene/0.0.13/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Type declaration and validation library for JSON", "version": "0.0.13", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>jsonene</h1>\n<p>This library is intended to provide APIs to define JSON schema, create instances from schema, serialize/de-serialize to/from json or dict to Objects.</p>\n<p><strong>Inspired by</strong></p>\n<p><a href=\"https://python-jsonschema.readthedocs.io/en/stable/\" rel=\"nofollow\">jsonschema</a></p>\n<p><a href=\"https://json-schema.org/draft-07/json-schema-validation.html\" rel=\"nofollow\">json-schema</a></p>\n<p>The basic idea is to provide light weight class based schema defination and data classes</p>\n<p><strong>Installation</strong></p>\n<p>pip install jsonene</p>\n<p><strong>Demos</strong>:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">datetime</span>\n<span class=\"kn\">import</span> <span class=\"nn\">json</span>\n<span class=\"kn\">from</span> <span class=\"nn\">jsonene.fields</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">Boolean</span><span class=\"p\">,</span>\n    <span class=\"n\">List</span><span class=\"p\">,</span>\n    <span class=\"n\">GenericList</span><span class=\"p\">,</span>\n    <span class=\"n\">Null</span><span class=\"p\">,</span>\n    <span class=\"n\">Const</span><span class=\"p\">,</span>\n    <span class=\"n\">Enum</span><span class=\"p\">,</span>\n    <span class=\"n\">Number</span><span class=\"p\">,</span>\n    <span class=\"n\">Integer</span><span class=\"p\">,</span>\n    <span class=\"n\">Schema</span><span class=\"p\">,</span>\n    <span class=\"n\">GenericSchema</span><span class=\"p\">,</span>\n    <span class=\"n\">String</span><span class=\"p\">,</span>\n    <span class=\"n\">Format</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">jsonene.operators</span> <span class=\"kn\">import</span> <span class=\"n\">AllOf</span><span class=\"p\">,</span> <span class=\"n\">AnyOf</span><span class=\"p\">,</span> <span class=\"n\">OneOf</span><span class=\"p\">,</span> <span class=\"n\">Not</span>\n<span class=\"kn\">from</span> <span class=\"nn\">jsonene.constraints</span> <span class=\"kn\">import</span> <span class=\"n\">RequiredDependency</span>\n<span class=\"kn\">from</span> <span class=\"nn\">jsonene.exceptions</span> <span class=\"kn\">import</span> <span class=\"n\">ValidationError</span>\n</pre>\n<p><strong>Define a Schema</strong></p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Person</span><span class=\"p\">(</span><span class=\"n\">Schema</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">String</span><span class=\"p\">(</span><span class=\"n\">min_len</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n    <span class=\"n\">gender</span> <span class=\"o\">=</span> <span class=\"n\">Enum</span><span class=\"p\">([</span><span class=\"s2\">\"MALE\"</span><span class=\"p\">,</span> <span class=\"s2\">\"FEMALE\"</span><span class=\"p\">,</span> <span class=\"s2\">\"OTHER\"</span><span class=\"p\">])</span>\n    <span class=\"n\">emails</span> <span class=\"o\">=</span> <span class=\"n\">List</span><span class=\"p\">(</span><span class=\"n\">Format</span><span class=\"p\">(</span><span class=\"n\">Format</span><span class=\"o\">.</span><span class=\"n\">EMAIL</span><span class=\"p\">),</span> <span class=\"n\">unique_items</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">contact</span> <span class=\"o\">=</span> <span class=\"n\">String</span><span class=\"p\">(</span><span class=\"n\">required</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"n\">age</span> <span class=\"o\">=</span> <span class=\"n\">Integer</span><span class=\"p\">(</span><span class=\"n\">required</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"n\">date_of_birth</span> <span class=\"o\">=</span> <span class=\"n\">Format</span><span class=\"p\">(</span><span class=\"n\">Format</span><span class=\"o\">.</span><span class=\"n\">DATE</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"date-of-birth\"</span><span class=\"p\">)</span>  <span class=\"c1\"># non python names</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Must provide contact if emails is provided</span>\n        <span class=\"n\">field_dependencies</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">RequiredDependency</span><span class=\"p\">(</span><span class=\"s2\">\"emails\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">\"contact\"</span><span class=\"p\">])]</span>\n\n\n<span class=\"c1\"># Schema Inheritance</span>\n<span class=\"k\">class</span> <span class=\"nc\">Owner</span><span class=\"p\">(</span><span class=\"n\">Person</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Broker</span><span class=\"p\">(</span><span class=\"n\">Person</span><span class=\"p\">):</span>\n    <span class=\"n\">brokerage</span> <span class=\"o\">=</span> <span class=\"n\">Integer</span><span class=\"p\">()</span>  <span class=\"c1\"># additional properity</span>\n    <span class=\"n\">is_broker</span> <span class=\"o\">=</span> <span class=\"n\">Const</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">(</span><span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">Meta</span><span class=\"p\">):</span>\n        <span class=\"n\">field_dependencies</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"n\">RequiredDependency</span><span class=\"p\">(</span><span class=\"s2\">\"emails\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">\"contact\"</span><span class=\"p\">]),</span>\n            <span class=\"n\">RequiredDependency</span><span class=\"p\">(</span><span class=\"s2\">\"contact\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">\"emails\"</span><span class=\"p\">]),</span>\n        <span class=\"p\">]</span>\n\n\n<span class=\"c1\"># Nested schemas</span>\n<span class=\"k\">class</span> <span class=\"nc\">House</span><span class=\"p\">(</span><span class=\"n\">Schema</span><span class=\"p\">):</span>\n    <span class=\"n\">seller</span> <span class=\"o\">=</span> <span class=\"n\">AnyOf</span><span class=\"p\">(</span><span class=\"n\">Owner</span><span class=\"p\">,</span> <span class=\"n\">Broker</span><span class=\"p\">)</span>  <span class=\"c1\"># accepts any of owner or broken</span>\n    <span class=\"n\">address</span> <span class=\"o\">=</span> <span class=\"n\">List</span><span class=\"p\">(</span><span class=\"n\">Number</span><span class=\"p\">,</span> <span class=\"n\">String</span><span class=\"p\">,</span> <span class=\"n\">String</span><span class=\"p\">)</span>  <span class=\"c1\"># accept list in specific type order.</span>\n    <span class=\"n\">is_ready</span> <span class=\"o\">=</span> <span class=\"n\">Boolean</span><span class=\"p\">()</span>\n    <span class=\"n\">area</span> <span class=\"o\">=</span> <span class=\"n\">Number</span><span class=\"p\">()</span>\n    <span class=\"n\">country</span> <span class=\"o\">=</span> <span class=\"n\">Const</span><span class=\"p\">(</span><span class=\"s2\">\"India\"</span><span class=\"p\">)</span>\n    <span class=\"n\">garden_area</span> <span class=\"o\">=</span> <span class=\"n\">Number</span><span class=\"p\">(</span><span class=\"n\">required</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">use_default</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"n\">sqtft_rate</span> <span class=\"o\">=</span> <span class=\"n\">Number</span><span class=\"p\">(</span><span class=\"n\">required</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">use_default</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"n\">secrete_key</span> <span class=\"o\">=</span> <span class=\"n\">Number</span><span class=\"p\">(</span><span class=\"n\">required</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"__secrete_key\"</span><span class=\"p\">)</span>  <span class=\"c1\"># Private</span>\n    <span class=\"n\">possesion_date</span> <span class=\"o\">=</span> <span class=\"n\">Format</span><span class=\"p\">(</span><span class=\"n\">Format</span><span class=\"o\">.</span><span class=\"n\">DATE</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Extend instance class and add properties</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Instance</span><span class=\"p\">(</span><span class=\"n\">Schema</span><span class=\"o\">.</span><span class=\"n\">Instance</span><span class=\"p\">):</span>\n        <span class=\"nd\">@property</span>\n        <span class=\"k\">def</span> <span class=\"nf\">cost</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n            <span class=\"c1\"># Safety: fields with required=False should be checked before access.</span>\n            <span class=\"c1\"># Optionaly you can provide default value.</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sqtft_rate</span> <span class=\"o\">*</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">area</span>\n\n    <span class=\"c1\"># Provide custom meta</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Must provide area and sqtft_rate if sqtft_rate provided</span>\n        <span class=\"c1\"># OR v.v.</span>\n        <span class=\"n\">field_dependencies</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"n\">RequiredDependency</span><span class=\"p\">(</span><span class=\"s2\">\"area\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">\"sqtft_rate\"</span><span class=\"p\">]),</span>\n            <span class=\"n\">RequiredDependency</span><span class=\"p\">(</span><span class=\"s2\">\"sqtft_rate\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">\"area\"</span><span class=\"p\">]),</span>\n        <span class=\"p\">]</span>\n</pre>\n<p><strong>Create and validate instances</strong></p>\n<pre><span class=\"n\">generic</span> <span class=\"o\">=</span> <span class=\"n\">GenericSchema</span><span class=\"o\">.</span><span class=\"n\">instance</span><span class=\"p\">(</span><span class=\"n\">anything</span><span class=\"o\">=</span><span class=\"s2\">\"you want\"</span><span class=\"p\">,</span> <span class=\"n\">almost_anything</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s2\">\"3\"</span><span class=\"p\">])</span>\n<span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">generic</span><span class=\"o\">.</span><span class=\"n\">errors</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"c1\"># Generic schema never raises errors</span>\n<span class=\"k\">assert</span> <span class=\"n\">generic</span><span class=\"o\">.</span><span class=\"n\">anything</span> <span class=\"o\">==</span> <span class=\"s2\">\"you want\"</span>\n<span class=\"k\">assert</span> <span class=\"n\">generic</span><span class=\"o\">.</span><span class=\"n\">almost_anything</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s2\">\"3\"</span><span class=\"p\">]</span>\n\n\n<span class=\"c1\"># Create a instances of schema</span>\n<span class=\"n\">owner</span> <span class=\"o\">=</span> <span class=\"n\">Owner</span><span class=\"o\">.</span><span class=\"n\">instance</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"Test owner\"</span><span class=\"p\">,</span>\n    <span class=\"n\">gender</span><span class=\"o\">=</span><span class=\"s2\">\"MALE\"</span><span class=\"p\">,</span>\n    <span class=\"n\">emails</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"test@test.com\"</span><span class=\"p\">],</span>\n    <span class=\"n\">date_of_birth</span><span class=\"o\">=</span><span class=\"s2\">\"1989-01-01\"</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">owner</span><span class=\"o\">.</span><span class=\"n\">errors</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"s2\">\"'contact' is a dependency of 'emails'\"</span><span class=\"p\">]</span>\n<span class=\"k\">assert</span> <span class=\"n\">owner</span><span class=\"p\">[</span><span class=\"s2\">\"date-of-birth\"</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">\"1989-01-01\"</span>\n\n<span class=\"n\">test</span> <span class=\"o\">=</span> <span class=\"n\">Broker</span><span class=\"o\">.</span><span class=\"n\">instance</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"Test\"</span><span class=\"p\">,</span>\n    <span class=\"n\">gender</span><span class=\"o\">=</span><span class=\"s2\">\"MALE\"</span><span class=\"p\">,</span>\n    <span class=\"n\">emails</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"testtest.com\"</span><span class=\"p\">,</span> <span class=\"s2\">\"testtest.com\"</span><span class=\"p\">],</span> <span class=\"c1\"># invalid emails, duplicate emails</span>\n    <span class=\"n\">contact</span><span class=\"o\">=</span><span class=\"s2\">\"123456\"</span><span class=\"p\">,</span>\n    <span class=\"n\">brokerage</span><span class=\"o\">=</span><span class=\"mi\">12345</span><span class=\"p\">,</span>\n    <span class=\"n\">is_broker</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"n\">date_of_birth</span><span class=\"o\">=</span><span class=\"s2\">\"1989-01-01\"</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">test</span><span class=\"o\">.</span><span class=\"n\">errors</span> <span class=\"o\">==</span> <span class=\"p\">[</span>\n    <span class=\"s2\">\"'testtest.com' is not a 'email'\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"'testtest.com' is not a 'email'\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"['testtest.com', 'testtest.com'] has non-unique elements\"</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n\n<span class=\"c1\"># Owner instance</span>\n<span class=\"n\">owner</span> <span class=\"o\">=</span> <span class=\"n\">Owner</span><span class=\"o\">.</span><span class=\"n\">instance</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"Nikhil Rupanawar\"</span><span class=\"p\">,</span>\n    <span class=\"n\">gender</span><span class=\"o\">=</span><span class=\"s2\">\"MALE\"</span><span class=\"p\">,</span>\n    <span class=\"n\">emails</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"conikhil@gmail.com\"</span><span class=\"p\">],</span>\n    <span class=\"n\">contact</span><span class=\"o\">=</span><span class=\"s2\">\"4545454545\"</span><span class=\"p\">,</span>\n    <span class=\"n\">date_of_birth</span><span class=\"o\">=</span><span class=\"s2\">\"1989-09-11\"</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># House with owner</span>\n<span class=\"n\">house</span> <span class=\"o\">=</span> <span class=\"n\">House</span><span class=\"o\">.</span><span class=\"n\">instance</span><span class=\"p\">()</span>\n<span class=\"n\">house</span><span class=\"o\">.</span><span class=\"n\">seller</span> <span class=\"o\">=</span> <span class=\"n\">owner</span>\n<span class=\"n\">house</span><span class=\"o\">.</span><span class=\"n\">address</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">123</span><span class=\"p\">,</span> <span class=\"s2\">\"A building\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Singad road\"</span><span class=\"p\">]</span>\n<span class=\"n\">house</span><span class=\"o\">.</span><span class=\"n\">is_ready</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n<span class=\"n\">house</span><span class=\"o\">.</span><span class=\"n\">country</span> <span class=\"o\">=</span> <span class=\"s2\">\"India\"</span>\n<span class=\"n\">house</span><span class=\"o\">.</span><span class=\"n\">area</span> <span class=\"o\">=</span> <span class=\"mi\">7000</span>\n<span class=\"n\">house</span><span class=\"o\">.</span><span class=\"n\">possesion_date</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()</span>\n<span class=\"k\">assert</span> <span class=\"n\">house</span><span class=\"o\">.</span><span class=\"n\">cost</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"c1\"># sqtft_rate is 0 as default</span>\n<span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">house</span><span class=\"o\">.</span><span class=\"n\">errors</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n\n<span class=\"c1\"># House with broker</span>\n<span class=\"n\">another_house</span> <span class=\"o\">=</span> <span class=\"n\">House</span><span class=\"o\">.</span><span class=\"n\">instance</span><span class=\"p\">(</span>\n    <span class=\"n\">seller</span><span class=\"o\">=</span><span class=\"n\">Broker</span><span class=\"o\">.</span><span class=\"n\">instance</span><span class=\"p\">(</span>\n        <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"Test Rupanwar\"</span><span class=\"p\">,</span>\n        <span class=\"n\">gender</span><span class=\"o\">=</span><span class=\"s2\">\"MALE\"</span><span class=\"p\">,</span>\n        <span class=\"n\">emails</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"test@test.com\"</span><span class=\"p\">],</span>\n        <span class=\"n\">contact</span><span class=\"o\">=</span><span class=\"s2\">\"123456\"</span><span class=\"p\">,</span>\n        <span class=\"n\">brokerage</span><span class=\"o\">=</span><span class=\"mi\">12345</span><span class=\"p\">,</span>\n        <span class=\"n\">is_broker</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">date_of_birth</span><span class=\"o\">=</span><span class=\"s2\">\"2002-09-08\"</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">address</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">123</span><span class=\"p\">,</span> <span class=\"s2\">\"A building\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Baner road\"</span><span class=\"p\">],</span>\n    <span class=\"n\">sqtft_rate</span><span class=\"o\">=</span><span class=\"mi\">5000</span><span class=\"p\">,</span>\n    <span class=\"n\">area</span><span class=\"o\">=</span><span class=\"mi\">1100</span><span class=\"p\">,</span>\n    <span class=\"n\">is_ready</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"n\">country</span><span class=\"o\">=</span><span class=\"s2\">\"India\"</span><span class=\"p\">,</span>\n    <span class=\"n\">secrete_key</span><span class=\"o\">=</span><span class=\"mi\">12345</span><span class=\"p\">,</span>\n    <span class=\"n\">possesion_date</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()</span>\n<span class=\"p\">)</span>\n<span class=\"n\">another_house</span><span class=\"o\">.</span><span class=\"n\">validate</span><span class=\"p\">()</span>\n<span class=\"k\">assert</span> <span class=\"n\">another_house</span><span class=\"o\">.</span><span class=\"n\">cost</span> <span class=\"o\">==</span> <span class=\"mi\">5500000</span>\n</pre>\n<p><strong>List basics</strong></p>\n<pre><span class=\"c1\"># Generic list</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">List</span><span class=\"o\">.</span><span class=\"n\">instance</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">23</span><span class=\"p\">,</span> <span class=\"mi\">56</span><span class=\"p\">,</span> <span class=\"s2\">\"anything\"</span><span class=\"p\">])</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">l</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">\"wow\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">l</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"mi\">6</span><span class=\"p\">]</span>  <span class=\"c1\"># slice</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">l</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"mi\">23</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">l</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">([</span><span class=\"mi\">45</span><span class=\"p\">])</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">l</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">l</span><span class=\"o\">.</span><span class=\"n\">validate</span><span class=\"p\">()</span>  <span class=\"c1\"># No errors!</span>\n</pre>\n<p><strong>List of types</strong></p>\n<pre><span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">List</span><span class=\"p\">(</span><span class=\"n\">String</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">instance</span><span class=\"p\">([</span><span class=\"s2\">\"only\"</span><span class=\"p\">,</span> <span class=\"s2\">\"strings\"</span><span class=\"p\">,</span> <span class=\"s2\">\"are\"</span><span class=\"p\">,</span> <span class=\"s2\">\"allowed\"</span><span class=\"p\">])</span>\n<span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"o\">.</span><span class=\"n\">errors</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>  <span class=\"c1\"># No errors!</span>\n\n<span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">List</span><span class=\"p\">(</span><span class=\"n\">String</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">instance</span><span class=\"p\">([</span><span class=\"s2\">\"only\"</span><span class=\"p\">,</span> <span class=\"s2\">\"strings\"</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">])</span>\n<span class=\"k\">assert</span> <span class=\"p\">[</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">message</span> <span class=\"k\">for</span> <span class=\"n\">e</span> <span class=\"ow\">in</span> <span class=\"n\">l</span><span class=\"o\">.</span><span class=\"n\">exceptions</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"p\">[</span>\n    <span class=\"s2\">\"60 is not of type 'string'\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"30 is not of type 'string'\"</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n\n<span class=\"c1\"># list of house</span>\n<span class=\"n\">houses</span> <span class=\"o\">=</span> <span class=\"n\">List</span><span class=\"p\">(</span><span class=\"n\">House</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">instance</span><span class=\"p\">([</span><span class=\"n\">house</span><span class=\"p\">,</span> <span class=\"n\">another_house</span><span class=\"p\">])</span>\n<span class=\"n\">houses</span><span class=\"o\">.</span><span class=\"n\">validate</span><span class=\"p\">()</span>\n<span class=\"n\">houses</span><span class=\"o\">.</span><span class=\"n\">to_json</span><span class=\"p\">()</span>\n</pre>\n<p><strong>Validate any document/dict against the schema</strong></p>\n<pre><span class=\"n\">House</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">validate</span><span class=\"p\">(</span>\n    <span class=\"p\">{</span>\n        <span class=\"s2\">\"seller\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s2\">\"age\"</span><span class=\"p\">:</span> <span class=\"mi\">22</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"emails\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"test@test.com\"</span><span class=\"p\">,</span> <span class=\"s2\">\"test2@test.com\"</span><span class=\"p\">],</span>\n            <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"nikhil\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"gender\"</span><span class=\"p\">:</span> <span class=\"s2\">\"MALE\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"contact\"</span><span class=\"p\">:</span> <span class=\"s2\">\"1234567\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"date-of-birth\"</span><span class=\"p\">:</span> <span class=\"s2\">\"1978-09-04\"</span><span class=\"p\">,</span>\n        <span class=\"p\">},</span>\n        <span class=\"s2\">\"address\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">120</span><span class=\"p\">,</span> <span class=\"s2\">\"Flat A\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Sarang\"</span><span class=\"p\">],</span>\n        <span class=\"s2\">\"area\"</span><span class=\"p\">:</span> <span class=\"mi\">1234</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"sqtft_rate\"</span><span class=\"p\">:</span> <span class=\"mi\">2000</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"garden_area\"</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"is_ready\"</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"country\"</span><span class=\"p\">:</span> <span class=\"s2\">\"India\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"possesion_date\"</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()),</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">)</span>\n</pre>\n<p><strong>Enums and Consts</strong></p>\n<pre><span class=\"n\">Const</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">instance</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">validate</span><span class=\"p\">()</span>  <span class=\"c1\"># won't raise error</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">Const</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">instance</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">validate</span><span class=\"p\">()</span>  <span class=\"c1\"># raises error</span>\n<span class=\"k\">except</span> <span class=\"n\">ValidationError</span><span class=\"p\">:</span>\n    <span class=\"k\">assert</span> <span class=\"kc\">True</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">Enum</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">instance</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">errors</span> <span class=\"o\">==</span> <span class=\"p\">[]</span>  <span class=\"c1\"># no error</span>\n\n<span class=\"c1\"># Raises error</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">Enum</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s2\">\"Three\"</span><span class=\"p\">])(</span><span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">validate</span><span class=\"p\">()</span>\n<span class=\"k\">except</span> <span class=\"n\">ValidationError</span><span class=\"p\">:</span>\n    <span class=\"k\">assert</span> <span class=\"kc\">True</span>\n</pre>\n<p><strong>Construct instance from document/schema</strong></p>\n<pre><span class=\"n\">HOUSE_DATA_VALID</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span>\n    <span class=\"p\">{</span>\n        <span class=\"s2\">\"seller\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s2\">\"age\"</span><span class=\"p\">:</span> <span class=\"mi\">22</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"emails\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"test@test.com\"</span><span class=\"p\">,</span> <span class=\"s2\">\"test2@test.com\"</span><span class=\"p\">],</span>\n            <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"nikhil\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"gender\"</span><span class=\"p\">:</span> <span class=\"s2\">\"MALE\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"contact\"</span><span class=\"p\">:</span> <span class=\"s2\">\"1234567\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"date-of-birth\"</span><span class=\"p\">:</span> <span class=\"s2\">\"1978-09-04\"</span><span class=\"p\">,</span>\n        <span class=\"p\">},</span>\n        <span class=\"s2\">\"address\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">120</span><span class=\"p\">,</span> <span class=\"s2\">\"Flat A\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Sarang\"</span><span class=\"p\">],</span>\n        <span class=\"s2\">\"area\"</span><span class=\"p\">:</span> <span class=\"mi\">1234</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"sqtft_rate\"</span><span class=\"p\">:</span> <span class=\"mi\">2000</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"garden_area\"</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"is_ready\"</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"country\"</span><span class=\"p\">:</span> <span class=\"s2\">\"India\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"possesion_date\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2020-02-05\"</span><span class=\"p\">,</span>  <span class=\"c1\"># str(datetime.datetime.now()),</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"n\">House</span><span class=\"o\">.</span><span class=\"n\">from_json</span><span class=\"p\">(</span><span class=\"n\">HOUSE_DATA_VALID</span><span class=\"p\">)</span>\n<span class=\"n\">h</span><span class=\"o\">.</span><span class=\"n\">validate</span><span class=\"p\">(</span><span class=\"n\">check_formats</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Factory-boy integration</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">demos</span> <span class=\"kn\">import</span> <span class=\"n\">Person</span><span class=\"p\">,</span> <span class=\"n\">Owner</span><span class=\"p\">,</span> <span class=\"n\">House</span><span class=\"p\">,</span> <span class=\"n\">Broker</span><span class=\"p\">,</span> <span class=\"n\">Gender</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">,</span> <span class=\"n\">Schema</span>\n<span class=\"kn\">from</span> <span class=\"nn\">jsonene.factories</span> <span class=\"kn\">import</span> <span class=\"n\">SchemaFactory</span><span class=\"p\">,</span> <span class=\"n\">ListSchemaFactory</span>\n<span class=\"kn\">from</span> <span class=\"nn\">factory</span> <span class=\"kn\">import</span> <span class=\"n\">SubFactory</span><span class=\"p\">,</span> <span class=\"n\">fuzzy</span><span class=\"p\">,</span> <span class=\"n\">Sequence</span><span class=\"p\">,</span> <span class=\"n\">Iterator</span><span class=\"p\">,</span> <span class=\"n\">LazyAttribute</span>\n<span class=\"kn\">import</span> <span class=\"nn\">string</span>\n<span class=\"kn\">import</span> <span class=\"nn\">datetime</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pytz</span>\n\n<span class=\"n\">st_date</span> <span class=\"o\">=</span> <span class=\"n\">pytz</span><span class=\"o\">.</span><span class=\"n\">utc</span><span class=\"o\">.</span><span class=\"n\">localize</span><span class=\"p\">(</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">())</span>\n<span class=\"n\">end_date</span> <span class=\"o\">=</span> <span class=\"n\">st_date</span> <span class=\"o\">+</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">days</span><span class=\"o\">=</span><span class=\"mi\">7</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">EmailsFactory</span><span class=\"p\">(</span><span class=\"n\">ListSchemaFactory</span><span class=\"p\">):</span>\n    <span class=\"n\">email</span> <span class=\"o\">=</span> <span class=\"n\">LazyAttribute</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">o</span><span class=\"p\">:</span> <span class=\"sa\">f</span><span class=\"s2\">\"</span><span class=\"si\">{</span><span class=\"n\">o</span><span class=\"o\">.</span><span class=\"n\">factory_parent</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">@example.org\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">List</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">PersonFactory</span><span class=\"p\">(</span><span class=\"n\">SchemaFactory</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">fuzzy</span><span class=\"o\">.</span><span class=\"n\">FuzzyText</span><span class=\"p\">()</span>\n    <span class=\"n\">gender</span> <span class=\"o\">=</span> <span class=\"n\">fuzzy</span><span class=\"o\">.</span><span class=\"n\">FuzzyChoice</span><span class=\"p\">([</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"k\">for</span> <span class=\"n\">e</span> <span class=\"ow\">in</span> <span class=\"n\">Gender</span><span class=\"p\">])</span>\n    <span class=\"n\">emails</span> <span class=\"o\">=</span> <span class=\"n\">SubFactory</span><span class=\"p\">(</span><span class=\"n\">EmailsFactory</span><span class=\"p\">)</span>\n    <span class=\"n\">contact</span> <span class=\"o\">=</span> <span class=\"n\">fuzzy</span><span class=\"o\">.</span><span class=\"n\">FuzzyText</span><span class=\"p\">(</span><span class=\"n\">chars</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)])</span>\n    <span class=\"n\">age</span> <span class=\"o\">=</span> <span class=\"n\">fuzzy</span><span class=\"o\">.</span><span class=\"n\">FuzzyInteger</span><span class=\"p\">(</span><span class=\"n\">low</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">high</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n    <span class=\"n\">date_of_birth</span> <span class=\"o\">=</span> <span class=\"n\">fuzzy</span><span class=\"o\">.</span><span class=\"n\">FuzzyDateTime</span><span class=\"p\">(</span><span class=\"n\">st_date</span><span class=\"p\">,</span> <span class=\"n\">end_dt</span><span class=\"o\">=</span><span class=\"n\">end_date</span><span class=\"p\">)</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Person</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">OwnerFactory</span><span class=\"p\">(</span><span class=\"n\">PersonFactory</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Owner</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">AddressFactory</span><span class=\"p\">(</span><span class=\"n\">ListSchemaFactory</span><span class=\"p\">):</span>\n    <span class=\"n\">house_no</span> <span class=\"o\">=</span> <span class=\"n\">fuzzy</span><span class=\"o\">.</span><span class=\"n\">FuzzyInteger</span><span class=\"p\">(</span><span class=\"n\">low</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">high</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n    <span class=\"n\">street_address</span> <span class=\"o\">=</span> <span class=\"n\">fuzzy</span><span class=\"o\">.</span><span class=\"n\">FuzzyText</span><span class=\"p\">(</span><span class=\"n\">suffix</span><span class=\"o\">=</span><span class=\"s2\">\" road\"</span><span class=\"p\">)</span>\n    <span class=\"n\">area</span> <span class=\"o\">=</span> <span class=\"n\">fuzzy</span><span class=\"o\">.</span><span class=\"n\">FuzzyText</span><span class=\"p\">()</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">List</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">HouseFactory</span><span class=\"p\">(</span><span class=\"n\">SchemaFactory</span><span class=\"p\">):</span>\n    <span class=\"n\">seller</span> <span class=\"o\">=</span> <span class=\"n\">SubFactory</span><span class=\"p\">(</span><span class=\"n\">OwnerFactory</span><span class=\"p\">)</span>\n    <span class=\"n\">address</span> <span class=\"o\">=</span> <span class=\"n\">SubFactory</span><span class=\"p\">(</span><span class=\"n\">AddressFactory</span><span class=\"p\">)</span>\n    <span class=\"n\">is_ready</span> <span class=\"o\">=</span> <span class=\"n\">fuzzy</span><span class=\"o\">.</span><span class=\"n\">FuzzyChoice</span><span class=\"p\">([</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">])</span>\n    <span class=\"n\">area</span> <span class=\"o\">=</span> <span class=\"n\">fuzzy</span><span class=\"o\">.</span><span class=\"n\">FuzzyFloat</span><span class=\"p\">(</span><span class=\"n\">low</span><span class=\"o\">=</span><span class=\"mi\">400</span><span class=\"p\">,</span> <span class=\"n\">high</span><span class=\"o\">=</span><span class=\"mi\">3000</span><span class=\"p\">,</span> <span class=\"n\">precision</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"n\">country</span> <span class=\"o\">=</span> <span class=\"s2\">\"India\"</span>\n    <span class=\"n\">garden_area</span> <span class=\"o\">=</span> <span class=\"n\">fuzzy</span><span class=\"o\">.</span><span class=\"n\">FuzzyFloat</span><span class=\"p\">(</span><span class=\"n\">low</span><span class=\"o\">=</span><span class=\"mi\">400</span><span class=\"p\">,</span> <span class=\"n\">high</span><span class=\"o\">=</span><span class=\"mi\">3000</span><span class=\"p\">,</span> <span class=\"n\">precision</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"n\">sqtft_rate</span> <span class=\"o\">=</span> <span class=\"n\">fuzzy</span><span class=\"o\">.</span><span class=\"n\">FuzzyFloat</span><span class=\"p\">(</span><span class=\"n\">low</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">high</span><span class=\"o\">=</span><span class=\"mi\">50000</span><span class=\"p\">,</span> <span class=\"n\">precision</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"n\">possesion_date</span> <span class=\"o\">=</span> <span class=\"n\">fuzzy</span><span class=\"o\">.</span><span class=\"n\">FuzzyDateTime</span><span class=\"p\">(</span><span class=\"n\">st_date</span><span class=\"p\">,</span> <span class=\"n\">end_dt</span><span class=\"o\">=</span><span class=\"n\">end_date</span><span class=\"p\">)</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">House</span>\n\n\n<span class=\"n\">house</span> <span class=\"o\">=</span> <span class=\"n\">HouseFactory</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">()</span>\n<span class=\"n\">house</span><span class=\"o\">.</span><span class=\"n\">validate</span><span class=\"p\">(</span><span class=\"n\">check_formats</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">house</span><span class=\"o\">.</span><span class=\"n\">seller</span><span class=\"p\">,</span> <span class=\"n\">Schema</span><span class=\"o\">.</span><span class=\"n\">Instance</span><span class=\"p\">)</span>\n\n<span class=\"n\">house2</span> <span class=\"o\">=</span> <span class=\"n\">HouseFactory</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">()</span>\n<span class=\"k\">del</span> <span class=\"n\">house2</span><span class=\"o\">.</span><span class=\"n\">seller</span>\n<span class=\"k\">assert</span> <span class=\"n\">house2</span><span class=\"o\">.</span><span class=\"n\">errors</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"s2\">\"'seller' is a required property\"</span><span class=\"p\">]</span>\n</pre>\n\n          </div>"}, "last_serial": 6584384, "releases": {"0.0.10": [{"comment_text": "", "digests": {"md5": "74a92950e01675abf7a0c83ed811d549", "sha256": "1f070eef0108cb969286a8d40f9a257cdcb9877dc685413074c5c9191d9f4e49"}, "downloads": -1, "filename": "jsonene-0.0.10.tar.gz", "has_sig": false, "md5_digest": "74a92950e01675abf7a0c83ed811d549", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10830, "upload_time": "2020-02-05T15:42:00", "upload_time_iso_8601": "2020-02-05T15:42:00.069234Z", "url": "https://files.pythonhosted.org/packages/2f/14/f5cb30d7e04b1357bd965b1bc6493e0ce8a6084f95b1c011dbe06e4cf4ae/jsonene-0.0.10.tar.gz", "yanked": false}], "0.0.11": [{"comment_text": "", "digests": {"md5": "348d71495e7349fa377d43a20a063413", "sha256": "c3f851ecce17c97b3840c1ae9b77b37e6283370b40242630db11f5036f745180"}, "downloads": -1, "filename": "jsonene-0.0.11.tar.gz", "has_sig": false, "md5_digest": "348d71495e7349fa377d43a20a063413", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 11725, "upload_time": "2020-02-06T17:22:49", "upload_time_iso_8601": "2020-02-06T17:22:49.621848Z", "url": "https://files.pythonhosted.org/packages/10/8a/682f98e072352341c6b20b8cc771a65f8cbb977f7cccbf80d89016ba41aa/jsonene-0.0.11.tar.gz", "yanked": false}], "0.0.12": [{"comment_text": "", "digests": {"md5": "50c3f8d38a43eedf57223c343c7c3d04", "sha256": "c47ceec4ea98df0e29c0b354f114f8f8097f9cd067165236e7bd0fdf930fb530"}, "downloads": -1, "filename": "jsonene-0.0.12.tar.gz", "has_sig": false, "md5_digest": "50c3f8d38a43eedf57223c343c7c3d04", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12932, "upload_time": "2020-02-06T17:29:01", "upload_time_iso_8601": "2020-02-06T17:29:01.475614Z", "url": "https://files.pythonhosted.org/packages/d7/f6/3061071f908e803b2a4e68627b01ddf1c9c21749d1455c704d448f1be9e1/jsonene-0.0.12.tar.gz", "yanked": false}], "0.0.13": [{"comment_text": "", "digests": {"md5": "a77137e07e9225d01df77d6b9e23f86e", "sha256": "14ae4dcdad56839c1c2280b092b893054ee7ac3df40beb60816ed4531824966d"}, "downloads": -1, "filename": "jsonene-0.0.13.tar.gz", "has_sig": false, "md5_digest": "a77137e07e9225d01df77d6b9e23f86e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12953, "upload_time": "2020-02-06T21:12:56", "upload_time_iso_8601": "2020-02-06T21:12:56.567103Z", "url": "https://files.pythonhosted.org/packages/78/3a/6ce4c040a0e3209b43ba9ab76173ee2044ea696b4ba205e2276be82e2537/jsonene-0.0.13.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a77137e07e9225d01df77d6b9e23f86e", "sha256": "14ae4dcdad56839c1c2280b092b893054ee7ac3df40beb60816ed4531824966d"}, "downloads": -1, "filename": "jsonene-0.0.13.tar.gz", "has_sig": false, "md5_digest": "a77137e07e9225d01df77d6b9e23f86e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12953, "upload_time": "2020-02-06T21:12:56", "upload_time_iso_8601": "2020-02-06T21:12:56.567103Z", "url": "https://files.pythonhosted.org/packages/78/3a/6ce4c040a0e3209b43ba9ab76173ee2044ea696b4ba205e2276be82e2537/jsonene-0.0.13.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:49 2020"}