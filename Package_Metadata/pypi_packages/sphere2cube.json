{"info": {"author": "Tudor Brindus", "author_email": "me@tbrindus.ca", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Artistic Software"], "description": "sphere2cube [![PyPI version](https://badge.fury.io/py/sphere2cube.svg)](https://pypi.python.org/pypi/sphere2cube) [![PyPI](https://img.shields.io/pypi/pyversions/sphere2cube.svg)](https://pypi.python.org/pypi/sphere2cube)\n===========\n\n`sphere2cube` is a Python script to map equirectangular (cylindrical\nprojection, skysphere) map into 6 cube (cubemap, skybox) faces. See also\n[cube2sphere](https://github.com/Xyene/cube2sphere).\n\nUsage\n=====\n\n    $ sphere2cube -h\n    usage: sphere2cube [-h] [-v] [-r <size>] [-R <rx> <ry> <rz>] [-p <pattern>]\n                       [-o <dir>] [-f <name>] [-b <path>] [-t <count>] [-V]\n                       [<source>]\n\n    Maps an equirectangular (cylindrical projection, skysphere) map into 6 cube\n    (cubemap, skybox) faces.\n\n    positional arguments:\n      <source>              source equirectangular image filename\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -v, --version         show program's version number and exit\n      -r <size>, --resolution <size>\n                            resolution for each generated cube face (defaults to 1024)\n      -R <rx> <ry> <rz>, --rotation <rx> <ry> <rz>\n                            rotation in degrees to apply before rendering cube\n                            faces (z is up)\n      -F <angle>, --fov <angle>\n                            field of view of camera used for rendering cube faces\n      -p <pattern>, --path <pattern>\n                            filename pattern for rendered faces: default is\n                            \"face_%n_%r\", where %n is replaced by the face number\n                            and %r by the resolution\n      -o <dir>, --output-dir <dir>\n                            directory to save rendered faces to (it must already\n                            exist)\n      -f <name>, --format <name>\n                            format to use when saving faces, i.e. \"PNG\" or \"TGA\"\n      -b <path>, --blender-path <path>\n                            filename of the Blender executable (defaults to\n                            \"blender\")\n      -t <count>, --threads <count>\n                            number of threads to use when rendering (1-64)\n      -V, --verbose         enable verbose logging\n\nSupported output formats depend on the Blender installation, but will\ngenerally be TGA, IRIS, JPEG, MOVIE, IRIZ, RAWTGA, AVIRAW, AVIJPEG, PNG,\nBMP, and FRAMESERVER.\n\n`sphere2cube` can be run in a headless environment (e.g., a server).\n\nExamples\n========\n\nFor instance, to render a 2048-resolution TGA cubemap from `source.jpg`,\nwe could use the following command:\n\n    $ sphere2cube source.jpg -r2048 -fTGA\n\nThis would generate `face_1_2048.tga`, \u2026, `face_6_2048.tga` in the\nworking directory.\n\nInstallation\n============\n\n`sphere2cube` can be easily installed with `pip`. It requires a Python 3\ninstallation, and at least [Blender 2.8](https://www.blender.org/).\n\nIt assumes that Blender is installed and the `blender` executable is\nlisted in the system PATH environment variable. If it is not possible\nfor PATH to be edited (as in the case of an unprivileged user), the path\nto the `blender` executable may instead be passed through the `-b` flag.\n\nWindows\n-------\n\nInstall Blender, and add `blender.exe` to `PATH`. Finally,\n\n    pip install sphere2cube\n\nLinux\n-----\n\n    $ apt-get install blender\n    $ pip install sphere2cube\n\nMac OS X\n--------\n\nSimilar to Windows, install [Blender], and add the `blender` executable\nto `$PATH`. Then,\n\n    $ pip install sphere2cube", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/Xyene/sphere2cube", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "sphere2cube", "package_url": "https://pypi.org/project/sphere2cube/", "platform": "", "project_url": "https://pypi.org/project/sphere2cube/", "project_urls": {"Homepage": "http://github.com/Xyene/sphere2cube"}, "release_url": "https://pypi.org/project/sphere2cube/0.3.0/", "requires_dist": null, "requires_python": "", "summary": "Utility to map an equirectangular (cylindrical projection; skysphere) map into 6 cube (cubemap; skybox) faces", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>sphere2cube <a href=\"https://pypi.python.org/pypi/sphere2cube\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/73b8e84329d5975c3f952016307ba09e76b46328/68747470733a2f2f62616467652e667572792e696f2f70792f73706865726532637562652e737667\"></a> <a href=\"https://pypi.python.org/pypi/sphere2cube\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2ff794c56fee9e1a4bd6f464ab73b4230a90bfec/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f73706865726532637562652e737667\"></a></h1>\n<p><code>sphere2cube</code> is a Python script to map equirectangular (cylindrical\nprojection, skysphere) map into 6 cube (cubemap, skybox) faces. See also\n<a href=\"https://github.com/Xyene/cube2sphere\" rel=\"nofollow\">cube2sphere</a>.</p>\n<h1>Usage</h1>\n<pre><code>$ sphere2cube -h\nusage: sphere2cube [-h] [-v] [-r &lt;size&gt;] [-R &lt;rx&gt; &lt;ry&gt; &lt;rz&gt;] [-p &lt;pattern&gt;]\n                   [-o &lt;dir&gt;] [-f &lt;name&gt;] [-b &lt;path&gt;] [-t &lt;count&gt;] [-V]\n                   [&lt;source&gt;]\n\nMaps an equirectangular (cylindrical projection, skysphere) map into 6 cube\n(cubemap, skybox) faces.\n\npositional arguments:\n  &lt;source&gt;              source equirectangular image filename\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -v, --version         show program's version number and exit\n  -r &lt;size&gt;, --resolution &lt;size&gt;\n                        resolution for each generated cube face (defaults to 1024)\n  -R &lt;rx&gt; &lt;ry&gt; &lt;rz&gt;, --rotation &lt;rx&gt; &lt;ry&gt; &lt;rz&gt;\n                        rotation in degrees to apply before rendering cube\n                        faces (z is up)\n  -F &lt;angle&gt;, --fov &lt;angle&gt;\n                        field of view of camera used for rendering cube faces\n  -p &lt;pattern&gt;, --path &lt;pattern&gt;\n                        filename pattern for rendered faces: default is\n                        \"face_%n_%r\", where %n is replaced by the face number\n                        and %r by the resolution\n  -o &lt;dir&gt;, --output-dir &lt;dir&gt;\n                        directory to save rendered faces to (it must already\n                        exist)\n  -f &lt;name&gt;, --format &lt;name&gt;\n                        format to use when saving faces, i.e. \"PNG\" or \"TGA\"\n  -b &lt;path&gt;, --blender-path &lt;path&gt;\n                        filename of the Blender executable (defaults to\n                        \"blender\")\n  -t &lt;count&gt;, --threads &lt;count&gt;\n                        number of threads to use when rendering (1-64)\n  -V, --verbose         enable verbose logging\n</code></pre>\n<p>Supported output formats depend on the Blender installation, but will\ngenerally be TGA, IRIS, JPEG, MOVIE, IRIZ, RAWTGA, AVIRAW, AVIJPEG, PNG,\nBMP, and FRAMESERVER.</p>\n<p><code>sphere2cube</code> can be run in a headless environment (e.g., a server).</p>\n<h1>Examples</h1>\n<p>For instance, to render a 2048-resolution TGA cubemap from <code>source.jpg</code>,\nwe could use the following command:</p>\n<pre><code>$ sphere2cube source.jpg -r2048 -fTGA\n</code></pre>\n<p>This would generate <code>face_1_2048.tga</code>, \u2026, <code>face_6_2048.tga</code> in the\nworking directory.</p>\n<h1>Installation</h1>\n<p><code>sphere2cube</code> can be easily installed with <code>pip</code>. It requires a Python 3\ninstallation, and at least <a href=\"https://www.blender.org/\" rel=\"nofollow\">Blender 2.8</a>.</p>\n<p>It assumes that Blender is installed and the <code>blender</code> executable is\nlisted in the system PATH environment variable. If it is not possible\nfor PATH to be edited (as in the case of an unprivileged user), the path\nto the <code>blender</code> executable may instead be passed through the <code>-b</code> flag.</p>\n<h2>Windows</h2>\n<p>Install Blender, and add <code>blender.exe</code> to <code>PATH</code>. Finally,</p>\n<pre><code>pip install sphere2cube\n</code></pre>\n<h2>Linux</h2>\n<pre><code>$ apt-get install blender\n$ pip install sphere2cube\n</code></pre>\n<h2>Mac OS X</h2>\n<p>Similar to Windows, install [Blender], and add the <code>blender</code> executable\nto <code>$PATH</code>. Then,</p>\n<pre><code>$ pip install sphere2cube\n</code></pre>\n\n          </div>"}, "last_serial": 6931499, "releases": {"0.1.8": [{"comment_text": "", "digests": {"md5": "dce32f4b2d3d08ae03efbe13c12f4730", "sha256": "f4bae3af9003a696eb712dd0f64fd010accf94a302e7fc1cb4f8f7b9102df966"}, "downloads": -1, "filename": "sphere2cube-0.1.8.zip", "has_sig": false, "md5_digest": "dce32f4b2d3d08ae03efbe13c12f4730", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 107797, "upload_time": "2015-08-31T00:37:34", "upload_time_iso_8601": "2015-08-31T00:37:34.486510Z", "url": "https://files.pythonhosted.org/packages/2e/27/d0e397407267580b0e397a1f1f6363ecc825fdebb973b862a8de26a50661/sphere2cube-0.1.8.zip", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "2d6424db174490f93cdda958e624aa0c", "sha256": "366b4e5d330d377c240c9e6d33f4236fef5d0d10b404d143e2350fc6875f9b94"}, "downloads": -1, "filename": "sphere2cube-0.3.0.tar.gz", "has_sig": false, "md5_digest": "2d6424db174490f93cdda958e624aa0c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 134975, "upload_time": "2020-04-01T21:48:40", "upload_time_iso_8601": "2020-04-01T21:48:40.967405Z", "url": "https://files.pythonhosted.org/packages/d3/3a/f55bd0dcfa2ddf8191d53dbbd487b5d1be07adf826ec88db59df4bdadd6f/sphere2cube-0.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2d6424db174490f93cdda958e624aa0c", "sha256": "366b4e5d330d377c240c9e6d33f4236fef5d0d10b404d143e2350fc6875f9b94"}, "downloads": -1, "filename": "sphere2cube-0.3.0.tar.gz", "has_sig": false, "md5_digest": "2d6424db174490f93cdda958e624aa0c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 134975, "upload_time": "2020-04-01T21:48:40", "upload_time_iso_8601": "2020-04-01T21:48:40.967405Z", "url": "https://files.pythonhosted.org/packages/d3/3a/f55bd0dcfa2ddf8191d53dbbd487b5d1be07adf826ec88db59df4bdadd6f/sphere2cube-0.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:05:27 2020"}