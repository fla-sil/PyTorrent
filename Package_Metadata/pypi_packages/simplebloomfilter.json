{"info": {"author": "Khoa Duong", "author_email": "dnanhkhoa@live.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3"], "description": "# simple-bloom-filter\n\n[![PyPI](https://img.shields.io/pypi/v/simplebloomfilter.svg)]()\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/simplebloomfilter.svg)]()\n\nA simple implementation of Bloom Filter and Scalable Bloom Filter for Python 3.\n\n## Installation\n\nYou can install this package from PyPI using [pip](http://www.pip-installer.org):\n\n```\n$ [sudo] pip install simplebloomfilter\n```\n\n## Example Usage\n\n```python\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\nfrom bloomfilter import BloomFilter, ScalableBloomFilter, SizeGrowthRate\n\nanimals = [\n    \"dog\",\n    \"cat\",\n    \"giraffe\",\n    \"fly\",\n    \"mosquito\",\n    \"horse\",\n    \"eagle\",\n    \"bird\",\n    \"bison\",\n    \"boar\",\n    \"butterfly\",\n    \"ant\",\n    \"anaconda\",\n    \"bear\",\n    \"chicken\",\n    \"dolphin\",\n    \"donkey\",\n    \"crow\",\n    \"crocodile\",\n]\n\nother_animals = [\n    \"badger\",\n    \"cow\",\n    \"pig\",\n    \"sheep\",\n    \"bee\",\n    \"wolf\",\n    \"fox\",\n    \"whale\",\n    \"shark\",\n    \"fish\",\n    \"turkey\",\n    \"duck\",\n    \"dove\",\n    \"deer\",\n    \"elephant\",\n    \"frog\",\n    \"falcon\",\n    \"goat\",\n    \"gorilla\",\n    \"hawk\",\n]\n\n\ndef bloom_filter_example():\n    print(\"========== Bloom Filter Example ==========\")\n    bloom_filter = BloomFilter(size=1000, fp_prob=1e-6)\n\n    # Insert items into Bloom filter\n    for animal in animals:\n        bloom_filter.add(animal)\n\n    # Print several statistics of the filter\n    print(\n        \"+ Capacity: {} item(s)\".format(bloom_filter.size),\n        \"+ Number of inserted items: {}\".format(len(bloom_filter)),\n        \"+ Filter size: {} bit(s)\".format(bloom_filter.filter_size),\n        \"+ False Positive probability: {}\".format(bloom_filter.fp_prob),\n        \"+ Number of hash functions: {}\".format(bloom_filter.num_hashes),\n        sep=\"\\n\",\n        end=\"\\n\\n\",\n    )\n\n    # Check whether an item is in the filter or not\n    for animal in animals + other_animals:\n        if animal in bloom_filter:\n            if animal in other_animals:\n                print(\n                    f'\"{animal}\" is a FALSE POSITIVE case (please adjust fp_prob to a smaller value).'\n                )\n            else:\n                print(f'\"{animal}\" is PROBABLY IN the filter.')\n        else:\n            print(f'\"{animal}\" is DEFINITELY NOT IN the filter as expected.')\n\n    # Save to file\n    with open(\"bloom_filter.bin\", \"wb\") as fp:\n        bloom_filter.save(fp)\n\n    # Load from file\n    with open(\"bloom_filter.bin\", \"rb\") as fp:\n        bloom_filter = BloomFilter.load(fp)\n\n\ndef scalable_bloom_filter_example():\n    print(\"========== Bloom Filter Example ==========\")\n    scalable_bloom_filter = ScalableBloomFilter(\n        initial_size=100,\n        initial_fp_prob=1e-7,\n        size_growth_rate=SizeGrowthRate.LARGE,\n        fp_prob_rate=0.9,\n    )\n    # Insert items into Bloom filter\n    for animal in animals:\n        scalable_bloom_filter.add(animal)\n\n    # Print several statistics of the filter\n    print(\n        \"+ Capacity: {} item(s)\".format(scalable_bloom_filter.size),\n        \"+ Number of inserted items: {}\".format(len(scalable_bloom_filter)),\n        \"+ Number of Bloom filters: {}\".format(scalable_bloom_filter.num_filters),\n        \"+ Total size of filters: {} bit(s)\".format(scalable_bloom_filter.filter_size),\n        \"+ False Positive probability: {}\".format(scalable_bloom_filter.fp_prob),\n        sep=\"\\n\",\n        end=\"\\n\\n\",\n    )\n\n    # Check whether an item is in the filter or not\n    for animal in animals + other_animals:\n        if animal in scalable_bloom_filter:\n            if animal in other_animals:\n                print(\n                    f'\"{animal}\" is a FALSE POSITIVE case (please adjust fp_prob to a smaller value).'\n                )\n            else:\n                print(f'\"{animal}\" is PROBABLY IN the filter.')\n        else:\n            print(f'\"{animal}\" is DEFINITELY NOT IN the filter as expected.')\n\n    # Save to file\n    with open(\"scalable_bloom_filter.bin\", \"wb\") as fp:\n        scalable_bloom_filter.save(fp)\n\n    # Load from file\n    with open(\"scalable_bloom_filter.bin\", \"rb\") as fp:\n        scalable_bloom_filter = ScalableBloomFilter.load(fp)\n\n\nif __name__ == \"__main__\":\n    bloom_filter_example()\n    scalable_bloom_filter_example()\n```\n```\n========== Bloom Filter Example ==========\n+ Capacity: 1000 item(s)\n+ Number of inserted items: 19\n+ Filter size: 28756 bit(s)\n+ False Positive probability: 1e-06\n+ Number of hash functions: 20\n\n\"dog\" is PROBABLY IN the filter.\n\"cat\" is PROBABLY IN the filter.\n\"giraffe\" is PROBABLY IN the filter.\n\"fly\" is PROBABLY IN the filter.\n\"mosquito\" is PROBABLY IN the filter.\n\"horse\" is PROBABLY IN the filter.\n\"eagle\" is PROBABLY IN the filter.\n\"bird\" is PROBABLY IN the filter.\n\"bison\" is PROBABLY IN the filter.\n\"boar\" is PROBABLY IN the filter.\n\"butterfly\" is PROBABLY IN the filter.\n\"ant\" is PROBABLY IN the filter.\n\"anaconda\" is PROBABLY IN the filter.\n\"bear\" is PROBABLY IN the filter.\n\"chicken\" is PROBABLY IN the filter.\n\"dolphin\" is PROBABLY IN the filter.\n\"donkey\" is PROBABLY IN the filter.\n\"crow\" is PROBABLY IN the filter.\n\"crocodile\" is PROBABLY IN the filter.\n\"badger\" is DEFINITELY NOT IN the filter as expected.\n\"cow\" is DEFINITELY NOT IN the filter as expected.\n\"pig\" is DEFINITELY NOT IN the filter as expected.\n\"sheep\" is DEFINITELY NOT IN the filter as expected.\n\"bee\" is DEFINITELY NOT IN the filter as expected.\n\"wolf\" is DEFINITELY NOT IN the filter as expected.\n\"fox\" is DEFINITELY NOT IN the filter as expected.\n\"whale\" is DEFINITELY NOT IN the filter as expected.\n\"shark\" is DEFINITELY NOT IN the filter as expected.\n\"fish\" is DEFINITELY NOT IN the filter as expected.\n\"turkey\" is DEFINITELY NOT IN the filter as expected.\n\"duck\" is DEFINITELY NOT IN the filter as expected.\n\"dove\" is DEFINITELY NOT IN the filter as expected.\n\"deer\" is DEFINITELY NOT IN the filter as expected.\n\"elephant\" is DEFINITELY NOT IN the filter as expected.\n\"frog\" is DEFINITELY NOT IN the filter as expected.\n\"falcon\" is DEFINITELY NOT IN the filter as expected.\n\"goat\" is DEFINITELY NOT IN the filter as expected.\n\"gorilla\" is DEFINITELY NOT IN the filter as expected.\n\"hawk\" is DEFINITELY NOT IN the filter as expected.\n\n\n========== Bloom Filter Example ==========\n+ Capacity: 100 item(s)\n+ Number of inserted items: 19\n+ Number of Bloom filters: 1\n+ Total size of filters: 3355 bit(s)\n+ False Positive probability: 9.999999994736442e-08\n\n\"dog\" is PROBABLY IN the filter.\n\"cat\" is PROBABLY IN the filter.\n\"giraffe\" is PROBABLY IN the filter.\n\"fly\" is PROBABLY IN the filter.\n\"mosquito\" is PROBABLY IN the filter.\n\"horse\" is PROBABLY IN the filter.\n\"eagle\" is PROBABLY IN the filter.\n\"bird\" is PROBABLY IN the filter.\n\"bison\" is PROBABLY IN the filter.\n\"boar\" is PROBABLY IN the filter.\n\"butterfly\" is PROBABLY IN the filter.\n\"ant\" is PROBABLY IN the filter.\n\"anaconda\" is PROBABLY IN the filter.\n\"bear\" is PROBABLY IN the filter.\n\"chicken\" is PROBABLY IN the filter.\n\"dolphin\" is PROBABLY IN the filter.\n\"donkey\" is PROBABLY IN the filter.\n\"crow\" is PROBABLY IN the filter.\n\"crocodile\" is PROBABLY IN the filter.\n\"badger\" is DEFINITELY NOT IN the filter as expected.\n\"cow\" is DEFINITELY NOT IN the filter as expected.\n\"pig\" is DEFINITELY NOT IN the filter as expected.\n\"sheep\" is DEFINITELY NOT IN the filter as expected.\n\"bee\" is DEFINITELY NOT IN the filter as expected.\n\"wolf\" is DEFINITELY NOT IN the filter as expected.\n\"fox\" is DEFINITELY NOT IN the filter as expected.\n\"whale\" is DEFINITELY NOT IN the filter as expected.\n\"shark\" is DEFINITELY NOT IN the filter as expected.\n\"fish\" is DEFINITELY NOT IN the filter as expected.\n\"turkey\" is DEFINITELY NOT IN the filter as expected.\n\"duck\" is DEFINITELY NOT IN the filter as expected.\n\"dove\" is DEFINITELY NOT IN the filter as expected.\n\"deer\" is DEFINITELY NOT IN the filter as expected.\n\"elephant\" is DEFINITELY NOT IN the filter as expected.\n\"frog\" is DEFINITELY NOT IN the filter as expected.\n\"falcon\" is DEFINITELY NOT IN the filter as expected.\n\"goat\" is DEFINITELY NOT IN the filter as expected.\n\"gorilla\" is DEFINITELY NOT IN the filter as expected.\n\"hawk\" is DEFINITELY NOT IN the filter as expected.\n```\n\n## License\n\nMIT\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/dnanhkhoa/simple-bloom-filter", "keywords": "bloom-filter scalable-bloom-filter bloomfilter python-3 hashing algorithm data-structure", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "simplebloomfilter", "package_url": "https://pypi.org/project/simplebloomfilter/", "platform": "", "project_url": "https://pypi.org/project/simplebloomfilter/", "project_urls": {"Homepage": "https://github.com/dnanhkhoa/simple-bloom-filter"}, "release_url": "https://pypi.org/project/simplebloomfilter/1.0.0/", "requires_dist": null, "requires_python": "", "summary": "A simple implementation of Bloom Filter and Scalable Bloom Filter for Python 3.", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            # simple-bloom-filter<br><br>[![PyPI](https://img.shields.io/pypi/v/simplebloomfilter.svg)]()<br>[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/simplebloomfilter.svg)]()<br><br>A simple implementation of Bloom Filter and Scalable Bloom Filter for Python 3.<br><br>## Installation<br><br>You can install this package from PyPI using [pip](http://www.pip-installer.org):<br><br>```<br>$ [sudo] pip install simplebloomfilter<br>```<br><br>## Example Usage<br><br>```python<br>#!/usr/bin/python<br># -*- coding: utf-8 -*-<br>from bloomfilter import BloomFilter, ScalableBloomFilter, SizeGrowthRate<br><br>animals = [<br>    \"dog\",<br>    \"cat\",<br>    \"giraffe\",<br>    \"fly\",<br>    \"mosquito\",<br>    \"horse\",<br>    \"eagle\",<br>    \"bird\",<br>    \"bison\",<br>    \"boar\",<br>    \"butterfly\",<br>    \"ant\",<br>    \"anaconda\",<br>    \"bear\",<br>    \"chicken\",<br>    \"dolphin\",<br>    \"donkey\",<br>    \"crow\",<br>    \"crocodile\",<br>]<br><br>other_animals = [<br>    \"badger\",<br>    \"cow\",<br>    \"pig\",<br>    \"sheep\",<br>    \"bee\",<br>    \"wolf\",<br>    \"fox\",<br>    \"whale\",<br>    \"shark\",<br>    \"fish\",<br>    \"turkey\",<br>    \"duck\",<br>    \"dove\",<br>    \"deer\",<br>    \"elephant\",<br>    \"frog\",<br>    \"falcon\",<br>    \"goat\",<br>    \"gorilla\",<br>    \"hawk\",<br>]<br><br><br>def bloom_filter_example():<br>    print(\"========== Bloom Filter Example ==========\")<br>    bloom_filter = BloomFilter(size=1000, fp_prob=1e-6)<br><br>    # Insert items into Bloom filter<br>    for animal in animals:<br>        bloom_filter.add(animal)<br><br>    # Print several statistics of the filter<br>    print(<br>        \"+ Capacity: {} item(s)\".format(bloom_filter.size),<br>        \"+ Number of inserted items: {}\".format(len(bloom_filter)),<br>        \"+ Filter size: {} bit(s)\".format(bloom_filter.filter_size),<br>        \"+ False Positive probability: {}\".format(bloom_filter.fp_prob),<br>        \"+ Number of hash functions: {}\".format(bloom_filter.num_hashes),<br>        sep=\"\\n\",<br>        end=\"\\n\\n\",<br>    )<br><br>    # Check whether an item is in the filter or not<br>    for animal in animals + other_animals:<br>        if animal in bloom_filter:<br>            if animal in other_animals:<br>                print(<br>                    f'\"{animal}\" is a FALSE POSITIVE case (please adjust fp_prob to a smaller value).'<br>                )<br>            else:<br>                print(f'\"{animal}\" is PROBABLY IN the filter.')<br>        else:<br>            print(f'\"{animal}\" is DEFINITELY NOT IN the filter as expected.')<br><br>    # Save to file<br>    with open(\"bloom_filter.bin\", \"wb\") as fp:<br>        bloom_filter.save(fp)<br><br>    # Load from file<br>    with open(\"bloom_filter.bin\", \"rb\") as fp:<br>        bloom_filter = BloomFilter.load(fp)<br><br><br>def scalable_bloom_filter_example():<br>    print(\"========== Bloom Filter Example ==========\")<br>    scalable_bloom_filter = ScalableBloomFilter(<br>        initial_size=100,<br>        initial_fp_prob=1e-7,<br>        size_growth_rate=SizeGrowthRate.LARGE,<br>        fp_prob_rate=0.9,<br>    )<br>    # Insert items into Bloom filter<br>    for animal in animals:<br>        scalable_bloom_filter.add(animal)<br><br>    # Print several statistics of the filter<br>    print(<br>        \"+ Capacity: {} item(s)\".format(scalable_bloom_filter.size),<br>        \"+ Number of inserted items: {}\".format(len(scalable_bloom_filter)),<br>        \"+ Number of Bloom filters: {}\".format(scalable_bloom_filter.num_filters),<br>        \"+ Total size of filters: {} bit(s)\".format(scalable_bloom_filter.filter_size),<br>        \"+ False Positive probability: {}\".format(scalable_bloom_filter.fp_prob),<br>        sep=\"\\n\",<br>        end=\"\\n\\n\",<br>    )<br><br>    # Check whether an item is in the filter or not<br>    for animal in animals + other_animals:<br>        if animal in scalable_bloom_filter:<br>            if animal in other_animals:<br>                print(<br>                    f'\"{animal}\" is a FALSE POSITIVE case (please adjust fp_prob to a smaller value).'<br>                )<br>            else:<br>                print(f'\"{animal}\" is PROBABLY IN the filter.')<br>        else:<br>            print(f'\"{animal}\" is DEFINITELY NOT IN the filter as expected.')<br><br>    # Save to file<br>    with open(\"scalable_bloom_filter.bin\", \"wb\") as fp:<br>        scalable_bloom_filter.save(fp)<br><br>    # Load from file<br>    with open(\"scalable_bloom_filter.bin\", \"rb\") as fp:<br>        scalable_bloom_filter = ScalableBloomFilter.load(fp)<br><br><br>if __name__ == \"__main__\":<br>    bloom_filter_example()<br>    scalable_bloom_filter_example()<br>```<br>```<br>========== Bloom Filter Example ==========<br>+ Capacity: 1000 item(s)<br>+ Number of inserted items: 19<br>+ Filter size: 28756 bit(s)<br>+ False Positive probability: 1e-06<br>+ Number of hash functions: 20<br><br>\"dog\" is PROBABLY IN the filter.<br>\"cat\" is PROBABLY IN the filter.<br>\"giraffe\" is PROBABLY IN the filter.<br>\"fly\" is PROBABLY IN the filter.<br>\"mosquito\" is PROBABLY IN the filter.<br>\"horse\" is PROBABLY IN the filter.<br>\"eagle\" is PROBABLY IN the filter.<br>\"bird\" is PROBABLY IN the filter.<br>\"bison\" is PROBABLY IN the filter.<br>\"boar\" is PROBABLY IN the filter.<br>\"butterfly\" is PROBABLY IN the filter.<br>\"ant\" is PROBABLY IN the filter.<br>\"anaconda\" is PROBABLY IN the filter.<br>\"bear\" is PROBABLY IN the filter.<br>\"chicken\" is PROBABLY IN the filter.<br>\"dolphin\" is PROBABLY IN the filter.<br>\"donkey\" is PROBABLY IN the filter.<br>\"crow\" is PROBABLY IN the filter.<br>\"crocodile\" is PROBABLY IN the filter.<br>\"badger\" is DEFINITELY NOT IN the filter as expected.<br>\"cow\" is DEFINITELY NOT IN the filter as expected.<br>\"pig\" is DEFINITELY NOT IN the filter as expected.<br>\"sheep\" is DEFINITELY NOT IN the filter as expected.<br>\"bee\" is DEFINITELY NOT IN the filter as expected.<br>\"wolf\" is DEFINITELY NOT IN the filter as expected.<br>\"fox\" is DEFINITELY NOT IN the filter as expected.<br>\"whale\" is DEFINITELY NOT IN the filter as expected.<br>\"shark\" is DEFINITELY NOT IN the filter as expected.<br>\"fish\" is DEFINITELY NOT IN the filter as expected.<br>\"turkey\" is DEFINITELY NOT IN the filter as expected.<br>\"duck\" is DEFINITELY NOT IN the filter as expected.<br>\"dove\" is DEFINITELY NOT IN the filter as expected.<br>\"deer\" is DEFINITELY NOT IN the filter as expected.<br>\"elephant\" is DEFINITELY NOT IN the filter as expected.<br>\"frog\" is DEFINITELY NOT IN the filter as expected.<br>\"falcon\" is DEFINITELY NOT IN the filter as expected.<br>\"goat\" is DEFINITELY NOT IN the filter as expected.<br>\"gorilla\" is DEFINITELY NOT IN the filter as expected.<br>\"hawk\" is DEFINITELY NOT IN the filter as expected.<br><br><br>========== Bloom Filter Example ==========<br>+ Capacity: 100 item(s)<br>+ Number of inserted items: 19<br>+ Number of Bloom filters: 1<br>+ Total size of filters: 3355 bit(s)<br>+ False Positive probability: 9.999999994736442e-08<br><br>\"dog\" is PROBABLY IN the filter.<br>\"cat\" is PROBABLY IN the filter.<br>\"giraffe\" is PROBABLY IN the filter.<br>\"fly\" is PROBABLY IN the filter.<br>\"mosquito\" is PROBABLY IN the filter.<br>\"horse\" is PROBABLY IN the filter.<br>\"eagle\" is PROBABLY IN the filter.<br>\"bird\" is PROBABLY IN the filter.<br>\"bison\" is PROBABLY IN the filter.<br>\"boar\" is PROBABLY IN the filter.<br>\"butterfly\" is PROBABLY IN the filter.<br>\"ant\" is PROBABLY IN the filter.<br>\"anaconda\" is PROBABLY IN the filter.<br>\"bear\" is PROBABLY IN the filter.<br>\"chicken\" is PROBABLY IN the filter.<br>\"dolphin\" is PROBABLY IN the filter.<br>\"donkey\" is PROBABLY IN the filter.<br>\"crow\" is PROBABLY IN the filter.<br>\"crocodile\" is PROBABLY IN the filter.<br>\"badger\" is DEFINITELY NOT IN the filter as expected.<br>\"cow\" is DEFINITELY NOT IN the filter as expected.<br>\"pig\" is DEFINITELY NOT IN the filter as expected.<br>\"sheep\" is DEFINITELY NOT IN the filter as expected.<br>\"bee\" is DEFINITELY NOT IN the filter as expected.<br>\"wolf\" is DEFINITELY NOT IN the filter as expected.<br>\"fox\" is DEFINITELY NOT IN the filter as expected.<br>\"whale\" is DEFINITELY NOT IN the filter as expected.<br>\"shark\" is DEFINITELY NOT IN the filter as expected.<br>\"fish\" is DEFINITELY NOT IN the filter as expected.<br>\"turkey\" is DEFINITELY NOT IN the filter as expected.<br>\"duck\" is DEFINITELY NOT IN the filter as expected.<br>\"dove\" is DEFINITELY NOT IN the filter as expected.<br>\"deer\" is DEFINITELY NOT IN the filter as expected.<br>\"elephant\" is DEFINITELY NOT IN the filter as expected.<br>\"frog\" is DEFINITELY NOT IN the filter as expected.<br>\"falcon\" is DEFINITELY NOT IN the filter as expected.<br>\"goat\" is DEFINITELY NOT IN the filter as expected.<br>\"gorilla\" is DEFINITELY NOT IN the filter as expected.<br>\"hawk\" is DEFINITELY NOT IN the filter as expected.<br>```<br><br>## License<br><br>MIT<br>\n          </div>"}, "last_serial": 4159359, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "bb425e512dc4d3786b4f3491bb936051", "sha256": "3611236e6a1b6d16033e413c205d2a00be96061e02109679eb517144f8f09137"}, "downloads": -1, "filename": "simplebloomfilter-1.0.0.tar.gz", "has_sig": false, "md5_digest": "bb425e512dc4d3786b4f3491bb936051", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4829, "upload_time": "2018-08-11T09:57:42", "upload_time_iso_8601": "2018-08-11T09:57:42.741188Z", "url": "https://files.pythonhosted.org/packages/dc/6b/ec90026a1eb6f06f8d6e73c5a99e9710acf3949ef1a7770406c4925073b9/simplebloomfilter-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bb425e512dc4d3786b4f3491bb936051", "sha256": "3611236e6a1b6d16033e413c205d2a00be96061e02109679eb517144f8f09137"}, "downloads": -1, "filename": "simplebloomfilter-1.0.0.tar.gz", "has_sig": false, "md5_digest": "bb425e512dc4d3786b4f3491bb936051", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4829, "upload_time": "2018-08-11T09:57:42", "upload_time_iso_8601": "2018-08-11T09:57:42.741188Z", "url": "https://files.pythonhosted.org/packages/dc/6b/ec90026a1eb6f06f8d6e73c5a99e9710acf3949ef1a7770406c4925073b9/simplebloomfilter-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:11:00 2020"}