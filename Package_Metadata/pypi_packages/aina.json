{"info": {"author": "iLoveTux", "author_email": "cliffbressette@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Natural Language :: English", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "=====\naina\n=====\n\n\n.. image:: https://img.shields.io/travis/iLoveTux/aina.svg\n        :target: https://travis-ci.org/iLoveTux/aina\n\n.. image:: https://readthedocs.org/projects/aina/badge/?version=latest\n        :target: https://aina.readthedocs.io/en/latest/?badge=latest\n        :alt: Documentation Status\n\nAina is a general-purpose stream processing framework. It includes\na simple but powerful templating system which powers a versitle command\nline utility.\n\nNOTE: This is new code. Master is in flux and docs are lacking,\nbut it is in a point where it could be useful to someone. If\nit is useful to you, help us get to 1.0.0. You can start by reading\nthe contributing guide at https://github.com/ilovetux/aina/CONTRIBUTING.rst.\n\n* Free software: GNU General Public License v3\n* Documentation: https://aina.readthedocs.io.\n\n\nFeatures\n--------\n\n* Simple, Powerful templating system\n* Command line utilities\n* All the power of Python\n* No hacks or magic\n* Approachable source code\n* Tested\n* TODO: Web UI\n* TODO: Many default use cases covered\n* TODO: --no-overwrite option\n\nInstalling\n----------\nYou can install the latest stable version with the following command::\n\n  $ pip install aina\n\nAlternately, to clone the latest development version::\n\n  $ git clone https://github.com/ilovetux/aina\n  $ cd aina\n  # Optional\n  $ python setup.py test\n  $ pip install .\n\nConcepts\n--------\n\nThe built-in templating engine is very simple, it consists\nof a namespace and a template. The template is rendered within\nthe context of the namespace.\n\nRendering involves two stages:\n\n  1. scanning the template for strings matching the pattern `{%<Source>%}`\n     where `<Source>` is Python source code which is executed (`exec`)\n     within the context of the namespace. During execution, stdout is\n     captured. After execution, `{%<Source>%}` is replaced with a string\n     containing the output.\n  2. scanning the remaining output for strings matching the pattern\n     `{{<Expression>}}` where `<Expression>` is a Python expression which\n     is replaced with the value to which it evaluates (`eval`)\n\nAs an example, let's look at the following template::\n\n  {%\n  me = \"iLoveTux\"\n  name = \"Bill\"\n  age = 35\n  %}\n  hello {{name}}:\n\n  I heard that you just turned {{str(age)}}. Congratulations!\n\n  Sincerely:\n\n  {% print(me) %}\n\nIf this were rendered, the output would be as follows::\n\n  Hello Bill,\n\n  I heard that you just turned 35. Congratulations!\n\n  Sincerely:\n\n  iLoveTux\n\nThis concept is applied to a variety of use cases and embodied in the form of\ncommand line utilities which cover a number of common use cases.\n\nUsage\n-----\n\nAina can be used directly from within Python, like so::\n\n  from aina import render\n\n  namespace = {\"foo\": \"bar\"}\n  template = \"The value of foo is {{foo}}\"\n\n  result = render(template, namespace)\n\nThis usage has first-class support, but a much handier solution is to use\nthe provided CLI.\n\nThe command line utility, aina, can be run in two modes:\n\n  1. Streaming mode: Data is streamed through and used to populate templates\n  2. Document mode: Render files src and write the results to dst\n\nStreaming mode\n==============\n\nStreaming mode runs in the following manner:\n\n  1. Accept a list of `filenames` (wildcards are accepted), which defaults to stdin\n\n  2. At this point any expressions passed to `--begins` are executed\n\n  3. The files specified are processed in order\n\n    1. Any expressions passed to `--begin-files` are executed\n\n    2. The data from the current file is read line-by-line\n\n      1. Any statements passed to `--tests` are evaluated\n\n      2. Iff all tests pass, the following process is performed.\n\n        1. Any expressions passed to `--begin-lines` are executed\n\n        2. Any templates are rendered through the python logging system\n\n      3. Any expressions passed to `--end-lines` are executed\n\n    3. Any expressions passed to `--end-files` are executed\n\n  4. Any expressions passed to `--ends` are executed\n\nBelow are a few examples. See the documentation for more details::\n\n  # Like grep\n  $ aina stream --test \"'error' in line.lower()\" --template \"{{line}}\" *.log\n\n  # Like wc -l\n  $ aina stream --end-files \"print(fnr, filename)\" *.log\n\n  # Like wc -wl\n  $ aina stream --begins \"words=0\" --begin-lines \"words += nf\" --end-files \"print(words, fnr, filename)\"\n\n  # Find all numbers \"\\d+\" for each line\n  $ aina stream --begins \"import re\" --begin-lines \"print(re.findall(r'\\d+', line))\" *.log\n\n  # Run an XPath\n  $ aina stream --begins \"from lxml import etree\" --begin-lines \"tree = etree.fromstring(line)\" --templates \"{{\"\\n\".join(tree.xpath(\"./*\"))}}\"\n\nPlease see the documentation for more as well as trying::\n\n  $ aina stream --help\n\nImportant Note:\n\nIf anything passed to any of the hooks is determined to exist by `os.path.exists`\nthen it will be read and executed as if that text was passed in on the CLI. This\nis useful for quickly solving character escaping issues.\n\nDocument mode\n-------------\n\nDocument mode renders one or more files and/or directories `src` to\nanother location `dst`. It is used like this::\n\n  $ aina doc <src> <dst>\n\nThere are options to control behavior, but the gist of it is:\n\n  1. if src is a file\n\n    1. if dst is a filename, src is rendered and written to dst\n\n    2. if dst is a directory, src is rendered and written to a file in dst with the same basename as src\n\n  2. if src is a directory\n\n    1. dst must be a directory and every file in src is rendered into a file in dst with the same basename as the file from src\n\n    2. If `--recursive` is specified, the subdirectories will be reproduced in dst\n\nSome important notes:\n\n* If `--interval` is passed an integer value, the program will sleep for that many seconds and check for changes to your templates (based on the file's mtime) in which case they will be re-rendered\n\nUse Cases\n---------\n\nStreaming mode is great for processing incoming log files with `tail --follow=name`\nor for ad-hoc analysis of text files.\n\nDocument mode is incredibly useful for a powerful configuration templating\nsystem. The `--interval` option is incredibly useful as it will only re-render\non a file change, so is great for developing your templates as you can view\nthe results in near-real-time.\n\nDocument mode is also useful for near-real-time rendering of static\nweb resources such as charts, tables, dashboards and more.\n\nIf you find any more use cases, please open an issue or pull request to add it\nhere and in the wiki\n\nCredits\n-------\n\nAuthor: iLoveTux\nThis package was created with Cookiecutter_ and the `audreyr/cookiecutter-pypackage`_ project template.\n\n.. _Cookiecutter: https://github.com/audreyr/cookiecutter\n.. _`audreyr/cookiecutter-pypackage`: https://github.com/audreyr/cookiecutter-pypackage\n\n\n=======\nHistory\n=======\n\n0.1.1 (2018-07-05)\n------------------\n\n* Improved test-suite\n* Execution blocks are now replaced with whatever is sent to stdout\n* `aina doc` now respects the `--interval` argument\n* `aina doc --interval` is fixed and now only re-renders templates which have changed\n* `aina doc` with `--recursive` now processes files in a top-down manner\n* Lots of bug fixes\n* Improved documentation\n* values of expressions are now automatically coerced into strings\n* Drop support for Python 3.4 and add support for Python 3.7\n* Improved logging\n\n0.1.0 (2018-06-20)\n------------------\n\n* First release on PyPI.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ilovetux/aina", "keywords": "aina", "license": "GNU General Public License v3", "maintainer": "", "maintainer_email": "", "name": "aina", "package_url": "https://pypi.org/project/aina/", "platform": "", "project_url": "https://pypi.org/project/aina/", "project_urls": {"Homepage": "https://github.com/ilovetux/aina"}, "release_url": "https://pypi.org/project/aina/0.1.3/", "requires_dist": ["Click (>=6.0)"], "requires_python": "", "summary": "Let the logs flow", "version": "0.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"aina\">\n<h2>aina</h2>\n<a href=\"https://travis-ci.org/iLoveTux/aina\" rel=\"nofollow\"><img alt=\"https://img.shields.io/travis/iLoveTux/aina.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8de4ec1f108c906db83c4011bc24cd87c257461b/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f694c6f76655475782f61696e612e737667\"></a>\n<a href=\"https://aina.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f11a1f6604e4b76502b660afd6e434e55eaa6976/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f61696e612f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<p>Aina is a general-purpose stream processing framework. It includes\na simple but powerful templating system which powers a versitle command\nline utility.</p>\n<p>NOTE: This is new code. Master is in flux and docs are lacking,\nbut it is in a point where it could be useful to someone. If\nit is useful to you, help us get to 1.0.0. You can start by reading\nthe contributing guide at <a href=\"https://github.com/ilovetux/aina/CONTRIBUTING.rst\" rel=\"nofollow\">https://github.com/ilovetux/aina/CONTRIBUTING.rst</a>.</p>\n<ul>\n<li>Free software: GNU General Public License v3</li>\n<li>Documentation: <a href=\"https://aina.readthedocs.io\" rel=\"nofollow\">https://aina.readthedocs.io</a>.</li>\n</ul>\n<div id=\"features\">\n<h3>Features</h3>\n<ul>\n<li>Simple, Powerful templating system</li>\n<li>Command line utilities</li>\n<li>All the power of Python</li>\n<li>No hacks or magic</li>\n<li>Approachable source code</li>\n<li>Tested</li>\n<li>TODO: Web UI</li>\n<li>TODO: Many default use cases covered</li>\n<li>TODO: \u2013no-overwrite option</li>\n</ul>\n</div>\n<div id=\"installing\">\n<h3>Installing</h3>\n<p>You can install the latest stable version with the following command:</p>\n<pre>$ pip install aina\n</pre>\n<p>Alternately, to clone the latest development version:</p>\n<pre>$ git clone https://github.com/ilovetux/aina\n$ cd aina\n# Optional\n$ python setup.py test\n$ pip install .\n</pre>\n</div>\n<div id=\"concepts\">\n<h3>Concepts</h3>\n<p>The built-in templating engine is very simple, it consists\nof a namespace and a template. The template is rendered within\nthe context of the namespace.</p>\n<p>Rendering involves two stages:</p>\n<blockquote>\n<ol>\n<li>scanning the template for strings matching the pattern <cite>{%&lt;Source&gt;%}</cite>\nwhere <cite>&lt;Source&gt;</cite> is Python source code which is executed (<cite>exec</cite>)\nwithin the context of the namespace. During execution, stdout is\ncaptured. After execution, <cite>{%&lt;Source&gt;%}</cite> is replaced with a string\ncontaining the output.</li>\n<li>scanning the remaining output for strings matching the pattern\n<cite>{{&lt;Expression&gt;}}</cite> where <cite>&lt;Expression&gt;</cite> is a Python expression which\nis replaced with the value to which it evaluates (<cite>eval</cite>)</li>\n</ol>\n</blockquote>\n<p>As an example, let\u2019s look at the following template:</p>\n<pre>{%\nme = \"iLoveTux\"\nname = \"Bill\"\nage = 35\n%}\nhello {{name}}:\n\nI heard that you just turned {{str(age)}}. Congratulations!\n\nSincerely:\n\n{% print(me) %}\n</pre>\n<p>If this were rendered, the output would be as follows:</p>\n<pre>Hello Bill,\n\nI heard that you just turned 35. Congratulations!\n\nSincerely:\n\niLoveTux\n</pre>\n<p>This concept is applied to a variety of use cases and embodied in the form of\ncommand line utilities which cover a number of common use cases.</p>\n</div>\n<div id=\"usage\">\n<h3>Usage</h3>\n<p>Aina can be used directly from within Python, like so:</p>\n<pre>from aina import render\n\nnamespace = {\"foo\": \"bar\"}\ntemplate = \"The value of foo is {{foo}}\"\n\nresult = render(template, namespace)\n</pre>\n<p>This usage has first-class support, but a much handier solution is to use\nthe provided CLI.</p>\n<p>The command line utility, aina, can be run in two modes:</p>\n<blockquote>\n<ol>\n<li>Streaming mode: Data is streamed through and used to populate templates</li>\n<li>Document mode: Render files src and write the results to dst</li>\n</ol>\n</blockquote>\n<div id=\"streaming-mode\">\n<h4>Streaming mode</h4>\n<p>Streaming mode runs in the following manner:</p>\n<blockquote>\n<ol>\n<li>Accept a list of <cite>filenames</cite> (wildcards are accepted), which defaults to stdin</li>\n<li>At this point any expressions passed to <cite>\u2013begins</cite> are executed</li>\n<li>The files specified are processed in order</li>\n</ol>\n<blockquote>\n<ol>\n<li>Any expressions passed to <cite>\u2013begin-files</cite> are executed</li>\n<li>The data from the current file is read line-by-line</li>\n</ol>\n<blockquote>\n<ol>\n<li>Any statements passed to <cite>\u2013tests</cite> are evaluated</li>\n<li>Iff all tests pass, the following process is performed.</li>\n</ol>\n<blockquote>\n<ol>\n<li>Any expressions passed to <cite>\u2013begin-lines</cite> are executed</li>\n<li>Any templates are rendered through the python logging system</li>\n</ol>\n</blockquote>\n<ol>\n<li>Any expressions passed to <cite>\u2013end-lines</cite> are executed</li>\n</ol>\n</blockquote>\n<ol>\n<li>Any expressions passed to <cite>\u2013end-files</cite> are executed</li>\n</ol>\n</blockquote>\n<ol>\n<li>Any expressions passed to <cite>\u2013ends</cite> are executed</li>\n</ol>\n</blockquote>\n<p>Below are a few examples. See the documentation for more details:</p>\n<pre># Like grep\n$ aina stream --test \"'error' in line.lower()\" --template \"{{line}}\" *.log\n\n# Like wc -l\n$ aina stream --end-files \"print(fnr, filename)\" *.log\n\n# Like wc -wl\n$ aina stream --begins \"words=0\" --begin-lines \"words += nf\" --end-files \"print(words, fnr, filename)\"\n\n# Find all numbers \"\\d+\" for each line\n$ aina stream --begins \"import re\" --begin-lines \"print(re.findall(r'\\d+', line))\" *.log\n\n# Run an XPath\n$ aina stream --begins \"from lxml import etree\" --begin-lines \"tree = etree.fromstring(line)\" --templates \"{{\"\\n\".join(tree.xpath(\"./*\"))}}\"\n</pre>\n<p>Please see the documentation for more as well as trying:</p>\n<pre>$ aina stream --help\n</pre>\n<p>Important Note:</p>\n<p>If anything passed to any of the hooks is determined to exist by <cite>os.path.exists</cite>\nthen it will be read and executed as if that text was passed in on the CLI. This\nis useful for quickly solving character escaping issues.</p>\n</div>\n</div>\n<div id=\"document-mode\">\n<h3>Document mode</h3>\n<p>Document mode renders one or more files and/or directories <cite>src</cite> to\nanother location <cite>dst</cite>. It is used like this:</p>\n<pre>$ aina doc &lt;src&gt; &lt;dst&gt;\n</pre>\n<p>There are options to control behavior, but the gist of it is:</p>\n<blockquote>\n<ol>\n<li>if src is a file</li>\n</ol>\n<blockquote>\n<ol>\n<li>if dst is a filename, src is rendered and written to dst</li>\n<li>if dst is a directory, src is rendered and written to a file in dst with the same basename as src</li>\n</ol>\n</blockquote>\n<ol>\n<li>if src is a directory</li>\n</ol>\n<blockquote>\n<ol>\n<li>dst must be a directory and every file in src is rendered into a file in dst with the same basename as the file from src</li>\n<li>If <cite>\u2013recursive</cite> is specified, the subdirectories will be reproduced in dst</li>\n</ol>\n</blockquote>\n</blockquote>\n<p>Some important notes:</p>\n<ul>\n<li>If <cite>\u2013interval</cite> is passed an integer value, the program will sleep for that many seconds and check for changes to your templates (based on the file\u2019s mtime) in which case they will be re-rendered</li>\n</ul>\n</div>\n<div id=\"use-cases\">\n<h3>Use Cases</h3>\n<p>Streaming mode is great for processing incoming log files with <cite>tail \u2013follow=name</cite>\nor for ad-hoc analysis of text files.</p>\n<p>Document mode is incredibly useful for a powerful configuration templating\nsystem. The <cite>\u2013interval</cite> option is incredibly useful as it will only re-render\non a file change, so is great for developing your templates as you can view\nthe results in near-real-time.</p>\n<p>Document mode is also useful for near-real-time rendering of static\nweb resources such as charts, tables, dashboards and more.</p>\n<p>If you find any more use cases, please open an issue or pull request to add it\nhere and in the wiki</p>\n</div>\n<div id=\"credits\">\n<h3>Credits</h3>\n<p>Author: iLoveTux\nThis package was created with <a href=\"https://github.com/audreyr/cookiecutter\" rel=\"nofollow\">Cookiecutter</a> and the <a href=\"https://github.com/audreyr/cookiecutter-pypackage\" rel=\"nofollow\">audreyr/cookiecutter-pypackage</a> project template.</p>\n</div>\n</div>\n<div id=\"history\">\n<h2>History</h2>\n<div id=\"id1\">\n<h3>0.1.1 (2018-07-05)</h3>\n<ul>\n<li>Improved test-suite</li>\n<li>Execution blocks are now replaced with whatever is sent to stdout</li>\n<li><cite>aina doc</cite> now respects the <cite>\u2013interval</cite> argument</li>\n<li><cite>aina doc \u2013interval</cite> is fixed and now only re-renders templates which have changed</li>\n<li><cite>aina doc</cite> with <cite>\u2013recursive</cite> now processes files in a top-down manner</li>\n<li>Lots of bug fixes</li>\n<li>Improved documentation</li>\n<li>values of expressions are now automatically coerced into strings</li>\n<li>Drop support for Python 3.4 and add support for Python 3.7</li>\n<li>Improved logging</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>0.1.0 (2018-06-20)</h3>\n<ul>\n<li>First release on PyPI.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 5279001, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "c59b86fd9c7fbd9be1b289dec968a4c1", "sha256": "70d03db1234beacb7a7ad5616c9338960ba48b6e93495f3c24a5fef8fd9954a0"}, "downloads": -1, "filename": "aina-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c59b86fd9c7fbd9be1b289dec968a4c1", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 7234, "upload_time": "2018-06-25T11:52:05", "upload_time_iso_8601": "2018-06-25T11:52:05.236663Z", "url": "https://files.pythonhosted.org/packages/51/e9/f5c51910737e7c3dc954054696591312bad83b83d3c2e6bbf823036a3de4/aina-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7f272d8cd286beecc772b7289074e059", "sha256": "8c96e14147fc551cfee5443c84c964bffbee672f5610838b83a7b3bd955def3c"}, "downloads": -1, "filename": "aina-0.1.0.tar.gz", "has_sig": false, "md5_digest": "7f272d8cd286beecc772b7289074e059", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17862, "upload_time": "2018-06-25T11:52:06", "upload_time_iso_8601": "2018-06-25T11:52:06.538829Z", "url": "https://files.pythonhosted.org/packages/cb/a8/ec66db81ebe0db7ec6331165478cb564c5ee713950344bdce5115c7d20fc/aina-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "912e138b6bbcc92a16c0563654a517df", "sha256": "442186ca3c7a9ada552b9da459b9c5ff2c2a940b1327e5bca7ac6267c3188efa"}, "downloads": -1, "filename": "aina-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "912e138b6bbcc92a16c0563654a517df", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 8309, "upload_time": "2018-07-05T16:10:41", "upload_time_iso_8601": "2018-07-05T16:10:41.481829Z", "url": "https://files.pythonhosted.org/packages/36/41/2c3689c68408486475a50736a6bfad40f021fa9c1942fc9d4ffe52924ea5/aina-0.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3ae7de1f1bf665d2888ef3c1fb7731c0", "sha256": "c7c60d48aed956d66bbc57494f96fed6ce0332f1963e659a71a4169c77cffcca"}, "downloads": -1, "filename": "aina-0.1.1.tar.gz", "has_sig": false, "md5_digest": "3ae7de1f1bf665d2888ef3c1fb7731c0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20990, "upload_time": "2018-07-05T16:10:40", "upload_time_iso_8601": "2018-07-05T16:10:40.178427Z", "url": "https://files.pythonhosted.org/packages/7c/6a/2da499cc0273e904ef1fa7c2eaeff18ab6c8bbc6ee0fc5db08dec4abdb29/aina-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "36b0e1e543a0d265bbad2d14cf82979a", "sha256": "1f53e33d9dcfdbe2d4054cd54429ffd5aa498b17d3cc287b8246c92fc3a07a54"}, "downloads": -1, "filename": "aina-0.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "36b0e1e543a0d265bbad2d14cf82979a", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 8377, "upload_time": "2018-07-26T12:52:05", "upload_time_iso_8601": "2018-07-26T12:52:05.344901Z", "url": "https://files.pythonhosted.org/packages/76/c0/e09c7380349ccbd93244c32936753c5579ba02029b352e12514268c5b625/aina-0.1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cd7a1a3f22606b483a01f87eecfcf88a", "sha256": "373bea4fc1a18cc3298555afa90b01a6e6f9ec3ebe8bb7292a1042abfbb93c77"}, "downloads": -1, "filename": "aina-0.1.2.tar.gz", "has_sig": false, "md5_digest": "cd7a1a3f22606b483a01f87eecfcf88a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21012, "upload_time": "2018-07-26T12:52:04", "upload_time_iso_8601": "2018-07-26T12:52:04.089480Z", "url": "https://files.pythonhosted.org/packages/3d/91/4365d6ef2f57b75d5118dcbfe48f9d7e550d58e5c2f6467012ef8bd96807/aina-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "b149822945973579c9bd81a7e0ec4e37", "sha256": "3501204438fd0738e357aff99158a4244a836f3b9497135860fdc4a1e8d3b276"}, "downloads": -1, "filename": "aina-0.1.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b149822945973579c9bd81a7e0ec4e37", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9657, "upload_time": "2019-05-16T19:54:21", "upload_time_iso_8601": "2019-05-16T19:54:21.611933Z", "url": "https://files.pythonhosted.org/packages/98/20/52cefc2082924bc5980eceb8b02aa579aabc796142d9cb389f20dcc10f02/aina-0.1.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "05fd18c142e84feed8bb8ee051054ade", "sha256": "4767512532a6bcccb519eefe4b3b7d505d06c47aa0b369a212d4a28a2fe90d4c"}, "downloads": -1, "filename": "aina-0.1.3.tar.gz", "has_sig": false, "md5_digest": "05fd18c142e84feed8bb8ee051054ade", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19298, "upload_time": "2019-05-16T19:54:22", "upload_time_iso_8601": "2019-05-16T19:54:22.865142Z", "url": "https://files.pythonhosted.org/packages/cb/a8/8f8f969361fb96d422d1f0f450388dc62fe538616dd5db1f193b33907c6b/aina-0.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b149822945973579c9bd81a7e0ec4e37", "sha256": "3501204438fd0738e357aff99158a4244a836f3b9497135860fdc4a1e8d3b276"}, "downloads": -1, "filename": "aina-0.1.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b149822945973579c9bd81a7e0ec4e37", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9657, "upload_time": "2019-05-16T19:54:21", "upload_time_iso_8601": "2019-05-16T19:54:21.611933Z", "url": "https://files.pythonhosted.org/packages/98/20/52cefc2082924bc5980eceb8b02aa579aabc796142d9cb389f20dcc10f02/aina-0.1.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "05fd18c142e84feed8bb8ee051054ade", "sha256": "4767512532a6bcccb519eefe4b3b7d505d06c47aa0b369a212d4a28a2fe90d4c"}, "downloads": -1, "filename": "aina-0.1.3.tar.gz", "has_sig": false, "md5_digest": "05fd18c142e84feed8bb8ee051054ade", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19298, "upload_time": "2019-05-16T19:54:22", "upload_time_iso_8601": "2019-05-16T19:54:22.865142Z", "url": "https://files.pythonhosted.org/packages/cb/a8/8f8f969361fb96d422d1f0f450388dc62fe538616dd5db1f193b33907c6b/aina-0.1.3.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:21:52 2020"}