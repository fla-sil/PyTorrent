{"info": {"author": "Mark A Heywood", "author_email": "mark@shinex.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Intended Audience :: End Users/Desktop", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Topic :: Home Automation", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: System :: Hardware"], "description": "Ultrasonic HC-SR04 Sensor Python Library for Raspberry Pi GPIO\n==============================================================\n\nThis sensor uses sound waves to provide a means to measure the \ndistance between the sensor and an object. It is not the most \naccurate distance sensor available, but many projects do not \nneed pinpoint accuracy. After a quick look at Banggood website, \nyou can get five HC-SR04 sensors for 5.07 GBP (6.86 USD). And \nwhile the sensor is not the most compact, its low price means \na robot vehicle can have a full sensor kit fitted very cheaply.\n\nYou can find the article here for more details:\n\n`Article <https://www.bluetin.io/sensors/python-library-ultrasonic-hc-sr04>`__.\n\nExample Code\n------------\n\nSimplest Program for Distance Measuring:\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    # Import necessary libraries.\n    from Bluetin_Echo import Echo\n\n    # Define GPIO pin constants.\n    TRIGGER_PIN = 16\n    ECHO_PIN = 12\n    # Initialise Sensor with pins, speed of sound.\n    speed_of_sound = 315\n    echo = Echo(TRIGGER_PIN, ECHO_PIN, speed_of_sound)\n    # Measure Distance 5 times, return average.\n    samples = 5\n    result = echo.read('cm', samples)\n    # Print result.\n    print(result, 'cm')\n    # Reset GPIO Pins.\n    echo.stop()\n\nExample for Taking Multiple Distance Measurements:\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    \"\"\"File: echo_loop.py\"\"\"\n    # Import necessary libraries.\n    from Bluetin_Echo import Echo\n\n    # Define GPIO pin constants.\n    TRIGGER_PIN = 16\n    ECHO_PIN = 12\n    # Initialise Sensor with pins, speed of sound.\n    speed_of_sound = 315\n    echo = Echo(TRIGGER_PIN, ECHO_PIN, speed_of_sound)\n    # Measure Distance 5 times, return average.\n    samples = 5\n    # Take multiple measurements.\n    for counter in range(0, 10):\n        result = echo.read('cm', samples)\n        # Print result.\n        print(result, 'cm')\n\n    # Reset GPIO Pins.\n    echo.stop()\n\nLoop Through Multiple Sensors\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    \"\"\"File: echo_multi_sensor.py\"\"\"\n    # Import necessary libraries.\n    from time import sleep\n\n    from Bluetin_Echo import Echo\n\n    # Define pin constants\n    TRIGGER_PIN_1 = 16\n    ECHO_PIN_1 = 12\n    TRIGGER_PIN_2 = 26\n    ECHO_PIN_2 = 19\n\n    # Initialise two sensors.\n    echo = [Echo(TRIGGER_PIN_1, ECHO_PIN_1)\n            , Echo(TRIGGER_PIN_2, ECHO_PIN_2)]\n\n    def main():\n        sleep(0.1)\n        for counter in range(1, 6):\n            for counter2 in range(0, len(echo)):\n                result = echo[counter2].read('cm', 3)\n                print('Sensor {} - {} cm'.format(counter2, round(result,2)))\n\n        echo[0].stop()\n\n    if __name__ == '__main__':\n        main()\n\n\nLibrary v0.2.0\n--------------\n\nTest All Library Features\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n\t#!/usr/bin/env python3\n\n\tfrom time import sleep\n\tfrom Bluetin_Echo import Echo\n\n\t\"\"\" Define GPIO pin constants \"\"\"\n\tTRIGGER_PIN = 17\n\tECHO_PIN = 18\n\t\"\"\" Calibrate sensor with initial speed of sound m/s value \"\"\"\n\tSPEED_OF_SOUND = 343\n\t\"\"\" Initialise Sensor with pins, speed of sound. \"\"\"\n\techo = Echo(TRIGGER_PIN, ECHO_PIN, SPEED_OF_SOUND)\n\n\n\tdef main():\n\t\t\"\"\"\n\t\tTest class properties and methods.\n\t\t\"\"\"\n\n\t\tprint('\\n+++++ Properties +++++\\n')\n\n\t\t\"\"\"\n\t\tCheck that the sensor is ready to operate.\n\t\t\"\"\"\n\t\tprint('Sensor ready? {}'.format(echo.is_ready))\n\t\tsleep(0.06)\n\t\tprint('Sensor ready? {}'.format(echo.is_ready))\n\n\t\t\"\"\"\n\t\tYou can adjust the speed of sound to fit environmental conditions.\n\t\t\"\"\"\n\t\tspeed = echo.speed\n\t\tprint('Speed of sound Setting: {}m/s'.format(speed))\n\t\techo.speed = speed\n\n\t\t\"\"\"\n\t\tThis setting is important because it allows a rest period between\n\t\teach sensor activation. Accessing the sensor within a rest period\n\t\twill result in a Not Ready (2) error code. Reducing the value of\n\t\tthis setting can cause unstable sensor readings.\n\t\t\"\"\"\n\t\trestTime = echo.rest\n\t\tprint('Sensor rest time: {}s'.format(restTime))\n\t\techo.rest = restTime\n\n\t\t\"\"\"\n\t\tThe default is fine for this property. This timeout prevents the\n\t\tcode from getting stuck in an infinite loop in case the sensor\n\t\ttrigger pin fails to change state.\n\t\t\"\"\"\n\t\ttriggerTimeout = echo.trigger_timeout\n\t\tprint('Sensor trigger timeout: {}s'.format(triggerTimeout))\n\t\techo.trigger_timeout = triggerTimeout\n\n\t\t\"\"\"\n\t\tRead and update sensor echo timeout.\n\t\tThe is an alternative way to set a maximum sensor scan distance\n\t\tusing a time value.\n\t\t\"\"\"\n\t\techoTimeout = echo.echo_timeout\n\t\tprint('Sensor echo timeout: {}s'.format(echoTimeout))\n\t\techo.echo_timeout = echoTimeout\n\n\t\t\"\"\"\n\t\tThis property adds a time offset to the max sensor distance\n\t\tsetting. Adjust this property value to stop the sensor out of range\n\t\terror appearing below the maximum distance setting during operation.\n\t\t\"\"\"\n\t\techoOffset = echo.echo_return_offset\n\t\tprint('Sensor echo time offset: {}s'.format(echoOffset))\n\t\techo.echo_return_offset = echoOffset\n\n\t\t\"\"\"\n\t\tRead this property to get the error code following a sensor read.\n\t\tThe error codes are integer values; 0 = Good, 1 = Out of Range and\n\t\t2 = Not Ready.\n\t\t\"\"\"\n\t\terrorCode = echo.error_code\n\t\tprint('Error code from last sensor read: {}'.format(errorCode))\n\n\t\t\"\"\"\n\t\tThe default sensor scan distance is set to 3m. The following property\n\t\twill allow an alternate max scan distance setting. Any sensor echos\n\t\tthat fall outside the set distance will cause an out of range error.\n\t\tUnits mm, cm, m and inch are supported.\n\t\tYou can tune the sensor to match the max distance setting using the\n\t\techo_return_offset property.\n\t\t\"\"\"\n\t\techo.max_distance(30, 'cm')\n\n\t\t\"\"\"\n\t\tThis property sets the default measuring unit, which works with\n\t\tthe new send and samples methods. Set this property once with your \n\t\tprefered unit of measure. Then use the send method to return sensor\n\t\tresults in that unit you set. Class default is cm on initialisation.\n\t\t\"\"\"\n\t\tdefaultUnit = echo.default_unit\n\t\tprint('Current Unit Setting: {}'.format(defaultUnit))\n\t\techo.default_unit = defaultUnit\n\n\t\t\"\"\"\n\t\tTest using each unit of measure.\n\t\t\"\"\"\n\t\tprint('\\n+++++ Single sample sensor reads. +++++\\n')\n\t\tsleep(0.06)\n\t\taverageOf = 1\n\t\tresult = echo.read('mm', averageOf)\n\t\tprint('{:.2f} mm, Error: {}'.format(result, echo.error_code))\n\t\tsleep(0.06)\n\t\tresult = echo.read('cm', averageOf)\n\t\tprint('{:.2f} cm, Error: {}'.format(result, echo.error_code))\n\t\tsleep(0.06)\n\t\tresult = echo.read('m', averageOf)\n\t\tprint('{:.2f} m, Error: {}'.format(result, echo.error_code))\n\t\tsleep(0.06)\n\t\tresult = echo.read('inch', averageOf)\n\t\tprint('{:.2f} inch, Error: {}'.format(result, echo.error_code))\n\n\t\t\"\"\"\n\t\tThen, get an average of multiple reads.\n\t\t\"\"\"\n\t\tprint('\\n+++++ Return an average of multiple sensor reads. +++++\\n')\n\t\tsleep(0.06)\n\t\taverageOf = 10\n\t\tresult = echo.read('mm', averageOf)\n\t\tprint('Average: {:.2f} mm'.format(result))\n\t\tsleep(0.06)\n\t\tresult = echo.read('cm', averageOf)\n\t\tprint('Average: {:.2f} cm'.format(result))\n\t\tsleep(0.06)\n\t\tresult = echo.read('m', averageOf)\n\t\tprint('Average: {:.2f} m'.format(result))\n\t\tsleep(0.06)\n\t\tresult = echo.read('inch', averageOf)\n\t\tprint('Average: {:.2f} inch'.format(result))\n\n\t\t\"\"\"\n\t\tGet a single sensor read using the default unit of measure.\n\t\tCheck error codes after each sensor reading to monitor operation\n\t\tsuccess.\n\t\t\"\"\"\n\t\tprint('\\n+++++ Single sensor read using the default unit of measure. +++++\\n')\n\t\tsleep(0.06)\n\t\techo.default_unit = 'm'\n\t\tresult = echo.send()\n\t\tprint('{:.2f} m, Error: {}'.format(result, echo.error_code))\n\n\t\t\"\"\"\n\t\tGet an average value from multiple sensor readings. Returns an average of\n\t\tonly the good sensor reads. The average value is returned with\n\t\tthe number of samples used to make the average sum calculation.\n\t\t\"\"\"\n\t\tprint('\\n+++++ Return an average from multiple sensor reads. +++++')\n\t\tprint('+++++ Returns two values; average and good samples. +++++\\n')\n\t\tsleep(0.06)\n\t\techo.default_unit = 'm'\n\t\tresult, samples = echo.samples(10)\n\t\tprint('Average: {:.2f} m, From {} good samples'.format(result, samples))\n\n\t\t\"\"\" Reset GPIO Pins. \"\"\"\n\t\techo.stop()\n\n\n\tif __name__ == \"__main__\":\n\t\tmain()\n\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/MarkAHeywood/Bluetin_Python_Echo", "keywords": "RPI,GPIO,Raspberry Pi,Ultrasonic,HC-SR04,Transducer,Distance Measuring,Sensor", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "Bluetin-Echo", "package_url": "https://pypi.org/project/Bluetin-Echo/", "platform": "", "project_url": "https://pypi.org/project/Bluetin-Echo/", "project_urls": {"Homepage": "https://github.com/MarkAHeywood/Bluetin_Python_Echo"}, "release_url": "https://pypi.org/project/Bluetin-Echo/0.2.0/", "requires_dist": ["RPi.GPIO"], "requires_python": "", "summary": "Raspberry Pi Python Library for Ultrasonic Module HC-SR04 Distance Measuring Transducer.", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This sensor uses sound waves to provide a means to measure the\ndistance between the sensor and an object. It is not the most\naccurate distance sensor available, but many projects do not\nneed pinpoint accuracy. After a quick look at Banggood website,\nyou can get five HC-SR04 sensors for 5.07 GBP (6.86 USD). And\nwhile the sensor is not the most compact, its low price means\na robot vehicle can have a full sensor kit fitted very cheaply.</p>\n<p>You can find the article here for more details:</p>\n<p><a href=\"https://www.bluetin.io/sensors/python-library-ultrasonic-hc-sr04\" rel=\"nofollow\">Article</a>.</p>\n<div id=\"example-code\">\n<h2>Example Code</h2>\n<div id=\"simplest-program-for-distance-measuring\">\n<h3>Simplest Program for Distance Measuring:</h3>\n<pre><span class=\"c1\"># Import necessary libraries.</span>\n<span class=\"kn\">from</span> <span class=\"nn\">Bluetin_Echo</span> <span class=\"kn\">import</span> <span class=\"n\">Echo</span>\n\n<span class=\"c1\"># Define GPIO pin constants.</span>\n<span class=\"n\">TRIGGER_PIN</span> <span class=\"o\">=</span> <span class=\"mi\">16</span>\n<span class=\"n\">ECHO_PIN</span> <span class=\"o\">=</span> <span class=\"mi\">12</span>\n<span class=\"c1\"># Initialise Sensor with pins, speed of sound.</span>\n<span class=\"n\">speed_of_sound</span> <span class=\"o\">=</span> <span class=\"mi\">315</span>\n<span class=\"n\">echo</span> <span class=\"o\">=</span> <span class=\"n\">Echo</span><span class=\"p\">(</span><span class=\"n\">TRIGGER_PIN</span><span class=\"p\">,</span> <span class=\"n\">ECHO_PIN</span><span class=\"p\">,</span> <span class=\"n\">speed_of_sound</span><span class=\"p\">)</span>\n<span class=\"c1\"># Measure Distance 5 times, return average.</span>\n<span class=\"n\">samples</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">echo</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s1\">'cm'</span><span class=\"p\">,</span> <span class=\"n\">samples</span><span class=\"p\">)</span>\n<span class=\"c1\"># Print result.</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"s1\">'cm'</span><span class=\"p\">)</span>\n<span class=\"c1\"># Reset GPIO Pins.</span>\n<span class=\"n\">echo</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"example-for-taking-multiple-distance-measurements\">\n<h3>Example for Taking Multiple Distance Measurements:</h3>\n<pre><span class=\"sd\">\"\"\"File: echo_loop.py\"\"\"</span>\n<span class=\"c1\"># Import necessary libraries.</span>\n<span class=\"kn\">from</span> <span class=\"nn\">Bluetin_Echo</span> <span class=\"kn\">import</span> <span class=\"n\">Echo</span>\n\n<span class=\"c1\"># Define GPIO pin constants.</span>\n<span class=\"n\">TRIGGER_PIN</span> <span class=\"o\">=</span> <span class=\"mi\">16</span>\n<span class=\"n\">ECHO_PIN</span> <span class=\"o\">=</span> <span class=\"mi\">12</span>\n<span class=\"c1\"># Initialise Sensor with pins, speed of sound.</span>\n<span class=\"n\">speed_of_sound</span> <span class=\"o\">=</span> <span class=\"mi\">315</span>\n<span class=\"n\">echo</span> <span class=\"o\">=</span> <span class=\"n\">Echo</span><span class=\"p\">(</span><span class=\"n\">TRIGGER_PIN</span><span class=\"p\">,</span> <span class=\"n\">ECHO_PIN</span><span class=\"p\">,</span> <span class=\"n\">speed_of_sound</span><span class=\"p\">)</span>\n<span class=\"c1\"># Measure Distance 5 times, return average.</span>\n<span class=\"n\">samples</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n<span class=\"c1\"># Take multiple measurements.</span>\n<span class=\"k\">for</span> <span class=\"n\">counter</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">):</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">echo</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s1\">'cm'</span><span class=\"p\">,</span> <span class=\"n\">samples</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Print result.</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"s1\">'cm'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Reset GPIO Pins.</span>\n<span class=\"n\">echo</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"loop-through-multiple-sensors\">\n<h3>Loop Through Multiple Sensors</h3>\n<pre><span class=\"sd\">\"\"\"File: echo_multi_sensor.py\"\"\"</span>\n<span class=\"c1\"># Import necessary libraries.</span>\n<span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"kn\">import</span> <span class=\"n\">sleep</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">Bluetin_Echo</span> <span class=\"kn\">import</span> <span class=\"n\">Echo</span>\n\n<span class=\"c1\"># Define pin constants</span>\n<span class=\"n\">TRIGGER_PIN_1</span> <span class=\"o\">=</span> <span class=\"mi\">16</span>\n<span class=\"n\">ECHO_PIN_1</span> <span class=\"o\">=</span> <span class=\"mi\">12</span>\n<span class=\"n\">TRIGGER_PIN_2</span> <span class=\"o\">=</span> <span class=\"mi\">26</span>\n<span class=\"n\">ECHO_PIN_2</span> <span class=\"o\">=</span> <span class=\"mi\">19</span>\n\n<span class=\"c1\"># Initialise two sensors.</span>\n<span class=\"n\">echo</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">Echo</span><span class=\"p\">(</span><span class=\"n\">TRIGGER_PIN_1</span><span class=\"p\">,</span> <span class=\"n\">ECHO_PIN_1</span><span class=\"p\">)</span>\n        <span class=\"p\">,</span> <span class=\"n\">Echo</span><span class=\"p\">(</span><span class=\"n\">TRIGGER_PIN_2</span><span class=\"p\">,</span> <span class=\"n\">ECHO_PIN_2</span><span class=\"p\">)]</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.1</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">counter</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">counter2</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">echo</span><span class=\"p\">)):</span>\n            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">echo</span><span class=\"p\">[</span><span class=\"n\">counter2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s1\">'cm'</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Sensor </span><span class=\"si\">{}</span><span class=\"s1\"> - </span><span class=\"si\">{}</span><span class=\"s1\"> cm'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">counter2</span><span class=\"p\">,</span> <span class=\"nb\">round</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">)))</span>\n\n    <span class=\"n\">echo</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">()</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">main</span><span class=\"p\">()</span>\n</pre>\n</div>\n</div>\n<div id=\"library-v0-2-0\">\n<h2>Library v0.2.0</h2>\n<h2 id=\"test-all-library-features\"><span class=\"section-subtitle\">Test All Library Features</span></h2>\n<pre><span class=\"ch\">#!/usr/bin/env python3</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"kn\">import</span> <span class=\"n\">sleep</span>\n<span class=\"kn\">from</span> <span class=\"nn\">Bluetin_Echo</span> <span class=\"kn\">import</span> <span class=\"n\">Echo</span>\n\n<span class=\"sd\">\"\"\" Define GPIO pin constants \"\"\"</span>\n<span class=\"n\">TRIGGER_PIN</span> <span class=\"o\">=</span> <span class=\"mi\">17</span>\n<span class=\"n\">ECHO_PIN</span> <span class=\"o\">=</span> <span class=\"mi\">18</span>\n<span class=\"sd\">\"\"\" Calibrate sensor with initial speed of sound m/s value \"\"\"</span>\n<span class=\"n\">SPEED_OF_SOUND</span> <span class=\"o\">=</span> <span class=\"mi\">343</span>\n<span class=\"sd\">\"\"\" Initialise Sensor with pins, speed of sound. \"\"\"</span>\n<span class=\"n\">echo</span> <span class=\"o\">=</span> <span class=\"n\">Echo</span><span class=\"p\">(</span><span class=\"n\">TRIGGER_PIN</span><span class=\"p\">,</span> <span class=\"n\">ECHO_PIN</span><span class=\"p\">,</span> <span class=\"n\">SPEED_OF_SOUND</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n        <span class=\"sd\">\"\"\"\n        Test class properties and methods.\n        \"\"\"</span>\n\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"se\">\\n</span><span class=\"s1\">+++++ Properties +++++</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n\n        <span class=\"sd\">\"\"\"\n        Check that the sensor is ready to operate.\n        \"\"\"</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Sensor ready? </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">echo</span><span class=\"o\">.</span><span class=\"n\">is_ready</span><span class=\"p\">))</span>\n        <span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.06</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Sensor ready? </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">echo</span><span class=\"o\">.</span><span class=\"n\">is_ready</span><span class=\"p\">))</span>\n\n        <span class=\"sd\">\"\"\"\n        You can adjust the speed of sound to fit environmental conditions.\n        \"\"\"</span>\n        <span class=\"n\">speed</span> <span class=\"o\">=</span> <span class=\"n\">echo</span><span class=\"o\">.</span><span class=\"n\">speed</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Speed of sound Setting: </span><span class=\"si\">{}</span><span class=\"s1\">m/s'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">speed</span><span class=\"p\">))</span>\n        <span class=\"n\">echo</span><span class=\"o\">.</span><span class=\"n\">speed</span> <span class=\"o\">=</span> <span class=\"n\">speed</span>\n\n        <span class=\"sd\">\"\"\"\n        This setting is important because it allows a rest period between\n        each sensor activation. Accessing the sensor within a rest period\n        will result in a Not Ready (2) error code. Reducing the value of\n        this setting can cause unstable sensor readings.\n        \"\"\"</span>\n        <span class=\"n\">restTime</span> <span class=\"o\">=</span> <span class=\"n\">echo</span><span class=\"o\">.</span><span class=\"n\">rest</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Sensor rest time: </span><span class=\"si\">{}</span><span class=\"s1\">s'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">restTime</span><span class=\"p\">))</span>\n        <span class=\"n\">echo</span><span class=\"o\">.</span><span class=\"n\">rest</span> <span class=\"o\">=</span> <span class=\"n\">restTime</span>\n\n        <span class=\"sd\">\"\"\"\n        The default is fine for this property. This timeout prevents the\n        code from getting stuck in an infinite loop in case the sensor\n        trigger pin fails to change state.\n        \"\"\"</span>\n        <span class=\"n\">triggerTimeout</span> <span class=\"o\">=</span> <span class=\"n\">echo</span><span class=\"o\">.</span><span class=\"n\">trigger_timeout</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Sensor trigger timeout: </span><span class=\"si\">{}</span><span class=\"s1\">s'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">triggerTimeout</span><span class=\"p\">))</span>\n        <span class=\"n\">echo</span><span class=\"o\">.</span><span class=\"n\">trigger_timeout</span> <span class=\"o\">=</span> <span class=\"n\">triggerTimeout</span>\n\n        <span class=\"sd\">\"\"\"\n        Read and update sensor echo timeout.\n        The is an alternative way to set a maximum sensor scan distance\n        using a time value.\n        \"\"\"</span>\n        <span class=\"n\">echoTimeout</span> <span class=\"o\">=</span> <span class=\"n\">echo</span><span class=\"o\">.</span><span class=\"n\">echo_timeout</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Sensor echo timeout: </span><span class=\"si\">{}</span><span class=\"s1\">s'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">echoTimeout</span><span class=\"p\">))</span>\n        <span class=\"n\">echo</span><span class=\"o\">.</span><span class=\"n\">echo_timeout</span> <span class=\"o\">=</span> <span class=\"n\">echoTimeout</span>\n\n        <span class=\"sd\">\"\"\"\n        This property adds a time offset to the max sensor distance\n        setting. Adjust this property value to stop the sensor out of range\n        error appearing below the maximum distance setting during operation.\n        \"\"\"</span>\n        <span class=\"n\">echoOffset</span> <span class=\"o\">=</span> <span class=\"n\">echo</span><span class=\"o\">.</span><span class=\"n\">echo_return_offset</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Sensor echo time offset: </span><span class=\"si\">{}</span><span class=\"s1\">s'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">echoOffset</span><span class=\"p\">))</span>\n        <span class=\"n\">echo</span><span class=\"o\">.</span><span class=\"n\">echo_return_offset</span> <span class=\"o\">=</span> <span class=\"n\">echoOffset</span>\n\n        <span class=\"sd\">\"\"\"\n        Read this property to get the error code following a sensor read.\n        The error codes are integer values; 0 = Good, 1 = Out of Range and\n        2 = Not Ready.\n        \"\"\"</span>\n        <span class=\"n\">errorCode</span> <span class=\"o\">=</span> <span class=\"n\">echo</span><span class=\"o\">.</span><span class=\"n\">error_code</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Error code from last sensor read: </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">errorCode</span><span class=\"p\">))</span>\n\n        <span class=\"sd\">\"\"\"\n        The default sensor scan distance is set to 3m. The following property\n        will allow an alternate max scan distance setting. Any sensor echos\n        that fall outside the set distance will cause an out of range error.\n        Units mm, cm, m and inch are supported.\n        You can tune the sensor to match the max distance setting using the\n        echo_return_offset property.\n        \"\"\"</span>\n        <span class=\"n\">echo</span><span class=\"o\">.</span><span class=\"n\">max_distance</span><span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"s1\">'cm'</span><span class=\"p\">)</span>\n\n        <span class=\"sd\">\"\"\"\n        This property sets the default measuring unit, which works with\n        the new send and samples methods. Set this property once with your\n        prefered unit of measure. Then use the send method to return sensor\n        results in that unit you set. Class default is cm on initialisation.\n        \"\"\"</span>\n        <span class=\"n\">defaultUnit</span> <span class=\"o\">=</span> <span class=\"n\">echo</span><span class=\"o\">.</span><span class=\"n\">default_unit</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Current Unit Setting: </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">defaultUnit</span><span class=\"p\">))</span>\n        <span class=\"n\">echo</span><span class=\"o\">.</span><span class=\"n\">default_unit</span> <span class=\"o\">=</span> <span class=\"n\">defaultUnit</span>\n\n        <span class=\"sd\">\"\"\"\n        Test using each unit of measure.\n        \"\"\"</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"se\">\\n</span><span class=\"s1\">+++++ Single sample sensor reads. +++++</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n        <span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.06</span><span class=\"p\">)</span>\n        <span class=\"n\">averageOf</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">echo</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s1\">'mm'</span><span class=\"p\">,</span> <span class=\"n\">averageOf</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"si\">{:.2f}</span><span class=\"s1\"> mm, Error: </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"n\">echo</span><span class=\"o\">.</span><span class=\"n\">error_code</span><span class=\"p\">))</span>\n        <span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.06</span><span class=\"p\">)</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">echo</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s1\">'cm'</span><span class=\"p\">,</span> <span class=\"n\">averageOf</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"si\">{:.2f}</span><span class=\"s1\"> cm, Error: </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"n\">echo</span><span class=\"o\">.</span><span class=\"n\">error_code</span><span class=\"p\">))</span>\n        <span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.06</span><span class=\"p\">)</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">echo</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s1\">'m'</span><span class=\"p\">,</span> <span class=\"n\">averageOf</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"si\">{:.2f}</span><span class=\"s1\"> m, Error: </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"n\">echo</span><span class=\"o\">.</span><span class=\"n\">error_code</span><span class=\"p\">))</span>\n        <span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.06</span><span class=\"p\">)</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">echo</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s1\">'inch'</span><span class=\"p\">,</span> <span class=\"n\">averageOf</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"si\">{:.2f}</span><span class=\"s1\"> inch, Error: </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"n\">echo</span><span class=\"o\">.</span><span class=\"n\">error_code</span><span class=\"p\">))</span>\n\n        <span class=\"sd\">\"\"\"\n        Then, get an average of multiple reads.\n        \"\"\"</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"se\">\\n</span><span class=\"s1\">+++++ Return an average of multiple sensor reads. +++++</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n        <span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.06</span><span class=\"p\">)</span>\n        <span class=\"n\">averageOf</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">echo</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s1\">'mm'</span><span class=\"p\">,</span> <span class=\"n\">averageOf</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Average: </span><span class=\"si\">{:.2f}</span><span class=\"s1\"> mm'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">))</span>\n        <span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.06</span><span class=\"p\">)</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">echo</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s1\">'cm'</span><span class=\"p\">,</span> <span class=\"n\">averageOf</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Average: </span><span class=\"si\">{:.2f}</span><span class=\"s1\"> cm'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">))</span>\n        <span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.06</span><span class=\"p\">)</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">echo</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s1\">'m'</span><span class=\"p\">,</span> <span class=\"n\">averageOf</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Average: </span><span class=\"si\">{:.2f}</span><span class=\"s1\"> m'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">))</span>\n        <span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.06</span><span class=\"p\">)</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">echo</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s1\">'inch'</span><span class=\"p\">,</span> <span class=\"n\">averageOf</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Average: </span><span class=\"si\">{:.2f}</span><span class=\"s1\"> inch'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">))</span>\n\n        <span class=\"sd\">\"\"\"\n        Get a single sensor read using the default unit of measure.\n        Check error codes after each sensor reading to monitor operation\n        success.\n        \"\"\"</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"se\">\\n</span><span class=\"s1\">+++++ Single sensor read using the default unit of measure. +++++</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n        <span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.06</span><span class=\"p\">)</span>\n        <span class=\"n\">echo</span><span class=\"o\">.</span><span class=\"n\">default_unit</span> <span class=\"o\">=</span> <span class=\"s1\">'m'</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">echo</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">()</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"si\">{:.2f}</span><span class=\"s1\"> m, Error: </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"n\">echo</span><span class=\"o\">.</span><span class=\"n\">error_code</span><span class=\"p\">))</span>\n\n        <span class=\"sd\">\"\"\"\n        Get an average value from multiple sensor readings. Returns an average of\n        only the good sensor reads. The average value is returned with\n        the number of samples used to make the average sum calculation.\n        \"\"\"</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"se\">\\n</span><span class=\"s1\">+++++ Return an average from multiple sensor reads. +++++'</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'+++++ Returns two values; average and good samples. +++++</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n        <span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.06</span><span class=\"p\">)</span>\n        <span class=\"n\">echo</span><span class=\"o\">.</span><span class=\"n\">default_unit</span> <span class=\"o\">=</span> <span class=\"s1\">'m'</span>\n        <span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"n\">samples</span> <span class=\"o\">=</span> <span class=\"n\">echo</span><span class=\"o\">.</span><span class=\"n\">samples</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Average: </span><span class=\"si\">{:.2f}</span><span class=\"s1\"> m, From </span><span class=\"si\">{}</span><span class=\"s1\"> good samples'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"n\">samples</span><span class=\"p\">))</span>\n\n        <span class=\"sd\">\"\"\" Reset GPIO Pins. \"\"\"</span>\n        <span class=\"n\">echo</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n        <span class=\"n\">main</span><span class=\"p\">()</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 5377715, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "886696ac18195fe7b95daa4f92f64e2a", "sha256": "a654678f7b4158555511edceddc93560ee47d2714ff0b5c89ef1a3415c81d8f3"}, "downloads": -1, "filename": "Bluetin_Echo-0.1.0.tar.gz", "has_sig": false, "md5_digest": "886696ac18195fe7b95daa4f92f64e2a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3041, "upload_time": "2018-03-06T00:50:24", "upload_time_iso_8601": "2018-03-06T00:50:24.688151Z", "url": "https://files.pythonhosted.org/packages/e9/dc/3ff43d7c7dcd0a2a261de8f0d0c3734f59adb97f534cbd1f9740fa483338/Bluetin_Echo-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "5334650e3bda7d979c86d7659702054e", "sha256": "7a5387fd932adc7b65b5dcc6906bc87813c04de36486eae69923c5df5a3c2c05"}, "downloads": -1, "filename": "Bluetin_Echo-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5334650e3bda7d979c86d7659702054e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6773, "upload_time": "2018-03-09T17:20:44", "upload_time_iso_8601": "2018-03-09T17:20:44.318199Z", "url": "https://files.pythonhosted.org/packages/7a/d1/58f7d497df7c1543650798c7f8c4129c603db3cdcfecb3dbfcde602d1253/Bluetin_Echo-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f71ac97f18fc8a3440a8d57e68904362", "sha256": "40aabf86ddb3df1444dc2c7230be20d0f39d135d002c9da8e81ec5038644d4b2"}, "downloads": -1, "filename": "Bluetin_Echo-0.1.1.tar.gz", "has_sig": false, "md5_digest": "f71ac97f18fc8a3440a8d57e68904362", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4951, "upload_time": "2018-03-09T17:20:46", "upload_time_iso_8601": "2018-03-09T17:20:46.161957Z", "url": "https://files.pythonhosted.org/packages/dd/74/21ec2dc64d983160ae3ff6e2f4efbb748fe4431f7a22aeb924f05f837b17/Bluetin_Echo-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "98610b76eed14dc4f99f198f47417b17", "sha256": "abf9c0d37a9bd84a8fe6824d63b46b5a9d7546a1381134813cae9fbba7bb0679"}, "downloads": -1, "filename": "Bluetin_Echo-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "98610b76eed14dc4f99f198f47417b17", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8672, "upload_time": "2019-06-09T13:34:54", "upload_time_iso_8601": "2019-06-09T13:34:54.802723Z", "url": "https://files.pythonhosted.org/packages/1d/7d/5ad3e2a10ff13a14b29310734b3fdd1e5e2b38cae7b8ccec4df782caad37/Bluetin_Echo-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c7204ab23e1a10c51b9fc2e9f70f6462", "sha256": "edc5c0ba50bd4d430f12a5f16af501ee90eeddbc25d8fcd1a18801c3970184cf"}, "downloads": -1, "filename": "Bluetin_Echo-0.2.0.tar.gz", "has_sig": false, "md5_digest": "c7204ab23e1a10c51b9fc2e9f70f6462", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7876, "upload_time": "2019-06-09T13:34:56", "upload_time_iso_8601": "2019-06-09T13:34:56.772734Z", "url": "https://files.pythonhosted.org/packages/e6/c9/5f67b9fa933ad9d3ead886f2c007a11880d1970abaf5d1dd90bac8d2aad6/Bluetin_Echo-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "98610b76eed14dc4f99f198f47417b17", "sha256": "abf9c0d37a9bd84a8fe6824d63b46b5a9d7546a1381134813cae9fbba7bb0679"}, "downloads": -1, "filename": "Bluetin_Echo-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "98610b76eed14dc4f99f198f47417b17", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8672, "upload_time": "2019-06-09T13:34:54", "upload_time_iso_8601": "2019-06-09T13:34:54.802723Z", "url": "https://files.pythonhosted.org/packages/1d/7d/5ad3e2a10ff13a14b29310734b3fdd1e5e2b38cae7b8ccec4df782caad37/Bluetin_Echo-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c7204ab23e1a10c51b9fc2e9f70f6462", "sha256": "edc5c0ba50bd4d430f12a5f16af501ee90eeddbc25d8fcd1a18801c3970184cf"}, "downloads": -1, "filename": "Bluetin_Echo-0.2.0.tar.gz", "has_sig": false, "md5_digest": "c7204ab23e1a10c51b9fc2e9f70f6462", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7876, "upload_time": "2019-06-09T13:34:56", "upload_time_iso_8601": "2019-06-09T13:34:56.772734Z", "url": "https://files.pythonhosted.org/packages/e6/c9/5f67b9fa933ad9d3ead886f2c007a11880d1970abaf5d1dd90bac8d2aad6/Bluetin_Echo-0.2.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:36:57 2020"}