{"info": {"author": "Daniel Gomez", "author_email": "d.gomez@donders.ru.nl", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation :: CPython"], "description": "# Multi-echo combinations\n\n[![PyPI version](https://badge.fury.io/py/multiecho.svg)](https://badge.fury.io/py/multiecho)\n![PyPI - Python Version](https://img.shields.io/pypi/pyversions/multiecho.svg)\n\nThis repository provides a command line tool to combine multiple echoes from a multi-echo BOLD fMRI acquisition.\nIt currently provides three different echo avering algorithms:\n\n|algorithm  | description |\n|:--------- |:----------- |\n|1. average | Echoes are weighted equally\n|2. PAID    | Echoes are weighted by their CNR, i.e. by their TE*tSNR contributions\n|3. TE      | Echoes are weighted by their TEs\n\nFor more information on multiecho acquisition and combination schemes, please refer to (for example):\n\n- [Poser et al. (2006)](https://onlinelibrary.wiley.com/doi/full/10.1002/mrm.20900). *BOLD Contrast Sensitivity Enhancement and Artifact Reduction with Multiecho EPI: Parallel-Acquired Inhomogeneity- Desensitized fMRI.* Magn. Reson. Med. 55:6, pp. 1227\u201335.\n- [Posse, Stefan (2012)](https://doi.org/10.1016/j.neuroimage.2011.10.057). *Multi-Echo Acquisition*. NeuroImage 62:2, pp. 665\u2013671.\n\n> `Multiecho` is developed at the [Donders Institute](https://www.ru.nl/donders/) of the [Radboud University](https://www.ru.nl/english/).\n\n## Installation\n\nTo install, simply run:\n\n    pip install multiecho\n\nThis will give you the latest stable release of the software. To get the very latest version of the software you can install the package directly from the github source code repository:\n\n    pip install git+https://github.com/Donders-Institute/multiecho\n\nAlternatively, to get the latest (possibly unreleased) code, clone this repository and run the following on the root folder of the repository:\n\n    pip install .\n\nThe tool only supports Python 3.6+.\n\n## Usage\n\nOnce installed, a command line tool called mecombine will be available in your PATH. Detailed usage information can be found by running `mecombine -h`:\n\n    usage: combination.py [-h] [-o OUTPUTNAME] [-a {PAID,TE,average}]\n                          [-w [WEIGHTS [WEIGHTS ...]]] [-s] [-v VOLUMES]\n                          pattern\n\n    Combine multi-echo echoes.\n\n    Tools to combine multiple echoes from an fMRI acquisition.\n    It expects input files saved as NIfTIs, preferably organised\n    according to the BIDS standard.\n\n    Currently three different combination algorithms are supported, implementing\n    the following weighting schemes:\n\n    1. PAID => TE * SNR\n    2. TE => TE\n    3. Simple Average => 1\n\n    positional arguments:\n      pattern               Globlike search pattern with path to select the echo\n                            images that need to be combined. Because of the\n                            search, be sure to check that not too many files are\n                            being read\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -o OUTPUTNAME, --outputname OUTPUTNAME\n                            File output name. If not a fullpath name, then the\n                            output will be stored in the same folder as the input.\n                            If empty, the output filename will be the filename of\n                            the first echo appended with a '_combined' suffix\n                            (default: )\n      -a {PAID,TE,average}, --algorithm {PAID,TE,average}\n                            Combination algorithm. Default: TE (default: TE)\n      -w [WEIGHTS [WEIGHTS ...]], --weights [WEIGHTS [WEIGHTS ...]]\n                            Weights (e.g. = echo times) for all echoes (default:\n                            None)\n      -s, --saveweights     If passed and algorithm is PAID, save weights\n                            (default: False)\n      -v VOLUMES, --volumes VOLUMES\n                            Number of volumes that is used to compute the weights\n                            if algorithm is PAID (default: 100)\n\n    examples:\n      mecombine '/project/number/bids/sub-001/func/*_task-motor_*echo-*.nii.gz'\n      mecombine '/project/number/bids/sub-001/func/*_task-rest_*echo-*.nii.gz' -a PAID\n      mecombine '/project/number/bids/sub-001/func/*_acq-MBME_*run-01*.nii.gz' -w 11 22 33 -o sub-001_task-stroop_acq-mecombined_run-01_bold.nii.gz\n\n## Caveats\n\nCurrently inneficient as we load all datasets into memory. We could iterate through the volumes and only keep the final combined series in memory at any given time.\n\nYou may receive a runtime warning when combining echoes with `PAID`. If your datasets have voxels with zeros, e.g., if they were masked, a division by 0 will lead to infinite weights. You may safely ignore the warning, but do check your data after the combination.\n\nBy default PAID will compute the weights based on the last 100 volumes of the acquisition. Whether this is optimal or not is up to discussion. If you are testing out the combination on a small subset of volumes, say 5 or so, then the weights won't be stable and your image may look noisy.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Donders-Institute/multiecho", "keywords": "fmri,multi-echo,bids", "license": "MIT/Apache-2.0", "maintainer": "Marcel Zwiers", "maintainer_email": "m.zwiers@donders.ru.nl", "name": "multiecho", "package_url": "https://pypi.org/project/multiecho/", "platform": "", "project_url": "https://pypi.org/project/multiecho/", "project_urls": {"Homepage": "https://github.com/Donders-Institute/multiecho"}, "release_url": "https://pypi.org/project/multiecho/0.23/", "requires_dist": ["coloredlogs", "numpy", "nibabel"], "requires_python": "", "summary": "Combine multi-echoes from a multi-echo fMRI acquisition.", "version": "0.23", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Multi-echo combinations</h1>\n<p><a href=\"https://badge.fury.io/py/multiecho\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d2e66218c4dd1d39d8bc5c2647e9a66444cb7181/68747470733a2f2f62616467652e667572792e696f2f70792f6d756c74696563686f2e737667\"></a>\n<img alt=\"PyPI - Python Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b4c42bff5157121231838e22e1fa2227bb25c3ad/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f6d756c74696563686f2e737667\"></p>\n<p>This repository provides a command line tool to combine multiple echoes from a multi-echo BOLD fMRI acquisition.\nIt currently provides three different echo avering algorithms:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">algorithm</th>\n<th align=\"left\">description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">1. average</td>\n<td align=\"left\">Echoes are weighted equally</td>\n</tr>\n<tr>\n<td align=\"left\">2. PAID</td>\n<td align=\"left\">Echoes are weighted by their CNR, i.e. by their TE*tSNR contributions</td>\n</tr>\n<tr>\n<td align=\"left\">3. TE</td>\n<td align=\"left\">Echoes are weighted by their TEs</td>\n</tr></tbody></table>\n<p>For more information on multiecho acquisition and combination schemes, please refer to (for example):</p>\n<ul>\n<li><a href=\"https://onlinelibrary.wiley.com/doi/full/10.1002/mrm.20900\" rel=\"nofollow\">Poser et al. (2006)</a>. <em>BOLD Contrast Sensitivity Enhancement and Artifact Reduction with Multiecho EPI: Parallel-Acquired Inhomogeneity- Desensitized fMRI.</em> Magn. Reson. Med. 55:6, pp. 1227\u201335.</li>\n<li><a href=\"https://doi.org/10.1016/j.neuroimage.2011.10.057\" rel=\"nofollow\">Posse, Stefan (2012)</a>. <em>Multi-Echo Acquisition</em>. NeuroImage 62:2, pp. 665\u2013671.</li>\n</ul>\n<blockquote>\n<p><code>Multiecho</code> is developed at the <a href=\"https://www.ru.nl/donders/\" rel=\"nofollow\">Donders Institute</a> of the <a href=\"https://www.ru.nl/english/\" rel=\"nofollow\">Radboud University</a>.</p>\n</blockquote>\n<h2>Installation</h2>\n<p>To install, simply run:</p>\n<pre><code>pip install multiecho\n</code></pre>\n<p>This will give you the latest stable release of the software. To get the very latest version of the software you can install the package directly from the github source code repository:</p>\n<pre><code>pip install git+https://github.com/Donders-Institute/multiecho\n</code></pre>\n<p>Alternatively, to get the latest (possibly unreleased) code, clone this repository and run the following on the root folder of the repository:</p>\n<pre><code>pip install .\n</code></pre>\n<p>The tool only supports Python 3.6+.</p>\n<h2>Usage</h2>\n<p>Once installed, a command line tool called mecombine will be available in your PATH. Detailed usage information can be found by running <code>mecombine -h</code>:</p>\n<pre><code>usage: combination.py [-h] [-o OUTPUTNAME] [-a {PAID,TE,average}]\n                      [-w [WEIGHTS [WEIGHTS ...]]] [-s] [-v VOLUMES]\n                      pattern\n\nCombine multi-echo echoes.\n\nTools to combine multiple echoes from an fMRI acquisition.\nIt expects input files saved as NIfTIs, preferably organised\naccording to the BIDS standard.\n\nCurrently three different combination algorithms are supported, implementing\nthe following weighting schemes:\n\n1. PAID =&gt; TE * SNR\n2. TE =&gt; TE\n3. Simple Average =&gt; 1\n\npositional arguments:\n  pattern               Globlike search pattern with path to select the echo\n                        images that need to be combined. Because of the\n                        search, be sure to check that not too many files are\n                        being read\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -o OUTPUTNAME, --outputname OUTPUTNAME\n                        File output name. If not a fullpath name, then the\n                        output will be stored in the same folder as the input.\n                        If empty, the output filename will be the filename of\n                        the first echo appended with a '_combined' suffix\n                        (default: )\n  -a {PAID,TE,average}, --algorithm {PAID,TE,average}\n                        Combination algorithm. Default: TE (default: TE)\n  -w [WEIGHTS [WEIGHTS ...]], --weights [WEIGHTS [WEIGHTS ...]]\n                        Weights (e.g. = echo times) for all echoes (default:\n                        None)\n  -s, --saveweights     If passed and algorithm is PAID, save weights\n                        (default: False)\n  -v VOLUMES, --volumes VOLUMES\n                        Number of volumes that is used to compute the weights\n                        if algorithm is PAID (default: 100)\n\nexamples:\n  mecombine '/project/number/bids/sub-001/func/*_task-motor_*echo-*.nii.gz'\n  mecombine '/project/number/bids/sub-001/func/*_task-rest_*echo-*.nii.gz' -a PAID\n  mecombine '/project/number/bids/sub-001/func/*_acq-MBME_*run-01*.nii.gz' -w 11 22 33 -o sub-001_task-stroop_acq-mecombined_run-01_bold.nii.gz\n</code></pre>\n<h2>Caveats</h2>\n<p>Currently inneficient as we load all datasets into memory. We could iterate through the volumes and only keep the final combined series in memory at any given time.</p>\n<p>You may receive a runtime warning when combining echoes with <code>PAID</code>. If your datasets have voxels with zeros, e.g., if they were masked, a division by 0 will lead to infinite weights. You may safely ignore the warning, but do check your data after the combination.</p>\n<p>By default PAID will compute the weights based on the last 100 volumes of the acquisition. Whether this is optimal or not is up to discussion. If you are testing out the combination on a small subset of volumes, say 5 or so, then the weights won't be stable and your image may look noisy.</p>\n\n          </div>"}, "last_serial": 6992143, "releases": {"0.2": [{"comment_text": "", "digests": {"md5": "13c538d178f7fb2451f04afc2aa0d036", "sha256": "2094896df1ccbf691f0100bfd2fe7476fb64ec17ec3e9970e21f84ed2e134a39"}, "downloads": -1, "filename": "multiecho-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "13c538d178f7fb2451f04afc2aa0d036", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11415, "upload_time": "2019-10-31T18:59:10", "upload_time_iso_8601": "2019-10-31T18:59:10.575617Z", "url": "https://files.pythonhosted.org/packages/80/48/58cce4ac8e5d11e58977f8063f3c88119f393845e7ccfca0e9d28c788f9a/multiecho-0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9c0cfb0ec654fb58a10243b25e3225e8", "sha256": "4b86873306c4fa0b55020bd48feb69ba5c6700df78b730f0ef5da3247fcffefa"}, "downloads": -1, "filename": "multiecho-0.2.tar.gz", "has_sig": false, "md5_digest": "9c0cfb0ec654fb58a10243b25e3225e8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10592, "upload_time": "2019-10-31T18:59:12", "upload_time_iso_8601": "2019-10-31T18:59:12.750110Z", "url": "https://files.pythonhosted.org/packages/54/3b/5a626809cef70e4c3244278f1b4681437ec64c72eecc04781b993b8970cc/multiecho-0.2.tar.gz", "yanked": false}], "0.21": [{"comment_text": "", "digests": {"md5": "9f53c0de1f3927f69f82df100866c263", "sha256": "87680880e5accde81e1c128730dbe29821e42c1ae78e230b4018f90219cc4ed0"}, "downloads": -1, "filename": "multiecho-0.21-py3-none-any.whl", "has_sig": false, "md5_digest": "9f53c0de1f3927f69f82df100866c263", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11526, "upload_time": "2019-11-28T17:31:01", "upload_time_iso_8601": "2019-11-28T17:31:01.370909Z", "url": "https://files.pythonhosted.org/packages/f6/ab/563f4f2dc3c6b4716286c218ea8540f6dba8e90299be3446df01dc38bc45/multiecho-0.21-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "04b79bf02638622f73a668ad6fec5538", "sha256": "8c9e9b1b56351a03d64ade6feace4e1a518d456ff4e751a5bcee792b20aacad2"}, "downloads": -1, "filename": "multiecho-0.21.tar.gz", "has_sig": false, "md5_digest": "04b79bf02638622f73a668ad6fec5538", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10675, "upload_time": "2019-11-28T17:31:03", "upload_time_iso_8601": "2019-11-28T17:31:03.899114Z", "url": "https://files.pythonhosted.org/packages/f1/34/dfa4da2700f73181e63c4567bda551143f65c53a0727110ccbf49887c7f0/multiecho-0.21.tar.gz", "yanked": false}], "0.22": [{"comment_text": "", "digests": {"md5": "4fee2efb1522b70ab462b28d9e4083f1", "sha256": "25f2e56661ca945a9ffda7146de8b59c4f9aa77ef9e3259faf78749551ee57dd"}, "downloads": -1, "filename": "multiecho-0.22-py3-none-any.whl", "has_sig": false, "md5_digest": "4fee2efb1522b70ab462b28d9e4083f1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12020, "upload_time": "2020-04-09T17:27:41", "upload_time_iso_8601": "2020-04-09T17:27:41.398471Z", "url": "https://files.pythonhosted.org/packages/7d/25/71b32730d30f0e1e52747a419cd8e658ed60362dcea9b31bcebe0c4c3d05/multiecho-0.22-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ed4f88982cd977020e46b153c6a2b6dc", "sha256": "5bab6f583944fb9dadcb2b2c3526d5333609095c8acfd1e7c6920b00576704bb"}, "downloads": -1, "filename": "multiecho-0.22.tar.gz", "has_sig": false, "md5_digest": "ed4f88982cd977020e46b153c6a2b6dc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11342, "upload_time": "2020-04-09T17:27:43", "upload_time_iso_8601": "2020-04-09T17:27:43.930083Z", "url": "https://files.pythonhosted.org/packages/ed/43/1d00829b5c22dc7599750778230c68ef99b296f9553e29207d6954ff517c/multiecho-0.22.tar.gz", "yanked": false}], "0.23": [{"comment_text": "", "digests": {"md5": "336a11b96eb0898cb832b83ca129c8df", "sha256": "79e82564852b00d0a1e463e70fd94c4671965dc5f7d48dfb1622449ffd04607a"}, "downloads": -1, "filename": "multiecho-0.23-py3-none-any.whl", "has_sig": false, "md5_digest": "336a11b96eb0898cb832b83ca129c8df", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12095, "upload_time": "2020-04-10T09:48:54", "upload_time_iso_8601": "2020-04-10T09:48:54.702092Z", "url": "https://files.pythonhosted.org/packages/5f/70/1a7650afa8d461c8c4ba502de7087dafb3e981f59e134d0713a277dee353/multiecho-0.23-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1859387d6f5d0be40c340b13453c4bad", "sha256": "7a4fcc27138a6431d3ebdc0f436ae3f2531e44c17a3cd303977a6d3613e1df3b"}, "downloads": -1, "filename": "multiecho-0.23.tar.gz", "has_sig": false, "md5_digest": "1859387d6f5d0be40c340b13453c4bad", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11412, "upload_time": "2020-04-10T09:48:57", "upload_time_iso_8601": "2020-04-10T09:48:57.707711Z", "url": "https://files.pythonhosted.org/packages/06/0c/b3fdf7925be6fae0231d8a08f603665546fb60a62010514fdc2963bf3bd0/multiecho-0.23.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "336a11b96eb0898cb832b83ca129c8df", "sha256": "79e82564852b00d0a1e463e70fd94c4671965dc5f7d48dfb1622449ffd04607a"}, "downloads": -1, "filename": "multiecho-0.23-py3-none-any.whl", "has_sig": false, "md5_digest": "336a11b96eb0898cb832b83ca129c8df", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12095, "upload_time": "2020-04-10T09:48:54", "upload_time_iso_8601": "2020-04-10T09:48:54.702092Z", "url": "https://files.pythonhosted.org/packages/5f/70/1a7650afa8d461c8c4ba502de7087dafb3e981f59e134d0713a277dee353/multiecho-0.23-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1859387d6f5d0be40c340b13453c4bad", "sha256": "7a4fcc27138a6431d3ebdc0f436ae3f2531e44c17a3cd303977a6d3613e1df3b"}, "downloads": -1, "filename": "multiecho-0.23.tar.gz", "has_sig": false, "md5_digest": "1859387d6f5d0be40c340b13453c4bad", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11412, "upload_time": "2020-04-10T09:48:57", "upload_time_iso_8601": "2020-04-10T09:48:57.707711Z", "url": "https://files.pythonhosted.org/packages/06/0c/b3fdf7925be6fae0231d8a08f603665546fb60a62010514fdc2963bf3bd0/multiecho-0.23.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:27 2020"}