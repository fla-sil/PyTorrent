{"info": {"author": "Thomas Calmant", "author_email": "thomas.calmant+github@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "# JSONRPClib (patched for Pelix and Python 3)\n\n[![Latest Version](https://img.shields.io/pypi/v/jsonrpclib-pelix.svg)](https://pypi.python.org/pypi/jsonrpclib-pelix/)\n[![License](https://img.shields.io/pypi/l/jsonrpclib-pelix.svg)](https://pypi.python.org/pypi/jsonrpclib-pelix/)\n[![Travis-CI status](https://travis-ci.org/tcalmant/jsonrpclib.svg?branch=master)](https://travis-ci.org/tcalmant/jsonrpclib)\n[![Coveralls status](https://coveralls.io/repos/tcalmant/jsonrpclib/badge.svg?branch=master)](https://coveralls.io/r/tcalmant/jsonrpclib?branch=master)\n\nThis library is an implementation of the JSON-RPC specification.\nIt supports both the original 1.0 specification, as well as the new\n(proposed) 2.0 specification, which includes batch submission, keyword\narguments, etc.\n\nThis library is licensed under the terms of the\n[Apache Software License 2.0](<http://www.apache.org/licenses/LICENSE-2.0.html>).\n\n\n## About this version\n\nThis is a patched version of the original `jsonrpclib` project by Josh Marshall,\navailable at\n[joshmarshall/jsonrpclib](<https://github.com/joshmarshall/jsonrpclib>).\n\nThe suffix *-pelix* only indicates that this version works with Pelix\nRemote Services, but it is **not** a Pelix specific implementation.\n\n* This version adds support for Python 3, staying compatible with Python 2.7.\n  The support for Python 2.6 has been dropped, as it was becoming to hard to\n  maintain.\n* It is now possible to use the `dispatch_method` argument while extending the\n  `SimpleJSONRPCDispatcher`, to use a custom dispatcher.\n  This allows to use this package by Pelix Remote Services.\n* It can use thread pools to control the number of threads spawned to handle\n  notification requests and clients connections.\n* The modifications added in other forks of this project have been added:\n    * From [drdaeman/jsonrpclib](<https://github.com/drdaeman/jsonrpclib>):\n      * Improved JSON-RPC 1.0 support\n      * Less strict error response handling\n    * From [tuomassalo/jsonrpclib](<https://github.com/tuomassalo/jsonrpclib>):\n      * In case of a non-predefined error, raise an AppError and give access\n        to *error.data*\n    * From [dejw/jsonrpclib](<https://github.com/dejw/jsonrpclib>):\n      * Custom headers can be sent with request and associated tests\n* Since version 0.4, this package added back the support of Unix sockets.\n* This package cannot be installed with the original `jsonrpclib`, as it uses\n  the same name.\n\n## Summary\n\nThis library implements the JSON-RPC 2.0 proposed specification in pure Python.\nIt is designed to be as compatible with the syntax of `xmlrpclib` as possible\n(it extends where possible), so that projects using `xmlrpclib` could easily be\nmodified to use JSON and experiment with the differences.\n\nIt is backwards-compatible with the 1.0 specification, and supports all of the\nnew proposed features of 2.0, including:\n\n- Batch submission (via the `MultiCall` class)\n- Keyword arguments\n- Notifications (both in a batch and 'normal')\n- Class translation using the `__jsonclass__` key.\n\nA `SimpleJSONRPCServer` class has been added. It is intended to emulate the\n`SimpleXMLRPCServer` from the default Python distribution.\n\n## Requirements\n\nThis library supports `cjson` and `simplejson`, and looks for the parsers in\nthat order (searching first for `cjson`, then for the *built-in* `json` in 2.7+,\nand then the `simplejson` external library).\nOne of these must be installed to use this library, although if you have a\nstandard distribution of 2.7+, you should already have one.\nKeep in mind that `cjson` is supposed to be the quickest, I believe, so if you\nare going for full-on optimization you may want to pick it up.\n\n## Installation\n\nYou can install this from PyPI with one of the following commands (`sudo`\nmight be required):\n\n```\n# Global installation\npip install jsonrpclib-pelix\n\n# Local installation\npip install --user jsonrpclib-pelix\n```\n\nAlternatively, you can download the source from the GitHub repository at\n[tcalmant/jsonrpclib](http://github.com/tcalmant/jsonrpclib) and manually\ninstall it with the following commands:\n\n```\ngit clone git://github.com/tcalmant/jsonrpclib.git\ncd jsonrpclib\npython setup.py install\n```\n\n## A note on logging\n\n`jsonrpclib-pelix` uses the `logging` module from the standard Python\nlibrary to trace warnings and errors, but doesn't set it up.\nAs a result, you have to configure the Python logging to print out traces.\n\nThe easiest way to do it is to add those lines at the beginning of your code:\n```python\nimport logging\nlogging.basiConfig()\n```\n\nMore information can be found in the\n[`logging` documentation page](https://docs.python.org/3/library/logging.html).\n\n## `SimpleJSONRPCServer`\n\nThis is identical in usage (or should be) to the `SimpleXMLRPCServer` in the\nPython standard library.\nSome of the differences in features are that it obviously supports notification,\nbatch calls, class translation (if left on), etc.\n\n**Note:** The import line is slightly different from the regular\n`SimpleXMLRPCServer`, since the `SimpleJSONRPCServer` is provided by th\n`jsonrpclib` library.\n\n```python\nfrom jsonrpclib.SimpleJSONRPCServer import SimpleJSONRPCServer\n\nserver = SimpleJSONRPCServer(('localhost', 8080))\nserver.register_function(pow)\nserver.register_function(lambda x,y: x+y, 'add')\nserver.register_function(lambda x: x, 'ping')\nserver.serve_forever()\n```\n\nTo start protect the server with SSL, use the following snippet:\n\n```python\nfrom jsonrpclib.SimpleJSONRPCServer import SimpleJSONRPCServer\nimport ssl\n\n# Setup the SSL socket\nserver = SimpleJSONRPCServer(('localhost', 8080), bind_and_activate=False)\nserver.socket = ssl.wrap_socket(server.socket, certfile='server.pem',\n                                server_side=True)\nserver.server_bind()\nserver.server_activate()\n\n# ... register functions\n# Start the server\nserver.serve_forever()\n```\n\n### Notification Thread Pool\n\nBy default, notification calls are handled in the request handling thread.\nIt is possible to use a thread pool to handle them, by giving it to the server\nusing the `set_notification_pool()` method:\n\n```python\nfrom jsonrpclib.SimpleJSONRPCServer import SimpleJSONRPCServer\nfrom jsonrpclib.threadpool import ThreadPool\n\n# Setup the thread pool: between 0 and 10 threads\npool = ThreadPool(max_threads=10, min_threads=0)\n\n# Don't forget to start it\npool.start()\n\n# Setup the server\nserver = SimpleJSONRPCServer(('localhost', 8080))\nserver.set_notification_pool(pool)\n\n# Register methods\nserver.register_function(pow)\nserver.register_function(lambda x,y: x+y, 'add')\nserver.register_function(lambda x: x, 'ping')\n\ntry:\n    server.serve_forever()\nfinally:\n    # Stop the thread pool (let threads finish their current task)\n    pool.stop()\n    server.set_notification_pool(None)\n```\n\n### Threaded server\n\nIt is also possible to use a thread pool to handle clients requests, using the\n`PooledJSONRPCServer` class.\nBy default, this class uses pool of 0 to 30 threads.\nA custom pool can be given with the `thread_pool` parameter of the class\nconstructor.\n\nThe notification pool and the request pool are different: by default, a server\nwith a request pool doesn't have a notification pool.\n\n```python\nfrom jsonrpclib.SimpleJSONRPCServer import PooledJSONRPCServer\nfrom jsonrpclib.threadpool import ThreadPool\n\n# Setup the notification and request pools\nnofif_pool = ThreadPool(max_threads=10, min_threads=0)\nrequest_pool = ThreadPool(max_threads=50, min_threads=10)\n\n# Don't forget to start them\nnofif_pool.start()\nrequest_pool.start()\n\n# Setup the server\nserver = PooledJSONRPCServer(('localhost', 8080), thread_pool=request_pool)\nserver.set_notification_pool(nofif_pool)\n\n# Register methods\nserver.register_function(pow)\nserver.register_function(lambda x,y: x+y, 'add')\nserver.register_function(lambda x: x, 'ping')\n\ntry:\n    server.serve_forever()\nfinally:\n    # Stop the thread pools (let threads finish their current task)\n    request_pool.stop()\n    nofif_pool.stop()\n    server.set_notification_pool(None)\n```\n\n### Unix socket\n\nTo start a server listening on a Unix socket, you will have to use the\nfollowing snippet:\n\n```python\nfrom jsonrpclib.SimpleJSONRPCServer import SimpleJSONRPCServer\nimport os\nimport socket\n\n# Set the path to the socket file\nsocket_name = \"/tmp/my_socket.socket\"\n\n# Ensure that the file doesn't exist yet (or an error will be raised)\nif os.path.exists(socket_name):\n   os.remove(socket_name)\n\ntry:\n   # Start the server, indicating the socket family\n   # The server will force some flags when in Unix socket mode\n   # (no log request, no reuse address, ...)\n   srv = SimpleJSONRPCServer(socket_name, address_family=socket.AF_UNIX)\n\n   # ... register methods to the server\n   # Run the server\n   srv.serve_forever()\nexcept KeyboardInterrupt:\n   # Shutdown the server gracefully\n   srv.shutdown()\n   srv.server_close()\nfinally:\n   # You should clean up after the server stopped\n   os.remove(socket_name)\n```\n\nThis feature is tested on Linux during Travis-CI builds. It also has\nbeen tested on Windows Subsystem for Linux (WSL) on Windows 10 1809.\n\nThis feature is not available on \"pure\" Windows, as it doesn't provide\nthe `AF_UNIX` address family.\n\n## Client Usage\n\nThis is (obviously) taken from a console session.\n\n```python\n>>> import jsonrpclib\n>>> server = jsonrpclib.ServerProxy('http://localhost:8080')\n>>> server.add(5,6)\n11\n>>> server.add(x=5, y=10)\n15\n>>> server._notify.add(5,6)\n# No result returned...\n>>> batch = jsonrpclib.MultiCall(server)\n>>> batch.add(5, 6)\n>>> batch.ping({'key':'value'})\n>>> batch._notify.add(4, 30)\n>>> results = batch()\n>>> for result in results:\n>>> ... print(result)\n11\n{'key': 'value'}\n# Note that there are only two responses -- this is according to spec.\n\n# Clean up\n>>> server('close')()\n\n# Using client history\n>>> history = jsonrpclib.history.History()\n>>> server = jsonrpclib.ServerProxy('http://localhost:8080', history=history)\n>>> server.add(5,6)\n11\n>>> print(history.request)\n{\"id\": \"f682b956-c8e1-4506-9db4-29fe8bc9fcaa\", \"jsonrpc\": \"2.0\",\n \"method\": \"add\", \"params\": [5, 6]}\n>>> print(history.response)\n{\"id\": \"f682b956-c8e1-4506-9db4-29fe8bc9fcaa\", \"jsonrpc\": \"2.0\",\n \"result\": 11}\n\n# Clean up\n>>> server('close')()\n```\n\nIf you need 1.0 functionality, there are a bunch of places you can pass\nthat in, although the best is just to give a specific configuration to\n`jsonrpclib.ServerProxy`:\n\n```python\n>>> import jsonrpclib\n>>> jsonrpclib.config.DEFAULT.version\n2.0\n>>> config = jsonrpclib.config.Config(version=1.0)\n>>> history = jsonrpclib.history.History()\n>>> server = jsonrpclib.ServerProxy('http://localhost:8080', config=config,\n                                    history=history)\n>>> server.add(7, 10)\n17\n>>> print(history.request)\n{\"id\": \"827b2923-5b37-49a5-8b36-e73920a16d32\",\n \"method\": \"add\", \"params\": [7, 10]}\n>>> print(history.response)\n{\"id\": \"827b2923-5b37-49a5-8b36-e73920a16d32\", \"error\": null, \"result\": 17}\n>>> server('close')()\n```\n\nThe equivalent `loads` and `dumps` functions also exist, although with\nminor modifications.\nThe `dumps` arguments are almost identical, but it adds three arguments:\n`rpcid` for the `id` key, `version` to specify the JSON-RPC compatibility,\nand `notify` if it's a request that you want to be a notification.\n\nAdditionally, the `loads` method does not return the params and method like\n`xmlrpclib`, but instead\na.) parses for errors, raising ProtocolErrors, and\nb.) returns the entire structure of the request / response for manual parsing.\n\n### Unix sockets\n\nTo connect a JSON-RPC server over a Unix socket, you have to use a specific\nprotocol: `unix+http`.\n\nWhen connecting to a Unix socket in the current working directory, you can use\nthe following syntax: `unix+http://my.socket`\n\nWhen you need to give an absolute path you must use the path part of the URL,\nthe host part will be ignored. For example, you can use this URL to indicate a\nUnix socket in `/var/lib/daemon.socket`: `unix+http://./var/lib/daemon.socket`\n\n**Note:** Currently, only HTTP is supported over a Unix socket.\nIf you want HTTPS support to be implemented, please create an\n[issue on GitHub](https://github.com/tcalmant/jsonrpclib/issues)\n\n### Additional headers\n\nIf your remote service requires custom headers in request, you can pass them\nusing the `headers` keyword argument, when creating the `ServerProxy`:\n\n```python\n>>> import jsonrpclib\n>>> server = jsonrpclib.ServerProxy(\"http://localhost:8080\",\n                                    headers={'X-Test' : 'Test'})\n```\n\nYou can also put additional request headers only for certain method\ninvocation:\n\n```python\n>>> import jsonrpclib\n>>> server = jsonrpclib.Server(\"http://localhost:8080\")\n>>> with server._additional_headers({'X-Test' : 'Test'}) as test_server:\n...     test_server.ping(42)\n...\n>>> # X-Test header will be no longer sent in requests\n```\n\nOf course `_additional_headers` contexts can be nested as well.\n\n## Class Translation\n\nThe library supports an *\"automatic\"* class translation process, although it\nis turned off by default.\nThis can be devastatingly slow if improperly used, so the following is just a\nshort list of things to keep in mind when using it.\n\n- Keep It (the object) Simple Stupid. (for exceptions, keep reading)\n- Do not require init params (for exceptions, keep reading)\n- Getter properties without setters could be dangerous (read: not tested)\n\nIf any of the above are issues, use the `_serialize` method (see usage below).\nThe server and client must **BOTH** have the `use_jsonclass` configuration\nitem on and they must both have access to the same libraries used by the\nobjects for this to work.\n\nIf you have excessively nested arguments, it would be better to turn off the\ntranslation and manually invoke it on specific objects using\n`jsonrpclib.jsonclass.dump` / `jsonrpclib.jsonclass.load` (since the\ndefault behavior recursively goes through attributes and lists/dicts/tuples).\n\n* Sample file: `test_obj.py`\n\n```python\n# This object is /very/ simple, and the system will look through the\n# attributes and serialize what it can.\nclass TestObj(object):\n    foo = 'bar'\n\n# This object requires __init__ params, so it uses the _serialize method\n# and returns a tuple of init params and attribute values (the init params\n# can be a dict or a list, but the attribute values must be a dict.)\nclass TestSerial(object):\n    foo = 'bar'\n    def __init__(self, *args):\n        self.args = args\n    def _serialize(self):\n        return (self.args, {'foo':self.foo,})\n```\n\n- Sample usage:\n\n```python\n>>> import jsonrpclib\n>>> import test_obj\n\n# History is used only to print the serialized form of beans\n>>> history = jsonrpclib.history.History()\n>>> testobj1 = test_obj.TestObj()\n>>> testobj2 = test_obj.TestSerial()\n>>> server = jsonrpclib.Server('http://localhost:8080', history=history)\n\n# The 'ping' just returns whatever is sent\n>>> ping1 = server.ping(testobj1)\n>>> ping2 = server.ping(testobj2)\n\n>>> print(history.request)\n{\"id\": \"7805f1f9-9abd-49c6-81dc-dbd47229fe13\", \"jsonrpc\": \"2.0\",\n \"method\": \"ping\", \"params\": [{\"__jsonclass__\":\n                               [\"test_obj.TestSerial\", []], \"foo\": \"bar\"}\n                             ]}\n>>> print(history.response)\n{\"id\": \"7805f1f9-9abd-49c6-81dc-dbd47229fe13\", \"jsonrpc\": \"2.0\",\n \"result\": {\"__jsonclass__\": [\"test_obj.TestSerial\", []], \"foo\": \"bar\"}}\n```\n\nThis behavior is turned on by default.\nTo deactivate it, just set the `use_jsonclass` member of a server `Config` to\n`False`.\nIf you want to use a per-class serialization method, set its name in the\n`serialize_method` member of a server `Config`.\nFinally, if you are using classes that you have defined in the implementation\n(as in, not a separate library), you'll need to add those\n(on **BOTH** the server and the client) using the `config.classes.add()` method.\n\nFeedback on this \"feature\" is very, VERY much appreciated.\n\n## Tests\n\nTests are an almost-verbatim drop from the JSON-RPC specification 2.0\npage. They can be run using *unittest* or *nosetest*:\n\n```\npython -m unittest discover tests\npython3 -m unittest discover tests\nnosetests tests\n```\n\n## Why JSON-RPC?\n\nIn my opinion, there are several reasons to choose JSON over XML for RPC:\n\n* Much simpler to read (I suppose this is opinion, but I know I'm right. :)\n* Size / Bandwidth - Main reason, a JSON object representation is just much\n  smaller.\n* Parsing - JSON should be much quicker to parse than XML.\n* Easy class passing with `jsonclass` (when enabled)\n\nIn the interest of being fair, there are also a few reasons to choose XML over\nJSON:\n\n* Your server doesn't do JSON (rather obvious)\n* Wider XML-RPC support across APIs (can we change this? :))\n* Libraries are more established, *i.e.* more stable (Let's change this too)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/tcalmant/jsonrpclib/", "keywords": "", "license": "Apache License 2.0", "maintainer": "", "maintainer_email": "", "name": "jsonrpclib-pelix", "package_url": "https://pypi.org/project/jsonrpclib-pelix/", "platform": "", "project_url": "https://pypi.org/project/jsonrpclib-pelix/", "project_urls": {"Homepage": "http://github.com/tcalmant/jsonrpclib/"}, "release_url": "https://pypi.org/project/jsonrpclib-pelix/0.4.1/", "requires_dist": null, "requires_python": "", "summary": "This project is an implementation of the JSON-RPC v2.0 specification (backwards-compatible) as a client library, for Python 2.7 and Python 3. This version is a fork of jsonrpclib by Josh Marshall, made to be also usable with Pelix/iPOPO remote services.", "version": "0.4.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>JSONRPClib (patched for Pelix and Python 3)</h1>\n<p><a href=\"https://pypi.python.org/pypi/jsonrpclib-pelix/\" rel=\"nofollow\"><img alt=\"Latest Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1179409e46fee77396020732c835fbc0dac600fb/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6a736f6e7270636c69622d70656c69782e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/jsonrpclib-pelix/\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/607ae1b1b2146168584ad78d8877d38581445ef5/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f6a736f6e7270636c69622d70656c69782e737667\"></a>\n<a href=\"https://travis-ci.org/tcalmant/jsonrpclib\" rel=\"nofollow\"><img alt=\"Travis-CI status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fa500d59d4ae25d369cec93c1ba9222748eea5e3/68747470733a2f2f7472617669732d63692e6f72672f7463616c6d616e742f6a736f6e7270636c69622e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/r/tcalmant/jsonrpclib?branch=master\" rel=\"nofollow\"><img alt=\"Coveralls status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b986341843f129f16062d7d581a695bd6aeb109b/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f7463616c6d616e742f6a736f6e7270636c69622f62616467652e7376673f6272616e63683d6d6173746572\"></a></p>\n<p>This library is an implementation of the JSON-RPC specification.\nIt supports both the original 1.0 specification, as well as the new\n(proposed) 2.0 specification, which includes batch submission, keyword\narguments, etc.</p>\n<p>This library is licensed under the terms of the\n<a href=\"http://www.apache.org/licenses/LICENSE-2.0.html\" rel=\"nofollow\">Apache Software License 2.0</a>.</p>\n<h2>About this version</h2>\n<p>This is a patched version of the original <code>jsonrpclib</code> project by Josh Marshall,\navailable at\n<a href=\"https://github.com/joshmarshall/jsonrpclib\" rel=\"nofollow\">joshmarshall/jsonrpclib</a>.</p>\n<p>The suffix <em>-pelix</em> only indicates that this version works with Pelix\nRemote Services, but it is <strong>not</strong> a Pelix specific implementation.</p>\n<ul>\n<li>This version adds support for Python 3, staying compatible with Python 2.7.\nThe support for Python 2.6 has been dropped, as it was becoming to hard to\nmaintain.</li>\n<li>It is now possible to use the <code>dispatch_method</code> argument while extending the\n<code>SimpleJSONRPCDispatcher</code>, to use a custom dispatcher.\nThis allows to use this package by Pelix Remote Services.</li>\n<li>It can use thread pools to control the number of threads spawned to handle\nnotification requests and clients connections.</li>\n<li>The modifications added in other forks of this project have been added:\n<ul>\n<li>From <a href=\"https://github.com/drdaeman/jsonrpclib\" rel=\"nofollow\">drdaeman/jsonrpclib</a>:\n<ul>\n<li>Improved JSON-RPC 1.0 support</li>\n<li>Less strict error response handling</li>\n</ul>\n</li>\n<li>From <a href=\"https://github.com/tuomassalo/jsonrpclib\" rel=\"nofollow\">tuomassalo/jsonrpclib</a>:\n<ul>\n<li>In case of a non-predefined error, raise an AppError and give access\nto <em>error.data</em></li>\n</ul>\n</li>\n<li>From <a href=\"https://github.com/dejw/jsonrpclib\" rel=\"nofollow\">dejw/jsonrpclib</a>:\n<ul>\n<li>Custom headers can be sent with request and associated tests</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Since version 0.4, this package added back the support of Unix sockets.</li>\n<li>This package cannot be installed with the original <code>jsonrpclib</code>, as it uses\nthe same name.</li>\n</ul>\n<h2>Summary</h2>\n<p>This library implements the JSON-RPC 2.0 proposed specification in pure Python.\nIt is designed to be as compatible with the syntax of <code>xmlrpclib</code> as possible\n(it extends where possible), so that projects using <code>xmlrpclib</code> could easily be\nmodified to use JSON and experiment with the differences.</p>\n<p>It is backwards-compatible with the 1.0 specification, and supports all of the\nnew proposed features of 2.0, including:</p>\n<ul>\n<li>Batch submission (via the <code>MultiCall</code> class)</li>\n<li>Keyword arguments</li>\n<li>Notifications (both in a batch and 'normal')</li>\n<li>Class translation using the <code>__jsonclass__</code> key.</li>\n</ul>\n<p>A <code>SimpleJSONRPCServer</code> class has been added. It is intended to emulate the\n<code>SimpleXMLRPCServer</code> from the default Python distribution.</p>\n<h2>Requirements</h2>\n<p>This library supports <code>cjson</code> and <code>simplejson</code>, and looks for the parsers in\nthat order (searching first for <code>cjson</code>, then for the <em>built-in</em> <code>json</code> in 2.7+,\nand then the <code>simplejson</code> external library).\nOne of these must be installed to use this library, although if you have a\nstandard distribution of 2.7+, you should already have one.\nKeep in mind that <code>cjson</code> is supposed to be the quickest, I believe, so if you\nare going for full-on optimization you may want to pick it up.</p>\n<h2>Installation</h2>\n<p>You can install this from PyPI with one of the following commands (<code>sudo</code>\nmight be required):</p>\n<pre><code># Global installation\npip install jsonrpclib-pelix\n\n# Local installation\npip install --user jsonrpclib-pelix\n</code></pre>\n<p>Alternatively, you can download the source from the GitHub repository at\n<a href=\"http://github.com/tcalmant/jsonrpclib\" rel=\"nofollow\">tcalmant/jsonrpclib</a> and manually\ninstall it with the following commands:</p>\n<pre><code>git clone git://github.com/tcalmant/jsonrpclib.git\ncd jsonrpclib\npython setup.py install\n</code></pre>\n<h2>A note on logging</h2>\n<p><code>jsonrpclib-pelix</code> uses the <code>logging</code> module from the standard Python\nlibrary to trace warnings and errors, but doesn't set it up.\nAs a result, you have to configure the Python logging to print out traces.</p>\n<p>The easiest way to do it is to add those lines at the beginning of your code:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">basiConfig</span><span class=\"p\">()</span>\n</pre>\n<p>More information can be found in the\n<a href=\"https://docs.python.org/3/library/logging.html\" rel=\"nofollow\"><code>logging</code> documentation page</a>.</p>\n<h2><code>SimpleJSONRPCServer</code></h2>\n<p>This is identical in usage (or should be) to the <code>SimpleXMLRPCServer</code> in the\nPython standard library.\nSome of the differences in features are that it obviously supports notification,\nbatch calls, class translation (if left on), etc.</p>\n<p><strong>Note:</strong> The import line is slightly different from the regular\n<code>SimpleXMLRPCServer</code>, since the <code>SimpleJSONRPCServer</code> is provided by th\n<code>jsonrpclib</code> library.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">jsonrpclib.SimpleJSONRPCServer</span> <span class=\"kn\">import</span> <span class=\"n\">SimpleJSONRPCServer</span>\n\n<span class=\"n\">server</span> <span class=\"o\">=</span> <span class=\"n\">SimpleJSONRPCServer</span><span class=\"p\">((</span><span class=\"s1\">'localhost'</span><span class=\"p\">,</span> <span class=\"mi\">8080</span><span class=\"p\">))</span>\n<span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">register_function</span><span class=\"p\">(</span><span class=\"nb\">pow</span><span class=\"p\">)</span>\n<span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">register_function</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">,</span><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">+</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"s1\">'add'</span><span class=\"p\">)</span>\n<span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">register_function</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"s1\">'ping'</span><span class=\"p\">)</span>\n<span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">serve_forever</span><span class=\"p\">()</span>\n</pre>\n<p>To start protect the server with SSL, use the following snippet:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">jsonrpclib.SimpleJSONRPCServer</span> <span class=\"kn\">import</span> <span class=\"n\">SimpleJSONRPCServer</span>\n<span class=\"kn\">import</span> <span class=\"nn\">ssl</span>\n\n<span class=\"c1\"># Setup the SSL socket</span>\n<span class=\"n\">server</span> <span class=\"o\">=</span> <span class=\"n\">SimpleJSONRPCServer</span><span class=\"p\">((</span><span class=\"s1\">'localhost'</span><span class=\"p\">,</span> <span class=\"mi\">8080</span><span class=\"p\">),</span> <span class=\"n\">bind_and_activate</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">socket</span> <span class=\"o\">=</span> <span class=\"n\">ssl</span><span class=\"o\">.</span><span class=\"n\">wrap_socket</span><span class=\"p\">(</span><span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">socket</span><span class=\"p\">,</span> <span class=\"n\">certfile</span><span class=\"o\">=</span><span class=\"s1\">'server.pem'</span><span class=\"p\">,</span>\n                                <span class=\"n\">server_side</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">server_bind</span><span class=\"p\">()</span>\n<span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">server_activate</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># ... register functions</span>\n<span class=\"c1\"># Start the server</span>\n<span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">serve_forever</span><span class=\"p\">()</span>\n</pre>\n<h3>Notification Thread Pool</h3>\n<p>By default, notification calls are handled in the request handling thread.\nIt is possible to use a thread pool to handle them, by giving it to the server\nusing the <code>set_notification_pool()</code> method:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">jsonrpclib.SimpleJSONRPCServer</span> <span class=\"kn\">import</span> <span class=\"n\">SimpleJSONRPCServer</span>\n<span class=\"kn\">from</span> <span class=\"nn\">jsonrpclib.threadpool</span> <span class=\"kn\">import</span> <span class=\"n\">ThreadPool</span>\n\n<span class=\"c1\"># Setup the thread pool: between 0 and 10 threads</span>\n<span class=\"n\">pool</span> <span class=\"o\">=</span> <span class=\"n\">ThreadPool</span><span class=\"p\">(</span><span class=\"n\">max_threads</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">min_threads</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Don't forget to start it</span>\n<span class=\"n\">pool</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Setup the server</span>\n<span class=\"n\">server</span> <span class=\"o\">=</span> <span class=\"n\">SimpleJSONRPCServer</span><span class=\"p\">((</span><span class=\"s1\">'localhost'</span><span class=\"p\">,</span> <span class=\"mi\">8080</span><span class=\"p\">))</span>\n<span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">set_notification_pool</span><span class=\"p\">(</span><span class=\"n\">pool</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Register methods</span>\n<span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">register_function</span><span class=\"p\">(</span><span class=\"nb\">pow</span><span class=\"p\">)</span>\n<span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">register_function</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">,</span><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">+</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"s1\">'add'</span><span class=\"p\">)</span>\n<span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">register_function</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"s1\">'ping'</span><span class=\"p\">)</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">serve_forever</span><span class=\"p\">()</span>\n<span class=\"k\">finally</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Stop the thread pool (let threads finish their current task)</span>\n    <span class=\"n\">pool</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">()</span>\n    <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">set_notification_pool</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</pre>\n<h3>Threaded server</h3>\n<p>It is also possible to use a thread pool to handle clients requests, using the\n<code>PooledJSONRPCServer</code> class.\nBy default, this class uses pool of 0 to 30 threads.\nA custom pool can be given with the <code>thread_pool</code> parameter of the class\nconstructor.</p>\n<p>The notification pool and the request pool are different: by default, a server\nwith a request pool doesn't have a notification pool.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">jsonrpclib.SimpleJSONRPCServer</span> <span class=\"kn\">import</span> <span class=\"n\">PooledJSONRPCServer</span>\n<span class=\"kn\">from</span> <span class=\"nn\">jsonrpclib.threadpool</span> <span class=\"kn\">import</span> <span class=\"n\">ThreadPool</span>\n\n<span class=\"c1\"># Setup the notification and request pools</span>\n<span class=\"n\">nofif_pool</span> <span class=\"o\">=</span> <span class=\"n\">ThreadPool</span><span class=\"p\">(</span><span class=\"n\">max_threads</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">min_threads</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">request_pool</span> <span class=\"o\">=</span> <span class=\"n\">ThreadPool</span><span class=\"p\">(</span><span class=\"n\">max_threads</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"n\">min_threads</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Don't forget to start them</span>\n<span class=\"n\">nofif_pool</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n<span class=\"n\">request_pool</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Setup the server</span>\n<span class=\"n\">server</span> <span class=\"o\">=</span> <span class=\"n\">PooledJSONRPCServer</span><span class=\"p\">((</span><span class=\"s1\">'localhost'</span><span class=\"p\">,</span> <span class=\"mi\">8080</span><span class=\"p\">),</span> <span class=\"n\">thread_pool</span><span class=\"o\">=</span><span class=\"n\">request_pool</span><span class=\"p\">)</span>\n<span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">set_notification_pool</span><span class=\"p\">(</span><span class=\"n\">nofif_pool</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Register methods</span>\n<span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">register_function</span><span class=\"p\">(</span><span class=\"nb\">pow</span><span class=\"p\">)</span>\n<span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">register_function</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">,</span><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">+</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"s1\">'add'</span><span class=\"p\">)</span>\n<span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">register_function</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"s1\">'ping'</span><span class=\"p\">)</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">serve_forever</span><span class=\"p\">()</span>\n<span class=\"k\">finally</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Stop the thread pools (let threads finish their current task)</span>\n    <span class=\"n\">request_pool</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">()</span>\n    <span class=\"n\">nofif_pool</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">()</span>\n    <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">set_notification_pool</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</pre>\n<h3>Unix socket</h3>\n<p>To start a server listening on a Unix socket, you will have to use the\nfollowing snippet:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">jsonrpclib.SimpleJSONRPCServer</span> <span class=\"kn\">import</span> <span class=\"n\">SimpleJSONRPCServer</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">socket</span>\n\n<span class=\"c1\"># Set the path to the socket file</span>\n<span class=\"n\">socket_name</span> <span class=\"o\">=</span> <span class=\"s2\">\"/tmp/my_socket.socket\"</span>\n\n<span class=\"c1\"># Ensure that the file doesn't exist yet (or an error will be raised)</span>\n<span class=\"k\">if</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">socket_name</span><span class=\"p\">):</span>\n   <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"n\">socket_name</span><span class=\"p\">)</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n   <span class=\"c1\"># Start the server, indicating the socket family</span>\n   <span class=\"c1\"># The server will force some flags when in Unix socket mode</span>\n   <span class=\"c1\"># (no log request, no reuse address, ...)</span>\n   <span class=\"n\">srv</span> <span class=\"o\">=</span> <span class=\"n\">SimpleJSONRPCServer</span><span class=\"p\">(</span><span class=\"n\">socket_name</span><span class=\"p\">,</span> <span class=\"n\">address_family</span><span class=\"o\">=</span><span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">AF_UNIX</span><span class=\"p\">)</span>\n\n   <span class=\"c1\"># ... register methods to the server</span>\n   <span class=\"c1\"># Run the server</span>\n   <span class=\"n\">srv</span><span class=\"o\">.</span><span class=\"n\">serve_forever</span><span class=\"p\">()</span>\n<span class=\"k\">except</span> <span class=\"ne\">KeyboardInterrupt</span><span class=\"p\">:</span>\n   <span class=\"c1\"># Shutdown the server gracefully</span>\n   <span class=\"n\">srv</span><span class=\"o\">.</span><span class=\"n\">shutdown</span><span class=\"p\">()</span>\n   <span class=\"n\">srv</span><span class=\"o\">.</span><span class=\"n\">server_close</span><span class=\"p\">()</span>\n<span class=\"k\">finally</span><span class=\"p\">:</span>\n   <span class=\"c1\"># You should clean up after the server stopped</span>\n   <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"n\">socket_name</span><span class=\"p\">)</span>\n</pre>\n<p>This feature is tested on Linux during Travis-CI builds. It also has\nbeen tested on Windows Subsystem for Linux (WSL) on Windows 10 1809.</p>\n<p>This feature is not available on \"pure\" Windows, as it doesn't provide\nthe <code>AF_UNIX</code> address family.</p>\n<h2>Client Usage</h2>\n<p>This is (obviously) taken from a console session.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">jsonrpclib</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">server</span> <span class=\"o\">=</span> <span class=\"n\">jsonrpclib</span><span class=\"o\">.</span><span class=\"n\">ServerProxy</span><span class=\"p\">(</span><span class=\"s1\">'http://localhost:8080'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">)</span>\n<span class=\"mi\">11</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"mi\">15</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">_notify</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">)</span>\n<span class=\"c1\"># No result returned...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">batch</span> <span class=\"o\">=</span> <span class=\"n\">jsonrpclib</span><span class=\"o\">.</span><span class=\"n\">MultiCall</span><span class=\"p\">(</span><span class=\"n\">server</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">batch</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">batch</span><span class=\"o\">.</span><span class=\"n\">ping</span><span class=\"p\">({</span><span class=\"s1\">'key'</span><span class=\"p\">:</span><span class=\"s1\">'value'</span><span class=\"p\">})</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">batch</span><span class=\"o\">.</span><span class=\"n\">_notify</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">batch</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">for</span> <span class=\"n\">result</span> <span class=\"ow\">in</span> <span class=\"n\">results</span><span class=\"p\">:</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"o\">...</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n<span class=\"mi\">11</span>\n<span class=\"p\">{</span><span class=\"s1\">'key'</span><span class=\"p\">:</span> <span class=\"s1\">'value'</span><span class=\"p\">}</span>\n<span class=\"c1\"># Note that there are only two responses -- this is according to spec.</span>\n\n<span class=\"c1\"># Clean up</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">server</span><span class=\"p\">(</span><span class=\"s1\">'close'</span><span class=\"p\">)()</span>\n\n<span class=\"c1\"># Using client history</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">history</span> <span class=\"o\">=</span> <span class=\"n\">jsonrpclib</span><span class=\"o\">.</span><span class=\"n\">history</span><span class=\"o\">.</span><span class=\"n\">History</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">server</span> <span class=\"o\">=</span> <span class=\"n\">jsonrpclib</span><span class=\"o\">.</span><span class=\"n\">ServerProxy</span><span class=\"p\">(</span><span class=\"s1\">'http://localhost:8080'</span><span class=\"p\">,</span> <span class=\"n\">history</span><span class=\"o\">=</span><span class=\"n\">history</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">)</span>\n<span class=\"mi\">11</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">history</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"p\">)</span>\n<span class=\"p\">{</span><span class=\"s2\">\"id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"f682b956-c8e1-4506-9db4-29fe8bc9fcaa\"</span><span class=\"p\">,</span> <span class=\"s2\">\"jsonrpc\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2.0\"</span><span class=\"p\">,</span>\n <span class=\"s2\">\"method\"</span><span class=\"p\">:</span> <span class=\"s2\">\"add\"</span><span class=\"p\">,</span> <span class=\"s2\">\"params\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">history</span><span class=\"o\">.</span><span class=\"n\">response</span><span class=\"p\">)</span>\n<span class=\"p\">{</span><span class=\"s2\">\"id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"f682b956-c8e1-4506-9db4-29fe8bc9fcaa\"</span><span class=\"p\">,</span> <span class=\"s2\">\"jsonrpc\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2.0\"</span><span class=\"p\">,</span>\n <span class=\"s2\">\"result\"</span><span class=\"p\">:</span> <span class=\"mi\">11</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># Clean up</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">server</span><span class=\"p\">(</span><span class=\"s1\">'close'</span><span class=\"p\">)()</span>\n</pre>\n<p>If you need 1.0 functionality, there are a bunch of places you can pass\nthat in, although the best is just to give a specific configuration to\n<code>jsonrpclib.ServerProxy</code>:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">jsonrpclib</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">jsonrpclib</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">DEFAULT</span><span class=\"o\">.</span><span class=\"n\">version</span>\n<span class=\"mf\">2.0</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">jsonrpclib</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">Config</span><span class=\"p\">(</span><span class=\"n\">version</span><span class=\"o\">=</span><span class=\"mf\">1.0</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">history</span> <span class=\"o\">=</span> <span class=\"n\">jsonrpclib</span><span class=\"o\">.</span><span class=\"n\">history</span><span class=\"o\">.</span><span class=\"n\">History</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">server</span> <span class=\"o\">=</span> <span class=\"n\">jsonrpclib</span><span class=\"o\">.</span><span class=\"n\">ServerProxy</span><span class=\"p\">(</span><span class=\"s1\">'http://localhost:8080'</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"n\">config</span><span class=\"p\">,</span>\n                                    <span class=\"n\">history</span><span class=\"o\">=</span><span class=\"n\">history</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"mi\">17</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">history</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"p\">)</span>\n<span class=\"p\">{</span><span class=\"s2\">\"id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"827b2923-5b37-49a5-8b36-e73920a16d32\"</span><span class=\"p\">,</span>\n <span class=\"s2\">\"method\"</span><span class=\"p\">:</span> <span class=\"s2\">\"add\"</span><span class=\"p\">,</span> <span class=\"s2\">\"params\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">]}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">history</span><span class=\"o\">.</span><span class=\"n\">response</span><span class=\"p\">)</span>\n<span class=\"p\">{</span><span class=\"s2\">\"id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"827b2923-5b37-49a5-8b36-e73920a16d32\"</span><span class=\"p\">,</span> <span class=\"s2\">\"error\"</span><span class=\"p\">:</span> <span class=\"n\">null</span><span class=\"p\">,</span> <span class=\"s2\">\"result\"</span><span class=\"p\">:</span> <span class=\"mi\">17</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">server</span><span class=\"p\">(</span><span class=\"s1\">'close'</span><span class=\"p\">)()</span>\n</pre>\n<p>The equivalent <code>loads</code> and <code>dumps</code> functions also exist, although with\nminor modifications.\nThe <code>dumps</code> arguments are almost identical, but it adds three arguments:\n<code>rpcid</code> for the <code>id</code> key, <code>version</code> to specify the JSON-RPC compatibility,\nand <code>notify</code> if it's a request that you want to be a notification.</p>\n<p>Additionally, the <code>loads</code> method does not return the params and method like\n<code>xmlrpclib</code>, but instead\na.) parses for errors, raising ProtocolErrors, and\nb.) returns the entire structure of the request / response for manual parsing.</p>\n<h3>Unix sockets</h3>\n<p>To connect a JSON-RPC server over a Unix socket, you have to use a specific\nprotocol: <code>unix+http</code>.</p>\n<p>When connecting to a Unix socket in the current working directory, you can use\nthe following syntax: <code>unix+http://my.socket</code></p>\n<p>When you need to give an absolute path you must use the path part of the URL,\nthe host part will be ignored. For example, you can use this URL to indicate a\nUnix socket in <code>/var/lib/daemon.socket</code>: <code>unix+http://./var/lib/daemon.socket</code></p>\n<p><strong>Note:</strong> Currently, only HTTP is supported over a Unix socket.\nIf you want HTTPS support to be implemented, please create an\n<a href=\"https://github.com/tcalmant/jsonrpclib/issues\" rel=\"nofollow\">issue on GitHub</a></p>\n<h3>Additional headers</h3>\n<p>If your remote service requires custom headers in request, you can pass them\nusing the <code>headers</code> keyword argument, when creating the <code>ServerProxy</code>:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">jsonrpclib</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">server</span> <span class=\"o\">=</span> <span class=\"n\">jsonrpclib</span><span class=\"o\">.</span><span class=\"n\">ServerProxy</span><span class=\"p\">(</span><span class=\"s2\">\"http://localhost:8080\"</span><span class=\"p\">,</span>\n                                    <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'X-Test'</span> <span class=\"p\">:</span> <span class=\"s1\">'Test'</span><span class=\"p\">})</span>\n</pre>\n<p>You can also put additional request headers only for certain method\ninvocation:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">jsonrpclib</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">server</span> <span class=\"o\">=</span> <span class=\"n\">jsonrpclib</span><span class=\"o\">.</span><span class=\"n\">Server</span><span class=\"p\">(</span><span class=\"s2\">\"http://localhost:8080\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">with</span> <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">_additional_headers</span><span class=\"p\">({</span><span class=\"s1\">'X-Test'</span> <span class=\"p\">:</span> <span class=\"s1\">'Test'</span><span class=\"p\">})</span> <span class=\"k\">as</span> <span class=\"n\">test_server</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"n\">test_server</span><span class=\"o\">.</span><span class=\"n\">ping</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># X-Test header will be no longer sent in requests</span>\n</pre>\n<p>Of course <code>_additional_headers</code> contexts can be nested as well.</p>\n<h2>Class Translation</h2>\n<p>The library supports an <em>\"automatic\"</em> class translation process, although it\nis turned off by default.\nThis can be devastatingly slow if improperly used, so the following is just a\nshort list of things to keep in mind when using it.</p>\n<ul>\n<li>Keep It (the object) Simple Stupid. (for exceptions, keep reading)</li>\n<li>Do not require init params (for exceptions, keep reading)</li>\n<li>Getter properties without setters could be dangerous (read: not tested)</li>\n</ul>\n<p>If any of the above are issues, use the <code>_serialize</code> method (see usage below).\nThe server and client must <strong>BOTH</strong> have the <code>use_jsonclass</code> configuration\nitem on and they must both have access to the same libraries used by the\nobjects for this to work.</p>\n<p>If you have excessively nested arguments, it would be better to turn off the\ntranslation and manually invoke it on specific objects using\n<code>jsonrpclib.jsonclass.dump</code> / <code>jsonrpclib.jsonclass.load</code> (since the\ndefault behavior recursively goes through attributes and lists/dicts/tuples).</p>\n<ul>\n<li>Sample file: <code>test_obj.py</code></li>\n</ul>\n<pre><span class=\"c1\"># This object is /very/ simple, and the system will look through the</span>\n<span class=\"c1\"># attributes and serialize what it can.</span>\n<span class=\"k\">class</span> <span class=\"nc\">TestObj</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"s1\">'bar'</span>\n\n<span class=\"c1\"># This object requires __init__ params, so it uses the _serialize method</span>\n<span class=\"c1\"># and returns a tuple of init params and attribute values (the init params</span>\n<span class=\"c1\"># can be a dict or a list, but the attribute values must be a dict.)</span>\n<span class=\"k\">class</span> <span class=\"nc\">TestSerial</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"s1\">'bar'</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"n\">args</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_serialize</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'foo'</span><span class=\"p\">:</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">foo</span><span class=\"p\">,})</span>\n</pre>\n<ul>\n<li>Sample usage:</li>\n</ul>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">jsonrpclib</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">test_obj</span>\n\n<span class=\"c1\"># History is used only to print the serialized form of beans</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">history</span> <span class=\"o\">=</span> <span class=\"n\">jsonrpclib</span><span class=\"o\">.</span><span class=\"n\">history</span><span class=\"o\">.</span><span class=\"n\">History</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">testobj1</span> <span class=\"o\">=</span> <span class=\"n\">test_obj</span><span class=\"o\">.</span><span class=\"n\">TestObj</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">testobj2</span> <span class=\"o\">=</span> <span class=\"n\">test_obj</span><span class=\"o\">.</span><span class=\"n\">TestSerial</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">server</span> <span class=\"o\">=</span> <span class=\"n\">jsonrpclib</span><span class=\"o\">.</span><span class=\"n\">Server</span><span class=\"p\">(</span><span class=\"s1\">'http://localhost:8080'</span><span class=\"p\">,</span> <span class=\"n\">history</span><span class=\"o\">=</span><span class=\"n\">history</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># The 'ping' just returns whatever is sent</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ping1</span> <span class=\"o\">=</span> <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">ping</span><span class=\"p\">(</span><span class=\"n\">testobj1</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ping2</span> <span class=\"o\">=</span> <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">ping</span><span class=\"p\">(</span><span class=\"n\">testobj2</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">history</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"p\">)</span>\n<span class=\"p\">{</span><span class=\"s2\">\"id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"7805f1f9-9abd-49c6-81dc-dbd47229fe13\"</span><span class=\"p\">,</span> <span class=\"s2\">\"jsonrpc\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2.0\"</span><span class=\"p\">,</span>\n <span class=\"s2\">\"method\"</span><span class=\"p\">:</span> <span class=\"s2\">\"ping\"</span><span class=\"p\">,</span> <span class=\"s2\">\"params\"</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"s2\">\"__jsonclass__\"</span><span class=\"p\">:</span>\n                               <span class=\"p\">[</span><span class=\"s2\">\"test_obj.TestSerial\"</span><span class=\"p\">,</span> <span class=\"p\">[]],</span> <span class=\"s2\">\"foo\"</span><span class=\"p\">:</span> <span class=\"s2\">\"bar\"</span><span class=\"p\">}</span>\n                             <span class=\"p\">]}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">history</span><span class=\"o\">.</span><span class=\"n\">response</span><span class=\"p\">)</span>\n<span class=\"p\">{</span><span class=\"s2\">\"id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"7805f1f9-9abd-49c6-81dc-dbd47229fe13\"</span><span class=\"p\">,</span> <span class=\"s2\">\"jsonrpc\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2.0\"</span><span class=\"p\">,</span>\n <span class=\"s2\">\"result\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"__jsonclass__\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"test_obj.TestSerial\"</span><span class=\"p\">,</span> <span class=\"p\">[]],</span> <span class=\"s2\">\"foo\"</span><span class=\"p\">:</span> <span class=\"s2\">\"bar\"</span><span class=\"p\">}}</span>\n</pre>\n<p>This behavior is turned on by default.\nTo deactivate it, just set the <code>use_jsonclass</code> member of a server <code>Config</code> to\n<code>False</code>.\nIf you want to use a per-class serialization method, set its name in the\n<code>serialize_method</code> member of a server <code>Config</code>.\nFinally, if you are using classes that you have defined in the implementation\n(as in, not a separate library), you'll need to add those\n(on <strong>BOTH</strong> the server and the client) using the <code>config.classes.add()</code> method.</p>\n<p>Feedback on this \"feature\" is very, VERY much appreciated.</p>\n<h2>Tests</h2>\n<p>Tests are an almost-verbatim drop from the JSON-RPC specification 2.0\npage. They can be run using <em>unittest</em> or <em>nosetest</em>:</p>\n<pre><code>python -m unittest discover tests\npython3 -m unittest discover tests\nnosetests tests\n</code></pre>\n<h2>Why JSON-RPC?</h2>\n<p>In my opinion, there are several reasons to choose JSON over XML for RPC:</p>\n<ul>\n<li>Much simpler to read (I suppose this is opinion, but I know I'm right. :)</li>\n<li>Size / Bandwidth - Main reason, a JSON object representation is just much\nsmaller.</li>\n<li>Parsing - JSON should be much quicker to parse than XML.</li>\n<li>Easy class passing with <code>jsonclass</code> (when enabled)</li>\n</ul>\n<p>In the interest of being fair, there are also a few reasons to choose XML over\nJSON:</p>\n<ul>\n<li>Your server doesn't do JSON (rather obvious)</li>\n<li>Wider XML-RPC support across APIs (can we change this? :))</li>\n<li>Libraries are more established, <em>i.e.</em> more stable (Let's change this too)</li>\n</ul>\n\n          </div>"}, "last_serial": 7004871, "releases": {"0.1.4": [{"comment_text": "", "digests": {"md5": "5d9b71e1023959dca1d372047104bc9a", "sha256": "34cf27c901bd4f198d88896fde37a8acc4549cbb1e496c90b7df67fe827c7eb1"}, "downloads": -1, "filename": "jsonrpclib-pelix-0.1.4.tar.gz", "has_sig": false, "md5_digest": "5d9b71e1023959dca1d372047104bc9a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13950, "upload_time": "2013-05-22T13:14:26", "upload_time_iso_8601": "2013-05-22T13:14:26.644877Z", "url": "https://files.pythonhosted.org/packages/df/f8/7ac383ac0e5924bd46953ff03ffc1750014096bf47fba43db866ea8eeaf7/jsonrpclib-pelix-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "930a0a5947ec25df6996f975e6e99aef", "sha256": "e3714a36ff7ccf984a16be7bad651f808a206fd3345d6bf2b1084c0a622403e9"}, "downloads": -1, "filename": "jsonrpclib-pelix-0.1.5.tar.gz", "has_sig": false, "md5_digest": "930a0a5947ec25df6996f975e6e99aef", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19255, "upload_time": "2013-07-22T13:29:06", "upload_time_iso_8601": "2013-07-22T13:29:06.478456Z", "url": "https://files.pythonhosted.org/packages/67/b4/ddaf6ceaf5e052a5c6f5ac2e6a8353f2db749e49c8462634960c5bf7de4b/jsonrpclib-pelix-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "6ab5239b7bdb4abf731afb63301d298a", "sha256": "76dbdff1c9ed13b8c553a5bbe79cc2ec4e4d206146b95ce1298b63c652b61df1"}, "downloads": -1, "filename": "jsonrpclib-pelix-0.1.6.tar.gz", "has_sig": false, "md5_digest": "6ab5239b7bdb4abf731afb63301d298a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19768, "upload_time": "2013-10-14T14:50:05", "upload_time_iso_8601": "2013-10-14T14:50:05.864969Z", "url": "https://files.pythonhosted.org/packages/ce/81/39f53cb56b87c6435ef4ef99e471660509988b816d739239f3a1ebce267b/jsonrpclib-pelix-0.1.6.tar.gz", "yanked": false}], "0.1.6.1": [{"comment_text": "", "digests": {"md5": "804fe081e21a057172c584ad6664f8a7", "sha256": "12f01ade3acecdef0f74d44b873cab389f2c326c7417fa11c66afc05c7c9a08d"}, "downloads": -1, "filename": "jsonrpclib-pelix-0.1.6.1.tar.gz", "has_sig": false, "md5_digest": "804fe081e21a057172c584ad6664f8a7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19991, "upload_time": "2013-10-25T13:31:13", "upload_time_iso_8601": "2013-10-25T13:31:13.609369Z", "url": "https://files.pythonhosted.org/packages/b1/8b/5e4a0669cf82512158cb719af0b9f5bee2ece3cd71cb19eb0fb69a62163d/jsonrpclib-pelix-0.1.6.1.tar.gz", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "5e6e1c05d60d4b47be6c7d04455c81d4", "sha256": "e9d85ca09e65e8d55e75aa79ea9b411856020cbe1e986c265cf5349b0345b547"}, "downloads": -1, "filename": "jsonrpclib_pelix-0.1.7-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5e6e1c05d60d4b47be6c7d04455c81d4", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 29723, "upload_time": "2014-06-02T08:52:09", "upload_time_iso_8601": "2014-06-02T08:52:09.187299Z", "url": "https://files.pythonhosted.org/packages/c3/c5/9610569ca04383bdccc8aee2fe50b2bd86109ae3cd233f62398b19333fc3/jsonrpclib_pelix-0.1.7-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d089fb4270566b7cd696d8fd102fc68a", "sha256": "641c6259a2400001492164e9ca93eb6697b03ae3d612c01b48a988682ee70db9"}, "downloads": -1, "filename": "jsonrpclib-pelix-0.1.7.tar.gz", "has_sig": false, "md5_digest": "d089fb4270566b7cd696d8fd102fc68a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20511, "upload_time": "2014-06-02T08:52:05", "upload_time_iso_8601": "2014-06-02T08:52:05.632981Z", "url": "https://files.pythonhosted.org/packages/ca/d1/7287b787cc39c656caed84bd4bc2deb1f1cb9a02655aabd7e03a00466ee7/jsonrpclib-pelix-0.1.7.tar.gz", "yanked": false}], "0.1.8": [{"comment_text": "", "digests": {"md5": "8424b994d5af7d5fd7ca5a557845390b", "sha256": "b6c0a09c20ee4bdcf3b7ec99b2e3e11296686d70d133add594c64ef05a698298"}, "downloads": -1, "filename": "jsonrpclib_pelix-0.1.8-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8424b994d5af7d5fd7ca5a557845390b", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 30025, "upload_time": "2014-06-05T12:32:28", "upload_time_iso_8601": "2014-06-05T12:32:28.984433Z", "url": "https://files.pythonhosted.org/packages/dd/ab/1efa8df08d1d873de3bde9b747962169fcdbdce84f1b1e63d49b5d66833a/jsonrpclib_pelix-0.1.8-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8036cbe1b4b8977290bf31dd9fa9de21", "sha256": "1d5780a3501d8329c21f19c8c82856f4a244bc6d851c4ad80027d38f32e644ab"}, "downloads": -1, "filename": "jsonrpclib-pelix-0.1.8.tar.gz", "has_sig": false, "md5_digest": "8036cbe1b4b8977290bf31dd9fa9de21", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20819, "upload_time": "2014-06-05T12:32:26", "upload_time_iso_8601": "2014-06-05T12:32:26.036831Z", "url": "https://files.pythonhosted.org/packages/ec/95/5bcbdb5751d217d5d03aa6fcb5369446f28ce1fecdf36366ba936e2975f4/jsonrpclib-pelix-0.1.8.tar.gz", "yanked": false}], "0.1.9": [{"comment_text": "", "digests": {"md5": "ca8e9aad2cf61e32bde2a19b2ce82450", "sha256": "34998f248c4a8a52c88bb24e2e0778669d355048f51241e34a835ad3659c1cc0"}, "downloads": -1, "filename": "jsonrpclib_pelix-0.1.9-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ca8e9aad2cf61e32bde2a19b2ce82450", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 30597, "upload_time": "2014-06-09T09:23:15", "upload_time_iso_8601": "2014-06-09T09:23:15.137255Z", "url": "https://files.pythonhosted.org/packages/67/d1/47b2aada4035133f41a07b908666632d8d7431ade0be2527668948ee40ce/jsonrpclib_pelix-0.1.9-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7aea362e00ceaab00a12e6a6d4e9770d", "sha256": "358da4015b1fc1579854233402fe3bd1b680025f4c49a6850ba12965a6ea922a"}, "downloads": -1, "filename": "jsonrpclib-pelix-0.1.9.tar.gz", "has_sig": false, "md5_digest": "7aea362e00ceaab00a12e6a6d4e9770d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22372, "upload_time": "2014-06-09T09:23:12", "upload_time_iso_8601": "2014-06-09T09:23:12.518252Z", "url": "https://files.pythonhosted.org/packages/d7/b7/34a6f582f6a23a8848da3e8c253f00aa5d276b1c45061d5226911c41657f/jsonrpclib-pelix-0.1.9.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "d753f572159bef9ab51230ebe48d4180", "sha256": "6fc710ee3ff5009be8f48e03e5e0fc5c3debdcbabde10c05a9e947b12751ace8"}, "downloads": -1, "filename": "jsonrpclib_pelix-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d753f572159bef9ab51230ebe48d4180", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 30612, "upload_time": "2014-08-28T14:04:47", "upload_time_iso_8601": "2014-08-28T14:04:47.585054Z", "url": "https://files.pythonhosted.org/packages/08/50/efcb35fc7a29634c6ef558613bfab62e4968ec3a37a48353db8310426da6/jsonrpclib_pelix-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c6819602e257271dfba555e6233a9def", "sha256": "d6eb75cc84d8f04d4941bc9d56c13989d0682908efbedb09e591c32a0a40f65c"}, "downloads": -1, "filename": "jsonrpclib-pelix-0.2.0.tar.gz", "has_sig": false, "md5_digest": "c6819602e257271dfba555e6233a9def", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22432, "upload_time": "2014-08-28T14:04:45", "upload_time_iso_8601": "2014-08-28T14:04:45.026790Z", "url": "https://files.pythonhosted.org/packages/8a/f7/9d1469b3c50ee15662d0f7f3c9f49968db76fbb8040a00ca376f91295c70/jsonrpclib-pelix-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "abd5fbe3868aa8b76e8a8266b405b0e6", "sha256": "e7f7d3809c9436c77cba6d3fe43924710b2ff11d4ea1f773e6b2c60dfb2fccac"}, "downloads": -1, "filename": "jsonrpclib_pelix-0.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "abd5fbe3868aa8b76e8a8266b405b0e6", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 31785, "upload_time": "2014-09-18T10:31:24", "upload_time_iso_8601": "2014-09-18T10:31:24.860593Z", "url": "https://files.pythonhosted.org/packages/40/0c/5e32ad0b793df579652f5d1ba4e54a6dddd202373243f79d765d913eb218/jsonrpclib_pelix-0.2.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "72c0061ae9c6eb55d928a251dbdbe35b", "sha256": "b7c78108830c27e3f9421b7ce93f38fd761bc55cda211ab28439a93a72f4d9e5"}, "downloads": -1, "filename": "jsonrpclib-pelix-0.2.1.tar.gz", "has_sig": false, "md5_digest": "72c0061ae9c6eb55d928a251dbdbe35b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24206, "upload_time": "2014-09-18T10:31:21", "upload_time_iso_8601": "2014-09-18T10:31:21.151465Z", "url": "https://files.pythonhosted.org/packages/54/33/19e8071d7e23ca9c1ef9d6a75f65d3d770dbad6652771610058b97bac29e/jsonrpclib-pelix-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "4f641f23870b80c5bb4e7e2b573907e4", "sha256": "e829e4df50cb7c25d57f63bf5bfd3728cb0a64e92e673068d4cddd5baa1253a3"}, "downloads": -1, "filename": "jsonrpclib_pelix-0.2.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4f641f23870b80c5bb4e7e2b573907e4", "packagetype": "bdist_wheel", "python_version": "3.4", "requires_python": null, "size": 32415, "upload_time": "2014-12-23T13:48:33", "upload_time_iso_8601": "2014-12-23T13:48:33.887849Z", "url": "https://files.pythonhosted.org/packages/a2/39/5261fe76c99b766237f2b71acd89d28c658f55bcaf57d4b71b7140c73419/jsonrpclib_pelix-0.2.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "842df28be65ddded1eae544208b5fd1e", "sha256": "eae59a8b56e647c75aed8ae59999be0cbc151647f20b01071eee07da7d2d281d"}, "downloads": -1, "filename": "jsonrpclib-pelix-0.2.2.zip", "has_sig": false, "md5_digest": "842df28be65ddded1eae544208b5fd1e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38973, "upload_time": "2014-12-23T13:48:29", "upload_time_iso_8601": "2014-12-23T13:48:29.882829Z", "url": "https://files.pythonhosted.org/packages/a6/4a/f3761e40c33a5ce79105f7978ed333b1770a3132ff82cdb7d13cb8f86f61/jsonrpclib-pelix-0.2.2.zip", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "3f0589db52d04c635496f0808729829a", "sha256": "f3b7acfee7d8c927befd7d3a03d4e3b66b4dd4ced7c913c446f3755afd7dbda2"}, "downloads": -1, "filename": "jsonrpclib_pelix-0.2.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3f0589db52d04c635496f0808729829a", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 32526, "upload_time": "2015-01-16T13:36:26", "upload_time_iso_8601": "2015-01-16T13:36:26.993716Z", "url": "https://files.pythonhosted.org/packages/c0/87/9d7ddd10c1ab825a1f25d1eaf3f5291eb126a232311e653498f710792f4a/jsonrpclib_pelix-0.2.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "351af9f6784d76f65041d67e2e6c887e", "sha256": "b401265a294aed4d65eba7bb8ece5737499865eeb1fbee1544eb74c5b1b251c3"}, "downloads": -1, "filename": "jsonrpclib-pelix-0.2.3.tar.gz", "has_sig": false, "md5_digest": "351af9f6784d76f65041d67e2e6c887e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24670, "upload_time": "2015-01-16T13:36:24", "upload_time_iso_8601": "2015-01-16T13:36:24.282737Z", "url": "https://files.pythonhosted.org/packages/1b/ff/471e5f422c43282ac728bcdd4bc2454a71d92583ed779c094182856a12e3/jsonrpclib-pelix-0.2.3.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "288ff5f3a05329fbd027223c82baff91", "sha256": "6264f5b3ed9867c3308e16f7a9f6cfac1606c7e86185c45573b5e4395f4c1a30"}, "downloads": -1, "filename": "jsonrpclib_pelix-0.2.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "288ff5f3a05329fbd027223c82baff91", "packagetype": "bdist_wheel", "python_version": "3.4", "requires_python": null, "size": 39280, "upload_time": "2015-02-16T17:46:37", "upload_time_iso_8601": "2015-02-16T17:46:37.165593Z", "url": "https://files.pythonhosted.org/packages/2c/f2/b105b5756f9bc29531ab2fda675d69421b98e649ee16bbf605866c9b17c3/jsonrpclib_pelix-0.2.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7c608732623eb02c9bc2b5f1efcbf4e6", "sha256": "d326da64424c7fda786e6435dc92bd46102ec775e0a319397c6d3e7360150138"}, "downloads": -1, "filename": "jsonrpclib-pelix-0.2.4.zip", "has_sig": false, "md5_digest": "7c608732623eb02c9bc2b5f1efcbf4e6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 46654, "upload_time": "2015-02-16T17:46:33", "upload_time_iso_8601": "2015-02-16T17:46:33.866698Z", "url": "https://files.pythonhosted.org/packages/e8/6b/1ef9a0b3732f2d436e8db76002121dd12e49f940d7ee3ce3d0fa56c09c45/jsonrpclib-pelix-0.2.4.zip", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "5245296952a1b47e252fc7a0ffeaf5ec", "sha256": "af1579f74bdfd4c27e06f397db50640f741cb6c639611abf8be23f39a4225c7c"}, "downloads": -1, "filename": "jsonrpclib_pelix-0.2.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5245296952a1b47e252fc7a0ffeaf5ec", "packagetype": "bdist_wheel", "python_version": "3.4", "requires_python": null, "size": 39378, "upload_time": "2015-02-28T19:24:14", "upload_time_iso_8601": "2015-02-28T19:24:14.258869Z", "url": "https://files.pythonhosted.org/packages/ed/28/5b01201f244f392a5a342fbb45ab3249d7657bdff370c5b5f80c4ef30015/jsonrpclib_pelix-0.2.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d49be124f0a7dcfabb262e84725f43d5", "sha256": "d66a046c77f43680665950a1ef8e4d30e410138887d739777688d4b4352aacf0"}, "downloads": -1, "filename": "jsonrpclib-pelix-0.2.5.zip", "has_sig": false, "md5_digest": "d49be124f0a7dcfabb262e84725f43d5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 46782, "upload_time": "2015-02-28T19:24:10", "upload_time_iso_8601": "2015-02-28T19:24:10.360720Z", "url": "https://files.pythonhosted.org/packages/c9/28/19b8e507a682538dac43c8ff99e85c81e0230cad794782170def32f8879e/jsonrpclib-pelix-0.2.5.zip", "yanked": false}], "0.2.6": [{"comment_text": "", "digests": {"md5": "305c901c1185f17f1f8e9f5879feaa62", "sha256": "200b67cb37d27da3f6deedf5237b316f173550f2dba6aa7e346f5d1b1854c780"}, "downloads": -1, "filename": "jsonrpclib_pelix-0.2.6-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "305c901c1185f17f1f8e9f5879feaa62", "packagetype": "bdist_wheel", "python_version": "3.4", "requires_python": null, "size": 40043, "upload_time": "2015-08-24T16:04:29", "upload_time_iso_8601": "2015-08-24T16:04:29.487662Z", "url": "https://files.pythonhosted.org/packages/cc/8a/334cdb4f498f307e58f895cdf79386d7b66e4784c8647faff3af275b1090/jsonrpclib_pelix-0.2.6-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7b3c18ed7c0bb3ab82f3c83b926fe75c", "sha256": "7e7f9c6ccb822fb1400a65dbf4f8d6bc4edb65cd2172c690a64a85e811192a6c"}, "downloads": -1, "filename": "jsonrpclib-pelix-0.2.6.zip", "has_sig": false, "md5_digest": "7b3c18ed7c0bb3ab82f3c83b926fe75c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47366, "upload_time": "2015-08-24T16:04:21", "upload_time_iso_8601": "2015-08-24T16:04:21.435427Z", "url": "https://files.pythonhosted.org/packages/f1/36/17b18077cca86ab0c80c88a6d30a0c6d98fb31bf9d8a15fe3b400e5be204/jsonrpclib-pelix-0.2.6.zip", "yanked": false}], "0.2.7": [{"comment_text": "", "digests": {"md5": "712edf61b7c7add7e287668890c3a8d2", "sha256": "0906a81f1d327681ef609afdeb3ebb683febe42255c34f2c117651768fe872ae"}, "downloads": -1, "filename": "jsonrpclib_pelix-0.2.7-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "712edf61b7c7add7e287668890c3a8d2", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 40114, "upload_time": "2016-06-12T16:19:19", "upload_time_iso_8601": "2016-06-12T16:19:19.653292Z", "url": "https://files.pythonhosted.org/packages/8c/d7/fe3d3b50e0a9627adcb1732bd921b4f978a083d565dad8f73525772d6b3c/jsonrpclib_pelix-0.2.7-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fe2ff5d0cc95733088151249100809ae", "sha256": "3daf3182ebb85bd0fb559699ca388143e3f673b39a6bf97bf0048f007372f745"}, "downloads": -1, "filename": "jsonrpclib-pelix-0.2.7.zip", "has_sig": false, "md5_digest": "fe2ff5d0cc95733088151249100809ae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47483, "upload_time": "2016-06-12T16:19:15", "upload_time_iso_8601": "2016-06-12T16:19:15.221885Z", "url": "https://files.pythonhosted.org/packages/13/c0/fb9573fa761e1d1f2564f3b466d3a845b322adb0fced1a91af03deff4506/jsonrpclib-pelix-0.2.7.zip", "yanked": false}], "0.2.8": [{"comment_text": "", "digests": {"md5": "9c1c27469a843958911d15ee459bc774", "sha256": "4bba83873a3a903dbc10d4b49871f6f6d6bed9559fc0da38ba0522ccbc7a8de8"}, "downloads": -1, "filename": "jsonrpclib_pelix-0.2.8-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "9c1c27469a843958911d15ee459bc774", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 40311, "upload_time": "2016-08-23T17:27:27", "upload_time_iso_8601": "2016-08-23T17:27:27.041160Z", "url": "https://files.pythonhosted.org/packages/60/56/b41729f1c2cac0af97895280b32da72774a47c8ad1501e0493742380fa41/jsonrpclib_pelix-0.2.8-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b4b4fd1ceb8c4ae0ecfdd35e97103748", "sha256": "888f4817b4be5dbb3d754430edd6fdea81a93f0077a3aa1a683b73253048b962"}, "downloads": -1, "filename": "jsonrpclib-pelix-0.2.8.zip", "has_sig": false, "md5_digest": "b4b4fd1ceb8c4ae0ecfdd35e97103748", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47672, "upload_time": "2016-08-23T17:27:23", "upload_time_iso_8601": "2016-08-23T17:27:23.929328Z", "url": "https://files.pythonhosted.org/packages/c8/d7/4108a057ead56b44d786443a0b949fd62968a389476d759838f0c3d64627/jsonrpclib-pelix-0.2.8.zip", "yanked": false}], "0.2.9": [{"comment_text": "", "digests": {"md5": "e7c0bdf1b336f3ce2aa4cd332a718fc9", "sha256": "9abdc076c9fb69817de69b63525d899ae55ebf1d5e597232f2e9fcc2a94e0b78"}, "downloads": -1, "filename": "jsonrpclib_pelix-0.2.9-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e7c0bdf1b336f3ce2aa4cd332a718fc9", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 40494, "upload_time": "2016-12-12T12:49:58", "upload_time_iso_8601": "2016-12-12T12:49:58.037766Z", "url": "https://files.pythonhosted.org/packages/a2/f5/d661719065704614f63f8b81966a020a2adc54ed40bbe7668a8b7b96fc10/jsonrpclib_pelix-0.2.9-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3645d7d2c6d6b676a5149b78d725c71d", "sha256": "18bba02c2891d863f6336273c9fdab0e3f7d91ad00c0c5827ecaa74ae85d61f2"}, "downloads": -1, "filename": "jsonrpclib-pelix-0.2.9.tar.gz", "has_sig": false, "md5_digest": "3645d7d2c6d6b676a5149b78d725c71d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29798, "upload_time": "2016-12-12T12:49:56", "upload_time_iso_8601": "2016-12-12T12:49:56.106148Z", "url": "https://files.pythonhosted.org/packages/c1/22/3729e215da9aad3cc37f0d44b6c7cd3c9182baa277b8a0db0540b6a2be0e/jsonrpclib-pelix-0.2.9.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "56f5e5b20f598ae95f9b851b5355bccf", "sha256": "6962f12c78d1f8faf9327bafd6532ff3fa92af805957c4cb11566293641ab90b"}, "downloads": -1, "filename": "jsonrpclib_pelix-0.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "56f5e5b20f598ae95f9b851b5355bccf", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 40630, "upload_time": "2017-04-27T08:45:12", "upload_time_iso_8601": "2017-04-27T08:45:12.522635Z", "url": "https://files.pythonhosted.org/packages/b0/12/969df4cd1628320b86e382b6849f0cc9ebb7151ddaed72dfdc54cce6c379/jsonrpclib_pelix-0.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "811c4b5e63a7c1974f1bbd5b447ded52", "sha256": "342e1b4f431fa9065be6e818ca91b56ed9a702b0a5370c50a38791e931a0cd53"}, "downloads": -1, "filename": "jsonrpclib-pelix-0.3.0.tar.gz", "has_sig": false, "md5_digest": "811c4b5e63a7c1974f1bbd5b447ded52", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29929, "upload_time": "2017-04-27T08:45:10", "upload_time_iso_8601": "2017-04-27T08:45:10.447019Z", "url": "https://files.pythonhosted.org/packages/db/5f/8466df4a5ba5724acf0c90be7cda0cd054f0ff5d9217b219cbd5f76cd4fa/jsonrpclib-pelix-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "daeee9fb940f78a07502f3c0ed7594f8", "sha256": "bd89a6093bc4d47dc8a096197aacb827359944a4533be5193f3845f57b9f91b4"}, "downloads": -1, "filename": "jsonrpclib_pelix-0.3.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "daeee9fb940f78a07502f3c0ed7594f8", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 40708, "upload_time": "2017-06-27T11:08:40", "upload_time_iso_8601": "2017-06-27T11:08:40.985075Z", "url": "https://files.pythonhosted.org/packages/d1/60/78ab51b5dc9d0dc5e545af8c19d0e985420d9495b43532558e3986c323ae/jsonrpclib_pelix-0.3.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "29b501ec629afe8f9cbb88d281e5d155", "sha256": "5417b1508d5a50ec64f6e5b88907f111155d52607b218ff3ba9a777afb2e49e3"}, "downloads": -1, "filename": "jsonrpclib-pelix-0.3.1.tar.gz", "has_sig": false, "md5_digest": "29b501ec629afe8f9cbb88d281e5d155", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29997, "upload_time": "2017-06-27T11:08:13", "upload_time_iso_8601": "2017-06-27T11:08:13.272270Z", "url": "https://files.pythonhosted.org/packages/cc/a9/8767fbdaad0e5f53803d5d0e5f5cc778dc1efbabe7f2891e4b95806246b8/jsonrpclib-pelix-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "2df702be7d625b10d41936f30aad81a6", "sha256": "27fcd919d3dbf6179bcce587f73e1bad006922ae23c83c308e01227b8533178c"}, "downloads": -1, "filename": "jsonrpclib_pelix-0.3.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2df702be7d625b10d41936f30aad81a6", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 38755, "upload_time": "2018-10-26T21:03:10", "upload_time_iso_8601": "2018-10-26T21:03:10.934306Z", "url": "https://files.pythonhosted.org/packages/3c/65/612b85a97344c357ff6cacaa6db00afe1031b16cb3d72ed86d101b11d089/jsonrpclib_pelix-0.3.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c335b3542104beb2c2051822020d8c83", "sha256": "14d288d1b3d3273cf96a729dd21a2470851c4962be8509f3dd62f0137ff90339"}, "downloads": -1, "filename": "jsonrpclib-pelix-0.3.2.tar.gz", "has_sig": false, "md5_digest": "c335b3542104beb2c2051822020d8c83", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38658, "upload_time": "2018-10-26T21:03:12", "upload_time_iso_8601": "2018-10-26T21:03:12.722620Z", "url": "https://files.pythonhosted.org/packages/20/2f/a975ccaed4759c2e72a6064c559e405fc3c7ad91c2b02aa4e517ea2a6d1c/jsonrpclib-pelix-0.3.2.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "ba4d706b185091957b7de50ec4870952", "sha256": "a966d17f2f739ee89031cf5c807d85d92db6b2715fb2b2f8a88bbfc87f468b12"}, "downloads": -1, "filename": "jsonrpclib_pelix-0.4.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ba4d706b185091957b7de50ec4870952", "packagetype": "bdist_wheel", "python_version": "3.7", "requires_python": null, "size": 40591, "upload_time": "2019-01-13T18:18:20", "upload_time_iso_8601": "2019-01-13T18:18:20.567662Z", "url": "https://files.pythonhosted.org/packages/56/06/c2ac9ebf4545a74acd5c0b00a20df5c63f1311384f2a72abd44e282c8916/jsonrpclib_pelix-0.4.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e5259ba5172857fa922ee509a540ce5b", "sha256": "19c558e169a51480b39548783067ca55046b62b2409ab4559931255e12f635de"}, "downloads": -1, "filename": "jsonrpclib-pelix-0.4.0.tar.gz", "has_sig": false, "md5_digest": "e5259ba5172857fa922ee509a540ce5b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41235, "upload_time": "2019-01-13T18:18:18", "upload_time_iso_8601": "2019-01-13T18:18:18.276989Z", "url": "https://files.pythonhosted.org/packages/5c/4e/67c832052d6d85731732193b5d58ff9c2c3ec91087324ad5c2d814fc56c9/jsonrpclib-pelix-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "a68daa13cd37ba08a0617e26468d7739", "sha256": "1e4a2c22d728084934e31d8c91dad1e60ef84ef1515cb604454fa2dd6f5c3520"}, "downloads": -1, "filename": "jsonrpclib_pelix-0.4.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a68daa13cd37ba08a0617e26468d7739", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 40784, "upload_time": "2020-04-12T14:48:42", "upload_time_iso_8601": "2020-04-12T14:48:42.074296Z", "url": "https://files.pythonhosted.org/packages/71/ba/de1c4a6a61d08583c428f678382962ff387d0c5a6013fa7209f39b31fe9b/jsonrpclib_pelix-0.4.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ce58bf89e670fe000072422c29dffd0c", "sha256": "048e5900ae750830f76ad2a2bbc907b6d517846312d57e31fbd8ec6e78dfde00"}, "downloads": -1, "filename": "jsonrpclib-pelix-0.4.1.tar.gz", "has_sig": false, "md5_digest": "ce58bf89e670fe000072422c29dffd0c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41628, "upload_time": "2020-04-12T14:48:43", "upload_time_iso_8601": "2020-04-12T14:48:43.691290Z", "url": "https://files.pythonhosted.org/packages/3d/e8/84f32f08048c7cdde6285ec97c5a46c4944dc1a3dda40ae0729aa74f73d6/jsonrpclib-pelix-0.4.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a68daa13cd37ba08a0617e26468d7739", "sha256": "1e4a2c22d728084934e31d8c91dad1e60ef84ef1515cb604454fa2dd6f5c3520"}, "downloads": -1, "filename": "jsonrpclib_pelix-0.4.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a68daa13cd37ba08a0617e26468d7739", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 40784, "upload_time": "2020-04-12T14:48:42", "upload_time_iso_8601": "2020-04-12T14:48:42.074296Z", "url": "https://files.pythonhosted.org/packages/71/ba/de1c4a6a61d08583c428f678382962ff387d0c5a6013fa7209f39b31fe9b/jsonrpclib_pelix-0.4.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ce58bf89e670fe000072422c29dffd0c", "sha256": "048e5900ae750830f76ad2a2bbc907b6d517846312d57e31fbd8ec6e78dfde00"}, "downloads": -1, "filename": "jsonrpclib-pelix-0.4.1.tar.gz", "has_sig": false, "md5_digest": "ce58bf89e670fe000072422c29dffd0c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41628, "upload_time": "2020-04-12T14:48:43", "upload_time_iso_8601": "2020-04-12T14:48:43.691290Z", "url": "https://files.pythonhosted.org/packages/3d/e8/84f32f08048c7cdde6285ec97c5a46c4944dc1a3dda40ae0729aa74f73d6/jsonrpclib-pelix-0.4.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:40 2020"}