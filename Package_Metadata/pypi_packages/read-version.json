{"info": {"author": "John Thorvald Wodder II", "author_email": "read-version@varonathe.org", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: System :: Software Distribution"], "description": ".. image:: http://www.repostatus.org/badges/latest/active.svg\n    :target: http://www.repostatus.org/#active\n    :alt: Project Status: Active \u2014 The project has reached a stable, usable\n          state and is being actively developed.\n\n.. image:: https://travis-ci.org/jwodder/read_version.svg?branch=master\n    :target: https://travis-ci.org/jwodder/read_version\n\n.. image:: https://codecov.io/gh/jwodder/read_version/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/jwodder/read_version\n\n.. image:: https://img.shields.io/pypi/pyversions/read_version.svg\n    :target: https://pypi.org/project/read_version/\n\n.. image:: https://img.shields.io/github/license/jwodder/read_version.svg\n    :target: https://opensource.org/licenses/MIT\n    :alt: MIT License\n\n.. image:: https://img.shields.io/badge/Say%20Thanks-!-1EAEDB.svg\n    :target: https://saythanks.io/to/jwodder\n\n`GitHub <https://github.com/jwodder/read_version>`_\n| `PyPI <https://pypi.org/project/read_version/>`_\n| `Issues <https://github.com/jwodder/read_version/issues>`_\n| `Changelog <https://github.com/jwodder/read_version/blob/master/CHANGELOG.md>`_\n\nWhen creating a ``setup.py`` for a new project, do you find yourself always\nwriting the same block of code for parsing ``__version__`` from your project's\nsource?  Something like this?\n\n::\n\n    with open(join(dirname(__file__), 'package_name', '__init__.py')) as fp:\n        for line in fp:\n            m = re.search(r'^\\s*__version__\\s*=\\s*([\\'\"])([^\\'\"]+)\\1\\s*$', line)\n            if m:\n                version = m.group(2)\n                break\n        else:\n            raise RuntimeError('Unable to find own __version__ string')\n\n    setup(\n        version = version,\n        ...\n    )\n\nSomeone needs to put all that into a reusable package, am I right?  Well,\nsomeone did, and this is that package.  It exports a single function that does\nthe above, perfect for importing into your ``setup.py``, and *(New in v0.2.0!)*\nthis package even lets you map Python variables to supported metadata fields\nvia your ``pyproject.toml``.\n\nInstallation\n============\nJust use `pip <https://pip.pypa.io>`_ (You have pip, right?) to install\n``read_version``::\n\n    pip install read_version\n\n``read_version`` also has a ``toml`` extra that provides support for\nreading configuration from ``pyproject.toml``.  Install it with::\n\n    pip install 'read_version[toml]'\n\n\nUsage\n=====\n\nThe Functional Way\n------------------\n\n1. Install ``read_version`` in your development environment.\n\n2. Add a ``pyproject.toml`` file to your project declaring ``read_version`` as\n   a build dependency.  (This is needed so that other people can build your\n   package from source; see `PEP 518\n   <https://www.python.org/dev/peps/pep-0518/>`_ for more information.)  The\n   contents of the file should look like::\n\n        [build-system]\n        requires = [\n            \"read_version ~= 0.3.0\",\n            \"setuptools\",\n            \"wheel\"\n        ]\n        build-backend = \"setuptools.build_meta\"\n\n3. In your ``setup.py``, get rid of your boilerplate ``__version__``-finding\n   code and replace it with::\n\n        from read_version import read_version\n\n        setup(\n            version = read_version('packagename', '__init__.py'),\n            ...\n        )\n\n4. Build your project and double-check that the version is set to the correct\n   value.\n\n5. Done!\n\nThe Declarative Way\n-------------------\n\n*New in version 0.2.0!*\n\n1. Install ``read_version`` in your development environment with the ``toml``\n   extra::\n\n    pip install 'read_version[toml]'\n\n   You will also need version 42.0.0 or later of ``setuptools``::\n\n    pip install -U 'setuptools>=42'\n\n2. Add a ``pyproject.toml`` file to your project declaring\n   ``read_version[toml]`` as a build dependency and also requiring version\n   42.0.0 or later of ``setuptools``.  The relevant section of the file should\n   look like::\n\n        [build-system]\n        requires = [\n            \"read_version[toml] ~= 0.3.0\",\n            \"setuptools >= 42.0.0\",\n            \"wheel\"\n        ]\n        build-backend = \"setuptools.build_meta\"\n\n3. Get rid of your boilerplate ``__version__``-finding code in your\n   ``setup.py``.  Instead, add a ``tool.read_version`` table to your\n   ``pyproject.toml`` file, and for each metadata field that you want to be\n   read from a variable in a Python source file, add an entry to this table of\n   the form ``FIELD = \"dotted.file.path:varname\"``, where:\n\n   - ``FIELD`` is replaced by the lowercase name of the field.  Supported\n     fields are:\n\n     - ``author``\n     - ``author_email``\n     - ``description`` (Note that this is the short description or summary, not\n       the long description!)\n     - ``keywords`` (It is recommended to use a list of strings as the value or\n       else ``setuptools`` might mangle it)\n     - ``license``\n     - ``maintainer``\n     - ``maintainer_email``\n     - ``url``\n     - ``version``\n\n     Entries with unsupported or unknown field names are ignored.\n\n   - ``dotted.file.path`` is replaced by the path (relative to the project\n     root) to the file containing the variable, with path components separated\n     by dots and the ``.py`` at the end of the last path component dropped\n\n   - ``varname`` is replaced by the name of the variable to read\n\n   Examples::\n\n        [tool.read_version]\n\n        # Set the project's version to the value of __version__ in foobar.py:\n        version = \"foobar:__version__\"\n\n        # Set the project's author to the value of author_name in\n        # foobar/__init__.py\n        author = \"foobar.__init__:author_name\"\n\n        # Set the project's license to the value of LICENSE in\n        # src/foobar/about.py:\n        license = \"src.foobar.about:LICENSE\"\n\n   If this syntax doesn't work for you \u2014 say, because one of your path\n   components contains a period or colon in its name, or because the file\n   doesn't have a ``.py`` extension \u2014 or if you want to set a default value for\n   when the variable isn't found, then make ``tool.read_version.FIELD`` into a\n   table, like so::\n\n        # Set the project's version to the value of __version__ in\n        # foo.bar/__init__.pyq:\n        [tool.read_version.version]\n        path = [\"foo.bar\", \"__init__.pyq\"]\n        variable = \"__version__\"\n\n        # Set the project's author_email to the value of EMAIL in foobar.py.\n        # If the variable isn't found, use the value \"me@example.com\" instead\n        # of erroring\n        [tool.read_version.author_email]\n        path = [\"foobar.py\"]\n        variable = \"EMAIL\"\n        default = \"me@example.com\"\n\n   ``tool.read_version.FIELD`` tables may contain the following keys:\n\n   :path: *(Required)* The path to the source file containing the variable to\n          read, relative to the project root, as a list of path components\n   :variable: *(Required)* The name of the Python variable to get the value\n              from\n   :default: *(Optional)* If the variable cannot be found in the source file,\n             use the given value instead; if the variable cannot be found and\n             ``default`` is not set, an error will occur\n\n4. Build your project and double-check that the metadata has all the relevant\n   fields set to their correct values.\n\n5. Done!\n\nAPI\n===\n``read_version`` exports a single function, also named ``read_version``, whose\nsignature is::\n\n    read_version(*filepath, variable='__version__', default=NOTHING)\n\n``read_version()`` takes one or more file path components pointing to a Python\nsource file to parse.  The path components will be joined together with\n``os.path.join()``, and then, if the path isn't absolute, the path to the\ndirectory containing the script calling ``read_version()`` will be prepended to\nthe path.  (No more ``join(dirname(__file__), ...)`` boilerplate needed!)\n``read_version()`` then parses the given Python file and searches through the\nparse tree for any assignments to a variable named ``__version__``, returning\nthe last value assigned.\n\nThe ``variable`` keyword argument can be set to the name of a variable other\nthan ``__version__`` to search for assignments to a different variable instead.\nSetting it to ``\"__doc__\"`` causes the function to return the module docstring.\n\nIf no assignments to the variable are found, a ``ValueError`` is raised.  To\ninstead return a default value when this happens, set the ``default`` keyword\nargument.\n\n\nRestrictions\n============\n``read_variable`` only finds assignments that occur at the top level of the\nmodule, outside of any blocks.\n\nOnly assignments of literal values are supported; assignments to the\nsearched-for variable involving more complicated expressions will cause an\nerror to be raised.\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jwodder/read_version", "keywords": "packaging,setuptools,version", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "read-version", "package_url": "https://pypi.org/project/read-version/", "platform": "", "project_url": "https://pypi.org/project/read-version/", "project_urls": {"Bug Tracker": "https://github.com/jwodder/read_version/issues", "Homepage": "https://github.com/jwodder/read_version", "Say Thanks!": "https://saythanks.io/to/jwodder", "Source Code": "https://github.com/jwodder/read_version"}, "release_url": "https://pypi.org/project/read-version/0.3.0/", "requires_dist": ["toml ; extra == 'toml'"], "requires_python": "!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,<4,>=2.7", "summary": "Extract your project's __version__ variable", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"http://www.repostatus.org/#active\" rel=\"nofollow\"><img alt=\"Project Status: Active \u2014 The project has reached a stable, usable state and is being actively developed.\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/51adb09f202aea47725eca73a3fcf5e1ab47f2e9/687474703a2f2f7777772e7265706f7374617475732e6f72672f6261646765732f6c61746573742f6163746976652e737667\"></a>\n<a href=\"https://travis-ci.org/jwodder/read_version\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/jwodder/read_version.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/10ccf1562cf7044aece59e3880871d05fa4b8383/68747470733a2f2f7472617669732d63692e6f72672f6a776f646465722f726561645f76657273696f6e2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/jwodder/read_version\" rel=\"nofollow\"><img alt=\"https://codecov.io/gh/jwodder/read_version/branch/master/graph/badge.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8d49b44312eadea29c27dbf0e990a0ae411aeaac/68747470733a2f2f636f6465636f762e696f2f67682f6a776f646465722f726561645f76657273696f6e2f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://pypi.org/project/read_version/\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/pyversions/read_version.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/602493ee59ed1df511b9b04868c06467ee1e9e61/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f726561645f76657273696f6e2e737667\"></a>\n<a href=\"https://opensource.org/licenses/MIT\" rel=\"nofollow\"><img alt=\"MIT License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cc6ed9b087cc0a592c0364b84ee582fa9485a3fc/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f6a776f646465722f726561645f76657273696f6e2e737667\"></a>\n<a href=\"https://saythanks.io/to/jwodder\" rel=\"nofollow\"><img alt=\"https://img.shields.io/badge/Say%20Thanks-!-1EAEDB.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/51b7f145f134a99621f186ddcdb0af646a24c8aa/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f5361792532305468616e6b732d212d3145414544422e737667\"></a>\n<p><a href=\"https://github.com/jwodder/read_version\" rel=\"nofollow\">GitHub</a>\n| <a href=\"https://pypi.org/project/read_version/\" rel=\"nofollow\">PyPI</a>\n| <a href=\"https://github.com/jwodder/read_version/issues\" rel=\"nofollow\">Issues</a>\n| <a href=\"https://github.com/jwodder/read_version/blob/master/CHANGELOG.md\" rel=\"nofollow\">Changelog</a></p>\n<p>When creating a <tt>setup.py</tt> for a new project, do you find yourself always\nwriting the same block of code for parsing <tt>__version__</tt> from your project\u2019s\nsource?  Something like this?</p>\n<pre>with open(join(dirname(__file__), 'package_name', '__init__.py')) as fp:\n    for line in fp:\n        m = re.search(r'^\\s*__version__\\s*=\\s*([\\'\"])([^\\'\"]+)\\1\\s*$', line)\n        if m:\n            version = m.group(2)\n            break\n    else:\n        raise RuntimeError('Unable to find own __version__ string')\n\nsetup(\n    version = version,\n    ...\n)\n</pre>\n<p>Someone needs to put all that into a reusable package, am I right?  Well,\nsomeone did, and this is that package.  It exports a single function that does\nthe above, perfect for importing into your <tt>setup.py</tt>, and <em>(New in v0.2.0!)</em>\nthis package even lets you map Python variables to supported metadata fields\nvia your <tt>pyproject.toml</tt>.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Just use <a href=\"https://pip.pypa.io\" rel=\"nofollow\">pip</a> (You have pip, right?) to install\n<tt>read_version</tt>:</p>\n<pre>pip install read_version\n</pre>\n<p><tt>read_version</tt> also has a <tt>toml</tt> extra that provides support for\nreading configuration from <tt>pyproject.toml</tt>.  Install it with:</p>\n<pre>pip install 'read_version[toml]'\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div id=\"the-functional-way\">\n<h3>The Functional Way</h3>\n<ol>\n<li><p>Install <tt>read_version</tt> in your development environment.</p>\n</li>\n<li><p>Add a <tt>pyproject.toml</tt> file to your project declaring <tt>read_version</tt> as\na build dependency.  (This is needed so that other people can build your\npackage from source; see <a href=\"https://www.python.org/dev/peps/pep-0518/\" rel=\"nofollow\">PEP 518</a> for more information.)  The\ncontents of the file should look like:</p>\n<pre>[build-system]\nrequires = [\n    \"read_version ~= 0.3.0\",\n    \"setuptools\",\n    \"wheel\"\n]\nbuild-backend = \"setuptools.build_meta\"\n</pre>\n</li>\n<li><p>In your <tt>setup.py</tt>, get rid of your boilerplate <tt>__version__</tt>-finding\ncode and replace it with:</p>\n<pre>from read_version import read_version\n\nsetup(\n    version = read_version('packagename', '__init__.py'),\n    ...\n)\n</pre>\n</li>\n<li><p>Build your project and double-check that the version is set to the correct\nvalue.</p>\n</li>\n<li><p>Done!</p>\n</li>\n</ol>\n</div>\n<div id=\"the-declarative-way\">\n<h3>The Declarative Way</h3>\n<p><em>New in version 0.2.0!</em></p>\n<ol>\n<li><p>Install <tt>read_version</tt> in your development environment with the <tt>toml</tt>\nextra:</p>\n<pre>pip install 'read_version[toml]'\n</pre>\n<p>You will also need version 42.0.0 or later of <tt>setuptools</tt>:</p>\n<pre>pip install -U 'setuptools&gt;=42'\n</pre>\n</li>\n<li><p>Add a <tt>pyproject.toml</tt> file to your project declaring\n<tt>read_version[toml]</tt> as a build dependency and also requiring version\n42.0.0 or later of <tt>setuptools</tt>.  The relevant section of the file should\nlook like:</p>\n<pre>[build-system]\nrequires = [\n    \"read_version[toml] ~= 0.3.0\",\n    \"setuptools &gt;= 42.0.0\",\n    \"wheel\"\n]\nbuild-backend = \"setuptools.build_meta\"\n</pre>\n</li>\n<li><p>Get rid of your boilerplate <tt>__version__</tt>-finding code in your\n<tt>setup.py</tt>.  Instead, add a <tt>tool.read_version</tt> table to your\n<tt>pyproject.toml</tt> file, and for each metadata field that you want to be\nread from a variable in a Python source file, add an entry to this table of\nthe form <tt>FIELD = \"dotted.file.path:varname\"</tt>, where:</p>\n<ul>\n<li><p><tt>FIELD</tt> is replaced by the lowercase name of the field.  Supported\nfields are:</p>\n<ul>\n<li><tt>author</tt></li>\n<li><tt>author_email</tt></li>\n<li><tt>description</tt> (Note that this is the short description or summary, not\nthe long description!)</li>\n<li><tt>keywords</tt> (It is recommended to use a list of strings as the value or\nelse <tt>setuptools</tt> might mangle it)</li>\n<li><tt>license</tt></li>\n<li><tt>maintainer</tt></li>\n<li><tt>maintainer_email</tt></li>\n<li><tt>url</tt></li>\n<li><tt>version</tt></li>\n</ul>\n<p>Entries with unsupported or unknown field names are ignored.</p>\n</li>\n<li><p><tt>dotted.file.path</tt> is replaced by the path (relative to the project\nroot) to the file containing the variable, with path components separated\nby dots and the <tt>.py</tt> at the end of the last path component dropped</p>\n</li>\n<li><p><tt>varname</tt> is replaced by the name of the variable to read</p>\n</li>\n</ul>\n<p>Examples:</p>\n<pre>[tool.read_version]\n\n# Set the project's version to the value of __version__ in foobar.py:\nversion = \"foobar:__version__\"\n\n# Set the project's author to the value of author_name in\n# foobar/__init__.py\nauthor = \"foobar.__init__:author_name\"\n\n# Set the project's license to the value of LICENSE in\n# src/foobar/about.py:\nlicense = \"src.foobar.about:LICENSE\"\n</pre>\n<p>If this syntax doesn\u2019t work for you \u2014 say, because one of your path\ncomponents contains a period or colon in its name, or because the file\ndoesn\u2019t have a <tt>.py</tt> extension \u2014 or if you want to set a default value for\nwhen the variable isn\u2019t found, then make <tt>tool.read_version.FIELD</tt> into a\ntable, like so:</p>\n<pre># Set the project's version to the value of __version__ in\n# foo.bar/__init__.pyq:\n[tool.read_version.version]\npath = [\"foo.bar\", \"__init__.pyq\"]\nvariable = \"__version__\"\n\n# Set the project's author_email to the value of EMAIL in foobar.py.\n# If the variable isn't found, use the value \"me@example.com\" instead\n# of erroring\n[tool.read_version.author_email]\npath = [\"foobar.py\"]\nvariable = \"EMAIL\"\ndefault = \"me@example.com\"\n</pre>\n<p><tt>tool.read_version.FIELD</tt> tables may contain the following keys:</p>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>path:</th><td><em>(Required)</em> The path to the source file containing the variable to\nread, relative to the project root, as a list of path components</td>\n</tr>\n<tr><th>variable:</th><td><em>(Required)</em> The name of the Python variable to get the value\nfrom</td>\n</tr>\n<tr><th>default:</th><td><em>(Optional)</em> If the variable cannot be found in the source file,\nuse the given value instead; if the variable cannot be found and\n<tt>default</tt> is not set, an error will occur</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li><p>Build your project and double-check that the metadata has all the relevant\nfields set to their correct values.</p>\n</li>\n<li><p>Done!</p>\n</li>\n</ol>\n</div>\n</div>\n<div id=\"api\">\n<h2>API</h2>\n<p><tt>read_version</tt> exports a single function, also named <tt>read_version</tt>, whose\nsignature is:</p>\n<pre>read_version(*filepath, variable='__version__', default=NOTHING)\n</pre>\n<p><tt>read_version()</tt> takes one or more file path components pointing to a Python\nsource file to parse.  The path components will be joined together with\n<tt>os.path.join()</tt>, and then, if the path isn\u2019t absolute, the path to the\ndirectory containing the script calling <tt>read_version()</tt> will be prepended to\nthe path.  (No more <tt>join(dirname(__file__), <span class=\"pre\">...)</span></tt> boilerplate needed!)\n<tt>read_version()</tt> then parses the given Python file and searches through the\nparse tree for any assignments to a variable named <tt>__version__</tt>, returning\nthe last value assigned.</p>\n<p>The <tt>variable</tt> keyword argument can be set to the name of a variable other\nthan <tt>__version__</tt> to search for assignments to a different variable instead.\nSetting it to <tt>\"__doc__\"</tt> causes the function to return the module docstring.</p>\n<p>If no assignments to the variable are found, a <tt>ValueError</tt> is raised.  To\ninstead return a default value when this happens, set the <tt>default</tt> keyword\nargument.</p>\n</div>\n<div id=\"restrictions\">\n<h2>Restrictions</h2>\n<p><tt>read_variable</tt> only finds assignments that occur at the top level of the\nmodule, outside of any blocks.</p>\n<p>Only assignments of literal values are supported; assignments to the\nsearched-for variable involving more complicated expressions will cause an\nerror to be raised.</p>\n</div>\n\n          </div>"}, "last_serial": 6829765, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "60da49f76f94443c3540e8508ac80d87", "sha256": "8fde70d61299adf73fee5e2357541ac9b78ad0c4367ae78118965546461871bb"}, "downloads": -1, "filename": "read_version-0.1.0-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "60da49f76f94443c3540e8508ac80d87", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4", "size": 5413, "upload_time": "2018-09-25T18:12:33", "upload_time_iso_8601": "2018-09-25T18:12:33.990209Z", "url": "https://files.pythonhosted.org/packages/ca/cf/fed9a9316d7e94c7a706329ac67faff5924b192b644bda014d4d81368969/read_version-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f580ad7c19f05d5e4948cebb86efcc4e", "sha256": "2712e39d402a8229eca551b4d7c729ed1ba35823ff47412ad710f97412378b86"}, "downloads": -1, "filename": "read_version-0.1.0.tar.gz", "has_sig": true, "md5_digest": "f580ad7c19f05d5e4948cebb86efcc4e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4", "size": 6152, "upload_time": "2018-09-25T18:12:35", "upload_time_iso_8601": "2018-09-25T18:12:35.409799Z", "url": "https://files.pythonhosted.org/packages/9a/ae/2d6cb9cd3a3d54489a0c5883ce3e1472e60697d523b34f9f232324912a37/read_version-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "6a1084949d082ea41fb2419ea91ed8e2", "sha256": "bd193812a07e39c4a6058c1bb58128593e01f8a1988c36bfc0e7dbe8711784bc"}, "downloads": -1, "filename": "read_version-0.1.1-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "6a1084949d082ea41fb2419ea91ed8e2", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4", "size": 5488, "upload_time": "2019-04-27T20:20:03", "upload_time_iso_8601": "2019-04-27T20:20:03.634895Z", "url": "https://files.pythonhosted.org/packages/11/53/e1ef81ad3722eb27cf73f8ab858ac064f01785db75e9b7d2692817c609bc/read_version-0.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0f340a795b48f66d3e8cacd59be457b2", "sha256": "7baa75871f557d8cf4580bac19c41ca83514163a451690d3296bc54a22bfc26e"}, "downloads": -1, "filename": "read_version-0.1.1.tar.gz", "has_sig": true, "md5_digest": "0f340a795b48f66d3e8cacd59be457b2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4", "size": 6888, "upload_time": "2019-04-27T20:20:06", "upload_time_iso_8601": "2019-04-27T20:20:06.198308Z", "url": "https://files.pythonhosted.org/packages/76/db/3c52971f2c40de0dad4691c86df8b0b006e5cae4c94025ecbcc2cce6d023/read_version-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "d75a52ee4b4da2673c1e1e36d8426d02", "sha256": "ddfd15efb8ef5a437f6dec5a03205f588e81e43ebe918888e4d24f46a90b8fef"}, "downloads": -1, "filename": "read_version-0.2.0-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "d75a52ee4b4da2673c1e1e36d8426d02", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": "!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,<4,>=2.7", "size": 8231, "upload_time": "2020-03-16T15:53:59", "upload_time_iso_8601": "2020-03-16T15:53:59.909225Z", "url": "https://files.pythonhosted.org/packages/bc/c4/cf63c2e6f3ce9b7d249d159b9ee25569ae566c567c6cccd8c638c42a1c60/read_version-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b9aa70a4e284e8527c143cbdb2381e03", "sha256": "363d0390711776099a855d1628621a6add548dd5abf1ee9e7b42cd49513acd88"}, "downloads": -1, "filename": "read_version-0.2.0.tar.gz", "has_sig": true, "md5_digest": "b9aa70a4e284e8527c143cbdb2381e03", "packagetype": "sdist", "python_version": "source", "requires_python": "!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,<4,>=2.7", "size": 14646, "upload_time": "2020-03-16T15:54:00", "upload_time_iso_8601": "2020-03-16T15:54:00.996259Z", "url": "https://files.pythonhosted.org/packages/5f/96/1cfbe96afaaecd674932d9dc80184d22109ccaa57ed78893d4bd556b4846/read_version-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "aa7048c50fdf5675d6170348436903d5", "sha256": "724f8138019f7d979deafe1fb6868ccdc3b0edb80095a53ae59e2dd764624545"}, "downloads": -1, "filename": "read_version-0.3.0-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "aa7048c50fdf5675d6170348436903d5", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": "!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,<4,>=2.7", "size": 8367, "upload_time": "2020-03-17T16:31:49", "upload_time_iso_8601": "2020-03-17T16:31:49.914173Z", "url": "https://files.pythonhosted.org/packages/a9/72/53779c4ad6fe7c8b43b607a23e84ab2f92c6be5c92712c143c634efc1198/read_version-0.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cd975defe6189553edd3e87351184c99", "sha256": "826fe271532414ceea47466164b5829224855d7d399fd50ef1a9bbe1d0c71d8d"}, "downloads": -1, "filename": "read_version-0.3.0.tar.gz", "has_sig": true, "md5_digest": "cd975defe6189553edd3e87351184c99", "packagetype": "sdist", "python_version": "source", "requires_python": "!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,<4,>=2.7", "size": 15395, "upload_time": "2020-03-17T16:31:51", "upload_time_iso_8601": "2020-03-17T16:31:51.323735Z", "url": "https://files.pythonhosted.org/packages/1d/eb/5298beef04800abd26463a1de96031c6973201dc4845cb96dfac5a16aeea/read_version-0.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "aa7048c50fdf5675d6170348436903d5", "sha256": "724f8138019f7d979deafe1fb6868ccdc3b0edb80095a53ae59e2dd764624545"}, "downloads": -1, "filename": "read_version-0.3.0-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "aa7048c50fdf5675d6170348436903d5", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": "!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,<4,>=2.7", "size": 8367, "upload_time": "2020-03-17T16:31:49", "upload_time_iso_8601": "2020-03-17T16:31:49.914173Z", "url": "https://files.pythonhosted.org/packages/a9/72/53779c4ad6fe7c8b43b607a23e84ab2f92c6be5c92712c143c634efc1198/read_version-0.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cd975defe6189553edd3e87351184c99", "sha256": "826fe271532414ceea47466164b5829224855d7d399fd50ef1a9bbe1d0c71d8d"}, "downloads": -1, "filename": "read_version-0.3.0.tar.gz", "has_sig": true, "md5_digest": "cd975defe6189553edd3e87351184c99", "packagetype": "sdist", "python_version": "source", "requires_python": "!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,<4,>=2.7", "size": 15395, "upload_time": "2020-03-17T16:31:51", "upload_time_iso_8601": "2020-03-17T16:31:51.323735Z", "url": "https://files.pythonhosted.org/packages/1d/eb/5298beef04800abd26463a1de96031c6973201dc4845cb96dfac5a16aeea/read_version-0.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:06:23 2020"}