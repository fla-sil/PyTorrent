{"info": {"author": "DXC", "author_email": "", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 3.7"], "description": "# DXC Industrialized AI Starter\n\nDXC Indusrialized AI Starter makes it easier to build and deploy Indusrialized AI. This Library does the following:\n\n- Access, clean, and explore raw data\n- Build data pipelines\n- Run AI experiments\n- Publish microservices\n\n## Installation\n\nIn order to install and use above library please use the below code snippet:\n```\n1. pip install DXC-Industrialized-AI-Starter\n2. from dxc import ai\n```\n\n## Getting Started\n\n### Access, Clean, and Explore Raw Data\n\nHere's a quick example of using the library to access, clean, and explore raw data.\n\n```\n#Access raw data\ndf = ai.read_data_frame_from_remote_json(json_url)\ndf = ai.read_data_frame_from_remote_csv(csv_url)\ndf = ai.read_data_frame_from_local_json()\ndf = ai.read_data_frame_from_local_csv()\ndf = ai.read_data_frame_from_local_excel_file()\n\n#Clean data\nraw_data = ai.clean_dataframe(df)\n\n#Explore raw data\nai.visualize_missing_data(raw_data)\nai.explore_features(raw_data)\nai.plot_distributions(raw_data)\n```\nFor more info [click here](https://dxc-technology.github.io/DXC-Industrialized-AI-Starter/access_clean_explore/)\n### Build Data Pipelines\n\nBelow example showcases how to build a data pipeline. In order to get started,you need to first have an  <a href= \"https://account.mongodb.com/account/register\" target=\"_blank\">MongoDB</a> account which you can signup for free and create a database \"connection_string\" and specify those details in the data_layer below.\n\n\n```\n#Insert data into MongoDB:\ndata_layer = {\n    \"connection_string\": \"<your connection_string>\",\n    \"collection_name\": \"<your collection_name>\",\n    \"database_name\": \"<your database_name>\"\n}\nwrt_raw_data = ai.write_raw_data(data_layer, raw_data, date_fields = [])\n```\nThis code instructs the data store on how to refine the output of raw_data into something that can be used to train a machine-learning model. Update data_pipeline() with code with an aggregation pipeline that fits your project. The refined data will be stored in the  Pandas dataframe. Make sure the output is what you want before continuing. Below is the example for creating pipeline:\n```\npipeline = [\n        {\n            '$group':{\n                '_id': {\n                    \"funding_source\":\"$funding_source\",\n                    \"request_type\":\"$request_type\",\n                    \"department_name\":\"$department_name\",\n                    \"replacement_body_style\":\"$replacement_body_style\",\n                    \"equipment_class\":\"$equipment_class\",\n                    \"replacement_make\":\"$replacement_make\",\n                    \"replacement_model\":\"$replacement_model\",\n                    \"procurement_plan\":\"$procurement_plan\"\n                    },\n                \"avg_est_unit_cost\":{\"$avg\":\"$est_unit_cost\"},\n                \"avg_est_unit_cost_error\":{\"$avg\":{ \"$subtract\": [ \"$est_unit_cost\", \"$actual_unit_cost\" ] }}\n            }\n        }\n]\n\ndf = ai.access_data_from_pipeline(wrt_raw_data, pipeline)\n```\nFor more detailed explaination <a href= \"https://dxc-technology.github.io/DXC-Industrialized-AI-Starter/data_pipeline/\" target=\"_blank\">click here</a>\n\n### Run AI Experiments\n\nSample code snippet to run an AI Experiment. This code executes an experiment by running run_experiment() on a model. Update experiment_design with parameters that fit your project. The data parameter should remain the refined training data. The model parameter must be a model subclass. The labels parameter indicates the column of the data dataframe to be predicted. For the prediction model, the meta-data must describe the column to be predicted and the types for non-numeric columns.\n\n```\nexperiment_design = {\n    #model options include ['regression()', 'classification()']\n    \"model\": ai.regression(),\n    \"labels\": df.avg_est_unit_cost_error,\n    \"data\": df,\n    #Tell the model which column is 'output'\n    #Also note columns that aren't purely numerical\n    #Examples include ['nlp', 'date', 'categorical', 'ignore']\n    \"meta_data\": {\n      \"avg_est_unit_cost_error\": \"output\",\n      \"_id.funding_source\": \"categorical\",\n      \"_id.department_name\": \"categorical\",\n      \"_id.replacement_body_style\": \"categorical\",\n      \"_id.replacement_make\": \"categorical\",\n      \"_id.replacement_model\": \"categorical\",\n      \"_id.procurement_plan\": \"categorical\"\n  }\n}\n\ntrained_model = ai.run_experiment(experiment_design)\n```\nFor more info click [here](https://dxc-technology.github.io/DXC-Industrialized-AI-Starter/experiment/)\n\n### Publish Microservice\n\nBelow is the example for publishing a Microservice. In order to  design the microservice, you must create an [Algorithmia account](https://algorithmia.com/signup). This code defines the parameters needed to build and delpoy a microservice based on the trained model. Update microservice_design with parameters appropriate for your project.\n```\ntrained_model is the output of run_experiment() function\nmicroservice_design = {\n    \"microservice_name\": \"<Name of your microservice>\",\n    \"microservice_description\": \"<Brief description about your microservice>\",\n    \"execution_environment_username\": \"<Algorithmia username>\",\n    \"api_key\": \"<your api_key>\",\n    \"api_namespace\": \"<your api namespace>\",   \n    \"model_path\":\"<your model_path>\"\n}\n\n# publish the micro service and display the url of the api\napi_url = ai.publish_microservice(microservice_design, trained_model)\nprint(\"api url: \" + api_url)\n```\nFor more info [click here](https://dxc-technology.github.io/DXC-Industrialized-AI-Starter/publish_microservice/)\n## Docs\n\nFor detailed and complete documentation, please <a href=\"https://dxc-technology.github.io/DXC-Industrialized-AI-Starter/\" target=\"_blank\">click here</a>\n\n### Example of colab notebook\n\n<a href=\"https://colab.research.google.com/drive/1EV_Q09B-bppGbEehBgCvsv_JIM87T_n1\" target=\"_blank\">Here</a> is an detailed and in-depth example of DXC Indusrialized AI Starter library usage.\n\n### Contributing Guide\n\nTo know more about the contribution and guidelines please <a href=\"https://github.com/dxc-technology/DXC-Industrialized-AI-Starter/blob/master/CONTRIBUTING.md\" target=\"_blank\">click here</a>\n\n### Reporting Issues\nIf you find any issues, feel free to report them <a href=\"https://github.com/dxc-technology/DXC-Industrialized-AI-Starter/issues\" target=\"_blank\">here</a> with clear description of your issue.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/dxc-technology/DXC-Industrialized-AI-Starter", "keywords": "", "license": "Apache License 2.0", "maintainer": "", "maintainer_email": "", "name": "DXC-Industrialized-AI-Starter", "package_url": "https://pypi.org/project/DXC-Industrialized-AI-Starter/", "platform": "any", "project_url": "https://pypi.org/project/DXC-Industrialized-AI-Starter/", "project_urls": {"Homepage": "https://github.com/dxc-technology/DXC-Industrialized-AI-Starter"}, "release_url": "https://pypi.org/project/DXC-Industrialized-AI-Starter/1.0.2/", "requires_dist": ["JIRA", "auto-ml", "Algorithmia", "gitpython", "flatten-json", "pyjanitor", "ftfy", "arrow", "scrubadub", "yellowbrick (==1.1)", "datacleaner", "missingno", "pymongo", "IPython"], "requires_python": "", "summary": "Python library which is extensively used for all AI projects", "version": "1.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>DXC Industrialized AI Starter</h1>\n<p>DXC Indusrialized AI Starter makes it easier to build and deploy Indusrialized AI. This Library does the following:</p>\n<ul>\n<li>Access, clean, and explore raw data</li>\n<li>Build data pipelines</li>\n<li>Run AI experiments</li>\n<li>Publish microservices</li>\n</ul>\n<h2>Installation</h2>\n<p>In order to install and use above library please use the below code snippet:</p>\n<pre><code>1. pip install DXC-Industrialized-AI-Starter\n2. from dxc import ai\n</code></pre>\n<h2>Getting Started</h2>\n<h3>Access, Clean, and Explore Raw Data</h3>\n<p>Here's a quick example of using the library to access, clean, and explore raw data.</p>\n<pre><code>#Access raw data\ndf = ai.read_data_frame_from_remote_json(json_url)\ndf = ai.read_data_frame_from_remote_csv(csv_url)\ndf = ai.read_data_frame_from_local_json()\ndf = ai.read_data_frame_from_local_csv()\ndf = ai.read_data_frame_from_local_excel_file()\n\n#Clean data\nraw_data = ai.clean_dataframe(df)\n\n#Explore raw data\nai.visualize_missing_data(raw_data)\nai.explore_features(raw_data)\nai.plot_distributions(raw_data)\n</code></pre>\n<p>For more info <a href=\"https://dxc-technology.github.io/DXC-Industrialized-AI-Starter/access_clean_explore/\" rel=\"nofollow\">click here</a></p>\n<h3>Build Data Pipelines</h3>\n<p>Below example showcases how to build a data pipeline. In order to get started,you need to first have an  <a href=\"https://account.mongodb.com/account/register\" rel=\"nofollow\">MongoDB</a> account which you can signup for free and create a database \"connection_string\" and specify those details in the data_layer below.</p>\n<pre><code>#Insert data into MongoDB:\ndata_layer = {\n    \"connection_string\": \"&lt;your connection_string&gt;\",\n    \"collection_name\": \"&lt;your collection_name&gt;\",\n    \"database_name\": \"&lt;your database_name&gt;\"\n}\nwrt_raw_data = ai.write_raw_data(data_layer, raw_data, date_fields = [])\n</code></pre>\n<p>This code instructs the data store on how to refine the output of raw_data into something that can be used to train a machine-learning model. Update data_pipeline() with code with an aggregation pipeline that fits your project. The refined data will be stored in the  Pandas dataframe. Make sure the output is what you want before continuing. Below is the example for creating pipeline:</p>\n<pre><code>pipeline = [\n        {\n            '$group':{\n                '_id': {\n                    \"funding_source\":\"$funding_source\",\n                    \"request_type\":\"$request_type\",\n                    \"department_name\":\"$department_name\",\n                    \"replacement_body_style\":\"$replacement_body_style\",\n                    \"equipment_class\":\"$equipment_class\",\n                    \"replacement_make\":\"$replacement_make\",\n                    \"replacement_model\":\"$replacement_model\",\n                    \"procurement_plan\":\"$procurement_plan\"\n                    },\n                \"avg_est_unit_cost\":{\"$avg\":\"$est_unit_cost\"},\n                \"avg_est_unit_cost_error\":{\"$avg\":{ \"$subtract\": [ \"$est_unit_cost\", \"$actual_unit_cost\" ] }}\n            }\n        }\n]\n\ndf = ai.access_data_from_pipeline(wrt_raw_data, pipeline)\n</code></pre>\n<p>For more detailed explaination <a href=\"https://dxc-technology.github.io/DXC-Industrialized-AI-Starter/data_pipeline/\" rel=\"nofollow\">click here</a></p>\n<h3>Run AI Experiments</h3>\n<p>Sample code snippet to run an AI Experiment. This code executes an experiment by running run_experiment() on a model. Update experiment_design with parameters that fit your project. The data parameter should remain the refined training data. The model parameter must be a model subclass. The labels parameter indicates the column of the data dataframe to be predicted. For the prediction model, the meta-data must describe the column to be predicted and the types for non-numeric columns.</p>\n<pre><code>experiment_design = {\n    #model options include ['regression()', 'classification()']\n    \"model\": ai.regression(),\n    \"labels\": df.avg_est_unit_cost_error,\n    \"data\": df,\n    #Tell the model which column is 'output'\n    #Also note columns that aren't purely numerical\n    #Examples include ['nlp', 'date', 'categorical', 'ignore']\n    \"meta_data\": {\n      \"avg_est_unit_cost_error\": \"output\",\n      \"_id.funding_source\": \"categorical\",\n      \"_id.department_name\": \"categorical\",\n      \"_id.replacement_body_style\": \"categorical\",\n      \"_id.replacement_make\": \"categorical\",\n      \"_id.replacement_model\": \"categorical\",\n      \"_id.procurement_plan\": \"categorical\"\n  }\n}\n\ntrained_model = ai.run_experiment(experiment_design)\n</code></pre>\n<p>For more info click <a href=\"https://dxc-technology.github.io/DXC-Industrialized-AI-Starter/experiment/\" rel=\"nofollow\">here</a></p>\n<h3>Publish Microservice</h3>\n<p>Below is the example for publishing a Microservice. In order to  design the microservice, you must create an <a href=\"https://algorithmia.com/signup\" rel=\"nofollow\">Algorithmia account</a>. This code defines the parameters needed to build and delpoy a microservice based on the trained model. Update microservice_design with parameters appropriate for your project.</p>\n<pre><code>trained_model is the output of run_experiment() function\nmicroservice_design = {\n    \"microservice_name\": \"&lt;Name of your microservice&gt;\",\n    \"microservice_description\": \"&lt;Brief description about your microservice&gt;\",\n    \"execution_environment_username\": \"&lt;Algorithmia username&gt;\",\n    \"api_key\": \"&lt;your api_key&gt;\",\n    \"api_namespace\": \"&lt;your api namespace&gt;\",   \n    \"model_path\":\"&lt;your model_path&gt;\"\n}\n\n# publish the micro service and display the url of the api\napi_url = ai.publish_microservice(microservice_design, trained_model)\nprint(\"api url: \" + api_url)\n</code></pre>\n<p>For more info <a href=\"https://dxc-technology.github.io/DXC-Industrialized-AI-Starter/publish_microservice/\" rel=\"nofollow\">click here</a></p>\n<h2>Docs</h2>\n<p>For detailed and complete documentation, please <a href=\"https://dxc-technology.github.io/DXC-Industrialized-AI-Starter/\" rel=\"nofollow\">click here</a></p>\n<h3>Example of colab notebook</h3>\n<p><a href=\"https://colab.research.google.com/drive/1EV_Q09B-bppGbEehBgCvsv_JIM87T_n1\" rel=\"nofollow\">Here</a> is an detailed and in-depth example of DXC Indusrialized AI Starter library usage.</p>\n<h3>Contributing Guide</h3>\n<p>To know more about the contribution and guidelines please <a href=\"https://github.com/dxc-technology/DXC-Industrialized-AI-Starter/blob/master/CONTRIBUTING.md\" rel=\"nofollow\">click here</a></p>\n<h3>Reporting Issues</h3>\n<p>If you find any issues, feel free to report them <a href=\"https://github.com/dxc-technology/DXC-Industrialized-AI-Starter/issues\" rel=\"nofollow\">here</a> with clear description of your issue.</p>\n\n          </div>"}, "last_serial": 7191280, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "736e7625b5e13823d5bcba86c702a822", "sha256": "6d26177d614fcdd77b3d9d301c1bbb3cc581b1a98a1d66d12b9e9de5f7e114f2"}, "downloads": -1, "filename": "DXC_Industrialized_AI_Starter-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "736e7625b5e13823d5bcba86c702a822", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12815, "upload_time": "2020-04-15T23:37:28", "upload_time_iso_8601": "2020-04-15T23:37:28.481319Z", "url": "https://files.pythonhosted.org/packages/a3/9f/d709677f9cb50ebff56c8f2a2e77d5d1c31017c014a3f6dd4894bc99ead9/DXC_Industrialized_AI_Starter-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "950730e5b5e496911c3928a6baaad70b", "sha256": "9b755fb6ee1924076ab701d1837b59dae0535cf7258598759995228e4c9b17f9"}, "downloads": -1, "filename": "DXC-Industrialized-AI-Starter-0.1.tar.gz", "has_sig": false, "md5_digest": "950730e5b5e496911c3928a6baaad70b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12109, "upload_time": "2020-04-15T23:37:30", "upload_time_iso_8601": "2020-04-15T23:37:30.524908Z", "url": "https://files.pythonhosted.org/packages/b4/c0/ee53d09d741a5f7ec910c9ca8f923d558c8853358824b897f2dd90b3303e/DXC-Industrialized-AI-Starter-0.1.tar.gz", "yanked": false}], "1.0": [{"comment_text": "", "digests": {"md5": "28dbd03635d9c580d3846a40fb815bcb", "sha256": "3258850a0a072b5baacedc7c219e668e6be1dad7202594b6697131a3fa8bf7cb"}, "downloads": -1, "filename": "DXC_Industrialized_AI_Starter-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "28dbd03635d9c580d3846a40fb815bcb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13715, "upload_time": "2020-04-22T01:48:43", "upload_time_iso_8601": "2020-04-22T01:48:43.137550Z", "url": "https://files.pythonhosted.org/packages/11/b8/c8e49d6dcff732faeb40dccfd0f4418f51249e25ca8cdeea8ba537ffc469/DXC_Industrialized_AI_Starter-1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f489eba7038f63e71661d7a874dd450a", "sha256": "42c933207149b672ad58bad070cdb5073e18d4b6539098ce885f96058a814dcc"}, "downloads": -1, "filename": "DXC-Industrialized-AI-Starter-1.0.tar.gz", "has_sig": false, "md5_digest": "f489eba7038f63e71661d7a874dd450a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13248, "upload_time": "2020-04-22T01:48:44", "upload_time_iso_8601": "2020-04-22T01:48:44.359522Z", "url": "https://files.pythonhosted.org/packages/ef/b1/d174548ef805997a42cce8ecadf68dfacd8ce01c3a3038dcb0dd8c63a4a3/DXC-Industrialized-AI-Starter-1.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "c42acdf571c6f23653f7de6bab6f85e1", "sha256": "a2d59118444f3c768881eb8314edc5feb21acd616d8237144197e12ca327bc92"}, "downloads": -1, "filename": "DXC_Industrialized_AI_Starter-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c42acdf571c6f23653f7de6bab6f85e1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14324, "upload_time": "2020-05-06T16:43:49", "upload_time_iso_8601": "2020-05-06T16:43:49.822292Z", "url": "https://files.pythonhosted.org/packages/03/1f/12f463e909668360463b2111113dd323cfd94abb4511a31a429629511029/DXC_Industrialized_AI_Starter-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fbdde0e27db5880afa75b96a8e35f76a", "sha256": "06530ba114157b9c1b1a14d744e9b3135ca198b62f2fd01f6d6cf86d21bb5ab6"}, "downloads": -1, "filename": "DXC-Industrialized-AI-Starter-1.0.1.tar.gz", "has_sig": false, "md5_digest": "fbdde0e27db5880afa75b96a8e35f76a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13853, "upload_time": "2020-05-06T16:43:50", "upload_time_iso_8601": "2020-05-06T16:43:50.689309Z", "url": "https://files.pythonhosted.org/packages/35/5b/98b5d6ab2955f495710ccf14bffe2f8a9a9ae0da3114516e4c065884f6f8/DXC-Industrialized-AI-Starter-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "aca4d94c2a3b51c9beeea2f7360b92dd", "sha256": "4adc03455cca9c8995617d5d87737419b1c55d4534cf2591abf71d15ebcf7b51"}, "downloads": -1, "filename": "DXC_Industrialized_AI_Starter-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "aca4d94c2a3b51c9beeea2f7360b92dd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14351, "upload_time": "2020-05-07T19:47:47", "upload_time_iso_8601": "2020-05-07T19:47:47.635845Z", "url": "https://files.pythonhosted.org/packages/a2/3b/36ae7f8d64c69f42ade2a2d4e35fb1f94fe617ce2afeefdfe1b605a5119c/DXC_Industrialized_AI_Starter-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "52c5333db2f2b503518786e415e82b62", "sha256": "0416148cedb5429e5bc7afd368cb2cf5595a1d656e0f440c9ef226e529bef7ea"}, "downloads": -1, "filename": "DXC-Industrialized-AI-Starter-1.0.2.tar.gz", "has_sig": false, "md5_digest": "52c5333db2f2b503518786e415e82b62", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13885, "upload_time": "2020-05-07T19:47:48", "upload_time_iso_8601": "2020-05-07T19:47:48.829965Z", "url": "https://files.pythonhosted.org/packages/ce/c1/2739d650e0dbb5e53a459b2366f48062fee17476a12dcbf429e4be98f0a2/DXC-Industrialized-AI-Starter-1.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "aca4d94c2a3b51c9beeea2f7360b92dd", "sha256": "4adc03455cca9c8995617d5d87737419b1c55d4534cf2591abf71d15ebcf7b51"}, "downloads": -1, "filename": "DXC_Industrialized_AI_Starter-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "aca4d94c2a3b51c9beeea2f7360b92dd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14351, "upload_time": "2020-05-07T19:47:47", "upload_time_iso_8601": "2020-05-07T19:47:47.635845Z", "url": "https://files.pythonhosted.org/packages/a2/3b/36ae7f8d64c69f42ade2a2d4e35fb1f94fe617ce2afeefdfe1b605a5119c/DXC_Industrialized_AI_Starter-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "52c5333db2f2b503518786e415e82b62", "sha256": "0416148cedb5429e5bc7afd368cb2cf5595a1d656e0f440c9ef226e529bef7ea"}, "downloads": -1, "filename": "DXC-Industrialized-AI-Starter-1.0.2.tar.gz", "has_sig": false, "md5_digest": "52c5333db2f2b503518786e415e82b62", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13885, "upload_time": "2020-05-07T19:47:48", "upload_time_iso_8601": "2020-05-07T19:47:48.829965Z", "url": "https://files.pythonhosted.org/packages/ce/c1/2739d650e0dbb5e53a459b2366f48062fee17476a12dcbf429e4be98f0a2/DXC-Industrialized-AI-Starter-1.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:48:48 2020"}