{"info": {"author": "Akio Taniguchi", "author_email": "taniguchi@a.phys.nagoya-u.ac.jp", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# Azely\n\n[![PyPI](https://img.shields.io/pypi/v/azely.svg?label=PyPI&style=flat-square)](https://pypi.org/pypi/azely/)\n[![Python](https://img.shields.io/pypi/pyversions/azely.svg?label=Python&color=yellow&style=flat-square)](https://pypi.org/pypi/azely/)\n[![Test](https://img.shields.io/github/workflow/status/astropenguin/azely/Test?logo=github&label=Test&style=flat-square)](https://github.com/astropenguin/azely/actions)\n[![License](https://img.shields.io/badge/license-MIT-blue.svg?label=License&style=flat-square)](LICENSE)\n[![DOI](https://img.shields.io/badge/DOI-10.5281/zenodo.3680060-blue?style=flat-square)](https://doi.org/10.5281/zenodo.3680060)\n\n:zap: Computation and plotting of astronomical object's azimuth/elevation\n\n## TL;DR\n\nAzely (pronounced as \"as-elie\") is a Python package for computation and plotting of horizontal coordinates (azimuth and elevation; az/el, hereafter) of astronomical objects at given location and time.\nWhile computation and plotting are realized by [astropy] and [matplotlib], what Azely provides is high-level API to use them easily.\nIn fact Azely offers one-liner to compute and plot, for example, one-day elevation of the Sun in Tokyo:\n\n```python\n>>> azely.compute('Sun', 'Tokyo', 'today').el.plot(ylim=(0, 90))\n```\n\n## Features\n\n- **High-level API:** Azely provides a simple yet powerful `compute()` function. Users can complete most of operation with it (e.g., information acquisition and computation).\n- **Handy output:** Azely's output (from `compute()`) is [pandas] DataFrame, a de facto standard data structure of Python. Users can convert it to other formats like CSV and plot it by [matplotlib] using builtin methods.\n- **Web information acquisition:** Azely can automatically acquire object and location information (i.e., longitude and latitude) from online services (e.g., catalogues or maps). Obtained information is cached in a local [TOML] file for an offline use.\n- **User-defined information:** Azely also offers to use user-defined object and location information written in a [TOML] file.\n\n## Requirements\n\n- **Python:** 3.6, 3.7, or 3.8 (tested by author)\n- **Dependencies:** See [pyproject.toml](https://github.com/astropenguin/azely/blob/master/pyproject.toml)\n\n## Installation\n\n```shell\n$ pip install azely\n```\n\n## Basic usage\n\nThis section describes basic az/el computation using `compute()` function.\n\n### Compute function\n\nAzely's `compute()` function receives the following parameters and returns [pandas] DataFrame (`df`):\n\n```python\n>>> import azely\n>>> df = azely.compute(object, site, time, view, **options)\n```\n\nThis means that `azely` will `compute` az/el of `object` observed from `site` at (on) `time` in `view`.\nFor example, the following code will compute az/el of Sun observed from ALMA AOS on Jan. 1st 2020 in Tokyo.\n\n```python\n>>> df = azely.compute('Sun', 'ALMA AOS', '2020-01-01', 'Tokyo')\n```\n\nAcceptable formats of each parameter and examples are as follows.\n\n| Parameter | Acceptable format | Description | Examples |\n| --- | --- | --- | --- |\n| `object` | `<obj. name>` | name of object to be searched | `'Sun'`, `'NGC1068'` |\n| | `<toml>:<obj. name>` | user-defined object to be loaded (see below) | `'user.toml:M42'`, `'user:M42'` (also valid) |\n| `site` | `'here'` (default) | current location (guess by IP address) | - |\n| | `<loc. name>` | name of location to be searched | `'ALMA AOS'`, `'Tokyo'` |\n| | `<toml>:<loc. name>` | user-defined location to be loaded (see below) | `'user.toml:ASTE'`, `'user:ASTE'` (also valid) |\n| `time` | `'now'` (default) | get current time | - |\n| | `'today'` | get one-day time range today | - |\n| | `<time>` | start time of one-day time range | `'2020-01-01'`, `'1/1 12:00'`, `'Jan. 1st'` |\n| | `<time> to <time>` | start and end of time range | `'1/1 to 1/3'`, `'Jan. 1st to Jan. 3rd'` |\n| `view` | `''` (default) | use timezone of `site` | - |\n| | `<tz name>` | name of timezone database | `'Asia/Tokyo'`, `'UTC'` |\n| | `<loc. name>` | name of location from which timezone is identified | same as `site`'s examples |\n| | `<toml>:<loc. name>` | user-defined location from which timezone is identified | same as `site`'s examples |\n\n### Output DataFrame\n\nThe output DataFrame contains az/el expressed in units of degrees and local sidereal time (LST) at `site` indexed by time in `view`:\n\n```python\n>>> print(df)\n```\n```\n                                  az         el             lst\nAsia/Tokyo\n2020-01-01 00:00:00+09:00  94.820323  68.416756 17:07:59.405556\n2020-01-01 00:10:00+09:00  94.333979  70.709575 17:18:01.048298\n2020-01-01 00:20:00+09:00  93.856123  73.003864 17:28:02.691044\n2020-01-01 00:30:00+09:00  93.388695  75.299436 17:38:04.333786\n2020-01-01 00:40:00+09:00  92.935403  77.596109 17:48:05.976529\n...                              ...        ...             ...\n2020-01-01 23:20:00+09:00  96.711830  59.146249 16:31:49.389513\n2020-01-01 23:30:00+09:00  96.185941  61.431823 16:41:51.032256\n2020-01-01 23:40:00+09:00  95.664855  63.719668 16:51:52.674998\n2020-01-01 23:50:00+09:00  95.147951  66.009577 17:01:54.317740\n2020-01-02 00:00:00+09:00  94.634561  68.301349 17:11:55.960483\n\n[145 rows x 3 columns]\n```\n\n### Example\n\nHere is a sample script which will plot one-day elevation of the Sun and candidates of black hole shadow observations at ALMA AOS on Apr. 11th 2017 in UTC.\n\n```python\nimport azely\nimport matplotlib.pyplot as plt\nplt.style.use('seaborn-whitegrid')\n\nfig, ax = plt.subplots(figsize=(12, 4))\n\nsite = 'ALMA AOS'\ntime = 'Apr. 11th 2017'\nview = 'UTC'\n\nfor obj in ('Sun', 'Sgr A*', 'M87', 'M104', 'Cen A'):\n    df = azely.compute(obj, site, time, view)\n    df.el.plot(ax=ax, label=obj)\n\nax.set_title(f'site: {site}, view: {view}, time: {time}')\nax.set_ylabel('Elevation (deg)')\nax.set_ylim(0, 90)\nax.legend()\n\nfig.show()\n```\n\n![example.png](https://raw.githubusercontent.com/astropenguin/azely/master/docs/images/example.png)\n\n## Advanced usage\n\nThis section describes advanced usage of Azely by special DataFrame accessor and local [TOML] files.\nNote that Azely will create a config directory, `$XDG_CONFIG_HOME/azely` (if the environment variable exists) or `~/.config/azely`, after importing `azely` for the first time.\n[TOML] files for configuration (`config.toml`) and cached information (`objects.toml`, `locations.toml`) will be automatically created in it.\n\n### Plotting in local sidereal time\n\nThe `compute()` function does not accept local sidereal time (LST) as `view` (i.e., `view='LST'`) because LST has no information on year and date.\nInstead an output DataFrame has `in_lst` property which provides az/el with a LST index converted from the original time index.\nFor example, the following code will plot elevation of an object in LST:\n\n```python\n>>> df.in_lst.el.plot()\n```\n\nIn order to use LST values as an index of DataFrame, LST has pseudo dates which\nstart from `1970-01-01`. Please ignore them or hide them by using [matplotlib] DateFormatter when you plot the result.\nHere is a sample script which has JST time axis at the bottom and LST axis at the top of a figure, respectively.\n\n```python\nimport matplotlib.dates as mdates\n\ndf = azely.compute('Sun', 'Tokyo', '2020-01-01')\n\nfig, ax = plt.subplots(figsize=(12, 4))\ntwin = ax.twiny()\n\ndf.el.plot(ax=ax, label=df.object.name)\ndf.in_lst.el.plot(ax=twin, alpha=0)\n\nax.set_ylabel(\"Elevation (deg)\")\nax.set_ylim(0, 90)\nax.legend()\n\nformatter = mdates.DateFormatter('%H:%M')\ntwin.xaxis.set_major_formatter(formatter)\nfig.autofmt_xdate(rotation=0)\n```\n\n### User-defined information\n\nAzely offers to use user-defined information from a [TOML] file.\nHere is a sample TOML file (e.g., `user.toml`) which has custom object and location informaiton.\n\n```\n# user.toml\n\n[ASTE]\nname = \"ASTE Telescope\"\nlongitude = \"-67.70317915\"\nlatitude = \"-22.97163575\"\naltitude = \"0\"\n\n[GC]\nname = \"Galactic center\"\nframe = \"galactic\"\nlongitude = \"0deg\"\nlatitude = \"0deg\"\n```\n\nIf it is located in a current directory or in the Azely's config directory, users can use the information like:\n\n```python\n>>> df = azely.compute('user:GC', 'user:ASTE', '2020-01-01')\n```\n\n### Cached information\n\nObject and location information obtained from online services is cached to [TOML] files (`objects.toml`, `locations.toml`) in the Azely's config directory with the same format as user-defined files.\nIf a query argument is given with `'!'` at the beginning of it, then the cached values are forcibly updated by a new acquisition.\nThis is useful, for example, when users want to update a current location:\n\n```python\n>>> df = azely.compute('Sun', '!here', '2020-01-01')\n```\n\n### Customizing defualt values\n\nUsers can modify default values of the `compute()` function by editing the Azely's config [TOML] file (`config.toml`) in the Azely's config directory like:\n\n```\n# config.toml\n\n[compute]\nsite = \"Tokyo\"\ntime = \"today\"\n```\n\nThen `compute('Sun')` becomes equivalent to `compute('Sun', 'Tokyo', 'today')`.\n\n## References\n\n- [astropy]\n- [matplotlib]\n- [pandas]\n- [TOML]\n\n<!-- references -->\n[astropy]: https://astropy.org\n[matplotlib]: https://matplotlib.org\n[pandas]: https://pandas.pydata.org\n[TOML]: https://github.com/toml-lang/toml\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/astropenguin/azely", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "azely", "package_url": "https://pypi.org/project/azely/", "platform": "", "project_url": "https://pypi.org/project/azely/", "project_urls": {"Documentation": "https://astropenguin.github.io/azely", "Homepage": "https://github.com/astropenguin/azely"}, "release_url": "https://pypi.org/project/azely/0.5.2/", "requires_dist": ["astropy (>=4.0,<5.0)", "dataclasses (>=0.7,<0.8); python_version >= \"3.6\" and python_version < \"3.7\"", "docopt (>=0.6.2,<0.7.0)", "geopy (>=1.21.0,<2.0.0)", "matplotlib (>=3.1.3,<4.0.0)", "numpy (>=1.17.5,<2.0.0)", "pandas (>=0.25.0,<1.1.0)", "python-dateutil (>=2.6.1,<3.0.0)", "pytz (>=2018.9,<2020.0)", "requests (>=2.21.0,<3.0.0)", "timezonefinder (>=4.2.0,<5.0.0)", "toml (>=0.10.0,<0.11.0)"], "requires_python": ">=3.6,<4.0", "summary": "Computation and plotting of astronomical object's azimuth/elevation", "version": "0.5.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Azely</h1>\n<p><a href=\"https://pypi.org/pypi/azely/\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7aee143431fff005236d49f23cd4abeea04a0ed5/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f617a656c792e7376673f6c6162656c3d50795049267374796c653d666c61742d737175617265\"></a>\n<a href=\"https://pypi.org/pypi/azely/\" rel=\"nofollow\"><img alt=\"Python\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/19c16e1c2870d6bf578750ebd2e1f9e6a434cc67/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f617a656c792e7376673f6c6162656c3d507974686f6e26636f6c6f723d79656c6c6f77267374796c653d666c61742d737175617265\"></a>\n<a href=\"https://github.com/astropenguin/azely/actions\" rel=\"nofollow\"><img alt=\"Test\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1a5c3bd51db684042e37b33d9494de2b9116ec94/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f776f726b666c6f772f7374617475732f617374726f70656e6775696e2f617a656c792f546573743f6c6f676f3d676974687562266c6162656c3d54657374267374796c653d666c61742d737175617265\"></a>\n<a href=\"LICENSE\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/442729786e3a8d40b0c41e6526c2af2730966125/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d626c75652e7376673f6c6162656c3d4c6963656e7365267374796c653d666c61742d737175617265\"></a>\n<a href=\"https://doi.org/10.5281/zenodo.3680060\" rel=\"nofollow\"><img alt=\"DOI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/aff09d714902b9c55ce2d16c1b113c4a181c6b82/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f444f492d31302e353238312f7a656e6f646f2e333638303036302d626c75653f7374796c653d666c61742d737175617265\"></a></p>\n<p>:zap: Computation and plotting of astronomical object's azimuth/elevation</p>\n<h2>TL;DR</h2>\n<p>Azely (pronounced as \"as-elie\") is a Python package for computation and plotting of horizontal coordinates (azimuth and elevation; az/el, hereafter) of astronomical objects at given location and time.\nWhile computation and plotting are realized by <a href=\"https://astropy.org\" rel=\"nofollow\">astropy</a> and <a href=\"https://matplotlib.org\" rel=\"nofollow\">matplotlib</a>, what Azely provides is high-level API to use them easily.\nIn fact Azely offers one-liner to compute and plot, for example, one-day elevation of the Sun in Tokyo:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">azely</span><span class=\"o\">.</span><span class=\"n\">compute</span><span class=\"p\">(</span><span class=\"s1\">'Sun'</span><span class=\"p\">,</span> <span class=\"s1\">'Tokyo'</span><span class=\"p\">,</span> <span class=\"s1\">'today'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">el</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">ylim</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">90</span><span class=\"p\">))</span>\n</pre>\n<h2>Features</h2>\n<ul>\n<li><strong>High-level API:</strong> Azely provides a simple yet powerful <code>compute()</code> function. Users can complete most of operation with it (e.g., information acquisition and computation).</li>\n<li><strong>Handy output:</strong> Azely's output (from <code>compute()</code>) is <a href=\"https://pandas.pydata.org\" rel=\"nofollow\">pandas</a> DataFrame, a de facto standard data structure of Python. Users can convert it to other formats like CSV and plot it by <a href=\"https://matplotlib.org\" rel=\"nofollow\">matplotlib</a> using builtin methods.</li>\n<li><strong>Web information acquisition:</strong> Azely can automatically acquire object and location information (i.e., longitude and latitude) from online services (e.g., catalogues or maps). Obtained information is cached in a local <a href=\"https://github.com/toml-lang/toml\" rel=\"nofollow\">TOML</a> file for an offline use.</li>\n<li><strong>User-defined information:</strong> Azely also offers to use user-defined object and location information written in a <a href=\"https://github.com/toml-lang/toml\" rel=\"nofollow\">TOML</a> file.</li>\n</ul>\n<h2>Requirements</h2>\n<ul>\n<li><strong>Python:</strong> 3.6, 3.7, or 3.8 (tested by author)</li>\n<li><strong>Dependencies:</strong> See <a href=\"https://github.com/astropenguin/azely/blob/master/pyproject.toml\" rel=\"nofollow\">pyproject.toml</a></li>\n</ul>\n<h2>Installation</h2>\n<pre>$ pip install azely\n</pre>\n<h2>Basic usage</h2>\n<p>This section describes basic az/el computation using <code>compute()</code> function.</p>\n<h3>Compute function</h3>\n<p>Azely's <code>compute()</code> function receives the following parameters and returns <a href=\"https://pandas.pydata.org\" rel=\"nofollow\">pandas</a> DataFrame (<code>df</code>):</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">azely</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">azely</span><span class=\"o\">.</span><span class=\"n\">compute</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">,</span> <span class=\"n\">site</span><span class=\"p\">,</span> <span class=\"n\">time</span><span class=\"p\">,</span> <span class=\"n\">view</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">options</span><span class=\"p\">)</span>\n</pre>\n<p>This means that <code>azely</code> will <code>compute</code> az/el of <code>object</code> observed from <code>site</code> at (on) <code>time</code> in <code>view</code>.\nFor example, the following code will compute az/el of Sun observed from ALMA AOS on Jan. 1st 2020 in Tokyo.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">azely</span><span class=\"o\">.</span><span class=\"n\">compute</span><span class=\"p\">(</span><span class=\"s1\">'Sun'</span><span class=\"p\">,</span> <span class=\"s1\">'ALMA AOS'</span><span class=\"p\">,</span> <span class=\"s1\">'2020-01-01'</span><span class=\"p\">,</span> <span class=\"s1\">'Tokyo'</span><span class=\"p\">)</span>\n</pre>\n<p>Acceptable formats of each parameter and examples are as follows.</p>\n<table>\n<thead>\n<tr>\n<th>Parameter</th>\n<th>Acceptable format</th>\n<th>Description</th>\n<th>Examples</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>object</code></td>\n<td><code>&lt;obj. name&gt;</code></td>\n<td>name of object to be searched</td>\n<td><code>'Sun'</code>, <code>'NGC1068'</code></td>\n</tr>\n<tr>\n<td></td>\n<td><code>&lt;toml&gt;:&lt;obj. name&gt;</code></td>\n<td>user-defined object to be loaded (see below)</td>\n<td><code>'user.toml:M42'</code>, <code>'user:M42'</code> (also valid)</td>\n</tr>\n<tr>\n<td><code>site</code></td>\n<td><code>'here'</code> (default)</td>\n<td>current location (guess by IP address)</td>\n<td>-</td>\n</tr>\n<tr>\n<td></td>\n<td><code>&lt;loc. name&gt;</code></td>\n<td>name of location to be searched</td>\n<td><code>'ALMA AOS'</code>, <code>'Tokyo'</code></td>\n</tr>\n<tr>\n<td></td>\n<td><code>&lt;toml&gt;:&lt;loc. name&gt;</code></td>\n<td>user-defined location to be loaded (see below)</td>\n<td><code>'user.toml:ASTE'</code>, <code>'user:ASTE'</code> (also valid)</td>\n</tr>\n<tr>\n<td><code>time</code></td>\n<td><code>'now'</code> (default)</td>\n<td>get current time</td>\n<td>-</td>\n</tr>\n<tr>\n<td></td>\n<td><code>'today'</code></td>\n<td>get one-day time range today</td>\n<td>-</td>\n</tr>\n<tr>\n<td></td>\n<td><code>&lt;time&gt;</code></td>\n<td>start time of one-day time range</td>\n<td><code>'2020-01-01'</code>, <code>'1/1 12:00'</code>, <code>'Jan. 1st'</code></td>\n</tr>\n<tr>\n<td></td>\n<td><code>&lt;time&gt; to &lt;time&gt;</code></td>\n<td>start and end of time range</td>\n<td><code>'1/1 to 1/3'</code>, <code>'Jan. 1st to Jan. 3rd'</code></td>\n</tr>\n<tr>\n<td><code>view</code></td>\n<td><code>''</code> (default)</td>\n<td>use timezone of <code>site</code></td>\n<td>-</td>\n</tr>\n<tr>\n<td></td>\n<td><code>&lt;tz name&gt;</code></td>\n<td>name of timezone database</td>\n<td><code>'Asia/Tokyo'</code>, <code>'UTC'</code></td>\n</tr>\n<tr>\n<td></td>\n<td><code>&lt;loc. name&gt;</code></td>\n<td>name of location from which timezone is identified</td>\n<td>same as <code>site</code>'s examples</td>\n</tr>\n<tr>\n<td></td>\n<td><code>&lt;toml&gt;:&lt;loc. name&gt;</code></td>\n<td>user-defined location from which timezone is identified</td>\n<td>same as <code>site</code>'s examples</td>\n</tr></tbody></table>\n<h3>Output DataFrame</h3>\n<p>The output DataFrame contains az/el expressed in units of degrees and local sidereal time (LST) at <code>site</code> indexed by time in <code>view</code>:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">)</span>\n</pre>\n<pre><code>                                  az         el             lst\nAsia/Tokyo\n2020-01-01 00:00:00+09:00  94.820323  68.416756 17:07:59.405556\n2020-01-01 00:10:00+09:00  94.333979  70.709575 17:18:01.048298\n2020-01-01 00:20:00+09:00  93.856123  73.003864 17:28:02.691044\n2020-01-01 00:30:00+09:00  93.388695  75.299436 17:38:04.333786\n2020-01-01 00:40:00+09:00  92.935403  77.596109 17:48:05.976529\n...                              ...        ...             ...\n2020-01-01 23:20:00+09:00  96.711830  59.146249 16:31:49.389513\n2020-01-01 23:30:00+09:00  96.185941  61.431823 16:41:51.032256\n2020-01-01 23:40:00+09:00  95.664855  63.719668 16:51:52.674998\n2020-01-01 23:50:00+09:00  95.147951  66.009577 17:01:54.317740\n2020-01-02 00:00:00+09:00  94.634561  68.301349 17:11:55.960483\n\n[145 rows x 3 columns]\n</code></pre>\n<h3>Example</h3>\n<p>Here is a sample script which will plot one-day elevation of the Sun and candidates of black hole shadow observations at ALMA AOS on Apr. 11th 2017 in UTC.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">azely</span>\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">style</span><span class=\"o\">.</span><span class=\"n\">use</span><span class=\"p\">(</span><span class=\"s1\">'seaborn-whitegrid'</span><span class=\"p\">)</span>\n\n<span class=\"n\">fig</span><span class=\"p\">,</span> <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplots</span><span class=\"p\">(</span><span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">))</span>\n\n<span class=\"n\">site</span> <span class=\"o\">=</span> <span class=\"s1\">'ALMA AOS'</span>\n<span class=\"n\">time</span> <span class=\"o\">=</span> <span class=\"s1\">'Apr. 11th 2017'</span>\n<span class=\"n\">view</span> <span class=\"o\">=</span> <span class=\"s1\">'UTC'</span>\n\n<span class=\"k\">for</span> <span class=\"n\">obj</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"s1\">'Sun'</span><span class=\"p\">,</span> <span class=\"s1\">'Sgr A*'</span><span class=\"p\">,</span> <span class=\"s1\">'M87'</span><span class=\"p\">,</span> <span class=\"s1\">'M104'</span><span class=\"p\">,</span> <span class=\"s1\">'Cen A'</span><span class=\"p\">):</span>\n    <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">azely</span><span class=\"o\">.</span><span class=\"n\">compute</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">site</span><span class=\"p\">,</span> <span class=\"n\">time</span><span class=\"p\">,</span> <span class=\"n\">view</span><span class=\"p\">)</span>\n    <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">el</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">ax</span><span class=\"o\">=</span><span class=\"n\">ax</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"n\">obj</span><span class=\"p\">)</span>\n\n<span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">set_title</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'site: </span><span class=\"si\">{</span><span class=\"n\">site</span><span class=\"si\">}</span><span class=\"s1\">, view: </span><span class=\"si\">{</span><span class=\"n\">view</span><span class=\"si\">}</span><span class=\"s1\">, time: </span><span class=\"si\">{</span><span class=\"n\">time</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">set_ylabel</span><span class=\"p\">(</span><span class=\"s1\">'Elevation (deg)'</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">set_ylim</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">90</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">legend</span><span class=\"p\">()</span>\n\n<span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n<p><img alt=\"example.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0777a64b7fbd4da64897f61705dbe29eabdf4260/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f617374726f70656e6775696e2f617a656c792f6d61737465722f646f63732f696d616765732f6578616d706c652e706e67\"></p>\n<h2>Advanced usage</h2>\n<p>This section describes advanced usage of Azely by special DataFrame accessor and local <a href=\"https://github.com/toml-lang/toml\" rel=\"nofollow\">TOML</a> files.\nNote that Azely will create a config directory, <code>$XDG_CONFIG_HOME/azely</code> (if the environment variable exists) or <code>~/.config/azely</code>, after importing <code>azely</code> for the first time.\n<a href=\"https://github.com/toml-lang/toml\" rel=\"nofollow\">TOML</a> files for configuration (<code>config.toml</code>) and cached information (<code>objects.toml</code>, <code>locations.toml</code>) will be automatically created in it.</p>\n<h3>Plotting in local sidereal time</h3>\n<p>The <code>compute()</code> function does not accept local sidereal time (LST) as <code>view</code> (i.e., <code>view='LST'</code>) because LST has no information on year and date.\nInstead an output DataFrame has <code>in_lst</code> property which provides az/el with a LST index converted from the original time index.\nFor example, the following code will plot elevation of an object in LST:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">in_lst</span><span class=\"o\">.</span><span class=\"n\">el</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">()</span>\n</pre>\n<p>In order to use LST values as an index of DataFrame, LST has pseudo dates which\nstart from <code>1970-01-01</code>. Please ignore them or hide them by using <a href=\"https://matplotlib.org\" rel=\"nofollow\">matplotlib</a> DateFormatter when you plot the result.\nHere is a sample script which has JST time axis at the bottom and LST axis at the top of a figure, respectively.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">matplotlib.dates</span> <span class=\"k\">as</span> <span class=\"nn\">mdates</span>\n\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">azely</span><span class=\"o\">.</span><span class=\"n\">compute</span><span class=\"p\">(</span><span class=\"s1\">'Sun'</span><span class=\"p\">,</span> <span class=\"s1\">'Tokyo'</span><span class=\"p\">,</span> <span class=\"s1\">'2020-01-01'</span><span class=\"p\">)</span>\n\n<span class=\"n\">fig</span><span class=\"p\">,</span> <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplots</span><span class=\"p\">(</span><span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">))</span>\n<span class=\"n\">twin</span> <span class=\"o\">=</span> <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">twiny</span><span class=\"p\">()</span>\n\n<span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">el</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">ax</span><span class=\"o\">=</span><span class=\"n\">ax</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">object</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n<span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">in_lst</span><span class=\"o\">.</span><span class=\"n\">el</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">ax</span><span class=\"o\">=</span><span class=\"n\">twin</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">set_ylabel</span><span class=\"p\">(</span><span class=\"s2\">\"Elevation (deg)\"</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">set_ylim</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">90</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">legend</span><span class=\"p\">()</span>\n\n<span class=\"n\">formatter</span> <span class=\"o\">=</span> <span class=\"n\">mdates</span><span class=\"o\">.</span><span class=\"n\">DateFormatter</span><span class=\"p\">(</span><span class=\"s1\">'%H:%M'</span><span class=\"p\">)</span>\n<span class=\"n\">twin</span><span class=\"o\">.</span><span class=\"n\">xaxis</span><span class=\"o\">.</span><span class=\"n\">set_major_formatter</span><span class=\"p\">(</span><span class=\"n\">formatter</span><span class=\"p\">)</span>\n<span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">autofmt_xdate</span><span class=\"p\">(</span><span class=\"n\">rotation</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n</pre>\n<h3>User-defined information</h3>\n<p>Azely offers to use user-defined information from a <a href=\"https://github.com/toml-lang/toml\" rel=\"nofollow\">TOML</a> file.\nHere is a sample TOML file (e.g., <code>user.toml</code>) which has custom object and location informaiton.</p>\n<pre><code># user.toml\n\n[ASTE]\nname = \"ASTE Telescope\"\nlongitude = \"-67.70317915\"\nlatitude = \"-22.97163575\"\naltitude = \"0\"\n\n[GC]\nname = \"Galactic center\"\nframe = \"galactic\"\nlongitude = \"0deg\"\nlatitude = \"0deg\"\n</code></pre>\n<p>If it is located in a current directory or in the Azely's config directory, users can use the information like:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">azely</span><span class=\"o\">.</span><span class=\"n\">compute</span><span class=\"p\">(</span><span class=\"s1\">'user:GC'</span><span class=\"p\">,</span> <span class=\"s1\">'user:ASTE'</span><span class=\"p\">,</span> <span class=\"s1\">'2020-01-01'</span><span class=\"p\">)</span>\n</pre>\n<h3>Cached information</h3>\n<p>Object and location information obtained from online services is cached to <a href=\"https://github.com/toml-lang/toml\" rel=\"nofollow\">TOML</a> files (<code>objects.toml</code>, <code>locations.toml</code>) in the Azely's config directory with the same format as user-defined files.\nIf a query argument is given with <code>'!'</code> at the beginning of it, then the cached values are forcibly updated by a new acquisition.\nThis is useful, for example, when users want to update a current location:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">azely</span><span class=\"o\">.</span><span class=\"n\">compute</span><span class=\"p\">(</span><span class=\"s1\">'Sun'</span><span class=\"p\">,</span> <span class=\"s1\">'!here'</span><span class=\"p\">,</span> <span class=\"s1\">'2020-01-01'</span><span class=\"p\">)</span>\n</pre>\n<h3>Customizing defualt values</h3>\n<p>Users can modify default values of the <code>compute()</code> function by editing the Azely's config <a href=\"https://github.com/toml-lang/toml\" rel=\"nofollow\">TOML</a> file (<code>config.toml</code>) in the Azely's config directory like:</p>\n<pre><code># config.toml\n\n[compute]\nsite = \"Tokyo\"\ntime = \"today\"\n</code></pre>\n<p>Then <code>compute('Sun')</code> becomes equivalent to <code>compute('Sun', 'Tokyo', 'today')</code>.</p>\n<h2>References</h2>\n<ul>\n<li><a href=\"https://astropy.org\" rel=\"nofollow\">astropy</a></li>\n<li><a href=\"https://matplotlib.org\" rel=\"nofollow\">matplotlib</a></li>\n<li><a href=\"https://pandas.pydata.org\" rel=\"nofollow\">pandas</a></li>\n<li><a href=\"https://github.com/toml-lang/toml\" rel=\"nofollow\">TOML</a></li>\n</ul>\n\n\n          </div>"}, "last_serial": 6683132, "releases": {"0.2": [{"comment_text": "", "digests": {"md5": "af9f2b1794cd7ece4da3cd835bbdd2db", "sha256": "0b8717c39995931c54fa532ad157397134c0fda3274e39a64723c908f4ff1ea0"}, "downloads": -1, "filename": "azely-0.2.tar.gz", "has_sig": false, "md5_digest": "af9f2b1794cd7ece4da3cd835bbdd2db", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14456, "upload_time": "2018-03-12T09:33:21", "upload_time_iso_8601": "2018-03-12T09:33:21.027606Z", "url": "https://files.pythonhosted.org/packages/07/22/61be7a7b1e4d67215c4f3e589fae30513060e17559945dfe9ecc3bd6aed2/azely-0.2.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "390ed18b0f54656081b53939f228649b", "sha256": "433f51a8b92d4c0307d5683064d597c7156b853621ad5e6c2b2ecbbbc02518fb"}, "downloads": -1, "filename": "azely-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "390ed18b0f54656081b53939f228649b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.1,<4.0.0", "size": 6762, "upload_time": "2020-02-08T16:57:22", "upload_time_iso_8601": "2020-02-08T16:57:22.744615Z", "url": "https://files.pythonhosted.org/packages/8e/94/888c1fd221835f6a9db3711ca838ab90fb74bd6c7c1b7c72aa427617fd81/azely-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c7d4447d4844e141c8a91acd93862e72", "sha256": "56b2b258b1ff78e25e4dd55c19bec65c07036d0bfa4eda20a9156e51b9b7dc22"}, "downloads": -1, "filename": "azely-0.4.0.tar.gz", "has_sig": false, "md5_digest": "c7d4447d4844e141c8a91acd93862e72", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.1,<4.0.0", "size": 5147, "upload_time": "2020-02-08T16:57:23", "upload_time_iso_8601": "2020-02-08T16:57:23.878141Z", "url": "https://files.pythonhosted.org/packages/7f/66/9dc9ee05427993253d82bcbbdf3d3aaf3acfa677e73ebc04f71addb730a1/azely-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "a37f2d3ad659ae1ef8d0b473b09cfb06", "sha256": "b0d9d3aedec95b6d73d1af68897200d4be54cb8c1dc1df7e950fb9d47c16565a"}, "downloads": -1, "filename": "azely-0.4.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a37f2d3ad659ae1ef8d0b473b09cfb06", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.1,<4.0.0", "size": 6765, "upload_time": "2020-02-09T05:24:45", "upload_time_iso_8601": "2020-02-09T05:24:45.829250Z", "url": "https://files.pythonhosted.org/packages/a3/9c/b58f9980d1d3fdbf9ecda15915b97793ed6df6d8c6332ef74df04c02c1c4/azely-0.4.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "938651530bb3da4f1a4678c66c1387c6", "sha256": "0530bf33be50a0fe529e9ab6d509dd339488ad6b0effcec3b5b8ad8f959bc769"}, "downloads": -1, "filename": "azely-0.4.1.tar.gz", "has_sig": false, "md5_digest": "938651530bb3da4f1a4678c66c1387c6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.1,<4.0.0", "size": 5127, "upload_time": "2020-02-09T05:24:47", "upload_time_iso_8601": "2020-02-09T05:24:47.050583Z", "url": "https://files.pythonhosted.org/packages/ab/8c/c2eb9ba8ff17cafca3c2eacd2973da17150a738970f33c2b5bf2ea953d0a/azely-0.4.1.tar.gz", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "2a8375f442a78ace258f27bf555f68bf", "sha256": "68fdc8bf28314cb9707431ec241493a96e9e20f9e11475606cd5cb7dd924e21d"}, "downloads": -1, "filename": "azely-0.4.2-py3-none-any.whl", "has_sig": false, "md5_digest": "2a8375f442a78ace258f27bf555f68bf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 6788, "upload_time": "2020-02-09T06:08:43", "upload_time_iso_8601": "2020-02-09T06:08:43.470850Z", "url": "https://files.pythonhosted.org/packages/b4/29/4c4b8d1ed4174e23df244f055e93dabca72c139d00b1bf6c7137e9bfce47/azely-0.4.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e62c4cea3efcd860441426e61c8b3ea3", "sha256": "5a60c4080b89c23e2608c2ee34689325c388cd30beaafe6a68c1b28d104f4619"}, "downloads": -1, "filename": "azely-0.4.2.tar.gz", "has_sig": false, "md5_digest": "e62c4cea3efcd860441426e61c8b3ea3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 5142, "upload_time": "2020-02-09T06:08:44", "upload_time_iso_8601": "2020-02-09T06:08:44.851617Z", "url": "https://files.pythonhosted.org/packages/4c/fa/9778eb73622e6f3be8375644e70ab057d225a4b61aac8c6fdeeb7eab4753/azely-0.4.2.tar.gz", "yanked": false}], "0.4.3": [{"comment_text": "", "digests": {"md5": "15f6e181c4aa12ab15b51b986d1dea93", "sha256": "d952048e74d5410520e876426a573b93d7dd26b46e5ef423776e50bb83bcf17c"}, "downloads": -1, "filename": "azely-0.4.3-py3-none-any.whl", "has_sig": false, "md5_digest": "15f6e181c4aa12ab15b51b986d1dea93", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 6816, "upload_time": "2020-02-09T06:29:22", "upload_time_iso_8601": "2020-02-09T06:29:22.759084Z", "url": "https://files.pythonhosted.org/packages/2a/82/55d277d262334861703a4e02a16509ff838b54fc293004e21b389e3870c5/azely-0.4.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "027d23568fdc25eeeee7d27256e91b8a", "sha256": "87c83bf9091d0a3504492ce55da1eb90f31be090a5fb14a59dbf841049c386b7"}, "downloads": -1, "filename": "azely-0.4.3.tar.gz", "has_sig": false, "md5_digest": "027d23568fdc25eeeee7d27256e91b8a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 5158, "upload_time": "2020-02-09T06:29:24", "upload_time_iso_8601": "2020-02-09T06:29:24.138045Z", "url": "https://files.pythonhosted.org/packages/07/5b/f1660a446c2a17d12033992682da02064dfd54b378d38be1a509ad6a0946/azely-0.4.3.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "c8a2248f44801a6814c97f3d2be6df3f", "sha256": "81694a960b30ff53476b946caa992f725ffccf3fef2d4cddccfc1aa89bc99286"}, "downloads": -1, "filename": "azely-0.5.0-py3-none-any.whl", "has_sig": false, "md5_digest": "c8a2248f44801a6814c97f3d2be6df3f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 14091, "upload_time": "2020-02-23T03:19:59", "upload_time_iso_8601": "2020-02-23T03:19:59.931645Z", "url": "https://files.pythonhosted.org/packages/5d/a8/d21c210759adfda16899d82db17bf3e7280e4afba009543bf259d96677dc/azely-0.5.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dce9b2d8084af7d9f5f62d5ca82d69bb", "sha256": "a42673bb55ad1779bb31169b71d7d6b7901a8204907ab4106080f483ed048444"}, "downloads": -1, "filename": "azely-0.5.0.tar.gz", "has_sig": false, "md5_digest": "dce9b2d8084af7d9f5f62d5ca82d69bb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 10662, "upload_time": "2020-02-23T03:20:01", "upload_time_iso_8601": "2020-02-23T03:20:01.368698Z", "url": "https://files.pythonhosted.org/packages/ec/ea/9915c205a9fe2d3fe30130377f2dedc2e537e3170df7836f810b7d03544d/azely-0.5.0.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "1dc9d6eb255dba3008f792fa60778522", "sha256": "0b89dac515ddc9c30aeca0d55874e22fab6d990fde31f9f5b002980bd0916786"}, "downloads": -1, "filename": "azely-0.5.1-py3-none-any.whl", "has_sig": false, "md5_digest": "1dc9d6eb255dba3008f792fa60778522", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 17680, "upload_time": "2020-02-23T05:16:12", "upload_time_iso_8601": "2020-02-23T05:16:12.088481Z", "url": "https://files.pythonhosted.org/packages/fc/31/ba77d083f4340e24913a46c13083076e6af09909f3c9373824e674c9c634/azely-0.5.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c215e952639475d85dba41d0dc5717e5", "sha256": "375ddd8e0d1d19ebe75e88cb38ff46fa0862dbb273058089d84749821cfc92c7"}, "downloads": -1, "filename": "azely-0.5.1.tar.gz", "has_sig": false, "md5_digest": "c215e952639475d85dba41d0dc5717e5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 18003, "upload_time": "2020-02-23T05:16:13", "upload_time_iso_8601": "2020-02-23T05:16:13.587801Z", "url": "https://files.pythonhosted.org/packages/42/b9/d8b31b3742fa6c2f0cbd9b28a5e5cc095193bc0615220f8b3c23c1fc9d13/azely-0.5.1.tar.gz", "yanked": false}], "0.5.2": [{"comment_text": "", "digests": {"md5": "ebd98a05ed25fbf0e9698048d675cd85", "sha256": "1d5738be9ba1ab44bfc1849f2fb016a3ce7fac9808ba04f5e46e947b08449906"}, "downloads": -1, "filename": "azely-0.5.2-py3-none-any.whl", "has_sig": false, "md5_digest": "ebd98a05ed25fbf0e9698048d675cd85", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 17720, "upload_time": "2020-02-23T05:56:50", "upload_time_iso_8601": "2020-02-23T05:56:50.490665Z", "url": "https://files.pythonhosted.org/packages/ed/78/a17ce19a8cfd83fddd8b3f2748cea62953806833631cf47e771c04f508f2/azely-0.5.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d3cce710562d7573f9faa5317db1f269", "sha256": "6dcf8f74341fe2771bfe51052ad9b80005a929d4a7449aafb531469d5d3b3673"}, "downloads": -1, "filename": "azely-0.5.2.tar.gz", "has_sig": false, "md5_digest": "d3cce710562d7573f9faa5317db1f269", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 18034, "upload_time": "2020-02-23T05:56:52", "upload_time_iso_8601": "2020-02-23T05:56:52.205468Z", "url": "https://files.pythonhosted.org/packages/f6/41/0ae14a135ec92226124bbcc13ef3a093c55a3129f0d42f935adfdb91adaa/azely-0.5.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ebd98a05ed25fbf0e9698048d675cd85", "sha256": "1d5738be9ba1ab44bfc1849f2fb016a3ce7fac9808ba04f5e46e947b08449906"}, "downloads": -1, "filename": "azely-0.5.2-py3-none-any.whl", "has_sig": false, "md5_digest": "ebd98a05ed25fbf0e9698048d675cd85", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 17720, "upload_time": "2020-02-23T05:56:50", "upload_time_iso_8601": "2020-02-23T05:56:50.490665Z", "url": "https://files.pythonhosted.org/packages/ed/78/a17ce19a8cfd83fddd8b3f2748cea62953806833631cf47e771c04f508f2/azely-0.5.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d3cce710562d7573f9faa5317db1f269", "sha256": "6dcf8f74341fe2771bfe51052ad9b80005a929d4a7449aafb531469d5d3b3673"}, "downloads": -1, "filename": "azely-0.5.2.tar.gz", "has_sig": false, "md5_digest": "d3cce710562d7573f9faa5317db1f269", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 18034, "upload_time": "2020-02-23T05:56:52", "upload_time_iso_8601": "2020-02-23T05:56:52.205468Z", "url": "https://files.pythonhosted.org/packages/f6/41/0ae14a135ec92226124bbcc13ef3a093c55a3129f0d42f935adfdb91adaa/azely-0.5.2.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:15:28 2020"}