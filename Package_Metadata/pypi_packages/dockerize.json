{"info": {"author": "Lars Kellogg-Stedman", "author_email": "lars@oddbit.com", "bugtrack_url": null, "classifiers": [], "description": "# Dockerize\n\nDockerize will pack up your dynamically linked ELF binaries and all\ntheir dependencies and turn them into a Docker image.\n\nSome example images built with this tool are available from:\n\n- https://hub.docker.com/u/dockerizeme/\n\n## Synopsis\n\n    usage: dockerize [-h] [--tag TAG] [--cmd CMD] [--entrypoint ENTRYPOINT]\n                     [--no-build] [--output-dir OUTPUT_DIR] [--add-file SRC DST]\n                     [--user USER] [--group GROUP] [--filetools] [--verbose]\n                     [--debug]\n                     ...\n\n    positional arguments:\n      paths\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      --add-file SRC DST, -a SRC DST\n                            Add file <src> to image at <dst>\n      --user USER, -u USER  Add user to /etc/passwd in image\n      --group GROUP, -g GROUP\n                            Add group to /etc/group in image\n      --filetools           Add common file manipulation tools\n\n    Docker options:\n      --tag TAG, -t TAG     Tag to apply to Docker image\n      --cmd CMD, -c CMD\n      --entrypoint ENTRYPOINT, -e ENTRYPOINT\n\n    Output options:\n      --no-build, -n        Do not build Docker image\n      --output-dir OUTPUT_DIR, -o OUTPUT_DIR\n\n    Logging options:\n      --verbose\n      --debug\n\n## A simple example\n\nCreate a `sed` image:\n\n    dockerize -t sed /bin/sed\n\nUse it:\n\n    $ echo hello world | docker run -i sed s/world/jupiter\n    hello jupiter\n\n## A more complicated example\n\nCreate an image named `thttpd`:\n\n    dockerize -t thttpd \\\n      -a /var/www/thttpd /var/www \\\n      --entrypoint '/usr/sbin/thttpd -D' \\\n      --cmd '-d /var/www' \\\n      /usr/sbin/thttpd\n\nServe default content:\n\n    docker run thttpd\n\nServe your own content:\n\n    docker run -v /my/content:/var/www thttpd\n\n", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/larsks/dockerize", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "dockerize", "package_url": "https://pypi.org/project/dockerize/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/dockerize/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/larsks/dockerize"}, "release_url": "https://pypi.org/project/dockerize/0.2.2/", "requires_dist": null, "requires_python": null, "summary": "UNKNOWN", "version": "0.2.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            # Dockerize<br><br>Dockerize will pack up your dynamically linked ELF binaries and all<br>their dependencies and turn them into a Docker image.<br><br>Some example images built with this tool are available from:<br><br>- https://hub.docker.com/u/dockerizeme/<br><br>## Synopsis<br><br>    usage: dockerize [-h] [--tag TAG] [--cmd CMD] [--entrypoint ENTRYPOINT]<br>                     [--no-build] [--output-dir OUTPUT_DIR] [--add-file SRC DST]<br>                     [--user USER] [--group GROUP] [--filetools] [--verbose]<br>                     [--debug]<br>                     ...<br><br>    positional arguments:<br>      paths<br><br>    optional arguments:<br>      -h, --help            show this help message and exit<br>      --add-file SRC DST, -a SRC DST<br>                            Add file &lt;src&gt; to image at &lt;dst&gt;<br>      --user USER, -u USER  Add user to /etc/passwd in image<br>      --group GROUP, -g GROUP<br>                            Add group to /etc/group in image<br>      --filetools           Add common file manipulation tools<br><br>    Docker options:<br>      --tag TAG, -t TAG     Tag to apply to Docker image<br>      --cmd CMD, -c CMD<br>      --entrypoint ENTRYPOINT, -e ENTRYPOINT<br><br>    Output options:<br>      --no-build, -n        Do not build Docker image<br>      --output-dir OUTPUT_DIR, -o OUTPUT_DIR<br><br>    Logging options:<br>      --verbose<br>      --debug<br><br>## A simple example<br><br>Create a `sed` image:<br><br>    dockerize -t sed /bin/sed<br><br>Use it:<br><br>    $ echo hello world | docker run -i sed s/world/jupiter<br>    hello jupiter<br><br>## A more complicated example<br><br>Create an image named `thttpd`:<br><br>    dockerize -t thttpd \\<br>      -a /var/www/thttpd /var/www \\<br>      --entrypoint '/usr/sbin/thttpd -D' \\<br>      --cmd '-d /var/www' \\<br>      /usr/sbin/thttpd<br><br>Serve default content:<br><br>    docker run thttpd<br><br>Serve your own content:<br><br>    docker run -v /my/content:/var/www thttpd<br><br>\n          </div>"}, "last_serial": 1961472, "releases": {"0.2.2": [{"comment_text": "", "digests": {"md5": "1e9dd1db526b60c60a489ce7c9845c22", "sha256": "efd705bb6c2dd6e516c42c083530ba1d014fd10a9733fb0972fddc3adfb9567f"}, "downloads": -1, "filename": "dockerize-0.2.2.tar.gz", "has_sig": false, "md5_digest": "1e9dd1db526b60c60a489ce7c9845c22", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19015, "upload_time": "2016-02-17T15:25:59", "upload_time_iso_8601": "2016-02-17T15:25:59.418237Z", "url": "https://files.pythonhosted.org/packages/a2/6d/17b5566f2fad5f904c8bd8b1ddc6599c5fd156bc5a761a176ff880f02d78/dockerize-0.2.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1e9dd1db526b60c60a489ce7c9845c22", "sha256": "efd705bb6c2dd6e516c42c083530ba1d014fd10a9733fb0972fddc3adfb9567f"}, "downloads": -1, "filename": "dockerize-0.2.2.tar.gz", "has_sig": false, "md5_digest": "1e9dd1db526b60c60a489ce7c9845c22", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19015, "upload_time": "2016-02-17T15:25:59", "upload_time_iso_8601": "2016-02-17T15:25:59.418237Z", "url": "https://files.pythonhosted.org/packages/a2/6d/17b5566f2fad5f904c8bd8b1ddc6599c5fd156bc5a761a176ff880f02d78/dockerize-0.2.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:50 2020"}