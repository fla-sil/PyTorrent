{"info": {"author": "Taoufik Abbassid", "author_email": "abacidtaoufik@gmail.com", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "# Graphene prisma\n\nBrings prisma playground to graphene and more\n\n## Install\n\nTo install `graphene_prisma`, you need to specify one of the supported frameworks\n\n```python\npip install graphene_prisma[framework]\n```\n\nor\n\n```python\npip install graphene_prisma\npip install framework\n```\n\n**Supported frameworks :**\n\n- [responder](https://github.com/kennethreitz/responder)\n- [starlette](https://github.com/encode/starlette)\n\n**e.g. starlette**\n\n```python\npip install graphene_prisma[starlette]\n```\n\n## Usage\n\nTo use `graphene_prisma`\n\n```python\nfrom graphene_prisma.[framework] import [GraphQLHandler]\n```\n- **[framework]** : name of the framework (responder, starlette,...)\n- **[GraphQLHandler]**: name of the graphql view in your framework (`GraphQLView` for `responder` and `GraphQLApp` for `starlette` ) \n\nHere is a list of the graphql classes for each framework \n\n| framework   |  GraphQL view   |\n|-------------|-----------------|\n|[responder](https://github.com/kennethreitz/responder)| GraphQLView |\n|[starlette](https://github.com/encode/starlette)  | GraphQLApp |\n\n\n### Starlette\n\n```python\nfrom starlette.applications import Starlette\nfrom graphene_prisma.starlette import GraphQLApp\n\nclass Query(graphene.ObjectType):\n    hello = graphene.String(name=graphene.String(default_value=\"stranger\"))\n\n    def resolve_hello(self, info, name):\n        return f\"Hello {name}\"\n\napp = Starlette()\napp.add_route('/', GraphQLApp(schema=graphene.Schema(query=Query)))\n```\n\n### Responder\n\n```python\nimport responder\nfrom graphene_prisma.responder import GraphQLView\n\napi = responder.API()\n\nclass Query(graphene.ObjectType):\n    hello = graphene.String(name=graphene.String(default_value=\"stranger\"))\n\n    def resolve_hello(self, info, name):\n        return f\"Hello {name}\"\n\nschema = graphene.Schema(query=Query)\nview = GraphQLView(api=api, schema=schema)\n\napi.add_route(\"/graph\", view)\napi.run()\n```\n\n## TODO\n* Support other frameworks (django, flask,...)\n* Tests\n* Upload", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/taoufik07/graphene-prisma", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "graphene-prisma", "package_url": "https://pypi.org/project/graphene-prisma/", "platform": "", "project_url": "https://pypi.org/project/graphene-prisma/", "project_urls": {"Homepage": "https://github.com/taoufik07/graphene-prisma"}, "release_url": "https://pypi.org/project/graphene-prisma/0.1.0/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Brings prisma playground to Graphene and more", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Graphene prisma</h1>\n<p>Brings prisma playground to graphene and more</p>\n<h2>Install</h2>\n<p>To install <code>graphene_prisma</code>, you need to specify one of the supported frameworks</p>\n<pre><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">graphene_prisma</span><span class=\"p\">[</span><span class=\"n\">framework</span><span class=\"p\">]</span>\n</pre>\n<p>or</p>\n<pre><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">graphene_prisma</span>\n<span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">framework</span>\n</pre>\n<p><strong>Supported frameworks :</strong></p>\n<ul>\n<li><a href=\"https://github.com/kennethreitz/responder\" rel=\"nofollow\">responder</a></li>\n<li><a href=\"https://github.com/encode/starlette\" rel=\"nofollow\">starlette</a></li>\n</ul>\n<p><strong>e.g. starlette</strong></p>\n<pre><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">graphene_prisma</span><span class=\"p\">[</span><span class=\"n\">starlette</span><span class=\"p\">]</span>\n</pre>\n<h2>Usage</h2>\n<p>To use <code>graphene_prisma</code></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">graphene_prisma.</span><span class=\"p\">[</span><span class=\"n\">framework</span><span class=\"p\">]</span> <span class=\"kn\">import</span> <span class=\"p\">[</span><span class=\"n\">GraphQLHandler</span><span class=\"p\">]</span>\n</pre>\n<ul>\n<li><strong>[framework]</strong> : name of the framework (responder, starlette,...)</li>\n<li><strong>[GraphQLHandler]</strong>: name of the graphql view in your framework (<code>GraphQLView</code> for <code>responder</code> and <code>GraphQLApp</code> for <code>starlette</code> )</li>\n</ul>\n<p>Here is a list of the graphql classes for each framework</p>\n<table>\n<thead>\n<tr>\n<th>framework</th>\n<th>GraphQL view</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/kennethreitz/responder\" rel=\"nofollow\">responder</a></td>\n<td>GraphQLView</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/encode/starlette\" rel=\"nofollow\">starlette</a></td>\n<td>GraphQLApp</td>\n</tr></tbody></table>\n<h3>Starlette</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">starlette.applications</span> <span class=\"kn\">import</span> <span class=\"n\">Starlette</span>\n<span class=\"kn\">from</span> <span class=\"nn\">graphene_prisma.starlette</span> <span class=\"kn\">import</span> <span class=\"n\">GraphQLApp</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Query</span><span class=\"p\">(</span><span class=\"n\">graphene</span><span class=\"o\">.</span><span class=\"n\">ObjectType</span><span class=\"p\">):</span>\n    <span class=\"n\">hello</span> <span class=\"o\">=</span> <span class=\"n\">graphene</span><span class=\"o\">.</span><span class=\"n\">String</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">graphene</span><span class=\"o\">.</span><span class=\"n\">String</span><span class=\"p\">(</span><span class=\"n\">default_value</span><span class=\"o\">=</span><span class=\"s2\">\"stranger\"</span><span class=\"p\">))</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">resolve_hello</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">info</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s2\">\"Hello </span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">\"</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Starlette</span><span class=\"p\">()</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">add_route</span><span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">,</span> <span class=\"n\">GraphQLApp</span><span class=\"p\">(</span><span class=\"n\">schema</span><span class=\"o\">=</span><span class=\"n\">graphene</span><span class=\"o\">.</span><span class=\"n\">Schema</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"o\">=</span><span class=\"n\">Query</span><span class=\"p\">)))</span>\n</pre>\n<h3>Responder</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">responder</span>\n<span class=\"kn\">from</span> <span class=\"nn\">graphene_prisma.responder</span> <span class=\"kn\">import</span> <span class=\"n\">GraphQLView</span>\n\n<span class=\"n\">api</span> <span class=\"o\">=</span> <span class=\"n\">responder</span><span class=\"o\">.</span><span class=\"n\">API</span><span class=\"p\">()</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Query</span><span class=\"p\">(</span><span class=\"n\">graphene</span><span class=\"o\">.</span><span class=\"n\">ObjectType</span><span class=\"p\">):</span>\n    <span class=\"n\">hello</span> <span class=\"o\">=</span> <span class=\"n\">graphene</span><span class=\"o\">.</span><span class=\"n\">String</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">graphene</span><span class=\"o\">.</span><span class=\"n\">String</span><span class=\"p\">(</span><span class=\"n\">default_value</span><span class=\"o\">=</span><span class=\"s2\">\"stranger\"</span><span class=\"p\">))</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">resolve_hello</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">info</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s2\">\"Hello </span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">\"</span>\n\n<span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"n\">graphene</span><span class=\"o\">.</span><span class=\"n\">Schema</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"o\">=</span><span class=\"n\">Query</span><span class=\"p\">)</span>\n<span class=\"n\">view</span> <span class=\"o\">=</span> <span class=\"n\">GraphQLView</span><span class=\"p\">(</span><span class=\"n\">api</span><span class=\"o\">=</span><span class=\"n\">api</span><span class=\"p\">,</span> <span class=\"n\">schema</span><span class=\"o\">=</span><span class=\"n\">schema</span><span class=\"p\">)</span>\n\n<span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">add_route</span><span class=\"p\">(</span><span class=\"s2\">\"/graph\"</span><span class=\"p\">,</span> <span class=\"n\">view</span><span class=\"p\">)</span>\n<span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n<h2>TODO</h2>\n<ul>\n<li>Support other frameworks (django, flask,...)</li>\n<li>Tests</li>\n<li>Upload</li>\n</ul>\n\n          </div>"}, "last_serial": 4742647, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "ce750e1fcd563a75806ab1408715a125", "sha256": "5a2227a6c7a16b68318439f03596c0f0f3b4b28ddee597d645e79b69971f2b46"}, "downloads": -1, "filename": "graphene-prisma-0.1.0.tar.gz", "has_sig": false, "md5_digest": "ce750e1fcd563a75806ab1408715a125", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3530, "upload_time": "2019-01-26T03:09:53", "upload_time_iso_8601": "2019-01-26T03:09:53.326778Z", "url": "https://files.pythonhosted.org/packages/d6/cb/d1fbc2ff789aa66e2afa1059d59b53921bb6b5fda488931e6f21e4e99164/graphene-prisma-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ce750e1fcd563a75806ab1408715a125", "sha256": "5a2227a6c7a16b68318439f03596c0f0f3b4b28ddee597d645e79b69971f2b46"}, "downloads": -1, "filename": "graphene-prisma-0.1.0.tar.gz", "has_sig": false, "md5_digest": "ce750e1fcd563a75806ab1408715a125", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3530, "upload_time": "2019-01-26T03:09:53", "upload_time_iso_8601": "2019-01-26T03:09:53.326778Z", "url": "https://files.pythonhosted.org/packages/d6/cb/d1fbc2ff789aa66e2afa1059d59b53921bb6b5fda488931e6f21e4e99164/graphene-prisma-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:42 2020"}