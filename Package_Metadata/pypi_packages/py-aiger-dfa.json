{"info": {"author": "Marcell Vazquez-Chanlatte", "author_email": "mvc@linux.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# py-aiger-dfa\nPython library for converting between AIG circuits and DFAs.\n\n[![Build Status](https://cloud.drone.io/api/badges/mvcisback/py-aiger-dfa/status.svg)](https://cloud.drone.io/mvcisback/py-aiger-dfa)\n[![Docs](https://img.shields.io/badge/API-link-color)](https://mvcisback.github.io/py-aiger-dfa)\n[![codecov](https://codecov.io/gh/mvcisback/py-aiger-dfa/branch/master/graph/badge.svg)](https://codecov.io/gh/mvcisback/py-aiger-dfa)\n[![PyPI version](https://badge.fury.io/py/py-aiger-dfa.svg)](https://badge.fury.io/py/py-aiger-dfa)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\n<!-- markdown-toc start - Don't edit this section. Run M-x markdown-toc-generate-toc again -->\n**Table of Contents**\n\n- [Installation](#installation)\n- [Usage](#usage)\n    - [DFA to AIG](#dfa-to-aig)\n    - [AIG to DFA](#aig-to-dfa)\n\n<!-- markdown-toc end -->\n\n\n# Installation\n\nIf you just need to use `aiger_dfa`, you can just run:\n\n`$ pip install py-aiger-dfa`\n\nFor developers, note that this project uses the\n[poetry](https://poetry.eustace.io/) python package/dependency\nmanagement tool. Please familarize yourself with it and then\nrun:\n\n`$ poetry install`\n\n# Usage\n\nThe main entry points for using this library are the `dfa2aig` and\n`aig2dfa` functions. DFAs are represented using the\n[dfa](https://github.com/mvcisback/dfa) package. Familiarity with the\n`dfa`, `py-aiger`, and `py-aiger-bv` packages is assumed.\n\n\n## DFA to AIG\n\nAn example of going from a `DFA` to an `AIG` object\nis shown below.\n\n```python\nfrom dfa import DFA\nfrom aiger_dfa import dfa2aig\n\nmy_dfa = DFA(\n    start=0,\n    inputs={0, 1},\n    label=lambda s: (s % 4) == 3,\n    transition=lambda s, c: (s + c) % 4,\n)\nmy_aig, relabels, valid = dfa2aig(my_dfa)\n```\n\nNow `circ` is an `AIG` and `relabels` is a mapping from the inputs,\nstates, and outputs of `my_dfa` to their **1-hot** encoded\ncounterparts in `my_aig`.\n\n`relabels` has the following schema:\n\n```python\nrelabels = {\n    'inputs': .. , # Bidict from 1-hot encoded tuple to dfa input.\n    'outputs': .. , # Bidict from 1-hot encoded tuple to dfa output.\n    'states': .. , # Bidict from 1-hot encoded tuple to dfa state.\n}\n```\n\nwhere `bidict` refers to https://bidict.readthedocs.io/en/master/.\nFinally, `valid` is another aiger circuit which tests if all inputs\nare 1-hot encoded.\n\n## AIG to DFA\n\nThe inverse of `dfa2aig` is `aig2dfa`. Using the same example.\n\n```python\nfrom aiger_dfa import aig2dfa\n\nmy_dfa2 = aig2dfa(my_aig, relabels=relabels)\n\nassert my_dfa2.label((1,0,0,1,1,0)) == my_dfa.label((1,0,0,1,1,0))\n```\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mvcisback/py-aiger-dfa", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "py-aiger-dfa", "package_url": "https://pypi.org/project/py-aiger-dfa/", "platform": "", "project_url": "https://pypi.org/project/py-aiger-dfa/", "project_urls": {"Homepage": "https://github.com/mvcisback/py-aiger-dfa", "Repository": "https://github.com/mvcisback/py-aiger-dfa"}, "release_url": "https://pypi.org/project/py-aiger-dfa/0.1.3/", "requires_dist": ["attrs (>=19.1,<20.0)", "bidict (>=0.18.0,<0.19.0)", "funcy (>=1.12,<2.0)", "dfa (>=0.3.2,<0.4.0)", "py-aiger (>=3.9.2,<4.0.0)", "py-aiger-bv (>=1.4.0,<2.0.0)", "py-aiger-ptltl (>=1.1,<2.0)"], "requires_python": ">=3.7,<4.0", "summary": "Library for moving between sequential circuits AIGs and DFAs.", "version": "0.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>py-aiger-dfa</h1>\n<p>Python library for converting between AIG circuits and DFAs.</p>\n<p><a href=\"https://cloud.drone.io/mvcisback/py-aiger-dfa\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b5961fd67b6e2a8c7f6fa01fa0c4a82bf6bef260/68747470733a2f2f636c6f75642e64726f6e652e696f2f6170692f6261646765732f6d766369736261636b2f70792d61696765722d6466612f7374617475732e737667\"></a>\n<a href=\"https://mvcisback.github.io/py-aiger-dfa\" rel=\"nofollow\"><img alt=\"Docs\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/63f99f0443ee8d7c48a4f4339d8c1a366ba95d71/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4150492d6c696e6b2d636f6c6f72\"></a>\n<a href=\"https://codecov.io/gh/mvcisback/py-aiger-dfa\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/aae06b9c111e3203238508b085d66189c8878858/68747470733a2f2f636f6465636f762e696f2f67682f6d766369736261636b2f70792d61696765722d6466612f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://badge.fury.io/py/py-aiger-dfa\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bce2e60cdcef3cfa1c18a3f50a2af229ecafcaf6/68747470733a2f2f62616467652e667572792e696f2f70792f70792d61696765722d6466612e737667\"></a>\n<a href=\"https://opensource.org/licenses/MIT\" rel=\"nofollow\"><img alt=\"License: MIT\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8645b002dd7ec1b54275a80574942e7a318e03c6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d79656c6c6f772e737667\"></a></p>\n\n<p><strong>Table of Contents</strong></p>\n<ul>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#usage\" rel=\"nofollow\">Usage</a>\n<ul>\n<li><a href=\"#dfa-to-aig\" rel=\"nofollow\">DFA to AIG</a></li>\n<li><a href=\"#aig-to-dfa\" rel=\"nofollow\">AIG to DFA</a></li>\n</ul>\n</li>\n</ul>\n\n<h1>Installation</h1>\n<p>If you just need to use <code>aiger_dfa</code>, you can just run:</p>\n<p><code>$ pip install py-aiger-dfa</code></p>\n<p>For developers, note that this project uses the\n<a href=\"https://poetry.eustace.io/\" rel=\"nofollow\">poetry</a> python package/dependency\nmanagement tool. Please familarize yourself with it and then\nrun:</p>\n<p><code>$ poetry install</code></p>\n<h1>Usage</h1>\n<p>The main entry points for using this library are the <code>dfa2aig</code> and\n<code>aig2dfa</code> functions. DFAs are represented using the\n<a href=\"https://github.com/mvcisback/dfa\" rel=\"nofollow\">dfa</a> package. Familiarity with the\n<code>dfa</code>, <code>py-aiger</code>, and <code>py-aiger-bv</code> packages is assumed.</p>\n<h2>DFA to AIG</h2>\n<p>An example of going from a <code>DFA</code> to an <code>AIG</code> object\nis shown below.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">dfa</span> <span class=\"kn\">import</span> <span class=\"n\">DFA</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aiger_dfa</span> <span class=\"kn\">import</span> <span class=\"n\">dfa2aig</span>\n\n<span class=\"n\">my_dfa</span> <span class=\"o\">=</span> <span class=\"n\">DFA</span><span class=\"p\">(</span>\n    <span class=\"n\">start</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n    <span class=\"n\">inputs</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">},</span>\n    <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">s</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">s</span> <span class=\"o\">%</span> <span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">3</span><span class=\"p\">,</span>\n    <span class=\"n\">transition</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">s</span> <span class=\"o\">+</span> <span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"mi\">4</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"n\">my_aig</span><span class=\"p\">,</span> <span class=\"n\">relabels</span><span class=\"p\">,</span> <span class=\"n\">valid</span> <span class=\"o\">=</span> <span class=\"n\">dfa2aig</span><span class=\"p\">(</span><span class=\"n\">my_dfa</span><span class=\"p\">)</span>\n</pre>\n<p>Now <code>circ</code> is an <code>AIG</code> and <code>relabels</code> is a mapping from the inputs,\nstates, and outputs of <code>my_dfa</code> to their <strong>1-hot</strong> encoded\ncounterparts in <code>my_aig</code>.</p>\n<p><code>relabels</code> has the following schema:</p>\n<pre><span class=\"n\">relabels</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'inputs'</span><span class=\"p\">:</span> <span class=\"o\">..</span> <span class=\"p\">,</span> <span class=\"c1\"># Bidict from 1-hot encoded tuple to dfa input.</span>\n    <span class=\"s1\">'outputs'</span><span class=\"p\">:</span> <span class=\"o\">..</span> <span class=\"p\">,</span> <span class=\"c1\"># Bidict from 1-hot encoded tuple to dfa output.</span>\n    <span class=\"s1\">'states'</span><span class=\"p\">:</span> <span class=\"o\">..</span> <span class=\"p\">,</span> <span class=\"c1\"># Bidict from 1-hot encoded tuple to dfa state.</span>\n<span class=\"p\">}</span>\n</pre>\n<p>where <code>bidict</code> refers to <a href=\"https://bidict.readthedocs.io/en/master/\" rel=\"nofollow\">https://bidict.readthedocs.io/en/master/</a>.\nFinally, <code>valid</code> is another aiger circuit which tests if all inputs\nare 1-hot encoded.</p>\n<h2>AIG to DFA</h2>\n<p>The inverse of <code>dfa2aig</code> is <code>aig2dfa</code>. Using the same example.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">aiger_dfa</span> <span class=\"kn\">import</span> <span class=\"n\">aig2dfa</span>\n\n<span class=\"n\">my_dfa2</span> <span class=\"o\">=</span> <span class=\"n\">aig2dfa</span><span class=\"p\">(</span><span class=\"n\">my_aig</span><span class=\"p\">,</span> <span class=\"n\">relabels</span><span class=\"o\">=</span><span class=\"n\">relabels</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">my_dfa2</span><span class=\"o\">.</span><span class=\"n\">label</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"n\">my_dfa</span><span class=\"o\">.</span><span class=\"n\">label</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">))</span>\n</pre>\n\n          </div>"}, "last_serial": 6796777, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "310437dba37a868d29cba69981e93da4", "sha256": "5dcc880c6facf35d0be8eb8774fba8d9dac96e4eae6fcda7b61ba4cd9678b7b3"}, "downloads": -1, "filename": "py_aiger_dfa-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "310437dba37a868d29cba69981e93da4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 4148, "upload_time": "2019-07-15T18:49:21", "upload_time_iso_8601": "2019-07-15T18:49:21.311409Z", "url": "https://files.pythonhosted.org/packages/d4/98/96992130168bc7bc0d632fb904f3761c4dd0226e077c545e5b233e061748/py_aiger_dfa-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7a28a39b2eaae9320aaabf3bf06f31e0", "sha256": "df2d494bb4e733d601c53298af6bf3e21a8bf67b42c78d96767b248afc4b4e15"}, "downloads": -1, "filename": "py-aiger-dfa-0.1.0.tar.gz", "has_sig": false, "md5_digest": "7a28a39b2eaae9320aaabf3bf06f31e0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 3845, "upload_time": "2019-07-15T18:49:18", "upload_time_iso_8601": "2019-07-15T18:49:18.768523Z", "url": "https://files.pythonhosted.org/packages/c7/47/a11ec71dde2093f13e37e43af067ddcb11dbc0bb43a29695b1e485e2747c/py-aiger-dfa-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "513eefbdfe58d5942635c4aa92c9be91", "sha256": "1922f079b2c83253116319e646f605a7f7227dda2bbf4a4ae42dd930373d2d5f"}, "downloads": -1, "filename": "py_aiger_dfa-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "513eefbdfe58d5942635c4aa92c9be91", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 5350, "upload_time": "2019-07-15T22:26:37", "upload_time_iso_8601": "2019-07-15T22:26:37.652296Z", "url": "https://files.pythonhosted.org/packages/e1/b7/8d5be8410fb789fbc3063cbd122c543e843e3b281fbf067944527324c7fe/py_aiger_dfa-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5ffb864dc53bec5f5346a5544c4aced4", "sha256": "30e52dd623cb935865ad51c649fc5450467ec99d0c3b1af7deaa6175a1ca46e9"}, "downloads": -1, "filename": "py-aiger-dfa-0.1.1.tar.gz", "has_sig": false, "md5_digest": "5ffb864dc53bec5f5346a5544c4aced4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 4519, "upload_time": "2019-07-15T22:26:36", "upload_time_iso_8601": "2019-07-15T22:26:36.000279Z", "url": "https://files.pythonhosted.org/packages/0d/b8/27463c894bc9b6cb59ab3ce5cdc4cf0c8a63c9976715040444d675839334/py-aiger-dfa-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "a04ef3c8a8da2ae6fbb40605db34bf93", "sha256": "99505827603434d99670f45d93776c1cb8dfefa2d87d71d003d7d6d603389e3a"}, "downloads": -1, "filename": "py_aiger_dfa-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "a04ef3c8a8da2ae6fbb40605db34bf93", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 5800, "upload_time": "2019-07-24T17:57:50", "upload_time_iso_8601": "2019-07-24T17:57:50.846783Z", "url": "https://files.pythonhosted.org/packages/8b/77/ac717940cf024e7601975a8244de8f12ee13dbb281a43fa7144a93f3bd03/py_aiger_dfa-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "811f62e22cf30c2e65659dc6ce97767d", "sha256": "f4307b3c1ee630228ef2678801fc05f71a897774e9ef93b5893b8f63b714f288"}, "downloads": -1, "filename": "py-aiger-dfa-0.1.2.tar.gz", "has_sig": false, "md5_digest": "811f62e22cf30c2e65659dc6ce97767d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 4980, "upload_time": "2019-07-24T17:57:49", "upload_time_iso_8601": "2019-07-24T17:57:49.252960Z", "url": "https://files.pythonhosted.org/packages/a1/cc/7eeed0f88484d92e0dc1bb20a46bda27cd2b1995a1ef259dcacca8a858a7/py-aiger-dfa-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "9b62429af7239728145ca3481dccd89e", "sha256": "639b117db3eaa865018cdb6665b2768a9427dad19b67f64e5d1d8ebd2bd29271"}, "downloads": -1, "filename": "py_aiger_dfa-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "9b62429af7239728145ca3481dccd89e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 6810, "upload_time": "2020-03-12T02:37:35", "upload_time_iso_8601": "2020-03-12T02:37:35.451210Z", "url": "https://files.pythonhosted.org/packages/43/25/4448699eab91272b8a569d7f9a7cd045bd6d6f835ce2d0de6ef8d663ba84/py_aiger_dfa-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5c38517b9ef5bb7567cf231ab17d0db0", "sha256": "1167549a7af30ad8df236b1a66a9441a2ff5f72697763f0cc7b6bcf9224b4486"}, "downloads": -1, "filename": "py-aiger-dfa-0.1.3.tar.gz", "has_sig": false, "md5_digest": "5c38517b9ef5bb7567cf231ab17d0db0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 5824, "upload_time": "2020-03-12T02:37:33", "upload_time_iso_8601": "2020-03-12T02:37:33.846759Z", "url": "https://files.pythonhosted.org/packages/5f/ff/e3e8c0e072a9c8fb7a5fbea22b5fcaa1f60900d427b756b86663ba36f200/py-aiger-dfa-0.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9b62429af7239728145ca3481dccd89e", "sha256": "639b117db3eaa865018cdb6665b2768a9427dad19b67f64e5d1d8ebd2bd29271"}, "downloads": -1, "filename": "py_aiger_dfa-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "9b62429af7239728145ca3481dccd89e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 6810, "upload_time": "2020-03-12T02:37:35", "upload_time_iso_8601": "2020-03-12T02:37:35.451210Z", "url": "https://files.pythonhosted.org/packages/43/25/4448699eab91272b8a569d7f9a7cd045bd6d6f835ce2d0de6ef8d663ba84/py_aiger_dfa-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5c38517b9ef5bb7567cf231ab17d0db0", "sha256": "1167549a7af30ad8df236b1a66a9441a2ff5f72697763f0cc7b6bcf9224b4486"}, "downloads": -1, "filename": "py-aiger-dfa-0.1.3.tar.gz", "has_sig": false, "md5_digest": "5c38517b9ef5bb7567cf231ab17d0db0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 5824, "upload_time": "2020-03-12T02:37:33", "upload_time_iso_8601": "2020-03-12T02:37:33.846759Z", "url": "https://files.pythonhosted.org/packages/5f/ff/e3e8c0e072a9c8fb7a5fbea22b5fcaa1f60900d427b756b86663ba36f200/py-aiger-dfa-0.1.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:10:55 2020"}