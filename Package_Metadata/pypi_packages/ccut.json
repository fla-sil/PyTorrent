{"info": {"author": "Basel Shbita", "author_email": "basel921@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "## Canonicalization Compound Unit Representation & Transformation (CCUT)\n- Identifying individual units, their exponents and multipliers\n- Representing units in a canonical format\n- Mapping units to Ontology\n- Finding the dimensions of each atomic unit\n- Converting from one unit to another\n\nThis is the implementation accompanying the MWS 2019 paper, [_Parsing, Representing and Transforming Units of Measure_](https://www.momacs.pitt.edu/wp-content/uploads/2019/05/Parsing-Representing-and-Transforming-Units-of-Measure.pdf).\n\n\n### How to run:\nHere's how you can use this library. Import the module and then create an instance:\n```\nfrom ccut import ccut\ncc = ccut()\n```\n\n#### CCU Representation:\n##### `get_top_ccu`:\nThis method is used to get the top (single) CCU representation (dictionary) for a given string.<br />\nRun with a single argument (string of atomic/compound unit).<br />\nFor example, running:\n```\ncc.get_top_ccu(\"kg/s^2\")\n```\nWill return:\n```\n{\n  'qudtp:abbreviation': 'kg s-2',\n  'ccut:hasPart': [\n    {\n      'qudtp:symbol': 'kg',\n      'qudtp:quantityKind': 'http://www.qudt.org/qudt/owl/1.0.0/unit/Instances.html#Gram',\n      'ccut:prefix': 'http://www.qudt.org/qudt/owl/1.0.0/unit/Instances.html#Kilo',\n      'ccut:prefixConversionMultiplier': 1000.0,\n      'ccut:prefixConversionOffset': 0.0,\n      'ccut:hasDimension': 'M',\n      'qudtp:conversionMultiplier': 0.001,\n      'qudtp:conversionOffset': 0.0\n    },\n    {\n      'qudtp:symbol': 's',\n      'qudtp:quantityKind': 'http://www.qudt.org/qudt/owl/1.0.0/unit/Instances.html#SecondTime',\n      'ccut:hasDimension': 'T',\n      'qudtp:conversionMultiplier': 1.0,\n      'qudtp:conversionOffset': 0.0,\n      'ccut:exponent': '-2'\n    }\n  ],\n  'ccut:hasDimension': 'M T-2'\n}\n```\n\n##### `get_all_ccu`:\nThis method is used to get all the (multiple) CCU representations (ordered list of dictionaries) for a given string.<br />\nRun with a single argument (string of atomic/compound unit).<br />\nFor example, running:\n```\ncc.get_all_ccu(\"oz\")\n```\nWill return:\n```\n[\n  {\n    'ccut:hasPart': [\n      {\n        'qudtp:symbol': 'oz',\n        'qudtp:quantityKind': 'http://www.qudt.org/qudt/owl/1.0.0/unit/Instances.html#LiquidOunceUS',\n        'ccut:hasDimension': 'L3',\n        'qudtp:conversionMultiplier': 2.95735296e-05,\n        'qudtp:conversionOffset': 0.0\n      }\n    ],\n    'qudtp:abbreviation': 'oz',\n    'ccut:hasDimension': 'L3'\n  },\n  {\n    'ccut:hasPart': [\n      {\n        'qudtp:symbol': 'oz',\n        'qudtp:quantityKind': 'http://www.qudt.org/qudt/owl/1.0.0/unit/Instances.html#OunceImperial',\n        'ccut:hasDimension': 'L3',\n        'qudtp:conversionMultiplier': 2.84130625e-05,\n        'qudtp:conversionOffset': 0.0\n      }\n    ],\n    'qudtp:abbreviation': 'oz',\n    'ccut:hasDimension': 'L3'\n  },\n  {\n    'ccut:hasPart': [\n      {\n        'qudtp:symbol': 'oz',\n        'qudtp:quantityKind': 'http://www.qudt.org/qudt/owl/1.0.0/unit/Instances.html#OunceTroy',\n        'ccut:hasDimension': 'M',\n        'qudtp:conversionMultiplier': 0.0311034768,\n        'qudtp:conversionOffset': 0.0\n      }\n    ],\n    'qudtp:abbreviation': 'oz',\n    'ccut:hasDimension': 'M'\n  }\n]\n```\n\n#### CCU Transformation (Conversion):\n##### `convert_ccu2ccu`:\nThis method is used to perfrom compound unit conversion given the CCU representations.<br />\nRun with three arguments (ccu representation of the source unit, ccu representation of the destination unit, value to transform).<br />\nThis method will return 3 values:\n- the value after conversion\n- the return status (see below)\n- the return status in readable format (string)\nWhere:\n```\n# Status key: 0: \"OK\"\n#             1: \"TRANSFORMATION_IS_NOT_SYMMETRIC\"\n#             2: \"DIMENSION_MISMATCH\"\n#             3: \"TRANSFORMATION_UNKNOWN\"\n#             4: \"UNSUPPORTED_FLOW\"\n```\nFor example, running:\n```\nsrc_ccu = cc.get_top_ccu(\"m/s\")\ndst_ccu = cc.get_top_ccu(\"mi/hr\")\ncc.convert_ccu2ccu(src_ccu, dst_ccu, 2.7)\n```\nWill return:\n```\n(6.039727988546887, 0, 'OK')\n```\n\n##### `convert_str2str`:\nThis method is used to perfrom compound unit conversion given the strings of the source and destination units.<br />\nRun with three arguments (string of source unit, string of destination unit, value to transform).<br />\nThis method will return 5 values:\n- the value after conversion\n- the return status\n- the return status in readable format (string)\n- CCU representaiton of the source string\n- CCU representaiton of the destination string\nFor example, running:\n```\ncc.convert_str2str(\"m/s\", \"mi/hr\", 2.7)\n```\nWill return:\n```\n(6.039727988546887,\n 0,\n 'OK',\n {\n   'qudtp:abbreviation': 'm s-1',\n   'ccut:hasPart': [\n     {\n       'qudtp:symbol': 'm',\n       'qudtp:quantityKind': 'http://www.qudt.org/qudt/owl/1.0.0/unit/Instances.html#Meter',\n       'ccut:hasDimension': 'L',\n       'qudtp:conversionMultiplier': 1.0,\n       'qudtp:conversionOffset': 0.0\n     },\n     {\n       'qudtp:symbol': 's',\n       'qudtp:quantityKind': 'http://www.qudt.org/qudt/owl/1.0.0/unit/Instances.html#SecondTime',\n       'ccut:hasDimension': 'T',\n       'qudtp:conversionMultiplier': 1.0,\n       'qudtp:conversionOffset': 0.0,\n       'ccut:exponent': '-1'\n     }\n   ],\n   'ccut:hasDimension': 'L T-1'\n },\n {\n   'qudtp:abbreviation': 'mi hr-1',\n   'ccut:hasPart': [\n     {\n       'qudtp:symbol': 'mi',\n       'qudtp:quantityKind': 'http://www.qudt.org/qudt/owl/1.0.0/unit/Instances.html#MileInternational',\n       'ccut:hasDimension': 'L',\n       'qudtp:conversionMultiplier': 1609.344,\n       'qudtp:conversionOffset': 0.0\n     },\n     {\n       'qudtp:symbol': 'hr',\n       'qudtp:quantityKind': 'http://www.qudt.org/qudt/owl/1.0.0/unit/Instances.html#Hour',\n       'ccut:hasDimension': 'T',\n       'qudtp:conversionMultiplier': 3600.0,\n       'qudtp:conversionOffset': 0.0,\n       'ccut:exponent': '-1'\n     }\n   ],\n   'ccut:hasDimension': 'L T-1'\n }\n)\n```\n\n\n### Citing CCUT\nIf you would like to cite the this tool in a paper or presentation, the following is recommended (BibTeX entry):\n```\n@article{shbita2019parsing,\n  title={Parsing, Representing and Transforming Units of Measure},\n  author={Shbita, Basel and Rajendran, Arunkumar and Pujara, Jay and Knoblock, Craig A}\n  journal={Modeling the World\u2019s Systems},\n  year={2019},\n}\n```\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/basels/ccut/", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "ccut", "package_url": "https://pypi.org/project/ccut/", "platform": "", "project_url": "https://pypi.org/project/ccut/", "project_urls": {"Homepage": "https://github.com/basels/ccut/"}, "release_url": "https://pypi.org/project/ccut/1.0.0/", "requires_dist": ["arpeggio (>=1.9.2)", "rdflib (>=4.2.2)"], "requires_python": ">=3.6", "summary": "A package for identifying, parsing and transforming units of measure", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>Canonicalization Compound Unit Representation &amp; Transformation (CCUT)</h2>\n<ul>\n<li>Identifying individual units, their exponents and multipliers</li>\n<li>Representing units in a canonical format</li>\n<li>Mapping units to Ontology</li>\n<li>Finding the dimensions of each atomic unit</li>\n<li>Converting from one unit to another</li>\n</ul>\n<p>This is the implementation accompanying the MWS 2019 paper, <a href=\"https://www.momacs.pitt.edu/wp-content/uploads/2019/05/Parsing-Representing-and-Transforming-Units-of-Measure.pdf\" rel=\"nofollow\"><em>Parsing, Representing and Transforming Units of Measure</em></a>.</p>\n<h3>How to run:</h3>\n<p>Here's how you can use this library. Import the module and then create an instance:</p>\n<pre><code>from ccut import ccut\ncc = ccut()\n</code></pre>\n<h4>CCU Representation:</h4>\n<h5><code>get_top_ccu</code>:</h5>\n<p>This method is used to get the top (single) CCU representation (dictionary) for a given string.<br>\nRun with a single argument (string of atomic/compound unit).<br>\nFor example, running:</p>\n<pre><code>cc.get_top_ccu(\"kg/s^2\")\n</code></pre>\n<p>Will return:</p>\n<pre><code>{\n  'qudtp:abbreviation': 'kg s-2',\n  'ccut:hasPart': [\n    {\n      'qudtp:symbol': 'kg',\n      'qudtp:quantityKind': 'http://www.qudt.org/qudt/owl/1.0.0/unit/Instances.html#Gram',\n      'ccut:prefix': 'http://www.qudt.org/qudt/owl/1.0.0/unit/Instances.html#Kilo',\n      'ccut:prefixConversionMultiplier': 1000.0,\n      'ccut:prefixConversionOffset': 0.0,\n      'ccut:hasDimension': 'M',\n      'qudtp:conversionMultiplier': 0.001,\n      'qudtp:conversionOffset': 0.0\n    },\n    {\n      'qudtp:symbol': 's',\n      'qudtp:quantityKind': 'http://www.qudt.org/qudt/owl/1.0.0/unit/Instances.html#SecondTime',\n      'ccut:hasDimension': 'T',\n      'qudtp:conversionMultiplier': 1.0,\n      'qudtp:conversionOffset': 0.0,\n      'ccut:exponent': '-2'\n    }\n  ],\n  'ccut:hasDimension': 'M T-2'\n}\n</code></pre>\n<h5><code>get_all_ccu</code>:</h5>\n<p>This method is used to get all the (multiple) CCU representations (ordered list of dictionaries) for a given string.<br>\nRun with a single argument (string of atomic/compound unit).<br>\nFor example, running:</p>\n<pre><code>cc.get_all_ccu(\"oz\")\n</code></pre>\n<p>Will return:</p>\n<pre><code>[\n  {\n    'ccut:hasPart': [\n      {\n        'qudtp:symbol': 'oz',\n        'qudtp:quantityKind': 'http://www.qudt.org/qudt/owl/1.0.0/unit/Instances.html#LiquidOunceUS',\n        'ccut:hasDimension': 'L3',\n        'qudtp:conversionMultiplier': 2.95735296e-05,\n        'qudtp:conversionOffset': 0.0\n      }\n    ],\n    'qudtp:abbreviation': 'oz',\n    'ccut:hasDimension': 'L3'\n  },\n  {\n    'ccut:hasPart': [\n      {\n        'qudtp:symbol': 'oz',\n        'qudtp:quantityKind': 'http://www.qudt.org/qudt/owl/1.0.0/unit/Instances.html#OunceImperial',\n        'ccut:hasDimension': 'L3',\n        'qudtp:conversionMultiplier': 2.84130625e-05,\n        'qudtp:conversionOffset': 0.0\n      }\n    ],\n    'qudtp:abbreviation': 'oz',\n    'ccut:hasDimension': 'L3'\n  },\n  {\n    'ccut:hasPart': [\n      {\n        'qudtp:symbol': 'oz',\n        'qudtp:quantityKind': 'http://www.qudt.org/qudt/owl/1.0.0/unit/Instances.html#OunceTroy',\n        'ccut:hasDimension': 'M',\n        'qudtp:conversionMultiplier': 0.0311034768,\n        'qudtp:conversionOffset': 0.0\n      }\n    ],\n    'qudtp:abbreviation': 'oz',\n    'ccut:hasDimension': 'M'\n  }\n]\n</code></pre>\n<h4>CCU Transformation (Conversion):</h4>\n<h5><code>convert_ccu2ccu</code>:</h5>\n<p>This method is used to perfrom compound unit conversion given the CCU representations.<br>\nRun with three arguments (ccu representation of the source unit, ccu representation of the destination unit, value to transform).<br>\nThis method will return 3 values:</p>\n<ul>\n<li>the value after conversion</li>\n<li>the return status (see below)</li>\n<li>the return status in readable format (string)\nWhere:</li>\n</ul>\n<pre><code># Status key: 0: \"OK\"\n#             1: \"TRANSFORMATION_IS_NOT_SYMMETRIC\"\n#             2: \"DIMENSION_MISMATCH\"\n#             3: \"TRANSFORMATION_UNKNOWN\"\n#             4: \"UNSUPPORTED_FLOW\"\n</code></pre>\n<p>For example, running:</p>\n<pre><code>src_ccu = cc.get_top_ccu(\"m/s\")\ndst_ccu = cc.get_top_ccu(\"mi/hr\")\ncc.convert_ccu2ccu(src_ccu, dst_ccu, 2.7)\n</code></pre>\n<p>Will return:</p>\n<pre><code>(6.039727988546887, 0, 'OK')\n</code></pre>\n<h5><code>convert_str2str</code>:</h5>\n<p>This method is used to perfrom compound unit conversion given the strings of the source and destination units.<br>\nRun with three arguments (string of source unit, string of destination unit, value to transform).<br>\nThis method will return 5 values:</p>\n<ul>\n<li>the value after conversion</li>\n<li>the return status</li>\n<li>the return status in readable format (string)</li>\n<li>CCU representaiton of the source string</li>\n<li>CCU representaiton of the destination string\nFor example, running:</li>\n</ul>\n<pre><code>cc.convert_str2str(\"m/s\", \"mi/hr\", 2.7)\n</code></pre>\n<p>Will return:</p>\n<pre><code>(6.039727988546887,\n 0,\n 'OK',\n {\n   'qudtp:abbreviation': 'm s-1',\n   'ccut:hasPart': [\n     {\n       'qudtp:symbol': 'm',\n       'qudtp:quantityKind': 'http://www.qudt.org/qudt/owl/1.0.0/unit/Instances.html#Meter',\n       'ccut:hasDimension': 'L',\n       'qudtp:conversionMultiplier': 1.0,\n       'qudtp:conversionOffset': 0.0\n     },\n     {\n       'qudtp:symbol': 's',\n       'qudtp:quantityKind': 'http://www.qudt.org/qudt/owl/1.0.0/unit/Instances.html#SecondTime',\n       'ccut:hasDimension': 'T',\n       'qudtp:conversionMultiplier': 1.0,\n       'qudtp:conversionOffset': 0.0,\n       'ccut:exponent': '-1'\n     }\n   ],\n   'ccut:hasDimension': 'L T-1'\n },\n {\n   'qudtp:abbreviation': 'mi hr-1',\n   'ccut:hasPart': [\n     {\n       'qudtp:symbol': 'mi',\n       'qudtp:quantityKind': 'http://www.qudt.org/qudt/owl/1.0.0/unit/Instances.html#MileInternational',\n       'ccut:hasDimension': 'L',\n       'qudtp:conversionMultiplier': 1609.344,\n       'qudtp:conversionOffset': 0.0\n     },\n     {\n       'qudtp:symbol': 'hr',\n       'qudtp:quantityKind': 'http://www.qudt.org/qudt/owl/1.0.0/unit/Instances.html#Hour',\n       'ccut:hasDimension': 'T',\n       'qudtp:conversionMultiplier': 3600.0,\n       'qudtp:conversionOffset': 0.0,\n       'ccut:exponent': '-1'\n     }\n   ],\n   'ccut:hasDimension': 'L T-1'\n }\n)\n</code></pre>\n<h3>Citing CCUT</h3>\n<p>If you would like to cite the this tool in a paper or presentation, the following is recommended (BibTeX entry):</p>\n<pre><code>@article{shbita2019parsing,\n  title={Parsing, Representing and Transforming Units of Measure},\n  author={Shbita, Basel and Rajendran, Arunkumar and Pujara, Jay and Knoblock, Craig A}\n  journal={Modeling the World\u2019s Systems},\n  year={2019},\n}\n</code></pre>\n\n          </div>"}, "last_serial": 6700794, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "b5c4fe39f841140ade2cba4678e6e650", "sha256": "538ea552402cb378457edf60e86d8cccb6e4018c6f0c73e96f68089a92d0fd8b"}, "downloads": -1, "filename": "ccut-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b5c4fe39f841140ade2cba4678e6e650", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 73745, "upload_time": "2020-02-17T04:38:08", "upload_time_iso_8601": "2020-02-17T04:38:08.102333Z", "url": "https://files.pythonhosted.org/packages/fe/60/089e87e4b947d8db48bc7316f0169818ee3781c1e7473fdb8ac7e40512f7/ccut-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d148b95a292fcefa60d5fefd808fb471", "sha256": "536cd2ca4e5673d5dab3aec401e0414d0ea435049947342357174a7b714b20e8"}, "downloads": -1, "filename": "ccut-0.0.1.tar.gz", "has_sig": false, "md5_digest": "d148b95a292fcefa60d5fefd808fb471", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 65201, "upload_time": "2020-02-17T04:38:10", "upload_time_iso_8601": "2020-02-17T04:38:10.458347Z", "url": "https://files.pythonhosted.org/packages/1a/14/040ce87b26c3f45dbf7faeaba653d940754896864f77aad52d3350a12ed4/ccut-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "6c0d62dc4dd4c15c5105aaf16ff0db9f", "sha256": "eb1fecd22d78f3b456a10a1b29f1b3ac8121e113e13539015f9af317bf7e2955"}, "downloads": -1, "filename": "ccut-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "6c0d62dc4dd4c15c5105aaf16ff0db9f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 74843, "upload_time": "2020-02-19T00:52:32", "upload_time_iso_8601": "2020-02-19T00:52:32.721212Z", "url": "https://files.pythonhosted.org/packages/e8/48/ca6c85ad97e82dc07821a1bd4b176fdee9e6ee52e988e975285236546dfd/ccut-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7a8a521c2790a7e7d24195b96da3d587", "sha256": "39c74993fc2da531ac60371855445528cdd28f287f3cde18c5f692453a144a37"}, "downloads": -1, "filename": "ccut-0.0.2.tar.gz", "has_sig": false, "md5_digest": "7a8a521c2790a7e7d24195b96da3d587", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 66614, "upload_time": "2020-02-19T00:52:34", "upload_time_iso_8601": "2020-02-19T00:52:34.320102Z", "url": "https://files.pythonhosted.org/packages/16/54/6d4b0b0bc118474cfeb4d88af12f6bff6cd5fd7ef94417f6bc947fdeb8bd/ccut-0.0.2.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "8784493490526be24246732c80360cf2", "sha256": "7462770c16a6fdce05701fa0c730f2d908296998250432924c18d034cde282ce"}, "downloads": -1, "filename": "ccut-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "8784493490526be24246732c80360cf2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 76251, "upload_time": "2020-02-26T03:29:09", "upload_time_iso_8601": "2020-02-26T03:29:09.471714Z", "url": "https://files.pythonhosted.org/packages/57/74/539987fa43e2603a63a2ce883c6fcfe65df7a8fd06a34a0c53fbd065ba86/ccut-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1dcf759cd19046ebbcdc5efecffd7dd7", "sha256": "0a2c06e4847d84e31e1267a5b1a144b53198f0ebe2abdef125c9fa6843bd78c7"}, "downloads": -1, "filename": "ccut-1.0.0.tar.gz", "has_sig": false, "md5_digest": "1dcf759cd19046ebbcdc5efecffd7dd7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 66511, "upload_time": "2020-02-26T03:29:11", "upload_time_iso_8601": "2020-02-26T03:29:11.106125Z", "url": "https://files.pythonhosted.org/packages/d2/ff/b0140af9b5ec304b499e292815b5ab5b82af1a561ac8e30fd486e6411d1b/ccut-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8784493490526be24246732c80360cf2", "sha256": "7462770c16a6fdce05701fa0c730f2d908296998250432924c18d034cde282ce"}, "downloads": -1, "filename": "ccut-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "8784493490526be24246732c80360cf2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 76251, "upload_time": "2020-02-26T03:29:09", "upload_time_iso_8601": "2020-02-26T03:29:09.471714Z", "url": "https://files.pythonhosted.org/packages/57/74/539987fa43e2603a63a2ce883c6fcfe65df7a8fd06a34a0c53fbd065ba86/ccut-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1dcf759cd19046ebbcdc5efecffd7dd7", "sha256": "0a2c06e4847d84e31e1267a5b1a144b53198f0ebe2abdef125c9fa6843bd78c7"}, "downloads": -1, "filename": "ccut-1.0.0.tar.gz", "has_sig": false, "md5_digest": "1dcf759cd19046ebbcdc5efecffd7dd7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 66511, "upload_time": "2020-02-26T03:29:11", "upload_time_iso_8601": "2020-02-26T03:29:11.106125Z", "url": "https://files.pythonhosted.org/packages/d2/ff/b0140af9b5ec304b499e292815b5ab5b82af1a561ac8e30fd486e6411d1b/ccut-1.0.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:35:05 2020"}