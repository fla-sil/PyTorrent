{"info": {"author": "source{d}", "author_email": "machine-learning@sourced.tech", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# seriate\nOptimal ordering of elements in a set given their distance matrix.\n\n[![Travis build status](https://travis-ci.com/src-d/seriate.svg?branch=master)](https://travis-ci.com/src-d/seriate)\n[![Code coverage](https://codecov.io/github/src-d/seriate/coverage.svg)](https://codecov.io/github/src-d/seriate)\n[![PyPi package status](https://img.shields.io/pypi/v/seriate.svg)](https://pypi.python.org/pypi/seriate)\n![stability: stable](https://svg-badge.appspot.com/badge/stability/stable?color=007ec6)\n[![Apache 2.0 license](https://img.shields.io/badge/license-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\n\n![example](doc/example.png)\n\n[Overview](#overview) \u2022 [How To Use](#how-to-use) \u2022 [Contributions](#contributions) \u2022 [License](#license)\n\n## Overview\n\nThis is a Python implementation of [Seriation](http://nicolas.kruchten.com/content/2018/02/seriation/)\nalgorithm. Seriation is an approach for ordering elements in a set so that the\nsum of the sequential pairwise distances is minimal. We state this task\nas a Travelling Salesman Problem (TSP) and leverage the powerful [Google's or-tools](https://github.com/google/or-tools)\nto do heavy-lifting. Since TSP is NP-hard, it is not possible to calculate\nthe precise solution for a big number of elements. However, the or-tools'\nheuristics work very well in practice, and they are used in e.g. Google Maps.\n\nAny [`numpy.roll`-ed](https://docs.scipy.org/doc/numpy-1.16.0/reference/generated/numpy.roll.html)\nresult is equivalent.\n\n## How To Use\n\n```python\nimport numpy\nfrom scipy.spatial.distance import pdist\nfrom seriate import seriate\n\nelements = numpy.array([\n    [3, 3, 3],\n    [5, 5, 5],\n    [4, 4, 4],\n    [2, 2, 2],\n    [1, 1, 1]\n])\n\nprint(seriate(pdist(elements)))\n\n# Output: [4, 3, 0, 2, 1]\n```\n\nThe example above shows how we order 5 elements: `[3, 3, 3]`,\n`[5, 5, 5]`, `[4, 4, 4]`, `[2, 2, 2]` and `[1, 1, 1]`. The result\nis expected:\n\n1. `[1, 1, 1]` \n2. `[2, 2, 2]` \n3. `[3, 3, 3]` \n4. `[4, 4, 4]` \n5. `[5, 5, 5]`\n\n`pdist` from [`scipy.spatial.distance`](https://docs.scipy.org/doc/scipy/reference/spatial.distance.html)\nuses Euclidean (L2) dstance metric by default, so the distance between\n`[x, x, x]` and `[x + 1, x + 1, x + 1]` is constant: \u221a3. Any other distance\nis bigger, so the optimal ordering is to list our elements in the increasing\nnorm order.\n\n## Contributions\n\nContributions are very welcome and desired! Please follow the [code of conduct](doc/code_of_conduct.md)\nand read the [contribution guidelines](doc/contributing.md).\n\n## License\n\nApache-2.0, see [LICENSE.md](LICENSE.md).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/src-d/seriate", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/src-d/seriate", "keywords": "seriation", "license": "Apache-2.0", "maintainer": "", "maintainer_email": "", "name": "seriate", "package_url": "https://pypi.org/project/seriate/", "platform": "", "project_url": "https://pypi.org/project/seriate/", "project_urls": {"Download": "https://github.com/src-d/seriate", "Homepage": "https://github.com/src-d/seriate"}, "release_url": "https://pypi.org/project/seriate/1.1.2/", "requires_dist": ["numpy (>=1.0)", "ortools (<8,>=6.7.4973)", "packaging (>=16.0)"], "requires_python": "", "summary": "Implementation of the Seriation sequence ordering algorithm.", "version": "1.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>seriate</h1>\n<p>Optimal ordering of elements in a set given their distance matrix.</p>\n<p><a href=\"https://travis-ci.com/src-d/seriate\" rel=\"nofollow\"><img alt=\"Travis build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/155f3cfaaa6a4664627780bcace0fa237adbdaa0/68747470733a2f2f7472617669732d63692e636f6d2f7372632d642f736572696174652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/github/src-d/seriate\" rel=\"nofollow\"><img alt=\"Code coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e5ab7b5245434e9c15fa226f749c887a51878418/68747470733a2f2f636f6465636f762e696f2f6769746875622f7372632d642f736572696174652f636f7665726167652e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/seriate\" rel=\"nofollow\"><img alt=\"PyPi package status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/da0313a7703b3057998f0aee57110b0f8fcfe6fd/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f736572696174652e737667\"></a>\n<img alt=\"stability: stable\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/34d1a6d63cb55eb9923b3441fcbb566ca52dbc19/68747470733a2f2f7376672d62616467652e61707073706f742e636f6d2f62616467652f73746162696c6974792f737461626c653f636f6c6f723d303037656336\">\n<a href=\"https://opensource.org/licenses/Apache-2.0\" rel=\"nofollow\"><img alt=\"Apache 2.0 license\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bad0ad2a7195b40874e3a10488118122d89489fd/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d417061636865253230322e302d626c75652e737667\"></a></p>\n<p><img alt=\"example\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e185184f8954b89b3dfbd412361bcbf9858aeedf/646f632f6578616d706c652e706e67\"></p>\n<p><a href=\"#overview\" rel=\"nofollow\">Overview</a> \u2022 <a href=\"#how-to-use\" rel=\"nofollow\">How To Use</a> \u2022 <a href=\"#contributions\" rel=\"nofollow\">Contributions</a> \u2022 <a href=\"#license\" rel=\"nofollow\">License</a></p>\n<h2>Overview</h2>\n<p>This is a Python implementation of <a href=\"http://nicolas.kruchten.com/content/2018/02/seriation/\" rel=\"nofollow\">Seriation</a>\nalgorithm. Seriation is an approach for ordering elements in a set so that the\nsum of the sequential pairwise distances is minimal. We state this task\nas a Travelling Salesman Problem (TSP) and leverage the powerful <a href=\"https://github.com/google/or-tools\" rel=\"nofollow\">Google's or-tools</a>\nto do heavy-lifting. Since TSP is NP-hard, it is not possible to calculate\nthe precise solution for a big number of elements. However, the or-tools'\nheuristics work very well in practice, and they are used in e.g. Google Maps.</p>\n<p>Any <a href=\"https://docs.scipy.org/doc/numpy-1.16.0/reference/generated/numpy.roll.html\" rel=\"nofollow\"><code>numpy.roll</code>-ed</a>\nresult is equivalent.</p>\n<h2>How To Use</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span>\n<span class=\"kn\">from</span> <span class=\"nn\">scipy.spatial.distance</span> <span class=\"kn\">import</span> <span class=\"n\">pdist</span>\n<span class=\"kn\">from</span> <span class=\"nn\">seriate</span> <span class=\"kn\">import</span> <span class=\"n\">seriate</span>\n\n<span class=\"n\">elements</span> <span class=\"o\">=</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span>\n    <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"p\">])</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">seriate</span><span class=\"p\">(</span><span class=\"n\">pdist</span><span class=\"p\">(</span><span class=\"n\">elements</span><span class=\"p\">)))</span>\n\n<span class=\"c1\"># Output: [4, 3, 0, 2, 1]</span>\n</pre>\n<p>The example above shows how we order 5 elements: <code>[3, 3, 3]</code>,\n<code>[5, 5, 5]</code>, <code>[4, 4, 4]</code>, <code>[2, 2, 2]</code> and <code>[1, 1, 1]</code>. The result\nis expected:</p>\n<ol>\n<li><code>[1, 1, 1]</code></li>\n<li><code>[2, 2, 2]</code></li>\n<li><code>[3, 3, 3]</code></li>\n<li><code>[4, 4, 4]</code></li>\n<li><code>[5, 5, 5]</code></li>\n</ol>\n<p><code>pdist</code> from <a href=\"https://docs.scipy.org/doc/scipy/reference/spatial.distance.html\" rel=\"nofollow\"><code>scipy.spatial.distance</code></a>\nuses Euclidean (L2) dstance metric by default, so the distance between\n<code>[x, x, x]</code> and <code>[x + 1, x + 1, x + 1]</code> is constant: \u221a3. Any other distance\nis bigger, so the optimal ordering is to list our elements in the increasing\nnorm order.</p>\n<h2>Contributions</h2>\n<p>Contributions are very welcome and desired! Please follow the <a href=\"doc/code_of_conduct.md\" rel=\"nofollow\">code of conduct</a>\nand read the <a href=\"doc/contributing.md\" rel=\"nofollow\">contribution guidelines</a>.</p>\n<h2>License</h2>\n<p>Apache-2.0, see <a href=\"LICENSE.md\" rel=\"nofollow\">LICENSE.md</a>.</p>\n\n          </div>"}, "last_serial": 6090000, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "e272bc7a165e56760dc9791e30d30809", "sha256": "53260de229c8a381db12b20dcb1eed5f6529a33c0b8c0bd6ec336b2c940be935"}, "downloads": -1, "filename": "seriate-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "e272bc7a165e56760dc9791e30d30809", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7760, "upload_time": "2019-03-22T16:32:20", "upload_time_iso_8601": "2019-03-22T16:32:20.560695Z", "url": "https://files.pythonhosted.org/packages/92/cf/daa128c0df2d021620599ccd4d83d98983b1c616e25bfbf9f113c12cee62/seriate-1.0.0-py3-none-any.whl", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "ced6dba237df1f4a7ccaf5c509497c45", "sha256": "f6b1ed795a38a9679c70c3b5e38ea657c49d451e6a066c43da505eae156ea84a"}, "downloads": -1, "filename": "seriate-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "ced6dba237df1f4a7ccaf5c509497c45", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7960, "upload_time": "2019-03-29T10:43:03", "upload_time_iso_8601": "2019-03-29T10:43:03.749969Z", "url": "https://files.pythonhosted.org/packages/39/23/6d80c46ac228ccf781c4bce160a715839c0bfb5f54dbb683eced2795beca/seriate-1.0.1-py3-none-any.whl", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "3bf75715802cdc224dae64f3b8d6db96", "sha256": "41a9bd8ce24861175020d9a75a5e173c6c0267047d0539d7b391a07697282305"}, "downloads": -1, "filename": "seriate-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3bf75715802cdc224dae64f3b8d6db96", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8410, "upload_time": "2019-09-24T20:28:20", "upload_time_iso_8601": "2019-09-24T20:28:20.160926Z", "url": "https://files.pythonhosted.org/packages/f5/26/e52be1d4166a28ecaf806a2b1a8b2b75a9dcf7bb4eba1c6ee6577d6d4721/seriate-1.1.0-py3-none-any.whl", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "9f86b316d6d1b6eab9fd59f82beb02fa", "sha256": "430687475eebbd12cd9676c6dd9c6981374fb25fd52189f3fb6e4fd73afa7afd"}, "downloads": -1, "filename": "seriate-1.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "9f86b316d6d1b6eab9fd59f82beb02fa", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8548, "upload_time": "2019-10-14T13:39:29", "upload_time_iso_8601": "2019-10-14T13:39:29.884657Z", "url": "https://files.pythonhosted.org/packages/03/a7/07ccfc3a4ecbd338962b1b5b9e35d69d89c7ca94d8a31a6889dd758730df/seriate-1.1.1-py3-none-any.whl", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "673d8e33e5f35c9880951e1048fa7a86", "sha256": "f813ae54214dec4ab689cade548cdedeae28fce19fec598f5f3c3415787b4dc1"}, "downloads": -1, "filename": "seriate-1.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "673d8e33e5f35c9880951e1048fa7a86", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8537, "upload_time": "2019-11-06T22:21:11", "upload_time_iso_8601": "2019-11-06T22:21:11.327029Z", "url": "https://files.pythonhosted.org/packages/6a/dd/c2343154d01e0062d464ec083488417134ca9b891d067822a1e770a57c98/seriate-1.1.2-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "673d8e33e5f35c9880951e1048fa7a86", "sha256": "f813ae54214dec4ab689cade548cdedeae28fce19fec598f5f3c3415787b4dc1"}, "downloads": -1, "filename": "seriate-1.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "673d8e33e5f35c9880951e1048fa7a86", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8537, "upload_time": "2019-11-06T22:21:11", "upload_time_iso_8601": "2019-11-06T22:21:11.327029Z", "url": "https://files.pythonhosted.org/packages/6a/dd/c2343154d01e0062d464ec083488417134ca9b891d067822a1e770a57c98/seriate-1.1.2-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:15:14 2020"}