{"info": {"author": "Ray Douglass", "author_email": "ray@raydouglass.com", "bugtrack_url": null, "classifiers": [], "description": "# Media Management Scripts\n\nThis is a collection of command line tools for managing media files such as movies or TV shows.\n\n## Installation\n\nInstall the tools:\n\n`pip install media_management_scripts`\n\nYou also need to install other programs:\n\n### MacOS\n\n`brew install ffmpeg dialog`\n\n### Ubuntu\n\n`apt install ffmpeg dialog`\n\n### TVDB\n\nIf you want to use TVDB for some commands, create an account on <https://www.thetvdb.com> and create API keys [here](https://www.thetvdb.com/member/api)\n\nCreate a file `~/.config/tvdb/tvdb.ini` with contents:\n\n```ini\n[tvdb]\nusername = <your_user_name>\nuserkey = <your_user_key>\napikey = <your_api_key>\n```\n\n# Usage\n\nPass `--help` to the subcommands for detailed help. Major features are explained in detail below.\n\nMost commands that rename or move files have a dry-run mode (`-n` or `--dry-run`) which will output the actions so you can verify the results.\n\n## Main tools\n__[convert](#convert)__\n\n__[metadata](#metadata)__\n\n__[rename](#rename)__\n\n__[search](#search)__\n\n__[tv-rename](#tv-rename)__\n \n\nHelp output\n```\nusage: manage-media [-h] [-v]\n\nSub commands\n    combine-subtitles   Combine a video files with subtitle file\n    combine-all         Combine a directory tree of video files with subtitle\n                        file\n    concat-mp4          Concat multiple mp4 files together\n    convert             Convert a file\n    find-episodes       Find Season/Episode/Part using file names\n    itunes              Attempts to rename iTunes episodes to the standard\n                        Plex format.\n    metadata            Show metadata for a file\n    compare             Compare metadata between files\n    compare-directory   Show metadata for a file\n    movie-rename        Renames a file based on TheMovieDB\n    rename              Renames a set of files to the specified template\n    select-streams      Extract specific streams in a video file to a new file\n    split               Split a file\n    subtitles           Convert subtitles to SRT\n    tv-rename           Renames files in a directory to sXXeYY. Can also use\n                        TVDB to name files (<show> - SxxeYY - <episode_name>)\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -v, --version         Display version\n```\n\n## convert\n\n`manage-media convert <input> <output>`\n\nConvert a video file to different video or audio codecs. By default if no codecs are given, the file will be converted to H.264 with AAC audio.\n\nThe source file is left intact.\n\n#### Examples:\n- Convert to H.264\n    - `manage-media convert --video-codec h264 <input> <output>`\n- Convert to HEVC/H.265:\n    - `manage-media convert --video-codec hevc <input> <output>`\n- Convert to HEVC with AC3 audio:\n    - `manage-media convert --video-codec hevc --audio-codec ac3 <input> <output>`\n- Convert to HEVC, but don't convert audio:\n    - `manage-media convert --vc hevc --ac copy <input> <output>`\n- Scale to 480p\n    - `manage-media convert --scale 480`\n- Convert to H.264 and remove interlacing (such as on mpeg2 DVDs)\n    - `manage-media convert --vc h264 --deinterlace`\n- Convert a whole directory of files\n    - `manage-media convert --vc h264 --bulk <input dir> <output dir>`\n\n## metadata\n\nGet a simple output of metadata for a file. Or get lots of metadata in json format\n\n#### Simple output\n`manage-media metadata <input>`\n```\nBattlestar Galatica (2003) - s00e01 - Battlestar Galactica The Miniseries (1).mkv\n   Directory: /Volumes/Media/TV Shows/Battlestar Galactica/Season 0/\n   Title: Battlestar Galactica: Season 1 (Disc 1)\n   Size: 6.8GB\n   Format: matroska,webm\n   Duration: 1h34m39s\n   Bitrate: 10117 Kbps\n   Video: h264 8 bit (1920x1080)\n   Audio:\n     aac (eng, 5.1)\n   Subtitles: eng, spa, fra\n   Ripped: True\n```\n\n#### Json\n`manage-media metadata --json <input>`\n```json\n{\n  \"file\": \"/Volumes/Media/TV Shows/Battlestar Galactica/Season 0/Battlestar Galatica (2003) - s00e01 - Battlestar Galactica The Miniseries (1).mkv\",\n  \"title\": \"Battlestar Galactica: Season 1 (Disc 1)\",\n  \"duration\": 5679.362,\n  \"duration_str\": \"1h34m39s\",\n  \"size\": 7354722701,\n  \"size_str\": \"6.8GB\",\n  \"resolution\": \"HIGH_DEF\",\n  \"bit_rate\": 10359928,\n  \"bit_rate_str\": \"10117 Kbps\",\n  \"ripped\": true,\n  \"format\": \"matroska,webm\",\n  \"format_long_name\": \"Matroska / WebM\",\n  \"mime_type\": \"video/x-matroska\",\n  \"tags\": {\n    \"title\": \"Battlestar Galactica: Season 1 (Disc 1)\",\n    \"RIPPED\": \"true\",\n    \"ENCODER\": \"Lavf57.56.100\"\n  },\n  \"video_streams\": [ ... ],\n  \"audio_streams\": [ ... ],\n  \"subtitle_streams\": [ ... ],\n  \"other_streams\": [ ... ],\n  \"chapters\": [ ... ],\n  \"interlace\": null\n}\n```\n\n## rename\n\n`manage-media rename <template> <input file>` or `manage-media rename --recursive <template> <input directory>` \n\nA flexible tool to rename files\n\nRename files based on a template.\n\nTemplates can include variables or expressions by surrounding with ${...}. Functions can be called like `${upper(i)}` or `${i | upper}`.\n\nThe following variables are available:\n  * `i`/`index` - The index of the current file being renamed\n  * `wo_ext` - The file name basename without the extension\n  * `ext` - The file extension of the current file (without '.')\n  * `filename` - The filename of the current file (basename)\n  * `re`/`regex` - A list of regex match groups (use `re[0]`, `re[1]`, etc)\n\nThe following functions are available:\n  * `upper` - Upper cases the input\n  * `lower` - Lower cases the input\n  * `ifempty(a, b, c)` - If a is empty or null, then b, otherwise c\n  * `lpad(a, b:int)` - Left pads a to length b (defaults to 2+) with spaces\n  * `zpad(a, b:int)` - Left pads a to length b (defaults to 2+) with zeros\n\n`lpad`/`zpad` - By default pads to at least 2 characters. If there are 100+ files, then 3 characters, 1000+ files, then 4 characters, etc.\n\nRegular Expressions:\nIf a regex is included, the match groups (0=whole match, >0=match group) are available in a list 're' or 'regex'.\nEach match group is converted to an int if possible, so a zero padded int will lose the zeros.\n\nExample Templates:\n```\nInput: S02E04.mp4\nRegex: S(\\d+)E(\\d+)\n\nTemplate: 'Season ${re[1]} Episode ${re[2]}.{ext}'\nResult: 'Season 2 Episode 4.mp4'\n\nTemplate: 'Season ${re[1] | zpad} Episode ${zpad(re[2], 3)}.{ext}'\nResults: 'Season 02 Episode 004.mp4'\n```\n```\nInput: whatever.mp4\nRegex: S(\\d+)E(\\d)\nTemplate: 'Season ${ifempty(re[1], 'unknown', re[1])} Episode ${re[2]}.{ext}'\nResult: 'Season unknown Episode .mp4'\n```\n\n## search\n\n`manage-media search <input directory> <query>`\n\nSearches a directory for video files matching parameters. Note: this can take a LONG time as it has to read the metadata for each file.\nYou can speed up multiple searches in the same directory with `--db <file` which caches the metadata.\n\nIf a video has multiple streams, comparisons mean at least one stream matches.\n\nAvailable parameters:\n\nVideo:\n- `v.codec` - The video codec (h264, h265, mpeg2, etc)\n- `v.width` - The video pixel width\n- `v.height` - The video pixel height\n\nAudio:\n- `a.codec` - The audio codec (aac, ac3)\n- `a.channels` - The number of audio channels (stereo=2, 5.1=6, etc)\n- `a.lang` - The language of the audio track\n\nSubtitles:\n- `s.codec` - The subtitle codec (srt, hdmv_pgs, mov_text, etc)\n- `s.lang` - The language of the subtitle track\n\nOthers:\n- `ripped` - Whether the video is marked as ripped or not\n- `bit_rate` - The overall average bitrate\n- `resolution` - The resolution name (LOW_DEF, HIGH_DEF, etc)\n\nMetadata:\n- `meta.xyz` - Follows the basic JSON metadata output\n\nFunctions:\n- `isNull(xyz)` - Returns true if the value is null\n- `all(xyz)` - Instead of one stream matching, check all of them\n\nExample Queries:\n- Find all videos that are H264\n    - `v.codec = h264`\n- Find all videos that are H264 with stereo AAC\n    - `v.codec = h264 and a.codec = aac and a.channels = 2`\n- Find all videos that are H265 or H264 and AAC\n    - `a.codec = aac and (v.codec = h265 or v.codec = h264)`\n    - `a.codec = aac and v.codec in [h265, h264]`\n- Find all videos without English Subtitles\n    - `s.lang != eng`\n- Find videos that are lower resolution than 1080\n    - `v.height < 1080`\n- Find all videos that have ONLY AAC audio\n    - `all(a.codec) = aac`\n\n## tv-rename\n\nRenames files in a directory to sXXeYY\n\nFor example, if you ripped some Battlestar Galactica blurays, you might have a file structure like:\n\n- BSG_Season1_Disc1\n    - BSG_Season1_Disc1_t00.mkv\n    - BSG_Season1_Disc1_t01.mkv\n    - BSG_Season1_Disc1_t02.mkv\n    - BSG_Season1_Disc1_t03.mkv\n- BSG_Season1_Disc2\n    - BSG_Season1_Disc2_t00.mkv\n    - BSG_Season1_Disc2_t01.mkv\n    - BSG_Season1_Disc2_t02.mkv\n    - BSG_Season1_Disc2_t03.mkv\n   \n`manage-media tv-rename -s 1 -e 1 --tvdb --show \"Battlestar Galactica\" --output \"BSG/Season 1\" BSG_Season1_Disc*`\n\nResult\n- BSG\n    - Season 1\n        - Battlestar Galatica (2003) - S01E01 - 33.mkv\n        - Battlestar Galatica (2003) - S01E02 - Water.mkv\n        - Battlestar Galatica (2003) - S01E03 - Bastille Day.mkv\n        - Battlestar Galatica (2003) - S01E04 - Act of Contrition.mkv\n        - Battlestar Galatica (2003) - S01E05 - You Can't Go Home Again.mkv\n        - Battlestar Galatica (2003) - S01E06 - Litmus.mkv\n        - Battlestar Galatica (2003) - S01E07 - Six Degrees of Separation.mkv\n        - Battlestar Galatica (2003) - S01E08 - Flesh and Bone.mkv\n        \n        \n## Configuration\n\nYou can configuration where to find various executables by creating a file `~/.config/mms/config.ini`. By default, commands will use the executables found in your path.\n\nYou can see which tools are being used with `manage-media `\n\nConfig File Example\n```ini\n[main]\nffmpeg = /path/to/ffmpeg\n\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/raydouglass/media_management_scripts", "keywords": "", "license": "Apache", "maintainer": "", "maintainer_email": "", "name": "media-management-scripts", "package_url": "https://pypi.org/project/media-management-scripts/", "platform": "", "project_url": "https://pypi.org/project/media-management-scripts/", "project_urls": {"Homepage": "https://github.com/raydouglass/media_management_scripts"}, "release_url": "https://pypi.org/project/media-management-scripts/0.4.2/", "requires_dist": null, "requires_python": "", "summary": "Scripts for managing media", "version": "0.4.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Media Management Scripts</h1>\n<p>This is a collection of command line tools for managing media files such as movies or TV shows.</p>\n<h2>Installation</h2>\n<p>Install the tools:</p>\n<p><code>pip install media_management_scripts</code></p>\n<p>You also need to install other programs:</p>\n<h3>MacOS</h3>\n<p><code>brew install ffmpeg dialog</code></p>\n<h3>Ubuntu</h3>\n<p><code>apt install ffmpeg dialog</code></p>\n<h3>TVDB</h3>\n<p>If you want to use TVDB for some commands, create an account on <a href=\"https://www.thetvdb.com\" rel=\"nofollow\">https://www.thetvdb.com</a> and create API keys <a href=\"https://www.thetvdb.com/member/api\" rel=\"nofollow\">here</a></p>\n<p>Create a file <code>~/.config/tvdb/tvdb.ini</code> with contents:</p>\n<pre><span class=\"k\">[tvdb]</span>\n<span class=\"na\">username</span> <span class=\"o\">=</span> <span class=\"s\">&lt;your_user_name&gt;</span>\n<span class=\"na\">userkey</span> <span class=\"o\">=</span> <span class=\"s\">&lt;your_user_key&gt;</span>\n<span class=\"na\">apikey</span> <span class=\"o\">=</span> <span class=\"s\">&lt;your_api_key&gt;</span>\n</pre>\n<h1>Usage</h1>\n<p>Pass <code>--help</code> to the subcommands for detailed help. Major features are explained in detail below.</p>\n<p>Most commands that rename or move files have a dry-run mode (<code>-n</code> or <code>--dry-run</code>) which will output the actions so you can verify the results.</p>\n<h2>Main tools</h2>\n<p><strong><a href=\"#convert\" rel=\"nofollow\">convert</a></strong></p>\n<p><strong><a href=\"#metadata\" rel=\"nofollow\">metadata</a></strong></p>\n<p><strong><a href=\"#rename\" rel=\"nofollow\">rename</a></strong></p>\n<p><strong><a href=\"#search\" rel=\"nofollow\">search</a></strong></p>\n<p><strong><a href=\"#tv-rename\" rel=\"nofollow\">tv-rename</a></strong></p>\n<p>Help output</p>\n<pre><code>usage: manage-media [-h] [-v]\n\nSub commands\n    combine-subtitles   Combine a video files with subtitle file\n    combine-all         Combine a directory tree of video files with subtitle\n                        file\n    concat-mp4          Concat multiple mp4 files together\n    convert             Convert a file\n    find-episodes       Find Season/Episode/Part using file names\n    itunes              Attempts to rename iTunes episodes to the standard\n                        Plex format.\n    metadata            Show metadata for a file\n    compare             Compare metadata between files\n    compare-directory   Show metadata for a file\n    movie-rename        Renames a file based on TheMovieDB\n    rename              Renames a set of files to the specified template\n    select-streams      Extract specific streams in a video file to a new file\n    split               Split a file\n    subtitles           Convert subtitles to SRT\n    tv-rename           Renames files in a directory to sXXeYY. Can also use\n                        TVDB to name files (&lt;show&gt; - SxxeYY - &lt;episode_name&gt;)\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -v, --version         Display version\n</code></pre>\n<h2>convert</h2>\n<p><code>manage-media convert &lt;input&gt; &lt;output&gt;</code></p>\n<p>Convert a video file to different video or audio codecs. By default if no codecs are given, the file will be converted to H.264 with AAC audio.</p>\n<p>The source file is left intact.</p>\n<h4>Examples:</h4>\n<ul>\n<li>Convert to H.264\n<ul>\n<li><code>manage-media convert --video-codec h264 &lt;input&gt; &lt;output&gt;</code></li>\n</ul>\n</li>\n<li>Convert to HEVC/H.265:\n<ul>\n<li><code>manage-media convert --video-codec hevc &lt;input&gt; &lt;output&gt;</code></li>\n</ul>\n</li>\n<li>Convert to HEVC with AC3 audio:\n<ul>\n<li><code>manage-media convert --video-codec hevc --audio-codec ac3 &lt;input&gt; &lt;output&gt;</code></li>\n</ul>\n</li>\n<li>Convert to HEVC, but don't convert audio:\n<ul>\n<li><code>manage-media convert --vc hevc --ac copy &lt;input&gt; &lt;output&gt;</code></li>\n</ul>\n</li>\n<li>Scale to 480p\n<ul>\n<li><code>manage-media convert --scale 480</code></li>\n</ul>\n</li>\n<li>Convert to H.264 and remove interlacing (such as on mpeg2 DVDs)\n<ul>\n<li><code>manage-media convert --vc h264 --deinterlace</code></li>\n</ul>\n</li>\n<li>Convert a whole directory of files\n<ul>\n<li><code>manage-media convert --vc h264 --bulk &lt;input dir&gt; &lt;output dir&gt;</code></li>\n</ul>\n</li>\n</ul>\n<h2>metadata</h2>\n<p>Get a simple output of metadata for a file. Or get lots of metadata in json format</p>\n<h4>Simple output</h4>\n<p><code>manage-media metadata &lt;input&gt;</code></p>\n<pre><code>Battlestar Galatica (2003) - s00e01 - Battlestar Galactica The Miniseries (1).mkv\n   Directory: /Volumes/Media/TV Shows/Battlestar Galactica/Season 0/\n   Title: Battlestar Galactica: Season 1 (Disc 1)\n   Size: 6.8GB\n   Format: matroska,webm\n   Duration: 1h34m39s\n   Bitrate: 10117 Kbps\n   Video: h264 8 bit (1920x1080)\n   Audio:\n     aac (eng, 5.1)\n   Subtitles: eng, spa, fra\n   Ripped: True\n</code></pre>\n<h4>Json</h4>\n<p><code>manage-media metadata --json &lt;input&gt;</code></p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"file\"</span><span class=\"p\">:</span> <span class=\"s2\">\"/Volumes/Media/TV Shows/Battlestar Galactica/Season 0/Battlestar Galatica (2003) - s00e01 - Battlestar Galactica The Miniseries (1).mkv\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"title\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Battlestar Galactica: Season 1 (Disc 1)\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"duration\"</span><span class=\"p\">:</span> <span class=\"mf\">5679.362</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"duration_str\"</span><span class=\"p\">:</span> <span class=\"s2\">\"1h34m39s\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"size\"</span><span class=\"p\">:</span> <span class=\"mi\">7354722701</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"size_str\"</span><span class=\"p\">:</span> <span class=\"s2\">\"6.8GB\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"resolution\"</span><span class=\"p\">:</span> <span class=\"s2\">\"HIGH_DEF\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"bit_rate\"</span><span class=\"p\">:</span> <span class=\"mi\">10359928</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"bit_rate_str\"</span><span class=\"p\">:</span> <span class=\"s2\">\"10117 Kbps\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"ripped\"</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"format\"</span><span class=\"p\">:</span> <span class=\"s2\">\"matroska,webm\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"format_long_name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Matroska / WebM\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"mime_type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"video/x-matroska\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"tags\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"title\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Battlestar Galactica: Season 1 (Disc 1)\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"RIPPED\"</span><span class=\"p\">:</span> <span class=\"s2\">\"true\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"ENCODER\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Lavf57.56.100\"</span>\n  <span class=\"p\">},</span>\n  <span class=\"nt\">\"video_streams\"</span><span class=\"p\">:</span> <span class=\"p\">[</span> <span class=\"err\">...</span> <span class=\"p\">],</span>\n  <span class=\"nt\">\"audio_streams\"</span><span class=\"p\">:</span> <span class=\"p\">[</span> <span class=\"err\">...</span> <span class=\"p\">],</span>\n  <span class=\"nt\">\"subtitle_streams\"</span><span class=\"p\">:</span> <span class=\"p\">[</span> <span class=\"err\">...</span> <span class=\"p\">],</span>\n  <span class=\"nt\">\"other_streams\"</span><span class=\"p\">:</span> <span class=\"p\">[</span> <span class=\"err\">...</span> <span class=\"p\">],</span>\n  <span class=\"nt\">\"chapters\"</span><span class=\"p\">:</span> <span class=\"p\">[</span> <span class=\"err\">...</span> <span class=\"p\">],</span>\n  <span class=\"nt\">\"interlace\"</span><span class=\"p\">:</span> <span class=\"kc\">null</span>\n<span class=\"p\">}</span>\n</pre>\n<h2>rename</h2>\n<p><code>manage-media rename &lt;template&gt; &lt;input file&gt;</code> or <code>manage-media rename --recursive &lt;template&gt; &lt;input directory&gt;</code></p>\n<p>A flexible tool to rename files</p>\n<p>Rename files based on a template.</p>\n<p>Templates can include variables or expressions by surrounding with ${...}. Functions can be called like <code>${upper(i)}</code> or <code>${i | upper}</code>.</p>\n<p>The following variables are available:</p>\n<ul>\n<li><code>i</code>/<code>index</code> - The index of the current file being renamed</li>\n<li><code>wo_ext</code> - The file name basename without the extension</li>\n<li><code>ext</code> - The file extension of the current file (without '.')</li>\n<li><code>filename</code> - The filename of the current file (basename)</li>\n<li><code>re</code>/<code>regex</code> - A list of regex match groups (use <code>re[0]</code>, <code>re[1]</code>, etc)</li>\n</ul>\n<p>The following functions are available:</p>\n<ul>\n<li><code>upper</code> - Upper cases the input</li>\n<li><code>lower</code> - Lower cases the input</li>\n<li><code>ifempty(a, b, c)</code> - If a is empty or null, then b, otherwise c</li>\n<li><code>lpad(a, b:int)</code> - Left pads a to length b (defaults to 2+) with spaces</li>\n<li><code>zpad(a, b:int)</code> - Left pads a to length b (defaults to 2+) with zeros</li>\n</ul>\n<p><code>lpad</code>/<code>zpad</code> - By default pads to at least 2 characters. If there are 100+ files, then 3 characters, 1000+ files, then 4 characters, etc.</p>\n<p>Regular Expressions:\nIf a regex is included, the match groups (0=whole match, &gt;0=match group) are available in a list 're' or 'regex'.\nEach match group is converted to an int if possible, so a zero padded int will lose the zeros.</p>\n<p>Example Templates:</p>\n<pre><code>Input: S02E04.mp4\nRegex: S(\\d+)E(\\d+)\n\nTemplate: 'Season ${re[1]} Episode ${re[2]}.{ext}'\nResult: 'Season 2 Episode 4.mp4'\n\nTemplate: 'Season ${re[1] | zpad} Episode ${zpad(re[2], 3)}.{ext}'\nResults: 'Season 02 Episode 004.mp4'\n</code></pre>\n<pre><code>Input: whatever.mp4\nRegex: S(\\d+)E(\\d)\nTemplate: 'Season ${ifempty(re[1], 'unknown', re[1])} Episode ${re[2]}.{ext}'\nResult: 'Season unknown Episode .mp4'\n</code></pre>\n<h2>search</h2>\n<p><code>manage-media search &lt;input directory&gt; &lt;query&gt;</code></p>\n<p>Searches a directory for video files matching parameters. Note: this can take a LONG time as it has to read the metadata for each file.\nYou can speed up multiple searches in the same directory with <code>--db &lt;file</code> which caches the metadata.</p>\n<p>If a video has multiple streams, comparisons mean at least one stream matches.</p>\n<p>Available parameters:</p>\n<p>Video:</p>\n<ul>\n<li><code>v.codec</code> - The video codec (h264, h265, mpeg2, etc)</li>\n<li><code>v.width</code> - The video pixel width</li>\n<li><code>v.height</code> - The video pixel height</li>\n</ul>\n<p>Audio:</p>\n<ul>\n<li><code>a.codec</code> - The audio codec (aac, ac3)</li>\n<li><code>a.channels</code> - The number of audio channels (stereo=2, 5.1=6, etc)</li>\n<li><code>a.lang</code> - The language of the audio track</li>\n</ul>\n<p>Subtitles:</p>\n<ul>\n<li><code>s.codec</code> - The subtitle codec (srt, hdmv_pgs, mov_text, etc)</li>\n<li><code>s.lang</code> - The language of the subtitle track</li>\n</ul>\n<p>Others:</p>\n<ul>\n<li><code>ripped</code> - Whether the video is marked as ripped or not</li>\n<li><code>bit_rate</code> - The overall average bitrate</li>\n<li><code>resolution</code> - The resolution name (LOW_DEF, HIGH_DEF, etc)</li>\n</ul>\n<p>Metadata:</p>\n<ul>\n<li><code>meta.xyz</code> - Follows the basic JSON metadata output</li>\n</ul>\n<p>Functions:</p>\n<ul>\n<li><code>isNull(xyz)</code> - Returns true if the value is null</li>\n<li><code>all(xyz)</code> - Instead of one stream matching, check all of them</li>\n</ul>\n<p>Example Queries:</p>\n<ul>\n<li>Find all videos that are H264\n<ul>\n<li><code>v.codec = h264</code></li>\n</ul>\n</li>\n<li>Find all videos that are H264 with stereo AAC\n<ul>\n<li><code>v.codec = h264 and a.codec = aac and a.channels = 2</code></li>\n</ul>\n</li>\n<li>Find all videos that are H265 or H264 and AAC\n<ul>\n<li><code>a.codec = aac and (v.codec = h265 or v.codec = h264)</code></li>\n<li><code>a.codec = aac and v.codec in [h265, h264]</code></li>\n</ul>\n</li>\n<li>Find all videos without English Subtitles\n<ul>\n<li><code>s.lang != eng</code></li>\n</ul>\n</li>\n<li>Find videos that are lower resolution than 1080\n<ul>\n<li><code>v.height &lt; 1080</code></li>\n</ul>\n</li>\n<li>Find all videos that have ONLY AAC audio\n<ul>\n<li><code>all(a.codec) = aac</code></li>\n</ul>\n</li>\n</ul>\n<h2>tv-rename</h2>\n<p>Renames files in a directory to sXXeYY</p>\n<p>For example, if you ripped some Battlestar Galactica blurays, you might have a file structure like:</p>\n<ul>\n<li>BSG_Season1_Disc1\n<ul>\n<li>BSG_Season1_Disc1_t00.mkv</li>\n<li>BSG_Season1_Disc1_t01.mkv</li>\n<li>BSG_Season1_Disc1_t02.mkv</li>\n<li>BSG_Season1_Disc1_t03.mkv</li>\n</ul>\n</li>\n<li>BSG_Season1_Disc2\n<ul>\n<li>BSG_Season1_Disc2_t00.mkv</li>\n<li>BSG_Season1_Disc2_t01.mkv</li>\n<li>BSG_Season1_Disc2_t02.mkv</li>\n<li>BSG_Season1_Disc2_t03.mkv</li>\n</ul>\n</li>\n</ul>\n<p><code>manage-media tv-rename -s 1 -e 1 --tvdb --show \"Battlestar Galactica\" --output \"BSG/Season 1\" BSG_Season1_Disc*</code></p>\n<p>Result</p>\n<ul>\n<li>BSG\n<ul>\n<li>Season 1\n<ul>\n<li>Battlestar Galatica (2003) - S01E01 - 33.mkv</li>\n<li>Battlestar Galatica (2003) - S01E02 - Water.mkv</li>\n<li>Battlestar Galatica (2003) - S01E03 - Bastille Day.mkv</li>\n<li>Battlestar Galatica (2003) - S01E04 - Act of Contrition.mkv</li>\n<li>Battlestar Galatica (2003) - S01E05 - You Can't Go Home Again.mkv</li>\n<li>Battlestar Galatica (2003) - S01E06 - Litmus.mkv</li>\n<li>Battlestar Galatica (2003) - S01E07 - Six Degrees of Separation.mkv</li>\n<li>Battlestar Galatica (2003) - S01E08 - Flesh and Bone.mkv</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2>Configuration</h2>\n<p>You can configuration where to find various executables by creating a file <code>~/.config/mms/config.ini</code>. By default, commands will use the executables found in your path.</p>\n<p>You can see which tools are being used with <code>manage-media</code></p>\n<p>Config File Example</p>\n<pre><span class=\"k\">[main]</span>\n<span class=\"na\">ffmpeg</span> <span class=\"o\">=</span> <span class=\"s\">/path/to/ffmpeg</span>\n</pre>\n\n          </div>"}, "last_serial": 7105869, "releases": {"0.4.0": [{"comment_text": "", "digests": {"md5": "ca4d05c21597a42364de59822e8261fc", "sha256": "ea6bcf60bda870a0104755d47625468325d2e6686ad275695f9567c92af3a4cd"}, "downloads": -1, "filename": "media_management_scripts-0.4.0.tar.gz", "has_sig": false, "md5_digest": "ca4d05c21597a42364de59822e8261fc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 54002, "upload_time": "2019-06-30T00:59:23", "upload_time_iso_8601": "2019-06-30T00:59:23.915832Z", "url": "https://files.pythonhosted.org/packages/78/df/d554ea1ecdec8335ff6af66a9dbb01cf0b60f06cde6f54ecce033c32f78c/media_management_scripts-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "1dbaf2ea4c4f54d941ca6ecd4535d162", "sha256": "35cbeb6ee016987827dde4facdcf8b3dd44c94857da532112a99827a47dc7cf9"}, "downloads": -1, "filename": "media_management_scripts-0.4.1.tar.gz", "has_sig": false, "md5_digest": "1dbaf2ea4c4f54d941ca6ecd4535d162", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 58539, "upload_time": "2019-06-30T01:02:09", "upload_time_iso_8601": "2019-06-30T01:02:09.123784Z", "url": "https://files.pythonhosted.org/packages/9b/a2/f4f30e98325958f0f6184cd0066b31300d8ad16e8ae2629cbf38a4691531/media_management_scripts-0.4.1.tar.gz", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "01428403bd44a3320a550bb1028c5eae", "sha256": "8fcb822795076be415de3e35b5dcb62f53b6400432ebcd2ba2a7d7dab6347e44"}, "downloads": -1, "filename": "media_management_scripts-0.4.2.tar.gz", "has_sig": false, "md5_digest": "01428403bd44a3320a550bb1028c5eae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 59210, "upload_time": "2020-04-26T16:54:12", "upload_time_iso_8601": "2020-04-26T16:54:12.405782Z", "url": "https://files.pythonhosted.org/packages/30/67/1da41826d2c9714110ace74737f070ec915b7d6c7de57e7fa0aa02bca131/media_management_scripts-0.4.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "01428403bd44a3320a550bb1028c5eae", "sha256": "8fcb822795076be415de3e35b5dcb62f53b6400432ebcd2ba2a7d7dab6347e44"}, "downloads": -1, "filename": "media_management_scripts-0.4.2.tar.gz", "has_sig": false, "md5_digest": "01428403bd44a3320a550bb1028c5eae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 59210, "upload_time": "2020-04-26T16:54:12", "upload_time_iso_8601": "2020-04-26T16:54:12.405782Z", "url": "https://files.pythonhosted.org/packages/30/67/1da41826d2c9714110ace74737f070ec915b7d6c7de57e7fa0aa02bca131/media_management_scripts-0.4.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:56:35 2020"}