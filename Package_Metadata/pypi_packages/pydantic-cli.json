{"info": {"author": "M. Kocher", "author_email": "michael.kocher@me.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Pydantic Commandline Tool Interface\n\nTurn Pydantic defined Data Models into CLI Tools!\n\n\n## Features\n\n1. Schema driven interfaces built on top of [Pydantic](https://github.com/samuelcolvin/pydantic)\n2. Validation is performed in a single location as defined by Pydantic's validation model\n3. CLI parsing is only structurally validating that the args or optional arguments are provided\n4. Clear interface between the CLI and your application code\n5. Easy to test (due to reasons defined above)\n\n\n## Quick Start\n\n\nTo create a commandline tool that takes an input file and max number of records to process as positional arguments:\n\n```bash\nmy-tool /path/to/file.txt 1234\n```\n\nThis requires two components.\n\n- Create Pydantic Data Model of type `T` \n- write a function that takes an instance of `T` and returns the exit code (e.g., 0 for success, non-zero for failure).\n- pass the `T` into to the `to_runner` function, or the `run_and_exit`\n\nExplicit example show below.  \n\n```python\nimport sys\n\nfrom pydantic import BaseModel\nfrom pydantic_cli import run_and_exit, to_runner\n\nclass MinOptions(BaseModel):\n    input_file: str\n    max_records: int\n\n\ndef example_runner(opts: MinOptions) -> int:\n    print(f\"Mock example running with options {opts}\")\n    return 0\n\nif __name__ == '__main__':\n    # to_runner will return a function that takes the args list to run and \n    # will return an integer exit code\n    sys.exit(to_runner(MinOptions, example_runner, version='0.1.0')(sys.argv[1:]))\n\n```\n\nOr to implicitly use `sys.argv[1:]`, call can leverage `run_and_exit` (`to_runner` is also useful for testing).\n\n```python\nif __name__ == '__main__':\n    run_and_exit(MinOptions, example_runner, description=\"My Tool Description\", version='0.1.0')\n\n```\n\nIf the data model has default values, the commandline argument with be optional and the CLI arg will be prefixed with `--'.\n\nFor example:\n\n```python\nfrom pydantic import BaseModel\nfrom pydantic_cli import run_and_exit\n\nclass MinOptions(BaseModel):\n    input_file: str\n    max_records: int = 10\n\n\ndef example_runner(opts: MinOptions) -> int:\n    print(f\"Mock example running with options {opts}\")\n    return 0\n\n\nif __name__ == '__main__':\n    run_and_exit(MinOptions, example_runner, description=\"My Tool Description\", version='0.1.0')\n\n```\n\nWill create a tool with `my-tool /path/to/input.txt --max_records 1234`\n\n```bash\nmy-tool /path/to/input.txt --max_records 1234\n```\n\nwith `--max_records` being optional to the commandline interface.\n\n\n**WARNING**: Boolean values must be communicated explicitly (e.g., `--run_training True`)\n\n\nThe `--help` is quite minimal (due to the lack of metadata), however, verbosely named arguments can often be good enough to communicate the intent of the commandline interface.\n\n\nFor customization of the CLI args, such as max number of records is `-m 1234` in the above example, there are two approaches.\n\n- The first is the \"quick\" method that is a minor change to the `Config` of the Pydantic Data model. \n- The second \"schema\" method is to define the metadata in the [`Schema` model in Pydantic](https://pydantic-docs.helpmanual.io/#schema-creation) \n\n\n### Quick Model for Customization\n\nWe're going to change the usage from `my-tool /path/to/file.txt 1234` to `my-tool /path/to/file.txt -m 1234` .\n\nThis only requires adding  `CLI_EXTRA_OPTIONS` to the Pydantic `Config`.\n\n```python\nfrom pydantic import BaseModel\n\nclass MinOptions(BaseModel):\n\n    class Config:\n        CLI_EXTRA_OPTIONS = {'max_records': ('-m', )}\n\n    input_file: str\n    max_records: int = 10\n\n```\n\nYou can also override the \"long\" argument. However, **note this is starting to add a new layer of indirection** on top of the schema. (e.g., 'max_records' to '--max-records') that may or may not be useful.\n\n\n```python\nfrom pydantic import BaseModel\n\nclass MinOptions(BaseModel):\n\n    class Config:\n        CLI_EXTRA_OPTIONS = {'max_records': ('-m', '--max-records')}\n\n    input_file: str\n    max_records: int = 10\n\n```\n\n\n### Schema Approach\n\n\n```python\nfrom pydantic import BaseModel, Schema\n\n\nclass Options(BaseModel):\n\n    class Config:\n        validate_all = True\n        validate_assignment = True\n\n    input_file: str = Schema(\n        ..., # this implicitly means required=True\n        title=\"Input File\",\n        description=\"Path to the input file\",\n        required=True,\n        extras={\"cli\": ('-f', '--input-file')}\n    )\n\n    max_records: int = Schema(\n        123,\n        title=\"Max Records\",\n        description=\"Max number of records to process\",\n        gt=0,\n        extras={'cli': ('-m', '--max-records')}\n    )\n\n```\n\n\n## Hooks into the CLI Execution\n\n- exception handler\n- epilogue handler\n\nBoth of these cases can be customized to by passing in a function to the running/execution method. \n\n\nThe exception handler should handle any logging or writing to stderr as well as mapping the specific exception to non-zero integer exit code. \n\nFor example: \n\n```python\nimport sys\n\nfrom pydantic_cli import run_and_exit\n\n\ndef custom_exception_handler(ex) -> int:\n    exception_map = dict(ValueError=3, IOError=7)\n    sys.stderr.write(str(ex))\n    exit_code = exception_map.get(ex.__class__, 1)\n    return exit_code\n\n\nif __name__ == '__main__':\n    run_and_exit(MinOptions, example_runner, exception_handler=custom_exception_handler)\n```\n\nSimilarly, the post execution hook can be called. This function is `Callable[[int, float], None]` that is the `exit code` and `program runtime` in sec as input.\n\n\n```python\nimport sys\n\nfrom pydantic_cli import run_and_exit\n\n\ndef custom_epilogue_handler(exit_code: int, run_time_sec:float):\n    m = \"Success\" if exit_code else \"Failed\"\n    msg = f\"Completed running ({m}) in {run_time_sec:.2f} sec\"\n    print(msg)\n\n\nif __name__ == '__main__':\n    run_and_exit(MinOptions, example_runner, epilogue_handler=custom_epilogue_handler)\n\n```\n\n## SubParsers\n\nDefining a subparser to your commandline tool is enabled by creating a container `SubParser` dict and calling `run_sp_and_exit`\n\n\n```python\nimport typing as T\nfrom pydantic import BaseModel\nfrom pydantic.schema import UrlStr\n\n\nfrom pydantic_cli.examples import ConfigDefaults\nfrom pydantic_cli import run_sp_and_exit, SubParser\n\n\nclass AlphaOptions(BaseModel):\n\n    class Config(ConfigDefaults):\n        CLI_EXTRA_OPTIONS = {'max_records': ('-m', '--max-records')}\n\n    input_file: str\n    max_records: int = 10\n\n\nclass BetaOptions(BaseModel):\n\n    class Config(ConfigDefaults):\n        CLI_EXTRA_OPTIONS = {'url': ('-u', '--url'),\n                             'num_retries': ('-n', '--num-retries')}\n\n    url: UrlStr\n    num_retries: int = 3\n\n\ndef printer_runner(opts: T.Any):\n    print(f\"Mock example running with {opts}\")\n    return 0\n\n\ndef to_runner(sx):\n    def example_runner(opts) -> int:\n        print(f\"Mock {sx} example running with {opts}\")\n        return 0\n    return example_runner\n\n\ndef to_subparser_example():\n\n    return {\n        'alpha': SubParser(AlphaOptions, to_runner(\"Alpha\"), \"Alpha SP Description\"),\n        'beta': SubParser(BetaOptions, to_runner(\"Beta\"), \"Beta SP Description\")}\n\n\nif __name__ == \"__main__\":\n    run_sp_and_exit(to_subparser_example(), description=__doc__, version='0.1.0')\n\n```\n\n# Limitations\n\n- Currently **only support flat \"simple\" types** (e.g., floats, ints, strings, boolean). There's no current support for `List[T]` or nested dicts.\n- Leverages [argparse](https://docs.python.org/3/library/argparse.html#module-argparse) underneath the hood and argparse is a bit thorny of an API to build on top of.\n\n\n### To Improve\n\n- Better type descriptions in help\n- Better communication of required \"options\" in help\n- Add load from JSON file\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/mpkocher/pydantic-cli", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pydantic-cli", "package_url": "https://pypi.org/project/pydantic-cli/", "platform": "", "project_url": "https://pypi.org/project/pydantic-cli/", "project_urls": {"Homepage": "http://github.com/mpkocher/pydantic-cli"}, "release_url": "https://pypi.org/project/pydantic-cli/0.4.0/", "requires_dist": null, "requires_python": "", "summary": "Turn Pydantic defined Data Models into CLI Tools", "version": "0.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Pydantic Commandline Tool Interface</h1>\n<p>Turn Pydantic defined Data Models into CLI Tools!</p>\n<h2>Features</h2>\n<ol>\n<li>Schema driven interfaces built on top of <a href=\"https://github.com/samuelcolvin/pydantic\" rel=\"nofollow\">Pydantic</a></li>\n<li>Validation is performed in a single location as defined by Pydantic's validation model</li>\n<li>CLI parsing is only structurally validating that the args or optional arguments are provided</li>\n<li>Clear interface between the CLI and your application code</li>\n<li>Easy to test (due to reasons defined above)</li>\n</ol>\n<h2>Quick Start</h2>\n<p>To create a commandline tool that takes an input file and max number of records to process as positional arguments:</p>\n<pre>my-tool /path/to/file.txt <span class=\"m\">1234</span>\n</pre>\n<p>This requires two components.</p>\n<ul>\n<li>Create Pydantic Data Model of type <code>T</code></li>\n<li>write a function that takes an instance of <code>T</code> and returns the exit code (e.g., 0 for success, non-zero for failure).</li>\n<li>pass the <code>T</code> into to the <code>to_runner</code> function, or the <code>run_and_exit</code></li>\n</ul>\n<p>Explicit example show below.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">pydantic</span> <span class=\"kn\">import</span> <span class=\"n\">BaseModel</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pydantic_cli</span> <span class=\"kn\">import</span> <span class=\"n\">run_and_exit</span><span class=\"p\">,</span> <span class=\"n\">to_runner</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MinOptions</span><span class=\"p\">(</span><span class=\"n\">BaseModel</span><span class=\"p\">):</span>\n    <span class=\"n\">input_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">max_records</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">example_runner</span><span class=\"p\">(</span><span class=\"n\">opts</span><span class=\"p\">:</span> <span class=\"n\">MinOptions</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"Mock example running with options </span><span class=\"si\">{</span><span class=\"n\">opts</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"c1\"># to_runner will return a function that takes the args list to run and </span>\n    <span class=\"c1\"># will return an integer exit code</span>\n    <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"n\">to_runner</span><span class=\"p\">(</span><span class=\"n\">MinOptions</span><span class=\"p\">,</span> <span class=\"n\">example_runner</span><span class=\"p\">,</span> <span class=\"n\">version</span><span class=\"o\">=</span><span class=\"s1\">'0.1.0'</span><span class=\"p\">)(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:]))</span>\n</pre>\n<p>Or to implicitly use <code>sys.argv[1:]</code>, call can leverage <code>run_and_exit</code> (<code>to_runner</code> is also useful for testing).</p>\n<pre><span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">run_and_exit</span><span class=\"p\">(</span><span class=\"n\">MinOptions</span><span class=\"p\">,</span> <span class=\"n\">example_runner</span><span class=\"p\">,</span> <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s2\">\"My Tool Description\"</span><span class=\"p\">,</span> <span class=\"n\">version</span><span class=\"o\">=</span><span class=\"s1\">'0.1.0'</span><span class=\"p\">)</span>\n</pre>\n<p>If the data model has default values, the commandline argument with be optional and the CLI arg will be prefixed with `--'.</p>\n<p>For example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pydantic</span> <span class=\"kn\">import</span> <span class=\"n\">BaseModel</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pydantic_cli</span> <span class=\"kn\">import</span> <span class=\"n\">run_and_exit</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MinOptions</span><span class=\"p\">(</span><span class=\"n\">BaseModel</span><span class=\"p\">):</span>\n    <span class=\"n\">input_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">max_records</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">example_runner</span><span class=\"p\">(</span><span class=\"n\">opts</span><span class=\"p\">:</span> <span class=\"n\">MinOptions</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"Mock example running with options </span><span class=\"si\">{</span><span class=\"n\">opts</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">run_and_exit</span><span class=\"p\">(</span><span class=\"n\">MinOptions</span><span class=\"p\">,</span> <span class=\"n\">example_runner</span><span class=\"p\">,</span> <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s2\">\"My Tool Description\"</span><span class=\"p\">,</span> <span class=\"n\">version</span><span class=\"o\">=</span><span class=\"s1\">'0.1.0'</span><span class=\"p\">)</span>\n</pre>\n<p>Will create a tool with <code>my-tool /path/to/input.txt --max_records 1234</code></p>\n<pre>my-tool /path/to/input.txt --max_records <span class=\"m\">1234</span>\n</pre>\n<p>with <code>--max_records</code> being optional to the commandline interface.</p>\n<p><strong>WARNING</strong>: Boolean values must be communicated explicitly (e.g., <code>--run_training True</code>)</p>\n<p>The <code>--help</code> is quite minimal (due to the lack of metadata), however, verbosely named arguments can often be good enough to communicate the intent of the commandline interface.</p>\n<p>For customization of the CLI args, such as max number of records is <code>-m 1234</code> in the above example, there are two approaches.</p>\n<ul>\n<li>The first is the \"quick\" method that is a minor change to the <code>Config</code> of the Pydantic Data model.</li>\n<li>The second \"schema\" method is to define the metadata in the <a href=\"https://pydantic-docs.helpmanual.io/#schema-creation\" rel=\"nofollow\"><code>Schema</code> model in Pydantic</a></li>\n</ul>\n<h3>Quick Model for Customization</h3>\n<p>We're going to change the usage from <code>my-tool /path/to/file.txt 1234</code> to <code>my-tool /path/to/file.txt -m 1234</code> .</p>\n<p>This only requires adding  <code>CLI_EXTRA_OPTIONS</code> to the Pydantic <code>Config</code>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pydantic</span> <span class=\"kn\">import</span> <span class=\"n\">BaseModel</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MinOptions</span><span class=\"p\">(</span><span class=\"n\">BaseModel</span><span class=\"p\">):</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Config</span><span class=\"p\">:</span>\n        <span class=\"n\">CLI_EXTRA_OPTIONS</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'max_records'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"s1\">'-m'</span><span class=\"p\">,</span> <span class=\"p\">)}</span>\n\n    <span class=\"n\">input_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">max_records</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n</pre>\n<p>You can also override the \"long\" argument. However, <strong>note this is starting to add a new layer of indirection</strong> on top of the schema. (e.g., 'max_records' to '--max-records') that may or may not be useful.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pydantic</span> <span class=\"kn\">import</span> <span class=\"n\">BaseModel</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MinOptions</span><span class=\"p\">(</span><span class=\"n\">BaseModel</span><span class=\"p\">):</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Config</span><span class=\"p\">:</span>\n        <span class=\"n\">CLI_EXTRA_OPTIONS</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'max_records'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"s1\">'-m'</span><span class=\"p\">,</span> <span class=\"s1\">'--max-records'</span><span class=\"p\">)}</span>\n\n    <span class=\"n\">input_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">max_records</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n</pre>\n<h3>Schema Approach</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pydantic</span> <span class=\"kn\">import</span> <span class=\"n\">BaseModel</span><span class=\"p\">,</span> <span class=\"n\">Schema</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Options</span><span class=\"p\">(</span><span class=\"n\">BaseModel</span><span class=\"p\">):</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Config</span><span class=\"p\">:</span>\n        <span class=\"n\">validate_all</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"n\">validate_assignment</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n    <span class=\"n\">input_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"n\">Schema</span><span class=\"p\">(</span>\n        <span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"c1\"># this implicitly means required=True</span>\n        <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s2\">\"Input File\"</span><span class=\"p\">,</span>\n        <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s2\">\"Path to the input file\"</span><span class=\"p\">,</span>\n        <span class=\"n\">required</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">extras</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"cli\"</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"s1\">'-f'</span><span class=\"p\">,</span> <span class=\"s1\">'--input-file'</span><span class=\"p\">)}</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"n\">max_records</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"n\">Schema</span><span class=\"p\">(</span>\n        <span class=\"mi\">123</span><span class=\"p\">,</span>\n        <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s2\">\"Max Records\"</span><span class=\"p\">,</span>\n        <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s2\">\"Max number of records to process\"</span><span class=\"p\">,</span>\n        <span class=\"n\">gt</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"n\">extras</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'cli'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"s1\">'-m'</span><span class=\"p\">,</span> <span class=\"s1\">'--max-records'</span><span class=\"p\">)}</span>\n    <span class=\"p\">)</span>\n</pre>\n<h2>Hooks into the CLI Execution</h2>\n<ul>\n<li>exception handler</li>\n<li>epilogue handler</li>\n</ul>\n<p>Both of these cases can be customized to by passing in a function to the running/execution method.</p>\n<p>The exception handler should handle any logging or writing to stderr as well as mapping the specific exception to non-zero integer exit code.</p>\n<p>For example:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">pydantic_cli</span> <span class=\"kn\">import</span> <span class=\"n\">run_and_exit</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">custom_exception_handler</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n    <span class=\"n\">exception_map</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"ne\">ValueError</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"ne\">IOError</span><span class=\"o\">=</span><span class=\"mi\">7</span><span class=\"p\">)</span>\n    <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stderr</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n    <span class=\"n\">exit_code</span> <span class=\"o\">=</span> <span class=\"n\">exception_map</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">exit_code</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">run_and_exit</span><span class=\"p\">(</span><span class=\"n\">MinOptions</span><span class=\"p\">,</span> <span class=\"n\">example_runner</span><span class=\"p\">,</span> <span class=\"n\">exception_handler</span><span class=\"o\">=</span><span class=\"n\">custom_exception_handler</span><span class=\"p\">)</span>\n</pre>\n<p>Similarly, the post execution hook can be called. This function is <code>Callable[[int, float], None]</code> that is the <code>exit code</code> and <code>program runtime</code> in sec as input.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">pydantic_cli</span> <span class=\"kn\">import</span> <span class=\"n\">run_and_exit</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">custom_epilogue_handler</span><span class=\"p\">(</span><span class=\"n\">exit_code</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">run_time_sec</span><span class=\"p\">:</span><span class=\"nb\">float</span><span class=\"p\">):</span>\n    <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"s2\">\"Success\"</span> <span class=\"k\">if</span> <span class=\"n\">exit_code</span> <span class=\"k\">else</span> <span class=\"s2\">\"Failed\"</span>\n    <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">\"Completed running (</span><span class=\"si\">{</span><span class=\"n\">m</span><span class=\"si\">}</span><span class=\"s2\">) in </span><span class=\"si\">{</span><span class=\"n\">run_time_sec</span><span class=\"si\">:</span><span class=\"s2\">.2f</span><span class=\"si\">}</span><span class=\"s2\"> sec\"</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">run_and_exit</span><span class=\"p\">(</span><span class=\"n\">MinOptions</span><span class=\"p\">,</span> <span class=\"n\">example_runner</span><span class=\"p\">,</span> <span class=\"n\">epilogue_handler</span><span class=\"o\">=</span><span class=\"n\">custom_epilogue_handler</span><span class=\"p\">)</span>\n</pre>\n<h2>SubParsers</h2>\n<p>Defining a subparser to your commandline tool is enabled by creating a container <code>SubParser</code> dict and calling <code>run_sp_and_exit</code></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">typing</span> <span class=\"k\">as</span> <span class=\"nn\">T</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pydantic</span> <span class=\"kn\">import</span> <span class=\"n\">BaseModel</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pydantic.schema</span> <span class=\"kn\">import</span> <span class=\"n\">UrlStr</span>\n\n\n<span class=\"kn\">from</span> <span class=\"nn\">pydantic_cli.examples</span> <span class=\"kn\">import</span> <span class=\"n\">ConfigDefaults</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pydantic_cli</span> <span class=\"kn\">import</span> <span class=\"n\">run_sp_and_exit</span><span class=\"p\">,</span> <span class=\"n\">SubParser</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">AlphaOptions</span><span class=\"p\">(</span><span class=\"n\">BaseModel</span><span class=\"p\">):</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Config</span><span class=\"p\">(</span><span class=\"n\">ConfigDefaults</span><span class=\"p\">):</span>\n        <span class=\"n\">CLI_EXTRA_OPTIONS</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'max_records'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"s1\">'-m'</span><span class=\"p\">,</span> <span class=\"s1\">'--max-records'</span><span class=\"p\">)}</span>\n\n    <span class=\"n\">input_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">max_records</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">BetaOptions</span><span class=\"p\">(</span><span class=\"n\">BaseModel</span><span class=\"p\">):</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Config</span><span class=\"p\">(</span><span class=\"n\">ConfigDefaults</span><span class=\"p\">):</span>\n        <span class=\"n\">CLI_EXTRA_OPTIONS</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'url'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"s1\">'-u'</span><span class=\"p\">,</span> <span class=\"s1\">'--url'</span><span class=\"p\">),</span>\n                             <span class=\"s1\">'num_retries'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"s1\">'-n'</span><span class=\"p\">,</span> <span class=\"s1\">'--num-retries'</span><span class=\"p\">)}</span>\n\n    <span class=\"n\">url</span><span class=\"p\">:</span> <span class=\"n\">UrlStr</span>\n    <span class=\"n\">num_retries</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">printer_runner</span><span class=\"p\">(</span><span class=\"n\">opts</span><span class=\"p\">:</span> <span class=\"n\">T</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"Mock example running with </span><span class=\"si\">{</span><span class=\"n\">opts</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">to_runner</span><span class=\"p\">(</span><span class=\"n\">sx</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">example_runner</span><span class=\"p\">(</span><span class=\"n\">opts</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"Mock </span><span class=\"si\">{</span><span class=\"n\">sx</span><span class=\"si\">}</span><span class=\"s2\"> example running with </span><span class=\"si\">{</span><span class=\"n\">opts</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"mi\">0</span>\n    <span class=\"k\">return</span> <span class=\"n\">example_runner</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">to_subparser_example</span><span class=\"p\">():</span>\n\n    <span class=\"k\">return</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'alpha'</span><span class=\"p\">:</span> <span class=\"n\">SubParser</span><span class=\"p\">(</span><span class=\"n\">AlphaOptions</span><span class=\"p\">,</span> <span class=\"n\">to_runner</span><span class=\"p\">(</span><span class=\"s2\">\"Alpha\"</span><span class=\"p\">),</span> <span class=\"s2\">\"Alpha SP Description\"</span><span class=\"p\">),</span>\n        <span class=\"s1\">'beta'</span><span class=\"p\">:</span> <span class=\"n\">SubParser</span><span class=\"p\">(</span><span class=\"n\">BetaOptions</span><span class=\"p\">,</span> <span class=\"n\">to_runner</span><span class=\"p\">(</span><span class=\"s2\">\"Beta\"</span><span class=\"p\">),</span> <span class=\"s2\">\"Beta SP Description\"</span><span class=\"p\">)}</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">run_sp_and_exit</span><span class=\"p\">(</span><span class=\"n\">to_subparser_example</span><span class=\"p\">(),</span> <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"vm\">__doc__</span><span class=\"p\">,</span> <span class=\"n\">version</span><span class=\"o\">=</span><span class=\"s1\">'0.1.0'</span><span class=\"p\">)</span>\n</pre>\n<h1>Limitations</h1>\n<ul>\n<li>Currently <strong>only support flat \"simple\" types</strong> (e.g., floats, ints, strings, boolean). There's no current support for <code>List[T]</code> or nested dicts.</li>\n<li>Leverages <a href=\"https://docs.python.org/3/library/argparse.html#module-argparse\" rel=\"nofollow\">argparse</a> underneath the hood and argparse is a bit thorny of an API to build on top of.</li>\n</ul>\n<h3>To Improve</h3>\n<ul>\n<li>Better type descriptions in help</li>\n<li>Better communication of required \"options\" in help</li>\n<li>Add load from JSON file</li>\n</ul>\n\n          </div>"}, "last_serial": 5580822, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "b8bbf17b53f66eb0a334f2092962a619", "sha256": "fccc1f78e2699dfbddf750256a9b35daf5203e41cbaf60268cac8341d94bc911"}, "downloads": -1, "filename": "pydantic_cli-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b8bbf17b53f66eb0a334f2092962a619", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6173, "upload_time": "2019-07-24T05:15:01", "upload_time_iso_8601": "2019-07-24T05:15:01.435165Z", "url": "https://files.pythonhosted.org/packages/ae/f8/f7e3a1d726e50d18ef509bd22fac21b072a84d3a350fb2c5d7027c5c22ed/pydantic_cli-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4bbb1cdd5a6e1f462e5bad0f214e6290", "sha256": "1ac6ed28cbd384b42550ecd31e197f29f81d0a0fe36c2896fdfb9a60f5c35f00"}, "downloads": -1, "filename": "pydantic_cli-0.2.0.tar.gz", "has_sig": false, "md5_digest": "4bbb1cdd5a6e1f462e5bad0f214e6290", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5410, "upload_time": "2019-07-24T05:15:03", "upload_time_iso_8601": "2019-07-24T05:15:03.729041Z", "url": "https://files.pythonhosted.org/packages/23/88/ee7d95ccae033c264ea1f49b643019825a9a9a7540664aaa0e2a99ea5d92/pydantic_cli-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "85934490fb1d367c0cfbeb9920cba538", "sha256": "ff4edbf70f525077dab25cec1fe26fe0f08c76ade826d7a87fe9972d5e10e4db"}, "downloads": -1, "filename": "pydantic_cli-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "85934490fb1d367c0cfbeb9920cba538", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6157, "upload_time": "2019-07-24T05:18:07", "upload_time_iso_8601": "2019-07-24T05:18:07.179534Z", "url": "https://files.pythonhosted.org/packages/d0/26/9b4490d60c5991e98c9d1e67e797d55e10ff9fdaa75a8a4582ed3a1d61be/pydantic_cli-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1942bb7de1e87284ceae496d5e881f49", "sha256": "c6bb59bfe67189fde4e60863deea34c9a040a987f646b502dde58473feca38df"}, "downloads": -1, "filename": "pydantic_cli-0.3.0.tar.gz", "has_sig": false, "md5_digest": "1942bb7de1e87284ceae496d5e881f49", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5395, "upload_time": "2019-07-24T05:18:09", "upload_time_iso_8601": "2019-07-24T05:18:09.226729Z", "url": "https://files.pythonhosted.org/packages/b3/10/d17c49c07bca8303b6f02036b2b70f3547c79a4adfb252c5295c189f22f1/pydantic_cli-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "25bd869826500783f43d3b45391118af", "sha256": "4d3858d98452e86dc805814a358680aee79d37709e65ae260d2dd217c45d9049"}, "downloads": -1, "filename": "pydantic_cli-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "25bd869826500783f43d3b45391118af", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7250, "upload_time": "2019-07-25T02:13:04", "upload_time_iso_8601": "2019-07-25T02:13:04.860403Z", "url": "https://files.pythonhosted.org/packages/7e/28/4666e5300aa961503af13dd0b9e6f0ac763bdfb1505c828440ff3e1559ca/pydantic_cli-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f96e21a0ada3cb54a8c6b54e2a8f4059", "sha256": "3af38fa489adc32b3b8e7f84873543b5c53a3069e47c7a53d48e32b76d2b0107"}, "downloads": -1, "filename": "pydantic_cli-0.4.0.tar.gz", "has_sig": false, "md5_digest": "f96e21a0ada3cb54a8c6b54e2a8f4059", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6647, "upload_time": "2019-07-25T02:13:06", "upload_time_iso_8601": "2019-07-25T02:13:06.317806Z", "url": "https://files.pythonhosted.org/packages/23/ad/3935cab35b92a29b099e30b2cb450b08085968b711b978b49cb181684f1b/pydantic_cli-0.4.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "25bd869826500783f43d3b45391118af", "sha256": "4d3858d98452e86dc805814a358680aee79d37709e65ae260d2dd217c45d9049"}, "downloads": -1, "filename": "pydantic_cli-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "25bd869826500783f43d3b45391118af", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7250, "upload_time": "2019-07-25T02:13:04", "upload_time_iso_8601": "2019-07-25T02:13:04.860403Z", "url": "https://files.pythonhosted.org/packages/7e/28/4666e5300aa961503af13dd0b9e6f0ac763bdfb1505c828440ff3e1559ca/pydantic_cli-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f96e21a0ada3cb54a8c6b54e2a8f4059", "sha256": "3af38fa489adc32b3b8e7f84873543b5c53a3069e47c7a53d48e32b76d2b0107"}, "downloads": -1, "filename": "pydantic_cli-0.4.0.tar.gz", "has_sig": false, "md5_digest": "f96e21a0ada3cb54a8c6b54e2a8f4059", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6647, "upload_time": "2019-07-25T02:13:06", "upload_time_iso_8601": "2019-07-25T02:13:06.317806Z", "url": "https://files.pythonhosted.org/packages/23/ad/3935cab35b92a29b099e30b2cb450b08085968b711b978b49cb181684f1b/pydantic_cli-0.4.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:07:27 2020"}