{"info": {"author": "Rauli Kaksonen", "author_email": "rauli.kaksonen@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Line multiplexer - linemux\n\nThe command 'linemux' is a simple tool for splitting a file (or piped data)\ninto different files line-by-line by a *key*.\nThe key is a portion of the line from the beginning, determined by a regexp.\n\nThe command is invoked like this:\n```\n$ linemux [options] [input-file]\n```\n\nSome options are discussed below, full list is available by option `-h`.\nWhen input file is omitted, stdin is read.\n\n## Installation\n\nLinemux is a Python 3.6+ application and will be available from PyPI.\nIt should work where Python 3 works.\nHowever, currently you must install it from *gitlab*:\n\n    % pip3 install git+https://gitlab.com/cincan/linemux\n\nUse your favorite Python module installation strategy.\n\n## Details\n\nThe name of the created file is the key value, but some characters are filtered away.\nAccepted characters are \"a\" - \"z\", \"A\" - \"Z\", \"0\" - \"9\", \"_\", \"-\", and \".\".\nIf many keys map to same file name, the a postfix is added to the file name.\n\nThe default key is \"`.*`\", so the whole line is the key.\nThis effectively finds all unique lines and creates a file for each of them.\nThe file content is the line (as many times as encountered).\nYou can change the key regexp by `-k` option (Python regexp syntax).\n\nBy default the new files are placed to a directory \"linemux\".\nIf there already are files in this directory (e.g. from earlier linemux run),\nthe results are undefined.\nThe output directory is changed by option `-d`.\n\nWhen running the command prints out each created file name.\n\n## Example I\n\nConsider the input file \"sample.urls\" with content:\n```\nhttps://www.oulu.fi\nhttps://www.google.com\nhttps://www.oulu.fi\nhttps://www.oulu.fi/\nhttp://www.oulu.fi/university/\nhttps://www.oulu.fi/\nhttps://www.google.com```\n```\n\nYou can create a file for each unique URL like this:\n\n```\n$ linemux sample.urls\n```\n\nThe resulting directory structure is:\n```\n$ find .\n./linemux/httpswww.oulu.fi\n./linemux/httpswww.google.com\n./linemux/httpswww.oulu.fi_2\n./linemux/httpwww.oulu.fiuniversity\n```\n\n## Example II\n\nOn this example, we pick a key from middle of the processed line.\nAs linemux expects key to be the first thing in the line, we use\n`awk` to prepare the line for linemux.\n\nThe example data we use is a memory dump process list\nfrom command line tool `volatility`\nof the [Volatility Foundation](https://www.volatilityfoundation.org/).\nIt is process list with data columns separated by vertical bars (pipes):\n\n```\n>|0x83d3ac58|System|4|0|81|516|-1|0|2019-10-28 15:47:28 UTC+0000|\n>|0x844271a0|smss.exe|252|4|3|29|-1|0|2019-10-28 15:47:28 UTC+0000|\n>|0x849a77b0|csrss.exe|328|320|8|527|0|0|2019-10-28 15:47:30 UTC+0000|\n...\n```\n\nThe command-line we are using is the following:\n\n```\nawk -F\"|\" '{print $3 \"|\" $0}' process.lst | linemux -k \".+?\\|\" -K\n```\n\nThe awk-part picks 3rd \"|\"-separated column and copies it to first positon.\nThe linemux-part directs stdin by the first column identified by regexp `\".+?\\|\"`.\nThe option `-K` removes the key from output files.\n\nThe result is the process listing divided by 3rd column (process name):\n\n```\n$ find .\n./linemux/lsass.exe\n./linemux/VBoxService.ex\n./linemux/svchost.exe\n./linemux/wininit.exe\n...\n```\n\nFor example the file \"svchost.exe\" could look like this:\n\n```\n$ cat linemux/svchost.exe\n>|0x84a995e0|svchost.exe|584|460|15|371|0|0|2019-10-28 15:47:32 UTC+0000|\n>|0x84ac49d0|svchost.exe|700|460|13|287|0|0|2019-10-28 15:47:32 UTC+0000|\n>|0x84adf6c0|svchost.exe|760|460|21|400|0|0|2019-10-28 15:47:32 UTC+0000|\n>|0x84b0d540|svchost.exe|868|460|23|399|0|0|2019-10-28 15:47:33 UTC+0000|\n>|0x84b1c030|svchost.exe|908|460|24|376|0|0|2019-10-28 15:47:33 UTC+0000|\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/cincan/linemux", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "linemux", "package_url": "https://pypi.org/project/linemux/", "platform": "", "project_url": "https://pypi.org/project/linemux/", "project_urls": {"Homepage": "https://gitlab.com/cincan/linemux"}, "release_url": "https://pypi.org/project/linemux/0.1.0/", "requires_dist": null, "requires_python": ">=3.6", "summary": "File multiplexer", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Line multiplexer - linemux</h1>\n<p>The command 'linemux' is a simple tool for splitting a file (or piped data)\ninto different files line-by-line by a <em>key</em>.\nThe key is a portion of the line from the beginning, determined by a regexp.</p>\n<p>The command is invoked like this:</p>\n<pre><code>$ linemux [options] [input-file]\n</code></pre>\n<p>Some options are discussed below, full list is available by option <code>-h</code>.\nWhen input file is omitted, stdin is read.</p>\n<h2>Installation</h2>\n<p>Linemux is a Python 3.6+ application and will be available from PyPI.\nIt should work where Python 3 works.\nHowever, currently you must install it from <em>gitlab</em>:</p>\n<pre><code>% pip3 install git+https://gitlab.com/cincan/linemux\n</code></pre>\n<p>Use your favorite Python module installation strategy.</p>\n<h2>Details</h2>\n<p>The name of the created file is the key value, but some characters are filtered away.\nAccepted characters are \"a\" - \"z\", \"A\" - \"Z\", \"0\" - \"9\", \"_\", \"-\", and \".\".\nIf many keys map to same file name, the a postfix is added to the file name.</p>\n<p>The default key is \"<code>.*</code>\", so the whole line is the key.\nThis effectively finds all unique lines and creates a file for each of them.\nThe file content is the line (as many times as encountered).\nYou can change the key regexp by <code>-k</code> option (Python regexp syntax).</p>\n<p>By default the new files are placed to a directory \"linemux\".\nIf there already are files in this directory (e.g. from earlier linemux run),\nthe results are undefined.\nThe output directory is changed by option <code>-d</code>.</p>\n<p>When running the command prints out each created file name.</p>\n<h2>Example I</h2>\n<p>Consider the input file \"sample.urls\" with content:</p>\n<pre><code>https://www.oulu.fi\nhttps://www.google.com\nhttps://www.oulu.fi\nhttps://www.oulu.fi/\nhttp://www.oulu.fi/university/\nhttps://www.oulu.fi/\nhttps://www.google.com```\n</code></pre>\n<p>You can create a file for each unique URL like this:</p>\n<pre><code>$ linemux sample.urls\n</code></pre>\n<p>The resulting directory structure is:</p>\n<pre><code>$ find .\n./linemux/httpswww.oulu.fi\n./linemux/httpswww.google.com\n./linemux/httpswww.oulu.fi_2\n./linemux/httpwww.oulu.fiuniversity\n</code></pre>\n<h2>Example II</h2>\n<p>On this example, we pick a key from middle of the processed line.\nAs linemux expects key to be the first thing in the line, we use\n<code>awk</code> to prepare the line for linemux.</p>\n<p>The example data we use is a memory dump process list\nfrom command line tool <code>volatility</code>\nof the <a href=\"https://www.volatilityfoundation.org/\" rel=\"nofollow\">Volatility Foundation</a>.\nIt is process list with data columns separated by vertical bars (pipes):</p>\n<pre><code>&gt;|0x83d3ac58|System|4|0|81|516|-1|0|2019-10-28 15:47:28 UTC+0000|\n&gt;|0x844271a0|smss.exe|252|4|3|29|-1|0|2019-10-28 15:47:28 UTC+0000|\n&gt;|0x849a77b0|csrss.exe|328|320|8|527|0|0|2019-10-28 15:47:30 UTC+0000|\n...\n</code></pre>\n<p>The command-line we are using is the following:</p>\n<pre><code>awk -F\"|\" '{print $3 \"|\" $0}' process.lst | linemux -k \".+?\\|\" -K\n</code></pre>\n<p>The awk-part picks 3rd \"|\"-separated column and copies it to first positon.\nThe linemux-part directs stdin by the first column identified by regexp <code>\".+?\\|\"</code>.\nThe option <code>-K</code> removes the key from output files.</p>\n<p>The result is the process listing divided by 3rd column (process name):</p>\n<pre><code>$ find .\n./linemux/lsass.exe\n./linemux/VBoxService.ex\n./linemux/svchost.exe\n./linemux/wininit.exe\n...\n</code></pre>\n<p>For example the file \"svchost.exe\" could look like this:</p>\n<pre><code>$ cat linemux/svchost.exe\n&gt;|0x84a995e0|svchost.exe|584|460|15|371|0|0|2019-10-28 15:47:32 UTC+0000|\n&gt;|0x84ac49d0|svchost.exe|700|460|13|287|0|0|2019-10-28 15:47:32 UTC+0000|\n&gt;|0x84adf6c0|svchost.exe|760|460|21|400|0|0|2019-10-28 15:47:32 UTC+0000|\n&gt;|0x84b0d540|svchost.exe|868|460|23|399|0|0|2019-10-28 15:47:33 UTC+0000|\n&gt;|0x84b1c030|svchost.exe|908|460|24|376|0|0|2019-10-28 15:47:33 UTC+0000|\n</code></pre>\n\n          </div>"}, "last_serial": 6879241, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "df2915a18eb8f637bcddd5a34b6e6de0", "sha256": "7588875836a7bbf1832cdbeb34f8181982e86dae2c6df4b19b97cd419b42e4b1"}, "downloads": -1, "filename": "linemux-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "df2915a18eb8f637bcddd5a34b6e6de0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5513, "upload_time": "2020-03-25T08:18:31", "upload_time_iso_8601": "2020-03-25T08:18:31.305313Z", "url": "https://files.pythonhosted.org/packages/73/a4/7cc3b9bb88e96c86f5a10a48e29684c7b6f30bd396c7c23d39b40a8b7670/linemux-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "95eb9620cf43c35ced72d0957d79b237", "sha256": "f4dbbca391fec9e883d29c02135b3e9e4b048a8fb160f485a9c3e1606663ae26"}, "downloads": -1, "filename": "linemux-0.1.0.tar.gz", "has_sig": false, "md5_digest": "95eb9620cf43c35ced72d0957d79b237", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5172, "upload_time": "2020-03-25T08:18:33", "upload_time_iso_8601": "2020-03-25T08:18:33.312761Z", "url": "https://files.pythonhosted.org/packages/74/85/f28c785305d69db00e81b45d5c81041ed6b15715bc82217fffefd83c4dea/linemux-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "df2915a18eb8f637bcddd5a34b6e6de0", "sha256": "7588875836a7bbf1832cdbeb34f8181982e86dae2c6df4b19b97cd419b42e4b1"}, "downloads": -1, "filename": "linemux-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "df2915a18eb8f637bcddd5a34b6e6de0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5513, "upload_time": "2020-03-25T08:18:31", "upload_time_iso_8601": "2020-03-25T08:18:31.305313Z", "url": "https://files.pythonhosted.org/packages/73/a4/7cc3b9bb88e96c86f5a10a48e29684c7b6f30bd396c7c23d39b40a8b7670/linemux-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "95eb9620cf43c35ced72d0957d79b237", "sha256": "f4dbbca391fec9e883d29c02135b3e9e4b048a8fb160f485a9c3e1606663ae26"}, "downloads": -1, "filename": "linemux-0.1.0.tar.gz", "has_sig": false, "md5_digest": "95eb9620cf43c35ced72d0957d79b237", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5172, "upload_time": "2020-03-25T08:18:33", "upload_time_iso_8601": "2020-03-25T08:18:33.312761Z", "url": "https://files.pythonhosted.org/packages/74/85/f28c785305d69db00e81b45d5c81041ed6b15715bc82217fffefd83c4dea/linemux-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:45 2020"}