{"info": {"author": "Gilles Fabio", "author_email": "gilles.fabio@gmail.com", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Topic :: Software Development :: Internationalization"], "description": "django-linguist\n===============\n\n.. image:: https://secure.travis-ci.org/ulule/django-linguist.png?branch=master\n    :alt: Build Status\n    :target: http://travis-ci.org/ulule/django-linguist\n\n`django-linguist`_ is a Django_ application for flexible model translations.\n\nHere a few principles that define this application in comparaison to others applications:\n\n* Translations are stored in single one table and you can also use a different one per model\n* No \"one i18n table per model\", say \"goodbye\" to nightmares :)\n* No more painful migrations\n* Not tied to model class names, you are free to use your own identifiers\n* No ORM query hacks, it does not patch anything and it will be easier for you to upgrade your Django\n* No magic, it uses metaclasses and mixins and everything is explicit\n* Dead simple to plug in an existing project\n* Django admin ready\n\nIf you are looking for a \"one-i18n-table-per-model\" way, `django-parler`_ is\nan awesome alternative.\n\nInstallation\n------------\n\n.. code-block:: bash\n\n    $ pip install django-linguist\n\nIn your ``settings.py``, add ``linguist`` to ``INSTALLED_APPS``:\n\n.. code-block:: python\n\n    INSTALLED_APPS = (\n        # Your other apps here\n        'linguist',\n    )\n\nThen synchronize database:\n\n.. code-block:: bash\n\n    # >= Django 1.7\n    $ python manage.py migrate linguist\n\n    # < Django 1.7\n    $ python manage.py syncdb\n\nThat's all.\n\nConfiguration\n-------------\n\nModels\n~~~~~~\n\nIn three steps:\n\n1. Add ``linguist.metaclasses.ModelMeta`` to your model as metaclass\n2. Add ``linguist.mixins.ManagerMixin`` to your model manager\n3. Add ``linguist`` settings in your model's Meta\n\nDon't worry, it's fairly simple:\n\n.. code-block:: python\n\n    from django.db import models\n    from django.utils.six import with_metaclass\n    from django.utils.translation import ugettext_lazy as _\n\n    from linguist.metaclasses import ModelMeta as LinguistMeta\n    from linguist.mixins import ManagerMixin as LinguistManagerMixin\n\n\n    class PostManager(LinguistManagerMixin, models.Manager):\n        pass\n\n\n    class Post(with_metaclass(LinguistMeta, models.Model)):\n        title = models.CharField(max_length=255)\n        body = models.TextField()\n        created_at = models.DateTimeField(auto_now_add=True)\n        objects = PostManager()\n\n        class Meta:\n            verbose_name = _('post')\n            verbose_name_plural = _('posts')\n            linguist = {\n                'identifier': 'can-be-anything-you-want',\n                'fields': ('title', 'body'),\n                'default_language': 'fr',\n            }\n\nThe ``linguist`` meta requires:\n\n* ``identifier``: a unique identifier for your model (can be anything you want)\n* ``fields``: list or tuple of model fields to translate\n\nAnd optionally requires:\n\n* ``default_language``: the default language to use\n* ``default_language_field``: the field that contains the default language to use (see below)\n* ``decider``: the translation model to use instead of the default one (see below)\n\nThat's all. You're ready.\n\nDefault language per instance\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nSometimes, you need to define default language at instance level. Linguist\nsupports this feature via the ``default_language_field`` option. Add a field\nin your model that will store the default language then simply give the field\nname to Linguist.\n\nLet's take an example:\n\n.. code-block:: python\n\n    from django.db import models\n    from django.utils.six import with_metaclass\n    from django.utils.translation import ugettext_lazy as _\n\n    from linguist.metaclasses import ModelMeta as LinguistMeta\n    from linguist.mixins import ManagerMixin as LinguistManagerMixin\n\n\n    class PostManager(LinguistManagerMixin, models.Manager):\n        pass\n\n\n    class Post(with_metaclass(LinguistMeta, models.Model)):\n        title = models.CharField(max_length=255)\n        body = models.TextField()\n        created_at = models.DateTimeField(auto_now_add=True)\n        lang = models.CharField(max_length=5, default='en')\n        objects = PostManager()\n\n        class Meta:\n            verbose_name = _('post')\n            verbose_name_plural = _('posts')\n            linguist = {\n                'identifier': 'can-be-anything-you-want',\n                'fields': ('title', 'body'),\n                'default_language': 'en',\n                'default_language_field': 'lang',\n            }\n\nCustom table for translations\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nBy default, Linguist stores translations into ``linguist.models.Translation``\ntable. So in a single one table. If you need to use another table for a specific\nmodel, Linguist provides a way to override this behavior: use *deciders*.\n\nThat's really easy to implement.\n\nYou can do it in three steps:\n\n* Create a model that inherits from ``linguist.models.base.Translation``\n* Don't forget to define it as concrete (``abstract = False`` in Meta)\n* Give this model to Linguist meta ``decider`` option\n\nThis example will show you the light:\n\n.. code-block:: python\n\n\n    from django.db import models\n    from django.utils.six import with_metaclass\n    from django.utils.translation import ugettext_lazy as _\n\n    from linguist.metaclasses import ModelMeta as LinguistMeta\n    from linguist.mixins import ManagerMixin as LinguistManagerMixin\n    from linguist.models.base import Translation\n\n\n    # Our Post model decider\n    class PostTranslation(Translation):\n        class Meta:\n            abstract = False\n\n\n    class PostManager(LinguistManagerMixin, models.Manager):\n        pass\n\n\n    class Post(with_metaclass(LinguistMeta, models.Model)):\n        title = models.CharField(max_length=255)\n        body = models.TextField()\n        created_at = models.DateTimeField(auto_now_add=True)\n        objects = PostManager()\n\n        class Meta:\n            verbose_name = _('post')\n            verbose_name_plural = _('posts')\n            linguist = {\n                'identifier': 'can-be-anything-you-want',\n                'fields': ('title', 'body'),\n                'default_language': 'fr',\n                'decider': PostTranslation,\n            }\n\ndjango.contrib.admin\n~~~~~~~~~~~~~~~~~~~~\n\nSimply use ``linguist.admin.TranslatableModelAdmin`` class:\n\n.. code-block:: python\n\n    from django.contrib import admin\n    from linguist.admin import TranslatableModelAdmin\n    from .models import Post\n\n\n    class PostAdmin(TranslatableModelAdmin):\n        list_display = ('title', 'body', 'created_at')\n\n    admin.site.register(Post, PostAdmin)\n\n\nBonus! You can display instance's languages in ``list_display`` via the\n``languages_column`` property provided by the admin class:\n\n.. code-block:: python\n\n    from django.contrib import admin\n    from linguist.admin import TranslatableModelAdmin\n    from .models import Post\n\n\n    class PostAdmin(TranslatableModelAdmin):\n        list_display = ('title', 'body', 'languages_column', 'created_at')\n\n    admin.site.register(Post, PostAdmin)\n\nHow it works\n------------\n\nLinguist adds virtual language fields to your models. For the example above, if\nwe have ``en``, ``fr`` and ``it`` in ``settings.LANGUAGES``, it\ndynamically adds the following fields in ``Post`` model:\n\n* ``Post.title_en``\n* ``Post.title_fr``\n* ``Post.title_it``\n* ``Post.body_en``\n* ``Post.body_fr``\n* ``Post.body_it``\n\nThese fields are virtuals. They don't exist in ``Post`` table. There are\nwrappers around ``linguist.Translation`` model. All translations will be stored\nin this table.\n\nWhen you set/get ``post.title``, Linguist will use the current active language\nand will set/get the correct field for this language. For example, if your\ndefault language is English (``en``), then ``Post.title`` will refer to ``post.title_en``.\n\nThe ``ModelMixin`` enhance your model with the following properties and methods:\n\n``instance.linguist_identifier`` (*read-only* property)\n    Your model identifier defined in the related translation class.\n    Shortcut pointing on ``instance._linguist.identifier``.\n\n``instance.default_language`` (*read-write* property)\n    The default language to use.\n    Shortcut pointing on ``instance._linguist.default_language``.\n\n``instance.translatable_fields`` (*read-only* property)\n    Translatable fields defined in the related translation class.\n    Shorcut pointing on ``instance._linguist.fields``.\n\n``instance.available_languages`` (*read-only* property)\n    Available languages for this instance (content translated in these languages).\n\n``instance.cached_translations_count`` (*read-only* property)\n    Returns the number of cached translations. Each time you set a new language\n    and set content on translatable fields, a cache is created for each language\n    and field. It will be used to create ``Translation`` objets at instance saving.\n\n``instance.active_language()``\n    Set the current active language for the instance.\n\n``instance.clear_translations_cache()``\n    Remove all cached translations. Be aware, any content you set will be dropped.\n    So no translation will be created/updated at saving.\n\n.. code-block:: python\n\n    # Let's create a new Post\n    >>> post = Post()\n\n    # Set English content\n    >>> post.activate_language('en')\n    >>> post.title = 'Hello'\n\n    # Now set French content\n    >>> post.activate_language('fr')\n    >>> post.title = 'Bonjour'\n\n    # Be sure everything works as expected for English\n    >>> post.activate_language('en')\n    >>> post.title\n    Hello\n\n    # And now for French\n    >>> post.activate_language('fr')\n    >>> post.title\n    Bonjour\n\n    # Sweet! Save translations!\n    >>> post.save()\n\nPreloading\n----------\n\nTo improve performances, you can preload/prefetch translations.\n\nFor a queryset (your queryset must inherit from Linguist manager/queryset):\n\n.. code-block:: python\n\n    >>> Post.objects.with_translations()\n\nFor a list of objects (all your objects must inherit from Linguist model):\n\n.. code-block:: python\n\n    >>> from linguist.helpers import prefetch_translations\n    >>> posts = list(Post.objects.all())\n    >>> prefetch_translations(posts)\n\nFor an instance (it must inherit from Linguist model):\n\n.. code-block:: python\n\n    >>> post = Post.objects.first()\n    >>> post.prefetch_translations()\n\nAll translations will be cached in instances. Database won't be hit anymore.\n\nThis preloading system takes three parameters:\n\n* ``field_names``: list of translatable field names to filter on\n* ``languages``: list of languages to filter on\n* ``populate_missing``: boolean if you want to populate cache for missing translations (defaults to ``True``)\n* ``chunks_length``: chunk limit for SELECT IN ids for translations\n\nFor example, we only want to prefetch post titles in English without populating missing\ntranslations with an empty string:\n\n.. code-block:: python\n\n    >>> Post.objects.with_translations(field_names=['title'], languages=['en'], populate_missing=False)\n\nIt works the same for:\n\n* QuerySet ``with_translations()``\n* Helper ``prefetch_translations()``\n* Instance method ``prefetch_translations()``\n\n**What does \"populating missing translations\" mean?**\n\nSimple. By default, when you prefetch translations, instances cache will be populated\nwith empty strings for all supported languages (see  ``settings``). For example, if\nyou have ``en``, ``fr`` and ``it`` as supported languages and only have English\ntranslations, if you try to access other languages, an empty string will be returned\nwithout any database hit:\n\n.. code-block:: python\n\n    >>> Post.objects.with_translations()\n    >>> post.title_fr # no database hit here because\n    ''\n\nNow, if you explicitly set ``populate_missing`` to ``False``, if a translation\nis not found, it will be fetched from database.\n\n.. code-block:: python\n\n    >>> Post.objects.with_translations(populate_missing=False)\n    >>> post.title_fr # database hit here\n    ''\n\nDevelopment\n-----------\n\n.. code-block:: bash\n\n    # Don't have pip?\n    $ sudo easy_install pip\n\n    # Don't already have virtualenv?\n    $ sudo pip install virtualenv\n\n    # Clone and install dependencies\n    $ git clone https://github.com/ulule/django-linguist.git\n    $ cd django-linguist\n    $ make devenv\n\n    # Enable virtual environment.\n    $ source .venv/bin/activate\n\n    # Launch tests\n    $ make test\n\n    # Launch example project\n    $ make serve\n\n.. _django-linguist: https://github.com/ulule/django-linguist\n.. _Django: http://djangoproject.com\n.. _django-parler: https://github.com/edoburu/django-parler\n\nCompatibility\n-------------\n\n- python 2.7: Django 1.8, 1.9, 1.10\n- Python 3.4: Django 1.8, 1.9, 1.10\n- Python 3.5: Django 1.8, 1.9, 1.10\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/ulule/django-linguist", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "django-linguist", "package_url": "https://pypi.org/project/django-linguist/", "platform": "", "project_url": "https://pypi.org/project/django-linguist/", "project_urls": {"Homepage": "http://github.com/ulule/django-linguist"}, "release_url": "https://pypi.org/project/django-linguist/0.5.0/", "requires_dist": null, "requires_python": "", "summary": "An application to manage translations in Django models", "version": "0.5.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"http://travis-ci.org/ulule/django-linguist\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9dbe2038ff458e5a5abdb56f14af9c693003d6ac/68747470733a2f2f7365637572652e7472617669732d63692e6f72672f756c756c652f646a616e676f2d6c696e67756973742e706e673f6272616e63683d6d6173746572\"></a>\n<p><a href=\"https://github.com/ulule/django-linguist\" rel=\"nofollow\">django-linguist</a> is a <a href=\"http://djangoproject.com\" rel=\"nofollow\">Django</a> application for flexible model translations.</p>\n<p>Here a few principles that define this application in comparaison to others applications:</p>\n<ul>\n<li>Translations are stored in single one table and you can also use a different one per model</li>\n<li>No \u201cone i18n table per model\u201d, say \u201cgoodbye\u201d to nightmares :)</li>\n<li>No more painful migrations</li>\n<li>Not tied to model class names, you are free to use your own identifiers</li>\n<li>No ORM query hacks, it does not patch anything and it will be easier for you to upgrade your Django</li>\n<li>No magic, it uses metaclasses and mixins and everything is explicit</li>\n<li>Dead simple to plug in an existing project</li>\n<li>Django admin ready</li>\n</ul>\n<p>If you are looking for a \u201cone-i18n-table-per-model\u201d way, <a href=\"https://github.com/edoburu/django-parler\" rel=\"nofollow\">django-parler</a> is\nan awesome alternative.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>$ pip install django-linguist\n</pre>\n<p>In your <tt>settings.py</tt>, add <tt>linguist</tt> to <tt>INSTALLED_APPS</tt>:</p>\n<pre><span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"c1\"># Your other apps here</span>\n    <span class=\"s1\">'linguist'</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Then synchronize database:</p>\n<pre><span class=\"c1\"># &gt;= Django 1.7\n</span>$ python manage.py migrate linguist\n\n<span class=\"c1\"># &lt; Django 1.7\n</span>$ python manage.py syncdb\n</pre>\n<p>That\u2019s all.</p>\n</div>\n<div id=\"configuration\">\n<h2>Configuration</h2>\n<div id=\"models\">\n<h3>Models</h3>\n<p>In three steps:</p>\n<ol>\n<li>Add <tt>linguist.metaclasses.ModelMeta</tt> to your model as metaclass</li>\n<li>Add <tt>linguist.mixins.ManagerMixin</tt> to your model manager</li>\n<li>Add <tt>linguist</tt> settings in your model\u2019s Meta</li>\n</ol>\n<p>Don\u2019t worry, it\u2019s fairly simple:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.six</span> <span class=\"kn\">import</span> <span class=\"n\">with_metaclass</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.translation</span> <span class=\"kn\">import</span> <span class=\"n\">ugettext_lazy</span> <span class=\"k\">as</span> <span class=\"n\">_</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">linguist.metaclasses</span> <span class=\"kn\">import</span> <span class=\"n\">ModelMeta</span> <span class=\"k\">as</span> <span class=\"n\">LinguistMeta</span>\n<span class=\"kn\">from</span> <span class=\"nn\">linguist.mixins</span> <span class=\"kn\">import</span> <span class=\"n\">ManagerMixin</span> <span class=\"k\">as</span> <span class=\"n\">LinguistManagerMixin</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">PostManager</span><span class=\"p\">(</span><span class=\"n\">LinguistManagerMixin</span><span class=\"p\">,</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Manager</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Post</span><span class=\"p\">(</span><span class=\"n\">with_metaclass</span><span class=\"p\">(</span><span class=\"n\">LinguistMeta</span><span class=\"p\">,</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">)):</span>\n    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">255</span><span class=\"p\">)</span>\n    <span class=\"n\">body</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">TextField</span><span class=\"p\">()</span>\n    <span class=\"n\">created_at</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">DateTimeField</span><span class=\"p\">(</span><span class=\"n\">auto_now_add</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">objects</span> <span class=\"o\">=</span> <span class=\"n\">PostManager</span><span class=\"p\">()</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">verbose_name</span> <span class=\"o\">=</span> <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s1\">'post'</span><span class=\"p\">)</span>\n        <span class=\"n\">verbose_name_plural</span> <span class=\"o\">=</span> <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s1\">'posts'</span><span class=\"p\">)</span>\n        <span class=\"n\">linguist</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'identifier'</span><span class=\"p\">:</span> <span class=\"s1\">'can-be-anything-you-want'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'fields'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"s1\">'title'</span><span class=\"p\">,</span> <span class=\"s1\">'body'</span><span class=\"p\">),</span>\n            <span class=\"s1\">'default_language'</span><span class=\"p\">:</span> <span class=\"s1\">'fr'</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n</pre>\n<p>The <tt>linguist</tt> meta requires:</p>\n<ul>\n<li><tt>identifier</tt>: a unique identifier for your model (can be anything you want)</li>\n<li><tt>fields</tt>: list or tuple of model fields to translate</li>\n</ul>\n<p>And optionally requires:</p>\n<ul>\n<li><tt>default_language</tt>: the default language to use</li>\n<li><tt>default_language_field</tt>: the field that contains the default language to use (see below)</li>\n<li><tt>decider</tt>: the translation model to use instead of the default one (see below)</li>\n</ul>\n<p>That\u2019s all. You\u2019re ready.</p>\n</div>\n<div id=\"default-language-per-instance\">\n<h3>Default language per instance</h3>\n<p>Sometimes, you need to define default language at instance level. Linguist\nsupports this feature via the <tt>default_language_field</tt> option. Add a field\nin your model that will store the default language then simply give the field\nname to Linguist.</p>\n<p>Let\u2019s take an example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.six</span> <span class=\"kn\">import</span> <span class=\"n\">with_metaclass</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.translation</span> <span class=\"kn\">import</span> <span class=\"n\">ugettext_lazy</span> <span class=\"k\">as</span> <span class=\"n\">_</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">linguist.metaclasses</span> <span class=\"kn\">import</span> <span class=\"n\">ModelMeta</span> <span class=\"k\">as</span> <span class=\"n\">LinguistMeta</span>\n<span class=\"kn\">from</span> <span class=\"nn\">linguist.mixins</span> <span class=\"kn\">import</span> <span class=\"n\">ManagerMixin</span> <span class=\"k\">as</span> <span class=\"n\">LinguistManagerMixin</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">PostManager</span><span class=\"p\">(</span><span class=\"n\">LinguistManagerMixin</span><span class=\"p\">,</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Manager</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Post</span><span class=\"p\">(</span><span class=\"n\">with_metaclass</span><span class=\"p\">(</span><span class=\"n\">LinguistMeta</span><span class=\"p\">,</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">)):</span>\n    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">255</span><span class=\"p\">)</span>\n    <span class=\"n\">body</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">TextField</span><span class=\"p\">()</span>\n    <span class=\"n\">created_at</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">DateTimeField</span><span class=\"p\">(</span><span class=\"n\">auto_now_add</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">lang</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s1\">'en'</span><span class=\"p\">)</span>\n    <span class=\"n\">objects</span> <span class=\"o\">=</span> <span class=\"n\">PostManager</span><span class=\"p\">()</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">verbose_name</span> <span class=\"o\">=</span> <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s1\">'post'</span><span class=\"p\">)</span>\n        <span class=\"n\">verbose_name_plural</span> <span class=\"o\">=</span> <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s1\">'posts'</span><span class=\"p\">)</span>\n        <span class=\"n\">linguist</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'identifier'</span><span class=\"p\">:</span> <span class=\"s1\">'can-be-anything-you-want'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'fields'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"s1\">'title'</span><span class=\"p\">,</span> <span class=\"s1\">'body'</span><span class=\"p\">),</span>\n            <span class=\"s1\">'default_language'</span><span class=\"p\">:</span> <span class=\"s1\">'en'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'default_language_field'</span><span class=\"p\">:</span> <span class=\"s1\">'lang'</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n</pre>\n</div>\n<div id=\"custom-table-for-translations\">\n<h3>Custom table for translations</h3>\n<p>By default, Linguist stores translations into <tt>linguist.models.Translation</tt>\ntable. So in a single one table. If you need to use another table for a specific\nmodel, Linguist provides a way to override this behavior: use <em>deciders</em>.</p>\n<p>That\u2019s really easy to implement.</p>\n<p>You can do it in three steps:</p>\n<ul>\n<li>Create a model that inherits from <tt>linguist.models.base.Translation</tt></li>\n<li>Don\u2019t forget to define it as concrete (<tt>abstract = False</tt> in Meta)</li>\n<li>Give this model to Linguist meta <tt>decider</tt> option</li>\n</ul>\n<p>This example will show you the light:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.six</span> <span class=\"kn\">import</span> <span class=\"n\">with_metaclass</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.translation</span> <span class=\"kn\">import</span> <span class=\"n\">ugettext_lazy</span> <span class=\"k\">as</span> <span class=\"n\">_</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">linguist.metaclasses</span> <span class=\"kn\">import</span> <span class=\"n\">ModelMeta</span> <span class=\"k\">as</span> <span class=\"n\">LinguistMeta</span>\n<span class=\"kn\">from</span> <span class=\"nn\">linguist.mixins</span> <span class=\"kn\">import</span> <span class=\"n\">ManagerMixin</span> <span class=\"k\">as</span> <span class=\"n\">LinguistManagerMixin</span>\n<span class=\"kn\">from</span> <span class=\"nn\">linguist.models.base</span> <span class=\"kn\">import</span> <span class=\"n\">Translation</span>\n\n\n<span class=\"c1\"># Our Post model decider</span>\n<span class=\"k\">class</span> <span class=\"nc\">PostTranslation</span><span class=\"p\">(</span><span class=\"n\">Translation</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">abstract</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">PostManager</span><span class=\"p\">(</span><span class=\"n\">LinguistManagerMixin</span><span class=\"p\">,</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Manager</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Post</span><span class=\"p\">(</span><span class=\"n\">with_metaclass</span><span class=\"p\">(</span><span class=\"n\">LinguistMeta</span><span class=\"p\">,</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">)):</span>\n    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">255</span><span class=\"p\">)</span>\n    <span class=\"n\">body</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">TextField</span><span class=\"p\">()</span>\n    <span class=\"n\">created_at</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">DateTimeField</span><span class=\"p\">(</span><span class=\"n\">auto_now_add</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">objects</span> <span class=\"o\">=</span> <span class=\"n\">PostManager</span><span class=\"p\">()</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">verbose_name</span> <span class=\"o\">=</span> <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s1\">'post'</span><span class=\"p\">)</span>\n        <span class=\"n\">verbose_name_plural</span> <span class=\"o\">=</span> <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s1\">'posts'</span><span class=\"p\">)</span>\n        <span class=\"n\">linguist</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'identifier'</span><span class=\"p\">:</span> <span class=\"s1\">'can-be-anything-you-want'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'fields'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"s1\">'title'</span><span class=\"p\">,</span> <span class=\"s1\">'body'</span><span class=\"p\">),</span>\n            <span class=\"s1\">'default_language'</span><span class=\"p\">:</span> <span class=\"s1\">'fr'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'decider'</span><span class=\"p\">:</span> <span class=\"n\">PostTranslation</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n</pre>\n</div>\n<div id=\"django-contrib-admin\">\n<h3>django.contrib.admin</h3>\n<p>Simply use <tt>linguist.admin.TranslatableModelAdmin</tt> class:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.contrib</span> <span class=\"kn\">import</span> <span class=\"n\">admin</span>\n<span class=\"kn\">from</span> <span class=\"nn\">linguist.admin</span> <span class=\"kn\">import</span> <span class=\"n\">TranslatableModelAdmin</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.models</span> <span class=\"kn\">import</span> <span class=\"n\">Post</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">PostAdmin</span><span class=\"p\">(</span><span class=\"n\">TranslatableModelAdmin</span><span class=\"p\">):</span>\n    <span class=\"n\">list_display</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">'title'</span><span class=\"p\">,</span> <span class=\"s1\">'body'</span><span class=\"p\">,</span> <span class=\"s1\">'created_at'</span><span class=\"p\">)</span>\n\n<span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">site</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">Post</span><span class=\"p\">,</span> <span class=\"n\">PostAdmin</span><span class=\"p\">)</span>\n</pre>\n<p>Bonus! You can display instance\u2019s languages in <tt>list_display</tt> via the\n<tt>languages_column</tt> property provided by the admin class:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.contrib</span> <span class=\"kn\">import</span> <span class=\"n\">admin</span>\n<span class=\"kn\">from</span> <span class=\"nn\">linguist.admin</span> <span class=\"kn\">import</span> <span class=\"n\">TranslatableModelAdmin</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.models</span> <span class=\"kn\">import</span> <span class=\"n\">Post</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">PostAdmin</span><span class=\"p\">(</span><span class=\"n\">TranslatableModelAdmin</span><span class=\"p\">):</span>\n    <span class=\"n\">list_display</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">'title'</span><span class=\"p\">,</span> <span class=\"s1\">'body'</span><span class=\"p\">,</span> <span class=\"s1\">'languages_column'</span><span class=\"p\">,</span> <span class=\"s1\">'created_at'</span><span class=\"p\">)</span>\n\n<span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">site</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">Post</span><span class=\"p\">,</span> <span class=\"n\">PostAdmin</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n<div id=\"how-it-works\">\n<h2>How it works</h2>\n<p>Linguist adds virtual language fields to your models. For the example above, if\nwe have <tt>en</tt>, <tt>fr</tt> and <tt>it</tt> in <tt>settings.LANGUAGES</tt>, it\ndynamically adds the following fields in <tt>Post</tt> model:</p>\n<ul>\n<li><tt>Post.title_en</tt></li>\n<li><tt>Post.title_fr</tt></li>\n<li><tt>Post.title_it</tt></li>\n<li><tt>Post.body_en</tt></li>\n<li><tt>Post.body_fr</tt></li>\n<li><tt>Post.body_it</tt></li>\n</ul>\n<p>These fields are virtuals. They don\u2019t exist in <tt>Post</tt> table. There are\nwrappers around <tt>linguist.Translation</tt> model. All translations will be stored\nin this table.</p>\n<p>When you set/get <tt>post.title</tt>, Linguist will use the current active language\nand will set/get the correct field for this language. For example, if your\ndefault language is English (<tt>en</tt>), then <tt>Post.title</tt> will refer to <tt>post.title_en</tt>.</p>\n<p>The <tt>ModelMixin</tt> enhance your model with the following properties and methods:</p>\n<dl>\n<dt><tt>instance.linguist_identifier</tt> (<em>read-only</em> property)</dt>\n<dd>Your model identifier defined in the related translation class.\nShortcut pointing on <tt>instance._linguist.identifier</tt>.</dd>\n<dt><tt>instance.default_language</tt> (<em>read-write</em> property)</dt>\n<dd>The default language to use.\nShortcut pointing on <tt>instance._linguist.default_language</tt>.</dd>\n<dt><tt>instance.translatable_fields</tt> (<em>read-only</em> property)</dt>\n<dd>Translatable fields defined in the related translation class.\nShorcut pointing on <tt>instance._linguist.fields</tt>.</dd>\n<dt><tt>instance.available_languages</tt> (<em>read-only</em> property)</dt>\n<dd>Available languages for this instance (content translated in these languages).</dd>\n<dt><tt>instance.cached_translations_count</tt> (<em>read-only</em> property)</dt>\n<dd>Returns the number of cached translations. Each time you set a new language\nand set content on translatable fields, a cache is created for each language\nand field. It will be used to create <tt>Translation</tt> objets at instance saving.</dd>\n<dt><tt>instance.active_language()</tt></dt>\n<dd>Set the current active language for the instance.</dd>\n<dt><tt>instance.clear_translations_cache()</tt></dt>\n<dd>Remove all cached translations. Be aware, any content you set will be dropped.\nSo no translation will be created/updated at saving.</dd>\n</dl>\n<pre><span class=\"c1\"># Let's create a new Post</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">post</span> <span class=\"o\">=</span> <span class=\"n\">Post</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Set English content</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">post</span><span class=\"o\">.</span><span class=\"n\">activate_language</span><span class=\"p\">(</span><span class=\"s1\">'en'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">post</span><span class=\"o\">.</span><span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"s1\">'Hello'</span>\n\n<span class=\"c1\"># Now set French content</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">post</span><span class=\"o\">.</span><span class=\"n\">activate_language</span><span class=\"p\">(</span><span class=\"s1\">'fr'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">post</span><span class=\"o\">.</span><span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"s1\">'Bonjour'</span>\n\n<span class=\"c1\"># Be sure everything works as expected for English</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">post</span><span class=\"o\">.</span><span class=\"n\">activate_language</span><span class=\"p\">(</span><span class=\"s1\">'en'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">post</span><span class=\"o\">.</span><span class=\"n\">title</span>\n<span class=\"n\">Hello</span>\n\n<span class=\"c1\"># And now for French</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">post</span><span class=\"o\">.</span><span class=\"n\">activate_language</span><span class=\"p\">(</span><span class=\"s1\">'fr'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">post</span><span class=\"o\">.</span><span class=\"n\">title</span>\n<span class=\"n\">Bonjour</span>\n\n<span class=\"c1\"># Sweet! Save translations!</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">post</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"preloading\">\n<h2>Preloading</h2>\n<p>To improve performances, you can preload/prefetch translations.</p>\n<p>For a queryset (your queryset must inherit from Linguist manager/queryset):</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">with_translations</span><span class=\"p\">()</span>\n</pre>\n<p>For a list of objects (all your objects must inherit from Linguist model):</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">linguist.helpers</span> <span class=\"kn\">import</span> <span class=\"n\">prefetch_translations</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">posts</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">())</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">prefetch_translations</span><span class=\"p\">(</span><span class=\"n\">posts</span><span class=\"p\">)</span>\n</pre>\n<p>For an instance (it must inherit from Linguist model):</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">post</span> <span class=\"o\">=</span> <span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">post</span><span class=\"o\">.</span><span class=\"n\">prefetch_translations</span><span class=\"p\">()</span>\n</pre>\n<p>All translations will be cached in instances. Database won\u2019t be hit anymore.</p>\n<p>This preloading system takes three parameters:</p>\n<ul>\n<li><tt>field_names</tt>: list of translatable field names to filter on</li>\n<li><tt>languages</tt>: list of languages to filter on</li>\n<li><tt>populate_missing</tt>: boolean if you want to populate cache for missing translations (defaults to <tt>True</tt>)</li>\n<li><tt>chunks_length</tt>: chunk limit for SELECT IN ids for translations</li>\n</ul>\n<p>For example, we only want to prefetch post titles in English without populating missing\ntranslations with an empty string:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">with_translations</span><span class=\"p\">(</span><span class=\"n\">field_names</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'title'</span><span class=\"p\">],</span> <span class=\"n\">languages</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'en'</span><span class=\"p\">],</span> <span class=\"n\">populate_missing</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n<p>It works the same for:</p>\n<ul>\n<li>QuerySet <tt>with_translations()</tt></li>\n<li>Helper <tt>prefetch_translations()</tt></li>\n<li>Instance method <tt>prefetch_translations()</tt></li>\n</ul>\n<p><strong>What does \u201cpopulating missing translations\u201d mean?</strong></p>\n<p>Simple. By default, when you prefetch translations, instances cache will be populated\nwith empty strings for all supported languages (see  <tt>settings</tt>). For example, if\nyou have <tt>en</tt>, <tt>fr</tt> and <tt>it</tt> as supported languages and only have English\ntranslations, if you try to access other languages, an empty string will be returned\nwithout any database hit:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">with_translations</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">post</span><span class=\"o\">.</span><span class=\"n\">title_fr</span> <span class=\"c1\"># no database hit here because</span>\n<span class=\"s1\">''</span>\n</pre>\n<p>Now, if you explicitly set <tt>populate_missing</tt> to <tt>False</tt>, if a translation\nis not found, it will be fetched from database.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">with_translations</span><span class=\"p\">(</span><span class=\"n\">populate_missing</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">post</span><span class=\"o\">.</span><span class=\"n\">title_fr</span> <span class=\"c1\"># database hit here</span>\n<span class=\"s1\">''</span>\n</pre>\n</div>\n<div id=\"development\">\n<h2>Development</h2>\n<pre><span class=\"c1\"># Don't have pip?\n</span>$ sudo easy_install pip\n\n<span class=\"c1\"># Don't already have virtualenv?\n</span>$ sudo pip install virtualenv\n\n<span class=\"c1\"># Clone and install dependencies\n</span>$ git clone https://github.com/ulule/django-linguist.git\n$ <span class=\"nb\">cd</span> django-linguist\n$ make devenv\n\n<span class=\"c1\"># Enable virtual environment.\n</span>$ <span class=\"nb\">source</span> .venv/bin/activate\n\n<span class=\"c1\"># Launch tests\n</span>$ make <span class=\"nb\">test</span>\n\n<span class=\"c1\"># Launch example project\n</span>$ make serve\n</pre>\n</div>\n<div id=\"compatibility\">\n<h2>Compatibility</h2>\n<ul>\n<li>python 2.7: Django 1.8, 1.9, 1.10</li>\n<li>Python 3.4: Django 1.8, 1.9, 1.10</li>\n<li>Python 3.5: Django 1.8, 1.9, 1.10</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 6374724, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "e41ca6d8ef8330c57be5da6e8dfc3044", "sha256": "369158aaf616e9f63b4982f65913b59c1596bc25a75fd688aeeed593e8da403e"}, "downloads": -1, "filename": "django-linguist-0.1.0.tar.gz", "has_sig": true, "md5_digest": "e41ca6d8ef8330c57be5da6e8dfc3044", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23812, "upload_time": "2015-03-11T14:53:28", "upload_time_iso_8601": "2015-03-11T14:53:28.418789Z", "url": "https://files.pythonhosted.org/packages/8f/9f/9989c57edd9387ccd3f3976b1a496b8684a0070a26e7f18d1feb3f2ee182/django-linguist-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "62d4821ddea8999196dafa95c3a7ae5a", "sha256": "9299bb9b34c823edb154da770e1ff021196277f1a9caa1c596740ebf93e180bb"}, "downloads": -1, "filename": "django-linguist-0.1.1.tar.gz", "has_sig": true, "md5_digest": "62d4821ddea8999196dafa95c3a7ae5a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23262, "upload_time": "2015-04-02T15:42:17", "upload_time_iso_8601": "2015-04-02T15:42:17.170262Z", "url": "https://files.pythonhosted.org/packages/ee/9c/fa29569de2e5a4de2580d9b0ee3c01942d10d7e9a8c8fa5d32eb541139fe/django-linguist-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "662ede317c4ecb45e023a89545f3bd2f", "sha256": "34563818714a79ab353fd1a0b79eaa9e19bce64ee236637c09fdda4a47698205"}, "downloads": -1, "filename": "django-linguist-0.1.2.tar.gz", "has_sig": true, "md5_digest": "662ede317c4ecb45e023a89545f3bd2f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23412, "upload_time": "2015-04-06T21:14:02", "upload_time_iso_8601": "2015-04-06T21:14:02.817425Z", "url": "https://files.pythonhosted.org/packages/ec/ed/b4c8fc15fbbbff3a44a9b2787c7b18930dce853a580399f1ecd6c6998d84/django-linguist-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "ff077f0314f16994fe11b8ef606ea047", "sha256": "08f3cf2be2829f0fa960eb84b42ea5a8046a02194d2175cc7e729bad89eb739e"}, "downloads": -1, "filename": "django-linguist-0.1.3.tar.gz", "has_sig": true, "md5_digest": "ff077f0314f16994fe11b8ef606ea047", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23494, "upload_time": "2015-04-10T13:21:06", "upload_time_iso_8601": "2015-04-10T13:21:06.912638Z", "url": "https://files.pythonhosted.org/packages/8c/d1/ee8343495460e9beead34804ce4afe8bcd8699b7e36cacb19da0c2b209fa/django-linguist-0.1.3.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "9e12a07923f3736aed4798ffb1fce620", "sha256": "054e1a796d8cb7bf097565b0378662e4124ff44441b73627a68db7e1e366654f"}, "downloads": -1, "filename": "django-linguist-0.2.0.tar.gz", "has_sig": true, "md5_digest": "9e12a07923f3736aed4798ffb1fce620", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31059, "upload_time": "2017-05-22T10:22:48", "upload_time_iso_8601": "2017-05-22T10:22:48.331241Z", "url": "https://files.pythonhosted.org/packages/dc/0a/88275b789a93d8b2b23acd1e954fae1635541c3fb9d04c74526df6e20fe1/django-linguist-0.2.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "d93252f9e3a2d250f178ae4f3f549690", "sha256": "ba43f9fa26279e7d1df347e80876cb9d0c888cb5e578b41919b62abca9686b6b"}, "downloads": -1, "filename": "django-linguist-0.4.0.tar.gz", "has_sig": true, "md5_digest": "d93252f9e3a2d250f178ae4f3f549690", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34568, "upload_time": "2018-07-13T15:26:55", "upload_time_iso_8601": "2018-07-13T15:26:55.518292Z", "url": "https://files.pythonhosted.org/packages/c8/67/b9fe28073391b0bea6c515d982cbea3c56f43739cb0438ca580083e00529/django-linguist-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "67bbd684a6bd422d88d95ff92cfab703", "sha256": "9ff215547b7c577d5043ba6d08014a5316c450edb1eb8bec5729ae38d9fb5cb3"}, "downloads": -1, "filename": "django-linguist-0.4.1.tar.gz", "has_sig": false, "md5_digest": "67bbd684a6bd422d88d95ff92cfab703", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34525, "upload_time": "2019-06-25T09:12:02", "upload_time_iso_8601": "2019-06-25T09:12:02.028126Z", "url": "https://files.pythonhosted.org/packages/4e/fc/08297bbabfc74f68ad0ffe92fa45ec7fca58cf460d110d354180d69df03a/django-linguist-0.4.1.tar.gz", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "b737c0e51188d5daff6d7eff9f21a7ed", "sha256": "46f31d7244b405282769b7e175cd5230103cde23106b14dd5fc30dffa92926c5"}, "downloads": -1, "filename": "django-linguist-0.4.2.tar.gz", "has_sig": true, "md5_digest": "b737c0e51188d5daff6d7eff9f21a7ed", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34551, "upload_time": "2019-07-01T13:10:17", "upload_time_iso_8601": "2019-07-01T13:10:17.714626Z", "url": "https://files.pythonhosted.org/packages/c0/82/f420be49fc2657f849fa2102edad35ada24f8668b05c8c1bc49a31419742/django-linguist-0.4.2.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "8f2e91db1a072e1b50daeb313cd033c8", "sha256": "efa8f1b27bea284d5f385c203f2c92bb07fd49e85e04ff24a3d6943aa671a8fb"}, "downloads": -1, "filename": "django-linguist-0.5.0.tar.gz", "has_sig": true, "md5_digest": "8f2e91db1a072e1b50daeb313cd033c8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30865, "upload_time": "2019-12-30T09:57:32", "upload_time_iso_8601": "2019-12-30T09:57:32.382340Z", "url": "https://files.pythonhosted.org/packages/b0/c8/e06fe12592d5ed28622e6b669e1e6f747c25ebb5cb045e9646ff6d0915b4/django-linguist-0.5.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8f2e91db1a072e1b50daeb313cd033c8", "sha256": "efa8f1b27bea284d5f385c203f2c92bb07fd49e85e04ff24a3d6943aa671a8fb"}, "downloads": -1, "filename": "django-linguist-0.5.0.tar.gz", "has_sig": true, "md5_digest": "8f2e91db1a072e1b50daeb313cd033c8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30865, "upload_time": "2019-12-30T09:57:32", "upload_time_iso_8601": "2019-12-30T09:57:32.382340Z", "url": "https://files.pythonhosted.org/packages/b0/c8/e06fe12592d5ed28622e6b669e1e6f747c25ebb5cb045e9646ff6d0915b4/django-linguist-0.5.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:35:19 2020"}