{"info": {"author": "Andras Biczo", "author_email": "abiczo@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Topic :: Internet :: WWW/HTTP :: WSGI :: Middleware", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "=========\nPageCache\n=========\n\nWSGI caching middleware.\n\nPageCache is a WSGI middleware that can be used to cache complete responses\nfrom WSGI applications. PageCache works well with memcached but can be used\nwith other caching backends as well.\n\nPageCache has not been widely tested, use with caution.\n\nUsage\n=====\n\nHere's a simple example to get you started::\n\n    from pagecache import PageCacheMiddleware\n    \n    app = ...\n    cache = memcache.Client(...)\n    cached_urls = (('/foo', 30, 120), # url prefix, TTL, grace period\n                   ('/bar', 3600, 60))\n    app = PageCacheMiddleware(app, cached_urls, cache)\n\nCached urls\n-----------\n\nThe list of urls to cache is given in the ``cached_urls`` list (or tuple).\nEach entry of this list is a tuple in the following format:\n``(<url prefix>, <TTL in seconds>, <grace period in seconds>)``\n\nPages are served from the cache in the TTL period. When the TTL period has\nexpired the grace period begins. The first request coming in in the grace\nperiod will recalculate the page and store the new result in the cache.\nWhile the new result is being calculated stale results are served from the\ncache (until the grace period expires). This is to protect against the\n`dog-pile effect <http://kovyrin.net/2008/03/10/dog-pile-effect-and-how-to-avoid-it-with-ruby-on-rails-memcache-client-patch/>`_\n\nThe cache object\n----------------\n\nPageCache was only tested with memcached, but it may work with other cache\nbackends as well. The only requirement is that the cache object should have\nthe following methods with reasonably similar semantics as in memcached:\n``get``, ``set``, ``delete``, ``add``\n\nA note on cookies\n-----------------\n\nAll Set-Cookie headers returned by the application will be ignored.\nAlso, depending on your application you'll most probably want to make sure\nthat the application doesn't use any incoming cookie information to calculate\nresponses that will be cached.\n\nInstall\n=======\n\nYou can install the latest version from the\n`github repository <http://github.com/abiczo/pagecache>`_::\n\n    git clone git://github.com/abiczo/pagecache.git\n    cd pagecache\n    python setup.py install\n\nTODO\n====\n\n* more unit testing\n* better syntax for the cached urls configuration\n* regexp based url matching\n* configurable cache keys (so that multiple applications can use the same\n  memcached instance without having to worry about having the same cached urls)\n* configurable request charset\n\nPatches / pull-requests are welcome.\n\nContact\n=======\n\nabiczo@gmail.com", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/abiczo/pagecache", "keywords": "cache wsgi", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "pagecache", "package_url": "https://pypi.org/project/pagecache/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pagecache/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/abiczo/pagecache"}, "release_url": "https://pypi.org/project/pagecache/0.1.1/", "requires_dist": null, "requires_python": null, "summary": "Page caching WSGI middleware", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>WSGI caching middleware.</p>\n<p>PageCache is a WSGI middleware that can be used to cache complete responses\nfrom WSGI applications. PageCache works well with memcached but can be used\nwith other caching backends as well.</p>\n<p>PageCache has not been widely tested, use with caution.</p>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Here\u2019s a simple example to get you started:</p>\n<pre>from pagecache import PageCacheMiddleware\n\napp = ...\ncache = memcache.Client(...)\ncached_urls = (('/foo', 30, 120), # url prefix, TTL, grace period\n               ('/bar', 3600, 60))\napp = PageCacheMiddleware(app, cached_urls, cache)\n</pre>\n<div id=\"cached-urls\">\n<h3>Cached urls</h3>\n<p>The list of urls to cache is given in the <tt>cached_urls</tt> list (or tuple).\nEach entry of this list is a tuple in the following format:\n<tt>(&lt;url prefix&gt;, &lt;TTL in seconds&gt;, &lt;grace period in seconds&gt;)</tt></p>\n<p>Pages are served from the cache in the TTL period. When the TTL period has\nexpired the grace period begins. The first request coming in in the grace\nperiod will recalculate the page and store the new result in the cache.\nWhile the new result is being calculated stale results are served from the\ncache (until the grace period expires). This is to protect against the\n<a href=\"http://kovyrin.net/2008/03/10/dog-pile-effect-and-how-to-avoid-it-with-ruby-on-rails-memcache-client-patch/\" rel=\"nofollow\">dog-pile effect</a></p>\n</div>\n<div id=\"the-cache-object\">\n<h3>The cache object</h3>\n<p>PageCache was only tested with memcached, but it may work with other cache\nbackends as well. The only requirement is that the cache object should have\nthe following methods with reasonably similar semantics as in memcached:\n<tt>get</tt>, <tt>set</tt>, <tt>delete</tt>, <tt>add</tt></p>\n</div>\n<div id=\"a-note-on-cookies\">\n<h3>A note on cookies</h3>\n<p>All Set-Cookie headers returned by the application will be ignored.\nAlso, depending on your application you\u2019ll most probably want to make sure\nthat the application doesn\u2019t use any incoming cookie information to calculate\nresponses that will be cached.</p>\n</div>\n</div>\n<div id=\"install\">\n<h2>Install</h2>\n<p>You can install the latest version from the\n<a href=\"http://github.com/abiczo/pagecache\" rel=\"nofollow\">github repository</a>:</p>\n<pre>git clone git://github.com/abiczo/pagecache.git\ncd pagecache\npython setup.py install\n</pre>\n</div>\n<div id=\"todo\">\n<h2>TODO</h2>\n<ul>\n<li>more unit testing</li>\n<li>better syntax for the cached urls configuration</li>\n<li>regexp based url matching</li>\n<li>configurable cache keys (so that multiple applications can use the same\nmemcached instance without having to worry about having the same cached urls)</li>\n<li>configurable request charset</li>\n</ul>\n<p>Patches / pull-requests are welcome.</p>\n</div>\n<div id=\"contact\">\n<h2>Contact</h2>\n<p><a href=\"mailto:abiczo%40gmail.com\">abiczo<span>@</span>gmail<span>.</span>com</a></p>\n</div>\n\n          </div>"}, "last_serial": 795966, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "26c018599d35022c536359daea40cc25", "sha256": "7b0816b15c66f331088d5b2518c4bc513fb216a3b31ee074aae80d05abc5c55b"}, "downloads": -1, "filename": "pagecache-0.1.tar.gz", "has_sig": false, "md5_digest": "26c018599d35022c536359daea40cc25", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4101, "upload_time": "2010-08-13T21:31:14", "upload_time_iso_8601": "2010-08-13T21:31:14.745253Z", "url": "https://files.pythonhosted.org/packages/30/8f/8954911910da24f323891c9c7c281ea77ae6ba7d43f3149b4817270e4152/pagecache-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "045a472f02f33f822118c4d70156ae9a", "sha256": "63bd2dd422a97b7b5da8efb2b1ce510d1024c9d765fd206a87bb342c405d54bd"}, "downloads": -1, "filename": "pagecache-0.1.1.tar.gz", "has_sig": false, "md5_digest": "045a472f02f33f822118c4d70156ae9a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4413, "upload_time": "2010-08-13T21:34:03", "upload_time_iso_8601": "2010-08-13T21:34:03.968060Z", "url": "https://files.pythonhosted.org/packages/7c/3a/b9cc7cb0460d674af01d0ae13beb884c20e97011039ac423ec4ec779d316/pagecache-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "045a472f02f33f822118c4d70156ae9a", "sha256": "63bd2dd422a97b7b5da8efb2b1ce510d1024c9d765fd206a87bb342c405d54bd"}, "downloads": -1, "filename": "pagecache-0.1.1.tar.gz", "has_sig": false, "md5_digest": "045a472f02f33f822118c4d70156ae9a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4413, "upload_time": "2010-08-13T21:34:03", "upload_time_iso_8601": "2010-08-13T21:34:03.968060Z", "url": "https://files.pythonhosted.org/packages/7c/3a/b9cc7cb0460d674af01d0ae13beb884c20e97011039ac423ec4ec779d316/pagecache-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:59:53 2020"}