{"info": {"author": "Pontus Lurcock", "author_email": "pont@talvi.net", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: Science/Research", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Programming Language :: Python :: 3", "Topic :: Scientific/Engineering :: Information Analysis"], "description": "# comparedecimal\n\nA package to compare decimal representations of floating-point numbers,\nincluding a command-line tool to report on the similarity between data in\nCSV files.\n\n## Installation\n\nThe `comparedecimal` package can be installed from source by running `pip3\ninstall .` or `python3 setup.py` within its directory. The command-line\nutility `comparecsv` will be installed as part of the package.\n\n## Rationale\n\nI wrote this tool to help me when organizing and tidying up scientific\ndata sets. It occasionally happens that I come across two files which I\nsuspect contain the same data, but because they've been through different\nprocessing steps, the values are no longer byte-for-byte identical \u2013 for\nexample, a CSV file may have been opened in Excel and saved again,\ntruncating the number of decimal places in the floating-point values. In\nthese cases, it's useful to be able to ascertain how compatible the files\nare \u2013 is it possible that one is a lower-precision version of the other\n(e.g. \u20182.0\u2019 and \u20181.99\u2019)? Or that the numerical values are in fact\nidentical but the strings representing them differ (e.g. \u20181234\u2019 and\n\u20181.234e3\u2019)? `comparedecimal` provides a Python package and command-line\ntool to answer such questions.\n\n## Equality levels\n\nFor any pair of strings, `comparedecimal` determines one of five equality\nlevels between them. The highest possible equality level is always given,\nso for instance a pair of strings which is both \u2018compatible\u2019 and \u2018close\u2019\nwill be classified as \u2018compatible\u2019. The equality levels are as follows:\n\n1. Identical: the character strings are equal.\n\n2. Numerically equal: the character strings, when parsed as floating-point\n   decimals, produce numbers which are equal.\n\n3. Compatible: there exists a single floating-point number which, when\n   formatted, could produce both the string representations. Under this\n   definition, for example, \"1.9\" and \"1.95\" would be compatible, because\n   they are both valid representations of 1.949. This equality level is\n   particularly useful for finding duplicate files with differing levels\n   of precision.\n\n4. Close: the difference between the numbers represented by the character\n   strings is below a certain threshold (formally: denoting the\n   represented values by `a` and `b` and the threshold by `t`, they are\n   close if have the same sign and `max(abs(a), abs(b)) <= (1 + t) *\n   min(abs(a), abs(b)))`. This equality level is useful for finding\n   \u2018duplicate\u2019 files generated from the same data in which truncation or\n   rounding errors have caused values to diverge slightly.\n\n5. Unequal: The character strings are unequal and cannot represent\n   the same number, and the values they represent are not close in the sense\n   defined above.\n\n## The `comparedecimal` package\n\nThe `comparedecimal` package provides the class `DecimalComparer`, which\nis initialized with a separator string (used to divide lines for multi-field\ncomparisons) and a threshold (used to define the `Close` equality level\ndescribed above). The class provides the following methods:\n\n- `compare_strings` to compare individual strings\n- `compare_string_lists` to compare lists of strings\n- `compare_line_lists` to compare lists of lines, using the predefined\n  separator to split each line into strings\n\n`DecimalComparer` has an instance variable `totals`. `totals` is a\ndictionary with a key for each equality level (represented by the\n`EqualityLevel` enum). The associated value for each equality level is\nan integer representing the total number of comparisons made so far\nwhich resulted in this equality level.\n\n## The `comparecsv` command-line tool\n\n`comparecsv` is a command line utility for finding duplicates among\ndelimited textual files containing numerical data (e.g. CSV files), even\nwhen the string representations of the data differ.\n\n`comparecsv` takes as its arguments two delimited files with the same\nlayout (i.e. same number of rows and columns) and compares them field by\nfield. For each pair of corresponding fields, it determines a level of\nequality as defined above.\n\nWhen run on two files, `comparecsv` prints total counts for field pairs\nat each level of equality. For every field pair, the highest possible\nequality level is given: for instance, if two fields are not identical but\nare numerically equal, then they will (by definition) also be compatible\nand close; in this case, `comparecsv` will report the equality level\n\u2018numerically equal\u2019.\n\n## License\n\nCopyright 2018, 2019 Pontus Lurcock\npont@talvi.net\n\nReleased under the GNU GPL v3; see the file COPYING for details.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/pont-us/comparedecimal", "keywords": "", "license": "GNU GPLv3+", "maintainer": "", "maintainer_email": "", "name": "comparedecimal", "package_url": "https://pypi.org/project/comparedecimal/", "platform": "", "project_url": "https://pypi.org/project/comparedecimal/", "project_urls": {"Homepage": "https://github.com/pont-us/comparedecimal"}, "release_url": "https://pypi.org/project/comparedecimal/1.0.0/", "requires_dist": null, "requires_python": "", "summary": "Compare decimal representations of floating-point numbers.", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>comparedecimal</h1>\n<p>A package to compare decimal representations of floating-point numbers,\nincluding a command-line tool to report on the similarity between data in\nCSV files.</p>\n<h2>Installation</h2>\n<p>The <code>comparedecimal</code> package can be installed from source by running <code>pip3 install .</code> or <code>python3 setup.py</code> within its directory. The command-line\nutility <code>comparecsv</code> will be installed as part of the package.</p>\n<h2>Rationale</h2>\n<p>I wrote this tool to help me when organizing and tidying up scientific\ndata sets. It occasionally happens that I come across two files which I\nsuspect contain the same data, but because they've been through different\nprocessing steps, the values are no longer byte-for-byte identical \u2013 for\nexample, a CSV file may have been opened in Excel and saved again,\ntruncating the number of decimal places in the floating-point values. In\nthese cases, it's useful to be able to ascertain how compatible the files\nare \u2013 is it possible that one is a lower-precision version of the other\n(e.g. \u20182.0\u2019 and \u20181.99\u2019)? Or that the numerical values are in fact\nidentical but the strings representing them differ (e.g. \u20181234\u2019 and\n\u20181.234e3\u2019)? <code>comparedecimal</code> provides a Python package and command-line\ntool to answer such questions.</p>\n<h2>Equality levels</h2>\n<p>For any pair of strings, <code>comparedecimal</code> determines one of five equality\nlevels between them. The highest possible equality level is always given,\nso for instance a pair of strings which is both \u2018compatible\u2019 and \u2018close\u2019\nwill be classified as \u2018compatible\u2019. The equality levels are as follows:</p>\n<ol>\n<li>\n<p>Identical: the character strings are equal.</p>\n</li>\n<li>\n<p>Numerically equal: the character strings, when parsed as floating-point\ndecimals, produce numbers which are equal.</p>\n</li>\n<li>\n<p>Compatible: there exists a single floating-point number which, when\nformatted, could produce both the string representations. Under this\ndefinition, for example, \"1.9\" and \"1.95\" would be compatible, because\nthey are both valid representations of 1.949. This equality level is\nparticularly useful for finding duplicate files with differing levels\nof precision.</p>\n</li>\n<li>\n<p>Close: the difference between the numbers represented by the character\nstrings is below a certain threshold (formally: denoting the\nrepresented values by <code>a</code> and <code>b</code> and the threshold by <code>t</code>, they are\nclose if have the same sign and <code>max(abs(a), abs(b)) &lt;= (1 + t) * min(abs(a), abs(b)))</code>. This equality level is useful for finding\n\u2018duplicate\u2019 files generated from the same data in which truncation or\nrounding errors have caused values to diverge slightly.</p>\n</li>\n<li>\n<p>Unequal: The character strings are unequal and cannot represent\nthe same number, and the values they represent are not close in the sense\ndefined above.</p>\n</li>\n</ol>\n<h2>The <code>comparedecimal</code> package</h2>\n<p>The <code>comparedecimal</code> package provides the class <code>DecimalComparer</code>, which\nis initialized with a separator string (used to divide lines for multi-field\ncomparisons) and a threshold (used to define the <code>Close</code> equality level\ndescribed above). The class provides the following methods:</p>\n<ul>\n<li><code>compare_strings</code> to compare individual strings</li>\n<li><code>compare_string_lists</code> to compare lists of strings</li>\n<li><code>compare_line_lists</code> to compare lists of lines, using the predefined\nseparator to split each line into strings</li>\n</ul>\n<p><code>DecimalComparer</code> has an instance variable <code>totals</code>. <code>totals</code> is a\ndictionary with a key for each equality level (represented by the\n<code>EqualityLevel</code> enum). The associated value for each equality level is\nan integer representing the total number of comparisons made so far\nwhich resulted in this equality level.</p>\n<h2>The <code>comparecsv</code> command-line tool</h2>\n<p><code>comparecsv</code> is a command line utility for finding duplicates among\ndelimited textual files containing numerical data (e.g. CSV files), even\nwhen the string representations of the data differ.</p>\n<p><code>comparecsv</code> takes as its arguments two delimited files with the same\nlayout (i.e. same number of rows and columns) and compares them field by\nfield. For each pair of corresponding fields, it determines a level of\nequality as defined above.</p>\n<p>When run on two files, <code>comparecsv</code> prints total counts for field pairs\nat each level of equality. For every field pair, the highest possible\nequality level is given: for instance, if two fields are not identical but\nare numerically equal, then they will (by definition) also be compatible\nand close; in this case, <code>comparecsv</code> will report the equality level\n\u2018numerically equal\u2019.</p>\n<h2>License</h2>\n<p>Copyright 2018, 2019 Pontus Lurcock\n<a href=\"mailto:pont@talvi.net\">pont@talvi.net</a></p>\n<p>Released under the GNU GPL v3; see the file COPYING for details.</p>\n\n          </div>"}, "last_serial": 6229424, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "480c15fece1ca522c5b140d04849036c", "sha256": "c2523519e5da355d6dad9a678fa5d6f766fa98c925f04323fa788f3d7d7b05ce"}, "downloads": -1, "filename": "comparedecimal-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "480c15fece1ca522c5b140d04849036c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 20386, "upload_time": "2019-12-02T15:54:25", "upload_time_iso_8601": "2019-12-02T15:54:25.020763Z", "url": "https://files.pythonhosted.org/packages/98/a0/6c4185db03615a0f42a6542a09d92c51d2a4961686545d7ca59af3d158ee/comparedecimal-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "87e2a303c972baae6c869df7d06e151d", "sha256": "30ae0ee0d907cf5f3d56c3e33aba98238e1b78a907b8bd6ba938691159541df3"}, "downloads": -1, "filename": "comparedecimal-1.0.0.tar.gz", "has_sig": false, "md5_digest": "87e2a303c972baae6c869df7d06e151d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7560, "upload_time": "2019-12-02T15:54:28", "upload_time_iso_8601": "2019-12-02T15:54:28.169157Z", "url": "https://files.pythonhosted.org/packages/6c/b2/2d37ea6eaac3aad49aad0724d32ee745a537f15c782d2e413b5c1c9e2585/comparedecimal-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "480c15fece1ca522c5b140d04849036c", "sha256": "c2523519e5da355d6dad9a678fa5d6f766fa98c925f04323fa788f3d7d7b05ce"}, "downloads": -1, "filename": "comparedecimal-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "480c15fece1ca522c5b140d04849036c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 20386, "upload_time": "2019-12-02T15:54:25", "upload_time_iso_8601": "2019-12-02T15:54:25.020763Z", "url": "https://files.pythonhosted.org/packages/98/a0/6c4185db03615a0f42a6542a09d92c51d2a4961686545d7ca59af3d158ee/comparedecimal-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "87e2a303c972baae6c869df7d06e151d", "sha256": "30ae0ee0d907cf5f3d56c3e33aba98238e1b78a907b8bd6ba938691159541df3"}, "downloads": -1, "filename": "comparedecimal-1.0.0.tar.gz", "has_sig": false, "md5_digest": "87e2a303c972baae6c869df7d06e151d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7560, "upload_time": "2019-12-02T15:54:28", "upload_time_iso_8601": "2019-12-02T15:54:28.169157Z", "url": "https://files.pythonhosted.org/packages/6c/b2/2d37ea6eaac3aad49aad0724d32ee745a537f15c782d2e413b5c1c9e2585/comparedecimal-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:17 2020"}