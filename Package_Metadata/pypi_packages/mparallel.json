{"info": {"author": "Anderson Mesquita", "author_email": "andersonvom@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: MIT License", "Programming Language :: Python"], "description": "=========\nmparallel\n=========\n\nThis is a minimalist tool to run multiple parallel tasks in python.\n\nMost programming languages have full support for threads but often require a\nlot of overhead work even for the simplest tasks.  This package aims to provide\nan easy way to parallelize these tasks with very little effort.\n\n\nGetting Started\n===============\n\nFirst install the package.\n\n::\n\n  pip install mparallel\n\nIn your python modules, just import it and use it as follows:\n\n::\n\n  import time\n  import mparallel\n\n  def some_expensive_or_waiting_task(some_param):\n    # ...\n    time.sleep(2)\n    return some_param\n\n  def my_method():\n    runner = mparallel.Runner()\n    for i in range(10):\n      runner.add_task(some_expensive_or_waiting_task, i)\n    print runner.results()\n\nYou can see the tasks are being run in parallel from the previous code because\neven though they are being started in order (0..9), the final output will\nlikely appear in a different order.  Also, the total waiting time will be less\nthan 20 seconds, which is the time it would take to serially run them.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/andersonvom/mparallel", "keywords": "python parallel mparallel simple minimalist thread threaded concurrent task runner", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "mparallel", "package_url": "https://pypi.org/project/mparallel/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/mparallel/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/andersonvom/mparallel"}, "release_url": "https://pypi.org/project/mparallel/0.0.1/", "requires_dist": null, "requires_python": null, "summary": "A minimalist tool to run multiple parallel tasks in Python", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This is a minimalist tool to run multiple parallel tasks in python.</p>\n<p>Most programming languages have full support for threads but often require a\nlot of overhead work even for the simplest tasks.  This package aims to provide\nan easy way to parallelize these tasks with very little effort.</p>\n<div id=\"getting-started\">\n<h2>Getting Started</h2>\n<p>First install the package.</p>\n<pre>pip install mparallel\n</pre>\n<p>In your python modules, just import it and use it as follows:</p>\n<pre>import time\nimport mparallel\n\ndef some_expensive_or_waiting_task(some_param):\n  # ...\n  time.sleep(2)\n  return some_param\n\ndef my_method():\n  runner = mparallel.Runner()\n  for i in range(10):\n    runner.add_task(some_expensive_or_waiting_task, i)\n  print runner.results()\n</pre>\n<p>You can see the tasks are being run in parallel from the previous code because\neven though they are being started in order (0..9), the final output will\nlikely appear in a different order.  Also, the total waiting time will be less\nthan 20 seconds, which is the time it would take to serially run them.</p>\n</div>\n\n          </div>"}, "last_serial": 1079389, "releases": {"0.0.1": []}, "urls": [], "timestamp": "Fri May  8 00:51:20 2020"}