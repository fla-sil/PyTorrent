{"info": {"author": "Luc Street", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3 :: Only", "Topic :: Scientific/Engineering :: Physics"], "description": "# matisse-controller\n\nA Python package to control the Matisse 2 TS laser for the University of Washington's Optical Spintronics and Sensing Lab.\n\nRequirements: Python 3.7+, NI VISA, PyVISA, pySerial, SciPy, matplotlib, PyQt5\n\nTested on Windows 7 and 10 (x64).\n\n## Contents\n- [Installation](#installation)\n- [Usage](#usage)\n- [API Documentation](#api-documentation)\n- [Changelog](#changelog)\n- [Terminology](#terminology)\n- [Pickled Data](#pickled-data)\n- [GUI Options](#gui-options)\n- [Development](#development)\n- [Contributing](#contributing)\n- [License](#license)\n\n## Installation\n\n    $ pip install matisse-controller\n\nIf you plan on using PLE features with Andor instruments, copy the required DLL files from the Andor SDK into \n`[package install dir]/shamrock_ple/lib` (see the README in that directory for more details)\n\n## Usage\n\nTo launch the GUI, connect the Matisse and a supported wavemeter, and then run:\n\n    $ matisse-controller\n\nThe GUI uses a Python API to control the Matisse. If you're writing a Python program, just import the subpackages\nthat contain the APIs you want. The `matisse` subpackage contains Matisse-related components, the `config` subpackage\ncontains configuration functionality, etc.\n\nTo configure the behavior of the program using a GUI, click the 'Configuration' menu option from the main GUI, or run:\n\n    $ matisse-config\n\nHovering over most fields in this configuration dialog will reveal tooltips with more information about what the options do. \n\n## API Documentation\nAPI documentation for this project can be found at <https://lucis-fluxum.github.io/matisse-controller/docs>.\n\n## Changelog\nThe changelog for this project can be found at <https://lucis-fluxum.github.io/matisse-controller/CHANGELOG>.\n\n## Terminology\nThere are a few important bits of terminology that may be confusing: \n- The _target wavelength_ is the wavelength that is explicitly set (via Set > Wavelength), but if no target wavelength is\ngiven, the current measured wavelength is considered to be the target wavelength instead.\n- _Auto-stabilization_ or _stabilization_ in this case refers to constantly checking and scanning the device up and down to \nkeep the wavelength at a particular value.\n- The _stabilization piezos_ are the reference cell, the piezo etalon, and the slow piezo.\n- _Scanning_ may refer to the act of moving a motor back and forth to locate an optimal position, or the act of adjusting the \nreference cell and stabilization piezos to adjust the wavelength.\n\n## Pickled Data\nPLE data from this application is stored in text files as a list of counts separated by newlines, as well as a _.pickle_\nfile, which is an efficient form of binary storage that Python uses to serialize objects.\n\nTo load the data from a .pickle file:\n\n```python\nimport pickle\nwith open('file_name_here.pickle', 'rb') as data_file:\n    data = pickle.load(data_file)\n```\n\n## GUI Options\n\n### Console\n- Clear Log: clear the log window\n- Close All Plots: close any birefringent filter or thin etalon scan plot windows that may be open\n- Configuration: open a dialog that allows you to customize all configurable options\n- Reset: reset everything, or individual components (like Matisse motors, Matisse piezos, or PLE tasks)\n- Restart: close and re-open the GUI, reinitialize everything. Good for when things go wrong.\n\n### Set\n- Wavelength: set the laser wavlength to a given value\n- BiFi Approx. Wavelength: move the birefringent filter to an approximate wavelength\n- BiFi Motor Position: set the position of the birefringent filter\n- Thin Etalon Motor Position: set the position of the thin etalon\n- Piezo Etalon Position: set the position of the piezo etalon\n- Slow Piezo Position: set the position of the slow piezo\n- RefCell Position: set the position of the reference cell\n\n### Scan\n- Birefringent Filter: perform a scan of the birefringent filter, choosing the location with maximum diode power\n- Thin Etalon: perform a scan of the thin etalon, choosing the mode closest to the target wavelength\n- Scan Device Up: slowly increase the wavelength by scanning the stabilization piezos and the thin etalon together\n- Scan Device Down: slowly decrease the wavelength by scanning the stabilization piezos and the thin etalon together\n- Stop Scanning Device: stop scanning the stabilization piezos and the thin etalon\n\n### Stabilization\n- Toggle Control Loop: toggle individual control loops of Matisse components\n- Toggle Lock Laser: toggle execution of a thread that attempts to lock the laser to the target wavelength\n- Set Recommended Fast Pz Setpoint: measure the reference cell transmission spectrum, and set the fast piezo setpoint\n- Toggle Auto Stabilization: toggle execution of a thread that scans the device up or down to keep the wavelength at\nthe target value\n\n### Shamrock\n- Start PLE Scan: open a dialog to set parameters of a PLE scan, and perform the scan, saving acquired data in text\nfiles separated by wavelength, and also a .pickle file containing all the data\n- Start PLE Analysis: open a dialog to load a .pickle file of a PLE scan, and integrate the counts for each laser\nwavelength used in the scan. Opens a plot of integrated counts vs. laser wavelength afterwards. You can also load\nbackground data that you'd like to be subtracted from the acquisition data.\n- View PLE Analysis: plot the data in a .pickle file representing the analysis of a particular PLE scan\n- View Single Acquisition: plot a file containing data from the CCD, or acquire a single image from the CCD. This\nfeature does not wait for the CCD to reach a particular temperature.\n\n## Development\n\nAfter checking out the repo, run `pipenv install --dev` to install dependencies. Using a virtual environment is\nrecommended.\n\nTo install this package onto your local machine, run `pip install -e .`.\n\nUseful documentation: [PyVISA](https://pyvisa.readthedocs.io/en/latest/introduction/index.html),\n[pySerial](https://pythonhosted.org/pyserial/), [SciPy](https://docs.scipy.org/doc/scipy/reference/), \n[matplotlib](https://matplotlib.org/api/index.html), [Qt 5](https://doc.qt.io/qt-5/index.html)\n\n### Adding features to the Matisse class\nThe standard way of interacting with the Matisse outside of the existing API is to use the `Matisse.query` method. The\nMatisse implements several commands that run asynchronously, like motor movements, so if you want to run these\nsynchronously, you must do it on your own (like checking the motor status until it's idle again).\n\nLong-running tasks should be executed in a thread that can be started and gracefully stopped from the Matisse class.\nCurrently, fetching a measurement from the wavemeter is a relatively expensive process, so avoid doing this too much if\npossible.\n\n### Adding another wavemeter\nCurrently I've only implemented an interface for the WaveMaster, but any class will do, as long as it implements the\n`get_raw_value` and `get_wavelength` methods. The `get_raw_value` method should return a value representing exactly\nwhat is seen on the wavemeter display (this might not be a measurement), and the `get_wavelength` method should always\nreturn a floating-point number representing the latest measurement from the wavemeter. The WaveMaster implementation\nblocks the thread until a value is returned from the instrument. Additionally, please ensure any code you write that\ncommunicates with instruments is thread-safe.\n\n### Adding features to the GUI\nLogging and UI updates should have top priority, so take care not to block the UI thread. Here's the process I use:\n- Add a menu action under `setup_menus` and connect it to a Qt slot under `setup_slots`, to be executed on the main\nthread later.\n- Do UI updates in this slot, if you need a long-running task that also updates the UI, use a subclass of QThread with a\nslot (see LoggingThread, StatusUpdateThread for examples).\n- For long-running tasks that do not need access to the UI, submit a runnable object to the ControlApplication's\ninstance of ThreadPoolExecutor. Hold a reference to the Future it gives you and call `add_done_callback` on it, passing\nin `matisse_controller.gui.utils.raise_error_from_future` if you want to log errors from that thread. For an example of \na method that runs tasks one-by-one on the Matisse, see `ControlApplication.run_matisse_task`.\n\n### Adding another PLE procedure\nCurrently I've only implemented a PLE scan for the Andor Shamrock 750. If you'd like to implement your own PLE procedure,\ncreate a separate Python package with a class that has the methods `start_ple_scan`, `stop_ple_scan`, and\n`analyze_ple_data`. It's up to you to implement the scanning logic for your particular spectrometer and CCD setup.\nModify the Matisse class `__init__` method to use your chosen wavemeter and an instance of your PLE scanning class.\n\n## Contributing\n\nBug reports and pull requests are welcome on GitHub at <https://github.com/lucis-fluxum/matisse-controller>.\n\n## License\n\nThe package is available as open source under the terms of the [MIT License](http://opensource.org/licenses/MIT).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://lucis-fluxum.github.io/matisse-controller/", "keywords": "ni-visa matisse laser", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "matisse-controller", "package_url": "https://pypi.org/project/matisse-controller/", "platform": "", "project_url": "https://pypi.org/project/matisse-controller/", "project_urls": {"Documentation": "https://lucis-fluxum.github.io/matisse-controller/docs/", "Homepage": "https://lucis-fluxum.github.io/matisse-controller/", "Source Code": "https://github.com/lucis-fluxum/matisse-controller"}, "release_url": "https://pypi.org/project/matisse-controller/0.4.0/", "requires_dist": ["pyvisa (<2,>=1)", "pyserial (<4,>=3)", "scipy (<2,>=1)", "matplotlib (<4,>=3)", "pyqt5 (>=5)", "bidict (>=0.18)", "glom (>=19.2)"], "requires_python": "~=3.7", "summary": "A Python package to control the Matisse 2 TS.", "version": "0.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>matisse-controller</h1>\n<p>A Python package to control the Matisse 2 TS laser for the University of Washington's Optical Spintronics and Sensing Lab.</p>\n<p>Requirements: Python 3.7+, NI VISA, PyVISA, pySerial, SciPy, matplotlib, PyQt5</p>\n<p>Tested on Windows 7 and 10 (x64).</p>\n<h2>Contents</h2>\n<ul>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#usage\" rel=\"nofollow\">Usage</a></li>\n<li><a href=\"#api-documentation\" rel=\"nofollow\">API Documentation</a></li>\n<li><a href=\"#changelog\" rel=\"nofollow\">Changelog</a></li>\n<li><a href=\"#terminology\" rel=\"nofollow\">Terminology</a></li>\n<li><a href=\"#pickled-data\" rel=\"nofollow\">Pickled Data</a></li>\n<li><a href=\"#gui-options\" rel=\"nofollow\">GUI Options</a></li>\n<li><a href=\"#development\" rel=\"nofollow\">Development</a></li>\n<li><a href=\"#contributing\" rel=\"nofollow\">Contributing</a></li>\n<li><a href=\"#license\" rel=\"nofollow\">License</a></li>\n</ul>\n<h2>Installation</h2>\n<pre><code>$ pip install matisse-controller\n</code></pre>\n<p>If you plan on using PLE features with Andor instruments, copy the required DLL files from the Andor SDK into\n<code>[package install dir]/shamrock_ple/lib</code> (see the README in that directory for more details)</p>\n<h2>Usage</h2>\n<p>To launch the GUI, connect the Matisse and a supported wavemeter, and then run:</p>\n<pre><code>$ matisse-controller\n</code></pre>\n<p>The GUI uses a Python API to control the Matisse. If you're writing a Python program, just import the subpackages\nthat contain the APIs you want. The <code>matisse</code> subpackage contains Matisse-related components, the <code>config</code> subpackage\ncontains configuration functionality, etc.</p>\n<p>To configure the behavior of the program using a GUI, click the 'Configuration' menu option from the main GUI, or run:</p>\n<pre><code>$ matisse-config\n</code></pre>\n<p>Hovering over most fields in this configuration dialog will reveal tooltips with more information about what the options do.</p>\n<h2>API Documentation</h2>\n<p>API documentation for this project can be found at <a href=\"https://lucis-fluxum.github.io/matisse-controller/docs\" rel=\"nofollow\">https://lucis-fluxum.github.io/matisse-controller/docs</a>.</p>\n<h2>Changelog</h2>\n<p>The changelog for this project can be found at <a href=\"https://lucis-fluxum.github.io/matisse-controller/CHANGELOG\" rel=\"nofollow\">https://lucis-fluxum.github.io/matisse-controller/CHANGELOG</a>.</p>\n<h2>Terminology</h2>\n<p>There are a few important bits of terminology that may be confusing:</p>\n<ul>\n<li>The <em>target wavelength</em> is the wavelength that is explicitly set (via Set &gt; Wavelength), but if no target wavelength is\ngiven, the current measured wavelength is considered to be the target wavelength instead.</li>\n<li><em>Auto-stabilization</em> or <em>stabilization</em> in this case refers to constantly checking and scanning the device up and down to\nkeep the wavelength at a particular value.</li>\n<li>The <em>stabilization piezos</em> are the reference cell, the piezo etalon, and the slow piezo.</li>\n<li><em>Scanning</em> may refer to the act of moving a motor back and forth to locate an optimal position, or the act of adjusting the\nreference cell and stabilization piezos to adjust the wavelength.</li>\n</ul>\n<h2>Pickled Data</h2>\n<p>PLE data from this application is stored in text files as a list of counts separated by newlines, as well as a <em>.pickle</em>\nfile, which is an efficient form of binary storage that Python uses to serialize objects.</p>\n<p>To load the data from a .pickle file:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pickle</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'file_name_here.pickle'</span><span class=\"p\">,</span> <span class=\"s1\">'rb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">data_file</span><span class=\"p\">:</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">pickle</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">data_file</span><span class=\"p\">)</span>\n</pre>\n<h2>GUI Options</h2>\n<h3>Console</h3>\n<ul>\n<li>Clear Log: clear the log window</li>\n<li>Close All Plots: close any birefringent filter or thin etalon scan plot windows that may be open</li>\n<li>Configuration: open a dialog that allows you to customize all configurable options</li>\n<li>Reset: reset everything, or individual components (like Matisse motors, Matisse piezos, or PLE tasks)</li>\n<li>Restart: close and re-open the GUI, reinitialize everything. Good for when things go wrong.</li>\n</ul>\n<h3>Set</h3>\n<ul>\n<li>Wavelength: set the laser wavlength to a given value</li>\n<li>BiFi Approx. Wavelength: move the birefringent filter to an approximate wavelength</li>\n<li>BiFi Motor Position: set the position of the birefringent filter</li>\n<li>Thin Etalon Motor Position: set the position of the thin etalon</li>\n<li>Piezo Etalon Position: set the position of the piezo etalon</li>\n<li>Slow Piezo Position: set the position of the slow piezo</li>\n<li>RefCell Position: set the position of the reference cell</li>\n</ul>\n<h3>Scan</h3>\n<ul>\n<li>Birefringent Filter: perform a scan of the birefringent filter, choosing the location with maximum diode power</li>\n<li>Thin Etalon: perform a scan of the thin etalon, choosing the mode closest to the target wavelength</li>\n<li>Scan Device Up: slowly increase the wavelength by scanning the stabilization piezos and the thin etalon together</li>\n<li>Scan Device Down: slowly decrease the wavelength by scanning the stabilization piezos and the thin etalon together</li>\n<li>Stop Scanning Device: stop scanning the stabilization piezos and the thin etalon</li>\n</ul>\n<h3>Stabilization</h3>\n<ul>\n<li>Toggle Control Loop: toggle individual control loops of Matisse components</li>\n<li>Toggle Lock Laser: toggle execution of a thread that attempts to lock the laser to the target wavelength</li>\n<li>Set Recommended Fast Pz Setpoint: measure the reference cell transmission spectrum, and set the fast piezo setpoint</li>\n<li>Toggle Auto Stabilization: toggle execution of a thread that scans the device up or down to keep the wavelength at\nthe target value</li>\n</ul>\n<h3>Shamrock</h3>\n<ul>\n<li>Start PLE Scan: open a dialog to set parameters of a PLE scan, and perform the scan, saving acquired data in text\nfiles separated by wavelength, and also a .pickle file containing all the data</li>\n<li>Start PLE Analysis: open a dialog to load a .pickle file of a PLE scan, and integrate the counts for each laser\nwavelength used in the scan. Opens a plot of integrated counts vs. laser wavelength afterwards. You can also load\nbackground data that you'd like to be subtracted from the acquisition data.</li>\n<li>View PLE Analysis: plot the data in a .pickle file representing the analysis of a particular PLE scan</li>\n<li>View Single Acquisition: plot a file containing data from the CCD, or acquire a single image from the CCD. This\nfeature does not wait for the CCD to reach a particular temperature.</li>\n</ul>\n<h2>Development</h2>\n<p>After checking out the repo, run <code>pipenv install --dev</code> to install dependencies. Using a virtual environment is\nrecommended.</p>\n<p>To install this package onto your local machine, run <code>pip install -e .</code>.</p>\n<p>Useful documentation: <a href=\"https://pyvisa.readthedocs.io/en/latest/introduction/index.html\" rel=\"nofollow\">PyVISA</a>,\n<a href=\"https://pythonhosted.org/pyserial/\" rel=\"nofollow\">pySerial</a>, <a href=\"https://docs.scipy.org/doc/scipy/reference/\" rel=\"nofollow\">SciPy</a>,\n<a href=\"https://matplotlib.org/api/index.html\" rel=\"nofollow\">matplotlib</a>, <a href=\"https://doc.qt.io/qt-5/index.html\" rel=\"nofollow\">Qt 5</a></p>\n<h3>Adding features to the Matisse class</h3>\n<p>The standard way of interacting with the Matisse outside of the existing API is to use the <code>Matisse.query</code> method. The\nMatisse implements several commands that run asynchronously, like motor movements, so if you want to run these\nsynchronously, you must do it on your own (like checking the motor status until it's idle again).</p>\n<p>Long-running tasks should be executed in a thread that can be started and gracefully stopped from the Matisse class.\nCurrently, fetching a measurement from the wavemeter is a relatively expensive process, so avoid doing this too much if\npossible.</p>\n<h3>Adding another wavemeter</h3>\n<p>Currently I've only implemented an interface for the WaveMaster, but any class will do, as long as it implements the\n<code>get_raw_value</code> and <code>get_wavelength</code> methods. The <code>get_raw_value</code> method should return a value representing exactly\nwhat is seen on the wavemeter display (this might not be a measurement), and the <code>get_wavelength</code> method should always\nreturn a floating-point number representing the latest measurement from the wavemeter. The WaveMaster implementation\nblocks the thread until a value is returned from the instrument. Additionally, please ensure any code you write that\ncommunicates with instruments is thread-safe.</p>\n<h3>Adding features to the GUI</h3>\n<p>Logging and UI updates should have top priority, so take care not to block the UI thread. Here's the process I use:</p>\n<ul>\n<li>Add a menu action under <code>setup_menus</code> and connect it to a Qt slot under <code>setup_slots</code>, to be executed on the main\nthread later.</li>\n<li>Do UI updates in this slot, if you need a long-running task that also updates the UI, use a subclass of QThread with a\nslot (see LoggingThread, StatusUpdateThread for examples).</li>\n<li>For long-running tasks that do not need access to the UI, submit a runnable object to the ControlApplication's\ninstance of ThreadPoolExecutor. Hold a reference to the Future it gives you and call <code>add_done_callback</code> on it, passing\nin <code>matisse_controller.gui.utils.raise_error_from_future</code> if you want to log errors from that thread. For an example of\na method that runs tasks one-by-one on the Matisse, see <code>ControlApplication.run_matisse_task</code>.</li>\n</ul>\n<h3>Adding another PLE procedure</h3>\n<p>Currently I've only implemented a PLE scan for the Andor Shamrock 750. If you'd like to implement your own PLE procedure,\ncreate a separate Python package with a class that has the methods <code>start_ple_scan</code>, <code>stop_ple_scan</code>, and\n<code>analyze_ple_data</code>. It's up to you to implement the scanning logic for your particular spectrometer and CCD setup.\nModify the Matisse class <code>__init__</code> method to use your chosen wavemeter and an instance of your PLE scanning class.</p>\n<h2>Contributing</h2>\n<p>Bug reports and pull requests are welcome on GitHub at <a href=\"https://github.com/lucis-fluxum/matisse-controller\" rel=\"nofollow\">https://github.com/lucis-fluxum/matisse-controller</a>.</p>\n<h2>License</h2>\n<p>The package is available as open source under the terms of the <a href=\"http://opensource.org/licenses/MIT\" rel=\"nofollow\">MIT License</a>.</p>\n\n          </div>"}, "last_serial": 5722754, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "ff75ef0672c073d3db0544446f4ab583", "sha256": "7cad1bd211110fe0f400b119dad33b729891c41fecfa46e4d2c8f7de8c8842d7"}, "downloads": -1, "filename": "matisse_controller-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ff75ef0672c073d3db0544446f4ab583", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.7", "size": 45959, "upload_time": "2019-08-02T16:15:21", "upload_time_iso_8601": "2019-08-02T16:15:21.003527Z", "url": "https://files.pythonhosted.org/packages/f4/1c/8273c371dd936793ab134afab7031c7168e377ff7c0a8f9d14240ea50bc5/matisse_controller-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8f9e3b60a55fad3e6292cd568e93ffa0", "sha256": "d8bea3e41ab8766dc427eea2b00c6d353c4fb61b825af31e530cf1c5ce9f9f43"}, "downloads": -1, "filename": "matisse-controller-0.2.0.tar.gz", "has_sig": false, "md5_digest": "8f9e3b60a55fad3e6292cd568e93ffa0", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.7", "size": 37363, "upload_time": "2019-08-02T16:15:22", "upload_time_iso_8601": "2019-08-02T16:15:22.675582Z", "url": "https://files.pythonhosted.org/packages/c6/b1/07421e8adec9500df2a166f964e059685a67d359bd049df3c1d3dd9ed528/matisse-controller-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "a54d12502c3fa9905195adde5e082088", "sha256": "ece469624d63d8887bc008593d203f9f3b152a86468f6affbd7682b81bc57896"}, "downloads": -1, "filename": "matisse_controller-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a54d12502c3fa9905195adde5e082088", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.7", "size": 48790, "upload_time": "2019-08-02T20:57:04", "upload_time_iso_8601": "2019-08-02T20:57:04.442796Z", "url": "https://files.pythonhosted.org/packages/f7/ee/ec902e91834f3505e88365345cdd6b2d3a4eead66adaf8e19e274d801f52/matisse_controller-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9574cdbd1b494f062631fe10782adfab", "sha256": "4645295e89ca5c30eea02e36f94f8653991e21a9ab44c7bcbd91023b4dfa19b5"}, "downloads": -1, "filename": "matisse-controller-0.3.0.tar.gz", "has_sig": false, "md5_digest": "9574cdbd1b494f062631fe10782adfab", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.7", "size": 39384, "upload_time": "2019-08-02T20:57:06", "upload_time_iso_8601": "2019-08-02T20:57:06.593846Z", "url": "https://files.pythonhosted.org/packages/f9/37/06a615520130d800b184caa1cfc864630e7d120e4832325c2065cf85b023/matisse-controller-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "120c5341aedef2d03b61972eea4f49a0", "sha256": "cb9dd2948cd9c65638954200f4c0c32e2d5f96ad2165e4551f9f1cee4aecfccb"}, "downloads": -1, "filename": "matisse_controller-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "120c5341aedef2d03b61972eea4f49a0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.7", "size": 69041, "upload_time": "2019-08-23T20:46:50", "upload_time_iso_8601": "2019-08-23T20:46:50.685884Z", "url": "https://files.pythonhosted.org/packages/a4/12/e9a53c61a27a47ffcd1e650ef625407c2de5afb0a3efc3df3d04b537418a/matisse_controller-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1aaf8201edb2385512250a48b358d370", "sha256": "d813adecd5108b3802f1c51038dfd60d03b92949321b61a4ecacd5ebcd98fb6a"}, "downloads": -1, "filename": "matisse-controller-0.4.0.tar.gz", "has_sig": false, "md5_digest": "1aaf8201edb2385512250a48b358d370", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.7", "size": 54674, "upload_time": "2019-08-23T20:46:53", "upload_time_iso_8601": "2019-08-23T20:46:53.042840Z", "url": "https://files.pythonhosted.org/packages/3d/16/580995868a66677795cb2b02d08eda360138a317c7e840d38a009ec5bb72/matisse-controller-0.4.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "120c5341aedef2d03b61972eea4f49a0", "sha256": "cb9dd2948cd9c65638954200f4c0c32e2d5f96ad2165e4551f9f1cee4aecfccb"}, "downloads": -1, "filename": "matisse_controller-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "120c5341aedef2d03b61972eea4f49a0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.7", "size": 69041, "upload_time": "2019-08-23T20:46:50", "upload_time_iso_8601": "2019-08-23T20:46:50.685884Z", "url": "https://files.pythonhosted.org/packages/a4/12/e9a53c61a27a47ffcd1e650ef625407c2de5afb0a3efc3df3d04b537418a/matisse_controller-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1aaf8201edb2385512250a48b358d370", "sha256": "d813adecd5108b3802f1c51038dfd60d03b92949321b61a4ecacd5ebcd98fb6a"}, "downloads": -1, "filename": "matisse-controller-0.4.0.tar.gz", "has_sig": false, "md5_digest": "1aaf8201edb2385512250a48b358d370", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.7", "size": 54674, "upload_time": "2019-08-23T20:46:53", "upload_time_iso_8601": "2019-08-23T20:46:53.042840Z", "url": "https://files.pythonhosted.org/packages/3d/16/580995868a66677795cb2b02d08eda360138a317c7e840d38a009ec5bb72/matisse-controller-0.4.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:57:19 2020"}