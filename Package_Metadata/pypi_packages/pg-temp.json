{"info": {"author": "Uri Okrent", "author_email": "uokrent@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "pg_temp\n==========\n\n[![pg_temp build status](https://api.travis-ci.org/ugtar/pg_temp.svg?branch=master)](https://travis-ci.org/ugtar/pg_temp)\n\nProvides a simple class for creating a temporary userland Postgres db server.\n\nThe `TempDB()` class constructor will set up the database server in a temporary\ndirectory.  If any databases are specified they are created inside the newly\ncreated server.  The class provides a `cleanup()` method for stopping the\nserver and disposing of the temporary files.\n\nThe module also provides an `init_temp_db()` function for managing the `TempDB`\nclass as a singleton.  This is useful for scenarios where you want to import in\nmore than one module, but ensure that they all use the same database (and that\nthe server and database are only created once).  For example, this is handy in\nunit test code where you want to be able to test a single file or use a test\nrunner to run tests in multiple files with only a single database.\n\n`init_temp_db()` also registers an `atexit` handler to cleanup the temp\ndatabase when the process exits.\n\nExamples:\n---------\n\nCreate a temporary server with a database called 'testdb':\n```python\n\nfrom pg_temp import TempDB\ntemp_db = TempDB(databases=['testdb'])\n\n# you can connect to this database using temp_db's pg_socket_dir\nconnection = psycopg2.connect(host=temp_db.pg_socket_dir, database='testdb')\n\n# ... do stuff...\n\ntemp_db.cleanup()\n```\n\nAlternatively, useful in a test runner:\n\n```python\nimport pg_temp\ntemp_db = pg_temp.init_temp_db(databases=['testdb'])\n# repeat above in multiple modules\n\n# you can connect to this database using temp_db's pg_socket_dir\nconnection = psycopg2.connect(host=temp_db.pg_socket_dir, database='testdb')\n\n# ... do stuff...\n# the db is automatically cleaned up when the process exits\n```\n\nLast an interactive example:\n```python\n>>> import pg_temp\n>>> import psycopg2\n>>> temp_db = pg_temp.TempDB(databases=['testdb'])\nCreating temp PG server... done\n(Connect on: `psql -h /var/folders/d7/n3_h9vnn3w3bbmsnbdb73fmw0000gn/T/pg_tmp_OQMGwC/socket`)\n>>> connection = psycopg2.connect(host=temp_db.pg_socket_dir, database='testdb')\n>>> cur = connection.cursor()\n# The rest is stolen from psycopg's documentation.  You get the idea...\n>>> cur.execute(\"CREATE TABLE test (id serial PRIMARY KEY, num integer, data varchar);\")\n>>> cur.execute(\"INSERT INTO test (num, data) VALUES (%s, %s)\",\n... (100, \"abc'def\"))\n>>> cur.execute(\"SELECT * FROM test;\")\n>>> cur.fetchone()\n(1, 100, \"abc'def\")\n>>> connection.close()\n>>> temp_db.cleanup()\n```\n\n\nDevelopment\n-----------\n\nInstall dependencies for testing:\n\n    # Create a virtualenv\n    virtualenv env27\n\n    # Activate the virtualenv\n    . env27/bin/activate\n\n    # Install dependencies for testing\n    pip install -r requirements-dev.txt\n\nRun the unit tests directly:\n\n    make test\n\nTo test against multiple Python versions, without needing to use\nVirtualenv directly, run the unit tests using tox:\n\n    make tox\n\nCheck code style using flake8:\n\n    make check\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ugtar/pg_temp", "keywords": "postgres,testing", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pg-temp", "package_url": "https://pypi.org/project/pg-temp/", "platform": "POSIX", "project_url": "https://pypi.org/project/pg-temp/", "project_urls": {"Homepage": "https://github.com/ugtar/pg_temp"}, "release_url": "https://pypi.org/project/pg-temp/0.7.1/", "requires_dist": null, "requires_python": ">=3.5", "summary": "Quickly create Postgres databases, e.g. for testing", "version": "0.7.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pg_temp</h1>\n<p><a href=\"https://travis-ci.org/ugtar/pg_temp\" rel=\"nofollow\"><img alt=\"pg_temp build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6909c2660cec9471cc1041c7c2f20e50e9b1b5fd/68747470733a2f2f6170692e7472617669732d63692e6f72672f75677461722f70675f74656d702e7376673f6272616e63683d6d6173746572\"></a></p>\n<p>Provides a simple class for creating a temporary userland Postgres db server.</p>\n<p>The <code>TempDB()</code> class constructor will set up the database server in a temporary\ndirectory.  If any databases are specified they are created inside the newly\ncreated server.  The class provides a <code>cleanup()</code> method for stopping the\nserver and disposing of the temporary files.</p>\n<p>The module also provides an <code>init_temp_db()</code> function for managing the <code>TempDB</code>\nclass as a singleton.  This is useful for scenarios where you want to import in\nmore than one module, but ensure that they all use the same database (and that\nthe server and database are only created once).  For example, this is handy in\nunit test code where you want to be able to test a single file or use a test\nrunner to run tests in multiple files with only a single database.</p>\n<p><code>init_temp_db()</code> also registers an <code>atexit</code> handler to cleanup the temp\ndatabase when the process exits.</p>\n<h2>Examples:</h2>\n<p>Create a temporary server with a database called 'testdb':</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pg_temp</span> <span class=\"kn\">import</span> <span class=\"n\">TempDB</span>\n<span class=\"n\">temp_db</span> <span class=\"o\">=</span> <span class=\"n\">TempDB</span><span class=\"p\">(</span><span class=\"n\">databases</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'testdb'</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># you can connect to this database using temp_db's pg_socket_dir</span>\n<span class=\"n\">connection</span> <span class=\"o\">=</span> <span class=\"n\">psycopg2</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"o\">=</span><span class=\"n\">temp_db</span><span class=\"o\">.</span><span class=\"n\">pg_socket_dir</span><span class=\"p\">,</span> <span class=\"n\">database</span><span class=\"o\">=</span><span class=\"s1\">'testdb'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># ... do stuff...</span>\n\n<span class=\"n\">temp_db</span><span class=\"o\">.</span><span class=\"n\">cleanup</span><span class=\"p\">()</span>\n</pre>\n<p>Alternatively, useful in a test runner:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pg_temp</span>\n<span class=\"n\">temp_db</span> <span class=\"o\">=</span> <span class=\"n\">pg_temp</span><span class=\"o\">.</span><span class=\"n\">init_temp_db</span><span class=\"p\">(</span><span class=\"n\">databases</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'testdb'</span><span class=\"p\">])</span>\n<span class=\"c1\"># repeat above in multiple modules</span>\n\n<span class=\"c1\"># you can connect to this database using temp_db's pg_socket_dir</span>\n<span class=\"n\">connection</span> <span class=\"o\">=</span> <span class=\"n\">psycopg2</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"o\">=</span><span class=\"n\">temp_db</span><span class=\"o\">.</span><span class=\"n\">pg_socket_dir</span><span class=\"p\">,</span> <span class=\"n\">database</span><span class=\"o\">=</span><span class=\"s1\">'testdb'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># ... do stuff...</span>\n<span class=\"c1\"># the db is automatically cleaned up when the process exits</span>\n</pre>\n<p>Last an interactive example:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">pg_temp</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">psycopg2</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">temp_db</span> <span class=\"o\">=</span> <span class=\"n\">pg_temp</span><span class=\"o\">.</span><span class=\"n\">TempDB</span><span class=\"p\">(</span><span class=\"n\">databases</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'testdb'</span><span class=\"p\">])</span>\n<span class=\"n\">Creating</span> <span class=\"n\">temp</span> <span class=\"n\">PG</span> <span class=\"n\">server</span><span class=\"o\">...</span> <span class=\"n\">done</span>\n<span class=\"p\">(</span><span class=\"n\">Connect</span> <span class=\"n\">on</span><span class=\"p\">:</span> <span class=\"err\">`</span><span class=\"n\">psql</span> <span class=\"o\">-</span><span class=\"n\">h</span> <span class=\"o\">/</span><span class=\"n\">var</span><span class=\"o\">/</span><span class=\"n\">folders</span><span class=\"o\">/</span><span class=\"n\">d7</span><span class=\"o\">/</span><span class=\"n\">n3_h9vnn3w3bbmsnbdb73fmw0000gn</span><span class=\"o\">/</span><span class=\"n\">T</span><span class=\"o\">/</span><span class=\"n\">pg_tmp_OQMGwC</span><span class=\"o\">/</span><span class=\"n\">socket</span><span class=\"err\">`</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">connection</span> <span class=\"o\">=</span> <span class=\"n\">psycopg2</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"o\">=</span><span class=\"n\">temp_db</span><span class=\"o\">.</span><span class=\"n\">pg_socket_dir</span><span class=\"p\">,</span> <span class=\"n\">database</span><span class=\"o\">=</span><span class=\"s1\">'testdb'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cur</span> <span class=\"o\">=</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"p\">()</span>\n<span class=\"c1\"># The rest is stolen from psycopg's documentation.  You get the idea...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cur</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s2\">\"CREATE TABLE test (id serial PRIMARY KEY, num integer, data varchar);\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cur</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s2\">\"INSERT INTO test (num, data) VALUES (</span><span class=\"si\">%s</span><span class=\"s2\">, </span><span class=\"si\">%s</span><span class=\"s2\">)\"</span><span class=\"p\">,</span>\n<span class=\"o\">...</span> <span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"s2\">\"abc'def\"</span><span class=\"p\">))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cur</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s2\">\"SELECT * FROM test;\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cur</span><span class=\"o\">.</span><span class=\"n\">fetchone</span><span class=\"p\">()</span>\n<span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"s2\">\"abc'def\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">temp_db</span><span class=\"o\">.</span><span class=\"n\">cleanup</span><span class=\"p\">()</span>\n</pre>\n<h2>Development</h2>\n<p>Install dependencies for testing:</p>\n<pre><code># Create a virtualenv\nvirtualenv env27\n\n# Activate the virtualenv\n. env27/bin/activate\n\n# Install dependencies for testing\npip install -r requirements-dev.txt\n</code></pre>\n<p>Run the unit tests directly:</p>\n<pre><code>make test\n</code></pre>\n<p>To test against multiple Python versions, without needing to use\nVirtualenv directly, run the unit tests using tox:</p>\n<pre><code>make tox\n</code></pre>\n<p>Check code style using flake8:</p>\n<pre><code>make check\n</code></pre>\n\n          </div>"}, "last_serial": 6379886, "releases": {"0.5": [{"comment_text": "", "digests": {"md5": "661846e8c7eec3db0416172abf355a3e", "sha256": "55e82a491bcc89598c8bf61de888b7c4ae475174afbab20904902a65cf256219"}, "downloads": -1, "filename": "pg_temp-0.5.tar.gz", "has_sig": false, "md5_digest": "661846e8c7eec3db0416172abf355a3e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2965, "upload_time": "2016-08-07T14:51:57", "upload_time_iso_8601": "2016-08-07T14:51:57.847371Z", "url": "https://files.pythonhosted.org/packages/ca/0b/12970ad3aaf61d131d50ca0e0808786687fb762c6b858d4a24806955b6b2/pg_temp-0.5.tar.gz", "yanked": false}], "0.7.1": [{"comment_text": "", "digests": {"md5": "8450ef2379afec287c9af8e93b497183", "sha256": "6daf110239cc243e3e410684d6162bcc56535b925f9b33ab54dd8219ea5c79ae"}, "downloads": -1, "filename": "pg_temp-0.7.1-py3-none-any.whl", "has_sig": false, "md5_digest": "8450ef2379afec287c9af8e93b497183", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 5530, "upload_time": "2019-12-31T15:47:49", "upload_time_iso_8601": "2019-12-31T15:47:49.477539Z", "url": "https://files.pythonhosted.org/packages/e1/2b/5b3d80ba6c76466396039cd8839dd6aef8f49df23267981d10ef6a2e6d01/pg_temp-0.7.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3acb859feee289f8d46f3cd81edca3be", "sha256": "d6c1bf7e8a864f307511e2889d9a67dd70a6ebe848b9a78cf055973547c7ff3f"}, "downloads": -1, "filename": "pg_temp-0.7.1.tar.gz", "has_sig": false, "md5_digest": "3acb859feee289f8d46f3cd81edca3be", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 4885, "upload_time": "2019-12-31T15:47:50", "upload_time_iso_8601": "2019-12-31T15:47:50.706777Z", "url": "https://files.pythonhosted.org/packages/16/ac/f12a4f35f4e85fc2858cd57b13feb49375d2a29e90f996b8190b48bca656/pg_temp-0.7.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8450ef2379afec287c9af8e93b497183", "sha256": "6daf110239cc243e3e410684d6162bcc56535b925f9b33ab54dd8219ea5c79ae"}, "downloads": -1, "filename": "pg_temp-0.7.1-py3-none-any.whl", "has_sig": false, "md5_digest": "8450ef2379afec287c9af8e93b497183", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 5530, "upload_time": "2019-12-31T15:47:49", "upload_time_iso_8601": "2019-12-31T15:47:49.477539Z", "url": "https://files.pythonhosted.org/packages/e1/2b/5b3d80ba6c76466396039cd8839dd6aef8f49df23267981d10ef6a2e6d01/pg_temp-0.7.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3acb859feee289f8d46f3cd81edca3be", "sha256": "d6c1bf7e8a864f307511e2889d9a67dd70a6ebe848b9a78cf055973547c7ff3f"}, "downloads": -1, "filename": "pg_temp-0.7.1.tar.gz", "has_sig": false, "md5_digest": "3acb859feee289f8d46f3cd81edca3be", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 4885, "upload_time": "2019-12-31T15:47:50", "upload_time_iso_8601": "2019-12-31T15:47:50.706777Z", "url": "https://files.pythonhosted.org/packages/16/ac/f12a4f35f4e85fc2858cd57b13feb49375d2a29e90f996b8190b48bca656/pg_temp-0.7.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:41 2020"}