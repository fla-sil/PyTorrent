{"info": {"author": "Michael Lasevich", "author_email": "mlasevich+pyrsmq@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "![RSMQ: Redis Simple Message Queue for Node.js](https://img.webmart.de/rsmq_wide.png)\n\n[![Build Status](https://travis-ci.org/mlasevich/PyRSMQ.svg?branch=master)](https://travis-ci.org/mlasevich/PyRSMQ)\n[![Coverage Status](https://coveralls.io/repos/github/mlasevich/PyRSMQ/badge.svg?branch=master)](https://coveralls.io/github/mlasevich/PyRSMQ?branch=master)\n[![PyPI version](https://badge.fury.io/py/PyRSMQ.svg)](https://badge.fury.io/py/PyRSMQ)\n\n# Redis Simple Message Queue\n\nA lightweight message queue for Python that requires no dedicated queue server. Just a Redis server.\n\nThis is a Python implementation of [https://github.com/smrchy/rsmq](https://github.com/smrchy/rsmq))\n\n\n## PyRSMQ Release Notes\n\n* 0.4.1\n  * Add auto-decode option for messages from JSON (when possible) in Consumer (on by default)\n\n* 0.4.0\n  * Ability to import `RedisSMQ` from package rather than from the module (i.e. you can now use `from rsmq import RedisSMQ` instead of `from rsmq.rsmq import RedisSMQ`)\n  * Add quiet option to most commands to allow to hide errors if exceptions are disabled\n  * Additional unit tests\n  * Auto-encoding of non-string messages to JSON for sendMessage\n  * Add `RedisSMQConsumer` and `RedisSMQConsumerThread` for easier creation of queue consumers\n  * Add examples for simple producers/consumers\n\n* 0.3.1\n  * Fix message id generation match RSMQ algorithm\n\n* 0.3.0\n  * Make message id generation match RSMQ algorithm\n  * Allow any character in queue name other than `:`\n\n* 0.2.1\n  * Allow uppercase characters in queue names\n\n* 0.2.0 - Adding Python 2 support\n  * Some Python 2 support\n  * Some Unit tests\n  * Change `.exec()` to `.execute()` for P2 compatibility\n\n* 0.1.0 - initial version\n    * Initial port\n    * Missing \"Realtime\" mode\n    * Missing unit tests\n\n## Quick Intro to RSMQ\n\nRSMQ is trying to emulate Amazon's SQS-like functionality, where there is a named queue (name\nconsists of \"namespace\" and \"qname\") that is backed by Redis. Queue must be created before used.\nOnce created, _Producers_ will place messages in queue and _Consumers_ will retrieve them.\nMessages have a property of \"visibility\" - where any \"visible\" message may be consumed, but\n\"invisbile\" messages stay in the queue until they become visible or deleted.\n\nOnce queue exists, a _Producer_ can push messages into it. When pushing to queue, message gets a\nunique ID that is used to track the message. The ID can be used to delete message by _Producer_ or\n_Consumer_ or to control its \"visibility\"\n\nDuring insertion, a message may have a `delay` associated with it. \"Delay\" will mark message\n\"invisible\" for specified delay duration, and thus prevent it from being consumed. Delay may be\nspecified at time of message creation or, if not specified, default value set in queue attributes\nis used.\n\n_Consumer_ will retrieve next message in queue via either `receiveMessage()` or `popMessage()`\ncommand. If we do not care about reliability of the message beyond delivery, a good and simple way\nto retrieve it is via `popMessage()`.  When using `popMessage()` the message is automatically\ndeleted at the same time it is received.\n\nHowever in many cases we want to ensure that the message is not only received, but is also\nprocessed before being deleted. For this, `receiveMessage()` is best. When using `receiveMessage()`,\nthe message is kept in the queue, but is marked \"invisible\" for some amount of time. The amount of\ntime is specified by queue attribute `vt`(visibility timeout), which may also be overridden by\nspecifying a custom `vt` value in `receiveMessage()` call. When using  `receiveMessage()`,\n_Consumer_' is responsible for deleting the message before `vt` timeout occurs, otherwise the\nmessage may be picked up by another _Consumer_. _Consumer_ can also extend the timeout if it needs\nmore time, or clear the timeout if processing failed.\n\nA \"Realtime\" mode can be specified when using the RSMQ queue. \"Realtime\" mode adds a Redis PUBSUB\nbased notification that would allow _Consumers_ to be notified whenever a new message is added to\nthe queue. This can remove the need for _Consumer_ to constantly poll the queue when it is empty\n(*NOTE:* as of this writing, \"Realtime\" is not yet implemented in python version)\n\n## Python Implementation Notes\n\n*NOTE* This project is written for Python 3.x. While some attempts to get Python2 support were made\nI am not sure how stable it would be under Python 2\n\nThis version is heavily based on Java version (https://github.com/igr/jrsmq), which in turn is\nbased on the original Node.JS version.\n\n### API\nTo start with, best effort is made to maintain same method/parameter/usablity named of both version\n(which, admittedly, resulted in a not very pythonic API)\n\nAlthough much of the original API is still present, some alternatives are added to make life a bit\neasier.\n\nFor example, while you can set any available parameter to command using the \"setter\" method, you can\nalso simply specify the parameters when creating the command. So these two commands do same thing:\n\n    rqsm.createQueue().qname(\"my-queue\").vt(20).execute()\n\n    rqsm.createQueue(qname=\"my-queue\", vt=20).execute()\n\nIn addition, when creating a main controller, any non-controller parameters specified will become\ndefaults for all commands created via this controller - so, for example, you if you plan to work\nwith only one queue using this controller, you can specify the qname parameter during creation of\nthe controller and not need to specify it in every command.\n\n### A \"Consumer\" Service Utility\n\nIn addition to all the APIs in the original RSMQ project, a simple to use consumer implementation\nis included in this project as `RedisSMQConsumer` and `RedisSMQConsumerThread` classes.\n\n#### RedisSMQConsumer\nThe `RedisSMQConsumer` instance wraps an RSMQ Controller and is configured with a processor method\nwhich is called every time a new message is received. The processor method returns true or false \nto indicate if message was successfully received and the message is deleted or returned to the\nqueue based on that. The consumer auto-extends the visibility timeout as long as the processor is\nrunning, reducing the concern that item will become visible again if processing takes too long and\nvisibility timeout elapses.\n\nNOTE: Since currently the `realtime` functionality is not implemented, Consumer implementation is\ncurrently using polling to check for queue items. \n\nExample usage:\n\n```\nfrom rsmq.consumer import RedisSMQConsumer\n\n# define Processor\ndef processor(id, message, rc, ts):\n  ''' process the message '''\n  # Do something\n  return True\n\n# create consumer\nconsumer = RedisSMQConsumer('my-queue', processor, host='127.0.0.1')\n\n# run consumer\nconsumer.run()\n```\n\nFor a more complete example, see examples directory.\n\n\n#### RedisSMQConsumerThread\n\n`RedisSMQConsumerThread` is simply a version of `RedisSMQConsumer` that extends Thread class.\n\nOnce created you can start it like any other thread, or stop it using `stop(wait)` method, where\nwait specifies maximum time to wait for the thread to stop before returning (the thread would still\nbe trying to stop if the `wait` time expires)\n\nNote that the thread is by default set to be a `daemon` thread, so on exit of your main thread it\nwill be stopped. If you wish to disable daemon flag, just disable it before starting the thread as\nwith any other thread\n\nExample usage:\n\n```\nfrom rsmq.consumer import RedisSMQConsumerThread\n\n# define Processor\ndef processor(id, message, rc, ts):\n  ''' process the message '''\n  # Do something\n  return True\n\n# create consumer\nconsumer = RedisSMQConsumerThread('my-queue', processor, host='127.0.0.1')\n\n# start consumer\nconsumer.start()\n\n# do what else you need to, then stop the consumer\n# (waiting for 10 seconds for it to stop):\nconsumer.stop(10)\n\n```\n\nFor a more complete example, see examples directory.\n\n### General Usage Approach\n\nAs copied from other versions, the general approach is to create a controller object and use that\nobject to create, configure and then execute commands\n\n### Error Handling\n\nCommands follow the pattern of other versions and throw exceptions on error.\n\nExceptions are all extending `RedisSMQException()` and include:\n\n* `InvalidParameterValue()` - Invalid Parameter specified\n* `QueueAlreadyExists()` - attempt to create queue which already exists\n* `QueueDoesNotExist()` - attempt to use/delete queue that does not exist\n* `NoMessageInQueue()` - attempt to retrieve message from queue that has no visible messaged\n\nHowever, if you do not wish to use exceptions, you can turn them off on per-command or\nper-controller basis by using `.exceptions(False)` on the relevant object. For example, the\nfollowing will create Queue only if it does not exist without throwing an exception:\n\n    rsmq.createQueue().exceptions(False).execute()\n\n\n## Usage\n\n### Example Usage\n\nIn this example we will create a new queue named \"my-queue\", deleting previous version, if one\nexists, and then send a message with a 2 second delay. We will then demonstrate both the lack of\nmessage before delay expires and getting the message after timeout\n\n\n    from pprint import pprint\n    import time\n\n    from rsmq import RedisSMQ\n\n\n    # Create controller.\n    # In this case we are specifying the host and default queue name\n    queue = RedisSMQ(host=\"127.0.0.1\", qname=\"myqueue\")\n\n\n    # Delete Queue if it already exists, ignoring exceptions\n    queue.deleteQueue().exceptions(False).execute()\n\n    # Create Queue with default visibility timeout of 20 and delay of 0\n    # demonstrating here both ways of setting parameters\n    queue.createQueue(delay=0).vt(20).execute()\n\n    # Send a message with a 2 second delay\n    message_id = queue.sendMessage(delay=2).message(\"Hello World\").execute()\n\n    pprint({'queue_status': queue.getQueueAttributes().execute()})\n\n    # Try to get a message - this will not succeed, as our message has a delay and no other\n    # messages are in the queue\n    msg = queue.receiveMessage().exceptions(False).execute()\n\n    # Message should be False as we got no message\n    pprint({\"Message\": msg})\n\n    print(\"Waiting for our message to become visible\")\n    # Wait for our message to become visible\n    time.sleep(2)\n\n    pprint({'queue_status': queue.getQueueAttributes().execute()})\n    # Get our message\n    msg = queue.receiveMessage().execute()\n\n    # Message should now be there\n    pprint({\"Message\": msg})\n\n    # Delete Message\n    queue.deleteMessage(id=msg['id'])\n\n    pprint({'queue_status': queue.getQueueAttributes().execute()})\n    # delete our queue\n    queue.deleteQueue().execute()\n\n    # No action\n    queue.quit()\n\n\n\n### RedisSMQ Controller API Usage\n\nUsage: `rsmq.rqsm.RedisSMQ([options])`\n\n* Options (all options are provided as keyword options):\n    * Redis Connection arguments:\n        * `client` - provide an existing, configured redis client\n        or\n        * `host` - redis hostname (Default: `127.0.0.1`)\n        * `port` - redis port (Default: `6379`)\n        * `options` - additional redis client options. Defaults:\n            * `encoding`: `utf-8`\n            * `decode_responses`: `True`\n    * Controller Options\n        * `ns` - namespace - all redis keys are prepended with `<ns>:`. Default: `rsmq`\n        * `realtime` - if set to True, enables realtime option. Default: `False`\n        * `exceptions` - if set to True, throw exceptions for all commands. Default: `True`\n    * Default Command Options. Anything else is passed to each command as defaults. Examples:\n        * `qname` - default Queue Name\n\n#### Controller Methods\n\n* `exceptions(True/False)` - enable/disable exceptions\n* `setClient(client)` - specify new redis client object\n* `ns(namespace)` - set new namespace\n* `quit()` - disconnect from redis. This is mainly for compatibility with other versions. Does not do much\n\n#### Controller Commands\n\n* `createQueue()` - Create new queue\n    * **Parameters:**\n        * `qname` - (Required) name of the queue\n        * `vt` - default visibility timeout in seconds. Default: `30`\n        * `delay` - default delay (visibility timeout on insert). Default: `0`\n        * `maxsize` - maximum message size (1024-65535, Default: 65535)\n        * `quiet` - if set to `True` and exceptions are disabled, do not produce error log entries\n    * **Returns**:\n        * `True` if queue was created\n\n* `deleteQueue()` - Delete Existing queue\n   * Parameters:\n        * `qname` - (Required) name of the queue\n        * `quiet` - if set to `True` and exceptions are disabled, do not produce error log entries\n    * **Returns**:\n        * `True` if queue was deleted\n\n* `setQueueAttributes()` - Update queue attributes. If value is not specified, it is not updated.\n    * **Parameters:**\n        * `qname` - (Required) name of the queue\n        * `vt` - default visibility timeout in seconds. Default: `30`\n        * `delay` - default delay (visibility timeout on insert). Default: `0`\n        * `maxsize` - maximum message size (1024-65535, Default: 65535)\n        * `quiet` - if set to `True` and exceptions are disabled, do not produce error log entries\n    * **Returns**:\n        * output of `getQueueAttributes()` call\n\n* `getQueueAttributes()` - Get Queue Attributes and statistics\n   * Parameters:\n        * `qname` - (Required) name of the queue\n        * `quiet` - if set to `True` and exceptions are disabled, do not produce error log entries\n    * **Returns** a dictionary with following fields:\n        * `vt` -  default visibility timeout\n        * `delay` - default insertion delay\n        * `maxsize` -  max size of the message\n        * `totalrecv` - number of messages consumed. Note, this is incremented each time message is retrieved, so if it was not deleted and made visible again, it will show up here multiple times.\n        * `totalsent` - number of messages sent to queue.\n        * `created` -  unix timestamp (seconds since epoch) of when the queue was created\n        * `modified` -  unix timestamp (seconds since epoch) of when the queue was last updated\n        * `msgs` -  Total number of messages currently in the queue\n        * `hiddenmsgs` - Number of messages in queue that are not visible\n\n* `listQueues()` - List all queues in this namespace\n    * **Parameters:**\n    * **Returns**:\n        * All queue names in this namespace as a `set()`\n\n* `changeMessageVisibility()` - Change Message Visibility\n    * **Parameters:**\n        * `qname` - (Required) name of the queue\n        * `id` - (Required) message id\n        * `quiet` - if set to `True` and exceptions are disabled, do not produce error log entries\n        * ???\n    * **Returns**:\n        * ???\n\n* `sendMessage()` - Send message into queue\n    * **Parameters:**\n        * `qname` - (Required) name of the queue\n        * `message` - (Required) message id\n        * `delay` - Optional override of the `delay` for this message (If not specified, default for queue is used)\n        * `quiet` - if set to `True` and exceptions are disabled, do not produce error log entries\n        * `encode` if set to `True`, force encode message as JSON string. If False, try to auto-detect if message needs to be encoded\n    * **Returns**:\n        * message id of the sent message\n\n* `receiveMessage()` - Receive Message from queue and mark it invisible\n    * **Parameters:**\n        * `qname` - (Required) name of the queue\n        * `vt` - Optional override for visibility timeout for this message (If not specified, default for queue is used)\n        * `quiet` - if set to `True` and exceptions are disabled, do not produce error log entries\n    * **Returns** dictionary for following fields:\n        * `id` - message id\n        * `message` - message content\n        * `rc` - receive count - how many times this message was received\n        * `ts` - unix timestamp of when the message was originally sent\n\n* `popMessage()` -  Receive Message from queue and delete it from queue\n    * **Parameters:**\n        * `qname` - (Required) name of the queue\n        * `quiet` - if set to `True` and exceptions are disabled, do not produce error log entries\n    * **Returns** dictionary for following fields:\n        * `id` - message id\n        * `message` - message content\n        * `rc` - receive count - how many times this message was received\n        * `ts` - unix timestamp of when the message was originally sent\n\n* `deleteMessage()` -  Delete Message from queue\n    * **Parameters:**\n        * `qname` - (Required) name of the queue\n        * `id` - (Required) message id\n        * `quiet` - if set to `True` and exceptions are disabled, do not produce error log entries\n    * **Returns**:\n        * `True` if message was deleted\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://mlasevich.github.io/PyRSMQ/", "keywords": "", "license": "Apache 2.0", "maintainer": "", "maintainer_email": "", "name": "PyRSMQ", "package_url": "https://pypi.org/project/PyRSMQ/", "platform": "", "project_url": "https://pypi.org/project/PyRSMQ/", "project_urls": {"Homepage": "https://mlasevich.github.io/PyRSMQ/"}, "release_url": "https://pypi.org/project/PyRSMQ/0.4.1/", "requires_dist": ["redis"], "requires_python": "", "summary": "Python Implementation of Redis SMQ", "version": "0.4.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><img alt=\"RSMQ: Redis Simple Message Queue for Node.js\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5b310d46a8ec147342eefac8aa61f97a4cb31e7c/68747470733a2f2f696d672e7765626d6172742e64652f72736d715f776964652e706e67\"></p>\n<p><a href=\"https://travis-ci.org/mlasevich/PyRSMQ\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/eff09f64c721a37fcc49885fa8485b8c88c6e95a/68747470733a2f2f7472617669732d63692e6f72672f6d6c617365766963682f507952534d512e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/mlasevich/PyRSMQ?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ddb0b4905cb5d05e0670e37ddf9fac6eec817fa6/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6d6c617365766963682f507952534d512f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://badge.fury.io/py/PyRSMQ\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/857122d4aa539d1ca4a33a00d83b01a2dcc5067a/68747470733a2f2f62616467652e667572792e696f2f70792f507952534d512e737667\"></a></p>\n<h1>Redis Simple Message Queue</h1>\n<p>A lightweight message queue for Python that requires no dedicated queue server. Just a Redis server.</p>\n<p>This is a Python implementation of <a href=\"https://github.com/smrchy/rsmq\" rel=\"nofollow\">https://github.com/smrchy/rsmq</a>)</p>\n<h2>PyRSMQ Release Notes</h2>\n<ul>\n<li>\n<p>0.4.1</p>\n<ul>\n<li>Add auto-decode option for messages from JSON (when possible) in Consumer (on by default)</li>\n</ul>\n</li>\n<li>\n<p>0.4.0</p>\n<ul>\n<li>Ability to import <code>RedisSMQ</code> from package rather than from the module (i.e. you can now use <code>from rsmq import RedisSMQ</code> instead of <code>from rsmq.rsmq import RedisSMQ</code>)</li>\n<li>Add quiet option to most commands to allow to hide errors if exceptions are disabled</li>\n<li>Additional unit tests</li>\n<li>Auto-encoding of non-string messages to JSON for sendMessage</li>\n<li>Add <code>RedisSMQConsumer</code> and <code>RedisSMQConsumerThread</code> for easier creation of queue consumers</li>\n<li>Add examples for simple producers/consumers</li>\n</ul>\n</li>\n<li>\n<p>0.3.1</p>\n<ul>\n<li>Fix message id generation match RSMQ algorithm</li>\n</ul>\n</li>\n<li>\n<p>0.3.0</p>\n<ul>\n<li>Make message id generation match RSMQ algorithm</li>\n<li>Allow any character in queue name other than <code>:</code></li>\n</ul>\n</li>\n<li>\n<p>0.2.1</p>\n<ul>\n<li>Allow uppercase characters in queue names</li>\n</ul>\n</li>\n<li>\n<p>0.2.0 - Adding Python 2 support</p>\n<ul>\n<li>Some Python 2 support</li>\n<li>Some Unit tests</li>\n<li>Change <code>.exec()</code> to <code>.execute()</code> for P2 compatibility</li>\n</ul>\n</li>\n<li>\n<p>0.1.0 - initial version</p>\n<ul>\n<li>Initial port</li>\n<li>Missing \"Realtime\" mode</li>\n<li>Missing unit tests</li>\n</ul>\n</li>\n</ul>\n<h2>Quick Intro to RSMQ</h2>\n<p>RSMQ is trying to emulate Amazon's SQS-like functionality, where there is a named queue (name\nconsists of \"namespace\" and \"qname\") that is backed by Redis. Queue must be created before used.\nOnce created, <em>Producers</em> will place messages in queue and <em>Consumers</em> will retrieve them.\nMessages have a property of \"visibility\" - where any \"visible\" message may be consumed, but\n\"invisbile\" messages stay in the queue until they become visible or deleted.</p>\n<p>Once queue exists, a <em>Producer</em> can push messages into it. When pushing to queue, message gets a\nunique ID that is used to track the message. The ID can be used to delete message by <em>Producer</em> or\n<em>Consumer</em> or to control its \"visibility\"</p>\n<p>During insertion, a message may have a <code>delay</code> associated with it. \"Delay\" will mark message\n\"invisible\" for specified delay duration, and thus prevent it from being consumed. Delay may be\nspecified at time of message creation or, if not specified, default value set in queue attributes\nis used.</p>\n<p><em>Consumer</em> will retrieve next message in queue via either <code>receiveMessage()</code> or <code>popMessage()</code>\ncommand. If we do not care about reliability of the message beyond delivery, a good and simple way\nto retrieve it is via <code>popMessage()</code>.  When using <code>popMessage()</code> the message is automatically\ndeleted at the same time it is received.</p>\n<p>However in many cases we want to ensure that the message is not only received, but is also\nprocessed before being deleted. For this, <code>receiveMessage()</code> is best. When using <code>receiveMessage()</code>,\nthe message is kept in the queue, but is marked \"invisible\" for some amount of time. The amount of\ntime is specified by queue attribute <code>vt</code>(visibility timeout), which may also be overridden by\nspecifying a custom <code>vt</code> value in <code>receiveMessage()</code> call. When using  <code>receiveMessage()</code>,\n<em>Consumer</em>' is responsible for deleting the message before <code>vt</code> timeout occurs, otherwise the\nmessage may be picked up by another <em>Consumer</em>. <em>Consumer</em> can also extend the timeout if it needs\nmore time, or clear the timeout if processing failed.</p>\n<p>A \"Realtime\" mode can be specified when using the RSMQ queue. \"Realtime\" mode adds a Redis PUBSUB\nbased notification that would allow <em>Consumers</em> to be notified whenever a new message is added to\nthe queue. This can remove the need for <em>Consumer</em> to constantly poll the queue when it is empty\n(<em>NOTE:</em> as of this writing, \"Realtime\" is not yet implemented in python version)</p>\n<h2>Python Implementation Notes</h2>\n<p><em>NOTE</em> This project is written for Python 3.x. While some attempts to get Python2 support were made\nI am not sure how stable it would be under Python 2</p>\n<p>This version is heavily based on Java version (<a href=\"https://github.com/igr/jrsmq\" rel=\"nofollow\">https://github.com/igr/jrsmq</a>), which in turn is\nbased on the original Node.JS version.</p>\n<h3>API</h3>\n<p>To start with, best effort is made to maintain same method/parameter/usablity named of both version\n(which, admittedly, resulted in a not very pythonic API)</p>\n<p>Although much of the original API is still present, some alternatives are added to make life a bit\neasier.</p>\n<p>For example, while you can set any available parameter to command using the \"setter\" method, you can\nalso simply specify the parameters when creating the command. So these two commands do same thing:</p>\n<pre><code>rqsm.createQueue().qname(\"my-queue\").vt(20).execute()\n\nrqsm.createQueue(qname=\"my-queue\", vt=20).execute()\n</code></pre>\n<p>In addition, when creating a main controller, any non-controller parameters specified will become\ndefaults for all commands created via this controller - so, for example, you if you plan to work\nwith only one queue using this controller, you can specify the qname parameter during creation of\nthe controller and not need to specify it in every command.</p>\n<h3>A \"Consumer\" Service Utility</h3>\n<p>In addition to all the APIs in the original RSMQ project, a simple to use consumer implementation\nis included in this project as <code>RedisSMQConsumer</code> and <code>RedisSMQConsumerThread</code> classes.</p>\n<h4>RedisSMQConsumer</h4>\n<p>The <code>RedisSMQConsumer</code> instance wraps an RSMQ Controller and is configured with a processor method\nwhich is called every time a new message is received. The processor method returns true or false\nto indicate if message was successfully received and the message is deleted or returned to the\nqueue based on that. The consumer auto-extends the visibility timeout as long as the processor is\nrunning, reducing the concern that item will become visible again if processing takes too long and\nvisibility timeout elapses.</p>\n<p>NOTE: Since currently the <code>realtime</code> functionality is not implemented, Consumer implementation is\ncurrently using polling to check for queue items.</p>\n<p>Example usage:</p>\n<pre><code>from rsmq.consumer import RedisSMQConsumer\n\n# define Processor\ndef processor(id, message, rc, ts):\n  ''' process the message '''\n  # Do something\n  return True\n\n# create consumer\nconsumer = RedisSMQConsumer('my-queue', processor, host='127.0.0.1')\n\n# run consumer\nconsumer.run()\n</code></pre>\n<p>For a more complete example, see examples directory.</p>\n<h4>RedisSMQConsumerThread</h4>\n<p><code>RedisSMQConsumerThread</code> is simply a version of <code>RedisSMQConsumer</code> that extends Thread class.</p>\n<p>Once created you can start it like any other thread, or stop it using <code>stop(wait)</code> method, where\nwait specifies maximum time to wait for the thread to stop before returning (the thread would still\nbe trying to stop if the <code>wait</code> time expires)</p>\n<p>Note that the thread is by default set to be a <code>daemon</code> thread, so on exit of your main thread it\nwill be stopped. If you wish to disable daemon flag, just disable it before starting the thread as\nwith any other thread</p>\n<p>Example usage:</p>\n<pre><code>from rsmq.consumer import RedisSMQConsumerThread\n\n# define Processor\ndef processor(id, message, rc, ts):\n  ''' process the message '''\n  # Do something\n  return True\n\n# create consumer\nconsumer = RedisSMQConsumerThread('my-queue', processor, host='127.0.0.1')\n\n# start consumer\nconsumer.start()\n\n# do what else you need to, then stop the consumer\n# (waiting for 10 seconds for it to stop):\nconsumer.stop(10)\n\n</code></pre>\n<p>For a more complete example, see examples directory.</p>\n<h3>General Usage Approach</h3>\n<p>As copied from other versions, the general approach is to create a controller object and use that\nobject to create, configure and then execute commands</p>\n<h3>Error Handling</h3>\n<p>Commands follow the pattern of other versions and throw exceptions on error.</p>\n<p>Exceptions are all extending <code>RedisSMQException()</code> and include:</p>\n<ul>\n<li><code>InvalidParameterValue()</code> - Invalid Parameter specified</li>\n<li><code>QueueAlreadyExists()</code> - attempt to create queue which already exists</li>\n<li><code>QueueDoesNotExist()</code> - attempt to use/delete queue that does not exist</li>\n<li><code>NoMessageInQueue()</code> - attempt to retrieve message from queue that has no visible messaged</li>\n</ul>\n<p>However, if you do not wish to use exceptions, you can turn them off on per-command or\nper-controller basis by using <code>.exceptions(False)</code> on the relevant object. For example, the\nfollowing will create Queue only if it does not exist without throwing an exception:</p>\n<pre><code>rsmq.createQueue().exceptions(False).execute()\n</code></pre>\n<h2>Usage</h2>\n<h3>Example Usage</h3>\n<p>In this example we will create a new queue named \"my-queue\", deleting previous version, if one\nexists, and then send a message with a 2 second delay. We will then demonstrate both the lack of\nmessage before delay expires and getting the message after timeout</p>\n<pre><code>from pprint import pprint\nimport time\n\nfrom rsmq import RedisSMQ\n\n\n# Create controller.\n# In this case we are specifying the host and default queue name\nqueue = RedisSMQ(host=\"127.0.0.1\", qname=\"myqueue\")\n\n\n# Delete Queue if it already exists, ignoring exceptions\nqueue.deleteQueue().exceptions(False).execute()\n\n# Create Queue with default visibility timeout of 20 and delay of 0\n# demonstrating here both ways of setting parameters\nqueue.createQueue(delay=0).vt(20).execute()\n\n# Send a message with a 2 second delay\nmessage_id = queue.sendMessage(delay=2).message(\"Hello World\").execute()\n\npprint({'queue_status': queue.getQueueAttributes().execute()})\n\n# Try to get a message - this will not succeed, as our message has a delay and no other\n# messages are in the queue\nmsg = queue.receiveMessage().exceptions(False).execute()\n\n# Message should be False as we got no message\npprint({\"Message\": msg})\n\nprint(\"Waiting for our message to become visible\")\n# Wait for our message to become visible\ntime.sleep(2)\n\npprint({'queue_status': queue.getQueueAttributes().execute()})\n# Get our message\nmsg = queue.receiveMessage().execute()\n\n# Message should now be there\npprint({\"Message\": msg})\n\n# Delete Message\nqueue.deleteMessage(id=msg['id'])\n\npprint({'queue_status': queue.getQueueAttributes().execute()})\n# delete our queue\nqueue.deleteQueue().execute()\n\n# No action\nqueue.quit()\n</code></pre>\n<h3>RedisSMQ Controller API Usage</h3>\n<p>Usage: <code>rsmq.rqsm.RedisSMQ([options])</code></p>\n<ul>\n<li>Options (all options are provided as keyword options):\n<ul>\n<li>Redis Connection arguments:\n<ul>\n<li><code>client</code> - provide an existing, configured redis client\nor</li>\n<li><code>host</code> - redis hostname (Default: <code>127.0.0.1</code>)</li>\n<li><code>port</code> - redis port (Default: <code>6379</code>)</li>\n<li><code>options</code> - additional redis client options. Defaults:\n<ul>\n<li><code>encoding</code>: <code>utf-8</code></li>\n<li><code>decode_responses</code>: <code>True</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Controller Options\n<ul>\n<li><code>ns</code> - namespace - all redis keys are prepended with <code>&lt;ns&gt;:</code>. Default: <code>rsmq</code></li>\n<li><code>realtime</code> - if set to True, enables realtime option. Default: <code>False</code></li>\n<li><code>exceptions</code> - if set to True, throw exceptions for all commands. Default: <code>True</code></li>\n</ul>\n</li>\n<li>Default Command Options. Anything else is passed to each command as defaults. Examples:\n<ul>\n<li><code>qname</code> - default Queue Name</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4>Controller Methods</h4>\n<ul>\n<li><code>exceptions(True/False)</code> - enable/disable exceptions</li>\n<li><code>setClient(client)</code> - specify new redis client object</li>\n<li><code>ns(namespace)</code> - set new namespace</li>\n<li><code>quit()</code> - disconnect from redis. This is mainly for compatibility with other versions. Does not do much</li>\n</ul>\n<h4>Controller Commands</h4>\n<ul>\n<li>\n<p><code>createQueue()</code> - Create new queue</p>\n<ul>\n<li><strong>Parameters:</strong>\n<ul>\n<li><code>qname</code> - (Required) name of the queue</li>\n<li><code>vt</code> - default visibility timeout in seconds. Default: <code>30</code></li>\n<li><code>delay</code> - default delay (visibility timeout on insert). Default: <code>0</code></li>\n<li><code>maxsize</code> - maximum message size (1024-65535, Default: 65535)</li>\n<li><code>quiet</code> - if set to <code>True</code> and exceptions are disabled, do not produce error log entries</li>\n</ul>\n</li>\n<li><strong>Returns</strong>:\n<ul>\n<li><code>True</code> if queue was created</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>deleteQueue()</code> - Delete Existing queue</p>\n<ul>\n<li>Parameters:\n<ul>\n<li><code>qname</code> - (Required) name of the queue</li>\n<li><code>quiet</code> - if set to <code>True</code> and exceptions are disabled, do not produce error log entries</li>\n</ul>\n</li>\n<li><strong>Returns</strong>:\n<ul>\n<li><code>True</code> if queue was deleted</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>setQueueAttributes()</code> - Update queue attributes. If value is not specified, it is not updated.</p>\n<ul>\n<li><strong>Parameters:</strong>\n<ul>\n<li><code>qname</code> - (Required) name of the queue</li>\n<li><code>vt</code> - default visibility timeout in seconds. Default: <code>30</code></li>\n<li><code>delay</code> - default delay (visibility timeout on insert). Default: <code>0</code></li>\n<li><code>maxsize</code> - maximum message size (1024-65535, Default: 65535)</li>\n<li><code>quiet</code> - if set to <code>True</code> and exceptions are disabled, do not produce error log entries</li>\n</ul>\n</li>\n<li><strong>Returns</strong>:\n<ul>\n<li>output of <code>getQueueAttributes()</code> call</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>getQueueAttributes()</code> - Get Queue Attributes and statistics</p>\n<ul>\n<li>Parameters:\n<ul>\n<li><code>qname</code> - (Required) name of the queue</li>\n<li><code>quiet</code> - if set to <code>True</code> and exceptions are disabled, do not produce error log entries</li>\n</ul>\n</li>\n<li><strong>Returns</strong> a dictionary with following fields:\n<ul>\n<li><code>vt</code> -  default visibility timeout</li>\n<li><code>delay</code> - default insertion delay</li>\n<li><code>maxsize</code> -  max size of the message</li>\n<li><code>totalrecv</code> - number of messages consumed. Note, this is incremented each time message is retrieved, so if it was not deleted and made visible again, it will show up here multiple times.</li>\n<li><code>totalsent</code> - number of messages sent to queue.</li>\n<li><code>created</code> -  unix timestamp (seconds since epoch) of when the queue was created</li>\n<li><code>modified</code> -  unix timestamp (seconds since epoch) of when the queue was last updated</li>\n<li><code>msgs</code> -  Total number of messages currently in the queue</li>\n<li><code>hiddenmsgs</code> - Number of messages in queue that are not visible</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>listQueues()</code> - List all queues in this namespace</p>\n<ul>\n<li><strong>Parameters:</strong></li>\n<li><strong>Returns</strong>:\n<ul>\n<li>All queue names in this namespace as a <code>set()</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>changeMessageVisibility()</code> - Change Message Visibility</p>\n<ul>\n<li><strong>Parameters:</strong>\n<ul>\n<li><code>qname</code> - (Required) name of the queue</li>\n<li><code>id</code> - (Required) message id</li>\n<li><code>quiet</code> - if set to <code>True</code> and exceptions are disabled, do not produce error log entries</li>\n<li>???</li>\n</ul>\n</li>\n<li><strong>Returns</strong>:\n<ul>\n<li>???</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>sendMessage()</code> - Send message into queue</p>\n<ul>\n<li><strong>Parameters:</strong>\n<ul>\n<li><code>qname</code> - (Required) name of the queue</li>\n<li><code>message</code> - (Required) message id</li>\n<li><code>delay</code> - Optional override of the <code>delay</code> for this message (If not specified, default for queue is used)</li>\n<li><code>quiet</code> - if set to <code>True</code> and exceptions are disabled, do not produce error log entries</li>\n<li><code>encode</code> if set to <code>True</code>, force encode message as JSON string. If False, try to auto-detect if message needs to be encoded</li>\n</ul>\n</li>\n<li><strong>Returns</strong>:\n<ul>\n<li>message id of the sent message</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>receiveMessage()</code> - Receive Message from queue and mark it invisible</p>\n<ul>\n<li><strong>Parameters:</strong>\n<ul>\n<li><code>qname</code> - (Required) name of the queue</li>\n<li><code>vt</code> - Optional override for visibility timeout for this message (If not specified, default for queue is used)</li>\n<li><code>quiet</code> - if set to <code>True</code> and exceptions are disabled, do not produce error log entries</li>\n</ul>\n</li>\n<li><strong>Returns</strong> dictionary for following fields:\n<ul>\n<li><code>id</code> - message id</li>\n<li><code>message</code> - message content</li>\n<li><code>rc</code> - receive count - how many times this message was received</li>\n<li><code>ts</code> - unix timestamp of when the message was originally sent</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>popMessage()</code> -  Receive Message from queue and delete it from queue</p>\n<ul>\n<li><strong>Parameters:</strong>\n<ul>\n<li><code>qname</code> - (Required) name of the queue</li>\n<li><code>quiet</code> - if set to <code>True</code> and exceptions are disabled, do not produce error log entries</li>\n</ul>\n</li>\n<li><strong>Returns</strong> dictionary for following fields:\n<ul>\n<li><code>id</code> - message id</li>\n<li><code>message</code> - message content</li>\n<li><code>rc</code> - receive count - how many times this message was received</li>\n<li><code>ts</code> - unix timestamp of when the message was originally sent</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>deleteMessage()</code> -  Delete Message from queue</p>\n<ul>\n<li><strong>Parameters:</strong>\n<ul>\n<li><code>qname</code> - (Required) name of the queue</li>\n<li><code>id</code> - (Required) message id</li>\n<li><code>quiet</code> - if set to <code>True</code> and exceptions are disabled, do not produce error log entries</li>\n</ul>\n</li>\n<li><strong>Returns</strong>:\n<ul>\n<li><code>True</code> if message was deleted</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n\n          </div>"}, "last_serial": 4669341, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "f09daee8ab56b4c4a867a2a5dd5ba00b", "sha256": "deb61014711edb0a9270b0933ca86cbf998ccd04b549531fc34261548a1534ee"}, "downloads": -1, "filename": "PyRSMQ-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "f09daee8ab56b4c4a867a2a5dd5ba00b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 22674, "upload_time": "2018-12-19T03:53:06", "upload_time_iso_8601": "2018-12-19T03:53:06.858528Z", "url": "https://files.pythonhosted.org/packages/eb/bb/1466515b4d24e42d2036a6b3bdef08f6e9f5bade8abd0cbd3b3adbdd0338/PyRSMQ-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "971c162c0d2d6b0dbcb1f78a3397c066", "sha256": "a0e2a4f7d5022e44c0da87667bf9acc0e59262cb07c33899b869d1488a4b2ac3"}, "downloads": -1, "filename": "PyRSMQ-0.1.1.tar.gz", "has_sig": false, "md5_digest": "971c162c0d2d6b0dbcb1f78a3397c066", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13725, "upload_time": "2018-12-19T03:53:08", "upload_time_iso_8601": "2018-12-19T03:53:08.739324Z", "url": "https://files.pythonhosted.org/packages/07/fa/eaf24ad1981a037eb63a1da1e84c0f508fa0c1c29dc32367c1c9adcf548c/PyRSMQ-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "b8cb879ff0a352b2fe480f99fb5b1eff", "sha256": "6e69d8b373a13b7192a1db6c35607f4d5cb9039a90fb5aa063ff6f22468dfe05"}, "downloads": -1, "filename": "PyRSMQ-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b8cb879ff0a352b2fe480f99fb5b1eff", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 22614, "upload_time": "2018-12-19T08:05:37", "upload_time_iso_8601": "2018-12-19T08:05:37.644325Z", "url": "https://files.pythonhosted.org/packages/22/4a/784fa538de68fea79877fddaeefc644af36573fa1e7d7a75e6d9b70d0e70/PyRSMQ-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c42f25b1fd0ebfda875fcacbcee844ae", "sha256": "399c32ba7be9d1a09cc23aa380efb9780b96c182544fcd18033ea053f488afff"}, "downloads": -1, "filename": "PyRSMQ-0.2.0.tar.gz", "has_sig": false, "md5_digest": "c42f25b1fd0ebfda875fcacbcee844ae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13769, "upload_time": "2018-12-19T08:05:38", "upload_time_iso_8601": "2018-12-19T08:05:38.663955Z", "url": "https://files.pythonhosted.org/packages/c5/e5/8494d6dfa391299d443bfc788c43f64f61a3c175d6f4f2cd277d427a110c/PyRSMQ-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "2ab0ca7d996c738699dc2043c6bea994", "sha256": "d9fce202ef8886164dd6f9342076e4caf8240f240a0639e9be0e6e2f521ccb6e"}, "downloads": -1, "filename": "PyRSMQ-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "2ab0ca7d996c738699dc2043c6bea994", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23656, "upload_time": "2018-12-20T19:59:36", "upload_time_iso_8601": "2018-12-20T19:59:36.336603Z", "url": "https://files.pythonhosted.org/packages/19/e9/e7bb0d35eadf8eeb12c7fe3caf08ece72b0380ea09ae47ee4dd235c37dd1/PyRSMQ-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8b0f5abcce8d039631edbcdbcb32bfa6", "sha256": "c4d1b08c2f2b1bdf311dcac13c704af0ba4ded49257be5a09e2a4fe1d8a72537"}, "downloads": -1, "filename": "PyRSMQ-0.3.0.tar.gz", "has_sig": false, "md5_digest": "8b0f5abcce8d039631edbcdbcb32bfa6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14849, "upload_time": "2018-12-20T19:59:37", "upload_time_iso_8601": "2018-12-20T19:59:37.761629Z", "url": "https://files.pythonhosted.org/packages/e8/32/e57c688402c9d2df4dd2094e0993d753dbfff5efac1d9d7663408ca5d039/PyRSMQ-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "880953dc1857e5f9efe4c19187a47c5f", "sha256": "91518fec54b008038ce14ce7a0729dd8f721d1b33591a4511b1c811da2f0d1be"}, "downloads": -1, "filename": "PyRSMQ-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "880953dc1857e5f9efe4c19187a47c5f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23542, "upload_time": "2018-12-21T05:26:02", "upload_time_iso_8601": "2018-12-21T05:26:02.260847Z", "url": "https://files.pythonhosted.org/packages/e2/74/47b19f1a2a35f61754cccba970be67c5aa3009c758b9fcc29f116d88277b/PyRSMQ-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "58680c39cec370d1880afceb697791dc", "sha256": "cc532b297a4204a277e8b0a5dccc031103d3805886ae943bc6bd75cde602b6da"}, "downloads": -1, "filename": "PyRSMQ-0.3.1.tar.gz", "has_sig": false, "md5_digest": "58680c39cec370d1880afceb697791dc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14723, "upload_time": "2018-12-21T05:26:03", "upload_time_iso_8601": "2018-12-21T05:26:03.681537Z", "url": "https://files.pythonhosted.org/packages/e2/a6/690b6f7131e8294f2b900ca808138773e21e3cd494e44805f8234e06542f/PyRSMQ-0.3.1.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "9e1f776c1200e975a7a77a481be8643f", "sha256": "0cca5bee8297025d69da0df245a3a9c2d25d06a6210be8615bccc07a36f1f244"}, "downloads": -1, "filename": "PyRSMQ-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "9e1f776c1200e975a7a77a481be8643f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 28540, "upload_time": "2019-01-04T01:43:04", "upload_time_iso_8601": "2019-01-04T01:43:04.971658Z", "url": "https://files.pythonhosted.org/packages/4b/6b/b7cfb192327e54695e87874b75691b6ec837bd922290916b4107a005ec76/PyRSMQ-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f65161410857443df87920d3588bd185", "sha256": "5841d756bb6fe9db17de7a8dba13d5f4965e1c2fe00d330be792e8c668fa96f5"}, "downloads": -1, "filename": "PyRSMQ-0.4.0.tar.gz", "has_sig": false, "md5_digest": "f65161410857443df87920d3588bd185", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30192, "upload_time": "2019-01-04T01:43:06", "upload_time_iso_8601": "2019-01-04T01:43:06.581123Z", "url": "https://files.pythonhosted.org/packages/6f/4c/af075175c08ed7ef970bc9d458f1d2951cb3322c3728ec2bec3440b11fd5/PyRSMQ-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "162657667f4244a6fde1cc33ef3bf0e0", "sha256": "4822965c245fe75643b55f2a1bd8078849172fe4bcb507a65ec77b1bc398aae2"}, "downloads": -1, "filename": "PyRSMQ-0.4.1-py3-none-any.whl", "has_sig": false, "md5_digest": "162657667f4244a6fde1cc33ef3bf0e0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 28672, "upload_time": "2019-01-07T16:30:47", "upload_time_iso_8601": "2019-01-07T16:30:47.889756Z", "url": "https://files.pythonhosted.org/packages/20/79/38e0f5fd209eae46763298b25f215c8b263c4047233300a9c9ff44b32018/PyRSMQ-0.4.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3161f493281e7cfa6db80c97334fc701", "sha256": "2be03f58720490f6196f3eae80d5ca0fceda245f2ccbe7d1c814ebda8613115a"}, "downloads": -1, "filename": "PyRSMQ-0.4.1.tar.gz", "has_sig": false, "md5_digest": "3161f493281e7cfa6db80c97334fc701", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30404, "upload_time": "2019-01-07T16:30:49", "upload_time_iso_8601": "2019-01-07T16:30:49.732520Z", "url": "https://files.pythonhosted.org/packages/6f/0a/7bbc74b189c7fd187a3fec486c39400d6901066cc912fd6931903be5fa1e/PyRSMQ-0.4.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "162657667f4244a6fde1cc33ef3bf0e0", "sha256": "4822965c245fe75643b55f2a1bd8078849172fe4bcb507a65ec77b1bc398aae2"}, "downloads": -1, "filename": "PyRSMQ-0.4.1-py3-none-any.whl", "has_sig": false, "md5_digest": "162657667f4244a6fde1cc33ef3bf0e0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 28672, "upload_time": "2019-01-07T16:30:47", "upload_time_iso_8601": "2019-01-07T16:30:47.889756Z", "url": "https://files.pythonhosted.org/packages/20/79/38e0f5fd209eae46763298b25f215c8b263c4047233300a9c9ff44b32018/PyRSMQ-0.4.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3161f493281e7cfa6db80c97334fc701", "sha256": "2be03f58720490f6196f3eae80d5ca0fceda245f2ccbe7d1c814ebda8613115a"}, "downloads": -1, "filename": "PyRSMQ-0.4.1.tar.gz", "has_sig": false, "md5_digest": "3161f493281e7cfa6db80c97334fc701", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30404, "upload_time": "2019-01-07T16:30:49", "upload_time_iso_8601": "2019-01-07T16:30:49.732520Z", "url": "https://files.pythonhosted.org/packages/6f/0a/7bbc74b189c7fd187a3fec486c39400d6901066cc912fd6931903be5fa1e/PyRSMQ-0.4.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:32 2020"}