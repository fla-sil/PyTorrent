{"info": {"author": "Alexander Tikhonov", "author_email": "random.gauss@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only"], "description": "# aiocached\n\n> **aioached** is a simple package with decorator `cached` to cache results of\n>ordinary and coroutine functions with configurable TTL and `None` value support\n\n[![Latest Version](https://img.shields.io/pypi/v/aiocached.svg)](https://pypi.python.org/pypi/aiocached)\n[![Python Version](https://img.shields.io/pypi/pyversions/aiocached.svg)](https://pypi.python.org/pypi/aiocached)\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\n\n\nI wrote a simple helper to cache results in one service because I found it easy\nto do. As soon as I needed the helper in another project, I realized that it\nshould be in a separate package published on PyPI. Having found `aiocache`\nproject I was disappointed because it wasn't able to cache `None` values.\nSo I had a reason to create `aiocached`.\n\n\nTable of contents\n--------------------------------------------------------------------------------\n* [Usage examples](#usage-examples)\n* [Installation](#installation)\n\nUsage examples\n--------------------------------------------------------------------------------\n\nIn this example `foo(1)` will be run just once:\n```python\nimport asyncio\nfrom aiocached import cached\n\n@cached\nasync def foo(n):\n    await asyncio.sleep(n)\n\nasync def main():\n    await asyncio.gather(*[foo(1) for _ in range(1000)])\n\nasyncio.run(main())\n```\n\nIn this example `bar(1)` will be run twice because of TTL:\n```python\nimport asyncio\nfrom aiocached import cached\n\n@cached(ttl=2)\nasync def bar(n):\n    await asyncio.sleep(n)\n\nasync def main():\n    await bar(1)\n    await asyncio.sleep(2)\n    await bar(1)\n\nasyncio.run(main())\n```\n\nIf you want to cache an ordinary function, you can do it as well. In this\nexample `foobar(1)` will be run twice for the same reason as above:\n```python\nimport time\nfrom aiocached import cached\n\n@cached(ttl=2)\ndef foobar(n):\n    time.sleep(n)\n\ndef main():\n    foobar(1)\n    time.sleep(2)\n    foobar(1)\n\nmain()\n```\n\nInstallation\n--------------------------------------------------------------------------------\n\nUse pip to install:\n```shell\n$ pip install aiocached\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Fatal1ty/aiocached", "keywords": "", "license": "Apache License, Version 2.0", "maintainer": "", "maintainer_email": "", "name": "aiocached", "package_url": "https://pypi.org/project/aiocached/", "platform": "all", "project_url": "https://pypi.org/project/aiocached/", "project_urls": {"Homepage": "https://github.com/Fatal1ty/aiocached"}, "release_url": "https://pypi.org/project/aiocached/0.3/", "requires_dist": null, "requires_python": ">=3.5", "summary": "Simple decorator to cache coroutine function results", "version": "0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>aiocached</h1>\n<blockquote>\n<p><strong>aioached</strong> is a simple package with decorator <code>cached</code> to cache results of\nordinary and coroutine functions with configurable TTL and <code>None</code> value support</p>\n</blockquote>\n<p><a href=\"https://pypi.python.org/pypi/aiocached\" rel=\"nofollow\"><img alt=\"Latest Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/227b7d9e86bf225ab6bdd76f82bd52743c4238c1/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f61696f6361636865642e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/aiocached\" rel=\"nofollow\"><img alt=\"Python Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/89c969ee3df744fd66ab865ca61b0739539056ed/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f61696f6361636865642e737667\"></a>\n<a href=\"https://opensource.org/licenses/Apache-2.0\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b97ca76cf5d8fd16c7bc4731270e0bbe53df7aa1/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d417061636865253230322e302d626c75652e737667\"></a></p>\n<p>I wrote a simple helper to cache results in one service because I found it easy\nto do. As soon as I needed the helper in another project, I realized that it\nshould be in a separate package published on PyPI. Having found <code>aiocache</code>\nproject I was disappointed because it wasn't able to cache <code>None</code> values.\nSo I had a reason to create <code>aiocached</code>.</p>\n<h2>Table of contents</h2>\n<ul>\n<li><a href=\"#usage-examples\" rel=\"nofollow\">Usage examples</a></li>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n</ul>\n<h2>Usage examples</h2>\n<p>In this example <code>foo(1)</code> will be run just once:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aiocached</span> <span class=\"kn\">import</span> <span class=\"n\">cached</span>\n\n<span class=\"nd\">@cached</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">gather</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">[</span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">)])</span>\n\n<span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">())</span>\n</pre>\n<p>In this example <code>bar(1)</code> will be run twice because of TTL:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aiocached</span> <span class=\"kn\">import</span> <span class=\"n\">cached</span>\n\n<span class=\"nd\">@cached</span><span class=\"p\">(</span><span class=\"n\">ttl</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">bar</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"k\">await</span> <span class=\"n\">bar</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"k\">await</span> <span class=\"n\">bar</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">())</span>\n</pre>\n<p>If you want to cache an ordinary function, you can do it as well. In this\nexample <code>foobar(1)</code> will be run twice for the same reason as above:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aiocached</span> <span class=\"kn\">import</span> <span class=\"n\">cached</span>\n\n<span class=\"nd\">@cached</span><span class=\"p\">(</span><span class=\"n\">ttl</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">foobar</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">foobar</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"n\">foobar</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"n\">main</span><span class=\"p\">()</span>\n</pre>\n<h2>Installation</h2>\n<p>Use pip to install:</p>\n<pre>$ pip install aiocached\n</pre>\n\n          </div>"}, "last_serial": 6531821, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "5622d37445b6dcdcd9ca4b497e6aa81c", "sha256": "6800a7f57ed5f1f2a95f568ee85e874d5e6106f6c65fa5cd977a118945f21fa4"}, "downloads": -1, "filename": "aiocached-0.1.tar.gz", "has_sig": false, "md5_digest": "5622d37445b6dcdcd9ca4b497e6aa81c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 2827, "upload_time": "2019-12-27T13:43:02", "upload_time_iso_8601": "2019-12-27T13:43:02.817254Z", "url": "https://files.pythonhosted.org/packages/a2/ea/f7ebd5936d8d55f60bf1b79d1ec75c0c65c05cd83fbc90ea514262201c1a/aiocached-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "edaab200be937873b47ade604082bcb0", "sha256": "3a1196a2583723e41ae8589028563cd67e9cdcf4bd51535ac5b760ab7bf17621"}, "downloads": -1, "filename": "aiocached-0.2.tar.gz", "has_sig": false, "md5_digest": "edaab200be937873b47ade604082bcb0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 3088, "upload_time": "2020-01-14T12:43:31", "upload_time_iso_8601": "2020-01-14T12:43:31.102659Z", "url": "https://files.pythonhosted.org/packages/15/fc/245265876c643948803477d41826c51f6398ba2b8290dccc3b0f5bbb6ca4/aiocached-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "cfd7de7d096a843673fd7e0e98ff3900", "sha256": "22ab674c067a7cb3c5659da7e48447b546d8f5b5298ec61979612321760f1c69"}, "downloads": -1, "filename": "aiocached-0.3.tar.gz", "has_sig": false, "md5_digest": "cfd7de7d096a843673fd7e0e98ff3900", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 3109, "upload_time": "2020-01-28T12:02:50", "upload_time_iso_8601": "2020-01-28T12:02:50.510646Z", "url": "https://files.pythonhosted.org/packages/1c/a5/c66db2e30651cc4bf2cadfb2d07cdcf944396a47b08acdd544bc033ab532/aiocached-0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "cfd7de7d096a843673fd7e0e98ff3900", "sha256": "22ab674c067a7cb3c5659da7e48447b546d8f5b5298ec61979612321760f1c69"}, "downloads": -1, "filename": "aiocached-0.3.tar.gz", "has_sig": false, "md5_digest": "cfd7de7d096a843673fd7e0e98ff3900", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 3109, "upload_time": "2020-01-28T12:02:50", "upload_time_iso_8601": "2020-01-28T12:02:50.510646Z", "url": "https://files.pythonhosted.org/packages/1c/a5/c66db2e30651cc4bf2cadfb2d07cdcf944396a47b08acdd544bc033ab532/aiocached-0.3.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:21:44 2020"}