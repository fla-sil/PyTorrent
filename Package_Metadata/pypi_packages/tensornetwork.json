{"info": {"author": "The TensorNetwork Developers", "author_email": "chaseriley@google.com", "bugtrack_url": null, "classifiers": [], "description": "<img src=\"https://user-images.githubusercontent.com/8702042/67589472-5a1d0e80-f70d-11e9-8812-64647814ae96.png\" width=\"60%\" height=\"60%\">\n\n[![Build Status](https://travis-ci.org/google/TensorNetwork.svg?branch=master)](https://travis-ci.org/google/TensorNetwork)\n\n\nA tensor network wrapper for TensorFlow, JAX, PyTorch, and Numpy.\n\nFor an overview of tensor networks please see the following: \n\n- [Matrices as Tensor Network Diagrams](https://www.math3ma.com/blog/matrices-as-tensor-network-diagrams)\n\n\n- [Crash Course in Tensor Networks (video)](https://www.youtube.com/watch?v=YN2YBB0viKo)\n\n- [Hand-waving and interpretive dance: an introductory course on tensor networks](https://iopscience.iop.org/article/10.1088/1751-8121/aa6dc3)\n\n- [Tensor Networks in a Nutshell](https://arxiv.org/abs/1708.00006)\n\n- [A Practical Introduction to Tensor Networks](https://arxiv.org/abs/1306.2164)\n\nMore information can be found in our TensorNetwork papers:\n\n- [TensorNetwork: A Library for Physics and Machine Learning](https://arxiv.org/abs/1905.01330)\n\n- [TensorNetwork on TensorFlow: A Spin Chain Application Using Tree Tensor Networks](https://arxiv.org/abs/1905.01331)\n\n- [TensorNetwork on TensorFlow: Entanglement Renormalization for quantum critical lattice models](https://arxiv.org/abs/1906.12030)\n\n- [TensorNetwork for Machine Learning](https://arxiv.org/abs/1906.06329)\n\n\n## Installation\n```\npip3 install tensornetwork\n```\n\n## Documentation\n\nFor details about the TensorNetwork API, see the [reference documentation.](https://tensornetwork.readthedocs.io)\n\n\n## Tutorials\n\n[Basic API tutorial](https://colab.research.google.com/drive/1Fp9DolkPT-P_Dkg_s9PLbTOKSq64EVSu)\n\n[Tensor Networks inside Neural Networks using Keras](https://colab.research.google.com/drive/1JUh84N5sbfQYk6HWowWCGl0IZ1idQi6z)\n## Basic Example\n\nHere, we build a simple 2 node contraction.\n```python\nimport numpy as np\nimport tensornetwork as tn\n\n# Create the nodes\na = tn.Node(np.ones((10,))) \nb = tn.Node(np.ones((10,)))\nedge = a[0] ^ b[0] # Equal to tn.connect(a[0], b[0])\nfinal_node = tn.contract(edge)\nprint(final_node.tensor) # Should print 10.0\n```\n\n## Optimized Contractions.\nUsually, it is more computationally effective to flatten parallel edges before contracting them in order to avoid trace edges.\nWe have `contract_between` and `contract_parallel` that do this automatically for your convenience. \n\n```python\n# Contract all of the edges between a and b\n# and create a new node `c`.\nc = tn.contract_between(a, b)\n# This is the same as above, but much shorter.\nc = a @ b\n\n# Contract all of edges that are parallel to edge \n# (parallel means connected to the same nodes).\nc = tn.contract_parallel(edge)\n```\n\n## Split Node\nYou can split a node by doing a singular value decomposition. \n```python\n# This will return two nodes and a tensor of the truncation error.\n# The two nodes are the unitary matrices multiplied by the square root of the\n# singular values.\n# The `left_edges` are the edges that will end up on the `u_s` node, and `right_edges`\n# will be on the `vh_s` node.\nu_s, vh_s, trun_error = tn.split_node(node, left_edges, right_edges)\n# If you want the singular values in it's own node, you can use `split_node_full_svd`.\nu, s, vh, trun_error = tn.split_node_full_svd(node, left_edges, right_edges)\n```\n\n## Node and Edge names.\nYou can optionally name your nodes/edges. This can be useful for debugging, \nas all error messages will print the name of the broken edge/node.\n```python\nnode = tn.Node(np.eye(2), name=\"Identity Matrix\")\nprint(\"Name of node: {}\".format(node.name))\nedge = tn.connect(node[0], node[1], name=\"Trace Edge\")\nprint(\"Name of the edge: {}\".format(edge.name))\n# Adding name to a contraction will add the name to the new edge created.\nfinal_result = tn.contract(edge, name=\"Trace Of Identity\")\nprint(\"Name of new node after contraction: {}\".format(final_result.name))\n```\n\n## Named axes.\nTo make remembering what an axis does easier, you can optionally name a node's axes.\n```python\na = tn.Node(np.zeros((2, 2)), axis_names=[\"alpha\", \"beta\"])\nedge = a[\"beta\"] ^ a[\"alpha\"]\n```\n\n## Edge reordering.\nTo assert that your result's axes are in the correct order, you can reorder a node at any time during computation.\n```python\na = tn.Node(np.zeros((1, 2, 3)))\ne1 = a[0]\ne2 = a[1]\ne3 = a[2]\na.reorder_edges([e3, e1, e2])\n# If you already know the axis values, you can equivalently do\n# a.reorder_axes([2, 0, 1])\nprint(a.tensor.shape) # Should print (3, 1, 2)\n```\n\n## NCON interface.\nFor a more compact specification of a tensor network and its contraction, there is `ncon()`. For example:\n```python\nfrom tensornetwork import ncon\na = np.ones((2, 2))\nb = np.ones((2, 2))\nc = ncon([a, b], [(-1, 1), (1, -2)])\nprint(c)\n```\nIt is also possible to generate a set of nodes that represent the given tensor network.\n```python\nfrom tensornetwork import ncon_network\na = np.ones((2, 2))\nb = np.ones((2, 2))\nnodes, e_con, e_out = ncon_network([a, b], [(-1, 1), (1, -2)])\nfor e in e_con:\n    n = tn.contract(e) # Contract edges in order\nn.reorder_edges(e_out) # Permute final tensor as necessary\nprint(n.tensor)\n```\n\n## Different backend support.\nCurrently, we support JAX, TensorFlow, PyTorch and NumPy as TensorNetwork backends.\nWe also support tensors with Abelian symmetries via a `symmetric` backend, see the [reference\ndocumentation](https://tensornetwork.readthedocs.io/en/latest/block_sparse_tutorial.html) for more details.\n\nTo change the default global backend, you can do:\n```python\ntn.set_default_backend(\"jax\") # tensorflow, pytorch, numpy, symmetric\n```\nOr, if you only want to change the backend for a single `Node`, you can do:\n```python\ntn.Node(tensor, backend=\"jax\")\n```\n\nIf you want to run your contractions on a GPU, we highly recommend using JAX, as it has the closet API to NumPy.\n\n## Disclaimer\nThis library is in *alpha* and will be going through a lot of breaking changes. While releases will be stable enough for research, we do not recommend using this in any production environment yet.\n\nTensorNetwork is not an official Google product. Copyright 2019 The TensorNetwork Developers.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/google/TensorNetwork", "keywords": "", "license": "Apache 2.0", "maintainer": "", "maintainer_email": "", "name": "tensornetwork", "package_url": "https://pypi.org/project/tensornetwork/", "platform": "", "project_url": "https://pypi.org/project/tensornetwork/", "project_urls": {"Homepage": "http://github.com/google/TensorNetwork"}, "release_url": "https://pypi.org/project/tensornetwork/0.3.1/", "requires_dist": ["graphviz (>=0.11.1)", "h5py (>=2.9.0)", "numpy (>=1.17)", "opt-einsum (>=2.3.0)", "scipy (>=1.1)"], "requires_python": ">=3.6.0", "summary": "A high level tensor network API for tensorflow.", "version": "0.3.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <img height=\"60%\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/608a760f4eeff360ff938f6b552cf8003b3836f8/68747470733a2f2f757365722d696d616765732e67697468756275736572636f6e74656e742e636f6d2f383730323034322f36373538393437322d35613164306538302d663730642d313165392d383831322d3634363437383134616539362e706e67\" width=\"60%\">\n<p><a href=\"https://travis-ci.org/google/TensorNetwork\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/019fc34f7a813112afe132df8b152b3070519ace/68747470733a2f2f7472617669732d63692e6f72672f676f6f676c652f54656e736f724e6574776f726b2e7376673f6272616e63683d6d6173746572\"></a></p>\n<p>A tensor network wrapper for TensorFlow, JAX, PyTorch, and Numpy.</p>\n<p>For an overview of tensor networks please see the following:</p>\n<ul>\n<li>\n<p><a href=\"https://www.math3ma.com/blog/matrices-as-tensor-network-diagrams\" rel=\"nofollow\">Matrices as Tensor Network Diagrams</a></p>\n</li>\n<li>\n<p><a href=\"https://www.youtube.com/watch?v=YN2YBB0viKo\" rel=\"nofollow\">Crash Course in Tensor Networks (video)</a></p>\n</li>\n<li>\n<p><a href=\"https://iopscience.iop.org/article/10.1088/1751-8121/aa6dc3\" rel=\"nofollow\">Hand-waving and interpretive dance: an introductory course on tensor networks</a></p>\n</li>\n<li>\n<p><a href=\"https://arxiv.org/abs/1708.00006\" rel=\"nofollow\">Tensor Networks in a Nutshell</a></p>\n</li>\n<li>\n<p><a href=\"https://arxiv.org/abs/1306.2164\" rel=\"nofollow\">A Practical Introduction to Tensor Networks</a></p>\n</li>\n</ul>\n<p>More information can be found in our TensorNetwork papers:</p>\n<ul>\n<li>\n<p><a href=\"https://arxiv.org/abs/1905.01330\" rel=\"nofollow\">TensorNetwork: A Library for Physics and Machine Learning</a></p>\n</li>\n<li>\n<p><a href=\"https://arxiv.org/abs/1905.01331\" rel=\"nofollow\">TensorNetwork on TensorFlow: A Spin Chain Application Using Tree Tensor Networks</a></p>\n</li>\n<li>\n<p><a href=\"https://arxiv.org/abs/1906.12030\" rel=\"nofollow\">TensorNetwork on TensorFlow: Entanglement Renormalization for quantum critical lattice models</a></p>\n</li>\n<li>\n<p><a href=\"https://arxiv.org/abs/1906.06329\" rel=\"nofollow\">TensorNetwork for Machine Learning</a></p>\n</li>\n</ul>\n<h2>Installation</h2>\n<pre><code>pip3 install tensornetwork\n</code></pre>\n<h2>Documentation</h2>\n<p>For details about the TensorNetwork API, see the <a href=\"https://tensornetwork.readthedocs.io\" rel=\"nofollow\">reference documentation.</a></p>\n<h2>Tutorials</h2>\n<p><a href=\"https://colab.research.google.com/drive/1Fp9DolkPT-P_Dkg_s9PLbTOKSq64EVSu\" rel=\"nofollow\">Basic API tutorial</a></p>\n<p><a href=\"https://colab.research.google.com/drive/1JUh84N5sbfQYk6HWowWCGl0IZ1idQi6z\" rel=\"nofollow\">Tensor Networks inside Neural Networks using Keras</a></p>\n<h2>Basic Example</h2>\n<p>Here, we build a simple 2 node contraction.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">tensornetwork</span> <span class=\"k\">as</span> <span class=\"nn\">tn</span>\n\n<span class=\"c1\"># Create the nodes</span>\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">tn</span><span class=\"o\">.</span><span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">((</span><span class=\"mi\">10</span><span class=\"p\">,)))</span> \n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">tn</span><span class=\"o\">.</span><span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">((</span><span class=\"mi\">10</span><span class=\"p\">,)))</span>\n<span class=\"n\">edge</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">^</span> <span class=\"n\">b</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"c1\"># Equal to tn.connect(a[0], b[0])</span>\n<span class=\"n\">final_node</span> <span class=\"o\">=</span> <span class=\"n\">tn</span><span class=\"o\">.</span><span class=\"n\">contract</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">final_node</span><span class=\"o\">.</span><span class=\"n\">tensor</span><span class=\"p\">)</span> <span class=\"c1\"># Should print 10.0</span>\n</pre>\n<h2>Optimized Contractions.</h2>\n<p>Usually, it is more computationally effective to flatten parallel edges before contracting them in order to avoid trace edges.\nWe have <code>contract_between</code> and <code>contract_parallel</code> that do this automatically for your convenience.</p>\n<pre><span class=\"c1\"># Contract all of the edges between a and b</span>\n<span class=\"c1\"># and create a new node `c`.</span>\n<span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">tn</span><span class=\"o\">.</span><span class=\"n\">contract_between</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n<span class=\"c1\"># This is the same as above, but much shorter.</span>\n<span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">a</span> <span class=\"o\">@</span> <span class=\"n\">b</span>\n\n<span class=\"c1\"># Contract all of edges that are parallel to edge </span>\n<span class=\"c1\"># (parallel means connected to the same nodes).</span>\n<span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">tn</span><span class=\"o\">.</span><span class=\"n\">contract_parallel</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">)</span>\n</pre>\n<h2>Split Node</h2>\n<p>You can split a node by doing a singular value decomposition.</p>\n<pre><span class=\"c1\"># This will return two nodes and a tensor of the truncation error.</span>\n<span class=\"c1\"># The two nodes are the unitary matrices multiplied by the square root of the</span>\n<span class=\"c1\"># singular values.</span>\n<span class=\"c1\"># The `left_edges` are the edges that will end up on the `u_s` node, and `right_edges`</span>\n<span class=\"c1\"># will be on the `vh_s` node.</span>\n<span class=\"n\">u_s</span><span class=\"p\">,</span> <span class=\"n\">vh_s</span><span class=\"p\">,</span> <span class=\"n\">trun_error</span> <span class=\"o\">=</span> <span class=\"n\">tn</span><span class=\"o\">.</span><span class=\"n\">split_node</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"n\">left_edges</span><span class=\"p\">,</span> <span class=\"n\">right_edges</span><span class=\"p\">)</span>\n<span class=\"c1\"># If you want the singular values in it's own node, you can use `split_node_full_svd`.</span>\n<span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">vh</span><span class=\"p\">,</span> <span class=\"n\">trun_error</span> <span class=\"o\">=</span> <span class=\"n\">tn</span><span class=\"o\">.</span><span class=\"n\">split_node_full_svd</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"n\">left_edges</span><span class=\"p\">,</span> <span class=\"n\">right_edges</span><span class=\"p\">)</span>\n</pre>\n<h2>Node and Edge names.</h2>\n<p>You can optionally name your nodes/edges. This can be useful for debugging,\nas all error messages will print the name of the broken edge/node.</p>\n<pre><span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">tn</span><span class=\"o\">.</span><span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">eye</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"Identity Matrix\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Name of node: </span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">))</span>\n<span class=\"n\">edge</span> <span class=\"o\">=</span> <span class=\"n\">tn</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"Trace Edge\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Name of the edge: </span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">))</span>\n<span class=\"c1\"># Adding name to a contraction will add the name to the new edge created.</span>\n<span class=\"n\">final_result</span> <span class=\"o\">=</span> <span class=\"n\">tn</span><span class=\"o\">.</span><span class=\"n\">contract</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"Trace Of Identity\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Name of new node after contraction: </span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">final_result</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">))</span>\n</pre>\n<h2>Named axes.</h2>\n<p>To make remembering what an axis does easier, you can optionally name a node's axes.</p>\n<pre><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">tn</span><span class=\"o\">.</span><span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">((</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)),</span> <span class=\"n\">axis_names</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"alpha\"</span><span class=\"p\">,</span> <span class=\"s2\">\"beta\"</span><span class=\"p\">])</span>\n<span class=\"n\">edge</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"s2\">\"beta\"</span><span class=\"p\">]</span> <span class=\"o\">^</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"s2\">\"alpha\"</span><span class=\"p\">]</span>\n</pre>\n<h2>Edge reordering.</h2>\n<p>To assert that your result's axes are in the correct order, you can reorder a node at any time during computation.</p>\n<pre><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">tn</span><span class=\"o\">.</span><span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)))</span>\n<span class=\"n\">e1</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">e2</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">e3</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">reorder_edges</span><span class=\"p\">([</span><span class=\"n\">e3</span><span class=\"p\">,</span> <span class=\"n\">e1</span><span class=\"p\">,</span> <span class=\"n\">e2</span><span class=\"p\">])</span>\n<span class=\"c1\"># If you already know the axis values, you can equivalently do</span>\n<span class=\"c1\"># a.reorder_axes([2, 0, 1])</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">tensor</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span> <span class=\"c1\"># Should print (3, 1, 2)</span>\n</pre>\n<h2>NCON interface.</h2>\n<p>For a more compact specification of a tensor network and its contraction, there is <code>ncon()</code>. For example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tensornetwork</span> <span class=\"kn\">import</span> <span class=\"n\">ncon</span>\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">((</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">((</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">ncon</span><span class=\"p\">([</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">],</span> <span class=\"p\">[(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">)])</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span>\n</pre>\n<p>It is also possible to generate a set of nodes that represent the given tensor network.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tensornetwork</span> <span class=\"kn\">import</span> <span class=\"n\">ncon_network</span>\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">((</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">((</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"n\">nodes</span><span class=\"p\">,</span> <span class=\"n\">e_con</span><span class=\"p\">,</span> <span class=\"n\">e_out</span> <span class=\"o\">=</span> <span class=\"n\">ncon_network</span><span class=\"p\">([</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">],</span> <span class=\"p\">[(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">)])</span>\n<span class=\"k\">for</span> <span class=\"n\">e</span> <span class=\"ow\">in</span> <span class=\"n\">e_con</span><span class=\"p\">:</span>\n    <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">tn</span><span class=\"o\">.</span><span class=\"n\">contract</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span> <span class=\"c1\"># Contract edges in order</span>\n<span class=\"n\">n</span><span class=\"o\">.</span><span class=\"n\">reorder_edges</span><span class=\"p\">(</span><span class=\"n\">e_out</span><span class=\"p\">)</span> <span class=\"c1\"># Permute final tensor as necessary</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">.</span><span class=\"n\">tensor</span><span class=\"p\">)</span>\n</pre>\n<h2>Different backend support.</h2>\n<p>Currently, we support JAX, TensorFlow, PyTorch and NumPy as TensorNetwork backends.\nWe also support tensors with Abelian symmetries via a <code>symmetric</code> backend, see the <a href=\"https://tensornetwork.readthedocs.io/en/latest/block_sparse_tutorial.html\" rel=\"nofollow\">reference\ndocumentation</a> for more details.</p>\n<p>To change the default global backend, you can do:</p>\n<pre><span class=\"n\">tn</span><span class=\"o\">.</span><span class=\"n\">set_default_backend</span><span class=\"p\">(</span><span class=\"s2\">\"jax\"</span><span class=\"p\">)</span> <span class=\"c1\"># tensorflow, pytorch, numpy, symmetric</span>\n</pre>\n<p>Or, if you only want to change the backend for a single <code>Node</code>, you can do:</p>\n<pre><span class=\"n\">tn</span><span class=\"o\">.</span><span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"n\">tensor</span><span class=\"p\">,</span> <span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s2\">\"jax\"</span><span class=\"p\">)</span>\n</pre>\n<p>If you want to run your contractions on a GPU, we highly recommend using JAX, as it has the closet API to NumPy.</p>\n<h2>Disclaimer</h2>\n<p>This library is in <em>alpha</em> and will be going through a lot of breaking changes. While releases will be stable enough for research, we do not recommend using this in any production environment yet.</p>\n<p>TensorNetwork is not an official Google product. Copyright 2019 The TensorNetwork Developers.</p>\n\n          </div>"}, "last_serial": 7167929, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "e6887c774a2c6fc796d2685899456801", "sha256": "699b149dfba4e8f8b808cb5809df5738e99fa7e429c7234ecdb1f73ffec8cf95"}, "downloads": -1, "filename": "tensornetwork-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e6887c774a2c6fc796d2685899456801", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.0", "size": 25177, "upload_time": "2019-05-06T16:47:40", "upload_time_iso_8601": "2019-05-06T16:47:40.446567Z", "url": "https://files.pythonhosted.org/packages/48/39/56e8e02e6a72d05501f132cd9347ab186e57861dd8506f8f48d7cb215221/tensornetwork-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "78f3a076c42a6a5a52039dc95936d3c0", "sha256": "d3f25038c502510dbd5f15702f60d300b789b04453af68445012242ade4ab1b8"}, "downloads": -1, "filename": "tensornetwork-0.0.1.tar.gz", "has_sig": false, "md5_digest": "78f3a076c42a6a5a52039dc95936d3c0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.0", "size": 19275, "upload_time": "2019-05-06T16:47:42", "upload_time_iso_8601": "2019-05-06T16:47:42.668601Z", "url": "https://files.pythonhosted.org/packages/10/6c/697f62a318ac74f0ddf323f32862110186ffa783a70afad4fad574b77168/tensornetwork-0.0.1.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "83afb20321d59074659a9e42bb799ced", "sha256": "f1ff0a7f1ca2d50daf436c7ccbdb6b1069442b8ff4dca101f7e0bc3e0a37b4ef"}, "downloads": -1, "filename": "TensorNetwork-0.0.3.tar.gz", "has_sig": false, "md5_digest": "83afb20321d59074659a9e42bb799ced", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.0", "size": 41520, "upload_time": "2019-05-23T21:00:34", "upload_time_iso_8601": "2019-05-23T21:00:34.271965Z", "url": "https://files.pythonhosted.org/packages/57/ef/cf1093ac4fb940fe83548fa74cdd07da80bb9776c1e3b643b9876e36ad6e/TensorNetwork-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "a7ebf927ede1fbd28923e0713b5012f5", "sha256": "93f828a8663a4e9240904cc7cd61b359fa9299512b713b5370da36e28b59ade8"}, "downloads": -1, "filename": "tensornetwork-0.0.4.tar.gz", "has_sig": false, "md5_digest": "a7ebf927ede1fbd28923e0713b5012f5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.0", "size": 48655, "upload_time": "2019-06-21T23:11:14", "upload_time_iso_8601": "2019-06-21T23:11:14.743211Z", "url": "https://files.pythonhosted.org/packages/51/95/2af18c6bc04ec0bc22339b3f4ff26688b38cc851c01f6bb02bbe919ecd26/tensornetwork-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "bba4c8265db921b733c27339e41d73b0", "sha256": "66a927da915c2c541deb65d64da64bdebb105944d45c8c492a1e280e35e8c27c"}, "downloads": -1, "filename": "tensornetwork-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "bba4c8265db921b733c27339e41d73b0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.0", "size": 93345, "upload_time": "2019-07-15T18:30:00", "upload_time_iso_8601": "2019-07-15T18:30:00.817351Z", "url": "https://files.pythonhosted.org/packages/39/f2/15cb7a473a9781ad18e35c655a033972a2530708becd112d2794ac691012/tensornetwork-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "91d6bc1cac6b8b34647f65a9a8b9878d", "sha256": "8c06fc572a1160531618ddf5f740f882740bac395dc51998e0a5d2192a909133"}, "downloads": -1, "filename": "tensornetwork-0.0.5.tar.gz", "has_sig": false, "md5_digest": "91d6bc1cac6b8b34647f65a9a8b9878d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.0", "size": 34224, "upload_time": "2019-07-15T18:30:02", "upload_time_iso_8601": "2019-07-15T18:30:02.970777Z", "url": "https://files.pythonhosted.org/packages/20/2f/a6d3c0ef0c777695238ba2f25f945f6307a0921ed9fc4f916a88e3ef1881/tensornetwork-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "7a3ec313ecc21b306eda292684d7899c", "sha256": "986ef07fbab05b863302f9eddca45c5562b42448fefe49837d7f3c644db166ab"}, "downloads": -1, "filename": "tensornetwork-0.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "7a3ec313ecc21b306eda292684d7899c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.0", "size": 116167, "upload_time": "2019-07-30T17:57:33", "upload_time_iso_8601": "2019-07-30T17:57:33.137244Z", "url": "https://files.pythonhosted.org/packages/a7/15/ffc6a7392c33d2bed7d41ff36f076f5623b050ec36ac3b32dcc7e2b450b8/tensornetwork-0.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "215ff48f3de512cd3492d37cf96edeac", "sha256": "b157b5f5a7faad51f4f1f5f2c1b06feb00c72d638c3f6e1152df22f979d1b6d9"}, "downloads": -1, "filename": "tensornetwork-0.0.6.tar.gz", "has_sig": false, "md5_digest": "215ff48f3de512cd3492d37cf96edeac", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.0", "size": 35235, "upload_time": "2019-07-30T17:57:35", "upload_time_iso_8601": "2019-07-30T17:57:35.294789Z", "url": "https://files.pythonhosted.org/packages/ef/0b/0e3495c95414328ed3f02a5db2f79661cfa27516b9e327d1cc78d137cec9/tensornetwork-0.0.6.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "1b0c6192e88a275f6f5d802e23fffb53", "sha256": "5e3b649c420094abbdb79252bf2c6d588f9214b11adfb6ed1ff754eda288ba1e"}, "downloads": -1, "filename": "tensornetwork-0.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "1b0c6192e88a275f6f5d802e23fffb53", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.0", "size": 119673, "upload_time": "2019-08-07T19:43:16", "upload_time_iso_8601": "2019-08-07T19:43:16.401807Z", "url": "https://files.pythonhosted.org/packages/68/b6/c1594139ea3252819391cd02288c65b4573051fb7a07748ab6b2a982fc8e/tensornetwork-0.0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "36c258676b695247041db9425580dd71", "sha256": "a65c101573ba6fc6cf08afe5d5208d5de0a5222eba96cb60cf45a257366c4ba4"}, "downloads": -1, "filename": "tensornetwork-0.0.7.tar.gz", "has_sig": false, "md5_digest": "36c258676b695247041db9425580dd71", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.0", "size": 36806, "upload_time": "2019-08-07T19:43:17", "upload_time_iso_8601": "2019-08-07T19:43:17.984131Z", "url": "https://files.pythonhosted.org/packages/05/61/04926461c1d4b2f0202eb08243f0625077d1750d72eed5bfe94bfa9100f7/tensornetwork-0.0.7.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "d5f2967c5e4c3d50ad1592753616dc9c", "sha256": "bda0a05024723f78b8c61d05c0bcd26c42e9632080500dabe12cf22720ae3b7b"}, "downloads": -1, "filename": "tensornetwork-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "d5f2967c5e4c3d50ad1592753616dc9c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 167797, "upload_time": "2019-09-12T21:56:26", "upload_time_iso_8601": "2019-09-12T21:56:26.896009Z", "url": "https://files.pythonhosted.org/packages/55/0c/1871a29bb15ee4a044e908371583e303f896b296e63802a4797fd20d29ba/tensornetwork-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9cc9781059140cbe6116129541ba3c6e", "sha256": "3fbe8bf86ecf08e130c4f28552c5b8c6b5e4b53beb70ceab74d55d969135acc6"}, "downloads": -1, "filename": "tensornetwork-0.1.0.tar.gz", "has_sig": false, "md5_digest": "9cc9781059140cbe6116129541ba3c6e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 43769, "upload_time": "2019-09-12T21:56:28", "upload_time_iso_8601": "2019-09-12T21:56:28.671547Z", "url": "https://files.pythonhosted.org/packages/60/da/206bd0273b0a963654d1445d62d4b68804d9e566eccde30335e92900ae84/tensornetwork-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "10585a3a0eadc9b4fff4018463478eeb", "sha256": "af1631712041df032677b2586ecaf5f8e46b58688d509ff67e38498ee28e1732"}, "downloads": -1, "filename": "tensornetwork-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "10585a3a0eadc9b4fff4018463478eeb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 189981, "upload_time": "2019-10-03T20:19:37", "upload_time_iso_8601": "2019-10-03T20:19:37.986861Z", "url": "https://files.pythonhosted.org/packages/61/6e/6cd618cd67ba15bf744cf3a411a74a634e85824bb67ede73fbce75a1660f/tensornetwork-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "244168ae00ca8e1f4bf37d4c3024dd76", "sha256": "6f52943340c5e87637510ca478dceb67f636e025fc61307c03a6d4665c6d4432"}, "downloads": -1, "filename": "tensornetwork-0.1.1.tar.gz", "has_sig": false, "md5_digest": "244168ae00ca8e1f4bf37d4c3024dd76", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 50803, "upload_time": "2019-10-03T20:19:39", "upload_time_iso_8601": "2019-10-03T20:19:39.858380Z", "url": "https://files.pythonhosted.org/packages/1e/ac/d97f054b3bccf35aa2b7f50a9162a448c64a8138ae5e04f96114ae28ac00/tensornetwork-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "595490841c3206f5e840301381826da1", "sha256": "ee0cc664d841aeb99e3a108a5f90fff74b5444eda4569c753342197d6c8cea2a"}, "downloads": -1, "filename": "tensornetwork-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "595490841c3206f5e840301381826da1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 202057, "upload_time": "2019-10-30T23:53:42", "upload_time_iso_8601": "2019-10-30T23:53:42.934734Z", "url": "https://files.pythonhosted.org/packages/6d/ed/ea8087d21b73650a3df360e5ae58d8b3ac8cb8787493caa32311355dc4ab/tensornetwork-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1875c0bee9439ea6987c8fddffe322b8", "sha256": "cf73113f49e19773c2409a262f011102a336121a704136c62df58c02f9bc2e1e"}, "downloads": -1, "filename": "tensornetwork-0.2.0.tar.gz", "has_sig": false, "md5_digest": "1875c0bee9439ea6987c8fddffe322b8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 56209, "upload_time": "2019-10-30T23:53:45", "upload_time_iso_8601": "2019-10-30T23:53:45.179397Z", "url": "https://files.pythonhosted.org/packages/68/a3/feaf38d1357a032d7ce3d043bcedc15d2446994a9ddd8b3256249e4af8c8/tensornetwork-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "1645f9d91ebdf9b871c52184800ba3da", "sha256": "1701a854e3f804f0aadc090cd6d5f6e482f6ece0bf3d881b5a674985f48ae81d"}, "downloads": -1, "filename": "tensornetwork-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "1645f9d91ebdf9b871c52184800ba3da", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 232157, "upload_time": "2020-01-28T17:34:14", "upload_time_iso_8601": "2020-01-28T17:34:14.458608Z", "url": "https://files.pythonhosted.org/packages/d5/84/4421ac1add2011e50e8d85dc1a8446f5eeae8ad404cb4df6d4d598a61383/tensornetwork-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "04e66077da80b09f7cf47d23571f6065", "sha256": "8442406e001287f03bf916aac39c12a34b32845ce1507968d45d05a9b703f089"}, "downloads": -1, "filename": "tensornetwork-0.2.1.tar.gz", "has_sig": false, "md5_digest": "04e66077da80b09f7cf47d23571f6065", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 63605, "upload_time": "2020-01-28T17:34:16", "upload_time_iso_8601": "2020-01-28T17:34:16.199846Z", "url": "https://files.pythonhosted.org/packages/78/32/80668485ba38f715c5c0b53c787f4b48aac8a67c60eb15ff62ce9d3f1125/tensornetwork-0.2.1.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "ab7987fa0f819c4897bb8b0914c43644", "sha256": "bdcac5d8e517043c293ad65e8f6d1173f756782fe60512aad2070843af12f32e"}, "downloads": -1, "filename": "tensornetwork-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ab7987fa0f819c4897bb8b0914c43644", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 216383, "upload_time": "2020-04-02T19:21:54", "upload_time_iso_8601": "2020-04-02T19:21:54.708229Z", "url": "https://files.pythonhosted.org/packages/37/37/f74c2fcdc56df69786b545bf58a7690832a63f643e0516ac6a92b2d5f5ca/tensornetwork-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a694657ed8ec9c823e19459f2c1eb760", "sha256": "716b730f7b82e997652e4a961d56f4ac41d9974ad691664b4386107e863c1397"}, "downloads": -1, "filename": "tensornetwork-0.3.0.tar.gz", "has_sig": false, "md5_digest": "a694657ed8ec9c823e19459f2c1eb760", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 90520, "upload_time": "2020-04-02T19:21:56", "upload_time_iso_8601": "2020-04-02T19:21:56.045021Z", "url": "https://files.pythonhosted.org/packages/2d/09/e51148b509b441a43bcabe81301fd98b2d672ed124ebef0cacc2cc88f0f4/tensornetwork-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "e40450a1fd37651e7a13b0af66911969", "sha256": "c3e93fcab5996dd1a14cc5d40ed6264f0b987fd24073fe2b1ed2607c40193016"}, "downloads": -1, "filename": "tensornetwork-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e40450a1fd37651e7a13b0af66911969", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 232642, "upload_time": "2020-05-04T21:40:09", "upload_time_iso_8601": "2020-05-04T21:40:09.450888Z", "url": "https://files.pythonhosted.org/packages/28/46/371e58dfc922795469e140d88e3666ae7adc3da17eb1df12cd82aed0ed76/tensornetwork-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a4866c981dbb9f840ee130352314b9df", "sha256": "811e0c858039786b68779858e4aea3810774da94dfcc99ec674b1870b392b6f8"}, "downloads": -1, "filename": "tensornetwork-0.3.1.tar.gz", "has_sig": false, "md5_digest": "a4866c981dbb9f840ee130352314b9df", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 96853, "upload_time": "2020-05-04T21:40:10", "upload_time_iso_8601": "2020-05-04T21:40:10.968067Z", "url": "https://files.pythonhosted.org/packages/d1/ec/022b17bcf4806eafd8549c8862e0cdc27ffc667aea6c835cc5283982dfd0/tensornetwork-0.3.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e40450a1fd37651e7a13b0af66911969", "sha256": "c3e93fcab5996dd1a14cc5d40ed6264f0b987fd24073fe2b1ed2607c40193016"}, "downloads": -1, "filename": "tensornetwork-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e40450a1fd37651e7a13b0af66911969", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 232642, "upload_time": "2020-05-04T21:40:09", "upload_time_iso_8601": "2020-05-04T21:40:09.450888Z", "url": "https://files.pythonhosted.org/packages/28/46/371e58dfc922795469e140d88e3666ae7adc3da17eb1df12cd82aed0ed76/tensornetwork-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a4866c981dbb9f840ee130352314b9df", "sha256": "811e0c858039786b68779858e4aea3810774da94dfcc99ec674b1870b392b6f8"}, "downloads": -1, "filename": "tensornetwork-0.3.1.tar.gz", "has_sig": false, "md5_digest": "a4866c981dbb9f840ee130352314b9df", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 96853, "upload_time": "2020-05-04T21:40:10", "upload_time_iso_8601": "2020-05-04T21:40:10.968067Z", "url": "https://files.pythonhosted.org/packages/d1/ec/022b17bcf4806eafd8549c8862e0cdc27ffc667aea6c835cc5283982dfd0/tensornetwork-0.3.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:56:03 2020"}