{"info": {"author": "Gr\u00e9gory Salvan", "author_email": "apieum@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 1 - Planning", "Environment :: Other Environment", "Intended Audience :: Developers", "License :: OSI Approved :: GNU Library or Lesser General Public License (LGPL)", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "********\nLawvere\n********\n\n.. image:: https://pypip.in/v/lawvere/badge.png\n        :target: https://pypi.python.org/pypi/lawvere\n\n---------------------------------------------------------------------\n\n**What ?**\n\nFunctionnal Tool: (de)composition with type checking, multiple dispatch.\n\n**Why ?**\n\nThere is a lot of functionnal tools in python: toolz, funcy, fn.py, Pymonads...\n\nThey are great but none of them do type checking which, in my opinion, is a big loss from functionnal paradigm view.\n\n**How ?**\n\nWith a complex and unmaintenable api: a single decorator called *\"arrow\"*.\n\nFor a *technical* explanation of arrows you can look at: `Understanding arrows <http://en.wikibooks.org/wiki/Haskell/Understanding_arrows>`_\n\nFor a *theorical* explanation: *\"Conceptual Mathematics: A First Introduction to Categories\"* [F. William Lawvere, Stephen H. Schanuel] is good start.\n\n\n**Prerequisites**\n\nI strongly recommand to have at least notions about:\n  * lambda calculi (Currying)\n  * tuples in algebra notations (e.g. `signatures <http://en.wikipedia.org/wiki/Signature_%28logic%29>`_)\n  * basics of graph theory (related to category theory - morphisms, domain, codomain...)\n\n\n---------------------------------------------------------------------\n\n**Table of Contents**\n\n\n.. contents::\n    :local:\n    :depth: 1\n    :backlinks: none\n\n\n=============\nInstallation\n=============\n\nInstall it from pypi::\n\n  pip install lawvere\n\nor from sources::\n\n  git clone git@github.com:apieum/lawvere.git\n  cd lawvere\n  python setup.py install\n\n=====\nUsage\n=====\n\n------------\nQuick start:\n------------\n  for impatients\n\n**arrow** take only two optionnal arguments:\n  * the *domain* or *source*: it's a tuple of types (or just a type in case of 1-tuple)\n  * the codomain or *target*: (a single type)\n\nIt returns a function decorator.\n\nSyntax is compatible for python 2.7 to 3.x..\nIn case you target 3.x versions only you can use annotations instead of \"*arrow*\" arguments.\n\"*arrow*\" arguments override annotations.\n\n\n**Code compatible with 2.x and 3.x python versions.**\n\n  .. code-block:: python\n\n    from lawvere import arrow\n\n    # obviously you don't need to use named parameters\n    # it's just to illustrate their meaning.\n    @arrow(domain=(int, int), codomain=int)\n    def add(x, y):\n      return x + y\n\n    # currying:\n    add2 = add(2)\n\n    assert add2(3) == 5\n    assert add(1)(2) == 3 # successive calls\n\n    # composition (pipe):\n    # pass the result of first function to second\n    add4 = add2 >> add2\n    assert add4(1) == 5\n    # composition (circle):\n    # pass result of add(1) into add4\n    add5 = add4 << add(1)\n    assert add5(5) == 10\n\n    # composed functions are tuples:\n    assert isinstance(add4, tuple)\n    assert add5[1] == add4\n\n    # equality is checked over signatures:\n    assert add(1) == add(1)\n    assert add5 == add(1) >> add2 >> add2\n\n    # operator precedence:\n    assert add5 == add(1) >> (add2 << add2)\n    assert add5 == add2 >> add2 << add(1)\n\n    # Type Checking:\n    type_checked = False\n    try:\n      add('a', 'b') == 'ab'\n    except TypeError:\n      type_checked = True\n\n    assert type_checked, 'add should not exists for str types'\n\n\n    # dispatch register\n    # concat inherit arrow properties\n    @add.register((str, str), str)\n    def concat(x, y):\n      return \"%s %s\" %(x, y)\n\n    # can still call/curry... concat\n    assert concat('a')('b') == 'a b'\n    # add with str call concat\n    assert add('a') == concat('a')\n\n    # Concat is only defined for str\n    type_checked = False\n    try:\n      assert concat(1, 2) == 3\n    except TypeError:\n      type_checked = True\n\n    assert type_checked, 'concat should not exists for int types'\n\n    # Type Checking when composing:\n    try:\n      add >> concat(y='b')\n    except TypeError as exc:\n      message = str(exc)\n    # hope message is clear :)\n    assert message == \"Cannot compose add -> int with concat(x:str=Undefined, y:str=b)\"\n    # if composition was circle message would be:\n    # ... concat -> str with add(x:int=Undefined, y:int=Undefined)\n\n\n\n**Code compatible with 3.x versions only.**\n\n  .. code-block:: python\n\n    from lawvere import arrow\n\n    @arrow\n    def add(x:int, y:int) -> int:\n      return x + y\n\n    # identical use as Python 2 #\n\n    # Type Checking:\n    type_checked = False\n    try:\n      add('a', 'b') == 'ab'\n    except TypeError:\n      type_checked = True\n\n    assert type_checked, 'add should not exists for str types'\n\n    # dispatch\n    @add.register\n    def concat(x:str, y:str) -> str:\n      return \"%s %s\" %(x, y)\n\n    assert concat('a', 'b') == 'a b'\n    # now add exists for str types:\n    assert add('a', 'b') == 'a b'\n\n    # type is also checked when composing... see python 2 ex.\n\n\n\n\n\n\n===========\nDevelopment\n===========\n\nYour feedback, code review, improvements or bugs, and help to document is appreciated.\nYou can contact me by mail: apieum [at] gmail [dot] com\n\nTest recommended requirements::\n\n  pip install -r dev-requirements.txt\n\nSometimes --spec-color doesn't function. Uninstall nosespec and nosecolor then reinstall nosecolor and nosespec separatly in this order (nosecolor first).\n\nLaunch tests::\n\n  git clone git@github.com:apieum/lawvere.git\n  cd lawvere\n  nosetests --with-spec --spec-color ./lawvere\n  # or with watch\n  # nosetests --with-spec --spec-color --with-watch ./lawvere\n\n\n\n.. image:: https://secure.travis-ci.org/apieum/lawvere.png?branch=master\n   :target: https://travis-ci.org/apieum/lawvere", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://www.python.org/pypi/lawvere", "keywords": null, "license": "LGPL", "maintainer": null, "maintainer_email": null, "name": "lawvere", "package_url": "https://pypi.org/project/lawvere/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/lawvere/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://www.python.org/pypi/lawvere"}, "release_url": "https://pypi.org/project/lawvere/0.1/", "requires_dist": null, "requires_python": null, "summary": "Easy To Use functionnal tool: (de)composition with type checking (curry, arrows), multiple dispatch", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.python.org/pypi/lawvere\" rel=\"nofollow\"><img alt=\"https://pypip.in/v/lawvere/badge.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/89df7a29fb7bb1acaef57577ef645eb647a63eda/68747470733a2f2f70797069702e696e2f762f6c6177766572652f62616467652e706e67\"></a>\n<hr class=\"docutils\">\n<p><strong>What ?</strong></p>\n<p>Functionnal Tool: (de)composition with type checking, multiple dispatch.</p>\n<p><strong>Why ?</strong></p>\n<p>There is a lot of functionnal tools in python: toolz, funcy, fn.py, Pymonads\u2026</p>\n<p>They are great but none of them do type checking which, in my opinion, is a big loss from functionnal paradigm view.</p>\n<p><strong>How ?</strong></p>\n<p>With a complex and unmaintenable api: a single decorator called <em>\u201carrow\u201d</em>.</p>\n<p>For a <em>technical</em> explanation of arrows you can look at: <a href=\"http://en.wikibooks.org/wiki/Haskell/Understanding_arrows\" rel=\"nofollow\">Understanding arrows</a></p>\n<p>For a <em>theorical</em> explanation: <em>\u201cConceptual Mathematics: A First Introduction to Categories\u201d</em> [F. William Lawvere, Stephen H. Schanuel] is good start.</p>\n<p><strong>Prerequisites</strong></p>\n<dl>\n<dt>I strongly recommand to have at least notions about:</dt>\n<dd><ul>\n<li>lambda calculi (Currying)</li>\n<li>tuples in algebra notations (e.g. <a href=\"http://en.wikipedia.org/wiki/Signature_%28logic%29\" rel=\"nofollow\">signatures</a>)</li>\n<li>basics of graph theory (related to category theory - morphisms, domain, codomain\u2026)</li>\n</ul>\n</dd>\n</dl>\n<hr class=\"docutils\">\n<p><strong>Table of Contents</strong></p>\n<div id=\"contents\">\n<ul>\n<li><a href=\"#installation\" id=\"id1\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#usage\" id=\"id2\" rel=\"nofollow\">Usage</a></li>\n<li><a href=\"#development\" id=\"id3\" rel=\"nofollow\">Development</a></li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Install it from pypi:</p>\n<pre>pip install lawvere\n</pre>\n<p>or from sources:</p>\n<pre>git clone git@github.com:apieum/lawvere.git\ncd lawvere\npython setup.py install\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<h2 id=\"quick-start\"><span class=\"section-subtitle\">Quick start:</span></h2>\n<blockquote>\nfor impatients</blockquote>\n<dl>\n<dt><strong>arrow</strong> take only two optionnal arguments:</dt>\n<dd><ul>\n<li>the <em>domain</em> or <em>source</em>: it\u2019s a tuple of types (or just a type in case of 1-tuple)</li>\n<li>the codomain or <em>target</em>: (a single type)</li>\n</ul>\n</dd>\n</dl>\n<p>It returns a function decorator.</p>\n<p>Syntax is compatible for python 2.7 to 3.x..\nIn case you target 3.x versions only you can use annotations instead of \u201c<em>arrow</em>\u201d arguments.\n\u201c<em>arrow</em>\u201d arguments override annotations.</p>\n<p><strong>Code compatible with 2.x and 3.x python versions.</strong></p>\n<blockquote>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">lawvere</span> <span class=\"kn\">import</span> <span class=\"n\">arrow</span>\n\n<span class=\"c1\"># obviously you don't need to use named parameters</span>\n<span class=\"c1\"># it's just to illustrate their meaning.</span>\n<span class=\"nd\">@arrow</span><span class=\"p\">(</span><span class=\"n\">domain</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">),</span> <span class=\"n\">codomain</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span>\n\n<span class=\"c1\"># currying:</span>\n<span class=\"n\">add2</span> <span class=\"o\">=</span> <span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">add2</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">5</span>\n<span class=\"k\">assert</span> <span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)(</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">3</span> <span class=\"c1\"># successive calls</span>\n\n<span class=\"c1\"># composition (pipe):</span>\n<span class=\"c1\"># pass the result of first function to second</span>\n<span class=\"n\">add4</span> <span class=\"o\">=</span> <span class=\"n\">add2</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">add2</span>\n<span class=\"k\">assert</span> <span class=\"n\">add4</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">5</span>\n<span class=\"c1\"># composition (circle):</span>\n<span class=\"c1\"># pass result of add(1) into add4</span>\n<span class=\"n\">add5</span> <span class=\"o\">=</span> <span class=\"n\">add4</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">add5</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">10</span>\n\n<span class=\"c1\"># composed functions are tuples:</span>\n<span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">add4</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">add5</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">add4</span>\n\n<span class=\"c1\"># equality is checked over signatures:</span>\n<span class=\"k\">assert</span> <span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">add5</span> <span class=\"o\">==</span> <span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">add2</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">add2</span>\n\n<span class=\"c1\"># operator precedence:</span>\n<span class=\"k\">assert</span> <span class=\"n\">add5</span> <span class=\"o\">==</span> <span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">&gt;&gt;</span> <span class=\"p\">(</span><span class=\"n\">add2</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">add2</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">add5</span> <span class=\"o\">==</span> <span class=\"n\">add2</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">add2</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Type Checking:</span>\n<span class=\"n\">type_checked</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n  <span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s1\">'ab'</span>\n<span class=\"k\">except</span> <span class=\"ne\">TypeError</span><span class=\"p\">:</span>\n  <span class=\"n\">type_checked</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">type_checked</span><span class=\"p\">,</span> <span class=\"s1\">'add should not exists for str types'</span>\n\n\n<span class=\"c1\"># dispatch register</span>\n<span class=\"c1\"># concat inherit arrow properties</span>\n<span class=\"nd\">@add</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">((</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">),</span> <span class=\"nb\">str</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">concat</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"s2\">\"</span><span class=\"si\">%s</span><span class=\"s2\"> </span><span class=\"si\">%s</span><span class=\"s2\">\"</span> <span class=\"o\">%</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># can still call/curry... concat</span>\n<span class=\"k\">assert</span> <span class=\"n\">concat</span><span class=\"p\">(</span><span class=\"s1\">'a'</span><span class=\"p\">)(</span><span class=\"s1\">'b'</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s1\">'a b'</span>\n<span class=\"c1\"># add with str call concat</span>\n<span class=\"k\">assert</span> <span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s1\">'a'</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">concat</span><span class=\"p\">(</span><span class=\"s1\">'a'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Concat is only defined for str</span>\n<span class=\"n\">type_checked</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n  <span class=\"k\">assert</span> <span class=\"n\">concat</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">3</span>\n<span class=\"k\">except</span> <span class=\"ne\">TypeError</span><span class=\"p\">:</span>\n  <span class=\"n\">type_checked</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">type_checked</span><span class=\"p\">,</span> <span class=\"s1\">'concat should not exists for int types'</span>\n\n<span class=\"c1\"># Type Checking when composing:</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n  <span class=\"n\">add</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">concat</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"o\">=</span><span class=\"s1\">'b'</span><span class=\"p\">)</span>\n<span class=\"k\">except</span> <span class=\"ne\">TypeError</span> <span class=\"k\">as</span> <span class=\"n\">exc</span><span class=\"p\">:</span>\n  <span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">)</span>\n<span class=\"c1\"># hope message is clear :)</span>\n<span class=\"k\">assert</span> <span class=\"n\">message</span> <span class=\"o\">==</span> <span class=\"s2\">\"Cannot compose add -&gt; int with concat(x:str=Undefined, y:str=b)\"</span>\n<span class=\"c1\"># if composition was circle message would be:</span>\n<span class=\"c1\"># ... concat -&gt; str with add(x:int=Undefined, y:int=Undefined)</span>\n</pre>\n</blockquote>\n<p><strong>Code compatible with 3.x versions only.</strong></p>\n<blockquote>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">lawvere</span> <span class=\"kn\">import</span> <span class=\"n\">arrow</span>\n\n<span class=\"nd\">@arrow</span>\n<span class=\"k\">def</span> <span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">:</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">:</span><span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n  <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span>\n\n<span class=\"c1\"># identical use as Python 2 #</span>\n\n<span class=\"c1\"># Type Checking:</span>\n<span class=\"n\">type_checked</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n  <span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s1\">'ab'</span>\n<span class=\"k\">except</span> <span class=\"ne\">TypeError</span><span class=\"p\">:</span>\n  <span class=\"n\">type_checked</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">type_checked</span><span class=\"p\">,</span> <span class=\"s1\">'add should not exists for str types'</span>\n\n<span class=\"c1\"># dispatch</span>\n<span class=\"nd\">@add</span><span class=\"o\">.</span><span class=\"n\">register</span>\n<span class=\"k\">def</span> <span class=\"nf\">concat</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">:</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">:</span><span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n  <span class=\"k\">return</span> <span class=\"s2\">\"</span><span class=\"si\">%s</span><span class=\"s2\"> </span><span class=\"si\">%s</span><span class=\"s2\">\"</span> <span class=\"o\">%</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">concat</span><span class=\"p\">(</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s1\">'a b'</span>\n<span class=\"c1\"># now add exists for str types:</span>\n<span class=\"k\">assert</span> <span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s1\">'a b'</span>\n\n<span class=\"c1\"># type is also checked when composing... see python 2 ex.</span>\n</pre>\n</blockquote>\n</div>\n<div id=\"development\">\n<h2>Development</h2>\n<p>Your feedback, code review, improvements or bugs, and help to document is appreciated.\nYou can contact me by mail: apieum [at] gmail [dot] com</p>\n<p>Test recommended requirements:</p>\n<pre>pip install -r dev-requirements.txt\n</pre>\n<p>Sometimes \u2013spec-color doesn\u2019t function. Uninstall nosespec and nosecolor then reinstall nosecolor and nosespec separatly in this order (nosecolor first).</p>\n<p>Launch tests:</p>\n<pre>git clone git@github.com:apieum/lawvere.git\ncd lawvere\nnosetests --with-spec --spec-color ./lawvere\n# or with watch\n# nosetests --with-spec --spec-color --with-watch ./lawvere\n</pre>\n<a href=\"https://travis-ci.org/apieum/lawvere\" rel=\"nofollow\"><img alt=\"https://secure.travis-ci.org/apieum/lawvere.png?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6115cc27d26d729a5e3284637fab073b061e843b/68747470733a2f2f7365637572652e7472617669732d63692e6f72672f61706965756d2f6c6177766572652e706e673f6272616e63683d6d6173746572\"></a>\n</div>\n\n          </div>"}, "last_serial": 1213984, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "7deacda77e64333a8f6128627162077d", "sha256": "e09036d8599c88bfe2dcecb08ca72c65c8f5fd0e72343c4cba837ed818ce19de"}, "downloads": -1, "filename": "lawvere-0.1.tar.gz", "has_sig": false, "md5_digest": "7deacda77e64333a8f6128627162077d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16466, "upload_time": "2014-09-05T12:04:43", "upload_time_iso_8601": "2014-09-05T12:04:43.174485Z", "url": "https://files.pythonhosted.org/packages/d1/c8/eb7955963853d6f937494801cc29e2b82d1ebd22dc32f18d3ed59166b5de/lawvere-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7deacda77e64333a8f6128627162077d", "sha256": "e09036d8599c88bfe2dcecb08ca72c65c8f5fd0e72343c4cba837ed818ce19de"}, "downloads": -1, "filename": "lawvere-0.1.tar.gz", "has_sig": false, "md5_digest": "7deacda77e64333a8f6128627162077d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16466, "upload_time": "2014-09-05T12:04:43", "upload_time_iso_8601": "2014-09-05T12:04:43.174485Z", "url": "https://files.pythonhosted.org/packages/d1/c8/eb7955963853d6f937494801cc29e2b82d1ebd22dc32f18d3ed59166b5de/lawvere-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:47:40 2020"}