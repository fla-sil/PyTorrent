{"info": {"author": "Dmitry Zavalishin", "author_email": "dz@dz.ru", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Internet", "Topic :: System :: Networking"], "description": "# MQTT/UDP Python (3.x) implementation\n\nYou can check other languages implementations also - <https://github.com/dzavalishin/mqtt_udp>\n\n## Dirs\n\n  mqttudp\t\t\t\t\t- MQTT/UDP library in Python language\n\n  examples\t\t\t\t\t- Library usage examples\n\n  gate.sh\t\t\t\t\t- Shell script to start bidirectional MQTT/UDP to MQTT broker gateway\n  mqttudpgate.service\t\t- Unix systemctl service definition for gateway\n\n## Examples\n\n  pub.py                \t- Send one message\n\n  dump.py\t\t\t\t\t- Print all MQTT/UDP traffic\n  listen.py\t\t\t\t\t- Print packets only if content is changeg\n\n  mqtt_udp_to_openhab.py \t- Translate all the data to OpenHAB REST API\n  openhab_to_udp.py\t\t\t- Translate all the data from OpenHAB REST API (default sitemap) to MQTT/UDP\n\n  seq_storm_send.py \t\t- Send seqentially numbered packets as fast as possible\n  seq_storm_check.py \t\t- Check packets for sequentialness and calc speed\n\n  mqtt_bidir_gate.py\t\t- Translate data between MQTT/UDP and traditional MQTT\n  mqtt_broker_to_udp.py\t\t- One way, to MQTT/UDP\n  mqtt_udp_to_broker.py\t\t- One way, from MQTT/UDP\n\n  random_to_udp.py\t\t\t- Generate traffic with random numbers\n\n  ping.py\t\t\t\t\t- Send ping and print replies. Not all the implementations respond to ping yet.\n\n## Possible requirements\n\n  Some code examples may require paho-mqtt and websocket-client\n\n## Usage\n\n**Send data:**\n\n```python\nimport mqttudp.engine\n\nif __name__ == \"__main__\":\n    mqttudp.engine.send_publish( \"test_topic\", \"Hello, world!\" )\n```\n\n**Listen for data:**\n\n```python\nimport mqttudp.engine\n\ndef recv_packet(ptype,topic,value,pflags,addr):\n    if ptype != \"publish\":\n        print( ptype + \", \" + topic + \"\\t\\t\" + str(addr) )\n        return\n    print( topic+\"=\"+value+ \"\\t\\t\" + str(addr) )\n\nif __name__ == \"__main__\":\n    mqttudp.engine.listen(recv_packet)\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/dzavalishin/mqtt_udp", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "mqttudp", "package_url": "https://pypi.org/project/mqttudp/", "platform": "", "project_url": "https://pypi.org/project/mqttudp/", "project_urls": {"Homepage": "https://github.com/dzavalishin/mqtt_udp"}, "release_url": "https://pypi.org/project/mqttudp/0.1.post1/", "requires_dist": null, "requires_python": "", "summary": "An MQTT/UDP implementation in Python", "version": "0.1.post1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>MQTT/UDP Python (3.x) implementation</h1>\n<p>You can check other languages implementations also - <a href=\"https://github.com/dzavalishin/mqtt_udp\" rel=\"nofollow\">https://github.com/dzavalishin/mqtt_udp</a></p>\n<h2>Dirs</h2>\n<p>mqttudp\t\t\t\t\t- MQTT/UDP library in Python language</p>\n<p>examples\t\t\t\t\t- Library usage examples</p>\n<p>gate.sh\t\t\t\t\t- Shell script to start bidirectional MQTT/UDP to MQTT broker gateway\nmqttudpgate.service\t\t- Unix systemctl service definition for gateway</p>\n<h2>Examples</h2>\n<p>pub.py                \t- Send one message</p>\n<p>dump.py\t\t\t\t\t- Print all MQTT/UDP traffic\nlisten.py\t\t\t\t\t- Print packets only if content is changeg</p>\n<p>mqtt_udp_to_openhab.py \t- Translate all the data to OpenHAB REST API\nopenhab_to_udp.py\t\t\t- Translate all the data from OpenHAB REST API (default sitemap) to MQTT/UDP</p>\n<p>seq_storm_send.py \t\t- Send seqentially numbered packets as fast as possible\nseq_storm_check.py \t\t- Check packets for sequentialness and calc speed</p>\n<p>mqtt_bidir_gate.py\t\t- Translate data between MQTT/UDP and traditional MQTT\nmqtt_broker_to_udp.py\t\t- One way, to MQTT/UDP\nmqtt_udp_to_broker.py\t\t- One way, from MQTT/UDP</p>\n<p>random_to_udp.py\t\t\t- Generate traffic with random numbers</p>\n<p>ping.py\t\t\t\t\t- Send ping and print replies. Not all the implementations respond to ping yet.</p>\n<h2>Possible requirements</h2>\n<p>Some code examples may require paho-mqtt and websocket-client</p>\n<h2>Usage</h2>\n<p><strong>Send data:</strong></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">mqttudp.engine</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">mqttudp</span><span class=\"o\">.</span><span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">send_publish</span><span class=\"p\">(</span> <span class=\"s2\">\"test_topic\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Hello, world!\"</span> <span class=\"p\">)</span>\n</pre>\n<p><strong>Listen for data:</strong></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">mqttudp.engine</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">recv_packet</span><span class=\"p\">(</span><span class=\"n\">ptype</span><span class=\"p\">,</span><span class=\"n\">topic</span><span class=\"p\">,</span><span class=\"n\">value</span><span class=\"p\">,</span><span class=\"n\">pflags</span><span class=\"p\">,</span><span class=\"n\">addr</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">ptype</span> <span class=\"o\">!=</span> <span class=\"s2\">\"publish\"</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span> <span class=\"n\">ptype</span> <span class=\"o\">+</span> <span class=\"s2\">\", \"</span> <span class=\"o\">+</span> <span class=\"n\">topic</span> <span class=\"o\">+</span> <span class=\"s2\">\"</span><span class=\"se\">\\t\\t</span><span class=\"s2\">\"</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">addr</span><span class=\"p\">)</span> <span class=\"p\">)</span>\n        <span class=\"k\">return</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span> <span class=\"n\">topic</span><span class=\"o\">+</span><span class=\"s2\">\"=\"</span><span class=\"o\">+</span><span class=\"n\">value</span><span class=\"o\">+</span> <span class=\"s2\">\"</span><span class=\"se\">\\t\\t</span><span class=\"s2\">\"</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">addr</span><span class=\"p\">)</span> <span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">mqttudp</span><span class=\"o\">.</span><span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">listen</span><span class=\"p\">(</span><span class=\"n\">recv_packet</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 4690503, "releases": {"0.1.post1": [{"comment_text": "", "digests": {"md5": "cbda34a556f3abfe03cd96f6bc6884f5", "sha256": "32028101419b4fda2c2b17357549f9880a84d84898d85e445876898d3ef388ec"}, "downloads": -1, "filename": "mqttudp-0.1.post1-py3-none-any.whl", "has_sig": false, "md5_digest": "cbda34a556f3abfe03cd96f6bc6884f5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11486, "upload_time": "2019-01-13T10:12:42", "upload_time_iso_8601": "2019-01-13T10:12:42.793369Z", "url": "https://files.pythonhosted.org/packages/a3/fd/50215163dddaf15994f9e739bf1cca1cc48ae396dcab6185496eeb45dd86/mqttudp-0.1.post1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "218ebde689717c203e902253e674f559", "sha256": "b089299e318a6ee1d02ab1f6ed72bb6dc29bc0df0a6674cd40d54bdba648ccb4"}, "downloads": -1, "filename": "mqttudp-0.1.post1.tar.gz", "has_sig": false, "md5_digest": "218ebde689717c203e902253e674f559", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15120, "upload_time": "2019-01-13T10:12:44", "upload_time_iso_8601": "2019-01-13T10:12:44.851776Z", "url": "https://files.pythonhosted.org/packages/47/44/01f6076788d4f6d145667f54058adc114e0ddcedfbc9ae100b37a721ab53/mqttudp-0.1.post1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "cbda34a556f3abfe03cd96f6bc6884f5", "sha256": "32028101419b4fda2c2b17357549f9880a84d84898d85e445876898d3ef388ec"}, "downloads": -1, "filename": "mqttudp-0.1.post1-py3-none-any.whl", "has_sig": false, "md5_digest": "cbda34a556f3abfe03cd96f6bc6884f5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11486, "upload_time": "2019-01-13T10:12:42", "upload_time_iso_8601": "2019-01-13T10:12:42.793369Z", "url": "https://files.pythonhosted.org/packages/a3/fd/50215163dddaf15994f9e739bf1cca1cc48ae396dcab6185496eeb45dd86/mqttudp-0.1.post1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "218ebde689717c203e902253e674f559", "sha256": "b089299e318a6ee1d02ab1f6ed72bb6dc29bc0df0a6674cd40d54bdba648ccb4"}, "downloads": -1, "filename": "mqttudp-0.1.post1.tar.gz", "has_sig": false, "md5_digest": "218ebde689717c203e902253e674f559", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15120, "upload_time": "2019-01-13T10:12:44", "upload_time_iso_8601": "2019-01-13T10:12:44.851776Z", "url": "https://files.pythonhosted.org/packages/47/44/01f6076788d4f6d145667f54058adc114e0ddcedfbc9ae100b37a721ab53/mqttudp-0.1.post1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:05 2020"}