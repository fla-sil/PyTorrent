{"info": {"author": "Bishal Sarangkoti", "author_email": "sarangbishal@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Recursion Visualiser  \nRecursion visualiser is a python tool that visualizes recursion tree with animation and draws recursion tree for recursive function.\nIt works with almost any type of recursive function.\nJust add the recursion-visualiser decorator to your function and let it do the rest of the work.\n\n\n  ## Installation  \nThe only dependency for recursion visualiser is Graphviz which you can download from [here](https://www.graphviz.org/download/)  \n\n- Download  [graphviz binary](https://www.graphviz.org/download/)  \n- Add graphviz bin to path manually or by adding the following line on your script. Change the installation directory according to your installation path  \n\n```  \n# Set it to bin folder of graphviz  \nos.environ[\"PATH\"] += os.pathsep +  'C:/Program Files (x86)/Graphviz2.38/bin/'  \n```  \n\n\nThe easiest way to  install ```recursion-visualiser``` package is from [pypi](https://pypi.org/project/recursion-visualiser/)\n```\npip install recursion-visualiser\n```\nThe preferred way to import the class from the package is as:\n```python\nfrom visualiser.visualiser import Visualiser as vs\n```\n## Example  \n### 1.  Fibonacci  \nLet's draw the recursion tree for fibonacci number.  \nHere is how the simple code looks like  \n```python  \ndef fib(n):  \n    if n <= 1: \n        return n \n    return fib(n - 1) + fib(n - 2)  \n\nprint(fib(6))  \n```  \n\nNow we want to draw the recursion tree for this function. It is as simple as adding a decorator  \n```python  \n# Author: Bishal Sarang\n\n# Import Visualiser class from module visualiser\nfrom visualiser.visualiser import Visualiser as vs\n\n# Add decorator\n# Decorator accepts arguments: ignore_args and show_argument_name\n@vs()\ndef fib(n):\n    if n <= 1:\n        return n\n    return fib(n=n - 1) + fib(n=n - 2)\n\n\ndef main():\n    # Call function\n    print(fib(n=6))\n    # Save recursion tree to a file\n    vs.make_animation(\"fibonacci.gif\", delay=2)\n\n\nif __name__ == \"__main__\":\n    main()\n```  \nHere are the changes required:  \n\n - Add decorator Visualiser which accepts optional arguments `ignore_args`, `show_argument_name`  and 'show_return_value'   \n - Change every function calls to pass as keyword arguments.  \n - Make_animation\n\n The output image are saved as \"fibonacci.gif\" and \"fibonacci.png\"\n\nHere is how the recursion tree looks like:  \nAnimation:\n![enter image description here](https://github.com/sarangbishal/Recursion-Visualizer/blob/master/examples/fibonacci.gif)  \n\n![enter image description here](https://github.com/sarangbishal/Recursion-Visualizer/blob/master/examples/fibonacci.png)  \n\nFind other examples : [here](https://github.com/sarangbishal/Recursion-Tree-Visualizer/tree/master/examples)\nand read more about **recursion-visualiser** [here](https://github.com/sarangbishal/Recursion-Tree-Visualizer/blob/master/Examples.md)\n\n## TODO:  \n - [x] Minimal working version  \n - [x] Upload package to pypi  \n - [x] Support animation\n - [ ] Support aliasing for function name\n - [ ] Show repeated states\n - [ ] Support node_color, backgroundcolor etc\n - [ ] Refactor  \n - [ ] Handle base cases  \n - [ ] Make more beautiful trees\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/sarangbishal/Recursion-Tree-Visualizer", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "recursion-visualiser", "package_url": "https://pypi.org/project/recursion-visualiser/", "platform": "", "project_url": "https://pypi.org/project/recursion-visualiser/", "project_urls": {"Homepage": "https://github.com/sarangbishal/Recursion-Tree-Visualizer"}, "release_url": "https://pypi.org/project/recursion-visualiser/1.0.1/", "requires_dist": ["pydot", "imageio"], "requires_python": ">=3.6", "summary": "A small python package to visualise recursive function on Python. It draws recursion tree", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Recursion Visualiser</h1>\n<p>Recursion visualiser is a python tool that visualizes recursion tree with animation and draws recursion tree for recursive function.\nIt works with almost any type of recursive function.\nJust add the recursion-visualiser decorator to your function and let it do the rest of the work.</p>\n<h2>Installation</h2>\n<p>The only dependency for recursion visualiser is Graphviz which you can download from <a href=\"https://www.graphviz.org/download/\" rel=\"nofollow\">here</a></p>\n<ul>\n<li>Download  <a href=\"https://www.graphviz.org/download/\" rel=\"nofollow\">graphviz binary</a></li>\n<li>Add graphviz bin to path manually or by adding the following line on your script. Change the installation directory according to your installation path</li>\n</ul>\n<pre><code># Set it to bin folder of graphviz  \nos.environ[\"PATH\"] += os.pathsep +  'C:/Program Files (x86)/Graphviz2.38/bin/'  \n</code></pre>\n<p>The easiest way to  install <code>recursion-visualiser</code> package is from <a href=\"https://pypi.org/project/recursion-visualiser/\" rel=\"nofollow\">pypi</a></p>\n<pre><code>pip install recursion-visualiser\n</code></pre>\n<p>The preferred way to import the class from the package is as:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">visualiser.visualiser</span> <span class=\"kn\">import</span> <span class=\"n\">Visualiser</span> <span class=\"k\">as</span> <span class=\"n\">vs</span>\n</pre>\n<h2>Example</h2>\n<h3>1.  Fibonacci</h3>\n<p>Let's draw the recursion tree for fibonacci number.<br>\nHere is how the simple code looks like</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">fib</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>  \n    <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">1</span><span class=\"p\">:</span> \n        <span class=\"k\">return</span> <span class=\"n\">n</span> \n    <span class=\"k\">return</span> <span class=\"n\">fib</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">fib</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"p\">)</span>  \n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">fib</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">))</span>  \n</pre>\n<p>Now we want to draw the recursion tree for this function. It is as simple as adding a decorator</p>\n<pre><span class=\"c1\"># Author: Bishal Sarang</span>\n\n<span class=\"c1\"># Import Visualiser class from module visualiser</span>\n<span class=\"kn\">from</span> <span class=\"nn\">visualiser.visualiser</span> <span class=\"kn\">import</span> <span class=\"n\">Visualiser</span> <span class=\"k\">as</span> <span class=\"n\">vs</span>\n\n<span class=\"c1\"># Add decorator</span>\n<span class=\"c1\"># Decorator accepts arguments: ignore_args and show_argument_name</span>\n<span class=\"nd\">@vs</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">fib</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">n</span>\n    <span class=\"k\">return</span> <span class=\"n\">fib</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">=</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">fib</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">=</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"c1\"># Call function</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">fib</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">6</span><span class=\"p\">))</span>\n    <span class=\"c1\"># Save recursion tree to a file</span>\n    <span class=\"n\">vs</span><span class=\"o\">.</span><span class=\"n\">make_animation</span><span class=\"p\">(</span><span class=\"s2\">\"fibonacci.gif\"</span><span class=\"p\">,</span> <span class=\"n\">delay</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">main</span><span class=\"p\">()</span>\n</pre>\n<p>Here are the changes required:</p>\n<ul>\n<li>Add decorator Visualiser which accepts optional arguments <code>ignore_args</code>, <code>show_argument_name</code>  and 'show_return_value'</li>\n<li>Change every function calls to pass as keyword arguments.</li>\n<li>Make_animation</li>\n</ul>\n<p>The output image are saved as \"fibonacci.gif\" and \"fibonacci.png\"</p>\n<p>Here is how the recursion tree looks like:<br>\nAnimation:\n<img alt=\"enter image description here\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7a370ccf211e2dcdd784c1e3b4b02a0f294b3ba1/68747470733a2f2f6769746875622e636f6d2f736172616e6762697368616c2f526563757273696f6e2d56697375616c697a65722f626c6f622f6d61737465722f6578616d706c65732f6669626f6e616363692e676966\"></p>\n<p><img alt=\"enter image description here\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/28873bf5642b59d50a592aeab90f6bfcb92640e9/68747470733a2f2f6769746875622e636f6d2f736172616e6762697368616c2f526563757273696f6e2d56697375616c697a65722f626c6f622f6d61737465722f6578616d706c65732f6669626f6e616363692e706e67\"></p>\n<p>Find other examples : <a href=\"https://github.com/sarangbishal/Recursion-Tree-Visualizer/tree/master/examples\" rel=\"nofollow\">here</a>\nand read more about <strong>recursion-visualiser</strong> <a href=\"https://github.com/sarangbishal/Recursion-Tree-Visualizer/blob/master/Examples.md\" rel=\"nofollow\">here</a></p>\n<h2>TODO:</h2>\n<ul>\n<li>[x] Minimal working version</li>\n<li>[x] Upload package to pypi</li>\n<li>[x] Support animation</li>\n<li>[ ] Support aliasing for function name</li>\n<li>[ ] Show repeated states</li>\n<li>[ ] Support node_color, backgroundcolor etc</li>\n<li>[ ] Refactor</li>\n<li>[ ] Handle base cases</li>\n<li>[ ] Make more beautiful trees</li>\n</ul>\n\n          </div>"}, "last_serial": 6592736, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "ec18371fc680ba038eadd0d718fe7736", "sha256": "947dbcef11d334f2f1608da2ac1ff2a54e5988aa005d74c9e01808d2bf83fc90"}, "downloads": -1, "filename": "recursion_visualiser-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "ec18371fc680ba038eadd0d718fe7736", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 3877, "upload_time": "2020-02-05T18:17:03", "upload_time_iso_8601": "2020-02-05T18:17:03.162746Z", "url": "https://files.pythonhosted.org/packages/e3/ac/e47b9e51799c460ead52ffa303499c70fcf9b1ffb8a127211699d5cc0e5f/recursion_visualiser-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e63741e4fe5d1d6c13b3571c5ccf9e56", "sha256": "2a1c0afcd2b9d80fa7ea3243f5efe6d25993bb29135c3f69297b85d8b51b7a77"}, "downloads": -1, "filename": "recursion-visualiser-0.0.2.tar.gz", "has_sig": false, "md5_digest": "e63741e4fe5d1d6c13b3571c5ccf9e56", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3601, "upload_time": "2020-02-05T18:17:05", "upload_time_iso_8601": "2020-02-05T18:17:05.974776Z", "url": "https://files.pythonhosted.org/packages/1f/12/e54f6f88648a6464e1eb09e1766805af288ef1d5dda846e442408d84ff01/recursion-visualiser-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "876518de79e78af02c5cb71460c4cac1", "sha256": "be4ba129e47a39e48a9ab2197b937620c3bce1bbee6fd4b83e046ac8378ea658"}, "downloads": -1, "filename": "recursion_visualiser-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "876518de79e78af02c5cb71460c4cac1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 4817, "upload_time": "2020-02-06T16:32:43", "upload_time_iso_8601": "2020-02-06T16:32:43.902674Z", "url": "https://files.pythonhosted.org/packages/9e/f6/737280975665e689aba46ac39219fe5049e7609599470389864b44a53111/recursion_visualiser-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9186b52250268c750ff291b65f7908ac", "sha256": "4c7e9fcd629c79ea4180f9baa276ba26a1b015134ad86f5c7c11f3ba61f29a7e"}, "downloads": -1, "filename": "recursion-visualiser-0.0.3.tar.gz", "has_sig": false, "md5_digest": "9186b52250268c750ff291b65f7908ac", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4434, "upload_time": "2020-02-06T16:32:47", "upload_time_iso_8601": "2020-02-06T16:32:47.124287Z", "url": "https://files.pythonhosted.org/packages/67/b4/f9550111260076ef10f042fb2429dfa9306ae8dd04a9a87c91496a5d1c0a/recursion-visualiser-0.0.3.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "2b7b91fc204872f86a046ba6ee71e768", "sha256": "962947339c39f814f5f146d0b67a7a209b0b3fd1e0bb835e9a1c818034b139b1"}, "downloads": -1, "filename": "recursion_visualiser-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "2b7b91fc204872f86a046ba6ee71e768", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5330, "upload_time": "2020-02-07T09:33:44", "upload_time_iso_8601": "2020-02-07T09:33:44.842519Z", "url": "https://files.pythonhosted.org/packages/c2/f7/75598d6f2887008f6e8bc884266587fb70ac5c2db8486f2f1c135ac405c8/recursion_visualiser-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "009a8c3b568aa770662227c4b09162d3", "sha256": "79a97c92e8eb9f123eb84ea232738c1b4439f6d2b1061200fcea3d3c85ab889e"}, "downloads": -1, "filename": "recursion-visualiser-1.0.0.tar.gz", "has_sig": false, "md5_digest": "009a8c3b568aa770662227c4b09162d3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5019, "upload_time": "2020-02-07T09:33:49", "upload_time_iso_8601": "2020-02-07T09:33:49.790784Z", "url": "https://files.pythonhosted.org/packages/39/a4/5001c3afdacf6d8d4d0fd63510e703dc58d0b7b8ad58a7dccc1d3b6da832/recursion-visualiser-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "37e1604a7585f1cebc7199ecd6e24dda", "sha256": "0992ccda0edd7c17bfc2e1770bc038bb55e33332a6dff07866b86ef53004490b"}, "downloads": -1, "filename": "recursion_visualiser-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "37e1604a7585f1cebc7199ecd6e24dda", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5582, "upload_time": "2020-02-08T06:37:25", "upload_time_iso_8601": "2020-02-08T06:37:25.570393Z", "url": "https://files.pythonhosted.org/packages/c2/56/8b697395cc0e532567ede861e5045622013c20d6723af3fea455e4687683/recursion_visualiser-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3c3ebce96c80cebe0d5ec09677b2f5e0", "sha256": "11c449b2e4b1807dab3011846a24f937f22127c2c02f4a4709ec647dcc2aebf1"}, "downloads": -1, "filename": "recursion-visualiser-1.0.1.tar.gz", "has_sig": false, "md5_digest": "3c3ebce96c80cebe0d5ec09677b2f5e0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5249, "upload_time": "2020-02-08T06:37:28", "upload_time_iso_8601": "2020-02-08T06:37:28.489855Z", "url": "https://files.pythonhosted.org/packages/43/37/095c6a38dc02939321d0cfa3cc3c57345d9e3f0272e8b3933061f6f52f9f/recursion-visualiser-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "37e1604a7585f1cebc7199ecd6e24dda", "sha256": "0992ccda0edd7c17bfc2e1770bc038bb55e33332a6dff07866b86ef53004490b"}, "downloads": -1, "filename": "recursion_visualiser-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "37e1604a7585f1cebc7199ecd6e24dda", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5582, "upload_time": "2020-02-08T06:37:25", "upload_time_iso_8601": "2020-02-08T06:37:25.570393Z", "url": "https://files.pythonhosted.org/packages/c2/56/8b697395cc0e532567ede861e5045622013c20d6723af3fea455e4687683/recursion_visualiser-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3c3ebce96c80cebe0d5ec09677b2f5e0", "sha256": "11c449b2e4b1807dab3011846a24f937f22127c2c02f4a4709ec647dcc2aebf1"}, "downloads": -1, "filename": "recursion-visualiser-1.0.1.tar.gz", "has_sig": false, "md5_digest": "3c3ebce96c80cebe0d5ec09677b2f5e0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5249, "upload_time": "2020-02-08T06:37:28", "upload_time_iso_8601": "2020-02-08T06:37:28.489855Z", "url": "https://files.pythonhosted.org/packages/43/37/095c6a38dc02939321d0cfa3cc3c57345d9e3f0272e8b3933061f6f52f9f/recursion-visualiser-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:06:03 2020"}