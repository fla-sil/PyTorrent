{"info": {"author": "Iv\u00e1n de Paz Centeno", "author_email": "ipazc@unileon.es", "bugtrack_url": null, "classifiers": ["Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: Education", "Intended Audience :: Science/Research", "Natural Language :: English", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "==============\npyzip 0.2.0\n==============\n\n`PyZip` is a package for managing a zip content as a dictionary.\n\n.. image:: https://badge.fury.io/py/pyzip.svg\n    :target: https://badge.fury.io/py/pyzip\n\n.. image:: https://travis-ci.org/ipazc/pyzip.svg?branch=master\n    :target: https://travis-ci.org/ipazc/pyzip\n\n.. image:: https://coveralls.io/repos/github/ipazc/pyzip/badge.svg?branch=master\n    :target: https://coveralls.io/github/ipazc/pyzip?branch=master\n\n.. image:: https://landscape.io/github/ipazc/pyzip/master/landscape.svg?style=flat\n   :target: https://landscape.io/github/ipazc/pyzip/master\n   :alt: Code Health\n\nIs this zipping process simple enough?\n\n.. code:: python\n\n    >>> from pyzip import PyZip\n    >>> \n    >>> pyzip = PyZip()\n    >>> pyzip['key1'] = b\"content_bytes\"\n    >>> pyzip['key2'] = file_bytes\n    >>>\n    >>> pyzip.save(\"/path/to/file.zip\")\n    >>> zip_bytes = pyzip.to_bytes() # Alternatively, to bytes\n\nIt is run on top of the module `zipfile`, however, in addition to its functionality, `PyZip` accepts to edit and remove\nelements of a zip. Furthermore, it provides integrity checks to ensure that elements are successfully stored (SHA256 hash).\n\nInstallation\n============\nCurrently it is only supported **Python 3.4.1** onwards:\n\n.. code:: bash\n    \n    sudo pip3 install pyzip\n\nBasic Usage\n===========\n`PyZip` can easily store content into a zip on the fly. The usage is the same as a normal dictionary:\n\n* Add content to in-memory zip:\n\n.. code:: python\n\n    >>> from pyzip import PyZip\n    >>> \n    >>> pyzip = PyZip()\n    >>> pyzip['key1'] = b\"content_bytes\"\n\n\n* Get specific content:\n\n.. code:: python\n\n    >>> print(pyzip['key1'])\n    b\"content_bytes\"\n    \n\n* Edit content:\n\n.. code:: python\n\n    >>> pyzip['key1'] = b\"replaced_content_bytes\"\n\n\n* Remove content:\n\n.. code:: python\n\n    >>> del pyzip['key1']\n\n\n* Get zip bytes:\n\n.. code:: python\n\n    >>> zip_bytes = pyzip.to_bytes()\n\n\n* Load from bytes:\n\n.. code:: python\n\n    >>> pyzip = PyZip().from_bytes(zip_bytes)\n    \n\n* Save to zip file:\n\n.. code:: python\n\n    >>> pyzip.save(\"path/to/file.zip\")\n    \n\n* Load from zip file:\n\n.. code:: python\n\n    >>> pyzip = PyZip().from_file(\"path/to/file.zip\")\n\n\n* Convert existing dictionary into PyZip:\n\n.. code:: python\n\n    >>> pyzip = PyZip({'file1': b'example', 'file2': b'example2'})\n\n\n* It is also possible to convert a multiple level dict into a PyZip:\n\n.. code:: python\n\n    >>> pyzip = PyZip({'file1': b'example', 'file2': b'example2', 'folder1': {'file1': b'file1 in folder1'}})\n\n\n    \nUse case\n========\n\nPyZip can be used in along with `PyFolder <https://pypi.python.org/pypi/pyfolder/0.0.1>`_ in order to ease the compression and decompression of folders and zips:\n\n\n**Compressing recursively a folder into a zip:**\n\n\n.. code:: python\n\n    >>> from pyzip import PyZip\n    >>> from pyfolder import PyFolder\n    >>>\n    >>> path_to_compress = \"route/to/files\"\n    >>>\n    >>> pyzip = PyZip(PyFolder(path_to_compress, interpret=False))\n    >>> pyzip.save(\"compressed_folder.zip\")\n    >>>\n\n**Uncompressing recursively a previously compressed folder from a zip:**\n\n.. code:: python\n\n    >>> from pyzip import PyZip\n    >>> from pyfolder import PyFolder\n    >>>\n    >>> destination = \"route/for/uncompress\"\n    >>>\n    >>> pyzip = PyZip(PyFolder(destination, interpret=False)).from_file(\"compressed_folder.zip\", inflate=False)\n    >>>\n\nLICENSE\n=======\n\nIt is released under the MIT license.", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/ipazc/pyzip", "keywords": "pyzip dict zip file zipfile memory in-memory", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pyzip", "package_url": "https://pypi.org/project/pyzip/", "platform": "", "project_url": "https://pypi.org/project/pyzip/", "project_urls": {"Homepage": "http://github.com/ipazc/pyzip"}, "release_url": "https://pypi.org/project/pyzip/0.2.0/", "requires_dist": null, "requires_python": "", "summary": "PyZip is a package for handling zip-in-memory content as a dictionary.", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><cite>PyZip</cite> is a package for managing a zip content as a dictionary.</p>\n<a href=\"https://badge.fury.io/py/pyzip\" rel=\"nofollow\"><img alt=\"https://badge.fury.io/py/pyzip.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d94b81cdb0b7048565e1ba017366d9977621b22e/68747470733a2f2f62616467652e667572792e696f2f70792f70797a69702e737667\"></a>\n<a href=\"https://travis-ci.org/ipazc/pyzip\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/ipazc/pyzip.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fdf3a9b753e164c763e07349a875337559ab5ce2/68747470733a2f2f7472617669732d63692e6f72672f6970617a632f70797a69702e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/ipazc/pyzip?branch=master\" rel=\"nofollow\"><img alt=\"https://coveralls.io/repos/github/ipazc/pyzip/badge.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b95efc81d8db0aa62085de448ddc1aece0060653/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6970617a632f70797a69702f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://landscape.io/github/ipazc/pyzip/master\" rel=\"nofollow\"><img alt=\"Code Health\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7d5723251ce8b9d6f576a6b7bc8b4b86f7f67a06/68747470733a2f2f6c616e6473636170652e696f2f6769746875622f6970617a632f70797a69702f6d61737465722f6c616e6473636170652e7376673f7374796c653d666c6174\"></a>\n<p>Is this zipping process simple enough?</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">pyzip</span> <span class=\"kn\">import</span> <span class=\"n\">PyZip</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pyzip</span> <span class=\"o\">=</span> <span class=\"n\">PyZip</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pyzip</span><span class=\"p\">[</span><span class=\"s1\">'key1'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"s2\">\"content_bytes\"</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pyzip</span><span class=\"p\">[</span><span class=\"s1\">'key2'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">file_bytes</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pyzip</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"s2\">\"/path/to/file.zip\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">zip_bytes</span> <span class=\"o\">=</span> <span class=\"n\">pyzip</span><span class=\"o\">.</span><span class=\"n\">to_bytes</span><span class=\"p\">()</span> <span class=\"c1\"># Alternatively, to bytes</span>\n</pre>\n<p>It is run on top of the module <cite>zipfile</cite>, however, in addition to its functionality, <cite>PyZip</cite> accepts to edit and remove\nelements of a zip. Furthermore, it provides integrity checks to ensure that elements are successfully stored (SHA256 hash).</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Currently it is only supported <strong>Python 3.4.1</strong> onwards:</p>\n<pre>sudo pip3 install pyzip\n</pre>\n</div>\n<div id=\"basic-usage\">\n<h2>Basic Usage</h2>\n<p><cite>PyZip</cite> can easily store content into a zip on the fly. The usage is the same as a normal dictionary:</p>\n<ul>\n<li>Add content to in-memory zip:</li>\n</ul>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">pyzip</span> <span class=\"kn\">import</span> <span class=\"n\">PyZip</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pyzip</span> <span class=\"o\">=</span> <span class=\"n\">PyZip</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pyzip</span><span class=\"p\">[</span><span class=\"s1\">'key1'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"s2\">\"content_bytes\"</span>\n</pre>\n<ul>\n<li>Get specific content:</li>\n</ul>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">pyzip</span><span class=\"p\">[</span><span class=\"s1\">'key1'</span><span class=\"p\">])</span>\n<span class=\"sa\">b</span><span class=\"s2\">\"content_bytes\"</span>\n</pre>\n<ul>\n<li>Edit content:</li>\n</ul>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pyzip</span><span class=\"p\">[</span><span class=\"s1\">'key1'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"s2\">\"replaced_content_bytes\"</span>\n</pre>\n<ul>\n<li>Remove content:</li>\n</ul>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">del</span> <span class=\"n\">pyzip</span><span class=\"p\">[</span><span class=\"s1\">'key1'</span><span class=\"p\">]</span>\n</pre>\n<ul>\n<li>Get zip bytes:</li>\n</ul>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">zip_bytes</span> <span class=\"o\">=</span> <span class=\"n\">pyzip</span><span class=\"o\">.</span><span class=\"n\">to_bytes</span><span class=\"p\">()</span>\n</pre>\n<ul>\n<li>Load from bytes:</li>\n</ul>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pyzip</span> <span class=\"o\">=</span> <span class=\"n\">PyZip</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">from_bytes</span><span class=\"p\">(</span><span class=\"n\">zip_bytes</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>Save to zip file:</li>\n</ul>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pyzip</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"s2\">\"path/to/file.zip\"</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>Load from zip file:</li>\n</ul>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pyzip</span> <span class=\"o\">=</span> <span class=\"n\">PyZip</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">from_file</span><span class=\"p\">(</span><span class=\"s2\">\"path/to/file.zip\"</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>Convert existing dictionary into PyZip:</li>\n</ul>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pyzip</span> <span class=\"o\">=</span> <span class=\"n\">PyZip</span><span class=\"p\">({</span><span class=\"s1\">'file1'</span><span class=\"p\">:</span> <span class=\"sa\">b</span><span class=\"s1\">'example'</span><span class=\"p\">,</span> <span class=\"s1\">'file2'</span><span class=\"p\">:</span> <span class=\"sa\">b</span><span class=\"s1\">'example2'</span><span class=\"p\">})</span>\n</pre>\n<ul>\n<li>It is also possible to convert a multiple level dict into a PyZip:</li>\n</ul>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pyzip</span> <span class=\"o\">=</span> <span class=\"n\">PyZip</span><span class=\"p\">({</span><span class=\"s1\">'file1'</span><span class=\"p\">:</span> <span class=\"sa\">b</span><span class=\"s1\">'example'</span><span class=\"p\">,</span> <span class=\"s1\">'file2'</span><span class=\"p\">:</span> <span class=\"sa\">b</span><span class=\"s1\">'example2'</span><span class=\"p\">,</span> <span class=\"s1\">'folder1'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'file1'</span><span class=\"p\">:</span> <span class=\"sa\">b</span><span class=\"s1\">'file1 in folder1'</span><span class=\"p\">}})</span>\n</pre>\n</div>\n<div id=\"use-case\">\n<h2>Use case</h2>\n<p>PyZip can be used in along with <a href=\"https://pypi.python.org/pypi/pyfolder/0.0.1\" rel=\"nofollow\">PyFolder</a> in order to ease the compression and decompression of folders and zips:</p>\n<p><strong>Compressing recursively a folder into a zip:</strong></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">pyzip</span> <span class=\"kn\">import</span> <span class=\"n\">PyZip</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">pyfolder</span> <span class=\"kn\">import</span> <span class=\"n\">PyFolder</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">path_to_compress</span> <span class=\"o\">=</span> <span class=\"s2\">\"route/to/files\"</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pyzip</span> <span class=\"o\">=</span> <span class=\"n\">PyZip</span><span class=\"p\">(</span><span class=\"n\">PyFolder</span><span class=\"p\">(</span><span class=\"n\">path_to_compress</span><span class=\"p\">,</span> <span class=\"n\">interpret</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pyzip</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"s2\">\"compressed_folder.zip\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n</pre>\n<p><strong>Uncompressing recursively a previously compressed folder from a zip:</strong></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">pyzip</span> <span class=\"kn\">import</span> <span class=\"n\">PyZip</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">pyfolder</span> <span class=\"kn\">import</span> <span class=\"n\">PyFolder</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">destination</span> <span class=\"o\">=</span> <span class=\"s2\">\"route/for/uncompress\"</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pyzip</span> <span class=\"o\">=</span> <span class=\"n\">PyZip</span><span class=\"p\">(</span><span class=\"n\">PyFolder</span><span class=\"p\">(</span><span class=\"n\">destination</span><span class=\"p\">,</span> <span class=\"n\">interpret</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">from_file</span><span class=\"p\">(</span><span class=\"s2\">\"compressed_folder.zip\"</span><span class=\"p\">,</span> <span class=\"n\">inflate</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n</pre>\n</div>\n<div id=\"license\">\n<h2>LICENSE</h2>\n<p>It is released under the MIT license.</p>\n</div>\n\n          </div>"}, "last_serial": 3234890, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "93c0f170e8a4fa0a476db0abe72e8ee0", "sha256": "9b426ebd92b2f14ea631d3b13f74a0af4dcf74f01fc584132020159e301b11b0"}, "downloads": -1, "filename": "pyzip-0.0.1.tar.gz", "has_sig": false, "md5_digest": "93c0f170e8a4fa0a476db0abe72e8ee0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4369, "upload_time": "2017-09-28T17:43:13", "upload_time_iso_8601": "2017-09-28T17:43:13.562378Z", "url": "https://files.pythonhosted.org/packages/5b/3d/c8747172db365462bca7c7f9238ce61ae9d326ec6fb2bad54b50efa649e5/pyzip-0.0.1.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "2fa153938e77670235086076e79ed318", "sha256": "76fa8c7a069d1687aeefc2781f425e49b377a773f80ce4c7539a8acbc0957288"}, "downloads": -1, "filename": "pyzip-0.1.0.tar.gz", "has_sig": false, "md5_digest": "2fa153938e77670235086076e79ed318", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5989, "upload_time": "2017-10-08T03:08:52", "upload_time_iso_8601": "2017-10-08T03:08:52.459923Z", "url": "https://files.pythonhosted.org/packages/8c/9c/9d7979c597e1f330ad5449390ee4c10b520c4bac6c49c82426d49f875fa0/pyzip-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "82cb32e7855818e2e90614631acc7dab", "sha256": "c0b10776d798e4be9d5fe6eec541dd0a9740b6550b12fd4cfa238a085686a298"}, "downloads": -1, "filename": "pyzip-0.2.0.tar.gz", "has_sig": false, "md5_digest": "82cb32e7855818e2e90614631acc7dab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6278, "upload_time": "2017-10-08T21:58:11", "upload_time_iso_8601": "2017-10-08T21:58:11.557600Z", "url": "https://files.pythonhosted.org/packages/40/72/e29470ecfb5f2bc8cdd2a1b8a6aa14af8d44aa08fe5efa407cd991ce2c64/pyzip-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "82cb32e7855818e2e90614631acc7dab", "sha256": "c0b10776d798e4be9d5fe6eec541dd0a9740b6550b12fd4cfa238a085686a298"}, "downloads": -1, "filename": "pyzip-0.2.0.tar.gz", "has_sig": false, "md5_digest": "82cb32e7855818e2e90614631acc7dab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6278, "upload_time": "2017-10-08T21:58:11", "upload_time_iso_8601": "2017-10-08T21:58:11.557600Z", "url": "https://files.pythonhosted.org/packages/40/72/e29470ecfb5f2bc8cdd2a1b8a6aa14af8d44aa08fe5efa407cd991ce2c64/pyzip-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:10:36 2020"}