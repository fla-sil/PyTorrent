{"info": {"author": "Anthony Baire", "author_email": "Anthony.Baire@irisa.fr", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Framework :: AsyncIO", "License :: OSI Approved :: GNU Lesser General Public License v2 or later (LGPLv2+)", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Security :: Cryptography"], "description": "aio\\_gnutls\\_transport - asyncio transport over GnuTLS\n======================================================\n\n`aio_gnutls_transport` provides a python3 [asyncio\ntransport](https://docs.python.org/3/library/asyncio-protocol.html) over\n[GnuTLS](https://gnutls.org/). It aims to be a **drop-in replacement** for the\nnative SSL transport in the stdlib (and which is based on OpenSSL).\n\nIt also supports **half-closed TLS connections**, in other words you can\n[.write\\_eof()](https://docs.python.org/3/library/asyncio-protocol.html?highlight=write_eof#asyncio.WriteTransport.write_eof)\non TLS streams (which is not possible with the native implementation).\n\n\n#### Licence\n\nGNU Lesser General Public License version 2.1 or any later version (LGPLv2.1+)\n\n#### Requirements\n\n- python >= 3.6\n- gnutls >= 3.5\n- cffi >= 1.0.0\n\n#### Supported platforms\n\n- Linux\n\n\n#### Bugs\n\nBugs shall be reported [in the gitlab project](https://gitlab.inria.fr/abaire/aio_gnutls_transport/issues). Please mark security-critical issues as _confidential_.\n\n\nGetting started\n---------------\n\nIn most cases, using `aio_gnutls_transport` is as simple as:\n```py\nfrom aio_gnutls_transport import ssl, GnutlsEventLoopPolicy\n\nasyncio.set_event_loop_policy(GnutlsEventLoopPolicy())\n```\n\n`aio_gnutls_transport.ssl` is the compatibility module to be used in place of\nthe native `ssl` module. It provides its own `SSLContext` implementation\nfor GnuTLS.\n\n\n`GnutlsEventLoopPolicy` is an asyncio [event loop\npolicy](https://docs.python.org/3/library/asyncio-policy.html) that installs a\nwrapper around the default event loop implementation to support the `SSLContext`\nobjects created by the `aio_gnutls_transport.ssl` module.\n\nConfiguring TLS parameters\n--------------------------\n\nThe security properties of `GnutlsContext` are configured using [GnuTLS\npriority strings](https://gnutls.org/manual/html_node/Priority-Strings.html).\n\n`aio_gnutls_transport.DEFAULT_PRIORITY` holds the default priority string set by\n`ssl.create_default_context()` (its current value is\n`SECURE:-RSA:%PROFILE_MEDIUM:%SERVER_PRECEDENCE` and it will be kept to a sane\ndefault).\n\nThe priority string is configurable on a per-context basis by calling\n`GnuTLSContext.gnutls_set_priority()`. For example, to disable TLS versions\nolder than 1.3:\n\n```py\nctx = ssl.create_default_context()\nctx.gnutls_set_priority(aio_gnutls_transport.DEFAULT_PRIORITY + \":-VERS-ALL:+VERS-TLS1.3\")\n```\n\nFor any details about assembling a priority string, please refer to the [GnuTLS\nManual](https://gnutls.org/manual/html_node/Priority-Strings.html).\n\n\n\nContents of this package\n------------------------\n\nThis packages provides:\n\n| item                                           |  description               | native equivalent |\n| ---------------------------------------------  |  ------------------------- | ----------------- |\n| `aio_gnutls_transport.GnutlsContext          ` | GnuTLS context | `ssl.SSLContext` |\n| `aio_gnutls_transport.GnutlsError            ` | GnuTLS error class | `ssl.SSLError` |\n| `aio_gnutls_transport.GnutlsEventLoopPolicy  ` | an asyncio event loop policy using `GnutlsEventLoop` instead of the default event loop   | `asyncio.DefaultEventLoopPolicy` |\n| `aio_gnutls_transport.GnutlsEventLoop        ` | an event loop which supports GnuTLS contexts | `asyncio.SelectorEventLoop` |\n| `aio_gnutls_transport.GnutlsObject           ` | TLS connection state object | `ssl.SSLObject` |\n| `aio_gnutls_transport.GnutlsHandshakeProtocol` | asyncio protocol implementing the TLS handshake | |\n| `aio_gnutls_transport.GnutlsTransport        ` | asyncio transport over GnuTLS | `asyncio.sslproto._SSLProtocolTransport` |\n| `aio_gnutls_transport.ssl`                     | the `ssl` compatibility module  | `ssl` |\n\n\n\nCaveats\n-------\n\nThe `aio_gnutls_transport.ssl` compatibility module provides only a subset of\nthe native `ssl` stdlib module.\n\nAchieving 100% compatibility is a non-goal (it would not be realistic since the\nnative module is tightly coupled with OpenSSL).\n\nInstead we take a minimalist and conservative approach:\n`aio_gnutls_transport` only supports the most common features and any attempt\nto use an unsupported attribute/method raises `NotImplementedError`.\n\n\nThe ssl module currently provides the following definitions: \n```py\nssl.SSLContext\nssl.create_default_context()\n\nssl.CERT_NONE\nssl.CERT_OPTIONAL\nssl.CERT_REQUIRED\nssl.Purpose\nssl.VerifyMode\nssl.DER_cert_to_PEM_cert\nssl.PEM_cert_to_DER_cert\n```\nand SSLContext supports the following attributes/methods:\n```py\nSSLContext.check_hostname\nSSLContext.load_cert_chain()\nSSLContext.load_verify_locations()\nSSLContext.load_default_certs()\nSSLContext.verify_mode\n```\n\nAlso, be aware that:\n\n* Errors are reported as `aio_gnutls_transport.GnutlsError` is not compatible\n  with the native `ssl.SSLError` class (through they both derive from `OSError`).\n\n* `aio_gnutls_transport.ssl.SSLContext` derives from `ssl.SSLContext`, but they\n  do not share their implementation. This is necessary to enable\n  interoperability with 3rd-party libraries (eg: aiohttp) that enforce strict\n  type checking.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.inria.fr/abaire/aio_gnutls_transport/", "keywords": "asyncio,TLS,transport,GnuTLS", "license": "LGPL2.1+", "maintainer": "", "maintainer_email": "", "name": "aio-gnutls-transport", "package_url": "https://pypi.org/project/aio-gnutls-transport/", "platform": "linux", "project_url": "https://pypi.org/project/aio-gnutls-transport/", "project_urls": {"Homepage": "https://gitlab.inria.fr/abaire/aio_gnutls_transport/"}, "release_url": "https://pypi.org/project/aio-gnutls-transport/0.3.0/", "requires_dist": null, "requires_python": "", "summary": "asyncio transport over GnuTLS", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>aio_gnutls_transport - asyncio transport over GnuTLS</h1>\n<p><code>aio_gnutls_transport</code> provides a python3 <a href=\"https://docs.python.org/3/library/asyncio-protocol.html\" rel=\"nofollow\">asyncio\ntransport</a> over\n<a href=\"https://gnutls.org/\" rel=\"nofollow\">GnuTLS</a>. It aims to be a <strong>drop-in replacement</strong> for the\nnative SSL transport in the stdlib (and which is based on OpenSSL).</p>\n<p>It also supports <strong>half-closed TLS connections</strong>, in other words you can\n<a href=\"https://docs.python.org/3/library/asyncio-protocol.html?highlight=write_eof#asyncio.WriteTransport.write_eof\" rel=\"nofollow\">.write_eof()</a>\non TLS streams (which is not possible with the native implementation).</p>\n<h4>Licence</h4>\n<p>GNU Lesser General Public License version 2.1 or any later version (LGPLv2.1+)</p>\n<h4>Requirements</h4>\n<ul>\n<li>python &gt;= 3.6</li>\n<li>gnutls &gt;= 3.5</li>\n<li>cffi &gt;= 1.0.0</li>\n</ul>\n<h4>Supported platforms</h4>\n<ul>\n<li>Linux</li>\n</ul>\n<h4>Bugs</h4>\n<p>Bugs shall be reported <a href=\"https://gitlab.inria.fr/abaire/aio_gnutls_transport/issues\" rel=\"nofollow\">in the gitlab project</a>. Please mark security-critical issues as <em>confidential</em>.</p>\n<h2>Getting started</h2>\n<p>In most cases, using <code>aio_gnutls_transport</code> is as simple as:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">aio_gnutls_transport</span> <span class=\"kn\">import</span> <span class=\"n\">ssl</span><span class=\"p\">,</span> <span class=\"n\">GnutlsEventLoopPolicy</span>\n\n<span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">set_event_loop_policy</span><span class=\"p\">(</span><span class=\"n\">GnutlsEventLoopPolicy</span><span class=\"p\">())</span>\n</pre>\n<p><code>aio_gnutls_transport.ssl</code> is the compatibility module to be used in place of\nthe native <code>ssl</code> module. It provides its own <code>SSLContext</code> implementation\nfor GnuTLS.</p>\n<p><code>GnutlsEventLoopPolicy</code> is an asyncio <a href=\"https://docs.python.org/3/library/asyncio-policy.html\" rel=\"nofollow\">event loop\npolicy</a> that installs a\nwrapper around the default event loop implementation to support the <code>SSLContext</code>\nobjects created by the <code>aio_gnutls_transport.ssl</code> module.</p>\n<h2>Configuring TLS parameters</h2>\n<p>The security properties of <code>GnutlsContext</code> are configured using <a href=\"https://gnutls.org/manual/html_node/Priority-Strings.html\" rel=\"nofollow\">GnuTLS\npriority strings</a>.</p>\n<p><code>aio_gnutls_transport.DEFAULT_PRIORITY</code> holds the default priority string set by\n<code>ssl.create_default_context()</code> (its current value is\n<code>SECURE:-RSA:%PROFILE_MEDIUM:%SERVER_PRECEDENCE</code> and it will be kept to a sane\ndefault).</p>\n<p>The priority string is configurable on a per-context basis by calling\n<code>GnuTLSContext.gnutls_set_priority()</code>. For example, to disable TLS versions\nolder than 1.3:</p>\n<pre><span class=\"n\">ctx</span> <span class=\"o\">=</span> <span class=\"n\">ssl</span><span class=\"o\">.</span><span class=\"n\">create_default_context</span><span class=\"p\">()</span>\n<span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">gnutls_set_priority</span><span class=\"p\">(</span><span class=\"n\">aio_gnutls_transport</span><span class=\"o\">.</span><span class=\"n\">DEFAULT_PRIORITY</span> <span class=\"o\">+</span> <span class=\"s2\">\":-VERS-ALL:+VERS-TLS1.3\"</span><span class=\"p\">)</span>\n</pre>\n<p>For any details about assembling a priority string, please refer to the <a href=\"https://gnutls.org/manual/html_node/Priority-Strings.html\" rel=\"nofollow\">GnuTLS\nManual</a>.</p>\n<h2>Contents of this package</h2>\n<p>This packages provides:</p>\n<table>\n<thead>\n<tr>\n<th>item</th>\n<th>description</th>\n<th>native equivalent</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>aio_gnutls_transport.GnutlsContext</code></td>\n<td>GnuTLS context</td>\n<td><code>ssl.SSLContext</code></td>\n</tr>\n<tr>\n<td><code>aio_gnutls_transport.GnutlsError</code></td>\n<td>GnuTLS error class</td>\n<td><code>ssl.SSLError</code></td>\n</tr>\n<tr>\n<td><code>aio_gnutls_transport.GnutlsEventLoopPolicy</code></td>\n<td>an asyncio event loop policy using <code>GnutlsEventLoop</code> instead of the default event loop</td>\n<td><code>asyncio.DefaultEventLoopPolicy</code></td>\n</tr>\n<tr>\n<td><code>aio_gnutls_transport.GnutlsEventLoop</code></td>\n<td>an event loop which supports GnuTLS contexts</td>\n<td><code>asyncio.SelectorEventLoop</code></td>\n</tr>\n<tr>\n<td><code>aio_gnutls_transport.GnutlsObject</code></td>\n<td>TLS connection state object</td>\n<td><code>ssl.SSLObject</code></td>\n</tr>\n<tr>\n<td><code>aio_gnutls_transport.GnutlsHandshakeProtocol</code></td>\n<td>asyncio protocol implementing the TLS handshake</td>\n<td></td>\n</tr>\n<tr>\n<td><code>aio_gnutls_transport.GnutlsTransport</code></td>\n<td>asyncio transport over GnuTLS</td>\n<td><code>asyncio.sslproto._SSLProtocolTransport</code></td>\n</tr>\n<tr>\n<td><code>aio_gnutls_transport.ssl</code></td>\n<td>the <code>ssl</code> compatibility module</td>\n<td><code>ssl</code></td>\n</tr></tbody></table>\n<h2>Caveats</h2>\n<p>The <code>aio_gnutls_transport.ssl</code> compatibility module provides only a subset of\nthe native <code>ssl</code> stdlib module.</p>\n<p>Achieving 100% compatibility is a non-goal (it would not be realistic since the\nnative module is tightly coupled with OpenSSL).</p>\n<p>Instead we take a minimalist and conservative approach:\n<code>aio_gnutls_transport</code> only supports the most common features and any attempt\nto use an unsupported attribute/method raises <code>NotImplementedError</code>.</p>\n<p>The ssl module currently provides the following definitions:</p>\n<pre><span class=\"n\">ssl</span><span class=\"o\">.</span><span class=\"n\">SSLContext</span>\n<span class=\"n\">ssl</span><span class=\"o\">.</span><span class=\"n\">create_default_context</span><span class=\"p\">()</span>\n\n<span class=\"n\">ssl</span><span class=\"o\">.</span><span class=\"n\">CERT_NONE</span>\n<span class=\"n\">ssl</span><span class=\"o\">.</span><span class=\"n\">CERT_OPTIONAL</span>\n<span class=\"n\">ssl</span><span class=\"o\">.</span><span class=\"n\">CERT_REQUIRED</span>\n<span class=\"n\">ssl</span><span class=\"o\">.</span><span class=\"n\">Purpose</span>\n<span class=\"n\">ssl</span><span class=\"o\">.</span><span class=\"n\">VerifyMode</span>\n<span class=\"n\">ssl</span><span class=\"o\">.</span><span class=\"n\">DER_cert_to_PEM_cert</span>\n<span class=\"n\">ssl</span><span class=\"o\">.</span><span class=\"n\">PEM_cert_to_DER_cert</span>\n</pre>\n<p>and SSLContext supports the following attributes/methods:</p>\n<pre><span class=\"n\">SSLContext</span><span class=\"o\">.</span><span class=\"n\">check_hostname</span>\n<span class=\"n\">SSLContext</span><span class=\"o\">.</span><span class=\"n\">load_cert_chain</span><span class=\"p\">()</span>\n<span class=\"n\">SSLContext</span><span class=\"o\">.</span><span class=\"n\">load_verify_locations</span><span class=\"p\">()</span>\n<span class=\"n\">SSLContext</span><span class=\"o\">.</span><span class=\"n\">load_default_certs</span><span class=\"p\">()</span>\n<span class=\"n\">SSLContext</span><span class=\"o\">.</span><span class=\"n\">verify_mode</span>\n</pre>\n<p>Also, be aware that:</p>\n<ul>\n<li>\n<p>Errors are reported as <code>aio_gnutls_transport.GnutlsError</code> is not compatible\nwith the native <code>ssl.SSLError</code> class (through they both derive from <code>OSError</code>).</p>\n</li>\n<li>\n<p><code>aio_gnutls_transport.ssl.SSLContext</code> derives from <code>ssl.SSLContext</code>, but they\ndo not share their implementation. This is necessary to enable\ninteroperability with 3rd-party libraries (eg: aiohttp) that enforce strict\ntype checking.</p>\n</li>\n</ul>\n\n          </div>"}, "last_serial": 6202835, "releases": {"0.2.1": [{"comment_text": "", "digests": {"md5": "adda2c58b0fc5a35805689b485774417", "sha256": "701f0c57c29140499f6c75d83af098c0e468b2ac306d3314d5245d8a5dfe18f8"}, "downloads": -1, "filename": "aio_gnutls_transport-0.2.1.tar.gz", "has_sig": false, "md5_digest": "adda2c58b0fc5a35805689b485774417", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25646, "upload_time": "2019-11-07T16:48:39", "upload_time_iso_8601": "2019-11-07T16:48:39.710144Z", "url": "https://files.pythonhosted.org/packages/2a/41/7618c489e76ce3e25692744acbb31de1800b13c6688f91bd1d4dad18df53/aio_gnutls_transport-0.2.1.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "4d25934bdc9122c3d7a0a2317834b7e1", "sha256": "14f99b1fde83eeec0e0698cdc6ed4f9fcb31fb7860882d1e6ea5362b0954edf9"}, "downloads": -1, "filename": "aio_gnutls_transport-0.3.0.tar.gz", "has_sig": false, "md5_digest": "4d25934bdc9122c3d7a0a2317834b7e1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25019, "upload_time": "2019-11-26T17:42:05", "upload_time_iso_8601": "2019-11-26T17:42:05.900222Z", "url": "https://files.pythonhosted.org/packages/41/9b/b71bfa24aea6ec29ac87f491711802faf8e407481318923d87cc50ec9ad0/aio_gnutls_transport-0.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4d25934bdc9122c3d7a0a2317834b7e1", "sha256": "14f99b1fde83eeec0e0698cdc6ed4f9fcb31fb7860882d1e6ea5362b0954edf9"}, "downloads": -1, "filename": "aio_gnutls_transport-0.3.0.tar.gz", "has_sig": false, "md5_digest": "4d25934bdc9122c3d7a0a2317834b7e1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25019, "upload_time": "2019-11-26T17:42:05", "upload_time_iso_8601": "2019-11-26T17:42:05.900222Z", "url": "https://files.pythonhosted.org/packages/41/9b/b71bfa24aea6ec29ac87f491711802faf8e407481318923d87cc50ec9ad0/aio_gnutls_transport-0.3.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:21:32 2020"}