{"info": {"author": "Elijah Shaw-Rutschman", "author_email": "elijahr+aiolo@gmail.com", "bugtrack_url": null, "classifiers": ["Framework :: AsyncIO", "License :: OSI Approved :: BSD License", "Operating System :: MacOS :: MacOS X", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Multimedia :: Sound/Audio"], "description": "# aiolo\nasyncio-friendly Python bindings for [liblo](http://liblo.sourceforge.net/), an implementation of the Open Sound Control (OSC) protocol for POSIX systems.\n\n![build_status](https://travis-ci.org/elijahr/aiolo.svg?branch=master)\n\n## Installation\n\nInstall liblo:\n\nOS X: `brew install liblo`\n\nUbuntu: `apt-get install liblo7 liblo-dev`\n\nThen:\n\n```shell\npip install aiolo\n```\n\n## Examples\n\nOne of the many beautiful things in Python is support for operator overloading. aiolo embraces this enthusiastically to offer the would-be OSC hacker an intuitive programming experience for objects such as `Message`, `Bundle`, `Route`, and `Sub`.\n\n### [Simple echo server](https://github.com/elijahr/aiolo/blob/master/examples/echo_server.py)\n\n```python\nimport asyncio\n\nfrom aiolo import Address, Midi, Server\n\n\nasync def main():\n\n    server = Server(port=12001)\n    server.start()\n\n    # Create endpoints\n\n    # /foo accepts an int, a float, and a MIDI packet\n    foo = server.route('/foo', [int, float, Midi])\n    ex = server.route('/exit')\n\n    address = Address(port=12001)\n\n    for i in range(5):\n        address.send(foo, i, float(i), Midi(i, i, i, i))\n\n    # Notify subscriptions to exit in 1 sec\n    address.delay(1, ex)\n\n    # Subscribe to messages for any of the routes\n    subs = foo.sub() | ex.sub()\n\n    async for route, data in subs:\n        print(f'echo_server: {str(route.path)} received {data}')\n        if route == ex:\n            await subs.unsub()\n\n    server.stop()\n\n\nif __name__ == '__main__':\n    asyncio.get_event_loop().run_until_complete(main())\n```\n\n\n### [MultiCast](https://github.com/elijahr/aiolo/blob/master/examples/multicast.py)\n\n```python\nimport asyncio\nimport random\n\nfrom aiolo import MultiCast, MultiCastAddress, Route, Server\n\n\nasync def main():\n    # Create endpoints for receiving data\n    foo = Route('/foo', str)\n    ex = Route('/exit')\n\n    # Create a multicast group\n    multicast = MultiCast('224.0.1.1', port=15432)\n\n    # Create a cluster of servers in the same multicast group\n    cluster = []\n    for i in range(10):\n        server = Server(multicast=multicast)\n        # Have them all handle the same route\n        server.route(foo)\n        server.route(ex)\n        server.start()\n        cluster.append(server)\n\n    address = MultiCastAddress(server=random.choice(cluster))\n\n    # Send a single message from any one server to the entire cluster.\n    # The message will be received by each server.\n    address.send(foo, 'hello cluster')\n\n    # Notify subscriptions to exit in 1 sec\n    address.delay(1, ex)\n\n    # Listen for incoming strings at /foo on any server in the cluster\n    subs = foo.sub() | ex.sub()\n    async for route, data in subs:\n        print(f'{route} got data: {data}')\n        if route == ex:\n            await subs.unsub()\n\n    for server in cluster:\n        server.stop()\n\n\nif __name__ == '__main__':\n    asyncio.get_event_loop().run_until_complete(main())\n\n```\n\nFor additional usage see the [examples](https://github.com/elijahr/aiolo/blob/master/examples) and [tests](https://github.com/elijahr/aiolo/blob/master/test.py).\n\n## Supported platforms\n\nTravis CI tests with the following configurations:\n* Ubuntu 18.04 Bionic Beaver + liblo 0.29 + [CPython3.6, CPython3.7, CPython3.8, PyPy7.3.0 (3.6.9)]\n* OS X + liblo 0.29 + [CPython3.6, CPython3.7, CPython3.8, PyPy7.3.0 (3.6.9)]\n\n## Contributing\n\nPull requests are welcome, please file any issues you encounter.\n\n## Changelog\n\n### 4.1.0\n\n* Rectify some `__hash__` issues.\n\n### 4.0.0\n\n* Use Python-based OSC address pattern matching rather than liblo's, supports escaped special characters\n* Ensure ThreadedServer.start() waits for thread to be initialized\n* Fix bug where subscribers might not receive pending data\n* Fix bug where loop.remove_reader() was not being called on AioServer.stop()", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/elijahr/aiolo", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "aiolo", "package_url": "https://pypi.org/project/aiolo/", "platform": "", "project_url": "https://pypi.org/project/aiolo/", "project_urls": {"Homepage": "https://github.com/elijahr/aiolo"}, "release_url": "https://pypi.org/project/aiolo/4.1.0/", "requires_dist": null, "requires_python": "", "summary": "asyncio-friendly Python bindings for liblo", "version": "4.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>aiolo</h1>\n<p>asyncio-friendly Python bindings for <a href=\"http://liblo.sourceforge.net/\" rel=\"nofollow\">liblo</a>, an implementation of the Open Sound Control (OSC) protocol for POSIX systems.</p>\n<p><img alt=\"build_status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3816d570ade69f09a684cd8a39997f6054c5efc3/68747470733a2f2f7472617669732d63692e6f72672f656c696a6168722f61696f6c6f2e7376673f6272616e63683d6d6173746572\"></p>\n<h2>Installation</h2>\n<p>Install liblo:</p>\n<p>OS X: <code>brew install liblo</code></p>\n<p>Ubuntu: <code>apt-get install liblo7 liblo-dev</code></p>\n<p>Then:</p>\n<pre>pip install aiolo\n</pre>\n<h2>Examples</h2>\n<p>One of the many beautiful things in Python is support for operator overloading. aiolo embraces this enthusiastically to offer the would-be OSC hacker an intuitive programming experience for objects such as <code>Message</code>, <code>Bundle</code>, <code>Route</code>, and <code>Sub</code>.</p>\n<h3><a href=\"https://github.com/elijahr/aiolo/blob/master/examples/echo_server.py\" rel=\"nofollow\">Simple echo server</a></h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">aiolo</span> <span class=\"kn\">import</span> <span class=\"n\">Address</span><span class=\"p\">,</span> <span class=\"n\">Midi</span><span class=\"p\">,</span> <span class=\"n\">Server</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n\n    <span class=\"n\">server</span> <span class=\"o\">=</span> <span class=\"n\">Server</span><span class=\"p\">(</span><span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">12001</span><span class=\"p\">)</span>\n    <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># Create endpoints</span>\n\n    <span class=\"c1\"># /foo accepts an int, a float, and a MIDI packet</span>\n    <span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s1\">'/foo'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">Midi</span><span class=\"p\">])</span>\n    <span class=\"n\">ex</span> <span class=\"o\">=</span> <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s1\">'/exit'</span><span class=\"p\">)</span>\n\n    <span class=\"n\">address</span> <span class=\"o\">=</span> <span class=\"n\">Address</span><span class=\"p\">(</span><span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">12001</span><span class=\"p\">)</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">):</span>\n        <span class=\"n\">address</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">),</span> <span class=\"n\">Midi</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># Notify subscriptions to exit in 1 sec</span>\n    <span class=\"n\">address</span><span class=\"o\">.</span><span class=\"n\">delay</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ex</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Subscribe to messages for any of the routes</span>\n    <span class=\"n\">subs</span> <span class=\"o\">=</span> <span class=\"n\">foo</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">()</span> <span class=\"o\">|</span> <span class=\"n\">ex</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">()</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">for</span> <span class=\"n\">route</span><span class=\"p\">,</span> <span class=\"n\">data</span> <span class=\"ow\">in</span> <span class=\"n\">subs</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'echo_server: </span><span class=\"si\">{</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">route</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s1\"> received </span><span class=\"si\">{</span><span class=\"n\">data</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">route</span> <span class=\"o\">==</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n            <span class=\"k\">await</span> <span class=\"n\">subs</span><span class=\"o\">.</span><span class=\"n\">unsub</span><span class=\"p\">()</span>\n\n    <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">())</span>\n</pre>\n<h3><a href=\"https://github.com/elijahr/aiolo/blob/master/examples/multicast.py\" rel=\"nofollow\">MultiCast</a></h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"nn\">random</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">aiolo</span> <span class=\"kn\">import</span> <span class=\"n\">MultiCast</span><span class=\"p\">,</span> <span class=\"n\">MultiCastAddress</span><span class=\"p\">,</span> <span class=\"n\">Route</span><span class=\"p\">,</span> <span class=\"n\">Server</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"c1\"># Create endpoints for receiving data</span>\n    <span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"n\">Route</span><span class=\"p\">(</span><span class=\"s1\">'/foo'</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">)</span>\n    <span class=\"n\">ex</span> <span class=\"o\">=</span> <span class=\"n\">Route</span><span class=\"p\">(</span><span class=\"s1\">'/exit'</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Create a multicast group</span>\n    <span class=\"n\">multicast</span> <span class=\"o\">=</span> <span class=\"n\">MultiCast</span><span class=\"p\">(</span><span class=\"s1\">'224.0.1.1'</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">15432</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Create a cluster of servers in the same multicast group</span>\n    <span class=\"n\">cluster</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">):</span>\n        <span class=\"n\">server</span> <span class=\"o\">=</span> <span class=\"n\">Server</span><span class=\"p\">(</span><span class=\"n\">multicast</span><span class=\"o\">=</span><span class=\"n\">multicast</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Have them all handle the same route</span>\n        <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">)</span>\n        <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">)</span>\n        <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n        <span class=\"n\">cluster</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">server</span><span class=\"p\">)</span>\n\n    <span class=\"n\">address</span> <span class=\"o\">=</span> <span class=\"n\">MultiCastAddress</span><span class=\"p\">(</span><span class=\"n\">server</span><span class=\"o\">=</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">choice</span><span class=\"p\">(</span><span class=\"n\">cluster</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># Send a single message from any one server to the entire cluster.</span>\n    <span class=\"c1\"># The message will be received by each server.</span>\n    <span class=\"n\">address</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">,</span> <span class=\"s1\">'hello cluster'</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Notify subscriptions to exit in 1 sec</span>\n    <span class=\"n\">address</span><span class=\"o\">.</span><span class=\"n\">delay</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ex</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Listen for incoming strings at /foo on any server in the cluster</span>\n    <span class=\"n\">subs</span> <span class=\"o\">=</span> <span class=\"n\">foo</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">()</span> <span class=\"o\">|</span> <span class=\"n\">ex</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">()</span>\n    <span class=\"k\">async</span> <span class=\"k\">for</span> <span class=\"n\">route</span><span class=\"p\">,</span> <span class=\"n\">data</span> <span class=\"ow\">in</span> <span class=\"n\">subs</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'</span><span class=\"si\">{</span><span class=\"n\">route</span><span class=\"si\">}</span><span class=\"s1\"> got data: </span><span class=\"si\">{</span><span class=\"n\">data</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">route</span> <span class=\"o\">==</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n            <span class=\"k\">await</span> <span class=\"n\">subs</span><span class=\"o\">.</span><span class=\"n\">unsub</span><span class=\"p\">()</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">server</span> <span class=\"ow\">in</span> <span class=\"n\">cluster</span><span class=\"p\">:</span>\n        <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">())</span>\n</pre>\n<p>For additional usage see the <a href=\"https://github.com/elijahr/aiolo/blob/master/examples\" rel=\"nofollow\">examples</a> and <a href=\"https://github.com/elijahr/aiolo/blob/master/test.py\" rel=\"nofollow\">tests</a>.</p>\n<h2>Supported platforms</h2>\n<p>Travis CI tests with the following configurations:</p>\n<ul>\n<li>Ubuntu 18.04 Bionic Beaver + liblo 0.29 + [CPython3.6, CPython3.7, CPython3.8, PyPy7.3.0 (3.6.9)]</li>\n<li>OS X + liblo 0.29 + [CPython3.6, CPython3.7, CPython3.8, PyPy7.3.0 (3.6.9)]</li>\n</ul>\n<h2>Contributing</h2>\n<p>Pull requests are welcome, please file any issues you encounter.</p>\n<h2>Changelog</h2>\n<h3>4.1.0</h3>\n<ul>\n<li>Rectify some <code>__hash__</code> issues.</li>\n</ul>\n<h3>4.0.0</h3>\n<ul>\n<li>Use Python-based OSC address pattern matching rather than liblo's, supports escaped special characters</li>\n<li>Ensure ThreadedServer.start() waits for thread to be initialized</li>\n<li>Fix bug where subscribers might not receive pending data</li>\n<li>Fix bug where loop.remove_reader() was not being called on AioServer.stop()</li>\n</ul>\n\n          </div>"}, "last_serial": 6745001, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "9ce627af22c8627944d2793c4eded56d", "sha256": "0b8e4476bc25dfe5e823c8cd8ce4cb8c99025541f456d468ca487ea9be8f88fd"}, "downloads": -1, "filename": "aiolo-1.0.0.tar.gz", "has_sig": false, "md5_digest": "9ce627af22c8627944d2793c4eded56d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8763, "upload_time": "2020-01-07T05:09:35", "upload_time_iso_8601": "2020-01-07T05:09:35.885658Z", "url": "https://files.pythonhosted.org/packages/65/1b/66269f2f59cc8e783ec5f49057a36b47b431534b3e67fc6eaa5c8494bb24/aiolo-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "71cf29b3e666ec4283721cc7a0e6b007", "sha256": "cd5db9899f1e9a9c7d0808360ee583d350fa10b4429efe0a714e61662501933e"}, "downloads": -1, "filename": "aiolo-1.0.1.tar.gz", "has_sig": false, "md5_digest": "71cf29b3e666ec4283721cc7a0e6b007", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8579, "upload_time": "2020-01-07T05:24:41", "upload_time_iso_8601": "2020-01-07T05:24:41.485868Z", "url": "https://files.pythonhosted.org/packages/bb/73/b349ec569e42e461880502782825a36e39116a686c59f0f771c6f2fe9c0b/aiolo-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "affa2b292ce734ad377a141b21bd796d", "sha256": "63621eaf4b1d6cd5fb51a20793e8b8ca1408b9503a5e174760efc6e30600af9f"}, "downloads": -1, "filename": "aiolo-1.0.2.tar.gz", "has_sig": false, "md5_digest": "affa2b292ce734ad377a141b21bd796d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8952, "upload_time": "2020-01-07T05:31:35", "upload_time_iso_8601": "2020-01-07T05:31:35.921252Z", "url": "https://files.pythonhosted.org/packages/ef/bf/123401ed945b072bd603943d20a9ad1db178316e15c5eefa32ca7e2ad333/aiolo-1.0.2.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "24130c7520b6fd17d30cedcc1ba58ada", "sha256": "c41c05cc668be7d51ee1894686153fb43fded8037c474b6db76f393d108c5ad2"}, "downloads": -1, "filename": "aiolo-2.0.0.tar.gz", "has_sig": false, "md5_digest": "24130c7520b6fd17d30cedcc1ba58ada", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10540, "upload_time": "2020-01-11T20:14:46", "upload_time_iso_8601": "2020-01-11T20:14:46.609835Z", "url": "https://files.pythonhosted.org/packages/ef/be/1b709041fdf71c22de1dd5cc4a42f8c583968a776f764366425da56055b3/aiolo-2.0.0.tar.gz", "yanked": false}], "3.0.0": [{"comment_text": "", "digests": {"md5": "09e139072457b1ce6ebcbb5eb8f69dcd", "sha256": "0c050e3c6e96c751003f3696941cacab7109e69b8c206a7215bfabad9516e10f"}, "downloads": -1, "filename": "aiolo-3.0.0.tar.gz", "has_sig": false, "md5_digest": "09e139072457b1ce6ebcbb5eb8f69dcd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 602787, "upload_time": "2020-01-21T09:07:16", "upload_time_iso_8601": "2020-01-21T09:07:16.591106Z", "url": "https://files.pythonhosted.org/packages/da/f4/279643eb6628bf2ac373b1ebc740e37283efbc16a9193603fa3ba6ccef4f/aiolo-3.0.0.tar.gz", "yanked": false}], "3.1.0": [{"comment_text": "", "digests": {"md5": "fe41f7a7a5e26c2e6baf4f4893904b5d", "sha256": "6e2574efb87eca161deaf45c7a38aabe987c2b0dd5dd0bfa1c0c515a3bc2c54e"}, "downloads": -1, "filename": "aiolo-3.1.0.tar.gz", "has_sig": false, "md5_digest": "fe41f7a7a5e26c2e6baf4f4893904b5d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 623684, "upload_time": "2020-01-22T04:14:27", "upload_time_iso_8601": "2020-01-22T04:14:27.228363Z", "url": "https://files.pythonhosted.org/packages/dc/bc/688e53a4109147c4153921f84384ce946b30fc90a8962ef448c59c15ad6c/aiolo-3.1.0.tar.gz", "yanked": false}], "4.0.0": [{"comment_text": "", "digests": {"md5": "020358ac7dfbbaf06a27743ee9a189af", "sha256": "29a845a41b08a867ecf14372ec978ed445b78c1e0f8d691cdd7444daef3bc294"}, "downloads": -1, "filename": "aiolo-4.0.0.tar.gz", "has_sig": false, "md5_digest": "020358ac7dfbbaf06a27743ee9a189af", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 707425, "upload_time": "2020-02-05T05:59:02", "upload_time_iso_8601": "2020-02-05T05:59:02.446540Z", "url": "https://files.pythonhosted.org/packages/a9/d3/77c77ab0f6ae5814f2d47241d3f2fe521543b1d019adf0e1eef8953ec17c/aiolo-4.0.0.tar.gz", "yanked": false}], "4.1.0": [{"comment_text": "", "digests": {"md5": "dba16ac080abc4baa4a6ba38298a00b0", "sha256": "9f2fdf120ab4f4f43992f3d71140198c19264892ddc7cc43ad859fea512642e1"}, "downloads": -1, "filename": "aiolo-4.1.0.tar.gz", "has_sig": false, "md5_digest": "dba16ac080abc4baa4a6ba38298a00b0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 704728, "upload_time": "2020-03-04T02:43:13", "upload_time_iso_8601": "2020-03-04T02:43:13.985179Z", "url": "https://files.pythonhosted.org/packages/60/84/40c2a20893f47f4d275a5ad6353d7f0c13952489c36099f778519a418e14/aiolo-4.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "dba16ac080abc4baa4a6ba38298a00b0", "sha256": "9f2fdf120ab4f4f43992f3d71140198c19264892ddc7cc43ad859fea512642e1"}, "downloads": -1, "filename": "aiolo-4.1.0.tar.gz", "has_sig": false, "md5_digest": "dba16ac080abc4baa4a6ba38298a00b0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 704728, "upload_time": "2020-03-04T02:43:13", "upload_time_iso_8601": "2020-03-04T02:43:13.985179Z", "url": "https://files.pythonhosted.org/packages/60/84/40c2a20893f47f4d275a5ad6353d7f0c13952489c36099f778519a418e14/aiolo-4.1.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:21:07 2020"}