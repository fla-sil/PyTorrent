{"info": {"author": "Alessio Bogon", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: POSIX", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "# File System Backends for Dogpile Cache\n\n![PyPI](https://img.shields.io/pypi/v/dogpile_filesystem.svg?style=flat)\n[![Build Status](https://travis-ci.org/paylogic/dogpile_filesystem.svg?branch=master)](https://travis-ci.org/paylogic/dogpile_filesystem)\n[![Coverage Status](https://coveralls.io/repos/github/paylogic/dogpile_filesystem/badge.svg?branch=master)](https://coveralls.io/github/paylogic/dogpile_filesystem?branch=master)\n![](https://img.shields.io/pypi/pyversions/dogpile_filesystem.svg?style=flat)\n\n\n\nFilesystem-based backends for dogpile cache.\n\nThe generic variant of the backend, `paylogic.filesystem`, will accept any picklable value and it will store it in the file system.\n\nThe raw variant `paylogic.raw_filesystem` will only work with file-like values and it will avoid the pickling phase. This is useful when you are generating a big file and you don't want to keep in memory the contents of this file.\n \nBoth variants use [fcntl.lockf](https://docs.python.org/3.7/library/fcntl.html#fcntl.lockf) operations, therefore it is compatible with  UNIX-like systems only.\nThe lockf system call allows to allocate an arbitrary number of locks using the same file, avoiding problems that arise when deleting lock files.\n\n\n## Installation\nInstall with pip:\n\n`$ pip install dogpile_filesystem`\n\n## Usage\n### Generic variant\nConfigure a region to use `paylogic.filesystem`:\n```python\nfrom dogpile.cache import make_region\nimport datetime\n\nregion = make_region().configure(\n    'paylogic.filesystem',\n    arguments = {\n        \"base_dir\": \"/path/to/cachedir\",  # Make sure this directory is only for this region\n        # Optional parameters\n        \"cache_size\": 1024**3,  # Defaults to 1 Gb\n        \"expiration_time\": datetime.timedelta(seconds=30),  # Defaults to no expiration\n        \"distributed_lock\": True,  # Defaults to true\n    }\n)\n\n@region.cache_on_arguments()\ndef my_function(args):\n    return 42\n```\n\n### Raw variant\nConfigure a region to use dogpile_filesystem:\n```python\nfrom dogpile.cache import make_region\nimport datetime\nimport tempfile\n\nregion = make_region().configure(\n    'paylogic.raw_filesystem',\n    arguments = {\n        \"base_dir\": \"/path/to/cachedir\",  # Make sure this directory is only for this region\n        # Optional parameters\n        \"cache_size\": 1024**3,  # Defaults to 1 Gb\n        \"file_movable\": True,  # Whether the backend can freely move the file.\n                               # When True, the backend will move the file to the cache\n                               # directory directly using os.rename(file.name).\n                               # When False (default), the content of the file will be copied to \n                               # the cache directory.\n        \"expiration_time\": datetime.timedelta(seconds=30),  # Defaults to no expiration\n        \"distributed_lock\": True,  # Defaults to true\n    }\n)\n\n@region.cache_on_arguments()\ndef big_file_operation(args):\n    # When using `file_movable=True`, we must make sure that NamedTemporaryFile does not delete the file on close,\n    # otherwise it will complain that it cannot find the file.\n    f = tempfile.NamedTemporaryFile(delete=False)\n    # fill the file\n    f.flush()\n    f.seek(0)\n    return f\n```\n\n## Development\nInstall the dev requirements and the project in development mode:\n\n`$ pip install -r requirements_dev.txt -e .`\n\nRun tests:\n\n`$ pytest tests`\n\nOptionally run tests for all supported configurations:\n\n`$ tox`\n\n\n# Changelog\nAll notable changes to this project will be documented in this file.\n\nThis project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## Unreleased\n\n## 0.2.0\n- Removed logic that falls back to copying a file when `file_movable=True` but the file does not appear to be movable. Do not try to be smart.\n\n## 0.1.1\n- Let PyPI know that we use markdown\n\n## 0.1.0\n- Initial release", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/paylogic/dogpile_filesystem", "keywords": "dogpile_filesystem", "license": "MIT license", "maintainer": "", "maintainer_email": "", "name": "dogpile-filesystem", "package_url": "https://pypi.org/project/dogpile-filesystem/", "platform": "", "project_url": "https://pypi.org/project/dogpile-filesystem/", "project_urls": {"Homepage": "https://github.com/paylogic/dogpile_filesystem"}, "release_url": "https://pypi.org/project/dogpile-filesystem/0.2.0/", "requires_dist": null, "requires_python": "", "summary": "File System Backends for Dogpile Cache", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>File System Backends for Dogpile Cache</h1>\n<p><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9fdd309a3944c11d19b8395586662fc185eff0a1/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f646f6770696c655f66696c6573797374656d2e7376673f7374796c653d666c6174\">\n<a href=\"https://travis-ci.org/paylogic/dogpile_filesystem\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8e2ebc7233666b698e35b3bf4387f096546cf9f5/68747470733a2f2f7472617669732d63692e6f72672f7061796c6f6769632f646f6770696c655f66696c6573797374656d2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/paylogic/dogpile_filesystem?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b26a60daa91c94076d8c1ff6e116f8c9ce4f9791/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f7061796c6f6769632f646f6770696c655f66696c6573797374656d2f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7f881cd2236635169155f0cccf6cbe4dd90cbd4e/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f646f6770696c655f66696c6573797374656d2e7376673f7374796c653d666c6174\"></p>\n<p>Filesystem-based backends for dogpile cache.</p>\n<p>The generic variant of the backend, <code>paylogic.filesystem</code>, will accept any picklable value and it will store it in the file system.</p>\n<p>The raw variant <code>paylogic.raw_filesystem</code> will only work with file-like values and it will avoid the pickling phase. This is useful when you are generating a big file and you don't want to keep in memory the contents of this file.</p>\n<p>Both variants use <a href=\"https://docs.python.org/3.7/library/fcntl.html#fcntl.lockf\" rel=\"nofollow\">fcntl.lockf</a> operations, therefore it is compatible with  UNIX-like systems only.\nThe lockf system call allows to allocate an arbitrary number of locks using the same file, avoiding problems that arise when deleting lock files.</p>\n<h2>Installation</h2>\n<p>Install with pip:</p>\n<p><code>$ pip install dogpile_filesystem</code></p>\n<h2>Usage</h2>\n<h3>Generic variant</h3>\n<p>Configure a region to use <code>paylogic.filesystem</code>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">dogpile.cache</span> <span class=\"kn\">import</span> <span class=\"n\">make_region</span>\n<span class=\"kn\">import</span> <span class=\"nn\">datetime</span>\n\n<span class=\"n\">region</span> <span class=\"o\">=</span> <span class=\"n\">make_region</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">configure</span><span class=\"p\">(</span>\n    <span class=\"s1\">'paylogic.filesystem'</span><span class=\"p\">,</span>\n    <span class=\"n\">arguments</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"base_dir\"</span><span class=\"p\">:</span> <span class=\"s2\">\"/path/to/cachedir\"</span><span class=\"p\">,</span>  <span class=\"c1\"># Make sure this directory is only for this region</span>\n        <span class=\"c1\"># Optional parameters</span>\n        <span class=\"s2\">\"cache_size\"</span><span class=\"p\">:</span> <span class=\"mi\">1024</span><span class=\"o\">**</span><span class=\"mi\">3</span><span class=\"p\">,</span>  <span class=\"c1\"># Defaults to 1 Gb</span>\n        <span class=\"s2\">\"expiration_time\"</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">seconds</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">),</span>  <span class=\"c1\"># Defaults to no expiration</span>\n        <span class=\"s2\">\"distributed_lock\"</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>  <span class=\"c1\"># Defaults to true</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">)</span>\n\n<span class=\"nd\">@region</span><span class=\"o\">.</span><span class=\"n\">cache_on_arguments</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">my_function</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"mi\">42</span>\n</pre>\n<h3>Raw variant</h3>\n<p>Configure a region to use dogpile_filesystem:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">dogpile.cache</span> <span class=\"kn\">import</span> <span class=\"n\">make_region</span>\n<span class=\"kn\">import</span> <span class=\"nn\">datetime</span>\n<span class=\"kn\">import</span> <span class=\"nn\">tempfile</span>\n\n<span class=\"n\">region</span> <span class=\"o\">=</span> <span class=\"n\">make_region</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">configure</span><span class=\"p\">(</span>\n    <span class=\"s1\">'paylogic.raw_filesystem'</span><span class=\"p\">,</span>\n    <span class=\"n\">arguments</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"base_dir\"</span><span class=\"p\">:</span> <span class=\"s2\">\"/path/to/cachedir\"</span><span class=\"p\">,</span>  <span class=\"c1\"># Make sure this directory is only for this region</span>\n        <span class=\"c1\"># Optional parameters</span>\n        <span class=\"s2\">\"cache_size\"</span><span class=\"p\">:</span> <span class=\"mi\">1024</span><span class=\"o\">**</span><span class=\"mi\">3</span><span class=\"p\">,</span>  <span class=\"c1\"># Defaults to 1 Gb</span>\n        <span class=\"s2\">\"file_movable\"</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>  <span class=\"c1\"># Whether the backend can freely move the file.</span>\n                               <span class=\"c1\"># When True, the backend will move the file to the cache</span>\n                               <span class=\"c1\"># directory directly using os.rename(file.name).</span>\n                               <span class=\"c1\"># When False (default), the content of the file will be copied to </span>\n                               <span class=\"c1\"># the cache directory.</span>\n        <span class=\"s2\">\"expiration_time\"</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">seconds</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">),</span>  <span class=\"c1\"># Defaults to no expiration</span>\n        <span class=\"s2\">\"distributed_lock\"</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>  <span class=\"c1\"># Defaults to true</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">)</span>\n\n<span class=\"nd\">@region</span><span class=\"o\">.</span><span class=\"n\">cache_on_arguments</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">big_file_operation</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">):</span>\n    <span class=\"c1\"># When using `file_movable=True`, we must make sure that NamedTemporaryFile does not delete the file on close,</span>\n    <span class=\"c1\"># otherwise it will complain that it cannot find the file.</span>\n    <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">tempfile</span><span class=\"o\">.</span><span class=\"n\">NamedTemporaryFile</span><span class=\"p\">(</span><span class=\"n\">delete</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"c1\"># fill the file</span>\n    <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">flush</span><span class=\"p\">()</span>\n    <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">seek</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">f</span>\n</pre>\n<h2>Development</h2>\n<p>Install the dev requirements and the project in development mode:</p>\n<p><code>$ pip install -r requirements_dev.txt -e .</code></p>\n<p>Run tests:</p>\n<p><code>$ pytest tests</code></p>\n<p>Optionally run tests for all supported configurations:</p>\n<p><code>$ tox</code></p>\n<h1>Changelog</h1>\n<p>All notable changes to this project will be documented in this file.</p>\n<p>This project adheres to <a href=\"https://semver.org/spec/v2.0.0.html\" rel=\"nofollow\">Semantic Versioning</a>.</p>\n<h2>Unreleased</h2>\n<h2>0.2.0</h2>\n<ul>\n<li>Removed logic that falls back to copying a file when <code>file_movable=True</code> but the file does not appear to be movable. Do not try to be smart.</li>\n</ul>\n<h2>0.1.1</h2>\n<ul>\n<li>Let PyPI know that we use markdown</li>\n</ul>\n<h2>0.1.0</h2>\n<ul>\n<li>Initial release</li>\n</ul>\n\n          </div>"}, "last_serial": 4824723, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "914d0f87dc651cbdf6a0382b7ccaad93", "sha256": "8e97ae2a69c353dd7052d689034c60bacd723e80fd54cc3c26de028a03885731"}, "downloads": -1, "filename": "dogpile_filesystem-0.1.1.tar.gz", "has_sig": false, "md5_digest": "914d0f87dc651cbdf6a0382b7ccaad93", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12662, "upload_time": "2019-02-15T13:07:32", "upload_time_iso_8601": "2019-02-15T13:07:32.272810Z", "url": "https://files.pythonhosted.org/packages/d1/a7/e1f5b427cf258c3f1aa315e194785f5549ad68ebe2dfd00f4718f0680258/dogpile_filesystem-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "ffb282de0fb44838dfda1eaac9c2079f", "sha256": "fc71ef1e2ad47ac5e936bbf2b4069b9426d330d8e6e4915aaccffcd4fff16620"}, "downloads": -1, "filename": "dogpile_filesystem-0.2.0.tar.gz", "has_sig": false, "md5_digest": "ffb282de0fb44838dfda1eaac9c2079f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12803, "upload_time": "2019-02-15T13:34:27", "upload_time_iso_8601": "2019-02-15T13:34:27.906709Z", "url": "https://files.pythonhosted.org/packages/c3/48/30a00646ac4d760d68b16e8cb5f35448afa27c198eca4d27d8176f33f9c8/dogpile_filesystem-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ffb282de0fb44838dfda1eaac9c2079f", "sha256": "fc71ef1e2ad47ac5e936bbf2b4069b9426d330d8e6e4915aaccffcd4fff16620"}, "downloads": -1, "filename": "dogpile_filesystem-0.2.0.tar.gz", "has_sig": false, "md5_digest": "ffb282de0fb44838dfda1eaac9c2079f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12803, "upload_time": "2019-02-15T13:34:27", "upload_time_iso_8601": "2019-02-15T13:34:27.906709Z", "url": "https://files.pythonhosted.org/packages/c3/48/30a00646ac4d760d68b16e8cb5f35448afa27c198eca4d27d8176f33f9c8/dogpile_filesystem-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:34 2020"}