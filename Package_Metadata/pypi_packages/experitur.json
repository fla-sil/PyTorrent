{"info": {"author": "Simon-Martin Schroeder", "author_email": "martin.schroeder@nerdluecht.de", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "# experitur\n\n[![](https://img.shields.io/pypi/v/experitur.svg?style=flat)](https://pypi.org/project/experitur/) [![Build Status](https://travis-ci.org/moi90/experitur.svg?branch=master)](https://travis-ci.org/moi90/experitur) [![codecov](https://codecov.io/gh/moi90/experitur/branch/master/graph/badge.svg)](https://codecov.io/gh/moi90/experitur) ![](https://img.shields.io/pypi/pyversions/experitur.svg?style=flat) [![Documentation Status](https://readthedocs.org/projects/experitur/badge/?version=latest)](https://experitur.readthedocs.io/en/latest/?badge=latest)\n\n**experitur** automates machine learning and other computer experiments. Includes grid search and resuming aborted experiments. No lock-in, all your data is easily accessible in the text-based, machine-readable YAML format.\n\n![example](https://raw.githubusercontent.com/moi90/experitur/master/examples/simple.gif)\n\n## Experiment description\n\nEvery experiment is described in a regular python file. The `@experiment` decorator is used to mark experiment entry-points.\n\n```python\nfrom experitur import experiment\n\n@experiment(\n    parameter_grid={\n        \"parameter_1\": [1,2,3],\n        \"parameter_2\": [\"a\", \"b\", \"c\"],\n    })\ndef example(trial):\n    \"\"\"This is an example experiment.\"\"\"\n    ...\n```\n\n### Parameter grid\n\nThe core of an experiment is its *parameter grid*. It works like [`sklearn.model_selection.ParameterGrid`](https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.ParameterGrid.html). Each parameter has a list of values that it can take. A number of *trials* is generated from the cross product of the values of each parameter.\n\n### Entry point\n\nAn experiment is a regular function that is decorated with `@experiment` (unless it is *abstract* or *derived*). Upon execution, the function gets called with the current trial. It may return a result dictionary.\n\n**Signature:** `(trial) -> dict`\n\n```python\nfrom experitur import experiment\n\n@experiment(\n    parameter_grid={\n        \"parameter_1\": [1,2,3],\n        \"parameter_2\": [\"a\", \"b\", \"c\"],\n    })\ndef example(trial):\n    \"\"\"This is an example experiment.\"\"\"\n    print(\"parameters:\", pformat(parameters))\n    return {}\n```\n\nNow, you can run the experiment:\n\n```\n$ experitur run example.py\n...\n```\n\nAs you can see, `run` was called four times with every combination of [1,2] x [a,b].\n\n### Multiple experiments\n\nThe Python file can contain multiple experiments:\n\n```python\nfrom experitur import experiment\n\n@experiment(...)\ndef example1(trial):\n    ...\n\n@experiment(...)\ndef example2(trial):\n    ...\n```\n\n### Experiment inheritance\n\nOne experiment may inherit the settings of another, using the `parent` parameter.\n\n```python\nfrom experitur import experiment\n\n@experiment(...)\ndef example1(trial):\n    ...\n\n# Derived  with own entry point:\n@experiment(parent=example1)\ndef example2(trial):\n    ...\n\n# Derived  with inherited entry point:\nexample3 = experiment(\"example3\", parent=example2)\n```\n\n### Parameter substitution\n\n`experitur` includes a recursive parameter substitution engine. Each value string is treated as a *recursive format string* and is resolved using the whole parameter set of a trial.\n\n```python\n@experiment(\n    parameter_grid={\n        \"a1\": [1],\n        \"a2\": [2],\n        \"b\": [1, 2],\n        \"a\": [\"{a_{b}}\"],\n    })\ndef example(trial):\n    ...\n```\n\n```\n$ experitur run parsub\n...\n```\n\nThis way, you can easily run complicated setups with settings that depend on other settings.\n\nRecursive format strings work like `string.Formatter` with two exceptions:\n\n1. **Recursive field names:** The field name itself may be a format string:\n\n   ```\n   format(\"{foo_{bar}}\", bar=\"baz\", foo_baz=\"foo\") -> \"foo\"\n   ```\n\n2. **Literal output:** If the format string consist solely of a replacement field and does not contain a format specification, no to-string conversion is performed:\n\n   ```\n   format(\"{}\", 1) -> 1\n   ```\n\n   This allows the use of format strings for non-string values.\n\n#### Application\n\nThis feature is especially useful if you want to run your experiments for different datasets but need slightly different settings for each dataset.\n\nLet's assume we have two datasets, \"bees\" and \"flowers\".\n\n```python\n@experiment(\n    parameter_grid={\n            \"dataset\": [\"bees\", \"flowers\"],\n            \"dataset_fn\": [\"/data/{dataset}/index.csv\"],\n            \"bees-crop\": [10],\n            \"flowers-crop\": [0],\n            \"crop\": [\"{{dataset}-crop}\"]\n        }\n)\ndef example(trial):\n    ...\n```\n\nThe experiment will be executed once for each dataset, with `trial[\"crop\"]==10` for the \"bees\" dataset and `trial[\"crop\"]==0` for the \"flowers\" dataset.\n\n## The `trial` object\n\nEvery experiment receives a `trial` object that allows access to the parameters and meta-data of the trial.\n\nParameters are accessed with the `[]` operator (e.g. `trial[\"a\"]`), meta-data is accessed with the `.` operator (e.g. `trial.wdir`).\n\n### Access of parent data\n\n...\n\n## Files\n\nWhen `experitur` executes a script, it creates the following file structure in the directory where the DOX file is located:\n\n```\n/\n+- script.py\n+- script/\n|  +- experiment_id/\n|  |  +- trial_id/\n|  |  |  +- experitur.yaml\n|  |  ...\n|  ...\n```\n\n`<script>/<experiment_id>/<trial_id>/experitur.yaml` contains the parameters and the results from a trial, e.g.:\n\n```yaml\ncallable: example.experiment1\nexperiment: experiment1\nid: experiment1/a-1_b-3\nparameters: {a: 1, b: 3}\nparent_experiment: null\nresult: null\nsuccess: true\ntime_end: 2019-06-07 14:22:41.697925\ntime_start: 2019-06-07 14:22:41.697837\nwdir: examples/example/experiment1/a-1_b-3\n```\n\nMost items should be self-explanatory. `parameters` are the parameters passed to the entry point. `id` is derived from the parameters that are varied in the parameter grid. This way, you can easily interpret the file structure.\n\n## Collecting results\n\nUse `experitur collect script.py` to collect all the results (including parameters and metadata) of all trials of a lab book into a single CSV file located at `script/results.csv`.\n\n## Calling functions and default parameters\nYour experiment function might call other functions that have default parameters.\n`experitur` gives you some utility functions that extract these default parameters adds them to the list of parameters.\n\nFor the following examples, let's assume `trial[\"p_a\"]=1` and `trial[\"p_b\"]=2`.\n\n- `trial.without_prefix(prefix: str, parameters: dict) -> dict`: Extract all parameters that start with `prefix`.\n\n  ```python\n  trial.without_prefix(\"p_\") == {\"a\": 1, \"b\": 2}\n  ```\n\n- `trial.apply(prefix: str, callable_: callable, *args, **kwargs)`: Call `callable_` with the parameters starting with `prefix`.\n\n  ```python\n  trial.apply(\"p_\", fun, 10, c=20)\n  # is the same as\n  fun(10, a=1, b=2, c=20)\n  ```\n\n- `trial.record_defaults(prefix, [callable_,] **defaults)`: Set default values for parameters that were not set previously. Values in `defaults` override default parameters of `callable_`.\n\n  ```python\n  def foo(a=1, b=2, c=3):\n      pass\n  set_default_parameters(\"foo_\", parameters, foo, c=4)\n  # is the same as\n  parameters.setdefault(\"foo_a\", 1)\n  parameters.setdefault(\"foo_b\", 2)\n  parameters.setdefault(\"foo_c\", 4)\n  ```\n\nIt is a good idea to make use of `set_default_parameters` and `apply_parameters` excessively. This way, your result files always contain the full set of parameters.\n\nFor a simple example, see [examples/example.py](examples/example.py).\n\n## Installation\n\n`experitur` is packaged on [PyPI](https://pypi.org/).\n\n```shell\npip install experitur\n```\n\nBe warned that this package is currently under heavy development and anything might change any time!\n\n## Examples\n\n-  [examples/example.py](examples/example.py): A very basic example showing the workings of `set_default_parameters` and `apply_parameters`.\n-  [examples/classifier.py](examples/classifier.py): Try different parameters of `sklearn.svm.SVC` to classify handwritten digits (the [MNIST](http://archive.ics.uci.edu/ml/datasets/Optical+Recognition+of+Handwritten+Digits) test set). Run the example, add more parameter values and see how `experitur` skips already existing configurations during the next run.\n\n## Contributions\n**experitur** is under active development, so any user feedback, bug reports, comments, suggestions, or pull requests are highly appreciated. Please use the [bug tracker](https://github.com/moi90/experitur/issues) and [fork](https://github.com/moi90/experitur/network/members) the repository.\n\n## Compatibility\n\n`experitur` is [tested](https://travis-ci.org/moi90/experitur) with Python 3.5, 3.6 and 3.7.\n\n## Similar software\n\n- [Sacred](https://github.com/IDSIA/sacred)\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/moi90/experitur", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "experitur", "package_url": "https://pypi.org/project/experitur/", "platform": "", "project_url": "https://pypi.org/project/experitur/", "project_urls": {"Homepage": "https://github.com/moi90/experitur"}, "release_url": "https://pypi.org/project/experitur/1.1.0/", "requires_dist": ["Click", "regex", "tqdm", "pyyaml", "pandas"], "requires_python": ">=3.5", "summary": "Automates machine learning and other computer experiments", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>experitur</h1>\n<p><a href=\"https://pypi.org/project/experitur/\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/70ccd889bdfcfaaf1c457d60324e74837f451cfe/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6578706572697475722e7376673f7374796c653d666c6174\"></a> <a href=\"https://travis-ci.org/moi90/experitur\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a41e1633d662acafb9554be7e12e59aac8117b6b/68747470733a2f2f7472617669732d63692e6f72672f6d6f6939302f6578706572697475722e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://codecov.io/gh/moi90/experitur\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/546a157f078b808019a668af44c2a56a2f1b6ce4/68747470733a2f2f636f6465636f762e696f2f67682f6d6f6939302f6578706572697475722f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a> <img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ff1e480585242f7e5c1e5e76dd033cb234c2e50c/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f6578706572697475722e7376673f7374796c653d666c6174\"> <a href=\"https://experitur.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/40d0de621153586069cfce7190fe5f8707497f4f/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f6578706572697475722f62616467652f3f76657273696f6e3d6c6174657374\"></a></p>\n<p><strong>experitur</strong> automates machine learning and other computer experiments. Includes grid search and resuming aborted experiments. No lock-in, all your data is easily accessible in the text-based, machine-readable YAML format.</p>\n<p><img alt=\"example\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ff0ad5b312dfb8b609250da1f205d1144557dc75/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6d6f6939302f6578706572697475722f6d61737465722f6578616d706c65732f73696d706c652e676966\"></p>\n<h2>Experiment description</h2>\n<p>Every experiment is described in a regular python file. The <code>@experiment</code> decorator is used to mark experiment entry-points.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">experitur</span> <span class=\"kn\">import</span> <span class=\"n\">experiment</span>\n\n<span class=\"nd\">@experiment</span><span class=\"p\">(</span>\n    <span class=\"n\">parameter_grid</span><span class=\"o\">=</span><span class=\"p\">{</span>\n        <span class=\"s2\">\"parameter_1\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],</span>\n        <span class=\"s2\">\"parameter_2\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"a\"</span><span class=\"p\">,</span> <span class=\"s2\">\"b\"</span><span class=\"p\">,</span> <span class=\"s2\">\"c\"</span><span class=\"p\">],</span>\n    <span class=\"p\">})</span>\n<span class=\"k\">def</span> <span class=\"nf\">example</span><span class=\"p\">(</span><span class=\"n\">trial</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"This is an example experiment.\"\"\"</span>\n    <span class=\"o\">...</span>\n</pre>\n<h3>Parameter grid</h3>\n<p>The core of an experiment is its <em>parameter grid</em>. It works like <a href=\"https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.ParameterGrid.html\" rel=\"nofollow\"><code>sklearn.model_selection.ParameterGrid</code></a>. Each parameter has a list of values that it can take. A number of <em>trials</em> is generated from the cross product of the values of each parameter.</p>\n<h3>Entry point</h3>\n<p>An experiment is a regular function that is decorated with <code>@experiment</code> (unless it is <em>abstract</em> or <em>derived</em>). Upon execution, the function gets called with the current trial. It may return a result dictionary.</p>\n<p><strong>Signature:</strong> <code>(trial) -&gt; dict</code></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">experitur</span> <span class=\"kn\">import</span> <span class=\"n\">experiment</span>\n\n<span class=\"nd\">@experiment</span><span class=\"p\">(</span>\n    <span class=\"n\">parameter_grid</span><span class=\"o\">=</span><span class=\"p\">{</span>\n        <span class=\"s2\">\"parameter_1\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],</span>\n        <span class=\"s2\">\"parameter_2\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"a\"</span><span class=\"p\">,</span> <span class=\"s2\">\"b\"</span><span class=\"p\">,</span> <span class=\"s2\">\"c\"</span><span class=\"p\">],</span>\n    <span class=\"p\">})</span>\n<span class=\"k\">def</span> <span class=\"nf\">example</span><span class=\"p\">(</span><span class=\"n\">trial</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"This is an example experiment.\"\"\"</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"parameters:\"</span><span class=\"p\">,</span> <span class=\"n\">pformat</span><span class=\"p\">(</span><span class=\"n\">parameters</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"p\">{}</span>\n</pre>\n<p>Now, you can run the experiment:</p>\n<pre><code>$ experitur run example.py\n...\n</code></pre>\n<p>As you can see, <code>run</code> was called four times with every combination of [1,2] x [a,b].</p>\n<h3>Multiple experiments</h3>\n<p>The Python file can contain multiple experiments:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">experitur</span> <span class=\"kn\">import</span> <span class=\"n\">experiment</span>\n\n<span class=\"nd\">@experiment</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">example1</span><span class=\"p\">(</span><span class=\"n\">trial</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n<span class=\"nd\">@experiment</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">example2</span><span class=\"p\">(</span><span class=\"n\">trial</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n</pre>\n<h3>Experiment inheritance</h3>\n<p>One experiment may inherit the settings of another, using the <code>parent</code> parameter.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">experitur</span> <span class=\"kn\">import</span> <span class=\"n\">experiment</span>\n\n<span class=\"nd\">@experiment</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">example1</span><span class=\"p\">(</span><span class=\"n\">trial</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n<span class=\"c1\"># Derived  with own entry point:</span>\n<span class=\"nd\">@experiment</span><span class=\"p\">(</span><span class=\"n\">parent</span><span class=\"o\">=</span><span class=\"n\">example1</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">example2</span><span class=\"p\">(</span><span class=\"n\">trial</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n<span class=\"c1\"># Derived  with inherited entry point:</span>\n<span class=\"n\">example3</span> <span class=\"o\">=</span> <span class=\"n\">experiment</span><span class=\"p\">(</span><span class=\"s2\">\"example3\"</span><span class=\"p\">,</span> <span class=\"n\">parent</span><span class=\"o\">=</span><span class=\"n\">example2</span><span class=\"p\">)</span>\n</pre>\n<h3>Parameter substitution</h3>\n<p><code>experitur</code> includes a recursive parameter substitution engine. Each value string is treated as a <em>recursive format string</em> and is resolved using the whole parameter set of a trial.</p>\n<pre><span class=\"nd\">@experiment</span><span class=\"p\">(</span>\n    <span class=\"n\">parameter_grid</span><span class=\"o\">=</span><span class=\"p\">{</span>\n        <span class=\"s2\">\"a1\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span>\n        <span class=\"s2\">\"a2\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span>\n        <span class=\"s2\">\"b\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span>\n        <span class=\"s2\">\"a\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"{a_</span><span class=\"si\">{b}</span><span class=\"s2\">}\"</span><span class=\"p\">],</span>\n    <span class=\"p\">})</span>\n<span class=\"k\">def</span> <span class=\"nf\">example</span><span class=\"p\">(</span><span class=\"n\">trial</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n</pre>\n<pre><code>$ experitur run parsub\n...\n</code></pre>\n<p>This way, you can easily run complicated setups with settings that depend on other settings.</p>\n<p>Recursive format strings work like <code>string.Formatter</code> with two exceptions:</p>\n<ol>\n<li>\n<p><strong>Recursive field names:</strong> The field name itself may be a format string:</p>\n<pre><code>format(\"{foo_{bar}}\", bar=\"baz\", foo_baz=\"foo\") -&gt; \"foo\"\n</code></pre>\n</li>\n<li>\n<p><strong>Literal output:</strong> If the format string consist solely of a replacement field and does not contain a format specification, no to-string conversion is performed:</p>\n<pre><code>format(\"{}\", 1) -&gt; 1\n</code></pre>\n<p>This allows the use of format strings for non-string values.</p>\n</li>\n</ol>\n<h4>Application</h4>\n<p>This feature is especially useful if you want to run your experiments for different datasets but need slightly different settings for each dataset.</p>\n<p>Let's assume we have two datasets, \"bees\" and \"flowers\".</p>\n<pre><span class=\"nd\">@experiment</span><span class=\"p\">(</span>\n    <span class=\"n\">parameter_grid</span><span class=\"o\">=</span><span class=\"p\">{</span>\n            <span class=\"s2\">\"dataset\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"bees\"</span><span class=\"p\">,</span> <span class=\"s2\">\"flowers\"</span><span class=\"p\">],</span>\n            <span class=\"s2\">\"dataset_fn\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"/data/</span><span class=\"si\">{dataset}</span><span class=\"s2\">/index.csv\"</span><span class=\"p\">],</span>\n            <span class=\"s2\">\"bees-crop\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">],</span>\n            <span class=\"s2\">\"flowers-crop\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n            <span class=\"s2\">\"crop\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"{{dataset}-crop}\"</span><span class=\"p\">]</span>\n        <span class=\"p\">}</span>\n<span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">example</span><span class=\"p\">(</span><span class=\"n\">trial</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n</pre>\n<p>The experiment will be executed once for each dataset, with <code>trial[\"crop\"]==10</code> for the \"bees\" dataset and <code>trial[\"crop\"]==0</code> for the \"flowers\" dataset.</p>\n<h2>The <code>trial</code> object</h2>\n<p>Every experiment receives a <code>trial</code> object that allows access to the parameters and meta-data of the trial.</p>\n<p>Parameters are accessed with the <code>[]</code> operator (e.g. <code>trial[\"a\"]</code>), meta-data is accessed with the <code>.</code> operator (e.g. <code>trial.wdir</code>).</p>\n<h3>Access of parent data</h3>\n<p>...</p>\n<h2>Files</h2>\n<p>When <code>experitur</code> executes a script, it creates the following file structure in the directory where the DOX file is located:</p>\n<pre><code>/\n+- script.py\n+- script/\n|  +- experiment_id/\n|  |  +- trial_id/\n|  |  |  +- experitur.yaml\n|  |  ...\n|  ...\n</code></pre>\n<p><code>&lt;script&gt;/&lt;experiment_id&gt;/&lt;trial_id&gt;/experitur.yaml</code> contains the parameters and the results from a trial, e.g.:</p>\n<pre><span class=\"nt\">callable</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">example.experiment1</span>\n<span class=\"nt\">experiment</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">experiment1</span>\n<span class=\"nt\">id</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">experiment1/a-1_b-3</span>\n<span class=\"nt\">parameters</span><span class=\"p\">:</span> <span class=\"p p-Indicator\">{</span><span class=\"nt\">a</span><span class=\"p\">:</span> <span class=\"nv\">1</span><span class=\"p p-Indicator\">,</span><span class=\"nt\"> b</span><span class=\"p\">:</span> <span class=\"nv\">3</span><span class=\"p p-Indicator\">}</span>\n<span class=\"nt\">parent_experiment</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">null</span>\n<span class=\"nt\">result</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">null</span>\n<span class=\"nt\">success</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">true</span>\n<span class=\"nt\">time_end</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">2019-06-07 14:22:41.697925</span>\n<span class=\"nt\">time_start</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">2019-06-07 14:22:41.697837</span>\n<span class=\"nt\">wdir</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">examples/example/experiment1/a-1_b-3</span>\n</pre>\n<p>Most items should be self-explanatory. <code>parameters</code> are the parameters passed to the entry point. <code>id</code> is derived from the parameters that are varied in the parameter grid. This way, you can easily interpret the file structure.</p>\n<h2>Collecting results</h2>\n<p>Use <code>experitur collect script.py</code> to collect all the results (including parameters and metadata) of all trials of a lab book into a single CSV file located at <code>script/results.csv</code>.</p>\n<h2>Calling functions and default parameters</h2>\n<p>Your experiment function might call other functions that have default parameters.\n<code>experitur</code> gives you some utility functions that extract these default parameters adds them to the list of parameters.</p>\n<p>For the following examples, let's assume <code>trial[\"p_a\"]=1</code> and <code>trial[\"p_b\"]=2</code>.</p>\n<ul>\n<li>\n<p><code>trial.without_prefix(prefix: str, parameters: dict) -&gt; dict</code>: Extract all parameters that start with <code>prefix</code>.</p>\n<pre><span class=\"n\">trial</span><span class=\"o\">.</span><span class=\"n\">without_prefix</span><span class=\"p\">(</span><span class=\"s2\">\"p_\"</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"s2\">\"a\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s2\">\"b\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">}</span>\n</pre>\n</li>\n<li>\n<p><code>trial.apply(prefix: str, callable_: callable, *args, **kwargs)</code>: Call <code>callable_</code> with the parameters starting with <code>prefix</code>.</p>\n<pre><span class=\"n\">trial</span><span class=\"o\">.</span><span class=\"n\">apply</span><span class=\"p\">(</span><span class=\"s2\">\"p_\"</span><span class=\"p\">,</span> <span class=\"n\">fun</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">)</span>\n<span class=\"c1\"># is the same as</span>\n<span class=\"n\">fun</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">)</span>\n</pre>\n</li>\n<li>\n<p><code>trial.record_defaults(prefix, [callable_,] **defaults)</code>: Set default values for parameters that were not set previously. Values in <code>defaults</code> override default parameters of <code>callable_</code>.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n<span class=\"n\">set_default_parameters</span><span class=\"p\">(</span><span class=\"s2\">\"foo_\"</span><span class=\"p\">,</span> <span class=\"n\">parameters</span><span class=\"p\">,</span> <span class=\"n\">foo</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"c1\"># is the same as</span>\n<span class=\"n\">parameters</span><span class=\"o\">.</span><span class=\"n\">setdefault</span><span class=\"p\">(</span><span class=\"s2\">\"foo_a\"</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">parameters</span><span class=\"o\">.</span><span class=\"n\">setdefault</span><span class=\"p\">(</span><span class=\"s2\">\"foo_b\"</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">parameters</span><span class=\"o\">.</span><span class=\"n\">setdefault</span><span class=\"p\">(</span><span class=\"s2\">\"foo_c\"</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n</pre>\n</li>\n</ul>\n<p>It is a good idea to make use of <code>set_default_parameters</code> and <code>apply_parameters</code> excessively. This way, your result files always contain the full set of parameters.</p>\n<p>For a simple example, see <a href=\"examples/example.py\" rel=\"nofollow\">examples/example.py</a>.</p>\n<h2>Installation</h2>\n<p><code>experitur</code> is packaged on <a href=\"https://pypi.org/\" rel=\"nofollow\">PyPI</a>.</p>\n<pre>pip install experitur\n</pre>\n<p>Be warned that this package is currently under heavy development and anything might change any time!</p>\n<h2>Examples</h2>\n<ul>\n<li><a href=\"examples/example.py\" rel=\"nofollow\">examples/example.py</a>: A very basic example showing the workings of <code>set_default_parameters</code> and <code>apply_parameters</code>.</li>\n<li><a href=\"examples/classifier.py\" rel=\"nofollow\">examples/classifier.py</a>: Try different parameters of <code>sklearn.svm.SVC</code> to classify handwritten digits (the <a href=\"http://archive.ics.uci.edu/ml/datasets/Optical+Recognition+of+Handwritten+Digits\" rel=\"nofollow\">MNIST</a> test set). Run the example, add more parameter values and see how <code>experitur</code> skips already existing configurations during the next run.</li>\n</ul>\n<h2>Contributions</h2>\n<p><strong>experitur</strong> is under active development, so any user feedback, bug reports, comments, suggestions, or pull requests are highly appreciated. Please use the <a href=\"https://github.com/moi90/experitur/issues\" rel=\"nofollow\">bug tracker</a> and <a href=\"https://github.com/moi90/experitur/network/members\" rel=\"nofollow\">fork</a> the repository.</p>\n<h2>Compatibility</h2>\n<p><code>experitur</code> is <a href=\"https://travis-ci.org/moi90/experitur\" rel=\"nofollow\">tested</a> with Python 3.5, 3.6 and 3.7.</p>\n<h2>Similar software</h2>\n<ul>\n<li><a href=\"https://github.com/IDSIA/sacred\" rel=\"nofollow\">Sacred</a></li>\n</ul>\n\n          </div>"}, "last_serial": 5470383, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "89c928ce74246071e95b2ed2abbdcac4", "sha256": "86a6a16d54f91a875b81ab6e024419c784848afd3ec5249073bc3f34683f0a7f"}, "downloads": -1, "filename": "experitur-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "89c928ce74246071e95b2ed2abbdcac4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 17374, "upload_time": "2019-01-31T19:42:02", "upload_time_iso_8601": "2019-01-31T19:42:02.698776Z", "url": "https://files.pythonhosted.org/packages/20/7f/6a0f7ca5ce462e8ea3ba0cecce2591791922393579af36c13cf92cb53e3b/experitur-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b2368aacc17ebe07c711dd68e4fcbf9c", "sha256": "46c2faa33be026cca7c590dd28b1b6c9038a257fd7c7cb2d4d41ff8fb69e2fac"}, "downloads": -1, "filename": "experitur-0.1.tar.gz", "has_sig": false, "md5_digest": "b2368aacc17ebe07c711dd68e4fcbf9c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14227, "upload_time": "2019-01-31T19:42:05", "upload_time_iso_8601": "2019-01-31T19:42:05.463761Z", "url": "https://files.pythonhosted.org/packages/cd/5d/69e9d7ba182f8ed40ea1751c1a3c4d9cb6e551abfcaeb95f3e14b6e86fea/experitur-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "9be287bc0b362e895ef81c5d30d6f09f", "sha256": "af97b7aa289d2dd47dd4ce615023ecc9a47c9553e542654b0a12ed053b882d73"}, "downloads": -1, "filename": "experitur-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "9be287bc0b362e895ef81c5d30d6f09f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 17425, "upload_time": "2019-01-31T19:59:32", "upload_time_iso_8601": "2019-01-31T19:59:32.346288Z", "url": "https://files.pythonhosted.org/packages/02/99/c6e736eac15cc14558a4324af9f7d5d871ffd8ab3b73259b69d4276e6d84/experitur-0.1.1-py3-none-any.whl", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "82d1a7fa7f2b5d5805837781fe32b341", "sha256": "768f28453d5e621140f9337201a93eb3e0449d32627b6fc50bf5e250e880ae99"}, "downloads": -1, "filename": "experitur-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "82d1a7fa7f2b5d5805837781fe32b341", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 17434, "upload_time": "2019-01-31T20:33:37", "upload_time_iso_8601": "2019-01-31T20:33:37.030926Z", "url": "https://files.pythonhosted.org/packages/ed/e4/cfb07460fe4f902fe1c9f1938052bbe72ab7a8a402823e989a1e2de80eaf/experitur-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7368affa8229519b6a3df7b8ecb9e907", "sha256": "afe08adcfc1a076ff73e362ee035a980ccf7c18afbcbbdd15e29b60cc7b6e5c5"}, "downloads": -1, "filename": "experitur-0.1.2.tar.gz", "has_sig": false, "md5_digest": "7368affa8229519b6a3df7b8ecb9e907", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 13882, "upload_time": "2019-01-31T20:33:38", "upload_time_iso_8601": "2019-01-31T20:33:38.290151Z", "url": "https://files.pythonhosted.org/packages/58/42/2eb16d65248737d8e0c52f30fac871d67500a6b6b87026b63c1cb25b64d2/experitur-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "5c9632781dcad57e48308527665fcead", "sha256": "13ae904643f16ed9980e949adbdb8c147f08dd78b9607ebde12eb0dfd0cc53da"}, "downloads": -1, "filename": "experitur-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "5c9632781dcad57e48308527665fcead", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 18771, "upload_time": "2019-02-01T09:35:01", "upload_time_iso_8601": "2019-02-01T09:35:01.454563Z", "url": "https://files.pythonhosted.org/packages/2e/6a/b1031655f136e0a4b1cf75dd79b9635bad1803b88384460f21c740cfea35/experitur-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f97e8f716aea57c58d2c496b18706b13", "sha256": "4d532f31a48381ba68c2e90ecfb532065d042314fe5359c676305fe9de6f514a"}, "downloads": -1, "filename": "experitur-0.1.3.tar.gz", "has_sig": false, "md5_digest": "f97e8f716aea57c58d2c496b18706b13", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 16344, "upload_time": "2019-02-01T09:35:02", "upload_time_iso_8601": "2019-02-01T09:35:02.525465Z", "url": "https://files.pythonhosted.org/packages/38/92/13f5c803dcd951d8103b28366b5be1cce64dd33808bd81ea11b9388d5676/experitur-0.1.3.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "1e72e1c1a727656f0d358a268c8c83e3", "sha256": "495a4950e110739be4d9c1f903d6674d582c682a88caab0e3695b0a8cde45631"}, "downloads": -1, "filename": "experitur-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "1e72e1c1a727656f0d358a268c8c83e3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 18044, "upload_time": "2019-06-25T12:58:06", "upload_time_iso_8601": "2019-06-25T12:58:06.372801Z", "url": "https://files.pythonhosted.org/packages/56/4a/c2440e7e95c3ca226f598e771525fd8bd7bcbec0a5e68bce030d0e7df7a3/experitur-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f8b85ce613f3d8a01ae2c2c36a0c867c", "sha256": "880dc9be992a4c16db9af4a384435ff1e7be9a356a3b3e49da41d4eb42ebc669"}, "downloads": -1, "filename": "experitur-1.0.0.tar.gz", "has_sig": false, "md5_digest": "f8b85ce613f3d8a01ae2c2c36a0c867c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 32748, "upload_time": "2019-06-25T12:58:08", "upload_time_iso_8601": "2019-06-25T12:58:08.219143Z", "url": "https://files.pythonhosted.org/packages/16/ad/e2cc83173e0cc0424bb610c2d87cd2f4953b248888487e1f728568d06c06/experitur-1.0.0.tar.gz", "yanked": false}], "1.0.0a1": [{"comment_text": "", "digests": {"md5": "a3b82590ea4255d92b9b6cd1cc03af7f", "sha256": "bb13c3de4b2521829ac241662b290cbcb5b516dced54ee69e8fdc50059d3a8a8"}, "downloads": -1, "filename": "experitur-1.0.0a1-py3-none-any.whl", "has_sig": false, "md5_digest": "a3b82590ea4255d92b9b6cd1cc03af7f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 17078, "upload_time": "2019-06-24T12:19:03", "upload_time_iso_8601": "2019-06-24T12:19:03.065905Z", "url": "https://files.pythonhosted.org/packages/67/bd/e11fc1ec7496878acc62e949fe74a8902a43c2919b84d7a7c425471e178a/experitur-1.0.0a1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0ca9df6be2651e597911b3c3dad94fe1", "sha256": "cc103c6b83a21fdb1ca56530cc3948fcb72e4e20b96c51bfe50e0c458d6bcffc"}, "downloads": -1, "filename": "experitur-1.0.0a1.tar.gz", "has_sig": false, "md5_digest": "0ca9df6be2651e597911b3c3dad94fe1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 13536, "upload_time": "2019-06-24T12:19:52", "upload_time_iso_8601": "2019-06-24T12:19:52.811593Z", "url": "https://files.pythonhosted.org/packages/a4/c5/725f81b60aea7441fc079017d54bd29b3ce0a0fbbdbd30765f69e9f8a1b5/experitur-1.0.0a1.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "ce698460e17a0a358d4d445d04c83234", "sha256": "f44b48ef5cbfe78d3cf63fc4000ea6178de7ec5b39822b61a66c41e2487554b1"}, "downloads": -1, "filename": "experitur-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ce698460e17a0a358d4d445d04c83234", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 18780, "upload_time": "2019-07-01T10:00:36", "upload_time_iso_8601": "2019-07-01T10:00:36.302082Z", "url": "https://files.pythonhosted.org/packages/e8/38/2d478cbacbe1b85468ff54114df93e7baf14d10ad76e568f14b6cf3fc11d/experitur-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5621c8430583c65444b61eda640d85d3", "sha256": "54d5ebe9c24ef3010490ddb5133d2990ba60b1bd04d45879d5a51f6f4e233fb6"}, "downloads": -1, "filename": "experitur-1.1.0.tar.gz", "has_sig": false, "md5_digest": "5621c8430583c65444b61eda640d85d3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 33568, "upload_time": "2019-07-01T10:00:37", "upload_time_iso_8601": "2019-07-01T10:00:37.758275Z", "url": "https://files.pythonhosted.org/packages/61/01/7255704c8b735ad14e49e7c3560906297e684bab9dcc25a60c39739f60cc/experitur-1.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ce698460e17a0a358d4d445d04c83234", "sha256": "f44b48ef5cbfe78d3cf63fc4000ea6178de7ec5b39822b61a66c41e2487554b1"}, "downloads": -1, "filename": "experitur-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ce698460e17a0a358d4d445d04c83234", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 18780, "upload_time": "2019-07-01T10:00:36", "upload_time_iso_8601": "2019-07-01T10:00:36.302082Z", "url": "https://files.pythonhosted.org/packages/e8/38/2d478cbacbe1b85468ff54114df93e7baf14d10ad76e568f14b6cf3fc11d/experitur-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5621c8430583c65444b61eda640d85d3", "sha256": "54d5ebe9c24ef3010490ddb5133d2990ba60b1bd04d45879d5a51f6f4e233fb6"}, "downloads": -1, "filename": "experitur-1.1.0.tar.gz", "has_sig": false, "md5_digest": "5621c8430583c65444b61eda640d85d3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 33568, "upload_time": "2019-07-01T10:00:37", "upload_time_iso_8601": "2019-07-01T10:00:37.758275Z", "url": "https://files.pythonhosted.org/packages/61/01/7255704c8b735ad14e49e7c3560906297e684bab9dcc25a60c39739f60cc/experitur-1.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:39 2020"}