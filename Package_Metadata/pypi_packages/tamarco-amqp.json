{"info": {"author": "System73 Engineering Team", "author_email": "opensource@system73.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 3.6"], "description": "# tamarco-amqp\n\n[![Build Status](https://travis-ci.com/System73/tamarco-amqp.svg?branch=master)](https://travis-ci.com/System73/tamarco-amqp)\n[![Coverage](https://sonarcloud.io/api/project_badges/measure?project=System73_tamarco-amqp&metric=coverage)](https://sonarcloud.io/dashboard?id=System73_tamarco-amqp)\n[![Quality Gate Status](https://sonarcloud.io/api/project_badges/measure?project=System73_tamarco-amqp&metric=alert_status)](https://sonarcloud.io/dashboard?id=System73_tamarco-amqp)\n\nAMQP resource for Tamarco microservice framework.\n\n## Settings\n\nThis resource depends on the following configuration schema:\n\n```yaml\n    system:\n        resources:\n            amqp:\n                host: 127.0.0.1\n                port: 5672\n                vhost: /\n                user: microservice\n                password: 1234\n                connection_timeout: 10\n                queues_prefix: \"prefix\"\n```\n\n## Inputs and outputs\n\nThe inputs and outputs need to be declared in the resource.\n\nThree different communication patterns can be used.\n\nA specific input is required for each message pattern, but the same output is valid for all message patterns. Each message pattern has a different method in the output.\n\nWith the JsonCodec the input and the output are directly Python dictionaries.\n\n### Publish-subscribe pattern\n\nIn the pub-sub pattern a message reaches all the services subscribed to the queue. It can be used to notify events to anyone who needs it.\n\n#### Input\n\nThe `AMQPSubscriptionInput` can be used as a decorator.\n\n```python\nclass AmqpMicroservice():\n    amqp = AMQPResource()\n\n    @AMQPSubscriptionInput(resource=amqp, queue='cows', codec=JsonCodec)\n    async def consume_messages(self, message):\n        self.logger.info(f'Consumed message from cows subscription queue: {message}')\n```\n\nOr as a async iterator:\n\n```python\nclass AmqpMicroservice():\n    cows_input = AMQPSubscriptionInput(queue='cows', codec=JsonCodec)\n    amqp = AMQPResource(inputs=[cows_input])\n\n    @task\n    async def consume_cows(self):\n        async for message in self.cows_input:\n            self.logger.info(f'Consumed message from cows subscription queue: {message}')\n```\n\n#### Output\n\nUse the `publish` method of the output.\n\n```python\nclass AmqpMicroservice():\n    cows_output = AMQPOutput(queue='cows', codec=JsonCodec)\n    amqp = AMQPResource(outputs=[cows_output])\n\n    @task_timer(interval=1000, autostart=True)\n    async def metric_producer(self):\n        await cows_output.publish({'my_json_message': 'to_cow_queue'})\n```\n\n### Push-pull pattern\n\nThe push-pull pattern is a work queue where each message is only pulled by one of the services subscribed to the queue. Commonly used to distribute the work in a pull of instances.\n\n#### Input\n\n`AMQPPullInput` is used to declare a input pull queue, and example used as decorator: \n\n```python\nclass AmqpMicroservice():\n    amqp = AMQPResource()\n\n    @AMQPPullInput(resource=amqp, queue='cows', codec=JsonCodec)\n    async def consume_messages(self, message):\n        self.logger.info(f'Consumed message from cows pull queue: {message}')\n```\n\nIt can be used as an async iterator in the same way that the pub/sub pattern.\n\n#### Output \n\nUse the `push` method of the `AMQPOutput`. In the following\n\n```python\nclass AmqpMicroservice():\n    cows_output = AMQPOutput(queue='cows', codec=JsonCodec)\n    amqp = AMQPResource(outputs=[cows_output])\n\n    @task_timer(interval=1000, autostart=True)\n    async def metric_producer(self):\n        await cows_output.push({'my_json_message': 'to_cow_queue'})\n```\n\n### Request-response pattern\n\nIn the request-response pattern each request is handled by one of the instances subscribed to the queue and unlike the other patterns, each request has an answer. \n\n#### Input \n\n`AMQPRequestInput` is used to declare a input request response queue. An example used as decorator:\n\n```python\nclass AmqpMicroservice():\n    amqp = AMQPResource()\n\n    @AMQPRequestInput(resource=amqp, queue='cows', codec=JsonCodec)\n    async def consume_messages(self, message, response_handler):\n        self.logger.info(f'Consumed message from cows queue: {message}')\n        await response_handler.send_response({'cows': 'response'})\n```\n\nIn this case the handler takes two input objects, and one of them send the response.\n\n#### Output\n\nThe output is like the rest of them but it returns a response.\n\n```python\nclass AmqpMicroservice():\n    cows_output = AMQPOutput(queue='cows', codec=JsonCodec)\n    amqp = AMQPResource()\n\n    @task_timer(interval=1000, autostart=True)\n    async def request_response(self):\n        message = {'cow': 'MOOOO'}\n        response = await cows_output.request(message)\n        self.logger.info(f'Response from cows queue: {response}')\n```\n\n## How to run the examples\n\nTo run them you just need to launch the docker-compose, install the requirements and run it.\n\n```python3\npip install -r examples/requirements.txt\ndocker-compose up -d\npython examples/microservice_stream_input.py\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/System73/tamarco-amqp", "keywords": "tamarco,amqp,microservices", "license": "", "maintainer": "", "maintainer_email": "", "name": "tamarco-amqp", "package_url": "https://pypi.org/project/tamarco-amqp/", "platform": "", "project_url": "https://pypi.org/project/tamarco-amqp/", "project_urls": {"Homepage": "https://github.com/System73/tamarco-amqp"}, "release_url": "https://pypi.org/project/tamarco-amqp/0.1.0/", "requires_dist": null, "requires_python": "", "summary": "AMQP resource for Tamarco microservice framework.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>tamarco-amqp</h1>\n<p><a href=\"https://travis-ci.com/System73/tamarco-amqp\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bd0f116531b7db7e4135a289f9df341942039f00/68747470733a2f2f7472617669732d63692e636f6d2f53797374656d37332f74616d6172636f2d616d71702e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://sonarcloud.io/dashboard?id=System73_tamarco-amqp\" rel=\"nofollow\"><img alt=\"Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2d139788dcdc78e3922625f0362fe22581b0dcf5/68747470733a2f2f736f6e6172636c6f75642e696f2f6170692f70726f6a6563745f6261646765732f6d6561737572653f70726f6a6563743d53797374656d37335f74616d6172636f2d616d7170266d65747269633d636f766572616765\"></a>\n<a href=\"https://sonarcloud.io/dashboard?id=System73_tamarco-amqp\" rel=\"nofollow\"><img alt=\"Quality Gate Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9c2e6471fe4f77e33b5bf79c78eff5218a1d0de3/68747470733a2f2f736f6e6172636c6f75642e696f2f6170692f70726f6a6563745f6261646765732f6d6561737572653f70726f6a6563743d53797374656d37335f74616d6172636f2d616d7170266d65747269633d616c6572745f737461747573\"></a></p>\n<p>AMQP resource for Tamarco microservice framework.</p>\n<h2>Settings</h2>\n<p>This resource depends on the following configuration schema:</p>\n<pre>    <span class=\"nt\">system</span><span class=\"p\">:</span>\n        <span class=\"nt\">resources</span><span class=\"p\">:</span>\n            <span class=\"nt\">amqp</span><span class=\"p\">:</span>\n                <span class=\"nt\">host</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">127.0.0.1</span>\n                <span class=\"nt\">port</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">5672</span>\n                <span class=\"nt\">vhost</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">/</span>\n                <span class=\"nt\">user</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">microservice</span>\n                <span class=\"nt\">password</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">1234</span>\n                <span class=\"nt\">connection_timeout</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">10</span>\n                <span class=\"nt\">queues_prefix</span><span class=\"p\">:</span> <span class=\"s\">\"prefix\"</span>\n</pre>\n<h2>Inputs and outputs</h2>\n<p>The inputs and outputs need to be declared in the resource.</p>\n<p>Three different communication patterns can be used.</p>\n<p>A specific input is required for each message pattern, but the same output is valid for all message patterns. Each message pattern has a different method in the output.</p>\n<p>With the JsonCodec the input and the output are directly Python dictionaries.</p>\n<h3>Publish-subscribe pattern</h3>\n<p>In the pub-sub pattern a message reaches all the services subscribed to the queue. It can be used to notify events to anyone who needs it.</p>\n<h4>Input</h4>\n<p>The <code>AMQPSubscriptionInput</code> can be used as a decorator.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">AmqpMicroservice</span><span class=\"p\">():</span>\n    <span class=\"n\">amqp</span> <span class=\"o\">=</span> <span class=\"n\">AMQPResource</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@AMQPSubscriptionInput</span><span class=\"p\">(</span><span class=\"n\">resource</span><span class=\"o\">=</span><span class=\"n\">amqp</span><span class=\"p\">,</span> <span class=\"n\">queue</span><span class=\"o\">=</span><span class=\"s1\">'cows'</span><span class=\"p\">,</span> <span class=\"n\">codec</span><span class=\"o\">=</span><span class=\"n\">JsonCodec</span><span class=\"p\">)</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">consume_messages</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'Consumed message from cows subscription queue: </span><span class=\"si\">{</span><span class=\"n\">message</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n</pre>\n<p>Or as a async iterator:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">AmqpMicroservice</span><span class=\"p\">():</span>\n    <span class=\"n\">cows_input</span> <span class=\"o\">=</span> <span class=\"n\">AMQPSubscriptionInput</span><span class=\"p\">(</span><span class=\"n\">queue</span><span class=\"o\">=</span><span class=\"s1\">'cows'</span><span class=\"p\">,</span> <span class=\"n\">codec</span><span class=\"o\">=</span><span class=\"n\">JsonCodec</span><span class=\"p\">)</span>\n    <span class=\"n\">amqp</span> <span class=\"o\">=</span> <span class=\"n\">AMQPResource</span><span class=\"p\">(</span><span class=\"n\">inputs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">cows_input</span><span class=\"p\">])</span>\n\n    <span class=\"nd\">@task</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">consume_cows</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">async</span> <span class=\"k\">for</span> <span class=\"n\">message</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cows_input</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'Consumed message from cows subscription queue: </span><span class=\"si\">{</span><span class=\"n\">message</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n</pre>\n<h4>Output</h4>\n<p>Use the <code>publish</code> method of the output.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">AmqpMicroservice</span><span class=\"p\">():</span>\n    <span class=\"n\">cows_output</span> <span class=\"o\">=</span> <span class=\"n\">AMQPOutput</span><span class=\"p\">(</span><span class=\"n\">queue</span><span class=\"o\">=</span><span class=\"s1\">'cows'</span><span class=\"p\">,</span> <span class=\"n\">codec</span><span class=\"o\">=</span><span class=\"n\">JsonCodec</span><span class=\"p\">)</span>\n    <span class=\"n\">amqp</span> <span class=\"o\">=</span> <span class=\"n\">AMQPResource</span><span class=\"p\">(</span><span class=\"n\">outputs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">cows_output</span><span class=\"p\">])</span>\n\n    <span class=\"nd\">@task_timer</span><span class=\"p\">(</span><span class=\"n\">interval</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"n\">autostart</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">metric_producer</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">await</span> <span class=\"n\">cows_output</span><span class=\"o\">.</span><span class=\"n\">publish</span><span class=\"p\">({</span><span class=\"s1\">'my_json_message'</span><span class=\"p\">:</span> <span class=\"s1\">'to_cow_queue'</span><span class=\"p\">})</span>\n</pre>\n<h3>Push-pull pattern</h3>\n<p>The push-pull pattern is a work queue where each message is only pulled by one of the services subscribed to the queue. Commonly used to distribute the work in a pull of instances.</p>\n<h4>Input</h4>\n<p><code>AMQPPullInput</code> is used to declare a input pull queue, and example used as decorator:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">AmqpMicroservice</span><span class=\"p\">():</span>\n    <span class=\"n\">amqp</span> <span class=\"o\">=</span> <span class=\"n\">AMQPResource</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@AMQPPullInput</span><span class=\"p\">(</span><span class=\"n\">resource</span><span class=\"o\">=</span><span class=\"n\">amqp</span><span class=\"p\">,</span> <span class=\"n\">queue</span><span class=\"o\">=</span><span class=\"s1\">'cows'</span><span class=\"p\">,</span> <span class=\"n\">codec</span><span class=\"o\">=</span><span class=\"n\">JsonCodec</span><span class=\"p\">)</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">consume_messages</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'Consumed message from cows pull queue: </span><span class=\"si\">{</span><span class=\"n\">message</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n</pre>\n<p>It can be used as an async iterator in the same way that the pub/sub pattern.</p>\n<h4>Output</h4>\n<p>Use the <code>push</code> method of the <code>AMQPOutput</code>. In the following</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">AmqpMicroservice</span><span class=\"p\">():</span>\n    <span class=\"n\">cows_output</span> <span class=\"o\">=</span> <span class=\"n\">AMQPOutput</span><span class=\"p\">(</span><span class=\"n\">queue</span><span class=\"o\">=</span><span class=\"s1\">'cows'</span><span class=\"p\">,</span> <span class=\"n\">codec</span><span class=\"o\">=</span><span class=\"n\">JsonCodec</span><span class=\"p\">)</span>\n    <span class=\"n\">amqp</span> <span class=\"o\">=</span> <span class=\"n\">AMQPResource</span><span class=\"p\">(</span><span class=\"n\">outputs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">cows_output</span><span class=\"p\">])</span>\n\n    <span class=\"nd\">@task_timer</span><span class=\"p\">(</span><span class=\"n\">interval</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"n\">autostart</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">metric_producer</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">await</span> <span class=\"n\">cows_output</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">({</span><span class=\"s1\">'my_json_message'</span><span class=\"p\">:</span> <span class=\"s1\">'to_cow_queue'</span><span class=\"p\">})</span>\n</pre>\n<h3>Request-response pattern</h3>\n<p>In the request-response pattern each request is handled by one of the instances subscribed to the queue and unlike the other patterns, each request has an answer.</p>\n<h4>Input</h4>\n<p><code>AMQPRequestInput</code> is used to declare a input request response queue. An example used as decorator:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">AmqpMicroservice</span><span class=\"p\">():</span>\n    <span class=\"n\">amqp</span> <span class=\"o\">=</span> <span class=\"n\">AMQPResource</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@AMQPRequestInput</span><span class=\"p\">(</span><span class=\"n\">resource</span><span class=\"o\">=</span><span class=\"n\">amqp</span><span class=\"p\">,</span> <span class=\"n\">queue</span><span class=\"o\">=</span><span class=\"s1\">'cows'</span><span class=\"p\">,</span> <span class=\"n\">codec</span><span class=\"o\">=</span><span class=\"n\">JsonCodec</span><span class=\"p\">)</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">consume_messages</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"n\">response_handler</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'Consumed message from cows queue: </span><span class=\"si\">{</span><span class=\"n\">message</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n        <span class=\"k\">await</span> <span class=\"n\">response_handler</span><span class=\"o\">.</span><span class=\"n\">send_response</span><span class=\"p\">({</span><span class=\"s1\">'cows'</span><span class=\"p\">:</span> <span class=\"s1\">'response'</span><span class=\"p\">})</span>\n</pre>\n<p>In this case the handler takes two input objects, and one of them send the response.</p>\n<h4>Output</h4>\n<p>The output is like the rest of them but it returns a response.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">AmqpMicroservice</span><span class=\"p\">():</span>\n    <span class=\"n\">cows_output</span> <span class=\"o\">=</span> <span class=\"n\">AMQPOutput</span><span class=\"p\">(</span><span class=\"n\">queue</span><span class=\"o\">=</span><span class=\"s1\">'cows'</span><span class=\"p\">,</span> <span class=\"n\">codec</span><span class=\"o\">=</span><span class=\"n\">JsonCodec</span><span class=\"p\">)</span>\n    <span class=\"n\">amqp</span> <span class=\"o\">=</span> <span class=\"n\">AMQPResource</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@task_timer</span><span class=\"p\">(</span><span class=\"n\">interval</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"n\">autostart</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">request_response</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'cow'</span><span class=\"p\">:</span> <span class=\"s1\">'MOOOO'</span><span class=\"p\">}</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">cows_output</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'Response from cows queue: </span><span class=\"si\">{</span><span class=\"n\">response</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n</pre>\n<h2>How to run the examples</h2>\n<p>To run them you just need to launch the docker-compose, install the requirements and run it.</p>\n<pre><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"o\">-</span><span class=\"n\">r</span> <span class=\"n\">examples</span><span class=\"o\">/</span><span class=\"n\">requirements</span><span class=\"o\">.</span><span class=\"n\">txt</span>\n<span class=\"n\">docker</span><span class=\"o\">-</span><span class=\"n\">compose</span> <span class=\"n\">up</span> <span class=\"o\">-</span><span class=\"n\">d</span>\n<span class=\"n\">python</span> <span class=\"n\">examples</span><span class=\"o\">/</span><span class=\"n\">microservice_stream_input</span><span class=\"o\">.</span><span class=\"n\">py</span>\n</pre>\n\n          </div>"}, "last_serial": 5890424, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "1c06847c2f4f7b4f036fd57d79fc452e", "sha256": "c81ae3ec0f453bd3394a1c28f79b224ea26795abe1cbf92d79370ea10448c49e"}, "downloads": -1, "filename": "tamarco-amqp-0.1.0.tar.gz", "has_sig": false, "md5_digest": "1c06847c2f4f7b4f036fd57d79fc452e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14558, "upload_time": "2019-09-26T12:40:36", "upload_time_iso_8601": "2019-09-26T12:40:36.154779Z", "url": "https://files.pythonhosted.org/packages/10/c4/488edb812d1934bfdae44761cb71b9635ad245c42a9f7778392c86320eb7/tamarco-amqp-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1c06847c2f4f7b4f036fd57d79fc452e", "sha256": "c81ae3ec0f453bd3394a1c28f79b224ea26795abe1cbf92d79370ea10448c49e"}, "downloads": -1, "filename": "tamarco-amqp-0.1.0.tar.gz", "has_sig": false, "md5_digest": "1c06847c2f4f7b4f036fd57d79fc452e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14558, "upload_time": "2019-09-26T12:40:36", "upload_time_iso_8601": "2019-09-26T12:40:36.154779Z", "url": "https://files.pythonhosted.org/packages/10/c4/488edb812d1934bfdae44761cb71b9635ad245c42a9f7778392c86320eb7/tamarco-amqp-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:14 2020"}