{"info": {"author": "Ignacio Tampe", "author_email": "thenachotp@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.6", "Topic :: Communications"], "description": "# Le Mi Know (when it runs)\n[![made-with-python](https://img.shields.io/badge/Made%20with-Python-red.svg)](#python) [![Downloads](https://pepy.tech/badge/lemiknow)](https://pepy.tech/project/lemiknow) [![Downloads](https://pepy.tech/badge/lemiknow/month)](https://pepy.tech/project/lemiknow/month) [![GitHub stars](https://img.shields.io/github/stars/nachotp/lemiknow.svg?style=social&label=Star&maxAge=1000)](https://github.com/nachotp/lemiknow/stargazers/)\n\nA small library based on [knockknock](https://github.com/huggingface/knockknock) to get a notification when your function call starts, finishes, or when it crashes during the process with two additional lines of code.\n\nSay goodbye to the guessing game, lemiknow will let you know what you need to know, when you need to know.\n\n## Installation\n\nInstall with `pip` or equivalent.\n```bash\npip install lemiknow\n```\n\nThis code has only been tested with Python >= 3.6.\n\n## Usage\n\nThe library is designed to be used in a seamless way, with minimal code modification: you only need to add a decorator on top your main function call. The return value (if there is one) is also reported in the notification.\n\nThere are currently *four* ways to setup notifications:\n\n| Platform | Original External Contributor | Updated & Tested |\n|:---:|:---:|:---:|\n| [Slack](#slack) | - | Yes |\n| [Telegram](#telegram) | - | Yes |\n| [Discord](#discord) | [@watkinsm](https://github.com/watkinsm) | Yes |\n| [Matrix](#matrix) | [@jcklie](https://github.com/jcklie) | Yes |\n\nTo be implemented and tested:\n\n| Platform | Original External Contributor | Updated & Tested |\n|:---:|:---:|:---:|\n| [Microsoft Teams](#microsoft-teams) | [@noklam](https://github.com/noklam) | No |\n| [Text Message](#text-message-(sms)) | [@abhishekkrthakur](https://github.com/abhishekkrthakur) | No |\n| [email](#email) | - | No |\n| [Desktop](#desktop-notification) | [@atakanyenel](https://github.com/atakanyenel) | No |\n\n\n## Seting up notifications\n\nEvery decorator works the same way but some may require different parameters. Here is a dummy example to show the usual scenario\n\n```python\nfrom lemiknow import fake_sender\n\n@fake_sender(webhook=\"<your_webhook_url>\", message=None, notify_end=True, include_details=True)\ndef function_call(parameters):\n    import time\n    time.sleep(10)\n    return \"Success\" # Optional return value\n```\nEvery decorator has the following three optional paramenters:\n```\nmessage: str\n    Optional message to include when notifying the function call.\n    default: None\nnotify_end: bool\n    Send a notification when the function finishes (not recommended for short calls).\n    default: True\ninclude_details: bool\n    Adds extra information on notifications like hostname, start time, etc.\n    Can't be False if message is None.\n    default: True\n```\n\n### Generic examples:\n\n#### No message on function end and custom message:\n```python\nfrom lemiknow import fake_sender\n\nmessage = \"This function is fast and doesn't need a notification when it finishes!\"\n\n@fake_sender(webhook=\"<your_webhook_url>\", message=message, notify_end=False, include_details=True)\ndef function_call(parameters):\n    return \"So fast\" # Optional return value\n```\n\n#### Send only custom message:\n```python\nfrom lemiknow import fake_sender\n\nmessage = \"I don't need every detail included for this notification\"\n\n@fake_sender(webhook=\"<your_webhook_url>\", message=message, notify_end=False, include_details=False)\ndef function_call(parameters):\n    return \"So little detail\" # Optional return value\n```\n\n### Telegram\n\nYou can use Telegram Messenger to get notifications. You'll first have to create your own notification bot by following the three steps provided by Telegram [here](https://core.telegram.org/bots#6-botfather) and save your API access `TOKEN`.\n\nTelegram bots are shy and can't send the first message so you'll have to do the first step. By sending the first message, you'll be able to get the `chat_id` required (identification of your messaging room) by visiting `https://api.telegram.org/bot<YourBOTToken>/getUpdates` and get the `int` under the key `message['chat']['id']`.\n\n#### Python\n\n```python\nfrom lemiknow import telegram_sender\n\nCHAT_ID: int = <your_messaging_room_id>\n@telegram_sender(token=\"<your_api_token>\", chat_id=CHAT_ID)\ndef function_call(parameters):\n    import time\n    time.sleep(10)\n    return \"Success\" # Optional return value # Optional return value\n```\n\n#### Command-line\n\n```bash\nlemiknow telegram \\\n    --token <your_api_token> \\\n    --chat-id <your_messaging_room_id> \\\n    sleep 10\n```\n\n### Email\n\nThe service relies on [Yagmail](https://github.com/kootenpv/yagmail) a GMAIL/SMTP client. You'll need a gmail email address to use it (you can setup one [here](https://accounts.google.com), it's free). I recommend creating a new one (rather than your usual one) since you'll have to modify the account's security settings to allow the Python library to access it by [Turning on less secure apps](https://devanswers.co/allow-less-secure-apps-access-gmail-account/).\n\n#### Python\n\n```python\nfrom lemiknow import email_sender\n\n@email_sender(recipient_emails=[\"<your_email@address.com>\", \"<your_second_email@address.com>\"], sender_email=\"<grandma's_email@gmail.com>\")\ndef train_your_nicest_model(your_nicest_parameters):\n    import time\n    time.sleep(10000)\n    return {'loss': 0.9} # Optional return value\n```\n\n#### Command-line\n\n```bash\nlemiknow email \\\n    --recipient-emails <your_email@address.com>,<your_second_email@address.com> \\\n    --sender-email <grandma's_email@gmail.com> \\\n    sleep 10\n```\n\nIf `sender_email` is not specified, then the first email in `recipient_emails` will be used as the sender's email.\n\nNote that launching this will asks you for the sender's email password. It will be safely stored in the system keyring service through the [`keyring` Python library](https://pypi.org/project/keyring/).\n\n\n### Slack\n\nSimilarly, you can also use Slack to get notifications. You'll have to get your Slack room [webhook URL](https://api.slack.com/incoming-webhooks#create_a_webhook) and optionally your [user id](https://api.slack.com/methods/users.identity) (if you want to tag yourself or someone else).\n\n#### Python\n\n```python\nfrom lemiknow import slack_sender\n\nwebhook_url = \"<webhook_url_to_your_slack_room>\"\n@slack_sender(webhook_url=webhook_url, channel=\"<your_favorite_slack_channel>\")\ndef function_call(parameters):\n    import time\n    time.sleep(10)\n    return \"Success\" # Optional return value # Optional return value\n```\n\nYou can also specify an optional argument to tag specific people: `user_mentions=[<your_slack_id>, <grandma's_slack_id>]`.\n\n#### Command-line\n\n```bash\nlemiknow slack \\\n    --webhook-url <webhook_url_to_your_slack_room> \\\n    --channel <your_favorite_slack_channel> \\\n    sleep 10\n```\n\nYou can also specify an optional argument to tag specific people: `--user-mentions <your_slack_id>,<grandma's_slack_id>`.\n\n\n### Discord\n\nYou can also use Discord to get notifications. You'll just have to get your Discord channel's [webhook URL](https://support.discordapp.com/hc/en-us/articles/228383668-Intro-to-Webhooks).\n\n#### Python\n\n```python\nfrom lemiknow import discord_sender\n\nwebhook_url = \"<webhook_url_to_your_discord_channel>\"\n@discord_sender(webhook_url=webhook_url)\ndef function_call(parameters):\n    import time\n    time.sleep(10)\n    return \"Success\" # Optional return value\n```\n\n#### Command-line\n\n```bash\nlemiknow discord \\\n    --webhook-url <webhook_url_to_your_discord_channel> \\\n    sleep 10\n```\n\n### Matrix\n\n[Matrix](https://matrix.org/) is supported for notifications. The homeserver is the \nserver on which your user that will send messages is registered. Do not forget the schema for the URL (`http` or `https`).\nYou'll have to get the access token for a bot or your own user. The easiest way to obtain it is to look into Riot looking \nin the riot settings, `Help & About`, down the bottom is: `Access Token:<click to reveal>`. You also need to specify a \nroom alias to which messages are sent. To obtain the alias in Riot, create a room you want to use, then open the room \nsettings under `Room Addresses` and add an alias.\n\n#### Python\n\n```python\nfrom lemiknow import matrix_sender\n\nHOMESERVER = \"<url_to_your_home_server>\" # e.g. https://matrix.org\nTOKEN = \"<your_auth_token>\"              # e.g. WiTyGizlr8ntvBXdFfZLctyY\nROOM = \"<room_alias\"                     # e.g. #lemiknow:matrix.org\n\n@matrix_sender(homeserver=HOMESERVER, token=TOKEN, room=ROOM)\ndef function_call(parameters):\n    import time\n    time.sleep(10)\n    return \"Success\" # Optional return value\n```\n\n#### Command-line\n\n```bash\nlemiknow matrix \\\n    --homeserver <homeserver> \\\n    --token <token> \\\n    --room <room> \\\n    sleep 10\n```\n\n## The following options have not been tested and updated (but will in future versions)\n\n### Microsoft Teams\n\nThanks to [@noklam](https://github.com/noklam), you can also use Microsoft Teams to get notifications. You'll have to get your Team Channel [webhook URL](https://docs.microsoft.com/en-us/microsoftteams/platform/concepts/connectors/connectors-using).\n\n#### Python\n\n```python\nfrom lemiknow import teams_sender\n\n@teams_sender(token=\"<webhook_url_to_your_teams_channel>\")\ndef train_your_nicest_model(your_nicest_parameters):\n    import time\n    time.sleep(10)\n    return {'loss': 0.9} # Optional return value\n```\n\n#### Command-line\n\n```bash\nlemiknow teams \\\n    --webhook-url <webhook_url_to_your_teams_channel> \\\n    sleep 10\n```\n\nYou can also specify an optional argument to tag specific people: `user_mentions=[<your_teams_id>, <grandma's_teams_id>]`.\n\n\n### Text Message (SMS)\n\nThanks to [@abhishekkrthakur](https://github.com/abhishekkrthakur), you can use Twilio to send text message notifications. You'll have to setup a [Twilio](www.twilio.com) account [here](https://www.twilio.com/try-twilio), which is paid service with competitive prices: for instance in the US, getting a new number and sending one text message through this service respectively cost $1.00 and $0.0075. You'll need to get (a) a phone number, (b) your [account SID](https://www.twilio.com/docs/glossary/what-is-a-sid) and (c) your [authentification token](https://www.twilio.com/docs/iam/access-tokens). Some detail [here](https://www.twilio.com/docs/iam/api/account).\n\n#### Python\n\n```python\nfrom lemiknow import sms_sender\n\nACCOUNT_SID: str = \"<your_account_sid>\"\nAUTH_TOKEN: str = \"<your_auth_token>\"\n@sms_sender(account_sid=ACCOUNT_SID, auth_token=AUTH_TOKEN, recipient_number=\"<recipient's_number>\", sender_number=\"<sender's_number>\")\ndef train_your_nicest_model(your_nicest_parameters):\n    import time\n    time.sleep(10)\n    return {'loss': 0.9} # Optional return value\n```\n\n#### Command-line\n\n```bash\nlemiknow sms \\\n    --account-sid <your_account_sid> \\\n    --auth-token <your_account_auth_token> \\\n    --recipient-number <recipient_number> \\\n    --sender-number <sender_number>\n    sleep 10\n```\n\n### Desktop Notification\n\nYou can also get notified from a desktop notification. It is currently only available for MacOS.\n\n#### Python\n\n```python\nfrom lemiknow import desktop_sender\n\n@desktop_sender(title=\"lemiknow Desktop Notifier\")\ndef train_your_nicest_model(your_nicest_parameters):\n    import time\n    time.sleep(10000)\n    return {\"loss\": 0.9}\n```\n\n#### Command Line\n```bash\nlemiknow desktop \\\n    --title 'lemiknow Desktop Notifier' \\\n    sleep 2\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/nachotp/lemiknow", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "lemiknow", "package_url": "https://pypi.org/project/lemiknow/", "platform": "", "project_url": "https://pypi.org/project/lemiknow/", "project_urls": {"Homepage": "https://github.com/nachotp/lemiknow"}, "release_url": "https://pypi.org/project/lemiknow/0.1.0/", "requires_dist": ["yagmail (>=0.11.214)", "keyring", "keyrings.alt (==3.1.1)", "matrix-client", "python-telegram-bot", "requests", "twilio"], "requires_python": ">=3.6", "summary": "Let's you know when your function is called, ends or crashes", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Le Mi Know (when it runs)</h1>\n<p><a href=\"#python\" rel=\"nofollow\"><img alt=\"made-with-python\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/923e2f0fb8eabb2031eb4b8bec6c938a01fa28dd/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4d616465253230776974682d507974686f6e2d7265642e737667\"></a> <a href=\"https://pepy.tech/project/lemiknow\" rel=\"nofollow\"><img alt=\"Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0c51db6a373c69116f6830bf5dcbbc1e77e68c43/68747470733a2f2f706570792e746563682f62616467652f6c656d696b6e6f77\"></a> <a href=\"https://pepy.tech/project/lemiknow/month\" rel=\"nofollow\"><img alt=\"Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0457dc921380c877a64a94f8aecb05411f5842b3/68747470733a2f2f706570792e746563682f62616467652f6c656d696b6e6f772f6d6f6e7468\"></a> <a href=\"https://github.com/nachotp/lemiknow/stargazers/\" rel=\"nofollow\"><img alt=\"GitHub stars\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d886e9762992f243d25d1aaa101a0abe007d6dd6/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f6e6163686f74702f6c656d696b6e6f772e7376673f7374796c653d736f6369616c266c6162656c3d53746172266d61784167653d31303030\"></a></p>\n<p>A small library based on <a href=\"https://github.com/huggingface/knockknock\" rel=\"nofollow\">knockknock</a> to get a notification when your function call starts, finishes, or when it crashes during the process with two additional lines of code.</p>\n<p>Say goodbye to the guessing game, lemiknow will let you know what you need to know, when you need to know.</p>\n<h2>Installation</h2>\n<p>Install with <code>pip</code> or equivalent.</p>\n<pre>pip install lemiknow\n</pre>\n<p>This code has only been tested with Python &gt;= 3.6.</p>\n<h2>Usage</h2>\n<p>The library is designed to be used in a seamless way, with minimal code modification: you only need to add a decorator on top your main function call. The return value (if there is one) is also reported in the notification.</p>\n<p>There are currently <em>four</em> ways to setup notifications:</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Platform</th>\n<th align=\"center\">Original External Contributor</th>\n<th align=\"center\">Updated &amp; Tested</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\"><a href=\"#slack\" rel=\"nofollow\">Slack</a></td>\n<td align=\"center\">-</td>\n<td align=\"center\">Yes</td>\n</tr>\n<tr>\n<td align=\"center\"><a href=\"#telegram\" rel=\"nofollow\">Telegram</a></td>\n<td align=\"center\">-</td>\n<td align=\"center\">Yes</td>\n</tr>\n<tr>\n<td align=\"center\"><a href=\"#discord\" rel=\"nofollow\">Discord</a></td>\n<td align=\"center\"><a href=\"https://github.com/watkinsm\" rel=\"nofollow\">@watkinsm</a></td>\n<td align=\"center\">Yes</td>\n</tr>\n<tr>\n<td align=\"center\"><a href=\"#matrix\" rel=\"nofollow\">Matrix</a></td>\n<td align=\"center\"><a href=\"https://github.com/jcklie\" rel=\"nofollow\">@jcklie</a></td>\n<td align=\"center\">Yes</td>\n</tr></tbody></table>\n<p>To be implemented and tested:</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Platform</th>\n<th align=\"center\">Original External Contributor</th>\n<th align=\"center\">Updated &amp; Tested</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\"><a href=\"#microsoft-teams\" rel=\"nofollow\">Microsoft Teams</a></td>\n<td align=\"center\"><a href=\"https://github.com/noklam\" rel=\"nofollow\">@noklam</a></td>\n<td align=\"center\">No</td>\n</tr>\n<tr>\n<td align=\"center\"><a href=\"#text-message-(sms)\" rel=\"nofollow\">Text Message</a></td>\n<td align=\"center\"><a href=\"https://github.com/abhishekkrthakur\" rel=\"nofollow\">@abhishekkrthakur</a></td>\n<td align=\"center\">No</td>\n</tr>\n<tr>\n<td align=\"center\"><a href=\"#email\" rel=\"nofollow\">email</a></td>\n<td align=\"center\">-</td>\n<td align=\"center\">No</td>\n</tr>\n<tr>\n<td align=\"center\"><a href=\"#desktop-notification\" rel=\"nofollow\">Desktop</a></td>\n<td align=\"center\"><a href=\"https://github.com/atakanyenel\" rel=\"nofollow\">@atakanyenel</a></td>\n<td align=\"center\">No</td>\n</tr></tbody></table>\n<h2>Seting up notifications</h2>\n<p>Every decorator works the same way but some may require different parameters. Here is a dummy example to show the usual scenario</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">lemiknow</span> <span class=\"kn\">import</span> <span class=\"n\">fake_sender</span>\n\n<span class=\"nd\">@fake_sender</span><span class=\"p\">(</span><span class=\"n\">webhook</span><span class=\"o\">=</span><span class=\"s2\">\"&lt;your_webhook_url&gt;\"</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">notify_end</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">include_details</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">function_call</span><span class=\"p\">(</span><span class=\"n\">parameters</span><span class=\"p\">):</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">time</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"s2\">\"Success\"</span> <span class=\"c1\"># Optional return value</span>\n</pre>\n<p>Every decorator has the following three optional paramenters:</p>\n<pre><code>message: str\n    Optional message to include when notifying the function call.\n    default: None\nnotify_end: bool\n    Send a notification when the function finishes (not recommended for short calls).\n    default: True\ninclude_details: bool\n    Adds extra information on notifications like hostname, start time, etc.\n    Can't be False if message is None.\n    default: True\n</code></pre>\n<h3>Generic examples:</h3>\n<h4>No message on function end and custom message:</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">lemiknow</span> <span class=\"kn\">import</span> <span class=\"n\">fake_sender</span>\n\n<span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"s2\">\"This function is fast and doesn't need a notification when it finishes!\"</span>\n\n<span class=\"nd\">@fake_sender</span><span class=\"p\">(</span><span class=\"n\">webhook</span><span class=\"o\">=</span><span class=\"s2\">\"&lt;your_webhook_url&gt;\"</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"o\">=</span><span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"n\">notify_end</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">include_details</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">function_call</span><span class=\"p\">(</span><span class=\"n\">parameters</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"s2\">\"So fast\"</span> <span class=\"c1\"># Optional return value</span>\n</pre>\n<h4>Send only custom message:</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">lemiknow</span> <span class=\"kn\">import</span> <span class=\"n\">fake_sender</span>\n\n<span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"s2\">\"I don't need every detail included for this notification\"</span>\n\n<span class=\"nd\">@fake_sender</span><span class=\"p\">(</span><span class=\"n\">webhook</span><span class=\"o\">=</span><span class=\"s2\">\"&lt;your_webhook_url&gt;\"</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"o\">=</span><span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"n\">notify_end</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">include_details</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">function_call</span><span class=\"p\">(</span><span class=\"n\">parameters</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"s2\">\"So little detail\"</span> <span class=\"c1\"># Optional return value</span>\n</pre>\n<h3>Telegram</h3>\n<p>You can use Telegram Messenger to get notifications. You'll first have to create your own notification bot by following the three steps provided by Telegram <a href=\"https://core.telegram.org/bots#6-botfather\" rel=\"nofollow\">here</a> and save your API access <code>TOKEN</code>.</p>\n<p>Telegram bots are shy and can't send the first message so you'll have to do the first step. By sending the first message, you'll be able to get the <code>chat_id</code> required (identification of your messaging room) by visiting <code>https://api.telegram.org/bot&lt;YourBOTToken&gt;/getUpdates</code> and get the <code>int</code> under the key <code>message['chat']['id']</code>.</p>\n<h4>Python</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">lemiknow</span> <span class=\"kn\">import</span> <span class=\"n\">telegram_sender</span>\n\n<span class=\"n\">CHAT_ID</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">your_messaging_room_id</span><span class=\"o\">&gt;</span>\n<span class=\"nd\">@telegram_sender</span><span class=\"p\">(</span><span class=\"n\">token</span><span class=\"o\">=</span><span class=\"s2\">\"&lt;your_api_token&gt;\"</span><span class=\"p\">,</span> <span class=\"n\">chat_id</span><span class=\"o\">=</span><span class=\"n\">CHAT_ID</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">function_call</span><span class=\"p\">(</span><span class=\"n\">parameters</span><span class=\"p\">):</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">time</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"s2\">\"Success\"</span> <span class=\"c1\"># Optional return value # Optional return value</span>\n</pre>\n<h4>Command-line</h4>\n<pre>lemiknow telegram <span class=\"se\">\\</span>\n    --token &lt;your_api_token&gt; <span class=\"se\">\\</span>\n    --chat-id &lt;your_messaging_room_id&gt; <span class=\"se\">\\</span>\n    sleep <span class=\"m\">10</span>\n</pre>\n<h3>Email</h3>\n<p>The service relies on <a href=\"https://github.com/kootenpv/yagmail\" rel=\"nofollow\">Yagmail</a> a GMAIL/SMTP client. You'll need a gmail email address to use it (you can setup one <a href=\"https://accounts.google.com\" rel=\"nofollow\">here</a>, it's free). I recommend creating a new one (rather than your usual one) since you'll have to modify the account's security settings to allow the Python library to access it by <a href=\"https://devanswers.co/allow-less-secure-apps-access-gmail-account/\" rel=\"nofollow\">Turning on less secure apps</a>.</p>\n<h4>Python</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">lemiknow</span> <span class=\"kn\">import</span> <span class=\"n\">email_sender</span>\n\n<span class=\"nd\">@email_sender</span><span class=\"p\">(</span><span class=\"n\">recipient_emails</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"&lt;your_email@address.com&gt;\"</span><span class=\"p\">,</span> <span class=\"s2\">\"&lt;your_second_email@address.com&gt;\"</span><span class=\"p\">],</span> <span class=\"n\">sender_email</span><span class=\"o\">=</span><span class=\"s2\">\"&lt;grandma's_email@gmail.com&gt;\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">train_your_nicest_model</span><span class=\"p\">(</span><span class=\"n\">your_nicest_parameters</span><span class=\"p\">):</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">time</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">10000</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'loss'</span><span class=\"p\">:</span> <span class=\"mf\">0.9</span><span class=\"p\">}</span> <span class=\"c1\"># Optional return value</span>\n</pre>\n<h4>Command-line</h4>\n<pre>lemiknow email <span class=\"se\">\\</span>\n    --recipient-emails &lt;your_email@address.com&gt;,&lt;your_second_email@address.com&gt; <span class=\"se\">\\</span>\n    --sender-email &lt;grandma<span class=\"err\">'</span>s_email@gmail.com&gt; <span class=\"se\">\\</span>\n    sleep <span class=\"m\">10</span>\n</pre>\n<p>If <code>sender_email</code> is not specified, then the first email in <code>recipient_emails</code> will be used as the sender's email.</p>\n<p>Note that launching this will asks you for the sender's email password. It will be safely stored in the system keyring service through the <a href=\"https://pypi.org/project/keyring/\" rel=\"nofollow\"><code>keyring</code> Python library</a>.</p>\n<h3>Slack</h3>\n<p>Similarly, you can also use Slack to get notifications. You'll have to get your Slack room <a href=\"https://api.slack.com/incoming-webhooks#create_a_webhook\" rel=\"nofollow\">webhook URL</a> and optionally your <a href=\"https://api.slack.com/methods/users.identity\" rel=\"nofollow\">user id</a> (if you want to tag yourself or someone else).</p>\n<h4>Python</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">lemiknow</span> <span class=\"kn\">import</span> <span class=\"n\">slack_sender</span>\n\n<span class=\"n\">webhook_url</span> <span class=\"o\">=</span> <span class=\"s2\">\"&lt;webhook_url_to_your_slack_room&gt;\"</span>\n<span class=\"nd\">@slack_sender</span><span class=\"p\">(</span><span class=\"n\">webhook_url</span><span class=\"o\">=</span><span class=\"n\">webhook_url</span><span class=\"p\">,</span> <span class=\"n\">channel</span><span class=\"o\">=</span><span class=\"s2\">\"&lt;your_favorite_slack_channel&gt;\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">function_call</span><span class=\"p\">(</span><span class=\"n\">parameters</span><span class=\"p\">):</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">time</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"s2\">\"Success\"</span> <span class=\"c1\"># Optional return value # Optional return value</span>\n</pre>\n<p>You can also specify an optional argument to tag specific people: <code>user_mentions=[&lt;your_slack_id&gt;, &lt;grandma's_slack_id&gt;]</code>.</p>\n<h4>Command-line</h4>\n<pre>lemiknow slack <span class=\"se\">\\</span>\n    --webhook-url &lt;webhook_url_to_your_slack_room&gt; <span class=\"se\">\\</span>\n    --channel &lt;your_favorite_slack_channel&gt; <span class=\"se\">\\</span>\n    sleep <span class=\"m\">10</span>\n</pre>\n<p>You can also specify an optional argument to tag specific people: <code>--user-mentions &lt;your_slack_id&gt;,&lt;grandma's_slack_id&gt;</code>.</p>\n<h3>Discord</h3>\n<p>You can also use Discord to get notifications. You'll just have to get your Discord channel's <a href=\"https://support.discordapp.com/hc/en-us/articles/228383668-Intro-to-Webhooks\" rel=\"nofollow\">webhook URL</a>.</p>\n<h4>Python</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">lemiknow</span> <span class=\"kn\">import</span> <span class=\"n\">discord_sender</span>\n\n<span class=\"n\">webhook_url</span> <span class=\"o\">=</span> <span class=\"s2\">\"&lt;webhook_url_to_your_discord_channel&gt;\"</span>\n<span class=\"nd\">@discord_sender</span><span class=\"p\">(</span><span class=\"n\">webhook_url</span><span class=\"o\">=</span><span class=\"n\">webhook_url</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">function_call</span><span class=\"p\">(</span><span class=\"n\">parameters</span><span class=\"p\">):</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">time</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"s2\">\"Success\"</span> <span class=\"c1\"># Optional return value</span>\n</pre>\n<h4>Command-line</h4>\n<pre>lemiknow discord <span class=\"se\">\\</span>\n    --webhook-url &lt;webhook_url_to_your_discord_channel&gt; <span class=\"se\">\\</span>\n    sleep <span class=\"m\">10</span>\n</pre>\n<h3>Matrix</h3>\n<p><a href=\"https://matrix.org/\" rel=\"nofollow\">Matrix</a> is supported for notifications. The homeserver is the\nserver on which your user that will send messages is registered. Do not forget the schema for the URL (<code>http</code> or <code>https</code>).\nYou'll have to get the access token for a bot or your own user. The easiest way to obtain it is to look into Riot looking\nin the riot settings, <code>Help &amp; About</code>, down the bottom is: <code>Access Token:&lt;click to reveal&gt;</code>. You also need to specify a\nroom alias to which messages are sent. To obtain the alias in Riot, create a room you want to use, then open the room\nsettings under <code>Room Addresses</code> and add an alias.</p>\n<h4>Python</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">lemiknow</span> <span class=\"kn\">import</span> <span class=\"n\">matrix_sender</span>\n\n<span class=\"n\">HOMESERVER</span> <span class=\"o\">=</span> <span class=\"s2\">\"&lt;url_to_your_home_server&gt;\"</span> <span class=\"c1\"># e.g. https://matrix.org</span>\n<span class=\"n\">TOKEN</span> <span class=\"o\">=</span> <span class=\"s2\">\"&lt;your_auth_token&gt;\"</span>              <span class=\"c1\"># e.g. WiTyGizlr8ntvBXdFfZLctyY</span>\n<span class=\"n\">ROOM</span> <span class=\"o\">=</span> <span class=\"s2\">\"&lt;room_alias\"</span>                     <span class=\"c1\"># e.g. #lemiknow:matrix.org</span>\n\n<span class=\"nd\">@matrix_sender</span><span class=\"p\">(</span><span class=\"n\">homeserver</span><span class=\"o\">=</span><span class=\"n\">HOMESERVER</span><span class=\"p\">,</span> <span class=\"n\">token</span><span class=\"o\">=</span><span class=\"n\">TOKEN</span><span class=\"p\">,</span> <span class=\"n\">room</span><span class=\"o\">=</span><span class=\"n\">ROOM</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">function_call</span><span class=\"p\">(</span><span class=\"n\">parameters</span><span class=\"p\">):</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">time</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"s2\">\"Success\"</span> <span class=\"c1\"># Optional return value</span>\n</pre>\n<h4>Command-line</h4>\n<pre>lemiknow matrix <span class=\"se\">\\</span>\n    --homeserver &lt;homeserver&gt; <span class=\"se\">\\</span>\n    --token &lt;token&gt; <span class=\"se\">\\</span>\n    --room &lt;room&gt; <span class=\"se\">\\</span>\n    sleep <span class=\"m\">10</span>\n</pre>\n<h2>The following options have not been tested and updated (but will in future versions)</h2>\n<h3>Microsoft Teams</h3>\n<p>Thanks to <a href=\"https://github.com/noklam\" rel=\"nofollow\">@noklam</a>, you can also use Microsoft Teams to get notifications. You'll have to get your Team Channel <a href=\"https://docs.microsoft.com/en-us/microsoftteams/platform/concepts/connectors/connectors-using\" rel=\"nofollow\">webhook URL</a>.</p>\n<h4>Python</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">lemiknow</span> <span class=\"kn\">import</span> <span class=\"n\">teams_sender</span>\n\n<span class=\"nd\">@teams_sender</span><span class=\"p\">(</span><span class=\"n\">token</span><span class=\"o\">=</span><span class=\"s2\">\"&lt;webhook_url_to_your_teams_channel&gt;\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">train_your_nicest_model</span><span class=\"p\">(</span><span class=\"n\">your_nicest_parameters</span><span class=\"p\">):</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">time</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'loss'</span><span class=\"p\">:</span> <span class=\"mf\">0.9</span><span class=\"p\">}</span> <span class=\"c1\"># Optional return value</span>\n</pre>\n<h4>Command-line</h4>\n<pre>lemiknow teams <span class=\"se\">\\</span>\n    --webhook-url &lt;webhook_url_to_your_teams_channel&gt; <span class=\"se\">\\</span>\n    sleep <span class=\"m\">10</span>\n</pre>\n<p>You can also specify an optional argument to tag specific people: <code>user_mentions=[&lt;your_teams_id&gt;, &lt;grandma's_teams_id&gt;]</code>.</p>\n<h3>Text Message (SMS)</h3>\n<p>Thanks to <a href=\"https://github.com/abhishekkrthakur\" rel=\"nofollow\">@abhishekkrthakur</a>, you can use Twilio to send text message notifications. You'll have to setup a <a href=\"www.twilio.com\" rel=\"nofollow\">Twilio</a> account <a href=\"https://www.twilio.com/try-twilio\" rel=\"nofollow\">here</a>, which is paid service with competitive prices: for instance in the US, getting a new number and sending one text message through this service respectively cost $1.00 and $0.0075. You'll need to get (a) a phone number, (b) your <a href=\"https://www.twilio.com/docs/glossary/what-is-a-sid\" rel=\"nofollow\">account SID</a> and (c) your <a href=\"https://www.twilio.com/docs/iam/access-tokens\" rel=\"nofollow\">authentification token</a>. Some detail <a href=\"https://www.twilio.com/docs/iam/api/account\" rel=\"nofollow\">here</a>.</p>\n<h4>Python</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">lemiknow</span> <span class=\"kn\">import</span> <span class=\"n\">sms_sender</span>\n\n<span class=\"n\">ACCOUNT_SID</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s2\">\"&lt;your_account_sid&gt;\"</span>\n<span class=\"n\">AUTH_TOKEN</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s2\">\"&lt;your_auth_token&gt;\"</span>\n<span class=\"nd\">@sms_sender</span><span class=\"p\">(</span><span class=\"n\">account_sid</span><span class=\"o\">=</span><span class=\"n\">ACCOUNT_SID</span><span class=\"p\">,</span> <span class=\"n\">auth_token</span><span class=\"o\">=</span><span class=\"n\">AUTH_TOKEN</span><span class=\"p\">,</span> <span class=\"n\">recipient_number</span><span class=\"o\">=</span><span class=\"s2\">\"&lt;recipient's_number&gt;\"</span><span class=\"p\">,</span> <span class=\"n\">sender_number</span><span class=\"o\">=</span><span class=\"s2\">\"&lt;sender's_number&gt;\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">train_your_nicest_model</span><span class=\"p\">(</span><span class=\"n\">your_nicest_parameters</span><span class=\"p\">):</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">time</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'loss'</span><span class=\"p\">:</span> <span class=\"mf\">0.9</span><span class=\"p\">}</span> <span class=\"c1\"># Optional return value</span>\n</pre>\n<h4>Command-line</h4>\n<pre>lemiknow sms <span class=\"se\">\\</span>\n    --account-sid &lt;your_account_sid&gt; <span class=\"se\">\\</span>\n    --auth-token &lt;your_account_auth_token&gt; <span class=\"se\">\\</span>\n    --recipient-number &lt;recipient_number&gt; <span class=\"se\">\\</span>\n    --sender-number &lt;sender_number&gt;\n    sleep <span class=\"m\">10</span>\n</pre>\n<h3>Desktop Notification</h3>\n<p>You can also get notified from a desktop notification. It is currently only available for MacOS.</p>\n<h4>Python</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">lemiknow</span> <span class=\"kn\">import</span> <span class=\"n\">desktop_sender</span>\n\n<span class=\"nd\">@desktop_sender</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s2\">\"lemiknow Desktop Notifier\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">train_your_nicest_model</span><span class=\"p\">(</span><span class=\"n\">your_nicest_parameters</span><span class=\"p\">):</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">time</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">10000</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s2\">\"loss\"</span><span class=\"p\">:</span> <span class=\"mf\">0.9</span><span class=\"p\">}</span>\n</pre>\n<h4>Command Line</h4>\n<pre>lemiknow desktop <span class=\"se\">\\</span>\n    --title <span class=\"s1\">'lemiknow Desktop Notifier'</span> <span class=\"se\">\\</span>\n    sleep <span class=\"m\">2</span>\n</pre>\n\n          </div>"}, "last_serial": 6623761, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "710d4851e4b0914fdea44983cc60b943", "sha256": "6ad63aa9719f84632c6e7c063866484781e64a93053bc0d0f1ce8f357ccb5e98"}, "downloads": -1, "filename": "lemiknow-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "710d4851e4b0914fdea44983cc60b943", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 19710, "upload_time": "2020-02-07T04:41:00", "upload_time_iso_8601": "2020-02-07T04:41:00.938444Z", "url": "https://files.pythonhosted.org/packages/2a/cc/a00693857e11c7a81b9a4f974c26c70b7707d4cdebfec81880bc0602427f/lemiknow-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d36a78a8913601c9740e0f7606ca94fd", "sha256": "35ed197ec41f03944f6dbb5780afa70ee2dfda14069d32c4e527e3228665262a"}, "downloads": -1, "filename": "lemiknow-0.0.1.tar.gz", "has_sig": false, "md5_digest": "d36a78a8913601c9740e0f7606ca94fd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10315, "upload_time": "2020-02-07T04:41:03", "upload_time_iso_8601": "2020-02-07T04:41:03.058822Z", "url": "https://files.pythonhosted.org/packages/20/78/ac525f905fcb49d84a933fb58d6791c94693b7dfb8329819f17cd042f886/lemiknow-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "abc9e41f9ba436096816d74491ec499c", "sha256": "ed42350f8e2d142531fb6f9a670c4ed1606c70ddd7e12cdb62d0b5bc04ad55b1"}, "downloads": -1, "filename": "lemiknow-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "abc9e41f9ba436096816d74491ec499c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 18772, "upload_time": "2020-02-07T17:11:08", "upload_time_iso_8601": "2020-02-07T17:11:08.747181Z", "url": "https://files.pythonhosted.org/packages/fe/47/9c5fe3e4dfc2a503aab0f5d6e55de365f92106292409248a36384769b8ca/lemiknow-0.0.2-py3-none-any.whl", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "fedb82aad3cf9c38fb4dbe34f0bf93cb", "sha256": "f5a52811fda36ac89ec857506eaa40df5d6b7107e2f4be412fe5a7863e319e07"}, "downloads": -1, "filename": "lemiknow-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "fedb82aad3cf9c38fb4dbe34f0bf93cb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 18908, "upload_time": "2020-02-07T17:19:52", "upload_time_iso_8601": "2020-02-07T17:19:52.428047Z", "url": "https://files.pythonhosted.org/packages/98/86/6ec03e0bb3a1ea341dcf538727460a0b4d08f304b0fbc5e9f1388223d0e2/lemiknow-0.0.3-py3-none-any.whl", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "81659f7fe78f1bc30dd6fd2b845aba97", "sha256": "538178ab9534be70d2233ac84da58344b2e41b504f746d6be19e91d8158c1489"}, "downloads": -1, "filename": "lemiknow-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "81659f7fe78f1bc30dd6fd2b845aba97", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 19160, "upload_time": "2020-02-07T19:05:14", "upload_time_iso_8601": "2020-02-07T19:05:14.890797Z", "url": "https://files.pythonhosted.org/packages/bf/21/4660f670c21fae7ce4f43fa4aee9dba9bc7b04fa4ed782dd3e6adbe5bd75/lemiknow-0.0.4-py3-none-any.whl", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "301855e1a65bb4a415716b07597f2ebd", "sha256": "2d02191ef6ba1268b5a00a7390651ddc9c1d0c5e171f21ffa6323ab398efc663"}, "downloads": -1, "filename": "lemiknow-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "301855e1a65bb4a415716b07597f2ebd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 19158, "upload_time": "2020-02-07T19:17:43", "upload_time_iso_8601": "2020-02-07T19:17:43.590805Z", "url": "https://files.pythonhosted.org/packages/46/70/901e7742795f5cdd7664f48451896666a83eb3e822b5cd85433e69f56d4e/lemiknow-0.0.5-py3-none-any.whl", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "ee76c08eba7c82d575ebcaf5e43bfba6", "sha256": "e5a442b8df8124786a42fe57a4ade61dfe5d34e3dc80ac10c95cfb7e09159065"}, "downloads": -1, "filename": "lemiknow-0.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "ee76c08eba7c82d575ebcaf5e43bfba6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 18866, "upload_time": "2020-02-07T19:48:15", "upload_time_iso_8601": "2020-02-07T19:48:15.934596Z", "url": "https://files.pythonhosted.org/packages/b0/87/4c63da0f1cb5fc2f4bf2aac36252f8f2c0a9cc8f0a94a511f8d1c8c32e46/lemiknow-0.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2c5f38b2fd372268c5850f28a3ff87ab", "sha256": "161d5f745c9992b13e78272aca5342aab4e49e415c85a3f9f9695316b284195f"}, "downloads": -1, "filename": "lemiknow-0.0.6.tar.gz", "has_sig": false, "md5_digest": "2c5f38b2fd372268c5850f28a3ff87ab", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10306, "upload_time": "2020-02-07T19:48:17", "upload_time_iso_8601": "2020-02-07T19:48:17.295577Z", "url": "https://files.pythonhosted.org/packages/d7/dd/910c2b557262ec2e6fadc1d0c44ca3f2ce7c8606388535fc390fbbcb0ec7/lemiknow-0.0.6.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "79594390f104c85bddc88a2b1788715f", "sha256": "3c92668b542c9e6df869025909c3b1905a794965faa0b5b396f8fe869ae3b0e7"}, "downloads": -1, "filename": "lemiknow-0.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "79594390f104c85bddc88a2b1788715f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 19358, "upload_time": "2020-02-07T20:47:17", "upload_time_iso_8601": "2020-02-07T20:47:17.376919Z", "url": "https://files.pythonhosted.org/packages/44/ae/57038077660333f87d2a2ac2fa68b1d91abefc15e544e45d9bda188447f4/lemiknow-0.0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3edda6ac5081c10ad5c946ac22d5b792", "sha256": "ab25476c3ab575f1b26b7e5b898c1e27562dbf73059203c8d98827757c593d8b"}, "downloads": -1, "filename": "lemiknow-0.0.7.tar.gz", "has_sig": false, "md5_digest": "3edda6ac5081c10ad5c946ac22d5b792", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10712, "upload_time": "2020-02-07T20:47:18", "upload_time_iso_8601": "2020-02-07T20:47:18.868211Z", "url": "https://files.pythonhosted.org/packages/be/98/ca98248668bc75cbea2f99a6348e0990e002135b1a8ae711b75ac54b9f04/lemiknow-0.0.7.tar.gz", "yanked": false}], "0.0.8": [{"comment_text": "", "digests": {"md5": "fdf9ec9200e71c78f3b1f9d07d6b01a9", "sha256": "68f3c2319e2092a65afaef78c5358e70d9d198b4d94658c87be709c0d3b73f16"}, "downloads": -1, "filename": "lemiknow-0.0.8-py3-none-any.whl", "has_sig": false, "md5_digest": "fdf9ec9200e71c78f3b1f9d07d6b01a9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 19086, "upload_time": "2020-02-07T21:31:43", "upload_time_iso_8601": "2020-02-07T21:31:43.104706Z", "url": "https://files.pythonhosted.org/packages/6a/1b/2d7f442b516611a43fabdb0e50fa4cedf0714ba4e504b3ca69bc7f762e6e/lemiknow-0.0.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4224dc11de67067ed3cf7bd518583b2c", "sha256": "6fae4d3dd5c75943ba62fe3bf92e3620f72d3828ad72124ce40a403580fdfd84"}, "downloads": -1, "filename": "lemiknow-0.0.8.tar.gz", "has_sig": false, "md5_digest": "4224dc11de67067ed3cf7bd518583b2c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10720, "upload_time": "2020-02-07T21:31:44", "upload_time_iso_8601": "2020-02-07T21:31:44.598785Z", "url": "https://files.pythonhosted.org/packages/a1/4f/df099a7b4dd1983b6e7a73d49d6a1598640a4e23bdb82be9f59ca92b1dd4/lemiknow-0.0.8.tar.gz", "yanked": false}], "0.0.9": [{"comment_text": "", "digests": {"md5": "92fcbf18f7911e817a8fc01df3d0df88", "sha256": "f52f2394ed5de3d249a492b6df2f10ebfe65597a0501873254dfff7104269259"}, "downloads": -1, "filename": "lemiknow-0.0.9-py3-none-any.whl", "has_sig": false, "md5_digest": "92fcbf18f7911e817a8fc01df3d0df88", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 19290, "upload_time": "2020-02-10T18:33:36", "upload_time_iso_8601": "2020-02-10T18:33:36.345504Z", "url": "https://files.pythonhosted.org/packages/3d/06/79a6dcee6fc5bec8dae3e7fafeff8c29db010941902b62055fe54556ff5a/lemiknow-0.0.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d4d2d1bb1de6b7d05566b79c438fafa0", "sha256": "ac2a23be7e6a7d142b7e388c0b1b0e49c374d6c071940b25022abed506a946c2"}, "downloads": -1, "filename": "lemiknow-0.0.9.tar.gz", "has_sig": false, "md5_digest": "d4d2d1bb1de6b7d05566b79c438fafa0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10792, "upload_time": "2020-02-10T18:33:37", "upload_time_iso_8601": "2020-02-10T18:33:37.878778Z", "url": "https://files.pythonhosted.org/packages/91/0d/e31b755a442f3c8c0117f916b97b355e30a95f6ece4d38f97cea0cacd512/lemiknow-0.0.9.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "d81d444001020005e86115f1bf5b3b01", "sha256": "58c8a6f9ff511929dc89626a0c7ee0800075fbb155d7b6256c55852e7312d122"}, "downloads": -1, "filename": "lemiknow-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "d81d444001020005e86115f1bf5b3b01", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 20834, "upload_time": "2020-02-13T14:31:55", "upload_time_iso_8601": "2020-02-13T14:31:55.831323Z", "url": "https://files.pythonhosted.org/packages/30/8e/d180d2697fc2b69dc9fed79abbe14ce326308eafa82899fb788f76d0c79e/lemiknow-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f83f77f3e798937bc7e505fcd4637e08", "sha256": "e916981217446790f82a0f2ce400fdb33022951722bc2673ef6bc161942bf428"}, "downloads": -1, "filename": "lemiknow-0.1.0.tar.gz", "has_sig": false, "md5_digest": "f83f77f3e798937bc7e505fcd4637e08", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 11376, "upload_time": "2020-02-13T14:32:02", "upload_time_iso_8601": "2020-02-13T14:32:02.447454Z", "url": "https://files.pythonhosted.org/packages/14/43/5aa41c5bc9d23c2b681f50cb9688519e30f81d09cdeea9ed185efa594e59/lemiknow-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d81d444001020005e86115f1bf5b3b01", "sha256": "58c8a6f9ff511929dc89626a0c7ee0800075fbb155d7b6256c55852e7312d122"}, "downloads": -1, "filename": "lemiknow-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "d81d444001020005e86115f1bf5b3b01", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 20834, "upload_time": "2020-02-13T14:31:55", "upload_time_iso_8601": "2020-02-13T14:31:55.831323Z", "url": "https://files.pythonhosted.org/packages/30/8e/d180d2697fc2b69dc9fed79abbe14ce326308eafa82899fb788f76d0c79e/lemiknow-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f83f77f3e798937bc7e505fcd4637e08", "sha256": "e916981217446790f82a0f2ce400fdb33022951722bc2673ef6bc161942bf428"}, "downloads": -1, "filename": "lemiknow-0.1.0.tar.gz", "has_sig": false, "md5_digest": "f83f77f3e798937bc7e505fcd4637e08", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 11376, "upload_time": "2020-02-13T14:32:02", "upload_time_iso_8601": "2020-02-13T14:32:02.447454Z", "url": "https://files.pythonhosted.org/packages/14/43/5aa41c5bc9d23c2b681f50cb9688519e30f81d09cdeea9ed185efa594e59/lemiknow-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:47:05 2020"}