{"info": {"author": "Maximilian Hindermann", "author_email": "maximilian.hindermann@unibas.ch", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# bartocsuggest\n\nA Python module that suggests vocabularies given a list of words based on the BARTOC FAST API (https://bartoc-fast.ub.unibas.ch/bartocfast/api).\n\n## Installation\n\n```\npip install bartocsuggest\n```\n\n## Example\n```\nfrom bartocsuggest import Session\n\nmywords = [\"auction\", \"market\", \"marketing\", \"market economy\", \"perfect competition\", \"capitalism\", \"stock market\"]\n\nsession = Session(mywords)\nsession.suggest(verbose=True)\n```\n\nThe output to the console should look something like this:\n\n```\n73 vocabularies given sensitivity 1. From best to worst (vocabularies with no matches are excluded):\npsh.ntkcz.cz, recall: 1.0\nvocabulary.worldbank.org, recall: 1.0\nzbw.eu, recall: 1.0\neurovoc.europa.eu, recall: 0.8571428571428571\nlod.gesis.org, recall: 0.8571428571428571\nwww.yso.fi/onto/yso, recall: 0.7142857142857143\nwww.yso.fi/onto/koko, recall: 0.7142857142857143\nwww.yso.fi/onto/liito, recall: 0.7142857142857143\ndata.bibliotheken.nl, recall: 0.7142857142857143\nlod.nal.usda.gov, recall: 0.7142857142857143\nwww.yso.fi/onto/juho, recall: 0.5714285714285714\ncrai.ub.edu, recall: 0.5714285714285714\nwww.twse.info, recall: 0.5714285714285714\nthesaurus.web.ined.fr, recall: 0.5714285714285714\naims.fao.org, recall: 0.5714285714285714\n...\n```\n\n## Preloading responses\nThe latency for a response from BARTOC FAST is about 5 seconds per word. Preloading responses is hence useful for dealing with long lists of words or for trying out different types of suggestions for a given list of words without having to resend each query.\n\n```\nfrom bartocsuggest import Session, Average\n\n# preload words:\nsession = Session(300_word_list, \"my/preload/folder\")\nsession.preload(0-99)\nsession.preload(100-199)\nsession.preload(200-299)\n\n# try out different suggestions:\nsuggestion1 = session.suggest(remote=False, verbose=True)\nsuggestion2 = session.suggest(remote=False, sensitivity=2, verbose=True)\nsuggestion3 = session.suggest(remote=False, score_type=\"Average\", verbose=True)\n```\n\n## Documentation\nDocumentation available at: https://readthedocs.org/projects/bartocsuggest/\n\n## License\nbartocsuggest is released under the MIT License.\n\n## Contact\nMaximilian Hindermann  \nmaximilian.hindermann@unibas.ch  \nhttps://orcid.org/0000-0002-9337-4655\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/MHindermann/bartocsuggest", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "bartocsuggest", "package_url": "https://pypi.org/project/bartocsuggest/", "platform": "", "project_url": "https://pypi.org/project/bartocsuggest/", "project_urls": {"Homepage": "https://github.com/MHindermann/bartocsuggest"}, "release_url": "https://pypi.org/project/bartocsuggest/0.0.2/", "requires_dist": ["urllib3", "requests", "python-Levenshtein-wheels", "openpyxl"], "requires_python": ">=3.7", "summary": "Vocabulary suggestion module based on BARTOC FAST", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>bartocsuggest</h1>\n<p>A Python module that suggests vocabularies given a list of words based on the BARTOC FAST API (<a href=\"https://bartoc-fast.ub.unibas.ch/bartocfast/api\" rel=\"nofollow\">https://bartoc-fast.ub.unibas.ch/bartocfast/api</a>).</p>\n<h2>Installation</h2>\n<pre><code>pip install bartocsuggest\n</code></pre>\n<h2>Example</h2>\n<pre><code>from bartocsuggest import Session\n\nmywords = [\"auction\", \"market\", \"marketing\", \"market economy\", \"perfect competition\", \"capitalism\", \"stock market\"]\n\nsession = Session(mywords)\nsession.suggest(verbose=True)\n</code></pre>\n<p>The output to the console should look something like this:</p>\n<pre><code>73 vocabularies given sensitivity 1. From best to worst (vocabularies with no matches are excluded):\npsh.ntkcz.cz, recall: 1.0\nvocabulary.worldbank.org, recall: 1.0\nzbw.eu, recall: 1.0\neurovoc.europa.eu, recall: 0.8571428571428571\nlod.gesis.org, recall: 0.8571428571428571\nwww.yso.fi/onto/yso, recall: 0.7142857142857143\nwww.yso.fi/onto/koko, recall: 0.7142857142857143\nwww.yso.fi/onto/liito, recall: 0.7142857142857143\ndata.bibliotheken.nl, recall: 0.7142857142857143\nlod.nal.usda.gov, recall: 0.7142857142857143\nwww.yso.fi/onto/juho, recall: 0.5714285714285714\ncrai.ub.edu, recall: 0.5714285714285714\nwww.twse.info, recall: 0.5714285714285714\nthesaurus.web.ined.fr, recall: 0.5714285714285714\naims.fao.org, recall: 0.5714285714285714\n...\n</code></pre>\n<h2>Preloading responses</h2>\n<p>The latency for a response from BARTOC FAST is about 5 seconds per word. Preloading responses is hence useful for dealing with long lists of words or for trying out different types of suggestions for a given list of words without having to resend each query.</p>\n<pre><code>from bartocsuggest import Session, Average\n\n# preload words:\nsession = Session(300_word_list, \"my/preload/folder\")\nsession.preload(0-99)\nsession.preload(100-199)\nsession.preload(200-299)\n\n# try out different suggestions:\nsuggestion1 = session.suggest(remote=False, verbose=True)\nsuggestion2 = session.suggest(remote=False, sensitivity=2, verbose=True)\nsuggestion3 = session.suggest(remote=False, score_type=\"Average\", verbose=True)\n</code></pre>\n<h2>Documentation</h2>\n<p>Documentation available at: <a href=\"https://readthedocs.org/projects/bartocsuggest/\" rel=\"nofollow\">https://readthedocs.org/projects/bartocsuggest/</a></p>\n<h2>License</h2>\n<p>bartocsuggest is released under the MIT License.</p>\n<h2>Contact</h2>\n<p>Maximilian Hindermann<br>\n<a href=\"mailto:maximilian.hindermann@unibas.ch\">maximilian.hindermann@unibas.ch</a><br>\n<a href=\"https://orcid.org/0000-0002-9337-4655\" rel=\"nofollow\">https://orcid.org/0000-0002-9337-4655</a></p>\n\n          </div>"}, "last_serial": 7171919, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "38eee24c452931bc4729726e581289ea", "sha256": "285c242d0661383bde5ef95db725ef2305f4e04e06871f7ff756f49f68de42d1"}, "downloads": -1, "filename": "bartocsuggest-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "38eee24c452931bc4729726e581289ea", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 8071, "upload_time": "2020-04-28T11:00:16", "upload_time_iso_8601": "2020-04-28T11:00:16.609988Z", "url": "https://files.pythonhosted.org/packages/9c/e6/d8f5aa7f5fb7184d5ac02bc07e5ed768b273c85e4f9e94e5c067f92fa451/bartocsuggest-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "55e7ec9ec9701185d8c58be68222bd88", "sha256": "1fd8348e18d66cc0af22725c04534976dd2cc18774d492271bb77f15fd25975b"}, "downloads": -1, "filename": "bartocsuggest-0.0.1.tar.gz", "has_sig": false, "md5_digest": "55e7ec9ec9701185d8c58be68222bd88", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 6855, "upload_time": "2020-04-28T11:00:18", "upload_time_iso_8601": "2020-04-28T11:00:18.640952Z", "url": "https://files.pythonhosted.org/packages/01/84/cb32333e67f73fac598e6b4a006978f99ef0ff2a45f13ef817652ad09f8c/bartocsuggest-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "33350743da77a184577190341c0ebb14", "sha256": "035712f8a0e2e35d8dddbde281023f99be4cfac8574118ca30f895660c753254"}, "downloads": -1, "filename": "bartocsuggest-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "33350743da77a184577190341c0ebb14", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 9824, "upload_time": "2020-05-05T13:15:35", "upload_time_iso_8601": "2020-05-05T13:15:35.103911Z", "url": "https://files.pythonhosted.org/packages/94/7c/58016fefea47ca7693ee1f753ca0401c7ed8fa1ecd54373c09250ed36c94/bartocsuggest-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "608500797a924de8f8d2bf87d257af42", "sha256": "2126cab63ff5e2376421303d352a5e46c63c69b86eac8c550d4bc45c785fc960"}, "downloads": -1, "filename": "bartocsuggest-0.0.2.tar.gz", "has_sig": false, "md5_digest": "608500797a924de8f8d2bf87d257af42", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 9654, "upload_time": "2020-05-05T13:15:36", "upload_time_iso_8601": "2020-05-05T13:15:36.162454Z", "url": "https://files.pythonhosted.org/packages/84/e9/4fe2253402448f6f22739a2f5539501499e41a0daff20d7f1711d8862d6a/bartocsuggest-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "33350743da77a184577190341c0ebb14", "sha256": "035712f8a0e2e35d8dddbde281023f99be4cfac8574118ca30f895660c753254"}, "downloads": -1, "filename": "bartocsuggest-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "33350743da77a184577190341c0ebb14", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 9824, "upload_time": "2020-05-05T13:15:35", "upload_time_iso_8601": "2020-05-05T13:15:35.103911Z", "url": "https://files.pythonhosted.org/packages/94/7c/58016fefea47ca7693ee1f753ca0401c7ed8fa1ecd54373c09250ed36c94/bartocsuggest-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "608500797a924de8f8d2bf87d257af42", "sha256": "2126cab63ff5e2376421303d352a5e46c63c69b86eac8c550d4bc45c785fc960"}, "downloads": -1, "filename": "bartocsuggest-0.0.2.tar.gz", "has_sig": false, "md5_digest": "608500797a924de8f8d2bf87d257af42", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 9654, "upload_time": "2020-05-05T13:15:36", "upload_time_iso_8601": "2020-05-05T13:15:36.162454Z", "url": "https://files.pythonhosted.org/packages/84/e9/4fe2253402448f6f22739a2f5539501499e41a0daff20d7f1711d8862d6a/bartocsuggest-0.0.2.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:14:51 2020"}