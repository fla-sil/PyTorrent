{"info": {"author": "", "author_email": "scaramallion@users.noreply.github.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "Intended Audience :: Healthcare Industry", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Scientific/Engineering :: Medical Science Apps.", "Topic :: Software Development :: Libraries"], "description": ".. class:: center\n.. image:: https://codecov.io/gh/pydicom/pynetdicom/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/pydicom/pynetdicom\n.. image:: https://travis-ci.org/pydicom/pynetdicom.svg?branch=master\n    :target: https://travis-ci.org/pydicom/pynetdicom\n.. image:: https://circleci.com/gh/pydicom/pynetdicom/tree/master.svg?style=shield\n    :target: https://circleci.com/gh/pydicom/pynetdicom/tree/master\n.. image:: https://badge.fury.io/py/pynetdicom.svg\n    :target: https://badge.fury.io/py/pynetdicom\n.. image:: https://img.shields.io/pypi/pyversions/pynetdicom.svg\n    :target: https://img.shields.io/pypi/pyversions/pynetdicom.svg\n.. image:: https://zenodo.org/badge/DOI/10.5281/zenodo.2638736.svg\n    :target: https://doi.org/10.5281/zenodo.2638736\n.. image:: https://badges.gitter.im/pydicom.png\n    :target: https://gitter.im/pydicom/Lobby\n\n\npynetdicom\n==========\n\nA Python implementation of the `DICOM <http://dicom.nema.org>`_\nnetworking protocol, originally based on (legacy)\n`pynetdicom <https://github.com/patmun/pynetdicom_legacy>`_.\n\n\nDescription\n-----------\n\n`DICOM <http://dicom.nema.org>`_ is the international standard for medical\nimages and related information. It defines the formats and communication\nprotocols for media exchange in radiology, cardiology, radiotherapy and other\nmedical domains.\n\n*pynetdicom* is a pure Python (2.7/3.4+) package that implements the DICOM\nnetworking protocol. Working with `pydicom <https://github.com/pydicom/pydicom>`_,\nit allows the easy creation of DICOM *Service Class Users* (SCUs) and\n*Service Class Providers* (SCPs).\n\nThe main user class is ``AE``, which is used to represent a DICOM Application\nEntity. Once an ``AE`` has been created you would typically either:\n\n- Start the application as an SCP by specifying the presentation contexts that\n  you will support, then calling ``AE.start_server((host, port))`` and waiting\n  for incoming association requests\n- Use the application as an SCU by specifying the presentation contexts you\n  want the peer SCP to support, then requesting an association\n  via the ``AE.associate(host, port)`` method, which returns an ``Association``\n  thread.\n\nOnce the application is associated with a peer AE, DICOM data can be sent between\nthem by utilising the DIMSE-C and -N services (see the DICOM Standard Part 7,\nSections `7.5 <http://dicom.nema.org/medical/dicom/current/output/html/part07.html#sect_7.5>`_,\n`9 <http://dicom.nema.org/medical/dicom/current/output/html/part07.html#chapter_9>`_,\nand `10 <http://dicom.nema.org/medical/dicom/current/output/html/part07.html#chapter_10>`_).\n\n\nSupported Service Classes\n~~~~~~~~~~~~~~~~~~~~~~~~~\n*pynetdicom* supports the following DICOM service classes:\n\n- `Application Event Logging Service Class <http://dicom.nema.org/medical/dicom/current/output/html/part04.html#chapter_P>`_\n- `Basic Worklist Management Service Class <http://dicom.nema.org/medical/dicom/current/output/html/part04.html#chapter_K>`_\n- `Color Palette Query/Retrieve Service Class <http://dicom.nema.org/medical/dicom/current/output/html/part04.html#chapter_X>`_\n- `Defined Procedure Protocol Query/Retrieve Service Class <http://dicom.nema.org/medical/dicom/current/output/html/part04.html#chapter_HH>`_\n- `Display System Management Service Class <http://dicom.nema.org/medical/dicom/current/output/html/part04.html#chapter_EE>`_\n- `Hanging Protocol Query/Retrieve Service Class <http://dicom.nema.org/medical/dicom/current/output/html/part04.html#chapter_U>`_\n- `Implant Template Query/Retrieve Service Class <http://dicom.nema.org/medical/dicom/current/output/html/part04.html#chapter_BB>`_\n- `Instance Availability Notification Service Class <http://dicom.nema.org/medical/dicom/current/output/html/part04.html#chapter_R>`_\n- `Media Creation Management Service Class <http://dicom.nema.org/medical/dicom/current/output/html/part04.html#chapter_S>`_\n- `Modality Performed Procedure Step Management <http://dicom.nema.org/medical/dicom/current/output/html/part04.html#chapter_F>`_\n- `Non-Patient Object Storage Service Class <http://dicom.nema.org/medical/dicom/current/output/html/part04.html#chapter_GG>`_\n- `Print Management Service Class <http://dicom.nema.org/medical/dicom/current/output/html/part04.html#chapter_H>`_\n- `Protocol Approval Query/Retrieve Service Class <http://dicom.nema.org/medical/dicom/current/output/html/part04.html#chapter_II>`_\n- `Query/Retrieve Service Class <http://dicom.nema.org/medical/dicom/current/output/html/part04.html#chapter_C>`_\n\n  - `Composite Instance Retrieve Without Bulk Data <http://dicom.nema.org/medical/dicom/current/output/html/part04.html#chapter_Z>`_\n  - `Instance and Frame Level Retrieve <http://dicom.nema.org/medical/dicom/current/output/html/part04.html#chapter_Y>`_\n- `Relevant Patient Information Query Service Class <http://dicom.nema.org/medical/dicom/current/output/html/part04.html#chapter_Q>`_\n- `RT Machine Verification Service Class <http://dicom.nema.org/medical/dicom/current/output/html/part04.html#chapter_DD>`_\n- `Storage Service Class <http://dicom.nema.org/medical/dicom/current/output/html/part04.html#chapter_B>`_\n\n  - `Ophthalmic Refractive Measurements Storage <http://dicom.nema.org/medical/dicom/current/output/html/part04.html#chapter_AA>`_\n  - `Softcopy Presentation State Storage <http://dicom.nema.org/medical/dicom/current/output/html/part04.html#chapter_N>`_\n  - `Structured Reporting Storage <http://dicom.nema.org/medical/dicom/current/output/html/part04.html#chapter_O>`_\n  - `Volumetric Presentation State Storage <http://dicom.nema.org/medical/dicom/current/output/html/part04.html#chapter_FF>`_\n- `Storage Commitment Service Class <http://dicom.nema.org/medical/dicom/current/output/html/part04.html#chapter_J>`_\n- `Substance Administration Query Service Class <http://dicom.nema.org/medical/dicom/current/output/html/part04.html#chapter_V>`_\n- `Unified Procedure Step Service Class <http://dicom.nema.org/medical/dicom/current/output/html/part04.html#chapter_CC>`_\n- `Verification Service Class <http://dicom.nema.org/medical/dicom/current/output/html/part04.html#chapter_A>`_\n\n\nSupported DIMSE SCU Services\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nWhen the AE is acting as an SCU and an association has been established with a\npeer SCP, the following DIMSE-C and -N services are available (provided the\npeer supports the Service Class and a corresponding Presentation Context has\nbeen accepted):\n\n.. _send_c_echo: https:pydicom.github.io/pynetdicom/stable/reference/generated/pynetdicom.association.Association.html#pynetdicom.association.Association.send_c_echo\n.. _send_c_find: https:pydicom.github.io/pynetdicom/stable/reference/generated/pynetdicom.association.Association.html#pynetdicom.association.Association.send_c_find\n.. _send_c_get: https:pydicom.github.io/pynetdicom/stable/reference/generated/pynetdicom.association.Association.html#pynetdicom.association.Association.send_c_get\n.. _send_c_move: https:pydicom.github.io/pynetdicom/stable/reference/generated/pynetdicom.association.Association.html#pynetdicom.association.Association.send_c_move\n.. _send_c_store: https:pydicom.github.io/pynetdicom/stable/reference/generated/pynetdicom.association.Association.html#pynetdicom.association.Association.send_c_store\n.. _send_n_action: https:pydicom.github.io/pynetdicom/stable/reference/generated/pynetdicom.association.Association.html#pynetdicom.association.Association.send_n_action\n.. _send_n_create: https:pydicom.github.io/pynetdicom/stable/reference/generated/pynetdicom.association.Association.html#pynetdicom.association.Association.send_n_create\n.. _send_n_delete: https:pydicom.github.io/pynetdicom/stable/reference/generated/pynetdicom.association.Association.html#pynetdicom.association.Association.send_n_delete\n.. _send_n_event_report: https:pydicom.github.io/pynetdicom/stable/reference/generated/pynetdicom.association.Association.html#pynetdicom.association.Association.send_n_event_report\n.. _send_n_get: https:pydicom.github.io/pynetdicom/stable/reference/generated/pynetdicom.association.Association.html#pynetdicom.association.Association.send_n_get\n.. _send_n_set: https:pydicom.github.io/pynetdicom/stable/reference/generated/pynetdicom.association.Association.html#pynetdicom.association.Association.send_n_set\n\n+----------------+----------------------------------------------------------+\n| DIMSE service  | ``Association`` method                                   |\n+================+==========================================================+\n| C-ECHO         | ``send_c_echo()``                                        |\n|                |                                                          |\n+----------------+----------------------------------------------------------+\n| C-FIND         | ``send_c_find(dataset, query_model)``                    |\n|                |                                                          |\n+----------------+----------------------------------------------------------+\n| C-GET          | ``send_c_get(dataset, query_model)``                     |\n|                |                                                          |\n+----------------+----------------------------------------------------------+\n| C-MOVE         | ``send_c_move(dataset, move_aet, query_model)``          |\n|                |                                                          |\n+----------------+----------------------------------------------------------+\n| C-STORE        | ``send_c_store(dataset)``                                |\n|                |                                                          |\n+----------------+----------------------------------------------------------+\n| N-ACTION       | ``send_n_action(dataset, action_type, class_uid,         |\n|                | instance_uid)``                                          |\n+----------------+----------------------------------------------------------+\n| N-CREATE       | ``send_n_create(dataset, class_uid, instance_uid)``      |\n|                |                                                          |\n+----------------+----------------------------------------------------------+\n| N-DELETE       | ``send_n_delete(class_uid, instance_uid)``               |\n|                |                                                          |\n+----------------+----------------------------------------------------------+\n| N-EVENT-REPORT | ``send_n_event_report(dataset, event_type,               |\n|                | class_uid, instance_uid)``                               |\n+----------------+----------------------------------------------------------+\n| N-GET          | ``send_n_get(identifier_list, class_uid, instance_uid)`` |\n|                |                                                          |\n+----------------+----------------------------------------------------------+\n| N-SET          | ``send_n_set(dataset, class_uid, instance_uid)``         |\n|                |                                                          |\n+----------------+----------------------------------------------------------+\n\nWhere *dataset* is a pydicom\n`Dataset <https://pydicom.github.io/pydicom/stable/ref_guide.html#dataset>`_\nobject, *query_model* is a UID string, *identifier_list* is a list of pydicom\n`Tag <https://pydicom.github.io/pydicom/stable/api_ref.html#pydicom.tag.Tag>`_\nobjects, *event_type* and *action_type* are ints and *class_uid* and\n*instance_uid* are UID strings. See the\n`Association documentation <https://pydicom.github.io/pynetdicom/stable/reference/generated/pynetdicom.association.Association.html>`_\nfor more information.\n\n\nSupported DIMSE SCP Services\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nWhen the AE is acting as an SCP the following DIMSE-C and -N services are\navailable to the peer once an association has been established:\n\n.. _handle_echo: https://pydicom.github.io/pynetdicom/stable/reference/generated/pynetdicom._handlers.doc_handle_echo.html\n.. _handle_find: https://pydicom.github.io/pynetdicom/stable/reference/generated/pynetdicom._handlers.doc_handle_find.html\n.. _handle_c_get: https://pydicom.github.io/pynetdicom/stable/reference/generated/pynetdicom._handlers.doc_handle_c_get.html\n.. _handle_move: https://pydicom.github.io/pynetdicom/stable/reference/generated/pynetdicom._handlers.doc_handle_move.html\n.. _handle_store: https://pydicom.github.io/pynetdicom/stable/reference/generated/pynetdicom._handlers.doc_handle_store.html\n.. _handle_action: https://pydicom.github.io/pynetdicom/stable/reference/generated/pynetdicom._handlers.doc_handle_action.html\n.. _handle_create: https://pydicom.github.io/pynetdicom/stable/reference/generated/pynetdicom._handlers.doc_handle_create.html\n.. _handle_delete: https://pydicom.github.io/pynetdicom/stable/reference/generated/pynetdicom._handlers.doc_handle_delete.html\n.. _handle_event_report: https://pydicom.github.io/pynetdicom/stable/reference/generated/pynetdicom._handlers.doc_handle_event_report.html\n.. _handle_n_get: https://pydicom.github.io/pynetdicom/stable/reference/generated/pynetdicom._handlers.doc_handle_n_get.html\n.. _handle_set: https://pydicom.github.io/pynetdicom/stable/reference/generated/pynetdicom._handlers.doc_handle_set.html\n\n+----------------+----------------------------+\n| DIMSE service  | Intervention Event         |\n+================+============================+\n| C-ECHO         | ``evt.EVT_C_ECHO``         |\n+----------------+----------------------------+\n| C-FIND         | ``evt.EVT_C_FIND``         |\n+----------------+----------------------------+\n| C-GET          | ``evt.EVT_C_GET``          |\n+----------------+----------------------------+\n| C-MOVE         | ``evt.EVT_C_MOVE``         |\n+----------------+----------------------------+\n| C-STORE        | ``evt.EVT_C_STORE``        |\n+----------------+----------------------------+\n| N-ACTION       | ``evt.EVT_N_ACTION``       |\n+----------------+----------------------------+\n| N-CREATE       | ``evt.EVT_N_CREATE``       |\n+----------------+----------------------------+\n| N-DELETE       | ``evt.EVT_N_DELETE``       |\n+----------------+----------------------------+\n| N-EVENT-REPORT | ``evt.EVT_N_EVENT_REPORT`` |\n+----------------+----------------------------+\n| N-GET          | ``evt.EVT_N_GET``          |\n+----------------+----------------------------+\n| N-SET          | ``evt.EVT_N_SET``          |\n+----------------+----------------------------+\n\n\nWith the exception of the C-ECHO service, a user-defined callable function,\n*handler*, must be bound to the corresponding\n`intervention event <https://pydicom.github.io/pynetdicom/stable/user/events#intervention-events>`_\nin order to complete a DIMSE service request. Events\ncan be imported with ``from pynetdicom import evt`` and a handler can be\nbound to an event prior to starting an association through the *evt_handlers*\nkeyword arguments in ``AE.start_server()`` and ``AE.associate()``.\n\nWhen an event occurs the *handler* function is called and passed a single\nparameter, *event*, which is an ``evt.Event`` object whose specific attributes\nare dependent on the type of event that occurred. Handlers bound to\nintervention events must  return or yield certain values. See the\n`handler documentation <https://pydicom.github.io/pynetdicom/stable/reference/events>`_\nfor information on what attributes and properties are available in ``Event``\nfor each event type and the expected returns/yields for the\ncorresponding handlers.\n\n\nDocumentation\n-------------\nThe *pynetdicom*\n`user guide <https://pydicom.github.io/pynetdicom/stable/#user-guide>`_,\n`code examples <https://pydicom.github.io/pynetdicom/stable/#examples>`_ and\n`API reference <https://pydicom.github.io/pynetdicom/stable/reference/index.html>`_\ndocumentation is available for the\n`current release <https://pydicom.github.io/pynetdicom/>`_ as well as the\n`development version <https://pydicom.github.io/pynetdicom/dev>`_.\n\n\nInstallation\n------------\nDependencies\n~~~~~~~~~~~~\n`pydicom <https://github.com/pydicom/pydicom>`_\n\nInstalling current release\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n.. code-block:: sh\n\n        $ pip install pynetdicom\n\nInstalling development version\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n.. code-block:: sh\n\n        $ pip install git+git://github.com/pydicom/pynetdicom.git\n\nExamples\n--------\nSend a DICOM C-ECHO to a peer Verification SCP (at TCP/IP address *addr*,\nlisten port number *port*):\n\n.. code-block:: python\n\n        from pynetdicom import AE\n\n        ae = AE(ae_title=b'MY_ECHO_SCU')\n        # Verification SOP Class has a UID of 1.2.840.10008.1.1\n        #   we can use the UID string directly when requesting the presentation\n        #   contexts we want to use in the association\n        ae.add_requested_context('1.2.840.10008.1.1')\n\n        # Associate with a peer DICOM AE\n        assoc = ae.associate(addr, port)\n\n        if assoc.is_established:\n            # Send a DIMSE C-ECHO request to the peer\n            # `status` is a pydicom Dataset object with (at a minimum) a\n            #   (0000,0900) Status element\n            # If the peer hasn't accepted the requested context then this\n            #   will raise a RuntimeError exception\n            status = assoc.send_c_echo()\n\n            # Output the response from the peer\n            if status:\n                print('C-ECHO Response: 0x{0:04x}'.format(status.Status))\n\n            # Release the association\n            assoc.release()\n\nCreate a blocking DICOM C-ECHO listen SCP on port 11112 (you may optionally\nbind a handler to the ``evt.EVT_C_ECHO`` event if you want to return something\nother than a *Success* status):\n\n.. code-block:: python\n\n        from pynetdicom import AE, VerificationPresentationContexts\n\n        ae = AE(ae_title=b'MY_ECHO_SCP')\n        # Or we can use the inbuilt VerificationPresentationContexts list,\n        #   there's one for each of the supported Service Classes\n        # In this case, we are supporting any requests to use Verification SOP\n        #   Class in the association\n        ae.supported_contexts = VerificationPresentationContexts\n\n        # Start the SCP on (host, port) in blocking mode\n        ae.start_server(('', 11112), block=True)\n\nAlternatively, you can start the SCP in non-blocking mode, which returns the\nrunning server instance. This can be useful when you want to run a Storage SCP\nand make C-MOVE requests within the same AE. In the next example we'll create a\nnon-blocking Verification SCP and bind a handler for the C-ECHO service\nrequest event ``evt.EVT_C_ECHO`` that logs the requestor's address and port\nnumber and the timestamp for the event.\n\n.. code-block:: python\n\n        import logging\n\n        from pynetdicom import AE, evt, VerificationPresentationContexts, debug_logger\n\n        # Setup logging to use the StreamHandler at the debug level\n        debug_logger()\n        LOGGER = logging.getLogger('pynetdicom')\n\n        ae = AE(ae_title=b'MY_ECHO_SCP')\n        ae.supported_contexts = VerificationPresentationContexts\n\n        # Implement the EVT_C_ECHO handler\n        def handle_echo(event):\n            \"\"\"Handle a C-ECHO service request.\n\n            Parameters\n            ----------\n            event : evt.Event\n                The C-ECHO service request event.\n\n            Returns\n            -------\n            int or pydicom.dataset.Dataset\n                The status returned to the peer AE in the C-ECHO response.\n                Must be a valid C-ECHO status value as either an ``int`` or a\n                ``Dataset`` object containing an (0000,0900) *Status* element.\n            \"\"\"\n            # Every *Event* includes `assoc` and `timestamp` attributes\n            #   which are the *Association* instance the event occurred in\n            #   and the *datetime.datetime* the event occurred at\n            requestor = event.assoc.requestor\n            timestamp = event.timestamp.strftime(\"%Y-%m-%d %H:%M:%S\")\n            msg = (\n                \"Received C-ECHO service request from ({}, {}) at {}\"\n                .format(requestor.address, requestor.port, timestamp)\n            )\n            LOGGER.info(msg)\n\n            # Return a *Success* status\n            return 0x0000\n\n        handlers = [(evt.EVT_C_ECHO, handle_echo)]\n\n        # Start the SCP in non-blocking mode\n        scp = ae.start_server(('', 11112), block=False, evt_handlers=handlers)\n\n        # Send a C-ECHO request to our own Verification SCP\n        ae.add_requested_context('1.2.840.10008.1.1')\n        assoc = ae.associate('localhost', 11112)\n        if assoc.is_established:\n            status = assoc.send_c_echo()\n            assoc.release()\n\n        # Shutdown the SCP\n        scp.shutdown()\n\n\nSend the DICOM *CT Image Storage* dataset in *file-in.dcm* to a peer Storage\nSCP (at TCP/IP address *addr*, listen port number *port*):\n\n.. code-block:: python\n\n        from pydicom import dcmread\n        from pydicom.uid import ImplicitVRLittleEndian\n\n        from pynetdicom import AE, VerificationPresentationContexts\n        from pynetdicom.sop_class import CTImageStorage, MRImageStorage\n\n        ae = AE(ae_title=b'MY_STORAGE_SCU')\n        # We can also do the same thing with the requested contexts\n        ae.requested_contexts = VerificationPresentationContexts\n        # Or we can use inbuilt objects like CTImageStorage.\n        # The requested presentation context's transfer syntaxes can also\n        #   be specified using a str/UID or list of str/UIDs\n        ae.add_requested_context(CTImageStorage,\n                                 transfer_syntax=ImplicitVRLittleEndian)\n        # Adding a presentation context with multiple transfer syntaxes\n        ae.add_requested_context(MRImageStorage,\n                                 transfer_syntax=[ImplicitVRLittleEndian,\n                                                  '1.2.840.10008.1.2.1'])\n\n        assoc = ae.associate(addr, port)\n        if assoc.is_established:\n            dataset = dcmread('file-in.dcm')\n            # `status` is the response from the peer to the store request\n            # but may be an empty pydicom Dataset if the peer timed out or\n            # sent an invalid dataset.\n            status = assoc.send_c_store(dataset)\n\n            assoc.release()\n\n\n", "description_content_type": "", "docs_url": "https://pythonhosted.org/pynetdicom/", "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/pydicom/pynetdicom", "keywords": "dicom python medicalimaging radiotherapy oncology pydicom imaging", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pynetdicom", "package_url": "https://pypi.org/project/pynetdicom/", "platform": "", "project_url": "https://pypi.org/project/pynetdicom/", "project_urls": {"Documentation": "https://pydicom.github.io/pynetdicom/", "Homepage": "https://github.com/pydicom/pynetdicom"}, "release_url": "https://pypi.org/project/pynetdicom/1.4.1/", "requires_dist": ["pydicom (>=1.2.1)"], "requires_python": "", "summary": "A Python implementation of the DICOM networking protocol", "version": "1.4.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://codecov.io/gh/pydicom/pynetdicom\" rel=\"nofollow\"><img alt=\"https://codecov.io/gh/pydicom/pynetdicom/branch/master/graph/badge.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/387286c34d9156a95a2fcaa0f037859b52d19013/68747470733a2f2f636f6465636f762e696f2f67682f70796469636f6d2f70796e65746469636f6d2f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://travis-ci.org/pydicom/pynetdicom\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/pydicom/pynetdicom.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1beeee774ec5793954eed41ded4dee0a794bbc23/68747470733a2f2f7472617669732d63692e6f72672f70796469636f6d2f70796e65746469636f6d2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://circleci.com/gh/pydicom/pynetdicom/tree/master\" rel=\"nofollow\"><img alt=\"https://circleci.com/gh/pydicom/pynetdicom/tree/master.svg?style=shield\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/06c373ea3d84e4ff2d4b7e4c7d5fa529da3f22ce/68747470733a2f2f636972636c6563692e636f6d2f67682f70796469636f6d2f70796e65746469636f6d2f747265652f6d61737465722e7376673f7374796c653d736869656c64\"></a>\n<a href=\"https://badge.fury.io/py/pynetdicom\" rel=\"nofollow\"><img alt=\"https://badge.fury.io/py/pynetdicom.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e801ad0dad9bd9921f86b3c7a8827d23e5c04092/68747470733a2f2f62616467652e667572792e696f2f70792f70796e65746469636f6d2e737667\"></a>\n<a href=\"https://img.shields.io/pypi/pyversions/pynetdicom.svg\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/pyversions/pynetdicom.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a29046ce5e6e6576d0926c47ee1b3449a75bab69/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f70796e65746469636f6d2e737667\"></a>\n<a href=\"https://doi.org/10.5281/zenodo.2638736\" rel=\"nofollow\"><img alt=\"https://zenodo.org/badge/DOI/10.5281/zenodo.2638736.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d9b187dfafdf188199f5c408eea9c96c45e37f5f/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f444f492f31302e353238312f7a656e6f646f2e323633383733362e737667\"></a>\n<a href=\"https://gitter.im/pydicom/Lobby\" rel=\"nofollow\"><img alt=\"https://badges.gitter.im/pydicom.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bd386c1689b8b33d3a0bfc74453ebb1f46e51d76/68747470733a2f2f6261646765732e6769747465722e696d2f70796469636f6d2e706e67\"></a>\n<div id=\"pynetdicom\">\n<h2>pynetdicom</h2>\n<p>A Python implementation of the <a href=\"http://dicom.nema.org\" rel=\"nofollow\">DICOM</a>\nnetworking protocol, originally based on (legacy)\n<a href=\"https://github.com/patmun/pynetdicom_legacy\" rel=\"nofollow\">pynetdicom</a>.</p>\n<div id=\"description\">\n<h3>Description</h3>\n<p><a href=\"http://dicom.nema.org\" rel=\"nofollow\">DICOM</a> is the international standard for medical\nimages and related information. It defines the formats and communication\nprotocols for media exchange in radiology, cardiology, radiotherapy and other\nmedical domains.</p>\n<p><em>pynetdicom</em> is a pure Python (2.7/3.4+) package that implements the DICOM\nnetworking protocol. Working with <a href=\"https://github.com/pydicom/pydicom\" rel=\"nofollow\">pydicom</a>,\nit allows the easy creation of DICOM <em>Service Class Users</em> (SCUs) and\n<em>Service Class Providers</em> (SCPs).</p>\n<p>The main user class is <tt>AE</tt>, which is used to represent a DICOM Application\nEntity. Once an <tt>AE</tt> has been created you would typically either:</p>\n<ul>\n<li>Start the application as an SCP by specifying the presentation contexts that\nyou will support, then calling <tt><span class=\"pre\">AE.start_server((host,</span> port))</tt> and waiting\nfor incoming association requests</li>\n<li>Use the application as an SCU by specifying the presentation contexts you\nwant the peer SCP to support, then requesting an association\nvia the <tt>AE.associate(host, port)</tt> method, which returns an <tt>Association</tt>\nthread.</li>\n</ul>\n<p>Once the application is associated with a peer AE, DICOM data can be sent between\nthem by utilising the DIMSE-C and -N services (see the DICOM Standard Part 7,\nSections <a href=\"http://dicom.nema.org/medical/dicom/current/output/html/part07.html#sect_7.5\" rel=\"nofollow\">7.5</a>,\n<a href=\"http://dicom.nema.org/medical/dicom/current/output/html/part07.html#chapter_9\" rel=\"nofollow\">9</a>,\nand <a href=\"http://dicom.nema.org/medical/dicom/current/output/html/part07.html#chapter_10\" rel=\"nofollow\">10</a>).</p>\n<div id=\"supported-service-classes\">\n<h4>Supported Service Classes</h4>\n<p><em>pynetdicom</em> supports the following DICOM service classes:</p>\n<ul>\n<li><a href=\"http://dicom.nema.org/medical/dicom/current/output/html/part04.html#chapter_P\" rel=\"nofollow\">Application Event Logging Service Class</a></li>\n<li><a href=\"http://dicom.nema.org/medical/dicom/current/output/html/part04.html#chapter_K\" rel=\"nofollow\">Basic Worklist Management Service Class</a></li>\n<li><a href=\"http://dicom.nema.org/medical/dicom/current/output/html/part04.html#chapter_X\" rel=\"nofollow\">Color Palette Query/Retrieve Service Class</a></li>\n<li><a href=\"http://dicom.nema.org/medical/dicom/current/output/html/part04.html#chapter_HH\" rel=\"nofollow\">Defined Procedure Protocol Query/Retrieve Service Class</a></li>\n<li><a href=\"http://dicom.nema.org/medical/dicom/current/output/html/part04.html#chapter_EE\" rel=\"nofollow\">Display System Management Service Class</a></li>\n<li><a href=\"http://dicom.nema.org/medical/dicom/current/output/html/part04.html#chapter_U\" rel=\"nofollow\">Hanging Protocol Query/Retrieve Service Class</a></li>\n<li><a href=\"http://dicom.nema.org/medical/dicom/current/output/html/part04.html#chapter_BB\" rel=\"nofollow\">Implant Template Query/Retrieve Service Class</a></li>\n<li><a href=\"http://dicom.nema.org/medical/dicom/current/output/html/part04.html#chapter_R\" rel=\"nofollow\">Instance Availability Notification Service Class</a></li>\n<li><a href=\"http://dicom.nema.org/medical/dicom/current/output/html/part04.html#chapter_S\" rel=\"nofollow\">Media Creation Management Service Class</a></li>\n<li><a href=\"http://dicom.nema.org/medical/dicom/current/output/html/part04.html#chapter_F\" rel=\"nofollow\">Modality Performed Procedure Step Management</a></li>\n<li><a href=\"http://dicom.nema.org/medical/dicom/current/output/html/part04.html#chapter_GG\" rel=\"nofollow\">Non-Patient Object Storage Service Class</a></li>\n<li><a href=\"http://dicom.nema.org/medical/dicom/current/output/html/part04.html#chapter_H\" rel=\"nofollow\">Print Management Service Class</a></li>\n<li><a href=\"http://dicom.nema.org/medical/dicom/current/output/html/part04.html#chapter_II\" rel=\"nofollow\">Protocol Approval Query/Retrieve Service Class</a></li>\n<li><a href=\"http://dicom.nema.org/medical/dicom/current/output/html/part04.html#chapter_C\" rel=\"nofollow\">Query/Retrieve Service Class</a><ul>\n<li><a href=\"http://dicom.nema.org/medical/dicom/current/output/html/part04.html#chapter_Z\" rel=\"nofollow\">Composite Instance Retrieve Without Bulk Data</a></li>\n<li><a href=\"http://dicom.nema.org/medical/dicom/current/output/html/part04.html#chapter_Y\" rel=\"nofollow\">Instance and Frame Level Retrieve</a></li>\n</ul>\n</li>\n<li><a href=\"http://dicom.nema.org/medical/dicom/current/output/html/part04.html#chapter_Q\" rel=\"nofollow\">Relevant Patient Information Query Service Class</a></li>\n<li><a href=\"http://dicom.nema.org/medical/dicom/current/output/html/part04.html#chapter_DD\" rel=\"nofollow\">RT Machine Verification Service Class</a></li>\n<li><a href=\"http://dicom.nema.org/medical/dicom/current/output/html/part04.html#chapter_B\" rel=\"nofollow\">Storage Service Class</a><ul>\n<li><a href=\"http://dicom.nema.org/medical/dicom/current/output/html/part04.html#chapter_AA\" rel=\"nofollow\">Ophthalmic Refractive Measurements Storage</a></li>\n<li><a href=\"http://dicom.nema.org/medical/dicom/current/output/html/part04.html#chapter_N\" rel=\"nofollow\">Softcopy Presentation State Storage</a></li>\n<li><a href=\"http://dicom.nema.org/medical/dicom/current/output/html/part04.html#chapter_O\" rel=\"nofollow\">Structured Reporting Storage</a></li>\n<li><a href=\"http://dicom.nema.org/medical/dicom/current/output/html/part04.html#chapter_FF\" rel=\"nofollow\">Volumetric Presentation State Storage</a></li>\n</ul>\n</li>\n<li><a href=\"http://dicom.nema.org/medical/dicom/current/output/html/part04.html#chapter_J\" rel=\"nofollow\">Storage Commitment Service Class</a></li>\n<li><a href=\"http://dicom.nema.org/medical/dicom/current/output/html/part04.html#chapter_V\" rel=\"nofollow\">Substance Administration Query Service Class</a></li>\n<li><a href=\"http://dicom.nema.org/medical/dicom/current/output/html/part04.html#chapter_CC\" rel=\"nofollow\">Unified Procedure Step Service Class</a></li>\n<li><a href=\"http://dicom.nema.org/medical/dicom/current/output/html/part04.html#chapter_A\" rel=\"nofollow\">Verification Service Class</a></li>\n</ul>\n</div>\n<div id=\"supported-dimse-scu-services\">\n<h4>Supported DIMSE SCU Services</h4>\n<p>When the AE is acting as an SCU and an association has been established with a\npeer SCP, the following DIMSE-C and -N services are available (provided the\npeer supports the Service Class and a corresponding Presentation Context has\nbeen accepted):</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>DIMSE service</th>\n<th><tt>Association</tt> method</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>C-ECHO</td>\n<td><tt>send_c_echo()</tt></td>\n</tr>\n<tr><td>C-FIND</td>\n<td><tt>send_c_find(dataset, query_model)</tt></td>\n</tr>\n<tr><td>C-GET</td>\n<td><tt>send_c_get(dataset, query_model)</tt></td>\n</tr>\n<tr><td>C-MOVE</td>\n<td><tt>send_c_move(dataset, move_aet, query_model)</tt></td>\n</tr>\n<tr><td>C-STORE</td>\n<td><tt>send_c_store(dataset)</tt></td>\n</tr>\n<tr><td>N-ACTION</td>\n<td><tt>send_n_action(dataset, action_type, class_uid,\ninstance_uid)</tt></td>\n</tr>\n<tr><td>N-CREATE</td>\n<td><tt>send_n_create(dataset, class_uid, instance_uid)</tt></td>\n</tr>\n<tr><td>N-DELETE</td>\n<td><tt>send_n_delete(class_uid, instance_uid)</tt></td>\n</tr>\n<tr><td>N-EVENT-REPORT</td>\n<td><tt>send_n_event_report(dataset, event_type,\nclass_uid, instance_uid)</tt></td>\n</tr>\n<tr><td>N-GET</td>\n<td><tt>send_n_get(identifier_list, class_uid, instance_uid)</tt></td>\n</tr>\n<tr><td>N-SET</td>\n<td><tt>send_n_set(dataset, class_uid, instance_uid)</tt></td>\n</tr>\n</tbody>\n</table>\n<p>Where <em>dataset</em> is a pydicom\n<a href=\"https://pydicom.github.io/pydicom/stable/ref_guide.html#dataset\" rel=\"nofollow\">Dataset</a>\nobject, <em>query_model</em> is a UID string, <em>identifier_list</em> is a list of pydicom\n<a href=\"https://pydicom.github.io/pydicom/stable/api_ref.html#pydicom.tag.Tag\" rel=\"nofollow\">Tag</a>\nobjects, <em>event_type</em> and <em>action_type</em> are ints and <em>class_uid</em> and\n<em>instance_uid</em> are UID strings. See the\n<a href=\"https://pydicom.github.io/pynetdicom/stable/reference/generated/pynetdicom.association.Association.html\" rel=\"nofollow\">Association documentation</a>\nfor more information.</p>\n</div>\n<div id=\"supported-dimse-scp-services\">\n<h4>Supported DIMSE SCP Services</h4>\n<p>When the AE is acting as an SCP the following DIMSE-C and -N services are\navailable to the peer once an association has been established:</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>DIMSE service</th>\n<th>Intervention Event</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>C-ECHO</td>\n<td><tt>evt.EVT_C_ECHO</tt></td>\n</tr>\n<tr><td>C-FIND</td>\n<td><tt>evt.EVT_C_FIND</tt></td>\n</tr>\n<tr><td>C-GET</td>\n<td><tt>evt.EVT_C_GET</tt></td>\n</tr>\n<tr><td>C-MOVE</td>\n<td><tt>evt.EVT_C_MOVE</tt></td>\n</tr>\n<tr><td>C-STORE</td>\n<td><tt>evt.EVT_C_STORE</tt></td>\n</tr>\n<tr><td>N-ACTION</td>\n<td><tt>evt.EVT_N_ACTION</tt></td>\n</tr>\n<tr><td>N-CREATE</td>\n<td><tt>evt.EVT_N_CREATE</tt></td>\n</tr>\n<tr><td>N-DELETE</td>\n<td><tt>evt.EVT_N_DELETE</tt></td>\n</tr>\n<tr><td>N-EVENT-REPORT</td>\n<td><tt>evt.EVT_N_EVENT_REPORT</tt></td>\n</tr>\n<tr><td>N-GET</td>\n<td><tt>evt.EVT_N_GET</tt></td>\n</tr>\n<tr><td>N-SET</td>\n<td><tt>evt.EVT_N_SET</tt></td>\n</tr>\n</tbody>\n</table>\n<p>With the exception of the C-ECHO service, a user-defined callable function,\n<em>handler</em>, must be bound to the corresponding\n<a href=\"https://pydicom.github.io/pynetdicom/stable/user/events#intervention-events\" rel=\"nofollow\">intervention event</a>\nin order to complete a DIMSE service request. Events\ncan be imported with <tt>from pynetdicom import evt</tt> and a handler can be\nbound to an event prior to starting an association through the <em>evt_handlers</em>\nkeyword arguments in <tt>AE.start_server()</tt> and <tt>AE.associate()</tt>.</p>\n<p>When an event occurs the <em>handler</em> function is called and passed a single\nparameter, <em>event</em>, which is an <tt>evt.Event</tt> object whose specific attributes\nare dependent on the type of event that occurred. Handlers bound to\nintervention events must  return or yield certain values. See the\n<a href=\"https://pydicom.github.io/pynetdicom/stable/reference/events\" rel=\"nofollow\">handler documentation</a>\nfor information on what attributes and properties are available in <tt>Event</tt>\nfor each event type and the expected returns/yields for the\ncorresponding handlers.</p>\n</div>\n</div>\n<div id=\"documentation\">\n<h3>Documentation</h3>\n<p>The <em>pynetdicom</em>\n<a href=\"https://pydicom.github.io/pynetdicom/stable/#user-guide\" rel=\"nofollow\">user guide</a>,\n<a href=\"https://pydicom.github.io/pynetdicom/stable/#examples\" rel=\"nofollow\">code examples</a> and\n<a href=\"https://pydicom.github.io/pynetdicom/stable/reference/index.html\" rel=\"nofollow\">API reference</a>\ndocumentation is available for the\n<a href=\"https://pydicom.github.io/pynetdicom/\" rel=\"nofollow\">current release</a> as well as the\n<a href=\"https://pydicom.github.io/pynetdicom/dev\" rel=\"nofollow\">development version</a>.</p>\n</div>\n<div id=\"installation\">\n<h3>Installation</h3>\n<div id=\"dependencies\">\n<h4>Dependencies</h4>\n<p><a href=\"https://github.com/pydicom/pydicom\" rel=\"nofollow\">pydicom</a></p>\n</div>\n<div id=\"installing-current-release\">\n<h4>Installing current release</h4>\n<pre>$ pip install pynetdicom\n</pre>\n</div>\n<div id=\"installing-development-version\">\n<h4>Installing development version</h4>\n<pre>$ pip install git+git://github.com/pydicom/pynetdicom.git\n</pre>\n</div>\n</div>\n<div id=\"examples\">\n<h3>Examples</h3>\n<p>Send a DICOM C-ECHO to a peer Verification SCP (at TCP/IP address <em>addr</em>,\nlisten port number <em>port</em>):</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pynetdicom</span> <span class=\"kn\">import</span> <span class=\"n\">AE</span>\n\n<span class=\"n\">ae</span> <span class=\"o\">=</span> <span class=\"n\">AE</span><span class=\"p\">(</span><span class=\"n\">ae_title</span><span class=\"o\">=</span><span class=\"sa\">b</span><span class=\"s1\">'MY_ECHO_SCU'</span><span class=\"p\">)</span>\n<span class=\"c1\"># Verification SOP Class has a UID of 1.2.840.10008.1.1</span>\n<span class=\"c1\">#   we can use the UID string directly when requesting the presentation</span>\n<span class=\"c1\">#   contexts we want to use in the association</span>\n<span class=\"n\">ae</span><span class=\"o\">.</span><span class=\"n\">add_requested_context</span><span class=\"p\">(</span><span class=\"s1\">'1.2.840.10008.1.1'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Associate with a peer DICOM AE</span>\n<span class=\"n\">assoc</span> <span class=\"o\">=</span> <span class=\"n\">ae</span><span class=\"o\">.</span><span class=\"n\">associate</span><span class=\"p\">(</span><span class=\"n\">addr</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"n\">assoc</span><span class=\"o\">.</span><span class=\"n\">is_established</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Send a DIMSE C-ECHO request to the peer</span>\n    <span class=\"c1\"># `status` is a pydicom Dataset object with (at a minimum) a</span>\n    <span class=\"c1\">#   (0000,0900) Status element</span>\n    <span class=\"c1\"># If the peer hasn't accepted the requested context then this</span>\n    <span class=\"c1\">#   will raise a RuntimeError exception</span>\n    <span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"n\">assoc</span><span class=\"o\">.</span><span class=\"n\">send_c_echo</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># Output the response from the peer</span>\n    <span class=\"k\">if</span> <span class=\"n\">status</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'C-ECHO Response: 0x</span><span class=\"si\">{0:04x}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"o\">.</span><span class=\"n\">Status</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># Release the association</span>\n    <span class=\"n\">assoc</span><span class=\"o\">.</span><span class=\"n\">release</span><span class=\"p\">()</span>\n</pre>\n<p>Create a blocking DICOM C-ECHO listen SCP on port 11112 (you may optionally\nbind a handler to the <tt>evt.EVT_C_ECHO</tt> event if you want to return something\nother than a <em>Success</em> status):</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pynetdicom</span> <span class=\"kn\">import</span> <span class=\"n\">AE</span><span class=\"p\">,</span> <span class=\"n\">VerificationPresentationContexts</span>\n\n<span class=\"n\">ae</span> <span class=\"o\">=</span> <span class=\"n\">AE</span><span class=\"p\">(</span><span class=\"n\">ae_title</span><span class=\"o\">=</span><span class=\"sa\">b</span><span class=\"s1\">'MY_ECHO_SCP'</span><span class=\"p\">)</span>\n<span class=\"c1\"># Or we can use the inbuilt VerificationPresentationContexts list,</span>\n<span class=\"c1\">#   there's one for each of the supported Service Classes</span>\n<span class=\"c1\"># In this case, we are supporting any requests to use Verification SOP</span>\n<span class=\"c1\">#   Class in the association</span>\n<span class=\"n\">ae</span><span class=\"o\">.</span><span class=\"n\">supported_contexts</span> <span class=\"o\">=</span> <span class=\"n\">VerificationPresentationContexts</span>\n\n<span class=\"c1\"># Start the SCP on (host, port) in blocking mode</span>\n<span class=\"n\">ae</span><span class=\"o\">.</span><span class=\"n\">start_server</span><span class=\"p\">((</span><span class=\"s1\">''</span><span class=\"p\">,</span> <span class=\"mi\">11112</span><span class=\"p\">),</span> <span class=\"n\">block</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>Alternatively, you can start the SCP in non-blocking mode, which returns the\nrunning server instance. This can be useful when you want to run a Storage SCP\nand make C-MOVE requests within the same AE. In the next example we\u2019ll create a\nnon-blocking Verification SCP and bind a handler for the C-ECHO service\nrequest event <tt>evt.EVT_C_ECHO</tt> that logs the requestor\u2019s address and port\nnumber and the timestamp for the event.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">pynetdicom</span> <span class=\"kn\">import</span> <span class=\"n\">AE</span><span class=\"p\">,</span> <span class=\"n\">evt</span><span class=\"p\">,</span> <span class=\"n\">VerificationPresentationContexts</span><span class=\"p\">,</span> <span class=\"n\">debug_logger</span>\n\n<span class=\"c1\"># Setup logging to use the StreamHandler at the debug level</span>\n<span class=\"n\">debug_logger</span><span class=\"p\">()</span>\n<span class=\"n\">LOGGER</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"s1\">'pynetdicom'</span><span class=\"p\">)</span>\n\n<span class=\"n\">ae</span> <span class=\"o\">=</span> <span class=\"n\">AE</span><span class=\"p\">(</span><span class=\"n\">ae_title</span><span class=\"o\">=</span><span class=\"sa\">b</span><span class=\"s1\">'MY_ECHO_SCP'</span><span class=\"p\">)</span>\n<span class=\"n\">ae</span><span class=\"o\">.</span><span class=\"n\">supported_contexts</span> <span class=\"o\">=</span> <span class=\"n\">VerificationPresentationContexts</span>\n\n<span class=\"c1\"># Implement the EVT_C_ECHO handler</span>\n<span class=\"k\">def</span> <span class=\"nf\">handle_echo</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Handle a C-ECHO service request.\n\n    Parameters\n    ----------\n    event : evt.Event\n        The C-ECHO service request event.\n\n    Returns\n    -------\n    int or pydicom.dataset.Dataset\n        The status returned to the peer AE in the C-ECHO response.\n        Must be a valid C-ECHO status value as either an ``int`` or a\n        ``Dataset`` object containing an (0000,0900) *Status* element.\n    \"\"\"</span>\n    <span class=\"c1\"># Every *Event* includes `assoc` and `timestamp` attributes</span>\n    <span class=\"c1\">#   which are the *Association* instance the event occurred in</span>\n    <span class=\"c1\">#   and the *datetime.datetime* the event occurred at</span>\n    <span class=\"n\">requestor</span> <span class=\"o\">=</span> <span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">assoc</span><span class=\"o\">.</span><span class=\"n\">requestor</span>\n    <span class=\"n\">timestamp</span> <span class=\"o\">=</span> <span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">timestamp</span><span class=\"o\">.</span><span class=\"n\">strftime</span><span class=\"p\">(</span><span class=\"s2\">\"%Y-%m-</span><span class=\"si\">%d</span><span class=\"s2\"> %H:%M:%S\"</span><span class=\"p\">)</span>\n    <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n        <span class=\"s2\">\"Received C-ECHO service request from (</span><span class=\"si\">{}</span><span class=\"s2\">, </span><span class=\"si\">{}</span><span class=\"s2\">) at </span><span class=\"si\">{}</span><span class=\"s2\">\"</span>\n        <span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">requestor</span><span class=\"o\">.</span><span class=\"n\">address</span><span class=\"p\">,</span> <span class=\"n\">requestor</span><span class=\"o\">.</span><span class=\"n\">port</span><span class=\"p\">,</span> <span class=\"n\">timestamp</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">LOGGER</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Return a *Success* status</span>\n    <span class=\"k\">return</span> <span class=\"mh\">0x0000</span>\n\n<span class=\"n\">handlers</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"n\">evt</span><span class=\"o\">.</span><span class=\"n\">EVT_C_ECHO</span><span class=\"p\">,</span> <span class=\"n\">handle_echo</span><span class=\"p\">)]</span>\n\n<span class=\"c1\"># Start the SCP in non-blocking mode</span>\n<span class=\"n\">scp</span> <span class=\"o\">=</span> <span class=\"n\">ae</span><span class=\"o\">.</span><span class=\"n\">start_server</span><span class=\"p\">((</span><span class=\"s1\">''</span><span class=\"p\">,</span> <span class=\"mi\">11112</span><span class=\"p\">),</span> <span class=\"n\">block</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">evt_handlers</span><span class=\"o\">=</span><span class=\"n\">handlers</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Send a C-ECHO request to our own Verification SCP</span>\n<span class=\"n\">ae</span><span class=\"o\">.</span><span class=\"n\">add_requested_context</span><span class=\"p\">(</span><span class=\"s1\">'1.2.840.10008.1.1'</span><span class=\"p\">)</span>\n<span class=\"n\">assoc</span> <span class=\"o\">=</span> <span class=\"n\">ae</span><span class=\"o\">.</span><span class=\"n\">associate</span><span class=\"p\">(</span><span class=\"s1\">'localhost'</span><span class=\"p\">,</span> <span class=\"mi\">11112</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"n\">assoc</span><span class=\"o\">.</span><span class=\"n\">is_established</span><span class=\"p\">:</span>\n    <span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"n\">assoc</span><span class=\"o\">.</span><span class=\"n\">send_c_echo</span><span class=\"p\">()</span>\n    <span class=\"n\">assoc</span><span class=\"o\">.</span><span class=\"n\">release</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Shutdown the SCP</span>\n<span class=\"n\">scp</span><span class=\"o\">.</span><span class=\"n\">shutdown</span><span class=\"p\">()</span>\n</pre>\n<p>Send the DICOM <em>CT Image Storage</em> dataset in <em>file-in.dcm</em> to a peer Storage\nSCP (at TCP/IP address <em>addr</em>, listen port number <em>port</em>):</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pydicom</span> <span class=\"kn\">import</span> <span class=\"n\">dcmread</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pydicom.uid</span> <span class=\"kn\">import</span> <span class=\"n\">ImplicitVRLittleEndian</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">pynetdicom</span> <span class=\"kn\">import</span> <span class=\"n\">AE</span><span class=\"p\">,</span> <span class=\"n\">VerificationPresentationContexts</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pynetdicom.sop_class</span> <span class=\"kn\">import</span> <span class=\"n\">CTImageStorage</span><span class=\"p\">,</span> <span class=\"n\">MRImageStorage</span>\n\n<span class=\"n\">ae</span> <span class=\"o\">=</span> <span class=\"n\">AE</span><span class=\"p\">(</span><span class=\"n\">ae_title</span><span class=\"o\">=</span><span class=\"sa\">b</span><span class=\"s1\">'MY_STORAGE_SCU'</span><span class=\"p\">)</span>\n<span class=\"c1\"># We can also do the same thing with the requested contexts</span>\n<span class=\"n\">ae</span><span class=\"o\">.</span><span class=\"n\">requested_contexts</span> <span class=\"o\">=</span> <span class=\"n\">VerificationPresentationContexts</span>\n<span class=\"c1\"># Or we can use inbuilt objects like CTImageStorage.</span>\n<span class=\"c1\"># The requested presentation context's transfer syntaxes can also</span>\n<span class=\"c1\">#   be specified using a str/UID or list of str/UIDs</span>\n<span class=\"n\">ae</span><span class=\"o\">.</span><span class=\"n\">add_requested_context</span><span class=\"p\">(</span><span class=\"n\">CTImageStorage</span><span class=\"p\">,</span>\n                         <span class=\"n\">transfer_syntax</span><span class=\"o\">=</span><span class=\"n\">ImplicitVRLittleEndian</span><span class=\"p\">)</span>\n<span class=\"c1\"># Adding a presentation context with multiple transfer syntaxes</span>\n<span class=\"n\">ae</span><span class=\"o\">.</span><span class=\"n\">add_requested_context</span><span class=\"p\">(</span><span class=\"n\">MRImageStorage</span><span class=\"p\">,</span>\n                         <span class=\"n\">transfer_syntax</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">ImplicitVRLittleEndian</span><span class=\"p\">,</span>\n                                          <span class=\"s1\">'1.2.840.10008.1.2.1'</span><span class=\"p\">])</span>\n\n<span class=\"n\">assoc</span> <span class=\"o\">=</span> <span class=\"n\">ae</span><span class=\"o\">.</span><span class=\"n\">associate</span><span class=\"p\">(</span><span class=\"n\">addr</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"n\">assoc</span><span class=\"o\">.</span><span class=\"n\">is_established</span><span class=\"p\">:</span>\n    <span class=\"n\">dataset</span> <span class=\"o\">=</span> <span class=\"n\">dcmread</span><span class=\"p\">(</span><span class=\"s1\">'file-in.dcm'</span><span class=\"p\">)</span>\n    <span class=\"c1\"># `status` is the response from the peer to the store request</span>\n    <span class=\"c1\"># but may be an empty pydicom Dataset if the peer timed out or</span>\n    <span class=\"c1\"># sent an invalid dataset.</span>\n    <span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"n\">assoc</span><span class=\"o\">.</span><span class=\"n\">send_c_store</span><span class=\"p\">(</span><span class=\"n\">dataset</span><span class=\"p\">)</span>\n\n    <span class=\"n\">assoc</span><span class=\"o\">.</span><span class=\"n\">release</span><span class=\"p\">()</span>\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 5566460, "releases": {"0.8.0": [{"comment_text": "", "digests": {"md5": "411870df03c23b7be1b06cd754af7aef", "sha256": "6b6c720c1ba9445078514fd7f84ce8ab3958b97e25606aa2066cb7a3ef562b64"}, "downloads": -1, "filename": "pynetdicom-0.8.0.tar.gz", "has_sig": false, "md5_digest": "411870df03c23b7be1b06cd754af7aef", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37820, "upload_time": "2012-04-22T01:18:19", "upload_time_iso_8601": "2012-04-22T01:18:19.716744Z", "url": "https://files.pythonhosted.org/packages/e5/52/c2cf16702cd6d635cc94635a1b9ad19d073bea9156ddb0372963c798a74e/pynetdicom-0.8.0.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "b21a55ab9f575363bb61cf9c0c866403", "sha256": "a20e37d63d9cbf46e96a8132babe97969c7d7446ecde11e06350df35a71ce5f6"}, "downloads": -1, "filename": "pynetdicom-0.8.0.win32.exe", "has_sig": false, "md5_digest": "b21a55ab9f575363bb61cf9c0c866403", "packagetype": "bdist_wininst", "python_version": "any", "requires_python": null, "size": 255490, "upload_time": "2012-04-22T01:18:37", "upload_time_iso_8601": "2012-04-22T01:18:37.968273Z", "url": "https://files.pythonhosted.org/packages/07/06/d168bdee98846cac46e4ceb62abc0ea6b60c1291a5cc3c1d1c9d20fa3fac/pynetdicom-0.8.0.win32.exe", "yanked": false}, {"comment_text": "", "digests": {"md5": "16693b6233fcfe7f5b69656689d4f06a", "sha256": "351c0080ff31df74505d81205989a6d2012eb5946d6797103ef56898946dc55c"}, "downloads": -1, "filename": "pynetdicom-0.8.0.zip", "has_sig": false, "md5_digest": "16693b6233fcfe7f5b69656689d4f06a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 56425, "upload_time": "2012-04-22T01:18:21", "upload_time_iso_8601": "2012-04-22T01:18:21.278279Z", "url": "https://files.pythonhosted.org/packages/56/47/8852d07f5670ac20ad9556276a5717ae5658faddd2d0dcb36031fc5103b7/pynetdicom-0.8.0.zip", "yanked": false}], "0.8.1": [{"comment_text": "", "digests": {"md5": "a4564d452b56707e86f2ba04dcd60a93", "sha256": "1efdb74e910cf4693f9dcc1e66ffa6b12f7081980ce813f8763780c6780eb6c7"}, "downloads": -1, "filename": "pynetdicom-0.8.1.tar.gz", "has_sig": false, "md5_digest": "a4564d452b56707e86f2ba04dcd60a93", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38095, "upload_time": "2014-01-10T02:46:49", "upload_time_iso_8601": "2014-01-10T02:46:49.238558Z", "url": "https://files.pythonhosted.org/packages/af/11/b5385db3a8d26e51b2bd5aab7528acaf19b4d5fa03938a492e4eba6048ec/pynetdicom-0.8.1.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "1bb36733371614a9811506f935268ae1", "sha256": "cb665485c92f045798cec348943862e4e82e525c36571bb74fff1da185d9e59b"}, "downloads": -1, "filename": "pynetdicom-0.8.1.win32.exe", "has_sig": false, "md5_digest": "1bb36733371614a9811506f935268ae1", "packagetype": "bdist_wininst", "python_version": "any", "requires_python": null, "size": 245877, "upload_time": "2014-01-10T03:16:06", "upload_time_iso_8601": "2014-01-10T03:16:06.381084Z", "url": "https://files.pythonhosted.org/packages/84/48/412cec48bfe71a6dc753806c1417690900efe06339ae6136e2769abd2277/pynetdicom-0.8.1.win32.exe", "yanked": false}, {"comment_text": "", "digests": {"md5": "a0ac3520d30bfda071be61e670c01c9c", "sha256": "9d6d285c47340a4a92c690c711ec46bf71909c30305bf2635bd2c8b091dd77d4"}, "downloads": -1, "filename": "pynetdicom-0.8.1.zip", "has_sig": false, "md5_digest": "a0ac3520d30bfda071be61e670c01c9c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 57628, "upload_time": "2014-01-10T02:59:51", "upload_time_iso_8601": "2014-01-10T02:59:51.752820Z", "url": "https://files.pythonhosted.org/packages/f3/3e/3f992f0fde1eea33ebd81432a0bae8da96ef9783b9ac1e9d83dee98d4edf/pynetdicom-0.8.1.zip", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "4f4c63e67585b8fffde22450745e4b63", "sha256": "eb60e99988ded008377042c26d74b110a233937f4c4c9a66b0838d519e1f47cb"}, "downloads": -1, "filename": "pynetdicom-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4f4c63e67585b8fffde22450745e4b63", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 275222, "upload_time": "2018-12-30T00:30:25", "upload_time_iso_8601": "2018-12-30T00:30:25.013465Z", "url": "https://files.pythonhosted.org/packages/6e/f4/43ce9d38e393e880bfe377563331efff5e0e683d14409790b8d90025d7e7/pynetdicom-1.0.0-py2.py3-none-any.whl", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "64305c687ff4c2b93e878de3b369bb8f", "sha256": "9d8d6ae956c0f1534db07ce5289a7d4c3c412683e2fde2ee479f6a9adfce7205"}, "downloads": -1, "filename": "pynetdicom-1.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "64305c687ff4c2b93e878de3b369bb8f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 299155, "upload_time": "2019-01-09T07:09:48", "upload_time_iso_8601": "2019-01-09T07:09:48.507244Z", "url": "https://files.pythonhosted.org/packages/0e/5c/2b56326087a5c88997fb6e0db846f02fcca0d3eeb2e27cf88f435e139160/pynetdicom-1.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e524fc70160e8d693a25af0e81711ead", "sha256": "f974aa07348f95d30421155cd1841929313e9483fefd304d7d13ddee08d29f2c"}, "downloads": -1, "filename": "pynetdicom-1.1.0.tar.gz", "has_sig": false, "md5_digest": "e524fc70160e8d693a25af0e81711ead", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 266716, "upload_time": "2019-01-09T07:09:52", "upload_time_iso_8601": "2019-01-09T07:09:52.214286Z", "url": "https://files.pythonhosted.org/packages/9d/6a/539843aab58b54525e87cd8afb3f94bc407f9dbf9af5c826c9935cf6f837/pynetdicom-1.1.0.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "f9cb18f8a0fcc97ac43fe1bd4a6d740f", "sha256": "d1ff0d6db311d9dd8004b548b6905dc8366d67c7741e99e3b0c8f2ab0597bdf0"}, "downloads": -1, "filename": "pynetdicom-1.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f9cb18f8a0fcc97ac43fe1bd4a6d740f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 1447535, "upload_time": "2019-02-15T11:12:45", "upload_time_iso_8601": "2019-02-15T11:12:45.054844Z", "url": "https://files.pythonhosted.org/packages/2e/be/6834543b63cbec3c4aa3f458d749e7fec0d9adba2e7b9135963a2a37b569/pynetdicom-1.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "680601a8cc3b69334b3e0376e0120f5d", "sha256": "49f73d1bc5c68e45049f8bd0492ef35f8bbd6b1a2c61c531e660a68599b872c3"}, "downloads": -1, "filename": "pynetdicom-1.2.0.tar.gz", "has_sig": false, "md5_digest": "680601a8cc3b69334b3e0376e0120f5d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1403231, "upload_time": "2019-02-15T11:12:50", "upload_time_iso_8601": "2019-02-15T11:12:50.054151Z", "url": "https://files.pythonhosted.org/packages/f0/38/c3623989a0a2014a2def05761ba7c4ffdb75f7e199148472726618dd4d69/pynetdicom-1.2.0.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "dd58812251bb7536f2c903680a192c66", "sha256": "9973ddead1b5f02823bfb849d2ecc7c32c1bc82d7a14a2436ed247bd757b7226"}, "downloads": -1, "filename": "pynetdicom-1.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "dd58812251bb7536f2c903680a192c66", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 1502877, "upload_time": "2019-04-13T09:46:35", "upload_time_iso_8601": "2019-04-13T09:46:35.677326Z", "url": "https://files.pythonhosted.org/packages/fb/80/df02a63eab952446aa03e54f1ff8cd51ef6175e93c943a8d1cd10e13d6c3/pynetdicom-1.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "82746ffbb5e2722acf7b914cf0906f43", "sha256": "16191b8f613db50b7821c6c11f15307022a8ebfd8c2ecee5118bc5009afeee19"}, "downloads": -1, "filename": "pynetdicom-1.3.0.tar.gz", "has_sig": false, "md5_digest": "82746ffbb5e2722acf7b914cf0906f43", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1450362, "upload_time": "2019-04-13T09:46:39", "upload_time_iso_8601": "2019-04-13T09:46:39.565070Z", "url": "https://files.pythonhosted.org/packages/07/95/0191efcc09ddf4c02614cf9f71bf5517e11bcf62e8b59f61c62d53f84023/pynetdicom-1.3.0.tar.gz", "yanked": false}], "1.3.1": [{"comment_text": "", "digests": {"md5": "d8e2bd26c067322ecda144a89491c432", "sha256": "65749cec5a877c8bac5958e70e66cd4c4fa96f40b743c485f82afe87b98c8123"}, "downloads": -1, "filename": "pynetdicom-1.3.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d8e2bd26c067322ecda144a89491c432", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 1503585, "upload_time": "2019-04-22T09:50:32", "upload_time_iso_8601": "2019-04-22T09:50:32.747752Z", "url": "https://files.pythonhosted.org/packages/9c/97/88c97af3278b6ebc4f932c33d2560478e1af70fe3b7271e6a4a6ccca638c/pynetdicom-1.3.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7d1db06f582186a41756858c19937518", "sha256": "3f40a54c668e7f88b70f5a331c00dc74221b87916563e02f1d62178555b592d4"}, "downloads": -1, "filename": "pynetdicom-1.3.1.tar.gz", "has_sig": false, "md5_digest": "7d1db06f582186a41756858c19937518", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1450968, "upload_time": "2019-04-22T09:50:37", "upload_time_iso_8601": "2019-04-22T09:50:37.918188Z", "url": "https://files.pythonhosted.org/packages/e8/6c/7585b31f6c626350364df143291473d3bfd51ad65ceecde7564024997dd7/pynetdicom-1.3.1.tar.gz", "yanked": false}], "1.4.0": [{"comment_text": "", "digests": {"md5": "8646b8b1ce908d24d689d1552a5d0511", "sha256": "62ce9224e19af7791bdaf8c91be7b5146604b5747c0a908bcac39b76181e0d3e"}, "downloads": -1, "filename": "pynetdicom-1.4.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8646b8b1ce908d24d689d1552a5d0511", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 1486875, "upload_time": "2019-07-17T05:26:27", "upload_time_iso_8601": "2019-07-17T05:26:27.523433Z", "url": "https://files.pythonhosted.org/packages/86/fe/892b50345b529e896040f0534b0c12085d1b8b1a5c2c582ee0faf773d758/pynetdicom-1.4.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6c4b38527543ac9ff8d3b3f26a3b32a3", "sha256": "bc82e5097fc430b815dc2e1ca20dd54182102ee45f4b40ceb3754a7396f1ac6d"}, "downloads": -1, "filename": "pynetdicom-1.4.0.tar.gz", "has_sig": false, "md5_digest": "6c4b38527543ac9ff8d3b3f26a3b32a3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1441447, "upload_time": "2019-07-17T05:26:37", "upload_time_iso_8601": "2019-07-17T05:26:37.812695Z", "url": "https://files.pythonhosted.org/packages/45/45/931ad1dc9b811ba7d70a4de3a64fbac6a7a75ccfbc004e90e0d4c74fc6d9/pynetdicom-1.4.0.tar.gz", "yanked": false}], "1.4.1": [{"comment_text": "", "digests": {"md5": "f06e791c6ae94cf79d3b60df9fcb2800", "sha256": "552f68892c9de7215b878e292914e625703775e98a400279dc6c392acafec9df"}, "downloads": -1, "filename": "pynetdicom-1.4.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f06e791c6ae94cf79d3b60df9fcb2800", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 1487034, "upload_time": "2019-07-22T09:28:40", "upload_time_iso_8601": "2019-07-22T09:28:40.662245Z", "url": "https://files.pythonhosted.org/packages/a8/4a/fb3b50afe66fd37816a489aee0576bc39c30d2e36edec83d6804b9caed48/pynetdicom-1.4.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "efa30893f27037e09c1d42ab0cabde4a", "sha256": "2227edfbfbf0a48ccccf264102df2677e0f56489372e1ca2c85655cf6472280b"}, "downloads": -1, "filename": "pynetdicom-1.4.1.tar.gz", "has_sig": false, "md5_digest": "efa30893f27037e09c1d42ab0cabde4a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1441778, "upload_time": "2019-07-22T09:28:57", "upload_time_iso_8601": "2019-07-22T09:28:57.822777Z", "url": "https://files.pythonhosted.org/packages/e9/a6/07fc2f35098edd68945c24eba3fbea688934d9e8dadfc76af13d8f66c5e8/pynetdicom-1.4.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f06e791c6ae94cf79d3b60df9fcb2800", "sha256": "552f68892c9de7215b878e292914e625703775e98a400279dc6c392acafec9df"}, "downloads": -1, "filename": "pynetdicom-1.4.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f06e791c6ae94cf79d3b60df9fcb2800", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 1487034, "upload_time": "2019-07-22T09:28:40", "upload_time_iso_8601": "2019-07-22T09:28:40.662245Z", "url": "https://files.pythonhosted.org/packages/a8/4a/fb3b50afe66fd37816a489aee0576bc39c30d2e36edec83d6804b9caed48/pynetdicom-1.4.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "efa30893f27037e09c1d42ab0cabde4a", "sha256": "2227edfbfbf0a48ccccf264102df2677e0f56489372e1ca2c85655cf6472280b"}, "downloads": -1, "filename": "pynetdicom-1.4.1.tar.gz", "has_sig": false, "md5_digest": "efa30893f27037e09c1d42ab0cabde4a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1441778, "upload_time": "2019-07-22T09:28:57", "upload_time_iso_8601": "2019-07-22T09:28:57.822777Z", "url": "https://files.pythonhosted.org/packages/e9/a6/07fc2f35098edd68945c24eba3fbea688934d9e8dadfc76af13d8f66c5e8/pynetdicom-1.4.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:01:17 2020"}