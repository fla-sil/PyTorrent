{"info": {"author": "Itay Bardugo", "author_email": "itaybardugo91@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# FlaskVersion\n\n## install\n```python\npip install itay-bardugo-flask-version -U\n```\n\n## Brief\nFlaskVersion is a package that helps handle endpoints versions.\n\n## What it solves\nassume we have the route\n/api/`<version>`/output/print\n\nwhich returns \"Hello\" to the client.\n\nwith Flask it equals to\n```python\n@app.route(\"/api/<verrsion>/output/print\")\ndef print():\n    return \"Hello\"\n```\n\nas we can see, `<version>` is a variable which describes our route version.\nit can be\n`1.0`, `1.1`, `1.2` etc...\n\nwhat if our server serves clients that ask for this route\nin version `1.0`, but, we want to add an extra feature to this route, which will be visibled only in version `1.1`\n\nwe can define a new route for this problem:\n```python\n@app.route(\"/api/<verrsion>/output/print_new\")\ndef print():\n    return \"Hello new feature!\"\n```\nbut we dont want to add new routes for each new feature.\n\nit will be hard to maintain our endpoints and can be a little bit confusing.\n\nthis is what `FlaskVersion` was built for!\n\n`FlaskVersion` manages your endpoints by linking each method to one or more version in a few simple steps!\n  - Easy to use\n  - Easy to maintain\n\n## How to use\nAll you need to do is:\n1. make a anew app\n```python\n    # app.py\n    from flask import Flask\n    app = Flask(__name__)\n```\n\n\n2 . make a new callback that returns the version for the current incoming request\n```python\n    # app.py\n    @app.url_value_preprocessor\n    def url_process(endpoint, values):\n        if values:\n            g.version = values.pop(\"version\", \"1.0\")\n\n    def get_version():\n        return g.version\n```\n\n3 . make a new instance of FlaskVersion, with your app instance and your version handler callback  \n```python\n    # app.py\n    from flask_version import FlaskVersion\n    flask_version = FlaskVersion(app, url_process)\n```\n\n4 . tell to `FlaskVersion` to apply versions on specific route\n\n```python\n# routes.py\nfrom flask_version.utils import dispatch\n\n@app.route(\"/<version>\")\n@dispatch\ndef endpoint_a():\n    # this is the latest version of the function.\n    return \"current version!\"\n```\n5 . set the older versions\n```python\n# versions/endpoint_a.py (important: its called endoint_a.py becuase we used @dispatch on print() function\n# please note: the structure is\n# {specific_routes_folder}/versions/{function_name}.py\nfrom flask_version.utils import support_version\n\n\n@support_version(\"1.0\")\ndef version_a():\n    return \"i am an endpoint for version 1.0\"\n\n\n```\nThats it, `FlaskVersion` does the job for you and it will route to your\ncorrect endpoint according to the version input\n\n# Structure\nbasically, it does not matter how you structed your project.\nyou just have to make sure to follow this structure and `FlaskVersion` will work correctly.\nThe main idea is to create a new `versions` folder (with an \\__init__.py) at the same path where you defined\n```python\n@app.route(\"/route/to/some/action\")\n@dispatch\ndef action():\n    pass\n```\nand then, create a file inside `versions` with the same name (in this case `action.py`), the inside this file, just create your old versions of your endpoint\n\n## Example to Structre A:\n```\n+-- project\n|   +-- main_routes.py\n|   +-- output_routes.py\n|   +-- versions\n|       +-- print.py\n\n```\n## Example to Structre B:\n```\n+-- project\n|   +-- main_routes.py\n|   +-- blueprints\n|       +-- output\n|           +-- routes.py\n|           +-- versions\n|               +-- {function_name that @dispatch was applyed on it}.py\n|       +-- user\n|           +-- routes.py\n|           +-- versions\n|               +-- {function_name that @dispatch was applyed on it}.py\n\n```\n\n\nLicense\n----\n\nMIT\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/itay-bardugo/flask_version", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "itay-bardugo-flask-version", "package_url": "https://pypi.org/project/itay-bardugo-flask-version/", "platform": "", "project_url": "https://pypi.org/project/itay-bardugo-flask-version/", "project_urls": {"Homepage": "https://github.com/itay-bardugo/flask_version"}, "release_url": "https://pypi.org/project/itay-bardugo-flask-version/1.0.0/", "requires_dist": null, "requires_python": ">=3.6", "summary": "a package to handle flask routes endpoints by versions", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>FlaskVersion</h1>\n<h2>install</h2>\n<pre><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">itay</span><span class=\"o\">-</span><span class=\"n\">bardugo</span><span class=\"o\">-</span><span class=\"n\">flask</span><span class=\"o\">-</span><span class=\"n\">version</span> <span class=\"o\">-</span><span class=\"n\">U</span>\n</pre>\n<h2>Brief</h2>\n<p>FlaskVersion is a package that helps handle endpoints versions.</p>\n<h2>What it solves</h2>\n<p>assume we have the route\n/api/<code>&lt;version&gt;</code>/output/print</p>\n<p>which returns \"Hello\" to the client.</p>\n<p>with Flask it equals to</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s2\">\"/api/&lt;verrsion&gt;/output/print\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">print</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"s2\">\"Hello\"</span>\n</pre>\n<p>as we can see, <code>&lt;version&gt;</code> is a variable which describes our route version.\nit can be\n<code>1.0</code>, <code>1.1</code>, <code>1.2</code> etc...</p>\n<p>what if our server serves clients that ask for this route\nin version <code>1.0</code>, but, we want to add an extra feature to this route, which will be visibled only in version <code>1.1</code></p>\n<p>we can define a new route for this problem:</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s2\">\"/api/&lt;verrsion&gt;/output/print_new\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">print</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"s2\">\"Hello new feature!\"</span>\n</pre>\n<p>but we dont want to add new routes for each new feature.</p>\n<p>it will be hard to maintain our endpoints and can be a little bit confusing.</p>\n<p>this is what <code>FlaskVersion</code> was built for!</p>\n<p><code>FlaskVersion</code> manages your endpoints by linking each method to one or more version in a few simple steps!</p>\n<ul>\n<li>Easy to use</li>\n<li>Easy to maintain</li>\n</ul>\n<h2>How to use</h2>\n<p>All you need to do is:</p>\n<ol>\n<li>make a anew app</li>\n</ol>\n<pre>    <span class=\"c1\"># app.py</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">Flask</span>\n    <span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Flask</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n</pre>\n<p>2 . make a new callback that returns the version for the current incoming request</p>\n<pre>    <span class=\"c1\"># app.py</span>\n    <span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">url_value_preprocessor</span>\n    <span class=\"k\">def</span> <span class=\"nf\">url_process</span><span class=\"p\">(</span><span class=\"n\">endpoint</span><span class=\"p\">,</span> <span class=\"n\">values</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">values</span><span class=\"p\">:</span>\n            <span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">version</span> <span class=\"o\">=</span> <span class=\"n\">values</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">\"version\"</span><span class=\"p\">,</span> <span class=\"s2\">\"1.0\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_version</span><span class=\"p\">():</span>\n        <span class=\"k\">return</span> <span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">version</span>\n</pre>\n<p>3 . make a new instance of FlaskVersion, with your app instance and your version handler callback</p>\n<pre>    <span class=\"c1\"># app.py</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">flask_version</span> <span class=\"kn\">import</span> <span class=\"n\">FlaskVersion</span>\n    <span class=\"n\">flask_version</span> <span class=\"o\">=</span> <span class=\"n\">FlaskVersion</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"n\">url_process</span><span class=\"p\">)</span>\n</pre>\n<p>4 . tell to <code>FlaskVersion</code> to apply versions on specific route</p>\n<pre><span class=\"c1\"># routes.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">flask_version.utils</span> <span class=\"kn\">import</span> <span class=\"n\">dispatch</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s2\">\"/&lt;version&gt;\"</span><span class=\"p\">)</span>\n<span class=\"nd\">@dispatch</span>\n<span class=\"k\">def</span> <span class=\"nf\">endpoint_a</span><span class=\"p\">():</span>\n    <span class=\"c1\"># this is the latest version of the function.</span>\n    <span class=\"k\">return</span> <span class=\"s2\">\"current version!\"</span>\n</pre>\n<p>5 . set the older versions</p>\n<pre><span class=\"c1\"># versions/endpoint_a.py (important: its called endoint_a.py becuase we used @dispatch on print() function</span>\n<span class=\"c1\"># please note: the structure is</span>\n<span class=\"c1\"># {specific_routes_folder}/versions/{function_name}.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">flask_version.utils</span> <span class=\"kn\">import</span> <span class=\"n\">support_version</span>\n\n\n<span class=\"nd\">@support_version</span><span class=\"p\">(</span><span class=\"s2\">\"1.0\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">version_a</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"s2\">\"i am an endpoint for version 1.0\"</span>\n</pre>\n<p>Thats it, <code>FlaskVersion</code> does the job for you and it will route to your\ncorrect endpoint according to the version input</p>\n<h1>Structure</h1>\n<p>basically, it does not matter how you structed your project.\nyou just have to make sure to follow this structure and <code>FlaskVersion</code> will work correctly.\nThe main idea is to create a new <code>versions</code> folder (with an _<em>init</em>_.py) at the same path where you defined</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s2\">\"/route/to/some/action\"</span><span class=\"p\">)</span>\n<span class=\"nd\">@dispatch</span>\n<span class=\"k\">def</span> <span class=\"nf\">action</span><span class=\"p\">():</span>\n    <span class=\"k\">pass</span>\n</pre>\n<p>and then, create a file inside <code>versions</code> with the same name (in this case <code>action.py</code>), the inside this file, just create your old versions of your endpoint</p>\n<h2>Example to Structre A:</h2>\n<pre><code>+-- project\n|   +-- main_routes.py\n|   +-- output_routes.py\n|   +-- versions\n|       +-- print.py\n\n</code></pre>\n<h2>Example to Structre B:</h2>\n<pre><code>+-- project\n|   +-- main_routes.py\n|   +-- blueprints\n|       +-- output\n|           +-- routes.py\n|           +-- versions\n|               +-- {function_name that @dispatch was applyed on it}.py\n|       +-- user\n|           +-- routes.py\n|           +-- versions\n|               +-- {function_name that @dispatch was applyed on it}.py\n\n</code></pre>\n<h2>License</h2>\n<p>MIT</p>\n\n          </div>"}, "last_serial": 6884211, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "fabe8ee87e536842cd0b1607b5639503", "sha256": "35838ed8a4960e23357bf32ba7ed27050b9f55095e219f7fea8da93da497718b"}, "downloads": -1, "filename": "itay_bardugo_flask_version-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "fabe8ee87e536842cd0b1607b5639503", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7834, "upload_time": "2020-03-04T21:59:18", "upload_time_iso_8601": "2020-03-04T21:59:18.858182Z", "url": "https://files.pythonhosted.org/packages/2e/d8/cd80919231b3cd647edd09894273d1685cae4c8edb282a3be59aa981f26c/itay_bardugo_flask_version-0.0.1-py3-none-any.whl", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "3edf8173dfae53ed1db15c0af5f56c44", "sha256": "15ffc9980113480e731be7a71db0d028410cd7f60f35240907651ecca5bca9c3"}, "downloads": -1, "filename": "itay_bardugo_flask_version-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "3edf8173dfae53ed1db15c0af5f56c44", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7834, "upload_time": "2020-03-04T21:59:21", "upload_time_iso_8601": "2020-03-04T21:59:21.793431Z", "url": "https://files.pythonhosted.org/packages/6f/b9/f40e634824d47d7039b4c5169cab2ce5ed644ebe498c0e2445010c3bacde/itay_bardugo_flask_version-0.0.2-py3-none-any.whl", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "46e60e3c368d3f893ddbcba478524de0", "sha256": "5831b7389ce051a61cf99aa7bf000323f2d4004b8fa4004d4d11bc02b4b33e18"}, "downloads": -1, "filename": "itay_bardugo_flask_version-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "46e60e3c368d3f893ddbcba478524de0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7832, "upload_time": "2020-03-04T22:00:52", "upload_time_iso_8601": "2020-03-04T22:00:52.668472Z", "url": "https://files.pythonhosted.org/packages/98/1e/0c8bf351ff2d69dbde82374434d9971d2f1999a31c4ea10cbcf1b14bd99d/itay_bardugo_flask_version-0.0.3-py3-none-any.whl", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "db2fea864c8e10d45a84c2930f49d018", "sha256": "eae8fb12e8a456292a23388c49dde2794bb212a247acc55d3e0cdb1e7bf79c64"}, "downloads": -1, "filename": "itay_bardugo_flask_version-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "db2fea864c8e10d45a84c2930f49d018", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8942, "upload_time": "2020-03-05T17:32:49", "upload_time_iso_8601": "2020-03-05T17:32:49.190111Z", "url": "https://files.pythonhosted.org/packages/c6/46/83ff86d07f973db60f99bf9943e4228f4f3cadecd1a9421aefe5b477d6ef/itay_bardugo_flask_version-0.1.0-py3-none-any.whl", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "4c4b992fa090e58c9a1c8cc0d41f53d6", "sha256": "947f26679e0147c78ccf66cdf112404d707447c4d4fb09261799bd202bb9f1a9"}, "downloads": -1, "filename": "itay_bardugo_flask_version-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "4c4b992fa090e58c9a1c8cc0d41f53d6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8948, "upload_time": "2020-03-10T17:10:08", "upload_time_iso_8601": "2020-03-10T17:10:08.619835Z", "url": "https://files.pythonhosted.org/packages/c2/db/526245527e5f3cc310e589e35c90d0d22c79769dc9980d69c83a0703d8ec/itay_bardugo_flask_version-0.1.1-py3-none-any.whl", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "f39e5a035b055c614efd7746f3258eac", "sha256": "53b2488d9eeeb70f3eaf679793ba90c004caf65dcfba10ae5bedd52dfce45e5b"}, "downloads": -1, "filename": "itay_bardugo_flask_version-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "f39e5a035b055c614efd7746f3258eac", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8954, "upload_time": "2020-03-10T17:15:13", "upload_time_iso_8601": "2020-03-10T17:15:13.038786Z", "url": "https://files.pythonhosted.org/packages/5a/ce/f50539d8927d1329e516210f942d690e30a6cc141949bba9551fe5a7bcff/itay_bardugo_flask_version-0.1.2-py3-none-any.whl", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "09d9c31fc98b1de973432eb6b83ae19f", "sha256": "f83fcc970aaa4255ed9674ad38de6e90c39925015dfec42d82f7d057787d1d61"}, "downloads": -1, "filename": "itay_bardugo_flask_version-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "09d9c31fc98b1de973432eb6b83ae19f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8933, "upload_time": "2020-03-12T06:49:13", "upload_time_iso_8601": "2020-03-12T06:49:13.278783Z", "url": "https://files.pythonhosted.org/packages/8b/fa/3410c229e39d63cb5afb7f1c236847d5b06f7281d92a726f466870c720a4/itay_bardugo_flask_version-0.2.0-py3-none-any.whl", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "83844311a500d47c17237bc6a14733eb", "sha256": "5cceca5eb3f95045cef9826b95763fdbc4dd071b82bcc6dfe5d5a7fbbcc0c67f"}, "downloads": -1, "filename": "itay_bardugo_flask_version-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "83844311a500d47c17237bc6a14733eb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 11083, "upload_time": "2020-03-25T19:51:38", "upload_time_iso_8601": "2020-03-25T19:51:38.661619Z", "url": "https://files.pythonhosted.org/packages/89/f1/3ea492f3a606f86601f297964b93918d3dc52d60a5ed17f48950dbe1b5d4/itay_bardugo_flask_version-1.0.0-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "83844311a500d47c17237bc6a14733eb", "sha256": "5cceca5eb3f95045cef9826b95763fdbc4dd071b82bcc6dfe5d5a7fbbcc0c67f"}, "downloads": -1, "filename": "itay_bardugo_flask_version-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "83844311a500d47c17237bc6a14733eb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 11083, "upload_time": "2020-03-25T19:51:38", "upload_time_iso_8601": "2020-03-25T19:51:38.661619Z", "url": "https://files.pythonhosted.org/packages/89/f1/3ea492f3a606f86601f297964b93918d3dc52d60a5ed17f48950dbe1b5d4/itay_bardugo_flask_version-1.0.0-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:53:51 2020"}