{"info": {"author": "Eclipse ioFog", "author_email": "edgemaster@iofog.org", "bugtrack_url": null, "classifiers": [], "description": "# iofog-python-sdk\n\nThis SDK is divided in two parts: client and deploy.\n\n## Installation\n\nInstall python package:\n```bash\nsudo python2 -m pip install iofog-python-sdk\n```\n\n## Client\n\nThis module lets you easily build an ioElement. It gives you all the functionality to interact with ioFog via Local API. It contains all necessary methods for IoMessage transformation as well.\n\n - send new message to ioFog (post_message)\n - fetch next unread messages from ioFog (get_next_messages)\n - fetch messages for time period and list of accessible publishers (get_next_messages_from_publishers_within_timeframe)\n - get config options (get_config)\n - create IoMessage, encode(decode) to(from) raw bytes, marshall(unmarshall) into(from) JSON object (IoMessage class methods)\n - connect to ioFog Control Channel via WebSocket (establish_control_ws_connection)\n - connect to ioFog Message Channel via WebSocket (establish_message_ws_connection) and publish new message via this channel (post_message_via_socket)\n\n### Code snippets: \n\nImport iofog client and additional classes to your project:\n```python\nfrom iofog_python_sdk.client.client import IoFogClient\nfrom iofog_python_sdk.client.exception import IoFogException\nfrom iofog_python_sdk.client.iomessage import IoMessage\nfrom iofog_python_sdk.client.listener import *\n```\n\nCreate IoFog client with default settings:\n```python\ntry:\n    client = IoFogClient()\nexcept IoFogException as e:\n # client creation failed, e contains description\n```\n\nOr specify host, port, ssl and container id explicitly:\n```python\ntry:\n    client = IoFogClient(id='container_id', host='iofog_host', port=6666)\nexcept IoFogException as e:\n # client creation failed, e contains description\n```\n\n##### REST calls\n\nGet list of next unread IoMessages:\n```python\ntry:\n    messages = client.get_next_messages()\nexcept IoFogException as e:\n # some error occurred, e contains description\n```\n\nPost new IoMessage to ioFog via REST call:\n```python\nmsg=IoMessage()\nmsg.infotype=\"infotype\"\nmsg.infoformat=\"infoformat\"\nmsg.contentdata=\"sdkjhwrtiy8wrtgSDFOiuhsrgowh4touwsdhsDFDSKJhsdkljasjklweklfjwhefiauhw98p328946982weiusfhsdkufhaskldjfslkjdhfalsjdf=serg4towhr\"\nmsg.contextdata=\"\"\nmsg.tag=\"tag\"\nmsg.groupid=\"groupid\"\nmsg.authid=\"authid\"\nmsg.authgroup=\"authgroup\"\nmsg.hash=\"hash\"\nmsg.previoushash=\"previoushash\"\nmsg.nonce=\"nonce\"\n\ntry:\n    receipt = client.post_message(msg)\nexcept IoFogException, e:\n # some error occurred, e contains description\n```\n\nGet an array of IoMessages from specified publishers within given timeframe:\n```python\nquery = {\n    \t'timeframestart': 1234567890123,\n    \t'timeframeend': 1234567890123,\n    \t'publishers': ['sefhuiw4984twefsdoiuhsdf', 'd895y459rwdsifuhSDFKukuewf', 'SESD984wtsdidsiusidsufgsdfkh']\n}\ntry:\n    query_response = client.get_next_messages_from_publishers_within_timeframe(query)\nexcept IoFogException, e:\n # some error occurred, e contains description\n```\n\nGet container's config:\n```python\ntry:\n    config = client.get_config()\nexcept IoFogException, ex:\n # some error occurred, ex contains description\n```\n\n\n##### WebSocket calls\n\nTo use websocket connections you should implement listeners as follows:\n```python\nclass MyControlListener(IoFogControlWsListener):\n    def on_control_signal(self):\n        # do smth on control signal\n\n\nclass MyMessageListener(IoFogMessageWsListener):\n    def on_receipt(self, message_id, timestamp):\n        # do smth with message receipt\n\n    def on_message(self, io_msg):\n        # do smth with new message\n\n```\n\nAfter that you can establish websocket connections:\n```python\nclient.establish_message_ws_connection(MyMessageListener())\nclient.establish_control_ws_connection(MyControlListener())\n```\nEach of those connections will be managed in a separate thread.\n\n\nAfter successful connection to message websocket you can send to it:\n```python\nclient.post_message_via_socket(io_msg_instance)\n```\n\n\n##### Message utils\nConstruct IoMessage from JSON(both json string and python dictionary are acceptable):\n```python\nmsg = IoMessage.from_json(json_msg)\n ```\n\nIoMessage to JSON:\n```python\njson_str = io_msg_instance.to_json()\n```\n\nConstruct IoMessage from raw bytes:\n```python\nmsg = IoMessage.from_bytearray([0, 4, ...])\n```\n\nPack IoMessage into bytearray:\n```python\nmsg_bytes = io_msg_instance.to_bytearray()\n```\n## Deploy\n\nThis module lets you easily communicate with the [Controller REST API](https://iofog.org/docs/1.3.0/controllers/rest-api.html).\n\n - Deploy flow, microservices, agents, etc.\n - Edit microservice configuration\n - Edit flow routing\n\n ### Code snippets\n\nImport iofog deploy client\n```python\nfrom iofog_python_sdk.deploy.create_rest_call import rest_call\nfrom iofog_python_sdk.deploy.microservice_service import microservices\n```\n\nUpdate microservice config\n```python\ncontroller_address = http://localhost:51121/api/v3\nmicroservice_service = microservices()\n\ndef iofog_auth(controller_address, email, password):\n    data = {}\n    data[\"email\"] = email\n    data[\"password\"] = password\n    post_address = \"{}/user/login\".format(controller_address)\n    jsonResponse = rest_call(data, post_address)\n    auth_token = jsonResponse[\"accessToken\"]\n    return auth_token\n\nauth_token = iofog_auth(controller_address, \"user@domain.com\", \"myPassword\")\nflow_id = 1\ncurrent_microservice = microservice_service.get_microservice_by_name(controller_address, \"my_microservice\", flow_id, auth_token)\n\nupdated_microservice = current_microservice\nupdated_microservice.config = {\"newKey\": 42}\n\nmicroservice_service.update_microservice(controller_address, updated_microservice, current_microservice.iofogUuid, catalog_id, auth_token)\n\n```\n\n#### Disclaimer\n\nThis module is very much a Work In Progress. It was first written as a set of helper functions used by a python script to deploy a set of microservices configured using yaml files.\n\nOur [golang SDK](https://github.com/eclipse-iofog/iofog-go-sdk) is more adapted and modular for communicating with the Controller REST API\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/eclipse-iofog/iofog-python-sdk", "keywords": "ioFog IoT Eclipse fog computing edgeworx", "license": "EPL-2.0", "maintainer": "", "maintainer_email": "", "name": "iofog-python-sdk", "package_url": "https://pypi.org/project/iofog-python-sdk/", "platform": "", "project_url": "https://pypi.org/project/iofog-python-sdk/", "project_urls": {"Documentation": "https://github.com/eclipse-iofog/iofog-python-sdk/blob/master/README.md", "Eclipse ioFog": "http://iofog.org", "Homepage": "https://github.com/eclipse-iofog/iofog-python-sdk", "Source": "https://github.com/eclipse-iofog/iofog-python-sdk.git", "Tracker": "https://github.com/eclipse-iofog/iofog-python-sdk/issues"}, "release_url": "https://pypi.org/project/iofog-python-sdk/1.3.0/", "requires_dist": null, "requires_python": "", "summary": "Native python SDK for Eclipse ioFog development.", "version": "1.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>iofog-python-sdk</h1>\n<p>This SDK is divided in two parts: client and deploy.</p>\n<h2>Installation</h2>\n<p>Install python package:</p>\n<pre>sudo python2 -m pip install iofog-python-sdk\n</pre>\n<h2>Client</h2>\n<p>This module lets you easily build an ioElement. It gives you all the functionality to interact with ioFog via Local API. It contains all necessary methods for IoMessage transformation as well.</p>\n<ul>\n<li>send new message to ioFog (post_message)</li>\n<li>fetch next unread messages from ioFog (get_next_messages)</li>\n<li>fetch messages for time period and list of accessible publishers (get_next_messages_from_publishers_within_timeframe)</li>\n<li>get config options (get_config)</li>\n<li>create IoMessage, encode(decode) to(from) raw bytes, marshall(unmarshall) into(from) JSON object (IoMessage class methods)</li>\n<li>connect to ioFog Control Channel via WebSocket (establish_control_ws_connection)</li>\n<li>connect to ioFog Message Channel via WebSocket (establish_message_ws_connection) and publish new message via this channel (post_message_via_socket)</li>\n</ul>\n<h3>Code snippets:</h3>\n<p>Import iofog client and additional classes to your project:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">iofog_python_sdk.client.client</span> <span class=\"kn\">import</span> <span class=\"n\">IoFogClient</span>\n<span class=\"kn\">from</span> <span class=\"nn\">iofog_python_sdk.client.exception</span> <span class=\"kn\">import</span> <span class=\"n\">IoFogException</span>\n<span class=\"kn\">from</span> <span class=\"nn\">iofog_python_sdk.client.iomessage</span> <span class=\"kn\">import</span> <span class=\"n\">IoMessage</span>\n<span class=\"kn\">from</span> <span class=\"nn\">iofog_python_sdk.client.listener</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n</pre>\n<p>Create IoFog client with default settings:</p>\n<pre><span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">IoFogClient</span><span class=\"p\">()</span>\n<span class=\"k\">except</span> <span class=\"n\">IoFogException</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n <span class=\"c1\"># client creation failed, e contains description</span>\n</pre>\n<p>Or specify host, port, ssl and container id explicitly:</p>\n<pre><span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">IoFogClient</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">'container_id'</span><span class=\"p\">,</span> <span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s1\">'iofog_host'</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">6666</span><span class=\"p\">)</span>\n<span class=\"k\">except</span> <span class=\"n\">IoFogException</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n <span class=\"c1\"># client creation failed, e contains description</span>\n</pre>\n<h5>REST calls</h5>\n<p>Get list of next unread IoMessages:</p>\n<pre><span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">messages</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_next_messages</span><span class=\"p\">()</span>\n<span class=\"k\">except</span> <span class=\"n\">IoFogException</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n <span class=\"c1\"># some error occurred, e contains description</span>\n</pre>\n<p>Post new IoMessage to ioFog via REST call:</p>\n<pre><span class=\"n\">msg</span><span class=\"o\">=</span><span class=\"n\">IoMessage</span><span class=\"p\">()</span>\n<span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"n\">infotype</span><span class=\"o\">=</span><span class=\"s2\">\"infotype\"</span>\n<span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"n\">infoformat</span><span class=\"o\">=</span><span class=\"s2\">\"infoformat\"</span>\n<span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"n\">contentdata</span><span class=\"o\">=</span><span class=\"s2\">\"sdkjhwrtiy8wrtgSDFOiuhsrgowh4touwsdhsDFDSKJhsdkljasjklweklfjwhefiauhw98p328946982weiusfhsdkufhaskldjfslkjdhfalsjdf=serg4towhr\"</span>\n<span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"n\">contextdata</span><span class=\"o\">=</span><span class=\"s2\">\"\"</span>\n<span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"n\">tag</span><span class=\"o\">=</span><span class=\"s2\">\"tag\"</span>\n<span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"n\">groupid</span><span class=\"o\">=</span><span class=\"s2\">\"groupid\"</span>\n<span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"n\">authid</span><span class=\"o\">=</span><span class=\"s2\">\"authid\"</span>\n<span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"n\">authgroup</span><span class=\"o\">=</span><span class=\"s2\">\"authgroup\"</span>\n<span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"n\">hash</span><span class=\"o\">=</span><span class=\"s2\">\"hash\"</span>\n<span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"n\">previoushash</span><span class=\"o\">=</span><span class=\"s2\">\"previoushash\"</span>\n<span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"n\">nonce</span><span class=\"o\">=</span><span class=\"s2\">\"nonce\"</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">receipt</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">post_message</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span>\n<span class=\"k\">except</span> <span class=\"n\">IoFogException</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n <span class=\"c1\"># some error occurred, e contains description</span>\n</pre>\n<p>Get an array of IoMessages from specified publishers within given timeframe:</p>\n<pre><span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    \t<span class=\"s1\">'timeframestart'</span><span class=\"p\">:</span> <span class=\"mi\">1234567890123</span><span class=\"p\">,</span>\n    \t<span class=\"s1\">'timeframeend'</span><span class=\"p\">:</span> <span class=\"mi\">1234567890123</span><span class=\"p\">,</span>\n    \t<span class=\"s1\">'publishers'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'sefhuiw4984twefsdoiuhsdf'</span><span class=\"p\">,</span> <span class=\"s1\">'d895y459rwdsifuhSDFKukuewf'</span><span class=\"p\">,</span> <span class=\"s1\">'SESD984wtsdidsiusidsufgsdfkh'</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">query_response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_next_messages_from_publishers_within_timeframe</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">)</span>\n<span class=\"k\">except</span> <span class=\"n\">IoFogException</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n <span class=\"c1\"># some error occurred, e contains description</span>\n</pre>\n<p>Get container's config:</p>\n<pre><span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_config</span><span class=\"p\">()</span>\n<span class=\"k\">except</span> <span class=\"n\">IoFogException</span><span class=\"p\">,</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n <span class=\"c1\"># some error occurred, ex contains description</span>\n</pre>\n<h5>WebSocket calls</h5>\n<p>To use websocket connections you should implement listeners as follows:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">MyControlListener</span><span class=\"p\">(</span><span class=\"n\">IoFogControlWsListener</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">on_control_signal</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># do smth on control signal</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MyMessageListener</span><span class=\"p\">(</span><span class=\"n\">IoFogMessageWsListener</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">on_receipt</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">message_id</span><span class=\"p\">,</span> <span class=\"n\">timestamp</span><span class=\"p\">):</span>\n        <span class=\"c1\"># do smth with message receipt</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">on_message</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">io_msg</span><span class=\"p\">):</span>\n        <span class=\"c1\"># do smth with new message</span>\n</pre>\n<p>After that you can establish websocket connections:</p>\n<pre><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">establish_message_ws_connection</span><span class=\"p\">(</span><span class=\"n\">MyMessageListener</span><span class=\"p\">())</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">establish_control_ws_connection</span><span class=\"p\">(</span><span class=\"n\">MyControlListener</span><span class=\"p\">())</span>\n</pre>\n<p>Each of those connections will be managed in a separate thread.</p>\n<p>After successful connection to message websocket you can send to it:</p>\n<pre><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">post_message_via_socket</span><span class=\"p\">(</span><span class=\"n\">io_msg_instance</span><span class=\"p\">)</span>\n</pre>\n<h5>Message utils</h5>\n<p>Construct IoMessage from JSON(both json string and python dictionary are acceptable):</p>\n<pre><span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"n\">IoMessage</span><span class=\"o\">.</span><span class=\"n\">from_json</span><span class=\"p\">(</span><span class=\"n\">json_msg</span><span class=\"p\">)</span>\n</pre>\n<p>IoMessage to JSON:</p>\n<pre><span class=\"n\">json_str</span> <span class=\"o\">=</span> <span class=\"n\">io_msg_instance</span><span class=\"o\">.</span><span class=\"n\">to_json</span><span class=\"p\">()</span>\n</pre>\n<p>Construct IoMessage from raw bytes:</p>\n<pre><span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"n\">IoMessage</span><span class=\"o\">.</span><span class=\"n\">from_bytearray</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">])</span>\n</pre>\n<p>Pack IoMessage into bytearray:</p>\n<pre><span class=\"n\">msg_bytes</span> <span class=\"o\">=</span> <span class=\"n\">io_msg_instance</span><span class=\"o\">.</span><span class=\"n\">to_bytearray</span><span class=\"p\">()</span>\n</pre>\n<h2>Deploy</h2>\n<p>This module lets you easily communicate with the <a href=\"https://iofog.org/docs/1.3.0/controllers/rest-api.html\" rel=\"nofollow\">Controller REST API</a>.</p>\n<ul>\n<li>Deploy flow, microservices, agents, etc.</li>\n<li>Edit microservice configuration</li>\n<li>Edit flow routing</li>\n</ul>\n<h3>Code snippets</h3>\n<p>Import iofog deploy client</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">iofog_python_sdk.deploy.create_rest_call</span> <span class=\"kn\">import</span> <span class=\"n\">rest_call</span>\n<span class=\"kn\">from</span> <span class=\"nn\">iofog_python_sdk.deploy.microservice_service</span> <span class=\"kn\">import</span> <span class=\"n\">microservices</span>\n</pre>\n<p>Update microservice config</p>\n<pre><span class=\"n\">controller_address</span> <span class=\"o\">=</span> <span class=\"n\">http</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">localhost</span><span class=\"p\">:</span><span class=\"mi\">51121</span><span class=\"o\">/</span><span class=\"n\">api</span><span class=\"o\">/</span><span class=\"n\">v3</span>\n<span class=\"n\">microservice_service</span> <span class=\"o\">=</span> <span class=\"n\">microservices</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">iofog_auth</span><span class=\"p\">(</span><span class=\"n\">controller_address</span><span class=\"p\">,</span> <span class=\"n\">email</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"p\">):</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n    <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s2\">\"email\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">email</span>\n    <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s2\">\"password\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">password</span>\n    <span class=\"n\">post_address</span> <span class=\"o\">=</span> <span class=\"s2\">\"</span><span class=\"si\">{}</span><span class=\"s2\">/user/login\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">controller_address</span><span class=\"p\">)</span>\n    <span class=\"n\">jsonResponse</span> <span class=\"o\">=</span> <span class=\"n\">rest_call</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">post_address</span><span class=\"p\">)</span>\n    <span class=\"n\">auth_token</span> <span class=\"o\">=</span> <span class=\"n\">jsonResponse</span><span class=\"p\">[</span><span class=\"s2\">\"accessToken\"</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"n\">auth_token</span>\n\n<span class=\"n\">auth_token</span> <span class=\"o\">=</span> <span class=\"n\">iofog_auth</span><span class=\"p\">(</span><span class=\"n\">controller_address</span><span class=\"p\">,</span> <span class=\"s2\">\"user@domain.com\"</span><span class=\"p\">,</span> <span class=\"s2\">\"myPassword\"</span><span class=\"p\">)</span>\n<span class=\"n\">flow_id</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">current_microservice</span> <span class=\"o\">=</span> <span class=\"n\">microservice_service</span><span class=\"o\">.</span><span class=\"n\">get_microservice_by_name</span><span class=\"p\">(</span><span class=\"n\">controller_address</span><span class=\"p\">,</span> <span class=\"s2\">\"my_microservice\"</span><span class=\"p\">,</span> <span class=\"n\">flow_id</span><span class=\"p\">,</span> <span class=\"n\">auth_token</span><span class=\"p\">)</span>\n\n<span class=\"n\">updated_microservice</span> <span class=\"o\">=</span> <span class=\"n\">current_microservice</span>\n<span class=\"n\">updated_microservice</span><span class=\"o\">.</span><span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"newKey\"</span><span class=\"p\">:</span> <span class=\"mi\">42</span><span class=\"p\">}</span>\n\n<span class=\"n\">microservice_service</span><span class=\"o\">.</span><span class=\"n\">update_microservice</span><span class=\"p\">(</span><span class=\"n\">controller_address</span><span class=\"p\">,</span> <span class=\"n\">updated_microservice</span><span class=\"p\">,</span> <span class=\"n\">current_microservice</span><span class=\"o\">.</span><span class=\"n\">iofogUuid</span><span class=\"p\">,</span> <span class=\"n\">catalog_id</span><span class=\"p\">,</span> <span class=\"n\">auth_token</span><span class=\"p\">)</span>\n</pre>\n<h4>Disclaimer</h4>\n<p>This module is very much a Work In Progress. It was first written as a set of helper functions used by a python script to deploy a set of microservices configured using yaml files.</p>\n<p>Our <a href=\"https://github.com/eclipse-iofog/iofog-go-sdk\" rel=\"nofollow\">golang SDK</a> is more adapted and modular for communicating with the Controller REST API</p>\n\n          </div>"}, "last_serial": 6197859, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "ee791bb0c4e0d0e1e36206e447ef33db", "sha256": "026d3b1b2008dc601af69c0adcdd11779b0d4f4db0805d07c6941c081dbc5de4"}, "downloads": -1, "filename": "iofog-python-sdk-0.0.1.tar.gz", "has_sig": false, "md5_digest": "ee791bb0c4e0d0e1e36206e447ef33db", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6215, "upload_time": "2018-05-07T15:45:27", "upload_time_iso_8601": "2018-05-07T15:45:27.293368Z", "url": "https://files.pythonhosted.org/packages/fd/6a/a3e1f6b423d6e43b2fd7d9e11ec2b523ed0c8d252232b24df9b1471f3bf3/iofog-python-sdk-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "a6e8ee5a6490c455cde08eb7165baa29", "sha256": "616dee7e0af1c9d54dabacc8dcde4bf5288b65ce5c3b58b3ed7eba4d8d110549"}, "downloads": -1, "filename": "iofog-python-sdk-0.0.2.zip", "has_sig": false, "md5_digest": "a6e8ee5a6490c455cde08eb7165baa29", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10907, "upload_time": "2018-12-13T12:11:38", "upload_time_iso_8601": "2018-12-13T12:11:38.289834Z", "url": "https://files.pythonhosted.org/packages/b7/21/e75f66f33140ce466e233ce6d4b67284076ecaea0d92ee253f7477874052/iofog-python-sdk-0.0.2.zip", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "599766c00889b5ace44eff8887d94f6b", "sha256": "a208b3a822874fe33ea3404d520357507b8726a6ce02cf1a5bfc9eccae5713d0"}, "downloads": -1, "filename": "iofog-python-sdk-0.0.4.zip", "has_sig": false, "md5_digest": "599766c00889b5ace44eff8887d94f6b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10915, "upload_time": "2019-02-18T10:00:36", "upload_time_iso_8601": "2019-02-18T10:00:36.933116Z", "url": "https://files.pythonhosted.org/packages/b2/a4/cdca7bb959e70eb88eb875ffe90b5ed7feda2f51a4176eb4e62677a2a283/iofog-python-sdk-0.0.4.zip", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "fcfbc319cf4f3b3d4a2091f2b0b200ce", "sha256": "8bea00829016eecac9e392a64abb37627db0a2810aca42ec876b632607b2708e"}, "downloads": -1, "filename": "iofog-python-sdk-1.0.0.tar.gz", "has_sig": false, "md5_digest": "fcfbc319cf4f3b3d4a2091f2b0b200ce", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11308, "upload_time": "2019-08-26T18:43:47", "upload_time_iso_8601": "2019-08-26T18:43:47.319050Z", "url": "https://files.pythonhosted.org/packages/8b/8b/437f22b9fb47f2792823bb4662b29c4101a68b4702da7b160d04d76c748e/iofog-python-sdk-1.0.0.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "f2171a81f064288591679c9efd912703", "sha256": "9a2405d60a23c1639bddf7994e3e0154846b84676f9c0dda02c7d7901241108a"}, "downloads": -1, "filename": "iofog_python_sdk-1.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f2171a81f064288591679c9efd912703", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4505, "upload_time": "2019-11-26T00:11:24", "upload_time_iso_8601": "2019-11-26T00:11:24.212002Z", "url": "https://files.pythonhosted.org/packages/25/5a/b6b977db46f061c88f17c5d32d84a3d8fb6d61016b0673e21ba79feb796a/iofog_python_sdk-1.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "340f0cd224f6fdd7a51cff9e73dad399", "sha256": "21bc2380e138125032b6c78de8ffca46a0d65aa5c03e381ff284ed9919d506ac"}, "downloads": -1, "filename": "iofog-python-sdk-1.3.0.tar.gz", "has_sig": false, "md5_digest": "340f0cd224f6fdd7a51cff9e73dad399", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4130, "upload_time": "2019-11-26T00:11:25", "upload_time_iso_8601": "2019-11-26T00:11:25.790964Z", "url": "https://files.pythonhosted.org/packages/3b/de/1885766656c063441ab19087c9cb7bcd0ed7c734a5fa9d25a134960dc167/iofog-python-sdk-1.3.0.tar.gz", "yanked": false}], "1.3.0rc1": [{"comment_text": "", "digests": {"md5": "a55faabd8f2ef77b1fca208ec7b0da03", "sha256": "0bd11bddc603ed57e4841de9ab36fef60e8e911bc9bf40871e3cc41c976090cc"}, "downloads": -1, "filename": "iofog_python_sdk-1.3.0rc1-py2-none-any.whl", "has_sig": false, "md5_digest": "a55faabd8f2ef77b1fca208ec7b0da03", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 3699, "upload_time": "2019-11-08T06:16:13", "upload_time_iso_8601": "2019-11-08T06:16:13.219375Z", "url": "https://files.pythonhosted.org/packages/e0/e1/4cf592105c745e5da4c26f86859c1580a97bc96a780fbfc899bf8291ea0d/iofog_python_sdk-1.3.0rc1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6ead478a20003c0cbd0796e87c7a8807", "sha256": "536f91a4d3c659555f64bd491dfa29a45bf9c62a0fa0e7a4ed4969066a2459ea"}, "downloads": -1, "filename": "iofog-python-sdk-1.3.0rc1.tar.gz", "has_sig": false, "md5_digest": "6ead478a20003c0cbd0796e87c7a8807", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4222, "upload_time": "2019-11-08T06:16:14", "upload_time_iso_8601": "2019-11-08T06:16:14.406058Z", "url": "https://files.pythonhosted.org/packages/bf/63/9dab7a9650447579985009a59085d3413f81654bac367805df19a6641789/iofog-python-sdk-1.3.0rc1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f2171a81f064288591679c9efd912703", "sha256": "9a2405d60a23c1639bddf7994e3e0154846b84676f9c0dda02c7d7901241108a"}, "downloads": -1, "filename": "iofog_python_sdk-1.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f2171a81f064288591679c9efd912703", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4505, "upload_time": "2019-11-26T00:11:24", "upload_time_iso_8601": "2019-11-26T00:11:24.212002Z", "url": "https://files.pythonhosted.org/packages/25/5a/b6b977db46f061c88f17c5d32d84a3d8fb6d61016b0673e21ba79feb796a/iofog_python_sdk-1.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "340f0cd224f6fdd7a51cff9e73dad399", "sha256": "21bc2380e138125032b6c78de8ffca46a0d65aa5c03e381ff284ed9919d506ac"}, "downloads": -1, "filename": "iofog-python-sdk-1.3.0.tar.gz", "has_sig": false, "md5_digest": "340f0cd224f6fdd7a51cff9e73dad399", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4130, "upload_time": "2019-11-26T00:11:25", "upload_time_iso_8601": "2019-11-26T00:11:25.790964Z", "url": "https://files.pythonhosted.org/packages/3b/de/1885766656c063441ab19087c9cb7bcd0ed7c734a5fa9d25a134960dc167/iofog-python-sdk-1.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:55:01 2020"}