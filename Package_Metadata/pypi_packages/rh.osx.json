{"info": {"author": "Ranger Harke", "author_email": "ranger.harke@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: MacOS X", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: MacOS :: MacOS X", "Programming Language :: Python", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Python bindings to access native macOS APIs\n\nSpecifics\n=========\n\nI created this library to provide access to native macOS APIs to other Python code I've written.\nIt uses ``ctypes`` to bind to the underlying C APIs, and generally just exposes the APIs 'as is'\nwithout attempting to Python-ify them.\n\nIt does, however, provide several facilities to make working with the APIs a little easier, but they\nare entirely optional. Several types (e.g. ``CFTypeRef``, ``io_object_t``) have an ``autorelease()``\nmethod which will automatically call the appropriate function to release the object when the Python\nobject holding the reference is destroyed.\n\nAdditionally, strings can be automatically converted to/from ``CFStringRef``. The aforementioned\nautorelease method is used to ensure that the ephemeral ``CFStringRef`` does not leak.\n\nThere is an ``IOIterator`` class which can adapt an ``io_iterator_t`` into a Python iterator.\n\nThe bindings are NOT comprehensive and I generally just add stuff as I need it.\n\nThe code is tested with Python 2.7 and 3.6.\n\nExamples\n========\n\n    >>> from rh.osx import corefoundation\n    >>> string_copy = corefoundation.CFStringCreateCopy(None,\n    ... \"\"\"The Python string object is automatically converted to a CFStringRef.\n    ... The returned CFStringRef copy will automatically be released.\"\"\").autorelease()\n    >>> print(str(string_copy))\n    The Python string object is automatically converted to a CFStringRef.\n    The returned CFStringRef copy will automatically be released.\n\nLicense\n=======\n\nThis library is distributed under the MIT license, as described in the LICENSE file.\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/rharke/rh.osx", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "rh.osx", "package_url": "https://pypi.org/project/rh.osx/", "platform": "", "project_url": "https://pypi.org/project/rh.osx/", "project_urls": {"Homepage": "http://github.com/rharke/rh.osx"}, "release_url": "https://pypi.org/project/rh.osx/0.1.1/", "requires_dist": null, "requires_python": "", "summary": "Python bindings to access native macOS APIs", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Python bindings to access native macOS APIs</p>\n<div id=\"specifics\">\n<h2>Specifics</h2>\n<p>I created this library to provide access to native macOS APIs to other Python code I\u2019ve written.\nIt uses <tt>ctypes</tt> to bind to the underlying C APIs, and generally just exposes the APIs \u2018as is\u2019\nwithout attempting to Python-ify them.</p>\n<p>It does, however, provide several facilities to make working with the APIs a little easier, but they\nare entirely optional. Several types (e.g. <tt>CFTypeRef</tt>, <tt>io_object_t</tt>) have an <tt>autorelease()</tt>\nmethod which will automatically call the appropriate function to release the object when the Python\nobject holding the reference is destroyed.</p>\n<p>Additionally, strings can be automatically converted to/from <tt>CFStringRef</tt>. The aforementioned\nautorelease method is used to ensure that the ephemeral <tt>CFStringRef</tt> does not leak.</p>\n<p>There is an <tt>IOIterator</tt> class which can adapt an <tt>io_iterator_t</tt> into a Python iterator.</p>\n<p>The bindings are NOT comprehensive and I generally just add stuff as I need it.</p>\n<p>The code is tested with Python 2.7 and 3.6.</p>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<blockquote>\n<pre>&gt;&gt;&gt; from rh.osx import corefoundation\n&gt;&gt;&gt; string_copy = corefoundation.CFStringCreateCopy(None,\n... \"\"\"The Python string object is automatically converted to a CFStringRef.\n... The returned CFStringRef copy will automatically be released.\"\"\").autorelease()\n&gt;&gt;&gt; print(str(string_copy))\nThe Python string object is automatically converted to a CFStringRef.\nThe returned CFStringRef copy will automatically be released.\n</pre>\n</blockquote>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>This library is distributed under the MIT license, as described in the LICENSE file.</p>\n</div>\n\n          </div>"}, "last_serial": 2958569, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "8f833e2e2388b5a2bf4fa2015f66b644", "sha256": "67b305dcb6572b79dcb893d01c4f5bd6ef5b44c7a47cbe1590906dc8af4aac8f"}, "downloads": -1, "filename": "rh.osx-0.1.1.tar.gz", "has_sig": false, "md5_digest": "8f833e2e2388b5a2bf4fa2015f66b644", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5613, "upload_time": "2017-06-19T04:22:31", "upload_time_iso_8601": "2017-06-19T04:22:31.989850Z", "url": "https://files.pythonhosted.org/packages/9f/61/0740058bce408bf7ed73d0ddf2b553e12b2d89c3060f29972a8c55904802/rh.osx-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8f833e2e2388b5a2bf4fa2015f66b644", "sha256": "67b305dcb6572b79dcb893d01c4f5bd6ef5b44c7a47cbe1590906dc8af4aac8f"}, "downloads": -1, "filename": "rh.osx-0.1.1.tar.gz", "has_sig": false, "md5_digest": "8f833e2e2388b5a2bf4fa2015f66b644", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5613, "upload_time": "2017-06-19T04:22:31", "upload_time_iso_8601": "2017-06-19T04:22:31.989850Z", "url": "https://files.pythonhosted.org/packages/9f/61/0740058bce408bf7ed73d0ddf2b553e12b2d89c3060f29972a8c55904802/rh.osx-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:02:55 2020"}