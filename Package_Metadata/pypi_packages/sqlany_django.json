{"info": {"author": "Graeme Perrow", "author_email": "graeme.perrow@sap.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.4", "Programming Language :: Python :: 2.5", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.0", "Programming Language :: Python :: 3.1", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Topic :: Database", "Topic :: Software Development :: Libraries :: Python Modules"], "description": ".. ***************************************************************************\n.. Copyright (c) 2015 SAP AG or an SAP affiliate company. All rights reserved.\n.. ***************************************************************************\n\nSQL Anywhere Django Driver\n==========================\nThis is a SQL Anywhere database backend for Django. The backend is\ndistributed as a stand-alone python module. This backend has been\ntested with SQL Anywhere versions 12, 16, and 17 using Django versions 1.1.4, \n1.2.7, 1.3.7, 1.4.10, 1.5.5, 1.6.1, 1.7.1, and 1.8.5.\n\n#. Install the required software\n\n    (a) SQL Anywhere 12.0.0 (or higher)\n\n       The SQL Anywhere Web Edition is a free, full-featured version for\n       development and deployment of browser based applications. If you don't\n       already have a license for SQL Anywhere, the Web Edition is a great\n       place to start. Get the Web Edition at\n       http://www.sybase.com/detail?id=1057560\n    \n    (b) Python (2.4 or greater)\n\n       Install Python if you don't already have it installed. We recommend\n       Python 2.7 but any version greater than 2.4 is supported. Python 3 is\n       supported in Django 1.6 and later. You can download python from\n       http://www.python.org/download/\n    \n       If you are running on Linux you will most likely also be able to find\n       python through your distribution's package management system.\n    \n    (c) Python setuptools\n   \n       The setuptools project for python acts as a package manager for Python\n       code. Using setuptools will make it trivial to install the correct\n       version of Django to use with SQL Anywhere. You can get setuptools for\n       python from http://pypi.python.org/pypi/setuptools/\n    \n       Again, if you are running on Linux you most likely be able to find\n       setuptools through your distribution's package management\n       system. This package is called \"python-setuptools\" on Ubuntu and\n       \"python-setuptools-devel\" on Fedora.\n    \n    (d) Django\n    \n       Once you have installed setuptools, installing Django is a snap, simply run::\n    \n           $ easy_install Django\n\n       If you want a specific version of Django, you can give the version using\n       the == syntax. For example, if you want 1.6.1, you can use::\n    \n           $ easy_install Django==1.6.1\n\n    (e) Python SQL Anywhere Database Interface\n    \n       If you are using pip to install the SQL Anywhere Django driver, you can\n       skip this step since the SQL Anywhere Python driver will be installed\n       as part of that step.\n\n       The SQL Anywhere Database Interface for Python provides a Database API v2\n       compliant driver (see Python PEP 249) for accessing SQL Anywhere\n       databases from Python. The SQL Anywhere backend for Django is built on\n       top of this interface so installing it is required.\n    \n       You can use pip to make this easy::\n\n           pip install sqlanydb\n\n       Alternatively, you can obtain the Python SQL Anywhere Database Interface \n       from https://github.com/sqlanywhere/sqlanydb. Install the driver by\n       downloading the source and running the following command::\n    \n           $ python setup.py install\n\n    (f) SQL Anywhere Django Backend\n    \n        Again, use pip to install this easily::\n\n           pip install sqlany-django\n\n\tThis will install the SQL Anywhere python driver if it was not already\n\tinstalled.\n\n        Or you can obtain the SQL Anywhere Database backend for Django from\n        https://github.com/sqlanywhere/sqlany-django/. Install the backend by\n\tdownloading the source and running the following command::\n    \n           $ python setup.py install\n\n#. Setup your environment\n\n    (Linux/Unix/Mac OS X only)\n    \n    SQL Anywhere requires several environment variables to be set to run\n    correctly -- the most important of which are PATH and\n    LD_LIBRARY_PATH. The SQL Anywhere install creates a file named\n    sa_config.sh to set all necessary environment variables automatically\n    (Note the file is named sa_config.csh if you are using a csh\n    derivative as your shell).\n    \n    This file is located in the \"bin32\" and/or the \"bin64\" directories of\n    your install. Before trying to run the SQL Anywhere server or connect\n    to a running server in a given shell you should make sure to source\n    the file (with the \".\" command) corresponding to the bitness of the\n    SQL Anywhere binaries you want to use. For example, if you are running 64-bit\n    software and the product is installed in /opt/sqlanywhere16 you should run::\n    \n        $ . /opt/sqlanywhere16/bin64/sa_config.sh\n\n#. Create a database\n\n    Issue the following command to create a new database to use with\n    Django. Note that we are specifying the UCA collation so that that CHAR\n    columns in the database will support unicode strings. ::\n    \n       $ dbinit -z UCA django.db\n    \n    If all goes well SQL Anywhere will have created a new database file\n    named 'django.db' in the directory where you ran the dbinit\n    command. Feel free to move this database file to any location you\n    want. You can even copy it to a machine running a different operating\n    system if you wish.\n\n#. Start the Database Server\n\n    SQL Anywhere includes two different database servers -- The personal\n    server (dbeng12/dbeng16) and the network server (dbsrv12/dbsrv16). Both\n    servers support the same complete set of features except that the\n    personal server is limited to running on one CPU, allows a maximum of\n    10 concurrent connections and does not accept network connections from\n    other machines. We will use the network server for our example. ::\n    \n       $ dbsrv16 django.db\n    \n#. Configure Django\n\n    Creating a new Django site and configuring it to use SQL Anywhere is\n    very easy. First create the site in the normal fashion::\n    \n        $ django-admin.py startproject mysite\n    \n    Then edit the file mysite/mysite/settings.py and change the DATABASES\n    setting to match what is given below::\n    \n        DATABASES = {\n\t  'default' : {\n \t      'ENGINE': 'sqlany_django',\n\t      'NAME': 'django',\n\t      'USER': 'dba',\n\t      'PASSWORD': 'sql',\n\t      'HOST': 'myhost',\n\t      'PORT': 'portnum'\n\t  }\n        }\n\n    Here's how the parameters correspond to SQL Anywhere connection parameters:\n    \n       * NAME = DatabaseName (DBN)\n       * USER = Userid (UID)\n       * PASSWORD = Password (PWD)\n       * HOST = Host\n       * PORT = (port number in host, i.e. myhost:portnum)\n\n    If you need to specify other connection parameters (eg. ENG), \n    you can set a value with the key \"OPTIONS\", like this::\n    \n       DATABASES = {\n\t  'default' : {\n \t      'ENGINE': 'sqlany_django',\n\t      'NAME': 'django',\n\t      'USER': 'dba',\n\t      'PASSWORD': 'sql',\n\t      'OPTIONS': {'eng': 'django'}\n\t  }\n       }\n\n    HOST and PORT default to 'localhost' and '2638'. If you want to use shared \n    memory, set the HOST and PORT values to None::\n\n       DATABASES = {\n\t  'default' : {\n \t      'ENGINE': 'sqlany_django',\n\t      'NAME': 'django',\n\t      'USER': 'dba',\n\t      'PASSWORD': 'sql',\n\t      'OPTIONS': {'eng': 'django'},\n\t      'HOST': None,\n\t      'PORT': None\n\t  }\n       }\n\n    Alternatively, you can set the parameters in an ODBC data source using the \n    dbdsn utility and then specify the DSN connection parameter. The ENGINE \n    parameter must still be specified. Any other parameters (eg. USER, HOST, etc.)\n    that are specified will override the value in the DSN. For example::\n\n       DATABASES = {\n\t  'default' : {\n \t      'ENGINE': 'sqlany_django',\n\t      'OPTIONS': {'dsn': 'my_django_dsn'}\n\t  }\n       }\n    \n    Note: SQL Anywhere allows you to run several database servers on one\n    machine. For this reason you should always specify the server you want\n    to connect to as well as the database name. However if you want to connect to\n    a server running in a SA OnDemand (cloud) environment, you should specify the\n    NAME and HOST (and optionally PORT) options, and *not* specify the server name.\n    \n#. Test to make sure everything is working\n    \n    The SQL Anywhere database backend for Django makes use of the Python\n    SQL Anywhere Database interface. We first want to test that this\n    interface is working correctly before testing Django connectivity\n    itself. Create a file named test_sqlany.py with the following\n    contents::\n    \n       import sqlanydb\n       conn = sqlanydb.connect(uid='dba', pwd='sql', eng='django', dbn='django')\n       curs = conn.cursor()\n       curs.execute(\"select 'Hello, world!'\")\n       print \"SQL Anywhere says: %s\" % curs.fetchone()\n       curs.close()\n       conn.close()\n    \n    Run the test script and ensure that you get the expected output::\n    \n       $ python test_sqlany.py\n       SQL Anywhere says: Hello, world!\n    \n    To test that Django can make use of the SQL Anywhere Database backend\n    simply change to the \"mysite\" directory created in step 5 and ask\n    Django to create the tables for the default applications. ::\n    \n       $ python manage.py syncdb\n    \n    If you don't receive any errors at this point then\n    congratulations. Django is now correctly configured to use SQL\n    Anywhere as a backend.\n    \n#. What to do if you have problems?\n\n    If you run into problems, don't worry. First try re-reading the\n    instructions above and make sure you haven't missed a step. If you are\n    still having issues here are a few resources to help you figure\n    out what went wrong. You can consult the documentation, or post to a\n    forum where many of the SQL Anywhere engineers hang out.\n    \n    | SQL Anywhere Online Documentation: http://dcx.sap.com/\n    | SQL Anywhere Development Forum: http://sqlanywhere-forum.sap.com/\n    \n#. Where to go from here?\n\n    SQL Anywhere should now be successfully configured as a backend for\n    your Django site. To learn more about creating web applications with\n    Django try the excellent series of tutorials provided by the Django\n    project:\n    http://docs.djangoproject.com/en/dev/intro/tutorial01/#intro-tutorial01\n\nLicense\n-------\nThis package is licensed under the terms of the license described in \nthe LICENSE file.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/sqlanywhere/sqlany-django", "keywords": null, "license": "New BSD", "maintainer": null, "maintainer_email": null, "name": "sqlany_django", "package_url": "https://pypi.org/project/sqlany_django/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/sqlany_django/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/sqlanywhere/sqlany-django"}, "release_url": "https://pypi.org/project/sqlany_django/1.13/", "requires_dist": null, "requires_python": null, "summary": "SQL Anywhere database backend for Django", "version": "1.13", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This is a SQL Anywhere database backend for Django. The backend is\ndistributed as a stand-alone python module. This backend has been\ntested with SQL Anywhere versions 12, 16, and 17 using Django versions 1.1.4,\n1.2.7, 1.3.7, 1.4.10, 1.5.5, 1.6.1, 1.7.1, and 1.8.5.</p>\n<ol>\n<li><p>Install the required software</p>\n<blockquote>\n<ol>\n<li>SQL Anywhere 12.0.0 (or higher)</li>\n</ol>\n<blockquote>\n<p>The SQL Anywhere Web Edition is a free, full-featured version for\ndevelopment and deployment of browser based applications. If you don\u2019t\nalready have a license for SQL Anywhere, the Web Edition is a great\nplace to start. Get the Web Edition at\n<a href=\"http://www.sybase.com/detail?id=1057560\" rel=\"nofollow\">http://www.sybase.com/detail?id=1057560</a></p>\n</blockquote>\n<ol>\n<li>Python (2.4 or greater)</li>\n</ol>\n<blockquote>\n<p>Install Python if you don\u2019t already have it installed. We recommend\nPython 2.7 but any version greater than 2.4 is supported. Python 3 is\nsupported in Django 1.6 and later. You can download python from\n<a href=\"http://www.python.org/download/\" rel=\"nofollow\">http://www.python.org/download/</a></p>\n<p>If you are running on Linux you will most likely also be able to find\npython through your distribution\u2019s package management system.</p>\n</blockquote>\n<ol>\n<li>Python setuptools</li>\n</ol>\n<blockquote>\n<p>The setuptools project for python acts as a package manager for Python\ncode. Using setuptools will make it trivial to install the correct\nversion of Django to use with SQL Anywhere. You can get setuptools for\npython from <a href=\"http://pypi.python.org/pypi/setuptools/\" rel=\"nofollow\">http://pypi.python.org/pypi/setuptools/</a></p>\n<p>Again, if you are running on Linux you most likely be able to find\nsetuptools through your distribution\u2019s package management\nsystem. This package is called \u201cpython-setuptools\u201d on Ubuntu and\n\u201cpython-setuptools-devel\u201d on Fedora.</p>\n</blockquote>\n<ol>\n<li>Django</li>\n</ol>\n<blockquote>\n<p>Once you have installed setuptools, installing Django is a snap, simply run:</p>\n<pre>$ easy_install Django\n</pre>\n<p>If you want a specific version of Django, you can give the version using\nthe == syntax. For example, if you want 1.6.1, you can use:</p>\n<pre>$ easy_install Django==1.6.1\n</pre>\n</blockquote>\n<ol>\n<li>Python SQL Anywhere Database Interface</li>\n</ol>\n<blockquote>\n<p>If you are using pip to install the SQL Anywhere Django driver, you can\nskip this step since the SQL Anywhere Python driver will be installed\nas part of that step.</p>\n<p>The SQL Anywhere Database Interface for Python provides a Database API v2\ncompliant driver (see Python PEP 249) for accessing SQL Anywhere\ndatabases from Python. The SQL Anywhere backend for Django is built on\ntop of this interface so installing it is required.</p>\n<p>You can use pip to make this easy:</p>\n<pre>pip install sqlanydb\n</pre>\n<p>Alternatively, you can obtain the Python SQL Anywhere Database Interface\nfrom <a href=\"https://github.com/sqlanywhere/sqlanydb\" rel=\"nofollow\">https://github.com/sqlanywhere/sqlanydb</a>. Install the driver by\ndownloading the source and running the following command:</p>\n<pre>$ python setup.py install\n</pre>\n</blockquote>\n<ol>\n<li><p>SQL Anywhere Django Backend</p>\n<p>Again, use pip to install this easily:</p>\n<pre>pip install sqlany-django\n</pre>\n<p>This will install the SQL Anywhere python driver if it was not already\ninstalled.</p>\n<p>Or you can obtain the SQL Anywhere Database backend for Django from\n<a href=\"https://github.com/sqlanywhere/sqlany-django/\" rel=\"nofollow\">https://github.com/sqlanywhere/sqlany-django/</a>. Install the backend by\ndownloading the source and running the following command:</p>\n<pre>$ python setup.py install\n</pre>\n</li>\n</ol>\n</blockquote>\n</li>\n<li><p>Setup your environment</p>\n<blockquote>\n<p>(Linux/Unix/Mac OS X only)</p>\n<p>SQL Anywhere requires several environment variables to be set to run\ncorrectly \u2013 the most important of which are PATH and\nLD_LIBRARY_PATH. The SQL Anywhere install creates a file named\nsa_config.sh to set all necessary environment variables automatically\n(Note the file is named sa_config.csh if you are using a csh\nderivative as your shell).</p>\n<p>This file is located in the \u201cbin32\u201d and/or the \u201cbin64\u201d directories of\nyour install. Before trying to run the SQL Anywhere server or connect\nto a running server in a given shell you should make sure to source\nthe file (with the \u201c.\u201d command) corresponding to the bitness of the\nSQL Anywhere binaries you want to use. For example, if you are running 64-bit\nsoftware and the product is installed in /opt/sqlanywhere16 you should run:</p>\n<pre>$ . /opt/sqlanywhere16/bin64/sa_config.sh\n</pre>\n</blockquote>\n</li>\n<li><p>Create a database</p>\n<blockquote>\n<p>Issue the following command to create a new database to use with\nDjango. Note that we are specifying the UCA collation so that that CHAR\ncolumns in the database will support unicode strings.</p>\n<pre>$ dbinit -z UCA django.db\n</pre>\n<p>If all goes well SQL Anywhere will have created a new database file\nnamed \u2018django.db\u2019 in the directory where you ran the dbinit\ncommand. Feel free to move this database file to any location you\nwant. You can even copy it to a machine running a different operating\nsystem if you wish.</p>\n</blockquote>\n</li>\n<li><p>Start the Database Server</p>\n<blockquote>\n<p>SQL Anywhere includes two different database servers \u2013 The personal\nserver (dbeng12/dbeng16) and the network server (dbsrv12/dbsrv16). Both\nservers support the same complete set of features except that the\npersonal server is limited to running on one CPU, allows a maximum of\n10 concurrent connections and does not accept network connections from\nother machines. We will use the network server for our example.</p>\n<pre>$ dbsrv16 django.db\n</pre>\n</blockquote>\n</li>\n<li><p>Configure Django</p>\n<blockquote>\n<p>Creating a new Django site and configuring it to use SQL Anywhere is\nvery easy. First create the site in the normal fashion:</p>\n<pre>$ django-admin.py startproject mysite\n</pre>\n<p>Then edit the file mysite/mysite/settings.py and change the DATABASES\nsetting to match what is given below:</p>\n<pre>DATABASES = {\n  'default' : {\n      'ENGINE': 'sqlany_django',\n      'NAME': 'django',\n      'USER': 'dba',\n      'PASSWORD': 'sql',\n      'HOST': 'myhost',\n      'PORT': 'portnum'\n  }\n}\n</pre>\n<p>Here\u2019s how the parameters correspond to SQL Anywhere connection parameters:</p>\n<blockquote>\n<ul>\n<li>NAME = DatabaseName (DBN)</li>\n<li>USER = Userid (UID)</li>\n<li>PASSWORD = Password (PWD)</li>\n<li>HOST = Host</li>\n<li>PORT = (port number in host, i.e. myhost:portnum)</li>\n</ul>\n</blockquote>\n<p>If you need to specify other connection parameters (eg. ENG),\nyou can set a value with the key \u201cOPTIONS\u201d, like this:</p>\n<pre>DATABASES = {\n   'default' : {\n       'ENGINE': 'sqlany_django',\n       'NAME': 'django',\n       'USER': 'dba',\n       'PASSWORD': 'sql',\n       'OPTIONS': {'eng': 'django'}\n   }\n}\n</pre>\n<p>HOST and PORT default to \u2018localhost\u2019 and \u20182638\u2019. If you want to use shared\nmemory, set the HOST and PORT values to None:</p>\n<pre>DATABASES = {\n   'default' : {\n       'ENGINE': 'sqlany_django',\n       'NAME': 'django',\n       'USER': 'dba',\n       'PASSWORD': 'sql',\n       'OPTIONS': {'eng': 'django'},\n       'HOST': None,\n       'PORT': None\n   }\n}\n</pre>\n<p>Alternatively, you can set the parameters in an ODBC data source using the\ndbdsn utility and then specify the DSN connection parameter. The ENGINE\nparameter must still be specified. Any other parameters (eg. USER, HOST, etc.)\nthat are specified will override the value in the DSN. For example:</p>\n<pre>DATABASES = {\n   'default' : {\n       'ENGINE': 'sqlany_django',\n       'OPTIONS': {'dsn': 'my_django_dsn'}\n   }\n}\n</pre>\n<p>Note: SQL Anywhere allows you to run several database servers on one\nmachine. For this reason you should always specify the server you want\nto connect to as well as the database name. However if you want to connect to\na server running in a SA OnDemand (cloud) environment, you should specify the\nNAME and HOST (and optionally PORT) options, and <em>not</em> specify the server name.</p>\n</blockquote>\n</li>\n<li><p>Test to make sure everything is working</p>\n<blockquote>\n<p>The SQL Anywhere database backend for Django makes use of the Python\nSQL Anywhere Database interface. We first want to test that this\ninterface is working correctly before testing Django connectivity\nitself. Create a file named test_sqlany.py with the following\ncontents:</p>\n<pre>import sqlanydb\nconn = sqlanydb.connect(uid='dba', pwd='sql', eng='django', dbn='django')\ncurs = conn.cursor()\ncurs.execute(\"select 'Hello, world!'\")\nprint \"SQL Anywhere says: %s\" % curs.fetchone()\ncurs.close()\nconn.close()\n</pre>\n<p>Run the test script and ensure that you get the expected output:</p>\n<pre>$ python test_sqlany.py\nSQL Anywhere says: Hello, world!\n</pre>\n<p>To test that Django can make use of the SQL Anywhere Database backend\nsimply change to the \u201cmysite\u201d directory created in step 5 and ask\nDjango to create the tables for the default applications.</p>\n<pre>$ python manage.py syncdb\n</pre>\n<p>If you don\u2019t receive any errors at this point then\ncongratulations. Django is now correctly configured to use SQL\nAnywhere as a backend.</p>\n</blockquote>\n</li>\n<li><p>What to do if you have problems?</p>\n<blockquote>\n<p>If you run into problems, don\u2019t worry. First try re-reading the\ninstructions above and make sure you haven\u2019t missed a step. If you are\nstill having issues here are a few resources to help you figure\nout what went wrong. You can consult the documentation, or post to a\nforum where many of the SQL Anywhere engineers hang out.</p>\n<div>\n<div>SQL Anywhere Online Documentation: <a href=\"http://dcx.sap.com/\" rel=\"nofollow\">http://dcx.sap.com/</a></div>\n<div>SQL Anywhere Development Forum: <a href=\"http://sqlanywhere-forum.sap.com/\" rel=\"nofollow\">http://sqlanywhere-forum.sap.com/</a></div>\n</div>\n</blockquote>\n</li>\n<li><p>Where to go from here?</p>\n<blockquote>\n<p>SQL Anywhere should now be successfully configured as a backend for\nyour Django site. To learn more about creating web applications with\nDjango try the excellent series of tutorials provided by the Django\nproject:\n<a href=\"http://docs.djangoproject.com/en/dev/intro/tutorial01/#intro-tutorial01\" rel=\"nofollow\">http://docs.djangoproject.com/en/dev/intro/tutorial01/#intro-tutorial01</a></p>\n</blockquote>\n</li>\n</ol>\n<div id=\"license\">\n<h2>License</h2>\n<p>This package is licensed under the terms of the license described in\nthe LICENSE file.</p>\n</div>\n\n          </div>"}, "last_serial": 2100634, "releases": {"1.10": [{"comment_text": "", "digests": {"md5": "40d095ba86c730df7fd95cac6db8b8a1", "sha256": "c4d7542b228f8dcdbe190ca60596c4957f7ffad5ec4e14259a6e3748cfe31893"}, "downloads": -1, "filename": "sqlany_django-1.10.tar.gz", "has_sig": false, "md5_digest": "40d095ba86c730df7fd95cac6db8b8a1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18394, "upload_time": "2015-10-22T17:58:11", "upload_time_iso_8601": "2015-10-22T17:58:11.656826Z", "url": "https://files.pythonhosted.org/packages/2f/b3/e47419f808a8cb1198132fcc3478bfdd93d2403a82ea3ceab0e40d788fdf/sqlany_django-1.10.tar.gz", "yanked": false}], "1.11": [{"comment_text": "", "digests": {"md5": "a2fd49a34cd867012dcecb412c606b6f", "sha256": "9ea8babd6f66a9c69fffbccf541fa3777e8953cf6a8067ba09a9369f590d868e"}, "downloads": -1, "filename": "sqlany_django-1.11-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a2fd49a34cd867012dcecb412c606b6f", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 23535, "upload_time": "2015-11-04T14:53:25", "upload_time_iso_8601": "2015-11-04T14:53:25.831694Z", "url": "https://files.pythonhosted.org/packages/20/d5/f61502c509cf4ac8e9c49ede98449400c358ed3d27a9dc4a0325e26d567d/sqlany_django-1.11-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "92fc664a07b8c7e45a420e6a64962627", "sha256": "81eebcb758128cbada82388049e9304ac000714047580ff666a3d227113701de"}, "downloads": -1, "filename": "sqlany_django-1.11.tar.gz", "has_sig": false, "md5_digest": "92fc664a07b8c7e45a420e6a64962627", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18741, "upload_time": "2015-11-04T14:53:21", "upload_time_iso_8601": "2015-11-04T14:53:21.190983Z", "url": "https://files.pythonhosted.org/packages/3f/e6/d6ceac319596d08afaa3fb6021142afd77aa2f00efa32a82be9bfce3160b/sqlany_django-1.11.tar.gz", "yanked": false}], "1.12": [{"comment_text": "", "digests": {"md5": "c506cf6bde2eea2d2b9b705617bfff34", "sha256": "deb21cbc2fe2971d35da59267105c34462b85f83ea2d1da1f26eaa5cd196d16b"}, "downloads": -1, "filename": "sqlany_django-1.12-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c506cf6bde2eea2d2b9b705617bfff34", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 23520, "upload_time": "2015-11-09T14:41:31", "upload_time_iso_8601": "2015-11-09T14:41:31.333851Z", "url": "https://files.pythonhosted.org/packages/0f/86/84b321c99bc1b6c51efa67b5639b77a78512397140e319c26f29a97455b0/sqlany_django-1.12-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b54fab6d100028918f2cef3a657e2768", "sha256": "8f6bd297a0d3efe46619efcefe573e88c1ae04d1150a01584b7a050cf693b653"}, "downloads": -1, "filename": "sqlany_django-1.12.tar.gz", "has_sig": false, "md5_digest": "b54fab6d100028918f2cef3a657e2768", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18768, "upload_time": "2015-11-09T14:41:25", "upload_time_iso_8601": "2015-11-09T14:41:25.627542Z", "url": "https://files.pythonhosted.org/packages/04/56/62d5c070135461178d783f3e4ebb2291982e053b8e0c455e6b3b7d90d4cd/sqlany_django-1.12.tar.gz", "yanked": false}], "1.13": [{"comment_text": "", "digests": {"md5": "07b3834db249e1c714ab6653937a3cd2", "sha256": "a5a792a0b5ed61583f1ad630b09dedbbd8d693c31ad38fc2cde5f5f12c540a61"}, "downloads": -1, "filename": "sqlany_django-1.13-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "07b3834db249e1c714ab6653937a3cd2", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 23586, "upload_time": "2016-05-05T12:37:27", "upload_time_iso_8601": "2016-05-05T12:37:27.420189Z", "url": "https://files.pythonhosted.org/packages/09/46/29bc0eb9eb68d0ec5f6eb4d57196268d8c93474a79d89811fcd767258761/sqlany_django-1.13-py2.py3-none-any.whl", "yanked": false}], "1.4": [{"comment_text": "", "digests": {"md5": "85c4bd3e5f3a49adf342dacb658e0ce1", "sha256": "97cc0497cce1c243673b78c31f2e42ea65726452d2d5a0d2aa9008fbd7a088f5"}, "downloads": -1, "filename": "sqlany_django-1.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "85c4bd3e5f3a49adf342dacb658e0ce1", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 21059, "upload_time": "2013-11-26T15:25:55", "upload_time_iso_8601": "2013-11-26T15:25:55.678973Z", "url": "https://files.pythonhosted.org/packages/71/a2/bcc358fd40fff62846b92e6d5e2d4dd4d0dd0fa3bc7720caba2e3ea1ff09/sqlany_django-1.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9c4aa4612cc9c8536920d04fa84fab16", "sha256": "fc76fe861069aa317921b2df546796dd6153f6fc8db7ffbcc58e9b03b1c89226"}, "downloads": -1, "filename": "sqlany_django-1.4.tar.gz", "has_sig": false, "md5_digest": "9c4aa4612cc9c8536920d04fa84fab16", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15882, "upload_time": "2013-11-26T15:25:52", "upload_time_iso_8601": "2013-11-26T15:25:52.283874Z", "url": "https://files.pythonhosted.org/packages/c3/69/ed7a1639f37ba57e126da294dbc7359556fc83c0ed72c39b8eb4a7a89184/sqlany_django-1.4.tar.gz", "yanked": false}], "1.5": [{"comment_text": "", "digests": {"md5": "66bc1baf30f231a7dee0544b93937dae", "sha256": "5bf748e92d66d53d8487e9d2c068ab132c82040f1964053a22ace01d94246a6c"}, "downloads": -1, "filename": "sqlany_django-1.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "66bc1baf30f231a7dee0544b93937dae", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 21464, "upload_time": "2014-09-03T18:48:48", "upload_time_iso_8601": "2014-09-03T18:48:48.405258Z", "url": "https://files.pythonhosted.org/packages/c1/de/5326174eb9d015b73e3fd9ba10e0cccbf882fcf64cc4580e56545fea243f/sqlany_django-1.5-py2.py3-none-any.whl", "yanked": false}], "1.6": [{"comment_text": "", "digests": {"md5": "031d6098846e80cfc62a243565e00bf5", "sha256": "ef957ea2868bf3f20c0513050bb45b8a76f2cb4e53297b228d33b371f7a013d5"}, "downloads": -1, "filename": "sqlany_django-1.6.tar.gz", "has_sig": false, "md5_digest": "031d6098846e80cfc62a243565e00bf5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16664, "upload_time": "2015-01-06T16:35:21", "upload_time_iso_8601": "2015-01-06T16:35:21.627799Z", "url": "https://files.pythonhosted.org/packages/94/75/fda2e46a365a8b87edc50bb3cd48d00314f356e2af54636d93fc516cd11d/sqlany_django-1.6.tar.gz", "yanked": false}], "1.7": [{"comment_text": "", "digests": {"md5": "dff8797ccb2868df9316611161f92808", "sha256": "6ebdf11a8748fb94fd4417959555dd7a819cf7c942a0fd3b7ccfb65f4bb7d044"}, "downloads": -1, "filename": "sqlany_django-1.7-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "dff8797ccb2868df9316611161f92808", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 22859, "upload_time": "2015-01-07T01:23:59", "upload_time_iso_8601": "2015-01-07T01:23:59.870367Z", "url": "https://files.pythonhosted.org/packages/20/fb/0333465ddaf46797b6ddd635ace20b900cd23d3864d544cf6a4a202cbc24/sqlany_django-1.7-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a996802ab511bb145f2c2e590c8c8500", "sha256": "e181829800cdedc41a50222a9c7e65a29d96fe9b44c6e434f5eda0ab934f1525"}, "downloads": -1, "filename": "sqlany_django-1.7.tar.gz", "has_sig": false, "md5_digest": "a996802ab511bb145f2c2e590c8c8500", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17098, "upload_time": "2015-01-07T01:23:56", "upload_time_iso_8601": "2015-01-07T01:23:56.904821Z", "url": "https://files.pythonhosted.org/packages/2d/6b/aa1fa864bfc34b94a1056c3c00ad6a828c4e8b5c25def301eb3e2224f063/sqlany_django-1.7.tar.gz", "yanked": false}], "1.8": [{"comment_text": "", "digests": {"md5": "42ecb2725e42b83ca46d8ac7939a542e", "sha256": "ee41202cdc3d2f9ac0e24930917a99b97a1187138852afb9c84526f688dbb65a"}, "downloads": -1, "filename": "sqlany_django-1.8-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "42ecb2725e42b83ca46d8ac7939a542e", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 22867, "upload_time": "2015-01-07T21:39:03", "upload_time_iso_8601": "2015-01-07T21:39:03.542867Z", "url": "https://files.pythonhosted.org/packages/60/63/48ac59e029c88d3e07eb9b1b0e2547430f2b0eddc393abc7ba1256bfb249/sqlany_django-1.8-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2c8ca0891582453e250be0d204dd860c", "sha256": "c552b6bc7d311d6688f957fed39e73877e5ebfcaa6ab77bbeb7fdf904a521137"}, "downloads": -1, "filename": "sqlany_django-1.8.tar.gz", "has_sig": false, "md5_digest": "2c8ca0891582453e250be0d204dd860c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17171, "upload_time": "2015-01-07T21:38:59", "upload_time_iso_8601": "2015-01-07T21:38:59.244486Z", "url": "https://files.pythonhosted.org/packages/05/4a/2220409080094d0e68f483ca5d6fe1f5025d6e4eb1d347a113622bf33038/sqlany_django-1.8.tar.gz", "yanked": false}], "1.9": [{"comment_text": "", "digests": {"md5": "72846cc58bf5d8466466c350c2bca792", "sha256": "d1ad62532599e2e99371dae388f09c9c6e56dfc421b7ade3016339fc75d2ab08"}, "downloads": -1, "filename": "sqlany_django-1.9-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "72846cc58bf5d8466466c350c2bca792", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 22861, "upload_time": "2015-04-06T18:11:54", "upload_time_iso_8601": "2015-04-06T18:11:54.991085Z", "url": "https://files.pythonhosted.org/packages/d2/17/d8ad654ca1c78b0688b91d66eb24319d08e0e452caf55a9d34a46361fe96/sqlany_django-1.9-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "07b3834db249e1c714ab6653937a3cd2", "sha256": "a5a792a0b5ed61583f1ad630b09dedbbd8d693c31ad38fc2cde5f5f12c540a61"}, "downloads": -1, "filename": "sqlany_django-1.13-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "07b3834db249e1c714ab6653937a3cd2", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 23586, "upload_time": "2016-05-05T12:37:27", "upload_time_iso_8601": "2016-05-05T12:37:27.420189Z", "url": "https://files.pythonhosted.org/packages/09/46/29bc0eb9eb68d0ec5f6eb4d57196268d8c93474a79d89811fcd767258761/sqlany_django-1.13-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:03:49 2020"}