{"info": {"author": "Di Paola Martin, Di Tomaso Nicolas", "author_email": "no-email@example.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Software Development :: Debuggers"], "description": "|Build Status|\n\nPython GDB MI Parser\n====================\n\n`MI <https://sourceware.org/gdb/onlinedocs/gdb/GDB_002fMI.html>`__ or\nMachine Interface is the new interface to interact with GDB, the GNU\nDebugger, from another program.\n\nThe output of the GDB Machine Interface is line oriented, text based. It\nis compound of small elements that range from strings to dictionaries\n\n``python-gdb-mi`` is simple and quite robust parser for Python 2.x/3.x\nthat can take those lines and transform them into python objects ready\nto be serialized if need to JSON.\n\nOverview\n--------\n\nA GDB MI text can be like this:\n\n.. code:: python\n\n    >>> text = '^done,bkpt={number=\"1\",type=\"breakpoint\",disp=\"keep\",enabled=\"y\",addr=\"0x08048564\",func=\"main\",file=\"myprog.c\",fullname=\"/home/nickrob/myprog.c\",line=\"68\",thread-groups=[\"i1\"],times=\"0\"}\\n'\n\nThis is the kind of message that GDB will print when a breakpoint is\nset.\n\nTo parse it, we need to send this line to our ``Output`` parser using\nthe ``parse_line`` method:\n\n.. code:: python\n\n    >>> from gdb_mi import Output\n\n    >>> out = Output()\n\n    >>> record = out.parse_line(text)\n    >>> record                                #doctest: +NORMALIZE_WHITESPACE\n    {'klass': 'done',\n     'results': {'bkpts': [{'addr': '0x08048564',\n                            'disp': 'keep',\n                            'enabled': 'y',\n                            'file': 'myprog.c',\n                            'fullname': '/home/nickrob/myprog.c',\n                            'func': 'main',\n                            'line': '68',\n                            'number': '1',\n                            'thread-groups': ['i1'],\n                            'times': '0',\n                            'type': 'breakpoint'}]},\n     'token': None,\n     'type': 'Sync'}\n\nIf the output from GDB is not a complete line, ``Output`` can handle it\nanyways doing some buffering. Use ``parse`` instead of ``parse_line`` to\nfeed ``Output``:\n\n.. code:: python\n\n    >>> out.parse(text[:10])     # incomplete line, None returned\n\n    >>> out.parse(text[10:])     # enough data, parse it! doctest: +NORMALIZE_WHITESPACE\n    {'klass': 'done',\n     'results': {'bkpts': [{'addr': '0x08048564',\n                            'disp': 'keep',\n                            'enabled': 'y',\n                            'file': 'myprog.c',\n                            'fullname': '/home/nickrob/myprog.c',\n                            'func': 'main',\n                            'line': '68',\n                            'number': '1',\n                            'thread-groups': ['i1'],\n                            'times': '0',\n                            'type': 'breakpoint'}]},\n     'token': None,\n     'type': 'Sync'}\n\nParsing Results\n---------------\n\nThree types of objects can be returned by ``parse_line`` and ``parse``:\n\n-  ``Stream`` that represents an `output\n   record <https://sourceware.org/gdb/onlinedocs/gdb/GDB_002fMI-Stream-Records.html#GDB_002fMI-Stream-Records>`__\n   from: the console, the target and the log.\n-  ``Record`` that represents or a synchronous `result\n   record <https://sourceware.org/gdb/onlinedocs/gdb/GDB_002fMI-Result-Records.html#GDB_002fMI-Result-Records>`__\n   and or an out of band `asynchronous\n   record <https://sourceware.org/gdb/onlinedocs/gdb/GDB_002fMI-Async-Records.html#GDB_002fMI-Async-Records>`__,\n   used to notify of changes that have happen.\n-  ``(gdb)`` a literal string that represents an empty prompt line.\n\nBoth, ``Stream`` and ``Record`` have a ``as_native`` method to transform\nthem into a composition of Python's dicts and lists.\n\nStreams\n~~~~~~~\n\n.. code:: python\n\n    >>> from gdb_mi import Stream\n\n    >>> text = '~\"GDB rocks!\"\\n'\n    >>> stream = out.parse_line(text)\n    >>> stream      # same as pprint.pprint(stream.as_native())\n    {'stream': 'GDB rocks!', 'type': 'Console'}\n\n    >>> isinstance(stream, Stream)\n    True\n\nThe ``type`` attribute is `one of the\nfollowing <https://sourceware.org/gdb/onlinedocs/gdb/GDB_002fMI-Output-Syntax.html#GDB_002fMI-Output-Syntax>`__,\nfrom the GDB MI's documentation: - ``Console``: output that should be\ndisplayed as is in the console. It is the textual response to a CLI\ncommand. - ``Target``: output produced by the target program. - ``Log``:\noutput text coming from GDB\u2019s internals, for instance messages that\nshould be displayed as part of an error log.\n\nRecords\n~~~~~~~\n\nWe have already seen an example of a ``Record``, in that case it was a\nsynchronous ``result record``:\n\n.. code:: python\n\n    >>> from gdb_mi import Record\n\n    >>> isinstance(record, Record)\n    True\n\n    >>> record.klass, record.type\n    ('done', 'Sync')\n\nThe ``klass`` attribute is `one of the\nfollowing <https://sourceware.org/gdb/onlinedocs/gdb/GDB_002fMI-Result-Records.html#GDB_002fMI-Result-Records>`__:\n``done``, ``running``, ``connected``, ``error`` or ``exit``.\n\nThe ``type`` attribute is ``Sync`` for a ``synchronous result record``.\n\nHere are an example of an ``asynchronous record``:\n\n.. code:: python\n\n    >>> text = '42*stopped,reason=\"breakpoint-hit\",disp=\"keep\",bkptno=\"1\",thread-id=\"0\",frame={addr=\"0x08048564\",func=\"main\",args=[{name=\"argc\",value=\"1\"},{name=\"argv\",value=\"0xbfc4d4d4\"}],file=\"myprog.c\",fullname=\"/home/nickrob/myprog.c\",line=\"68\"}\\n'\n    >>> record = out.parse_line(text)\n    >>> record                                #doctest: +NORMALIZE_WHITESPACE\n    {'klass': 'stopped',\n      'results': {'bkptno': '1',\n                  'disp': 'keep',\n                  'frame': {'addr': '0x08048564',\n                            'args': [{'name': 'argc', 'value': '1'},\n                                     {'name': 'argv', 'value': '0xbfc4d4d4'}],\n                            'file': 'myprog.c',\n                            'fullname': '/home/nickrob/myprog.c',\n                            'func': 'main',\n                            'line': '68'},\n                  'reason': 'breakpoint-hit',\n                  'thread-id': '0'},\n      'token': 42,\n      'type': 'Exec'}\n\n    >>> isinstance(record, Record)\n    True\n\n    >>> record.klass, record.type\n    ('stopped', 'Exec')\n\nFor an ``asynchronous record``, the attribute ``type`` is `one of the\nfollowing <https://sourceware.org/gdb/onlinedocs/gdb/GDB_002fMI-Output-Syntax.html#GDB_002fMI-Output-Syntax>`__\nfor ``AsyncRecord``\\ s: ``Exec``, ``Status`` or ``Notify``.\n\n>From the GDB MI's documentation: - ``Exec``: asynchronous state change\non the target (stopped, started, disappeared). - ``Status``: on-going\nstatus information about the progress of a slow operation. It can be\ndiscarded. - ``Notify``: supplementary information that the client\nshould handle (e.g., a new breakpoint information).\n\nBoth kind of records, synchronous and asynchronous, have two additional\nattributes: - ``token``: used by GDB to match the request and the\nresponse. - ``results``: the data contained in the message, it will\ndepend of the GDB message.\n\nInterference from Target\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf you do not redirect the target's output nor send it to a new console\nrunning the GDB ``set new-console on`` command, the output of the target\nwill interfere an confuse the parser.\n\nUnfortunately there is nothing that we can do. Even if we ignore the\nmessage we cannot be sure when a message is safe to be discarded.\n\nFor example, the following C code generates an ambiguous output:\n\n.. code:: c\n\n    printf(\"~looks like a GDB stream but it isn't\\n\");\n\nEven if you think that it is improbable, here is a quite common problem:\n\n.. code:: c\n\n    printf(\"normal output 42\"); /* no newline at the end */\n    fflush(stdout); /* but we flush to the console anyway */\n\nNow imagine that GDB hits a breakpoint after the ``fflush`` instruction,\nwhat we will see is:\n\n.. code:: python\n\n    >>> text = 'normal output 4242*stopped,reason=\"breakpoint-hit\",<and so on...>\\n'\n\nThe problem is that all those strings are glued together which can lead\nto *nasty bugs*. We could try to use some regexps but it would be too\nfragile (is the ``token`` 42 or 4242?).\n\nInstead we try to warn you if you try to parse something like that:\n\n.. code:: python\n\n    >>> out.parse_line(text)                     #doctest: +IGNORE_EXCEPTION_DETAIL\n    Traceback (most recent call last):\n    ParsingError: Invalid input. Maybe the target's output is interfering with the GDB MI's messages. Try to redirect the target's output to elsewhere or run GDB's 'set new-console on' command. Found at 0 position.\n    Original message:\n      normal output 4242*stopped,reason=\"breakpoint-hit\",<and so on...>\n\nInstall\n-------\n\nJust run:\n\n::\n\n    $ pip install python-gdb-mi\n\nYou will find the ``python-gdb-mi`` package at\n`PyPI <https://pypi.python.org/pypi/python-gdb-mi>`__\n\nWorkarounds for GDB MI's issues\n-------------------------------\n\nThere are some issues in the output of GDB. ``python-gdb-mi`` tries to\nfix them implementing some minor changes in the GDB's output as\nworkarounds.\n\nSee the issues and the implemented fixes in the `workarounds\ndoctest <regress/workarounds.rst>`__\n\nHacking/Contributing\n--------------------\n\nGo ahead! Clone the repository, do a small fix/enhancement, run\n``make test`` to ensure that everything is working as expected and then\npropose your Pull Request!\n\n.. |Build Status| image:: https://travis-ci.org/hydra-dbg/python-gdb-mi.svg?branch=master\n   :target: https://travis-ci.org/hydra-dbg/python-gdb-mi\n\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/hydra-dbg/python-gdb-mi", "keywords": "debugger gdb", "license": "GNU LGPLv3", "maintainer": "", "maintainer_email": "", "name": "python-gdb-mi", "package_url": "https://pypi.org/project/python-gdb-mi/", "platform": "", "project_url": "https://pypi.org/project/python-gdb-mi/", "project_urls": {"Homepage": "https://github.com/hydra-dbg/python-gdb-mi"}, "release_url": "https://pypi.org/project/python-gdb-mi/1.0.1/", "requires_dist": null, "requires_python": ">=2.6", "summary": "A parser for GDB Machine Interface (MI) events.", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/hydra-dbg/python-gdb-mi\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ca70471d9c6dd8a1878849b8479fb9eb311aecd5/68747470733a2f2f7472617669732d63692e6f72672f68796472612d6462672f707974686f6e2d6764622d6d692e7376673f6272616e63683d6d6173746572\"></a></p>\n<div id=\"python-gdb-mi-parser\">\n<h2>Python GDB MI Parser</h2>\n<p><a href=\"https://sourceware.org/gdb/onlinedocs/gdb/GDB_002fMI.html\" rel=\"nofollow\">MI</a> or\nMachine Interface is the new interface to interact with GDB, the GNU\nDebugger, from another program.</p>\n<p>The output of the GDB Machine Interface is line oriented, text based. It\nis compound of small elements that range from strings to dictionaries</p>\n<p><tt><span class=\"pre\">python-gdb-mi</span></tt> is simple and quite robust parser for Python 2.x/3.x\nthat can take those lines and transform them into python objects ready\nto be serialized if need to JSON.</p>\n<div id=\"overview\">\n<h3>Overview</h3>\n<p>A GDB MI text can be like this:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s1\">'^done,bkpt={number=\"1\",type=\"breakpoint\",disp=\"keep\",enabled=\"y\",addr=\"0x08048564\",func=\"main\",file=\"myprog.c\",fullname=\"/home/nickrob/myprog.c\",line=\"68\",thread-groups=[\"i1\"],times=\"0\"}</span><span class=\"se\">\\n</span><span class=\"s1\">'</span>\n</pre>\n<p>This is the kind of message that GDB will print when a breakpoint is\nset.</p>\n<p>To parse it, we need to send this line to our <tt>Output</tt> parser using\nthe <tt>parse_line</tt> method:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">gdb_mi</span> <span class=\"kn\">import</span> <span class=\"n\">Output</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"n\">Output</span><span class=\"p\">()</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">record</span> <span class=\"o\">=</span> <span class=\"n\">out</span><span class=\"o\">.</span><span class=\"n\">parse_line</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">record</span>                                <span class=\"c1\">#doctest: +NORMALIZE_WHITESPACE</span>\n<span class=\"p\">{</span><span class=\"s1\">'klass'</span><span class=\"p\">:</span> <span class=\"s1\">'done'</span><span class=\"p\">,</span>\n <span class=\"s1\">'results'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'bkpts'</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"s1\">'addr'</span><span class=\"p\">:</span> <span class=\"s1\">'0x08048564'</span><span class=\"p\">,</span>\n                        <span class=\"s1\">'disp'</span><span class=\"p\">:</span> <span class=\"s1\">'keep'</span><span class=\"p\">,</span>\n                        <span class=\"s1\">'enabled'</span><span class=\"p\">:</span> <span class=\"s1\">'y'</span><span class=\"p\">,</span>\n                        <span class=\"s1\">'file'</span><span class=\"p\">:</span> <span class=\"s1\">'myprog.c'</span><span class=\"p\">,</span>\n                        <span class=\"s1\">'fullname'</span><span class=\"p\">:</span> <span class=\"s1\">'/home/nickrob/myprog.c'</span><span class=\"p\">,</span>\n                        <span class=\"s1\">'func'</span><span class=\"p\">:</span> <span class=\"s1\">'main'</span><span class=\"p\">,</span>\n                        <span class=\"s1\">'line'</span><span class=\"p\">:</span> <span class=\"s1\">'68'</span><span class=\"p\">,</span>\n                        <span class=\"s1\">'number'</span><span class=\"p\">:</span> <span class=\"s1\">'1'</span><span class=\"p\">,</span>\n                        <span class=\"s1\">'thread-groups'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'i1'</span><span class=\"p\">],</span>\n                        <span class=\"s1\">'times'</span><span class=\"p\">:</span> <span class=\"s1\">'0'</span><span class=\"p\">,</span>\n                        <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'breakpoint'</span><span class=\"p\">}]},</span>\n <span class=\"s1\">'token'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'Sync'</span><span class=\"p\">}</span>\n</pre>\n<p>If the output from GDB is not a complete line, <tt>Output</tt> can handle it\nanyways doing some buffering. Use <tt>parse</tt> instead of <tt>parse_line</tt> to\nfeed <tt>Output</tt>:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">out</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">[:</span><span class=\"mi\">10</span><span class=\"p\">])</span>     <span class=\"c1\"># incomplete line, None returned</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">out</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">:])</span>     <span class=\"c1\"># enough data, parse it! doctest: +NORMALIZE_WHITESPACE</span>\n<span class=\"p\">{</span><span class=\"s1\">'klass'</span><span class=\"p\">:</span> <span class=\"s1\">'done'</span><span class=\"p\">,</span>\n <span class=\"s1\">'results'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'bkpts'</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"s1\">'addr'</span><span class=\"p\">:</span> <span class=\"s1\">'0x08048564'</span><span class=\"p\">,</span>\n                        <span class=\"s1\">'disp'</span><span class=\"p\">:</span> <span class=\"s1\">'keep'</span><span class=\"p\">,</span>\n                        <span class=\"s1\">'enabled'</span><span class=\"p\">:</span> <span class=\"s1\">'y'</span><span class=\"p\">,</span>\n                        <span class=\"s1\">'file'</span><span class=\"p\">:</span> <span class=\"s1\">'myprog.c'</span><span class=\"p\">,</span>\n                        <span class=\"s1\">'fullname'</span><span class=\"p\">:</span> <span class=\"s1\">'/home/nickrob/myprog.c'</span><span class=\"p\">,</span>\n                        <span class=\"s1\">'func'</span><span class=\"p\">:</span> <span class=\"s1\">'main'</span><span class=\"p\">,</span>\n                        <span class=\"s1\">'line'</span><span class=\"p\">:</span> <span class=\"s1\">'68'</span><span class=\"p\">,</span>\n                        <span class=\"s1\">'number'</span><span class=\"p\">:</span> <span class=\"s1\">'1'</span><span class=\"p\">,</span>\n                        <span class=\"s1\">'thread-groups'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'i1'</span><span class=\"p\">],</span>\n                        <span class=\"s1\">'times'</span><span class=\"p\">:</span> <span class=\"s1\">'0'</span><span class=\"p\">,</span>\n                        <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'breakpoint'</span><span class=\"p\">}]},</span>\n <span class=\"s1\">'token'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'Sync'</span><span class=\"p\">}</span>\n</pre>\n</div>\n<div id=\"parsing-results\">\n<h3>Parsing Results</h3>\n<p>Three types of objects can be returned by <tt>parse_line</tt> and <tt>parse</tt>:</p>\n<ul>\n<li><tt>Stream</tt> that represents an <a href=\"https://sourceware.org/gdb/onlinedocs/gdb/GDB_002fMI-Stream-Records.html#GDB_002fMI-Stream-Records\" rel=\"nofollow\">output\nrecord</a>\nfrom: the console, the target and the log.</li>\n<li><tt>Record</tt> that represents or a synchronous <a href=\"https://sourceware.org/gdb/onlinedocs/gdb/GDB_002fMI-Result-Records.html#GDB_002fMI-Result-Records\" rel=\"nofollow\">result\nrecord</a>\nand or an out of band <a href=\"https://sourceware.org/gdb/onlinedocs/gdb/GDB_002fMI-Async-Records.html#GDB_002fMI-Async-Records\" rel=\"nofollow\">asynchronous\nrecord</a>,\nused to notify of changes that have happen.</li>\n<li><tt>(gdb)</tt> a literal string that represents an empty prompt line.</li>\n</ul>\n<p>Both, <tt>Stream</tt> and <tt>Record</tt> have a <tt>as_native</tt> method to transform\nthem into a composition of Python\u2019s dicts and lists.</p>\n<div id=\"streams\">\n<h4>Streams</h4>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">gdb_mi</span> <span class=\"kn\">import</span> <span class=\"n\">Stream</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s1\">'~\"GDB rocks!\"</span><span class=\"se\">\\n</span><span class=\"s1\">'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">stream</span> <span class=\"o\">=</span> <span class=\"n\">out</span><span class=\"o\">.</span><span class=\"n\">parse_line</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">stream</span>      <span class=\"c1\"># same as pprint.pprint(stream.as_native())</span>\n<span class=\"p\">{</span><span class=\"s1\">'stream'</span><span class=\"p\">:</span> <span class=\"s1\">'GDB rocks!'</span><span class=\"p\">,</span> <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'Console'</span><span class=\"p\">}</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">stream</span><span class=\"p\">,</span> <span class=\"n\">Stream</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n</pre>\n<p>The <tt>type</tt> attribute is <a href=\"https://sourceware.org/gdb/onlinedocs/gdb/GDB_002fMI-Output-Syntax.html#GDB_002fMI-Output-Syntax\" rel=\"nofollow\">one of the\nfollowing</a>,\nfrom the GDB MI\u2019s documentation: - <tt>Console</tt>: output that should be\ndisplayed as is in the console. It is the textual response to a CLI\ncommand. - <tt>Target</tt>: output produced by the target program. - <tt>Log</tt>:\noutput text coming from GDB\u2019s internals, for instance messages that\nshould be displayed as part of an error log.</p>\n</div>\n<div id=\"records\">\n<h4>Records</h4>\n<p>We have already seen an example of a <tt>Record</tt>, in that case it was a\nsynchronous <tt>result record</tt>:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">gdb_mi</span> <span class=\"kn\">import</span> <span class=\"n\">Record</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">record</span><span class=\"p\">,</span> <span class=\"n\">Record</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">record</span><span class=\"o\">.</span><span class=\"n\">klass</span><span class=\"p\">,</span> <span class=\"n\">record</span><span class=\"o\">.</span><span class=\"n\">type</span>\n<span class=\"p\">(</span><span class=\"s1\">'done'</span><span class=\"p\">,</span> <span class=\"s1\">'Sync'</span><span class=\"p\">)</span>\n</pre>\n<p>The <tt>klass</tt> attribute is <a href=\"https://sourceware.org/gdb/onlinedocs/gdb/GDB_002fMI-Result-Records.html#GDB_002fMI-Result-Records\" rel=\"nofollow\">one of the\nfollowing</a>:\n<tt>done</tt>, <tt>running</tt>, <tt>connected</tt>, <tt>error</tt> or <tt>exit</tt>.</p>\n<p>The <tt>type</tt> attribute is <tt>Sync</tt> for a <tt>synchronous result record</tt>.</p>\n<p>Here are an example of an <tt>asynchronous record</tt>:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s1\">'42*stopped,reason=\"breakpoint-hit\",disp=\"keep\",bkptno=\"1\",thread-id=\"0\",frame={addr=\"0x08048564\",func=\"main\",args=[{name=\"argc\",value=\"1\"},{name=\"argv\",value=\"0xbfc4d4d4\"}],file=\"myprog.c\",fullname=\"/home/nickrob/myprog.c\",line=\"68\"}</span><span class=\"se\">\\n</span><span class=\"s1\">'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">record</span> <span class=\"o\">=</span> <span class=\"n\">out</span><span class=\"o\">.</span><span class=\"n\">parse_line</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">record</span>                                <span class=\"c1\">#doctest: +NORMALIZE_WHITESPACE</span>\n<span class=\"p\">{</span><span class=\"s1\">'klass'</span><span class=\"p\">:</span> <span class=\"s1\">'stopped'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'results'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'bkptno'</span><span class=\"p\">:</span> <span class=\"s1\">'1'</span><span class=\"p\">,</span>\n              <span class=\"s1\">'disp'</span><span class=\"p\">:</span> <span class=\"s1\">'keep'</span><span class=\"p\">,</span>\n              <span class=\"s1\">'frame'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'addr'</span><span class=\"p\">:</span> <span class=\"s1\">'0x08048564'</span><span class=\"p\">,</span>\n                        <span class=\"s1\">'args'</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'argc'</span><span class=\"p\">,</span> <span class=\"s1\">'value'</span><span class=\"p\">:</span> <span class=\"s1\">'1'</span><span class=\"p\">},</span>\n                                 <span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'argv'</span><span class=\"p\">,</span> <span class=\"s1\">'value'</span><span class=\"p\">:</span> <span class=\"s1\">'0xbfc4d4d4'</span><span class=\"p\">}],</span>\n                        <span class=\"s1\">'file'</span><span class=\"p\">:</span> <span class=\"s1\">'myprog.c'</span><span class=\"p\">,</span>\n                        <span class=\"s1\">'fullname'</span><span class=\"p\">:</span> <span class=\"s1\">'/home/nickrob/myprog.c'</span><span class=\"p\">,</span>\n                        <span class=\"s1\">'func'</span><span class=\"p\">:</span> <span class=\"s1\">'main'</span><span class=\"p\">,</span>\n                        <span class=\"s1\">'line'</span><span class=\"p\">:</span> <span class=\"s1\">'68'</span><span class=\"p\">},</span>\n              <span class=\"s1\">'reason'</span><span class=\"p\">:</span> <span class=\"s1\">'breakpoint-hit'</span><span class=\"p\">,</span>\n              <span class=\"s1\">'thread-id'</span><span class=\"p\">:</span> <span class=\"s1\">'0'</span><span class=\"p\">},</span>\n  <span class=\"s1\">'token'</span><span class=\"p\">:</span> <span class=\"mi\">42</span><span class=\"p\">,</span>\n  <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'Exec'</span><span class=\"p\">}</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">record</span><span class=\"p\">,</span> <span class=\"n\">Record</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">record</span><span class=\"o\">.</span><span class=\"n\">klass</span><span class=\"p\">,</span> <span class=\"n\">record</span><span class=\"o\">.</span><span class=\"n\">type</span>\n<span class=\"p\">(</span><span class=\"s1\">'stopped'</span><span class=\"p\">,</span> <span class=\"s1\">'Exec'</span><span class=\"p\">)</span>\n</pre>\n<p>For an <tt>asynchronous record</tt>, the attribute <tt>type</tt> is <a href=\"https://sourceware.org/gdb/onlinedocs/gdb/GDB_002fMI-Output-Syntax.html#GDB_002fMI-Output-Syntax\" rel=\"nofollow\">one of the\nfollowing</a>\nfor <tt>AsyncRecord</tt>s: <tt>Exec</tt>, <tt>Status</tt> or <tt>Notify</tt>.</p>\n<p>&gt;From the GDB MI\u2019s documentation: - <tt>Exec</tt>: asynchronous state change\non the target (stopped, started, disappeared). - <tt>Status</tt>: on-going\nstatus information about the progress of a slow operation. It can be\ndiscarded. - <tt>Notify</tt>: supplementary information that the client\nshould handle (e.g., a new breakpoint information).</p>\n<p>Both kind of records, synchronous and asynchronous, have two additional\nattributes: - <tt>token</tt>: used by GDB to match the request and the\nresponse. - <tt>results</tt>: the data contained in the message, it will\ndepend of the GDB message.</p>\n</div>\n<div id=\"interference-from-target\">\n<h4>Interference from Target</h4>\n<p>If you do not redirect the target\u2019s output nor send it to a new console\nrunning the GDB <tt>set <span class=\"pre\">new-console</span> on</tt> command, the output of the target\nwill interfere an confuse the parser.</p>\n<p>Unfortunately there is nothing that we can do. Even if we ignore the\nmessage we cannot be sure when a message is safe to be discarded.</p>\n<p>For example, the following C code generates an ambiguous output:</p>\n<pre><span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"~looks like a GDB stream but it isn't</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">);</span>\n</pre>\n<p>Even if you think that it is improbable, here is a quite common problem:</p>\n<pre><span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"normal output 42\"</span><span class=\"p\">);</span> <span class=\"cm\">/* no newline at the end */</span>\n<span class=\"n\">fflush</span><span class=\"p\">(</span><span class=\"n\">stdout</span><span class=\"p\">);</span> <span class=\"cm\">/* but we flush to the console anyway */</span>\n</pre>\n<p>Now imagine that GDB hits a breakpoint after the <tt>fflush</tt> instruction,\nwhat we will see is:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s1\">'normal output 4242*stopped,reason=\"breakpoint-hit\",&lt;and so on...&gt;</span><span class=\"se\">\\n</span><span class=\"s1\">'</span>\n</pre>\n<p>The problem is that all those strings are glued together which can lead\nto <em>nasty bugs</em>. We could try to use some regexps but it would be too\nfragile (is the <tt>token</tt> 42 or 4242?).</p>\n<p>Instead we try to warn you if you try to parse something like that:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">out</span><span class=\"o\">.</span><span class=\"n\">parse_line</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">)</span>                     <span class=\"c1\">#doctest: +IGNORE_EXCEPTION_DETAIL</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n<span class=\"n\">ParsingError</span><span class=\"p\">:</span> <span class=\"n\">Invalid</span> <span class=\"nb\">input</span><span class=\"o\">.</span> <span class=\"n\">Maybe</span> <span class=\"n\">the</span> <span class=\"n\">target</span><span class=\"s1\">'s output is interfering with the GDB MI'</span><span class=\"n\">s</span> <span class=\"n\">messages</span><span class=\"o\">.</span> <span class=\"n\">Try</span> <span class=\"n\">to</span> <span class=\"n\">redirect</span> <span class=\"n\">the</span> <span class=\"n\">target</span><span class=\"s1\">'s output to elsewhere or run GDB'</span><span class=\"n\">s</span> <span class=\"s1\">'set new-console on'</span> <span class=\"n\">command</span><span class=\"o\">.</span> <span class=\"n\">Found</span> <span class=\"n\">at</span> <span class=\"mi\">0</span> <span class=\"n\">position</span><span class=\"o\">.</span>\n<span class=\"n\">Original</span> <span class=\"n\">message</span><span class=\"p\">:</span>\n  <span class=\"n\">normal</span> <span class=\"n\">output</span> <span class=\"mi\">4242</span><span class=\"o\">*</span><span class=\"n\">stopped</span><span class=\"p\">,</span><span class=\"n\">reason</span><span class=\"o\">=</span><span class=\"s2\">\"breakpoint-hit\"</span><span class=\"p\">,</span><span class=\"o\">&lt;</span><span class=\"ow\">and</span> <span class=\"n\">so</span> <span class=\"n\">on</span><span class=\"o\">...&gt;</span>\n</pre>\n</div>\n</div>\n<div id=\"install\">\n<h3>Install</h3>\n<p>Just run:</p>\n<pre>$ pip install python-gdb-mi\n</pre>\n<p>You will find the <tt><span class=\"pre\">python-gdb-mi</span></tt> package at\n<a href=\"https://pypi.python.org/pypi/python-gdb-mi\" rel=\"nofollow\">PyPI</a></p>\n</div>\n<div id=\"workarounds-for-gdb-mi-s-issues\">\n<h3>Workarounds for GDB MI\u2019s issues</h3>\n<p>There are some issues in the output of GDB. <tt><span class=\"pre\">python-gdb-mi</span></tt> tries to\nfix them implementing some minor changes in the GDB\u2019s output as\nworkarounds.</p>\n<p>See the issues and the implemented fixes in the <a href=\"regress/workarounds.rst\" rel=\"nofollow\">workarounds\ndoctest</a></p>\n</div>\n<div id=\"hacking-contributing\">\n<h3>Hacking/Contributing</h3>\n<p>Go ahead! Clone the repository, do a small fix/enhancement, run\n<tt>make test</tt> to ensure that everything is working as expected and then\npropose your Pull Request!</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 3292886, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "49a6260b1d6e845bef3ef0c4665b50cc", "sha256": "49de7bbea967439805b9dbdad354edf7897e37c4fe95b61364fd7615ca5d8804"}, "downloads": -1, "filename": "python_gdb_mi-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "49a6260b1d6e845bef3ef0c4665b50cc", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.6", "size": 5253, "upload_time": "2017-10-30T14:12:44", "upload_time_iso_8601": "2017-10-30T14:12:44.208532Z", "url": "https://files.pythonhosted.org/packages/f6/0a/f3567bd594182d6f976f6215e9fea8713b69c1473568dfb30502276e49cc/python_gdb_mi-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "20ef02e5448d68c77b95be91138bf2e8", "sha256": "022c40cd3eaa58717d37d2f7ffabe929c39c02ead2b6a9fc7a9e60b7170b3173"}, "downloads": -1, "filename": "python-gdb-mi-1.0.0.tar.gz", "has_sig": false, "md5_digest": "20ef02e5448d68c77b95be91138bf2e8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.6", "size": 4087, "upload_time": "2017-10-30T14:12:45", "upload_time_iso_8601": "2017-10-30T14:12:45.329818Z", "url": "https://files.pythonhosted.org/packages/6a/a9/b1db725e99dc3db747c0ea2ae85b8c8d892a403e5267fd24f9bfd63d4ca7/python-gdb-mi-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "e129f586fdbd653b19c9d95dc96ce361", "sha256": "3b4597508334642752eece70542152e2998512a9607ee8165a98c53916e6a8c7"}, "downloads": -1, "filename": "python_gdb_mi-1.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e129f586fdbd653b19c9d95dc96ce361", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.6", "size": 11720, "upload_time": "2017-10-30T23:32:24", "upload_time_iso_8601": "2017-10-30T23:32:24.051393Z", "url": "https://files.pythonhosted.org/packages/d2/b5/a291951c7250177f851eef99eb42da451d5246ec669e91cc626c92cfb6a6/python_gdb_mi-1.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8f94bde1946775a7d4baf8ad1be12ec1", "sha256": "ba42d388ef5dd72c36654a65d8c08a2f552f793520f9c31c76ce89a80e918391"}, "downloads": -1, "filename": "python-gdb-mi-1.0.1.tar.gz", "has_sig": false, "md5_digest": "8f94bde1946775a7d4baf8ad1be12ec1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.6", "size": 8034, "upload_time": "2017-10-30T23:32:25", "upload_time_iso_8601": "2017-10-30T23:32:25.509865Z", "url": "https://files.pythonhosted.org/packages/dc/6e/7a8aebc081bb708089395ee53201995e89fa41192bbd96f953d8d3c901a8/python-gdb-mi-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e129f586fdbd653b19c9d95dc96ce361", "sha256": "3b4597508334642752eece70542152e2998512a9607ee8165a98c53916e6a8c7"}, "downloads": -1, "filename": "python_gdb_mi-1.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e129f586fdbd653b19c9d95dc96ce361", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.6", "size": 11720, "upload_time": "2017-10-30T23:32:24", "upload_time_iso_8601": "2017-10-30T23:32:24.051393Z", "url": "https://files.pythonhosted.org/packages/d2/b5/a291951c7250177f851eef99eb42da451d5246ec669e91cc626c92cfb6a6/python_gdb_mi-1.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8f94bde1946775a7d4baf8ad1be12ec1", "sha256": "ba42d388ef5dd72c36654a65d8c08a2f552f793520f9c31c76ce89a80e918391"}, "downloads": -1, "filename": "python-gdb-mi-1.0.1.tar.gz", "has_sig": false, "md5_digest": "8f94bde1946775a7d4baf8ad1be12ec1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.6", "size": 8034, "upload_time": "2017-10-30T23:32:25", "upload_time_iso_8601": "2017-10-30T23:32:25.509865Z", "url": "https://files.pythonhosted.org/packages/dc/6e/7a8aebc081bb708089395ee53201995e89fa41192bbd96f953d8d3c901a8/python-gdb-mi-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:17:32 2020"}