{"info": {"author": "Thomas Maurice", "author_email": "thomas@maurice.fr", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: Developers", "Programming Language :: Python :: 2.7", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "clifacgtory\n####################\n\nWriting CLI is **NOT** funny. Especially with all the\nargument parsing and shit. This is why this module exists.\n\nInstalling\n==========\n\n.. code:: bash\n\n    $ pip install clifactory\n\n.. code:: python\n\n    #!/usr/bin/env python\n    # -*- coding: utf-8 -*-\n\n    from clifactory import CommandLineInterface, Argument\n\n    cli = CommandLineInterface()\n    users = [\"John Doe\", \"Dick Head\"]\n\n    @cli.endpoint(Argument('user', help='username to add'))\n    def do_user_add(args):\n        users.append(args.user)\n        print users\n\n    @cli.endpoint()\n    def do_user_list(args):\n        print users\n\n        cli.parse()\n\nAs shown in the ``example.py`` file.\n\nYou can run it like:\n\n.. code:: bash\n\n    $ ./exemple.py user add\n    usage: exemple.py user add [-h] user\n    exemple.py user add: error: too few arguments\n    $ ./exemple.py user add \"foo bar\"\n    ['John Doe', 'Dick Head', 'foo bar']\n\n\nSimple as that :)\n\nDocumentation\n=============\n\nSome more documentation is comming, stay tuned.\n\nUsing the module\n----------------\n\nYou have to import the components you need, which for now are:\n\n* ``CommandLineInterface``\n* ``Argument``\n* ``ExclusiveGroup``\n\nThen instanciate a ``CommandLineInterface``:\n\n.. code:: python\n\n    cli = CommandLineInterface()\n\n\nThen decorate your endpoint as follows:\n\n.. code:: python\n\n    @cli.endpoint(\n        Argument('argument', help=\"some help\"), # positional arg\n        Argument('--user', '-u') # optional argument\n    )\n    def do_something(args):\n        print args # args is a argparse.Namespace object\n\nYou can add as many arguments as you wish, the parameters\nhave to follow the ``argparse.add_argument`` syntax. Note\nthat your function's name must be prefixed with ``do_`` in\norder for the parsing to work. It will just break the\nname of the function into a \"tree\" where each ``_``-delimited\nword will be a leaf. So you can add more methods to your\n'user' endpoint.\n\nFinally to parse something, just call:\n\n.. code:: python\n\n    cli.parse()\n\nThis will parse arguments from ``sys.argv``. Alternatively,\nyou may parse an arbitrary string:\n\n.. code:: python\n\n    cli.parse(\"some string\")\n\nI told you it does not have to be hard!\n\nLicence\n=======\n\n::\n\n    Copyright (C) 2015  Thomas Maurice <thomas@maurice.fr>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/thomas-maurice/clifactory", "keywords": null, "license": "WTFPL", "maintainer": null, "maintainer_email": null, "name": "clifactory", "package_url": "https://pypi.org/project/clifactory/", "platform": "any", "project_url": "https://pypi.org/project/clifactory/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/thomas-maurice/clifactory"}, "release_url": "https://pypi.org/project/clifactory/0.1.1/", "requires_dist": null, "requires_python": null, "summary": "Command line made as easy as a web app", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Writing CLI is <strong>NOT</strong> funny. Especially with all the\nargument parsing and shit. This is why this module exists.</p>\n<div id=\"installing\">\n<h2>Installing</h2>\n<pre>$ pip install clifactory\n</pre>\n<pre><span class=\"ch\">#!/usr/bin/env python</span>\n<span class=\"c1\"># -*- coding: utf-8 -*-</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">clifactory</span> <span class=\"kn\">import</span> <span class=\"n\">CommandLineInterface</span><span class=\"p\">,</span> <span class=\"n\">Argument</span>\n\n<span class=\"n\">cli</span> <span class=\"o\">=</span> <span class=\"n\">CommandLineInterface</span><span class=\"p\">()</span>\n<span class=\"n\">users</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"John Doe\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Dick Head\"</span><span class=\"p\">]</span>\n\n<span class=\"nd\">@cli</span><span class=\"o\">.</span><span class=\"n\">endpoint</span><span class=\"p\">(</span><span class=\"n\">Argument</span><span class=\"p\">(</span><span class=\"s1\">'user'</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s1\">'username to add'</span><span class=\"p\">))</span>\n<span class=\"k\">def</span> <span class=\"nf\">do_user_add</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">):</span>\n    <span class=\"n\">users</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span> <span class=\"n\">users</span>\n\n<span class=\"nd\">@cli</span><span class=\"o\">.</span><span class=\"n\">endpoint</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">do_user_list</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span> <span class=\"n\">users</span>\n\n    <span class=\"n\">cli</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">()</span>\n</pre>\n<p>As shown in the <tt>example.py</tt> file.</p>\n<p>You can run it like:</p>\n<pre>$ ./exemple.py user add\nusage: exemple.py user add <span class=\"o\">[</span>-h<span class=\"o\">]</span> user\nexemple.py user add: error: too few arguments\n$ ./exemple.py user add <span class=\"s2\">\"foo bar\"</span>\n<span class=\"o\">[</span><span class=\"s1\">'John Doe'</span>, <span class=\"s1\">'Dick Head'</span>, <span class=\"s1\">'foo bar'</span><span class=\"o\">]</span>\n</pre>\n<p>Simple as that :)</p>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p>Some more documentation is comming, stay tuned.</p>\n<div id=\"using-the-module\">\n<h3>Using the module</h3>\n<p>You have to import the components you need, which for now are:</p>\n<ul>\n<li><tt>CommandLineInterface</tt></li>\n<li><tt>Argument</tt></li>\n<li><tt>ExclusiveGroup</tt></li>\n</ul>\n<p>Then instanciate a <tt>CommandLineInterface</tt>:</p>\n<pre><span class=\"n\">cli</span> <span class=\"o\">=</span> <span class=\"n\">CommandLineInterface</span><span class=\"p\">()</span>\n</pre>\n<p>Then decorate your endpoint as follows:</p>\n<pre><span class=\"nd\">@cli</span><span class=\"o\">.</span><span class=\"n\">endpoint</span><span class=\"p\">(</span>\n    <span class=\"n\">Argument</span><span class=\"p\">(</span><span class=\"s1\">'argument'</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">\"some help\"</span><span class=\"p\">),</span> <span class=\"c1\"># positional arg</span>\n    <span class=\"n\">Argument</span><span class=\"p\">(</span><span class=\"s1\">'--user'</span><span class=\"p\">,</span> <span class=\"s1\">'-u'</span><span class=\"p\">)</span> <span class=\"c1\"># optional argument</span>\n<span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">do_something</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span> <span class=\"n\">args</span> <span class=\"c1\"># args is a argparse.Namespace object</span>\n</pre>\n<p>You can add as many arguments as you wish, the parameters\nhave to follow the <tt>argparse.add_argument</tt> syntax. Note\nthat your function\u2019s name must be prefixed with <tt>do_</tt> in\norder for the parsing to work. It will just break the\nname of the function into a \u201ctree\u201d where each <tt>_</tt>-delimited\nword will be a leaf. So you can add more methods to your\n\u2018user\u2019 endpoint.</p>\n<p>Finally to parse something, just call:</p>\n<pre><span class=\"n\">cli</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">()</span>\n</pre>\n<p>This will parse arguments from <tt>sys.argv</tt>. Alternatively,\nyou may parse an arbitrary string:</p>\n<pre><span class=\"n\">cli</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s2\">\"some string\"</span><span class=\"p\">)</span>\n</pre>\n<p>I told you it does not have to be hard!</p>\n</div>\n</div>\n<div id=\"licence\">\n<h2>Licence</h2>\n<pre>Copyright (C) 2015  Thomas Maurice &lt;thomas@maurice.fr&gt;\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.\n</pre>\n</div>\n\n          </div>"}, "last_serial": 1705936, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "bdb811076d269e98408ffe36652219f4", "sha256": "f55689e034c5be36c74fd33d38c8ee1d3d3a3fb7d936ae4ce056aa35685c85fe"}, "downloads": -1, "filename": "clifactory-0.1.1.tar.gz", "has_sig": false, "md5_digest": "bdb811076d269e98408ffe36652219f4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4578, "upload_time": "2015-09-03T06:13:22", "upload_time_iso_8601": "2015-09-03T06:13:22.248167Z", "url": "https://files.pythonhosted.org/packages/bd/75/13ea4e04f9e2558112daede53f406cd5b0432a64718ba5f8ba8028a01786/clifactory-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bdb811076d269e98408ffe36652219f4", "sha256": "f55689e034c5be36c74fd33d38c8ee1d3d3a3fb7d936ae4ce056aa35685c85fe"}, "downloads": -1, "filename": "clifactory-0.1.1.tar.gz", "has_sig": false, "md5_digest": "bdb811076d269e98408ffe36652219f4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4578, "upload_time": "2015-09-03T06:13:22", "upload_time_iso_8601": "2015-09-03T06:13:22.248167Z", "url": "https://files.pythonhosted.org/packages/bd/75/13ea4e04f9e2558112daede53f406cd5b0432a64718ba5f8ba8028a01786/clifactory-0.1.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:19:00 2020"}